{
  "metadata": {
    "timestamp": 1736710821390,
    "page": 324,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ninject/Ninject",
      "stars": 2681,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.029296875,
          "content": ".vs\n*.user\nbin\nobj\nTestResults"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 11.1669921875,
          "content": "# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\nand this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).\n\n## [4.0.0-beta.1] - 2022-10-05\n\n### Changed\n- Dropped support for .NET Framework 4.5. We now only provide support for the .NET Framework 4.6, .NET 6 and .NET Standard 2.0.\n- Changed return value of IBindingResolver (and implementing classes) from `IEnumerable<IBinding>` to `ICollection<IBinding>`.\n- The `IConstructorScorer ConstructorScorer` and `ICollection<IInjectionHeuristic> InjectionHeuristics` properties has been removed from **(I)Selector**\n- Changed return value of `ISelector.SelectConstructorsForInjection(Type type)` (and implementing classes) from `IEnumerable<ConstructorInfo>` to `ConstructorInfo[]`.\n- The `T Get<T>(string key, T defaultValue)` and `void Set(string key, object value)` methods have been removed from **(I)NinjectSettings**.\n- The `GetBindings(Type service)` method in **IKernel** and **KernelBase** now returns `IBinding[]` instead of `IEnumerable<IBinding>`.\n- Removed `IHaveKernel` inheritance from `IBindingSyntax`.\n- Removed `IInjectorFactory InjectorFactory` property from `PropertyInjectionStrategy`.\n- Added a `PropertyInjection` setting that can be used to control whether property injection is enabled. By default, property injection is enabled.\n- Added a `MethodInjection` setting that can be used to control whether method injection is enabled. By default, method injection is enabled.\n- Changed type of parameters argument in `Request` constructor from `IEnumerable<IParameter>` to `IReadOnlyList<IParameter>`.\n- Changed type of parameters argument in `IResolutionRoot.CreateRequest(...)` from `IEnumerable<IParameter>` to `IReadOnlyList<IParameter>`.\n- Changed type of parameters argument in `KernelBase.CreateRequest(...)` from `IEnumerable<IParameter>` to `IReadOnlyList<IParameter>`.\n- Changed type of Parameters property in `IBindingConfiguration` (and implementing classes) from `ICollection<IParameter>` to `IList<IParameter>`.\n- Changed type of Parameters property in `Request` and `Context` from `IEnumerable<IParameter>` to `IReadOnlyList<IParameter>`.\n- Added a `object ResolveSingle(IRequest request)` method to `IResolutionRoot` which is optimized for resolving a single instance of a given service.\n  This new method is used in the `Get`, `TryGet` and `TryGetAndThrowOnInvalidBinding` extension method.\n\n### Fixed\n- Bind/Rebind to a constant generic List always returns an empty list [#333](https://github.com/ninject/Ninject/issues/333)\n\n## [3.3.6] - 2022-05-27\n\n### Fixed\n- Infinite loop when call `TryGet<T>(string name)` [#393](https://github.com/ninject/Ninject/issues/393)\n- `VerifycationException` when inject pointer type (.NET Framework only)\n\n## [3.3.5] - 2022-04-23\n\n### Fixed\n- `InvalidProgramException` when constructor argument is Pointer or Value type [#386](https://github.com/ninject/Ninject/issues/386) [#389](https://github.com/ninject/Ninject/issues/389)\n- Request for empty `List<>` returns non-empty `List<>` [#263](https://github.com/ninject/Ninject/issues/263)\n- Call `kernel.Get<T>()` two times do not give the same result [#262](https://github.com/ninject/Ninject/issues/262)\n\n### Changed\n- Changed `IServiceProvider.GetService` implementation [#376](https://github.com/ninject/Ninject/issues/376)\n- Consolidated handling of `isUnique` parameter for `TryGet` [#378](https://github.com/ninject/Ninject/issues/378)\n\n## [3.3.5-rc2] - 2022-04-17\n\n### Changed\n- Changed `IServiceProvider.GetService` implementation [#376](https://github.com/ninject/Ninject/issues/376)\n- Consolidated handling of `isUnique` parameter for `TryGet` [#378](https://github.com/ninject/Ninject/issues/378)\n\n## [3.3.5-rc1] - 2022-04-12\n\n### Fixed\n- `InvalidProgramException` when constructor argument is Pointer or Value type [#386](https://github.com/ninject/Ninject/issues/386) [#389](https://github.com/ninject/Ninject/issues/389)\n- Request for empty `List<>` returns non-empty `List<>` [#263](https://github.com/ninject/Ninject/issues/263)\n- Call `kernel.Get<T>()` two times do not give the same result [#262](https://github.com/ninject/Ninject/issues/262)\n\n## [3.3.4] - 2017-11-13\n\n### Fixed\n- Throw cyclic dependency exception when resolve a named binding with decoration pattern [#261](https://github.com/ninject/Ninject/issues/261)\n\n## [3.3.3] - 2017-10-22\n\n### Fixed\n- Removed debug code.\n\n## [3.3.2] - 2017-10-22\n\n### Added\n- Ninject for .NET Core can now load extensions automatically.\n- Added back CLSCompliant(true)\n\n## [3.3.2-rc1] - 2017-10-15\n\n### Added\n- Added back CLSCompliant(true)\n\n### Removed\n- Removed executing assembly's directory from the base directories.\n\n## [3.3.2-beta1] - 2017-10-07\n\n### Added\n- Ninject for .NET Core can now load extensions automatically.\n- The executing assembly's directory is considered as one of the base directories.\n\n## [3.3.1] - 2017-10-05\n\n### Added\n- Support `kernel.Get<IEnumerable<IFoo>>()` [#252](https://github.com/ninject/Ninject/issues/252)\n\n### Changed\n- Moved BindingPrecedenceComparer to Bindings folder.\n\n### Deprecated \n- The `GetValues` and `GetValue` methods of `Target` are obsolete.\n\n### Fixed\n- Cyclical dependency check throws false positive for decorator pattern [#251](https://github.com/ninject/Ninject/issue/251)\n\n## [3.3.0] - 2017-09-26\n\n### Changed\n- Renamed ReleaseNotes.md to CHANGELOG.md and updated the format.\n\n## [3.3.0-beta1] - 2017-09-23\n\n### Added\n- Support .NET Standard 2.0\n- Strongly typed overloads of `WithConstructorArgument` which use a callback to get the value [#197](https://github.com/ninject/Ninject/pull/197)\n- Do not choose constructors with an `ObsoleteAttribute` [#224](https://github.com/ninject/Ninject/pull/224)\n- Meaningful exception message if there is error in configuration [#240](https://github.com/ninject/Ninject/issues/240) [#245](https://github.com/ninject/Ninject/issues/245)\n\n### Changed\n- Using `HasDefaultValue` instead of `DBNull` [#235](https://github.com/ninject/Ninject/issues/235)\n- Array/List of concrete classes will return empty if the concrete class is not explicitly binded [#227](https://github.com/ninject/Ninject/issues/227)\n\n### Removed\n- Support for .NET 3.5 and Silverlight\n\n### Fixed\n- Improved cyclical dependencies detection [#143](https://github.com/ninject/Ninject/issues/143)\n- `InvalidProgramException` when select constructors for `MulticastDelegate` [#175](https://github.com/ninject/ninject/issues/175)\n- `WhenMemberHas` broken [#189](https://github.com/ninject/Ninject/issues/189)\n- Injection into private parent parent properties fails [#214](https://github.com/ninject/Ninject/issues/241) [#217](https://github.com/ninject/Ninject/issues/217)\n- Break Singleton / circular dependency `WithPropertyValue` or `OnActivation` callback [#221](https://github.com/ninject/Ninject/issues/221) [#224](https://github.com/ninject/Ninject/issues/224)\n- The invoked member is not supported in a dynamic assembly [#225](https://github.com/ninject/Ninject/issues/225)\n- Conditional binding is not being considered when score constructors [#237](https://github.com/ninject/Ninject/issues/237)\n\n## [3.2]\n\n### Added\n- bool IRequest.ForceUnique: In case there is an uncoditional and a conditional binding, return the conditional one. In case there are multiple unconditional or conditional bindings, throw an exception.\n- IResolutionRoot.TryGetAndThrowOnInvalidBinding<T> (extension method): Returns null if there is no binding, but throws ActivationException in case there is a binding which could not be activated.\n- TypeMatchingConstructorArgument introduced.\n- ToConstructor() can now accept results from methods as argument e.g. ToConstructor(_ => new Foo(this.GetBar())\n- WhenNoAncestorMatches, WhenAnyAncestorMatches and WhenNoAncestorNamed When overloads\n- WeakConstructorArgument and WeakPropertyValue that keep a weak reference to the value only so that Ninject has no reference on them when caching the created instance.\n- Overloads for WhenInjectedInto and WhenInjectedExactlyInto that take multiple types to support multiple allowed parents.\n\n### Changed\n- Added WhenAnyAncestorNamed and marked mispelled WhenAnyAnchestorNamed as obsolete \n- Release method was moved from IKernel to the IResolutionRoot interface \n\n### Fixed\n- Private properties of base class were not checked for existence of setter and Inject attribute\n- When an object that is the scope of another object is released an Exception was thrown. \n\n## [3.0.1]\n\n### Added\n- The default scope can be changed in the NinjectSettings using\n\n### Changed\n- Open generics can now be passed to WhenInjectedInto\n\n### Fixed\n- Fixed race condition in the GarbageCollectionCachePruner\n\n## [3.0.0]\n\n### Changed\n- The constructor scorer ignores implicit bindings\n- The constructor scorer ignores self bindings\n\n### [3.0.0-rc3]\n\n### Added\n- Support for default parameters. If not explicit binding exists for a dependency but there is default value defined it is used instead.\n- Support to define the constructor and constructor arguments using ToConstructor \"to\" overload\n- WhenInjectedExactlyInto When overload: Matches only if the target is exactly the specified type. This was the behavior of WhenInjectedInto in Ninject 2.2.\n- WhenAnyAnchestorNamed. Matches if any of the anchestor bindings is named with the specified name.\n- Default binding for IResolutionRoot that returns the kernel.\n- Open generic bindings can be overriden by closed generics for specific types.\n- Support for extensions that they can define bindings that return the same instance for different interfaces (interface segregation principle).\n- Generic Overloads for OnActivation and OnDeactivation that can be used to cast the implementation type. \n- Bind<T1,T2, ...>() to define multiple interfaces for one service.\n- Rebind<T1,T2, ...>() to define multiple interfaces for one service.\n- Support to inject constructor arguments to deeper levels using new ConstructorArgument(\"name\", value, true)\n\n### Changed\n- WhenInjectedInto matches also if the target derives from the specified type.\n- ToConstant bindings are in singleton scope by default\n- Separate project for medium trust environments.\n- Open generic bindings can be overwritten by closed generic bindings\n- Ninject modules have a new method VerifyRequiredModulesAreLoaded to check if their dependencies are loaded.\n- If several constructors have the same score an ActivationExcpetion is thrown.\n\n### Removed\n- No web builds. All builds are have no reference to web anymore\n\n### Fixed\n- Breaking change: Get all will now return all bindings and not skip unconditional ones anymore in case there is a conditional one. This is the same behavior as the version 2.0.1 and bevore had. \n- Fixed that the CF and SL version of the activation cache did not properly remove the weak references\n- (for CF): The CF version threw an exception when a class had a generic method on a base class. This bugfix has the side effect that the Inject attribute cannot be defined on base methods anymore. It has to be defined on the overriden method! \n- The constructor scorer accepts default values\n- The constructor scorer accepts self bindings\n\n\n## [2.2.1.0]\n\n### Fixed\n- For classes that have several virtual indexers and at least one of them overridden an ambiguous match exception was thrown when they were injected.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.9716796875,
          "content": "Ninject is intended to be used in both open-source and commercial environments. To allow its use in as many\nsituations as possible, Ninject is dual-licensed. You may choose to use Ninject under either the Apache License,\nVersion 2.0, or the Microsoft Public License (Ms-PL). These licenses are essentially identical, but you are\nencouraged to evaluate both to determine which best fits your intended use.\n\n-----\n\nApache License, Version 2.0\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1\nthrough 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by,\nor are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power,\ndirect or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or\n(ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including but not limited to software source\ncode, documentation source, and configuration files.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form,\nincluding but not limited to compiled object code, generated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License,\nas indicated by a copyright notice that is included in or attached to the work (an example is provided in the\nAppendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from)\nthe Work and for which the editorial revisions, annotations, elaborations, or other modifications represent,\nas a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include\nworks that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative\nWorks thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications\nor additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion\nin the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the\ncopyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written\ncommunication sent to the Licensor or its representatives, including but not limited to communication on electronic\nmailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of,\nthe Licensor for the purpose of discussing and improving the Work, but excluding communication that is\nconspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been\nreceived by Licensor and subsequently incorporated within the Work.\n\n2. Grant of Copyright License.\n\nSubject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide,\nnon-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or\nObject form.\n\n3. Grant of Patent License.\n\nSubject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide,\nnon-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make,\nhave made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to\nthose patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone\nor by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging\nthat the Work or a Contribution incorporated within the Work constitutes direct or contributory patent\ninfringement, then any patent licenses granted to You under this License for that Work shall terminate as of\nthe date such litigation is filed.\n\n4. Redistribution.\n\nYou may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You meet the following conditions:\n\n  1. You must give any other recipients of the Work or Derivative Works a copy of this License; and\n  2. You must cause any modified files to carry prominent notices stating that You changed the files; and\n  3. You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent,\n     trademark, and attribution notices from the Source form of the Work, excluding those notices that do not\n     pertain to any part of the Derivative Works; and\n  4. If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You\n     distribute must include a readable copy of the attribution notices contained within such NOTICE file,\n     excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the\n     following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source\n     form or documentation, if provided along with the Derivative Works; or, within a display generated by the\n     Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file\n     are for informational purposes only and do not modify the License. You may add Your own attribution notices\n     within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work,\n     provided that such additional attribution notices cannot be construed as modifying the License.\n  5. You may add Your own copyright statement to Your modifications and may provide additional or different license\n     terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative\n     Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the\n     conditions stated in this License.\n\n5. Submission of Contributions.\n\nUnless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You\nto the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you\nmay have executed with Licensor regarding such Contributions.\n\n6. Trademarks.\n\nThis License does not grant permission to use the trade names, trademarks, service marks, or product names of the\nLicensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing\nthe content of the NOTICE file.\n\n7. Disclaimer of Warranty.\n\nUnless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides\nits Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,\nincluding, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS\nFOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing\nthe Work and assume any risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability.\n\nIn no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless\nrequired by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any\nContributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential\ndamages of any character arising as a result of this License or out of the use or inability to use the Work\n(including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction,\nor any and all other commercial damages or losses), even if such Contributor has been advised of the possibility\nof such damages.\n\n9. Accepting Warranty or Additional Liability.\n\nWhile redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for,\nacceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only on Your own behalf and on Your sole\nresponsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold\neach Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\n\n-----\n\nMicrosoft Public License (Ms-PL)\n\nThis license governs use of the accompanying software. If you use the software, you\naccept this license. If you do not accept the license, do not use the software.\n\n1. Definitions\nThe terms \"reproduce,\" \"reproduction,\" \"derivative works,\" and \"distribution\" have the\nsame meaning here as under U.S. copyright law.\nA \"contribution\" is the original software, or any additions or changes to the software.\nA \"contributor\" is any person that distributes its contribution under this license.\n\"Licensed patents\" are a contributor's patent claims that read directly on its contribution.\n\n2. Grant of Rights\n(A) Copyright Grant- Subject to the terms of this license, including the license conditions and\n    limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free\n    copyright license to reproduce its contribution, prepare derivative works of its contribution,\n    and distribute its contribution or any derivative works that you create.\n(B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations\n    in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free license under\n    its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose\n    of its contribution in the software or derivative works of the contribution in the software.\n\n3. Conditions and Limitations\n(A) No Trademark License- This license does not grant you rights to use any contributors' name, logo,\n    or trademarks.\n(B) If you bring a patent claim against any contributor over patents that you claim are infringed by\n    the software, your patent license from such contributor to the software ends automatically.\n(C) If you distribute any portion of the software, you must retain all copyright, patent, trademark,\n    and attribution notices that are present in the software.\n(D) If you distribute any portion of the software in source code form, you may do so only under this\n    license by including a complete copy of this license with your distribution. If you distribute\n    any portion of the software in compiled or object code form, you may only do so under a license\n    that complies with this license.\n(E) The software is licensed \"as-is.\" You bear the risk of using it. The contributors give no express\n    warranties, guarantees or conditions. You may have additional consumer rights under your local laws\n    which this license cannot change. To the extent permitted under your local laws, the contributors\n    exclude the implied warranties of merchantability, fitness for a particular purpose and non-infringement."
        },
        {
          "name": "Ninject.sln",
          "type": "blob",
          "size": 3.392578125,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.1.32414.318\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{3E299B94-5F07-49DE-8226-55EDC56F13E3}\"\n\tProjectSection(SolutionItems) = preProject\n\t\tappveyor.yml = appveyor.yml\n\t\tCHANGELOG.md = CHANGELOG.md\n\t\tREADME.md = README.md\n\t\tversion.json = version.json\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Ninject\", \"src\\Ninject\\Ninject.csproj\", \"{25A6D723-B248-4168-BB2B-50FBD29209A5}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Ninject.Tests\", \"src\\Ninject.Tests\\Ninject.Tests.csproj\", \"{B53AF472-7F44-4AC7-9F00-98E9EB264768}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Ninject.Tests.TestAssembly\", \"src\\Ninject.Tests.TestAssembly\\Ninject.Tests.TestAssembly.csproj\", \"{339DD924-374A-4221-8671-BE951AD280F9}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Ninject.Tests.TestModule\", \"src\\Ninject.Tests.TestModule\\Ninject.Tests.TestModule.csproj\", \"{3D6710B4-726A-44B2-A4A2-CCF3882FC611}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Ninject.Benchmarks\", \"src\\Ninject.Benchmarks\\Ninject.Benchmarks.csproj\", \"{78AA0240-EAAE-4D63-83C7-01E2BF702B8D}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{25A6D723-B248-4168-BB2B-50FBD29209A5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{25A6D723-B248-4168-BB2B-50FBD29209A5}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{25A6D723-B248-4168-BB2B-50FBD29209A5}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{25A6D723-B248-4168-BB2B-50FBD29209A5}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{B53AF472-7F44-4AC7-9F00-98E9EB264768}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{B53AF472-7F44-4AC7-9F00-98E9EB264768}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{B53AF472-7F44-4AC7-9F00-98E9EB264768}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{B53AF472-7F44-4AC7-9F00-98E9EB264768}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{339DD924-374A-4221-8671-BE951AD280F9}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{339DD924-374A-4221-8671-BE951AD280F9}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{339DD924-374A-4221-8671-BE951AD280F9}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{339DD924-374A-4221-8671-BE951AD280F9}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{3D6710B4-726A-44B2-A4A2-CCF3882FC611}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{3D6710B4-726A-44B2-A4A2-CCF3882FC611}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{3D6710B4-726A-44B2-A4A2-CCF3882FC611}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{3D6710B4-726A-44B2-A4A2-CCF3882FC611}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{78AA0240-EAAE-4D63-83C7-01E2BF702B8D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{78AA0240-EAAE-4D63-83C7-01E2BF702B8D}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{78AA0240-EAAE-4D63-83C7-01E2BF702B8D}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{78AA0240-EAAE-4D63-83C7-01E2BF702B8D}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {8ADBE774-C99E-45D1-B416-A9D66AB97C82}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.689453125,
          "content": "# Ninject \n\n[![Build status](https://ci.appveyor.com/api/projects/status/vf412wymbva3x3nv?svg=true)](https://ci.appveyor.com/project/Ninject/ninject)\n[![codecov](https://codecov.io/gh/ninject/Ninject/branch/main/graph/badge.svg)](https://codecov.io/gh/ninject/Ninject)\n[![NuGet Version](http://img.shields.io/nuget/v/Ninject.svg?style=flat)](https://www.nuget.org/packages/Ninject/) \n[![NuGet Downloads](http://img.shields.io/nuget/dt/Ninject.svg?style=flat)](https://www.nuget.org/packages/Ninject/)\n\nNinject is a lightning-fast, ultra-lightweight dependency injector for .NET applications. It helps you split your\napplication into a collection of loosely-coupled, highly-cohesive pieces, and then glue them back together in a\nflexible manner. By using Ninject to support your software's architecture, your code will become easier to write,\nreuse, test, and modify.\n\n*Write your code so it's flexible...*\n```C#\npublic class Samurai {\n    public IWeapon Weapon { get; private set; }\n    public Samurai(IWeapon weapon) \n    {\n        this.Weapon = weapon;\n    }\n}\n```\n*...and let Ninject glue it together for you.*\n```C#\npublic class WarriorModule : NinjectModule\n{\n    public override void Load() \n    {\n        this.Bind<IWeapon>().To<Sword>();\n    }\n}\n```\n\n## Features:\n\n1. **Focused.** Too many existing dependency injection projects sacrifice usability for features that aren't often necessary.\n   Each time a feature is added to Ninject, its benefit is weighed against the complexity it adds to everyday use. Our goal\n   is to keep the barrier to entry - the baseline level of knowledge required to use Ninject - as low as possible. Ninject\n   has many advanced features, but understanding them is not required to use the basic features.\n   \n2. **Sleek.** Framework bloat is a major concern for some projects, and as such, all of Ninject's core functionality is in a\n   single assembly with no dependencies outside the .NET base class library. This single assembly's footprint is approximately\n   85KB when compiled for release.\n   \n3. **Fast.** Instead of relying on reflection for invocation, Ninject takes advantage of lightweight code generation in the CLR.\n   This can result in a dramatic (8-50x) improvement in performance in many situations.\n   \n4. **Precise.** Ninject helps developers get things right the first time around. Rather than relying on XML mapping files and\n   string identifiers to wire up components, Ninject provides a robust domain-specific language. This means that Ninject\n   takes advantage of the capabilities of the language (like type-safety) and the IDE (like IntelliSense and code completion).\n   \n5. **Agile.** Ninject is designed around a component-based architecture, with customization and evolution in mind. Many facets\n   of the system can be augmented or modified to fit the requirements of each project.\n   \n6. **Stealthy.** Ninject will not invade your code. You can easily isolate the dependency on Ninject to a single assembly in\n   your project.\n   \n7. **Powerful.** Ninject includes many advanced features. For example, Ninject is the first dependency injector to support\n   contextual binding, in which a different concrete implementation of a service may be injected depending on the context in\n   which it is requested.\n\n## Everything else is in Extensions\n\nYes, sounds slim and focused, but where is the support for all the features that the competitors have? \n\nGenerally, they are maintained as specific focused extensions with owners who keep them in sync and pull in new ideas and fixes fast. These are summarized on the [extensions](http://ninject.org/extensions) section of the project website. Most are hosted alongside the core project right here.\n\n## License\nNinject is intended to be used in both open-source and commercial environments. To allow its use in as many\nsituations as possible, Ninject is dual-licensed. You may choose to use Ninject under either the Apache License,\nVersion 2.0, or the Microsoft Public License (Ms-PL). These licenses are essentially identical, but you are\nencouraged to evaluate both to determine which best fits your intended use.\n\nRefer to [LICENSE.txt](https://github.com/ninject/ninject/blob/master/LICENSE.txt) for detailed information.\n\n## Changes history\n- [Changes in Ninject 3](https://github.com/ninject/ninject/wiki/Changes-in-Ninject-3)\n- [Changes in Ninject 2](https://github.com/ninject/ninject/wiki/Changes-in-Ninject-2)\n- [Detailed change log](https://github.com/ninject/ninject/blob/master/CHANGELOG.md)\n\n## Resources\n- [Project website](http://ninject.org/)\n- [Documentation](http://ninject.org/learn)\n- [Wiki](https://github.com/ninject/ninject/wiki)\n- [Nate's blog](http://kohari.org/)\n- [Ian's blog](http://innovatian.com/)\n- [Remo's blog](http://www.planetgeek.ch/author/remo-gloor/)\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.9423828125,
          "content": "configuration: Release\n\nimage: Visual Studio 2022\n\ncache:\n  - '%LocalAppData%\\NuGet\\v3-cache -> **\\*.csproj'\n\nbefore_build:\n  - dotnet restore --verbosity quiet\n\nbuild:\n  parallel: true\n  verbosity: minimal\n\ntest_script:\n  - dotnet test --configuration Release --no-build --collect=\"Code Coverage\" src\\Ninject.Tests\n  - nuget install Microsoft.CodeCoverage -x -Verbosity quiet\n  - for /f %%G in ('dir /b /s *.coverage') do Microsoft.CodeCoverage\\build\\netstandard1.0\\CodeCoverage\\CodeCoverage analyze /output:%%~dpnG.coverage.xml \"%%G\"\n\nafter_test:\n  - ps: |\n      $ProgressPreference = 'SilentlyContinue'\n      Invoke-WebRequest -Uri https://uploader.codecov.io/latest/windows/codecov.exe -Outfile codecov.exe\n      .\\codecov.exe -f *.coverage.xml\n\nartifacts:\n  - path: 'src\\**\\*.nupkg'\n  - path: 'src\\**\\*.snupkg'\n\ndeploy:\n  provider: NuGet\n  api_key:\n    secure: MgcHlxjQ6r/qVrOqrfPOqohB0KilPGA5ogx4/L6viXQGI7lj6k0HrmI+6dC9BnxI\n  on:\n    appveyor_repo_tag: true\n"
        },
        {
          "name": "logos",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.json",
          "type": "blob",
          "size": 0.34765625,
          "content": "{\n  \"$schema\": \"https://raw.githubusercontent.com/dotnet/Nerdbank.GitVersioning/master/src/NerdBank.GitVersioning/version.schema.json\",\n  \"version\": \"4.0.0-beta.1\",\n  \"nuGetPackageVersion\": {\n    \"semVer\": 2.0\n  },\n  \"publicReleaseRefSpec\": [\n    \"^refs/tags/\\\\d+\\\\.\\\\d+\\\\.\\\\d+\"\n  ],\n  \"cloudBuild\": {\n    \"buildNumber\": {\n      \"enabled\": true\n    }\n  }\n}"
        }
      ]
    }
  ]
}