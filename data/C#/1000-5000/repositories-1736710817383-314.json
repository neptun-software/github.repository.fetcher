{
  "metadata": {
    "timestamp": 1736710817383,
    "page": 314,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nsubstitute/NSubstitute",
      "stars": 2722,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.859375,
          "content": "root = true\n\n[*]\ntrim_trailing_whitespace = true\n\n[*.{cs,fs,fsx}]\nindent_size = 4\nindent_style = space\n\n[*.{sln,csproj,fsproj,yml,props}]\nindent_size = 2\nindent_style = space\n\n[*.cs]\n# Disable \"this.\" keyword qualification in code\ndotnet_style_qualification_for_field = false:suggestion\ndotnet_style_qualification_for_property = false:suggestion\ndotnet_style_qualification_for_method = false:suggestion\ndotnet_style_qualification_for_event = false:suggestion\ncsharp_style_namespace_declarations = file_scoped:warning\ndotnet_style_prefer_collection_expression = true:warning\ndotnet_style_collection_initializer = true:warning\ncsharp_style_prefer_primary_constructors = true:warning\n\n# ReSharper properties\nresharper_int_align_switch_expressions = true\nresharper_keep_existing_invocation_parens_arrangement = false\nresharper_space_within_single_line_array_initializer_braces = true\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3486328125,
          "content": "# These files are text and should be normalized (convert crlf => lf)\n*.cs      text diff=csharp\n*.xaml    text\n*.csproj  text\n*.sln     text\n*.tt      text\n*.ps1     text\n*.cmd     text\n*.msbuild text\n*.md      text\n\n# Images should be treated as binary\n# (binary is a macro for -text -diff)\n*.png     binary\n*.jpeg    binary\n*.exe \t  binary\n*.dll\t  binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 5.0712890625,
          "content": "# Created by https://www.gitignore.io/api/visualstudio\n\n### VisualStudio ###\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\nbuildOutput\n\n# VS Code directory\n.vscode/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# .NET Core\nbuild.fsx.lock\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n**/Properties/launchSettings.json\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Typescript v1 declaration files\ntypings/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# End of https://www.gitignore.io/api/visualstudio\n\n# BenchmarkDotNet results\n**/BenchmarkDotNet.Artifacts/*\n\n# Generated doc site\ndocs/_site/*\n\n# Ignore VIM tmp files\n*.swp\n\n# Ignore Ionide files (https://ionide.io/)\n.ionide\n"
        },
        {
          "name": "BreakingChanges.md",
          "type": "blob",
          "size": 13.5810546875,
          "content": "6.0.0 Release\n================\n\n* Update target frameworks: .NET 8, .NET Standard 2.0.\n* Obsolete api is removed\n* CompatArg is marked as obsolete\n\n5.0.0 Release\n================\n\nDrop unsupported platforms. Now supported platforms are .NET 6+, .NET Framework 4.6.2+, .NET Standard 2.0.\n\n4.0.0 Release\n================\n\nArgument matchers (`Arg.Is`, `Arg.Any` etc.) now use [`ref` returns which were introduced in C# 7.0](https://blogs.msdn.microsoft.com/dotnet/2016/08/24/whats-new-in-csharp-7-0/#user-content-ref-returns-and-locals). This lets NSubstitute have better support for working with `out` and `ref` arguments, but also means that test written using previous NSubstitute versions will now fail to compile with pre-C# 7 compilers with the following error:\n\n> CS7085: By-reference return type 'ref T' is not supported.\n\nReason: Previous NSubstitute versions had quite limited support for `out` and `ref` arguments. Enhanced support for `out` and `ref` in C# 7 means we are likely to see these being used more frequently. As the vast majority of people using NSubstitute seem to be on C# 7+ (based on [NuGet statistics](https://www.nuget.org/stats/packages/NSubstitute?groupby=Version&groupby=ClientVersion)), we've thought it best to make sure NSubstitute's default behaviour works for these cases.\n\nWorkaround: If at all possible please update to a recent version of your .NET compiler (C# 7+, VB 2017, VB 15.3+, F# 4.1+). This should provide support for `ref` returns and make the code compile fine with the new `Arg` methods. These shipped with Visual Studio 2017. Visual Studio for Mac 2017 and JetBrains Rider 2017 also support C# 7+.\n\nIf it is not possible for you to use a C# 7-compatible compiler, we have added an `Arg.Compat` class which has all the same members as `Arg`, just without the `ref` return type. If you replace `Arg.` references with `Arg.Compat.` in your project then you can continue to use older compilers with NSubstitute 4.x. Alternatively you can use a `NSubstitute.Compatibility.CompatArg` instance in your fixture which may make migration a bit easier. Both these approaches are described in the [Compatibility argument matchers](https://nsubstitute.github.io/help/compat-args) documentation.\n\n---------------\n\nThe argument matcher change to support `out` and `ref` mentioned above can also cause a compilation error if argument matchers are used in expression trees (see issue #471):\n\n> CS8153: An expression tree lambda may not contain a call to a method, property, or indexer that returns by reference\n\nReason: Previous NSubstitute releases had very limited support for matching `out` and `ref` arguments, and this frequently caused confusion for people. We are always reluctant to introducing breaking changes, but in this case we estimated the benefit of improving support for matching `out` and `ref` arguments would outweigh the downside of no longer being able to use matchers in expression trees.\n\nWorkaround:\n* Move the NSubstitute statement/assertion outside of the expression tree; or\n* Use an `Arg.Compat.` matcher as described above and in the [Compatibility argument matchers](https://nsubstitute.github.io/help/compat-args) documentation.\n\nFor example:\n\n```\n// Given `void specify(Expression<Action> expectation)`, the following will fail to compile (CS8153):\nspecify(() => sub.Received().SomeCall(Arg.Any<int>()));\n\n// Workaround 1: move out of expression tree\nsub.Received().SomeCall(Arg.Any<int>());\n// Workaround 2: use Arg.Compat\nspecify(() => sub.Received().SomeCall(Arg.Compat.Any<int>()));\n```\n\n---------------\n\nUnused argument matchers (`Arg.Is`, `Arg.Any` etc.) will now throw an exception. This normally occurs if an argument matcher was used with a non-virtual call, or with an object that is not a substitute. This may cause existing tests to fail if they were misusing argument matchers in a way that did not cause an obvious problem.\n\nReason: Previously these were ignored, which could cause confusing test failures in subsequent tests. Now these cases should be picked up earlier and make finding the problem easier. See #89 and #279 for examples.\n\nWorkaround: Follow the instructions in the exception to fix any instances of this problem. Note that the cause of this exception can be in a previously executed test.\n\n---------------\n\nCalls made with one or more argument matchers (`Arg.Is` or `Arg.Any`) will no longer return previously configured results. NSubstitute will assume the call is being configured and avoid running logic configured via previous `Returns()` calls.\n\nIn most cases this should not affect existing tests, but there are some ambiguously nested configurations involving argument\nmatchers that can start to fail after this change.\n\nSee #345 (https://github.com/nsubstitute/NSubstitute/pull/347) for discussion of this and an example of a test whose behaviour has changed.\n\nReason: This fixes a number of issues relating to overlapping configurations (#291, #225, #146, #177).\n\nWorkaround: Separate any nested configurations that start to fail after this change.\nIf this is difficult for a specific case, create a GitHub issue with the details and we may be able to assist.\n\n---------------\n\n`ArgumentSpecificationQueue` has been removed. Custom argument specifications are now queued using `ArgMatcher.Enqueue`.\n\nReason: This was done as part of argument matching changes and refactoring of NSubstitute internals (#426, #404, #438, #477).\n\nWorkaround: Replace uses of `ArgumentSpecificationQueue.EnqueueSpecFor` with `ArgumentMatcher.Enqueue`. See [this comment on #438](https://github.com/nsubstitute/NSubstitute/issues/438#issuecomment-463091034) for an example.\n\n---------------\n\nRemoved `NSubstitute.Core.Extensions.Zip`.\n\nReason: Zip is in NET40+ and NetStandard. Was formerly provided for NET35 compatibility.\n\nWorkaround: Use `System.Linq.Enumerable.Zip`\n\n---------------\n\nRemoved obsolete `NSubstitute.Experimental.Received.InOrder`. (#351)\n\nReason: previously obsoleted by `NSubstitute.Received.InOrder`.\n\nWorkaround: Use `NSubstitute.Received.InOrder`.\n\n3.0.1 Release\n================\n\nSigned v3.x package to fix libraries that work with a mix of NSubstitute verisons. See #324.\n\n3.0.0 Release\n================\n\nNOTE: unsigned. Fixed in 3.0.1.\nNOTE: Support for NET45 and NET46 restored in 3.1.0.\n\nDropped support for older .NET platforms (pre-.NET 4.6).\n\nReason: switching to .NET Standard. This provides support for more platforms and makes the\nproject easier to maintain.\n\nWorkaround: Stay with 2.x versions for older .NET platforms, or migrate to a .NET\nStandard 1.3 compatible target such as .NET 4.6 or later. See compatibility matrix:\n\n    https://github.com/dotnet/standard/blob/master/docs/versions.md\n\n\n1.10.0 Release\n================\n\nSubstitutes will now automatically return an empty `IQueryable<T>` for\nmembers that return that type. Tests previously relying on a\nsubstitute `IQueryable<T>` will no longer work properly.\n\nReason:\n- Code that uses an `IQueryable<T>` can now run using the auto-subbed\nvalue without causing null pointer exceptions (see issue #67).\n\nFix:\n- Avoid mocking `IQueryable<T>` where possible -- configure members\nto return a real `IQueryable<T>` instead. If a substitute is required, explicitly configure the call to return a substitute:\n\n    ```\n    sub.MyQueryable().Returns(Substitute.For<IQueryable<int>>());\n    ```\n\n\n1.9.1 Release\n================\n\nSubstitutes set up to throw exception for methods with return type Task<T>\ncause compilation to fail due to the call being ambiguous (CS0121).\n\"The call is ambiguous between the following methods or properties:\n`.Returns<Task<T>>` and `.Returns<T>`\"\n\nReason:\n- To make it easier to stub async methods. See issue #189.\n\nFix:\n- Specify generic type argument explicitly. If Method() returns string:\n\n    Old: `sub.Method().Returns(x => { throw new Exception() });`\n\n    New: `sub.Method().Returns<string>(x => { throw new Exception() });`\n\n1.8.0 Release\n================\n\nIncorrect use of argument matchers outside of a member call, particularly within a\n`Returns()`, will now throw an exception (instead of causing unexpected behaviour\nin other tests: see https://github.com/nsubstitute/NSubstitute/issues/149).\n\nReason:\n- Prevent accidental incorrect use from causing hard-to-find errors in unrelated tests.\n\nFix:\n- Do not use argument matchers in Returns() or outside of where an argument is normally used.\n\n    Correct use:   `sub.Method(Arg.Any<string>()).Returns(\"hi\")`\n\n    Incorrect use: `sub.Method().Returns(Arg.Any<string>())`\n\n\n1.7.0 Release\n================\n\nAuto-substitute for pure virtual classes with at least one public static method, which\nmeans some methods and properties on substitutes that used to return null by default will now return a new substitute of that type.\n\nReason:\n- eep consistency with the behaviour of other pure virtual classes.\n\nFix:\n- Explicitly return null from methods and property getters when required for a test.\ne.g. `sub.Method().Returns(x => null)`;\n\n---------------\n\nMoved `Received.InOrder` feature from `NSubstitute.Experimental` to main `NSubstitute` namespace. Obsoleted original `NSubstitute.Experimental.Received`.\n\nThis can result in ambiguous reference compiler errors and obsolete member compiler earnings.\n\nReason:\n- Promoted experimental Received feature to core library.\n\nFix:\n- Import `NSubstitute` namespace instead of `NSubstitute.Experimental`.\n(If `NSubstitute` is already imported just delete the `using NSubstitute.Experimental;` line from your fixtures.)\n\n\n1.5.0 Release\n================\n\nThe base object methods (`Equals`, `GetHashCode` and `ToString`) for substitute objects of classes that extend those methods now return the result of calling the actual implementation of those methods rather than the default value for the return type. This means that places where you relied on `.Equals` returning `false`, `.ToString` returning `null` and `.GetHashCode` returning `0` because the actual\nmethods weren't called will now call the actual implementation.\n\nReason:\n- Substitute objects of classes that overrode those methods that were used as parameters for setting up return values or checking received calls weren't able to be directly used within the call, e.g. instead of:\n\n`someObject.SomeCall(aSubstitute).Returns(1);`\n\nYou previously needed to have:\n\n`someObject.SomeCall(Arg.Is<TypeBeingSubstituted>(a => a == aSubstitute)).Returns(1);`\n\nHowever, now you can use the former, which is much more terse and consistent with the way other Returns or Received calls work.\n- This means that substitute objects will now always work like .NET objects rather than being inconsistent when the class being substituted overrode any of those base object methods.\n\nFix:\n- There is no workaround to change the behaviour of .Equals, .GetHashCode or .ToString. If you have a use case to change the behaviour of these methods please lodge an issue at the NSubstitute Github site.\n\n---------------\n\nIn rare cases the new `Returns()` and `ReturnsForAnyArgs()` overloads can cause compilation to fail due to the call being ambiguous (CS0121).\n\nReason:\n- The new overloads allow a sequence of callbacks to be used for return values. A common example is return several values, then throwing an exception.\n\nFix:\n- Remove the ambiguity by explicitly casting the arguments types or by using lambda syntax. e.g. `sub.Call().Returns(x => null, x => null)`;\n\n\n1.4.0 Release\n================\n\nAuto-substitute from substitutes of `Func` delegates (following the same rules as auto-subbing for methods and properties). So the delegate returned from `Substitute.For<Func<IFoo>>()` will return a substitute of `IFoo`. This means some substitutes for delegates that used to return null will now return a new substitute.\n\nReason:\n- Reduced setup when substituting for `Func` delegates, and consistency with behaviour for properties and methods.\n\nFix:\n- Explicitly return null from substitute delegates when required for a test.\ne.g. `subFunc().Returns(x => null)`;\n\n\n1.2.0 Release\n================\n\nAuto-substitute for pure virtual classes (in addition to interfaces and delegate types), which\nmeans some methods and properties on substitutes that used to return null by default will now\nreturn a new substitute of that type.\n\nReason:\n - Cut down the code required to configure substitute members that return interface-like types (e.g. ASP.NET web abstractions like ```HttpContextBase```) which are safe to create and proxy.\n- Safe classes are those with all their public methods and properties defined as virtual or abstract, and containing a default, parameterless constructor defined as public or protected.\n\nFix:\n- Explicitly return null from methods and property getters when required for a test.\ne.g. ```sub.Method().Returns(x => null)```;\n\n\n0.9.5 Release\n================\n\n`Raise.Event<TEventArgs>(...)` methods renamed to `Raise.EventWith<TEventArgs()`\n\nReason:\n- The `Raise.Event<TEventArgs>()` signature would often conflict with the\n- `Raise.Event<THandler>()` method which is used to raise all types of events.\n- `Raise.Event<THandler>()` will now always work for any event type, while\n- `Raise.EventWith<TEventArgs>()` can be used as a shortcut to raise\n- EventHandler-style events with a particular argument.\n\nFix:\n- Replace `Raise.Event<TEventArgs>()` calls with equivalent `Raise.EventWith<TEventArgs>()` call.\n\n---------------\n`Raise.Action()` methods removed\n\nReason:\n- The `Raise.Event<THandler>()` method can be used to raise all delegate events, including Actions.\n- `Raise.Action()` was removed so there is a consistent way of raising all delegate events.\n\nFix:\n- Replace `Raise.Action()` calls with `Raise.Event<Action>()`.\n- Replace `Raise.Action<T>(T arg)` calls with `Raise.Event<Action<T>>(arg)`.\n- Replace `Raise.Action<T1,T2>(T1 x, T2 y)` calls with `Raise.Event<Action<T1,T2>>(x, y)`.\n\n\n0.9.0 Release\n================\n\nNo breaking changes.\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 24.5009765625,
          "content": "### 6.x (work in progress)\n\n* [UPDATE] Update target frameworks: .NET8, .NET Standard 2.0\n* [UPDATE] Drop EOL .NET 6/7 platforms from testing matrix\n* [UPDATE] Update github actions steps versions\n* [UPDATE] Remove legacy obsolete API\n* [UPDATE] Mark as obsolete api CompatArg with pre c# 7.0 support\n* [NEW] Added .NET 9 to test matrix\n* [UPDATE] Migrate documentation to docfx platform. https://github.com/dotnet/docfx\n\n### 5.3.0 (October 2024)\n\n* [NEW] Introduced `Substitute.ForTypeForwardingTo` to create substitutes that forward interceptable calls to a concrete class. This provides an easy way of implementing a test spy over an existing type. Designed and implemented by @marcoregueira in https://github.com/nsubstitute/NSubstitute/pull/700 from a proposal by @wsaeed. Thanks to all who contributed to discussions of this feature.\n* [NEW] Support Raise.EventWith default constructor (#788) by @mihnea-radulescu in https://github.com/nsubstitute/NSubstitute/pull/813\n* [NEW] Implement When(...).Throws to avoid confusion with Throw method (#803) by @mihnea-radulescu in https://github.com/nsubstitute/NSubstitute/pull/818\n* [FIX] Arg.Any<Arg.AnyType>() does not match arguments passed by reference (#787) by @mihnea-radulescu in https://github.com/nsubstitute/NSubstitute/pull/811\n* [FIX] Support matching arguments whose type is generic, when their concrete type is not known (#786) by @mihnea-radulescu in https://github.com/nsubstitute/NSubstitute/pull/814\n* [FIX] Release build workflow (https://github.com/nsubstitute/NSubstitute/pull/797)\n* [DOC] Add Throws for exceptions to the docs by @304NotModified in https://github.com/nsubstitute/NSubstitute/pull/795\n* [DOC] Remove Visual Studio for Mac from readme by @Romfos in https://github.com/nsubstitute/NSubstitute/pull/807\n* [TECH] Migrate from NUnit 3 to NUnit 4 by @Romfos in https://github.com/nsubstitute/NSubstitute/pull/783\n* [TECH] Update build project to .net 8 by @Romfos in https://github.com/nsubstitute/NSubstitute/pull/776\n* [TECH] Code style: use C# 12 collection literals by @Romfos in https://github.com/nsubstitute/NSubstitute/pull/810\n* [TECH] Use c# 12 primary constructors by @Romfos in https://github.com/nsubstitute/NSubstitute/pull/812\n* [TECH] Added csharp_style_prefer_primary_constructors into editorconfig by @Romfos in https://github.com/nsubstitute/NSubstitute/pull/819\n\nThanks to first-time contributors @mihnea-radulescu and @marcoregueira! Thanks also @304NotModified and @Romfos for their continued support and contributions to this release.\n\n### 5.2.0 (Apr 2024; tagged but not released to nuget)\n\n* [UPDATE] Upgrade website build to jekyll 3.9.0 and add link to edit website pages (#767, #769; thanks to @brad)\n* [UPDATE] Build improvements:\n    - migrate to GitHub Actions and update doc dependencies (#754, #774; thanks to @alexandrnikitin)\n    - improve test platform coverage; add .NET 8 to test platforms (#742, #756; thanks to @Romfos)\n    - source code format improvements; check format on CI (#758, ##761, #762, #763; thanks again to @Romfos)\n* [NEW] Support for Sourcelink and Deterministic Build. Thanks @304NotModified! (#737)\n\nMany thanks to @alexandrnikitin, @Romfos, @brad, and @304NotModified for their contributions!\n\n### 5.1.0 (Sep 2023)\n\n* [DOC] Add clickable headings. Thanks @jheinath! (#729)\n* [UPDATE] Update `Castle.Core` to `5.1.1-*` to support C# 9 covariants. Thanks @siblount to tracking this down. (#730)\n* [UPDATE] Improved support for testing `ILogger`. Thanks to @zlangner for this contribution, and also thanks to @Saibamen for reviewing this PR. (#732)\n* [NEW] Add `Arg.AnyType` for matching calls with generic parameters. Thanks @icalvo for implementing and documenting this! (#634, #715, #733)\n\n### 5.0.0 (Feb 2023)\n\n* [UPDATE][BREAKING] Drop unsupported platforms. Now supported platforms are .NET 6+, .NET Framework 4.6.2+, .NET Standard 2.0.\n\n### 4.4.0 (Jul 2022)\n\n* [FIX] Fix issue checking for constructor args on null object. Thanks to @phongphanq, and @appel1! Thanks also to\n@Mandroide for code review. (#683, #685)\n* [UPDATE] Update to Castle Core v5. Thanks @Havunen! (#690, #673)\n* [NEW] Add `.ThrowsAsync()` that will correctly mock exception on async methods. Thanks @Socolin! (#609, #663)\n\n### 4.3.0 (Jan 2021)\n\n* [NEW] Add .NET 5 (#636) and .NET 6 (#674) support. Thanks to @zvirja and @Havunen!\n\n### 4.2.2 (Jun 2020)\n\n* [UPDATE] Build update to run on non-Windows platforms. Thanks @joaopgrassi! (#592, #335)\n* [FIX] Fix NSubstitute could fail in concurrent environment due to auto-value providers initialization. (#600, @zvirja)\n\n### 4.2.1 (July 2019)\n\n* [FIX] It might be impossible to assign `ref` and `out` arguments using type-compatible value. (#577, @zvirja)\n* [FIX] Configured result is returned in the `Received.InOrder` check causing tests to fail sometimes. (#569, @zvirja)\n\n### 4.2.0 (May 2019)\n\n* [FIX] Raise events for delegates taking single array argument of reference element type. (#560, @zvirja)\n* [NEW] `Quantity.Within(min, max)` to assert a call was received within a range of times.\nThis is available in the `NSubstitute.ReceivedExtensions` namespace. (#558)\n\n### 4.1.0 (May 2019)\n\n* [FIX] Re-throw captured NSubstitute exceptions when configuring async methods. (#533, @zvirja)\n* [UPDATE] Various performance improvements. (#536, #542, #547, @zvirja)\n* [UPDATE] Use Castle.Proxy library to generate delegate proxies. (#537, @zvirja)\n* [FIX] Do not fail on nested generic type formatting. (#515, @zvirja)\n* [FIX] Fix event handling for code created by non-ECMA compliant compilers. (#500, #525, @zvirja)\n* [UPDATE] Thanks to Julian Verdurmen (@304NotModified) for updating our website and links\nto HTTPS! All links to the NSub website should now go through https://nsubstitute.github.io,\nand other web links in the project also go through to HTTPS where supported.\n* [UPDATE] Documentation updates (#516 thanks to Michael Freidgeim @MNF; #530, #531 thanks to @304NotModified; #540, #549)\n\n### 4.0.0 (January 2019)\n\n_Promoted 4.0.0 Release Candidate 1 with no code changes. See the release candidate's notes\nfor a full list of changes since 3.1.0._\n\n### 4.0.0 Release Candidate 1 (November 2018)\n\nThanks to core team member Alex Povar (@zvirja) for putting a huge amount of work into\ndefining and implementing features, fixes and refactoring for this release! Also thanks to\n@tpodolak for the new NSubstitute.Analyzers project! Finally, thanks to everyone who\nsubmitted PRs, raised or commented on issues, or took the time to help answer questions on StackOverflow.\n\n#### Major new features and improvements\n\n* [NEW] [NSubstitute.Analyzers](https://github.com/nsubstitute/NSubstitute.Analyzers) project.\nUses Roslyn to detect potential problems with NSubstitute configurations, such as trying\nto substitute for non-virtual members. Whenever you add NSubstitute to your C# or VB project,\ndon't forget to also add the corresponding NSubstitute.Analyzers package!\nThanks to @tpodolak for starting and running this project!\n* [NEW] `CallBase` for enabling base method calls for specific methods. (#449, @zvirja)\n* [NEW][BREAKING] Arg matchers (`Arg.Is` etc) can now be used for `ref` and `out` arguments.\nSee [BreakingChanges.md](BreakingChanges.md) if you are still using pre-C#7. (#404, @zvirja)\n* [NEW] `Configure()` extension in `NSubstitute.Extensions.ConfigurationExtensions` to\nensure NSubstitute handles the next call as a configuration/specification. (#350, @zvirja)\n* [UPDATE] Performance improvements. (@zvirja)\n    - `CallResults` performance optimisation\n    - Delegate proxy generation improvements (#362)\n    - Minimise allocations and LINQ use on hot code paths (#390)\n    - Optimise array allocation (#395)\n* [UPDATE][BREAKING] Calls made with one or more argument matchers (`Arg.Is` or `Arg.Any`)\nwill no longer return previously configured results. NSubstitute will assume the call is\nbeing configured and avoid running logic configured via previous `Returns()` calls.\nThis helps fix some problems with overlapping configurations. See #345 and\n[BreakingChanges.md](BreakingChanges.md) for more information. (@zvirja)\n\n#### New and improved debugging, errors and error messages\n\n* [NEW] Raise `CouldNotConfigureBaseMethodException` when trying to configure a call to\ncall a base method that does not exist. (#429, @zvirja)\n* [NEW] Raise `RedundantArgumentMatcherException` if extra arg matchers are detected. This is\na huge help for immediately identifying misconfigured tests. (@zvirja)\n* [UPDATE] Improved `AmbiguousArgumentsException` behaviour and errors. (#403 and others; @zvirja)\n* [NEW] Improve debugging experience with proxy ids. (#39, @zvirja)\n* [UPDATE] Improved display of `MatchArgs` to help with debugging. (@zvirja)\n* [NEW][BREAKING] Detection of unused argument matchers. This helps to identify errors in tests\ndue to incorrectly used argument matchers. (#361, #89, #279; @zvirja)\n\n#### And lots, lots more!\n\nIncluding (but not limited to):\n\n* [NEW] Support for netstandard-2.0. (#447, @zvirja)\n* [FIX] Improved handling of virtual calls in constructors. (#423, @zvirja)\n* [NEW] Added a set of `When()` overloads to configure async methods without compilation warnings. (#468, @zvirja)\n* [FIX] Fixed potential for `ArgumentNullException` on finalizer thread. (#382, @zvirja)\n* [UPDATE] Now using Castle.Core 4.3.1+. We :heart: you Castle.Core! (Thanks for the\nPR Alexandr Nikitin!)\n* [NEW] Expose `.Received(Quantity)` in `NSubstitute.ReceivedExtensions` namespace. Thanks to\n@firelizzard18 for this suggestion.\n* [UPDATE] Made substitute setup and verification more robust in the concurrent environments. (#462, @zvirja)\n* [UPDATE] Removed NSubstitute.Core.Extensions.Zip (no longer require NET35 support). (#336)\n* [FIX] Restored XML documentation. (#345)\n* [NEW] Made global NSubstitute customization more easier. (#448, @zvirja)\n* [UPDATE] Documentation updates and fixes. Thanks to @jsbed, Chris Maddock, Jim Aho (#369), and\nMathias Lorenzen.\n* [UPDATE] Updated builds thanks to Alexandr Nikitin.\n* [UPDATE] Significant refactoring thanks to Alex Povar. (#448 and many, many other PRs)\n\n### 3.1.0 (October 2017)\n* [FIX] Reduced packages required when referencing from NET45 and NET46. (#331)\n* [UPDATE] Reintroduced support for NET45. (#329)\n* [NEW] Support for auto-substituting `ValueTask<T>` results. Thanks to\n@KrzysztofBranicki for this change. (#325)\n\n### 3.0.1 (October 2017)\n* [FIX] Signing 3.x release to prevent problems with other packages that work\nwith different versions of NSubstitute. Thanks Alex Povar for raising this. (#324)\n* [UPDATE] Readme and other docs converted to markdown (.md) rather than plain text.\nThanks to Stefan Kert for this PR.\n\n### 3.0.0 (October 2017)\n* [FIX] Fixed warning about System.ComponentModel.TypeConverter 4.0.1 (#311).\nThanks to Stefan Kert for this PR.\n* [UPDATE] [BREAKING] Migrated to new csproj format, targeting .NET Standard 1.3.\nDropped support for older .NET platforms (pre-.NET46). Uses NuGet for dependencies\nrather than shipping them ilmerged. Thanks to Alexandr Nikitin for this work.\nAlso thanks to @StefanKert and @robertcoltheart for review feedback.\n* [UPDATE] Stopped shipping ZIP distribution, now exclusively using NuGet. (#319)\n* [UPDATE] Stopped shipping documentation with the NuGet package. This\ninformation is available in the source repository. (#319)\n\n### 2.0.3 (April 2017)\n* [FIX] Fixed issue with stubbing multiple return values and then accessing\nthem in parallel. (#282, #294). Thanks to Janusz Białobrzewski (@jbialobr) for\nimplementing this, and to Alexandr Nikitin and Alex Povar for reviewing and\ncontributing to Janusz' PR.\n* [UPDATE] .NET Core build now targets netstandard-1.3 (was 1.5). Thanks to\nIan Johnson (@ipjohnson) for this change. (#303)\n* [UPDATE] .NET Core build is now signed, which removes a warning when\nreferencing .NET standard library. Thanks to Connie Yau (@conniey) for\nthis change. (#302)\n* [FIX] Removed redundant .NET standard dependencies when referencing\nNSubstitute as a .NET Framework library. Thanks to Alex Povar (@zvirja). (#295)\n\n### 2.0.2 (February 2017)\n* Dropped Release Candidate tag now that Castle.Core 4.0.0 final has been\nreleased.\n* [UPDATE] Updated all builds to use Castle Core 4.0.0 release.\n* [NEW] Task-compatible ReturnsNull extension method added to ReturnsExtensions (#270). Thanks to Michael Wolfenden for implementing this.\n* [NEW] Support for delegates with out/ref parameters (#271, #273). Thanks to Oleg Sych for raising this, and to Alexandr Nikitin for this fix. (Implemented for NET40/45/Core, not for NET35 at present)\n\n### 2.0.1 RC (December 2016)\n* [NEW] Initial custom handler support (#259). Mainly for integration with libraries like AutoFixture, this allows some basic fallback logic to be injected into a substitute's call handling pipeline. Thanks to Alex Povar (@zvirja) for implementing this and incorporating review comments, and also to Marcio Rinaldi (@mrinaldi) for his initial work on this in #234. Also thanks to @alexandrnikitin for a related spike (#156), and his work with Alex and Marcio in refining this feature and reviewing and merging the final PR.\n* [UPDATE] Improved concurrency support, relating to how NSubstitute tracks the last call and queued call specifications (#264). Thanks a lot to Alex Povar (@Zvirja) for designing and implementing this improvement. Thanks to Alexandr Nikitin for reviewing this PR.\n\n### 2.0.0 RC (August 2016)\n* Build: 2.0.0.0\n* [NEW] Initial .NET Core support. Thanks to @alexandrnikitin for tonnes of work on this. Thanks also to Peter Jas (@jasonwilliams200OK) for both .NET Core code contributions and help with CI setup. And thanks to everyone who contributed to the conversation and testing in https://github.com/nsubstitute/NSubstitute/pull/197.\n* [NEW] Clear substitute configuration using `sub.ClearSubstitute(ClearOptions)`. This extension can be brought in to scope via `using NSubstitute.ClearExtensions;`. Thanks to @trullock for defining and implementing this change, and to @alexandrnikitin for review feedback. (#157, #235, #179)\n* [DOC] Improved CallInfo.ArgAt documentation, thanks to asbjornu. (#231)\n* [FIX] Fix an issue with Received.InOrder when an exception is thrown. Thanks to @m3zercat for finding and fixing this. (#237)\n\n### 1.10.0 (March 2016)\n* [NEW] Callbacks builder for more control over When..Do callbacks. Thanks to bartoszgolek. (#202, #200)\n* [NEW] Auto-substitute for IQueryable<T>. Thanks to emragins. (#67)\n* [FIX] Fix bug when showing params arguments for value types (#214)\n* [FIX] Fix bug when showing params arguments for Received.InOrder calls (#211)\n\n### 1.9.2 (October 2015)\n* [UPDATE] Mark Exceptions as [Serializable]. Thanks to David Mann. (#201)\n* [FIX] Fix bug with concurrently creating delegate substitutes. Thanks to Alexandr Nikitin. (#205)\n\n### 1.9.1 (October 2015)\n* [FIX] Fix bug introduced in 1.9.0 that made checking a call was Received() clear previously stubbed values for that call.\n\n### 1.9.0 (October 2015)\n* [NEW] Allow awaiting of async methods with Received()/DidNotReceive(). Thanks to Marcio Rinaldi for this contribution. (#190, #191)\n* [NEW] Task-specific Returns methods to make it easier to stub async methods. Thanks to Antony Koch for implementing this, and thanks to Marius Gundersen and Alexandr Nikitin for the suggestion and discussion regarding the change. (#189) (Also thanks to Jake Ginnivan who tried adding this back in #91, but I didn't merge that part of the PR in. Sorry!)\n* [NEW] ReturnsForAll<T> extension method. Thanks to Mike Hanson for this contribution. (#198, #196)\n\n### 1.8.2 (May 2015)\n* [NEW] Convenience .ReturnsNull() extensions in NSubstitute.ReturnsExtensions. Thanks to Michal Wereda for this contribution. (#181)\n* [NEW] CallInfo.ArgAt<T>(int) added to match argument at a given position and cast to the required type. Thanks to @jotabe-net for this contribution. (#175)\n* [NEW] Convenience Throws() extensions in NSubstitute.ExceptionExtensions (sub.MyCall().Throws(ex)). Thanks to Michal Wereda for this contribution. Thanks also to Geir Sagberg for helpful suggestions relating to this feature. (#172)\n\n### 1.8.1 (December 2014)\n* [FIX] Fix for methods returning multidimensional arrays. Thanks to Alexandr Nikitin. (#170)\n\n### 1.8.0 (November 2014)\n* [NEW] Convenience methods for throwing exceptions with When-Do. Thanks to Geir Sagberg for this contribution.\n* [FIX] Throw exception when arg matcher used within Returns. (#149)\n\n### 1.7.2 (March 2014)\n* [FIX] Basic support for types that return dynamic. Thanks to Alexandr Nikitin. (#75)\n* [NEW] Auto-subbing for observables. Thanks to Paul Betts.\n\n### 1.7.1 (January 2014)\n* [FIX] Ambiguous arg exception with out/ref parameters. Thanks to Alexandr Nikitin. (#129)\n\n### 1.7.0 (January 2014)\n* [NEW] Partial subs (Substitute.ForPartsOf<T>()). Thanks to Alexandr Nikitin for tonnes of hard work on this feature (and for putting up with a vacillating project owner :)).\n* [UPDATE] Received.InOrder moved out of Experimental namespace.\n* [FIX] Argument matching with optional parameters. Thanks to Peter Wiles. (#111)\n* [FIX] Argument matching with out/ref. Thanks to Kevin Bosman. (#111)\n* [FIX] The default return value for any call that returns a concrete type that is purely virtual, but also has at least one public static method in it will be a substitute rather than null. Thanks to Robert Moore (@robdmoore) for this contribution. (#118)\n\n### 1.6.1 (June 2013)\n* [FIX] Detect and throw on type mismatches in Returns() caused by Returns(ConfigureOtherSub()).\n* [FIX] Support raising exceptions that do not implement a serialisation constructor (#110). Thanks to Alexandr Nikitin for this contribution.\n\n### 1.6.0 (April 2013)\n* [NEW] .AndDoes() method for chaining a callback after a Returns(). (#98)\n* [FIX] Handling calls with params argument of value types, thanks to Eric Winkler.\n* [FIX] Can now substitute for interfaces implementing System.Windows.IDataObject, thanks to Johan Appelgren.\n* [UPDATE] Improved XML doc comments, thanks to David Gardiner.\n\n### 1.5.0 (January 2013)\n* [EXPERIMENTAL] Asserting ordered call sequences\n* [FIX] Arg.Invoke with four arguments now passes fourth arg correctly (#88). Thanks to Ville Salonen (@VilleSalonen) for finding and patching this.\n* [FIX] Substitute objects now use actual implementation for base object methods (Equals, GetHashCode, ToString). Thanks to Robert Moore (@robdmoore) for this contribution. (#77)\n* [NEW] Auto-substitute for Task/Task<T>. Task<T> will use substitute rules that T would use. Thanks to Jake Ginnivan (@JakeGinnivan) for this contribution.\n* [NEW] Match derived types for generic calls (#97). Thanks to Iain Ballard for this contribution.\n* [NEW] Returns now supports passing multiple callbacks, which makes it easier to combine stubbing multiple return values followed by throwing an exception (#99). Thanks to Alexandr Nikitin for this contribution.\n\n### 1.4.3 (August 2012)\n* [FIX] Updated to Castle.Core 3.1.0 to fix an issue proxying generic methods with a struct constraint (#83).\n\n### 1.4.2 (July 2012)\n* [FIX] Issue using NET40 build on Mono (due to NET45 build tools incompatibility)\n\n### 1.4.1 (June 2012)\n* [FIX] Fix matching Nullable<T> arguments when arg value is null. Thanks to Magnus Olstad Hansen (@maggedotno) for this contribution. (#78)\n* [UPDATE] Updated to Castle.Core 3.0.0.\n\n### 1.4.0 (May 2012)\n* [NEW] [BREAKING] Auto-substitute for types returned from substitutes of delegates/Funcs (follows same auto-substitute rules as for methods and properties). Thanks to Sauli Tähkäpää for implementing this feature. (#52)\n* [NEW] Show details of params arguments when displaying received calls. Thanks to Sauli Tähkäpää for implementing this feature. (#65)\n* [FIX] Race condition between checking received calls and building the exception could cause nonsensical exception messages like \"Expected 5, actually received 5\" when called concurrently. (#64)\n\n### 1.3.0 (Nov 2011)\n* [NEW] Support for Received(times) to assert a call was received a certain number of times. Thanks to Abi Bellamkonda for this contribution. (#63)\n* [FIX] Improved support for calling substitutes from multiple threads. (#62)\n\n### 1.2.1 (Oct 2011)\n* [FIX] Some combinations of Arg.Do and Returns() caused incorrect values to be returned. (#59)\n* [UPDATE] WCF ServiceContractAttribute no longer applied to proxies. (#60)\n* [FIX] Passing null could cause argument actions to fail. (#61)\n* [FIX] Calls to virtual methods from constructors of classes being substituted for are no longer recorded, to prevent non-obvious behaviour when calling Returns() on an auto-substituted value. (#57)\n\n### 1.2.0 (Sep 2011)\n* [NEW] Arg.Do() syntax for capturing arguments passed to a method and performing some action with them whenever the method is called.\n* [NEW] Arg.Invoke() syntax for invoking callbacks passed as arguments to a method whenever the method is called.\n* [NEW] Basic support for setting out/ref parameters.\n* [FIX] Property behaviour for indexed properties (Issue #53)\n* [UPDATE] [BREAKING] Auto-substitute for pure virtual classes, including common ASP.NET web abstractions. Use .Returns(x=>null) to explicitly return null from these members if required. Thanks to Tatham Oddie for original idea and patch, and Krzysztof Kozmic for suggesting and defining which classes would be safe to automatically proxy.\n* [UPDATE] Changed layout of package for eventual support for multiple framework targets.\n* [FIX] Failure to match calls with ref arguments using ReceivedWithAnyArgs().\n* [FIX] Incorrect ambiguous args exception when supplying value type arg specs for object arguments.\n\n### 1.1.0 (May 2011)\n* [UPDATE] Updated to Castle.Core 2.5.3.\n* [FIX] Fixed bug when raising a delegate event with a null argument.\n* [FIX] CallInfo.Arg<T>() now works more reliably, including for null arguments.\n* [FIX] Better exception when accidentally calling substitute extension method with a null reference (e.g. foo.Received().Call() when foo is null)\n* [UPDATE] Exceptions thrown in custom argument matchers (Arg.Is<T>(x => ...)) will now silently fail to match the argument, rather than allowing exceptions to bubble up.\n* [NEW] Support for test fixtures run in parallel.\n\n### 1.0.0 (Dec 2010)\n* [FIX] Using Returns(null) for value types throws, rather than returning default(T).\n\n### 0.9.5 Release Candidate\n* [FIX] Fixed bug when trying to return null from a call to a substitute.\n* [FIX] Equals() for class substitutes fixed by not intercepting Object methods Equals(), ToString() and GetHashCode().\n* [NEW] Raise.Event<THandler>() methods to raise any type of event, including delegates.\n* [BREAKING] Raise.Action() methods removed. Use Raise.Event<THandler>() (e.g. Raise.Event<Action>>()).\n* [BREAKING] Renamed Raise.Event<TEventArgs>() methods to Raise.EventWith<TEventArgs>().\n* [UPDATE] Arg matchers can be specified using more specific, compatible type (Arg.Is<string>(..) for arg of type object).\n* [NEW] NSubstitute website and documentation https://nsubstitute.github.io\n* [FIX] Formating for argument matchers that take predicate functions.\n* [FIX] Match single argument matcher passed to params arg (#34)\n* [FIX] Detect ambiguous arg matchers in additional case (#31)\n* [FIX] Can modify event handler subscriptions from within event callback\n* [UPDATE] Update to Castle.Core 2.5.2\n* [FIX] Can substitute for SynchronizationContext in .NET4 (fixed in Castle.Core)\n* [NEW] NSubstitute available as NuPack package\n\n### 0.9.0 Beta 1\n* [FIX] Now handles argument specifiers used for params arguments correctly\n* [UPDATE] Updated to Castle.Core 2.5 final.\n\n### 0.1.3 alpha 4\n* [NEW] Support auto/recursive substituting for members that return interfaces or delegates.\n* [NEW] Support auto substituting for members that return arrays and strings (return empty values rather than null).\n* [NEW] Raise.Event<TEventArgs>() will now attempt to construct arguments with default ctors, so in most cases they will not need to be explictly provided.\n* [UPDATE] Added support for raising events with custom delegate types.\n* [UPDATE] Formatting for event subscription and unsubscription calls in call received/not received exceptions.\n* [UPDATE] Updated to pre-release build of Castle.Core 2.5 to get dynamic proxy to support modopts.\n* [FIX] Throw correct exception when raising an event and event handler throws. (Fix by Rodrigo Perera)\n* [FIX] Record call as received when it throws an exception from the When..Do callback.\n\n### 0.1.2 alpha 3\n* [NEW] Marked non-matching parameters in the actual calls listed for CallNotReceivedException messages.\n* [NEW] Added WhenForAnyArgs..Do syntax for callbacks.\n* [UPDATE] Updated arg matching to be smarter when matchers are not used for all args.\n* [FIX] Fixed bug when substituting for delegates with multiple parameters.\n* [FIX] Removed redundant cast operator which sometimes caused the compiler trouble in resolving Raise.Event().\n\n### 0.1.1 alpha 2\n* [NEW] Added ReturnsForAnyArgs() extension methods\n* [FIX] Compiled for Any CPU to run on x64 platforms\n\n### 0.1.0 alpha\n* Initial release\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 0.5029296875,
          "content": "<Project>\n\n  <!-- Contains global properties for all projects in the solution.\n  These can be overridden in inner folders, if necessary.\n  See more here https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build?view=vs-2019 -->\n\n  <PropertyGroup>\n    <LangVersion>latest</LangVersion>\n    <ImplicitUsings>enable</ImplicitUsings>\n  </PropertyGroup>\n\n  <PropertyGroup>\n    <OutputPath>$(MSBuildThisFileDirectory)\\bin\\$(Configuration)\\$(MSBuildProjectName)\\</OutputPath>\n  </PropertyGroup>\n\n</Project>"
        },
        {
          "name": "Gemfile",
          "type": "blob",
          "size": 0.12890625,
          "content": "source \"https://rubygems.org\"\ngem 'rake', '~> 13.1'\ngem 'liquid', '~> 4.0'\ngem 'jekyll', '4.3.3'\ngem \"kramdown-parser-gfm\", \"1.1.0\"\n"
        },
        {
          "name": "Gemfile.lock",
          "type": "blob",
          "size": 1.9521484375,
          "content": "GEM\n  remote: https://rubygems.org/\n  specs:\n    addressable (2.8.6)\n      public_suffix (>= 2.0.2, < 6.0)\n    colorator (1.1.0)\n    concurrent-ruby (1.2.3)\n    em-websocket (0.5.3)\n      eventmachine (>= 0.12.9)\n      http_parser.rb (~> 0)\n    eventmachine (1.2.7)\n    eventmachine (1.2.7-x64-mingw32)\n    ffi (1.16.3)\n    forwardable-extended (2.6.0)\n    google-protobuf (3.25.2)\n    http_parser.rb (0.8.0)\n    i18n (1.14.1)\n      concurrent-ruby (~> 1.0)\n    jekyll (4.3.3)\n      addressable (~> 2.4)\n      colorator (~> 1.0)\n      em-websocket (~> 0.5)\n      i18n (~> 1.0)\n      jekyll-sass-converter (>= 2.0, < 4.0)\n      jekyll-watch (~> 2.0)\n      kramdown (~> 2.3, >= 2.3.1)\n      kramdown-parser-gfm (~> 1.0)\n      liquid (~> 4.0)\n      mercenary (>= 0.3.6, < 0.5)\n      pathutil (~> 0.9)\n      rouge (>= 3.0, < 5.0)\n      safe_yaml (~> 1.0)\n      terminal-table (>= 1.8, < 4.0)\n      webrick (~> 1.7)\n    jekyll-sass-converter (3.0.0)\n      sass-embedded (~> 1.54)\n    jekyll-watch (2.2.1)\n      listen (~> 3.0)\n    kramdown (2.4.0)\n      rexml\n    kramdown-parser-gfm (1.1.0)\n      kramdown (~> 2.0)\n    liquid (4.0.4)\n    listen (3.8.0)\n      rb-fsevent (~> 0.10, >= 0.10.3)\n      rb-inotify (~> 0.9, >= 0.9.10)\n    mercenary (0.4.0)\n    pathutil (0.16.2)\n      forwardable-extended (~> 2.6)\n    public_suffix (5.0.4)\n    rake (13.1.0)\n    rb-fsevent (0.11.2)\n    rb-inotify (0.10.1)\n      ffi (~> 1.0)\n    rexml (3.2.6)\n    rouge (4.2.0)\n    safe_yaml (1.0.5)\n    sass-embedded (1.70.0-x64-mingw-ucrt)\n      google-protobuf (~> 3.25)\n    sass-embedded (1.70.0-x64-mingw32)\n      google-protobuf (~> 3.25)\n    sass-embedded (1.70.0-x86_64-linux-gnu)\n      google-protobuf (~> 3.25)\n    terminal-table (3.0.2)\n      unicode-display_width (>= 1.1.1, < 3)\n    unicode-display_width (2.5.0)\n    webrick (1.8.1)\n\nPLATFORMS\n  x64-mingw-ucrt\n  x64-mingw32\n  x86_64-linux\n\nDEPENDENCIES\n  jekyll (= 4.3.3)\n  kramdown-parser-gfm (= 1.1.0)\n  liquid (~> 4.0)\n  rake (~> 13.1)\n\nBUNDLED WITH\n   2.4.1\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.59765625,
          "content": "Copyright (c) 2009 Anthony Egerton (nsubstitute@delfish.com) and David Tchepak (dave@davesquared.net)\nAll rights reserved.\n \nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n \n    * Redistributions of source code must retain the above copyright notice,\n    this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n    * Neither the names of the copyright holders nor the names of \n    contributors may be used to endorse or promote products derived from this\n    software without specific prior written permission.\n \nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n[ https://www.opensource.org/licenses/bsd-license.php ]"
        },
        {
          "name": "NSubstitute.sln",
          "type": "blob",
          "size": 3.2861328125,
          "content": "Microsoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.8.34309.116\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"NSubstitute\", \"src\\NSubstitute\\NSubstitute.csproj\", \"{F59BF5FC-52D8-492E-BDE8-244C183B4C92}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"src\", \"src\", \"{CFB6BF4B-381D-4884-A8E8-D1FA71315BDE}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"tests\", \"tests\", \"{0E2B9095-7548-462F-9BCC-CD6765B3ED60}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"build\", \"build\", \"{A8AF7D01-6CE4-47B2-9E23-689A53991C3D}\"\n\tProjectSection(SolutionItems) = preProject\n\t\tbuild\\build.fs = build\\build.fs\n\t\tbuild\\ExtractDocs.fs = build\\ExtractDocs.fs\n\tEndProjectSection\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{CA2DD4AA-8DCD-42FB-8081-243281AD2956}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.editorconfig = .editorconfig\n\t\tBreakingChanges.md = BreakingChanges.md\n\t\tCHANGELOG.md = CHANGELOG.md\n\t\tDirectory.Build.props = Directory.Build.props\n\t\tREADME.md = README.md\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"NSubstitute.Acceptance.Specs\", \"tests\\NSubstitute.Acceptance.Specs\\NSubstitute.Acceptance.Specs.csproj\", \"{8C2300AA-F94C-4005-A359-257C5EAD338E}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"NSubstitute.Benchmarks\", \"tests\\NSubstitute.Benchmarks\\NSubstitute.Benchmarks.csproj\", \"{D2D162D4-EF1D-4B40-8736-9228C2FEA16C}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{F59BF5FC-52D8-492E-BDE8-244C183B4C92}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{F59BF5FC-52D8-492E-BDE8-244C183B4C92}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{F59BF5FC-52D8-492E-BDE8-244C183B4C92}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{F59BF5FC-52D8-492E-BDE8-244C183B4C92}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{8C2300AA-F94C-4005-A359-257C5EAD338E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{8C2300AA-F94C-4005-A359-257C5EAD338E}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{8C2300AA-F94C-4005-A359-257C5EAD338E}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{8C2300AA-F94C-4005-A359-257C5EAD338E}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{D2D162D4-EF1D-4B40-8736-9228C2FEA16C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{D2D162D4-EF1D-4B40-8736-9228C2FEA16C}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{D2D162D4-EF1D-4B40-8736-9228C2FEA16C}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{D2D162D4-EF1D-4B40-8736-9228C2FEA16C}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{F59BF5FC-52D8-492E-BDE8-244C183B4C92} = {CFB6BF4B-381D-4884-A8E8-D1FA71315BDE}\n\t\t{8C2300AA-F94C-4005-A359-257C5EAD338E} = {0E2B9095-7548-462F-9BCC-CD6765B3ED60}\n\t\t{D2D162D4-EF1D-4B40-8736-9228C2FEA16C} = {0E2B9095-7548-462F-9BCC-CD6765B3ED60}\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {230E97F1-5246-4D49-8ED9-065F2B154E93}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.1943359375,
          "content": "NSubstitute\n========\n[![Build, Test, and Format verification](https://github.com/nsubstitute/NSubstitute/actions/workflows/test.yml/badge.svg)](https://github.com/nsubstitute/NSubstitute/actions/workflows/test.yml)\n[![Nuget](https://img.shields.io/nuget/v/NSubstitute.svg)](https://www.nuget.org/packages/NSubstitute)\n\nVisit the [NSubstitute website](https://nsubstitute.github.io) for more information.\n\n### What is it?\n\nNSubstitute is designed as a friendly substitute for .NET mocking libraries.\n\nIt is an attempt to satisfy our craving for a mocking library with a succinct syntax that helps us keep the focus on the intention of our tests, rather than on the configuration of our test doubles. We've tried to make the most frequently required operations obvious and easy to use, keeping less usual scenarios discoverable and accessible, and all the while maintaining as much natural language as possible.\n\nPerfect for those new to testing, and for others who would just like to to get their tests written with less noise and fewer lambdas.\n\n### Installation\n\n* [NSubstitute package](https://nuget.org/List/Packages/NSubstitute)\n* Optional Roslyn analysers (recommended):\n    * For C# projects: [NSubstitute.Analyzers.CSharp](https://www.nuget.org/packages/NSubstitute.Analyzers.CSharp/)\n    * For VB projects: [NSubstitute.Analyzers.VisualBasic](https://www.nuget.org/packages/NSubstitute.Analyzers.VisualBasic/)\n\n### Getting help\n\nIf you have questions, feature requests or feedback on NSubstitute please [raise an issue](https://github.com/nsubstitute/NSubstitute/issues) on our project site. All questions are welcome via our project site, but for \"how-to\"-style questions you can also try [StackOverflow with the \\[nsubstitute\\] tag](https://stackoverflow.com/tags/nsubstitute), which often leads to very good answers from the larger programming community. StackOverflow is especially useful if your question also relates to other libraries that our team may not be as familiar with (e.g. NSubstitute with Entity Framework).\n\n### Basic use\n\nLet's say we have a basic calculator interface:\n\n```csharp\npublic interface ICalculator\n{\n    int Add(int a, int b);\n    string Mode { get; set; }\n    event Action PoweringUp;\n}\n```\n<!--\n```requiredcode\nICalculator _calculator;\n[SetUp]\npublic void SetUp() { _calculator = Substitute.For<ICalculator>(); }\n```\n-->\n\nWe can ask NSubstitute to create a substitute instance for this type. We could ask for a stub, mock, fake, spy, test double etc., but why bother when we just want to substitute an instance we have some control over?\n\n```csharp\n_calculator = Substitute.For<ICalculator>();\n```\n\n⚠️ **Note**: NSubstitute will only work properly with interfaces or with `virtual` members of classes. Be careful substituting for classes with non-virtual members. See [Creating a substitute](https://nsubstitute.github.io/help/creating-a-substitute/#substituting_infrequently_and_carefully_for_classes) for more information.\n\nNow we can tell our substitute to return a value for a call:\n\n```csharp\n_calculator.Add(1, 2).Returns(3);\nAssert.That(_calculator.Add(1, 2), Is.EqualTo(3));\n```\n\nWe can check that our substitute received a call, and did not receive others:\n\n```csharp\n_calculator.Add(1, 2);\n_calculator.Received().Add(1, 2);\n_calculator.DidNotReceive().Add(5, 7);\n```\n\nIf our Received() assertion fails, NSubstitute tries to give us some help as to what the problem might be:\n\n```\nNSubstitute.Exceptions.ReceivedCallsException : Expected to receive a call matching:\n    Add(1, 2)\nActually received no matching calls.\nReceived 2 non-matching calls (non-matching arguments indicated with '*' characters):\n    Add(1, *5*)\n    Add(*4*, *7*)\n```\n\nWe can also work with properties using the Returns syntax we use for methods, or just stick with plain old property setters (for read/write properties):\n\n```csharp\n_calculator.Mode.Returns(\"DEC\");\nAssert.That(_calculator.Mode, Is.EqualTo(\"DEC\"));\n\n_calculator.Mode = \"HEX\";\nAssert.That(_calculator.Mode, Is.EqualTo(\"HEX\"));\n```\n\nNSubstitute supports argument matching for setting return values and asserting a call was received:\n\n```csharp\n_calculator.Add(10, -5);\n_calculator.Received().Add(10, Arg.Any<int>());\n_calculator.Received().Add(10, Arg.Is<int>(x => x < 0));\n```\n\nWe can use argument matching as well as passing a function to Returns() to get some more behaviour out of our substitute (possibly too much, but that's your call):\n\n```csharp\n_calculator\n   .Add(Arg.Any<int>(), Arg.Any<int>())\n   .Returns(x => (int)x[0] + (int)x[1]);\nAssert.That(_calculator.Add(5, 10), Is.EqualTo(15));\n```\n\nReturns() can also be called with multiple arguments to set up a sequence of return values.\n\n```csharp\n_calculator.Mode.Returns(\"HEX\", \"DEC\", \"BIN\");\nAssert.That(_calculator.Mode, Is.EqualTo(\"HEX\"));\nAssert.That(_calculator.Mode, Is.EqualTo(\"DEC\"));\nAssert.That(_calculator.Mode, Is.EqualTo(\"BIN\"));\n```\n\nFinally, we can raise events on our substitutes (unfortunately C# dramatically restricts the extent to which this syntax can be cleaned up):\n\n```csharp\nbool eventWasRaised = false;\n_calculator.PoweringUp += () => eventWasRaised = true;\n\n_calculator.PoweringUp += Raise.Event<Action>();\nAssert.That(eventWasRaised);\n```\n\n### Building\n\nNSubstitute and its tests can be compiled and run using Visual Studio, Visual Studio Code or any other editor with .NET support. Note that some tests are marked `[Pending]` and are not meant to pass at present, so it is a good idea to exclude tests in the Pending category from test runs.\n\nThere are also build scripts in the `./build` directory for command line builds, and CI configurations in the project root.\n\nTo do [full builds](https://github.com/nsubstitute/NSubstitute/wiki/Release-procedure) you'll also need Ruby, as the jekyll gem is used to generate the website.\n\n### Other libraries you may be interested in\n\n* [Moq](https://github.com/Moq/moq4/wiki/Quickstart): the original Arrange-Act-Assert mocking library for .NET, and a big source of inspiration for NSubstitute.\n* [FakeItEasy](https://fakeiteasy.github.io/): another modern mocking library for .NET. If you're not sold on NSubstitute's syntax, try FIE!\n* [substitute.js](https://github.com/ffMathy/FluffySpoon.JavaScript.Testing): a mocking library for TypeScript inspired by NSubstitute's syntax (`@fluffy-spoon/substitute` on NPM)\n\n"
        },
        {
          "name": "acknowledgements.md",
          "type": "blob",
          "size": 4.7734375,
          "content": "The aim of this file is to acknowledge the software projects that have been used to create NSubstitute, particularly those distributed as Open Source Software. They have been invaluable in helping us produce this software.\n\n# Software distributed with/compiled into NSubstitute\n\n## Castle.Core\nNSubstitute is built on the Castle.Core library, particularly Castle.DynamicProxy which is used for generating proxies for types and intercepting calls made to them so that NSubstitute can record them. \n\nCastle.Core is maintained by the Castle Project [https://www.castleproject.org/] and is released under the Apache License, Version 2.0 [https://www.apache.org/licenses/LICENSE-2.0.html].\n\n# Software used to help build NSubstitute\n\n## NUnit [https://nunit.org/]\nNUnit is used for coding and running unit and integration tests for NSubstitute. It is distributed under an open source zlib/libpng based license [https://www.opensource.org/licenses/zlib-license.html].\n\n## Rhino Mocks [https://hibernatingrhinos.com/oss/rhino-mocks]\nUsed for mocking parts of the NSubstitute mocking library for testing. It is distributed under the BSD license [https://www.opensource.org/licenses/bsd-license.php].\n\n## Moq [https://github.com/moq/moq4]\nMoq is not directly used in NSubstitute, but was a great source of inspiration. Moq pioneered Arrange-Act-Assert (AAA) mocking syntax for .NET, as well as removing the distinction between mocks and stubs, both of which have become important parts of NSubstitute. Moq is available under the BSD license [https://www.opensource.org/licenses/bsd-license.php].\n\n## Jekyll [https://jekyllrb.com/]\nStatic website generator written in Ruby, used for NSubstitute's website and documentation. Distributed under the MIT license [https://www.opensource.org/licenses/bsd-license.php].\n\n## SyntaxHighlighter [https://alexgorbatchev.com/SyntaxHighlighter/]\nOpen source, JavaScript, client-side code highlighter used for highlighting code samples on the NSubstitute website. Distributed under the MIT License [https://en.wikipedia.org/wiki/MIT_License] and the GPL [https://www.gnu.org/copyleft/lesser.html].\n\n## FAKE [https://fsharp.github.io/FAKE/]\nFAKE (F# Make) is used for NSubstitute's build. It is inspired by `make` and `rake`. FAKE is distributed under a dual Apache 2 / MS-PL license [https://github.com/fsharp/FAKE/blob/master/License.txt].\n\n## Microsoft .NET Framework [https://www.microsoft.com/net/]\nNSubstitute is coded in C# and compiled using Microsoft .NET. It can also run and compile under Mono [https://www.mono-project.com], an open source implementation of the open .NET standards for C# and the CLI.\n\nMicrosoft's .NET Framework is available under a EULA (and possibly other licenses like MS Reference Source License).\nMono is available under four open source licenses for different parts of the project (including MIT/X11, GPL, MS-Pl). These are described on the project site [https://www.mono-project.com/Licensing].\n\n## BenchmarkDotNet [https://github.com/dotnet/BenchmarkDotNet]\nReally useful tool for benchmarking .NET code! Available for use under MIT License [https://github.com/dotnet/BenchmarkDotNet/blob/master/LICENSE.md].\n\n## Microsoft SourceLink [https://github.com/dotnet/sourcelink]\nProvides deterministic builds and source debugging for library users. Available under MIT License [https://github.com/dotnet/sourcelink/blob/main/License.txt].\n\n# Previously used for building NSubstitute\n\nEven though they are no longer directly used for NSubstitute, the following projects were really helpful in building previous NSubstitute versions.\n\n## Microsoft Reactive Extensions for .NET (Rx) [https://msdn.microsoft.com/en-us/devlabs/ee794896]\nUsed to provide .NET 3.5 with some of the neat concurrency helper classes that ship with out of the box with .NET 4.0. Distributed under a EULA [https://msdn.microsoft.com/en-us/devlabs/ff394099]. No longer required since we stopped supporting .NET 3.5.\n\n## Microsoft Ilmerge [https://github.com/dotnet/ILMerge]\nUsed for combining assemblies so NSubstitute can be distributed as a single DLL. Available for use under a EULA as described on the ilmerge site. No longer used now NuGet has taken over the .NET world.\n\n## 7-Zip [https://www.7-zip.org/]\n7-zip was used to zip up NSubstitute distributions as part of the automated build process. Distributed under a mixed GNU LGPL / unRAR licence [https://www.7-zip.org/license.txt]. No longer required as we just ship NuGet packages now.\n\n# Other acknowledgements\n\n## Software developers\nYes, you! To everyone who has tried to get better at the craft and science of programming, especially those of you who have talked, tweeted, blogged, screencasted, and/or contributed software or ideas to the community.\n\nNo software developers were harmed to any significant extent during the production of NSubstitute, although some had to get by on reduced sleep.\n\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "testNet60.sh",
          "type": "blob",
          "size": 0.03125,
          "content": "#!/bin/sh\ndotnet test -f net6.0\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}