{
  "metadata": {
    "timestamp": 1736711095385,
    "page": 903,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Unity-Technologies/Unity.Mathematics",
      "stars": 1393,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.642578125,
          "content": "# EditorConfig is awesome:http://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n# All Files\n[*]\ncharset = utf-8\nindent_style = space\nindent_size = 4\ninsert_final_newline = false\ntrim_trailing_whitespace = true\n\n# Solution Files\n[*.sln]\nindent_style = tab\n\n# XML Project Files\n[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]\nindent_size = 2\n\n# Configuration Files\n[*.{json,xml,yml,config,props,targets,nuspec,resx,ruleset}]\nindent_size = 2\n\n# Markdown Files\n[*.md]\ntrim_trailing_whitespace = false\n\n# Web Files\n[*.{htm,html,js,ts,css,scss,less}]\nindent_size = 2\ninsert_final_newline = true\n\n# Bash Files\n[*.sh]\nend_of_line = lf\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1982421875,
          "content": "# Set default behavior to automatically normalize line endings.\n* text=auto\n\n# shell files should always be LF\n*.sh text eol=lf\n\n# Unity files\n*.asset text eol=lf\n*.meta text eol=lf\n*.asmdef text eol=lf\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.501953125,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\nbin\nbin.meta\nLibrary\n[Ll]ogs\n[Tt]emp\nobj\nobj.meta\n# User-specific files\n*.csproj.user\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n.vs\n*.VC.*\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n#**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n!*CodeGen~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# LLVM extracted file\next/llvm/win64_debug/\next/llvm/win64_release/\next/llvm/macos/\n*.idea\n.DS_Store\n"
        },
        {
          "name": ".yamato",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 0.4404296875,
          "content": "com.unity.mathematics copyright © 2023 Unity Technologies ApS\n\nLicensed under the Unity Companion License for Unity-dependent projects (see https://unity3d.com/legal/licenses/unity_companion_license).\nUnless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions.\n"
        },
        {
          "name": "Tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "Unity.Mathematics.TestProject",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 4.064453125,
          "content": "# Unity.Mathematics\n\nA C# math library providing vector types and math functions with a shader like\nsyntax. Used by the Burst compiler to compile C#/IL to highly efficient\nnative code.\n\nThe main goal of this library is to provide a friendly Math API familiar to SIMD and graphic/shaders developers, using the well known `float4`, `float3` types...etc. with all intrinsics functions provided by a static class `math` that can be imported easily into your C# program with `using static Unity.Mathematics.math`.\n\nIn addition to this, the Burst compiler is able to recognize these types and provide the optimized SIMD type for the running CPU on all supported platforms (x64, ARMv7a...etc.)\n\nNOTICE: The API is a work in progress and we may introduce breaking changes (API and underlying behavior)\n\n## Usage\n\nYou can use this library in your Unity game by using the Package Manager and referencing the package `com.unity.mathematics`. See the forum [Welcome](https://forum.unity.com/threads/welcome.522627) page for more details.\n\n```C#\nusing static Unity.Mathematics.math;\nnamespace MyNamespace\n{\n    using Unity.Mathematics;\n    \n    ...\n    var v1 = float3(1,2,3);\n    var v2 = float3(4,5,6);\n    v1 = normalize(v1);\n    v2 = normalize(v2);\n    var v3 = dot(v1, v2);\n    ...\n}\n```\n\n## Building\n\nOpen the `src\\Unity.Mathematics.sln` under Visual Studio 2015 or MonoDevelop and compile in Debug\\Release.\n\n## Contributing\n\nWe don't yet accept PR on this repository. See the FAQ below.\n\nThe project is using [editorconfig](http://editorconfig.org/) to keep files correctly formatted for EOL and spaces.\n\nWe assume that your IDE has support for `editorconfig`, you can download the following extensions if your IDE is listed:\n\n- [VS2015/VS2017 EditorConfig extension](https://marketplace.visualstudio.com/items?itemName=EditorConfigTeam.EditorConfig)\n- [Visual Studio Code EditorConfig extension](https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig)\n- [SublimeText EditorConfig extension](https://github.com/sindresorhus/editorconfig-sublime)\n\n## Frequently Asked Question\n\n### Why developing another Math library instead of using existing Unity Vector3...etc.?\n\nAfter years of feedback and experience with the previous API, we believe that providing an API that is closer to the way graphics developers have been using math libraries should better help its adoption and the ease of its usage. HLSL / GLSL math library is a very well designed, well understood math library leading to greater consistency.\n\n### Why not using `System.Numerics.Vectors`?\n\nMainly for the reason mentioned above, `System.Numerics.Vectors` is in many ways similar to our previous Vector library (more object oriented than graphics programming oriented).\nAlso the fact that our Burst compiler is able to recognize a lot more patterns for SIMD types and math intrinsics makes it easier to work with a dedicated API that reflects this ability.\n\n### Naming convention\n\nIn C# `int` and `float` are considered builtin types. Burst extends this set of bultin types to also include vectors, matrices and quaternions. These types are bultin in the sense that Burst knows about them and is be able to generate better code using these types than what would be possible with equivalent code using custom types.\n\nTo signify that these types are bultin their type names are in all lower case. The operators on these bultin types found in `Unity.Mathematics.math` are considered intrinsics and are thus always in lower case.\n\nThere are no plans to extend the set of intrinsic types beyond the current set of vectors (`typeN`), matrices (`typeNxN`) and quaternions (`quaternion`).\n\nThis convention has the added benefit of making the library highly compatible with shader code and makes porting or sharing code between the two almost frictionless.\n\n### Why can't we send a PR yet?\n\nWe are working on providing a Contributor License Agreement (CLA) with a sign-over functionality and our UCL License doesn't cover this yet.\n\n## Licensing\n\nUnity Companion License (“License”) Software Copyright © 2019 Unity Technologies ApS\n\nFor licensing details see [LICENSE.md](LICENSE.md)\n\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}