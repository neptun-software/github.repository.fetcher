{
  "metadata": {
    "timestamp": 1736710721781,
    "page": 120,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "khellang/Scrutor",
      "stars": 3720,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.541015625,
          "content": "root = true\n\n# Default settings:\n# A newline ending every file\n# Use 4 spaces as indentation\n[*]\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\n\n# C++ Files\n[*.{cpp,h,in}]\ncurly_bracket_next_line = true\nindent_brace_style = Allman\n\n# Xml project files\n[*.{csproj,vcxproj,vcxproj.filters,proj,nativeproj,locproj}]\nindent_size = 2\n\n# Xml files\n[*.{xml,stylecop,resx,ruleset}]\nindent_size = 2\n\n# Xml config files\n[*.{props,targets,config,nuspec}]\nindent_size = 2\n\n# Shell scripts\n[*.sh]\nend_of_line = lf\n\n[*.{cmd, bat}]\nend_of_line = crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.515625,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n.dotnet/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings \n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Azure Emulator\nefc/\nrfc/\n\n# Windows Store app package directory\nAppPackages/\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n.DS_Store\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\n\n# FAKE - F# Make\n.fake/\n\n# Rider\n.idea/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05859375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Kristian Hellang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "NuGet.Config",
          "type": "blob",
          "size": 0.3125,
          "content": "﻿<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<configuration>\n    <packageSources>\n        <add key=\"api.nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\n        <add key=\"dotnet8\" value=\"https://dnceng.pkgs.visualstudio.com/public/_packaging/dotnet8/nuget/v3/index.json\" />\n    </packageSources>\n</configuration>\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.7041015625,
          "content": "# Scrutor [![Build status](https://ci.appveyor.com/api/projects/status/j00uyvqnm54rdlkb?svg=true)](https://ci.appveyor.com/project/khellang/scrutor) [![NuGet Package](https://img.shields.io/nuget/v/Scrutor.svg)](https://www.nuget.org/packages/Scrutor)\n\n> Scrutor - I search or examine thoroughly; I probe, investigate or scrutinize  \n> From scrūta, as the original sense of the verb was to search through trash. - https://en.wiktionary.org/wiki/scrutor\n\nAssembly scanning and decoration extensions for Microsoft.Extensions.DependencyInjection\n\n## Installation\n\nInstall the [Scrutor NuGet Package](https://www.nuget.org/packages/Scrutor).\n\n### Package Manager Console\n\n```\nInstall-Package Scrutor\n```\n\n### .NET Core CLI\n\n```\ndotnet add package Scrutor\n```\n\n## Usage\n\nThe library adds two extension methods to `IServiceCollection`:\n\n* `Scan` - This is the entry point to set up your assembly scanning.\n* `Decorate` - This method is used to decorate already registered services.\n\nSee **Examples** below for usage examples.\n\n## Examples\n\n### Scanning\n\n```csharp\nvar collection = new ServiceCollection();\n\ncollection.Scan(scan => scan\n     // We start out with all types in the assembly of ITransientService\n    .FromAssemblyOf<ITransientService>()\n        // AddClasses starts out with all public, non-abstract types in this assembly.\n        // These types are then filtered by the delegate passed to the method.\n        // In this case, we filter out only the classes that are assignable to ITransientService.\n        .AddClasses(classes => classes.AssignableTo<ITransientService>())\n            // We then specify what type we want to register these classes as.\n            // In this case, we want to register the types as all of its implemented interfaces.\n            // So if a type implements 3 interfaces; A, B, C, we'd end up with three separate registrations.\n            .AsImplementedInterfaces()\n            // And lastly, we specify the lifetime of these registrations.\n            .WithTransientLifetime()\n        // Here we start again, with a new full set of classes from the assembly above.\n        // This time, filtering out only the classes assignable to IScopedService.\n        .AddClasses(classes => classes.AssignableTo<IScopedService>())\n            // Now, we just want to register these types as a single interface, IScopedService.\n            .As<IScopedService>()\n            // And again, just specify the lifetime.\n            .WithScopedLifetime()\n        // Generic interfaces are also supported too, e.g. public interface IOpenGeneric<T> \n        .AddClasses(classes => classes.AssignableTo(typeof(IOpenGeneric<>)))\n            .AsImplementedInterfaces()\n        // And you scan generics with multiple type parameters too\n        // e.g. public interface IQueryHandler<TQuery, TResult>\n        .AddClasses(classes => classes.AssignableTo(typeof(IQueryHandler<,>)))\n            .AsImplementedInterfaces());\n```\n\n### Decoration\n\n```csharp\nvar collection = new ServiceCollection();\n\n// First, add our service to the collection.\ncollection.AddSingleton<IDecoratedService, Decorated>();\n\n// Then, decorate Decorated with the Decorator type.\ncollection.Decorate<IDecoratedService, Decorator>();\n\n// Finally, decorate Decorator with the OtherDecorator type.\n// As you can see, OtherDecorator requires a separate service, IService. We can get that from the provider argument.\ncollection.Decorate<IDecoratedService>((inner, provider) => new OtherDecorator(inner, provider.GetRequiredService<IService>()));\n\nvar serviceProvider = collection.BuildServiceProvider();\n\n// When we resolve the IDecoratedService service, we'll get the following structure:\n// OtherDecorator -> Decorator -> Decorated\nvar instance = serviceProvider.GetRequiredService<IDecoratedService>();\n```\n"
        },
        {
          "name": "Scrutor.sln",
          "type": "blob",
          "size": 2.1875,
          "content": "Microsoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio 15\nVisualStudioVersion = 15.0.26228.4\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"src\", \"src\", \"{3F8D19AB-70F9-4640-BEDE-BBDA2AA4EE9D}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{EA96AC3B-130F-4415-9D22-0074ECF8880F}\"\n\tProjectSection(SolutionItems) = preProject\n\t\tNuGet.Config = NuGet.Config\n\t\tREADME.md = README.md\n\t\t.github\\workflows\\build.yml = .github\\workflows\\build.yml\n\tEndProjectSection\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"test\", \"test\", \"{34EEB067-2738-4DD0-8596-D67A9461833A}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Scrutor\", \"src\\Scrutor\\Scrutor.csproj\", \"{1D63DA77-E425-4FEA-BC82-94A8F6C3024E}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Scrutor.Tests\", \"test\\Scrutor.Tests\\Scrutor.Tests.csproj\", \"{B065DC10-3AD1-462B-A90E-9BE86403243E}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{1D63DA77-E425-4FEA-BC82-94A8F6C3024E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{1D63DA77-E425-4FEA-BC82-94A8F6C3024E}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{1D63DA77-E425-4FEA-BC82-94A8F6C3024E}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{1D63DA77-E425-4FEA-BC82-94A8F6C3024E}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{B065DC10-3AD1-462B-A90E-9BE86403243E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{B065DC10-3AD1-462B-A90E-9BE86403243E}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{B065DC10-3AD1-462B-A90E-9BE86403243E}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{B065DC10-3AD1-462B-A90E-9BE86403243E}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{1D63DA77-E425-4FEA-BC82-94A8F6C3024E} = {3F8D19AB-70F9-4640-BEDE-BBDA2AA4EE9D}\n\t\t{B065DC10-3AD1-462B-A90E-9BE86403243E} = {34EEB067-2738-4DD0-8596-D67A9461833A}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "Scrutor.sln.DotSettings",
          "type": "blob",
          "size": 0.390625,
          "content": "﻿<wpf:ResourceDictionary xml:space=\"preserve\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:s=\"clr-namespace:System;assembly=mscorlib\" xmlns:ss=\"urn:shemas-jetbrains-com:settings-storage-xaml\" xmlns:wpf=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Scrutor/@EntryIndexedValue\">True</s:Boolean></wpf:ResourceDictionary>"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}