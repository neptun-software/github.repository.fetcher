{
  "metadata": {
    "timestamp": 1736711005881,
    "page": 715,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "brminnick/AsyncAwaitBestPractices",
      "stars": 1667,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 5.9267578125,
          "content": "# Suppress: EC112\n# top-most EditorConfig file\nroot = true\n\n# Default settings:\n# A newline ending every file\n# Use 4 spaces as indentation\n[*]\ninsert_final_newline = false\nindent_style = space\nindent_size = 4\n\n# Code files\n[*.{cs,csx,vb,vbx}]\nindent_style = tab\nindent_size = 4\n\n# Code files\n[*.sln]\nindent_size = 4\n\n# Xml project files\n[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]\nindent_size = 2\n\n# Xml config files\n[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]\nindent_size = 2\n\n# JSON files\n[*.json]\nindent_size = 2\n\n# XML files\n[*.xml]\nindent_size = 2\n\n# Dotnet code style settings:\n[*.{cs,vb}]\n# IDE0005: Remove unnecessary imports\ndotnet_diagnostic.IDE0005.severity = suggestion\n# Sort using and Import directives with System.* appearing first\ndotnet_sort_system_directives_first = true\n# Avoid \"this.\" and \"Me.\" if not necessary\ndotnet_style_qualification_for_field = false:suggestion\ndotnet_style_qualification_for_property = false:suggestion\ndotnet_style_qualification_for_method = false:suggestion\ndotnet_style_qualification_for_event = false:suggestion\n\n# Use language keywords instead of framework type names for type references\ndotnet_style_predefined_type_for_locals_parameters_members = true:suggestion\ndotnet_style_predefined_type_for_member_access = true:suggestion\ndotnet_style_require_accessibility_modifiers = omit_if_default:warning\n\n# Suggest more modern language features when available\ndotnet_style_object_initializer = true:suggestion\ndotnet_style_collection_initializer = true:suggestion\ndotnet_style_prefer_collection_expression = when_types_loosely_match:suggestion\ndotnet_style_coalesce_expression = true:suggestion\ndotnet_style_null_propagation = true:suggestion\ndotnet_style_explicit_tuple_names = true:suggestion\n\n# Naming Conventions:\n# Pascal Casing\ndotnet_naming_symbols.method_and_property_symbols.applicable_kinds= method,property,enum\ndotnet_naming_symbols.method_and_property_symbols.applicable_accessibilities = *\ndotnet_naming_style.pascal_case_style.capitalization =   pascal_case\n\ndotnet_naming_rule.methods_and_properties_must_be_pascal_case.severity = warning\ndotnet_naming_rule.methods_and_properties_must_be_pascal_case.symbols = method_and_property_symbols\ndotnet_naming_rule.methods_and_properties_must_be_pascal_case.style = pascal_case_style\n\n# Non-public members must be lower-case\ndotnet_naming_symbols.non_public_symbols.applicable_kinds = field\ndotnet_naming_symbols.non_public_symbols.applicable_accessibilities = private\n#dotnet_naming_style.all_lower_case_style.capitalization = camel_case\n\ndotnet_naming_rule.non_public_members_must_be_lower_case.severity = warning\ndotnet_naming_rule.non_public_members_must_be_lower_case.symbols = non_public_symbols\ndotnet_naming_rule.non_public_members_must_be_lower_case.style = all_lower_case_style\n\ndotnet_diagnostic.IDE0002.severity = error \n\n# Organize usings\ndotnet_sort_system_directives_first = true\n\n# CS4014: Because this call is not awaited, execution of the current method continues before the call is completed\ndotnet_diagnostic.CS4014.severity = error\n\n# Remove explicit default access modifiers\ndotnet_style_require_accessibility_modifiers = omit_if_default:error\n\n# CA1063: Implement IDisposable Correctly\ndotnet_diagnostic.CA1063.severity = error\n\n# CA1707: Remove the underscores from member name\ndotnet_diagnostic.CA1707.severity = none\n\n# CA1305: The behavior of 'string.Format(string, object)' could vary based on the current user's locale settings. Replace this call\ndotnet_diagnostic.CA1305.severity = suggestion\n\n# CA1822: Member does not access instance data and can be marked as static\ndotnet_diagnostic.CA1822.severity = error\n\n# CA1050: Declar types in namespaces\ndotnet_diagnostic.CA1050.severity = error\n\n# CA2016: Forward the 'cancellationToken' parameter to the 'Delay' method or pass in 'CancellationToken.None' explicitly to indicate intentionally not propagating the token\ndotnet_diagnostic.CA2016.severity = error\n\n# CA2208: Method passes parameter as the paramName argument to a ArgumentNullException constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.\ndotnet_diagnostic.CA2208.severity = error\n\n# CA1001: Type owns disposable field(s) but is not disposable\ndotnet_diagnostic.CA1001.severity = error\n\n# CA1834: Use 'StringBuilder.Append(char)' instead of 'StringBuilder.Append(string)' when the input is a constant unit string\ndotnet_diagnostic.CA1834.severity = error\n\n# CA1309: Use ordinal string comparison\ndotnet_diagnostic.CA1309.severity = error\n\n# CSharp code style settings:\n[*.cs]\n# Do not prefer \"var\" everywhere\ncsharp_style_var_for_built_in_types = true:none\ncsharp_style_var_when_type_is_apparent = true:none\ncsharp_style_var_elsewhere = true:none\n\n# Prefer method-like constructs to have a block body\ncsharp_style_expression_bodied_methods = true:suggestion\ncsharp_style_expression_bodied_constructors = true:suggestion\ncsharp_style_expression_bodied_operators = true:suggestion\n\n# Prefer property-like constructs to have an expression-body\ncsharp_style_expression_bodied_properties = true:suggestion\ncsharp_style_expression_bodied_indexers = true:suggestion\ncsharp_style_expression_bodied_accessors = true:suggestion\n\n# Suggest more modern language features when available\ncsharp_style_pattern_matching_over_is_with_cast_check = true:suggestion\ncsharp_style_pattern_matching_over_as_with_null_check = true:suggestion\ncsharp_style_inlined_variable_declaration = true:suggestion\ncsharp_style_throw_expression = true:suggestion\ncsharp_style_conditional_delegate_call = true:suggestion\n\n# Newline settings\ncsharp_new_line_before_open_brace = all\ncsharp_new_line_before_else = true\ncsharp_new_line_before_catch = true\ncsharp_new_line_before_finally = true\ncsharp_new_line_before_members_in_object_initializers = true\ncsharp_new_line_before_members_in_anonymous_types = true\n\n#IDE0160: Use file scoped namespace\ncsharp_style_namespace_declarations = file_scoped:error"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.6884765625,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n\n# Force bash scripts to always use lf line endings so that if a repo is accessed\n# in Unix via a file share from Windows, the scripts will work.\n*.sh text eol=lf\n\n# Force the docs to always use lf line endings\ndocs/**/*.xml text eol=lf"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 14.716796875,
          "content": "\n# Created by https://www.gitignore.io/api/xamarinstudio,visualstudio,visualstudiocode,xcode,android,macos,csharp,f#,fastlane,java,jetbrains,linux,monodevelop,objective-c,swift,sublimetext,unity\n\n### fastlane ###\n# fastlane - A streamlined workflow tool for Cocoa deployment\n\n# fastlane specific\nfastlane/report.xml\n\n# deliver temporary files\nfastlane/Preview.html\n\n# snapshot generated screenshots\nfastlane/screenshots/**/*.png\nfastlane/screenshots/screenshots.html\n\n# scan temporary files\nfastlane/test_output\n\n**/__*.json\n**/local.settings.json\n\n\n### XamarinStudio ###\nbin/\nobj/\n*.userprefs\n\n\n### VisualStudioCode ###\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n\n\n### Xcode ###\n# Xcode\n#\n# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore\n\n## Build generated\nbuild/\nDerivedData/\n\n## Various settings\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\nxcuserdata/\n\n## Other\n*.moved-aside\n*.xccheckout\n*.xcscmblueprint\n\n\n### Android ###\n# Built application files\n*.apk\n*.ap_\n\n# Files for the ART/Dalvik VM\n*.dex\n\n# Java class files\n*.class\n\n# Generated files\ngen/\nout/\nResource.designer.cs\n\n# Gradle files\n.gradle/\n\n# Local configuration file (sdk path, etc)\nlocal.properties\n\n# Proguard folder generated by Eclipse\nproguard/\n\n# Log Files\n*.log\n\n# Android Studio Navigation editor temp files\n.navigation/\n\n# Android Studio captures folder\ncaptures/\n\n# Intellij\n*.iml\n.idea/workspace.xml\n.idea/tasks.xml\n.idea/libraries\n\n# Keystore files\n*.jks\n\n# External native build folder generated in Android Studio 2.2 and later\n.externalNativeBuild\n\n### Android Patch ###\ngen-external-apklibs\n\n\n### macOS ###\n*.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n# Thumbnails\n._*\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n\n### Csharp ###\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n*.vcxproj.filters\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n**/Properties/launchSettings.json\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/\n\n\n### F# ###\nlib/debug\nlib/release\nDebug\nobj\nbin\n*.exe\n!.paket/paket.bootstrapper.exe\n\n\n### SublimeText ###\n# cache files for sublime text\n*.tmlanguage.cache\n*.tmPreferences.cache\n*.stTheme.cache\n\n# workspace files are user-specific\n*.sublime-workspace\n\n# project files should be checked into the repository, unless a significant\n# proportion of contributors will probably not be using SublimeText\n# *.sublime-project\n\n# sftp configuration file\nsftp-config.json\n\n# Package control specific files\nPackage Control.last-run\nPackage Control.ca-list\nPackage Control.ca-bundle\nPackage Control.system-ca-bundle\nPackage Control.cache/\nPackage Control.ca-certs/\nbh_unicode_properties.cache\n\n# Sublime-github package stores a github token in this file\n# https://packagecontrol.io/packages/sublime-github\nGitHub.sublime-settings\n\n\n### Swift ###\n# Xcode\n#\n# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore\n\n## Build generated\n\n## Various settings\n\n## Other\n*.xcuserstate\n\n## Obj-C/Swift specific\n*.hmap\n*.ipa\n*.dSYM.zip\n*.dSYM\n\n## Playgrounds\ntimeline.xctimeline\nplayground.xcworkspace\n\n# Swift Package Manager\n#\n# Add this line if you want to avoid checking in source code from Swift Package Manager dependencies.\n# Packages/\n.build/\n\n# CocoaPods\n#\n# We recommend against adding the Pods directory to your .gitignore. However\n# you should judge for yourself, the pros and cons are mentioned at:\n# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control\n#\n# Pods/\n\n# Carthage\n#\n# Add this line if you want to avoid checking in source code from Carthage dependencies.\n# Carthage/Checkouts\n\nCarthage/Build\n\n# fastlane\n#\n# It is recommended to not store the screenshots in the git repo. Instead, use fastlane to re-generate the\n# screenshots whenever they are needed.\n# For more information about the recommended setup visit:\n# https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Gitignore.md\n\nfastlane/screenshots\n\n\n### JetBrains ###\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and Webstorm\n# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n\n# User-specific stuff:\n\n# Sensitive or high-churn files:\n.idea/dataSources/\n.idea/dataSources.ids\n.idea/dataSources.xml\n.idea/dataSources.local.xml\n.idea/sqlDataSources.xml\n.idea/dynamic.xml\n.idea/uiDesigner.xml\n\n# Gradle:\n.idea/gradle.xml\n\n# Mongo Explorer plugin:\n.idea/mongoSettings.xml\n\n## File-based project format:\n*.iws\n\n## Plugin-specific files:\n\n# IntelliJ\n/out/\n\n# mpeltonen/sbt-idea plugin\n.idea_modules/\n\n# JIRA plugin\natlassian-ide-plugin.xml\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\nfabric.properties\n\n### JetBrains Patch ###\n# Comment Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-215987721\n\n# *.iml\n# modules.xml\n# .idea/misc.xml\n# *.ipr\n\n\n### Linux ###\n\n# temporary files which can be created if a process still has a handle open of a deleted file\n.fuse_hidden*\n\n# KDE directory preferences\n.directory\n\n# Linux trash folder which might appear on any partition or disk\n.Trash-*\n\n# .nfs files are created when an open file is removed but is still being accessed\n.nfs*\n\n\n### MonoDevelop ###\n#User Specific\n*.usertasks\n\n#Mono Project Files\n*.resources\ntest-results/\n\n\n### Objective-C ###\n# Xcode\n#\n# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore\n\n## Build generated\n\n## Various settings\n\n## Other\n\n## Obj-C/Swift specific\n\n# CocoaPods\n#\n# We recommend against adding the Pods directory to your .gitignore. However\n# you should judge for yourself, the pros and cons are mentioned at:\n# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control\n#\n# Pods/\n\n# Carthage\n#\n# Add this line if you want to avoid checking in source code from Carthage dependencies.\n# Carthage/Checkouts\n\n\n# fastlane\n#\n# It is recommended to not store the screenshots in the git repo. Instead, use fastlane to re-generate the \n# screenshots whenever they are needed.\n# For more information about the recommended setup visit:\n# https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Gitignore.md\n\n\n# Code Injection\n#\n# After new code Injection tools there's a generated folder /iOSInjectionProject\n# https://github.com/johnno1962/injectionforxcode\n\niOSInjectionProject/\n\n### Objective-C Patch ###\n\n\n### Unity ###\n/[Ll]ibrary/\n/[Tt]emp/\n/[Oo]bj/\n/[Bb]uild/\n/[Bb]uilds/\n/Assets/AssetStoreTools*\n\n# Autogenerated VS/MD/Consulo solution and project files\nExportedObj/\n.consulo/*.csproj\n.consulo/*.unityproj\n.consulo/*.sln\n.consulo/*.booproj\n.consulo/*.svd\n\n\n# Unity3D generated meta files\n*.pidb.meta\n\n# Unity3D Generated File On Crash Reports\nsysinfo.txt\n\n# Builds\n*.unitypackage\n\n\n### Java ###\n\n# BlueJ files\n*.ctxt\n\n# Mobile Tools for Java (J2ME)\n.mtj.tmp/\n\n# Package Files #\n*.jar\n*.war\n*.ear\n\n# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\nhs_err_pid*\n\n# MFractor\n.mfractor/\n\n### VisualStudio ###\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n\n# Build results\n\n# Visual Studio 2015 cache/options directory\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n\n# NUNIT\n\n# Build Results of an ATL Project\n\n# .NET Core\n\n\n# Chutzpah Test files\n\n# Visual C++ cache files\n\n# Visual Studio profiler\n\n# TFS 2012 Local Workspace\n\n# Guidance Automation Toolkit\n\n# ReSharper is a .NET coding add-in\n\n# JustCode is a .NET coding add-in\n\n# TeamCity is a build add-in\n\n# DotCover is a Code Coverage Tool\n\n# Visual Studio code coverage results\n\n# NCrunch\n\n# MightyMoose\n\n# Web workbench (sass)\n\n# Installshield output folder\n\n# DocProject is a documentation generator add-in\n\n# Click-Once directory\n\n# Publish Web Output\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\n\n# NuGet Packages\n# The packages folder can be ignored because of Package Restore\n# except build/, which is used as an MSBuild target.\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n\n# Microsoft Azure Build Output\n\n# Microsoft Azure Emulator\n\n# Windows Store app package directories and files\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n# but keep track of directories ending in .cache\n\n# Others\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n\n# SQL Server files\n\n# Business Intelligence projects\n\n# Microsoft Fakes\n\n# GhostDoc plugin setting file\n\n# Node.js Tools for Visual Studio\n\n# Visual Studio 6 build log\n\n# Visual Studio 6 workspace options file\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n\n# Visual Studio LightSwitch build output\n\n# Paket dependency manager\n\n# FAKE - F# Make\n\n# JetBrains Rider\n\n# CodeRush\n\n# Python Tools for Visual Studio (PTVS)\n\n# Cake - Uncomment if you are using it\n# tools/\n\n### VisualStudio Patch ###\n\n# End of https://www.gitignore.io/api/xamarinstudio,visualstudio,visualstudiocode,xcode,android,macos,csharp,f#,fastlane,java,jetbrains,linux,monodevelop,objective-c,swift,sublimetext,unity\n\n### VS Code ###\n**/.vscode/**\n\n### .NET MAUI ###\n\n**/.meteor/"
        },
        {
          "name": ".runsettings",
          "type": "blob",
          "size": 0.53515625,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RunSettings>\n  <RunConfiguration>\n    <TreatNoTestsAsError>true</TreatNoTestsAsError>\n  </RunConfiguration>\n\n  <DataCollectionRunSettings>\n    <DataCollectors>\n      <DataCollector friendlyName=\"XPlat code coverage\">\n        <Configuration>\n          <Format>cobertura</Format>\n          <SkipAutoProps>true</SkipAutoProps>          \n          <IncludeTestAssembly>false</IncludeTestAssembly>\n        </Configuration>\n      </DataCollector>\n    </DataCollectors>\n  </DataCollectionRunSettings>\n</RunSettings>"
        },
        {
          "name": "AsyncAwaitBestPractices.sln",
          "type": "blob",
          "size": 6.7119140625,
          "content": "Microsoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.1.31903.286\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Sample\", \"Sample\", \"{2A09E240-E14C-45D9-8BE7-86EC6A5007DE}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Tests\", \"Tests\", \"{3CDAB3BD-D9EA-4BCD-8FA8-C103F2136337}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"AsyncAwaitBestPractices.UnitTests\", \"src\\AsyncAwaitBestPractices.UnitTests\\AsyncAwaitBestPractices.UnitTests.csproj\", \"{D741AD98-D92C-4A4A-94D7-0E4F55C7CAA1}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"AsyncAwaitBestPractices\", \"src\\AsyncAwaitBestPractices\\AsyncAwaitBestPractices.csproj\", \"{C52330DE-88C6-40A8-AA6E-DA5E7AE35D72}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"AsyncAwaitBestPractices.MVVM\", \"src\\AsyncAwaitBestPractices.MVVM\\AsyncAwaitBestPractices.MVVM.csproj\", \"{7E7B9DEC-FDA8-43F9-9303-DA9FC27A9B15}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{D59772E1-5AE1-4B9C-B193-AEB40CD697E3}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.editorconfig = .editorconfig\n\t\tDirectory.Build.props = Directory.Build.props\n\t\tglobal.json = global.json\n\t\tDirectory.Build.targets = Directory.Build.targets\n\tEndProjectSection\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"HackerNews\", \"sample\\HackerNews.csproj\", \"{FCD28BE8-BFDF-4316-9C21-64CD8A00B9A5}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tDebug|iPhone = Debug|iPhone\n\t\tDebug|iPhoneSimulator = Debug|iPhoneSimulator\n\t\tRelease|Any CPU = Release|Any CPU\n\t\tRelease|iPhone = Release|iPhone\n\t\tRelease|iPhoneSimulator = Release|iPhoneSimulator\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{D741AD98-D92C-4A4A-94D7-0E4F55C7CAA1}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{D741AD98-D92C-4A4A-94D7-0E4F55C7CAA1}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{D741AD98-D92C-4A4A-94D7-0E4F55C7CAA1}.Debug|iPhone.ActiveCfg = Debug|Any CPU\n\t\t{D741AD98-D92C-4A4A-94D7-0E4F55C7CAA1}.Debug|iPhone.Build.0 = Debug|Any CPU\n\t\t{D741AD98-D92C-4A4A-94D7-0E4F55C7CAA1}.Debug|iPhoneSimulator.ActiveCfg = Debug|Any CPU\n\t\t{D741AD98-D92C-4A4A-94D7-0E4F55C7CAA1}.Debug|iPhoneSimulator.Build.0 = Debug|Any CPU\n\t\t{D741AD98-D92C-4A4A-94D7-0E4F55C7CAA1}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{D741AD98-D92C-4A4A-94D7-0E4F55C7CAA1}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{D741AD98-D92C-4A4A-94D7-0E4F55C7CAA1}.Release|iPhone.ActiveCfg = Release|Any CPU\n\t\t{D741AD98-D92C-4A4A-94D7-0E4F55C7CAA1}.Release|iPhone.Build.0 = Release|Any CPU\n\t\t{D741AD98-D92C-4A4A-94D7-0E4F55C7CAA1}.Release|iPhoneSimulator.ActiveCfg = Release|Any CPU\n\t\t{D741AD98-D92C-4A4A-94D7-0E4F55C7CAA1}.Release|iPhoneSimulator.Build.0 = Release|Any CPU\n\t\t{C52330DE-88C6-40A8-AA6E-DA5E7AE35D72}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{C52330DE-88C6-40A8-AA6E-DA5E7AE35D72}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{C52330DE-88C6-40A8-AA6E-DA5E7AE35D72}.Debug|iPhone.ActiveCfg = Debug|Any CPU\n\t\t{C52330DE-88C6-40A8-AA6E-DA5E7AE35D72}.Debug|iPhone.Build.0 = Debug|Any CPU\n\t\t{C52330DE-88C6-40A8-AA6E-DA5E7AE35D72}.Debug|iPhoneSimulator.ActiveCfg = Debug|Any CPU\n\t\t{C52330DE-88C6-40A8-AA6E-DA5E7AE35D72}.Debug|iPhoneSimulator.Build.0 = Debug|Any CPU\n\t\t{C52330DE-88C6-40A8-AA6E-DA5E7AE35D72}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{C52330DE-88C6-40A8-AA6E-DA5E7AE35D72}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{C52330DE-88C6-40A8-AA6E-DA5E7AE35D72}.Release|iPhone.ActiveCfg = Release|Any CPU\n\t\t{C52330DE-88C6-40A8-AA6E-DA5E7AE35D72}.Release|iPhone.Build.0 = Release|Any CPU\n\t\t{C52330DE-88C6-40A8-AA6E-DA5E7AE35D72}.Release|iPhoneSimulator.ActiveCfg = Release|Any CPU\n\t\t{C52330DE-88C6-40A8-AA6E-DA5E7AE35D72}.Release|iPhoneSimulator.Build.0 = Release|Any CPU\n\t\t{7E7B9DEC-FDA8-43F9-9303-DA9FC27A9B15}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{7E7B9DEC-FDA8-43F9-9303-DA9FC27A9B15}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{7E7B9DEC-FDA8-43F9-9303-DA9FC27A9B15}.Debug|iPhone.ActiveCfg = Debug|Any CPU\n\t\t{7E7B9DEC-FDA8-43F9-9303-DA9FC27A9B15}.Debug|iPhone.Build.0 = Debug|Any CPU\n\t\t{7E7B9DEC-FDA8-43F9-9303-DA9FC27A9B15}.Debug|iPhoneSimulator.ActiveCfg = Debug|Any CPU\n\t\t{7E7B9DEC-FDA8-43F9-9303-DA9FC27A9B15}.Debug|iPhoneSimulator.Build.0 = Debug|Any CPU\n\t\t{7E7B9DEC-FDA8-43F9-9303-DA9FC27A9B15}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{7E7B9DEC-FDA8-43F9-9303-DA9FC27A9B15}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{7E7B9DEC-FDA8-43F9-9303-DA9FC27A9B15}.Release|iPhone.ActiveCfg = Release|Any CPU\n\t\t{7E7B9DEC-FDA8-43F9-9303-DA9FC27A9B15}.Release|iPhone.Build.0 = Release|Any CPU\n\t\t{7E7B9DEC-FDA8-43F9-9303-DA9FC27A9B15}.Release|iPhoneSimulator.ActiveCfg = Release|Any CPU\n\t\t{7E7B9DEC-FDA8-43F9-9303-DA9FC27A9B15}.Release|iPhoneSimulator.Build.0 = Release|Any CPU\n\t\t{FCD28BE8-BFDF-4316-9C21-64CD8A00B9A5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{FCD28BE8-BFDF-4316-9C21-64CD8A00B9A5}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{FCD28BE8-BFDF-4316-9C21-64CD8A00B9A5}.Debug|iPhone.ActiveCfg = Debug|Any CPU\n\t\t{FCD28BE8-BFDF-4316-9C21-64CD8A00B9A5}.Debug|iPhone.Build.0 = Debug|Any CPU\n\t\t{FCD28BE8-BFDF-4316-9C21-64CD8A00B9A5}.Debug|iPhoneSimulator.ActiveCfg = Debug|Any CPU\n\t\t{FCD28BE8-BFDF-4316-9C21-64CD8A00B9A5}.Debug|iPhoneSimulator.Build.0 = Debug|Any CPU\n\t\t{FCD28BE8-BFDF-4316-9C21-64CD8A00B9A5}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{FCD28BE8-BFDF-4316-9C21-64CD8A00B9A5}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{FCD28BE8-BFDF-4316-9C21-64CD8A00B9A5}.Release|iPhone.ActiveCfg = Release|Any CPU\n\t\t{FCD28BE8-BFDF-4316-9C21-64CD8A00B9A5}.Release|iPhone.Build.0 = Release|Any CPU\n\t\t{FCD28BE8-BFDF-4316-9C21-64CD8A00B9A5}.Release|iPhoneSimulator.ActiveCfg = Release|Any CPU\n\t\t{FCD28BE8-BFDF-4316-9C21-64CD8A00B9A5}.Release|iPhoneSimulator.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{D741AD98-D92C-4A4A-94D7-0E4F55C7CAA1} = {3CDAB3BD-D9EA-4BCD-8FA8-C103F2136337}\n\t\t{FCD28BE8-BFDF-4316-9C21-64CD8A00B9A5} = {2A09E240-E14C-45D9-8BE7-86EC6A5007DE}\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {BBC2B0A7-879B-4A66-8228-3E897F3BA5DA}\n\tEndGlobalSection\n\tGlobalSection(SharedMSBuildProjectFiles) = preSolution\n\t\tsample\\HackerNews.Shared\\HackerNews.Shared.projitems*{8551b218-5734-4f5c-9d35-25db859ccfde}*SharedItemsImports = 13\n\t\tsample\\HackerNews.Shared\\HackerNews.Shared.projitems*{c3d6de1f-ed08-4ca0-a092-56785bb3cb4d}*SharedItemsImports = 5\n\t\tsample\\HackerNews.Shared\\HackerNews.Shared.projitems*{cca4bf8b-7b64-4f7b-9c3a-ae498a65fd43}*SharedItemsImports = 4\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 5.7529296875,
          "content": "﻿<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Project>\n  <PropertyGroup>\n    <Nullable>enable</Nullable>\n    <NuGetVersion>9.0.0</NuGetVersion>\n    <LangVersion>preview</LangVersion>\n    <Deterministic>true</Deterministic>\n    <LatestSupportedTFM>net9.0</LatestSupportedTFM>\n    <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>\n    <ProduceReferenceAssembly>true</ProduceReferenceAssembly>\n    <AccelerateBuildsInVisualStudio>true</AccelerateBuildsInVisualStudio>\n    <GenerateErrorForMissingTargetingPacks>false</GenerateErrorForMissingTargetingPacks>\n\n    <!-- MAUI Specific -->\n    <MauiPackageVersion>9.0.22</MauiPackageVersion>\n    <MauiStrictXamlCompilation>true</MauiStrictXamlCompilation>\n    <SkipValidateMauiImplicitPackageReferences>true</SkipValidateMauiImplicitPackageReferences>\n    <MauiEnableXamlCBindingWithSourceCompilation>true</MauiEnableXamlCBindingWithSourceCompilation>\n    \n    <!-- Prevent NuGet Pacakge Vulnerabilities -->\n    <NuGetAudit>enable</NuGetAudit>\n    <NuGetAuditMode>all</NuGetAuditMode>\n\n    <!-- https://learn.microsoft.com/dotnet/core/deploying/native-aot/?tabs=net8plus%2Cwindows -->\n    <StripSymbols>false</StripSymbols>\n    <TrimmerSingleWarn>false</TrimmerSingleWarn>\n\n    <!-- WarningsAsErrors\n     CS0419: Ambiguous reference in cref attribute \n     CS0618: Is obsolete\n     CS1570: XML comment has badly formed XML 'Expected an end tag for element [parameter] \n     CS1571: XML comment on [construct] has a duplicate param tag for [parameter] \n     CS1572: XML comment has a param tag for '[parameter]', but there is no parameter by that name \n     CS1573: Parameter has no matching param tag in the XML comment \n     CS1574: XML comment has cref attribute that could not be resolved \n     CS1580: Invalid type for parameter 'parameter number' in XML comment cref attribute \n     CS1581: Invalid return type in XML comment cref attribute \n     CS1584: XML comment has syntactically incorrect cref attribute\n     CS1587: XML comment is not placed on a valid language element \n     CS1589: The syntax of a tag which referenced a file was incorrect \n     CS1590: Invalid XML include element Missing file attribute \n     CS1591: Missing XML comment for publicly visible type or member\n     CS1592: Badly formed XML in included comments file \n     CS1598: XML parser could not be loaded. The XML documentation file will not be generated. \n     CS1658: Identifier expected; 'true' is a keyword\n     CS1710: XML comment on 'type' has a duplicate typeparam tag for 'parameter'\n     CS1711: XML comment has a typeparam tag, but there is no type parameter by that name \n     CS1712: Type parameter has no matching typeparam tag in the XML comment\n     CS1723: XML comment has cref attribute that refers to a type parameter\n     CS1734: XML comment has a paramref tag, but there is no parameter by that name\n     CsWinRT1028: Class implements WinRT interfaces but isn't marked partial\n     CsWinRT1030: Class implements WinRT interfaces that require unsafe code\n     XC0045: Binding: Property not found\n     XC0103: Consider attributing the markup extension with [RequireService] or [AcceptEmptyServiceProvider] if it doesn't require any\n     NU1900\tError communicating with package source, while getting vulnerability information.\n     NU1901\tPackage with low severity detected\n     NU1902\tPackage with moderate severity detected\n     NU1903\tPackage with high severity detected\n     NU1904\tPackage with critical severity detected\n     NU1905\tAn audit source does not provide a vulnerability database\n     NUnit*: NUnit Analyzers \n     IL2***: Trim Warnings\n     IL3***: AOT Warnings-->\n    <WarningsAsErrors>\n      nullable,\n      CS0419,CS0618,CS1570,CS1571,CS1572,CS1573,CS1574,CS1580,CS1581,CS1584,CS1587,CS1589,CS1590,CS1591,CS1592,CS1598,CS1658,CS1710,CS1711,CS1712,CS1723,CS1734,\n      CsWinRT1028,CsWinRT1030,\n      XC0045,XC0103,\n      NU1900,NU1901,NU1902,NU1903,NU1904,NU1905,\n      NUnit1001,NUnit1002,NUnit1003,NUnit1004,NUnit1005,NUnit1006,NUnit1007,NUnit1008,NUnit1009,NUnit1010,NUnit1011,NUnit1012,NUnit1013,NUnit1014,NUnit1015,NUnit1016,NUnit1017,NUnit1018,NUnit1019,NUnit1020,NUnit1021,NUnit1022,NUnit1023,NUnit1024,NUnit1025,NUnit1026,NUnit1027,NUnit1028,NUnit1029,NUnit1030,NUnit1031,NUnit1032,NUnit1033,\n      NUnit2001,NUnit2002,NUnit2003,NUnit2004,NUnit2005,NUnit2006,NUnit2007,NUnit2008,NUnit2009,NUnit2010,NUnit2011,NUnit2012,NUnit2013,NUnit2014,NUnit2015,NUnit2016,NUnit2017,NUnit2018,NUnit2019,NUnit2020,NUnit2021,NUnit2022,NUnit2023,NUnit2024,NUnit2025,NUnit2026,NUnit2027,NUnit2028,NUnit2029,NUnit2030,NUnit2031,NUnit2032,NUnit2033,NUnit2034,NUnit2035,NUnit2036,NUnit2037,NUnit2038,NUnit2039,NUnit2040,NUnit2041,NUnit2042,NUnit2043,NUnit2044,NUnit2045,NUnit2046,NUnit2047,NUnit2048,NUnit2049,NUnit2050,\n      NUnit3001,NUnit3002,NUnit3003,NUnit3004,\n      NUnit4001,\n      IL2001,IL2002,IL2003,IL2004,IL2005,IL2006,IL2007,IL2008,IL2009,\n      IL2010,IL2011,IL2012,IL2013,IL2014,IL2015,IL2016,IL2017,IL2018,IL2019,\n      IL2020,IL2021,IL2022,IL2023,IL2024,IL2025,IL2026,IL2027,IL2028,IL2029,\n      IL2030,IL2031,IL2032,IL2033,IL2034,IL2035,IL2036,IL2037,IL2038,IL2039,\n      IL2040,IL2041,IL2042,IL2043,IL2044,IL2045,IL2046,IL2047,IL2048,IL2049,\n      IL2050,IL2051,IL2052,IL2053,IL2054,IL2055,IL2056,IL2057,IL2058,IL2059,\n      IL2060,IL2061,IL2062,IL2063,IL2064,IL2065,IL2066,IL2067,IL2068,IL2069,\n      IL2070,IL2071,IL2072,IL2073,IL2074,IL2075,IL2076,IL2077,IL2078,IL2079,\n      IL2080,IL2081,IL2082,IL2083,IL2084,IL2085,IL2086,IL2087,IL2088,IL2089,\n      IL2090,IL2091,IL2092,IL2093,IL2094,IL2095,IL2096,IL2097,IL2098,IL2099,\n      IL2100,IL2101,IL2102,IL2103,IL2104,IL2105,IL2106,IL2107,IL2108,IL2109,\n      IL2110,IL2111,IL2112,IL2113,IL2114,IL2115,IL2116,IL2117,IL2118,IL2119,\n      IL2120,IL2121,IL2122,\n      IL3050,IL3051,IL3052,IL3053,IL3054,IL3055,IL3056\n    </WarningsAsErrors>\n  </PropertyGroup>\n</Project>"
        },
        {
          "name": "Directory.Build.targets",
          "type": "blob",
          "size": 3.1298828125,
          "content": "﻿<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Project>\n  <ItemGroup Condition=\"$(TargetFramework.StartsWith('Xamarin.iOS')) != true AND $(TargetFramework.EndsWith('-ios')) != true\">\n    <Compile Remove=\"**\\**\\*.ios.cs\" />\n    <None Include=\"**\\**\\*.ios.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n    <Compile Remove=\"**\\ios\\**\\*.cs\" />\n    <None Include=\"**\\ios\\**\\*.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n  </ItemGroup>\n  <ItemGroup Condition=\"$(TargetFramework.StartsWith('Xamarin.Mac')) != true AND $(TargetFramework.EndsWith('-maccatalyst')) != true\">\n    <Compile Remove=\"**\\*.macos.cs\" />\n    <None Include=\"**\\*.macos.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n    <Compile Remove=\"**\\macos\\**\\*.cs\" />\n    <None Include=\"**\\macos\\**\\*.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n  </ItemGroup>\n  <ItemGroup Condition=\"$(TargetFramework.StartsWith('Xamarin.Mac')) != true AND $(TargetFramework.StartsWith('Xamarin.iOS')) != true AND $(TargetFramework.EndsWith('-ios')) != true AND $(TargetFramework.EndsWith('-maccatalyst')) != true\">\n    <Compile Remove=\"**\\*.macios.cs\" />\n    <None Include=\"**\\*.macios.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n    <Compile Remove=\"**\\macios\\**\\*.cs\" />\n    <None Include=\"**\\macios\\**\\*.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n  </ItemGroup>\n  <ItemGroup Condition=\"$(TargetFramework.StartsWith('MonoAndroid')) != true AND $(TargetFramework.EndsWith('-android')) != true \">\n    <Compile Remove=\"**\\**\\*.android.cs\" />\n    <None Include=\"**\\**\\*.android.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n    <Compile Remove=\"**\\android\\**\\*.cs\" />\n    <None Include=\"**\\android\\**\\*.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n  </ItemGroup>\n  <ItemGroup Condition=\"$(TargetFramework.Contains('-windows')) != true \">\n    <Compile Remove=\"**\\*.windows.cs\" />\n    <None Include=\"**\\*.windows.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n    <Compile Remove=\"**\\windows\\**\\*.cs\" />\n    <None Include=\"**\\windows\\**\\*.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n  </ItemGroup>\n  <ItemGroup Condition=\"$(TargetFramework.Contains('-tizen')) != true \">\n    <Compile Remove=\"**\\*.tizen.cs\" />\n    <None Include=\"**\\*.tizen.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n    <Compile Remove=\"**\\tizen\\**\\*.cs\" />\n    <None Include=\"**\\tizen\\**\\*.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n  </ItemGroup> \n  <ItemGroup Condition=\"!($(TargetFramework.StartsWith('net')) == true AND $(TargetFramework.EndsWith('.0')) == true AND $(TargetFramework.Contains('-')) != true)\"> <!-- e.g net6.0 or net7.0 -->\n    <Compile Remove=\"**\\*.net.cs\" />\n    <None Include=\"**\\*.net.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n    <Compile Remove=\"**\\net\\**\\*.cs\" />\n    <None Include=\"**\\net\\**\\*.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n  </ItemGroup>\n</Project>"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.046875,
          "content": "MIT License\n\nCopyright (c) 2018 Brandon Minnick\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 24.3623046875,
          "content": "# AsyncAwaitBestPractices\n\n[![Build Status](https://brminnick.visualstudio.com/AsyncAwaitBestPractices/_apis/build/status/brminnick.AsyncAwaitBestPractices?branchName=main)](https://brminnick.visualstudio.com/AsyncAwaitBestPractices/_build/latest?definitionId=8&branchName=main)\n\nExtensions for `System.Threading.Tasks.Task`.\n\nInspired by [John Thiriet](https://github.com/johnthiriet)'s blog posts: \n- [Removing Async Void](https://johnthiriet.com/removing-async-void/)\n- [MVVM - Going Async With AsyncCommand](https://johnthiriet.com/mvvm-going-async-with-async-command/).\n\n###  AsyncAwaitBestPractices\n\n[![NuGet Version](https://img.shields.io/nuget/vpre/AsyncAwaitBestPractices)](https://www.nuget.org/packages/AsyncAwaitBestPractices/)\n [![NuGet](https://img.shields.io/nuget/dt/AsyncAwaitBestPractices)](https://www.nuget.org/packages/AsyncAwaitBestPractices/)\n\nAvailable on NuGet: https://www.nuget.org/packages/AsyncAwaitBestPractices/ \n\n- `SafeFireAndForget`\n    - An extension method to safely fire-and-forget a `Task` or a `ValueTask`\n    - Ensures the `Task` will rethrow an `Exception` if an `Exception` is caught in `IAsyncStateMachine.MoveNext()`\n- `WeakEventManager`\n    - Avoids memory leaks when events are not unsubscribed\n    - Used by `AsyncCommand`, `AsyncCommand<T>`, `AsyncValueCommand`, `AsyncValueCommand<T>`\n- [Usage instructions](#asyncawaitbestpractices-3)\n  \n### AsyncAwaitBestPractices.MVVM\n\n[![NuGet Version](https://img.shields.io/nuget/vpre/AsyncAwaitBestPractices.MVVM)](https://www.nuget.org/packages/AsyncAwaitBestPractices.MVVM/)\n [![NuGet](https://img.shields.io/nuget/dt/AsyncAwaitBestPractices.MVVM)](https://www.nuget.org/packages/AsyncAwaitBestPractices.MVVM/)\n\n- Available on NuGet: https://www.nuget.org/packages/AsyncAwaitBestPractices.MVVM/  \n\n- Allows for `Task` to safely be used asynchronously with `ICommand`:\n  - `IAsyncCommand : ICommand`\n  - `AsyncCommand : IAsyncCommand`\n  - `IAsyncCommand<T> : ICommand`    \n  - `AsyncCommand<T> : IAsyncCommand<T>`\n  - `IAsyncCommand<TExecute, TCanExecute> : IAsyncCommand<TExecute>`    \n  - `AsyncCommand<TExecute, TCanExecute> : IAsyncCommand<TExecute, TCanExecute>`    \n  \n- Allows for `ValueTask` to safely be used asynchronously with `ICommand`:\n  - `IAsyncValueCommand : ICommand`\n  - `AsyncValueCommand : IAsyncValueCommand`\n  - `IAsyncValueCommand<T> : ICommand`    \n  - `AsyncValueCommand<T> : IAsyncValueCommand<T>`\n  - `IAsyncValueCommand<TExecute, TCanExecute> : IAsyncValueCommand<TExecute>`    \n  - `AsyncValueCommand<TExecute, TCanExecute> : IAsyncValueCommand<TExecute, TCanExecute>`   \n- [Usage instructions](#asyncawaitbestpracticesmvvm-2)\n\n## Setup\n\n###  AsyncAwaitBestPractices\n\n- Available on NuGet: https://www.nuget.org/packages/AsyncAwaitBestPractices/ \n- Add to any project supporting .NET Standard 1.0\n\n### AsyncAwaitBestPractices.MVVM\n\n- Available on NuGet: https://www.nuget.org/packages/AsyncAwaitBestPractices.MVVM/  \n- Add to any project supporting .NET Standard 1.0\n\n## Why Do I Need This?\n\n### Podcasts\n\n[No Dogma Podcast](https://nodogmapodcast.bryanhogan.net), Hosted by [Bryan Hogan](https://twitter.com/bryanjhogan)\n- [Episode #133 Brandon Minnick, Async Await – Common Mistakes, Part 1](https://nodogmapodcast.bryanhogan.net/133-brandon-minnick-async-await-common-mistakes-part-1/)\n- [Episode #134 Brandon Minnick, Async Await – Common Mistakes, Part 2](https://nodogmapodcast.bryanhogan.net/134-brandon-minnick-async-await-common-mistakes-part-2/)\n\n### Video\n\n**NDC London 2024**\n\n[Correcting Common Async Await Mistakes in .NET 8](https://www.youtube.com/watch?v=GQYd6MWKiLI&embeds_referring_euri=https%3A%2F%2Ftwitter.com%2F&source_ve_path=Mjg2NjY&feature=emb_logo)\n\n[![](https://github.com/brminnick/AsyncAwaitBestPractices/assets/13558917/d59803c2-cf28-41b9-ac4f-9dce4a0fadc5)](https://www.youtube.com/watch?v=GQYd6MWKiLI)\n\n\n### Explaination\n\nAsync/await is great *but* there are two subtle problems that can easily creep into code:\n1. Creating race conditions/concurrent execution (where you code things in the right order but the code executes in a different order than you expect) \n2. Creating methods where the compiler recognizes exceptions but you the coder never see them (making it head-scratchingly annoying to debug *especially* if you accidentally introduced a race condition that you can’t see).\n\nThis library solves both of these problems.\n\nTo better understand why this library was created and the problem it solves, it’s important to first understand how the compiler generates code for an async method.  \n\n**tl;dr** A non-awaited `Task` doesn't rethrow exceptions and `AsyncAwaitBestPractices.SafeFireAndForget` ensures it will\n\n## Compiler-Generated Code for Async Method\n\n![Compiler-Generated Code for Async Method](https://i.stack.imgur.com/c9im1.png)\n\n(Source: [Xamarin University: _Using Async and Await_](https://github.com/XamarinUniversity/CSC350))\n\nThe compiler transforms an `async` method into an `IAsyncStateMachine` class which allows the .NET Runtime to \"remember\" what the method has accomplished.\n\n![Move Next](https://i.stack.imgur.com/JsmG1.png)\n\n(Source: [Xamarin University: _Using Async and Await_](https://github.com/XamarinUniversity/CSC350))\n\nThe `IAsyncStateMachine` interface implements `MoveNext()`, a method the executes every time the `await` operator is used inside of the `async` method.\n\n`MoveNext()` essentially runs your code until it reaches an `await` statement, then it `return`s while the `await`'d method executes. This is the mechanism that allows the current method to \"pause\", yielding its thread execution to another thread/Task.\n\n### Try/Catch in `MoveNext()`\n\nLook closely at `MoveNext()`; notice that it is wrapped in a `try/catch` block.\n\nBecause the compiler creates `IAsyncStateMachine` for every `async` method and `MoveNext()` is _always_ wrapped in a `try/catch`, every exception thrown inside of an `async` method is caught!\n\n## How to Rethrow an Exception Caught By `MoveNext`\n\nNow we see that the `async` method catches every exception thrown - that is to say, the exception is caught internally by the state machine, *but* you the coder will not see it.  In order for you to see it, you'll need to rethrow the exception to surface it in your debugging.  So the questions is - how do I rethrow the exception? \n\nThere are a few ways to rethrow exceptions that are thrown in an `async` method:\n\n 1. Use the `await` keyword _(Prefered)_\n    - e.g. `await DoSomethingAsync()`\n 2. Use `.GetAwaiter().GetResult()`\n    - e.g. `DoSomethingAsync().GetAwaiter().GetResult()`\n\nThe `await` keyword is preferred because `await` allows the `Task` to run asynchronously on a different thread, and it will not lock-up the current thread.\n\n### What About `.Result` or `.Wait()`?\n\nNever, never, never, never, never use `.Result` or `.Wait()`:\n\n1. Both `.Result` and `.Wait()` will lock-up the current thread. If the current thread is the Main Thread (also known as the UI Thread), your UI will freeze until the `Task` has completed.\n\n2. `.Result` or `.Wait()` rethrow your exception as a `System.AggregateException`, which makes it difficult to find the actual exception.\n  \n# Usage\n\n## AsyncAwaitBestPractices\n\n### `SafeFireAndForget`\nAn extension method to safely fire-and-forget a `Task`.\n\n`SafeFireAndForget` allows a Task to safely run on a different thread while the calling thread does not wait for its completion.\n\n```csharp\npublic static async void SafeFireAndForget(this System.Threading.Tasks.Task task, System.Action<System.Exception>? onException = null, bool continueOnCapturedContext = false)\n```\n\n```csharp\npublic static async void SafeFireAndForget(this System.Threading.Tasks.ValueTask task, System.Action<System.Exception>? onException = null, bool continueOnCapturedContext = false)\n```\n\n#### On .NET 8.0 (and higher)\n\n.NET 8.0 Introduces [`ConfigureAwaitOptions`](https://learn.microsoft.com/dotnet/api/system.threading.tasks.configureawaitoptions) that allow users to customize the behavior when awaiting:\n- `ConfigureAwaitOptions.None`\n    - No options specified\n- `ConfigureAwaitOptions.SuppressThrowing`\n    - Avoids throwing an exception at the completion of awaiting a Task that ends in the Faulted or Canceled state\n- `ConfigureAwaitOptions.ContinueOnCapturedContext`\n    - Attempts to marshal the continuation back to the original SynchronizationContext or TaskScheduler present on the originating thread at the time of the await\n- `ConfigureAwaitOptions.ForceYielding`\n    - Forces an await on an already completed Task to behave as if the Task wasn't yet completed, such that the current asynchronous method will be forced to yield its execution\n\nFor more information, check out Stephen Cleary's blog post, [\"ConfigureAwait in .NET 8\"](https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html).\n\n```csharp\npublic static void SafeFireAndForget(this System.Threading.Tasks.Task task, ConfigureAwaitOptions configureAwaitOptions, Action<Exception>? onException = null)\n```\n\n#### Basic Usage - Task\n\n```csharp\nvoid HandleButtonTapped(object sender, EventArgs e)\n{\n    // Allows the async Task method to safely run on a different thread while the calling thread continues, not awaiting its completion\n    // onException: If an Exception is thrown, print it to the Console\n    ExampleAsyncMethod().SafeFireAndForget(onException: ex => Console.WriteLine(ex));\n\n    // HandleButtonTapped continues execution here while `ExampleAsyncMethod()` is running on a different thread\n    // ...\n}\n\nasync Task ExampleAsyncMethod()\n{\n    await Task.Delay(1000);\n}\n```\n\n> **Note:** `ConfigureAwaitOptions.SuppressThrowing` will always supress exceptions from being rethrown. This means that `onException` will never execute when `ConfigureAwaitOptions.SuppressThrowing` is set.\n\n#### Basic Usage - ValueTask\n\nIf you're new to ValueTask, check out this great write-up, [Understanding the Whys, Whats, and Whens of ValueTask\n](https://blogs.msdn.microsoft.com/dotnet/2018/11/07/understanding-the-whys-whats-and-whens-of-valuetask?WT.mc_id=mobile-0000-bramin).\n\n```csharp\nvoid HandleButtonTapped(object sender, EventArgs e)\n{\n    // Allows the async ValueTask method to safely run on a different thread while the calling thread continues, not awaiting its completion\n    // onException: If an Exception is thrown, print it to the Console\n    ExampleValueTaskMethod().SafeFireAndForget(onException: ex => Console.WriteLine(ex));\n\n    // HandleButtonTapped continues execution here while `ExampleAsyncMethod()` is running on a different thread\n    // ...\n}\n\nasync ValueTask ExampleValueTaskMethod()\n{\n    var random = new Random();\n    if (random.Next(10) > 9)\n        await Task.Delay(1000);\n}\n```\n\n#### Advanced Usage\n\n```csharp\nvoid InitializeSafeFireAndForget()\n{\n    // Initialize SafeFireAndForget\n    // Only use `shouldAlwaysRethrowException: true` when you want `.SafeFireAndForget()` to always rethrow every exception. This is not recommended, because there is no way to catch an Exception rethrown by `SafeFireAndForget()`; `shouldAlwaysRethrowException: true` should **not** be used in Production/Release builds.\n    SafeFireAndForgetExtensions.Initialize(shouldAlwaysRethrowException: false);\n\n    // SafeFireAndForget will print every exception to the Console\n    SafeFireAndForgetExtensions.SetDefaultExceptionHandling(ex => Console.WriteLine(ex));\n}\n\nvoid UninitializeSafeFireAndForget()\n{\n    // Remove default exception handling\n    SafeFireAndForgetExtensions.RemoveDefaultExceptionHandling();\n}\n\nvoid HandleButtonTapped(object sender, EventArgs e)\n{\n    // Allows the async Task method to safely run on a different thread while not awaiting its completion\n    // onException: If a WebException is thrown, print its StatusCode to the Console. **Note**: If a non-WebException is thrown, it will not be handled by `onException`\n    // Because we set `SetDefaultExceptionHandling` in `void InitializeSafeFireAndForget()`, the entire exception will also be printed to the Console\n    ExampleAsyncMethod().SafeFireAndForget<WebException>(onException: ex =>\n    {\n        if(ex.Response is HttpWebResponse webResponse)\n            Console.WriteLine($\"Task Exception\\n Status Code: {webResponse.StatusCode}\");\n    });\n    \n    ExampleValueTaskMethod().SafeFireAndForget<WebException>(onException: ex =>\n    {\n        if(ex.Response is HttpWebResponse webResponse)\n            Console.WriteLine($\"ValueTask Error\\n Status Code: {webResponse.StatusCode}\");\n    });\n\n    // HandleButtonTapped continues execution here while `ExampleAsyncMethod()` and `ExampleValueTaskMethod()` run in the background\n}\n\nasync Task ExampleAsyncMethod()\n{\n    await Task.Delay(1000);\n    throw new WebException();\n}\n\nasync ValueTask ExampleValueTaskMethod()\n{\n    var random = new Random();\n    if (random.Next(10) > 9)\n        await Task.Delay(1000);\n        \n    throw new WebException();\n}\n```\n\n> **Note:** `ConfigureAwaitOptions.SuppressThrowing` will always supress exceptions from being rethrown. This means that `onException` will never execute when `ConfigureAwaitOptions.SuppressThrowing` is set.\n\n### `WeakEventManager`\n\nAn event implementation that enables the [garbage collector to collect an object without needing to unsubscribe event handlers](http://paulstovell.com/blog/weakevents).\n\nInspired by [Xamarin.Forms.WeakEventManager](https://github.com/xamarin/Xamarin.Forms/blob/master/Xamarin.Forms.Core/WeakEventManager.cs).\n\n#### Using `EventHandler`\n\n```csharp\nreadonly WeakEventManager _canExecuteChangedEventManager = new WeakEventManager();\n\npublic event EventHandler CanExecuteChanged\n{\n    add => _canExecuteChangedEventManager.AddEventHandler(value);\n    remove => _canExecuteChangedEventManager.RemoveEventHandler(value);\n}\n\nvoid OnCanExecuteChanged() => _canExecuteChangedEventManager.RaiseEvent(this, EventArgs.Empty, nameof(CanExecuteChanged));\n```\n\n#### Using `Delegate`\n\n```csharp\nreadonly WeakEventManager _propertyChangedEventManager = new WeakEventManager();\n\npublic event PropertyChangedEventHandler PropertyChanged\n{\n    add => _propertyChangedEventManager.AddEventHandler(value);\n    remove => _propertyChangedEventManager.RemoveEventHandler(value);\n}\n\nvoid OnPropertyChanged([CallerMemberName]string propertyName = \"\") => _propertyChangedEventManager.RaiseEvent(this, new PropertyChangedEventArgs(propertyName), nameof(PropertyChanged));\n```\n\n#### Using `Action`\n\n```csharp\nreadonly WeakEventManager _weakActionEventManager = new WeakEventManager();\n\npublic event Action ActionEvent\n{\n    add => _weakActionEventManager.AddEventHandler(value);\n    remove => _weakActionEventManager.RemoveEventHandler(value);\n}\n\nvoid OnActionEvent(string message) => _weakActionEventManager.RaiseEvent(message, nameof(ActionEvent));\n```\n\n### `WeakEventManager<T>`\nAn event implementation that enables the [garbage collector to collect an object without needing to unsubscribe event handlers](http://paulstovell.com/blog/weakevents).\n\nInspired by [Xamarin.Forms.WeakEventManager](https://github.com/xamarin/Xamarin.Forms/blob/master/Xamarin.Forms.Core/WeakEventManager.cs).\n\n#### Using `EventHandler<T>`\n\n```csharp\nreadonly WeakEventManager<string> _errorOcurredEventManager = new WeakEventManager<string>();\n\npublic event EventHandler<string> ErrorOcurred\n{\n    add => _errorOcurredEventManager.AddEventHandler(value);\n    remove => _errorOcurredEventManager.RemoveEventHandler(value);\n}\n\nvoid OnErrorOcurred(string message) => _errorOcurredEventManager.RaiseEvent(this, message, nameof(ErrorOcurred));\n```\n\n#### Using `Action<T>`\n\n```csharp\nreadonly WeakEventManager<string> _weakActionEventManager = new WeakEventManager<string>();\n\npublic event Action<string> ActionEvent\n{\n    add => _weakActionEventManager.AddEventHandler(value);\n    remove => _weakActionEventManager.RemoveEventHandler(value);\n}\n\nvoid OnActionEvent(string message) => _weakActionEventManager.RaiseEvent(message, nameof(ActionEvent));\n```\n\n## AsyncAwaitBestPractices.MVVM\n\n### `AsyncCommand`\n\nAllows for `Task` to safely be used asynchronously with `ICommand`:\n\n- `AsyncCommand<TExecute, TCanExecute> : IAsyncCommand<TExecute, TCanExecute>`\n- `IAsyncCommand<TExecute, TCanExecute> : IAsyncCommand<TExecute>`\n- `AsyncCommand<T> : IAsyncCommand<T>`\n- `IAsyncCommand<T> : ICommand`\n- `AsyncCommand : IAsyncCommand`\n- `IAsyncCommand : ICommand`\n\n```csharp\npublic AsyncCommand(Func<TExecute, Task> execute,\n                     Func<TCanExecute, bool>? canExecute = null,\n                     Action<Exception>? onException = null,\n                     bool continueOnCapturedContext = false)\n```\n\n```csharp\npublic AsyncCommand(Func<T, Task> execute,\n                     Func<object?, bool>? canExecute = null,\n                     Action<Exception>? onException = null,\n                     bool continueOnCapturedContext = false)\n```\n\n```csharp\npublic AsyncCommand(Func<Task> execute,\n                     Func<object?, bool>? canExecute = null,\n                     Action<Exception>? onException = null,\n                     bool continueOnCapturedContext = false)\n```\n\n```csharp\npublic class ExampleClass\n{\n    bool _isBusy;\n\n    public ExampleClass()\n    {\n        ExampleAsyncCommand = new AsyncCommand(ExampleAsyncMethod);\n        ExampleAsyncIntCommand = new AsyncCommand<int>(ExampleAsyncMethodWithIntParameter);\n        ExampleAsyncIntCommandWithCanExecute = new AsyncCommand<int, int>(ExampleAsyncMethodWithIntParameter, CanExecuteInt);\n        ExampleAsyncExceptionCommand = new AsyncCommand(ExampleAsyncMethodWithException, onException: ex => Console.WriteLine(ex.ToString()));\n        ExampleAsyncCommandWithCanExecuteChanged = new AsyncCommand(ExampleAsyncMethod, _ => !IsBusy);\n        ExampleAsyncCommandReturningToTheCallingThread = new AsyncCommand(ExampleAsyncMethod, continueOnCapturedContext: true);\n    }\n\n    public IAsyncCommand ExampleAsyncCommand { get; }\n    public IAsyncCommand<int> ExampleAsyncIntCommand { get; }\n    public IAsyncCommand<int, int> ExampleAsyncIntCommandWithCanExecute { get; }\n    public IAsyncCommand ExampleAsyncExceptionCommand { get; }\n    public IAsyncCommand ExampleAsyncCommandWithCanExecuteChanged { get; }\n    public IAsyncCommand ExampleAsyncCommandReturningToTheCallingThread { get; }\n    \n    public bool IsBusy\n    {\n        get => _isBusy;\n        set\n        {\n            if (_isBusy != value)\n            {\n                _isBusy = value;\n                ExampleAsyncCommandWithCanExecuteChanged.RaiseCanExecuteChanged();\n            }\n        }\n    }\n\n    async Task ExampleAsyncMethod()\n    {\n        await Task.Delay(1000);\n    }\n  \n    async Task ExampleAsyncMethodWithIntParameter(int parameter)\n    {\n        await Task.Delay(parameter);\n    }\n\n    async Task ExampleAsyncMethodWithException()\n    {\n        await Task.Delay(1000);\n        throw new Exception();\n    }\n\n    bool CanExecuteInt(int count)\n    {\n        if(count > 2)\n            return true;\n        \n        return false;\n    }\n\n    void ExecuteCommands()\n    {\n        _isBusy = true;\n    \n        try\n        {\n            ExampleAsyncCommand.Execute(null);\n            ExampleAsyncIntCommand.Execute(1000);\n            ExampleAsyncExceptionCommand.Execute(null);\n            ExampleAsyncCommandReturningToTheCallingThread.Execute(null);\n            \n            if(ExampleAsyncCommandWithCanExecuteChanged.CanExecute(null))\n                ExampleAsyncCommandWithCanExecuteChanged.Execute(null);\n            \n            if(ExampleAsyncIntCommandWithCanExecute.CanExecute(1))\n                ExampleAsyncIntCommandWithCanExecute.Execute(1);\n        }\n        finally\n        {\n            _isBusy = false;\n        }\n    }\n}\n```\n\n### `AsyncValueCommand`\n\nAllows for `ValueTask` to safely be used asynchronously with `ICommand`.\n\nIf you're new to ValueTask, check out this great write-up, [Understanding the Whys, Whats, and Whens of ValueTask\n](https://blogs.msdn.microsoft.com/dotnet/2018/11/07/understanding-the-whys-whats-and-whens-of-valuetask?WT.mc_id=mobile-0000-bramin).\n\n- `AsyncValueCommand<TExecute, TCanExecute> : IAsyncValueCommand<TExecute, TCanExecute>`\n- `IAsyncValueCommand<TExecute, TCanExecute> : IAsyncValueCommand<TExecute>`\n- `AsyncValueCommand<T> : IAsyncValueCommand<T>`\n- `IAsyncValueCommand<T> : ICommand`\n- `AsyncValueCommand : IAsyncValueCommand`\n- `IAsyncValueCommand : ICommand`\n\n```csharp\npublic AsyncValueCommand(Func<TExecute, ValueTask> execute,\n                            Func<TCanExecute, bool>? canExecute = null,\n                            Action<Exception>? onException = null,\n                            bool continueOnCapturedContext = false)\n```\n\n```csharp\npublic AsyncValueCommand(Func<T, ValueTask> execute,\n                            Func<object?, bool>? canExecute = null,\n                            Action<Exception>? onException = null,\n                            bool continueOnCapturedContext = false)\n```\n\n```csharp\npublic AsyncValueCommand(Func<ValueTask> execute,\n                            Func<object?, bool>? canExecute = null,\n                            Action<Exception>? onException = null,\n                            bool continueOnCapturedContext = false)\n```\n\n```csharp\npublic class ExampleClass\n{\n    bool _isBusy;\n\n    public ExampleClass()\n    {\n        ExampleValueTaskCommand = new AsyncValueCommand(ExampleValueTaskMethod);\n        ExampleValueTaskIntCommand = new AsyncValueCommand<int>(ExampleValueTaskMethodWithIntParameter);\n        ExampleValueTaskIntCommandWithCanExecute = new AsyncValueCommand<int, int>(ExampleValueTaskMethodWithIntParameter, CanExecuteInt);\n        ExampleValueTaskExceptionCommand = new AsyncValueCommand(ExampleValueTaskMethodWithException, onException: ex => Debug.WriteLine(ex.ToString()));\n        ExampleValueTaskCommandWithCanExecuteChanged = new AsyncValueCommand(ExampleValueTaskMethod, _ => !IsBusy);\n        ExampleValueTaskCommandReturningToTheCallingThread = new AsyncValueCommand(ExampleValueTaskMethod, continueOnCapturedContext: true);\n    }\n\n    public IAsyncValueCommand ExampleValueTaskCommand { get; }\n    public IAsyncValueCommand<int> ExampleValueTaskIntCommand { get; }\n    public IAsyncCommand<int, int> ExampleValueTaskIntCommandWithCanExecute { get; }\n    public IAsyncValueCommand ExampleValueTaskExceptionCommand { get; }\n    public IAsyncValueCommand ExampleValueTaskCommandWithCanExecuteChanged { get; }\n    public IAsyncValueCommand ExampleValueTaskCommandReturningToTheCallingThread { get; }\n\n    public bool IsBusy\n    {\n        get => _isBusy;\n        set\n        {\n            if (_isBusy != value)\n            {\n                _isBusy = value;\n                ExampleValueTaskCommandWithCanExecuteChanged.RaiseCanExecuteChanged();\n            }\n        }\n    }\n\n    async ValueTask ExampleValueTaskMethod()\n    {\n        var random = new Random();\n        if (random.Next(10) > 9)\n            await Task.Delay(1000);\n    }\n\n    async ValueTask ExampleValueTaskMethodWithIntParameter(int parameter)\n    {\n        var random = new Random();\n        if (random.Next(10) > 9)\n            await Task.Delay(parameter);\n    }\n\n    async ValueTask ExampleValueTaskMethodWithException()\n    {\n        var random = new Random();\n        if (random.Next(10) > 9)\n            await Task.Delay(1000);\n\n        throw new Exception();\n    }\n\n    bool CanExecuteInt(int count)\n    {\n        if(count > 2)\n            return true;\n        \n        return false;\n    }\n\n    void ExecuteCommands()\n    {\n        _isBusy = true;\n\n        try\n        {\n            ExampleValueTaskCommand.Execute(null);\n            ExampleValueTaskIntCommand.Execute(1000);\n            ExampleValueTaskExceptionCommand.Execute(null);\n            ExampleValueTaskCommandReturningToTheCallingThread.Execute(null);\n\n            if (ExampleValueTaskCommandWithCanExecuteChanged.CanExecute(null))\n                ExampleValueTaskCommandWithCanExecuteChanged.Execute(null);\n\n            if(ExampleValueTaskIntCommandWithCanExecute.CanExecute(2))\n                ExampleValueTaskIntCommandWithCanExecute.Execute(2);\n        }\n        finally\n        {\n            _isBusy = false;\n        }\n    }\n}\n```\n\n## Learn More\n- [Removing Async Void](https://johnthiriet.com/removing-async-void/)\n- [MVVM Going Async with Async Command](https://johnthiriet.com/mvvm-going-async-with-async-command/)\n- [Asynchronous Programming in .NET](https://docs.microsoft.com/dotnet/csharp/async?WT.mc_id=mobile-0000-bramin)\n- [The Managed Thread Pool](https://docs.microsoft.com/dotnet/standard/threading/the-managed-thread-pool?WT.mc_id=mobile-0000-bramin)\n- [Understanding the Whys, Whats, and Whens of ValueTask](https://devblogs.microsoft.com/dotnet/understanding-the-whys-whats-and-whens-of-valuetask/?WT.mc_id=mobile-0000-bramin)\n- [Async/Await Best Practices Video](https://www.youtube.com/watch?v=yyT6dSjq-nE&feature=youtu.be)\n- [What is Synchronization Context?](http://hamidmosalla.com/2018/06/24/what-is-synchronizationcontext/)\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 9.830078125,
          "content": "variables:\n  DOTNET_CLI_TELEMETRY_OPTOUT: true\n  CurrentSemanticVersionBase: '99.0.0'\n  PreviewNumber: $[counter(variables['CurrentSemanticVersionBase'], 1001)]\n  NET_VERSION: '9.0.x'\n  CurrentSemanticVersion: '$(CurrentSemanticVersionBase)-preview$(PreviewNumber)'\n  NugetPackageVersion: '$(CurrentSemanticVersion)'\n  PathToSolution: 'AsyncAwaitBestPractices.sln'\n  PathToSampleAppCsproj: 'sample/HackerNews.csproj'\n  PathToUnitTestsCsproj: 'src/AsyncAwaitBestPractices.UnitTests/AsyncAwaitBestPractices.UnitTests.csproj'\n  PathToAsyncAwaitBestPracticesCsproj: 'src/AsyncAwaitBestPractices/AsyncAwaitBestPractices.csproj'\n  PathToAsyncAwaitBestPracticesMVVMCsproj: 'src/AsyncAwaitBestPractices.MVVM/AsyncAwaitBestPractices.MVVM.csproj'\n  Xcode_Version: '16.2'\n\ntrigger:\n  branches:\n    include:\n    - main\n  tags:\n    include:\n    - '*'\n\npr:\n  autoCancel: 'true'\n  branches:\n    include:\n    - main\n\njobs:     \n  - job: build_sample\n    displayName: Build .NET MAUI Sample App\n    strategy:\n      matrix:\n        'Windows':\n          image: 'windows-latest'\n        'macOS':\n          image: 'macos-15'\n    pool:\n      vmImage: $(image)\n    \n    steps:\n      - task: CmdLine@2\n        displayName: 'Set Xcode v$(Xcode_Version)'\n        condition: eq(variables['Agent.OS'], 'Darwin') # Only run this step on macOS\n        inputs:\n          script: | \n            echo Availalbe Xcode Versions:\n            ls -al  /Applications | grep Xcode\n            echo '##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]'/Applications/Xcode_$(Xcode_Version).app;sudo xcode-select --switch /Applications/Xcode_$(Xcode_Version).app/Contents/Developer\n\n      - task: InstallAppleCertificate@2\n        displayName: \"Set Xcode Signing Certificate\"\n        condition: eq(variables['Agent.OS'], 'Darwin') # Only run this step on macOS\n        inputs:\n            certSecureFile: 'certificate.p12'\n            certPwd: '$(APPLECERTIFICATEPASSWORD)'\n\n      - task: InstallAppleProvisioningProfile@1\n        displayName: \"Set Xcode Provisioning Profile\"\n        condition: eq(variables['Agent.OS'], 'Darwin') # Only run this step on macOS\n        inputs:\n          provisioningProfileLocation: 'secureFiles'\n          provProfileSecureFile: 'Development_Wildcard.mobileprovision'\n\n      - task: UseDotNet@2\n        displayName: 'Use .Net SDK  v$(NET_VERSION)'\n        inputs:\n          version: '$(NET_VERSION)'\n          packageType: 'sdk'\n          includePreviewVersions: false\n\n      - task: CmdLine@2\n        displayName: 'Install .NET MAUI Workload'\n        inputs:\n          script : |\n            dotnet workload install maui\n            dotnet workload update\n\n      - task: NuGetToolInstaller@1\n        displayName: 'Use NuGet'\n        inputs:\n          checkLatest: true\n\n      - task: CmdLine@2\n        displayName: 'Build Sample App'\n        inputs:\n          script: 'dotnet build $(PathToSampleAppCsproj)'\n\n      - task: CopyFiles@2\n        displayName: 'Copy Files to: $(build.artifactstagingdirectory)'\n        inputs:\n          SourceFolder: '$(system.defaultworkingdirectory)'\n          Contents: '**\\bin\\$(BuildConfiguration)\\**'\n          TargetFolder: '$(build.artifactstagingdirectory)'\n\n      - task: PublishBuildArtifacts@1\n        displayName: 'Publish Artifact: drop'\n        inputs:\n          PathtoPublish: '$(build.artifactstagingdirectory)'\n\n  - job: build_test_library\n    displayName: Build + Test Library\n    pool:\n      vmImage: 'windows-latest'\n    steps:\n      # if this is a Release build, update the version number\n      - powershell: |\n          $buildSourceBranch = \"$(Build.SourceBranch)\"\n          $tagVersion = $buildSourceBranch.Substring($buildSourceBranch.LastIndexOf(\"/\") + 1)\n          Write-Host(\"Branch = $buildSourceBranch, Version = $tagVersion\");\n          Write-Host (\"##vso[task.setvariable variable=NugetPackageVersion;]$tagVersion\")\n        displayName: Set NuGet Version to Tag Number\n        condition: and(startsWith(variables['Build.SourceBranch'], 'refs/tags/'), not(endsWith(variables['Build.SourceBranch'], '-mediaelement'))) # Only run this step when a Tag has triggered the CI Pipeline\n\n      # if this is a PR build, then update the version number\n      - powershell: |\n          $prNumber = $env:System_PullRequest_PullRequestNumber\n          $commitId = \"$($env:System_PullRequest_SourceCommitId)\".Substring(0, 7)\n          $fullVersionString = \"$(CurrentSemanticVersionBase)-build-$prNumber.$(Build.BuildId)+$commitId\"\n          Write-Host(\"GitHub PR = $prNumber, Commit = $commitId\");\n          Write-Host (\"##vso[task.setvariable variable=NugetPackageVersion;]$fullVersionString\")\n          Write-Host (\"##vso[task.setvariable variable=NugetPackageVersionMediaElement;]$fullVersionString\")\n          Write-Host \"##vso[build.updatebuildnumber]$fullVersionString\"\n        displayName: Set NuGet Version to PR Version\n        condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['build.reason'], 'PullRequest')) # Only run this step on Windows when a Pull Request has triggered the CI Pipeline\n\n      - task: UseDotNet@2\n        displayName: 'Use .Net Core SDK 2.1.x'\n        inputs:\n          version: ' 2.1.x'\n          packageType: 'sdk'\n\n      - task: UseDotNet@2\n        displayName: 'Use .Net Core SDK 3.0.x'\n        inputs:\n          version: ' 3.0.x'\n          packageType: 'sdk'\n\n      - task: UseDotNet@2\n        displayName: 'Use .Net SDK  8.0.x'\n        inputs:\n          version: '8.0.x'\n          packageType: 'sdk'\n\n      - task: UseDotNet@2\n        displayName: 'Use .Net SDK  9.0.x'\n        inputs:\n          version: '$(NET_VERSION)'\n          packageType: 'sdk'\n\n      - task: NuGetToolInstaller@1\n        displayName: 'Use NuGet'\n        inputs:\n          checkLatest: true\n\n      - task: CmdLine@2\n        displayName: 'Run UnitTests'\n        inputs:\n          script: 'dotnet test $(PathToUnitTestsCsproj) -c Release --settings \".runsettings\" --collect \"code coverage\" --logger trx --results-directory $(Agent.TempDirectory)'\n\n      - task: PublishTestResults@2\n        condition: eq(variables['Agent.OS'], 'Windows_NT') # Only run this step on Windows\n        displayName: 'Publish Test Results'\n        inputs:\n          testResultsFormat: VSTest\n          testResultsFiles: '**/*.trx'\n          searchFolder: $(Agent.TempDirectory)\n\n      - task: PublishCodeCoverageResults@2\n        condition: eq(variables['Agent.OS'], 'Windows_NT') # Only run this step on Windows\n        displayName: 'Publish Code Coverage Results'\n        inputs:\n          codeCoverageTool: 'Cobertura'\n          summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'\n          failIfCoverageEmpty: true\n\n      - task: CmdLine@2\n        displayName: 'Pack AsyncAwaitBestPractices NuGet'\n        inputs:\n          script: 'dotnet pack $(PathToAsyncAwaitBestPracticesCsproj) -c Release -p:PackageVersion=$(NugetPackageVersion)'\n\n      - task: CmdLine@2\n        displayName: 'Pack AsyncAwaitBestPractices.MVVM NuGet'\n        inputs:\n          script: 'dotnet pack $(PathToAsyncAwaitBestPracticesMVVMCsproj) -c Release -p:PackageVersion=$(NugetPackageVersion)'\n\n      # check vulnerabilities\n      - powershell: |\n          dotnet list $(PathToAsyncAwaitBestPracticesCsproj) package --vulnerable --include-transitive | findstr /S /c:\"has the following vulnerable packages\";\n          if ($LastExitCode -ne 1)\n          {\n            dotnet list $(PathToAsyncAwaitBestPracticesCsproj) package --vulnerable --include-transitive;\n            exit 1;\n          }\n\n          exit 0;\n        displayName: 'Check AsyncAwaitBestPractices Dependencies Vulnerabilities'\n        condition: eq(variables['Agent.OS'], 'Windows_NT') # Only run this step on Windows\n\n      - powershell: |\n          dotnet list $(PathToAsyncAwaitBestPracticesMVVMCsproj) package --vulnerable --include-transitive | findstr /S /c:\"has the following vulnerable packages\";\n          if ($LastExitCode -ne 1)\n          {\n            dotnet list $(PathToAsyncAwaitBestPracticesMVVMCsproj) package --vulnerable --include-transitive;\n            exit 1;\n          }\n\n          exit 0;\n        displayName: 'Check AsyncAwaitBestPractices.MVVM Dependencies Vulnerabilities'\n        condition: eq(variables['Agent.OS'], 'Windows_NT') # Only run this step on Windows\n\n      - powershell: |\n          dotnet list $(PathToSampleAppCsproj) package --vulnerable --include-transitive | findstr /S /c:\"has the following vulnerable packages\";\n          if ($LastExitCode -ne 1)\n          {\n            dotnet list $(PathToSampleAppCsproj) package --vulnerable --include-transitive;\n            exit 1;\n          }\n\n          exit 0;\n        displayName: 'Check Sample App Dependencies Vulnerabilities'\n        condition: eq(variables['Agent.OS'], 'Windows_NT') # Only run this step on Windows\n      \n      # Copy all NuGet packages\n      - task: PowerShell@2\n        condition: and(eq(variables['Agent.OS'], 'Windows_NT'), not(startsWith(variables['Build.SourceBranch'], 'refs/tags/'))) # Only run this step on Windows and when it's not a Release build\n        displayName: 'Copy NuGet Packages to Staging Directory'\n        inputs:\n          targetType: 'inline'\n          script: |\n            $source = \".\\src\"\n            $filter = \"nupkg\"\n            Get-ChildItem -Path $source -Recurse | Where-Object { $_.Extension -match $filter } | Copy-Item -Destination \"$(Build.ArtifactStagingDirectory)\"\n          pwsh: true\n\n      - task: CopyFiles@2\n        displayName: 'Copy Files to: $(build.artifactstagingdirectory)'\n        inputs:\n          SourceFolder: '$(system.defaultworkingdirectory)'\n          Contents: '**\\bin\\$(BuildConfiguration)\\**'\n          TargetFolder: '$(build.artifactstagingdirectory)'\n\n      # Publish build artifacts\n      - task: PublishBuildArtifacts@1\n        condition: eq(variables['Agent.OS'], 'Windows_NT') # Only run this step on Windows\n        displayName: 'Publish NuGet Packages'\n        inputs:\n          ArtifactName: nuget\n          PathtoPublish: '$(Build.ArtifactStagingDirectory)'\n"
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.1064453125,
          "content": "{\n  \"sdk\": {\n    \"version\": \"9.0.100\",\n    \"rollForward\": \"latestFeature\",\n    \"allowPrerelease\": false\n  }\n}"
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}