{
  "metadata": {
    "timestamp": 1736711109518,
    "page": 925,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jbogard/ContosoUniversityDotNetCore-Pages",
      "stars": 1369,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.474609375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n*.ico    binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.177734375,
          "content": "_build/\n_site/\nProperties/\nnode_modules/\n\n# Use git add -f to force override .sln when required. Not needed in most cases.\n# git add -f myProj.sln\n*.sln\n\nProject_Readme.html\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n*.vscode/\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Visual Studo 2015 cache/options directory\n.vs/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding addin-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings \n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\n*.[Cc]ache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\nbower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\nproject.lock.json\n**/sample/**/wwwroot/lib/\n**/samples/**/wwwroot/lib/\n__pycache__/\n\n#Mac OSX \n.DS_Store\naspnetcore/fundamentals/servers/httpsys/_static/Thumbs.db\n"
        },
        {
          "name": "ContosoUniversity.IntegrationTests",
          "type": "tree",
          "content": null
        },
        {
          "name": "ContosoUniversity.sln",
          "type": "blob",
          "size": 2.5732421875,
          "content": "ï»¿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 16\nVisualStudioVersion = 16.0.29424.173\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ContosoUniversity\", \"ContosoUniversity\\ContosoUniversity.csproj\", \"{DDBC05AD-34FD-43B7-B0D1-45819DEC4AA1}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ContosoUniversity.IntegrationTests\", \"ContosoUniversity.IntegrationTests\\ContosoUniversity.IntegrationTests.csproj\", \"{70FF0FF8-4876-4A7A-AE4A-53C92A2C1531}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{13186C93-7307-4FEA-A17C-4556F54FF5F1}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.gitattributes = .gitattributes\n\t\t.gitignore = .gitignore\n\t\tDirectory.Build.props = Directory.Build.props\n\t\tLICENSE = LICENSE\n\t\tpsake-build-helpers.ps1 = psake-build-helpers.ps1\n\t\tpsake.cmd = psake.cmd\n\t\tpsake.sh = psake.sh\n\t\tpsakefile.ps1 = psakefile.ps1\n\t\tREADME.md = README.md\n\t\tsetup.cmd = setup.cmd\n\t\tsetup.ps1 = setup.ps1\n\t\tsetup.sh = setup.sh\n\tEndProjectSection\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"workflows\", \"workflows\", \"{3CC83AD8-1CC5-4783-BA58-001898EB1CC2}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.github\\workflows\\main.yaml = .github\\workflows\\main.yaml\n\tEndProjectSection\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{DDBC05AD-34FD-43B7-B0D1-45819DEC4AA1}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{DDBC05AD-34FD-43B7-B0D1-45819DEC4AA1}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{DDBC05AD-34FD-43B7-B0D1-45819DEC4AA1}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{DDBC05AD-34FD-43B7-B0D1-45819DEC4AA1}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{70FF0FF8-4876-4A7A-AE4A-53C92A2C1531}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{70FF0FF8-4876-4A7A-AE4A-53C92A2C1531}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{70FF0FF8-4876-4A7A-AE4A-53C92A2C1531}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{70FF0FF8-4876-4A7A-AE4A-53C92A2C1531}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{3CC83AD8-1CC5-4783-BA58-001898EB1CC2} = {13186C93-7307-4FEA-A17C-4556F54FF5F1}\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {C21030AE-F720-490E-BC96-D0B38EF8C332}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "ContosoUniversity",
          "type": "tree",
          "content": null
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 0.2685546875,
          "content": "<Project>\n\n  <PropertyGroup>\n    <Authors>Jimmy Bogard</Authors>\n    <LangVersion>preview</LangVersion>\n    <NoWarn>$(NoWarn);CS1701;CS1702;CS1591</NoWarn>\n    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>\n    <Features>strict</Features>\n  </PropertyGroup>\n\n</Project>\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2016 Jimmy Bogard\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.3466796875,
          "content": "![CI](https://github.com/jbogard/ContosoUniversityDotNetCore-Pages/workflows/CI/badge.svg)\n\n# ContosoUniversity on ASP.NET Core 6.0 on .NET 6 and Razor Pages\n\nContoso University, the way I would write it.\n\nThis example requires some tools and PowerShell modules, you should run `setup.cmd` or `setup.ps1` to install them.\n\nTo prepare the database, execute the build script using [PSake](https://psake.readthedocs.io/): `psake migrate`. Open the solution and run!\n\n## Things demonstrated\n\n- CQRS and MediatR\n- AutoMapper\n- Vertical slice architecture\n- Razor Pages\n- Fluent Validation\n- HtmlTags\n- Entity Framework Core\n\n## Migrating the Database\n\nGrate will automatically create or upgrade (migrate) the database to the latest schema version when you run it:\n\nFrom PowerShell:\n```\ninvoke-psake migrate\n```\n\nFrom CMD:\n```\npsake migrate\n```\n\nWhen running unit tests, you can recreate the unit test database using:\n\n```\ninvoke-psake migratetest\n```\n\n## Versioning\n\nVersion numbers can be passed on the build script command line:\n\nFrom PowerShell:\n```\ninvoke-psake CI -properties ${'version':'1.2.3-dev.5'}\n```\n\nBecause we're passing a PowerShell dictionary on the command line, the cmd script doesn't handle this very nicely.\n\nOr generate a version using [GitVersion](https://gitversion.net/docs/) locally:\n```\npsake localversion\n```\nwill generate a semantic version and output it.\n"
        },
        {
          "name": "psake-build-helpers.ps1",
          "type": "blob",
          "size": 0.9580078125,
          "content": "ï»¿\nfunction Get-Copyright {\n    $date = Get-Date\n    $year = $date.Year\n    $copyrightSpan = if ($year -eq $yearInitiated) { $year } else { \"$yearInitiated-$year\" }\n    return \"Â© $copyrightSpan $owner\"\n}\n\nfunction Publish-Project {\n    $project = Split-Path $pwd -Leaf\n    Write-Host \"Publishing $project\"\n    dotnet publish --configuration $configuration --no-build --output $publish/$project /nologo\n}\n\nfunction Set-Regenerated-File($path, $newContent) {\n    if (-not (test-path $path -PathType Leaf)) {\n        $oldContent = $null\n    } else {\n        $oldContent = [IO.File]::ReadAllText($path)\n    }\n\n    if ($newContent -ne $oldContent) {\n        write-host \"Generating $path\"\n        [System.IO.File]::WriteAllText($path, $newContent, [System.Text.Encoding]::UTF8)\n    }\n}\n\nfunction Remove-Directory-Silently($path) {\n    if (test-path $path) {\n        write-host \"Deleting $path\"\n        Remove-Item $path -recurse -force -ErrorAction SilentlyContinue | out-null\n    }\n}\n"
        },
        {
          "name": "psake.cmd",
          "type": "blob",
          "size": 0.20703125,
          "content": "@echo off\nrem Helper script for those who want to run psake from cmd.exe\n\npowershell -NoProfile -ExecutionPolicy Bypass -Command \"invoke-psake %*; if ($psake.build_success -eq $false) { exit 1 } else { exit 0 }\"\n"
        },
        {
          "name": "psake.sh",
          "type": "blob",
          "size": 0.1630859375,
          "content": "#!/usr/bin/env pwsh\n\n# Helper script for those who want to run psake from cmd.exe\n\ninvoke-psake @args; if ($psake.build_success -eq $false) { exit 1 } else { exit 0 }\n"
        },
        {
          "name": "psakefile.ps1",
          "type": "blob",
          "size": 2.3466796875,
          "content": "include \"./psake-build-helpers.ps1\"\n\nproperties {\n    $configuration = 'Release'\n    $owner = 'Jimmy Bogard'\n    $product = 'Contoso University Core'\n    $yearInitiated = '2016'\n    $projectRootDirectory = \"$(resolve-path .)\"\n    $publish = \"$projectRootDirectory/publish\"\n    $testResults = \"$projectRootDirectory/TestResults\"\n}\n \ntask default -depends Test\ntask CI -depends Clean, Test, Publish -description \"Continuous Integration process\"\ntask Rebuild -depends Clean, Compile -description \"Rebuild the code and database, no testing\"\n\ntask Info -description \"Display runtime information\" {\n    exec { dotnet --info }\n}\n\ntask MigrateTest -description \"Recreate the testing database\" {\n    # drop and recreate the test database\n    exec { dotnet grate `\n            -c \"Server=(localdb)\\mssqllocaldb;Database=ContosoUniversityDotNetCore-Pages-Test;Trusted_Connection=True;MultipleActiveResultSets=true\" `\n            -f ContosoUniversity/App_Data `\n            --silent `\n            --drop `\n    }\n}\n\ntask Test -depends Compile, MigrateTest -description \"Run unit tests\" {\n    # find any directory that ends in \"Tests\" and execute a test\n    exec { dotnet test --configuration $configuration --no-build -l \"trx;LogFileName=$($_.name).trx\" -l \"html;LogFileName=$($_.name).html\" -l \"console;verbosity=normal\" -r $testResults }\n}\n \ntask Compile -depends Info -description \"Compile the solution\" {\n    exec { dotnet build --configuration $configuration --nologo -p:\"Product=$($product)\" -p:\"Copyright=$(get-copyright)\" } -workingDirectory .\n}\n\ntask Publish -depends Compile -description \"Publish the primary projects for distribution\" {\n    remove-directory-silently $publish\n    exec { publish-project } -workingDirectory ContosoUniversity\n}\n\ntask Migrate -description \"Migrate the changes into the runtime database\" {\n    exec { dotnet grate `\n            -c \"Server=(localdb)\\mssqllocaldb;Database=ContosoUniversityDotNetCore-Pages;Trusted_Connection=True;MultipleActiveResultSets=true\" `\n            -f ContosoUniversity/App_Data `\n            --silent `\n    } \n}\n  \ntask Clean -description \"Clean out all the binary folders\" {\n    exec { dotnet clean --configuration $configuration /nologo } -workingDirectory .\n    remove-directory-silently $publish\n    remove-directory-silently $testResults\n}\n\ntask ? -alias help -description \"Display help content and possible targets\" {\n    WriteDocumentation\n}\n"
        },
        {
          "name": "setup.cmd",
          "type": "blob",
          "size": 0.1396484375,
          "content": "@echo off\nrem Helper script for those who want to run psake from cmd.exe\n\npowershell -NoProfile -ExecutionPolicy Bypass -Command \"./setup.ps1\"\n"
        },
        {
          "name": "setup.ps1",
          "type": "blob",
          "size": 0.423828125,
          "content": "# Setup the environment to use PSAKE if not ready (run this once)\n\n# set PSGallery as trusted so we can install packages from there\nWrite-Host 'Trusting PS Gallery'\nSet-PSRepository -Name \"PSGallery\" -InstallationPolicy Trusted\n\n# Install PSAKE\nWrite-Host 'Installing PSake'\nInstall-Module -Name psake -Scope CurrentUser -Force\n\n# Install dotnet based tools (requires a manifest)\nWrite-Host 'Install dotnet tools'\ndotnet tool restore\n"
        },
        {
          "name": "setup.sh",
          "type": "blob",
          "size": 0.0341796875,
          "content": "#!/usr/bin/env pwsh\n\n& ./setup.ps1\n"
        }
      ]
    }
  ]
}