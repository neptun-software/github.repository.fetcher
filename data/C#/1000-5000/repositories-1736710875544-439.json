{
  "metadata": {
    "timestamp": 1736710875544,
    "page": 439,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dotnet/Docker.DotNet",
      "stars": 2292,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0361328125,
          "content": "# Autodetect text files\n* text=auto\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.470703125,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n.vs\n\n# Project-specific\nDemoClient/**\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n*.userprefs\n*.lock.json\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Roslyn cache directories\n*.ide/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n#NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding addin-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# NuGet Packages Folder\npackages/\n\n# dotnet tools\n.store\nSignClient\nnbgv\n.vscode\n\n# OS X\n.DS_Store"
        },
        {
          "name": "CODE-OF-CONDUCT.md",
          "type": "blob",
          "size": 0.2529296875,
          "content": "# Code of Conduct\n\nThis project has adopted the code of conduct defined by the Contributor Covenant\nto clarify expected behavior in our community.\n\nFor more information, see the [.NET Foundation Code of Conduct](https://dotnetfoundation.org/code-of-conduct).\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 0.5048828125,
          "content": "<Project>\n  <!-- Strong-naming  -->\n  <PropertyGroup Label=\"Signing\">\n    <SignAssembly>true</SignAssembly>\n    <AssemblyOriginatorKeyFile>$(MSBuildThisFileDirectory)\\Key.snk</AssemblyOriginatorKeyFile>\n  </PropertyGroup>\n  <ItemGroup>\n    <!-- Defines the StrongNamePublicKeys class with constant which contains the repo identity public key formatted for use in InternalsVisibleTo attributes. -->\n    <Compile Include=\"$(MSBuildThisFileDirectory)\\StrongNamePublicKeys.cs\" Visible=\"false\" />\n  </ItemGroup>\n</Project>"
        },
        {
          "name": "Docker.DotNet.sln",
          "type": "blob",
          "size": 5.703125,
          "content": "ï»¿\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio 15\r\nVisualStudioVersion = 15.0.26228.9\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"src\", \"src\", \"{85990620-78A6-4381-8BD6-84E6D0CF0649}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"test\", \"test\", \"{AA4B8CC2-1431-4FC7-9DF3-533EC6C86D3A}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Docker.DotNet\", \"src\\Docker.DotNet\\Docker.DotNet.csproj\", \"{C2EA98A7-FC7A-4EA6-A316-562A832D3D9A}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Docker.DotNet.BasicAuth\", \"src\\Docker.DotNet.BasicAuth\\Docker.DotNet.BasicAuth.csproj\", \"{E1F24B25-E027-45E0-A6E1-E08138F1F95D}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Docker.DotNet.X509\", \"src\\Docker.DotNet.X509\\Docker.DotNet.X509.csproj\", \"{89BD76AD-78C9-4E4A-96A2-E5DA6D4AFA44}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Docker.DotNet.Tests\", \"test\\Docker.DotNet.Tests\\Docker.DotNet.Tests.csproj\", \"{248C5D51-2B33-4A06-A0EA-AA709F752E52}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tDebug|x64 = Debug|x64\r\n\t\tDebug|x86 = Debug|x86\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\t\tRelease|x64 = Release|x64\r\n\t\tRelease|x86 = Release|x86\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{C2EA98A7-FC7A-4EA6-A316-562A832D3D9A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{C2EA98A7-FC7A-4EA6-A316-562A832D3D9A}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{C2EA98A7-FC7A-4EA6-A316-562A832D3D9A}.Debug|x64.ActiveCfg = Debug|Any CPU\r\n\t\t{C2EA98A7-FC7A-4EA6-A316-562A832D3D9A}.Debug|x64.Build.0 = Debug|Any CPU\r\n\t\t{C2EA98A7-FC7A-4EA6-A316-562A832D3D9A}.Debug|x86.ActiveCfg = Debug|Any CPU\r\n\t\t{C2EA98A7-FC7A-4EA6-A316-562A832D3D9A}.Debug|x86.Build.0 = Debug|Any CPU\r\n\t\t{C2EA98A7-FC7A-4EA6-A316-562A832D3D9A}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{C2EA98A7-FC7A-4EA6-A316-562A832D3D9A}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{C2EA98A7-FC7A-4EA6-A316-562A832D3D9A}.Release|x64.ActiveCfg = Release|Any CPU\r\n\t\t{C2EA98A7-FC7A-4EA6-A316-562A832D3D9A}.Release|x64.Build.0 = Release|Any CPU\r\n\t\t{C2EA98A7-FC7A-4EA6-A316-562A832D3D9A}.Release|x86.ActiveCfg = Release|Any CPU\r\n\t\t{C2EA98A7-FC7A-4EA6-A316-562A832D3D9A}.Release|x86.Build.0 = Release|Any CPU\r\n\t\t{E1F24B25-E027-45E0-A6E1-E08138F1F95D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{E1F24B25-E027-45E0-A6E1-E08138F1F95D}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{E1F24B25-E027-45E0-A6E1-E08138F1F95D}.Debug|x64.ActiveCfg = Debug|Any CPU\r\n\t\t{E1F24B25-E027-45E0-A6E1-E08138F1F95D}.Debug|x64.Build.0 = Debug|Any CPU\r\n\t\t{E1F24B25-E027-45E0-A6E1-E08138F1F95D}.Debug|x86.ActiveCfg = Debug|Any CPU\r\n\t\t{E1F24B25-E027-45E0-A6E1-E08138F1F95D}.Debug|x86.Build.0 = Debug|Any CPU\r\n\t\t{E1F24B25-E027-45E0-A6E1-E08138F1F95D}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{E1F24B25-E027-45E0-A6E1-E08138F1F95D}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{E1F24B25-E027-45E0-A6E1-E08138F1F95D}.Release|x64.ActiveCfg = Release|Any CPU\r\n\t\t{E1F24B25-E027-45E0-A6E1-E08138F1F95D}.Release|x64.Build.0 = Release|Any CPU\r\n\t\t{E1F24B25-E027-45E0-A6E1-E08138F1F95D}.Release|x86.ActiveCfg = Release|Any CPU\r\n\t\t{E1F24B25-E027-45E0-A6E1-E08138F1F95D}.Release|x86.Build.0 = Release|Any CPU\r\n\t\t{89BD76AD-78C9-4E4A-96A2-E5DA6D4AFA44}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{89BD76AD-78C9-4E4A-96A2-E5DA6D4AFA44}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{89BD76AD-78C9-4E4A-96A2-E5DA6D4AFA44}.Debug|x64.ActiveCfg = Debug|Any CPU\r\n\t\t{89BD76AD-78C9-4E4A-96A2-E5DA6D4AFA44}.Debug|x64.Build.0 = Debug|Any CPU\r\n\t\t{89BD76AD-78C9-4E4A-96A2-E5DA6D4AFA44}.Debug|x86.ActiveCfg = Debug|Any CPU\r\n\t\t{89BD76AD-78C9-4E4A-96A2-E5DA6D4AFA44}.Debug|x86.Build.0 = Debug|Any CPU\r\n\t\t{89BD76AD-78C9-4E4A-96A2-E5DA6D4AFA44}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{89BD76AD-78C9-4E4A-96A2-E5DA6D4AFA44}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{89BD76AD-78C9-4E4A-96A2-E5DA6D4AFA44}.Release|x64.ActiveCfg = Release|Any CPU\r\n\t\t{89BD76AD-78C9-4E4A-96A2-E5DA6D4AFA44}.Release|x64.Build.0 = Release|Any CPU\r\n\t\t{89BD76AD-78C9-4E4A-96A2-E5DA6D4AFA44}.Release|x86.ActiveCfg = Release|Any CPU\r\n\t\t{89BD76AD-78C9-4E4A-96A2-E5DA6D4AFA44}.Release|x86.Build.0 = Release|Any CPU\r\n\t\t{248C5D51-2B33-4A06-A0EA-AA709F752E52}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{248C5D51-2B33-4A06-A0EA-AA709F752E52}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{248C5D51-2B33-4A06-A0EA-AA709F752E52}.Debug|x64.ActiveCfg = Debug|Any CPU\r\n\t\t{248C5D51-2B33-4A06-A0EA-AA709F752E52}.Debug|x64.Build.0 = Debug|Any CPU\r\n\t\t{248C5D51-2B33-4A06-A0EA-AA709F752E52}.Debug|x86.ActiveCfg = Debug|Any CPU\r\n\t\t{248C5D51-2B33-4A06-A0EA-AA709F752E52}.Debug|x86.Build.0 = Debug|Any CPU\r\n\t\t{248C5D51-2B33-4A06-A0EA-AA709F752E52}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{248C5D51-2B33-4A06-A0EA-AA709F752E52}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{248C5D51-2B33-4A06-A0EA-AA709F752E52}.Release|x64.ActiveCfg = Release|Any CPU\r\n\t\t{248C5D51-2B33-4A06-A0EA-AA709F752E52}.Release|x64.Build.0 = Release|Any CPU\r\n\t\t{248C5D51-2B33-4A06-A0EA-AA709F752E52}.Release|x86.ActiveCfg = Release|Any CPU\r\n\t\t{248C5D51-2B33-4A06-A0EA-AA709F752E52}.Release|x86.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(NestedProjects) = preSolution\r\n\t\t{C2EA98A7-FC7A-4EA6-A316-562A832D3D9A} = {85990620-78A6-4381-8BD6-84E6D0CF0649}\r\n\t\t{E1F24B25-E027-45E0-A6E1-E08138F1F95D} = {85990620-78A6-4381-8BD6-84E6D0CF0649}\r\n\t\t{89BD76AD-78C9-4E4A-96A2-E5DA6D4AFA44} = {85990620-78A6-4381-8BD6-84E6D0CF0649}\r\n\t\t{248C5D51-2B33-4A06-A0EA-AA709F752E52} = {AA4B8CC2-1431-4FC7-9DF3-533EC6C86D3A}\r\n\tEndGlobalSection\r\nEndGlobal\r\n"
        },
        {
          "name": "Key.snk",
          "type": "blob",
          "size": 0.58203125,
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0888671875,
          "content": "The MIT License (MIT)\n\nCopyright (c) .NET Foundation and Contributors\n\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.873046875,
          "content": "ï»¿# .NET Client for Docker Remote API\r\n\r\nThis library allows you to interact with [Docker Remote API][docker-remote-api]  endpoints in your .NET applications.\r\n\r\nIt is fully asynchronous, designed to be non-blocking and object-oriented way to interact with your Docker daemon programmatically.\r\n\r\n## Versioning\r\n\r\nVersion of this package uses [SemVer](https://semver.org/) format: `MAJOR.MINOR.PATCH`. `MINOR` segment indicates\r\nthe [Docker Remote API][docker-remote-api] version support. For instance `v2.124.0` of this library supports\r\n[Docker Remote API][docker-remote-api] `v1.24`. This does not guarantee backwards compatibility as [Docker Remote API][docker-remote-api] does not guarantee that either.\r\n\r\n`MAJOR` is reserved for major breaking changes we make to the library itself such as how\r\nthe calls are made or how authentication is made. `PATCH` is just for incremental bug fixes\r\nor non-breaking feature additions.\r\n\r\n## Installation\r\n\r\n[![NuGet latest release](https://img.shields.io/nuget/v/Docker.DotNet.svg)](https://www.nuget.org/packages/Docker.DotNet)\r\n\r\nYou can add this library to your project using [NuGet][nuget].\r\n\r\n**Package Manager Console**\r\nRun the following command in the âPackage Manager Consoleâ:\r\n\r\n> PM> Install-Package Docker.DotNet\r\n\r\n**Visual Studio**\r\nRight click to your project in Visual Studio, choose âManage NuGet Packagesâ and search for âDocker.DotNetâ and click âInstallâ.\r\n([see NuGet Gallery][nuget-gallery].)\r\n\r\n**.NET Core Command Line Interface**\r\nRun the following command from your favorite shell or terminal:\r\n\r\n> dotnet add package Docker.DotNet\r\n\r\n**Development Builds**\r\n\r\n![](https://ci.appveyor.com/api/projects/status/github/Microsoft/Docker.DotNet?branch=master&svg=true)\r\n\r\nIf you intend to use development builds of Docker.DotNet and don't want to compile the code yourself you can add the package source below to Visual Studio or your Nuget.Config.\r\n\r\n> https://ci.appveyor.com/nuget/docker-dotnet-hojfmn6hoed7\r\n\r\n## Usage\r\n\r\nYou can initialize the client like the following:\r\n\r\n```csharp\r\nusing Docker.DotNet;\r\nDockerClient client = new DockerClientConfiguration(\r\n    new Uri(\"http://ubuntu-docker.cloudapp.net:4243\"))\r\n     .CreateClient();\r\n```\r\nor to connect to your local [Docker for Windows](https://docs.docker.com/docker-for-windows/) daemon using named pipes or your local [Docker for Mac](https://docs.docker.com/docker-for-mac/) daemon using Unix sockets:\r\n\r\n```csharp\r\nusing Docker.DotNet;\r\nDockerClient client = new DockerClientConfiguration()\r\n     .CreateClient();\r\n```\r\n\r\nFor a custom endpoint, you can also pass a named pipe or a Unix socket to the `DockerClientConfiguration` constructor. For example:\r\n\r\n```csharp\r\n// Default Docker Engine on Windows\r\nusing Docker.DotNet;\r\nDockerClient client = new DockerClientConfiguration(\r\n    new Uri(\"npipe://./pipe/docker_engine\"))\r\n     .CreateClient();\r\n// Default Docker Engine on Linux\r\nusing Docker.DotNet;\r\nDockerClient client = new DockerClientConfiguration(\r\n    new Uri(\"unix:///var/run/docker.sock\"))\r\n     .CreateClient();\r\n```\r\n\r\n#### Example: List containers\r\n\r\n```csharp\r\nIList<ContainerListResponse> containers = await client.Containers.ListContainersAsync(\r\n\tnew ContainersListParameters(){\r\n\t\tLimit = 10,\r\n    });\r\n```\r\n\r\n#### Example: Create an image by pulling from Docker Registry\r\n\r\nThe code below pulls `fedora/memcached` image to your Docker instance using your Docker Hub account. You can\r\nanonymously download the image as well by passing `null` instead of AuthConfig object:\r\n\r\n```csharp\r\nawait client.Images.CreateImageAsync(\r\n    new ImagesCreateParameters\r\n    {\r\n        FromImage = \"fedora/memcached\",\r\n        Tag = \"alpha\",\r\n    },\r\n    new AuthConfig\r\n    {\r\n        Email = \"test@example.com\",\r\n        Username = \"test\",\r\n        Password = \"pa$$w0rd\"\r\n    },\r\n    new Progress<JSONMessage>());\r\n```\r\n\r\n\r\n#### Example: Create a container\r\n\r\nThe following code will create a new container of the previously fetched image.\r\n\r\n```csharp\r\nawait client.Containers.CreateContainerAsync(new CreateContainerParameters()\r\n    {\r\n        Image = \"fedora/memcached\",\r\n        HostConfig = new HostConfig()\r\n        {\r\n            DNS = new[] { \"8.8.8.8\", \"8.8.4.4\" }\r\n        }\r\n    });\r\n```\r\n\r\n#### Example: Start a container\r\n\r\nThe following code will start the created container.\r\n\r\n```csharp\r\nawait client.Containers.StartContainerAsync(\r\n    \"39e3317fd258\",\r\n    new ContainerStartParameters()\r\n    );\r\n```\r\n\r\n#### Example: Stop a container\r\n\r\nThe following code will stop a running container.\r\n\r\n*Note: `WaitBeforeKillSeconds` field is of type `uint?` which means optional. This code will wait 30 seconds before\r\nkilling it. If you like to cancel the waiting, you can use the CancellationToken parameter.*\r\n\r\n```csharp\r\nvar stopped = await client.Containers.StopContainerAsync(\r\n    \"39e3317fd258\",\r\n    new ContainerStopParameters\r\n    {\r\n        WaitBeforeKillSeconds = 30\r\n    },\r\n    CancellationToken.None);\r\n```\r\n\r\n#### Example: Dealing with Stream responses\r\n\r\nSome Docker API endpoints are designed to return stream responses. For example\r\n[Monitoring Docker events](https://docs.docker.com/engine/reference/api/docker_remote_api_v1.24/#/monitor-docker-s-events)\r\ncontinuously streams the status in a format like :\r\n\r\n```json\r\n{\"status\":\"create\",\"id\":\"dfdf82bd3881\",\"from\":\"base:latest\",\"time\":1374067924}\r\n{\"status\":\"start\",\"id\":\"dfdf82bd3881\",\"from\":\"base:latest\",\"time\":1374067924}\r\n{\"status\":\"stop\",\"id\":\"dfdf82bd3881\",\"from\":\"base:latest\",\"time\":1374067966}\r\n{\"status\":\"destroy\",\"id\":\"dfdf82bd3881\",\"from\":\"base:latest\",\"time\":1374067970}\r\n...\r\n```\r\n\r\nTo obtain this stream you can use:\r\n\r\n```csharp\r\nCancellationTokenSource cancellation = new CancellationTokenSource();\r\nStream stream = await client.System.MonitorEventsAsync(new ContainerEventsParameters(), new Progress<JSONMessage>(), cancellation.Token);\r\n// Initialize a StreamReader...\r\n```\r\n\r\nYou can cancel streaming using the CancellationToken. On the other hand, if you wish to continuously stream, you can simply pass `CancellationToken.None`.\r\n\r\n#### Example: HTTPS Authentication to Docker\r\n\r\nIf you are [running Docker with TLS (HTTPS)][docker-tls], you can authenticate to the Docker instance using the [**`Docker.DotNet.X509`**][Docker.DotNet.X509] package. You can get this package from NuGet or by running the following command in the âPackage Manager Consoleâ:\r\n\r\n    PM> Install-Package Docker.DotNet.X509\r\n\r\nOnce you add `Docker.DotNet.X509` to your project, use `CertificateCredentials` type:\r\n\r\n```csharp\r\nvar credentials = new CertificateCredentials (new X509Certificate2 (\"CertFile\", \"Password\"));\r\nvar config = new DockerClientConfiguration(\"http://ubuntu-docker.cloudapp.net:4243\", credentials);\r\nDockerClient client = config.CreateClient();\r\n```\r\n\r\nIf you don't want to authenticate you can omit the `credentials` parameter, which defaults to an `AnonymousCredentials` instance.\r\n\r\nThe `CertFile` in the example above should be a .pfx file (PKCS12 format), if you have .pem formatted certificates which Docker normally uses you can either convert it programmatically or use `openssl` tool to generate a .pfx:\r\n\r\n    openssl pkcs12 -export -inkey key.pem -in cert.pem -out key.pfx\r\n\r\n(Here, your private key is key.pem, public key is cert.pem and output file is named key.pfx.) This will prompt a password for PFX file and then you can use this PFX file on Windows. If the certificate is self-signed, your application may reject the server certificate, in this case you might want to disable server certificate validation:\r\n```c#\r\n//\r\n// There are two options to do this.\r\n//\r\n\r\n// You can do this globally for all certificates:\r\nServicePointManager.ServerCertificateValidationCallback += (o, c, ch, er) => true;\r\n\r\n// Or you can do this on a credential by credential basis:\r\nvar creds = new CertificateCredentials(...);\r\ncreds.ServerCertificateValidationCallback += (o, c, ch, er) => true;\r\n\r\n```\r\n\r\n#### Example: Basic HTTP Authentication to Docker\r\n\r\nIf the Docker instance is secured with Basic HTTP Authentication, you can use the [**`Docker.DotNet.BasicAuth`**][Docker.DotNet.BasicAuth] package. Get this package from NuGet or by running the following command in the âPackage Manager Consoleâ:\r\n\r\n    PM> Install-Package Docker.DotNet.BasicAuth\r\n\r\nOnce you added `Docker.DotNet.BasicAuth` to your project, use `BasicAuthCredentials` type:\r\n\r\n```csharp\r\nvar credentials = new BasicAuthCredentials (\"YOUR_USERNAME\", \"YOUR_PASSWORD\");\r\nvar config = new DockerClientConfiguration(\"tcp://ubuntu-docker.cloudapp.net:4243\", credentials);\r\nDockerClient client = config.CreateClient();\r\n```\r\n\r\n`BasicAuthCredentials` also accepts `SecureString` for username and password arguments.\r\n\r\n#### Example: Specifying Remote API Version\r\n\r\nBy default this client does not specify version number to the API for the requests it makes. However, if you would like to make use of versioning feature of Docker Remote API You can initialize the client like the following.\r\n\r\n```csharp\r\nvar config = new DockerClientConfiguration(...);\r\nDockerClient client = config.CreateClient(new Version(1, 16));\r\n```\r\n\r\n### Error Handling\r\n\r\nHere are typical exceptions thrown from the client library:\r\n\r\n* **`DockerApiException`** is thrown when Docker API responds with a non-success result. Subclasses:\r\n    * **``DockerContainerNotFoundException``**\r\n    * **``DockerImageNotFoundException``**\r\n* **`TaskCanceledException`** is thrown from `System.Net.Http.HttpClient` library by design. It is not a friendly exception, but it indicates your request has timed out. (default request timeout is 100 seconds.)\r\n    * Long-running methods (e.g. `WaitContainerAsync`, `StopContainerAsync`) and methods that return Stream (e.g. `CreateImageAsync`, `GetContainerLogsAsync`) have timeout value overridden with infinite timespan by this library.\r\n* **`ArgumentNullException`** is thrown when one of the required parameters are missing/empty.\r\n    * Consider reading the [Docker Remote API reference][docker-remote-api] and source code of the corresponding method you are going to use in from this library. This way you can easily find out which parameters are required and their format.\r\n\r\n## .NET Foundation\r\n\r\nDocker.DotNet is a [.NET Foundation](https://www.dotnetfoundation.org) project.\r\n\r\nThere are many .NET related projects on GitHub.\r\n\r\n- [.NET home repo](https://github.com/Microsoft/dotnet) - links to 100s of .NET projects, from Microsoft and the community.\r\n- [ASP.NET Core home](https://docs.microsoft.com/aspnet/core) - the best place to start learning about ASP.NET Core.\r\n\r\nThis project has adopted the code of conduct defined by the [Contributor Covenant](http://contributor-covenant.org/) to clarify expected behavior in our community. For more information, see the [.NET Foundation Code of Conduct](http://www.dotnetfoundation.org/code-of-conduct).\r\n\r\nGeneral .NET OSS discussions: [.NET Foundation Discord](https://dotnetfoundation.org/socialize/discord)\r\n\r\n## Contributing\r\n\r\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\r\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\r\nthe rights to use your contribution. For details, visit https://cla.dotnetfoundation.org.\r\n\r\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\r\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\r\nprovided by the bot. You will only need to do this once across all repos using our CLA.\r\n\r\n\r\n## License\r\n\r\nDocker.DotNet is licensed under the [MIT](LICENSE) license.\r\n\r\n---------------\r\nCopyright (c) .NET Foundation and Contributors\r\n\r\n[docker-remote-api]: https://docs.docker.com/engine/reference/api/docker_remote_api/\r\n[docker-tls]: https://docs.docker.com/articles/https/\r\n[nuget]: http://www.nuget.org\r\n[nuget-gallery]: https://www.nuget.org/packages/Docker.DotNet/\r\n[Docker.DotNet.X509]: https://www.nuget.org/packages/Docker.DotNet.X509/\r\n[Docker.DotNet.BasicAuth]: https://www.nuget.org/packages/Docker.DotNet.BasicAuth/\r\n"
        },
        {
          "name": "StrongNamePublicKeys.cs",
          "type": "blob",
          "size": 0.615234375,
          "content": "/// <summary>\n/// Contains the repo identity public key when strong naming the assembly.\n/// </summary>\ninternal static class StrongNamePublicKeys\n{\n  /// <summary>\n  /// The public key used for assemblies in this repo (Key.snk).\n  /// </summary>\n  public const string DockerDotNetPublicKey = \", PublicKey=002400000480000094000000060200000024000052534131000400000100010013a6d952388480a1ce272e8c8ac11d710668c8723e696a421190445a1e6198288112f5e04eb99a626f8bb1454cdf30ebfb0a09cb7fc7b299cb03aa6fea1ae9a58f05f9fb92a85ce82ad4490bb2f0074822d8b0a786684f26a6eb1765f9026dae4857925b4e077d04b6311bec7dacf8e8a031dcc9f7e0384bca914256abee25d9\";\n}"
        },
        {
          "name": "icon.png",
          "type": "blob",
          "size": 7.306640625,
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.json",
          "type": "blob",
          "size": 0.783203125,
          "content": "{\n  \"$schema\": \"https://raw.githubusercontent.com/dotnet/Nerdbank.GitVersioning/master/src/NerdBank.GitVersioning/version.schema.json\",\n  \"version\": \"3.125.15\",\n  \"nugetPackageVersion\": {\n    \"semVer\": 2\n  },\n  \"pathFilters\": [\n    // optional list of paths to consider when calculating version height.\n  ],\n  \"publicReleaseRefSpec\": [\n    \"^refs/heads/master$\", // we release out of master\n    \"^refs/tags/v\\\\d+\\\\.\\\\d+\" // we also release tags starting with vN.N\n  ],\n  \"cloudBuild\": {\n    \"setVersionVariables\": true,\n    \"buildNumber\": {\n      \"enabled\": false,\n      \"includeCommitId\": {\n        \"when\": \"nonPublicReleaseOnly\",\n        \"where\": \"buildMetadata\"\n      }\n    }\n  },\n  \"release\": {\n    \"branchName\": \"v{version}\",\n    \"versionIncrement\": \"minor\",\n    \"firstUnstableTag\": \"alpha\"\n  }\n}\n"
        }
      ]
    }
  ]
}