{
  "metadata": {
    "timestamp": 1736710760611,
    "page": 208,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "migueldeicaza/TensorFlowSharp",
      "stars": 3148,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4267578125,
          "content": "# Autosave files\r\n*~\r\n\r\n# build\r\n[Oo]bj/\r\n[Bb]in/\r\npackages/\r\nTestResults/\r\n\r\n# globs\r\nMakefile.in\r\n*.DS_Store\r\n*.sln.cache\r\n*.suo\r\n*.cache\r\n*.pidb\r\n*.userprefs\r\n*.usertasks\r\nconfig.log\r\nconfig.make\r\nconfig.status\r\naclocal.m4\r\ninstall-sh\r\nautom4te.cache/\r\n*.user\r\n*.tar.gz\r\ntarballs/\r\ntest-results/\r\nThumbs.db\r\n\r\n# Mac bundle stuff\r\n*.dmg\r\n*.app\r\n\r\n# resharper\r\n*_Resharper.*\r\n*.Resharper\r\n\r\n# dotCover\r\n*.dotCover\r\n\r\n.vs\r\n*.GhostDoc.xml"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.1748046875,
          "content": "language: csharp\nsolution: TensorFlowSharp.sln\nscript:\n  - tsh_version=1.13.0\n  - wget \"https://www.nuget.org/api/v2/package/TensorFlowSharp/$tsh_version\"\n  - mkdir native\n  - tar xzvf $tsh_version runtimes/linux/native\n  - cp runtimes/linux/native/* native\n  - tar xzvf $tsh_version runtimes/win7-x64/native\n  - cp runtimes/win7-x64/native/* native\n  - tar xzvf $tsh_version runtimes/osx/native\n  - cp runtimes/osx/native/* native\n  - msbuild /t:Restore $TRAVIS_BUILD_DIR/TensorFlowSharp.sln\n  - cd $TRAVIS_BUILD_DIR/\n  - msbuild /p:Configuration=Release TensorFlowSharp.sln\n  - cp -R $TRAVIS_BUILD_DIR/native/*.dylib $TRAVIS_BUILD_DIR/tests/TensorFlowSharp.Tests/bin/Release/\n  - cp -R $TRAVIS_BUILD_DIR/native/*.dylib $TRAVIS_BUILD_DIR/tests/TensorFlowSharp.Tests.CSharp/bin/Release/\n  - cd $TRAVIS_BUILD_DIR/packages/xunit.runner.console.2.2.0/tools\n  - cp \"$TRAVIS_BUILD_DIR/tests/TensorFlowSharp.Tests/obj/Release/FSharp.Core.dll\" .\n  - mono --arch=64 xunit.console.exe \"$TRAVIS_BUILD_DIR/tests/TensorFlowSharp.Tests/bin/Release/TensorFlowSharp.Tests.dll\" \"$TRAVIS_BUILD_DIR/tests/TensorFlowSharp.Tests.CSharp/bin/Release/TensorFlowSharp.Tests.CSharp.dll\"\nmono: \"5.10.0\"\ndotnet: \"2.1.4\"\nos: \"osx\"\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.2939453125,
          "content": "TensorFlowSharp are bindings to the native TensorFlow library.\n\nYou can either use the TensorFlow C-library release binaries, or build\nyour own from source.  Here are some pre-built TensorFlow binaries you\ncan use for each platform:\n\n- Linux\n  - CPU-only: https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-cpu-linux-x86_64-1.1.0.tar.gz\n  - GPU-enabled: https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-gpu-linux-x86_64-1.1.0.tar.gz\n- Mac: https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-cpu-darwin-x86_64-1.1.0.tar.gz\n- Windows: https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-cpu-windows-x86_64-1.2.0-rc0.zip\n\nUnpack the above .tar.gz suitable for your system on a prefix that your\nsystem's dynamic linker can use, for example, go to `/usr/local` and unpack there.\n\nMac note: the package contains a `.so` file, you will need to rename this to `.dylib` for\nit to work.\n\nOnce you do that, you need to open the solution file on the top\nlevel directory and build.   This will produce both the TensorFlowSharp\nlibrary as well as compile the tests and samples.\n\n## Building your own native TensorFlow library\n\nYou will wan to use Visual Studio 2017 or Visual Studio for Mac to build.\n\nTo build the TensorFlow C library from source,\n[follow these instructions](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/go/README.md#building-the-tensorflow-c-library-from-source).\n\nThis includes checking out the Tensorflow sources, installing Bazel, \nand building the core.\n\nOnce you do that, you will need to build the shared library.\nFirst, in the tensorflow directory, run:\n\n```bash\n./configure    \n```\n\nand answer the various prompts about your build. Important:\nbuilding with CUDA support provides better runtime performance\nbut has additional dependencies as discussed in the Tensorflow\ninstallation Web page.\n\nOnce configured, run: \n\n```bash\nbazel build -c opt //tensorflow:libtensorflow.so\n```\n\nIf you want debug symbols for Tensorflow, while debugging the binding:\n\n```bash\nbazel build -c dbg --strip=never //tensorflow:libtensorflow.so\n```\n\nYou will need the generated library (`libtensorflow.so`) to be installed in a\nsystem accessible location like `/usr/local/lib`\n\nOn Linux:\n\n```bash\nsudo cp bazel-bin/tensorflow/libtensorflow.so /usr/local/lib/\n```\n\nOn MacOS:\n\n```bash\nsudo cp bazel-bin/tensorflow/libtensorflow.so /usr/local/lib/libtensorflow.dylib\n```\n\n## Running the test\n\nI am currently using Visual Studio for Mac to do the development, but this\nshould work on Windows with VS and Linux with MonoDevelop.\n\nBefore the solution will run you will need the shared library generated to\nbe on a location accessibly by the Mono runtime (for example /usr/local/lib).\n\nWhile Tensorflow builds a library with the extension .so, you will need \nto make sure that it has the proper name for your platform (tensorflow.dll on Windows, \ntensorflow.dylib on Mac) and copy that there.\n\nTensorflow is a 64-bit library, so you will need to use a 64-bit Mono to run,\nat home (where I am doing this work), I have a copy of 64-bit Mono on /mono,\nso you will want to set that in your project configuration, to do this:\n\nEnsure that your Build/Compiler settings set \"Platform Target\" to \"x64\".\n\nOpen the solution file in the top directory, and when you hit run, this will\nrun the API test.   \n"
        },
        {
          "name": "Examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.9990234375,
          "content": "Permission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Learn",
          "type": "tree",
          "content": null
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.5341796875,
          "content": "all: doc-update yaml\n\nrebuild-docs: docs/template\n\tmdoc export-html --force-update -o docs --template=docs/template ecmadocs/en/\n\n# Used to fetch XML doc updates from the C# compiler into the ECMA docs\ndoc-update:\n\tmdoc update -i TensorFlowSharp/bin/Debug/TensorFlowSharp.xml -o ecmadocs/en TensorFlowSharp/bin/Debug/net471/TensorFlowSharp.dll \n\nyaml:\n\t-rm ecmadocs/en/ns-.xml\n\tmono /cvs/ECMA2Yaml/ECMA2Yaml/ECMA2Yaml/bin/Debug/ECMA2Yaml.exe --source=`pwd`/ecmadocs/en --output=`pwd`/docfx/api\n\t(cd docfx; mono ~/Downloads/docfx/docfx.exe build)\n\n"
        },
        {
          "name": "OpGenerator",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.9228515625,
          "content": "[![Build Status](https://travis-ci.org/migueldeicaza/TensorFlowSharp.svg?branch=master)](https://travis-ci.org/migueldeicaza/TensorFlowSharp)\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/TensorFlowSharp)\n\n# When to use TensorFlowSharp\n\nTensorFlowSharp is a good runtime to run your existing models, and is mostly\na straight binding to the underlying TensorFlow runtime.   Most people will\nwant to use a higher-level library for interfacing with TensorFlow.\n\nThe library was designed to blend in the .NET ecosystem and use the\n.NET naming conventions.\n\nI strongly recommend that you use\n[TensorFlow.NET](https://github.com/SciSharp/TensorFlow.NET) which\ntakes a different approach than TensorFlowSharp, it uses the Python\nnaming convention and has a much broader support for the higher level\noperations that you are likely to need - and is also actively maintained.\n\n\n# TensorFlowSharp\n\nTensorFlowSharp are .NET bindings to the TensorFlow library published here:\n\nhttps://github.com/tensorflow/tensorflow\n\nThis surfaces the C API as a strongly-typed .NET API for use from C# and F#.\n\nThe API surfaces the entire low-level TensorFlow API, it is on par with other\nlanguage bindings.  But currently does not include a high-level API like\nthe Python binding does, so it is more cumbersome to use for those high level\noperations.\n\nYou can prototype using TensorFlow or Keras in Python, then save your graphs\nor trained models and then load the result in .NET with TensorFlowSharp and\nfeed your own data to train or run.\n\nThe [current API\ndocumentation](https://migueldeicaza.github.io/TensorFlowSharp/) is here.\n\n# Using TensorFlowSharp\n\n## Installation \n\nThe easiest way to get started is to use the NuGet package for \nTensorFlowSharp which contains both the .NET API as well as the \nnative libraries for 64-bit Linux, Mac and Windows using the CPU backend.\n\nYou can install using NuGet like this:\n\n```cmd\nnuget install TensorFlowSharp\n```\n\nOr select it from the NuGet packages UI on Visual Studio.\n\nOn Visual Studio, make sure that you are targeting .NET 4.6.1 or\nlater, as this package uses some features of newer .NETs.  Otherwise,\nthe package will not be added. Once you do this, you can just use the\nTensorFlowSharp nuget\n\nAlternatively, you can [download it](https://www.nuget.org/packages/TensorFlowSharp/) directly.\n\n## Using TensorFlowSharp\n\nYour best source of information right now are the SampleTest that\nexercises various APIs of TensorFlowSharp, or the stand-alone samples\nlocated in \"Examples\".\n\nThis API binding is closer design-wise to the Java and Go bindings\nwhich use explicit TensorFlow graphs and sessions.  Your application\nwill typically create a graph (TFGraph) and setup the operations\nthere, then create a session from it (TFSession), then use the session\nrunner to setup inputs and outputs and execute the pipeline.\n\nSomething like this:\n\n```csharp\nusing (var graph = new TFGraph ())\n{\n    // Load the model\n    graph.Import (File.ReadAllBytes (\"MySavedModel\"));\n    using (var session = new TFSession (graph))\n    {\n        // Setup the runner\n        var runner = session.GetRunner ();\n        runner.AddInput (graph [\"input\"] [0], tensor);\n        runner.Fetch (graph [\"output\"] [0]);\n\n        // Run the model\n        var output = runner.Run ();\n\n        // Fetch the results from output:\n        TFTensor result = output [0];\n    }\n}\n```\n\nIf your application is sensitive to GC cycles, you can run your model as follows.\nThe `Run` method will then allocate managed memory only at the first call and reuse it later on.\nNote that this requires you to reuse the `Runner` instance and not to change the shape of the input data:\n\n```csharp\n// Some input matrices\nvar inputs = new float[][,] {\n    new float[,] { { 1, 2 }, { 3, 4 } },\n    new float[,] { { 2, 4 }, { 6, 8 } }\n};\n\n// Assumes all input matrices have identical shape\nvar shape = new long[] { inputs[0].GetLongLength(0), inputs[0].GetLongLength(1) };\nvar size = inputs[0].Length * sizeof(float);\n\n// Empty input and output tensors\nvar input = new TFTensor(TFDataType.Float, shape, size);\nvar output = new TFTensor[1];\n\n// Result array for a single run\nvar result = new float[1, 1];\n\nusing (var graph = new TFGraph())\n{\n    // Load the model\n    graph.Import(File.ReadAllBytes(\"MySavedModel\"));\n    using (var session = new TFSession(graph))\n    {\n        // Setup the runner\n        var runner = session.GetRunner();\n        runner.AddInput(graph[\"input\"][0], input);\n        runner.Fetch(graph[\"output\"][0]);\n\n        // Run the model on each input matrix\n        for (int i = 0; i < inputs.Length; i++)\n        {\n            // Mutate the input tensor\n            input.SetValue(inputs[i]);\n\n            // Run the model\n            runner.Run(output);\n\n            // Fetch the result from output into `result`\n            output[0].GetValue(result);\n        }\n    }\n}\n```\n\nIn scenarios where you do not need to setup the graph independently,\nthe session will create one for you.  The following example shows how\nto abuse TensorFlow to compute the addition of two numbers:\n\n```csharp\nusing (var session = new TFSession())\n{\n    var graph = session.Graph;\n\n    var a = graph.Const(2);\n    var b = graph.Const(3);\n    Console.WriteLine(\"a=2 b=3\");\n\n    // Add two constants\n    var addingResults = session.GetRunner().Run(graph.Add(a, b));\n    var addingResultValue = addingResults.GetValue();\n    Console.WriteLine(\"a+b={0}\", addingResultValue);\n\n    // Multiply two constants\n    var multiplyResults = session.GetRunner().Run(graph.Mul(a, b));\n    var multiplyResultValue = multiplyResults.GetValue();\n    Console.WriteLine(\"a*b={0}\", multiplyResultValue);\n}\n```\n\nHere is an F# scripting version of the same example, you can use this in F# Interactive:\n\n```fsharp\n#r @\"packages\\TensorFlowSharp.1.4.0\\lib\\net471\\TensorFlowSharp.dll\"\n\nopen System\nopen System.IO\nopen TensorFlow\n\n// set the path to find the native DLL\nEnvironment.SetEnvironmentVariable(\"Path\", \n    Environment.GetEnvironmentVariable(\"Path\") + \";\" + __SOURCE_DIRECTORY__ + @\"/packages/TensorFlowSharp.1.2.2/native\")\n\nmodule AddTwoNumbers = \n    let session = new TFSession()\n    let graph = session.Graph\n\n    let a = graph.Const(new TFTensor(2))\n    let b = graph.Const(new TFTensor(3))\n    Console.WriteLine(\"a=2 b=3\")\n\n    // Add two constants\n    let addingResults = session.GetRunner().Run(graph.Add(a, b))\n    let addingResultValue = addingResults.GetValue()\n    Console.WriteLine(\"a+b={0}\", addingResultValue)\n\n    // Multiply two constants\n    let multiplyResults = session.GetRunner().Run(graph.Mul(a, b))\n    let multiplyResultValue = multiplyResults.GetValue()\n    Console.WriteLine(\"a*b={0}\", multiplyResultValue)\n```\n\n# Working on TensorFlowSharp \n\nIf you want to work on extending TensorFlowSharp or contribute to its development\nread the [CONTRIBUTING.md](CONTRIBUTING.md) file.\n\nPlease keep in mind that this requires a modern version of C# as this uses some\nnew capabilities there.   So you will want to use Visual Studio 2017.\n\n## Possible Contributions\n\n### Build More Tests\n\nWould love to have more tests to ensure the proper operation of the framework.\n\n### Samples\n\nThe binding is pretty much complete, and at this point, I want to improve the \nAPI to be easier and more pleasant to use from both C# and F#.   Creating\nsamples that use Tensorflow is a good way of finding easy wins on the usability\nof the API, there are some here:\n\nhttps://github.com/tensorflow/models\n\n### Packaging\n\nMobile: we need to package the library for consumption on Android and iOS.\n\n### Documentation Styling\n\nThe API documentation has not been styled, I am using the barebones template\nfor documentation, and it can use some work.\n\n### Issues\n\nI have logged some usability problems and bugs in Issues, feel free to take\non one of those tasks.\n\n## Documentation\n\nMuch of the online documentation comes from TensorFlow and is licensed under\nthe terms of Apache 2 License, in particular all the generated documentation\nfor the various operations that is generated by using the tensorflow reflection\nAPIs.\n\nLast API update: Release 1.9\n"
        },
        {
          "name": "SampleTest",
          "type": "tree",
          "content": null
        },
        {
          "name": "TensorFlowSharp.sln",
          "type": "blob",
          "size": 8.3251953125,
          "content": "Microsoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio 15\r\nVisualStudioVersion = 15.0.26430.14\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"TensorFlowSharp\", \"TensorFlowSharp\\TensorFlowSharp.csproj\", \"{0264C321-34F4-46AF-819E-168D1E597232}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"SampleTest\", \"SampleTest\\SampleTest.csproj\", \"{243E2C90-F465-4A6E-9063-8F2C138015C7}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"OpGenerator\", \"OpGenerator\\OpGenerator.csproj\", \"{700E5928-3D5D-4B54-AD4D-BC48E79E389E}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Learn\", \"Learn\\Learn.csproj\", \"{20567EDE-7C20-4734-B489-C6D303843105}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"ExampleInceptionInference\", \"Examples\\ExampleInceptionInference\\ExampleInceptionInference.csproj\", \"{069A6736-7711-4805-8660-A267E713BC54}\"\r\nEndProject\r\nProject(\"{f2a71f9b-5d33-465a-a702-920d77279786}\") = \"FSharpExampleInceptionInference\", \"Examples\\FExampleInceptionInference\\FSharpExampleInceptionInference.fsproj\", \"{03FB7F3A-6D24-4033-9B04-69AD8A198CCF}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Examples\", \"Examples\", \"{674EC1D7-9649-462E-A7A8-93D0DE84FE64}\"\r\nEndProject\r\nProject(\"{f2a71f9b-5d33-465a-a702-920d77279786}\") = \"ImageCompression\", \"Examples\\ImageCompression\\ImageCompression.fsproj\", \"{5A493E1F-407D-4A3B-AF9B-A0F2930C1C18}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"tests\", \"tests\", \"{6E72CAD1-7962-4256-AF2A-3B813FFC88EA}\"\r\nEndProject\r\nProject(\"{f2a71f9b-5d33-465a-a702-920d77279786}\") = \"TensorFlowSharp.Tests\", \"tests\\TensorFlowSharp.Tests\\TensorFlowSharp.Tests.fsproj\", \"{9EE13143-569F-4F7A-975A-DE7DF5C8FF0B}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"TensorFlowSharp.Tests.CSharp\", \"tests\\TensorFlowSharp.Tests.CSharp\\TensorFlowSharp.Tests.CSharp.csproj\", \"{6504A704-575C-48D0-A4D2-422A7010936B}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"ExampleObjectDetection\", \"Examples\\ExampleObjectDetection\\ExampleObjectDetection.csproj\", \"{69471B59-576D-446B-8DF3-96EC783C0B6C}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{72E3A6DC-5772-4388-80C1-4164C2CE0242}\"\r\n\tProjectSection(SolutionItems) = preProject\r\n\t\t.editorconfig = .editorconfig\r\n\tEndProjectSection\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"ExampleCommon\", \"Examples\\ExampleCommon\\ExampleCommon.csproj\", \"{116BA176-F67C-4066-8685-C080705BAA16}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{0264C321-34F4-46AF-819E-168D1E597232}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{0264C321-34F4-46AF-819E-168D1E597232}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{0264C321-34F4-46AF-819E-168D1E597232}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{0264C321-34F4-46AF-819E-168D1E597232}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{243E2C90-F465-4A6E-9063-8F2C138015C7}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{243E2C90-F465-4A6E-9063-8F2C138015C7}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{243E2C90-F465-4A6E-9063-8F2C138015C7}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{243E2C90-F465-4A6E-9063-8F2C138015C7}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{700E5928-3D5D-4B54-AD4D-BC48E79E389E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{700E5928-3D5D-4B54-AD4D-BC48E79E389E}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{700E5928-3D5D-4B54-AD4D-BC48E79E389E}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{700E5928-3D5D-4B54-AD4D-BC48E79E389E}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{20567EDE-7C20-4734-B489-C6D303843105}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{20567EDE-7C20-4734-B489-C6D303843105}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{20567EDE-7C20-4734-B489-C6D303843105}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{20567EDE-7C20-4734-B489-C6D303843105}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{069A6736-7711-4805-8660-A267E713BC54}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{069A6736-7711-4805-8660-A267E713BC54}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{069A6736-7711-4805-8660-A267E713BC54}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{069A6736-7711-4805-8660-A267E713BC54}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{03FB7F3A-6D24-4033-9B04-69AD8A198CCF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{03FB7F3A-6D24-4033-9B04-69AD8A198CCF}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{03FB7F3A-6D24-4033-9B04-69AD8A198CCF}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{03FB7F3A-6D24-4033-9B04-69AD8A198CCF}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{5A493E1F-407D-4A3B-AF9B-A0F2930C1C18}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{5A493E1F-407D-4A3B-AF9B-A0F2930C1C18}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{5A493E1F-407D-4A3B-AF9B-A0F2930C1C18}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{5A493E1F-407D-4A3B-AF9B-A0F2930C1C18}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{9EE13143-569F-4F7A-975A-DE7DF5C8FF0B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{9EE13143-569F-4F7A-975A-DE7DF5C8FF0B}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{9EE13143-569F-4F7A-975A-DE7DF5C8FF0B}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{9EE13143-569F-4F7A-975A-DE7DF5C8FF0B}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{6504A704-575C-48D0-A4D2-422A7010936B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{6504A704-575C-48D0-A4D2-422A7010936B}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{6504A704-575C-48D0-A4D2-422A7010936B}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{6504A704-575C-48D0-A4D2-422A7010936B}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{69471B59-576D-446B-8DF3-96EC783C0B6C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{69471B59-576D-446B-8DF3-96EC783C0B6C}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{69471B59-576D-446B-8DF3-96EC783C0B6C}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{69471B59-576D-446B-8DF3-96EC783C0B6C}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{116BA176-F67C-4066-8685-C080705BAA16}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{116BA176-F67C-4066-8685-C080705BAA16}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{116BA176-F67C-4066-8685-C080705BAA16}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{116BA176-F67C-4066-8685-C080705BAA16}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(NestedProjects) = preSolution\r\n\t\t{069A6736-7711-4805-8660-A267E713BC54} = {674EC1D7-9649-462E-A7A8-93D0DE84FE64}\r\n\t\t{03FB7F3A-6D24-4033-9B04-69AD8A198CCF} = {674EC1D7-9649-462E-A7A8-93D0DE84FE64}\r\n\t\t{5A493E1F-407D-4A3B-AF9B-A0F2930C1C18} = {674EC1D7-9649-462E-A7A8-93D0DE84FE64}\r\n\t\t{9EE13143-569F-4F7A-975A-DE7DF5C8FF0B} = {6E72CAD1-7962-4256-AF2A-3B813FFC88EA}\r\n\t\t{6504A704-575C-48D0-A4D2-422A7010936B} = {6E72CAD1-7962-4256-AF2A-3B813FFC88EA}\r\n\t\t{69471B59-576D-446B-8DF3-96EC783C0B6C} = {674EC1D7-9649-462E-A7A8-93D0DE84FE64}\r\n\t\t{116BA176-F67C-4066-8685-C080705BAA16} = {674EC1D7-9649-462E-A7A8-93D0DE84FE64}\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {19B7031D-FE57-405F-BC61-1C14F2D3DA61}\r\n\tEndGlobalSection\r\n\tGlobalSection(MonoDevelopProperties) = preSolution\r\n\t\tPolicies = $0\r\n\t\t$0.DotNetNamingPolicy = $1\r\n\t\t$1.DirectoryNamespaceAssociation = PrefixedHierarchical\r\n\t\t$0.TextStylePolicy = $2\r\n\t\t$2.scope = text/x-csharp\r\n\t\t$2.FileWidth = 80\r\n\t\t$2.TabWidth = 8\r\n\t\t$2.IndentWidth = 8\r\n\t\t$0.CSharpFormattingPolicy = $3\r\n\t\t$3.scope = text/x-csharp\r\n\t\t$3.IndentSwitchSection = False\r\n\t\t$3.NewLinesForBracesInProperties = False\r\n\t\t$3.NewLinesForBracesInAccessors = False\r\n\t\t$3.NewLinesForBracesInAnonymousMethods = False\r\n\t\t$3.NewLinesForBracesInControlBlocks = False\r\n\t\t$3.NewLinesForBracesInAnonymousTypes = False\r\n\t\t$3.NewLinesForBracesInObjectCollectionArrayInitializers = False\r\n\t\t$3.NewLinesForBracesInLambdaExpressionBody = False\r\n\t\t$3.NewLineForElse = False\r\n\t\t$3.NewLineForCatch = False\r\n\t\t$3.NewLineForFinally = False\r\n\t\t$3.NewLineForMembersInObjectInit = False\r\n\t\t$3.NewLineForMembersInAnonymousTypes = False\r\n\t\t$3.NewLineForClausesInQuery = False\r\n\t\t$3.SpacingAfterMethodDeclarationName = True\r\n\t\t$3.SpaceAfterMethodCallName = True\r\n\t\t$3.SpaceBeforeOpenSquareBracket = True\r\n\t\tversion = 0.2\r\n\tEndGlobalSection\r\nEndGlobal\r\n"
        },
        {
          "name": "TensorFlowSharp",
          "type": "tree",
          "content": null
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 2.046875,
          "content": "pool:\n  name: Hosted macOS\n  demands: msbuild\n\nsteps:\n- bash: |\n   echo at:\n   pwd\n   echo env:\n   set\n   echo dir:\n   ls\n  displayName: Environment\n\n- bash: |\n   if echo $BUILD_SOURCEBRANCH | grep /release/; then\n       perl -pi -e \"s/PackageVersion>.*</PackageVersion>${BUILD_SOURCEBRANCHNAME}</\" TensorFlowSharp/TensorFlowSharp.csproj\n   fi\n   \n  displayName: 'Update version based on branch name'\n\n- bash: |\n   TFVERSION=`sed -n 's/.*TensorFlowRuntimeVersion>\\(.*\\)<.*/\\1/p' TensorFlowSharp/TensorFlowSharp.csproj | sed 's/-pre.*//'`\n   echo TFVERSION is $TFVERSION\n   mono --version\n   ROOT=`pwd`\n   echo Root is: $ROOT\n   BASE=https://storage.googleapis.com/tensorflow/libtensorflow\n   \n   WIN=libtensorflow-cpu-windows-x86_64-${TFVERSION}.zip\n   DARWIN=libtensorflow-cpu-darwin-x86_64-${TFVERSION}.tar.gz\n   LINUX=libtensorflow-cpu-linux-x86_64-${TFVERSION}.tar.gz\n   if test x$SKIP_DOWNLOAD = x; then\n       curl -O $BASE/$WIN\n       curl -O $BASE/$DARWIN\n       curl -O $BASE/$LINUX\n   fi\n      \n   echo Unzipping Windows\n   unzip -d PAYLOAD $WIN lib/tensorflow.dll\n   mv lib/tensorflow.dll PAYLOAD\n   \n   echo Unzipping Darwin\n   tar xzvf $DARWIN lib\n   mv -f lib/libtensorflow* PAYLOAD/\n   \n   echo Unzipping Linux\n   tar xzvf $LINUX lib\n   mv -f lib/* PAYLOAD/\n   mkdir -p $ROOT/native\n   mv PAYLOAD/lib/tensorflow.dll PAYLOAD/libtensorflow.dll\n   rmdir PAYLOAD/lib\n   cp PAYLOAD/* $ROOT/native\n  displayName: 'Script - Unpack remote payload'\n  env:\n    TFVERSION: 1.9.0\n\n- task: NuGetCommand@2\n  displayName: 'NuGet restore'\n\n- task: MSBuild@1\n  displayName: 'MSBuild Restore'\n  inputs:\n    msbuildArguments: '/t:restore'\n\n- bash: 'ls -lR'\n  displayName: 'List contents'\n\n- task: MSBuild@1\n  displayName: 'Build Solution'\n  inputs:\n    msbuildArguments: '/p:Configuration=Release'\n    restoreNugetPackages: true\n\n- task: CopyFiles@2\n  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'\n  inputs:\n    SourceFolder: TensorFlowSharp/bin/Release\n    TargetFolder: '$(build.artifactstagingdirectory)'\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Artifact: drop'\n\n"
        },
        {
          "name": "docfx",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "ecmadocs",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}