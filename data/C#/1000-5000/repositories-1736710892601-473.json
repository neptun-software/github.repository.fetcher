{
  "metadata": {
    "timestamp": 1736710892601,
    "page": 473,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dotnet/iot",
      "stars": 2199,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 5.8876953125,
          "content": "# editorconfig.org\n\n# top-most EditorConfig file\nroot = true\n\n# Default settings:\n# A newline ending every file\n# Use 4 spaces as indentation\n[*]\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\n\n[project.json]\nindent_size = 2\n\n# C# files\n[*.cs]\n# Character Set: UTF-8 with byte order mark (see also StyleCop rule SA1412)\ncharsetÂ = utf-8-bom\n\n# New line preferences\ncsharp_new_line_before_open_brace = all\ncsharp_new_line_before_else = true\ncsharp_new_line_before_catch = true\ncsharp_new_line_before_finally = true\ncsharp_new_line_before_members_in_object_initializers = true\ncsharp_new_line_before_members_in_anonymous_types = true\ncsharp_new_line_between_query_expression_clauses = true\n\n# Indentation preferences\ncsharp_indent_block_contents = true\ncsharp_indent_braces = false\ncsharp_indent_case_contents = true\ncsharp_indent_switch_labels = true\ncsharp_indent_labels = one_less_than_current\n\n# avoid this. unless absolutely necessary\ndotnet_style_qualification_for_field = false:suggestion\ndotnet_style_qualification_for_property = false:suggestion\ndotnet_style_qualification_for_method = false:suggestion\ndotnet_style_qualification_for_event = false:suggestion\n\n# only use var when it's obvious what the variable type is\ncsharp_style_var_for_built_in_types = false:none\ncsharp_style_var_when_type_is_apparent = false:none\ncsharp_style_var_elsewhere = false:suggestion\n\n# use language keywords instead of BCL types\ndotnet_style_predefined_type_for_locals_parameters_members = true:suggestion\ndotnet_style_predefined_type_for_member_access = true:suggestion\n\n# name all constant fields using PascalCase\ndotnet_naming_rule.constant_fields_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.constant_fields_should_be_pascal_case.symbols  = constant_fields\ndotnet_naming_rule.constant_fields_should_be_pascal_case.style    = pascal_case_style\n\ndotnet_naming_symbols.constant_fields.applicable_kinds   = field\ndotnet_naming_symbols.constant_fields.required_modifiers = const\n\ndotnet_naming_style.pascal_case_style.capitalization = pascal_case\n\n# static fields should have s_ prefix\ndotnet_naming_rule.static_fields_should_have_prefix.severity = suggestion\ndotnet_naming_rule.static_fields_should_have_prefix.symbols  = static_fields\ndotnet_naming_rule.static_fields_should_have_prefix.style    = static_prefix_style\n\ndotnet_naming_symbols.static_fields.applicable_kinds   = field\ndotnet_naming_symbols.static_fields.required_modifiers = static\n\ndotnet_naming_style.static_prefix_style.required_prefix = s_\ndotnet_naming_style.static_prefix_style.capitalization = camel_case \n\n# internal and private fields should be _camelCase\ndotnet_naming_rule.camel_case_for_private_internal_fields.severity = suggestion\ndotnet_naming_rule.camel_case_for_private_internal_fields.symbols  = private_internal_fields\ndotnet_naming_rule.camel_case_for_private_internal_fields.style    = camel_case_underscore_style\n\ndotnet_naming_symbols.private_internal_fields.applicable_kinds = field\ndotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private, internal\n\ndotnet_naming_style.camel_case_underscore_style.required_prefix = _\ndotnet_naming_style.camel_case_underscore_style.capitalization = camel_case \n\n# Code style defaults\ndotnet_sort_system_directives_first = true\ncsharp_preserve_single_line_blocks = true\ncsharp_preserve_single_line_statements = false\n\n# Expression-level preferences\ndotnet_style_object_initializer = true:suggestion\ndotnet_style_collection_initializer = true:suggestion\ndotnet_style_explicit_tuple_names = true:suggestion\ndotnet_style_coalesce_expression = true:suggestion\ndotnet_style_null_propagation = true:suggestion\n\n# Expression-bodied members\ncsharp_style_expression_bodied_methods = false:none\ncsharp_style_expression_bodied_constructors = false:none\ncsharp_style_expression_bodied_operators = false:none\ncsharp_style_expression_bodied_properties = true:none\ncsharp_style_expression_bodied_indexers = true:none\ncsharp_style_expression_bodied_accessors = true:none\n\n# Pattern matching\ncsharp_style_pattern_matching_over_is_with_cast_check = true:suggestion\ncsharp_style_pattern_matching_over_as_with_null_check = true:suggestion\ncsharp_style_inlined_variable_declaration = true:suggestion\n\n# Null checking preferences\ncsharp_style_throw_expression = true:suggestion\ncsharp_style_conditional_delegate_call = true:suggestion\n\n# Space preferences\ncsharp_space_after_cast = false\ncsharp_space_after_colon_in_inheritance_clause = true\ncsharp_space_after_comma = true\ncsharp_space_after_dot = false\ncsharp_space_after_keywords_in_control_flow_statements = true\ncsharp_space_after_semicolon_in_for_statement = true\ncsharp_space_around_binary_operators = before_and_after\ncsharp_space_around_declaration_statements = do_not_ignore\ncsharp_space_before_colon_in_inheritance_clause = true\ncsharp_space_before_comma = false\ncsharp_space_before_dot = false\ncsharp_space_before_open_square_brackets = false\ncsharp_space_before_semicolon_in_for_statement = false\ncsharp_space_between_empty_square_brackets = false\ncsharp_space_between_method_call_empty_parameter_list_parentheses = false\ncsharp_space_between_method_call_name_and_opening_parenthesis = false\ncsharp_space_between_method_call_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_empty_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_name_and_open_parenthesis = false\ncsharp_space_between_method_declaration_parameter_list_parentheses = false\ncsharp_space_between_parentheses = false\ncsharp_space_between_square_brackets = false\n\n# C++ Files\n[*.{cpp,h,in}]\ncurly_bracket_next_line = true\nindent_brace_style = Allman\n\n# Xml project files\n[*.{csproj,vcxproj,vcxproj.filters,proj,nativeproj,locproj}]\nindent_size = 2\n\n# Xml build files\n[*.builds]\nindent_size = 2\n\n# Xml files\n[*.{xml,stylecop,resx,ruleset}]\nindent_size = 2\n\n# Xml config files\n[*.{props,targets,config,nuspec}]\nindent_size = 2\n\n# Shell scripts\n[*.sh]\nend_of_line = lf\n[*.{cmd, bat}]\nend_of_line = crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 5.6162109375,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n.vscode/\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# .Net CLI restore location and packages\n.dotnet/\n.packages/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n**/Properties/launchSettings.json\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/*\n!.axoCover/settings.json\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/[Pp]ackages/*\n# except build/, which is used as an MSBuild target.\n!**/[Pp]ackages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/[Pp]ackages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk \n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output \nASALocalRun/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder \n.mfractor/\n\n# Ignore Mac DS_Store files\n.DS_Store\n/src/devices/Seatalk1/schematics/SeaTalk1/SeaTalk1-backups\n"
        },
        {
          "name": ".markdown-link-check.json",
          "type": "blob",
          "size": 0.2900390625,
          "content": "{\n    \"ignorePatterns\": [\n        { \"pattern\": \"^http[s]?://(?!(github.com|([a-zA-Z]*).microsoft.com|aka.ms|dotnetfoundation.org|www.nuget.org))\" },\n        { \"pattern\": \"../.vscode/launch.json\" },\n        { \"pattern\": \"../.vscode/tasks.json\" },\n        { \"pattern\": \"http://url/image\" }\n    ] \n}\n"
        },
        {
          "name": ".markdownlint.json",
          "type": "blob",
          "size": 0.041015625,
          "content": "{\n    \"MD013\": false,\n    \"MD033\": false\n}"
        },
        {
          "name": ".markdownlintignore",
          "type": "blob",
          "size": 0.01171875,
          "content": "eng/common/\n"
        },
        {
          "name": "Build.cmd",
          "type": "blob",
          "size": 0.2373046875,
          "content": "@echo off\nsetlocal\n\nfor %%x in (%*) do (\n    if \"%%x\"==\"-pack\" set _packArg=/p:BuildPackages=true\n)\n\npowershell -ExecutionPolicy ByPass -NoProfile -command \"& \"\"\"%~dp0eng\\common\\Build.ps1\"\"\" -restore -build %* %_packArg%\"\nexit /b %ErrorLevel%\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.251953125,
          "content": "# Code of Conduct\n\nThis project has adopted the code of conduct defined by the Contributor Covenant\nto clarify expected behavior in our community.\nFor more information, see the [.NET Foundation Code of Conduct](https://dotnetfoundation.org/code-of-conduct).\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 1.4658203125,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project>\n  <!-- Hint: This file is only included in projects not in the src/devices subtree. Check the file with the same name\n  there for common includes to all bindings -->\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.DotNet.Arcade.Sdk\" />\n  <Import Project=\"$(RepositoryEngineeringDir)Compilers.props\" />\n  <Import Project=\"$(RepositoryEngineeringDir)Analyzers.props\" />\n  <Import Project=\"$(RepositoryEngineeringDir)Versions.external.props\" />\n\n  <PropertyGroup>\n    <Copyright>$(CopyrightNetFoundation)</Copyright>\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\n    <MainLibraryPath>$(MSBuildThisFileDirectory)src/System.Device.Gpio/</MainLibraryPath>\n    <Nullable>enable</Nullable>\n    <PackageReadmeFile>README.md</PackageReadmeFile>\n  </PropertyGroup>\n\n  <PropertyGroup>\n    <Language>C#</Language>\n    <LangVersion>9</LangVersion>\n    <!-- Generate snupkg package -->\n    <IncludeSymbols>true</IncludeSymbols>\n\n    <!--We are reusing arcade targets for strongname signing the assembly. Due to this, we must set the strongnamekeyid property\n    in order to ensure that the values for publickey and publickeytoken won't be overwritten by arcade later in the evaluation.-->\n    <SymbolPackageFormat>snupkg</SymbolPackageFormat>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <!-- Include license and third party files to packages -->\n    <Content Include=\"$(RepoRoot)THIRD-PARTY-NOTICES.TXT\" Pack=\"true\" PackagePath=\"\\\" />\n  </ItemGroup>\n</Project>\n"
        },
        {
          "name": "Directory.Build.targets",
          "type": "blob",
          "size": 0.1259765625,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project>\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.DotNet.Arcade.Sdk\" />\n</Project>\n"
        },
        {
          "name": "Documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.08984375,
          "content": "The MIT License (MIT)\n\nCopyright (c) .NET Foundation and Contributors\n\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "NuGet.config",
          "type": "blob",
          "size": 1.1787109375,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <clear />\n    <!--Begin: Package sources managed by Dependency Flow automation. Do not edit the sources below.-->\n    <!--  Begin: Package sources from dotnet-runtime -->\n    <!--  End: Package sources from dotnet-runtime -->\n    <!--End: Package sources managed by Dependency Flow automation. Do not edit the sources above.-->\n    <add key=\"dotnet-eng\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json\" />\n    <add key=\"dotnet-tools\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json\" />\n    <add key=\"dotnet5\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet5/nuget/v3/index.json\" />\n    <add key=\"dotnet3.1\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet3.1/nuget/v3/index.json\" />\n    <add key=\"dotnet-public\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public/nuget/v3/index.json\" />\n    <add key=\"nightly_iot_builds\" value=\"https://pkgs.dev.azure.com/dotnet/IoT/_packaging/nightly_iot_builds/nuget/v3/index.json\" />\n  </packageSources>\n  <disabledPackageSources />\n</configuration>\n"
        },
        {
          "name": "README-nuget.md",
          "type": "blob",
          "size": 5.1767578125,
          "content": "# .NET IoT Libraries\n\n.NET can be used to build applications for [IoT](https://en.wikipedia.org/wiki/Internet_of_things) devices and scenarios. IoT applications typically interact with sensors, displays and input devices that require the use of [GPIO pins](https://en.wikipedia.org/wiki/General-purpose_input/output), serial ports or similar hardware.\n\nYou might want to start with our [official documentation](https://docs.microsoft.com/dotnet/iot/).\n\nThis repository contains the [System.Device.Gpio](https://www.nuget.org/packages/System.Device.Gpio) library and implementations for various boards like [Raspberry Pi](https://www.raspberrypi.org/) and [Hummingboard](https://www.solid-run.com/nxp-family/hummingboard/).\n\nThe repository also contains [Iot.Device.Bindings](https://www.nuget.org/packages/Iot.Device.Bindings), a growing set of community-maintained [device bindings](https://github.com/dotnet/iot/tree/main/src/devices/README.md) for IoT components.\n\n## Hardware requirements\n\nWhile most of the bindings and examples in this project require and are designed to support specific hardware (such as [LCD displays](https://github.com/dotnet/iot/tree/main/src/devices/CharacterLcd), [temperature sensors](https://github.com/dotnet/iot/tree/main/src/devices/Dhtxx), [single-board computers](https://github.com/dotnet/iot/tree/main/src/devices/Board/RaspberryPiBoard.cs), [microcontrollers](https://github.com/dotnet/iot/tree/main/src/devices/Arduino), etc.), the library itself tries to be as hardware-independent as possible. Some bindings are even written to showcase the use of IOT interfaces with hardware that is already present in normal desktop computers (such as [keyboards](https://github.com/dotnet/iot/tree/main/src/devices/Board/KeyboardGpioDriver.cs) or [CPU temperature sensors](https://github.com/dotnet/iot/tree/main/src/devices/HardwareMonitor)). So to get started, you do not need expensive hardware. Or you can start out with cheap stuff, such as an Arduino Uno. You can also use [FT232H](https://github.com/dotnet/iot/tree/main/src/devices/Ft232H) or [FT4222](https://github.com/dotnet/iot/tree/main/src/devices/Ft4222) on a Windows, Linux or MAcOS traditional laptop or desktop.\n\n## .NET Versions\n\nBoth libraries `System.Device.Gpio` (this one) and [Iot.Device.Bindings](https://www.nuget.org/packages/Iot.Device.Bindings) are cross-targeting .NET Standard 2.0, .NET Core 3.1, and .NET 6.0. They can be used from any project targeting .NET Core 2.0 or higher, and also from .NET Framework or mono. If you are looking at a Micro Controller Unit (MCU) support, check [.NET nanoFramework](https://github.com/nanoframework/).\n\nThe sample projects target the latest stable .NET Version. This applies to the sample projects with each device as well as the [example projects](https://github.com/dotnet/iot/tree/main/samples).\n\n## How to Install\n\nFrom Visual Studio, you can just add a nuget by searching for `System.Device.Gpio` and `Iot.Device.Bindings`.\n\n## Getting started\n\nAfter installing, please see the following areas to learn more:\n\n* [Official Documentation](https://docs.microsoft.com/dotnet/iot/) - Concepts, quickstarts, tutorials, and API reference documentation.\n* [API Documentation](https://docs.microsoft.com/dotnet/api/?view=iot-dotnet-1.5) - Direct link to API reference documentation for all public interfaces. Be sure to choose the library version you are using.\n* [Microsoft Learn interactive learning module](https://docs.microsoft.com/learn/modules/create-iot-device-dotnet/)\n* [Let's Learn .NET: IoT livestream (September 2021)](https://www.youtube.com/watch?v=sKaSBh1M4M4)\n* [.NET IoT 101 (Jan 2020)](https://channel9.msdn.com/Series/IoT-101) - An introduction series on how to create .NET IoT applications with a Raspberry Pi.\n* [Hardware Documentation](https://github.com/dotnet/iot/blob/main/Documentation/README.md) - Resources related to electronics, devices, vendors, software and other IoT topics.\n* [Samples](https://github.com/dotnet/iot/blob/main/samples/README.md) - Step-by-step instructions on building your first app.\n\nAll bindings (in `src/devices`) contains a `samples` folder where you will find examples on how to use each of the devices, sensor, displays and other components.\n\n## Community\n\nThis project has adopted the code of conduct defined by the [Contributor Covenant](https://contributor-covenant.org/)\nto clarify expected behavior in our community. For more information, see the [.NET Foundation Code of Conduct](https://dotnetfoundation.org/code-of-conduct).\n\n## Contributing\n\nWe welcome PR and contributions. We are primarily interested in the following:\n\n* Improving quality and capability of the drivers for supported boards.\n* Implementations for additional boards.\n* [.NET device bindings](https://github.com/dotnet/iot/tree/main/src/devices) for a wide variety of sensors, chips, displays and other components.\n* Request a device binding or protocol that you need for your project ([file an issue](https://github.com/dotnet/iot/issues)).\n* Links to blog posts or tweets that showcase .NET Core being used for great IoT scenarios ([file an issue](https://github.com/dotnet/iot/issues)).\n\n## License\n\n.NET (including the iot repo) is licensed under the [MIT license](https://github.com/dotnet/iot/blob/main/LICENSE).\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.5322265625,
          "content": "<!-- markdownlint-disable -->\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/dotnet/iot)\n[![Discord](https://img.shields.io/discord/755370044946513932?label=Discord)](https://discord.gg/kqWhBbj)\n\n# .NET IoT Libraries\n\n.NET can be used to build applications for [IoT](https://en.wikipedia.org/wiki/Internet_of_things) devices and scenarios. IoT applications typically interact with sensors, displays and input devices that require the use of [GPIO pins](https://en.wikipedia.org/wiki/General-purpose_input/output), serial ports or similar hardware.\n\n> [!IMPORTANT]\n> This is the GitHub repo for the libraries. You might want to start with our [official documentation](https://docs.microsoft.com/dotnet/iot/).\n\nThis repository contains the [System.Device.Gpio](https://www.nuget.org/packages/System.Device.Gpio) library and implementations for various boards like [Raspberry Pi](https://www.raspberrypi.org/) and [Hummingboard](https://www.solid-run.com/nxp-family/hummingboard/).\n\nThe repository also contains [Iot.Device.Bindings](https://www.nuget.org/packages/Iot.Device.Bindings), a growing set of community-maintained [device bindings](src/devices/README.md) for IoT components.\n\n> [!NOTE]\n> This repository is still in experimental stage and all APIs are subject to changes.\n\n## Hardware requirements\n\nWhile most of the bindings and examples in this project require and are designed to support specific hardware (such as [LCD displays](src/devices/CharacterLcd), [temperature sensors](src/devices/Dhtxx), [single-board computers](src/devices/Board/RaspberryPiBoard.cs), [microcontrollers](src/devices/Arduino), etc.), the library itself tries to be as hardware-independent as possible. Some bindings are even written to showcase the use of IOT interfaces with hardware that is already present in normal desktop computers (such as [keyboards](src/devices/Board/KeyboardGpioDriver.cs) or [CPU temperature sensors](src/devices/HardwareMonitor)). So to get started, you do not need expensive hardware. Or you can start out with cheap stuff, such as an Arduino Uno.\n\n## .NET Versions\n\nBoth libraries in this repository are cross-targeting .NET Standard 2.0, .NET Core 3.1, and .NET 6.0. They can be used from any project targeting .NET Core 2.0 or higher, and also from .NET Framework or mono. If you are looking at a Micro Controller Unit (MCU) support, check [.NET nanoFramework](https://github.com/nanoframework/).\n\nThe sample projects target the latest stable .NET Version. This applies to the sample projects with each device as well as the example projects on the `/samples` directory.\n\n## How to Install\n\nFrom Visual Studio, you can just add a nuget by searching for `System.Device.Gpio` and `Iot.Device.Bindings`.\n\nIf you need, you can also install the latest daily pre-release build of the .NET `System.Device.Gpio` and `Iot.Device.Bindings` NuGet packages from the Azure artifacts feed.\n  \n### NuGet.exe\n\n```shell\nnuget install System.Device.Gpio -PreRelease -Source https://pkgs.dev.azure.com/dotnet/IoT/_packaging/nightly_iot_builds/nuget/v3/index.json\nnuget install Iot.Device.Bindings -PreRelease -Source https://pkgs.dev.azure.com/dotnet/IoT/_packaging/nightly_iot_builds/nuget/v3/index.json\n```\n\n### Official Build Status\n\n[![Build Status](https://dev.azure.com/dotnet/IoT/_apis/build/status/dotnet.iot?branchName=main)](https://dev.azure.com/dotnet/IoT/_build/latest?definitionId=179&branchName=main)\n\n### .NET CLI\n\n```shell\ndotnet add package System.Device.Gpio --source https://pkgs.dev.azure.com/dotnet/IoT/_packaging/nightly_iot_builds/nuget/v3/index.json\ndotnet add package Iot.Device.Bindings --source https://pkgs.dev.azure.com/dotnet/IoT/_packaging/nightly_iot_builds/nuget/v3/index.json\n```\n\n## Contributing\n\nFor information on how to build this repository and to add new device bindings, please head out to [Contributing](Documentation/CONTRIBUTING.md).\n\nPlease contribute. We are primarily interested in the following:\n\n* Improving quality and capability of the drivers for supported boards.\n* Implementations for additional boards.\n* [.NET device bindings](src/devices) for a wide variety of sensors, chips, displays and other components.\n* Request a device binding or protocol that you need for your project ([file an issue](https://github.com/dotnet/iot/issues)).\n* Links to blog posts or tweets that showcase .NET Core being used for great IoT scenarios ([file an issue](https://github.com/dotnet/iot/issues)).\n\n## Getting Started\n\nAfter installing, please see the following areas to learn more:\n\n* [Official Documentation](https://docs.microsoft.com/dotnet/iot/) - Concepts, quickstarts, tutorials, and API reference documentation.\n* [API Documentation](https://docs.microsoft.com/dotnet/api/?view=iot-dotnet-1.5) - Direct link to API reference documentation for all public interfaces. Be sure to choose the library version you are using.\n* [Microsoft Learn interactive learning module](https://docs.microsoft.com/learn/modules/create-iot-device-dotnet/)\n* [Let's Learn .NET: IoT livestream (September 2021)](https://www.youtube.com/watch?v=sKaSBh1M4M4)\n* [.NET IoT 101 (Jan 2020)](https://channel9.msdn.com/Series/IoT-101) - An introduction series on how to create .NET IoT applications with a Raspberry Pi.\n* [Hardware Documentation](Documentation/README.md) - Resources related to electronics, devices, vendors, software and other IoT topics.\n* [Samples](samples/README.md) - Step-by-step instructions on building your first app.\n* [Roadmap](Documentation/roadmap.md) - Areas planned or currently being worked on.\n\nAll bindings (src/devices) contains a `samples` folder where you will find examples on how to use each of the devices, sensor, displays and other components.\n\n**Important**: Please make sure you are using tag that correspond to your package version to browse and reuse the samples' code.\n\n![select branch](./Documentation/images/selectbranch.jpg)\n\nOnce you have selected the right branch, you can browse the repository. The main branch contains code that is always the latest and may not been yet released to a package. So if you are using the 1.2 package, please select 1.2 tag before browsing the source code.\n\n### Tutorials\n\n* [Web service using SenseHat by Dawid Borycki (Aug 2019)](https://msdn.microsoft.com/magazine/mt833493)\n\n## Community\n\nThis project has adopted the code of conduct defined by the [Contributor Covenant](https://contributor-covenant.org/)\nto clarify expected behavior in our community. For more information, see the [.NET Foundation Code of Conduct](https://dotnetfoundation.org/code-of-conduct).\n\n## License\n\n.NET (including the iot repo) is licensed under the [MIT license](LICENSE).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.064453125,
          "content": "# Security Policy\r\n\r\n## Supported Versions\r\n\r\nThe .NET Core and ASP.NET Core support policy, including supported versions can be found at the [.NET Core Support Policy Page](https://dotnet.microsoft.com/platform/support/policy/dotnet-core).\r\n\r\n## Reporting a Vulnerability\r\n\r\nSecurity issues and bugs should be reported privately to the Microsoft Security Response Center (MSRC), either by emailing [secure@microsoft.com](mailto:secure@microsoft.com) or via the portal at <https://msrc.microsoft.com>.\r\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your\r\noriginal message. Further information, including the MSRC PGP key, can be found in the [MSRC Report an Issue FAQ](https://www.microsoft.com/en-us/msrc/faqs-report-an-issue).\r\n\r\nReports via MSRC may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\nPlease do not open issues for anything you think might have a security implication.\r\n"
        },
        {
          "name": "THIRD-PARTY-NOTICES.TXT",
          "type": "blob",
          "size": 5.8935546875,
          "content": ".NET Core uses third-party libraries or other resources that may be\ndistributed under licenses different than the .NET Core software.\n\nIn the event that we accidentally failed to list a required notice, please\nbring it to our attention. Post an issue or email us:\n\n           dotnet@microsoft.com\n\nThe attached notices are provided for information only.\n\nLicense notice for Grove LCD RGB Backlight\n-------------------------------\n\nhttps://github.com/Seeed-Studio/Grove_LCD_RGB_Backlight/blob/master/License.txt\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 Seeed Technology Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\nLicense notice for raspi-gpio\n-------------------------------\n\nhttps://github.com/RPi-Distro/raspi-gpio/blob/master/LICENSE\n\nCopyright (c) 2015, Raspberry Pi Foundation\n\nAuthor: James Adams <james@raspberrypi.org>\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of raspi-gpio nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nLicense notice for CircuitPython driver for the IS31FL3731 charlieplex IC\n-------------------------------------------------------------------------\n\nhttps://github.com/adafruit/Adafruit_CircuitPython_IS31FL3731/blob/main/LICENSE\n\nThe MIT License (MIT)\n\nCopyright (c) 2016 Radomir Dopieralski\n\nLicense notice for LED matrices with the HT16K33 chip\n-----------------------------------------------------\n\nhttps://github.com/adafruit/Adafruit_CircuitPython_HT16K33\n\nThe MIT License (MIT)\n\nCopyright (c) 2016 Radomir Dopieralski & Tony DiCola for Adafruit Industries\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\nLicense notice for AIS parser (in NMEA-0183 binding)\n------------------------------------------------------\n\nMIT License\n\nCopyright (c) 2019 Yellow Feather Ltd\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 6.67578125,
          "content": "trigger:\n  batch: true\n  branches:\n    include:\n    - main\n    - release/3.0\n    \npr:\n  branches:\n    include:\n    - main\n    - release/3.0\n\nvariables:\n  - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:\n    - name: OfficialBuildId\n      value: $(Build.BuildNumber)\n    - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE\n      value: 1\n    - name: DOTNET_MULTILEVEL_LOOKUP\n      value: 0\n\nresources:\n  containers:\n  - container: LinuxContainer\n    image: mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-20210714125435-9b5bbc2\n\nstages:\n- stage: Build\n  jobs:\n  - job: Windows_NT\n    displayName: Windows Build\n    pool:\n      vmImage: windows-latest\n\n    strategy:\n      matrix:\n        Build_Release:\n          BuildConfiguration: Release\n        Build_Debug:\n          BuildConfiguration: Debug\n\n    steps:\n    - powershell: |\n        npm install -g markdownlint-cli\n        markdownlint -c  $(System.DefaultWorkingDirectory)/.markdownlint.json $(System.DefaultWorkingDirectory)\n      displayName: 'Execute Markdownlint'\n      condition: eq(variables['build.reason'], 'PullRequest')\n\n      # Hint: Add /maxCpuCount:1 to disable parellelization in build. Ensures all tests results are printed to the console\n    - script: build.cmd -ci\n        -configuration $(BuildConfiguration)\n        -prepareMachine\n        /p:BuildPackages=true\n      displayName: Build\n\n    - task: PublishBuildArtifacts@1\n      displayName: Publish Build logs\n      condition: always()\n      inputs:\n        pathToPublish: $(Build.SourcesDirectory)/artifacts/log/$(BuildConfiguration)/\n        artifactName: BuildLogs-Windows-$(BuildConfiguration)\n        artifactType: container\n\n    - task: CopyFiles@2\n      condition: eq(variables['BuildConfiguration'], 'Release')\n      inputs:\n        sourceFolder: $(Build.SourcesDirectory)/artifacts/packages/$(BuildConfiguration)/Shipping\n        targetFolder: $(Build.ArtifactStagingDirectory)/Packages\n\n    - task: PublishTestResults@2\n      inputs:\n        mergeTestResults: true\n\n    - publish: $(Build.ArtifactStagingDirectory)/Packages\n      displayName: Publish Build Artifacts\n      artifact: BuildPackages\n      condition: eq(variables['BuildConfiguration'], 'Release')\n\n    - publish: config\n      displayName: Publish Signing Scripts\n      artifact: config\n      condition: eq(variables['BuildConfiguration'], 'Release')\n\n  - job: Markdown_link_check\n    displayName: Markdown Link Check\n    pool:\n      vmImage: windows-latest\n\n    # Use Version 3.10.3 of markdown-link-check, as 3.11.0 is broken (completely ignores the json file)\n    steps:\n    - powershell: |\n        npm install -g markdown-link-check@3.10.3\n        ls -r *.md | % { markdown-link-check -v -c $(System.DefaultWorkingDirectory)\\.markdown-link-check.json $_.FullName; if (-Not $?) { throw \"One of the links is wrong\" } }\n      displayName: 'Execute markdown-link-check'\n      condition: eq(variables['build.reason'], 'PullRequest')\n\n  - job: Linux\n    displayName: Linux Build\n    container: LinuxContainer\n    pool:\n      vmImage: ubuntu-latest\n\n    strategy:\n      matrix:\n        Build_Release:\n          BuildConfiguration: Release\n        Build_Debug:\n          BuildConfiguration: Debug\n\n    steps:\n    - script: ./build.sh --ci\n        --configuration $(BuildConfiguration)\n        --prepareMachine\n      displayName: Build\n\n    - script: ./eng/common/msbuild.sh --warnaserror false --ci\n        eng/sendToHelix.proj\n        /t:Test\n        /p:TestOS=Unix\n        /p:Configuration=$(_BuildConfig)\n        /p:HelixBuild=$(Build.BuildNumber)\n        /bl:$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/SendToHelix.binlog\n#        /p:HelixAccessToken=$(HelixApiAccessToken)\n      displayName: Run Helix Tests\n      condition: eq(variables['build.reason'], 'PullRequest')\n#      env:\n#        SYSTEM_ACCESSTOKEN: $(System.AccessToken)\n\n    - task: PublishBuildArtifacts@1\n      displayName: Publish Build logs\n      condition: always()\n      inputs:\n        pathToPublish: $(Build.SourcesDirectory)/artifacts/log/$(BuildConfiguration)/\n        artifactName: BuildLogs-Linux-$(BuildConfiguration)\n        artifactType: container\n\n  - job: MacOS\n    displayName: MacOS Build\n    pool:\n      vmImage: macOS-latest\n\n    strategy:\n      matrix:\n        Build_Release:\n          BuildConfiguration: Release\n        Build_Debug:\n          BuildConfiguration: Debug\n\n    steps:\n    - script: ./build.sh --ci\n        --configuration $(BuildConfiguration)\n        --prepareMachine /maxCpuCount:1\n      displayName: Build\n\n    - task: PublishBuildArtifacts@1\n      displayName: Publish Build logs\n      condition: always()\n      inputs:\n        pathToPublish: $(Build.SourcesDirectory)/artifacts/log/$(BuildConfiguration)/\n        artifactName: BuildLogs-MacOS-$(BuildConfiguration)\n        artifactType: container\n\n- stage: CodeSign\n  condition: and(succeeded('Build'), not(eq(variables['build.reason'], 'PullRequest')))\n  jobs:\n  - deployment: CodeSign\n    displayName: Code Signing\n    pool:\n      vmImage: windows-latest\n    environment: Dotnet Iot\n    variables:\n    - group: SignClient\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - task: DotNetCoreCLI@2\n            inputs:\n              command: custom\n              custom: tool\n              arguments: install --tool-path . SignClient\n            displayName: Install SignTool tool\n\n          - pwsh: |\n              .\\SignClient \"Sign\" `\n              --baseDirectory \"$(Pipeline.Workspace)\\BuildPackages\" `\n              --input \"**/*.nupkg\" `\n              --config \"$(Pipeline.Workspace)\\config\\SignClient.json\" `\n              --filelist \"$(Pipeline.Workspace)\\config\\filelist.txt\" `\n              --user \"$(SignClientUser)\" `\n              --secret '$(SignClientSecret)' `\n              --name \"DotnetIoT\" `\n              --description \"dotnet/iot\" `\n              --descriptionUrl \"https://github.com/dotnet/iot\"\n            displayName: Sign packages\n              \n          - publish: $(Pipeline.Workspace)/BuildPackages\n            displayName: Publish Signed Packages\n            artifact: SignedPackages\n\n- stage: Publish\n  condition: and(succeeded('Build'), succeeded('CodeSign'), not(eq(variables['build.reason'], 'PullRequest')))\n  jobs:\n  - deployment: Publish\n    displayName: Publish signed packages\n    pool:\n      vmImage: windows-latest\n    environment: Dotnet Iot\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - task: NuGetAuthenticate@1\n            displayName: 'NuGet Authenticate'\n\n          - task: NuGetCommand@2\n            displayName: 'Publish to feed'\n            inputs:\n              command: push\n              publishVstsFeed: 'IoT/nightly_iot_builds'\n              packagesToPush: '$(Pipeline.Workspace)/SignedPackages/*.nupkg'\n"
        },
        {
          "name": "build.proj",
          "type": "blob",
          "size": 2.4638671875,
          "content": "<Project>\n\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.Build.Traversal\" />\n  \n  <PropertyGroup>\n    <BuildRestore Condition=\"'$(BuildRestore)'==''\">true</BuildRestore>\n    <ProductBuild Condition=\"'$(ProductBuild)'==''\">true</ProductBuild>\n    <ToolsBuild Condition=\"'$(ToolsBuild)'==''\">true</ToolsBuild>\n    <SampleBuild Condition=\"'$(SampleBuild)'==''\">true</SampleBuild>\n    <BuildTests Condition=\"'$(BuildTests)'==''\">true</BuildTests>\n    <BuildPackages Condition=\"'$(BuildPackages)'==''\">false</BuildPackages>\n  </PropertyGroup>\n\n  <ItemGroup>\n      <!-- Build product -->\n      <UnitTestProjects Include=\"$(MSBuildThisFileDirectory)src\\devices\\**\\*.Tests.csproj\" />\n      <_BuildProductProjects Include=\"$(MSBuildThisFileDirectory)src\\**\\*.csproj\" Exclude=\"@(_ExcludeBuildProductProjects);@(UnitTestProjects)\" />\n      \n      <ProjectReference Condition=\"'$(ProductBuild)' == 'true'\" Include=\"@(_BuildProductProjects)\" />\n\n      <!-- Build tools -->\n      <_BuildToolProjects Include=\"$(MSBuildThisFileDirectory)tools\\**\\*.csproj\" />\n\n      <ProjectReference Condition=\"'$(ToolsBuild)' == 'true'\" Include=\"@(_BuildToolProjects)\" />\n\n      <!-- Build samples -->\n      <_ExcludeBuildSampleProjects Include=\"$(MSBuildThisFileDirectory)samples\\serialport-arduino\\arduino-demo.csproj\" />\n      <_BuildSampleProjects Include=\"$(MSBuildThisFileDirectory)samples\\**\\*.csproj\" Exclude=\"@(_ExcludeBuildSampleProjects)\" />\n\n      <ProjectReference Condition=\"'$(SampleBuild)' == 'true'\" Include=\"@(_BuildSampleProjects)\" />\n\n      <!-- Build tests -->\n      <ProjectReference Condition=\"'$(BuildTests)' == 'true'\" Include=\"@(UnitTestProjects)\" Targets=\"VSTest\" />\n\n      <!-- Run Pack -->\n      <_ProjectsToPackage Include=\"$(MSBuildThisFileDirectory)src\\Iot.Device.Bindings\\Iot.Device.Bindings.csproj\" />\n      <_ProjectsToPackage Include=\"$(MSBuildThisFileDirectory)src\\System.Device.Gpio\\System.Device.Gpio.csproj\" />\n      <_ProjectsToPackage Include=\"$(MSBuildThisFileDirectory)src\\Iot.Device.Bindings.SkiaSharpAdapter\\Iot.Device.Bindings.SkiaSharpAdapter.csproj\" />\n      <_ProjectsToPackage Include=\"$(MSBuildThisFileDirectory)tools\\ArduinoCsCompiler\\Frontend\\Frontend.csproj\"/>\n\n      <ProjectReference Condition=\"'$(BuildPackages)' == 'true'\" Include=\"@(_ProjectsToPackage)\" Targets=\"Pack\" />\n  </ItemGroup>\n\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.Build.Traversal\" />\n\n  <!-- Undefine Pack target as this repo handles Pack during build based on a different property. -->\n  <Target Name=\"Pack\" />\n</Project>\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.6181640625,
          "content": "#!/usr/bin/env bash\n\nsource=\"${BASH_SOURCE[0]}\"\n\n# resolve $SOURCE until the file is no longer a symlink\nwhile [[ -h $source ]]; do\n  scriptroot=\"$( cd -P \"$( dirname \"$source\" )\" && pwd )\"\n  source=\"$(readlink \"$source\")\"\n\n  # if $source was a relative symlink, we need to resolve it relative to the path where the\n  # symlink file was located\n  [[ $source != /* ]] && source=\"$scriptroot/$source\"\ndone\n\nfor arg in \"$@\"\ndo\n  case \"$arg\" in\n  -pack)    _packArg=/p:BuildPackages=true\n            ;;\n  esac\ndone\n\nscriptroot=\"$( cd -P \"$( dirname \"$source\" )\" && pwd )\"\n\"$scriptroot/eng/common/build.sh\" --build --restore $@ $_packArg\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "eng",
          "type": "tree",
          "content": null
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.43359375,
          "content": "{\n  \"tools\": {\n    \"dotnet\": \"7.0.403\",\n    \"runtimes\": {\n      \"dotnet/x64\": [\n        \"6.0.16\"\n      ],\n      \"dotnet/arm64\": [\n        \"6.0.16\"\n      ]\n    }\n  },\n  \"sdk\": {\n    \"version\": \"7.0.403\",\n    \"allowPrerelease\": true,\n    \"rollForward\": \"major\"\n  },\n  \"msbuild-sdks\": {\n    \"Microsoft.DotNet.Arcade.Sdk\": \"7.0.0-beta.24266.2\",\n    \"Microsoft.DotNet.Helix.Sdk\": \"7.0.0-beta.24266.2\",\n    \"Microsoft.Build.Traversal\": \"3.1.6\"\n  }\n}\n"
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}