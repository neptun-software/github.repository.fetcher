{
  "metadata": {
    "timestamp": 1736710780732,
    "page": 251,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "chromelyapps/Chromely",
      "stars": 2978,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.759765625,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\ndist/\ntools/\ndebugpack.txt\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n**/Properties/launchSettings.json\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n*.DotSettings\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Typescript v1 declaration files\ntypings/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n"
        },
        {
          "name": "Chromely Project Templates.vsix",
          "type": "blob",
          "size": 110.8447265625,
          "content": null
        },
        {
          "name": "CreateNugetSpecs.ps1",
          "type": "blob",
          "size": 0.3515625,
          "content": "\nParam(\n    [string]$TemplatesPath = \"Chromely-Win\\Artifacts\"\n)\n\nGet-ChildItem $TemplatesPath -Filter *.nuspec | \nForeach-Object {\n\n    Write-Output $_.FullName\n\n    $content = Get-Content -Path $_.FullName\n    $content = $content -Replace '{version}', $packageVersion -Replace '{releaseNotes}', $releaseNotes\n    Set-Content -Path $_.Name -Value $content\n\n}\n\n"
        },
        {
          "name": "Demos",
          "type": "tree",
          "content": null
        },
        {
          "name": "Documents",
          "type": "tree",
          "content": null
        },
        {
          "name": "GetPackageVersion.ps1",
          "type": "blob",
          "size": 0.5625,
          "content": "\nParam(\n    [string]$ReleaseNotesFileName = \"ReleaseNotes.md\"\n)\n\nWrite-Output \"Get Target Package Version\"\n$semVer = \"\\* (?<semVer>\\d+\\.\\d+\\.\\d+(\\.\\d+)?) +(?<relNotes>.*)\"\n$lines = Get-Content $ReleaseNotesFileName\n$version = $lines | Select-String -Pattern $semVer | Select-Object -First 1\n$version -match $semVer\n$packageVersion = $Matches.semVer\n$releaseNotes = $Matches.relNotes\nWrite-Output \"The current version is: $packageVersion\"\nWrite-Output \"Release notes: $releaseNotes\"\nWrite-Host \"##vso[task.setvariable variable=PACKAGE_VERSION;]$packageVersion\"\nWrite-Output \"\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0556640625,
          "content": "MIT License\n\nCopyright (c) 2017 - 2019 Chromely Projects\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 0.501953125,
          "content": "License\n---\n* Chromely is MIT - licensed.\n* CefSharp is [BSD](https://opensource.org/licenses/BSD-3-Clause) licensed, so it can be used in both proprietary and free/open source applications. For the full details, see the [CefSharp LICENSE](https://github.com/cefsharp/CefSharp/blob/master/LICENSE) file.\n* CefGlue is licensed under MIT License and other license detailed as specified by CefGlue. For more info see [CefGlue License info](https://gitlab.com/xiliumhq/chromiumembedded/cefglue/-/blob/master/LICENSE)\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.9130859375,
          "content": "# ** Announcement ** - Chromely is no longer being maintained! \n\nFor those who would like to continue working on the project via forks or alternative approaches, please send mattkol the appropriate links and they will be added here.\n\nThanks to all the contributors over the years for making the platform a great learning place.\n\nThank you all.\n------------------------------------------------------------------------------------------------------------------------------------------\n<p align=\"center\"><img src=\"https://github.com/chromelyapps/Chromely/blob/master/nugets/chromely.ico?raw=true\" /></p>\n<h1 align=\"center\">Chromely</h1>\n\n<br />\n\nFor developers who are interested in [WebView2](https://docs.microsoft.com/en-us/microsoft-edge/webview2/) there is [EdgeSharp](https://github.com/edgesharp/EdgeSharp), an offshoot of Chromely.\n\nChromely is a lightweight alternative to <a href=\"https://github.com/ElectronNET/Electron.NET\">Electron.NET</a>, <a href=\"https://github.com/electron/electron\">Electron</a> for .NET/.NET Core developers.\n\nChromely is a .NET/.NET Core HTML5 Chromium desktop framework. It is focused on building apps based on [Xilium.CefGlue](https://gitlab.com/xiliumhq/chromiumembedded/cefglue), [CefSharp](https://github.com/chromelyapps/CefSharp) implementations of  embedded Chromium ([CEF](https://bitbucket.org/chromiumembedded/cef)) **without WinForms or WPF**, but can be extended to use WinForms or WPF. Chromely uses **Windows**, **Linux** and **MacOS** native GUI API as \"thin\" chromium hosts.\n\nWith Chromely you can build Single Page Application (SPA) HTML5 desktop apps with or without Node/npm. Building SPA apps using Blazor or javascript frameworks like Angular, React, Vue or similar is easy. You can use Visual Studio Code or any IDE you are familiar with as long as Chromely knows the entry html file from the compiled/bundled files. For more info please see - [Blazor-Demos](https://github.com/chromelyapps/demo-projects/tree/master/blazor) and [Chromely-Apps](https://github.com/chromelyapps/demo-projects/tree/master/angular-react-vue).\n\nOptions of communicating (IPC) with rendering process are via:\n\n- Generic Message Routing - more info @ [Generic Message Routing](https://github.com/chromelyapps/Chromely/blob/master/Documents/generic_message_routing.md).\n- Ajax HTTP/XHR -  more info @ [Custom Scheme Handling](https://github.com/chromelyapps/Chromely/blob/master/Documents/ajax_xhr_request_handling.md).\n\n##### If you like Chromely, please give it a star - it helps! #####\n\nHave a quick question? Wanna chat? Connect on  [![Join the chat at https://gitter.im/chromely_/Lobby](https://badges.gitter.im/chromely_/Lobby.svg)](https://gitter.im/chromely_/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nHave an app/project/tool using Chromely - [please share!](https://github.com/chromelyapps/Chromely/issues/63)\n\n### Platforms\nCross-platform -**Windows**, **Linux**, **MacOS**. Built on CEF, CefGlue, NET Standard 2.0, .NET Core 3.0, .NET Framework 4.61 and above.\n\n- Windows<sup>(1)</sup> 32-bit \n- Windows<sup>(1)</sup> 64-bit \n- Linux<sup>(2)</sup> 32-bit   \n- Linux<sup>(2)</sup> 64-bit   \n- MacOSX<sup>(3)</sup> 64-bit  \n- Linux ARM<sup>(4)</sup>  [Raspberry Pi](Documents/raspberrry_pi.md)      \n\n&nbsp;<sup>(1)</sup>&nbsp; Windows 7, Service Pack 1 and newer    \n&nbsp;<sup>(2)</sup>&nbsp; Ubuntu 16.04 and newer    \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(Mono currently not working)    \n&nbsp;<sup>(3)</sup>&nbsp; Tested on macOS Mojave 10.14.6  (Other versions will likely work too)     \n&nbsp;<sup>(4)</sup>&nbsp; i.e. Raspberry Pi 3+   (starting with v5.x)    \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(for v4.x - manual download of CEF builds for ARM required,  available on http://chromely.org/cefbuilds/index.html) \n\n[![Chromely.Core](http://img.shields.io/nuget/vpre/Chromely.Core.svg?style=flat&label=Chromely.Core)](https://www.nuget.org/packages/Chromely.Core)\n[![Chromely](http://img.shields.io/nuget/vpre/Chromely.svg?style=flat&label=Chromely)](https://www.nuget.org/packages/Chromely)\n[![Chromely.Owin](http://img.shields.io/nuget/vpre/Chromely.Owin.svg?style=flat&label=Chromely.Owin)](https://www.nuget.org/packages/Chromely.Owin)\n\n[![Chromely + Angular](https://img.shields.io/badge/Chromely%20Apps-Built%20with%20Angular%202%2B-green.svg)](https://github.com/chromelyapps/demo-projects/tree/master/angular-react-vue/ChromelyAngular)\n<br>[![Chromely + React](https://img.shields.io/badge/Chromely%20Apps-Built%20with%20React-green.svg)](https://github.com/chromelyapps/demo-projects/tree/master/angular-react-vue/ChromelyReact)\n<br>[![Chromely + Vue](https://img.shields.io/badge/Chromely%20Apps-Built%20with%20Vue-green.svg)](https://github.com/chromelyapps/demo-projects/tree/master/angular-react-vue/ChromelyVue) \n\n### Creating a Simple App\nFor more info see - [Getting Started](https://github.com/chromelyapps/Chromely/blob/master/Documents/getting_started.md) or [Wiki](https://github.com/chromelyapps/Chromely/wiki)\n\nA basic Chromely project requires:\n\n````csharp\nThreadApt.STA();\n\nAppBuilder\n    .Create(args)\n    .UseApp<ChromelyBasicApp>()\n    .Build()\n    .Run();\n````\n\n### Chromely Demos \nGet started with our [demos](https://github.com/chromelyapps/demo-projects). \n![](https://github.com/chromelyapps/Chromely/blob/master/Screenshots/chromely_screens_n3.gif)\n\n### References\n* CEF - https://bitbucket.org/chromiumembedded/cef\n* Xilium.CefGlue - https://gitlab.com/xiliumhq/chromiumembedded/cefglue\n* Chromium.AspNetCore.Bridge - https://github.com/amaitland/Chromium.AspNetCore.Bridge\n\nContributing\n---\nContributions are always welcome, via PRs, issues raised, or any other means. To become a dedicated contributor, please [contact the Chromely team](https://github.com/orgs/chromelyapps/people) or [raise an issue](https://github.com/chromelyapps/Chromely/issues) mentioning your intent.\n\nLicense\n---\nChromely is MIT licensed. For dependency licenses [please see](https://github.com/chromelyapps/Chromely/blob/master/LICENSE.md).\n\n"
        },
        {
          "name": "Screenshots",
          "type": "tree",
          "content": null
        },
        {
          "name": "nugets",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "src_5.0",
          "type": "tree",
          "content": null
        },
        {
          "name": "src_5.1",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}