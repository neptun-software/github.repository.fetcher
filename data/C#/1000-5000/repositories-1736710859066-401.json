{
  "metadata": {
    "timestamp": 1736710859066,
    "page": 401,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "OneGet/oneget",
      "stars": 2386,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".ci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.80859375,
          "content": "*.doc  diff=astextplain\r\n*.DOC diff=astextplain\r\n*.docx diff=astextplain\r\n*.DOCX diff=astextplain\r\n*.dot diff=astextplain\r\n*.DOT diff=astextplain\r\n*.pdf diff=astextplain\r\n*.PDF diff=astextplain\r\n*.rtf diff=astextplain\r\n*.RTF diff=astextplain\r\n\r\n*.jpg   binary\r\n*.png  binary\r\n*.gif  binary\r\n\r\n*.cs -text diff=csharp \r\n*.vb -text\r\n*.c -text\r\n*.cpp -text\r\n*.cxx -text\r\n*.h -text\r\n*.hxx -text\r\n*.py -text\r\n*.rb -text\r\n*.java -text\r\n*.html -text\r\n*.htm -text\r\n*.css -text\r\n*.scss -text\r\n*.sass -text\r\n*.less -text\r\n*.js -text\r\n*.lisp -text\r\n*.clj -text\r\n*.sql -text\r\n*.php -text\r\n*.lua -text\r\n*.m -text\r\n*.asm -text\r\n*.erl -text\r\n*.fs -text\r\n*.fsx -text\r\n*.hs -text\r\n*.tt -text\r\n\r\n*.csproj -text merge=union \r\n*.vbproj -text merge=union \r\n*.fsproj -text merge=union \r\n*.dbproj -text merge=union \r\n*.sln -text eol=crlf merge=union \r\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.8525390625,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n*buildchk*\n\n# User-specific files\n*.suo\n*.wixpdb\n*.msi\n*.user\n*.sln.docstates\nMessages.Designer.cs\n\nsrc/Microsoft.PackageManagement.CoreProviders/resources/Microsoft.PackageManagement.Providers.Resources.Messages.resx\nsrc/Microsoft.PackageManagement.MetaProvider.PowerShell/resources/Microsoft.PackageManagement.MetaProvider.PowerShell.Internal.Resources.Messages.resx\nsrc/Microsoft.PackageManagement.MsiProvider/resources/Microsoft.PackageManagement.Msi.Internal.Resources.Messages.resx\nsrc/Microsoft.PackageManagement.MsuProvider/resources/Microsoft.PackageManagement.Msu.Internal.Resources.Messages.resx\nsrc/Microsoft.PackageManagement/resources/Microsoft.PackageManagement.Internal.Resources.Messages.resx\nsrc/Microsoft.PowerShell.PackageManagement/resources/Microsoft.PowerShell.PackageManagement.Resources.Messages.resx\n\n# Build results\n\n[Dd]ebug/\n[Rr]elease/\nx64/\nbuild/\n[Bb]in/\n[Oo]bj/\n[Oo]ut/\n[Gg]en/\ndotnet-install.ps1\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n*_i.c\n*_p.c\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.log\n*.scc\n*.ffs_db\n\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.opensdf\n*.nupkg\noutput\nintermediate\nobj\n\n_Resharper*\n*.ReSharper\nipch\n*.InstallLog\npackages\n*.wixobj\n\n*.lock.json\n\n*.suo\n*.wixpdb\n*.msi\n*.user\n*.sdf\n*.opensdf\n*.nupkg\noutput/\nintermediate/\n_UpgradeReport_Files/\nobj/\nbin/\n_Resharper*\n*.ReSharper\nipch\n*.InstallLog\npackages\nScratch/snippets.txt\nScratch/test2.props\n/Powershell.Provider/test.ps1\n/psexamples\n/_unused_code.cs\n/mar25.txt\n.syncignore\n*.bak\n/AbstractDesign\nbuild-ps.cmd\nstreams.exe\n/attic/\npolicheck*\n*.orig\nOneGet.orig.sln\n*pingme*\n.nuget\nUpgradeLog.htm\nmanifests/\nxunit-test-results.xml\nsigned/\n.vs/\nlog.txt"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1611328125,
          "content": "[submodule \"src/Microsoft.PackageManagement.NuGetProvider\"]\n\tpath = src/Microsoft.PackageManagement.NuGetProvider\n\turl = https://github.com/OneGet/NuGetProvider.git\n"
        },
        {
          "name": ".nuget",
          "type": "tree",
          "content": null
        },
        {
          "name": ".pipelines",
          "type": "tree",
          "content": null
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.369140625,
          "content": "\nlanguage: cpp\n\ngit:\n  depth: 1000\n\nos:\n  - linux\n  - osx\nsudo: required\ndist: trusty\nosx_image: xcode9.4\nenv:\n    - api=v2\n    - api=v3\n\nmatrix:\n  allow_failures:\n    - os: osx\n  fast_finish: true\n\ninstall:\n  - export PATH=~/.dotnet:$PATH\n  - pushd tools\n  - chmod +x download.sh\n  - chmod +x travis.sh\n  - ./download.sh\n  - popd\n\nscript: \n  - ./tools/travis.sh $api\n\n\n\n\n\n\n\n\n\n\n"
        },
        {
          "name": "Changelog.md",
          "type": "blob",
          "size": 1.025390625,
          "content": "# Changelog\n## 1.4.8.1\n* Update PackageManagement's strong name signing\n\n## 1.4.8\n* Add NuGet as a source when generating nuget.config file for user in the NuGet Provider\n\n## 1.4.7\n* Update security protocol to use TLS 1.2\n* Remove catalog file\n\n## 1.4.6\n* Update `HelpInfoUri` to point to the latest content\n\n## 1.4.5\n* Bug fix for deadlock when getting parameters in an event\n\n## 1.4.4\n* Bug fix when installing modules from private feeds\n\n## 1.4.3\n* Another bug fix when registering repositories with PowerShellGet\n\n## 1.4.2\n* Bug fix for passing credentials from PowerShellGet when registering repositories\n\n## 1.4.1\n* Bug fix for using credential provider installed in Visual Studio\n\n## 1.4\n* Allow credential persistance for registering private repositories and finding or installing packages from those repositories\n\n## 1.3.2\n* Enable bootstrap on PSCore\n* Bug fix to run on .NET Core 3.0\n\n## 1.3.1\n\nTargets net452 and netstandard2.0 instead of net451, netcoreapp2.0, and netstandard1.6\n\n## Previous releases are not included in this Changelog"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.06640625,
          "content": "Copyright (c) Microsoft Corporation\nAll rights reserved.\n\nMIT License\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the Software), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "SignConfig .xml",
          "type": "blob",
          "size": 6.0849609375,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n\r\n<!-- \r\n      \r\n-->\r\n<SignConfigXML>\r\n  <!-- AnyCPU Release sign job -->\r\n  <job platform=\"AnyCPU\" configuration=\"Release\" dest=\"__OUTPATHROOT__\\signed\" jobname=\"PackgeManagement\" approvers=\"vigarg;gstolt\">\r\n    <file src=\"__INPATHROOT__\\artifacts\\PackageManagement.format.ps1xml\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\PackageManagement.format.ps1xml\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\PackageManagement.psd1\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\PackageManagement.psd1\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\PackageManagement.psm1\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\PackageManagement.psm1\" />   \r\n    <file src=\"__INPATHROOT__\\artifacts\\PackageManagement.Resources.psd1\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\PackageManagement.Resources.psd1\" /> \r\n    <file src=\"__INPATHROOT__\\artifacts\\PackageProviderFunctions.psm1\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\PackageProviderFunctions.psm1\" /> \r\n\r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.ArchiverProviders.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.ArchiverProviders.dll\" /> \r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.CoreProviders.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.CoreProviders.dll\" /> \r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.MetaProvider.PowerShell.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.MetaProvider.PowerShell.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.NuGetProvider.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.NuGetProvider.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\coreclr\\netstandard2.0\\Microsoft.PowerShell.PackageManagement.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\coreclr\\netstandard2.0\\Microsoft.PowerShell.PackageManagement.dll\" />\r\n\r\n    <file src=\"__INPATHROOT__\\artifacts\\DSCResources\\PackageManagementDscUtilities.psm1\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\DSCResources\\PackageManagementDscUtilities.psm1\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\DSCResources\\PackageManagementDscUtilities.strings.psd1\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\DSCResources\\PackageManagementDscUtilities.strings.psd1\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\DSCResources\\MSFT_PackageManagement\\MSFT_PackageManagement.psm1\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\DSCResources\\MSFT_PackageManagement\\MSFT_PackageManagement.psm1\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\DSCResources\\MSFT_PackageManagement\\MSFT_PackageManagement.schema.mof\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\DSCResources\\MSFT_PackageManagement\\MSFT_PackageManagement.schema.mof\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\DSCResources\\MSFT_PackageManagement\\MSFT_PackageManagement.strings.psd1\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\DSCResources\\MSFT_PackageManagement\\MSFT_PackageManagement.strings.psd1\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\DSCResources\\MSFT_PackageManagementSource\\MSFT_PackageManagementSource.psm1\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\DSCResources\\MSFT_PackageManagementSource\\MSFT_PackageManagementSource.psm1\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\DSCResources\\MSFT_PackageManagementSource\\MSFT_PackageManagementSource.schema.mof\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\DSCResources\\MSFT_PackageManagementSource\\MSFT_PackageManagementSource.schema.mof\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\DSCResources\\MSFT_PackageManagementSource\\MSFT_PackageManagementSource.strings.psd1\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\DSCResources\\MSFT_PackageManagementSource\\MSFT_PackageManagementSource.strings.psd1\" />\r\n\r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\fullclr\\Microsoft.PackageManagement.ArchiverProviders.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\fullclr\\Microsoft.PackageManagement.ArchiverProviders.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\fullclr\\Microsoft.PackageManagement.CoreProviders.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\fullclr\\Microsoft.PackageManagement.CoreProviders.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\fullclr\\Microsoft.PackageManagement.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\fullclr\\Microsoft.PackageManagement.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\fullclr\\Microsoft.PackageManagement.MetaProvider.PowerShell.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\fullclr\\Microsoft.PackageManagement.MetaProvider.PowerShell.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\fullclr\\Microsoft.PackageManagement.MsiProvider.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\fullclr\\Microsoft.PackageManagement.MsiProvider.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\fullclr\\Microsoft.PackageManagement.MsuProvider.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\fullclr\\Microsoft.PackageManagement.MsuProvider.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\fullclr\\Microsoft.PackageManagement.NuGetProvider.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\fullclr\\Microsoft.PackageManagement.NuGetProvider.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\fullclr\\Microsoft.PowerShell.PackageManagement.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\fullclr\\Microsoft.PowerShell.PackageManagement.dll\" />\r\n  </job>\r\n</SignConfigXML>"
        },
        {
          "name": "SignConfig.xml",
          "type": "blob",
          "size": 6.0849609375,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n\r\n<!-- \r\n      \r\n-->\r\n<SignConfigXML>\r\n  <!-- AnyCPU Release sign job -->\r\n  <job platform=\"AnyCPU\" configuration=\"Release\" dest=\"__OUTPATHROOT__\\signed\" jobname=\"PackgeManagement\" approvers=\"vigarg;gstolt\">\r\n    <file src=\"__INPATHROOT__\\artifacts\\PackageManagement.format.ps1xml\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\PackageManagement.format.ps1xml\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\PackageManagement.psd1\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\PackageManagement.psd1\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\PackageManagement.psm1\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\PackageManagement.psm1\" />   \r\n    <file src=\"__INPATHROOT__\\artifacts\\PackageManagement.Resources.psd1\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\PackageManagement.Resources.psd1\" /> \r\n    <file src=\"__INPATHROOT__\\artifacts\\PackageProviderFunctions.psm1\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\PackageProviderFunctions.psm1\" /> \r\n\r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.ArchiverProviders.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.ArchiverProviders.dll\" /> \r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.CoreProviders.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.CoreProviders.dll\" /> \r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.MetaProvider.PowerShell.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.MetaProvider.PowerShell.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.NuGetProvider.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.NuGetProvider.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\coreclr\\netstandard2.0\\Microsoft.PowerShell.PackageManagement.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\coreclr\\netstandard2.0\\Microsoft.PowerShell.PackageManagement.dll\" />\r\n\r\n    <file src=\"__INPATHROOT__\\artifacts\\DSCResources\\PackageManagementDscUtilities.psm1\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\DSCResources\\PackageManagementDscUtilities.psm1\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\DSCResources\\PackageManagementDscUtilities.strings.psd1\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\DSCResources\\PackageManagementDscUtilities.strings.psd1\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\DSCResources\\MSFT_PackageManagement\\MSFT_PackageManagement.psm1\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\DSCResources\\MSFT_PackageManagement\\MSFT_PackageManagement.psm1\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\DSCResources\\MSFT_PackageManagement\\MSFT_PackageManagement.schema.mof\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\DSCResources\\MSFT_PackageManagement\\MSFT_PackageManagement.schema.mof\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\DSCResources\\MSFT_PackageManagement\\MSFT_PackageManagement.strings.psd1\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\DSCResources\\MSFT_PackageManagement\\MSFT_PackageManagement.strings.psd1\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\DSCResources\\MSFT_PackageManagementSource\\MSFT_PackageManagementSource.psm1\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\DSCResources\\MSFT_PackageManagementSource\\MSFT_PackageManagementSource.psm1\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\DSCResources\\MSFT_PackageManagementSource\\MSFT_PackageManagementSource.schema.mof\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\DSCResources\\MSFT_PackageManagementSource\\MSFT_PackageManagementSource.schema.mof\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\DSCResources\\MSFT_PackageManagementSource\\MSFT_PackageManagementSource.strings.psd1\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\DSCResources\\MSFT_PackageManagementSource\\MSFT_PackageManagementSource.strings.psd1\" />\r\n\r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\fullclr\\Microsoft.PackageManagement.ArchiverProviders.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\fullclr\\Microsoft.PackageManagement.ArchiverProviders.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\fullclr\\Microsoft.PackageManagement.CoreProviders.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\fullclr\\Microsoft.PackageManagement.CoreProviders.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\fullclr\\Microsoft.PackageManagement.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\fullclr\\Microsoft.PackageManagement.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\fullclr\\Microsoft.PackageManagement.MetaProvider.PowerShell.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\fullclr\\Microsoft.PackageManagement.MetaProvider.PowerShell.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\fullclr\\Microsoft.PackageManagement.MsiProvider.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\fullclr\\Microsoft.PackageManagement.MsiProvider.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\fullclr\\Microsoft.PackageManagement.MsuProvider.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\fullclr\\Microsoft.PackageManagement.MsuProvider.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\fullclr\\Microsoft.PackageManagement.NuGetProvider.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\fullclr\\Microsoft.PackageManagement.NuGetProvider.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\StrongNameSigned\\fullclr\\Microsoft.PowerShell.PackageManagement.dll\" signType=\"AuthenticodeFormer\" dest=\"__OUTPATHROOT__\\fullclr\\Microsoft.PowerShell.PackageManagement.dll\" />\r\n  </job>\r\n</SignConfigXML>"
        },
        {
          "name": "StrongNameSignConfig.xml",
          "type": "blob",
          "size": 3.5087890625,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n\r\n<!-- \r\n      \r\n-->\r\n<SignConfigXML>\r\n  <!-- AnyCPU Release sign job -->\r\n  <job platform=\"AnyCPU\" configuration=\"Release\" dest=\"__OUTPATHROOT__\\signed\" jobname=\"PackageManagement\" approvers=\"vigarg;gstolt\">\r\n\r\n    <file src=\"__INPATHROOT__\\artifacts\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.ArchiverProviders.dll\" signType=\"StrongName\" dest=\"__OUTPATHROOT__\\artifacts\\StrongNameSigned\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.ArchiverProviders.dll\" /> \r\n    <file src=\"__INPATHROOT__\\artifacts\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.CoreProviders.dll\" signType=\"StrongName\" dest=\"__OUTPATHROOT__\\artifacts\\StrongNameSigned\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.CoreProviders.dll\" /> \r\n    <file src=\"__INPATHROOT__\\artifacts\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.dll\" signType=\"StrongName\" dest=\"__OUTPATHROOT__\\artifacts\\StrongNameSigned\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.MetaProvider.PowerShell.dll\" signType=\"StrongName\" dest=\"__OUTPATHROOT__\\artifacts\\StrongNameSigned\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.MetaProvider.PowerShell.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.NuGetProvider.dll\" signType=\"StrongName\" dest=\"__OUTPATHROOT__\\artifacts\\StrongNameSigned\\coreclr\\netstandard2.0\\Microsoft.PackageManagement.NuGetProvider.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\coreclr\\netstandard2.0\\Microsoft.PowerShell.PackageManagement.dll\" signType=\"StrongName\" dest=\"__OUTPATHROOT__\\artifacts\\StrongNameSigned\\coreclr\\netstandard2.0\\Microsoft.PowerShell.PackageManagement.dll\" />\r\n\r\n    <file src=\"__INPATHROOT__\\artifacts\\fullclr\\Microsoft.PackageManagement.ArchiverProviders.dll\" signType=\"StrongName\" dest=\"__OUTPATHROOT__\\artifacts\\StrongNameSigned\\fullclr\\Microsoft.PackageManagement.ArchiverProviders.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\fullclr\\Microsoft.PackageManagement.CoreProviders.dll\" signType=\"StrongName\" dest=\"__OUTPATHROOT__\\artifacts\\StrongNameSigned\\fullclr\\Microsoft.PackageManagement.CoreProviders.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\fullclr\\Microsoft.PackageManagement.dll\" signType=\"StrongName\" dest=\"__OUTPATHROOT__\\artifacts\\StrongNameSigned\\fullclr\\Microsoft.PackageManagement.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\fullclr\\Microsoft.PackageManagement.MetaProvider.PowerShell.dll\" signType=\"StrongName\" dest=\"__OUTPATHROOT__\\artifacts\\StrongNameSigned\\fullclr\\Microsoft.PackageManagement.MetaProvider.PowerShell.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\fullclr\\Microsoft.PackageManagement.MsiProvider.dll\" signType=\"StrongName\" dest=\"__OUTPATHROOT__\\artifacts\\StrongNameSigned\\fullclr\\Microsoft.PackageManagement.MsiProvider.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\fullclr\\Microsoft.PackageManagement.MsuProvider.dll\" signType=\"StrongName\" dest=\"__OUTPATHROOT__\\artifacts\\StrongNameSigned\\fullclr\\Microsoft.PackageManagement.MsuProvider.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\fullclr\\Microsoft.PackageManagement.NuGetProvider.dll\" signType=\"StrongName\" dest=\"__OUTPATHROOT__\\artifacts\\StrongNameSigned\\fullclr\\Microsoft.PackageManagement.NuGetProvider.dll\" />\r\n    <file src=\"__INPATHROOT__\\artifacts\\fullclr\\Microsoft.PowerShell.PackageManagement.dll\" signType=\"StrongName\" dest=\"__OUTPATHROOT__\\artifacts\\StrongNameSigned\\fullclr\\Microsoft.PowerShell.PackageManagement.dll\" />\r\n  </job>\r\n</SignConfigXML>"
        },
        {
          "name": "Test",
          "type": "tree",
          "content": null
        },
        {
          "name": "UpdatePackage.psm1",
          "type": "blob",
          "size": 2.34375,
          "content": "﻿function Update-Package\n{\n    [CmdletBinding()]\n    Param\n    (\n        # Name of the package\n        [Parameter(Mandatory=$true,\n                   Position=0)]\n        [string[]]\n        $Name,\n\n        # Provider associated with the package\n        [Alias(\"Provider\")]\n        [string]\n        $ProviderName\n    )\n\n    DynamicParam {\n        $paramDictionary = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary\n\n        # Get the required dynamic parameter for install\n        if (-not ([string]::IsNullOrWhiteSpace($ProviderName)))\n        {\n            $providerObject = Get-PackageProvider -Name $ProviderName | Select -First 1\n            \n            if ($null -ne $providerObject -and ($providerObject.DynamicOptions -ne $null -and $providerObject.DynamicOptions.Count -gt 0))\n            {\n                foreach ($option in $providerObject.DynamicOptions)\n                {\n                    $optionalAttribute = New-Object System.Management.Automation.ParameterAttribute\n                    $optionalAttribute.Mandatory = $option.IsRequired\n\n                    $attributes = New-Object System.Collections.ObjectModel.Collection[System.Attribute]\n                    $attributes.Add($optionalAttribute)\n\n                    $param = New-Object System.Management.Automation.RuntimeDefinedParameter($option.Name, [System.Object], $attributes)\n\n                    $paramDictionary.Add($option.Name, $param)\n                }\n            }    \n        }\n\n        return $paramDictionary\n    }\n\n    Process {\n        $packagesToBeUpdated = Get-Package @PSBoundParameters\n\n        foreach ($package in $packagesToBeUpdated)\n        {\n            $possibleNewPackage = Find-Package -Name $package.Name -ProviderName $package.ProviderName\n            $possibleNewVersion = [version]$possibleNewPackage.Version\n            $version = [version]$package.Version\n\n            if ($possibleNewVersion -gt $version)\n            {\n                Write-Verbose \"Need to update since $possibleNewVersion is found for $($package.Name) which has version $($package.Version)\"    \n                $PSBoundParameters[\"RequiredVersion\"] = $possibleNewVersion\n                Install-Package @PSBoundParameters\n            }\n            else\n            {\n                Write-Verbose \"$($package.Name) has the latest version $possibleNewVersion\"\n            } \n        }\n    }\n}"
        },
        {
          "name": "assembly-version.cs",
          "type": "blob",
          "size": 0.912109375,
          "content": "// \r\n//  Copyright (c) Microsoft Corporation. All rights reserved. \r\n//  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n//  you may not use this file except in compliance with the License.\r\n//  You may obtain a copy of the License at\r\n//  http://www.apache.org/licenses/LICENSE-2.0\r\n//  \r\n//  Unless required by applicable law or agreed to in writing, software\r\n//  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n//  See the License for the specific language governing permissions and\r\n//  limitations under the License.\r\n\r\nusing System.Reflection;\r\n\r\n// Version information for an assembly consists of the following four values:\r\n//\r\n//      Major Version\r\n//      Minor Version \r\n//      Build Number\r\n//      Revision\r\n[assembly: AssemblyVersion(\"1.16.12.45267\")]\r\n[assembly: AssemblyFileVersion(\"1.16.12.45267\")]\r\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.05078125,
          "content": "{\n    \"sdk\": {\n        \"version\": \"8.0.202\"\n    }\n}\n"
        },
        {
          "name": "nuget.config",
          "type": "blob",
          "size": 0.4208984375,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <clear />\n    <!-- Please verify that the feed below exists for your project and replace placeholder values. You may also use another feed of your choice. -->\n    <add key=\"InternalPkgMgmtFeed\" value=\"https://pkgs.dev.azure.com/powershell-rel/PackageManagement/_packaging/InternalPkgMgmtFeed/nuget/v3/index.json\" />\n  </packageSources>\n</configuration>\n"
        },
        {
          "name": "owners.txt",
          "type": "blob",
          "size": 0.837890625,
          "content": "; this is an example owners.txt file which can be added at any level in the repo to indicate owners of a subtree\n; this file is used by ownership enforcer to determine reviewers to add to a pull request\n; you can add comments using ; as prefix\n; introduce each owner in a separate line with his/her alias (not email address)\n; prefixing an alias with * means that the owner will not be automatically added as a reviewer to pull requests to reduce noise, but can still be manually added and can sign off if necessary\n; to learn more you can read https://microsoft.sharepoint.com/teams/WAG/EngSys/EngPipeline/cdp/SitePages/Configure%20checkin%20gates.aspx\n; if you do not wish to use this feature then you can delete this file\n; example (pretend the following lines are not commented):\n;\n; developer1\n; developer2\n; *developer3\nannavied\namericks\nadityap\n*slee\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 25.796875,
          "content": "## Announcement \r\n\r\nThis module is currently not in development. We are no longer accepting any pull requests to this repository. OneGet is in a stable state and is expected to recieve only high-priority bug fixes from Microsoft in the future.\r\n\r\nAlternatively, we would suggest looking at the community [AnyPackage](https://github.com/anypackage/anypackage) project as an actively developed replacement for OneGet.\r\n\r\nIf you have a question, or are seeing an unexpected behavior from this module please open up an issue in this repository.\r\n\r\nThe PowerShell/PowerShellGet repository is actively in development as the new PowerShell package manager.\r\n\r\n### Build Status - Master\r\n\r\n| AppVeyor (Windows)       | Travis CI (Linux / macOS) |\r\n|--------------------------|--------------------------|\r\n| [![av-image][]][av-site] | [![tv-image][]][tv-site] |\r\n\r\n\r\n[tv-image]: https://travis-ci.org/OneGet/oneget.svg?branch=master\r\n[tv-site]: https://travis-ci.org/OneGet/oneget/branches\r\n[av-image]: https://ci.appveyor.com/api/projects/status/0q1frhm84pp83syh/branch/master?svg=true\r\n[av-site]: https://ci.appveyor.com/project/jianyunt/oneget\r\n\r\n### Build Status - Nightly Builds\r\n|AppVeyor (Windows)                  |\r\n|------------------------------------|\r\n| [![av-nightimage][]][av-nightsite] |\r\n\r\n[av-nightimage]: https://ci.appveyor.com/api/projects/status/87d07mj8s9eyhfst/branch/master?svg=true\r\n[av-nightsite]:https://ci.appveyor.com/project/jianyunt/oneget-weumx\r\n\r\n# PackageManagement (aka OneGet)\r\n\r\n\r\n### What's New\r\nPackageManagement is supported in Windows, Linux and MacOS now.\r\nWe periodically make binary drops to [PowerShellCore][pscore],\r\nmeaning PackageManagement is a part of PowerShell Core releases.\r\nAlso PackageManagement and PowershellGet Modules are regularly updated in [PowerShellGallery.com](https://www.PowerShellGallery.com).\r\n\r\nThus check out the latest version from PowerShellGallery.com.\r\n\r\n[pscore]: https://github.com/PowerShell/PowerShell\r\n\r\n### Get Started!\r\n\r\nOneGet is shipped in Win10 and Windows Server 2016! For downlevel OS, you can install the [WMF 5.1][WMF5RTM] and then start using the OneGet.\r\n\r\nYou can follow [@PSOneGet on Twitter](http://twitter.com/PSOneGet) to be notified of every new build.\r\n\r\n\r\n* Learn how to [use the PowerShell OneGet cmdlets](https://github.com/OneGet/oneget/wiki/cmdlets) and [try some samples](https://github.com/PowerShell/PowerShell-Docs/blob/staging/wmf/5.0/oneget_cmdlets.md)\r\n* Read our [General Q and A](https://github.com/OneGet/oneget/wiki/Q-and-A)\r\n* Read [Writing OneGet Provider Guidelines](./docs/writepowershellbasedprovider.md)\r\n* Learn about the [8 Laws of Software Installation](https://github.com/OneGet/oneget/wiki/8-Laws-of-Software-Installation)\r\n* [General Troubleshooting](https://github.com/OneGet/oneget/wiki/General-Troubleshooting)\r\n* Check out more help information [in our wiki page](https://github.com/oneget/oneget/wiki)\r\n\r\n\r\n[WMF5RTM]: https://aka.ms/wmf5download\r\n\r\n### What is PackageManagement (OneGet)?\r\n\r\nOneGet is a Windows package manager, renamed as PackageManagement. It is a unified interface to package management systems and aims to make Software Discovery, Installation, and Inventory (SDII) work via a common set of cmdlets (and eventually a set of APIs). Regardless of the installation technology underneath, users can use these common cmdlets to install/uninstall packages, add/remove/query package repositories, and query a system for the software installed.\r\n\r\nWith OneGet, you can\r\n* Manage a list of software repositories in which packages can be searched, acquired, and installed\r\n* Search and filter your repositories to find the packages you need\r\n* Seamlessly install and uninstall packages from one or more repositories with a single PowerShell command\r\n\r\n#### PackageManagement Architecture\r\n\r\n![Image](./assets/OneGetArchitecture.PNG?raw=true)\r\n\r\n<br/>\r\n\r\n\r\n### Let's Try it\r\n\r\n#### Prerequisites\r\n - Windows 10, Windows Server 2016, or down-level Windows OS + WMF5\r\n - Linux or Mac with the [PowerShellCore][pscore]\r\n\r\n\r\n#### Working with PowerShellGallery.com\r\n\r\n ```powershell\r\n # 1.check available providers\r\n\r\n PS E:\\> get-packageprovider\r\n\r\nName                     Version          DynamicOptions\r\n----                     -------          --------------\r\nmsi                      3.0.0.0          AdditionalArguments\r\nmsu                      3.0.0.0\r\nPowerShellGet            1.1.0.0          PackageManagementProvider, Type...\r\nPrograms                 3.0.0.0          IncludeWindowsInstaller,...\r\n\r\n# 2. find a module from the PowerShell gallery, for example, xjea\r\n\r\nPS E:\\> find-module xjea\r\n\r\nNuGet provider is required to continue\r\nPowerShellGet requires NuGet provider version '2.8.5.201' or newer to interact with NuGet-based repositories. The NuGet provider must be available in 'C:\\Program\r\nFiles\\PackageManagement\\ProviderAssemblies' or 'C:\\Users\\jianyunt\\AppData\\Local\\PackageManagement\\ProviderAssemblies'. You can also install the NuGet provider by\r\nrunning 'Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force'. Do you want PowerShellGet to install and import the NuGet provider now?\r\n[Y] Yes  [N] No  [S] Suspend  [?] Help (default is \"Y\"): y\r\n\r\nVersion    Name           Repository           Description\r\n-------    ----           ----------           -----------\r\n0.3.0.0    xJea           PSGallery             Module with DSC Resources for Just Enough...\r\n\r\n# 3. install a module from the PowerShell gallery\r\n\r\nPS E:\\> Install-Module xjea\r\n\r\nUntrusted repository\r\nYou are installing the modules from an untrusted repository. If you trust this repository, change its InstallationPolicy value by running the Set-PSRepository cmdlet. Are\r\nyou sure you want to install the modules from 'gallery'?\r\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is \"N\"): y\r\n\r\n# 4. Find out if a module is installed\r\n\r\nPS E:\\> Get-InstalledModule -name xjea\r\n\r\nVersion    Name        Repository      Description\r\n-------    ----        ----------       -----------\r\n0.3.0.0    xJea        gallery          Module with DSC Resources for Just Enough Admin (JEA)..\r\n\r\n# 5. Uninstall a module\r\n\r\nPS E:\\> Uninstall-Module -name xjea\r\n```\r\n\r\n#### Working with http://www.NuGet.org repository\r\n\r\n```powershell\r\n\r\n# find a package from the nuget repository\r\n\r\nPS E:\\> find-package -name jquery -provider Nuget -Source https://www.nuget.org/api/v2\r\n\r\nName           Version          Source           Summary\r\n----           -------          ------           -------\r\njQuery          3.1.1            nuget.org        jQuery is a new kind of JavaScript Library....\r\n\r\n# install a package from NuGet repository\r\n\r\nPS E:\\> install-package -name jquery -provider Nuget -Source https://www.nuget.org/api/v2\r\n\r\nThe package(s) come(s) from a package source that is not marked as trusted.\r\nAre you sure you want to install software from 'nuget.org'?\r\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is \"N\"): y\r\n\r\nName             Version          Source           Summary\r\n----             -------          ------           -------\r\njQuery           3.1.1            nuget.org        jQuery is a new kind of JavaScript Library....\r\n\r\n# Uninstall the package\r\n\r\nPS E:\\> uninstall-package jquery\r\n\r\nName            Version          Source           Summary\r\n----            -------          ------           -------\r\njQuery          3.1.1            C:\\Program Fi... jQuery is a new kind of JavaScript Library....\r\n\r\n# Register a package Source\r\n\r\nPS E:\\> Register-PackageSource -name test -ProviderName NuGet -Location https://www.nuget.org/api/v2\r\n\r\nName             ProviderName     IsTrusted  Location\r\n----              ------------     ---------  --------\r\ntest              NuGet            False      https://www.nuget.org/api/v2\r\n\r\n# find a package from the registered package Source\r\n\r\nPS E:\\> find-package -Source test -name jquery\r\n\r\nName                Version          Source           Summary\r\n----                -------          ------           -------\r\njQuery              3.1.1            test             jQuery is a new kind of JavaScript Library....\r\n```\r\n\r\n### Try the latest PackageManagement (OneGet)\r\n\r\nYou can run `install-module PowerShellGet` to install the latest PackageManagment and PowerShellGet from [PowerShellGallery](https://www.powershellgallery.com).\r\n\r\n### Downloading the Source Code\r\nOneGet repo has a number of other repositories embeded as submodules. To make things easy, you can just clone recursively:\r\n```powershell\r\ngit clone --recursive https://github.com/OneGet/oneget.git\r\n```\r\nIf you already cloned but forgot to use `--recursive`, you can update submodules manually:\r\n```powershell\r\ngit submodule update --init\r\n```\r\n\r\n### Building the code\r\n\r\n``` powershell\r\n# After cloning this repository, go to the project folder:\r\n> cd oneget\r\n> cd src\r\n\r\n# download the dotnet cli tool\r\n> .\\bootstrap.ps1\r\n\r\n# building OneGet for fullclr\r\n> .\\build.ps1 net452\r\n\r\n#building OneGet for coreclr\r\n> .\\build.ps1 netstandard2.0\r\n```\r\n\r\nIf successfully built above, you should be able to see a folder:\r\n`oneget\\src\\out\\PackageManagement\\` whose layout looks like below:\r\n\r\n * `coreclr`\r\n * `fullclr`\r\n * `PackageManagement.format.ps1xml`\r\n * `PackageManagement.psd1`\r\n * `PackageManagement.psm1`\r\n * `PackageProviderFunctions.psm1`\r\n\r\n### Deploying it\r\n\r\n#### Generate PackageManagement.nupkg\r\nWe can use `publish-module` to create a .nupkg. Assuming you want to put the generated .nupkg in c:\\test folder.  You can do something like below. Note I cloned to E:\\OneGet folder.\r\n ```powershell\r\ncd E:\\OneGet\\oneget\\src\\out\\PackageManagement\r\nRegister-PSRepository -name local -SourceLocation c:\\test\r\nGet-PSRepository\r\nPublish-Module -path .\\ -Repository local\r\nPS E:\\OneGet\\oneget\\src\\out\\PackageManagement> dir c:\\test\\PackageManagement*.nupkg\r\n\r\n    Directory: C:\\test\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\n-a----        11/4/2016   4:15 PM        1626335 PackageManagement.1.1.0.0.nupkg\r\n```\r\nThen you can do\r\n```powershell\r\nfind-module -Repository local\r\ninstall-module -Repository local -Name PackageManagement\r\n```\r\nto get the newly built PackageManagement on your machines.\r\n\r\n#### Manual copy\r\nYou can also manually copy the OneGet binaries. For example, copy the entire `E:\\OneGet\\oneget\\src\\out\\PackageManagement` folder you just built to your\r\n`$env:Programfiles\\WindowsPowerShell\\Modules\\PackageManagement\\#onegetversion\\`\r\n\r\nIf you are running within PowerShellCore,\r\nsimilarily drop the PackageManagement folder to your `$env:Programfiles\\PowerShell\\#psversion\\Modules\\PackageManagement\\#onegetversion\\`,\r\n\r\nor copy to `/opt/microsoft/powershell/<psversion>/Modules/PackageManagement/#onegetversion/`,\r\nif you are running on Linux or Mac.\r\n\r\n**Note**: OneGet version number can be found from the PackageManagement.psd1 file.\r\n\r\n### Testing the code\r\n```PowerShell\r\n> cd oneget\r\n> cd Test\r\n> & '.\\run-tests.ps1' fullclr\r\n> & '.\\run-tests.ps1' coreclr\r\n```\r\n\r\n### Understanding the OneGet code repository\r\n\r\nFeel free to clone the repository and check out the different branches:\r\n\r\n#### Branches\r\n\r\nThere are currently three branches in the git repository:\r\n\r\n| Branch/Tag | Purpose |\r\n| ------- | ---------------------------|\r\n|`master`|  The `master` branch is where the daily builds of OneGet will be made from.  |\r\n|`WMF5_RTM`|  The `WMF5_RTM` tag is to mark the WMF 5.0 RTM release point. |\r\n|`TP5`|  The `TP5` tag is to mark the TP5 release point. |\r\n|`wip`|  The `wip` branch is where the current **unstable** and **not-likely-working** coding is taking place. This lets you see where I'm at before stuff actually hits the master branch. Fun to read, but really, the wild-west of code branches. |\r\n\r\n\r\n### Team Members\r\n\r\n| Branch | Purpose |\r\n| ------- | ---------------------------|\r\n|@sydneyhsmith |  Program Manager on OneGet.  |\r\n|@jianyunt|  Engineer owner on OneGet & its providers. |\r\n|@edyoung|  Our engineer manager on OneGet.   |\r\n|@alerickson|  Engineer on the team.   |\r\n\r\n[Follow us on Twitter](https://twitter.com/PSOneGet)\r\n\r\n### More Resources\r\n- [NuGet Provider](https://github.com/OneGet/NuGetProvider)\r\n- [PowerShellGet Provider](https://github.com/PowerShell/PowerShellGet)\r\n- [MicrosoftDockerProvider](https://github.com/OneGet/MicrosoftDockerProvider)\r\n- [NanoServerPackage](https://github.com/OneGet/NanoServerPackage)\r\n- Check out OneGet providers from our Community such as Gistprovider, OfficeProvider, 0Install and more from powershellgallery.com or simply run [Find-PackageProvider cmdlet](https://msdn.microsoft.com/en-us/powershell/gallery/psget/oneget/packagemanagement_cmdlets)\r\n- Want to write a provider? Check out our [sample provider](https://www.powershellgallery.com/packages/MyAlbum/)\r\n- Want to download packages from http://Chocolatey.org, try out [ChocolateyGet provider](https://www.powershellgallery.com/packages/ChocolateyGet)\r\n- Want to control which packages to use and where to get them from based on your organization? Check out [PSL provider](https://github.com/OneGet/PSLProvider)\r\n=======\r\n## Announcement \r\n\r\nThis module is currently not in development. We are no longer accepting any pull requests to this repository. OneGet is in a stable state and is expected to recieve only high-priority bug fixes from Microsoft in the future.\r\n\r\nIf you have a question, or are seeing an unexpected behavior from this module please open up an issue in this repository.\r\n\r\nThe PowerShell/PowerShellGet repository is actively in development as the new PowerShell package manager.\r\n\r\n### Build Status - Master\r\n\r\n| AppVeyor (Windows)       | Travis CI (Linux / macOS) |\r\n|--------------------------|--------------------------|\r\n| [![av-image][]][av-site] | [![tv-image][]][tv-site] |\r\n\r\n\r\n[tv-image]: https://travis-ci.org/OneGet/oneget.svg?branch=master\r\n[tv-site]: https://travis-ci.org/OneGet/oneget/branches\r\n[av-image]: https://ci.appveyor.com/api/projects/status/0q1frhm84pp83syh/branch/master?svg=true\r\n[av-site]: https://ci.appveyor.com/project/jianyunt/oneget\r\n\r\n### Build Status - Nightly Builds\r\n|AppVeyor (Windows)                  |\r\n|------------------------------------|\r\n| [![av-nightimage][]][av-nightsite] |\r\n\r\n[av-nightimage]: https://ci.appveyor.com/api/projects/status/87d07mj8s9eyhfst/branch/master?svg=true\r\n[av-nightsite]:https://ci.appveyor.com/project/jianyunt/oneget-weumx\r\n\r\n# PackageManagement (aka OneGet)\r\n\r\n\r\n### What's New\r\nPackageManagement is supported in Windows, Linux and MacOS now.\r\nWe periodically make binary drops to [PowerShellCore][pscore],\r\nmeaning PackageManagement is a part of PowerShell Core releases.\r\nAlso PackageManagement and PowershellGet Modules are regularly updated in [PowerShellGallery.com](https://www.PowerShellGallery.com).\r\n\r\nThus check out the latest version from PowerShellGallery.com.\r\n\r\n[pscore]: https://github.com/PowerShell/PowerShell\r\n\r\n### Get Started!\r\n\r\nOneGet is shipped in Win10 and Windows Server 2016! For downlevel OS, you can install the [WMF 5.1][WMF5RTM] and then start using the OneGet.\r\n\r\nYou can follow [@PSOneGet on Twitter](http://twitter.com/PSOneGet) to be notified of every new build.\r\n\r\n\r\n* Learn how to [use the PowerShell OneGet cmdlets](https://github.com/OneGet/oneget/wiki/cmdlets) and [try some samples](https://github.com/PowerShell/PowerShell-Docs/blob/staging/wmf/5.0/oneget_cmdlets.md)\r\n* Read our [General Q and A](https://github.com/OneGet/oneget/wiki/Q-and-A)\r\n* Read [Writing OneGet Provider Guidelines](./docs/writepowershellbasedprovider.md)\r\n* Learn about the [8 Laws of Software Installation](https://github.com/OneGet/oneget/wiki/8-Laws-of-Software-Installation)\r\n* [General Troubleshooting](https://github.com/OneGet/oneget/wiki/General-Troubleshooting)\r\n* Check out more help information [in our wiki page](https://github.com/oneget/oneget/wiki)\r\n\r\n\r\n[WMF5RTM]: https://aka.ms/wmf5download\r\n\r\n### What is PackageManagement (OneGet)?\r\n\r\nOneGet is a Windows package manager, renamed as PackageManagement. It is a unified interface to package management systems and aims to make Software Discovery, Installation, and Inventory (SDII) work via a common set of cmdlets (and eventually a set of APIs). Regardless of the installation technology underneath, users can use these common cmdlets to install/uninstall packages, add/remove/query package repositories, and query a system for the software installed.\r\n\r\nWith OneGet, you can\r\n* Manage a list of software repositories in which packages can be searched, acquired, and installed\r\n* Search and filter your repositories to find the packages you need\r\n* Seamlessly install and uninstall packages from one or more repositories with a single PowerShell command\r\n\r\n#### PackageManagement Architecture\r\n\r\n![Image](./assets/OneGetArchitecture.PNG?raw=true)\r\n\r\n<br/>\r\n\r\n\r\n### Let's Try it\r\n\r\n#### Prerequisites\r\n - Windows 10, Windows Server 2016, or down-level Windows OS + WMF5\r\n - Linux or Mac with the [PowerShellCore][pscore]\r\n\r\n\r\n#### Working with PowerShellGallery.com\r\n\r\n ```powershell\r\n # 1.check available providers\r\n PS E:\\> get-packageprovider\r\nName                     Version          DynamicOptions\r\n----                     -------          --------------\r\nmsi                      3.0.0.0          AdditionalArguments\r\nmsu                      3.0.0.0\r\nPowerShellGet            1.1.0.0          PackageManagementProvider, Type...\r\nPrograms                 3.0.0.0          IncludeWindowsInstaller,...\r\n# 2. find a module from the PowerShell gallery, for example, xjea\r\nPS E:\\> find-module xjea\r\nNuGet provider is required to continue\r\nPowerShellGet requires NuGet provider version '2.8.5.201' or newer to interact with NuGet-based repositories. The NuGet provider must be available in 'C:\\Program\r\nFiles\\PackageManagement\\ProviderAssemblies' or 'C:\\Users\\jianyunt\\AppData\\Local\\PackageManagement\\ProviderAssemblies'. You can also install the NuGet provider by\r\nrunning 'Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force'. Do you want PowerShellGet to install and import the NuGet provider now?\r\n[Y] Yes  [N] No  [S] Suspend  [?] Help (default is \"Y\"): y\r\nVersion    Name           Repository           Description\r\n-------    ----           ----------           -----------\r\n0.3.0.0    xJea           PSGallery             Module with DSC Resources for Just Enough...\r\n# 3. install a module from the PowerShell gallery\r\nPS E:\\> Install-Module xjea\r\nUntrusted repository\r\nYou are installing the modules from an untrusted repository. If you trust this repository, change its InstallationPolicy value by running the Set-PSRepository cmdlet. Are\r\nyou sure you want to install the modules from 'gallery'?\r\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is \"N\"): y\r\n# 4. Find out if a module is installed\r\nPS E:\\> Get-InstalledModule -name xjea\r\nVersion    Name        Repository      Description\r\n-------    ----        ----------       -----------\r\n0.3.0.0    xJea        gallery          Module with DSC Resources for Just Enough Admin (JEA)..\r\n# 5. Uninstall a module\r\nPS E:\\> Uninstall-Module -name xjea\r\n```\r\n\r\n#### Working with http://www.NuGet.org repository\r\n\r\n```powershell\r\n# find a package from the nuget repository\r\nPS E:\\> find-package -name jquery -provider Nuget -Source https://www.nuget.org/api/v2\r\nName           Version          Source           Summary\r\n----           -------          ------           -------\r\njQuery          3.1.1            nuget.org        jQuery is a new kind of JavaScript Library....\r\n# install a package from NuGet repository\r\nPS E:\\> install-package -name jquery -provider Nuget -Source https://www.nuget.org/api/v2\r\nThe package(s) come(s) from a package source that is not marked as trusted.\r\nAre you sure you want to install software from 'nuget.org'?\r\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is \"N\"): y\r\nName             Version          Source           Summary\r\n----             -------          ------           -------\r\njQuery           3.1.1            nuget.org        jQuery is a new kind of JavaScript Library....\r\n# Uninstall the package\r\nPS E:\\> uninstall-package jquery\r\nName            Version          Source           Summary\r\n----            -------          ------           -------\r\njQuery          3.1.1            C:\\Program Fi... jQuery is a new kind of JavaScript Library....\r\n# Register a package Source\r\nPS E:\\> Register-PackageSource -name test -ProviderName NuGet -Location https://www.nuget.org/api/v2\r\nName             ProviderName     IsTrusted  Location\r\n----              ------------     ---------  --------\r\ntest              NuGet            False      https://www.nuget.org/api/v2\r\n# find a package from the registered package Source\r\nPS E:\\> find-package -Source test -name jquery\r\nName                Version          Source           Summary\r\n----                -------          ------           -------\r\njQuery              3.1.1            test             jQuery is a new kind of JavaScript Library....\r\n```\r\n\r\n### Try the latest PackageManagement (OneGet)\r\n\r\nYou can run `install-module PowerShellGet` to install the latest PackageManagment and PowerShellGet from [PowerShellGallery](https://www.powershellgallery.com).\r\n\r\n### Downloading the Source Code\r\nOneGet repo has a number of other repositories embeded as submodules. To make things easy, you can just clone recursively:\r\n```powershell\r\ngit clone --recursive https://github.com/OneGet/oneget.git\r\n```\r\nIf you already cloned but forgot to use `--recursive`, you can update submodules manually:\r\n```powershell\r\ngit submodule update --init\r\n```\r\n\r\n### Building the code\r\n\r\n``` powershell\r\n# After cloning this repository, go to the project folder:\r\n> cd oneget\r\n> cd src\r\n# download the dotnet cli tool\r\n> .\\bootstrap.ps1\r\n# building OneGet for fullclr\r\n> .\\build.ps1 net452\r\n#building OneGet for coreclr\r\n> .\\build.ps1 netstandard2.0\r\n```\r\n\r\nIf successfully built above, you should be able to see a folder:\r\n`oneget\\src\\out\\PackageManagement\\` whose layout looks like below:\r\n\r\n * `coreclr`\r\n * `fullclr`\r\n * `PackageManagement.format.ps1xml`\r\n * `PackageManagement.psd1`\r\n * `PackageManagement.psm1`\r\n * `PackageProviderFunctions.psm1`\r\n\r\n### Deploying it\r\n\r\n#### Generate PackageManagement.nupkg\r\nWe can use `publish-module` to create a .nupkg. Assuming you want to put the generated .nupkg in c:\\test folder.  You can do something like below. Note I cloned to E:\\OneGet folder.\r\n ```powershell\r\ncd E:\\OneGet\\oneget\\src\\out\\PackageManagement\r\nRegister-PSRepository -name local -SourceLocation c:\\test\r\nGet-PSRepository\r\nPublish-Module -path .\\ -Repository local\r\nPS E:\\OneGet\\oneget\\src\\out\\PackageManagement> dir c:\\test\\PackageManagement*.nupkg\r\n    Directory: C:\\test\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\n-a----        11/4/2016   4:15 PM        1626335 PackageManagement.1.1.0.0.nupkg\r\n```\r\nThen you can do\r\n```powershell\r\nfind-module -Repository local\r\ninstall-module -Repository local -Name PackageManagement\r\n```\r\nto get the newly built PackageManagement on your machines.\r\n\r\n#### Manual copy\r\nYou can also manually copy the OneGet binaries. For example, copy the entire `E:\\OneGet\\oneget\\src\\out\\PackageManagement` folder you just built to your\r\n`$env:Programfiles\\WindowsPowerShell\\Modules\\PackageManagement\\#onegetversion\\`\r\n\r\nIf you are running within PowerShellCore,\r\nsimilarily drop the PackageManagement folder to your `$env:Programfiles\\PowerShell\\#psversion\\Modules\\PackageManagement\\#onegetversion\\`,\r\n\r\nor copy to `/opt/microsoft/powershell/<psversion>/Modules/PackageManagement/#onegetversion/`,\r\nif you are running on Linux or Mac.\r\n\r\n**Note**: OneGet version number can be found from the PackageManagement.psd1 file.\r\n\r\n### Testing the code\r\n```PowerShell\r\n> cd oneget\r\n> cd Test\r\n> & '.\\run-tests.ps1' fullclr\r\n> & '.\\run-tests.ps1' coreclr\r\n```\r\n\r\n### Understanding the OneGet code repository\r\n\r\nOneGet is under rapid development, so you get to see just how the sausage is being made. I try to keep the master branch clean and buildable, but my own working branch can get pretty damn wild and I make no bones about some of this. I work fast, I make big changes, and I try to keep my eye on the target.\r\n\r\nFeel free to clone the repository and check out the different branches:\r\n\r\n#### Branches\r\n\r\nThere are currently three branches in the git repository:\r\n\r\n| Branch/Tag | Purpose |\r\n| ------- | ---------------------------|\r\n|`master`|  The `master` branch is where the daily builds of OneGet will be made from.  |\r\n|`WMF5_RTM`|  The `WMF5_RTM` tag is to mark the WMF 5.0 RTM release point. |\r\n|`TP5`|  The `TP5` tag is to mark the TP5 release point. |\r\n|`wip`|  The `wip` branch is where the current **unstable** and **not-likely-working** coding is taking place. This lets you see where I'm at before stuff actually hits the master branch. Fun to read, but really, the wild-west of code branches. |\r\n\r\n\r\n### Team Members\r\n\r\n| Branch | Purpose |\r\n| ------- | ---------------------------|\r\n|@sydneyhsmith |  Program Manager on OneGet.  |\r\n|@jianyunt|  Engineer owner on OneGet & its providers. |\r\n|@edyoung|  Our engineer manager on OneGet.   |\r\n|@alerickson|  Engineer on the team.   |\r\n\r\n[Follow us on Twitter](https://twitter.com/PSOneGet)\r\n\r\n### More Resources\r\n- [NuGet Provider](https://github.com/OneGet/NuGetProvider)\r\n- [PowerShellGet Provider](https://github.com/PowerShell/PowerShellGet)\r\n- [MicrosoftDockerProvider](https://github.com/OneGet/MicrosoftDockerProvider)\r\n- [NanoServerPackage](https://github.com/OneGet/NanoServerPackage)\r\n- Check out OneGet providers from our Community such as Gistprovider, OfficeProvider, 0Install and more from powershellgallery.com or simply run [Find-PackageProvider cmdlet](https://msdn.microsoft.com/en-us/powershell/gallery/psget/oneget/packagemanagement_cmdlets)\r\n- Want to write a provider? Check out our [sample provider](https://www.powershellgallery.com/packages/MyAlbum/)\r\n- Want to download packages from http://Chocolatey.org, try out [ChocolateyGet provider](https://www.powershellgallery.com/packages/ChocolateyGet)\r\n- Want to control which packages to use and where to get them from based on your organization? Check out [PSL provider](https://github.com/OneGet/PSLProvider)\r\n"
        },
        {
          "name": "solution.props",
          "type": "blob",
          "size": 2.1396484375,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project ToolsVersion=\"4.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n \r\n  <PropertyGroup>\r\n    <PSVersion>$(registry:HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\PowerShell\\3\\PowerShellEngine@PowerShellVersion)</PSVersion>\r\n    <!-- \r\n        If you have PowerShell 5.0 or greater installed, you must compile this with .NET 4.5 or higher\r\n        otherwise, we'll assume .Net 4.0 for the assemblies.\r\n    -->\r\n    <TargetFrameworkVersion Condition=\"($(PSVersion.Substring(0,1)) &gt; 4) AND ($(TargetFrameworkVersion) == '' Or $(TargetFrameworkVersion) == '*Undefined*')\">v4.5</TargetFrameworkVersion>\r\n    <TargetFrameworkVersion Condition=\"($(PSVersion.Substring(0,1)) &lt; 5) AND ($(TargetFrameworkVersion) == '' Or $(TargetFrameworkVersion) == '*Undefined*')\">v4.0</TargetFrameworkVersion>\r\n      \r\n    <Prefer32Bit>false</Prefer32Bit>\r\n    <NoWarn>1591,3002,3003,3008,3009</NoWarn>\r\n    <RestorePackages>true</RestorePackages>\r\n    <DefineConstants>FRAMEWORK$(TargetFrameworkVersion.Replace(\".\",\"\"))</DefineConstants>\r\n    <OutputRelativePath>output\\$(Configuration)\\bin\\</OutputRelativePath>\r\n\r\n    <SolutionDir Condition=\" '$(SolutionDir)'=='' \">$(MSBuildThisFileDirectory)</SolutionDir>\r\n\r\n    <OutputPath>$(SolutionDir)output\\$(Configuration)\\bin\\</OutputPath> \r\n    <BaseIntermediateOutputPath>$(SolutionDir)intermediate\\$(Configuration)\\$(AssemblyName)\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>$(BaseIntermediateOutputPath)</IntermediateOutputPath> \r\n    <DocumentationFile>$(OutputPath)$(AssemblyName).XML</DocumentationFile> \r\n    <SET_MT_EXE>for /f \"delims=\" %25%25a in ('powershell \"$p = ((Get-ItemProperty -Path HKCU:\\Software\\PackageManagement\\tools\\MT.EXE -Name Path -ea 0).Path) ;  if( -not $p ) { $p = ((dir ${env:ProgramFiles(x86)} -recurse -ea 0|  where -property name -eq mt.exe | select -first 1 ).FullName) ;    $null = mkdir -Path HKCU:\\Software\\PackageManagement\\tools\\MT.EXE -Force ;    $null = New-ItemProperty -Path HKCU:\\Software\\PackageManagement\\tools\\MT.EXE -Name Path -Value $p -force } ; $p\"') do @set MTEXE=%25%25a</SET_MT_EXE>\r\n  </PropertyGroup>\r\n</Project> "
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test.ps1",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}