{
  "metadata": {
    "timestamp": 1736710673126,
    "page": 20,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "marian42/wavefunctioncollapse",
      "stars": 4658,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4638671875,
          "content": "[Ll]ibrary/\n[Tt]emp/\n[Oo]bj/\n[Bb]uild/\n[Bb]uilds/\nAssets/AssetStoreTools*\n\n# Visual Studio cache directory\n.vs/\n\n# Autogenerated VS/MD/Consulo solution and project files\nExportedObj/\n.consulo/\n*.csproj\n*.unityproj\n*.sln\n*.suo\n*.tmp\n*.user\n*.userprefs\n*.pidb\n*.booproj\n*.svd\n*.pdb\n*.opendb\n\n# Unity3D generated meta files\n*.pidb.meta\n*.pdb.meta\n\n# Unity3D Generated File On Crash Reports\nsysinfo.txt\n\n# Builds\n*.apk\n*.unitypackage\n\n*.blend1\n*.blend1.meta\n\nLogs/\n\nScreenshots/\n"
        },
        {
          "name": "Assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "MIT License\n\nCopyright (c) 2018 Marian Kleineberg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "ProjectSettings",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.4345703125,
          "content": "![](https://i.imgur.com/vL80izv.jpg)\n\n# Wave Function Collapse\n\nAn infinite, procedurally generated city, assembled out of blocks using the Wave Function Collapse algorithm with backtracking.\n\nRead more about this project [here](https://marian42.de/article/wfc/) and about the WFC algorithm [here](https://github.com/mxgmn/WaveFunctionCollapse).\n\n## Play\n\nDownload the game on Itch.io: [https://marian42.itch.io/wfc](https://marian42.itch.io/wfc)  \nCurrently, there is no gameplay, you can only walk around and look at the scenery.\n\nKeyboard Controls: WASD for walking, Space to jump, Shift to run, Ctrl to jetpack.  \nXBOX Controls: Left Stick for walking, right stick for looking around, A to jump, LB to run, RB to jetpack\n\nFlight mode: Use M to toggle between flight mode and normal mode. In flight mode, you fly across the world, without any controls.\n\n## Editing the module set\n\nBy changing the module set, you can make some changes to the world generation without writing code.\nYou can disable or enable modules, change their spawn probability, their connectors, their neighbor rules or you can add new ones.\nHere is how to do it:\n\n1. Open the `Prototypes` scene.\n2. Edit the blocks in the scene. You'll mostly change values in the `ModulePrototype` components.\n3. Select the \"Prototypes\" game object in the hierarchy and apply your changes to the prefab (Overrides -> Apply all).\n4. Select the file \"ModuleData\" in the asset folder.\n5. Click \"Create module data\".\n6. Optional: Click \"Simplify module data\". This takes some time, but will make world generation faster.\n7. Save your work and go back to the `Game` scene. You can now use your updated module set.\n\n## Generating worlds in the editor\n\nThere are different ways to generate worlds in the editor:\n\n- Select the Map object. In the `MapBehaviour` component, select a size and click \"Initialize NxN area\".\n- Select the \"Area Selector\" object.\nMove and scale it to select an area, then use the \"Generate\" button to generate a map.\n- Use the \"Slot Inspector\" object to show details about a single position.\nIt shows you which modules can be spawned at that position and lets you select modules manually.\n\nIf you want to enter Play mode without losing your map, disable the \"Generate Map Near Player\" and the \"Occlusion culling\" script.\nNote that none of the components serialize, so you can't change the map once it has been serialized.\nThat means that you can't change your map in Play mode unless you initialized it in Play mode.\n"
        }
      ]
    }
  ]
}