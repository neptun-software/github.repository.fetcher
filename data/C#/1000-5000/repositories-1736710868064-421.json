{
  "metadata": {
    "timestamp": 1736710868064,
    "page": 421,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "punker76/gong-wpf-dragdrop",
      "stars": 2348,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3486328125,
          "content": "; Top-most http://editorconfig.org/ file\nroot = true\n\n[*]\nend_of_line = CRLF\n\n; 4-column tab indentation\n[*.{cs,csproj,xaml,xml,props,targets}]\nindent_style = space\nindent_size = 4\n\n[*.{md,yml,json,cake}]\nindent_style = space\nindent_size = 2\n\n\n[*.cs]\n# WPF0011: Containing type should be used as registered owner.\ndotnet_diagnostic.WPF0011.severity = error\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.70703125,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# These files are text and should be normalized (convert crlf => lf)\n# Custom for Visual Studio\n*.cs      diff=csharp\n*.xaml    merge=union\n*.sln     merge=union\n*.csproj  merge=union\n*.vbproj  merge=union\n*.fsproj  merge=union\n*.dbproj  merge=union\n\n# Standard to msysgit\n*.doc\t diff=astextplain\n*.DOC\t diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot  diff=astextplain\n*.DOT  diff=astextplain\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain\n\n# Images should be treated as binary\n# (binary is a macro for -text -diff)\n*.png     binary\n*.jepg    binary\n*.jpg     binary\n\n*.sdf     binary"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.19140625,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.binlog\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# scriptcs\n**/scriptcs_packages/*\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n#.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# cake\n[tT]ools/\n\n# XamlStyler\n!XamlStyler/\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "GitReleaseManager.yaml",
          "type": "blob",
          "size": 0.8955078125,
          "content": "create:\n  include-footer: true\n  footer-heading: Where to get it\n  footer-content: You can download this release from [gong-wpf-dragdrop](https://github.com/punker76/gong-wpf-dragdrop/releases/{milestone})\n  footer-includes-milestone: true\n  milestone-replace-text: '{milestone}'\nexport:\n  include-created-date-in-title: true\n  created-date-string-format: MMMM dd, yyyy\n  perform-regex-removal: true\n  regex-text: '### Where to get it(\\r\\n)*You can .*\\)'\n  multiline-regex: true\nissue-labels-include:\n- Breaking Change\n- Bug\n- Bug Fix\n- Feature\n- Feature Request\n- Improvement\n- Enhancement\n- Hacktoberfest\nissue-labels-exclude:\n- Internal Refactoring\n- Build\n- Question\n- WontFix\n- Duplicate\n- Housekeeping\n- Documentation\nissue-labels-alias:\n    - name:    Documentation\n      header:  Documentation\n      plural:  Documentation\n    - name:    Hacktoberfest\n      header:  Hacktoberfest\n      plural:  Hacktoberfest"
        },
        {
          "name": "GitVersion.yml",
          "type": "blob",
          "size": 0.513671875,
          "content": "assembly-versioning-scheme: Major\nassembly-file-versioning-scheme: MajorMinorPatchTag\nnext-version: 4.0.0\nmode: ContinuousDeployment\nbranches:\n  master:\n    regex: ^main\n    mode: ContinuousDeployment\n    tag: rc\n    prevent-increment-of-merged-branch-version: true\n    track-merge-target: false\n    is-release-branch: true\n  develop:\n    mode: ContinuousDeployment\n    tag: alpha\n    prevent-increment-of-merged-branch-version: true\n    track-merge-target: true\n  pull-request:\n    mode: ContinuousDelivery\nignore:\n  sha: []\n"
        },
        {
          "name": "GongSolutions.Wpf.DragDrop.Full.png",
          "type": "blob",
          "size": 22.4072265625,
          "content": null
        },
        {
          "name": "GongSolutions.Wpf.DragDrop.png",
          "type": "blob",
          "size": 1.5732421875,
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.49609375,
          "content": "BSD 3-Clause License\n\nCopyright (c) Jan Karger, Steven Kirk and Contributors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of gong-wpf-dragdrop nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "NOTICE.md",
          "type": "blob",
          "size": 1.3974609375,
          "content": "This license applies to modified Microsoft WPF code used in GongSolutions.WPF.DragDrop/Utilities/VisualTreeDescendantBoundsHelper.cs and originally sourced from https://github.com/dotnet/wpf/blob/83b9af142acd341d4bf470450e8b5c3ec3723d76/src/Microsoft.DotNet.Wpf/src/PresentationCore/System/Windows/Media/Visual.cs\n\nThe MIT License (MIT)\n\nCopyright (c) .NET Foundation and Contributors\n\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "NuGet.Config",
          "type": "blob",
          "size": 0.7060546875,
          "content": "﻿<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <solution>\n    <add key=\"disableSourceControlIntegration\" value=\"true\" />\n  </solution>  \n  <packageRestore>\n    <add key=\"enabled\" value=\"True\" />\n    <add key=\"automatic\" value=\"True\" />\n  </packageRestore>\n  <packageSources>\n    <clear />\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\n  </packageSources>\n  <activePackageSource>\n    <clear />\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\n  </activePackageSource>\n  <packageSourceMapping>\n    <packageSource key=\"nuget.org\">\n      <package pattern=\"*\" />\n    </packageSource>\n  </packageSourceMapping>\n</configuration>"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.5380859375,
          "content": "<!-- [![Stand With Ukraine](https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner2-direct.svg)](https://vshymanskyy.github.io/StandWithUkraine) -->\n\n<div align=\"center\">\n  <br />\n  <a href=\"https://github.com/punker76/gong-wpf-dragdrop\">\n    <img alt=\"gong-wpf-dragdrop\" width=\"700\" heigth=\"142\" src=\"./GongSolutions.Wpf.DragDrop.Full.png\">\n  </a>\n  <h1>GongSolutions.WPF.DragDrop</h1>\n  <p>\n    An easy to use drag'n'drop framework for WPF.\n  </p>\n  <p>\n    Supporting .NET Framework 4.6.2 and later, .NET 6 and later (on Windows)\n  </p>\n\n  <a href=\"https://gitter.im/punker76/gong-wpf-dragdrop\">\n\t  <img src=\"https://img.shields.io/badge/Gitter-Join%20Chat-green.svg?style=flat-square\">\n  </a>\n  <a href=\"https://twitter.com/punker76\">\n\t  <img src=\"https://img.shields.io/badge/twitter-%40punker76-55acee.svg?style=flat-square\">\n  </a>\n  <br />\n  <a href=\"https://ci.appveyor.com/project/punker76/gong-wpf-dragdrop/branch/main\">\n\t  <img alt=\"mainstatus\" src=\"https://img.shields.io/appveyor/ci/punker76/gong-wpf-dragdrop/main.svg?style=flat-square&&label=main\">\n  </a>\n  <a href=\"https://ci.appveyor.com/project/punker76/gong-wpf-dragdrop/branch/develop\">\n\t  <img alt=\"devstatus\" src=\"https://img.shields.io/appveyor/ci/punker76/gong-wpf-dragdrop/develop.svg?style=flat-square&&label=develop\">\n  </a>\n  <a href=\"https://github.com/punker76/gong-wpf-dragdrop/issues\">\n    <img src=\"https://img.shields.io/github/issues/punker76/gong-wpf-dragdrop.svg?style=flat-square\">\n  </a>\n  <br />\n  <a href=\"https://github.com/punker76/gong-wpf-dragdrop/releases/latest\">\n\t  <img src=\"https://img.shields.io/github/release/punker76/gong-wpf-dragdrop.svg?style=flat-square\">\n  </a>\n  <a href=\"https://www.nuget.org/packages/gong-wpf-dragdrop\">\n    <img src=\"https://img.shields.io/nuget/dt/gong-wpf-dragdrop.svg?style=flat-square\">\n  </a>\n  <a href=\"https://www.nuget.org/packages/gong-wpf-dragdrop\">\n    <img src=\"https://img.shields.io/nuget/v/gong-wpf-dragdrop.svg?style=flat-square\">\n  </a>\n  <a href=\"https://www.nuget.org/packages/gong-wpf-dragdrop\">\n    <img src=\"https://img.shields.io/nuget/vpre/gong-wpf-dragdrop.svg?style=flat-square&label=nuget-pre\">\n  </a>\n  <br />\n  <br />\n</div>\n\n## Features\n\n+ Works with MVVM : the logic for the drag and drop can be placed in a ViewModel. No code needs to be placed in code-behind, instead attached properties are used to bind to a drag handler/drop handler in a ViewModel.\n+ Works with multiple selections.\n+ Can drag data within the same control to re-order, or between (different) controls.\n+ Works with `ListBox`, `ListView`, `TreeView`, `DataGrid` and any other `ItemsControl`.\n+ Can insert, move or copy an item into a collection of the same/another control (same item type).\n+ Can display Adorners to give the user visual feedback of the operation in progress.\n+ Can display a preview of the dragged item (the preview is always visible).\n+ Has sensible defaults so that you have to write less code for common operations.\n\n## Let's get started\n\n- [Building](../../wiki/Building) the `gong-wpf-dragdrop` solution\n- [How to...](../../wiki/Usage)\n- [Releases and Release Notes](../../releases)\n- [Release History](../../wiki/Release-History)\n- [Strong naming](../../wiki/Strong-naming)\n- [Wiki](../../wiki)\n- [License](./LICENSE)\n\n## License\n\nCopyright © Jan Karger, Steven Kirk and Contributors. All rights reserved.\n\n`GongSolutions.WPF.DragDrop` is provided as-is under the BSD 3-Clause License. For more information see [LICENSE](./LICENSE).\n\n## Want to say thanks?\n\nThis framework is free and can be used for free, open source and commercial applications. It's tested, used and contributed by many awesome people.  So hit the magic :star: button, we appreciate it!!! :pray:\n\n[Become a sponsor](https://github.com/sponsors/punker76) and show your support to this open source project.\n\nIf you use `GongSolutions.WPF.DragDrop` as serious task, and you'd like to honor my work on it, please donate, I'll appreciate it.\n\nDoes your company use `GongSolutions.WPF.DragDrop`?  Ask your manager or marketing team if your company would be interested in supporting this project.  Your company's logo can be shown [on GitHub](https://github.com/punker76/gong-wpf-dragdrop#readme) - who doesn't want a little extra exposure?\n\n## In action\n\n![gif01](./screenshots/gong_240.gif)\n\n![screenshot01](./screenshots/2016-09-03_00h51_35.png)\n\n![screenshot02](./screenshots/2016-09-03_00h52_20.png)\n\n![screenshot03](./screenshots/2016-09-03_00h53_03.png)\n\n![screenshot04](./screenshots/2016-09-03_00h53_21.png)\n\n![gif02](./screenshots/DragDropSample01.gif)\n\n![gif03](./screenshots/DragHint-Demo.gif)\n"
        },
        {
          "name": "Settings.XAMLStyler",
          "type": "blob",
          "size": 2.0029296875,
          "content": "{\n    \"IndentSize\": 4,\n    \"AttributesTolerance\": 2,\n    \"KeepFirstAttributeOnSameLine\": true,\n    \"MaxAttributeCharactersPerLine\": 0,\n    \"MaxAttributesPerLine\": 1,\n    \"NewlineExemptionElements\": \"RadialGradientBrush, GradientStop, LinearGradientBrush, ScaleTransform, SkewTransform, RotateTransform, TranslateTransform, Trigger, MultiTrigger, DataTrigger, MultiDataTrigger, Condition, Setter, SolidColorBrush, Pen\",\n    \"SeparateByGroups\": false,\n    \"AttributeIndentation\": 0,\n    \"AttributeIndentationStyle\": 1,\n    \"RemoveDesignTimeReferences\":  false,\n    \"EnableAttributeReordering\": true,\n    \"AttributeOrderingRuleGroups\": [\n        \"x:Class\",\n        \"xmlns, xmlns:x\",\n        \"xmlns:*\",\n        \"x:Key, Key, x:Name, Name, x:Uid, Uid, Title\",\n        \"TargetType, BasedOn\",\n        \"Grid.Row, Grid.RowSpan, Grid.Column, Grid.ColumnSpan, Canvas.Left, Canvas.Top, Canvas.Right, Canvas.Bottom\",\n        \"Width, Height, MinWidth, MinHeight, MaxWidth, MaxHeight\",\n        \"Margin, Padding, HorizontalAlignment, VerticalAlignment, HorizontalContentAlignment, VerticalContentAlignment, Panel.ZIndex\",\n        \"*:*, *\",\n        \"PageSource, PageIndex, Offset, Color, TargetName, Property, Value, StartPoint, EndPoint\",\n        \"*:Freeze, mc:Ignorable, d:IsDataSource, d:LayoutOverrides, d:IsStaticText\",\n        \"Storyboard.*, From, To, Duration\"\n    ],\n    \"FirstLineAttributes\": \"\",\n    \"OrderAttributesByName\": true,\n    \"PutEndingBracketOnNewLine\": false,\n    \"RemoveEndingTagOfEmptyElement\": true,\n    \"SpaceBeforeClosingSlash\": true,\n    \"RootElementLineBreakRule\": 1,\n    \"ReorderVSM\": 2,\n    \"ReorderGridChildren\": false,\n    \"ReorderCanvasChildren\": false,\n    \"ReorderSetters\": 3,\n    \"FormatMarkupExtension\": true,\n    \"NoNewLineMarkupExtensions\": \"x:Bind, Binding, TemplateBinding, x:Static, DynamicResource, ComponentResourceKey, iconPacks:Modern, iconPacks:Material\",\n    \"ThicknessSeparator\": 1,\n    \"ThicknessAttributes\": \"Margin, Padding, BorderThickness, ThumbnailClipMargin\",\n    \"FormatOnSave\": false,\n    \"CommentPadding\": 2,\n}"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.166015625,
          "content": "# http://www.appveyor.com/docs/appveyor-yml\n\nbranches:\n  only:\n    - develop\n    - main\n\nenvironment:\n  # bad, but without this, gitversion doesn't work anymore\n  IGNORE_NORMALISATION_GIT_HEAD_MOVE: 1\n  azure-key-vault-url:\n    secure: 1mKS/HfCVq+iYNRVSrrN8NEowOkKt3knrpMzw+SOy3g=\n  azure-key-vault-client-id:\n    secure: JfSqzmsJdXB6uIxttCRoQw1NygwxqXHDj9uIqQnWOb9VCnQYlRPlAnxgW0yTSX4b\n  azure-key-vault-tenant-id:\n    secure: FxjkcqtpulfpDpfSAu4onaLVP/H1S1ORRCQCqsZkDC6YhCSmFoMxYNsWv5uGe3ah\n  azure-key-vault-client-secret:\n    secure: CUpRJxMLeUZwNPMcqI0wECaWfy5AMnWn1UZhBd9WnQ3Z16lJP1Vzrkf24mccbhUD\n  azure-key-vault-certificate:\n    secure: BSPdW2TgnQtoQXXbeDECug==\n\nimage: Visual Studio 2022\ntest: false\n\n# install:\n  # - ps: Invoke-WebRequest 'https://dot.net/v1/dotnet-install.ps1' -OutFile 'dotnet-install.ps1'\n  # - ps: ./dotnet-install.ps1 -Version 8.0.403 -InstallDir \"C:\\Program Files\\dotnet\"\n\npull_requests:\n  do_not_increment_build_number: false\n\nbuild_script:\n  - ps: dotnet --info\n  - ps: gitversion /version\n  - ps: .\\build.ps1 --target=ci --verbosity=diagnostic\n\nartifacts:\n  - path: \\Publish\\*.*\n\nnuget:\n  disable_publish_on_pr: true\n\nskip_commits:\n  files:\n    - '**/*.md'\n"
        },
        {
          "name": "build.cake",
          "type": "blob",
          "size": 16.0283203125,
          "content": "///////////////////////////////////////////////////////////////////////////////\n// TOOLS / ADDINS\n///////////////////////////////////////////////////////////////////////////////\n\n#tool dotnet:?package=NuGetKeyVaultSignTool&version=3.2.3\n#tool dotnet:?package=AzureSignTool&version=6.0.0\n#tool dotnet:?package=GitReleaseManager.Tool&version=0.17.0\n#tool dotnet:?package=XamlStyler.Console&version=3.2206.4\n\n#tool nuget:?package=GitVersion.CommandLine&version=5.12.0\n\n///////////////////////////////////////////////////////////////////////////////\n// ARGUMENTS\n///////////////////////////////////////////////////////////////////////////////\n\nvar target = Argument(\"target\", \"Default\");\n\n///////////////////////////////////////////////////////////////////////////////\n// PREPARATION\n///////////////////////////////////////////////////////////////////////////////\n\nvar repoName = \"gong-wpf-dragdrop\";\nvar baseDir = MakeAbsolute(Directory(\".\")).ToString();\nvar srcDir = baseDir + \"/src\";\nvar solution = srcDir + \"/GongSolutions.WPF.DragDrop.sln\";\nvar publishDir = baseDir + \"/Publish\";\n\nvar styler = Context.Tools.Resolve(\"xstyler.exe\");\nvar stylerFile = baseDir + \"/Settings.XAMLStyler\";\n\npublic class BuildData\n{\n    public string Configuration { get; }\n    public Verbosity Verbosity { get; }\n    public DotNetVerbosity DotNetVerbosity { get; }\n    public bool IsLocalBuild { get; set; }\n    public bool IsPullRequest { get; set; }\n    public bool IsPrerelease { get; set; }\n    public bool IsRunningOnCI { get; set; }\n    public GitVersion GitVersion { get; set; }\n\n    public BuildData(\n        string configuration,\n        Verbosity verbosity,\n        DotNetVerbosity dotNetVerbosity\n    )\n    {\n        Configuration = configuration;\n        Verbosity = verbosity;\n        DotNetVerbosity = dotNetVerbosity;\n    }\n\n    public void SetGitVersion(GitVersion gitVersion)\n    {\n        GitVersion = gitVersion;\n        IsPrerelease = GitVersion.NuGetVersion.Contains(\"-\");\n    }\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// SETUP / TEARDOWN\n///////////////////////////////////////////////////////////////////////////////\n\nSetup<BuildData>(ctx =>\n{\n    if (!IsRunningOnWindows())\n    {\n        throw new NotImplementedException($\"{repoName} will only build on Windows because it's not possible to target WPF and Windows Forms from UNIX.\");\n    }\n\n    Spectre.Console.AnsiConsole.Write(new Spectre.Console.FigletText(repoName));\n\n    var gitVersionPath = Context.Tools.Resolve(\"gitversion.exe\");\n    Information(\"GitVersion             : {0}\", gitVersionPath);\n\n    var buildData = new BuildData(\n        configuration: Argument(\"configuration\", \"Release\"),\n        verbosity: Argument(\"verbosity\", Verbosity.Minimal),\n        dotNetVerbosity: Argument(\"dotNetVerbosity\", DotNetVerbosity.Minimal)\n    )\n    {\n        IsLocalBuild = BuildSystem.IsLocalBuild,\n        IsRunningOnCI = BuildSystem.GitHubActions.IsRunningOnGitHubActions || BuildSystem.AppVeyor.IsRunningOnAppVeyor,\n        IsPullRequest =\n            (BuildSystem.GitHubActions.IsRunningOnGitHubActions && BuildSystem.GitHubActions.Environment.PullRequest.IsPullRequest)\n            || (BuildSystem.AppVeyor.IsRunningOnAppVeyor && BuildSystem.AppVeyor.Environment.PullRequest.IsPullRequest)\n    };\n\n    // Set build version for CI\n    if (buildData.IsLocalBuild == false || buildData.Verbosity == Verbosity.Verbose)\n    {\n        GitVersion(new GitVersionSettings { ToolPath = gitVersionPath, OutputType = GitVersionOutput.BuildServer });\n    }\n    buildData.SetGitVersion(GitVersion(new GitVersionSettings { ToolPath = gitVersionPath, OutputType = GitVersionOutput.Json }));\n\n    Information(\"GitVersion             : {0}\", gitVersionPath);\n    Information(\"Branch                 : {0}\", buildData.GitVersion.BranchName);\n    Information(\"Configuration          : {0}\", buildData.Configuration);\n    Information(\"IsRunningOnCI          : {0}\", buildData.IsRunningOnCI);\n    Information(\"IsPrerelease           : {0}\", buildData.IsPrerelease);\n    Information(\"IsPrerelease           : {0}\", buildData.IsPrerelease);\n    Information(\"Informational   Version: {0}\", buildData.GitVersion.InformationalVersion);\n    Information(\"SemVer          Version: {0}\", buildData.GitVersion.SemVer);\n    Information(\"AssemblySemVer  Version: {0}\", buildData.GitVersion.AssemblySemVer);\n    Information(\"MajorMinorPatch Version: {0}\", buildData.GitVersion.MajorMinorPatch);\n    Information(\"NuGet           Version: {0}\", buildData.GitVersion.NuGetVersion);\n    Information(\"Verbosity              : {0}\", buildData.Verbosity);\n    Information(\"Publish folder         : {0}\", publishDir);\n\n    return buildData;\n});\n\nTeardown(ctx =>\n{\n});\n\n///////////////////////////////////////////////////////////////////////////////\n// TASKS\n///////////////////////////////////////////////////////////////////////////////\n\nTask(\"Clean\")\n    .ContinueOnError()\n    .Does(() =>\n{\n    var directoriesToDelete = GetDirectories(\"./**/obj\")\n        .Concat(GetDirectories(\"./**/bin\"))\n        .Concat(GetDirectories(\"./**/Publish\"))\n        ;\n    DeleteDirectories(directoriesToDelete, new DeleteDirectorySettings { Recursive = true, Force = true });\n});\n\nTask(\"Restore\")\n    .Does<BuildData>(data =>\n{\n    DotNetRestore(solution);\n});\n\nTask(\"Build\")\n    .Does<BuildData>(data =>\n{\n    var msbuildSettings = new DotNetMSBuildSettings\n    {\n      MaxCpuCount = 0,\n      Version = data.GitVersion.NuGetVersion,\n      AssemblyVersion = data.GitVersion.AssemblySemVer,\n      FileVersion = data.GitVersion.AssemblySemFileVer,\n      InformationalVersion = data.GitVersion.InformationalVersion,\n      ContinuousIntegrationBuild = data.IsRunningOnCI,\n      ArgumentCustomization = args => args.Append(\"/m\").Append(\"/nr:false\") // The /nr switch tells msbuild to quite once it's done\n    };\n    // msbuildSettings.FileLoggers.Add(\n    //     new MSBuildFileLoggerSettings\n    //     {\n    //       LogFile = buildLogFile,\n    //       AppendToLogFile = true,\n    //       Verbosity = data.DotNetVerbosity\n    //     }\n    // );\n\n    var settings = new DotNetBuildSettings\n    {\n      MSBuildSettings = msbuildSettings,\n      Configuration = data.Configuration,\n      Verbosity = data.DotNetVerbosity,\n      NoRestore = true\n    };\n\n    DotNetBuild(solution, settings);\n});\n\nTask(\"Pack\")\n    .ContinueOnError()\n    .Does<BuildData>(data =>\n{\n    EnsureDirectoryExists(Directory(publishDir));\n\n    var msbuildSettings = new DotNetMSBuildSettings\n    {\n      MaxCpuCount = 0,\n      Version = data.GitVersion.NuGetVersion,\n      AssemblyVersion = data.GitVersion.AssemblySemVer,\n      FileVersion = data.GitVersion.AssemblySemFileVer,\n      InformationalVersion = data.GitVersion.InformationalVersion,\n      ContinuousIntegrationBuild = data.IsRunningOnCI\n    }\n    .WithProperty(\"IncludeBuildOutput\", \"true\")\n    .WithProperty(\"RepositoryBranch\", data.GitVersion.BranchName)\n    .WithProperty(\"RepositoryCommit\", data.GitVersion.Sha)\n    ;\n    // msbuildSettings.FileLoggers.Add(\n    //     new MSBuildFileLoggerSettings\n    //     {\n    //       LogFile = buildLogFile,\n    //       AppendToLogFile = true,\n    //       Verbosity = DotNetVerbosity.Minimal\n    //     }\n    // );\n\n    var settings = new DotNetPackSettings\n    {\n      Configuration = data.Configuration,\n      OutputDirectory = MakeAbsolute(Directory(publishDir)).FullPath,\n      MSBuildSettings = msbuildSettings,\n      NoBuild = true,\n      NoRestore = true\n    };\n\n    var project = \"./src/GongSolutions.WPF.DragDrop/GongSolutions.WPF.DragDrop.csproj\";\n    DotNetPack(project, settings);\n});\n\nTask(\"Sign\")\n    .WithCriteria<BuildData>((context, data) => !data.IsPullRequest)\n    .ContinueOnError()\n    .Does<BuildData>(data =>\n{\n    var files = GetFiles(\"./src/GongSolutions.WPF.DragDrop/bin/**/*/GongSolutions.WPF.DragDrop.dll\");\n    SignFiles(files, \"GongSolutions.WPF.DragDrop, an easy to use drag'n'drop framework for WPF applications.\");\n\n    files = GetFiles(\"./src/Showcase/bin/**/*/Showcase.WPF.DragDrop.exe\");\n    SignFiles(files, \"Demo application of GongSolutions.WPF.DragDrop, an easy to use drag'n'drop framework for WPF applications.\");\n});\n\nTask(\"SignNuGet\")\n    .WithCriteria<BuildData>((context, data) => !data.IsPullRequest)\n    .WithCriteria<BuildData>((context, data) => DirectoryExists(Directory(publishDir)))\n    .ContinueOnError()\n    .Does(() =>\n{\n    var vurl = EnvironmentVariable(\"azure-key-vault-url\");\n    if(string.IsNullOrWhiteSpace(vurl)) {\n        Error(\"Could not resolve signing url.\");\n        return;\n    }\n\n    var vcid = EnvironmentVariable(\"azure-key-vault-client-id\");\n    if(string.IsNullOrWhiteSpace(vcid)) {\n        Error(\"Could not resolve signing client id.\");\n        return;\n    }\n\n    var vctid = EnvironmentVariable(\"azure-key-vault-tenant-id\");\n    if(string.IsNullOrWhiteSpace(vctid)) {\n        Error(\"Could not resolve signing client tenant id.\");\n        return;\n    }\n\n    var vcs = EnvironmentVariable(\"azure-key-vault-client-secret\");\n    if(string.IsNullOrWhiteSpace(vcs)) {\n        Error(\"Could not resolve signing client secret.\");\n        return;\n    }\n\n    var vc = EnvironmentVariable(\"azure-key-vault-certificate\");\n    if(string.IsNullOrWhiteSpace(vc)) {\n        Error(\"Could not resolve signing certificate.\");\n        return;\n    }\n\n    var nugetFiles = GetFiles(publishDir + \"/*.nupkg\");\n    var signTool = Context.Tools.Resolve(\"NuGetKeyVaultSignTool.exe\");\n\n    foreach(var file in nugetFiles)\n    {\n        Information($\"Sign file: {file}\");\n\n        ExecuteProcess(signTool,\n                        new ProcessArgumentBuilder()\n                            .Append(\"sign\")\n                            .Append(MakeAbsolute(file).FullPath)\n                            .Append(\"--force\")\n                            .AppendSwitchQuoted(\"--file-digest\", \"sha256\")\n                            .AppendSwitchQuoted(\"--timestamp-rfc3161\", \"http://timestamp.digicert.com\")\n                            .AppendSwitchQuoted(\"--timestamp-digest\", \"sha256\")\n                            .AppendSwitchQuoted(\"--azure-key-vault-url\", vurl)\n                            .AppendSwitchQuotedSecret(\"--azure-key-vault-client-id\", vcid)\n                            .AppendSwitchQuotedSecret(\"--azure-key-vault-tenant-id\", vctid)\n                            .AppendSwitchQuotedSecret(\"--azure-key-vault-client-secret\", vcs)\n                            .AppendSwitchQuotedSecret(\"--azure-key-vault-certificate\", vc)\n                        );\n    }\n});\n\nTask(\"Zip\")\n    .Does<BuildData>(data =>\n{\n    EnsureDirectoryExists(Directory(publishDir));\n    Zip($\"./src/Showcase/bin/{data.Configuration}\", $\"{publishDir}/Showcase.DragDrop.{data.Configuration}-v\" + data.GitVersion.NuGetVersion + \".zip\");\n});\n\nTask(\"StyleXaml\")\n    .Description(\"Ensures XAML Formatting is Clean\")\n    .Does(() =>\n{\n    Func<IFileSystemInfo, bool> exclude_Dir =\n        fileSystemInfo => !fileSystemInfo.Path.Segments.Contains(\"obj\");\n\n    var files = GetFiles(srcDir + \"/**/*.xaml\", new GlobberSettings { Predicate = exclude_Dir });\n    Information(\"\\nChecking \" + files.Count() + \" file(s) for XAML Structure\");\n    ExecuteProcess(styler, \"-f \\\"\" + string.Join(\",\", files.Select(f => f.ToString())) + \"\\\" -c \\\"\" + stylerFile + \"\\\"\");\n});\n\nTask(\"CreateRelease\")\n    .WithCriteria<BuildData>((context, data) => !data.IsPullRequest)\n    .Does<BuildData>(data =>\n{\n    var token = EnvironmentVariable(\"GITHUB_TOKEN\");\n    if (string.IsNullOrEmpty(token))\n    {\n        throw new Exception(\"The GITHUB_TOKEN environment variable is not defined.\");\n    }\n\n    GitReleaseManagerCreate(token, \"punker76\", repoName, new GitReleaseManagerCreateSettings {\n        Milestone         = data.GitVersion.MajorMinorPatch,\n        Name              = data.GitVersion.AssemblySemFileVer,\n        Prerelease        = data.IsPrerelease,\n        TargetCommitish   = data.GitVersion.BranchName,\n        WorkingDirectory  = \".\"\n    });\n});\n\n///////////////////////////////////////////////////////////////////////////////\n// HELPER\n///////////////////////////////////////////////////////////////////////////////\n\nvoid SignFiles(IEnumerable<FilePath> files, string description)\n{\n    var vurl = EnvironmentVariable(\"azure-key-vault-url\");\n    if(string.IsNullOrWhiteSpace(vurl)) {\n        Error(\"Could not resolve signing url.\");\n        return;\n    }\n\n    var vcid = EnvironmentVariable(\"azure-key-vault-client-id\");\n    if(string.IsNullOrWhiteSpace(vcid)) {\n        Error(\"Could not resolve signing client id.\");\n        return;\n    }\n\n    var vctid = EnvironmentVariable(\"azure-key-vault-tenant-id\");\n    if(string.IsNullOrWhiteSpace(vctid)) {\n        Error(\"Could not resolve signing client tenant id.\");\n        return;\n    }\n\n    var vcs = EnvironmentVariable(\"azure-key-vault-client-secret\");\n    if(string.IsNullOrWhiteSpace(vcs)) {\n        Error(\"Could not resolve signing client secret.\");\n        return;\n    }\n\n    var vc = EnvironmentVariable(\"azure-key-vault-certificate\");\n    if(string.IsNullOrWhiteSpace(vc)) {\n        Error(\"Could not resolve signing certificate.\");\n        return;\n    }\n\n    var filesToSign = string.Join(\" \", files.Select(f => MakeAbsolute(f).FullPath));\n    var azureSignTool = Context.Tools.Resolve(\"azuresigntool.exe\");\n\n    ExecuteProcess(azureSignTool,\n                    new ProcessArgumentBuilder()\n                        .Append(\"sign\")\n                        .Append(filesToSign)\n                        .AppendSwitchQuoted(\"--file-digest\", \"sha256\")\n                        .AppendSwitchQuoted(\"--description\", description)\n                        .AppendSwitchQuoted(\"--description-url\", \"https://github.com/punker76/gong-wpf-dragdrop\")\n                        .Append(\"--no-page-hashing\")\n                        .AppendSwitchQuoted(\"--timestamp-rfc3161\", \"http://timestamp.digicert.com\")\n                        .AppendSwitchQuoted(\"--timestamp-digest\", \"sha256\")\n                        .AppendSwitchQuoted(\"--azure-key-vault-url\", vurl)\n                        .AppendSwitchQuotedSecret(\"--azure-key-vault-client-id\", vcid)\n                        .AppendSwitchQuotedSecret(\"--azure-key-vault-tenant-id\", vctid)\n                        .AppendSwitchQuotedSecret(\"--azure-key-vault-client-secret\", vcs)\n                        .AppendSwitchQuotedSecret(\"--azure-key-vault-certificate\", vc)\n                    );\n}\n\nvoid ExecuteProcess(FilePath fileName, ProcessArgumentBuilder arguments, string workingDirectory = null)\n{\n  if (!FileExists(fileName))\n  {\n    throw new Exception($\"File not found: {fileName}\");\n  }\n\n  var processSettings = new ProcessSettings\n  {\n    RedirectStandardOutput = true,\n    RedirectStandardError = true,\n    Arguments = arguments\n  };\n\n  if (!string.IsNullOrEmpty(workingDirectory))\n  {\n    processSettings.WorkingDirectory = workingDirectory;\n  }\n\n  Information($\"Arguments: {arguments.RenderSafe()}\");\n\n  using(var process = StartAndReturnProcess(fileName, processSettings))\n  {\n    process.WaitForExit();\n\n    if (process.GetStandardOutput().Any())\n    {\n      Information($\"Output:{Environment.NewLine} {string.Join(Environment.NewLine, process.GetStandardOutput())}\");\n    }\n\n    if (process.GetStandardError().Any())\n    {\n      // Information($\"Errors occurred:{Environment.NewLine} {string.Join(Environment.NewLine, process.GetStandardError())}\");\n      throw new Exception($\"Errors occurred:{Environment.NewLine} {string.Join(Environment.NewLine, process.GetStandardError())}\");\n    }\n\n    // This should output 0 as valid arguments supplied\n    var exitCode = process.GetExitCode();\n    Information($\"Exit code: {exitCode}\");\n\n    if (exitCode > 0)\n    {\n      throw new Exception($\"Exit code: {exitCode}\");\n    }\n  }\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// TASK TARGETS\n///////////////////////////////////////////////////////////////////////////////\n\nTask(\"Default\")\n    .IsDependentOn(\"Clean\")\n    .IsDependentOn(\"Restore\")\n    .IsDependentOn(\"StyleXaml\")\n    .IsDependentOn(\"Build\")\n    ;\n\nTask(\"ci\")\n    .IsDependentOn(\"Default\")\n    .IsDependentOn(\"Sign\")\n    .IsDependentOn(\"Pack\")\n    .IsDependentOn(\"SignNuGet\")\n    .IsDependentOn(\"Zip\")\n    ;\n\n///////////////////////////////////////////////////////////////////////////////\n// EXECUTION\n///////////////////////////////////////////////////////////////////////////////\n\nRunTarget(target);\n"
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 0.3115234375,
          "content": "$ErrorActionPreference = 'Stop'\n\nSet-Location -LiteralPath $PSScriptRoot\n\n$env:DOTNET_SKIP_FIRST_TIME_EXPERIENCE = '1'\n$env:DOTNET_CLI_TELEMETRY_OPTOUT = '1'\n$env:DOTNET_NOLOGO = '1'\n\ndotnet tool restore\nif ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }\n\ndotnet cake @args\nif ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }\n"
        },
        {
          "name": "cake.config",
          "type": "blob",
          "size": 0.3740234375,
          "content": "; This is the default configuration file for Cake.\n; This file was downloaded from https://github.com/cake-build/resources\n\n[Nuget]\nSource=https://api.nuget.org/v3/index.json\nUseInProcessClient=true\nLoadDependencies=false\n\n[Paths]\nTools=./tools\nAddins=./tools/Addins\nModules=./tools/Modules\n\n[Settings]\nSkipVerification=false\nSkipPackageVersionCheck=true\nShowProcessCommandLine=true\n"
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.1220703125,
          "content": "{\n    \"sdk\": {\n        \"version\": \"9.0.100\",\n        \"rollForward\": \"latestFeature\",\n        \"allowPrerelease\": false\n    }\n}"
        },
        {
          "name": "screenshots",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}