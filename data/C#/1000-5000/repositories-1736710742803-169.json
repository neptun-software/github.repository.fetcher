{
  "metadata": {
    "timestamp": 1736710742803,
    "page": 169,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "keijiro/Skinner",
      "stars": 3390,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.369140625,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# Custom for Visual Studio\n*.cs     diff=csharp\n\n# Standard to msysgit\n*.doc\t diff=astextplain\n*.DOC\t diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot  diff=astextplain\n*.DOT  diff=astextplain\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.029296875,
          "content": "*.swp\nExtra/backup\nSkinner.unitypackage\n\n/[Ll]ibrary/\n/[Tt]emp/\n/[Oo]bj/\n/[Bb]uild/\n/[Bb]uilds/\n/Assets/AssetStoreTools*\n\n# Autogenerated VS/MD solution and project files\nExportedObj/\n*.csproj\n*.unityproj\n*.sln\n*.suo\n*.tmp\n*.user\n*.userprefs\n*.pidb\n*.booproj\n*.svd\n\n\n# Unity3D generated meta files\n*.pidb.meta\n\n# Unity3D Generated File On Crash Reports\nsysinfo.txt\n\n# =========================\n# Operating System Files\n# =========================\n\n# OSX\n# =========================\n\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n# Windows\n# =========================\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msm\n*.msp\n\n# Windows shortcuts\n*.lnk\n"
        },
        {
          "name": "Assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "Extra",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0361328125,
          "content": "Copyright (c) 2016 Keijiro Takahashi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "ProjectSettings",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.73828125,
          "content": "Skinner\n=======\n\n![gif](http://i.imgur.com/k838bjc.gif)\n![gif](http://i.imgur.com/Elfd8QE.gif)\n\n*Skinner* is a collection of special effects that use vertices of an animating\nskinned mesh as emitting points. It uses a special [replacement shader] to\nconvert vertex positions into GPU-friendly data, and thus it avoids spending\nextra memory and CPU time for handling them (uses GPU resources instead).\n\nSkinner Asset Types\n-------------------\n\n*Skinner* provides some special asset types to preprocess relevant data.\n\n### Skinner Model\n\nA *Skinner model* is a simplified variant of a mesh asset that only has\nvertices and skin weights. When converted from an original mesh, all the\ntopological data of triangles is removed and overlapped vertices are\nstripped out.\n\n### Skinner Template\n\nA *Skinner template* is a pre-built mesh asset that provides vertices and\ntopological data to the effect renderers. For instance, a *Skinner particle\ntemplate* has thousands of particle instances that are placed at the world\norigin; A *Skinner particle renderer* will move them at run time.\n\nSkinner Component Classes\n-------------------------\n\n*Skinner* also provides some component classes to handle these assets during\nrun time.\n\n### Skinner Source\n\nThe *Skinner source* component is a subsystem that converts a deformed skinned\nmesh into baked data. This data will be provided to multiple *Skinner\nrenderers*.\n\n### Skinner Renderers\n\nThe *Skinner renderer* components are special types of mesh renderers that\ndeform a *Skinner template* based on data provided from a *Skinner source*.\nThen it creates some interesting special effects.\n\nHow to Set Up\n-------------\n\n### Install the package.\n\nDownload one of the unitypackage files from the [Releases] page and import it\ninto a project.\n\n### Convert a skinned mesh into a Skinner model.\n\nA skinned mesh has to be converted into a *Skinner model* in advance to be\nused in the *Skinner* system. This can be done from the context menu; click a\nmesh asset to select it, then choose *Skinner* -> *Convert Mesh* from the right\nclick menu.\n\nNote that the mesh asset is usually located inside an fbx file. A few extra\nclicks are needed to select it. See the GIF below.\n\n![gif](http://i.giphy.com/26FLakB0pQ9nCxKY8.gif)\n\n### Set up a character as usual.\n\nDrag and drop a character prefab into the scene.\n\n### Attach a *Skinner source* to a skinned mesh renderer.\n\nAdd a *Skinner source* component to the game object that has a skinned mesh\nrenderer component. Then set the *Skinner model* converted in the previous step\nto the *model* property.  \n\n![screenshot](http://i.imgur.com/sbBQROv.png)\n\nThis *Skinner source* will override the skinned mesh renderer and then use it to\nconvert vertex data. **Note that this character will disappear from the scene,**\nbecause it will be exclusively used for vertex conversion. If it has to stay\nvisible, another instance of the same character should be added to the scene as\na substitution.\n\n### Create a *Skinner renderer* object.\n\nCreate an empty game object and add one of the *Skinner renderer* components to\nit. Then set the *source* property in it to refer to the *Skinner source* object\ncreated in the previous step.\n\nFor starters, it's recommended to use the *Skinner debug* component that simply\nvisualizes the vertex data provided from the source. If it shows nothing, there\nmay be something wrong in the previous steps.\n\nSkinner Renderer Components\n---------------------------\n\nCurrently, the *Skinner* package provides four types of renderers.\n\n### Skinner Debug\n\n![gif](http://68.media.tumblr.com/4272c0ca532b5081125e0a1b8c63cfe1/tumblr_oio9gyLsjC1qio469o1_320.gif)\n\nThe *Skinner debug* renderer simply visualizes vertex data provided from a\nsource.\n\nThis component doesn't need a template asset.\n\n### Skinner Glitch\n\n![gif](http://68.media.tumblr.com/74a888fdc96661fee217808fa250e33e/tumblr_ohgpbnM7ce1qio469o2_320.gif)\n\nThe *Skinner glitch* renderer draws triangles between randomly choosing vertices\nin a source. Although the number of triangles is fixed (21,845 triangles), triangles\nwith long edges or a large area will be pulled out to maintain the silhouette. This behavior\ncan be controlled by the threshold properties of the component.\n\nThis component doesn't need a template asset.\n\n### Skinner Particle\n\n![gif](http://68.media.tumblr.com/c4c573ccfcf50011cdff66e3c7106a69/tumblr_oiup1kbJCp1qio469o2_320.gif)\n\nThe *Skinner particle* is a particle system that emits particles from vertices\nin a source. Several parameters (duration, rotation, etc) of each particle\ncan be changed according to the speed of vertices, and thus it can be used to\ngive some emphasis to character movement and trajectory.\n\nThe shapes of particles are defined in a *Skinner particle template* asset.\nAny shape can be used in a template, but it's recommended to use meshes with\nthe very low poly count because the number of particle instances is determined\nfrom the number of vertices in the shapes (low poly == more particles!). \n\n### Skinner Trail\n\n![gif](http://68.media.tumblr.com/712809e81cda209c86e9744ca54ea3d9/tumblr_oir3z03Vaf1qio469o2_320.gif)\n\nThe *Skinner trail* renderer draws trail lines from vertices in a source. The\nwidth of the lines can be changed according to the speed of vertices, and thus\nit can be used to give emphasis to movement too.\n\nThe length of the trail lines is pre-determined in a *Skinner trail template*\nasset. The number of lines is also pre-determined by its length. The longer the\nlines are, the fewer lines are drawn.\n\nCompatibility\n-------------\n\nAt the moment *Skinner* is only tested on Windows, macOS and iOS (metal).\nPossibly it runs on PS4 and Xboxone, but not sure about GLES3 and WebGL.\n\nLicense\n-------\n\n[MIT](LICENSE.md)\n\n[replacement shader]: https://docs.unity3d.com/Manual/SL-ShaderReplacement.html\n[Releases]: https://github.com/keijiro/Skinner/releases\n"
        }
      ]
    }
  ]
}