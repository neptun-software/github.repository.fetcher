{
  "metadata": {
    "timestamp": 1736711130110,
    "page": 977,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Monnoroch/ColorHighlighter",
      "stars": 1305,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.001953125,
          "content": "*\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.025390625,
          "content": "__pycache__\n.cache/\n*.pyc\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 0.927734375,
          "content": "stages:\n  - build-container\n  - test\n  - cleanup\n\nvariables:\n  TEST_IMAGE_NAME: gxservers.com:5500/${CI_PROJECT_PATH}:${CI_BUILD_REF_NAME}\n  TEST_CONTAINER_NAME: ${CI_PROJECT_NAME}--${CI_BUILD_REF_NAME}\n  TIMEOUT: 2h\n\nbuild-container:\n  stage: build-container\n  script:\n    - echo CI image name ${TEST_IMAGE_NAME}\n    - docker build -f ci/Dockerfile -t ${TEST_IMAGE_NAME} --build-arg LINTER_TOKEN=${PRIVATE_LINTER_TOKEN} ./\n    - docker rm -f ${TEST_CONTAINER_NAME} || true\n    - ci/run-container.sh --image ${TEST_IMAGE_NAME} --name ${TEST_CONTAINER_NAME} --timeout ${TIMEOUT}\n\nlint:\n  stage: test\n  script:\n    - ci/run-linters.sh --container ${TEST_CONTAINER_NAME}\n\ntest:\n  stage: test\n  script:\n    - docker exec -i ${TEST_CONTAINER_NAME} ci/test-python.sh\n\nintegration-test:\n  stage: test\n  script:\n    - docker exec -i ${TEST_CONTAINER_NAME} ci/integration-tests.sh\n\ncleanup:\n  stage: cleanup\n  script:\n    - docker stop ${TEST_CONTAINER_NAME}\n"
        },
        {
          "name": "ColorHighlighter.sublime-settings",
          "type": "blob",
          "size": 4.724609375,
          "content": "{\n    \"search_colors_in\": {\n        \"selection\": {\n            \"enabled\": true,\n            \"color_highlighters\": {\n                \"color_scheme\": {\n                    \"enabled\": false,\n                    \"highlight_style\": \"filled\"\n                },\n                \"gutter_icons\": {\n                    \"enabled\": false,\n                    \"icon_style\": \"circle\"\n                },\n                \"phantoms\": {\n                    \"enabled\": true,\n                    \"style\": \"right\",\n                    \"length\": 2\n                }\n            }\n        },\n        \"all_content\": {\n            \"enabled\": true,\n            \"color_highlighters\": {\n                \"color_scheme\": {\n                    \"enabled\": true,\n                    \"highlight_style\": \"text\"\n                },\n                \"gutter_icons\": {\n                    \"enabled\": true,\n                    \"icon_style\": \"circle\"\n                },\n                \"phantoms\": {\n                    \"enabled\": false,\n                    \"style\": \"right\",\n                    \"length\": 2\n                }\n            }\n        },\n        \"hover\": {\n            \"enabled\": true,\n            \"color_highlighters\": {\n                \"color_scheme\": {\n                    \"enabled\": false,\n                    \"highlight_style\": \"filled\"\n                },\n                \"gutter_icons\": {\n                    \"enabled\": false,\n                    \"icon_style\": \"circle\"\n                },\n                \"phantoms\": {\n                    \"enabled\": false,\n                    \"style\": \"right\",\n                    \"length\": 2\n                }\n            }\n        }\n    },\n    \"default_keybindings\": true,\n    \"file_extensions\": [\".css\", \".less\", \".scss\", \".sass\", \".styl\"],\n    \"icon_factory\": {\n        \"convert_command\": \"convert\",\n        \"convert_timeout\": 5\n    },\n    \"autoreload\": {\n        \"when_settings_change\": true,\n        \"when_color_scheme_change\": true\n    },\n    \"regex_compiler\": {\n        \"channels\": {\n            \"hex\": \"[0-9a-fA-F]\",\n            \"dec\": \"\\\\d{1,3}\",\n            \"float\": \"(?:[0|1])|(?:[1][\\\\.]?[0]*)|(?:[0]?[\\\\.]\\\\d*)\",\n            \"perc\": \"(?:\\\\d{1,3}[%])|(?:0)\"\n        },\n        \"formats\": {\n            \"sharp8\": {\n                \"description\": \"Hex #RRGGBBAA color format\",\n                \"regex\": \"#[0-9a-fA-F]{8}\",\n                \"white\": \"#FFFFFFFF\"\n            },\n            \"sharp6\": {\n                \"description\": \"Hex #RRGGBBAA color format\",\n                \"regex\": \"#[0-9a-fA-F]{6}\",\n                \"white\": \"#FFFFFF\",\n                \"after\": \"sharp8\"\n            },\n            \"sharp4\": {\n                \"description\": \"Hex #RGBA color format\",\n                \"regex\": \"#(?P<R>hex)(?P<G>hex)(?P<B>hex)(?P<A>hex)\",\n                \"white\": \"#FFFF\",\n                \"after\": \"sharp6\"\n            },\n            \"sharp3\": {\n                \"description\": \"Hex #RGB color format\",\n                \"regex\": \"#(?P<R>hex)(?P<G>hex)(?P<B>hex)\",\n                \"white\": \"#FFF\",\n                \"after\": \"sharp4\"\n            },\n            \"rgba\": {\n                \"description\": \"rgba(255,255,100%,1) color format\",\n                \"regex\": \"rgba[(][ ]*(?P<R>dec|perc)[ ]*[,][ ]*(?P<G>dec|perc)[ ]*[,][ ]*(?P<B>dec|perc)[ ]*[,][ ]*(?P<A>float)[ ]*[)]\",\n                \"white\": \"rgba(255, 255, 100%, 1)\"\n            },\n            \"rgb\": {\n                \"description\": \"rgb(255,255,100%) color format\",\n                \"regex\": \"rgb[(][ ]*(?P<R>dec|perc)[ ]*[,][ ]*(?P<G>dec|perc)[ ]*[,][ ]*(?P<B>dec|perc)[ ]*[)]\",\n                \"white\": \"rgb(255, 255, 100%)\"\n            },\n            \"hsva\": {\n                \"description\": \"hsva(hue 0..360, s%, v%, alpha 0.0 .. 1.0) color format\",\n                \"regex\": \"hsva[(][ ]*(?P<H>dec)[ ]*[,][ ]*(?P<S>perc)[ ]*[,][ ]*(?P<V>perc)[ ]*[,][ ]*(?P<A>float)[ ]*[)]\",\n                \"white\": \"hsva(0, 0%, 100%, 1.)\"\n            },\n            \"hsv\": {\n                \"description\": \"hsv(hue 0..360, s%, v%) color format\",\n                \"regex\": \"hsv[(][ ]*(?P<H>dec)[ ]*[,][ ]*(?P<S>perc)[ ]*[,][ ]*(?P<V>perc)[ ]*[)]\",\n                \"white\": \"hsv(0, 0%, 100%)\"\n            },\n            \"hsla\": {\n                \"description\": \"hsla(hue 0..360, s%, v%, alpha 0.0 .. 1.0) color format\",\n                \"regex\": \"hsla[(][ ]*(?P<H>dec)[ ]*[,][ ]*(?P<S>perc)[ ]*[,][ ]*(?P<L>perc)[ ]*[,][ ]*(?P<A>float)[ ]*[)]\",\n                \"white\": \"hsla(0, 0%, 100%, 1.)\"\n            },\n            \"hsl\": {\n                \"description\": \"hsl(hue 0..360, s%, v%) color format\",\n                \"regex\": \"hsl[(][ ]*(?P<H>dec)[ ]*[,][ ]*(?P<S>perc)[ ]*[,][ ]*(?P<L>perc)[ ]*[)]\",\n                \"white\": \"hsl(0, 0%, 100%)\"\n            }\n        }\n    },\n    \"experimental\": {\n        \"asynchronosly_update_color_scheme\": false\n    },\n    \"debug\": false\n}\n"
        },
        {
          "name": "ColorPicker",
          "type": "tree",
          "content": null
        },
        {
          "name": "Context.sublime-menu",
          "type": "blob",
          "size": 0.3427734375,
          "content": "[\n    { \"caption\": \"-\", \"id\": \"Color Highlighter\" },\n    { \"command\": \"color_highlighter_pick_color\", \"caption\": \"Insert color with color picker\"},\n    { \"command\": \"color_highlighter_next_color\", \"caption\": \"Convert color to the next format\"},\n    { \"command\": \"color_highlighter_previous_color\", \"caption\": \"Convert color to the previous format\"}\n]\n"
        },
        {
          "name": "Default (OSX).sublime-keymap",
          "type": "blob",
          "size": 0.6845703125,
          "content": "[\n    {\n        \"keys\": [\"super+shift+,\"],\n        \"command\": \"color_highlighter_next_color\",\n        \"context\": [\n            {\n                \"key\": \"color_highlighter.color_highlighter_next_color\"\n            }\n        ]\n    },\n    {\n        \"keys\": [\"super+shift+.\"],\n        \"command\": \"color_highlighter_previous_color\",\n        \"context\": [\n            {\n                \"key\": \"color_highlighter.color_highlighter_previous_color\"\n            }\n        ]\n    },\n    {\n        \"keys\": [\"super+shift+c\"],\n        \"command\": \"color_highlighter_pick_color\",\n        \"context\": [\n            {\n                \"key\": \"color_highlighter.color_highlighter_pick_color\"\n            }\n        ]\n    }\n]\n"
        },
        {
          "name": "Default.sublime-keymap",
          "type": "blob",
          "size": 0.681640625,
          "content": "[\n    {\n        \"keys\": [\"ctrl+shift+,\"],\n        \"command\": \"color_highlighter_next_color\",\n        \"context\": [\n            {\n                \"key\": \"color_highlighter.color_highlighter_next_color\"\n            }\n        ]\n    },\n    {\n        \"keys\": [\"ctrl+shift+.\"],\n        \"command\": \"color_highlighter_previous_color\",\n        \"context\": [\n            {\n                \"key\": \"color_highlighter.color_highlighter_previous_color\"\n            }\n        ]\n    },\n    {\n        \"keys\": [\"ctrl+shift+c\"],\n        \"command\": \"color_highlighter_pick_color\",\n        \"context\": [\n            {\n                \"key\": \"color_highlighter.color_highlighter_pick_color\"\n            }\n        ]\n    }\n]\n"
        },
        {
          "name": "Main.sublime-menu",
          "type": "blob",
          "size": 33.1435546875,
          "content": "[\n    {\n        \"id\": \"tools\",\n        \"children\":\n        [\n            {\n                \"caption\": \"Color Highlighter\",\n                \"children\":\n                [\n                    {\n                        \"caption\": \"Default key bindings\",\n                        \"command\": \"color_highlighter_set_setting\",\n                        \"checkbox\": true,\n                        \"args\": {\n                            \"setting\": \"default_keybindings\"\n                        }\n                    },\n                    {\n                        \"caption\": \"Autoreload\",\n                        \"children\":\n                        [\n                            {\n                                \"caption\": \"Reload plugin when settings change\",\n                                \"command\": \"color_highlighter_set_setting\",\n                                \"checkbox\": true,\n                                \"args\": {\n                                    \"setting\": \"autoreload.when_settings_change\"\n                                }\n                            },\n                            {\n                                \"caption\": \"Reload plugin when color scheme changes\",\n                                \"command\": \"color_highlighter_set_setting\",\n                                \"checkbox\": true,\n                                \"args\": {\n                                    \"setting\": \"autoreload.when_color_scheme_change\"\n                                }\n                            }\n                        ]\n                    },\n                    {\n                        \"caption\": \"Color highlighters\",\n                        \"children\":\n                        [\n                            {\n                                \"caption\": \"Highlight colors in selected text\",\n                                \"children\":\n                                [\n                                    {\n                                        \"caption\": \"Inline highlighting style\",\n                                        \"children\":\n                                        [\n                                            {\n                                                \"caption\": \"None\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.selection.color_highlighters.color_scheme.highlight_style\",\n                                                    \"value\": \"none\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Filled\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.selection.color_highlighters.color_scheme.highlight_style\",\n                                                    \"value\": \"filled\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Text\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.selection.color_highlighters.color_scheme.highlight_style\",\n                                                    \"value\": \"text\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Outlined\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.selection.color_highlighters.color_scheme.highlight_style\",\n                                                    \"value\": \"outlined\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Underlined solid\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.selection.color_highlighters.color_scheme.highlight_style\",\n                                                    \"value\": \"underlined_solid\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Underlined strippled\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.selection.color_highlighters.color_scheme.highlight_style\",\n                                                    \"value\": \"underlined_strippled\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Underlined squiggly\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.selection.color_highlighters.color_scheme.highlight_style\",\n                                                    \"value\": \"underlined_squiggly\"\n                                                }\n                                            }\n                                        ]\n                                    },\n                                    {\n                                        \"caption\": \"Gutter icon style\",\n                                        \"children\":\n                                        [\n                                            {\n                                                \"caption\": \"None\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.selection.color_highlighters.gutter_icons.icon_style\",\n                                                    \"value\": \"none\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Circle\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.selection.color_highlighters.gutter_icons.icon_style\",\n                                                    \"value\": \"circle\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Square\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.selection.color_highlighters.gutter_icons.icon_style\",\n                                                    \"value\": \"square\"\n                                                }\n                                            }\n                                        ]\n                                    },\n                                    {\n                                        \"caption\": \"Highlight colors with blocks\",\n                                        \"children\":\n                                        [\n                                            {\n                                                \"caption\": \"None\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.selection.color_highlighters.phantoms.style\",\n                                                    \"value\": \"none\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"To the right of the color\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.selection.color_highlighters.phantoms.style\",\n                                                    \"value\": \"right\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"To the left of the color\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.selection.color_highlighters.phantoms.style\",\n                                                    \"value\": \"left\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Below the color\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.selection.color_highlighters.phantoms.style\",\n                                                    \"value\": \"below\"\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ]\n                            },\n                            {\n                                \"caption\": \"Highlight colors when hovering the cursor above them\",\n                                \"children\":\n                                [\n                                    {\n                                        \"caption\": \"Inline highlighting style\",\n                                        \"children\":\n                                        [\n                                            {\n                                                \"caption\": \"None\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.hover.color_highlighters.color_scheme.highlight_style\",\n                                                    \"value\": \"none\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Filled\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.hover.color_highlighters.color_scheme.highlight_style\",\n                                                    \"value\": \"filled\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Text\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.hover.color_highlighters.color_scheme.highlight_style\",\n                                                    \"value\": \"text\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Outlined\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.hover.color_highlighters.color_scheme.highlight_style\",\n                                                    \"value\": \"outlined\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Underlined solid\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.hover.color_highlighters.color_scheme.highlight_style\",\n                                                    \"value\": \"underlined_solid\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Underlined strippled\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.hover.color_highlighters.color_scheme.highlight_style\",\n                                                    \"value\": \"underlined_strippled\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Underlined squiggly\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.hover.color_highlighters.color_scheme.highlight_style\",\n                                                    \"value\": \"underlined_squiggly\"\n                                                }\n                                            }\n                                        ]\n                                    },\n                                    {\n                                        \"caption\": \"Gutter icon style\",\n                                        \"children\":\n                                        [\n                                            {\n                                                \"caption\": \"None\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.hover.color_highlighters.gutter_icons.icon_style\",\n                                                    \"value\": \"none\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Circle\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.hover.color_highlighters.gutter_icons.icon_style\",\n                                                    \"value\": \"circle\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Square\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.hover.color_highlighters.gutter_icons.icon_style\",\n                                                    \"value\": \"square\"\n                                                }\n                                            }\n                                        ]\n                                    },\n                                    {\n                                        \"caption\": \"Highlight colors with blocks\",\n                                        \"children\":\n                                        [\n                                            {\n                                                \"caption\": \"None\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.hover.color_highlighters.phantoms.style\",\n                                                    \"value\": \"none\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"To the right of the color\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.hover.color_highlighters.phantoms.style\",\n                                                    \"value\": \"right\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"To the left of the color\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.hover.color_highlighters.phantoms.style\",\n                                                    \"value\": \"left\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Below the color\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.hover.color_highlighters.phantoms.style\",\n                                                    \"value\": \"below\"\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ]\n                            },\n                            {\n                                \"caption\": \"Highlight colors in all text\",\n                                \"children\":\n                                [\n                                    {\n                                        \"caption\": \"Inline highlighting style\",\n                                        \"children\":\n                                        [\n                                            {\n                                                \"caption\": \"None\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.all_content.color_highlighters.color_scheme.highlight_style\",\n                                                    \"value\": \"none\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Filled\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.all_content.color_highlighters.color_scheme.highlight_style\",\n                                                    \"value\": \"filled\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Text\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.all_content.color_highlighters.color_scheme.highlight_style\",\n                                                    \"value\": \"text\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Outlined\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.all_content.color_highlighters.color_scheme.highlight_style\",\n                                                    \"value\": \"outlined\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Underlined solid\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.all_content.color_highlighters.color_scheme.highlight_style\",\n                                                    \"value\": \"underlined_solid\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Underlined strippled\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.all_content.color_highlighters.color_scheme.highlight_style\",\n                                                    \"value\": \"underlined_strippled\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Underlined squiggly\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.all_content.color_highlighters.color_scheme.highlight_style\",\n                                                    \"value\": \"underlined_squiggly\"\n                                                }\n                                            }\n                                        ]\n                                    },\n                                    {\n                                        \"caption\": \"Gutter icon style\",\n                                        \"children\":\n                                        [\n                                            {\n                                                \"caption\": \"None\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.all_content.color_highlighters.gutter_icons.icon_style\",\n                                                    \"value\": \"none\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Circle\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.all_content.color_highlighters.gutter_icons.icon_style\",\n                                                    \"value\": \"circle\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Square\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.all_content.color_highlighters.gutter_icons.icon_style\",\n                                                    \"value\": \"square\"\n                                                }\n                                            }\n                                        ]\n                                    },\n                                    {\n                                        \"caption\": \"Highlight colors with blocks\",\n                                        \"children\":\n                                        [\n                                            {\n                                                \"caption\": \"None\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.all_content.color_highlighters.phantoms.style\",\n                                                    \"value\": \"none\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"To the right of the color\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.all_content.color_highlighters.phantoms.style\",\n                                                    \"value\": \"right\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"To the left of the color\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.all_content.color_highlighters.phantoms.style\",\n                                                    \"value\": \"left\"\n                                                }\n                                            },\n                                            {\n                                                \"caption\": \"Below the color\",\n                                                \"command\": \"color_highlighter_set_setting\",\n                                                \"checkbox\": true,\n                                                \"args\": {\n                                                    \"setting\": \"search_colors_in.all_content.color_highlighters.phantoms.style\",\n                                                    \"value\": \"below\"\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ]\n                            }\n                        ]\n                    },\n                    {\n                        \"caption\": \"Experimental\",\n                        \"children\": [\n                            {\n                                \"caption\": \"Update color scheme asynchronously\",\n                                \"command\": \"color_highlighter_set_setting\",\n                                \"checkbox\": true,\n                                \"args\": {\n                                    \"setting\": \"experimental.asynchronosly_update_color_scheme\"\n                                }\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        \"caption\": \"Preferences\",\n        \"mnemonic\": \"n\",\n        \"id\": \"preferences\",\n        \"children\":\n        [\n            {\n                \"caption\": \"Package Settings\",\n                \"mnemonic\": \"P\",\n                \"id\": \"package-settings\",\n                \"children\":\n                [\n                    {\n                        \"caption\": \"Color Highlighter\",\n                        \"children\":\n                        [\n                            {\n                                \"command\": \"open_file\", \"args\":\n                                {\n                                    \"file\": \"${packages}/Color Highlighter/ColorHighlighter.sublime-settings\"\n                                },\n                                \"caption\": \"Settings – Default\"\n                            },\n                            {\n                                \"command\": \"open_file\", \"args\":\n                                {\n                                    \"file\": \"${packages}/User/ColorHighlighter.sublime-settings\"\n                                },\n                                \"caption\": \"Settings – User\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n]\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.1591796875,
          "content": "# ColorHighlighter\n\n[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=C2L27SE4YDFAC)\n[![Package Control Downloads][pc-image]][pc-link]\n\n_ColorHighlighter is a plugin for the Sublime Text 2 and 3, which unobtrusively previews color values by underlaying the selected hex codes in different styles, coloring text or gutter icons. Also, plugin adds color picker, color format converter to easily modify colors._\n\n![Description](http://i.imgur.com/UPmEk09.png)\n\n![Description](http://i.imgur.com/kl4joGA.png)\n\n![Description](http://sametmax.com/wp-content/uploads/2013/04/hilight-color.gif)\n\n![Description](http://sametmax.com/wp-content/uploads/2013/04/color-picker.gif)\n\n## Installation\n\n- **_Recommended_** - Using [Sublime Package Control](https://packagecontrol.io \"Sublime Package Control\")\n    - <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>P</kbd> then select `Package Control: Install Package`\n    - install `Color Highlighter`\n- Alternatively, download the package from [GitHub](https://github.com/Monnoroch/ColorHighlighter \"ColorHighlighter\") into your `Packages` folder.\n- For gutter icons install [ImageMagick](http://www.imagemagick.org/). To configure ImageMagick, update `icon_factory.convert_command` plugin setting to the path of the convert utility on your machine, hint: use the `which convert` command on *nix machines.\n\n## Color Highlighting styles\n\nThere are three color highlighting styles: inline highlighting, underline blocks, and gutter icons.\n\n### Gutter icons\n\nTo enable highlighting colors with gutter icons go to\n`Tools > Color Highlighter > Color Highlighters > Highlight colors in all text > Gutter icon style` and select `Circle` or `Square`.\nHighlighting colors with gutter icons requires ImageMagick to be installed (see the installation section).\nGoing to `Tools > Color Highlighter > Color Highlighters > Highlight colors in all text > Gutter icon style` and selecting `None` will disable it.\n\nThis mode can cause pauses when opening big files for the first time with \"highlight everything\" mode because\nthe plugin needs to create icons for all newly encountered colors.\n\n### Blocks\n\nHighlighting colors with blocks will display colored blocks right near highlighted colors.\nThese blocks cause text reflow.\nTo enable highlighting colors with underline blocks go to\n`Tools > Color Highlighter > Color Highlighters > Highlight colors in all text > Highlight colors with blocks`\nand choose one of `To the right of the color`, `To the left of the color`, `Below the color`.\nThese are options are self-explanatory.\n\nFor `Below the color` the block will be the same size that the color code is. For `To the right of the color` and\n`To the left of the color` the block size can be configured with the `length` parameter which defines the size of\nthe block in characters.\n\nGoing to `Tools > Color Highlighter > Color Highlighters > Highlight colors in all text > Highlight colors with blocks`\nand selecting `None` will disable it.\n\n### Inline highlighting\n\nInline color highlighting itself has several styles.\nAll of them require Color Scheme modification, so when this mode is enabled the view's color scheme is changed to a fake one,\nwhich is a copy of the real color scheme, but augmented with the plugin-specific definitions.\nTo disable inline highlighting  go to\n`Tools > Color Highlighter > Color Highlighters > Highlight colors in all text > Inline highlighting style` and select `None`.\n\n##### Inline blocks\n\nHighlighting colors with inline blocks will display colored blocks right on top of highlighted colors.\nTo enable highlighting colors with inline blocks go to\n`Tools > Color Highlighter > Color Highlighters > Highlight colors in all text > Inline highlighting style` and select `Filled`.\n\n##### Colored text\n\nHighlighting colors with colored text will make colors text be rendered with that color.\nTo enable highlighting colors with colored text go to\n`Tools > Color Highlighter > Color Highlighters > Highlight colors in all text > Inline highlighting style` and select `Text`.\n\n##### Outline and underline styles\n\nIf one wants color highlighting to be more subtle that one with inline blocks he can select one of\n`Outlined`, `Underlined solid`, `Underlined strippled`, `Underlined squiggly` styles in\n`Tools > Color Highlighter > Color Highlighters > Highlight colors in all text > Inline highlighting style` menu.\n\n## Color Highlighting modes\n\n#### Highlight everything\n\nIn this mode the plugin parses the whole file and highlights all colors it can find.\nHighlighting style settings for that mode are in `Tools > Color Highlighter > Color Highlighters > Highlight colors in all text`.\n\nThis mode can cause pauses when opening big files because the plugin needs to parse the whole file.\n\n#### Highlight selection\n\nIn this mode the plugin highlights colors under the cursor. It supports multiple selections as well.\nHighlighting style settings for that mode are in `Tools > Color Highlighter > Color Highlighters > Highlight colors in selected text`.\n\n#### Highlight when hovering\n\nIn this mode the plugin highlights colors when one hovers over them with the mouse cursor.\nHighlighting style settings for that mode are in `Tools > Color Highlighter > Color Highlighters > Highlight colors when hovering the cursor above them`.\n\n#### Combined\n\nThese three modes can be combined in any possible way.\nThe settings for all three modes are completely independent and can be configured all at once.\nFor example, the default settings are to highlight all colors with gutter icons and with colored text,\nhighlight selected colors with blocks to the right of the color and highlight colors one hovers over with inline blocks.\n\n## Color picker\n\nJust put the cursor (or multiple cursors) where you want the color and and select \"Insert color with color picker\"\nin context menu (or press <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>C</kbd>).\nSelect the color in a popup color picker and it will be inserted in place of all your cursors.\nIf some of your cursors are in existing colors, these colors will be replaces with a newly selected one.\n\n## Color converter\n\nJust put the cursor (or multiple cursors) on the color code and select \"Convert color to the next format\" in context menu (or press <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>,</kbd>) or \"Convert color to the previous format\" in context menu (or press <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>.</kbd>).\nThis will convert colors under cursors between different supported color formats.\n\n## Variables highlighting\n\nTHIS FEATURE CURRENTLY DOESN'T WORK.\n\nIt was removed because it didn't work very well, was slow and buggy.\nRight now I'm in the process of searching for ways to implement it nicely, but it's not ready yet.\nI also plan to include color functions and native CSS variables into the release of this feature.\nPlease be patient.\n\n## FAQ\n\n#### My plugin settings are gone!\n\nThe settings file in the 8.0 has a completely different structure and way more features to configure.\nBecause of it it's incompatible with the old one.\nTo eliminate weird migration bugs I've decided to delete user settings file upon migration to the new version.\nThe settings are only deleted this once, so you can reconfigure the plugin again after update and the settings won't\ndisappear again.\n\n#### The plugin doesn't work in HTML/JS/VUE/OTHER files\n\nYes, it does.\nHighlighting colors is just disabled by default in all files but stylesheets.\nTo enable highlighting colors in files with any extension you need to modify `file_extensions` setting\nand add the required extension there.\nYou can also put `\"all\"` there and the plugin will be enabled for all files.\nIf you have enabled some extensions before, they need to be reenabled due to the previous section.\n\n#### Inline color highlighting works incorrectly\n\nInline color highlighting is not guaranteed to be compatible with any plugin that generates or changes color schemes,\nsuch as `SublimeLinter`. If you use one of those plugins you have to either disable them completely, or configure them\nto not modify the color scheme or configure Color Highlighter to not modify the color scheme, which basically means\ndisabling inline color highlighting.\n\n##### I don't have any other plugin that modifies the color scheme and inline highlighting still works incorrectly\n\nDue to a Sublime Text not ordering added regions deterministically enabling both text and non-text inline highlighting\nat the same time might work properly. For example, if you select `Text` in\n`Tools > Color Highlighter > Color Highlighters > Highlight colors in all text > Inline highlighting style`\nand `Filled` in\n`Tools > Color Highlighter > Color Highlighters > Highlight colors in selected text > Inline highlighting style`\nit might not work all the time. If you close/open the file a few times and sometimes it's working fine and sometimes it\nisn't, this is exactly this issue.\n\n**Donate**\n\nThank you guys for all your support, I couldn't have done it without your contributions. Every little bit helps!\n\n[![paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=C2L27SE4YDFAC)\n\n[pc-image]: https://img.shields.io/packagecontrol/dt/Color%20Highlighter.svg\n[pc-link]: https://packagecontrol.io/packages/Color%20Highlighter\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "color_converter.py",
          "type": "blob",
          "size": 16.89453125,
          "content": "\"\"\"The module with a component for converting color text into colors.\"\"\"\n\nimport colorsys\n\n\nclass ColorFormatConverter(object):\n    \"\"\"An interface for converting colors in a specific format to a canonical color representation.\"\"\"\n\n    def to_color(self, match):\n        \"\"\"\n        Convert a color match into a canonical color representation.\n\n        Arguments:\n        - match - a dict with matched color formats.\n        Returns a canonical color representation for the match.\n        \"\"\"\n        raise NotImplementedError\n\n    def from_color(self, color):\n        \"\"\"\n        Convert a canonical color representation into a current color representation..\n\n        Arguments:\n        - color - a canonical color representation.\n        Returns a current color representation for the input color.\n        \"\"\"\n        raise NotImplementedError\n\n\nclass _Sharp8ColorConverter(ColorFormatConverter):\n    \"\"\"A class for converting colors in sharp8 representation to a canonical one.\"\"\"\n\n    def to_color(self, match):\n        \"\"\"\n        Get a color match into a canonical color representation.\n\n        Arguments:\n        - match - a dict with matched color formats.\n        Returns a canonical color representation for the match.\n        \"\"\"\n        return match[\"sharp8\"]\n\n    def from_color(self, color):\n        \"\"\"\n        Convert a canonical color representation into a current color representation..\n\n        Arguments:\n        - color - a canonical color representation.\n        Returns a current color representation for the input color.\n        \"\"\"\n        return color\n\n\nclass _Sharp6ColorConverter(ColorFormatConverter):\n    \"\"\"A class for converting colors in sharp6 representation to a canonical one.\"\"\"\n\n    def to_color(self, match):\n        \"\"\"\n        Get a color match into a canonical color representation.\n\n        Arguments:\n        - match - a dict with matched color formats.\n        Returns a canonical color representation for the match.\n        \"\"\"\n        return match[\"sharp6\"] + \"ff\"\n\n    def from_color(self, color):\n        \"\"\"\n        Convert a canonical color representation into a current color representation..\n\n        Arguments:\n        - color - a canonical color representation.\n        Returns a current color representation for the input color.\n        \"\"\"\n        return color[:-2]\n\n\nclass _Sharp4ColorConverter(ColorFormatConverter):\n    \"\"\"A class for converting colors in sharp4 representation to a canonical one.\"\"\"\n\n    def to_color(self, match):\n        \"\"\"\n        Get a color match into a canonical color representation.\n\n        Arguments:\n        - match - a dict with matched color formats.\n        Returns a canonical color representation for the match.\n        \"\"\"\n        return \"#%s%s%s%s\" % (\n            match[\"sharp4_R\"] * 2, match[\"sharp4_G\"] * 2, match[\"sharp4_B\"] * 2, match[\"sharp4_A\"] * 2)\n\n    def from_color(self, color):\n        \"\"\"\n        Convert a canonical color representation into a current color representation..\n\n        Arguments:\n        - color - a canonical color representation.\n        Returns a current color representation for the input color.\n        \"\"\"\n        return \"#%s%s%s%s\" % (color[1], color[3], color[5], color[7])\n\n\nclass _Sharp3ColorConverter(ColorFormatConverter):\n    \"\"\"A class for converting colors in sharp3 representation to a canonical one.\"\"\"\n\n    def to_color(self, match):\n        \"\"\"\n        Get a color match into a canonical color representation.\n\n        Arguments:\n        - match - a dict with matched color formats.\n        Returns a canonical color representation for the match.\n        \"\"\"\n        return \"#%s%s%sff\" % (match[\"sharp3_R\"] * 2, match[\"sharp3_G\"] * 2, match[\"sharp3_B\"] * 2)\n\n    def from_color(self, color):\n        \"\"\"\n        Convert a canonical color representation into a current color representation..\n\n        Arguments:\n        - color - a canonical color representation.\n        Returns a current color representation for the input color.\n        \"\"\"\n        return \"#%s%s%s\" % (color[1], color[3], color[5])\n\n\nclass _RgbaColorConverter(ColorFormatConverter):\n    \"\"\"A class for converting colors in rgba representation to a canonical one.\"\"\"\n\n    def to_color(self, match):\n        \"\"\"\n        Get a color match into a canonical color representation.\n\n        Arguments:\n        - match - a dict with matched color formats.\n        Returns a canonical color representation for the match.\n        \"\"\"\n        r = _parse_decimal_or_percent_channel(match[\"rgba_R\"])  # pylint: disable=invalid-name\n        g = _parse_decimal_or_percent_channel(match[\"rgba_G\"])  # pylint: disable=invalid-name\n        b = _parse_decimal_or_percent_channel(match[\"rgba_B\"])  # pylint: disable=invalid-name\n        a = _parse_float_channel(match[\"rgba_A\"])  # pylint: disable=invalid-name\n        if r is None or g is None or b is None or a is None:\n            return None\n        return \"#%02X%02X%02X%02X\" % (r, g, b, a)\n\n    def from_color(self, color):\n        \"\"\"\n        Convert a canonical color representation into a current color representation..\n\n        Arguments:\n        - color - a canonical color representation.\n        Returns a current color representation for the input color.\n        \"\"\"\n        r = _channel_to_decimal(color[1:3])  # pylint: disable=invalid-name\n        g = _channel_to_decimal(color[3:5])  # pylint: disable=invalid-name\n        b = _channel_to_decimal(color[5:7])  # pylint: disable=invalid-name\n        a = _channel_to_float(color[7:9])  # pylint: disable=invalid-name\n        return \"rgba(%d, %d, %d, %s)\" % (r, g, b, a)\n\n\nclass _RgbColorConverter(ColorFormatConverter):\n    \"\"\"A class for converting colors in rgb representation to a canonical one.\"\"\"\n\n    def to_color(self, match):\n        \"\"\"\n        Get a color match into a canonical color representation.\n\n        Arguments:\n        - match - a dict with matched color formats.\n        Returns a canonical color representation for the match.\n        \"\"\"\n        r = _parse_decimal_or_percent_channel(match[\"rgb_R\"])  # pylint: disable=invalid-name\n        g = _parse_decimal_or_percent_channel(match[\"rgb_G\"])  # pylint: disable=invalid-name\n        b = _parse_decimal_or_percent_channel(match[\"rgb_B\"])  # pylint: disable=invalid-name\n        if r is None or g is None or b is None:\n            return None\n        return \"#%02X%02X%02Xff\" % (r, g, b)\n\n    def from_color(self, color):\n        \"\"\"\n        Convert a canonical color representation into a current color representation..\n\n        Arguments:\n        - color - a canonical color representation.\n        Returns a current color representation for the input color.\n        \"\"\"\n        r = _channel_to_decimal(color[1:3])  # pylint: disable=invalid-name\n        g = _channel_to_decimal(color[3:5])  # pylint: disable=invalid-name\n        b = _channel_to_decimal(color[5:7])  # pylint: disable=invalid-name\n        return \"rgb(%d, %d, %d)\" % (r, g, b)\n\n\nclass _HsvaColorConverter(ColorFormatConverter):\n    \"\"\"A class for converting colors in hsva representation to a canonical one.\"\"\"\n\n    def to_color(self, match):\n        \"\"\"\n        Get a color match into a canonical color representation.\n\n        Arguments:\n        - match - a dict with matched color formats.\n        Returns a canonical color representation for the match.\n        \"\"\"\n        h = _parse_hue_channel(match[\"hsva_H\"])  # pylint: disable=invalid-name\n        s = _parse_percent_channel(match[\"hsva_S\"])  # pylint: disable=invalid-name\n        v = _parse_percent_channel(match[\"hsva_V\"])  # pylint: disable=invalid-name\n        a = _parse_float_channel(match[\"hsva_A\"])  # pylint: disable=invalid-name\n        if h is None or s is None or v is None or a is None:\n            return None\n        r, g, b = _hsv_to_rgb(h, s, v)  # pylint: disable=invalid-name\n        return \"#%02X%02X%02X%02X\" % (r, g, b, a)\n\n    def from_color(self, color):\n        \"\"\"\n        Convert a canonical color representation into a current color representation..\n\n        Arguments:\n        - color - a canonical color representation.\n        Returns a current color representation for the input color.\n        \"\"\"\n        r = _channel_to_decimal(color[1:3])  # pylint: disable=invalid-name\n        g = _channel_to_decimal(color[3:5])  # pylint: disable=invalid-name\n        b = _channel_to_decimal(color[5:7])  # pylint: disable=invalid-name\n        a = _channel_to_float(color[7:9])  # pylint: disable=invalid-name\n        h, s, v = _rgb_to_hsv(r, g, b)  # pylint: disable=invalid-name\n        return \"hsva(%d, %d%%, %d%%, %s)\" % (h, s, v, a)\n\n\nclass _HsvColorConverter(ColorFormatConverter):\n    \"\"\"A class for converting colors in hsv representation to a canonical one.\"\"\"\n\n    def to_color(self, match):\n        \"\"\"\n        Get a color match into a canonical color representation.\n\n        Arguments:\n        - match - a dict with matched color formats.\n        Returns a canonical color representation for the match.\n        \"\"\"\n        h = _parse_hue_channel(match[\"hsv_H\"])  # pylint: disable=invalid-name\n        s = _parse_percent_channel(match[\"hsv_S\"])  # pylint: disable=invalid-name\n        v = _parse_percent_channel(match[\"hsv_V\"])  # pylint: disable=invalid-name\n        if h is None or s is None or v is None:\n            return None\n        r, g, b = _hsv_to_rgb(h, s, v)  # pylint: disable=invalid-name\n        return \"#%02X%02X%02Xff\" % (r, g, b)\n\n    def from_color(self, color):\n        \"\"\"\n        Convert a canonical color representation into a current color representation..\n\n        Arguments:\n        - color - a canonical color representation.\n        Returns a current color representation for the input color.\n        \"\"\"\n        r = _channel_to_decimal(color[1:3])  # pylint: disable=invalid-name\n        g = _channel_to_decimal(color[3:5])  # pylint: disable=invalid-name\n        b = _channel_to_decimal(color[5:7])  # pylint: disable=invalid-name\n        h, s, v = _rgb_to_hsv(r, g, b)  # pylint: disable=invalid-name\n        return \"hsv(%d, %d%%, %d%%)\" % (h, s, v)\n\n\nclass _HslaColorConverter(ColorFormatConverter):\n    \"\"\"A class for converting colors in hsla representation to a canonical one.\"\"\"\n\n    def to_color(self, match):\n        \"\"\"\n        Get a color match into a canonical color representation.\n\n        Arguments:\n        - match - a dict with matched color formats.\n        Returns a canonical color representation for the match.\n        \"\"\"\n        h = _parse_hue_channel(match[\"hsla_H\"])  # pylint: disable=invalid-name\n        s = _parse_percent_channel(match[\"hsla_S\"])  # pylint: disable=invalid-name\n        l = _parse_percent_channel(match[\"hsla_L\"])  # pylint: disable=invalid-name\n        a = _parse_float_channel(match[\"hsla_A\"])  # pylint: disable=invalid-name\n        if h is None or s is None or l is None or a is None:\n            return None\n        r, g, b = _hsl_to_rgb(h, s, l)  # pylint: disable=invalid-name\n        return \"#%02X%02X%02X%02X\" % (r, g, b, a)\n\n    def from_color(self, color):\n        \"\"\"\n        Convert a canonical color representation into a current color representation..\n\n        Arguments:\n        - color - a canonical color representation.\n        Returns a current color representation for the input color.\n        \"\"\"\n        r = _channel_to_decimal(color[1:3])  # pylint: disable=invalid-name\n        g = _channel_to_decimal(color[3:5])  # pylint: disable=invalid-name\n        b = _channel_to_decimal(color[5:7])  # pylint: disable=invalid-name\n        a = _channel_to_float(color[7:9])  # pylint: disable=invalid-name\n        h, s, l = _rgb_to_hsl(r, g, b)  # pylint: disable=invalid-name\n        return \"hsla(%d, %d%%, %d%%, %s)\" % (h, s, l, a)\n\n\nclass _HslColorConverter(ColorFormatConverter):\n    \"\"\"A class for converting colors in hsl representation to a canonical one.\"\"\"\n\n    def to_color(self, match):\n        \"\"\"\n        Get a color match into a canonical color representation.\n\n        Arguments:\n        - match - a dict with matched color formats.\n        Returns a canonical color representation for the match.\n        \"\"\"\n        h = _parse_hue_channel(match[\"hsl_H\"])  # pylint: disable=invalid-name\n        s = _parse_percent_channel(match[\"hsl_S\"])  # pylint: disable=invalid-name\n        l = _parse_percent_channel(match[\"hsl_L\"])  # pylint: disable=invalid-name\n        if h is None or s is None or l is None:\n            return None\n        r, g, b = _hsl_to_rgb(h, s, l)  # pylint: disable=invalid-name\n        return \"#%02X%02X%02Xff\" % (r, g, b)\n\n    def from_color(self, color):\n        \"\"\"\n        Convert a canonical color representation into a current color representation..\n\n        Arguments:\n        - color - a canonical color representation.\n        Returns a current color representation for the input color.\n        \"\"\"\n        r = _channel_to_decimal(color[1:3])  # pylint: disable=invalid-name\n        g = _channel_to_decimal(color[3:5])  # pylint: disable=invalid-name\n        b = _channel_to_decimal(color[5:7])  # pylint: disable=invalid-name\n        h, s, l = _rgb_to_hsl(r, g, b)  # pylint: disable=invalid-name\n        return \"hsl(%d, %d%%, %d%%)\" % (h, s, l)\n\n\nclass ColorConverter(ColorFormatConverter):\n    \"\"\"Class for converting color text into colors.\"\"\"\n\n    _converters = {\n        \"sharp8\": _Sharp8ColorConverter(),\n        \"sharp6\": _Sharp6ColorConverter(),\n        \"sharp4\": _Sharp4ColorConverter(),\n        \"sharp3\": _Sharp3ColorConverter(),\n        \"rgba\": _RgbaColorConverter(),\n        \"rgb\": _RgbColorConverter(),\n        \"hsva\": _HsvaColorConverter(),\n        \"hsv\": _HsvColorConverter(),\n        \"hsla\": _HslaColorConverter(),\n        \"hsl\": _HslColorConverter()\n    }\n\n    def __init__(self, formats):\n        \"\"\"\n        Init a ColorConverter.\n\n        Arguments:\n        - formats - color formats configuration.\n        \"\"\"\n        self._formats = formats\n\n    def to_color(self, match):\n        \"\"\"\n        Convert a color match into a canonical color representation.\n\n        Arguments:\n        - match - a dict with matched color formats.\n        Returns a canonical color representation for the match.\n        \"\"\"\n        for name in self._formats:\n            if match.get(name, None) is not None:\n                color = ColorConverter._converters[name].to_color(match)\n                if color is None:\n                    return None\n                return color.lower()\n        raise Exception(\"Match %s could not be canonicalized.\" % match)\n\n    def from_color(self, color):\n        \"\"\"\n        Convert a canonical color representation into a current color representation..\n\n        Arguments:\n        - color - a pair of the canonical color representation and a color format.\n        Returns a current color representation for the input color.\n        \"\"\"\n        color, color_format = color\n        converter = self._converters.get(color_format, None)\n        if converter is None:\n            raise Exception(\"Unknown color format %s.\" % color_format)\n        return converter.from_color(color)\n\n\ndef _channel_to_decimal(channel):\n    return int(channel, 16)\n\n\ndef _channel_to_float(channel):\n    value = str(int(channel, 16) / 255.0)\n    if value.find(\".\") == -1:\n        return value\n    while value[-1] == \"0\":\n        value = value[:-1]\n    if value.startswith(\"0.\"):\n        value = value[1:]\n    return value\n\n\ndef _channel_to_percent(channel):\n    return int(round((int(channel, 16) * 100) / 255.0))\n\n\ndef _channel_to_hue(channel):\n    return int(round((int(channel, 16) * 360) / 255.0))\n\n\ndef _parse_decimal_or_percent_channel(text):\n    try:\n        return _parse_decimal_channel(text)\n    except Exception:  # pylint: disable=broad-except\n        return int(round(_parse_percent_channel(text) * 255))\n\n\ndef _parse_decimal_channel(text):\n    value = int(text)\n    if value < 0 or value > 255:\n        return None\n    return value\n\n\ndef _parse_float_channel(text):\n    if text == \".\":\n        return None\n    value = float(text)\n    if value < 0 or value > 1:\n        return None\n    return int(round(value * 255.0))\n\n\ndef _parse_percent_channel(text):\n    if text == \"0\":\n        return 0.0\n    if text[-1] != \"%\":\n        return None\n    value = int(text[:-1])\n    if value < 0 or value > 100:\n        return None\n    return value / 100.0\n\n\ndef _parse_hue_channel(text):\n    value = int(text)\n    if value < 0 or value > 360:\n        return None\n    if value == 360:\n        return 0\n    return value / 360.0\n\n\ndef _hsv_to_rgb(h, s, v):  # pylint: disable=invalid-name\n    r, g, b = colorsys.hsv_to_rgb(h, s, v)  # pylint: disable=invalid-name\n    return int(round(r * 255)), int(round(g * 255)), int(round(b * 255))\n\n\ndef _rgb_to_hsv(r, g, b):  # pylint: disable=invalid-name\n    h, s, v = colorsys.rgb_to_hsv(r / 255.0, g / 255.0, b / 255.0)  # pylint: disable=invalid-name\n    return int(round(h * 360)), int(round(s * 100)), int(round(v * 100))\n\n\ndef _hsl_to_rgb(h, s, l):  # pylint: disable=invalid-name\n    r, g, b = colorsys.hls_to_rgb(h, l, s)  # pylint: disable=invalid-name\n    return int(round(r * 255)), int(round(g * 255)), int(round(b * 255))\n\n\ndef _rgb_to_hsl(r, g, b):  # pylint: disable=invalid-name\n    h, l, s = colorsys.rgb_to_hls(r / 255.0, g / 255.0, b / 255.0)  # pylint: disable=invalid-name\n    return int(round(h * 360)), int(round(s * 100)), int(round(l * 100))\n"
        },
        {
          "name": "color_highlighter.py",
          "type": "blob",
          "size": 6.1328125,
          "content": "\"\"\"A base class for all color highlighters.\"\"\"\n\ntry:\n    from .regions import intersects_any\nexcept ValueError:\n    from regions import intersects_any\n\n\nclass ColorHighlighter(object):\n    \"\"\"A base class for all color highlighters.\"\"\"\n\n    def highlight_region(self, context, value):\n        \"\"\"\n        Highlight a region.\n\n        Arguments:\n        - context - a dict with color highlighter run data.\n        - value - tuple (region to highlight, it's color).\n        Returns True, if highlighted, False otherwise.\n        \"\"\"\n        raise NotImplementedError\n\n    def unhighlight_region(self, context, value):\n        \"\"\"\n        Unhighlight a region.\n\n        Arguments:\n        - context - a dict with color highlighter run data.\n        - value - tuple (region to unhighlight, it's color).\n        \"\"\"\n        raise NotImplementedError\n\n    def highlight_regions_done(self, context):  # noqa: D401\n        \"\"\"\n        Called after all calls to highlight_region and unhighlight_region from highlight_regions have been made.\n\n        Arguments:\n        - context - a dict with color highlighter run data.\n        \"\"\"\n        pass\n\n\nclass CombinedColorHighlighter(ColorHighlighter):\n    \"\"\"A color highlighter that forwards calls to a list of base color highlighters.\"\"\"\n\n    def __init__(self, color_highlighters):\n        \"\"\"\n        Create a combined color highlighter.\n\n        Arguments:\n        - color_highlighters - a list of color highlighters.\n        \"\"\"\n        self._color_highlighters = color_highlighters\n\n    def highlight_region(self, context, value):\n        \"\"\"\n        Highlight a region.\n\n        Arguments:\n        - context - a dict with color highlighter run data.\n        - value - tuple (region to highlight, it's color).\n        Returns True, if highlighted, False otherwise.\n        \"\"\"\n        for index, color_highlighter in enumerate(self._color_highlighters):\n            color_highlighter.highlight_region(context[index], value)\n\n    def highlight_regions_done(self, context):  # noqa: D401\n        \"\"\"\n        Called after all calls to highlight_region and unhighlight_region from highlight_regions have been made.\n\n        Arguments:\n        - context - a dict with color highlighter run data.\n        \"\"\"\n        for index, color_highlighter in enumerate(self._color_highlighters):\n            color_highlighter.highlight_regions_done(context[index])\n\n    def unhighlight_region(self, context, value):\n        \"\"\"\n        Unhighlight a region.\n\n        Arguments:\n        - context - a dict with color highlighter run data.\n        - value - tuple (region to unhighlight, it's color).\n        \"\"\"\n        for index, color_highlighter in enumerate(self._color_highlighters):\n            color_highlighter.unhighlight_region(context[index], value)\n\n    def make_context(self):\n        \"\"\"Get a list of contexts for a list of color highlighters in this combined color highlighter.\"\"\"\n        contexts = []\n        for _ in self._color_highlighters:\n            contexts.append({})\n        return contexts\n\n\nclass CachingColorHighlighter(CombinedColorHighlighter):  # pylint: disable=abstract-method\n    \"\"\"\n    A caching color highlighter.\n\n    It remembers currently highlighted regions and only rerenders those that are new and deletes those that are not\n    highlighted any more.\n    \"\"\"\n\n    def __init__(self, color_highlighters):\n        \"\"\"\n        Create a caching color highlighter.\n\n        Arguments:\n        - color_highlighters - a list of color highlighters.\n        \"\"\"\n        super(CachingColorHighlighter, self).__init__(color_highlighters)\n        self._existing_regions = {}\n\n    def highlight_regions(self, regions):\n        \"\"\"\n        Highlight regions.\n\n        Arguments:\n        - regions - an iterable of tuples (region to highlight, it's color).\n        \"\"\"\n        for region in self._existing_regions:\n            self._existing_regions[region].need_delete = True\n        self._highlight_regions(regions)\n\n    def highlight_regions_in(self, regions, regions_in):\n        \"\"\"\n        Highlight regions that lay within specified regions.\n\n        Arguments:\n        - regions - an iterable of tuples (region to highlight, it's color).\n        - regions_in - an iterable of regions wherr highlightings need to be updated.\n        \"\"\"\n        for region in self._existing_regions:\n            if intersects_any(region, regions_in):\n                self._existing_regions[region].need_delete = True\n        self._highlight_regions(regions)\n\n    def _highlight_regions(self, regions):\n        regions_to_highlight = []\n        changed_color = []\n        for value in regions:\n            region = value[0]\n            color = value[1]\n            if region in self._existing_regions:\n                region_data = self._existing_regions[region]\n                if region_data.color == color:\n                    region_data.need_delete = False\n                    continue\n                else:\n                    changed_color.append((region, region_data.color))\n\n            regions_to_highlight.append(value)\n            self._existing_regions[region] = _RegionData(color)\n\n        context = self.make_context()\n\n        regions_to_delete = []\n        for region in self._existing_regions:\n            region_data = self._existing_regions[region]\n            if region_data.need_delete:\n                self.unhighlight_region(context, (region, region_data.color))\n                regions_to_delete.append(region)\n        for value in changed_color:\n            self.unhighlight_region(context, value)\n        for region in regions_to_delete:\n            del self._existing_regions[region]\n        for value in regions_to_highlight:\n            self.highlight_region(context, value)\n        self.highlight_regions_done(context)\n\n    def clear_all(self):\n        \"\"\"Unhighlight all regions.\"\"\"\n        context = self.make_context()\n        for region in self._existing_regions:\n            self.unhighlight_region(context, (region, self._existing_regions[region].color))\n        self._existing_regions = {}\n        self.highlight_regions_done(context)\n\n\nclass _RegionData(object):  # pylint: disable=too-few-public-methods\n    def __init__(self, color):\n        self.color = color\n        self.need_delete = False\n"
        },
        {
          "name": "color_hover_listener.py",
          "type": "blob",
          "size": 2.916015625,
          "content": "\"\"\"Component for listening for selection changes in a view and highlighting selected colors.\"\"\"\n\ntry:\n    from . import st_helper\n    from .regions import NormalizedRegion, intersects\nexcept ValueError:\n    import st_helper\n    from regions import NormalizedRegion, intersects\n\n\nif st_helper.running_in_st():\n    import sublime  # pylint: disable=import-error\nelse:\n    from . import sublime\n\n\nclass ColorHoverListener(object):\n    \"\"\"Component for listening for cursor position changes in a view and highlighting colors under the cursor.\"\"\"\n\n    def __init__(self, color_searcher, view, color_highlighter):\n        \"\"\"\n        Init ColorSelectionListener.\n\n        Arguments:\n        - color_searcher - a color searcher to search colors with.\n        - view - a view to highlight colors in.\n        - color_highlighter - a combined color highlighter to highlight colors with.\n        \"\"\"\n        self._color_searcher = color_searcher\n        self._view = view\n        self._color_highlighter = color_highlighter\n        self._selection = []\n        self._regions = []\n        self._point = None\n\n    def on_hover(self, point, hover_zone):\n        \"\"\"\n        on_hover event.\n\n        Arguments:\n        - point - the position of the cursor.\n        - hover_zone - the soze where the cursor is currently.\n        \"\"\"\n        if hover_zone != sublime.HOVER_TEXT:\n            self._unhighlight()\n            return\n        self._point = point\n        self._update_highlighting()\n\n    def on_modified(self):\n        \"\"\"on_modified event.\"\"\"\n        if _intersects(self._regions, self._selection):\n            self._update_highlighting()\n\n    def on_selection_modified(self):\n        \"\"\"on_selection_modified event.\"\"\"\n        new_selection = [NormalizedRegion(region) for region in self._view.sel()]\n        if self._selection != new_selection:\n            self._selection = new_selection\n            self._on_selection_really_modified()\n\n    def _unhighlight(self):\n        self._color_highlighter.highlight_regions([])\n\n    def _update_highlighting(self):\n        color_regions = self._generate_color_regions(self._point)\n        self._color_highlighter.highlight_regions(color_regions)\n\n    def _on_selection_really_modified(self):\n        if not _intersects(self._regions, self._selection):\n            self._unhighlight()\n\n    def _generate_color_regions(self, point):\n        self._regions = []\n        region = sublime.Region(point, point)\n        normalized_region = NormalizedRegion(region)\n        for line in self._view.lines(region):\n            for (region, color, _) in self._color_searcher.search(self._view, NormalizedRegion(line)):\n                if intersects(region, normalized_region):\n                    self._regions.append(region)\n                    yield (region, color)\n\n\ndef _intersects(regions1, regions2):\n    for region1 in regions1:\n        for region2 in regions2:\n            if intersects(region1, region2):\n                return True\n    return False\n"
        },
        {
          "name": "color_scheme.py",
          "type": "blob",
          "size": 7.1318359375,
          "content": "\"\"\"A color highlighter that uses color scheme scopes to highlight colors.\"\"\"\n\nimport os\nfrom xml.etree import ElementTree\n\ntry:\n    from . import st_helper\nexcept ValueError:\n    import st_helper\n\ntry:\n    from . import path\n    from . import colors\n    from . import load_resource\n    from .gutter_icons_color_highlighter import GutterIconsColorHighlighter\nexcept ValueError:\n    import path\n    import colors\n    import load_resource\n    from gutter_icons_color_highlighter import GutterIconsColorHighlighter\n\n\n# NOTE: keep in sync with ColorSchemeBuilder._color_scope_template.\nCH_COLOR_SCOPE_NAME = \"CH_color\"\n\n\ndef parse_color_scheme(color_scheme, debug):\n    \"\"\"\n    Load, parse, validate and prepare the color scheme.\n\n    Arguments:\n    - color_scheme - the color scheme name to process.\n    Returns the new color scheme and a ColorSchemeData and a ColorSchemeWriter for input color scheme.\n    \"\"\"\n    fake_color_scheme = path.fake_color_scheme_path(color_scheme, path.ABSOLUTE)\n    new_color_scheme = path.fake_color_scheme_path(color_scheme, path.RELATIVE)\n    if color_scheme != new_color_scheme:\n        if os.path.exists(fake_color_scheme):\n            color_scheme = new_color_scheme\n    color_scheme_content = load_resource.load_resource(color_scheme)\n    if not st_helper.is_st3():\n        color_scheme_content = color_scheme_content.encode(\"utf-8\")\n    color_scheme_xml = ElementTree.fromstring(color_scheme_content)\n    scopes_array_element = _get_array_element(color_scheme_xml)\n    if scopes_array_element is None:\n        return None\n\n    scheme_settings_element = _get_scheme_settings_element(scopes_array_element)\n    if scheme_settings_element is None:\n        return None\n\n    background_color = _get_value_child_with_tag(scheme_settings_element, \"background\", \"string\")\n    if background_color is None:\n        return None\n\n    existing_colors = _load_colors(scopes_array_element)\n    background_color = colors.normalize_hex_color(background_color.text)\n    color_scheme_data = ColorSchemeData(background_color, existing_colors)\n    color_scheme_writer = ColorSchemeWriter(\n        fake_color_scheme, ElementTree.ElementTree(color_scheme_xml), scopes_array_element, debug)\n    return new_color_scheme, color_scheme_data, color_scheme_writer\n\n\nclass ColorSchemeData(object):  # pylint: disable=too-few-public-methods\n    \"\"\"Data object with all the data loaded from a color scheme.\"\"\"\n\n    def __init__(self, background_color, existing_colors):\n        \"\"\"\n        Create a color scheme data.\n\n        Argumets:\n        - background_color - the background color of a color scheme.\n        - existing_colors - the colors from color highlighter scopes, written to this color scheme.\n        \"\"\"\n        self.background_color = background_color\n        self.existing_colors = existing_colors\n\n\nclass ColorSchemeWriter(object):\n    \"\"\"A class that writes elements to a color scheme.\"\"\"\n\n    def __init__(self, color_scheme, xml_tree, scopes_array_element, debug):\n        \"\"\"\n        Create a ColorSchemeWriter.\n\n        Arguments:\n        - color_scheme - an absolute path to a color scheme.\n        - xml_tree - an ElementTree object for the color scheme.\n        - scopes_array_element - an Element that represents the dict array in the color scheme XML.\n        - debug - whether to enable debug mode.\n        \"\"\"\n        self._color_scheme = color_scheme\n        self._xml_tree = xml_tree\n        self._scopes_array_element = scopes_array_element\n        self._debug = debug\n\n    def add_scopes(self, scopes):\n        \"\"\"\n        Add scopes to the color scheme.\n\n        Arguments:\n        - scopes -- an iterable of Elements with scopes to add.\n        \"\"\"\n        self._scopes_array_element.extend(scopes)\n        if self._debug:\n            packages_path = os.path.dirname(path.packages_path(path.ABSOLUTE))\n            print(\"ColorHighlighter: action=write_color_scheme scheme=%s\" % self._color_scheme[len(packages_path) + 1:])\n\n        init_color_scheme_dir()\n        self._xml_tree.write(self._color_scheme, encoding=\"utf-8\")\n        try:\n            os.remove(path.cached_scheme_path(self._color_scheme))\n        except FileNotFoundError:\n            # No cache -- no problems.\n            pass\n\n    def fix_color_scheme_for_gutter_colors(self):  # pylint: disable=invalid-name\n        \"\"\"Fix color scheme for gutter icons to work properly.\"\"\"\n        for child in self._scopes_array_element:\n            if child.tag != \"dict\":\n                continue\n\n            scope = _get_value_child_with_tag(child, \"scope\", \"string\")\n            if scope is None:\n                continue\n            # The scheme is already fixed.\n            if scope == GutterIconsColorHighlighter.region_scope:\n                return\n\n        if self._debug:\n            print(\"ColorHighlighter: action=fix_color_scheme\")\n        self.add_scopes([ElementTree.fromstring(\"\"\"\n<dict>\n    <key>name</key>\n    <string>CH_color_scheme_fix</string>\n    <key>scope</key>\n    <string>%s</string>\n    <key>settings</key>\n    <dict>\n        <key>foreground</key>\n        <string>#ffffff</string>\n    </dict>\n</dict>\n\"\"\" % GutterIconsColorHighlighter.region_scope)])\n\n\ndef _get_child_by_tag(element, child_tag):\n    for child in element:\n        if child.tag == child_tag:\n            return child\n    return None\n\n\ndef _get_value_child_with_tag(element, key, tag):\n    for child_index, child in enumerate(element):\n        if child.tag == \"key\" and child.text == key:\n            if child_index + 1 < len(element):\n                next_child = element[child_index + 1]\n                if next_child.tag == tag:\n                    return next_child\n    return None\n\n\ndef _get_array_element(xml):\n    dict_element = _get_child_by_tag(xml, \"dict\")\n    if dict_element is None:\n        print(2)\n        return None\n\n    return _get_value_child_with_tag(dict_element, \"settings\", \"array\")\n\n\ndef _get_scheme_settings_element(array_element):\n    for child in array_element:\n        if child.tag != \"dict\":\n            continue\n\n        settings = _get_value_child_with_tag(child, \"settings\", \"dict\")\n        if settings is not None:\n            scope = _get_value_child_with_tag(settings, \"scope\", \"string\")\n            if scope is None:\n                return settings\n    return None\n\n\ndef _load_colors(scopes_array_element):\n    existing_colors = {}\n    for child in scopes_array_element:\n        if child.tag != \"dict\":\n            continue\n\n        name = _get_value_child_with_tag(child, \"name\", \"string\")\n        if name is None:\n            continue\n        if name.text != CH_COLOR_SCOPE_NAME:\n            continue\n\n        settings = _get_value_child_with_tag(child, \"settings\", \"dict\")\n        if settings is None:\n            continue\n\n        background = _get_value_child_with_tag(settings, \"background\", \"string\")\n        if background is None:\n            continue\n\n        color = background.text\n        existing_colors[color] = color[1:]\n    return existing_colors\n\n\ndef init_color_scheme_dir():\n    \"\"\"Initialise the directory for color schemes.\"\"\"\n    _create_if_not_exists(path.data_path(path.ABSOLUTE))\n    _create_if_not_exists(path.themes_path(path.ABSOLUTE))\n\n\ndef _create_if_not_exists(path_to_create):\n    if not os.path.exists(path_to_create):\n        os.mkdir(path_to_create)\n"
        },
        {
          "name": "color_scheme_color_highlighter.py",
          "type": "blob",
          "size": 7.5419921875,
          "content": "\"\"\"A color highlighter that uses color scheme scopes to highlight colors.\"\"\"\n\nimport threading\nfrom xml.etree import ElementTree\n\ntry:\n    from .st_helper import running_in_st, is_st3\n    from . import colors\n    from .color_highlighter import ColorHighlighter\nexcept ValueError:\n    from st_helper import running_in_st, is_st3\n    import colors\n    from color_highlighter import ColorHighlighter\n\nif running_in_st():\n    import sublime  # pylint: disable=import-error\nelse:\n    from . import sublime\n\n\nclass ColorSchemeBuilder(object):\n    \"\"\"A class for building a color scheme.\"\"\"\n\n    _scope_name_template = \"CH_color_%s\"\n    _color_scope_template = \"\"\"\n<dict>\n<key>name</key>\n<string>CH_color</string>\n<key>scope</key>\n<string>CH_color_%s</string>\n<key>settings</key>\n<dict>\n<key>background</key>\n<string>%s</string>\n<key>foreground</key>\n<string>%s</string>\n<key>caret</key>\n<string>%s</string>\n</dict>\n</dict>\n\"\"\"\n\n    _text_scope_name_template = \"CH_text_color_%s\"\n    _text_color_scope_template = \"\"\"\n<dict>\n<key>scope</key>\n<string>CH_text_color_%s</string>\n<key>settings</key>\n<dict>\n<key>background</key>\n<string>%s</string>\n<key>foreground</key>\n<string>%s</string>\n<key>caret</key>\n<string>%s</string>\n</dict>\n</dict>\n\"\"\"\n\n    def __init__(self, color_scheme_data, color_scheme_writer, async_update):\n        \"\"\"\n        Init the ColorSchemeBuilder.\n\n        Arguments:\n        - color_scheme_data - a ColorSchemeData instance for a color scheme.\n        - color_scheme_writer - a ColorSchemeWriter instance for a color scheme.\n        - async_update - whether to update the color scheme asynchronously or not.\n        \"\"\"\n        self._color_scheme_data = color_scheme_data\n        self._color_scheme_writer = color_scheme_writer\n        self._async_update = async_update\n        self._lock = threading.Lock()\n\n    def get_scopes(self, for_colors, for_text_coloring):\n        \"\"\"\n        Get scope names for a list of colors.\n\n        Arguments:\n        - for_colors - a list of colors.\n        - for_text_coloring - whether or not to return text highlighting scope names.\n        Returns a list of scope names, one for each color.\n        \"\"\"\n        scope_names = []\n        for color in for_colors:\n            background_color = self._color_scheme_data.background_color\n            fixed_color = colors.background_color_for_text_workaround(color, background_color)\n            color_name = fixed_color[1:]\n            scope_names.append(self._get_color_name(for_text_coloring, color_name))\n        if self._async_update:\n            sublime.set_timeout_async(lambda: self._update_schema(for_colors), 0)\n        else:\n            self._update_schema(for_colors)\n        return scope_names\n\n    def _update_schema(self, for_colors):\n        with self._lock:\n            existing_colors = self._color_scheme_data.existing_colors\n            scopes = []\n            for color in for_colors:\n                if color in existing_colors:\n                    continue\n\n                opposite_color = colors.complementary_color(color)\n                background_color = self._color_scheme_data.background_color\n                fixed_color = colors.background_color_for_text_workaround(color, background_color)\n                fixed_background_color = colors.background_color_for_text_workaround(background_color, background_color)\n\n                color_name = fixed_color[1:]\n                scope = ElementTree.fromstring(\n                    self._color_scope_template % (color_name, fixed_color, opposite_color, opposite_color))\n                scopes.append(scope)\n                text_scope = ElementTree.fromstring(\n                    self._text_color_scope_template % (color_name, fixed_background_color, fixed_color, opposite_color))\n                scopes.append(text_scope)\n                existing_colors[color] = color_name\n            if scopes:\n                self._color_scheme_writer.add_scopes(scopes)\n\n    def _get_color_name(self, for_text_coloring, color_name):\n        if for_text_coloring:\n            return self._text_scope_name_template % color_name\n        return self._scope_name_template % color_name\n\n\nclass ColorSchemeColorHighlighter(ColorHighlighter):\n    \"\"\"A color highlighter that uses color scheme scopes to highlight colors.\"\"\"\n\n    region_name_template = \"CH_color_%s_%d_%d\"\n\n    if is_st3():\n        _region_style_flags = {\n            \"filled\": sublime.DRAW_NO_OUTLINE,\n            \"text\": sublime.DRAW_NO_OUTLINE,\n            \"outlined\": sublime.DRAW_NO_FILL,\n            \"underlined_solid\": sublime.DRAW_NO_FILL | sublime.DRAW_NO_OUTLINE | sublime.DRAW_SOLID_UNDERLINE,\n            \"underlined_strippled\": sublime.DRAW_NO_FILL | sublime.DRAW_NO_OUTLINE | sublime.DRAW_STIPPLED_UNDERLINE,\n            \"underlined_squiggly\": sublime.DRAW_NO_FILL | sublime.DRAW_NO_OUTLINE | sublime.DRAW_SQUIGGLY_UNDERLINE,\n        }\n    else:\n        _region_style_flags = {\n            \"filled\": 0,\n            \"text\": 0,\n            \"outlined\": sublime.DRAW_OUTLINED,\n        }\n\n    def __init__(self, view, style, color_scheme_builder, name, debug):  # pylint: disable=too-many-arguments\n        \"\"\"\n        Init a ColorSchemeColorHighlighter.\n\n        Arguments:\n        - view - a view to highlight colors in.\n        - style - the style of color highlighting.\n        - color_scheme_builder - the color scheme builder to build regions for colors.\n        - name - the name of the color highlighter.\n        - debug - whether to enable debug mode.\n        \"\"\"\n        assert style in ColorSchemeColorHighlighter._region_style_flags\n        self._view = view\n        self._color_scheme_builder = color_scheme_builder\n        self._text_coloring = style == \"text\"\n        self._flags = ColorSchemeColorHighlighter._region_style_flags[style]\n        self._name = name\n        self._debug = debug\n\n    def highlight_region(self, context, value):\n        \"\"\"\n        Highlight a region.\n\n        Arguments:\n        - context - a dict with color highlighter run data.\n        - value - tuple (region to highlight, it's color).\n        Returns True, if highlighted, False otherwise.\n        \"\"\"\n        if \"values\" not in context:\n            context[\"values\"] = []\n        context[\"values\"].append(value)\n\n    def highlight_regions_done(self, context):  # noqa: D401\n        \"\"\"\n        Called after all calls to highlight_region and unhighlight_region from highlight_regions have been made.\n\n        Arguments:\n        - context - a dict with color highlighter run data.\n        \"\"\"\n        values = context.get(\"values\", None)\n        if not values:\n            return\n\n        colors_to_highlight = []\n        for (_, color) in values:\n            colors_to_highlight.append(color)\n        scopes = self._color_scheme_builder.get_scopes(colors_to_highlight, self._text_coloring)\n\n        for index, value in enumerate(values):\n            (region, color) = value\n            region_key = ColorSchemeColorHighlighter.region_name_template % (self._name, region.a, region.b)\n            if self._debug:\n                print(\"ColorHighlighter: action=highlight highlighter=ColorSchemeColorHighlighter region=%s color=%s\"\n                      % (region, color))\n            self._view.add_regions(region_key, [region.region()], scopes[index], \"\", self._flags)\n\n    def unhighlight_region(self, context, value):\n        \"\"\"\n        Unhighlight a region.\n\n        Arguments:\n        - context - a dict with color highlighter run data.\n        - value - tuple (region to unhighlight, it's color).\n        \"\"\"\n        (region, _) = value\n        region_key = ColorSchemeColorHighlighter.region_name_template % (self._name, region.a, region.b)\n        self._view.erase_regions(region_key)\n"
        },
        {
          "name": "color_searcher.py",
          "type": "blob",
          "size": 1.4609375,
          "content": "\"\"\"The module with tools for searching for colors in ST views.\"\"\"\n\ntry:\n    from . import regions\nexcept ValueError:\n    import regions\n\n\nclass ColorSearcher(object):\n    \"\"\"Class for searching for colors in ST views.\"\"\"\n\n    def __init__(self, regex, color_converter):\n        \"\"\"\n        Init a ColorSearcher.\n\n        Arguments:\n        - regex - the regex for matching colors.\n        - color_converter - the color converter to convert color text into cannical form.\n        \"\"\"\n        self._color_regex = regex\n        self._color_converter = color_converter\n\n    def search(self, view, region):\n        \"\"\"\n        Get a region with a color in the view.\n\n        Given a region, yield regions inside of it that contain colors.\n        Arguments:\n        - view - the view to look in.\n        - region - the initial region to look around.\n        Yields tuples of of NormalizedRegion-s, canonical colors that are in this regions and color matches for them.\n        \"\"\"\n        region_text = view.substr(region.region())\n        match = self._color_regex.search(region_text)\n        while match:\n            start = match.start()\n            end = match.end()\n            color_region = regions.NormalizedRegion(region.a + start, region.a + end)\n            groups = match.groupdict()\n            color = self._color_converter.to_color(groups)\n            if color is not None:\n                yield color_region, color, groups\n            match = self._color_regex.search(region_text, end)\n"
        },
        {
          "name": "color_selection_listener.py",
          "type": "blob",
          "size": 2.564453125,
          "content": "\"\"\"Component for listening for selection changes in a view and highlighting selected colors.\"\"\"\n\ntry:\n    from .regions import NormalizedRegion, intersects_any, deduplicate_regions\nexcept ValueError:\n    from regions import NormalizedRegion, intersects_any, deduplicate_regions\n\n\nclass ColorSelectionListener(object):\n    \"\"\"Component for listening for selection changes in a view and highlighting selected colors.\"\"\"\n\n    def __init__(self, color_searcher, view, color_highlighter):\n        \"\"\"\n        Init ColorSelectionListener.\n\n        Arguments:\n        - color_searcher - a color searcher to search colors with.\n        - view - a view to highlight colors in.\n        - color_highlighter - a combined color highlighter to highlight colors with.\n        \"\"\"\n        self._color_searcher = color_searcher\n        self._view = view\n        self._color_highlighter = color_highlighter\n        self._selection = []\n\n    def on_selection_modified(self):\n        \"\"\"\n        Call when view's selection was modified.\n\n        Because ST sometimes call EventListener.on_selection_modified even when the selection didn't change, this class\n        also handles such cases by ignoring them.\n        \"\"\"\n        new_selection = [region for region in self._view.sel()]\n        if self._selection != new_selection:\n            self._selection = new_selection\n            self._on_selection_really_modified()\n\n    def on_modified(self):\n        \"\"\"on_modified event.\"\"\"\n        self._on_selection_really_modified()\n\n    def _on_selection_really_modified(self):\n        color_regions = _drop_match(_generate_color_regions(self._view, self._color_searcher, self._selection))\n        self._color_highlighter.highlight_regions(color_regions)\n\n\ndef search_colors_in_selection(view, color_searcher):\n    \"\"\"\n    Search colors in selection.\n\n    Arguments:\n    - view - the view to search colors in.\n    - color_searcher - the color searcher to search colors with.\n    \"\"\"\n    return _generate_color_regions(view, color_searcher, view.sel())\n\n\ndef _drop_match(values):\n    for value in values:\n        yield (value[0], value[1])\n\n\ndef _generate_color_regions(view, color_searcher, regions):\n    normalized_regions = [NormalizedRegion(region) for region in regions]\n    for line in deduplicate_regions(_generate_lines(view, regions)):\n        for color_data in color_searcher.search(view, line):\n            if intersects_any(color_data[0], normalized_regions):\n                yield color_data\n\n\ndef _generate_lines(view, regions):\n    for region in regions:\n        for line in view.lines(region):\n            yield NormalizedRegion(line)\n"
        },
        {
          "name": "colors.py",
          "type": "blob",
          "size": 2.595703125,
          "content": "\"\"\"A module with tools for working with colors.\"\"\"\n\nimport colorsys\n\n\ndef normalize_hex_color(color):\n    \"\"\"\n    Normalize any hex color to #RRGGBBAA format.\n\n    Arguments:\n    - color - the color to normalize.\n    Returns normalized color in #RRGGBBAA format.\n    \"\"\"\n    while len(color) < 9:\n        color += \"F\"\n    return color\n\n\ndef background_color_for_text_workaround(background_color, theme_background_color):  # pylint: disable=invalid-name\n    \"\"\"\n    Background color bug workaround for ST.\n\n    If one to set for a scope background color identical to the global background color, it doesn't work properly.\n    Because of that, one needs to use this hack, which does a minimal change to the input color's green channel.\n    Thus, after this transformation the color will be different from the background color and will be displayed\n    correctly. This new color, whle different, is very hard to distinguish from the original color, so from the UX\n    perspective, everything's fine.\n    Argumetns:\n    - background_color - the color to be used as a background color for a scope.\n    - theme_background_color - the theme's backgroud color.\n    Returns a background_color if it's not the same as the theme_background_color or a slightly modified\n    background_color, if it is the same.\n    \"\"\"\n    if background_color != theme_background_color:\n        return background_color\n\n    second_blue_symbol = background_color[-3]\n    if second_blue_symbol == 'F':\n        second_blue_symbol = 'E'\n    else:\n        second_blue_symbol = hex(int(second_blue_symbol, 16) + 1)[2:]\n    return background_color[:-3] + second_blue_symbol + background_color[-2:]\n\n\ndef rgb_to_hex(r, g, b):  # pylint: disable=invalid-name\n    \"\"\"\n    Convert numeric r, g, b color channels to a hex standard #RRGGBBAA color format.\n\n    Arguments:\n    - r - red channel in (0, 255).\n    - g - green channel in (0, 255).\n    - b - blue channel in (0, 255).\n    \"\"\"\n    return \"#%02X%02X%02XFF\" % (r, g, b)\n\n\ndef complementary_color(color):\n    \"\"\"\n    Get a complementary color to the input color.\n\n    For example, white is the complementary color for black, yellow for cyan, etc.\n    Argumets:\n    - color - color in #RRGGBBAA format.\n    Returns the complementary color to the input color.\n    \"\"\"\n    (h, l, s) = colorsys.rgb_to_hls(  # pylint: disable=invalid-name\n        int(color[1:3], 16) / 255.0, int(color[3:5], 16) / 255.0, int(color[5:7], 16) / 255.0)\n    new_l = 1 - l\n    if abs(new_l - l) < .15:\n        new_l = .15\n    (r, g, b) = colorsys.hls_to_rgb(h, new_l, s)  # pylint: disable=invalid-name\n    return rgb_to_hex(int(r * 255), int(g * 255), int(b * 255))\n"
        },
        {
          "name": "content_listener.py",
          "type": "blob",
          "size": 2,
          "content": "\"\"\"Component for listening for loaded views and highlighting colors in them.\"\"\"\n\ntry:\n    from .regions import NormalizedRegion, deduplicate_regions\nexcept ValueError:\n    from regions import NormalizedRegion, deduplicate_regions\n\n\nclass ContentListener(object):\n    \"\"\"Component for listening for loaded views and highlighting colors in them.\"\"\"\n\n    def __init__(self, color_searcher, view, color_highlighter):\n        \"\"\"\n        Init ContentListener.\n\n        Arguments:\n        - color_searcher - a color searcher to search colors with.\n        - view - a view to highlight colors in.\n        - color_highlighter - a combined color highlighter to highlight colors with.\n        \"\"\"\n        self._color_searcher = color_searcher\n        self._view = view\n        self._color_highlighter = color_highlighter\n\n    def on_load(self):\n        \"\"\"Call when view's content is loaded.\"\"\"\n        color_regions = self._generate_color_regions()\n        self._color_highlighter.highlight_regions(color_regions)\n\n    def on_modified(self):\n        \"\"\"on_modified event.\"\"\"\n        lines = deduplicate_regions(self._generate_lines_for_selection())\n        color_regions = self._generate_color_regions_for_selection(lines)\n        self._color_highlighter.highlight_regions_in(color_regions, lines)\n\n    def _generate_color_regions(self):\n        for line in self._generate_lines():\n            for (region, color, _) in self._color_searcher.search(self._view, line):\n                yield (region, color)\n\n    def _generate_lines(self):\n        for line in self._view.lines(NormalizedRegion(0, self._view.size()).region()):\n            yield NormalizedRegion(line)\n\n    def _generate_color_regions_for_selection(self, lines):\n        for line in lines:\n            for (region, color, _) in self._color_searcher.search(self._view, line):\n                yield (region, color)\n\n    def _generate_lines_for_selection(self):\n        for region in self._view.sel():\n            for line in self._view.lines(region):\n                yield NormalizedRegion(line)\n"
        },
        {
          "name": "convert_color_command.py",
          "type": "blob",
          "size": 4.3408203125,
          "content": "\"\"\"A ST3 commands for converting colors between formats.\"\"\"\n\ntry:\n    from . import st_helper\n    from .color_converter import ColorConverter\n    from .color_searcher import ColorSearcher\n    from .color_selection_listener import search_colors_in_selection\n    from .regex_compiler import compile_regex\n    from .settings import Settings, COLOR_HIGHLIGHTER_SETTINGS_NAME\nexcept ValueError:\n    import st_helper\n    from color_converter import ColorConverter\n    from color_searcher import ColorSearcher\n    from color_selection_listener import search_colors_in_selection\n    from regex_compiler import compile_regex\n    from settings import Settings, COLOR_HIGHLIGHTER_SETTINGS_NAME\n\n\nif st_helper.running_in_st():\n    import sublime  # pylint: disable=import-error\n    import sublime_plugin  # pylint: disable=import-error\nelse:\n    from . import sublime\n    from . import sublime_plugin\n\n\nclass ColorHighlighterNextColor(sublime_plugin.TextCommand):\n    \"\"\"Convert currently selected colors to a next color format.\"\"\"\n\n    def run(self, edit):\n        \"\"\"\n        Run the command.\n\n        Arguments:\n        - edit - an edit object.\n        \"\"\"\n        settings = Settings(sublime.load_settings(COLOR_HIGHLIGHTER_SETTINGS_NAME))\n        formats = [value for value in sorted(settings.regex_compiler.formats.keys())]\n        color_converter = ColorConverter(formats)\n        for (region, color, format_name) in _get_colors(self.view, settings, formats, color_converter):\n            index = formats.index(format_name) + 1\n            if index == len(formats):\n                index = 0\n            new_format = formats[index]\n            new_color = color_converter.from_color((color, new_format))\n            if settings.debug:\n                print((\"ColorHighlighter: action=run_command name=color_highlighter_next_color region=%s format=%s \" +\n                       \"color=%s new_format=%s new_color=%s\")\n                      % (str(region.region()), format_name, color, new_format, new_color))\n            self.view.replace(edit, region.region(), new_color)\n\n    def is_visible(self):\n        \"\"\"Check if the command can be ran.\"\"\"\n        return _any_colors_selected(self.view)\n\n\nclass ColorHighlighterPreviousColor(sublime_plugin.TextCommand):\n    \"\"\"Convert currently selected colors to a prevoius color format.\"\"\"\n\n    def run(self, edit):\n        \"\"\"\n        Run the command.\n\n        Arguments:\n        - edit - an edit object.\n        \"\"\"\n        settings = Settings(sublime.load_settings(COLOR_HIGHLIGHTER_SETTINGS_NAME))\n        formats = [value for value in sorted(settings.regex_compiler.formats.keys())]\n        color_converter = ColorConverter(formats)\n        for (region, color, format_name) in _get_colors(self.view, settings, formats, color_converter):\n            index = formats.index(format_name) - 1\n            if index == -1:\n                index = len(formats) - 1\n            new_format = formats[index]\n            new_color = color_converter.from_color((color, new_format))\n            if settings.debug:\n                print((\"ColorHighlighter: action=run_command name=color_highlighter_previous_color region=%s \" +\n                       \"format=%s color=%s new_format=%s new_color=%s\")\n                      % (str(region.region()), format_name, color, new_format, new_color))\n            self.view.replace(edit, region.region(), new_color)\n\n    def is_visible(self):\n        \"\"\"Check if the command can be ran.\"\"\"\n        return _any_colors_selected(self.view)\n\n\ndef _get_colors(view, settings, formats, color_converter):\n    color_searcher = ColorSearcher(compile_regex(settings.regex_compiler), color_converter)\n    for (region, color, match) in search_colors_in_selection(view, color_searcher):\n        format_name = _get_format_name(match, formats)\n        yield region, color, format_name\n\n\ndef _any_colors_selected(view):\n    settings = Settings(sublime.load_settings(COLOR_HIGHLIGHTER_SETTINGS_NAME))\n    formats = [value for value in sorted(settings.regex_compiler.formats.keys())]\n    color_converter = ColorConverter(formats)\n    color_searcher = ColorSearcher(compile_regex(settings.regex_compiler), color_converter)\n    for _ in search_colors_in_selection(view, color_searcher):\n        return True\n    return False\n\n\ndef _get_format_name(match, formats):\n    for name in formats:\n        if match.get(name, None) is not None:\n            return name\n    raise Exception(\"Unreachable code.\")\n"
        },
        {
          "name": "css_colors.py",
          "type": "blob",
          "size": 4.5224609375,
          "content": "\"\"\"\nHTML color names.\n\nFor more details, see https://developer.mozilla.org/ru/docs/Web/CSS/color_value.\n\"\"\"\n\nCOLOR_NAMES_TO_HEX = {\n    \"\"\"\n    A map of HTML color names to their hex values.\n    \"\"\"\n\n    \"black\": \"#000000ff\",\n    \"silver\": \"#c0c0c0ff\",\n    \"gray\": \"#808080ff\",\n    \"white\": \"#ffffffff\",\n    \"maroon\": \"#800000ff\",\n    \"red\": \"#ff0000ff\",\n    \"purple\": \"#800080ff\",\n    \"fuchsia\": \"#ff00ffff\",\n    \"green\": \"#008000ff\",\n    \"lime\": \"#00ff00ff\",\n    \"olive\": \"#808000ff\",\n    \"yellow\": \"#ffff00ff\",\n    \"navy\": \"#000080ff\",\n    \"blue\": \"#0000ffff\",\n    \"teal\": \"#008080ff\",\n    \"aqua\": \"#00ffffff\",\n    \"orange\": \"#ffa500ff\",\n    \"aliceblue\": \"#f0f8ffff\",\n    \"antiquewhite\": \"#faebd7ff\",\n    \"aquamarine\": \"#7fffd4ff\",\n    \"azure\": \"#f0ffffff\",\n    \"beige\": \"#f5f5dcff\",\n    \"bisque\": \"#ffe4c4ff\",\n    \"blanchedalmond\": \"#ffebcdff\",\n    \"blueviolet\": \"#8a2be2ff\",\n    \"brown\": \"#a52a2aff\",\n    \"burlywood\": \"#deb887ff\",\n    \"cadetblue\": \"#5f9ea0ff\",\n    \"chartreuse\": \"#7fff00ff\",\n    \"chocolate\": \"#d2691eff\",\n    \"coral\": \"#ff7f50ff\",\n    \"cornflowerblue\": \"#6495edff\",\n    \"cornsilk\": \"#fff8dcff\",\n    \"crimson\": \"#dc143cff\",\n    \"cyan\": \"#00ffffff\",\n    \"darkblue\": \"#00008bff\",\n    \"darkcyan\": \"#008b8bff\",\n    \"darkgoldenrod\": \"#b8860bff\",\n    \"darkgray\": \"#a9a9a9ff\",\n    \"darkgreen\": \"#006400ff\",\n    \"darkgrey\": \"#a9a9a9ff\",\n    \"darkkhaki\": \"#bdb76bff\",\n    \"darkmagenta\": \"#8b008bff\",\n    \"darkolivegreen\": \"#556b2fff\",\n    \"darkorange\": \"#ff8c00ff\",\n    \"darkorchid\": \"#9932ccff\",\n    \"darkred\": \"#8b0000ff\",\n    \"darksalmon\": \"#e9967aff\",\n    \"darkseagreen\": \"#8fbc8fff\",\n    \"darkslateblue\": \"#483d8bff\",\n    \"darkslategray\": \"#2f4f4fff\",\n    \"darkslategrey\": \"#2f4f4fff\",\n    \"darkturquoise\": \"#00ced1ff\",\n    \"darkviolet\": \"#9400d3ff\",\n    \"deeppink\": \"#ff1493ff\",\n    \"deepskyblue\": \"#00bfffff\",\n    \"dimgray\": \"#696969ff\",\n    \"dimgrey\": \"#696969ff\",\n    \"dodgerblue\": \"#1e90ffff\",\n    \"firebrick\": \"#b22222ff\",\n    \"floralwhite\": \"#fffaf0ff\",\n    \"forestgreen\": \"#228b22ff\",\n    \"gainsboro\": \"#dcdcdcff\",\n    \"ghostwhite\": \"#f8f8ffff\",\n    \"gold\": \"#ffd700ff\",\n    \"goldenrod\": \"#daa520ff\",\n    \"greenyellow\": \"#adff2fff\",\n    \"grey\": \"#808080ff\",\n    \"honeydew\": \"#f0fff0ff\",\n    \"hotpink\": \"#ff69b4ff\",\n    \"indianred\": \"#cd5c5cff\",\n    \"indigo\": \"#4b0082ff\",\n    \"ivory\": \"#fffff0ff\",\n    \"khaki\": \"#f0e68cff\",\n    \"lavender\": \"#e6e6faff\",\n    \"lavenderblush\": \"#fff0f5ff\",\n    \"lawngreen\": \"#7cfc00ff\",\n    \"lemonchiffon\": \"#fffacdff\",\n    \"lightblue\": \"#add8e6ff\",\n    \"lightcoral\": \"#f08080ff\",\n    \"lightcyan\": \"#e0ffffff\",\n    \"lightgoldenrodyellow\": \"#fafad2ff\",\n    \"lightgray\": \"#d3d3d3ff\",\n    \"lightgreen\": \"#90ee90ff\",\n    \"lightgrey\": \"#d3d3d3ff\",\n    \"lightpink\": \"#ffb6c1ff\",\n    \"lightsalmon\": \"#ffa07aff\",\n    \"lightseagreen\": \"#20b2aaff\",\n    \"lightskyblue\": \"#87cefaff\",\n    \"lightslategray\": \"#778899ff\",\n    \"lightslategrey\": \"#778899ff\",\n    \"lightsteelblue\": \"#b0c4deff\",\n    \"lightyellow\": \"#ffffe0ff\",\n    \"limegreen\": \"#32cd32ff\",\n    \"linen\": \"#faf0e6ff\",\n    \"magenta\": \"#ff00ffff\",\n    \"mediumaquamarine\": \"#66cdaaff\",\n    \"mediumblue\": \"#0000cdff\",\n    \"mediumorchid\": \"#ba55d3ff\",\n    \"mediumpurple\": \"#9370dbff\",\n    \"mediumseagreen\": \"#3cb371ff\",\n    \"mediumslateblue\": \"#7b68eeff\",\n    \"mediumspringgreen\": \"#00fa9aff\",\n    \"mediumturquoise\": \"#48d1ccff\",\n    \"mediumvioletred\": \"#c71585ff\",\n    \"midnightblue\": \"#191970ff\",\n    \"mintcream\": \"#f5fffaff\",\n    \"mistyrose\": \"#ffe4e1ff\",\n    \"moccasin\": \"#ffe4b5ff\",\n    \"navajowhite\": \"#ffdeadff\",\n    \"oldlace\": \"#fdf5e6ff\",\n    \"olivedrab\": \"#6b8e23ff\",\n    \"orangered\": \"#ff4500ff\",\n    \"orchid\": \"#da70d6ff\",\n    \"palegoldenrod\": \"#eee8aaff\",\n    \"palegreen\": \"#98fb98ff\",\n    \"paleturquoise\": \"#afeeeeff\",\n    \"palevioletred\": \"#db7093ff\",\n    \"papayawhip\": \"#ffefd5ff\",\n    \"peachpuff\": \"#ffdab9ff\",\n    \"peru\": \"#cd853fff\",\n    \"pink\": \"#ffc0cbff\",\n    \"plum\": \"#dda0ddff\",\n    \"powderblue\": \"#b0e0e6ff\",\n    \"rosybrown\": \"#bc8f8fff\",\n    \"royalblue\": \"#4169e1ff\",\n    \"saddlebrown\": \"#8b4513ff\",\n    \"salmon\": \"#fa8072ff\",\n    \"sandybrown\": \"#f4a460ff\",\n    \"seagreen\": \"#2e8b57ff\",\n    \"seashell\": \"#fff5eeff\",\n    \"sienna\": \"#a0522dff\",\n    \"skyblue\": \"#87ceebff\",\n    \"slateblue\": \"#6a5acdff\",\n    \"slategray\": \"#708090ff\",\n    \"slategrey\": \"#708090ff\",\n    \"snow\": \"#fffafaff\",\n    \"springgreen\": \"#00ff7fff\",\n    \"steelblue\": \"#4682b4ff\",\n    \"tan\": \"#d2b48cff\",\n    \"thistle\": \"#d8bfd8ff\",\n    \"tomato\": \"#ff6347ff\",\n    \"turquoise\": \"#40e0d0ff\",\n    \"violet\": \"#ee82eeff\",\n    \"wheat\": \"#f5deb3ff\",\n    \"whitesmoke\": \"#f5f5f5ff\",\n    \"yellowgreen\": \"#9acd32ff\",\n    \"rebeccapurple\": \"#663399ff\"\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "dummy_event_listener.py",
          "type": "blob",
          "size": 0.6279296875,
          "content": "\"\"\"A dummy event listener.\"\"\"\n\n\nclass DummyEventListener(object):\n    \"\"\"\n    An event listener that ignores events.\n\n    Supposed to be used in place of any other event listener when it is disabled.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"Init ColorSelectionListener.\"\"\"\n        pass\n\n    def on_selection_modified(self):\n        \"\"\"Call when view's selection was modified.\"\"\"\n        pass\n\n    def on_load(self):\n        \"\"\"Call when view's content is loaded.\"\"\"\n        pass\n\n    def on_hover(self, point, hover_zone):\n        \"\"\"on_hover event.\"\"\"\n        pass\n\n    def on_modified(self):\n        \"\"\"on_modified event.\"\"\"\n        pass\n"
        },
        {
          "name": "elementtree",
          "type": "tree",
          "content": null
        },
        {
          "name": "gutter_icons_color_highlighter.py",
          "type": "blob",
          "size": 7.4052734375,
          "content": "\"\"\"A color highlighter that uses phantom sets to highlight colors.\"\"\"\n\nimport os\nimport subprocess\nimport threading\n\ntry:\n    from . import path\n    from .st_helper import running_in_st\n    from .color_highlighter import ColorHighlighter\nexcept ValueError:\n    import path\n    from st_helper import running_in_st\n    from color_highlighter import ColorHighlighter\n\n\nif running_in_st():\n    import sublime  # pylint: disable=import-error\nelse:\n    from . import sublime\n\n\nclass IconFactory(object):\n    \"\"\"A class for generating gutter icons with different styles and colors.\"\"\"\n\n    _icon_style_circle = \"circle\"\n    _icon_style_square = \"square\"\n    _convert_styles = {\n        _icon_style_circle: \"circle 15,16 8,10\",\n        _icon_style_square: \"rectangle 4,4 24,24\"\n    }\n    _convert_command_template = (\n        '%s -type TrueColorMatte -channel RGBA -size 32x32 -alpha transparent xc:none -fill \"%s\" -draw \"%s\" png32:\"%s\"')\n    _icon_name_template = \"%s_icon_%s.png\"\n    _bad_icon_name = \"bad-icon.png\"\n\n    def __init__(self, icons_path, sublime_icons_path, convert_command,  # pylint: disable=too-many-arguments\n                 execute_timeout_seconds, debug):\n        \"\"\"\n        Init the icon factory.\n\n        Arguments:\n        - icons_path - an absolute path to the icons directory.\n        - sublime_icons_path - a relative to ST Packages path to the icons directory.\n        - convert_command - a convert tool path.\n        - execute_timeout_seconds - the timeout in seconds to wait for convert to finish.\n        - debug - whether to enable debug mode.\n        \"\"\"\n        self._icons_path = icons_path\n        self._sublime_icons_path = sublime_icons_path\n        self._convert_command = convert_command\n        self._execute_timeout_seconds = execute_timeout_seconds\n        self._debug = debug\n        self._icons_cache = {}\n        self._lock = threading.Lock()\n\n    def get_icon_path(self, style, color):\n        \"\"\"\n        Get the icon path given the icon style and color.\n\n        If the icon does not exist, create it.\n        Arguments:\n        - style - the style of the icon.\n        - color -- the color of the icon.\n        Returns the icon path of None if creating the icon has failed.\n        \"\"\"\n        assert style in self._convert_styles\n\n        icon_name = self._icon_name_template % (style, color[1:])\n        sublime_icon_path = path.normalize_path_for_st(os.path.join(self._sublime_icons_path, icon_name))\n        # TODO(#5): return sublime_icon_path immediately and create icon in background.  # pylint: disable=fixme\n        icon_path = os.path.join(self._icons_path, icon_name)\n        cache_key = (style, color)\n        with self._lock:\n            if cache_key in self._icons_cache:\n                return self._icons_cache[cache_key]\n\n            if os.path.exists(icon_path):\n                self._icons_cache[cache_key] = sublime_icon_path\n                return sublime_icon_path\n\n            if self._create_icon(style, color, icon_path)[1]:\n                self._icons_cache[cache_key] = sublime_icon_path\n                return sublime_icon_path\n\n        if self._debug:\n            print(\"ColorHighlighter: action=could_not_create_icon style=%s color=%s\" % (style, color))\n        return path.normalize_path_for_st(os.path.join(self._sublime_icons_path, IconFactory._bad_icon_name))\n\n    def check(self):\n        \"\"\"\n        Get the icon path given the icon style and color.\n\n        If the icon does not exist, create it.\n        Arguments:\n        - style - the style of the icon.\n        - color -- the color of the icon.\n        Returns the icon path of None if creating the icon has failed.\n        \"\"\"\n        style = \"circle\"\n        color = \"#ffffffff\"\n        icon_name = self._icon_name_template % (style, color[1:])\n        icon_path = os.path.join(self._icons_path, icon_name)\n        result = self._create_icon(style, color, icon_path)\n        return result[0] and result[1]\n\n    def _create_icon(self, style, color, icon_path):\n        convert_style = IconFactory._convert_styles[style]\n        convert_command = IconFactory._convert_command_template % (\n            self._convert_command, color, convert_style, icon_path)\n        if self._debug:\n            print(\"ColorHighlighter: action=create_icon style=%s color=%s\" % (style, color))\n        success = self._run_command(convert_command)\n        return (success, os.path.exists(icon_path))\n\n    def _run_command(self, command):\n        _create_if_not_exists(path.data_path(path.ABSOLUTE))\n        _create_if_not_exists(path.icons_path(path.ABSOLUTE))\n        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n        try:\n            output, error = process.communicate(timeout=self._execute_timeout_seconds)\n        except subprocess.TimeoutExpired:\n            process.kill()\n            output, error = process.communicate()\n\n        output = _decode_data(output)\n        error = _decode_data(error)\n\n        if error is not None and error != \"\":\n            print(\"Traceback: error.\\n\\nOutput:\\n%s\\n\\nError:\\n%s\" % (output, error))\n            return False\n        return True\n\n\nclass GutterIconsColorHighlighter(ColorHighlighter):\n    \"\"\"A color highlighter that uses gutter icons to highlight colors.\"\"\"\n\n    region_name_template = \"CH_icon_%s_%d_%d\"\n    region_scope = \"ch_gutter_icon\"\n\n    def __init__(self, view, icon_style, icon_factory, name, debug):  # pylint: disable=too-many-arguments\n        \"\"\"\n        Init a GutterIconsColorHighlighter.\n\n        Arguments:\n        - view - a view to highlight colors in.\n        - icon_style - the icon style.\n        - icon_factory - the icon factory to create icons with.\n        - name - the name of the color highlighter.\n        - debug - whether to enable debug mode.\n        \"\"\"\n        assert icon_style in IconFactory._convert_styles  # pylint: disable=protected-access\n        self._view = view\n        self._icon_style = icon_style\n        self._icon_factory = icon_factory\n        self._name = name\n        self._debug = debug\n\n    def highlight_region(self, context, value):\n        \"\"\"\n        Highlight a region.\n\n        Arguments:\n        - context - a dict with color highlighter run data.\n        - value - tuple (region to highlight, it's color).\n        Returns True, if highlighted, False otherwise.\n        \"\"\"\n        (region, color) = value\n        icon_path = self._icon_factory.get_icon_path(self._icon_style, color)\n        region_key = GutterIconsColorHighlighter.region_name_template % (self._name, region.a, region.b)\n        if self._debug:\n            print(\"ColorHighlighter: action=highlight highlighter=GutterIconsColorHighlighter region=%s color=%s\"\n                  % (region, color))\n        self._view.add_regions(\n            region_key, [region.region()], GutterIconsColorHighlighter.region_scope, icon_path, sublime.HIDDEN)\n\n    def unhighlight_region(self, context, value):\n        \"\"\"\n        Unhighlight a region.\n\n        Arguments:\n        - context - a dict with color highlighter run data.\n        - value - tuple (region to unhighlight, it's color).\n        \"\"\"\n        (region, _) = value\n        region_key = GutterIconsColorHighlighter.region_name_template % (self._name, region.a, region.b)\n        self._view.erase_regions(region_key)\n\n\ndef _decode_data(data):\n    try:\n        return data.decode(\"utf-8\")\n    except UnicodeDecodeError as exception:\n        return str(exception)\n\n\ndef _create_if_not_exists(path_to_create):\n    if not os.path.exists(path_to_create):\n        os.mkdir(path_to_create)\n"
        },
        {
          "name": "integration_tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "load_resource.py",
          "type": "blob",
          "size": 2.125,
          "content": "\"\"\"A module with tools loading ST resources.\"\"\"\n\nimport codecs\nimport os\n\ntry:\n    from .st_helper import running_in_st\n    from . import st_helper\n    from . import path\nexcept ValueError:\n    from st_helper import running_in_st\n    import st_helper\n    import path\n\nif running_in_st():\n    import sublime  # pylint: disable=import-error\nelse:\n    from . import sublime\n\n\ndef load_resource(file_path):\n    \"\"\"\n    Polyfill for ST3 sublime.load_resource function.\n\n    Arguments:\n    - file_path - a resource path.\n    Returns a string with the resource's content.\n    \"\"\"\n    if st_helper.is_st3():\n        return sublime.load_resource(file_path)\n\n    file_path = os.path.join(os.path.dirname(path.packages_path(path.ABSOLUTE)), file_path)\n    return _read_file(file_path)\n\n\ndef load_binary_resource(file_path):\n    \"\"\"\n    Polyfill for ST3 sublime.load_binary_resource function.\n\n    Arguments:\n    - file_path - a resource path.\n    Returns a byte string with the resource's content.\n    \"\"\"\n    if st_helper.is_st3():\n        return sublime.load_binary_resource(file_path)\n\n    file_path = os.path.join(os.path.dirname(path.packages_path(path.ABSOLUTE)), file_path)\n    return _read_binary_file(file_path)\n\n\ndef get_binary_resource_size(file_path):\n    \"\"\"\n    Polyfill for ST3 sublime.load_binary_resource function.\n\n    Arguments:\n    - file_path - a resource path.\n    Returns a byte string with the resource's content.\n    \"\"\"\n    if st_helper.is_st3():\n        return len(sublime.load_binary_resource(file_path))\n\n    file_path = os.path.join(os.path.dirname(path.packages_path(path.ABSOLUTE)), file_path)\n    return os.path.getsize(file_path)\n\n\ndef copy_resource(resource, destination_path):\n    \"\"\"\n    Copy resource to a file.\n\n    Arguments:\n    - resource - the resource to copy.\n    - destination_path - the path where to copy the resource.\n    \"\"\"\n    with open(destination_path, \"wb\") as file:\n        file.write(load_binary_resource(resource))\n\n\ndef _read_file(file_path):\n    with codecs.open(file_path, \"r\", \"utf-8\") as file:\n        return file.read()\n\n\ndef _read_binary_file(file_path):\n    with open(file_path, \"rb\") as file:\n        return file.read()\n"
        },
        {
          "name": "main.py",
          "type": "blob",
          "size": 26.5849609375,
          "content": "\"\"\"The main program.\"\"\"\n\nimport os\nimport shutil\n\nimport sublime  # pylint: disable=import-error\n\nimport sublime_plugin  # pylint: disable=import-error\n\ntry:\n    from . import st_helper\n    from . import path\n    from .color_converter import ColorConverter\n    from .color_searcher import ColorSearcher\n    from .dummy_event_listener import DummyEventListener\n    from .settings import Settings, COLOR_HIGHLIGHTER_SETTINGS_NAME\n    from .content_listener import ContentListener\n    from .color_highlighter import CachingColorHighlighter\n    from .phantoms_color_highlighter import PhantomColorHighlighter\n    from .gutter_icons_color_highlighter import IconFactory, GutterIconsColorHighlighter\n    from .color_scheme import init_color_scheme_dir, parse_color_scheme\n    from .color_scheme_color_highlighter import ColorSchemeBuilder, ColorSchemeColorHighlighter\n    from .color_selection_listener import ColorSelectionListener\n    from .color_hover_listener import ColorHoverListener\n    from .load_resource import copy_resource\n    from .regex_compiler import compile_regex\nexcept ValueError:\n    import st_helper\n    import path\n    from color_converter import ColorConverter\n    from color_searcher import ColorSearcher\n    from dummy_event_listener import DummyEventListener\n    from settings import Settings, COLOR_HIGHLIGHTER_SETTINGS_NAME\n    from content_listener import ContentListener\n    from phantoms_color_highlighter import PhantomColorHighlighter\n    from color_highlighter import CachingColorHighlighter\n    from gutter_icons_color_highlighter import IconFactory, GutterIconsColorHighlighter\n    from color_scheme import init_color_scheme_dir, parse_color_scheme\n    from color_scheme_color_highlighter import ColorSchemeBuilder, ColorSchemeColorHighlighter\n    from color_selection_listener import ColorSelectionListener\n    from color_hover_listener import ColorHoverListener\n    from load_resource import copy_resource\n    from regex_compiler import compile_regex\n\n# ST2's python doesn't have XMLTreeBuilder, this code is supposed to fix this, see\n# https://stackoverflow.com/questions/1068510/using-simplexmltreebuilder-in-elementtree for details.\nif not st_helper.is_st3():\n    from xml.etree import ElementTree\n    from elementtree import SimpleXMLTreeBuilder  # pylint: disable=no-name-in-module\n    ElementTree.XMLTreeBuilder = SimpleXMLTreeBuilder.TreeBuilder\n\n\nPREFERENCES_SETTINGS_NAME = \"Preferences.sublime-settings\"\nCOLOR_HIGHLIGHTER_KEY_PREFIX = \"color_highlighter.\"\n\n\ndef set_fake_color_scheme(view, color_scheme, fake_color_scheme):\n    \"\"\"\n    Set current color scheme on a setting object to a fake one.\n\n    If the fake color scheme is not yet created, creates it.\n    Arguments:\n    - view - a view to set the color scheme on.\n    - color_scheme -- current color scheme.\n    - fake_color_scheme -- a fake color scheme for the current color scheme.\n    \"\"\"\n    debug = Settings(sublime.load_settings(COLOR_HIGHLIGHTER_SETTINGS_NAME)).debug\n    fake_color_scheme_path = path.fake_color_scheme_path(color_scheme, path.ABSOLUTE)\n    if not os.path.exists(fake_color_scheme_path):\n        if debug:\n            print(\"ColorHighlighter: action=copy_color_scheme scheme=%s fake_scheme=%s\"\n                  % (color_scheme, fake_color_scheme))\n        init_color_scheme_dir()\n        copy_resource(color_scheme, fake_color_scheme_path)\n\n    settings = view.settings()\n    if settings.get(\"color_scheme\", None) != fake_color_scheme:\n        if debug:\n            print(\"ColorHighlighter: action=set_view_color_scheme scheme=%s\" % (fake_color_scheme))\n        settings.set(\"color_scheme\", fake_color_scheme)\n\n\nclass ColorHighlighterComponents(object):\n    \"\"\"A factory for providing all applications components.\"\"\"\n\n    def __init__(self):\n        \"\"\"Create a ColorHighlighterComponents object.\"\"\"\n        self._settings = Settings(sublime.load_settings(COLOR_HIGHLIGHTER_SETTINGS_NAME))\n        self._color_searcher = None\n        self._fake_color_scheme_data = None\n        self._color_scheme_builder = None\n        self._color_selection_event_listener = None\n        self._color_highlighters = {}\n        for name in self._settings.search_colors_in.color_searcher_names:\n            self._color_highlighters[name] = {}\n        self._icon_factory = None\n        color_searchers = self._settings.search_colors_in\n        if _gutter_icons_color_highlighter_enabled(self._settings):\n            self._icon_factory = self.provide_icon_factory()\n            if not self._icon_factory.check():\n                print(\"Highlighting colors with gutter icons is not supported with current ImageMagick setup. \" +\n                      \"Try configuring the \\\"icon_factory setting\\\"\")\n                color_searchers.selection.color_highlighters.gutter_icons.enabled = False\n                color_searchers.all_content.color_highlighters.gutter_icons.enabled = False\n                color_searchers.hover.color_highlighters.gutter_icons.enabled = False\n\n    def provide_settings(self):\n        \"\"\"Provide the plugin settings.\"\"\"\n        return self._settings\n\n    def provide_formats(self):\n        \"\"\"Provide the formats config.\"\"\"\n        return self._settings.regex_compiler.formats.keys()\n\n    def provide_color_converter(self):\n        \"\"\"Provide a color converter.\"\"\"\n        return ColorConverter(self.provide_formats())\n\n    def provide_color_searcher(self):\n        \"\"\"Provide a color searcher.\"\"\"\n        if self._color_searcher is not None:\n            return self._color_searcher\n\n        self._color_searcher = ColorSearcher(\n            compile_regex(self._settings.regex_compiler),\n            self.provide_color_converter())\n        return self._color_searcher\n\n    def provide_color_selection_listener(self, view):  # pylint: disable=invalid-name\n        \"\"\"\n        Provide a color selection listener for a view.\n\n        Arguments:\n        - view -- the view.\n        \"\"\"\n        if not self._settings.search_colors_in.selection.enabled:\n            return DummyEventListener()\n        return ColorSelectionListener(\n            self.provide_color_searcher(), view,\n            self.provide_color_highlighter(view, self._settings.search_colors_in.selection))\n\n    def provide_color_hover_listener(self, view):  # pylint: disable=invalid-name\n        \"\"\"\n        Provide a color hover listener for a view.\n\n        Arguments:\n        - view -- the view.\n        \"\"\"\n        if not self._settings.search_colors_in.hover.enabled:\n            return DummyEventListener()\n        return ColorHoverListener(\n            self.provide_color_searcher(), view,\n            self.provide_color_highlighter(view, self._settings.search_colors_in.hover))\n\n    def provide_content_listener(self, view):\n        \"\"\"\n        Provide a content listener for a view.\n\n        Arguments:\n        - view -- the view.\n        \"\"\"\n        if not self._settings.search_colors_in.all_content.enabled:\n            return DummyEventListener()\n        return ContentListener(\n            self.provide_color_searcher(), view,\n            self.provide_color_highlighter(view, self._settings.search_colors_in.all_content))\n\n    def provide_color_selection(self, view):\n        \"\"\"\n        Provide a color selection for a view.\n\n        Arguments:\n        - view -- the view.\n        \"\"\"\n        return ColorSelection(\n            self.provide_color_highlighter(view, self._settings.search_colors_in.selection),\n            self.provide_color_highlighter(view, self._settings.search_colors_in.all_content),\n            self.provide_color_highlighter(view, self._settings.search_colors_in.hover),\n            self.provide_color_selection_listener(view),\n            self.provide_content_listener(view),\n            self.provide_color_hover_listener(view))\n\n    def provide_fake_color_scheme_data(self):\n        \"\"\"Provide a fake color scheme data.\"\"\"\n        if self._fake_color_scheme_data is not None:\n            return self._fake_color_scheme_data\n\n        self._fake_color_scheme_data = parse_color_scheme(self.provide_color_scheme(), self._settings.debug)\n        return self._fake_color_scheme_data\n\n    def provide_fake_color_scheme_writer(self):  # pylint: disable=invalid-name\n        \"\"\"Provide a fake color scheme data.\"\"\"\n        return self.provide_fake_color_scheme_data()[2]\n\n    def provide_fake_color_scheme(self):\n        \"\"\"Provide a fake color scheme.\"\"\"\n        return self.provide_fake_color_scheme_data()[0]\n\n    def provide_color_scheme(self):  # pylint: disable=no-self-use\n        \"\"\"Provide a current color scheme.\"\"\"\n        settings = sublime.load_settings(PREFERENCES_SETTINGS_NAME)  # pylint: disable=assignment-from-none\n        color_scheme = settings.get(\"color_scheme\", None)\n        return color_scheme\n\n    def provide_color_scheme_builder(self):\n        \"\"\"Provide a color scheme builder.\"\"\"\n        if self._color_scheme_builder is not None:\n            return self._color_scheme_builder\n\n        _, color_scheme_data, _ = self.provide_fake_color_scheme_data()\n        self._color_scheme_builder = ColorSchemeBuilder(\n            color_scheme_data, self.provide_fake_color_scheme_writer(),\n            self._settings.experimental.asynchronosly_update_color_scheme)\n        return self._color_scheme_builder\n\n    def provide_icon_factory(self):\n        \"\"\"Provide an icon factory.\"\"\"\n        if self._icon_factory is not None:\n            return self._icon_factory\n\n        settings = self._settings.icon_factory\n        self._icon_factory = IconFactory(\n            path.icons_path(path.ABSOLUTE), path.icons_path(path.RELATIVE),\n            settings.convert_command, settings.convert_timeout, self._settings.debug)\n        return self._icon_factory\n\n    def provide_color_highlighter(self, view, searcher):\n        \"\"\"\n        Provide a color highlighter for a view.\n\n        Arguments:\n        - view -- the view.\n        - searcher - the color searcher settings.\n        \"\"\"\n        color_highlighter = self._color_highlighters[searcher.name].get(view.id(), None)\n        if color_highlighter is not None:\n            return color_highlighter\n\n        color_highlighters = []\n        if searcher.color_highlighters.color_scheme.enabled:\n            color_highlighters.append(ColorSchemeColorHighlighter(\n                view, searcher.color_highlighters.color_scheme.highlight_style, self.provide_color_scheme_builder(),\n                searcher.name, self._settings.debug))\n        if searcher.color_highlighters.gutter_icons.enabled:\n            self.provide_fake_color_scheme_writer().fix_color_scheme_for_gutter_colors()\n            color_highlighters.append(GutterIconsColorHighlighter(\n                view, searcher.color_highlighters.gutter_icons.icon_style, self.provide_icon_factory(), searcher.name,\n                self._settings.debug))\n        if searcher.color_highlighters.phantoms.enabled:\n            color_highlighters.append(PhantomColorHighlighter(\n                view, searcher.name, searcher.color_highlighters.phantoms.style,\n                searcher.color_highlighters.phantoms.length, self._settings.debug))\n        color_highlighter = CachingColorHighlighter(color_highlighters)\n        self._color_highlighters[searcher.name][view.id()] = color_highlighter\n        return color_highlighter\n\n    def provide_color_selection_event_listener(self):  # pylint: disable=invalid-name\n        \"\"\"Provide a color selection event listener.\"\"\"\n        if self._color_selection_event_listener is not None:\n            return self._color_selection_event_listener\n\n        self._color_selection_event_listener = ColorSelectionEventListener(self._settings.file_extensions)\n        return self._color_selection_event_listener\n\n\ndef _color_scheme_color_highlighter_enabled(settings):\n    color_searchers = settings.search_colors_in\n    selection_searcher = color_searchers.selection\n    all_content_searcher = color_searchers.all_content\n    hover_seacher = color_searchers.hover\n    return (\n        (selection_searcher.enabled and selection_searcher.color_highlighters.color_scheme.enabled) or\n        (all_content_searcher.enabled and all_content_searcher.color_highlighters.color_scheme.enabled) or\n        (hover_seacher.enabled and hover_seacher.color_highlighters.color_scheme.enabled))\n\n\ndef _gutter_icons_color_highlighter_enabled(settings):\n    color_searchers = settings.search_colors_in\n    selection_searcher = color_searchers.selection\n    all_content_searcher = color_searchers.all_content\n    hover_seacher = color_searchers.hover\n    return (\n        (selection_searcher.enabled and selection_searcher.color_highlighters.gutter_icons.enabled) or\n        (all_content_searcher.enabled and all_content_searcher.color_highlighters.gutter_icons.enabled) or\n        (hover_seacher.enabled and hover_seacher.color_highlighters.gutter_icons.enabled))\n\n\nclass ColorHighlighterPlugin(object):\n    \"\"\"A main class.\"\"\"\n\n    components = None\n    color_searcher = None\n    color_selection_event_listener = None\n\n    _settings = None\n    _preferences = None\n    _color_scheme = None\n    _fake_color_scheme = None\n\n    _ON_SETTINGS_CHANGE_KEY = \"ColorHighlighter\"\n\n    @staticmethod\n    def init():\n        \"\"\"Create all singletons.\"\"\"\n        ColorHighlighterPlugin.components = ColorHighlighterComponents()\n        ColorHighlighterPlugin._settings = sublime.load_settings(  # pylint: disable=assignment-from-none\n            COLOR_HIGHLIGHTER_SETTINGS_NAME)\n        ColorHighlighterPlugin._preferences = sublime.load_settings(  # pylint: disable=assignment-from-none\n            PREFERENCES_SETTINGS_NAME)\n        settings = Settings(ColorHighlighterPlugin._settings)\n\n        autoreload = settings.autoreload\n        if autoreload.when_settings_change:\n            ColorHighlighterPlugin._settings.add_on_change(\n                ColorHighlighterPlugin._ON_SETTINGS_CHANGE_KEY, ColorHighlighterPlugin._on_settings_change)\n\n        if _color_scheme_color_highlighter_enabled(settings):  # pylint: disable=invalid-name\n            ColorHighlighterPlugin._color_scheme = ColorHighlighterPlugin.components.provide_color_scheme()\n            ColorHighlighterPlugin._fake_color_scheme = ColorHighlighterPlugin.components.provide_fake_color_scheme()\n            if autoreload.when_color_scheme_change:\n                ColorHighlighterPlugin._preferences.add_on_change(\n                    ColorHighlighterPlugin._ON_SETTINGS_CHANGE_KEY, ColorHighlighterPlugin._on_preferences_change)\n\n        color_selection_event_listener = ColorHighlighterPlugin.components.provide_color_selection_event_listener()\n        ColorHighlighterPlugin.color_selection_event_listener = color_selection_event_listener\n        ColorHighlighterPlugin.color_selection_event_listener.start()\n        for window in sublime.windows():\n            for view in window.views():\n                ColorHighlighterPlugin.color_selection_event_listener.on_new(view)\n                ColorHighlighterPlugin.color_selection_event_listener.on_selection_modified(view)\n\n    @staticmethod\n    def _on_settings_change():\n        ColorHighlighterPlugin.restart()\n\n    @staticmethod\n    def _on_preferences_change():\n        new_color_scheme = ColorHighlighterPlugin.components.provide_color_scheme()\n        if new_color_scheme in [ColorHighlighterPlugin._color_scheme, ColorHighlighterPlugin._fake_color_scheme]:\n            return\n        ColorHighlighterPlugin.restart()\n\n    @staticmethod\n    def restart():\n        \"\"\"Restart the plugin: deinit and then init it.\"\"\"\n        ColorHighlighterPlugin.deinit()\n        ColorHighlighterPlugin.init()\n\n    @staticmethod\n    def deinit():\n        \"\"\"\n        Clean up resources.\n\n        This class is a singleton, so this method cleans up all static variables as well.\n        \"\"\"\n        ColorHighlighterPlugin._settings.clear_on_change(ColorHighlighterPlugin._ON_SETTINGS_CHANGE_KEY)\n        ColorHighlighterPlugin._preferences.clear_on_change(ColorHighlighterPlugin._ON_SETTINGS_CHANGE_KEY)\n        ColorHighlighterPlugin.color_selection_event_listener.clear_all()\n\n\nclass ColorSelection(object):\n    \"\"\"The main class for listening ST events.\"\"\"\n\n    def __init__(self, selection_color_highlighter, content_color_highlighter,  # pylint: disable=too-many-arguments\n                 hover_color_highlighter, color_selection_listener, content_listener, color_hover_listener):\n        \"\"\"\n        Initialize the event listener.\n\n        Arguments:\n        - selection_color_highlighter - color highlighter for selections.\n        - content_color_highlighter - color highlighter for all content.\n        - color_selection_listener - the color selection listener.\n        - content_listener - the content listener.\n        - color_hover_listener - the color hover listener.\n        \"\"\"\n        self._selection_color_highlighter = selection_color_highlighter\n        self._content_color_highlighter = content_color_highlighter\n        self._hover_color_highlighter = hover_color_highlighter\n        self._color_hover_listener = color_hover_listener\n        self._color_selection_listener = color_selection_listener\n        self._content_listener = content_listener\n\n    def on_pre_save(self):\n        \"\"\"on_pre_save event.\"\"\"\n        self._content_listener.on_load()\n\n    def on_new(self):\n        \"\"\"on_new event.\"\"\"\n        self._content_listener.on_load()\n\n    def on_clone(self):\n        \"\"\"on_clone event.\"\"\"\n        self._content_listener.on_load()\n\n    def on_load(self):\n        \"\"\"on_load event.\"\"\"\n        self._content_listener.on_load()\n\n    def on_selection_modified(self):\n        \"\"\"on_selection_modified event.\"\"\"\n        self._color_selection_listener.on_selection_modified()\n        self._color_hover_listener.on_selection_modified()\n\n    def on_hover(self, point, hover_zone):\n        \"\"\"on_hover event.\"\"\"\n        self._color_hover_listener.on_hover(point, hover_zone)\n\n    def on_modified(self):\n        \"\"\"on_modified event.\"\"\"\n        self._content_listener.on_modified()\n        self._color_selection_listener.on_modified()\n        self._color_hover_listener.on_modified()\n\n    def clear_all(self):\n        \"\"\"Clean up all highlightings.\"\"\"\n        self._content_color_highlighter.clear_all()\n        self._selection_color_highlighter.clear_all()\n        self._hover_color_highlighter.clear_all()\n\n\nclass ColorSelectionEventListener(object):\n    \"\"\"The main class for listening ST events.\"\"\"\n\n    def __init__(self, file_extenstions):\n        \"\"\"\n        Initialize the event listener.\n\n        Arguments:\n        - file_extenstions - a list with file extensions in which colors should be highlighted.\n        \"\"\"\n        self._listening = False\n        self._view_listeners = {}\n        self._file_extenstions = file_extenstions\n\n    def on_pre_save(self, view):\n        \"\"\"on_pre_save event.\"\"\"\n        if not self._listening:\n            return\n        if not self._init_view(view):\n            return\n        self._view_listeners[view.id()].on_pre_save()\n\n    def on_new(self, view):\n        \"\"\"on_new event.\"\"\"\n        if not self._listening:\n            return\n        if not self._init_view(view):\n            return\n        self._view_listeners[view.id()].on_new()\n\n    def on_load(self, view):\n        \"\"\"on_load event.\"\"\"\n        if not self._listening:\n            return\n        if not self._init_view(view):\n            return\n        self._view_listeners[view.id()].on_load()\n\n    def on_clone(self, view):\n        \"\"\"on_clone event.\"\"\"\n        if not self._listening:\n            return\n        if not self._init_view(view):\n            return\n        self._view_listeners[view.id()].on_clone()\n\n    def on_selection_modified(self, view):\n        \"\"\"on_selection_modified event.\"\"\"\n        if not self._listening:\n            return\n        if not self._init_view(view):\n            return\n        self._view_listeners[view.id()].on_selection_modified()\n\n    def on_hover(self, view, point, hover_zone):\n        \"\"\"on_hover event.\"\"\"\n        if not self._listening:\n            return\n        if not self._init_view(view):\n            return\n        self._view_listeners[view.id()].on_hover(point, hover_zone)\n\n    def on_modified(self, view):\n        \"\"\"on_modified event.\"\"\"\n        if not self._listening:\n            return\n        if not self._init_view(view):\n            return\n        self._view_listeners[view.id()].on_modified()\n\n    def _init_view(self, view):\n        view_id = view.id()\n        if view_id in self._view_listeners:\n            return True\n\n        if not self._supported_file_extension(view):\n            return False\n        self._view_listeners[view_id] = ColorHighlighterPlugin.components.provide_color_selection(view)\n        if _color_scheme_color_highlighter_enabled(ColorHighlighterPlugin.components.provide_settings()):\n            color_scheme = ColorHighlighterPlugin.components.provide_color_scheme()\n            # Do not change the color scheme on widgets.\n            if not view.settings().get(\"color_scheme\", None).endswith(\".stTheme\"):\n                set_fake_color_scheme(\n                    view, color_scheme, ColorHighlighterPlugin.components.provide_fake_color_scheme())\n        return True\n\n    def _supported_file_extension(self, view):\n        if \"all\" in self._file_extenstions:\n            return True\n        file_name = view.file_name()\n        if file_name is None:\n            return False\n        return os.path.splitext(file_name)[1] in self._file_extenstions\n\n    def clear_all(self):\n        \"\"\"Clean up all highlightings.\"\"\"\n        for view_id in self._view_listeners:\n            self._view_listeners[view_id].clear_all()\n        self._view_listeners = {}\n\n    def start(self):\n        \"\"\"Start listening to ST events.\"\"\"\n        self._listening = True\n\n\nclass ColorSelectionEventSublimeListener(sublime_plugin.EventListener):\n    \"\"\"The main class for listening ST events.\"\"\"\n\n    def on_pre_save(self, view):  # pylint: disable=no-self-use\n        \"\"\"on_pre_save event.\"\"\"\n        # ST2 calls these events before our simulated plugin_loaded.\n        if ColorHighlighterPlugin.components is None:\n            return\n        ColorHighlighterPlugin.components.provide_color_selection_event_listener().on_pre_save(view)\n\n    def on_new(self, view):  # pylint: disable=no-self-use\n        \"\"\"on_new event.\"\"\"\n        # ST2 calls these events before our simulated plugin_loaded.\n        if ColorHighlighterPlugin.components is None:\n            return\n        ColorHighlighterPlugin.components.provide_color_selection_event_listener().on_new(view)\n\n    def on_load(self, view):  # pylint: disable=no-self-use\n        \"\"\"on_load event.\"\"\"\n        # ST2 calls these events before our simulated plugin_loaded.\n        if ColorHighlighterPlugin.components is None:\n            return\n        ColorHighlighterPlugin.components.provide_color_selection_event_listener().on_load(view)\n\n    def on_clone(self, view):  # pylint: disable=no-self-use\n        \"\"\"on_clone event.\"\"\"\n        # ST2 calls these events before our simulated plugin_loaded.\n        if ColorHighlighterPlugin.components is None:\n            return\n        ColorHighlighterPlugin.components.provide_color_selection_event_listener().on_clone(view)\n\n    def on_selection_modified(self, view):  # pylint: disable=no-self-use\n        \"\"\"on_selection_modified event.\"\"\"\n        # ST2 calls these events before our simulated plugin_loaded.\n        if ColorHighlighterPlugin.components is None:\n            return\n        ColorHighlighterPlugin.components.provide_color_selection_event_listener().on_selection_modified(view)\n\n    def on_hover(self, view, point, hover_zone):  # pylint: disable=no-self-use\n        \"\"\"on_hover event.\"\"\"\n        # ST2 calls these events before our simulated plugin_loaded.\n        if ColorHighlighterPlugin.components is None:\n            return\n        ColorHighlighterPlugin.components.provide_color_selection_event_listener().on_hover(view, point, hover_zone)\n\n    def on_query_context(self, view, key, operator,  # pylint: disable=no-self-use,too-many-arguments,unused-argument\n                         operand, match_all):  # pylint: disable=unused-argument\n        \"\"\"on_query_context event.\"\"\"\n        # ST2 calls these events before our simulated plugin_loaded.\n        if ColorHighlighterPlugin.components is None:\n            return\n        if not key.startswith(COLOR_HIGHLIGHTER_KEY_PREFIX):\n            return None\n        return ColorHighlighterPlugin.components.provide_settings().default_keybindings\n\n    def on_modified(self, view):  # pylint: disable=no-self-use\n        \"\"\"on_modified event.\"\"\"\n        # ST2 calls these events before our simulated plugin_loaded.\n        if ColorHighlighterPlugin.components is None:\n            return\n        ColorHighlighterPlugin.components.provide_color_selection_event_listener().on_modified(view)\n\n\ndef _remove_old_user_settings():\n    settings = sublime.load_settings(COLOR_HIGHLIGHTER_SETTINGS_NAME)  # pylint: disable=assignment-from-none\n    if settings.get(\"channels\", None) is None:\n        return\n    user_settings_path = os.path.join(path.packages_path(path.ABSOLUTE), \"User\", COLOR_HIGHLIGHTER_SETTINGS_NAME)\n    os.remove(user_settings_path)\n    shutil.rmtree(path.data_path(path.ABSOLUTE))\n    if Settings(sublime.load_settings(COLOR_HIGHLIGHTER_SETTINGS_NAME)).debug:\n        print(\"ColorHighlighter: action=remove_old_settings\")\n\n\ndef plugin_loaded():  # noqa: D401\n    \"\"\"Called when plugin has finished loading.\"\"\"\n    _remove_old_user_settings()\n    debug = Settings(sublime.load_settings(COLOR_HIGHLIGHTER_SETTINGS_NAME)).debug\n    if debug:\n        print(\"ColorHighlighter: action=start st=%s\" % (st_helper.st_version()))\n    ColorHighlighterPlugin.init()\n\n\ndef plugin_unloaded():  # noqa: D401\n    \"\"\"Called when plugin is getting unloaded.\"\"\"\n    if Settings(sublime.load_settings(COLOR_HIGHLIGHTER_SETTINGS_NAME)).debug:\n        print(\"ColorHighlighter: action=stop st=%s\" % (st_helper.st_version()))\n    ColorHighlighterPlugin.deinit()\n\n\n# ST2 doesn't have plugin_loaded and plugin_unloaded they need to be emulated.\nif not st_helper.is_st3():\n    def unload_handler():  # noqa: D401\n        \"\"\"\n        Called when ST2 plugin gets unloaded.\n\n        This is an undocumented ST2 feature. It's maps to ST3's plugin_unloaded function call.\n        \"\"\"\n        plugin_unloaded()\n\n    def call_plugin_loaded_when_settings_loaded():  # pylint: disable=invalid-name\n        \"\"\"\n        Run plugin_loaded when preferences are loaded.\n\n        ST2 doesn't have plugin_loaded and the API can be called right away. However, settings are loaded asynchronosly\n        and return the defaut value until loaded, which is useless. This function emulates plugin_unloaded by\n        waiting until settings are loaded and calling plugin_loaded when they do.\n        \"\"\"\n        color_scheme = sublime.load_settings(PREFERENCES_SETTINGS_NAME).get(\"color_scheme\", None)\n        color_searchers = sublime.load_settings(COLOR_HIGHLIGHTER_SETTINGS_NAME).get(\"search_colors_in\", None)\n        if color_scheme is not None and color_searchers is not None:\n            plugin_loaded()\n        else:\n            sublime.set_timeout(call_plugin_loaded_when_settings_loaded, 100)\n\n    call_plugin_loaded_when_settings_loaded()\n"
        },
        {
          "name": "messages.json",
          "type": "blob",
          "size": 0.0751953125,
          "content": "{\n    \"install\": \"messages/install.txt\",\n    \"8.0\": \"messages/install.txt\"\n}\n"
        },
        {
          "name": "messages",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 1.564453125,
          "content": "site_name: ColorHighlighter Documentation\nsite_url: https://Monnoroch.github.io/ColorHighlighter\nrepo_url: https://github.com/Monnoroch/ColorHighlighter\nedit_uri: tree/master/docs/src\nsite_description: A color highlighting plugin for Sublime Text 2 and 3.\n\npages:\n  - ColorHighlighter: index.md\n\ntheme: material\ndocs_dir: docs/src\ntheme_dir: docs/theme\n\nmarkdown_extensions:\n  - markdown.extensions.toc:\n      slugify: !!python/name:pymdownx.slugs.gfm\n  - markdown.extensions.admonition:\n  - markdown.extensions.smarty:\n      smart_quotes: false\n  - pymdownx.betterem:\n  - markdown.extensions.attr_list:\n  - markdown.extensions.def_list:\n  - markdown.extensions.tables:\n  - markdown.extensions.abbr:\n  - pymdownx.extrarawhtml:\n  - pymdownx.superfences:\n  - pymdownx.highlight:\n      css_class: codehilite\n  - pymdownx.inlinehilite:\n  - pymdownx.magiclink:\n      repo_url_shortener: true\n      base_repo_url: https://github.com/Monnoroch/ColorHighlighter\n  - pymdownx.tilde:\n  - pymdownx.caret:\n  - pymdownx.smartsymbols:\n  - pymdownx.emoji:\n      emoji_generator: !!python/name:pymdownx.emoji.to_png\n  - pymdownx.escapeall:\n      hardbreak: true\n      nbsp: true\n  - pymdownx.tasklist:\n      custom_checkbox: true\n  # TODO: Setup common includes in _snippets like links etc.\n  # - pymdownx.snippets:\n  #     base_path: docs/src/_snippets\n  - pymdownx.keys:\n      separator: \"\\uff0b\"\n  - pymdownx.details:\n\nextra:\n  palette:\n    primary: blue\n    accent: blue\n  font:\n    text: Roboto\n    code: Roboto Mono\n  social:\n    - type: github\n      link: https://github.com/Monnoroch\n\nextra_css:\n  - extra.css\n"
        },
        {
          "name": "path.py",
          "type": "blob",
          "size": 4.361328125,
          "content": "\"\"\"A module with tools for paths.\"\"\"\n\nimport os\n\ntry:\n    from . import st_helper\n    from .settings import COLOR_HIGHLIGHTER_SETTINGS_NAME\nexcept ValueError:\n    from settings import COLOR_HIGHLIGHTER_SETTINGS_NAME\n    import st_helper\n\nif st_helper.running_in_st():\n    import sublime  # pylint: disable=import-error\nelse:\n    from . import sublime\n\n\ndef normalize_path_for_st(path):\n    \"\"\"\n    Normalize path for ST.\n\n    On Linux, does nothing. On windows, maps windows directory separators to linux ones, as ST wants linux\n    directory separators.\n    Arguments:\n    - path - the path to normalize.\n    \"\"\"\n    if sublime.platform() == \"windows\":\n        return path.replace(\"\\\\\", \"/\")\n    return path\n\n\nRELATIVE = True\nABSOLUTE = False\n\n\ndef plugin_name():\n    \"\"\"\n    Determine if the plugin is installed via a Package Control package or manually.\n\n    Returns the plugin directory or package name.\n    \"\"\"\n    manual_install_plugin_name = \"ColorHighlighter\"\n    package_install_plugin_name = \"Color Highlighter\"\n    if (os.path.exists(os.path.join(\n            packages_path(ABSOLUTE), manual_install_plugin_name, COLOR_HIGHLIGHTER_SETTINGS_NAME))):\n        return manual_install_plugin_name\n    return package_install_plugin_name\n\n\ndef packages_path(relative):\n    \"\"\"\n    Get packages path.\n\n    Arguments:\n    - relative - whether to get an absolute path or a relative to sublime packages directory.\n    \"\"\"\n    path = sublime.packages_path()\n    if relative:\n        path = os.path.basename(path)\n    return path\n\n\ndef data_path(relative):\n    \"\"\"\n    Get Color Highlighter path.\n\n    Arguments:\n    - relative - whether to get an absolute path or a relative to sublime packages directory.\n    \"\"\"\n    return os.path.join(packages_path(relative), \"User\", plugin_name())\n\n\ndef icons_path(relative):\n    \"\"\"\n    Get Color Highlighter icons path.\n\n    Arguments:\n    - relative - whether to get an absolute path or a relative to sublime packages directory.\n    \"\"\"\n    return os.path.join(data_path(relative), \"icons\")\n\n\ndef themes_path(relative):\n    \"\"\"\n    Get Color Highlighter themes path.\n\n    Arguments:\n    - relative - whether to get an absolute path or a relative to sublime packages directory.\n    \"\"\"\n    return os.path.join(data_path(relative), \"themes\")\n\n\ndef color_picker_path(relative):\n    \"\"\"\n    Get color picker directory path.\n\n    Arguments:\n    - relative - whether to get an absolute path or a relative to sublime packages directory.\n    \"\"\"\n    return os.path.join(data_path(relative), \"ColorPicker\")\n\n\ndef _color_picker_file():\n    executable_suffix = None\n    platform = sublime.platform()\n    if platform == \"windows\":\n        executable_suffix = \"win.exe\"\n    else:\n        executable_suffix = \"%s_%s\" % (platform, sublime.arch())\n    return \"ColorPicker_\" + executable_suffix\n\n\ndef color_picker_file(relative):\n    \"\"\"\n    Get color picker file.\n\n    Arguments:\n    - relative - whether to get an absolute path or a relative to sublime packages directory.\n    \"\"\"\n    return os.path.join(color_picker_path(relative), _color_picker_file())\n\n\ndef color_picker_binary(relative):\n    \"\"\"\n    Get color picker file.\n\n    Arguments:\n    - relative - whether to get an absolute path or a relative to sublime packages directory.\n    \"\"\"\n    path = os.path.join(packages_path(relative), plugin_name(), \"ColorPicker\", _color_picker_file())\n    if relative:\n        path = normalize_path_for_st(path)\n    return path\n\n\ndef fake_color_scheme_path(color_scheme, relative):\n    \"\"\"\n    Given a color scheme, get a fake color scheme path.\n\n    Arguments:\n    - color_scheme - color scheme sublime relative path.\n    - relative - whether to get an absolute path or a relative to sublime packages directory.\n    Returns a path to the fake color scheme for this color scheme.\n    \"\"\"\n    file_name = os.path.basename(color_scheme)\n    path = os.path.join(themes_path(relative), file_name)\n    if relative:\n        path = normalize_path_for_st(path)\n    return path\n\n\ndef cached_scheme_path(color_scheme):\n    \"\"\"\n    Get the .cache file path for a color scheme file.\n\n    Arguments:\n    - color_scheme - the absolute color scheme file path.\n    \"\"\"\n    cache_suffix = \".cache\"\n    if st_helper.is_st3():\n        packages = packages_path(ABSOLUTE)\n        cache_dir = os.path.join(os.path.dirname(packages), \"Cache\")\n        return os.path.join(cache_dir, color_scheme[len(packages) + 1:] + cache_suffix)\n    return color_scheme + cache_suffix\n"
        },
        {
          "name": "phantoms_color_highlighter.py",
          "type": "blob",
          "size": 3.3017578125,
          "content": "\"\"\"A color highlighters that uses phantom sets to highlight colors.\"\"\"\n\ntry:\n    from . import st_helper\n    from .color_highlighter import ColorHighlighter\nexcept ValueError:\n    import st_helper\n    from color_highlighter import ColorHighlighter\n\n\nif st_helper.running_in_st():\n    import sublime  # pylint: disable=import-error\nelse:\n    from . import sublime\n\n\nclass PhantomColorHighlighter(ColorHighlighter):\n    \"\"\"\n    A color highlighter that highlights colors using phantoms.\n\n    Only supported on ST3.\n    \"\"\"\n\n    phantom_key_template = \"CH_phantom_%s_%d_%d\"\n\n    html_template = '''\n<body>\n    <style>\n        * {\n            background-color: %s;\n        }\n    </style>\n    %s\n</body>\n'''\n    space_symbol = \"&nbsp;\"\n\n    if st_helper.is_st3():\n        _phantom_styles = {\n            \"right\": sublime.LAYOUT_INLINE,\n            \"left\": sublime.LAYOUT_INLINE,\n            \"below\": sublime.LAYOUT_BELOW\n        }\n\n    _inline_styles = {\"right\": True, \"left\": True}\n\n    def __init__(self, view, name, style, length, debug):  # pylint: disable=too-many-arguments\n        \"\"\"\n        Create a phantom color highlighter.\n\n        Arguments:\n        - view - a view to highlight colors in.\n        - name - the name of the color highlighter.\n        - style - the style of the phantoms.\n        - length - the length of the block in the \"inline\" mode.\n        - debug - whether to enable debug mode.\n        \"\"\"\n        assert style in self._phantom_styles\n        self._view = view\n        self._name = name\n        self._style = style\n        self._length = length\n        self._debug = debug\n\n    def highlight_region(self, context, value):\n        \"\"\"\n        Highlight a region.\n\n        Arguments:\n        - context - a dict with color highlighter run data.\n        - value - tuple (region to highlight, it's color).\n        Returns True, if highlighted, False otherwise.\n        \"\"\"\n        (region, color) = value\n        html = self._generate_phantom_html(region, color)\n        if self._debug:\n            print(\"ColorHighlighter: action=highlight highlighter=PhantomColorHighlighter region=%s color=%s\"\n                  % (str(region), str(color)))\n        self._view.add_phantom(\n            PhantomColorHighlighter.phantom_key_template % (self._name, region.a, region.b),\n            self._get_region(region), html,\n            self._phantom_styles[self._style], None)\n\n    def unhighlight_region(self, context, value):\n        \"\"\"\n        Unhighlight a region.\n\n        Arguments:\n        - context - a dict with color highlighter run data.\n        - value - tuple (region to unhighlight, it's color).\n        \"\"\"\n        (region, _) = value\n        self._view.erase_phantoms(PhantomColorHighlighter.phantom_key_template % (self._name, region.a, region.b))\n\n    def _get_region(self, region):\n        if self._style == \"below\":\n            return region.region()\n        elif self._style == \"right\":\n            return sublime.Region(region.b, region.b)\n        elif self._style == \"left\":\n            return sublime.Region(region.a, region.a)\n\n    def _generate_phantom_html(self, region, color):\n        if self._style == \"below\":\n            size = region.length()\n        elif self._style in self._inline_styles:\n            size = self._length\n        return PhantomColorHighlighter.html_template % (color, PhantomColorHighlighter.space_symbol * size)\n"
        },
        {
          "name": "pick_color_command.py",
          "type": "blob",
          "size": 5.705078125,
          "content": "\"\"\"A ST3 commands for converting colors between formats.\"\"\"\n\nimport os\nimport stat\nimport subprocess\nimport threading\n\nfrom ast import literal_eval\n\ntry:\n    from . import st_helper\n    from . import path\n    from .color_converter import ColorConverter\n    from .color_searcher import ColorSearcher\n    from .color_selection_listener import search_colors_in_selection\n    from .load_resource import copy_resource, get_binary_resource_size\n    from .regex_compiler import compile_regex\n    from .settings import Settings, COLOR_HIGHLIGHTER_SETTINGS_NAME\nexcept ValueError:\n    import st_helper\n    import path\n    from color_converter import ColorConverter\n    from color_searcher import ColorSearcher\n    from color_selection_listener import search_colors_in_selection\n    from load_resource import copy_resource, get_binary_resource_size\n    from regex_compiler import compile_regex\n    from settings import Settings, COLOR_HIGHLIGHTER_SETTINGS_NAME\n\n\nif st_helper.running_in_st():\n    import sublime  # pylint: disable=import-error\n    import sublime_plugin  # pylint: disable=import-error\nelse:\n    from . import sublime\n    from . import sublime_plugin\n\n\nclass ColorHighlighterPickColor(sublime_plugin.TextCommand):\n    \"\"\"Convert currently selected colors to a next color format.\"\"\"\n\n    def run(self, edit):  # pylint: disable=unused-argument\n        \"\"\"\n        Run the command.\n\n        Arguments:\n        - edit - an edit object.\n        \"\"\"\n        _run_async(self._open_color_picker)\n\n    def _open_color_picker(self):\n        _init_color_picker()\n        settings = Settings(sublime.load_settings(COLOR_HIGHLIGHTER_SETTINGS_NAME))\n        formats = [value for value in sorted(settings.regex_compiler.formats.keys())]\n        color_converter = ColorConverter(formats)\n        colors = [value for value in _get_colors(self.view, settings, formats, color_converter)]\n        replace_colors = len(colors) > 0\n        if replace_colors:\n            initial_color = colors[0][1][1:]\n        else:\n            initial_color = \"FFFFFFFF\"\n        popen = subprocess.Popen(\n            [path.color_picker_file(path.ABSOLUTE), initial_color],\n            stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=False)\n        output, error = popen.communicate()\n        output = output.decode(\"utf-8\")\n        error = error.decode(\"utf-8\")\n        if error is not None and error:\n            print(\"Color Picker error:\\n\" + error)\n\n        if output == \"CANCEL\":\n            if settings.debug:\n                print(\"ColorHighlighter: action=run_command name=color_highlighter_pick_color result=canceled\")\n            return\n\n        replace_data = []\n        if replace_colors:\n            for (region, _, format_name) in colors:\n                new_color = color_converter.from_color((output, format_name))\n                if settings.debug:\n                    print((\"ColorHighlighter: action=run_command name=color_highlighter_pick_color result=replace \" +\n                           \"region=%s format=%s color=%s\") % (region.region(), format_name, new_color))\n                replace_data.append((region.region(), new_color))\n        else:\n            for region in self.view.sel():\n                if settings.debug:\n                    print((\"ColorHighlighter: action=run_command name=color_highlighter_pick_color result=insert \" +\n                           \"region=%s color=%s\") % (region, output))\n                replace_data.append((region, output))\n        self.view.run_command(\"color_highlighter_impl_replace_color\", {\"replace_data\": str(replace_data)})\n\n\ndef _get_colors(view, settings, formats, color_converter):\n    color_searcher = ColorSearcher(compile_regex(settings.regex_compiler), color_converter)\n    for (region, color, match) in search_colors_in_selection(view, color_searcher):\n        format_name = _get_format_name(match, formats)\n        yield region, color, format_name\n\n\ndef _get_format_name(match, formats):\n    for name in formats:\n        if match.get(name, None) is not None:\n            return name\n    raise Exception(\"Unreachable code.\")\n\n\nclass ColorHighlighterImplReplaceColor(sublime_plugin.TextCommand):\n    \"\"\"Replace texts in a list of regions.\"\"\"\n\n    def run(self, edit, replace_data):\n        \"\"\"\n        Run the command.\n\n        Arguments:\n        - edit - an edit object.\n        - replace_data - string representation of a list of (region, color) pairs.\n        \"\"\"\n        regions_to_replace = literal_eval(replace_data)\n        offset = 0\n        for (region, color) in sorted(regions_to_replace):\n            self.view.replace(edit, sublime.Region(offset + region[0], offset + region[1]), color)\n            offset -= (region[1] - region[0])\n            offset += len(color)\n\n\ndef _run_async(callback):\n    if st_helper.is_st3():\n        sublime.set_timeout_async(callback, 0)\n    else:\n        _RunAsync(callback).start()\n\n\nclass _RunAsync(threading.Thread):\n    def __init__(self, callback):\n        self.callback = callback\n        threading.Thread.__init__(self)\n\n    def run(self):\n        self.callback()\n\n\ndef _create_if_not_exists(path_to_create):\n    if not os.path.exists(path_to_create):\n        os.mkdir(path_to_create)\n\n\ndef _init_color_picker():\n    _create_if_not_exists(path.data_path(path.ABSOLUTE))\n    _create_if_not_exists(path.color_picker_path(path.ABSOLUTE))\n    color_picker_file = path.color_picker_file(path.ABSOLUTE)\n    color_picker_resource = path.color_picker_binary(path.RELATIVE)\n    if (os.path.exists(color_picker_file) and\n            os.path.getsize(color_picker_file) == get_binary_resource_size(color_picker_resource)):\n        return\n\n    copy_resource(color_picker_resource, color_picker_file)\n    chmod_flags = stat.S_IXUSR | stat.S_IXGRP | stat.S_IRUSR | stat.S_IRUSR | stat.S_IWUSR | stat.S_IWGRP\n    os.chmod(color_picker_file, chmod_flags)\n"
        },
        {
          "name": "regex_compiler.py",
          "type": "blob",
          "size": 2.626953125,
          "content": "\"\"\"A module with tools for paths.\"\"\"\n\nimport copy\nimport re\n\ntry:\n    from . import topsort\nexcept ValueError:\n    import topsort\n\n\ndef compile_regex(config):\n    \"\"\"\n    Build a regex from the config.\n\n    Arguments:\n    config -- a dict with two dicts inside: channels and formats. Channels are named definitions of how a channel might\n    look. Formats use channel names to define how colors look and how to extract channels from them.\n    Returns a regex for the input config.\n    \"\"\"\n    channels = _normalize_channels(config.channels)\n    channels[\"empty\"] = \"\"\n    formats = _normalize_regexes(config.formats, channels)\n    sorted_regexes = [formats[key].regex for key in topsort.sort(formats, lambda value: value.after)]\n    regexes = \"|\".join(sorted_regexes)\n    return re.compile(regexes)\n\n\ndef _normalize_regexes(formats, channels):\n    formats = copy.deepcopy(formats)\n    for name in formats:\n        color_format = formats[name]\n        color_format.regex = _normalize_regex(color_format.regex, channels, name)\n    return formats\n\n\ndef _normalize_regex(regex, channels, format_name):\n    group_str_template = \"(?P<%s>\"\n    group_template = \"(?P<%s>%s)\"\n    groups = re.compile(regex).groupindex.keys()\n    for group in groups:\n        group_str = group_str_template % group\n        group_start = regex.find(group_str)\n        assert group_start != -1\n        start = group_start + len(group_str)\n        end = regex.find(\")\", start)\n        assert end != -1\n        channel_names = regex[start:end]\n        group_channels = []\n        for channel_name in channel_names.split(\"|\"):\n            channel = channels.get(channel_name, None)\n            if channel is None:\n                raise ValueError(\"Regex %s uses a non-existent channel %s for group %s.\" % (regex, channel_name, group))\n            group_channels.append(channel)\n        regex = regex.replace(\n            group_template % (group, channel_names),\n            group_template % (\"%s_%s\" % (format_name, group), \"|\".join(group_channels)))\n    return group_template % (format_name, regex)\n\n\ndef _normalize_channels(channels):\n    normalized_channels = {}\n    for name in channels:\n        normalized_channels[name] = _get_channel_value(channels, name, {})\n    return normalized_channels\n\n\ndef _get_channel_value(channels, name, used_names):\n    if name in used_names:\n        # TODO(monnoroch): explain in more detail which channels depend on each other.  # pylint: disable=fixme\n        raise ValueError(\"Reccurent dependencies between channels!\")\n    used_names[name] = True\n\n    value = channels[name]\n    if value in channels:\n        return _get_channel_value(channels, value, used_names)\n    return value\n"
        },
        {
          "name": "regions.py",
          "type": "blob",
          "size": 3.6171875,
          "content": "\"\"\"Helper functions for manipulating regions.\"\"\"\n\ntry:\n    from .st_helper import running_in_st\nexcept ValueError:\n    from st_helper import running_in_st\n\n\nif running_in_st():\n    import sublime  # pylint: disable=import-error\nelse:\n    from . import sublime\n\n\nclass NormalizedRegion(object):\n    \"\"\"\n    A convenient wrapper around sublime.Region.\n\n    Regions can have their end smaller than their beginning. This happens, for example, when the user selects from\n    right to left. This function normalizes such regions to have their end always before their beginning.\n    \"\"\"\n\n    def __init__(self, a, b=None):\n        \"\"\"\n        Initialize a region with a sublime.Region.\n\n        Arguments:\n        a -- a sublime.Region to normalize or the regions's beginning.\n        b -- the regions's end. Only set if a is the regions's beginning.\n        \"\"\"\n        if b is None:\n            # a is a sublime.Region.\n            b = a.b\n            a = a.a\n        else:\n            a = a\n            b = b\n\n        if a > b:\n            self.a = b  # pylint: disable=invalid-name\n            self.b = a  # pylint: disable=invalid-name\n        else:\n            self.a = a  # pylint: disable=invalid-name\n            self.b = b  # pylint: disable=invalid-name\n\n    def length(self):\n        \"\"\"Get the normalizer region's length.\"\"\"\n        return self.b - self.a\n\n    def region(self):\n        \"\"\"Return a sublime.Region for this normalized region.\"\"\"\n        return sublime.Region(self.a, self.b)\n\n    def __eq__(self, other):\n        \"\"\"Compare normalized regions for equality.\"\"\"\n        if not isinstance(other, NormalizedRegion):\n            return False\n        return self.a == other.a and self.b == other.b\n\n    def __hash__(self):\n        \"\"\"Get the normalized regions hash.\"\"\"\n        return hash(self.a) ^ hash(self.b)\n\n    def __str__(self):\n        \"\"\"Get the normalided regions string representation.\"\"\"\n        return \"(%d, %d)\" % (self.a, self.b)\n\n    def __repr__(self):\n        \"\"\"Get the normalided regions string representation.\"\"\"\n        return self.__str__()\n\n\ndef intersects(region1, region2):\n    \"\"\"\n    Check if two regions intersect.\n\n    If regions share an end, they don't intersect unless one of the regions has zero length in which case they do\n    intersect.\n\n    Arguments:\n    region1 -- a first region.\n    region2 -- a second region.\n    Returns True if regions intersect and False otherwise.\n    \"\"\"\n    if region1.a == region1.b:\n        return region2.a <= region1.a and region2.b >= region1.b\n    if region2.a == region2.b:\n        return region1.a <= region2.a and region1.b >= region2.b\n    if region1.a >= region2.b:\n        return False\n    if region1.b <= region2.a:\n        return False\n    return True\n\n\ndef intersects_any(input_region, regions):\n    \"\"\"\n    Check a region intersects with any of the other regions.\n\n    If regions share an end, they don't intersect unless one of the regions has zero length in which case they do\n    intersect.\n\n    Arguments:\n    input_region -- a region to check.\n    regions -- a list of regions.\n    Returns True if the first region intersects with any of the other regions and False otherwise.\n    \"\"\"\n    for region in regions:\n        if intersects(input_region, region):\n            return True\n    return False\n\n\ndef deduplicate_regions(regions):\n    \"\"\"\n    Deduplicate regions.\n\n    Argumens:\n    - regions - an iterable of pairs (region, color).\n    Returns an iterable of (region, color) with unique regions.\n    \"\"\"\n    processed_regions = {}\n    for region in regions:\n        if region in processed_regions:\n            continue\n        processed_regions[region] = True\n    return processed_regions.keys()\n"
        },
        {
          "name": "set_setting_command.py",
          "type": "blob",
          "size": 9.9501953125,
          "content": "\"\"\"A ST3 command for setting plugin settings.\"\"\"\n\ntry:\n    from . import st_helper\n    from .settings import COLOR_HIGHLIGHTER_SETTINGS_NAME, ColorSchemeColorHighlighterSettings, Settings\nexcept ValueError:\n    import st_helper\n    from settings import COLOR_HIGHLIGHTER_SETTINGS_NAME, ColorSchemeColorHighlighterSettings, Settings\n\n\nif st_helper.running_in_st():\n    import sublime  # pylint: disable=import-error\n    import sublime_plugin  # pylint: disable=import-error\nelse:\n    from . import sublime\n    from . import sublime_plugin\n\n\nclass ColorHighlighterSetSetting(sublime_plugin.ApplicationCommand):\n    \"\"\"\n    A ST3 command for setting plugin settings.\n\n    It supports:\n    - Regular settings that just get set.\n    - Boolean settings that get flipped.\n    - Enum settings that have a special \"none\" value that gets mapped to flipping a specified boolean setting.\n    - Computed boolean settings which get automatically recomputed every time it's dependencies are recomputed.\n    - Disabling some settings or setting prefixes for ST2.\n    \"\"\"\n\n    _BOOL_SETTINGS = [\n        \"autoreload.when_settings_change\",\n        \"autoreload.when_color_scheme_change\",\n        \"search_colors_in.selection.enabled\",\n        \"search_colors_in.selection.color_highlighters.color_scheme.enabled\",\n        \"search_colors_in.selection.color_highlighters.gutter_icons.enabled\",\n        \"search_colors_in.selection.color_highlighters.phantoms.enabled\",\n        \"search_colors_in.all_content.enabled\",\n        \"search_colors_in.all_content.color_highlighters.color_scheme.enabled\",\n        \"search_colors_in.all_content.color_highlighters.gutter_icons.enabled\",\n        \"search_colors_in.all_content.color_highlighters.phantoms.enabled\",\n        \"search_colors_in.hover.enabled\",\n        \"search_colors_in.hover.color_highlighters.color_scheme.enabled\",\n        \"search_colors_in.hover.color_highlighters.gutter_icons.enabled\",\n        \"search_colors_in.hover.color_highlighters.phantoms.enabled\",\n        \"default_keybindings\",\n        \"experimental.asynchronosly_update_color_scheme\",\n    ]\n\n    # A key is an enum setting and a value is the boolean setting that gets disabled when the value setting is set to\n    # none.\n    _ENUM_SETTINGS = {\n        \"search_colors_in.selection.color_highlighters.color_scheme.highlight_style\":\n            \"search_colors_in.selection.color_highlighters.color_scheme.enabled\",\n        \"search_colors_in.selection.color_highlighters.gutter_icons.icon_style\":\n            \"search_colors_in.selection.color_highlighters.gutter_icons.enabled\",\n        \"search_colors_in.selection.color_highlighters.phantoms.style\":\n            \"search_colors_in.selection.color_highlighters.phantoms.enabled\",\n        \"search_colors_in.all_content.color_highlighters.color_scheme.highlight_style\":\n            \"search_colors_in.all_content.color_highlighters.color_scheme.enabled\",\n        \"search_colors_in.all_content.color_highlighters.gutter_icons.icon_style\":\n            \"search_colors_in.all_content.color_highlighters.gutter_icons.enabled\",\n        \"search_colors_in.all_content.color_highlighters.phantoms.style\":\n            \"search_colors_in.all_content.color_highlighters.phantoms.enabled\",\n        \"search_colors_in.hover.color_highlighters.color_scheme.highlight_style\":\n            \"search_colors_in.hover.color_highlighters.color_scheme.enabled\",\n        \"search_colors_in.hover.color_highlighters.gutter_icons.icon_style\":\n            \"search_colors_in.hover.color_highlighters.gutter_icons.enabled\",\n        \"search_colors_in.hover.color_highlighters.phantoms.style\":\n            \"search_colors_in.hover.color_highlighters.phantoms.enabled\",\n    }\n\n    # A key is a boolean setting, a value is a list of boolean settings that need to be OR-ed to compute the key\n    # setting.\n    _COMPUTED_BOOLEAN_SETTINGS = {\n        \"search_colors_in.selection.enabled\": [\n            \"search_colors_in.selection.color_highlighters.color_scheme.enabled\",\n            \"search_colors_in.selection.color_highlighters.gutter_icons.enabled\",\n            \"search_colors_in.selection.color_highlighters.phantoms.enabled\",\n        ],\n        \"search_colors_in.all_content.enabled\": [\n            \"search_colors_in.all_content.color_highlighters.color_scheme.enabled\",\n            \"search_colors_in.all_content.color_highlighters.gutter_icons.enabled\",\n            \"search_colors_in.all_content.color_highlighters.phantoms.enabled\",\n        ],\n        \"search_colors_in.hover.enabled\": [\n            \"search_colors_in.hover.color_highlighters.color_scheme.enabled\",\n            \"search_colors_in.hover.color_highlighters.gutter_icons.enabled\",\n            \"search_colors_in.hover.color_highlighters.phantoms.enabled\",\n        ]\n    }\n\n    # A key is a setting prefix, a value is either a boolean, in which case the whole prefix is disabled for ST2 or\n    # a list of values for this setting unsupported in ST2.\n    _ST2_UNSUPPORTED_SETTINGS = {\n        \"search_colors_in.selection.color_highlighters.color_scheme.highlight_style\":\n            list(set(ColorSchemeColorHighlighterSettings.ST3_VALID_STYLES) -\n                 set(ColorSchemeColorHighlighterSettings.ST2_VALID_STYLES)),\n        \"search_colors_in.all_content.color_highlighters.color_scheme.highlight_style\":\n            list(set(ColorSchemeColorHighlighterSettings.ST3_VALID_STYLES) -\n                 set(ColorSchemeColorHighlighterSettings.ST2_VALID_STYLES)),\n        \"search_colors_in.selection.color_highlighters.gutter_icons\": True,\n        \"search_colors_in.selection.color_highlighters.phantoms\": True,\n        \"search_colors_in.all_content.color_highlighters.gutter_icons\": True,\n        \"search_colors_in.all_content.color_highlighters.phantoms\": True,\n        \"search_colors_in.hover\": True,\n        \"experimental.asynchronosly_update_color_scheme\": True,\n    }\n\n    def run(self, setting, **args):\n        \"\"\"\n        Run the command.\n\n        Arguments:\n        - setting - the setting name.\n        - args - other args as a dict.\n        \"\"\"\n        value = self._get_value(setting, **args)\n        if self._is_enum_setting(setting):\n            enable_setting = self._ENUM_SETTINGS[setting]\n            if value == \"none\":\n                _set_setting(enable_setting, False)\n                self._recompute_settings([enable_setting])\n            else:\n                _set_setting(enable_setting, True)\n                _set_setting(setting, value)\n                self._recompute_settings([setting, enable_setting])\n            return\n        _set_setting(setting, value)\n        self._recompute_settings([setting])\n\n    def is_checked(self, setting, **args):\n        \"\"\"\n        Return True if the setting is enabled or False otherwise.\n\n        Arguments:\n        - setting - the setting name.\n        - args - other args as a dict.\n        \"\"\"\n        if self._is_bool_setting(setting):\n            return _get_setting(setting)\n        if self._is_enum_setting(setting):\n            enable_setting = self._ENUM_SETTINGS[setting]\n            if not _get_setting(enable_setting):\n                return args[\"value\"] == \"none\"\n            return _get_setting(setting) == args[\"value\"]\n        return False\n\n    def is_visible(self, setting, **args):\n        \"\"\"\n        Return True if the setting is supported or False otherwise.\n\n        Arguments:\n        - setting - the setting name.\n        - args - other args as a dict.\n        \"\"\"\n        if st_helper.is_st3():\n            return True\n        support_data = self._get_st2_unsupported_prefix(setting)\n        if support_data is None:\n            return True\n        if isinstance(support_data, bool):\n            return False\n        return self._get_value(setting, **args) not in support_data\n\n    def _get_st2_unsupported_prefix(self, setting):\n        for setting_prefix in self._ST2_UNSUPPORTED_SETTINGS:\n            if setting.startswith(setting_prefix):\n                return self._ST2_UNSUPPORTED_SETTINGS[setting_prefix]\n        return None\n\n    def _recompute_settings(self, changed_settings):\n        if not changed_settings:\n            return\n        settings_to_recompute = []\n        for computed_setting in self._COMPUTED_BOOLEAN_SETTINGS:\n            for setting in self._COMPUTED_BOOLEAN_SETTINGS[computed_setting]:\n                if setting in changed_settings:\n                    settings_to_recompute.append(computed_setting)\n        for setting_to_recompute in settings_to_recompute:\n            ored_value = False\n            for setting in self._COMPUTED_BOOLEAN_SETTINGS[setting_to_recompute]:\n                ored_value = ored_value or _get_setting(setting)\n            _set_setting(setting_to_recompute, ored_value)\n        self._recompute_settings(settings_to_recompute)\n\n    def _get_value(self, setting, **args):\n        if self._is_bool_setting(setting):\n            return not _get_setting(setting)\n        return args[\"value\"]\n\n    def _is_bool_setting(self, setting):\n        return setting in self._BOOL_SETTINGS\n\n    def _is_enum_setting(self, setting):\n        return setting in self._ENUM_SETTINGS\n\n\ndef _get_setting(setting):\n    setting_path = setting.split(\".\")\n    settings = sublime.load_settings(COLOR_HIGHLIGHTER_SETTINGS_NAME)\n    setting_value = settings.get(setting_path[0])\n    if len(setting_path) == 1:\n        return setting_value\n    for name in setting_path[1:-1]:\n        setting_value = setting_value[name]\n    return setting_value[setting_path[-1]]\n\n\ndef _set_setting(setting, value):\n    settings = sublime.load_settings(COLOR_HIGHLIGHTER_SETTINGS_NAME)\n    if Settings(settings).debug:\n        print(\"ColorHighlighter: action=run_command name=color_highlighter_set_setting setting=%s value=%s\"\n              % (setting, value))\n    setting_path = setting.split(\".\")\n    if len(setting_path) == 1:\n        settings.set(setting_path[0], value)\n        return\n    top_level_setting = settings.get(setting_path[0])\n    setting_value = top_level_setting\n    for name in setting_path[1:-1]:\n        setting_value = setting_value[name]\n    setting_value[setting_path[-1]] = value\n    settings.set(setting_path[0], top_level_setting)\n    sublime.save_settings(COLOR_HIGHLIGHTER_SETTINGS_NAME)\n"
        },
        {
          "name": "settings.py",
          "type": "blob",
          "size": 8.6552734375,
          "content": "\"\"\"A module with data structures for plugin's settings.\"\"\"\n\nimport copy\n\ntry:\n    from . import st_helper\nexcept ValueError:\n    import st_helper\n\n\n# Color Highlighter settings file name.\nCOLOR_HIGHLIGHTER_SETTINGS_NAME = \"ColorHighlighter.sublime-settings\"\n\n\nclass Settings(object):  # pylint: disable=too-few-public-methods,too-many-instance-attributes\n    \"\"\"The data structure for holding plugin's settings.\"\"\"\n\n    def __init__(self, settings):\n        \"\"\"\n        Init plugin's settings.\n\n        Arguments:\n        - settings - the plugin's settings dict.\n        \"\"\"\n        self._settings = settings\n        file_extensions = settings.get(\"file_extensions\", [])\n        self.file_extensions = {}\n        for extension in file_extensions:\n            self.file_extensions[extension] = True\n        self.autoreload = _AutoreloadSettings(copy.deepcopy(settings.get(\"autoreload\", {})))\n        self.icon_factory = _IconFactorySettings(copy.deepcopy(settings.get(\"icon_factory\", {})))\n        self.search_colors_in = _SearchColorsSettings(copy.deepcopy(settings.get(\"search_colors_in\", {})))\n        self.regex_compiler = _RegexCompilerSettings(copy.deepcopy(settings.get(\"regex_compiler\", {})))\n        self.default_keybindings = settings.get(\"default_keybindings\", True)\n        self.experimental = _ExperimentalSettings(copy.deepcopy(settings.get(\"experimental\", {})))\n        self.debug = settings.get(\"debug\", False)\n\n\nclass _ExperimentalSettings(object):  # pylint: disable=too-few-public-methods\n    \"\"\"Experimental settings that are not ready to be shipped for everyone yet.\"\"\"\n\n    def __init__(self, settings):\n        \"\"\"\n        Init plugin's settings.\n\n        Arguments:\n        - settings - experimental settings dict.\n        \"\"\"\n        self.asynchronosly_update_color_scheme = settings.get(  # pylint: disable=invalid-name\n            \"asynchronosly_update_color_scheme\", False)\n        if not st_helper.is_st3():\n            print(\"Updating the color scheme asynchronously is not supported in ST2.\")\n            self.asynchronosly_update_color_scheme = False\n\n\nclass _AutoreloadSettings(object):  # pylint: disable=too-few-public-methods\n    \"\"\"The data structure for holding auto reload settings.\"\"\"\n\n    def __init__(self, settings):\n        \"\"\"\n        Init auto reload settings.\n\n        Arguments:\n        - settings - the auto reload settings dict.\n        \"\"\"\n        self.when_settings_change = settings.get(\"when_settings_change\", False)\n        self.when_color_scheme_change = settings.get(\"when_color_scheme_change\", False)\n\n\nclass _IconFactorySettings(object):  # pylint: disable=too-few-public-methods\n    \"\"\"The data structure for holding icon factory settings.\"\"\"\n\n    def __init__(self, settings):\n        \"\"\"\n        Init icon factory settings.\n\n        Arguments:\n        - settings - the icon factory dict.\n        \"\"\"\n        self.convert_command = settings.get(\"convert_command\", \"convert\")\n        self.convert_timeout = settings.get(\"convert_timeout\", 5)\n\n\nclass _SearchColorsSettings(object):  # pylint: disable=too-few-public-methods\n    \"\"\"The data structure for holding color searching settings.\"\"\"\n\n    def __init__(self, settings):\n        \"\"\"\n        Init color searching settings.\n\n        Arguments:\n        - settings - the color searching settings dict.\n        \"\"\"\n        self.color_searcher_names = {\"selection\": True, \"all_content\": True, \"hover\": True}\n        self.selection = _ColorSearcherSettings(settings.get(\"selection\", {}), \"selection\")\n        self.all_content = _ColorSearcherSettings(settings.get(\"all_content\", {}), \"all_content\")\n        self.hover = _ColorSearcherSettings(settings.get(\"hover\", {}), \"hover\")\n        if not st_helper.is_st3():\n            print(\"Highlighting colors while hovering over them is not supported on ST2.\")\n            self.hover.enabled = False\n\n\nclass _ColorSearcherSettings(object):  # pylint: disable=too-few-public-methods\n    \"\"\"The data structure for holding color searcher settings.\"\"\"\n\n    def __init__(self, settings, name):\n        \"\"\"\n        Init color searcher settings.\n\n        Arguments:\n        - settings - the color searcher settings dict.\n        - name - the name of the color searcher.\n        \"\"\"\n        self.name = name\n        self.enabled = settings.get(\"enabled\", False)\n        self.color_highlighters = _ColorHighlighterSettings(settings.get(\"color_highlighters\", {}))\n\n\nclass _ColorHighlighterSettings(object):  # pylint: disable=too-few-public-methods\n    \"\"\"The data structure for holding color highlihgting settings.\"\"\"\n\n    def __init__(self, settings):\n        \"\"\"\n        Init color highlihgting settings.\n\n        Arguments:\n        - settings - the color highlihgting settings dict.\n        \"\"\"\n        self.color_highlighter_names = {\"color_scheme\": True, \"gutter_icons\": True, \"phantoms\": True}\n        self.color_scheme = ColorSchemeColorHighlighterSettings(settings.get(\"color_scheme\", {}))\n        self.gutter_icons = GutterIconsColorHighlighterSettings(settings.get(\"gutter_icons\", {}))\n        self.phantoms = _PhantomsColorHighlighterSettings(settings.get(\"phantoms\", {}))\n\n\nclass ColorSchemeColorHighlighterSettings(object):  # pylint: disable=too-few-public-methods\n    \"\"\"The data structure for holding color scheme color highlihgter settings.\"\"\"\n\n    ST2_VALID_STYLES = [\"filled\", \"text\", \"outlined\"]\n    ST3_VALID_STYLES = [\"filled\", \"text\", \"outlined\", \"underlined_solid\", \"underlined_strippled\", \"underlined_squiggly\"]\n\n    def __init__(self, settings):\n        \"\"\"\n        Init color scheme color highlihgter settings.\n\n        Arguments:\n        - settings - the color scheme color highlihgter settings dict.\n        \"\"\"\n        if st_helper.is_st3():\n            valid_styles = self.ST3_VALID_STYLES\n        else:\n            valid_styles = self.ST2_VALID_STYLES\n        self.enabled = settings.get(\"enabled\", False)\n        self.highlight_style = settings.get(\"highlight_style\", \"filled\")\n        assert self.highlight_style in valid_styles, (\"Color scheme highlihgting style \\\"%s\\\" is invalid\"\n            % self.highlight_style)\n\n\nclass GutterIconsColorHighlighterSettings(object):  # pylint: disable=too-few-public-methods\n    \"\"\"The data structure for holding gutter icons color highlihgter settings.\"\"\"\n\n    VALID_STYLES = [\"circle\", \"square\"]\n\n    def __init__(self, settings):\n        \"\"\"\n        Init gutter icons color highlihgter settings.\n\n        Arguments:\n        - settings - the gutter icons color highlihgter settings dict.\n        \"\"\"\n        self.enabled = settings.get(\"enabled\", False)\n        self.icon_style = settings.get(\"icon_style\", \"circle\")\n        assert self.icon_style in self.VALID_STYLES, \"Gutter icons style \\\"%s\\\" is invalid\" % self.icon_style\n        if not st_helper.is_st3():\n            print(\"Highlighting colors with gutter icons is not supported on ST2.\")\n            self.enabled = False\n\n\nclass _PhantomsColorHighlighterSettings(object):  # pylint: disable=too-few-public-methods\n    \"\"\"The data structure for holding phantoms color highlihgter settings.\"\"\"\n\n    VALID_STYLES = [\"right\", \"left\", \"below\"]\n\n    def __init__(self, settings):\n        \"\"\"\n        Init phantoms color highlihgter settings.\n\n        Arguments:\n        - settings - the phantoms color highlihgter settings dict.\n        \"\"\"\n        self.enabled = settings.get(\"enabled\", False)\n        self.style = settings.get(\"style\", \"right\")\n        assert self.style in self.VALID_STYLES, \"Phantoms style \\\"%s\\\" is invalid\" % self.style\n        self.length = settings.get(\"length\", 2)\n        if not st_helper.is_st3():\n            print(\"Highlighting colors with phantoms is not supported on ST2.\")\n            self.enabled = False\n\n\nclass _RegexCompilerSettings(object):  # pylint: disable=too-few-public-methods\n    \"\"\"The data structure for holding regex compiler settings.\"\"\"\n\n    def __init__(self, settings):\n        \"\"\"\n        Init regex compiler settings.\n\n        Arguments:\n        - settings - the regex compiler settings dict.\n        \"\"\"\n        self.channels = settings.get(\"channels\", {})\n        self.formats = {}\n        formats_settings = settings.get(\"formats\", {})\n        for name in formats_settings:\n            self.formats[name] = _ColorFormatSettings(formats_settings.get(name, {}))\n\n\nclass _ColorFormatSettings(object):  # pylint: disable=too-few-public-methods\n    \"\"\"The data structure for holding color format settings.\"\"\"\n\n    def __init__(self, settings):\n        \"\"\"\n        Init color format settings.\n\n        Arguments:\n        - settings - the color format settings dict.\n        \"\"\"\n        self.description = settings[\"description\"]\n        self.regex = settings[\"regex\"]\n        self.white = settings[\"white\"]\n        after = settings.get(\"after\", [])\n        if not isinstance(after, list):\n            after = [after]\n        self.after = after\n"
        },
        {
          "name": "st_helper.py",
          "type": "blob",
          "size": 0.9609375,
          "content": "\"\"\"Helper functions for checking for Sublime Text.\"\"\"\n\ntry:\n    import sublime  # noqa: F401  # pylint: disable=unused-import\n    SUBLIME_IMPORTED = True  # For prod.\nexcept ImportError:\n    SUBLIME_IMPORTED = False  # For tests.\n\n\ndef running_in_st():\n    \"\"\"Whether the code runs in ST or not.\"\"\"\n    return SUBLIME_IMPORTED\n\n\ndef version():\n    \"\"\"Return a ST version. Return 0 if not running in ST.\"\"\"\n    if not running_in_st():\n        return 0\n\n    return int(sublime.version())\n\n\ndef is_st3():\n    \"\"\"\n    Whether the code runs in ST3 or not.\n\n    Plugin development is mainly for ST3, so tests execute ST3 code.\n    \"\"\"\n    if not running_in_st():\n        return True\n\n    return version() >= 3000\n\n\ndef st_version():\n    \"\"\"Return a string representation of a major ST version.\"\"\"\n    if running_in_st():\n        if is_st3():\n            major_version = \"st3\"\n        else:\n            major_version = \"st2\"\n    else:\n        major_version = \"none\"\n    return major_version\n"
        },
        {
          "name": "test_plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "topsort.py",
          "type": "blob",
          "size": 1.2919921875,
          "content": "\"\"\"An implementation of the topological sorting algorithm.\"\"\"\n\n\ndef sort(data, get_depencencies):\n    \"\"\"\n    Topologically sort data.\n\n    Arguments:\n    - data - a dict from object ids to their dependencies.\n    - get_depencencies - a function that gets a list of dependend object ids.\n    Returns a list of object ids sorted topologically.\n    \"\"\"\n    nodes = {}\n    for key in data.keys():\n        value = data[key]\n        nodes[key] = _Node(value, get_depencencies(value))\n\n    results = []\n    while _visit_node(nodes, results):\n        pass\n    return results\n\n\ndef _visit_node(data, results):\n    for key in data.keys():\n        if not data[key].visited:\n            _visit(data, key, results)\n            return True\n    return False\n\n\ndef _visit(data, key, results):\n    value = data[key]\n    if value.in_stack:\n        raise ValueError(\"Not a DAG!\")\n    if value.visited:\n        return\n\n    value.in_stack = True\n    for depencency in value.depencencies:\n        _visit(data, depencency, results)\n    value.visited = True\n    value.in_stack = False\n    results.append(key)\n\n\nclass _Node(object):  # pylint: disable=too-few-public-methods\n    def __init__(self, value, depencencies):\n        self.value = value\n        self.depencencies = depencencies\n        self.in_stack = False\n        self.visited = False\n"
        }
      ]
    }
  ]
}