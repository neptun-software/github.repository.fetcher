{
  "metadata": {
    "timestamp": 1736710978434,
    "page": 664,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "arimger/Unity-Editor-Toolbox",
      "stars": 1760,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 5.810546875,
          "content": "###############################\n# Core EditorConfig Options   #\n###############################\n# All files\n[*]\nindent_style = space\n# Code files\n[*.{cs,csx,vb,vbx}]\nindent_size = 4\ninsert_final_newline = false\ncharset = utf-8-bom\n###############################\n# .NET Coding Conventions     #\n###############################\n[*.{cs,vb}]\n# Organize usings\ndotnet_sort_system_directives_first = true\n# this. preferences\ndotnet_style_qualification_for_field = false:silent\ndotnet_style_qualification_for_property = false:silent\ndotnet_style_qualification_for_method = false:silent\ndotnet_style_qualification_for_event = false:silent\n# Language keywords vs BCL types preferences\ndotnet_style_predefined_type_for_locals_parameters_members = true:silent\ndotnet_style_predefined_type_for_member_access = true:silent\n# Parentheses preferences\ndotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent\ndotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent\ndotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent\ndotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent\n# Modifier preferences\ndotnet_style_require_accessibility_modifiers = for_non_interface_members:silent\ndotnet_style_readonly_field = true:suggestion\n# Expression-level preferences\ndotnet_style_object_initializer = true:suggestion\ndotnet_style_collection_initializer = true:suggestion\ndotnet_style_explicit_tuple_names = true:suggestion\ndotnet_style_null_propagation = true:suggestion\ndotnet_style_coalesce_expression = true:suggestion\ndotnet_style_prefer_is_null_check_over_reference_equality_method = true:silent\ndotnet_style_prefer_inferred_tuple_names = true:suggestion\ndotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion\ndotnet_style_prefer_auto_properties = true:silent\ndotnet_style_prefer_conditional_expression_over_assignment = true:silent\ndotnet_style_prefer_conditional_expression_over_return = true:silent\n###############################\n# Naming Conventions          #\n###############################\n# Style Definitions\ndotnet_naming_style.camel_case_style.capitalization               = camel_case\n# Use CamelCase for constant fields \ndotnet_naming_rule.constant_fields_should_be_camel_case.severity  = suggestion\ndotnet_naming_rule.constant_fields_should_be_camel_case.symbols   = constant_fields\ndotnet_naming_rule.constant_fields_should_be_camel_case.style     = camel_case_style\ndotnet_naming_symbols.constant_fields.applicable_kinds            = field\ndotnet_naming_symbols.constant_fields.applicable_accessibilities  = *\ndotnet_naming_symbols.constant_fields.required_modifiers          = const\n###############################\n# C# Coding Conventions       #\n###############################\n[*.cs]\n# var preferences\ncsharp_style_var_for_built_in_types = true:silent\ncsharp_style_var_when_type_is_apparent = true:silent\ncsharp_style_var_elsewhere = true:silent\n# Expression-bodied members\ncsharp_style_expression_bodied_methods = false:silent\ncsharp_style_expression_bodied_constructors = false:silent\ncsharp_style_expression_bodied_operators = false:silent\ncsharp_style_expression_bodied_properties = true:silent\ncsharp_style_expression_bodied_indexers = true:silent\ncsharp_style_expression_bodied_accessors = true:silent\n# Pattern matching preferences\ncsharp_style_pattern_matching_over_is_with_cast_check = true:suggestion\ncsharp_style_pattern_matching_over_as_with_null_check = true:suggestion\n# Null-checking preferences\ncsharp_style_throw_expression = true:suggestion\ncsharp_style_conditional_delegate_call = true:suggestion\n# Modifier preferences\ncsharp_preferred_modifier_order = private,protected,internal,public,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion\n# Expression-level preferences\ncsharp_prefer_braces = true:silent\ncsharp_style_deconstructed_variable_declaration = true:suggestion\ncsharp_prefer_simple_default_expression = true:suggestion\ncsharp_style_pattern_local_over_anonymous_function = true:silent\ncsharp_style_inlined_variable_declaration = true:silent\n###############################\n# C# Formatting Rules         #\n###############################\n# New line preferences\ncsharp_new_line_before_open_brace = all\ncsharp_new_line_before_else = true\ncsharp_new_line_before_catch = true\ncsharp_new_line_before_finally = true\ncsharp_new_line_before_members_in_object_initializers = true\ncsharp_new_line_before_members_in_anonymous_types = true\ncsharp_new_line_between_query_expression_clauses = true\n# Indentation preferences\ncsharp_indent_case_contents = true\ncsharp_indent_switch_labels = true\ncsharp_indent_labels = flush_left\n# Space preferences\ncsharp_space_after_cast = false\ncsharp_space_after_keywords_in_control_flow_statements = true\ncsharp_space_between_method_call_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_parameter_list_parentheses = false\ncsharp_space_between_parentheses = false\ncsharp_space_before_colon_in_inheritance_clause = true\ncsharp_space_after_colon_in_inheritance_clause = true\ncsharp_space_around_binary_operators = before_and_after\ncsharp_space_between_method_declaration_empty_parameter_list_parentheses = false\ncsharp_space_between_method_call_name_and_opening_parenthesis = false\ncsharp_space_between_method_call_empty_parameter_list_parentheses = false\n# Wrapping preferences\ncsharp_preserve_single_line_statements = true\ncsharp_preserve_single_line_blocks = true\n\ndotnet_diagnostic.IDE0090.severity = silent\n\n###############################\n# VB Coding Conventions       #\n###############################\n\n[*.vb]\n# Modifier preferences\nvisual_basic_preferred_modifier_order = Partial,Default,Private,Protected,Public,Friend,NotOverridable,Overridable,MustOverride,Overloads,Overrides,MustInherit,NotInheritable,Static,Shared,Shadows,ReadOnly,WriteOnly,Dim,Const,WithEvents,Widening,Narrowing,Custom,Async:suggestion\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.8466796875,
          "content": "# Created by https://www.gitignore.io/api/unity\n# Edit at https://www.gitignore.io/?templates=unity\n\n### Unity ###\n[Ll]ibrary/\n[Tt]emp/\n[Oo]bj/\n[Bb]uild/\n[Bb]uilds/\n[Ll]ogs/\n[Uu]serSettings/\n\n# Never ignore Asset meta data\n![Aa]ssets/**/*.meta\n\n# Uncomment this line if you wish to ignore the asset store tools plugin\n# [Aa]ssets/AssetStoreTools*\n\n# Visual Studio cache directory\n.vs/\n\n# Gradle cache directory\n.gradle/\n\n# Autogenerated VS/MD/Consulo solution and project files\nExportedObj/\n.consulo/\n*.csproj\n*.unityproj\n*.sln\n*.suo\n*.tmp\n*.user\n*.userprefs\n*.pidb\n*.booproj\n*.svd\n*.pdb\n*.mdb\n*.opendb\n*.VC.db\n\n# Unity3D generated meta files\n*.pidb.meta\n*.pdb.meta\n*.mdb.meta\n\n# Unity3D generated file on crash reports\nsysinfo.txt\n\n# Builds\n*.apk\n*.unitypackage\n\n# Crashlytics generated file\ncrashlytics-build.properties\n\n\n# End of https://www.gitignore.io/api/unity"
        },
        {
          "name": ".vsconfig",
          "type": "blob",
          "size": 0.095703125,
          "content": "{\n  \"version\": \"1.0\",\n  \"components\": [ \n    \"Microsoft.VisualStudio.Workload.ManagedGame\"\n  ]\n} \n"
        },
        {
          "name": "Assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "Docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0576171875,
          "content": "MIT License\n\nCopyright (c) 2019 Mi≈Çosz Matkowski(arimger)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "ProjectSettings",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 30.927734375,
          "content": "# Unity Editor Toolbox\n\n## Introduction\n\nImprove usability and clarity of key features in Unity Editor for better workflow!\n\nThis Toolbox not only extends functionalities, it does so with the user in mind.\nWritten to be as flexible and optimized as possible. Now you and other programming professionals will be able to create a readable and useful component editor simply by using attributes. You‚Äôll get fast and clear access to data from GameObjects placed in the Scene. Lastly, you‚Äôll gain more control over the Project window. Go ahead, customize those folder icons.\n\nIt's worth to mention that prepared drawers are based on the custom, layout-based system. Additionally, I‚Äôm leaving you some useful scripts, classes, and functions that facilitate Editor extensions development.\n\nLearn all the details about the main features below.\n\n## System Requirements\nUnity 2018.x or newer\n\n## Dependencies\n\n[EditorCoroutines](https://docs.unity3d.com/Packages/com.unity.editorcoroutines@0.0/api/Unity.EditorCoroutines.Editor.html)\n\n## Installation\n\n- Install Editor Toolbox package:\n\t- 1 way: Find Unity Package Manager (Window/Package Manager) and add package using this git URL:\n\t```\n\thttps://github.com/arimger/Unity-Editor-Toolbox.git#upm\n\t```\n\t- 2 way: Copy and paste `Assets/Editor Toolbox` directory into your project (Assets/...) + add dependencies\n\t- 3 way: Install via [OpenUPM registry](https://openupm.com):\n\t```\n\topenupm add com.browar.editor-toolbox\n\t```\n- Open Edit/Project Settings/Editor Toolbox window\n- If settings file is not found, press the \"Refresh\" button or create a new one\n- Manage settings in your way\n\t- Enable/disable Hierarchy overlay, choose allowed information\n\t- Enable/disable Project icons or/and assign own directories\n\t- Enable/disable Toolbox drawers or/and assign custom drawers\n\t- Enable/disable Toolbox Scene View and assign hotkeys\n\t\n---\n> [!IMPORTANT]  \n> This package is fully IMGUI-based, which means it may conflict with pure UI Toolkit features in your project. Additionally, Toolbox overwrites the 'base' custom Editor for all `UnityEngine.Objects`, it's a common solution but means that you can't combine other Inspector extensions/plugins.\n\n## Table Of Contents\n\n- [Attributes & Drawers](#drawers)\n\t- [Regular Drawers](#regulardrawers)\n\t- [Toolbox Drawers](#toolboxdrawers)\n\t\t- [Toolbox Decorator Attributes](#toolboxdecorator)\n\t\t- [Toolbox Condition Attributes](#toolboxcondition)\n\t\t- [Toolbox Property (Self/List) Attributes](#toolboxproperty)\n\t\t- [Toolbox Special Attributes](#toolboxspecial)\n\t\t- [Toolbox Archetype Attributes](#toolboxarchetype)\n\t\t- [SerializeReference (ReferencePicker)](#toolboxreference)\n\t\t- [Toolbox Custom Editors](#toolboxeditors)\n\t- [Material Drawers](#materialdrawers)\n- [Serialized Types](#serialized-types)\n- [Editor Extensions](#editor-extensions)\n\t- [Hierarchy](#hierarchy)\n\t- [Project](#project)\n\t- [Toolbar](#toolbar)\n\t- [SceneView](#sceneview)\n\t- [Utilities](#utilities)\n\n## Settings\n\nThe most important file, allows the user to manage all available features. Can be accessed from the Project Settings window (Edit/Project Settings.../Editor Toolbox) or directly inside the Project window. Make sure to have one valid settings file per project.\n\nAvailable features are divided into four groups:\n- Hierarchy\n- Project\n- Inspector\n- SceneView\n\nEach module is described in its respective section.\n\nIf you want to keep your custom settings between UET versions, create your own settings file:\n```\nCreate/Editor Toolbox/Settings\n```\n\n---\n> [!IMPORTANT]  \n> If you are getting warnings related to the current settings state, it most likely means that some features are not present in your Unity version. I suggest creating your own settings file and adjusting potential issues. Generally, it's always better to use a custom settings file rather than the default one. I'm planning to replace the ScriptableObject-based solution in the future, so it won't be a problem anymore.\n\n## Attributes & Drawers <a name=\"drawers\"></a>\n\n### Regular Drawers <a name=\"regulardrawers\"></a>\n\nDrawers based on built-in classes **PropertyDrawer/DecoratorDrawer** and associated **PropertyAttribute**.\nRegular drawers have priority over Toolbox drawers and they cannot be mixed.\n\n#### TagSelectorAttribute\n\nSupported types: **string**.\n\n```csharp\n[TagSelector]\npublic string var1;\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/tagselector.png)\n\n#### ProgressBarAttribute\n\nSupported types: **int**, **float**, **double**.\n\n```csharp\n[ProgressBar(\"Name\", minValue: 0.0f, maxValue: 100.0f, HexColor = \"#EB7D34\", IsInteractable = true)]\npublic float var1 = 80.0f;\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/progressbar1.png)\\\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/progressbar2.png)\n\n#### MinMaxSliderAttribute\n\nSupported types: **Vector2, Vector2Int**.\n\n```csharp\n[MinMaxSlider(0.5f, 71.7f)]\npublic Vector2 var1;\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/minmaxslider.png)\n\n#### AssetPreviewAttribute\n\nSupported types: UnityEngine.**Object**.\n\n```csharp\n[AssetPreview]\npublic GameObject var1;\n```\n\n```csharp\n[AssetPreview(useLabel: false)]\npublic Component var2;\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/assetpreview.png)\n\n#### SuffixAttribute\n\nSupported types: **all**.\n\n```csharp\n[Suffix(\"cm\")]\npublic string var1;\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/suffix.png)\n\n\n#### EnumTogglesAttribute\n\nSupported types: **Enums**.\n\n```csharp\n[System.Flags]\npublic enum FlagExample\n{\n\tNothing = 0,\n\tFlag1 = 1,\n\tFlag2 = 2,\n\tFlag3 = 4,\n\tFlag4 = 8,\n\tFlag5 = 16,\n\tFlag6 = 32,\n\tFlag7 = 64,\n\tFlag8 = 128,\n\tFlag9 = 256,\n\tEverything = ~0\n}\n\n[EnumToggles]\npublic FlagExample enumFlag = FlagExample.Flag1 | FlagExample.Flag2 | FlagExample.Flag6;\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/enumtoggles.png)\n\n#### NotNullAttribute\n\nSupported types: UnityEngine.**Object**.\n\n```csharp\n[NotNull]\npublic GameObject var1;\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/notnull1.png)\\\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/notnull2.png)\n\n\n#### DirectoryAttribute\n\nSupported types: **string**.\n\n```csharp\n[Directory]\npublic string var1;\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/directory1.png)\\\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/directory2.png)\n\n#### SceneNameAttribute\n\nSupported types: **string**.\n\n```csharp\n[SceneName]\npublic string sceneName;\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/scenename1.png)\\\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/scenename2.png)\n\n#### PresetAttribute\n\nSupported types: **all**.\n\nRemark: can be used only within classes, structs are not supported.\n```csharp\nprivate readonly int[] presetValues = new[] { 1, 2, 3, 4, 5 };\n\n[Preset(nameof(presetValues))]\npublic int presetTarget;\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/preset.png)\n\n```csharp\nprivate readonly int[] presetValues = new[] { 1, 2, 3, 4, 5 };\nprivate readonly string[] optionLabels = new[] { \"a\", \"b\", \"c\", \"d\", \"e\" };\n\n[Preset(nameof(presetValues), nameof(optionLabels))]\npublic int presetTarget;\n```\n\n#### SearchableEnumAttribute\n\nSupported types: **Enums**.\n\n```csharp\n[SearchableEnum]\npublic KeyCode enumSearch;\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/enumsearch.png)\n\n#### ClampAttribute\n\nSupported types: **int, float, double**.\n\n```csharp\n[Clamp(minValue = 1.5f, maxValue = 11.3f)]\npublic double var1;\n```\n\n#### PasswordAttribute\n\nSupported types: **string**.\n\n```csharp\n[Password]\npublic string password;\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/password.png)\n\n#### LeftToggleAttribute\n\nSupported types: **bool**.\n\n```csharp\n[LeftToggle]\npublic bool var1;\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/lefttoggle.png)\n\n#### FormattedNumberAttribute\n\nSupported types: **int, float, double**.\n\n```csharp\n[FormattedNumber]\npublic int bigNumber;\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/formattednumber.png)\n\n#### LayerAttribute\n\nSupported types: **int**.\n\n```csharp\n[Layer]\npublic int layer;\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/layer.png)\n\n#### AnimationCurveSettingsAttribute\n\nSupported types: **AnimationCurve**.\n\n```csharp\n[AnimationCurveSettings(-2, -2, 2, 2, HexColor = \"#FFD666\")]\npublic AnimationCurve animationCurve\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/animationcurvesettings.png)\n\n#### ChildObjectOnlyAttribute\n\nSupported types: **GameObject, Component**.\n\n```csharp\n[ChildObjectOnlyAttribute]\npublic GameObject var1\n```\n\n#### SceneObjectOnlyAttribute\n\nSupported types: **GameObject, Component**.\n\n```csharp\n[SceneObjectOnlyAttribute]\npublic GameObject var1\n```\n\n#### PrefabObjectOnlyAttribute\n\nSupported types: **GameObject, Component**.\n\n```csharp\n[PrefabObjectOnlyAttribute]\npublic GameObject var1\n```\n\n#### NotPrefabObjectOnlyAttribute\n\nSupported types: **GameObject, Component**.\n\n```csharp\n[NotPrefabObjectOnlyAttribute]\npublic GameObject var1\n```\n\n---\n\n### Toolbox Drawers <a name=\"toolboxdrawers\"></a>\n\nDrawers are based on classes inherited from the **ToolboxDrawer** class and associated **ToolboxAttribute**. With this powerful custom system you are able to create really flexible drawers. You can use them without limitations (they work with sub-classes and as array children). Every ToolboxDrawer is layout-based. For proper work they need at least one settings file located in your project. You can find predefined one here - `Editor Toolbox/EditorSettings.asset`.\n\nExamples **'How to'** create custom ToolboxDrawers you can find [HERE](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Assets/Editor%20Toolbox/HOWTO.md).\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/inspector.png)\n\n#### Toolbox Decorator Attributes <a name=\"toolboxdecorator\"></a>\n\nDisplay/create something before and after property in the desired order (using Order property).   \nIn fact **ToolboxDecoratorDrawers** are like extended version of built-in **DecoratorDrawers**. \nUnfortunately, standard decorators won't always work with ToolboxDrawers so try to use this replacement instead.\n\nEach **ToolboxDecoratorAttribute** has two basic properties **Order** (indicates the drawing order) and **ApplyCondition** (determines if decorator will be disabled/hidden along with associated property).\n\n```csharp\n[BeginGroup(\"Group1\", Style = GroupStyle.Round)]\npublic int var1;\n[EndGroup]\npublic int var2;\n```\n```csharp\n//NOTE: you can use [SpaceArea] to adjust positions between layout elements\n[BeginHorizontal(LabelWidth = 50.0f)]\npublic int var1;\n[EndHorizontal]\npublic int var2;\n```\n```csharp\n[BeginHorizontalGroup(Label = \"Horizontal Group\", ControlFieldWidth = true, ElementsInLayout = 2)]\npublic GameObject gameObject;\n[SpaceArea]\n[EndHorizontalGroup]\n[ReorderableList]\npublic int[] ints;\n```\n```csharp\n[BeginIndent]\npublic int var1;\n[EndIndent]\npublic int var2;\n```\n```csharp\n[IndentArea(4)]\npublic int var1;\n```\n```csharp\n[SpaceArea(spaceBefore = 10.0f, spaceAfter = 5.0f, Order = 1)]\npublic int var1;\n```\n```csharp\n[Label(\"My Custom Header\", skinStyle: SkinStyle.Box, Alignment = TextAnchor.MiddleCenter)]\npublic int var1;\n```\n```csharp\n[Highlight(0, 1, 0)]\npublic int var1;\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/decorators.png)\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/horizontal.png)\n\n```csharp\n[EditorButton(nameof(MyMethod), \"<b>My</b> Custom Label\", activityType: ButtonActivityType.OnPlayMode, ValidateMethodName = nameof(ValidationMethod))]\npublic int var1;\n\nprivate void MyMethod()\n{\n\tDebug.Log(\"MyMethod is invoked\");\n}\n\nprivate bool ValidationMethod()\n{\n\treturn var1 == 0;\n}\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/button.png)\n\n```csharp\n[Help(\"Help information\", UnityMessageType.Warning, Order = -1)]\npublic int var1;\n```\n```csharp\n[DynamicHelp(nameof(Message), UnityMessageType.Error)]\npublic int var2;\n\npublic string Message => \"Dynamic Message\";\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/helpbox.png)\n\n```csharp\n[ImageArea(\"https://img.itch.zone/aW1nLzE5Mjc3NzUucG5n/original/Viawjm.png\", 150.0f)]\npublic int var1;\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/imagearea.png)\n\n```csharp\n[LabelWidth(220.0f)]\npublic int veryVeryVeryVeryVeryLongName;\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/labelwidth.png)\n\n\n#### Toolbox Condition Attributes <a name=\"toolboxcondition\"></a>\n\nEnable/disable or show/hide properties using custom conditions. You can use them together with any other type of drawer.\nEvery ToolboxConditionDrawer supports boolean, int, string, UnityEngine.Object and enum types and works even with array/list properties.\nYou are able to pass values from fields, properties, and methods.\n\n```csharp\npublic string StringValue => \"Sho\";\n[ShowIf(nameof(StringValue), \"show\")]\npublic int var1;\n```\n```csharp\npublic GameObject objectValue;\n[HideIf(nameof(objectValue), false)]\npublic int var2;\n```\n\n```csharp\npublic KeyCode enumValue = KeyCode.A;\n[EnableIf(nameof(enumValue), KeyCode.A)]\npublic int var1;\n```\n```csharp\n[DisableIf(nameof(GetFloatValue), 2.0f, Comparison = UnityComparisonMethod.GreaterEqual)]\npublic int var2;\n\npublic float GetFloatValue()\n{\n\treturn 1.6f;\n}\n```\n```csharp\n[DisableInPlayMode]\npublic int var1;\n```\n```csharp\n[DisableInEditMode]\npublic int var1;\n```\n```csharp\npublic int var1;\n[ShowDisabledIf(nameof(var1), 3, Comparison = UnityComparisonMethod.LessEqual)]\npublic int var2;\n```\n```csharp\npublic int var1;\n[HideDisabledIf(nameof(var1), 3, Comparison = UnityComparisonMethod.GreaterEqual)]\npublic int var2;\n```\n```csharp\npublic bool boolValue = true;\n[ShowWarningIf(nameof(boolValue), false, \"Message\", DisableField = true)]\npublic int var1;\n```\n\n```csharp\n[Disable, ReorderableList]\npublic int[] vars1 = new [] { 1, 2, 3, 4 };\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/disabled.png)\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/enableif1.png)\\\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/enableif2.png)\n\n#### Toolbox Property Attributes <a name=\"toolboxproperty\"></a>\n\n##### InLineEditorAttribute\n\nThis attribute gives a great possibility to extend all reference-related (UnityEngine.Object) fields. \nUsing it you are able to 'inline' Editors for: components, ScriptableObjects, Materials, Renderers, MeshFilters, Textures, AudioClips, etc.\n\n```csharp\n[InLineEditor(DisableEditor = false)]\npublic Transform var1;\n```\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/inlined3.png)\n```csharp\n[InLineEditor]\npublic AudioClip var1;\n```\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/inlined2.png)\n```csharp\n[InLineEditor(true, true)]\npublic Material var1;\n```\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/inlined1.png)\n\n```csharp\n[InLineEditor(HideScript = false)]\npublic MyCustomType var1;\n```\n\n##### Reorderable List\n\nCustom implementation of standard ReorderableList (UnityEditorInternal). Usable as an attribute in serialized fields or a single object in custom Editors.\n\n```csharp\nvar list = new ReorderableList(SerializedProperty property, string elementLabel, bool draggable, bool hasHeader, bool fixedSize);\n```\n```csharp\n[ReorderableList, InLineEditor]\npublic Canvas[] vars1;\n```\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/list4.png)\n```csharp\n[ReorderableList(ListStyle.Lined, \"Item\", Foldable = false)]\npublic List<int> linedStyleList;\n```\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/list1.png)\n```csharp\n[ReorderableList(ListStyle.Round)]\npublic List<string> standardStyleList;\n```\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/list2.png)\n```csharp\n[ReorderableList(ListStyle.Boxed, fixedSize: true)]\npublic GameObject[] boxedStyleList = new GameObject[4];\n```\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/list3.png)\n\n\n```csharp\n[ReorderableListExposed(OverrideNewElementMethodName = nameof(GetValue))]\npublic int[] list;\n\nprivate int GetValue()\n{\n\treturn list.Length + Random.Range(0, 4);\n}\n```\n\n##### ScrollableItemsAttribute\n\nIt's a perfect solution to inspect large arrays/lists and optimize displaying them within the Inspector window.\n\n```csharp\n[ScrollableItems(defaultMinIndex: 0, defaultMaxIndex: 5)]\npublic GameObject[] largeArray = new GameObject[19];\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/scrollableitems.png)\n\n##### IgnoreParentAttribute\n\n**IgnoreParent** allows you to hide the parent's label, foldout arrow and remove the standard indentation for nested fields.\n\n```csharp\n[IgnoreParent]\npublic Quaternion q;\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/ignoreparent.png)\n\n##### DynamicRangeAttribute\n\n```csharp\n[DynamicRange(nameof(minValue), nameof(MaxValue))]\npublic float var1;\n\npublic float minValue;\npublic float MaxValue => 15.0f;\n```\n\n##### DynamicMinMaxSliderAttribute\n\n```csharp\n[DynamicMinMaxSlider(nameof(minValue), nameof(MaxValue))]\npublic Vector2 vec2;\n\npublic float minValue;\npublic float MaxValue => 15.0f;\n```\n\n#### Toolbox Special Attributes <a name=\"toolboxspecial\"></a>\n\nAttributes handled internally by the ToolboxEditor. You can combine them with any other attributes.\n\n##### NewLabelAttribute\n\n```csharp\n[NewLabel(\"Custom Label\")]\npublic float var1 = 25.4f;\n```\n\n##### HideLabelAttribute\n\n```csharp\n[HideLabel]\npublic float var1;\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/hidelabel.png)\n\n##### LabelByChildAttribute\n\n```csharp\n[System.Serializable]\npublic class SampleClass1\n{\n\tpublic Material var1;\n\tpublic KeyCode var2;\n\tpublic SampleClass2 var3;\n}\n\n[System.Serializable]\npublic class SampleClass2\n{\n\tpublic int var1;\n\tpublic string var2;\n}\n\n[LabelByChild(\"var2\")]\npublic SampleClass1[] vars1;\n[LabelByChild(\"var3.var2\")]\npublic SampleClass1 var1;\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/labelbychild1.png)\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/labelbychild2.png)\n\n#### Toolbox Archetype Attributes <a name=\"toolboxarchetype\"></a>\n\nUsing this attribute you are able to implement custom patterns of frequently grouped **ToolboxAttributes**.\n\n\n```csharp\n[AttributeUsage(AttributeTargets.Field, AllowMultiple = true)]\npublic class TitleAttribute : ToolboxArchetypeAttribute\n{\n\tpublic TitleAttribute(string label)\n\t{\n\t\tLabel = label;\n\t}\n\n\n\tpublic override ToolboxAttribute[] Process()\n\t{\n\t\treturn new ToolboxAttribute[]\n\t\t{\n\t\t\tnew LabelAttribute(Label),\n\t\t\tnew LineAttribute(padding: 0)\n\t\t\t{\n\t\t\t\tApplyIndent = true\n\t\t\t}\n\t\t};\n\t}\n\n\n\tpublic string Label { get; private set; }\n}\n```\n\n```csharp\n[Title(\"Header\")]\npublic int var1;\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/title.png)\n\n#### SerializeReference (ReferencePicker) <a name=\"toolboxreference\"></a>\n\nYou can draw properties marked with the **[SerializeReference]** attribute with an additional type picker that allows you to manipulate what managed type will be serialized.\nDepending on the picked type we have different object creation strategies:\n- `Activator.CreateInstance(targetType)` (default constructor will be called and all readonly members will be initialized)\n\t- Target type has default constructor\n\t- Target type is a value type\n- `FormatterServices.GetUninitializedObject(targetType)` (object will be uninitialized)\n\t- Target type has one or more constructors with arguments\n\t- `ForceUninitializedInstance` property is set to true\n\t\nTo prevent issues after renaming types use `UnityEngine.Scripting.APIUpdating.MovedFromAttribute`.\n\n```csharp\n[SerializeReference, ReferencePicker(TypeGrouping = TypeGrouping.ByFlatName)]\npublic ISampleInterface var1;\n[SerializeReference, ReferencePicker(ForceUninitializedInstance = true)]\npublic ISampleInterface var1;\n[SerializeReference, ReferencePicker(ParentType = typeof(ClassWithInterface2)]\npublic ClassWithInterfaceBase var2;\n\npublic interface ISampleInterface { }\n\n[Serializable]\npublic struct Struct : ISampleInterface\n{\n\tpublic bool var1;\n\tpublic bool var2;\n}\n\npublic abstract class ClassWithInterfaceBase : ISampleInterface { }\n\n[Serializable]\npublic class ClassWithInterface1 : ClassWithInterfaceBase\n{\n\tpublic GameObject go;\n}\n\n[Serializable]\npublic class ClassWithInterface2 : ClassWithInterfaceBase\n{\n\t[LeftToggle]\n\tpublic bool var1;\n}\n\n[Serializable]\npublic class ClassWithInterface3 : ClassWithInterfaceBase\n{\n\tpublic int var1;\n}\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/referencepicker.png)\n\n##### SerializeReference generics support\n\nUnity 2023.x introduced support for serializing generic references.\nIn this case you can serialize generic types or use generics as a base class for your references.\n**ReferencePicker** will automatically create all available generic types if the generic definition satisfies the constraints.\n\n```csharp\n#if UNITY_2023_2_OR_NEWER\n[SerializeReference, ReferencePicker(TypeGrouping = TypeGrouping.None)]\npublic IGenericInterface<string> genericString;\n[SerializeReference, ReferencePicker(TypeGrouping = TypeGrouping.None)]\npublic IGenericInterface<int> genericInt;\n[SerializeReference, ReferencePicker(TypeGrouping = TypeGrouping.None)]\npublic IGenericInterface<bool> genericBool;\n\npublic interface IGenericInterface<TValue>\n{\n\tTValue Value { get; }\n}\n\npublic class GenericInterfaceImplementation<TValue> : IGenericInterface<TValue>\n{\n\t[SerializeField]\n\tprivate TValue value;\n\n\tpublic TValue Value => value;\n}\n#endif\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/serializereferencegenerics.png)\n\n##### SerializeReference context menu operations\n\nYou can use few custom context menu operations for the **[SerializeReference]** fields:\n- **Copy Serialize Reference**: creates a deep copy of the linked reference\n- **Paste Serialize Reference**: allows to paste preserved copy to a field\n- **Duplicate Serialize Reference**: allows to duplicate the linked reference (works only on collection elements)\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/serializereferenceoperations.png)\n\n#### Custom Editors <a name=\"toolboxeditors\"></a>\n\nIf you want to create a custom **UnityEditor.Editor** for your components and still use Toolbox-related features be sure to inherit from the **Toolbox.Editor.ToolboxEditor** class.\nMore details (e.g. how to customize properties drawing) you can find in the [HOWTO](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Assets/Editor%20Toolbox/HOWTO.md) document.\n\n```csharp\nusing UnityEditor;\nusing UnityEngine;\n#if UNITY_2019_1_OR_NEWER\nusing UnityEditor.UIElements;\nusing UnityEngine.UIElements;\n#endif\nusing Toolbox.Editor;\n\n[CustomEditor(typeof(SampleBehaviour))]\npublic class SampleEditor : ToolboxEditor\n{\n\tprivate void OnEnable()\n\t{ }\n\n\tprivate void OnDisable()\n\t{ }\n\n\tpublic override void DrawCustomInspector()\n\t{\n\t\tbase.DrawCustomInspector();\n\t\t\n\t\t//for custom properties:\n\t\t// - ToolboxEditorGui.DrawToolboxProperty(serializedObject.FindProperty(\"myProperty\"));\n\t}\n}\n```\n\n##### Custom Editor Implementations\n- **Toolbox.Editor.ToolboxEditor**: default class, override it if you want to implement a custom Editor for your components and ScriptableObjects\n- **Toolbox.Editor.ToolboxScriptedImporterEditor**: override it if you want to implement a custom Editor for your custom importers\n\n### Material Drawers <a name=\"materialdrawers\"></a>\n\n```\n[CompactTexture]\n_MainTex (\"Texture\", 2D) = \"white\" {}\n[Vector2]\n_Vector1 (\"Vector2\", Vector) = (0.0, 0.0, 0.0)\n[Vector3]\n_Vector2 (\"Vector3\", Vector) = (0.0, 0.0, 0.0)\n[MinMaxSlider(20.0, 165.0)]\n_Vector3 (\"MinMax Vector\", Vector) = (50.0, 55.0, 0.0)\n[Indent(3)]\n_Float1 (\"Float1\", Float) = 0.0\n[Help(Custom Help Box , 1)]\n_Float2 (\"Float2\", Float) = 0.0\n_Float3 (\"Float3\", Float) = 0.0\n[Title(Custom Title, 4)]\n_Float (\"Float\", Float) = 0.5\n[Toggle][Space]\n_ToggleProperty (\"Toggle\", Int) = 0\n[ShowIfToggle(_ToggleProperty)]\n_ShowIfExample (\"Texture\", 2D) = \"White\" {}\n[HideIfToggle(_ToggleProperty)]\n_HideIfExample (\"Range\", Range(0, 1)) = 0.75\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/customshader.png)\n\n## Serialized Types\n\n#### SerializedType\n\nAllows to serialize Types and pick them through a dedicated picker.\n\n```csharp\n[TypeConstraint(typeof(Collider), AllowAbstract = false, AllowObsolete = false, TypeSettings = TypeSettings.Class, TypeGrouping = TypeGrouping.None)]\npublic SerializedType serializedType;\n\npublic void Usage()\n{\n\tSystem.Type type = serializedType.Type;\n}\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/serializedtype.png)\n\n#### SerializedScene\n\nAllows to serialize SceneAssets and use them in Runtime.\n\n```csharp\npublic SerializedScene serializedScene;\n\npublic void Usage()\n{\n\tUnityEngine.SceneManagement.SceneManager.LoadScene(serializedScene.BuildIndex);\n}\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/serializedscene.png)\n\n```csharp\n[SceneDetails]\npublic SerializedScene serializedScene;\n```\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/scenedetails.png)\n\nKeep in mind that SerializedScene stores Scene's index, name and path. These properties are updated each time scenes collection in the Build Settings is updated or any SceneAsset is created/removed/reimported. \nUnfortunately, you need to handle associated objects reserialization by yourself, otherwise e.g. updated indexes won't be saved. I prepared for you a static event `SceneSerializationUtility.OnCacheRefreshed` that can be used to validate SerializedScenes in your project. \nYou can link SerializedScene in a ScriptableObject and trigger reserialization (`EditorUtility.SetDirty()`) if needed, it's really convinient approach.\n\n#### SerializedDictionary<TK, TV>\n\nAllows to serialize and use Dictionaries. The presented class implements the IDictionary interface, so it can be easily used like the standard version.\n\nRequires at least Unity 2020.1.x because of generic serialization and has to be assigned in the Settings file.\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/dictionary3.png)\n\n```csharp\n#if UNITY_2020_1_OR_NEWER\npublic SerializedDictionary<int, GameObject> serializedDictionary;\n\npublic void Usage()\n{\n\tserializedDictionary.Add(3, new GameObject(\"TestObject\"));\n\tserializedDictionary.ContainsKey(2);\n\t//etc. like standard System.Collections.Generic.Dictionary<>\n\tSystem.Collections.Generic.Dictionary<int, GameObject> dictionary = serializedDictionary;\n}\n#endif\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/dictionary1.png)\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/dictionary2.png)\n\n#### SerializedDateTime\n\nAllows to serialize DateTime.\n\n```csharp\npublic SerializedDateTime serializedDateTime;\n\npublic void Usage()\n{\n\tSystem.DateTime dateTime = serializedDateTime;\n}\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/serializeddate.png)\n\n#### SerializedDirectory\n\nAllows to serialize folders in form of assets and retrieve direct paths in Runtime.\n\n```csharp\npublic SerializedDirectory serializeDirectory;\n\npublic void Usage()\n{\n\tstring path = serializeDirectory.DirectoryPath;\n}\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/serializeddirectory.png)\n\n## Editor Extensions\n\n### Hierarchy <a name=\"hierarchy\"></a>\n\nEnable and customize the presented hierarchy overlay in the **ToolboxEditorSettings**. Basically it provides more data about particular GameObjects directly within the Hierarchy window. Additionally, you can create special 'Header' objects using the '#h' prefix or Create menu: **GameObject/Editor Toolbox/Hierarchy Header** (by default created object will have **EditorOnly** tag).\n\nEach row can contain:\n- Scripts information\n- Layer\n- Tag\n- Toggle to enable/disable GameObject\n- Icon\n- Tree Lines\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/hierarchy.png)\n\n### Project <a name=\"project\"></a>\n\nSet custom folder icons in the **ToolboxEditorSettings**.\n\nProperties that can be edited include:\n- XY position and scale of the large icon\n- XY position and scale of the small icon\n- Path to directory or name (depends on picked item type)\n- Optional tooltip\n- Large icon\n- Small icon\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/project1.png)\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/project2.png)\n\n### Toolbar <a name=\"toolbar\"></a>\n\n> Editor Toolbox/Editor/ToolboxEditorToolbar.cs\n\nCheck **Examples** for more details.\n\n> Examples/Editor/SampleToolbar.cs\n\n```csharp\nusing Toolbox.Editor;\n\n[UnityEditor.InitializeOnLoad]\npublic static class MyEditorUtility\n{\n\tstatic MyEditorUtility()\n\t{\n\t\tToolboxEditorToolbar.OnToolbarGui += OnToolbarGui;\n\t}\n\t\n\tprivate static void OnToolbarGui()\n\t{\n\t\tGUILayout.FlexibleSpace();\n\t\tif (GUILayout.Button(\"1\", Style.commandLeftStyle))\n\t\t{\n\t\t\tDebug.Log(\"1\");\n\t\t}\n\t\tif (GUILayout.Button(\"2\", Style.commandMidStyle))\n\t\t{\n\t\t\tDebug.Log(\"2\");\n\t\t}\n\t\tif (GUILayout.Button(\"3\", Style.commandMidStyle))\n\t\t{\n\t\t\tDebug.Log(\"3\");\n\t\t}\n\t\tif (GUILayout.Button(\"4\", Style.commandMidStyle))\n\t\t{\n\t\t\tDebug.Log(\"4\");\n\t\t}\n\t\tif (GUILayout.Button(\"5\", Style.commandRightStyle))\n\t\t{\n\t\t\tDebug.Log(\"5\");\n\t\t}\n\t}\n}\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/toolbar.png)\n\n### SceneView <a name=\"sceneview\"></a>\n\nSelect a specific object that is under the cursor (default key: tab).\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/sceneview.png)\n\n### Utilities <a name=\"utilities\"></a>\n\nIn this section you will find various extensions that don't fit into a specific category.\n\n#### Context Menu operations\n\nCopy and paste all components from/to particular GameObject.\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/utils.png)\n\n#### Wizards\n\nIf you want to create custom wizards and still utilize Toolbox-related features then feel free to use the **ToolboxWizard** class.\nWorks in similar way to Unity's ScriptableWizard.\n\n> Editor Toolbox/Editor/Wizards/ToolboxWizard.cs\n\n##### ScriptableObject Creation Wizard\n\nCreate multiple ScriptableObjects at once.\nWizard will allow only ScritpableObjects marked with **[Toolbox.Attributes.CreateInWizard]** or **[UnityEngine.CreateAssetMenu]** attributes.\n\n```\nAssets/Create/Editor Toolbox/ScriptableObject Creation Wizard\n```\n\n![inspector](https://github.com/arimger/Unity-Editor-Toolbox/blob/develop/Docs/createso.png)"
        },
        {
          "name": "UserSettings",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}