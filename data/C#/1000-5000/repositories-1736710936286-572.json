{
  "metadata": {
    "timestamp": 1736710936286,
    "page": 572,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "justcoding121/titanium-web-proxy",
      "stars": 1937,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.0283203125,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings \n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Docfx\ndocs/manifest.json\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0537109375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 titanium007\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "NuGet.config",
          "type": "blob",
          "size": 0.1826171875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <packageSources>\n        <add key=\"nuget\" value=\"https://api.nuget.org/v3/index.json\" />\n    </packageSources>\n</configuration>\n"
        },
        {
          "name": "PULL_REQUEST_TEMPLATE.md",
          "type": "blob",
          "size": 0.302734375,
          "content": "Doneness:\n- [ ] Build is okay - I made sure that this change is building successfully.\n- [ ] No Bugs - I made sure that this change is working properly as expected. It doesn't have any bugs that you are aware of. \n- [ ] Branching - If this is not a hotfix, I am making this request against the develop branch \n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.3828125,
          "content": "## Titanium Web Proxy\n\nA lightweight HTTP(S) proxy server written in C#.\n\n[![.NET Core](https://github.com/justcoding121/titanium-web-proxy/actions/workflows/dotnetcore.yml/badge.svg?branch=develop)](https://github.com/justcoding121/titanium-web-proxy/actions/workflows/dotnetcore.yml) [![Join the chat at https://gitter.im/Titanium-Web-Proxy/Lobby](https://badges.gitter.im/Titanium-Web-Proxy/Lobby.svg)](https://gitter.im/Titanium-Web-Proxy/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nReport bugs or raise issues here. For programming help use [StackOverflow](http://stackoverflow.com/questions/tagged/titanium-web-proxy) with the tag Titanium-Web-Proxy.\n\n* [API Documentation](https://justcoding121.github.io/titanium-web-proxy/docs/api/Titanium.Web.Proxy.ProxyServer.html)\n* [Wiki & Contribution guidelines](https://github.com/justcoding121/Titanium-Web-Proxy/wiki)\n\n### Features\n\n* Multithreaded and asynchronous proxy employing server connection pooling, certificate cache, and buffer pooling\n* View, modify, redirect and block requests or responses\n* Supports mutual SSL authentication, proxy authentication & automatic upstream proxy detection\n* Supports kerberos, NTLM authentication over HTTP protocols on windows domain controlled networks\n* SOCKS4/5 Proxy support\n\n### Installation\nInstall by [nuget](https://www.nuget.org/packages/Titanium.Web.Proxy)\n\nFor beta releases on [beta branch](https://github.com/justcoding121/Titanium-Web-Proxy/tree/beta)\n\n    Install-Package Titanium.Web.Proxy -Pre\n\nFor stable releases on [stable branch](https://github.com/justcoding121/Titanium-Web-Proxy/tree/stable)\n\n    Install-Package Titanium.Web.Proxy\n\nSupports\n\n * .NET Standard 2.0 or above\n * .NET Framework 4.5 or above\n\n###  Note to contributors\n\n#### Road map\n\n* Fix [outstanding bugs](https://github.com/justcoding121/Titanium-Web-Proxy/issues?q=is%3Aopen+is%3Aissue+label%3Abug)\n* Support reading request and response body as stream [#823](https://github.com/justcoding121/Titanium-Web-Proxy/issues/823)\n* Stop throwing new exceptions [#634](https://github.com/justcoding121/Titanium-Web-Proxy/issues/634)\n* Support HTTP 2.0 \n\n#### Collaborators\n\nThe owner of this project, [justcoding121](https://github.com/justcoding121), is considered to be inactive from this project due to his busy work schedule. However, we have a collaborator listed below who time and again shows up to maintain this project. Please create pull requests prioritizing bug fixes for the attention of collaborators.\n\n* [honfika](https://github.com/honfika)\n \n### Development environment\n\n#### Windows\n* Visual Studio Code as IDE for .NET\n* Visual Studio 2022 as IDE for .NET Framework/.NET\n\n#### Mac OS\n* Visual Studio Code as IDE for .NET\n* Visual Studio 2022 as IDE for Mono\n\n#### Linux\n* Visual Studio Code as IDE for .NET\n* Mono develop as IDE for Mono\n\n### Usage\n\nRefer the HTTP Proxy Server library in your project and look up the test project to learn usage. \n \nSetup HTTP proxy:\n\n```csharp\nvar proxyServer = new ProxyServer();\n\n// locally trust root certificate used by this proxy \nproxyServer.CertificateManager.TrustRootCertificate(true);\n\n// optionally set the Certificate Engine\n// Under Mono only BouncyCastle will be supported\n//proxyServer.CertificateManager.CertificateEngine = Network.CertificateEngine.BouncyCastle;\n\nproxyServer.BeforeRequest += OnRequest;\nproxyServer.BeforeResponse += OnResponse;\nproxyServer.ServerCertificateValidationCallback += OnCertificateValidation;\nproxyServer.ClientCertificateSelectionCallback += OnCertificateSelection;\n\n\nvar explicitEndPoint = new ExplicitProxyEndPoint(IPAddress.Any, 8000, true)\n{\n    // Use self-issued generic certificate on all https requests\n    // Optimizes performance by not creating a certificate for each https-enabled domain\n    // Useful when certificate trust is not required by proxy clients\n   //GenericCertificate = new X509Certificate2(Path.Combine(System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location), \"genericcert.pfx\"), \"password\")\n};\n\n// Fired when a CONNECT request is received\nexplicitEndPoint.BeforeTunnelConnectRequest += OnBeforeTunnelConnectRequest;\n\n// An explicit endpoint is where the client knows about the existence of a proxy\n// So client sends request in a proxy friendly manner\nproxyServer.AddEndPoint(explicitEndPoint);\nproxyServer.Start();\n\n// Transparent endpoint is useful for reverse proxy (client is not aware of the existence of proxy)\n// A transparent endpoint usually requires a network router port forwarding HTTP(S) packets or DNS\n// to send data to this endPoint\nvar transparentEndPoint = new TransparentProxyEndPoint(IPAddress.Any, 8001, true)\n{\n    // Generic Certificate hostname to use\n    // when SNI is disabled by client\n    GenericCertificateName = \"google.com\"\n};\n\nproxyServer.AddEndPoint(transparentEndPoint);\n\n//proxyServer.UpStreamHttpProxy = new ExternalProxy() { HostName = \"localhost\", Port = 8888 };\n//proxyServer.UpStreamHttpsProxy = new ExternalProxy() { HostName = \"localhost\", Port = 8888 };\n\nforeach (var endPoint in proxyServer.ProxyEndPoints)\nConsole.WriteLine(\"Listening on '{0}' endpoint at Ip {1} and port: {2} \",\n    endPoint.GetType().Name, endPoint.IpAddress, endPoint.Port);\n\n// Only explicit proxies can be set as system proxy!\nproxyServer.SetAsSystemHttpProxy(explicitEndPoint);\nproxyServer.SetAsSystemHttpsProxy(explicitEndPoint);\n\n// wait here (You can use something else as a wait function, I am using this as a demo)\nConsole.Read();\n\n// Unsubscribe & Quit\nexplicitEndPoint.BeforeTunnelConnectRequest -= OnBeforeTunnelConnectRequest;\nproxyServer.BeforeRequest -= OnRequest;\nproxyServer.BeforeResponse -= OnResponse;\nproxyServer.ServerCertificateValidationCallback -= OnCertificateValidation;\nproxyServer.ClientCertificateSelectionCallback -= OnCertificateSelection;\n\nproxyServer.Stop();\n    \n```\nSample request and response event handlers\n\n```csharp        \n\nprivate async Task OnBeforeTunnelConnectRequest(object sender, TunnelConnectSessionEventArgs e)\n{\n    string hostname = e.HttpClient.Request.RequestUri.Host;\n\n    if (hostname.Contains(\"dropbox.com\"))\n    {\n         // Exclude Https addresses you don't want to proxy\n         // Useful for clients that use certificate pinning\n         // for example dropbox.com\n         e.DecryptSsl = false;\n    }\n}\n\npublic async Task OnRequest(object sender, SessionEventArgs e)\n{\n    Console.WriteLine(e.HttpClient.Request.Url);\n\n    // read request headers\n    var requestHeaders = e.HttpClient.Request.Headers;\n\n    var method = e.HttpClient.Request.Method.ToUpper();\n    if ((method == \"POST\" || method == \"PUT\" || method == \"PATCH\"))\n    {\n        // Get/Set request body bytes\n        byte[] bodyBytes = await e.GetRequestBody();\n        e.SetRequestBody(bodyBytes);\n\n        // Get/Set request body as string\n        string bodyString = await e.GetRequestBodyAsString();\n        e.SetRequestBodyString(bodyString);\n    \n        // store request \n        // so that you can find it from response handler \n        e.UserData = e.HttpClient.Request;\n    }\n\n    // To cancel a request with a custom HTML content\n    // Filter URL\n    if (e.HttpClient.Request.RequestUri.AbsoluteUri.Contains(\"google.com\"))\n    {\n        e.Ok(\"<!DOCTYPE html>\" +\n            \"<html><body><h1>\" +\n            \"Website Blocked\" +\n            \"</h1>\" +\n            \"<p>Blocked by titanium web proxy.</p>\" +\n            \"</body>\" +\n            \"</html>\");\n    }\n\n    // Redirect example\n    if (e.HttpClient.Request.RequestUri.AbsoluteUri.Contains(\"wikipedia.org\"))\n    {\n        e.Redirect(\"https://www.paypal.com\");\n    }\n}\n\n// Modify response\npublic async Task OnResponse(object sender, SessionEventArgs e)\n{\n    // read response headers\n    var responseHeaders = e.HttpClient.Response.Headers;\n\n    //if (!e.ProxySession.Request.Host.Equals(\"medeczane.sgk.gov.tr\")) return;\n    if (e.HttpClient.Request.Method == \"GET\" || e.HttpClient.Request.Method == \"POST\")\n    {\n        if (e.HttpClient.Response.StatusCode == 200)\n        {\n            if (e.HttpClient.Response.ContentType != null && e.HttpClient.Response.ContentType.Trim().ToLower().Contains(\"text/html\"))\n            {\n                byte[] bodyBytes = await e.GetResponseBody();\n                e.SetResponseBody(bodyBytes);\n\n                string body = await e.GetResponseBodyAsString();\n                e.SetResponseBodyString(body);\n            }\n        }\n    }\n    \n    if (e.UserData != null)\n    {\n        // access request from UserData property where we stored it in RequestHandler\n        var request = (Request)e.UserData;\n    }\n}\n\n// Allows overriding default certificate validation logic\npublic Task OnCertificateValidation(object sender, CertificateValidationEventArgs e)\n{\n    // set IsValid to true/false based on Certificate Errors\n    if (e.SslPolicyErrors == System.Net.Security.SslPolicyErrors.None)\n        e.IsValid = true;\n\n    return Task.CompletedTask;\n}\n\n// Allows overriding default client certificate selection logic during mutual authentication\npublic Task OnCertificateSelection(object sender, CertificateSelectionEventArgs e)\n{\n    // set e.clientCertificate to override\n    return Task.CompletedTask;\n}\n```\n\n**Console example application screenshot**\n\n![alt tag](https://raw.githubusercontent.com/justcoding121/Titanium-Web-Proxy/develop/examples/Titanium.Web.Proxy.Examples.Basic/Capture.PNG)\n\n**GUI example application screenshot**\n\n![alt tag](https://raw.githubusercontent.com/justcoding121/Titanium-Web-Proxy/develop/examples/Titanium.Web.Proxy.Examples.Wpf/Capture.PNG)\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.0283203125,
          "content": "baseurl: /Titanium-Web-Proxy\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "omnisharp.json",
          "type": "blob",
          "size": 0.267578125,
          "content": "{\n    \"fileOptions\": {\n      \"excludeSearchPatterns\": [\n        \"**/*.sln\",\n        \"**/*.Docs.csproj\",\n        \"**/tests/\",\n        \"**/Titanium.Web.Proxy.Examples.Wpf/\",\n        \"**/*.Basic.csproj\",\n        \"**/*.Proxy.csproj\",\n        \"**/*.Mono.csproj\"\n      ]\n    }\n  }"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}