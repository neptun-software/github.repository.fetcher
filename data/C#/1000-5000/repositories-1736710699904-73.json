{
  "metadata": {
    "timestamp": 1736710699904,
    "page": 73,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "praeclarum/sqlite-net",
      "stars": 4153,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 5.8857421875,
          "content": "# editorconfig.org\n\n# top-most EditorConfig file\nroot = true\n\n# Default settings:\n# A newline ending every file\n# Use 4 spaces as indentation\n[*]\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\nend_of_line = lf\n\n# C# files\n[*.cs]\nend_of_line = lf\nindent_style = tab\ntab_width = 4\n\n# New line preferences\ncsharp_new_line_before_open_brace = methods, types\ncsharp_new_line_before_else = true\ncsharp_new_line_before_catch = true\ncsharp_new_line_before_finally = true\ncsharp_new_line_before_members_in_object_initializers = true\ncsharp_new_line_before_members_in_anonymous_types = true\ncsharp_new_line_within_query_expression_clauses = true\n\n# Indentation preferences\ncsharp_indent_block_contents = true\ncsharp_indent_braces = false\ncsharp_indent_case_contents = true\ncsharp_indent_switch_labels = true\ncsharp_indent_labels = flush_left\n\n# avoid this. unless absolutely necessary\ndotnet_style_qualification_for_field = false:suggestion\ndotnet_style_qualification_for_property = false:suggestion\ndotnet_style_qualification_for_method = false:suggestion\ndotnet_style_qualification_for_event = false:suggestion\n\n# only use var when it's obvious what the variable type is\ncsharp_style_var_for_built_in_types = true:none\ncsharp_style_var_when_type_is_apparent = true:none\ncsharp_style_var_elsewhere = true:suggestion\n\n# use language keywords instead of BCL types\ndotnet_style_predefined_type_for_locals_parameters_members = true:suggestion\ndotnet_style_predefined_type_for_member_access = true:suggestion\n\n# name all constant fields using PascalCase\ndotnet_naming_rule.constant_fields_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.constant_fields_should_be_pascal_case.symbols  = constant_fields\ndotnet_naming_rule.constant_fields_should_be_pascal_case.style    = pascal_case_style\n\ndotnet_naming_symbols.constant_fields.applicable_kinds   = field\ndotnet_naming_symbols.constant_fields.required_modifiers = const\n\ndotnet_naming_style.pascal_case_style.capitalization = pascal_case\n\n# static fields should have s_ prefix\ndotnet_naming_rule.static_fields_should_have_prefix.severity = suggestion\ndotnet_naming_rule.static_fields_should_have_prefix.symbols  = static_fields\ndotnet_naming_rule.static_fields_should_have_prefix.style    = static_prefix_style\n\ndotnet_naming_symbols.static_fields.applicable_kinds   = field\ndotnet_naming_symbols.static_fields.required_modifiers = static\n\ndotnet_naming_style.static_prefix_style.required_prefix =\ndotnet_naming_style.static_prefix_style.capitalization = camel_case \n\n# internal and private fields should be _camelCase\ndotnet_naming_rule.camel_case_for_private_internal_fields.severity = suggestion\ndotnet_naming_rule.camel_case_for_private_internal_fields.symbols  = private_internal_fields\ndotnet_naming_rule.camel_case_for_private_internal_fields.style    = camel_case_underscore_style\n\ndotnet_naming_symbols.private_internal_fields.applicable_kinds = field\ndotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private, internal\n\ndotnet_naming_style.camel_case_underscore_style.required_prefix =\ndotnet_naming_style.camel_case_underscore_style.capitalization = camel_case \n\n# Code style defaults\ndotnet_sort_system_directives_first = true\ncsharp_preserve_single_line_blocks = true\ncsharp_preserve_single_line_statements = false\n\n# Expression-level preferences\ndotnet_style_object_initializer = true:suggestion\ndotnet_style_collection_initializer = true:suggestion\ndotnet_style_explicit_tuple_names = true:suggestion\ndotnet_style_coalesce_expression = true:suggestion\ndotnet_style_null_propagation = true:suggestion\n\n# Expression-bodied members\ncsharp_style_expression_bodied_methods = false:none\ncsharp_style_expression_bodied_constructors = false:none\ncsharp_style_expression_bodied_operators = false:none\ncsharp_style_expression_bodied_properties = true:none\ncsharp_style_expression_bodied_indexers = true:none\ncsharp_style_expression_bodied_accessors = true:none\n\n# Pattern matching\ncsharp_style_pattern_matching_over_is_with_cast_check = true:suggestion\ncsharp_style_pattern_matching_over_as_with_null_check = true:suggestion\ncsharp_style_inlined_variable_declaration = true:suggestion\n\n# Null checking preferences\ncsharp_style_throw_expression = true:suggestion\ncsharp_style_conditional_delegate_call = true:suggestion\n\n# Space preferences\ncsharp_space_after_cast = false\ncsharp_space_after_colon_in_inheritance_clause = true\ncsharp_space_after_comma = true\ncsharp_space_after_dot = false\ncsharp_space_after_keywords_in_control_flow_statements = true\ncsharp_space_after_semicolon_in_for_statement = true\ncsharp_space_around_binary_operators = before_and_after\ncsharp_space_around_declaration_statements = do_not_ignore\ncsharp_space_before_colon_in_inheritance_clause = true\ncsharp_space_before_comma = false\ncsharp_space_before_dot = false\ncsharp_space_before_open_square_brackets = false\ncsharp_space_before_semicolon_in_for_statement = false\ncsharp_space_between_empty_square_brackets = false\ncsharp_space_between_method_call_empty_parameter_list_parentheses = false\ncsharp_space_between_method_call_name_and_opening_parenthesis = true\ncsharp_space_between_method_call_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_empty_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_name_and_open_parenthesis = true\ncsharp_space_between_method_declaration_parameter_list_parentheses = false\ncsharp_space_between_parentheses = false\ncsharp_space_between_square_brackets = false\n\n# C++ Files\n[*.{cpp,h,in}]\ncurly_bracket_next_line = true\nindent_brace_style = Allman\n\n# Xml project files\n[*.{csproj,vcxproj,vcxproj.filters,proj,nativeproj,locproj}]\nindent_size = 2\nend_of_line = crlf\nindent_style = space\n\n# Xml build files\n[*.builds]\nindent_size = 2\n\n# Xml files\n[*.{xml,stylecop,resx,ruleset}]\nindent_size = 2\n\n# Xml config files\n[*.{props,targets,config,nuspec}]\nindent_size = 2\n\n# Shell scripts\n[*.sh]\nend_of_line = lf\n[*.{cmd, bat}]\nend_of_line = crlf\n\n[Makefile]\nindent_style = tab\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.255859375,
          "content": "coverage.*\nCoverageReport\n.DS_Store\n.dropbox.attr\ntest-results\n\n/PackagesOut\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\ndist/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n#*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# NCrunch\n*.ncrunchsolution\n*.ncrunchproject\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 0.7236328125,
          "content": "<Project>\n    <PropertyGroup>\n        <VersionPrefix>1.9</VersionPrefix>\n        <VersionSuffix></VersionSuffix>\n\n        <PackageIcon>Logo-low.png</PackageIcon>\n        <PackageProjectUrl>https://github.com/praeclarum/sqlite-net</PackageProjectUrl>\n        <RepositoryUrl>https://github.com/praeclarum/sqlite-net.git</RepositoryUrl>\n        <PackageTags>sqlite-net;sqlite;database;orm</PackageTags>\n        <PackageLicenseFile>LICENSE.txt</PackageLicenseFile>\n\n        <Company>Krueger Systems, Inc.</Company>\n\n        <Deterministic>true</Deterministic>\n\n        <TreatWarningsAsErrors>true</TreatWarningsAsErrors>\n    </PropertyGroup>\n\t <ItemGroup>\n\t\t<None Include=\"..\\Logo-low.png\" Pack=\"true\" PackagePath=\"\"/>\n\t </ItemGroup>\n</Project>\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.056640625,
          "content": "Copyright (c) Krueger Systems, Inc.\n\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Logo-low.png",
          "type": "blob",
          "size": 64.3251953125,
          "content": null
        },
        {
          "name": "Logo.png",
          "type": "blob",
          "size": 895.8701171875,
          "content": null
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.7802734375,
          "content": "\nSRC=src/SQLite.cs src/SQLiteAsync.cs\n\nPACKAGES_OUT=$(abspath PackagesOut)\n\nall: nuget\n\nnuget: pclnuget basenuget sqlciphernuget staticnuget\n\npclnuget: nuget/SQLite-net-std/SQLite-net-std.csproj $(SRC)\n\tdotnet pack -c Release -o $(PACKAGES_OUT) $<\n\nbasenuget: nuget/SQLite-net-base/SQLite-net-base.csproj $(SRC)\n\tdotnet pack -c Release -o $(PACKAGES_OUT) $<\n\nsqlciphernuget: nuget/SQLite-net-sqlcipher/SQLite-net-sqlcipher.csproj $(SRC)\n\tdotnet pack -c Release -o $(PACKAGES_OUT) $<\n\nstaticnuget: nuget/SQLite-net-static/SQLite-net-static.csproj $(SRC)\n\tdotnet pack -c Release -o $(PACKAGES_OUT) $<\n\ncodecoverage:\n\tcd tests/SQLite.Tests && dotnet test /p:AltCover=true /p:AltCoverForce=true \"/p:AltCoverTypeFilter=SQLite.Tests.*\" && reportgenerator -reports:coverage.xml -targetdir:./CoverageReport\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.783203125,
          "content": "\n# SQLite-net\n\n[[GitHub Action](https://github.com/praeclarum/sqlite-net/actions)] [[Code Coverage Report](https://praeclarum.org/sqlite-net/coverage/)]\n\nUse one of these packages:\n\n| Version | Package | Description |\n| ------- | ------- | ----------- |\n| [![NuGet Package](https://img.shields.io/nuget/v/sqlite-net-pcl.svg)](https://www.nuget.org/packages/sqlite-net-pcl) | [sqlite-net-pcl](https://www.nuget.org/packages/sqlite-net-pcl) | .NET Standard Library |\n| [![NuGet Package with Encryption](https://img.shields.io/nuget/v/sqlite-net-sqlcipher.svg)](https://www.nuget.org/packages/sqlite-net-sqlcipher) | [sqlite-net-sqlcipher](https://www.nuget.org/packages/sqlite-net-sqlcipher) | With Encryption Support |\n| [![NuGet Package using P/Invoke](https://img.shields.io/nuget/v/sqlite-net-static.svg)](https://www.nuget.org/packages/sqlite-net-static) | [sqlite-net-static](https://www.nuget.org/packages/sqlite-net-static) | Special version that uses P/Invokes to platform-provided sqlite3 |\n| [![NuGet Package without a SQLitePCLRaw bundle](https://img.shields.io/nuget/v/sqlite-net-base.svg)](https://www.nuget.org/packages/sqlite-net-base) | [sqlite-net-base](https://www.nuget.org/packages/sqlite-net-base) | without a SQLitePCLRaw bundle so you can choose your own provider |\n\nSQLite-net is an open source, minimal library to allow .NET, .NET Core, and Mono applications to store data in\n[SQLite 3 databases](http://www.sqlite.org). It was first designed to work with [Xamarin.iOS](http://xamarin.com),\nbut has since grown up to work on all the platforms (Xamarin.*, .NET, UWP, Azure, etc.).\n\nSQLite-net was designed as a quick and convenient database layer. Its design follows from these *goals*:\n\n* Very easy to integrate with existing projects and runs on all the .NET platforms.\n  \n* Thin wrapper over SQLite that is fast and efficient. (This library should not be the performance bottleneck of your queries.)\n  \n* Very simple methods for executing CRUD operations and queries safely (using parameters) and for retrieving the results of those query in a strongly typed fashion.\n  \n* Works with your data model without forcing you to change your classes. (Contains a small reflection-driven ORM layer.)\n  \n## NuGet Installation\n\nInstall [sqlite-net-pcl](https://www.nuget.org/packages/sqlite-net-pcl) from NuGet.\n\n**Important:** You will need to add the NuGet package to **both** your *.NET Standard library project* and your *platform-dependent app project*.\n\n## Source Installation\n\nSQLite-net is all contained in 1 file (I know, so cool right?) and is easy to add to your project. Just add [SQLite.cs](https://github.com/praeclarum/sqlite-net/blob/master/src/SQLite.cs) to your project, and you're ready to start creating tables. An asynchronous implementation can be found in [SQLiteAsync.cs](https://github.com/praeclarum/sqlite-net/blob/master/src/SQLiteAsync.cs).\n\n## Please Contribute!\n\nThis is an open source project that welcomes contributions/suggestions/bug reports from those who use it. If you have any ideas on how to improve the library, please [post an issue here on GitHub](https://github.com/praeclarum/sqlite-net/issues). Please check out the [How to Contribute](https://github.com/praeclarum/sqlite-net/wiki/How-to-Contribute).\n\n\n# Example Time!\n\nPlease consult the Wiki for, ahem, [complete documentation](https://github.com/praeclarum/sqlite-net/wiki).\n\nThe library contains simple attributes that you can use to control the construction of tables. In a simple stock program, you might use:\n\n```csharp\npublic class Stock\n{\n\t[PrimaryKey, AutoIncrement]\n\tpublic int Id { get; set; }\n\tpublic string Symbol { get; set; }\n}\n\npublic class Valuation\n{\n\t[PrimaryKey, AutoIncrement]\n\tpublic int Id { get; set; }\n\t[Indexed]\n\tpublic int StockId { get; set; }\n\tpublic DateTime Time { get; set; }\n\tpublic decimal Price { get; set; }\n\t[Ignore]\n\tpublic string IgnoreField { get; set; }\n}\n```\n\nOnce you've defined the objects in your model you have a choice of APIs. You can use the \"synchronous API\" where calls\nblock one at a time, or you can use the \"asynchronous API\" where calls do not block. You may care to use the asynchronous\nAPI for mobile applications in order to increase responsiveness.\n\nBoth APIs are explained in the two sections below.\n\n## Synchronous API\n\nOnce you have defined your entity, you can automatically generate tables in your database by calling `CreateTable`:\n\n```csharp\n// Get an absolute path to the database file\nvar databasePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), \"MyData.db\");\n\nvar db = new SQLiteConnection(databasePath);\ndb.CreateTable<Stock>();\ndb.CreateTable<Valuation>();\n```\n\nYou can insert rows in the database using `Insert`. If the table contains an auto-incremented primary key, then the value for that key will be available to you after the insert:\n\n```csharp\npublic static void AddStock(SQLiteConnection db, string symbol) {\n\tvar stock = new Stock() {\n\t\tSymbol = symbol\n\t};\n\tdb.Insert(stock);\n\tConsole.WriteLine(\"{0} == {1}\", stock.Symbol, stock.Id);\n}\n```\n\nSimilar methods exist for `Update` and `Delete`.\n\nThe most straightforward way to query for data is using the `Table` method. This can take predicates for constraining via WHERE clauses and/or adding ORDER BY clauses:\n\n```csharp\nvar query = db.Table<Stock>().Where(v => v.Symbol.StartsWith(\"A\"));\n\nforeach (var stock in query)\n\tConsole.WriteLine(\"Stock: \" + stock.Symbol);\n```\n\nYou can also query the database at a low-level using the `Query` method:\n\n```csharp\npublic static IEnumerable<Valuation> QueryValuations (SQLiteConnection db, Stock stock) {\n\treturn db.Query<Valuation> (\"select * from Valuation where StockId = ?\", stock.Id);\n}\n```\n\nThe generic parameter to the `Query` method specifies the type of object to create for each row. It can be one of your table classes, or any other class whose public properties match the column returned by the query. For instance, we could rewrite the above query as:\n\n```csharp\npublic class Val\n{\n\tpublic decimal Money { get; set; }\n\tpublic DateTime Date { get; set; }\n}\n\npublic static IEnumerable<Val> QueryVals (SQLiteConnection db, Stock stock) {\n\treturn db.Query<Val> (\"select \\\"Price\\\" as \\\"Money\\\", \\\"Time\\\" as \\\"Date\\\" from Valuation where StockId = ?\", stock.Id);\n}\n```\n\nYou can perform low-level updates of the database using the `Execute` method.\n\n## Asynchronous API\n\nThe asynchronous library uses the Task Parallel Library (TPL). As such, normal use of `Task` objects, and the `async` and `await` keywords \nwill work for you.\n\nOnce you have defined your entity, you can automatically generate tables by calling `CreateTableAsync`:\n\n```csharp\n// Get an absolute path to the database file\nvar databasePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), \"MyData.db\");\n\nvar db = new SQLiteAsyncConnection(databasePath);\n\nawait db.CreateTableAsync<Stock>();\n\nConsole.WriteLine(\"Table created!\");\n```\n\nYou can insert rows in the database using `Insert`. If the table contains an auto-incremented primary key, then the value for that key will be available to you after the insert:\n\n```csharp\nvar stock = new Stock()\n{\n\tSymbol = \"AAPL\"\n};\n\nawait db.InsertAsync(stock);\n\nConsole.WriteLine(\"Auto stock id: {0}\", stock.Id);\n```\n\nSimilar methods exist for `UpdateAsync` and `DeleteAsync`.\n\nQuerying for data is most straightforwardly done using the `Table` method. This will return an `AsyncTableQuery` instance back, whereupon\nyou can add predicates for constraining via WHERE clauses and/or adding ORDER BY. The database is not physically touched until one of the special \nretrieval methods - `ToListAsync`, `FirstAsync`, or `FirstOrDefaultAsync` - is called.\n\n```csharp\nvar query = db.Table<Stock>().Where(s => s.Symbol.StartsWith(\"A\"));\n\nvar result = await query.ToListAsync();\n\nforeach (var s in result)\n\tConsole.WriteLine(\"Stock: \" + s.Symbol);\n```\n\nThere are a number of low-level methods available. You can also query the database directly via the `QueryAsync` method. Over and above the change \noperations provided by `InsertAsync` etc you can issue `ExecuteAsync` methods to change sets of data directly within the database.\n\nAnother helpful method is `ExecuteScalarAsync`. This allows you to return a scalar value from the database easily:\n\n```csharp\nvar count = await db.ExecuteScalarAsync<int>(\"select count(*) from Stock\");\n\nConsole.WriteLine(string.Format(\"Found '{0}' stock items.\", count));\n```\n\n## Manual SQL\n\n**sqlite-net** is normally used as a light ORM (object-relational-mapper) using the methods `CreateTable` and `Table`.\nHowever, you can also use it as a convenient way to manually execute queries.\n\nHere is an example of creating a table, inserting into it (with a parameterized command), and querying it without using ORM features.\n\n```csharp\ndb.Execute (\"create table Stock(Symbol varchar(100) not null)\");\ndb.Execute (\"insert into Stock(Symbol) values (?)\", \"MSFT\");\nvar stocks = db.Query<Stock> (\"select * from Stock\");\n```\n\n## Using SQLCipher\n\nYou can use an encrypted database by using the [sqlite-net-sqlcipher NuGet package](https://www.nuget.org/packages/sqlite-net-sqlcipher).\n\nThe database key is set in the `SqliteConnectionString` passed to the connection constructor:\n\n```csharp\nvar options = new SQLiteConnectionString(databasePath, true,\n\tkey: \"password\");\nvar encryptedDb = new SQLiteAsyncConnection(options);\n```\n\nIf you need set pragmas to control the encryption, actions can be passed to the connection string:\n\n```csharp\nvar options2 = new SQLiteConnectionString (databasePath, true,\n\tkey: \"password\",\n\tpreKeyAction: db => db.Execute(\"PRAGMA cipher_default_use_hmac = OFF;\"),\n\tpostKeyAction: db => db.Execute (\"PRAGMA kdf_iter = 128000;\"));\nvar encryptedDb2 = new SQLiteAsyncConnection (options2);\n```\n\n\n## Thank you!\n\nThank you to the .NET community for embracing this project, and thank you to all the contributors who have helped to make this great.\n\nThanks also to Tirza van Dijk (@tirzavdijk) for the great logo!\n\n"
        },
        {
          "name": "SQLite.sln",
          "type": "blob",
          "size": 8.8359375,
          "content": "﻿\r\nMicrosoft Visual Studio Solution File, Format Version 11.00\r\n# Visual Studio 2010\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{A0E59A10-7BD0-4554-B133-66FA850159BE}\"\r\n\tProjectSection(SolutionItems) = preProject\r\n\t\tMakefile = Makefile\r\n\t\tREADME.md = README.md\r\n\tEndProjectSection\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"tests\", \"tests\", \"{FECC0E44-E626-49CB-BD8B-0CFBD93FBEFF}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"SQLite-net-std\", \"nuget\\SQLite-net-std\\SQLite-net-std.csproj\", \"{081D08D6-10F1-431B-88FE-469FD9FE898C}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"ApiDiff\", \"tests\\ApiDiff\\ApiDiff.csproj\", \"{1DEF735C-B973-4ED9-8446-7FFA6D0B410B}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"SQLite-net-base\", \"nuget\\SQLite-net-base\\SQLite-net-base.csproj\", \"{53D1953C-3641-47D0-BE08-14DB853CC576}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"SQLite-net-sqlcipher\", \"nuget\\SQLite-net-sqlcipher\\SQLite-net-sqlcipher.csproj\", \"{59DB03EF-E28D-431E-9058-74AF316800EE}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"SQLite.Tests\", \"tests\\SQLite.Tests\\SQLite.Tests.csproj\", \"{80B66A43-B358-4438-BF06-6351B86B121A}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"SQLite-net-static\", \"nuget\\SQLite-net-static\\SQLite-net-static.csproj\", \"{7CD60DAE-D505-4C2E-80B3-296556CE711E}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\t\tDebug|iPhoneSimulator = Debug|iPhoneSimulator\r\n\t\tRelease|iPhone = Release|iPhone\r\n\t\tRelease|iPhoneSimulator = Release|iPhoneSimulator\r\n\t\tDebug|iPhone = Debug|iPhone\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{081D08D6-10F1-431B-88FE-469FD9FE898C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{081D08D6-10F1-431B-88FE-469FD9FE898C}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{081D08D6-10F1-431B-88FE-469FD9FE898C}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{081D08D6-10F1-431B-88FE-469FD9FE898C}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{081D08D6-10F1-431B-88FE-469FD9FE898C}.Debug|iPhoneSimulator.ActiveCfg = Debug|Any CPU\r\n\t\t{081D08D6-10F1-431B-88FE-469FD9FE898C}.Debug|iPhoneSimulator.Build.0 = Debug|Any CPU\r\n\t\t{081D08D6-10F1-431B-88FE-469FD9FE898C}.Release|iPhone.ActiveCfg = Release|Any CPU\r\n\t\t{081D08D6-10F1-431B-88FE-469FD9FE898C}.Release|iPhone.Build.0 = Release|Any CPU\r\n\t\t{081D08D6-10F1-431B-88FE-469FD9FE898C}.Release|iPhoneSimulator.ActiveCfg = Release|Any CPU\r\n\t\t{081D08D6-10F1-431B-88FE-469FD9FE898C}.Release|iPhoneSimulator.Build.0 = Release|Any CPU\r\n\t\t{081D08D6-10F1-431B-88FE-469FD9FE898C}.Debug|iPhone.ActiveCfg = Debug|Any CPU\r\n\t\t{081D08D6-10F1-431B-88FE-469FD9FE898C}.Debug|iPhone.Build.0 = Debug|Any CPU\r\n\t\t{1DEF735C-B973-4ED9-8446-7FFA6D0B410B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{1DEF735C-B973-4ED9-8446-7FFA6D0B410B}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{1DEF735C-B973-4ED9-8446-7FFA6D0B410B}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{1DEF735C-B973-4ED9-8446-7FFA6D0B410B}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{1DEF735C-B973-4ED9-8446-7FFA6D0B410B}.Debug|iPhoneSimulator.ActiveCfg = Debug|Any CPU\r\n\t\t{1DEF735C-B973-4ED9-8446-7FFA6D0B410B}.Debug|iPhoneSimulator.Build.0 = Debug|Any CPU\r\n\t\t{1DEF735C-B973-4ED9-8446-7FFA6D0B410B}.Release|iPhone.ActiveCfg = Release|Any CPU\r\n\t\t{1DEF735C-B973-4ED9-8446-7FFA6D0B410B}.Release|iPhone.Build.0 = Release|Any CPU\r\n\t\t{1DEF735C-B973-4ED9-8446-7FFA6D0B410B}.Release|iPhoneSimulator.ActiveCfg = Release|Any CPU\r\n\t\t{1DEF735C-B973-4ED9-8446-7FFA6D0B410B}.Release|iPhoneSimulator.Build.0 = Release|Any CPU\r\n\t\t{1DEF735C-B973-4ED9-8446-7FFA6D0B410B}.Debug|iPhone.ActiveCfg = Debug|Any CPU\r\n\t\t{1DEF735C-B973-4ED9-8446-7FFA6D0B410B}.Debug|iPhone.Build.0 = Debug|Any CPU\r\n\t\t{53D1953C-3641-47D0-BE08-14DB853CC576}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{53D1953C-3641-47D0-BE08-14DB853CC576}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{53D1953C-3641-47D0-BE08-14DB853CC576}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{53D1953C-3641-47D0-BE08-14DB853CC576}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{53D1953C-3641-47D0-BE08-14DB853CC576}.Debug|iPhoneSimulator.ActiveCfg = Debug|Any CPU\r\n\t\t{53D1953C-3641-47D0-BE08-14DB853CC576}.Debug|iPhoneSimulator.Build.0 = Debug|Any CPU\r\n\t\t{53D1953C-3641-47D0-BE08-14DB853CC576}.Release|iPhone.ActiveCfg = Release|Any CPU\r\n\t\t{53D1953C-3641-47D0-BE08-14DB853CC576}.Release|iPhone.Build.0 = Release|Any CPU\r\n\t\t{53D1953C-3641-47D0-BE08-14DB853CC576}.Release|iPhoneSimulator.ActiveCfg = Release|Any CPU\r\n\t\t{53D1953C-3641-47D0-BE08-14DB853CC576}.Release|iPhoneSimulator.Build.0 = Release|Any CPU\r\n\t\t{53D1953C-3641-47D0-BE08-14DB853CC576}.Debug|iPhone.ActiveCfg = Debug|Any CPU\r\n\t\t{53D1953C-3641-47D0-BE08-14DB853CC576}.Debug|iPhone.Build.0 = Debug|Any CPU\r\n\t\t{59DB03EF-E28D-431E-9058-74AF316800EE}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{59DB03EF-E28D-431E-9058-74AF316800EE}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{59DB03EF-E28D-431E-9058-74AF316800EE}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{59DB03EF-E28D-431E-9058-74AF316800EE}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{59DB03EF-E28D-431E-9058-74AF316800EE}.Debug|iPhoneSimulator.ActiveCfg = Debug|Any CPU\r\n\t\t{59DB03EF-E28D-431E-9058-74AF316800EE}.Debug|iPhoneSimulator.Build.0 = Debug|Any CPU\r\n\t\t{59DB03EF-E28D-431E-9058-74AF316800EE}.Release|iPhone.ActiveCfg = Release|Any CPU\r\n\t\t{59DB03EF-E28D-431E-9058-74AF316800EE}.Release|iPhone.Build.0 = Release|Any CPU\r\n\t\t{59DB03EF-E28D-431E-9058-74AF316800EE}.Release|iPhoneSimulator.ActiveCfg = Release|Any CPU\r\n\t\t{59DB03EF-E28D-431E-9058-74AF316800EE}.Release|iPhoneSimulator.Build.0 = Release|Any CPU\r\n\t\t{59DB03EF-E28D-431E-9058-74AF316800EE}.Debug|iPhone.ActiveCfg = Debug|Any CPU\r\n\t\t{59DB03EF-E28D-431E-9058-74AF316800EE}.Debug|iPhone.Build.0 = Debug|Any CPU\r\n\t\t{80B66A43-B358-4438-BF06-6351B86B121A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{80B66A43-B358-4438-BF06-6351B86B121A}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{80B66A43-B358-4438-BF06-6351B86B121A}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{80B66A43-B358-4438-BF06-6351B86B121A}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{80B66A43-B358-4438-BF06-6351B86B121A}.Debug|iPhoneSimulator.ActiveCfg = Debug|Any CPU\r\n\t\t{80B66A43-B358-4438-BF06-6351B86B121A}.Debug|iPhoneSimulator.Build.0 = Debug|Any CPU\r\n\t\t{80B66A43-B358-4438-BF06-6351B86B121A}.Release|iPhone.ActiveCfg = Release|Any CPU\r\n\t\t{80B66A43-B358-4438-BF06-6351B86B121A}.Release|iPhone.Build.0 = Release|Any CPU\r\n\t\t{80B66A43-B358-4438-BF06-6351B86B121A}.Release|iPhoneSimulator.ActiveCfg = Release|Any CPU\r\n\t\t{80B66A43-B358-4438-BF06-6351B86B121A}.Release|iPhoneSimulator.Build.0 = Release|Any CPU\r\n\t\t{80B66A43-B358-4438-BF06-6351B86B121A}.Debug|iPhone.ActiveCfg = Debug|Any CPU\r\n\t\t{80B66A43-B358-4438-BF06-6351B86B121A}.Debug|iPhone.Build.0 = Debug|Any CPU\r\n\t\t{7CD60DAE-D505-4C2E-80B3-296556CE711E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{7CD60DAE-D505-4C2E-80B3-296556CE711E}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{7CD60DAE-D505-4C2E-80B3-296556CE711E}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{7CD60DAE-D505-4C2E-80B3-296556CE711E}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{7CD60DAE-D505-4C2E-80B3-296556CE711E}.Debug|iPhoneSimulator.ActiveCfg = Debug|Any CPU\r\n\t\t{7CD60DAE-D505-4C2E-80B3-296556CE711E}.Debug|iPhoneSimulator.Build.0 = Debug|Any CPU\r\n\t\t{7CD60DAE-D505-4C2E-80B3-296556CE711E}.Release|iPhone.ActiveCfg = Release|Any CPU\r\n\t\t{7CD60DAE-D505-4C2E-80B3-296556CE711E}.Release|iPhone.Build.0 = Release|Any CPU\r\n\t\t{7CD60DAE-D505-4C2E-80B3-296556CE711E}.Release|iPhoneSimulator.ActiveCfg = Release|Any CPU\r\n\t\t{7CD60DAE-D505-4C2E-80B3-296556CE711E}.Release|iPhoneSimulator.Build.0 = Release|Any CPU\r\n\t\t{7CD60DAE-D505-4C2E-80B3-296556CE711E}.Debug|iPhone.ActiveCfg = Debug|Any CPU\r\n\t\t{7CD60DAE-D505-4C2E-80B3-296556CE711E}.Debug|iPhone.Build.0 = Debug|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(NestedProjects) = preSolution\r\n\t\t{1DEF735C-B973-4ED9-8446-7FFA6D0B410B} = {FECC0E44-E626-49CB-BD8B-0CFBD93FBEFF}\r\n\t\t{80B66A43-B358-4438-BF06-6351B86B121A} = {FECC0E44-E626-49CB-BD8B-0CFBD93FBEFF}\r\n\tEndGlobalSection\r\n\tGlobalSection(MonoDevelopProperties) = preSolution\r\n\t\tStartupItem = tests\\SQLite.Tests.csproj\r\n\t\tPolicies = $0\r\n\t\t$0.TextStylePolicy = $1\r\n\t\t$1.FileWidth = 128\r\n\t\t$1.NoTabsAfterNonTabs = True\r\n\t\t$1.EolMarker = Unix\r\n\t\t$1.scope = text/x-csharp\r\n\t\t$0.CSharpFormattingPolicy = $2\r\n\t\t$2.NewLinesForBracesInProperties = False\r\n\t\t$2.NewLinesForBracesInAccessors = False\r\n\t\t$2.NewLinesForBracesInAnonymousMethods = False\r\n\t\t$2.NewLinesForBracesInControlBlocks = False\r\n\t\t$2.NewLinesForBracesInAnonymousTypes = False\r\n\t\t$2.NewLinesForBracesInObjectCollectionArrayInitializers = False\r\n\t\t$2.NewLinesForBracesInLambdaExpressionBody = False\r\n\t\t$2.scope = text/x-csharp\r\n\t\t$2.SpacingAfterMethodDeclarationName = True\r\n\t\t$2.SpaceAfterMethodCallName = True\r\n\tEndGlobalSection\r\nEndGlobal\r\n"
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.0458984375,
          "content": "{\r\n  \"sdk\": {\r\n    \"version\": \"8.0.100\"\r\n  }\r\n}"
        },
        {
          "name": "nuget",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}