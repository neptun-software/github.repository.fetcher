{
  "metadata": {
    "timestamp": 1736710698149,
    "page": 70,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sebastienros/jint",
      "stars": 4182,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 12.1103515625,
          "content": "# EditorConfig is awesome: https://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n# Don't use tabs for indentation.\n[*]\nindent_style = space\n# (Please don't specify an indent_size here; that has too many unintended consequences.)\n\n# Code files\n[*.{cs,csx,vb,vbx}]\nindent_size = 4\ninsert_final_newline = true\n\n# XML project files\n[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]\nindent_size = 2\n\n# XML config files\n[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]\nindent_size = 2\n\n# Powershell files\n[*.ps1]\nindent_size = 2\n\n# Shell script files\n[*.sh]\nend_of_line = lf\nindent_size = 2\n\n# Dotnet code style settings:\n[*.{cs,vb}]\n\n# IDE0055: Fix formatting\ndotnet_diagnostic.IDE0055.severity = warning\n\n# Error CA1051 : Do not declare visible instance fields\ndotnet_diagnostic.CA1051.severity = none\n\n#  Error CA1720 : Identifiers should not contain type names\ndotnet_diagnostic.CA1720.severity = none\n\n#  Error CA1711: Identifiers should not have incorrect suffix\ndotnet_diagnostic.CA1711.severity = none\n\n#  Error CA1710: Identifiers should have correct suffix\ndotnet_diagnostic.CA1710.severity = none\n\n#  Error CA1716: Identifiers should have correct suffix\ndotnet_diagnostic.CA1716.severity = none\n\n#  Error MA0026: TODO\ndotnet_diagnostic.MA0026.severity = none\n\n#  Error MA0048 : File name must match type name\ndotnet_diagnostic.MA0048.severity = none\n\n#  Error MA0016 : Prefer using collection abstraction instead of implementation\ndotnet_diagnostic.MA0016.severity = none\n\n#  Error MA0017 : Abstract types should not have public or internal constructors\ndotnet_diagnostic.MA0017.severity = none\n\n#  Error MA0051 : Method is too long\ndotnet_diagnostic.MA0051.severity = none\n\n#  Error MA0046 : The delegate must return void\ndotnet_diagnostic.MA0046.severity = none\n\n#  Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators\ndotnet_diagnostic.MA0097.severity = none\n\n#  Error MA0025 : Implement the functionality (or raise NotSupportedException or PlatformNotSupportedException)\ndotnet_diagnostic.MA0025.severity = none\n\n#  Error MA0091 : Sender parameter should be 'this' for instance events\ndotnet_diagnostic.MA0091.severity = none\n\n# Sort using and Import directives with System.* appearing first\ndotnet_sort_system_directives_first = true\ndotnet_separate_import_directive_groups = false\n# Avoid \"this.\" and \"Me.\" if not necessary\ndotnet_style_qualification_for_field = false:refactoring\ndotnet_style_qualification_for_property = false:refactoring\ndotnet_style_qualification_for_method = false:refactoring\ndotnet_style_qualification_for_event = false:refactoring\n\n# Use language keywords instead of framework type names for type references\ndotnet_style_predefined_type_for_locals_parameters_members = true:suggestion\ndotnet_style_predefined_type_for_member_access = true:suggestion\n\n# Suggest more modern language features when available\ndotnet_style_object_initializer = true:suggestion\ndotnet_style_collection_initializer = true:suggestion\ndotnet_style_coalesce_expression = true:suggestion\ndotnet_style_null_propagation = true:suggestion\ndotnet_style_explicit_tuple_names = true:suggestion\n\n# Whitespace options\ndotnet_style_allow_multiple_blank_lines_experimental = false\n\n# Constants are PascalCase\ndotnet_naming_rule.constants_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.constants_should_be_pascal_case.symbols = constants\ndotnet_naming_rule.constants_should_be_pascal_case.style = constant_style\n\ndotnet_naming_symbols.constants.applicable_kinds = field, local\ndotnet_naming_symbols.constants.required_modifiers = const\n\ndotnet_naming_style.constant_style.capitalization = pascal_case\n\n# Static fields are camelCase and start with s_\ndotnet_naming_rule.static_fields_should_be_camel_case.severity = suggestion\ndotnet_naming_rule.static_fields_should_be_camel_case.symbols = static_fields\ndotnet_naming_rule.static_fields_should_be_camel_case.style = static_field_style\n\ndotnet_naming_symbols.static_fields.applicable_kinds = field\ndotnet_naming_symbols.static_fields.required_modifiers = static\n\ndotnet_naming_style.static_field_style.capitalization = camel_case\ndotnet_naming_style.static_field_style.required_prefix = s_\n\n# Instance fields are camelCase and start with _\ndotnet_naming_rule.instance_fields_should_be_camel_case.severity = suggestion\ndotnet_naming_rule.instance_fields_should_be_camel_case.symbols = instance_fields\ndotnet_naming_rule.instance_fields_should_be_camel_case.style = instance_field_style\n\ndotnet_naming_symbols.instance_fields.applicable_kinds = field\n\ndotnet_naming_style.instance_field_style.capitalization = camel_case\ndotnet_naming_style.instance_field_style.required_prefix = _\n\n# Locals and parameters are camelCase\ndotnet_naming_rule.locals_should_be_camel_case.severity = suggestion\ndotnet_naming_rule.locals_should_be_camel_case.symbols = locals_and_parameters\ndotnet_naming_rule.locals_should_be_camel_case.style = camel_case_style\n\ndotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter, local\n\ndotnet_naming_style.camel_case_style.capitalization = camel_case\n\n# Local functions are PascalCase\ndotnet_naming_rule.local_functions_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.local_functions_should_be_pascal_case.symbols = local_functions\ndotnet_naming_rule.local_functions_should_be_pascal_case.style = local_function_style\n\ndotnet_naming_symbols.local_functions.applicable_kinds = local_function\n\ndotnet_naming_style.local_function_style.capitalization = pascal_case\n\n# By default, name items with PascalCase\ndotnet_naming_rule.members_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.members_should_be_pascal_case.symbols = all_members\ndotnet_naming_rule.members_should_be_pascal_case.style = pascal_case_style\n\ndotnet_naming_symbols.all_members.applicable_kinds = *\n\ndotnet_naming_style.pascal_case_style.capitalization = pascal_case\n\n# error RS2008: Enable analyzer release tracking for the analyzer project containing rule '{0}'\ndotnet_diagnostic.RS2008.severity = none\n\n# IDE0035: Remove unreachable code\ndotnet_diagnostic.IDE0035.severity = warning\n\n# IDE0036: Order modifiers\ndotnet_diagnostic.IDE0036.severity = warning\n\n# IDE0043: Format string contains invalid placeholder\ndotnet_diagnostic.IDE0043.severity = warning\n\n# IDE0044: Make field readonly\ndotnet_diagnostic.IDE0044.severity = warning\n\n# RS0016: Only enable if API files are present\ndotnet_public_api_analyzer.require_api_files = true\n\n# CSharp code style settings:\n[*.cs]\n# Newline settings\ncsharp_new_line_before_open_brace = all\ncsharp_new_line_before_else = true\ncsharp_new_line_before_catch = true\ncsharp_new_line_before_finally = true\ncsharp_new_line_before_members_in_object_initializers = true\ncsharp_new_line_before_members_in_anonymous_types = true\ncsharp_new_line_between_query_expression_clauses = true\n\n# Indentation preferences\ncsharp_indent_block_contents = true\ncsharp_indent_braces = false\ncsharp_indent_case_contents = true\ncsharp_indent_case_contents_when_block = true\ncsharp_indent_switch_labels = true\ncsharp_indent_labels = flush_left\n\n# Whitespace options\ncsharp_style_allow_embedded_statements_on_same_line_experimental = false\ncsharp_style_allow_blank_lines_between_consecutive_braces_experimental = false\ncsharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = false\n\n# Prefer \"var\" everywhere\ncsharp_style_var_for_built_in_types = true:suggestion\ncsharp_style_var_when_type_is_apparent = true:suggestion\ncsharp_style_var_elsewhere = true:suggestion\n\n# Prefer method-like constructs to have a block body\ncsharp_style_expression_bodied_methods = false:none\ncsharp_style_expression_bodied_constructors = false:none\ncsharp_style_expression_bodied_operators = false:none\n\n# Prefer property-like constructs to have an expression-body\ncsharp_style_expression_bodied_properties = true:none\ncsharp_style_expression_bodied_indexers = true:none\ncsharp_style_expression_bodied_accessors = true:none\n\n# Suggest more modern language features when available\ncsharp_style_pattern_matching_over_is_with_cast_check = true:suggestion\ncsharp_style_pattern_matching_over_as_with_null_check = true:suggestion\ncsharp_style_inlined_variable_declaration = true:suggestion\ncsharp_style_throw_expression = true:suggestion\ncsharp_style_conditional_delegate_call = true:suggestion\n\n# Space preferences\ncsharp_space_after_cast = true\ncsharp_space_after_colon_in_inheritance_clause = true\ncsharp_space_after_comma = true\ncsharp_space_after_dot = false\ncsharp_space_after_keywords_in_control_flow_statements = true\ncsharp_space_after_semicolon_in_for_statement = true\ncsharp_space_around_binary_operators = before_and_after\ncsharp_space_around_declaration_statements = do_not_ignore\ncsharp_space_before_colon_in_inheritance_clause = true\ncsharp_space_before_comma = false\ncsharp_space_before_dot = false\ncsharp_space_before_open_square_brackets = false\ncsharp_space_before_semicolon_in_for_statement = false\ncsharp_space_between_empty_square_brackets = false\ncsharp_space_between_method_call_empty_parameter_list_parentheses = false\ncsharp_space_between_method_call_name_and_opening_parenthesis = false\ncsharp_space_between_method_call_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_empty_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_name_and_open_parenthesis = false\ncsharp_space_between_method_declaration_parameter_list_parentheses = false\ncsharp_space_between_parentheses = false\ncsharp_space_between_square_brackets = false\n\n# Blocks are allowed\ncsharp_prefer_braces = true:silent\ncsharp_preserve_single_line_blocks = true\ncsharp_preserve_single_line_statements = true\n\n# Currently only enabled for C# due to crash in VB analyzer.  VB can be enabled once\n# https://github.com/dotnet/roslyn/pull/54259 has been published.\ndotnet_style_allow_statement_immediately_after_block_experimental = false\n\n[src/CodeStyle/**.{cs,vb}]\n# warning RS0005: Do not use generic CodeAction.Create to create CodeAction\ndotnet_diagnostic.RS0005.severity = none\n\n[src/{Analyzers,CodeStyle,Features,Workspaces,EditorFeatures,VisualStudio}/**/*.{cs,vb}]\n\n# IDE0011: Add braces\ncsharp_prefer_braces = when_multiline:warning\n# NOTE: We need the below severity entry for Add Braces due to https://github.com/dotnet/roslyn/issues/44201\ndotnet_diagnostic.IDE0011.severity = warning\n\n# IDE0040: Add accessibility modifiers\ndotnet_diagnostic.IDE0040.severity = warning\n\n# CONSIDER: Are IDE0051 and IDE0052 too noisy to be warnings for IDE editing scenarios? Should they be made build-only warnings?\n# IDE0051: Remove unused private member\ndotnet_diagnostic.IDE0051.severity = warning\n\n# IDE0052: Remove unread private member\ndotnet_diagnostic.IDE0052.severity = warning\n\n# IDE0059: Unnecessary assignment to a value\ndotnet_diagnostic.IDE0059.severity = warning\n\n# IDE0060: Remove unused parameter\ndotnet_diagnostic.IDE0060.severity = warning\n\n# CA1012: Abstract types should not have public constructors\ndotnet_diagnostic.CA1012.severity = warning\n\n# CA1822: Make member static\ndotnet_diagnostic.CA1822.severity = warning\n\n# Prefer \"var\" everywhere\ndotnet_diagnostic.IDE0007.severity = warning\ncsharp_style_var_for_built_in_types = true:warning\ncsharp_style_var_when_type_is_apparent = true:warning\ncsharp_style_var_elsewhere = true:warning\n\n# dotnet_style_allow_multiple_blank_lines_experimental\ndotnet_diagnostic.IDE2000.severity = warning\n\n# csharp_style_allow_embedded_statements_on_same_line_experimental\ndotnet_diagnostic.IDE2001.severity = warning\n\n# csharp_style_allow_blank_lines_between_consecutive_braces_experimental\ndotnet_diagnostic.IDE2002.severity = warning\n\n# dotnet_style_allow_statement_immediately_after_block_experimental\ndotnet_diagnostic.IDE2003.severity = warning\n\n# csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental\ndotnet_diagnostic.IDE2004.severity = warning\n\n[src/{VisualStudio}/**/*.{cs,vb}]\n# CA1822: Make member static\n# Not enforced as a build 'warning' for 'VisualStudio' layer due to large number of false positives from https://github.com/dotnet/roslyn-analyzers/issues/3857 and https://github.com/dotnet/roslyn-analyzers/issues/3858\n# Additionally, there is a risk of accidentally breaking an internal API that partners rely on though IVT.\ndotnet_diagnostic.CA1822.severity = suggestion\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.0634765625,
          "content": "# File-scoped namespaces\n9079aef684aba5adb09b021290b47ff85bc44e82"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.216796875,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\nJint.Tests/** linguist-vendored\nJint.Tests.Ecma/** linguist-vendored\nJint.Tests.CommonScripts/** linguist-vendored\nJint.Tests.Test262/** linguist-vendored\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.28125,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\nJint.Tests/Scripts/\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n\n# Build results\n\n[Dd]ebug/\n[Rr]elease/\nx64/\nbuild/\n[Bb]in/\n[Oo]bj/\n\n# Enable \"build/\" folder in the NuGet Packages folder since NuGet packages use it for MSBuild targets\n!packages/*/build/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n*_i.c\n*_p.c\n*.ilk\n*.meta\n*.nupkg\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.log\n*.scc\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n*.ncrunch*\n.*crunch*.local.xml\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.Publish.xml\n*.pubxml\n\n# NuGet Packages Directory\n## TODO: If you have NuGet Package Restore enabled, uncomment the next line\npackages/\n.nuget/\n\n# Windows Azure Build Output\ncsx\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.[Pp]ublish.xml\n*.pfx\n*.publishsettings\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\nApp_Data/*.mdf\nApp_Data/*.ldf\n\n# =========================\n# Windows detritus\n# =========================\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Mac crap\n.DS_Store\nJint.sln.ide/*\n/Jint.sln.GhostDoc.xml\n.vs\nproject.lock.json\n.build\n\n.idea\nBenchmarkDotNet.Artifacts*\n.vscode\n\n# generated code\nJint.Tests.Test262/Generated\n/artifacts\n"
        },
        {
          "name": "CREDITS.txt",
          "type": "blob",
          "size": 0.9638671875,
          "content": "This file contains the list of open-source tools Jint is using directly or indirectly\n\nEsprima\n-----\nJint contains a C# port of the Esprima Javascript parser.\n\nWebsite:      http://esprima.org/\nCopyright:    Copyright (c) Ariya Hidayat\nLicense:      BSD - https://github.com/ariya/esprima/blob/master/LICENSE.BSD\n\nGoogle Inc\n-----\nJint uses the FastDtoa algorithm implemented for Google V8\n\nCopyright:    Copyright 2010 the V8 project authors. All rights reserved.\n\nMozilla\n-----\nJint number serialization is based on the Java port of the FastDtoa algorithm from Mozilla\n\nWebsite:      http://mozilla.org/\nCopyright:    Copyright (c) Mozilla\nLicense:      MPL 2.0 - http://mozilla.org/MPL/2.0/\n\nMimeKit\n-----\nJint date parsing utilizes code extracted from the excellent MimeKit library.\n\nWebsite:      https://github.com/jstedfast/MimeKit\nCopyright:    Copyright (C) 2012-2022 .NET Foundation and Contributors\nLicense:      MIT - https://github.com/jstedfast/MimeKit/blob/master/LICENSE\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 1.2421875,
          "content": "<Project>\n\n  <PropertyGroup>\n\n    <Copyright>Sebastien Ros</Copyright>\n    <Authors>Sebastien Ros</Authors>\n\n    <Description>Javascript interpreter for .NET.</Description>\n    <PackageTags>javascript, interpreter, es5, es2015, es6, ecmascript, interop</PackageTags>\n    <PackageProjectUrl>https://github.com/sebastienros/jint</PackageProjectUrl>\n    <PackageLicenseExpression>BSD-2-Clause</PackageLicenseExpression>\n\n    <BuildNumber Condition=\"'$(BuildNumber)' == ''\">0</BuildNumber>\n    <VersionPrefix>4.0.0</VersionPrefix>\n    <VersionSuffix>beta-$(BuildNumber)</VersionSuffix>\n    <FileVersion>$(VersionPrefix).$(BuildNumber)</FileVersion>\n\n    <PublishRepositoryUrl>true</PublishRepositoryUrl>\n    <EmbedUntrackedSources>true</EmbedUntrackedSources>\n    <IncludeSymbols>true</IncludeSymbols>\n    <DebugType>portable</DebugType>\n    <SymbolPackageFormat>snupkg</SymbolPackageFormat>\n\n    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>\n    <UseArtifactsOutput>true</UseArtifactsOutput>\n\n    <LangVersion>latest</LangVersion>\n    <ImplicitUsings>enable</ImplicitUsings>\n\n  </PropertyGroup>\n\n  <ItemGroup>\n    <Using Include=\"Acornima\" />\n    <Using Include=\"Acornima.Ast\" />\n    <Using Include=\"Acornima.Ast.Module\" Alias=\"AstModule\" />\n  </ItemGroup>\n\n</Project>\n"
        },
        {
          "name": "Directory.Packages.props",
          "type": "blob",
          "size": 2.07421875,
          "content": "<Project>\n  <PropertyGroup>\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\n    <CentralPackageTransitivePinningEnabled>false</CentralPackageTransitivePinningEnabled>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageVersion Include=\"Acornima\" Version=\"1.1.1\" />\n    <PackageVersion Include=\"Acornima.Extras\" Version=\"1.1.1\" />\n    <PackageVersion Include=\"BenchmarkDotNet\" Version=\"0.14.0\" />\n    <PackageVersion Include=\"BenchmarkDotNet.TestAdapter\" Version=\"0.13.12\" />\n    <PackageVersion Include=\"FluentAssertions\" Version=\"7.0.0\" />\n    <PackageVersion Include=\"Flurl.Http.Signed\" Version=\"4.0.2\" />\n    <PackageVersion Include=\"Jurassic\" Version=\"3.2.8\" />\n    <PackageVersion Include=\"Meziantou.Analyzer\" Version=\"2.0.184\" />\n    <PackageVersion Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"9.0.0\" />\n    <PackageVersion Include=\"Microsoft.Extensions.TimeProvider.Testing\" Version=\"9.0.0\" />\n    <PackageVersion Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.12.0\" />\n    <PackageVersion Include=\"MongoDB.Bson.signed\" Version=\"2.19.0\" />\n    <PackageVersion Include=\"Newtonsoft.Json\" Version=\"13.0.3\" />\n    <PackageVersion Include=\"NiL.JS\" Version=\"2.5.1684\" />\n    <PackageVersion Include=\"NodaTime\" Version=\"3.2.0\" />\n    <PackageVersion Include=\"NUnit\" Version=\"4.3.2\" />\n    <PackageVersion Include=\"NUnit3TestAdapter\" Version=\"4.6.0\" />\n    <PackageVersion Include=\"SharpZipLib\" Version=\"1.4.2\" />\n    <PackageVersion Include=\"SourceMaps\" Version=\"0.3.0\" />\n    <PackageVersion Include=\"Spectre.Console.Cli\" Version=\"0.45.0\" />\n    <PackageVersion Include=\"System.Text.Json\" Version=\"9.0.0\" />\n    <PackageVersion Include=\"Test262Harness\" Version=\"1.0.1\" />\n    <PackageVersion Include=\"xunit\" Version=\"2.9.2\" />\n    <PackageVersion Include=\"xunit.runner.visualstudio\" Version=\"2.8.2\" PrivateAssets=\"all\" />\n    <PackageVersion Include=\"YantraJS.Core\" Version=\"1.2.246\" />\n  </ItemGroup>\n  <ItemGroup>\n    <GlobalPackageReference Include=\"GitHubActionsTestLogger\" Version=\"2.4.1\" />\n    <GlobalPackageReference Include=\"PolySharp\" Version=\"1.15.0\" />\n  </ItemGroup>\n</Project>"
        },
        {
          "name": "Jint.AotExample",
          "type": "tree",
          "content": null
        },
        {
          "name": "Jint.Benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "Jint.Repl",
          "type": "tree",
          "content": null
        },
        {
          "name": "Jint.Tests.CommonScripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "Jint.Tests.PublicInterface",
          "type": "tree",
          "content": null
        },
        {
          "name": "Jint.Tests.Test262",
          "type": "tree",
          "content": null
        },
        {
          "name": "Jint.Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "Jint.sln",
          "type": "blob",
          "size": 5.947265625,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio 15\nVisualStudioVersion = 15.0.26406.1\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Jint\", \"Jint\\Jint.csproj\", \"{4B6F353A-5D01-407D-9DC8-96D1FD4F7052}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Jint.Benchmark\", \"Jint.Benchmark\\Jint.Benchmark.csproj\", \"{228D9FA5-CBC0-4489-9805-9B4456747647}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Jint.Repl\", \"Jint.Repl\\Jint.Repl.csproj\", \"{BB3AC010-C2CE-41A5-93C6-763600EF67B3}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Jint.Tests\", \"Jint.Tests\\Jint.Tests.csproj\", \"{9FBCAB58-FE6D-4804-92B8-7CF886113708}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Jint.Tests.CommonScripts\", \"Jint.Tests.CommonScripts\\Jint.Tests.CommonScripts.csproj\", \"{B815F239-6409-4BA7-9461-18317AA2DBED}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Jint.Tests.Test262\", \"Jint.Tests.Test262\\Jint.Tests.Test262.csproj\", \"{62FFFDBD-AB58-490D-9A50-AA7C53BF0409}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Jint.Tests.PublicInterface\", \"Jint.Tests.PublicInterface\\Jint.Tests.PublicInterface.csproj\", \"{70198CE9-7DFE-40CA-BBAC-1454C92C4109}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{4EB9DD72-0566-4EE4-9550-B064ED2C8332}\"\n\tProjectSection(SolutionItems) = preProject\n\t\tREADME.md = README.md\n\t\t.editorconfig = .editorconfig\n\t\tDirectory.Packages.props = Directory.Packages.props\n\t\tDirectory.Build.props = Directory.Build.props\n\tEndProjectSection\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Jint.AotExample\", \"Jint.AotExample\\Jint.AotExample.csproj\", \"{E07CC7D2-2ADF-4D71-A5B1-88209FFC29CD}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \".github\", \".github\", \"{D60F0DFE-8860-4E25-8973-E1F11AE2466A}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.github\\dependabot.yml = .github\\dependabot.yml\n\tEndProjectSection\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"workflows\", \"workflows\", \"{85015C4E-5BBE-475D-9A17-A63434F9AA2A}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.github\\workflows\\build.yml = .github\\workflows\\build.yml\n\t\t.github\\workflows\\pr.yml = .github\\workflows\\pr.yml\n\t\t.github\\workflows\\release.yml = .github\\workflows\\release.yml\n\tEndProjectSection\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"ISSUE_TEMPLATE\", \"ISSUE_TEMPLATE\", \"{EEFDE656-C1C0-432A-941E-4EDD84452410}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.github\\ISSUE_TEMPLATE\\bug_report.md = .github\\ISSUE_TEMPLATE\\bug_report.md\n\t\t.github\\ISSUE_TEMPLATE\\feature_request.md = .github\\ISSUE_TEMPLATE\\feature_request.md\n\tEndProjectSection\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{4B6F353A-5D01-407D-9DC8-96D1FD4F7052}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{4B6F353A-5D01-407D-9DC8-96D1FD4F7052}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{4B6F353A-5D01-407D-9DC8-96D1FD4F7052}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{4B6F353A-5D01-407D-9DC8-96D1FD4F7052}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{228D9FA5-CBC0-4489-9805-9B4456747647}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{228D9FA5-CBC0-4489-9805-9B4456747647}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{228D9FA5-CBC0-4489-9805-9B4456747647}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{228D9FA5-CBC0-4489-9805-9B4456747647}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{BB3AC010-C2CE-41A5-93C6-763600EF67B3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{BB3AC010-C2CE-41A5-93C6-763600EF67B3}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{BB3AC010-C2CE-41A5-93C6-763600EF67B3}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{BB3AC010-C2CE-41A5-93C6-763600EF67B3}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{9FBCAB58-FE6D-4804-92B8-7CF886113708}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{9FBCAB58-FE6D-4804-92B8-7CF886113708}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{9FBCAB58-FE6D-4804-92B8-7CF886113708}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{9FBCAB58-FE6D-4804-92B8-7CF886113708}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{B815F239-6409-4BA7-9461-18317AA2DBED}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{B815F239-6409-4BA7-9461-18317AA2DBED}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{B815F239-6409-4BA7-9461-18317AA2DBED}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{B815F239-6409-4BA7-9461-18317AA2DBED}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{62FFFDBD-AB58-490D-9A50-AA7C53BF0409}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{62FFFDBD-AB58-490D-9A50-AA7C53BF0409}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{62FFFDBD-AB58-490D-9A50-AA7C53BF0409}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{62FFFDBD-AB58-490D-9A50-AA7C53BF0409}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{70198CE9-7DFE-40CA-BBAC-1454C92C4109}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{70198CE9-7DFE-40CA-BBAC-1454C92C4109}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{70198CE9-7DFE-40CA-BBAC-1454C92C4109}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{70198CE9-7DFE-40CA-BBAC-1454C92C4109}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{E07CC7D2-2ADF-4D71-A5B1-88209FFC29CD}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{E07CC7D2-2ADF-4D71-A5B1-88209FFC29CD}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{E07CC7D2-2ADF-4D71-A5B1-88209FFC29CD}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{E07CC7D2-2ADF-4D71-A5B1-88209FFC29CD}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{D60F0DFE-8860-4E25-8973-E1F11AE2466A} = {4EB9DD72-0566-4EE4-9550-B064ED2C8332}\n\t\t{85015C4E-5BBE-475D-9A17-A63434F9AA2A} = {D60F0DFE-8860-4E25-8973-E1F11AE2466A}\n\t\t{EEFDE656-C1C0-432A-941E-4EDD84452410} = {D60F0DFE-8860-4E25-8973-E1F11AE2466A}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "Jint.sln.DotSettings",
          "type": "blob",
          "size": 2.041015625,
          "content": "﻿<wpf:ResourceDictionary xml:space=\"preserve\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:s=\"clr-namespace:System;assembly=mscorlib\" xmlns:ss=\"urn:shemas-jetbrains-com:settings-storage-xaml\" xmlns:wpf=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">\n\t<s:String x:Key=\"/Default/CodeInspection/ExcludedFiles/FilesAndFoldersToSkip2/=2CC1F6A6_002D7DCC_002D4C7C_002DA619_002DACE1A4296446/@EntryIndexedValue\"></s:String>\n\t<s:Boolean x:Key=\"/Default/CodeInspection/ExcludedFiles/FilesAndFoldersToSkip2/=2CC1F6A6_002D7DCC_002D4C7C_002DA619_002DACE1A4296446/@EntryIndexRemoved\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/CodeInspection/ExcludedFiles/FilesAndFoldersToSkip2/=2CC1F6A6_002D7DCC_002D4C7C_002DA619_002DACE1A4296446_002Fd_003ATestCases/@EntryIndexedValue\">ExplicitlyExcluded</s:String>\n\t\n\t<s:String x:Key=\"/Default/CodeInspection/ExcludedFiles/FilesAndFoldersToSkip2/=44CF8026_002DA797_002D420C_002DA8BC_002D409BB67D32F6_002Fd_003Atest/@EntryIndexedValue\">ExplicitlyExcluded</s:String>\n\t<s:String x:Key=\"/Default/CodeInspection/ExcludedFiles/FilesAndFoldersToSkip2/=62FFFDBD_002DAB58_002D490D_002D9A50_002DAA7C53BF0409_002Fd_003Atest/@EntryIndexedValue\">ExplicitlyExcluded</s:String>\n\t<s:String x:Key=\"/Default/CodeInspection/ExcludedFiles/FilesAndFoldersToSkip2/=95ED73F7_002D3519_002D4733_002DB361_002D7790053A1A71/@EntryIndexedValue\"></s:String>\n\t<s:Boolean x:Key=\"/Default/CodeInspection/ExcludedFiles/FilesAndFoldersToSkip2/=95ED73F7_002D3519_002D4733_002DB361_002D7790053A1A71/@EntryIndexRemoved\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/CodeInspection/ExcludedFiles/FilesAndFoldersToSkip2/=95ED73F7_002D3519_002D4733_002DB361_002D7790053A1A71_002Fd_003Aharness/@EntryIndexedValue\">ExplicitlyExcluded</s:String>\n\t<s:String x:Key=\"/Default/CodeInspection/ExcludedFiles/FilesAndFoldersToSkip2/=95ED73F7_002D3519_002D4733_002DB361_002D7790053A1A71_002Fd_003Atest/@EntryIndexedValue\">ExplicitlyExcluded</s:String>\n\t\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=ISO/@EntryIndexedValue\">ISO</s:String></wpf:ResourceDictionary>"
        },
        {
          "name": "Jint",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.2822265625,
          "content": "BSD 2-Clause License\n\nCopyright (c) 2013, Sebastien Ros\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.912109375,
          "content": "[![Build](https://github.com/sebastienros/jint/actions/workflows/build.yml/badge.svg)](https://github.com/sebastienros/jint/actions/workflows/build.yml)\n[![NuGet](https://img.shields.io/nuget/v/Jint.svg)](https://www.nuget.org/packages/Jint)\n[![NuGet](https://img.shields.io/nuget/vpre/Jint.svg)](https://www.nuget.org/packages/Jint)\n[![MyGet](https://img.shields.io/myget/jint/vpre/jint.svg?label=MyGet)](https://www.myget.org/feed/jint/package/nuget/Jint)\n[![Join the chat at https://gitter.im/sebastienros/jint](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/sebastienros/jint)\n\n# Jint\n\nJint is a __Javascript interpreter__ for .NET which can run on __any modern .NET platform__ as it supports .NET Standard 2.0 and .NET 4.6.2 targets (and later).\n\n## Use cases and users\n\n- Run JavaScript inside your .NET application in a safe sand-boxed environment\n- Expose native .NET objects and functions to your JavaScript code (get database query results as JSON, call .NET methods, etc.)\n- Support scripting in your .NET application, allowing users to customize your application using JavaScript (like Unity games) \n\nSome users of Jint include \n[RavenDB](https://github.com/ravendb/ravendb), \n[EventStore](https://github.com/EventStore/EventStore), \n[OrchardCore](https://github.com/OrchardCMS/OrchardCore), \n[ELSA Workflows](https://github.com/elsa-workflows/elsa-core),\n[docfx](https://github.com/dotnet/docfx), \n[JavaScript Engine Switcher](https://github.com/Taritsyn/JavaScriptEngineSwitcher),\nand many more.\n\n## Supported features\n\n#### ECMAScript 2015 (ES6)\n\n- ✔ ArrayBuffer\n- ✔ Arrow function expression\n- ✔ Binary and octal literals\n- ✔ Class support\n- ✔ DataView\n- ✔ Destructuring\n- ✔ Default, rest and spread\n- ✔ Enhanced object literals\n- ✔ `for...of`\n- ❌ Generators\n- ✔ Template strings\n- ✔ Lexical scoping of variables (let and const)\n- ✔ Map and Set\n- ✔ Modules and module loaders\n- ✔ Promises (Experimental, API is unstable)\n- ✔ Reflect\n- ✔ Proxies\n- ✔ Symbols\n- ❌ Tail calls\n- ✔ Typed arrays\n- ✔ Unicode\n- ✔ Weakmap and Weakset\n\n#### ECMAScript 2016\n\n- ✔ `Array.prototype.includes`\n- ✔ `await`, `async`\n- ✔ Block-scoping of variables and functions\n- ✔ Exponentiation operator `**`\n- ✔ Destructuring patterns (of variables)\n\n####  ECMAScript 2017\n\n- ✔ `Object.values`, `Object.entries` and `Object.getOwnPropertyDescriptors`\n- ❌ Shared memory and atomics\n\n#### ECMAScript 2018\n\n- ✔ `Promise.prototype.finally`\n- ✔ RegExp named capture groups\n- ✔ Rest/spread operators for object literals (`...identifier`)\n- ✔ SharedArrayBuffer\n\n#### ECMAScript 2019\n\n- ✔ `Array.prototype.flat`, `Array.prototype.flatMap`\n- ✔ `String.prototype.trimStart`, `String.prototype.trimEnd`\n- ✔ `Object.fromEntries`\n- ✔ `Symbol.description`\n- ✔ Optional catch binding\n\n#### ECMAScript 2020\n\n- ✔ `BigInt`\n- ✔ `export * as ns from`\n- ✔ `for-in` enhancements\n- ✔ `globalThis` object\n- ✔ `import`\n- ✔ `import.meta`\n- ✔ Nullish coalescing operator (`??`)\n- ✔ Optional chaining\n- ✔ `Promise.allSettled`\n- ✔ `String.prototype.matchAll`\n\n#### ECMAScript 2021\n\n- ✔ Logical Assignment Operators (`&&=` `||=` `??=`)\n- ✔ Numeric Separators (`1_000`)\n- ✔ `AggregateError`\n- ✔ `Promise.any` \n- ✔ `String.prototype.replaceAll`\n- ✔ `WeakRef` \n- ✔ `FinalizationRegistry`\n\n#### ECMAScript 2022\n\n- ✔ Class Fields\n- ✔ RegExp Match Indices\n- ✔ Top-level await\n- ✔ Ergonomic brand checks for Private Fields\n- ✔ `.at()`\n- ✔ Accessible `Object.prototype.hasOwnProperty` (`Object.hasOwn`)\n- ✔ Class Static Block\n- ✔ Error Cause\n\n#### ECMAScript 2023\n\n- ✔ Array find from last\n- ✔ Change Array by copy\n- ✔ Hashbang Grammar\n- ✔ Symbols as WeakMap keys\n\n#### ECMAScript 2024\n\n- ✔ ArrayBuffer enhancements - `ArrayBuffer.prototype.resize` and `ArrayBuffer.prototype.transfer`\n- ❌ `Atomics.waitAsync` \n- ✔ Ensuring that strings are well-formed - `String.prototype.ensureWellFormed` and `String.prototype.isWellFormed`\n- ✔ Grouping synchronous iterables - `Object.groupBy` and `Map.groupBy`\n- ✔ `Promise.withResolvers`\n- ❌ Regular expression flag `/v`\n\n#### ECMAScript Stage 3 (no version yet)\n\n- ✔ Float16Array (Requires NET 6 or higher)\n- ✔ Import attributes\n- ✔ JSON modules\n- ✔ Math.sumPrecise\n- ✔ `Promise.try`\n- ✔ Set methods (`intersection`, `union`, `difference`, `symmetricDifference`, `isSubsetOf`, `isSupersetOf`, `isDisjointFrom`)\n- ✔ ShadowRealm\n- ✔ Uint8Array to/from base64\n\n#### Other\n\n- Further refined .NET CLR interop capabilities\n- Constraints for execution (recursion, memory usage, duration)\n\n\n## Performance\n\n- Because Jint neither generates any .NET bytecode nor uses the DLR it runs relatively small scripts really fast\n- If you repeatedly run the same script, you should cache the `Script` or `Module` instance produced by Esprima and feed it to Jint instead of the content string\n- You should prefer running engine in strict mode, it improves performance\n\nYou can check out [the engine comparison results](Jint.Benchmark), bear in mind that every use case is different and benchmarks might not reflect your real-world usage.\n\n## Discussion\n\nJoin the chat on [Gitter](https://gitter.im/sebastienros/jint) or post your questions with the `jint` tag on [stackoverflow](http://stackoverflow.com/questions/tagged/jint).\n\n## Video\n\nHere is a short video of how Jint works and some sample usage\n\nhttps://docs.microsoft.com/shows/code-conversations/sebastien-ros-on-jint-javascript-interpreter-net\n\n## Thread-safety\n\nEngine instances are not thread-safe and they should not accessed from multiple threads simultaneously. \n\n## Examples\n\nThis example defines a new value named `log` pointing to `Console.WriteLine`, then runs\na script calling `log('Hello World!')`. \n\n```c#\nvar engine = new Engine()\n    .SetValue(\"log\", new Action<object>(Console.WriteLine));\n    \nengine.Execute(@\"\n    function hello() { \n        log('Hello World');\n    };\n \n    hello();\n\");\n```\n\nHere, the variable `x` is set to `3` and `x * x` is evaluated in JavaScript. The result is returned to .NET directly, in this case as a `double` value `9`. \n```c#\nvar square = new Engine()\n    .SetValue(\"x\", 3) // define a new variable\n    .Evaluate(\"x * x\") // evaluate a statement\n    .ToObject(); // converts the value to .NET\n```\n\nYou can also directly pass POCOs or anonymous objects and use them from JavaScript. In this example for instance a new `Person` instance is manipulated from JavaScript. \n```c#\nvar p = new Person {\n    Name = \"Mickey Mouse\"\n};\n\nvar engine = new Engine()\n    .SetValue(\"p\", p)\n    .Execute(\"p.Name = 'Minnie'\");\n\nAssert.AreEqual(\"Minnie\", p.Name);\n```\n\nYou can invoke JavaScript function reference\n```c#\nvar result = new Engine()\n    .Execute(\"function add(a, b) { return a + b; }\")\n    .Invoke(\"add\",1, 2); // -> 3\n```\nor directly by name \n```c#\nvar engine = new Engine()\n   .Execute(\"function add(a, b) { return a + b; }\");\n\nengine.Invoke(\"add\", 1, 2); // -> 3\n```\n## Accessing .NET assemblies and classes\n\nYou can allow an engine to access any .NET class by configuring the engine instance like this:\n```c#\nvar engine = new Engine(cfg => cfg.AllowClr());\n```\n\nThen you have access to the `System` namespace as a global value. Here is how it's used in the context on the command line utility:\n```javascript\njint> var file = new System.IO.StreamWriter('log.txt');\njint> file.WriteLine('Hello World !');\njint> file.Dispose();\n```\nAnd even create shortcuts to common .NET methods\n```javascript\njint> var log = System.Console.WriteLine;\njint> log('Hello World !');\n=> \"Hello World !\"\n```\n\nWhen allowing the CLR, you can optionally pass custom assemblies to load types from. \n```c#\nvar engine = new Engine(cfg => cfg\n    .AllowClr(typeof(Bar).Assembly)\n);\n```\n\nand then to assign local namespaces the same way `System` does it for you, use `importNamespace`\n```javascript\njint> var Foo = importNamespace('Foo');\njint> var bar = new Foo.Bar();\njint> log(bar.ToString());\n```    \n\nadding a specific CLR type reference can be done like this\n```csharp\nengine.SetValue(\"TheType\", TypeReference.CreateTypeReference<TheType>(engine));\n```\n\nand used this way\n```javascript\njint> var o = new TheType();\n```\n\nGeneric types are also supported. Here is how to declare, instantiate and use a `List<string>`:\n```javascript\njint> var ListOfString = System.Collections.Generic.List(System.String);\njint> var list = new ListOfString();\njint> list.Add('foo');\njint> list.Add(1); // automatically converted to String\njint> list.Count; // 2\n```\n\n## Internationalization\n\nYou can enforce what Time Zone or Culture the engine should use when locale JavaScript methods are used if you don't want to use the computer's default values.\n\nThis example forces the Time Zone to Pacific Standard Time.\n```c#\nvar PST = TimeZoneInfo.FindSystemTimeZoneById(\"Pacific Standard Time\");\nvar engine = new Engine(cfg => cfg.LocalTimeZone(PST));\n    \nengine.Execute(\"new Date().toString()\"); // Wed Dec 31 1969 16:00:00 GMT-08:00\n```\n\nThis example is using French as the default culture.\n```c#\nvar FR = CultureInfo.GetCultureInfo(\"fr-FR\");\nvar engine = new Engine(cfg => cfg.Culture(FR));\n    \nengine.Execute(\"new Number(1.23).toString()\"); // 1.23\nengine.Execute(\"new Number(1.23).toLocaleString()\"); // 1,23\n```\n\n## Execution Constraints \n\nExecution constraints are used during script execution to ensure that requirements around resource consumption are met, for example:\n\n* Scripts should not use more than X memory.\n* Scripts should only run for a maximum amount of time.\n\nYou can configure them via the options:\n\n```c#\nvar engine = new Engine(options => {\n\n    // Limit memory allocations to 4 MB\n    options.LimitMemory(4_000_000);\n\n    // Set a timeout to 4 seconds.\n    options.TimeoutInterval(TimeSpan.FromSeconds(4));\n\n    // Set limit of 1000 executed statements.\n    options.MaxStatements(1000);\n\n    // Use a cancellation token.\n    options.CancellationToken(cancellationToken);\n}\n```\n\nYou can also write a custom constraint by deriving from the `Constraint` base class:\n\n```c#\npublic abstract class Constraint\n{\n    /// Called before script is run and useful when you use an engine object for multiple executions.\n    public abstract void Reset();\n\n    // Called before each statement to check if your requirements are met; if not - throws an exception.\n    public abstract void Check();\n}\n```\n\nFor example we can write a constraint that stops scripts when the CPU usage gets too high:\n\n```c#\nclass MyCPUConstraint : Constraint\n{\n    public override void Reset()\n    {\n    }\n\n    public override void Check()\n    {\n        var cpuUsage = GetCPUUsage();\n\n        if (cpuUsage > 0.8) // 80%\n        {\n            throw new OperationCancelledException();\n        }\n    }\n}\n\nvar engine = new Engine(options =>\n{\n    options.Constraint(new MyCPUConstraint());\n});\n```\n\nWhen you reuse the engine and want to use cancellation tokens you have to reset the token before each call of `Execute`:\n\n```c#\nvar engine = new Engine(options =>\n{\n    options.CancellationToken(new CancellationToken(true));\n});\n\nvar constraint = engine.Constraints.Find<CancellationConstraint>();\n\nfor (var i = 0; i < 10; i++) \n{\n    using (var tcs = new CancellationTokenSource(TimeSpan.FromSeconds(10)))\n    {\n        constraint.Reset(tcs.Token);\n\n        engine.SetValue(\"a\", 1);\n        engine.Execute(\"a++\");\n    }\n}\n```\n\n## Using Modules\n\nYou can use modules to `import` and `export` variables from multiple script files:\n\n```c#\nvar engine = new Engine(options =>\n{\n    options.EnableModules(@\"C:\\Scripts\");\n})\n\nvar ns = engine.Modules.Import(\"./my-module.js\");\n\nvar value = ns.Get(\"value\").AsString();\n```\n\nBy default, the module resolution algorithm will be restricted to the base path specified in `EnableModules`, and there is no package support. However you can provide your own packages in two ways.\n\nDefining modules using JavaScript source code:\n\n```c#\nengine.Modules.Add(\"user\", \"export const name = 'John';\");\n\nvar ns = engine.Modules.Import(\"user\");\n\nvar name = ns.Get(\"name\").AsString();\n```\n\nDefining modules using the module builder, which allows you to export CLR classes and values from .NET:\n\n```c#\n// Create the module 'lib' with the class MyClass and the variable version\nengine.Modules.Add(\"lib\", builder => builder\n    .ExportType<MyClass>()\n    .ExportValue(\"version\", 15)\n);\n\n// Create a user-defined module and do something with 'lib'\nengine.Modules.Add(\"custom\", @\"\n    import { MyClass, version } from 'lib';\n    const x = new MyClass();\n    export const result as x.doSomething();\n\");\n\n// Import the user-defined module; this will execute the import chain\nvar ns = engine.Modules.Import(\"custom\");\n\n// The result contains \"live\" bindings to the module\nvar id = ns.Get(\"result\").AsInteger();\n```\n\nNote that you don't need to `EnableModules` if you only use modules created using `Engine.Modules.Add`.\n\n## .NET Interoperability\n\n- Manipulate CLR objects from JavaScript, including:\n  - Single values\n  - Objects\n    - Properties\n    - Methods\n  - Delegates\n  - Anonymous objects\n- Convert JavaScript values to CLR objects\n  - Primitive values\n  - Object -> expando objects (`IDictionary<string, object>` and dynamic)\n  - Array -> object[]\n  - Date -> DateTime\n  - number -> double\n  - string -> string\n  - boolean -> bool\n  - Regex -> RegExp\n  - Function -> Delegate\n- Extensions methods\n\n## Security\n\nThe following features provide you with a secure, sand-boxed environment to run user scripts.\n\n- Define memory limits, to prevent allocations from depleting the memory.\n- Enable/disable usage of BCL to prevent scripts from invoking .NET code.\n- Limit number of statements to prevent infinite loops.\n- Limit depth of calls to prevent deep recursion calls.\n- Define a timeout, to prevent scripts from taking too long to finish.\n\n## Branches and releases\n\n- The recommended branch is __main__, any PR should target this branch\n- The __main__ branch is automatically built and published on [MyGet](https://www.myget.org/feed/Packages/jint). Add this feed to your NuGet sources to use it: https://www.myget.org/F/jint/api/v3/index.json\n- The __main__ branch is occasionally published on [NuGet](https://www.nuget.org/packages/jint)\n"
        },
        {
          "name": "_appveyor.yml",
          "type": "blob",
          "size": 1.7666015625,
          "content": "image: Visual Studio 2019\n\n# Do not build feature branch with open Pull Requests\nskip_branch_with_pr: true\nbranches:\n  only:\n    - master\n    - dev\n    - rel/3.0-beta\n\ninit:\n  - git config --global core.autocrlf true\ninstall:\n  - ps: $env:BuildNumber= $env:APPVEYOR_BUILD_NUMBER\n  - ps: $env:DOTNET_SKIP_FIRST_TIME_EXPERIENCE = true\n  - ps: $env:NUGET_XMLDOC_MODE = \"skip\"\n  - ps: $env:DOTNET_CLI_TELEMETRY_OPTOUT = 1\n  - ps: $IsReleaseBranch = ($env:APPVEYOR_REPO_BRANCH -eq \"master\" -Or $env:APPVEYOR_REPO_BRANCH -eq \"rel/3.0-beta\")\nbuild_script:\n  # Ensure we are not using the myget feed for dependencies\n  - ps: if ($IsReleaseBranch) { copy NuGet.release.config NuGet.config }\n  - dotnet --version\n  - dotnet pack -c Release\ntest_script:\n  - dotnet test .\\Jint.Tests\\Jint.Tests.csproj -c Release\n  - dotnet test .\\Jint.Tests.CommonScripts\\Jint.Tests.CommonScripts.csproj -c Release\n  - dotnet test .\\Jint.Tests.Ecma\\Jint.Tests.Ecma.csproj -c Release\n  - dotnet test .\\Jint.Tests.Test262\\Jint.Tests.Test262.csproj -c Release\nartifacts:\n  - path: 'Jint\\**\\*.*nupkg'\ndeploy:  \n  - provider: NuGet\n    on:\n      branch: dev\n    server: https://www.myget.org/F/jint/api/v2/package\n    api_key:\n      secure: 7PQvuxXn5P39X5QDlDKWbNpOKJKivpqkq7umakIirAZ12CSTAiCwjtJhSBGVboPm\n    skip_symbols: true\n    artifact: /.*\\.nupkg/\n  - provider: NuGet\n    on:\n      branch: rel/3.0-beta\n    server: https://www.nuget.org/api/v2/package\n    api_key:\n      secure: qZ6R8U4mtBXFVRhhNLJyRz3bktF/jL5BvzrCQsXcn6ATRQ4YavFP3By8Sg4hYMH5\n    skip_symbols: true\n    artifact: /.*\\.nupkg/  \n  - provider: NuGet\n    on:\n      branch: master\n    server: https://www.nuget.org/api/v2/package\n    api_key:\n      secure: yZBBCLlJTphpHCezRUxyDny1mBbDw7xFG/2Rwt21A8khKp6KJCxFEYx4k9IihOjO\n    skip_symbols: true\n    artifact: /.*\\.nupkg/\n\n"
        }
      ]
    }
  ]
}