{
  "metadata": {
    "timestamp": 1736711045901,
    "page": 793,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "toddams/RazorLight",
      "stars": 1544,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3759765625,
          "content": "# Top-most EditorConfig file\nroot = true\n\n# Tab indentation\n[*.{cs,cshtml}]\nindent_style = tab\n[*.cs]\n\n# CS1591: Missing XML comment for publicly visible type or member\ndotnet_diagnostic.CS1591.severity = none\n\n[*.{xml,xsd,csproj}]\nmax_line_length = off\nend_of_line = crlf\nindent_style = space\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_size = 2"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4638671875,
          "content": "[Oo]bj/\n[Bb]in/\nTestResults/\n.nuget/\n.build/\n.testPublish/\n*.sln.ide/\n_ReSharper.*/\npackages/\nartifacts/\nPublishProfiles/\n.vs/\n.idea/\nbower_components/\nnode_modules/\ndebugSettings.json\nproject.lock.json\n*.user\n*.suo\n*.cache\n*.docstates\n_ReSharper.*\nnuget.exe\n*net45.csproj\n*net451.csproj\n*k10.csproj\n*.psess\n*.vsp\n*.pidb\n*.userprefs\n*DS_Store\n*.ncrunchsolution\n*.*sdf\n*.ipch\n.settings\n*.sln.ide\nnode_modules\n*launchSettings.json\n*.orig\nnuget\nRazorLight.Sandbox/\n\n*.received.*"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 0.755859375,
          "content": "<Project>\n  <PropertyGroup>\n    <Deterministic>true</Deterministic>\n    <IncludeSymbols>true</IncludeSymbols>\n    <SymbolPackageFormat>snupkg</SymbolPackageFormat>\n    <EmbedUntrackedSource>true</EmbedUntrackedSource>\n    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>\n\n    <RepositoryUrl>https://github.com/toddams/RazorLight</RepositoryUrl>\n    <RepositoryType>git</RepositoryType>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.SourceLink.GitHub\" Version=\"1.0.0\" PrivateAssets=\"All\"/>\n  </ItemGroup>\n\n  <ItemGroup>\n    <SourceRoot Include=\"$(NuGetPackageRoot)\" Condition=\"'$(NuGetPackageRoot)' != ''\" />\n  </ItemGroup>\n</Project>"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.2919921875,
          "content": "<!--\nGENERATED FILE - DO NOT EDIT\nThis file was generated by [MarkdownSnippets](https://github.com/SimonCropp/MarkdownSnippets).\nSource File: /README.source.md\nTo change this file edit the source file and then run MarkdownSnippets.\n-->\n\n# RazorLight\n\nUse Razor to build templates from Files / EmbeddedResources / Strings / Database or your custom source outside of ASP.NET MVC. No redundant dependencies and workarounds in pair with excellent performance and **.NET Standard 2.0** and **.NET Core 3.0** support.\n\n![Build Status](https://github.com/toddams/RazorLight/actions/workflows/dotnet.yml/badge.svg)\n  [![NuGet Pre Release](https://img.shields.io/nuget/vpre/RazorLight.svg?maxAge=2592000?style=flat-square)](https://www.nuget.org/packages/RazorLight/) [![NuGet downloads](https://img.shields.io/nuget/dt/RazorLight.svg)](https://www.nuget.org/packages/RazorLight/) [![Join the chat at https://gitter.im/gitterHQ/gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/Razor-Light)\n\n# Solidarity with Ukraine \n![ComeBackAlive](https://upload.wikimedia.org/wikipedia/commons/thumb/5/5d/Come_Back_Alive_Logo_09.2022.svg/1200px-Come_Back_Alive_Logo_09.2022.svg.png)\nDear friends, my name is Ivan, I am the guy who created this library. I live in Ukraine, and if you are reading this message - I really hope you and your family are safe and healthy. 24 February Russia invaded my country with a series of missle atacks across entire Ukraine, from East to West. They started with destroying military infrastructure, and so-called \"special operation\", as they call it, in fact is a full scale war against us. \n\n*Update:* it's been a long time since I first posted this message. Thank you for your enormous support, I am removing my volunteer donation account and instead providing you with the largest and proven charity organization in Ukraine - [ComeBackAlive](https://savelife.in.ua/en/donate-en/). If you have the possibility and desire to help Ukraine - that is the right place for your valuable donations. Thank you. Be safe\n\n\n\n# Table of contents\n- [Quickstart](#quickstart)\n- [Template sources](#template-sources)\n  * [Files](#file-source)\n  * [Embedded resources](#embeddedresource-source)\n  * [Database (custom)](#custom-source)\n- [Includes (aka Partial)](#includes-aka-partial-views)\n- [Encoding](#encoding)\n- [Additional metadata references](#additional-metadata-references)\n- [Enable Intellisense support](#enable-intellisense-support)\n- [FAQ](#faq)\n\n# Quickstart\nInstall the nuget package using following command:\n\n````\nInstall-Package RazorLight -Version 2.3.0\n````\n\nThe simplest scenario is to create a template from string. Each template must have a ````templateKey```` that is associated with it, so you can render the same template next time without recompilation.\n\n<!-- snippet: simple -->\n<a id='snippet-simple'></a>\n```cs\nvar engine = new RazorLightEngineBuilder()\n\t// required to have a default RazorLightProject type,\n\t// but not required to create a template from string.\n\t.UseEmbeddedResourcesProject(typeof(ViewModel))\n\t.SetOperatingAssembly(typeof(ViewModel).Assembly)\n\t.UseMemoryCachingProvider()\n\t.Build();\n\nstring template = \"Hello, @Model.Name. Welcome to RazorLight repository\";\nViewModel model = new ViewModel {Name = \"John Doe\"};\n\nstring result = await engine.CompileRenderStringAsync(\"templateKey\", template, model);\n```\n<sup><a href='/tests/RazorLight.Tests/Snippets/Snippets.cs#L18-L32' title='Snippet source file'>snippet source</a> | <a href='#snippet-simple' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\nTo render a compiled template:\n\n<!-- snippet: RenderCompiledTemplate -->\n<a id='snippet-rendercompiledtemplate'></a>\n```cs\nvar cacheResult = engine.Handler.Cache.RetrieveTemplate(\"templateKey\");\nif(cacheResult.Success)\n{\n\tvar templatePage = cacheResult.Template.TemplatePageFactory();\n\tstring result = await engine.RenderTemplateAsync(templatePage, model);\n}\n```\n<sup><a href='/tests/RazorLight.Tests/Snippets/Snippets.cs#L39-L46' title='Snippet source file'>snippet source</a> | <a href='#snippet-rendercompiledtemplate' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\n# Template sources\n\nRazorLight can resolve templates from any source, but there are a built-in providers that resolve template source from filesystem and embedded resources.\n\n## File source\n\nWhen resolving a template from filesystem, templateKey - is a relative path to the root folder, that you pass to RazorLightEngineBuilder.\n\n<!-- snippet: FileSource -->\n<a id='snippet-filesource'></a>\n```cs\nvar engine = new RazorLightEngineBuilder()\n\t.UseFileSystemProject(\"C:/RootFolder/With/YourTemplates\")\n\t.UseMemoryCachingProvider()\n\t.Build();\n\nvar model = new {Name = \"John Doe\"};\nstring result = await engine.CompileRenderAsync(\"Subfolder/View.cshtml\", model);\n```\n<sup><a href='/tests/RazorLight.Tests/Snippets/Snippets.cs#L51-L60' title='Snippet source file'>snippet source</a> | <a href='#snippet-filesource' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\n## EmbeddedResource source\n\nFor embedded resource, the key is the namespace of the project where the template exists combined with the template's file name.\n\nThe following examples are using this project structure:\n```\nProject/\n  Model.cs\n  Program.cs\n  Project.csproj\nProject.Core/\n  EmailTemplates/\n    Body.cshtml\n  Project.Core.csproj\n  SomeService.cs\n````\n\n<!-- snippet: EmbeddedResourceSource -->\n<a id='snippet-embeddedresourcesource'></a>\n```cs\nvar engine = new RazorLightEngineBuilder()\n\t.UseEmbeddedResourcesProject(typeof(SomeService).Assembly)\n\t.UseMemoryCachingProvider()\n\t.Build();\n\nvar model = new Model();\nstring html = await engine.CompileRenderAsync(\"EmailTemplates.Body\", model);\n```\n<sup><a href='/tests/RazorLight.Tests/Snippets/Snippets.cs#L65-L74' title='Snippet source file'>snippet source</a> | <a href='#snippet-embeddedresourcesource' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\nSetting the root namespace allows you to leave that piece off when providing the template name as the key:\n\n<!-- snippet: EmbeddedResourceSourceWithRootNamespace -->\n<a id='snippet-embeddedresourcesourcewithrootnamespace'></a>\n```cs\nvar engine = new RazorLightEngineBuilder()\n\t.UseEmbeddedResourcesProject(typeof(SomeService).Assembly, \"Project.Core.EmailTemplates\")\n\t.UseMemoryCachingProvider()\n\t.Build();\n\nvar model = new Model();\nstring html = await engine.CompileRenderAsync(\"Body\", model);\n```\n<sup><a href='/tests/RazorLight.Tests/Snippets/Snippets.cs#L79-L88' title='Snippet source file'>snippet source</a> | <a href='#snippet-embeddedresourcesourcewithrootnamespace' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\n## Custom source\n\nIf you store your templates in database - it is recommended to create custom RazorLightProject that is responsible for gettings templates source from it. The class will be used to get template source and ViewImports. RazorLight will use it to resolve Layouts, when you specify it inside the template.\n\n````CSharp\nvar project = new EntityFrameworkRazorProject(new AppDbContext());\nvar engine = new RazorLightEngineBuilder()\n              .UseProject(project)\n              .UseMemoryCachingProvider()\n              .Build();\n\n// For key as a GUID\nstring result = await engine.CompileRenderAsync(\"6cc277d5-253e-48e0-8a9a-8fe3cae17e5b\", new { Name = \"John Doe\" });\n\n// Or integer\nint templateKey = 322;\nstring result = await engine.CompileRenderAsync(templateKey.ToString(), new { Name = \"John Doe\" });\n````\n\nYou can find a full sample [here](https://github.com/toddams/RazorLight/tree/master/samples/RazorLight.Samples)\n\n\n# Includes (aka Partial views)\n\nInclude feature is useful when you have reusable parts of your templates you want to share between different views. Includes are an effective way of breaking up large templates into smaller components. They can reduce duplication of template content and allow elements to be reused. *This feature requires you to use the RazorLight Project system, otherwise there is no way to locate the partial.*\n\n````CSharp\n@model MyProject.TestViewModel\n<div>\n    Hello @Model.Title\n</div>\n\n@{ await IncludeAsync(\"SomeView.cshtml\", Model); }\n````\nFirst argument takes a key of the template to resolve, second argument is a model of the view (can be null)\n\n# Encoding\nBy the default RazorLight encodes Model values as HTML, but sometimes you want to output them as is. You can disable encoding for specific value using @Raw() function\n\n````CSharp\n/* With encoding (default) */\n\nstring template = \"Render @Model.Tag\";\nstring result = await engine.CompileRenderAsync(\"templateKey\", template, new { Tag = \"<html>&\" });\n\nConsole.WriteLine(result); // Output: &lt;html&gt;&amp\n\n/* Without encoding */\n\nstring template = \"Render @Raw(Model.Tag)\";\nstring result = await engine.CompileRenderAsync(\"templateKey\", template, new { Tag = \"<html>&\" });\n\nConsole.WriteLine(result); // Output: <html>&\n````\nIn order to disable encoding for the entire document - just set ````\"DisableEncoding\"```` variable to true\n````html\n@model TestViewModel\n@{\n    DisableEncoding = true;\n}\n\n<html>\n    Hello @Model.Tag\n</html>\n````\n\n# Enable Intellisense support\nVisual Studio tooling knows nothing about RazorLight and assumes, that the view you are using - is a typical ASP.NET MVC template. In order to enable Intellisense for RazorLight templates, you should give Visual Studio a little hint about the base template class, that all your templates inherit implicitly\n\n````CSharp\n@using RazorLight\n@inherits TemplatePage<MyModel>\n\n<html>\n    Your awesome template goes here, @Model.Name\n</html>\n````\n____\n![Intellisense](github/autocomplete.png)\n\n# FAQ\n\n## Coding Challenges (FAQ)\n\n### How to use templates from memory without setting a project?\n\nThe short answer is, you have to set a project to use the memory caching provider.  The project doesn't have to do anything.  This is by design, as without a project system, RazorLight cannot locate partial views.\n\n:x:\nYou used to be able to write:\n\n```c#\nvar razorEngine = new RazorLightEngineBuilder()\n.UseMemoryCachingProvider()\n.Build();\n```\n... but this now throws an exception, saying, \"`_razorLightProject cannot be null`\".\n\n:heavy_check_mark:\n```c#\nvar razorEngine = new RazorLightEngineBuilder()\n                .UseEmbeddedResourcesProject(typeof(AnyTypeInYourSolution)) // exception without this (or another project type)\n                .UseMemoryCachingProvider()\n                .Build();\n```\nAffects: RazorLight-2.0.0-beta1 and later.\n\nOriginal Issue: https://github.com/toddams/RazorLight/issues/250\n\n### How to embed an image in an email?\n\nThis isn't a RazorLight question, but please see [this StackOverflow answer](https://stackoverflow.com/a/32767496/1040437).\n\n### How to embed css in an email?\n\nThis isn't a RazorLight question, but please look into PreMailer.Net.\n\n## Compilation and Deployment Issues (FAQ)\n\nMost problems with RazorLight deal with deploying it on a new machine, in a docker container, etc.  If it works fine in your development environment, read this list of problems to see if it matches yours.\n\n### Additional metadata references\nWhen RazorLight compiles your template - it loads all the assemblies from your entry assembly and creates MetadataReference from it. This is a default strategy and it works in 99% of the time. But sometimes compilation crashes with an exception message like \"Can not find assembly My.Super.Assembly2000\". In order to solve this problem you can pass additional metadata references to RazorLight.\n\n````CSharp\nvar metadataReference = MetadataReference.CreateFromFile(\"path-to-your-assembly\")\n\n var engine = new RazorLightEngineBuilder()\n                .UseMemoryCachingProvider()\n                .AddMetadataReferences(metadataReference)\n                .Build();\n````\n\n### I'm getting errors after upgrading to ASP.NET Core 3.0 when using runtime compilation\n\nPlease see: https://docs.microsoft.com/en-us/aspnet/core/razor-pages/sdk?view=aspnetcore-3.1#use-the-razor-sdk\n\n> Starting with ASP.NET Core 3.0, MVC Views or Razor Pages aren't served by default if the `RazorCompileOnBuild` or `RazorCompileOnPublish` MSBuild properties in the project file are disabled. Applications must add an explicit reference to the `Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation` package if the app relies on runtime compilation to process .cshtml files.\n\n\n### I'm getting a Null Reference Exception after upgrading to RazorLight-2.0.0-beta2 or later.\n\nThe most common scenario is that some people were using RazorLight's ability to render raw strings as templates.  While this is still somewhat supported (you can't use advanced features like partial views), what is not supported (right now) is using the caching provider with raw strings.  A workaround is to use a dummy class.\n\n### I'm getting \"Cannot find compilation library\" when I deploy this library on another server\n\nAdd these property groups to your **entry point csproj**.\nIt has to be the entry point project.  For example: ASP.NET Core web project, .NET Core Console project, etc.\n\n````XML\n  <PropertyGroup>\n    <!-- This group contains project properties for RazorLight on .NET Core -->\n    <PreserveCompilationContext>true</PreserveCompilationContext>\n    <MvcRazorCompileOnPublish>false</MvcRazorCompileOnPublish>\n    <MvcRazorExcludeRefAssembliesFromPublish>false</MvcRazorExcludeRefAssembliesFromPublish>\n  </PropertyGroup>\n````\n\n### I'm getting \"Can't load metadata reference from the entry assembly\" exception\n\nSet PreserveCompilationContext to true in your *.csproj file's PropertyGroup tag.\n\n````XML\n<PropertyGroup>\n    ...\n    <PreserveCompilationContext>true</PreserveCompilationContext>\n</PropertyGroup>\n````\n\nAdditionally, RazorLight allows you to specifically locate any `MetadataReference` you can't find, which could happen if you're running in SCD [(Self-Contained Deployment) mode](https://docs.microsoft.com/en-us/dotnet/core/deploying/), as the C# Compiler used by RazorLight [needs to be able to locate `mscorlib.dll`](https://github.com/toddams/RazorLight/issues/188#issuecomment-523418738).  This might be a useful trick if future versions of the .NET SDK tools ship with bad MSBuild targets that somehow don't \"preserve compilation context\" and you need an immediate fix while waiting for Microsoft support.\n\n### I'm getting \"Cannot find reference assembly 'Microsoft.AspNetCore.Antiforgery.dll'\" exception on .NET Core App 3.0 or higher\n\nBy default, the 3.0 SDK avoids copying references to the build output.\nSet `PreserveCompilationReferences` and `PreserveCompilationContext` to true in your *.csproj file's PropertyGroup tag.\n\n````XML\n<PropertyGroup>\n    <PreserveCompilationReferences>true</PreserveCompilationReferences>\n    <PreserveCompilationContext>true</PreserveCompilationContext>\n</PropertyGroup>\n````\n\nFor more information, see https://github.com/aspnet/AspNetCore/issues/14418#issuecomment-535107767 (which discusses the above flags) and https://github.com/microsoft/DockerTools/issues/217#issuecomment-549453362 (which discusses that Runtime Compilation feature was marked obsolete in ASP.NET Core 2.2, and removed from the default template in ASP.NET Core 3.0).\n\n### RazorLight does not work properly on AWS Lambda or Azure Functions\n\nServerless solutions are not supported yet. However, for Azure Functions, some users have reported success on Azure Functions 3.0.3.  As of 6/3/2020, Azure Functions SDK team has acknowledged a [bug in Azure Functions `RemoveRuntimeDependencies` task](https://github.com/toddams/RazorLight/issues/306#issuecomment-636374491), affecting Azure Functions 3.0.4-3.0.6 releases.\n\nFor Azure Functions 3.0.4-3.0.5, the known workaround is to disable \"Azure Functions dependency trimming\".  To disable dependency trimming, add the following to your root / entrypoint project:\n\n```xml\n<PropertyGroup>\n  <_FunctionsSkipCleanOutput>true</_FunctionsSkipCleanOutput>\n</PropertyGroup>\n```\n\nIn addition, Azure Functions has an open pull request outstanding to update `runtimeAssemblies.json`: https://github.com/Azure/azure-functions-vs-build-sdk/issues/422\n\n## Unsupported Scenarios\n\n### RazorLight does not work with ASP.NET Core Integration Testing\n\nRazorLight is not currently designed to support such integration tests.  If you need to test your RazorLight tests, current recommendation is to simply create a project called `<YourCompanyName>.<YourProjectName>.Templating` and write your template rendering layer as a Domain Service, and write tests against that service.  Then, you can mock in your integration tests any dependencies on RazorLight.\n\nIf you happen to get this working, please let us know what you did.\n"
        },
        {
          "name": "README.source.md",
          "type": "blob",
          "size": 13.212890625,
          "content": "# RazorLight\n\nUse Razor to build templates from Files / EmbeddedResources / Strings / Database or your custom source outside of ASP.NET MVC. No redundant dependencies and workarounds in pair with excellent performance and **.NET Standard 2.0** and **.NET Core 3.0** support.\n\n![Build Status](https://github.com/toddams/RazorLight/actions/workflows/dotnet.yml/badge.svg)\n[![NuGet Pre Release](https://img.shields.io/nuget/vpre/RazorLight.svg?maxAge=2592000?style=flat-square)](https://www.nuget.org/packages/RazorLight/) [![NuGet downloads](https://img.shields.io/nuget/dt/RazorLight.svg)](https://www.nuget.org/packages/RazorLight/) [![Join the chat at https://gitter.im/gitterHQ/gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/Razor-Light)\n\n# Solidarity with Ukraine \n![ComeBackAlive](https://upload.wikimedia.org/wikipedia/commons/thumb/5/5d/Come_Back_Alive_Logo_09.2022.svg/1200px-Come_Back_Alive_Logo_09.2022.svg.png)\nDear friends, my name is Ivan, I am the guy who created this library. I live in Ukraine, and if you are reading this message - I really hope you and your family are safe and healthy. 24 February Russia invaded my country with a series of missle atacks across entire Ukraine, from East to West. They started with destroying military infrastructure, and so-called \"special operation\", as they call it, in fact is a full scale war against us. \n\n*Update:* it's been a long time since I first posted this message. Thank you for your enormous support, I am removing my volunteer donation account and instead providing you with the largest and proven charity organization in Ukraine - [ComeBackAlive](https://savelife.in.ua/en/donate-en/). If you have the possibility and desire to help Ukraine - that is the right place for your valuable donations. Thank you. Be safe\n\n# Table of contents\n- [Quickstart](#quickstart)\n- [Template sources](#template-sources)\n  * [Files](#file-source)\n  * [Embedded resources](#embeddedresource-source)\n  * [Database (custom)](#custom-source)\n- [Includes (aka Partial)](#includes-aka-partial-views)\n- [Encoding](#encoding)\n- [Additional metadata references](#additional-metadata-references)\n- [Enable Intellisense support](#enable-intellisense-support)\n- [FAQ](#faq)\n\n# Quickstart\nInstall the nuget package using following command:\n\n````\nInstall-Package RazorLight -Version 2.3.0\n````\n\nThe simplest scenario is to create a template from string. Each template must have a ````templateKey```` that is associated with it, so you can render the same template next time without recompilation.\n\nsnippet: simple\n\nTo render a compiled template:\n\nsnippet: RenderCompiledTemplate\n\n# Template sources\n\nRazorLight can resolve templates from any source, but there are a built-in providers that resolve template source from filesystem and embedded resources.\n\n## File source\n\nWhen resolving a template from filesystem, templateKey - is a relative path to the root folder, that you pass to RazorLightEngineBuilder.\n\nsnippet: FileSource\n\n## EmbeddedResource source\n\nFor embedded resource, the key is the namespace of the project where the template exists combined with the template's file name.\n\nThe following examples are using this project structure:\n```\nProject/\n  Model.cs\n  Program.cs\n  Project.csproj\nProject.Core/\n  EmailTemplates/\n    Body.cshtml\n  Project.Core.csproj\n  SomeService.cs\n````\n\nsnippet: EmbeddedResourceSource\n\nSetting the root namespace allows you to leave that piece off when providing the template name as the key:\n\nsnippet: EmbeddedResourceSourceWithRootNamespace\n\n## Custom source\n\nIf you store your templates in database - it is recommended to create custom RazorLightProject that is responsible for gettings templates source from it. The class will be used to get template source and ViewImports. RazorLight will use it to resolve Layouts, when you specify it inside the template.\n\n````CSharp\nvar project = new EntityFrameworkRazorProject(new AppDbContext());\nvar engine = new RazorLightEngineBuilder()\n              .UseProject(project)\n              .UseMemoryCachingProvider()\n              .Build();\n\n// For key as a GUID\nstring result = await engine.CompileRenderAsync(\"6cc277d5-253e-48e0-8a9a-8fe3cae17e5b\", new { Name = \"John Doe\" });\n\n// Or integer\nint templateKey = 322;\nstring result = await engine.CompileRenderAsync(templateKey.ToString(), new { Name = \"John Doe\" });\n````\n\nYou can find a full sample [here](https://github.com/toddams/RazorLight/tree/master/samples/RazorLight.Samples)\n\n\n# Includes (aka Partial views)\n\nInclude feature is useful when you have reusable parts of your templates you want to share between different views. Includes are an effective way of breaking up large templates into smaller components. They can reduce duplication of template content and allow elements to be reused. *This feature requires you to use the RazorLight Project system, otherwise there is no way to locate the partial.*\n\n````CSharp\n@model MyProject.TestViewModel\n<div>\n    Hello @Model.Title\n</div>\n\n@{ await IncludeAsync(\"SomeView.cshtml\", Model); }\n````\nFirst argument takes a key of the template to resolve, second argument is a model of the view (can be null)\n\n# Encoding\nBy the default RazorLight encodes Model values as HTML, but sometimes you want to output them as is. You can disable encoding for specific value using @Raw() function\n\n````CSharp\n/* With encoding (default) */\n\nstring template = \"Render @Model.Tag\";\nstring result = await engine.CompileRenderAsync(\"templateKey\", template, new { Tag = \"<html>&\" });\n\nConsole.WriteLine(result); // Output: &lt;html&gt;&amp\n\n/* Without encoding */\n\nstring template = \"Render @Raw(Model.Tag)\";\nstring result = await engine.CompileRenderAsync(\"templateKey\", template, new { Tag = \"<html>&\" });\n\nConsole.WriteLine(result); // Output: <html>&\n````\nIn order to disable encoding for the entire document - just set ````\"DisableEncoding\"```` variable to true\n````html\n@model TestViewModel\n@{\n    DisableEncoding = true;\n}\n\n<html>\n    Hello @Model.Tag\n</html>\n````\n\n# Enable Intellisense support\nVisual Studio tooling knows nothing about RazorLight and assumes, that the view you are using - is a typical ASP.NET MVC template. In order to enable Intellisense for RazorLight templates, you should give Visual Studio a little hint about the base template class, that all your templates inherit implicitly\n\n````CSharp\n@using RazorLight\n@inherits TemplatePage<MyModel>\n\n<html>\n    Your awesome template goes here, @Model.Name\n</html>\n````\n____\n![Intellisense](github/autocomplete.png)\n\n# FAQ\n\n## Coding Challenges (FAQ)\n\n### How to use templates from memory without setting a project?\n\nThe short answer is, you have to set a project to use the memory caching provider.  The project doesn't have to do anything.  This is by design, as without a project system, RazorLight cannot locate partial views.\n\n:x:\nYou used to be able to write:\n\n```c#\nvar razorEngine = new RazorLightEngineBuilder()\n.UseMemoryCachingProvider()\n.Build();\n```\n... but this now throws an exception, saying, \"`_razorLightProject cannot be null`\".\n\n:heavy_check_mark:\n```c#\nvar razorEngine = new RazorLightEngineBuilder()\n                .UseEmbeddedResourcesProject(typeof(AnyTypeInYourSolution)) // exception without this (or another project type)\n                .UseMemoryCachingProvider()\n                .Build();\n```\nAffects: RazorLight-2.0.0-beta1 and later.\n\nOriginal Issue: https://github.com/toddams/RazorLight/issues/250\n\n### How to embed an image in an email?\n\nThis isn't a RazorLight question, but please see [this StackOverflow answer](https://stackoverflow.com/a/32767496/1040437).\n\n### How to embed css in an email?\n\nThis isn't a RazorLight question, but please look into PreMailer.Net.\n\n## Compilation and Deployment Issues (FAQ)\n\nMost problems with RazorLight deal with deploying it on a new machine, in a docker container, etc.  If it works fine in your development environment, read this list of problems to see if it matches yours.\n\n### Additional metadata references\nWhen RazorLight compiles your template - it loads all the assemblies from your entry assembly and creates MetadataReference from it. This is a default strategy and it works in 99% of the time. But sometimes compilation crashes with an exception message like \"Can not find assembly My.Super.Assembly2000\". In order to solve this problem you can pass additional metadata references to RazorLight.\n\n````CSharp\nvar metadataReference = MetadataReference.CreateFromFile(\"path-to-your-assembly\")\n\n var engine = new RazorLightEngineBuilder()\n                .UseMemoryCachingProvider()\n                .AddMetadataReferences(metadataReference)\n                .Build();\n````\n\n### I'm getting errors after upgrading to ASP.NET Core 3.0 when using runtime compilation\n\nPlease see: https://docs.microsoft.com/en-us/aspnet/core/razor-pages/sdk?view=aspnetcore-3.1#use-the-razor-sdk\n\n> Starting with ASP.NET Core 3.0, MVC Views or Razor Pages aren't served by default if the `RazorCompileOnBuild` or `RazorCompileOnPublish` MSBuild properties in the project file are disabled. Applications must add an explicit reference to the `Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation` package if the app relies on runtime compilation to process .cshtml files.\n\n\n### I'm getting a Null Reference Exception after upgrading to RazorLight-2.0.0-beta2 or later.\n\nThe most common scenario is that some people were using RazorLight's ability to render raw strings as templates.  While this is still somewhat supported (you can't use advanced features like partial views), what is not supported (right now) is using the caching provider with raw strings.  A workaround is to use a dummy class.\n\n### I'm getting \"Cannot find compilation library\" when I deploy this library on another server\n\nAdd these property groups to your **entry point csproj**.\nIt has to be the entry point project.  For example: ASP.NET Core web project, .NET Core Console project, etc.\n\n````XML\n  <PropertyGroup>\n    <!-- This group contains project properties for RazorLight on .NET Core -->\n    <PreserveCompilationContext>true</PreserveCompilationContext>\n    <MvcRazorCompileOnPublish>false</MvcRazorCompileOnPublish>\n    <MvcRazorExcludeRefAssembliesFromPublish>false</MvcRazorExcludeRefAssembliesFromPublish>\n  </PropertyGroup>\n````\n\n### I'm getting \"Can't load metadata reference from the entry assembly\" exception\n\nSet PreserveCompilationContext to true in your *.csproj file's PropertyGroup tag.\n\n````XML\n<PropertyGroup>\n    ...\n    <PreserveCompilationContext>true</PreserveCompilationContext>\n</PropertyGroup>\n````\n\nAdditionally, RazorLight allows you to specifically locate any `MetadataReference` you can't find, which could happen if you're running in SCD [(Self-Contained Deployment) mode](https://docs.microsoft.com/en-us/dotnet/core/deploying/), as the C# Compiler used by RazorLight [needs to be able to locate `mscorlib.dll`](https://github.com/toddams/RazorLight/issues/188#issuecomment-523418738).  This might be a useful trick if future versions of the .NET SDK tools ship with bad MSBuild targets that somehow don't \"preserve compilation context\" and you need an immediate fix while waiting for Microsoft support.\n\n### I'm getting \"Cannot find reference assembly 'Microsoft.AspNetCore.Antiforgery.dll'\" exception on .NET Core App 3.0 or higher\n\nBy default, the 3.0 SDK avoids copying references to the build output.\nSet `PreserveCompilationReferences` and `PreserveCompilationContext` to true in your *.csproj file's PropertyGroup tag.\n\n````XML\n<PropertyGroup>\n    <PreserveCompilationReferences>true</PreserveCompilationReferences>\n    <PreserveCompilationContext>true</PreserveCompilationContext>\n</PropertyGroup>\n````\n\nFor more information, see https://github.com/aspnet/AspNetCore/issues/14418#issuecomment-535107767 (which discusses the above flags) and https://github.com/microsoft/DockerTools/issues/217#issuecomment-549453362 (which discusses that Runtime Compilation feature was marked obsolete in ASP.NET Core 2.2, and removed from the default template in ASP.NET Core 3.0).\n\n### RazorLight does not work properly on AWS Lambda or Azure Functions\n\nServerless solutions are not supported yet. However, for Azure Functions, some users have reported success on Azure Functions 3.0.3.  As of 6/3/2020, Azure Functions SDK team has acknowledged a [bug in Azure Functions `RemoveRuntimeDependencies` task](https://github.com/toddams/RazorLight/issues/306#issuecomment-636374491), affecting Azure Functions 3.0.4-3.0.6 releases.\n\nFor Azure Functions 3.0.4-3.0.5, the known workaround is to disable \"Azure Functions dependency trimming\".  To disable dependency trimming, add the following to your root / entrypoint project:\n\n```xml\n<PropertyGroup>\n  <_FunctionsSkipCleanOutput>true</_FunctionsSkipCleanOutput>\n</PropertyGroup>\n```\n\nIn addition, Azure Functions has an open pull request outstanding to update `runtimeAssemblies.json`: https://github.com/Azure/azure-functions-vs-build-sdk/issues/422\n\n## Unsupported Scenarios\n\n### RazorLight does not work with ASP.NET Core Integration Testing\n\nRazorLight is not currently designed to support such integration tests.  If you need to test your RazorLight tests, current recommendation is to simply create a project called `<YourCompanyName>.<YourProjectName>.Templating` and write your template rendering layer as a Domain Service, and write tests against that service.  Then, you can mock in your integration tests any dependencies on RazorLight.\n\nIf you happen to get this working, please let us know what you did.\n"
        },
        {
          "name": "RazorLight.sln",
          "type": "blob",
          "size": 5.7705078125,
          "content": "﻿\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio Version 17\r\nVisualStudioVersion = 17.2.32616.157\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"src\", \"src\", \"{25F57564-58FD-4FD2-8CDA-98261E5BEEEC}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"tests\", \"tests\", \"{CDB1D407-71F7-44D6-8B35-F0013D1717A6}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"RazorLight\", \"src\\RazorLight\\RazorLight.csproj\", \"{CA780663-2714-43B0-89BC-BEB26BC5405A}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"sandbox\", \"sandbox\", \"{D8281EA5-1C64-4C9F-9537-967D685C1918}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"RazorLight.Sandbox\", \"sandbox\\RazorLight.Sandbox\\RazorLight.Sandbox.csproj\", \"{DC81E072-5571-4E4A-A7EC-4122BF4A012E}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"RazorLight.Tests\", \"tests\\RazorLight.Tests\\RazorLight.Tests.csproj\", \"{63EE1F3F-C71E-48DA-8135-9E602D6B7206}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"samples\", \"samples\", \"{61D04B29-43F8-4FE3-A12E-BB16743BFB65}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Samples.EntityFrameworkProject\", \"samples\\RazorLight.Samples\\Samples.EntityFrameworkProject.csproj\", \"{C9B26DF6-F8E6-481A-B497-C8999641A99D}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"RazorLight.Precompile\", \"src\\RazorLight.Precompile\\RazorLight.Precompile.csproj\", \"{AD9A02F6-8078-4DFF-AFA6-4DE8674D5C76}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"External\", \"External\", \"{634B4E56-928A-4132-AB3F-F2DD43756350}\"\r\n\tProjectSection(SolutionItems) = preProject\r\n\t\t.editorconfig = .editorconfig\r\n\t\tLICENSE = LICENSE\r\n\t\tREADME.md = README.md\r\n\t\tREADME.source.md = README.source.md\r\n\tEndProjectSection\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Build\", \"Build\", \"{DF8F9896-63C0-43AC-8834-1D13AA095928}\"\r\n\tProjectSection(SolutionItems) = preProject\r\n\t\tDirectory.Build.props = Directory.Build.props\r\n\t\t.github\\workflows\\dotnet.yml = .github\\workflows\\dotnet.yml\r\n\tEndProjectSection\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Publish\", \"Publish\", \"{03C519A7-C5B1-4421-893B-D2995D4A92BC}\"\r\n\tProjectSection(SolutionItems) = preProject\r\n\t\tmakeNuget.cmd = makeNuget.cmd\r\n\tEndProjectSection\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{EC25D85F-CCCC-43E1-AACD-2D710C1B760B}\"\r\n\tProjectSection(SolutionItems) = preProject\r\n\t\t.editorconfig = .editorconfig\r\n\tEndProjectSection\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"RazorLight.Precompile.Tests\", \"tests\\RazorLight.Precompile.Tests\\RazorLight.Precompile.Tests.csproj\", \"{C9BA26CD-C20E-493C-A55A-C5498778184B}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{CA780663-2714-43B0-89BC-BEB26BC5405A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{CA780663-2714-43B0-89BC-BEB26BC5405A}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{CA780663-2714-43B0-89BC-BEB26BC5405A}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{CA780663-2714-43B0-89BC-BEB26BC5405A}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{DC81E072-5571-4E4A-A7EC-4122BF4A012E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{DC81E072-5571-4E4A-A7EC-4122BF4A012E}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{DC81E072-5571-4E4A-A7EC-4122BF4A012E}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{DC81E072-5571-4E4A-A7EC-4122BF4A012E}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{63EE1F3F-C71E-48DA-8135-9E602D6B7206}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{63EE1F3F-C71E-48DA-8135-9E602D6B7206}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{63EE1F3F-C71E-48DA-8135-9E602D6B7206}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{63EE1F3F-C71E-48DA-8135-9E602D6B7206}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{C9B26DF6-F8E6-481A-B497-C8999641A99D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{C9B26DF6-F8E6-481A-B497-C8999641A99D}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{C9B26DF6-F8E6-481A-B497-C8999641A99D}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{C9B26DF6-F8E6-481A-B497-C8999641A99D}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{AD9A02F6-8078-4DFF-AFA6-4DE8674D5C76}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{AD9A02F6-8078-4DFF-AFA6-4DE8674D5C76}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{AD9A02F6-8078-4DFF-AFA6-4DE8674D5C76}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{AD9A02F6-8078-4DFF-AFA6-4DE8674D5C76}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{C9BA26CD-C20E-493C-A55A-C5498778184B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{C9BA26CD-C20E-493C-A55A-C5498778184B}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{C9BA26CD-C20E-493C-A55A-C5498778184B}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{C9BA26CD-C20E-493C-A55A-C5498778184B}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(NestedProjects) = preSolution\r\n\t\t{CA780663-2714-43B0-89BC-BEB26BC5405A} = {25F57564-58FD-4FD2-8CDA-98261E5BEEEC}\r\n\t\t{DC81E072-5571-4E4A-A7EC-4122BF4A012E} = {D8281EA5-1C64-4C9F-9537-967D685C1918}\r\n\t\t{63EE1F3F-C71E-48DA-8135-9E602D6B7206} = {CDB1D407-71F7-44D6-8B35-F0013D1717A6}\r\n\t\t{C9B26DF6-F8E6-481A-B497-C8999641A99D} = {61D04B29-43F8-4FE3-A12E-BB16743BFB65}\r\n\t\t{AD9A02F6-8078-4DFF-AFA6-4DE8674D5C76} = {25F57564-58FD-4FD2-8CDA-98261E5BEEEC}\r\n\t\t{C9BA26CD-C20E-493C-A55A-C5498778184B} = {CDB1D407-71F7-44D6-8B35-F0013D1717A6}\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {590C5541-E5A7-41ED-AFC7-D4A52E594191}\r\n\tEndGlobalSection\r\nEndGlobal\r\n"
        },
        {
          "name": "github",
          "type": "tree",
          "content": null
        },
        {
          "name": "makeNuget.cmd",
          "type": "blob",
          "size": 0.1484375,
          "content": "@Echo off\nIF \"%1\" == \"%2\" dotnet pack --no-build --configuration %1 -o %3\nRem Alternatively, run this:\nRem dotnet pack --configuration Release -o .\\pack"
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "sandbox",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}