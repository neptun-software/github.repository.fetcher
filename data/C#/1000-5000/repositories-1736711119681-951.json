{
  "metadata": {
    "timestamp": 1736711119681,
    "page": 951,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zzzprojects/EntityFramework.Extended",
      "stars": 1336,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.66796875,
          "content": "* text=auto\n\n*.doc diff=astextplain\n*.DOC diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot diff=astextplain\n*.DOT diff=astextplain\n*.pdf diff=astextplain\n*.PDF diff=astextplain\n*.rtf diff=astextplain\n*.RTF diff=astextplain\n\n*.bmp binary\n*.gif binary\n*.jpg binary\n*.png binary\n\n*.ascx text\n*.cmd text\n*.coffee text\n*.config text\n*.cs text diff=csharp \n*.csproj text merge=union \n*.css text\n*.cshtml text\n*.htm text\n*.html text\n*.htm text\n*.js text\n*.msbuild text\n*.resx text merge=union\n*.ruleset text\n*.Stylecop text\n*.targets text\n*.tt text\n*.txt text\n*.vb text\n*.vbhtml text\n*.vbproj text merge=union \n*.xml text\n*.xunit text\n\n*.sln text eol=crlf merge=union \n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.123046875,
          "content": "[Bb]in\n[Oo]bj\npackages\n[Bb]uild\nTestResults\n*.suo\n*.user\n*.[Cc]ache\n*[Rr]esharper*\n*.zip\n*.nupkg\n*.msi\n*.chm\n*.txt\n/xunit.xml\n"
        },
        {
          "name": "Database",
          "type": "tree",
          "content": null
        },
        {
          "name": "License.txt",
          "type": "blob",
          "size": 1.419921875,
          "content": "Copyright (c) 2012, LoreSoft\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of LoreSoft nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "Master.proj",
          "type": "blob",
          "size": 6.8330078125,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n\n  <PropertyGroup>\n    <BuildFolder>$(MSBuildProjectDirectory)\\Build</BuildFolder>\n    <ToolFolder>$(MSBuildProjectDirectory)\\Tools</ToolFolder>\n    <SourceFolder>$(MSBuildProjectDirectory)\\Source</SourceFolder>\n\n    <MSBuildCommunityTasksPath>$(ToolFolder)\\MSBuildTasks\\tools</MSBuildCommunityTasksPath>\n    <XUnitTasksPath>$(ToolFolder)\\xunit.runners\\tools</XUnitTasksPath>\n  </PropertyGroup>\n\n  <Import Project=\"$(MSBuildCommunityTasksPath)\\MSBuild.Community.Tasks.targets\"/>\n\n  <!-- Version Number -->\n  <PropertyGroup>\n    <BuildNumber Condition=\" '$(APPVEYOR_BUILD_NUMBER)' != '' \">$(APPVEYOR_BUILD_NUMBER)</BuildNumber>\n    <BuildNumber Condition=\" '$(BUILD_NUMBER)' != '' \">$(BUILD_NUMBER)</BuildNumber>\n    <BuildNumber Condition=\" '$(BuildNumber)' == '' \">0</BuildNumber>\n\n    <BuildConfiguration  Condition=\" '$(BuildConfiguration)' == '' \">Release</BuildConfiguration>\n\n    <Major Condition=\" '$(Major)' == '' \">6</Major>\n    <Minor Condition=\" '$(Minor)' == '' \">1</Minor>\n    <Revision Condition=\" '$(Revision)' == '' \">0</Revision>\n\n    <AssemblyVersion>$(Major).0.0.0</AssemblyVersion>\n    <AssemblyFileVersion>$(Major).$(Minor).$(Revision).$(BuildNumber)</AssemblyFileVersion>\n    <AssemblyInformationalVersion>$(Major).$(Minor).$(Revision).$(BuildNumber)</AssemblyInformationalVersion>\n    <PackageVersion>$(Major).$(Minor).$(Revision).$(BuildNumber)</PackageVersion>\n  </PropertyGroup>\n\n  <Target Name=\"Clean\">\n    <DeleteTree Directories=\"**\\obj\\**;**\\bin\\**\" />\n    <DeleteTree Directories=\"$(BuildFolder)\" ContinueOnError=\"true\" />\n  </Target>\n\n  <Target Name=\"Version\">\n    <Time>\n      <Output TaskParameter=\"Year\" PropertyName=\"Year\" />\n    </Time>\n\n    <Message Text=\"Version: $(Major).$(Minor).$(Build).$(Revision)\"/>\n\n    <AssemblyInfo CodeLanguage=\"CS\"\n                  OutputFile=\"Source\\GlobalAssemblyInfo.net45.cs\"\n                  AssemblyProduct=\"EntityFramework.Extended (.NET 4.5)\"\n                  AssemblyDescription=\"Entity Framework extensions library. Built for .NET 4.5\"\n                  AssemblyCompany=\"LoreSoft\"\n                  AssemblyCopyright=\"Copyright © $(Year) LoreSoft\"\n                  AssemblyVersion=\"$(AssemblyVersion)\"\n                  AssemblyFileVersion=\"$(AssemblyFileVersion)\"\n                  AssemblyInformationalVersion=\"$(AssemblyInformationalVersion)\"\n                  GenerateClass=\"true\" />\n\n    <AssemblyInfo CodeLanguage=\"CS\"\n                  OutputFile=\"Source\\GlobalAssemblyInfo.net40.cs\"\n                  AssemblyProduct=\"EntityFramework.Extended (.NET 4.0)\"\n                  AssemblyDescription=\"Entity Framework extensions library. Built for .NET 4.0\"\n                  AssemblyCompany=\"LoreSoft\"\n                  AssemblyCopyright=\"Copyright © $(Year) LoreSoft\"\n                  AssemblyVersion=\"$(AssemblyVersion)\"\n                  AssemblyFileVersion=\"$(AssemblyFileVersion)\"\n                  AssemblyInformationalVersion=\"$(AssemblyInformationalVersion)\"\n                  GenerateClass=\"true\" />\n  </Target>\n\n  <Target Name=\"Compile\" DependsOnTargets=\"Clean;Version\">\n\n    <NuGetRestore Solution=\"$(SourceFolder)\\EntityFramework.Extended.net45.sln\" />\n    <MSBuild Projects=\"$(SourceFolder)\\EntityFramework.Extended.net45.sln\"\n             Properties=\"Configuration=$(BuildConfiguration)\"/>\n\n    <NuGetRestore Solution=\"$(SourceFolder)\\EntityFramework.Extended.net40.sln\" />\n    <MSBuild Projects=\"$(SourceFolder)\\EntityFramework.Extended.net40.sln\"\n             Properties=\"Configuration=$(BuildConfiguration)\"/>\n  </Target>\n\n  <Target Name=\"Zip\" DependsOnTargets=\"Compile\">\n    <ItemGroup>\n      <ZipFiles Include=\"$(SourceFolder)\\EntityFramework.Extended\\bin\\$(BuildConfiguration)\\**\\EntityFramework.Extended.*\" />\n    </ItemGroup>\n\n    <Zip Files=\"@(ZipFiles)\"\n         WorkingDirectory=\"$(SourceFolder)\\EntityFramework.Extended\\bin\\$(BuildConfiguration)\"\n         ZipFileName=\"EntityFramework.Extended.v$(PackageVersion).zip\" />\n  </Target>\n\n  <Target Name=\"Test\" DependsOnTargets=\"Compile\">\n    <ItemGroup>\n      <TestAssemblies Include=\"$(SourceFolder)\\**\\*.Test\\bin\\$(BuildConfiguration)\\**\\*.Test.dll\"/>\n    </ItemGroup>\n\n    <exec Condition=\" '$(APPVEYOR_BUILD_NUMBER)' != '' \"\n          Command=\"$(ToolFolder)\\ctt.exe s:&quot;%(TestAssemblies.Identity).config&quot; t:&quot;$(SourceFolder)\\%(TestAssemblies.RecursiveDir)App.AppVeyor.config&quot; d:&quot;%(TestAssemblies.Identity).config&quot; pw\"/>\n\n    <exec Condition=\" '$(APPVEYOR_BUILD_NUMBER)' != '' \"\n          Command=\"xunit.console.clr4.x86.exe &quot;%(TestAssemblies.Identity)&quot; /appveyor\"/>\n\n    <exec Condition=\" '$(APPVEYOR_BUILD_NUMBER)' == '' \"\n          Command=\"$(XUnitTasksPath)\\xunit.console.clr4.x86.exe &quot;%(TestAssemblies.Identity)&quot;\"/>\n  </Target>\n\n  <Target Name=\"Package\" DependsOnTargets=\"Test\">\n    <MakeDir Directories=\"$(BuildFolder)\" Condition=\"!EXISTS($(BuildFolder))\" />\n\n    <ItemGroup>\n      <NuGetFiles Include=\"$(SourceFolder)\\**\\*.nuspec\"/>\n    </ItemGroup>\n\n    <NuGetPack ToolPath=\"$(ToolFolder)\"\n               File=\"%(NuGetFiles.Identity)\"\n               OutputDirectory=\"$(BuildFolder)\"\n               Version=\"$(PackageVersion)\"\n               Symbols=\"true\"  />\n  </Target>\n\n  <Target Name=\"Publish\" DependsOnTargets=\"Package\">\n\n    <!-- \n      Requires API key to be set ...\n      nuget.exe setapikey <myget-key> -Source https://www.myget.org/F/loresoft/\n    -->\n\n    <ItemGroup>\n      <NuGetPackages Include=\"$(BuildFolder)\\*.nupkg\" Exclude=\"$(BuildFolder)\\*.symbols.nupkg\"/>\n      <NuGetSymbols Include=\"$(BuildFolder)\\*.symbols.nupkg\" />\n    </ItemGroup>\n\n    <!-- Push to MyGet on Build -->\n    <NuGetPush ToolPath=\"$(ToolFolder)\"\n               File=\"%(NuGetPackages.Identity)\"\n               Source=\"https://www.myget.org/F/loresoft/\" />\n\n    <!-- Push to Symbols on Build -->\n    <NuGetPush ToolPath=\"$(ToolFolder)\"\n               File=\"%(NuGetSymbols.Identity)\"\n               Source=\"https://nuget.symbolsource.org/MyGet/loresoft\" />\n\n  </Target>\n\n  <Target Name=\"Build\">\n    <CallTarget Targets=\"Package\" />\n  </Target>\n\n  <Target Name=\"Refresh\">\n    <!-- Update NuGet dependencies to match package version -->\n\n    <!-- EntityFramework -->\n    <XmlRead XmlFileName=\"$(SourceFolder)\\EntityFramework.Extended\\packages.config\"\n             XPath=\"/packages/package[@id='EntityFramework']/@version\">\n      <Output TaskParameter=\"Value\" ItemName=\"EntityFrameworkVersion\" />\n    </XmlRead>\n\n    <Message Text=\"EntityFramework Version: @(EntityFrameworkVersion)\"/>\n\n    <XmlUpdate XmlFileName=\"$(SourceFolder)\\EntityFramework.Extended\\EntityFramework.Extended.nuspec\"\n               Prefix=\"d\" Namespace=\"http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd\"\n               XPath=\"/d:package/d:metadata/d:dependencies/d:dependency[@id='EntityFramework']/@version\"\n               Value=\"@(EntityFrameworkVersion)\" />\n\n  </Target>\n\n</Project>"
        },
        {
          "name": "Source",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.49609375,
          "content": "version: 6.1.0.{build}\n\nos: Windows Server 2012\n\nenvironment:\n  Major: 6\n  Minor: 1\n  Revision: 0\n    \nservices:\n  - mssql2014\n  \nbefore_build:\n  - cmd: \"\\\"C:\\\\Program Files (x86)\\\\Microsoft SQL Server\\\\120\\\\DAC\\\\bin\\\\SqlPackage.exe\\\" /a:Publish /sf:\\\"%APPVEYOR_BUILD_FOLDER%\\\\Database\\\\SqlServer\\\\Tracker.dacpac\\\" /tcs:\\\"Data Source=(local)\\\\SQL2014;Initial Catalog=Tracker;User ID=sa;Password=Password12!\\\"\"\n\nbuild:\n  project: Master.proj\n  verbosity: normal\n\n\ntest: off\n\nartifacts:\n  - path: Build\\*.nupkg"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 8.515625,
          "content": "## Library Powered By\n\nThis library is powered by [Entity Framework Extensions](https://entityframework-extensions.net/?z=github&y=entityframework-plus)\n\n<a href=\"https://entityframework-extensions.net/?z=github&y=entityframework-plus\">\n<kbd>\n<img src=\"https://zzzprojects.github.io/images/logo/entityframework-extensions-pub.jpg\" alt=\"Entity Framework Extensions\" />\n</kbd>\n</a>\n\n---\n\n**IMPORTANT:** This library is no longer supported since 2015. \n\nWe highly recommend you to move to:\n- [Entity Framework Extensions](https://entityframework-extensions.net/?z=ef-extended) for pro features\n- [Entity Framework Plus](https://entityframework-plus.net/?z=ef-extended) for free features\n\n### Entity Framework Extensions\nWebsite: [https://entityframework-extensions.net/](https://entityframework-extensions.net/?z=ef-extended)\n\nPaid library to dramatically improve Entity Framework performance:\n\n- BulkSaveChanges\n- BulkInsert\n- BulkUpdate\n- BulkDelete\n- BulkMerge\n- BulkSynchronize\n\n### Entity Framework Plus\nWebsite: [https://entityframework-plus.net/](https://entityframework-plus.net/?z=ef-extended)\n\nFree & Open source library that support following features:\n\n- Audit\n- Batch Operations\n    - Batch Delete\n    - Batch Update\n- Query\n    - Query Cache \n    - Query Deferred\n    - Query Filter\n    - Query Future\n    - Query IncludeFilter\n    - Query IncludeOptimized\n\n# What's Entity Framework Extended? \n\n## Download\n\nThe Entity Framework Extended library is available on nuget.org via package name `EntityFramework.Extended`.\n\nTo install EntityFramework.Extended, run the following command in the Package Manager Console.\n\n    PM> Install-Package EntityFramework.Extended\n    \n## Features\n\n- [Batch Update and Delete](https://entityframework-plus.net/ef-core-batch-update)\n- [Future Queries](https://entityframework-plus.net/ef-core-query-future)\n- [Query Result Cache](https://entityframework-plus.net/ef-core-query-cache)\n- [Audit Log](https://entityframework-plus.net/ef-core-audit)\n \n### Batch Update and Delete\n\nThe Entity Framework's current limitation is that you have first to retrieve it into memory to update or delete an entity. Now in most scenarios, this is just fine. There are, however, some scenarios where performance would suffer. Also, the object must be retrieved for single deletes before it can be deleted, requiring two calls to the database. Batch update and delete eliminate the need to retrieve and load an entity before modifying it.\n\n**Deleting**\n    \n    //delete all users where FirstName matches\n    context.Users\n        .Where(u => u.FirstName == \"firstname\")\n        .Delete();\n\n**Update**\n    \n    //update all tasks with status of 1 to status of 2\n    context.Tasks\n        .Where(t => t.StatusId == 1)\n        .Update(t => new Task { StatusId = 2 });\n    \n    //example of using an IQueryable as the filter for the update\n    var users = context.Users.Where(u => u.FirstName == \"firstname\");\n    context.Users.Update(users, u => new User {FirstName = \"newfirstname\"});\n\n### Future Queries\n\nBuild up a list of queries for the data that you need, and the first time any of the results are accessed, all the data will retrieved in one round trip to the database server. Reducing the number of trips to the database is a great. Using this feature is as simple as appending `.Future()` to the end of your queries to use the Future Queries. \n\nFuture queries are created with the following extension methods:\n\n- Future()\n- FutureFirstOrDefault()\n- FutureCount()\n\nSample\n\n    // build up queries\n    var q1 = db.Users\n        .Where(t => t.EmailAddress == \"one@test.com\")\n        .Future();\n    \n    var q2 = db.Tasks\n        .Where(t => t.Summary == \"Test\")\n        .Future();\n    \n    // this triggers the loading of all the future queries\n    var users = q1.ToList();\n\nIn the example above, there are two queries built up. As soon as one of the queries is enumerated, it triggers the batch load of both queries.\n     \n    // base query\n    var q = db.Tasks.Where(t => t.Priority == 2);\n    // get total count\n    var q1 = q.FutureCount();\n    // get page\n    var q2 = q.Skip(pageIndex).Take(pageSize).Future();\n    \n    // triggers execute as a batch\n    int total = q1.Value;\n    var tasks = q2.ToList();\n    \nIn this example, we have a common scenario where you want to page a list of tasks. For the GUI to set up the paging control, you need a total count. With Future, we can batch together the queries to get all the data in one database call.\n\nFuture queries work by creating the appropriate IFutureQuery object that keeps the IQuerable. The IFutureQuery object is then stored in IFutureContext.FutureQueries list. Then, when one of the IFutureQuery objects is enumerated, it calls back to IFutureContext.ExecuteFutureQueries() via the LoadAction delegate. ExecuteFutureQueries builds a batch query from all the stored IFutureQuery objects. Finally, all the IFutureQuery objects are updated with the results from the query.\n\n### Query Result Cache\n\nTo cache query results, use the `FromCache` extension method. Below is a caching query result. Construct the LINQ query as you normally would, then append the `FromCache` extension.\n     \n    //query is cached using the default settings\n    var tasks = db.Tasks\n        .Where(t => t.CompleteDate == null)\n        .FromCache();\n \n    //query result is now cached 300 seconds\n    var tasks = db.Tasks\n        .Where(t => t.AssignedId == myUserId && t.CompleteDate == null)\n        .FromCache(CachePolicy.WithDurationExpiration(TimeSpan.FromSeconds(300)));\n        \nThe Query Result Cache also supports tagging the cache so you can expire common cache entries by calling `Expire` on a cache tag.\n\n    // cache assigned tasks\n    var tasks = db.Tasks\n        .Where(t => t.AssignedId == myUserId && t.CompleteDate == null)\n        .FromCache(tags: new[] { \"Task\", \"Assigned-Task-\" + myUserId  });\n\n    // some update happened to Task, expire Task tag\n    CacheManager.Current.Expire(\"Task\");\n    \nThe `CacheManager` has support for providers.  The default provider uses `MemoryCache` to store the cache entries.  To create a custom provider, implement `ICacheProvider`. The custom provider will then need to be registered in the `Locator` container.\n\n    // Replace cache provider with Memcached provider\n    Locator.Current.Register<ICacheProvider>(() => new MemcachedProvider());\n\n### Audit Log\n\nThe Audit Log feature will capture the changes to entities anytime they are submitted to the database. The Audit Log captures only the changed entities and only the changed properties. The before and after values are recorded. `AuditLogger.LastAudit` is where this information is held and there is a `ToXml()` method that makes it easy to turn the AuditLog into xml for easy storage.\n\nThe AuditLog can be customized via attributes on the entities or via a Fluent Configuration API.\n\nFluent Configuration\n    \n    // config audit when your application is starting up...\n    var auditConfiguration = AuditConfiguration.Default;\n    \n    auditConfiguration.IncludeRelationships = true;\n    auditConfiguration.LoadRelationships = true;\n    auditConfiguration.DefaultAuditable = true;\n    \n    // customize the audit for Task entity\n    auditConfiguration.IsAuditable<Task>()\n        .NotAudited(t => t.TaskExtended)\n        .FormatWith(t => t.Status, v => FormatStatus(v));\n    \n    // set the display member when status is a foreign key\n    auditConfiguration.IsAuditable<Status>()\n        .DisplayMember(t => t.Name);\n\nCreate an Audit Log\n\n    var db = new TrackerContext();\n    var audit = db.BeginAudit();\n\n    // make some updates ...\n\n    db.SaveChanges();\n    var log = audit.LastLog;\n\n## Useful links\n\n- [Documentation](https://entityframework.net/ef-extended)\n- [NuGet](https://nuget.org/packages/EntityFramework.Extended)\n- You can also consult several questions on \n[Stack Overflow](https://stackoverflow.com/questions/tagged/entity-framework-extended)\n\n## Contribute\n\nThe best way to contribute is by **spreading the word** about the library:\n\n - Blog it\n - Comment it\n - Star it\n - Share it\n \nA **HUGE THANKS** for your help.\n\n## More Projects\n\n- Projects:\n   - [EntityFramework Extensions](https://entityframework-extensions.net/)\n   - [Dapper Plus](https://dapper-plus.net/)\n   - [C# Eval Expression](https://eval-expression.net/)\n- Learn Websites\n   - [Learn EF Core](https://www.learnentityframeworkcore.com/)\n   - [Learn Dapper](https://www.learndapper.com/)\n- Online Tools:\n   - [.NET Fiddle](https://dotnetfiddle.net/)\n   - [SQL Fiddle](https://sqlfiddle.com/)\n   - [ZZZ Code AI](https://zzzcode.ai/)\n- and much more!\n\nTo view all our free and paid projects, visit our website [ZZZ Projects](https://zzzprojects.com/).\n"
        }
      ]
    }
  ]
}