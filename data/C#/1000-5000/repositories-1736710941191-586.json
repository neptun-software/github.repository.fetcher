{
  "metadata": {
    "timestamp": 1736710941191,
    "page": 586,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "JasonMa0012/JTRP",
      "stars": 1909,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0244140625,
          "content": "# This .gitignore file should be placed at the root of your Unity project directory\n#\n# Get latest from https://github.com/github/gitignore/blob/master/Unity.gitignore\n#\n/[Ll]ibrary/\n/[Tt]emp/\n/[Oo]bj/\n/[Bb]uild/\n/[Bb]uilds/\n/[Ll]ogs/\n/[Mm]emoryCaptures/\n\n# Asset meta data should only be ignored when the corresponding asset is also ignored\n!/[Aa]ssets/**/*.meta\n\n# Uncomment this line if you wish to ignore the asset store tools plugin\n# /[Aa]ssets/AssetStoreTools*\n\n# Autogenerated Jetbrains Rider plugin\n[Aa]ssets/Plugins/Editor/JetBrains*\n\n# Visual Studio cache directory\n.vs/\n\n# Gradle cache directory\n.gradle/\n\n# Autogenerated VS/MD/Consulo solution and project files\nExportedObj/\n.consulo/\n*.csproj\n*.unityproj\n*.sln\n*.suo\n*.tmp\n*.user\n*.userprefs\n*.pidb\n*.booproj\n*.svd\n*.pdb\n*.mdb\n*.opendb\n*.VC.db\n\n# Unity3D generated meta files\n*.pidb.meta\n*.pdb.meta\n*.mdb.meta\n\n# Unity3D generated file on crash reports\nsysinfo.txt\n\n# Builds\n*.apk\n#*.unitypackage\n\n# Crashlytics generated file\ncrashlytics-build.properties\n\n.vscode/\n.idea/\nRecordings/\n"
        },
        {
          "name": "Assets.meta",
          "type": "blob",
          "size": 0.16796875,
          "content": "fileFormatVersion: 2\nguid: 2305daebdb3fd2d4a951f5e0affe3cd8\nfolderAsset: yes\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "Assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "Editor.meta",
          "type": "blob",
          "size": 0.16796875,
          "content": "fileFormatVersion: 2\nguid: 971573a8c268a2f418f36617ff7f0620\nfolderAsset: yes\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "Editor",
          "type": "tree",
          "content": null
        },
        {
          "name": "ExternalTools.meta",
          "type": "blob",
          "size": 0.16796875,
          "content": "fileFormatVersion: 2\nguid: cf6cbac8efdc1fd44ace2a28f28d0fa5\nfolderAsset: yes\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "ExternalTools",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0390625,
          "content": "MIT License\n\nCopyright (c) 2020 JasonMa\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "LICENSE.meta",
          "type": "blob",
          "size": 0.1513671875,
          "content": "fileFormatVersion: 2\nguid: 5354656930d336549a878b35bc0c2254\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "README.assets.meta",
          "type": "blob",
          "size": 0.16796875,
          "content": "fileFormatVersion: 2\nguid: 46a819f1e7444844985b95efc2ae6a60\nfolderAsset: yes\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "README.assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.78125,
          "content": "# <img src=\"README.assets/JTRPLogoLow.png\" alt=\"img\" style=\"zoom: 80%;\" /> JTRP (Jason Ma Toon Render Pipeline)\n\n* [Works](#works)\n* [Installation](#installation)\n* [Getting Started：三渲二入门视频教程](#getting-started%E4%B8%89%E6%B8%B2%E4%BA%8C%E5%85%A5%E9%97%A8%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B)\n* [Usages](#usages)\n    * [JTRP Custom Pass](#jtrp-custom-pass)\n    * [Pencil\\+ Outline 4 Unity](#pencil-outline-4-unity)\n  * [Material Parameters](#material-parameters)\n  * [Scripts](#scripts)\n  * [Real Time Style Transfer](#real-time-style-transfer)\n  * [DXR Sample (Removed)](#dxr-sample-removed)\n  * [Light Weight ShaderGUI](#light-weight-shadergui)\n  * [Model Outline Importer（Legacy）](#model-outline-importerlegacy)\n* [Future Works](#future-works)\n\n这是我业余时间开发的基于**Unity HDRP**并支持**DX12 RayTracing**的卡通渲染工具集，定位于实时生产**影视**级质量卡通渲染CG。\n\n基于UTS二次开发：https://github.com/unity3d-jp/UnityChanToonShaderVer2_Project\n\n专栏：https://www.zhihu.com/people/blackcat1312/posts\n\nB站：https://space.bilibili.com/42463206\n\n邮箱：1312119064@qq.com\n\n## Works\n\nhttps://www.bilibili.com/video/BV1wD4y1w7oU?spm_id_from=333.999.0.0\n\n![](README.assets/1647811318271.png)\n\n![](README.assets/1647811386474.png)\n\nhttps://www.bilibili.com/video/BV1Bq4y1r7bn?p=3\n\n![](README.assets/1647811706282.png)![](README.assets/1647811937504.png)![](README.assets/1647812077711.png)\n\n## Installation\n\n1. 使用Unity 2021最新版本创建一个新项目（或使用你自己的项目）\n2. 确保安装了[Blender](https://www.blender.org/download/)，以及**双击.blend文件可以直接打开Blender**，否则示例模型将无法导入\n3. （需要代理）`Window > Package Manager > Add > Add package from git URL` 输入`https://github.com/JasonMa0012/JTRP.git`\n\n   * 你也可以选择手动从Github下载Zip，然后从`Package Manager > Add package from disk`添加Local Package\n\n   <img src=\"README.assets/1650651450991.png\" alt=\"img\" style=\"zoom: 67%;\" />\n4. 在Project面板中找到`Packages > JTRP`，同时打开`Edit > Project Settings > Graphics`，将`JTRP\\RenderPipelineResources\\JTRP_RenderPipelineAsset`分配给`SRP Settings`\n\n   <img src=\"README.assets/1650652521492.png\" alt=\"img\" style=\"zoom:80%;\" />\n5. 打开`Window > Rendering > HDRP Wizard`（一般会自动打开），点击`Fix All`，重启编辑器\n\n   <img src=\"README.assets/1650652730659.png\" style=\"zoom: 67%;\" />\n6. 双击`JTRP\\Samples\\JTRP_Samples.unitypackage`导出示例场景，打开`Assets\\JTRP_Samples\\SampleScenes`中的场景，检查渲染结果是否与截图一致，若渲染结果异常，请重新检查安装过程或提交Issue\n\n## Getting Started：三渲二入门视频教程\n\n![JTRP教程](README.assets/JTRP教程.jpg)\n\n教程：https://www.bilibili.com/video/BV1AA411A7RR/\n\n模型配布：https://www.bilibili.com/video/BV1a7411i7js/\n\n视频中你会学到：\n\n版本控制\n\n- 为何使用Git：多人协作、版本控制\n- Github账户、仓库、LFS、存储和单文件大小限制\n- SourceTree教程：\n  - https://zhuanlan.zhihu.com/p/212302462\n  - https://zhuanlan.zhihu.com/p/254909901\n- Clone、修改、暂存、推送、回滚、忽略\n- 或直接下载Zip：https://github.com/Jason-Ma-233/JasonMaToonRenderPipeline\n\n前置知识\n\n- 3D 美术、DCC 基础\n- Unity 安装、语言包、基本知识\n- Unity MMD：https://www.bilibili.com/video/BV1Db411e74e\n- Blender：\n  - PMX导入插件：https://github.com/GiveMeAllYourCats/cats-blender-plugin\n  - 模型处理：拆分材质、脸单独材质、脸部球面化法线（可选）\n\nJTRP\n\n- 三渲二概述：什么是PBR / NPR / 卡通渲染 / 三渲二、三渲二的常见特征与典型案例\n- UTS：https://github.com/unity3d-jp/UnityChanToonShaderVer2_Project/blob/release/urp/2.2.3/Documentation~/index.md\n- 参数概览\n- Outline\n  - 传统法线外扩\n  - P+ 4 Unity：https://www.psoft.co.jp/jp/product/pencil/unity/\n  - P+在线文档：https://docs.psoft.co.jp/pus400w/jp/latest/\n- 使用JTRP进行角色卡通渲染\n  - 阴影色\n  - 光线追踪阴影\n  - 头发阴影\n  - 脸+头发球形阴影\n  - 头发高光\n  - 边缘光\n- Timeline：角色动画、相机动画、表情动画、ABC\n- 实时物理：https://assetstore.unity.com/packages/tools/physics/magica-cloth-160144\n- HDRP / Lit Shader文档：https://docs.unity3d.com/Packages/com.unity.render-pipelines.high-definition@10.6/manual/Lit-Shader.html\n- 后处理：光线追踪GI / AO / SSR、Bloom、LUT、ToneMapping……\n  - LUT制作：https://docs.unity3d.com/Packages/com.unity.render-pipelines.high-definition@10.6/manual/LUT-Authoring-Resolve.html\n- 渲染输出\n\n\n## Usages\n\n由于JTRP是在UTS的基础上扩展而来，因此你应该先了解UTS的基本功能：https://github.com/unity3d-jp/UnityChanToonShaderVer2_Project/blob/release/legacy/2.0/Manual/UTS2_Manual_en.md\n\n#### JTRP Custom Pass\n\n![](README.assets/1647802771257.png)\n\n主要控制场景内所有Toon Shader物体的渲染，若丢失则回退到灰模状态。\n\n另可控制**Outline的全局设置**，若使用**BackFace Outline需要先打开开关**。\n\n**PostProcess Outline**可以使用，但处于预览状态，功能不完善，主要用于场景描边，通过配置材质球更改颜色。\n\n**Geometry Outline**只开发了一半，设置较为复杂，不推荐使用。已经有优化思路，但是没有时间继续开发，有缘人可以一起开发，效果参考视频：https://www.bilibili.com/video/BV1vp4y1r7sF\n\n#### Pencil+ Outline 4 Unity\n\n![](README.assets/1647803219913.png)\n\n视频教程里有使用方法，官方文档：https://docs.psoft.co.jp/pus400w/jp/4.1.2/index.html\n\n如要去除水印和范围限制请购买正版，官网：https://www.psoft.co.jp/jp/product/pencil/unity/。\n\n### Material Parameters\n\n如有遗漏，可以参考视频教程和UTS文档，这里只列出JTRP相对于UTS的新增部分。\n\n| ![img](README.assets/1647804306427.png) | HDRP/Toon                                                                                                                                                                                                                      |\n| ------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Workflow Mode                        | 优先使用ShadingGradeMap，否则不保证功能完全                                                                                                                                                                                    |\n| ![img](README.assets/1647803760469.png) | Shadow                                                                                                                                                                                                                         |\n| Shading Grade Map                    | 通过一张灰度图控制阴影的范围。阴影是通过光线方向与法线方向的点积（Gradient）计算，通过影响Gradient使某些区域更容易变亮/变暗。贴图颜色默认0.5灰色，越接近白色越容易变亮，为1时常亮，反之亦然。                                  |\n| ![img](README.assets/1647804186475.png) | JTRP Features                                                                                                                                                                                                                  |\n| Is Face / Hair                       | 头发和脸的开关，如需使用发影、脸影功能则须正确设置。<br />对于脸材质打开Is Face，对于头发材质打开Is Hair，普通材质保持默认关闭即可。                                                                                           |\n| Hair Shadow ……                     | 在**脸材质上**对发影进行调整，Width控制宽度，Ramp控制宽度的距离衰减，Bais控制裁剪距离                                                                                                                                    |\n| Hair Z Offset                        | 在**头发材质上**调整，控制发影渲染时在视线方向上的偏移                                                                                                                                                                   |\n| Face Shadow Bias                     | 在**脸材质上**调整，打开脸接受阴影的选项（System Shadows Self Shadows Receiving）时调整脸的阴影在光线方向的偏移，可以裁剪掉一些近距离不想要的阴影                                                                        |\n| Spherical Shadow……                 | 高级选项，控制球面化法线，需要配合脚本使用，参考视频教程                                                                                                                                                                       |\n| Anti-Perspective                     | 高级选项，控制反透视强度，为1时模型在视线方向压扁，从而抵消透视畸变。在3D中，FOV越大，透视畸变越大，视角越广，而三渲二追求还原手绘感，所以需要尽可能减小透视畸变，此功能适合在单独展示模型时使用，否则会与3D场景穿插造成穿帮。 |\n| ![img](README.assets/1647804204924.png) | Outline                                                                                                                                                                                                                        |\n| Outline Width Ramp                   | 通过Ramp控制描边在不同距离下的粗细                                                                                                                                                                                             |\n| ![img](README.assets/1647805003341.png) | Environmental Lighting                                                                                                                                                                                                         |\n| Built-in Light Direction             | 该功能可以手动指定光线方向，从而控制脸影、发影等。可以搭配脚本实现更智能的光线方向控制，参考视频教程                                                                                                                           |\n| ![img](README.assets/1647806050520.png) | Hair HighLight（**先点击Show All properties切换UI**）<br /><br />**看视频吧，实在没时间写了，欢迎好心人提交RP**                                                                                                    |\n| ![img](README.assets/1647806243135.png) | Screen Space Rim Light（**同上**）                                                                                                                                                                                       |\n|                                      |                                                                                                                                                                                                                                |\n\n### Scripts\n\n如有疑问参考视频教程\n\n| ![img](README.assets/1647805167570.png) | Spherical Hair High Light Helper                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| ------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Hair Center                          | 头发中心的代理，将头发整体视为一个球，在头骨下新建一个空物体放在球心处，然后在头发上新建该脚本，将球心赋给Hair Center                                                                                                                                                                                                                                                                                                                                                                                         |\n| Renderers                            | 选择使用该功能的Renderer                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n| ![img](README.assets/1647805180231.png) |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n| Center / Renderer                    | 原理同上                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n| Project Light Dir                    | 将光线方向投影到2D圆环上。光源方向通常不可控，但三渲二中对脸影的要求又相当严格，通过这些设置可以将光线方向限制在一个与头顶方向相切的圆环上，防止光源乱跑。<br />1. 在脸材质上开启Built-in Light Direction<br />2. 把场景中的Directional Light赋给Light<br />3. 在ForwardDir中选择脸的正面方向是FaceCenter的哪根轴向，Forward是+Z，Up是+Y，Right是+X<br />4. 调整Y Offset，旋转光源查看效果<br />5. （可选）通过Dot Power重映射Y Offset，横轴是光线与Forward点积（可以理解为夹角），竖轴是该夹角下的Y Offset值 |\n| ![img](README.assets/1647805141160.png) | Camera Sync<br /><br />在编辑器和Timeline中同步Scene View和Game View相机，方便**预览渲染效果和制作相机动画**。                                                                                                                                                                                                                                                                                                                                                                                          |\n| Game To Scene / Scene To Game        | 字面意思，手动复制一个View的相机状态到另一个View的相机                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| Mode                                 | Game To Scene / Scene To Game：自动复制相机状态<br />Automatic：适用于Timeline中预览/修改相机动画<br />1. 选择场景中的Timeline组件赋给Timeline Playable Director<br />2. 选择相机的Transform赋给Root<br />3. 在Timeline中播放相机动画，此时Scene View的相机会跟随Game View相机<br />4. 时间轴定位到要修改的相机动画关键帧处，移动Scene View相机，此时Game View相机会跟随Scene View相机<br />5. 使用Update Create Key (Shift+Q)保存相机关键帧                                                                  |\n|                                      |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n\n### Real Time Style Transfer\n\nhttps://www.bilibili.com/video/bv1FY4y1h7Vm\n\n![image-20220506162404333](README.assets/image-20220506162404333.png)\n\n参考：https://blog.unity.com/technology/real-time-style-transfer-in-unity-using-deep-neural-networks\n\n6-8ms on RTX3070 1080P\n\n### DXR Sample (Removed)\n\n![image-20210111010551810](README.assets/image-20210111010551810.png)![image-20210111010608857](README.assets/image-20210111010608857.png)\n\nVideo：https://www.bilibili.com/video/BV1Tr4y1F7Pv\n\n### Light Weight ShaderGUI\n\n一个轻量, 灵活, 强大的Unity Shader GUI系统.\n\n使用简洁的MaterialPropertyDrawer语法实现功能复杂的Shader GUI, 节省大量开发时间, 易于使用和扩展, 有效提升美术的使用体验.\n\nhttps://github.com/JasonMa0012/LWGUI\n\n\n### Model Outline Importer（Legacy）\n\n![](README.assets/Snipaste_2020-04-14_22-30-12.png)\n\n导入流程已经失效，详情可以参考[此文章](https://zhuanlan.zhihu.com/p/107664564)。\n\n如要对硬表面生成平滑法线建议借助DCC工具或NormalMap，UTS文档中也有对应介绍。\n\n## Future Works\n\nUTS3已经被收录于Unity官方Package：https://github.com/Unity-Technologies/com.unity.toonshader\n\n未来，在UTS3推出稳定版本并支持ShaderGraph之后，我计划将JTRP重构为一个灵活、轻量的插件，使用CustomNode或CustomPass等方式对UTS3进行非破坏性扩展。\n"
        },
        {
          "name": "README.md.meta",
          "type": "blob",
          "size": 0.154296875,
          "content": "fileFormatVersion: 2\nguid: 3f6a82f41619f4840bbdd31840d736ed\nTextScriptImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "RenderPipelineResources.meta",
          "type": "blob",
          "size": 0.16796875,
          "content": "fileFormatVersion: 2\nguid: b59a557d3265c22409e9a07d58b7f551\nfolderAsset: yes\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "RenderPipelineResources",
          "type": "tree",
          "content": null
        },
        {
          "name": "Runtime.meta",
          "type": "blob",
          "size": 0.16796875,
          "content": "fileFormatVersion: 2\nguid: 82d9c42d9d7011d479dab61a8a256da5\nfolderAsset: yes\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "Runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "Samples.meta",
          "type": "blob",
          "size": 0.16796875,
          "content": "fileFormatVersion: 2\nguid: edadeabfb117b964c8a589a952121e8f\nfolderAsset: yes\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "Samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tests.meta",
          "type": "blob",
          "size": 0.16796875,
          "content": "fileFormatVersion: 2\nguid: 932f3386e2a651c46a1449cf185b486f\nfolderAsset: yes\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "UnityChanToonShaderVer2_Project-hdrp-2.2.0-preview1.meta",
          "type": "blob",
          "size": 0.16796875,
          "content": "fileFormatVersion: 2\nguid: 63eda1c332303d743ba21ef564106b59\nfolderAsset: yes\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "UnityChanToonShaderVer2_Project-hdrp-2.2.0-preview1",
          "type": "tree",
          "content": null
        },
        {
          "name": "gh-md-toc.exe",
          "type": "blob",
          "size": 6242,
          "content": ""
        },
        {
          "name": "gh-md-toc.exe.meta",
          "type": "blob",
          "size": 0.1513671875,
          "content": "fileFormatVersion: 2\nguid: 37c36f9f0a9277849af586a6a2be4be6\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.55078125,
          "content": "{\n  \"name\": \"com.jasonma.jtrp\",\n  \"version\": \"0.3.1\",\n  \"displayName\": \"JTRP\",\n  \"description\": \"High Quality Toon Rendering tool set with DX12 Real-Time Ray Tracing (Preview).\",\n  \"dependencies\": {\n    \"com.unity.timeline\": \"1.6.4\",\n    \"com.unity.render-pipelines.high-definition\": \"12.1.6\",\n    \"com.unity.barracuda\": \"3.0.0\"\n  },\n  \"keywords\": [\n    \"shader\",\n    \"toon\",\n    \"hdrp\",\n    \"raytracing\"\n  ],\n  \"author\": {\n    \"name\": \"Jason Ma\",\n    \"email\": \"jasonma0012@foxmail.com\",\n    \"url\": \"https://github.com/JasonMa0012/JasonMaToonRenderPipeline\"\n  }\n}\n"
        },
        {
          "name": "package.json.meta",
          "type": "blob",
          "size": 0.1591796875,
          "content": "fileFormatVersion: 2\nguid: b2d6bee8735b3fc4ca23c62cd615cfd7\nPackageManifestImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        }
      ]
    }
  ]
}