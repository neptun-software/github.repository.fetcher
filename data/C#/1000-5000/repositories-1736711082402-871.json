{
  "metadata": {
    "timestamp": 1736711082402,
    "page": 871,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "BenMorris/NetArchTest",
      "stars": 1434,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.458984375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.2705078125,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n#*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Visual Studio Code files\n*.code-workspace\nlaunch.json\ntasks.json"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.0693359375,
          "content": "# How to contribute\n\n## Pull requests\n\nI welcome pull requests. Please include a clear description of the changes you have made with your request.\n\nPlease be patient as it may take a while for me to get back to you. If you have any specific expectations of when a pull request needs to be merged then please make this clear in your description.\n\nChanges such as bug fixes and enhancements are easy to accept, while breaking changes may require a little more consideration. The more breaking change is involved in a pull request, the longer it will take to consider and the more likely it is to be rejected.\n\nIf you have an idea for some more involved enhancements then I'd recommend getting in touch with me first by opening an issue.\n\n## Technical expectations\n\nThe first thing I'll do is check that all the unit tests run. \n\nI would also prefer it if any new features are covered by unit tests.\n\nIn terms of code conventions this should read as pretty vanilla C# code. The key thing here is to make it readable and clear. I generally prefer to fully comment any public methods or properties.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0625,
          "content": "MIT License\n\nCopyright (c) 2018 Ben Morris (www.ben-morris.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "NetArchTest - all projects.sln",
          "type": "blob",
          "size": 5.2236328125,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 16\nVisualStudioVersion = 16.0.29728.190\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"NetArchTest.Rules\", \"src\\NetArchTest.Rules\\NetArchTest.Rules.csproj\", \"{2FDD6DBD-F203-4EC9-9F9B-6771713CC353}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"src\", \"src\", \"{13D8126E-E351-4956-AA64-2BAF6F8B2613}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"test\", \"test\", \"{660FEA1B-C886-4B72-AD70-1D7DD248CD76}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"NetArchTest.Rules.UnitTests\", \"test\\NetArchTest.Rules.UnitTests\\NetArchTest.Rules.UnitTests.csproj\", \"{D56F6954-7CCA-41D6-BA81-850F0C81FE3A}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"NetArchTest.TestStructure\", \"test\\NetArchTest.TestStructure\\NetArchTest.TestStructure.csproj\", \"{D91C182D-DC97-4F9B-AFFE-8C7A62501DA6}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"examples\", \"examples\", \"{460F2EC0-8774-4A26-835C-2FFFCAEEE1FA}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"NetArchTest.SampleRules\", \"samples\\NetArchTest.SampleRules\\NetArchTest.SampleRules.csproj\", \"{4C5B170E-CAA1-421E-9FA5-9C2D6BEDB27C}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"NetArchTest.SampleLibrary\", \"samples\\NetArchTest.SampleLibrary\\NetArchTest.SampleLibrary.csproj\", \"{7123A8AE-678D-4D14-82E5-EB5607ABDC4A}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"NetArchTest.CrossAssemblyTest.A\", \"test\\NetArchTest.CrossAssemblyTest.A\\NetArchTest.CrossAssemblyTest.A.csproj\", \"{70B787F2-8B79-4AA5-8C73-26682A605B6B}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"NetArchTest.CrossAssemblyTest.B\", \"test\\NetArchTest.CrossAssemblyTest.B\\NetArchTest.CrossAssemblyTest.B.csproj\", \"{28692D43-3E08-43E4-BCBB-5940B9F741C6}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{2FDD6DBD-F203-4EC9-9F9B-6771713CC353}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{2FDD6DBD-F203-4EC9-9F9B-6771713CC353}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{2FDD6DBD-F203-4EC9-9F9B-6771713CC353}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{2FDD6DBD-F203-4EC9-9F9B-6771713CC353}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{D56F6954-7CCA-41D6-BA81-850F0C81FE3A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{D56F6954-7CCA-41D6-BA81-850F0C81FE3A}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{D56F6954-7CCA-41D6-BA81-850F0C81FE3A}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{D56F6954-7CCA-41D6-BA81-850F0C81FE3A}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{D91C182D-DC97-4F9B-AFFE-8C7A62501DA6}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{D91C182D-DC97-4F9B-AFFE-8C7A62501DA6}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{D91C182D-DC97-4F9B-AFFE-8C7A62501DA6}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{D91C182D-DC97-4F9B-AFFE-8C7A62501DA6}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{4C5B170E-CAA1-421E-9FA5-9C2D6BEDB27C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{4C5B170E-CAA1-421E-9FA5-9C2D6BEDB27C}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{4C5B170E-CAA1-421E-9FA5-9C2D6BEDB27C}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{4C5B170E-CAA1-421E-9FA5-9C2D6BEDB27C}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{7123A8AE-678D-4D14-82E5-EB5607ABDC4A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{7123A8AE-678D-4D14-82E5-EB5607ABDC4A}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{7123A8AE-678D-4D14-82E5-EB5607ABDC4A}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{7123A8AE-678D-4D14-82E5-EB5607ABDC4A}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{70B787F2-8B79-4AA5-8C73-26682A605B6B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{70B787F2-8B79-4AA5-8C73-26682A605B6B}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{70B787F2-8B79-4AA5-8C73-26682A605B6B}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{70B787F2-8B79-4AA5-8C73-26682A605B6B}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{28692D43-3E08-43E4-BCBB-5940B9F741C6}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{28692D43-3E08-43E4-BCBB-5940B9F741C6}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{28692D43-3E08-43E4-BCBB-5940B9F741C6}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{28692D43-3E08-43E4-BCBB-5940B9F741C6}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{2FDD6DBD-F203-4EC9-9F9B-6771713CC353} = {13D8126E-E351-4956-AA64-2BAF6F8B2613}\n\t\t{D56F6954-7CCA-41D6-BA81-850F0C81FE3A} = {660FEA1B-C886-4B72-AD70-1D7DD248CD76}\n\t\t{D91C182D-DC97-4F9B-AFFE-8C7A62501DA6} = {660FEA1B-C886-4B72-AD70-1D7DD248CD76}\n\t\t{4C5B170E-CAA1-421E-9FA5-9C2D6BEDB27C} = {460F2EC0-8774-4A26-835C-2FFFCAEEE1FA}\n\t\t{7123A8AE-678D-4D14-82E5-EB5607ABDC4A} = {460F2EC0-8774-4A26-835C-2FFFCAEEE1FA}\n\t\t{70B787F2-8B79-4AA5-8C73-26682A605B6B} = {660FEA1B-C886-4B72-AD70-1D7DD248CD76}\n\t\t{28692D43-3E08-43E4-BCBB-5940B9F741C6} = {660FEA1B-C886-4B72-AD70-1D7DD248CD76}\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {4388262D-A716-4918-A629-6072E4F8B668}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.068359375,
          "content": "﻿# NetArchTest\n\n[![Build status](https://dev.azure.com/ben-morris-uk/Open-Source/_apis/build/status/NetArchTest-CI-Build)](https://dev.azure.com/ben-morris-uk/Open-Source/_build/latest?definitionId=2)\n\nA fluent API for .Net Standard that can enforce architectural rules in unit tests. \n\nInspired by the [ArchUnit](https://www.archunit.org/) library for Java.\n\n## Rationale\n\nThis project allows you create tests that enforce conventions for class design, naming and dependency in .Net code bases. These can be used with any unit test framework and incorporated into a build pipeline. It uses a fluid API that allows you to string together readable rules that can be used in test assertions.\n\nThere are plenty of static analysis tools that can evaluate application structure, but they are aimed more at enforcing generic best practice rather than application-specific conventions. The better tools in this space can be press-ganged into creating custom rules for a specific architecture, but the intention here is to incorporate rules into a test suite and create a *self-testing architecture*.\n\nThe project is inspired by [ArchUnit](https://www.archunit.org/), a java-based library that attempts to address the difficulties of preserving architectural design patterns in code bases over the long term. Many patterns can only be enforced by convention, which tends to rely on a rigorous and consistent process of code review. This discipline often breaks down as projects grow, use cases become more complex and developers come and go. \n\n## Examples\n\n```csharp\n// Classes in the presentation should not directly reference repositories\nvar result = Types.InCurrentDomain()\n    .That()\n    .ResideInNamespace(\"NetArchTest.SampleLibrary.Presentation\")\n    .ShouldNot()\n    .HaveDependencyOn(\"NetArchTest.SampleLibrary.Data\")\n    .GetResult()\n    .IsSuccessful;\n\n// Classes in the \"data\" namespace should implement IRepository\nresult = Types.InCurrentDomain()\n    .That().HaveDependencyOn(\"System.Data\")\n    .And().ResideInNamespace((\"ArchTest\"))\n    .Should().ResideInNamespace((\"NetArchTest.SampleLibrary.Data\"))\n    .GetResult()\n    .IsSuccessful;\n\n// All the service classes should be sealed\nresult = Types.InCurrentDomain()\n    .That().ImplementInterface(typeof(IWidgetService))\n    .Should().BeSealed()\n    .GetResult()\n    .IsSuccessful;\n```\n\n## Getting started\n\nThe main rules library is available as a package on NuGet: [NetArchTest.Rules](https://www.nuget.org/packages/NetArchTest.Rules/).\n\nIt is a .Net Standard 2.0 library that is compatible with .Net Framework 4.6.1 or better and .Net Core 2.0 or better.\n\n### Writing rules\n\nThe fluent API should direct you in building up a rule based on a combination of predicates, conditions and conjunctions. \n\nThe starting point for any rule is the static `Types` class, where you load a set of types from a path, assembly or namespace.\n\n```csharp\nvar types = Types.InAssembly(typeof(MyClass).Assembly);\n```\nOnce you have selected the types you can filter them using one or more predicates. These can be chained together using `And()` or `Or()` conjunctions:\n```csharp\ntypes.That().ResideInNamespace(“MyProject.Data”);\n```\nOnce the set of classes have been filtered you can apply a set of conditions using the `Should()` or `ShouldNot()` methods, e.g.\n```csharp\ntypes.That().ResideInNamespace(“MyProject.Data”).Should().BeSealed();\n```\nFinally, you obtain a result from the rule by using an executor, i.e. use `GetTypes()` to return the types that match the rule or `GetResult()` to determine whether the rule has been met. Note that the result will also return a list of types that failed to meet the conditions.\n```csharp\nvar isValid = types.That().ResideInNamespace(“MyProject.Data”).Should().BeSealed().GetResult().IsSuccessful;\n```\n\n### Custom rules\n\nYou can extend the library by writing custom rules that implement the `ICustomRule` interface. These can be applied as both predicates and conditions using a `MeetsCustomRule()` method, e.g.\n\n```csharp\nvar myRule = new CustomRule();\n\n// Write your own custom rules that can be used as both predicates and conditions\nresult = Types.InCurrentDomain()\n    .That().AreClasses()\n    .Should()\n    .MeetCustomRule(myRule)\n    .GetResult().IsSuccessful;\n```\n\n### Grouping rules into Policies\n\nRules can be grouped into policies using the fluent interface exposed by the `Policy` class, e.g. \n\n```csharp\nvar architecturePolicy = Policy.Define(\"Example Policy\", \"This is an example policy\")\n                .For(Types.InCurrentDomain)\n                .Add(t =>\n                   t.That()\n                   .ResideInNamespace(\"NetArchTest.SampleLibrary.Presentation\")\n                   .ShouldNot()\n                   .HaveDependencyOn(\"NetArchTest.SampleLibrary.Data\"),\n                   \"Enforcing layered architecture\", \"Controllers should not directly reference repositories\"\n                )\n                ...\n                .Add(t =>\n                    t.That()\n                    .AreInterfaces()\n                    .Should()\n                    .HaveNameStartingWith(\"I\"),\n                    \"Generic implementation rules\", \"Interface names should start with an 'I'\"\n                );\n\n```\nThe rules are loaded lazily and executed when the `Evaluate()` method is called. This method returns a `PolicyResults` instance that can be passed to a reporting mechanism.\n\nThe [ExamplePolicies](https://github.com/BenMorris/NetArchTest/blob/master/samples/NetArchTest.SampleRules/ExamplePolicies.cs) class in the samples demonstrates how to do this.\n\n## Source code\n\n> I welcome contributions. Please refer to the [contributing guidelines](CONTRIBUTING.md).\n\nThe solution contains projects in three directories:\n\n - *src*: The main Rules library that is available as a package on NuGet. The main dependency is Mono.Cecil.\n - *test*: A set of unit tests for the rules based on XUnit.\n - *samples*: A couple of sample projects that demonstrate some of the possible usage scenarios.\n\n## Further reading\n\nA more extensive blog post describing the implementation detail is available in [my blog](https://www.ben-morris.com/writing-archunit-style-tests-for-net-and-c-for-self-testing-architectures).\n"
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}