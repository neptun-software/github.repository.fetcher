{
  "metadata": {
    "timestamp": 1736710751858,
    "page": 190,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fanliang11/surging",
      "stars": 3244,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.458984375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.4755859375,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\nsffd\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\nwwwroot/dist/\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n#*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# Shared Assembly file.\n!**/packages/SharedSolutionFiles/\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\nnode_modules/\n!/node_modules/swagger-ui-dist/\norleans.codegen.cs\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n/src/Surging.Core/Surging.Core.CPlatform/CPlatformResource.en-US.resources\napi/\n_site/\n\n/src/Surging.ApiGateway\n/src/Surging.Services/Surging.Services.Server/Dockerfile\n"
        },
        {
          "name": "FETCH_HEAD",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.037109375,
          "content": "MIT License\n\nCopyright (c) 2017 Fanly\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.EN.md",
          "type": "blob",
          "size": 4.4677734375,
          "content": "# surging 　　　　　　　　　　　　　　　　　　　　[中文](https://github.com/dotnetcore/surging/blob/master/README.md)\n[![Member project of .NET Core Community](https://img.shields.io/badge/member%20project%20of-NCC-9e20c9.svg)](https://github.com/dotnetcore)\n[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://mit-license.org/)\n# surging is a distributed micro service framework that provides high-performance RPC remote service calls, using Zookeeper, Consul as the registration center for surging services, integrating hash, random, polling as a load balancing algorithm, RPC integration using the netty framework, Using asynchronous transmission.\n<br />\n\n### Architecture：\n\n<img src=\"https://github.com/dotnetcore/surging/blob/master/docs/Architecture.png\" alt=\"架构图\" />\n\n### Start configuration：\n\n <br/>\n \n ```c#\nvar host = new ServiceHostBuilder()\n                .RegisterServices(builder =>\n                {\n                    builder.AddMicroService(option =>\n                    {\n                        option.AddServiceRuntime();//\n                        // option.UseZooKeeperManager(new ConfigInfo(\"127.0.0.1:2181\")); //Using a Zookeeper management\n                        option.UseConsulManager(new ConfigInfo(\"127.0.0.1:8500\"));//Use the Consul management\n                        option.UseDotNettyTransport();//Use Netty transmission\n                        option.UseRabbitMQTransport();//Use the rabbitmq transmission\n                        option.AddRabbitMQAdapt();//Based on the consumption of the rabbitmq service adaptation\n                        builder.Register(p => new CPlatformContainer(ServiceLocator.Current));//Initializes the injection container\n                    });\n                })\n                .SubscribeAt()     //News Feeds\n                .UseServer(\"127.0.0.1\", 98)\n              //.UseServer(\"127.0.0.1\", 98，“true”) //Automatically generate Token\n              //.UseServer(\"127.0.0.1\", 98，“123456789”) //Fixed password Token\n                .UseLog4net(\"Configs/log4net.config\") //Use log4net to generate the log\n                .UseLog4net()  //Use log4net to generate the log\n                .UseStartup<Startup>()\n                .Build();\n                \n            using (host.Run())\n            {\n                Console.WriteLine($\"The server startup success，{DateTime.Now}。\");\n            }\n ```    \n                \n<br/>\n\nSubscription function：\n<br/>\n\n```c#\n ServiceLocator.GetService< ISubscriptionAdapt >().SubscribeAt();\n ```    \n \n <br/>\nIncrease service fault-tolerant, fault-tolerant forcibly demote demotion and service\n\n\n* Increase the fault tolerance strategy Injection, the local module injection：\n\n<br/>\n\n```c#\n[Command(Strategy= StrategyType.Injection ,Injection = @\"return null;\")]\n```    \n\n <br/>\n \n```C#  \n[Command(Strategy= StrategyType.Injection ,Injection = @\"return \nTask.FromResult(new Surging.IModuleServices.Common.Models.UserModel\n         {\n            Name=\"\"fanly\"\",\n            Age=18\n         });\",InjectionNamespaces =new string[] { \"Surging.IModuleServices.Common\"})] \n```\n\n\n* Increase Injection fault-tolerant strategy, local Injection module：   \n\n<br/>\n\n```C#  \n[Command(Strategy= StrategyType.Injection ,Injection = @\"return true;\")] \n```\n\n<br/>\n\nIncrease the cache relegation, how to use?\n<br/>\nAdd the following features in the business interface methods\n<br/>\n\n```C#  \n   [Command(Strategy= StrategyType.Failover,FailoverCluster =3,RequestCacheEnabled =true)]  //RequestCacheEnabled =true Is to enable the cache\n```\n\n<br/>\nHow to intercept access to cache？\n <br/>\nAdd the following features in the business interface methods\n <br/>\n \n```C#  \n [InterceptMethod(CachingMethod.Get, Key = \"GetUser_id_{0}\", Mode = CacheTargetType.Redis, Time = 480)]\n```\n    \n<br/>\nHow to intercept the delete cache？\n <br/>\nAdd the following features in the business interface methods\n <br/>\n \n```C#  \n  [InterceptMethod(CachingMethod.Remove, \"GetUser_id_{0}\", \"GetUserName_name_{0}\", Mode = CacheTargetType.Redis)]\n```\n      \n<br/>\nHow to add the cache KEY\n   <br/>\nOn the business model attribute to add, the following features, can support multiple\n   <br/>\n   \n```C# \n[CacheKey(1)]\n```\n        \n<br/>\nConfiguring Interceptors\n<br/>\n   \n```C# \n .AddClientIntercepted(typeof(CacheProviderInterceptor))\n```\n\nIDE:Visual Studio 2017 15.3 Preview ,vscode\n<br/>\nThe framework：.NET core 2.0\n<br/>\n如有任何问题可以加入QQ群：542283494 Gitter:not room\n<br/>\n[Blog]:https://www.cnblogs.com/fanliang11\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.4765625,
          "content": "﻿# surging 　　　　　　　　　　　　　　　　　　　　[English](https://github.com/dotnetcore/surging/blob/master/README.EN.md)\n[![Member project of .NET Core Community](https://img.shields.io/badge/member%20project%20of-NCC-9e20c9.svg)](https://github.com/dotnetcore)\n[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://mit-license.org/)\n### surging 是一个分布式微服务框架,提供高性能RPC远程服务调用，采用Zookeeper、Consul作为surging服务的注册中心，集成了哈希，随机，轮询，压力最小优先作为负载均衡的算法，RPC可以选择采用netty或thrift框架，采用异步非阻塞传输。\n\n<br />\n\n### 名字由来\n\n英文名：surging\n\n中文名：滔滔\n\n中文名来自周星驰的经典台词\n\n我对阁下的景仰犹如滔滔江水,连绵不绝,犹如黄河泛滥,一发而不可收拾，而取名英文的含义也希望此框架能流行起来，也能像《.net core surging》这句英文语句含义一样，.net core技术风起云涌,冲击整个软件生态系统。\n\n### 微服务定义\n微服务应该是可以自由组合拆分，对于每个业务都是独立的，针对于业务模块的 CRUD 可以注册为服务，而每个服务都是高度自治的，从开发，部署都是独立，而每个服务只做单一功能，利用领域驱动设计去更好的拆分成粒度更小的模块\n\n### 微服务边界\n微服务是针对业务的松耦合，也是粒度最小的功能业务模块，针对于行业解决方案，集成相应的service host,而针对于业务需要一些中间件来辅助，比如缓存中间件，eventbus中间件（消息中间件），数据储存中间件,而各个服务又可以互相通过rpc进行可靠性通信。\n\n引擎是微服务的容器，而docker 是服务引擎的容器，而利用k8s或rancher可以针对docker集群化管理，可以服务编排弹性扩容，熟知工具，让工具物尽其用。\n\n### 能做什么\n1.简化的服务调用，通过服务规则的指定，就可以做到服务之间的远程调用，无需其它方式的侵入\n\n2.服务自动注册与发现，不需要配置服务提供方地址，注册中心基于ServiceId 或者RoutePath查询服务提供者的地址和元数据，并且能够平滑添加或删除服务提供者。\n\n3.软负载均衡及容错机制，通过surging内部负载算法和容错规则的设定，从而达到内部调用的负载和容错\n\n4.分布式缓存中间件：通过哈希一致性算法来实现负载，并且有健康检查能够平滑的把不健康的服务从列表中删除\n\n5. 事件总线：通过对于事件总线的适配可以实现发布订阅交互模式\n\n6.容器化持续集成与持续交付 ：通过构建一体化Devops平台,实现项目的自动化构建、部署、测试和发布，从而提高生产环境的可靠性、稳定性、弹性和安全性。\n\n7. 业务模块化驱动引擎，通过加载指定业务模块，能够更加灵活、高效的部署不同版本的业务功能模块\n\n### 引擎如何安装\n\ndocker hub : docker pull serviceengine/surging:版本号\n\nnuget:Install-Package surging -Version  版本号\n\n### 架构图\n\n<img src=\"https://github.com/dotnetcore/surging/blob/master/docs/Architecture.png\" alt=\"架构图\" />\n\n### 调用链\n\n<img src=\"https://github.com/dotnetcore/surging/blob/master/docs/call-chain.png\" alt=\"链路图\" />\n\n### 配置：\n\n ```c#\nvar host = new ServiceHostBuilder()\n                .RegisterServices(builder =>\n                {\n                    builder.AddMicroService(option =>\n                    {\n                        option.AddServiceRuntime();//\n                        option.AddRelateService();//添加支持服务代理远程调用\n                         option.AddConfigurationWatch();//添加同步更新配置文件的监听处理\n                        // option.UseZooKeeperManager(new ConfigInfo(\"127.0.0.1:2181\")); //使用Zookeeper管理\n                        option.UseConsulManager(new ConfigInfo(\"127.0.0.1:8500\"));//使用Consul管理\n                        option.UseDotNettyTransport();//使用Netty传输\n                        option.UseRabbitMQTransport();//使用rabbitmq 传输\n                        option.AddRabbitMQAdapt();//基于rabbitmq的消费的服务适配\n                      //  option.UseProtoBufferCodec();//基于protobuf序列化\n                        option.UseMessagePackCodec();//基于MessagePack序列化\n                        builder.Register(p => new CPlatformContainer(ServiceLocator.Current));//初始化注入容器\n                    });\n                })\n                .SubscribeAt()     //消息订阅\n              //.UseServer(\"127.0.0.1\", 98)\n              //.UseServer(\"127.0.0.1\", 98，“true”) //自动生成Token\n              //.UseServer(\"127.0.0.1\", 98，“123456789”) //固定密码Token\n                .UseServer(options=> {\n                    options.Ip = \"127.0.0.1\";\n                    options.Port = 98;\n                    //options.IpEndpoint = new IPEndPoint(IPAddress.Any, 98);\n                    //options.Ip = \"0.0.0.0\";\n                    options.ExecutionTimeoutInMilliseconds = 30000; //执行超时时间\n                    options.Strategy=(int)StrategyType.Failover; //容错策略使用故障切换\n                    options.RequestCacheEnabled=true; //开启缓存（只有通过接口代理远程调用，才能启用缓存）\n                    options.Injection=\"return null\"; //注入方式\n                    options.InjectionNamespaces= new string[] { \"Surging.IModuleServices.Common\" }); //脚本注入使用的命名空间\n                    options.BreakeErrorThresholdPercentage=50;  //错误率达到多少开启熔断保护\n                    options.BreakeSleepWindowInMilliseconds=60000; //熔断多少毫秒后去尝试请求\n                    options.BreakerForceClosed=false;   //是否强制关闭熔断\n                    options.BreakerRequestVolumeThreshold = 20;//10秒钟内至少多少请求失败，熔断器才发挥起作用\n                    options.MaxConcurrentRequests=100000;//支持最大并发\n                    options.ShuntStrategy=AddressSelectorMode.Polling; //使用轮询负载分流策略\n                    options.NotRelatedAssemblyFiles = \"Centa.Agency.Application.DTO\\\\w*|StackExchange.Redis\\\\w*\"; //排除无需依赖注册\n                })\n                //.UseLog4net(\"Configs/log4net.config\") //使用log4net记录日志\n                .UseNLog(LogLevel.Error, \"Configs/NLog.config\")// 使用NLog 记录日志\n                //.UseLog4net(LogLevel.Error) //使用log4net记录日志\n                //.UseLog4net()  //使用log4net记录日志\n                .Configure(build =>\n                build.AddEventBusFile(\"eventBusSettings.json\", optional: false))//使用eventBusSettings.json文件进行配置\n                .Configure(build =>\n                 build.AddCacheFile(\"cacheSettings.json\", optional: false))//使用cacheSettings.json文件进行配置\n                .UseProxy() //使用Proxy\n                .UseStartup<Startup>()\n                .Build();\n                \n            using (host.Run())\n            {\n                Console.WriteLine($\"服务端启动成功，{DateTime.Now}。\");\n            }\n ```    \n<br/>\n\n### 文件配置：\n\n```c#\n{\n  \"ConnectionString\": \"${Register_Conn}|127.0.0.1:8500\", // ${环境变量名} |默认值,\n  \"SessionTimeout\": \"${Register_SessionTimeout}|50\",\n  \"ReloadOnChange\": true\n}\n\n```\n\n### 非容器环境文件配置\n\n```c#\n {\n  \"Ip\": \"${Server_IP}|127.0.0.1\",\n  \"WatchInterval\": 30,\n  \"Port\": \"${Server_port}\",\n  \"Token\": \"true\",\n   \"Protocol\": \"${Protocol}|Tcp\", //支持Http,Tcp协议\n  \"RootPath\": \"${RootPath}\",\n  \"RequestCacheEnabled\": false\n}\n\n```\n\n\n### 容器环境文件配置\n\n```c#\n {\n  \"Ip\": \"${Server_IP}|0.0.0.0\",//私有容器IP\n  \"WatchInterval\": 30,\n  \"Port\": \"${Server_port}|98\",//私有容器端口\n   \"MappingIp\": \"${Mapping_ip}\",//公开主机IP\n  \"MappingPort\": \"${Mapping_Port}\",//公开主机端口\n   \"Protocol\": \"${Protocol}|Tcp\", //支持Http,Tcp协议\n  \"Token\": \"true\",\n  \"RootPath\": \"${RootPath}\",\n  \"RequestCacheEnabled\": false\n}\n\n```\n\n\n服务路由访问配置：\n<br/>\n\n```c#\n[ServiceBundle(\"api/{Service}\")]\n ```    \n<br/>\n\nJWT验证，接口方法添加以下特性：\n<br/>\n\n```c#\n   [Authorization(AuthType = AuthorizationType.JWT)];\n ```    \n<br/>\n\nAppSecret验证，接口方法添加以下特性：\n<br/>\n\n```c#\n [Authorization(AuthType = AuthorizationType.AppSecret)];\n ```    \n<br/>\n\n订阅功能：\n<br/>\n\n```c#\n ServiceLocator.GetService< ISubscriptionAdapt >().SubscribeAt();\n ```    \n \n <br/>\n增加服务容错、服务容错降级、服务强制降级\n\n\n* 增加容错策略Injection，脚本注入：\n\n<br/>\n\n```c#\n[Command(Strategy= StrategyType.Injection ,Injection = @\"return null;\")]\n```    \n\n <br/>\n \n```C#  \n[Command(Strategy= StrategyType.Injection ,Injection = @\"return \nTask.FromResult(new Surging.IModuleServices.Common.Models.UserModel\n         {\n            Name=\"\"fanly\"\",\n            Age=18\n         });\",InjectionNamespaces =new string[] { \"Surging.IModuleServices.Common\"})] \n```\n\n\n* 增加容错策略Injection，本地模块注入：   \n\n<br/>\n\n```C#  \n[Command(Strategy= StrategyType.Injection ,Injection = @\"return true;\")] \n```\n\n<br/>\n\n增加缓存降级，怎么使用？\n<br/>\n在业务接口方法上添加如下特性\n<br/>\n\n```C#  \n   [Command(Strategy= StrategyType.Failover,FailoverCluster =3,RequestCacheEnabled =true)]  //RequestCacheEnabled =true 就是启用缓存\n```\n\n<br/>\n怎么拦截获取缓存\n <br/>\n在业务接口方法上添加如下特性\n <br/>\n \n```C#  \n [InterceptMethod(CachingMethod.Get, Key = \"GetUser_id_{0}\", Mode = CacheTargetType.Redis, Time = 480)]\n```\n    \n<br/>\n怎么拦截删除缓存\n <br/>\n在业务接口方法上添加如下特性\n <br/>\n \n```C#  \n  [InterceptMethod(CachingMethod.Remove, \"GetUser_id_{0}\", \"GetUserName_name_{0}\", Mode = CacheTargetType.Redis)]\n```\n      \n<br/>\n怎么添加缓存KEY\n   <br/>\n在业务模型属性上添加，如下特性，可以支持多个\n   <br/>\n   \n```C# \n[CacheKey(1)]\n```\n        \n<br/>\n配置拦截器\n<br/>\n   \n```C# \n .AddClientIntercepted(typeof(CacheProviderInterceptor))\n```\n\n## 捐赠明细\n\nsurging 接受来自社区的捐赠，所有款项将通过 [捐赠明细表](Statement-of-Income-and-Expense.md) 进行公示，接受社区监督。\n\nIDE:Visual Studio 2017 15.5,vscode\n<br/>\n框架：.NET core 2.1\n<br/>\nQQ群：615562965\n* [文档](http://docs.dotnet-china.org/surging/)\n* [简单示例](https://github.com/dotnetcore/surging/blob/master/docs/docs.en/INDEX.md)\n\n## 谁在使用\n\n\n"
        },
        {
          "name": "RELEASE_NOTES.md",
          "type": "blob",
          "size": 1.2548828125,
          "content": "####  0.6.5 May 1 2018\n- Add Strategy FallBack\n- Fixed bug with rabbitmq Configuration\n- Add NLog component\n- Fix socket resource exhaustion bug\n- Add RpcContext pass parameters\n\n#### Surging.Core.Caching 0.6.3 March 29 2018\n- Add Distributed Cache Profile Synchronization Updates \n\n#### surging 0.6.3 March 29 2018\n- Add Distributed Cache Profile Synchronization Updates \n- Add Load Balancing FairPolling Algorithm  \n- Add configuration file to define running parameters\n\n#### Surging.Core.Zookeeper 0.5.1 January 17 2017\n- Fix problems registered on different servers based on zookeeper and consul\n\n#### Surging.Core.Consul 0.5.1 January 17 2017\n- Fix If consul crash, the service runs as usual\n- Fix problems registered on different servers based on zookeeper and consul\n\n#### surging 0.5.1 January 17 2017\n- Fixed concurrency block\n- Add UseProxy\n- Fix getservice create proxy remote calls \n- Interfaces that do not implement domain services are not registered\n- Fixed a problem with non-proxy calls that enabled cache crashes\n\n#### Surging.Core.Log4net 0.4.8 December 17 2017\n- Add logs based on log4net\n\n#### Surging.Core.Zookeeper 0.4.9 December 16 2017\n- Fixed using zookeeper registry did not register fault tolerance rules\n\n#### 0.4.8 December 10 2017\n- First public release\n"
        },
        {
          "name": "Statement-of-Income-and-Expense.md",
          "type": "blob",
          "size": 5.0009765625,
          "content": "# 收支明细表\n\n说明：为保证surging财务公开透明，决定将每一笔捐赠和支出记录于本表，资金由 [fanly](https://github.com/fanliang11) 托管，并且受社区人员监督用于surging的生态发展\n\n\n## 汇总\n\n截止到 2018 年 12 月 28 日：\n+ 共获得捐赠 `49` 笔计 `8679.06` 元人民币\n+ 暂无支出项\n\n## 明细\n\n| 序号       | 捐赠人       | 时间        |    金额            | 说明               | 留言              | 类型 |\n|------------|:------------:|-------------|--------------------|-------------------|--------------------|-----|\n| 1 | Murphy | 2018-12-19 | 100      | Murphy 个人捐赠   |   这家伙很懒       |获赠 |\n| 2 | 宗国   | 2018-12-19 | 20       | 宗国 个人捐赠     |   这家伙很懒       |获赠 |\n| 3 | 紫能   | 2018-12-19 | 50       | 紫能 个人捐赠    |   这家伙很懒       |获赠 |\n| 4 | Damon  | 2018-12-19 | 18.8     | Damon 个人捐赠    |   支持一下      |获赠 |\n| 5 | 悉路  | 2018-12-19 | 10        | 悉路 个人捐赠    | 感谢作者的付出，希望能完善文档 |获赠 |\n| 6 | jiang  | 2018-12-19 | 16.66      | jiang 个人捐赠    | 这家伙很懒  |获赠 |\n| 7 |  伯锰 z.l  | 2018-12-19 | 20     | 伯锰 z.l  个人捐赠    | 期待1.0  |获赠 |\n| 8 |  匿名 | 2018-12-19 | 5000    | 匿名个人捐赠    |  这家伙很懒  |获赠 |\n| 9 |  爱吃牛排的牛仔 | 2018-12-19 | 66.66   |  爱吃牛排的牛仔个人捐赠    | 这家伙很懒     |获赠 |\n| 10 |  siyue | 2018-12-20 | 50  |  siyue个人捐赠    | 这家伙很懒     |获赠 |\n| 11 |  学飞 | 2018-12-20 | 200  |  学飞个人捐赠    |  还在学习，期待surging越来越好  |获赠 |\n| 12 |  昵称bai | 2018-12-21 | 10  |  昵称bai个人捐赠    | 这家伙很懒 |获赠 |\n| 13 |  半碗的彩霞 | 2018-12-21 | 10  | 半碗的彩霞个人捐赠    | 这家伙很懒 |获赠 |\n| 14 |  虎牙 | 2018-12-21 | 1000  | 虎牙个人捐赠    | 这家伙很懒 |获赠 |\n| 15 |  寸草无心 | 2018-12-21 | 100  | 寸草无心个人捐赠    | 关注surging已有大半年了 默默支持 |获赠 |\n| 16 |  洋 | 2018-12-24 | 1  | 洋个人捐赠    | dotnetty支持websocket了 |获赠 |\n| 17 |  高文 | 2018-12-24 | 10  | 高文个人捐赠    | 庆祝1.0 |获赠 |\n| 18 |  培根 | 2018-12-24 | 36 | 培根个人捐赠    | 捐赠一杯咖啡 |获赠 |\n| 19 |  gesneriana | 2018-12-24 | 26 | gesneriana个人捐赠    | 这家伙很懒 |获赠 |\n| 20 |  学军 | 2018-12-27 | 100 | 学军个人捐赠    | 这家伙很懒  |获赠 |\n| 21 |  高立哲 | 2018-12-27 | 30 | 高立哲个人捐赠    | 这家伙很懒  |获赠 |\n| 22 |  俊文 | 2018-12-27 | 10 | 俊文个人捐赠    | 这家伙很懒  |获赠 |\n| 23 |  根堂 | 2018-12-28 | 100 | 根堂个人捐赠    | 这家伙很懒  |获赠 |\n| 24 |  东周 | 2018-12-28 | 5 | 东周个人捐赠    | 辛苦  |获赠 |\n| 25 |  纯 | 2018-12-28 | 20 | 纯个人捐赠    | 这家伙很懒  |获赠 |\n| 26 |  夏志行 | 2018-12-28 | 88 | 夏志行个人捐赠    | 这家伙很懒  |获赠 |\n| 27 |  勇 | 2018-12-28 | 88.88 | 勇个人捐赠    | 这家伙很懒  |获赠 |\n| 28 |  启旺 | 2018-12-28 | 10 | 勇个人捐赠    | 这家伙很懒  |获赠 |\n| 29 |  雯昌 | 2018-12-28 | 20 | 雯昌个人捐赠    | 支持surging  |获赠 |\n| 30 |  宏伟 | 2018-12-28 | 500 | 宏伟个人捐赠    | 这家伙很懒   |获赠 |\n| 31 |  伟 | 2018-12-28 | 20 | 伟个人捐赠    | 这家伙很懒   |获赠 |\n| 32 |  建 | 2018-12-28 | 10 |建个人捐赠    | 希望大佬搞好文档，在下尽点微薄之力   |获赠 |\n| 33 |  林 | 2018-12-29 | 30 |林个人捐赠    | 这家伙很懒   |获赠 |\n| 34 |  俊强 | 2018-12-29 | 100 | 俊强个人捐赠    | 这家伙很懒   |获赠 |\n| 35 |  彪 | 2018-01-02 | 10 | 彪个人捐赠    | 支持一下surging   |获赠 |\n| 36 |  忠全 | 2018-01-02 | 200 | 忠全个人捐赠    | 学习一下  |获赠 |\n| 37 |  思恒 | 2018-01-03 | 10 | 思恒个人捐赠    | 这家伙很懒   |获赠 |\n| 38 |  松波 | 2018-01-04 | 100 | 松波个人捐赠    | 出精品   |获赠 |\n| 39 |  先鸿 | 2019-01-05 | 30 | 先鸿个人捐赠    | 加油   |获赠 |\n| 40 |  杨坚 | 2019-01-08 | 100 | 杨坚个人捐赠    | 加油，希望surging能形成自己的社区   |获赠 |\n| 41 |  济良 | 2019-01-09 | 10 |  济良个人捐赠    | 这家伙很懒   |获赠 |\n| 42 |  祥 | 2019-01-11 | 36 |  祥个人捐赠    | 支持大佬，希望.net社区越来越好   |获赠 |\n| 43 |  文斌 | 2019-01-14 | 50 |  文斌个人捐赠    | 读书也要交学费，买书起码花点钱  |获赠 |\n| 44 |  笋 | 2019-01-25 | 30 |  笋个人捐赠    | 支持一下  |获赠 |\n| 45 |  Leo | 2019-01-30 | 100 |  Leo个人捐赠    | 支持surging |获赠 |\n| 46 |  文丽 | 2019-02-01 | 20 |  文丽    | 这家伙很懒 |获赠 |\n| 47 |  卫东 | 2019-02-13 | 16 |  卫东    | 这家伙很懒 |获赠 |\n| 48 |  安平 | 2019-02-15 | 30 |  安平    | 支持surging,感谢作者付出. |获赠 |\n| 49 |  MyDAL | 2019-02-19 | 6.66 |  MyDAL    | 支持国人自己的轮子. |获赠 |\n"
        },
        {
          "name": "bash.exe.stackdump",
          "type": "blob",
          "size": 0.689453125,
          "content": "Stack trace:\nFrame        Function    Args\n001802FF070  0018005D14E (0018022B7F0, 0018021DC39, 001802FF070, 000FFFFB9F0)\n001802FF070  00180046609 (00000000002, 00000000003, 00000000002, 000C0000000)\n001802FF070  00180046642 (00000000002, 001802FF380, 001802FF070, 00000000008)\n001802FF070  00180057602 (001800BB622, 000FFFFCC10, 00000000000, 00000000000)\n000FFFFCCB0  001800576B0 (205C795C745C745C, 655C205C265C265C, 205C6F5C685C635C, 695C6C5C245C225C)\n000FFFFCCB0  00180046DA5 (00000000000, 00000000000, 00000000000, 00000000000)\n00000000000  00180045873 (00000000000, 00000000000, 00000000000, 00000000000)\n000FFFFFFF0  00180045924 (00000000000, 00000000000, 00000000000, 00000000000)\nEnd of stack trace\n"
        },
        {
          "name": "docfx.json",
          "type": "blob",
          "size": 1.4072265625,
          "content": "{\n  \"metadata\": [\n  ],\n  \"build\": {\n    \"content\": [\n      {\n        \"files\": [\n          \"docs/**.md\",\n          \"docs/**/toc.yml\",\n          \"toc.yml\",\n          \"*.md\"\n        ]\n      }\n    ],\n    \"resource\": [\n      {\n        \"files\": [\n          \"**/images/**\"\n        ]\n      }\n    ],\n    \"overwrite\": [\n      {\n        \"files\": [\n          \"apidoc/**.md\"\n        ],\n        \"exclude\": [\n          \"obj/**\",\n          \"_site/**\"\n        ]\n      }\n    ],\n    \"dest\": \"_site\",\n    \"globalMetadataFiles\": [],\n    \"fileMetadataFiles\": [],\n    \"template\": [\n      \"default\"\n    ],\n    \"postProcessors\": [],\n    \"markdownEngineName\": \"markdig\",\n    \"noLangKeyword\": false,\n    \"keepFileLink\": false,\n    \"cleanupCacheHistory\": false,\n    \"disableGitFeatures\": false\n  }\n//  \"pdf\": {\n//    \"content\": [\n//      {\n//        \"files\": [\n//          \"docs/**.md\",\n//          \"docs/**/toc.yml\",\n//          \"toc.yml\",\n//          \"*.md\"\n//        ]\n//      }\n//    ],\n//    \"resource\": [\n//      {\n//        \"files\": [\n//          \"**/images/**\"\n//        ],\n//        \"exclude\": [\n//          \"**/bin/**\",\n//          \"**/obj/**\",\n//          \"_site_pdf/**\"\n//        ]\n//      }\n//    ],\n//    \"overwrite\": [\n//      {\n//        \"files\": [\n//          \"apidoc/**.md\"\n//        ],\n//        \"exclude\": [\n//          \"**/bin/**\",\n//          \"**/obj/**\",\n//          \"_site_pdf/**\"\n//        ]\n//      }\n//    ],\n//    \"dest\": \"_site_pdf\"\n//  }\n}"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.md",
          "type": "blob",
          "size": 0.13671875,
          "content": "---\nlayout: HubPage\nms.topic: hub-page\nhide_bc: true\ntitle: \ndescription: \nms.date: \"2019.6.29\"\n---\n\n# Surging\n\n## 简介\n\n## 社区愿景\n\n"
        },
        {
          "name": "logo.jpg",
          "type": "blob",
          "size": 5.76171875,
          "content": null
        },
        {
          "name": "sh.exe.stackdump",
          "type": "blob",
          "size": 0.6943359375,
          "content": "Stack trace:\nFrame        Function    Args\n00000010002  0018005E0DE (0018023E7F0, 00180230C39, 00000010002, 000FFFFBA00)\n00000010002  001800468F9 (00000000002, 00180320420, 00000000002, 00180320420)\n00000010002  00180046932 (00000000002, 00180320730, 00000010002, 00000000008)\n00000010002  0018005799C (00000000000, 00180230F2F, 00180047D9E, 635C655C785C655C)\n000FFFFCCD0  00180057A40 (745C685C275C205C, 3A5C735C705C745C, 695C675C2F5C2F5C, 625C755C685C745C)\n000FFFFCCD0  00180047081 (00000000000, 00000000000, 00000000000, 00000000000)\n00000000000  00180045A03 (00000000000, 00000000000, 00000000000, 00000000000)\n000FFFFFFF0  00180045AB4 (00000000000, 00000000000, 00000000000, 00000000000)\nEnd of stack trace\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "toc.yml",
          "type": "blob",
          "size": 0.138671875,
          "content": "- name: 开发者文档\n  href: docs/index\n  homepage: docs/index.md\n\n- name: 博文\n  href: docs/blogs/index\n  homepage: docs/blogs/index.md "
        }
      ]
    }
  ]
}