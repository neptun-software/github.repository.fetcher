{
  "metadata": {
    "timestamp": 1736711087611,
    "page": 884,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "stella3d/job-system-cookbook",
      "stars": 1418,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.412109375,
          "content": "/[Ll]ibrary/\n/[Tt]emp/\n/[Oo]bj/\n/[Bb]uild/\n/[Bb]uilds/\n/Assets/AssetStoreTools*\n\n# Visual Studio 2015 cache directory\n/.vs/\n\n# Autogenerated VS/MD/Consulo solution and project files\nExportedObj/\n.consulo/\n*.csproj\n*.unityproj\n*.sln\n*.suo\n*.tmp\n*.user\n*.userprefs\n*.pidb\n*.booproj\n*.svd\n*.pdb\n\n# Unity3D generated meta files\n*.pidb.meta\n\n# Unity3D Generated File On Crash Reports\nsysinfo.txt\n\n# Builds\n*.apk\n*.unitypackage\n"
        },
        {
          "name": "Assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.046875,
          "content": "MIT License\n\nCopyright (c) 2018 Stella Cannefax\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "ProjectSettings",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.0068359375,
          "content": "# Unity Technologies management should be ashamed of what they have done to all our work\n\nWhen I wrote this code, Unity was still a promising game engine, one I was proud to work for.\n\nNow that the shortsightedness of the c-suite there has flushed so much of our good work down the drain, it's hard to say that anyone should be excited about the engine, even though the C# job system remains an incredible accomplishment and developer experience.\n\n## John Riccitiello Can Suck My Dick And Balls\n\nfuck you \n\nactual readme below\n\nC# Job System Cookbook\n=======================\n\nThis is a repo of examples I've written to learn how to use the C# job system to write systems at scale, here for reference and sharing.  \n\nThe goal of this repo is making it clearer how you can _structure_ your data, _schedule_ your jobs, and use the results. \nSo, the examples use easy to understand problems & algorithms. \n\nThis repo does not cover using C# jobs with the Entity Component System. Please see the [official example repo](https://github.com/Unity-Technologies/EntityComponentSystemSamples) for more on that.\n\nEach example script has a corresponding scene where it's set up.\n\n## Job System Details\n\nYou can use the job system in Unity [2018.x](https://unity3d.com/get-unity/update) right now. \nI recommend 2018.2 for these examples now.\n\nFor a detailed look into how the C# job system works, please watch the [Unite Austin presentation](https://www.youtube.com/watch?v=AXUvnk7Jws4) if you haven't seen it.  There is also a [Q & A from Unite Berlin in 2018](https://www.youtube.com/watch?v=swCpyJy4FEs)\n\n## Examples\n\nNote: examples in this repo use `LateUpdate()` as an easy way to handle completing jobs later than we schedule them, but in real code you might want to schedule the jobs early in `Update` (using Script Execution Order maybe) so you can use the result later in the same frame.\n\nAll examples demonstrate the use of persistently-allocated job memory.\n\n# [Realtime Image Processing (with Burst compilation)](Assets/Scripts/WebcamProcessing.cs)\n\nProcess input from a webcam in real time using Burst-compiled jobs.\n\nthe job details are all in [this file](/Assets/Scripts/ImageProcessing/BurstRGBJobs.cs), and the above file is the main script.\n\nThis demo implements 5 different effects , all based around operating on a pixel only if it's color channel value is over some threshold\n\nTo change the color thresholds, select the `WebcamDisplay` in the heirarchy of the example scene & check out the `Webcam Processing` component.  You can also change the scanline effect as well as select a webcam resolution that works for you there.\n\n### [Change Mesh Vertices & Normals Every Frame](Assets/Scripts/MeshComplexParallel.cs)\n\nModify all vertices & normals of a mesh in parallel every frame.\n\nThis is the *most visually interesting example*.  Uses a more complex single job.\n\n### [Change Mesh Vertices Every Frame](Assets/Scripts/MeshVerticesParallelUpdate.cs)\n\nModify all 20678 vertices of a mesh in parallel every frame, using Perlin noise & sin(time).\n\nUses a single job.\n\n### [Accelerate 10000 Cubes](Assets/Scripts/AccelerationParallelFor.cs)\n\nFirst determine velocities, then change positions based on those velocities.\n\nDemonstrates using the TransformAccessArray, necessary for doing transform operations in jobs.    \n\n### [Point & Bounds Intersection Checks](Assets/Scripts/CheckBoundsParallelFor.cs)\n\nCheck a `Vector3` and a `Bounds` for intersection against a list of 10000 `Bounds`.\n\nDemonstrates running 2 independent jobs. \n\n### [Ray / Bounds Intersection Checks](Assets/Scripts/RayBoundsIntersection.cs)\n\nCheck a `Ray` for intersection with a large `Bounds` array in two steps.\n\nDemonstrates reducing an array of checks to a smaller list, and using temporarily-allocated job memory. \n\n### [Point Cloud Generation & Processing](Assets/Scripts/PointCloudProcessing.cs)\n\nGenerates a cloud of 10000 points, then calculates magnitudes & normalizes the points.\n\n\n## Further Examples\n\nKeijiro Takahashi has a [great example of using the job system with ECS](https://github.com/keijiro/Voxelman)\n\n\n\n"
        }
      ]
    }
  ]
}