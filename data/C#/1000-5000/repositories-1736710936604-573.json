{
  "metadata": {
    "timestamp": 1736710936604,
    "page": 573,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "git-tfs/git-tfs",
      "stars": 1936,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 1.275390625,
          "content": "; Visual Studio Extension : http://visualstudiogallery.msdn.microsoft.com/c8bccfe2-650c-4b42-bc5c-845e21f96328\n; See http://editorconfig.org/ for more informations\n; Top-most EditorConfig file\nroot = true\n\n[*]\n; Windows-style newlines - Commented out as we are normalizing the line endings\n; for all text files via the .gitattribute setting.\n; Specifying it here (and especially hardcoding it to a specific value)\n; causes trouble for systems where core.eol = LF  (or on a Linux system, where the\n; native line ending is LF as well, as then the .editorconfig and .git have a different\n; idea about the correct line ending). Instead, assume that the user has a sane\n; editor which will not convert the line ending of the files on a whim and rely on\n; the .gitattribues to always use LF on checked in files.\n; end_of_line = CRLF\n\n; 4-column space indentation\n[*.cs]\nindent_style = space\nindent_size = 4\ndotnet_sort_system_directives_first = true\ndotnet_separate_import_directive_groups = true\n\n[*.cake]\nindent_style = tab\nindent_size = 4\n\n[*.md]\n# Ensure that the markdown files always end with a newline, which is e.g. especially\n# helpful for the docs/release/NEXT.md to ensure that adding a new entry/line\n# doesn't touch the previous one to reduce the diff & merge conflicts.\ninsert_final_newline = true\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.5517578125,
          "content": "# See https://help.github.com/articles/dealing-with-line-endings for help\n\n# Set default behaviour, in case users don't have core.autocrlf set.\n* text=auto\n\n# Explicitly declare text files we want to always be normalized and converted \n# to native line endings on checkout.\n*.cs text diff=csharp\n\n# Declare files that will always have CRLF line endings on checkout.\n*.sln text eol=crlf\n\n# paket.exe will always create this file with CRLF line ending\nsrc/.paket/Paket.Restore.targets text eol=crlf\n\n# These files are binaries\nsrc/GitTfsTest/Fixtures/vtccds/* binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 5.04296875,
          "content": "# Git-Tfs Specific Ignored Files\n/PersonalTokens.config\n*.msi\n*.wxs\n*.wixobj\n.*.swp\nGitTfs/git2.*\n\n# 3rd-party stuff copied during build\n/packages\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.suo\n*.vs/\n*.vscode/\n*.user\n*.userosscache\n*.sln.docstates\n\n/tmp\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n\n# Visual Studio Code workspace settings directory\n.vscode/\n\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n**/Properties/launchSettings.json\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n*.v3.ncrunchsolution.user\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Typescript v1 declaration files\ntypings/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# DevTracker files\n*.dt\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n/src/packages/\n/src/GitTfsTest.dll.xml\n/src/.build\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.8564453125,
          "content": "## Contributing [documentation](https://github.com/git-tfs/git-tfs/tree/master/doc)\n\nWe'll try to review and merge documentation changes quickly.\n\nIf you see something easy to change, you can probably even make the change in your browser!\n\nWe are a small team and each of us have a different tfs history with different edge cases... Each fix or new use case supported will be much appreciated and will permit to build a tool usable for a maximum of people. Do not hesitate to contribute. Every little help will be appreciated!!\n\n## Contributing code\n\n0. Open an [issue](https://github.com/git-tfs/git-tfs/issues) if you want to add a new feature. That way, we could give you some advices, tell you where to look for in the source code,...\n\n1. In your git-tfs clone, run `git config core.autocrlf true` so that all the line endings are unix line endings when you commit.\n\n2. **Read the source.** It's hopefully not that intimidating.\n\n3. **Check for issues.** There are a few issues that are low-hanging fruit. Feel free to pick them.\n\n4. **Ask questions.** Feel free to drop me a line, or ask a question over at the [google group](http://groups.google.com/group/git-tfs-dev/), or join `#git-tfs` on FreeNode.\n\n5. Verify that your editor is configured to use 4 spaces instead of tabs. You could even install the [EditorConfig Extension for VisualStudio](http://visualstudiogallery.msdn.microsoft.com/c8bccfe2-650c-4b42-bc5c-845e21f96328) ([such plugins exists for other editors](http://editorconfig.org/#download)), and the good space configuration will be set automatically when opening the git-tfs solution.\n\n6. Run the build task `.\\build.ps1 -Target \"FormatCode\"` before committing to keep code formatting consistent (and make pull request review easier and quicker!)\n\n## Pull Requests\n\nHere are some tips on creating a pull request:\n\n1. Write that awesome code. :sparkles:\n\n2. Make sure the existing unit tests don't break. We try to keep the unit tests\n[easy to run](https://github.com/git-tfs/git-tfs/blob/master/doc/running-the-unit-tests.md).\n\n3. We like new unit tests. If you can unit test your code, do so.\nOne of the pain points of the current git-tfs codebase is that parts of it are very difficult to unit test.\nIt's slowly getting less painful to unit test. One thing to try is to write an integration test\nthat runs git-tfs with the VsFake driver, similar to how the clone tests are written.\n\n4. If you modify code in any of the client adapters (GitTfs.Vs*), please try it out with as many versions of the TFS client libraries as you can.\nWhen you submit the pull request, include a note about which versions you have tried to compile with, and which ones you have tested with.\n\n5. Include [documentation](https://github.com/git-tfs/git-tfs/tree/master/doc) for externally-visible changes.\n\n6. Update the [release notes for the next version](https://github.com/git-tfs/git-tfs/tree/master/doc/release-notes).\n"
        },
        {
          "name": "GitExtensions.settings",
          "type": "blob",
          "size": 5.3427734375,
          "content": "﻿<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<dictionary>\n  <item>\n    <key>\n      <string>BuildServer.AppVeyor.AppVeyorAccountName</string>\n    </key>\n    <value>\n      <string>pmiossec</string>\n    </value>\n  </item>\n  <item>\n    <key>\n      <string>BuildServer.AppVeyor.AppVeyorDisplayGitHubPullRequests</string>\n    </key>\n    <value>\n      <string>false</string>\n    </value>\n  </item>\n  <item>\n    <key>\n      <string>BuildServer.AppVeyor.AppVeyorLoadTestsResults</string>\n    </key>\n    <value>\n      <string>false</string>\n    </value>\n  </item>\n  <item>\n    <key>\n      <string>BuildServer.AppVeyor.AppVeyorProjectName</string>\n    </key>\n    <value>\n      <string>git-tfs-v2qcm</string>\n    </value>\n  </item>\n  <item>\n    <key>\n      <string>BuildServer.EnableIntegration</string>\n    </key>\n    <value>\n      <string>true</string>\n    </value>\n  </item>\n  <item>\n    <key>\n      <string>BuildServer.ShowBuildSummaryInGrid</string>\n    </key>\n    <value>\n      <string>true</string>\n    </value>\n  </item>\n  <item>\n    <key>\n      <string>BuildServer.TeamCity.BuildIdFilter</string>\n    </key>\n    <value>\n      <string>bt787</string>\n    </value>\n  </item>\n  <item>\n    <key>\n      <string>BuildServer.TeamCity.BuildServerUrl</string>\n    </key>\n    <value>\n      <string>https://teamcity.jetbrains.com</string>\n    </value>\n  </item>\n  <item>\n    <key>\n      <string>BuildServer.TeamCity.LogAsGuest</string>\n    </key>\n    <value>\n      <string>false</string>\n    </value>\n  </item>\n  <item>\n    <key>\n      <string>BuildServer.TeamCity.ProjectName</string>\n    </key>\n    <value>\n      <string>GitTfs</string>\n    </value>\n  </item>\n  <item>\n    <key>\n      <string>BuildServer.Type</string>\n    </key>\n    <value>\n      <string>AppVeyor</string>\n    </value>\n  </item>\n  <item>\n    <key>\n      <string>RevisionLinkDefs</string>\n    </key>\n    <value>\n      <string>&lt;?xml version=\"1.0\" encoding=\"utf-16\"?&gt;\n&lt;ArrayOfGitExtLinkDef xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n  &lt;GitExtLinkDef&gt;\n    &lt;SearchInParts&gt;\n      &lt;RevisionPart&gt;RemoteBranches&lt;/RevisionPart&gt;\n    &lt;/SearchInParts&gt;\n    &lt;RemoteSearchInParts&gt;\n      &lt;RemotePart&gt;URL&lt;/RemotePart&gt;\n    &lt;/RemoteSearchInParts&gt;\n    &lt;LinkFormats&gt;\n      &lt;GitExtLinkFormat&gt;\n        &lt;Caption&gt;PR#{0}&lt;/Caption&gt;\n        &lt;Format&gt;https://github.com/git-tfs/git-tfs/pull/{0}&lt;/Format&gt;\n      &lt;/GitExtLinkFormat&gt;\n    &lt;/LinkFormats&gt;\n    &lt;Name&gt;GitHub-Pull Requests&lt;/Name&gt;\n    &lt;SearchPattern&gt;pull/(\\d+)$&lt;/SearchPattern&gt;\n    &lt;Enabled&gt;true&lt;/Enabled&gt;\n    &lt;UseRemotesPattern&gt;upstream|origin&lt;/UseRemotesPattern&gt;\n    &lt;UseOnlyFirstRemote&gt;true&lt;/UseOnlyFirstRemote&gt;\n  &lt;/GitExtLinkDef&gt;\n  &lt;GitExtLinkDef&gt;\n    &lt;SearchInParts&gt;\n      &lt;RevisionPart&gt;Message&lt;/RevisionPart&gt;\n    &lt;/SearchInParts&gt;\n    &lt;RemoteSearchInParts&gt;\n      &lt;RemotePart&gt;URL&lt;/RemotePart&gt;\n    &lt;/RemoteSearchInParts&gt;\n    &lt;LinkFormats&gt;\n      &lt;GitExtLinkFormat&gt;\n        &lt;Caption&gt;#{0}&lt;/Caption&gt;\n        &lt;Format&gt;https://github.com/git-tfs/git-tfs/issues/{0}&lt;/Format&gt;\n      &lt;/GitExtLinkFormat&gt;\n    &lt;/LinkFormats&gt;\n    &lt;Name&gt;GitHub-Issue&lt;/Name&gt;\n    &lt;SearchPattern&gt;#(\\d+)&lt;/SearchPattern&gt;\n    &lt;Enabled&gt;true&lt;/Enabled&gt;\n    &lt;UseRemotesPattern&gt;upstream|origin&lt;/UseRemotesPattern&gt;\n    &lt;UseOnlyFirstRemote&gt;true&lt;/UseOnlyFirstRemote&gt;\n  &lt;/GitExtLinkDef&gt;\n  &lt;GitExtLinkDef&gt;\n    &lt;SearchInParts&gt;\n      &lt;RevisionPart&gt;Message&lt;/RevisionPart&gt;\n    &lt;/SearchInParts&gt;\n    &lt;RemoteSearchInParts&gt;\n      &lt;RemotePart&gt;URL&lt;/RemotePart&gt;\n    &lt;/RemoteSearchInParts&gt;\n    &lt;LinkFormats&gt;\n      &lt;GitExtLinkFormat&gt;\n        &lt;Caption&gt;Commit on Github&lt;/Caption&gt;\n        &lt;Format&gt;https://github.com/git-tfs/git-tfs/commit/%COMMIT_HASH%&lt;/Format&gt;\n      &lt;/GitExtLinkFormat&gt;\n      &lt;GitExtLinkFormat&gt;\n        &lt;Caption&gt;Project on Github&lt;/Caption&gt;\n        &lt;Format&gt;https://github.com/git-tfs/git-tfs&lt;/Format&gt;\n      &lt;/GitExtLinkFormat&gt;\n    &lt;/LinkFormats&gt;\n    &lt;Name&gt;GitHub&lt;/Name&gt;\n    &lt;SearchPattern&gt;.*&lt;/SearchPattern&gt;\n    &lt;Enabled&gt;true&lt;/Enabled&gt;\n    &lt;UseRemotesPattern&gt;upstream|origin&lt;/UseRemotesPattern&gt;\n    &lt;UseOnlyFirstRemote&gt;true&lt;/UseOnlyFirstRemote&gt;\n  &lt;/GitExtLinkDef&gt;\n  &lt;GitExtLinkDef&gt;\n    &lt;SearchInParts&gt;\n      &lt;RevisionPart&gt;Message&lt;/RevisionPart&gt;\n    &lt;/SearchInParts&gt;\n    &lt;RemoteSearchInParts&gt;\n      &lt;RemotePart&gt;URL&lt;/RemotePart&gt;\n    &lt;/RemoteSearchInParts&gt;\n    &lt;LinkFormats&gt;\n      &lt;GitExtLinkFormat&gt;\n        &lt;Caption&gt;AppVeyor&lt;/Caption&gt;\n        &lt;Format&gt;https://ci.appveyor.com/project/pmiossec/git-tfs-v2qcm/history&lt;/Format&gt;\n      &lt;/GitExtLinkFormat&gt;\n    &lt;/LinkFormats&gt;\n    &lt;Name&gt;AppVeyor&lt;/Name&gt;\n    &lt;SearchPattern&gt;.*&lt;/SearchPattern&gt;\n    &lt;Enabled&gt;true&lt;/Enabled&gt;\n    &lt;UseRemotesPattern&gt;upstream|origin&lt;/UseRemotesPattern&gt;\n    &lt;UseOnlyFirstRemote&gt;true&lt;/UseOnlyFirstRemote&gt;\n  &lt;/GitExtLinkDef&gt;\n&lt;/ArrayOfGitExtLinkDef&gt;</string>\n    </value>\n  </item>\n</dictionary>"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.935546875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 1.0302734375,
          "content": "Copyright 2009-2011 Software Engineering Professionals, Inc.\nCopyright 2011-2012 Matt Burke\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\nThis software distribution contains the following libraries:\n\nNDesk.Options, Copyright (C) 2008 Novell (http://www.novell.com)\nhttp://www.ndesk.org/Options\n\nLibGit2Sharp, Copyright (c) 2011-2012 LibGit2Sharp contributors\nhttps://github.com/libgit2/libgit2sharp/\n\nlibgit2, Copyright (C) 2009-2012 the libgit2 contributors\nhttp://libgit2.github.com/\n\nStructureMap, copyright 2004-2009 Jeremy D. Miller\nhttp://structuremap.sourceforge.net/\n"
        },
        {
          "name": "PersonalTokens.config.example",
          "type": "blob",
          "size": 0.634765625,
          "content": "//Github user name (to be able to create the release tag)\nGitHubUserAccount=[Place Holder... Replace this place holder by your github username!]\n//GitHub personal token. You can create one at https://github.com/settings/tokens (Add at least the scope 'repo' or 'public_repo')\nGitHub=[Place Holder... Replace this place holder by your personal token!]\n//Chocolatey token. Get it from you Chocolatey account https://chocolatey.org/account\nChocolatey=[Place Holder... Replace this place holder by your personal token!]\n//AppVeyor token to be able to trigger the release build.\nAppVeyor=[Place Holder... Replace this place holder by your personal token!]"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.603515625,
          "content": "## Introduction\n\n[git-tfs](http://git-tfs.com/) is a two-way bridge between TFS (Team Foundation Server) and git, similar to git-svn.\nIt fetches TFS commits into a git repository, and lets you push your updates back to TFS.\n\n[![git-tfs version](https://img.shields.io/github/release/git-tfs/git-tfs.svg?label=Latest%20Version:)](https://github.com/git-tfs/git-tfs/releases). See the [change history](https://github.com/git-tfs/git-tfs/releases) for details and download.\n\nIf you're having problems, check out the [troubleshooting](doc/TROUBLESHOOTING.md) page.\nAnd read [how to report an issue](doc/reporting-issues.md), before doing so ;)\n\n## We need your help\n\nThis project is no more **actively** maintained because we are no more users of TFS.\nThus being very useful, git-tfs is not exempt of not supported use cases.\nIf you encounter something missing or a problem, please contribute, we will be pleased to help you.\n\nAnd remember:\n\n>The fastest way to get an issue fixed is to submit a PR that fixes it.\n\n>The slowest way to get it fixed is to hope someone else will fix it.\n\n## Get git-tfs\n\nTo get a stable version:\n\n* Download a binary. Find it on the [release page](https://github.com/git-tfs/git-tfs/releases),\n* Using Chocolatey. If [Chocolatey](http://chocolatey.org/) is already installed on your computer, run `choco install gittfs` to install the [Chocolatey package](http://chocolatey.org/packages/gittfs)\n\nTo get a development version\n\n* Build from source code. See §[Building](#building) for more informations...\n* Download a package of the development version generated by the [last builds](https://ci.appveyor.com/project/pmiossec/git-tfs-v2qcm/branch/master/artifacts) (in the artifacts section).\n\n__Whatever the way you get git-tfs, you should have git-tfs.exe in your path (and git, too)__.\n\nAdd the git-tfs folder path to your PATH. You could also set it temporary (the time of your current terminal session) using :\n\n    set PATH=%PATH%;%cd%\\GitTfs\\bin\\Debug\n\n## Use git-tfs\n\nYou need .NET 4.6.2 and the 2012 or 2013 version of Team Explorer installed (or Visual Studio) depending on the version of TFS you want to target.\n\n### Help\n\n    #lists the available commands\n    git tfs help\n\n    #shows a summary of the usage of a given command\n    git tfs help <command>\n\n### Cloning\n\n    # [optional] find a tfs repository path to clone :\n    git tfs list-remote-branches http://tfs:8080/tfs/DefaultCollection\n\n    # clone the whole repository (wait for a while...) :\n    git tfs clone http://tfs:8080/tfs/DefaultCollection $/some_project <dist_folder_where_to_clone>\n\n    # or, if you're impatient (and want to work from the last changeset) :\n    git tfs quick-clone http://tfs:8080/tfs/DefaultCollection $/some_project <dist_folder_where_to_clone>\n\n    # or, if you're impatient (and want a specific changeset) :\n    git tfs quick-clone http://tfs:8080/tfs/DefaultCollection $/some_project -c=145\n\n**Note:** Before cloning your repository, please have a look at the [clone command doc](doc/commands/clone.md) or [advanced use cases](#more-advanced-use-cases) to discover options that could help you!\n\n### Working\n\n    cd some_project\n    git log # shows your TFS history, unless you did quick-clone\n    tf history # error: no workspace ;)\n\n    # [do work, do work, just using git], then...\n    # gets latest from TFS to the branch tfs/default :\n    git tfs fetch\n\n### Checkin\n\n    # report all the commits on TFS :\n    git tfs rcheckin\n\n    # or commit using the tfs checkin window\n    git tfs checkintool\n\n    # or commit with a message\n    git tfs checkin -m \"Did stuff\"\n\n    # or shelve your changes :\n    git tfs shelve MY_AWESOME_CHANGES\n\ngit-tfs is designed to work outside of any existing TFS workspaces.\n\n### More advanced use cases\n\nHave a look to more detailed git-tfs use cases:\n\n* [Working with no branches](doc/usecases/working_with_no_branches.md)\n* [Manage TFS branches with git-tfs](doc/usecases/manage_tfs_branches.md)\n* [Migrate your history from TFSVC to a git repository](doc/usecases/migrate_tfs_to_git.md)\n* [Working with shelvesets](doc/usecases/working_with_shelvesets.md)\n* [Git (ProGit v2 book)](https://git-scm.com/book/en/v2)\n* [Last ProGit2 release to cover Git Tfs and migration](https://github.com/progit/progit2/releases/tag/2.1.245)\n\n## Available commands / options\n\nThis is the complete list of commands in the master branch on github.\n\n### Repository setup\n\n* [list-remote-branches](doc/commands/list-remote-branches.md): *list tfs branches that can be cloned or initialized* - since [0.17](../../releases/tag/v0.17.0)\n* [clone](doc/commands/clone.md): *clone a tfs path/branch and its history in a git repository* - since 0.9\n* [quick-clone](doc/commands/quick-clone.md): *clone a specific changeset of a tfs path/branch in a git repository* - since 0.9\n* [bootstrap](doc/commands/bootstrap.md): *bootstrap an existing git-tfs repository cloned from an existing repository* - since [0.11][v0.11]\n* [init](doc/commands/init.md): *initialize a git-tfs repository (without getting changesets)* - since 0.9\n\n### Pull from TFS\n\n* [clone](doc/commands/clone.md): *clone a tfs path/branch and its history in a git repository* - since 0.9\n* [fetch](doc/commands/fetch.md): *get changesets from tfs and update the tfs remote* - since 0.9\n* [pull](doc/commands/pull.md): *get changesets from tfs, update the tfs remote and update your work* - since 0.9\n* [quick-clone](doc/commands/quick-clone.md): *clone a specific changeset (without history) of a tfs path/branch in a git repository* - since 0.9\n* [unshelve](doc/commands/unshelve.md): *fetch a tfs shelvesets in your repository* - since [0.11][v0.12]\n* [shelve-list](doc/commands/shelve-list.md): *list tfs shelvesets* - since [0.12][v0.12]\n* [labels](doc/commands/labels.md): *fetch tfs labels* - since [0.17](../../releases/tag/v0.17.0)\n\n### Push to TFS\n\n⚠ Read absolutely [this](doc/using-checkin-policies.md) if your TFVC repository use **Checkin policies** when check-in.\n\n* [rcheckin](doc/commands/rcheckin.md): *replicate your git commits as tfs changesets* - since [0.12][v0.12]\n* [checkin](doc/commands/checkin.md): *checkin your git commits as one tfs changeset* - since 0.10\n* [checkintool](doc/commands/checkintool.md): *checkin in tfs using the tfs checkin dialog* - since 0.10\n* [shelve](doc/commands/shelve.md): *create a shelveset from git commits* - since 0.9\n* [shelve-delete](doc/commands/shelve-delete.md): *delete a shelveset on tfs* - since 0.25\n\n### Manage TFS branches\n\n* [list-remote-branches](doc/commands/list-remote-branches.md): *list tfs branches that can be cloned or initialized* - since [0.17](../../releases/tag/v0.17.0)\n* [branch](doc/commands/branch.md): *manage (initialize, create, remove) tfs branches* - since [0.17](../../releases/tag/v0.17.0)\n\n### Other\n\n* [info](doc/commands/info.md): *get some informations about git-tfs and tfs*\n* [cleanup](doc/commands/cleanup.md): *clean some git-tfs internal objects* - since 0.10\n* [cleanup-workspaces](doc/commands/cleanup-workspaces.md): *clean tfs workspaces created by git-tfs* - since 0.10\n* [help](doc/commands/help.md): *get help on git-tfs commands* - since 0.9\n* [verify](doc/commands/verify.md): *verify the changesets fetched* - since [0.11][v0.11]\n* [autotag](doc/config.md#per-tfs-remote) option - since [0.12][v0.12]\n* [subtree](doc/commands/subtree.md): *manage sparse tfs pathes with git-tfs* - since [0.19](../../releases/tag/v0.19.0)\n* [reset-remote](doc/commands/reset-remote.md): *reset a tfs remote to a previous changeset to fetch again its history* - since [0.19](../../releases/tag/v0.19.0)\n* [checkout](doc/commands/checkout.md): *checkout a commit by a changeset id* - since [0.21](../../releases/tag/v0.21.0)\n* diagnostics (for git-tfs developers only) - since 0.9\n\n* [config file](doc/config.md)\n* For authentification with user credentials or using a PAT, [clone](doc/commands/clone.md#Authentication) command.\n\n## Building\n\n### Continuous Integration Status\n\n[![AppVeyor build status](https://ci.appveyor.com/api/projects/status/github/git-tfs/git-tfs?branch=master&svg=true&passingText=build%20%27master%27%20OK)](https://ci.appveyor.com/project/pmiossec/git-tfs-v2qcm/branch/master)\n( Great thanks to [<img src=\"https://www.appveyor.com/assets/img/favicons/favicon.ico\" height=\"20\"> AppVeyor](http://www.appveyor.com/)! )\n\n### Prerequisites\n\n* MSBuild (included in .NET 4)\n* Visual Studio >= 2017 (preferably >= 2019)\n\n### Get the source code and build\n\n    #get the source code\n    git clone git://github.com/git-tfs/git-tfs.git\n    cd git-tfs\\src\n\n    #building with Cake (in a powershell console). It will also run the unit tests ;)\n    .\\build.ps1\n\n    #help on the different targets\n    .\\build.ps1 -Target \"Help\"\n\n**Note:** if the build fails to build some `GitTfs.Vs201x` projects, just unload in Visual Studio all the projects you are not interested in to be able to build and use your own version.\nYou could also install, the Team Foundation Server Object Model for [Tfs 2012](https://visualstudiogallery.msdn.microsoft.com/f30e5cc7-036e-449c-a541-d522299445aa) ([chocolatey](https://chocolatey.org/packages/tfs2012objectmodel)) and [Tfs 2013](https://visualstudiogallery.msdn.microsoft.com/3278bfa7-64a7-4a75-b0da-ec4ccb8d21b6) ([chocolatey](https://chocolatey.org/packages/tfs2013objectmodel)).\n\n## Contributing\nContributions are always welcome. Thanks to all our [contributors](https://github.com/git-tfs/git-tfs/graphs/contributors)!\n\nPlease, read our short and simple [guidelines](CONTRIBUTING.md) and our doc on how to use [paket](doc/paket.md), the package manager we use.\n\nEspecially, don't forget:\n\n* to run the build task `.\\build.ps1 -Target \"FormatCode\"` before committing (to keep code formatting consistent, and pull request easier to review)\n* to indent your code using 4 spaces (even if `.editorconfig` should take care of that).\n\n## Migrations\nIf you're migrating a TFS server from 2008 or 2005 to 2010, you might want to [Specify Alternate TFS URLs](doc/specify-alternate-tfs-urls.md).\n\n[v0.11]: http://mattonrails.wordpress.com/2011/03/11/git-tfs-0-11-0-release-notes/ \"0.11 Release notes\"\n[v0.12]: http://sparethought.wordpress.com/2011/08/10/git-tfs-bridge-v0-12-released/\n\nIf you have questions or suggestions about how we could improve git-tfs you could go to [google group](http://groups.google.com/group/git-tfs-dev).\n\n[Example](http://sparethought.wordpress.com/2011/07/18/how-to-establish-git-central-repository-for-working-against-tfs-with-git-tfs-bridge/) of setting up central git repository that tracks TFS automatically.\n\n## Community\n\nDrop in and chat in [![gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/git-tfs/git-tfs?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\nWe also have a [mailing list](https://groups.google.com/group/git-tfs-dev).\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.8916015625,
          "content": "﻿#appveyor.yml reference: http://www.appveyor.com/docs/appveyor-yml\nimage: Visual Studio 2022\nclone_folder: c:\\gittfs\n# build cache to preserve files/folders between builds\ncache:\n  - src\\packages -> src\\paket.lock  # preserve \"packages\" directory in the root of build folder but will reset it if `paket.lock` is modified\ninit: []\nbuild_script:\n- ps: |\n    $env:configuration = \"Release\"\n    cd src\n    if($env:target -eq $null)\n    {\n      $target = \"AppVeyorBuild\"\n      echo \"target: $target\"\n      .\\build.ps1 -Target \"$target\" -Configuration $env:configuration -ScriptArgs '--isDryRun=true'\n    }\n    else\n    {\n      $target = $env:target\n      echo \"target: $target\"\n      .\\build.ps1 -Target \"$target\" -Configuration $env:configuration -ScriptArgs '--isDryRun=false --gitHubUserAccount=\"$env:gitHubUserAccount\" --gitHubToken=\"$env:gitHubToken\" --chocolateyToken=\"$env:chocolateyToken\"'\n    }\n\ntest: off\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}