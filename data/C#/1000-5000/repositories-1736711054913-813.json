{
  "metadata": {
    "timestamp": 1736711054913,
    "page": 813,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "castleproject/Windsor",
      "stars": 1523,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.125,
          "content": "root = true\n\n[*]\nindent_style = tab\n\n[*.csproj]\nindent_style = space\nindent_size = 2\n\n[*.cs]\nindent_style = tab\nindent_size = 4\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.01171875,
          "content": "* text=auto\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.10546875,
          "content": "# User-specific files\n*.suo\n*.user\n.vs\n_ReSharper*/\n*.csproj.ReSharper\n.cr\n\n# Build output\nbuild/\nbin/\nobj/\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 97.904296875,
          "content": "# Castle Windsor Changelog\n\n## 6.0.0 (2023-07-20)\n\nTarget Framework changes:\n- Added `net6.0` (@Jevonius, #630)\n- .NET Standard changed from 1.6 to 2.0 (@generik0, #572)\n- .NET Framework changed from 4.5 to 4.6.2\n\nEnhancements:\n- Added fast lookup to check for already registered types (@sqeezy, #618)\n- `Castle.Windsor.Extensions.DependencyInjection`: Change `Microsoft.Extensions.Logging` dependencies to their abstract counterparts (@ikkentim, #626, #624)\n\nBugfixes:\n- `Castle.Windsor.Extensions.DependencyInjection`: support parallel containers (@rvdginste, @generik0, #563, #577)\n\nBreaking Changes:\n- Microsoft.Extensions.Hosting related methods have been moved from the `Castle.Windsor.Extensions.DependencyInjection` package to the `Castle.Windsor.Extensions.Hosting` package (@ikkentim, #625, #628)\n- Obsolete APIs in `Castle.Facilities.Logging` have been removed. Extensions methods for built-in logging factories have been added, however `LogUsing<T>` is still ideal. (@Jevonius, #636)\n  - Removed enum `Castle.Facilities.Logging.LoggerImplementation`\n  - Removed constructor `Castle.Facilities.Logging.LoggingFacility(LoggerImplementation loggingApi)`\n  - Removed constructor `Castle.Facilities.Logging.LoggingFacility(LoggerImplementation loggingApi, string configFile)`\n  - Removed constructor `Castle.Facilities.Logging.LoggingFacility(string customLoggerFactory, string configFile)`\n  - Removed method `Castle.Facilities.Logging.LoggingFacility.LogUsing(LoggerImplementation loggingApi)`\n  - Removed method `Castle.Facilities.Logging.LoggingFacility.UseLog4Net()`\n  - Removed method `Castle.Facilities.Logging.LoggingFacility.UseLog4Net(string configFile)`\n  - Removed method `Castle.Facilities.Logging.LoggingFacility.UseNLog()`\n  - Removed method `Castle.Facilities.Logging.LoggingFacility.UseNLog(string configFile)`\n\n## 5.1.2 (2022-05-17)\n\n- Restrict `Castle.Core` dependency to 4.4.1+ and less than 5.x to prevent NuGet using 5.x which has breaking changes (@Jevonius, #610)\n\n## 5.1.1 (2020-12-08)\n\n- Upgrade minimum Castle.Core version to 4.4.1 (@generik0, #576)\n\nBugfixes:\n- Fix CollectionResolver to allow propagation of inline dependencies (@dvdwouwe, #562)\n- Allow DefaultNamingSubSystem derivatives to invalidate the cache which was accidentally removed in 5.1.0 (@nativenolde, #569)\n- Replace usage of obsolete Castle.Core.Internal.Lock (@generik0, #576)\n- Fix dictionary bug when using XML configuration; A reference to list components inside a dictionary didn't work (@ni-mi, #575)\n\n## 5.1.0 (2020-11-16)\n\nBugfixes:\n- .NET Extensions' DependencyInjection:\n  - Change WindsorServiceProviderFactory to follow SOLID behaviour (@generik0, #540)\n  - Fix \"An item with the same key has already been added\" exception related to scoped lifestyle (@generik0, #547)\n  - Fix issue using existing container with ASP.NET (@robertcoltheart, #548)\n  - Extra extensions for BasedOnDescriptor (@ltines, #554)\n  - Use generic registration instead of reflection (@robertcoltheart, #555)\n  - Use the container from the method call, not the root container (@generik0, #558)\n  - Add InvalidateCache to DependencyInjectionNamingSubsystem (@generik0, @twenzel, #556)\n\n## 5.1.0-beta001 (2020-06-17)\n\nEnhancements:\n- .NET Extensions' DependencyInjection support via new `Castle.Windsor.Extensions.DependencyInjection` package (@ltines, #517)\n- Enable explicitly specified null values to satisfy `System.Nullable<>` dependencies (@jnm2, #521)\n- Embed icon in NuGet packages (@generik0, #520)\n\nBugfixes:\n- Typed Factory: handle multiple calls to Dispose and Release after Dispose (@ivan-danilov. #458)\n\n## 5.0.1 (2019-09-18)\n\nBugfixes:\n- Fix `ProxyOptions` equality with additional interfaces (@DamirAinullin, #477)\n- WCF Facility: Fix exception message (@DamirAinullin, #476)\n- ASP.NET MVC Facility: Fix controller lookup to be case insensitive (@yitzchok, #480)\n- ASP.NET Core Facility: `FrameworkDependencyResolver` must not throw NRE if dependency has no type (e.g. depending on a named component) (@dariuslf, #489)\n- ASP.NET Core Facility: Register ViewComponents and TagHelpers correctly (@dariuslf, #489)\n- ASP.NET Core Facility: Allow crosswiring multiple implementations of the same service (@dariuslf, #489)\n- ASP.NET Core Facility: Treat TagHelper classes with `__Generated__` in their name (e.g. TagHelpers generated for ViewComponents) as framework classes (@dariuslf, #489)\n\n## 5.0.0 (2019-02-12)\n\nBugfixes:\n- Fixed first-chance HandlerException for optional parameters (@jnm2, #450)\n\n## 5.0.0-beta001 (2018-10-26)\n\nEnhancements:\n- Upgraded to Castle.Core 4.2.0 to 4.3.1 (@fir3pho3nixx, #413)\n- Created Castle.Facilities.AspNetCore facility to support ASP.NET Core web applications on .NET Core and .NET Framework (@fir3pho3nixx, #120)\n- Created Castle.Facilities.AspNet.Mvc facility to support ASP.NET MVC web applications on .NET Framework (@fir3pho3nixx, #283)\n- Created Castle.Facilities.AspNet.WebApi facility to support ASP.NET Web API IIS and self hosted applications on .NET Framework (@fir3pho3nixx, #283)\n- Added XML documentation to BeginScope and RequireScope lifetime extensions (@jonorossi)\n- Upgraded build to use NUnit Adapters (@fir3pho3nixx, #243)\n- Make formatting of type names with `TypeUtil.ToCSharpString` (and hence in diagnostic messages) resemble C# more closely (@stakx, #404, #406)\n\nBreaking Changes:\n- Built-in System.Web support has been moved to the new Castle.Facilities.AspNet.SystemWeb facility (@fir3pho3nixx, #283)\n- Removed obsolete ActAs, Parameters, Properties and ServiceOverrides methods from component registration (@fir3pho3nixx, #338)\n- Removed obsolete indexer, AddComponent*, AddFacility and Resolve methods from IKernel and IWindsorContainer (@fir3pho3nixx, #338)\n- Facility XML configuration specifying an 'id' attribute will now throw, it has been ignored since v3.0 (@fir3pho3nixx, #338)\n- Removed deprecated classes `AllTypes` and `AllTypesOf` (@fir3pho3nixx, #338)\n- Removed deprecated `BasedOn` methods that reset registrations when fluently chained (@fir3pho3nixx, #338)\n- Removed deprecated member `LifestyleHandlerType` on `CustomLifestyleAttribute` (@fir3pho3nixx, #338)\n- Removed Event Wiring, Factory Support and Synchronize facilities (@jonorossi, #403)\n- Arguments class and Resolve overloads refactor (@fir3pho3nixx, @jonorossi, #444)\n  - Removed `WindsorContainer.Resolve(object/IDictionary)` overloads in favour of new `WindsorContainer.Resolve(Arguments)`\n  - Reworked `Arguments` class, including to no longer implement `IDictionary`\n  - Removed `IArgumentsComparer[]` constructors from `Arguments`\n  - Added `WindsorContainer.Resolve(IEnumerable<KeyValuePair<string, object>>)` extension methods\n  - Changed `CreationContext.AdditionalArguments` to use `Arguments` instead of `IDictionary`\n  - Replaced `ComponentDependencyRegistrationExtensions(Insert, InsertAnonymous, InsertTyped, InsertTypedCollection)` with `Add`, `AddNamed` and `AddTyped` `Arguments` instance methods\n  - Changed `ComponentRegistration.DependsOn` and `ComponentRegistration.DynamicParameters` to use `Arguments` via `DynamicParametersDelegate`\n  - Added `ComponentRegistration.DependsOn(Arguments)` overload\n  - Changed `ComponentModel` `CustomDependencies` and `ExtendedProperties` to use `Arguments` instead of `IDictionary`\n  - Changed `IComponentModelBuilder.BuildModel` to use `Arguments` instead of `IDictionary`\n  - Changed `ILazyComponentLoader.Load` to use `Arguments` instead of `IDictionary`\n\n## 4.1.1 (2018-10-15)\n\nBugfixes:\n- Fixed components resolved from typed factories being disposed along with unrelated objects (@jnm2, #439)\n\n## 4.1.0 (2017-09-28)\n\nBugfixes:\n- Fix warnings regarding non-existent `System.ComponentModel.TypeConverter` NuGet package by updating minimum Castle Core version to 4.1.0 (#321)\n- Fix disposal of faulted WCF client channels (@jberezanski, #322)\n- Fix binding errors because assembly version had too much detail, assembly version is now x.0.0.0 (@fir3pho3nixx, #329)\n- Update Castle Core to 4.2.0 to resolve assembly version problems because Castle Core also had too much detail\n- Explicit package versioning applied within solution to avoid maligned NuGet upgrades for lock step versioned packages (@fir3pho3nixx, https://github.com/castleproject/Core/issues/292)\n- Fix open generic handler state issues where wrong constructor gets chosen for open generic service types (@fir3pho3nixx, #136)\n- Fixed typed factory out of order disposal (@jnm2, #344)\n\nDeprecations:\n- Logging Facility's `LoggerImplementation` enum, `UseLog4Net` and `UseNLog` methods are deprecated in favour of `LogUsing<T>`, this includes the `loggingApi` property for XML configuration (@jonorossi, #327)\n\n## 4.0.0 (2017-07-12)\n\nBreaking Changes:\n- Remove .NET 3.5, .NET 4.0 and .NET 4.0 Client Profile support (@fir3pho3nixx, #173, #180, #177, #185)\n- Update Castle.Core dependency to 4.0.0 (@alinapopa, #235)\n- Removed ActiveRecord, NHibernate and Remoting facilities (@jonorossi, #205)\n\nEnhancements:\n- Add .NET Standard and .NET Core support (@alinapopa, @fir3pho3nixx, @jonorossi, #145)\n\nBugfixes:\n- Fix IL interpretation of `Ldarg_N` from LOCAL 0 to LOCAL [0,1] in OpCodes so test `FluentRegistrationTestCase.Can_publish_events_via_AllTypes` could publish events again on Windows 10 Home (build 14393.693) VS 2015 Update 3 using .NET 4.x (@fir3pho3nixx, #168)\n- Fix race condition in PoolableLifestyleManager creating a pool (@krinmik, #72)\n- Fix race condition in WindsorContainer not generating unique names (#301)\n\n## 3.4.0 (2017-01-23)\n\n- Fix case sensitivity issue that can cause UsingFactoryMethod to fail (@dohansen, #116)\n- Fix project and icon URLs in NuGet packages\n- Add PDB source indexing (@ivan-danilov, #137)\n- Fix unit test with weak reference broken by garbage collector changes in .NET 4.6.x (@ivan-danilov, #138)\n- Fix performance counter instances hanging around after the process using Windsor has ended (@mackenzieajudd, #146, #149)\n- Fix version of Castle.Core dependency in NuGet packages to indicate Castle.Core 4.0 is incompatible (#161)\n\n## 3.3.0 (2014-05-18)\n\n- implemented #57 - build NuGet and Zip packages from TeamCity - contributed by Blair Conrad (@blairconrad)\n- implemented #53 - Remove dependency on IKernel/IWindsorContainer from CallContextLifetimeScope\n- implemented #52 - Add option to start startable components manually - based on pull request #37 from @jfojtl\n- implemented #51 - CollectionResolved should support read-only collections in .NET 4.5+\n- implemented #45 - use HttpApplication.RegisterModule in .NET 4.5 for PerWebRequest lifestyle - contributed by @BredStik\n- fixed #59 - Fixed missing DuplexChannelBuilder GetChannel methods. - contributed by David Welch (@djwelch)\n- fixed #50 - XML Config Array Parameters not populating when registering multiple dependencies - contributed by Dale Francis (@dalefrancis88)\n- fixed #47 - Fixed 'consut' typo to 'consult'. - contributed by Mads Tjørnelund Toustrup (@madstt)\n- fixed #38 - Pooled items not being disposed properly - contributed by @mvastarelli\n- fixed #34 - Deadlock - DefaultNamingSubsystem.GetHandlers() vs DefaultGenericHandler.type2SubHandler - contributed by Anton Iermolenko (@anton-iermolenko)\n- fixed #30 - Attempting to resolve a non-generic type with a backing generic implementation causes an exception to be thrown\n\n## 3.2.1 (2013-07-22)\n\n- fixed IOC-349 - SerializationException - Type is not resolved for member \"Castle.MicroKernel.Lifestyle.Scoped.CallContextLifetimeScope+SerializationReference, ...\n\n## 3.2.0 (2013-02-16)\n\n- implemented IOC-375 - List duplicate registrations that are registered through convention\n- implemented IOC-366 - support scoped lifestyle in XML config\n- implemented IOC-365 - Provide convenience methods in the registration API to bind to nearest subgraph (in addition to existing - widest)\n- implemented IOC-362 - New container diagnostic - duplicated dependencies\n- implemented IOC-360 - Ability to register types based on one or several of multiple bases\n- implemented IOC-358 - add ability to specify dependency on an embedded resource\n- implemented IOC-357 - Provide some internal logging in Windsor to be able to see non-critical errors\n- implemented IOC-355 - Add a mechanism to mark constructors as unselectable for injection, much like DoNotWireAttribute is for property injection\n- implemented IOC-353 - Add Classes.FromAssemblyInThisApplication() for parity with FromAssembly class\n- implemented IOC-348 - Explict sort order for convention-based configuration would be nice\n- fixed FACILITIES-160 - Wcf Facility doesn't support multiple IErrorHandlers\n- fixed IOC-374 - Container.Register causing NotSupportedException in ASP .NET MVC 4.\n- fixed IOC-373 - Open Generics won't resolve with LateBoundComponent Implementation\n- fixed IOC-372 - Performance Counters not updated on releasing a typed factory\n- fixed IOC-371 - AssemblyFilter cannot find assemblies on case-sensitive filesystems\n- fixed IOC-370 - Deadlock\n- fixed IOC-369 - Probably bug with generic interceptors\n- fixed IOC-364 - It is impossible to use bound lifestyle with chain of components binding to innermost one\n- fixed IOC-359 - Property filtering API is confusing and buggy\n- fixed IOC-356 - Specifying a hook should be enough to create an implementation-less proxy\n- fixed IOC-354 - Deadlock in pooled lifestyle under heavy load\n- fixed IOC-334 - FacilityConfig is null in facility Init()\n- fixed IOC-321 - TypedFactory with singleton lifestyle and child containers\n- fixed IOC-300 - OnCreate does not work for generic components\n\nBreaking Changes:\n\nchange - the following methods were removed:\n\tIHandler IHandlerFactory.Create(ComponentModel model, bool isMetaHandler)\n\tIHandler IKernelInternal.AddCustomComponent(ComponentModel model, bool isMetaHandler)\n\tvoid IKernelInternal.RegisterHandler(String key, IHandler handler, bool skipRegistration)\n\tIHandler DefaultKernel.AddCustomComponent(ComponentModel model, bool isMetaHandler)\n\t\tthe following methods were added:\n\tIHandler IKernelInternal.CreateHandler(ComponentModel model)\n\tvoid IKernelInternal.RaiseEventsOnHandlerCreated(IHandler handler)\nreason - In order to avoid potential deadlocks that were possible when the container was\n\tstarting and certain combination of open generic components was involved the API was\n\tmodified to allow limiting the scope of locking when using open generic components.\nissue - IOC-370 (http://issues.castleproject.org/issue/IOC-370)\nfix - the changes occur in internal API and should not impact users. If you are impacted ask for\n\thelp on the castle-users group on Google Groups.\n\nchange - .Properties() methods in registration API have changed behavior and are obsolete now.\n\tWhen calling .Properties() on a component multiple times, subsequent calls with now only\n\tbe passed properties for which previuos calls returned false.\nreason - The API was not behaving the way most users expected and the way it was structured\n\tit was hard to use.\nissue - IOC-359 (http://issues.castleproject.org/issue/IOC-359)\nfix - use either overload taking PropertyFilter enum, or one of the two new methods:\n\tPropertiesIgnore() and PropertiesRequire().\n\nchange - AbstractComponentActivator constructor takes IKernelInternal instead of IKernel now\nreason - IKernelInternal exposes a logger which allows activators to log information about their behavior.\nissue - IOC-359 (http://issues.castleproject.org/issue/IOC-357)\nfix - update the signature of your custom activator to take IKernelInternal instead of IKernel.\n\n## 3.1.0 (2012-08-05)\n\n- fixed IOC-347 - WithServiceAllInterfaces throws exception (regression)\n\nBreaking Changes:\n\nchange - Windsor will no longer allow components from parent container to have dependencies from\n\tchild container when resolving via child container.\n\tClass ParentHandlerWithChildResolver was renamed to ParentHandlerWrapper\nimpact - low\nfixability - medium\ndescription - Previously in some cases, when resolving from child container Windsor would allow\n\tcomponent from the parent container to depend on components from a child container.\n\tThis would lead to all sorts of problems (child coomponents leaking to parent scope, parent\n\tcomponents being released prematurely when disposing of the child container etc.\n\tOverall this behavior was a mess, and was removed.\n\tSee http://issues.castleproject.org/issue/IOC-345 for more details\nfix - If you were depending on the old behavior it is best to restructure your dependencies so\n\tyou don't have to have those inverted dependencies.\n\tSince each scenario is different it's best to discuss any questions you may have on the user\n\tgroup.\n\nchange - IHandler.SupportsAssignable(Type) method has been added\nimpact - low\nfixability - easy\ndescription - This was added to better support IGenericServiceStrategy on generic handlers when\n\tcalling IKernel.GetAssignableHandlers(Type). Now the handler can decide whether it wants to\n\tconsider itself assigmable to given service.\nfix - This change affects you only if you're implementing custom IHandler. Implementation is\n\tdependent on your usage and semantics you want to support for this scenario. When in doubt\n\task on castle-users-group on Google Groups.\n\nchange - System.String, and some other types can no longer be registered as a service\n\tin the container\nimpact - low\nfixability - easy\ndescription - This is something that probably should never have made it into the codebase. Now\n\tif you try to register String, a collection of strings or collection of value types Windsor\n\twill throw an ArgumentException and not allow you to do that.\nfix - If you did register those types in the container change them from being components\n\tto being parameters on the components that were depending on them.\n\nchange - DependencyModel.IsValueType is renamed to DependencyModel.IsPrimitiveTypeDependency.\nimpact - low\nfixability - easy\ndescription - This is part of unification of how types that can not be registered as valid\n\tservices are found and treated in Windsor.\n\tAlso the property now returns true if TargetItemType is null. Previously it returned false.\nfix - Change usages of IsValueType to IsPrimitiveTypeDependency if you depended on behavior when\n\tTargetItemType is null, you might also need to check its value to preserve the old behavior.\n\n## 3.1.0 RC (2012-07-08)\n\n- Refined WCF Discovery Load Balancing approach\n- Added WCF behavior to specify an IDataContractSurrogate\n- Import Bindings instead of endpoints for WCF Discovery\n- Improved concurrency during WCF channel failover\n- Refactored WCF proxying to support all channels (not just ones based on RealProxy)\n- Added additional WCF Discovery support for managed Discovery Proxies\n- Exposes notifications when channels are refreshed\n- Added exponential backoff client policy for WCF Facility\n- implemented IOC-343 - Add ability to specify fallback components that should never take precedence over non-fallback ones\n- implemented IOC-339 - Add extension point to decide whether open generic component wants to support particular closed version\n- implemented FACILITIES-159 - Add option to skip configuring log4net/nlog in LoggingFacility\n- fixed IOC-345 - When using child containers, parent components are released with child container in certain cases\n- fixed IOC-342 - Should error when trying to use PerWebRequest lifestyle when linked against the client profile\n- fixed IOC-341 - IHandlerFilter returning empty array ignored\n- fixed IOC-338 - SerializationException thrown when using remoting within default lifetime scope (Failed to load expression host assembly. Details: Type '[...]CallContextLifetimeScope[...]' is not marked as serializable.)\n- fixed IOC-336 - Failing resolution of proxied components implementing multiple generic service interfaces\n- fixed IOC-332 - UsingFactoryMethod resolving a proxy without a target throws NullReferenceException instead of a better exception\n- fixed IOC-331 - TypedFactoryFacility should ignore Func<string>\n- fixed IOC-328 - Hard-to-understand comment\n- fixed IOC-326 - Component is Disposed before the OnDestroy delegate is invoked\n- fixed IOC-325 - ParentHandlerWithChildResolver.TryResolve throws exception\n- fixed IOC-241 - .NET 4 security transparency and APTCA\n- fixed FACILITIES-155 - PerWcfSession throws NullReferenceException when not in a session\n\n## 3.0.0 (2011-12-13)\n\nno major changes\n\nBreaking Changes:\n\nchange - Typed factory using DefaultTypedFactoryComponentSelector when resolving component \n\tby name will not fallback to resolving by type if component with that name can not be found\n\tand will throw an exception instead.\nid - typedFactoryFallbackToResolveByTypeIfNameNotFound\nimpact - medium\nfixability - easy\ndescription - Original behavior from v2.5 could lead to bugs in cases when named component was\n\tnot registered or the name was misspelleed and a wrong component would be picked leading to\n\tpotentially severe issues in the application. New version adapts fail-fast approach in those\n\tcases to give dvelopers immediate feedback the configuration is wrong.\nfix - Actual fix depends on which part of the behavior you want:\n\t- If you do care about the fallback behavior, that is get the component by name and if\n\tnot present fallback to resolve by type, you can specify it explicitly when registering your\n\tfactory:\n\t.AsFactory(\n\t\tnew DefaultTypedFactoryComponentSelector(fallbackToResolveByTypeIfNameNotFound: true));\n\t- if you don't care about the fallback and what you really want is a 'GetSomeFoo' method\n\tthat resolves by type, either rename the method so that its name doesn't start with 'get'\n\tor disable the \"'get' methods resolve by name\" behavior explicitly when registering your\n\tfactory:\n\t.AsFactory(new DefaultTypedFactoryComponentSelector(getMethodsResolveByName: false))\n\nchange - Referencing interceptors by type will not work if the interceptor has custom name.\nimpact - medium\nfixability - easy\ndescription - We unified how referencing components by type works all across Windsor and that\n\tintroduced change for some areas like referencing interceptors. Now referencing component\n\tby type means \"component implemented by given type with default name\". This is how it worked\n\tfor service overrides and is now adapted all across the framework.\nfix - Remove Name (id in XML registration) from the referenced components if you're not using it\n\tor reference the component by its name.\n\nchange - .Service method on mixing registration has been removed and replaced with .Component.\nimpact - low\nfixability - easy\ndescription - The method had misleading name and behavior inconsistent with the rest of Windsor.\n\tAs such it's been replaced with .Component method which is more explicit about what argument\n\tpassed to it means\nfix - Replace with .Component method:\nContainer.Register(Component.For<ICalcService>()\n\t\t\t        .ImplementedBy<CalculatorService>()\n\t\t\t        .Proxy.MixIns(m => m.Component<A>()));\n\tNotice the new method is behaving consistently with how referencing interceptors and service\n\toverrides works. So you may need to adjust generic argument to point to other component's\n\timplementation type rather than its exposed service.\n\nchange - Generic overloads of .Insert(this IDictionary dictionary, otherarguments) extension\n\tmethod have been removed.\nimpact - low\nfixability - easy\ndescription - The overload could cause unexpected behavior when the generic parameter was being\n\tinferred, and as such it is removed to make the type always explicit. \nfix - Use overload that specifies type explicitly:\n\td.Insert(typeof(IFoo), new MyFoo()) instead of d.Insert<IFoo>(new MyFoo()) or new, explicit\n\td.InsertTyped<IFoo>(new MyFoo())\n\nchange - Method object Generate(IProxyBuilder, ProxyGenerationOptions, IInterceptor[]) on type\n\tIProxyFactoryExtension changed signature.\nimpact - low\nfixability - easy\ndescription - To handle new scenarios two additional arguments were introduced:\n\tComponentModel model and CreationContext context.\nfix - If you were implementing IProxyFactory and calling down to IProxyFactoryExtension pass your\n\town arguments down to IProxyFactoryExtension. If you're implementing IProxyFactoryExtension\n\tadjust your signature and if that makes sense in your context use the arguments.\n\nchange - ProxyUtil class was split and part moved to Castle.Core.dll and other was renamed\nimpact - low\nfixability - easy\ndescription - ProxyUtil contained logic useful not just in the context of Windsor. As such\n\tit was moved to be part of DynamicProxy and most methods are now part of the other assembly.\n\tThe only method specific to Windsor: ObtainProxyOptions was left and is now an extension\n\tmethod in class ProxyOptionsUtil.\nfix - If you were using ObtainProxyOptions use it either as extension method or update its type\n\tname to ProxyOptionsUtil. Remining methods are now part of ProxyUtil class which was moved\n\tto Castle.DynamicProxy namespaces and lives in Castle.Core.dll\n\nchange - CreateLifestyleManager method was moved from handlers to IKernelInternal\nimpact - low\nfixability - easy\ndescription - That behavior belongs in the kernel.\nfix - You shouldn't be using this method unless you're implementing custom handlers. If you do\n\tcall back to the kernel instead of implementing it in yoru handler.\n\nchange - Removed interface Castle.Core.ILifecycleConcern\nimpact - low\nfixability - easy\ndescription - This change was made because with this base interface it was impossible to\n\timplement Castle.Core.ICommisssionConcern and Castle.Core.IDecommissionConcers in single class\n\tAdditionaly ILifecycleConcern had no meaning, only the ICommisssionConcern and\n\tIDecommissionConcers have\nfix - If you have code using directly ILifecycleConcern (but what for?) you need to\n\tmigrate to either ICommisssionConcern or IDecommissionConcers. For code that use\n\tICommisssionConcern and IDecommisssionConcern you can recompile it to be extra save, but it\n\tis not required.\n\nchange - Removed overloads of Configure and ConfigureFor<> methods of the fluent registration\n\tAPI that had ConfigureDelegate parameter\nimpact - high\nfixability - easy\ndescription - This change was made to simplify the API and remove ambiguity in cases where a \n\tprivate method is used to provide the configuration.\nfix - This change breaks scenarios where a property was being used as the last element of the\n\tchain in the nested deledate, like:\n\tConfigure(c => c.LifeStyle.Transient)\n\tThis code will no longer compile. To fix it switch to the new methods exposing lifestyle:\n\tConfigure(c => c.LifestyleTransient()) or simply::\n\tLifestyleTransient()\n\nchange - ITypedFactoryComponentResolver interface was removed and ITypedFactoryComponentSelector\n\tnow returns Func<IKernelInternal, IReleasePolicy, object> from SelectComponent method\nimpact - low\nfixability - easy\ndescription - This change was made to simplify coding of advanced custom selectors which means\n\tnow only one type needs to be created instead of two and change is much more localized.\nfix - If you were using DefaultTypedFactoryComponentSelector this change does not affect you.\n\totherwise return delegate pointing to Resolve method of your ITypedFactoryComponentResolver\n\tclass or inline it altogether.\n\nchange - Add() methods on PropertySetCollection and ConstructorCandidateCollection are no longer\n\tpublicly accessible\nimpact - low\nfixability - easy\ndescription - This change was made to ensure and encapsulate the fact that as constructor or\n\tproperty dependency is added the dependency is also added to Dependencies collection on\n\tComponentModel.\nfix - Use new AddProperty or AddConstructor methods respectively.\n\nrename -  WithService.DefaultInterface() -> WithService.DefaultInterfaces()\ndescription - changed to plural to emphasize more than one interface may be matched.\n\nchange - ResolveAll methods have now different bahaviour.\nimpact - high\nfixability - medium\ndescription - Previously Windsor when ResolveAll was called would try to resolve all components\n\twith implementation type assignable to the type requirested and silently ignore those it\n\tcould not resolve. This behavior was introduced before Windsor had ability to support multi\n\tservice components and at the time it was the only way to support certain scenarios.\n\tCurrently this behavior is no longer required and is indeed leading to issues when dealing\n\twith code that doesn't strictly follow good OOP principles. Also by silently ignoring \n\tunresolvable components it may mask registration issues, that's why it was changed.\nfix - Now ResolveAll<Foo>() will only resolve components that explicitly expose Foo as their\n\tservice. If you were depending on the implicit behavior previously, make sure you add all\n\ttypes you resolve via this method as service to the desired components.\n\tAlso Windsor now will throw exception if any of the components can't be resolved. If you\n\thave a legitimate reason to have unresolvable component use IHandlersFilter to filter that\n\tcomponents out.\n\nchange - The following methods were removed:\n\tIHandler.AddCustomDependencyValue\n\tIHandler.HasCustomParameter\n\tIHandler.RemoveCustomDependencyValue\n\tIHandler.OnHandlerStateChanged event\n\tIKernelInternal.RaiseHandlerRegistered\n\tIKernelInternal.RaiseHandlersChanged\n\tIKernelInternal.RegisterCustomDependencies (all 4 overloads)\nimpact - low\nfixability - easy\ndescription - Those members were remainings from the old era and there's no longer any point in\n\thaving them.\nfix - Pass the dependencies directly to the ComponentModel using DependsOn method on the fluent\n\tregistration API. The OnHandlerStateChanged event would no longer be raised so there was no\n\tpoint in keeping it around either. Use HandlersChanged event on kernel instead.\n\nchange - IReference<out T>.Attach and .Detach method have now ComponentModel as their parameter.\nimpact - low\nfixability - easy\ndescription - To accomodate changes in DependencyModel and ParameterModel it was required to\n\thave access to both of them hence ComponentModel is being passed as a more generic object\n\texposing access to all required elements.\nfix - Pass in full ComponentModel, not just it's .Dependencies property. In the reference\n\tuse component's properties to do all you require\n\nchange - IDependencyAwareActivator has new method: bool IsManagedExternally(ComponentModel);\nimpact - low\nfixability - easy\ndescription - To implement feature IOC-277 this new customization point was introduced which\n\tallows custom activators to specify whether the instance they activate shoud be managed\n\tby the container. If true is returned this signifies to the container that the component\n\tshould not be tracked by the release policy. The activator should in that case also not\n\tinvoke any lifecycle steps. Notice that lifestyle manager can override the choice and that\n\tthis method will not be called in all cases.\nfix - Implement the method however makes sense to you. By default you should just return false.\n\nchange - IExposeDependencyInfo.ObtainDependencyDetails method signature has changed\nimpact - low\nfixability - easy\ndescription - To move the code for constructing the exception when dependencies are missing\n\tout of handlers and open way for different scenarios a new interface was introduced:\n\tIDependencyInspector and it is now used by IExposeDependencyInfo to provide the same\n\tfunctionality as before.\nfix - Adjust the calls to the new signature. If you have custom handler type take a look at\n\thow built in handlers are now implemented.\n\nchange - type attribute is now required and id is ignored in facility XML configuration\nimpact - low\nfixability - easy\ndescription - Since type is uniquely identifying facilities there was no point in keeping the id\n\taround anymore.\nfix - This change can affect you in two ways. If you were using facilities node in the XML and\n\tnot specifying the type it is now mandatory. Notice Windsor's ability to apply short type\n\tnames works here as well, so often just type name is enough - no need to specify assembly\n\tqualified name. Also the assembly will now be instantiated by the container, so if you were\n\tadding it in code later on, this is no longer required (in fact it will throw an exception\n\tsaying the assembly was already added).\n\tThe other thing that may affect you is if you were looking up facility config namnually via\n\tIConfigurationStore.GetFacilityConfiguration method. It now expects full name of the type\n\tas the key, so you should be calling it like this:\n\tstore.GetFacilityConfiguration(typeof(YourFacility).FullName);\n\nchange - EventWiringFacility, FactorySupportFacility and RemotingFacility are extracted to their\n\town assemblies\nimpact - low\nfixability - easy\ndescription - These facilities are rarely used and two of them (FactorySupportFacility and \n\tRemotingFacility) are mostly considered legacy. As such there's no point in keeping them\n\tin Windsor's assembly, especially in Silverlight version.\nfix - Reference the new assemblies and update your references in XML if you use it.\n\nchange - Component.For(ComponentModel) overload was removed.\nimpact - low\nfixability - medium\ndescription - To simplify internal structure of fluent registration API and bring it more in \n\tline with standard registration the overload was removed.\nfix - If you really need this overload you can create custom IRegistration that exposes this\n\tfunctionality. Or better rethink why you need it in the first place.\n\nchange - Adding more than a single facility of any given type is not legal anymore\nimpact - none (I hope)\nfixability - easy\ndescription - Doing so is a bug. Why would you do it in the first place?\nfix - Stop doing it.\n\nchange - RegisterCustomDependencies methods were moved from IKernel to IKernelInternal.\nimpact - low\nfixability - easy\ndescription - Those methods are hardly ever used these days so there was no point in polluting\n\tthe public API with them\nfix - Are you really using those methods? Perhaps you should be using the fluent API? If not\n\tjust cast the kernel to IKernelInternal and you can access them.\n\nchange - IWindsorContainer.AddFacility and IKernel.AddFacility overloads that were taking\n\tFunc<TFacility,object> were removed.\nimpact - low\nfixability - easy\ndescription - Those overloads were only cluttering the API and confusing users. There was no\n\tpoint in keeping them\nfix - You should not have to fix that at all. C# compiler (in version 3 or higher) should be\n\tsmart enough to pick the Action<TFacility> overload automatically if you're using lambda\n\tsyntax. If you aren't, please do, or adjust the call to match the Action<TFacility> overload\n\nchange - IComponentModelBuilder.BuildModel and ComponentModel constructor take ComponenName now\n\tinstead of string for 'name' parameter\nimpact - low\nfixability - easy\ndescription - Most of the time name given to components is automatically generated and user does\n\tnot care what it is and never interacts with it. To be able to tell apart cases when user\n\tdid set the name manually, and when it was auto-generated a new type ComponenName has been\n\tintroduced which in addition to the name value keeps track of whether the name was provided\n\tby user or autogenerated.\nfix - Update your calls accordingly, creating the ComponentName and passing right values in.\n\tAlso in the fluent API the method NamedAutomatically was introduced for use by facilities\n\tand such to register their own components with some name that the user will not care about.\n\nchange - IConfigurationInterpreter.ProcessResource now takes an additional argument: IKernel\nimpact - low\nfixability - easy\ndescription - To accomodate ability not to specify id when configuring components or facilities\n\tin XML config in conjunction with simple type name support in Windsor (this feature that\n\tlets you specify just simple type name like Foo, instead of assembly qualified name like\n\tAcme.Crm.Foo, Acme.Crm) access to conversion subsystem was required and it made sense to\n\tgrab entire kernel as some other things could be taken advantage of.\nfix - Pass the kernel in.\n\nchange - Release policies have now slightly different semantics.\nimpact - medium\nfixability - medium\ndescription - To limit unnecessary tracking of components, which unnecessarily consumes memory\n\tand causes contention in multithreaded scenarios the following change was made to release\n\tpolicy semantics:\n\t- only objects whose decommission is managed by the policy (ie which are released by call to\n\tpolicy.Release, or indirectly: container.Release) can now be Tracked. This is determined by\n\tthe 'RequiresPolicyRelease' flag on Burden. If the flag is not set the policy can throw.\nfix - The change is likely to affect code using custom lifetime managers. It is now up to the\n\tmanager to decide if it will release the object itself (then it should pass 'true' to\n\t'public Burden CreateBurden(bool trackedExternally)' method on CreationContext). Tracking\n\thappens also for objects that require it ('RequiresDecommission' on burden is 'true').\n\tIf lifestyle manager wants to make sure the object will be tracked it can set this flag.\n\tOtherwise it is up to Windsor to decide if it needs to track the object or not.\n\tAnother side-effect of the change is that calling 'container.Kernel.ReleasePolicy.HasTrack'\n\tmay now return 'false', when it previously would return 'true', if the object does not meet\n\tthe criteria mentioned above. If you were using this method, make sure you review your code\n\tthat depends on it, and adjust it to the new requirements. The semantics of 'HasTrack' is \n\t'does the release policy track this object', not 'does anything in the container track it'\n\tanymore.\n\nchange - IReleasePolicy interface has a new method: IReleasePolicy CreateSubPolicy(); usage of\n\tsub-policies changes how typed factories handle out-of-band-release of components (see\n\tdescription)\nimpact - medium\nfixability - easy\ndescription - This was added as an attempt to enable more fine grained lifetime scoping (mostly\n\tfor per-typed-factory right now, but in the future also say - per-window in client app).\n\tAs a side-effect of that (and change to release policy behavior described above) it is no\n\tlonger possible to release objects resolved via typed factories, using container.Release.\n\tAs the objects are now tracked only in the scope of the factory they will be released only\n\tif a call to factory releasing method is made, or when the factory itself is released.\nfix - Method should return new object that exposes the same behavior as the 'parent' usually it\n\tis just best to return object of the same type (as the built-in release policies do).\n\nchange - IHandler.Release now takes Burden, not object as its parameter. Burden.Release now has\n\tno arguments (used to take IReleasePolicy)\nimpact - low\nfixability - easy\ndescription - The method used to take component instance to release. Now it takes Burden which\n\thas some additional information and behavior. Also to decouple Burden from IReleasePolicy\n\tit now uses callback (via Released event) as notification mechanism.\nfix - Adjust calls appropriately\n\nchange - AllComponentsReleasePolicy was removed, ILifestyleManager.Resolve has different\n\tsignature now, and additional responsibilities.\nimpact - medium\nfixability - medium\ndescription - Handling of decision regarding tracking is now happening in two steps. First step\n\thappens in the lifestyle manager, which gets to decide if the instance should be tracked\n\tat all (which should be chosen when a new instance is created) and if IReleasePolicy should\n\town (trigger) the release process.\nfix - If you implement custom lifestyle consult the implementation of standard lifestyles for\n\texamples how to handle each aspect of component lifestyle management. Broadly speaking the\n\tbehavior should be the following (*do* inherit from AbstractLifestyleManager for your own\n\tconvenience):\n\t- if your lifestyle employs caching, it should cache Burdens, not the objects resolved\n\tdirectly. Look up its cache, and if you find matching burden return object it manages \n\t(accessed via 'Instance' property)\n\t- on cache miss call base.CreateInstance to obtain new instance from activator. This method\n\twill not return the managed object directly but rather a Burden instance. The 2nd argument\n\t'trackedExternally' should be set to true if the lifestyle manager uses some external mecha-\n\tnism to track end of life for components. If not, (when set to true) releasePolicy will take\n\tthe responsibility.\n\t- inspect burden's RequiresDecommission property. If its value is true that means either\n\tthe intsance obtained or at least one of its dependencies can not be released out of band\n\tand will require to be released explicitly. If the property is set to true you are required\n\tto track the componetn obtained with releasePolicy provided (you can use base.Track method \n\tto acheave that). If the property is false, release policy will ignore the component when \n\tcontainer's Release method is called, and rely on your out of band handling).\n\t- cache your newly obtained instance if needed.\n\t- return the intance, (burden.Instance)\n\nrename -  CreationContext.Empty -> CreationContext.CreateEmpty()\ndescription - readability change to make it obvious that new instance is created each time.\n\nchange - IServiceProviderEx was removed as base interface for IWindsorContainer and IKernel\nimpact - low\nfixability - easy\ndescription - To make the interface for the container more compact the functionality was \n\textracted to external class - WindsorServiceProvider.\nfix - Use WindsorServiceProvider instead.\n\nrename -  INamingSubSystem.GetHandlers -> INamingSubSystem.GetAllHandlers\ndescription - readability change. No affect on behavior\n\nchange - Removed the following methods:\n\tGraphNode.RemoveDepender,\n\tGraphNode.RemoveDependent,\n\tIKernel.RemoveComponent,\n\tIKernelEvents.ComponentUnregistered,\n\tINamingSubSystem.this[Type service],\n\tINamingSubSystem.GetHandler,\n\tINamingSubSystem.GetService2Handler,\n\tINamingSubSystem.GetKey2Handler,\n\tINamingSubSystem.UnRegister(String key),\n\tINamingSubSystem.UnRegister(Type service)\nAlso INamingSubSystem.Register now takes only IHandler as its argument\nimpact - low\nfixability - none\ndescription - The methods were implementation of \"remove component from the container\" feature\n\twhich was flawed and problematic, hecen was scraped.\nfix - Working around is quite dependant on your specific usage. Try utilizing IHandlerSelectors.\n\tFor changed Register method, just update your calling code not to pass the name.\n\thandler.ComponentModel.Name is now used as the key, as it was happening in all places so far\n\tanyway, so this change should have no real impact.\n\nchange - Removed the following types: ContainerAdapter, ContainerWrapper, IContainerAdapter,\n\tIContainerAdapterSite\nimpact - low\nfixability - none\ndescription - These types require ability to remove components from a container. This ability\n\twas removed and since these types are hardly ever used, they were removed as well.\nfix - No quick fix is possible. If you are depending on this functionality proaly your best shot\n\tis to replicate it, espeicially catering for the removal of components which is no longer\n\tavailable in Windsor.\n\nchange - Removed ComponentRegistration.If and ComponentRegistration.Until methods, as well as\n\tComponent.ServiceAlreadyRegistered method, and replaced their most common usage with\n\tComponentRegistration.OnlyNewServices method\nimpact - medium\nfixability - easy/hard\ndescription - To make the API simpler easier to discover as well as to allow changes in internal\n\tarchitecture, the aforementioned changes were made.\nfix - Most of the time the removed methods were used in the following combination:\n\tComponent.For<Foo>().Unless(Component.ServiceAlreadyRegistered)\n\tIn this case the fix is simple. Just replace the .Unless(Component.ServiceAlreadyRegistered)\n\twith .OnlyNewServices()\n\tIf you were using the method in some other way, the fix may be more complicated and depend\n\ton your particular scenario. In those cases it's best to consult Castle users group for\n\tadvice on how to proceed.\n\nchange - Rebuilt how components exposing multiple services are handled internally. This includes\n\tseveral changes to the API:\n\tForwardingHandler class and IHandlerFactory.CreateForwarding method were removed.\n\tComponentModel.Service property was removed replaced with ClassService and InterfaceServices\n\tproperties. Also AddService method was added. Constructor's argument for service was changed\n\tto be Type[] instead of single Type.\n\tIHandler.Service property was removed, replaced by Services property.\n\tIComponentModelBuilder.BuildModel method takes now ICollection<Type> isntead of single Type\n\tas services.\n\tComponentRegistration.For(Type serviceType, params Type[] forwaredTypes) method was removed.\n\tComponentFilter delegate type was removed as no longer needed\nimpact - low\nfixability - easy\ndescription - As part of improvement to internal architecture changed how components exposing \n\tmore than one service are handled.\nfix - This change should not affect most users, unless extending internals of the container. If\n\tthat's the case, adjust your calls to the new signatures, and change code anticipating\n\tForwardedHandlers to use Services collection from the solve IHandler for any given component\n\nchange - Proxies no longer implicitly implement all interfaces of component implementation type.\nimpact - medium\nfixability - medium\ndescription - This original behavior was actually a bug and would produce unpredictible behavior\n\tfor components exposing several services including their class.\nfix - if you were depending on the additional non-service intrfaces being forwarded to the proxy\n\tspecify them explicitly as addtional interfaces to proxy:\n\tcontainer.Register(Component.For<CountingInterceptor>()\n\t\t\t\t\t\t.Named(\"a\"),\n\t\t\t\t\tComponent.For<ICommon>()\n\t\t\t\t\t\t.ImplementedBy<TwoInterfacesImpl>()\n\t\t\t\t\t\t.Interceptors(\"a\")\n\t\t\t\t\t\t.Proxy.AdditionalInterfaces(typeof(ICommon2))\n\t\t\t\t\t\t.LifeStyle.Transient);\n\nchange - NamingPartsSubSystem, KeySearchNamingSubSystem, ComponentName, BinaryTreeComponentName\n\tand TreeNode types were removed.\nimpact - medium\nfixability - medium\ndescription - As part of internal cleanup these esoteric, alternative implementations of naming\n\tsubsystem were removed.\nfix - behavior of these implementations of naming subsystem can be easily emulated with default\n\tnaming subsystem and custom IHandlerSelectors, which is the recommended way to go.\n\nchange - UseSingleInterfaceProxy option was removed\nimpact - low\nfixability - easy\ndescription - As part of clean up of the obsolete API the option was removed to enable certain\n\tinternal changes for the release.\nfix - if you were using this option and you have to use it, use a IProxyGenerationHook impl\n\tand choose to only proxy members of that single interface.\n\n## 3.0.0 RC 1 (2011-11-20)\n\n- implemented IOC-318 - Provide more high level API for fitering (and ignoring/requiring) properties at registration time\n- implemented IOC-317 - Add ability to reference AppSettings values in XML using #{property} syntax\n- implemented IOC-316 - Add attribute to specify default selector for a typed factory interface/delegate\n- implemented IOC-313 - Add event to be raised by the container whenever empty collection is being resolved\n- implemented IOC-312 - Add shortcut methods to API to register types from given namespace\n- fixed IOC-320 - System.ArgumentNullException at Castle.MicroKernel.Burden.Release(IReleasePolicy policy)\n- fixed IOC-319 - Concurrency problem when child container is used \n- fixed IOC-315 - ResolveAll should not ignore generic constraint violations on dependencies of resolved component\n- fixed IOC-314 - Parsing container configuration uses the current culture\n- fixed IOC-311 - OptimizeDependencyResolutionDisposable eats exceptions thrown during installation\n- fixed IOC-310 - Add ability to disable performance counters\n\n## 3.0.0 beta 1 (2011-08-14)\n\n- implemented IOC-306 - Add ability to provide fine-grained filtering of properties\n- implemented IOC-303 - Support proxying for components registered using factory method\n- implemented IOC-302 - Support open generic components where implementation has more generic parameters than service if they can be figured out based on generic constraints\n- implemented IOC-301 - Add ConfigureIf method to be used with custom predicate when configuring components registered via convention\n- implemented IOC-298 - Add a method to FromAssembly that will scan all assemblies in the application for installers\n- implemented IOC-292 - Add fluent registration entry point that passes through truly \"all types\" that is interfaces, or abstract classes can be registered too\n- implemented IOC-291 - Add alias class to AllTypes that is better named, like 'Classes'\n- implemented IOC-287 - Add overloads to OnCreate and OnDestroy that only take the instance and leave the container out as it is often superfluous\n- implemented IOC-285 - Add abilitty to make a component the default for a service without ensuring it's the first component exposed that service registered\n- implemented IOC-284 - Optimize fluent registration API for less typing\n- implemented IOC-283 - Ability to create custom lifestyle attribute with custom LifestyleManager\n- implemented IOC-281 - Provide out of the box support for Lazy<T>\n- implemented IOC-279 - WindsorContainer constructor taking string should accept not only file path but also other supported locations, like UNC, config section and embedded resource\n- implemented IOC-277 - Add ability for components activated in a custom way to opt out of container lifetime management\n- implemented IOC-275 - Exception message thrown when dependencies are missing is not always very clear and should be improved\n- implemented IOC-271 - Support open generic components where implementing class has more generic parameters than the service but the missing ones can be somehow inferred\n- implemented IOC-270 - Add OnDestroy method, symertical to OnCreate\n- implemented IOC-269 - Windsor Performance Counters\n- implemented IOC-268 - Hook that allows for filtering handlers during ResolveAll\n- implemented IOC-263 - Add new debugger diagnostics - tracked objects\n- implemented IOC-257 - Same as in code, specifying type for facility in XML should be enough - Id should be optional\n- implemented IOC-256 - Same as in code, specifying type for component in XML should be enough - Id should be optional\n- implemented IOC-255 - Specifying custom lifestyle type in XML should be enough, for it to be picked up\n- implemented IOC-249 - Remove aility to remove components from the Container\n- implemented IOC-246 - Remove alternative naming subsystems\n- implemented IOC-243 - Remove obsolete UseSingleInterfaceProxy option\n- fixed IOC-305 - GenericListConverter throwing NotImplementedException\n- fixed IOC-299 - ResolveAll ignores services for open version of generic service requested\n- fixed IOC-297 - Container should throw an exception if a \"primitive type\" is registered as a service, since it will not be resolved\n- fixed IOC-295 - registration via XML ignores service specofied in attribute\n- fixed IOC-286 - Custom logger config in XML is broken\n- fixed IOC-282 - Windsor should be able to register generic typed factories as open generics\n- fixed IOC-280 - ResolveAll should respect services and fail hard when a component can't be resolved\n- fixed IOC-278 - Optional Dependencies should also be satisfied from ILazyComponentLoaders if possible\n- fixed IOC-273 - Auto register PerWebRequestLifestyleModule using PreApplicationStartMethodAttribute at runtime\n- fixed IOC-267 - Register() on a System.ValueType (like an Int32 or an Enum) instance should throw an exception\n- fixed IOC-265 - In certain cases of cyclic dependencies debugger view times out because of stack overflow in MismatchedLifestyleDependencyViewBuilder\n- fixed IOC-262 - objects created via UsingFactoryMethod are always tracked, even if they could safely not be\n- fixed IOC-260 - Generic Typed Factories no longer working in trunk\n- fixed IOC-254 - Optional non-primitive .ctor parameters don't work\n- fixed IOC-250 - Dispose not being called on open generic registrations\n- fixed IOC-248 - Open generic components with multiple services, some of which are generic fail to properly instantiate in certain cases\n- fixed IOC-247 - Make ComponentModel/IHandler expose all services for given component, instead of piggybacking them via ForwardedHandlers\n- fixed IOC-245 - Proxies (for interface services) should not implicitly proxy all interfaces that the service implementation type happens to implement\n- fixed IOC-240 - Castle Windsor ArrayResolver ServiceOverrides Not Respected\n- fixed FACILITIES-153 - Issue with setting the inital log level for the ConsoleLogger\n- EventWiringFacility, FactorySupportFacility and RemotingFacility are extracted to their own assemblies\n- fixed bug with NullReferenceException when TypedFactoryFacility is used and disposed\n- IServiceProviderEx was removed as base interface for IWindsorContainer and IKernel\n- Removed the following types: ContainerAdapter, ContainerWrapper, IContainerAdapter, IContainerAdapterSite\n\n## 2.5.4 (2011-10-01)\n\n- fixed issue causing IndexOutOfRangeException in heavy load multithreaded scenarios when releasing typed factories or components using DynamicParameters method\n- fixed issue causing transient objects being dependencies of per web request objects being resolved multiple times during a single request to still be tracked by the container after the web request ended\n- fixed issue causing typed factory to unnecessarily accumulate referenced to tracked singletons resolved via the factory\n- fixed issue causing per web request objects to still be tracked by the container after being relesed in heavy load multithreaded scenarios\n\n## 2.5.3 (2011-02-02)\n\n- fixed IOC-266 - Dependency of a generic service is not disposed in Windsor 2.5.x \n- fixed IOC-261 - Disposing of typed-factory can throw argument null exception\n- fixed IOC-254 - Optional non-primitive .ctor parameters don't work\n- fixed IOC-250 - Dispose not being called on open generic registrations\n\n## 2.5.2 (2010-11-15)\n\n- implemented IOC-243 - Unseal the InterceptorAttribute class\n- fixed IOC-239 - ArrayResolver attempts to instantiate an unresolvable array dependency\n- fixed IOC-238 - Resolving Composite depending on a Decorator may fire up cycle detection fuse\n- fixed IOC-237 - Castle Windsor : Possible bug with Startable Facility and \"decorator pattern\" dependencies\n- fixed IOC-236 - Typed Factory Facility causes memory leak because it keeps a reference after releasing object in list 'trackedComponents'\n- fixed IOC-235 - TypedFactoryFacility with inherited interfaces throws an exception\n- fixed IOC-234 - StackOverflow causing inability to use debugger view when there are components with dependency cycles in the container\n- fixed IOC-232 - Exception when using delegate based factories can throw when registered implicitly and used as dependencies of generic component\n- fixed IOC-231 - Boilerplate methods on facilities should be hidden from IntelliSense when configuring a facility\n- fixed IOC-230 - Missing Mixins/InterceptorSelectors/ProxyGenerationHooks and TypedFactoryFacility's component selectors are not detected until resolution time\n- fixed IOC-229 - Qurerying for subsystem is case sensitive\n- implemented IOC-228 - Chicken and egg problem when trying to inherit from DefaultDependencyResolver\n- fixed IOC-227 - ResolveAll fails for generic forwarded registrations\n- fixed IOC-224 - Obsolete message on some members of old obsolete API don't compile\n- fixed IOC-223 - Fluent registration registers components with System.Object service when no BasedOn discriminator is provided\n\nBreaking Changes:\n\nchange - One of CreationContext constructors has now additional argument; parent CreationContext\n\tMethod public IDisposable ParentResolutionContext(...) on CreationContext was removed\n\tMethod protected CreationContext CreateCreationContext(...) has now additional argument;\n\tparent CreationContext\nimpact - low\nfixability - medium\ndescription - To fix issue with false positive cycle detection (see issue IOC-238) changes had\n\tto be made to how parent creation context gets propagated in certain situation (when call\n\tto kernel.Resolve/ResolveAll is performed as part of resolution process, for example when\n\tCollectionResolver is being used).\nfix - If you override CreateCreationContext method on DefaultKernel pass the additional argument\n\tas new constructor parameter to CreationContext.\n\tIf you were using ParentResolutionContext method it should be fairly safe to remove the call\n\tif it was preceded by call to updated CreationContext constructor and the CreationContext is\n\tnot used outside of local scope. In other cases it's best to consult Castle users group for\n\tadvice on how to proceed.\n\nchange - IReference<> interface has two new methods\nimpact - low\nfixability - easy\ndescription - To make it possible to statically analyze dynamic dependencies provided by \n\tthe IReference interface two new methods were added:\n\t\t\tvoid Attach(DependencyModelCollection dependencies);\n\t\t\tvoid Detach(DependencyModelCollection dependencies);\nfix - if you're providing dependencies on a component from the container call Attach so that \n\treference gets a chance to create and add DependencyModel for that dependency so that\n\tit can be statically analyzed by the container.\n\nchange - Method IDependencyResolver.Initialize change signature\nimpact - low\nfixability - easy\ndescription - To make it possible to use custom DependencyResolver inheriting from \n\tDefaultDependencyResolver initialization of DefaultDependencyResolver was moved out of its\n\tconstructor and to IDependencyResolver.Initialize method which now takes IKernel as its\n\tadditional parameter\nfix - if you're implementing the interface adjust signature of the overriding method to\n\tpublic void Initialize(IKernel kernel, DependencyDelegate dependencyDelegate)\n\tThe method is called by the kernel at the end of its constructor.\n\nchange - Changed visibility of members on AbstractFacility to protected and implementation of\n\tinterface members to explicit.\nimpact - low\nfixability - easy\ndescription - To make it less confusing to users when fluently configuring facilities (via \n\tAddFacility<SomeFacility>(f => f.ConfigureSomething()) method) visibility of certain members\n\tof AbstractFacility class was changed. Public properties FacilityConfig and Kernel are now\n\tprotected, and all methods from IFacility interface are implemented explicitly. Additionally\n\tprotected Dispose method was introduced to allow inheriting classes to still be disposed.\nfix - If you were using FacilityConfig and/or Kernel properties outside of inherited classes\n\trefactor your code accordingly not to do so. If you were overriding Dispose method change\n\tits signature from\n\tpublic override void Dispose() to\n\tprotected override void Dispose()\n\n## 2.5.1 (2010-09-21)\n\n- added \"Potential lifestyle mismatches\" debugger view item, that will detect and list situations where Singleton depends on Transient or PerWebRequest component (which is usually a bug)\n- fixed issue where forwarding main type would create additional, superfluous handler\n- WebLogger/WebLoggerFactory was removed from Castle.Core so all references to that are removed from Windsor as well\n- obseleted UseSingleProxyInterface in preference over IProxyGenerationHook\n- fixed IOC-220 Composite pattern with CollectionResolver should be properly supported without throwing \"cycle detected\" exception\n- fixed IOC-218 Enable methods that take arguments as anonymous objects in Silverlight version. This works in SL, but requires [assembly: InternalsVisibleTo(Castle.Core.Internal.InternalsVisible.ToCastleCore)]\n- fixed IOC-217 Enable ISupportInitialize support as lifecyclecle concern in Silverlight 4\n- implemented IOC-216 Make it possible to specify service overrides in DependsOn, either via Property, or ServiceOverride entry class\n- implemented IOC-215 Hide obsolete members from IntelliSense (in basic view. By default in VB they won't be showed, but will in C# :( )\n- fixed IOC-214 Missing bracket in obsolete warning text\n- implemented IOC-212 Add ability to make IProxyGenerationHooks and IInterceptoSelectors IOnBehalfAware\n- fixed IOC-211 Resolve doesn't work with constructor's ref argument\n- fixed IOC-210 Typed Factory Facility treats constructor dependency as non-optional if resolved as a TFF component\n- fixed IOC-209 Bug in constructor selection when resolving - Windsor would pick unresolvable constructor\n- reverted back (to the way it was in v2.1) conditional registration of helper components used by TypedFactoryFacility as it would cause issues when used with nested containers (see the new test and thread \"Typed Factories in sub Container (differences between 2.5 and 2.1)\" on users group)\n- added framework information the assembly was built for to the AssemblyTitle attribute\n- improved how late bound types are displayed in debugger\n- fixed bug where count of potentially misconfigured components would show invalid value\n- added raw handler access to default component view in debugger\n- changed how status message is displayed for potentially misconfigured components so that an actual visualizer for strings can be used to view this potentially long piece of text\n\nBreaking Changes:\n\nchange - ILazyComponentLoader.Load now accepts a third argument for additional arguments.\nimpact - medium\nfixability - easy\ndescription - To allow maximum flexibility and usage with Resolve, any additional arguments\n   are now passed to the lazy loader.\n\nchange - LifecycleStepCollection class was removed. Instaed LifecycleConcernsCollection class\n\twas introduced. ILifecycleConcern has now two innerited interfaces for commission and\n\tdecommission. LifecycleSteps property of ComponentModel was renamed to Lifecycle.\n\tLifecycleStepType type was removed.\nimpact - medium\nfixability - easy\ndescription - To improve strongly typed nature and decrease probability of mistake and improve\n\tgeneral usability of the type LifecycleStepCollection was removed. In it place similar type\n\twas introduced - LifecycleConcernsCollection. Instead of using untyped Objects and enums\n\tit works with two new interfaces : ICommissionConcern and IDecommissionConcern.\nfix - have your lifecycle steps implement one of the new lifecycle interfaces. Use appropriate\n\toverload of Add/AddFirst to add them.\n\nchange - Typed Factories will not implicitly pick default ITypedFactoryComponentSelector \n\tregistered in the container anymore\nimpact - low\nfixability - easy\ndescription - In version 2.1 where ITypedFactoryComponentSelectors were introduced, when you had\n\ta selector registered in the container that selector would be implicitly picked for every\n\tfactory you had. Since the behavior of a selector tends to be fine grained and targetet for\n\ta specific factories, this behavior was removed. You have to explicitly associate the selector\n\twith a factory (using .AsFactory(f => f.SelectUsing(\"MySelector\")); or via xml configuration)\n\tto override selection behavior.\nfix - using either fluent API .AsFactory(f => f.SelectUsing(\"MySelector\")), or XML configuration\n\tselector=\"${MySelector}\" specify the selector explicitly for each of your factories.\n\nchange - ServiceSelector delegate (used in WithService.Select calls) changed signature\nimpact - low\nfixability - easy\ndescription - To fix a bug which would occur if type implemented multiple closed version of base\n\topen generic interface the signature of the delegate was changed from\n\tpublic delegate IEnumerable<Type> ServiceSelector(Type type, Type baseType);\n\tto\n\tpublic delegate IEnumerable<Type> ServiceSelector(Type type, Type[] baseTypes);\n\tso that multiple base types are possible (they would be closed versions of the same open\n\tgeneric interface)\nfix - depending on the scenario. You would either ignore it, or wrap your current method's body\n\tin foreach(var baseType in baseTypes)\n\nchange - moved IWindsorInstaller to Castle.MicroKernel.Registration namespace\nimpact - very low\nfixability - easy\ndescription -In order to improve developer experience when writing installers the interface\n\twas moved so that Component and AllTypes entry types for registration are already in scope.\nfix - add using Castle.MicroKernel.Registration directive.\n\nchange - Added two new overloads to ITypeConverter.PerformConversion\nimpact - very low\nfixability - easy\ndescription - To reduce casting in the most common scenario where converted value is casted to\n\tthe type it's been converted to, ITypeConverter.PerformConversion has now generic overloads\n\tfor handling this case.\nfix - If you're implementing ITypeConverter via AbstractTypeConverter you don't have to do\n\tanything as the base class will handle the conversion for you. Otherwise implement it like\n\tin AbstractTypeConverter.\n\nchange - AddCustomComponent method were moved from IKernel to IKernelInternal interface\nimpact - very low\nfixability - easy\ndescription - This method constitute internally used contract of kernel and is not intended\n\tfor external usage. As such it was moved to internal interface to declutter public\n\tinterface of IKernel.\nfix - You should not have been using this method so it should not affect you in any way. If\n\tyou did, cast the IKernel to IKernelInternal to invoke the method.\n\nchange - IModelInterceptorsSelector.SelectInterceptors method changed its signature and how it\n\tis used.\nimpact - medium\nfixability - medium\ndescription - To accomodate additional scenarios that were impossible (or hard to achieve\n\twith previous design the method now has additional parameter, an array of references to\n\tinterceptors, which contains either default interceptors for the component, or interceptors\n\tselected by previous interceptors in line). Also, Windsor will now never call\n\tIModelInterceptorsSelector.SelectInterceptors without calling \n\tIModelInterceptorsSelector.HasInterceptors before it, or when the latter returns false.\nfix - When adjusting your implementation remember that model's interceptors are the default value\n\tpassed as methods second parameter, so you don't need to merge them again manually (otherwise\n\tthey'll be invoked twice).\n\nchange - CreateComponentActivator, RaiseHandlerRegistered, RaiseHandlersChanged and\n\t RegisterHandlerForwarding methods were moved from IKernel to IKernelInternal interface\nimpact - very low\nfixability - easy\ndescription - These methods constitute internally used contract of kernel and are not intended\n\tfor external usage. As such they were moved to internal interface to declutter public\n\tinterface of IKernel.\nfix - You should not have been using these methods so it should not affect you in any way. If\n\tyou did, cast the IKernel to IKernelInternal to invoke the methods.\n\nchange - IProxyHook interface was removed\nimpact - very low\nfixability - easy\ndescription - Since MicroKernel was merged with Windsor and now depends on DynamicProxy directly\n\tthere's no need to provide additional abstraction on top of IProxyGenerationHook.\nfix - Make types that were implementing IProxyHook to implement IProxyGenerationHook. Change all\n\tusages of IProxyHook to IProxyGenerationHook.\n\nchange -  AddInstallerConfiguration and GetComponents methods were added to IConfigurationStore.\nimpact - very low\nfixability - easy\nrevision - 3bf716cc6fc218601dab92a6dd75fe269bcb63d0\ndescription - To enable installers to be exposed via configuration the interface has been \n\textended by addition of the two methods.\nfix - Implement the methods accordingly to your situation.\n\nchange - Multiple types were moved between namespaces\nimpact - low\nfixability - trivial\nrevision - 3bf716cc6fc218601dab92a6dd75fe269bcb63d0\ndescription - To improve the internal structure several types were moved to other namespaces.\nfix - When compilation error occurs adjust namespace imports as suggested by Visual Studio\n\nchange - Assembly Castle.MicroKernel.dll was merged into Castle.Windsor.dll\nimpact - high\nfixability - easy\nrevision - 730b202b0ed23a6b42258a6ffd6a3e63f89501fc\ndescription - Since vast majority of users used Windsor, as opposed to bare MicroKernel it was\n\tdecided it didn't make sense to maintain two containers. As result of that their assemblies\n\twere merged, as first step of integration between Windsor and MicroKernel.\nfix - In your projects remove reference to Castle.MicroKernel.dll. If you weren't using Windsor\n\tadd reference to Castle.Windsor.dll\n\tIn all places where your were referencing types from Castle.MicroKernel.dll via string\n\t(like xml configuration when registering facilities, or <httpModules> section on your \n\tweb.config) update references from Castle.MicroKernel to Castle.Windsor.\n\nchange - `ComponentRegistration<S>.Startable` public method has been removed.\n\t`ComponentRegistration<S>.StartUsingMethod` public method was moved to extension method.\n\t`ComponentRegistration<S>.StopUsingMethod` public method was moved to extension method.\nimpact - low\nfixability - trivial\nrevision - 6710\ndescription - StartUsingMethod/StopUsingMethod belong to StartableFacility and do not make sense\n\tas part of generic API. Startable method was superfluous.\nfix - Remove calls to Startable(). Import namespace Castle.Facilities.Startable to use\n\tStartUsingMethod and StopUsingMethod as extension methods.\n\nchange - DefaultProxyFactory.CreateProxyGenerationOptionsFrom protected method  and\n\tDefaultProxyFactory.CustomizeProxy protected virtual method have changed signature\nimpact - very low\nfixability - easy\nrevision - 6691\ndescription - the methods now also takes IKernel and CreationContext, to be used by IReferences\n\tto do resolution of components they reference\nfix - pass required parameters to the methods.\n\nchange - ProxyOption's properties changed types: \n\tSelector, from IInterceptorSelector to IReference<IInterceptorSelector>\n\tHook from IProxyHook to IReference<IProxyHook>\n\tMixIns from object[] to IEnumerable<IReference<object>>\nimpact - very low\nfixability - easy\nrevision - 6691\ndescription - the properties now use IReferences instead of live objects to allow for\n\tresolution of their values from the container, as required in case of usage from xml.\nfix - wherever used, adjust types appropriately. To obtain actual objects, use Resolve method.\n\n## 2.5.0 (2010-08-21)\n\n- debugger view support has been extracted to a separate subsystem (IContainerDebuggerExtensionHost) and can be extended by users code via IContainerDebuggerExtension and IComponentDebuggerExtension\n- calling IHandler.TryStart will no longer silently ignore all the exceptions.\n- added CollectionResolver which is a more general version of ArrayResolver and ListResolver and supports in addition ICollection<Foo> and IEnumerable<Foo>\n- fixed issue where dependencies would not be cleaned up when component creation failed\n- fixed issue where startable component would be created twice when property dependency could not be resolved\n- passing arguments to ILazyComponentLoader (see breakingchanges.txt)\n- fixed bug that caused exception when proxied component and it's proxied property dependency shared interceptor\n\n## 2.5.0 beta2 (2010-07-21)\n\n- added support for selecting components based on custom attributes and their properties. See Component.HasAttribute<T>() methods\n- added WithService.DefaultInterface() to fluent API.IT matches Foo to IFoo, SuperFooExtended to IFoo and IFooExtended etc\n- added support for CastleComponentAttribute in fluent Api. Also added helper filter method Component.IsCastleComponent\n- added ability to specify interceptors selector as a service, not just as instance\n- added ability to specify proxy hook in fluent API: \n- indexers on IKernel are now obsolete.\n- added WithAppConfig() method to logging facility to point to loging configuration in AppDomain's config file (web.config or app.config)\n- Restructured lifecycle concerns - introduced ICommissionConcern and IDecommissionConcern and favors them over old enum driven style.\n- Fixed how contextual arguments are handled. Null is no longer considered a valid value (That would cause an exception later on, now it's ignored).\n- Changed method DeferredStart on StartableFacility. It now does not take a bool parameter. A DeferredTryStart() method was introduced instead.\n\n## 2.5.0 beta1 (2010-07-05)\n\n- Typed Factories will not implicitly pick default ITypedFactoryComponentSelector registered in the container anymore\n- Obsoleted all the AddComponent* methods in favor of using Installers and fluent registration API\n- ServiceSelector delegate (used in WithService.Select calls) changed signature to fix a bug: http://3.ly/eP5Q\n- moved IWindsorInstaller to Castle.MicroKernel.Registration namespace\n- typed factories will now obey container release policy, that is if the container does not track the component, so won't the factory.\n- added helper methods to fluently configure logging facility using: container.AddFacility<LoggingFacility>( f = > f.Fluent().Magic().Here() );\n- added overload for UsingFactoryMethod which exposees ComponentModel of component to the factory\n- added generic overloads for ITypeConverter.PerformConversion to reduce casting.\n- it is now possible to call WithService.Foo().WithService.Bar() and both services will be used. Also more methods were added: WithService.Self() and WithService.AllInterfaces()\n- added simple debugger visualizer to help diagnosing misconfigured components.\n- added optimized mode to StartableFacility for Single-call-to-Install scenario that won't start anything before the end of Install (at which point the container is assumed to be completely configured and all components should be there) and it will throw if it can't resolve and start the component.\n- added OptimizeDependencyResolution around calls to Install\n- Component.IsInNamespace and its sister methods have now overload that let you include components from subnamespaces as well.\n- added ability to load assemblies from designated directory (with fair bit of optional filtering using new AssemblyFilter class). It works in three places:\n\t- AllTypes.FromAssemblyInDirectory() - picks assemblies for registration\n\t- FromAssembly.InDirectory() - installs installers from assemblies in the directory\n\t- <install directory=\"\" /> - installs installers from assemblies in directory via XML\n- TypedFactoryFacility - added ability to configure factory inline: Component.For<IFooFactory>().AsFactory(f => f.SelectedWith(\"selectorKey\")) \n- Changed IModelInterceptorSelector's signature and behavior (see breakingChanges.txt for details)\n- removed IProxyHook interface (see breakingchanges.txt)\n- added support for specifying typed factory component selectors on a per-factory basis\n- added support for using services as mixins\n- added autogenerated delegate-based factories. Taking dependency on Func<IFoo> and calling the delegate will return IFoo from the container\n- implemented IOC-ISSUE-203 - Add to fluent API scanning assemblies for IWindsorInstallers and installing them\n- added fluent API for EventWiringFacility\n- added ability to specify assemblies that will be scanned for types when shorthened type name is using via XML using the following syntax:\n\t<using assembly=\"Assembly name or path to file.dll\" />\n- added ability to specify installers (IWindsorInstaller) via XML using either of the following:\n  <installers>\n\t<install type=\"Castle.Windsor.Tests.Installers.CustomerInstaller\"/>\n\t<install assembly=\"Castle.Windsor.Tests\"/>\n  </installers>\n  installers must be public and have default constructor.\n- Xml config does not require assembly qualified type name any more - specifying just type name, or typename+namespace should be enough. Works only for types in already loaded assemblies.\n- ResolveAll will now resolve components that are not in Valid state when inline/dynamic arguments are provided\n- TypedFactoryFacility: TypedFactoryComponent will now fallback to resolving by type if no component with designated name can be found\n- fixed issue with per-web-request components not being released properly in some cases\n- fixed IOC-ISSUE-199 - NamingPartsSubSystem broken when RegisterHandlerForwarding is used\n- TypedFactoryFacility: added ability to resolve multiple components\n- TypedFactoryFacility: added ability to put custom resolving logic\n- fixed another case of IoC-168 where a component with two constructors of different parameter length couldn't be resolved when the fewer parameter constructor was not satisfied\n- If and Unless functions on fluent registration API are now cumulative - it is legal to call them multiple times and all conditions will be checked. This is a minor breaking change from previous behavior where last call would win.\n- added typed arguments (specified by type rather than by name).\n\tIt works for:\n\t- call site (Resolve with Dictionary, specifying System.Type as value of key. A helper class 'Arguments' should be used for this.)\n\t- DynamicParameters - there's an extension method Insert that should make using it nicer\n\t- fluent Api (DependsOn(Property.ForKey<string>().Eq(\"typed\"))\n- added 'Insert' extension method on IDictionary, specifically so simplify usage in DynamicParameters method and similar situations. It behaves like IDictionary's indexer setter\n- added 'Arguments' class to carry inline arguments (typed or named) for components. It is recommended to use this class rather than Hashtable or Dictionary<>\n- added strongly typed overloads for StartUsingMethod and StopUsingMethod from startable facility's registration API. It is now possible to call .StartUsingMethod(x => x.Start).StopUsingMethod(x => x.Stop)\n- moved StartUsingMethod/StopUsingMethod to extension methods in StartableFacility's namespace. Startable() method was removed as superfluous.\n- changed the UsingFactoryMethod (and UsingFactory) methods in fluent registration API to not rely on FactorySupportFacility. They now work even if facility is not used.\n- fixed IOC-ISSUE-190 - \"Resolve with argumentsAsAnonymousType overload is now case sensitive\".\n\tThis fixed a regression bug introduced in v2.1, and brings the behavior back to what it was in v2.0.\n- added support for specifying interceptorsSelector, proxyHook and mixins from config (see new tests for example). This also means some small impact breaking changes:\n\t- DefaultProxyFactory.CreateProxyGenerationOptionsFrom protected method has changed signature - it now also takes IKernel and CreationContext, to be used by IReferences to do resolve (see below)\n\t- DefaultProxyFactory.CustomizeProxy protected virtual method has changed signature, for the same reason as above\n\t- ProxyOption's properties changed types: \n\t\tSelector, from IInterceptorSelector to IReference<IInterceptorSelector>\n\t\tHook from IProxyHook to IReference<IProxyHook>\n\t\tMixIns from object[] to IEnumerable<IReference<object>>\n\tIReference abstraction allows to use components resolved from the container, similar to InterceptorReferences.\n- Moved several types from Core:\n\tComponentActivatorAttribute\n\tComponentProxyBehaviorAttribute\n\tCustomLifestyleAttribute\n\tDoNotWireAttribute      \n\tInterceptorAttribute    \n\tLifestyleAttribute\n\tPooledAttribute\n\tTransientAttribute\n\tGraphNode\n\tIVertex\n\tIRecyclable\n\tIStartable\n\tComponentModel\n\tConstructorCandidate\n\tConstructorCandidateCollection\n\tDependencyModel\n\tDependencyModelCollection\n\tInterceptorReference\n\tInterceptorReferenceCollection\n\tLifecycleStepCollection\n\tMethodMetaModel\n\tMethodMetaModelCollection\n\tParameterModel\n\tParameterModelCollection\n\tPropertySet\n\tPropertySetCollection\n\tTopologicalSortAlgo\n\tIOnBehalfAware\n\tGraphSets\n\tGraphTestCase\n\n## 2.1.1 (2010-01-13)\n\n- Reverted factory support facility changes in r6595, r6596 and r6653 which fixed IOC-ISSUE-153, however caused other bugs\n  reported on the mailing list (http://groups.google.com/group/castle-project-users/browse_thread/thread/3f2b602e738a08c6?hl=en)\n\n## 2.1.0 (2010-01-12)\n\n- Moved the logging facility project into the Windsor project:\n  - Applied Tom Allard's patch fixing FACILITIES-93: \"Extra constructors on LoggingFacility\"\n  - Added test case supplied by chris ortman\n  - Register base logger and factory when using extended logger.\n  - Fixed FACILITIES-77 - ILoggerFactory instance creation requires constructor with one argument\n- simplified API for attaching interceptors.\n- added support for forwarded types in XML config\n- added WithParameters method to fluent registration that enables inspecting and modifying arguments passed to Resolve method.\n- BREAKING CHANGE - AbstractHandler.Resolve method is no longer abstract and instead a ResolveCore protected abstract method was added. To fix this, implementers should override ResolveCore instead of Resolve.\n- added OnCreate method (refactored from OnCreateFacility created by Tehlike) which allows to specify actions to be invoked on the component right after it is created, and before it's returned from the container\n\n## 2.0\n\n- Updated FactorySupportFacility and fluent registration to allow propagation of CreationContext to factory methods\n- Fixed Burden release issue in which children were being released if the component was not destroyed\n- Automatically configure proxy to omit target if no implementation\n- Fluent interface for factory support\n- Fixed an issue with of not considering unregistered service dependencies in arrays\n- Will not try to convert values that are already a match to the parameter type\n- XmlProcessor now properly dispose of the stream reader\n- The kernel will now check if trying to register null types\n\n## RC 4\n\n- Update FromInterface Registration policy to only consider toplevel interfaces and allow multiple services.\n- Fixed bug in AllComponentsReleasePolicy in which burden not properly handled on dispose.\n- Applied patch from Joao Braganca to allow abstract types in DefaultComponentActivator if proxied.\n- Added additional AddFacility overrides to improve fluent configuration of facilities.\n- Moved DefaultComponentActivator check for abstract so it can be better overriden.\n- Added Attribute to Component Registration fluent interface.\n- Add ability to use Configure components based on implementation type when using AllTypesOf.\n- Do not return forward handlers in ResolveAll since you will get duplicate services.\n- Applied patch (with mods) from Martin Nllsson to select registration interface from containing interface.\n- Added shortcut to AllTypes to accept a where.\n- Added ability to include non-public types in registration.\n- Updated registration to support providing multiple service types.\n- Add registration support for mixins.\n- Do not allow registering components with the same name in fluent interface.\n- Applied Ayendes patch to introduce component service type forwarding to\n  support multiple service interfaces for a component.\n  Extended the Component Registration interface to support service forwarding.\n- Avoid to register abstract component via IKernel.AddComponent, now throws when trying to add instead of while resolving component\n- Removed sealed qualifier from CreationContext and made ISubDependencyResolver methods virtual so they can be overriden.\n- Made IKernel.AddFacility fluent.\n- Added StartMethod/StartMethod to ComponentRegistration.\n- Add if/unless support for ComponentRegistration.\n- Applied Daniel Jins patch to not proxy internal interfaces.\n- Fixed IOC-126: \"PoolableLifestyleManager creates pool in constructor\" \n- Fixed IOC-125: \"DefaultGenericHandler does not properly handle proxied generic components\"\n- Updated AllTypes strategy to support types based on generic type definitions.\n- Updated AllTypes strategy to support multiple registrations from a single set of types.\n- Collection handlers from parent container for GetAssignableHandlers.\n- Added ability to change invocation target to DefaultProxyFactory.\n- Fixed bug with ComponentRegistration.Instance in which the instance type was not assigned as the ComponentModel implementation.\n- Replaced AllTypesOf<T> syntax with AllTypes.Of<T> so a non-generic version can be consistently provided.  \n- Added generic AddFacility methods to kernel.\n- Added generalized configuration support to ComponentRegistration.\n- Added IWindsorInstaller interface to enhance Windsor component installation.\n- Added AllTypesOf registration stratgey to simplify custom registration scenarios.\n- Added IRegistration interface to allow alternate registration mechanisms.\n- Fixed CORE-16 (Should be Facilities): \"The FactorySupportFacility does not create proxies if interceptors are present\"\n- Added support for list service overrides using the fluent registration interface.\n  Added support for specifying configuration parameters using the fluent interface to allow any complex registration scenarios.\n- Restructured the registration fluent interface to be a little more readable,\n  better support component registrations and prevent errors resulting from  forgetting to call ComponentRegistration.Register\n- Fixed Facilities-97: \"EventWiring Facility fails to create some components\"\n- Added support for non-generic usage of fluent-interface.  Needed for dynamic registrations scenarios (Binsor)\n  Automatically register the component between consecutive AddComponentEx (Saves a few strokes).\n- Initial version of MicroKernel/Windsor fluent interface IOC-99\n- Applied patch from Jacob Lewallen improving the locking performance in the DefaultNamingSubsystem under high load.\n- Applied Philippe Tremblay's patch fixing IOC-94: \"Copy LifeStyle from generic interface\"\n- Added support for copying interceptors defined on the geneirc interface handler.\n- Fixed IOC-80\n  \"StartableFacility erroneously tries to start a component before\n  RegisterCustomDependency can be called\"\n- Added ComponentModelConverter to utilize System.ComponentModel TypeConverters\n  Very useful for converting things like Fonts and Colors\n- Updated DefaultComplexConverter to support interfaces and derived types\n- Fixed IOC-96: \"FactorySupport fails to create components if the factory instance is a proxy\"\n- Fixed IOC-93: \"GenericListConverter does not handle service overrides properly\" \n- Fixed IOC-91: \"ContextBoundObject's context is not bound when object is created by MicroKernel\"\n- Fixed build from IContainerAccessor change\n- Applied Ron Grabowski's patch fixing IOC-89: \"Make DefaultKernel implement IServiceProvider\"\n- Check for required Properties before determining the Handlers initial state\n- Fixed IoC-87: \"DefaultComplextConverter does not properly handle nested components\"\n- Applied Lee Henson's patch fixing IOC-86: \"Additional generic AddComponent overloads\"\n- Applied Ido Samuelson patch fixing IOC-85: \"IKernel to support generics to add/resolve components.\"\n- Refactored proxy options support. Now you can use the attribute 'marshalByRefProxy' on the external configuration, or the ComponentProxyBehaviorAttribute\n- Fixed IOC-79: \"Kernel.GetHandlers(Type) does not consider generic handlers when satisfying the type\"\n- Updated StartableFacilityTestCase to correctly demonstrate the facility and added a unit test to demonstrate IOC-80\n- Applied Alex Henderson's patch that makes the ComponentModel available to the ILifestyleManager\n- Applied Adam Mills's patch fixing IOC-74: \"BinaryComponentName VisitNode null check\"\n- Fixed IOC-67: \"RemoveComponent needs to unwire handlers and remove them\"\n- Fixed IOC-59: \"Child component unable to correctly resolve parent service added after the component\"\n- Fixed IOC-47: \"Components created by FactoryActivator have their dependencies checked\"\n- Applied Marcus Widerberg's patch fixing FACILITIES-84: \"FactorySupport - Allow parameters to factory method to be set at resolvetime\"\n- Applied Marcus Widerberg's patch fixing FACILITIES-82: \"Programmatic configuration for FactorySupport\"\n- Reverted by Henry -> Apply patch from Sam Camp that fixes problems with Remoting Facility Sample and RecoverableComponent. \n- Updated TypedFactoryFacility to not require a target instance when proxying.\n- Added Windsor proxy support to create proxies without targets.\n- Removed relationship between ProxyOptions and ProxyGeneration options\n  and moved ProxyOptions into the MicroKernel.  ProxyGeneration options\n  are created from the ProxyOptions and will probably need to be updated\n  as facilities demand more proxy generation customizations.\n- Added ProxyOptions to allow facilities to easily add proxy interfaces\n  without having to create custom proxy factories.  The ProxyOptions\n  are obtained via the ProxyUtil.\n- Fixed IOC-65\n  \"DictionaryConverter should use the alternate overload of the \n   PerformConversion method in order to support dictionaries that contain \n   custom types\"\n- Moved ProxyComponentInspector from Castle.MicroKernel to here and added\n  support to supply ProxyGenerationOptions on a ComponentModel basis.  This\n  provides the needed ability to provide proxy options in facilities.\n- Fixed IOC-69 - DefaultDependencyResolver issue with Service Overrides.\n- Added ComponentProxyBehaviorAttribute and ComponentProxyInspector \n  to control the creation of component proxies.\n- Added eval support to configuration. Currently it only supports \n  BaseDirectory as a content to evaluate\n  <?eval $BaseDirectory ?>\n- Added IEnvironmentInfo in an attempt to solve complex \n  configuration/environment issues.\n- Fixing IOC-63 - source order of constructors should not matter\n- Fixed IOC-62: \"Interceptors don't work properly on generic components\"\n- Applied Norbert Wagner's patch fixing IOC-55: \"Generic Type Converters: Set default entry types to generic arguments of property type\"\n- Applied Jeff Brown's patch fixing IOC-54: \"Empty component parameter values cause runtime exception during component resolution.\"\n- Applied patch by Bill Pierce that\n  - Introduces the WebUserControlComponentActivator\n  - Introduces the KeySearchNamingSubSystem\n  - Allows you to associate a custom component activator using\n    1. componentActivatorType on component node\n    2. ComponentActivatorAttribute\n  - Allows you to create and configure child containers through the configuration, using\n  <configuration>\n\t<containers>\n\t\t<container name=\"child1\">\n\t\t  <configuration>\n\t\t\t\t<facilities>\n\t\t\t\t\t...\n\t\t\t\t</facilities>\n\t\t\t\t<components>\n\t\t\t\t\t...\n\t\t\t\t</components>\n\t\t\t</configuration>\n\t\t</container>\n\t</containers>\n  </configuration>\n- Applied AndyD's patch fixing IOC-52: \"Remote access to generic components\"\n- Fixed IOC-45: \"Proxying a component that has an interface that is extended from another interface throws an exception\"\n- Applied patch by Ernst Naezer fixing IOC-37: \"Resolving with arguments in Windsor\"\n- Fixed IOC-43: \"Creation of an Attribute in the Kernel that allows one property to be ignored by the dependency builder\"\n  Introduced DoNotWireAttribute that marks a property and prevents it\n  from being considered by the container\n- Changed Windsor to use DynamicProxy 2\n- Applied patch by Adam Mills fixing IOC-42: \"ResolveServices\", new method added to IKernel\n- Applied patch by Adam Mills fixing IOC-41: \"Bug Fix BinaryTreeComponentName - Assumed Lesser nodes went to left\"\n- Applied patch by Adam Mills fixing IOC-40: \"Provided an Implementation for BinaryTreeComponentName.Remove\"\n- Applied patch by Adam Mills fixing IOC-39: \"Fix for Null Reference when accessing empty BinaryTreeComponentName\"\n- Fixed IOC-35: \"Add bootstrap section to configuration file\"\n- Fixed issue where KeyAlreadyAdded exception would be throw for components accepting two parameters of the same type, without overrides\n- Fixed IOC-36\n  - \"Transient components with multliple constructors throw unresolved dependency exceptions.\"\n  - Removed best candidate reference, as the kernel is dynamic it should not cache best constructors as components can be added or removed at any time\n  - Removed Points from candidates, as in a multithreaded scenario this would lead to failures\n- Fixed IOC-34: \"Cannot use types having their own base type as constructor argument\". See revision r2787\n- IOC-32, Support generic collections.\n  Supported collections are: ICollection<T>, IList<T>, List<T>, IDictionary<K,V>, Dictionary<K,V>, IEnumerable<T> \n\n## RC 3\n\n- Applied patch by William C. Pierce <wcpierce@gmail.com> adding PerWebRequestAttribute\n\n- Added setter to ReleasePolicy property\n\n- Applied Curtis Schlak's patch fixing IOC-30\n  \"Add overload to Windsor AddComponent to specify the Lifestyle\"\n\n- Refactored AbstractHandler to use IDependencyResolver\n\n- Dependencies can be resolved now in three levels:\n\n  * CreationContext (which now implements ISubDependencyResolver)\n  * IHandler (which now implements ISubDependencyResolver)\n  * IKernel which is the normal flow\n\n- Implemented IoC-29 using a different approach\n\n- Renamed IKernel.AddComponentWithProperties to AddComponentExtendedProperties.\n  The old method name misled the programmer about its purpose.\n\n- Added a PerWebRequestLifestyleManager which creates at most one instance of\n  an object per web request.  To use it you must add the following http module\n\n  <httpModules>\n\t  ...\n\t  <add name=\"PerWebRequest\" type=\"Castle.MicroKernel.Lifestyle.PerWebRequestLifestyleManager , Castle.MicroKernel,Version=0.0.1.7, Culture=neutral, PublicKeyToken=407dd0808d44fbdc\"/>\n\n  <httpModules>\n\n  The strong name could be omitted if not in the GAC\n\n- Added checks to handle cycles in dependencies graphs and avoid deadly Stack Overflow Exceptions.\n\n- Fixed IOC-24: \"Allow user to provide an attribute which will customize how to inspect properties (PropertiesDependenciesModelInspector)\"\n  Now users can add an 'inspectionBehavior' attribute to the component node that defines\n  the inspection strategy. Possible values are\n  \n  - None: No properties inspection should happen\n  - All: All properties will be inspected and collected (on the class and on the superclasses). \n\t\t This is the default behavior\n  - DeclaredOnly: Only properties specified on type are checked (superclasses will be ignored) \n\n- Added overload to ITypeConvertor that accept the current node configuration as well as the type in CanHandleType()\n\n- Change: Better error message when there's an exception \n  setting up properties\n\n- Fixed IOC-25: Overrides on the configuration should be considered a non-optional dependency\n\n  This fix changes a little the MicroKernel behavior. Now if you specify an service override\n  through external configuration, it will be considered a _non-optional_ dependency\n\n- Uri usage replaced by CustomUri which, differently than MS' Uri class, has the same\n  behavior on net-1.1, net-2.0 and mono\n\n- EventWiring Facility: now when a publisher is requested, the subscribers\n  are automatically started. \n  \n  The side effects are: \n  \n  - when a subscriber is requested it won't be wired automatically. \n  - There no much sense in having a subscriber with a lifestyle other than singleton\n  \n  I'm still evaluating this idea. Sometimes wiring only when the subscriber is requested\n  might make sense, but supporting both approaches is kinda hard.\n  \n\n- Applied patch by Alex Henderson <webmaster@bittercoder.com> adding\n\tIWindsorContainer.RemoveChildContainer(IWindsorContainer childContainer)\n\tand IKernel.RemoveChildKernel(IKernel kernel)\n\n- Applied fix by Ahmed. Now defines can be used on properties nodes like\n\n  <properties>\n   <?if DEBUG?>\n\t<item>x</item>\n   <?end?>\n  </properties>\n\n- Now with DictionaryConverter you can specify the keyType and valueType on each entry (kudos to Ahmed)\n\n- xmlinterpreter will throw an exception if a property is not defined but referenced\nusing #{propertyName} syntax.(Patch from Ahmed)\n\n- XmlProcessor refactored from XmlInterpreter (kudos to Ahmed)\n  Now PI are also supported (don't forget to document this on the wiki)\n\n- Support for nested nodes on the properties. (kudos to Ahmed)\n  Example:\n\n  <configuration>\n\t<properties>\n\t   <MyComponentParams>\n\t\t <user>Joe</user>\n\t\t <pwd>Doe</pwd>\n\t   </MyComponentParams>\n\t </properties>\n\t <components id=??Component\n\t   <parameters>#{ MyComponentParams }</parameters>\n\t </components>\n  </configuration>\n  \n  Will result in \n\n\t <components id=??Component\n\t   <parameters>\n\t\t <user>Joe</user>\n\t\t <pwd>Doe</pwd>\n\t   </parameters>\n\t </components>\n\n- Type converter for kernel components. This allows a usage like this:\n\n  <component id=\"mycomp\">\n  \n\t<parameters>\n\t  <servicelist>\n\t\t<list type=\"IMyService, MyAssembly\">\n\t\t  <item>${keytocomponent1}</item>\n\t\t  <item>${keytocomponent2}</item>\n\t\t</list>\n\t  </servicelist>\n\t</parameters>\n\n- Removed support for MethodMeta on ComponentModel. The design decision here \n  is to make the facilities interested on it to extend MethodMetaInspector\n  reading from a specific node.\n\n## RC 2\n\n- AsyncInitializationContainer introduced. Special container flavor that installs the\n  facilities and components using a background thread.\n\n- Support for evaluation of expressions within the xml configuration (kudos to Ahmed)\n  The following \"statements\" are supported:\n  \n\t<define flag=\"DEBUG\" />\n\t<undef flag=\"DEBUG\"/>\n\t\n\t<if defined=\"DEBUG\">\n\t\tcomponent/facility nodes\n\t</if>\n\t\n\t<choose>\n\t\t<when defined=\"DEBUG\">\n\t\t\t<component id=\"debug\"/>\n\t\t</when>\n\t\t<when defined=\"Qa\">\n\t\t\t<component id=\"qa\"/>\n\t\t</when>\n\t\t<when defined=\"Prod\">\n\t\t\t<component id=\"prod\"/>\n\t\t</when>\n\t\t<otherwise>\n\t\t\t<component id=\"default\"/>\n\t\t</otherwise>\n\t</choose>\n\n- Startable facility: support to specify the attribute startable=true on the configuration\n\n- Better error messages: now the components waiting for dependencies will recursively \n  report what they are waiting for.\n\n- Support for custom lifestyle through configuration (kudos to Bawer Dagdeviren):\n\n  <component id=\"my.component\"\n\t\t\t\t   type=\"MyLib.MyComponent, MyLib\"\n\t\t\t\t   lifestyle=\"custom\"\n\t\t\t\t   customLifestyleType=\"MyLib.MyCustomLifestyle, MyLib\" />\n\n- Added Type converter for enums\n\n- Support to associate configuration nodes to methods. Usage:\n\n\t<component>\n\t\t<methods>\n\t\t\t<save />\n\t\t\t<save signature=\"System.String, mscorlib\" />\n\t\t\t<save signature=\"System.String, mscorlib;System.Int32, mscorlib\" />\n\t\t</methods>\n\t</component>\n\n  Which is equivalent to\n\n\t<component>\n\t\t<methods>\n\t\t\t<method name=\"save\" />\n\t\t\t<method name=\"save\" signature=\"System.String, mscorlib\" />\n\t\t\t<method name=\"save\" signature=\"System.String, mscorlib;System.Int32, mscorlib\" />\n\t\t</methods>\n\t</component> \n\n- IResource introduced (FileResource, AssemblyResource, ConfigResource and UncResource)\n  which are accessible through Uris:\n\n  - FileResource:  \n\tfile://pathtofile \n\t(For example: file://c:\\mydir\\file.txt)\n\n  - AssemblyResource:  \n\tassembly://AssemblyName/ExtendingNamespace/filename \n\t(For example: assembly://Castle.Windsor.Tests/Configuration2/include1.xml)\n\n  - ConfigResource:  \n\tconfig://sectioname \n\t(For example: config://castle will fetch the \n\t<configuration><castle> entry in the configuration)\n\n  - UncResource:  \n\t\\\\server\\file \n\t(For example: \\\\mysharedplace\\myconfig.xml)\n\n- IResource, IResourceFactory and IResourceSubSystem introduced\n\n- Ability to use <properties> in configuration files. Usage\n\n\t<properties>\n\t\t<prop1>prop1 value</prop1>\n\t\t<prop2>prop2 value</prop2>\n\t</properties>\n\t<facilities>\n\t\t<facility id=\"testidengine\" >\n\t\t\t<item>#{prop1}</item>\n\t\t</facility>\n\t\t<facility id=\"testidengine2\" >\n\t\t\t<item value=\"#{prop2}\"/>\n\t\t</facility>\n\t</facilities>\n\n- Ability to use <include> in configuration files. Usage\n\n  Main file:\n\n\t<configuration>\n\t\t<include uri=\"file://include1.xml\"/>\n\t</configuration>\n\n  include1.xml:\n\n\t<configuration>\n\t\t<components>\n\t\t\t<component id=\"testidcomponent1\">\n\t\t\t</component>\n\t\t\t<component id=\"testidcomponent2\">\n\t\t\t</component>\n\t\t</components>\n\t</configuration>\n\n## Beta 3\n\n- Bug in dependency resolution (when chained) fixed\n- Better message description on exceptions related to unresolved dependencies.\n- Fixed bug in AddComponentWithProperties\n\n## Beta 2 (2005-04-10)\n\n- Bug fixes\n- Configuration object model separated into interpreters and sources\n- AbstractFacility added\n\n## Beta 1 (2005-01-21)\n\n- Changed: from #{} to ${} - way of referencing to another component on the configuration.\n- Added: support for dictionaries, lists and arrays on the configuration file.\n  <component>\n\t<parameters>\n\t  <properties>\n\t\t<dictionary>\n\t\t  <item key=\"mykey\">value</item>\n\t\t</dictionary>\n\t  </properties>\n\t</parameters>\n  </component>\n- Added: Component Graph (used by the Remove method and to dispose the components)\n- Fixed: Remove method\n- Fixed: Windsor: Proxy for components with (service != impl)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.208984375,
          "content": "## Contributing\nInformation on contributing to this project can be found in the [Castle Project Contributing Guide](https://github.com/castleproject/Home/blob/master/CONTRIBUTING.md) located in our Home repository."
        },
        {
          "name": "Castle.Windsor.sln",
          "type": "blob",
          "size": 12.884765625,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 16\nVisualStudioVersion = 16.0.30711.63\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Castle.Windsor\", \"src\\Castle.Windsor\\Castle.Windsor.csproj\", \"{5F6A631E-8EB1-4BC1-826D-86D3059945B8}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Castle.Facilities.Logging\", \"src\\Castle.Facilities.Logging\\Castle.Facilities.Logging.csproj\", \"{AA172172-78D8-414C-B4AB-9A8122EBB210}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Castle.Facilities.WcfIntegration\", \"src\\Castle.Facilities.WcfIntegration\\Castle.Facilities.WcfIntegration.csproj\", \"{BA6B28A7-C965-4F7E-8B1A-DF5171E7976B}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Castle.Facilities.WcfIntegration.Tests\", \"src\\Castle.Facilities.WcfIntegration.Tests\\Castle.Facilities.WcfIntegration.Tests.csproj\", \"{2162E27E-E0EB-470A-95FD-9AD6B802D0AB}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Castle.Facilities.WcfIntegration.Demo\", \"src\\Castle.Facilities.WcfIntegration.Demo\\Castle.Facilities.WcfIntegration.Demo.csproj\", \"{148CDE3A-7633-4C20-8E7E-24D5919ABACF}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Castle.Windsor.Tests\", \"src\\Castle.Windsor.Tests\\Castle.Windsor.Tests.csproj\", \"{11D01568-6DB2-4F82-859F-FB288A8CA694}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Castle Build\", \"Castle Build\", \"{7E507A42-984B-470D-8A0C-648B9AF8E1DC}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.gitattributes = .gitattributes\n\t\t.gitignore = .gitignore\n\t\tappveyor.yml = appveyor.yml\n\t\tbuild.cmd = build.cmd\n\t\tCHANGELOG.md = CHANGELOG.md\n\t\tCONTRIBUTING.md = CONTRIBUTING.md\n\t\tLICENSE = LICENSE\n\t\tREADME.md = README.md\n\tEndProjectSection\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Castle Facilities\", \"Castle Facilities\", \"{7935AFF5-BF6D-4D59-8D66-058B6557F70F}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Castle.Facilities.AspNetCore\", \"src\\Castle.Facilities.AspNetCore\\Castle.Facilities.AspNetCore.csproj\", \"{B7A06282-CE20-4C9E-B050-6954F3537ED0}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Castle.Facilities.AspNetCore.Tests\", \"src\\Castle.Facilities.AspNetCore.Tests\\Castle.Facilities.AspNetCore.Tests.csproj\", \"{EC869097-F284-47BB-8FF0-ED480C5068A4}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Castle.Facilities.AspNet.SystemWeb\", \"src\\Castle.Facilities.AspNet.SystemWeb\\Castle.Facilities.AspNet.SystemWeb.csproj\", \"{225643EF-E982-4367-A3DB-8FF33CD7BE43}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Castle.Facilities.AspNet.SystemWeb.Tests\", \"src\\Castle.Facilities.AspNet.SystemWeb.Tests\\Castle.Facilities.AspNet.SystemWeb.Tests.csproj\", \"{42D88CAA-ACBC-44EF-87AD-7C467F78DFF3}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Castle Docs\", \"Castle Docs\", \"{FA3002E0-EEAC-44D4-80BC-5D9A38974976}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Documentation\", \"docs\\Documentation.csproj\", \"{0C1EC041-E5A6-49F3-8287-EB0F827CD55D}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Castle.Facilities.AspNet.Mvc\", \"src\\Castle.Facilities.AspNet.Mvc\\Castle.Facilities.AspNet.Mvc.csproj\", \"{3E168B7F-80FF-42EC-ABEE-1BCE6D05875D}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Castle.Facilities.AspNet.Mvc.Tests\", \"src\\Castle.Facilities.AspNet.Mvc.Tests\\Castle.Facilities.AspNet.Mvc.Tests.csproj\", \"{175EF5FC-C3A5-4EE4-BFE6-77F0A53CBA3B}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Castle.Facilities.AspNet.WebApi\", \"src\\Castle.Facilities.AspNet.WebApi\\Castle.Facilities.AspNet.WebApi.csproj\", \"{501276B2-166F-40CA-AFF0-2F2D70BF4E4F}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Castle.Facilities.AspNet.WebApi.Tests\", \"src\\Castle.Facilities.AspNet.WebApi.Tests\\Castle.Facilities.AspNet.WebApi.Tests.csproj\", \"{5CD7AE3F-105F-4C7A-940D-B7D130940E66}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Castle.Windsor.Extensions.DependencyInjection\", \"src\\Castle.Windsor.Extensions.DependencyInjection\\Castle.Windsor.Extensions.DependencyInjection.csproj\", \"{7710F8A2-33D8-40C1-89F5-648577B5DD01}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Castle.Windsor.Extensions.DependencyInjection.Tests\", \"src\\Castle.Windsor.Extensions.DependencyInjection.Tests\\Castle.Windsor.Extensions.DependencyInjection.Tests.csproj\", \"{7C2F5733-0E06-4201-A15A-1ED1F3308DB4}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"BuildScripts\", \"BuildScripts\", \"{DD7F7887-F27C-4C52-AA41-0F386D4D9996}\"\n\tProjectSection(SolutionItems) = preProject\n\t\tbuildscripts\\ASL - Apache Software Foundation License.txt = buildscripts\\ASL - Apache Software Foundation License.txt\n\t\tbuildscripts\\build.cmd = buildscripts\\build.cmd\n\t\tbuildscripts\\CastleKey.snk = buildscripts\\CastleKey.snk\n\t\tbuildscripts\\common.props = buildscripts\\common.props\n\t\tbuildscripts\\CommonAssemblyInfo.cs = buildscripts\\CommonAssemblyInfo.cs\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Castle.Windsor.Extensions.Hosting\", \"src\\Castle.Windsor.Extensions.Hosting\\Castle.Windsor.Extensions.Hosting.csproj\", \"{4F123B9A-F9B3-4F81-A0EC-8C8DEF03298A}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{5F6A631E-8EB1-4BC1-826D-86D3059945B8}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{5F6A631E-8EB1-4BC1-826D-86D3059945B8}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{5F6A631E-8EB1-4BC1-826D-86D3059945B8}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{5F6A631E-8EB1-4BC1-826D-86D3059945B8}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{AA172172-78D8-414C-B4AB-9A8122EBB210}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{AA172172-78D8-414C-B4AB-9A8122EBB210}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{AA172172-78D8-414C-B4AB-9A8122EBB210}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{AA172172-78D8-414C-B4AB-9A8122EBB210}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{BA6B28A7-C965-4F7E-8B1A-DF5171E7976B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{BA6B28A7-C965-4F7E-8B1A-DF5171E7976B}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{BA6B28A7-C965-4F7E-8B1A-DF5171E7976B}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{BA6B28A7-C965-4F7E-8B1A-DF5171E7976B}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{2162E27E-E0EB-470A-95FD-9AD6B802D0AB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{2162E27E-E0EB-470A-95FD-9AD6B802D0AB}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{2162E27E-E0EB-470A-95FD-9AD6B802D0AB}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{2162E27E-E0EB-470A-95FD-9AD6B802D0AB}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{148CDE3A-7633-4C20-8E7E-24D5919ABACF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{148CDE3A-7633-4C20-8E7E-24D5919ABACF}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{148CDE3A-7633-4C20-8E7E-24D5919ABACF}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{148CDE3A-7633-4C20-8E7E-24D5919ABACF}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{11D01568-6DB2-4F82-859F-FB288A8CA694}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{11D01568-6DB2-4F82-859F-FB288A8CA694}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{11D01568-6DB2-4F82-859F-FB288A8CA694}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{11D01568-6DB2-4F82-859F-FB288A8CA694}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{B7A06282-CE20-4C9E-B050-6954F3537ED0}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{B7A06282-CE20-4C9E-B050-6954F3537ED0}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{B7A06282-CE20-4C9E-B050-6954F3537ED0}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{B7A06282-CE20-4C9E-B050-6954F3537ED0}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{EC869097-F284-47BB-8FF0-ED480C5068A4}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{EC869097-F284-47BB-8FF0-ED480C5068A4}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{EC869097-F284-47BB-8FF0-ED480C5068A4}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{EC869097-F284-47BB-8FF0-ED480C5068A4}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{225643EF-E982-4367-A3DB-8FF33CD7BE43}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{225643EF-E982-4367-A3DB-8FF33CD7BE43}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{225643EF-E982-4367-A3DB-8FF33CD7BE43}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{225643EF-E982-4367-A3DB-8FF33CD7BE43}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{42D88CAA-ACBC-44EF-87AD-7C467F78DFF3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{42D88CAA-ACBC-44EF-87AD-7C467F78DFF3}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{42D88CAA-ACBC-44EF-87AD-7C467F78DFF3}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{42D88CAA-ACBC-44EF-87AD-7C467F78DFF3}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{0C1EC041-E5A6-49F3-8287-EB0F827CD55D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{0C1EC041-E5A6-49F3-8287-EB0F827CD55D}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{0C1EC041-E5A6-49F3-8287-EB0F827CD55D}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{0C1EC041-E5A6-49F3-8287-EB0F827CD55D}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{3E168B7F-80FF-42EC-ABEE-1BCE6D05875D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{3E168B7F-80FF-42EC-ABEE-1BCE6D05875D}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{3E168B7F-80FF-42EC-ABEE-1BCE6D05875D}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{3E168B7F-80FF-42EC-ABEE-1BCE6D05875D}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{175EF5FC-C3A5-4EE4-BFE6-77F0A53CBA3B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{175EF5FC-C3A5-4EE4-BFE6-77F0A53CBA3B}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{175EF5FC-C3A5-4EE4-BFE6-77F0A53CBA3B}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{175EF5FC-C3A5-4EE4-BFE6-77F0A53CBA3B}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{501276B2-166F-40CA-AFF0-2F2D70BF4E4F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{501276B2-166F-40CA-AFF0-2F2D70BF4E4F}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{501276B2-166F-40CA-AFF0-2F2D70BF4E4F}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{501276B2-166F-40CA-AFF0-2F2D70BF4E4F}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{5CD7AE3F-105F-4C7A-940D-B7D130940E66}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{5CD7AE3F-105F-4C7A-940D-B7D130940E66}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{5CD7AE3F-105F-4C7A-940D-B7D130940E66}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{5CD7AE3F-105F-4C7A-940D-B7D130940E66}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{7710F8A2-33D8-40C1-89F5-648577B5DD01}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{7710F8A2-33D8-40C1-89F5-648577B5DD01}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{7710F8A2-33D8-40C1-89F5-648577B5DD01}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{7710F8A2-33D8-40C1-89F5-648577B5DD01}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{7C2F5733-0E06-4201-A15A-1ED1F3308DB4}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{7C2F5733-0E06-4201-A15A-1ED1F3308DB4}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{7C2F5733-0E06-4201-A15A-1ED1F3308DB4}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{7C2F5733-0E06-4201-A15A-1ED1F3308DB4}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{4F123B9A-F9B3-4F81-A0EC-8C8DEF03298A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{4F123B9A-F9B3-4F81-A0EC-8C8DEF03298A}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{4F123B9A-F9B3-4F81-A0EC-8C8DEF03298A}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{4F123B9A-F9B3-4F81-A0EC-8C8DEF03298A}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{AA172172-78D8-414C-B4AB-9A8122EBB210} = {7935AFF5-BF6D-4D59-8D66-058B6557F70F}\n\t\t{BA6B28A7-C965-4F7E-8B1A-DF5171E7976B} = {7935AFF5-BF6D-4D59-8D66-058B6557F70F}\n\t\t{2162E27E-E0EB-470A-95FD-9AD6B802D0AB} = {7935AFF5-BF6D-4D59-8D66-058B6557F70F}\n\t\t{148CDE3A-7633-4C20-8E7E-24D5919ABACF} = {7935AFF5-BF6D-4D59-8D66-058B6557F70F}\n\t\t{B7A06282-CE20-4C9E-B050-6954F3537ED0} = {7935AFF5-BF6D-4D59-8D66-058B6557F70F}\n\t\t{EC869097-F284-47BB-8FF0-ED480C5068A4} = {7935AFF5-BF6D-4D59-8D66-058B6557F70F}\n\t\t{225643EF-E982-4367-A3DB-8FF33CD7BE43} = {7935AFF5-BF6D-4D59-8D66-058B6557F70F}\n\t\t{42D88CAA-ACBC-44EF-87AD-7C467F78DFF3} = {7935AFF5-BF6D-4D59-8D66-058B6557F70F}\n\t\t{0C1EC041-E5A6-49F3-8287-EB0F827CD55D} = {FA3002E0-EEAC-44D4-80BC-5D9A38974976}\n\t\t{3E168B7F-80FF-42EC-ABEE-1BCE6D05875D} = {7935AFF5-BF6D-4D59-8D66-058B6557F70F}\n\t\t{175EF5FC-C3A5-4EE4-BFE6-77F0A53CBA3B} = {7935AFF5-BF6D-4D59-8D66-058B6557F70F}\n\t\t{501276B2-166F-40CA-AFF0-2F2D70BF4E4F} = {7935AFF5-BF6D-4D59-8D66-058B6557F70F}\n\t\t{5CD7AE3F-105F-4C7A-940D-B7D130940E66} = {7935AFF5-BF6D-4D59-8D66-058B6557F70F}\n\t\t{7710F8A2-33D8-40C1-89F5-648577B5DD01} = {7935AFF5-BF6D-4D59-8D66-058B6557F70F}\n\t\t{7C2F5733-0E06-4201-A15A-1ED1F3308DB4} = {7935AFF5-BF6D-4D59-8D66-058B6557F70F}\n\t\t{DD7F7887-F27C-4C52-AA41-0F386D4D9996} = {7E507A42-984B-470D-8A0C-648B9AF8E1DC}\n\t\t{4F123B9A-F9B3-4F81-A0EC-8C8DEF03298A} = {7935AFF5-BF6D-4D59-8D66-058B6557F70F}\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {CC2A1EB6-49EC-4064-AD8B-29439E8A45E4}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "Castle.Windsor.sln.DotSettings",
          "type": "blob",
          "size": 16.955078125,
          "content": "﻿<wpf:ResourceDictionary xml:space=\"preserve\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:s=\"clr-namespace:System;assembly=mscorlib\" xmlns:ss=\"urn:shemas-jetbrains-com:settings-storage-xaml\" xmlns:wpf=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">\n\t<s:Boolean x:Key=\"/Default/CodeEditing/Intellisense/LookupWindow/ShowSignatures/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeEditing/Intellisense/LookupWindow/ShowSummary/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeInspection/Highlighting/IdentifierHighlightingEnabled/@EntryValue\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/CodeStyle/CodeCleanup/Profiles/=Full_0020cleanup_0020and_0020reformat/@EntryIndexedValue\">&lt;?xml version=\"1.0\" encoding=\"utf-16\"?&gt;&lt;Profile name=\"Full cleanup and reformat\"&gt;&lt;CSArrangeThisQualifier&gt;True&lt;/CSArrangeThisQualifier&gt;&lt;CSRemoveCodeRedundancies&gt;True&lt;/CSRemoveCodeRedundancies&gt;&lt;CSUseAutoProperty&gt;True&lt;/CSUseAutoProperty&gt;&lt;CSMakeFieldReadonly&gt;True&lt;/CSMakeFieldReadonly&gt;&lt;CSUseVar&gt;&lt;BehavourStyle&gt;CAN_CHANGE_TO_IMPLICIT&lt;/BehavourStyle&gt;&lt;LocalVariableStyle&gt;ALWAYS_IMPLICIT&lt;/LocalVariableStyle&gt;&lt;ForeachVariableStyle&gt;ALWAYS_IMPLICIT&lt;/ForeachVariableStyle&gt;&lt;/CSUseVar&gt;&lt;CSOptimizeUsings&gt;&lt;OptimizeUsings&gt;True&lt;/OptimizeUsings&gt;&lt;EmbraceInRegion&gt;False&lt;/EmbraceInRegion&gt;&lt;RegionName&gt;&lt;/RegionName&gt;&lt;/CSOptimizeUsings&gt;&lt;CSShortenReferences&gt;True&lt;/CSShortenReferences&gt;&lt;CSReformatCode&gt;True&lt;/CSReformatCode&gt;&lt;CSharpFormatDocComments&gt;True&lt;/CSharpFormatDocComments&gt;&lt;CSReorderTypeMembers&gt;True&lt;/CSReorderTypeMembers&gt;&lt;CSUpdateFileHeader&gt;True&lt;/CSUpdateFileHeader&gt;&lt;/Profile&gt;</s:String>\n\t<s:Int64 x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/BLANK_LINES_BETWEEN_USING_GROUPS/@EntryValue\">1</s:Int64>\n\t<s:String x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/PLACE_ACCESSORHOLDER_ATTRIBUTE_ON_SAME_LINE_EX/@EntryValue\">NEVER</s:String>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/PLACE_FIELD_ATTRIBUTE_ON_SAME_LINE/@EntryValue\">False</s:Boolean>\n\t<s:String x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/PLACE_FIELD_ATTRIBUTE_ON_SAME_LINE_EX/@EntryValue\">NEVER</s:String>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_BEFORE_TYPEOF_PARENTHESES/@EntryValue\">False</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_WITHIN_SINGLE_LINE_ARRAY_INITIALIZER_BRACES/@EntryValue\">True</s:Boolean>\n\t<s:Int64 x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_LIMIT/@EntryValue\">233</s:Int64>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/XmlDocFormatter/IndentTagContent/@EntryValue\">False</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/XmlDocFormatter/KeepUserLineBreaks/@EntryValue\">False</s:Boolean>\n\t<s:Int64 x:Key=\"/Default/CodeStyle/CodeFormatting/XmlDocFormatter/MaxSingleLineTagLength/@EntryValue\">200</s:Int64>\n\t<s:String x:Key=\"/Default/CodeStyle/CodeFormatting/XmlDocFormatter/TagAttributeIndenting/@EntryValue\">ByFirstAttr</s:String>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/XmlDocFormatter/TagSpacesAroundAttributeEq/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/XmlDocFormatter/WrapBeforeAttr/@EntryValue\">False</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/XmlDocFormatter/WrapInsideText/@EntryValue\">True</s:Boolean>\n\t<s:Int64 x:Key=\"/Default/CodeStyle/CodeFormatting/XmlDocFormatter/WrapLimit/@EntryValue\">200</s:Int64>\n\t<s:Int64 x:Key=\"/Default/CodeStyle/CodeFormatting/XmlDocFormatter/WRAP_LIMIT/@EntryValue\">200</s:Int64>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/XmlFormatter/ProcessingInstructionAroundAttributeEq/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/XmlFormatter/TagSpacesAroundAttributeEq/@EntryValue\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/CodeStyle/CSharpMemberOrderPattern/CustomPattern/@EntryValue\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;&#xD;\n&#xD;\n&lt;!--&#xD;\nI. Overall&#xD;\n&#xD;\nI.1 Each pattern can have &lt;Match&gt;....&lt;/Match&gt; element. For the given type declaration, the pattern with the match, evaluated to 'true' with the largest weight, will be used &#xD;\nI.2 Each pattern consists of the sequence of &lt;Entry&gt;...&lt;/Entry&gt; elements. Type member declarations are distributed between entries&#xD;\nI.3 If pattern has RemoveAllRegions=\"true\" attribute, then all regions will be cleared prior to reordering. Otherwise, only auto-generated regions will be cleared&#xD;\nI.4 The contents of each entry is sorted by given keys (First key is primary,  next key is secondary, etc). Then the declarations are grouped and en-regioned by given property&#xD;\n&#xD;\nII. Available match operands&#xD;\n&#xD;\nEach operand may have Weight=\"...\" attribute. This weight will be added to the match weight if the operand is evaluated to 'true'.&#xD;\nThe default weight is 1&#xD;\n&#xD;\nII.1 Boolean functions:&#xD;\nII.1.1 &lt;And&gt;....&lt;/And&gt;&#xD;\nII.1.2 &lt;Or&gt;....&lt;/Or&gt;&#xD;\nII.1.3 &lt;Not&gt;....&lt;/Not&gt;&#xD;\n&#xD;\nII.2 Operands&#xD;\nII.2.1 &lt;Kind Is=\"...\"/&gt;. Kinds are: class, struct, interface, enum, delegate, type, constructor, destructor, property, indexer, method, operator, field, constant, event, member&#xD;\nII.2.2 &lt;Name Is=\"...\" [IgnoreCase=\"true/false\"] /&gt;. The 'Is' attribute contains regular expression&#xD;\nII.2.3 &lt;HasAttribute CLRName=\"...\" [Inherit=\"true/false\"] /&gt;. The 'CLRName' attribute contains regular expression&#xD;\nII.2.4 &lt;Access Is=\"...\"/&gt;. The 'Is' values are: public, protected, internal, protected internal, private&#xD;\nII.2.5 &lt;Static/&gt;&#xD;\nII.2.6 &lt;Abstract/&gt;&#xD;\nII.2.7 &lt;Virtual/&gt;&#xD;\nII.2.8 &lt;Override/&gt;&#xD;\nII.2.9 &lt;Sealed/&gt;&#xD;\nII.2.10 &lt;Readonly/&gt;&#xD;\nII.2.11 &lt;ImplementsInterface CLRName=\"...\"/&gt;. The 'CLRName' attribute contains regular expression&#xD;\nII.2.12 &lt;HandlesEvent /&gt;&#xD;\n--&gt;&#xD;\n&#xD;\n&lt;Patterns xmlns=\"urn:shemas-jetbrains-com:member-reordering-patterns\"&gt;&#xD;\n&#xD;\n  &lt;!--Do not reorder COM interfaces and structs marked by StructLayout attribute--&gt;&#xD;\n  &lt;Pattern&gt;&#xD;\n    &lt;Match&gt;&#xD;\n      &lt;Or Weight=\"100\"&gt;&#xD;\n        &lt;And&gt;&#xD;\n          &lt;Kind Is=\"interface\"/&gt;&#xD;\n          &lt;Or&gt;&#xD;\n            &lt;HasAttribute CLRName=\"System.Runtime.InteropServices.InterfaceTypeAttribute\"/&gt;&#xD;\n            &lt;HasAttribute CLRName=\"System.Runtime.InteropServices.ComImport\"/&gt;&#xD;\n          &lt;/Or&gt;&#xD;\n        &lt;/And&gt;&#xD;\n        &lt;HasAttribute CLRName=\"System.Runtime.InteropServices.StructLayoutAttribute\"/&gt;&#xD;\n      &lt;/Or&gt;&#xD;\n    &lt;/Match&gt;&#xD;\n  &lt;/Pattern&gt;&#xD;\n&#xD;\n  &lt;!--Special formatting of NUnit test fixture--&gt;&#xD;\n  &lt;Pattern RemoveAllRegions=\"true\"&gt;&#xD;\n    &lt;Match&gt;&#xD;\n      &lt;And Weight=\"100\"&gt;&#xD;\n        &lt;Kind Is=\"class\"/&gt;&#xD;\n        &lt;HasAttribute CLRName=\"NUnit.Framework.TestFixtureAttribute\" Inherit=\"true\"/&gt;&#xD;\n      &lt;/And&gt;&#xD;\n    &lt;/Match&gt;&#xD;\n&#xD;\n    &lt;!--Setup/Teardow--&gt;&#xD;\n    &lt;Entry&gt;&#xD;\n      &lt;Match&gt;&#xD;\n        &lt;And&gt;&#xD;\n          &lt;Kind Is=\"method\"/&gt;&#xD;\n          &lt;Or&gt;&#xD;\n            &lt;HasAttribute CLRName=\"NUnit.Framework.SetUpAttribute\" Inherit=\"true\"/&gt;&#xD;\n            &lt;HasAttribute CLRName=\"NUnit.Framework.TearDownAttribute\" Inherit=\"true\"/&gt;&#xD;\n            &lt;HasAttribute CLRName=\"NUnit.Framework.FixtureSetUpAttribute\" Inherit=\"true\"/&gt;&#xD;\n            &lt;HasAttribute CLRName=\"NUnit.Framework.FixtureTearDownAttribute\" Inherit=\"true\"/&gt;&#xD;\n          &lt;/Or&gt;&#xD;\n        &lt;/And&gt;&#xD;\n      &lt;/Match&gt;&#xD;\n    &lt;/Entry&gt;&#xD;\n&#xD;\n    &lt;!--All other members--&gt;&#xD;\n    &lt;Entry/&gt;&#xD;\n&#xD;\n    &lt;!--Test methods--&gt;&#xD;\n    &lt;Entry&gt;&#xD;\n      &lt;Match&gt;&#xD;\n        &lt;And Weight=\"100\"&gt;&#xD;\n          &lt;Kind Is=\"method\"/&gt;&#xD;\n          &lt;HasAttribute CLRName=\"NUnit.Framework.TestAttribute\" Inherit=\"false\"/&gt;&#xD;\n        &lt;/And&gt;&#xD;\n      &lt;/Match&gt;&#xD;\n      &lt;Sort&gt;&#xD;\n        &lt;Name/&gt;&#xD;\n      &lt;/Sort&gt;&#xD;\n    &lt;/Entry&gt;&#xD;\n  &lt;/Pattern&gt;&#xD;\n&#xD;\n  &lt;!--Default pattern--&gt;&#xD;\n  &lt;Pattern RemoveAllRegions=\"true\"&gt;&#xD;\n    &lt;!--according to http://castleproject.org/community/codingstandards.html--&gt;&#xD;\n    &lt;!--constants--&gt;&#xD;\n    &lt;Entry&gt;&#xD;\n      &lt;Match&gt;&#xD;\n        &lt;Kind Is=\"constant\"/&gt;&#xD;\n      &lt;/Match&gt;&#xD;\n      &lt;Sort&gt;&#xD;\n        &lt;Access/&gt;&#xD;\n        &lt;Name/&gt;&#xD;\n      &lt;/Sort&gt;&#xD;\n    &lt;/Entry&gt;&#xD;\n    &lt;!--fields (static readonly / static / instance readonly / instance )--&gt;&#xD;\n    &lt;Entry&gt;&#xD;\n      &lt;Match&gt;&#xD;\n        &lt;Kind Is=\"field\"/&gt;&#xD;\n      &lt;/Match&gt;&#xD;\n      &lt;Sort&gt;&#xD;\n        &lt;Static/&gt;&#xD;\n        &lt;Access/&gt;&#xD;\n        &lt;Readonly/&gt;&#xD;\n        &lt;Name/&gt;&#xD;\n      &lt;/Sort&gt;&#xD;\n    &lt;/Entry&gt;&#xD;\n&#xD;\n    &lt;!--Constructors. Place static one first--&gt;&#xD;\n    &lt;Entry&gt;&#xD;\n      &lt;Match&gt;&#xD;\n        &lt;Kind Is=\"constructor\"/&gt;&#xD;\n      &lt;/Match&gt;&#xD;\n      &lt;Sort&gt;&#xD;\n        &lt;Static/&gt;&#xD;\n        &lt;Access/&gt;&#xD;\n      &lt;/Sort&gt;&#xD;\n    &lt;/Entry&gt;&#xD;\n&#xD;\n    &lt;!--instance properties, indexers and methods--&gt;&#xD;\n    &lt;Entry&gt;&#xD;\n      &lt;Match&gt;&#xD;\n        &lt;And&gt;&#xD;\n          &lt;Or&gt;&#xD;\n            &lt;Kind Is=\"property\"/&gt;&#xD;\n            &lt;Kind Is=\"indexer\"/&gt;&#xD;\n            &lt;Kind Is=\"method\"/&gt;&#xD;\n          &lt;/Or&gt;&#xD;\n          &lt;Not&gt;&#xD;\n            &lt;Static/&gt;&#xD;\n          &lt;/Not&gt;&#xD;\n        &lt;/And&gt;&#xD;\n      &lt;/Match&gt;&#xD;\n      &lt;Sort&gt;&#xD;\n        &lt;Kind Order=\"property indexer method\"/&gt;&#xD;\n        &lt;Abstract/&gt;&#xD;\n        &lt;Access/&gt;&#xD;\n        &lt;ImplementsInterface/&gt;&#xD;\n        &lt;Readonly/&gt;&#xD;\n        &lt;Name/&gt;&#xD;\n      &lt;/Sort&gt;&#xD;\n    &lt;/Entry&gt;&#xD;\n&#xD;\n    &lt;!--static properties, indexers and methods--&gt;&#xD;\n    &lt;Entry&gt;&#xD;\n      &lt;Match&gt;&#xD;\n        &lt;And&gt;&#xD;\n          &lt;Static/&gt;&#xD;\n          &lt;Or&gt;&#xD;\n            &lt;Kind Is=\"property\"/&gt;&#xD;\n            &lt;Kind Is=\"indexer\"/&gt;&#xD;\n            &lt;Kind Is=\"method\"/&gt;&#xD;\n          &lt;/Or&gt;&#xD;\n        &lt;/And&gt;&#xD;\n      &lt;/Match&gt;&#xD;\n      &lt;Sort&gt;&#xD;\n        &lt;Kind Order=\"property indexer method\"/&gt;&#xD;\n        &lt;Abstract/&gt;&#xD;\n        &lt;Access/&gt;&#xD;\n        &lt;ImplementsInterface/&gt;&#xD;\n        &lt;Readonly/&gt;&#xD;\n        &lt;Name/&gt;&#xD;\n      &lt;/Sort&gt;&#xD;\n    &lt;/Entry&gt;&#xD;\n&#xD;\n    &lt;!--all other members--&gt;&#xD;\n    &lt;Entry/&gt;&#xD;\n&#xD;\n    &lt;!--public delegate--&gt;&#xD;\n    &lt;Entry&gt;&#xD;\n      &lt;Match&gt;&#xD;\n        &lt;And Weight=\"100\"&gt;&#xD;\n          &lt;Access Is=\"public\"/&gt;&#xD;\n          &lt;Kind Is=\"delegate\"/&gt;&#xD;\n        &lt;/And&gt;&#xD;\n      &lt;/Match&gt;&#xD;\n      &lt;Sort&gt;&#xD;\n        &lt;Name/&gt;&#xD;\n      &lt;/Sort&gt;&#xD;\n    &lt;/Entry&gt;&#xD;\n&#xD;\n    &lt;!--public enum--&gt;&#xD;\n    &lt;Entry&gt;&#xD;\n      &lt;Match&gt;&#xD;\n        &lt;And Weight=\"100\"&gt;&#xD;\n          &lt;Access Is=\"public\"/&gt;&#xD;\n          &lt;Kind Is=\"enum\"/&gt;&#xD;\n        &lt;/And&gt;&#xD;\n      &lt;/Match&gt;&#xD;\n      &lt;Sort&gt;&#xD;\n        &lt;Name/&gt;&#xD;\n      &lt;/Sort&gt;&#xD;\n    &lt;/Entry&gt;&#xD;\n&#xD;\n&#xD;\n    &lt;!--nested types--&gt;&#xD;\n    &lt;Entry&gt;&#xD;\n      &lt;Match&gt;&#xD;\n        &lt;Kind Is=\"type\"/&gt;&#xD;\n      &lt;/Match&gt;&#xD;\n      &lt;Sort&gt;&#xD;\n        &lt;Name/&gt;&#xD;\n      &lt;/Sort&gt;&#xD;\n    &lt;/Entry&gt;&#xD;\n  &lt;/Pattern&gt;&#xD;\n&#xD;\n&lt;/Patterns&gt;</s:String>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CSharpUsing/AddImportsToDeepestScope/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CSharpUsing/QualifiedUsingAtNestedScope/@EntryValue\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/CodeStyle/FileHeader/FileHeaderText/@EntryValue\">Copyright 2004-$CURRENT_YEAR$ Castle Project - http://www.castleproject.org/&#xD;\n&#xD;\nLicensed under the Apache License, Version 2.0 (the \"License\");&#xD;\nyou may not use this file except in compliance with the License.&#xD;\nYou may obtain a copy of the License at&#xD;\n&#xD;\n    http://www.apache.org/licenses/LICENSE-2.0&#xD;\n&#xD;\nUnless required by applicable law or agreed to in writing, software&#xD;\ndistributed under the License is distributed on an \"AS IS\" BASIS,&#xD;\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xD;\nSee the License for the specific language governing permissions and&#xD;\nlimitations under the License.&#xD;\n</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=MethodPropertyEvent/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb_aaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=PrivateInstanceFields/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"aaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=PrivateStaticFields/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"aaBb\" /&gt;</s:String>\n\t<s:Boolean x:Key=\"/Default/Environment/Editor/UseCamelHumps/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/ExternalSources/Decompiler/DecompileMethodBodies/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/ExternalSources/Decompiler/ReorderMembers/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EdotCover_002EIde_002ECore_002EFilterManagement_002EModel_002ESolutionFilterSettingsManagerMigrateSettings/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpAttributeForSingleLineMethodUpgrade/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpFileLayoutPatternsUpgrade/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpKeepExistingMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpPlaceEmbeddedOnSameLineMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpRenamePlacementToArrangementMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpUseContinuousIndentInsideBracesMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002EAddAccessorOwnerDeclarationBracesMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002ECSharpPlaceAttributeOnSameLineMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002EMigrateBlankLinesAroundFieldToBlankLinesAroundProperty/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002EMigrateThisQualifierSettings/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002EXml_002ECodeStyle_002EFormatSettingsUpgrade_002EXmlMoveToCommonFormatterSettingsUpgrade/@EntryIndexedValue\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/Environment/UserInterface/ThemedIcon/IconThemeSelection/@EntryValue\">Color</s:String>\n\t<s:String x:Key=\"/Default/Environment/UserInterface/ThemedIcon/PsiSymbolIcon/PsiSymbolIconThemeSelection/@EntryValue\">SymbolsVs11Color</s:String>\n\t<s:String x:Key=\"/Default/FilterSettingsManager/AttributeFilterXml/@EntryValue\">&lt;data /&gt;</s:String>\n\t<s:String x:Key=\"/Default/FilterSettingsManager/CoverageFilterXml/@EntryValue\">&lt;data&gt;&lt;IncludeFilters /&gt;&lt;ExcludeFilters /&gt;&lt;/data&gt;</s:String></wpf:ResourceDictionary>"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 8.9775390625,
          "content": "Apache License, Version 2.0\n\nApache License\nVersion 2.0, January 2004\nhttp://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n\n   1. You must give any other recipients of the Work or Derivative Works a copy of this License; and\n\n   2. You must cause any modified files to carry prominent notices stating that You changed the files; and\n\n   3. You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and\n\n   4. If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.\n\nYou may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.55078125,
          "content": "# Castle Windsor\n\n<img align=\"right\" src=\"docs/images/windsor-logo.png\">\n\nCastle Windsor is a best of breed, mature Inversion of Control container available for .NET.\n\nSee the [documentation](docs/README.md).\n\n## Releases\n\nSee the [releases](https://github.com/castleproject/Windsor/releases).\n\n## License\n\nCastle Windsor is &copy; 2004-2023 Castle Project. It is free software, and may be redistributed under the terms of the [Apache 2.0](http://opensource.org/licenses/Apache-2.0) license.\n\n## NuGet Preview Feed\n\nIf you would like to use preview NuGet's from our CI builds on AppVeyor, you can add the following NuGet source to your project:\n\n```\nhttps://ci.appveyor.com/nuget/windsor-qkry8n2r6yak\n```\n\n## Building\n\n### Conditional Compilation Symbols\n\nThe following conditional compilation symbols are currently defined for Windsor:\n\nSymbol                              | .NET 4.6.2         | .NET Standard / 6\n----------------------------------- | ------------------ | ------------------\n`FEATURE_APPDOMAIN`                 | :white_check_mark: | :no_entry_sign:\n`FEATURE_ASSEMBLIES`                | :white_check_mark: | :no_entry_sign:\n`FEATURE_PERFCOUNTERS`              | :white_check_mark: | :no_entry_sign:\n`FEATURE_REMOTING`                  | :white_check_mark: | :no_entry_sign:\n`FEATURE_SECURITY_PERMISSIONS`      | :white_check_mark: | :no_entry_sign:\n`FEATURE_SERIALIZATION`             | :white_check_mark: | :no_entry_sign:\n`FEATURE_SYSTEM_CONFIGURATION`      | :white_check_mark: | :no_entry_sign:\n\n* `FEATURE_APPDOMAIN` - enables support for features that make use of an AppDomain in the host.\n* `FEATURE_ASSEMBLIES` - uses `AssemblyName.GetAssemblyName()` and `Assembly.LoadFile()`.\n* `FEATURE_PERFCOUNTERS` - enables code that uses Windows Performance Counters.\n* `FEATURE_REMOTING` - supports remoting on various types including inheriting from `MarshalByRefObject`.\n* `FEATURE_SECURITY_PERMISSIONS` - enables the use of CAS and `Security[Critical|SafeCritical|Transparent]`.\n* `FEATURE_SERIALIZATION` - enables support for serialization of dynamic proxies and other types.\n* `FEATURE_SYSTEM_CONFIGURATION` - enables features that use `System.Configuration` and the `ConfigurationManager`.\n\nThe following conditional compilation symbols are defined for tests only under .NET 4.6.2:\n* `FEATURE_CODEDOM` - enables code that uses `System.CodeDom`.\n* `FEATURE_CONSOLETRACELISTENER` - enables code that requires `System.Diagnostics.ConsoleTraceListener`.\n* `FEATURE_THREADABORT` - enables code that uses `Thread.Abort()`.\n* `FEATURE_WPF` - enables code that uses `PresentationCore.dll`.\n"
        },
        {
          "name": "TODO.txt",
          "type": "blob",
          "size": 0.666015625,
          "content": "**internal changes and refactorings to do**\n\n- change now interaction with Burden in the creation pipeline happen. Especially try to eliminate the ugly context.AttachExistingBurden(burden); call\n\n- better unify exceptions thrown and start taking advantage of what the exception facilities in Visual Studio and .NET provide.\n\n- scoping per tag:\n\n- container.BeginScope(IDictionary inlineArguments)\n\tthose arguments would be available in each and every resolve (and their subdependencies...?)\n\n\n- nesting scopes - NOT SUPPORTED\n\n- change the exception thrown when creating typed factory to point out that the facility should be added to the container first, before adding the factory."
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.7802734375,
          "content": "image: Visual Studio 2022\n\nbuild:\n  verbosity: minimal\n  publish_nuget: false\n\nskip_tags: false\n\ntest: off\n\ninit:\n- ps: >-\n    if ($env:APPVEYOR_REPO_TAG -eq \"true\")\n    {\n        Update-AppveyorBuild -Version ($env:APPVEYOR_REPO_TAG_NAME).TrimStart(\"v\")\n    }\n\nbefore_build:\n- c:\\Windows\\System32\\sc.exe config NetTcpPortSharing start= demand\n    \non_success:\n- ps: >-\n    if ($env:APPVEYOR_REPO_TAG -eq \"true\")\n    {\n        nuget push \".\\build\\Castle.Windsor.${env:APPVEYOR_BUILD_VERSION}.nupkg\" -ApiKey $env:NUGET_API_KEY -Source https://api.nuget.org/v3/index.json\n        nuget push \".\\build\\Castle.LoggingFacility.${env:APPVEYOR_BUILD_VERSION}.nupkg\" -ApiKey $env:NUGET_API_KEY -Source https://api.nuget.org/v3/index.json\n        nuget push \".\\build\\Castle.Windsor.Extensions.DependencyInjection.${env:APPVEYOR_BUILD_VERSION}.nupkg\" -ApiKey $env:NUGET_API_KEY -Source https://api.nuget.org/v3/index.json\n        nuget push \".\\build\\Castle.Facilities.AspNet.SystemWeb.${env:APPVEYOR_BUILD_VERSION}.nupkg\" -ApiKey $env:NUGET_API_KEY -Source https://api.nuget.org/v3/index.json\n        nuget push \".\\build\\Castle.Facilities.AspNet.Mvc.${env:APPVEYOR_BUILD_VERSION}.nupkg\" -ApiKey $env:NUGET_API_KEY -Source https://api.nuget.org/v3/index.json\n        nuget push \".\\build\\Castle.Facilities.AspNet.WebApi.${env:APPVEYOR_BUILD_VERSION}.nupkg\" -ApiKey $env:NUGET_API_KEY -Source https://api.nuget.org/v3/index.json\n        nuget push \".\\build\\Castle.Facilities.AspNetCore.${env:APPVEYOR_BUILD_VERSION}.nupkg\" -ApiKey $env:NUGET_API_KEY -Source https://api.nuget.org/v3/index.json\n        nuget push \".\\build\\Castle.WcfIntegrationFacility.${env:APPVEYOR_BUILD_VERSION}.nupkg\" -ApiKey $env:NUGET_API_KEY -Source https://api.nuget.org/v3/index.json\n    }\n\nbuild_script:  \n  - cmd: build.cmd\n\nartifacts:\n - path: build\\*.nupkg\n"
        },
        {
          "name": "build.cmd",
          "type": "blob",
          "size": 0.8251953125,
          "content": "@ECHO OFF\nREM ****************************************************************************\nREM Copyright 2004-2013 Castle Project - http://www.castleproject.org/\nREM Licensed under the Apache License, Version 2.0 (the \"License\");\nREM you may not use this file except in compliance with the License.\nREM You may obtain a copy of the License at\nREM \nREM     http://www.apache.org/licenses/LICENSE-2.0\nREM \nREM Unless required by applicable law or agreed to in writing, software\nREM distributed under the License is distributed on an \"AS IS\" BASIS,\nREM WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nREM See the License for the specific language governing permissions and\nREM limitations under the License.\nREM ****************************************************************************\n\n@call buildscripts\\build.cmd %*\n\n"
        },
        {
          "name": "buildscripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}