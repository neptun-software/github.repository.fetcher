{
  "metadata": {
    "timestamp": 1736710819873,
    "page": 320,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "angularsen/UnitsNet",
      "stars": 2705,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 3.0625,
          "content": "# EditorConfig is awesome:http://EditorConfig.org\n# Based on: https://raw.githubusercontent.com/dotnet/roslyn/master/.editorconfig\n\n# top-most EditorConfig file\nroot = true\n\n# Don't use tabs for indentation.\n[*]\nindent_style = space\ntrim_trailing_whitespace = true\n# (Please don't specify an indent_size here; that has too many unintended consequences.)\n\n# Code files\n[*.{cs,csx,vb,vbx}]\nindent_size = 4\ninsert_final_newline = true\ncharset = utf-8-bom\n\n[*.{cmd,bat}]\nindent_size = 2\nend_of_line = crlf\ninsert_final_newline = false\n\n[*.{ps1,psm1}]\nindent_size = 2\nend_of_line = crlf\ninsert_final_newline = true\ncharset = utf-8-bom\n\n# Xml project files\n[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]\nindent_size = 2\n\n# Xml config files\n[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]\nindent_size = 2\n\n# JSON files\n[*.json]\nindent_size = 2\n\n# Dotnet code style settings:\n[*.{cs,vb}]\n# Sort using and Import directives with System.* appearing first\ndotnet_sort_system_directives_first = true\n# Avoid \"this.\" and \"Me.\" if not necessary\ndotnet_style_qualification_for_field = false:suggestion\ndotnet_style_qualification_for_property = false:suggestion\ndotnet_style_qualification_for_method = false:suggestion\ndotnet_style_qualification_for_event = false:suggestion\n\n# Use language keywords instead of framework type names for type references\ndotnet_style_predefined_type_for_locals_parameters_members = true:suggestion\ndotnet_style_predefined_type_for_member_access = true:suggestion\n\n# Suggest more modern language features when available\ndotnet_style_object_initializer = true:suggestion\ndotnet_style_collection_initializer = true:suggestion\ndotnet_style_coalesce_expression = true:suggestion\ndotnet_style_null_propagation = true:suggestion\ndotnet_style_explicit_tuple_names = true:suggestion\n\n# CSharp code style settings:\n[*.cs]\n# Prefer \"var\" everywhere\ncsharp_style_var_for_built_in_types = true:suggestion\ncsharp_style_var_when_type_is_apparent = true:suggestion\ncsharp_style_var_elsewhere = false:suggestion\n\n# Prefer method-like constructs to have a block body\ncsharp_style_expression_bodied_methods = false:none\ncsharp_style_expression_bodied_constructors = false:none\ncsharp_style_expression_bodied_operators = false:none\n\n# Prefer property-like constructs to have an expression-body\ncsharp_style_expression_bodied_properties = true:none\ncsharp_style_expression_bodied_indexers = true:none\ncsharp_style_expression_bodied_accessors = true:none\n\n# Suggest more modern language features when available\ncsharp_style_pattern_matching_over_is_with_cast_check = true:suggestion\ncsharp_style_pattern_matching_over_as_with_null_check = true:suggestion\ncsharp_style_inlined_variable_declaration = true:suggestion\ncsharp_style_throw_expression = true:suggestion\ncsharp_style_conditional_delegate_call = true:suggestion\n\n# Newline settings\ncsharp_new_line_before_open_brace = all\ncsharp_new_line_before_else = true\ncsharp_new_line_before_catch = true\ncsharp_new_line_before_finally = true\ncsharp_new_line_before_members_in_object_initializers = true\ncsharp_new_line_before_members_in_anonymous_types = true\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 1.4951171875,
          "content": "# Set default behavior to automatically normalize line endings.\n* text=auto\n# Visual Studio\n*.sln        text eol=crlf\n*.csproj     text eol=crlf\n*.vbproj     text eol=crlf\n*.vcxproj    text eol=crlf\n*.vcproj     text eol=crlf\n*.dbproj     text eol=crlf\n*.fsproj     text eol=crlf\n*.lsproj     text eol=crlf\n*.wixproj    text eol=crlf\n*.modelproj  text eol=crlf\n*.sqlproj    text eol=crlf\n*.wmaproj    text eol=crlf\n*.xproj      text eol=crlf\n*.props      text eol=crlf\n*.filters    text eol=crlf\n*.vcxitems   text eol=crlf\n# C#\n*.cs    diff=csharp\n*.g.cs  linguist-generated\n# Powershell\n*.ps1    text  eol=crlf\n# Common\n# Documents\n*.doc\t diff=astextplain\n*.DOC\t diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot  diff=astextplain\n*.DOT  diff=astextplain\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain\n*.md text\n*.adoc text\n*.textile text\n*.mustache text\n*.csv text\n*.tab text\n*.tsv text\n*.sql text\n# Graphics\n*.png binary\n*.jpg binary\n*.jpeg binary\n*.gif binary\n*.tif binary\n*.tiff binary\n*.ico binary\n# SVG treated as an asset (binary) by default. If you want to treat it as text,\n# comment-out the following line and uncomment the line after.\n*.svg binary\n#*.svg text\n*.eps binary\n# Avoid messing up GitHub statistics on code language by excluding sample projects\nUnitsNet.TestApps.Uwp.JavaScript/* linguist-vendored\nUnitsNet.TestApps.Uwp.WinJS/* linguist-vendored\nUnitsNet.TestApps.Uwp.Csharp/* linguist-vendored\n*.exe filter=lfs diff=lfs merge=lfs -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.1884765625,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# VS Code dir\n.vscode/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# Custom for this repo\nArtifacts\n**/Thumbs.db\n\n# Build server tooling\n/secure-file\n/.tools/\n"
        },
        {
          "name": "Build",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.28515625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at https://gitter.im/UnitsNet/Lobby. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.744140625,
          "content": "﻿# Contributing to Units.NET\n\nGuidelines for contributing to the repo.\n\n## We want your help and we are friendly to first-time contributors!\nAdding a new unit or a new quantity is easy! We have detailed the steps here and if you need any assistance we are happy to help!\n\nhttps://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit\n\nWe also want the person with the idea, suggestion or bug report to implement the change in code and get a sense of ownership for that piece of the library.\nThis is to help grow the number of people that can contribute to the project and after someone new lands that first PR we often see more PRs from that person later.\n\n## Coding Conventions\n* Match the existing code style, we generally stick to \"Visual Studio defaults\" and [.NET Foundation Coding Guidelines](https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md)\n* If you use ReSharper there is a [settings file](https://github.com/angularsen/UnitsNet/blob/master/UnitsNet.sln.DotSettings) that will take effect automatically\n* There is an [.editorconfig](https://github.com/angularsen/UnitsNet/blob/master/.editorconfig) to help configure whitespace and C# syntax for your editor if it supports it\n* Add the file header to new files you create\n\n### Test Code\n* Test class: Use `Tests` suffix for the type you are testing, such as `UnitSystemTests`\n* Test method: `<method>_<condition>_<result>` (`Parse_AmbiguousUnits_ThrowsException`)\n* If there are many tests for a single method, you can wrap those in an inner class named the same as the method and then you can skip that part of the test method names\n\n## Unit definitions (.JSON)\nFor a fairly complete summary of the unit definition JSON schema, see [Meter of Length](https://github.com/angularsen/UnitsNet/blob/master/Common/UnitDefinitions/Length.json). It has prefix units and multiple cultures.\n\n### Conversion functions\nConverting from unit A to B is achieved by first converting from unit A to the base unit, then from the base unit to unit B. To achieve this, each unit defines two conversion functions.\n\n* Prefer multiplication for `FromUnitToBaseFunc` (`{x} * 2.54e-2` for `Inch` to `Meter`)\n* Prefer division for `FromBaseToUnitFunc` (`{x} / 2.54e-2` for `Meter` to `Inch`)\n* Prefer scientific notation `1e3` and `1e-5` instead of `1000` and `0.00001`\n* Prefer a constant if the conversion factor is finite (`{x} * 2.54e-2` for `Inch`)\n* Prefer a calculation if the conversion factor is infinite (`({x} / 72.27)*2.54e-2` for `PrinterPoint`)\n\n### Units\nGenerally we try to name the units as what is the most widely used.\n\n* Use prefix for country variants, such as `ImperialGallon` and `UsGallon`\n\n**Note:** We should really consider switching variant prefix to suffix, since that plays better with kilo, mega etc.. Currently we have units named `KilousGallon` and `KiloimperialGallon`, these would be better named `KilogallonUs` and `KilogallonImperial`.\n\n### Unit abbreviations\nA unit can have multiple abbreviations per culture/language, the first one is used by `ToString()` while all of them are used by `Parse()`.\n\n* Prefer the most widely used abbreviation in the domain, but try to adapt to our conventions\n* Add other popular variants to be able to parse those too, but take care to avoid abbreviation conflicts of units of the same quantity\n* Use superscript (`cm²`, `m³`) instead of `cm^2`, `m^3`\n* Use `∆` for delta (not `▲`)\n* Use `·` for products (`N·m` instead of `Nm`, `N*m` or `N.m`)\n* Prefer `/` over `⁻¹`, such as `km/h` and `J/(mol·K)`\n* Use `h` for hours, `min` for minutes and `s` for seconds (`m` is ambiguous with meters)\n* Use suffixes to distinguish variants of similar units, such as `gal (U.S.)` vs `gal (imp.)` for gallons\n  * `(U.S.)` for United States\n  * `(imp.)` for imperial / British units\n"
        },
        {
          "name": "CodeGen",
          "type": "tree",
          "content": null
        },
        {
          "name": "Common",
          "type": "tree",
          "content": null
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 1.16015625,
          "content": "<Project>\n  <!-- This file will be implicitly linked by all projects in folder -folders -->\n  <PropertyGroup>\n    <!-- Default to output to Artifacts folder -->\n    <OutputPath>$(MSBuildThisFileDirectory)Artifacts/$(MSBuildProjectName)</OutputPath>\n    <!-- Specific output folder for .NET nanoFramework projects -->\n    <OutputPath Condition=\" '$(TargetFrameworkIdentifier)' == '.NETnanoFramework'\">$(MSBuildThisFileDirectory)Artifacts/UnitsNet.NanoFramework/$(MSBuildProjectName)</OutputPath>\n\n  </PropertyGroup>\n\n  <!-- Workaround for `dotnet test UnitsNet.sln`: https://dasmulli.blog/2018/01/20/make-dotnet-test-work-on-solution-files/ -->\n  <Target Name=\"VSTestIfTestProject\">\n    <CallTarget Targets=\"VSTest\" Condition=\"'$(IsTestProject)' == 'true'\" />\n  </Target>\n\n  <!-- Warnings and errors -->\n  <PropertyGroup>\n    <!-- Warning instead of compile error on obsolete errors.-->\n    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>\n    <!-- 612: obsolete, 618: obsolete with message -->\n    <WarningsNotAsErrors>612,618</WarningsNotAsErrors>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <Compile Include=\"$(MSBuildThisFileDirectory)/NullableAttributes.cs\" />\n  </ItemGroup>\n\n</Project>"
        },
        {
          "name": "Docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.92578125,
          "content": "MIT No Attribution\n\nCopyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "NullableAttributes.cs",
          "type": "blob",
          "size": 9.19140625,
          "content": "﻿// Workaround for nullable annotations when multitargeting against netstandard2.0 or .NET versions lower than .NET Core 3.0, which do not support it out of the box.\n// https://www.meziantou.net/how-to-use-nullable-reference-types-in-dotnet-standard-2-0-and-dotnet-.htm\n\n// https://github.com/dotnet/runtime/blob/527f9ae88a0ee216b44d556f9bdc84037fe0ebda/src/libraries/System.Private.CoreLib/src/System/Diagnostics/CodeAnalysis/NullableAttributes.cs\n\n#pragma warning disable\n#define INTERNAL_NULLABLE_ATTRIBUTES\n\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\nnamespace System.Diagnostics.CodeAnalysis\n{\n#if NETSTANDARD2_0 ||  NETCOREAPP2_0 ||  NETCOREAPP2_1 ||  NETCOREAPP2_2 || NET45 || NET451 || NET452 || NET46 || NET461 || NET462 || NET47 || NET471 || NET472 || NET48\n    /// <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property, Inherited = false)]\n#if SYSTEM_PRIVATE_CORELIB\n    public\n#else\n    internal\n#endif\n        sealed class AllowNullAttribute : Attribute\n    { }\n\n    /// <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property, Inherited = false)]\n#if SYSTEM_PRIVATE_CORELIB\n    public\n#else\n    internal\n#endif\n        sealed class DisallowNullAttribute : Attribute\n    { }\n\n    /// <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, Inherited = false)]\n#if SYSTEM_PRIVATE_CORELIB\n    public\n#else\n    internal\n#endif\n        sealed class MaybeNullAttribute : Attribute\n    { }\n\n    /// <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, Inherited = false)]\n#if SYSTEM_PRIVATE_CORELIB\n    public\n#else\n    internal\n#endif\n        sealed class NotNullAttribute : Attribute\n    { }\n\n    /// <summary>Specifies that when a method returns <see cref=\"ReturnValue\"/>, the parameter may be null even if the corresponding type disallows it.</summary>\n    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]\n#if SYSTEM_PRIVATE_CORELIB\n    public\n#else\n    internal\n#endif\n        sealed class MaybeNullWhenAttribute : Attribute\n    {\n        /// <summary>Initializes the attribute with the specified return value condition.</summary>\n        /// <param name=\"returnValue\">\n        /// The return value condition. If the method returns this value, the associated parameter may be null.\n        /// </param>\n        public MaybeNullWhenAttribute(bool returnValue) => ReturnValue = returnValue;\n\n        /// <summary>Gets the return value condition.</summary>\n        public bool ReturnValue { get; }\n    }\n\n    /// <summary>Specifies that when a method returns <see cref=\"ReturnValue\"/>, the parameter will not be null even if the corresponding type allows it.</summary>\n    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]\n#if SYSTEM_PRIVATE_CORELIB\n    public\n#else\n    internal\n#endif\n        sealed class NotNullWhenAttribute : Attribute\n    {\n        /// <summary>Initializes the attribute with the specified return value condition.</summary>\n        /// <param name=\"returnValue\">\n        /// The return value condition. If the method returns this value, the associated parameter will not be null.\n        /// </param>\n        public NotNullWhenAttribute(bool returnValue) => ReturnValue = returnValue;\n\n        /// <summary>Gets the return value condition.</summary>\n        public bool ReturnValue { get; }\n    }\n\n    /// <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n#if SYSTEM_PRIVATE_CORELIB\n    public\n#else\n    internal\n#endif\n        sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        /// <summary>Initializes the attribute with the associated parameter name.</summary>\n        /// <param name=\"parameterName\">\n        /// The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.\n        /// </param>\n        public NotNullIfNotNullAttribute(string parameterName) => ParameterName = parameterName;\n\n        /// <summary>Gets the associated parameter name.</summary>\n        public string ParameterName { get; }\n    }\n\n    /// <summary>Applied to a method that will never return under any circumstance.</summary>\n    [AttributeUsage(AttributeTargets.Method, Inherited = false)]\n#if SYSTEM_PRIVATE_CORELIB\n    public\n#else\n    internal\n#endif\n        sealed class DoesNotReturnAttribute : Attribute\n    { }\n\n    /// <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>\n    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]\n#if SYSTEM_PRIVATE_CORELIB\n    public\n#else\n    internal\n#endif\n        sealed class DoesNotReturnIfAttribute : Attribute\n    {\n        /// <summary>Initializes the attribute with the specified parameter value.</summary>\n        /// <param name=\"parameterValue\">\n        /// The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to\n        /// the associated parameter matches this value.\n        /// </param>\n        public DoesNotReturnIfAttribute(bool parameterValue) => ParameterValue = parameterValue;\n\n        /// <summary>Gets the condition parameter value.</summary>\n        public bool ParameterValue { get; }\n    }\n#endif\n\n#if NETSTANDARD2_0 ||  NETCOREAPP2_0 ||  NETCOREAPP2_1 ||  NETCOREAPP2_2 || NETCOREAPP3_0 || NETCOREAPP3_1 || NET45 || NET451 || NET452 || NET46 || NET461 || NET462 || NET47 || NET471 || NET472 || NET48\n    /// <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, Inherited = false, AllowMultiple = true)]\n#if SYSTEM_PRIVATE_CORELIB\n    public\n#else\n    internal\n#endif\n        sealed class MemberNotNullAttribute : Attribute\n    {\n        /// <summary>Initializes the attribute with a field or property member.</summary>\n        /// <param name=\"member\">\n        /// The field or property member that is promised to be not-null.\n        /// </param>\n        public MemberNotNullAttribute(string member) => Members = new[] { member };\n\n        /// <summary>Initializes the attribute with the list of field and property members.</summary>\n        /// <param name=\"members\">\n        /// The list of field and property members that are promised to be not-null.\n        /// </param>\n        public MemberNotNullAttribute(params string[] members) => Members = members;\n\n        /// <summary>Gets field or property member names.</summary>\n        public string[] Members { get; }\n    }\n\n    /// <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, Inherited = false, AllowMultiple = true)]\n#if SYSTEM_PRIVATE_CORELIB\n    public\n#else\n    internal\n#endif\n        sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        /// <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>\n        /// <param name=\"returnValue\">\n        /// The return value condition. If the method returns this value, the associated parameter will not be null.\n        /// </param>\n        /// <param name=\"member\">\n        /// The field or property member that is promised to be not-null.\n        /// </param>\n        public MemberNotNullWhenAttribute(bool returnValue, string member)\n        {\n            ReturnValue = returnValue;\n            Members = new[] { member };\n        }\n\n        /// <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>\n        /// <param name=\"returnValue\">\n        /// The return value condition. If the method returns this value, the associated parameter will not be null.\n        /// </param>\n        /// <param name=\"members\">\n        /// The list of field and property members that are promised to be not-null.\n        /// </param>\n        public MemberNotNullWhenAttribute(bool returnValue, params string[] members)\n        {\n            ReturnValue = returnValue;\n            Members = members;\n        }\n\n        /// <summary>Gets the return value condition.</summary>\n        public bool ReturnValue { get; }\n\n        /// <summary>Gets field or property member names.</summary>\n        public string[] Members { get; }\n    }\n#endif\n}\n"
        },
        {
          "name": "PerfTests",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 24.126953125,
          "content": "﻿[![Build Status](https://dev.azure.com/unitsnet/Units.NET/_apis/build/status/UnitsNet?branchName=master)](https://dev.azure.com/unitsnet/Units.NET/_build/latest?definitionId=1&branchName=master)\n[![codecov](https://codecov.io/gh/angularsen/UnitsNet/branch/master/graph/badge.svg)](https://codecov.io/gh/angularsen/UnitsNet)\n[![StandWithUkraine](https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/badges/StandWithUkraine.svg)](https://github.com/vshymanskyy/StandWithUkraine/blob/main/docs/README.md)\n\n## Units.NET\n\nAdd strongly typed quantities to your code and get merrily on with your life.\n\nNo more magic constants found on Stack Overflow, no more second-guessing the unit of parameters and variables.\n\n[Upgrading from 4.x to 5.x](https://github.com/angularsen/UnitsNet/wiki/Upgrading-from-4.x-to-5.x)<br>\n[Upgrading from 5.x to 6.x](https://github.com/angularsen/UnitsNet/wiki/Upgrading-from-5.x-to-6.x) (still in prerelease and may yet change)\n\n### Overview\n\n* [Overview](#overview)\n* [Installing via NuGet](#installing-via-nuget)\n* [Static Typing](#static-typing)\n* [Operator Overloads](#operator-overloads)\n* [Culture and Localization](#culture-and-localization)\n* [Dynamically Parse Quantities and Convert to Units](#dynamically-parse-quantities-and-convert-to-units)\n* [Custom units](#custom-units)\n* [Example: Unit converter app](#example-unit-converter-app)\n* [Example: WPF app using IValueConverter to parse input](#example-wpf-app-using-ivalueconverter-to-parse-input)\n* [Precision and Accuracy](#precision-and-accuracy)\n* [Serialize to JSON, XML and more](#serialize-to-json-xml-and-more)\n* [Want To Contribute?](#want-to-contribute)\n* [Continuous Integration](#continuous-integration)\n* [Who are Using This?](#who-are-using-this)\n* [Top Usages by GitHub Repos](#top-usages-by-gitHub-repos)\n* [Units.NET on other platforms](#unitsnet-on-other-platforms)\n\n### Installing via NuGet\n\nAdd it via CLI\n\n    dotnet add package UnitsNet\n\nor go to [NuGet Gallery | UnitsNet](https://www.nuget.org/packages/UnitsNet) for detailed instructions.\n\n\n#### Build Targets\n\n* .NET Standard 2.0\n* [.NET nanoFramework](https://www.nanoframework.net/)\n\n### Static Typing\n\n```C#\n// Construct\nLength meter = Length.FromMeters(1);\nLength twoMeters = new Length(2, LengthUnit.Meter);\n\n// Convert\ndouble cm = meter.Centimeters;         // 100\ndouble yards = meter.Yards;            // 1.09361\ndouble feet = meter.Feet;              // 3.28084\ndouble inches = meter.Inches;          // 39.3701\n\n// Pass quantity types instead of values to avoid conversion mistakes and communicate intent\nstring PrintPersonWeight(Mass weight)\n{\n    // Compile error! Newtons belong to Force, not Mass. A common source of confusion.\n    double weightNewtons = weight.Newtons;\n\n    // Convert to the unit of choice - when you need it\n    return $\"You weigh {weight.Kilograms:F1} kg.\";\n}\n```\n\n### Operator Overloads\n\n```C#\n// Arithmetic\nLength l1 = 2 * Length.FromMeters(1);\nLength l2 = Length.FromMeters(1) / 2;\nLength l3 = l1 + l2;\n\n// Construct between units\nLength distance = Speed.FromKilometersPerHour(80) * TimeSpan.FromMinutes(30);\nAcceleration a1 = Speed.FromKilometersPerHour(80) / TimeSpan.FromSeconds(2);\nAcceleration a2 = Force.FromNewtons(100) / Mass.FromKilograms(20);\nRotationalSpeed r = Angle.FromDegrees(90) / TimeSpan.FromSeconds(2);\n```\n\n### Culture and Localization\n\nThe culture for abbreviations defaults to Thread.CurrentCulture and falls back to US English if not defined. Thread.CurrentCulture affects number formatting unless a custom culture is specified. The relevant methods are:\n\n* ToString()\n* GetAbbreviation()\n* Parse/TryParse()\n* ParseUnit/TryParseUnit()\n```C#\nvar usEnglish = new CultureInfo(\"en-US\");\nvar russian = new CultureInfo(\"ru-RU\");\nvar oneKg = Mass.FromKilograms(1);\n\n// ToString() uses CurrentCulture for abbreviation language number formatting. This is consistent with the behavior of the .NET Framework,\n// where DateTime.ToString() uses CurrentCulture for the whole string, likely because mixing an english date format with a russian month name might be confusing.\nCultureInfo.CurrentCulture = russian;\nstring kgRu = oneKg.ToString(); // \"1 кг\"\n\n// ToString() with specific culture and custom string format pattern\nstring mgUs = oneKg.ToUnit(MassUnit.Milligram).ToString(usEnglish, \"unit: {1}, value: {0:F2}\"); // \"unit: mg, value: 1.00\"\nstring mgRu = oneKg.ToUnit(MassUnit.Milligram).ToString(russian, \"unit: {1}, value: {0:F2}\"); // \"unit: мг, value: 1,00\"\n\n// Parse measurement from string\nMass kg = Mass.Parse(\"1.0 kg\", usEnglish);\n\n// Parse unit from string, a unit can have multiple abbreviations\nRotationalSpeedUnit rpm1 = RotationalSpeed.ParseUnit(\"rpm\"); // RotationalSpeedUnit.RevolutionPerMinute\nRotationalSpeedUnit rpm2 = RotationalSpeed.ParseUnit(\"r/min\");  // RotationalSpeedUnit.RevolutionPerMinute\n\n// Get default abbreviation for a unit, the first if more than one is defined in Length.json for Kilogram unit\nstring kgAbbreviation = Mass.GetAbbreviation(MassUnit.Kilogram); // \"kg\"\n```\n\n#### Gotcha: AmbiguousUnitParseException\nSome units of a quantity have the same abbreviation, which means `.Parse()` is not able to know what unit you wanted.\nUnfortunately there is no built-in way to avoid this, either you need to ensure you don't pass in input that cannot be parsed or you need to write your own parser that has more knowledge of preferred units or maybe only a subset of the units.\n\nExample:\n`Length.Parse(\"1 pt\")` throws `AmbiguousUnitParseException` with message `Cannot parse \"pt\" since it could be either of these: DtpPoint, PrinterPoint`.\n\n### Dynamically Parse Quantities and Convert to Units\nSometimes you need to work with quantities and units at runtime, such as parsing user input.\n\nThere are a handful of classes to help with this:\n\n- [Quantity](UnitsNet/CustomCode/Quantity.cs) for parsing and constructing quantities as well as looking up units, names and quantity information dynamically\n- [UnitConverter](UnitsNet/UnitConverter.cs) for converting values to a different unit, with only strings or enum values\n- [UnitParser](UnitsNet/CustomCode/UnitParser.cs) for parsing unit abbreviation strings, such as `\"cm\"` to `LengthUnit.Centimeter`\n\n#### Quantity - Enumerate quantities and units at runtime\nUse `Quantity` class for looking up `QuantityInfo` and `UnitInfo` at runtime.\n\n```c#\nstring[] names = Quantity.Names;     // [\"Length\", \"Mass\", ...]\nQuantityInfo[] qis = Quantity.Infos; // All quantities and their units, types, values.\n\n// Look up quantity by name.\nQuantityInfo lengthInfo = Quantity.ByName[\"Length\"];\nUnitInfo[] lengthUnits = lengthInfo.UnitInfos;\n\n// Look up unit by enum value (note: for extensibility, will instead look up by name in the future)\nUnitInfo cmInfo = Quantity.GetUnitInfo(LengthUnit.Centimeter);\n```\n\n#### QuantityInfo - Information about a quantity\n`QuantityInfo` makes it easy to get names, units, types and values for a quantity.\nThis is useful for populating lists of quantities and units for the user to choose.\n\n```c#\n// Different ways to look up the quantity info.\nQuantityInfo lengthInfo = Quantity.ByName[\"Length\"];\nlengthInfo = Length.Info;\nlengthInfo = Length.FromMeters(1).QuantityInfo;\n\n// The quantity information.\nlengthInfo.Name;            // \"Length\"\nlengthInfo.UnitInfos;       // UnitInfo[] for its units Centimeter, Meter, etc.\nlengthInfo.BaseUnitInfo;    // UnitInfo for LengthUnit.Meter\nlengthInfo.BaseDimensions;  // {\"Length\": 1, \"Mass\": 0, ...}\nlengthInfo.UnitType;        // typeof(LengthUnit)\nlengthInfo.ValueType;       // typeof(Length)\nlengthInfo.Zero;            // Length.Zero\n```\n\n#### UnitInfo - Information about a unit\n`UnitInfo` describes a unit, such as its enum value, names and its representation in SI base units.\n\n```c#\n// Different ways to look up the unit info.\nvar cm = Quantity.GetUnitInfo(LengthUnit.Centimeter);\n\nif (Quantity.TryGetUnitInfo(LengthUnit.Centimeter, out UnitInfo tryGetCm)) {\n    cm = tryGetCm;\n}\n\n// The unit information.\ncm.Value;       // Enum value: LengthUnit.Centimeter\ncm.Name;        // \"Centimeter\"\ncm.PluralName;  // \"Centimeters\"\ncm.BaseUnits;   // {\"Length\": Centimeter, \"Mass\": null, \"Time\": null, ...}\n```\n\n#### Construct quantity\nAll you need is the value and the unit enum value.\n\n```c#\nIQuantity quantity = Quantity.From(3, LengthUnit.Centimeter); // Length\n\nif (Quantity.TryFrom(3, LengthUnit.Centimeter, out IQuantity quantity2))\n{\n}\n```\n\nYou can also construct from strings, such as mapping between DTO types in an API:\n```c#\nIQuantity quantity = Quantity.From(value: 3, quantityName: \"Length\", unitName: \"Centimeter\");\n\nif (Quantity.TryFrom(value: 3, quantityName: \"Length\", unitName: \"Centimeter\", out IQuantity? quantity2))\n{\n}\n```\n\nOr create by just the unit abbreviation, as long as there is exactly one unit with this abbreviation.\n```c#\n// Length with unit LengthUnit.Centimeter\nIQuantity quantity = Quantity.FromUnitAbbreviation(3, \"cm\");\n\nif (Quantity.TryFromUnitAbbreviation(3, \"cm\", out IQuantity? quantity2))\n{\n}\n```\n\n#### Parse quantity\nParse any string to a quantity instance of the given the quantity type.\n\n```c#\nIQuantity quantity = Quantity.Parse(typeof(Length), \"3 cm\"); // Length\n\nif (Quantity.TryParse(typeof(Length), \"3cm\", out IQuantity quantity2)\n{\n}\n```\n\n#### Parse unit\n[UnitParser](UnitsNet/CustomCode/UnitParser.cs) parses unit abbreviation strings to unit enum values.\n\n```c#\nEnum unit = UnitsNetSetup.Default.UnitParser.Parse(\"cm\", typeof(LengthUnit)); // LengthUnit.Centimeter\n\nif (UnitsNetSetup.Default.UnitParser.TryParse(\"cm\", typeof(LengthUnit), out Enum unit2))\n{\n    // Use unit2 as LengthUnit.Centimeter\n}\n```\n\n#### Convert quantity to unit - IQuantity and Enum\nConvert any `IQuantity` instance to a different unit by providing a target unit enum value.\n```c#\n// Assume these are passed in at runtime, we don't know their values or type\nEnum userSelectedUnit = LengthUnit.Millimeter;\nIQuantity quantity = Length.FromCentimeters(3);\n\n// Later we convert to a unit\nquantity.ToUnit(userSelectedUnit).Value;      // 30\nquantity.ToUnit(userSelectedUnit).Unit;       // LengthUnit.Millimeter\nquantity.ToUnit(userSelectedUnit).ToString(); // \"30 mm\"\nquantity.ToUnit(PressureUnit.Pascal);         // Throws exception, not compatible\nquantity.As(userSelectedUnit);                // 30\n```\n\n#### Convert quantity to unit - From/To Enums\nUseful when populating lists with unit enum values for the user to choose.\n\n```c#\nUnitConverter.Convert(1, LengthUnit.Centimeter, LengthUnit.Millimeter); // 10 mm\n```\n\n#### Convert quantity to unit - Names or abbreviation strings\nSometimes you only have strings to work with, that works too!\n\n```c#\nUnitConverter.ConvertByName(1, \"Length\", \"Centimeter\", \"Millimeter\"); // 10 mm\nUnitConverter.ConvertByAbbreviation(1, \"Length\", \"cm\", \"mm\"); // 10 mm\n```\n\n### Custom units\n\nUnits.NET allows you to add your own units and quantities at runtime, to represent as `IQuantity` and reusing Units.NET for parsing and converting between units.\n\nRead more at [Extending-with-Custom-Units](https://github.com/angularsen/UnitsNet/wiki/Extending-with-Custom-Units).\n\n#### Map between unit enum values and unit abbreviations\n```c#\n// Map unit enum values to unit abbreviations\nvar unitAbbreviations = UnitsNetSetup.Default.UnitAbbreviations;\nunitAbbreviations.MapUnitToDefaultAbbreviation(HowMuchUnit.Some, \"sm\");\nunitAbbreviations.GetDefaultAbbreviation(HowMuchUnit.Some); // \"sm\"\n\nUnitsNetSetup.Default.UnitParser.Parse<HowMuchUnit>(\"sm\");  // HowMuchUnit.Some\n```\n\n#### Convert between units of custom quantity\n```c#\nvar unitConverter = UnitsNetSetup.Default.UnitConverter;\nunitConverter.SetConversionFunction<HowMuch>(HowMuchUnit.Lots, HowMuchUnit.Some, x => new HowMuch(x.Value * 2, HowMuchUnit.Some));\nunitConverter.SetConversionFunction<HowMuch>(HowMuchUnit.Tons, HowMuchUnit.Lots, x => new HowMuch(x.Value * 10, HowMuchUnit.Lots));\nunitConverter.SetConversionFunction<HowMuch>(HowMuchUnit.Tons, HowMuchUnit.Some, x => new HowMuch(x.Value * 20, HowMuchUnit.Some));\n\nvar from = new HowMuch(10, HowMuchUnit.Tons);\nIQuantity Convert(HowMuchUnit toUnit) => unitConverter.GetConversionFunction<HowMuch>(from.Unit, toUnit)(from);\n\nConsole.WriteLine($\"Convert 10 tons to:\");\nConsole.WriteLine(Convert(HowMuchUnit.Some)); // 200 sm\nConsole.WriteLine(Convert(HowMuchUnit.Lots)); // 100 lts\nConsole.WriteLine(Convert(HowMuchUnit.Tons)); // 10 tns\n```\n\n#### Parse custom quantity\n[QuantityParser](UnitsNet/CustomCode/QuantityParser.cs) parses quantity strings to `IQuantity` by mapping custom units to unit abbreviations in `UnitAbbreviationsCache`.\n\n```c#\n// Map custom units to abbreviations\nvar unitAbbreviationsCache = UnitsNetSetup.Default.UnitAbbreviations;\nunitAbbreviationsCache.MapUnitToAbbreviation(HowMuchUnit.Some, \"sm\");\nunitAbbreviationsCache.MapUnitToAbbreviation(HowMuchUnit.ATon, \"tn\");\n\nvar quantityParser = UnitsNetSetup.Default.QuantityParser;\n\n// \"1 sm\" => new HowMuch(1, HowMuchUnit.Some)\nHowMuch q = quantityParser.Parse<HowMuch, HowMuchUnit>(\n    str: \"1 sm\",\n    formatProvider: null,\n    fromDelegate: (value, unit) => new HowMuch((double) value, unit));\n```\n\n```c#\n// Alternatively, create your own instances to not change the global singleton instances.\nvar unitAbbreviationsCache = UnitAbbreviationsCache.CreateDefault(); // or .CreateEmpty()\nunitAbbreviationsCache.MapUnitToAbbreviation(HowMuchUnit.Some, \"sm\");\nunitAbbreviationsCache.MapUnitToAbbreviation(HowMuchUnit.ATon, \"tn\");\n\nvar quantityParser = new QuantityParser(unitAbbreviationsCache);\n```\n\n\n### Example: Unit converter app\n[Source code](https://github.com/angularsen/UnitsNet/tree/master/Samples/UnitConverter.Wpf) for `Samples/UnitConverter.Wpf`<br/>\n[Download](https://github.com/angularsen/UnitsNet/releases/tag/UnitConverterWpf%2F2018-11-09) (release 2018-11-09 for Windows)\n\n![image](https://user-images.githubusercontent.com/787816/34920961-9b697004-f97b-11e7-9e9a-51ff7142969b.png)\n\nThis example shows how you can create a dynamic unit converter, where the user selects the quantity to convert, such as `Temperature`, then selects to convert from `DegreeCelsius` to `DegreeFahrenheit` and types in a numeric value for how many degrees Celsius to convert.\nThe quantity list box contains quantity names, such as `\"Length\"`. The two unit list boxes contain `Enum` values, such as `LengthUnit.Meter`.\n\n#### Populate quantity selector\nUse `Quantity` to enumerate all quantity names, such as `\"Length\"` and `\"Mass\"`.\n\n```c#\nthis.Quantities = Quantity.Names; // string[]\n\n// or\nthis.Quantities = Quantity.Infos.Select(i => i.Name).ToList();\n```\n\n#### Update unit lists when selecting new quantity\nSo user can only choose from/to units compatible with the quantity type.\n\n```c#\nQuantityInfo quantityInfo = Quantity.ByName[quantityName];\n\n_units.Clear();\nforeach (Enum unitValue in quantityInfo.UnitInfos.Select(ui => ui.Value))\n{\n    _units.Add(new UnitListItem(unitValue));\n}\n```\n\n#### Update calculation on unit selection changed\nUsing `UnitConverter` to convert by unit enum values as given by the list selection `\"Length\"` and unit names like `\"Centimeter\"` and `\"Meter\"`.\n\n```c#\ndouble convertedValue = UnitConverter.Convert(\n    FromValue,                      // numeric value\n    SelectedFromUnit.UnitEnumValue, // Enum, such as LengthUnit.Meter\n    SelectedToUnit.UnitEnumValue);  // Enum, such as LengthUnit.Centimeter\n```\n\n### Example: WPF app using IValueConverter to parse input\n\nSrc: [Samples/MvvmSample.Wpf](https://github.com/angularsen/UnitsNet/tree/master/Samples/MvvmSample.Wpf)\n\n![wpfmvvmsample_219w](https://user-images.githubusercontent.com/787816/34913417-094332e2-f8fd-11e7-9d8a-92db105fbbc9.png)\n\nThe purpose of this app is to show how to create an `IValueConverter` in order to bind XAML to quantities.\n\n### Precision and Accuracy\n\nA base unit is chosen for each unit class, represented by a double value (64-bit), and all conversions go via this unit. This means that there will always be a small error in both representing other units than the base unit as well as converting between units.\n\nUnits.NET was intended for convenience and ease of use, not highly accurate conversions, but I am open to suggestions for improvements.\n\nThe tests accept an error up to 1E-5 for most units added so far. Exceptions include units like Teaspoon, where the base unit cubic meter is a lot bigger. In many usecases this is sufficient, but for others this may be a showstopper and something you need to be aware of.\n\nFor more details, see [Precision](https://github.com/angularsen/UnitsNet/wiki/Precision).\n\n### Serialize to JSON, XML and more\n\nRead the wiki on [Serializing to JSON, XML and more](https://github.com/angularsen/UnitsNet/wiki/Serializing-to-JSON,-XML-and-more).\n\n\n### Want To Contribute?\n\n- [Adding a New Unit](https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit) is fairly easy to do and we are happy to help.\n- Want a new feature or to report a bug? [Create an issue](https://github.com/angularsen/UnitsNet/issues/new/choose) or start a [discussion](https://github.com/angularsen/UnitsNet/discussions).\n\n### Continuous Integration\n\n[Azure DevOps](https://dev.azure.com/unitsnet/Units.NET/) performs the following:\n* Build and test all branches\n* Build and test pull requests, notifies on success or error\n* Deploy nugets on master branch, if nuspec versions changed\n\n\n### Who are Using UnitsNet?\n\nIt would be awesome to know who are using this library. If you would like your project listed here, [create an issue](https://github.com/angularsen/UnitsNet/issues) or edit the [README.md](https://github.com/angularsen/UnitsNet/edit/master/README.md) and send a pull request. Max logo size is `300x35 pixels` and should be in `.png`, `.gif` or `.jpg` formats.\n\n![Motion Catalyst logo](http://swingcatalyst.s3.amazonaws.com/images/logos/MotionCatalyst_greenblack_35p.png \"Motion Catalyst logo\")\n\n#### Swing Catalyst and Motion Catalyst, Norway\n> Sports performance applications for Windows and iOS, that combine high-speed video with sensor data to bring facts into your training and visualize the invisible forces at work\n>\n> Units.NET started here in 2007 when reading strain gauge measurements from force plates and has been very useful in integrating a number of different sensor types into our software and presenting the data in the user's preferred culture and units.\n\nhttps://www.swingcatalyst.com (for golf)<br>\nhttps://www.motioncatalyst.com (everything else)\n\n*- Andreas Gullberg Larsen, CTO (andreas@motioncatalyst.com)*\n\n![PK Sound logo](https://cloud.githubusercontent.com/assets/17773454/19447800/5c6ec76c-945c-11e6-90f8-3f410e8157b9.jpg)\n#### PK Sound, Canada\n> Award-winning performers and composers put everything they’ve got into their music. PK Sound makes sure their fans will hear it all – brilliantly, precisely, consistently.\n>\n> PK Sound uses UnitsNet in Kontrol - the remote control counterpart to Trinity, the world's only robotic line array solution.\n\nhttp://www.pksound.ca/pk-sound/announcing-the-official-release-of-kontrol/ (for an idea of what the Kontrol project is)<br>\nhttp://www.pksound.ca/trinity/ (the speakers that Kontrol currently controls)<br>\nhttp://www.pksound.ca/ (everything else)\n\n*- Jules LaPrairie, Kontrol software team member*\n\n#### Microsoft.IoT.Devices\n> Microsoft.IoT.Devices extends Windows IoT Core and makes it easier to support devices like sensors and displays. It provides event-driven access for many digital and analog devices and even provides specialized wrappers for devices like joystick, rotary encoder and graphics display.\n\nhttp://aka.ms/iotdevices (home page including docs)<br>\nhttp://www.nuget.org/packages/Microsoft.IoT.Devices (NuGet package)\n\n#### Crawlspace\n> Software for creating printable hex maps for use in pen and paper RPGs. Both\n> a user-friendly app and a high-level library for generating labelled hexmaps.\n\nhttps://bitbucket.org/MartinEden/Crawlspace\n\n*- Martin Eden, project maintainer*\n\n![ANSYS, Inc. Logo](https://www.ansys.com/-/media/ansys/global/brandings/logo-ansys.jpg \"ANSYS, Inc. Logo\")\n\n#### ANSYS, Inc. (ANSYS Discovery Live)\n> ANSYS Discovery Live provides instantaneous 3D simulation, tightly coupled with direct geometry modeling, to enable interactive design exploration and rapid product innovation. It is an interactive experience in which you can manipulate geometry, material types or physics inputs, then instantaneously see changes in performance.\n\nhttps://www.ansys.com\nhttps://www.ansys.com/products/3d-design/ansys-discovery-live\n\n*- Tristan Milnthorp, Principal Software Architect (tristan.milnthorp@ansys.com)*\n\n#### Primoris Sigma Stargen\nStargen is a decades old software to create realistic planets and satellites from a given Star. It's based on work from various scientists and been used for years. Primoris Sigma Stargen is a C# port of the utility that makes it a Framework to extend it with new algorithms for planetary formation and physics equations.\n\nhttps://github.com/ebfortin/primoris.universe.stargen\n\n<img src=\"https://cdn.harringtonhoists.com/assets/harringtonhoists/logo-60629cc144429045d4c85740ab225e219add75b2c5c1e2c444ffa9500347a414.png\" height=\"35\">\n\n#### Harrington Hoists, Inc. (A Subsidiary of KITO Americas, Inc.)\n> Harrington Hoists, Inc. is located in Manheim, PA, Elizabethtown, PA, South Holland, IL and Corona, CA. Harrington is a leading manufacturer of manual, electric and air chain hoists as well as wire rope hoists and crane products serving the North American material handling industry.\n\nHarrington uses UnitsNet in their internal software to perform many different calculations related to crane dimensioning, girder strength, electrical safety verification, etc.\n\nhttps://www.harringtonhoists.com<br>\nhttps://kito.com\n\n*- Luke Westfall, Design Automation Engineer*\n\n#### Structural Analysis Format - SDK project\n<img src=\"https://gblobscdn.gitbook.com/spaces%2F-M__87HTlQktMqcjAf65%2Favatar-1620901174483.png?alt=media\" height=\"35\" />\n\n> The Structural Analysis Format (SAF) has been created to allow structural engineering applications to exchange data using a straight forward and simple to understand format.\n> While inspired by IFC, SAF has its benefits that it's **easily modifyable** by the end-user _(it's an xlsx file)_, **well documented** and **easy to understand**.\n> UnitsNet is used by the SDK provided by SCIA to facilitate import / export between metric & imperial systems\n\nhttps://www.saf.guide\nhttps://github.com/StructuralAnalysisFormat/StructuralAnalysisFormat-SDK\n\n*- Dirk Schuermans, Software Engineer for [SCIA nv](https://www.scia.net)*\n\n### Top Usages by GitHub Repos\n\nProduced with [ghtopdep](https://github.com/github-tooling/ghtopdep).\n\n| Repo                                                            | Stars   |\n|-----------------------------------------------------------------|---------|\n| https://github.com/microsoft/PowerToys                          | 105K    |\n| https://github.com/dotnet/iot                                   | 2.1K    |\n| https://github.com/genielabs/HomeGenie                          | 388     |\n| https://github.com/raspberry-sharp/raspberry-sharp-io           | 340     |\n| https://github.com/nanoframework/nanoFramework.IoT.Device       | 202     |\n| https://github.com/porrey/Virtual-ZPL-Printer                   | 166     |\n| https://github.com/chino-os/chino-os                            | 147     |\n| https://github.com/BriefFiniteElementNet/BriefFiniteElement.Net | 143     |\n| https://github.com/WhiteBlackGoose/UnitsOfMeasure               | 57      |\n| https://github.com/pi-top/pi-top-4-.NET-SDK                     | 48      |\n\n\n### Units.NET on other platforms\n\nGet the same strongly typed units on other platforms, based on the same [unit definitions](/Common/UnitDefinitions).\n\n| Language                   | Name        | Package                                                             | Repository                                           | Maintainers  |\n|----------------------------|-------------|---------------------------------------------------------------------|------------------------------------------------------|--------------|\n| JavaScript /<br>TypeScript | unitsnet-js | [npm](https://www.npmjs.com/package/unitsnet-js)                    | [github](https://github.com/haimkastner/unitsnet-js) | @haimkastner |\n| Python                     | unitsnet-py | [pypi](https://pypi.org/project/unitsnet-py)                        | [github](https://github.com/haimkastner/unitsnet-py) | @haimkastner |\n| Golang                     | unitsnet-go | [pkg.go.dev](https://pkg.go.dev/github.com/haimkastner/unitsnet-go) | [github](https://github.com/haimkastner/unitsnet-go) | @haimkastner |"
        },
        {
          "name": "Samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "UnitsNet.Benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "UnitsNet.NanoFramework",
          "type": "tree",
          "content": null
        },
        {
          "name": "UnitsNet.NumberExtensions.Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "UnitsNet.NumberExtensions",
          "type": "tree",
          "content": null
        },
        {
          "name": "UnitsNet.Serialization.JsonNet.Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "UnitsNet.Serialization.JsonNet",
          "type": "tree",
          "content": null
        },
        {
          "name": "UnitsNet.Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "UnitsNet.sln",
          "type": "blob",
          "size": 8.42578125,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 16\nVisualStudioVersion = 16.0.29609.76\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"UnitsNet\", \"UnitsNet\\UnitsNet.csproj\", \"{CBEAD842-07BC-4B08-9D9D-D6659813776F}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"UnitsNet.Serialization.JsonNet\", \"UnitsNet.Serialization.JsonNet\\UnitsNet.Serialization.JsonNet.csproj\", \"{FB696BFE-B303-4EBD-A0E6-4A7B19DE429B}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"UnitsNet.Serialization.JsonNet.Tests\", \"UnitsNet.Serialization.JsonNet.Tests\\UnitsNet.Serialization.JsonNet.Tests.csproj\", \"{FFEEDF44-F32D-4D92-A75E-487CB0582EB1}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"UnitsNet.Tests\", \"UnitsNet.Tests\\UnitsNet.Tests.csproj\", \"{0E3B7567-5DF2-44BD-88DB-CCF050D3F943}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"UnitsNet.Benchmark\", \"UnitsNet.Benchmark\\UnitsNet.Benchmark.csproj\", \"{76B9C7C8-E3D3-4FA7-B782-78E4BA1D0AD8}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"CodeGen\", \"CodeGen\\CodeGen.csproj\", \"{078E3D44-4F60-46B3-9099-91A7CBF0B213}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"UnitsNet.NumberExtensions\", \"UnitsNet.NumberExtensions\\UnitsNet.NumberExtensions.csproj\", \"{41763DBA-0F2D-40D2-853C-2CBF719C7208}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"UnitsNet.NumberExtensions.Tests\", \"UnitsNet.NumberExtensions.Tests\\UnitsNet.NumberExtensions.Tests.csproj\", \"{B4996AF5-9A8B-481A-9018-EC7F5B1605FF}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"_Files\", \"_Files\", \"{B92B01BE-243E-4CCB-B5E5-AF469ADB1F54}\"\nProjectSection(SolutionItems) = preProject\n\t.editorconfig = .editorconfig\n\t.gitattributes = .gitattributes\n\t.gitignore = .gitignore\n\tbuild.bat = build.bat\n\tbuild-all-targets.bat = build-all-targets.bat\n\tclean.bat = clean.bat\n\tCODE_OF_CONDUCT.md = CODE_OF_CONDUCT.md\n\tCONTRIBUTING.md = CONTRIBUTING.md\n\tDirectory.Build.props = Directory.Build.props\n\tgenerate-code.bat = generate-code.bat\n\tinit.bat = init.bat\n\tLICENSE = LICENSE\n\tnuget.config = nuget.config\n\tpublish-unitsnet.bat = publish-unitsnet.bat\n\tREADME.md = README.md\n\ttest.bat = test.bat\n\tUnitsNet.sln.DotSettings = UnitsNet.sln.DotSettings\n\tUnitsNet.snk = UnitsNet.snk\n\tazure-pipelines.yml = azure-pipelines.yml\nEndProjectSection\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Build\", \"Build\", \"{71C6EF60-7E52-4DF4-BA93-5FAF6D89AEC6}\"\n\tProjectSection(SolutionItems) = preProject\n\t\tBuild\\build.ps1 = Build\\build.ps1\n\t\tBuild\\build-functions.psm1 = Build\\build-functions.psm1\n\t\tBuild\\build-pack-nano-nugets.psm1 = Build\\build-pack-nano-nugets.psm1\n\t\tBuild\\init.ps1 = Build\\init.ps1\n\t\tBuild\\clean.ps1 = Build\\clean.ps1\n\t\tBuild\\bump-version.bat = Build\\bump-version.bat\n\t\tBuild\\bump-version.sh = Build\\bump-version.sh\n\t\tBuild\\bump-version-json.bat = Build\\bump-version-json.bat\n\t\tBuild\\bump-version-json.sh = Build\\bump-version-json.sh\n\t\tBuild\\codecov.sh = Build\\codecov.sh\n\t\tBuild\\set-version.psm1 = Build\\set-version.psm1\n\t\tBuild\\set-version.sh = Build\\set-version.sh\n\t\tBuild\\set-version-json.sh = Build\\set-version-json.sh\n\t\tBuild\\set-version-UnitsNet.ps1 = Build\\set-version-UnitsNet.ps1\n\t\tBuild\\set-version-UnitsNet.Serialization.JsonNet.ps1 = Build\\set-version-UnitsNet.Serialization.JsonNet.ps1\n\tEndProjectSection\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"PerfTest_Startup\", \"PerfTests\\PerfTest_Startup\\PerfTest_Startup.csproj\", \"{BFF3DD22-0F58-4E79-86CD-662D1A174224}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"PerfTest_Startup_v4_144_0\", \"PerfTests\\PerfTest_Startup_v4_144_0\\PerfTest_Startup_v4_144_0.csproj\", \"{2E68C361-F6FA-49DC-BB0E-85ADE776391E}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"PerfTests\", \"PerfTests\", \"{126F0393-A678-4609-9341-7028F1B2BC2B}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"PerfTest_Startup_v4_72_0\", \"PerfTests\\PerfTest_Startup_v4_72_0\\PerfTest_Startup_v4_72_0.csproj\", \"{7131F7CC-BD7F-44EB-AD50-AE80CE38F28E}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{CBEAD842-07BC-4B08-9D9D-D6659813776F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{CBEAD842-07BC-4B08-9D9D-D6659813776F}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{CBEAD842-07BC-4B08-9D9D-D6659813776F}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{CBEAD842-07BC-4B08-9D9D-D6659813776F}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{FB696BFE-B303-4EBD-A0E6-4A7B19DE429B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{FB696BFE-B303-4EBD-A0E6-4A7B19DE429B}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{FB696BFE-B303-4EBD-A0E6-4A7B19DE429B}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{FB696BFE-B303-4EBD-A0E6-4A7B19DE429B}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{FFEEDF44-F32D-4D92-A75E-487CB0582EB1}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{FFEEDF44-F32D-4D92-A75E-487CB0582EB1}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{FFEEDF44-F32D-4D92-A75E-487CB0582EB1}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{FFEEDF44-F32D-4D92-A75E-487CB0582EB1}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{0E3B7567-5DF2-44BD-88DB-CCF050D3F943}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{0E3B7567-5DF2-44BD-88DB-CCF050D3F943}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{0E3B7567-5DF2-44BD-88DB-CCF050D3F943}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{0E3B7567-5DF2-44BD-88DB-CCF050D3F943}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{76B9C7C8-E3D3-4FA7-B782-78E4BA1D0AD8}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{76B9C7C8-E3D3-4FA7-B782-78E4BA1D0AD8}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{76B9C7C8-E3D3-4FA7-B782-78E4BA1D0AD8}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{76B9C7C8-E3D3-4FA7-B782-78E4BA1D0AD8}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{078E3D44-4F60-46B3-9099-91A7CBF0B213}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{078E3D44-4F60-46B3-9099-91A7CBF0B213}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{078E3D44-4F60-46B3-9099-91A7CBF0B213}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{078E3D44-4F60-46B3-9099-91A7CBF0B213}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{41763DBA-0F2D-40D2-853C-2CBF719C7208}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{41763DBA-0F2D-40D2-853C-2CBF719C7208}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{41763DBA-0F2D-40D2-853C-2CBF719C7208}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{41763DBA-0F2D-40D2-853C-2CBF719C7208}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{B4996AF5-9A8B-481A-9018-EC7F5B1605FF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{B4996AF5-9A8B-481A-9018-EC7F5B1605FF}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{B4996AF5-9A8B-481A-9018-EC7F5B1605FF}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{B4996AF5-9A8B-481A-9018-EC7F5B1605FF}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{BFF3DD22-0F58-4E79-86CD-662D1A174224}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{BFF3DD22-0F58-4E79-86CD-662D1A174224}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{BFF3DD22-0F58-4E79-86CD-662D1A174224}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{BFF3DD22-0F58-4E79-86CD-662D1A174224}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{2E68C361-F6FA-49DC-BB0E-85ADE776391E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{2E68C361-F6FA-49DC-BB0E-85ADE776391E}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{2E68C361-F6FA-49DC-BB0E-85ADE776391E}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{2E68C361-F6FA-49DC-BB0E-85ADE776391E}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{7131F7CC-BD7F-44EB-AD50-AE80CE38F28E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{7131F7CC-BD7F-44EB-AD50-AE80CE38F28E}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{7131F7CC-BD7F-44EB-AD50-AE80CE38F28E}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{7131F7CC-BD7F-44EB-AD50-AE80CE38F28E}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {554906B2-5972-4EBF-9DD5-EEFA77D735D8}\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{71C6EF60-7E52-4DF4-BA93-5FAF6D89AEC6} = {B92B01BE-243E-4CCB-B5E5-AF469ADB1F54}\n\t\t{BFF3DD22-0F58-4E79-86CD-662D1A174224} = {126F0393-A678-4609-9341-7028F1B2BC2B}\n\t\t{2E68C361-F6FA-49DC-BB0E-85ADE776391E} = {126F0393-A678-4609-9341-7028F1B2BC2B}\n\t\t{7131F7CC-BD7F-44EB-AD50-AE80CE38F28E} = {126F0393-A678-4609-9341-7028F1B2BC2B}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "UnitsNet.sln.DotSettings",
          "type": "blob",
          "size": 13.765625,
          "content": "﻿<wpf:ResourceDictionary xml:space=\"preserve\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:s=\"clr-namespace:System;assembly=mscorlib\" xmlns:ss=\"urn:shemas-jetbrains-com:settings-storage-xaml\" xmlns:wpf=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">\n\t<s:Boolean x:Key=\"/Default/CodeInspection/CodeAnnotations/NamespacesWithAnnotations/=JetBrains_002EAnnotations/@EntryIndexedValue\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/CodeInspection/Highlighting/InspectionSeverities/=EnforceForeachStatementBraces/@EntryIndexedValue\">SUGGESTION</s:String>\n\t<s:String x:Key=\"/Default/CodeInspection/Highlighting/InspectionSeverities/=EnforceIfStatementBraces/@EntryIndexedValue\">SUGGESTION</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/CodeCleanup/Profiles/=Full/@EntryIndexedValue\">&lt;?xml version=\"1.0\" encoding=\"utf-16\"?&gt;&lt;Profile name=\"Full\"&gt;&lt;CSUseVar&gt;&lt;BehavourStyle&gt;CAN_CHANGE_BOTH&lt;/BehavourStyle&gt;&lt;LocalVariableStyle&gt;IMPLICIT_WHEN_INITIALIZER_HAS_TYPE&lt;/LocalVariableStyle&gt;&lt;ForeachVariableStyle&gt;ALWAYS_EXPLICIT&lt;/ForeachVariableStyle&gt;&lt;/CSUseVar&gt;&lt;CSUpdateFileHeader&gt;True&lt;/CSUpdateFileHeader&gt;&lt;CSOptimizeUsings&gt;&lt;OptimizeUsings&gt;True&lt;/OptimizeUsings&gt;&lt;EmbraceInRegion&gt;False&lt;/EmbraceInRegion&gt;&lt;RegionName&gt;&lt;/RegionName&gt;&lt;/CSOptimizeUsings&gt;&lt;CSShortenReferences&gt;True&lt;/CSShortenReferences&gt;&lt;CSReformatCode&gt;True&lt;/CSReformatCode&gt;&lt;CSharpFormatDocComments&gt;True&lt;/CSharpFormatDocComments&gt;&lt;CSReorderTypeMembers&gt;True&lt;/CSReorderTypeMembers&gt;&lt;CSRemoveCodeRedundancies&gt;True&lt;/CSRemoveCodeRedundancies&gt;&lt;CSArrangeThisQualifier&gt;True&lt;/CSArrangeThisQualifier&gt;&lt;RemoveCodeRedundancies&gt;True&lt;/RemoveCodeRedundancies&gt;&lt;CSUseAutoProperty&gt;True&lt;/CSUseAutoProperty&gt;&lt;CSMakeFieldReadonly&gt;True&lt;/CSMakeFieldReadonly&gt;&lt;XMLReformatCode&gt;True&lt;/XMLReformatCode&gt;&lt;CSCodeStyleAttributes ArrangeTypeAccessModifier=\"True\" ArrangeTypeMemberAccessModifier=\"True\" SortModifiers=\"True\" RemoveRedundantParentheses=\"True\" AddMissingParentheses=\"True\" ArrangeBraces=\"True\" ArrangeAttributes=\"True\" ArrangeArgumentsStyle=\"True\" ArrangeCodeBodyStyle=\"True\" ArrangeVarStyle=\"True\" /&gt;&lt;CSEnforceVarKeywordUsageSettings&gt;True&lt;/CSEnforceVarKeywordUsageSettings&gt;&lt;CSMakeAutoPropertyGetOnly&gt;True&lt;/CSMakeAutoPropertyGetOnly&gt;&lt;CSArrangeQualifiers&gt;True&lt;/CSArrangeQualifiers&gt;&lt;CSFixBuiltinTypeReferences&gt;True&lt;/CSFixBuiltinTypeReferences&gt;&lt;IDEA_SETTINGS&gt;&amp;lt;profile version=\"1.0\"&amp;gt;&#xD;\n  &amp;lt;option name=\"myName\" value=\"Full\" /&amp;gt;&#xD;\n&amp;lt;/profile&amp;gt;&lt;/IDEA_SETTINGS&gt;&lt;/Profile&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/CodeCleanup/SilentCleanupProfile/@EntryValue\">Full</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpCodeStyle/BRACES_FOR_FOREACH/@EntryValue\">RequiredForMultilineStatement</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpCodeStyle/BRACES_FOR_IFELSE/@EntryValue\">RequiredForMultilineStatement</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/PLACE_ACCESSORHOLDER_ATTRIBUTE_ON_SAME_LINE_EX/@EntryValue\">NEVER</s:String>\n\t<s:Int64 x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_LIMIT/@EntryValue\">160</s:Int64>\n\t<s:String x:Key=\"/Default/CodeStyle/CSharpVarKeywordUsage/ForBuiltInTypes/@EntryValue\">UseVarWhenEvident</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/CSharpVarKeywordUsage/ForOtherTypes/@EntryValue\">UseVarWhenEvident</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/CSharpVarKeywordUsage/ForSimpleTypes/@EntryValue\">UseVarWhenEvident</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/FileHeader/FileHeaderText/@EntryValue\">Licensed under MIT No Attribution, see LICENSE file at the root.&#xD;Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=SI/@EntryIndexedValue\">SI</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=WL/@EntryIndexedValue\">WL</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=Constants/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb_AaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=EnumMember/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb_AaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=LocalFunctions/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb_AaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=Other/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb_AaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=PrivateConstants/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb_AaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=PrivateStaticReadonly/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb_AaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=Property/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb_AaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=PublicFields/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb_AaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=StaticReadonly/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb_AaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=TypesAndNamespaces/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb_AaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=15b5b1f1_002D457c_002D4ca6_002Db278_002D5615aedc07d3/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Static\" AccessRightKinds=\"Private\" Description=\"Static readonly fields (private)\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"READONLY_FIELD\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb_AaBb\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=236f7aa5_002D7b06_002D43ca_002Dbf2a_002D9b31bfcff09a/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Any\" AccessRightKinds=\"Private\" Description=\"Constant fields (private)\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"CONSTANT_FIELD\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb_AaBb\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=53eecf85_002Dd821_002D40e8_002Dac97_002Dfdb734542b84/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Instance\" AccessRightKinds=\"Protected, ProtectedInternal, Internal, Public, PrivateProtected\" Description=\"Instance fields (not private)\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"FIELD\" /&gt;&lt;Kind Name=\"READONLY_FIELD\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb_AaBb\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=669e5282_002Dfb4b_002D4e90_002D91e7_002D07d269d04b60/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Any\" AccessRightKinds=\"Protected, ProtectedInternal, Internal, Public, PrivateProtected\" Description=\"Constant fields (not private)\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"CONSTANT_FIELD\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb_AaBb\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=70345118_002D4b40_002D4ece_002D937c_002Dbbeb7a0b2e70/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Static\" AccessRightKinds=\"Protected, ProtectedInternal, Internal, Public, PrivateProtected\" Description=\"Static fields (not private)\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"FIELD\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb_AaBb\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=76f79b1e_002Dece7_002D4df2_002Da322_002D1bd7fea25eb7/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Any\" AccessRightKinds=\"Any\" Description=\"Local functions\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"LOCAL_FUNCTION\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb_AaBb\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=8b8504e3_002Df0be_002D4c14_002D9103_002Dc732f2bddc15/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Any\" AccessRightKinds=\"Any\" Description=\"Enum members\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"ENUM_MEMBER\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb_AaBb\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=a0b4bc4d_002Dd13b_002D4a37_002Db37e_002Dc9c6864e4302/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Any\" AccessRightKinds=\"Any\" Description=\"Types and namespaces\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"NAMESPACE\" /&gt;&lt;Kind Name=\"CLASS\" /&gt;&lt;Kind Name=\"STRUCT\" /&gt;&lt;Kind Name=\"ENUM\" /&gt;&lt;Kind Name=\"DELEGATE\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb_AaBb\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=c85a0503_002D4de2_002D40f1_002D9cd6_002Da4054c05d384/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Any\" AccessRightKinds=\"Any\" Description=\"Properties\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"PROPERTY\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb_AaBb\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=c873eafb_002Dd57f_002D481d_002D8c93_002D77f6863c2f88/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Static\" AccessRightKinds=\"Protected, ProtectedInternal, Internal, Public, PrivateProtected\" Description=\"Static readonly fields (not private)\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"READONLY_FIELD\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb_AaBb\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EFeature_002EServices_002ECodeCleanup_002EFileHeader_002EFileHeaderSettingsMigrate/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpAttributeForSingleLineMethodUpgrade/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpKeepExistingMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpPlaceEmbeddedOnSameLineMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpRenamePlacementToArrangementMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpUseContinuousIndentInsideBracesMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002EAddAccessorOwnerDeclarationBracesMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002ECSharpPlaceAttributeOnSameLineMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002EMigrateBlankLinesAroundFieldToBlankLinesAroundProperty/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002EMigrateThisQualifierSettings/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002EPredefinedNamingRulesToUserRulesUpgrade/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Formattable/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Gullberg/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=inheritdoc/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=netnanoframework/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=nfproj/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=paramref/@EntryIndexedValue\">True</s:Boolean></wpf:ResourceDictionary>\n"
        },
        {
          "name": "UnitsNet.snk",
          "type": "blob",
          "size": 0.58203125,
          "content": null
        },
        {
          "name": "UnitsNet",
          "type": "tree",
          "content": null
        },
        {
          "name": "azure-pipelines-pr.yml",
          "type": "blob",
          "size": 2.53125,
          "content": "name: PR_$(Date:yyyy.MM.dd)$(Rev:.rrr)\n\n# PR pipeline\n# - Build all targets (netstandard2.0, .NET nanoFramework)\n# - Run tests and upload test coverage to codecov.io\n\ntrigger: none\npr:\n  branches:\n    include:\n    - master\n    - release/*\n  paths:\n    exclude:\n    - '*.md'\n    - '*.png'\n    - '*.gitignore'\n\npool:\n  vmImage: windows-latest\n\nvariables:\n- group: common\n\nstages:\n- stage: Build\n  displayName: Build & test\n  jobs:\n  - job: Build\n    displayName: Build & test\n    steps:\n    - checkout: self\n      fetchDepth: 1\n      clean: false\n      lfs: true\n      submodules: false\n      fetchTags: false\n\n    - task: PowerShell@2\n      displayName: 'Build, test, pack'\n      inputs:\n        filePath: 'Build/build.ps1'\n        arguments: '-IncludeNanoFramework'\n        failOnStderr: true\n        showWarnings: true\n        pwsh: true\n        workingDirectory: '$(Build.SourcesDirectory)'\n\n    - task: PublishTestResults@2\n      condition: always()\n      inputs:\n        testResultsFormat: \"VSTest\"\n        testResultsFiles: \"*.trx\"\n        searchFolder: $(Build.SourcesDirectory)\\Artifacts\\TestResults\n        mergeTestResults: true\n\n    - task: PowerShell@2\n      displayName: Upload to codecov.io\n      env:\n        CODECOV_TOKEN: $(CODECOV_TOKEN)\n      inputs:\n        targetType: 'inline'\n        script: |\n          Write-Host -Foreground Green \"Downloading codecov binaries...\"\n\n          Invoke-WebRequest -Uri https://uploader.codecov.io/verification.gpg -OutFile codecov.asc\n          gpg.exe --import codecov.asc\n\n          Invoke-WebRequest -Uri https://uploader.codecov.io/latest/windows/codecov.exe -Outfile codecov.exe\n          Invoke-WebRequest -Uri https://uploader.codecov.io/latest/windows/codecov.exe.SHA256SUM -Outfile codecov.exe.SHA256SUM\n          Invoke-WebRequest -Uri https://uploader.codecov.io/latest/windows/codecov.exe.SHA256SUM.sig -Outfile codecov.exe.SHA256SUM.sig\n\n          gpg.exe --verify codecov.exe.SHA256SUM.sig codecov.exe.SHA256SUM\n          If ($(Compare-Object -ReferenceObject  $(($(certUtil -hashfile codecov.exe SHA256)[1], \"codecov.exe\") -join \"  \") -DifferenceObject $(Get-Content codecov.exe.SHA256SUM)).length -eq 0) { echo \"SHASUM verified\" } Else {exit 1}\n\n          Write-Host -Foreground Green \"Uploading to codecov...\"\n\n          .\\codecov.exe --dir \"Artifacts/Coverage\" -t \"$env:CODECOV_TOKEN\" --build \"$(Build.BuildNumber)\"\n\n          Write-Host -Foreground Green \"✅ Uploaded to codecov.\"\n        pwsh: true\n\n    - publish: $(Build.SourcesDirectory)/Artifacts\n      displayName: 'Publish Artifacts'\n      artifact: 'Artifacts'"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 4.072265625,
          "content": "# Starter pipeline\n# Start with a minimal pipeline that you can customize to build and deploy your code.\n# Add steps that build, run tests, deploy, and more:\n# https://aka.ms/yaml\n\npr: none\ntrigger:\n  branches:\n    include:\n      - master\n      - release/*\n  paths:\n    exclude:\n      - '**/*.png'\n      - '**/*.md'\n\npool:\n  vmImage: windows-latest\n\nvariables:\n- group: common\n\nstages:\n- stage: Build\n  displayName: Build & test\n  jobs:\n  - job: Build\n    displayName: Build & test\n    steps:\n    - checkout: self\n      fetchDepth: 1\n      clean: false\n      lfs: true\n      submodules: false\n      fetchTags: false\n\n    - task: InstallNanoMSBuildComponents@1\n      displayName: Install .NET nanoFramework MSBuild components\n\n    - task: PowerShell@2\n      displayName: 'Build, test, pack'\n      inputs:\n        filePath: 'Build/build.ps1'\n        arguments: '-IncludeNanoFramework'\n        failOnStderr: true\n        showWarnings: true\n        pwsh: true\n        workingDirectory: '$(Build.SourcesDirectory)'\n\n    - task: PowerShell@2\n      displayName: Upload to codecov.io\n      env:\n        CODECOV_TOKEN: $(CODECOV_TOKEN)\n      inputs:\n        targetType: 'inline'\n        script: |\n          Write-Host -Foreground Green \"Downloading codecov binaries...\"\n\n          Invoke-WebRequest -Uri https://uploader.codecov.io/verification.gpg -OutFile codecov.asc\n          gpg.exe --import codecov.asc\n\n          Invoke-WebRequest -Uri https://uploader.codecov.io/latest/windows/codecov.exe -Outfile codecov.exe\n          Invoke-WebRequest -Uri https://uploader.codecov.io/latest/windows/codecov.exe.SHA256SUM -Outfile codecov.exe.SHA256SUM\n          Invoke-WebRequest -Uri https://uploader.codecov.io/latest/windows/codecov.exe.SHA256SUM.sig -Outfile codecov.exe.SHA256SUM.sig\n\n          gpg.exe --verify codecov.exe.SHA256SUM.sig codecov.exe.SHA256SUM\n          If ($(Compare-Object -ReferenceObject  $(($(certUtil -hashfile codecov.exe SHA256)[1], \"codecov.exe\") -join \"  \") -DifferenceObject $(Get-Content codecov.exe.SHA256SUM)).length -eq 0) { echo \"SHASUM verified\" } Else {exit 1}\n\n          Write-Host -Foreground Green \"Uploading to codecov...\"\n\n          .\\codecov.exe --dir \"Artifacts/Coverage\" -t \"$env:CODECOV_TOKEN\" --build \"$(Build.BuildNumber)\"\n\n          Write-Host -Foreground Green \"✅ Uploaded to codecov.\"\n        pwsh: true\n\n    - publish: $(Build.SourcesDirectory)/Artifacts\n      displayName: 'Publish Artifacts'\n      artifact: 'Artifacts'\n\n    - task: CopyFiles@2\n      displayName: Copy nugets to staging\n      inputs:\n        SourceFolder: '$(Build.SourcesDirectory)/Artifacts'\n        Contents: |\n          **/*.nupkg\n          **/*.snupkg\n        TargetFolder: '$(Build.ArtifactStagingDirectory)'\n        flattenFolders: true\n        preserveTimestamp: true\n        retryCount: '3'\n        ignoreMakeDirErrors: true\n\n    - task: PublishPipelineArtifact@1\n      displayName: Upload nugets to pipeline\n      inputs:\n        targetPath: '$(Build.ArtifactStagingDirectory)'\n        artifact: 'nugets'\n        publishLocation: 'pipeline'\n\n- stage: Publish\n  dependsOn: Build\n  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')\n  jobs:\n  - job: Publish\n    displayName: Publish nugets\n    steps:\n    - task: DownloadPipelineArtifact@2\n      displayName: Download nugets from pipeline\n      inputs:\n        buildType: 'current'\n        artifactName: 'nugets'\n        targetPath: '$(Build.ArtifactStagingDirectory)'\n\n    - task: Bash@3\n      displayName: 'Push to nuget.org'\n      env:\n        NUGET_ORG_APIKEY: '$(NUGET_ORG_APIKEY)'\n      inputs:\n        targetType: 'inline'\n        script: 'dotnet nuget push \"*.nupkg\" --skip-duplicate --api-key $NUGET_ORG_APIKEY --source https://api.nuget.org/v3/index.json'\n        workingDirectory: '$(Build.ArtifactStagingDirectory)'\n\n    - task: NuGetCommand@2\n      displayName: Push to internal NuGet feed\n      inputs:\n        command: 'push'\n        packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'\n        nuGetFeedType: 'internal'\n        publishVstsFeed: 'fee4c64f-3e49-4618-9ea4-5a3167257c37/989275f4-a952-4abd-ae82-2e7a0cb97b9b'\n        allowPackageConflicts: true\n"
        },
        {
          "name": "build-all-targets.bat",
          "type": "blob",
          "size": 0.10546875,
          "content": "@echo off\npowershell -ExecutionPolicy Bypass -NoProfile -File \"%~dp0\\Build\\build.ps1\" -IncludeNanoFramework\n"
        },
        {
          "name": "build.bat",
          "type": "blob",
          "size": 0.083984375,
          "content": "@echo off\npowershell -ExecutionPolicy Bypass -NoProfile -File \"%~dp0\\Build\\build.ps1\"\n"
        },
        {
          "name": "clean.bat",
          "type": "blob",
          "size": 0.111328125,
          "content": "@echo off\nSET root=%~dp0\npowershell -NoProfile \"%root%/Build/Clean.ps1\"\nif %errorlevel% neq 0 exit /b %errorlevel%"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.1728515625,
          "content": "# https://docs.codecov.com/docs/codecov-yaml#default-yaml\ncoverage:\n  precision: 0      # Default: 2\n  round: down       # Default: down\n  range: \"80...100\" # Default: 70...100\n"
        },
        {
          "name": "generate-code.bat",
          "type": "blob",
          "size": 0.0771484375,
          "content": "@echo off\nSET scriptdir=%~dp0\ndotnet run --project \"%scriptdir%/CodeGen\"\npause\n"
        },
        {
          "name": "generate-code.sh",
          "type": "blob",
          "size": 0.1142578125,
          "content": "#!/usr/bin/env bash\n\ndeclare -r SCRIPT_DIR=$(realpath \"$(dirname \"$0\")\")\n\ndotnet run --project \"$SCRIPT_DIR/CodeGen\"\n"
        },
        {
          "name": "init.bat",
          "type": "blob",
          "size": 0.080078125,
          "content": "@echo off\npowershell -ExecutionPolicy Bypass -NoProfile -File %~dp0/Build/init.ps1"
        },
        {
          "name": "nuget.config",
          "type": "blob",
          "size": 0.1845703125,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n\t<config>\n\t\t<add key=\"DefaultPushSource\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\"/>\n\t</config>\n</configuration>"
        },
        {
          "name": "publish-unitsnet.bat",
          "type": "blob",
          "size": 0.3369140625,
          "content": "@echo off\ncall git checkout master\nif %errorlevel% neq 0 goto EXIT\n\ncall git pull --rebase --prune\nif %errorlevel% neq 0 goto EXIT\n\ncall build\\bump-version-UnitsNet-minor.bat\nif %errorlevel% neq 0 goto EXIT\n\ncall git push --follow-tags --set-upstream\nif %errorlevel% neq 0 goto EXIT\n\necho.\necho New version of UnitsNet pushed!\n\n:EXIT\necho.\npause"
        },
        {
          "name": "test.bat",
          "type": "blob",
          "size": 0.158203125,
          "content": "@echo off\nSET root=%~dp0\n\npowershell -NoProfile -Command \"Import-Module %root%/Build/build-functions.psm1; Start-Tests\"\nif %errorlevel% neq 0 exit /b %errorlevel%"
        },
        {
          "name": "upgrade-nanoframework.sh",
          "type": "blob",
          "size": 0.20703125,
          "content": "#!/usr/bin/env bash\n# Convenience script to update nanoFramework dependencies.\ndeclare -r SCRIPT_DIR=$(realpath \"$(dirname \"$0\")\")\n\ndotnet run --project \"$SCRIPT_DIR/CodeGen\" --update-nano-framework-dependencies\n"
        }
      ]
    }
  ]
}