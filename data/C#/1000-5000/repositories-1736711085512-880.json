{
  "metadata": {
    "timestamp": 1736711085512,
    "page": 880,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mattatz/unity-voxel",
      "stars": 1423,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2265625,
          "content": "[Ll]ibrary/\n[Tt]emp/\n[Oo]bj/\n[Bb]uild/\nLogs/\nPapers/\n.vs/\n\n# Autogenerated VS/MD solution and project files\n*.csproj\n*.unityproj\n*.sln\n*.suo\n*.user\n*.userprefs\n*.pidb\n*.booproj\n\n# Unity3D Generated File On Crash Reports\nsysinfo.txt\n"
        },
        {
          "name": "Assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "Captures",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0390625,
          "content": "MIT License\n\nCopyright (c) 2018 mattatz\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "ProjectSettings",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.8359375,
          "content": "unity-voxel\n=====================\n\nVoxelize mesh algorithm in Unity. (includes GPU and CPU voxelizers.)\n\n![Demo](https://raw.githubusercontent.com/mattatz/unity-voxel/master/Captures/Demo.gif)\n\n## GPUVoxelParticleSystem\n\n![GPUVoxelParticleSystem](https://raw.githubusercontent.com/mattatz/unity-voxel/master/Captures/GPUVoxelParticleSystem.gif)\n\nthe Demo for GPU Particle with geometry shader. (only tested on windows10 (GTX 1060))\n\nInspired by Keijiro Takahashi works⚡️ [StandardGeometryShader](https://github.com/keijiro/StandardGeometryShader) & [KvantSpray]( https://github.com/keijiro/KvantSpray)\n\n## GPUVoxelMosaic\n\n![GPUVoxelMosaicLevels](https://raw.githubusercontent.com/mattatz/unity-voxel/master/Captures/GPUVoxelMosaicLevels.gif)\n\n![GPUVoxelMosaic](https://raw.githubusercontent.com/mattatz/unity-voxel/master/Captures/GPUVoxelMosaic.gif)\n\nthe Demo to update the resolution of voxels in realtime. (only tested on windows10 (GTX 1060))\n\n## GPUVoxelSkinnedMesh\n\n![GPUVoxelSkinnedMesh](https://raw.githubusercontent.com/mattatz/unity-voxel/master/Captures/GPUVoxelSkinnedMesh.gif)\n\nSample a mesh from SkinnedRenderer in every frame and voxelize it in realtime.\n\nthe human model and animation from [asset store](https://assetstore.unity.com/packages/3d/animations/raw-mocap-data-for-mecanim-5330).\n\n## Usage\n\nwith GPU Voxelizer (recommended)\n```cs\nGPUVoxelData data = GPUVoxelizer.Voxelize(\n    voxelizer,  // ComputeShader (Voxelizer.compute)\n    mesh,       // a target mesh\n    64,         // # of voxels for largest AABB bounds\n    true        // flag to fill in volume or not; if set flag to false, sample a surface only\n);\n\n// build voxel cubes integrated mesh\nGetComponent<MeshFilter>().sharedMesh = VoxelMesh.Build(data.GetData(), data.UnitLength, useUV);\n\n// build 3D texture represent a volume by voxels.\nRenderTexture volumeTexture = GPUVoxelizer.BuildTexture3D(\n  voxelizer,\n  data,\n  texture,    // Texture2D to color voxels based on uv coordinates in voxels\n  RenderTextureFormat.ARGBFloat,\n  FilterMode.Bilinear\n);\n\n// need to release a voxel buffer\ndata.Dispose();\n```\n\nwith CPU Voxelizer\n```cs\n// Voxelize target mesh with CPU Voxelizer\n\nList<Voxel> voxels = CPUVoxelizer.Voxelize(\n    mesh,   // a target mesh\n    20      // # of voxels for largest AABB bounds\n);\n```\n\n## Compatibility\n\nTested on Unity 2018.3.0f2, windows10 (GTX 1060), macOS (metal, not compatible with GPU Particle Demo).\n\n## Sources\n\n- Triangle mesh voxelization / Wolfire Games Blog - http://blog.wolfire.com/2009/11/Triangle-mesh-voxelization\n\n- Möller–Trumbore intersection algorithm - https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm\n\n- keijiro/StandardGeometryShader - https://github.com/keijiro/StandardGeometryShader\n\n- keijiro/KvantSpray - https://github.com/keijiro/KvantSpray\n\n- Post Processing Stack - https://www.assetstore.unity3d.com/jp/#!/content/83912\n"
        },
        {
          "name": "Voxel.unitypackage",
          "type": "blob",
          "size": 9.4970703125,
          "content": null
        }
      ]
    }
  ]
}