{
  "metadata": {
    "timestamp": 1736711070700,
    "page": 848,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sebastienros/fluid",
      "stars": 1470,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 6.2099609375,
          "content": "[*]\nindent_style = space\nindent_size = 2\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.cs]\nindent_size = 4\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.cs]\n\n# IDE0022: Use block body for method\ncsharp_style_expression_bodied_methods = when_on_single_line:silent\n\n# IDE0022: Use expression body for method\ndotnet_diagnostic.IDE0022.severity = silent\n\n# IDE0008: Use explicit type\ncsharp_style_var_for_built_in_types = true\n\n# IDE0008: Use explicit type\ncsharp_style_var_elsewhere = true\n\n# IDE0008: Use explicit type\ncsharp_style_var_when_type_is_apparent = true\n\n# IDE0290: Use primary constructor\ncsharp_style_prefer_primary_constructors = false:suggestion\n\n# IDE0046: Convert to conditional expression\ndotnet_diagnostic.IDE0046.severity = silent\n\n# IDE0305: Simplify collection initialization\ndotnet_diagnostic.IDE0305.severity = suggestion\n\n# IDE0028: Simplify collection initialization\ndotnet_diagnostic.IDE0028.severity = suggestion\n\n# IDE0090: Use 'new(...)'\ndotnet_diagnostic.IDE0090.severity = suggestion\n\n# IDE0045: Convert to conditional expression\ndotnet_diagnostic.IDE0045.severity = suggestion\n\n[*.cs]\n#### Naming styles ####\n\n# Naming rules\n\ndotnet_naming_rule.private_or_internal_field_should_be_beings_with__.severity = suggestion\ndotnet_naming_rule.private_or_internal_field_should_be_beings_with__.symbols = private_or_internal_field\ndotnet_naming_rule.private_or_internal_field_should_be_beings_with__.style = beings_with__\n\n# Symbol specifications\n\ndotnet_naming_symbols.private_or_internal_field.applicable_kinds = field\ndotnet_naming_symbols.private_or_internal_field.applicable_accessibilities = internal, private, private_protected\ndotnet_naming_symbols.private_or_internal_field.required_modifiers = \n\n# Naming styles\n\ndotnet_naming_style.beings_with__.required_prefix = _\ndotnet_naming_style.beings_with__.required_suffix = \ndotnet_naming_style.beings_with__.word_separator = \ndotnet_naming_style.beings_with__.capitalization = camel_case\ncsharp_indent_labels = one_less_than_current\ncsharp_using_directive_placement = outside_namespace:silent\ncsharp_prefer_simple_using_statement = true:suggestion\ncsharp_prefer_braces = true:silent\ncsharp_style_namespace_declarations = file_scoped:none\ncsharp_style_prefer_method_group_conversion = true:silent\ncsharp_style_prefer_top_level_statements = true:silent\ncsharp_style_expression_bodied_constructors = false:silent\ncsharp_style_expression_bodied_operators = false:silent\ncsharp_style_expression_bodied_properties = true:silent\ncsharp_style_expression_bodied_indexers = true:silent\ncsharp_style_expression_bodied_accessors = true:silent\ncsharp_style_expression_bodied_lambdas = true:silent\ncsharp_style_expression_bodied_local_functions = false:silent\n\n# IDE0057: Use range operator\ncsharp_style_prefer_range_operator = false\n\n# IDE1006: Naming Styles\ndotnet_diagnostic.IDE1006.severity = silent\ncsharp_prefer_system_threading_lock = true:suggestion\n\n# IDE0078: Use pattern matching\ndotnet_diagnostic.IDE0078.severity = silent\n\n[*.{cs,vb}]\n#### Naming styles ####\n\n# Naming rules\n\ndotnet_naming_rule.interface_should_be_begins_with_i.severity = suggestion\ndotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface\ndotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i\n\ndotnet_naming_rule.types_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.types_should_be_pascal_case.symbols = types\ndotnet_naming_rule.types_should_be_pascal_case.style = pascal_case\n\ndotnet_naming_rule.non_field_members_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members\ndotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case\n\n# Symbol specifications\n\ndotnet_naming_symbols.interface.applicable_kinds = interface\ndotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected\ndotnet_naming_symbols.interface.required_modifiers = \n\ndotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum\ndotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected\ndotnet_naming_symbols.types.required_modifiers = \n\ndotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method\ndotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected\ndotnet_naming_symbols.non_field_members.required_modifiers = \n\n# Naming styles\n\ndotnet_naming_style.begins_with_i.required_prefix = I\ndotnet_naming_style.begins_with_i.required_suffix = \ndotnet_naming_style.begins_with_i.word_separator = \ndotnet_naming_style.begins_with_i.capitalization = pascal_case\n\ndotnet_naming_style.pascal_case.required_prefix = \ndotnet_naming_style.pascal_case.required_suffix = \ndotnet_naming_style.pascal_case.word_separator = \ndotnet_naming_style.pascal_case.capitalization = pascal_case\n\ndotnet_naming_style.pascal_case.required_prefix = \ndotnet_naming_style.pascal_case.required_suffix = \ndotnet_naming_style.pascal_case.word_separator = \ndotnet_naming_style.pascal_case.capitalization = pascal_case\ndotnet_style_operator_placement_when_wrapping = beginning_of_line\ntab_width = 4\nindent_size = 4\nend_of_line = crlf\ndotnet_style_coalesce_expression = true:suggestion\ndotnet_style_null_propagation = true:suggestion\ndotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion\ndotnet_style_prefer_auto_properties = true:silent\ndotnet_style_object_initializer = true:suggestion\ndotnet_style_collection_initializer = true:suggestion\ndotnet_style_prefer_simplified_boolean_expressions = true:suggestion\ndotnet_style_prefer_conditional_expression_over_assignment = true:silent\ndotnet_style_prefer_conditional_expression_over_return = true:silent\ndotnet_style_explicit_tuple_names = true:suggestion\ndotnet_style_prefer_inferred_tuple_names = true:suggestion\ndotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion\ndotnet_style_prefer_compound_assignment = true:suggestion\ndotnet_style_prefer_simplified_interpolation = true:suggestion\ndotnet_style_prefer_collection_expression = when_types_loosely_match:suggestion\ndotnet_style_namespace_match_folder = true:suggestion\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.759765625,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n**/Properties/launchSettings.json\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Typescript v1 declaration files\ntypings/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n*.orig\nresults\n\nBenchmarkDotNet.Artifacts\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": ".whitesource",
          "type": "blob",
          "size": 0.2685546875,
          "content": "{\n  \"scanSettings\": {\n    \"baseBranches\": []\n  },\n  \"checkRunSettings\": {\n    \"vulnerableCheckRunConclusionLevel\": \"failure\",\n    \"displayMode\": \"diff\",\n    \"useMendCheckNames\": true\n  },\n  \"issueSettings\": {\n    \"minSeverityLevel\": \"LOW\",\n    \"issueType\": \"DEPENDENCY\"\n  }\n}"
        },
        {
          "name": "Assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "CREDITS.md",
          "type": "blob",
          "size": 0.201171875,
          "content": "# CREDITS\n\n### Pug View Engine\nProject Site: https://github.com/entith/PugViewEngine\nLicense: MIT - https://raw.githubusercontent.com/entith/PugViewEngine/master/LICENSE\nCopyright: https://github.com/entith"
        },
        {
          "name": "Common.props",
          "type": "blob",
          "size": 1.4267578125,
          "content": "﻿<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n\n  <PropertyGroup>\n    <Copyright>Sebastien Ros</Copyright>\n    <Authors>Sebastien Ros</Authors>\n\n    <PackageProjectUrl>https://github.com/sebastienros/fluid</PackageProjectUrl>\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\n\n    <PublishRepositoryUrl>true</PublishRepositoryUrl>\n    <EmbedUntrackedSources>true</EmbedUntrackedSources>\n    <DebugSymbols>true</DebugSymbols>\n    <IncludeSymbols>true</IncludeSymbols>\n    <Deterministic>true</Deterministic>\n    <SymbolPackageFormat>snupkg</SymbolPackageFormat>\n    <IsPackable>true</IsPackable>\n    <GenerateDocumentationFile>true</GenerateDocumentationFile>\n    <LangVersion>latest</LangVersion>\n    <NoWarn>$(NoWarn);1591</NoWarn>\n    \n    <!-- Sourcelink -->\n    <PublishRepositoryUrl>true</PublishRepositoryUrl>\n    <EmbedUntrackedSources>true</EmbedUntrackedSources>\n    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>\n\n    <BuildNumber Condition=\"'$(BuildNumber)' == ''\">0</BuildNumber>\n    <VersionPrefix>2.0.0</VersionPrefix>\n    <VersionSuffix>beta-$(BuildNumber)</VersionSuffix>\n\n    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>\n    <SignAssembly>true</SignAssembly>\n    <AssemblyOriginatorKeyFile>$(MSBuildThisFileDirectory)Fluid.snk</AssemblyOriginatorKeyFile>\n  </PropertyGroup>\n\n</Project>\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 0.0927734375,
          "content": "<Project>\n  <Import Project=\"Versions.props\" />\n  <Import Project=\"Common.props\" />\n</Project>\n"
        },
        {
          "name": "Directory.Packages.props",
          "type": "blob",
          "size": 1.740234375,
          "content": "<Project>\n  <PropertyGroup>\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\n  </PropertyGroup>\n  <ItemGroup>\n    <!-- Global Package References -->\n    <GlobalPackageReference Include=\"Microsoft.SourceLink.GitHub\" Version=\"8.0.0\" PrivateAssets=\"all\" />\n    <GlobalPackageReference Include=\"PolySharp\" Version=\"1.15.0\" PrivateAssets=\"all\" />\n\n    <!-- TFM specific reference since they could lift some framework dependencies -->\n    <PackageVersion Include=\"Microsoft.Extensions.FileProviders.Abstractions\" Version=\"$(MicrosoftExtensionsFileProvidersAbstractionsPackageVersion)\" />\n    \n    <!-- Only used with netstandard2.0 -->\n    <PackageVersion Include=\"System.Text.Json\" Version=\"$(SystemTextJsonPackageVersion)\" />\n    <PackageVersion Include=\"Microsoft.CSharp\" Version=\"4.7.0\" />\n    <PackageVersion Include=\"System.Reflection.Emit.Lightweight\" Version=\"4.7.0\" />\n    \n    <!-- Common to all TFMs -->\n    <PackageVersion Include=\"Parlot\" Version=\"1.3.1\" />\n    <PackageVersion Include=\"TimeZoneConverter\" Version=\"6.1.0\" />\n    \n    <!-- Benchmarks -->\n    <PackageVersion Include=\"BenchmarkDotNet\" Version=\"0.14.0\" />\n    <PackageVersion Include=\"DotLiquid\" Version=\"2.3.0\" />\n    <PackageVersion Include=\"Liquid.NET\" Version=\"0.10.0\" />\n    <PackageVersion Include=\"Scriban\" Version=\"5.12.1\" />\n    <PackageVersion Include=\"Handlebars.Net\" Version=\"2.1.6\" />\n    \n    <!-- Testing -->\n    <PackageVersion Include=\"Newtonsoft.Json\" Version=\"13.0.3\" />\n    <PackageVersion Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.12.0\" />\n    <PackageVersion Include=\"xunit\" Version=\"2.9.2\" />\n    <PackageVersion Include=\"xunit.runner.visualstudio\" Version=\"3.0.0\" />\n    <PackageVersion Include=\"xunit.analyzers\" Version=\"1.18.0\" />\n  </ItemGroup>\n</Project>\n"
        },
        {
          "name": "Fluid.Benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "Fluid.MinimalApisSample",
          "type": "tree",
          "content": null
        },
        {
          "name": "Fluid.MvcSample",
          "type": "tree",
          "content": null
        },
        {
          "name": "Fluid.MvcViewEngine",
          "type": "tree",
          "content": null
        },
        {
          "name": "Fluid.Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "Fluid.ViewEngine",
          "type": "tree",
          "content": null
        },
        {
          "name": "Fluid.sln",
          "type": "blob",
          "size": 5.255859375,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.1.31903.286\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Fluid\", \"Fluid\\Fluid.csproj\", \"{8CD687F1-AC65-4E4A-A510-67768999C81C}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Fluid.Tests\", \"Fluid.Tests\\Fluid.Tests.csproj\", \"{7D7A6C02-6864-47CB-863E-13F9F0042A28}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Fluid.Benchmarks\", \"Fluid.Benchmarks\\Fluid.Benchmarks.csproj\", \"{709AF319-CBB1-42F0-A9CD-90441F2BD0DD}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Fluid.MvcSample\", \"Fluid.MvcSample\\Fluid.MvcSample.csproj\", \"{5CBA5602-0579-41E8-BE69-F2FFFD95DE70}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Fluid.MvcViewEngine\", \"Fluid.MvcViewEngine\\Fluid.MvcViewEngine.csproj\", \"{8387DE36-8B53-4437-B16F-40C6FD525A1D}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Files\", \"Files\", \"{BE5EF08E-5F79-4BBA-BA72-F4E26E281125}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.editorconfig = .editorconfig\n\t\t.github\\workflows\\build.yml = .github\\workflows\\build.yml\n\t\tCommon.props = Common.props\n\t\tCREDITS.md = CREDITS.md\n\t\tDirectory.Build.props = Directory.Build.props\n\t\tDirectory.Packages.props = Directory.Packages.props\n\t\tNuGet.config = NuGet.config\n\t\t.github\\workflows\\pr.yml = .github\\workflows\\pr.yml\n\t\t.github\\workflows\\publish.yml = .github\\workflows\\publish.yml\n\t\tREADME.md = README.md\n\t\tVersions.props = Versions.props\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Fluid.ViewEngine\", \"Fluid.ViewEngine\\Fluid.ViewEngine.csproj\", \"{3510D4C5-8328-4425-B2F1-B8591E85B965}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"MinimalApis.LiquidViews\", \"MinimalApis.LiquidViews\\MinimalApis.LiquidViews.csproj\", \"{DD0B5036-D5E6-4E6E-8405-27F6C2FD5917}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Fluid.MinimalApisSample\", \"Fluid.MinimalApisSample\\Fluid.MinimalApisSample.csproj\", \"{6390F2D4-564B-455E-9C02-3DB998E5BD09}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{D1E1DE19-67EF-43C8-BC9A-53E60D65ECFE}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{8CD687F1-AC65-4E4A-A510-67768999C81C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{8CD687F1-AC65-4E4A-A510-67768999C81C}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{8CD687F1-AC65-4E4A-A510-67768999C81C}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{8CD687F1-AC65-4E4A-A510-67768999C81C}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{7D7A6C02-6864-47CB-863E-13F9F0042A28}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{7D7A6C02-6864-47CB-863E-13F9F0042A28}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{7D7A6C02-6864-47CB-863E-13F9F0042A28}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{7D7A6C02-6864-47CB-863E-13F9F0042A28}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{709AF319-CBB1-42F0-A9CD-90441F2BD0DD}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{709AF319-CBB1-42F0-A9CD-90441F2BD0DD}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{709AF319-CBB1-42F0-A9CD-90441F2BD0DD}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{709AF319-CBB1-42F0-A9CD-90441F2BD0DD}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{5CBA5602-0579-41E8-BE69-F2FFFD95DE70}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{5CBA5602-0579-41E8-BE69-F2FFFD95DE70}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{5CBA5602-0579-41E8-BE69-F2FFFD95DE70}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{5CBA5602-0579-41E8-BE69-F2FFFD95DE70}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{8387DE36-8B53-4437-B16F-40C6FD525A1D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{8387DE36-8B53-4437-B16F-40C6FD525A1D}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{8387DE36-8B53-4437-B16F-40C6FD525A1D}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{8387DE36-8B53-4437-B16F-40C6FD525A1D}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{3510D4C5-8328-4425-B2F1-B8591E85B965}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{3510D4C5-8328-4425-B2F1-B8591E85B965}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{3510D4C5-8328-4425-B2F1-B8591E85B965}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{3510D4C5-8328-4425-B2F1-B8591E85B965}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{DD0B5036-D5E6-4E6E-8405-27F6C2FD5917}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{DD0B5036-D5E6-4E6E-8405-27F6C2FD5917}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{DD0B5036-D5E6-4E6E-8405-27F6C2FD5917}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{DD0B5036-D5E6-4E6E-8405-27F6C2FD5917}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{6390F2D4-564B-455E-9C02-3DB998E5BD09}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{6390F2D4-564B-455E-9C02-3DB998E5BD09}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{6390F2D4-564B-455E-9C02-3DB998E5BD09}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{6390F2D4-564B-455E-9C02-3DB998E5BD09}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {D2E67D40-987E-4A7A-96AB-D1018E0FCBC7}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "Fluid.snk",
          "type": "blob",
          "size": 0.58203125,
          "content": null
        },
        {
          "name": "Fluid",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2017 Sébastien Ros\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MinimalApis.LiquidViews",
          "type": "tree",
          "content": null
        },
        {
          "name": "NuGet.config",
          "type": "blob",
          "size": 0.2275390625,
          "content": "﻿<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <!-- only use the feeds below -->\n    <clear/>\n    <add key=\"NuGet\" value=\"https://api.nuget.org/v3/index.json\" />\n  </packageSources>\n</configuration>\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 37.220703125,
          "content": "<p align=\"center\"><img width=25% src=\"https://github.com/sebastienros/fluid/raw/main/Assets/logo-vertical.png\"></p>\n\n[![NuGet](https://img.shields.io/nuget/v/Fluid.Core.svg)](https://nuget.org/packages/Fluid.Core)\n[![MIT](https://img.shields.io/github/license/sebastienros/fluid)](https://github.com/sebastienros/fluid/blob/main/LICENSE)\n[![MyGet](https://img.shields.io/myget/fluid/vpre/fluid.core.svg?label=MyGet)](https://www.myget.org/feed/fluid/package/nuget/fluid.core)\n\n## Basic Overview\n\nFluid is an open-source .NET template engine based on the [Liquid template language](https://shopify.github.io/liquid/). It's a **secure** template language that is also **very accessible** for non-programmer audiences.\n\n> The following content is based on the 2.0.0-beta version, which is the recommended version even though some of its API might vary significantly.\nTo see the corresponding content for v1.0 use [this version](https://github.com/sebastienros/fluid/blob/release/1.x/README.md)\n\n<br>\n\n## Tutorials\n\n[Deane Barker](https://deanebarker.net) wrote a [very comprehensive tutorial](https://deanebarker.net/tech/fluid/) on how to write Liquid templates with Fluid.\nFor a high-level overview, read [The Four Levels of Fluid Development](https://deanebarker.net/tech/fluid/intro/) describing different stages of usages of Fluid.\n\n<br>\n\n## Features\n\n- Very fast Liquid parser and renderer (no-regexp), with few allocations. See [benchmarks](#performance).\n- Secure templates by allow-listing all the available properties in the template. User templates can't break your application.\n- Supports **async** filters. Templates can execute database queries more efficiently under load.\n- Customize filters and tag with your own. Even with complex grammar constructs. See [Customizing tags and blocks](#customizing-tags-and-blocks)\n- Parses templates in a concrete syntax tree that lets you cache, analyze and alter the templates before they are rendered.\n- Register any .NET types and properties, or define **custom handlers** to intercept when a named variable is accessed.\n\n<br>\n\n## Contents\n- [Features](#features)\n- [Using Fluid in your project](#using-fluid-in-your-project)\n- [Allow-listing object members](#allow-listing-object-members)\n- [Execution limits](#execution-limits)\n- [Converting CLR types](#converting-clr-types)\n- [Encoding](#encoding)\n- [Localization](#localization)\n- [Time zones](#time-zones)\n- [Customizing tags and blocks](#customizing-tags-and-blocks)\n- [ASP.NET MVC View Engine](#aspnet-mvc-view-engine)\n- [Whitespace control](#whitespace-control)\n- [Custom filters](#custom-filters)\n- [Functions](#functions)\n- [Visiting and altering a template](#visiting-and-altering-a-template)\n- [Performance](#performance)\n- [Used by](#used-by)\n\n<br>\n\n#### Source\n\n```Liquid\n<ul id=\"products\">\n  {% for product in products %}\n    <li>\n      <h2>{{product.name}}</h2>\n      Only {{product.price | price }}\n\n      {{product.description | prettyprint | paragraph }}\n    </li>\n  {% endfor %}\n</ul>\n```\n\n#### Result\n\n```html\n<ul id=\"products\">\n    <li>\n      <h2>Apple</h2>\n      $329\n\n      Flat-out fun.\n    </li>\n    <li>\n      <h2>Orange</h2>\n      $25\n\n      Colorful. \n    </li>\n    <li>\n      <h2>Banana</h2>\n      $99\n\n      Peel it.\n    </li>\n</ul>\n```\n\nNotice\n- The `<li>` tags are at the same index as in the template, even though the `{% for }` tag had some leading spaces\n- The `<ul>` and `<li>` tags are on contiguous lines even though the `{% for }` is taking a full line.\n\n<br>\n\n## Using Fluid in your project\n\nYou can directly reference the [Nuget package](https://www.nuget.org/packages/Fluid.Core).\n\n### Hello World\n\n#### Source\n\n```csharp\nvar parser = new FluidParser();\n\nvar model = new { Firstname = \"Bill\", Lastname = \"Gates\" };\nvar source = \"Hello {{ Firstname }} {{ Lastname }}\";\n\nif (parser.TryParse(source, out var template, out var error))\n{   \n    var context = new TemplateContext(model);\n\n    Console.WriteLine(template.Render(context));\n}\nelse\n{\n    Console.WriteLine($\"Error: {error}\");\n}\n```\n\n#### Result\n`Hello Bill Gates`\n\n### Thread-safety\n\nA `FluidParser` instance is thread-safe, and should be shared by the whole application. A common pattern is declare the parser in a local static variable:\n\n```c#\n    private static readonly FluidParser _parser = new FluidParser();\n```\n\nA `IFluidTemplate` instance is thread-safe and can be cached and reused by multiple threads concurrently.\n\nA `TemplateContext` instance is __not__ thread-safe and an instance should be created every time an `IFluidTemplate` instance is used.\n\n<br>\n\n## Adding custom filters\n\nFilters can be **async** or not. They are defined as a `delegate` that accepts an **input**, a **set of arguments** and the current **context** of the rendering process.\n\nHere is the `downcase` filter as defined in Fluid.\n\n#### Source\n```csharp\npublic static ValueTask<FluidValue> Downcase(FluidValue input, FilterArguments arguments, TemplateContext context)\n{\n    return new StringValue(input.ToStringValue().ToLower());\n}\n```\n\n#### Registration\nFilters are registered in an instance of `TemplateOptions`. This options object can be reused every time a template is rendered.\n\n```csharp\nvar options = new TemplateOptions();\noptions.Filters.AddFilter('downcase', Downcase);\n\nvar context = new TemplateContext(options);\n```\n\n<br>\n\n## Allow-listing object members\n\nLiquid is a secure template language which will only allow a predefined set of members to be accessed, and where model members can't be changed. \nProperty are added to the `TemplateOptions.MemberAccessStrategy` property. This options object can be reused every time a template is rendered.\n\nAlternatively, the `MemberAccessStrategy` can be assigned an instance of `UnsafeMemberAccessStrategy` which will allow any property to be accessed.\n\n### Allow-listing a specific type\n\nThis will allow any public field or property to be read from a template.\n\n```csharp\nvar options = new TemplateOptions();\noptions.MemberAccessStrategy.Register<Person>();\n``` \n\n> Note: When passing a model with `new TemplateContext(model)` the type of the `model` object is automatically registered. This behavior can be disable\nby calling `new TemplateContext(model, false)`\n\n### Allow-listing specific members\n\nThis will only allow the specific fields or properties to be read from a template.\n\n```csharp\nvar options = new TemplateOptions();\noptions.MemberAccessStrategy.Register<Person>(\"Firstname\", \"Lastname\");\n``` \n\n### Intercepting a type access\n\nThis will provide a method to intercept when a member is accessed and either return a custom value or prevent it.\n\nNB: If the model implements `IDictionary` or any similar generic dictionary types the dictionary access has priority over the custom accessors.\n\nThis example demonstrates how to intercept calls to a `Person` and always return the same property.\n\n```csharp\nvar model = new Person { Name = \"Bill\" };\n\nvar options = new TemplateOptions();\noptions.MemberAccessStrategy.Register<Person, object>((obj, name) => obj.Name);\n``` \n\n### Customizing object accessors\n\nTo provide advanced customization for specific types, it is recommended to use value converters and a custom `FluidValue` implementation by inheriting from `ObjectValueBase`.\n\nThe following example show how to provide a custom transformation for any `Person` object:\n\n```csharp\nprivate class PersonValue : ObjectValueBase\n{\n    public PersonValue(Person value) : base(value)\n    {\n    }\n\n    public override ValueTask<FluidValue> GetIndexAsync(FluidValue index, TemplateContext context)\n    {\n        return Create(((Person)Value).Firstname + \"!!!\" + index.ToStringValue(), context.Options);\n    }\n}\n```\n\nThis custom type can be used with a converter such that any time a `Person` is used, it is wrapped as a `PersonValue`.\n\n```csharp\nvar options = new TemplateOptions();\noptions.ValueConverters.Add(o => o is Person p ? new PersonValue(p) : null);\n```\n\nIt can also be used to replace custom member access by customizing `GetValueAsync`, or do custom conversions to standard Fluid types. \n\n### Inheritance\n\nAll the members of the class hierarchy are registered. Besides, all inherited classes will be correctly evaluated when a base class is registered and\na member of the base class is accessed.\n\n<br>\n\n### Object members casing\n\nBy default, the properties of a registered object are case sensitive and registered as they are in their source code. For instance, \nthe property `FirstName` would be access using the `{{ p.FirstName }}` tag.\n\nHowever it can be necessary to register these properties with different cases, like __Camel case__ (`firstName`), or __Snake case__ (`first_name`).\n\nThe following example configures the templates to use Camel casing.\n\n```csharp\nvar options = new TemplateOptions();\noptions.MemberAccessStrategy.MemberNameStrategy = MemberNameStrategies.CamelCase;\n```\n\n## Execution limits\n\n### Limiting templates recursion\n\nWhen invoking `{% include 'sub-template' %}` statements it is possible that some templates create an infinite recursion that could block the server.\nTo prevent this the `TemplateOptions` class defines a default `MaxRecursion = 100` that prevents templates from being have a depth greater than `100`.\n\n### Limiting templates execution\n\nTemplate can inadvertently create infinite loop that could block the server by running indefinitely. \nTo prevent this the `TemplateOptions` class defines a default `MaxSteps`. By default this value is not set.\n\n<br>\n\n## Converting CLR types\n\nWhenever an object is manipulated in a template it is converted to a specific `FluidValue` instance that provides a dynamic type system somehow similar to the one in JavaScript.\n\nIn Liquid they can be Number, String, Boolean, Array, Dictionary, or Object. Fluid will automatically convert the CLR types to the corresponding Liquid ones, and also provides specialized ones.\n\nTo be able to customize this conversion you can add **value converters**.\n\n### Adding a value converter\n\nWhen the conversion logic is not directly inferred from the type of an object, a value converter can be used.\n\nValue converters can return:\n- `null` to indicate that the value couldn't be converted\n- a `FluidValue` instance to stop any further conversion and use this value\n- another object instance to continue the conversion using custom and internal **type mappings**\n\nThe following example shows how to convert any instance implementing an interface to a custom string value:\n\n```csharp\nvar options = new TemplateOptions();\n\noptions.ValueConverters.Add((value) => value is IUser user ? user.Name : null);\n```\n\n> Note: Type mapping are defined globally for the application.\n\n<br>\n\n## Encoding\n\nBy default Fluid doesn't encode the output. Encoders can be specified when calling `Render()` or `RenderAsync()` on the template.\n\n### HTML encoding\n\nTo render a template with HTML encoding use the `System.Text.Encodings.Web.HtmlEncoder.Default` instance.\n\nThis encoder is used by default for the MVC View engine.\n\n### Disabling encoding contextually\n\nWhen an encoder is defined you can use a special `raw` filter or `{% raw %} ... {% endraw %}` tag to prevent a value from being encoded, for instance if you know that the content is HTML and is safe.\n\n#### Source\n```Liquid\n{% assign html = '<em>This is some html</em>' %}\n\nEncoded: {{ html }}\nNot encoded: {{ html | raw }\n```\n\n#### Result\n```html\n&lt;em%gt;This is some html&lt;/em%gt;\n<em>This is some html</em>\n```\n\n### Captured blocks are not double-encoded\n\nWhen using `capture` blocks, the inner content is flagged as \npre-encoded and won't be double-encoded if used in a `{{ }}` tag.\n\n### JSON encoding\n\nBy default all JSON strings are encoded using the default `JavaScriptEncoder` instance. This can be changed by setting the `TemplateOptions.JavaScriptEncoder` property.\n\n```Liquid\n{{ \"你好，这是一条短信\" | json\" }}\n```\n\n#### Result\n\n```html\n\"\\u4F60\\u597D\\uFF0C\\u8FD9\\u662F\\u4E00\\u6761\\u77ED\\u4FE1\"\n```\n\nUsing the `JavaScriptEncoder.UnsafeRelaxedJsonEscaping` can be done this way:\n\n```csharp\n// This variable should be static and reused for all templates\nvar options = new TemplateOptions\n{\n    JavaScriptEncoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping\n};\n\nvar context = new TemplateContext(options);\n```\n\n#### Result\n```html\n\"你好，这是一条短信\"\n```\n\n<br>\n\n## Localization\n\nBy default templates are rendered using an _invariant_ culture so that the results are consistent across systems. This is important for instance when rendering dates, times and numbers.\n\nHowever it is possible to define a specific culture to use when rendering a template using the `TemplateContext.CultureInfo` property. \n\n#### Source\n\n```csharp\nvar options = new TemplateOptions();\noptions.CultureInfo = new CultureInfo(\"en-US\");\nvar context = new TemplateContext(options);\nvar result = template.Render(context);\n```\n\n```Liquid\n{{ 1234.56 }}\n{{ \"now\" | date: \"%v\" }}\n```\n\n#### Result\n```html\n1234.56\nTuesday, August 1, 2017\n```\n\n<br>\n\n## Time zones\n\n### System time zone\n\n`TemplateOptions` and `TemplateContext` provides a property to define a default time zone to use when parsing date and times. The default value is the current system's time zone. Setting a custom one can also prevent different environments (data centers) from\ngenerating different results.\n\n- When dates and times are parsed and don't specify a time zone, the configured one is assumed. \n- When a time zone is provided in the source string, the resulting date time uses it.\n\n> Note: The `date` filter conforms to the Ruby date and time formats https://ruby-doc.org/core-3.0.0/Time.html#method-i-strftime. To use the .NET standard date formats, use the `format_date` filter.\n\n#### Source\n\n```csharp\nvar context = new TemplateContext { TimeZone = TimeZoneInfo.FindSystemTimeZoneById(\"Pacific Standard Time\") } ;\nvar result = template.Render(context);\n```\n\n```Liquid\n{{ '1970-01-01 00:00:00' | date: '%c' }}\n```\n\n#### Result\n```html\nWed Dec 31 19:00:00 -08:00 1969\n```\n\n### Converting time zones\n\nDates and times can be converted to specific time zones using the `time_zone: <iana>` filter.\n\n#### Example\n\n```csharp\nvar context = new TemplateContext();\ncontext.SetValue(\"published\", DateTime.UtcNow);\n```\n\n```Liquid\n{{ published | time_zone: 'America/New_York' | date: '%+' }}\n```\n\n#### Result\n```html\nTue Aug  1 17:04:36 -05:00 2017\n```\n\n<br>\n\n## Customizing tags and blocks\n\nFluid's grammar can be modified to accept any new tags and blocks with \nany custom parameters. The parser is based on [Parlot](https://github.com/sebastienros/parlot) \nwhich makes it completely extensible.\n\nUnlike blocks, tags don't have a closing element (e.g., `cycle`, `increment`).\nA closing element will match the name of the opening tag with and `end` suffix, like `endfor`.\nBlocks are useful when manipulating a section of a a template as a set of statements.\n\nFluid provides helper method to register common tags and blocks. All tags and block always start with an __identifier__ that is\nthe tag name.\n\nEach custom tag needs to provide a delegate that is evaluated when the tag is matched. Each delegate will be able to use these properties:\n\n- `writer`, a `TextWriter` instance that is used to render some text.\n- `encode`, a `TextEncoder` instance, like `HtmlEncoder`, or `NullEncoder`. It's defined by the caller of the template.\n- `context`, a `TemplateContext` instance.\n\n### Registering a custom tag\n\n- __Empty__: Tag with no parameter, like `{% renderbody %}`\n- __Identifier__: Tag taking an identifier as parameter, like `{% increment my_variable %}`\n- __Expression__: Tag taking an expression as parameter, like `{% layout 'home' | append: '.liquid' %}`\n\nHere are some examples:\n\n#### Source\n\n```csharp\nparser.RegisterIdentifierTag(\"hello\", (identifier, writer, encoder, context) =>\n{\n    writer.Write(\"Hello \");\n    writer.Write(identifier);\n});\n```\n\n```Liquid\n{% hello you %}\n```\n\n#### Result\n```html\nHello you\n```\n\n### Registering a custom block\n\nBlocks are created the same way as tags, and the lambda expression can then access the list of statements inside the block.\n\n#### Source\n\n\n```csharp\n\nparser.RegisterExpressionBlock(\"repeat\", async (value, statements, writer, encoder, context) =>\n{\n    var fluidValue = await value.EvaluateAsync(context);\n\n    for (var i = 0; i < fluidValue.ToNumberValue(); i++)\n    {\n        await statements.RenderStatementsAsync(writer, encoder, context);\n    }\n\n    return Completion.Normal;\n});\n```\n\n```Liquid\n{% repeat 1 | plus: 2 %}Hi! {% endrepeat %}\n```\n\n#### Result\n```html\nHi! Hi! Hi!\n```\n\n### Custom parsers\n\nIf __identifier__, __empty__ and __expression__ parsers are not sufficient, the methods `RegisterParserBlock` and `RegisterParserTag` accept\nany custom parser construct. These can be the standard ones defined in the `FluidParser` class, like `Primary`, or any other composition of them.\n\nFor instance, `RegisterParseTag(Primary.AndSkip(Comma).And(Primary), ...)` will expect two `Primary` elements separated by a comma. The delegate will then \nbe invoked with a `ValueTuple<Expression, Expression>` representing the two `Primary` expressions.\n\n### Registering a custom operator\n\nOperator are used to compare values, like `>` or `contains`. Custom operators can be defined if special comparisons need to be provided.\n\n#### Source\n\nThe following example creates a custom `xor` operator that will evaluate to `true` if only one of the left and right expressions is true when converted to booleans.\n\n__XorBinaryExpression.cs__\n\n```csharp\nusing Fluid.Ast;\nusing Fluid.Values;\nusing System.Threading.Tasks;\n\nnamespace Fluid.Tests.Extensibility\n{\n    public class XorBinaryExpression : BinaryExpression\n    {\n        public XorBinaryExpression(Expression left, Expression right) : base(left, right)\n        {\n        }\n\n        public override async ValueTask<FluidValue> EvaluateAsync(TemplateContext context)\n        {\n            var leftValue = await Left.EvaluateAsync(context);\n            var rightValue = await Right.EvaluateAsync(context);\n\n            return BooleanValue.Create(leftValue.ToBooleanValue() ^ rightValue.ToBooleanValue());\n        }\n    }\n}\n```\n\n__Parser configuration__\n\n```csharp\nparser.RegisteredOperators[\"xor\"] = (a, b) => new XorBinaryExpression(a, b);\n```\n\n__Usage__\n\n```Liquid\n{% if true xor false %}Hello{% endif %}\n```\n\n#### Result\n```html\nHello\n```\n\n## Accessing the concrete syntax tree\n\nThe syntax tree is accessible by casting the template to its concrete `FluidTemplate` type and using the `Statements` property.\n\n#### Source\n\n```csharp\nvar template = (FluidTemplate)iTemplate;\nvar statements = template.Statements;\n```\n\n<br>\n\n## ASP.NET MVC View Engine\n\nThe package `Fluid.MvcViewEngine` provides a convenient way to use Liquid as a replacement or in combination of Razor in ASP.NET MVC.\n\n### Configuration\n\n#### Registering the view engine\n\n1. Reference the `Fluid.MvcViewEngine` NuGet package\n2. Add a `using` statement on `Fluid.MvcViewEngine`\n3. Call `AddFluid()` in your `Startup.cs`.\n\n#### Sample\n```csharp\nusing Fluid.MvcViewEngine;\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddMvc().AddFluid();\n    }\n}\n```\n#### Registering view models\n\nBecause the Liquid language only accepts known members to be accessed, the View Model classes need to be registered in Fluid. Usually from a static constructor such that the code is run only once for the application.\n\n#### View Model registration\n\nView models are automatically registered and available as the root object in liquid templates.\nCustom model registrations can be added when calling `AddFluid()`.\n\n```csharp\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddMvc().AddFluid(o => o.TemplateOptions.Register<Person>());\n    }\n}\n```\n\nMore way to register types and members can be found in the [Allow-listing object members](#allow-listing-object-members) section.\n\n#### Registering custom tags\n\nWhen using the MVC View engine, custom tags can still be added to the parser. Refer to [this section](https://github.com/sebastienros/fluid#registering-a-custom-tag) on how to create custom tags.\n\nIt is recommended to create a custom class inheriting from `FluidViewParser`, and to customize the tags in the constructor of this new class.\nThis class can then be registered as the default parser for the MVC view engine.\n\n```csharp\nusing Fluid.Ast;\nusing Fluid.MvcViewEngine;\n\nnamespace Fluid.MvcSample\n{\n    public class CustomFluidViewParser : FluidViewParser\n    {\n        public CustomFluidViewParser()\n        {\n            RegisterEmptyTag(\"mytag\", static async (s, w, e, c) =>\n            {\n                await w.WriteAsync(\"Hello from MyTag\");\n\n                return Completion.Normal;\n            });\n        }\n    }\n}\n```\n\n```csharp\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.Configure<MvcViewOptions>(options =>\n        {\n            options.Parser = new CustomFluidViewParser();\n        });\n\n        services.AddMvc().AddFluid();\n    }\n}\n```\n\n### Layouts\n\n#### Index.liquid\n\n```Liquid\n{% layout '_layout.liquid' %}\n\nThis is the home page\n```\n\nThe `{% layout [template] %}` tag accepts one argument which can be any expression that return the relative location of a liquid template that will be used as the master template.\n\nThe layout tag is optional in a view. It can also be defined multiple times or conditionally.\n\nFrom a layout template the `{% renderbody %}` tag is used to depict the location of the view's content inside the layout itself.\n\n#### Layout.liquid\n\n```Liquid\n<html>\n  <body>\n    <div class=\"menu\"></div>\n    \n    <div class=\"content\">\n      {% renderbody %}\n    </div>\n    \n    <div class=\"footer\"></div>\n  </body>\n</html>\n```\n\n### Sections\n\nSections are defined in a layout as for views to render content in specific locations. For instance a view can render some content in a **menu** or a **footer** section.\n\n#### Rendering content in a section\n\n```Liquid\n{% layout '_layout.liquid' %}\n\nThis is is the home page\n\n{% section menu %}\n  <a href=\"h#\">This link goes in the menu</a>\n{% endsection %}\n\n{% section footer %}\n  This text will go in the footer\n{% endsection %}\n```\n\n#### Rendering the content of a section\n\n```Liquid\n<html>\n  <body>\n    <div class=\"menu\">\n      {% rendersection menu %}\n    </div>\n    \n    <div class=\"content\">\n      {% renderbody %}\n    </div>\n    \n    <div class=\"footer\">\n      {% rendersection footer %}\n    </div>\n  </body>\n</html>\n```\n\n### ViewStart files\n\nDefining the layout template in each view might me cumbersome and make it difficult to change it globally. To prevent that it can be defined in a `_ViewStart.liquid` file.\n\nWhen a view is rendered all `_ViewStart.liquid` files from its current and parent directories are executed before. This means multiple files can be defined to defined settings for a group of views.\n\n#### _ViewStart.liquid\n\n```Liquid\n{% layout '_layout.liquid' %}\n{% assign background = 'ffffff' }\n```\n\nYou can also define other variables or render some content.\n\n### Custom views locations\n\nIt is possible to add custom file locations containing views by adding them to `FluidMvcViewOptions.ViewsLocationFormats`.\n\nThe default ones are:\n- `Views/{1}/{0}.liquid`\n- `Views/Shared/{0}.liquid`\n\nWhere `{0}` is the view name, and `{1}` is the controller name.\n\nFor partials, the list is defined in `FluidMvcViewOptions.PartialsLocationFormats`:\n- `Views/{0}.liquid`\n- `Views/Partials/{0}.liquid`\n- `Views/Partials/{1}/{0}.liquid`\n- `Views/Shared/Partials/{0}.liquid`\n\nLayouts will be searched in the same locations as Views.\n\n### Execution\n\nThe content of a view is parsed once and kept in memory until the file or one of its dependencies changes. Once parsed, the tag are executed every time the view is called. To compare this with Razor, where views are first compiled then instantiated every time they are rendered. This means that on startup or when the view is changed, views with Fluid will run faster than those in Razor, unless you are using precompiled Razor views. In all cases Razor views will be faster on subsequent calls as they are compiled directly to C#.\n\nThis difference makes Fluid very adapted for rapid development cycles where the views can be deployed and updated frequently. And because the Liquid language is secure, developers give access to them with more confidence.  \n\n<br>\n\n## View Engine\n\nThe Fluid ASP.NET MVC View Engine is based on an MVC agnostic view engine provided in the `Fluid.ViewEngine` package. The same options and features are available, but without \nrequiring ASP.NET MVC. This is useful to provide the same experience to build template using layouts and sections.\n\n### Usage\n\nUse the class `FluidViewRenderer : IFluidViewRender` and `FluidViewEngineOptions`. \n\n\n\n## Whitespace control\n\nLiquid follows strict rules with regards to whitespace support. By default all spaces and new lines are preserved from the template.\nThe Liquid syntax and some Fluid options allow to customize this behavior.\n\n### Hyphens\n\nFor example:\n\n```liquid\n{%  assign name = \"Bill\" %}\n{{ name }}\n```\n\nThere is a new line after the `assign` tag which will be preserved.\n\nOutputs:\n\n```\n\nBill\n```\n\nTags and values can use hyphens to strip whitespace. \n\nExample:\n\n```liquid\n{%  assign name = \"Bill\" -%}\n{{ name }}\n```\n\nOutputs:\n\n```\nBill\n```\n\nThe `-%}` strips the whitespace from the right side of the `assign` tag.\n\n## Template Options\n\nFluid provides the `TemplateOptions.Trimming` property that can be set with predefined preferences for when whitespace should be stripped automatically, even if hyphens are not\npresent in tags and output values.\n\n## Greedy Mode\n\nWhen greedy model is disabled in `TemplateOptions.Greedy`, only the spaces before the first new line are stripped.\nGreedy mode is enabled by default since this is the standard behavior of the Liquid language.\n\n<br>\n\n## Custom filters\n\nSome non-standard filters are provided by default\n\n### format_date\n\nFormats date and times using standard .NET date and time formats. It uses the current culture \nof the system.\n\nInput\n\n```\n\"now\" | format_date: \"G\"\n```\n\nOutput\n\n```\n6/15/2009 1:45:30 PM\n```\n\nDocumentation: https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings\n\n### format_number\n\nFormats numbers using standard .NET number formats.\n\nInput\n\n```\n123 | format_number: \"N\"\n```\n\nOutput\n\n```\n123.00\n```\n\nDocumentation: https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings\n\n### format_string\n\nFormats custom string using standard .NET format strings.\n\nInput\n\n```\n\"hello {0} {1:C}\" | format_string: \"world\" 123\n```\n\nOutput\n\n```\nhello world $123.00\n```\n\nDocumentation: https://docs.microsoft.com/en-us/dotnet/api/system.string.format\n\n<br>\n\n## Functions\n\nFluid provides optional support for functions, which is not part of the standard Liquid templating language. As such it is not enabled by default.\n\n### Enabling functions\n\nWhen instantiating a `FluidParser` set the `FluidParserOptions.AllowFunction` property to `true`.\n\n```\nvar parser = new FluidParser(new FluidParserOptions { AllowFunctions = true });\n```\n\nWhen functions are used while the feature is not enabled, a parse error will be returned.\n\n### Declaring local functions with the `macro` tag\n\n`macro` allows you to define reusable chunks of content invoke with local function.\n\n```\n{% macro field(name, value='', type='text') %}\n<div class=\"field\">\n  <input type=\"{{ type }}\" name=\"{{ name }}\"\n         value=\"{{ value }}\" />\n</div>\n{% endmacro %}\n```\n\nNow `field` is available as a local property of the template and can be invoked as a function.\n\n```\n{{ field('user') }}\n{{ field('pass', type='password') }}\n```\n\n> Macros need to be defined before they are used as they are discovered as the template is executed.\n\n### Importing functions from external templates\nMacros defined in an external template **must** be imported before they can be invoked.\n\n```\n{% from 'forms' import field %}\n\n{{ field('user') }}\n{{ field('pass', type='password') }}\n```\n\n### Extensibility\n\nFunctions are `FluidValue` instances implementing the `InvokeAsync` method. It allows any template to be provided custom function values as part of the model, the `TemplateContext` or globally with options.\n\nA `FunctionValue` type is also available to provide out of the box functions. It takes a delegate that returns a `ValueTask<FluidValue>` as the result.\n\n```c#\nvar lowercase = new FunctionValue((args, context) => \n{\n  var firstArg = args.At(0).ToStringValue();\n  var lower = firstArg.ToLowerCase();\n  return new ValueTask<FluidValue>(new StringValue(lower));\n});\n\nvar context = new TemplateContext();\ncontext.SetValue(\"tolower\", lowercase);\n\nvar parser = new FluidParser(new FluidParserOptions { AllowFunctions = true });\nparser.TryParse(\"{{ tolower('HELLO') }}\", out var template, out var error);\ntemplate.Render(context);\n```\n\n<br>\n\n## Order of execution\n\nWith tags with more than one `and` or `or` operator, operators are checked in order from right to left. You cannot change the order of operations using parentheses. This is the same for filters which are executed from left to right.\nHowever Fluid provides an option to support grouping expression with parentheses.\n\n### Enabling parentheses\n\nWhen instantiating a `FluidParser` set the `FluidParserOptions.AllowParentheses` property to `true`.\n\n```\nvar parser = new FluidParser(new FluidParserOptions { AllowParentheses = true });\n```\n\nWhen parentheses are used while the feature is not enabled, a parse error will be returned (unless for ranges like `(1..4)`).\n\nAt that point a template like the following will work:\n\n```liquid\n{{ 1 | plus : (2 | times: 3) }}\n```\n\n<br>\n\n## Visiting and altering a template\n\nFluid provides a __Visitor__ pattern allowing you to analyze what a template is made of, but also altering it. This can be used for instance to check if a specific identifier is used, replace some filters by another one, or remove any expression that might not be authorized.\n\n### Visiting a template\n\nThe `Fluid.Ast.AstVisitor` class can be used to create a custom visitor.\n\nHere is an example of a visitor class which records if an identifier is accessed anywhere in a template:\n\n```c#\n  public class IdentifierIsAccessedVisitor : AstVisitor\n  {\n      private readonly string _identifier;\n\n      public IdentifierIsAccessedVisitor(string identifier)\n      {\n          _identifier = identifier;\n      }\n\n      public bool IsAccessed { get; private set; }\n\n      public override IFluidTemplate VisitTemplate(IFluidTemplate template)\n      {\n          // Initialize the result each time a template is visited with the same visitor instance\n\n          IsAccessed = false;\n          return base.VisitTemplate(template);\n      }\n\n      protected override Expression VisitMemberExpression(MemberExpression memberExpression)\n      {\n          var firstSegment = memberExpression.Segments.FirstOrDefault() as IdentifierSegment;\n\n          if (firstSegment != null)\n          {\n              IsAccessed |= firstSegment.Identifier == _identifier;\n          }\n\n          return base.VisitMemberExpression(memberExpression);\n      }\n  }\n```\n\nAnd its usage:\n\n```c#\nvar template = new FluidParser().Parse(\"{{ a.b | plus: 1}}\");\n\nvar visitor = new IdentifierIsAccessedVisitor(\"a\");\nvisitor.VisitTemplate(template);\n\nConsole.WriteLine(visitor.IsAccessed); // writes True\n```\n\n### Rewriting a template\n\nThe `Fluid.Ast.AstRewriter` class can be used to create a custom rewriter.\n\nHere is an example of a visitor class which replaces any `plus` filter with a `minus` one:\n\n```c#\n  public class ReplacePlusFiltersVisitor : AstRewriter\n  {\n      protected override Expression VisitFilterExpression(FilterExpression filterExpression)\n      {\n          if (filterExpression.Name == \"plus\")\n          {\n              return new FilterExpression(filterExpression.Input, \"minus\", filterExpression.Parameters);\n          }\n\n          return filterExpression;\n      }\n  }\n```\n\nAnd its usage:\n\n```c#\n\nvar template = new FluidParser().Parse(\"{{ 1 | plus: 2 }}\");\n\nvar visitor = new ReplacePlusFiltersVisitor();\nvar changed = visitor.VisitTemplate(template);\n\nvar result = changed.Render();\n\nConsole.WriteLine(result); // writes -1\n```\n\n### Custom parsers\n\nThe [custom statements and expressions](#custom-parsers) can also be visited by using one of these methods:\n\n- `VisitParserTagStatement<T>(ParserTagStatement<T>)`\n- `VisitParserBlockStatement<T>(ParserBlockStatement<T>)`\n- `VisitEmptyTagStatement(EmptyTagStatement)`\n- `VisitEmptyBlockStatement(EmptyBlockStatement)`\n\nThey all expose a `TagName` property and optionally a `Statements` and `Value` ones when it applies.\n\n## Performance\n\n### Caching\n\nSome performance boost can be gained in your application if you decide to cache the parsed templates before they are rendered. Even though parsing is memory-safe as it won't induce any compilation (meaning all the memory can be collected if you decide to parse a lot of templates), you can skip the parsing step by storing and reusing the `FluidTemplate` instance.\n\nThese object are thread-safe as long as each call to `Render()` uses a dedicated `TemplateContext` instance.\n\n### Benchmarks\n\nA benchmark application is provided in the source code to compare Fluid, [Scriban](https://github.com/scriban/scriban), [DotLiquid](https://github.com/dotliquid/dotliquid), [Liquid.NET](https://github.com/mikebridge/Liquid.NET) and [Handlebars.NET](https://github.com/Handlebars-Net).\nRun it locally to analyze the time it takes to execute specific templates.\n\n#### Results\n\nFluid is faster and allocates less memory than all other well-known .NET Liquid parsers.\nFor parsing, Fluid is 20% faster than the second, Scriban, allocating 2 times less memory.\nFor rendering, Fluid is 30% faster than the second, Handlebars, allocating half the memory, and 5 times faster than Scriban.\nCompared to DotLiquid, Fluid renders 10 times faster, and allocates 34 times less memory.\n\n``` text\nBenchmarkDotNet v0.14.0, Windows 11 (10.0.26100.2314)\n12th Gen Intel Core i7-1260P, 1 CPU, 16 logical and 12 physical cores\n.NET SDK 9.0.100\n  [Host]   : .NET 9.0.0 (9.0.24.52809), X64 RyuJIT AVX2\n  ShortRun : .NET 9.0.0 (9.0.24.52809), X64 RyuJIT AVX2\n\nJob=ShortRun  IterationCount=3  LaunchCount=1\nWarmupCount=3\n\n| Method             | Mean          | Error         | StdDev      | Ratio    | Allocated   | Alloc Ratio |\n|------------------- |--------------:|--------------:|------------:|---------:|------------:|------------:|\n| Fluid_Parse        |      2.622 us |     1.4586 us |   0.0800 us |     1.00 |     2.83 KB |        1.00 |\n| Scriban_Parse      |      3.149 us |     0.8304 us |   0.0455 us |     1.20 |     7.14 KB |        2.53 |\n| DotLiquid_Parse    |      6.133 us |     1.5094 us |   0.0827 us |     2.34 |    16.21 KB |        5.73 |\n| LiquidNet_Parse    |     23.112 us |     6.0582 us |   0.3321 us |     8.82 |    62.04 KB |       21.94 |\n| Handlebars_Parse   |  2,662.991 us | 4,830.0818 us | 264.7531 us | 1,016.17 |   155.42 KB |       54.95 |\n|                    |               |               |             |          |             |             |\n| Fluid_ParseBig     |     10.642 us |     2.0982 us |   0.1150 us |     1.00 |    11.66 KB |        1.00 |\n| Scriban_ParseBig   |     18.546 us |    14.2197 us |   0.7794 us |     1.74 |    32.07 KB |        2.75 |\n| DotLiquid_ParseBig |     25.980 us |     8.1228 us |   0.4452 us |     2.44 |    94.36 KB |        8.10 |\n| LiquidNet_ParseBig | 11,175.713 us | 5,605.1094 us | 307.2350 us | 1,050.22 | 28542.56 KB |    2,448.69 |\n|                    |               |               |             |          |             |             |\n| Fluid_Render       |    127.984 us |    46.8250 us |   2.5666 us |     1.00 |    95.87 KB |        1.00 |\n| Scriban_Render     |    601.083 us |    86.9414 us |   4.7656 us |     4.70 |   498.66 KB |        5.20 |\n| DotLiquid_Render   |  1,248.906 us |   231.9350 us |  12.7131 us |     9.76 |   3270.3 KB |       34.11 |\n| LiquidNet_Render   |    903.463 us | 2,324.0151 us | 127.3871 us |     7.06 |  3126.47 KB |       32.61 |\n| Handlebars_Render  |    170.182 us |    30.0175 us |   1.6454 us |     1.33 |   194.92 KB |        2.03 |\n```\n\nTested on November 24, 2024 with\n- Scriban 5.12.0\n- DotLiquid 2.2.692\n- Liquid.NET 0.10.0\n- Handlebars.Net 2.1.6\n\n##### Legend\n\n- Parse: Parses a simple HTML template containing filters and properties\n- ParseBig: Parses a Blog Post template.\n- Render: Renders a simple HTML template containing filters and properties, with 500 products.\n\n## Used by\n\nFluid is known to be used in the following projects:\n- [Orchard Core CMS](https://github.com/OrchardCMS/OrchardCore) Open Source .NET modular framework and CMS\n- [MaltReport](https://github.com/oldrev/maltreport) OpenDocument/OfficeOpenXML powered reporting engine for .NET and Mono\n- [Elsa Workflows](https://github.com/elsa-workflows/elsa-core) .NET Workflows Library\n- [FluentEmail](https://github.com/lukencode/FluentEmail) All in one email sender for .NET\n- [NJsonSchema](https://github.com/RicoSuter/NJsonSchema) Library to read, generate and validate JSON Schema draft v4+ schemas\n- [NSwag](https://github.com/RicoSuter/NSwag) Swagger/OpenAPI 2.0 and 3.0 toolchain for .NET\n- [Optimizely](https://world.optimizely.com/blogs/deane-barker/dates/2023/1/introducing-liquid-templating/) An enterprise .NET CMS\n- [Rock](https://github.com/SparkDevNetwork/Rock) Relationship Management System\n- [TemplateTo](https://templateto.com) Powerful Template Based Document Generation\n- [Weavo Liquid Loom](https://www.weavo.dev) A Liquid Template generator/editor + corresponding Azure Logic Apps Connector / Microsoft Power Automate Connector\n- [Semantic Kernel](https://github.com/microsoft/semantic-kernel) Integrate cutting-edge LLM technology quickly and easily into your apps\n- [Mailgen](https://github.com/hsndmr/Mailgen) A .NET package that generates clean, responsive HTML e-mails for sending transactional mail\n\n_Please create a pull-request to be listed here._\n"
        },
        {
          "name": "Versions.props",
          "type": "blob",
          "size": 0.5966796875,
          "content": "<Project>\n  <!-- This file define constants that can be changed per TFM -->\n  <PropertyGroup>\n    <MicrosoftExtensionsFileProvidersAbstractionsPackageVersion>8.0.0</MicrosoftExtensionsFileProvidersAbstractionsPackageVersion>\n    <SystemTextJsonPackageVersion>8.0.5</SystemTextJsonPackageVersion>\n  </PropertyGroup>\n\n  <PropertyGroup Condition=\"'$(TargetFramework)' == 'net9.0'\">\n    <MicrosoftExtensionsFileProvidersAbstractionsPackageVersion>9.0.0</MicrosoftExtensionsFileProvidersAbstractionsPackageVersion>\n    <SystemTextJsonPackageVersion>9.0.0</SystemTextJsonPackageVersion>\n  </PropertyGroup>\n</Project>\n"
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.08203125,
          "content": "{\r\n  \"sdk\": {\r\n    \"version\": \"9.0.100\",\r\n    \"rollForward\": \"latestMajor\"\r\n  }\r\n}\r\n"
        }
      ]
    }
  ]
}