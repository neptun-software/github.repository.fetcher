{
  "metadata": {
    "timestamp": 1736711118621,
    "page": 949,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zhaopeiym/IoTClient",
      "stars": 1337,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.4853515625,
          "content": "﻿## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n#*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n#NLog#\n**/nlogs/\n*log.*.txt\n*.modelproj\n\n#kdiff3\n*.org\n/IoTClient.Tests/appsettings.json\n/IoTClient/自增版本号打包.ps1\n/IoTClient/version.props\n/IoTServer/version.props\n/IoTServer/自增版本号打包.ps1\n/IoTClient/IoTClient/IoTClient.xml\n/IoTServer/IoTServer/IoTServer.xml\n"
        },
        {
          "name": "IoTClient.Extensions.Adapter.Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "IoTClient.Extensions.Adapter",
          "type": "tree",
          "content": null
        },
        {
          "name": "IoTClient.Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "IoTClient.sln",
          "type": "blob",
          "size": 3.4248046875,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 16\nVisualStudioVersion = 16.0.29318.209\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"IoTClient\", \"IoTClient\\IoTClient.csproj\", \"{DBB31F80-60BC-48E4-A2C6-07E6A8C8048F}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Tests\", \"Tests\", \"{CD6D0005-7B67-4599-9BF2-7255E135B6C6}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"IoTClient.Tests\", \"IoTClient.Tests\\IoTClient.Tests.csproj\", \"{5FF4DDE3-A370-4421-9D32-5A51EB704EBA}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"IoTServer\", \"IoTServer\\IoTServer.csproj\", \"{83DCC2E8-3CE1-48B6-8304-FD74149AFFC3}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"IoTClient.Extensions.Adapter\", \"IoTClient.Extensions.Adapter\\IoTClient.Extensions.Adapter.csproj\", \"{6F3D2AE1-1C3C-475B-B513-0D71F259070C}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"IoTClient.Extensions.Adapter.Tests\", \"IoTClient.Extensions.Adapter.Tests\\IoTClient.Extensions.Adapter.Tests.csproj\", \"{4920DE80-BE14-49F8-A63A-190EBD6F04A5}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{DBB31F80-60BC-48E4-A2C6-07E6A8C8048F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{DBB31F80-60BC-48E4-A2C6-07E6A8C8048F}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{DBB31F80-60BC-48E4-A2C6-07E6A8C8048F}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{DBB31F80-60BC-48E4-A2C6-07E6A8C8048F}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{5FF4DDE3-A370-4421-9D32-5A51EB704EBA}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{5FF4DDE3-A370-4421-9D32-5A51EB704EBA}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{5FF4DDE3-A370-4421-9D32-5A51EB704EBA}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{5FF4DDE3-A370-4421-9D32-5A51EB704EBA}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{83DCC2E8-3CE1-48B6-8304-FD74149AFFC3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{83DCC2E8-3CE1-48B6-8304-FD74149AFFC3}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{83DCC2E8-3CE1-48B6-8304-FD74149AFFC3}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{83DCC2E8-3CE1-48B6-8304-FD74149AFFC3}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{6F3D2AE1-1C3C-475B-B513-0D71F259070C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{6F3D2AE1-1C3C-475B-B513-0D71F259070C}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{6F3D2AE1-1C3C-475B-B513-0D71F259070C}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{6F3D2AE1-1C3C-475B-B513-0D71F259070C}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{4920DE80-BE14-49F8-A63A-190EBD6F04A5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{4920DE80-BE14-49F8-A63A-190EBD6F04A5}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{4920DE80-BE14-49F8-A63A-190EBD6F04A5}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{4920DE80-BE14-49F8-A63A-190EBD6F04A5}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{5FF4DDE3-A370-4421-9D32-5A51EB704EBA} = {CD6D0005-7B67-4599-9BF2-7255E135B6C6}\n\t\t{4920DE80-BE14-49F8-A63A-190EBD6F04A5} = {CD6D0005-7B67-4599-9BF2-7255E135B6C6}\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {2979C316-BD46-4FE9-8CA4-B1CD5852D662}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "IoTClient",
          "type": "tree",
          "content": null
        },
        {
          "name": "IoTServer",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2019 农码一生\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README-zh_CN.md",
          "type": "blob",
          "size": 20.6171875,
          "content": "<h1 align=\"center\">\nIoTClient \n</h1>\n\n## [English](README.md) | 简体中文\n\n[![image](https://img.shields.io/nuget/v/IoTClient.svg)](https://www.nuget.org/packages/IoTClient/) [![image](https://img.shields.io/nuget/dt/IoTClient.svg)](https://www.nuget.org/packages/IoTClient/) ![image](https://img.shields.io/github/license/alienwow/SnowLeopard.svg)\n\n- 这是一个物联网设备通讯协议实现客户端，将包括主流PLC通信读取、ModBus协议、Bacnet协议等常用工业通讯协议。\n- 本组件基于.NET Standard 2.0，可用于.Net的跨平台开发，如Windows、Linux甚至可运行于树莓派上。\n- 本组件终身开源免费，采用最宽松MIT协议，您也可以随意修改和商业使用（商业使用请做好评估和测试）。  \n- 开发工具：Visual Studio 2019 \n- QQ交流群：[700324594](https://jq.qq.com/?_wv=1027&k=tIRmmGbt)  \n\n## 文档目录\n<!-- TOC -->\n\n- [使用说明](#%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E)\n    - [引用组件](#%E5%BC%95%E7%94%A8%E7%BB%84%E4%BB%B6)\n    - [ModBusTcp读写操作](#modbustcp%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C)\n    - [ModBusRtu读写操作](#modbusrtu%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C)\n    - [ModBusAscii读写操作](#modbusascii%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C)\n    - [ModbusRtuOverTcp读写操作](#modbusrtuovertcp%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C)\n    - [SiemensClient(西门子)读写操作](#siemensclient%E8%A5%BF%E9%97%A8%E5%AD%90%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C)\n    - [注意：关于Siemens的PLC地址](#%E6%B3%A8%E6%84%8F%E5%85%B3%E4%BA%8Esiemens%E7%9A%84plc%E5%9C%B0%E5%9D%80)\n    - [SiemensClient最佳实践](#siemensclient%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5)\n    - [MitsubishiClient(三菱)读写操作](#mitsubishiclient%E4%B8%89%E8%8F%B1%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C)\n    - [OmronFinsClient(欧姆龙)读写操作](#omronfinsclient%E6%AC%A7%E5%A7%86%E9%BE%99%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C)\n    - [AllenBradleyClient(罗克韦尔)读写操作](#allenbradleyclient%E7%BD%97%E5%85%8B%E9%9F%A6%E5%B0%94%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C)\n- [基于IoTClient库的一些项目](#%E5%9F%BA%E4%BA%8Eiotclient%E5%BA%93%E7%9A%84%E4%B8%80%E4%BA%9B%E9%A1%B9%E7%9B%AE)\n    - [IoTClient Tool 桌面程序工具（开源）](#iotclient-tool-%E6%A1%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F%E5%B7%A5%E5%85%B7%E5%BC%80%E6%BA%90)\n    - [iotgateway（开源）](#iotgateway%E5%BC%80%E6%BA%90)\n    - [能源管理系统（商用）](#%E8%83%BD%E6%BA%90%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%95%86%E7%94%A8)\n        - [能源管理-现场-单项目](#%E8%83%BD%E6%BA%90%E7%AE%A1%E7%90%86-%E7%8E%B0%E5%9C%BA-%E5%8D%95%E9%A1%B9%E7%9B%AE)\n        - [能源管理-云端-多项目](#%E8%83%BD%E6%BA%90%E7%AE%A1%E7%90%86-%E4%BA%91%E7%AB%AF-%E5%A4%9A%E9%A1%B9%E7%9B%AE)\n        - [能源管理-移动端](#%E8%83%BD%E6%BA%90%E7%AE%A1%E7%90%86-%E7%A7%BB%E5%8A%A8%E7%AB%AF)\n    - [海底捞末端控制（商用）](#%E6%B5%B7%E5%BA%95%E6%8D%9E%E6%9C%AB%E7%AB%AF%E6%8E%A7%E5%88%B6%E5%95%86%E7%94%A8)\n        - [海底捞末端控制-web](#%E6%B5%B7%E5%BA%95%E6%8D%9E%E6%9C%AB%E7%AB%AF%E6%8E%A7%E5%88%B6-web)\n        - [海底捞末端控制-移动端](#%E6%B5%B7%E5%BA%95%E6%8D%9E%E6%9C%AB%E7%AB%AF%E6%8E%A7%E5%88%B6-%E7%A7%BB%E5%8A%A8%E7%AB%AF)\n    - [越邦智能分拣系统（商用）](#%E8%B6%8A%E9%82%A6%E6%99%BA%E8%83%BD%E5%88%86%E6%8B%A3%E7%B3%BB%E7%BB%9F%E5%95%86%E7%94%A8)\n    - [电表监控系统（商用）](#%E7%94%B5%E8%A1%A8%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E5%95%86%E7%94%A8)\n    - [人造板行业生产管理软件（商用）](#%E4%BA%BA%E9%80%A0%E6%9D%BF%E8%A1%8C%E4%B8%9A%E7%94%9F%E4%BA%A7%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6%E5%95%86%E7%94%A8)\n- [友情链接](#%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5)\n    - [iotgateway](#iotgateway)\n\n<!-- /TOC -->\n\n# 使用说明\n\n## 引用组件\n[Nuget安装](https://www.nuget.org/packages/IoTClient/) ```Install-Package IoTClient ```  \n或图形化安装   \n![image](https://user-images.githubusercontent.com/5820324/68722366-2fc5bf00-05f0-11ea-8282-f2b0a58a9f9d.png)  \n\n## ModBusTcp读写操作\n```\n//1、实例化客户端 - 输入正确的IP和端口\nModBusTcpClient client = new ModBusTcpClient(\"127.0.0.1\", 502);\n\n//2、写操作 - 参数依次是：地址 、值 、站号 、功能码\nclient.Write(\"4\", (short)33, 2, 16);\n\n//2.1、【注意】写入数据的时候需要明确数据类型\nclient.Write(\"0\", (short)33, 2, 16);    //写入short类型数值\nclient.Write(\"4\", (ushort)33, 2, 16);   //写入ushort类型数值\nclient.Write(\"8\", (int)33, 2, 16);      //写入int类型数值\nclient.Write(\"12\", (uint)33, 2, 16);    //写入uint类型数值\nclient.Write(\"16\", (long)33, 2, 16);    //写入long类型数值\nclient.Write(\"20\", (ulong)33, 2, 16);   //写入ulong类型数值\nclient.Write(\"24\", (float)33, 2, 16);   //写入float类型数值\nclient.Write(\"28\", (double)33, 2, 16);  //写入double类型数值\nclient.Write(\"32\", true, 2, 5);         //写入线圈类型值\nclient.Write(\"100\", \"orderCode\", stationNumber);  //写入字符串\n\n//3、读操作 - 参数依次是：地址 、站号 、功能码\nvar value = client.ReadInt16(\"4\", 2, 3).Value;\n\n//3.1、其他类型数据读取\nclient.ReadInt16(\"0\", stationNumber, 3);    //short类型数据读取\nclient.ReadUInt16(\"4\", stationNumber, 3);   //ushort类型数据读取\nclient.ReadInt32(\"8\", stationNumber, 3);    //int类型数据读取\nclient.ReadUInt32(\"12\", stationNumber, 3);  //uint类型数据读取\nclient.ReadInt64(\"16\", stationNumber, 3);   //long类型数据读取\nclient.ReadUInt64(\"20\", stationNumber, 3);  //ulong类型数据读取\nclient.ReadFloat(\"24\", stationNumber, 3);   //float类型数据读取\nclient.ReadDouble(\"28\", stationNumber, 3);  //double类型数据读取\nclient.ReadCoil(\"32\", stationNumber, 1);    //线圈类型数据读取\nclient.ReadDiscrete(\"32\", stationNumber, 2);//离散类型数据读取\nclient.ReadString(\"100\", stationNumber,10); //读取字符串\n\n//4、如果没有主动Open，则会每次读写操作的时候自动打开自动和关闭连接，这样会使读写效率大大减低。所以建议手动Open和Close。\nclient.Open();\n\n//5、读写操作都会返回操作结果对象Result\nvar result = client.ReadInt16(\"4\", 2, 3);\n//5.1 读取是否成功（true或false）\nvar isSucceed = result.IsSucceed;\n//5.2 读取失败的异常信息\nvar errMsg = result.Err;\n//5.3 读取操作实际发送的请求报文\nvar requst  = result.Requst;\n//5.4 读取操作服务端响应的报文\nvar response = result.Response;\n//5.5 读取到的值\nvar value3 = result.Value;\n\n//6、批量读取\nvar list = new List<ModBusInput>();\nlist.Add(new ModBusInput()\n{\n    Address = \"2\",\n    DataType = DataTypeEnum.Int16,\n    FunctionCode = 3,\n    StationNumber = 1\n});\nlist.Add(new ModBusInput()\n{\n    Address = \"2\",\n    DataType = DataTypeEnum.Int16,\n    FunctionCode = 4,\n    StationNumber = 1\n});\nlist.Add(new ModBusInput()\n{\n    Address = \"199\",\n    DataType = DataTypeEnum.Int16,\n    FunctionCode = 3,\n    StationNumber = 1\n});\nvar result = client.BatchRead(list);\n\n//7、构造函数其他参数\n//IP、端口、超时时间、大小端设置\nModBusTcpClient client = new ModBusTcpClient(\"127.0.0.1\", 502, 1500, EndianFormat.ABCD);\n``` \nModBusTcp更多使用方式，请参考[单元测试](https://github.com/zhaopeiym/IoTClient/blob/master/IoTClient.Tests/Modbus_Tests/ModBusTcpClient_tests.cs)  \n\n## ModBusRtu读写操作\n```\n//实例化客户端 - [COM端口名称,波特率,数据位,停止位,奇偶校验]\nModBusRtuClient client = new ModBusRtuClient(\"COM3\", 9600, 8, StopBits.One, Parity.None);\n\n//其他读写操作和ModBusTcpClient的读写操作一致\n```\n\n## ModBusAscii读写操作\n```\n//实例化客户端 - [COM端口名称,波特率,数据位,停止位,奇偶校验]\nModbusAsciiClient client = new ModbusAsciiClient(\"COM3\", 9600, 8, StopBits.One, Parity.None);\n\n//其他读写操作和ModBusTcpClient的读写操作一致\n```\n\n## ModbusRtuOverTcp读写操作\n```\n//串口透传 即:用Tcp的方式发送Rtu格式报文\n\n//实例化客户端 - IP、端口、超时时间、大小端设置\nModbusRtuOverTcpClient client = new ModbusRtuOverTcpClient(\"127.0.0.1\", 502, 1500, EndianFormat.ABCD);\n\n//其他读写操作和ModBusTcpClient的读写操作一致\n```\n\n## SiemensClient(西门子)读写操作\n```\n//1、实例化客户端 - 输入型号、IP和端口\n//其他型号：SiemensVersion.S7_200、SiemensVersion.S7_300、SiemensVersion.S7_400、SiemensVersion.S7_1200、SiemensVersion.S7_1500\nSiemensClient client = new SiemensClient(SiemensVersion.S7_200Smart, \"127.0.0.1\",102);\n\n//2、写操作\nclient.Write(\"Q1.3\", true);\nclient.Write(\"V2205\", (short)11);\nclient.Write(\"V2209\", 33);\nclient.Write(\"V2305\", \"orderCode\");             //写入字符串\n\n//3、读操作\nvar value1 = client.ReadBoolean(\"Q1.3\").Value;\nvar value2 = client.ReadInt16(\"V2205\").Value;\nvar value3 = client.ReadInt32(\"V2209\").Value;\nvar value4 = client.ReadString(\"V2305\").Value; //读取字符串\n\n//4、如果没有主动Open，则会每次读写操作的时候自动打开自动和关闭连接，这样会使读写效率大大减低。所以建议手动Open和Close。\nclient.Open();\n\n//5、读写操作都会返回操作结果对象Result\nvar result = client.ReadInt16(\"V2205\");\n//5.1 读取是否成功（true或false）\nvar isSucceed = result.IsSucceed;\n//5.2 读取失败的异常信息\nvar errMsg = result.Err;\n//5.3 读取操作实际发送的请求报文\nvar requst  = result.Requst;\n//5.4 读取操作服务端响应的报文\nvar response = result.Response;\n//5.5 读取到的值\nvar value4 = result.Value;\n\n```\n\n## 注意：关于Siemens的PLC地址\n```\nVB263、VW263、VD263中的B、W、D分别表示：byte型(8位)、word型(16位)、doubleword型(32位)。\n\n在本组件传入地址的时候不需要带数据类型，直接使用对应方法读取对应类型即可，如：\nVB263       - client.ReadByte(\"V263\")\nVD263       - client.ReadFloat(\"V263\")\nVD263       - client.ReadInt32(\"V263\")\nDB108.DBW4  - client.ReadUInt16(\"DB108.4\")\nDB1.DBX0.0  - client.ReadBoolean(\"DB1.0.0\")\nDB1.DBD0    - client.ReadFloat(\"DB1.0\")\n```\n|C#数据类型 | smart200 | 1200/1500/300\n|---|---|---\n|bit | V1.0 | DB1.DBX1.0\n|byte | VB1 | DB1.DBB1\n|shor <br> ushort  | VW2 | DB1.DBW2\n|int <br> uint <br> float | VD4 | DB1.DBD4\n\n## SiemensClient最佳实践\n```\n1、什么时候不要主动Open\n西门子plc一般最多允许8个长连接。所以当连接数不够用的时候或者做测试的时候就不要主动Open，这样组件会自动Open并即时Close。\n\n2、什么时候主动Open\n当长连接数量还够用，且想要提升读写性能。\n\n3、除了主动Open连接，还可以通过批量读写，大幅提升读写性能。\n//批量读取\nDictionary<string, DataTypeEnum> addresses = new Dictionary<string, DataTypeEnum>();\naddresses.Add(\"DB4.24\", DataTypeEnum.Float);\naddresses.Add(\"DB1.434.0\", DataTypeEnum.Bool);\naddresses.Add(\"V4109\", DataTypeEnum.Byte);\n...\nvar result = client.BatchRead(addresses);\n\n//批量写入\nDictionary<string, object> addresses = new Dictionary<string, object>();\naddresses.Add(\"DB4.24\", (float)1);\naddresses.Add(\"DB4.0\", (float)2);\naddresses.Add(\"DB1.434.0\", true);\n...\nvar result = client.BatchWrite(addresses);\n\n4、【注意】写入数据的时候需要明确数据类型\nclient.Write(\"DB4.12\", 9);          //写入的是int类型\nclient.Write(\"DB4.12\", (float)9);   //写入的是float类型\n\n5、SiemensClient是线程安全类\n由于plc长连接有限，SiemensClient被设计成线程安全类。可以把SiemensClient设置成单例，在多个线程之间使用SiemensClient的实例读写操作plc。\n```\n\n## MitsubishiClient(三菱)读写操作\n```\n//1、实例化客户端 - 输入正确的IP和端口\nMitsubishiClient client = new MitsubishiClient(MitsubishiVersion.Qna_3E, \"127.0.0.1\",6000);\n\n//2、写操作\nclient.Write(\"M100\", true);\nclient.Write(\"D200\", (short)11);\nclient.Write(\"D210\", 33);\n\n//3、读操作\nvar value1 = client.ReadBoolean(\"M100\").Value;\nvar value2 = client.ReadInt16(\"D200\").Value;\nvar value3 = client.ReadInt32(\"D210\").Value;\n\n//4、如果没有主动Open，则会每次读写操作的时候自动打开自动和关闭连接，这样会使读写效率大大减低。所以建议手动Open和Close。\nclient.Open();\n\n//5、读写操作都会返回操作结果对象Result\nvar result = client.ReadInt16(\"D210\");\n//5.1 读取是否成功（true或false）\nvar isSucceed = result.IsSucceed;\n//5.2 读取失败的异常信息\nvar errMsg = result.Err;\n//5.3 读取操作实际发送的请求报文\nvar requst  = result.Requst;\n//5.4 读取操作服务端响应的报文\nvar response = result.Response;\n//5.5 读取到的值\nvar value4 = result.Value;\n```\n\n## OmronFinsClient(欧姆龙)读写操作\n```\n//1、实例化客户端 - 输入正确的IP和端口\nOmronFinsClient client = new OmronFinsClient(\"127.0.0.1\",6000);\n\n//2、写操作\nclient.Write(\"M100\", true);\nclient.Write(\"D200\", (short)11);\nclient.Write(\"D210\", 33);\n\n//3、读操作\nvar value1 = client.ReadBoolean(\"M100\").Value;\nvar value2 = client.ReadInt16(\"D200\").Value;\nvar value3 = client.ReadInt32(\"D210\").Value;\n\n//4、如果没有主动Open，则会每次读写操作的时候自动打开自动和关闭连接，这样会使读写效率大大减低。所以建议手动Open和Close。\nclient.Open();\n\n//5、读写操作都会返回操作结果对象Result\nvar result = client.ReadInt16(\"D210\");\n//5.1 读取是否成功（true或false）\nvar isSucceed = result.IsSucceed;\n//5.2 读取失败的异常信息\nvar errMsg = result.Err;\n//5.3 读取操作实际发送的请求报文\nvar requst  = result.Requst;\n//5.4 读取操作服务端响应的报文\nvar response = result.Response;\n//5.5 读取到的值\nvar value4 = result.Value;\n```\n\n## AllenBradleyClient(罗克韦尔)读写操作\n```\n//1、实例化客户端 - 输入正确的IP和端口\nAllenBradleyClient client = new AllenBradleyClient(\"127.0.0.1\",44818);\n\n//2、写操作 \nclient.Write(\"A1\", (short)11); \n\n//3、读操作\nvar value = client.ReadInt16(\"A1\").Value;\n\n//4、如果没有主动Open，则会每次读写操作的时候自动打开自动和关闭连接，这样会使读写效率大大减低。所以建议手动Open和Close。\nclient.Open();\n\n//5、读写操作都会返回操作结果对象Result\nvar result = client.ReadInt16(\"A1\");\n//5.1 读取是否成功（true或false）\nvar isSucceed = result.IsSucceed;\n//5.2 读取失败的异常信息\nvar errMsg = result.Err;\n//5.3 读取操作实际发送的请求报文\nvar requst  = result.Requst;\n//5.4 读取操作服务端响应的报文\nvar response = result.Response;\n//5.5 读取到的值\nvar value4 = result.Value;\n```\n\n# 基于IoTClient库的一些项目\n\n## IoTClient Tool 桌面程序工具（开源）\n所属个人：[农码一生](https://www.cnblogs.com/zhaopei)  \n\n### [IoTClient Tool](https://github.com/zhaopeiym/IoTClient.Examples/releases/download/1.0.3/IoTClient.exe) 桌面程序工具，[开源地址](https://github.com/zhaopeiym/IoTClient.Examples)。     \n\n- 1、可用来测试PLC和相关协议的通信 \n- 2、可作为IoTClient库使用例子。\n\n![image](https://user-images.githubusercontent.com/5820324/115138587-b7bebc80-a05f-11eb-9f7c-720a88bdca6e.png)  \n\n![image](https://user-images.githubusercontent.com/5820324/115138592-bbeada00-a05f-11eb-9fc4-4b15a426cdb3.png)    \n\n![image](https://user-images.githubusercontent.com/5820324/115138594-bd1c0700-a05f-11eb-8d4b-34a567669e3d.png)\n\n![image](https://user-images.githubusercontent.com/5820324/115138596-bee5ca80-a05f-11eb-9878-9b05a4cfbc0b.png)  \n\n![image](https://user-images.githubusercontent.com/5820324/115138597-c016f780-a05f-11eb-9d09-298a54f55266.png)  \n\n![image](https://user-images.githubusercontent.com/5820324/115138600-c2795180-a05f-11eb-92b0-1a1d278c20c8.png)  \n\n![image](https://user-images.githubusercontent.com/5820324/115138602-c3aa7e80-a05f-11eb-9cd7-be876735a26f.png)  \n\n![image](https://user-images.githubusercontent.com/5820324/115138603-c5744200-a05f-11eb-9cdb-a222aa9b7b25.png)  \n\n![image](https://user-images.githubusercontent.com/5820324/115138606-c73e0580-a05f-11eb-9ca1-5ece1bae8e71.png)  \n\n![image](https://user-images.githubusercontent.com/5820324/115138607-c86f3280-a05f-11eb-83f1-d1706331406a.png)  \n\n## iotgateway（开源）\n所属个人：[iioter](https://gitee.com/iioter)  \n\n### [iotgateway](https://gitee.com/iioter/iotgateway)\n![image](https://user-images.githubusercontent.com/29589505/147056511-14611d19-8498-4a3c-bd67-3749ab75462f.gif)\n\n\n## 能源管理系统（商用）\n所属公司：[擎呐科技](https://qingnakeji.com)   \n\n### 能源管理-现场-单项目\n![image](https://user-images.githubusercontent.com/5820324/117001443-f10c5300-ad14-11eb-8597-bcc6e573c542.png)  \n![image](https://user-images.githubusercontent.com/5820324/117001444-f1a4e980-ad14-11eb-80ea-0972211e46a1.png)   \n\n### 能源管理-云端-多项目\n![image](https://user-images.githubusercontent.com/5820324/117001447-f23d8000-ad14-11eb-9771-1854b13bef4b.png)  \n![image](https://user-images.githubusercontent.com/5820324/117001451-f2d61680-ad14-11eb-9507-bf4123e5cbe8.png)  \n![image](https://user-images.githubusercontent.com/5820324/117001454-f36ead00-ad14-11eb-8ea1-e993298eca9b.png)  \n![image](https://user-images.githubusercontent.com/5820324/117001460-f49fda00-ad14-11eb-8c75-eb88a24983b6.png)  \n![image](https://user-images.githubusercontent.com/5820324/117001461-f5d10700-ad14-11eb-9d82-d73a7347ad32.png)  \n![image](https://user-images.githubusercontent.com/5820324/117001464-f6699d80-ad14-11eb-8810-50b20f8954ae.png)  \n![image](https://img2020.cnblogs.com/blog/208266/202106/208266-20210630094808579-2089270828.svg)   \n\n### 能源管理-移动端\n![image](https://user-images.githubusercontent.com/5820324/116964170-796f0180-acdd-11eb-9514-fd9a05c15eae.png)![image](https://user-images.githubusercontent.com/5820324/116964172-7a079800-acdd-11eb-91ac-13c1a321145d.png)![image](https://user-images.githubusercontent.com/5820324/116964174-7aa02e80-acdd-11eb-8051-158f13ed2993.png)![image](https://user-images.githubusercontent.com/5820324/116964175-7b38c500-acdd-11eb-80b4-97827ee03374.png)![image](https://user-images.githubusercontent.com/5820324/116964177-7c69f200-acdd-11eb-94b8-ddbf5081ddaf.png)![image](https://user-images.githubusercontent.com/5820324/116964179-7d028880-acdd-11eb-95c6-601e235e3b6b.png)![image](https://user-images.githubusercontent.com/5820324/116964181-7d9b1f00-acdd-11eb-9914-911167e0af05.png)\n\n## 海底捞末端控制（商用）\n所属公司：[擎呐科技](https://qingnakeji.com)   \n\n### 海底捞末端控制-web\n![image](https://user-images.githubusercontent.com/5820324/117001939-87d90f80-ad15-11eb-8848-7a4956ba1ce9.png)  \n![image](https://user-images.githubusercontent.com/5820324/117001942-87d90f80-ad15-11eb-85b2-778cadaf85ad.png)  \n![image](https://user-images.githubusercontent.com/5820324/117001947-890a3c80-ad15-11eb-9e28-57e8b05cd04c.png)  \n![image](https://user-images.githubusercontent.com/5820324/117001949-89a2d300-ad15-11eb-9226-2e2683e2cc7f.png)  \n\n### 海底捞末端控制-移动端\n![image](https://user-images.githubusercontent.com/5820324/116964517-5002a580-acde-11eb-9bfb-c859a57307c7.png)![image](https://user-images.githubusercontent.com/5820324/116964519-509b3c00-acde-11eb-8245-573ac3fa7f16.png)![image](https://user-images.githubusercontent.com/5820324/116964521-5133d280-acde-11eb-85de-b09dde1ca41e.png)![image](https://user-images.githubusercontent.com/5820324/116964525-51cc6900-acde-11eb-924f-f3320e4a179c.png)\n\n## 越邦智能分拣系统（商用）\n所属公司：[越邦科技](http://www.yuebon.com)  \n![image](https://user-images.githubusercontent.com/5820324/124534498-fa19bd80-de46-11eb-9c6d-89c6e7323ed5.jpg)  \n![image](https://user-images.githubusercontent.com/5820324/124534506-fdad4480-de46-11eb-983c-b074b72e0922.jpg)  \n\n## 电表监控系统（商用）\n所属公司：[哈工大机器人南昌智能制造研究院](http://www.hrgrobotics.cn)  \n![image](https://user-images.githubusercontent.com/5820324/124694128-3f0b2600-df13-11eb-9266-fa7d2ef7de11.png)  \n![image](https://user-images.githubusercontent.com/5820324/124694129-403c5300-df13-11eb-8452-12f73260a7a9.png)  \n\n## 人造板行业生产管理软件（商用）\n所属公司：广州赛志科技有限公司  \n![image](https://user-images.githubusercontent.com/5820324/127763049-3018fefd-d233-41de-8c8e-e02e03776690.png)  \n![image](https://user-images.githubusercontent.com/5820324/127763052-dec0a2e8-bb9f-421f-a72b-08bb5ac50709.png)  \n![image](https://user-images.githubusercontent.com/5820324/127763055-068ec3a4-4959-47fd-928b-6bfa12ef7ed7.png)  \n\n# 友情链接\n\n## iotgateway\n开源地址：  \nhttps://gitee.com/iioter/iotgateway  \n\n概述：  \n基于.net5的跨平台物联网网关。通过可视化配置，轻松的连接到你的任何设备和系统(如PLC、扫码枪、CNC、数据库、串口设备、上位机、OPC Server、OPC UA Server、Mqtt Server等)，从而与 Thingsboard、IoTSharp或您自己的物联网平台进行双向数据通讯。提供简单的驱动开发接口；当然也可以进行边缘计算。  "
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.0927734375,
          "content": "<h1 align=\"center\">\nIoTClient \n</h1>\n\n## English | [中文文档](README-zh_CN.md)\n\n[![image](https://img.shields.io/nuget/v/IoTClient.svg)](https://www.nuget.org/packages/IoTClient/) [![image](https://img.shields.io/nuget/dt/IoTClient.svg)](https://www.nuget.org/packages/IoTClient/) ![image](https://img.shields.io/github/license/alienwow/SnowLeopard.svg)\n\n- This is an IoT device communication protocol realization client, which will include mainstream PLC communication reading, ModBus protocol, Bacnet protocol and other common industrial communication protocols.\n- This component is based on .NET Standard 2.0 and can be used for cross-platform development of .Net, such as Windows, Linux and even run on Raspberry Pi.\n- This component is open source and free for life, and adopts the most relaxed MIT protocol. You can also modify and use it for commercial use (commercial use please evaluate and test).\n- Development tools：Visual Studio 2019 \n- QQ exchange group：[700324594](https://jq.qq.com/?_wv=1027&k=tIRmmGbt)  \n\n## Document directory\n<!-- TOC -->\n    \n- [Instructions for use](#instructions-for-use)\n    - [Reference component](#reference-component)\n    - [ModBusTcp read and write operations](#modbustcp-read-and-write-operations)\n    - [ModBusRtu read and write operations](#modbusrtu-read-and-write-operations)\n    - [ModBusAscii read and write operations](#modbusascii-read-and-write-operations)\n    - [ModbusRtuOverTcp read and write operations](#modbusrtuovertcp-read-and-write-operations)\n    - [SiemensClient (Siemens) read and write operations](#siemensclient-siemens-read-and-write-operations)\n    - [Note: About Siemens PLC address](#note-about-siemens-plc-address)\n    - [SiemensClient best practices](#siemensclient-best-practices)\n    - [MitsubishiClient (Mitsubishi) read and write operations](#mitsubishiclient-mitsubishi-read-and-write-operations)\n    - [OmronFinsClient (Omron) read and write operations](#omronfinsclient-omron-read-and-write-operations)\n    - [AllenBradleyClient read and write operations](#allenbradleyclient-read-and-write-operations)\n- [Some projects based on IoTClient library](#some-projects-based-on-iotclient-library)\n    - [IoTClient Tool Desktop program tool (open source)](#iotclient-tool-desktop-program-tool-open-source)        \n    - [Energy Management System (Commercial)](#energy-management-system-commercial)\n        - [能源管理-现场-单项目](#%E8%83%BD%E6%BA%90%E7%AE%A1%E7%90%86-%E7%8E%B0%E5%9C%BA-%E5%8D%95%E9%A1%B9%E7%9B%AE)\n        - [能源管理-云端-多项目](#%E8%83%BD%E6%BA%90%E7%AE%A1%E7%90%86-%E4%BA%91%E7%AB%AF-%E5%A4%9A%E9%A1%B9%E7%9B%AE)\n        - [能源管理-移动端](#%E8%83%BD%E6%BA%90%E7%AE%A1%E7%90%86-%E7%A7%BB%E5%8A%A8%E7%AB%AF)\n    - [Haidilao terminal control (commercial)](#haidilao-terminal-control-commercial)\n        - [海底捞末端控制-web](#%E6%B5%B7%E5%BA%95%E6%8D%9E%E6%9C%AB%E7%AB%AF%E6%8E%A7%E5%88%B6-web)\n        - [海底捞末端控制-移动端](#%E6%B5%B7%E5%BA%95%E6%8D%9E%E6%9C%AB%E7%AB%AF%E6%8E%A7%E5%88%B6-%E7%A7%BB%E5%8A%A8%E7%AB%AF)\n\n<!-- /TOC -->\n\n# Instructions for use\n\n## Reference component\n[Nuget installation](https://www.nuget.org/packages/IoTClient/) ```Install-Package IoTClient ```  \nOr graphical installation   \n![image](https://user-images.githubusercontent.com/5820324/68722366-2fc5bf00-05f0-11ea-8282-f2b0a58a9f9d.png)  \n\n## ModBusTcp read and write operations\n```\n//1、Instantiate the client-enter the correct IP and port\nModBusTcpClient client = new ModBusTcpClient(\"127.0.0.1\", 502);\n\n//2、Write operation-parameters are: address, value, station number, function code\nclient.Write(\"4\", (short)33, 2, 16);\n\n//2.1、[Note] When writing data, you need to clarify the data type\nclient.Write(\"0\", (short)33, 2, 16);    //Write short type value\nclient.Write(\"4\", (ushort)33, 2, 16);   //Write ushort type value\nclient.Write(\"8\", (int)33, 2, 16);      //Write int type value\nclient.Write(\"12\", (uint)33, 2, 16);    //Write uint type value\nclient.Write(\"16\", (long)33, 2, 16);    //Write long type value\nclient.Write(\"20\", (ulong)33, 2, 16);   //Write ulong type value\nclient.Write(\"24\", (float)33, 2, 16);   //Write float type value\nclient.Write(\"28\", (double)33, 2, 16);  //Write double type value\nclient.Write(\"32\", true, 2, 5);         //Write Coil type value\nclient.Write(\"100\", \"orderCode\", stationNumber);  //Write string\n\n//3、Read operation-the parameters are: address, station number, function code\nvar value = client.ReadInt16(\"4\", 2, 3).Value;\n\n//3.1、Other types of data reading\nclient.ReadInt16(\"0\", stationNumber, 3);    //short type data read\nclient.ReadUInt16(\"4\", stationNumber, 3);   //ushort type data read\nclient.ReadInt32(\"8\", stationNumber, 3);    //int type data read\nclient.ReadUInt32(\"12\", stationNumber, 3);  //uint type data read\nclient.ReadInt64(\"16\", stationNumber, 3);   //long type data read\nclient.ReadUInt64(\"20\", stationNumber, 3);  //ulong type data read\nclient.ReadFloat(\"24\", stationNumber, 3);   //float type data read\nclient.ReadDouble(\"28\", stationNumber, 3);  //double type data read\nclient.ReadCoil(\"32\", stationNumber, 1);    //Coil type data read\nclient.ReadDiscrete(\"32\", stationNumber, 2);//Discrete type data read\nclient.ReadString(\"100\", stationNumber,readLength:10); //Read string\n\n//4、If there is no active Open, it will automatically open and close the connection every time you read and write operations, which will greatly reduce the efficiency of reading and writing. So it is recommended to open and close manually.\nclient.Open();\n\n//5、Read and write operations will return the operation result object Result\nvar result = client.ReadInt16(\"4\", 2, 3);\n//5.1 Whether the reading is successful (true or false)\nvar isSucceed = result.IsSucceed;\n//5.2 Exception information for failed reading\nvar errMsg = result.Err;\n//5.3 Read the request message actually sent by the operation\nvar requst  = result.Requst;\n//5.4 Read the response message from the server\nvar response = result.Response;\n//5.5 Read value\nvar value3 = result.Value;\n\n//6、Batch read\nvar list = new List<ModBusInput>();\nlist.Add(new ModBusInput()\n{\n    Address = \"2\",\n    DataType = DataTypeEnum.Int16,\n    FunctionCode = 3,\n    StationNumber = 1\n});\nlist.Add(new ModBusInput()\n{\n    Address = \"2\",\n    DataType = DataTypeEnum.Int16,\n    FunctionCode = 4,\n    StationNumber = 1\n});\nlist.Add(new ModBusInput()\n{\n    Address = \"199\",\n    DataType = DataTypeEnum.Int16,\n    FunctionCode = 3,\n    StationNumber = 1\n});\nvar result = client.BatchRead(list);\n\n//7、Other parameters of the constructor\n//IP, port, timeout time, big and small end settings\nModBusTcpClient client = new ModBusTcpClient(\"127.0.0.1\", 502, 1500, EndianFormat.ABCD);\n``` \nFor more usage of ModBusTcp, please refer to [Unit Test](https://github.com/zhaopeiym/IoTClient/blob/master/IoTClient.Tests/Modbus_Tests/ModBusTcpClient_tests.cs)  \n\n## ModBusRtu read and write operations\n```\n//Instantiate the client-[COM port name, baud rate, data bits, stop bits, parity]\nModBusRtuClient client = new ModBusRtuClient(\"COM3\", 9600, 8, StopBits.One, Parity.None);\n\n//Other read and write operations are the same as ModBusTcpClient's read and write operations\n```\n\n## ModBusAscii read and write operations\n```\n//Instantiate the client-[COM port name, baud rate, data bits, stop bits, parity]\nModbusAsciiClient client = new ModbusAsciiClient(\"COM3\", 9600, 8, StopBits.One, Parity.None);\n\n//Other read and write operations are the same as ModBusTcpClient's read and write operations\n```\n\n## ModbusRtuOverTcp read and write operations\n```\n//Serial port transparent transmission i.e.: send Rtu format messages in Tcp mode\n\n//Instantiate the client-IP, port, timeout, big and small end settings\nModbusRtuOverTcpClient client = new ModbusRtuOverTcpClient(\"127.0.0.1\", 502, 1500, EndianFormat.ABCD);\n\n//Other read and write operations are the same as ModBusTcpClient's read and write operations\n```\n\n## SiemensClient (Siemens) read and write operations\n```\n//1、Instantiate the client-enter the model, IP and port\n//Other models：SiemensVersion.S7_200、SiemensVersion.S7_300、SiemensVersion.S7_400、SiemensVersion.S7_1200、SiemensVersion.S7_1500\nSiemensClient client = new SiemensClient(SiemensVersion.S7_200Smart, \"127.0.0.1\",102);\n\n//2、Write operation\nclient.Write(\"Q1.3\", true);\nclient.Write(\"V2205\", (short)11);\nclient.Write(\"V2209\", 33);\n\n//3、Read operation\nvar value1 = client.ReadBoolean(\"Q1.3\").Value;\nvar value2 = client.ReadInt16(\"V2205\").Value;\nvar value3 = client.ReadInt32(\"V2209\").Value;\n\n//4、If there is no active Open, it will automatically open and close the connection every time you read and write operations, which will greatly reduce the efficiency of reading and writing. So it is recommended to open and close manually.\nclient.Open();\n\n//5、Read and write operations will return the operation result object Result\nvar result = client.ReadInt16(\"V2205\");\n//5.1 Whether the reading is successful (true or false)\nvar isSucceed = result.IsSucceed;\n//5.2 Exception information for failed reading\nvar errMsg = result.Err;\n//5.3 Read the request message actually sent by the operation\nvar requst  = result.Requst;\n//5.4 Read the response message from the server\nvar response = result.Response;\n//5.5 Read value\nvar value4 = result.Value;\n\n```\n\n## Note: About Siemens PLC address\n```\nVB263、VW263、VD263中的B、W、D分别表示：byte型(8位)、word型(16位)、doubleword型(32位)。\n\nWhen this component passes in the address, there is no need to carry the data type, just use the corresponding method to read the corresponding type, such as:\nVB263       - client.ReadByte(\"V263\")\nVD263       - client.ReadFloat(\"V263\")\nVD263       - client.ReadInt32(\"V263\")\nDB108.DBW4  - client.ReadUInt16(\"DB108.4\")\nDB1.DBX0.0  - client.ReadBoolean(\"DB1.0.0\")\nDB1.DBD0    - client.ReadFloat(\"DB1.0\")\n```\n|C# data type | smart200 | 1200/1500/300\n|---|---|---\n|bit | V1.0 | DB1.DBX1.0\n|byte | VB1 | DB1.DBB1\n|shor <br> ushort  | VW2 | DB1.DBW2\n|int <br> uint <br> float | VD4 | DB1.DBD4\n\n## SiemensClient best practices\n```\n1、When not to take the initiative to open\nSiemens plc generally allows up to 8 long connections. So when the number of connections is not enough or when doing testing, do not take the initiative to open, so that the component will automatically open and close immediately.\n\n2、When to take the initiative to open\nWhen the number of long connections is enough, and you want to improve the read and write performance.\n\n3、In addition to active Open connections, batch read and write can also greatly improve read and write performance.\n//Batch read\nDictionary<string, DataTypeEnum> addresses = new Dictionary<string, DataTypeEnum>();\naddresses.Add(\"DB4.24\", DataTypeEnum.Float);\naddresses.Add(\"DB1.434.0\", DataTypeEnum.Bool);\naddresses.Add(\"V4109\", DataTypeEnum.Byte);\n...\nvar result = client.BatchRead(addresses);\n\n//Batch write\nDictionary<string, object> addresses = new Dictionary<string, object>();\naddresses.Add(\"DB4.24\", (float)1);\naddresses.Add(\"DB4.0\", (float)2);\naddresses.Add(\"DB1.434.0\", true);\n...\nvar result = client.BatchWrite(addresses);\n\n4、[Note] When writing data, you need to clarify the data type\nclient.Write(\"DB4.12\", 9);          //What is written is of type int\nclient.Write(\"DB4.12\", (float)9);   //What is written is a float type\n\n5、SiemensClient is a thread safe class\nDue to limited long PLC connections, SiemensClient is designed as a thread-safe class. You can set SiemensClient as a singleton, and use the instance of SiemensClient to read and write PLC between multiple threads.\n```\n\n## MitsubishiClient (Mitsubishi) read and write operations\n```\n//1、Instantiate the client-enter the correct IP and port\nMitsubishiClient client = new MitsubishiClient(MitsubishiVersion.Qna_3E, \"127.0.0.1\",6000);\n\n//2、Write operation\nclient.Write(\"M100\", true);\nclient.Write(\"D200\", (short)11);\nclient.Write(\"D210\", 33);\n\n//3、Read operation\nvar value1 = client.ReadBoolean(\"M100\").Value;\nvar value2 = client.ReadInt16(\"D200\").Value;\nvar value3 = client.ReadInt32(\"D210\").Value;\n\n//4、If there is no active Open, it will automatically open and close the connection every time you read and write operations, which will greatly reduce the efficiency of reading and writing. So it is recommended to open and close manually.\nclient.Open();\n\n//5、Read and write operations will return the operation result object Result\nvar result = client.ReadInt16(\"D210\");\n//5.1 Whether the reading is successful (true or false)\nvar isSucceed = result.IsSucceed;\n//5.2 Exception information for failed reading\nvar errMsg = result.Err;\n//5.3 Read the request message actually sent by the operation\nvar requst  = result.Requst;\n//5.4 Read the response message from the server\nvar response = result.Response;\n//5.5 Read value\nvar value4 = result.Value;\n```\n\n## OmronFinsClient (Omron) read and write operations\n```\n//1、Instantiate the client-enter the correct IP and port\nOmronFinsClient client = new OmronFinsClient(\"127.0.0.1\",6000);\n\n//2、Write operation\nclient.Write(\"M100\", true);\nclient.Write(\"D200\", (short)11);\nclient.Write(\"D210\", 33);\n\n//3、Read operation\nvar value1 = client.ReadBoolean(\"M100\").Value;\nvar value2 = client.ReadInt16(\"D200\").Value;\nvar value3 = client.ReadInt32(\"D210\").Value;\n\n//4、If there is no active Open, it will automatically open and close the connection every time you read and write operations, which will greatly reduce the efficiency of reading and writing. So it is recommended to open and close manually.\nclient.Open();\n\n//5、Read and write operations will return the operation result object Result\nvar result = client.ReadInt16(\"D210\");\n//5.1 Whether the reading is successful (true or false)\nvar isSucceed = result.IsSucceed;\n//5.2 Exception information for failed reading\nvar errMsg = result.Err;\n//5.3 Read the request message actually sent by the operation\nvar requst  = result.Requst;\n//5.4 Read the response message from the server\nvar response = result.Response;\n//5.5 Read value\nvar value4 = result.Value;\n```\n\n## AllenBradleyClient read and write operations\n```\n//1、Instantiate the client-enter the correct IP and port\nAllenBradleyClient client = new AllenBradleyClient(\"127.0.0.1\",44818);\n\n//2、Write operation \nclient.Write(\"A1\", (short)11); \n\n//3、Read operation\nvar value = client.ReadInt16(\"A1\").Value;\n\n//4、If there is no active Open, it will automatically open and close the connection every time you read and write operations, which will greatly reduce the efficiency of reading and writing. So it is recommended to open and close manually.\nclient.Open();\n\n//5、Read and write operations will return the operation result object Result\nvar result = client.ReadInt16(\"A1\");\n//5.1 Whether the reading is successful (true or false)\nvar isSucceed = result.IsSucceed;\n//5.2 Exception information for failed reading\nvar errMsg = result.Err;\n//5.3 Read the request message actually sent by the operation\nvar requst  = result.Requst;\n//5.4 Read the response message from the server\nvar response = result.Response;\n//5.5 Read value\nvar value4 = result.Value;\n```\n\n# Some projects based on IoTClient library\n\n## IoTClient Tool Desktop program tool (open source)\n\n### [IoTClient Tool](https://github.com/zhaopeiym/IoTClient.Examples/releases/download/1.0.3/IoTClient.exe) 桌面程序工具，[开源地址](https://github.com/zhaopeiym/IoTClient.Examples)。     \n\n- 1、可用来测试PLC和相关协议的通信 \n- 2、可作为IoTClient库使用例子。\n\n![image](https://user-images.githubusercontent.com/5820324/115138587-b7bebc80-a05f-11eb-9f7c-720a88bdca6e.png)  \n\n![image](https://user-images.githubusercontent.com/5820324/115138592-bbeada00-a05f-11eb-9fc4-4b15a426cdb3.png)    \n\n![image](https://user-images.githubusercontent.com/5820324/115138594-bd1c0700-a05f-11eb-8d4b-34a567669e3d.png)\n\n![image](https://user-images.githubusercontent.com/5820324/115138596-bee5ca80-a05f-11eb-9878-9b05a4cfbc0b.png)  \n\n![image](https://user-images.githubusercontent.com/5820324/115138597-c016f780-a05f-11eb-9d09-298a54f55266.png)  \n\n![image](https://user-images.githubusercontent.com/5820324/115138600-c2795180-a05f-11eb-92b0-1a1d278c20c8.png)  \n\n![image](https://user-images.githubusercontent.com/5820324/115138602-c3aa7e80-a05f-11eb-9cd7-be876735a26f.png)  \n\n![image](https://user-images.githubusercontent.com/5820324/115138603-c5744200-a05f-11eb-9cdb-a222aa9b7b25.png)  \n\n![image](https://user-images.githubusercontent.com/5820324/115138606-c73e0580-a05f-11eb-9ca1-5ece1bae8e71.png)  \n\n![image](https://user-images.githubusercontent.com/5820324/115138607-c86f3280-a05f-11eb-83f1-d1706331406a.png)  \n\n## Energy Management System (Commercial) \n\n### 能源管理-现场-单项目\n![image](https://user-images.githubusercontent.com/5820324/117001443-f10c5300-ad14-11eb-8597-bcc6e573c542.png)  \n![image](https://user-images.githubusercontent.com/5820324/117001444-f1a4e980-ad14-11eb-80ea-0972211e46a1.png)   \n\n### 能源管理-云端-多项目\n![image](https://user-images.githubusercontent.com/5820324/117001447-f23d8000-ad14-11eb-9771-1854b13bef4b.png)  \n![image](https://user-images.githubusercontent.com/5820324/117001451-f2d61680-ad14-11eb-9507-bf4123e5cbe8.png)  \n![image](https://user-images.githubusercontent.com/5820324/117001454-f36ead00-ad14-11eb-8ea1-e993298eca9b.png)  \n![image](https://user-images.githubusercontent.com/5820324/117001460-f49fda00-ad14-11eb-8c75-eb88a24983b6.png)  \n![image](https://user-images.githubusercontent.com/5820324/117001461-f5d10700-ad14-11eb-9d82-d73a7347ad32.png)  \n![image](https://user-images.githubusercontent.com/5820324/117001464-f6699d80-ad14-11eb-8810-50b20f8954ae.png)  \n![image](https://img2020.cnblogs.com/blog/208266/202106/208266-20210630094808579-2089270828.svg)  \n\n### 能源管理-移动端\n![image](https://user-images.githubusercontent.com/5820324/116964170-796f0180-acdd-11eb-9514-fd9a05c15eae.png)![image](https://user-images.githubusercontent.com/5820324/116964172-7a079800-acdd-11eb-91ac-13c1a321145d.png)![image](https://user-images.githubusercontent.com/5820324/116964174-7aa02e80-acdd-11eb-8051-158f13ed2993.png)![image](https://user-images.githubusercontent.com/5820324/116964175-7b38c500-acdd-11eb-80b4-97827ee03374.png)![image](https://user-images.githubusercontent.com/5820324/116964177-7c69f200-acdd-11eb-94b8-ddbf5081ddaf.png)![image](https://user-images.githubusercontent.com/5820324/116964179-7d028880-acdd-11eb-95c6-601e235e3b6b.png)![image](https://user-images.githubusercontent.com/5820324/116964181-7d9b1f00-acdd-11eb-9914-911167e0af05.png)\n\n## Haidilao terminal control (commercial)\n\n### 海底捞末端控制-web\n![image](https://user-images.githubusercontent.com/5820324/117001939-87d90f80-ad15-11eb-8848-7a4956ba1ce9.png)  \n![image](https://user-images.githubusercontent.com/5820324/117001942-87d90f80-ad15-11eb-85b2-778cadaf85ad.png)  \n![image](https://user-images.githubusercontent.com/5820324/117001947-890a3c80-ad15-11eb-9e28-57e8b05cd04c.png)  \n![image](https://user-images.githubusercontent.com/5820324/117001949-89a2d300-ad15-11eb-9226-2e2683e2cc7f.png)  \n\n### 海底捞末端控制-移动端\n![image](https://user-images.githubusercontent.com/5820324/116964517-5002a580-acde-11eb-9bfb-c859a57307c7.png)![image](https://user-images.githubusercontent.com/5820324/116964519-509b3c00-acde-11eb-8245-573ac3fa7f16.png)![image](https://user-images.githubusercontent.com/5820324/116964521-5133d280-acde-11eb-85de-b09dde1ca41e.png)![image](https://user-images.githubusercontent.com/5820324/116964525-51cc6900-acde-11eb-924f-f3320e4a179c.png)\n"
        }
      ]
    }
  ]
}