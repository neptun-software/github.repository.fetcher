{
  "metadata": {
    "timestamp": 1736711066608,
    "page": 839,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "KirillOsenkov/MSBuildStructuredLog",
      "stars": 1481,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 2.9599609375,
          "content": "# EditorConfig is awesome:http://EditorConfig.org\r\n\r\n# top-most EditorConfig file\r\nroot = true\r\n\r\n# Baseline\r\n[*]\r\ncharset = utf-8\r\nend_of_line = crlf\r\nindent_style = space\r\ntrim_trailing_whitespace = true\r\nmax_line_length = 120\r\n\r\n# MSBuild\r\n[*.{csproj,proj,projitems,shproj,fsproj,target,props}]\r\nindent_style = space\r\nindent_size = 2\r\n\r\n# XML config files\r\n[*.{config,nuspec,resx}]\r\nindent_style = space\r\nindent_size = 2\r\n\r\n# JSON files\r\n[*.json]\r\nindent_style = space\r\nindent_size = 2\r\n\r\n# Dotnet code style settings:\r\n[*.{cs,csx,vb,vbx}]\r\nindent_size = 4\r\ninsert_final_newline = true\r\n\r\n# Sort using and Import directives with System.* appearing first\r\ndotnet_sort_system_directives_first = true\r\n\r\n# CSharp code style settings:\r\n[*.cs]\r\ncharset = utf-8-bom\r\ncsharp_prefer_braces = true:warning\r\ncsharp_indent_block_contents = true\r\ncsharp_indent_braces = false\r\ncsharp_indent_labels = flush_left\r\n\r\n# spaces before parens\r\ncsharp_space_between_method_declaration_name_and_open_parenthesis = false\r\ncsharp_space_between_method_call_name_and_opening_parenthesis = false\r\ncsharp_space_after_keywords_in_control_flow_statements = true\r\n\r\n# Newline settings\r\ncsharp_new_line_before_open_brace = all\r\ncsharp_new_line_before_else = true\r\ncsharp_new_line_before_catch = true\r\ncsharp_new_line_before_finally = true\r\ncsharp_new_line_before_members_in_object_initializers = true\r\ncsharp_new_line_before_members_in_anonymous_types = true\r\n\r\n# Switch indentation\r\ncsharp_indent_case_contents = true\r\ncsharp_indent_switch_labels = true\r\n\r\n# Prefer \"var\" everywhere it's apparent\r\ncsharp_style_var_for_built_in_types = true:suggestion\r\ncsharp_style_var_when_type_is_apparent = true:suggestion\r\ncsharp_style_var_elsewhere = false:suggestion\r\n\r\n# Prefer method-like constructs to have a block body\r\ncsharp_style_expression_bodied_methods = false:none\r\ncsharp_style_expression_bodied_constructors = false:none\r\ncsharp_style_expression_bodied_operators = false:none\r\n\r\n# Prefer property-like constructs to have an expression-body\r\ncsharp_style_expression_bodied_properties = true:none\r\ncsharp_style_expression_bodied_indexers = true:none\r\ncsharp_style_expression_bodied_accessors = true:none\r\n\r\n# Suggest more modern language features when available\r\ncsharp_style_pattern_matching_over_is_with_cast_check = true:suggestion\r\ncsharp_style_pattern_matching_over_as_with_null_check = true:suggestion\r\ncsharp_style_inlined_variable_declaration = true:suggestion\r\ncsharp_style_throw_expression = false:suggestion\r\ncsharp_style_conditional_delegate_call = true:suggestion\r\n\r\n# New line preferences\r\ndotnet_style_allow_multiple_blank_lines_experimental = false:suggestion\r\ndotnet_style_allow_statement_immediately_after_block_experimental = false:suggestion\r\n\r\n# VSTHRD002: Avoid problematic synchronous waits\r\ndotnet_diagnostic.VSTHRD002.severity = none\r\n# VSTHRD103: Call async methods when in an async method\r\ndotnet_diagnostic.VSTHRD103.severity = none\r\n# VSTHRD200: Use \"Async\" suffix for async methods\r\ndotnet_diagnostic.VSTHRD200.severity = none"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2001953125,
          "content": "###############################################################################\r\n# Don't mess with my line endings.\r\n###############################################################################\r\n* -text"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.748046875,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\nbuildlog*.xml\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# Rider\n.idea/\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings \n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Microsoft Azure ApplicationInsights config file\nApplicationInsights.config\n\n# Windows Store app package directory\nAppPackages/\nBundleArtifacts/\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\n\n# FAKE - F# Make\n.fake/\n/NuGet.exe\n\n# Visual Studio Code\n.vscode/\nlaunchSettings.json\n\n*.binlog"
        },
        {
          "name": "BinaryCompatReport.txt",
          "type": "blob",
          "size": 0.548828125,
          "content": "In assembly 'NuGet.Squirrel, Version=3.0.0.0, PublicKeyToken=null': Failed to resolve assembly reference to 'Microsoft.Data.OData, Version=5.6.1.0, PublicKeyToken=31bf3856ad364e35'\r\nIn assembly 'NuGet.Squirrel, Version=3.0.0.0, PublicKeyToken=null': Failed to resolve assembly reference to 'Microsoft.Data.Services.Client, Version=5.6.1.0, PublicKeyToken=31bf3856ad364e35'\r\nIn assembly 'NuGet.Squirrel, Version=3.0.0.0, PublicKeyToken=null': Failed to resolve assembly reference to 'Microsoft.Web.XmlTransform, Version=2.1.0.0, PublicKeyToken=b03f5f7f11d50a3a'\r\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 1.5986328125,
          "content": "<Project>\r\n\r\n  <PropertyGroup Label=\"Output directory\">\r\n    <IsWpfInnerTempProject Condition=\"$(MSBuildProjectName.EndsWith('_wpftmp'))\">true</IsWpfInnerTempProject>\r\n    <BasePathProjectName>$(MSBuildProjectName)</BasePathProjectName>\r\n    <BasePathProjectName Condition=\"'$(IsWpfInnerTempProject)' == 'true'\">$([System.Text.RegularExpressions.Regex]::Replace($(MSBuildProjectName), '_[^_]+_wpftmp', '', System.Text.RegularExpressions.RegexOptions.IgnoreCase))</BasePathProjectName>\r\n    <BaseIntermediateOutputPath>$(MSBuildThisFileDirectory)obj\\$(BasePathProjectName)\\</BaseIntermediateOutputPath>\r\n    <BaseOutputPath>$(MSBuildThisFileDirectory)bin\\$(MSBuildProjectName)\\</BaseOutputPath>\r\n    <BuildToCommonOutputDirectory>true</BuildToCommonOutputDirectory>\r\n    <_FindDependencies>false</_FindDependencies>\r\n    <!--https://github.com/dotnet/sdk/issues/37027-->\r\n    <GenerateAssemblyConfigurationAttribute>false</GenerateAssemblyConfigurationAttribute>\r\n    <GenerateAssemblyInformationalVersionAttribute>false</GenerateAssemblyInformationalVersionAttribute>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Label=\"Common Properties\">\r\n    <SignAssembly Condition=\"'$(SignAssembly)' == ''\">false</SignAssembly>\r\n    <DefineConstants Condition=\"'$(SignAssembly)' == 'true'\">$(DefineConstants);SIGN;</DefineConstants>\r\n    <DelaySign>false</DelaySign>\r\n    <AssemblyOriginatorKeyFile>$(MSBuildThisFileDirectory)\\key.snk</AssemblyOriginatorKeyFile>\r\n    <DebugType Condition=\"$(OS) == 'Windows_NT'\">embedded</DebugType>\r\n    <LangVersion>latest</LangVersion>\r\n    <NoWarn>$(NoWarn);NU1701;CS8632</NoWarn>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n"
        },
        {
          "name": "Directory.Build.rsp",
          "type": "blob",
          "size": 0.0673828125,
          "content": "/nologo\r\n/r\r\n/m\r\n/bl\r\n/verbosity:minimal\r\n/clp:Summary;ForceNoAlign\r\n"
        },
        {
          "name": "Directory.Build.targets",
          "type": "blob",
          "size": 0.0244140625,
          "content": "<Project>\r\n\r\n</Project>\r\n"
        },
        {
          "name": "Directory.Packages.props",
          "type": "blob",
          "size": 3.4677734375,
          "content": "<Project>\r\n  <PropertyGroup>\r\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\r\n    <CentralPackageTransitivePinningEnabled>True</CentralPackageTransitivePinningEnabled>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <AvaloniaVersion>11.1.3</AvaloniaVersion>\r\n    <MSBuildPackageVersion>17.5.0</MSBuildPackageVersion>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageVersion Include=\"AdonisUI\" Version=\"1.17.1\" />\r\n    <PackageVersion Include=\"AdonisUI.ClassicTheme\" Version=\"1.17.1\" />\r\n    <PackageVersion Include=\"AutomaticGraphLayout.Drawing\" Version=\"1.1.12\" />\r\n    <PackageVersion Include=\"AutomaticGraphLayout.WpfGraphControl\" Version=\"1.1.12\" />\r\n    <PackageVersion Include=\"AvalonEdit\" Version=\"6.3.0.90\" />\r\n    <PackageVersion Include=\"Avalonia.AvaloniaEdit\" Version=\"11.1.0\" />\r\n    <PackageVersion Include=\"Avalonia.Desktop\" Version=\"$(AvaloniaVersion)\" />\r\n    <PackageVersion Include=\"Avalonia.Diagnostics\" Version=\"$(AvaloniaVersion)\" />\r\n    <PackageVersion Include=\"Avalonia.Themes.Fluent\" Version=\"$(AvaloniaVersion)\" />\r\n    <PackageVersion Include=\"DiffPlex\" Version=\"1.7.2\" />\r\n    <PackageVersion Include=\"DotUtils.MsBuild.BinlogRedactor.SensitiveDataDetector\" Version=\"0.0.9\" />\r\n    <PackageVersion Include=\"DotUtils.StreamUtils.Sources\" Version=\"0.0.8\" />\r\n    <PackageVersion Include=\"FluentAssertions\" Version=\"6.12.0\" />\r\n    <PackageVersion Include=\"GuiLabs.Language.Xml\" Version=\"1.2.93\" />\r\n    <PackageVersion Include=\"Microsoft.NETFramework.ReferenceAssemblies\" Version=\"1.0.3\" />\r\n    <PackageVersion Include=\"Microsoft.Build\" Version=\"$(MSBuildPackageVersion)\" />\r\n    <PackageVersion Include=\"Microsoft.Build.Framework\" Version=\"$(MSBuildPackageVersion)\" />\r\n    <PackageVersion Include=\"Microsoft.Build.Locator\" Version=\"1.7.8\" />\r\n    <PackageVersion Include=\"Microsoft.Build.Tasks.Core\" Version=\"$(MSBuildPackageVersion)\" />\r\n    <PackageVersion Include=\"Microsoft.Build.Utilities.Core\" Version=\"$(MSBuildPackageVersion)\" />\r\n    <PackageVersion Include=\"Microsoft.DotNet.ILCompiler\" Version=\"7.0.0\" />\r\n    <PackageVersion Include=\"Microsoft.IO.Redist\" Version=\"6.1.0\" />\r\n    <PackageVersion Include=\"Microsoft.SourceLink.GitHub\" Version=\"8.0.0\" />\r\n    <!-- never update Cecil as this is the version required by Squirrel -->\r\n    <PackageVersion Include=\"Mono.Cecil\" Version=\"0.9.6.1\" />\r\n    <PackageVersion Include=\"MSBuild.StructuredLogger\" Version=\"2.2.386\" />\r\n    <PackageVersion Include=\"Nerdbank.GitVersioning\" Version=\"3.6.141\" />\r\n    <PackageVersion Include=\"Newtonsoft.Json\" Version=\"13.0.3\" />\r\n    <PackageVersion Include=\"NuGet.ProjectModel\" Version=\"6.11.0\" />\r\n    <PackageVersion Include=\"Nullable\" Version=\"1.3.1\" />\r\n    <PackageVersion Include=\"squirrel.windows\" Version=\"1.4.4\" />\r\n    <PackageVersion Include=\"System.ComponentModel.TypeConverter\" Version=\"4.3.0\" />\r\n    <PackageVersion Include=\"System.Collections.Immutable\" Version=\"8.0.0\" />\r\n    <PackageVersion Include=\"System.Formats.Asn1\" Version=\"8.0.1\" />\r\n    <PackageVersion Include=\"System.Memory\" Version=\"4.6.0\" />\r\n    <PackageVersion Include=\"System.Runtime.CompilerServices.Unsafe\" Version=\"6.1.0\" />\r\n    <PackageVersion Include=\"System.Text.Json\" Version=\"8.0.5\" />\r\n    <PackageVersion Include=\"System.Threading.Tasks.Dataflow\" Version=\"8.0.0\" />\r\n    <PackageVersion Include=\"System.Threading.Tasks.Extensions\" Version=\"4.5.4\" />\r\n    <PackageVersion Include=\"xunit\" Version=\"2.9.0\" />\r\n    <PackageVersion Include=\"xunit.runner.visualstudio\" Version=\"2.8.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0556640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Kirill Osenkov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MSBuildStructuredLog.Avalonia.sln",
          "type": "blob",
          "size": 4.1494140625,
          "content": "﻿\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio Version 17\r\nVisualStudioVersion = 17.11.35219.272\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"StructuredLogViewer.Avalonia\", \"src\\StructuredLogViewer.Avalonia\\StructuredLogViewer.Avalonia.csproj\", \"{B8DB3798-1636-417D-B57A-25C51C574F1E}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"StructuredLogger\", \"src\\StructuredLogger\\StructuredLogger.csproj\", \"{A939886E-A191-4A46-A84B-21AD670081B9}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"StructuredLogger.Tests\", \"src\\StructuredLogger.Tests\\StructuredLogger.Tests.csproj\", \"{8A327073-0811-49D6-B1AA-1FB0157E750A}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{1DA9000E-FE5B-467F-B6CB-2CFA7584ABF7}\"\r\n\tProjectSection(SolutionItems) = preProject\r\n\t\tappveyor.yml = appveyor.yml\r\n\t\tDirectory.Build.props = Directory.Build.props\r\n\t\tDirectory.Build.targets = Directory.Build.targets\r\n\t\tDirectory.Packages.props = Directory.Packages.props\r\n\t\tnuget.config = nuget.config\r\n\t\tREADME.md = README.md\r\n\t\tversion.json = version.json\r\n\tEndProjectSection\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"TaskRunner\", \"src\\TaskRunner\\TaskRunner.csproj\", \"{B8539A63-8D03-4D16-9945-FE7F8489B56D}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"StructuredLogViewer.Core\", \"src\\StructuredLogViewer.Core\\StructuredLogViewer.Core.csproj\", \"{3C655C5D-22C3-4B8D-969C-3FC497294703}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"StructuredLogger.Utils\", \"src\\StructuredLogger.Utils\\StructuredLogger.Utils.csproj\", \"{BA89AC34-AB49-4BC9-8DD6-29CEEDDC3AD4}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{B8DB3798-1636-417D-B57A-25C51C574F1E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{B8DB3798-1636-417D-B57A-25C51C574F1E}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{B8DB3798-1636-417D-B57A-25C51C574F1E}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{B8DB3798-1636-417D-B57A-25C51C574F1E}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{A939886E-A191-4A46-A84B-21AD670081B9}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{A939886E-A191-4A46-A84B-21AD670081B9}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{A939886E-A191-4A46-A84B-21AD670081B9}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{A939886E-A191-4A46-A84B-21AD670081B9}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{8A327073-0811-49D6-B1AA-1FB0157E750A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{8A327073-0811-49D6-B1AA-1FB0157E750A}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{8A327073-0811-49D6-B1AA-1FB0157E750A}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{8A327073-0811-49D6-B1AA-1FB0157E750A}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{B8539A63-8D03-4D16-9945-FE7F8489B56D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{B8539A63-8D03-4D16-9945-FE7F8489B56D}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{B8539A63-8D03-4D16-9945-FE7F8489B56D}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{B8539A63-8D03-4D16-9945-FE7F8489B56D}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{3C655C5D-22C3-4B8D-969C-3FC497294703}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{3C655C5D-22C3-4B8D-969C-3FC497294703}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{3C655C5D-22C3-4B8D-969C-3FC497294703}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{3C655C5D-22C3-4B8D-969C-3FC497294703}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{BA89AC34-AB49-4BC9-8DD6-29CEEDDC3AD4}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{BA89AC34-AB49-4BC9-8DD6-29CEEDDC3AD4}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{BA89AC34-AB49-4BC9-8DD6-29CEEDDC3AD4}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{BA89AC34-AB49-4BC9-8DD6-29CEEDDC3AD4}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {9A9CFBCF-6C45-4FBF-8BF2-A5046AC403D8}\r\n\tEndGlobalSection\r\nEndGlobal\r\n"
        },
        {
          "name": "MSBuildStructuredLog.sln",
          "type": "blob",
          "size": 5.62890625,
          "content": "﻿\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio Version 17\r\nVisualStudioVersion = 17.12.35209.166\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"StructuredLogger\", \"src\\StructuredLogger\\StructuredLogger.csproj\", \"{A939886E-A191-4A46-A84B-21AD670081B9}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"StructuredLogger.Tests\", \"src\\StructuredLogger.Tests\\StructuredLogger.Tests.csproj\", \"{8A327073-0811-49D6-B1AA-1FB0157E750A}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{1DA9000E-FE5B-467F-B6CB-2CFA7584ABF7}\"\r\n\tProjectSection(SolutionItems) = preProject\r\n\t\tappveyor.yml = appveyor.yml\r\n\t\tDirectory.Build.props = Directory.Build.props\r\n\t\tDirectory.Build.targets = Directory.Build.targets\r\n\t\tDirectory.Packages.props = Directory.Packages.props\r\n\t\tnuget.config = nuget.config\r\n\t\tREADME.md = README.md\r\n\t\tversion.json = version.json\r\n\tEndProjectSection\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"TaskRunner\", \"src\\TaskRunner\\TaskRunner.csproj\", \"{B8539A63-8D03-4D16-9945-FE7F8489B56D}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"StructuredLogViewer.Core\", \"src\\StructuredLogViewer.Core\\StructuredLogViewer.Core.csproj\", \"{3C655C5D-22C3-4B8D-969C-3FC497294703}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"StructuredLogViewer.Avalonia\", \"src\\StructuredLogViewer.Avalonia\\StructuredLogViewer.Avalonia.csproj\", \"{B8DB3798-1636-417D-B57A-25C51C574F1E}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ResourcesGenerator\", \"src\\ResourcesGenerator\\ResourcesGenerator.csproj\", \"{B94C5F8A-E55F-4E07-A8BE-D8D3A203FD14}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"BinlogTool\", \"src\\BinlogTool\\BinlogTool.csproj\", \"{35F44EA6-7259-43CC-8C17-E058F3EB86D3}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"StructuredLogger.Utils\", \"src\\StructuredLogger.Utils\\StructuredLogger.Utils.csproj\", \"{AC634B46-D57C-44C5-BF56-480843182F21}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"StructuredLogViewer\", \"src\\StructuredLogViewer\\StructuredLogViewer.csproj\", \"{C2E67DD4-F4F7-4CDE-A51A-6D46049A0CCA}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{A939886E-A191-4A46-A84B-21AD670081B9}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{A939886E-A191-4A46-A84B-21AD670081B9}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{A939886E-A191-4A46-A84B-21AD670081B9}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{A939886E-A191-4A46-A84B-21AD670081B9}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{8A327073-0811-49D6-B1AA-1FB0157E750A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{8A327073-0811-49D6-B1AA-1FB0157E750A}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{8A327073-0811-49D6-B1AA-1FB0157E750A}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{8A327073-0811-49D6-B1AA-1FB0157E750A}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{B8539A63-8D03-4D16-9945-FE7F8489B56D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{B8539A63-8D03-4D16-9945-FE7F8489B56D}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{B8539A63-8D03-4D16-9945-FE7F8489B56D}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{B8539A63-8D03-4D16-9945-FE7F8489B56D}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{3C655C5D-22C3-4B8D-969C-3FC497294703}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{3C655C5D-22C3-4B8D-969C-3FC497294703}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{3C655C5D-22C3-4B8D-969C-3FC497294703}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{3C655C5D-22C3-4B8D-969C-3FC497294703}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{B8DB3798-1636-417D-B57A-25C51C574F1E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{B8DB3798-1636-417D-B57A-25C51C574F1E}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{B8DB3798-1636-417D-B57A-25C51C574F1E}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{B8DB3798-1636-417D-B57A-25C51C574F1E}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{B94C5F8A-E55F-4E07-A8BE-D8D3A203FD14}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{B94C5F8A-E55F-4E07-A8BE-D8D3A203FD14}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{B94C5F8A-E55F-4E07-A8BE-D8D3A203FD14}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{B94C5F8A-E55F-4E07-A8BE-D8D3A203FD14}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{35F44EA6-7259-43CC-8C17-E058F3EB86D3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{35F44EA6-7259-43CC-8C17-E058F3EB86D3}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{35F44EA6-7259-43CC-8C17-E058F3EB86D3}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{35F44EA6-7259-43CC-8C17-E058F3EB86D3}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{AC634B46-D57C-44C5-BF56-480843182F21}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{AC634B46-D57C-44C5-BF56-480843182F21}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{AC634B46-D57C-44C5-BF56-480843182F21}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{AC634B46-D57C-44C5-BF56-480843182F21}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{C2E67DD4-F4F7-4CDE-A51A-6D46049A0CCA}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{C2E67DD4-F4F7-4CDE-A51A-6D46049A0CCA}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{C2E67DD4-F4F7-4CDE-A51A-6D46049A0CCA}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{C2E67DD4-F4F7-4CDE-A51A-6D46049A0CCA}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {EEDAF03E-B4DE-4CD0-93CD-CCFF6CE47C3A}\r\n\tEndGlobalSection\r\nEndGlobal\r\n"
        },
        {
          "name": "PRIVACY.md",
          "type": "blob",
          "size": 0.8984375,
          "content": "# Privacy Policy\n\n## MSBuild binary logs\n\nCollecting MSBuild binary logs from MSBuild as described on https://msbuildlog.com may collect your source code, secrets from your source code and environment and store them in the .binlog file, exclusively for the purpose of making .binlog files useful for build analysis. Treat .binlog files like you treat your source code and environment variables. Do not share .binlog files publicly unless you are confident they contain no secrets or private information. See details at https://msbuildlog.com/#security\n\n## MSBuild Structured Log Viewer\n\nThe MSBuild Structured Log Viewer app opens .binlog files but it makes no web or cloud requests and all viewing and processing is done on the local machine. It will not send any information anywhere.\n\nThe only network call the binlog viewer makes is to self-update via https://github.com/KirillOsenkov/MSBuildStructuredLog/releases.\n"
        },
        {
          "name": "PublishNativeAOT.cmd",
          "type": "blob",
          "size": 0.126953125,
          "content": "dotnet publish -c Release -r win-x64 -p:PublishNativeAot=True src/StructuredLogViewer.Avalonia/StructuredLogViewer.Avalonia.csproj"
        },
        {
          "name": "PublishNativeAOT.sh",
          "type": "blob",
          "size": 0.3291015625,
          "content": "#!/bin/sh\nunameOut=\"$(uname -s)\"\ncase \"${unameOut}\" in\n    Darwin*)    rid=osx-arm64;;\n    Linux*)     rid=linux-x64;;\n    *)\n                echo \"Unknown OS\"\n                exit 1\n                ;;\nesac\ndotnet publish -c Release -r ${rid} -p:PublishNativeAot=True src/StructuredLogViewer.Avalonia/StructuredLogViewer.Avalonia.csproj\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.6259765625,
          "content": "# MSBuildStructuredLog\nA logger for MSBuild that records a structured representation of executed targets, tasks, property and item values. It can greatly simplify build investigations and provides a portable log interchange format (*.binlog) and a rich interactive log viewer app.\n\n[![Build status](https://ci.appveyor.com/api/projects/status/v7vwgphs239i14ya?svg=true)](https://ci.appveyor.com/project/KirillOsenkov/msbuildstructuredlog)\n[![NuGet package](https://img.shields.io/nuget/v/MSBuild.StructuredLogger.svg)](https://nuget.org/packages/MSBuild.StructuredLogger)\n[![Chocolatey](https://img.shields.io/chocolatey/v/msbuild-structured-log-viewer.svg)](https://chocolatey.org/packages/msbuild-structured-log-viewer)\n\nHomepage: https://msbuildlog.com\n\nView binlogs in the Browser: https://live.msbuildlog.com\n\nImportant: the NuGet package is now being published to https://nuget.org/packages/MSBuild.StructuredLogger (old location: https://nuget.org/packages/Microsoft.Build.Logging.StructuredLogger). Please update to use the new Package Id.\n\nThanks to [SignPath.io](https://signpath.io?utm_source=foundation&utm_medium=github&utm_campaign=MSBuildStructuredLog) for providing a free code signing service and to the [SignPath Foundation](https://signpath.org?utm_source=foundation&utm_medium=github&utm_campaign=MSBuildStructuredLog) for a free code signing certificate to sign the installer.\n\n## Install:\nInstall from https://msbuildlog.com.\n\nThe app updates automatically via [Squirrel](https://github.com/Squirrel/Squirrel.Windows) (after launch it checks for updates in background), next launch starts the newly downloaded latest version.\n\n![Screenshot1](https://msbuildlog.com/Screenshot1.png)\n\n## Installing the Avalonia version on Mac:\n\nThere are a couple of extra steps to get the .app running on macOS since it's currently distributed as an unsigned application:\n\n1. In _System Preferences -> Security & Privacy_ ensure _Allow apps downloaded from:_ is set to `App Store and identified developers`.\n2. Download the _StructuredLogViewer-x64.zip_ (if on Intel Mac) or _Structured.Log.Viewer-arm64.zip_ (if on M1/ARM) from the latest [Release](https://github.com/KirillOsenkov/MSBuildStructuredLog/releases).\n3. If necessary, unzip the file (Safari does this for you after downloading automatically).\n4. Move the `StructuredLogViewer.app` into your `Applications` folder.\n5. In terminal run: `chmod +x StructuredLogViewer.app/Contents/MacOS/StructuredLogViewer.Avalonia` to give the app execution permissions\n6. In terminal run: `codesign -s- --deep StructuredLogViewer.app` to work around notarization issues\n7. On the first run, right click the app on Finder and select _Open_.  You will be prompted that the app is not signed by a known developer. Click _Open_.\n\n\n\n## Building & Running the Avalonia version on Mac:\n\n```\ngit clone https://github.com/KirillOsenkov/MSBuildStructuredLog\ncd MSBuildStructuredLog\n./run.sh\n```\n\nAlternatively, a longer version:\n\n1. `dotnet build MSBuildStructuredLog.Avalonia.sln`\n2. `dotnet publish MSBuildStructuredLog.Avalonia.sln --self-contained -o <some_dir>` (I used $HOME/tools/artifacts/StructuredLogViewer.Avalonia)\n3. make a script `$HOME/bin/structured-log-viewer` (or whatever's on your PATH):\n\n```\n#! /bin/sh\nexec dotnet ${HOME}/tools/artifacts/StructuredLogViewer.Avalonia/publish/StructuredLogViewer.Avalonia.dll \"$@\"\n```\n\n## Requirements:\n\nWindows:\n * .NET Framework 4.7.2\n * MSBuild 16.0\n * Visual Studio 2019\n\nMac:\n * .NET 6 SDK\n\n## Usage:\n\nStarting with MSBuild 15.3 you can pass the new `/bl` switch to `msbuild.exe` to record a binary build log to `msbuild.binlog`, in the same folder as the project/solution being built:\n\n![Screenshot](https://msbuildlog.com/BinLogFromCommandLine.png)\n\nor you can build the solution or open an existing log file through the viewer app:\n\n![Screenshot2](/docs/Screenshot2.png)\n\nAlternatively (useful for older versions of MSBuild) you can attach the logger to any MSBuild-based build using the logger library: `StructuredLogger.dll`. It is available in a NuGet package:\nhttps://www.nuget.org/packages/MSBuild.StructuredLogger\n\n```\nmsbuild solution.sln /t:Rebuild /v:diag /noconlog /logger:BinaryLogger,%localappdata%\\MSBuildStructuredLogViewer\\app-2.1.596\\StructuredLogger.dll;1.binlog\n```\n\nTo use a portable version of the logger (e.g. with the `dotnet msbuild` command) you need a .NET Standard version of `StructuredLogger.dll`, not the .NET Framework (Desktop) version.\n\nDownload this NuGet package: https://www.nuget.org/packages/MSBuild.StructuredLogger/2.1.545\nand inside it there's the `lib\\netstandard2.0\\StructuredLogger.dll`. Try passing that to `dotnet build` like this:\n```\ndotnet msbuild Some.sln /v:diag /nologo /logger:BinaryLogger,\"packages\\MSBuild.StructuredLogger.2.1.545\\lib\\netstandard2.0\\StructuredLogger.dll\";\"C:\\Users\\SomeUser\\Desktop\\binarylog.binlog\"\n```\n\nRead more about the log formats here:\nhttps://github.com/KirillOsenkov/MSBuildStructuredLog/wiki/Log-Format\n\n## Features:\n\n * Preprocess project files (with all imports inlined), right-click on a project -> Preprocess\n * If a log has embedded files, you can view the list of files, full-text search in all files, and use the Space key (or double-click) on most nodes to view the source code.\n * Displays [double-writes](https://github.com/KirillOsenkov/MSBuildStructuredLog/wiki/Double%20write%20detection) (when files from different sources are written to the same destination during a build, thus causing non-determinism)\n * Displays target dependencies for each target\n * Narrow down the search results using the under() or project() clauses to only display results under a certain parent or project.\n * Each node in the tree has a context menu. Ctrl+C to copy an item and the entire subtree to Clipboard as text.\n * Delete to hide nodes from the tree (to get uninteresting stuff out of the way).\n * Open and save log files (option to save log files to .xml)\n * Logs can include the source code project files and all imported files used during the build.\n\n## Investigating problems with MSBuildStructuredLog\n\nOpen an issue if you're running into something weird and I can take a look into it. If MSBuildStructuredLog crashes during the build, it will attempt to write the exception call stack to:\n\n```\n%localappdata%\\Microsoft\\MSBuildStructuredLog\\LoggerExceptions.txt\n```\n\n## MSBuild Resources\n * [https://msbuildlog.com](https://msbuildlog.com)\n * [https://github.com/dotnet/msbuild/blob/main/documentation/wiki/MSBuild-Resources.md](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/MSBuild-Resources.md)\n * [https://github.com/dotnet/msbuild/blob/main/documentation/wiki/MSBuild-Tips-&-Tricks.md](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/MSBuild-Tips-&-Tricks.md)\n"
        },
        {
          "name": "ThirdPartyNotices",
          "type": "blob",
          "size": 1.13671875,
          "content": "Microsoft Automatic Graph Layout,MSAGL \r\n\r\nCopyright (c) Microsoft Corporation\r\n\r\nAll rights reserved. \r\n\r\nMIT License \r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"\"Software\"\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 9.0869140625,
          "content": "version: 1.1.{build}\r\n\r\nbranches:\r\n  only:\r\n    - main\r\n\r\nenvironment:\r\n  matrix:\r\n    - job_name: Windows build\r\n      appveyor_build_worker_image: Visual Studio 2022\r\n    - job_name: macOS build\r\n      appveyor_build_worker_image: macOS\r\n\r\nmatrix:\r\n  fast_finish: true\r\n\r\nfor:\r\n  -\r\n    matrix:\r\n      only:\r\n        - job_name: Windows build\r\n    init:\r\n      - choco upgrade chocolatey\r\n      - dotnet tool update -g checkbinarycompat\r\n      - ps: Invoke-WebRequest -Uri 'https://dot.net/v1/dotnet-install.ps1' -UseBasicParsing -OutFile \"$env:temp\\dotnet-install.ps1\"\r\n      - ps: '& $env:temp\\dotnet-install.ps1 -Version \"8.0.302\"'\r\n    build_script:\r\n      - dotnet msbuild /p:Configuration=Release /clp:v=m MSBuildStructuredLog.sln /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\dotnetcore\\Appveyor.MSBuildLogger.dll\"\r\n      - checkbinarycompat bin\\StructuredLogViewer\\Release\\net472\r\n    after_build:\r\n      - ps: >-\r\n          Compress-Archive `\r\n          \"bin\\StructuredLogViewer\\Release\\net472\\Releases\\MSBuildStructuredLogSetup.exe\", `\r\n          \"bin\\StructuredLogViewer\\Release\\net472\\Releases\\MSBuildStructuredLogViewer*.nupkg\", `\r\n          \"bin\\StructuredLogger\\Release\\netstandard2.0\\StructuredLogger.dll\" `\r\n          -DestinationPath \"MSBuildStructuredLog-${Env:APPVEYOR_BUILD_VERSION}.zip\"\r\n    artifacts:\r\n      - path: msbuild.binlog\r\n        name: MSBuild Log\r\n      - path: 'bin\\StructuredLogViewer\\Release\\net472\\msbuild-structured-log-viewer*.nupkg'\r\n        name: Chocolatey Package\r\n      - path: 'bin\\StructuredLogViewer\\Release\\net472\\Releases\\MSBuildStructuredLogSetup.exe'\r\n        name: MSBuildStructuredLogSetup.exe\r\n      - path: 'bin\\StructuredLogViewer\\Release\\net472\\Releases\\MSBuildStructuredLogViewer*.nupkg'\r\n        name: Installer nupkg\r\n      - path: 'bin\\StructuredLogViewer\\Release\\net472\\Releases\\RELEASES'\r\n        name: RELEASES\r\n      - path: 'bin\\StructuredLogger\\Release\\netstandard2.0\\StructuredLogger.dll'\r\n        name: StructuredLogger.dll\r\n      - path: 'MSBuildStructuredLog-*.zip'\r\n        name: Bundle\r\n    on_failure:\r\n      - appveyor PushArtifact msbuild.binlog\r\n    deploy:\r\n      - provider: Webhook\r\n        url: https://app.signpath.io/API/v1/74f63071-f2aa-46ce-bd8f-1e7cd8774019/Integrations/AppVeyor?ProjectKey=MSBuildStructuredLog&SigningPolicyKey=release-signing\r\n        authorization:\r\n          secure: WALjHGjvNllt916kBDQ5tSYXGvaKDqymo/jQJoIKwITueSp4LF3jS+9nllR46G8pp2AH+Z6RL1f089XGDOYlfg==\r\n\r\n  -\r\n    matrix:\r\n      only:\r\n        - job_name: macOS build\r\n    environment:\r\n      APPLE_ID_EMAIL:\r\n        secure: RKmcmSlBIe+qymOfMJR9U9Q2axndE5FnQWJrHIm/ZJM=\r\n      APPLE_ID_PASSWORD:\r\n        secure: Xqa3m49/axGFkH9nr8zZRLgMbFzY3rUUsRCXRxPt4B8=\r\n      P12_BASE64:\r\n        secure: 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\r\n      P12_PASSWORD:\r\n        secure: g9nZcXsjCU8Ogsic6sO45hYJI1sMG/Psw4bes9yknMo=\r\n      APPLE_TEAM_ID:\r\n        secure: AnEDLgBUDM9+UAdcIOrMLQ==\r\n      APPLE_CERT_NAME:\r\n        secure: QWdxOY0xIK4XR50AYb77TKCmMd2k00iEBfrYYxzhwM+pDyvSjQXO6Oqg1epfe0KRpZNc+a9cGwCJ8qMyCEQxsA==\r\n    init:\r\n      - curl -sSL https://dot.net/v1/dotnet-install.sh | /bin/bash -s -- --channel 8.0\r\n    build_script:\r\n      - dotnet tool install Cake.Tool --create-manifest-if-needed\r\n      - dotnet tool run dotnet-cake ./build-macos.cake --settings_skippackageversioncheck=true\r\n    artifacts:\r\n      - path: 'artifacts\\StructuredLogViewer-*.zip'\r\n        name: 'Structured Log Viewer macOS app'\r\n    on_failure:\r\n      - appveyor PushArtifact msbuild.binlog\r\n"
        },
        {
          "name": "build-macos.cake",
          "type": "blob",
          "size": 13.2392578125,
          "content": "#addin \"Cake.Plist\"\n\nvar target = Argument(\"target\", \"Default\");\nvar platform = Argument(\"platform\", \"AnyCPU\");\nvar configuration = Argument(\"configuration\", \"Release\");\n\nvar version = EnvironmentVariable(\"APPVEYOR_BUILD_VERSION\") ?? Argument(\"version\", \"0.0.1\");\n\nvar artifactsDir = (DirectoryPath)Directory(\"./artifacts\");\n\nvar netCoreAppsRoot= \"./src\";\nvar netCoreApp = \"StructuredLogViewer.Avalonia\";\nvar macAppName = \"StructuredLogViewer\";\n\nvar buildDirs = \n    GetDirectories($\"{netCoreAppsRoot}/**/bin/**\") + \n    GetDirectories($\"{netCoreAppsRoot}/**/obj/**\") + \n    GetDirectories($\"{netCoreAppsRoot}/artifacts/*\");\n\nvar netCoreProject = new {\n        Path = $\"{netCoreAppsRoot}/{netCoreApp}\",\n        Name = netCoreApp,\n        Framework = XmlPeek($\"{netCoreAppsRoot}/{netCoreApp}/{netCoreApp}.csproj\", \"//*[local-name()='TargetFramework']/text()\"),\n        Runtimes = XmlPeek($\"{netCoreAppsRoot}/{netCoreApp}/{netCoreApp}.csproj\", \"//*[local-name()='RuntimeIdentifiers']/text()\").Split(';')\n    };\n\n\nvar certIsSet = !string.IsNullOrEmpty(EnvironmentVariable(\"P12_BASE64\"));\nvar certNameIsSet = !string.IsNullOrEmpty(EnvironmentVariable(\"APPLE_CERT_NAME\"));\n\nvar keychainPath = \"app-signing.keychain\";\nvar keychainPassword = Guid.NewGuid().ToString(\"N\");\n\n Task(\"Clean\")\n .Does(()=>{\n     CleanDirectories(buildDirs);\n });\n\n Task(\"Restore-NetCore\")\n     .IsDependentOn(\"Clean\")\n     .Does(() =>\n {\n    DotNetRestore(netCoreProject.Path);\n });\n\n Task(\"Build-NetCore\")\n     .IsDependentOn(\"Restore-NetCore\")\n     .Does(() =>\n {\n    Information(\"Building: {0}\", netCoreProject.Name);\n    DotNetBuild(netCoreProject.Path, new DotNetBuildSettings {\n        Configuration = configuration\n    });\n });\n\n Task(\"Publish-NetCore\")\n     .IsDependentOn(\"Restore-NetCore\")\n     .Does(() =>\n {\n    foreach(var runtime in netCoreProject.Runtimes)\n    {\n        if (!runtime.Contains(\"osx\"))\n            continue;\n\n        var outputDir = artifactsDir.Combine(runtime);\n\n        Information(\"Publishing: {0}, runtime: {1}\", netCoreProject.Name, runtime);\n        var settings = new DotNetPublishSettings\n        {\n            //Framework = netCoreProject.Framework,\n            Configuration = configuration,\n            Runtime = runtime,\n            SelfContained = true,\n            PublishSingleFile = true,\n            OutputDirectory = outputDir.FullPath\n        };\n        if (configuration == \"Release\")\n        {\n            settings.MSBuildSettings = new DotNetMSBuildSettings()\n                .WithProperty(\"DebugType\", \"None\")\n                .WithProperty(\"DebugSymbols\", \"false\")\n                .WithProperty(\"IncludeSymbolsInSingleFile\", \"false\")\n                .WithProperty(\"CopyOutputSymbolsToPublishDirectory\", \"false\");\n        }\n\n        DotNetPublish(netCoreProject.Path, settings);\n    }\n });\n\nTask(\"Install-Certificate\")\n    .WithCriteria(certIsSet)\n    .Does(() =>\n{\n    var p12Base64 = EnvironmentVariable(\"P12_BASE64\")?.Replace(\"\\r\", \"\").Replace(\"\\n\", \"\");\n    var p12Password = EnvironmentVariable(\"P12_PASSWORD\");\n\n    if (string.IsNullOrEmpty(p12Base64))\n    {\n        Error(\"P12_BASE64 environment variable is not set.\");\n        return;\n    }\n\n    if (string.IsNullOrEmpty(p12Password))\n    {\n        Error(\"P12_PASSWORD environment variable is not set.\");\n        return;\n    }\n\n    Information(\"Decoding the P12 certificate from base64...\");\n\n    var p12Bytes = Convert.FromBase64String(p12Base64);\n    var tempP12File = \"./certificate.p12\";\n\n    try\n    {\n        System.IO.File.WriteAllBytes(tempP12File, p12Bytes);\n\n        Information(\"Creating temporary keychain...\");\n        RunToolWithOutput(\"security\", new ProcessSettings\n        {\n            Arguments = new ProcessArgumentBuilder()\n                .Append(\"create-keychain\")\n                .Append(\"-p\")\n                .AppendQuoted(keychainPassword)\n                .AppendQuoted(keychainPath)\n        });\n\n        RunToolWithOutput(\"security\", new ProcessSettings\n        {\n            Arguments = new ProcessArgumentBuilder()\n                .Append(\"set-keychain-settings\")\n                .Append(\"-lut\")\n                .Append(\"21600\")\n                .AppendQuoted(keychainPath)\n        });\n\n        RunToolWithOutput(\"security\", new ProcessSettings\n        {\n            Arguments = new ProcessArgumentBuilder()\n                .Append(\"unlock-keychain\")\n                .Append(\"-p\")\n                .AppendQuoted(keychainPassword)\n                .AppendQuoted(keychainPath)\n        });\n\n        DownloadAndInstallAppleCert(\"https://www.apple.com/certificateauthority/DeveloperIDG2CA.cer\");\n        DownloadAndInstallAppleCert(\"https://www.apple.com/certificateauthority/AppleRootCA-G2.cer\");\n        DownloadAndInstallAppleCert(\"https://www.apple.com/certificateauthority/AppleWWDRCAG2.cer\");\n\n        Information(\"Importing certificate to keychain...\");\n        RunToolWithOutput(\"security\", new ProcessSettings\n        {\n            Arguments = new ProcessArgumentBuilder()\n                .Append(\"import\")\n                .AppendQuoted(tempP12File)\n                .Append(\"-P\")\n                .AppendQuoted(p12Password)\n                .Append(\"-t\")\n                .Append(\"cert\")\n                // -A allows access for this cert for any app on the machine\n                // But -T only limits it to specific apps (codesign and security here)\n                // That's what Apple does for GitHub Actions:\n                // https://github.com/Apple-Actions/import-codesign-certs/blob/63fff01cd422d4b7b855d40ca1e9d34d2de9427d/src/security.ts#L109-L113\n                .Append(\"-A\")\n                .Append(\"-T\")\n                .Append(\"/usr/bin/codesign\")\n                .Append(\"-T\")\n                .Append(\"/usr/bin/security\")\n                .Append(\"-f\")\n                .Append(\"pkcs12\")\n                .Append(\"-k\")\n                .AppendQuoted(keychainPath)\n        });\n\n        Information(\"Set keychain partition\");\n        RunToolWithOutput(\"security\", new ProcessSettings\n        {\n            Arguments = new ProcessArgumentBuilder()\n                .Append(\"set-key-partition-list\")\n                .Append(\"-S\")\n                .Append(\"apple-tool:,apple:\")\n                .Append(\"-k\")\n                .AppendQuoted(keychainPassword)\n                .AppendQuoted(keychainPath)\n        });\n\n        Information(\"Update keychains visibility\");\n        RunToolWithOutput(\"security\", new ProcessSettings\n        {\n            Arguments = new ProcessArgumentBuilder()\n                .Append(\"list-keychains\")\n                .Append(\"-d\")\n                .Append(\"user\")\n                .Append(\"-s\")\n                .AppendQuoted(keychainPath)\n                .Append(\"login.keychain\")\n        });\n\n        Information(\"Successfully imported the certificate.\");\n    }\n    finally\n    {\n        System.IO.File.Delete(tempP12File);\n\n        Information(\"Temporary P12 certificate file deleted.\");\n    }\n\n    void DownloadAndInstallAppleCert(string cert)\n    {\n        var fileName = System.IO.Path.GetFileName(cert);\n        RunToolWithOutput(\"curl\", new ProcessSettings\n        {\n            Arguments = new ProcessArgumentBuilder()\n                .Append(\"-o\")\n                .AppendQuoted(fileName)\n                .AppendQuoted(cert)\n        });\n        RunToolWithOutput(\"security\", new ProcessSettings\n        {\n            Arguments = new ProcessArgumentBuilder()\n                .Append(\"import\")\n                .AppendQuoted(fileName)\n                .Append(\"-T\")\n                .Append(\"/usr/bin/codesign\")\n                .Append(\"-T\")\n                .Append(\"/usr/bin/security\")\n                .Append(\"-k\")\n                .AppendQuoted(keychainPath)\n        });\n    }\n});\n\n Task(\"Create-Bundle\")\n     .IsDependentOn(\"Publish-NetCore\")\n     .Does(() =>\n {\n    var runtimeIdentifiers = netCoreProject.Runtimes.Where(r => r.StartsWith(\"osx\"));\n    foreach(var runtime in runtimeIdentifiers)\n    {\n        var workingDir = artifactsDir.Combine(runtime);\n        var tempDir = artifactsDir.Combine(\"app\");\n\n        Information(\"Copying Info.plist\");\n        EnsureDirectoryExists(tempDir.Combine(\"Contents\"));\n        CopyFileToDirectory($\"{netCoreAppsRoot}/{netCoreApp}/Info.plist\", tempDir.Combine(\"Contents\"));\n\n        // Update versions in Info.plist\n        var plistFile = tempDir.Combine(\"Contents\").CombineWithFilePath(\"Info.plist\");\n        dynamic plist = DeserializePlist(plistFile);\n        plist[\"CFBundleShortVersionString\"] = version;\n        plist[\"CFBundleVersion\"] = version;\n        SerializePlist(plistFile, plist);\n\n        Information(\"Copying App Icons\");\n        EnsureDirectoryExists(tempDir.Combine(\"Contents/Resources\"));\n        CopyFileToDirectory($\"{netCoreAppsRoot}/{netCoreApp}/StructuredLogViewer.icns\", tempDir.Combine(\"Contents/Resources\"));\n\n        EnsureDirectoryExists(tempDir.Combine(\"Contents/Frameworks\"));\n\n        Information(\"Copying executables\");\n        MoveDirectory(workingDir, tempDir.Combine(\"Contents/MacOS\"));\n\n        Information(\"Finish packaging\");\n        EnsureDirectoryExists(workingDir);\n        MoveDirectory(tempDir, workingDir.Combine($\"{macAppName}.app\"));\n    }\n });\n\n Task(\"Sign-Bundle\")\n    .WithCriteria(certNameIsSet)\n    .IsDependentOn(\"Install-Certificate\")\n    .IsDependentOn(\"Create-Bundle\")\n    .Does(() =>\n{\n    var runtimeIdentifiers = netCoreProject.Runtimes.Where(r => r.StartsWith(\"osx\"));\n    var entitlementsFilePath = $\"{netCoreAppsRoot}/{netCoreApp}/Entitlements.plist\";\n\n    foreach(var runtime in runtimeIdentifiers)\n    {\n        Information($\"Starting {runtime} macOS app signing\");\n\n        var appBundlePath = artifactsDir.Combine(runtime).Combine($\"{macAppName}.app\");\n        var signingIdentity = EnvironmentVariable(\"APPLE_CERT_NAME\");\n\n        foreach (var dylib in GetFiles($\"{appBundlePath}/**/*.dylib\"))\n        {\n            Information($\"Signing {dylib} library\");\n\n            // Sign the library:\n            var args = new ProcessArgumentBuilder();\n            args.Append(\"--force\");\n            args.Append(\"--sign\");\n            args.AppendQuoted(signingIdentity);\n            args.AppendQuoted(dylib.ToString());\n\n            RunToolWithOutput(\"codesign\", new ProcessSettings\n            {\n                Arguments = args.RenderSafe()\n            });\n        }\n\n        // Sign the bundle:\n        {\n            Information($\"Signing {appBundlePath} bundle\");\n\n            var args = new ProcessArgumentBuilder();\n            args.Append(\"--force\");\n            args.Append(\"--timestamp\");\n            args.Append(\"--options=runtime\");\n            args.Append(\"--entitlements\");\n            args.AppendQuoted(entitlementsFilePath);\n            args.Append(\"--sign\");\n            args.AppendQuoted(signingIdentity);\n            args.AppendQuoted(appBundlePath.ToString());\n\n            RunToolWithOutput(\"codesign\",new ProcessSettings\n            {\n                Arguments = args.RenderSafe()\n            });\n        }\n    }\n});\n\nTask(\"Compress-Bundle\")\n    .IsDependentOn(\"Sign-Bundle\")\n    .Does(() =>\n{\n    var runtimeIdentifiers = netCoreProject.Runtimes.Where(r => r.StartsWith(\"osx\"));\n    foreach(var runtime in runtimeIdentifiers)\n    {\n        Information($\"Compressing {runtime} macOS bundle\");\n        var appBundlePath = artifactsDir.Combine(runtime).Combine($\"{macAppName}.app\");\n        var architecture = runtime[(runtime.IndexOf(\"-\")+1)..];\n        var zippedPath = artifactsDir.Combine(runtime).CombineWithFilePath($\"../{macAppName}-{architecture}.zip\");\n\n        var args = new ProcessArgumentBuilder();\n        args.Append(\"-c\");\n        args.Append(\"-k\");\n        args.Append(\"--keepParent\");\n        args.AppendQuoted(appBundlePath.ToString());\n        args.AppendQuoted(zippedPath.ToString());\n\n        // \"Ditto\" is absolutely necessary instead of \"zip\" command.\n        // Otherwise no symlinks are saved, and notarize process would fail.\n        RunToolWithOutput(\"ditto\", new ProcessSettings\n        {\n            Arguments = args.RenderSafe()\n        });\n    }\n});\n\nTask(\"Cleanup-After-Sign\")\n    .WithCriteria(certIsSet)\n    .IsDependentOn(\"Sign-Bundle\")\n    .Does(() =>\n{\n    RunToolWithOutput(\"security\", new ProcessSettings\n    {\n        Arguments = new ProcessArgumentBuilder()\n            .Append(\"delete-keychain\")\n            .AppendQuoted(keychainPath)\n    });\n});\n\nTask(\"Package-Mac\")\n    .IsDependentOn(\"Create-Bundle\")\n    .IsDependentOn(\"Sign-Bundle\")\n    .IsDependentOn(\"Cleanup-After-Sign\")\n    .IsDependentOn(\"Compress-Bundle\");\n\n Task(\"Default\")\n     .IsDependentOn(\"Restore-NetCore\")\n     .IsDependentOn(\"Publish-NetCore\")\n     .IsDependentOn(\"Package-Mac\");\n\n RunTarget(target);\n\n\nvoid RunToolWithOutput(\n    string toolName, ProcessSettings settings,\n    bool includeStandardOutput = false,\n    bool includeStandardError = true)\n{\n    settings.RedirectStandardOutput = includeStandardOutput;\n    if (includeStandardOutput)\n    {\n        settings.RedirectedStandardOutputHandler = line =>\n        {\n            if (line is not null)\n                Information(line);\n            return line;\n        };\n    }\n    settings.RedirectStandardError = includeStandardError;\n    if (includeStandardError)\n    {\n        settings.RedirectedStandardErrorHandler = line =>\n        {\n            if (line is not null)\n                Error(line);\n            return line;\n        };\n    }\n    var exitCode = StartProcess(toolName, settings, out var lines);\n    if (exitCode != 0)\n    {\n        throw new Exception($\"The tool exited with code {exitCode}\");\n    }\n}"
        },
        {
          "name": "chocopush.cmd",
          "type": "blob",
          "size": 0.12109375,
          "content": "choco push --source https://push.chocolatey.org bin\\StructuredLogViewer\\Release\\net472\\msbuild-structured-log-viewer.*.nupkg"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.05078125,
          "content": "{\r\n  \"sdk\": {\r\n    \"allowPrerelease\": true\r\n  }\r\n}\r\n"
        },
        {
          "name": "key.snk",
          "type": "blob",
          "size": 0.58203125,
          "content": null
        },
        {
          "name": "notarize.sh",
          "type": "blob",
          "size": 0.3447265625,
          "content": "#!/bin/bash\n\n# xcrun notarytool store-credentials \"notarytool-password\" --apple-id \"<appleid>\" --team-id XXXXXXXXXX --password xxxxxxxxxxxxxxxxxxxxxxxxxx\n\nxcrun notarytool submit StructuredLogViewer-arm64.zip --keychain-profile notarytool-password --wait\nxcrun notarytool submit StructuredLogViewer-x64.zip --keychain-profile notarytool-password --wait\n"
        },
        {
          "name": "nuget.config",
          "type": "blob",
          "size": 0.2060546875,
          "content": "﻿<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    <clear />\r\n    <add key=\"api.nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\r\n  </packageSources>\r\n</configuration>\r\n"
        },
        {
          "name": "run.sh",
          "type": "blob",
          "size": 0.171875,
          "content": "#!/usr/bin/env bash\nDIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\ncd \"${DIR}/src/StructuredLogViewer.Avalonia\" || exit\ndotnet run StructuredLogViewer.Avalonia.csproj\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "staple.sh",
          "type": "blob",
          "size": 0.4091796875,
          "content": "#!/bin/bash\n\nunzip StructuredLogViewer-x64.zip\nxcrun stapler staple StructuredLogViewer.app\nrm StructuredLogViewer-x64.zip\nzip -r StructuredLogViewer-x64.zip StructuredLogViewer.app\nrm -r StructuredLogViewer.app\n\nunzip StructuredLogViewer-arm64.zip\nxcrun stapler staple StructuredLogViewer.app\nrm StructuredLogViewer-arm64.zip\nzip -r StructuredLogViewer-arm64.zip StructuredLogViewer.app\nrm -r StructuredLogViewer.app\n\n"
        },
        {
          "name": "version.json",
          "type": "blob",
          "size": 0.2900390625,
          "content": "{\r\n  \"$schema\": \"https://raw.githubusercontent.com/AArnott/Nerdbank.GitVersioning/master/src/NerdBank.GitVersioning/version.schema.json\",\r\n  \"version\": \"2.2\",\r\n  \"publicReleaseRefSpec\": [\r\n    \"^refs/heads/main$\"\r\n  ],\r\n  \"cloudBuild\": {\r\n    \"buildNumber\": {\r\n      \"enabled\": true\r\n    }\r\n  }\r\n}"
        }
      ]
    }
  ]
}