{
  "metadata": {
    "timestamp": 1736710901666,
    "page": 492,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "emgucv/emgucv",
      "stars": 2142,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 1.4892578125,
          "content": "[submodule \"opencv\"]\n\tpath = opencv\n\turl = https://github.com/emgucv/opencv.git\n\tignore = dirty\n[submodule \"opencv_contrib\"]\n\tpath = opencv_contrib\n\turl = https://github.com/emgucv/opencv_contrib.git\n\tignore = dirty\n[submodule \"opencv_extra\"]\n\tpath = opencv_extra\n\turl = https://github.com/opencv/opencv_extra.git\n\tignore = dirty\n[submodule \"Emgu.CV.Extern/tesseract/libtesseract/tesseract-ocr.git\"]\n\tpath = Emgu.CV.Extern/tesseract/libtesseract/tesseract-ocr.git\n\turl = https://github.com/emgucv/tesseract.git\n\tignore = dirty\n[submodule \"vtk\"]\n\tpath = vtk\n\turl = https://github.com/Kitware/VTK.git\n\tignore = dirty\n[submodule \"Emgu.CV.Extern/tesseract/libtesseract/leptonica/leptonica.git\"]\n\tpath = Emgu.CV.Extern/tesseract/libtesseract/leptonica/leptonica.git\n\turl = https://github.com/emgucv/leptonica.git\n\tignore = dirty\n[submodule \"harfbuzz\"]\n\tpath = harfbuzz\n\turl = https://github.com/harfbuzz/harfbuzz.git\n\tignore = dirty\n[submodule \"eigen\"]\n\tpath = eigen\n\turl = https://gitlab.com/libeigen/eigen.git\n\tignore = dirty\n[submodule \"hdf5\"]\n\tpath = hdf5\n\turl = https://github.com/HDFGroup/hdf5.git\n\tignore = dirty\n[submodule \"Emgu.CV.Extern/depthai-core\"]\n\tpath = Emgu.CV.Extern/depthai-core\n\turl = https://github.com/luxonis/depthai-core.git\n\tignore = dirty\n[submodule \"3rdParty/freetype2\"]\n\tpath = 3rdParty/freetype2\n\turl = https://gitlab.freedesktop.org/freetype/freetype.git\n\tignore = dirty\n[submodule \"3rdParty/openvino\"]\n\tpath = 3rdParty/openvino\n\turl = https://github.com/openvinotoolkit/openvino.git\n\tignore = dirty\n"
        },
        {
          "name": "3rdParty",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 141.505859375,
          "content": "# --------------------------------------------------------\n# Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\n# \n# Root CMake file for Emgu CV\n#\n# From the off-tree build directory, invoke:\n#   $ cmake <PATH_TO_EMGUCV_ROOT>\n#\n# --------------------------------------------------------\n\nCMAKE_MINIMUM_REQUIRED(VERSION 3.16)\n\nSET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules\")\nSET(EMGU_CV_SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}\")\nINCLUDE (CheckPlatform)\n\n#IF( (WIN32 AND (NOT NETFX_CORE)) OR IS_UBUNTU OR (APPLE AND (\"${IOS_ARCH}\" STREQUAL \"\")) )\n#IF( (WIN32 AND (NOT NETFX_CORE) AND (NOT IS_ARM64)) OR IS_UBUNTU )\n#  SET(EMGU_CV_WITH_DEPTHAI ON CACHE BOOL \"Build support for OAK-1 and OAK-D\")\n#ELSE() \n  SET(EMGU_CV_WITH_DEPTHAI OFF CACHE BOOL \"Build support for OAK-1 and OAK-D\")\n#ENDIF()\n\n#IF(EMGU_CV_WITH_DEPTHAI)\n#  # Set defaults\n#  set(HUNTER_CONFIGURATION_TYPES \"Release\" CACHE STRING \"Hunter dependencies list of build configurations\")\n#  \n#  include(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules/HunterGate.cmake\")\n#  \n#  HunterGate(\n#    URL \"https://github.com/cpp-pm/hunter/archive/v0.24.0.tar.gz\"\n#    SHA1 \"a3d7f4372b1dcd52faa6ff4a3bd5358e1d0e5efd\"\n#    FILEPATH ${CMAKE_CURRENT_LIST_DIR}/Emgu.CV.Extern/depthai-core/cmake/Hunter/config.cmake # Add depthai-core config (hunter limitation)\n#  )\n#\n#  # Move binary dir if windows, to shorten the path\n#  if(WIN32)\n#    set(HUNTER_BINARY_DIR \"${HUNTER_GATE_ROOT}/_bin\" CACHE STRING \"Hunter binary directory\")\n#  endif()\n#  #MESSAGE(STATUS: \"CMAKE_MODULE_PATH --- ${CMAKE_MODULE_PATH}\")\n#ENDIF()\n\nIF(EMGU_CV_WITH_DEPTHAI)\n  # Always build depthai-core as a static library\n  SET(BUILD_SHARED_LIBS_CACHE ${BUILD_SHARED_LIBS})\n  SET(BUILD_SHARED_LIBS OFF)\n  add_subdirectory(Emgu.CV.Extern/depthai-core EXCLUDE_FROM_ALL)\n  SET(BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS_CACHE})\nENDIF()\n\n\nPROJECT(emgucv)\n\nif(POLICY CMP0022)\n  #cmake_policy(SET CMP0022 NEW)\n  SET(CMAKE_POLICY_DEFAULT_CMP0022 NEW)\nendif()\nif(POLICY CMP0069)\n  #cmake_policy(SET CMP0069 NEW)\n  SET(CMAKE_POLICY_DEFAULT_CMP0069 NEW)\nendif()\n\n\n#IF(ANDROID)\n#include(CheckIPOSupported)\n#check_ipo_supported(RESULT supported OUTPUT error)\n#if( supported )\n#    message(STATUS \"IPO / LTO enabled\")\n#    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)\n#else()\n#    message(STATUS \"IPO / LTO not supported: <${error}>\")\n#endif()\n#ENDIF()\n\nIF( WIN32 OR ANDROID OR IOS OR NETFX_CORE)\n  SET(EMGU_CV_WITH_FREETYPE ON CACHE BOOL \"BUILD FREETYPE\")\nELSE() \n  SET(EMGU_CV_WITH_FREETYPE OFF CACHE BOOL \"BUILD FREETYPE\")\nENDIF()\n\n\n#IF(WIN32)\n#  FIND_PACKAGE(HDF5)\n#  IF (TARGET hdf5-static) \n#\tget_target_property(HDF5_LIBRARIES hdf5-static IMPORTED_LOCATION_RELEASE)\n#\tMESSAGE(STATUS \"HDF5_DIRS: ${HDF5_DIRS}\")\n#\tMESSAGE(STATUS \"HDF5_INCLUDE_DIRS: ${HDF5_INCLUDE_DIRS}\")\n#\tMESSAGE(STATUS \"HDF5_LIBRARIES: ${HDF5_LIBRARIES}\")\n#\tSET(HDF5_FOUND ON)\n#\tSET(HDF5_C_LIBRARY ${HDF5_LIBRARIES})\n#\tmessage(STATUS \"HDF5:   ${HDF5_DIR} (ver ${HDF5_VERSION})\")\n#\tMESSAGE(STATUS \"ENV HDF5 : $ENV{HDF5_DIR}/../\")\n#\tMESSAGE(STATUS \"HDF5_INCLUDE_DIRS SEARCH PATH : $ENV{HDF5_DIR}/../include\")\n#\tMESSAGE(STATUS \"HDF5_C_LIBRARY SEARCH PATH : $ENV{HDF5_DIR}/../lib\")\n#  else()\n#\tmessage(STATUS \"HDF5:   NO\")\n#  endif()\t\n#ENDIF()\n\nIF(IS_UBUNTU OR IS_RHEL)\n  #USE system freetype, do nothing here.\nELSEIF (EMGU_CV_WITH_FREETYPE)\n#\tExternalProject_Add(\n#\t\tharfbuzz\n#\t\tGIT_REPOSITORY https://github.com/harfbuzz/harfbuzz.git\n#\t\tGIT_TAG 2.7.2\n#\t\tCMAKE_ARGS -DCMAKE_FIND_ROOT_PATH:STRING=${FREETYPE_INSTALL_DIR} -DHB_HAVE_FREETYPE:BOOL=TRUE\n#\t\tPREFIX ${CMAKE_CURRENT_BINARY_DIR}/install\n#\t\t)\n#\tExternalProject_Get_Property(harfbuzz install_dir)\n#\tSET(HARFBUZZ_INSTALL_DIR ${install_dir})\n#    #add_library(harfbuzz STATIC IMPORTED)\n#    #set_property(TARGET harfbuzz PROPERTY IMPORTED_LOCATION HARFBUZZ_INSTALL_DIR)\n\t\n\tMESSAGE(STATUS \"Setting up FREETYPE\")\n#\tfind_package(FREETYPE CONFIG REQUIRED)\n\tfind_package(FREETYPE CONFIG)\n\tif(NOT FREETYPE_FOUND)\n\t\tmessage(STATUS \"FREETYPE:   NO\")\n\telse()\n\t\tmessage(STATUS \"FREETYPE:   ${FREETYPE_DIR} (ver ${FREETYPE_VERSION})\")\n\t\tSET(FREETYPE_INCLUDE_DIRS \"${FREETYPE_DIR}/../../../include/freetype2\")\n\t\tSET(FREETYPE_LIBRARY freetype)\n\t\tget_target_property(FREETYPE_LIBRARIES freetype IMPORTED_LOCATION_RELEASE)\n\t\t#SET(FREETYPE_LIBRARIES ${FREETYPE_LIBRARIES} CACHE STRING \"FREETYPE library\")\n\t\t#SET(FREETYPE_LINK_LIBRARIES ${FREETYPE_LIBRARIES} CACHE STRING \"FREETYPE library\")\n\t\t#SET(FREETYPE_LIBRARIES ${FREETYPE_LIBRARIES})\n\t\tSET(FREETYPE_LINK_LIBRARIES ${FREETYPE_LIBRARIES})\n\t\tSET(FREETYPE_LINK_LIBRARIES_XXXXX ${FREETYPE_LINK_LIBRARIES})\n\t\tMESSAGE(STATUS \"FREETYPE_LIBRARIES: ${FREETYPE_LIBRARIES}\")\n\t\t#SET(FREETYPE_LIBRARIES freetype)\n\t\t#SET(FREETYPE_FOUND ON)\n\tendif()\t\n#\tfind_package(HARFBUZZ CONFIG REQUIRED)\n\tfind_package(HARFBUZZ CONFIG) \n\tif(NOT HARFBUZZ_FOUND)\n\t\tmessage(STATUS \"HARFBUZZ:    NO\")\n\telse()\n\t\tmessage(STATUS \"HARFBUZZ:    ${HARFBUZZ_DIR} (ver ${HARFBUZZ_VERSION})\")\n\t\tSET(HARFBUZZ_INCLUDE_DIRS \"${HARFBUZZ_DIR}/../../../include/harfbuzz\")\n\t\tget_target_property(HARFBUZZ_LIBRARY harfbuzz::harfbuzz IMPORTED_LOCATION_RELEASE)\n\t\t\n\t\t#SET(HARFBUZZ_LIBRARIES ${HARFBUZZ_LIBRARY} CACHE STRING \"HARFBUZZ library\")\n\t\t#SET(HARFBUZZ_LINK_LIBRARIES ${HARFBUZZ_LIBRARY} CACHE STRING \"HARFBUZZ library\")\n\t\tSET(HARFBUZZ_LIBRARIES ${HARFBUZZ_LIBRARY})\n\t\tSET(HARFBUZZ_LINK_LIBRARIES ${HARFBUZZ_LIBRARY})\n\t\tSET(HARFBUZZ_LINK_LIBRARIES_XXXXX ${HARFBUZZ_LINK_LIBRARIES})\n\t\tMESSAGE(STATUS \"HARFBUZZ_LIBRARIES: ${HARFBUZZ_LIBRARIES}\")\n\t\t#IF (WIN32)\n\t\t#\tSET(HARFBUZZ_LIBRARY \"${HARFBUZZ_DIR}/../../harfbuzz.lib\")\n\t\t#ELSE()\n\t\t#\tSET(HARFBUZZ_LIBRARY \"harfbuzz\")\n\t\t#ENDIF()\n\t\t#message(STATUS \"HARFBUZZ_DIR: ${HARFBUZZ_DIR}\")\n\t\t\n\t\t#message(STATUS \"harfbuzz_INCLUDE_DIRS: ${harfbuzz_INCLUDE_DIRS}\")\n\t\t#message(STATUS \"HARFBUZZ_INCLUDE_DIRS: ${HARFBUZZ_INCLUDE_DIRS}\")\n\t\t#SET(HARFBUZZ_FOUND ON)\n\t\t#MESSAGE(STATUS \"Adding include_directory: ${HARFBUZZ_DIR}/../../../include/harfbuzz\")\n\t\tinclude_directories(${HARFBUZZ_INCLUDE_DIRS})\n\tendif()\n#  ELSE()\n#  ENDIF()\nELSE()\n  SET(FREETYPE_LIBRARY \"\")\nENDIF()\n\nIF(WITH_OPENVINO)\n  find_package(TBB CONFIG)\n  find_package(OpenVINO CONFIG)\n  find_package(ngraph CONFIG)\nENDIF()\n\nIF(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Emscripten\")\n  SET(CMAKE_C_FLAGS_RELEASE \"-flto ${CMAKE_C_FLAGS_RELEASE}\")\n  SET(CMAKE_CXX_FLAGS_RELEASE \"-flto ${CMAKE_CXX_FLAGS_RELEASE}\")\n  SET(CMAKE_C_FLAGS_DEBUG \"-flto ${CMAKE_C_FLAGS_DEBUG}\")\n  SET(CMAKE_CXX_FLAGS_DEBUG \"-flto ${CMAKE_CXX_FLAGS_DEBUG}\")\n  SET(CMAKE_EXE_LINKER_FLAGS \"-flto ${CMAKE_EXE_LINKER_FLAGS}\")\n  SET(CMAKE_SHARED_LINKER_FLAGS \"-flto ${CMAKE_SHARED_LINKER_FLAGS}\")\n  #SET(CMAKE_STATIC_LINKER_FLAGS \"-flto ${CMAKE_STATIC_LINKER_FLAGS}\")\n\n  set(CMAKE_AR \"emcc\")\n  set(CMAKE_STATIC_LIBRARY_SUFFIX \".bc\")\n  set(CMAKE_C_CREATE_STATIC_LIBRARY \"<CMAKE_AR> -flto -r -o <TARGET> <LINK_FLAGS> <OBJECTS>\")\n  set(CMAKE_CXX_CREATE_STATIC_LIBRARY \"<CMAKE_AR> -flto -r -o <TARGET> <LINK_FLAGS> <OBJECTS>\")\n\nENDIF()\n\n#IF( NOT (NETFX_CORE OR ANDROID OR IOS ) )\n  \n  #  IF (NOT WIN32)\n  #    SET(CMAKE_C_FLAGS_RELEASE \"-fPIC ${CMAKE_C_FLAGS_RELEASE}\")\n  #    SET(CMAKE_CXX_FLAGS_RELEASE \"-fPIC ${CMAKE_CXX_FLAGS_RELEASE}\")\n  #    SET(CMAKE_C_FLAGS_DEBUG \"-fPIC ${CMAKE_C_FLAGS_DEBUG}\")\n  #    SET(CMAKE_CXX_FLAGS_DEBUG \"-fPIC ${CMAKE_CXX_FLAGS_DEBUG}\")\n  #    SET(CMAKE_EXE_LINKER_FLAGS \"-fPIC ${CMAKE_EXE_LINKER_FLAGS}\")\n  #    SET(CMAKE_SHARED_LINKER_FLAGS \"-fPIC ${CMAKE_SHARED_LINKER_FLAGS}\")\n  #  ENDIF()\n  #IF (WIN32)\n  #  SET(BUILD_SHARED_LIBS_CACHE ${BUILD_SHARED_LIBS})\n  #  SET(BUILD_SHARED_LIBS OFF)\n  #  SET(CMAKE_EXPORT_NO_PACKAGE_REGISTRY ON)\n    \n    #ADD_SUBDIRECTORY(vtk) # always build vtk as static library\n\t    \n    #SET(BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS_CACHE})\n  #ENDIF()\n  #  IF (NOT WIN32)\n  #    SET(CMAKE_C_FLAGS_RELEASE ${CMAKE_C_FLAGS_RELEASE_CACHE} )\n  #    SET(CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE_CACHE})\n  #  ENDIF()\n#ENDIF()\n\nSET(OPENCV_SUBFOLDER ${CMAKE_CURRENT_SOURCE_DIR}/opencv)\nSET(OPENCV_CONTRIB_SUBFOLDER ${CMAKE_CURRENT_SOURCE_DIR}/opencv_contrib)\nSET(OPENCV_EXTRA_SUBFOLDER ${CMAKE_CURRENT_SOURCE_DIR}/opencv_extra)\n\n\n  \nSET(CSC_PREFERRED_VERSION \"4.0\")\nIF((NOT NETFX_CORE) AND MSVC) \n  #SET CSC 3.5 as the prefered compiler for EMGU CV\n  SET(CSC_TARGET_FRAMEWORK \"3.5\" CACHE STRING \"C#  target framework\")\nELSE()\n  #SET CSC 4.5 (in the .Net framework 4.0 folder) as the prefered compiler for EMGU CV\n  SET(CSC_TARGET_FRAMEWORK \"\" CACHE STRING \"C# target framework\")\nENDIF()\n  \nFIND_PACKAGE(CSharp REQUIRED)\nINCLUDE (CSharpMacros)\n\nIF (NOT (DOTNET_FOUND))\n  IF (IS_UBUNTU)\n    MESSAGE(FATAL_ERROR \"dotnet sdk is required to build Emgu CV on Ubuntu, please follow the instructions to install dotnet sdk on Ubuntu: https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current\")  \n  ELSEIF(IS_DEBIAN OR IS_RHEL)\n    MESSAGE(FATAL_ERROR \"dotnet sdk is required to build Emgu CV\")  \n  ENDIF()\nENDIF()\n\nINCLUDE (CheckTargetArch)\nINCLUDE (OpenCVVersion)\n\nIF(WIN32)\n  INCLUDE (FindCodeSign)\nENDIF()\n\n#SET(LIBRARY_3RDPARTY_PATH ${CMAKE_CURRENT_SOURCE_DIR}/lib/3rdParty)\n\n\n# ----------------------------------------------------------------------------\n#  Check if 32bit or 64-bit\n# ----------------------------------------------------------------------------\nCHECK_TARGET_ARCH()\n\nSET(EMGUCV_ARCH ${TARGET_ARCH_NAME})\nMESSAGE(STATUS \"Building for ${EMGUCV_ARCH}\")\n\nIF ( TARGET_ARCH_64 )\n  IF (TARGET_ARM)\n    SET(NUGET_NATIVE_PLATFORM_ID_ARCH \"arm64\")\n  ELSE()\n    SET(NUGET_NATIVE_PLATFORM_ID_ARCH \"x64\")\n  ENDIF()\nELSE()\n  IF (TARGET_ARM)\n    SET(NUGET_NATIVE_PLATFORM_ID_ARCH \"arm\")\n  ELSE()\n    SET(NUGET_NATIVE_PLATFORM_ID_ARCH \"x86\")\n  ENDIF()\nENDIF()\n\nIF(WIN32 AND CV_ICC)\n  #  SET(CV_ICC_ADDITIONAL_FLAGS_RELEASE \"/O3 /QaxCORE-AVX2,AVX,SSE4.1,SSE3 /Qparallel /Qopt-report:1 /Qopt-report-phase:vec /Qopt-report-phase:par /Qopt-report-file:stderr /Qipo /Qunroll-aggressive\")\n  SET(CV_ICC_ADDITIONAL_FLAGS_RELEASE \"/O3 /QaxCORE-AVX2,AVX,SSE4.1,SSE3 /Qparallel /Qopt-report:1 /Qopt-report-phase:vec /Qopt-report-phase:par /Qipo /Qrestrict /Ot\")\n  STRING(REGEX REPLACE \"/O2\" ${CV_ICC_ADDITIONAL_FLAGS_RELEASE} CMAKE_C_FLAGS_RELEASE ${CMAKE_C_FLAGS_RELEASE})\n  STRING(REGEX REPLACE \"/O2\" ${CV_ICC_ADDITIONAL_FLAGS_RELEASE} CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})\n  SET(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /NODEFAULTLIB:\\\"libcmt\\\"\")\n  SET(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} /NODEFAULTLIB:\\\"libcmt\\\"\")\n  set(EMGUCV_PLATFORM_TOOLSET \"Intel C++ Compiler 19.1\" CACHE STRING \"Platform toolset for Visual Studio\")\nENDIF()\n\nIF(WIN32 AND NOT MINGW)\n  SET(NETFX_CORE OFF CACHE BOOL \"Build Windows Store App\")\n  #  IF(NETFX_CORE)\n  #    add_definitions(-DWINAPI_FAMILY=WINAPI_FAMILY_APP -DWINVER=0x0602 -D_WIN32_WINNT=0x0602) \n  #\tadd_definitions(-D_UNICODE)\n  #  ENDIF()\nENDIF()\n\nIF(IOS)\n  SET(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/libs)\nELSE()\n  SET(LIBRARY_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/libs)\nENDIF()\n\nIF(NOT WIN32)\n  SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/libs)\nENDIF()\n\nMESSAGE(STATUS \"<<<< EMGUCV_ARCH: ${EMGUCV_ARCH} >>>>\")\nMESSAGE(STATUS \"<<<< CMAKE_SYSTEM_NAME: ${CMAKE_SYSTEM_NAME} >>>>\")\nMESSAGE(STATUS \"<<<< CMAKE_SYSTEM_VERSION: ${CMAKE_SYSTEM_VERSION} >>>>\")\nMESSAGE(STATUS \"<<<< CMAKE_GENERATOR: ${CMAKE_GENERATOR} >>>>\")\nMESSAGE(STATUS \"<<<< CMAKE_HOST_SYSTEM_PROCESSOR: ${CMAKE_HOST_SYSTEM_PROCESSOR} >>>>\")\nMESSAGE(STATUS \"<<<< CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR} >>>>\")\nIF(APPLE)\n  MESSAGE(STATUS \"<<<< CMAKE_APPLE_SILICON_PROCESSOR: ${CMAKE_APPLE_SILICON_PROCESSOR} >>>>\")\nENDIF()\nIF(IPHONESIMULATOR)\n  MESSAGE(STATUS \"<<<< IPHONESIMULATOR: ${IPHONESIMULATOR} >>>>\")\nENDIF()\nIF(IPHONEOS)\n  MESSAGE(STATUS \"<<<< IPHONEOS: ${IPHONEOS} >>>>\")\nENDIF()\n\n\nIF(ANDROID)\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/android/${ANDROID_ABI}\")\nELSEIF(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Emscripten\")\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/webgl\")\nELSEIF(WIN32)\n  MESSAGE(STATUS \"<<<< MSVC_C_ARCHITECTURE_ID: ${MSVC_C_ARCHITECTURE_ID} >>>>\") \n  IF (\"${EMGUCV_ARCH}\" STREQUAL \"win64\")\n    IF(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"WindowsStore\" AND (CMAKE_SYSTEM_VERSION MATCHES 10.0))\n\t  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/win10-x64/native\")\n    ELSE()\n      SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/win-x64/native\")\n    ENDIF()\n  ELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"win-arm64\")\n    IF(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"WindowsStore\" AND (CMAKE_SYSTEM_VERSION MATCHES 10.0))\n\t  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/win10-arm64/native\")\n    ELSE()\n\t  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/win-arm64/native\")\n    ENDIF()\n  ELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"win-arm\")\n    IF(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"WindowsStore\" AND (CMAKE_SYSTEM_VERSION MATCHES 10.0))\n\t  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/win10-arm/native\")\n    ELSE()\n\t  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/win-arm/native\")\n    ENDIF()\n  ELSE()\n    IF(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"WindowsStore\" AND (CMAKE_SYSTEM_VERSION MATCHES 10.0))\n\t#IF(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"WindowsStore\")\n    #  IF(CMAKE_SYSTEM_VERSION MATCHES 10.0)\n\t  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/win10-x86/native\")    \n\tELSE()\n\t  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/win-x86/native\")\n\tENDIF()\n  ENDIF()\n  #MESSAGE(STATUS \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> CMAKE_SYSTEM_NAME: ${CMAKE_SYSTEM_NAME}\")\n  #MESSAGE(STATUS \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> EMGUCV_ARCH: ${EMGUCV_ARCH}\")\n  #MESSAGE(STATUS \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER: ${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}\")\nELSEIF(APPLE AND NOT IOS)\n  IF (\"${EMGUCV_ARCH}\" STREQUAL \"arm64\")\n    SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/osx/native/arm64\")\n  ELSE()\n    SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/osx/native/x64\")\n  ENDIF()\nELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"ubuntu_x64\")\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/ubuntu-x64/native\")\nELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"ubuntu_x86\")\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/ubuntu-x86/native\")\nELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"ubuntu_arm64\")\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/ubuntu-arm64/native\")\nELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"ubuntu_arm\")\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/ubuntu-arm/native\")\nELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"rhel_x64\")\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/rhel-x64/native\")\nELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"rhel_x86\")\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/rhel-x86/native\")\nELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"rhel_arm64\")\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/rhel-arm64/native\")\nELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"rhel_arm\")\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/rhel-arm/native\")\nELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"debian_arm\")\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/linux-arm/native\")\n  ELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"debian_arm64\")\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/linux-arm64/native\")\nELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"arm64\")\n  IF(IPHONEOS)\n    SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/iphoneos_arm64\")\n  ELSEIF(IPHONESIMULATOR)\n    SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/simulator_arm64\")\n  ELSE()\n    SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/arm64\")\n  ENDIF()\nELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"arm\")\n  IF(IPHONEOS)\n    SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/iphoneos_arm\")\n  ELSEIF(IPHONESIMULATOR)\n    SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/simulator_arm\")\n  ELSE()\n    SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/arm\")\n  ENDIF()\nELSE()\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"\")\nENDIF()\n\nSET(UNMANAGED_LIBRARY_OUTPUT_PATH \"${CMAKE_SOURCE_DIR}/libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}\")\nIF(ANDROID)\n  SET(LIBRARY_OUTPUT_PATH ${UNMANAGED_LIBRARY_OUTPUT_PATH})\nENDIF()\nFILE(MAKE_DIRECTORY ${UNMANAGED_LIBRARY_OUTPUT_PATH})\n\nSET(UNMANAGED_DLL_EXTRA)\n\nMACRO(CHECK_BINARY_EXIST folder pattern property_name second_check)\n  #IF(\"${UNMANAGED_LIBRARY_OUTPUT_PATH}\" STREQUAL \"${CMAKE_CURRENT_SOURCE_DIR}/${folder}\")\n  #  SET(${property_name} ON)\n  #ELSE()\n    FILE(GLOB DLL_LIST \"${CMAKE_CURRENT_SOURCE_DIR}/${folder}/${pattern}\")\n    LIST(LENGTH DLL_LIST DLL_LIST_LENGTH)\n    IF(DLL_LIST_LENGTH GREATER 0)\n      LIST(APPEND UNMANAGED_DLL_EXTRA ${DLL_LIST})\n      MESSAGE(STATUS \"Including the following files in package: ${DLL_LIST}\")\n      INSTALL(\n\t   FILES\n\t   ${DLL_LIST}\n\t   DESTINATION ${folder}\n\t   COMPONENT emgucv_binary\n\t   )  \n      SET(${property_name} ON)\n    ELSE()\n      SET(${property_name} ${second_check})\n    ENDIF()\n  #ENDIF()\n  #MESSAGE(STATUS \"Property - ${property_name}: ${${property_name}}\")\n  IF(${${property_name}})\n    MESSAGE(STATUS \"${property_name}: ${${property_name}}\")\n  ENDIF()\nENDMACRO()\n\n#MESSAGE(STATUS \"CMAKE_SYSTEM_NAME: ${CMAKE_SYSTEM_NAME}\")\nSET(IS_IOS_BUILD OFF)\nSET(IS_MAC_CATALYST_BUILD OFF)\nSET(IS_MAC_CATALYST_ARM64_BUILD OFF)\nSET(IS_MAC_CATALYST_X86_64_BUILD OFF)  \nSET(IS_MAC_BUILD OFF)\nSET(IS_MAC_ARM64_BUILD OFF)\nSET(IS_MAC_X86_64_BUILD OFF)\n\nIF(MAC_CATALYST)\n  SET(IS_MAC_CATALYST_BUILD ON)\n  MESSAGE(STATUS \"IS_MAC_CATALYST_BUILD: ${IS_MAC_CATALYST_BUILD}\")\n\n  IF (IS_MAC_CATALYST_BUILD AND (\"${EMGUCV_ARCH}\" STREQUAL \"arm64\"))\n    SET(IS_MAC_CATALYST_ARM64_BUILD ON)\n\tMESSAGE(STATUS \"IS_MAC_CATALYST_ARM64_BUILD: ${IS_MAC_CATALYST_ARM64_BUILD}\")\n  ENDIF()\n\n  IF (IS_MAC_CATALYST_BUILD AND (\"${EMGUCV_ARCH}\" STREQUAL \"x86_64\"))\n    SET(IS_MAC_CATALYST_X86_64_BUILD ON)\n\tMESSAGE(STATUS \"IS_MAC_CATALYST_X86_64_BUILD: ${IS_MAC_CATALYST_X86_64_BUILD}\")\n  ENDIF()\nELSEIF(IOS)\n  SET(IS_IOS_BUILD ON)\n  MESSAGE(STATUS \"IS_IOS_BUILD: ${IS_IOS_BUILD}\")\n  \n  SET(IS_IOS_I386_BUILD OFF)\n  IF(IS_IOS_BUILD AND (\"${IOS_ARCH}\" STREQUAL \"i386\"))\n    SET(IS_IOS_I386_BUILD ON)\n    MESSAGE(STATUS \"IS_IOS_I386_BUILD: ${IS_IOS_I386_BUILD}\")\n  ENDIF()\n  #CHECK_BINARY_EXIST(\"libs/iOS\" \"libcvextern_i386.a\" HAVE_IOS_I386 ${IS_IOS_I386_BUILD})\n  \n  SET(IS_IOS_X86_64_BUILD OFF)\n  IF(IS_IOS_BUILD AND (\"${IOS_ARCH}\" STREQUAL \"x86_64\"))\n    SET(IS_IOS_X86_64_BUILD ON)\n    MESSAGE(STATUS \"IS_IOS_X86_64_BUILD: ${IS_IOS_X86_64_BUILD}\")\n  ENDIF()\n  #CHECK_BINARY_EXIST(\"libs/iOS\" \"libcvextern_x86_64.a\" HAVE_IOS_X86_64 ${IS_IOS_X86_64_BUILD})\n  \n  SET(IS_IOS_ARMV7S_BUILD OFF)\n  IF(IS_IOS_BUILD AND (\"${IOS_ARCH}\" STREQUAL \"armv7s\"))\n    SET(IS_IOS_ARMV7S_BUILD ON)\n    MESSAGE(STATUS \"IS_IOS_ARMV7S_BUILD: ${IS_IOS_ARMV7S_BUILD}\")\n  ENDIF()\n  #CHECK_BINARY_EXIST(\"libs/iOS\" \"libcvextern_armv7s.a\" HAVE_IOS_ARMV7S ${IS_IOS_ARMV7S_BUILD})\n  \n  SET(IS_IOS_ARMV7_BUILD OFF)\n  IF(IS_IOS_BUILD AND (\"${IOS_ARCH}\" STREQUAL \"armv7\"))\n    SET(IS_IOS_ARMV7_BUILD ON)\n    MESSAGE(STATUS \"IS_IOS_ARMV7_BUILD: ${IS_IOS_ARMV7_BUILD}\")\n  ENDIF()\n  #CHECK_BINARY_EXIST(\"libs/iOS\" \"libcvextern_armv7.a\" HAVE_IOS_ARMV7 ${IS_IOS_ARMV7_BUILD})\n  \n  SET(IS_IOS_ARM64_BUILD OFF)\n  IF(IS_IOS_BUILD AND (\"${IOS_ARCH}\" STREQUAL \"arm64\"))\n    SET(IS_IOS_ARM64_BUILD ON)\n    MESSAGE(STATUS \"IS_IOS_ARM64_BUILD: ${IS_IOS_ARM64_BUILD}\")\n  ENDIF()\n  #CHECK_BINARY_EXIST(\"libs/iOS\" \"libcvextern_arm64.a\" HAVE_IOS_ARM64 ${IS_IOS_ARM64_BUILD})\nELSEIF(APPLE)\n  SET(IS_MAC_BUILD ON)\n  MESSAGE(STATUS \"IS_MAC_BUILD: ${IS_MAC_BUILD}\")\n\n  IF (\"${EMGUCV_ARCH}\" STREQUAL \"arm64\")\n    SET(IS_MAC_ARM64_BUILD ON)\n\tMESSAGE(STATUS \"IS_MAC_ARM64_BUILD: ${IS_MAC_ARM64_BUILD}\")\n  ELSEIF (\"${EMGUCV_ARCH}\" STREQUAL \"x86_64\")\n    SET(IS_MAC_X86_64_BUILD ON)\n\tMESSAGE(STATUS \"IS_MAC_X86_64_BUILD: ${IS_MAC_X86_64_BUILD}\")\n  ENDIF()\n\nENDIF()\n\nCHECK_BINARY_EXIST(\"libs/iOS\" \"libcvextern_iphoneos.a\" HAVE_IOS_DEVICE ${IS_IOS_BUILD})\nCHECK_BINARY_EXIST(\"libs/iOS\" \"libcvextern_simulator.a\" HAVE_IOS_SIMULATOR ${IS_IOS_BUILD})\nCHECK_BINARY_EXIST(\"libs/iOS\" \"libcvextern_universal.a\" HAVE_IOS_UNIVERSAL ${IS_IOS_BUILD})\nIF (HAVE_IOS_DEVICE OR HAVE_IOS_SIMULATOR OR HAVE_IOS_UNIVERSAL)\n  SET(HAVE_IOS ON)\n  MESSAGE(STATUS \"HAVE_IOS: ${HAVE_IOS}\")\nELSE()\n  SET(HAVE_IOS OFF)\nENDIF()\nCHECK_BINARY_EXIST(\"libs/Build/Emgu.CV.runtime.maui.ios/AnyCPU/Release/net${DOTNET_VERSION_MAJOR}.0-ios\" \"Emgu.CV.runtime.maui.ios.dll\" HAVE_MAUI_IOS ${HAVE_IOS})\n\nCHECK_BINARY_EXIST(\"libs/iOS\" \"libcvextern_catalyst_arm64.a\" HAVE_MAC_CATALYST_ARM64 ${IS_MAC_CATALYST_ARM64_BUILD})\nCHECK_BINARY_EXIST(\"libs/iOS\" \"libcvextern_catalyst_x86_64.a\" HAVE_MAC_CATALYST_X86_64 ${IS_MAC_CATALYST_X86_64_BUILD})\nIF (HAVE_MAC_CATALYST_ARM64 OR HAVE_MAC_CATALYST_X86_64)\n  SET(HAVE_MAC_CATALYST ON)\n  MESSAGE(STATUS \"HAVE_MAC_CATALYST: ${HAVE_MAC_CATALYST}\")\nELSE()\n  SET(HAVE_MAC_CATALYST OFF)\nENDIF()\nCHECK_BINARY_EXIST(\"libs/Build/Emgu.CV.runtime.maui.macos/AnyCPU/Release/net${DOTNET_VERSION_MAJOR}.0-maccatalyst\" \"Emgu.CV.runtime.maui.macos.dll\" HAVE_MAUI_MAC ${HAVE_MAC_CATALYST})\n\n\n#IF(NOT HAVE_IOS)\n#  IF(HAVE_IOS_I386 OR HAVE_IOS_X86_64 OR HAVE_IOS_ARMV7S OR HAVE_IOS_ARMV7 OR HAVE_IOS_ARM64)\n#    SET(HAVE_IOS ON) \n#  ENDIF()\n#ENDIF()\n\n#SET(HAVE_IOS_ALL_ARCH OFF)\n#IF(HAVE_IOS_I386 AND HAVE_IOS_X86_64 AND HAVE_IOS_ARMV7S AND HAVE_IOS_ARMV7 AND HAVE_IOS_ARM64)\n#  SET(HAVE_IOS_ALL_ARCH ON) \n#ENDIF()\n#IF(HAVE_IOS_ALL_ARCH)\n#  MESSAGE(STATUS \"HAVE_IOS_ALL_ARCH: ${HAVE_IOS_ALL_ARCH}\")\n#ENDIF()\n\n#IF(HAVE_IOS)\n#  MESSAGE(STATUS \"HAVE_IOS: ON\")\n#ENDIF()\n\n\nSET(IS_MACOS_BUILD OFF)\nIF(APPLE AND (NOT IOS))\n  SET(IS_MACOS_BUILD ON)\n  MESSAGE(STATUS \"IS_MACOS_BUILD: ${IS_MACOS_BUILD}\")\nENDIF()\nCHECK_BINARY_EXIST(\"libs/runtimes/osx/native\" \"lib*.dylib\" HAVE_MACOS ${IS_MACOS_BUILD})\n\nSET(IS_ANDROID_ARM64_V8A_BUILD OFF)\nIF(ANDROID AND (\"${ANDROID_ABI}\" STREQUAL \"arm64-v8a\"))\n  SET(IS_ANDROID_ARM64_V8A_BUILD ON)\n  MESSAGE(STATUS \"IS_ANDROID_ARM64_V8A_BUILD: ${IS_ANDROID_ARM64_V8A_BUILD}\")\nENDIF()\nCHECK_BINARY_EXIST(\"libs/android/arm64-v8a\" \"*.so\" HAVE_ANDROID_ARM64_V8A ${IS_ANDROID_ARM64_V8A_BUILD})\n\n#SET(IS_ANDROID_ARMEABI_BUILD OFF)\n#IF(ANDROID AND (\"${ANDROID_ABI}\" STREQUAL \"armeabi\"))\n#  SET(IS_ANDROID_ARMEABI_BUILD ON)\n#  MESSAGE(STATUS \"IS_ANDROID_ARMEABI_BUILD: ${IS_ANDROID_ARMEABI_BUILD}\")\n#ENDIF()\n#CHECK_BINARY_EXIST(\"libs/android/armeabi\" \"*.so\" HAVE_ANDROID_ARMEABI ${IS_ANDROID_ARMEABI_BUILD})\n\nSET(IS_ANDROID_ARMEABI_V7A_BUILD OFF)\nIF(ANDROID AND (\"${ANDROID_ABI}\" STREQUAL \"armeabi-v7a\"))\n  SET(IS_ANDROID_ARMEABI_V7A_BUILD ON)\n  MESSAGE(STATUS \"IS_ANDROID_ARMEABI_V7A_BUILD: ${IS_ANDROID_ARMEABI_V7A_BUILD}\")\nENDIF()\nCHECK_BINARY_EXIST(\"libs/android/armeabi-v7a\" \"*.so\" HAVE_ANDROID_ARMEABI_V7A ${IS_ANDROID_ARMEABI_V7A_BUILD})\n\nSET(IS_ANDROID_X86_BUILD OFF)\nIF(ANDROID AND (\"${ANDROID_ABI}\" STREQUAL \"x86\"))\n  SET(IS_ANDROID_X86_BUILD ON)\n  MESSAGE(STATUS \"IS_ANDROID_X86_BUILD: ${IS_ANDROID_X86_BUILD}\")\nENDIF()\nCHECK_BINARY_EXIST(\"libs/android/x86\" \"*.so\" HAVE_ANDROID_X86 ${IS_ANDROID_X86_BUILD})\n\nSET(IS_ANDROID_X86_64_BUILD OFF)\nIF(ANDROID AND (\"${ANDROID_ABI}\" STREQUAL \"x86_64\"))\n  SET(IS_ANDROID_X86_64_BUILD ON)\n  MESSAGE(STATUS \"IS_ANDROID_X86_64_BUILD: ${IS_ANDROID_X86_64_BUILD}\")\nENDIF()\nCHECK_BINARY_EXIST(\"libs/android/x86_64\" \"*.so\" HAVE_ANDROID_X86_64 ${IS_ANDROID_X86_64_BUILD})\n\nSET(HAVE_ANDROID OFF)\nIF(HAVE_ANDROID_ARM64_V8A OR HAVE_ANDROID_ARMEABI_V7A OR HAVE_ANDROID_X86 OR HAVE_ANDROID_X86_64)\n  SET(HAVE_ANDROID ON) \n  MESSAGE(STATUS \"HAVE_ANDROID: ${HAVE_ANDROID}\")\nENDIF()\n\nSET(HAVE_ANDROID_ALL_ARCH OFF)\nIF(HAVE_ANDROID_ARM64_V8A AND HAVE_ANDROID_ARMEABI_V7A AND HAVE_ANDROID_X86 AND HAVE_ANDROID_X86_64)\n  SET(HAVE_ANDROID_ALL_ARCH ON)\n  MESSAGE(STATUS \"HAVE_ANDROID_ALL_ARCH: ${HAVE_ANDROID_ALL_ARCH}\")\nENDIF()\n\n\n\nSET(IS_WINSTORE_10_X86_BUILD OFF)\nIF( (\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"WindowsStore\") AND (CMAKE_SYSTEM_VERSION MATCHES 10.0) AND (\"${EMGUCV_ARCH}\" STREQUAL \"win32\") )\n  SET(IS_WINSTORE_10_X86_BUILD ON)\n  MESSAGE(STATUS \"IS_WINSTORE_10_X86_BUILD: ${IS_WINSTORE_10_X86_BUILD}\")\nENDIF()\nCHECK_BINARY_EXIST(\"libs/runtimes/win10-x86/native\" \"*.dll\" HAVE_WINSTORE_10_X86 ${IS_WINSTORE_10_X86_BUILD})\n\nSET(IS_WINSTORE_10_X64_BUILD OFF)\nIF( (\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"WindowsStore\") AND (CMAKE_SYSTEM_VERSION MATCHES 10.0) AND (\"${EMGUCV_ARCH}\" STREQUAL \"win64\") )\n  SET(IS_WINSTORE_10_X64_BUILD ON)\n  MESSAGE(STATUS \"IS_WINSTORE_10_X64_BUILD: ${IS_WINSTORE_10_X64_BUILD}\")\nENDIF()\nCHECK_BINARY_EXIST(\"libs/runtimes/win10-x64/native\" \"*.dll\" HAVE_WINSTORE_10_X64 ${IS_WINSTORE_10_X64_BUILD})\n\nSET(IS_WINSTORE_10_ARM_BUILD OFF)\nIF((\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"WindowsStore\") AND (CMAKE_SYSTEM_VERSION MATCHES 10.0) AND (\"${EMGUCV_ARCH}\" STREQUAL \"arm\"))\n  SET(IS_WINSTORE_10_ARM_BUILD ON)\n  MESSAGE(STATUS \"IS_WINSTORE_10_ARM_BUILD: ${IS_WINSTORE_10_ARM_BUILD}\")\nENDIF()\nCHECK_BINARY_EXIST(\"libs/runtimes/win10-arm/native\" \"*.dll\" HAVE_WINSTORE_10_ARM ${IS_WINSTORE_10_ARM_BUILD})\n\nSET(IS_WINSTORE_10_ARM64_BUILD OFF)\nIF((\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"WindowsStore\") AND (CMAKE_SYSTEM_VERSION MATCHES 10.0) AND (\"${EMGUCV_ARCH}\" STREQUAL \"arm64\"))\n  SET(IS_WINSTORE_10_ARM64_BUILD ON)\n  MESSAGE(STATUS \"IS_WINSTORE_10_ARM64_BUILD: ${IS_WINSTORE_10_ARM64_BUILD}\")\nENDIF()\nCHECK_BINARY_EXIST(\"libs/runtimes/win10-arm64/native\" \"*.dll\" HAVE_WINSTORE_10_ARM64 ${IS_WINSTORE_10_ARM64_BUILD})\n\nSET(IS_WINDESKTOP_X86_BUILD OFF)\nIF (WIN32 AND (\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Windows\") AND (\"${EMGUCV_ARCH}\" STREQUAL \"win32\") AND (NOT ANDROID)) \n  SET (IS_WINDESKTOP_X86_BUILD ON)\n  MESSAGE(STATUS \"IS_WINDESKTOP_X86_BUILD: ${IS_WINDESKTOP_X86_BUILD}\")\nENDIF()\nCHECK_BINARY_EXIST(\"libs/runtimes/win-x86/native\" \"*.dll\" HAVE_WINDESKTOP_X86 ${IS_WINDESKTOP_X86_BUILD})\n\nSET (IS_WINDESKTOP_X64_BUILD OFF)\nIF (WIN32 AND (\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Windows\") AND (\"${EMGUCV_ARCH}\" STREQUAL \"win64\") AND (NOT ANDROID)) \n  SET (IS_WINDESKTOP_X64_BUILD ON)\n  MESSAGE(STATUS \"IS_WINDESKTOP_X64_BUILD: ${IS_WINDESKTOP_X64_BUILD}\")\nENDIF()\nCHECK_BINARY_EXIST(\"libs/runtimes/win-x64/native\" \"*.dll\" HAVE_WINDESKTOP_X64 ${IS_WINDESKTOP_X64_BUILD})\n\nSET (IS_WINDESKTOP_ARM64_BUILD OFF)\nIF (WIN32 AND (\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Windows\") AND (\"${EMGUCV_ARCH}\" STREQUAL \"arm64\") AND (NOT ANDROID)) \n  SET (IS_WINDESKTOP_ARM64_BUILD ON)\n  MESSAGE(STATUS \"IS_WINDESKTOP_ARM64_BUILD: ${IS_WINDESKTOP_ARM64_BUILD}\")\nENDIF()\nCHECK_BINARY_EXIST(\"libs/runtimes/win-arm64/native\" \"*.dll\" HAVE_WINDESKTOP_ARM64 ${IS_WINDESKTOP_ARM64_BUILD})\n\nSET(HAVE_WINDESKTOP OFF)\nIF (HAVE_WINDESKTOP_X86 OR HAVE_WINDESKTOP_X64 OR HAVE_WINDESKTOP_ARM64)\n  SET(HAVE_WINDESKTOP ON)\nENDIF()\n\nSET(IS_DEBIAN_ARM_BUILD OFF)\nSET(IS_DEBIAN_ARM64_BUILD OFF)\nIF (IS_DEBIAN) \n  IF(IS_ARM)\n    SET (IS_DEBIAN_ARM_BUILD ON)\n    MESSAGE(STATUS \"IS_DEBIAN_ARM_BUILD: ${IS_DEBIAN_ARM_BUILD}\")\n  ELSE(IS_ARM64)\n    SET (IS_DEBIAN_ARM64_BUILD ON)\n    MESSAGE(STATUS \"IS_DEBIAN_ARM64_BUILD: ${IS_DEBIAN_ARM64_BUILD}\")\n  ENDIF() \nENDIF()\n\nSET (IS_DEBIAN_BUILD OFF)\nIF(IS_DEBIAN_ARM_BUILD OR IS_DEBIAN_ARM64_BUILD)\n  SET (IS_DEBIAN_BUILD ON)\nENDIF()\n\n\nCHECK_BINARY_EXIST(\"libs/runtimes/linux-arm/native\" \"*.so\" HAVE_LINUX_ARM ${IS_DEBIAN_ARM_BUILD})\nCHECK_BINARY_EXIST(\"libs/runtimes/linux-arm64/native\" \"*.so\" HAVE_LINUX_ARM64 ${IS_DEBIAN_ARM64_BUILD})\n\nIF(IS_DEBIAN_ARM_BUILD)\n  SET(NUGET_NATIVE_PLATFORM_ID_DEBIAN \"linux-${NUGET_NATIVE_PLATFORM_ID_ARCH}\")\n  MESSAGE(STATUS \"NUGET_NATIVE_PLATFORM_ID_DEBIAN: ${NUGET_NATIVE_PLATFORM_ID_DEBIAN}\") \nELSE()\n  SET(NUGET_NATIVE_PLATFORM_ID_DEBIAN \"linux-arm\")  \nENDIF()\nSTRING(TOLOWER \"${NUGET_NATIVE_PLATFORM_ID_DEBIAN}\" NUGET_NATIVE_PLATFORM_ID_DEBIAN)\n\nSET(IS_UBUNTU_X86_BUILD OFF)\nIF ((\"${TARGET_ARCH_NAME}\" STREQUAL \"ubuntu_x86\"))\n  SET(IS_UBUNTU_X86_BUILD ON)\n  MESSAGE(STATUS \"IS_UBUNTU_X86_BUILD: ${IS_UBUNTU_X86_BUILD}\")\nENDIF()\nCHECK_BINARY_EXIST(\"libs/runtimes/ubuntu-x86/native\" \"*.so\" HAVE_UBUNTU_X86 ${IS_UBUNTU_X86_BUILD})\n\nSET(IS_UBUNTU_X64_BUILD OFF)\nIF ((\"${TARGET_ARCH_NAME}\" STREQUAL \"ubuntu_x64\"))\n  SET(IS_UBUNTU_X64_BUILD ON)\n  MESSAGE(STATUS \"IS_UBUNTU_X64_BUILD: ${IS_UBUNTU_X64_BUILD}\")\nENDIF()\nCHECK_BINARY_EXIST(\"libs/runtimes/ubuntu-x64/native\" \"*.so\" HAVE_UBUNTU_X64 ${IS_UBUNTU_X64_BUILD})\n\nSET(IS_UBUNTU_ARM64_BUILD OFF)\nIF ((\"${TARGET_ARCH_NAME}\" STREQUAL \"ubuntu_arm64\"))\n  SET(IS_UBUNTU_ARM64_BUILD ON)\n  MESSAGE(STATUS \"IS_UBUNTU_ARM64_BUILD: ${IS_UBUNTU_ARM64_BUILD}\")\nENDIF()\nCHECK_BINARY_EXIST(\"libs/runtimes/ubuntu-arm64/native\" \"*.so\" HAVE_UBUNTU_ARM64 ${IS_UBUNTU_ARM64_BUILD})\n\nSET(IS_RHEL_X64_BUILD OFF)\nIF ((\"${TARGET_ARCH_NAME}\" STREQUAL \"rhel_x64\"))\n  SET(IS_RHEL_X64_BUILD ON)\n  MESSAGE(STATUS \"IS_RHEL_X64_BUILD: ${IS_RHEL_X64_BUILD}\")\nENDIF()\nCHECK_BINARY_EXIST(\"libs/runtimes/rhel-x64/native\" \"*.so\" HAVE_RHEL_X64 ${IS_RHEL_X64_BUILD})\n\n#SET(IS_UBUNTU_ARM64_BUILD OFF)\n#IF ((\"${TARGET_ARCH_NAME}\" STREQUAL \"ubuntu_arm64\"))\n#  SET(IS_UBUNTU_ARM64_BUILD ON)\n#  MESSAGE(STATUS \"IS_UBUNTU_ARM64_BUILD: ${IS_UBUNTU_ARM64_BUILD}\")\n#ENDIF()\n#CHECK_BINARY_EXIST(\"libs/arm64\" \"*.so\" HAVE_LINUX_ARM64 ${IS_UBUNTU_ARM64_BUILD})\n\nIF ( IS_UBUNTU )\n  #MESSAGE(STATUS \"TARGET_ARCH_64: ${TARGET_ARCH_64}\")\n  #SET(NUGET_NATIVE_PLATFORM_ID_UBUNTU \"${LSB_RELEASE_ID_SHORT}.${LSB_RELEASE_RELEASE_SHORT}-${NUGET_NATIVE_PLATFORM_ID_ARCH}\")\n  IF (NOT (\"\" STREQUAL \"${LSB_RELEASE_ID_SHORT}\"))\n    SET(NUGET_NATIVE_PLATFORM_ID_UBUNTU \"${LSB_RELEASE_ID_SHORT}-${NUGET_NATIVE_PLATFORM_ID_ARCH}\")\n  ELSEIF (NOT (\"\" STREQUAL \"${DISTRO_ID}\"))  \n    SET(NUGET_NATIVE_PLATFORM_ID_UBUNTU \"${DISTRO_ID}-${NUGET_NATIVE_PLATFORM_ID_ARCH}\")\n  ENDIF()\n  MESSAGE(STATUS \"NUGET_NATIVE_PLATFORM_ID_UBUNTU: ${NUGET_NATIVE_PLATFORM_ID_UBUNTU}\")\nELSE()\n  SET(UBUNTU_DEFAULT_PLATFORM_ID \"ubuntu\")\n  IF (HAVE_UBUNTU_X86)\n    SET(NUGET_NATIVE_PLATFORM_ID_UBUNTU \"${UBUNTU_DEFAULT_PLATFORM_ID}-x86\")\n  ENDIF()\n  IF (HAVE_UBUNTU_X64)\n    SET(NUGET_NATIVE_PLATFORM_ID_UBUNTU \"${UBUNTU_DEFAULT_PLATFORM_ID}-x64\")\n  ENDIF()\n  IF (HAVE_UBUNTU_ARM64)\n    SET(NUGET_NATIVE_PLATFORM_ID_UBUNTU \"${UBUNTU_DEFAULT_PLATFORM_ID}-arm64\")\n  ENDIF()\nENDIF()\nSTRING(TOLOWER \"${NUGET_NATIVE_PLATFORM_ID_UBUNTU}\" NUGET_NATIVE_PLATFORM_ID_UBUNTU)\n\nIF (IS_RHEL)\n  SET(NUGET_NATIVE_PLATFORM_ID_RHEL \"${DISTRO_ID}-${NUGET_NATIVE_PLATFORM_ID_ARCH}\")\n  MESSAGE(STATUS \"NUGET_NATIVE_PLATFORM_ID_RHEL: ${NUGET_NATIVE_PLATFORM_ID_RHEL}\")\nELSE()\n  SET(RHEL_DEFAULT_PLATFORM_ID \"rhel\")\n  IF (HAVE_RHEL_X86)\n    SET(NUGET_NATIVE_PLATFORM_ID_RHEL \"${RHEL_DEFAULT_PLATFORM_ID}-x86\")\n  ENDIF()\n  IF (HAVE_RHEL_X64)\n    SET(NUGET_NATIVE_PLATFORM_ID_RHEL \"${RHEL_DEFAULT_PLATFORM_ID}-x64\")\n  ENDIF()\n  IF (HAVE_RHEL_ARM64)\n    SET(NUGET_NATIVE_PLATFORM_ID_RHEL \"${RHEL_DEFAULT_PLATFORM_ID}-arm64\")\n  ENDIF()\nENDIF()\nSTRING(TOLOWER \"${NUGET_NATIVE_PLATFORM_ID_RHEL}\" NUGET_NATIVE_PLATFORM_ID_RHEL)\n\n\nSET(HAVE_MAUI OFF)\nIF(HAVE_IOS OR HAVE_MAC_CATALYST OR HAVE_ANDROID OR HAVE_WINDESKTOP)\n  SET (HAVE_MAUI ON)\n  MESSAGE(STATUS \"HAVE_MAUI: ${HAVE_MAUI}\")\nENDIF()\n\n#IF (HAVE_MAUI)\nSET(EMGUCV_MAUI_DOTNET_VERSION \"net${DOTNET_VERSION_MAJOR}.0\")\n\nSET(EMGUCV_MAUI_ANDROID_SRC_FOLDER \"${EMGUCV_MAUI_DOTNET_VERSION}-android\")\nSET(EMGUCV_MAUI_IOS_SRC_FOLDER \"${EMGUCV_MAUI_DOTNET_VERSION}-ios\")\nSET(EMGUCV_MAUI_MACOS_SRC_FOLDER \"${EMGUCV_MAUI_DOTNET_VERSION}-maccatalyst\")\nSET(EMGUCV_MAUI_WINDOWS_SRC_FOLDER \"${EMGUCV_MAUI_DOTNET_VERSION}-windows10.0.19041.0\")\n\nSET(EMGUCV_MAUI_ANDROID_DST_FOLDER \"${EMGUCV_MAUI_DOTNET_VERSION}-android33.0\")\nSET(EMGUCV_MAUI_IOS_DST_FOLDER \"${EMGUCV_MAUI_DOTNET_VERSION}-ios16.1\")\nSET(EMGUCV_MAUI_MACOS_DST_FOLDER \"${EMGUCV_MAUI_DOTNET_VERSION}-maccatalyst16.1\")\nSET(EMGUCV_MAUI_WINDOWS_DST_FOLDER \"${EMGUCV_MAUI_DOTNET_VERSION}-windows10.0.19041.0\")\n#ENDIF()\n\n  SET(WINDESKTOP_LABEL \"\")\n  IF(HAVE_WINDESKTOP_X86)\n    SET(WINDESKTOP_LABEL \"${WINDESKTOP_LABEL}_x86\")\n  ENDIF()\n  IF(HAVE_WINDESKTOP_X64)\t\n    SET(WINDESKTOP_LABEL \"${WINDESKTOP_LABEL}_x64\")\n  ENDIF()\n  IF(HAVE_WINDESKTOP_ARM64)\t\n    SET(WINDESKTOP_LABEL \"${WINDESKTOP_LABEL}_arm64\")\n  ENDIF()\n  \n  IF(\"${WINDESKTOP_LABEL}\" STREQUAL \"_x86_x64_arm64\")\n    SET(WINDESKTOP_LABEL \"-windesktop\")\n  ELSEIF(NOT (\"${WINDESKTOP_LABEL}\" STREQUAL \"\"))\n    SET(WINDESKTOP_LABEL \"-windesktop${WINDESKTOP_LABEL}\")\n  ENDIF()\n  \n  SET(WINSTORE_10_LABEL \"\")\n  IF(HAVE_WINSTORE_10_X86)\n    SET(WINSTORE_10_LABEL \"${WINSTORE_10_LABEL}_x86\")\n  ENDIF()\n  IF(HAVE_WINSTORE_10_X64)\n    SET(WINSTORE_10_LABEL \"${WINSTORE_10_LABEL}_x64\")\n  ENDIF()\n  IF(HAVE_WINSTORE_10_ARM)\t\n    SET(WINSTORE_10_LABEL \"${WINSTORE_10_LABEL}_arm\")\n  ENDIF()\n  IF(HAVE_WINSTORE_10_ARM64)\t\n    SET(WINSTORE_10_LABEL \"${WINSTORE_10_LABEL}_arm64\")\n  ENDIF()\n  \n  SET(HAVE_WINSTORE_10 OFF)\n  IF(HAVE_WINSTORE_10_X86 OR HAVE_WINSTORE_10_X64 OR HAVE_WINSTORE_10_ARM OR HAVE_WINSTORE_10_ARM64)\n    SET(HAVE_WINSTORE_10 ON)\n  ENDIF()\n  \n  IF(\"${WINSTORE_10_LABEL}\" STREQUAL \"_x86_x64_arm64\")\n    SET(WINSTORE_10_LABEL \"-UWP\")\n  ELSEIF(NOT (\"${WINSTORE_10_LABEL}\" STREQUAL \"\"))\n    SET(WINSTORE_10_LABEL \"-UWP${WINSTORE_10_LABEL}\")\n  ENDIF()\n  \n  SET(WINDOWS_LABEL \"${WINSTORE_10_LABEL}${WINDESKTOP_LABEL}\")\n  IF (\"${WINDOWS_LABEL}\" STREQUAL \"-UWP-windesktop\")\n    SET(WINDOWS_LABEL \"-windows\")\n  ENDIF()\n  \n  SET(IOS_LABEL \"\")\n  IF(HAVE_IOS)\n    SET(IOS_LABEL \"-ios\")\n  ENDIF()\n  \n  SET(MACOS_LABEL \"\")\n  IF(HAVE_MACOS)\n    SET(MACOS_LABEL \"-macos\")\n  ENDIF()\n\nIF (IS_DEBIAN_ARM_BUILD OR IS_DEBIAN_ARM64_BUILD OR IS_UBUNTU_X64_BUILD OR IS_UBUNTU_X86_BUILD OR IS_UBUNTU_ARM64_BUILD OR HAVE_LINUX_ARM OR HAVE_LINUX_ARM64 OR HAVE_LINUX_X64 OR HAVE_LINUX_X86 OR IS_RHEL_X64_BUILD OR HAVE_RHEL_X64)\n  SET(HAVE_LINUX ON)\nELSE()\n  SET(HAVE_LINUX OFF)\nENDIF()\n\nSET(ANDROID_LABEL \"\")\nIF(HAVE_ANDROID_ARM64_V8A)\n  SET(ANDROID_LABEL \"${ANDROID_LABEL}-arm64-v8a\")\nENDIF()\n#IF(HAVE_ANDROID_ARMEABI)\n#  SET(ANDROID_LABEL \"${ANDROID_LABEL}-armeabi\")\n#ENDIF()\nIF(HAVE_ANDROID_ARMEABI_V7A)\t\n  SET(ANDROID_LABEL \"${ANDROID_LABEL}-armeabi-v7a\")\nENDIF()\nIF(HAVE_ANDROID_X86)\n  SET(ANDROID_LABEL \"${ANDROID_LABEL}-x86\")\nENDIF()\nIF(HAVE_ANDROID_X86_64)\n  SET(ANDROID_LABEL \"${ANDROID_LABEL}-x86_64\")\nENDIF()\n\n#IF(\"${ANDROID_LABEL}\" STREQUAL \"-arm64-v8a-armeabi-armeabi-v7a-x86-x86_64\")\nIF(\"${ANDROID_LABEL}\" STREQUAL \"-arm64-v8a-armeabi-v7a-x86-x86_64\")\n  SET(ANDROID_LABEL \"-android\")\nELSEIF(NOT (\"${ANDROID_LABEL}\" STREQUAL \"\"))\n  SET(ANDROID_LABEL \"-android${ANDROID_LABEL}\")\nENDIF()\n\n#CHECK_BINARY_EXIST(\"libs\" \"Emgu.CV.World*\" HAVE_PREBUILD_EMGU_CV_WORLD OFF)\n#CHECK_BINARY_EXIST(\"libs\" \"Emgu.CV.Platform.IOS.*\" HAVE_PREBUILD_EMGU_CV_IOS OFF)\n#IF(HAVE_PREBUILD_EMGU_CV_IOS)\n#  INSTALL(\n#\tFILES\n#\t\"${CMAKE_SOURCE_DIR}/libs/Emgu.CV.Platform.IOS.dll\"\n#\t\"${CMAKE_SOURCE_DIR}/libs/Emgu.CV.Platform.IOS.xml\"\n#\tDESTINATION \"libs/\"\n#\tCOMPONENT emgucv_binary\n#\t)\n#ENDIF()\n\nIF (HAVE_IOS AND (NOT HAVE_MACOS) AND (NOT HAVE_ANDROID) AND (NOT HAVE_WINSTORE_10) AND (NOT (HAVE_WINDESKTOP_X86 OR HAVE_WINDESKTOP_X64 OR HAVE_WINDESKTOP_ARM64)) AND (NOT HAVE_LINUX))\n  SET(HAVE_IOS_ONLY ON)\nELSE()\n  SET(HAVE_IOS_ONLY OFF)\nENDIF()\n\n# ----------------------------------------------------------------------------\n#  Setup Package information\n# ----------------------------------------------------------------------------\nSET(PACKAGE \"${PROJECT_NAME}\")\nSET(GITHUB_REPO_URL \"https://github.com/emgucv/emgucv\")\nSET(CPACK_PACKAGE_CONTACT \"Emgu CV SUPPORT <support@emgu.com>\")\nSET(PACKAGE_BUGREPORT \"${CPACK_PACKAGE_CONTACT}\")\nSET(PACKAGE_NAME \"${PROJECT_NAME}\")\n\n#SET(CPACK_PACKAGE_NAME \"${PACKAGE_NAME}\")\nSET(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"Emgu CV is a cross platform .Net wrapper to the OpenCV image processing library.\")\n\nSET(CPACK_PACKAGE_NAME \"${PACKAGE_NAME}${IOS_LABEL}${ANDROID_LABEL}${MACOS_LABEL}${WINDOWS_LABEL}\")\n\n#STRING(LENGTH \"${CPACK_PACKAGE_NAME}\" PACKAGE_NAME_LENGTH)\n#IF (${PACKAGE_NAME_LENGTH} GREATER 30)\n#   SET(CPACK_PACKAGE_NAME \"${PACKAGE_NAME}-mixed\")\n#   STRING(LENGTH \"${CPACK_PACKAGE_NAME}\" PACKAGE_NAME_LENGTH)\n#ENDIF()\n\n#IF (APPLE)\n#  SET(CPACK_PACKAGE_NAME \"${CPACK_PACKAGE_NAME}-macos\")\n#ENDIF()\n\nIF(WITH_CUDA)\n  SET(CPACK_PACKAGE_NAME \"${CPACK_PACKAGE_NAME}-cuda\")\nENDIF()\n\nIF(WITH_OPENNI) \n  SET(CPACK_PACKAGE_NAME \"${CPACK_PACKAGE_NAME}-openni\")\nENDIF()\n\nIF(CV_ICC)\n  SET(CPACK_PACKAGE_NAME \"${CPACK_PACKAGE_NAME}-icc\")\nENDIF()\n\n#IF(WITH_TBB)\n#  SET(CPACK_PACKAGE_NAME \"${CPACK_PACKAGE_NAME}-tbb\")\n#ENDIF()\n\nIF(WITH_IPP)\n  SET(CPACK_PACKAGE_NAME \"${CPACK_PACKAGE_NAME}-ipp\")\nENDIF()\n\nIF(WITH_INF_ENGINE OR WITH_OPENVINO)\n  SET(CPACK_PACKAGE_NAME \"${CPACK_PACKAGE_NAME}-dldt\")\nENDIF()\n\nSET(IS_PRO_BUILD FALSE)\nIF(\"${CPACK_PACKAGE_NAME}\" STREQUAL \"${PACKAGE_NAME}-ios-android-macos-windows-ipp-dldt\")\n  SET(CPACK_PACKAGE_NAME \"${PACKAGE_NAME}-pro\")\n  SET(IS_PRO_BUILD TRUE)\nENDIF()\n\n\n#IF(EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Commercial.License.txt\")\n#  SET(LICENSE_FILE_NAME \"Emgu.CV.Commercial.License.txt\")\n#ELSE()\nSET(LICENSE_FILE_NAME \"LICENSE\")\n\nSET(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/${LICENSE_FILE_NAME}\")\n\n#IF (WIN32 OR APPLE OR ANDROID)\nSET(CPACK_PACKAGE_CLI_FOLDER libs)\n#ELSE ()\n#  SET(CPACK_PACKAGE_CLI_FOLDER lib/cli/${PACKAGE_NAME}-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR})\n#ENDIF()\n\n# ----------------------------------------------------------------------------\n#  Build opencv and Emgu.CV.Extern\n# ----------------------------------------------------------------------------\nSET(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${UNMANAGED_LIBRARY_OUTPUT_PATH}\" )\nSET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE \"${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\")\nSET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG \"${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\")\n\n#SET(CMAKE_ARCHIEVE_OUTPUT_DIRECTORY \"${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\")\n#SET(CMAKE_ARCHIEVE_OUTPUT_DIRECTORY_DEBUG \"${CMAKE_ARCHIEVE_OUTPUT_DIRECTORY}\")\n#SET(CMAKE_ARCHIEVE_OUTPUT_DIRECTORY_RELEASE \"${CMAKE_ARCHIEVE_OUTPUT_DIRECTORY}\")\n\n#SET(CMAKE_INSTALL_PREFIX_COPY ${CMAKE_INSTALL_PREFIX})\n#SET(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER})\n#SET(CPACK_PACKAGING_INSTALL_PREFIX ${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER})\n#SET(DESTDIR ${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER})\n#SET(CPACK_OUTPUT_FILE_PREFIX \"x64\")\n\nSET(ENTRYPOINT_CS_STRING \"\")\nSET(ENTRYPOINT_MODULES_STRING \"\")\n\n#Add opencl\n#IF(WIN32 AND (NOT NETFX_CORE) )\n#  IF(WITH_OPENCL)\n#    MESSAGE(STATUS \"Open CL build included\")\n#\tSET(OPENCL_SOURCE_FOLDER \"${CMAKE_CURRENT_SOURCE_DIR}/lib/opencl-icd-1.2.11.0/icd\")\n#\tADD_SUBDIRECTORY(${OPENCL_SOURCE_FOLDER})\n#\t#GET_TARGET_PROPERTY(OPENCL_OUTPUT_NAME OpenCL OUTPUT_NAME)\n\n#\tset(OPENCL_FOUND YES)\n#\tset(OPENCL_LIBRARY \"${CMAKE_CURRENT_SOURCE_DIR}/bin/Release/opencl.lib\" CACHE STRING \"OpenCL library\")\n#\tset(OPENCL_INCLUDE_DIR \"${OPENCL_SOURCE_FOLDER}/inc\" CACHE STRING \"OpenCL include directory\")\n#\tmark_as_advanced(OPENCL_INCLUDE_DIR OPENCL_LIBRARY)\n\n#\tSET(ENTRYPOINT_MODULES_STRING \"${ENTRYPOINT_MODULES_STRING}\n#\t     OpenclLibrary,\")\n#   SET(ENTRYPOINT_CS_STRING \"${ENTRYPOINT_CS_STRING} \n#      /// <summary>\n#      /// The file name of the OpenCL library\n#      /// </summary>\n#      public const string OpenclLibrary = \\\"OpenCL\\\";\")\n#  ELSE()\n#    SET(OPENCL_OUTPUT_NAME \"\")\n#\tMESSAGE(STATUS \"Open CL build not included\")\n#  ENDIF()\n#ENDIF()\n\nSET(CMAKE_OLD_SOURCE_DIR ${CMAKE_SOURCE_DIR})\nSET(CMAKE_SOURCE_DIR ${OPENCV_SUBFOLDER})\nIF(MSVC)\n  set(ENABLE_SOLUTION_FOLDERS ON CACHE BOOL \"Solution folder in Visual Studio\")\nENDIF()\nADD_SUBDIRECTORY(${OPENCV_SUBFOLDER})\n\nSET(CMAKE_SOURCE_DIR ${CMAKE_OLD_SOURCE_DIR})\n\nSET (OPENCV_MODULE_NAME_CANDIDATES\n  core imgproc video flann ml imgcodecs videoio highgui objdetect features2d calib3d\n  cudaarithm cudawarping cudafilters cudaimgproc cudalegacy cudaoptflow \n  cudastereo cudabgsegm cudafeatures2d cudacodec cudaobjdetect\n  photo superres  \n  videostab shape\n  cudev  \n  face ximgproc xobjdetect xfeatures2d xphoto bgsegm optflow\n  stitching plot\n  dnn dnn_objdetect dnn_superres aruco fuzzy viz bioinspired text tracking\n  dpm\n  saliency\n  img_hash\n  phase_unwrapping\n  freetype\n  hfs\n  quality\n  stereo\n  surface_matching\n  alphamat\n  intensity_transform\n  rapid\n  line_descriptor\n  mcc\n  hdf\n  gapi\n  wechat_qrcode\n  structured_light\n  rgbd\n  reg\n  )\n  \nIF(BUILD_opencv_world)\n  LIST (APPEND OPENCV_MODULE_NAME_CANDIDATES world)\nENDIF()\n\nFOREACH(OPENCV_MODULE_NAME ${OPENCV_MODULE_NAME_CANDIDATES})\n  IF(TARGET opencv_${OPENCV_MODULE_NAME})\n    LIST(APPEND OPENCV_MODULE_NAMES ${OPENCV_MODULE_NAME})  \n  ENDIF() \nENDFOREACH()\n\n# ----------------------------------------------------------------------------\n#  Autodetect if we are in a GIT repository\n# ----------------------------------------------------------------------------\n\nIF(GIT_EXECUTABLE)\n  MESSAGE(STATUS \"Extracting Emgu CV git version, please wait...\")\n  EXECUTE_PROCESS(\n    WORKING_DIRECTORY  ${CMAKE_CURRENT_SOURCE_DIR}\n    COMMAND ${GIT_EXECUTABLE} rev-list HEAD --count\n    OUTPUT_VARIABLE GITVERSION_RESULT)\n  STRING(REGEX REPLACE \"^([0123456789]+).*\" \"\\\\1\" EMGUCV_GITVERSION \"${GITVERSION_RESULT}\")\n  STRING(STRIP \"${EMGUCV_GITVERSION}\" EMGUCV_GITVERSION)\n  IF(EMGUCV_GITVERSION MATCHES \"^$\" OR EMGUCV_GITVERSION MATCHES \"^-\")\n    # This is NOT a git repository:\n    SET(EMGUCV_GITVERSION \"0\")\n  ENDIF()\n  MESSAGE(STATUS \"Emgu CV GIT VERSION: ${EMGUCV_GITVERSION}\")\nELSE()\n  # We don't have git:\n  SET(EMGUCV_GITVERSION \"0\")\nENDIF()\n\n\nSET(CPACK_PACKAGE_VENDOR \"Emgu Corporation\")\nSET(CPACK_PACKAGE_VERSION_MAJOR ${OPENCV_VERSION_MAJOR})\nSET(CPACK_PACKAGE_VERSION_MINOR ${OPENCV_VERSION_MINOR})\nSET(CPACK_PACKAGE_VERSION_PATCH ${OPENCV_VERSION_PATCH})\nSET(CPACK_PACKAGE_VERSION \"${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}.${EMGUCV_GITVERSION}\")\nIF(ANDROID)\n  SET(CPACK_PACKAGE_FILE_NAME \"lib${CPACK_PACKAGE_NAME}\")\nELSE()\n  SET(CPACK_PACKAGE_FILE_NAME \"lib${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}\")\nENDIF()\n\nMESSAGE(STATUS \"Package name will be ${CPACK_PACKAGE_NAME}\")\nFILE(WRITE \"emgucv.version.txt\" \"${CPACK_PACKAGE_VERSION}\")\n\nMATH(EXPR CPACK_PACKAGE_VERSION_PATCH_PLUS_ONE \"${CPACK_PACKAGE_VERSION_PATCH}+1\")\n#SET(CPACK_PACKAGE_DEPENDENCY_VERSION \"[${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}.0,${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH_PLUS_ONE}.0)\")\n#SET(CPACK_PACKAGE_DEPENDENCY_VERSION \"(${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}.0, ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH_PLUS_ONE}.0)\")\nSET(CPACK_PACKAGE_DEPENDENCY_VERSION \"${CPACK_PACKAGE_VERSION}\")\nSET(NUGET_PACKAGE_DEPENDENCY_VERSION \"${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}.*\")\n\n#IF(NETFX_CORE)\n#  SET(EMGU_CV_WITH_TESSERACT OFF CACHE BOOL \"BUILD TESSERACT OCR\")\n#ELSE()\nSET(EMGU_CV_WITH_TESSERACT ON CACHE BOOL \"BUILD TESSERACT OCR\")\n#ENDIF()\n\nIF(MSVC AND WIN32 AND EMGUCV_WITH_TESSERACT)\n  SET(TESSERACT_OPENCL OFF CACHE BOOL \"ENABLE OpenCL for TESSERACT\")\nELSE()\n  SET(TESSERACT_OPENCL OFF CACHE BOOL \"ENABLE OpenCL for TESSERACT\")\nENDIF()\n\nIF(TESSERACT_OPENCL)\n  ADD_SUBDIRECTORY(${CMAKE_SOURCE_DIR}/3rdParty/opencl-icd-1.2.11.0/icd)\nENDIF()\n\nIF (TARGET_ARCH_64)\n  SET(EMGU_ENABLE_SSE OFF CACHE BOOL \"ENABLE SSE for Emgu CV\")\nELSE()\n  SET(EMGU_ENABLE_SSE ON CACHE BOOL \"ENABLE SSE for Emgu CV\")\nENDIF()\nADD_SUBDIRECTORY(Emgu.CV.Extern)\nADD_SUBDIRECTORY(Emgu.CV.NativeImage)\n\nIF(NOT (ANDROID OR IOS OR NETFX_CORE OR APPLE))\n  ENABLE_TESTING()\n  ADD_SUBDIRECTORY(tests/cvextern_test)\nENDIF()\n\nSET(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${LIBRARY_OUTPUT_PATH}\" )\nSET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE \"${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\")\nSET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG \"${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\")\n#SET(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX_COPY})\n#SET(CPACK_PACKAGING_INSTALL_PREFIX \"\")\n#SET(DESTDIR \"\")\n#SET(CPACK_OUTPUT_FILE_PREFIX \"\")\n\nSET(EMGU_CV_BUILD ON CACHE BOOL \"BUILD Emgu CV\")\nSET(EMGU_CV_EXAMPLE_BUILD ON CACHE BOOL \"Build Emgu CV Example\")\n\n# ----------------------------------------------------------------------------\n#  Generate required common assembly file for Emgu CV project\n# ----------------------------------------------------------------------------\nINCLUDE(Today)\nTODAY() #set the variable CURRENT_YEAR\n\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/CommonAssemblyInfo.cs.in ${CMAKE_CURRENT_SOURCE_DIR}/CommonAssemblyInfo.cs)\n\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Directory.Build.props.in ${CMAKE_CURRENT_SOURCE_DIR}/Directory.Build.props)\n\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/version.rc.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Extern/version.rc)\n\nSET (EMGUCV_LICENSE_FILE \"${LICENSE_FILE_NAME}.txt\")\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/${LICENSE_FILE_NAME} ${CMAKE_CURRENT_SOURCE_DIR}/${EMGUCV_LICENSE_FILE} COPYONLY)\n\nMACRO(CHECK_LICENSE_TYPE)\n\tMESSAGE(STATUS \"LICENSE FILE: ${CMAKE_CURRENT_SOURCE_DIR}/${LICENSE_FILE_NAME}\")\n    IF (WIN32)\n        EXECUTE_PROCESS(COMMAND \"findstr\" \"gpl\" \"${LICENSE_FILE_NAME}\" WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} OUTPUT_VARIABLE TMP)\n\tELSE()\t\n\t    EXECUTE_PROCESS(COMMAND \"grep\" \"gpl\" \"${LICENSE_FILE_NAME}\" WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} OUTPUT_VARIABLE TMP)\n\tENDIF()\n\t\n\tSTRING(STRIP \"${TMP}\" TMP)\n\tSTRING(LENGTH \"${TMP}\" GPL_LICENSE_LENGTH)\n\tSET (LICENSE_TYPE \"Dual License\")\n\t\n\tIF(${GPL_LICENSE_LENGTH} EQUAL 0)\n\t\tSET(LICENSE_TYPE \"Commercial\")\t\t\n\tENDIF()\n\t\n\tMESSAGE(STATUS \"LICENSE_TYPE: ${LICENSE_TYPE}\")\nENDMACRO()\nCHECK_LICENSE_TYPE()\n\n# ----------------------------------------------------------------------------\n#  Generate neget packaging file for Emgu CV project\n# ----------------------------------------------------------------------------\n\nIF( \"${OPENCV_EXTRA_MODULES_PATH}\" STREQUAL \"\" )\n  SET(EMGUCV_RUNTIME_EXTRA_TAG \".mini\")\n  SET(EMGUCV_MINI_RELEASE_NOTE \"This is the mini release that only contains the minimum amount of Open CV modules. For full release that contains all Open CV modules, use a release that is not labeled 'mini'.\")\nELSE()\n  SET(EMGUCV_RUNTIME_EXTRA_TAG \"\")\n  SET(EMGUCV_MINI_RELEASE_NOTE \"\")\nENDIF()\n\nSET(EMGUCV_NUGET_ID \"Emgu.CV\")\nSET(EMGUCV_BITMAP_NUGET_ID \"Emgu.CV.Bitmap\")\nSET(EMGUCV_WPF_NUGET_ID \"Emgu.CV.Wpf\")\nSET(EMGUCV_MODELS_NUGET_ID \"Emgu.CV.Models\")\nSET(EMGUCV_UI_NUGET_ID \"Emgu.CV.UI\")\nSET(EMGUCV_WINDOWS_NUGET_ID \"${EMGUCV_NUGET_ID}.runtime${EMGUCV_RUNTIME_EXTRA_TAG}.windows\")\nSET(EMGU_WINDOWS_MSVCRT_X86_NUGET_ID \"Emgu.runtime.windows.msvc.rt.x86\")\nSET(EMGU_WINDOWS_MSVCRT_X64_NUGET_ID \"Emgu.runtime.windows.msvc.rt.x64\")\nSET(EMGU_WINDOWS_MSVCRT_ARM64_NUGET_ID \"Emgu.runtime.windows.msvc.rt.arm64\")\nSET(EMGU_ZLIBWAPI_ID \"Emgu.runtime.windows.zlibwapi.x64\")\nSET(EMGU_ZLIBWAPI_VERSION \"1.2.3\")\n\nSET(NUGET_EMGU_URL \"https://www.emgu.com\")\n\nIF(WITH_CUDA)\n\tSET(EMGUCV_WINDOWS_NUGET_ID \"${EMGUCV_WINDOWS_NUGET_ID}.cuda\")\n\tSET(EMGU_WINDOWS_CUDA_NUGET_ID \"Emgu.runtime.windows.cuda\")\n\tSET(EMGU_CUDART_NUGET_ID \"${EMGU_WINDOWS_CUDA_NUGET_ID}.rt\")\n\tSET(EMGU_CUDA_BLAS_NUGET_ID \"${EMGU_WINDOWS_CUDA_NUGET_ID}.blas\")\n\tSET(EMGU_CUDA_BLAS_LT_NUGET_ID \"${EMGU_CUDA_BLAS_NUGET_ID}.lt\")\n\tSET(EMGU_NPP_NUGET_ID \"${EMGU_WINDOWS_CUDA_NUGET_ID}.npp\")\n\tSET(EMGU_CUFFT_NUGET_ID \"${EMGU_WINDOWS_CUDA_NUGET_ID}.fft\")\n\tSET(EMGU_CUDNN_NUGET_ID \"${EMGU_WINDOWS_CUDA_NUGET_ID}.dnn\")\n\tSET(EMGU_CUDNN_ADV_NUGET_ID \"${EMGU_CUDNN_NUGET_ID}.adv\")\n\tSET(EMGU_CUDNN_CNN_NUGET_ID \"${EMGU_CUDNN_NUGET_ID}.cnn\")\n\tSET(EMGU_CUDNN_ENGINES_NUGET_ID \"${EMGU_CUDNN_NUGET_ID}.engines\")\n\tSET(EMGU_CUDNN_OPS_NUGET_ID \"${EMGU_CUDNN_NUGET_ID}.ops\")\n#ELSE()\n#\tSET(EMGUCV_NUGET_ID \"${EMGUCV_NUGET_ID_BASE}\")\nENDIF()\n\nIF(HAVE_MACOS)\n  SET(EMGUCV_MACOS_NUGET_ID \"${EMGUCV_NUGET_ID}.runtime${EMGUCV_RUNTIME_EXTRA_TAG}.macos\")\nENDIF()\n\nIF(HAVE_ANDROID)\n  SET(EMGUCV_MAUI_ANDROID_NUGET_ID \"${EMGUCV_NUGET_ID}.runtime.maui${EMGUCV_RUNTIME_EXTRA_TAG}.android\")\nENDIF()\n\nIF(HAVE_IOS)\n  SET(EMGUCV_MAUI_IOS_NUGET_ID \"${EMGUCV_NUGET_ID}.runtime.maui${EMGUCV_RUNTIME_EXTRA_TAG}.ios\")\nENDIF()\n\nIF(HAVE_MAC_CATALYST)\n  SET(EMGUCV_MAUI_MACOS_NUGET_ID \"${EMGUCV_NUGET_ID}.runtime.maui${EMGUCV_RUNTIME_EXTRA_TAG}.macos\")\nENDIF()\n\nIF(HAVE_WINSTORE_10 AND WIN32)\n  SET(EMGUCV_UWP_NUGET_ID \"${EMGUCV_NUGET_ID}.runtime${EMGUCV_RUNTIME_EXTRA_TAG}.uwp\")\nENDIF()\n\nIF(HAVE_LINUX_ARM)\n  SET(EMGUCV_DEBIAN_ARM_NUGET_ID \"${EMGUCV_NUGET_ID}.runtime${EMGUCV_RUNTIME_EXTRA_TAG}.debian-arm\")\nENDIF()\n\nIF(HAVE_LINUX_ARM64)\n  SET(EMGUCV_DEBIAN_ARM64_NUGET_ID \"${EMGUCV_NUGET_ID}.runtime${EMGUCV_RUNTIME_EXTRA_TAG}.debian-arm64\")\nENDIF()\n\nIF(HAVE_UBUNTU_X64 OR HAVE_UBUNTU_X86 OR HAVE_UBUNTU_ARM64)\n  SET(EMGUCV_UBUNTU_NUGET_ID \"${EMGUCV_NUGET_ID}.runtime${EMGUCV_RUNTIME_EXTRA_TAG}.${NUGET_NATIVE_PLATFORM_ID_UBUNTU}\")\nENDIF()\n\nIF(HAVE_RHEL_X64 OR HAVE_RHEL_X86)\n  SET(EMGUCV_RHEL_NUGET_ID \"${EMGUCV_NUGET_ID}.runtime${EMGUCV_RUNTIME_EXTRA_TAG}.${NUGET_NATIVE_PLATFORM_ID_RHEL}\")\nENDIF()\n\nIF (\"${LICENSE_TYPE}\" STREQUAL \"Commercial\")\n\tMESSAGE(STATUS \"Configuring nuget package for commercial only release\")\nELSEIF()\n\tMESSAGE(STATUS \"Configuring nuget package for dual license release\")\nENDIF()\n\nIF(WITH_OPENVINO OR WITH_INF_ENGINE)\n  SET(EMGUCV_WINDOWS_NUGET_ID \"${EMGUCV_WINDOWS_NUGET_ID}.dldt\")\nENDIF()\n\nSET(EMGUCV_MACOS_NUGET_FILE_LIST \"\")\nIF(HAVE_MACOS)\n  SET(EMGUCV_MACOS_NUGET_FILE_LIST \"${EMGUCV_MACOS_NUGET_FILE_LIST} \n  <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\osx\\\\native\\\\*.dylib\\\" target=\\\"runtimes\\\\osx\\\\native\\\"/>\n  <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\osx\\\\native\\\\*.inc\\\" target=\\\"docs\\\\\\\" />\n  <file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n  <file src=\\\"..\\\\..\\\\..\\\\${EMGUCV_LICENSE_FILE}\\\" target=\\\"\\\" />\n  <file src=\\\"docs\\\\README.md\\\" target=\\\"docs\\\\\\\" />\n  <file src=\\\"Emgu.CV.runtime.macos.props\\\" target=\\\"build\\\\\\\" />\")\nENDIF()\n\nSET(EMGUCV_WINDOWS_NUGET_FILE_LIST \"\")\nIF(HAVE_WINDESKTOP_X86)\n\tSET(EMGUCV_WINDOWS_NUGET_FILE_LIST \"${EMGUCV_WINDOWS_NUGET_FILE_LIST} <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x86\\\\native\\\\*.dll\\\" exclude=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x86\\\\native\\\\cu*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x86\\\\native\\\\npp*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x86\\\\native\\\\concrt*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x86\\\\native\\\\msvcp*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x86\\\\native\\\\vcruntime*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x86\\\\native\\\\vccorlib*.dll\\\" target=\\\"runtimes\\\\win-x86\\\\native\\\" />\")\n\tSET(EMGUCV_WINDOWS_NUGET_FILE_LIST \"${EMGUCV_WINDOWS_NUGET_FILE_LIST} <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x86\\\\native\\\\version_string.inc\\\" target=\\\"docs\\\\build_info_x86.inc\\\" />\")\n\tSET(EMGU_WINDOWS_MSVCRT_X86_NUGET_TITLE \"MSVC x86 runtime for windows\")\n\tSET(EMGU_WINDOWS_MSVCRT_X86_NUGET_FILE_LIST \"${EMGU_WINDOWS_MSVCRT_X86_NUGET_FILE_LIST} \n\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x86\\\\native\\\\concrt*.dll\\\" target=\\\"runtimes\\\\win-x86\\\\native\\\" /> \n\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x86\\\\native\\\\msvcp*.dll\\\" target=\\\"runtimes\\\\win-x86\\\\native\\\" /> \n\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x86\\\\native\\\\vcruntime*.dll\\\" target=\\\"runtimes\\\\win-x86\\\\native\\\" />     \n\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x86\\\\native\\\\vccorlib*.dll\\\" target=\\\"runtimes\\\\win-x86\\\\native\\\" />     \n\t<file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n    <file src=\\\"..\\\\..\\\\..\\\\${EMGUCV_LICENSE_FILE}\\\" target=\\\"\\\" />\")\n\tINSTALL(\n      FILES\n      \"libs/runtimes/win-x86/native/version_string.inc\"\n      DESTINATION \"libs/runtimes/win-x86/native/\"\n      COMPONENT emgucv_binary\n      )\nENDIF()\nIF(HAVE_WINDESKTOP_X64)\n\tSET(EMGUCV_WINDOWS_NUGET_FILE_LIST \"${EMGUCV_WINDOWS_NUGET_FILE_LIST} <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\*.dll\\\" exclude=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cu*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\npp*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\concrt*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\msvcp*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\vcruntime*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\vccorlib*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\zlibwapi.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" />\")\n\t#Also added configuration files from OpenVino\n\tSET(EMGUCV_WINDOWS_NUGET_FILE_LIST \"${EMGUCV_WINDOWS_NUGET_FILE_LIST} <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\*.xml\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" />\")\n\tSET(EMGUCV_WINDOWS_NUGET_FILE_LIST \"${EMGUCV_WINDOWS_NUGET_FILE_LIST} <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\*.json\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" />\")\n\tSET(EMGUCV_WINDOWS_NUGET_FILE_LIST \"${EMGUCV_WINDOWS_NUGET_FILE_LIST} <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\*.elf\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" />\")\n\tSET(EMGUCV_WINDOWS_NUGET_FILE_LIST \"${EMGUCV_WINDOWS_NUGET_FILE_LIST} <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\*.mvcmd\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" />\")\n\tSET(EMGUCV_WINDOWS_NUGET_FILE_LIST \"${EMGUCV_WINDOWS_NUGET_FILE_LIST} <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\version_string.inc\\\" target=\\\"docs\\\\build_info_x64.inc\\\" />\")\n\tSET(EMGU_WINDOWS_MSVCRT_X64_NUGET_TITLE \"MSVC x64 runtime for windows\")\n\tSET(EMGU_WINDOWS_MSVCRT_X64_NUGET_FILE_LIST \"${EMGU_WINDOWS_MSVCRT_X64_NUGET_FILE_LIST} \n\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\concrt*.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" /> \n\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\msvcp*.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" /> \n\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\vcruntime*.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" />     \n\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\vccorlib*.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" />     \n\t<file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n    <file src=\\\"..\\\\..\\\\..\\\\${EMGUCV_LICENSE_FILE}\\\" target=\\\"\\\" />\")\n\t\n\tSET(EMGU_WINDOWS_ZLIBWAPI_X64_NUGET_FILE_LIST \"${EMGU_WINDOWS_ZLIBWAPI_X64_NUGET_FILE_LIST}\n\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\zlibwapi.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" /> \n\t<file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n\t<file src=\\\"zlib_license.txt\\\" target=\\\"\\\" />\")\n    INSTALL(\n      FILES\n      \"libs/runtimes/win-x64/native/version_string.inc\"\n      DESTINATION \"libs/runtimes/win-x64/native/\"\n      COMPONENT emgucv_binary\n      )\nENDIF()\nIF(HAVE_WINDESKTOP_ARM64)\n\tSET(EMGUCV_WINDOWS_NUGET_FILE_LIST \"${EMGUCV_WINDOWS_NUGET_FILE_LIST} \n\t   <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-arm64\\\\native\\\\*.dll\\\" exclude=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-arm64\\\\native\\\\cu*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-arm64\\\\native\\\\npp*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-arm64\\\\native\\\\concrt*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-arm64\\\\native\\\\msvcp*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-arm64\\\\native\\\\vcruntime*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-arm64\\\\native\\\\vccorlib*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-arm64\\\\native\\\\opencv_videoio_ffmpeg*.dll\\\" target=\\\"runtimes\\\\win-arm64\\\\native\\\" />\n\t   <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-arm64\\\\native\\\\version_string.inc\\\" target=\\\"docs\\\\build_info_arm64.inc\\\" />\")\n\tSET(EMGU_WINDOWS_MSVCRT_ARM64_NUGET_TITLE \"MSVC arm64 runtime for windows\")\n\tSET(EMGU_WINDOWS_MSVCRT_ARM64_NUGET_FILE_LIST \"${EMGU_WINDOWS_MSVCRT_ARM64_NUGET_FILE_LIST} \n\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-arm64\\\\native\\\\concrt*.dll\\\" target=\\\"runtimes\\\\win-arm64\\\\native\\\" />\n\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-arm64\\\\native\\\\msvcp*.dll\\\" target=\\\"runtimes\\\\win-arm64\\\\native\\\" />\n\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-arm64\\\\native\\\\vcruntime*.dll\\\" target=\\\"runtimes\\\\win-arm64\\\\native\\\" />\n\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-arm64\\\\native\\\\vccorlib*.dll\\\" target=\\\"runtimes\\\\win-arm64\\\\native\\\" />\n\t<file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n    <file src=\\\"..\\\\..\\\\..\\\\${EMGUCV_LICENSE_FILE}\\\" target=\\\"\\\" />\")\n\tINSTALL(\n      FILES\n      \"libs/runtimes/win-arm64/native/version_string.inc\"\n      DESTINATION \"libs/runtimes/win-arm64/native/\"\n      COMPONENT emgucv_binary\n      )\nENDIF()\nIF(HAVE_WINDESKTOP_X86 OR HAVE_WINDESKTOP_X64 OR HAVE_WINDESKTOP_ARM64)\n\tSET(EMGUCV_WINDOWS_NUGET_FILE_LIST \"${EMGUCV_WINDOWS_NUGET_FILE_LIST} \n    <file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n    <file src=\\\"..\\\\..\\\\..\\\\${EMGUCV_LICENSE_FILE}\\\" target=\\\"\\\" />\n\t<file src=\\\"README.md\\\" target=\\\"docs\\\\\\\" />\")\nENDIF()\n\nSET(EMGUCV_MAUI_MACOS_NUGET_FILE_LIST \"\")\n\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.maui.macos.Directory.Build.props.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Runtime/Maui/Mac/Directory.Build.props)\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.maui.macos.Package.README.md.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Runtime/Maui/Mac/docs/README.md)\n\nSET(EMGUCV_UWP_NUGET_FILE_LIST \"\")\nIF(HAVE_WINSTORE_10_X86)\n\tSET(EMGUCV_UWP_NUGET_FILE_LIST \"${EMGUCV_UWP_NUGET_FILE_LIST} <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win10-x86\\\\native\\\\*.dll\\\" target=\\\"runtimes\\\\win10-x86\\\\native\\\" />\")\nENDIF()\nIF(HAVE_WINSTORE_10_X64)\n\tSET(EMGUCV_UWP_NUGET_FILE_LIST \"${EMGUCV_UWP_NUGET_FILE_LIST} <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win10-x64\\\\native\\\\*.dll\\\" target=\\\"runtimes\\\\win10-x64\\\\native\\\" />\")\nENDIF()\nIF(HAVE_WINSTORE_10_ARM)\n\tSET(EMGUCV_UWP_NUGET_FILE_LIST \"${EMGUCV_UWP_NUGET_FILE_LIST} <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win10-arm\\\\native\\\\*.dll\\\" target=\\\"runtimes\\\\win10-arm\\\\native\\\" />\")\nENDIF()\nIF(HAVE_WINSTORE_10_ARM64)\n\tSET(EMGUCV_UWP_NUGET_FILE_LIST \"${EMGUCV_UWP_NUGET_FILE_LIST} <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win10-arm64\\\\native\\\\*.dll\\\" target=\\\"runtimes\\\\win10-arm64\\\\native\\\" />\")\nENDIF()\nIF(HAVE_WINSTORE_10)\n    SET(EMGUCV_UWP_NUGET_DEPENDENCY \"\n    <dependencies>\n      <dependency id=\\\"${EMGUCV_NUGET_ID}\\\" version=\\\"${CPACK_PACKAGE_DEPENDENCY_VERSION}\\\" />\n    </dependencies>\")\n\t#<file src=\\\"Emgu.CV.runtime.uwp.targets\\\" target=\\\"build\\\\${EMGUCV_UWP_NUGET_ID}.targets\\\" />\n\tSET(EMGUCV_UWP_NUGET_FILE_LIST \"${EMGUCV_UWP_NUGET_FILE_LIST} \n    <file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n    <file src=\\\"..\\\\..\\\\..\\\\${EMGUCV_LICENSE_FILE}\\\" target=\\\"\\\" />\")\nENDIF()\n\nSET(EMGUCV_DEBIAN_ARM_NUGET_FILE_LIST \"\")\nSET(EMGUCV_DEBIAN_ARM64_NUGET_FILE_LIST \"\")\nSET(EMGUCV_DEBIAN_NUGET_DEPENDENCY \"    <dependencies>\n      <dependency id=\\\"${EMGUCV_NUGET_ID}\\\" version=\\\"${CPACK_PACKAGE_DEPENDENCY_VERSION}\\\" />\n      </dependencies>\")\nIF(HAVE_LINUX_ARM)\n\tSET(EMGUCV_DEBIAN_ARM_NUGET_FILE_LIST \"${EMGUCV_DEBIAN_ARM_NUGET_FILE_LIST} \n      <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\linux-arm\\\\native\\\\*.so\\\" target=\\\"runtimes\\\\linux-arm\\\\native\\\" />\")\n\t\n\tSET(EMGUCV_DEBIAN_ARM_NUGET_FILE_LIST \"${EMGUCV_DEBIAN_ARM_NUGET_FILE_LIST} \n\t  <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\linux-arm\\\\native\\\\debian_arm_version_string.inc\\\" target=\\\"docs\\\\build_info_arm.inc\\\" />\")\n\t\n\tSET(EMGUCV_DEBIAN_ARM_NUGET_FILE_LIST \"${EMGUCV_DEBIAN_ARM_NUGET_FILE_LIST} \n      <file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n      <file src=\\\"..\\\\..\\\\..\\\\${EMGUCV_LICENSE_FILE}\\\" target=\\\"\\\" />\n\t  <file src=\\\"Emgu.CV.runtime.debian-arm.props\\\" target=\\\"build\\\\\\\" />\")\nENDIF()\nIF(HAVE_LINUX_ARM64)\n\tSET(EMGUCV_DEBIAN_ARM64_NUGET_FILE_LIST \"${EMGUCV_DEBIAN_ARM64_NUGET_FILE_LIST} \n      <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\linux-arm64\\\\native\\\\*.so\\\" target=\\\"runtimes\\\\linux-arm64\\\\native\\\" />\")\n\t  \n\tSET(EMGUCV_DEBIAN_ARM64_NUGET_FILE_LIST \"${EMGUCV_DEBIAN_ARM64_NUGET_FILE_LIST} \n\t  <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\linux-arm64\\\\native\\\\debian_arm64_version_string.inc\\\" target=\\\"docs\\\\build_info_arm64.inc\\\" />\")  \n\t  \n\tSET(EMGUCV_DEBIAN_ARM64_NUGET_FILE_LIST \"${EMGUCV_DEBIAN_ARM64_NUGET_FILE_LIST} \n      <file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n      <file src=\\\"..\\\\..\\\\..\\\\${EMGUCV_LICENSE_FILE}\\\" target=\\\"\\\" />\n\t  <file src=\\\"Emgu.CV.runtime.debian-arm64.props\\\" target=\\\"build\\\\\\\" />\")\nENDIF()\n\nSET(EMGUCV_UBUNTU_NUGET_FILE_LIST \"\")\nIF(HAVE_UBUNTU_X64)\n  SET(EMGUCV_UBUNTU_NUGET_FILE_LIST \"${EMGUCV_UBUNTU_NUGET_FILE_LIST} <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\ubuntu-x64\\\\native\\\\*.so\\\" target=\\\"runtimes\\\\ubuntu-x64\\\\native\\\" />\")\nENDIF()\nIF(HAVE_UBUNTU_X86)\n  SET(EMGUCV_UBUNTU_NUGET_FILE_LIST \"${EMGUCV_UBUNTU_NUGET_FILE_LIST} <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\ubuntu-x86\\\\native\\\\*.so\\\" target=\\\"runtimes\\\\ubuntu-x86\\\\native\\\" />\")\nENDIF()\nIF(HAVE_UBUNTU_ARM64)\n  SET(EMGUCV_UBUNTU_NUGET_FILE_LIST \"${EMGUCV_UBUNTU_NUGET_FILE_LIST} <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\ubuntu-arm64\\\\native\\\\*.so\\\" target=\\\"runtimes\\\\ubuntu-arm64\\\\native\\\" />\")\nENDIF()\nIF(HAVE_UBUNTU_X64 OR HAVE_UBUNTU_X86 OR HAVE_UBUNTU_ARM64)\n    SET(EMGUCV_UBUNTU_NUGET_DEPENDENCY \"\n    <dependencies>\n      <dependency id=\\\"${EMGUCV_NUGET_ID}\\\" version=\\\"${CPACK_PACKAGE_DEPENDENCY_VERSION}\\\" />\n    </dependencies>\")\n\tSET(EMGUCV_UBUNTU_NUGET_FILE_LIST \"${EMGUCV_UBUNTU_NUGET_FILE_LIST} \n    <file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n    <file src=\\\"..\\\\..\\\\..\\\\${EMGUCV_LICENSE_FILE}\\\" target=\\\"\\\" />\t\n    <file src=\\\"README.md\\\" target=\\\"docs\\\\\\\" />\n\t<file src=\\\"Emgu.CV.runtime.ubuntu.props\\\" target=\\\"build\\\\\\\" />\")\n\tIF(HAVE_UBUNTU_X86)\n\t  SET(EMGUCV_UBUNTU_NUGET_FILE_LIST \"${EMGUCV_UBUNTU_NUGET_FILE_LIST} <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\ubuntu-x86\\\\native\\\\ubuntu_x86_version_string.inc\\\" target=\\\"docs\\\\build_info_x86.inc\\\" /> \")\n\tENDIF()\n\tIF(HAVE_UBUNTU_X64)\n\t  SET(EMGUCV_UBUNTU_NUGET_FILE_LIST \"${EMGUCV_UBUNTU_NUGET_FILE_LIST} <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\ubuntu-x64\\\\native\\\\ubuntu_x64_version_string.inc\\\" target=\\\"docs\\\\build_info_x64.inc\\\" /> \")\n\tENDIF()\n\tIF(HAVE_UBUNTU_ARM64)\n\t  SET(EMGUCV_UBUNTU_NUGET_FILE_LIST \"${EMGUCV_UBUNTU_NUGET_FILE_LIST} <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\ubuntu-arm64\\\\native\\\\ubuntu_arm64_version_string.inc\\\" target=\\\"docs\\\\build_info_arm64.inc\\\" /> \")\n\tENDIF()\nENDIF()\n\nSET(EMGUCV_RHEL_NUGET_FILE_LIST \"\")\nIF(HAVE_RHEL_X64)\n  SET(EMGUCV_RHEL_NUGET_FILE_LIST \"${EMGUCV_RHEL_NUGET_FILE_LIST} <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\rhel-x64\\\\native\\\\*.so\\\" target=\\\"runtimes\\\\rhel-x64\\\\native\\\" />\")\nENDIF()\nIF(HAVE_RHEL_X86)\n  SET(EMGUCV_RHEL_NUGET_FILE_LIST \"${EMGUCV_RHEL_NUGET_FILE_LIST} <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\rhel-x86\\\\native\\\\*.so\\\" target=\\\"runtimes\\\\rhel-x86\\\\native\\\" />\")\nENDIF()\nIF(HAVE_RHEL_ARM64)\n  SET(EMGUCV_RHEL_NUGET_FILE_LIST \"${EMGUCV_RHEL_NUGET_FILE_LIST} <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\rhel-arm64\\\\native\\\\*.so\\\" target=\\\"runtimes\\\\rhel-arm64\\\\native\\\" />\")\nENDIF()\nIF(HAVE_RHEL_X64 OR HAVE_RHEL_X86 OR HAVE_RHEL_ARM64)\n    SET(EMGUCV_RHEL_NUGET_DEPENDENCY \"\n    <dependencies>\n      <dependency id=\\\"${EMGUCV_NUGET_ID}\\\" version=\\\"${CPACK_PACKAGE_DEPENDENCY_VERSION}\\\" />\n    </dependencies>\")\n\tSET(EMGUCV_RHEL_NUGET_FILE_LIST \"${EMGUCV_RHEL_NUGET_FILE_LIST} \n    <file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n    <file src=\\\"..\\\\..\\\\..\\\\${EMGUCV_LICENSE_FILE}\\\" target=\\\"\\\" />\n    <file src=\\\"README.md\\\" target=\\\"docs\\\\\\\" />\n\t<file src=\\\"Emgu.CV.runtime.rhel.props\\\" target=\\\"build\\\\\\\" />\")\n\tIF(HAVE_RHEL_X64)\n\t  SET(EMGUCV_RHEL_NUGET_FILE_LIST \"${EMGUCV_RHEL_NUGET_FILE_LIST} <file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\rhel-x64\\\\native\\\\rhel_x64_version_string.inc\\\" target=\\\"docs\\\\build_info_x64.inc\\\" /> \")\n\tENDIF()\nENDIF()\n\n\n#SET(EMGUCV_NUGET_FILE_LIST \"\")\n#SET(EMGUCV_NUGET_DEPENDENCY \"\")\nSET(EMGUCV_NUGET_FRAMEWORK_REFERENCES \"\")\n\n\n\n# find the System.Text.Json nuget pacakge version\nSET(EMGUCV_PLATFORM_NETSTANDARD_PROJECT_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV/NetStandard/Emgu.CV.csproj\")\nfile(STRINGS \"${EMGUCV_PLATFORM_NETSTANDARD_PROJECT_FILE}\" EMGUCV_PLATFORM_NETSTANDARD_PROJECT_SYSTEM_TEXT_JSON REGEX \"System.Text.Json\" )\nstring(REGEX REPLACE \".+Version=\\\"([0-9]+.[0-9]+.[0-9]+)\\\".*\" \"\\\\1\" SYSTEM_TEXT_JSON_VERSION \"${EMGUCV_PLATFORM_NETSTANDARD_PROJECT_SYSTEM_TEXT_JSON}\")\nMESSAGE(STATUS \"System.Text.Json = ${SYSTEM_TEXT_JSON_VERSION}\")\n# find the System.Drawing.Common nuget package version\nSET(EMGUCV_MODELS_NETSTANDARD_PROJECT_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Models/NetStandard/Emgu.CV.Models.csproj\")\nfile(STRINGS \"${EMGUCV_MODELS_NETSTANDARD_PROJECT_FILE}\" EMGUCV_MODELS_NETSTANDARD_PROJECT_SYSTEM_DRAWING_COMMON REGEX \"System.Drawing.Common\" )\nstring(REGEX REPLACE \".+Version=\\\"([0-9]+.[0-9]+.[0-9]+)\\\".*\" \"\\\\1\" SYSTEM_DRAWING_COMMON_VERSION \"${EMGUCV_MODELS_NETSTANDARD_PROJECT_SYSTEM_DRAWING_COMMON}\")\nMESSAGE(STATUS \"System.Drawing.Common = ${SYSTEM_DRAWING_COMMON_VERSION}\")\n\nSET(NUGET_SYSTEM_TEXT_JSON_VERSION \"${SYSTEM_TEXT_JSON_VERSION}\")\nSET(NUGET_SYSTEM_DRAWING_COMMON_VERSION \"${SYSTEM_DRAWING_COMMON_VERSION}\")\n\n#  SET(EMGUCV_NUGET_FILE_LIST \"${EMGUCV_NUGET_FILE_LIST} \n#\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\iOS\\\\Emgu.CV.dll\\\" target=\\\"lib\\\\${EMGUCV_MAUI_MACOS_DST_FOLDER}\\\" />\n#    <file src=\\\"..\\\\..\\\\..\\\\libs\\\\iOS\\\\Emgu.CV.xml\\\" target=\\\"lib\\\\${EMGUCV_MAUI_MACOS_DST_FOLDER}\\\" />\n#\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\iOS\\\\Emgu.CV.dll\\\" target=\\\"lib\\\\${EMGUCV_MAUI_IOS_DST_FOLDER}\\\" />\n#    <file src=\\\"..\\\\..\\\\..\\\\libs\\\\iOS\\\\Emgu.CV.xml\\\" target=\\\"lib\\\\${EMGUCV_MAUI_IOS_DST_FOLDER}\\\" />\n#\t\")\n#  SET(EMGUCV_NUGET_DEPENDENCY \"${EMGUCV_NUGET_DEPENDENCY} \n#\t  <group targetFramework=\\\"${EMGUCV_MAUI_MACOS_DST_FOLDER}\\\">\n#        <dependency id=\\\"System.Drawing.Primitives\\\" version=\\\"4.3.0\\\" exclude=\\\"Build,Analyzers\\\" />\n#        <dependency id=\\\"System.Runtime\\\" version=\\\"4.3.1\\\" exclude=\\\"Build,Analyzers\\\" />\n#        <dependency id=\\\"System.Runtime.InteropServices.RuntimeInformation\\\" version=\\\"4.3.0\\\" exclude=\\\"Build,Analyzers\\\" />\n#\t\t<dependency id=\\\"System.Runtime.InteropServices.NFloat.Internal\\\" version=\\\"6.0.1\\\" exclude=\\\"Build,Analyzers\\\" />\n#      </group>\n#\t  <group targetFramework=\\\"${EMGUCV_MAUI_IOS_DST_FOLDER}\\\">\n#        <dependency id=\\\"System.Drawing.Primitives\\\" version=\\\"4.3.0\\\" exclude=\\\"Build,Analyzers\\\" />\n#        <dependency id=\\\"System.Runtime\\\" version=\\\"4.3.1\\\" exclude=\\\"Build,Analyzers\\\" />\n#        <dependency id=\\\"System.Runtime.InteropServices.RuntimeInformation\\\" version=\\\"4.3.0\\\" exclude=\\\"Build,Analyzers\\\" />\n#\t\t<dependency id=\\\"System.Runtime.InteropServices.NFloat.Internal\\\" version=\\\"6.0.1\\\" exclude=\\\"Build,Analyzers\\\" />\n#      </group>\")\n\n\n#SET(EMGUCV_NUGET_FILE_LIST \"${EMGUCV_NUGET_FILE_LIST} \n#    <file src=\\\"..\\\\..\\\\..\\\\libs\\\\Emgu.CV.dll\\\" target=\\\"lib\\\\netstandard2.0\\\" />\n#    <file src=\\\"..\\\\..\\\\..\\\\libs\\\\Emgu.CV.xml\\\" target=\\\"lib\\\\netstandard2.0\\\" />\n#    <file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n#    <file src=\\\"..\\\\..\\\\..\\\\${EMGUCV_LICENSE_FILE}\\\" target=\\\"\\\" />\n#\t<file src=\\\"README.md\\\" target=\\\"docs\\\\\\\" />\")\n#SET(EMGUCV_NUGET_DEPENDENCY \"${EMGUCV_NUGET_DEPENDENCY} \n#      <group targetFramework=\\\".NETStandard2.0\\\">\n#        <dependency id=\\\"System.Drawing.Primitives\\\" version=\\\"4.3.0\\\" exclude=\\\"Build,Analyzers\\\" />\n#        <dependency id=\\\"System.Runtime\\\" version=\\\"4.3.1\\\" exclude=\\\"Build,Analyzers\\\" />\n#        <dependency id=\\\"System.Runtime.InteropServices.RuntimeInformation\\\" version=\\\"4.3.0\\\" exclude=\\\"Build,Analyzers\\\" />\n#\t\t<dependency id=\\\"System.Text.Json\\\" version=\\\"${NUGET_SYSTEM_TEXT_JSON_VERSION}\\\" exclude=\\\"Build,Analyzers\\\" />\n#      </group>\")\n\n\nSET(EMGUCV_BITMAP_NUGET_TITLE \"Bitmap extension for Emgu CV\")\nSET(EMGUCV_BITMAP_NUGET_SUMMARY \"This package add extension method to convert Bitmap to and from Emgu objects (e.g. Mat, UMat, GpuMat)\")\nSET(EMGUCV_BITMAP_NUGET_FILE_LIST \"\")\nSET(EMGUCV_BITMAP_NUGET_DEPENDENCY \"\")\nSET(EMGUCV_BITMAP_NUGET_FILE_LIST \"${EMGUCV_BITMAP_NUGET_FILE_LIST} \n    <file src=\\\"..\\\\..\\\\..\\\\libs\\\\Emgu.CV.Bitmap.dll\\\" target=\\\"lib\\\\netstandard2.0\\\" />\n    <file src=\\\"..\\\\..\\\\..\\\\libs\\\\Emgu.CV.Bitmap.xml\\\" target=\\\"lib\\\\netstandard2.0\\\" />\n    <file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n    <file src=\\\"..\\\\..\\\\..\\\\${EMGUCV_LICENSE_FILE}\\\" target=\\\"\\\" />\n\t<file src=\\\"README.md\\\" target=\\\"docs\\\\\\\" />\")\nSET(EMGUCV_BITMAP_NUGET_DEPENDENCY \"${EMGUCV_BITMAP_NUGET_DEPENDENCY} \n      <group targetFramework=\\\".NETStandard2.0\\\">\n        <dependency id=\\\"System.Drawing.Common\\\" version=\\\"${NUGET_SYSTEM_DRAWING_COMMON_VERSION}\\\" exclude=\\\"Build,Analyzers\\\" />\n        <dependency id=\\\"${EMGUCV_NUGET_ID}\\\" version=\\\"${CPACK_PACKAGE_DEPENDENCY_VERSION}\\\" />\n      </group>\")\nSET(EMGUCV_BITMAP_NUGET_DEPENDENCY \"\n\t<dependencies>\n${EMGUCV_BITMAP_NUGET_DEPENDENCY}\n    </dependencies>\")\n\t\nSET(EMGUCV_WPF_NUGET_TITLE \"WPF extension for Emgu CV\")\nSET(EMGUCV_WPF_NUGET_SUMMARY \"This package add extension method to convert BitmapSource to and from Emgu objects (e.g. Mat)\")\nSET(EMGUCV_WPF_NUGET_FILE_LIST \"\")\n\t\nSET(EMGUCV_MODELS_NUGET_TITLE \"Experimental component to help download, initialize and execute image processing/AI models.\")\nSET(EMGUCV_MODELS_NUGET_SUMMARY \"Experimental component to help download, initialize and execute image processing/AI models. This is under active development and API may change from time to time.\")\nSET(EMGUCV_MODELS_NUGET_FILE_LIST \"\")\nSET(EMGUCV_MODELS_NUGET_DEPENDENCY \"\")\n\n#IF (HAVE_IOS)\n  #SET(EMGUCV_MODELS_NUGET_FILE_LIST \"${EMGUCV_MODELS_NUGET_FILE_LIST} \n#\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\iOS\\\\Emgu.CV.Models.dll\\\" target=\\\"lib\\\\${EMGUCV_MAUI_MACOS_DST_FOLDER}\\\" />\n#    <file src=\\\"..\\\\..\\\\..\\\\libs\\\\iOS\\\\Emgu.CV.Models.xml\\\" target=\\\"lib\\\\${EMGUCV_MAUI_MACOS_DST_FOLDER}\\\" />\n#\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\iOS\\\\Emgu.CV.Models.dll\\\" target=\\\"lib\\\\${EMGUCV_MAUI_IOS_DST_FOLDER}\\\" />\n#    <file src=\\\"..\\\\..\\\\..\\\\libs\\\\iOS\\\\Emgu.CV.Models.xml\\\" target=\\\"lib\\\\${EMGUCV_MAUI_IOS_DST_FOLDER}\\\" />\n#\t\")\n#  SET(EMGUCV_MODELS_NUGET_DEPENDENCY \"${EMGUCV_MODELS_NUGET_DEPENDENCY}\n#\t  <group targetFramework=\\\"${EMGUCV_MAUI_MACOS_DST_FOLDER}\\\">\n#        <dependency id=\\\"System.Drawing.Common\\\" version=\\\"${NUGET_SYSTEM_DRAWING_COMMON_VERSION}\\\" exclude=\\\"Build,Analyzers\\\" />\n#        <dependency id=\\\"${EMGUCV_NUGET_ID}\\\" version=\\\"${CPACK_PACKAGE_DEPENDENCY_VERSION}\\\" />\n#      </group>\n#\t  <group targetFramework=\\\"${EMGUCV_MAUI_IOS_DST_FOLDER}\\\">\n#        <dependency id=\\\"System.Drawing.Common\\\" version=\\\"${NUGET_SYSTEM_DRAWING_COMMON_VERSION}\\\" exclude=\\\"Build,Analyzers\\\" />\n#        <dependency id=\\\"${EMGUCV_NUGET_ID}\\\" version=\\\"${CPACK_PACKAGE_DEPENDENCY_VERSION}\\\" />\n#      </group>\")\n#ENDIF()\n\n#SET(EMGUCV_MODELS_NUGET_FILE_LIST \"${EMGUCV_MODELS_NUGET_FILE_LIST} \n#    <file src=\\\"..\\\\..\\\\..\\\\libs\\\\Emgu.CV.Models.dll\\\" target=\\\"lib\\\\netstandard2.0\\\" />\n#    <file src=\\\"..\\\\..\\\\..\\\\libs\\\\Emgu.CV.Models.xml\\\" target=\\\"lib\\\\netstandard2.0\\\" />\n#    <file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n#    <file src=\\\"..\\\\..\\\\..\\\\${EMGUCV_LICENSE_FILE}\\\" target=\\\"\\\" />\n#\t<file src=\\\"README.md\\\" target=\\\"docs\\\\\\\" />\")\n#SET(EMGUCV_MODELS_NUGET_DEPENDENCY \"${EMGUCV_MODELS_NUGET_DEPENDENCY} \n#      <group targetFramework=\\\".NETStandard2.0\\\">\n#        <dependency id=\\\"System.Drawing.Common\\\" version=\\\"${NUGET_SYSTEM_DRAWING_COMMON_VERSION}\\\" exclude=\\\"Build,Analyzers\\\" />\n#        <dependency id=\\\"${EMGUCV_NUGET_ID}\\\" version=\\\"${CPACK_PACKAGE_DEPENDENCY_VERSION}\\\" />\n#      </group>\")\n#SET(EMGUCV_MODELS_NUGET_DEPENDENCY \"\n#\t<dependencies>\n#${EMGUCV_MODELS_NUGET_DEPENDENCY}\n#    </dependencies>\")\n\n\nIF (HAVE_WINDESKTOP_X64 OR HAVE_WINDESKTOP_X86 OR HAVE_WINDESKTOP_ARM64)\n  #SET(EMGU_WINDOWS_MSVCRT_VERSION ${MSVC_TOOLSET_VERSION})\n  IF(MSVC)\n    SET(EMGU_WINDOWS_MSVCRT_VERSION ${CMAKE_CXX_COMPILER_VERSION})\n\tstring(REPLACE \".\" \";\" EMGU_WINDOWS_MSVCRT_VERSION_LIST ${EMGU_WINDOWS_MSVCRT_VERSION})\n\tlist(GET EMGU_WINDOWS_MSVCRT_VERSION_LIST 0 EMGU_WINDOWS_MSVCRT_VERSION_MAJOR)\n\tlist(GET EMGU_WINDOWS_MSVCRT_VERSION_LIST 1 EMGU_WINDOWS_MSVCRT_VERSION_MINOR)\n\tlist(GET EMGU_WINDOWS_MSVCRT_VERSION_LIST 2 EMGU_WINDOWS_MSVCRT_VERSION_PATCH)\n\tlist(GET EMGU_WINDOWS_MSVCRT_VERSION_LIST 3 EMGU_WINDOWS_MSVCRT_VERSION_BUILD)\n\tMESSAGE(STATUS \"MSVCRT VERSION: ${EMGU_WINDOWS_MSVCRT_VERSION_MAJOR}.${EMGU_WINDOWS_MSVCRT_VERSION_MINOR}.${EMGU_WINDOWS_MSVCRT_VERSION_PATCH}.${EMGU_WINDOWS_MSVCRT_VERSION_BUILD}\")\n    SET(EMGU_WINDOWS_MSVCRT_NUGET_VERSION ${EMGU_WINDOWS_MSVCRT_VERSION})\n\tIF (\"${EMGU_WINDOWS_MSVCRT_VERSION_BUILD}\" STREQUAL \"0\")\n\t  SET(EMGU_WINDOWS_MSVCRT_NUGET_VERSION \"${EMGU_WINDOWS_MSVCRT_VERSION_MAJOR}.${EMGU_WINDOWS_MSVCRT_VERSION_MINOR}.${EMGU_WINDOWS_MSVCRT_VERSION_PATCH}\")\n\tENDIF()\n\tMESSAGE(STATUS \"MSVCRT NUGET VERSION: ${EMGU_WINDOWS_MSVCRT_NUGET_VERSION}\")\n  ENDIF()\n  \n  SET(EMGUCV_UI_NUGET_TITLE \"Windows UI components for Emgu CV\")\n#  SET(EMGUCV_UI_NUGET_FILE_LIST \"${EMGUCV_UI_NUGET_FILE_LIST} \n#    <file src=\\\"..\\\\..\\\\..\\\\libs\\\\Emgu.CV.Platform.NetFramework.dll\\\" target=\\\"lib\\\\net461\\\" />\n#    <file src=\\\"..\\\\..\\\\..\\\\libs\\\\Emgu.CV.Platform.NetFramework.xml\\\" target=\\\"lib\\\\net461\\\" />\n#    <file src=\\\"..\\\\..\\\\..\\\\libs\\\\Emgu.CV.Platform.NetCore.dll\\\" target=\\\"lib\\\\netcoreapp3.1\\\" />\n#    <file src=\\\"..\\\\..\\\\..\\\\libs\\\\Emgu.CV.Platform.NetCore.xml\\\" target=\\\"lib\\\\netcoreapp3.1\\\" />\n#    <file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n#    <file src=\\\"..\\\\..\\\\..\\\\${EMGUCV_LICENSE_FILE}\\\" target=\\\"\\\" />\n#\t<file src=\\\"README.md\\\" target=\\\"docs\\\\\\\" />\")\n#  SET(EMGUCV_UI_NUGET_DEPENDENCY \"${EMGUCV_UI_NUGET_DEPENDENCY}\n#      <group targetFramework=\\\".NETFramework4.6.1\\\">\n#        <dependency id=\\\"${EMGUCV_BITMAP_NUGET_ID}\\\" version=\\\"${CPACK_PACKAGE_DEPENDENCY_VERSION}\\\" />\n#      </group>\")\n#  SET(EMGUCV_UI_NUGET_DEPENDENCY \"${EMGUCV_UI_NUGET_DEPENDENCY}\n#      <group targetFramework=\\\".NETCoreApp3.1\\\">\n#        <dependency id=\\\"${EMGUCV_BITMAP_NUGET_ID}\\\" version=\\\"${CPACK_PACKAGE_DEPENDENCY_VERSION}\\\" />\n#      </group>\")\n#  SET(EMGUCV_UI_NUGET_DEPENDENCY \"${EMGUCV_UI_NUGET_DEPENDENCY}\n#    <frameworkReferences>\n#      <group targetFramework=\\\".NETCoreApp3.1\\\">\n#        <frameworkReference name=\\\"Microsoft.WindowsDesktop.App.WindowsForms\\\" />\n#      </group>\n#    </frameworkReferences>\")\n#  SET(EMGUCV_UI_NUGET_DEPENDENCY \"\n#\t<dependencies>\n#${EMGUCV_UI_NUGET_DEPENDENCY}\n#    </dependencies>\n#    <frameworkAssemblies>\n#      <frameworkAssembly assemblyName=\\\"System.Windows.Forms\\\" targetFramework=\\\".NETFramework4.6.1\\\" />\n#    </frameworkAssemblies>\")\nENDIF()\n\n#SET(EMGUCV_NUGET_DEPENDENCY \"\n#\t<dependencies>\n#${EMGUCV_NUGET_DEPENDENCY}\n#    </dependencies>\")\n\n#SET(EMGUCV_NUGET_FRAMEWORK_REFERENCES \"\n#\t<frameworkReferences>\n#${EMGUCV_NUGET_FRAMEWORK_REFERENCES}\n#    </frameworkReferences>\")\n\nSET(EMGUCV_NUGET_TITLE_ARCH \"\")\nIF(HAVE_WINDESKTOP_X86)\n SET(EMGUCV_NUGET_TITLE_ARCH \"${EMGUCV_NUGET_TITLE_ARCH} x86\")\nENDIF()\nIF(HAVE_WINDESKTOP_X64)\n SET(EMGUCV_NUGET_TITLE_ARCH \"${EMGUCV_NUGET_TITLE_ARCH} x64\")\nENDIF()\nIF(HAVE_WINDESKTOP_ARM64)\n SET(EMGUCV_NUGET_TITLE_ARCH \"${EMGUCV_NUGET_TITLE_ARCH} arm64\")\nENDIF()\nSTRING(STRIP \"${EMGUCV_NUGET_TITLE_ARCH}\" EMGUCV_NUGET_TITLE_ARCH)\nSTRING(REPLACE \"x86 x64 arm64\" \"\" EMGUCV_NUGET_TITLE_ARCH \"${EMGUCV_NUGET_TITLE_ARCH}\")\n\nSET(EMGUCV_WINDOWS_NUGET_DEPENDENCY \"${EMGUCV_WINDOWS_NUGET_DEPENDENCY}<dependency id=\\\"${EMGUCV_NUGET_ID}\\\" version=\\\"${NUGET_PACKAGE_DEPENDENCY_VERSION}\\\" />\")\n#SET(EMGUCV_WINDOWS_NETCORE_NUGET_DEPENDENCY \"<dependency id=\\\"${EMGUCV_NUGET_ID}\\\" version=\\\"${CPACK_PACKAGE_DEPENDENCY_VERSION}\\\" />\")\n#SET(EMGUCV_WINDOWS_NETFRAMEWORK_NUGET_DEPENDENCY \"<dependency id=\\\"${EMGUCV_NUGET_ID}\\\" version=\\\"${CPACK_PACKAGE_DEPENDENCY_VERSION}\\\" />\")\n \nSET(EMGUCV_WINDOWS_NUGET_TITLE \"EMGU CV ${EMGUCV_NUGET_TITLE_ARCH}\")\n#SET(EMGUCV_WINDOWS_NUGET_TITLE \"EMGU CV ${EMGUCV_NUGET_TITLE_ARCH}\")\nSTRING(STRIP \"${EMGUCV_WINDOWS_NUGET_TITLE}\" EMGUCV_WINDOWS_NUGET_TITLE)\nSET(EMGUCV_WINDOWS_NUGET_TITLE \"${EMGUCV_WINDOWS_NUGET_TITLE} runtime for windows\")\n\nSET(EMGUCV_MACOS_NUGET_DEPENDENCY \"${EMGUCV_MACOS_NUGET_DEPENDENCY}<dependency id=\\\"${EMGUCV_NUGET_ID}\\\" version=\\\"${NUGET_PACKAGE_DEPENDENCY_VERSION}\\\" />\")\n\nSET(EMGUCV_MACOS_NUGET_TITLE \"EMGU CV\")\nSTRING(STRIP \"${EMGUCV_MACOS_NUGET_TITLE}\" EMGUCV_MACOS_NUGET_TITLE)\nSET(EMGUCV_MACOS_NUGET_TITLE \"${EMGUCV_MACOS_NUGET_TITLE} runtime for MacOS\")\n\nIF(WITH_CUDA)\n    \n\tSET(EMGUCV_WINDOWS_NUGET_TITLE \"${EMGUCV_WINDOWS_NUGET_TITLE} with CUDA support\")\n\tSET(EMGU_CUDA_NUGET_TITLE \"Native x64 CUDA dependency for EMGU CV\")\n\t#SET(EMGU_CUDA_VERSION \"${npp_major}.${npp_minor}.${npp_build}\")\n\tIF ( (${cuda_major}) AND (${cuda_minor}) AND (${npp_build}) )\n\t  SET(EMGU_CUDA_VERSION \"${cuda_major}.${cuda_minor}.${npp_build}\")\n\tELSEIF (${CUDA_VERSION} AND (${npp_build}) )\n\t  SET(EMGU_CUDA_VERSION \"${CUDA_VERSION}.${npp_build}\")\n\tELSEIF (${CUDA_VERSION})\n\t  SET(EMGU_CUDA_VERSION \"${CUDA_VERSION}\")\n\tENDIF()\n\t\n\t\n\tSET(EMGU_CUDART_VERSION \"${EMGU_CUDA_VERSION}\")\n\tSET(EMGU_CUDA_NUGET_DEPENDENCY_STR \"${EMGU_CUDA_VERSION}\")\n\tSET(EMGU_CUFFT_VERSION \"${EMGU_CUDA_VERSION}\")\n\tSET(EMGU_CUFFT_NUGET_TITLE \"Native x64 FFT component for CUDA\")\n\tSET(EMGU_CUDNN_VERSION \"${CUDNN_VERSION_MAJOR}.${CUDNN_VERSION_MINOR}.${CUDNN_VERSION_PATCH}\")\n\tIF (\"${EMGU_CUDNN_VERSION}\" STREQUAL \"\")\n\t\tMESSAGE(FATAL_ERROR \"FAILED to detect DNN version\")\n\tENDIF()\n\tSET(EMGU_CUDNN_NUGET_DEPENDENCY_STR \"${EMGU_CUDNN_VERSION}\")\n\tSET(EMGU_CUDNN_NUGET_TITLE \"Native x64 DNN component for CUDA\")\n\tSET(EMGU_CUDNN_CNN_NUGET_TITLE \"Native x64 CNN component for CUDA DNN\")\n\tSET(EMGU_CUDNN_ENGINES_NUGET_TITLE \"Native x64 CNN engines component for CUDA DNN\")\n\tSET(EMGU_CUDNN_OPS_NUGET_TITLE \"Native x64 OPS component for CUDA DNN\")\n\t#SET(EMGU_CUDNN_CNN_INFER_NUGET_TITLE \"Native x64 CNN component for CUDA DNN\")\n\t#SET(EMGU_CUDNN_CNN_TRAIN_NUGET_TITLE \"Native x64 CNN training component for CUDA DNN\")\n\tSET(EMGU_NPP_VERSION \"${EMGU_CUDA_VERSION}\")\n\tSET(EMGU_CUDA_BLAS_VERSION \"${EMGU_CUDA_VERSION}\")\n\tSET(EMGU_NPP_NUGET_TITLE \"Native x64 NPP component for CUDA\")\n\tSET(EMGU_CUDA_BLAS_NUGET_TITLE \"Native x64 blas component for CUDA\")\n\tSET(EMGU_CUDA_BLAS_LT_NUGET_TITLE \"Native x64 blas lt component for CUDA\")\n\t\n\tIF(HAVE_WINDESKTOP_X64)\n\t    #SET(CUDA_EULA_URL https://docs.nvidia.com/pdf/EULA.pdf)\n\t\t#file(DOWNLOAD ${CUDA_EULA_URL} \"${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.windows.cuda.npp/EULA.pdf\")\n\t\t#file(DOWNLOAD ${CUDA_EULA_URL} \"${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.windows.cuda.cufft/EULA.pdf\")\n\t\t#file(COPY \"${CUDA_TOOLKIT_ROOT_DIR}/EULA.txt\" DESTINATION \"${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Cudnn\")\n\t\tSET(EMGU_CUDA_RT_NUGET_FILE_LIST \"${EMGU_CUDA_RT_NUGET_FILE_LIST} \n\t\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cu*.dll\\\" exclude=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cufft*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cudnn*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cublas*.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" /> \n\t\t<file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\t\t\n\t\t<file src=\\\"EULA.txt\\\" target=\\\"CUDA_EULA.txt\\\" />\")\n\t\tSET(EMGU_CUDA_NPP_NUGET_FILE_LIST \"${EMGU_CUDA_NPP_NUGET_FILE_LIST} \n\t\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\npp*.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" />\n\t\t<file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\t\t\n\t\t<file src=\\\"EULA.txt\\\" target=\\\"CUDA_EULA.txt\\\" />\")\n\t\tSET(EMGU_CUDA_BLAS_NUGET_FILE_LIST \"${EMGU_CUDA_BLAS_NUGET_FILE_LIST} \n\t\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cublas64*.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" />\n\t\t<file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\t\t\n\t\t<file src=\\\"EULA.txt\\\" target=\\\"CUDA_EULA.txt\\\" />\")\n\t\tSET(EMGU_CUDA_BLAS_LT_NUGET_FILE_LIST \"${EMGU_CUDA_BLAS_LT_NUGET_FILE_LIST} \n\t\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cublasLt*.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" />\n\t\t<file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\t\t\n\t\t<file src=\\\"EULA.txt\\\" target=\\\"CUDA_EULA.txt\\\" />\")\n\t\tSET(EMGU_CUFFT_NUGET_FILE_LIST \"${EMGU_CUFFT_NUGET_FILE_LIST} \n\t\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cufft*.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" />\n\t\t<file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n\t\t<file src=\\\"EULA.txt\\\" target=\\\"CUDA_EULA.txt\\\" />\")\n\t\tSET(EMGU_CUDNN_NUGET_FILE_LIST \"${EMGU_CUDNN_NUGET_FILE_LIST} \n\t\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cudnn*.dll\\\" exclude=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cudnn_engines*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cudnn_ops*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cudnn_cnn*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cudnn_adv*.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" />\n\t\t<file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n\t\t<file src=\\\"NVIDIA_SLA_cuDNN_Support.txt\\\" target=\\\"cuDNN_SLA.txt\\\" />\")\n\n\t\tSET(EMGU_CUDNN_CNN_NUGET_FILE_LIST \"${EMGU_CUDNN_CNN_NUGET_FILE_LIST} \n\t\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cudnn_cnn*.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" />\n\t\t<file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n\t\t<file src=\\\"NVIDIA_SLA_cuDNN_Support.txt\\\" target=\\\"cuDNN_SLA.txt\\\" />\")\n\t\tSET(EMGU_CUDNN_ENGINES_NUGET_FILE_LIST \"${EMGU_CUDNN_ENGINES_NUGET_FILE_LIST} \n\t\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cudnn_engines*.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" />\n\t\t<file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n\t\t<file src=\\\"NVIDIA_SLA_cuDNN_Support.txt\\\" target=\\\"cuDNN_SLA.txt\\\" />\")\n\t\tSET(EMGU_CUDNN_CNN_NUGET_DEPENDENCY \"\n\t\t<dependencies>\n\t\t  <dependency id=\\\"${EMGU_CUDNN_NUGET_ID}\\\" version=\\\"${EMGU_CUDNN_NUGET_DEPENDENCY_STR}\\\" />\n\t\t</dependencies>\")\n\t\tSET(EMGU_CUDNN_ENGINES_NUGET_DEPENDENCY \"\n\t\t<dependencies>\n\t\t  <dependency id=\\\"${EMGU_CUDNN_NUGET_ID}\\\" version=\\\"${EMGU_CUDNN_NUGET_DEPENDENCY_STR}\\\" />\n\t\t</dependencies>\")\n\t\tSET(EMGU_CUDNN_OPS_NUGET_FILE_LIST \"${EMGU_CUDNN_OPS_NUGET_FILE_LIST} \n\t\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cudnn_ops*.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" />\n\t\t<file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n\t\t<file src=\\\"NVIDIA_SLA_cuDNN_Support.txt\\\" target=\\\"cuDNN_SLA.txt\\\" />\")\n\t\tSET(EMGU_CUDNN_OPS_NUGET_DEPENDENCY \"\n\t\t<dependencies>\n\t\t  <dependency id=\\\"${EMGU_CUDNN_NUGET_ID}\\\" version=\\\"${EMGU_CUDNN_NUGET_DEPENDENCY_STR}\\\" />\n\t\t</dependencies>\")\n\t\tSET(EMGU_CUDNN_ADV_NUGET_FILE_LIST \"${EMGU_CUDNN_ADV_NUGET_FILE_LIST} \n\t\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cudnn_adv*.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" />\n\t\t<file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n\t\t<file src=\\\"NVIDIA_SLA_cuDNN_Support.txt\\\" target=\\\"cuDNN_SLA.txt\\\" />\")\n\t\tSET(EMGU_CUDNN_ADV_NUGET_DEPENDENCY \"\n\t\t<dependencies>\n\t\t  <dependency id=\\\"${EMGU_CUDNN_NUGET_ID}\\\" version=\\\"${EMGU_CUDNN_NUGET_DEPENDENCY_STR}\\\" />\n\t\t</dependencies>\")\n\t\tSET(EMGU_CUDNN_NUGET_DEPENDENCY \"\n\t\t<dependencies>\n\t\t  <dependency id=\\\"${EMGU_CUDART_NUGET_ID}\\\" version=\\\"${EMGU_CUDA_NUGET_DEPENDENCY_STR}\\\" />\n\t\t  <dependency id=\\\"${EMGU_ZLIBWAPI_ID}\\\" version=\\\"${EMGU_ZLIBWAPI_VERSION}\\\" />\n\t\t</dependencies>\")\n\t\tSET(EMGUCV_WINDOWS_NUGET_DEPENDENCY \"${EMGUCV_WINDOWS_NUGET_DEPENDENCY}\n\t\t  <dependency id=\\\"${EMGU_CUDART_NUGET_ID}\\\" version=\\\"${EMGU_CUDA_NUGET_DEPENDENCY_STR}\\\" />\n\t\t  <dependency id=\\\"${EMGU_CUDA_BLAS_LT_NUGET_ID}\\\" version=\\\"${EMGU_CUDA_NUGET_DEPENDENCY_STR}\\\" />\n\t\t  <dependency id=\\\"${EMGU_CUDA_BLAS_NUGET_ID}\\\" version=\\\"${EMGU_CUDA_NUGET_DEPENDENCY_STR}\\\" />\n\t\t  <dependency id=\\\"${EMGU_NPP_NUGET_ID}\\\" version=\\\"${EMGU_CUDA_NUGET_DEPENDENCY_STR}\\\" />\n\t\t  <dependency id=\\\"${EMGU_CUFFT_NUGET_ID}\\\" version=\\\"${EMGU_CUDA_NUGET_DEPENDENCY_STR}\\\" />\n\t\t  <dependency id=\\\"${EMGU_CUDNN_ADV_NUGET_ID}\\\" version=\\\"${EMGU_CUDNN_NUGET_DEPENDENCY_STR}\\\" />\n\t\t  <dependency id=\\\"${EMGU_CUDNN_CNN_NUGET_ID}\\\" version=\\\"${EMGU_CUDNN_NUGET_DEPENDENCY_STR}\\\" />\n\t\t  <dependency id=\\\"${EMGU_CUDNN_ENGINES_NUGET_ID}\\\" version=\\\"${EMGU_CUDNN_NUGET_DEPENDENCY_STR}\\\" />\n\t\t  <dependency id=\\\"${EMGU_CUDNN_OPS_NUGET_ID}\\\" version=\\\"${EMGU_CUDNN_NUGET_DEPENDENCY_STR}\\\" />\n\t\t  <dependency id=\\\"${EMGU_ZLIBWAPI_ID}\\\" version=\\\"${EMGU_ZLIBWAPI_VERSION}\\\" />\n\t\t  \")\n\t\tIF (WITH_CUDNN)\n\t\t  SET(EMGUCV_WINDOWS_NUGET_DEPENDENCY \"${EMGUCV_WINDOWS_NUGET_DEPENDENCY}<dependency id=\\\"${EMGU_CUDNN_NUGET_ID}\\\" version=\\\"${EMGU_CUDNN_NUGET_DEPENDENCY_STR}\\\" />\")\n\t    ENDIF()\n\tENDIF()\n\t\n\tSET(NUGET_PACKAGE_VENDOR \"${CPACK_PACKAGE_VENDOR}\")\n\n\tMESSAGE(STATUS \"<<<<<<<<<<<<<<<< npp_major: ${npp_major} >>>>>>>>>>>>>>>>>>>>>> \")\n\tMESSAGE(STATUS \"<<<<<<<<<<<<<<<< npp_minor: ${npp_minor} >>>>>>>>>>>>>>>>>>>>>> \")\n\tMESSAGE(STATUS \"<<<<<<<<<<<<<<<< npp_build: ${npp_build} >>>>>>>>>>>>>>>>>>>>>> \")\n\tMESSAGE(STATUS \"<<<<<<<<<<<<<<<< cuda_major: ${cuda_major} >>>>>>>>>>>>>>>>>>>>>> \")\n\tMESSAGE(STATUS \"<<<<<<<<<<<<<<<< cuda_minor: ${cuda_minor} >>>>>>>>>>>>>>>>>>>>>> \")\n\tMESSAGE(STATUS \"<<<<<<<<<<<<<<<< CUDA_VERSION: ${CUDA_VERSION} >>>>>>>>>>>>>>>>>>>>>> \")\n\t#MESSAGE(STATUS \"<<<<<<<<<<<<<<<< CUDA_VERSION_MAJOR: ${CUDA_VERSION_MAJOR} >>>>>>>>>>>>>>>>>>>>>> \")\n\t#MESSAGE(STATUS \"<<<<<<<<<<<<<<<< CUDA_VERSION_MINOR: ${CUDA_VERSION_MINOR} >>>>>>>>>>>>>>>>>>>>>> \")\n\t#MESSAGE(STATUS \"<<<<<<<<<<<<<<<< cuda_build: ${cuda_build} >>>>>>>>>>>>>>>>>>>>>> \")\n    MESSAGE(STATUS \"<<<<<<<<<<<<<<<< cudnn_version_major: ${CUDNN_VERSION_MAJOR} >>>>>>>>>>>>>>>>>>>>>> \")\n\tMESSAGE(STATUS \"<<<<<<<<<<<<<<<< cudnn_version_minor: ${CUDNN_VERSION_MINOR} >>>>>>>>>>>>>>>>>>>>>> \")\n\tMESSAGE(STATUS \"<<<<<<<<<<<<<<<< cudnn_version_patch: ${CUDNN_VERSION_PATCH} >>>>>>>>>>>>>>>>>>>>>> \")\n\tMESSAGE(STATUS \"<<<<<<<<<<<<<<<< EMGU_CUDA_VERSION: ${EMGU_CUDA_VERSION} >>>>>>>>>>>>>>>>>>>>>> \")\n\n\t#IF (\"${npp_major}\" STREQUAL \"\")\n\t#  MESSAGE(FATAL_ERROR \"CUDA is enabled, but failed to detect npp_major version\")\n\t#ENDIF()\n\t#IF (\"${npp_minor}\" STREQUAL \"\")\n\t#  MESSAGE(FATAL_ERROR \"CUDA is enabled, but failed to detect npp_minor version\")\n\t#ENDIF()\n\t#IF (\"${npp_build}\" STREQUAL \"\")\n\t#  MESSAGE(FATAL_ERROR \"CUDA is enabled, but failed to detect npp_build version\")\n\t#ENDIF()\n\t\n\t\n\tIF ( (${cuda_major}) AND (${cuda_minor}) )\n\t  SET(CUDA_VERSION_NUMERIC_ONLY \"${cuda_major}${cuda_minor}\")\n\tELSE()\n\t  SET(CUDA_VERSION_NUMERIC_ONLY \"${npp_major}${npp_minor}\")\n\tENDIF()\n\n\tIF(WIN32)\n\t  IF((${npp_major} GREATER 10) OR ((\"${npp_major}\" STREQUAL \"10\") AND (${npp_minor} GREATER 0)))\n\t    IF (${cuda_major})\n\t      SET(CUFFT_POSTFIX \"${cuda_major}\")\n\t    else()\n\t      SET(CUFFT_POSTFIX \"${npp_major}\")\n\t    endif()\n\t  ELSE()\n\t    SET(CUFFT_POSTFIX \"${npp_major}${npp_minor}\")\n\t  ENDIF()\n\tENDIF()\n\t\n\t#MESSAGE(STATUS \"<<<<<<<<<<<<<<<< CUDA_VERSION_NUMERIC_ONLY: ${CUDA_VERSION_NUMERIC_ONLY} >>>>>>>>>>>>>>>>>>>>>> \")\n\t\n\t#CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.windows.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.windows/Package.nuspec)\n\tCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${EMGU_ZLIBWAPI_ID}.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/${EMGU_ZLIBWAPI_ID}/Package.nuspec)\n\tCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${EMGU_CUFFT_NUGET_ID}.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/${EMGU_CUFFT_NUGET_ID}/Package.nuspec)\n\tCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${EMGU_CUDNN_NUGET_ID}.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/${EMGU_CUDNN_NUGET_ID}/Package.nuspec)\n\tCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${EMGU_CUDNN_ADV_NUGET_ID}.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/${EMGU_CUDNN_ADV_NUGET_ID}/Package.nuspec)\n\tCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${EMGU_CUDNN_CNN_NUGET_ID}.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/${EMGU_CUDNN_CNN_NUGET_ID}/Package.nuspec)\n\tCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${EMGU_CUDNN_ENGINES_NUGET_ID}.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/${EMGU_CUDNN_ENGINES_NUGET_ID}/Package.nuspec)\n\tCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${EMGU_CUDNN_OPS_NUGET_ID}.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/${EMGU_CUDNN_OPS_NUGET_ID}/Package.nuspec)\n\tCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${EMGU_NPP_NUGET_ID}.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/${EMGU_NPP_NUGET_ID}/Package.nuspec)\n\tCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${EMGU_CUDART_NUGET_ID}.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/${EMGU_CUDART_NUGET_ID}/Package.nuspec)\n\tCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${EMGU_CUDA_BLAS_NUGET_ID}.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/${EMGU_CUDA_BLAS_NUGET_ID}/Package.nuspec)\n\tCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${EMGU_CUDA_BLAS_LT_NUGET_ID}.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/${EMGU_CUDA_BLAS_LT_NUGET_ID}/Package.nuspec)\nENDIF()\n\nIF(HAVE_WINDESKTOP_X86)\n  SET(EMGUCV_WINDOWS_NUGET_DEPENDENCY \"${EMGUCV_WINDOWS_NUGET_DEPENDENCY}\n\t  <dependency id=\\\"${EMGU_WINDOWS_MSVCRT_X86_NUGET_ID}\\\" version=\\\"${EMGU_WINDOWS_MSVCRT_VERSION}\\\" />\n\t  \")\t\t\nENDIF()\n\nIF(HAVE_WINDESKTOP_X64)\n  SET(EMGUCV_WINDOWS_NUGET_DEPENDENCY \"${EMGUCV_WINDOWS_NUGET_DEPENDENCY}\n\t  <dependency id=\\\"${EMGU_WINDOWS_MSVCRT_X64_NUGET_ID}\\\" version=\\\"${EMGU_WINDOWS_MSVCRT_VERSION}\\\" />\n\t  \")\t\t\nENDIF()\n\nIF(HAVE_WINDESKTOP_ARM64)\n  SET(EMGUCV_WINDOWS_NUGET_DEPENDENCY \"${EMGUCV_WINDOWS_NUGET_DEPENDENCY}\n\t  <dependency id=\\\"${EMGU_WINDOWS_MSVCRT_ARM64_NUGET_ID}\\\" version=\\\"${EMGU_WINDOWS_MSVCRT_VERSION}\\\" />\n\t  \")\t\t\nENDIF()\n\nSET(EMGUCV_WINDOWS_NUGET_DEPENDENCY \"\t<dependencies>\n\t\t${EMGUCV_WINDOWS_NUGET_DEPENDENCY}\n    </dependencies>\")\n\nSET(EMGUCV_MACOS_NUGET_DEPENDENCY \"\t<dependencies>\n\t\t${EMGUCV_MACOS_NUGET_DEPENDENCY}\n    </dependencies>\")\n\n# Sign the binary\n  SET(EMGUCV_POST_PROCESS_BINARY \"\")\n  IF(EMGU_SIGN_FOUND AND WIN32)    \n    file(TO_NATIVE_PATH ${EMGU_SIGN_EXECUTABLE} EMGU_SIGN_EXECUTABLE_NATIVE_PATH)\n    file(TO_NATIVE_PATH ${SIGNTOOL_EXECUTABLE} SIGNTOOL_EXECUTABLE_NATIVE_PATH)\n    SET(EMGUCV_POST_PROCESS_BINARY \"${EMGUCV_POST_PROCESS_BINARY}\n    <Target Name=\\\"PostProcessBinary\\\" AfterTargets=\\\"PostBuildEvent\\\" Condition=\\\"Exists('${EMGU_SIGN_EXECUTABLE_NATIVE_PATH}')\\\">\n      <Message Text=\\\"Signing $(OutputPath)$(AssemblyName).dll\\\" Importance=\\\"high\\\" />\n      <MakeDir Directories=\\\"$(OutputPath)\\\\signed\\\"/>\n      <Exec Command='${EMGU_SIGN_EXECUTABLE_NATIVE_PATH} \\\"$(OutputPath)$(AssemblyName).dll\\\" \\\"$(OutputPath)signed\\\" \\\"${SIGNTOOL_EXECUTABLE_NATIVE_PATH}\\\"' WorkingDirectory=\\\"$(OutputPath)\\\" />\n    </Target>\")\n  ENDIF()  \n\n# Sign the debugger visualizer\n  SET(EMGUCV_POST_PROCESS_VSIX \"\")\n  IF(EMGU_VSIX_SIGN_FOUND AND WIN32)\n    file(TO_NATIVE_PATH ${EMGU_VSIX_SIGN_EXECUTABLE} EMGU_VSIX_SIGN_EXECUTABLE_NATIVE_PATH)\n\tfile(TO_NATIVE_PATH ${OPENVSIXSIGNTOOL_EXECUTABLE} OPENVSIXSIGNTOOL_EXECUTABLE_NATIVE_PATH)\n    SET(EMGUCV_POST_PROCESS_VSIX \"${EMGUCV_POST_PROCESS_VSIX}\n    <Target Name=\\\"PostProcessVSIX\\\" AfterTargets=\\\"PostBuildEvent\\\" Condition=\\\"Exists('${EMGU_SIGN_EXECUTABLE_NATIVE_PATH}')\\\">\n      <Message Text=\\\"Signing $(OutputPath)$(AssemblyName).vsix\\\" Importance=\\\"high\\\" />\n      <MakeDir Directories=\\\"$(OutputPath)\\\\signed\\\"/>\n      <Exec Command='${EMGU_VSIX_SIGN_EXECUTABLE_NATIVE_PATH} \\\"$(OutputPath)$(AssemblyName).vsix\\\" \\\"$(OutputPath)signed\\\" \\\"${OPENVSIXSIGNTOOL_EXECUTABLE_NATIVE_PATH}\\\"' WorkingDirectory=\\\"$(OutputPath)\\\" />\n    </Target>\")\n  ENDIF()  \n  \n  # Generate nuget config file for Emgu.CV.Bitmap\n# Sign and copy the binary\nSET(EMGUCV_POST_PROCESS_NUGET \"\")\nIF(EMGU_SIGN_FOUND AND WIN32)\n  file(TO_NATIVE_PATH ${EMGU_SIGN_EXECUTABLE} EMGU_SIGN_EXECUTABLE_NATIVE_PATH)\n  file(TO_NATIVE_PATH ${SIGNTOOL_EXECUTABLE} SIGNTOOL_EXECUTABLE_NATIVE_PATH)\n  SET(EMGUCV_POST_PROCESS_NUGET \"\n  <Target Name=\\\"PostProcessNuget\\\" AfterTargets=\\\"Pack\\\">\n    <Message Text=\\\"Signing $(PackageOutputPath)\\\\$(PackageId).$(PackageVersion).nupkg\\\" Importance=\\\"high\\\" />\n    <MakeDir Directories=\\\"$(PackageOutputPath)\\\\signed\\\"/>\n    <Exec Command='${EMGU_NUGET_SIGN_EXECUTABLE_NATIVE_PATH} \\\"$(PackageOutputPath)\\\\$(PackageId).$(PackageVersion).nupkg\\\" \\\"$(PackageOutputPath)\\\\signed\\\" \\\"${NUGET_EXECUTABLE_NATIVE_PATH}\\\"' WorkingDirectory=\\\"$(PackageOutputPath)\\\" />\n  </Target>\n\t\")\nENDIF()\n\n#IF(HAVE_ANDROID)\n  SET(EMGUCV_MAUI_ANDROID_NUGET_TITLE \"Emgu CV for MAUI Android Native Runtime\")\n  \n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.maui.android.Directory.Build.props.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Runtime/Maui/Android/Directory.Build.props)\n  IF(EMGU_SIGN_FOUND AND WIN32)\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignBinary.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Runtime/Maui/Android/SignBinary.Targets)\n  ENDIF()\n  IF(EMGU_NUGET_SIGN_FOUND AND WIN32)\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignPkg.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Runtime/Maui/Android/SignPkg.Targets)\n  ENDIF()\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.maui.android.Package.README.md.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Runtime/Maui/Android/docs/README.md)\n#ENDIF()\n\n#IF(HAVE_IOS)  \n  SET(EMGUCV_MAUI_IOS_NUGET_TITLE \"Emgu CV for MAUI iOS Native Runtime\")\t\n  #SET(EMGUCV_MAUI_IOS_POST_PROCESS_BINARY \"${EMGUCV_MAUI_IOS_POST_PROCESS_BINARY}\")\n  #SET(EMGUCV_MAUI_IOS_POST_PROCESS_BINARY \"${EMGUCV_MAUI_IOS_POST_PROCESS_BINARY}\n  #<Target Name=\\\"PostProcessBinary\\\" AfterTargets=\\\"PostBuildEvent\\\">\n  #  <Message Text=\\\"Copying $(OutputPath)$(AssemblyName).dll, $(OutputPath)$(AssemblyName).xml to $(OpenCVBinaryDir)\\\" Importance=\\\"high\\\" />\n  #  <Copy SourceFiles=\\\"$(OutputPath)$(AssemblyName).dll\\\" DestinationFolder=\\\"$(OpenCVBinaryDir)\\\" ContinueOnError=\\\"true\\\" />\n  #  <Copy SourceFiles=\\\"$(OutputPath)$(AssemblyName).xml\\\" DestinationFolder=\\\"$(OpenCVBinaryDir)\\\" ContinueOnError=\\\"true\\\" />\n  #</Target>\")  \n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.maui.ios.Directory.Build.props.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Runtime/Maui/iOS/Directory.Build.props)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.maui.ios.Package.README.md.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Runtime/Maui/iOS/docs/README.md)  \n#ENDIF()\n\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/UseRidGraph.props.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.macos/Emgu.CV.runtime.macos.props)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.macos.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.macos/Package.nuspec)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.macos.Package.README.md.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.macos/docs/README.md)  \n\n\n#IF(HAVE_MAUI)\n  SET(EMGUCV_MAUI_NUGET_ID \"${EMGUCV_NUGET_ID}.runtime.maui${EMGUCV_RUNTIME_EXTRA_TAG}\")\n  SET(EMGUCV_MAUI_NUGET_TITLE \"Emgu CV for MAUI Native Runtime\")\n  \n  SET(EMGUCV_MAUI_PACKAGE_REFERENCE \"\")\n  IF (HAVE_WINDESKTOP)\n    SET(EMGUCV_MAUI_PACKAGE_REFERENCE \"\n\t<ItemGroup>\n      <PackageReference Condition=\\\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'\\\" Include=\\\"${EMGUCV_WINDOWS_NUGET_ID}\\\" Version=\\\"${CPACK_PACKAGE_VERSION}\\\">\n\t  </PackageReference>\n    </ItemGroup>\")\n  ENDIF()\n  \n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.maui.Directory.Build.props.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Runtime/Maui/UI/Directory.Build.props)\n  IF(EMGU_SIGN_FOUND AND WIN32)\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignBinary.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Runtime/Maui/UI/SignBinary.Targets)\n  ENDIF()\n  IF(EMGU_NUGET_SIGN_FOUND AND WIN32)\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignPkg.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Runtime/Maui/UI/SignPkg.Targets)\n  ENDIF()\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.maui.Package.README.md.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Runtime/Maui/UI/docs/README.md)\n  #CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.maui.Package.README.md.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.maui/README.md)\n  #CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.maui.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.maui/Package.nuspec)\n#ENDIF()\n\nIF (HAVE_WINDESKTOP)\n  SET(EMGUCV_DEBUGGER_VISUALIZER_PACKAGE_REFERENCE \"\n\t<ItemGroup>\n      <PackageReference Condition=\\\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'\\\" Include=\\\"${EMGUCV_WINDOWS_NUGET_ID}\\\" Version=\\\"${CPACK_PACKAGE_VERSION}\\\">\n\t  </PackageReference>\n\t  <!--\n\t  <PackageReference Condition=\\\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'\\\" Include=\\\"${EMGUCV_WPF_NUGET_ID}\\\" Version=\\\"${CPACK_PACKAGE_VERSION}\\\">\n\t  </PackageReference>\n\t  -->\n    </ItemGroup>\")\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.DebuggerVisualizer.Directory.Build.props.in ${CMAKE_CURRENT_SOURCE_DIR}/DebuggerVisualizer/Directory.Build.props)\n  IF(EMGU_SIGN_FOUND AND WIN32)\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignBinary.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/DebuggerVisualizer/SignBinary.Targets)\n\tCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignVSIX.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/DebuggerVisualizer/SignVSIX.Targets)\n  ENDIF()\nENDIF()\n\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.BuildInfo.Console.Directory.Build.props.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Example/BuildInfo.Console/Directory.Build.props)\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.Test.Net.Directory.Build.props.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Test/Emgu.CV.Test.Net/Directory.Build.props)\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.DynamicImage.Asp.Net.Directory.Build.props.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Example/DynamicImage.Asp.Net/Directory.Build.props)\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.HelloWorld.Console.Directory.Build.props.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Example/HelloWorld/Directory.Build.props)\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.HelloWorld.WPF.Directory.Build.props.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Example/HelloWorld.WPF/Directory.Build.props)\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.Maui.Demo.Directory.Build.props.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Example/MAUI/MauiDemoApp/Directory.Build.props)\n\nIF(HAVE_WINSTORE_10)\n  SET(EMGUCV_UWP_NUGET_TITLE \"Emgu CV for UWP Native Runtime\")\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.uwp.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.uwp/Package.nuspec)\nENDIF()\n\nIF(HAVE_WINDESKTOP_X86)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${EMGU_WINDOWS_MSVCRT_X86_NUGET_ID}.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/${EMGU_WINDOWS_MSVCRT_X86_NUGET_ID}/Package.nuspec)\nENDIF()\n\nIF(HAVE_WINDESKTOP_X64)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${EMGU_WINDOWS_MSVCRT_X64_NUGET_ID}.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/${EMGU_WINDOWS_MSVCRT_X64_NUGET_ID}/Package.nuspec)\nENDIF()\n\nIF(HAVE_WINDESKTOP_ARM64)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${EMGU_WINDOWS_MSVCRT_ARM64_NUGET_ID}.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/${EMGU_WINDOWS_MSVCRT_ARM64_NUGET_ID}/Package.nuspec)  \nENDIF()\n\nIF(HAVE_WINDESKTOP_X86 OR HAVE_WINDESKTOP_X64 OR HAVE_WINDESKTOP_ARM64)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.windows.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.windows/Package.nuspec)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.windows.Package.README.md.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.windows/README.md)\n  \n  # Generate nuget config file for Emgu.CV.UI\n  # Sign and copy the binary\n  #SET(EMGUCV_UI_POST_PROCESS_BINARY \"\")\n  #IF(EMGU_SIGN_FOUND AND WIN32)\n  #  file(TO_NATIVE_PATH ${EMGU_SIGN_EXECUTABLE} EMGU_SIGN_EXECUTABLE_NATIVE_PATH)\n  #  file(TO_NATIVE_PATH ${SIGNTOOL_EXECUTABLE} SIGNTOOL_EXECUTABLE_NATIVE_PATH)\n  #  SET(EMGUCV_UI_POST_PROCESS_BINARY \"\n#\t<Target Name=\\\"PostProcessBinary\\\" AfterTargets=\\\"PostBuildEvent\\\" Condition=\\\"Exists('${EMGU_SIGN_EXECUTABLE_NATIVE_PATH}')\\\">\n#      <Message Text=\\\"Signing $(OutputPath)$(AssemblyName).dll\\\" Importance=\\\"high\\\" />\n#  \t  <MakeDir Directories=\\\"$(OutputPath)\\\\signed\\\"/>\n#      <Exec Command='${EMGU_SIGN_EXECUTABLE_NATIVE_PATH} \\\"$(OutputPath)$(AssemblyName).dll\\\" \\\"$(OutputPath)signed\\\" \\\"${SIGNTOOL_EXECUTABLE_NATIVE_PATH}\\\"' WorkingDirectory=\\\"$(OutputPath)\\\" />\n#  \t</Target>\n#  \t\")\n#  ENDIF()\n  \n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.UI.Directory.Build.props.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.WindowsUI/Emgu.CV.WindowsUI/Directory.Build.props)\n  IF(EMGU_SIGN_FOUND AND WIN32)\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignBinary.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.WindowsUI/Emgu.CV.WindowsUI/SignBinary.Targets)\n  ENDIF()\n  IF(EMGU_NUGET_SIGN_FOUND AND WIN32)\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignPkg.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.WindowsUI/Emgu.CV.WindowsUI/SignPkg.Targets)\n  ENDIF()\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.UI.Package.README.md.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.WindowsUI/Emgu.CV.WindowsUI/docs/README.md)\nENDIF()\n\nIF(HAVE_LINUX_ARM)\n  SET(EMGUCV_DEBIAN_ARM_NUGET_TITLE \"Emgu CV Native ARM Runtime for Debian (including Raspberry Pi OS)\")\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/UseRidGraph.props.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.debian-arm/Emgu.CV.runtime.debian-arm.props)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.debian-arm.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.debian-arm/Package.nuspec)\nENDIF()\n\nIF(HAVE_LINUX_ARM64)\n  SET(EMGUCV_DEBIAN_ARM64_NUGET_TITLE \"Emgu CV Native ARM64 Runtime for Debian (including Raspberry Pi OS)\")\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/UseRidGraph.props.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.debian-arm64/Emgu.CV.runtime.debian-arm64.props)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.debian-arm64.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.debian-arm64/Package.nuspec)\nENDIF()\n\nIF(HAVE_UBUNTU_X86 OR HAVE_UBUNTU_X64 OR HAVE_UBUNTU_ARM64)\n  SET(EMGUCV_UBUNTU_NUGET_TITLE \"Emgu CV Native Runtime for Ubuntu\")\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/UseRidGraph.props.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.ubuntu/Emgu.CV.runtime.ubuntu.props)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.ubuntu.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.ubuntu/Package.nuspec)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.ubuntu.Package.README.md.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.ubuntu/README.md)\nENDIF()\n\nIF(HAVE_RHEL_X86 OR HAVE_RHEL_X64 OR HAVE_RHEL_ARM64)\n  SET(EMGUCV_RHEL_NUGET_TITLE \"Emgu CV Native Runtime for RHEL\")\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.rhel.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.rhel/Package.nuspec)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/UseRidGraph.props.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.rhel/Emgu.CV.runtime.rhel.props)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.rhel.Package.README.md.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.rhel/README.md)\nENDIF()\n\nSET(EMGUCV_NUGET_TITLE \"Emgu CV\")\nSET(EMGUCV_NUGET_SUMMARY \"Emgu CV is a cross platform .Net wrapper to the OpenCV image processing library.\")\n\nIF (\"${LICENSE_TYPE}\" STREQUAL \"Commercial\")\n\tSET(EMGUCV_NUGET_TITLE \"${EMGUCV_NUGET_TITLE} Commercial Release\")\n\tSET(EMGUCV_NUGET_SUMMARY \"${EMGUCV_NUGET_SUMMARY} This is the commercial release.\")\n\tIF(HAVE_ANDROID)\n      SET(EMGUCV_MAUI_ANDROID_NUGET_TITLE \"${EMGUCV_MAUI_ANDROID_NUGET_TITLE} Commercial Release for MAUI\")\t  \n\tENDIF()\t\n\tIF(HAVE_WINSTORE_10)\n\t  SET(EMGUCV_UWP_NUGET_TITLE \"${EMGUCV_UWP_NUGET_TITLE} Commercial Release\")\n\tENDIF()\nENDIF()\n\n\n\n#generate nuget config file for Emgu.CV \nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.Directory.Build.props.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV/NetStandard/Directory.Build.props)\nIF(EMGU_SIGN_FOUND AND WIN32)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignBinary.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV/NetStandard/SignBinary.Targets)\nENDIF()\nIF(EMGU_NUGET_SIGN_FOUND AND WIN32)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignPkg.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV/NetStandard/SignPkg.Targets)\nENDIF()\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.Package.README.md.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV/NetStandard/docs/README.md)\n\n#generate nuget config file for Emgu.CV.Models\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.Models.Directory.Build.props.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Models/NetStandard/Directory.Build.props)\nIF(EMGU_SIGN_FOUND AND WIN32)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignBinary.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Models/NetStandard/SignBinary.Targets)\nENDIF()\nIF(EMGU_NUGET_SIGN_FOUND AND WIN32)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignPkg.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Models/NetStandard/SignPkg.Targets)\nENDIF()\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.Models.Package.README.md.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Models/NetStandard/docs/README.md)\n\n\n      \n# Sign the nuget package\n#SET(EMGUCV_BITMAP_POST_PROCESS_NUGET \"\")\n#IF(EMGU_NUGET_SIGN_FOUND AND WIN32)\n#  file(TO_NATIVE_PATH ${EMGU_NUGET_SIGN_EXECUTABLE} EMGU_NUGET_SIGN_EXECUTABLE_NATIVE_PATH)\n#  file(TO_NATIVE_PATH ${NUGET_EXECUTABLE} NUGET_EXECUTABLE_NATIVE_PATH)\n#  SET(EMGUCV_BITMAP_POST_PROCESS_NUGET \"${EMGUCV_BITMAP_POST_PROCESS_NUGET}\n#  <Target Name=\\\"PostProcessNuget\\\" AfterTargets=\\\"Pack\\\">\n#    <Message Text=\\\"Signing $(PackageOutputPath)\\\\$(PackageId).$(PackageVersion).nupkg\\\" Importance=\\\"high\\\" />\n#    <MakeDir Directories=\\\"$(PackageOutputPath)\\\\signed\\\"/>\n#    <Exec Command='${EMGU_NUGET_SIGN_EXECUTABLE_NATIVE_PATH} \\\"$(PackageOutputPath)\\\\$(PackageId).$(PackageVersion).nupkg\\\" \\\"$(PackageOutputPath)\\\\signed\\\" \\\"${NUGET_EXECUTABLE_NATIVE_PATH}\\\"' WorkingDirectory=\\\"$(PackageOutputPath)\\\" />\n#  </Target>\n#\t\")\n#ENDIF()\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.Bitmap.Directory.Build.props.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Bitmap/Directory.Build.props)\nIF(EMGU_SIGN_FOUND AND WIN32)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignBinary.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Bitmap/SignBinary.Targets)\nENDIF()\nIF(EMGU_NUGET_SIGN_FOUND AND WIN32)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignPkg.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Bitmap/SignPkg.Targets)\nENDIF()\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.Bitmap.Package.README.md.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Bitmap/docs/README.md)\n\n\n#generate nuget config file for Emgu.CV.Wpf\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.Wpf.Directory.Build.props.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Wpf/Directory.Build.props)\nIF(EMGU_SIGN_FOUND AND WIN32)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignBinary.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Wpf/SignBinary.Targets)\nENDIF()\nIF(EMGU_NUGET_SIGN_FOUND AND WIN32)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignPkg.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Wpf/SignPkg.Targets)\nENDIF()\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.Wpf.Package.README.md.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Wpf/docs/README.md)\n\n# Generate nuget config file for Emgu.CV.Wpf\n# Sign and copy the binary\n#SET(EMGUCV_WPF_POST_PROCESS_BINARY \"\")\n#IF(EMGU_SIGN_FOUND AND WIN32)\n#  file(TO_NATIVE_PATH ${EMGU_SIGN_EXECUTABLE} EMGU_SIGN_EXECUTABLE_NATIVE_PATH)\n#  file(TO_NATIVE_PATH ${SIGNTOOL_EXECUTABLE} SIGNTOOL_EXECUTABLE_NATIVE_PATH)\n#  SET(EMGUCV_WPF_POST_PROCESS_BINARY \"\n#  <Target Name=\\\"PostProcessBinary\\\" AfterTargets=\\\"PostBuildEvent\\\" Condition=\\\"Exists('${EMGU_SIGN_EXECUTABLE_NATIVE_PATH}')\\\">\n#    <Message Text=\\\"Signing $(OutputPath)$(AssemblyName).dll\\\" Importance=\\\"high\\\" />\n#\t<MakeDir Directories=\\\"$(OutputPath)\\\\signed\\\"/>\n#    <Exec Command='${EMGU_SIGN_EXECUTABLE_NATIVE_PATH} \\\"$(OutputPath)$(AssemblyName).dll\\\" \\\"$(OutputPath)signed\\\" \\\"${SIGNTOOL_EXECUTABLE_NATIVE_PATH}\\\"' WorkingDirectory=\\\"$(OutputPath)\\\" />\n#  </Target>\n#\t\")\n#ENDIF()\n\n# ----------------------------------------------------------------------------\n#  Generate readme file for Emgu CV project\n# ----------------------------------------------------------------------------\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/README.txt.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV/README.txt)\nINSTALL(FILES \"${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV/README.txt\" DESTINATION \".\" COMPONENT libs)\n\n# ----------------------------------------------------------------------------\n#  Include license file & nuget icon into package\n# ----------------------------------------------------------------------------\nINSTALL(FILES \"${CMAKE_CURRENT_SOURCE_DIR}/LICENSE.txt\" DESTINATION \".\" COMPONENT libs)\nINSTALL(FILES \"${CMAKE_CURRENT_SOURCE_DIR}/miscellaneous/nuget_icon.png\" DESTINATION \"miscellaneous/\" COMPONENT libs)\n\n# ----------------------------------------------------------------------------\n#  Generate CvInvokeEntryPoints.cs file for Emgu CV project\n# ----------------------------------------------------------------------------\nSET(OPENCV_LIBRARY_OUTPUT_NAME_PREFIX \"\")\nIF (APPLE)\n  SET(OPENCV_LIBRARY_OUTPUT_NAME_POSTFIX \".${OPENCV_VERSION_MAJOR}.${OPENCV_VERSION_MINOR}.${OPENCV_VERSION_PATCH}\")\nELSE()\n  SET(OPENCV_LIBRARY_OUTPUT_NAME_POSTFIX \"\")\nENDIF()\n\nSET(OPENCV_LIBRARY_OUTPUT_NAMES )\n\nFOREACH(OPENCV_MODULE_NAME ${OPENCV_MODULE_NAME_CANDIDATES})\n  STRING (TOUPPER \"${OPENCV_MODULE_NAME}\" OPENCV_MODULE_NAME_UPPER)\n  \n  STRING (SUBSTRING \"${OPENCV_MODULE_NAME}\" 0 1 OPENCV_MODULE_NAME_FIRST_LETTER)\n  STRING (TOUPPER \"${OPENCV_MODULE_NAME_FIRST_LETTER}\" OPENCV_MODULE_NAME_FIRST_LETTER_UPPER)\n  STRING (SUBSTRING \"${OPENCV_MODULE_NAME}\" 1 -1 OPENCV_MODULE_NAME_REMAINDER)\n  SET(OPENCV_MODULE_NAME_FIRST_LETTER_UPPER \"${OPENCV_MODULE_NAME_FIRST_LETTER_UPPER}${OPENCV_MODULE_NAME_REMAINDER}\")\n  \n  SET(OPENCV_OUTPUT_PROJ_TYPE \"\")\n  IF(NOT (TARGET opencv_${OPENCV_MODULE_NAME}))\n    SET(OPENCV_${OPENCV_MODULE_NAME_UPPER}_OUTPUT_NAME \"\")\n  ELSE()\n    #MESSAGE( STATUS \"opencv_${OPENCV_MODULE_NAME} type: ${OPENCV_OUTPUT_PROJ_TYPE}\")\n    GET_TARGET_PROPERTY(OPENCV_OUTPUT_PROJ_TYPE opencv_${OPENCV_MODULE_NAME} TYPE)\n    IF(NOT (\"${OPENCV_OUTPUT_PROJ_TYPE}\" STREQUAL \"SHARED_LIBRARY\"))\n      SET(OPENCV_${OPENCV_MODULE_NAME_UPPER}_OUTPUT_NAME \"\")\n    ELSE()\n      GET_TARGET_PROPERTY(OPENCV_OUTPUT_NAME_TMP opencv_${OPENCV_MODULE_NAME} OUTPUT_NAME)\n      SET(OPENCV_${OPENCV_MODULE_NAME_UPPER}_OUTPUT_NAME  ${OPENCV_LIBRARY_OUTPUT_NAME_PREFIX}${OPENCV_OUTPUT_NAME_TMP}${OPENCV_LIBRARY_OUTPUT_NAME_POSTFIX})\n      LIST(APPEND OPENCV_LIBRARY_OUTPUT_NAMES ${OPENCV_${OPENCV_MODULE_NAME_UPPER}_OUTPUT_NAME})\n      SET(ENTRYPOINT_MODULES_STRING \"${ENTRYPOINT_MODULES_STRING}\n      Opencv${OPENCV_MODULE_NAME_FIRST_LETTER_UPPER}Library,\")\n    ENDIF()\n  ENDIF()\n  \n  IF(IOS)\n    SET(ENTRYPOINT_CS_STRING \"${ENTRYPOINT_CS_STRING} \n      /// <summary>\n      /// The file name of the ${OPENCV_MODULE_NAME} library\n      /// </summary>\n      public const string Opencv${OPENCV_MODULE_NAME_FIRST_LETTER_UPPER}Library = \\\"__Internal\\\";\")\n  ELSEIF(((WIN32 AND NOT ANDROID) OR APPLE))\n    IF((\"${OPENCV_OUTPUT_PROJ_TYPE}\" STREQUAL \"SHARED_LIBRARY\"))\n      SET(ANDROID_ENTRYPOINT \"opencv_${OPENCV_MODULE_NAME}\")\n      SET(MACOS_ENTRYPOINT \"opencv_${OPENCV_MODULE_NAME}.${OPENCV_VERSION_MAJOR}.${OPENCV_VERSION_MINOR}.${OPENCV_VERSION_PATCH}\")\n      SET(MACOS_UNITY_STANDALONE_ENTRYPOINT \"@executable_path/../Plugins/emgucv.bundle/Contents/MacOS/lib${MACOS_ENTRYPOINT}.dylib\")\n      SET(MACOS_UNITY_EDITOR_ENTRYPOINT \"Assets/Plugins/emgucv.bundle/Contents/MacOS/lib${MACOS_ENTRYPOINT}.dylib\")\n      SET(WINDOWS_ENTRYPOINT \"opencv_${OPENCV_MODULE_NAME}${OPENCV_VERSION_MAJOR}${OPENCV_VERSION_MINOR}${OPENCV_VERSION_PATCH}\")\n      SET(IOS_ENTRYPOINT \"__Internal\")\n      \n      IF(\"${OPENCV_${OPENCV_MODULE_NAME_UPPER}_OUTPUT_NAME}\" STREQUAL \"\")\n        SET(ANDROID_ENTRYPOINT \"\")\n        SET(MACOS_ENTRYPOINT \"\")\n        SET(MACOS_UNITY_ENTRYPOINT \"emgucv\")\n        SET(WINDOWS_ENTRYPOINT \"\")\n        SET(IOS_ENTRYPOINT \"\")\n      ENDIF()\n      \n      SET(ENTRYPOINT_CS_STRING \"${ENTRYPOINT_CS_STRING} \n      /// <summary>\n      /// The file name of the ${OPENCV_MODULE_NAME} library\n      /// </summary>\n      #if UNITY_EDITOR_WIN || UNITY_STANDALONE_WIN\n      public const string Opencv${OPENCV_MODULE_NAME_FIRST_LETTER_UPPER}Library = \\\"${WINDOWS_ENTRYPOINT}\\\";\n      #elif UNITY_EDITOR_OSX\n      public const string Opencv${OPENCV_MODULE_NAME_FIRST_LETTER_UPPER}Library = \\\"${MACOS_UNITY_EDITOR_ENTRYPOINT}\\\";   \n      #elif UNITY_STANDALONE_OSX\n      public const string Opencv${OPENCV_MODULE_NAME_FIRST_LETTER_UPPER}Library = \\\"${MACOS_UNITY_STANDALONE_ENTRYPOINT}\\\";   \n      #elif __IOS__ || UNITY_IPHONE || UNITY_WEBGL\n      public const string Opencv${OPENCV_MODULE_NAME_FIRST_LETTER_UPPER}Library = \\\"${IOS_ENTRYPOINT}\\\";\n      #elif __ANDROID__ || UNITY_ANDROID\n      public const string Opencv${OPENCV_MODULE_NAME_FIRST_LETTER_UPPER}Library = \\\"${ANDROID_ENTRYPOINT}\\\";\n      #else\n      public const string Opencv${OPENCV_MODULE_NAME_FIRST_LETTER_UPPER}Library = \\\"${OPENCV_${OPENCV_MODULE_NAME_UPPER}_OUTPUT_NAME}\\\";\n      #endif\n\")\n    ENDIF()\n  ELSE()\n    IF(\"${OPENCV_OUTPUT_PROJ_TYPE}\" STREQUAL \"SHARED_LIBRARY\")\n      SET(ENTRYPOINT_CS_STRING \"${ENTRYPOINT_CS_STRING} \n      /// <summary>\n      /// The file name of the ${OPENCV_MODULE_NAME} library\n      /// </summary>\n      public const string Opencv${OPENCV_MODULE_NAME_FIRST_LETTER_UPPER}Library = \\\"${OPENCV_${OPENCV_MODULE_NAME_UPPER}_OUTPUT_NAME}\\\";\")\n    ENDIF()\n  ENDIF()\n  \nENDFOREACH()\n\nSET(ENTRYPOINT_MODULES_STRING \"public static List<String> OpenCVModuleList = new List<String>\n\t  {\n#if !(__ANDROID__ || __IOS__ || UNITY_IPHONE  || UNITY_WEBGL || UNITY_ANDROID || NETFX_CORE)\n        OpencvFFMpegLibrary,\n#endif        \n        ${ENTRYPOINT_MODULES_STRING}\n        ExternLibrary\n      };\n\")\n\nGET_TARGET_PROPERTY(CVEXTERN_OUTPUT_NAME cvextern OUTPUT_NAME)\nLIST(APPEND OPENCV_LIBRARY_OUTPUT_NAMES ${CVEXTERN_OUTPUT_NAME})\n\nif(WIN32 AND WITH_FFMPEG)\n  if(TARGET_ARCH_64)\n    set(FFMPEG_SUFFIX _64)\n  endif()\n  #STRING(LENGTH \"${OPENCV_CORE_OUTPUT_NAME}\" temp)\n  #MATH(EXPR temp \"${temp}-3\")\n  #STRING(SUBSTRING ${OPENCV_CORE_OUTPUT_NAME} ${temp} -1 OPENCV_DLLVERSION)\n  set(OPENCV_FFMPEG_OUTPUT_NAME \"opencv_videoio_ffmpeg${OPENCV_VERSION_MAJOR}${OPENCV_VERSION_MINOR}${OPENCV_VERSION_PATCH}${FFMPEG_SUFFIX}\")\n  #set(OPENCV_FFMPEG_OUTPUT_NAME \"opencv_ffmpeg${FFMPEG_SUFFIX}\")\n  MESSAGE(STATUS \"OPENCV_FFMPEG_OUTPUT_NAME: ${OPENCV_FFMPEG_OUTPUT_NAME}\")\n  LIST(APPEND OPENCV_LIBRARY_OUTPUT_NAMES ${OPENCV_FFMPEG_OUTPUT_NAME})\nendif()\n\nIF(TARGET_ARCH_64)\n  SET(UNMANAGED_CODE_BITNESS \"64\")\nELSE()\n  SET(UNMANAGED_CODE_BITNESS \"32\")\nENDIF()\n\n#IF(ANDROID)\n#  SET(CVINVOKE_ENTRYPOINTS_FILE_SUBFOLDER \"Android/\")\n#ELSE()\nSET(CVINVOKE_ENTRYPOINTS_FILE_SUBFOLDER \"\")\n#ENDIF()\n\nIF(IOS)\n  SET(CVEXTERN_OUTPUT_NAME \"__Internal\")\nENDIF()\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/CvInvokeEntryPoints.cs.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV/PInvoke/${CVINVOKE_ENTRYPOINTS_FILE_SUBFOLDER}CvInvokeEntryPoints.cs)\n\n# ----------------------------------------------------------------------------\n#  Build the managed dlls of Emgu CV\n# ----------------------------------------------------------------------------\nADD_SUBDIRECTORY(Emgu.Util)\nADD_SUBDIRECTORY(Emgu.CV)\nADD_SUBDIRECTORY(Emgu.CV.Bitmap)\nADD_SUBDIRECTORY(Emgu.CV.Wpf)\nADD_SUBDIRECTORY(Emgu.CV.WindowsUI)\n\nADD_SUBDIRECTORY(Emgu.CV.Example)\nADD_SUBDIRECTORY(Emgu.CV.Test)\nADD_SUBDIRECTORY(Emgu.CV.Cuda)\n\nADD_SUBDIRECTORY(Emgu.CV.OCR)\n \nADD_SUBDIRECTORY(Emgu.CV.Contrib)\nADD_SUBDIRECTORY(Emgu.CV.Models)\n\nADD_SUBDIRECTORY(Emgu.CV.Runtime)\n\nADD_SUBDIRECTORY(platforms/nuget)\n\n# MAUI will need to use some of the nuget packages. It need to be build after nuget packages is build.\nADD_SUBDIRECTORY(Emgu.CV.Runtime/Maui)\n\nINSTALL(\n  FILES\n  \"opencv/LICENSE\"\n  DESTINATION \"lib\"\n  COMPONENT emgucv_example_source\n  RENAME \"opencv.license.txt\"\n  )    \n\nIF(HAVE_ANDROID)\n  INSTALL(\n    FILES\n    \"Solution/Android/Emgu.CV.Android.Example.sln\"\n    \"Solution/Android/Emgu.CV.Android.sln\"\n    DESTINATION \"Solution/Android\"\n    COMPONENT emgucv_example_source\n    )\n\nENDIF()\n\nIF(HAVE_IOS)\n  INSTALL(\n    FILES\n    \"Solution/iOS/Emgu.CV.iOS.Example.sln\"\n    \"Solution/iOS/Emgu.CV.iOS.Maui.sln\"\n    DESTINATION \"Solution/iOS\"\n    COMPONENT emgucv_example_source\n    )\nENDIF()\n\nIF(HAVE_MACOS)\n  INSTALL(\n    FILES\n    \"Solution/Mac/Emgu.CV.Mac.Example.sln\"\n    DESTINATION \"Solution/Mac\"\n    COMPONENT emgucv_example_source\n    )\n  IF (NOT IS_MACOS_BUILD)\n    INSTALL(\n      FILES\n      \"libs/runtimes/osx/native/libcvextern.dylib\"\n      DESTINATION \"libs/runtimes/osx/native\"\n      COMPONENT emgucv_binary\n      )\n  ENDIF()\nENDIF()\n\nIF(HAVE_MAC_CATALYST)\n  INSTALL(\n    FILES\n    \"Solution/Mac/Emgu.CV.Mac.Maui.sln\"\n    DESTINATION \"Solution/Mac\"\n    COMPONENT emgucv_example_source\n    )\n  IF (HAVE_MAC_CATALYST_ARM64)\n    INSTALL(\n      FILES\n      \"libs/iOS/libcvextern_catalyst_arm64.a\"\n      DESTINATION \"libs/iOS\"\n      COMPONENT emgucv_binary\n      )\n  ENDIF()\n  IF (HAVE_MAC_CATALYST_X86_64)\n    INSTALL(\n      FILES\n      \"libs/iOS/libcvextern_catalyst_x86_64.a\"\n      DESTINATION \"libs/iOS\"\n      COMPONENT emgucv_binary\n      )\n  ENDIF()\nENDIF()\n\nIF (TARGET Emgu.CV.runtime.maui)\n  INSTALL(\n    FILES\n    \"Solution/CrossPlatform/Emgu.CV.CrossPlatform.sln\"\n\t\"Solution/CrossPlatform/Emgu.CV.sln\"\n    DESTINATION \"Solution/CrossPlatform\"\n    COMPONENT emgucv_example_source\n    )\nENDIF()\n\nINSTALL(\n  FILES\n  \"${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.snk\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/CommonAssemblyInfo.cs\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/Directory.Build.props\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/${LICENSE_FILE_NAME}\"\n  DESTINATION .\n  COMPONENT emgucv_source\n  )\n  \n#IF (EMGU_CV_WITH_FREETYPE)\n#  IF (ANDROID)  \n\t#INSTALL(EXPORT freetype DESTINATION lib)\n#  ENDIF()\n#ENDIF()\n\nIF (ANDROID)\n  SET(CPACK_GENERATOR ZIP)\nELSEIF (WIN32)\n  SET(CPACK_GENERATOR ZIP;7Z)\n  \n  #IF(NETFX_CORE)\n  #  SET(CPACK_GENERATOR ZIP)\n  #ELSE()  \n  #  SET(CPACK_GENERATOR NSIS;ZIP)\n  #ENDIF()\n  \n  SET(CPACK_ARCHIVE_COMPONENT_INSTALL ON) #enable components install for zip\n  IF(CPACK_GENERATOR MATCHES \"ZIP\")\n    SET(CPACK_COMPONENTS_ALL_IN_ONE_PACKAGE 1)\n  ENDIF()\n  SET(CPACK_NSIS_MODIFY_PATH OFF)\n  SET(CPACK_NSIS_INSTALL_ROOT \"C:\\\\\\\\Emgu\")\n  \n  #IF(NOT NETFX_CORE)\n  #  ADD_SUBDIRECTORY(Emgu.CV.DebuggerVisualizers)\n  #ENDIF()\n  \n  IF(NOT NETFX_CORE)\n\tADD_SUBDIRECTORY(DebuggerVisualizer)\n  ENDIF()\n\n  if(WITH_FFMPEG)\n    INSTALL(\n  \tFILES\n  \t\"${UNMANAGED_LIBRARY_OUTPUT_PATH}/${OPENCV_FFMPEG_OUTPUT_NAME}.dll\"\n  \tDESTINATION \"libs/${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}/\"\n  \tCOMPONENT libs\n  \t)\n  endif()\n  \n  # ----------------------------------------------------------------------------\n  #  Build the documents of Emgu CV\n  # ----------------------------------------------------------------------------\n  SET(EMGU_CV_DOCUMENTATION_BUILD OFF CACHE BOOL \"Build Emgu CV Documentation\")\n  IF(EMGU_CV_DOCUMENTATION_BUILD)\n    ADD_SUBDIRECTORY(miscellaneous)\n  ENDIF()\n\n  # ----------------------------------------------------------------------------\n  #  Set if we should sign the managed assembly\n  # ----------------------------------------------------------------------------  \n  IF (WIN32)\n\tSET(EMGU_SIGN_ASSEMBLY OFF CACHE BOOL \"If enabled, we will sign the managed assembly\")\n  ELSE()\n\tSET(EMGU_SIGN_ASSEMBLY ON CACHE BOOL \"If enabled, we will sign the managed assembly\")\n  ENDIF()\n  \n  # ----------------------------------------------------------------------------\n  #  Build the extra components of Emgu CV\n  # ----------------------------------------------------------------------------\n  SET(EMGU_CV_EXTRA_BUILD OFF CACHE BOOL \"Build Emgu CV Extra\")\n  IF(EMGU_CV_EXTRA_BUILD)\n    ADD_SUBDIRECTORY(Emgu.RPC)\n  ENDIF()\n  \n#  # ----------------------------------------------------------------------------\n#  #  The source files\n#  # ----------------------------------------------------------------------------\n#  INSTALL(\n#    DIRECTORY\n#    ${CMAKE_CURRENT_SOURCE_DIR}/lib\n#    DESTINATION .\n#    COMPONENT emgucv_source\n#    FILES_MATCHING \n#    PATTERN \"*.dll\"\n#    PATTERN \"*.txt\"\n#    PATTERN \"*.xml\"\n#    PATTERN \".git\" EXCLUDE\n#    PATTERN \"obj\" EXCLUDE\n#    PATTERN \"CMake*\" EXCLUDE\n#    PATTERN \"Release\" EXCLUDE\n#    PATTERN \"${PROJECT_NAME}.dir\" EXCLUDE\n#    )\n\t\n  # ----------------------------------------------------------------------------\n  #  Include the version_str.inc files in the package\n  # ----------------------------------------------------------------------------\n  INSTALL(\n    DIRECTORY\n    ${CMAKE_CURRENT_SOURCE_DIR}/libs\n    DESTINATION .\n    COMPONENT emgucv_binary\n    FILES_MATCHING \n    PATTERN \"*version_string.inc\"\n    PATTERN \".git\" EXCLUDE\n    PATTERN \"obj\" EXCLUDE\n    PATTERN \"CMake*\" EXCLUDE\n    )\n  \n  #WINDOWS STORE EXAMPLE\n  IF(HAVE_WINSTORE_10_X86 OR HAVE_WINSTORE_10_X64 OR HAVE_WINSTORE_10_ARM)  \n    INSTALL(\n      DIRECTORY\n      ${CMAKE_CURRENT_SOURCE_DIR}/Solution\n      DESTINATION .\n      COMPONENT emgucv_example_source\n      FILES_MATCHING \n      PATTERN \"Emgu.CV.Example.Windows.UWP.sln\"\n\t  PATTERN \"Windows.UWP/packages/repositories.config\"\n      PATTERN \".git\" EXCLUDE\n      PATTERN \"bin\" EXCLUDE\n      PATTERN \"Android\" EXCLUDE\n      PATTERN \"iOS\" EXCLUDE\n      PATTERN \"Windows.Phone\" EXCLUDE\n      PATTERN \"Windows.Desktop\" EXCLUDE\n      PATTERN \"CrossPlatform\" EXCLUDE\n\t  PATTERN \"Mac\" EXCLUDE\n      )\n  ENDIF()\n  \n  #WIN32 and not NETFX_CORE solution files\n  IF (HAVE_WINDESKTOP_X86 OR HAVE_WINDESKTOP_X64 OR HAVE_WINDESKTOP_ARM64)\n    INSTALL(\n      DIRECTORY\n      ${CMAKE_CURRENT_SOURCE_DIR}/Solution\n      DESTINATION .\n      COMPONENT emgucv_source\n      FILES_MATCHING \n      PATTERN \"Emgu.CV.sln\"\n      PATTERN \"Emgu.CV.DebuggerVisualizers.sln\"\n      PATTERN \".git\" EXCLUDE\n      PATTERN \"bin\" EXCLUDE\n      PATTERN \"Android\" EXCLUDE\n      PATTERN \"iOS\" EXCLUDE\n      PATTERN \"CrossPlatform\" EXCLUDE\n\t  PATTERN \"Mac\" EXCLUDE\n\t  PATTERN \"Windows.UWP\" EXCLUDE\n      )\n    INSTALL(\n      DIRECTORY\n      ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.WPF\n      DESTINATION .\n      COMPONENT emgucv_example_source\n      FILES_MATCHING \n      PATTERN \"*.cs\"\n      PATTERN \".git\" EXCLUDE\n      )\n    INSTALL(\n      DIRECTORY\n      ${CMAKE_CURRENT_SOURCE_DIR}/Solution\n      DESTINATION .\n      COMPONENT emgucv_example_source\n      FILES_MATCHING \n      PATTERN \"Emgu.CV.Example.sln\"\n      PATTERN \".git\" EXCLUDE\n      PATTERN \"bin\" EXCLUDE\n      PATTERN \"Android\" EXCLUDE\n      PATTERN \"iOS\" EXCLUDE\n      PATTERN \"Windows.UWP\" EXCLUDE\n      PATTERN \"CrossPlatform\" EXCLUDE\n\t  PATTERN \"Mac\" EXCLUDE\n      )\n    \n    # ----------------------------------------------------------------------------\n    #  The example files\n    # ----------------------------------------------------------------------------\n    # INSTALL(\n      # DIRECTORY\n      # ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Example\n      # DESTINATION .\n      # COMPONENT emgucv_example_source\n      # FILES_MATCHING \n      # PATTERN \"*.cs\"\n      # PATTERN \"*.csproj\"\n      # PATTERN \"*.resx\"\n      # PATTERN \"*.h\"\n      # PATTERN \"*.cpp\"\n      # PATTERN \"*.resX\"\n      # PATTERN \"*.ico\"\n      # PATTERN \"*.rc\"\n      # PATTERN \"CPlusPlus/*.vcproj\"\n      # PATTERN \"CPlusPlus/*.vcxproj\"\n      # PATTERN \"*.vb\"\n      # PATTERN \"*.vbproj\"\n      # PATTERN \"*.aspx\" \n      # PATTERN \"*.dll\"\n      # PATTERN \"*.txt\"\n      # PATTERN \"*.xml\"\n      # PATTERN \"*.xaml\"\n      # PATTERN \"*.jpg\"\n      # PATTERN \"*.png\"\n\t  # PATTERN \"*.svg\"\n      # PATTERN \"*.settings\"\n      # PATTERN \"*.config\"\n      # PATTERN \"tessdata/*\"\n      # PATTERN \".git\" EXCLUDE\n      # PATTERN \"obj\" EXCLUDE\n      # PATTERN \"CMake*\" EXCLUDE\n      # PATTERN \"Release\" EXCLUDE\n      # PATTERN \"Debug\" EXCLUDE\n      # PATTERN \"RelWithDebInfo\" EXCLUDE\n      # PATTERN \"*.dir\" EXCLUDE\n      # PATTERN \"Android\" EXCLUDE\n      # PATTERN \"iOS\" EXCLUDE\n      # PATTERN \"Mac\" EXCLUDE\n      # PATTERN \"WindowsStore\" EXCLUDE\n      # PATTERN \"WindowsPhoneApp\" EXCLUDE\n      # PATTERN \"WindowsStoreCameraApp\" EXCLUDE\n      # )\n  ENDIF()\n  \n  INSTALL(\n    FILES\n    \"${OPENCV_SUBFOLDER}/data/haarcascades/haarcascade_frontalface_default.xml\"\n    \"${OPENCV_SUBFOLDER}/data/haarcascades/haarcascade_eye.xml\"\n    DESTINATION opencv/data/haarcascades\n    COMPONENT emgucv_example_source\n    )\n  INSTALL(\n    FILES\n    \"${OPENCV_CONTRIB_SUBFOLDER}/modules/text/samples/trained_classifierNM1.xml\"\n    \"${OPENCV_CONTRIB_SUBFOLDER}/modules/text/samples/trained_classifierNM2.xml\"\n    \"${OPENCV_CONTRIB_SUBFOLDER}/modules/text/samples/trained_classifier_erGrouping.xml\"\n    DESTINATION opencv_contrib/modules/text/samples/\n    COMPONENT emgucv_example_source\n    ) \n  \n  # ----------------------------------------------------------------------------\n  #  Build the package\n  # ----------------------------------------------------------------------------\n  \n  set(CPACK_COMPONENTS_ALL \n    libs #opencv components \n    emgucv_binary \n    emgucv_source\n    emgucv_example_source\n    )\n  \n  set(CPACK_PACKAGE_EXECUTABLES \"\" \"\") #http://public.kitware.com/Bug/view.php?id=7828\n  \n  SET(CPACK_NSIS_CONTACT \"support@emgu.com\")\n  \n  # Define MUI_TEMP that will be used for uninstalling menulinks\n  SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}\\n !insertmacro MUI_STARTMENU_GETFOLDER Application $MUI_TEMP\")\n  \n  # ----------------------------------------------------------------------------\n  #  Add menu link for documentations\n  # ----------------------------------------------------------------------------\n  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}\\nCreateDirectory \\\\\\\"$SMPROGRAMS\\\\\\\\$STARTMENU_FOLDER\\\\\\\\Documentation\\\\\\\" \")\n  \n  #SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}\\nCreateShortCut \\\\\\\"$SMPROGRAMS\\\\\\\\$STARTMENU_FOLDER\\\\\\\\Documentation\\\\\\\\Open CV Documentation.lnk\\\\\\\"  \\\\\\\"$INSTDIR\\\\\\\\doc\\\\\\\\opencv2refman.pdf\\\\\\\" \")\t\n  #SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}\\n Delete \\\\\\\"$SMPROGRAMS\\\\\\\\$MUI_TEMP\\\\\\\\Documentation\\\\\\\\Open CV Documentation.lnk\\\\\\\" \")\n  \n  IF(EMGU_CV_DOCUMENTATION_BUILD)\n    LIST(APPEND CPACK_COMPONENTS_ALL emgucv_document)\n    set(CPACK_COMPONENT_EMGUCV_DOCUMENT_DISPLAY_NAME \"Emgu CV Documentation\")\n    set(CPACK_COMPONENT_EMGUCV_DOCUMENT_DEPENDS emgucv_binary)\n    SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}\\nCreateShortCut \\\\\\\"$SMPROGRAMS\\\\\\\\$STARTMENU_FOLDER\\\\\\\\Documentation\\\\\\\\Emgu CV Documentation.lnk\\\\\\\"  \\\\\\\"$INSTDIR\\\\\\\\Emgu.CV.Documentation.chm\\\\\\\" \")\t\n    SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}\\n Delete \\\\\\\"$SMPROGRAMS\\\\\\\\$MUI_TEMP\\\\\\\\Documentation\\\\\\\\Emgu CV Documentation.lnk\\\\\\\" \")\n  ENDIF()\n  \n  SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}\\nRMDir  \\\\\\\"$SMPROGRAMS\\\\\\\\$MUI_TEMP\\\\\\\\Documentation\\\\\\\" \")\n  \n  # ----------------------------------------------------------------------------\n  #  Add menu link for web sites\n  # ----------------------------------------------------------------------------\n  LIST(APPEND CPACK_NSIS_MENU_LINKS \"https://www.emgu.com\" \"Emgu CV wiki\")\n  LIST(APPEND CPACK_NSIS_MENU_LINKS \"${GITHUB_REPO_URL}/discussions\" \"Discussions\")\n  LIST(APPEND CPACK_NSIS_MENU_LINKS \"${GITHUB_REPO_URL}/issues\" \"Issues Tracking\")\n  \n  # ----------------------------------------------------------------------------\n  #  Add menu link for Visual Studio solutions \n  # ----------------------------------------------------------------------------\n  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}\\nCreateDirectory \\\\\\\"$SMPROGRAMS\\\\\\\\$STARTMENU_FOLDER\\\\\\\\Visual Studio Solution\\\\\\\" \")\n  \n  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}\\nCreateShortCut \\\\\\\"$SMPROGRAMS\\\\\\\\$STARTMENU_FOLDER\\\\\\\\Visual Studio Solution\\\\\\\\Visual Studio 2017 - 2022 Examples.lnk\\\\\\\"  \\\\\\\"$INSTDIR\\\\\\\\Solution\\\\\\\\Windows.Desktop\\\\\\\\Emgu.CV.Example.sln\\\\\\\" \")\t\n  \n  SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}\\n Delete \\\\\\\"$SMPROGRAMS\\\\\\\\$MUI_TEMP\\\\\\\\Visual Studio Solution\\\\\\\\Visual Studio 2017 - 2022 Examples.lnk\\\\\\\" \")\n  \n  SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}\\nRMDir  \\\\\\\"$SMPROGRAMS\\\\\\\\$MUI_TEMP\\\\\\\\Visual Studio Solution\\\\\\\" \")\n  \n  # ----------------------------------------------------------------------------\n  #  Add menu link for Licenses \n  # ----------------------------------------------------------------------------\n  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}\\nCreateDirectory \\\\\\\"$SMPROGRAMS\\\\\\\\$STARTMENU_FOLDER\\\\\\\\License\\\\\\\" \")\n  \n  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}\\nCreateShortCut \\\\\\\"$SMPROGRAMS\\\\\\\\$STARTMENU_FOLDER\\\\\\\\License\\\\\\\\Emgu CV License.lnk\\\\\\\"  \\\\\\\"$INSTDIR\\\\\\\\${LICENSE_FILE_NAME}\\\\\\\" \")\t\n  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}\\nCreateShortCut \\\\\\\"$SMPROGRAMS\\\\\\\\$STARTMENU_FOLDER\\\\\\\\License\\\\\\\\Open CV License.lnk\\\\\\\"  \\\\\\\"$INSTDIR\\\\\\\\lib\\\\\\\\opencv.license.txt\\\\\\\" \")\n  IF(EMGU_CV_WITH_TESSERACT)\n    SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}\\nCreateShortCut \\\\\\\"$SMPROGRAMS\\\\\\\\$STARTMENU_FOLDER\\\\\\\\License\\\\\\\\Tesseract OCR License.lnk\\\\\\\"  \\\\\\\"$INSTDIR\\\\\\\\lib\\\\\\\\tesseract-ocr.license.txt\\\\\\\" \")\t\n  ENDIF()\n  #SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}\\nCreateShortCut \\\\\\\"$SMPROGRAMS\\\\\\\\$STARTMENU_FOLDER\\\\\\\\License\\\\\\\\CvBlob License.lnk\\\\\\\"  \\\\\\\"$INSTDIR\\\\\\\\lib\\\\\\\\3rdParty\\\\\\\\cvblob.license.txt\\\\\\\" \")\t\n  \n  SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}\\n Delete \\\\\\\"$SMPROGRAMS\\\\\\\\$MUI_TEMP\\\\\\\\License\\\\\\\\Emgu CV License.lnk\\\\\\\" \")\n  SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}\\n Delete \\\\\\\"$SMPROGRAMS\\\\\\\\$MUI_TEMP\\\\\\\\License\\\\\\\\Open CV License.lnk\\\\\\\" \")\n  IF(EMGU_CV_WITH_TESSERACT)\n    SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}\\n Delete \\\\\\\"$SMPROGRAMS\\\\\\\\$MUI_TEMP\\\\\\\\License\\\\\\\\Tesseract OCR License.lnk\\\\\\\" \")\n  ENDIF()\n  #SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}\\n Delete \\\\\\\"$SMPROGRAMS\\\\\\\\$MUI_TEMP\\\\\\\\License\\\\\\\\CvBlob License.lnk\\\\\\\" \")\n  SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}\\nRMDir  \\\\\\\"$SMPROGRAMS\\\\\\\\$MUI_TEMP\\\\\\\\License\\\\\\\" \")\n  \n  #IF(EMGU_CV_EXAMPLE_BUILD AND NOT NETFX_CORE)\n  #  LIST(APPEND CPACK_COMPONENTS_ALL emgucv_example_binary)\n  #  SET(CPACK_COMPONENT_EMGUCV_EXAMPLE_BINARY_DISPLAY_NAME \"Emgu CV Examples (Binary)\")\n  #  SET(CPACK_COMPONENT_EMGUCV_EXAMPLE_BINARY_DEPENDS emgucv_binary)\n  #ENDIF()\n  \n  set(CPACK_COMPONENT_MAIN_DISPLAY_NAME \"OpenCV Native Binary\")\n  set(CPACK_COMPONENT_MAIN_REQUIRED ON)\n  set(CPACK_COMPONENT_EMGUCV_BINARY_DISPLAY_NAME \"Emgu CV (Binary)\")\n  set(CPACK_COMPONENT_EMGUCV_BINARY_REQUIRED ON)\n  set(CPACK_COMPONENT_EMGUCV_BINARY_DEPENDS libs)\n  set(CPACK_COMPONENT_EMGUCV_SOURCE_DISPLAY_NAME \"Emgu CV (Source)\")\n  set(CPACK_COMPONENT_EMGUCV_SOURCE_DEPENDS libs)\n  set(CPACK_COMPONENT_EMGUCV_EXAMPLE_SOURCE_DISPLAY_NAME \"Emgu CV Examples (Source)\")\n  set(CPACK_COMPONENT_EMGUCV_EXAMPLE_SOURCE_DEPENDS emgucv_source)\n  \n  \n  IF (${CMAKE_VERSION} VERSION_GREATER \"3.19.0\" AND WIN32)\n    STRING(REGEX REPLACE \"/\" \"\\\\\\\\\\\\\\\\\" WIN_CMAKE_COMMAND \"${CMAKE_COMMAND}\" )\n\t\n    IF(EMGU_SIGN_FOUND)\n\t  #Sign the windows installer (.exe)\n\t  SET(NSIS_PACKAGE_FILE ${CMAKE_BINARY_DIR}/lib${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}.exe)\n      #MESSAGE(STATUS \"CPACK_PACKAGE_FILES: ${NSIS_PACKAGE_FILE}\")  \n\t  STRING(REGEX REPLACE \"/\" \"\\\\\\\\\\\\\\\\\" WIN_EMGU_SIGN_EXECUTABLE \"${EMGU_SIGN_EXECUTABLE}\")\n\t  STRING(REGEX REPLACE \"/\" \"\\\\\\\\\\\\\\\\\" WIN_PACKAGE_FILE \"${CMAKE_BINARY_DIR}/lib${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}.exe\")\n\t  STRING(REGEX REPLACE \"/\" \"\\\\\\\\\\\\\\\\\" WIN_PACKAGE_FOLDER \"${CMAKE_BINARY_DIR}/signed\")\n\t  STRING(REGEX REPLACE \"/\" \"\\\\\\\\\\\\\\\\\" WIN_SIGNTOOL_EXECUTABLE \"${SIGNTOOL_EXECUTABLE}\")\n\t  #FILE(WRITE \"${CMAKE_BINARY_DIR}/sign_package.txt\" \"add_custom_command(OUTPUT ${WIN_PACKAGE_FOLDER}/lib${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}.exe\\n\")\n\t  FILE(WRITE \"${CMAKE_BINARY_DIR}/sign_package.cmake\" \"IF(EXISTS \\\"${CMAKE_BINARY_DIR}/lib${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}.exe\\\")\\n\")\n\t  FILE(APPEND \"${CMAKE_BINARY_DIR}/sign_package.cmake\" \"  FILE(MAKE_DIRECTORY \\\"${CMAKE_BINARY_DIR}/signed\\\")\\n\")\n\t  #FILE(APPEND \"${CMAKE_BINARY_DIR}/sign_package.cmake\" \"  EXECUTE_PROCESS(COMMAND \\\"${WIN_CMAKE_COMMAND}\\\" -E make_directory \\\"${CMAKE_BINARY_DIR}/signed\\\")\\n\")\n\t  FILE(APPEND \"${CMAKE_BINARY_DIR}/sign_package.cmake\" \"  EXECUTE_PROCESS(COMMAND \\\"${WIN_EMGU_SIGN_EXECUTABLE}\\\" \\\"${WIN_PACKAGE_FILE}\\\" \\\"${WIN_PACKAGE_FOLDER}\\\" \\\"${WIN_SIGNTOOL_EXECUTABLE}\\\")\\n\")\n\t  FILE(APPEND \"${CMAKE_BINARY_DIR}/sign_package.cmake\" \"ENDIF()\\n\")\n      LIST(APPEND CPACK_POST_BUILD_SCRIPTS \"${CMAKE_BINARY_DIR}/sign_package.cmake\")\n\t  #LIST(APPEND CPACK_POST_BUILD_SCRIPTS \"${WIN_EMGU_SIGN_EXECUTABLE} ${CMAKE_BINARY_DIR}/lib${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}.exe ${CMAKE_BINARY_DIR}/signed\")\n\tENDIF()\n\t\n\tIF (WITH_CUDA)\n\t\tFIND_PROGRAM (SEVEN_ZIP_EXECUTABLE\n\t\t\tNAMES 7z \n\t\t\tPATHS\n\t\t\t$ENV{programfiles}/7-Zip\n\t\t\tCMAKE_FIND_ROOT_PATH_BOTH\n\t\t\t)\n\t\t\t\n\t\tIF (SEVEN_ZIP_EXECUTABLE)\n\t\t  MESSAGE(STATUS \"Found 7z.exe: ${SEVEN_ZIP_EXECUTABLE}\")\n\t\t  STRING(REGEX REPLACE \"/\" \"\\\\\\\\\\\\\\\\\" WIN_PACKAGE_ZIP_FILE \"${CMAKE_BINARY_DIR}/lib${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}.zip\")\n\t\t  STRING(REGEX REPLACE \"/\" \"\\\\\\\\\\\\\\\\\" WIN_SEVEN_ZIP_EXECUTABLE \"${SEVEN_ZIP_EXECUTABLE}\")\n\t\t  FILE(WRITE \"${CMAKE_BINARY_DIR}/convert_to_7zip.cmake\" \"EXECUTE_PROCESS(COMMAND echo \\\\\\\\${CPACK_PACKAGE_FILES})\\n\")\n\t\t  FILE(APPEND \"${CMAKE_BINARY_DIR}/convert_to_7zip.cmake\" \"IF (EXISTS \\\"${CMAKE_BINARY_DIR}/lib${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}.zip\\\")\\n\")\n\t\t  FILE(APPEND \"${CMAKE_BINARY_DIR}/convert_to_7zip.cmake\" \"  EXECUTE_PROCESS(COMMAND \\\"${WIN_CMAKE_COMMAND}\\\" -E rm -rf \\\"${CMAKE_BINARY_DIR}/lib${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}\\\")\\n\")\n\t\t  FILE(APPEND \"${CMAKE_BINARY_DIR}/convert_to_7zip.cmake\" \"  EXECUTE_PROCESS(COMMAND \\\"${WIN_CMAKE_COMMAND}\\\" -E rm -f \\\"${WIN_PACKAGE_ZIP_FILE}.selfextract.exe\\\")\\n\")\n\t\t  FILE(APPEND \"${CMAKE_BINARY_DIR}/convert_to_7zip.cmake\" \"  EXECUTE_PROCESS(COMMAND \\\"${WIN_CMAKE_COMMAND}\\\" -E make_directory \\\"${CMAKE_BINARY_DIR}/lib${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}\\\")\\n\")\n\t\t  FILE(APPEND \"${CMAKE_BINARY_DIR}/convert_to_7zip.cmake\" \"  EXECUTE_PROCESS(COMMAND \\\"${WIN_SEVEN_ZIP_EXECUTABLE}\\\" x \\\"${WIN_PACKAGE_ZIP_FILE}\\\" -olib${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION} -y)\\n\")\n\t\t  FILE(APPEND \"${CMAKE_BINARY_DIR}/convert_to_7zip.cmake\" \"  EXECUTE_PROCESS(COMMAND \\\"${WIN_SEVEN_ZIP_EXECUTABLE}\\\" a -sfx7z.sfx \\\"${WIN_PACKAGE_ZIP_FILE}.selfextract.exe\\\" lib${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION} -mx=9 -m0=LZMA2 -mmt=off -md=512m )\\n\")\n\t\t  \n\t\t  IF (EMGU_SIGN_FOUND)\n\t\t\tFILE(APPEND \"${CMAKE_BINARY_DIR}/convert_to_7zip.cmake\" \"  EXECUTE_PROCESS(COMMAND \\\"${WIN_EMGU_SIGN_EXECUTABLE}\\\" \\\"${WIN_PACKAGE_ZIP_FILE}.selfextract.exe\\\" \\\"${WIN_PACKAGE_FOLDER}\\\" \\\"${WIN_SIGNTOOL_EXECUTABLE}\\\")\\n\")\n\t\t  ENDIF()\n\t\t  \n\t\t  FILE(APPEND \"${CMAKE_BINARY_DIR}/convert_to_7zip.cmake\" \"ENDIF()\\n\")\n\t\t  LIST(APPEND CPACK_POST_BUILD_SCRIPTS \"${CMAKE_BINARY_DIR}/convert_to_7zip.cmake\")\n\t\tENDIF()\n\tENDIF()\n\n  ENDIF()\n \n  \nELSEIF (APPLE)\n  \n  SET(CPACK_GENERATOR ZIP)\n  SET(CPACK_BUNDLE_NAME ${CPACK_PACKAGE_NAME})\n  \n  SET(CPACK_BUNDLE_ICON \"${CMAKE_CURRENT_SOURCE_DIR}/platforms/macos/icons.icns\")\n  IF (IOS)\n    SET(CPACK_ARCHIVE_COMPONENT_INSTALL ON) #enable components install for zip\n    IF(CPACK_GENERATOR MATCHES \"ZIP\")\n      SET(CPACK_COMPONENTS_ALL_IN_ONE_PACKAGE 1)\n    ENDIF()\n    set(CPACK_COMPONENTS_ALL emgucv_binary emgucv_source emgucv_example_source)\n  ENDIF()\n\n  # ----------------------------------------------------------------------------\n  #  The source files\n  # ----------------------------------------------------------------------------\n  \n  INSTALL(\n    DIRECTORY\n    ${CMAKE_CURRENT_SOURCE_DIR}/lib\n    DESTINATION .\n    COMPONENT emgucv_source\n    FILES_MATCHING \n    PATTERN \"*.dll\"\n    PATTERN \"*.txt\"\n    PATTERN \"*.xml\"\n    PATTERN \".git\" EXCLUDE\n    PATTERN \"obj\" EXCLUDE\n    PATTERN \"CMake*\" EXCLUDE\n    PATTERN \"Release\" EXCLUDE\n    PATTERN \"${PROJECT_NAME}.dir\" EXCLUDE\n    )\n\n  \n  # ----------------------------------------------------------------------------\n  #  The example files\n  # ----------------------------------------------------------------------------\n  INSTALL(\n    DIRECTORY\n    ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Example\n    DESTINATION .\n    COMPONENT emgucv_example_source\n    FILES_MATCHING \n    PATTERN \"*.cs\"\n    PATTERN \"*.csproj\"\n    PATTERN \"*.resx\"\n    PATTERN \"*.h\"\n    PATTERN \"*.cpp\"\n    PATTERN \"*.resX\"\n    PATTERN \"*.ico\"\n    PATTERN \"*.rc\"\n    PATTERN \"CPlusPlus/*.vcproj\"\n    PATTERN \"CPlusPlus/*.vcxproj\"\n    PATTERN \"*.vb\"\n    PATTERN \"*.vbproj\"\n    PATTERN \"*.aspx\" \n    PATTERN \"*.dll\"\n    PATTERN \"*.txt\"\n    PATTERN \"*.xml\"\n    PATTERN \"*.xaml\"\n    PATTERN \"*.jpg\"\n    PATTERN \"*.png\"  \n    PATTERN \"*.settings\"\n    PATTERN \"*.config\"\n    PATTERN \"tessdata/*\"\n    PATTERN \".git\" EXCLUDE\n    PATTERN \"obj\" EXCLUDE\n    PATTERN \"CMake*\" EXCLUDE\n    PATTERN \"Release\" EXCLUDE\n    PATTERN \"Debug\" EXCLUDE\n    PATTERN \"*.dir\" EXCLUDE\n    PATTERN \"Android\" EXCLUDE\n    PATTERN \"iOS\" EXCLUDE\n    )\n  \n  INSTALL(\n    FILES\n    \"${OPENCV_SUBFOLDER}/data/haarcascades/haarcascade_frontalface_default.xml\"\n    \"${OPENCV_SUBFOLDER}/data/haarcascades/haarcascade_eye.xml\"\n    DESTINATION opencv/data/haarcascades\n    COMPONENT emgucv_example_source\n    )\n  \n  INSTALL(\n    FILES\n    \"${OPENCV_CONTRIB_SUBFOLDER}/modules/text/samples/trained_classifierNM1.xml\"\n    \"${OPENCV_CONTRIB_SUBFOLDER}/modules/text/samples/trained_classifierNM2.xml\"\n    \"${OPENCV_CONTRIB_SUBFOLDER}/modules/text/samples/trained_classifier_erGrouping.xml\"\n    DESTINATION opencv_contrib/modules/text/samples/\n    COMPONENT emgucv_example_source\n    )\n  \n  \n  # ----------------------------------------------------------------------------\n  #  Generate required common assembly file for Emgu CV project\n  # ----------------------------------------------------------------------------\n  SET(CPACK_BUNDLE_PLIST ${CMAKE_CURRENT_SOURCE_DIR}/cmake/macos/Info.plist)\n  FILE(WRITE ${CPACK_BUNDLE_PLIST}\n    \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\n<!DOCTYPE plist PUBLIC \\\"-//Apple//DTD PLIST 1.0//EN\\\" \\\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\\">\n<plist version=\\\"1.0\\\">\n<dict>\n   <key>CFBundleIdentifier</key>\n   <string>com.emgu.cv</string>\n   <key>CFBundleName</key>\n   <string>${CPACK_BUNDLE_NAME}</string>\n   <key>CFBundleVersion</key>\n   <string>1</string>\n   <key>LSMinimumSystemVersion</key>\n   <string>10.6</string>\n</dict>\n</plist>\")\n  \nELSE() #LINUX\n  SET(MONO_GACUTIL_EXEC \"gacutil\")\n  #SET(LINUX_CONTROL_FILE_FOLDER \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/linux\")\n  SET(EMGUCV_MANAGED_DLLS \"Emgu.CV\")\n  \n  #SET(CLIFILELIST_CONTENT \"\")\n  #FOREACH(MANAGED_DLL ${EMGUCV_MANAGED_DLLS})\n  #  SET(CLIFILELIST_CONTENT \"${CLIFILELIST_CONTENT}/usr/${CPACK_PACKAGE_CLI_FOLDER}/${MANAGED_DLL}.dll\\n\")\n  #ENDFOREACH()\n  #FILE(WRITE ${LINUX_CONTROL_FILE_FOLDER}/clifilelist.txt ${CLIFILELIST_CONTENT})\n  #INSTALL(\n  #  FILES\n  #  ${LINUX_CONTROL_FILE_FOLDER}/clifilelist.txt\n  #  DESTINATION ${CPACK_PACKAGE_CLI_FOLDER}\n  #  COMPONENT emgucv_binary)\n  \n  #creating the pkg-config file\n  #SET(PACKAGE_CFG_REF_CONTENT \"\")\n  #FOREACH(MANAGED_DLL ${EMGUCV_MANAGED_DLLS})\n  #  SET(PACKAGE_CFG_REF_CONTENT \"${PACKAGE_CFG_REF_CONTENT} -r:\\${libdir}/${MANAGED_DLL}.dll\")\n  #ENDFOREACH()\n  \n  #FILE(WRITE ${LINUX_CONTROL_FILE_FOLDER}/${CPACK_PACKAGE_NAME}.pc\n  #  \"prefix=/usr\\nexec_prefix=\\${prefix}\\nlibdir=\\${exec_prefix}/${CPACK_PACKAGE_CLI_FOLDER}\\napidir=\\${exec_prefix}/${CPACK_PACKAGE_CLI_FOLDER}\\n\\nName: ${CPACK_PACKAGE_NAME}\\nDescription: ${CPACK_PACKAGE_DESCRIPTION_SUMMARY}\\nVersion: ${CPACK_PACKAGE_VERSION}\\nLibs: ${PACKAGE_CFG_REF_CONTENT}\\n\")\n  #INSTALL(\n  #  FILES\n  #  ${LINUX_CONTROL_FILE_FOLDER}/${CPACK_PACKAGE_NAME}.pc\n  #  DESTINATION /usr/lib/pkgconfig\n  #  COMPONENT emgucv_binary)\n  \n  #SET(REMOVE_EMGU_FROM_GAC_SCRIPT \"\")\n  #FOREACH(MANAGED_DLL ${EMGUCV_MANAGED_DLLS})\n  #  SET(REMOVE_EMGU_FROM_GAC_SCRIPT \"${REMOVE_EMGU_FROM_GAC_SCRIPT} ${MANAGED_DLL}\")\n  #ENDFOREACH()\n  #SET(REMOVE_EMGU_FROM_GAC_SCRIPT \"for dll in${REMOVE_EMGU_FROM_GAC_SCRIPT}; do ${MONO_GACUTIL_EXEC} -u $dll; done\")\n  \n  #SET(CPACK_STRIP_FILES \"\")\n  \n  IF(NOT CPACK_GENERATOR)\n    MESSAGE(STATUS \"Checking for CPACK build type...\")\n    FIND_PROGRAM(ZIP_CMD zip)\n    IF (ZIP_CMD)\n      # ----------------------------------------------------------------------------\n      #  Building .deb package for Debian \n      # ----------------------------------------------------------------------------\n      MESSAGE(STATUS \"FOUND zip: ${ZIP_CMD}\")\n      LIST(APPEND CPACK_GENERATOR ZIP)\n    ENDIF()\n\n    #FIND_PROGRAM(DPKG_CMD dpkg)\n    #IF (DPKG_CMD)\n      # ----------------------------------------------------------------------------\n      #  Building .deb package for Debian \n      # ----------------------------------------------------------------------------\n    #  MESSAGE(STATUS \"FOUND dpkg: ${DPKG_CMD}\")\n    #  LIST(APPEND CPACK_GENERATOR DEB)\n    #ENDIF()\n    \n    #FIND_PROGRAM(RPMBUILD_CMD rpmbuild)\n    #IF(RPMBUILD_CMD)\n      # ----------------------------------------------------------------------------\n      #  Building .rpm package  \n      # ----------------------------------------------------------------------------\n    #  MESSAGE(STATUS \"FOUND rpmbuild: ${RPMBUILD_CMD}\")\n    #  LIST(APPEND CPACK_GENERATOR RPM)\n    #ENDIF()\n  ENDIF()\n  \n  #SET(PREINST_SCRIPT \"#!/bin/sh\\nmkdir -p /usr/lib/pkgconfig /usr/${CPACK_PACKAGE_CLI_FOLDER} /usr/share/opencv/haarcascades /usr/share/opencv/lbpcascades /usr/share/opencv/doc \\n\")\n  #LIST(FIND CPACK_GENERATOR \"DEB\" TEMP)\n  #IF(NOT (${TEMP} EQUAL -1))\n  #  SET(DEBIAN_CONTROL_FILE_FOLDER \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/debian\")\n  #  FILE(WRITE ${DEBIAN_CONTROL_FILE_FOLDER}/preinst ${PREINST_SCRIPT}) \n  #  FILE(WRITE ${DEBIAN_CONTROL_FILE_FOLDER}/postinst\n  #    \"#!/bin/sh\\nset -e\\nif [ \\\"$1\\\" = \\\"configure\\\" ]; then\\n  ldconfig\\n  ${MONO_GACUTIL_EXEC} -il /usr/${CPACK_PACKAGE_CLI_FOLDER}/clifilelist.txt -package ${CPACK_PACKAGE_NAME}\\nfi\\n\")\n  #  FILE(WRITE ${DEBIAN_CONTROL_FILE_FOLDER}/prerm\n  #    \"#!/bin/sh\\nset -e\\nif [ \\\"$1\\\" = \\\"remove\\\" ] || [ \\\"$1\\\" = \\\"upgrade\\\" ] && [ -x /usr/share/cli-common/gac-package-remove ]; then\\n${REMOVE_EMGU_FROM_GAC_SCRIPT}\\nfi\\n\")\n    \n  #  SET(DEBIAN_PACKAGE_PRIORITY \"optional\")\n  #  SET(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA \"${DEBIAN_CONTROL_FILE_FOLDER}/preinst;${DEBIAN_CONTROL_FILE_FOLDER}/postinst;${DEBIAN_CONTROL_FILE_FOLDER}/prerm;${DEBIAN_CONTROL_FILE_FOLDER}/postrm\")\n  #  SET(CPACK_DEBIAN_PACKAGE_DEPENDS \"mono-runtime (>> 2.4.2), mono-2.0-gac, libtiff5, libgeotiff2, libgtk-3-0, libgstreamer1.0-0, libavcodec54, libswscale2, libavformat54, libopenexr6, libjasper1, libdc1394-22, libv4l-0, libqt4-opengl\")\n  #  IF(EMGU_CV_WITH_TESSERACT)\n  #    SET(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS}, libtesseract3\")\n  #  ENDIF()\n  #  IF(WITH_TBB)\n  #    SET(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS}, libtbb2\")\n  #  ENDIF()\n  #ENDIF()\n  \n  #LIST(FIND CPACK_GENERATOR \"RPM\" TEMP)\n  #IF(NOT (${TEMP} EQUAL -1))  \n  #  SET(CPACK_RPM_PACKAGE_LICENSE \"GPL v3\")\n  #  SET(CPACK_RPM_PACKAGE_REQUIRES \"mono-core >= 2.6, mono-wcf, jasper, libgeotiff, gtk2, OpenEXR, libv4l, libdc1394, qt\")\n  #  IF (WITH_TBB)\n  #    SET(CPACK_RPM_PACKAGE_REQUIRES \", tbb\")\n  #  ENDIF()\n  #  IF(EMGUCV_WITH_TESSERACT AND TESSERACT_FOUND)\n  #    SET(CPACK_RPM_PACKAGE_REQUIRES \", tesseract\")\n  #  ENDIF()    \n  #  SET(RPM_CONTROL_FILE_FOLDER \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/rpm\")\n  #  FILE(WRITE ${RPM_CONTROL_FILE_FOLDER}/preinst ${PREINST_SCRIPT})\n  #  FILE(WRITE ${RPM_CONTROL_FILE_FOLDER}/postinst\n  #    \"ldconfig\\n${MONO_GACUTIL_EXEC} -il /usr/${CPACK_PACKAGE_CLI_FOLDER}/clifilelist.txt -package ${CPACK_PACKAGE_NAME}\\n\")\n  #  FILE(WRITE ${RPM_CONTROL_FILE_FOLDER}/prerm\n  #    \"${REMOVE_EMGU_FROM_GAC_SCRIPT}\\n\")\n  #  SET(CPACK_RPM_PRE_INSTALL_SCRIPT_FILE \"${RPM_CONTROL_FILE_FOLDER}/preinst\")\n  #  SET(CPACK_RPM_POST_INSTALL_SCRIPT_FILE \"${RPM_CONTROL_FILE_FOLDER}/postinst\")\n  #  SET(CPACK_RPM_PRE_UNINSTALL_SCRIPT_FILE \"${RPM_CONTROL_FILE_FOLDER}/prerm\")\n  #  SET(CPACK_RPM_POST_UNINSTALL_SCRIPT_FILE \"${RPM_CONTROL_FILE_FOLDER}/postrm\")\n  #ENDIF()\t\nENDIF()  \n\nMESSAGE(STATUS \"CPACK_GENERATOR: ${CPACK_GENERATOR}\")\nINCLUDE (CPack) \n"
        },
        {
          "name": "DebuggerVisualizer",
          "type": "tree",
          "content": null
        },
        {
          "name": "Emgu.CV.Bitmap",
          "type": "tree",
          "content": null
        },
        {
          "name": "Emgu.CV.Contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "Emgu.CV.Cuda",
          "type": "tree",
          "content": null
        },
        {
          "name": "Emgu.CV.DebuggerVisualizers",
          "type": "tree",
          "content": null
        },
        {
          "name": "Emgu.CV.Example",
          "type": "tree",
          "content": null
        },
        {
          "name": "Emgu.CV.Extern",
          "type": "tree",
          "content": null
        },
        {
          "name": "Emgu.CV.Models",
          "type": "tree",
          "content": null
        },
        {
          "name": "Emgu.CV.NativeImage",
          "type": "tree",
          "content": null
        },
        {
          "name": "Emgu.CV.OCR",
          "type": "tree",
          "content": null
        },
        {
          "name": "Emgu.CV.Runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "Emgu.CV.Test",
          "type": "tree",
          "content": null
        },
        {
          "name": "Emgu.CV.Unity",
          "type": "tree",
          "content": null
        },
        {
          "name": "Emgu.CV.WindowsUI",
          "type": "tree",
          "content": null
        },
        {
          "name": "Emgu.CV.Wpf",
          "type": "tree",
          "content": null
        },
        {
          "name": "Emgu.CV.snk",
          "type": "blob",
          "size": 0.58203125,
          "content": null
        },
        {
          "name": "Emgu.CV",
          "type": "tree",
          "content": null
        },
        {
          "name": "Emgu.Util",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 46.9775390625,
          "content": "========================================================================\nSection 1 (Overview):\n\nEmgu Corporation use a Dual License business model for its software \ndevelopment library and offers licenses for two distinct purposes - open \nsource and commercial development\n\n1. If you wish to use the open source license with an EMGU Corporation \nproduct, this software is licensed under GPL V3. You agrees that you \nwill contribute all your source code to the open source community \nand you will give them the right to share it with everyone too. The \ncomplete GPL v3 terms are included in Section 2. \n\n2. If you want to have a commercial advantage by having a closed source \nsolution, you must purchase an appropriate commercial licenses from \nEMGU Corporation. By purchasing a commercial license, you are no longer \nobligated to publish your source code. You can use Emgu CV with the \ncommercial license terms listed in Section 3.\n\n========================================================================\nSection 2 (Open Source License):\n\n                      GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n\n========================================================================\nSection 3 (Commercial license):\n\nVersion 4 rev.2 \n\nTHIS DOCUMENT IS A LEGAL AGREEMENT (the \"License Agreement\") BETWEEN EMGU Corporation (\"We,\" \"Us\") AND YOU OR THE ORGANIZATION ON WHOSE BEHALF YOU ARE UNDERTAKING THE LICENSE DESCRIBED BELOW (\"You\") IN RELATION TO THE EMGU CV SOFTWARE (THE \"Software\"), IN BOTH SOURCE AND OBJECT CODE FORM, AND/OR ALL RELATED MATERIALS. BY DOWNLOADING, INSTALLING, COPYING OR OTHERWISE USING THE SOFTWARE, YOU ACCEPT THE FOLLOWING TERMS AND CONDITIONS. IF YOU DO NOT AGREE WITH ANY OF THE TERMS OR CONDITIONS OF THIS LICENSE AGREEMENT, DO NOT PROCEED WITH THE DOWNLOADING, COPYING, INSTALLATION OR ANY OTHER USE OF THE SOFTWARE OR ANY PORTION THEREOF. THE SOFTWARE IS PROTECTED BY UNITED STATES COPYRIGHT LAWS AND INTERNATIONAL COPYRIGHT LAWS, AS WELL AS OTHER INTELLECTUAL PROPERTY LAWS AND TREATIES. THE SOFTWARE IS LICENSED, NOT SOLD.\n\nTHIS LICENSE AGREEMENT DESCRIBES YOUR RIGHTS WITH RESPECT TO THE SOFTWARE AND ITS COMPONENTS.\n\nWe, EMGU Corporation, grant You a non-exclusive, non-transferable license to the Software solely as set forth in sections 1(a), 1(b) or 1(c), as applicable, and subject to the terms and conditions of this License Agreement.\n\n1. OWNERSHIP, LICENSE GRANT\n\nThis is a license agreement and not an agreement for sale. We reserve ownership of all intellectual property rights inherent in or relating to the Software, which include, but are not limited to, all copyright, patent rights, all rights in relation to registered and unregistered trademarks (including service marks), confidential information (including trade secrets and know-how) and all rights other than those expressly granted by this Agreement.\n\na. Developer License: \n   \nSubject to the payment of the fee required for a Commercial Developer License and subject to the terms and conditions of this License Agreement, We grant to You a revocable, non-transferable and non-exclusive license \n(i) for a single developer within Your organization to install and use the Software on any workstations used exclusively by such developer and \n(ii) for You to install and use the Software in unlimited clients, solely in connection with distribution of the Software in accordance with sections 3 and 4 below. This license is not sub-licensable except as explicitly set forth herein.\n\nb. Workgroup License:\n\nSubject to the payment of the fee required for a Commercial Developer License and subject to the terms and conditions of this License Agreement, We grant to You a revocable, non-transferable and non-exclusive license \n(i) for up to twenty five (25) developers within Your organization to install and use the Software on any workstations used exclusively by such developers and \n(ii) for You to install and use the Software in unlimited clients, solely in connection with distribution of the Software in accordance with sections 3 and 4 below. This license is not sub-licensable except as explicitly set forth herein.\n\nc. Enterprise License:\n\nSubject to the payment of the fee required for a Commercial Developer License and subject to the terms and conditions of this License Agreement, We grant to You a revocable, non-transferable and non-exclusive license \n(i) for up to one hundred (100) developers within Your organization to install and use the Software on any workstations used exclusively by such developers and \n(ii) for You to install and use the Software in unlimited clients, solely in connection with distribution of the Software in accordance with sections 3 and 4 below. This license is not sub-licensable except as explicitly set forth herein.\n\nLicense a), b) or c) only cover the usage on the source and binary part implemented by Emgu Corporation, and do not cover any non-Emgu implemented library. Open CV 4.5.0 and newer releases are covered by Apache 2.0 license, Open CV 4.4.0 and prior releases are covered by BSD license, Tesseract OCR is covered by Apache 2.0 license. Some algorithms implemented by OpenCV, such as SURF and haar-cascade are patented in the U.S. It is your responsibility to check whether the algorithms you used are patented in your country and contact the patent owner if you want to use them in your commercial software. Open CV also use FFmpeg, which is under its own license. If you use video encoder and decoder in Open CV, it is likely that you are using FFmpeg components. Legal information regarding FFmpeg can be found at http://www.ffmpeg.org/legal.html. It is your responsibility to obey the license terms of the above 3rd party libraries.\n\n2. PERMITTED USES, SOURCE CODE, MODIFICATIONS\n\nWe provide You with source code so that You can create Modifications of the original Software, where Modification means: a) any addition to or deletion from the contents of a file included in the original Software or previous Modifications created by You, or b) any new file that contains any part of the original Software or previous Modifications.  While You retain all rights to any original work authored by You as part of the Modifications, We continue to own all copyright and other intellectual property rights in the Software.\n\n3. DISTRIBUTION\n\nYou may distribute the Software in any applications, frameworks, or elements that you develop using the Software in accordance with this License Agreement, provided that such distribution does not violate the restrictions set forth in section 4 of this agreement.  You must not remove, obscure or interfere with any copyright, acknowledgment, attribution, trademark, warning or disclaimer statement affixed to, incorporated in or otherwise applied in connection with the Software.\n\nYou are required to ensure that the Software is not reused by or with any applications other than those with which You distribute it as permitted herein. For example, if You install the Software on a customer's server, that customer is not permitted to use the Software independently of Your application, and must be informed as such. \n\nYou will not owe EMGU Corporation any royalties for Your distribution of the Software in accordance with this License Agreement.\n\n4. PROHIBITED USES\n\nYou may not, without prior written consent of EMGU Corporation, redistribute the Software or Modifications other than by including the Software or a portion thereof within Your own product, which must have substantially different functionality than the Software or Modifications and must not allow any third party to use the Software or Modifications, or any portions thereof, for software development purposes. You are explicitly not allowed to redistribute the Software or Modifications as part of any product that can be described as a development toolkit or library or is intended for use by software developers and not end-users. You are not allowed to redistribute any part of the Software documentation.\n\nYou may not: a) use any part of the Software or Modifications or Your knowledge of the Software (or any information that You learn as a result of Your use of the Software) to create a product with the same or substantially the same functionality as the Software; b) transfer, rent, lease, or sublicense the Software or Modifications, or any portions thereof; c) change or remove the copyright notice from any of the files included in the Software or Modifications.\n\nUNDER NO CIRCUMSTANCES MAY YOU USE THE SOFTWARE (INCLUDING WITHOUT LIMITATION THE SOURCE CODE THEREOF) AS THE BASIS FOR OR IN CONNECTION WITH A PRODUCT THAT CONTAINS THE SAME, OR SUBSTANTIALLY THE SAME, FUNCTIONALITY AS THE SOFTWARE.\n\n5. TERMINATION\n\nThis License Agreement and Your right to use the Software and Modifications will terminate immediately without notice if You fail to comply with the terms and conditions of this License Agreement. Upon termination, You agree to immediately cease using and destroy the Software or Modifications, including all accompanying documents.  The provisions of sections 4, 5, 6, 7, and 8 will survive any termination of this License Agreement.\n\n6. DISCLAIMER OF WARRANTIES\n\nTO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, EMGU CORPORATION AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES AND CONDITIONS, EITHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT, WITH REGARD TO THE SOFTWARE. EMGU CORPORATION DOES NOT GUARANTEE THAT THE OPERATION OF THE SOFTWARE WILL BE UNINTERRUPTED OR ERROR-FREE, AND YOU ACKNOWLEDGE THAT IT IS NOT TECHNICALLY PRACTICABLE FOR EMGU CORPORATION TO DO SO.\n\n7. LIMITATION OF LIABILITIES\n\nTO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, IN NO EVENT SHALL EMGU CORPORATION OR ITS SUPPLIERS BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION OR ANY OTHER PECUNIARY LAW) ARISING OUT OF THE USE OF OR INABILITY TO USE THE SOFTWARE, EVEN IF EMGU CORPORATION HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. IN ANY CASE, EMGU CORPORATION'S ENTIRE LIABILITY UNDER ANY PROVISION OF THIS LICENSE AGREEMENT SHALL BE LIMITED TO THE GREATER OF THE AMOUNT ACTUALLY PAID BY YOU FOR THE SOFTWARE OR FIVE ($5.00) DOLLARS (USD).\n\n8. MISCELLANEOUS\n\nThe license granted herein applies only to the version of the Software downloaded or installed in connection with the terms of this Agreement. Any previous or subsequent license granted to You for use of the Software shall be governed by the terms and conditions of the agreement entered in connection with downloading or installation of that version of the Software. \n\nYou agree that you will comply with all applicable laws and regulations with respect to the Software, including without limitation all export and re-export control laws and regulations.  \n\nWhile redistributing the Software or Modifications thereof, You may choose to offer acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this Agreement. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on our behalf.  You agree to indemnify, defend, and hold Us harmless from and against any liability incurred by, or claims asserted against, Us by reason of Your accepting any such support, warranty, indemnity or additional liability.\n\nYou agree to be identified as a customer of ours and You agree that We may refer to You by name, trade name and trademark, if applicable, and may briefly describe Your business in our marketing materials and web site.\n\nYou may not assign this License Agreement without the prior written consent of EMGU CORPORATION.  This License Agreement will inure to the benefit of the successors and assigns of EMGU CORPORATION.\n\nYou acknowledge that this License Agreement is complete and is the exclusive representation of our agreement. No oral or written information given by Us or on our behalf shall create a warranty or collateral contract, or in any way increase the scope of this License Agreement in any way, and You may not rely on any such oral or written information. \n\nIf any provision in this License Agreement shall be determined to be invalid, such provision shall be deemed omitted; the remainder of this License Agreement shall continue in full force and effect.\n\nThis License Agreement may be modified only by a written instrument signed by an authorized representative of each party. \n\nIf the Software or any related documentation is licensed to the U.S. government or any agency thereof, it will be deemed to be \"commercial computer software\" or \"commercial computer software documentation,\" pursuant to SFAR Section 227.7202 and FAR Section 12.212.  Any use of the Software or related documentation by the U.S. government will be governed solely by the terms of this License Agreement.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.544921875,
          "content": "==================================================================\n\nA cross platform .Net wrapper for the Open CV image-processing library. Allows Open CV functions to be called from .NET compatible languages. The wrapper can be compiled by Visual Studio, Unity and \"dotnet\" command, it can run on Windows, Mac OS, Linux, iOS and Android.\n\nPlease visit our project webpage for more information:\nhttp://www.emgu.com/wiki/index.php/Main_Page\n\nBuild instructions can be found here:\nhttp://www.emgu.com/wiki/index.php/Download_And_Installation#Building_from_Git\n"
        },
        {
          "name": "Solution",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "eigen",
          "type": "commit",
          "content": null
        },
        {
          "name": "harfbuzz",
          "type": "commit",
          "content": null
        },
        {
          "name": "hdf5",
          "type": "commit",
          "content": null
        },
        {
          "name": "miscellaneous",
          "type": "tree",
          "content": null
        },
        {
          "name": "nuget.config",
          "type": "blob",
          "size": 0.3701171875,
          "content": "<configuration>\n  <config>\n    <packageRestore>\n      <!-- Allow NuGet to download missing packages -->\n      <add key=\"enabled\" value=\"True\" />\n      <!-- Automatically check for missing packages during build in Visual Studio -->\n      <add key=\"automatic\" value=\"True\" />\n    </packageRestore>\n    <add key=\"repositoryPath\" value=\"nugetpackages\" />\n  </config>\n</configuration>"
        },
        {
          "name": "opencv",
          "type": "commit",
          "content": null
        },
        {
          "name": "opencv_contrib",
          "type": "commit",
          "content": null
        },
        {
          "name": "opencv_extra",
          "type": "commit",
          "content": null
        },
        {
          "name": "platforms",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "vtk",
          "type": "commit",
          "content": null
        }
      ]
    }
  ]
}