{
  "metadata": {
    "timestamp": 1736710859793,
    "page": 403,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "OrchardCMS/Orchard",
      "stars": 2386,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".deployment",
          "type": "blob",
          "size": 1.62890625,
          "content": "; .deployment is actually an INI file and parsed by the following file\n; https://raw.githubusercontent.com/projectkudu/kudu/master/Kudu.Core/Infrastructure/IniFile.cs\n\n; Document of deployment with custom script\n; https://github.com/projectkudu/kudu/wiki/Customizing-deployments#deploying-with-custom-script\n\n; Document of configurable settings https://github.com/projectkudu/kudu/wiki/Configurable-settings\n; Runtime settings cannot be overridden in .deployment e.g. WEBSITE_NODE_DEFAULT_VERSION\n; More info https://github.com/projectkudu/kudu/wiki/Configurable-settings#runtime-settings\n\n# Define default node version in WEBSITE_NODE_DEFAULT_VERSION APP Setting\n# Find all Node.js versions from your AppService Kudu api/diagnostics/runtime\n# More info https://codesanook-reactjs-server-side-rendering.scm.azurewebsites.net/api/diagnostics/runtime\n\n; You can define a custom environment variable as \n; CUSTOM_VARIABLE = my custom variable value\n; and read in a deploy.ps1 script as \n; $Env:CUSTOM_VARIABLE\n\n; https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_powershell_exe?view=powershell-5.1#examples\n[config]\nCOMMAND = PowerShell -NoProfile -NoLogo -ExecutionPolicy Unrestricted -Command \"& \"$(Join-Path -Path $(Get-Location) -ChildPath deploy.ps1)\" 2>&1 | Write-Output\"\n\n; Set additional environment variables\n; Timeout in seconds\n; Set to one hour\nSCM_COMMAND_IDLE_TIMEOUT = 3600\n\n; Variables for MSBuild \nMSBUILD_PATH = D:\\Program Files (x86)\\MSBuild-16.4\\MSBuild\\Current\\Bin\\MSBuild.exe  \nSOLUTION_PATH = src/Orchard.sln\n\n; For Azure deployment, we use custom MS Build at root of the project.\nPROJECT_PATH = Orchard.proj\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0107421875,
          "content": "* text=auto"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.880859375,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n**/.vs/**\nsrc/Rebracer.xml\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n*.sln.ide/\n\n# Build results\n\n[Dd]ebug/\n[Rr]elease/\nx64/\nbuild/\napp.publish/\n[Bb]in/\n[Oo]bj/\n\n# Enable \"build/\" folder in the NuGet Packages folder since NuGet packages use it for MSBuild targets\n!packages/*/build/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n*_i.c\n*_p.c\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.log\n*.scc\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n\n# CodeRush is a .NET coding add-in\n.cr*/\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n*.ncrunch*\n.*crunch*.local.xml\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.Publish.xml\n*.pubxml\n\n# NuGet Packages Directory\n## TODO: If you have NuGet Package Restore enabled, uncomment the next line\npackages/\n\n# Windows Azure Build Output\ncsx\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.[Pp]ublish.xml\n*.pfx\n*.publishsettings\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\nApp_Data/*.mdf\nApp_Data/*.ldf\n\n# =========================\n# Windows detritus\n# =========================\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Mac crap\n.DS_Store\n\n# =========================\n# Orchard specifics\n# =========================\n\nApp_Data/\nglob:*.user\n*.patch\n*.hg\nbuild/\n/buildazure\n/buildtasks\n/artifacts\n*.sln.cache\nsrc/Orchard.Web/Media/*\nlog.xml\nprofiling/\n*.orig\nsrc/Orchard.Web/Modules-temp/*\nsrc/Backup/*\nsrc/packages/*\nsrc/**/node_modules\nsrc/UpgradeLog.*\n*.itrace.csdef\n*.build.csdef\nsrc/Orchard.Azure/Orchard.Azure.Web/Core/\nsrc/Orchard.Azure/Orchard.Azure.Web/Modules/\nsrc/Orchard.Azure/Orchard.Azure.Web/Themes/\nsrc/Orchard.Azure/Orchard.Azure.CloudService/csx/Debug/*\nsrc/Orchard.Web/Orchard.Web.Publish.xml\nsrc/TestResults/*\nsrc/Orchard.Web/Properties/PublishProfiles\nsrc/Orchard.Azure/Orchard.Azure.CloudService/Staging/\n\n#enable all /lib artifacts\n!lib/**/*.*\n"
        },
        {
          "name": ".hgeol",
          "type": "blob",
          "size": 0.021484375,
          "content": "[patterns]\n** = native"
        },
        {
          "name": "CREDITS.txt",
          "type": "blob",
          "size": 8.529296875,
          "content": "Orchard Project - Copyright .NET Foundation\n\nOrchard includes works distributed under the licenses listed below. The full text for most of the licenses listed below can be found in the LICENSE.txt file accompanying each work. The original copyright notices have been preserved within the respective files and or packages. Please refer to the specific files and/or packages for more detailed information about the authors, copyright notices, and licenses.\n\nASP.NET MVC\n-----\nWebsite:      http://aspnet.codeplex.com/wikipage?title=MVC&referringTitle=Home\nCopyright:    Copyright (c) 2008-2011 Microsoft Corporation\nLicense:      MICROSOFT ASP.NET MODEL VIEW CONTROLLER 3 EULA\n              http://go.microsoft.com/fwlink/?LinkID=207621\n\nAutofac\n-------\nWebsite:      http://code.google.com/p/autofac/\nCopyright:    Copyright (c) 2007-2008 Autofac Contributors\n              http://code.google.com/p/autofac/wiki/Contributing\nLicense:      MIT\n\nAutofac Contrib\n-----\nWebsite:      http://code.google.com/p/autofac/\nCopyright:    Copyright (c) 2007-2008 Autofac Contributors\nLicense:      http://code.google.com/p/autofac/source/browse/trunk/contrib/AutofacContrib%20License.txt\n\nCamanJS\n-----\nWebsite:      http://camanjs.com/\nCopyright:    Copyright (c) 2010-2015, Ryan LeFevre\nLicense:      https://raw.githubusercontent.com/meltingice/CamanJS/3dd24d1bba3aed91d7072d1039e488a3af4c394b/LICENSE\n \nCastle\n-----\nWebsite:      http://www.castleproject.org/container/index.html\nCopyright:    Copyright (c) 2004-2009 Castle Project\nLicense:      Apache Software Foundation License 2.0\n\nCodeMirror\n----------\nWebsite:      http://codemirror.net/2/\nCopyright:    Copyright (C) 2011 by Marijn Haverbeke\nLicense:      MIT\n\nConsole Shim\n-----\nWebsite:      https://github.com/kayahr/console-shim\nCopyright:    Copyright (C) 2011 Klaus Reimer <k@ailis.de>\nLicense:      MIT\n\nDLR\n---\nWebsite:      http://dlr.codeplex.com\nCopyright:    Copyright (c) Microsoft Corporation\nLicense:      Apache Software Foundation License 2.0\n\nEric Meyer's Reset CSS\n-----\nWebsite:      http://meyerweb.com/eric/tools/css/reset/\nCopyright:    Copyright (C) 1995-2005 Eric A. and Kathryn S. Meyer\nLicense:      Public domain\n\nFam Fam Fam Silk Icons\n-----\nWebsite:      http://famfamfam.com/lab/icons/silk/\nCopyright:    Copyright (c) 2005-2006 Mark James\nLicense:      CC Attribution 2.5 http://creativecommons.org/licenses/by/2.5/\n\nFluent NHibernate\n-----\nWebsite:      http://fluentnhibernate.org/\nCopyright:    Copyright (c) 2008-2009 James Gregory and contributors\nLicense:      New BSD\n\nFluentPath\n-----\nWebsite:      http://fluentpath.codeplex.com/\nCopyright:    Copyright (c) 2011 Bertrand Le Roy\nLicense:      MS-PL\n\nFont Awesome\n-----\nAuthor: \t\t\tDave Gandy\nWebsite: \t\t\thttp://fontawesome.io\nLicense: \t\t\tMIT License\n\nHistory.js\n-----\nWebsite:      https://github.com/browserstate/history.js\nCopyright:    Copyright (c) 2011, Benjamin Arthur Lupton\nLicence:      BSD\n\nHtml Agility Pack\n-----\nWebsite:      http://htmlagilitypack.codeplex.com/\nCopyright:    Copyright (c) 2003-20010 Simon Mourier\nLicense:      MS-PL\n\nhtml5shim\n-----\nWebsite:      http://code.google.com/p/html5shim/\nLicense:      MIT\n\nIESI Collections\n-----\nWebsite:      http://www.codeproject.com/KB/recipes/sets.aspx\nCopyright:    Copyright (c) 2002-2004 Jason Smith\nLicense:      http://www.codeproject.com/info/Licenses.aspx\n              distributed with NHibernate under LGPL 2.1\n\nImage Resizer\n-----\nAuthor:       Brice Lambson\nWebsite:      https://imageresizer.codeplex.com\nCopyright:    Copyright (c) 2012 Imazen\nLicense:      Freedom license\n  \njQuery\n-----\nWebsite:      http://jquery.com\nCopyright:    Copyright (c) 2010 John Resig, http://jquery.com\nLicense:      MIT\n\njQuery Colorbox \n-----\nWebsite:      http://www.jacklmoore.com/colorbox/\nCopyright:    (c) 2013 Jack Moore - jacklmoore.com/colorbox\nLicense:      MIT\n\njQuery File Upload\n-----\nWebsite:      https://blueimp.net\nCopyright:    Copyright 2010, Sebastian Tschan\nLicense       MIT\n\njQuery UI (Core, Widget, Datepicker)\n-----\nWebsite:      http://docs.jquery.com/UI\nCopyright:    Copyright (c) 2010 lib/jquery.ui/AUTHORS.txt (http://jqueryui.com/about)\nLicense:      MIT\n\njQuery Calendar\n-----\nWebsite:      http://keith-wood.name/calendars.html\nAuthor:       Keith Wood\nLicense:      MIT\n\njQuery Date/Time Entry\n-----\nWebsite:      http://keith-wood.name/datetimeEntry.html\nCopyright:    Keith Wood\nLicense:      MIT\n\njQuery ScrollTo\n-----\nWebsite:      http://flesler.blogspot.com\nCopyright:    Copyright (c) 2007-2009 Ariel Flesler\nLicense:      MIT\n\nJson.NET\n-----\nWebsite:      http://www.newtonsoft.com/json\nCopyright:    Copyright (c) 2007 James Newton-King\nLicense:      MIT - https://github.com/JamesNK/Newtonsoft.Json/blob/master/LICENSE.md\n\njsPlumb\n-----\nWebsite:      http://jsplumb.org\nCopyright:    Copyright (c) 2010 - 2013 Simon Porritt (http://jsplumb.org)\nLicense:      MIT\n\nKnockout\n-----\nWebsite:      http://knockoutjs.com/\nCopyright:    Copyright (c) Steven Sanderson\nLicense:      MIT\n\nLog4Net\n-----\nWebsite:      http://logging.apache.org/log4net/index.html\nCopyright:    Copyright (c) 2007 Apache Software Foundation\nLicense:      Apache Software Foundation License 2.0\n\nLucene.net\n-----\nWebsite:      https://lucenenet.apache.org/\nCopyright:    Copyright (c) 2009 Apache Software Foundation\nLicense:      Apache Software Foundation License 2.0\n\nMarkdig\n-----\nWebsite:      https://github.com/lunet-io/markdig\nCopyright:    Copyright (c) 2018-2019, Alexandre Mutel\nLicense:      BSD 2-Clause\n \nMono Class Library\n-----\nWebsite:      http://www.mono-project.com/The_Class_Library\nCopyright:    Xamarin\nLicense:      MIT\n\nMoq\n-----\nWebsite:      http://code.google.com/p/moq/\nCopyright:    Copyright (c) 2007. Clarius Consulting, Manas Technology Solutions, InSTEDD\nLicense:      New BSD\n \nMySQL Connectors\n-----\nCopyright:    Copyright (c) 2004, 2011, Oracle and/or its affiliates\nLicense:      GNU GENERAL PUBLIC LICENSE Version 2; Oracle�s Free and Open Source Software (\"FOSS\") License Exception\n\nIn order to comply with Section 2(a) of the FOSS License Exception, .NET Foundation hereby offers any recipient of this package a machine-readable copy of the corresponding source code for Oracle's MySQL Client Libraries upon written demand.� This offer is good for three years.\n\nNHibernate, NHibernate Linq\n-----\nWebsite:      http://nhforge.org \nCopyright:    Copyright (C) 2003 - 2009 NHibernate Project\nLicense:      LGPL 2.1\n\nNHibernate Lambda Extensions\n-----\nWebsite:      http://code.google.com/p/nhlambdaextensions/\nCopyright:    Unknown http://code.google.com/p/nhlambdaextensions/people/list\nLicense:      LGPL 2.1\n\nNProgress\n-----\nWebsite:      http://ricostacruz.com/nprogress/\nCopyright:    Copyright (c) 2013-2014 Rico Sta. Cruz\nLicense:      MIT\n\nNuGet\n-----\nWebsite:      http://nuget.codeplex.com\nCopyright:    Copyright 2010-2011 Outercurve Foundation\nLicense:      Apache Software Foundation License 2.0\n\nnUnit\n-----\nWebsite:      http://www.nunit.org/index.php\nCopyright:    Copyright (c) 2002-2007 NUnit.org\n              Portions Copyright (c) 2002-2008 Charlie Poole or Copyright (c) 2002-2004 James W. Newkirk, Michael C. Two, Alexei A. Vorontsov or Copyright (c) 2000-2002 Philip A. Craig\nLicense:      Derived from zlib: http://nunit.org/index.php?p=license&r=2.4\n\nMicrosoft SQL Server Compact 4.0\n-----\nWebsite:      http://www.microsoft.com\nCopyright:    Copyright (c) 2011 Microsoft Corporation\nLicense:      Custom EULA - http://www.microsoft.com/web/webpi/eula/SQLCE_EULA_ENU.rtf\n\nMicrosoft Xml Document Transformation 1.0.0.0\n-----\nWebsite:      http://www.microsoft.com\nCopyright:    Copyright Microsoft Corporation\nLicense:      Custom EULA - http://www.microsoft.com/web/webpi/eula/microsoft_web_xmltransform.htm\n\nStackExchange.Redis\n------\nWebsites:     https://github.com/StackExchange/StackExchange.Redis\nCopyright:    Copyright (c) 2014 Stack Exchange\nLicense:      MIT - https://raw.githubusercontent.com/StackExchange/StackExchange.Redis/master/LICENSE\n\nSlowCheetah\n-----\nWebsite:      https://github.com/sayedihashimi/package-web/\nCopyright:    Copyright 2013 Sayed Ibrahim Hashimi\nLicense:      Apache 2.0\n\nSpecFlow\n-----\nWebsite:      http://www.specflow.org/\nCopyright:    Copyright (c) 2009 TechTalk\nLicense:      New BSD\n\nTinyMCE\n-----\nWebSite:      http://tinymce.moxiecode.com/\nCopyright:    Copyright (c) 2003-2009 Moxiecode Systems AB\nLicense:      LGPL 2.1\n\nWCat\n-----\nWebSite:      http://www.iis.net/community/default.aspx?tabid=34&i=1466&g=6\nCopyright:    Copyright (c) 2007 Microsoft\nLicense:      \"Free\"\n\nYUI\n-----\nWebsite:      http://developer.yahoo.com/yui/\nCopyright:    Copyright (c) 2010, Yahoo! Inc.\nLicense:      New BSD\n"
        },
        {
          "name": "CalculateBindingRedirects.ps1",
          "type": "blob",
          "size": 1.85546875,
          "content": "﻿[Reflection.Assembly]::LoadWithPartialName(\"System.Xml\") | Out-Null\n[Reflection.Assembly]::LoadWithPartialName(\"System.Xml.Linq\") | Out-Null\n[System.Xml.Linq.XNamespace]$ns1 = \"urn:schemas-microsoft-com:asm.v1\"\n\n$currentPath = (Get-Item -Path \".\\\").FullName\n$orchardWebConfigFullPath = $currentPath+\"\\src\\Orchard.Web\\Web.Config\"\n[XML] $orchardWebConfig = Get-Content ($orchardWebConfigFullPath)\n$configFiles = Get-ChildItem -Path ($currentPath +\"\\src\\\")  -Filter web.config -Recurse -ErrorAction SilentlyContinue -Force\nforeach ($configFile in $configFiles) {\n    $configFullPath = $configFile.FullName\n    Write-Host \"Processing $configFullPath ...\"\n\n    if ($configFullPath.ToLower().EndsWith(\"\\orchard.web\\web.config\")) { #skip orchard.web config files\n        continue\n    }\n    [XML] $projectWebConfig = Get-Content ($configFullPath)\n    $elements = $projectWebConfig.configuration.runtime.assemblyBinding.dependentAssembly\n    foreach ($element in $elements){\n        Write-Host \"Checking\" $element.assemblyIdentity.name\n        $hasBinding = $orchardWebConfig.configuration.runtime.assemblyBinding.dependentAssembly.assemblyIdentity.Where({ $_.name -eq $element.assemblyIdentity.name -and $_.publicKeyToken -eq $element.assemblyIdentity.publicKeyToken -and $_.culture -eq $element.assemblyIdentity.culture }, 'First').Count -gt 0\n        if (-not $hasBinding){\n            # add the node in $webConfig\n            Write-Host \"Adding\" $element.assemblyIdentity.name\n            $newNode = $orchardWebConfig.ImportNode($element, $true);\n            $orchardWebConfig.configuration.runtime.assemblyBinding.AppendChild($newNode)\n            Write-Host \"Added \" $element.assemblyIdentity.name\n        } else {\n            Write-Host \"Skipped\" $element.assemblyIdentity.name \n        }\n    }\n        Write-Host \"Processed $configFullPath ...\"\n}\n\n$orchardWebConfig.Save($orchardWebConfigFullPath)\n"
        },
        {
          "name": "CleanSolution.ps1",
          "type": "blob",
          "size": 1.3330078125,
          "content": "﻿<#\n.Synopsis\n   Cleans the solution: removes all bin and obj folders under src, deletes Dependencies, cache.dat and all mappings.bin files from App_Data.\n   Just run the script where it is, don't move or run elsewhere.\n\n.EXAMPLE\n\tPS> .\\CleanSolution.ps1\n\n#>\n\n# Deleting bin and obj folders.\n$currentPath = (Get-Item -Path \".\\\").FullName\n# Add relative file paths here what you want to keep.\n$whiteList = @()\n$whiteListFolders = @()\n\nGet-ChildItem -Path ($currentPath + \"\\src\\\") -Recurse | \nWhere-Object { $PSItem.PSIsContainer -and ( $PSItem.Name -eq \"bin\" -or $PSItem.Name -eq \"obj\") } | \nForEach-Object {\n\tif($whiteListFolders.Contains($PSItem.FullName.Substring($currentPath.Length)))\n\t{\n\t\tGet-ChildItem -Path $PSItem.FullName -Recurse -File |\n\t\tForEach-Object {\n\t\t\tif(!$whiteList.Contains($PSItem.FullName.Substring($currentPath.Length)))\n\t\t\t{\n\t\t\t\tRemove-Item $PSItem.FullName -Force\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tRemove-Item $PSItem.FullName -Recurse -Force\n\t}\n}\n\n# Deleting Dependencies and cache.dat from App_Data.\nRemove-Item -Path ($currentPath + \"\\src\\Orchard.Web\\App_Data\\Dependencies\\\") -Recurse -Force\nRemove-Item -Path ($currentPath + \"\\src\\Orchard.Web\\App_Data\\cache.dat\") -Force\n\n# Deleting all mappings.bin files from App_Data.\nGet-ChildItem -Path ($currentPath + \"\\src\\Orchard.Web\\App_Data\\Sites\") -Recurse -Include \"mappings.bin\" |\nRemove-Item -Force"
        },
        {
          "name": "ClickToBuild.cmd",
          "type": "blob",
          "size": 0.8828125,
          "content": "@echo off\n\nREM Necessary for the InstallDir variable to work inside the MsBuild-finding loop below.\nSETLOCAL ENABLEDELAYEDEXPANSION\n\nfor /f \"usebackq tokens=1* delims=: \" %%i in (`lib\\vswhere\\vswhere -latest -version \"[16.0,18.0)\" -requires Microsoft.Component.MSBuild`) do (\n  if /i \"%%i\"==\"installationPath\" (\n\tset InstallDir=%%j\n\techo !InstallDir!\n\tif exist \"!InstallDir!\\MSBuild\\Current\\Bin\\MSBuild.exe\" (\n\t\techo \"Using MSBuild from !InstallDir!\"\n\t\tset msbuild=\"!InstallDir!\\MSBuild\\Current\\Bin\\MSBuild.exe\"\n\t\tgoto build\n\t)\n  )\n)\n\necho \"Unable to detect suitable environment. Build may not succeed.\"\n\n:build\n\nSET target=%1\nSET project=%2\nSET solution=%3\n\nIF \"%target%\" == \"\" SET target=Build\nIF \"%project%\" == \"\" SET project=Orchard.proj\nIF \"%solution%\" == \"\" SET solution=src\\Orchard.sln\n\nlib\\nuget\\nuget.exe restore %solution%\n\n%msbuild% /t:%target% %project% /p:Solution=%solution% /m\n\n:end\n\npause"
        },
        {
          "name": "DeleteModuleBinaries.cmd",
          "type": "blob",
          "size": 0.1943359375,
          "content": "@echo off\nREM Delete all compiled module binaries to force dynamic compilation (.csproj) to kick in\nset SRC=src\\Orchard.Web\\Modules\nfor /f %%i in ('dir %SRC% /b /ad') do del /q %SRC%\\%%i\\bin\\%%i.dll\n"
        },
        {
          "name": "DeploymentUtility.psm1",
          "type": "blob",
          "size": 3.0302734375,
          "content": "Set-StrictMode -Version Latest\n\n# Continue a build process even though there is a warning wrote to std err. \n# We will check exit code in Invoke-ExternalCommand to design whether it fail or not\n$ErrorActionPreference = \"Continue\"\n\nfunction Add-NpmToPathVariable {\n    $path = \"$env:Appdata\\npm\"\n    $escapedPath = [Regex]::Escape($path)\n\n    # Remove existing npm path safe to add npm path again \n    $paths = $env:Path -split ';' | Where-Object { \n        $_ -notmatch \"^$escapedPath\\\\?$\"\n    }\n\n    # Update a path variable to this session \n    $env:Path = ($paths + $path) -join \";\" # array + element item\n}\n\nfunction Invoke-ExternalCommand {\n    param (\n        [Parameter(Mandatory = $true)] [scriptblock] $ScriptBlock\n    )\n\n    # Displays an error message and continue executing if there is a standard error.\n    # This is because there are some external command tools write warning message to standard error. \n    # Use Write-Output also fix \"Window title cannot be longer than 1023 characters\" issue \n    # https://github.com/projectkudu/kudu/issues/2635\n    & $ScriptBlock 2>&1 | Write-Output\n\n    # If last exit code is not 0, throw an exception to stop a script\n    if ($LastExitCode) {\n        throw \"Failed with exit code = $LastExitCode and command = $($ScriptBlock.ToString())\"\n    }\n}\n\nfunction Write-EnviromentValue {\n    param (\n        [Parameter(Mandatory = $true)] [String[]] $EnvironmentName\n    )\n\n    \"----------------- Begin of environment variables ---------------------------------\"\n    Get-Item -Path Env:* | Where-Object { \n        $EnvironmentName -contains $_.Name \n    } | Format-Table Name, Value -Wrap\n\n    \"----------------- End of environment variables ---------------------------------\"\n}\n\nfunction Install-Yarn {\n    \"Verify if yarn installed\" \n    if (Get-Command -Name yarn -ErrorAction Ignore) {\n        \"Updating yarn as a global tool to the latest version\"\n        # https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/cmd#parameters\n        # issue https://github.com/projectkudu/kudu/issues/2635\n        Invoke-ExternalCommand -ScriptBlock { npm update yarn -g }\n    }\n    else {\n        \"Installing yarn as a global tool\"\n        Invoke-ExternalCommand -ScriptBlock { npm install yarn -g }\n        Add-NpmToPathVariable\n    }\n}\n\nfunction Install-KuduSync {\n    \"Verify if kudusync installed\" \n    if (Get-Command -Name kudusync -ErrorAction Ignore) {\n        \"Updating kudusync as a global tool to the latest version\"\n        # https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/cmd#parameters\n        # issue https://github.com/projectkudu/kudu/issues/2635\n        Invoke-ExternalCommand -ScriptBlock { npm update kudusync -g }\n    }\n    else {\n        \"Installing kudusync as a global tool\"\n        Invoke-ExternalCommand -ScriptBlock { npm install kudusync -g }\n        Add-NpmToPathVariable\n    }\n}\n\nExport-ModuleMember -Function Invoke-ExternalCommand\nExport-ModuleMember -Function Write-EnviromentValue\nExport-ModuleMember -Function Install-Yarn\nExport-ModuleMember -Function Install-KuduSync\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.47265625,
          "content": "Copyright (c) 2009 Outercurve Foundation\nCopyright (c) 2014 .NET Foundation\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of .NET Foundation nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "Orchard.proj",
          "type": "blob",
          "size": 21.3193359375,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project ToolsVersion=\"4.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n\n  <!-- Initialization -->\n\n  <PropertyGroup>\n    <LibFolder>$(MSBuildProjectDirectory)\\lib</LibFolder>\n    <SrcFolder>$(MSBuildProjectDirectory)\\src</SrcFolder>\n    <BuildFolder>$(MSBuildProjectDirectory)\\build</BuildFolder>\n    <MsBuildTasksFolder>$(MSBuildProjectDirectory)\\buildtasks</MsBuildTasksFolder>\n    <ArtifactsFolder>$(MSBuildProjectDirectory)\\artifacts</ArtifactsFolder>\n    <SqlCeFolder>$(MSBuildProjectDirectory)\\lib\\sqlce</SqlCeFolder>\n    <SourceArtifactFolder>$(ArtifactsFolder)\\Source</SourceArtifactFolder>\n    <MsDeployArtifactFolder>$(ArtifactsFolder)\\MsDeploy</MsDeployArtifactFolder>\n    <GalleryArtifactFolder>$(ArtifactsFolder)\\Gallery</GalleryArtifactFolder>\n    <OrchardWebFolder>$(SrcFolder)\\Orchard.Web</OrchardWebFolder>\n    <ModulesSrcFolder>$(OrchardWebFolder)\\Modules</ModulesSrcFolder>\n    <OrchardCoreSrcFolder>$(OrchardWebFolder)\\Core</OrchardCoreSrcFolder>\n    <ThemesSrcFolder>$(OrchardWebFolder)\\Themes</ThemesSrcFolder>\n\n    <CompileFolder>$(BuildFolder)\\Compile</CompileFolder>\n    <WebSitesFolder>$(CompileFolder)\\_PublishedWebsites</WebSitesFolder>\n    <StageFolder>$(BuildFolder)\\Stage</StageFolder>\n    <MsDeployFolder>$(BuildFolder)\\MsDeploy</MsDeployFolder>\n    <PrecompiledFolder>$(BuildFolder)\\Precompiled</PrecompiledFolder>\n    <ProfilingFolder>$(BuildFolder)\\Profiling</ProfilingFolder>\n    <GalleryFolder>$(BuildFolder)\\Gallery</GalleryFolder>\n\n    <BuildPlatform Condition=\"$(ProgramW6432) != ''\">x64</BuildPlatform>\n    <BuildPlatform Condition=\"$(BuildPlatform) == ''\">x86</BuildPlatform>\n    <Configuration Condition=\"$(Configuration) == ''\">Release</Configuration>\n    \n    <OrchardSolution>$(SrcFolder)\\Orchard.sln</OrchardSolution>\n    <Solution Condition=\"$(Solution) == ''\">$(OrchardSolution)</Solution>\n\n    <!-- TeamCity build number -->\n    <Version>$(BUILD_NUMBER)</Version>\n  </PropertyGroup>\n\n  <!-- Finding the restored NuGet package of NUnit (version number doesn't matter)\n       to be able to reference the test runner executable (http://stackoverflow.com/a/25617556). -->\n  <ItemGroup>\n    <NUnitPackageFiles Include=\"$(SrcFolder)\\packages\\NUnit*\\tools\\nunit-console.exe\" />\n    <NUnitPackageToolsFolder Include=\"@(NUnitPackageFiles->'%(RootDir)%(Directory)'->Distinct())\" />\n  </ItemGroup>\n\n  <Import Project=\"$(LibFolder)\\msbuildtasks\\MSBuild.Community.Tasks.Targets\"/>\n  <Import Project=\"$(LibFolder)\\slowcheetah\\SlowCheetah.Transforms.targets\"/>\n\n  <!-- Coordinating Targets -->\n\n  <Target Name=\"Build\">\n    <CallTarget Targets=\"Clean\"/>\n    <CallTarget Targets=\"Compile\"/>\n    <CallTarget Targets=\"Test\"/>\n    <CallTarget Targets=\"Package\"/>\n  </Target>\n\n  <Target Name=\"FastBuild\">\n    <CallTarget Targets=\"Clean\"/>\n    <CallTarget Targets=\"Compile\"/>\n    <CallTarget Targets=\"Package\"/>\n  </Target>\n\n  <Target Name=\"FullBuild\">\n    <CallTarget Targets=\"Clean\"/>\n    <CallTarget Targets=\"Compile\"/>\n    <CallTarget Targets=\"Test\"/>\n    <CallTarget Targets=\"Package\"/>\n    <CallTarget Targets=\"Spec\"/>\n    <CallTarget Targets=\"Gallery\"/>\n  </Target>\n\n  <Target Name=\"FastPackage\">\n    <CallTarget Targets=\"Clean\"/>\n    <CallTarget Targets=\"Compile\"/>\n    <CallTarget Targets=\"Package\"/>\n    <CallTarget Targets=\"Gallery\"/>\n  </Target>\n\n  <Target Name=\"Package\">\n    <CallTarget Targets=\"Package-Stage\"/>\n    <CallTarget Targets=\"Package-MsDeploy\"/>\n    <CallTarget Targets=\"Package-Zip\"/>\n  </Target>\n\n  <Target Name=\"Precompiled\">\n    <CallTarget Targets=\"Clean\"/>\n    <CallTarget Targets=\"Compile\"/>\n    <CallTarget Targets=\"Package-Stage\"/>\n    <CallTarget Targets=\"Package-Precompiled\"/>\n  </Target>\n  \n  <Target Name=\"Profiling\">\n    <CallTarget Targets=\"Clean\"/>\n    <CallTarget Targets=\"Compile\"/>\n    <CallTarget Targets=\"Package-Stage\"/>\n    <CallTarget Targets=\"Profiling-Stage\"/>\n    <CallTarget Targets=\"Profiling-Setup\"/>\n  </Target>\n\n  <Target Name=\"Gallery\">\n    <CallTarget Targets=\"Gallery-Stage\"/>\n    <CallTarget Targets=\"Gallery-Setup\"/>\n  </Target>\n\n  <!-- Building -->\n\n  <Target Name=\"Clean\">\n    <MSBuild Projects=\"$(Solution)\" Targets=\"Clean\" />\n    <RemoveDir Directories=\"$(BuildFolder)\" ContinueOnError=\"true\"/>\n    <RemoveDir Directories=\"$(ArtifactsFolder)\" />\n  </Target>\n  \n  <Target Name=\"Compile\">\n    <CallTarget Targets=\"DevCompile\"/>\n    <!-- Compile to \"OutputFolder\" -->\n    <MSBuild\n      Projects=\"$(Solution)\"\n      Targets=\"Build\"\n      Properties=\"Configuration=$(Configuration);OutputPath=$(CompileFolder)\" />\n  </Target>\n  \n  <Target Name=\"DevCompile\">\n    <!-- To make sure that Roslyn tools are available, since it's included with Orchard.Web, which is not referenced by\n    other projects, so it will be built towards the end. -->\n    <MSBuild\n      Projects=\"$(OrchardWebFolder)\\Orchard.Web.csproj\"\n      Targets=\"CopyRoslynCompilerFilesToOutputDirectory\" />\n    <!-- Compile to \"regular\" output folder for devs using VS locally -->\n    <MSBuild\n      Projects=\"$(Solution)\"\n      Targets=\"Build\"\n      Properties=\"Configuration=$(Configuration);MvcBuildViews=$(MvcBuildViews)\" />\n  </Target>\n\n  <Target Name=\"CompileMsBuildTasks\">\n    <MSBuild\n      Projects=\"$(SrcFolder)\\Tools\\MSBuild.Orchard.Tasks\\MSBuild.Orchard.Tasks.csproj\"\n      Targets=\"Build\"\n      Properties=\"Configuration=$(Configuration);OutputPath=$(MsBuildTasksFolder)\" />\n  </Target>\n\n  <!-- Testing -->\n\n  <Target Name=\"Test\">\n    <!-- Run unit test assemblies -->\n    <CreateItem Include=\"$(CompileFolder)\\*.Tests.*dll\" Exclude=\"$(CompileFolder)\\Orchard.Azure.Tests.dll\">\n      <Output TaskParameter=\"Include\" ItemName=\"TestAssemblies\" />\n    </CreateItem>\n\n    <NUnit Assemblies=\"@(TestAssemblies)\" ToolPath=\"@(NUnitPackageToolsFolder)\" WorkingDirectory=\"$(CompileFolder)\" OutputXmlFile=\"$(BuildFolder)\\Orchard.Tests.xml\" ExcludeCategory=\"longrunning\" />\n  </Target>\n\n  <Target Name=\"TestAzure\">\n    <!-- Run unit test assemblies -->\n    <CreateItem Include=\"$(CompileFolder)\\Orchard.Azure.Tests.dll\">\n      <Output TaskParameter=\"Include\" ItemName=\"TestAssemblies\" />\n    </CreateItem>\n\n    <NUnit Assemblies=\"@(TestAssemblies)\" ToolPath=\"@(NUnitPackageToolsFolder)\" WorkingDirectory=\"$(CompileFolder)\" OutputXmlFile=\"$(BuildFolder)\\Orchard.Tests.xml\" ExcludeCategory=\"longrunning\" />\n  </Target>\n\n  <Target Name=\"Spec\" DependsOnTargets=\"Compile\">\n    <!-- Running SpecFlow tests -->\n    <CreateItem Include=\"$(CompileFolder)\\*.Specs.*dll\">\n      <Output TaskParameter=\"Include\" ItemName=\"SpecAssemblies\" />\n    </CreateItem>\n    \n    <NUnit Assemblies=\"@(SpecAssemblies)\" ToolPath=\"@(NUnitPackageToolsFolder)\" WorkingDirectory=\"$(CompileFolder)\" OutputXmlFile=\"$(BuildFolder)\\Orchard.Specs.xml\" />\n  </Target>\n\n  <!-- Packaging (Stage) -->\n\n  <UsingTask AssemblyFile=\"$(MsBuildTasksFolder)\\MSBuild.Orchard.Tasks.dll\" TaskName=\"MSBuild.Orchard.Tasks.FilterModuleBinaries\" />\n  <UsingTask AssemblyFile=\"$(MsBuildTasksFolder)\\MSBuild.Orchard.Tasks.dll\" TaskName=\"MSBuild.Orchard.Tasks.FileUpdateLines\" />\n  <UsingTask AssemblyFile=\"$(MsBuildTasksFolder)\\MSBuild.Orchard.Tasks.dll\" TaskName=\"MSBuild.Orchard.Tasks.ValidateExtensionProjectFiles\" />\n  <UsingTask AssemblyFile=\"$(MsBuildTasksFolder)\\MSBuild.Orchard.Tasks.dll\" TaskName=\"MSBuild.Orchard.Tasks.XmlDelete\" />\n\n  <Target Name=\"Package-Stage\" DependsOnTargets=\"Compile\">\n    <CallTarget Targets=\"CompileMsBuildTasks\"/>\n    <CallTarget Targets=\"ValidateProjectFiles\"/>\n\n    <ItemGroup>\n      <SqlCe-Native-Binaries-x86 Include=\"$(SqlCeFolder)\\x86\\**\\*\"/>\n      <SqlCe-Native-Binaries-amd64 Include=\"$(SqlCeFolder)\\amd64\\**\\*\"/>\n      <Stage-Orchard-Web-Bins Include=\"$(WebSitesFolder)\\Orchard.Web\\bin\\*\"/>\n      <Stage-Bin-Exclude Include=\"$(WebSitesFolder)\\**\\bin\\**\\*\" />\n      <Stage-Web Include=\"$(WebSitesFolder)\\Orchard.Web\\**\\*;$(SrcFolder)\\Orchard.Web\\*.csproj;\" Exclude=\"$(SrcFolder)\\Orchard.Web\\Orchard.Web.csproj;$(SrcFolder)\\Orchard.Web\\**\\*.Release.config;$(SrcFolder)\\Orchard.Web\\**\\*.Debug.config\"/>\n      <Stage-Web-Config Include=\"$(SrcFolder)\\Orchard.Web\\**\\*.config\" Exclude=\"$(SrcFolder)\\Orchard.Web\\**\\*.Release.config;$(SrcFolder)\\Orchard.Web\\**\\*.Debug.config\"/>\n      <Stage-Media Include=\"$(SrcFolder)\\Orchard.Web\\Media\\OrchardLogo.png\" />\n      <Stage-PoFiles Include=\"$(SrcFolder)\\Orchard.Web\\**\\*.po\" />\n      <Stage-Core Include=\"$(WebSitesFolder)\\Orchard.Core\\**\\*\" Exclude=\"$(WebSitesFolder)\\Orchard.Core\\**\\bin\\**\\*\" />\n     \n      <!-- Get list of module names from the module definition files within ModulesSrcFolder -->\n      <Stage-Modules-Definitions Include=\"$(ModulesSrcFolder)\\**\\Module.txt\" />\n      <Stage-Modules-Directories Include=\"@(Stage-Modules-Definitions->DirectoryName())\"  />\n      <Stage-Modules-Names Include=\"@(Stage-Modules-Directories->'%(Filename)%(Extension)')\"  />\n     \n      <!-- Get list of theme names from the theme definition files within ThemesSrcFolder -->\n      <Stage-Themes-Definitions Include=\"$(ThemesSrcFolder)\\**\\Theme.txt\" />\n      <Stage-Themes-Directories Include=\"@(Stage-Themes-Definitions->DirectoryName())\"  />\n      <Stage-Themes-Names Include=\"@(Stage-Themes-Directories->'%(Filename)%(Extension)')\"  />\n      \t \n      <Stage-License Include=\"$(MSBuildProjectDirectory)\\*.txt\" />\n      <Stage-Build Include=\"$(MSBuildProjectDirectory)\\*.proj;$(MSBuildProjectDirectory)\\*.cmd\" />\n    </ItemGroup>\n    \n    <ItemGroup>\n\t  <!-- Note. We could add recursion (\\..\\) before the module/theme name thus avoiding the need for custom metadata\n\t       and simplifing the copy tasks further below. However this can result in folders being incorrectly copied if \n\t\t   a module or theme contains a subfolder with the same name as another module or theme. -->\n      <Stage-Modules Include=\"$(WebSitesFolder)\\%(Stage-Modules-Names.Identity)\\**\\*\" Exclude=\"@(Stage-Bin-Exclude)\">\n        <ModuleName>%(Stage-Modules-Names.Identity)</ModuleName>\t  \n      </Stage-Modules>\n      <Stage-Modules-Binaries Include=\"$(WebSitesFolder)\\%(Stage-Modules-Names.Identity)\\**\\bin\\**\\*\">\n        <ModuleName>%(Stage-Modules-Names.Identity)</ModuleName>\t  \n      </Stage-Modules-Binaries>\n      <Stage-Modules-Sources Include=\"$(ModulesSrcFolder)\\**\\*.csproj;$(ModulesSrcFolder)\\**\\*.cs\"/>\n      <Stage-Themes-Default Include=\"$(WebSitesFolder)\\Themes\\%(Stage-Themes-Names.Identity)\\**\\*\">\n        <ThemeName>%(Stage-Themes-Names.Identity)</ThemeName>\n      </Stage-Themes-Default>\n      <Stage-Themes-Custom Include=\"$(WebSitesFolder)\\%(Stage-Themes-Names.Identity)\\**\\*\" Exclude=\"@(Stage-Bin-Exclude)\">\n        <ThemeName>%(Stage-Themes-Names.Identity)</ThemeName>\n      </Stage-Themes-Custom>\n\t  <!-- Note. Binaries are not copied for themes in the default Themes project. -->\n      <Stage-Themes-Binaries Include=\"$(WebSitesFolder)\\%(Stage-Themes-Names.Identity)\\**\\bin\\**\\*\">\n        <ThemeName>%(Stage-Themes-Names.Identity)</ThemeName>\n      </Stage-Themes-Binaries>\n      <Stage-Themes-Sources Include=\"$(ThemesSrcFolder)\\**\\*.csproj;$(ThemesSrcFolder)\\**\\*.cs\" Exclude=\"$(ThemesSrcFolder)\\*.*\"/>\n    </ItemGroup>\n\n    <!-- Copying module binaries is somewhat tricky: From a module \"bin\" directory, we\n         only want to include the files that are _not_ already present in \n         the \"Orchard.Web\\Bin\" folder. -->\n    <FilterModuleBinaries\n      ModulesBinaries=\"@(Stage-Modules-Binaries)\"\n      OrchardWebBinaries=\"@(Stage-Orchard-Web-Bins)\">\n      <Output TaskParameter=\"ExcludedBinaries\" ItemName=\"FilterModuleBinaries-ExcludedBinaries\"/>\n    </FilterModuleBinaries>\n    <FilterModuleBinaries\n      ModulesBinaries=\"@(Stage-Themes-Binaries)\"\n      OrchardWebBinaries=\"@(Stage-Orchard-Web-Bins)\">\n      <Output TaskParameter=\"ExcludedBinaries\" ItemName=\"FilterThemeBinaries-ExcludedBinariesFromThemes\"/>\n    </FilterModuleBinaries>\n\n    <ItemGroup>\n      <Stage-Modules-Binaries-Unique Include=\"@(Stage-Modules-Binaries)\"  Exclude=\"@(FilterModuleBinaries-ExcludedBinaries)\"/>\n      <Stage-Themes-Binaries-Unique Include=\"@(Stage-Themes-Binaries)\"  Exclude=\"@(FilterThemeBinaries-ExcludedBinariesFromThemes)\"/>\n    </ItemGroup>\n\n    <Copy SourceFiles=\"@(Stage-Web);@(Stage-Web-Config);@(Stage-License)\" DestinationFolder=\"$(StageFolder)\\%(RecursiveDir)\"/>\n    <Copy SourceFiles=\"@(Stage-Media)\" DestinationFolder=\"$(StageFolder)\\Media\"/>\n    <Copy SourceFiles=\"@(Stage-PoFiles)\" DestinationFolder=\"$(StageFolder)\\%(RecursiveDir)\"/>\n    <Copy SourceFiles=\"@(SqlCe-Native-Binaries-x86)\" DestinationFolder=\"$(StageFolder)\\bin\\x86\\%(RecursiveDir)\"/>\n    <Copy SourceFiles=\"@(SqlCe-Native-Binaries-amd64)\" DestinationFolder=\"$(StageFolder)\\bin\\amd64\\%(RecursiveDir)\"/>\n    <Copy SourceFiles=\"@(Stage-Core)\" DestinationFolder=\"$(StageFolder)\\Core\\%(RecursiveDir)\"/>\n    <Copy SourceFiles=\"@(Stage-Modules)\" DestinationFiles=\"@(Stage-Modules->'$(StageFolder)\\Modules\\%(ModuleName)\\%(RecursiveDir)%(Filename)%(Extension)')\"/>\n    <Copy SourceFiles=\"@(Stage-Modules-Binaries-Unique)\" DestinationFiles=\"@(Stage-Modules-Binaries-Unique->'$(StageFolder)\\Modules\\%(ModuleName)\\%(RecursiveDir)%(Filename)%(Extension)')\"/>\n    <Copy SourceFiles=\"@(Stage-Modules-Sources)\" DestinationFolder=\"$(StageFolder)\\Modules\\%(RecursiveDir)\"/>\n    <Copy SourceFiles=\"@(Stage-Themes-Default)\" DestinationFiles=\"@(Stage-Themes-Default->'$(StageFolder)\\Themes\\%(ThemeName)\\%(RecursiveDir)%(Filename)%(Extension)')\"/>\n    <Copy SourceFiles=\"@(Stage-Themes-Custom)\" DestinationFiles=\"@(Stage-Themes-Custom->'$(StageFolder)\\Themes\\%(ThemeName)\\%(RecursiveDir)%(Filename)%(Extension)')\"/>\n    <Copy SourceFiles=\"@(Stage-Themes-Binaries-Unique)\" DestinationFiles=\"@(Stage-Themes-Binaries-Unique->'$(StageFolder)\\Themes\\%(ThemeName)\\%(RecursiveDir)%(Filename)%(Extension)')\"/>\n    <Copy SourceFiles=\"@(Stage-Themes-Sources)\" DestinationFolder=\"$(StageFolder)\\Themes\\%(RecursiveDir)\"/>\n\n    <MakeDir Directories=\"$(StageFolder)\\App_Data\"/>\n    <WriteLinesToFile File=\"$(StageFolder)\\App_Data\\_marker.txt\" Lines=\"some_text\" Overwrite=\"true\"/>\n\n    <!-- extra processing of the staged config files -->\n    <TransformXml \n      Source=\"$(StageFolder)\\Web.Config\"\n      Transform=\"$(SrcFolder)\\Orchard.Web\\Web.$(Configuration).Config\"\n      Destination=\"$(StageFolder)\\Web.Config\"\n    />\n\n    <TransformXml \n      Source=\"$(StageFolder)\\Config\\HostComponents.Config\"\n      Transform=\"$(SrcFolder)\\Orchard.Web\\Config\\HostComponents.$(Configuration).Config\"\n      Destination=\"$(StageFolder)\\Config\\HostComponents.Config\"\n    />\n\n    <TransformXml \n      Source=\"$(StageFolder)\\Config\\log4net.Config\"\n      Transform=\"$(SrcFolder)\\Orchard.Web\\Config\\log4net.$(Configuration).Config\"\n      Destination=\"$(StageFolder)\\Config\\log4net.Config\"\n    />\n    \n    <!-- move over extra non-content files the csproj referenced -->\n    <Copy SourceFiles=\"@(StageProjectAlteration-ExtraFiles->'$(SrcFolder)\\Orchard.Web\\%(Identity)')\"\n        DestinationFolder=\"$(StageFolder)\\%(RecursiveDir)\"/>\n\n  </Target>\n\n  <!-- Packaging (MsDeploy) -->\n  <Target Name=\"Package-MsDeploy\">\n    <ItemGroup>\n\n      <MsDeploy-Exclude-Modules Include=\"\n        $(StageFolder)\\**\\Modules\\Orchard.CustomForms\\**;\n        $(StageFolder)\\**\\Modules\\Orchard.jQuery\\**;\n        $(StageFolder)\\**\\Modules\\Orchard.Media\\**;\n        $(StageFolder)\\**\\Modules\\Orchard.MediaPicker\\**;\n        $(StageFolder)\\**\\Modules\\Orchard.Rules\\**;\n        $(StageFolder)\\**\\Modules\\Orchard.TaskLease\\**;\n        \" />\n\n      <MsDeploy-Folder-Input Include=\"$(StageFolder)\\**\\*\" Exclude=\"$(StageFolder)\\**\\bin\\**\\*.xml;$(StageFolder)\\**\\obj\\**\\*;$(StageFolder)\\**\\bin\\**\\*.pdb;$(StageFolder)\\**\\bin\\**\\*.dll.config;@(MsDeploy-Exclude-Modules)\" />\n      <MsDeploy-Parameters Include=\"$(LibFolder)\\msdeploy\\*.xml;$(LibFolder)\\msdeploy\\*.sql\"/>\n    </ItemGroup>\n\n    <Copy SourceFiles=\"@(MsDeploy-Folder-Input)\"\n        DestinationFolder=\"$(MsDeployFolder)\\Orchard\\%(RecursiveDir)\"/>\n    <Copy SourceFiles=\"@(MsDeploy-Parameters)\"\n        DestinationFolder=\"$(MsDeployFolder)\"/>\n\n    <MakeDir Directories=\"$(MsDeployFolder)\\Orchard\\bin\\HostRestart\"/>\n  </Target>\n\n  <!-- Packaging (Precompiled) -->\n  <Target Name=\"Package-Precompiled\">\n    <ItemGroup>\n      <Precompiled-Exclude-Source Include=\"$(StageFolder)\\**\\*.cs;$(StageFolder)\\**\\*.csproj;$(StageFolder)\\**\\*.csproj.user\" />\n      <Precompiled-Folder-Input Include=\"$(StageFolder)\\**\\*\" Exclude=\"$(StageFolder)\\**\\bin\\**\\*.xml;$(StageFolder)\\Modules\\**\\Tests\\**;$(StageFolder)\\Modules\\**\\Specs\\**;$(StageFolder)\\**\\obj\\**\\*;@(Precompiled-Exclude-Source)\" />\n    </ItemGroup>\n\n    <Copy SourceFiles=\"@(Precompiled-Folder-Input)\"\n        DestinationFolder=\"$(PrecompiledFolder)\\%(RecursiveDir)\"/>\n\n    <MakeDir Directories=\"$(PrecompiledFolder)\\bin\\HostRestart\"/>\n  </Target>\n  <Target Name=\"Package-Zip\">\n    <ItemGroup>\n    \n      <Zip-Exclude Include=\"\n        $(MSBuildProjectDirectory)\\src\\**\\packages\\**\\*;\n        $(MSBuildProjectDirectory)\\src\\**\\bin\\**\\*;\n        $(MSBuildProjectDirectory)\\src\\**\\obj\\**\\*;\n        $(MSBuildProjectDirectory)\\**\\App_Data\\**\\*;\n        $(MSBuildProjectDirectory)\\**\\node_modules\\**\\*;\n        $(MSBuildProjectDirectory)\\**\\_ReSharper*\\**\\*;\n        $(MSBuildProjectDirectory)\\**\\*.sln.cache;\n        $(MSBuildProjectDirectory)\\**\\*.suo;\n        $(MSBuildProjectDirectory)\\**\\*.user;\n        $(MSBuildProjectDirectory)\\**\\*.patch;\n        $(MSBuildProjectDirectory)\\**\\*.hgignore;\n        $(MSBuildProjectDirectory)\\**\\*.hg*\\**\\*;\n        $(LibFolder)\\nunit\\addins\\**\\*;\" />\n\n      <Zip-Stage Include=\"$(StageFolder)\\**\\*\" />\n\n      <Zip-MsDeploy Include=\"$(MsDeployFolder)\\**\\*\" Exclude=\"\"/>\n\n      <Zip-Source Include=\"\n        $(MSBuildProjectDirectory)\\lib\\**\\*;\n        $(MSBuildProjectDirectory)\\src\\**\\*;\n        $(MSBuildProjectDirectory)\\*.txt;\n        $(MSBuildProjectDirectory)\\*.proj;\n        $(MSBuildProjectDirectory)\\*.cmd;\n        \" Exclude=\"@(Zip-Exclude)\" />\n\n    </ItemGroup>\n\n    <MakeDir Directories=\"$(MsDeployArtifactFolder);$(SourceArtifactFolder)\" />\n\n    <PropertyGroup>\n      <ZipVersionFileSuffix Condition=\"$(Version) != ''\">.$(Version)</ZipVersionFileSuffix>\n      <ZipVersionFileSuffix Condition=\"$(Version) == ''\"></ZipVersionFileSuffix>\n    </PropertyGroup>\n\n    <Zip Files=\"@(Zip-MsDeploy)\" WorkingDirectory=\"$(MsDeployFolder)\" ZipFileName=\"$(MsDeployArtifactFolder)\\Orchard.Web$(ZipVersionFileSuffix).zip\" />\n    <Zip Files=\"@(Zip-Source)\" WorkingDirectory=\"$(MSBuildProjectDirectory)\" ZipFileName=\"$(SourceArtifactFolder)\\Orchard.Source$(ZipVersionFileSuffix).zip\" />\n  </Target>\n\n  <!-- Profiling -->\n\n  <Target Name=\"Profiling-Stage\">\n    <ItemGroup>\n      <Profiling-Web Include=\"$(StageFolder)\\**\\*\" />\n    </ItemGroup>\n\n    <Copy SourceFiles=\"@(Profiling-Web)\" DestinationFolder=\"$(ProfilingFolder)\\%(RecursiveDir)\"/>\n  </Target>\n\n  <Target Name=\"Profiling-Setup\">\n    <ReadLinesFromFile File=\"$(SrcFolder)\\Orchard.Profile\\profiling-setup-commands.txt\">\n      <Output TaskParameter=\"Lines\" ItemName=\"ProfilingSetupCommands\"/>\n    </ReadLinesFromFile>\n\n    <Exec Command=\"&quot;$(ProfilingFolder)\\bin\\Orchard.exe&quot; %(ProfilingSetupCommands.Identity)\" WorkingDirectory=\"$(ProfilingFolder)\"/>\n  </Target>\n\n  <!-- Gallery Packaging -->\n\n  <Target Name=\"Gallery-Stage\">\n    <ItemGroup>\n      <Gallery-Web Include=\"$(StageFolder)\\**\\*\" />\n    </ItemGroup>\n\n    <Copy SourceFiles=\"@(Gallery-Web)\" DestinationFolder=\"$(GalleryFolder)\\%(RecursiveDir)\"/>\n  </Target>\n\n  <Target Name=\"Gallery-Setup\">\n    <Exec Command=\"&quot;$(GalleryFolder)\\bin\\Orchard.exe&quot; setup /SiteName:Gallery /AdminUsername:admin /AdminPassword:gallery-secret /DatabaseProvider:SqlCe\" WorkingDirectory=\"$(GalleryFolder)\"/>\n    <Exec Command=\"&quot;$(GalleryFolder)\\bin\\Orchard.exe&quot; feature enable Orchard.Packaging\" WorkingDirectory=\"$(GalleryFolder)\"/>\n    <Exec Command=\"&quot;$(GalleryFolder)\\bin\\Orchard.exe&quot; package create Orchard.Media &quot;$(GalleryArtifactFolder)&quot;\" WorkingDirectory=\"$(GalleryFolder)\"/>\n    <Exec Command=\"&quot;$(GalleryFolder)\\bin\\Orchard.exe&quot; package create Orchard.MediaPicker &quot;$(GalleryArtifactFolder)&quot;\" WorkingDirectory=\"$(GalleryFolder)\"/>\n    <Exec Command=\"&quot;$(GalleryFolder)\\bin\\Orchard.exe&quot; package create Orchard.Rules &quot;$(GalleryArtifactFolder)&quot;\" WorkingDirectory=\"$(GalleryFolder)\"/>\n  </Target>\n\n  <!-- ValidateProjectFiles-->\n  <Target Name=\"ValidateProjectFiles\">\n    <CallTarget Targets=\"CompileMsBuildTasks\"/>\n\n    <ItemGroup>\n      <Validate-ProjectFiles \n        Include=\"$(ModulesSrcFolder)\\**\\*.csproj;$(ThemesSrcFolder)\\**\\*.csproj;$(OrchardCoreSrcFolder)\\Orchard.Core.csproj\"\n        Exclude=\"$(ModulesSrcFolder)\\**\\*.Specs.csproj\"\n        />\n    </ItemGroup>\n\n    <ValidateExtensionProjectFiles Files=\"@(Validate-ProjectFiles)\"/>\n\n  </Target>\n\n  <!-- SetVersion -->\n  <!-- Update all AssemblyInfo.cs and module.txt files to contain $(Version) -->\n  <Target Name=\"SetVersion\" Condition=\"$(Version) != ''\">\n    <CallTarget Targets=\"CompileMsBuildTasks\"/>\n\n    <ItemGroup>\n      <Version-AssemblyInfos Include=\"$(SrcFolder)\\**\\AssemblyInfo.cs\" />\n      <Version-Modules Include=\"$(SrcFolder)\\**\\Module.txt\" />\n      <Version-Themes Include=\"$(SrcFolder)\\**\\Theme.txt\" />\n    </ItemGroup>\n\n    <FileUpdateLines Files=\"@(Version-Modules)\"\n        Regex=\"^(orchardversion|version)(\\s*):(\\s*)(.*)\"\n        ReplacementText=\"${1}${2}:${3}$(Version)\"\n        IgnoreCase=\"True\"/>\n\n    <FileUpdateLines Files=\"@(Version-Themes)\"\n          Regex=\"^(orchardversion|version)(\\s*):(\\s*)(.*)\"\n          ReplacementText=\"${1}${2}:${3}$(Version)\"\n          IgnoreCase=\"True\"/>\n\n    <FileUpdateLines Files=\"@(Version-AssemblyInfos)\"\n        Regex=\"^\\[assembly:(\\s)*(AssemblyVersion|AssemblyFileVersion)(\\s)*\\(&quot;(.*)&quot;\\)(\\s)*\\]\"\n        ReplacementText=\"[assembly:${1}${2}${3}(&quot;$(Version)&quot;)${5}]\"\n        IgnoreCase=\"True\"/>\n  </Target>\n</Project>\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.7646484375,
          "content": "# Orchard\n\nOrchard is a free, open source, community-focused Content Management System built on the ASP.NET MVC platform. You are looking at Orchard 1, the older, .NET Framework-based version that has been in development since 2009.\n\nIf you're starting a new project (or maintaining a project built on Orchard 1), you should check out [Orchard Core](https://github.com/OrchardCMS/OrchardCore), the new generation of Orchard built on ASP.NET Core. You can also try it for free on [DotNest.com](https://dotnest.com)!\n\nJoin the community discussion on [Discord](https://orchardcore.net/discord), where we also have a [channel dedicated to Orchard 1](https://discord.com/channels/551136772243980291/551137194689953848).\n\n## About The Orchard Project\n\n#### Please visit our website at https://orchardcore.net for the most current information about this project.\n\nOrchard is a free, open source, community-focused **Content Management System** built on the ASP.NET MVC platform.\n\nOrchard is built on a modern architecture that puts extensibility up-front, as its number one concern. All components in Orchard can be replaced or extended. Content is built from easily composable building blocks. Modules extend the system in a very decoupled fashion, where a commenting module for example can as easily apply to pages, blog posts, photos or products. A rich UI composition system completes the picture and ensures that you can get the exact presentation that you need for your content.\n\nOrchard is delivered under the [.NET Foundation](https://www.dotnetfoundation.org/projects?searchquery=Orchard&type=project). It is licensed under a [New BSD license](https://www.opensource.org/licenses/bsd-license.php), which is approved by the OSI.\n\nOur mission is to empower our users and foster a dedicated and diverse community that builds the CMS that we all want to use.\n\n## Project Status\n\nOrchard is currently in version **[1.10.3](https://github.com/OrchardCMS/Orchard/releases/tag/1.10.3)**: It contains bugfixes and the more impactful changes and new features added in the latest major version (*1.10*).\n\nWe invite participation by the developer community in shaping the project's direction, so that we can publicly validate our designs and development approach. \nAll our releases are available on our [Releases](https://github.com/OrchardCMS/Orchard/releases) page, and we encourage interested developers to check out the source code on the Orchard GitHub site and get involved with the project.\n\n* [Download the latest release](https://github.com/OrchardCMS/Orchard/releases)\n* [Feature roadmap](https://docs.orchardcore.net/projects/O1/en/latest/Documentation/Feature-roadmap/)\n* [Docs and designs/specs](https://docs.orchardcore.net/projects/O1/en/latest/)\n\n## How To Get Involved\n\nWe hope that by engaging with the community we will continue to shape Orchard into a valuable set of tools and applications. The Orchard team is committed to open community participation and accepts code contributions.  We encourage community participation at all levels from general project feedback to bug fixes and patches.  \n\nThere are many ways you can contribute to Orchard:\n\n* [Check out the code](https://github.com/OrchardCMS/Orchard)\n* [Write documentation](https://github.com/OrchardCMS/OrchardDoc)\n* [Find and file a bug](https://github.com/OrchardCMS/Orchard/issues)\n* [Propose a feature idea](https://github.com/OrchardCMS/Orchard/issues/new)\n* [Ask and answer questions on Stack Overflow](https://stackoverflow.com/questions/tagged/orchardcms)\n* [Join us on Discord](https://orchardcore.net/discord)\n* [Submit a pull request](https://docs.orchardcore.net/projects/O1/en/latest/Documentation/Contributing-patches/)\n* [Translate Orchard](https://crowdin.com/project/orchard-cms)\n* [Contribute modules and themes to our gallery](https://gallery.orchardproject.net)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.5283203125,
          "content": "# Security Policy\n\n## Supported Versions\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 1.0     | :x:                |\n| 1.1     | :x:                |\n| 1.2     | :x:                |\n| 1.3     | :x:                |\n| 1.4     | :x:                |\n| 1.5     | :x:                |\n| 1.6     | :x:                |\n| 1.7     | :x:                |\n| 1.8     | :x:                |\n| 1.9     | :x:                |\n| 1.10     | :white_check_mark: |\n\n## Reporting a Vulnerability\n\nSend an email to sebros@microsoft.com\n"
        },
        {
          "name": "build.cmd",
          "type": "blob",
          "size": 0.0166015625,
          "content": "clicktobuild %* \n"
        },
        {
          "name": "deploy.cmd",
          "type": "blob",
          "size": 2.8193359375,
          "content": "@if \"%SCM_TRACE_LEVEL%\" NEQ \"4\" @echo off\n\n:: ----------------------\n:: KUDU Deployment Script\n:: Version: 0.1.11\n:: ----------------------\n\n:: Prerequisites\n:: -------------\n\n:: Verify node.js installed\nwhere node 2>nul >nul\nIF %ERRORLEVEL% NEQ 0 (\n  echo Missing node.js executable, please install node.js, if already installed make sure it can be reached from current environment.\n  goto error\n)\n\n:: Setup\n:: -----\n\nsetlocal enabledelayedexpansion\n\nSET ARTIFACTS=%~dp0%..\\artifacts\n\nIF NOT DEFINED DEPLOYMENT_SOURCE (\n  SET DEPLOYMENT_SOURCE=%~dp0%.\n)\n\nIF NOT DEFINED DEPLOYMENT_TARGET (\n  SET DEPLOYMENT_TARGET=%ARTIFACTS%\\wwwroot\n)\n\nIF NOT DEFINED NEXT_MANIFEST_PATH (\n  SET NEXT_MANIFEST_PATH=%ARTIFACTS%\\manifest\n\n  IF NOT DEFINED PREVIOUS_MANIFEST_PATH (\n    SET PREVIOUS_MANIFEST_PATH=%ARTIFACTS%\\manifest\n  )\n)\n\nIF NOT DEFINED KUDU_SYNC_CMD (\n  :: Install kudu sync\n  echo Installing Kudu Sync\n  call npm install kudusync -g --silent\n  IF !ERRORLEVEL! NEQ 0 goto error\n\n  :: Locally just running \"kuduSync\" would also work\n  SET KUDU_SYNC_CMD=%appdata%\\npm\\kuduSync.cmd\n)\nIF NOT DEFINED DEPLOYMENT_TEMP (\n  SET DEPLOYMENT_TEMP=%temp%\\___deployTemp%random%\n  SET CLEAN_LOCAL_DEPLOYMENT_TEMP=true\n)\n\nIF DEFINED CLEAN_LOCAL_DEPLOYMENT_TEMP (\n  IF EXIST \"%DEPLOYMENT_TEMP%\" rd /s /q \"%DEPLOYMENT_TEMP%\"\n  mkdir \"%DEPLOYMENT_TEMP%\"\n)\n\nIF NOT DEFINED MSBUILD_PATH (\n  SET MSBUILD_PATH=%WINDIR%\\Microsoft.NET\\Framework\\v4.0.30319\\msbuild.exe\n)\n\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n:: Deployment\n:: ----------\n\necho Handling .NET Web Application deployment.\n\n:: 1. Restore NuGet packages\ncall :ExecuteCmd nuget restore \"%DEPLOYMENT_SOURCE%\\src\\Orchard.sln\"\nIF !ERRORLEVEL! NEQ 0 goto error\n\n:: 2. Build to the temporary path\ncall :ExecuteCmd \"%MSBUILD_PATH%\" \"%DEPLOYMENT_SOURCE%\\Orchard.proj\" /t:Precompiled /v:m /m\nIF !ERRORLEVEL! NEQ 0 goto error\n\n:: 3. KuduSync\ncall :ExecuteCmd \"%KUDU_SYNC_CMD%\" -v 50 -f \"%DEPLOYMENT_SOURCE%\\build\\Precompiled\" -t \"%DEPLOYMENT_TARGET%\" -n \"%NEXT_MANIFEST_PATH%\" -p \"%PREVIOUS_MANIFEST_PATH%\" -i \".git;.hg;.deployment;deploy.cmd\"\nIF !ERRORLEVEL! NEQ 0 goto error\n\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n\n:: Post deployment stub\nIF DEFINED POST_DEPLOYMENT_ACTION call \"%POST_DEPLOYMENT_ACTION%\"\nIF !ERRORLEVEL! NEQ 0 goto error\n\ngoto end\n\n:: Execute command routine that will echo out when error\n:ExecuteCmd\nsetlocal\nset _CMD_=%*\ncall %_CMD_%\nif \"%ERRORLEVEL%\" NEQ \"0\" echo Failed exitCode=%ERRORLEVEL%, command=%_CMD_%\nexit /b %ERRORLEVEL%\n\n:error\nendlocal\necho An error has occurred during web site deployment.\ncall :exitSetErrorLevel\ncall :exitFromFunction 2>nul\n\n:exitSetErrorLevel\nexit /b 1\n\n:exitFromFunction\n()\n\n:end\nendlocal\necho Finished successfully.\n"
        },
        {
          "name": "deploy.ps1",
          "type": "blob",
          "size": 3.69140625,
          "content": "# https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/set-strictmode?view=powershell-7\nSet-StrictMode -Version Latest\n\n# https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_preference_variables?view=powershell-7#erroractionpreference\n$ErrorActionPreference = \"Continue\" # Just explicit set it\n\nImport-Module -Name ./DeploymentUtility -Force\n\n\"Verify if Node.js installed\"\nif (-not (Get-Command -Name node -ErrorAction Ignore)) {\n    throw  (\n\t\t\"Missing Node.js executable, please install Node.js.\" +\n\t\t\"If already installed, make sure it can be reached from the current environment.\"\n\t)\n}\n\n$ARTIFACTS = \"$PSScriptRoot/../artifacts\"\n# Set deployment source folder\nif (-not $Env:DEPLOYMENT_SOURCE) {\n    'Set $DEPLOYMENT_SOURCE variable from the current directory'\n    $Env:DEPLOYMENT_SOURCE = $PSScriptRoot\n}\n\nif (-not $Env:DEPLOYMENT_TARGET) {\n    'Set $DEPLOYMENT_TARGET variable'\n    $Env:DEPLOYMENT_TARGET = \"$ARTIFACTS/wwwroot\"\n}\n\nif (-not $Env:NEXT_MANIFEST_PATH) {\n    'Set $NEXT_MANIFEST_PATH variable'\n    $Env:NEXT_MANIFEST_PATH = \"$ARTIFACTS/manifest\"\n\n\tif (-not $Env:PREVIOUS_MANIFEST_PATH) {\n\t\t'Set $PREVIOUS_MANIFEST_PATH variable'\n\t\t$Env:PREVIOUS_MANIFEST_PATH = \"$ARTIFACTS/manifest\"\n\t}\n}\n\n# Log environment variables\n$environmentNameToWriteValue = @(\n    \"DEPLOYMENT_SOURCE\"\n    \"DEPLOYMENT_TARGET\"\n    \"NEXT_MANIFEST_PATH\"\n    \"PREVIOUS_MANIFEST_PATH\"\n    \"WEBSITE_NODE_DEFAULT_VERSION\"\n    \"WEBSITE_NPM_DEFAULT_VERSION\"\n    \"SCM_REPOSITORY_PATH\"\n    \"SOLUTION_PATH\"\n    \"PROJECT_PATH\"\n    \"MSBUILD_PATH\"\n    \"Path\" \n)\nWrite-EnviromentValue -EnvironmentName $environmentNameToWriteValue\n\n################ Build Node.js project with yarn if there is yarn.lock file ################\n$nodeProjectsDir = Get-ChildItem -Path . -Recurse -Filter \"yarn.lock\" |\n\tSelect-Object -ExpandProperty DirectoryName -Unique |\n    Where-Object { $_ -NotMatch \"node_modules\" }\n\n\"Node projects directory:\"\n$nodeProjectsDir\n\nInstall-Yarn\n\n$nodeProjectsDir | Foreach-Object {\n\t$projectDir = $_\n\tPush-Location -Path $projectDir\n\n\t\"Current Node project directory is $(Get-Location)\"\n\t\"Installing npm packages with yarn\"\n\tInvoke-ExternalCommand -ScriptBlock { yarn install }\n\n\t\"Building Node.js project with yarn\" \n\tInvoke-ExternalCommand -ScriptBlock { yarn build }\n\tPop-Location\n}\n###########################################################################################\n\n# Build .NET project\n\"Restore NuGet packages\"\n# REF https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-restore#options\n$msBuildDir = Split-Path -Path $Env:MSBUILD_PATH -Parent\nInvoke-ExternalCommand -ScriptBlock { ./lib/nuget/nuget.exe restore \"$Env:SOLUTION_PATH\" -MSBuildPath \"$msBuildDir\" }\n\n\"Build .NET project to the pre-compiled directory\"\n$preCompiledDir = \"$Env:DEPLOYMENT_SOURCE/build/Precompiled\"\n\n\"Build .NET project to the temp directory\"\n\"Building the project with MSBuild to '$preCompiledDir'\" \nInvoke-ExternalCommand -ScriptBlock { \n\tcmd /c \"$Env:MSBUILD_PATH\" `\n\t\t\"$Env:PROJECT_PATH\" `\n\t\t/t:Precompiled `\n\t\t/p:PreCompiledDir=$preCompiledDir `\n\t\t/verbosity:minimal `\n\t\t/maxcpucount `\n\t\t/nologo `\n\t\t$Env:SCM_BUILD_ARGS\n\t\t# Set SCM_BUILD_ARGS as App Service Configuration to any string you want to append to the MSBuild command line.\n}\n\nInstall-KuduSync\n\n\"Syncing a build output to a deployment folder\" \nInvoke-ExternalCommand -ScriptBlock {\n\tcmd /c kudusync `\n\t\t-f \"$preCompiledDir\" `\n\t\t-t \"$Env:DEPLOYMENT_TARGET\" `\n\t\t-n \"$Env:NEXT_MANIFEST_PATH\" `\n\t\t-p \"$Env:PREVIOUS_MANIFEST_PATH\" `\n\t\t-i \".git;.hg;.deployment;deploy.cmd;deploy.ps1;node_modules;\"\n}\n\nif ($Env:POST_DEPLOYMENT_ACTION) {\n    \"Post deployment stub\"\n    Invoke-ExternalCommand -ScriptBlock { $Env:POST_DEPLOYMENT_ACTION }\n}\n\n\"Deployment successfully\"\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}