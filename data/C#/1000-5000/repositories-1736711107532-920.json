{
  "metadata": {
    "timestamp": 1736711107532,
    "page": 920,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "keijiro/Pcx",
      "stars": 1377,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2333984375,
          "content": "* -text\n\n*.cs        text eol=lf diff=csharp\n*.shader    text eol=lf\n*.cginc     text eol=lf\n*.hlsl      text eol=lf\n*.compute   text eol=lf\n\n*.meta      text eol=lf\n\n*.cpp       text eol=lf\n*.h         text eol=lf\nMakefile    text eol=lf\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1552734375,
          "content": "# Windows\nThumbs.db\nDesktop.ini\n\n# macOS\n.DS_Store\n\n# Vim\n*.swp\n\n# Unity\n/Library\n/Logs\n/Temp\n/UserSettings\n\n/Extras/pcx-strip/*.o\n/Extras/pcx-strip/pcx-strip\n"
        },
        {
          "name": "Assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "Extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1826171875,
          "content": "This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n"
        },
        {
          "name": "Packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "ProjectSettings",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.5673828125,
          "content": "Pcx - Point Cloud Importer/Renderer for Unity\n=============================================\n\n![GIF](https://i.imgur.com/zc6P96x.gif)\n![GIF](https://i.imgur.com/lpWIiXu.gif)\n\n**Pcx** is a custom importer and renderer that allows for handling point cloud data\nin Unity.\n\nSystem Requirements\n-------------------\n\n- Unity 2019.4\n\nSupported Formats\n-----------------\n\nCurrently Pcx only supports PLY binary little-endian format.\n\nHow To Install\n--------------\n\nThe Pcx package uses the [scoped registry] feature to import dependent\npackages. Please add the following sections to the package manifest file\n(`Packages/manifest.json`).\n\nTo the `scopedRegistries` section:\n\n```\n{\n  \"name\": \"Keijiro\",\n  \"url\": \"https://registry.npmjs.com\",\n  \"scopes\": [ \"jp.keijiro\" ]\n}\n```\n\nTo the `dependencies` section:\n\n```\n\"jp.keijiro.pcx\": \"1.0.1\"\n```\n\nAfter changes, the manifest file should look like below:\n\n```\n{\n  \"scopedRegistries\": [\n    {\n      \"name\": \"Keijiro\",\n      \"url\": \"https://registry.npmjs.com\",\n      \"scopes\": [ \"jp.keijiro\" ]\n    }\n  ],\n  \"dependencies\": {\n    \"jp.keijiro.pcx\": \"1.0.1\",\n    ...\n```\n\n[scoped registry]: https://docs.unity3d.com/Manual/upm-scoped.html\n\nContainer Types\n---------------\n\n![Inspector](https://i.imgur.com/Da0p6uV.png)\n\nThere are three types of container for point clouds.\n\n### Mesh\n\nPoints are to be contained in a `Mesh` object. They can be rendered with the\nstandard `MeshRenderer` component. It's recommended to use the custom shaders\nincluded in Pcx (`Point Cloud/Point` and `Point Cloud/Disk`).\n\n### ComputeBuffer\n\nPoints are to be contained in a `PointCloudData` object, which uses\n`ComputeBuffer` to store point data. It can be rendered with using the\n`PointCloudRenderer` component.\n\n### Texture\n\nPoints are baked into `Texture2D` objects that can be used as attribute maps\nin [Visual Effect Graph].\n\n[Visual Effect Graph]: https://unity.com/visual-effect-graph\n\nRendering Methods\n-----------------\n\nThere are two types of rendering methods in Pcx.\n\n### Point (point primitives)\n\nPoints are rendered as point primitives when using the `Point Cloud/Point`\nshader.\n\n![Points](https://i.imgur.com/aY4QMtb.png)\n![Points](https://i.imgur.com/jJAhLI2.png)\n\nThe size of points can be adjusted by changing the material properties.\n\n![Inspector](https://i.imgur.com/gEMmxTH.png)\n\nThese size properties are only supported on some platforms; It may work with\nOpenGLCore and Metal, but never work with D3D11/12.\n\nThis method is also used when the point size is set to zero in\n`PointCloudRenderer`.\n\n### Disk (geometry shader)\n\nPoints are rendered as small disks when using the `Point Cloud/Disk` shader or\n`PointCloudRenderer`.\n\n![Disks](https://i.imgur.com/fcq5E3m.png)\n\nThis method requires geometry shader support.\n\nAcknowledgements\n----------------\n\nThe point cloud files used in the examples of Pcx are created by authors listed\nbelow. These files are licensed under the Creative Commons Attribution license\n([CC BY 4.0]). Please see the following original pages for further details.\n\n- richmond-azaelias.ply - Azaleas, Isabella Plantation, Richmond Park.\n  Created by [Thomas Flynn].\n  https://sketchfab.com/models/188576acfe89480f90c38d9df9a4b19a\n\n- anthidium-forcipatum.ply - Anthidium forcipatum â™€ (Point Cloud).\n  Created by [Thomas Flynn].\n  https://sketchfab.com/models/3493da15a8db4f34929fc38d9d0fcb2c\n\n- Guanyin.ply - Guanyin (Avalokitesvara). Created by [Geoffrey Marchal].\n  https://sketchfab.com/models/9db9a5dfb6744a5586dfcb96cb8a7dc5\n\n[Thomas Flynn]: https://sketchfab.com/nebulousflynn\n[Geoffrey Marchal]: https://sketchfab.com/geoffreymarchal\n[CC BY 4.0]: https://creativecommons.org/licenses/by/4.0/\n"
        }
      ]
    }
  ]
}