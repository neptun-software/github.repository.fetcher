{
  "metadata": {
    "timestamp": 1736710731772,
    "page": 142,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Topshelf/Topshelf",
      "stars": 3584,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.4111328125,
          "content": "# EditorConfig helps developers define and maintain consistent\n# coding styles between different editors and IDEs\n# editorconfig.org\n\nroot = true\n\n\n[*]\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\n\n[*.{config,xml,js,json,html,css,sql,csproj,props,yml}]\nindent_size = 2\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.sh]\nend_of_line = lf\n\n[*.{cmd, bat}]\nend_of_line = crlf"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.080078125,
          "content": "# Set default behaviour, in case users don't have core.autocrlf set.\n* text=false\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2802734375,
          "content": "build_output/*\nbuild_artifacts/*\ndoc/build/*\n\nnuget.exe\n\n*.suo\n*.user\npackages\n*.dotCover\n*.dotSettings\n\n.fake\n.idea\n.vs\n\n\nbin\nobj\n_ReSharper*\n\n*.ReSharper\n*.cache\n*~\n*.swp\n*.bak\n*.orig\n\n# osx noise\n.DS_Store\nGemfile.lock\n\n# Cake\ntools/**\n!tools/packages.config\n\n# Artifacts\nartifacts/**"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.2294921875,
          "content": "Topshelf v4.0\n\n* Removed support for .NET < 4.5.2\n* Moved build to FAKE\n* Using AppVeyor for public builds https://ci.appveyor.com/project/phatboyg/topshelf\n* Allow service users to have blank passwords (topshelf#285) via @ianbattersby"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0595703125,
          "content": "Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "Topshelf.snk",
          "type": "blob",
          "size": 0.58203125,
          "content": null
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.81640625,
          "content": "version: 4.3.1.{build}\r\n\r\nbranches:\r\n  only:\r\n    - develop\r\n    - master\r\n\r\nskip_tags: true\r\n\r\nskip_commits:\r\n  files:\r\n    - doc/**/*\r\n    - docs/**/*\r\n    - '**/*.html'\r\n\r\nimage:\r\n  - Visual Studio 2017\r\n\r\nbuild: off\r\ntest: off\r\n\r\nartifacts:\r\n  - path: artifacts/*.nupkg\r\n    name: NuGet\r\n  - path: artifacts/*.snupkg\r\n    name: Symbols\r\n\r\nbuild_script:\r\n  - ps: .\\Build.ps1\r\n\r\ndeploy:\r\n- provider: NuGet\r\n  name: Prerelease\r\n  symbol_server: https://www.nuget.org\r\n  artifact: NuGet, Symbols\r\n  api_key:\r\n    secure: OxGFtmO9BbWN4+be0SkCVwoRmwyES/Ve7k/wufyQfvG+dEZkaXSjKnnoolk9yktn\r\n  on:\r\n    branch: develop\r\n- provider: NuGet\r\n  name: Release\r\n  symbol_server: https://www.nuget.org\r\n  artifact: NuGet, Symbols\r\n  api_key:\r\n    secure: OxGFtmO9BbWN4+be0SkCVwoRmwyES/Ve7k/wufyQfvG+dEZkaXSjKnnoolk9yktn\r\n  on:\r\n    branch: master\r\n"
        },
        {
          "name": "build.cake",
          "type": "blob",
          "size": 3.287109375,
          "content": "//////////////////////////////////////////////////////////////////////\n// TOOLS\n//////////////////////////////////////////////////////////////////////\n\n// Load other scripts.\n#load \"./build/parameters.cake\"\n\n//////////////////////////////////////////////////////////////////////\n// ARGUMENTS\n//////////////////////////////////////////////////////////////////////\n\nvar target = Argument(\"target\", \"Default\");\n\n//////////////////////////////////////////////////////////////////////\n// PREPARATION\n//////////////////////////////////////////////////////////////////////\n\nSetup<BuildParameters>(setupContext =>\n{\n    var buildParams = BuildParameters.GetParameters(setupContext);\n    buildParams.Initialize(setupContext);\n    return buildParams;\n});\n\n//////////////////////////////////////////////////////////////////////\n// TASKS\n//////////////////////////////////////////////////////////////////////\n\nTask(\"Clean\")\n    .Does<BuildParameters>(data =>\n{\n    CleanDirectories($\"./src/**/obj/{data.Configuration}\");\n    CleanDirectories($\"./src/**/bin/{data.Configuration}\");\n    CleanDirectory(data.Paths.Directories.Artifacts);\n});\n\nTask(\"CleanAll\")\n    .Does<BuildParameters>(data =>\n{\n    CleanDirectories($\"./src/**/obj\");\n    CleanDirectories($\"./src/**/bin\");\n    CleanDirectory(data.Paths.Directories.Artifacts);\n});\n\nTask(\"Restore-NuGet\")\n    .Does<BuildParameters>(data =>\n{\n    DotNetCoreRestore(data.Paths.Directories.Solution.FullPath);\n});\n\nTask(\"Build\")\n    .IsDependentOn(\"Clean\")\n    .IsDependentOn(\"Restore-NuGet\")\n    .Does<BuildParameters>(data =>\n{\n    var settings = new DotNetCoreBuildSettings{\n        NoRestore = true,\n        Configuration = data.Configuration,\n        MSBuildSettings = new DotNetCoreMSBuildSettings().WithProperty(\"Version\", data.Version.Version)\n    };\n\n    DotNetCoreBuild(data.Paths.Directories.Solution.FullPath, settings);\n});\n\nTask(\"Test\")\n    .IsDependentOn(\"Build\")\n    .Does<BuildParameters>(data =>\n{\n    var settings = new DotNetCoreTestSettings\n    {\n        NoBuild = true,\n        Configuration = data.Configuration,\n        DiagnosticOutput = true\n    };\n\n    if(data.IsRunningOnAppVeyor) settings.ArgumentCustomization = args => args.Append($\"--test-adapter-path:.\").Append(\"--logger:Appveyor\");\n\n    DotNetCoreTest(data.Paths.Directories.Solution.FullPath, settings);\n});\n\nTask(\"Pack\")\n    .IsDependentOn(\"Build\")\n    .WithCriteria<BuildParameters>((context,data) => data.ShouldPublish)\n    .Does<BuildParameters>(data =>\n{\n    var settings = new DotNetCorePackSettings{\n        NoRestore = true,\n        NoBuild = true,\n        OutputDirectory = data.Paths.Directories.Artifacts,\n        Configuration = data.Configuration,\n        MSBuildSettings = new DotNetCoreMSBuildSettings().WithProperty(\"Version\", data.Version.Version)\n    };\n    DotNetCorePack(data.Paths.Directories.Solution.FullPath, settings);\n});\n\n//////////////////////////////////////////////////////////////////////\n// TASK TARGETS\n//////////////////////////////////////////////////////////////////////\n\nTask(\"Default\")\n    .IsDependentOn(\"Clean\")\n    .IsDependentOn(\"Restore-NuGet\")\n    .IsDependentOn(\"Build\")\n    .IsDependentOn(\"Test\")\n    .IsDependentOn(\"Pack\");\n\n//////////////////////////////////////////////////////////////////////\n// EXECUTION\n//////////////////////////////////////////////////////////////////////\n\nRunTarget(target);\n"
        },
        {
          "name": "build.fsx",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 7.828125,
          "content": "##########################################################################\n# This is the Cake bootstrapper script for PowerShell.\n# This file was downloaded from https://github.com/cake-build/resources\n# Feel free to change this file to fit your needs.\n##########################################################################\n\n<#\n\n.SYNOPSIS\nThis is a Powershell script to bootstrap a Cake build.\n\n.DESCRIPTION\nThis Powershell script will download NuGet if missing, restore NuGet tools (including Cake)\nand execute your Cake build script with the parameters you provide.\n\n.PARAMETER Script\nThe build script to execute.\n.PARAMETER Target\nThe build script target to run.\n.PARAMETER Configuration\nThe build configuration to use.\n.PARAMETER Verbosity\nSpecifies the amount of information to be displayed.\n.PARAMETER ShowDescription\nShows description about tasks.\n.PARAMETER DryRun\nPerforms a dry run.\n.PARAMETER SkipToolPackageRestore\nSkips restoring of packages.\n.PARAMETER ScriptArgs\nRemaining arguments are added here.\n\n.LINK\nhttps://cakebuild.net\n\n#>\n\n[CmdletBinding()]\nParam(\n    [string]$Script = \"build.cake\",\n    [string]$Target,\n    [string]$Configuration,\n    [ValidateSet(\"Quiet\", \"Minimal\", \"Normal\", \"Verbose\", \"Diagnostic\")]\n    [string]$Verbosity,\n    [switch]$ShowDescription,\n    [Alias(\"WhatIf\", \"Noop\")]\n    [switch]$DryRun,\n    [switch]$SkipToolPackageRestore,\n    [Parameter(Position=0,Mandatory=$false,ValueFromRemainingArguments=$true)]\n    [string[]]$ScriptArgs\n)\n\n# Attempt to set highest encryption available for SecurityProtocol.\n# PowerShell will not set this by default (until maybe .NET 4.6.x). This\n# will typically produce a message for PowerShell v2 (just an info\n# message though)\ntry {\n    # Set TLS 1.2 (3072), then TLS 1.1 (768), then TLS 1.0 (192), finally SSL 3.0 (48)\n    # Use integers because the enumeration values for TLS 1.2 and TLS 1.1 won't\n    # exist in .NET 4.0, even though they are addressable if .NET 4.5+ is\n    # installed (.NET 4.5 is an in-place upgrade).\n    [System.Net.ServicePointManager]::SecurityProtocol = 3072 -bor 768 -bor 192 -bor 48\n  } catch {\n    Write-Output 'Unable to set PowerShell to use TLS 1.2 and TLS 1.1 due to old .NET Framework installed. If you see underlying connection closed or trust errors, you may need to upgrade to .NET Framework 4.5+ and PowerShell v3'\n  }\n\n[Reflection.Assembly]::LoadWithPartialName(\"System.Security\") | Out-Null\nfunction MD5HashFile([string] $filePath)\n{\n    if ([string]::IsNullOrEmpty($filePath) -or !(Test-Path $filePath -PathType Leaf))\n    {\n        return $null\n    }\n\n    [System.IO.Stream] $file = $null;\n    [System.Security.Cryptography.MD5] $md5 = $null;\n    try\n    {\n        $md5 = [System.Security.Cryptography.MD5]::Create()\n        $file = [System.IO.File]::OpenRead($filePath)\n        return [System.BitConverter]::ToString($md5.ComputeHash($file))\n    }\n    finally\n    {\n        if ($file -ne $null)\n        {\n            $file.Dispose()\n        }\n    }\n}\n\nfunction GetProxyEnabledWebClient\n{\n    $wc = New-Object System.Net.WebClient\n    $proxy = [System.Net.WebRequest]::GetSystemWebProxy()\n    $proxy.Credentials = [System.Net.CredentialCache]::DefaultCredentials\n    $wc.Proxy = $proxy\n    return $wc\n}\n\nWrite-Host \"Preparing to run build script...\"\n\nif(!$PSScriptRoot){\n    $PSScriptRoot = Split-Path $MyInvocation.MyCommand.Path -Parent\n}\n\n$TOOLS_DIR = Join-Path $PSScriptRoot \"tools\"\n$ADDINS_DIR = Join-Path $TOOLS_DIR \"Addins\"\n$MODULES_DIR = Join-Path $TOOLS_DIR \"Modules\"\n$NUGET_EXE = Join-Path $TOOLS_DIR \"nuget.exe\"\n$CAKE_EXE = Join-Path $TOOLS_DIR \"Cake/Cake.exe\"\n$NUGET_URL = \"https://dist.nuget.org/win-x86-commandline/latest/nuget.exe\"\n$PACKAGES_CONFIG = Join-Path $TOOLS_DIR \"packages.config\"\n$PACKAGES_CONFIG_MD5 = Join-Path $TOOLS_DIR \"packages.config.md5sum\"\n$ADDINS_PACKAGES_CONFIG = Join-Path $ADDINS_DIR \"packages.config\"\n$MODULES_PACKAGES_CONFIG = Join-Path $MODULES_DIR \"packages.config\"\n\n# Make sure tools folder exists\nif ((Test-Path $PSScriptRoot) -and !(Test-Path $TOOLS_DIR)) {\n    Write-Verbose -Message \"Creating tools directory...\"\n    New-Item -Path $TOOLS_DIR -Type directory | out-null\n}\n\n# Make sure that packages.config exist.\nif (!(Test-Path $PACKAGES_CONFIG)) {\n    Write-Verbose -Message \"Downloading packages.config...\"\n    try {\n        $wc = GetProxyEnabledWebClient\n        $wc.DownloadFile(\"https://cakebuild.net/download/bootstrapper/packages\", $PACKAGES_CONFIG)\n    } catch {\n        Throw \"Could not download packages.config.\"\n    }\n}\n\n# Try find NuGet.exe in path if not exists\nif (!(Test-Path $NUGET_EXE)) {\n    Write-Verbose -Message \"Trying to find nuget.exe in PATH...\"\n    $existingPaths = $Env:Path -Split ';' | Where-Object { (![string]::IsNullOrEmpty($_)) -and (Test-Path $_ -PathType Container) }\n    $NUGET_EXE_IN_PATH = Get-ChildItem -Path $existingPaths -Filter \"nuget.exe\" | Select -First 1\n    if ($NUGET_EXE_IN_PATH -ne $null -and (Test-Path $NUGET_EXE_IN_PATH.FullName)) {\n        Write-Verbose -Message \"Found in PATH at $($NUGET_EXE_IN_PATH.FullName).\"\n        $NUGET_EXE = $NUGET_EXE_IN_PATH.FullName\n    }\n}\n\n# Try download NuGet.exe if not exists\nif (!(Test-Path $NUGET_EXE)) {\n    Write-Verbose -Message \"Downloading NuGet.exe...\"\n    try {\n        $wc = GetProxyEnabledWebClient\n        $wc.DownloadFile($NUGET_URL, $NUGET_EXE)\n    } catch {\n        Throw \"Could not download NuGet.exe.\"\n    }\n}\n\n# Save nuget.exe path to environment to be available to child processed\n$ENV:NUGET_EXE = $NUGET_EXE\n\n# Restore tools from NuGet?\nif(-Not $SkipToolPackageRestore.IsPresent) {\n    Push-Location\n    Set-Location $TOOLS_DIR\n\n    # Check for changes in packages.config and remove installed tools if true.\n    [string] $md5Hash = MD5HashFile($PACKAGES_CONFIG)\n    if((!(Test-Path $PACKAGES_CONFIG_MD5)) -Or\n      ($md5Hash -ne (Get-Content $PACKAGES_CONFIG_MD5 ))) {\n        Write-Verbose -Message \"Missing or changed package.config hash...\"\n        Get-ChildItem -Exclude packages.config,nuget.exe,Cake.Bakery |\n        Remove-Item -Recurse\n    }\n\n    Write-Verbose -Message \"Restoring tools from NuGet...\"\n    $NuGetOutput = Invoke-Expression \"&`\"$NUGET_EXE`\" install -ExcludeVersion -OutputDirectory `\"$TOOLS_DIR`\"\"\n\n    if ($LASTEXITCODE -ne 0) {\n        Throw \"An error occurred while restoring NuGet tools.\"\n    }\n    else\n    {\n        $md5Hash | Out-File $PACKAGES_CONFIG_MD5 -Encoding \"ASCII\"\n    }\n    Write-Verbose -Message ($NuGetOutput | out-string)\n\n    Pop-Location\n}\n\n# Restore addins from NuGet\nif (Test-Path $ADDINS_PACKAGES_CONFIG) {\n    Push-Location\n    Set-Location $ADDINS_DIR\n\n    Write-Verbose -Message \"Restoring addins from NuGet...\"\n    $NuGetOutput = Invoke-Expression \"&`\"$NUGET_EXE`\" install -ExcludeVersion -OutputDirectory `\"$ADDINS_DIR`\"\"\n\n    if ($LASTEXITCODE -ne 0) {\n        Throw \"An error occurred while restoring NuGet addins.\"\n    }\n\n    Write-Verbose -Message ($NuGetOutput | out-string)\n\n    Pop-Location\n}\n\n# Restore modules from NuGet\nif (Test-Path $MODULES_PACKAGES_CONFIG) {\n    Push-Location\n    Set-Location $MODULES_DIR\n\n    Write-Verbose -Message \"Restoring modules from NuGet...\"\n    $NuGetOutput = Invoke-Expression \"&`\"$NUGET_EXE`\" install -ExcludeVersion -OutputDirectory `\"$MODULES_DIR`\"\"\n\n    if ($LASTEXITCODE -ne 0) {\n        Throw \"An error occurred while restoring NuGet modules.\"\n    }\n\n    Write-Verbose -Message ($NuGetOutput | out-string)\n\n    Pop-Location\n}\n\n# Make sure that Cake has been installed.\nif (!(Test-Path $CAKE_EXE)) {\n    Throw \"Could not find Cake.exe at $CAKE_EXE\"\n}\n\n\n\n# Build Cake arguments\n$cakeArguments = @(\"$Script\");\nif ($Target) { $cakeArguments += \"-target=$Target\" }\nif ($Configuration) { $cakeArguments += \"-configuration=$Configuration\" }\nif ($Verbosity) { $cakeArguments += \"-verbosity=$Verbosity\" }\nif ($ShowDescription) { $cakeArguments += \"-showdescription\" }\nif ($DryRun) { $cakeArguments += \"-dryrun\" }\n$cakeArguments += $ScriptArgs\n\n# Start Cake\nWrite-Host \"Running build script...\"\n&$CAKE_EXE $cakeArguments\nexit $LASTEXITCODE\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 3.134765625,
          "content": "#!/usr/bin/env bash\n\n##########################################################################\n# This is the Cake bootstrapper script for Linux and OS X.\n# This file was downloaded from https://github.com/cake-build/resources\n# Feel free to change this file to fit your needs.\n##########################################################################\n\n# Define directories.\nSCRIPT_DIR=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\nTOOLS_DIR=$SCRIPT_DIR/tools\nADDINS_DIR=$TOOLS_DIR/Addins\nMODULES_DIR=$TOOLS_DIR/Modules\nNUGET_EXE=$TOOLS_DIR/nuget.exe\nCAKE_EXE=$TOOLS_DIR/Cake/Cake.exe\nPACKAGES_CONFIG=$TOOLS_DIR/packages.config\nPACKAGES_CONFIG_MD5=$TOOLS_DIR/packages.config.md5sum\nADDINS_PACKAGES_CONFIG=$ADDINS_DIR/packages.config\nMODULES_PACKAGES_CONFIG=$MODULES_DIR/packages.config\n\n# Define md5sum or md5 depending on Linux/OSX\nMD5_EXE=\nif [[ \"$(uname -s)\" == \"Darwin\" ]]; then\n    MD5_EXE=\"md5 -r\"\nelse\n    MD5_EXE=\"md5sum\"\nfi\n\n# Define default arguments.\nSCRIPT=\"build.cake\"\nCAKE_ARGUMENTS=()\n\n# Parse arguments.\nfor i in \"$@\"; do\n    case $1 in\n        -s|--script) SCRIPT=\"$2\"; shift ;;\n        --) shift; CAKE_ARGUMENTS+=(\"$@\"); break ;;\n        *) CAKE_ARGUMENTS+=(\"$1\") ;;\n    esac\n    shift\ndone\n\n# Make sure the tools folder exist.\nif [ ! -d \"$TOOLS_DIR\" ]; then\n  mkdir \"$TOOLS_DIR\"\nfi\n\n# Make sure that packages.config exist.\nif [ ! -f \"$TOOLS_DIR/packages.config\" ]; then\n    echo \"Downloading packages.config...\"\n    curl -Lsfo \"$TOOLS_DIR/packages.config\" https://cakebuild.net/download/bootstrapper/packages\n    if [ $? -ne 0 ]; then\n        echo \"An error occurred while downloading packages.config.\"\n        exit 1\n    fi\nfi\n\n# Download NuGet if it does not exist.\nif [ ! -f \"$NUGET_EXE\" ]; then\n    echo \"Downloading NuGet...\"\n    curl -Lsfo \"$NUGET_EXE\" https://dist.nuget.org/win-x86-commandline/latest/nuget.exe\n    if [ $? -ne 0 ]; then\n        echo \"An error occurred while downloading nuget.exe.\"\n        exit 1\n    fi\nfi\n\n# Restore tools from NuGet.\npushd \"$TOOLS_DIR\" >/dev/null\nif [ ! -f \"$PACKAGES_CONFIG_MD5\" ] || [ \"$( cat \"$PACKAGES_CONFIG_MD5\" | sed 's/\\r$//' )\" != \"$( $MD5_EXE \"$PACKAGES_CONFIG\" | awk '{ print $1 }' )\" ]; then\n    find . -type d ! -name . ! -name 'Cake.Bakery' | xargs rm -rf\nfi\n\nmono \"$NUGET_EXE\" install -ExcludeVersion\nif [ $? -ne 0 ]; then\n    echo \"Could not restore NuGet tools.\"\n    exit 1\nfi\n\n$MD5_EXE \"$PACKAGES_CONFIG\" | awk '{ print $1 }' >| \"$PACKAGES_CONFIG_MD5\"\n\npopd >/dev/null\n\n# Restore addins from NuGet.\nif [ -f \"$ADDINS_PACKAGES_CONFIG\" ]; then\n    pushd \"$ADDINS_DIR\" >/dev/null\n\n    mono \"$NUGET_EXE\" install -ExcludeVersion\n    if [ $? -ne 0 ]; then\n        echo \"Could not restore NuGet addins.\"\n        exit 1\n    fi\n\n    popd >/dev/null\nfi\n\n# Restore modules from NuGet.\nif [ -f \"$MODULES_PACKAGES_CONFIG\" ]; then\n    pushd \"$MODULES_DIR\" >/dev/null\n\n    mono \"$NUGET_EXE\" install -ExcludeVersion\n    if [ $? -ne 0 ]; then\n        echo \"Could not restore NuGet modules.\"\n        exit 1\n    fi\n\n    popd >/dev/null\nfi\n\n# Make sure that Cake has been installed.\nif [ ! -f \"$CAKE_EXE\" ]; then\n    echo \"Could not find Cake.exe at '$CAKE_EXE'.\"\n    exit 1\nfi\n\n# Start Cake\nexec mono \"$CAKE_EXE\" $SCRIPT \"${CAKE_ARGUMENTS[@]}\"\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 2.5400390625,
          "content": "Topshelf - An easy service hosting framework for building Windows services using .NET\r\n=======\r\n\r\nTopshelf is a framework for hosting services written using the .NET framework. The creation of services is simplified, allowing developers to create a simple console application that can be installed as a service using Topshelf. The reason for this is simple: It is far easier to debug a console application than a service. And once the application is tested and ready for production, Topshelf makes it easy to install the application as a service.\r\n\r\n### Develop build\r\n[![Build status](https://ci.appveyor.com/api/projects/status/cjlqe1lg0733c936/branch/develop?svg=true)](https://ci.appveyor.com/project/phatboyg/topshelf)\r\n\r\n# LICENSE\r\nApache 2.0 - see LICENSE\r\n\r\n# INFO\r\n\r\n## Getting started with Topshelf\r\n\r\nGet started in four simple steps!\r\n\r\n<dl>\r\n\t<dt>Step 1 (get the bits):</dt>\r\n\t<dd>\r\n  <p>The easiest way to get Topshelf in your project is to use NuGet.</p>\r\n\t</dd>\r\n</dl>\r\n\r\n### Mailing List\r\n\r\n[Topshelf Discuss](http://groups.google.com/group/topshelf-discuss)\r\n\r\n\r\n### Contributing\r\n\r\n1. Clone\r\n1. Branch\r\n1. Make changes\r\n1. Push\r\n1. Make a pull request\r\n\r\n### Source\r\n\r\n1. Clone the source down to your machine.\r\n   `git clone git://github.com/Topshelf/Topshelf.git`\r\n1. **Important:** Run `build.bat` in order to generate the SolutionVersion.cs file which is otherwise missing.\r\n\t* You must have git on the path in order to do this. (Right click on `Computer` > `Advanced System Settings`, `Advanced` (tab) > `Environment Variables...` > Append the git executable's directory at the end of the PATH environment variable.\r\n1. Edit with Visual Studio 2015 or alternatively edit and run `build.bat`.\r\n1. Topshelf uses the .NET Framework v4.5.2.\r\n\r\n#### Editing in Visual Studio\r\n\r\n1. Run `build.bat` in the root folder.\r\n2. Set Visual Studio Tools -> Options -> Text Editor -> All Languages -> Tabs to use \"Tab Size\" = 4, \"Indent Size\" = 4, and \"Insert Spaces\"\r\n3. Double-click/open the .sln file.\r\n\r\n### Deploying TopShelf with Azure DevOps\r\n\r\nThe [Windows Service Manager](https://marketplace.visualstudio.com/items?itemName=MDSolutions.WindowsServiceManagerWindowsServiceManager) Azure DevOps extension supports TopShelf deployments to a group of target machines or a deployment group target.\r\n\r\n# REQUIREMENTS\r\n\r\nTo run the build, a Visual Studio 2015 compatible environment should be setup.\r\n\r\n# CREDITS\r\nLogo Design by [The Agile Badger](http://www.theagilebadger.com)\r\n\r\nCopyright 2007-2016 Travis Smith, Chris Patterson, Dru Sellers, Henrik Feldt et al. All rights reserved\r\n\r\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}