{
  "metadata": {
    "timestamp": 1736711006333,
    "page": 716,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "PixelVision8/PixelVision8",
      "stars": 1666,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.734375,
          "content": "# Make sure we don't copy the runner files in the OS disk while debugging\r\nContent/Runners/\r\n\r\n\r\nThumbs.db\r\nDesktop.ini\r\n.DS_Store\r\n\r\n# Download this file using PowerShell v3 under Windows with the following comand:\r\n# Invoke-WebRequest https://gist.githubusercontent.com/kmorcinek/2710267/raw/ -OutFile .gitignore\r\n# or wget:\r\n# wget --no-check-certificate http://gist.githubusercontent.com/kmorcinek/2710267/raw/.gitignore\r\n\r\n# User-specific files\r\n*.suo\r\n*.user\r\n*.sln.docstates\r\n\r\nsaves.json\r\n\r\n# Build results\r\n[Dd]ebug/\r\n[Rr]elease/\r\n[Bb]uilds/\r\n[Rr]eleases/\r\n[Ar]tifacts/\r\n[Bb]in/\r\n[Oo]bj/\r\n\r\n# build folder is nowadays used for build scripts and should not be ignored\r\n#build/\r\n\r\n# NuGet Packages\r\n*.nupkg\r\n# The packages folder can be ignored because of Package Restore\r\n**/packages/*\r\n# except build/, which is used as an MSBuild target.\r\n!**/packages/build/\r\n# Uncomment if necessary however generally it will be regenerated when needed\r\n#!**/packages/repositories.config\r\n\r\n# MSTest test Results\r\n[Tt]est[Rr]esult*/\r\n[Bb]uild[Ll]og.*\r\n\r\n*_i.c\r\n*_p.c\r\n*.ilk\r\n*.meta\r\n*.obj\r\n*.pch\r\n*.pdb\r\n*.pgc\r\n*.pgd\r\n*.rsp\r\n*.sbr\r\n*.tlb\r\n*.tli\r\n*.tlh\r\n*.tmp\r\n*.tmp_proj\r\n*.log\r\n*.vspscc\r\n*.vssscc\r\n.builds\r\n*.pidb\r\n*.log\r\n*.scc\r\n\r\n# OS generated files #\r\n.DS_Store*\r\nIcon?\r\n\r\n# Visual C++ cache files\r\nipch/\r\n*.aps\r\n*.ncb\r\n*.opensdf\r\n*.sdf\r\n*.cachefile\r\n\r\n# Visual Studio profiler\r\n*.psess\r\n*.vsp\r\n*.vspx\r\n\r\n# Guidance Automation Toolkit\r\n*.gpState\r\n\r\n# ReSharper is a .NET coding add-in\r\n_ReSharper*/\r\n*.[Rr]e[Ss]harper\r\n\r\n# TeamCity is a build add-in\r\n_TeamCity*\r\n\r\n# DotCover is a Code Coverage Tool\r\n*.dotCover\r\n\r\n# NCrunch\r\n*.ncrunch*\r\n.*crunch*.local.xml\r\n\r\n# Installshield output folder\r\n[Ee]xpress/\r\n\r\n# DocProject is a documentation generator add-in\r\nDocProject/buildhelp/\r\nDocProject/Help/*.HxT\r\nDocProject/Help/*.HxC\r\nDocProject/Help/*.hhc\r\nDocProject/Help/*.hhk\r\nDocProject/Help/*.hhp\r\nDocProject/Help/Html2\r\nDocProject/Help/html\r\n\r\n# Click-Once directory\r\npublish/\r\n\r\n# Publish Web Output\r\n*.Publish.xml\r\n\r\n# Windows Azure Build Output\r\ncsx\r\n*.build.csdef\r\n\r\n# Windows Store app package directory\r\nAppPackages/\r\n\r\n# Others\r\n*.Cache\r\nClientBin/\r\n[Ss]tyle[Cc]op.*\r\n~$*\r\n*~\r\n*.dbmdl\r\n*.[Pp]ublish.xml\r\n*.pfx\r\n*.publishsettings\r\nmodulesbin/\r\ntempbin/\r\n\r\n# EPiServer Site file (VPP)\r\nAppData/\r\n\r\n# RIA/Silverlight projects\r\nGenerated_Code/\r\n\r\n# Backup & report files from converting an old project file to a newer\r\n# Visual Studio version. Backup files are not needed, because we have git ;-)\r\n_UpgradeReport_Files/\r\nBackup*/\r\nUpgradeLog*.XML\r\nUpgradeLog*.htm\r\n\r\n# vim\r\n*.txt~\r\n*.swp\r\n*.swo\r\n\r\n# Temp files when opening LibreOffice on ubuntu\r\n.~lock.*\r\n\r\n# svn\r\n.svn\r\n\r\n# CVS - Source Control\r\n**/CVS/\r\n\r\n# Remainings from resolving conflicts in Source Control\r\n*.orig\r\n\r\n# SQL Server files\r\n**/App_Data/*.mdf\r\n**/App_Data/*.ldf\r\n**/App_Data/*.sdf\r\n\r\n\r\n#LightSwitch generated files\r\nGeneratedArtifacts/\r\n_Pvt_Extensions/\r\nModelManifest.xml\r\n\r\n# =========================\r\n# Windows detritus\r\n# =========================\r\n\r\n# Windows image file caches\r\nThumbs.db\r\nehthumbs.db\r\n\r\n# Folder config file\r\nDesktop.ini\r\n\r\n# Recycle Bin used on file shares\r\n$RECYCLE.BIN/\r\n\r\n# Mac desktop service store files\r\n.DS_Store\r\n\r\n# SASS Compiler cache\r\n.sass-cache\r\n\r\n# Visual Studio 2014 CTP\r\n**/*.sln.ide\r\n\r\n# Visual Studio temp something\r\n.vs/\r\n\r\n# dotnet stuff\r\nproject.lock.json\r\n\r\n# VS 2015+\r\n*.vc.vc.opendb\r\n*.vc.db\r\n\r\n# Rider\r\n.idea/\r\n.run/\r\n\r\n# Visual Studio Code\r\n# .vscode/\r\n\r\n# Output folder used by Webpack or other FE stuff\r\nnode_modules/**\r\n**/node_modules/*\r\n**/wwwroot/*\r\n**/package-lock.json\r\n\r\n# SpecFlow specific\r\n*.feature.cs\r\n*.feature.xlsx.*\r\n*.Specs_*.html\r\n\r\nProperties/**\r\n**/saves.json\r\n**/*saves.json\r\n#####\r\n# End of core ignore list, below put you custom 'per project' settings (patterns or path)\r\n#####\r\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "Build",
          "type": "tree",
          "content": null
        },
        {
          "name": "Content",
          "type": "tree",
          "content": null
        },
        {
          "name": "Docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "Effects",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 2.630859375,
          "content": "Microsoft Public License (MS-PL)\r\n\r\nThis license governs use of the accompanying software. If you use the software, you accept this\r\nlicense. If you do not accept the license, do not use the software.\r\n\r\n1. Definitions\r\n\r\nThe terms \"reproduce,\" \"reproduction,\" \"derivative works,\" and \"distribution\" have the same meaning\r\nhere as under U.S. copyright law.\r\n\r\nA \"contribution\" is the original software, or any additions or changes to the software.\r\n\r\nA \"contributor\" is any person that distributes its contribution under this license.\r\n\r\n\"Licensed patents are a contributor's patent claims that read directly on its contribution.\r\n\r\n2. Grant of Rights\r\n\r\n(A) Copyright Grant- Subject to the terms of this license, including the license conditions and\r\n(limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free\r\n(copyright license to reproduce its contribution, prepare derivative works of its contribution, and\r\n(distribute its contribution or any derivative works that you create.\r\n\r\n(B) Patent Grant- Subject to the terms of this license, including the license conditions and\r\n(limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free\r\n(license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or\r\n(otherwise dispose of its contribution in the software or derivative works of the contribution in\r\n(the software.\r\n\r\n3. Conditions and Limitations\r\n\r\n(A) No Trademark License- This license does not grant you rights to use any contributors' name,\r\n(logo, or trademarks.\r\n\r\n(B) If you bring a patent claim against any contributor over patents that you claim are infringed by\r\n(the software, your patent license from such contributor to the software ends automatically.\r\n\r\n(C) If you distribute any portion of the software, you must retain all copyright, patent, trademark,\r\n(and attribution notices that are present in the software.\r\n\r\n(D) If you distribute any portion of the software in source code form, you may do so only under this\r\n(license by including a complete copy of this license with your distribution. If you distribute any\r\n(portion of the software in compiled or object code form, you may only do so under a license that\r\n(complies with this license.\r\n\r\n(E) The software is licensed \"as-is.\" You bear the risk of using it. The contributors give no\r\n(express warranties, guarantees or conditions. You may have additional consumer rights under your\r\n(local laws which this license cannot change. To the extent permitted under your local laws, the\r\n(contributors exclude the implied warranties of merchantability, fitness for a particular purpose\r\n(and non-infringement."
        },
        {
          "name": "PixelVision8.sln",
          "type": "blob",
          "size": 2.8037109375,
          "content": "ï»¿\nMicrosoft Visual Studio Solution File, Format Version 12.00\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"PixelVision8.CoreDesktop\", \"Projects\\PixelVision8\\PixelVision8.CoreDesktop.csproj\", \"{2590A596-C437-4B7D-A91C-0AD59CB2DBBA}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"PixelVisoin8.Tests\", \"Projects\\Tests\\PixelVisoin8.Tests.csproj\", \"{97F0347F-2A33-4302-9376-C8B46934F154}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"PixelVision8.CSharpRunner\", \"Projects\\CSharpRunner\\PixelVision8.CSharpRunner.csproj\", \"{E466E63A-EF3F-4B0D-A83A-E67B6F7EC0D6}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"PixelVision8.LuaRunner\", \"Projects\\LuaRunner\\PixelVision8.LuaRunner.csproj\", \"{3110A80A-C768-4075-B92B-46300A60A0B9}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"PixelVision8.RoslynRunner\", \"Projects\\RoslynRunner\\PixelVision8.RoslynRunner.csproj\", \"{F8BF76F8-6C53-435D-8CF8-C1AFDFA57226}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{2590A596-C437-4B7D-A91C-0AD59CB2DBBA}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{2590A596-C437-4B7D-A91C-0AD59CB2DBBA}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{2590A596-C437-4B7D-A91C-0AD59CB2DBBA}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{2590A596-C437-4B7D-A91C-0AD59CB2DBBA}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{97F0347F-2A33-4302-9376-C8B46934F154}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{97F0347F-2A33-4302-9376-C8B46934F154}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{97F0347F-2A33-4302-9376-C8B46934F154}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{97F0347F-2A33-4302-9376-C8B46934F154}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{E466E63A-EF3F-4B0D-A83A-E67B6F7EC0D6}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{E466E63A-EF3F-4B0D-A83A-E67B6F7EC0D6}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{E466E63A-EF3F-4B0D-A83A-E67B6F7EC0D6}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{E466E63A-EF3F-4B0D-A83A-E67B6F7EC0D6}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{3110A80A-C768-4075-B92B-46300A60A0B9}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{3110A80A-C768-4075-B92B-46300A60A0B9}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{3110A80A-C768-4075-B92B-46300A60A0B9}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{3110A80A-C768-4075-B92B-46300A60A0B9}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{F8BF76F8-6C53-435D-8CF8-C1AFDFA57226}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{F8BF76F8-6C53-435D-8CF8-C1AFDFA57226}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{F8BF76F8-6C53-435D-8CF8-C1AFDFA57226}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{F8BF76F8-6C53-435D-8CF8-C1AFDFA57226}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\nEndGlobal\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.837890625,
          "content": "# Pixel Vision 8 v2.0 (Archived)\n![Pixel Vision 8](https://github.com/PixelVision8/PixelVision8/workflows/Pixel%20Vision%208/badge.svg)\n\n## Due to a lack of free time over the past year, I've decided to pause the development of PV8 for the foreseeable future. The code is still open source and free for everyone to fork, modify, and use. I hope to return to this project when I can give it more of my attention and thank everyone for their support over the years.\n\nPixel Vision 8's core philosophy is to teach retro game development with streamlined workflows. PV8 is also a platform that standardizes 8-bit fantasy console limitations built on top of a fork of MonoGame, called [MonoVision](https://github.com/PixelVision8/MonoVision). This engine provides a standard set of APIs to create authentic-looking 8-bit games with modern programming languages and workflows. It also allows you to define specific limitations for the resolution, colors, number of sprites on screen, and more. \n\nThere are several different ways to build and run Pixel Vision 8, depending on your choice of language, skill level, and goals. You can always get the latest compiled version on [itch.io](https://pixelvision8.itch.io/pv8) or check out the incremental builds on [github]([https://githu](https://github.com/PixelVision8/PixelVision8/releases/latest)).\n\nThe platform is incredibly modular and built on a \"chip\" system that supports swapping out core functionality with new chips. This allows you to customize it to your own needs. While there are tools and a dedicated OS to help make games, nothing stops you from using your external tools and workflows. In fact, the best way to make Pixel Vision 8 games is with the tools and workflow you are most comfortable with already!\n\n## Disclaimer\n\n[I have been working on Pixel Vision 8 for the past 6+ years](https://jessefreeman.hashnode.dev/the-dark-side-of-supporting-an-open-source-project) and it's still a work in process. I'm doing my best to keep [the docs](https://github.com/PixelVision8/PixelVision8/wiki), [code base](https://github.com/PixelVision8/PixelVision8/tree/master), and [examples](https://github.com/PixelVision8/Examples) as up to date as possible, but to help speed up development, consider all the code in this repo experimental. Please join the [Discord](https://discord.gg/pixelvision8) or subscribe to the new [Tutorial Site](https://hashnode.com/@pixelvision8) to learn more about getting started.\n\n## Quick Start Guide\n\nI've tried my best to make compiling Pixel Vision 8 from the source as easy as possible. While you can learn more about this in the [docs](https://github.com/PixelVision8/PixelVision8/wiki), here is the quickest way to build PV8 from scratch:\n\n> Before you get started, you are going to want to install [.Net 6](https://dotnet.microsoft.com/download/dotnet/6.0), [NodeJS](https://nodejs.org/en/download/), and an IDE like [Visual Studio Code](https://code.visualstudio.com/Download).\n\n1. Clone the main repo `> git clone https://github.com/PixelVision8/PixelVision8.git`\n2. Install the NodeJS dependencies `> npm install`\n3. Run the default Gulp action `> gulp`\n4. Launch the `.dll` manually `dotnet Projects/PixelVision8/bin/Debug/net5.0/Pixel\\ Vision\\ 8.dll`\n\nIf you want to build Pixel Vision 8 executables, you can use the Gulp action `> gulp package`. This will create a new `Releases/Final/` folder, and inside, you'll zip files for Windows, Mac, and Linux. I call the task via a custom GitHub Action to build and upload the PV8 releases to this repo.\n\nFinally, you can use Visual Studio Code to debug a build by running one of the custom tasks included in the `.vscode` folder.\n\n## Runners\n\nA runner is a wrapper for Pixel Vision 8's core code which allows it to run on different platforms. When you compile PV8 from the default Gulp action, it creates a `DesktopRunner` that includes all of the \"bells and whistles.\" You may not need that or want to code a PV8 game closer to the metal. You can find the following runners in the `Project` folder.\n\n1. Pixel Vision 8 Runner - Includes the Lua and Roslyn engines plus a virtual file system, bios, and other hooks to edit games.\n2. CSharp Runner - For building pure C# games without the virtual file system, reloading, or boot tools.\n3. Roslyn Runner - This is a hybrid CSharp Runner that allows you to reload C# games without recompiling.\n4. Lua Runner - For building pure Lua games which support hot reloading but no virtual file system or boot tools.\n5. Unity - This is an experimental runner designed to work inside of Unity.\n\nIf you are working on a Lua or C# game and would like to distribute it without all of the extra Pixel Vision 8 features, you can look at each of the Runner's `.csproj` file and replace the path to the `Empty Disk` with your own game:\n\n```<Game>../../Build/Templates/EmptyDisk</Game>```\n\nThen when you compile the Runner, the game files will be copied into the game's `Content` folder and are automatically loaded when the Runner starts. Pay special attention to how the CSharp Runner is structured because you will need to include all of your game's C# code in addition to copying over the game file for it to work.\n\n## Games\n\nA lot of people ask where they can find example games. You can check out some of my games like [Space Station 8](https://github.com/PixelVision8/SpaceStation8) and [Terminal](https://github.com/PixelVision8/Terminal) in their repos. I've also created a new [Game Repo](https://github.com/PixelVision8/Games) that people can contribute to by submitting a pull request.\n\n## OS\n\nPast versions of Pixel Vision 8 came bundled with an OS and tools installed by default. Suppose you are building PV8 from scratch or using one of the increment releases posted to GitHub. In that case, you can manually boot into the OS by downloading it from the [Pixel Vision OS repo](https://github.com/PixelVision8/OS) and dragging it onto the window. PV8 will remember the last disk it loaded, so you shouldn't have to keep manually booting into the OS unless the system loses a reference to the disk's path or another disk forces the OS disk to eject.\n\n## Credits\n\nPixel Vision 8 was created by Jesse Freeman ([@jessefreeman](http://twitter.com/jessefreeman)) in collaboration with Christina-Antoinette Neofotistou ([@CastPixel](http://twitter.com/CastPixel)) for art, and Christer Kaitila ([@McFunkypants](http://twitter.com/McFunkypants)) for music. \n\nWith additional contributions by the following people:\n\n* Pedro Medeiros\n* Shawn Rakowski\n* Drake Williams\n* Matt Hughson\n* Dean Ellis\n\nAnd special thanks to Jan Rochat, Ethan Shaughnessy, and our other sponsors.\n\n## License\n\nPixel Vision 8 is Licensed under the [Microsoft Public License (MS-PL) License](https://opensource.org/licenses/MS-PL). See the [LICENSE file](https://github.com/PixelVision8/PixelVision8/blob/master/LICENSE.txt) in the project root for complete license information.\n\nPixel Vision 8 is Copyright (c) 2017-2021 Jesse Freeman. All rights reserved.\n"
        },
        {
          "name": "Runners",
          "type": "tree",
          "content": null
        },
        {
          "name": "SDK",
          "type": "tree",
          "content": null
        },
        {
          "name": "gulpfile.js",
          "type": "blob",
          "size": 1.2392578125,
          "content": "const gulp = require('gulp');\nconst requireDir  = require('require-dir');\nconst fs = require('fs');\nrequireDir('./Build/Tasks/', { recurse: true });\n\nvar xpath = require('xpath')\n  , dom = require('xmldom').DOMParser\n\nprocess.env.RELEASE = \"./Releases/\"\n\n// Set the path to the .csproj file\nprocess.env.STAGING = process.env.RELEASE  + \"Source/\"\n\n// Set the path to the .csproj file\nprocess.env.FINAL = process.env.RELEASE  + \"Final/\"\n\nvar xml = fs.readFileSync(process.env.PROJECT, \"utf8\");\nvar xmlDoc = new dom().parseFromString(xml)\n\nprocess.env.APP_NAME = xpath.select(\"string(//AssemblyName)\", xmlDoc);\nprocess.env.NAME_SPACE = xpath.select(\"string(//RootNamespace)\", xmlDoc)\nprocess.env.VERSION = xpath.select(\"string(//Version)\", xmlDoc)\n\nprocess.env.PLATFORMS = \"osx-x64,win-x64,linux-x64\";\nprocess.env.CURRENT_PLATFORM = \"\";\nprocess.env.BUILD_PATH = \"\";\nprocess.env.SCRIPTS = \"./Build/\"\n\n// Create the first round of tasks based on the platform list\nvar tasks = [];\n\nfor (let index = 0; index < process.env.PLATFORMS.split(\",\").length; index++) {\n  tasks.push('build');\n\n  if(index == 0) {\n      tasks.push('mac-bundle');\n  }\n\n  tasks.push('release');\n\n}\n\n// Perform all of the builds and packages up each exe\ngulp.task(\n  'package', \n  gulp.series( tasks )\n);"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.6962890625,
          "content": "{\n  \"name\": \"pixel-vision-8\",\n  \"version\": \"1.0.0\",\n  \"description\": \"All of the dependencies for the PV8 dotnet game builder and packager.\",\n  \"main\": \"gulp.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"Jesse Freeman\",\n  \"license\": \"MS-PL\",\n  \"dependencies\": {\n    \"chokidar\": \"^3.5.2\",\n    \"del\": \"^6.0.0\",\n    \"gulp\": \"^4.0.2\",\n    \"gulp-dotnet-cli\": \"^1.1.0\",\n    \"gulp-markdown-pdf\": \"^8.0.0\",\n    \"gulp-rename\": \"^2.0.0\",\n    \"gulp-replace\": \"^1.1.3\",\n    \"gulp-shell\": \"^0.8.0\",\n    \"gulp-string-replace\": \"^1.1.2\",\n    \"gulp-zip\": \"^5.1.0\",\n    \"require-dir\": \"^1.2.0\",\n    \"tutorial-writer\": \"^0.1.4\",\n    \"xmldom\": \"^0.6.0\",\n    \"xpath\": \"^0.0.32\"\n  }\n}"
        }
      ]
    }
  ]
}