{
  "metadata": {
    "timestamp": 1736710977856,
    "page": 662,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cobbr/SharpSploit",
      "stars": 1763,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.458984375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.216796875,
          "content": "*.DS_Store\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n#*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 4.6640625,
          "content": "# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## Unreleased\n### Added\n- Added FreeModule to SharpSploit.Execution.ManualMap.Map (credit @TheWover)\n- Added option to CallMappedDllModuleExport to not invoke EntryPoint (credit @TheWover)\n- Added SharpSploit.Evasion.ETW class, ETWEventWrite patch (credit @salu90)\n- Added SharpSploit.Execution.Injection.VirtualAllocAllocationTechnique (credit @aus)\n- Added SharpSploit.Enumeration.Clipboard clipboard monitor (credit @shellfarmer)\n- Added LegitSigned option to SharpSploit.Execution.ManualMap.OverloadModule\n\n### Changed\n- Update Mimikatz binaries in embedded resources\n- Update Mimikatz to temporarily allow unsigned overload modules\n\n### Fixed\n- Fixed SharpSploit.Enumeration.Keylogger HookProc from being garbage collected, fixed handling virtual packets\n- Fixed rewriting IAT of modules with no import table (credit @TheWover)\n\n## [v1.6] - 2020-06-08\n### Added\n- Added ManualMapping functions (credit @b33f, @TheWover)\n- Added ModuleOverloading functions (credit @b33f)\n- Added Syscall stub function (credit @b33f)\n- Added SharpSploit.Execution.Injection namespace (credit @TheWover)\n- Added SharpSploit.Pivoting namespace, reverse port forwarding (credit @rasta-mouse)\n- Added error/verbose output to PowerShellExecute function\n\n## [v1.5] - 2019-12-27\n### Added\n- Added Evasion namespace, Amsi class, PatchAmsiScanBuffer function (credit @rasta-mouse)\n- Added Is64Bit Utility property (credit @rasta-mouse)\n- Added Is64BitProcess Host function (credit @TheWover)\n- Added GetProcessorArchitecture, GetParentProcess, GetProcessOwner, IsWow64, and supporting P/Invoke signatures (credit @rasta-mouse)\n- Added Keylogger class (credit @checkymander)\n- Added SCM class, PowerShellRemoting class, Host.GetDacl function (credit @rasta-mouse)\n- Added NetShareEnum functionality for Share Enumeration (credit @checkymander)\n- Added in-memory export parsing (credit @b33f)\n- Added SharpSploit.Execution.PlatformInvoke namespace\n- Added CreateProcessWithToken function (credit @001SPARTaN)\n- Added DynamicInvoke.Generic.GetLibraryAddress() and DynamicInvoke.Generic.GetExportAddress() by ordinal (credit @b33f)\n- Added DynamicInvoke.Generic.GetLibraryAddress() and DynamicInvoke.Generic.GetExportAddress() by MD5 hash (credit @b33f)\n- Added DynamicInvoke.Native.NtAllocateVirtualMemory, NtFreeVirtualMemory, NtQueryVirtualMemory, GetFilenameFromMemoryPointer (credit @b33f)\n\n### Changed\n- Improved DynamicInvoke library (credit @TheWover)\n- Removed GetProcessListing use of WMI to obtain ppid (credit @rasta-mouse)\n- Improved GetProcessListing to include ppid, architecture, owner, and sort by PID (credit @rasta-mouse)\n- Improved SharpSploitResultList ToString() display\n- Moved PInvoke function signatures to PlatformInvoke namespace, enums/structs shared between PlatformInvoke and DynamicInvoke\n- Updated powerkatz dlls, fixed LsaSecrets/LsaCache/SamDump mimikatz shortcuts\n- Update shell execution commands for configurable UseShellExecute property\n- Updated PowerShellRemoting to return command output (credit @rasta-mouse)\n\n## [v1.4] - 2019-08-05\n### Added\n- Added GetDirectoryListing of a specific path\n- Added stderr to output of ShellExecute functions\n- Added ShellCmdExecute function\n- Added registry class with improved read/write functions\n- Added remote registry functions\n- Added GPO enumeration functions (credit @panagioto)\n- Added Autorun, Startup, WMI persistence functions (credit @rasta-mouse)\n- Added DynamicInvoke namespace (credit @TheWover)\n### Changed\n- Updated mimikatz binaries\n- Changed mimikatz function to load in new thread, free input/output pointers\n- Updated registry tests\n\n### Fixed\n- Fixed XML warning, removed angle brackets in comment\n\n## [v1.3] - 2019-03-03\n### Fixed\n- Fixed SharpSploit.Enumeration.Host.ChangeCurrentDirectory() to accept absolute paths\n- Fixed SharpSploit.Enumeration.Host.GetProcessList() retrieves valid ppid values\n\n## [v1.2] - 2019-02-12\n### Added\n- Added CHANGELOG.md\n- Added Assembly EntryPoint execution\n\n## [v1.1] - 2018-11-03\n### Added\n- Added DCOM lateral movement\n- Added nuget package\n\n### Changed\n- Updated README\n\n### Fixed\n- Fixed Domain warnings\n- Fixed XML path\n- Fixed Mimikatz quoting\n\n## v1.0 - 2018-09-20\n- Initial release\n\n[v1.1]: https://github.com/cobbr/SharpSploit/compare/v1.0...v1.1\n[v1.2]: https://github.com/cobbr/SharpSploit/compare/v1.1...v1.2\n[v1.3]: https://github.com/cobbr/SharpSploit/compare/v1.2...v1.3\n[v1.4]: https://github.com/cobbr/SharpSploit/compare/v1.3...v1.4\n[v1.5]: https://github.com/cobbr/SharpSploit/compare/v1.4...v1.5"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.431640625,
          "content": "Copyright 2018, Ryan Cobb (@cobbr_io)\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.8662109375,
          "content": "# SharpSploit\n\n[SharpSploit](https://github.com/cobbr/SharpSploit) is a .NET post-exploitation library written in C# that aims to highlight the attack surface of .NET and make the use of offensive .NET easier for red teamers.\n\n[SharpSploit](https://github.com/cobbr/SharpSploit) is named, in part, as a homage to the [PowerSploit](https://github.com/PowerShellMafia/PowerSploit) project, a personal favorite of mine! While [SharpSploit](https://github.com/cobbr/SharpSploit) does port over some functionality from [PowerSploit](https://github.com/PowerShellMafia/PowerSploit), my intention is **not** at all to create a direct port of [PowerSploit](https://github.com/PowerShellMafia/PowerSploit). [SharpSploit](https://github.com/cobbr/SharpSploit) will be it's own project, albeit with similar goals to [PowerSploit](https://github.com/PowerShellMafia/PowerSploit).\n\n### Intro\n\nYou'll find some details and motivations for the SharpSploit project in this [introductory blog post](https://cobbr.io/SharpSploit.html).\n\n### Documentation\n\nThe complete SharpSploit API docfx documentation is available [here](https://sharpsploit.cobbr.io/api/).\n\nFor an easier to read, high-level quick reference and summary of SharpSploit functionality, refer to the [SharpSploit - Quick Command Reference](https://github.com/cobbr/SharpSploit/blob/master/SharpSploit/SharpSploit%20-%20Quick%20Command%20Reference.md).\n\n### Credits\n\nI owe a ton of credit to a lot of people. Nearly none of `SharpSploit` is truly original work. `SharpSploit` ports many modules written in PowerShell by others, utilizes techniques discovered by others, and borrows ideas and code from other C# projects as well. With that being said, I'd like to thank the following people for contributing to the project (whether they know they did or not :)):\n\n* Justin Bui ([@youslydawg](https://twitter.com/youslydawg)) - For contributing the `SharpSploit.Enumeration.Host.CreateProcessDump()` function.\n* Matt Graeber ([@mattifestation](https://twitter.com/mattifestation)), Will Schroeder ([@harmj0y](https://twitter.com/harmj0y)), and Ruben ([@FuzzySec](https://twitter.com/fuzzysec)) - For their work on [PowerSploit](https://github.com/PowerShellMafia/PowerSploit).\n* Will Schroeder ([@harmj0y](https://twitter.com/harmj0y)) - For the [PowerView](https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1) project.\n* Alexander Leary ([@0xbadjuju](https://twitter.com/0xbadjuju)) - For the [Tokenvator](https://github.com/0xbadjuju/Tokenvator) project.\n* James Foreshaw ([@tiraniddo](https://twitter.com/tiraniddo)) - For his discovery of the token duplication UAC bypass technique documented [here](https://tyranidslair.blogspot.com/2017/05/reading-your-way-around-uac-part-3.html).\n* Matt Nelson ([@enigma0x3](https://twitter.com/enigma0x3)) - For his [Invoke-TokenDuplication](https://github.com/enigma0x3/Misc-PowerShell-Stuff/blob/master/Invoke-TokenDuplication.ps1) implementation of the token duplication UAC bypass, as well his C# shellcode execution method.\n* Benjamin Delpy ([@gentilkiwi](https://twitter.com/gentilkiwi)) - For the [Mimikatz](https://github.com/gentilkiwi/mimikatz) project.\n* Casey Smith ([@subtee](https://twitter.com/subtee)) - For his work on a C# PE Loader.\n* Chris Ross ([@xorrior](https://twitter.com/xorrior)) - For his implementation of a Mimikatz PE Loader found [here](https://github.com/xorrior/Random-CSharpTools/blob/master/DllLoader/DllLoader/PELoader.cs).\n* Matt Graeber ([@mattifestation](https://twitter.com/mattifestation)) - For discovery of the AMSI bypass found [here](https://twitter.com/mattifestation/status/735261120487772160).\n* Lee Christensen ([@tifkin_](https://twitter.com/tifkin_)) - For the discovery of the PowerShell logging bypass found [here](https://github.com/leechristensen/Random/blob/master/CSharp/DisablePSLogging.cs).\n* All the contributors to [www.pinvoke.net](www.pinvoke.net) - For numerous PInvoke signatures.\n"
        },
        {
          "name": "SharpSploit.Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "SharpSploit.sln",
          "type": "blob",
          "size": 2.2265625,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio 15\nVisualStudioVersion = 15.0.27428.2037\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SharpSploit\", \"SharpSploit\\SharpSploit.csproj\", \"{52040049-D7FC-4C72-B6AE-BD2C7AB27DEE}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"SharpSploit.Tests\", \"SharpSploit.Tests\\SharpSploit.Tests\\SharpSploit.Tests.csproj\", \"{7760248F-9247-4206-BE42-A6952AA46DA2}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{52040049-D7FC-4C72-B6AE-BD2C7AB27DEE}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{52040049-D7FC-4C72-B6AE-BD2C7AB27DEE}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{52040049-D7FC-4C72-B6AE-BD2C7AB27DEE}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{52040049-D7FC-4C72-B6AE-BD2C7AB27DEE}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{7760248F-9247-4206-BE42-A6952AA46DA2}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{7760248F-9247-4206-BE42-A6952AA46DA2}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{7760248F-9247-4206-BE42-A6952AA46DA2}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{7760248F-9247-4206-BE42-A6952AA46DA2}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{A2418BEE-706B-42FB-B316-A3C2080E3C89}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{A2418BEE-706B-42FB-B316-A3C2080E3C89}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{A2418BEE-706B-42FB-B316-A3C2080E3C89}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{A2418BEE-706B-42FB-B316-A3C2080E3C89}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{B84548DC-D926-4B39-8293-FA0BDEF34D49}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{B84548DC-D926-4B39-8293-FA0BDEF34D49}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{B84548DC-D926-4B39-8293-FA0BDEF34D49}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{B84548DC-D926-4B39-8293-FA0BDEF34D49}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {99F30681-7173-4AC8-A6C5-5CED0503BAB5}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "SharpSploit",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}