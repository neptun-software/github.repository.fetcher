{
  "metadata": {
    "timestamp": 1736710706308,
    "page": 86,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ExcelDataReader/ExcelDataReader",
      "stars": 4037,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 9.2158203125,
          "content": "# Remove the line below if you want to inherit .editorconfig settings from higher directories\nroot = true\n\n# C# files\n[*.cs]\n\n#### Core EditorConfig Options ####\n\n# Indentation and spacing\nindent_size = 4\nindent_style = space\ntab_width = 4\n\n# New line preferences\nend_of_line = crlf\ninsert_final_newline = false\n\n#### .NET Coding Conventions ####\n\n# Organize usings\ndotnet_separate_import_directive_groups = false\ndotnet_sort_system_directives_first = true\n\n# this. and Me. preferences\ndotnet_style_qualification_for_event = false:silent\ndotnet_style_qualification_for_field = false:silent\ndotnet_style_qualification_for_method = false:silent\ndotnet_style_qualification_for_property = false:silent\n\n# Language keywords vs BCL types preferences\ndotnet_style_predefined_type_for_locals_parameters_members = true:silent\ndotnet_style_predefined_type_for_member_access = true:silent\n\n# Parentheses preferences\ndotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent\ndotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent\ndotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent\ndotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent\n\n# Modifier preferences\ndotnet_style_require_accessibility_modifiers = for_non_interface_members:silent\n\n# Expression-level preferences\ncsharp_style_deconstructed_variable_declaration = true:suggestion\ncsharp_style_inlined_variable_declaration = true:suggestion\ncsharp_style_throw_expression = true:suggestion\ndotnet_style_coalesce_expression = true:suggestion\ndotnet_style_collection_initializer = true:suggestion\ndotnet_style_explicit_tuple_names = true:suggestion\ndotnet_style_null_propagation = true:suggestion\ndotnet_style_object_initializer = true:suggestion\ndotnet_style_prefer_auto_properties = true:silent\ndotnet_style_prefer_compound_assignment = true:suggestion\ndotnet_style_prefer_conditional_expression_over_assignment = true:silent\ndotnet_style_prefer_conditional_expression_over_return = true:silent\ndotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion\ndotnet_style_prefer_inferred_tuple_names = true:suggestion\ndotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion\n\n# Field preferences\ndotnet_style_readonly_field = true:suggestion\n\n# Parameter preferences\ndotnet_code_quality_unused_parameters = all:suggestion\n\n#### C# Coding Conventions ####\n\n# var preferences\ncsharp_style_var_elsewhere = false:silent\ncsharp_style_var_for_built_in_types = false:silent\ncsharp_style_var_when_type_is_apparent = false:silent\n\n# Expression-bodied members\ncsharp_style_expression_bodied_accessors = true:silent\ncsharp_style_expression_bodied_constructors = false:silent\ncsharp_style_expression_bodied_indexers = true:silent\ncsharp_style_expression_bodied_lambdas = true:silent\ncsharp_style_expression_bodied_local_functions = false:silent\ncsharp_style_expression_bodied_methods = false:silent\ncsharp_style_expression_bodied_operators = false:silent\ncsharp_style_expression_bodied_properties = true:silent\n\n# Pattern matching preferences\ncsharp_style_pattern_matching_over_as_with_null_check = true:suggestion\ncsharp_style_pattern_matching_over_is_with_cast_check = true:suggestion\ncsharp_style_prefer_switch_expression = true:suggestion\n\n# Null-checking preferences\ncsharp_style_conditional_delegate_call = true:suggestion\n\n# Modifier preferences\ncsharp_prefer_static_local_function = true:suggestion\ncsharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async\n\n# Code-block preferences\ncsharp_prefer_braces = true:silent\ncsharp_prefer_simple_using_statement = true:suggestion\n\n# Expression-level preferences\ncsharp_prefer_simple_default_expression = true:suggestion\ncsharp_style_pattern_local_over_anonymous_function = true:suggestion\ncsharp_style_prefer_index_operator = true:suggestion\ncsharp_style_prefer_range_operator = true:suggestion\ncsharp_style_unused_value_assignment_preference = discard_variable:suggestion\ncsharp_style_unused_value_expression_statement_preference = discard_variable:silent\n\n# 'using' directive preferences\ncsharp_using_directive_placement = outside_namespace:silent\n\n# Namespace preferences\ncsharp_style_namespace_declarations = file_scoped:warning\n\n#### C# Formatting Rules ####\n\n# New line preferences\ncsharp_new_line_before_catch = true\ncsharp_new_line_before_else = true\ncsharp_new_line_before_finally = true\ncsharp_new_line_before_members_in_anonymous_types = true\ncsharp_new_line_before_members_in_object_initializers = true\ncsharp_new_line_before_open_brace = all\ncsharp_new_line_between_query_expression_clauses = true\n\n# Indentation preferences\ncsharp_indent_block_contents = true\ncsharp_indent_braces = false\ncsharp_indent_case_contents = true\ncsharp_indent_case_contents_when_block = true\ncsharp_indent_labels = no_change\ncsharp_indent_switch_labels = true\n\n# Space preferences\ncsharp_space_after_cast = false\ncsharp_space_after_colon_in_inheritance_clause = true\ncsharp_space_after_comma = true\ncsharp_space_after_dot = false\ncsharp_space_after_keywords_in_control_flow_statements = true\ncsharp_space_after_semicolon_in_for_statement = true\ncsharp_space_around_binary_operators = before_and_after\ncsharp_space_around_declaration_statements = false\ncsharp_space_before_colon_in_inheritance_clause = true\ncsharp_space_before_comma = false\ncsharp_space_before_dot = false\ncsharp_space_before_open_square_brackets = false\ncsharp_space_before_semicolon_in_for_statement = false\ncsharp_space_between_empty_square_brackets = false\ncsharp_space_between_method_call_empty_parameter_list_parentheses = false\ncsharp_space_between_method_call_name_and_opening_parenthesis = false\ncsharp_space_between_method_call_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_empty_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_name_and_open_parenthesis = false\ncsharp_space_between_method_declaration_parameter_list_parentheses = false\ncsharp_space_between_parentheses = false\ncsharp_space_between_square_brackets = false\n\n# Wrapping preferences\ncsharp_preserve_single_line_blocks = true\ncsharp_preserve_single_line_statements = true\n\n#### Naming styles ####\n\n# Naming rules\n\ndotnet_naming_rule.interface_should_be_begins_with_i.severity = suggestion\ndotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface\ndotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i\n\ndotnet_naming_rule.types_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.types_should_be_pascal_case.symbols = types\ndotnet_naming_rule.types_should_be_pascal_case.style = pascal_case\n\ndotnet_naming_rule.non_field_members_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members\ndotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case\n\ndotnet_naming_rule.static_field_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.static_field_should_be_pascal_case.symbols = static_field\ndotnet_naming_rule.static_field_should_be_pascal_case.style = pascal_case\n\ndotnet_naming_rule.private_or_internal_field_should_be_begins_with__.severity = suggestion\ndotnet_naming_rule.private_or_internal_field_should_be_begins_with__.symbols = private_or_internal_field\ndotnet_naming_rule.private_or_internal_field_should_be_begins_with__.style = begins_with__\n\n# Symbol specifications\n\ndotnet_naming_symbols.interface.applicable_kinds = interface\ndotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal\ndotnet_naming_symbols.interface.required_modifiers = \n\ndotnet_naming_symbols.static_field.applicable_kinds = field\ndotnet_naming_symbols.static_field.applicable_accessibilities = public, internal, private, protected, protected_internal\ndotnet_naming_symbols.static_field.required_modifiers = static\n\ndotnet_naming_symbols.private_or_internal_field.applicable_kinds = field\ndotnet_naming_symbols.private_or_internal_field.applicable_accessibilities = internal, private\ndotnet_naming_symbols.private_or_internal_field.required_modifiers = \n\ndotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum\ndotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal\ndotnet_naming_symbols.types.required_modifiers = \n\ndotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method\ndotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal\ndotnet_naming_symbols.non_field_members.required_modifiers = \n\n# Naming styles\n\ndotnet_naming_style.pascal_case.required_prefix = \ndotnet_naming_style.pascal_case.required_suffix = \ndotnet_naming_style.pascal_case.word_separator = \ndotnet_naming_style.pascal_case.capitalization = pascal_case\n\ndotnet_naming_style.begins_with_i.required_prefix = I\ndotnet_naming_style.begins_with_i.required_suffix = \ndotnet_naming_style.begins_with_i.word_separator = \ndotnet_naming_style.begins_with_i.capitalization = pascal_case\n\ndotnet_naming_style.begins_with__.required_prefix = _\ndotnet_naming_style.begins_with__.required_suffix = \ndotnet_naming_style.begins_with__.word_separator = \ndotnet_naming_style.begins_with__.capitalization = camel_case\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.5087890625,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\nx64/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\nartifacts/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n#NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n*.lock.json\n/.vs/\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding addin-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n*.ncrunch*\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n\n# NuGet Packages Directory\npackages/\n## TODO: If the tool you use requires repositories.config uncomment the next line\n#!packages/repositories.config\n\n# Enable \"build/\" folder in the NuGet Packages folder since NuGet packages use it for MSBuild targets\n# This line needs to be after the ignore of the build folder (and the packages folder if the line above has been uncommented)\n!packages/build/\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n"
        },
        {
          "name": ".globalconfig",
          "type": "blob",
          "size": 0.671875,
          "content": "# Top level entry required to mark this as a global AnalyzerConfig file\nis_global = true\n\n# StyleCop Analyzers\ndotnet_diagnostic.SA0001.severity = none\ndotnet_diagnostic.SA1028.severity = none\ndotnet_diagnostic.SA1101.severity = none\ndotnet_diagnostic.SA1308.severity = none\ndotnet_diagnostic.SX1308.severity = warning\ndotnet_diagnostic.SA1309.severity = none\ndotnet_diagnostic.SA1407.severity = none\ndotnet_diagnostic.SA1408.severity = none\ndotnet_diagnostic.SA1413.severity = none\ndotnet_diagnostic.SA1503.severity = none\ndotnet_diagnostic.SA1611.severity = none\ndotnet_diagnostic.SA1633.severity = none\ndotnet_diagnostic.SA1636.severity = none\ndotnet_diagnostic.SA1652.severity = none\n"
        },
        {
          "name": "Directory.build.props",
          "type": "blob",
          "size": 2.5,
          "content": "<Project>\n  <PropertyGroup>\n    <Authors>ExcelDataReader developers</Authors>\n    <LangVersion>12.0</LangVersion>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <UseArtifactsOutput>true</UseArtifactsOutput>\n    <ArtifactsPath>$(MSBuildThisFileDirectory)artifacts</ArtifactsPath>\n  </PropertyGroup>\n\n  <PropertyGroup Condition=\"'$(MSBuildProjectName)' == 'ExcelDataReader' OR '$(MSBuildProjectName)' == 'ExcelDataReader.DataSet'\">\n    <VersionPrefix>3.8.0</VersionPrefix>\n    <TargetFrameworks>net462;netstandard2.0;netstandard2.1;net8.0</TargetFrameworks>\n    <AnalysisLevel>latest-recommended</AnalysisLevel>\n    <AssemblyOriginatorKeyFile>..\\ExcelDataReader.snk</AssemblyOriginatorKeyFile>\n    <SignAssembly>true</SignAssembly>\n    <PublicSign Condition=\" '$(OS)' != 'Windows_NT' \">true</PublicSign>\n    <PackageTags>excel;xls;xlsx;dataset</PackageTags>\n    <PackageIcon>ExcelDataReader.png</PackageIcon>\n    <PackageProjectUrl>https://github.com/ExcelDataReader/ExcelDataReader</PackageProjectUrl>\n    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>\n    <GenerateDocumentationFile>true</GenerateDocumentationFile>\n    <PublishRepositoryUrl>true</PublishRepositoryUrl>\n    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\n    <PackageReadmeFile>README.md</PackageReadmeFile>\n  </PropertyGroup>\n  \n  <ItemGroup Condition=\"'$(MSBuildProjectName)' == 'ExcelDataReader' OR '$(MSBuildProjectName)' == 'ExcelDataReader.DataSet'\">\n    <None Include=\"..\\ExcelDataReader.snk\" Link=\"ExcelDataReader.snk\" />\n    <None Include=\"..\\ExcelDataReader.png\" Pack=\"true\" PackagePath=\"\\\" />\n    <None Include=\"$(MSBuildThisFileDirectory)README.md\" Link=\"README.md\" Pack=\"true\" PackagePath=\"\\\"/>\n\n    <PackageReference Include=\"System.ValueTuple\" Version=\"4.5.0\" Condition=\"'$(TargetFramework)'=='net462'\"/>\n    <PackageReference Include=\"PolySharp\" Version=\"1.14.1\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>\n    </PackageReference>\n  </ItemGroup>\n\n  <ItemGroup>\n    <AdditionalFiles Include=\"$(MSBuildThisFileDirectory)stylecop.json\" Link=\"stylecop.json\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"StyleCop.Analyzers\" Version=\"1.2.0-beta.556\" PrivateAssets=\"All\" />\n    <PackageReference Include=\"Microsoft.SourceLink.GitHub\" Version=\"8.0.0\" PrivateAssets=\"All\" />\n  </ItemGroup>\n\n</Project>\n"
        },
        {
          "name": "ExcelDataReader.sln",
          "type": "blob",
          "size": 3.4169921875,
          "content": "﻿\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio Version 17\r\nVisualStudioVersion = 17.4.33205.214\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{537D3BEA-4A18-4381-A955-DF762D21E100}\"\r\n\tProjectSection(SolutionItems) = preProject\r\n\t\tglobal.json = global.json\r\n\tEndProjectSection\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ExcelDataReader\", \"src\\ExcelDataReader\\ExcelDataReader.csproj\", \"{627CD303-4CE5-4300-8BD1-0FCF143D4874}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ExcelDataReader.Tests\", \"src\\ExcelDataReader.Tests\\ExcelDataReader.Tests.csproj\", \"{A90F5580-605E-4DA6-8997-877EB8F7D024}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ExcelDataReader.DataSet\", \"src\\ExcelDataReader.DataSet\\ExcelDataReader.DataSet.csproj\", \"{061F5E1D-23A7-4744-BF2A-54AAFC5EFE70}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ExcelDataReader.Sample\", \"src\\ExcelDataReader.Sample\\ExcelDataReader.Sample.csproj\", \"{BCE486DF-3DA2-42A2-BF38-376B17CEF434}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ExcelDataReader.Benchmarks\", \"src\\ExcelDataReader.Benchmarks\\ExcelDataReader.Benchmarks.csproj\", \"{A40BE62A-B8AE-44D1-8E97-DCB4DA8B8F17}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{627CD303-4CE5-4300-8BD1-0FCF143D4874}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{627CD303-4CE5-4300-8BD1-0FCF143D4874}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{627CD303-4CE5-4300-8BD1-0FCF143D4874}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{627CD303-4CE5-4300-8BD1-0FCF143D4874}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{A90F5580-605E-4DA6-8997-877EB8F7D024}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{A90F5580-605E-4DA6-8997-877EB8F7D024}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{A90F5580-605E-4DA6-8997-877EB8F7D024}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{A90F5580-605E-4DA6-8997-877EB8F7D024}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{061F5E1D-23A7-4744-BF2A-54AAFC5EFE70}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{061F5E1D-23A7-4744-BF2A-54AAFC5EFE70}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{061F5E1D-23A7-4744-BF2A-54AAFC5EFE70}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{061F5E1D-23A7-4744-BF2A-54AAFC5EFE70}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{BCE486DF-3DA2-42A2-BF38-376B17CEF434}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{BCE486DF-3DA2-42A2-BF38-376B17CEF434}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{BCE486DF-3DA2-42A2-BF38-376B17CEF434}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{BCE486DF-3DA2-42A2-BF38-376B17CEF434}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{A40BE62A-B8AE-44D1-8E97-DCB4DA8B8F17}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{A40BE62A-B8AE-44D1-8E97-DCB4DA8B8F17}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{A40BE62A-B8AE-44D1-8E97-DCB4DA8B8F17}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{A40BE62A-B8AE-44D1-8E97-DCB4DA8B8F17}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {80B8A8D2-CD7F-499C-8A39-898C846DF211}\r\n\tEndGlobalSection\r\nEndGlobal\r\n"
        },
        {
          "name": "ExcelDataReader.sln.DotSettings",
          "type": "blob",
          "size": 1.2197265625,
          "content": "﻿<wpf:ResourceDictionary xml:space=\"preserve\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:s=\"clr-namespace:System;assembly=mscorlib\" xmlns:ss=\"urn:shemas-jetbrains-com:settings-storage-xaml\" xmlns:wpf=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=BOF/@EntryIndexedValue\">BOF</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=MSO/@EntryIndexedValue\">MSO</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=RC/@EntryIndexedValue\">RC</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=RK/@EntryIndexedValue\">RK</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=XF/@EntryIndexedValue\">XF</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=PrivateInstanceFields/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"_\" Suffix=\"\" Style=\"aaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=PrivateStaticFields/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"aaBb\" /&gt;</s:String></wpf:ResourceDictionary>"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0556640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 ExcelDataReader\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.2568359375,
          "content": "# ExcelDataReader\n\n[![NuGet](https://img.shields.io/nuget/v/ExcelDataReader.svg)](https://www.nuget.org/packages/ExcelDataReader)\n\nLightweight and fast library written in C# for reading Microsoft Excel files (2.0-2021, 365).\n\nPlease feel free to fork and submit pull requests to the develop branch.\n\nIf you are reporting an issue it is really useful if you can supply an example Excel file as this makes debugging much easier and without it we may not be able to resolve any problems.\n\n## Continuous integration\n\n| Branch  | Build status |\n|---------|--------------|\n| develop | [![Build status](https://ci.appveyor.com/api/projects/status/ii6hbs9otpbg1nqh/branch/develop?svg=true)](https://ci.appveyor.com/project/andersnm/exceldatareader/branch/develop) |\n| master  | [![Build status](https://ci.appveyor.com/api/projects/status/ii6hbs9otpbg1nqh/branch/master?svg=true)](https://ci.appveyor.com/project/andersnm/exceldatareader/branch/master) |\n\n## Supported file formats and versions\n\n| File Type | Container Format | File Format | Excel Version(s) |\n| --------- | ---------------- | ----------- | ---------------- |\n| .xlsx     | ZIP, CFB+ZIP     | OpenXml     | 2007 and newer |\n| .xlsb     | ZIP, CFB         | OpenXml     | 2007 and newer |\n| .xls      | CFB              | BIFF8       | 97, 2000, XP, 2003<br>98, 2001, v.X, 2004 (Mac) |\n| .xls      | CFB              | BIFF5       | 5.0, 95 |\n| .xls      | -                | BIFF4       | 4.0 |\n| .xls      | -                | BIFF3       | 3.0 |\n| .xls      | -                | BIFF2       | 2.0, 2.2 |\n| .csv      | -                | CSV         | (All) |\n\n## Finding the binaries\n\nIt is recommended to use NuGet through the VS Package Manager Console `Install-Package <package>` or using the VS \"Manage NuGet Packages...\" extension. \n\nAs of ExcelDataReader version 3.0, the project was split into multiple packages:\n\nInstall the `ExcelDataReader` base package to use the \"low level\" reader interface. Compatible with net462, netstandard2.0 and netstandard2.1.\n\nInstall the `ExcelDataReader.DataSet` extension package to use the `AsDataSet()` method to populate a `System.Data.DataSet`. This will also pull in the base package. Compatible with net462, netstandard2.0 and netstandard2.1.\n\n## How to use\n\n```c#\nusing (var stream = File.Open(filePath, FileMode.Open, FileAccess.Read))\n{\n    // Auto-detect format, supports:\n    //  - Binary Excel files (2.0-2003 format; *.xls)\n    //  - OpenXml Excel files (2007 format; *.xlsx, *.xlsb)\n    using (var reader = ExcelReaderFactory.CreateReader(stream))\n    {\n        // Choose one of either 1 or 2:\n\n        // 1. Use the reader methods\n        do\n        {\n            while (reader.Read())\n            {\n                // reader.GetDouble(0);\n            }\n        } while (reader.NextResult());\n\n        // 2. Use the AsDataSet extension method\n        var result = reader.AsDataSet();\n\n        // The result of each spreadsheet is in result.Tables\n    }\n}\n```\n\n### Reading .CSV files\n\nUse `ExcelReaderFactory.CreateCsvReader` instead of `CreateReader` to parse a stream of plain text with comma separated values.\n\nSee also the configuration options `FallbackEncoding` and `AutodetectSeparators`.\n\nThe input CSV is always parsed once completely to set FieldCount, RowCount, Encoding, Separator (or twice if the CSV lacks BOM and is not UTF8), and then parsed once again while iterating the row records. Throws `System.Text.DecoderFallbackException` if the input cannot be parsed with the specified encoding.\n\nThe reader returns all CSV field values as strings and makes no attempts to convert the data to numbers or dates. This caller is responsible for interpreting the CSV data.\n\n### Using the reader methods\n\nThe `AsDataSet()` extension method is a convenient helper for quickly getting the data, but is not always available or desirable to use. IExcelDataReader extends the `System.Data.IDataReader` and `IDataRecord` interfaces to navigate and retrieve data at a lower level. The most important reader methods and properties:\n\n\n| Method                                                                                  | Property                                                                                                                                                                                                                |\n|-----------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `Read()`                                                                                | reads a row from the current sheet.                                                                                                                                                                                     |\n| `NextResult()`                                                                          | advances the cursor to the next sheet.                                                                                                                                                                                  |\n| `ResultsCount`                                                                          | returns the number of sheets in the current workbook.                                                                                                                                                                   |\n| `Name`                                                                                  | returns the name of the current sheet.                                                                                                                                                                                  |\n| `CodeName`                                                                              | returns the VBA code name identifier of the current sheet.                                                                                                                                                              |\n| `FieldCount`                                                                            | returns the number of columns in the current sheet.                                                                                                                                                                     |\n| `RowCount`                                                                              | returns the number of rows in the current sheet. This includes terminal empty rows which are otherwise excluded by AsDataSet(). Throws `InvalidOperationException` on CSV files when used with `AnalyzeInitialCsvRows`. |\n| `HeaderFooter`                                                                          | returns an object with information about the headers and footers, or `null` if there are none.                                                                                                                          |\n| `MergeCells`                                                                            | returns an array of merged cell ranges in the current sheet.                                                                                                                                                            |\n| `RowHeight`                                                                             | returns the visual height of the current row in points. May be 0 if the row is hidden.                                                                                                                                  |\n| `GetColumnWidth()`                                                                      | returns the width of a column in character units. May be 0 if the column is hidden.                                                                                                                                     |\n| `GetFieldType()`                                                                        | returns the type of a value in the current row. Always one of the types supported by Excel: `double`, `int`, `bool`, `DateTime`, `TimeSpan`, `string`, or `null` if there is no value.                                  |\n| `IsDBNull()`                                                                            | checks if a value in the current row is null.                                                                                                                                                                           |\n| `GetValue()`                                                                            | returns a value from the current row as an `object`, or `null` if there is no value.                                                                                                                                    |\n| `GetDouble()`<br/>`GetInt32()`<br/>`GetBoolean()`<br/>`GetDateTime()`<br/>`GetString()` | return a value from the current row cast to their respective type.                                                                                                                                                      |\n| `GetNumberFormatString()`                                                               | returns a string containing the formatting codes for a value in the current row, or `null` if there is no value. See also the Formatting section below.                                                                 |\n| `GetNumberFormatIndex()`                                                                | returns the number format index for a value in the current row. Index values below 164 refer to built-in number formats, otherwise indicate a custom number format.                                                     |\n| `GetCellStyle()`                                                                        | returns an object containing style information for a cell in the current row: indent, horizontal alignment, hidden, locked.                                                                                             |\n| The typed `Get*()` methods                                                              | throw `InvalidCastException` unless the types match exactly.                                                                                                                                                            |\n\n### CreateReader() configuration options\n\nThe `ExcelReaderFactory.CreateReader()`, `CreateBinaryReader()`, `CreateOpenXmlReader()`, `CreateCsvReader()` methods accept an optional configuration object to modify the behavior of the reader:\n\n```c#\nvar reader = ExcelReaderFactory.CreateReader(stream, new ExcelReaderConfiguration()\n{\n    // Gets or sets the encoding to use when the input XLS lacks a CodePage\n    // record, or when the input CSV lacks a BOM and does not parse as UTF8. \n    // Default: cp1252 (XLS BIFF2-5 and CSV only)\n    FallbackEncoding = Encoding.GetEncoding(1252),\n\n    // Gets or sets the password used to open password protected workbooks.\n    Password = \"password\",\n\n    // Gets or sets an array of CSV separator candidates. The reader \n    // autodetects which best fits the input data. Default: , ; TAB | # \n    // (CSV only)\n    AutodetectSeparators = new char[] { ',', ';', '\\t', '|', '#' },\n\n    // Gets or sets a value indicating whether to leave the stream open after\n    // the IExcelDataReader object is disposed. Default: false\n    LeaveOpen = false,\n\n    // Gets or sets a value indicating the number of rows to analyze for\n    // encoding, separator and field count in a CSV. When set, this option\n    // causes the IExcelDataReader.RowCount property to throw an exception.\n    // Default: 0 - analyzes the entire file (CSV only, has no effect on other\n    // formats)\n    AnalyzeInitialCsvRows = 0,\n});\n```\n\n### AsDataSet() configuration options\n\nThe `AsDataSet()` method accepts an optional configuration object to modify the behavior of the DataSet conversion:\n\n```c#\nvar result = reader.AsDataSet(new ExcelDataSetConfiguration()\n{\n    // Gets or sets a value indicating whether to set the DataColumn.DataType \n    // property in a second pass.\n    UseColumnDataType = true,\n\n    // Gets or sets a callback to determine whether to include the current sheet\n    // in the DataSet. Called once per sheet before ConfigureDataTable.\n    FilterSheet = (tableReader, sheetIndex) => true,\n\n    // Gets or sets a callback to obtain configuration options for a DataTable. \n    ConfigureDataTable = (tableReader) => new ExcelDataTableConfiguration()\n    {\n        // Gets or sets a value indicating the prefix of generated column names.\n        EmptyColumnNamePrefix = \"Column\",\n\n        // Gets or sets a value indicating whether to use a row from the \n        // data as column names.\n        UseHeaderRow = false,\n\n        // Gets or sets a callback to determine which row is the header row. \n        // Only called when UseHeaderRow = true.\n        ReadHeaderRow = (rowReader) => {\n            // F.ex skip the first row and use the 2nd row as column headers:\n            rowReader.Read();\n        },\n\n        // Gets or sets a callback to determine whether to include the \n        // current row in the DataTable.\n        FilterRow = (rowReader) => {\n            return true;\n        },\n\n        // Gets or sets a callback to determine whether to include the specific\n        // column in the DataTable. Called once per column after reading the \n        // headers.\n        FilterColumn = (rowReader, columnIndex) => {\n            return true;\n        }\n    }\n});\n```\nSetting up `AsDataSet()` configuration, use the FilterRow callback to implement a \"progress indicator\" while loading, e.g.:\n\n```c#\nvar result = reader.AsDataSet(new ExcelDataSetConfiguration()\n{\n    ConfigureDataTable = (tableReader) => new ExcelDataTableConfiguration()\n    {\n        FilterRow = (rowReader) => {\n            int progress = (int)Math.Ceiling((decimal)rowReader.Depth / (decimal)rowReader.RowCount * (decimal)100);\n            // progress is in the range 0..100\n            return true;\n        }\n    }\n});\n```\n\n## Formatting\n\nExcelDataReader does not support formatting directly. Users may retreive the number format string for a cell through `IExcelDataReader.GetNumberFormatString(i)` and use the third party ExcelNumberFormat library for formatting purposes.\n\nExample helper method using ExcelDataReader and ExcelNumberFormat to format a value:\n\n```c#\nstring GetFormattedValue(IExcelDataReader reader, int columnIndex, CultureInfo culture)\n{\n    var value = reader.GetValue(columnIndex);\n    var formatString = reader.GetNumberFormatString(columnIndex);\n    if (formatString != null)\n    {\n        var format = new NumberFormat(formatString);\n        return format.Format(value, culture);\n    }\n    return Convert.ToString(value, culture);\n}\n```\n\nSee also:\n- https://github.com/andersnm/ExcelNumberFormat\n- https://www.nuget.org/packages/ExcelNumberFormat\n\n## Important note when upgrading from ExcelDataReader 2.x\n\nExcelDataReader 3 had some breaking changes, and older code may produce error messages similar to:\n\n```\n'IExcelDataReader' does not contain a definition for 'AsDataSet'...\n'IExcelDataReader' does not contain a definition for 'IsFirstRowAsColumnNames'...\n```\n\nTo fix:\n\n1. Make sure to rename any `Excel` namespace references in the code to the new namespace `ExcelDataReader`\n\n2. Make sure the project has a reference to the `ExcelDataReader.DataSet` package to use `AsDataSet()`\n\n3. Remove the line of code with `IsFirstRowAsColumnNames` and change the call to AsDataSet() to something like this:\n\n```c#\nvar result = reader.AsDataSet(new ExcelDataSetConfiguration()\n{\n    ConfigureDataTable = (_) => new ExcelDataTableConfiguration()\n    {\n        UseHeaderRow = true\n    }\n});\n```\n\n## Important note on .NET Core\n\nBy default, ExcelDataReader throws a NotSupportedException \"No data is available for encoding 1252.\" on .NET Core and .NET 5.0 or later.\n\nTo fix, add a dependency to the package `System.Text.Encoding.CodePages` and then add code to register the code page provider during application initialization (f.ex in Startup.cs):\n\n```c#\nSystem.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);\n```\n\nThis is required to parse strings in binary BIFF2-5 Excel documents encoded with DOS-era code pages. These encodings are registered by default in the full .NET Framework, but not on .NET Core and .NET 5.0 or later.\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.11328125,
          "content": "version: build-{build}\nskip_tags: true\nimage: Visual Studio 2022\nconfiguration: Release\nbuild_script:\n- ps: |-\n    If ($Env:APPVEYOR_REPO_BRANCH -eq \"master\") {\n      $Env:VERSION_SUFFIX=\"\"\n    } Else {\n      $Env:VERSION_SUFFIX=$Env:APPVEYOR_REPO_BRANCH + $Env:APPVEYOR_BUILD_NUMBER.PadLeft(5, \"0\")\n    }\n    msbuild /t:Restore /p:VersionSuffix=$Env:VERSION_SUFFIX\n    msbuild ExcelDataReader.sln /verbosity:minimal /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\" /p:Configuration=$Env:CONFIGURATION /p:VersionSuffix=$Env:VERSION_SUFFIX /p:TreatWarningsAsErrors=true\ntest_script:\n- ps: |-\n    # run tests\n    dotnet test src\\ExcelDataReader.Tests\\ExcelDataReader.Tests.csproj --no-build --logger \"trx\" -c $Env:CONFIGURATION --results-directory artifacts\\testresults\n    $testexitcode = $LastExitCode\n    # upload results to AppVeyor\n    $wc = New-Object 'System.Net.WebClient'\n    Resolve-Path .\\artifacts\\testresults\\*.trx | % { $wc.UploadFile(\"https://ci.appveyor.com/api/testresults/mstest/$($env:APPVEYOR_JOB_ID)\", \"$_\") }\n    if ($testexitcode -ne 0)\n    {\n      exit 1\n    }\nartifacts:\n- path: '**\\*.nupkg'\n"
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.0263671875,
          "content": "{\"projects\":[\"src\",\"test\"]}"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "stylecop.json",
          "type": "blob",
          "size": 0.6103515625,
          "content": "{\n  \"$schema\": \"https://raw.githubusercontent.com/DotNetAnalyzers/StyleCopAnalyzers/master/StyleCop.Analyzers/StyleCop.Analyzers/Settings/stylecop.schema.json\",\n  \"settings\": {\n    \"documentationRules\": {\n      \"xmlHeader\": false,\n      \"fileNamingConvention\": \"stylecop\",\n      \"documentInterfaces\": false,\n      \"documentExposedElements\": false,\n      \"documentInternalElements\": false,\n      \"documentPrivateElements\": false,\n      \"documentPrivateFields\": false\n    },\n    \"orderingRules\": {\n      \"usingDirectivesPlacement\": \"outsideNamespace\"\n    },\n    \"layoutRules\": {\n      \"newlineAtEndOfFile\": \"allow\"\n    }\n  }\n}\n"
        }
      ]
    }
  ]
}