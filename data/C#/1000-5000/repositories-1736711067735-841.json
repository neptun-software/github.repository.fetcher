{
  "metadata": {
    "timestamp": 1736711067735,
    "page": 841,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "2881099/FreeIM",
      "stars": 1475,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.072265625,
          "content": ".dockerignore\n.env\n.git\n.gitignore\n.vs\n.vscode\n*/bin\n*/obj\n**/.toolstarget"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.4619140625,
          "content": "﻿###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.763671875,
          "content": "﻿## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\n[Xx]64/\n[Xx]86/\n[Bb]uild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\npackage-lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n\n# TODO: Un-comment the next line if you do not want to checkin \n# your web deploy settings because they may include unencrypted\n# passwords\n#*.pubxml\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Microsoft Azure ApplicationInsights config file\nApplicationInsights.config\n\n# Windows Store app package directory\nAppPackages/\nBundleArtifacts/\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# LightSwitch generated files\nGeneratedArtifacts/\nModelManifest.xml\n\n# Paket dependency manager\n.paket/paket.exe\n\n# FAKE - F# Make\n.fake/"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.50390625,
          "content": "FROM microsoft/dotnet:2.1-aspnetcore-runtime AS base\nWORKDIR /app\n\nFROM microsoft/dotnet:2.1-sdk AS build\nWORKDIR /src\nCOPY [\"imServer/imServer.csproj\", \"imServer/\"]\nCOPY [\"ImCore/ImCore.csproj\", \"ImCore/\"]\nRUN dotnet restore \"imServer/imServer.csproj\"\nCOPY . .\nWORKDIR \"/src/imServer\"\nRUN dotnet build \"imServer.csproj\" -c Release -o /app\n\nFROM build AS publish\nRUN dotnet publish \"imServer.csproj\" -c Release -o /app\n\nFROM base AS final\nWORKDIR /app\nCOPY --from=publish /app .\nENTRYPOINT [\"dotnet\", \"imServer.dll\"]"
        },
        {
          "name": "FreeIM.sln",
          "type": "blob",
          "size": 2.6826171875,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.0.31903.59\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{70ABB376-3764-4610-80F9-BFD3AF554805}\"\n\tProjectSection(SolutionItems) = preProject\n\t\treadme.md = readme.md\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"FreeIM\", \"FreeIM\\FreeIM.csproj\", \"{23371786-245E-4AE4-9483-E74E37A1432A}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"WebApi\", \"WebApi\\WebApi.csproj\", \"{1B8ADBB7-D9E2-4FDC-B32C-A596C7055D6B}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ImServer\", \"ImServer\\ImServer.csproj\", \"{FA7AE0A9-0B00-41EF-BF06-C2E5371BB671}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"ImServer_aot\", \"ImServer_aot\\ImServer_aot.csproj\", \"{51542F4A-5A48-4FEF-8436-C1FD6B06B988}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{23371786-245E-4AE4-9483-E74E37A1432A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{23371786-245E-4AE4-9483-E74E37A1432A}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{23371786-245E-4AE4-9483-E74E37A1432A}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{23371786-245E-4AE4-9483-E74E37A1432A}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{1B8ADBB7-D9E2-4FDC-B32C-A596C7055D6B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{1B8ADBB7-D9E2-4FDC-B32C-A596C7055D6B}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{1B8ADBB7-D9E2-4FDC-B32C-A596C7055D6B}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{1B8ADBB7-D9E2-4FDC-B32C-A596C7055D6B}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{FA7AE0A9-0B00-41EF-BF06-C2E5371BB671}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{FA7AE0A9-0B00-41EF-BF06-C2E5371BB671}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{FA7AE0A9-0B00-41EF-BF06-C2E5371BB671}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{FA7AE0A9-0B00-41EF-BF06-C2E5371BB671}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{51542F4A-5A48-4FEF-8436-C1FD6B06B988}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{51542F4A-5A48-4FEF-8436-C1FD6B06B988}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{51542F4A-5A48-4FEF-8436-C1FD6B06B988}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{51542F4A-5A48-4FEF-8436-C1FD6B06B988}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {4D230421-0E2E-4457-A985-2C82C6DC76E9}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "FreeIM",
          "type": "tree",
          "content": null
        },
        {
          "name": "ImServer",
          "type": "tree",
          "content": null
        },
        {
          "name": "ImServer_aot",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0419921875,
          "content": "MIT License\n\nCopyright (c) 2018 YeXiangQin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "WebApi",
          "type": "tree",
          "content": null
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 7.5341796875,
          "content": "﻿# FreeIM v2.0.0\n\n - 调整：已将 ClientId Guid 改为 long；\n - 修复：JoinChan/LeaveChan 数量统计问题；\n - 增加：SendBroadcastMessage 广播消息；\n - 优化：SendChanMessage 性能；\n\nFreeIM 使用 websocket 协议实现简易、高性能（单机支持5万+连接）、集群即时通讯组件，支持点对点通讯、群聊通讯、上线下线事件消息等众多实用性功能。 `ImCore` 已正式改名为 `FreeIM`。\n\n使用场景：好友聊天、群聊天、直播间、实时评论区、游戏。\n\n*接受定制项目开发，详细请联系作者*\n\n如果对本项目感兴趣，欢迎加入 FreeSql QQ讨论群：8578575\n\n> dotnet add package FreeIM\n\n## ImServer 服务端\n\n```csharp\npublic void Configure(IApplicationBuilder app)\n{\n    app.UseFreeImServer(new ImServerOptions\n    {\n        Redis = new FreeRedis.RedisClient(\"127.0.0.1:6379,poolsize=5\"),\n        Servers = new[] { \"127.0.0.1:6001\" }, //集群配置\n        Server = \"127.0.0.1:6001\"\n    });\n}\n//dotnet run --urls=http://127.0.0.1:6001\n```\n> 一套永远不需要迭代更新的 `ImServer` 服务端，支持 .NET8.0 AOT 发布（C++运行时）。\n\n## WebApi 业务端\n\n```csharp\npublic void Configure(IApplicationBuilder app)\n{\n    //...\n\n    ImHelper.Initialization(new ImClientOptions\n    {\n        Redis = new FreeRedis.RedisClient(\"127.0.0.1:6379,poolsize=5\"),\n        Servers = new[] { \"127.0.0.1:6001\" }\n    });\n\n    ImHelper.EventBus(\n        t => Console.WriteLine(t.clientId + \"上线了\"), \n        t => Console.WriteLine(t.clientId + \"下线了\"));\n}\n```\n\n| ImHelper方法 | 参数 | 描述 |\n| - | - | - |\n| PrevConnectServer | (clientId, string) | 在终端准备连接 websocket 前调用 |\n| SendMessage | (发送者, 接收者, 消息内容, 是否回执) | 发送消息 |\n| GetClientListByOnline | - | 返回所有在线clientId |\n| HasOnline | clientId | 判断客户端是否在线 |\n| ForceOffline | clientId | 强制下线 |\n| EventBus | (上线委托, 离线委托) | socket上线与下线事件 |\n\n| 频道 | 参数 | 描述 |\n| - | - | - |\n| JoinChan | (clientId, 频道名) | 加入 |\n| LeaveChan | (clientId, 频道名) | 离开 |\n| GetChanClientList | (频道名) | 获取频道所有clientId |\n| GetChanList | - | 获取所有频道和在线人数 |\n| GetChanListByClientId | (clientId) | 获取用户参与的所有频道 |\n| GetChanOnline | (频道名) | 获取频道的在线人数 |\n| SendChanMessage | (clientId, 频道名, 消息内容) | 发送消息，所有在线的用户将收到消息 |\n| SendBroadcastMessage | (clientId, 频道名, 消息内容) | 发送广播消息 |\n\n- clientId 应该与用户id相同，或者关联；\n- 频道适用临时的群聊需求，如聊天室、讨论区；\n\n> ImHelper 支持 .NetFramework 4.5+、.NetStandard 2.0\n\n## Html5 终端\n\n终端连接 websocket 前，应该先请求 `WebApi` 获得授权过的地址(ImHelper.PrevConnectServer)，伪代码：\n\n```javascript\najax('/prev-connect-imserver', function(data) {\n    var url = data; //此时的值：ws://127.0.0.1:6001/ws?token=xxxxx\n    var sock = new WebSocket(url);\n    sock.onmessage = function (e) {\n        //...\n    };\n})\n```\n\n## 项目演示\n\n运行环境：.NET6.0 + redis-server 2.8+\n\n> cd ImServer && dotnet run --urls=http://*:6001\n\n> cd WebApi && dotnet run\n\n打开多个浏览器，分别访问 http://127.0.0.1:5000 发送群消息\n\n![image](https://user-images.githubusercontent.com/16286519/187127834-d3bb2339-8a9b-4d8c-a0ed-3f1d35b4c7c3.png)\n\n## 分析痛点\n\n协议痛点：如果浏览器使用 websocket 协议，iOS 使用其他协议，协议不一致将很难维护。\n\n职责痛点：IM 的系统一般涉及【我的好友】、【我的群】、【历史消息】等等。。\n\n`ImServer` 与 `WebApi`(业务方) 该保持何种关系呢？\n\n用户A向好友B发送消息，分析一下：\n\n* 需要判断B是否为A好友；\n* 需要判断A是否有权限；\n\n获取历史聊天记录，多个 `终端` websocket.send('gethistory')，再在 onmessage 定位回调处理，多麻烦啊？\n\n诸如此类业务判断会很复杂，使用 `ImServer` 做业务逻辑，最终 `ImServer` 和 `终端` 都将变成巨无霸难以维护。\n\n## 设计思路\n\n`终端`（如浏览器/小程序/iOS/android） 统一使用 websocket 连接 `ImServer`；\n\n`ImServer`（支持集群）根据 clientId 分区管理 websocket 连接；\n\n`WebApi` 使用 ImHelper 调用方法（如：SendMessage、群聊相关方法），将数据推至 Redis chan；\n\n`ImServer` 订阅 Redis chan，收到消息后向 `终端` 推送消息；\n\n- 缓解了并发推送消息过多的问题；\n- 解决了连接数过多的问题；\n- 解耦了业务和通讯，架构更加清淅；\n    * `ImServer` 充当消息转发，连接维护，代码万年不变、且不需要重启维护\n    * `WebApi` 负责所有业务\n\n举例1、用户A向B发送消息：`终端`A ajax -> `WebApi` -> `ImServer` -> `终端`B websocket.onmessage；\n\n举例2、获取历史聊天记录：`终端` 请求 `WebApi`(业务方) 接口，返回json(历史消息)。\n\n举例3、A向B发文件的例子：\n\n- A向 `WebApi` 传文件\n- `WebApi` 通知 `ImServer`，ImHelper.SendMessage(B, \"A正在给传送文件...\")\n- B收到消息，A正在给传送文件...\n- `WebApi` 文件接收完成时通知 `ImServer`，ImHelper.SendMessage(B, \"A文件传输完毕（含文件链接）\")\n- B收到消息，A文件传输完毕（含文件链接）\n\nFreeIM 强依赖 redis-server 组件功能：\n\n- 集成了 redis 轻量级的订阅发布功能，实现消息缓冲发送，后期可更换为其他技术\n- 使用了 redis 存储一些关系数据，如在线 clientId、频道信息、授权信息等\n\n## 集群分区\n\n单个 `ImServer` 实例支持多少个客户端连接，3万？如果在线用户有10万人，怎么办？？？\n\n部署 4 个 `ImServer`：\n\n- `ImServer`1 订阅 redisChan1\n- `ImServer`2 订阅 redisChan2\n- `ImServer`3 订阅 redisChan3\n- `ImServer`4 订阅 redisChan4\n\n`WebApi`(业务方) 根据接收方的 clientId 后四位 16 进制与节点总数取模，定位到对应的 redisChan，进行 redis->publish 操作将消息定位到相应的 `ImServer`。\n\n每个 `ImServer` 管理着对应的终端连接，当接收到 redis 订阅消息后，向对应的终端连接推送数据。\n\n## 事件消息\n\nIM 系统比较常用的有上线、下线，在 `ImServer` 层才能准确捕捉事件，但业务代码不合适在这上面编写了。\n\n此时采用 redis 发布订阅，将上线、下线等事件向指定频道发布，`WebApi`(业务方) 通过 ImHelper.EventBus 方法进行订阅捕捉。\n\n![image](https://user-images.githubusercontent.com/16286519/62150466-a46e3980-b330-11e9-86f3-d050160f0913.png)\n\n## 有感而发\n\n为什么说 SignalR 不合适做 IM？\n\n1、IM 的特点必定是长连接，轮训的功能用不上；\n\n2、因为 SignalR 是双工通讯的设计，`终端` 使用 hub.invoke 发送命令给 SignalR 服务端处理业务，适合用来代替 ajax 减少 http 请求数量；\n\n3、过多使用 hub，SignalR 服务端会被业务入侵，业务变化频繁后不得不重新发布版本，每次部署所有终端都会断开连接，遇到5分钟发一次业务补丁的时候，类似离线和上线提示好友的功能就无法实现；\n\nFreeIM 业务和推送分离设计，`终端` 连接永不更新重启 `ImServer` ，业务代码全部在 `WebApi` 编写，因此重启 `WebApi` 不会造成连接断开。\n\n## 💕 Donation (捐赠)\n\n> 感谢你的打赏\n\n- [Alipay](https://www.cnblogs.com/FreeSql/gallery/image/338860.html)\n\n- [WeChat](https://www.cnblogs.com/FreeSql/gallery/image/338859.html)\n\n## 🗄 License (许可证)\n\n[MIT](LICENSE)\n"
        }
      ]
    }
  ]
}