{
  "metadata": {
    "timestamp": 1736710974917,
    "page": 655,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "neil3d/excel2json",
      "stars": 1777,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.603515625,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n\n# Build results\npackages/\n.vs/\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Roslyn cache directories\n*.ide/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n#NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding addin-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings \n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# If using the old MSBuild-Integrated Package Restore, uncomment this:\n#!**/packages/repositories.config\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n"
        },
        {
          "name": "CSDefineGenerator.cs",
          "type": "blob",
          "size": 3.5673828125,
          "content": "﻿using System;\nusing System.IO;\nusing System.Data;\nusing System.Text;\nusing System.Collections.Generic;\n\nnamespace excel2json\n{\n    /// <summary>\n    /// 根据表头，生成C#类定义数据结构\n    /// 表头使用三行定义：字段名称、字段类型、注释\n    /// </summary>\n    class CSDefineGenerator\n    {\n        struct FieldDef\n        {\n            public string name;\n            public string type;\n            public string comment;\n        }\n\n        string mCode;\n\n        public string code {\n            get {\n                return this.mCode;\n            }\n        }\n\n        public CSDefineGenerator(string excelName, ExcelLoader excel, string excludePrefix)\n        {\n            //-- 创建代码字符串\n            StringBuilder sb = new StringBuilder();\n            sb.AppendLine(\"//\");\n            sb.AppendLine(\"// Auto Generated Code By excel2json\");\n            sb.AppendLine(\"// https://neil3d.gitee.io/coding/excel2json.html\");\n            sb.AppendLine(\"// 1. 每个 Sheet 形成一个 Struct 定义, Sheet 的名称作为 Struct 的名称\");\n            sb.AppendLine(\"// 2. 表格约定：第一行是变量名称，第二行是变量类型\");\n            sb.AppendLine();\n            sb.AppendFormat(\"// Generate From {0}.xlsx\", excelName);\n            sb.AppendLine();\n            sb.AppendLine();\n\n            for (int i = 0; i < excel.Sheets.Count; i++)\n            {\n                DataTable sheet = excel.Sheets[i];\n                sb.Append(_exportSheet(sheet, excludePrefix));\n            }\n\n            sb.AppendLine();\n            sb.AppendLine(\"// End of Auto Generated Code\");\n\n            mCode = sb.ToString();\n        }\n\n        private string _exportSheet(DataTable sheet, string excludePrefix)\n        {\n            if (sheet.Columns.Count < 0 || sheet.Rows.Count < 2)\n                return \"\";\n\n            string sheetName = sheet.TableName;\n            if (excludePrefix.Length > 0 && sheetName.StartsWith(excludePrefix))\n                return \"\";\n\n            // get field list\n            List<FieldDef> fieldList = new List<FieldDef>();\n            DataRow typeRow = sheet.Rows[0];\n            DataRow commentRow = sheet.Rows[1];\n\n            foreach (DataColumn column in sheet.Columns)\n            {\n                // 过滤掉包含指定前缀的列\n                string columnName = column.ToString();\n                if (excludePrefix.Length > 0 && columnName.StartsWith(excludePrefix))\n                    continue;\n\n                FieldDef field;\n                field.name = column.ToString();\n                field.type = typeRow[column].ToString();\n                field.comment = commentRow[column].ToString();\n\n                fieldList.Add(field);\n            }\n\n            // export as string\n            StringBuilder sb = new StringBuilder();\n            sb.AppendFormat(\"public class {0}\\r\\n{{\", sheet.TableName);\n            sb.AppendLine();\n\n            foreach (FieldDef field in fieldList)\n            {\n                sb.AppendFormat(\"\\tpublic {0} {1}; // {2}\", field.type, field.name, field.comment);\n                sb.AppendLine();\n            }\n\n            sb.Append('}');\n            sb.AppendLine();\n            sb.AppendLine();\n            return sb.ToString();\n        }\n\n        public void SaveToFile(string filePath, Encoding encoding)\n        {\n            //-- 保存文件\n            using (FileStream file = new FileStream(filePath, FileMode.Create, FileAccess.Write))\n            {\n                using (TextWriter writer = new StreamWriter(file, encoding))\n                    writer.Write(mCode);\n            }\n        }\n    }\n}\n"
        },
        {
          "name": "ChangeLog.md",
          "type": "blob",
          "size": 1.0791015625,
          "content": "# excel2json Change Log\n\n## TODO\n\n* 过滤规则：仅包含或者排除带有指定前缀的表单或者列\n    * exclude_prefix\n    * 典型应用：\n        * Excel中包含服务端、客户端通用数据，以及各自不用的数据\n        * 则可以把列命名为：client_AAA, server_BBB，输出时，可以通过这个前缀做数据过滤\n\n## Ver 1.3.0\n\n* 把 C# 结构体定义的功能加回来了\n* 升级底层依赖库\n\n## Ver 1.2.0\n\n* 注意：必须先关闭 Excel 软件，再执行转换。因为 Excel 软件会锁定文件，导致其他程序无法读取\n* 升级 ExcelDataReader 组件，现在支持所有 Excel 文件格式（ 2003 *.xls, 2007 *.xlsx）\n* 默认导出表中所有Sheet，格式为：{ SheetName: { SheetOBject } }\n* 在行对象中添加ID字段\n* 去除 SQL 和 C# 结构体代码生成功能\n\n## Ver 1.1.1\n\n* GUI模式：增加了 [Reimport] 按钮，在设置项改变之后，方便重新导入数据；\n* 优化了 Json 数组导出代码；\n* 表格中空白项目计算了默认值：取当前列中非空的值，按照其类型构造默认值；\n\n\n\n"
        },
        {
          "name": "Docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "ExcelLoader.cs",
          "type": "blob",
          "size": 2.3203125,
          "content": "﻿using System;\r\nusing System.IO;\r\nusing System.Data;\r\nusing ExcelDataReader;\r\n\r\nnamespace excel2json {\r\n    /// <summary>\r\n    /// 将 Excel 文件(*.xls 或者 *.xlsx)加载到内存 DataSet\r\n    /// </summary>\r\n    class ExcelLoader {\r\n        private DataSet mData;\r\n\r\n        // TODO: add Sheet Struct Define\r\n\r\n        public ExcelLoader(string filePath, int headerRow) {\r\n            using (var stream = File.Open(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)) {\r\n                // Auto-detect format, supports:\r\n                //  - Binary Excel files (2.0-2003 format; *.xls)\r\n                //  - OpenXml Excel files (2007 format; *.xlsx)\r\n                using (var reader = ExcelReaderFactory.CreateReader(stream)) {\r\n                    // Use the AsDataSet extension method\r\n                    // The result of each spreadsheet is in result.Tables\r\n                    var result = reader.AsDataSet(createDataSetReadConfig(headerRow));\r\n                    this.mData = result;\r\n                }\r\n            }\r\n\r\n            if (this.Sheets.Count < 1) {\r\n                throw new Exception(\"Excel file is empty: \" + filePath);\r\n            }\r\n        }\r\n\r\n        public DataTableCollection Sheets {\r\n            get {\r\n                return this.mData.Tables;\r\n            }\r\n        }\r\n\r\n        private ExcelDataSetConfiguration createDataSetReadConfig(int headerRow) {\r\n            var tableConfig = new ExcelDataTableConfiguration() {\r\n                // Gets or sets a value indicating whether to use a row from the \r\n                // data as column names.\r\n                UseHeaderRow = true,\r\n\r\n                // Gets or sets a callback to determine whether to include the \r\n                // current row in the DataTable.\r\n                //FilterRow = (rowReader) => {\r\n                //    return rowReader.Depth > headerRow - 1;\r\n                //},\r\n            };\r\n\r\n            return new ExcelDataSetConfiguration() {\r\n                // Gets or sets a value indicating whether to set the DataColumn.DataType\r\n                // property in a second pass.\r\n                UseColumnDataType = true,\r\n\r\n                // Gets or sets a callback to obtain configuration options for a DataTable. \r\n                ConfigureDataTable = (tableReader) => { return tableConfig; },\r\n            };\r\n        }\r\n    }\r\n}\r\n"
        },
        {
          "name": "GUI",
          "type": "tree",
          "content": null
        },
        {
          "name": "JsonExporter.cs",
          "type": "blob",
          "size": 8.3828125,
          "content": "﻿using System;\r\nusing System.IO;\r\nusing System.Data;\r\nusing System.Text;\r\nusing System.Collections.Generic;\r\nusing Newtonsoft.Json;\r\n\r\nnamespace excel2json\r\n{\r\n    /// <summary>\r\n    /// 将DataTable对象，转换成JSON string，并保存到文件中\r\n    /// </summary>\r\n    class JsonExporter\r\n    {\r\n        string mContext = \"\";\r\n        int mHeaderRows = 0;\r\n\r\n        public string context {\r\n            get {\r\n                return mContext;\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// 构造函数：完成内部数据创建\r\n        /// </summary>\r\n        /// <param name=\"excel\">ExcelLoader Object</param>\r\n        public JsonExporter(ExcelLoader excel, bool lowcase, bool exportArray, string dateFormat, bool forceSheetName, int headerRows, string excludePrefix, bool cellJson, bool allString)\r\n        {\r\n            mHeaderRows = headerRows - 1;\r\n            List<DataTable> validSheets = new List<DataTable>();\r\n            for (int i = 0; i < excel.Sheets.Count; i++)\r\n            {\r\n                DataTable sheet = excel.Sheets[i];\r\n\r\n                // 过滤掉包含特定前缀的表单\r\n                string sheetName = sheet.TableName;\r\n                if (excludePrefix.Length > 0 && sheetName.StartsWith(excludePrefix))\r\n                    continue;\r\n\r\n                if (sheet.Columns.Count > 0 && sheet.Rows.Count > 0)\r\n                    validSheets.Add(sheet);\r\n            }\r\n\r\n            var jsonSettings = new JsonSerializerSettings\r\n            {\r\n                DateFormatString = dateFormat,\r\n                Formatting = Formatting.Indented\r\n            };\r\n\r\n            if (!forceSheetName && validSheets.Count == 1)\r\n            {   // single sheet\r\n\r\n                //-- convert to object\r\n                object sheetValue = convertSheet(validSheets[0], exportArray, lowcase, excludePrefix, cellJson, allString);\r\n                //-- convert to json string\r\n                mContext = JsonConvert.SerializeObject(sheetValue, jsonSettings);\r\n            }\r\n            else\r\n            { // mutiple sheet\r\n\r\n                Dictionary<string, object> data = new Dictionary<string, object>();\r\n                foreach (var sheet in validSheets)\r\n                {\r\n                    object sheetValue = convertSheet(sheet, exportArray, lowcase, excludePrefix, cellJson, allString);\r\n                    data.Add(sheet.TableName, sheetValue);\r\n                }\r\n\r\n                //-- convert to json string\r\n                mContext = JsonConvert.SerializeObject(data, jsonSettings);\r\n            }\r\n        }\r\n\r\n        private object convertSheet(DataTable sheet, bool exportArray, bool lowcase, string excludePrefix, bool cellJson, bool allString)\r\n        {\r\n            if (exportArray)\r\n                return convertSheetToArray(sheet, lowcase, excludePrefix, cellJson, allString);\r\n            else\r\n                return convertSheetToDict(sheet, lowcase, excludePrefix, cellJson, allString);\r\n        }\r\n\r\n        private object convertSheetToArray(DataTable sheet, bool lowcase, string excludePrefix, bool cellJson, bool allString)\r\n        {\r\n            List<object> values = new List<object>();\r\n\r\n            int firstDataRow = mHeaderRows;\r\n            for (int i = firstDataRow; i < sheet.Rows.Count; i++)\r\n            {\r\n                DataRow row = sheet.Rows[i];\r\n\r\n                values.Add(\r\n                    convertRowToDict(sheet, row, lowcase, firstDataRow, excludePrefix, cellJson, allString)\r\n                    );\r\n            }\r\n\r\n            return values;\r\n        }\r\n\r\n        /// <summary>\r\n        /// 以第一列为ID，转换成ID->Object的字典对象\r\n        /// </summary>\r\n        private object convertSheetToDict(DataTable sheet, bool lowcase, string excludePrefix, bool cellJson, bool allString)\r\n        {\r\n            Dictionary<string, object> importData =\r\n                new Dictionary<string, object>();\r\n\r\n            int firstDataRow = mHeaderRows;\r\n            for (int i = firstDataRow; i < sheet.Rows.Count; i++)\r\n            {\r\n                DataRow row = sheet.Rows[i];\r\n                string ID = row[sheet.Columns[0]].ToString();\r\n                if (ID.Length <= 0)\r\n                    ID = string.Format(\"row_{0}\", i);\r\n\r\n                var rowObject = convertRowToDict(sheet, row, lowcase, firstDataRow, excludePrefix, cellJson, allString);\r\n                // 多余的字段\r\n                // rowObject[ID] = ID;\r\n                importData[ID] = rowObject;\r\n            }\r\n\r\n            return importData;\r\n        }\r\n\r\n        /// <summary>\r\n        /// 把一行数据转换成一个对象，每一列是一个属性\r\n        /// </summary>\r\n        private Dictionary<string, object> convertRowToDict(DataTable sheet, DataRow row, bool lowcase, int firstDataRow, string excludePrefix, bool cellJson, bool allString)\r\n        {\r\n            var rowData = new Dictionary<string, object>();\r\n            int col = 0;\r\n            foreach (DataColumn column in sheet.Columns)\r\n            {\r\n                // 过滤掉包含指定前缀的列\r\n                string columnName = column.ToString();\r\n                if (excludePrefix.Length > 0 && columnName.StartsWith(excludePrefix))\r\n                    continue;\r\n\r\n                object value = row[column];\r\n\r\n                // 尝试将单元格字符串转换成 Json Array 或者 Json Object\r\n                if (cellJson)\r\n                {\r\n                    string cellText = value.ToString().Trim();\r\n                    if (cellText.StartsWith(\"[\") || cellText.StartsWith(\"{\"))\r\n                    {\r\n                        try\r\n                        {\r\n                            object cellJsonObj = JsonConvert.DeserializeObject(cellText);\r\n                            if (cellJsonObj != null)\r\n                                value = cellJsonObj;\r\n                        }\r\n                        catch (Exception exp)\r\n                        {\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (value.GetType() == typeof(System.DBNull))\r\n                {\r\n                    value = getColumnDefault(sheet, column, firstDataRow);\r\n                }\r\n                else if (value.GetType() == typeof(double))\r\n                { // 去掉数值字段的“.0”\r\n                    double num = (double)value;\r\n                    if ((int)num == num)\r\n                        value = (int)num;\r\n                }\r\n\r\n                //全部转换为string\r\n                //方便LitJson.JsonMapper.ToObject<List<Dictionary<string, string>>>(textAsset.text)等使用方式 之后根据自己的需求进行解析\r\n                if (allString && !(value is string))\r\n                {\r\n                    value = value.ToString();\r\n                }\r\n\r\n                string fieldName = column.ToString();\r\n                // 表头自动转换成小写\r\n                if (lowcase)\r\n                    fieldName = fieldName.ToLower();\r\n\r\n                if (string.IsNullOrEmpty(fieldName))\r\n                    fieldName = string.Format(\"col_{0}\", col);\r\n\r\n                rowData[fieldName] = value;\r\n                col++;\r\n            }\r\n\r\n            return rowData;\r\n        }\r\n\r\n        /// <summary>\r\n        /// 对于表格中的空值，找到一列中的非空值，并构造一个同类型的默认值\r\n        /// </summary>\r\n        private object getColumnDefault(DataTable sheet, DataColumn column, int firstDataRow)\r\n        {\r\n            for (int i = firstDataRow; i < sheet.Rows.Count; i++)\r\n            {\r\n                object value = sheet.Rows[i][column];\r\n                Type valueType = value.GetType();\r\n                if (valueType != typeof(System.DBNull))\r\n                {\r\n                    if (valueType.IsValueType)\r\n                        return Activator.CreateInstance(valueType);\r\n                    break;\r\n                }\r\n            }\r\n            return \"\";\r\n        }\r\n\r\n        /// <summary>\r\n        /// 将内部数据转换成Json文本，并保存至文件\r\n        /// </summary>\r\n        /// <param name=\"jsonPath\">输出文件路径</param>\r\n        public void SaveToFile(string filePath, Encoding encoding)\r\n        {\r\n            //-- 保存文件\r\n            using (FileStream file = new FileStream(filePath, FileMode.Create, FileAccess.Write))\r\n            {\r\n                using (TextWriter writer = new StreamWriter(file, encoding))\r\n                    writer.Write(mContext);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0517578125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 Neil Fang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "Program.Options.cs",
          "type": "blob",
          "size": 3.0439453125,
          "content": "﻿using System;\nusing CommandLine;\nusing CommandLine.Text;\n\nnamespace excel2json\n{\n    partial class Program\n    {\n        /// <summary>\n        /// 命令行参数定义\n        /// </summary>\n        internal sealed class Options\n        {\n            public Options()\n            {\n                this.HeaderRows = 3;\n                this.Encoding = \"utf8-nobom\";\n                this.Lowcase = false;\n                this.ExportArray = false;\n                this.ForceSheetName = false;\n            }\n\n            [Option('e', \"excel\", Required = true, HelpText = \"input excel file path.\")]\n            public string ExcelPath {\n                get;\n                set;\n            }\n\n            [Option('j', \"json\", Required = false, HelpText = \"export json file path.\")]\n            public string JsonPath {\n                get;\n                set;\n            }\n\n            [Option('p', \"csharp\", Required = false, HelpText = \"export C# data struct code file path.\")]\n            public string CSharpPath {\n                get;\n                set;\n            }\n\n            [Option('h', \"header\", Required = false, DefaultValue = 1, HelpText = \"number lines in sheet as header.\")]\n            public int HeaderRows {\n                get;\n                set;\n            }\n\n            [Option('c', \"encoding\", Required = false, DefaultValue = \"utf8-nobom\", HelpText = \"export file encoding.\")]\n            public string Encoding {\n                get;\n                set;\n            }\n\n            [Option('l', \"lowcase\", Required = false, DefaultValue = false, HelpText = \"convert filed name to lowcase.\")]\n            public bool Lowcase {\n                get;\n                set;\n            }\n\n            [Option('a', \"array\", Required = false, DefaultValue = false, HelpText = \"export as array, otherwise as dict object.\")]\n            public bool ExportArray {\n                get;\n                set;\n            }\n\n            [Option('d', \"date\", Required = false, DefaultValue = \"yyyy/MM/dd\", HelpText = \"Date Format String, example: dd / MM / yyy hh: mm:ss.\")]\n            public string DateFormat {\n                get;\n                set;\n            }\n\n            [Option('s', \"sheet\", Required = false, DefaultValue = false, HelpText = \"export with sheet name, even there's only one sheet.\")]\n            public bool ForceSheetName {\n                get;\n                set;\n            }\n\n            [Option('x', \"exclude_prefix\", Required = false, DefaultValue = \"\", HelpText = \"exclude sheet or column start with specified prefix.\")]\n            public string ExcludePrefix {\n                get;\n                set;\n            }\n\n            [Option('l', \"cell_json\", Required = false, DefaultValue = false, HelpText = \"convert json string in cell\")]\n            public bool CellJson {\n                get;\n                set;\n            }\n\n            [Option('l', \"all_string\", Required = false, DefaultValue = false, HelpText = \"all string\")]\n            public bool AllString\n            {\n                get;\n                set;\n            }\n        }\n    }\n}\n"
        },
        {
          "name": "Program.cs",
          "type": "blob",
          "size": 4.1591796875,
          "content": "﻿using System;\r\nusing System.IO;\r\nusing System.Data;\r\nusing System.Text;\r\nusing System.Windows.Forms;\r\n\r\n\r\nnamespace excel2json\r\n{\r\n    /// <summary>\r\n    /// 应用程序\r\n    /// </summary>\r\n    sealed partial class Program\r\n    {\r\n        /// <summary>\r\n        /// 应用程序入口\r\n        /// </summary>\r\n        /// <param name=\"args\">命令行参数</param>\r\n        [STAThread]\r\n        static void Main(string[] args)\r\n        {\r\n            if (args.Length <= 0)\r\n            {\r\n                //-- GUI MODE ----------------------------------------------------------\r\n                Console.WriteLine(\"Launch excel2json GUI Mode...\");\r\n                Application.EnableVisualStyles();\r\n                Application.SetCompatibleTextRenderingDefault(false);\r\n                Application.Run(new GUI.MainForm());\r\n            }\r\n            else\r\n            {\r\n                //-- COMMAND LINE MODE -------------------------------------------------\r\n\r\n                //-- 分析命令行参数\r\n                var options = new Options();\r\n                var parser = new CommandLine.Parser(with => with.HelpWriter = Console.Error);\r\n\r\n                if (parser.ParseArgumentsStrict(args, options, () => Environment.Exit(-1)))\r\n                {\r\n                    //-- 执行导出操作\r\n                    try\r\n                    {\r\n                        DateTime startTime = DateTime.Now;\r\n                        Run(options);\r\n                        //-- 程序计时\r\n                        DateTime endTime = DateTime.Now;\r\n                        TimeSpan dur = endTime - startTime;\r\n                        Console.WriteLine(\r\n                            string.Format(\"[{0}]：\\tConversion complete in [{1}ms].\",\r\n                            Path.GetFileName(options.ExcelPath),\r\n                            dur.TotalMilliseconds)\r\n                            );\r\n                    }\r\n                    catch (Exception exp)\r\n                    {\r\n                        Console.WriteLine(\"Error: \" + exp.Message);\r\n                    }\r\n                }\r\n            }// end of else\r\n        }\r\n\r\n        /// <summary>\r\n        /// 根据命令行参数，执行Excel数据导出工作\r\n        /// </summary>\r\n        /// <param name=\"options\">命令行参数</param>\r\n        private static void Run(Options options)\r\n        {\r\n\r\n            //-- Excel File \r\n            string excelPath = options.ExcelPath;\r\n            string excelName = Path.GetFileNameWithoutExtension(options.ExcelPath);\r\n\r\n            //-- Header\r\n            int header = options.HeaderRows;\r\n\r\n            //-- Encoding\r\n            Encoding cd = new UTF8Encoding(false);\r\n            if (options.Encoding != \"utf8-nobom\")\r\n            {\r\n                foreach (EncodingInfo ei in Encoding.GetEncodings())\r\n                {\r\n                    Encoding e = ei.GetEncoding();\r\n                    if (e.HeaderName == options.Encoding)\r\n                    {\r\n                        cd = e;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            //-- Date Format\r\n            string dateFormat = options.DateFormat;\r\n\r\n            //-- Export path\r\n            string exportPath;\r\n            if (options.JsonPath != null && options.JsonPath.Length > 0)\r\n            {\r\n                exportPath = options.JsonPath;\r\n            }\r\n            else\r\n            {\r\n                exportPath = Path.ChangeExtension(excelPath, \".json\");\r\n            }\r\n\r\n            //-- Load Excel\r\n            ExcelLoader excel = new ExcelLoader(excelPath, header);\r\n\r\n            //-- export\r\n            JsonExporter exporter = new JsonExporter(excel, options.Lowcase, options.ExportArray, dateFormat, options.ForceSheetName, header, options.ExcludePrefix, options.CellJson, options.AllString);\r\n            exporter.SaveToFile(exportPath, cd);\r\n\r\n            //-- 生成C#定义文件\r\n            if (options.CSharpPath != null && options.CSharpPath.Length > 0)\r\n            {\r\n                CSDefineGenerator generator = new CSDefineGenerator(excelName, excel, options.ExcludePrefix);\r\n                generator.SaveToFile(options.CSharpPath, cd);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
        },
        {
          "name": "Properties",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.876953125,
          "content": "# excel2json\n\n详细帮助文档请见：[https://neil3d.github.io/coding/excel2json.html](https://neil3d.github.io/coding/excel2json.html)\n\n## 命令行参数\n\n* -e, –excel Required. 输入的Excel文件路径.\n* -j, –json 指定输出的json文件路径.\n* -h, –header Required. 表格中有几行是表头.\n* -c, –encoding (Default: utf8-nobom) 指定编码的名称.\n* -l, –lowcase (Default: false) 自动把字段名称转换成小写格式.\n* -a 序列化成数组\n* -d, --date:指定日期格式化字符串，例如：dd / MM / yyy hh: mm:ss\n* -s 序列化时强制带上sheet name，即使只有一个sheet\n* -exclude_prefix： 导出时，排除掉包含指定前缀的表单和列，例如：-exclude_prefix #\n* -cell_json：自动识别单元格中的Json对象和Json数组，Default：false\n\n\n![Excel](./Docs/excel.png)  \n![GUI](./Docs/gui.png)  \n![CMd](./Docs/cmd.png)  \n\n\n"
        },
        {
          "name": "Resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "excel2json.csproj",
          "type": "blob",
          "size": 5.900390625,
          "content": "﻿<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project ToolsVersion=\"4.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\" Condition=\"Exists('$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props')\" />\r\n  <PropertyGroup>\r\n    <Configuration Condition=\" '$(Configuration)' == '' \">Debug</Configuration>\r\n    <Platform Condition=\" '$(Platform)' == '' \">AnyCPU</Platform>\r\n    <ProjectGuid>{3F3729F4-9C16-40FB-956D-BE6C18C1A418}</ProjectGuid>\r\n    <OutputType>Exe</OutputType>\r\n    <AppDesignerFolder>Properties</AppDesignerFolder>\r\n    <RootNamespace>excel2json</RootNamespace>\r\n    <AssemblyName>excel2json</AssemblyName>\r\n    <TargetFrameworkVersion>v4.5.1</TargetFrameworkVersion>\r\n    <FileAlignment>512</FileAlignment>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\r\n    <PlatformTarget>AnyCPU</PlatformTarget>\r\n    <DebugSymbols>true</DebugSymbols>\r\n    <DebugType>full</DebugType>\r\n    <Optimize>false</Optimize>\r\n    <OutputPath>bin\\Debug\\</OutputPath>\r\n    <DefineConstants>DEBUG;TRACE</DefineConstants>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLevel>4</WarningLevel>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \">\r\n    <PlatformTarget>AnyCPU</PlatformTarget>\r\n    <DebugType>pdbonly</DebugType>\r\n    <Optimize>true</Optimize>\r\n    <OutputPath>bin\\Release\\</OutputPath>\r\n    <DefineConstants>TRACE</DefineConstants>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLevel>4</WarningLevel>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <StartupObject>\r\n    </StartupObject>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <ApplicationIcon>Resources\\excel2json.ico</ApplicationIcon>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"CommandLine, Version=1.9.71.2, Culture=neutral, PublicKeyToken=de6f01bd326f8c32, processorArchitecture=MSIL\">\r\n      <HintPath>packages\\CommandLineParser.1.9.71\\lib\\net45\\CommandLine.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"ExcelDataReader, Version=3.6.0.0, Culture=neutral, PublicKeyToken=93517dbe6a4012fa, processorArchitecture=MSIL\">\r\n      <HintPath>packages\\ExcelDataReader.3.6.0\\lib\\net45\\ExcelDataReader.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"ExcelDataReader.DataSet, Version=3.6.0.0, Culture=neutral, PublicKeyToken=93517dbe6a4012fa, processorArchitecture=MSIL\">\r\n      <HintPath>packages\\ExcelDataReader.DataSet.3.6.0\\lib\\net35\\ExcelDataReader.DataSet.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"FastColoredTextBox, Version=2.16.24.0, Culture=neutral, PublicKeyToken=fb8aa12b994ef61b, processorArchitecture=MSIL\">\r\n      <HintPath>packages\\FCTB.2.16.24\\lib\\FastColoredTextBox.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"ICSharpCode.SharpZipLib, Version=1.2.0.246, Culture=neutral, PublicKeyToken=1b03e6acf1164f73, processorArchitecture=MSIL\">\r\n      <HintPath>packages\\SharpZipLib.1.2.0\\lib\\net45\\ICSharpCode.SharpZipLib.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"Newtonsoft.Json, Version=13.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed, processorArchitecture=MSIL\">\r\n      <HintPath>packages\\Newtonsoft.Json.13.0.1\\lib\\net45\\Newtonsoft.Json.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"System\" />\r\n    <Reference Include=\"System.Core\" />\r\n    <Reference Include=\"System.Drawing\" />\r\n    <Reference Include=\"System.IO.Compression\" />\r\n    <Reference Include=\"System.Windows.Forms\" />\r\n    <Reference Include=\"System.Xml.Linq\" />\r\n    <Reference Include=\"System.Data.DataSetExtensions\" />\r\n    <Reference Include=\"Microsoft.CSharp\" />\r\n    <Reference Include=\"System.Data\" />\r\n    <Reference Include=\"System.Xml\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"CSDefineGenerator.cs\" />\r\n    <Compile Include=\"ExcelLoader.cs\" />\r\n    <Compile Include=\"GUI\\DataManager.cs\" />\r\n    <Compile Include=\"JsonExporter.cs\" />\r\n    <Compile Include=\"GUI\\MainForm.cs\">\r\n      <SubType>Form</SubType>\r\n    </Compile>\r\n    <Compile Include=\"GUI\\MainForm.Designer.cs\">\r\n      <DependentUpon>MainForm.cs</DependentUpon>\r\n    </Compile>\r\n    <Compile Include=\"Program.cs\" />\r\n    <Compile Include=\"Program.Options.cs\" />\r\n    <Compile Include=\"Properties\\AssemblyInfo.cs\" />\r\n    <Compile Include=\"Properties\\Resources.Designer.cs\">\r\n      <AutoGen>True</AutoGen>\r\n      <DesignTime>True</DesignTime>\r\n      <DependentUpon>Resources.resx</DependentUpon>\r\n    </Compile>\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <None Include=\"ChangeLog.md\" />\r\n    <None Include=\"Resources\\App.config\" />\r\n    <None Include=\"LICENSE\" />\r\n    <None Include=\"packages.config\">\r\n      <SubType>Designer</SubType>\r\n    </None>\r\n    <None Include=\"README.md\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <EmbeddedResource Include=\"GUI\\MainForm.resx\">\r\n      <DependentUpon>MainForm.cs</DependentUpon>\r\n    </EmbeddedResource>\r\n    <EmbeddedResource Include=\"Properties\\Resources.resx\">\r\n      <Generator>ResXFileCodeGenerator</Generator>\r\n      <LastGenOutput>Resources.Designer.cs</LastGenOutput>\r\n      <SubType>Designer</SubType>\r\n    </EmbeddedResource>\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <None Include=\"Resources\\lua.png\" />\r\n    <None Include=\"Resources\\SQL.png\" />\r\n    <None Include=\"Resources\\clipboard.png\" />\r\n    <None Include=\"Resources\\code.png\" />\r\n    <Content Include=\"Resources\\excel.png\" />\r\n    <Content Include=\"Resources\\excel2json.ico\" />\r\n    <None Include=\"Resources\\excel_64.png\" />\r\n    <Content Include=\"Resources\\json.png\" />\r\n    <None Include=\"Resources\\about.png\" />\r\n  </ItemGroup>\r\n  <Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\r\n  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. \n       Other similar extension points exist, see Microsoft.Common.targets.\n  <Target Name=\"BeforeBuild\">\n  </Target>\n  <Target Name=\"AfterBuild\">\n  </Target>\n  -->\r\n</Project>"
        },
        {
          "name": "excel2json.sln",
          "type": "blob",
          "size": 0.8681640625,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio 2012\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"excel2json\", \"excel2json.csproj\", \"{3F3729F4-9C16-40FB-956D-BE6C18C1A418}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{3F3729F4-9C16-40FB-956D-BE6C18C1A418}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{3F3729F4-9C16-40FB-956D-BE6C18C1A418}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{3F3729F4-9C16-40FB-956D-BE6C18C1A418}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{3F3729F4-9C16-40FB-956D-BE6C18C1A418}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "packages.config",
          "type": "blob",
          "size": 0.5146484375,
          "content": "﻿<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<packages>\r\n  <package id=\"CommandLineParser\" version=\"1.9.71\" targetFramework=\"net451\" />\r\n  <package id=\"ExcelDataReader\" version=\"3.6.0\" targetFramework=\"net451\" />\r\n  <package id=\"ExcelDataReader.DataSet\" version=\"3.6.0\" targetFramework=\"net451\" />\r\n  <package id=\"FCTB\" version=\"2.16.24\" targetFramework=\"net451\" />\r\n  <package id=\"Newtonsoft.Json\" version=\"13.0.1\" targetFramework=\"net451\" />\r\n  <package id=\"SharpZipLib\" version=\"1.2.0\" targetFramework=\"net451\" />\r\n</packages>"
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}