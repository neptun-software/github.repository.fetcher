{
  "metadata": {
    "timestamp": 1736711091066,
    "page": 891,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "microsoft/scalar",
      "stars": 1411,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".azure-pipelines",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.212890625,
          "content": "# EditorConfig: https://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\n\n[*.{cs,cpp,h}]\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2177734375,
          "content": "###############################################################################\n# Do not normalize any line endings.\n###############################################################################\n* -text\n*.cs diff=csharp\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.2421875,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# VS 2017 user-specific files\nlaunchSettings.json\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# Mac\nxcuserdata\n.DS_Store\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult*.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.opendb\n*.VC.db\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n## TODO: Comment the next line if you want to checkin your\n## web deploy settings but do note that will include unencrypted\n## passwords\n#*.pubxml\n\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# LightSwitch generated files\nGeneratedArtifacts/\n_Pvt_Extensions/\nModelManifest.xml\n\n*.dll\n*.cab\n*.cer\n\n# VS Code private directory\n.vscode/\n\n# JetBrains IDEs\n.idea/\n"
        },
        {
          "name": ".vsconfig",
          "type": "blob",
          "size": 0.4326171875,
          "content": "{\r\n  \"version\": \"1.0\",\r\n  \"components\": [\r\n    \"Microsoft.Component.MSBuild\",\r\n    \"Microsoft.VisualStudio.Workload.NativeDesktop\"\r\n    \"Microsoft.VisualStudio.Workload.ManagedDesktop\",\r\n    \"Microsoft.VisualStudio.Workload.NetCoreTools\",\r\n    \"Microsoft.Net.Core.Component.SDK.2.1\",\r\n    \"Microsoft.VisualStudio.Component.VC.v141.x86.x64\",\r\n    \"Microsoft.Net.Component.4.6.1.TargetingPack\",\r\n    \"Microsoft.Net.Component.4.6.1.SDK\",\r\n  ]\r\n}\n"
        },
        {
          "name": "AuthoringTests.md",
          "type": "blob",
          "size": 4.88671875,
          "content": "# Authoring Tests\n\n## Functional Tests\n\n#### Runnable functional test projects\n\n- `Scalar.FunctionalTests`\n\n`Scalar.FunctionalTests` is a .NET Core project and contains all cross-platform functional tests.\n\n## Running the Functional Tests\n\nThe functional tests are built on NUnit 3, which is available as a set of NuGet packages.\n\n### Windows\n\n1. Build Scalar:\n    \n    **Option 1:** Open Scalar.sln in Visual Studio and build everything.\n    \n    **Option 2:** Run `Scripts\\BuildScalarForWindows.bat` from the command line\n\n2. Run the Scalar installer that was built in step 2.  This will ensure that Scalar will be able to find the correct version of the pre/post-command hooks. The installer will be placed in `BuildOutput\\Scalar.Installer.Windows\\bin\\x64\\<Debug or Release>`\n3. Run the tests **with elevation**.  Elevation is required because the functional tests create and delete a test service.\n\n   **Option 1:** Run the `Scalar.FunctionalTests` project from inside Visual Studio launched as Administrator.\n   \n   **Option 2:** Run `Scripts\\RunFunctionalTests.bat` from CMD launched as Administrator.\n\n#### Selecting Which Tests are Run\n\nBy default, the functional tests run on a single configuration.  Passing the `--full-suite` option runs all tests on all configurations.\n\n### Mac\n\n1. Build Scalar: `Scripts/Mac/BuildScalarForMac.sh`\n2. Run the tests: `Scripts/Mac/RunFunctionalTests.sh `\n\nIf you need the VS for Mac debugger attached for a functional test run:\n\n1. Make sure you've built your latest changes\n2. Open Scalar.sln in VS for Mac\n3. Run->Run With->Custom Configuration...\n4. Select \"Start external program\" and specify the published functional test binary (e.g. `/Users/<USERNAME>/Repos/Scalar/Publish/Scalar.FunctionalTests`)\n5. Specify any desired arguments (e.g. [a specific test](#Running-Specific-Tests) )\n6. Run Action -> \"Debug - .Net Core Debugger\"\n7. Click \"Debug\"\n\n### Customizing the Functional Test Settings\n\nThe functional tests take a set of parameters that indicate what paths and URLs to work with.  If you want to customize those settings, they\ncan be found in [`Scalar.FunctionalTests\\Settings.cs`](/Scalar/Scalar.FunctionalTests/Settings.cs).\n\n\n## Running Specific Tests\n\nSpecific tests can be run by adding the `--test=<comma separated list of tests>` command line argument to the functional test project/scripts.  \n\nNote that the test name must include the class and namespace and that `Debug` or `Release` must be specified when running the functional test scripts.\n\n*Example*\n\nWindows (Script):\n\n`Scripts\\RunFunctionalTests.bat Debug --test=Scalar.FunctionalTests.Tests.EnlistmentPerFixture.CloneTests.CloneToPathWithSpaces\n\nWindows (Visual Studio):\n\n1. Set `Scalar.FunctionalTests` as StartUp project\n2. Project Properties->Debug->Start options->Command line arguments (all on a single line): `--test=Scalar.FunctionalTests.Tests.EnlistmentPerFixture.CloneTests.CloneToPathWithSpaces\n\nMac:\n\n`Scripts/Mac/RunFunctionalTests.sh Debug --test=Scalar.FunctionalTests.Tests.EnlistmentPerFixture.CloneTests.CloneToPathWithSpaces`\n\n## How to Write a Functional Test\n\nEach piece of functionality that we add to Scalar should have corresponding functional tests that clone a repo and use existing tools and filesystem APIs to interact with the virtual repo.\n\nSince these are functional tests that can potentially modify the state of files on disk, you need to be careful to make sure each test can run in a clean \nenvironment.  There are two base classes that you can derive from when writing your tests.  It's also important to put your new class into the same namespace\nas the base class, because NUnit treats namespaces like test suites, and we have logic that keys off that for deciding when to create enlistments.\n\n1. `TestsWithEnlistmentPerFixture`\n\n    For any test fixture (a fixture is the same as a class in NUnit) that derives from this class, we create an enlistment before running any of the tests in the fixture, and then we delete the enlistment after all tests are done (but before any other fixture runs).  If you need to write a sequence of tests that manipulate the same repo, this is the right base class.\n\n2. `TestsWithEnlistmentPerTestCase`\n\n   Derive from this class if you need a new enlistment created for each test case.  This is the most reliable, but also most expensive option.\n\n## Updating the Remote Test Branch\n\nBy default, the functional tests clone `main`, check out the branch \"FunctionalTests/YYYYMMDD\" (with the day the FunctionalTests branch was created), \nand then remove all remote tracking information. This is done to guarantee that remote changes to tip cannot break functional tests. If you need to update \nthe functional tests to use a new FunctionalTests branch, you'll need to create a new \"FunctionalTests/YYYYMMDD\" branch and update the `Commitish` setting in `Settings.cs` to have this new branch name.  \nOnce you have verified your scenarios locally you can push the new FunctionalTests branch and then your changes.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 15.3623046875,
          "content": "# Contributing to Scalar\n\nThank you for taking the time to contribute!\n\n - [Contributor License Agreement](#contributor-license-agreement)\n - [Code of Conduct](#code-of-conduct)\n - [Building Scalar on Windows](#building-scalar-on-windows)\n - [Building Scalar on Mac](#building-scalar-on-mac)\n - [Design Reviews](#design-reviews)\n - [Platform Specific Code](#platform-specific-code)\n - [Tracing and Logging](#tracing-and-logging)\n - [Error Handling](#error-handling)\n - [Background Threads](#background-threads)\n - [Coding Conventions](#coding-conventions)\n - [Testing](#testing)\n   - [C# Unit Tests](#c-unit-tests)\n\n## Contributor License Agreement\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\n## Code of Conduct\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n## Building Scalar on Windows\n\nIf you'd like to build your own Scalar Windows installer:\n* Install Visual Studio 2019 Community Edition or higher (https://www.visualstudio.com/downloads/).\n  * Include the following workloads:\n    * .NET Core cross-platform development\n  * Include the following additional components:\n    * .NET Core runtime\n* Install the .NET Core 3.1 SDK (https://dotnet.microsoft.com/download/dotnet-core/3.1)\n* Clone using `git clone https://github.com/microsoft/scalar scalar/src`. The `src` directory\n  will be the \"repo root\" and some sibling directories are created in the build process.\n* Run `Scripts\\BuildScalarForWindows.bat`\n* You can also build in Visual Studio by opening `Scalar.sln` (do not upgrade any projects) and building. However, the very first\nbuild will fail, and the second and subsequent builds will succeed. This is because the build requires a prebuild code generation step.\nFor details, see the build script in the previous step.\n\nVisual Studio 2019 will [automatically prompt you to install these dependencies](https://devblogs.microsoft.com/setup/configure-visual-studio-across-your-organization-with-vsconfig/)\nwhen you open the solution.\n\nThe installer can now be found at `<repo root>\\..\\out\\Scalar.Installer.Windows\\dist\\[Debug|Release]\\Scalar\\SetupScalar.0.2.173.2.exe`.\nBe sure to also install the latest Git for Windows installer at `<repo root>\\..\\out\\Scalar.Installer.Windows\\dist\\[Debug|Release]\\Git\\Git-<version>.exe`.\n\n## Building Scalar on Mac\n\n* Install [Visual Studio for Mac ](https://visualstudio.microsoft.com/vs/mac). (This will also install the `dotnet` CLI).\n\n* If you still do not have the `dotnet` cli `>= v3.1` installed, then\n  [manually install it](https://dotnet.microsoft.com/download/dotnet-core/3.1).\n  You can check what version you have with `dotnet --version`.\n\n* Clone using `git clone https://github.com/microsoft/scalar scalar/src`. The `src` directory\n  will be the \"repo root\" and some sibling directories are created in the build process.\n\n* Run the build and installation scripts:\n\n  ```\n  cd Scripts/Mac\n  ./BuildScalarForMac.sh\n  cd ../../../out/Scalar.Installer.Mac/dist/(Debug|Release)/\n  ./InstallScalar.sh\n  ```\n\n## Design Reviews\n\nArchitectural changes and new features should start with a design review.  It's easier and wastes less time to incorporate feedback at this stage.\n\nThe design review process is as follows:\n\n1. Create a pull request that contains a design document in Markdown (.md) format for the proposed change.  Assign the `design-doc` label to the pull request.\n2. Use the pull request for design feedback and for iterating on the design.\n3. Once the design is approved, create a new issue with a description that includes the final design document.  Include a link to the pull request that was used for discussion.\n4. Close (without merging!) the pull request used for the design discussion.\n\n## Platform Specific Code\n\n- *Prefer cross-platform code to platform-specific code*\n\n  Cross-platform code is more easily reused.  Reusing code reduces the amount of code that must be written, tested, and maintained.\n\n- *Platform specific code, and only platform specific code, should go in `ScalarPlatform`*\n\n  When platform specific code is required, it should be placed in `ScalarPlatform` or one of the platforms it contains.\n\n## Tracing and Logging\n\n- *The \"Error\" logging level is reserved for non-retryable errors that result in I/O failures or the Scalar process shutting down*\n\n  The expectation from our customers is that when Scalar logs an \"Error\" level message in its log file either:\n    * Scalar had to shut down unexpectedly\n    * Scalar encountered an issue severe enough that user-initiated I/O would fail.\n\n- *Log full exception stacks*\n\n  Full exception stacks (i.e. `Exception.ToString`) provide more details than the exception message alone (`Exception.Message`). Full exception stacks make root-causing issues easier.\n\n- *Do not display full exception stacks to users*\n\n  Exception call stacks are not usually actionable for the user.  Users frequently (sometimes incorrectly) assume that Scalar has crashed when shown a full stack.  The full stack *should* be included in Scalar logs, but *should not* be displayed as part of the error message provided to the user.\n\n- *Include relevant details when logging exceptions*\n\n  Sometimes an exception call stack alone is not enough to root cause failures in Scalar.  When catching (or throwing) exceptions, log relevant details that will help diagnose the issue.  As a general rule, the closer an exception is caught to where it's thrown, the more relevant details there will be to log.\n\n  Example:\n  ```\n  catch (Exception e)\n  {\n    EventMetadata metadata = new EventMetadata();\n    metadata.Add(\"Area\", \"Upgrade\");\n    metadata.Add(nameof(packageVersion), packageVersion);\n    metadata.Add(nameof(packageName), packageName);\n    metadata.Add(\"Exception\", e.ToString());\n    context.Tracer.RelatedError(metadata, $\"Failed to compare {packageName} version\");\n  }\n  ```\n\n## Error Handling\n\n- *Fail fast: An error or exception that risks data loss or corruption should shut down Scalar immediately*\n\n  Preventing data loss and repository corruption is critical.  If an error or exception occurs that could lead to data loss, it's better to shut down Scalar than risk corruption.\n\n- *Do not catch exceptions that are indicative of a programmer error (e.g. `ArgumentNullException`)*\n\n  Any exceptions that result from programmer error (e.g. `ArgumentNullException`) should be discovered as early in the development process as possible.  Avoid `catch` statements that would hide these errors (e.g. `catch(Exception)`).\n\n  The only exception to this rule is for [unhandled exceptions in background threads](#bgexceptions)\n\n- *Do not use exceptions for normal control flow*\n\n  Prefer writing code that does not throw exceptions.  The `TryXXX` pattern, for example, avoids the performance costs that come with using exceptions.  Additionally, Scalar typically needs to know exactly where errors occur and handle the errors there.  The `TryXXX` pattern helps ensure errors are handled in that fashion.\n\n  Example: Handle errors where they occur (good):\n\n  ```\n  bool TryDoWorkOnDisk(string fileContents, out string error)\n  {\n    if (!TryCreateReadConfig())\n    {\n      error = \"Failed to read config file\";\n      return false;\n    }\n    \n    if (!TryCreateTempFile(fileContents))\n    {\n      error = \"Failed to create temp file\";\n      return false;\n    }\n  \n    if (!TryRenameTempFile())\n    {\n      error = \"Failed to rename temp file\";\n      if (!TryDeleteTempFile())\n      {\n        error += \", and failed to cleanup temp file\";\n      }\n    \n      return false;\n    }\n    \n    error = null;\n    return true;\n  }\n  ```\n\n  Example: Handle errors in `catch` without knowing where they came from (bad):\n\n  ```\n  bool TryDoWorkOnDisk(string fileContents, out string error)\n  {\n    try\n    {\n      CreateReadConfig();\n      CreateTempFile(fileContents);\n      RenameTempFile();\n    }\n    catch (Exception ex) when (ex is IOException || ex is UnauthorizedAccessException)\n    {\n      error = \"Something went wrong doing work on disk\";\n      \n      try\n      {\n        if (TempFileExists())\n        {\n          DeleteTempFile();\n        }\n      }\n      catch (Exception e) when (e is IOException || e is UnauthorizedAccessException)\n      {\n        error += \", and failed to cleanup temp file\";\n      }\n    \n      return false;\n    }\n  \n    error = null;\n    return true;\n  }\n  ```\n\n- *Provide the user with user-actionable messages whenever possible*\n\n  Don't tell a user what went wrong.  Help the user fix the problem.\n\n  Example:\n  > `\"You can only specify --hydrate if the repository is mounted. Run 'scalar mount' and try again.\"`\n\n## Background Threads\n\n- *Avoid using the thread pool (and avoid using async)*\n\n  `HttpRequestor.SendRequest` makes a [blocking call](https://github.com/Microsoft/Scalar/blob/4baa37df6bde2c9a9e1917fc7ce5debd653777c0/Scalar/Scalar.Common/Http/HttpRequestor.cs#L135) to `HttpClient.SendAsync`.  That blocking call consumes a thread from the managed thread pool.  Until that design changes, the rest of Scalar must avoid using the thread pool unless absolutely necessary.  If the thread pool is required, any long running tasks should be moved to a separate thread managed by Scalar itself (see [GitMaintenanceQueue](https://github.com/Microsoft/Scalar/blob/4baa37df6bde2c9a9e1917fc7ce5debd653777c0/Scalar/Scalar.Common/Maintenance/GitMaintenanceQueue.cs#L19) for an example).\n\n- <a id=\"bgexceptions\"></a>*Catch all exceptions on long-running tasks and background threads*\n\n  Wrap all code that runs in the background thread in a top-level `try/catch(Exception)`.  Any exceptions caught by this handler should be logged, and then Scalar should be forced to terminate with `Environment.Exit`.  It's not safe to allow Scalar to continue to run after an unhandled exception stops a background thread or long-running task.  Testing has shown that `Environment.Exit` consistently terminates the process regardless of how background threads are started (e.g. native thread, `new Thread()`, `Task.Factory.StartNew()`).\n\n  An example of this pattern can be seen in [`BackgroundFileSystemTaskRunner.ProcessBackgroundTasks`](https://github.com/Microsoft/Scalar/blob/4baa37df6bde2c9a9e1917fc7ce5debd653777c0/Scalar/Scalar.Virtualization/Background/BackgroundFileSystemTaskRunner.cs#L233).\n\n## Coding Conventions\n\n- *Most C# coding style guidelines are covered by StyleCop*\n\n  Fix any StyleCop issues reported in changed code. When adding new projects to Scalar, be sure that StyleCop is analyzing them as part of the build.\n\n- *Prefer explicit types to interfaces and implicitly typed variables*\n\n  Avoid the use of `var` (C#), `dynamic` (C#), and `auto` (C++).  Prefer concrete/explicit types to interfaces (e.g. prefer `List` to `IList`).\n\n  The Scalar codebase uses this approach because:\n\n    * Interfaces can hide the performance characteristics of their underlying type.  For example, an `IDictionary` could be a `SortedList` or a `Dictionary` (or several other data types).\n    * Interfaces can hide the thread safety (or lack thereof) of their underlying type.  For example, an `IDictionary` could be a `Dictionary` or a `ConcurrentDictionary`.\n    * Explicit types make these performance and thread safety characteristics explicit when reviewing code.\n    * Scalar is not a public API and its components are always shipped together.  Develoepers are free to make API changes to Scalar's public methods.\n\n- *Method names start with a verb (e.g. \"GetProjectedFolderEntryData\" rather than \"ProjectedFolderEntryData\")*\n\n  Starting with a verb in the name improves readability and helps ensure consistency with the rest of the Scalar codebase.\n\n- *Aim to write self-commenting code.  When necessary, comments should give background needed to understand the code.*\n\n  Helpful (good) comment:\n\n  ```\n  // Order the folders in descending order so that we walk the tree from bottom up.\n  // Traversing the folders in this order:\n  //  1. Ensures child folders are deleted before their parents\n  //  2. Ensures that folders that have been deleted by git \n  //     (but are still in the projection) are found before their\n  //     parent folder is re-expanded (only applies on platforms \n  //     where EnumerationExpandsDirectories is true)\n  foreach (PlaceholderListDatabase.PlaceholderData folderPlaceholder in   placeholderFoldersListCopy.OrderByDescending(x => x.Path))\n  ```\n\n  Obvious (bad) comment:\n\n  ```\n  // Check if enumeration expands directories on the current platform\n  if (ScalarPlatform.Instance.KernelDriver.EnumerationExpandsDirectories)\n  ```\n\n- *Add new interfaces when it makes sense for the product, not simply for unit testing*\n\n  When a class needs to be mocked (or have a subset of its behavior mocked), prefer using virtual methods instead of adding a new interface.  Scalar uses interfaces when multiple implementations of the interface exist in the product code.\n\n- *Check for `null` using the equality (`==`) and inequality (`!=`) operators rather than `is`*\n\n  A corollary to this guideline is that equality/inequality operators that break `null` checks should not be added (see [this post](https://stackoverflow.com/questions/40676426/what-is-the-difference-between-x-is-null-and-x-null) for an example).\n\n- *Use `nameof(...)` rather than hardcoded strings*\n\n  Using `nameof` ensures that when methods/variables are renamed the logging of those method/variable names will also be updated.  However, hard coded strings are still appropriate when they are used for generating reports and changing the strings would break the reports.\n\n## Testing\n\n- *Add new unit and functional tests when making changes*\n\n  Comprehensive tests are essential for maintaining the health and quality of the product.  For more details on writing tests see [Authoring Tests](https://github.com/Microsoft/Scalar/blob/main/AuthoringTests.md).\n\n- *Functional tests are black-box tests and should not build against any Scalar product code*\n\n  Keeping the code separate helps ensure that bugs in the product code do not compromise the integrity of the functional tests.\n\n### C# Unit Tests\n\n- *Add `ExceptionExpected` to unit tests that are expected to have exceptions*\n\n  Example:\n  ```\n  [TestCase]\n  [Category(CategoryConstants.ExceptionExpected)]\n  public void ParseFromLsTreeLine_NullRepoRoot()\n  ```\n  \n  Unit tests should be tagged with `ExceptionExpected` when either the test code or the product code will throw an exception.  `ExceptionExpected` tests are not executed when the debugger is attached, and this prevents developers from having to keep continuing the tests each time exceptions are caught by the debugger.\n\n- *Use a `mock` prefix for absolute file system paths and URLs*\n\n  The unit tests should not touch the real file system nor should they reach out to any real URLs.  Using  `mock:\\\\` and `mock://` ensures that any product code that was not properly mocked will not interact with the real file system or attempt to contact a real URL.\n"
        },
        {
          "name": "Dependencies.props",
          "type": "blob",
          "size": 1.1669921875,
          "content": "<Project>\n\n  <ItemGroup>\n    <!-- Product dependencies -->\n    <PackageReference Update=\"CommandLineParser\"               Version=\"2.6.0\"  />\n    <PackageReference Update=\"Newtonsoft.Json\"                 Version=\"13.0.1\" />\n    <PackageReference Update=\"NuGet.CommandLine\"               Version=\"5.4.0\"  />\n    <PackageReference Update=\"NuGet.Commands\"                  Version=\"5.4.0\"  />\n\n    <!-- Build-only dependencies -->\n    <PackageReference Update=\"MicroBuild.Core\"                 Version=\"0.2.0\" PrivateAssets=\"all\" />\n    <PackageReference Update=\"Tools.InnoSetup\"                 Version=\"6.0.2\" PrivateAssets=\"all\" />\n\n    <!-- Test-only dependencies -->\n    <PackageReference Update=\"Microsoft.NET.Test.Sdk\"          Version=\"15.9.0\" />\n    <PackageReference Update=\"Moq\"                             Version=\"4.13.0\" />\n    <PackageReference Update=\"nunit\"                           Version=\"3.11.0\" />\n    <PackageReference Update=\"NUnit3TestAdapter\"               Version=\"3.12.0\" />\n    <PackageReference Update=\"NUnitLite\"                       Version=\"3.12.0\" />\n    <PackageReference Update=\"Microsoft.Data.Sqlite\"           Version=\"2.2.4\"  />\n  </ItemGroup>\n\n</Project>\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 3.20703125,
          "content": "<Project>\n  <PropertyGroup>\n    <!--\n      Set helpful property for detecting the current OS platform.\n      We can't use the build-in $(OS) because it returns 'Unix' on macOS when run under Mono.\n    -->\n    <OSPlatform Condition=\"$([MSBuild]::IsOsPlatform('windows'))\">windows</OSPlatform>\n    <OSPlatform Condition=\"$([MSBuild]::IsOsPlatform('osx'))\">osx</OSPlatform>\n    <OSPlatform Condition=\"$([MSBuild]::IsOsPlatform('linux'))\">linux</OSPlatform>\n    <IsPosix>true</IsPosix>\n    <IsPosix Condition=\"'$(OSPlatform)'=='windows'\">false</IsPosix>\n\n    <!-- Default configuration is debug -->\n    <Configuration Condition=\"'$(Configuration)' == ''\">Debug</Configuration>\n\n    <!-- Define the root of the repository as a property -->\n    <RepoPath>$(MSBuildThisFileDirectory)</RepoPath>\n    <RepoSrcPath>$(RepoPath)</RepoSrcPath>\n    <RepoOutPath>$(RepoPath)..\\out\\</RepoOutPath>\n    <ScalarBuildTasks>$(RepoSrcPath)Scalar.MSBuild\\</ScalarBuildTasks>\n\n    <!-- Redirect the intermediate and binary output directories -->\n    <ProjectOutPath>$(RepoOutPath)$(MSBuildProjectName)\\</ProjectOutPath>\n    <BaseOutputPath>$(ProjectOutPath)bin\\</BaseOutputPath>\n    <BaseIntermediateOutputPath>$(ProjectOutPath)obj\\</BaseIntermediateOutputPath>\n\n    <!-- Common build properties -->\n    <RuntimeIdentifiers>win10-x64;osx-x64;linux-x64</RuntimeIdentifiers>\n    <Deterministic>true</Deterministic>\n    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>\n    <CodeAnalysisRuleSet>$(RepoPath)Scalar.ruleset</CodeAnalysisRuleSet>\n\n    <!-- Common assembly information -->\n    <Product>Scalar</Product>\n    <Copyright>Microsoft Corporation (c)</Copyright>\n\n    <!-- Version information -->\n    <ScalarVersion>0.2.173.2</ScalarVersion>\n\n    <!--\n       Update the GitPackageVersion for the version that is shipped and tested with Scalar.\n       The MinimumGitVersion is intentionally lower to allow side-by-side installs of\n       VFS for Git (which is less flexible). Only update that version if we rely upon a\n       new command-line interface in Git or if there is a truly broken interaction.\n    -->\n    <GitPackageVersion>2.20211031.5-pr</GitPackageVersion>\n    <MinimumGitVersion>v2.25.0.vfs.1.1</MinimumGitVersion>\n\n    <WatchmanPackageUrl>https://github.com/facebook/watchman/releases/download/v2020.08.03.00/watchman-v2020.08.03.00-windows.zip</WatchmanPackageUrl>\n    <GcmCoreOSXPackageUrl>https://github.com/microsoft/Git-Credential-Manager-Core/releases/download/v2.0.79-beta/gcmcore-osx-2.0.79.64449.pkg</GcmCoreOSXPackageUrl>\n\n    <!-- Signing certificates -->\n    <AuthenticodeCert>Microsoft400</AuthenticodeCert>\n    <MacFilesCert>8003</MacFilesCert>\n\n    <!-- Compiled build constants -->\n    <ExternalBinariesDirectoryName>extbin</ExternalBinariesDirectoryName>\n  </PropertyGroup>\n\n  <!-- Common build-only dependencies -->\n  <ItemGroup>\n    <!-- <PackageReference Include=\"StyleCop.Analyzers\" Version=\"1.0.2\" PrivateAssets=\"all\"/> -->\n  </ItemGroup>\n\n  <!-- Define default metadata on *FilesToSign items -->\n  <ItemDefinitionGroup>\n    <FilesToSign>\n      <Authenticode>$(AuthenticodeCert)</Authenticode>\n      <InProject>false</InProject>\n    </FilesToSign>\n    <MacFilesToSign>\n      <InProject>false</InProject>\n    </MacFilesToSign>\n  </ItemDefinitionGroup>\n</Project>\n"
        },
        {
          "name": "Directory.Build.targets",
          "type": "blob",
          "size": 0.4287109375,
          "content": "<Project>\n  <!-- Define common properties that rely on SDK/props-defined properties -->\n  <PropertyGroup>\n    <Version>$(ScalarVersion)</Version>\n  </PropertyGroup>\n\n  <!-- Include custom MSBuild targets/tasks -->\n  <Import Project=\"$(ScalarBuildTasks)Scalar.targets\" />\n\n  <!-- Include signing targets -->\n  <Import Project=\"Signing.targets\" />\n\n  <!-- Unified dependency versions -->\n  <Import Project=\"Dependencies.props\" />\n</Project>\n"
        },
        {
          "name": "Images",
          "type": "tree",
          "content": null
        },
        {
          "name": "License.md",
          "type": "blob",
          "size": 1.134765625,
          "content": "    MIT License\n\n    Copyright (c) Microsoft Corporation. All rights reserved.\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE\n"
        },
        {
          "name": "Protocol.md",
          "type": "blob",
          "size": 0.0390625,
          "content": "See Protocol.md in microsoft/vfsforgit.\n"
        },
        {
          "name": "Readme.md",
          "type": "blob",
          "size": 5.7490234375,
          "content": "![Scalar](Images/scalar-card.png)\n\n## What is Scalar?\n\nScalar is a tool that helps Git scale to some of the largest Git repositories.\nIt achieves this by enabling some advanced Git features, such as:\n\n* *Partial clone:* reduces time to get a working repository by not\n  downloading all Git objects right away.\n\n* *Background prefetch:* downloads Git object data from all remotes every\n  hour, reducing the amount of time for foreground `git fetch` calls.\n\n* *Sparse-checkout:* limits the size of your working directory.\n\n* *File system monitor:* tracks the recently modified files and eliminates\n  the need for Git to scan the entire worktree.\n\n* *Commit-graph:* accelerates commit walks and reachability calculations,\n   speeding up commands like `git log`.\n\n* *Multi-pack-index:* enables fast object lookups across many pack-files.\n\n* *Incremental repack:* Repacks the packed Git data into fewer pack-file\n  without disrupting concurrent commands by using the multi-pack-index.\n\nAs new versions of Git are released, we update the list of features that\nScalar automatically configures. This reduces your effort to keep your\nrepositories as efficient as possible.\n\n## Scalar has moved!\n\nThrough significant effort from our team, we have successfully transitioned\nScalar from a modified version of [VFS for Git][vfsforgit] into a thin shell\naround core Git features. The Scalar executable has now been ported to be\nincluded [in the `microsoft/git` fork][microsoft-git]. Please visit that\nfork for all of your Scalar needs:\n\n* Download [the latest `microsoft/git` release][releases].\n* Read [the Scalar documentation][docs].\n* Contribute changes [to the `scalar` CLI][scalar-cli].\n\n### Why did Scalar move?\n\nScalar started as a modification of [VFS for Git][vfsforgit] to\ncreate a working solution with a robust test suite in a short amount of\ntime. The goal was to depend more on features that exist within Git itself\ninstead of creating new functionality within this project. Since the start,\nwe have focused on this goal with efforts such as\n[improving sparse-checkout performance in Git][sparse-checkout-blog],\n[implementing background maintenance in Git][background-maintenance],\nand [integrating the GVFS protocol into `microsoft/git`][remove-read-object]\nwhich allowed us to [drop the `Scalar.Mount` process][remove-mount].\nAll of these changes reduced the size of the code in Scalar itself until\nit could be replaced [with a small command-line interface][scalar-cli].\n\n[sparse-checkout-blog]: https://github.blog/2020-01-17-bring-your-monorepo-down-to-size-with-sparse-checkout/\n[background-maintenance]: https://github.blog/2021-03-15-highlights-from-git-2-31/#introducing-git-maintenance\n[remove-read-object]: https://github.com/microsoft/scalar/pull/122\n[remove-mount]: https://github.com/microsoft/scalar/pull/222\n\nAdditional benefits to this change include making our release and\ninstallation mechanism much simpler. Users now only need to install one\ntool, not multiple, to take advantage of all of the benefits.\n\n### What remains in this repository?\n\nWe are keeping the `microsoft/scalar` repository available since we have\nlinked to it and want to make sure those links continue to work. We\nadded pointers in several places to navigate readers to the `microsoft/git`\nrepository for the latest versions.\n\nWe also have a large set of functional tests that verify that Scalar\nenlistments continue to work in a variety of advanced Git scenarios. These\ntests are incredibly helpful as we advance features in `microsoft/git`, so\nthose tests remain in this repository. We run them as part of pull request\nvalidation in `microsoft/git`, so no changes are made there without passing\nthis suite of tests.\n\n### What if I already installed Scalar and want the new version?\n\nWe are working to ensure that users on the .NET version of Scalar have a\npainless experience while changing to the new version.\n\n* On Windows, users can [install `microsoft/git`][windows-install] and the\n  installer will remove the .NET version and update any registered\n  enlistments to work with the new version.\n\n* On macOS, users should run `brew uninstall --cask scalar` or\n  `brew uninstall --cask scalar-azrepos` depending on their version and\n  then run `brew install --cask microsoft-git` to get the new version.\n  At the moment, users on macOS will need to re-run `scalar register`\n  on their enlistments to ensure they are registered for future upgrades.\n\n* On Linux, there is no established uninstall mechanism, but the .NET\n  version can be removed via `sudo rm -rf /usr/local/lib/scalar/`. Installing\n  the new version will overwrite the `scalar` binary in `/usr/local/bin`.\n  At the moment, users on Linux will need to re-run `scalar register`\n  on their enlistments to ensure they are registered for future upgrades.\n\nYou can check if the new Scalar version is installed correctly by running\n`scalar version` which should have the same output as `git version`.\n\n## License\n\nThe Scalar source code in this repo is available under the MIT license. See [License.md](License.md).\n\n## Code of Conduct\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][conduct-code].\nFor more information see the [Code of Conduct FAQ][conduct-FAQ] or contact [opencode@microsoft.com][conduct-email] with any additional questions or comments.\n\n[vfsforgit]: https://github.com/microsoft/vfsforgit\n[microsoft-git]: https://github.com/microsoft/git\n[releases]: https://github.com/microsoft/git/releases\n[windows-install]: https://github.com/microsoft/git#windows\n[docs]: https://github.com/microsoft/git/blob/HEAD/contrib/scalar/docs/index.md\n[scalar-cli]: https://github.com/microsoft/git/blob/HEAD/contrib/scalar/scalar.c\n[conduct-code]: https://opensource.microsoft.com/codeofconduct/\n[conduct-FAQ]: https://opensource.microsoft.com/codeofconduct/faq/\n[conduct-email]: mailto:opencode@microsoft.com\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.666015625,
          "content": "## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets Microsoft's [Microsoft's definition of a security vulnerability](https://docs.microsoft.com/en-us/previous-versions/tn-archive/cc751383(v=technet.10)) of a security vulnerability, please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://msrc.microsoft.com/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the the [Microsoft Security Response Center PGP Key page](https://www.microsoft.com/en-us/msrc/pgp-key-msrc).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://www.microsoft.com/msrc).\n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://microsoft.com/msrc/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://www.microsoft.com/en-us/msrc/cvd)."
        },
        {
          "name": "Scalar.FunctionalTests",
          "type": "tree",
          "content": null
        },
        {
          "name": "Scalar.MSBuild",
          "type": "tree",
          "content": null
        },
        {
          "name": "Scalar.Signing",
          "type": "tree",
          "content": null
        },
        {
          "name": "Scalar.TestInfrastructure",
          "type": "tree",
          "content": null
        },
        {
          "name": "Scalar.ruleset",
          "type": "blob",
          "size": 2.6015625,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RuleSet Name=\"Rules for Scalar\" Description=\"Code analysis rules for Scalar projects\" ToolsVersion=\"15.0\">\n  <Rules AnalyzerId=\"StyleCop.Analyzers\" RuleNamespace=\"StyleCop.Analyzers\">\n    <Rule Id=\"SA1003\" Action=\"None\" />\n    <Rule Id=\"SA1024\" Action=\"None\" />\n    <Rule Id=\"SA1025\" Action=\"None\" />\n    <Rule Id=\"SA1100\" Action=\"None\" />\n    <Rule Id=\"SA1107\" Action=\"None\" />\n    <Rule Id=\"SA1115\" Action=\"None\" />\n    <Rule Id=\"SA1118\" Action=\"None\" />\n    <Rule Id=\"SA1119\" Action=\"None\" />\n    <Rule Id=\"SA1120\" Action=\"None\" />\n    <Rule Id=\"SA1127\" Action=\"None\" />\n    <Rule Id=\"SA1128\" Action=\"None\" />\n    <Rule Id=\"SA1129\" Action=\"None\" />\n    <Rule Id=\"SA1130\" Action=\"None\" />\n    <Rule Id=\"SA1131\" Action=\"None\" />\n    <Rule Id=\"SA1133\" Action=\"None\" />\n    <Rule Id=\"SA1200\" Action=\"None\" />\n    <Rule Id=\"SA1208\" Action=\"None\" />\n    <Rule Id=\"SA1300\" Action=\"None\" />\n    <Rule Id=\"SA1310\" Action=\"None\" />\n    <Rule Id=\"SA1401\" Action=\"None\" />\n    <Rule Id=\"SA1512\" Action=\"None\" />\n    <Rule Id=\"SA1516\" Action=\"None\" />\n    <Rule Id=\"SA1600\" Action=\"None\" />\n    <Rule Id=\"SA1601\" Action=\"None\" />\n    <Rule Id=\"SA1602\" Action=\"None\" />\n    <Rule Id=\"SA1604\" Action=\"None\" />\n    <Rule Id=\"SA1605\" Action=\"None\" />\n    <Rule Id=\"SA1606\" Action=\"None\" />\n    <Rule Id=\"SA1607\" Action=\"None\" />\n    <Rule Id=\"SA1608\" Action=\"None\" />\n    <Rule Id=\"SA1610\" Action=\"None\" />\n    <Rule Id=\"SA1611\" Action=\"None\" />\n    <Rule Id=\"SA1612\" Action=\"None\" />\n    <Rule Id=\"SA1613\" Action=\"None\" />\n    <Rule Id=\"SA1614\" Action=\"None\" />\n    <Rule Id=\"SA1615\" Action=\"None\" />\n    <Rule Id=\"SA1616\" Action=\"None\" />\n    <Rule Id=\"SA1617\" Action=\"None\" />\n    <Rule Id=\"SA1618\" Action=\"None\" />\n    <Rule Id=\"SA1619\" Action=\"None\" />\n    <Rule Id=\"SA1620\" Action=\"None\" />\n    <Rule Id=\"SA1621\" Action=\"None\" />\n    <Rule Id=\"SA1622\" Action=\"None\" />\n    <Rule Id=\"SA1623\" Action=\"None\" />\n    <Rule Id=\"SA1624\" Action=\"None\" />\n    <Rule Id=\"SA1625\" Action=\"None\" />\n    <Rule Id=\"SA1626\" Action=\"None\" />\n    <Rule Id=\"SA1627\" Action=\"None\" />\n    <Rule Id=\"SA1633\" Action=\"None\" />\n    <Rule Id=\"SA1634\" Action=\"None\" />\n    <Rule Id=\"SA1635\" Action=\"None\" />\n    <Rule Id=\"SA1636\" Action=\"None\" />\n    <Rule Id=\"SA1637\" Action=\"None\" />\n    <Rule Id=\"SA1638\" Action=\"None\" />\n    <Rule Id=\"SA1640\" Action=\"None\" />\n    <Rule Id=\"SA1641\" Action=\"None\" />\n    <Rule Id=\"SA1642\" Action=\"None\" />\n    <Rule Id=\"SA1643\" Action=\"None\" />\n    <Rule Id=\"SA1648\" Action=\"None\" />\n    <Rule Id=\"SA1649\" Action=\"None\" />\n    <Rule Id=\"SA1651\" Action=\"None\" />\n    <Rule Id=\"SA1652\" Action=\"None\" />\n  </Rules>\n</RuleSet>\n"
        },
        {
          "name": "Scalar.sln",
          "type": "blob",
          "size": 2.5166015625,
          "content": "﻿\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio Version 16\r\nVisualStudioVersion = 16.0.30406.18\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{EB9427BB-456A-4319-8916-E782E0F5F6D3}\"\r\n\tProjectSection(SolutionItems) = preProject\r\n\t\tDependencies.props = Dependencies.props\r\n\t\tDirectory.Build.props = Directory.Build.props\r\n\t\tDirectory.Build.targets = Directory.Build.targets\r\n\t\tglobal.json = global.json\r\n\tEndProjectSection\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Scalar.FunctionalTests\", \"Scalar.FunctionalTests\\Scalar.FunctionalTests.csproj\", \"{C7E08779-6F45-4025-89E1-31346C9B234F}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Scalar.TestInfrastructure\", \"Scalar.TestInfrastructure\\Scalar.TestInfrastructure.csproj\", \"{77FC445D-FD03-4EE0-8582-7BD1437D9842}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Scalar.MSBuild\", \"Scalar.MSBuild\\Scalar.MSBuild.csproj\", \"{6B05E1DE-1C67-48F7-9A2A-E109D7252CF2}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{C7E08779-6F45-4025-89E1-31346C9B234F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{C7E08779-6F45-4025-89E1-31346C9B234F}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{C7E08779-6F45-4025-89E1-31346C9B234F}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{C7E08779-6F45-4025-89E1-31346C9B234F}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{77FC445D-FD03-4EE0-8582-7BD1437D9842}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{77FC445D-FD03-4EE0-8582-7BD1437D9842}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{77FC445D-FD03-4EE0-8582-7BD1437D9842}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{77FC445D-FD03-4EE0-8582-7BD1437D9842}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{6B05E1DE-1C67-48F7-9A2A-E109D7252CF2}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{6B05E1DE-1C67-48F7-9A2A-E109D7252CF2}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{6B05E1DE-1C67-48F7-9A2A-E109D7252CF2}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{6B05E1DE-1C67-48F7-9A2A-E109D7252CF2}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {FDE61E04-DC84-437F-A176-40CD62CDE05F}\r\n\tEndGlobalSection\r\nEndGlobal\r\n"
        },
        {
          "name": "Scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "Signing.targets",
          "type": "blob",
          "size": 1.66015625,
          "content": "<Project>\n  <PropertyGroup>\n    <IsSigningProject Condition=\"'$(IsSigningProject)' == ''\">false</IsSigningProject>\n  </PropertyGroup>\n\n  <!-- Include signing via MicroBuild if we have *FilesToSign -->\n  <ItemGroup Condition=\"'$(IsSigningProject)' == 'true'\">\n    <PackageReference Include=\"MicroBuild.Core\" />\n  </ItemGroup>\n\n  <!-- Check the OutDir property has been set -->\n  <Target Name=\"ValidateOutDirProperty\" BeforeTargets=\"ValidatePESignFiles;ValidatePESignFiles\" Condition=\"'$(IsSigningProject)' == 'true'\">\n    <Error Text=\"'OutDir' property must be set during build\" Condition=\"'$(OutDir)' == ''\" />\n  </Target>\n\n  <!-- Check all the PE files to sign exist -->\n  <Target Name=\"ValidatePESignFiles\" BeforeTargets=\"SignFiles\" Condition=\"'$(IsSigningProject)' == 'true'\"\n          Inputs=\"@(FilesToSign)\" Outputs=\"$(OutDir)\\validatesign.timestamp\">\n    <Error Text=\"File to sign not found: %(FilesToSign.Identity)\" Condition=\"!Exists('%(FilesToSign.Identity)')\" />\n    <Touch Files=\"$(OutDir)validatesign.timestamp\" AlwaysCreate=\"true\" />\n  </Target>\n\n  <!-- Check all the Mach-O files to sign exist -->\n  <Target Name=\"ValidateMacSignFiles\" BeforeTargets=\"SignMacFiles\" Condition=\"'$(IsSigningProject)' == 'true'\"\n          Inputs=\"@(MacFilesToSign)\" Outputs=\"$(OutDir)\\validatesign.timestamp\">\n    <Error Text=\"File to sign not found: %(MacFilesToSign.Identity)\" Condition=\"!Exists('%(MacFilesToSign.Identity)')\" />\n    <Touch Files=\"$(OutDir)validatesign.timestamp\" AlwaysCreate=\"true\" />\n  </Target>\n\n  <Target Name=\"_EnsureDirectoriesExist\" AfterTargets=\"PrepareForBuild\" Condition=\"@(MacFilesToSign->Count()) > 0\">\n    <MakeDir Directories=\"$(MacFilesTarget)\" />\n  </Target>\n</Project>\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.1103515625,
          "content": "{\n  \"msbuild-sdks\": {\n    \"Microsoft.Build.Traversal\": \"2.0.19\",\n    \"Microsoft.Build.NoTargets\": \"1.0.85\"\n  }\n}\n"
        },
        {
          "name": "nuget.config",
          "type": "blob",
          "size": 0.1923828125,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <clear />\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\n  </packageSources>\n</configuration>\n"
        }
      ]
    }
  ]
}