{
  "metadata": {
    "timestamp": 1736710825044,
    "page": 331,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Syomus/ProceduralToolkit",
      "stars": 2674,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.349609375,
          "content": "# See http://editorconfig.org/ for docs on this file\n\nroot = true\n\n[*]\nindent_style = space\n\n[*.{cs,shader,cginc}]\nindent_size = 4\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.{md,markdown}]\nend_of_line = lf\ncharset = utf-8\n# Trailing whitespace is significant in markdown\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1591796875,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# Scripts and shaders\n*.cs     text eol=lf diff=csharp\n*.shader text eol=lf\n*.cginc  text eol=lf"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 13.4208984375,
          "content": "# Changelog\n\n## [0.2.3] - 2020-03-02\nThis release adds Unity Package Manager support and [FastNoise](https://github.com/Auburns/FastNoise_CSharp) library integration.\n### Added\n* Integrated [FastNoise](https://github.com/Auburns/FastNoise_CSharp) library, see Noise example on its usage.\n* MeshDraft: Added new Capsule primitive.\n* PTUtils: Added CreateMeshRenderer and CreateTexture.\n* Geometry:\n  * Added PointOnSegment2, PointsOnSegment2, PointOnSegment3 and PointsOnSegment3.\n  * Added overrides with center for circle point samplers.\n* Segment2 and Segment3:\n  * Added GetPoints.\n  * Added center and aabb.\n* Circle2:\n  * Added GetPoints.\n  * Added perimeter and area.\n* Circle3: Added perimeter and area.\n* Sphere: Added area and volume.\n* Draw, DebugE, GizmosE, GLE: Added Segment2 and Segment3.\n\n### Changes\n* Folder structure and some of the namespaces were changed in accordance with the package manager guidelines.\n* Tests are now distributed with the library.\n* Minimum supported Unity version is now 2019.2.\n* Dropped support for the old scripting runtime.\n* Buildings: Renamed PlanningStrategy to Planner, ConstructionStrategy to Constructor.\n* LowPolyTerrain: Renamed classes and simplified a bit.\n* SDF: Include instructions are now installation type dependent.\n* RandomE: Renamed PointOnSegment and PointOnCircle generators.\n* Draw: Renamed DrawWireRay to DrawRay.\n\n### Fixes\n* Geometry: Fixed PointsInCircle3* returning incorrect type.\n* MeshDraft:\n  * Fixed uv-less cylinders missing sides.\n  * Fixed normal calculation for degenerate quads in AddQuad.\n  * Fixed an exception in FlatRevolutionSurface ([#58](https://github.com/Syomus/ProceduralToolkit/issues/58)).\n* MeshFilterExtension: Removed useless Instantiate breaking the link to the mesh.\n\n\n## [0.2.2] - 2018-09-18\nThis release brings polygon tessellation, clipping and offsetting, straight skeleton generation and a completely rewritten Buildings example.\n### Features\n* Integrated [LibTessDotNet](https://github.com/speps/LibTessDotNet) library, see Tessellator wrapper class and its example for details.\n* Integrated [Clipper](http://www.angusj.com/delphi/clipper.php) library, use PathClipper and PathOffsetter for seamless interoperability with Unity.\n* Added [straight skeleton](https://en.wikipedia.org/wiki/Straight_skeleton) generator.\n* New architecture for the Buildings example, all roof types now support convex and concave polygons.\n* Added Circle3.\n* Added serializable RendererProperties, use Renderer.ApplyProperties extension to apply them to a target renderer.\n\n### Improvements\n* Geometry:\n  * Added OffsetPolygon, GetAngle, GetAngleBisector, Polygon2, StarPolygon2, PointsInCircle*, PointsOnSphere, GetRect and GetCircumradius.\n* Segment2 and Segment3:\n  * Added direction and length.\n* Intersect3D:\n  * Added SphereSphere.\n* VectorE:\n  * Added RotateCCW, RotateCW45, RotateCCW45, RotateCW90 and RotateCCW90.\n* PTUtils:\n  * Added new constants: Sqrt05, Sqrt2, Sqrt5, GoldenAngle.\n* MeshDraft:\n  * Added calculateBounds flag for ToMesh.\n  * Added support for 32 bit Mesh index buffers.\n* CompoundMeshDraft:\n  * Added calculateBounds flag for ToMeshWithSubMeshes.\n  * Added support for 32 bit Mesh index buffers.\n  * Added Move, Rotate and other methods from MeshDraft.\n\n### Changes\n* Minimum supported Unity version is now 2018.1.\n* Renamed PTUtils string constants.\n* Renamed Circle to Circle2.\n* Moved `Examples\\Resources` to `Examples\\Common\\Resources`.\n* MeshDraft: Made normals optional in AddTriangle and AddQuad.\n* Intersect2D: Removed LineLine overload with IntersectionType return type.\n\n\n## [0.2.1] - 2018-06-20\nThis release brings new computational geometry algorithms and geometric primitives.\n### Features\n* Added Circle, Sphere, Line2, Line3, Segment2 and Segment3. All new primitives are Serializable and IFormattable.\n* Added many new geometry algorithms. See [this wiki page](https://github.com/Syomus/ProceduralToolkit/wiki/Geometry-algorithms) for a full matrix.\n* Unit tests for the toolkit are now public and can be found [here](https://github.com/Syomus/ProceduralToolkit.Tests).\n\n### Improvements\n* Added assembly definition files.\n* ColorHSV: Added new casting and arithmetic operators.\n* CompoundMeshDraft: Fixed conversion to Mesh for Unity 2017.3.\n* LowPolyTerrain: Added MeshCollider.\n* RandomE: Added rotation2, PointOnSegment overloads, PointOnCircle, PointInCircle, PointOnSphere, PointInSphere.\n* SDF: Fixed the WebGL build.\n\n### Changes\n* Minimum supported Unity version is now 2017.3.\n* Split geometry algorithms into separate classes: Closest, Distance and Intersect.\n* Moved PointOn* methods from PTUtils to Geometry.\n\n\n## [0.2.0] - 2018-01-05\nThis release is mainly focused on refactoring and documenting of the codebase, expect better performance and overall stability. \nThat being said, there are a few new features as well.\n### Features\n* Added a new shader library with signed distance functions and easings, see `ProceduralToolkit\\Shaders\\*.cginc` files and `ProceduralToolkit\\Examples\\SDF` folder for details.\n* Added a new Geometry class with many computational geometry algorithms (distance, intersection, closest point, etc.).\n* Added a new example showing usage of DebugE, GLE and GizmosE, see `ProceduralToolkit\\Examples\\Drawing` folder for details.\n* Added a new CompoundMeshDraft class for generation of large meshes and submeshes.\n\n### Improvements\n* Lots of bugfixes and optimizations.\n* ArrayE:\n  * Visits now support IEqualityComparer.\n* CellularAutomata:\n  * CellularAutomaton.Ruleset is now Serializable and has a RulesetDrawer with a dropdown with common rulesets.\n* ColorHSV:\n  * ColorHSV is now Serializable and has a PropertyDrawer.\n* Directions:\n  * Added DirectionsExtensions to simplify the usage of flags.\n* GLE:\n  * Added BeginLines method, see usage in the Drawer example.\n* MeshDraft:\n  * Refactored and uv-mapped all primitives (except dodecahedron), use generateUV flag to control the generation of uv.\n  * Most of the MeshDraft methods now return the reference to the draft to allow chaining of operations.\n  * New API for construction: AddTriangle, AddQuad, AddTriangleFan, AddTriangleStrip, AddBaselessPyramid, AddFlatTriangleBand and AddFlatQuadBand.\n* RandomE:\n  * Added xRotation, yRotation and zRotation.\n  * Added insideUnitCircle3XY, insideUnitCircle3XZ and insideUnitCircle3YZ.\n  * Added PointOnSegment, PointInRect and PointOnRect.\n* TextureE:\n  * Added overloads for RectInt and Color arrays.\n* VectorE:\n  * Added ToVector2XY, ToVector2XZ and ToVector2YZ for Vector3.\n  * Added Angle360 for Vector3.\n* Breakout:\n  * The game level now resets when all bricks are destroyed.\n  * Added a simple pool for bricks.\n\n### Changes\n* Minimum supported Unity version is now 2017.2.\n* Renamed most of the examples and restructured folders.\n* Removed Boids example.\n* Removed Vector2Int, use UnityEngine.Vector2Int instead.\n* ArrayE:\n  * Renamed all visit methods.\n* CellularAutomata:\n  * Moved CellularAutomaton to the core library.\n  * Removed CellState and replaced it with bool to simplify integration.\n* Draw:\n  * Separated raster and vector methods into partial classes.\n* MeshDraft:\n  * Removed some of the primitives, use new MeshDraft.Add* methods instead.\n* PTUtils:\n  * Moved vector operations out from PTUtils to VectorE.\n* VectorE:\n  * Renamed Only* methods.\n* Buildings:\n  * Foundation polygon winding is now clockwise.\n  * The generated mesh is now split into submeshes and uses multiple materials.\n* Characters:\n  * New sprites for characters.\n  * Split CharacterGenerator into a generator, a configurator and a character.\n* Mazes:\n  * Removed RandomBreadthFirstTraversal algorithm.\n* ProceduralToolkitMenu:\n  * Removed \"About\" window.\n  * Removed shapes from the editor menu that duplicated the Unity functionality.\n\n\n## [0.1.9] - 2017-03-23\n### Features\n* Added CharacterGenerator example with integrated NameGenerator which replaces Datasets class\n* Added VectorE class with useful extensions for vectors\n* Rewritten building generator with new layouting system\n* Added debug shaders for UV1, UV2, normals, tangents and bitangents\n\n### Improvements\n* MeshDraft:\n  * Added missing tangents and uv channels\n  * Added Clear method to clear all vertex data\n  * Added ToMesh converter with ref Mesh\n  * Added Serializable attribute\n  * Added vertexCount shortcut\n  * Added FlipUVHorizontally, FlipUVVertically and Spherify with similar extensions in MeshE\n* Refactored all examples, added undo support for in-editor generation\n* Added Draw.WireRay with wrappers in DebugE, GizmosE, GLE\n* Added PTUtils.Angle360, PointOnSpheroid and InverseLerp\n* Removed extra triangles from dodecahedron constructor\n* Added cube, spheroid, teardrop and revolution surface constructors\n* A few fixes to remove warnings in Unity 5.6\n* Added RandomE.PointInBounds\n* Added ColorHSV.ToHtmlStringRGB and Color.ToHtmlStringRGB\n* Added extensions for LinkedListNode: NextOrFirst and PreviousOrLast\n* Updated documentation and comments\n* A few bugfixes and simplifications\n\n### Changes\n* Dropped support for Unity 5.3\n* Removed Datasets class and name generators from RandomE and with CharacterGenerator example \ndue to error in IL2CPP compiler which was preventing builds for Android and iOS. \nName generators are now in NameGenerator class and string constants are in PTUtils.\n* Replaced CircularList with extension methods in ArrayE: GetLooped and SetLooped\n* Renamed partial Hexahedron constructor to PartialBox\n* Moved all common example classes to `ProceduralToolkit\\Examples\\Common`\n\n\n## [0.1.8] - 2016-09-06\n### Features\n* Added GizmosE, GLE and DebugE helper classes with extra drawing methods such as DrawWireCircle, \nDrawWireHemisphere, DrawWireCone, and others. GizmosE and DebugE have API similar to Gizmos and Debug, \nGLE is just a bunch of wrappers over GL.Vertex which follow Gizmos convention.\n* Added Draw helper class with generic drawing methods\n* Added Gradient Skybox shader\n* Added new random color generators: RandomE.ColorHue, ColorSaturation and ColorValue\n* Added static palette generators: ColorHSV.GetAnalogousPalette, GetTriadicPalette and GetTetradicPalette\n* Added random palette generators: RandomE.AnalogousPalette, TriadicPalette, TetradicPalette\n* 3D examples now have dynamic generated skyboxes\n* Added custom inspectors for BuildingGenerator, ChairGenerator and LowPolyTerrainGenerator. \nChanging values does not cause regeneration, but otherwise they behave the same way as UI controls and work in editor and play mode.\n\n### Improvements\n* Optimized examples, mesh and texture helper classes to produce less garbage\n* Fixed shadowcasting in vertex color shaders\n* Fixed typos and bugs in some classes\n* Added TextureE.Clear overload with ref array\n* Added PTUtils.SignedAngle for 2D and 3D vectors\n* Added PTUtils.PointsOnCircle3XY and PTUtils.PointsOnCircle3YZ\n* Added RandomE.onUnitCircle3XY, RandomE.onUnitCircle3XZ, RandomE.onUnitCircle3YZ\n* TerrainMesh received a full rewrite and is now LowPolyTerrainGenerator\n* Added ColorHSV.WithH, WithS, WithV, WithA, WithOffsetH, Lerp and various useful methods (ToString, GetHashCode and the like)\n\n### Changes\n* Dropped support for Unity 5.2\n* Renamed PTUtils.PointsOnCircle3 to PTUtils.PointsOnCircle3XZ\n* Renamed Khrushchyovka to BuildingGenerator to avoid confusion\n* PTUtils.PointsOnCircle methods now receive angle in degrees instead of radians\n* Renamed RandomE.onUnitCircle to RandomE.onUnitCircle2\n* Renamed TerrainMesh to LowPolyTerrainGenerator\n* Moved CameraRotator to Examples\\UI\n* Replaced RGB<->HSV conversion methods with Unity implementation\n* Removed \"Procedural Toolkit/Unlit Color\" shader, use \"Unlit/Color\" instead\n* RandomE.colorHSV now returns ColorHSV\n* Moved drawing methods from PTUtils to Draw\n\n\n## [0.1.7] - 2015-12-19\n### Features\n* Added ColorHSV class\n* Added Vector2Int class\n* Added ArrayE class\n* Added CircularList class\n* Added CellularAutomaton example\n\n### Improvements\n* Added PTUtils.DrawFilledCircle\n* Refactored drawing methods, eliminated overdraw\n* Fixed a few ui and generator bugs in examples\n\n### Changes\n* Removed ColorE.HSVToRGB, use ColorHSV instead\n* New CameraRotator behaviour, now requires Image to operate\n* PTUtils.WuLine is now DrawAALine, BresenhamLine is DrawLine\n\n\n## [0.1.6] - 2015-10-02\n* Major refactoring, new UI for all examples\n* Removed ColorE.ToHex and ColorE.FromHex\n* Moved all static MeshDraft constructors from MeshE to MeshDraft\n* Added PTUtils.PointsOnCircle3 and PTUtils.PointsOnCircle2\n* Added RandomBreadthFirstTraversal maze algorithm\n* Added datasets for names and last names\n* RandomE\n  * Removed meshDraft\n  * Added onUnitCircle, insideUnitSquare, onUnitSquare, insideUnitCube, name constructors, new string and char constructors\n* TextureE\n  * Removed Texture2D constructors\n  * Added DrawCircle, DrawGradient and DrawGradientRect\n\n\n## [0.1.5] - 2015-05-14\n* Unity 5 support\n* Added mesh saver\n* Added new example: Breakout\n* Added Standard Vertex Color shader\n\n\n## [0.1.4] - 2015-02-08\n* Added new examples: Primitives and Mazes\n* Added Texture extensions\n* Added Bresenham and Wu line drawing algorithms\n\n\n## [0.1.3] - 2014-11-15\n* Added new example: Khrushchyovka\n* Added knapsack problem solver\n* Added new Color extensions\n* Added random choice for Dictionary\n* Added new mesh drafts\n* Added specular vertex color shader\n* Improved examples\n\n\n## [0.1.2] - 2014-11-10\n* Added new example: chair generator\n* Small additions and fixes\n\n\n## [0.1.1] - 2014-10-26\n* Added new primitives: cylinder and sphere\n* Added mesh extensions: move, rotate, scale, paint, flip faces\n* Added RandomE.Range methods\n* Added PTUtils methods for points on circle and sphere\n* Improved documentation\n\n\n## [0.1] - 2014-10-13\n* First release\n"
        },
        {
          "name": "CHANGELOG.md.meta",
          "type": "blob",
          "size": 0.154296875,
          "content": "fileFormatVersion: 2\nguid: a38f1a7ea7d890447af8f49190cc420c\nTextScriptImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "Editor.meta",
          "type": "blob",
          "size": 0.16796875,
          "content": "fileFormatVersion: 2\nguid: 50de3855b4920d1418f38faef4ac2903\nfolderAsset: yes\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "Editor",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0419921875,
          "content": "MIT License\n\nCopyright (c) Daniil Basmanov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "LICENSE.md.meta",
          "type": "blob",
          "size": 0.154296875,
          "content": "fileFormatVersion: 2\nguid: f8a3ee29a9720094fa1169eeef9adfc4\nTextScriptImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.9013671875,
          "content": "# Procedural Toolkit 0.2.4-preview\n\nProcedural Toolkit is a procedural generation library for the Unity game engine.\n\n**Warning: This is a programming toolkit, editor support is limited.**\n\n[![Donate](https://syomus.com/ProceduralToolkit/donate_paypal.gif)](https://www.paypal.me/ProceduralToolkit/5usd)\n[![Donate](https://syomus.com/ProceduralToolkit/donate_kofi.png)](https://ko-fi.com/ProceduralToolkit) | \n[GitHub](https://github.com/Syomus/ProceduralToolkit) |\n[Asset Store](https://assetstore.unity.com/packages/tools/utilities/procedural-toolkit-16508) |\n[Issues](https://github.com/Syomus/ProceduralToolkit/issues) |\n[Support email](mailto:proceduraltoolkit@syomus.com)\n\n## Installation instructions\nRequires **Unity 2022.3 LTS** or later. Tested on Windows, WebGL, Android and iOS.\n\nThere are several ways to install Procedural Toolkit:\n\n### Package Manager\nThe best way is to install this library as a [Git package](https://docs.unity3d.com/Manual/upm-git.html) using the Package Manager.\nFirst, make sure that you to have Git installed and available in your system's PATH.\n\nThen you can add the package using the link below, notice the upm branch at the end of the line:\n```\nhttps://github.com/Syomus/ProceduralToolkit.git#upm\n```\n\nIf you don't want to use Git, you can download this library as an archive and install it as a [local package](https://docs.unity3d.com/Manual/upm-ui-local.html).\n\n### Asset Store or .unitypackage\nThe other way is to import a package from the [Asset Store](https://assetstore.unity.com/packages/tools/utilities/procedural-toolkit-16508) \nor the [Releases page](https://github.com/Syomus/ProceduralToolkit/releases).\nIf you have any previous versions of the toolkit installed, it is highly recommended to delete them before importing a newer version.\n\n### Getting started\nAfter installation you can import `ProceduralToolkit` namespace and start building your own PCG systems:\n```C#\nusing UnityEngine;\nusing ProceduralToolkit;\n\npublic class ReadmeExample : MonoBehaviour\n{\n    private void Update()\n    {\n        Debug.Log(string.Format(\"<color=#{0}>{0}</color>\", RandomE.colorHSV.ToHtmlStringRGB()));\n    }\n}\n```\n\nIf you are using [Assembly Definitions](https://docs.unity3d.com/Manual/ScriptCompilationAssemblyDefinitionFiles.html), \nyou will also need to add `ProceduralToolkit` as a reference.\n\n## I have a problem with Procedural Toolkit\nFirst, please search the [open issues](https://github.com/Syomus/ProceduralToolkit/issues?q=is%3Aopen)\nand [closed issues](https://github.com/Syomus/ProceduralToolkit/issues?q=is%3Aclosed)\nto see if your issue hasn't already been reported. If it does exist, add a\n:thumbsup: to the issue to indicate this is also an issue for you, and add a\ncomment if there is extra information you can contribute.\n\nIf you can't find a matching issue, open a [new issue](https://github.com/Syomus/ProceduralToolkit/issues/new/choose),\nchoose the right template and provide us with enough information to investigate further. \nAlternatively, you can send a message to the [support email](mailto:proceduraltoolkit@syomus.com).\n\n## Contributing\nSee [CONTRIBUTING](/.github/CONTRIBUTING.md) for a full guide on how you can help.\n\nIf you're looking for something to work on, check out the [help wanted](https://github.com/Syomus/ProceduralToolkit/issues?q=is%3Aissue+is%3Aopen+label%3A\"help+wanted\") label.\n\nIf you just want to show your appreciation, you can send a donation through [PayPal](https://www.paypal.me/ProceduralToolkit/5usd) or [Ko-fi](https://ko-fi.com/ProceduralToolkit).\n\n## Toolkit structure\n### Runtime/\n* [ArrayE](/Runtime/ArrayE.cs): Various Array and List extensions, such as looped getters/setters and flood fills.\n* [CellularAutomaton](/Runtime/CellularAutomaton.cs): Generic cellular automaton for two-state rulesets. \nCommon rulesets can be found in CellularAutomaton.Ruleset.\n* [ClipperUtility](/Runtime/ClipperUtility.cs): Utility class for conversion of Clipper data from and to Unity format.\n* [ColorE](/Runtime/ColorE.cs): Color extensions, HTML colors, Gradient constructors.\n* [ColorHSV](/Runtime/ColorHSV.cs): Serializable representation of color in HSV model.\n* [CompoundMeshDraft](/Runtime/CompoundMeshDraft.cs): Helper class for mesh generation supporting large meshes and submeshes.\n* [DebugE](/Runtime/DebugE.cs): Collection of drawing methods similar to Debug.DrawLine.\n* [Directions](/Runtime/Directions.cs): Enum with direction flags along three axes.\n* [Draw](/Runtime/Draw.cs): Collection of generic vector drawing algorithms.\n* [DrawRaster](/Runtime/DrawRaster.cs): Collection of generic raster drawing algorithms.\n* [GizmosE](/Runtime/GizmosE.cs): Collection of drawing methods similar to Gizmos.\n* [GLE](/Runtime/GLE.cs): Collection of GL drawing methods similar to Gizmos.\n* [MeshDraft](/Runtime/MeshDraft.cs): Helper class for mesh generation.\n* [MeshDraftPrimitives](/Runtime/MeshDraftPrimitives.cs): Constructors for MeshDraft primitives.\n* [MeshE](/Runtime/MeshE.cs): Mesh extensions.\n* [PathClipper](/Runtime/PathClipper.cs) and [PathOffsetter](/Runtime/PathOffsetter.cs): [Clipper](http://www.angusj.com/delphi/clipper.php) library wrappers.\n* [PTUtils](/Runtime/PTUtils.cs): Various useful methods and constants.\n* [RandomE](/Runtime/RandomE.cs): Class for generating random data. Contains extensions for arrays and other collections.\n* [RendererProperties](/Runtime/RendererProperties.cs): \nSerializable Renderer properties, use Renderer.ApplyProperties extension to apply them to a target renderer.\n* [Tessellator](/Runtime/Tessellator.cs): [LibTessDotNet](https://github.com/speps/LibTessDotNet) library wrapper.\n* [TextureE](/Runtime/TextureE.cs): Texture extensions.\n* [VectorE](/Runtime/VectorE.cs): Vector extensions.\n\n### Runtime/Buildings/\n* [BuildingGenerator](/Runtime/Buildings/BuildingGenerator.cs): \nThe main generation class. Generates buildings based on input configuration and strategies, reusable. See examples for details.\n* [ILayout](/Runtime/Buildings/Interfaces/ILayout.cs), [ILayoutElement](/Runtime/Buildings/Interfaces/ILayoutElement.cs), \n[IConstructible](/Runtime/Buildings/Interfaces/IConstructible.cs), [Layout](/Runtime/Buildings/Layout.cs), \n[HorizontalLayout](/Runtime/Buildings/HorizontalLayout.cs), [VerticalLayout](/Runtime/Buildings/VerticalLayout.cs): \nInterfaces and classes used in facade layout generation.\n* [IFacadePlanner](/Runtime/Buildings/Interfaces/IFacadePlanner.cs), [IFacadeConstructor](/Runtime/Buildings/Interfaces/IFacadeConstructor.cs), \n[IRoofPlanner](/Runtime/Buildings/Interfaces/IRoofPlanner.cs), [IRoofConstructor](/Runtime/Buildings/Interfaces/IRoofConstructor.cs): \nInterfaces for strategies controlling the details of the building generation process.\n* [FacadePlanner](/Runtime/Buildings/FacadePlanner.cs), [FacadeConstructor](/Runtime/Buildings/FacadeConstructor.cs), \n[RoofPlanner](/Runtime/Buildings/RoofPlanner.cs), [RoofConstructor](/Runtime/Buildings/RoofConstructor.cs): \nSerializable wrappers for strategy interfaces.\n* [ProceduralRoofs](/Runtime/Buildings/ProceduralRoofs.cs): A collection of roof constructors for the building generator.\n\n### Runtime/Geometry/\nSee [this wiki page](https://github.com/Syomus/ProceduralToolkit/wiki/Geometry-algorithms) for a matrix of available algorithms.\n* [Circle2](/Runtime/Geometry/Circle2.cs), [Circle3](/Runtime/Geometry/Circle3.cs), [Sphere](/Runtime/Geometry/Sphere.cs), \n[Line2](/Runtime/Geometry/Line2.cs), [Line3](/Runtime/Geometry/Line3.cs), \n[Segment2](/Runtime/Geometry/Segment2.cs), [Segment3](/Runtime/Geometry/Segment3.cs): \nRepresentations of geometric primitives.\n* [Geometry](/Runtime/Geometry/Geometry.cs): Utility class for computational geometry algorithms, contains various point samplers and helper methods.\n* [Closest2D](/Runtime/Geometry/Closest2D.cs), [Closest3D](/Runtime/Geometry/Closest3D.cs): \nCollection of closest point(s) algorithms.\n* [Distance2D](/Runtime/Geometry/Distance2D.cs), [Distance3D](/Runtime/Geometry/Distance3D.cs): \nCollection of distance calculation algorithms.\n* [Intersect2D](/Runtime/Geometry/Intersect2D.cs), [Intersect3D](/Runtime/Geometry/Intersect3D.cs): \nCollection of intersection algorithms.\n* [IntersectionType](/Runtime/Geometry/IntersectionType.cs): Enum used in intersection algorithms.\n* [Intersections](/Runtime/Geometry/Intersections) folder: Structures containing information about intersections.\n\n### Runtime/Geometry/StraightSkeleton/\nClasses used in [straight skeleton](https://en.wikipedia.org/wiki/Straight_skeleton) generation.\n* [StraightSkeletonGenerator](/Runtime/Geometry/StraightSkeleton/StraightSkeletonGenerator.cs): \nA straight skeleton generator, computes a straight skeleton for the input polygon, reusable. \nThe generation algorithm is loosely based on the work of Tom Kelly (2014) \n[Unwritten procedural modeling with the straight skeleton](http://www.twak.co.uk/2014/02/unwritten-procedural-modeling-with.html).\n* [StraightSkeleton](/Runtime/Geometry/StraightSkeleton/StraightSkeleton.cs): A straight skeleton representation.\n* [Plan](/Runtime/Geometry/StraightSkeleton/Plan.cs): Representation of the active plan during generation process.\n\n### Runtime/ClipperLib/\nThe [Clipper](http://www.angusj.com/delphi/clipper.php) library. \nUse [PathClipper](/Runtime/PathClipper.cs) and [PathOffsetter](/Runtime/PathOffsetter.cs) for seamless interoperability with Unity.\n\n### Runtime/LibTessDotNet/\nThe [LibTessDotNet](https://github.com/speps/LibTessDotNet) library. \nThe recommended use is through the wrapper class [Tessellator](/Runtime/Tessellator.cs).\n\n### Runtime/FastNoiseLib/\nThe [FastNoise](https://github.com/Auburns/FastNoise_CSharp) library.\n\n### Shaders/\nDepending on the installation type, the shader library can be used like this:\n```HLSL\n#include \"Packages/com.syomus.proceduraltoolkit/Shaders/SDF.cginc\"\n```\nOr like this:\n```HLSL\n#include \"Assets/ProceduralToolkit/Shaders/SDF.cginc\"\n```\n* [Common.cginc](/Shaders/Common.cginc): Collection of shaping and debug functions.\n* [Easing.cginc](/Shaders/Easing.cginc): Normalized easing functions.\n* [SDF.cginc](/Shaders/SDF.cginc): Collection of signed distance functions.\n* [Transitions.cginc](/Shaders/Transitions.cginc): Collection of transition animations.\n* [Gradient Skybox](/Shaders/Gradient%20Skybox.shader): Simple gradient skybox.\n* [Debug](/Shaders/Debug) folder: Debug shaders for some of the most common mesh channels.\n* [VertexColor](/Shaders/VertexColor) folder: Textureless shaders for use with color information from the vertices.\n\n### Editor/\n* [ColorHSVDrawer](/Runtime/Editor/ColorHSVDrawer.cs): PropertyDrawer for ColorHSV.\n* [MeshFilterExtension](/Runtime/Editor/MeshFilterExtension.cs): Mesh saving utility available at `MeshFilter context menu > Save Mesh`.\n* [ProceduralToolkitMenu](/Runtime/Editor/ProceduralToolkitMenu.cs): Submenu with constructors for primitives at `GameObject > Procedural Toolkit`.\n* [RulesetDrawer](/Runtime/Editor/RulesetDrawer.cs): PropertyDrawer for CellularAutomaton.Ruleset.\n\n### Tests/\nTests for the library\n\n## Samples\n\n### [Buildings](https://syomus.com/ProceduralToolkit/Buildings)\n![](https://syomus.com/ProceduralToolkit/screenshot-buildings.png)\n\nA fully procedural building generator, creates an entire mesh from scratch and paints it's vertices. \nKeep in mind that the generated mesh has no uv map so using it with Standard shader is pointless.\n* BuildingGeneratorComponent: A simple minimal example on how you can use BuildingGenerator\n* BuildingGeneratorConfigurator: A configurator for BuildingGenerator with UI and editor controls.\n* BuildingGeneratorReuse: An example on how you can reuse the same generator to generate multiple buildings.\n* ProceduralFacadePlanner: A facade planning strategy, controls the layouts of the facades.\n* ProceduralFacadeConstructor: A facade construction strategy, used in conjunction with ProceduralFacadePlanner.\n* ProceduralRoofPlanner: A roof planning strategy, generates a roof description based on the input config.\n* ProceduralRoofConstructor: A roof construction strategy, used in conjunction with ProceduralRoofPlanner.\n* ProceduralFacadeElements: A collection of fully procedural facade panels for the building generator.\n* PolygonAsset: A ScriptableObject container for vertices.\n* BuildingGeneratorConfiguratorEditor: A custom inspector for BuildingGeneratorConfigurator.\n\n### [Chairs](https://syomus.com/ProceduralToolkit/Chairs)\n![](https://syomus.com/ProceduralToolkit/screenshot-chairs.png)\n\nA fully procedural chair generator, creates an entire mesh from scratch and paints it's vertices.\n* ChairGenerator: Main generator class. Generates chairs based on input configuration.\n* ChairGeneratorConfigurator: Configurator for ChairGenerator with UI and editor controls.\n* ChairGeneratorConfiguratorEditor: Custom inspector for ChairGeneratorConfigurator.\n* Armrests, Backs, Stretchers: Chair parts constructors.\n\n### [Low Poly Terrain](https://syomus.com/ProceduralToolkit/LowPolyTerrain)\n![](https://syomus.com/ProceduralToolkit/screenshot-low-poly-terrain.png)\n\nA simple low poly terrain generator based on fractal noise. \nDoesn't support chunking or anything like that, just an example of how you can use a noise function in a plane generation algorithm.\n* LowPolyTerrainGenerator: Main generator class. Generates terrain based on input configuration.\n* LowPolyTerrainExample: Configurator for LowPolyTerrainGenerator with UI and editor controls.\n* LowPolyTerrainExampleEditor: Custom inspector for LowPolyTerrainExample.\n\n### [Signed Distance Functions](https://syomus.com/ProceduralToolkit/SDF)\n![](https://syomus.com/ProceduralToolkit/screenshot-sdf.png)\n\nA collection of shaders showing how you can utilise functions from the shader library.\n* StarPolygon: A simple shader that draws a star polygon and shows a difference between \"normal\" and \"cheap\" functions.\n* Shapes: A demonstration of some of the available shapes.\n* DistanceOperations: A square and a circle combined with different functions.\n* Easing: All easing functions in one shader showing the ease curve and the easing motion.\n* Transitions: An example showing the sequencing and animation techniques.\n* Animation: A more complex example on how you can create patterns and animate them in shader.\n\n### [Cellular Automata](https://syomus.com/ProceduralToolkit/CellularAutomata)\n![](https://syomus.com/ProceduralToolkit/screenshot-cellular-automata.png)\n\nA demonstration of CellularAutomaton from the main library, draws the automaton simulation on a texture. \nNote that some of the rulesets need noise value different from the default setting.\n* CellularAutomatonConfigurator: Configurator for the automaton with UI controls.\n\n### [Mazes](https://syomus.com/ProceduralToolkit/Mazes)\n![](https://syomus.com/ProceduralToolkit/screenshot-mazes.png)\n\nA generic maze generator, draws the maze generation process on a texture.\n* MazeGenerator: Main generator class. Generates mazes based on input configuration.\n* MazeGeneratorConfigurator: Configurator for MazeGenerator with UI controls.\n* Maze: Maze graph representation.\n\n### [Noise](https://syomus.com/ProceduralToolkit/Noise)\n![](https://syomus.com/ProceduralToolkit/screenshot-noise.png)\n\nAn example demonstrating various noise types from the [FastNoise](https://github.com/Auburns/FastNoise_CSharp) library.\n\n### [Breakout](https://syomus.com/ProceduralToolkit/Breakout)\n![](https://syomus.com/ProceduralToolkit/screenshot-breakout.png)\n\nA [Breakout](https://en.wikipedia.org/wiki/Breakout_(video_game)) clone with procedurally generated levels.\n* Breakout: Game engine and level generator.\n* BreakoutConfigurator: Configurator for the game with UI controls.\n* Brick: Disables game object on collision.\n\n### [Characters](https://syomus.com/ProceduralToolkit/Characters)\n![](https://syomus.com/ProceduralToolkit/screenshot-characters.gif)\n\nA simple 2D character generator. Sprites made by <a href=\"http://kenney.nl/\">Kenney</a>.\n* Character: A container for sprite renderers\n* CharacterGenerator: Generates a sprite set and a name for character.\n* CharacterGeneratorConfigurator: Configurator for CharacterGenerator.\n* NameGenerator: Generates a random name from a large array of names.\n\n### [Primitives](https://syomus.com/ProceduralToolkit/Primitives)\n![](https://syomus.com/ProceduralToolkit/screenshot-primitives.png)\n\nA demonstration of some of the available MeshDraft primitives.\n* Cylinder, Dodecahedron, FlatSphere, Hexahedron...: Mesh generators that can be configured via the inspector.\n\n### Drawing\nThree identical shapes made with three different methods: DebugE, GLE and GizmosE.\n\n### Clipper\nA simple example demonstrating the api's of PathClipper and PathOffsetter.\n\n### Tessellator\nAn example showing the usage of Tesselator.\n\n### StraightSkeleton\nAn StraightSkeletonGenerator example showing how you can generate a straight skeleton from a polygon and use the result.\n\n### Common\nUI prefabs and the skybox material used in examples.\n* SkyBoxGenerator: Skybox generator, assuming that scene uses gradient skybox shader, animates transitions to new parameters every few seconds.\n* ButtonControl, SliderControl, TextControl, ToggleControl: UI controls for generators.\n* CameraRotator: Orbiting camera controller.\n* ConfiguratorBase: Base class for configurators.\n\n## License\n[MIT](LICENSE.md)\n"
        },
        {
          "name": "README.md.meta",
          "type": "blob",
          "size": 0.154296875,
          "content": "fileFormatVersion: 2\nguid: 76b441c7d05f6d747a37fe762d58f7bd\nTextScriptImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "Runtime.meta",
          "type": "blob",
          "size": 0.16796875,
          "content": "fileFormatVersion: 2\nguid: fa92eea92cf729c43b3aefff4385fcda\nfolderAsset: yes\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "Runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "Samples.meta",
          "type": "blob",
          "size": 0.16796875,
          "content": "fileFormatVersion: 2\nguid: b04a036a7014bb34c9d7df06e844d2e0\nfolderAsset: yes\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "Samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "Shaders.meta",
          "type": "blob",
          "size": 0.16796875,
          "content": "fileFormatVersion: 2\nguid: 11df2e07ca9e90b43be582d787e1c5e1\nfolderAsset: yes\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "Shaders",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tests.meta",
          "type": "blob",
          "size": 0.16796875,
          "content": "fileFormatVersion: 2\nguid: ad1621d78a8c06a4396ec9c8eb68c9f0\nfolderAsset: yes\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.5380859375,
          "content": "{\n  \"name\": \"com.syomus.proceduraltoolkit\",\n  \"version\": \"0.2.4-preview\",\n  \"displayName\": \"Procedural Toolkit\",\n  \"description\": \"Procedural generation library for Unity\",\n  \"unity\": \"2022.3\",\n  \"author\": {\n    \"name\": \"Syomus\",\n    \"email\": \"proceduraltoolkit@syomus.com\",\n    \"url\": \"https://github.com/Syomus/ProceduralToolkit\"\n  },\n  \"samples\": [\n    {\n      \"displayName\": \"Samples\",\n      \"description\": \"Samples\",\n      \"path\": \"Samples~\"\n    }\n  ],\n  \"dependencies\": {\n    \"com.unity.ugui\": \"1.0.0\",\n    \"com.unity.mathematics\": \"1.2.6\"\n  }\n}"
        },
        {
          "name": "package.json.meta",
          "type": "blob",
          "size": 0.1591796875,
          "content": "fileFormatVersion: 2\nguid: 0d2e7df93640f4e499f95cda496e4134\nPackageManifestImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        }
      ]
    }
  ]
}