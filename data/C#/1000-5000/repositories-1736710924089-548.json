{
  "metadata": {
    "timestamp": 1736710924089,
    "page": 548,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Deadcows/MyBox",
      "stars": 1988,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "Attributes.meta",
          "type": "blob",
          "size": 0.16796875,
          "content": "fileFormatVersion: 2\nguid: a64a1ca77606a0040b0b503f314f84e9\nfolderAsset: yes\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "Attributes",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 16.015625,
          "content": "# Changelog\nAll notable changes to this package will be documented in this file.\n\n## [Unreleased]\n- Ability to disable custom UnityObject inspector for better compatibility with other libraries, in MyBox Window settings.\n- Now MyBox detects Odin Inspector and disables some of the features to prioritize Odin.\n- Added: MyEditorEvents.AfterPlaymode/OnPlaymodeGUI/OnBehaviourUpdate events\n- Added: MyEditor.SetEditorIcon with a better way to set color\n- Added: SceneClickHandler support of Physics2d and Plane\n- Added: MyGizmos.DrawBoxCollider2D\n- Added: MyLayer now have several handy functions and extensions to operate with LayerMasks\n- Added: A bunch of new Optional types (OptionalBool/Vector2(Int)/Vector3(Int)) and now with optionalValue parameters\n- Added: MyDebug.VisualizeNavMeshPath() to dynamically draw path segments with Debug.DrawLine\n- Extensions: object.GetPrivateProperty/GetPrivateField and SetPrivateField methods to access private fields via reflection\n- Extensions: SerializedProperty.ApplyModifiedProperties()\n- Extensions: Array.InsertAt(index, item)\n- Extensions: float.RemapTo01 and float.Remap to scale the value from one range to another\n- Extensions: Quaternion.SetEulerX/Y/Z/XY/XZ/YZ methods\n- Breaking Change: ActiveStateOnStart component is removed\n- Fixed: camera.IsWorldPointInViewport() extension method bugfix\n- Fixed: DefinedValuesAttribute now properly works within serialized types\n- [TODO DOCS] Added: MyDefinesUtility simplifies handling of PlayerSettings.Set(Get)ScriptingDefineSymbols\n- [TODO DOCS] Added: MyEditorAudio tool to play AudioClip in Editor\n- [TODO DOCS] Added: MyComponentUtility.MoveComponentInspectorToTop/ToBottom(Component component) utility methods\n- [TODO DOCS] Added: Contextual Menu Items to \"Move Component To Top/To Bottom\" in inspector\n- [TODO DOCS] Added: TopmostComponentAttribute to move on top in inspector automatically when it added\n\n## [1.8.0] - 2023-10-09\n- Now it is possible to toggle some features that may lead to performance issues in editor in MyBox Window\n- AutoSave on Play, Clean Empty Folders, Prepare on Playmode and SO processing of [AutoProperty] and [MustBeAssigned] now disabled by default. Check MyBox Window for details\n- Breaking Change: MyDelayedActions.DelayedAction methods now start themselves automatically\n- Breaking Change: MinMaxFloat.RandomInRangeInclusive was redundant, removed\n- Breaking Change: Extension IList.GetRandomCollection is removed, replaced with IList.ExclusiveSample\n- Breaking Change: Removed bunch of methods from MyPhysics class\n- Breaking Change: Billboard component now uses Camera.main instead of FindObjectOfType<Camera>(). Thanks to @adamgryu for this change!\n- Breaking Change: MyGUI.EditorIcons.Cross icon removed as it is not included in Unity 2022+\n- Added: Toggle Inspector Debug hotkey - Alt+D by default\n- Added: SearchableEnumDrawer type for fast creation of Searchable Enums instead of SearchableEnumAttribute usage\n- Added: PlayerPrefs and EditorPrefs Bool/Float/Int/String/Vector/VectorInt types\n- Added: Ability to fold DisplayInspector\n- Added: SceneReference now also have UnloadSceneAsync() and SetActive() methods\n- Added: MyGUI.SearchablePopup to show popup list with ability to filter displayed content\n- Added: AutoProperty now allows to specify predicate method to filter out the lookup. Thanks to @tonygiang for the addition!\n- Added: AutoProperty and MustBeAssigned support of ScriptableObjects! Thanks to @tonygiang for the addition!\n- Added: ConditionalField - multiple conditions per attribute\n- Added: ConditionalField - ability to use method call to dynamically check condition\n- Added: ButtonMethod now might be conditional, just like ConditionalField!\n- Added: ReadOnlyAttribute now might be conditional, just like ConditionalField. Thanks to @CrizGames!\n- Added: DefinedValuesAttribute now allows to show custom labels instead of values in a popup\n- Added: DefinedValuesAttribute now allows to use method returning the collection of required values\n- Added: RangeVectorAttribute, works with Vector2/3 or Vector2/3Int. Thanks to @WhaleTee!\n- Added: AutoPropertyAttribute allowEmpty setting, to disable error logging. Thanks to @YogurtTheHorse! \n- Changed: SceneAttribute is now rendered as popup list of scenes from Editor Build Settings\n- Extensions: Coroutine.OnComplete(Action);\n- Extensions: collection.FillBy(index => { }) allows to use factory method to fill up the collection. Thanks to @tonygiang!\n- Extensions: IList.SwapInPlace(a, b) swaps two elements in collection. Thanks to @tonygiang!\n- Extensions: IList.Shuffle() shuffles elements in collection using the Knuth algorithm. Thanks to @tonygiang!\n- Extensions: IList.ExclusiveSample() returns collection of random elements. Thanks to @tonygiang!\n- Extensions: Rigidbody.ToggleConstraints() extension. Thanks to @tonygiang!\n- Extensions: Transform.SetLossyScale(). Thanks to @tonygiang!\n- Extensions: Transform.GetChildsWhere(PredicateFunc) allows to recursively get all the childs matching predicate\n- Extensions: Camera.WorldPointOffsetByDepth() to keep point position on screen but with specified distance from camera. Thanks to @tonygiang!\n- Extensions: Component/GameObject.SetLayerRecursively(). Thanks to @tonygiang!\n- Extensions: RectTransform.SetWidth() and SetHeight()\n- Extensions: RectTransform.ShiftAnchor() to offset anchor. Thanks to @tonygiang!\n- Extensions: RectTransform.GetAnchorCenter() to get mid point between anchorMin and anchorMax. Thanks to @tonygiang!\n- Extensions: RectTransform.GetAnchorDelta() to get parent-relative size of the RectTransform. Thanks to @tonygiang!\n- Extensions: Vector.Pow() to raise each component of the source Vector to the specified power. Thanks to @tonygiang!\n- Extensions: Vector.ScaleBy() immutably returns the result of the source vector multiplied with another vector. Thanks to @tonygiang!\n- Extensions: Vector/Transform - ClampZ(), InvertX/Y/Z(), Offset etc\n- Extensions: float.Clamp(), float.Round() and float.RoundToInt()\n- Extensions: string.IsNullOrEmpty() and string.NotNullOrEmpty()\n- Extensions: SerializedProperty.GetUniquePropertyId() to get unique Id per Object+Field combination\n- Extensions: SerializedProperty.Repaint() to repaint inspector window where property is displayed\n- Fix: AutoPropertyAttribute NullReferenceException fix. Thanks to @TheWalruzz for the fix\n- Fix: Extensions Vector/Transform.ClampY() bugfix\n- Fix: MyEditorEvents.OnEditorStarts event works properly now\n- Fix: MyBox is not strictly dependant on Physics, Physics2D, ImageConversion and AI modules, thanks to @r1noff!\n- Fix: AutoProperty will also be triggered before playmode. If scene is not saved before playmode, field will have actual values\n- Fix: FPSCounter now works correctly if EditorOnly is toggled. Thanks to @TheWalruzz!\n- Fix: IPrepareFeature now works with prefab instances\n- Fix: AnimationStateReference now working with AnimatorOverrideControllers\n- Fix: AssetPresetPreprocessor improvement to prevent unneeded reimports \n- Fix: ButtonMethods offsets in the inspector fixed\n- Fix: OverrideLabelAttribute now might be used on fields with custom drawers and on custom types\n- Fix: Unity 2021.2+ compatibility (UnityEditor.Experimental.SceneManagement namespace became UnityEditor.SceneManagement). Thanks to @I_Jemin!\n- Fix: Occasional ReflectionTypeLoadException was fixed when ConditionalField is used\n- Fix: Vector3Int.ToVector3 z field wasn't copied. Thanks to @Quriz for this fix!\n- Fix: MyDebug.LogArray optimization. Thanks to @jcs090218 for this!\n- Fix: Indent issue with Optional type in nested inspectors fixed. Thanks to @r3dskjn for the fix!\n- Fix: DisplayInspector now will show warning if used on property of the wrong type\n- Fix: FoldoutAttribute visual improvements\n- Fix: AssetPresetPreprocessor were not working right after PreprocessorBase creation\n- Fix: MySerializedProperty.GetFieldInfo now also searching the field in the base types\n\n## [1.7.0] - 2021-06-09\n- Breaking Changes: MyCollections.AsEnumerable renamed to SingleToEnumerable\n- Breaking Changes: MyCollections.GetOrDefault renamed to GetOrAdd\n- Breaking Changes: MonoSingleton class is removed, its functionality combined with Singleton class\n- Breaking Changes: WaitForUnscaledSeconds is removed since we have WaitForSecondsRealtime (wow, it's here since Unity 5.4! Nostalgic memories :D)\n- Breaking Changes: UIImageBasedToggle removed. Unity's Toggle able to do same things this days\n- Added: Donation button in MyBox window ;)\n- Added: TransformData type to store and restore position, rotation and scale\n- Added: CharactersRange Attribute to validate string by set of characters\n- Added: RegexString Attribute to validate string by Regular Expression\n- Added: OverrideLabelAttribute\n- Added: Ability to use AutoPropertyAttribute to assign from parent, scene of asset folder, thanks to @tonygiang!\n- Added: ConditionalFields supports Enum Flag as conditions! Thanks to Dietmar Puschmann for this addition\n- Added: MyEditorEvents.OnEditorStarts event\n- Added: UnityEvent inspector now is foldable, thanks to @karsion!\n- Extensions: MyCollections.FirstIndex - more generalized version \n- Extensions: MyCollections.GetWeightedRandom and GetWeightedRandomIndex\n- Changed: AutoPropertyAttribute will also check prefabs on prefab mode open\n- Changed: MyBox will only check for updates when editor opens\n- Changed: Singleton now might be used as parent class of MonoBehaviour to cache and remove duplicating instances\n- Changed: UIImageBasedButton now uses Highlight sprites when Pointed\n- Fix: DisplayInspectorAttribute works better with (and inside of) collections\n- Fix: MyString.ToCamelCase() extension works better now, thanks to @derfium!\n- Fix: MinValue/MaxValueAttribute build warnings fixed\n\n## [1.6.2] - 2021-04-08\n- Fix: MyBox Window settings were not applied correctly\n\n## [1.6.1] - 2021-04-07\n- Changed: MyBox Window now contains all settings and some useful links\n- Fix: MyBox Updater now should properly update UPM version\n\n## [1.6.0] - 2021-04-05\n- Added: SceneAttribute to keep scene name in a string. Consider to use SceneReference type as it is more flexible\n- Changed: MyCollection.NextIndexInCircle() extension now works with offsets\n- Extension: MyString.Colored(UnityEngine.Color)\n- Extension: MyString.SurroundedWith()\n- Extension: GetObjectsOfLayerInChilds now also receives layer as a string\n- Extension: MySerializedProperty.GetValue() now works with collections\n- Fix: DisplayInspector now (finally) works right with Unity 2020.2 reorderable collections\n- Fix: SeparatorAttribute works better with collections\n- Fix: SeparatorAttribute looks not as ugly as before :D\n- Fix: ConditionalFieldAttribute optimizations and fixes\n- Fix: AnimationStateReference now works with collections\n\n## [1.5.0] - 2020-07-15\n- Added: WarningsPool, used to log repeated message only one time\n- Changed: MustBeAssigned attribute now will check fields on prefab when it is saved in prefab mode\n- Changed: AutoProperty attribute now will fill fields on prefab when it is saved in prefab mode\n- Changed: IPrepareFeature now have three Prepare events: OnPrepareBefore, OnPrepare, OnPrepareAfter for execution order control\n- Changed: IPrepareFeature now is in MyBox.EditorTools namespace\n- Changed: ButtonMethodAttribute — new setting to draw button before or after inspector\n- Changed: Clean Empty Directories Feature is now  disabled by default\n- Extension: MyReflection extensions, with HasMethod, HasField and HasProperty object extensions\n- Extension: Dictionary.GetOrDefault to return default() value if key is not found\n- Extension: IEnumerable.ForEach, just like List.ForEach. Also takes Func<>!\n- Fix: Build exception (again!) because of internal WarningsPool\n- Fix: MustBeAssigned occasional NullReferenceException during build\n- Fix: TransformShakeExtension — shake bounds wasn't worked\n\n\n## [1.4.1] - 2020-06-06\n- Added: SceneReference.LoadSceneAsync method\n- Changed: Image.SetAlpha changed to more generic Graphic.SetAlpha\n- Changed: WarningsPool now allows to write any log type, not just warnings\n- Fix: Build exception because of CollectionWrapperBase\n\n\n## [1.4.0] - 2020-05-18\n- Added: ConstantsSelectionAttribute to popup all const values of a specific type\n- Added: CollectionWrapper to use ConditionalField on collections\n- Added: InitializationFieldAttribute to make field read-only in Playmode\n- Added: MyCursor type to with handy hotspot assignment\n- Added: MyCoroutines.CoroutineGroup with handy StartAll() and AnyProcessing\n- Added: MyDebug.LogColor(Color) because why not\n- Changed: ConditionalField now correctly uses CustomDrawer if drawer affects base type of target field \n- Changed: DisplayInspectorAttribute now supports ButtonMethodAttribute inside of displayed types\n- Changed: RequiredLayerAttribute might accept layer index instead of the name\n- Changed: AnimationStateReference now might reference any object on scene\n- Changed: ColliderGizmo now works with MeshColliders\n- Extension: MinMax.RandomInRange\n- Extension: Transform.StartShake now have \"fade\" parameter\n- Extension: Coroutine.StartNext(IEnumerator) to easily create sequence of coroutines \n- Extension: SerializedProperty.IsNumerical to detect vectors or float/int\n- Extension: SerializedProperty.GetValue/SetValue to operate with object reference\n- Fix: Reorderable Collections drawing issue\n- Fix: ColliderGizmo compilation problem in Unity2020.1\n- Fix: CleanEmptyDirectories didn't allow to create folders\n- Fix: CleanEmptyDirectories NullReferenceException fix\n- Fix: AutoProperty rare NullReferenceException fix\n- Fix: ConditionalField multiple fixes\n- Fix: PositiveValeOnlyAttribute label drawing properly\n- Fix: GameObject.HasComponent extension redundant constraint removed\n- Fix: UnityObjectEditor rare NullReferenceException fix\n- Fix: Billboard component\n\n## [1.3.0] - 2020-01-16\n- Added: FoldoutAttribute. Thanks to PixeyeHQ!\n- Added: UnityEvent inspector revamp! Now it's foldable and reorderable :). Thanks to Byron Mayne!\n- Fix: TransformShakeExtension critical bug fixed\n\n## [1.2.0] - 2019-11-13\n- Added: Reorderable Collections!\n- Added: Transform.StartShake and Transform.EndShake extension methods. Use on Camera transform for screen shake effect for instance\n- Added: NavMeshPath.GetPointsOnPath extension to split path on evenly distributed points\n- Added: MyEditor.CopyToClipboard method. Copy string via script like with Ctrl+C\n- Changed: ConditionalFieldAttribute works on custom types inside of collections\n- Changed: ConditionalFieldAttribute now works much faster!\n- Changed: ColliderGizmo now also highlights NavMeshObstacles\n- GUIDComponent updated\n- Fix: Compilation error fixed\n- Fix: MyBox Updater fixed. Exceptional cases logged with warnings\n\n\n## [1.1.0] - 2019-09-25\n- Added: Commentary component. Add commentaries in inspector;\n- Fix: UIRelativePosition fixes;\n- Few redundant warnings removed\n- Versioning changed to release patches more often without extra warnings\n\n## [1.0.4] - 2019-09-16\n- Added: UIRelativePosition type allows to align UI element relative to some other RectTransform with offsets and stuff\n- Added: AssetPath and AssetFolderPath types. String wrappers with \"Browse\" button in inspector. Thanks to Nate Wilson (wilsnat) for the idea\n- Changed: ConditionalFieldAttribute now works on fields with custom inspectors! Thanks to Nate Wilson (wilsnat)\n- Changed: RangedInt/Float and MinMaxInt/Float now have constructors for static instantiation\n- Fix: ConditionalFieldAttribute always hide the field if \"compare to\" values were not assigned\n\n## [1.0.3] - 2019-09-02\n- RequireLayer and RequireTag attributes\n- MonoSingleton Type\n- Fixed indent issue with nested inspector for MinMaxInt/Float, Optional, OptionalMinMax type\n- MySceneBundle is a Tool to transfer data from one scene to another. Thanks to Kaynn-Cahya for this addition!\n\n## [1.0.2] - 2019-08-17\n- Fix: breaking problem with MyCoroutines type\n- Added: MinMaxInt/Float Clamp and Lerp extension methods\n- Added: MinMaxInt/Float Length and MidPoint extension methods\n- Now MyBox will automatically check for updates!\n\n## [1.0.1] - 2019-08-15\n- Compilation errors fixed\n- Removed obsolete warning\n\n## [1.0.0] - 2019-08-13\n### First version with Unity Package Manager support.\nLet's take it as the first release since now you are able to install MyBox with Package Manager and update it with \"Tools/MyBox/Check for updates\"\n"
        },
        {
          "name": "CHANGELOG.md.meta",
          "type": "blob",
          "size": 0.083984375,
          "content": "﻿fileFormatVersion: 2\nguid: 48881cb6a8fc44bba97eb256edc502c8\ntimeCreated: 1565857492"
        },
        {
          "name": "Extensions.meta",
          "type": "blob",
          "size": 0.16796875,
          "content": "fileFormatVersion: 2\nguid: 54cf25d58c5fbd84288f3722696211f2\nfolderAsset: yes\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "Extensions",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2018 Andrew Rumak\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "LICENSE.md.meta",
          "type": "blob",
          "size": 0.1513671875,
          "content": "fileFormatVersion: 2\nguid: 8e390f5423fbc2143bfe1fa14ef61ff7\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "MyBox.asmdef",
          "type": "blob",
          "size": 0.9140625,
          "content": "{\n    \"name\": \"MyBox\",\n    \"rootNamespace\": \"\",\n    \"references\": [],\n    \"includePlatforms\": [],\n    \"excludePlatforms\": [],\n    \"allowUnsafeCode\": false,\n    \"overrideReferences\": false,\n    \"precompiledReferences\": [],\n    \"autoReferenced\": true,\n    \"defineConstraints\": [],\n    \"versionDefines\": [\n        {\n            \"name\": \"com.unity.modules.ai\",\n            \"expression\": \"\",\n            \"define\": \"UNITY_AI_ENABLED\"\n        },\n        {\n            \"name\": \"com.unity.modules.physics2d\",\n            \"expression\": \"\",\n            \"define\": \"UNITY_PHYSICS2D_ENABLED\"\n        },\n        {\n            \"name\": \"com.unity.modules.physics\",\n            \"expression\": \"\",\n            \"define\": \"UNITY_PHYSICS_ENABLED\"\n        },\n        {\n            \"name\": \"com.unity.modules.imageconversion\",\n            \"expression\": \"\",\n            \"define\": \"UNITY_IMAGECONVERSION_ENABLED\"\n        }\n    ],\n    \"noEngineReferences\": false\n}"
        },
        {
          "name": "MyBox.asmdef.meta",
          "type": "blob",
          "size": 0.162109375,
          "content": "fileFormatVersion: 2\nguid: 48c9f6afdac61634db0e0f241c7d4d51\nAssemblyDefinitionImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.833984375,
          "content": "# MyBox – set of tools, features and extensions for Unity\n\n### [![openupm](https://img.shields.io/npm/v/com.domybest.mybox?label=openupm&registry_uri=https://package.openupm.com)](https://openupm.com/packages/com.domybest.mybox/) [![License: MIT](https://img.shields.io/badge/License-MIT-brightgreen.svg)](https://github.com/Deadcows/MyBox/blob/master/LICENSE.md) <a href=\"https://ko-fi.com/mybox\" target=\"_blank\"><img src=\"https://storage.ko-fi.com/cdn/logomarkLogo.png\" height=20 /><sup><sub> Support my work ❤️</sub></sup></a>\n\nIt is MyBox of helpful things. Now it's yours too :raised_hands:<br />\n\n\n## [Installation](https://github.com/Deadcows/MyBox/wiki/Installation)\n\n\nTons of images in docs below :point_down:\n\n## [Attributes](https://github.com/Deadcows/MyBox/wiki/Attributes)\n**[AutoProperty](https://github.com/Deadcows/MyBox/wiki/Attributes#autoproperty)** — Assign fields automatically<br />\n**[ButtonMethod](https://github.com/Deadcows/MyBox/wiki/Attributes#buttonmethod)** — Display button in inspector<br />\n**[CharactersRange](https://github.com/Deadcows/MyBox/wiki/Attributes#charactersrange)** — Filter string field by the set of characters<br/>\n**[ConditionalField](https://github.com/Deadcows/MyBox/wiki/Attributes#conditionalfield)** — Conditionally display property in inspector, based on some other property value<br />\n**[ConstantsSelection](https://github.com/Deadcows/MyBox/wiki/Attributes#constantsselection)** — Popup of const, readonly or static fields and properties<br />\n**[DefinedValues](https://github.com/Deadcows/MyBox/wiki/Attributes#definedvalues)** — Display Dropdown with predefined values<br />\n**[DisplayInspector](https://github.com/Deadcows/MyBox/wiki/Attributes#displayinspector)** — Display one inspector inside of another<br />\n**[Foldout](https://github.com/Deadcows/MyBox/wiki/Attributes#foldout)** — Group your fields in inspector<br />\n**[InitializationField](https://github.com/Deadcows/MyBox/wiki/Attributes#initializationfield)** — Field that is not editable in playmode<br />\n**[Tag, Layer, SpriteLayer](https://github.com/Deadcows/MyBox/wiki/Attributes#tag-layer-spritelayer)** — Dropdown with Tags, Layers or SpriteLayers<br />\n**[MinMaxRange, RangedFloat and RangedInt](https://github.com/Deadcows/MyBox/wiki/Attributes#minmaxrange-rangedfloat-and-rangedint)** — Ranged sliders<br />\n**[MaxValue, MinValue and PositiveValueOnly](https://github.com/Deadcows/MyBox/wiki/Attributes#maxvalue-minvalue-and-positivevalueonly)** — Validation for numbers and vectors<br />\n**[MustBeAssigned](https://github.com/Deadcows/MyBox/wiki/Attributes#mustbeassigned)** — Automatically checks if field is assigned<br />\n**[OverrideLabel](https://github.com/Deadcows/MyBox/wiki/Attributes#overridelabel)** — Change visible in Inspector field name<br />\n**[ReadOnly](https://github.com/Deadcows/MyBox/wiki/Attributes#readonly)** — Draw property with disabled GUI<br />\n**[RegexString](https://github.com/Deadcows/MyBox/wiki/Attributes#regexstring)** — Filter string field by the Regular Expression<br />\n**[RequireTag and RequireLayer](https://github.com/Deadcows/MyBox/wiki/Attributes#requiretag-and-requirelayer)** — Automatically set Tag and Layer<br />\n**[Scene](https://github.com/Deadcows/MyBox/wiki/Attributes#scene)** — Friendly way to keep Scene name as a string. See also [SceneReference type](https://github.com/Deadcows/MyBox/wiki/Types#scenereference)<br />\n**[SearchableEnum](https://github.com/Deadcows/MyBox/wiki/Attributes#searchableenum)** — Nice UI for enums with lots of elements<br />\n**[Separator](https://github.com/Deadcows/MyBox/wiki/Attributes#separator)** — Draw separator with or without title<br />\n\n--------\n\n## [Tools and Features](https://github.com/Deadcows/MyBox/wiki/Tools-and-Features)\n**[AssetPressetPreprocessor](https://github.com/Deadcows/MyBox/wiki/Tools-and-Features#assetpressetpreprocessor)** — Conditionally apply Presets to your assets on import<br />\n**[TimeTest](https://github.com/Deadcows/MyBox/wiki/Tools-and-Features#timetest)** — Measure performance with simple api<br />\n**[IPrepare](https://github.com/Deadcows/MyBox/wiki/Tools-and-Features#iprepare)** — Easy way to replace caching, calculations and asserts from playmode<br />\n**[Features](https://github.com/Deadcows/MyBox/wiki/Tools-and-Features#cleanup-empty-directories-and-autosave-features-and-some-hotkeys)** — Cleanup Empty Directories, AutoSave feature, Hotkeys<br />\n**[UnityEvent Inspector](https://github.com/Deadcows/MyBox/wiki/Tools-and-Features#reworked-unityevent-inspector)** — Allows you to fold and reorder event subscribers<br />\n\n--------\n\n## [Types](https://github.com/Deadcows/MyBox/wiki/Types)\n**[ActivateOnStart Component](https://github.com/Deadcows/MyBox/wiki/Types#activestateonstart-component)** — Set state of specific GO on game start<br />\n**[AnimationStateReference](https://github.com/Deadcows/MyBox/wiki/Types#animationstatereference)** — Specify AnimationClip on object with Animator<br />\n**[AssetPath and AssetFolderPath](https://github.com/Deadcows/MyBox/wiki/Types#assetpath-and-assetfolderpath)** — Inspector button to browse for folder or asset under Assets folder<br />\n**[Billboard Component](https://github.com/Deadcows/MyBox/wiki/Types#billboard-component)** — Force object to always face camera<br />\n**[ColliderGizmo Component](https://github.com/Deadcows/MyBox/wiki/Types#collidergizmo-component)** — Highlight colliders and triggers in SceneView<br />\n**[ColliderToMesh Component](https://github.com/Deadcows/MyBox/wiki/Types#collidertomesh)** — Generate Mesh from PolygonCollider2D data on the fly<br />\n**[Commentary Component](https://github.com/Deadcows/MyBox/wiki/Types#commentary-component)** — Add text commentary to your GameObjects<br />\n**[CoroutineGroup](https://github.com/Deadcows/MyBox/wiki/Types#coroutine-group)** — Wraps up bunch of coroutines to know when they all is completed<br />\n**[FPSCounter Component](https://github.com/Deadcows/MyBox/wiki/Types#fpscounter)** — Display FPS counter on Playmode<br />\n**[Guid Component](https://github.com/Deadcows/MyBox/wiki/Types#guidcomponent)** — Generate unique and persistent IDs<br />\n**[MinMaxInt and MinMaxFloat](https://github.com/Deadcows/MyBox/wiki/Types#minmaxint-and-minmaxfloat)** — Asserts that Max => Min with handy inspector drawer<br />\n**[MyCursor](https://github.com/Deadcows/MyBox/wiki/Types#mycursor)** — Nice way to set cursor with hotspot<br />\n**[MyDictionary](https://github.com/Deadcows/MyBox/wiki/Types#mydictionary)** — Serializable Dictionary<br />\n**[Optional and OptionalMinMax](https://github.com/Deadcows/MyBox/wiki/Types#optional-and-optionalminmax)** — Optionally assignable values<br />\n**[Reorderable Collections](https://github.com/Deadcows/MyBox/wiki/Types#reorderable-collections)** — Reorder your collections in inspector<br />\n**[SceneReference Component](https://github.com/Deadcows/MyBox/wiki/Types#scenereference)** — Reference scene with Scene asset in inspector<br />\n**[Singleton](https://github.com/Deadcows/MyBox/wiki/Types#singleton)** — Cache and access instance of MonoBehaviour<br />\n**[TransformData](https://github.com/Deadcows/MyBox/wiki/Types#transformdata)** — Type to store and apply position, rotation and scale <br />\n**[UIFollow Component](https://github.com/Deadcows/MyBox/wiki/Types#uifollow-component)** — RectTransform will follow specified Transform<br />\n**[UIImageBasedButton Component](https://github.com/Deadcows/MyBox/wiki/Types#uiimagebasedbutton-component)** — Used to create toggle button behaviour<br />\n**[UIRelativePosition Component](https://github.com/Deadcows/MyBox/wiki/Types#uirelativeposition-component)** — Position one RectTransform relatively to another, regardless of hierarchy<br />\n**[UISizeBy Component](https://github.com/Deadcows/MyBox/wiki/Types#uisizeby-component)** — Size one RectTransform relatively to another<br />\n\n\n--------\n\n//TODO: Extensions, Unfinished tools\n"
        },
        {
          "name": "README.md.meta",
          "type": "blob",
          "size": 0.154296875,
          "content": "fileFormatVersion: 2\nguid: 3e3bf6d12f6d3c64ebb8c67edd5c2a4a\nTextScriptImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 6.080078125,
          "content": "* #### Add: Editor Window to set-up automatic conditional addition of ColliderGizmo\n  * Tag/Layer/MonoBehaviour based differences\n  * Toggle to force preset settings (disable edits per instance)\n\n* #### Add: MyDictionary, visible in inspector!!1\n\n* #### PlayerPrefsType inspector accessibility\n\n* ### Formalize dependencies like UNITY_PHYSICS_ENABLED, also make com.unity.ugui conditional? \n\n* #### Ability to see all objects with Commentary component on scene\n\n* #### Add: SingleScriptableObject. No more messy Create/ with CreateAssetMenuAttribute for settings SO's\n  * Can it cache itself somehow...? To gain static or single entry point access\n  * Base class (attribute?) to ensure that there is at least one SO of this type\n  * SelectFolder/Filename prompt will automatically appear on recompilation if no instances of SO found? \n    * Warning if there is more than one?\n    * Static accessor? Or probably better to add Load<T> method?\n\n* #### Add: MultiScene asset\n  * To save/load opened loaded/active scenes in editor\n  * Write last opened asset id to EditorPrefs, bind to Save event to update asset automatically?\n\n* #### Add: EditorPrefs asset. To sync some specified editor prefs (via VCS)\n  * asset stores its version (incremented every time on changes). Store different import/export versions?\n  * stores latest sync version in EditorPrefs\n  * if EditorPref value changed, compare EditorPrefs version with asset export version\n\n* #### Add: Separator type to draw separator after the field..?\n\n* #### Change: ConstantsSelectionAttribute — Allow to set custom value\n* #### Change: ReorderableCollection - add dropdown area to assign bunch of objects via drag-n-drop\n\n\n* #### Allow Commentary to be a type (to be shown and edited inside of other inspector) +   \n  * Statically assign via script\n  * Make readonly\n  \n* #### AnimationStateReference not working with nested inspector\n* #### AnimationParameterReference to set parameter and it's value via inspector and simply Apply() in code\n\n* #### Add EditorEvent.BeforePlaymodeComponentIteration to call Object.FindObjectsOfType<Component>() only once\n  * RequireLayerOtRagAttributeHandler and MustBeAssignedAttributeChecker   \n\n* #### Make FoldoutAttribute animated & alternative toolbar design\n  https://docs.unity3d.com/ScriptReference/EditorGUILayout.BeginFadeGroup.html\n  https://docs.unity3d.com/ScriptReference/EditorGUILayout.InspectorTitlebar.html\n  https://docs.unity3d.com/ScriptReference/EditorGUILayout.EditorToolbar.html\n\n* #### Setting to get MyBoxUpdate warnings about new versions + about bugfixes\n\n* #### OnPlaymodeLogger (MyLogger?) to accumulate log messages before playmode and log on playmode\n  * Some systems log things on BeforePlaymode and such messages will be erased if ClearOnPlay is set on Console\n  * RequireLayerOtRagAttributeHandler and some other system...\n \n* #### RangedFloat/Int and MinMaxFloat/Int functionality should be merged?\n\n* #### Test coverage, man (ง •̀_•́)ง\n\n* #### Update GUIDComponent? Remove it? \n\n* #### IPrepareAlways to use Prepare() without bool return\n\n* #### Auto generate MyLayers and MyTags scripts with const strings/ints representing actual, well, layers and tags\n\n* #### Add documentation links for MonoBehaviour types\n\n* #### Allow to opt out MustBeAssigned and AutoProperty checks? Add highlight in inspector if disabled?\n\n* #### MustBeAssigned may work with ScriptableObjects in project? \n  * Allow to disable this feature? Measure performance\n  \n* ### DisplayInspector — Allow to fold inspector\n  \n* #### MonoBehaviourPool\n  * Static class with GetPoolable<MB>(this GameObject prefab) and DeactivatePoolable<MB>(this MB behaviour) or something\n\n* #### MyGizmos => Arrow, Dotted, Cross?\n  * MyGizmos, MyHandles, MyDebug should be reconsidered\n  \n* #### MyGizmosHandler && MyOnGUIHandler\n  * MyDebug.DrawText is working only in OnDrawGizmos :( \n  * I want to access OnDrawGizmos in non-MonoBehaviour scripts\n  * MyOnGUI may be useful, for instance, in FPSCounter feature\n  * MB with static access, with lazy initialization and HideAndDontSave?\n    * EveryFrame subscription is heavy...\n    * Push struct with IDraw and logic to draw with gizmos, remove pushed structs from MyGizmosHandler.OnDrawGizmos? Measure performance\n    * Some way to draw every-frame Gizmos with system, that run only once per x seconds?\n\t\t\n* #### Highlight empty fields with MustBeAssignedAttribute in inspector\n  * Same with AutoProperty fields, if none found on GO\t\n\t\n* #### AssetPresetPreprocessor is very slow on matching assets, profile & optimize\n  * At least skip import if nothing changed?\n  \n* #### Node editor tools (ง ͠° ͟ل͜ ͡°)ง\n\t\n* #### AnimationCreator is pretty cool with simple Idle-Play or looping Idle animators. \n  * So the idea is to add Context menu item to generate AnimationController asset with imbedded AnimationClips assets\n  * The simplest case is Animator with Play clip and empty default Idle. To play single animation on some event\n  * Another case is Animator winh one Default looping clip fir infinite cycled animation\n  * Is it possible to play animation without animator? \n    * https://github.com/Unity-Technologies/SimpleAnimation\n\t\n* #### EmbeddedAnimationCreator to EmbeddedAssetCreator? \n  * It is possible to embed one asset inside of another via script. Will be cool to have such functionality via ContextMenuItems\n  * It's cool to have, to pack related assets into one parent asset. Like animation clips in animator or relates SO assets or whatewer\n  * How to unparent assets?\n\t\n* #### MyBundleUtility is a mess. Might be useful\n  * Yeah well it looks like Unity now have its own Bandles Tools\n  * Tools to build bundles out of scenes (with multiscene solutions)\n    * And handle bundles loading/unloading on scene load/unload?\n\t\t\n* #### TemplatesCreator\n  * Template is custom code snippets, like \"Create/C# Script\" but for custom things\n  * Add a way to add templates as separate assets\n  * There is no way to have MenuItems with runtime naming :(?\n    * MenuItems is separate feature/wrapper for TemplateCreator?\n    * ?? I may generate separate script with MenuItems in any selected by used folder. Find this script and get its path to regenerate if needed!"
        },
        {
          "name": "TODO.md.meta",
          "type": "blob",
          "size": 0.154296875,
          "content": "fileFormatVersion: 2\nguid: 3a94a7b365e6ee943b4da55544170a3f\nTextScriptImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "Tools.meta",
          "type": "blob",
          "size": 0.16796875,
          "content": "fileFormatVersion: 2\nguid: 2f652731d2358e44a9243574824cfa32\nfolderAsset: yes\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "Tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "Types.meta",
          "type": "blob",
          "size": 0.16796875,
          "content": "fileFormatVersion: 2\nguid: c151963b1a328a54a9f85ae1e209a03c\nfolderAsset: yes\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "Types",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.4501953125,
          "content": "{\n\"name\": \"com.domybest.mybox\",\n\"version\": \"1.8.0\",\n\"displayName\": \"MyBox\",\n\"description\": \"MyBox is a set of attributes, tools and extensions for Unity\",\n\n\"unity\": \"2018.3\",\n\"dependencies\": {\n    \"com.unity.ugui\": \"1.0.0\"\n},\n\"documentationUrl\": \"https://github.com/Deadcows/MyBox/wiki\",\n\n\"keywords\": [\"attributes\", \"extensions\", \"editor tools\"],\n\"author\": { \"name\" : \"Andrew Rumak\",\n   \"email\" : \"andrew@deadcow.ru\",\n   \"url\" : \"http://andrew@deadcow.ru/\" }\n}\n"
        },
        {
          "name": "package.json.meta",
          "type": "blob",
          "size": 0.154296875,
          "content": "fileFormatVersion: 2\nguid: dbe18881bfe3a4a43818e8daab30a7ee\nTextScriptImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        }
      ]
    }
  ]
}