{
  "metadata": {
    "timestamp": 1736710836040,
    "page": 357,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nunit/nunit",
      "stars": 2542,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 8.3046875,
          "content": "# EditorConfig helps developers define and\n# maintain consistent coding styles between\n# different editors and IDEs\n\n# https://editorconfig.org\n\n# top-most EditorConfig file\nroot = true\n\n[*]\nindent_style = space\ninsert_final_newline = true\ncharset = utf-8\n\n[*.{sln,*proj,props}]\ncharset = utf-8-bom\nindent_style = space\nindent_size = 2\ntab_width = 2\n\n[*.{cs,cake}]\nindent_style = space\nindent_size = 4\ntab_width = 4\n\n[*]\nfile_header_template = Copyright (c) Charlie Poole, Rob Prouse and Contributors. MIT License - see LICENSE.txt\n\n# https://github.com/nunit/docs/wiki/Coding-Standards#namespace-class-structure-interface-enumeration-and-method-definitions\ncsharp_indent_braces = false\ncsharp_new_line_before_catch = true\ncsharp_new_line_before_else = true\ncsharp_new_line_before_finally = true\n\n# https://github.com/nunit/docs/wiki/Coding-Standards#spaces\ncsharp_space_after_cast = false\ncsharp_space_after_comma = true\ncsharp_space_after_keywords_in_control_flow_statements = true\ncsharp_space_around_binary_operators = before_and_after\ncsharp_space_around_declaration_statements = do_not_ignore\ncsharp_space_before_open_square_brackets = false\ncsharp_space_before_semicolon_in_for_statement = false\ncsharp_space_between_empty_square_brackets = false\ncsharp_space_between_method_call_empty_parameter_list_parentheses = false\ncsharp_space_between_method_call_name_and_opening_parenthesis = false\ncsharp_space_between_method_call_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_empty_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_name_and_open_parenthesis = false\ncsharp_space_between_method_declaration_parameter_list_parentheses = false\ncsharp_space_between_parentheses = none\ncsharp_space_between_square_brackets = false\n\n# https://github.com/nunit/docs/wiki/Coding-Standards#indentation\ncsharp_indent_block_contents = true\ncsharp_indent_case_contents = true\ncsharp_indent_switch_labels = true\n\ncsharp_prefer_braces = when_multiline:silent\n\n# https://github.com/nunit/docs/wiki/Coding-Standards#naming\ndotnet_style_predefined_type_for_locals_parameters_members = true:suggestion\ndotnet_style_predefined_type_for_member_access = true:suggestion\n\n# The first matching rule wins, more specific rules at the top\n\n# dotnet_naming_rule.*.symbols does not yet support a comma-separated list https://github.com/dotnet/roslyn/issues/20891\n# dotnet_naming_symbols.*.applicable_kinds does not yet support namespace, type_parameter or local https://github.com/dotnet/roslyn/issues/18121\n\ndotnet_naming_style.pascal_case.capitalization = pascal_case\n\ndotnet_naming_symbols.namespaces_types_and_non_field_members.applicable_kinds = namespace, class, struct, enum, interface, delegate, type_parameter, method, property, event\ndotnet_naming_rule.namespaces_types_and_non_field_members.severity = error\ndotnet_naming_rule.namespaces_types_and_non_field_members.symbols = namespaces_types_and_non_field_members\ndotnet_naming_rule.namespaces_types_and_non_field_members.style = pascal_case\n\ndotnet_naming_symbols.visible_fields.applicable_kinds = field\ndotnet_naming_symbols.visible_fields.applicable_accessibilities = public, protected, protected_internal\ndotnet_naming_rule.visible_fields.severity = error\ndotnet_naming_rule.visible_fields.symbols = visible_fields\ndotnet_naming_rule.visible_fields.style = pascal_case\n\ndotnet_naming_symbols.internal_fields.applicable_kinds = field\ndotnet_naming_symbols.internal_fields.applicable_accessibilities = internal\ndotnet_naming_rule.internal_fields.severity = error\ndotnet_naming_rule.internal_fields.symbols = internal_fields\ndotnet_naming_rule.internal_fields.style = pascal_case\n\ndotnet_naming_symbols.static_readonly_fields.applicable_kinds = field\ndotnet_naming_symbols.static_readonly_fields.required_modifiers = static, readonly\ndotnet_naming_rule.static_readonly_fields.severity = error\ndotnet_naming_rule.static_readonly_fields.symbols = static_readonly_fields\ndotnet_naming_rule.static_readonly_fields.style = pascal_case\n\ndotnet_naming_symbols.constant_fields.applicable_kinds = field\ndotnet_naming_symbols.constant_fields.required_modifiers = const\ndotnet_naming_rule.constant_fields.severity = error\ndotnet_naming_rule.constant_fields.symbols = constant_fields\ndotnet_naming_rule.constant_fields.style = pascal_case\n\ndotnet_naming_style.underscore_camel_case.capitalization = camel_case\ndotnet_naming_style.underscore_camel_case.required_prefix = _\n\ndotnet_naming_symbols.remaining_fields.applicable_kinds = field\ndotnet_naming_rule.remaining_fields.severity = error\ndotnet_naming_rule.remaining_fields.symbols = remaining_fields\ndotnet_naming_rule.remaining_fields.style = underscore_camel_case\n\ndotnet_naming_style.camel_case.capitalization = camel_case\n\ndotnet_naming_symbols.parameters_and_locals.applicable_kinds = parameter, local\ndotnet_naming_rule.parameters_and_locals.severity = error\ndotnet_naming_rule.parameters_and_locals.symbols = parameters_and_locals\ndotnet_naming_rule.parameters_and_locals.style = camel_case\n\n# https://github.com/nunit/docs/wiki/Coding-Standards#file-organization\ndotnet_sort_system_directives_first = true\n\n# https://github.com/nunit/docs/wiki/Coding-Standards#use-of-the-var-keyword\n# Would be true:warning, except that that so much existing code is not consistent with the coding standard.\ncsharp_style_var_when_type_is_apparent = true:suggestion\n\n# DOC100: Place text in paragraphs\ndotnet_diagnostic.DOC100.severity = silent\n\n\n# Expression-bodied members\ncsharp_style_expression_bodied_accessors = when_on_single_line:warning\ncsharp_style_expression_bodied_constructors = false:none\ncsharp_style_expression_bodied_indexers = when_on_single_line:warning\ncsharp_style_expression_bodied_lambdas = when_on_single_line:suggestion\ncsharp_style_expression_bodied_local_functions = when_on_single_line:suggestion\ncsharp_style_expression_bodied_methods = false:none\ncsharp_style_expression_bodied_operators = when_on_single_line:suggestion\ncsharp_style_expression_bodied_properties = when_on_single_line:suggestion\n\n############################################################################################\n# CSharp Analysis\n############################################################################################\n\n\n# CS3016: Arrays as attribute arguments is not CLS-compliant\n# Microsofts own MemberNotNull attribute expects an array\ndotnet_diagnostic.CS3016.severity = none\n\n############################################################################################\n# IDE Analysis\n############################################################################################\n\n# IDE0003: Remove qualification\ndotnet_diagnostic.IDE0003.severity = warning\n\n# IDE0005: Remove unnecessary usings/imports\ndotnet_diagnostic.IDE0005.severity = error\n\n# IDE0011: Add braces\ndotnet_diagnostic.IDE0011.severity = warning\n\n# IDE0044: Add readonly modifier\ndotnet_diagnostic.IDE0044.severity = warning\n\n# IDE0055: Fix formatting  (Skipping this as it doesnt say WHAT is wrong. Rely on StyleCop instead)\ndotnet_diagnostic.IDE0055.severity = none\n\n# IDE1006: Naming Styles\ndotnet_diagnostic.IDE1006.severity = warning\n\n# IDE0036: Order modifiers\ndotnet_diagnostic.IDE0036.severity = warning\n\n##################################################################################\n# CSharpIsNull Analyzers\n\ndotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning\n\n# CSIsNull001: Use `is null` for null checks\ndotnet_diagnostic.CSIsNull001.severity = warning\n\n# CSIsNull002: Use `is object` for non-null checks\ndotnet_diagnostic.CSIsNull002.severity = warning\ndotnet_style_operator_placement_when_wrapping = beginning_of_line\ntab_width = 4\nindent_size = 4\nend_of_line = crlf\ncsharp_indent_labels = one_less_than_current\ndotnet_style_coalesce_expression = true:suggestion\ndotnet_style_null_propagation = true:suggestion\ndotnet_style_prefer_auto_properties = true:silent\ndotnet_style_object_initializer = true:suggestion\ndotnet_style_collection_initializer = true:suggestion\ndotnet_style_prefer_simplified_boolean_expressions = true:suggestion\ncsharp_using_directive_placement = outside_namespace:silent\ncsharp_prefer_simple_using_statement = true:suggestion\ncsharp_style_namespace_declarations = block_scoped:silent\ncsharp_style_prefer_method_group_conversion = true:silent\ncsharp_style_prefer_top_level_statements = true:silent\ncsharp_style_prefer_primary_constructors = true:suggestion\ndotnet_style_prefer_conditional_expression_over_assignment = true:silent\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.443359375,
          "content": "# Normalize line endings\n* text=auto\n\n# Prevent files from being exported\n.gitattributes export-ignore\n.gitignore     export-ignore\n\n# ReSharper DotSettings files are in Unix Format\n*.DotSettings text eol=lf\n\n# MonoDevelop on Linux uses CRLF for these files\n*.sln\ttext\teol=crlf\npackages/repositories.config\ttext\teol=crlf\n\n# Allows checking out and developing in Windows\n# while mounting and running tests in Linux\n*.sh    text eol=lf\nbuild   text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.5869140625,
          "content": "## Ignore Visual Studio and Rider temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\nlaunchSettings.json\n\n# Build results\n\n[Dd]ebug/\n[Rr]elease/\nx64/\nbuild/\n[Bb]in/\n[Oo]bj/\n.vs/\ntools\n!tools/packages.config\n\n# Enable \"build/\" folder in the NuGet Packages folder since NuGet packages use it for MSBuild targets\n!packages/*/build/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n*_i.c\n*_p.c\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.log\n*.scc\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n*.ncrunch*\n.*crunch*.local.xml\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.Publish.xml\n\n# NuGet Packages Directory\npackages/\n\n# Windows Azure Build Output\ncsx\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Rider specific folder\n\\.idea/\n\n# Others\nsql/\n*.Cache\nClientBin/\n~$*\n*~\n*.dbmdl\n*.[Pp]ublish.xml\n*.pfx\n*.publishsettings\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\nApp_Data/*.mdf\nApp_Data/*.ldf\n\n\n#LightSwitch generated files\nGeneratedArtifacts/\n_Pvt_Extensions/\nModelManifest.xml\n\n# =========================\n# Windows detritus\n# =========================\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Mac desktop service store files\n.DS_Store\n\n# =========================\n# NUnit Specific\n# =========================\n\n.~\n*.userprefs\n*.StyleCop\n*.sdf\nGeneratedAssemblyInfo.cs\nStyleCop.Cache\nlocal.settings.include\nInternalTrace.txt\nTestResult.xml\ntestCaseCollection.xml\ndeploy\nlib\ntest-results\npackage\nimages\nMockAssemblyResult.xml\nPortabilityAnalysis*.html\nproject.lock.json\n*.project.lock.json\n.dotnet\n*.err\n*.out\n.ionide\n.fake\nBenchmarkDotNet.Artifacts*\n"
        },
        {
          "name": ".runsettings",
          "type": "blob",
          "size": 5.509765625,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- For more information, see https://docs.microsoft.com/en-us/visualstudio/test/configure-unit-tests-by-using-a-dot-runsettings-file?view=vs-2019  -->\n\n<RunSettings>\n  <RunConfiguration>\n    <!-- See https://github.com/microsoft/vstest-docs/blob/master/docs/configure.md -->\n    <!-- 1. Test related settings -->\n    <!-- [x86] | x64: architecture of test host -->\n    <!--<TargetPlatform>x86</TargetPlatform>-->\n\n    <!-- Framework35 | [Framework40] | Framework45 -->\n    <!--<TargetFrameworkVersion>Framework40</TargetFrameworkVersion>-->\n\n    <!-- Path to Test Adapters -->\n    <!--<TestAdaptersPaths>%SystemDrive%\\Temp\\foo;%SystemDrive%\\Temp\\bar</TestAdaptersPaths>-->\n    <TreatTestAdapterErrorsAsWarnings>false</TreatTestAdapterErrorsAsWarnings>\n\n    <!-- Path relative to solution directory -->\n    <ResultsDirectory>.\\TestResults</ResultsDirectory>\n\n    <!-- 0 = As many processes as possible, limited by number of cores on machine, 1 = Sequential (1 process), 2-> Given number of processes up to limit by number of cores on machine-->\n    <MaxCpuCount>0</MaxCpuCount>\n\n    <!-- TestSessionTimeout was introduced in Visual Studio 2017 version 15.5 -->\n    <!-- Specify timeout in milliseconds. A valid value should be >= 0. If 0, timeout will be infinity-->\n    <TestSessionTimeout>100000</TestSessionTimeout>\n\n    <!-- Specify a Boolean value, which defines the exit code when no tests are discovered.-->\n    <TreatNoTestsAsError>false</TreatNoTestsAsError>\n\n    <!-- STA | MTA  default is STA for .NET Full and MTA for .NET Core-->\n    <!--<ExecutionThreadApartmentState>STA</ExecutionThreadApartmentState>-->\n\n    <!-- Disables in-assembly parallel execution, applies to both MSTest and NUnit -->\n    <DisableParallelization>false</DisableParallelization>\n    <DisableAppDomain>false</DisableAppDomain>\n    <CollectSourceInformation>true</CollectSourceInformation>\n\n    <!-- Runner related configuration -->\n    <BatchSize>10</BatchSize>\n\n  </RunConfiguration>\n\n  <!-- <DataCollectionRunSettings>\n  <DataCollectors> -->\n  <!-- This option can help you isolate a problematic test that causes a test host crash. Running the collector creates an output file (Sequence.xml) in TestResults, which captures the order of execution of the test before the crash. -->\n  <!-- See https://docs.microsoft.com/en-us/visualstudio/test/configure-unit-tests-by-using-a-dot-runsettings-file?view=vs-2022#blame-data-collector-->\n  <!-- <DataCollector friendlyName=\"blame\" enabled=\"True\"> \n     </DataCollectors> -->\n  <!-- </DataCollectionRunSettings> -->\n\n  <!--\n    <TestRunParameters>\n        <Parameter name=\"webAppUrl\" value=\"http://localhost\" />\n        <Parameter name=\"webAppUserName\" value=\"Admin\" />\n    </TestRunParameters>  -->\n\n  <!--  Section for loggers,  see https://docs.microsoft.com/en-us/visualstudio/test/configure-unit-tests-by-using-a-dot-runsettings-file?view=vs-2019#loggerrunsettings-element \n  <LoggerRunSettings>\n      <Loggers>\n        <Logger friendlyName=\"console\" enabled=\"True\">\n          <Configuration>\n              <Verbosity>quiet</Verbosity>\n          </Configuration>\n        </Logger>\n        <Logger friendlyName=\"trx\" enabled=\"True\">\n          <Configuration>\n            <LogFileName>foo.trx</LogFileName>\n          </Configuration>\n        </Logger>\n        <Logger friendlyName=\"html\" enabled=\"True\">\n          <Configuration>\n            <LogFileName>foo.html</LogFileName>\n          </Configuration>\n        </Logger>\n      </Loggers>\n    </LoggerRunSettings>\n-->\n\n\n  <!-- Adapter Specific sections -->\n\n   <!-- NUnit3 adapter, uncomment sections to set as appropriate, numeric, booleans, enums have their default values below, except RandomSeed -->\n  <!-- For documentation, see https://docs.nunit.org/articles/vs-test-adapter/Tips-And-Tricks.html -->\n  <NUnit>\n    <!--<BasePath>D:\\Dev\\NUnit\\nunit3-vs-adapter\\demo\\NUnitTestDemo\\bin\\Release</BasePath>-->\n    <!--<PrivateBinPath>extras;more.extras</PrivateBinPath>-->\n    <DefaultTimeout>0</DefaultTimeout>\n    <!--<WorkDirectory>work</WorkDirectory>-->\n    <InternalTraceLevel>Off</InternalTraceLevel>\n    <!--<RandomSeed>1234567</RandomSeed>-->\n    <NumberOfTestWorkers>-1</NumberOfTestWorkers>\n    <Verbosity>0</Verbosity>\n    <!--<UseVsKeepEngineRunning>false</UseVsKeepEngineRunning>-->\n    <!--<ShadowCopyFiles>false</ShadowCopyFiles>-->\n    <!--<DefaultTestNamePattern>{m}{a}</DefaultTestNamePattern>-->\n    <!--<DomainUsage>Single</DomainUsage>-->\n    <DumpXmlTestDiscovery>true</DumpXmlTestDiscovery>\n    <DumpXmlTestResults>true</DumpXmlTestResults>\n    <ShowInternalProperties>false</ShowInternalProperties>\n    <!--<TestOutputXml>TestOutputXml</TestOutputXml>-->\n    <!--<Where></Where>-->\n    <!-- NUnit filter expression, see https://docs.nunit.org/articles/nunit/running-tests/Test-Selection-Language.html  -->\n    <ConsoleOut>1</ConsoleOut>\n    <UseTestNameInConsoleOutput>true</UseTestNameInConsoleOutput>\n    <StopOnError>false</StopOnError>\n    <SkipNonTestAssemblies>false</SkipNonTestAssemblies>\n    <MapWarningTo>Skipped</MapWarningTo>\n    <!--Passed, Failed or Skipped-->\n    <DisplayName>Name</DisplayName>\n    <!--Name, FullName or FullNameSep-->\n    <FullnameSeparator>:</FullnameSeparator>\n    <DiscoveryMethod>Current</DiscoveryMethod>\n    <!--Legacy or Current-->\n    <AssemblySelectLimit>2000</AssemblySelectLimit>\n    <NewOutputXmlFileForEachRun>false</NewOutputXmlFileForEachRun>\n    <IncludeStackTraceForSuites>true</IncludeStackTraceForSuites>\n    <ExplicitMode>Strict</ExplicitMode>\n    <SkipExecutionWhenNoTests>false</SkipExecutionWhenNoTests>\n\n  </NUnit>\n</RunSettings>\n\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "BUILDING.md",
          "type": "blob",
          "size": 7.224609375,
          "content": "# Building NUnit\n\nNUnit 3 consists of three separate layers: the Framework, the Engine and the Console Runner. The source code is kept in two GitHub repositories, https://github.com/nunit/nunit and https://github.com/nunit/nunit-console.\n\n## Source Code\n\nYou will not have permission to create branches directly in either of the above repositories so you will need to work on a local fork. \n\nThe development process for making code changes and submitting Pull Requests (PRs) is as follows:\n\n1. Create a fork of the NUnit repository\n2. Clone the fork to your computer\n3. Create the changes on a new branch\n4. Ensure all NUnit tests pass locally (ie. run them on all targeted frameworks and on as many platforms that you have ie. Windows, Linux, Mac). The [Script Build](#script-build) section below gives exact instructions on how to do this from the Command Prompt / Terminal.\n5. Push the branch to your fork\n6. Create the PR (this is described in more detail [here](https://thenewstack.io/getting-legit-with-git-and-github-your-first-pull-request/))\n\n## Solution Build\n\nThere is a single Visual Studio solution, `nunit.sln`, which resides in the NUnit repository root.\n\nNUnit framework can be built from this solution using a .NET 6-capable IDE such as:\n\n- [Visual Studio 2022](https://www.visualstudio.com/vs/) or newer (Windows)\n- [Visual Studio for Mac](https://www.visualstudio.com/vs/) (macOS).\n- [Visual Studio Code](https://code.visualstudio.com/)\n   - Compile using the [build script](#script-build) instead if using VS Code (see below for details).\n- [Jetbrains Rider](https://www.jetbrains.com/rider/)\n\nOn all platforms, you will need to install [.NET 6.0 SDK](https://www.microsoft.com/net/download/windows) or newer. \n\nOn Mac or Linux, you will need to install [Mono](https://www.mono-project.com/download/), an open source implementation of Microsoft's .NET Framework. Mono version 6.12.0 Stable (6.12.0.122) has been validated to build the NUnit solution on GNU/Linux Debian 10 'buster'.\n\nA solution build places all of its output in a common `bin` directory under the solution directory.\n\nAs the NUnit solution targets multiple frameworks, a single build will generate files for each targeted framework. For example, a debug build <sup>[2]</sup> produces the following directory structure:\n\n```\n (directory with nunit.sln)\n    bin\\\n       Debug\\\n          net8.0\n          net6.0\n          net462\n```\n\n## Running Tests\n\nThe tests that should be run in the solution are grouped by project name:\n\n* `nunit.framework.tests-*`\n* `nunitlite.tests-*`\n\nOther test projects contain tests designed to fail purposely for integration tests.\n\nYou should then be able to run the unit tests directly from within your development IDE of choice against one or all target frameworks (as you would when using NUnit in any other development project). For example, this is what it looks like in JetBrains Rider (2021.1.2) when right clicking on the `AssertEqualsTests` TextFixture:\n\n![image](https://user-images.githubusercontent.com/52075808/121511286-61775580-c9e0-11eb-8e1e-ff44d0d8873d.png)\n\n### Known Issues and Workarounds\n\nUnfortunately, there are currently some known issues with building and running tests locally.\n\n#### Tests will not run within Rider or Visual Studio ([#3008](https://github.com/nunit/nunit/issues/3008))\n\nYou can run NUnit Lite in a similar way to above, but from the development IDE after a successful build. \n\nThis is probably the easiest way (whilst issue [#3008](https://github.com/nunit/nunit/issues/3008) remains open) for developers to step through code and debug any new contributions made to the codebase.\n\nIn your development IDE of choice, ensure there is a Run/Debug configuration which specifies `nunitlite-runner` as the startup project. \n\nThen specify the program arguments in exactly the same way as above. For example the following argument `nunit.framework.tests.dll --where \"class == NUnit.Framework.Assertions.AssertEqualsTests\"` will run all tests in the NUnit.Framework.Assertions.AssertEqualsTests TextFixture in the nunit.framework.tests.dll.\n\nYou could now set a breakpoint anywhere in the AssertEqualsTests class and have the debugger pause on it when performing a debug run of the solution (ie. ALT+F5 in JetBrains Rider).\n\n## Script Build\n\nWe use [Cake](https://cakebuild.net) to build NUnit for distribution. The primary script that controls building, running tests and packaging is `build.cake`. We modify `build.cake` when we need to add new targets or change the way the build is done. Normally `build.cake` is not invoked directly but through `build.ps1` (PowerShell on Windows) or `build.sh` (bash on Linux). These two scripts are provided by the Cake project and ensure that Cake is properly installed before trying to run the cake script.\n\nKey arguments to `build.ps1` / `build.sh`:\n\n| Argument | Description |\n|---|---|\n| --target={task}                 | The task to run - see below.                        |\n| --configuration=[Release\\|Debug] | The configuration to use (default is Release)       |\n| --showdescription               | Shows all of the build tasks and their descriptions |\n\nThe build.cake script contains a large number of interdependent tasks. The most important top-level tasks to use are listed here:\n\n| Task | Description |\n|---|---|\n| Build    | Builds everything. This is the default if no target is given. |\n| Rebuild  | Cleans the output directory and builds everything |\n| Test     | Runs all tests. Dependent on Build. |\n| Package  | Creates all packages without building first. See Note below. |\n\nFor example, the following command `.\\build.ps1 --target=Test --configuration=Release` (PowerShell on Windows) will perform a full release build for all target frameworks and then execute the unit tests against each target. \n\nFor a full list of tasks, run `.\\build.ps1 --showdescription` (PowerShell on Windows) or `./build.sh --showdescription` (bash on Linux).\n\n### Notes\n\n1. By design, the Package target does not depend on Build. This is to allow re-packaging when necessary without changing the binaries themselves. Of course, this means that you have to be very careful that the build is up to date before packaging.\n2. For additional targets, refer to the `build.cake` script itself.\n\n## Defined constants\n\nNUnit often uses conditional preprocessor to light up APIs and behaviors per platform.\n\nIn general, try to use feature constants rather than platform constants.\nThis brings clarity to the code and makes it easy to change the mapping between features and platforms.\n\nFeature constants are defined in [Directory.Build.props](src/NUnitFramework/Directory.Build.props):\n\n- `THREAD_ABORT` enables timeouts and forcible cancellation\n\nPlatform constants are defined by convention by the csproj SDK, one per target framework.\nFor example, `NET462`, `NETSTANDARD2_0`, `NET6_0`, and so on.\nIt is most helpful to call out which platforms are the exception in rather than the rule\nin a given scenario. Keep in mind the effect the preprocessor would have on a newly added platform.\n\nFor example, rather than this code:\n\n```cs\n#if NETSTANDARD2_0 || NET6_0\n// Something that .NET Framework can't do\n#endif\n```\n\nConsider this:\n\n```cs\n#if !NETFRAMEWORK\n// Something that .NET Framework can't do\n#endif\n```\n\nOr this for the opposite:\n\n```cs\n#if NETFRAMEWORK\n// Something that only .NET Framework can do\n#endif\n```\n"
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 96.5751953125,
          "content": "\nFor further changes, see [release notes](https://docs.nunit.org/articles/nunit/release-notes/framework.html)\n\n-------\n\n## NUnit 4.0.0 - November 26, 2023\n\nAll changes, see [release notes](https://docs.nunit.org/articles/nunit/release-notes/framework.html#nunit-400)\n\n## NUnit 4.0.0-beta.1 - October 8, 2023\n\nThis release is the first beta release of NUnit 4.0.\nAll changes, see [release notes](https://docs.nunit.org/articles/nunit/release-notes/framework.html#nunit-400-beta1---tba)\n\n## NUnit 3.13.2 - April 27, 2021\n\nThis release fixes a new issue with the `FixtureLifeCycle` attribute where `IDisposable` test fixtures were not being disposed properly. As always, [@gleb-osokin](https://github.com/gleb-osokin) has been a great help with this new feature.\n\nIt also fixes a long-standing performance issue with `CollectionAssert.AreEquivalent` and the `CollectionEquivalentConstraint` when comparing large collections. The deep comparison that NUnit performs on the two collections will always have a worst case bound of O(n^2) but we have optimized it so that the majority of use cases will be closer to O(n).\n\nWe've also made significant optimizations to the OR filters for selecting tests using their full name. This dramatically improves test performance for large code bases that use `dotnet test`. Thanks to [@pakrym](https://github.com/pakrym) for his help with this.\n\n### Issues Resolved\n\n* 2799 CollectionAssert.AreEquivalent is extremely slow\n* 3589 File headers, copyrights, and licenses\n* 3773 IDisposable not working with InstancePerTestCase\n* 3779 Obsolete AreEqual methods with nullable numeric arguments for 3.13\n* 3784 Build the v3.13-dev branch\n* 3786 NUnit with dotnet test results in O(n^2) filtering complexity\n* 3810 Enable deterministic build\n* 3818 AppVeyor failing to build v3.13-dev branch PRs\n* 3832 Deploy v3.13-dev branch builds to MyGet\n\n## NUnit 3.13.1 - January 31, 2021\n\nThis release addresses several misses with the new `FixtureLifeCycle` attribute, switches to using [SourceLink](https://github.com/dotnet/sourcelink) and NuGet [snupkg](https://docs.microsoft.com/en-us/nuget/create-packages/symbol-packages-snupkg) packages for debugging into NUnit from your unit tests. It also addresses issues with the time format of ignored and explicit tests in the test results file.\n\n### Issues Resolved\n\n* 2339 Wrong date format in Ignored TestFixtures\n* 3715 FixtureLifeCycle(LifeCycle.InstancePerTestCase) Not working with TestFixtureSource\n* 3716 Assembly level FixtureLifeCycle(LifeCycle.InstancePerTestCase) doesn't work\n* 3724 Test start and end time should end with Z\n* 3726 Assert EqualTo().Within().Seconds does not work with DateTimes in NUnit 3.13\n* 3729 AppVeyor builds failing\n* 3736 AreEqual.Within throws on failure with non-numeric types\n* 3743 Parametrized tests do not respect FixtureLifeCycle.InstancePerTestCase\n* 3745 After upgrading to NUnit 3.13.0 the debugger enters NUnit code despite having checked \"Enable Just My Code\"\n\n## NUnit 3.13 - January 7, 2021\n\nThe [`FixtureLifeCycle`](https://docs.nunit.org/articles/nunit/writing-tests/attributes/fixturelifecycle.html) attribute has been added to indicate that an instance for a test fixture or all test fixtures in an assembly should be constructed for each test within the fixture or assembly.\n\nThis attribute may be applied to a test fixture (class) or to a test assembly. It is useful in combination with the [Parallelizable Attribute](https://docs.nunit.org/articles/nunit/writing-tests/attributes/parallelizable.html) so that a new instance of a test fixture is constructed for every test within the test fixture. This allows tests to run in isolation without sharing instance fields and properties during parallel test runs. This make running parallel tests easier because it is easier to make your tests thread safe.\n\nThis release also fixes several issues running tests in .NET 5.0. If your tests target .NET 5.0, we recommend updating to this release.\n\n### Issues Resolved\n\n* 34 Async testing with F#\n* 52 Self-contained item in array causes stack overflow\n* 1394 Has.Property cannot see explicit interface implementation properties\n* 1491 Add a CLA to the project\n* 1546 NUnitEqualityComparer.GetEquatableGenericArguments should explicitly order arguments\n* 1809 Assert.AreEqual fails for Complex on Linux\n* 1897 EqualTo().Using() prevents caller from comparing strings to anything else\n* 2211 Request: Add support of indexers to the PropertyConstraint\n* 2477 Parameterized fixture with Explicit attribute can not be run when selected by name\n* 2574 Instance-per-test-case feature\n* 2680 Deprecate the DebugWriter class\n* 3611 Properties are shown when --explore:nunit3 is run on entire project, but omitted when using the --where clause\n* 3054 Don't enforce `[Timeout]` when debugger is attached\n* 3075 Complete RunAsyncAction tests in FrameworkControllerTests\n* 3228 Modulo bias is present in Randomizer.NextDecimal(decimal)\n* 3240 Automate uploading of test results to Azure Pipelines\n* 3243 Azure DevOps does not build release branch\n* 3249 Pin GitLink version to speed up Cake script\n* 3251 RawInt32() can't use Next since the maximum is always exclusive and it would never return int.MaxValue\n* 3252 Timeout of 100 ms in TestTimeoutDoesNotStopCompletion occasionally fails the macOS build\n* 3253 Chance of failure in random bias tests is not sufficiently low for CI\n* 3256 Building under VS2019\n* 3257 Running under mono\n* 3259 The type of an Array isn't inferred from properly\n* 3264 Test that IRepeatTest only gets attributes via the IMethodInfo interface\n* 3275 Enable setting IgnoreUntilDate in TestCaseData.Ignore\n* 3279 Improve failure message from UniqueItemsConstraint\n* 3282 TimeoutAttribute makes all Assertions count as failure\n* 3283 ExecutionContext is flowed between unrelated tests\n* 3286 Testing for equality using a predicate throws exception for collections\n* 3290 'Good first issue' or 'help wanted' issue count badge\n* 3296 ExceptionHelper.GetExceptionMessage(Exception ex) should tolerate exceptions from exceptions\n* 3302 Incorrect formatting of failure message if test fails with Assert.Multiple\n* 3303 Check type of actual argument using consistent helper method\n* 3304 CheckString should not be a generic method\n* 3305 Remove unused methods\n* 3307 Sporadic GetResultIsNotCalledUntilContinued failure\n* 3308 Fix disposal in EnumerablesComparer\n* 3309 Simplify code in EventListenerTextWriter\n* 3311 Minimal unit of DateTime in the report when Test was started/ended\n* 3312 Simplify ProviderCache and make it instantiable since it is intentionally not thread safe\n* 3315 Assert.DoesNotThrow() stopped working as it was previously\n* 3318 Fix AwaitAdapter terminology\n* 3321 Keep dependencies up to date\n* 3322 Speed up build script by removing unnecessary builds\n* 3324 Broken link in CHANGES.md\n* 3328 Problems when using a mixture of Not and Or filters in NUnit framework 3.12.0\n* 3331 Contains.Key no longer working for IDictionary\n* 3338 Azure Pipelines is failing on Linux for both netstandard 1.4 and 2.0\n* 3356 SetUpFixture not run\n* 3368 Tests with warnings are not added to console TestResult.xml's total count\n* 3383 Drop netstandard1.4 and stop testing on end-of-life versions of .NET Core\n* 3389 Show names of parameters\n* 3390 SetUpFixture not being triggered when running tests using --testlist\n* 3392 Use of Thread.CurrentPrincipal in Blazor/WASM\n* 3393 Nuget Package Not Signed\n* 3395 Randomizer.NextString() can probably be sped up\n* 3408 Save test results as build artifacts\n* 3411 Update nuspec file to mention support for NET Standard 2.0+\n* 3414 Azure pipelines are failing on Linux\n* 3415 Azure CI: Still publish test results on failure\n* 3423 TestResult.cs casts ITestResult to TestResult\n* 3447 Is.EqualTo(...).Using(StructuralComparisons.StructuralEqualityComparer or StructuralComparer) not working\n* 3452 Assertions that use an existing Regex\n* 3453 Visibility of SetUp/TearDown Methods\n* 3454 Pre-Filtering in NUnitLite has problems\n* 3464 Improve debugging experience\n* 3470 Assertion for key-value-pair\n* 3475 Our XML comments are using `<code>` (block element) instead of `<c>` (inline element)\n* 3485 Should we make MultipleAssertException.TestResult maybe-null or obsolete two constructors?\n* 3496 Adding data dictionary should not add a trailing newline\n* 3497 Fix mixed line endings in Git\n* 3503 Remove implicit cast from ITestResult to TestResult\n* 3505 Better failure messages for Subset and Superset constraints\n* 3506 ValueTuple tests now running if not targeting NET35\n* 3536 Reduce newly added API surface\n* 3542 Update NuGet Package Icons\n* 3547 DelayedConstraint constrains does not preserve original result additional information\n* 3551 Add PrivateAssets=\"all\" to analyzer dependency\n* 3552 MessagePumpStrategy does not work for WPF on netcoreapp3.0 and upwards\n* 3559 Disables the DOC100 suggestion and reverts the added paragraph elements\n* 3563 `[Suggestion]` Improve TextMessageWriter output for numeric values\n* 3565 .NET 5 issue with PlatformAttribute\n* 3583 Avoid using a culture-sensitive EndsWith in common code\n* 3592 Add classname and methodname to the start-test event\n* 3594 Reduce memory overhead of TestNameGenerator\n* 3596 AreAlmostEqualUlps throws OverflowException for -0\n* 3598 Fix typo\n* 3608 `[Platform]` attribute fails with DllNotFoundException in WASM\n* 3616 Extend Is.Empty to work for Guid.Empty\n* 3618 NUnit has a P/Invoke whose native function doesn't exist on all platforms\n* 3622 EmptyDirectoryConstraint doesn't need to enumerate entire directory contents\n* 3632 Assert.Inconclusive() reports failed when timeout used\n* 3636 NUnitLite filtering fails if space in test name before (\n* 3641 Type implementing `IComparable<float>` (or any `IComparable`) fails comparison.\n* 3647 Fix exception under blazor 5\n* 3650 Build issue with the latest .NET SDK 5.0.100-rc.2\n* 3657 Add Framework Version to the XML\n* 3662 TestContext.CurrentContext.CurrentRepeatCount only contains retry count not the repeat count\n* 3667 Create FrameworkPackageSetting to set CurrentCulture and CurrentUICulture\n* 3676 Parallelizeable tests sometimes shares memory\n* 3679 Issue 3390: Do not prefilter relevant SetUpFixtures\n* 3694 Async tests causes double failure messages\n* 3699 Compilation of netcoreapp3.1 targets fails on CI (both AppVeyor and Azure Pipelines)\n\n## NUnit 3.12 - May 14, 2019\n\nThis release of NUnit finally drops support for .NET 2.0. If your application still\ntargets .NET 2.0, your tests will need to target at least .NET 3.5. Microsoft ended\nsupport for .NET 2.0 on July 12, 2011. Microsoft recommends that everyone migrate\nto at least .NET Framework 3.5 SP1 for security and performance fixes.\n\nThis release dramatically improves NUnit support for async tests including returning\nValueTask and custom tasks from tests, improved handling of SynchronizationContexts\nand better exception handling.\n\nThe .NET Standard 2.0 version of NUnit continues to gain more functionality that\nis found in the .NET 4.5 version of the framework like setting the ApartmentState\nand enabling Timeout on tests.\n\n### Issues Resolved\n\n * 474 TypeHelperTests.cs is orphaned\n * 999 Support multiple TestOf attributes per test\n * 1638 TimeoutAttribute not available when targeting netcoreapp framework\n * 2168 ThrowsAsync reports OperationCanceledException as TaskCanceledException\n * 2194 How to use `Contains.Substring` with `And`\n * 2286 Add support for custom Task (i.e. ValueTask)\n * 2579 AppVeyor Test Failures under .NET 3.5\n * 2614 TestExecutionContext.CurrentContext is saved in Remoting CallContext between test runs\n * 2696 Getting WorkerId fails in debug\n * 2772 Random failing of parallel test run: Unhandled Exception: System.InvalidOperationException: Stack empty.\n * 2975 ComparisonConstraints are allocating string on construction\n * 3014 Timeout failures on MacOS\n * 3023 NUnit runner fails when test method returns ValueTask<>\n * 3035 Apartment state can't be used for .NET Standard 2.0 tests\n * 3036 Apartment state can't be used for .NET Standard 2.0 tests\n * 3038 TestName in TestCase attribute not validated to be not empty\n * 3042 RequiresThreadAttribute allows ApartmentState.Unknown, unlike ApartmentAttribute\n * 3048 Add .idea folder to .gitignore\n * 3053 Conversion from TestCase string parameter to DateTimeOffset\n * 3059 Constraint Throws.Exception does not work with async return value\n * 3068 First Chance Exception in RuntimeFramework\n * 3070 End support for .NET Framework 2.0 (released in 2005)\n * 3073 CollectionAssert.AreEquivalent fails for ValueTuple Wrapped Dictionary\n * 3079 Regression from 3.10 to 3.11: Range in bytes\n * 3082 Is.Ordered.By\n * 3085 XML Test-Suite Assembly does not contain DLL path anymore\n * 3089 Remove outdated comment\n * 3093 Tests having TaskLike objects as their return type throws Exception\n * 3094 Bad error message if collections have different types\n * 3104 Removed NET20 compile output\n * 3105 Add tests for use of ApartmentState.Unknown in RequiresThreadAttribute\n * 3107 Declare class in Program.cs provided with NUnitLite Nuget package static\n * 3109 Azure DevOps build fails in Save package artifacts\n * 3124 Switch copyright notice\n * 3128 Correct documentation on ParallelScope\n * 3137 Fix doc-comments in NUnitTestAssemblyRunner\n * 3138 Assert.Ignore breaks when a Task is returned w/o using async/await\n * 3139  Add Azure pipelines badge to frontpage\n * 3144 Retry attribute should not derive from PropertyAttribute\n * 3145 Capture additional exception details in the test output\n * 3156 UnexpectedExceptionTests should tolerate Mono on Azure DevOps Ubuntu\n * 3159 Make tests more tolerant\n * 3161 https url repo\n * 3166 Allow static SetUpFixture classes\n * 3171 Incorrect type for Test Fixtures when using running explore with a filter\n * 3175 Improve user-facing messages\n * 3181 Template Based Test Naming - Incorrect truncation for individual arguments\n * 3186 Fix licenseUrl element in nuspec, will be deprecated\n * 3193 Cake Build Fails with Visual Studio 2019\n * 3195 Drop or at least make Travis not required?\n * 3231 Breaking change in filter functionality between framework 2.7 and 3.11\n * 3209 Test fail when posting to SynchronizationContext.Current\n * 3211 Fix logging\n * 3218 Remove todos from the code base\n * 3222 Our build script tests hang when run with Mono on Windows\n * 3233 AndConstraint should write additional information from failed constraint\n\n## NUnit 3.11 - October 6, 2018\n\n * More informative assertion messages\n * PlatformAttribute is available on .NET Standard and now detects .NET Core\n * ValuesAttribute now works with nullable types\n * Async tests detecting and running Windows Forms or WPF message pumps rather than deadlocking\n * Support for UWP 10.0 is back via .NET Standard 1.4\n\n### Issues Resolved\n\n * 352 Test with infinite loop in TearDown cannot be aborted\n * 452 Deprecate the existing Chocolatey framework package\n * 660 Order dependence of And and Or constraints should be documented\n * 1200 async test + Apartment(ApartmentState.STA) => await not returning on STA thread\n * 2123 Task.Run inside a test will result in deadlock if a control was created previously\n * 2146 Assert.That with a Throws constraint does not provide as much info as Assert.Throws\n * 2427 PropertyConstraint throws away the more helpful message in the base constraint result\n * 2432 Ability to exclude/include the platform .NET Core\n * 2450 NullReferenceException in ExceptionHelper.BuildMessage on Mono\n * 2536 SetArgDisplayNames for TestCaseData and TestFixtureData\n * 2611 Enable .NET Standard 1.6 tests on non-Windows\n * 2693 Ensure that resharper settings are consistent with the editorconfig configuration\n * 2757 Broken `char` comparison in v3.7 and higher\n * 2759 Test fails with \"No arguments were provided\" error when no values returned from IParameterDataSource\n * 2761 Infinite loop in nunit 3.9\n * 2781 Fixed precompiler typo\n * 2786 Timeout value not resetting on Retry of failed test\n * 2790 Removing ITypeInfo abstraction\n * 2798 [Request] Show actual count value when test fail on Has.Exactly(x).Items\n * 2814 Remove public marker types\n * 2819 Only run AppVeyor PR build against open PRs\n * 2821 Save and restore the SynchronizationContext before and after each test case\n * 2823 SetUp failed for test fixture - Array was not a one-dimensional array.  Issue seems related to byte[,] method parameters\n * 2829 Obsoletion warning for DataAttribute\n * 2831 Regular \"BusyExecIdle after 200 milliseconds delay\" CI failures\n * 2833  Use longer BusyExecIdle to avoid CI failures\n * 2836 NUnit.Framework.Does cannot be extended\n * 2837 DictionaryContainsKeyConstraint behaviour is inconstant with Dictionary.ContainsKey when the dictionary uses a custom Comparer\n * 2842 Supporting inheritance of Assert and related classes\n * 2854 Has.All.../Has.None... - show non-matching items in error message\n * 2863 Make tests robust without depending on the order of attributes\n * 2867 Skip executing TestCaseSources for tests which are not included in the filter\n * 2876 Implement Discovery-time filtering for NUnitLite\n * 2883 Our public ConcurrentQueue causes type conflicts\n * 2885 Copy/paste error in Assert.That documentation\n * 2887 NETStandard 1.3 support dropped in NUnit 3.10\n * 2896 Some tests are silently skipped on netstandard1.x since #2796\n * 2898 AssemblyPath contains invalid charaters\n * 2901 Values attribute support for nullable bool and enum types\n * 2923 Update outdated CategoryAttribute xmldoc\n * 2928 Improve error message on EmptyConstraint\n * 2929 Added NUnit XML schemas\n * 2940 Increase StackTracesAreFiltered amount to 5\n * 2955 Potential threading issue in IsolatedContext\n * 2965 NuGet Package : Add `repository` metadata.\n * 2970 InvalidCastException @ NUnit.Framework.TestFixtureSourceAttribute.BuildFrom\n * 2979 Warn.If in Assert.Multiple\n * 2994 Error in .NET Standard 1.4 DictionaryContainsKeyConstraint MetadataToken compatibility methods\n * 2996 Remove unused enum\n * 3009 Fix failing CI Builds by upgrading to NUnit Console 3.9.0\n * 3020 Upgrade nunit-vs-adapter to 3.10 for nUnit 3.11\n * 3024 Unable to add `.IgnoreCase` modifier to an `AnyOf` constraint in collection constraints\n * 3032 APIs to restore before 3.11\n\n## NUnit 3.10.1 - March 12, 2018\n\nAdded a namespace to the props file included in the NuGet package to make it\ncompatible with versions of Visual Studio prior to VS 2017.\n\n## NUnit 3.10 - March 12, 2018\n\nThis release adds a .NET Standard 2.0 version of the framework which re-enables\nmost of the features that have been missing in our earlier .NET Standard builds\nlike parallelism, timeouts, directory and path based asserts, etc. It also contains\nnumerous bug fixes and smaller enhancements. We've improved our XML docs,\nfixed performance issues and added more detail to Multiple Asserts.\n\nThis release also contains source-indexed PDB files allowing developers to debug\ninto the NUnit Framework. This allows you to track down errors or see how the\nframework works.\n\nIn order to support the .NET Standard 2.0 version, the NUnit project switched to\nthe new CSPROJ format and now requires Visual Studio 2017 to compile. This only\neffects people contributing to the project. NUnit still supports building and\ncompiling your tests in older .NET IDEs and NUnit still supports older versions\nof the .NET Framework back to 2.0. For contributors, NUnit can now compile all\nsupported targets on Windows, Linux and Mac using the Cake command line build.\n\n### Issues Resolved\n\n * 1373 Setting with a null value\n * 1382 Use array argument contents in name of parameterized tests rather than just array type.\n * 1578 TestContext.CurrentTest exposes too much internal info\n * 1678 Result Message: OneTimeSetUp: Category name must not contain ',', '!', '+' or '-'\n * 1944 Removing Compact Framework workarounds\n * 1958 System.Reflection.TargetInvocationException after run finished\n * 2033 Nameof refactor\n * 2202 Best practices for XML doc comments\n * 2325 Retry attribute doesn't retry the test.\n * 2331 Repo does not build in VS without running `build -t build` first\n * 2405 Improve PropertyConstraint error output\n * 2421 Publishing symbols with releases\n * 2494 CollectionAssert.AllItemsAreUnique() very slow\n * 2515 Retarget Solution to use the New CSPROJ Format\n * 2518 Bug in CollectionAssert.AreEqual for ValueTuples.\n * 2530 Running tests on main thread. Revisiting #2483\n * 2542 NUnit does not support parallelism on .NET Core 2.0\n * 2555 CI timeout: NUnit.Framework.Assertions.CollectionAssertTest.PerformanceTests\n * 2564 Add minClientVersion to .nuspec files\n * 2566 Refactor `SimpleEnumerableWithIEquatable` test object\n * 2577 Warning in TearDown is inconsistent with Assertion failure\n * 2580 Remove unused defines\n * 2591 NUnitEqualityComparer.Default should be replaced with new NUnitEqualityComparer()\n * 2592 Add .props with ProjectCapability to suppress test project service GUID item\n * 2608 Culture differences on .NET Core on non-Windows causes test failures\n * 2622 Fix flakey test\n * 2624 Prevent emails for successful builds on Travis\n * 2626 SetUp/TearDown methods are invoked multiple times before/after test in .NET Standard targeted projects\n * 2627 Breaking change in CollectionAssert.AllItemsAreUnique with NUnit 3.9\n * 2628 Error during installing tools when running build script\n * 2630 Framework throws NullReferenceException if test parameter is marked with [Values(null)]\n * 2632 Parallel tests are loading 100% CPU when nested SetUpFixture exists\n * 2639 ValuesAttribute causes ExpectedResult to have no effect\n * 2647 Add Current Attempt indicator in TestContext for use with RetryAttribute\n * 2654 Address feedback from @oznetmaster\n * 2656 NuGet package links to outdated license\n * 2659 Naming Errors\n * 2662 NullReferenceException after parallel tests have finished executing\n * 2663 Building NUnit .NET 4.5 in VS2017 fails\n * 2669 Removed vestigial build script helper method\n * 2670 Invalid assemblies no longer give an error message\n * 2671 Ensure that FailureSite.Child is used where appropriate.\n * 2685 Remove Rebracer file\n * 2688 Assert.Throws swallows console output\n * 2695 MultipleAssertException doesn't provide proper details on failures\n * 2698 Syntax suggestions errors as warnings\n * 2704 Add Constraint to test whether actual item is contained in expected collection\n * 2711 NUnitLite: Add support for --nocolor option\n * 2714 AnyOfConstraint enumerates multiple times\n * 2725 Enable 'strict' compilation flag\n * 2726 Replace the ConcurrentQueue and SpinWait compatibility classes\n * 2727 Avoid treating warnings as errors inside the IDE\n * 2734 TestCaseAttribute: ExpectedResult should support same value conversion as normal method arguments\n * 2742 FailureSite not correctly set on containing suites when tests are ignored.\n * 2749 Update Travis SDK versions\n\n## NUnit 3.9 - November 10, 2017\n\nThis release addresses numerous parallelization issues that were introduced in 3.8\nwhen method level parallelization was added. Most of the parallelization issues\nresolved were tests never completing when using some combinations of parallel tests\nand `ApartmentState` not being properly applied to tests in all cases.\n\n### Issues Resolved\n\n * 893 Inconsistent Tuple behavior.\n * 1239 NUnit3 sometimes hangs if SetUpFixtures are run in parallel\n * 1346 NullReferenceException when [TestFixtureSource] refers to data in a generic class.\n * 1473 Allow Is.Ordered to Compare Null Values\n * 1899 Constraint Throws.Exception does not catch exception with async lambdas\n * 1905 SetupFixture without namespace will make assembly-level Parallelizable attribute useless\n * 2091 When a native exception of corrupted state is thrown, nunit test thread crashes and the nunit-console process hangs\n * 2102 NUnitLite incorrectly reports Win 10 OS name\n * 2271 When CollectionAssert.AreEqual do compare each element, it will ignore the IEquatable of the element too\n * 2289 ResolveTypeNameDifference does not handle generic types well\n * 2311 Resolve test projects' namespace situation\n * 2319 Add .editorconfig to set file encodings so that people don't have to think about it\n * 2364 Parallelizable attribute not invalidating invalid parallel scope combinations\n * 2372 Create testing for compounded ConstraintFilters\n * 2388 Parallelization causes test cases to stop respecting fixture's apartment state\n * 2395 NUnit 3.8+ does not finish running tests\n * 2398 NUnit CI spurious failures, NUnit.Framework.Internal.ThreadUtilityTests.Kill\n * 2402 --labels=All doesn't show anything in console output executing NUnitLite Console Runner\n * 2406 Summary descriptions replaced by more detailed ones\n * 2411 And constraint on Has.Member throws\n * 2412 Using fluent syntax unintentionally removed in 3.8\n * 2418 Support equality comparison delegate\n * 2422 Has.Property causes AmbiguousMatchException for shadowing properties\n * 2425 XML doc typo fix\n * 2426 Regression in 3.8.1: ApartmentAttribute no longer works when applied to an assembly\n * 2428 Fix NullReferenceExceptions caused by WorkItemQueue not being thread-safe\n * 2429 Stack trace shown for Assert.Warn\n * 2438 [Parallelizable] hangs after a few tests\n * 2441 Allows to override load-time/execution-time interfaces in built-in tests attributes\n * 2446 CI failure in mono Warning tests\n * 2448 Inherited Test SetUp, TearDown, etc. are not executed in .NET Core if they are not public\n * 2451 Compile RegEx to improve performance\n * 2454 SetUpFixture not respecting NonParallelizable tag on TestFixtures.\n * 2459 [Parallelizable(ParallelScope.Children)] Unable to finish tests\n * 2465 Possible wrong properties are returned by reflection in ReflectionExtensions.cs\n * 2467 Test execution hangs when using [SetUpFixture] with NUnit 3.8.x\n * 2469 Allow RangeAttribute to be specified multiple times for the same argument\n * 2471 Parametrized testcases not running in parallel\n * 2475 Framework incorrectly identifies Win 10 in xml results\n * 2478 Attributes on SetUpFixture are not applied\n * 2486 Message when asserting null with Is.EquivalentTo could be more helpful\n * 2497 Use ConstraintUtils.RequireActual through out the codebase\n * 2504 Support changing test display name on TestFixtureData\n * 2508 Correct divergence from shadowed Is / Has members.\n * 2516 When test writes something to the stdErr there is no guaranteed way to link a test-output event to a target test using ITestEventListener\n * 2525 Remove unwanted space from comment\n * 2526 SerializationException in low trust floating point equality test\n * 2533 Matches<T>(Predicate<T>) throws ArgumentException or Fails when actual is null\n * 2534 SetUpFixture causes NUnit to lock with Apartment( STA )\n * 2551 CollectionItemsEqualConstraint is missing Using(Func<T, T, bool>)\n * 2554 Made TestFixtureData.SetName internal for 3.9\n\n## NUnit 3.8.1 - August 28, 2017\n\nThis release fixes two critical regressions in the 3.8 release. The first caused the console\nrunner to crash if you are using test parameters. The second issue caused collection\nconstraints checking for multiple items in a collection to fail.\n\n### Issues Resolved\n\n * 2386 Contains.Item() fails for collections in NUnit 3.8\n * 2390 Missing value attribute in test parameters setting causes NullReferenceException in console\n\n## NUnit 3.8 - August 27, 2017\n\nThis release removes several methods and attributes that were marked obsolete in the\noriginal 3.0 release. Support for iOS and Android has been improved.\n\nAn issue that caused unit tests to run slower was addressed as was a bug that prevented\nthe use of Assert.Multiple in async code.\n\nThe Order attribute can now also be applied to the class level to set the order\nthat test fixtures will be run.\n\n### Issues Resolved\n\n * 345  Order of Fixture Execution\n * 1151 Include differences in output for Is.EquivalentTo\n * 1324 Remove CollectionContainsConstraint\n * 1670 Attaching files to the test result\n * 1674 InRange-Constraint must work with object\n * 1851 TestCaseSource unable to pass one element byte array\n * 1996 Timeout does not work if native code is running at the time\n * 2004 Has.One as synonym for Has.Exactly(1).Items\n * 2062 TestCaseSource attribute causes test to pass when source is not defined\n * 2144 Allow option on RandomAttribute to produce distinct values\n * 2179 Some NUnit project's tests fail on systems with CultureInfo other than en\n * 2195 Contains.Substring with custom StringComparison\n * 2196 Expose ParallelizableAttribute (and other attribute) constructor arguments as properties\n * 2201 Invalid platform name passed to PlatformAttribute should mark test NotRunnable\n * 2208 StackFIlter trims leading spaces from each line\n * 2213 SetCultureAttribute: CultureInfo ctor should use default culture settings\n * 2217 Console runner performance varies wildly depending on environmental characteristics\n * 2219 Remove Obsolete Attributes\n * 2225 OneTimeTearDown and Dispose Ordering\n * 2237 System.Runtime.Loader not available for iOS/Android\n * 2242 Running tests directly should never surface a NullReferenceException\n * 2244 Add KeyValuePair<TKey, TValue> to the default formatters\n * 2251 Randomizer.NextGuid()\n * 2253 Parallelizable(ParallelScope.Fixtures) doesn't work on a TestFixture\n * 2254 EqualTo on ValueTuple with Nullable unexpected\n * 2261 When an assembly is marked with ParallelScope.None and there are Parallelizable tests NUnit hangs\n * 2269 Parallelizable and NonParallelizable attributes on setup and teardown silently ignored\n * 2276 Intermittent test failures in Travic CI: TestContextTests\n * 2281 Add type constraint for Throws and any method requiring Exception\n * 2288 Killing thread cancels test run\n * 2292 Is.Ordered.By() with a field throws NullReferenceException\n * 2298 Write TestParametersDictionary to xml result file in readable format\n * 2299 NUnitLite NuGet package no longer installs NUnit NuGet package\n * 2304 Revert accidental doc removal\n * 2305 Correct misprint \".con\" -> \".com\"\n * 2312 Prevent crash on invalid --result parsing in NUnitLite\n * 2313 Incorrect xmldoc on RetryAttribute\n * 2332 Update build script to use NUnitConsoleRunner v3.7.0\n * 2335 Execute OneTimeTearDown as early as possible when running fixtures in parallel\n * 2342 Remove deprecated Is.String* Constraints\n * 2348 Can't use Assert.Multiple with async code\n * 2353 Provide additional Result information through TestContext\n * 2358 Get framework to build under Mono 5.0\n * 2360 Obsolete CollectionContainsConstraint Constructors\n * 2361 NUnit Parallelizable and OneTimeSetUp with no namespace results in single-threaded test execution\n * 2370 TestCaseAttribute can't convert int to nullable long\n\n## NUnit 3.7.1 - June 6, 2017\n\nThis is a hotfix release that addresses occasional hangs when using test parallelization\nand fixes crashes in NCrunch prior to version 3.9.\n\n### Issues Resolved\n\n * 2205 Ncrunch: System.Xml.XmlException: Root element is missing, when adding NUnit 3.7.0\n * 2209 NUnit occasionally hangs when parallelizable TestFixture has OneTimeSetUp and OneTimeTearDown\n\n## NUnit 3.7 - May 29, 2017\n\nThis release of NUnit expands on parallel test execution to allow test methods to\nbe run in parallel. Please see the [Parallelizable Attribute](https://github.com/nunit/docs/wiki/Parallelizable-Attribute)\nfor more information.\n\nNUnit 3.7 also drops the Portable build of the framework and replaces it with a\n.NET Standard 1.3 version to compliment the .NET Standard 1.6 version. This change\nenables several constraints and other features in the .NET Standard builds that\nweren't available in portable like Path and Directory based asserts.\n\nThe AssertionHelper class has been deprecated because it is seldom used and has\nnot received any of the updates that Asserts and Constraints receive. If your code\nis using the AssertionHelper class, we recommend that you migrate your asserts.\n\n### Issues Resolved\n\n * 164 Run test methods within a fixture in parallel\n * 391 Multiple Assertions\n * 652 Add ability to execute test actions before SetUp or OneTimeSetUp\n * 1000 Support multiple Author attributes per test\n * 1096 Treat OneTimeSetup and OneTimeTearDown as separate work items\n * 1143 NUnitLite - Explore flag does not apply where filter to output\n * 1238 Feature request: Print LoaderExceptions when fixture loading fails\n * 1363 Make Timeouts work without running test on its own thread\n * 1474 Several SetUpFixtures at the same level may be active at the same time\n * 1819 TestContext.Progress.Write writes new line\n * 1830 Add --labels switch changes to nunilite and nunitlite tests\n * 1859 ConcurrentQueue is duplicate with System.Threading.dll package\n * 1877 Resolve differences between NUnit Console and NUnitLite implementations of @filename\n * 1885 Test parameter containing a semicolon\n * 1896 Test has passed however Reason with an empty message is printed in the xml\n * 1918 Changing DefaultFloatingPointTolerance breaks tests running in parallel\n * 1932 NUnit Warn class should be removed from stack trace by filter\n * 1934 NullReferenceException when null arguments are used in TestFixtureAttribute\n * 1952 TestContext.Out null when used in task with .NET Core\n * 1963 Investigate removing SpecialValue\n * 1965 TestContext does not flow in async method\n * 1971 Switch CHANGES.txt to Markdown\n * 1973 Implemented TestExecutionContext to use AsyncLocal<> for NETSTANDARD1_6\n * 1975 TestFixtureSource doesn't work with a class that has no namespace\n * 1983 Add missing ConstraintExpression.Contain overload\n * 1990 Add namespace filter\n * 1997 Remove unused --verbose and --full command line options\n * 1999 Author Tests assume ICustomAttributeProvider.GetCustomAttributes return order is defined\n * 2003 Better user info about ParallelizableAttribute and ParallelScope\n * 2005 Exclude empty failure messages from results xml\n * 2007 3.6 Multiple assertion backwards compatibility\n * 2010 Add DelayedConstraint in NetStandard 1.6 build\n * 2020 Better message when timeout fails\n * 2023 Ability to abort threads running a message pump\n * 2025 NullReferenceException using Is.EqualTo on two unequal strings\n * 2030 Add method to mark tests as invalid with a reason\n * 2031 Limit Language level to C#6\n * 2034 Remove silverlight project - no longer used\n * 2035 NullReferenceException inside failing Assert.That call\n * 2040 Cannot catch AssertionException\n * 2045 NUnitlite-runner crashes if no file is provided\n * 2050 Creation of TestExecutionContext should be explicit\n * 2052 NullReferenceException with TestCaseSource if a property has no setter\n * 2061 TestContext.WorkDirectory not initialized during build process\n * 2079 Make TestMethod.Arguments public or otherwise accessible (e.g. TestContext)\n * 2080 Allow comments in @FILE files\n * 2087 Enhance error message: Test is not runnable in single-threaded context. Timeout\n * 2092 Convert Portable library to .NET Standard 1.3\n * 2095 Extend use of tolerance to ComparisonConstraints\n * 2099 Include type in start-suite/start-test report elements\n * 2110 NullReferenceException when getting TestDirectory from TestContext\n * 2115 Mark AssertionHelper as Obsolete\n * 2121 Chained PropertyConstraint constraints report incorrect ActualValue\n * 2131 Remove \"Version 3\" suffix from NUnitLite NuGet Package\n * 2132 TestFixtureTests.CapturesArgumentsForConstructorWithMultipleArgsSupplied assumes order of custom attributes\n * 2143 Non-parallel fixture with parallel children runs in parallel with other fixtures\n * 2147 Test Assembly using NUnitLite & Nunit 3.6.1 hangs under .NET Core when `--timeout` is supplied on command line\n * 2150 Add portable-slow-tests to Cake file\n * 2152 Allow attaching files to TestResults\n * 2154 Fix execution of non-parallel test fixtures\n * 2157 Getting WorkerId inside Assert.Throws / DoesNotThrow returns null instead of previous non-null value\n * 2158 Update SetupFixtureAttribute XML Docs\n * 2159 Prevent crash in .NET standard with log file path\n * 2165 Trying to install NUnit 3.6.1 on .NET Framework asks for download of 20 more packages\n * 2169 Incorrect xmldocs for SetUpAttribute\n * 2170 Cake build fails if only Visual Studio 2017 installed\n * 2173 Remove PreTestAttribute and PostTestAttribute\n * 2186 Replace special characters as part of converting branch names to package versions\n * 2191 System.Reflection.TargetInvocationException with nunit3-console --debug on Mono\n\n## NUnit 3.6.1 - February 26, 2017\n\nThis is a hotfix release of the framework that addresses critical issues found in\nthe 3.6 release.\n\n### Issues Resolved\n\n * 1962 A Theory with no data passes\n * 1986 NUnitLite ignores --workers option\n * 1994 NUnitLite runner crashing when --trace is specified\n * 2017 Two NUnit project's tests fail on systems with comma decimal mark settings\n * 2043 Regression in 3.6.0 when catching AssertionException\n\n## NUnit 3.6 - January 9, 2017\n\nThis release of the framework no longer includes builds for Compact Framework or\nfor SilverLight, but adds a .NET Standard 1.6 build. If anyone still using\nCompact Framework or SilverLight and would like to continue development on those\nversions of the framework, please contact the NUnit team.\n\n### Framework\n\n * .NET Standard 1.6 is now supported\n * Adds support for Multiple Assert blocks\n * Added the --params option to NUnitLite\n * Theories now support Nullable enums\n * Improved assert error messages to help differentiate differences in values\n * Added warnings with Warn.If(), Warn.Unless() and Assert.Warn()\n * Enabled Path, File and Directory Asserts/Contraints for .NET Core testing\n * Added NonTestAssemblyAttribute for use by third-party developers to indicate\n   that their assemblies reference the NUnit framework, but do not contain tests\n\n### Issues Resolved\n\n * 406 Warning-level Assertions\n * 890 Allow file references anywhere in the command line.\n * 1380 Appveyor Failures when branch name is too long\n * 1589 Split the nunit repository into multiple repositories\n * 1599 Move Compact Framework to separate project\n * 1601 Move Silverlight to a separate project\n * 1609 Upgrade Cake build to latest version\n * 1661 Create .NET Standard Framework Build\n * 1668 Need implementation-independent way to test number of items in a collection\n * 1743 Provide multiple results for a test case in the XML output\n * 1758 No direct inverse for Contains.Key\n * 1765 TestCaseSourceAttribute constructor for method with parameters\n * 1802 Design Multiple Assert syntax as seen by users\n * 1808 Disambiguate error messages from EqualConstraint\n * 1811 Build.ps1 fails if spaces in path\n * 1823 Remove engine nuspecs and old global.json\n * 1827 Remove unused repository paths from repositories.config\n * 1828 Add Retry for failed tests only\n * 1829 NUnitLite accepts --params option but does not make any use of it.\n * 1836 Support nullable enums in Theories\n * 1837 [Request] AfterContraint to support more readable usage\n * 1840 Remove SL and CF #Defined source\n * 1866 [Request] More readable way to set polling interval in After constraint\n * 1870 EqualConstraint result failure message for DateTime doesn't show sufficient resolution\n * 1872 Parameterized method being called with no parameter\n * 1876 What should we do about Env.cs\n * 1880 AttributeUsage for various Attributes\n * 1889 Modify nunitlite to display multiple assert information\n * 1891 TestContext.Progress and TestContext.Error silently drop text that is not properly XML encoded\n * 1901 Make nunitlite-runner Prefer32Bit option consistent across Debug/Release\n * 1904 Add .NET Standard 1.6 Dependencies to the Nuspec Files\n * 1907 Handle early termination of multiple assert block\n * 1911 Changing misleading comment that implies that every `ICollection<T>` is a list\n * 1912 Add new warning status and result state\n * 1913 Report Warnings in NUnitLite\n * 1914 Extra AssertionResult entries in TestResults\n * 1915 Enable Path, File and Directory Assert/Constraints in the .NET Standard Build\n * 1917 Use of IsolatedContext breaks tests in user-created AppDomain\n * 1924 Run tests using the NUnit Console Runner\n * 1929 Rename zip and remove source zip\n * 1933 Tests should pass if test case source provides 0 test cases\n * 1941 Use dictionary-based property for test run parameters\n * 1945 Use high-quality icon for nuspecs\n * 1947 Add NonTestAssemblyAttribute\n * 1954 Change Error Message for Assert.Equals\n * 1960 Typo fixes\n * 1966 Xamarin Runner cannot reference NUnit NuGet Package\n\n## NUnit 3.5 - October 3, 2016\n\nThis is the first version of NUnit where the framework will be released separately from the\nconsole runner, engine and other extensions. From this point forward, the NUnit Framework will be\nreleased on its own schedule that is not bound to that of any other NUnit project and version numbers\nmay diverge over time.\n\nThis is also the first release where the NUnit Framework will not be included in the installer. Only\nthe console runner, engine and extensions will be available as an MSI installer. We recommend that you\nuse the NUnit NuGet packages for the framework, but a ZIP file with the binaries will also be available.\n\n### Framework\n\n * Added Assert.Zero and Assert.NotZero methods\n * You can now pass a `Func<string>` to Asserts to lazily evaluate exception messages\n * Added the ability to Assert on the order of multiple properties in a collection\n * Tests with a Timeout will no longer timeout while you are debugging\n\n### Issues Resolved\n\n * 144 Pass a `Func<string>` to lazily evaluate an exception message\n * 995 Enable Warning as Error\n * 1106 Move various Assembly Info files under Properties for CF\n * 1334 Add Assert.Zero and Assert.NotZero\n * 1479 Don't enforce [Timeout] when debugger is attached\n * 1540 Remove old .NET Core Projects\n * 1553 Allow ordering tests to be done in multiple properties\n * 1575 Escaping control chars in custom message\n * 1596 Eliminate code sharing across projects to be split\n * 1598 Split framework and console/engine into separate projects\n * 1610 Refactor dependencies in build.cake\n * 1615 Appveyor error in TestCF\n * 1621 Remove console and command-line option files from common\n * 1640 When submitting only part of optional parameters, all are overriden by defaults\n * 1641 Create OSX CI Build on Travis\n * 1663 Find way to hide NUnit.Compatability.Path from intellisense\n * 1681 NUnitLite under .net core doesn't support TeamCity output\n * 1683 Existence of SerializableAttribute in .NET Core\n * 1693 2 unit tests fail due to localization\n * 1716 Move installer to new repository\n * 1717 Change suffix for master builds\n * 1723 Remove Cake target TestAll\n * 1739 Create separate copies of MockAssembly for framework, engine and extensions\n * 1751 Serializable attribute exists in both System.Runtime.Serialization.Formatters and nunit.framework\n * 1775 Support NUnit assertions in partial trust code.\n * 1800 Remove Console/Engine projects from nunit.linux.sln\n * 1805 Error message \"arguments provided for method not taking any\" seems incomplete / doesn't make much sense\n * 1815 Prevent NullReferenceException in SubPathConstraint\n\n## NUnit 3.4.1 - June 30, 2016\n\n### Console Runner\n\n * A new option, --list-extensions, will display all the engine extensions that\n   have been installed by the engine.\n\n### Issues Resolved\n\n * 1623 NUnit 3.4 is not integrated with TeamCity\n * 1626 NUnit.ConsoleRunner is not picking up NUnit.Extension.NUnitV2ResultWriter\n * 1628 Agent's process stays in memory when it was failed to unload AppDomain\n * 1635 Console option to list loaded extensions\n\n## NUnit 3.4 - June 25, 2016\n\n### Framework\n\n * Improvements in comparing equality using `IEquatable<T>`\n * Test case names will only be truncated if the runner requests it or it is overridden on the command line\n   with the --test-name-format option\n * The .NET 2.0 version of the framework now includes LINQ. If your tests target .NET 2.0, you can now use\n   LINQ queries in your tests\n\n### Engine\n\n * The TeamCity event listener has been separated out into an engine extension\n * Fixed numerous issues around thread safety of parallel test runs\n * Additional fixes to reduce memory usage\n * Fixes for Mono 4.4\n\n### Console Runner\n\n * There is a new --params command line option that allows you to pass parameters to your tests\n   which can be retrieved using TestContext.Parameters\n * Another new command line option --loaduserprofile causes the User Profile to be loaded into the\n   NUnit Agent process.\n\n### Issues Resolved\n\n * 329 (CLI) Runner does not report AppDomain unloading timeout\n * 720 Need a way to get test-specific command-line arguments at runtime\n * 1010 Need to control engine use of extensions\n * 1139 Nunit3 console doesn't show test output continously\n * 1225 The --teamcity option should really be an extension\n * 1241 Make TestDirectory accessible when TestCaseSource attributes are evaluated\n * 1366 Classname for inherited test is not correct\n * 1371 Support `dotnet test` in .NET CLI and .NET Core\n * 1379 Console returns 0 for invalid fixtures\n * 1422 Include TestListWithEmptyLine.tst in ZIP Package\n * 1423 SingleThreaded attribute should raise an error if a thread is required\n * 1425 Lazy initialization of OutWriter in TestResult is not thread safe\n * 1427 Engine extensions load old packages\n * 1430 TestObjects are retained for lifetime of test run, causing high memory usage\n * 1432 NUnit hangs when reporting to TeamCity\n * 1434 TestResult class needs to be thread-safe\n * 1435 Parallel queue creation needs to be thread-safe\n * 1436 CurrentFramework and Current Platform need to be more thread-safe\n * 1439 EqualConstraint does Not use Equals Override on the Expected Object\n * 1441 Add Linq for use internally in .NET 2.0 code\n * 1446 TestOrderAttributeTests is not public\n * 1450 Silverlight detection doesn't work when building on 32-bit OS\n * 1457 Set the 2.0 build to ignore missing xml dcoumentation\n * 1463 Should TestResult.AssertCount have a public setter?\n * 1464 TNode.EscapeInvalidXmlCharacters recreates Regex continually\n * 1470 Make EventQueue and associated classes lock-less and thread safe\n * 1476 Examine need for \"synchronous\" events in event queue\n * 1481 TestCase with generic return type causes NullReferenceException\n * 1483 Remoting exceptions during test execution\n * 1484 Comparing Equality using `IEquatable<T>` Should Use Most Specific Method\n * 1493 NUnit 2 test results report ParameterizedMethod but should be ParameterizedTest\n * 1507 NullReferenceException when null arguments are used in TestFixtureAttribute\n * 1513 Add new teamcity extension to packages\n * 1518 NUnit does not send the \"testStarted\" TeamCity service message when exception was thrown from SetUp/OneTimeSetUp\n * 1520 Detect Portable, Silverlight and Compact and give error message\n * 1528 Use of Sleep(0) in NUnit\n * 1543 Blank name attribute in nunit2-formatted XML result file test-run element\n * 1547 Create separate assembly for System.Linq compatibility classes\n * 1548 Invalid Exception when engine is in a 32-bit process\n * 1549 Changing default behavior for generating test case names\n * 1551 Path in default .addins file for ConsoleRunner package may not exist\n * 1555 EndsWith calls in Constraint constructor can cause major perf issues\n * 1560 Engine writes setting file unnecessarily\n * 1573 Move Nunit.Portable.Agent to new Repo\n * 1579 NUnit v3 dangerously overrides COMPLUS_Version environment variable\n * 1582 Mono 4.4.0 Causes Test Failures\n * 1593 Nunit Console Runner 3.2.1 and Mono 4.4 throws RemotingException\n * 1597 Move Portable agent to its own repository\n * 1605 TeamCity package has no pre-release suffix\n * 1607 nunit.nuget.addins discovery pattern is wrong then restored through project.json\n * 1617 Load user profile on test runners\n\n## NUnit 3.2.1 - April 19, 2016\n\n### Framework\n\n * The output and error files are now thread safe when running tests in parallel\n * Added a .NET 3.5 build of the framework preventing conflicts with the compatiblity classes in the 2.0 framework\n * Added a SingleThreadedAttribute to be added to a TestFixture to indicate all child tests should run on the same thread\n\n### Engine\n\n * Unless required, run all tests within a fixture on the same thread\n * Added an EventListener extension point\n * Reduced memory usage\n\n### Console Runner\n\n * No longer probes for newer versions of the engine, instead uses the engine that is included with the console\n\n### Issues Resolved\n\n *  332 Add CF to the Appveyor CI build\n *  640 Keep CF Build (and other future builds) in Sync\n *  773 Upgrade Travis CI from Legacy Infrastructure\n * 1141 Explicit Tests get run when using --where with some filters\n * 1161 NUnit3-Console should disallow the combination of --inprocess and --x86, giving an error message\n * 1208 Apartment on assembly level broken\n * 1231 Build may silently fail some tests\n * 1247 Potential memory issue\n * 1266 SetCultureAttribute does not work if set on assembly level\n * 1302 Create EventListener ExtensionPoint for the Engine\n * 1317 Getting CF framework unit tests running on CI build\n * 1318 NUnit console runner fails with error code -100\n * 1327 TestCaseSource in NUnit 3 converts an argument declared as String[] to String\n * 1329 Unable to build without Compact Framework\n * 1333 Single Thread per Worker\n * 1338 BUILDING.txt is outdated\n * 1349 Collision on System.Func from nunit.framework with System.Core in .Net 3.5 (CS0433)\n * 1352 Tests losing data setup on thread\n * 1359 Compilation error in NUnitPortableDriverTests.cs\n * 1383 Skip Silverlight build if SDK not installed\n * 1386 Bug when using Assert.Equals() with types that explicitly implement `IEquatable<T>`\n * 1390 --testlist with file with blank first line causes IndexOutOfRangeException\n * 1399 Fixed NullReference issue introduced by the fix for #681\n * 1405 ITestRunner.StopRun throws exception of type 'System.MissingMethodException'\n * 1406 TextCapture is not threadsafe but is used to intercept calls that are expected to be threadsafe\n * 1410 Make OutFile and ErrFile streamwriters synchronized\n * 1413 Switch console to use a local engine\n\n## NUnit 3.2 - March 5, 2016\n\n### Framework\n\n * Added an Order attribute that defines the order in which tests are run\n * Added Assert.ThrowsAsync for testing if async methods throw an exception\n * You can now compare unlike collections using Is.EquivalentTo().Using(...)\n * Added the ability to add custom message formatters to MsgUtils\n * TestCaseSourceAttribute now optionally takes an array of parameters that can be passed to the source method\n * Added Is.Zero and Is.Not.Zero to the fluent syntax as a shorter option for Is.EqualTo(0) and Is.Not.EqualTo(0)\n\n### Engine\n\n * Engine extensions can be installed via NuGet packages\n\n### Issues Resolved\n\n * 170 Test Order Attribute\n * 300 Create an NUnit Visual Studio Template\n * 464 Async delegate assertions\n * 532 Batch runner for Silverlight tests\n * 533 Separate NUnitLite runner and autorunner\n * 681 NUnit agent cannot resolve test dependency assemblies when mixed mode initialization runs in the default AppDomain\n * 793 Replace CoreEngine by use of Extensions\n * 907 Console report tests are too fragile\n * 922 Wrap Console in NUnitLite\n * 930 Switch from MSBuild based build system to Cake\n * 981 Define NUnit Versioning for post-3.0 Development\n * 1004 Poor formatting of results for Assert.AreEqual(DateTimeOffset, DateTimeOffset)\n * 1018 ArgumentException when 2.x version of NUnit Framework is in the bin directory\n * 1022 Support Comparing Unlike Collections using Is.EquivalentTo().Using(...)\n * 1044 Re-order Test Summary Errors/Failures\n * 1066 ApartmentAttribute and TestCaseAttribute(s) do not work together\n * 1103 Can't use TestCaseData from base class\n * 1109 NullReferenceException when using inherited property for ValueSource\n * 1113 Console runner and xml output consistency\n * 1117 Fix misbehaviour of Throws.Exception with non-void returning functions\n * 1120 NUnitProject should parse .nunit project files containing Xml Declarations\n * 1121 Usage of field set to null as value source leads to somewhat cryptic error\n * 1122 Region may be disposed before test delegate is executed\n * 1133 Provide a way to install extensions as nuget packages\n * 1136 Don't allow V2 framework to update in V2 driver tests\n * 1171 A bug when using Assert.That() with Is.Not.Empty\n * 1185 Engine finds .NET 4.0 Client Profile twice\n * 1187 ITestAssemblyRunner.StopRun as implemented by NUnitTestAssemblyRunner\n * 1195 name attribute in test-suite and test-results element of output xml is different to nunit 2.6.4 using nunit2-format\n * 1196 Custom value formatter for v3 via MsgUtils\n * 1210 Available runtimes issues\n * 1230 Add ability for testcasedatasource to have parameters passed to methods\n * 1233 Add TestAssemblyRunner tests to both portable and silverlight builds\n * 1234 Have default NUnitLite Runner Program.cs return exit code\n * 1236 Make Appveyor NuGet feed more useable\n * 1246 Introduce Is.Zero syntax to test for zero\n * 1252 Exception thrown when any assembly is not found\n * 1261 TypeHelper.GetDisplayName generates the wrong name for generic types with nested classes\n * 1278 Fix optional parameters in TestCaseAttribute\n * 1282 TestCase using Params Behaves Oddly\n * 1283 Engine should expose available frameworks.\n * 1286 value of the time attribute in nunit2 outputs depends on the machine culture\n * 1297 NUnit.Engine nuget package improvements\n * 1301 Assert.AreNotSame evaluates ToString unnecessarily\n\n## NUnit 3.0.1 - December 1, 2015\n\n### Console Runner\n\n * The Nunit.Runners NuGet package was updated to become a meta-package that pulls in the NUnit.Console package\n * Reinstated the --pause command line option that will display a message box allowing you to attach a debugger if the --debug option does not work\n\n### Issues Resolved\n\n * 994 Add max number of Agents to the NUnit project file\n * 1014 Ensure NUnit API assembly updates with MSI installs\n * 1024 Added --pause flag to console runner\n * 1030 Update Nunit.Runners package to 3.0\n * 1033 \"No arguments were provided\" with Theory and Values combination\n * 1035 Check null arguments\n * 1037 Async tests not working on Windows 10 Universal\n * 1041 NUnit2XmlResult Writer is reporting Sucess when test fails\n * 1042 NUnit2 reports on 3.0 is different than 2.6.4\n * 1046 FloatingPointNumerics.AreAlmostEqualUlps throws OverflowException\n * 1049 Cannot select Generic tests from command line\n * 1050 Do not expose System.Runtime.CompilerServices.ExtensionAttribute to public\n * 1054 Create nuget feeds for CI builds on Appveyor\n * 1055 nunit3 console runner --where option does not return error on invalid selection string\n * 1060 Remove \"Version 3\" from NUnit Nuget Package\n * 1061 Nunit30Settings.xml becomes corrupted\n * 1062 Console.WriteLine statements in \"OneTimeSetUp\" and \"OneTimeTearDown\" annotated methods are not directed to the console when using nunit3-console.exe runner\n * 1063 Error in Random Test\n\n## NUnit 3.0.0 Final Release - November 15, 2015\n\n### Issues Resolved\n\n * 635 Mono 4.0 Support\n\n## NUnit 3.0.0 Release Candidate 3 - November 13, 2015\n\n### Engine\n\n * The engine now only sets the config file for project.nunit to project.config if project.config exists. Otherwise, each assembly uses its own config, provided it is run in a separate AppDomain by itself.\n\n   NOTE: It is not possible for multiple assemblies in the same AppDomain to use different configs. This is not an NUnit limitation, it's just how configs work!\n\n### Issues Resolved\n\n * 856 Extensions support for third party runners in NUnit 3.0\n * 1003 Delete TeamCityEventHandler as it is not used\n * 1015 Specifying .nunit project and --framework on command line causes crash\n * 1017 Remove Assert.Multiple from framework\n\n## NUnit 3.0.0 Release Candidate 2 - November 8, 2015\n\n### Engine\n\n * The IDriverFactory extensibility interface has been modified.\n\n### Issues Resolved\n\n * 970  Define PARALLEL in CF build of nunitlite\n * 978  It should be possible to determine version of NUnit using nunit console tool\n * 983  Inconsistent return codes depending on ProcessModel\n * 986  Update docs for parallel execution\n * 988  Don't run portable tests from NUnit Console\n * 990  V2 driver is passing invalid filter elements to NUnit\n * 991  Mono.Options should not be exposed to public directly\n * 993  Give error message when a regex filter is used with NUnit V2\n * 997  Add missing XML Documentation\n * 1008 NUnitLite namespace not updated in the NuGet Packages\n\n## NUnit 3.0.0 Release Candidate - November 1, 2015\n\n### Framework\n\n * The portable build now supports ASP.NET 5 and the new Core CLR.\n\n   NOTE: The `nunit3-console` runner cannot run tests that reference the portable build.\n   You may run such tests using NUnitLite or a platform-specific runner.\n\n * `TestCaseAttribute` and `TestCaseData` now allow modifying the test name without replacing it entirely.\n * The Silverlight packages are now separate downloads.\n\n## NUnitLite\n\n * The NUnitLite runner now produces the same output display and XML results as the console runner.\n\n### Engine\n\n * The format of the XML result file has been finalized and documented.\n\n### Console Runner\n\n * The console runner program is now called `nunit3-console`.\n * Console runner output has been modified so that the summary comes at the end, to reduce the need for scrolling.\n\n### Issues Resolved\n\n *  59 Length of generated test names should be limited\n *  68 Customization of test case name generation\n * 404 Split tests between nunitlite.runner and nunit.framework\n * 575 Add support for ASP.NET 5 and the new Core CLR\n * 783 Package separately for Silverlight\n * 833 Intermittent failure of WorkItemQueueTests.StopQueue_WithWorkers\n * 859 NUnit-Console output - move Test Run Summary to end\n * 867 Remove Warnings from Ignored tests\n * 868 Review skipped tests\n * 887 Move environment and settings elements to the assembly suite in the result file\n * 899 Colors for ColorConsole on grey background are too light\n * 904 InternalPreserveStackTrace is not supported on all Portable platforms\n * 914 Unclear error message from console runner when assembly has no tests\n * 916 Console runner dies when test agent dies\n * 918 Console runner --where parameter is case sensitive\n * 920 Remove addins\\nunit.engine.api.dll from NuGet package\n * 929 Rename nunit-console.exe\n * 931 Remove beta warnings from NuGet packages\n * 936 Explicit skipped tests not displayed\n * 939 Installer complains about .NET even if already installed\n * 940 Confirm or modify list of packages for release\n * 947 Breaking API change in ValueSourceAttribute\n * 949 Update copyright in NUnit Console\n * 954 NUnitLite XML output is not consistent with the engine's\n * 955 NUnitLite does not display the where clause\n * 959 Restore filter options for NUnitLite portable build\n * 960 Intermittent failure of CategoryFilterTests\n * 967 Run Settings Report is not being displayed.\n\n## NUnit 3.0.0 Beta 5 - October 16, 2015\n\n### Framework\n\n * Parameterized test cases now support nullable arguments.\n * The NUnit framework may now be built for the .NET Core framework. Note that this is only available through building the source code. A binary will be available in the next release.\n\n### Engine\n\n * The engine now runs multiple test assemblies in parallel by default\n * The output XML now includes more information about the test run, including the text of the command used, any engine settings and the filter used to select tests.\n * Extensions may now specify data in an identifying attribute, for use by the engine in deciding whether to load that extension.\n\n\n### Console Runner\n\n * The console now displays all settings used by the engine to run tests as well as the filter used to select tests.\n * The console runner accepts a new option --maxagents. If multiple assemblies are run in separate processes, this value may be used to limit the number that are executed simultaneously in parallel.\n * The console runner no longer accepts the --include and --exclude options. Instead, the new --where option provides a more general way to express which tests will be executed, such as --where \"cat==Fast && Priority==High\". See the docs for details of the syntax.\n * The new --debug option causes NUnit to break in the debugger immediately before tests are run. This simplifies debugging, especially when the test is run in a separate process.\n\n### Issues Resolved\n\n *  41\tCheck for zeroes in Assert messages\n * 254\tFinalize XML format for test results\n * 275\tNUnitEqualityComparer fails to compare `IEquatable<T>` where second object is derived from T\n * 304\tRun test Assemblies in parallel\n * 374\tNew syntax for selecting tests to be run\n * 515\tOSPlatform.IsMacOSX doesn't work\n * 573\tnunit-console hangs on Mac OS X after all tests have run\n * 669\tTeamCity service message should have assembly name as a part of test name.\n * 689\tThe TeamCity service message \"testFinished\" should have an integer value in the \"duration\" attribute\n * 713\tInclude command information in XML\n * 719\tWe have no way to configure tests for several assemblies using NUnit project file and the common installation from msi file\n * 735\tWorkers number in xml report file cannot be found\n * 784\tBuild Portable Framework on Linux\n * 790\tAllow Extensions to provide data through an attribute\n * 794\tMake it easier to debug tests as well as NUnit itself\n * 801\tNUnit calls Dispose multiple times\n * 814\tSupport nullable types with TestCase\n * 818\tPossible error in Merge Pull Request #797\n * 821\tWrapped method results in loss of result information\n * 822\tTest for Debugger in NUnitTestAssemblyRunner probably should not be in CF build\n * 824\tRemove unused System.Reflection using statements\n * 826\tRandomizer uniqueness tests fail randomly!\n * 828\tMerge pull request #827 (issue 826)\n * 830\tAdd ability to report test results synchronously to test runners\n * 837\tEnumerators not disposed when comparing IEnumerables\n * 840\tAdd missing copyright notices\n * 844\tPull Request #835 (Issue #814) does not build in CF\n * 847\tAdd new --process:inprocess and --inprocess options\n * 850\tTest runner fails if test name contains invalid xml characters\n * 851\t'Exclude' console option is not working in NUnit Lite\n * 853\tCannot run NUnit Console from another directory\n * 860\tUse CDATA section for message, stack-trace and output elements of XML\n * 863\tEliminate core engine\n * 865\tIntermittent failures of StopWatchTests\n * 869\tTests that use directory separator char to determine platform misreport Linux on MaxOSX\n * 870\tNUnit Console Runtime Environment misreports on MacOSX\n * 874\tAdd .NET Core Framework\n * 878\tCannot exclude MacOSX or XBox platforms when running on CF\n * 892\tFixed test runner returning early when executing more than one test run.\n * 894\tGive nunit.engine and nunit.engine.api assemblies strong names\n * 896\tNUnit 3.0 console runner not placing test result xml in --work directory\n\n## NUnit 3.0.0 Beta 4 - August 25, 2015\n\n### Framework\n\n * A new RetryAttribute allows retrying of failing tests.\n * New SupersetConstraint and Is.SupersetOf syntax complement SubsetConstraint.\n * Tests skipped due to ExplicitAttribute are now reported as skipped.\n\n### Engine\n\n * We now use Cecil to examine assemblies prior to loading them.\n * Extensions are no longer based on Mono.Addins but use our own extension framework.\n\n### Issues Resolved\n\n * 125 3rd-party dependencies should be downloaded on demand\n * 283 What should we do when a user extension does something bad?\n * 585 RetryAttribute\n * 642 Restructure MSBuild script\n * 649 Change how we zip packages\n * 654 ReflectionOnlyLoad and ReflectionOnlyLoadFrom\n * 664 Invalid \"id\" attribute in the report for case \"test started\"\n * 685 In the some cases when tests cannot be started NUnit returns exit code \"0\"\n * 728 Missing Assert.That overload\n * 741 Explicit Tests get run when using --exclude\n * 746 Framework should send events for all tests\n * 747 NUnit should apply attributes even if test is non-runnable\n * 749 Review Use of Mono.Addins for Engine Extensibility\n * 750 Include Explicit Tests in Test Results\n * 753 Feature request: Is.SupersetOf() assertion constraint\n * 755 TimeOut attribute doesn't work with TestCaseSource Attribute\n * 757 Implement some way to wait for execution to complete in ITestEngineRunner\n * 760 Packaging targets do not run on Linux\n * 766 Added overloads for True()/False() accepting booleans\n * 778 Build and build.cmd scripts invoke nuget.exe improperly\n * 780 Teamcity fix\n * 782 No sources for 2.6.4\n\n## NUnit 3.0.0 Beta 3 - July 15, 2015\n\n### Framework\n\n * The RangeAttribute has been extended to support more data types including\n   uint, long and ulong\n * Added platform support for Windows 10 and fixed issues with Windows 8 and\n   8.1 support\n * Added async support to the portable version of NUnit Framework\n * The named members of the TestCaseSource and ValueSource attributes must now be\n   static.\n * RandomAttribute has been extended to add support for new data types including\n   uint, long, ulong, short, ushort, float, byte and sbyte\n * TestContext.Random has also been extended to add support for new data types including\n   uint, long, ulong, short, ushort, float, byte, sbyte and decimal\n * Removed the dependency on Microsoft.Bcl.Async from the NUnit Framework assembly\n   targeting .NET 4.0. If you want to write async tests in .NET 4.0, you will need\n   to reference the NuGet package yourself.\n * Added a new TestFixtureSource attribute which is the equivalent to TestCaseSource\n   but provides for instantiation of fixtures.\n * Significant improvements have been made in how NUnit deduces the type arguments of\n   generic methods based on the arguments provided.\n\n### Engine\n\n * If the target framework is not specified, test assemblies that are compiled\n   to target .NET 4.5 will no longer run in .NET 4.0 compatibility mode\n\n### Console\n\n * If the console is run without arguments, it will now display help\n\n### Issues Resolved\n\n *  47 Extensions to RangeAttribute\n * 237 System.Uri .ctor works not properly under Nunit\n * 244 NUnit should properly distinguish between .NET 4.0 and 4.5\n * 310 Target framework not specified on the AppDomain when running against .Net 4.5\n * 321 Rationalize how we count tests\n * 472 Overflow exception and DivideByZero exception from the RangeAttribute\n * 524 int and char do not compare correctly?\n * 539 Truncation of string arguments\n * 544 AsyncTestMethodTests for 4.5 Framework fails frequently on Travis CI\n * 656 Unused parameter in Console.WriteLine found\n * 670 Failing Tests in TeamCity Build\n * 673 Ensure proper disposal of engine objects\n * 674 Engine does not release test assemblies\n * 679 Windows 10 Support\n * 682 Add Async Support to Portable Framework\n * 683 Make FrameworkController available in portable build\n * 687 TestAgency does not launch agent process correctly if runtime type is not specified (i.e. v4.0)\n * 692 PlatformAttribute_OperatingSystemBitNess fails when running in 32-bit process\n * 693 Generic `Test<T>` Method cannot determine type arguments for fixture when passed as `IEnumerable<T>`\n * 698 Require TestCaseSource and ValueSource named members to be static\n * 703 TeamCity non-equal flowid for 'testStarted' and 'testFinished' messages\n * 712 Extensions to RandomAttribute\n * 715 Provide a data source attribute at TestFixture Level\n * 718 RangeConstraint gives error with from and two args of differing types\n * 723 Does nunit.nuspec require dependency on Microsoft.Bcl.Async?\n * 724 Adds support for `Nullable<bool>` to Assert.IsTrue and Assert.IsFalse\n * 734 Console without parameters doesn't show help\n\n## NUnit 3.0.0 Beta 2 - May 12, 2015\n\n### Framework\n\n * The Compact Framework version of the framework is now packaged separately\n   and will be distributed as a ZIP file and as a NuGet package.\n * The NUnit 2.x RepeatAttribute was added back into the framework.\n * Added Throws.ArgumentNullException\n * Added GetString methods to NUnit.Framework.Internal.RandomGenerator to\n   create repeatable random strings for testing\n * When checking the equality of DateTimeOffset, you can now use the\n   WithSameOffset modifier\n * Some classes intended for internal usage that were public for testing\n   have now been made internal. Additional classes will be made internal\n   for the final 3.0 release.\n\n### Engine\n\n * Added a core engine which is a non-extensible, minimal engine for use by\n   devices and similar situations where reduced functionality is compensated\n   for by reduced size and simplicity of usage.\n\n### Issues Resolved\n\n *  22  Add OSArchitecture Attribute to Environment node in result xml\n *  24  Assert on Dictionary Content\n *  48  Explicit seems to conflict with Ignore\n * 168  Create NUnit 3.0 documentation\n * 196  Compare DateTimeOffsets including the offset in the comparison\n * 217  New icon for the 3.0 release\n * 316  NUnitLite TextUI Runner\n * 320\tNo Tests found: Using parametrized Fixture and TestCaseSource\n * 360  Better exception message when using non-BCL class in property\n * 454  Rare registry configurations may cause NUnit to fail\n * 478  RepeatAttribute\n * 481  Testing multiple assemblies in nunitlite\n * 538  Potential bug using TestContext in constructors\n * 546  Enable Parallel in NUnitLite/CF (or more) builds\n * 551  TextRunner not passing the NumWorkers option to the ITestAssemblyRunner\n * 556  Executed tests should always return a non-zero duration\n * 559  Fix text of NuGet packages\n * 560  Fix PackageVersion property on wix install projects\n * 562  Program.cs in NUnitLite NuGet package is incorrect\n * 564  NUnitLite Nuget package is Beta 1a, Framework is Beta 1\n * 565  NUnitLite Nuget package adds Program.cs to a VB Project\n * 568  Isolate packaging from building\n * 570  ThrowsConstraint failure message should include stack trace of actual exception\n * 576  Throws.ArgumentNullException would be nice\n * 577  Documentation on some members of Throws falsely claims that they return `TargetInvocationException` constraints\n * 579  No documentation for recommended usage of TestCaseSourceAttribute\n * 580  TeamCity Service Message Uses Incorrect Test Name with NUnit2Driver\n * 582  Test Ids Are Not Unique\n * 583  TeamCity service messages to support parallel test execution\n * 584  Non-runnable assembly has incorrect ResultState\n * 609  Add support for integration with TeamCity\n * 611  Remove unused --teamcity option from CF build of NUnitLite\n * 612  MaxTime doesn't work when used for TestCase\n * 621  Core Engine\n * 622  nunit-console fails when use --output\n * 628  Modify IService interface and simplify ServiceContext\n * 631  Separate packaging for the compact framework\n * 646  ConfigurationManager.AppSettings Params Return Null under Beta 1\n * 648  Passing 2 or more test assemblies targeting > .NET 2.0 to nunit-console fails\n\n## NUnit 3.0.0 Beta 1 - March 25, 2015\n\n### General\n\n * There is now a master windows installer for the framework, engine and console runner.\n\n### Framework\n\n * We no longer create a separate framework build for .NET 3.5. The 2.0 and\n   3.5 builds were essentially the same, so the former should now be used\n   under both runtimes.\n * A new Constraint, DictionaryContainsKeyConstraint, may be used to test\n   that a specified key is present in a dictionary.\n * LevelOfParallelizationAttribute has been renamed to LevelOfParallelismAttribute.\n * The Silverlight runner now displays output in color and includes any\n   text output created by the tests.\n * The class and method names of each test are included in the output xml\n   where applicable.\n * String arguments used in test case names are now truncated to 40 rather\n   than 20 characters.\n\n### Engine\n\n * The engine API has now been finalized. It permits specifying a minimum\n   version of the engine that a runner is able to use. The best installed\n   version of the engine will be loaded. Third-party runners may override\n   the selection process by including a copy of the engine in their\n   installation directory and specifying that it must be used.\n * The V2 framework driver now uses the event listener and test listener\n   passed to it by the runner. This corrects several outstanding issues\n   caused by events not being received and allows selecting V2 tests to\n   be run from the command-line, in the same way that V3 tests are selected.\n\n### Console\n\n * The console now defaults to not using shadowcopy. There is a new option --shadowcopy to turn it on if needed.\n\n### Issues Resolved\n\n * 224\tSilverlight Support\n * 318\tTestActionAttribute: Retrieving the TestFixture\n * 428\tAdd ExpectedExceptionAttribute to C# samples\n * 440\tAutomatic selection of Test Engine to use\n * 450\tCreate master install that includes the framework, engine and console installs\n * 477\tAssert does not work with ArraySegment\n * 482\tnunit-console has multiple errors related to -framework option\n * 483\tAdds constraint for asserting that a dictionary contains a particular key\n * 484\tMissing file in NUnit.Console nuget package\n * 485\tCan't run v2 tests with nunit-console 3.0\n * 487\tNUnitLite can't load assemblies by their file name\n * 488\tAsync setup and teardown still don't work\n * 497\tFramework installer shold register the portable framework\n * 504\tOption --workers:0 is ignored\n * 508\tTravis builds with failure in engine tests show as successful\n * 509\tUnder linux, not all mono profiles are listed as available\n * 512\tDrop the .NET 3.5 build\n * 517\tV2 FrameworkDriver does not make use of passed in TestEventListener\n * 523\tProvide an option to disable shadowcopy in NUnit v3\n * 528\tV2 FrameworkDriver does not make use of passed in TestFilter\n * 530\tColor display for Silverlight runner\n * 531\tDisplay text output from tests in Silverlight runner\n * 534\tAdd classname and methodname to test result xml\n * 541\tConsole help doesn't indicate defaults\n\n## NUnit 3.0.0 Alpha 5 - January 30, 2015\n\n### General\n\n * A Windows installer is now included in the release packages.\n\n### Framework\n\n * TestCaseAttribute now allows arguments with default values to be omitted. Additionaly, it accepts a Platform property to specify the platforms on which the test case should be run.\n * TestFixture and TestCase attributes now enforce the requirement that a reason needs to be provided when ignoring a test.\n * SetUp, TearDown, OneTimeSetUp and OneTimeTearDown methods may now be async.\n * String arguments over 20 characters in length are truncated when used as part of a test name.\n\n### Engine\n\n * The engine is now extensible using Mono.Addins. In this release, extension points are provided for FrameworkDrivers, ProjectLoaders and OutputWriters. The following addins are bundled as a part of NUnit:\n   * A FrameworkDriver that allows running NUnit V2 tests under NUnit 3.0.\n   * ProjectLoaders for NUnit and Visual Studio projects.\n   * An OutputWriter that creates XML output in NUnit V2 format.\n * DomainUsage now defaults to Multiple if not specified by the runner\n\n### Console\n\n * New options supported:\n   * testlist provides a list of tests to run in a file\n   * stoponerror indicates that the run should terminate when any test fails.\n\n### Issues Resolved\n\n * 20 TestCaseAttribute needs Platform property.\n * 60 NUnit should support async setup, teardown, fixture setup and fixture teardown.\n * 257  TestCaseAttribute should not require parameters with default values to be specified.\n * 266  Pluggable framework drivers.\n * 368  Create addin model.\n * 369  Project loader addins\n * 370  OutputWriter addins\n * 403  Move ConsoleOptions.cs and Options.cs to Common and share...\n * 419  Create Windows Installer for NUnit.\n * 427  [TestFixture(Ignore=true)] should not be allowed.\n * 437  Errors in tests under Linux due to hard-coded paths.\n * 441  NUnit-Console should support --testlist option\n * 442  Add --stoponerror option back to nunit-console.\n * 456  Fix memory leak in RuntimeFramework.\n * 459  Remove the Mixed Platforms build configuration.\n * 468  Change default domain usage to multiple.\n * 469  Truncate string arguments in test names in order to limit the length.\n\n## NUnit 3.0.0 Alpha 4 - December 30, 2014\n\n### Framework\n\n * ApartmentAttribute has been added, replacing STAAttribute and MTAAttribute.\n * Unnecessary overloads of Assert.That and Assume.That have been removed.\n * Multiple SetUpFixtures may be specified in a single namespace.\n * Improvements to the Pairwise strategy test case generation algorithm.\n * The new NUnitLite runner --testlist option, allows a list of tests to be kept in a file.\n\n### Engine\n\n * A driver is now included, which allows running NUnit 2.x tests under NUnit 3.0.\n * The engine can now load and run tests specified in a number of project formats:\n   * NUnit (.nunit)\n   * Visual Studio C# projects (.csproj)\n   * Visual Studio F# projects (.vjsproj)\n   * Visual Studio Visual Basic projects (.vbproj)\n   * Visual Studio solutions (.sln)\n   * Legacy C++ and Visual JScript projects (.csproj and .vjsproj) are also supported\n   * Support for the current C++ format (.csxproj) is not yet available\n * Creation of output files like TestResult.xml in various formats is now a\n   service of the engine, available to any runner.\n\n### Console\n\n * The command-line may now include any number of assemblies and/or supported projects.\n\n### Issues Resolved\n\n * 37\tMultiple SetUpFixtures should be permitted on same namespace\n * 210\tTestContext.WriteLine in an AppDomain causes an error\n * 227\tAdd support for VS projects and solutions\n * 231\tUpdate C# samples to use NUnit 3.0\n * 233\tUpdate F# samples to use NUnit 3.0\n * 234\tUpdate C++ samples to use NUnit 3.0\n * 265\tReorganize console reports for nunit-console and nunitlite\n * 299\tNo full path to assembly in XML file under Compact Framework\n * 301\tCommand-line length\n * 363\tMake Xml result output an engine service\n * 377\tCombiningStrategyAttributes don't work correctly on generic methods\n * 388\tImprovements to NUnitLite runner output\n * 390\tSpecify exactly what happens when a test times out\n * 396\tApartmentAttribute\n * 397\tCF nunitlite runner assembly has the wrong name\n * 407\tAssert.Pass() with ]]> in message crashes console runner\n * 414\tSimplify Assert overloads\n * 416\tNUnit 2.x Framework Driver\n * 417\tComplete work on NUnit projects\n * 420\tCreate Settings file in proper location\n\n## NUnit 3.0.0 Alpha 3 - November 29, 2014\n\n### Breaking Changes\n\n * NUnitLite tests must reference both the nunit.framework and nunitlite assemblies.\n\n### Framework\n\n * The NUnit and NUnitLite frameworks have now been merged. There is no longer any distinction\n   between them in terms of features, although some features are not available on all platforms.\n * The release includes two new framework builds: compact framework 3.5 and portable. The portable\n   library is compatible with .NET 4.5, Silverlight 5.0, Windows 8, Windows Phone 8.1,\n   Windows Phone Silverlight 8, Mono for Android and MonoTouch.\n * A number of previously unsupported features are available for the Compact Framework:\n    - Generic methods as tests\n    - RegexConstraint\n    - TimeoutAttribute\n    - FileAssert, DirectoryAssert and file-related constraints\n\n### Engine\n\n * The logic of runtime selection has now changed so that each assembly runs by default\n   in a separate process using the runtime for which it was built.\n * On 64-bit systems, each test process is automatically created as 32-bit or 64-bit,\n   depending on the platform specified for the test assembly.\n\n### Console\n\n * The console runner now runs tests in a separate process per assembly by default. They may\n   still be run in process or in a single separate process by use of command-line options.\n * The console runner now starts in the highest version of the .NET runtime available, making\n   it simpler to debug tests by specifying that they should run in-process on the command-line.\n * The -x86 command-line option is provided to force execution in a 32-bit process on a 64-bit system.\n * A writeability check is performed for each output result file before trying to run the tests.\n * The -teamcity option is now supported.\n\n### Issues Resolved\n\n * 12   Compact framework should support generic methods\n * 145  NUnit-console fails if test result message contains invalid xml characters\n * 155  Create utility classes for platform-specific code\n * 223  Common code for NUnitLite console runner and NUnit-Console\n * 225  Compact Framework Support\n * 238  Improvements to running 32 bit tests on a 64 bit system\n * 261  Add portable nunitlite build\n * 284  NUnitLite Unification\n * 293  CF does not have a CurrentDirectory\n * 306  Assure NUnit can write resultfile\n * 308  Early disposal of runners\n * 309  NUnit-Console should support incremental output under TeamCity\n * 325  Add RegexConstraint to compact framework build\n * 326  Add TimeoutAttribute to compact framework build\n * 327  Allow generic test methods in the compact framework\n * 328  Use .NET Stopwatch class for compact framework builds\n * 331  Alpha 2 CF does not build\n * 333  Add parallel execution to desktop builds of NUnitLite\n * 334  Include File-related constraints and syntax in NUnitLite builds\n * 335  Re-introduce 'Classic' NUnit syntax in NUnitLite\n * 336  Document use of separate obj directories per build in our projects\n * 337  Update Standard Defines page for .NET 3.0\n * 341  Move the NUnitLite runners to separate assemblies\n * 367  Refactor XML Escaping Tests\n * 372  CF Build TestAssemblyRunnerTests\n * 373  Minor CF Test Fixes\n * 378  Correct documentation for PairwiseAttribute\n * 386  Console Output Improvements\n\n## NUnit 3.0.0 Alpha 2 - November 2, 2014\n\n### Breaking Changes\n\n * The console runner no longer displays test results in the debugger.\n * The NUnitLite compact framework 2.0 build has been removed.\n * All addin support has been removed from the framework. Documentation of NUnit 3.0 extensibility features will be published in time for the beta release. In the interim, please ask for support on the nunit-discuss list.\n\n### General\n\n * A separate solution has been created for Linux\n * We now have continuous integration builds under both Travis and Appveyor\n * The compact framework 3.5 build is now working and will be supported in future releases.\n\n### New Features\n\n * The console runner now automatically detects 32- versus 64-bit test assemblies.\n * The NUnitLite report output has been standardized to match that of nunit-console.\n * The NUnitLite command-line has been standardized to match that of nunit-console where they share the same options.\n * Both nunit-console and NUnitLite now display output in color.\n * ActionAttributes now allow specification of multiple targets on the attribute as designed. This didn't work in the first alpha.\n * OneTimeSetUp and OneTimeTearDown failures are now shown on the test report. Individual test failures after OneTimeSetUp failure are no longer shown.\n * The console runner refuses to run tests build with older versions of NUnit. A plugin will be available to run older tests in the future.\n\n### Issues Resolved\n\n * 222\tColor console for NUnitLite\n * 229\tTiming failures in tests\n * 241\tRemove reference to Microslft BCL packages\n * 243\tCreate solution for Linux\n * 245\tMultiple targets on action attributes not implemented\n * 246\tC++ tests do not compile in VS2013\n * 247\tEliminate trace display when running tests in debug\n * 255\tAdd new result states for more precision in where failures occur\n * 256\tContainsConstraint break when used with AndConstraint\n * 264\tStacktrace displays too many entries\n * 269\tAdd manifest to nunit-console and nunit-agent\n * 270\tOneTimeSetUp failure results in too much output\n * 271\tInvalid tests should be treated as errors\n * 274\tCommand line options should be case insensitive\n * 276\tNUnit-console should not reference nunit.framework\n * 278\tNew result states (ChildFailure and SetupFailure) break NUnit2XmlOutputWriter\n * 282\tGet tests for NUnit2XmlOutputWriter working\n * 288\tSet up Appveyor CI build\n * 290\tStack trace still displays too many items\n * 315\tNUnit 3.0 alpha: Cannot run in console on my assembly\n * 319\tCI builds are not treating test failures as failures of the build\n * 322\tRemove Stopwatch tests where they test the real .NET Stopwatch\n\n## NUnit 3.0.0 Alpha 1 - September 22, 2014\n\n### Breaking Changes\n\n * Legacy suites are no longer supported\n * Assert.NullOrEmpty is no longer supported (Use Is.Null.Or.Empty)\n\n### General\n\n * MsBuild is now used for the build rather than NAnt\n * The framework test harness has been removed now that nunit-console is at a point where it can run the tests.\n\n### New Features\n\n * Action Attributes have been added with the same features as in NUnit 2.6.3.\n * TestContext now has a method that allows writing to the XML output.\n * TestContext.CurrentContext.Result now provides the error message and stack trace during teardown.\n * Does prefix operator supplies several added constraints.\n\n### Issues Resolved\n\n * 6\tLog4net not working with NUnit\n * 13\tStandardize commandline options for nunitlite runner\n * 17\tNo allowance is currently made for nullable arguents in TestCase parameter conversions\n * 33\tTestCaseSource cannot refer to a parameterized test fixture\n * 54\tStore message and stack trace in TestContext for use in TearDown\n * 111\tImplement Changes to File, Directory and Path Assertions\n * 112\tImplement Action Attributes\n * 156\tAccessing multiple AppDomains within unit tests result in SerializationException\n * 163\tAdd --trace option to NUnitLite\n * 167\tCreate interim documentation for the alpha release\n * 169\tDesign and implement distribution of NUnit packages\n * 171\tAssert.That should work with any lambda returning bool\n * 175\tTest Harness should return an error if any tests fail\n * 180\tErrors in Linux CI build\n * 181\tReplace NAnt with MsBuild / XBuild\n * 183\tStandardize commandline options for test harness\n * 188\tNo output from NUnitLite when selected test is not found\n * 189\tAdd string operators to Does prefix\n * 193\tTestWorkerTests.BusyExecutedIdleEventsCalledInSequence fails occasionally\n * 197\tDeprecate or remove Assert.NullOrEmpty\n * 202\tEliminate legacy suites\n * 203\tCombine framework, engine and console runner in a single solution and repository\n * 209\tMake Ignore attribute's reason mandatory\n * 215\tRunning 32-bit tests on a 64-bit OS\n * 219\tTeardown failures are not reported\n\n### Console Issues Resolved (Old nunit-console project, now combined with nunit)\n\n * 2\tFailure in TestFixtureSetUp is not reported correctly\n * 5\tCI Server for nunit-console\n * 6\tSystem.NullReferenceException on start nunit-console-x86\n * 21\tNUnitFrameworkDriverTests fail if not run from same directory\n * 24\t'Debug' value for /trace option is deprecated in 2.6.3\n * 38\tConfusing Excluded categories output\n\n## NUnit 2.9.7 - August 8, 2014\n\n### Breaking Changes\n\n * NUnit no longer supports void async test methods. You should use a Task return Type instead.\n * The ExpectedExceptionAttribute is no longer supported. Use Assert.Throws() or Assert.That(..., Throws) instead for a more precise specification of where the exception is expected to be thrown.\n\n### New Features\n\n * Parallel test execution is supported down to the Fixture level. Use ParallelizableAttribute to indicate types that may be run in parallel.\n * Async tests are supported for .NET 4.0 if the user has installed support for them.\n * A new FileExistsConstraint has been added along with FileAssert.Exists and FileAssert.DoesNotExist\n * ExpectedResult is now supported on simple (non-TestCase) tests.\n * The Ignore attribute now takes a named parameter Until, which allows specifying a date after which the test is no longer ignored.\n * The following new values are now recognized by PlatformAttribute: Win7, Win8, Win8.1, Win2012Server, Win2012ServerR2, NT6.1, NT6.2, 32-bit, 64-bit\n * TimeoutAttribute is now supported under Silverlight\n * ValuesAttribute may be used without any values on an enum or boolean argument. All possible values are used.\n * You may now specify a tolerance using Within when testing equality of DateTimeOffset values.\n * The XML output now includes a start and end time for each test.\n\n### Issues Resolved\n\n * 8\t[SetUpFixture] is not working as expected\n * 14\tCI Server for NUnit Framework\n * 21\tIs.InRange Constraint Ambiguity\n * 27\tValues attribute support for enum types\n * 29\tSpecifying a tolerance with \"Within\" doesn't work for DateTimeOffset data types\n * 31\tReport start and end time of test execution\n * 36\tMake RequiresThread, RequiresSTA, RequiresMTA inheritable\n * 45\tNeed of Enddate together with Ignore\n * 55\tIncorrect XML comments for CollectionAssert.IsSubsetOf\n * 62\tMatches(Constraint) does not work as expected\n * 63\tAsync support should handle Task return type without state machine\n * 64\tAsyncStateMachineAttribute should only be checked by name\n * 65\tUpdate NUnit Wiki to show the new location of samples\n * 66\tParallel Test Execution within test assemblies\n * 67\tAllow Expected Result on simple tests\n * 70\tEquivalentTo isn't compatible with IgnoreCase for dictioneries\n * 75\tAsync tests should be supported for projects that target .NET 4.0\n * 82\tnunit-framework tests are timing out on Linux\n * 83\tPath-related tests fail on Linux\n * 85\tCulture-dependent NUnit tests fail on non-English machine\n * 88\tTestCaseSourceAttribute documentation\n * 90\tEquivalentTo isn't compatible with IgnoreCase for char\n * 100\tChanges to Tolerance definitions\n * 110\tAdd new platforms to PlatformAttribute\n * 113\tRemove ExpectedException\n * 118\tWorkarounds for missing InternalPreserveStackTrace in mono\n * 121\tTest harness does not honor the --worker option when set to zero\n * 129\tStandardize Timeout in the Silverlight build\n * 130\tAdd FileAssert.Exists and FileAssert.DoesNotExist\n * 132\tDrop support for void async methods\n * 153\tSurprising behavior of DelayedConstraint pollingInterval\n * 161\tUpdate API to support stopping an ongoing test run\n\nNOTE: Bug Fixes below this point refer to the number of the bug in Launchpad.\n\n## NUnit 2.9.6 - October 4, 2013\n\n### Main Features\n\n * Separate projects for nunit-console and nunit.engine\n * New builds for .NET 4.5 and Silverlight\n * TestContext is now supported\n * External API is now stable; internal interfaces are separate from API\n * Tests may be run in parallel on separate threads\n * Solutions and projects now use VS2012 (except for Compact framework)\n\n### Bug Fixes\n\n * 463470 \tWe should encapsulate references to pre-2.0 collections\n * 498690 \tAssert.That() doesn't like properties with scoped setters\n * 501784 \tTheory tests do not work correctly when using null parameters\n * 531873 \tFeature: Extraction of unit tests from NUnit test assembly and calling appropriate one\n * 611325 \tAllow Teardown to detect if last test failed\n * 611938 \tGeneric Test Instances disappear\n * 655882 \tMake CategoryAttribute inherited\n * 664081 \tAdd Server2008 R2 and Windows 7 to PlatformAttribute\n * 671432 \tUpgrade NAnt to Latest Release\n * 676560 \tAssert.AreEqual does not support `IEquatable<T>`\n * 691129 \tAdd Category parameter to TestFixture\n * 697069 \tFeature request: dynamic location for TestResult.xml\n * 708173 \tNUnit's logic for comparing arrays - use `Comparer<T[]>` if it is provided\n * 709062 \t\"System.ArgumentException : Cannot compare\" when the element is a list\n * 712156 \tTests cannot use AppDomain.SetPrincipalPolicy\n * 719184 \tPlatformdependency in src/ClientUtilities/util/Services/DomainManager.cs:40\n * 719187 \tUsing Path.GetTempPath() causes conflicts in shared temporary folders\n * 735851 \tAdd detection of 3.0, 3.5 and 4.0 frameworks to PlatformAttribute\n * 736062 \tDeadlock when EventListener performs a Trace call + EventPump synchronisation\n * 756843 \tFailing assertion does not show non-linear tolerance mode\n * 766749 \tnet-2.0\\nunit-console-x86.exe.config should have a `<startup/>` element and also enable loadFromRemoteSources\n * 770471 \tAssert.IsEmpty does not support IEnumerable\n * 785460 \tAdd Category parameter to TestCaseSourceAttribute\n * 787106 \tEqualConstraint provides inadequate failure information for IEnumerables\n * 792466 \tTestContext MethodName\n * 794115 \tHashSet incorrectly reported\n * 800089 \tAssert.Throws() hides details of inner AssertionException\n * 848713 \tFeature request: Add switch for console to break on any test case error\n * 878376 \tAdd 'Exactly(n)' to the NUnit constraint syntax\n * 882137 \tWhen no tests are run, higher level suites display as Inconclusive\n * 882517 \tNUnit 2.5.10 doesn't recognize TestFixture if there are only TestCaseSource inside\n * 885173 \tTests are still executed after cancellation by user\n * 885277 \tException when project calls for a runtime using only 2 digits\n * 885604 \tFeature request: Explicit named parameter to TestCaseAttribute\n * 890129 \tDelayedConstraint doesn't appear to poll properties of objects\n * 892844 \tNot using Mono 4.0 profile under Windows\n * 893919 \tDelayedConstraint fails polling properties on references which are initially null\n * 896973 \tConsole output lines are run together under Linux\n * 897289 \tIs.Empty constraint has unclear failure message\n * 898192 \tFeature Request: Is.Negative, Is.Positive\n * 898256 \t`IEnumerable<T>` for Datapoints doesn't work\n * 899178 \tWrong failure message for parameterized tests that expect exceptions\n * 904841 \tAfter exiting for timeout the teardown method is not executed\n * 908829 \tTestCase attribute does not play well with variadic test functions\n * 910218 \tNUnit should add a trailing separator to the ApplicationBase\n * 920472 \tCollectionAssert.IsNotEmpty must dispose Enumerator\n * 922455 \tAdd Support for Windows 8 and Windows 2012 Server to PlatformAttribute\n * 928246 \tUse assembly.Location instead of assembly.CodeBase\n * 958766 \tFor development work under TeamCity, we need to support nunit2 formatted output under direct-runner\n * 1000181 \tParameterized TestFixture with System.Type as constructor arguments fails\n * 1000213 \tInconclusive message Not in report output\n * 1023084 \tAdd Enum support to RandomAttribute\n * 1028188 \tAdd Support for Silverlight\n * 1029785 \tTest loaded from remote folder failed to run with exception System.IODirectory\n * 1037144 \tAdd MonoTouch support to PlatformAttribute\n * 1041365 \tAdd MaxOsX and Xbox support to platform attribute\n * 1057981 \tC#5 async tests are not supported\n * 1060631 \tAdd .NET 4.5 build\n * 1064014 \tSimple async tests should not return `Task<T>`\n * 1071164 \tSupport async methods in usage scenarios of Throws constraints\n * 1071343 \tRunner.Load fails on CF if the test assembly contains a generic method\n * 1071861 \tError in Path Constraints\n * 1072379 \tReport test execution time at a higher resolution\n * 1074568 \tAssert/Assume should support an async method for the ActualValueDelegate\n * 1082330 \tBetter Exception if SetCulture attribute is applied multiple times\n * 1111834 \tExpose Random Object as part of the test context\n * 1111838 \tInclude Random Seed in Test Report\n * 1172979 \tAdd Category Support to nunitlite Runner\n * 1203361 \tRandomizer uniqueness tests sometimes fail\n * 1221712 \tWhen non-existing test method is specified in -test, result is still \"Tests run: 1, Passed: 1\"\n * 1223294 \tSystem.NullReferenceException thrown when ExpectedExceptionAttribute is used in a static class\n * 1225542 \tStandardize commandline options for test harness\n\n### Bug Fixes in 2.9.6 But Not Listed Here in the Release\n\n * 541699\tSilverlight Support\n * 1222148\t/framework switch does not recognize net-4.5\n * 1228979\tTheories with all test cases inconclusive are not reported as failures\n\n\n## NUnit 2.9.5 - July 30, 2010\n\n### Bug Fixes\n\n * 483836 \tAllow non-public test fixtures consistently\n * 487878 \tTests in generic class without proper TestFixture attribute should be invalid\n * 498656 \tTestCase should show array values in GUI\n * 513989 \tIs.Empty should work for directories\n * 519912 \tThread.CurrentPrincipal Set In TestFixtureSetUp Not Maintained Between Tests\n * 532488 \tconstraints from ConstraintExpression/ConstraintBuilder are not reusable\n * 590717 \tcategorie contains dash or trail spaces is not selectable\n * 590970 \tstatic TestFixtureSetUp/TestFixtureTearDown methods in base classes are not run\n * 595683 \tNUnit console runner fails to load assemblies\n * 600627 \tAssertion message formatted poorly by PropertyConstraint\n * 601108 \tDuplicate test using abstract test fixtures\n * 601645 \tParametered test should try to convert data type from source to parameter\n * 605432 \tToString not working properly for some properties\n * 606548 \tDeprecate Directory Assert in 2.5 and remove it in 3.0\n * 608875 \tNUnit Equality Comparer incorrectly defines equality for Dictionary objects\n\n## NUnit 2.9.4 - May 4, 2010\n\n### Bug Fixes\n\n * 419411 \tFixture With No Tests Shows as Non-Runnable\n * 459219 \tChanges to thread princpal cause failures under .NET 4.0\n * 459224 \tCulture test failure under .NET 4.0\n * 462019 \tLine endings needs to be better controlled in source\n * 462418 \tAssume.That() fails if I specify a message\n * 483845 \tTestCase expected return value cannot be null\n * 488002 \tShould not report tests in abstract class as invalid\n * 490679 \tCategory in TestCaseData clashes with Category on ParameterizedMethodSuite\n * 501352 \tVS2010 projects have not been updated for new directory structure\n * 504018 \tAutomatic Values For Theory Test Parameters Not Provided For bool And enum\n * 505899 \t'Description' parameter in both TestAttribute and TestCaseAttribute is not allowed\n * 523335 \tTestFixtureTearDown in static class not executed\n * 556971 \tDatapoint(s)Attribute should work on `IEnumerable<T>` as well as on Arrays\n * 561436 \tSetCulture broken with 2.5.4\n * 563532 \tDatapointsAttribute should be allowed on properties and methods\n\n## NUnit 2.9.3 - October 26, 2009\n\n### Main Features\n\n * Created new API for controlling framework\n * New builds for .Net 3.5 and 4.0, compact framework 3.5\n * Support for old style tests has been removed\n * New adhoc runner for testing the framework\n\n### Bug Fixes\n\n * 432805 \tSome Framework Tests don't run on Linux\n * 440109 \tFull Framework does not support \"Contains\"\n\n## NUnit 2.9.2 - September 19, 2009\n\n### Main Features\n\n * NUnitLite code is now merged with NUnit\n * Added NUnitLite runner to the framework code\n * Added Compact framework builds\n\n### Bug Fixes\n\n * 430100 \t`Assert.Catch<T>` should return T\n * 432566 \tNUnitLite shows empty string as argument\n * 432573 \tMono test should be at runtime\n\n## NUnit 2.9.1 - August 27, 2009\n\n### General\n\n * Created a separate project for the framework and framework tests\n * Changed license to MIT / X11\n * Created Windows installer for the framework\n\n### Bug Fixes\n\n * 400502 \tNUnitEqualityComparer.StreamsE­qual fails for same stream\n * 400508 \tTestCaseSource attirbute is not working when Type is given\n * 400510 \tTestCaseData variable length ctor drops values\n * 417557 \tAdd SetUICultureAttribute from NUnit 2.5.2\n * 417559 \tAdd Ignore to TestFixture, TestCase and TestCaseData\n * 417560 \tMerge Assert.Throws and Assert.Catch changes from NUnit 2.5.2\n * 417564 \tTimeoutAttribute on Assembly\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.251953125,
          "content": "# Code of Conduct\n\nThis project has adopted the code of conduct defined by the Contributor Covenant\nto clarify expected behavior in our community.\nFor more information, see the [.NET Foundation Code of Conduct](https://dotnetfoundation.org/code-of-conduct).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.95703125,
          "content": "# How to contribute\n\nSo you're thinking about contributing to NUnit? Great! Maintaining and enhancing NUnit is a big job, so **the community's help is really appreciated.**\n\nHelping out isn't just writing code, it also includes submitting issues, helping confirm issues, working on the website, helping people in [nunit slack](https://nunit.slack.com) and improving the documentation. \n\n## Submitting Issues\n\nRequests for new features and bug reports keep the project moving forward.\n\n### Before you submit an issue\n\n- Ensure you are running the [latest version](https://github.com/nunit/nunit/releases) of NUnit.\n- **Many 3rd party test runners do not support NUnit 3/4 yet.** They may appear to run NUnit tests, but they do not do so correctly.\n- To ensure that the bug is in NUnit and not in the runner you are using, **test your bug using `dotnet test`, `nunit3-console` or `nunitlite`** first.\n- **Search** the [issue list](https://github.com/nunit/nunit/issues?utf8=%E2%9C%93&q=is%3Aissue) (including closed issues) to make sure it hasn't already been reported.\n\n### Submitting a good issue\n\n- Give the issue a short, clear title that describes the bug or feature request\n- Include what version of NUnit you are using, which runner you are using\n- Tell us how you are running your tests including command line arguments or `runsettings`\n- Include steps to reproduce the issue\n- Include a short code example that reproduces the issue\n- Use [markdown formatting](https://guides.github.com/features/mastering-markdown/) as appropriate to make the issue and code more readable.\n\n## Confirming Issues\n\nBefore we work on issues, we must confirm them and be able to reproduce them. Confirming issues takes up a great deal of the team's time, so making that job easier is **really appreciated**.\n\nIssues that need confirmation will have the **confirm** label or be unlabeled and have **no milestone**. You can help us to confirm issues by;\n\n- Add steps to reproduce the issue\n- Create unit tests to demonstrate the issue\n- Test issues and provide feedback\n\nIf you’re getting ready to report a bug in NUnit, figuring out how to create a minimal repro is easier if you temporarily disable the debugger’s [Just My Code](https://docs.microsoft.com/en-us/visualstudio/debugger/just-my-code) setting. This allows you to step into NUnit's source code, set breakpoints, watch variables, etc.\n\n## Documentation\n\nGreat documentation is essential for any open source project and NUnit is no exception. \n\n[Our documentation](https://docs.nunit.org/articles/nunit/intro.html) often lags behind the features that have been implemented or would benefit from better examples.\n\n## Fixing Bugs and Adding Features \n\nWe love pull requests, but would prefer that new contributors start with smaller issues and let us know before you contribute to prevent duplication of work.\n\nEnsure you have an issue to connect your pull request to. If there isn't one, please open a new issue first, and state you have a fix before embarking on the pull request. \n\nTo help new contributors get their feet wet, we have marked a number of issues with the `good first issue` label. These are great places to start.\n\nIt is also a good idea to add a comment to an issue that you are working on to let everyone know. If you stop working on it, also please let us know.\n\nPlease read through the [Developer Docs](https://docs.nunit.org/articles/developer-info/Team-Practices.html#technical-practices) before contributing to understand our coding standards and contribution guidelines.\n\nWhen you are ready to contribute, instructions on how to build and run tests can be found in [BUILDING.md](https://github.com/nunit/nunit/blob/master/BUILDING.md)\n\n## License\n\nNUnit is under the [MIT license](https://github.com/nunit/nunit/blob/master/LICENSE.txt). By contributing to NUnit, you assert that:\n\n* The contribution is your own original work.\n* You have the right to assign the copyright for the work (it is not owned by your employer, or you have been given copyright assignment in writing).\n"
        },
        {
          "name": "CakeScripts.Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "CakeScripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.044921875,
          "content": "Copyright (c) 2024 Charlie Poole, Rob Prouse\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n"
        },
        {
          "name": "NOTICES.md",
          "type": "blob",
          "size": 0.4599609375,
          "content": "NUnit 3.0 is based on earlier versions of NUnit, with Portions\n\nCopyright (c) 2002-2014 Charlie Poole or  \nCopyright (c) 2002-2004 James W. Newkirk, Michael C. Two, Alexei A. Vorontsov or  \nCopyright (c) 2000-2002 Philip A. Craig\n\nCopyright (c) 2008 Jonathan Pryor, Novell  \nThe file [Options.cs](src/NUnitFramework/nunitlite/Options.cs) is used under MIT license.\n\nAdditional third party license notices can be found in [THIRD_PARTY_NOTICES.md](THIRD_PARTY_NOTICES.md).\n"
        },
        {
          "name": "NUnit.sln.DotSettings",
          "type": "blob",
          "size": 33.427734375,
          "content": "﻿<wpf:ResourceDictionary xml:space=\"preserve\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:s=\"clr-namespace:System;assembly=mscorlib\" xmlns:ss=\"urn:shemas-jetbrains-com:settings-storage-xaml\" xmlns:wpf=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">\n\t<s:Boolean x:Key=\"/Default/CodeEditing/GenerateMemberBody/CopyXmlDocumentation/@EntryValue\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/CodeInspection/Highlighting/InspectionSeverities/=InconsistentNaming/@EntryIndexedValue\">ERROR</s:String>\n\t<s:String x:Key=\"/Default/CodeInspection/Highlighting/InspectionSeverities/=RedundantThisQualifier/@EntryIndexedValue\">SUGGESTION</s:String>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_LINQ_QUERY/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTILINE_CALLS_CHAIN/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTILINE_FOR_STMT/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTIPLE_DECLARATION/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTLINE_TYPE_PARAMETER_LIST/@EntryValue\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/EMPTY_BLOCK_STYLE/@EntryValue\">TOGETHER_SAME_LINE</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/PLACE_ACCESSORHOLDER_ATTRIBUTE_ON_SAME_LINE_EX/@EntryValue\">NEVER</s:String>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_AFTER_TYPECAST_PARENTHESES/@EntryValue\">False</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_AROUND_MULTIPLICATIVE_OP/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_WITHING_EMPTY_BRACES/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/STICK_COMMENT/@EntryValue\">False</s:Boolean>\n\t<s:String x:Key=\"/Default/CodeStyle/FileHeader/FileHeaderText/@EntryValue\">Copyright (c) Charlie Poole, Rob Prouse and Contributors. MIT License - see LICENSE.txt</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=CDATA/@EntryIndexedValue\">CDATA</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=CE/@EntryIndexedValue\">CE</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=ID/@EntryIndexedValue\">ID</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=ME/@EntryIndexedValue\">ME</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=MTA/@EntryIndexedValue\">MTA</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=NT/@EntryIndexedValue\">NT</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=OS/@EntryIndexedValue\">OS</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=OSX/@EntryIndexedValue\">OSX</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=SSCLI/@EntryIndexedValue\">SSCLI</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=STA/@EntryIndexedValue\">STA</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=UI/@EntryIndexedValue\">UI</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=XP/@EntryIndexedValue\">XP</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=Constants/@EntryIndexedValue\">&lt;Policy Inspect=\"False\" Prefix=\"\" Suffix=\"\" Style=\"AaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=EnumMember/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=Interfaces/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"I\" Suffix=\"\" Style=\"AaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=LocalConstants/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"aaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=LocalFunctions/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=Locals/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"aaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=MethodPropertyEvent/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=Parameters/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"aaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=PrivateConstants/@EntryIndexedValue\">&lt;Policy Inspect=\"False\" Prefix=\"\" Suffix=\"\" Style=\"AaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=PrivateInstanceFields/@EntryIndexedValue\">&lt;Policy Inspect=\"False\" Prefix=\"_\" Suffix=\"\" Style=\"aaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=PrivateStaticFields/@EntryIndexedValue\">&lt;Policy Inspect=\"False\" Prefix=\"_\" Suffix=\"\" Style=\"aaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=PrivateStaticReadonly/@EntryIndexedValue\">&lt;Policy Inspect=\"False\" Prefix=\"\" Suffix=\"\" Style=\"AaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=StaticReadonly/@EntryIndexedValue\">&lt;Policy Inspect=\"False\" Prefix=\"\" Suffix=\"\" Style=\"AaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=TypeParameters/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"T\" Suffix=\"\" Style=\"AaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=TypesAndNamespaces/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb_AaBb\"&gt;&lt;ExtraRule Prefix=\"\" Suffix=\"\" Style=\"AA_BB\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=03c58a20_002Df24c_002D4992_002Da01b_002Dd4dd88b40443/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Static\" AccessRightKinds=\"Private, Internal\" Description=\"Non-visible static readonly and constant fields\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"READONLY_FIELD\" /&gt;&lt;Kind Name=\"CONSTANT_FIELD\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"False\" Prefix=\"\" Suffix=\"\" Style=\"AaBb\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=15b5b1f1_002D457c_002D4ca6_002Db278_002D5615aedc07d3/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Static\" AccessRightKinds=\"Private\" Description=\"Static readonly fields (private)\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"READONLY_FIELD\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"False\" WarnAboutPrefixesAndSuffixes=\"False\" Prefix=\"\" Suffix=\"\" Style=\"AaBb\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=236f7aa5_002D7b06_002D43ca_002Dbf2a_002D9b31bfcff09a/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Any\" AccessRightKinds=\"Private\" Description=\"Constant fields (private)\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"CONSTANT_FIELD\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"False\" WarnAboutPrefixesAndSuffixes=\"False\" Prefix=\"\" Suffix=\"\" Style=\"AaBb\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=2c62818f_002D621b_002D4425_002Dadc9_002D78611099bfcb/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Any\" AccessRightKinds=\"Any\" Description=\"Type parameters\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"TYPE_PARAMETER\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"True\" WarnAboutPrefixesAndSuffixes=\"False\" Prefix=\"T\" Suffix=\"\" Style=\"AaBb\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=4a98fdf6_002D7d98_002D4f5a_002Dafeb_002Dea44ad98c70c/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Instance\" AccessRightKinds=\"Private\" Description=\"Instance fields (private)\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"FIELD\" /&gt;&lt;Kind Name=\"READONLY_FIELD\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"False\" WarnAboutPrefixesAndSuffixes=\"False\" Prefix=\"_\" Suffix=\"\" Style=\"aaBb\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=61a991a4_002Dd0a3_002D4d19_002D90a5_002Df8f4d75c30c1/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Any\" AccessRightKinds=\"Any\" Description=\"Local variables\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"LOCAL_VARIABLE\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"True\" WarnAboutPrefixesAndSuffixes=\"False\" Prefix=\"\" Suffix=\"\" Style=\"aaBb\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=669e5282_002Dfb4b_002D4e90_002D91e7_002D07d269d04b60/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Any\" AccessRightKinds=\"Protected, ProtectedInternal, Internal, Public, PrivateProtected\" Description=\"Constant fields (not private)\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"CONSTANT_FIELD\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"False\" WarnAboutPrefixesAndSuffixes=\"False\" Prefix=\"\" Suffix=\"\" Style=\"AaBb\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=76f79b1e_002Dece7_002D4df2_002Da322_002D1bd7fea25eb7/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Any\" AccessRightKinds=\"Any\" Description=\"Local functions\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"LOCAL_FUNCTION\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"True\" WarnAboutPrefixesAndSuffixes=\"False\" Prefix=\"\" Suffix=\"\" Style=\"AaBb\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=7aea095d_002Df375_002D4eae_002Da93c_002Dc735520887c6/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Static, Instance\" AccessRightKinds=\"Protected, ProtectedInternal, Public\" Description=\"Visible fields\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"FIELD\" /&gt;&lt;Kind Name=\"READONLY_FIELD\" /&gt;&lt;Kind Name=\"CONSTANT_FIELD\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"AaBb\"&gt;&lt;ExtraRule Prefix=\"\" Suffix=\"\" Style=\"AA_BB\" /&gt;&lt;/Policy&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=8a85b61a_002D1024_002D4f87_002Db9ef_002D1fdae19930a1/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Any\" AccessRightKinds=\"Any\" Description=\"Parameters\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"PARAMETER\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"True\" WarnAboutPrefixesAndSuffixes=\"False\" Prefix=\"\" Suffix=\"\" Style=\"aaBb\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=8b8504e3_002Df0be_002D4c14_002D9103_002Dc732f2bddc15/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Any\" AccessRightKinds=\"Any\" Description=\"Enum members\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"ENUM_MEMBER\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"True\" WarnAboutPrefixesAndSuffixes=\"False\" Prefix=\"\" Suffix=\"\" Style=\"AaBb\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=a0b4bc4d_002Dd13b_002D4a37_002Db37e_002Dc9c6864e4302/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Any\" AccessRightKinds=\"Any\" Description=\"Types and namespaces\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"NAMESPACE\" /&gt;&lt;Kind Name=\"CLASS\" /&gt;&lt;Kind Name=\"STRUCT\" /&gt;&lt;Kind Name=\"ENUM\" /&gt;&lt;Kind Name=\"DELEGATE\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"True\" WarnAboutPrefixesAndSuffixes=\"False\" Prefix=\"\" Suffix=\"\" Style=\"AaBb_AaBb\"&gt;&lt;ExtraRule Prefix=\"\" Suffix=\"\" Style=\"AA_BB\" /&gt;&lt;/Policy&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=a4f433b8_002Dabcd_002D4e55_002Da08f_002D82e78cef0f0c/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Any\" AccessRightKinds=\"Any\" Description=\"Local constants\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"LOCAL_CONSTANT\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"True\" WarnAboutPrefixesAndSuffixes=\"False\" Prefix=\"\" Suffix=\"\" Style=\"aaBb\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=a75d9d04_002Dddc9_002D4c5e_002Da636_002D844e5ce42835/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Static, Instance\" AccessRightKinds=\"Internal\" Description=\"Internal fields\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"FIELD\" /&gt;&lt;Kind Name=\"READONLY_FIELD\" /&gt;&lt;Kind Name=\"CONSTANT_FIELD\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"False\" Prefix=\"\" Suffix=\"\" Style=\"AaBb\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=a7a3339e_002D4e89_002D4319_002D9735_002Da9dc4cb74cc7/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Any\" AccessRightKinds=\"Any\" Description=\"Interfaces\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"INTERFACE\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"True\" WarnAboutPrefixesAndSuffixes=\"False\" Prefix=\"I\" Suffix=\"\" Style=\"AaBb\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=c873eafb_002Dd57f_002D481d_002D8c93_002D77f6863c2f88/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Static\" AccessRightKinds=\"Protected, ProtectedInternal, Internal, Public, PrivateProtected\" Description=\"Static readonly fields (not private)\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"READONLY_FIELD\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"False\" WarnAboutPrefixesAndSuffixes=\"False\" Prefix=\"\" Suffix=\"\" Style=\"AaBb\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/UserRules/=f9fce829_002De6f4_002D4cb2_002D80f1_002D5497c44f51df/@EntryIndexedValue\">&lt;Policy&gt;&lt;Descriptor Staticness=\"Static\" AccessRightKinds=\"Private\" Description=\"Static fields (private)\"&gt;&lt;ElementKinds&gt;&lt;Kind Name=\"FIELD\" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect=\"False\" WarnAboutPrefixesAndSuffixes=\"False\" Prefix=\"_\" Suffix=\"\" Style=\"aaBb\" /&gt;&lt;/Policy&gt;</s:String>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EFeature_002EServices_002ECodeCleanup_002EFileHeader_002EFileHeaderSettingsMigrate/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpAttributeForSingleLineMethodUpgrade/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpKeepExistingMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpPlaceEmbeddedOnSameLineMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpRenamePlacementToArrangementMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpUseContinuousIndentInsideBracesMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002EAddAccessorOwnerDeclarationBracesMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002ECSharpPlaceAttributeOnSameLineMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002EMigrateBlankLinesAroundFieldToBlankLinesAroundProperty/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002EMigrateThisQualifierSettings/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002EPredefinedNamingRulesToUserRulesUpgrade/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=1256596694514F41A4D79DB082E50E51/@KeyIndexDefined\">True</s:Boolean>\n\t\n\t\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=1256596694514F41A4D79DB082E50E51/Field/=YEAR/Expression/@EntryValue\">getCurrentDate(\"yyyy\")</s:String>\n\t<s:Int64 x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=1256596694514F41A4D79DB082E50E51/Field/=YEAR/InitialRange/@EntryValue\">-1</s:Int64>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=1256596694514F41A4D79DB082E50E51/Shortcut/@EntryValue\">copyright</s:String>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=1256596694514F41A4D79DB082E50E51/Description/@EntryValue\">NUnit Copyright</s:String>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=1256596694514F41A4D79DB082E50E51/Text/@EntryValue\">// Copyright (c) Charlie Poole, Rob Prouse and Contributors. MIT License - see LICENSE.txt</s:String>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=1256596694514F41A4D79DB082E50E51/Reformat/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=1256596694514F41A4D79DB082E50E51/ShortenQualifiedReferences/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=1256596694514F41A4D79DB082E50E51/Applicability/=Live/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=1256596694514F41A4D79DB082E50E51/Scope/=558F05AA0DE96347816FF785232CFB2A/@KeyIndexDefined\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=1256596694514F41A4D79DB082E50E51/Scope/=558F05AA0DE96347816FF785232CFB2A/Type/@EntryValue\">InCSharpTypeAndNamespace</s:String>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=1256596694514F41A4D79DB082E50E51/Scope/=558F05AA0DE96347816FF785232CFB2A/CustomProperties/=minimumLanguageVersion/@EntryIndexedValue\">2.0</s:String>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=1256596694514F41A4D79DB082E50E51/Field/=YEAR/@KeyIndexDefined\">True</s:Boolean>\n\t<s:Int64 x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=1256596694514F41A4D79DB082E50E51/Field/=YEAR/Order/@EntryValue\">0</s:Int64>\n\t\n\t\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=6ACED16A1977164DBEC1AABF77ECAE5F/@KeyIndexDefined\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=6ACED16A1977164DBEC1AABF77ECAE5F/Applicability/=Live/@EntryIndexedValue\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=6ACED16A1977164DBEC1AABF77ECAE5F/Description/@EntryValue\">Test Method</s:String>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=6ACED16A1977164DBEC1AABF77ECAE5F/Field/=TEST_005FMETHOD/@KeyIndexDefined\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=6ACED16A1977164DBEC1AABF77ECAE5F/Field/=TEST_005FMETHOD/Expression/@EntryValue\">constant(\"TestMethod\")</s:String>\n\t<s:Int64 x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=6ACED16A1977164DBEC1AABF77ECAE5F/Field/=TEST_005FMETHOD/Order/@EntryValue\">0</s:Int64>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=6ACED16A1977164DBEC1AABF77ECAE5F/Reformat/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=6ACED16A1977164DBEC1AABF77ECAE5F/Scope/=B68999B9D6B43E47A02B22C12A54C3CC/@KeyIndexDefined\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=6ACED16A1977164DBEC1AABF77ECAE5F/Scope/=B68999B9D6B43E47A02B22C12A54C3CC/CustomProperties/=minimumLanguageVersion/@EntryIndexedValue\">2.0</s:String>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=6ACED16A1977164DBEC1AABF77ECAE5F/Scope/=B68999B9D6B43E47A02B22C12A54C3CC/Type/@EntryValue\">InCSharpTypeMember</s:String>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=6ACED16A1977164DBEC1AABF77ECAE5F/Shortcut/@EntryValue\">test</s:String>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=6ACED16A1977164DBEC1AABF77ECAE5F/ShortenQualifiedReferences/@EntryValue\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=6ACED16A1977164DBEC1AABF77ECAE5F/Text/@EntryValue\">[Test]&#xD;\npublic void $TEST_METHOD$()&#xD;\n{&#xD;\n\t$END$&#xD;\n}</s:String>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=73F8A8FB97CC7A40BB04F4ACB4DC6D06/@KeyIndexDefined\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=73F8A8FB97CC7A40BB04F4ACB4DC6D06/Applicability/=Live/@EntryIndexedValue\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=73F8A8FB97CC7A40BB04F4ACB4DC6D06/Description/@EntryValue\">Test Fixture</s:String>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=73F8A8FB97CC7A40BB04F4ACB4DC6D06/Field/=TEST_005FCLASS/@KeyIndexDefined\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=73F8A8FB97CC7A40BB04F4ACB4DC6D06/Field/=TEST_005FCLASS/Expression/@EntryValue\">constant(\"TestClass\")</s:String>\n\t<s:Int64 x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=73F8A8FB97CC7A40BB04F4ACB4DC6D06/Field/=TEST_005FCLASS/Order/@EntryValue\">0</s:Int64>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=73F8A8FB97CC7A40BB04F4ACB4DC6D06/Field/=TEST_005FMETHOD/@KeyIndexDefined\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=73F8A8FB97CC7A40BB04F4ACB4DC6D06/Field/=TEST_005FMETHOD/Expression/@EntryValue\">constant(\"TestMethod\")</s:String>\n\t<s:Int64 x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=73F8A8FB97CC7A40BB04F4ACB4DC6D06/Field/=TEST_005FMETHOD/Order/@EntryValue\">1</s:Int64>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=73F8A8FB97CC7A40BB04F4ACB4DC6D06/Reformat/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=73F8A8FB97CC7A40BB04F4ACB4DC6D06/Scope/=558F05AA0DE96347816FF785232CFB2A/@KeyIndexDefined\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=73F8A8FB97CC7A40BB04F4ACB4DC6D06/Scope/=558F05AA0DE96347816FF785232CFB2A/CustomProperties/=minimumLanguageVersion/@EntryIndexedValue\">2.0</s:String>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=73F8A8FB97CC7A40BB04F4ACB4DC6D06/Scope/=558F05AA0DE96347816FF785232CFB2A/Type/@EntryValue\">InCSharpTypeAndNamespace</s:String>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=73F8A8FB97CC7A40BB04F4ACB4DC6D06/Scope/=B68999B9D6B43E47A02B22C12A54C3CC/@KeyIndexDefined\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=73F8A8FB97CC7A40BB04F4ACB4DC6D06/Scope/=B68999B9D6B43E47A02B22C12A54C3CC/CustomProperties/=minimumLanguageVersion/@EntryIndexedValue\">2.0</s:String>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=73F8A8FB97CC7A40BB04F4ACB4DC6D06/Scope/=B68999B9D6B43E47A02B22C12A54C3CC/Type/@EntryValue\">InCSharpTypeMember</s:String>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=73F8A8FB97CC7A40BB04F4ACB4DC6D06/Shortcut/@EntryValue\">tf</s:String>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=73F8A8FB97CC7A40BB04F4ACB4DC6D06/ShortenQualifiedReferences/@EntryValue\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=73F8A8FB97CC7A40BB04F4ACB4DC6D06/Text/@EntryValue\">[TestFixture]&#xD;\npublic class $TEST_CLASS$&#xD;\n{&#xD;\n\t[Test]&#xD;\n\tpublic void $TEST_METHOD$()&#xD;\n\t{&#xD;\n\t\t$END$&#xD;\n\t}&#xD;\n}</s:String>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/@KeyIndexDefined\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/Applicability/=File/@EntryIndexedValue\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/CustomProperties/=Extension/@EntryIndexedValue\">cs</s:String>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/CustomProperties/=FileName/@EntryIndexedValue\">TestClass</s:String>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/CustomProperties/=ValidateFileName/@EntryIndexedValue\">True</s:String>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/Description/@EntryValue\">&amp;Test Class</s:String>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/Field/=CLASS/@KeyIndexDefined\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/Field/=CLASS/Expression/@EntryValue\">getFileNameWithoutExtension()</s:String>\n\t<s:Int64 x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/Field/=CLASS/InitialRange/@EntryValue\">-1</s:Int64>\n\t<s:Int64 x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/Field/=CLASS/Order/@EntryValue\">2</s:Int64>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/Field/=HEADER/@KeyIndexDefined\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/Field/=HEADER/Expression/@EntryValue\">fileheader()</s:String>\n\t<s:Int64 x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/Field/=HEADER/InitialRange/@EntryValue\">-1</s:Int64>\n\t<s:Int64 x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/Field/=HEADER/Order/@EntryValue\">0</s:Int64>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/Field/=NAMESPACE/@KeyIndexDefined\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/Field/=NAMESPACE/Expression/@EntryValue\">fileDefaultNamespace()</s:String>\n\t<s:Int64 x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/Field/=NAMESPACE/InitialRange/@EntryValue\">-1</s:Int64>\n\t<s:Int64 x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/Field/=NAMESPACE/Order/@EntryValue\">1</s:Int64>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/Field/=TEST_005FMETHOD/@KeyIndexDefined\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/Field/=TEST_005FMETHOD/Expression/@EntryValue\">constant(\"TestMethod\")</s:String>\n\t<s:Int64 x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/Field/=TEST_005FMETHOD/Order/@EntryValue\">3</s:Int64>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/Reformat/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/Scope/=E8F0594528C33E45BBFEC6CFE851095D/@KeyIndexDefined\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/Scope/=E8F0594528C33E45BBFEC6CFE851095D/Type/@EntryValue\">InCSharpProjectFile</s:String>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/ShortenQualifiedReferences/@EntryValue\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=8DB051565EE336439784EE0FE0DE0FB7/Text/@EntryValue\">$HEADER$&#xD;\n#region Using Directives&#xD;\n&#xD;\nusing System;&#xD;\nusing NUnit.Framework;&#xD;\n&#xD;\n#endregion&#xD;\n&#xD;\nnamespace $NAMESPACE$&#xD;\n{&#xD;\n\t[TestFixture]&#xD;\n\tpublic class $CLASS$ &#xD;\n\t{&#xD;\n\t\t[Test]&#xD;\n\t\tpublic void $TEST_METHOD$()&#xD;\n\t\t{&#xD;\n\t\t\t$END$&#xD;\n\t\t}&#xD;\n\t}&#xD;\n}</s:String>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=addin/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Affinative/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Agresti/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Assertable/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=awaiters/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=bitness/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=comparers/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Coull/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=datapoint/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=datapoints/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=dequeuer/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=dereferenced/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=enqueued/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=enqueuer/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Enqueues/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=enqueuing/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Enumerables/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=formattable/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=initializers/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=ints/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Jeffreys/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Kumpera/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Marek/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=NONINFRINGEMENT/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Novell/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Numerics/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=nupkg/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Parallelizable/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=parameterless/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=passthrough/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=preconstructed/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Prouse/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Randomizer/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Randomizers/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=runtimes/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Safar/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=sandboxed/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=subpath/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Threadpool/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Varga/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=WASM/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Xbox/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Zoltan/@EntryIndexedValue\">True</s:Boolean></wpf:ResourceDictionary>\n"
        },
        {
          "name": "NuGet.config",
          "type": "blob",
          "size": 0.1875,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <clear/>\n    <add key=\"nuget\" value=\"https://api.nuget.org/v3/index.json\" />\n  </packageSources>\n</configuration>\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.6982421875,
          "content": "# NUnit 4 Framework\n\n\n[![Follow NUnit](https://img.shields.io/twitter/follow/nunit.svg?style=social)](https://twitter.com/nunit) [![Slack](https://img.shields.io/badge/chat-on%20Slack-brightgreen)](https://join.slack.com/t/nunit/shared_invite/zt-jz58jw68-Led8y3WH4n2a~Y5WjuOpKA) [![NUnit issues marked with \"help wanted\" label](https://img.shields.io/github/issues/nunit/nunit/help%20wanted.svg)](https://github.com/nunit/nunit/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22) [![NUnit issues marked with \"good first issue\" label](https://img.shields.io/github/issues/nunit/nunit/good%20first%20issue.svg)](https://github.com/nunit/nunit/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22)\n\nNUnit is a unit-testing framework for all .NET languages. \nIt can run on macOS, Linux and Windows operating systems. \nNUnit can be used for a wide range of testing, from unit testing with TDD to full fledged system and integration testing.\nIt is a non-opinionated, broad and deep framework with multiple different ways to assert that your code behaves as expected. Many aspects of NUnit can be extended to suit your specific purposes.\n\nThe latest version, version 4, is an upgrade from the groundbreaking NUnit 3 framework. It is a modernized version, aimed at taking advantage of the latest .NET features and C# language constructs.\n\nIf you are upgrading from NUnit 3, be aware of the [breaking changes](https://docs.nunit.org/articles/nunit/release-notes/breaking-changes.html#nunit-40). Please see the [NUnit 4 Migration Guide](https://docs.nunit.org/articles/nunit/release-notes/Nunit4.0-MigrationGuide.html) and take care to prepare your NUnit 3 code before you do the upgrade.\n\n## Table of Contents ##\n\n- [Downloads](#downloads)\n- [Documentation](#documentation)\n- [Contributing](#contributing)\n- [License](#license)\n- [NUnit Projects](#nunit-projects)\n\n## Downloads ##\n\nThe latest stable release of the NUnit Framework is [available on NuGet](https://www.nuget.org/packages/NUnit/) or can be [downloaded from GitHub](https://github.com/nunit/nunit/releases). Pre-release builds are [available on MyGet](https://www.myget.org/feed/nunit/package/nuget/NUnit).\n\n## Documentation ##\n\nDocumentation for all NUnit projects can be found at the [documentation site](https://docs.nunit.org).\n\n- [NUnit Documentation](https://docs.nunit.org/articles/nunit/intro.html)\n- [Installation](https://docs.nunit.org/articles/nunit/getting-started/installation.html)\n- [Release Notes](https://docs.nunit.org/articles/nunit/release-notes/framework.html)\n- [Code Samples](https://docs.nunit.org/articles/nunit/getting-started/samples.html)\n\n## Contributing ##\n\nFor more information on contributing to the NUnit project, please see [CONTRIBUTING.md](https://github.com/nunit/nunit/blob/main/CONTRIBUTING.md) and the [Developer Docs](https://docs.nunit.org/articles/developer-info/Team-Practices.html#technical-practices).\n\nNUnit 3.0 was created by [Charlie Poole](https://github.com/CharliePoole), [Rob Prouse](https://github.com/rprouse), [Simone Busoli](https://github.com/simoneb), [Neil Colvin](https://github.com/oznetmaster) and numerous community contributors. A complete list of contributors since NUnit migrated to GitHub can be [found on GitHub](https://github.com/nunit/nunit/graphs/contributors).\n\nEarlier versions of NUnit were developed by Charlie Poole, James W. Newkirk, Alexei A. Vorontsov, Michael C. Two and Philip A. Craig.\n\n## License ##\n\nNUnit is Open Source software and NUnit 4 is released under the [MIT license](https://raw.githubusercontent.com/nunit/nunit/main/LICENSE.txt). Earlier releases used the [NUnit license](https://nunit.org/nuget/license.html). Both of these licenses allow the use of NUnit in free and commercial applications and libraries without restrictions.\n\n## NUnit Projects ##\n\nNUnit is made up of several projects. When reporting issues, please try to report issues in the correct project.\n\n### Core Projects ###\n\n- [NUnit Test Framework](https://github.com/nunit/nunit) - The test framework used to write NUnit tests (this repository)\n- [NUnit Visual Studio Adapter](https://github.com/nunit/nunit3-vs-adapter) - Visual Studio/Dotnet adapter for running NUnit 3 and 4 tests in Visual Studio or the `dotnet` command line.\n- [NUnit Console and Engine](https://github.com/nunit/nunit-console) - Runs unit tests from the command line and provides the engine that is used by other test runners to run NUnit tests.\n\n### Visual Studio Extensions ###\n\n- [NUnit Visual Studio Adapter](https://github.com/nunit/nunit3-vs-adapter) - Visual Studio adapter for running NUnit 3 and 4 tests in Visual Studio or the `dotnet` command line.\n- [NUnit Visual Studio Templates](https://github.com/nunit/nunit-vs-templates) - Project templates and snippets for writing unit tests in Visual Studio. This repo is for reference only, as the templates have been donated to the [Dotnet project](https://github.com/dotnet/test-templates) and are maintained there, and also released as part of the dotnet releases.\n- [Visual Studio Test Generator](https://github.com/nunit/nunit-vs-testgenerator) - Generates NUnit tests in Visual Studio\n- [NUnit 2 Visual Studio Adapter](https://github.com/nunit/nunit-vs-adapter) - Visual Studio adapter for running older NUnit 2.x tests in Visual Studio and in VSTS/TFS builds\n\n### NUnit Engine Extensions ###\n\n- [NUnit 2 Driver](https://github.com/nunit/nunit-v2-framework-driver) - Allows the NUnit 3 engine to run NUnit 2 tests\n- [NUnit 2 Result Writer](https://github.com/nunit/nunit-v2-result-writer) - Writes test results in the legacy NUnit 2 format\n- [Visual Studio Project Loader](https://github.com/nunit/vs-project-loader) - Loads and parses Visual Studio projects and solutions\n- [NUnit Project Loader](https://github.com/nunit/nunit-project-loader) - Loads NUnit projects\n"
        },
        {
          "name": "THIRD_PARTY_NOTICES.md",
          "type": "blob",
          "size": 1.521484375,
          "content": "# Third party notices\n\n## nunit.framework.csproj\n\n| Reference                                   | Version         | License Type | License                                       |\n|---------------------------------------------|-----------------|--------------|-----------------------------------------------|\n| IsExternalInit                              | 1.0.3           | MIT          | https://licenses.nuget.org/MIT                |\n| Microsoft.Win32.Registry                    | 5.0.0           | MIT          | https://licenses.nuget.org/MIT                |\n| Nullable                                    | 1.3.1           | MIT          | https://licenses.nuget.org/MIT                |\n| System.Runtime.Loader                       | 4.3.0           | MS-EULA      | http://go.microsoft.com/fwlink/?LinkId=329770 |\n| TunnelVisionLabs.ReferenceAssemblyAnnotator | 1.0.0-alpha.160 | MIT          | https://licenses.nuget.org/MIT                |\n\n## nunit.framework.legacy.csproj\n\n| Reference                                   | Version         | License Type | License                        |\n|---------------------------------------------|-----------------|--------------|--------------------------------|\n| IsExternalInit                              | 1.0.3           | MIT          | https://licenses.nuget.org/MIT |\n| Nullable                                    | 1.3.1           | MIT          | https://licenses.nuget.org/MIT |\n| TunnelVisionLabs.ReferenceAssemblyAnnotator | 1.0.0-alpha.160 | MIT          | https://licenses.nuget.org/MIT |\n"
        },
        {
          "name": "THIRD_PARTY_NOTICES_DEV.md",
          "type": "blob",
          "size": 2.0732421875,
          "content": "# Third party notices for development-only projects\n\n## nunit.framework.benchmarks.csproj\n\n| Reference       | Version | License Type | License                        |\n|---------------------------------------------------------------------------|\n| BenchmarkDotNet | 0.13.5  | MIT          | https://licenses.nuget.org/MIT |\n\n## nunit.framework.legacy.tests.csproj\n\n| Reference              | Version | License Type    | License                                                              |\n|---------------------------------------------------------------------------------------------------------------------------|\n| Microsoft.NET.Test.Sdk | 17.7.2  | LICENSE_NET.txt | https://www.nuget.org/packages/Microsoft.NET.Test.Sdk/17.6.3/License |\n\n## nunit.testdata.csproj\n\n| Reference                         | Version | License Type | License                        |\n|---------------------------------------------------------------------------------------------|\n| System.Security.Principal.Windows | 5.0.0   | MIT          | https://licenses.nuget.org/MIT |\n\n## nunit.testdata.fsharp.fsproj\n\n| Reference   | Version | License Type | License                        |\n|-----------------------------------------------------------------------|\n| FSharp.Core | 7.0.200 | MIT          | https://licenses.nuget.org/MIT |\n\n## nunit.framework.tests.csproj\n\n| Reference                                   | Version         | License Type    | License                                                              |\n|--------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Microsoft.NET.Test.Sdk                      | 17.7.2          | LICENSE_NET.txt | https://www.nuget.org/packages/Microsoft.NET.Test.Sdk/17.6.3/License |\n| System.Collections.Immutable                | 6.0.0           | MIT             | https://github.com/dotnet/runtime/blob/main/LICENSE.TXT             |\n| TunnelVisionLabs.ReferenceAssemblyAnnotator | 1.0.0-alpha.160 | MIT             | https://licenses.nuget.org/MIT                                       |\n"
        },
        {
          "name": "build",
          "type": "blob",
          "size": 0.0380859375,
          "content": "#!/bin/bash\n./build.sh $CAKE_ARGS \"$@\"\n"
        },
        {
          "name": "build.cake",
          "type": "blob",
          "size": 20.91015625,
          "content": "#addin \"nuget:?package=Cake.MinVer&version=4.0.0\"\n#load \"CakeScripts/VersionParsers.cs\"\n\n//////////////////////////////////////////////////////////////////////\n// ARGUMENTS\n//////////////////////////////////////////////////////////////////////\n\nvar target = Argument(\"target\", \"Default\");\nvar configuration = Argument(\"configuration\", \"Release\");\n\n//////////////////////////////////////////////////////////////////////\n// SET ERROR LEVELS\n//////////////////////////////////////////////////////////////////////\n\nvar ErrorDetail = new List<string>();\n\n//////////////////////////////////////////////////////////////////////\n// SET PACKAGE VERSION\n//////////////////////////////////////////////////////////////////////\n\nvar version = MinVer(settings=> settings\n    .WithAutoIncrement(MinVerAutoIncrement.Minor)\n);\n\nvar packageVersion = version;\n\n//////////////////////////////////////////////////////////////////////\n// DEFINE RUN CONSTANTS\n//////////////////////////////////////////////////////////////////////\n\nvar PROJECT_DIR = Context.Environment.WorkingDirectory.FullPath + \"/\";\nvar PACKAGE_DIR = Argument(\"artifact-dir\", PROJECT_DIR + \"package\") + \"/\";\nvar BIN_DIR = PROJECT_DIR + \"bin/\" + configuration + \"/\";\nvar IMAGE_DIR = PROJECT_DIR + \"images/\";\nvar NUNITFRAMEWORKTESTSBIN = PROJECT_DIR + \"src/NUnitFramework/tests/bin/\" + configuration + \"/\";\nvar NUNITFRAMEWORKLEGACYTESTSBIN = PROJECT_DIR + \"src/NUnitFramework/nunit.framework.legacy.tests/bin/\" + configuration + \"/\";\nvar NUNITLITETESTSBIN = PROJECT_DIR + \"src/NUnitFramework/nunitlite.tests/bin/\" + configuration + \"/\";\nvar NUNITFRAMEWORKBIN = PROJECT_DIR + \"src/NUnitFramework/framework/bin/\" + configuration + \"/\";\nvar NUNITFRAMEWORKLEGACYBIN = PROJECT_DIR + \"src/NUnitFramework/nunit.framework.legacy/bin/\" + configuration + \"/\";\nvar NUNITLITEBIN = PROJECT_DIR + \"src/NUnitFramework/nunitlite/bin/\" + configuration + \"/\";\nvar NUNITLITERUNNERBIN = PROJECT_DIR + \"src/NUnitFramework/nunitlite-runner/bin/\" + configuration + \"/\";\n\nvar SOLUTION_FILE = \"./nunit.sln\";\n\nvar DIRECTORY_BUILD_PROPS = PROJECT_DIR + \"src/NUnitFramework/Directory.Build.props\";\n\n// Test Runners\nvar NUNITLITE_RUNNER_DLL = \"nunitlite-runner.dll\";\n\n// Test Assemblies\nvar FRAMEWORK_TESTS = \"nunit.framework.tests.dll\";\nvar FRAMEWORKLEGACY_TESTS = \"nunit.framework.legacy.tests.dll\";\nvar EXECUTABLE_NUNITLITE_TEST_RUNNER_EXE = \"nunitlite-runner.exe\";\nvar EXECUTABLE_NUNITLITE_TESTS_EXE = \"nunitlite.tests.exe\";\nvar EXECUTABLE_NUNITLITE_TESTS_DLL = \"nunitlite.tests.dll\";\n\n// Packages\nvar ZIP_PACKAGE = PACKAGE_DIR + \"NUnit.Framework-\" + packageVersion + \".zip\";\n\n//////////////////////////////////////////////////////////////////////\n// SUPPORTED FRAMEWORKS\n//////////////////////////////////////////////////////////////////////\n\nvar LibraryFrameworks = XmlPeek(DIRECTORY_BUILD_PROPS, \"/Project/PropertyGroup/NUnitLibraryFrameworks\").Split(';');\nvar RuntimeFrameworks = XmlPeek(DIRECTORY_BUILD_PROPS, \"/Project/PropertyGroup/NUnitRuntimeFrameworks\").Split(';');\n\nvar NetCoreTestRuntimes = RuntimeFrameworks.Where(s => !s.StartsWith(\"net4\")).ToArray();\nvar NetFrameworkTestRuntime = RuntimeFrameworks.Except(NetCoreTestRuntimes).Single();\n\n///////////////////////////////////////////////////////////////////////////////\n// SETUP / TEARDOWN\n///////////////////////////////////////////////////////////////////////////////\n\nSetup(context =>\n{\n    Information(\"Building {0} version {1} of NUnit.\", configuration, packageVersion);\n});\n\n//////////////////////////////////////////////////////////////////////\n// VERSIONING\n//////////////////////////////////////////////////////////////////////\nTask(\"Version\")\n    .Does(context =>\n{\n    context.Information($\"Version: {version.Version}\");\n    context.Information($\"Major: {version.Major}\");\n    context.Information($\"Minor: {version.Minor}\");\n    context.Information($\"Patch: {version.Patch}\");\n    context.Information($\"PreRelease: {version.PreRelease}\");\n    context.Information($\"BuildMetadata: {version.BuildMetadata}\");\n});\n\n\n//////////////////////////////////////////////////////////////////////\n// CLEAN\n//////////////////////////////////////////////////////////////////////\n\nTask(\"Clean\")\n    .Description(\"Deletes all files in the BIN directories\")\n    .Does(() =>\n    {\n        CleanDirectory(NUNITFRAMEWORKBIN);\n        CleanDirectory(NUNITFRAMEWORKLEGACYBIN);\n        CleanDirectory(NUNITLITEBIN);\n        CleanDirectory(NUNITLITERUNNERBIN);\n    });\n\n//////////////////////////////////////////////////////////////////////\n// NUGET RESTORE\n//////////////////////////////////////////////////////////////////////\n\nTask(\"NuGetRestore\")\n    .Description(\"Restores NuGet Packages\")\n    .IsDependentOn(\"Version\")\n    .Does(() =>\n    {\n        DotNetRestore(SOLUTION_FILE);\n    });\n\n//////////////////////////////////////////////////////////////////////\n// BUILD FRAMEWORKS\n//////////////////////////////////////////////////////////////////////\n\nTask(\"Build\")\n    .Description(\"Builds the Solution\")\n    .IsDependentOn(\"NuGetRestore\")\n    .Does(() =>\n    {\n        DotNetBuild(SOLUTION_FILE, CreateDotNetBuildSettings());\n    });\n\nDotNetBuildSettings CreateDotNetBuildSettings() \n{\n    var version = packageVersion.ToString(); \n    var assemblyVersion = VersionParsers.ParseAssemblyVersion(version);\n    var msBuildSettings = new DotNetMSBuildSettings {\n        ContinuousIntegrationBuild = BuildSystem.GitHubActions.IsRunningOnGitHubActions,\n        AssemblyVersion = assemblyVersion,\n        FileVersion = assemblyVersion,\n        InformationalVersion = version\n    };\n    Information(\"AssemblyVersion: {0}\", msBuildSettings.AssemblyVersion);\n    Information(\"FileVersion: {0}\", msBuildSettings.FileVersion);\n    Information(\"InformationalVersion: {0}\", msBuildSettings.InformationalVersion);\n\n    var settings =  new DotNetBuildSettings\n    {\n        Configuration = configuration,\n        NoRestore = true,\n        Verbosity = DotNetVerbosity.Minimal,\n        MSBuildSettings = msBuildSettings\n     };\n    return settings;\n}\n\n//////////////////////////////////////////////////////////////////////\n// TEST\n//////////////////////////////////////////////////////////////////////\n\nTask(\"CheckForError\")\n    .Description(\"Checks for errors running the test suites\")\n    .Does(() => CheckForError(ref ErrorDetail));\n\nTask(\"TestNetFramework\")\n    .Description(\"Tests the .NET Framework version of nunit framework\")\n    .IsDependentOn(\"Build\")\n    .OnError(exception => { ErrorDetail.Add(exception.Message); })\n    .Does(() =>\n    {\n        var runtime = NetFrameworkTestRuntime;\n        var dir = NUNITFRAMEWORKTESTSBIN + runtime + \"/\";\n        Information(\"Run tests for \" + runtime + \" in \" + dir + \"using runner\");\n        RunTest(dir + EXECUTABLE_NUNITLITE_TEST_RUNNER_EXE, dir, FRAMEWORK_TESTS, dir + \"nunit.framework.tests.xml\", runtime, ref ErrorDetail);\n        dir = NUNITFRAMEWORKLEGACYTESTSBIN + runtime + \"/\";\n        Information(\"Run legacy tests for \" + runtime + \" in \" + dir + \"using runner\");\n        RunTest(dir + EXECUTABLE_NUNITLITE_TEST_RUNNER_EXE, dir, FRAMEWORKLEGACY_TESTS, dir + \"nunit.framework.legacy.tests.xml\", runtime, ref ErrorDetail);\n        dir = NUNITLITETESTSBIN + runtime + \"/\";\n        Information(\"Run tests for \" + runtime + \" in \" + dir + \" for nunitlite.tests\");\n        RunTest(dir + EXECUTABLE_NUNITLITE_TESTS_EXE, dir, runtime, ref ErrorDetail);\n        PublishTestResults(runtime);\n    });\n\nvar testCore = Task(\"TestNetCore\")\n    .Description(\"Tests the .NET (6.0+) version of the framework\");\n\nforeach (var runtime in NetCoreTestRuntimes)\n{\n    var task = Task(\"TestNetCore on \" + runtime)\n        .Description(\"Tests the .NET (6.0+) version of the framework on \" + runtime)\n        .WithCriteria(IsRunningOnWindows() || !runtime.EndsWith(\"windows\"))\n        .IsDependentOn(\"Build\")\n        .OnError(exception => { ErrorDetail.Add(exception.Message); })\n        .Does(() =>\n        {\n            var dir = NUNITFRAMEWORKTESTSBIN + runtime + \"/\";\n            Information(\"Run tests for \" + runtime + \" in \" + dir);\n            RunDotnetCoreTests(dir + NUNITLITE_RUNNER_DLL, dir, FRAMEWORK_TESTS, runtime, GetResultXmlPath(FRAMEWORK_TESTS, runtime), ref ErrorDetail);\n            dir = NUNITFRAMEWORKLEGACYTESTSBIN + runtime + \"/\";\n            Information(\"Run legacy tests for \" + runtime + \" in \" + dir);\n            RunDotnetCoreTests(dir + NUNITLITE_RUNNER_DLL, dir, FRAMEWORKLEGACY_TESTS, runtime, GetResultXmlPath(FRAMEWORKLEGACY_TESTS, runtime), ref ErrorDetail);\n            dir = NUNITLITETESTSBIN + runtime + \"/\";\n            Information(\"Run tests for \" + runtime + \" in \" + dir + \" for nunitlite.tests\");\n            RunDotnetCoreTests(dir + EXECUTABLE_NUNITLITE_TESTS_DLL, dir, runtime, ref ErrorDetail);\n            PublishTestResults(runtime);\n        });\n\n    testCore.IsDependentOn(task);\n}\n\n//////////////////////////////////////////////////////////////////////\n// PACKAGE\n//////////////////////////////////////////////////////////////////////\n\nvar RootFiles = new FilePath[]\n{\n    \"LICENSE.txt\",\n    \"NOTICES.md\",\n    \"CHANGES.md\",\n    \"README.md\",\n    \"THIRD_PARTY_NOTICES.md\"\n};\n\n// Not all of these are present in every framework\n// The Microsoft and System assemblies are part of the BCL\n// used by the .NET 4.0 framework. 4.0 tests will not run without them.\nvar FrameworkFiles = new FilePath[]\n{\n    \"mock-assembly.dll\",\n    \"mock-assembly.exe\",\n    \"nunit.framework.dll\",\n    \"nunit.framework.legacy.dll\",\n    \"nunit.framework.pdb\",\n    \"nunit.framework.legacy.pdb\",\n    \"nunit.framework.xml\",\n    \"nunit.framework.legacy.xml\",\n    \"nunit.framework.tests.dll\",\n    \"nunit.testdata.dll\",\n    \"nunitlite.dll\",\n    \"nunitlite.pdb\",\n    \"nunitlite.tests.exe\",\n    \"nunitlite.tests.dll\",\n    \"slow-nunit-tests.dll\",\n    \"nunitlite-runner.exe\",\n    \"nunitlite-runner.pdb\",\n    \"nunitlite-runner.dll\",\n    \"Microsoft.Threading.Tasks.dll\",\n    \"Microsoft.Threading.Tasks.Extensions.Desktop.dll\",\n    \"Microsoft.Threading.Tasks.Extensions.dll\",\n    \"System.IO.dll\",\n    \"System.Runtime.dll\",\n    \"System.Threading.Tasks.dll\",\n    \"System.ValueTuple.dll\"\n};\n\nstring CurrentImageDir => $\"{IMAGE_DIR}NUnit-{packageVersion}/\";\n\nTask(\"CreateImage\")\n    .Description(\"Copies all files into the image directory\")\n    .Does(() =>\n    {\n        CleanDirectory(CurrentImageDir);\n        CopyFiles(RootFiles, CurrentImageDir);\n\n        var imageBinDir = Directory(CurrentImageDir) + Directory(\"bin\");\n\n        CreateDirectory(imageBinDir);\n        Information(\"Created imagedirectory at:\" + imageBinDir.ToString());\n        var directories = new String[]\n        {\n            NUNITFRAMEWORKBIN,\n            NUNITFRAMEWORKLEGACYBIN,\n            NUNITLITEBIN\n        };\n        foreach (var dir in directories)\n        {\n            foreach (var runtime in LibraryFrameworks)\n            {\n                var targetDir = imageBinDir + Directory(runtime);\n                var sourceDir = Directory(dir) + Directory(runtime);\n                CreateDirectory(targetDir);\n                Information(\"Created directory \" + targetDir.ToString());\n                foreach (FilePath file in FrameworkFiles)\n                {\n                    var sourcePath = sourceDir + File(file.FullPath);\n                    if (FileExists(sourcePath))\n                        CopyFileToDirectory(sourcePath, targetDir);\n                }\n                Information(\"Files copied from \" + sourceDir.ToString() + \" to \" + targetDir.ToString());\n                var schemaPath = sourceDir + Directory(\"Schemas\");\n                if (DirectoryExists(schemaPath))\n                {\n                    CopyDirectory(sourceDir, targetDir);\n                }\n            }\n        }    \n        Information(\"Finished copying framework files\");\n        foreach (var dir in RuntimeFrameworks)\n        {\n            var targetDir = imageBinDir + Directory(dir);\n            var sourceDir = NUNITLITERUNNERBIN + Directory(dir);\n            Information(\"Copying \" + sourceDir.ToString() + \" to \" + targetDir.ToString());\n            CopyDirectory(sourceDir, targetDir);\n        }\n    });\n\nTask(\"PackageFramework\")\n    .Description(\"Creates NuGet packages of the framework\")\n    .IsDependentOn(\"CreateImage\")\n    .Does(() =>\n    {\n        CreateDirectory(PACKAGE_DIR);\n\n        var settings = new NuGetPackSettings\n        {\n            Version = packageVersion,\n            BasePath = CurrentImageDir,\n            OutputDirectory = PACKAGE_DIR,\n            Symbols = true,\n            // snupkg is not yet supported by Cake, https://github.com/cake-build/cake/issues/2362\n            ArgumentCustomization = args => args.Append(\"-SymbolPackageFormat snupkg\")\n        };\n\n        NuGetPack(\"nuget/framework/nunit.nuspec\", settings);\n        NuGetPack(\"nuget/nunitlite/nunitlite.nuspec\", settings);\n    });\n\nTask(\"PackageZip\")\n    .Description(\"Creates a ZIP file of the framework\")\n    .IsDependentOn(\"CreateImage\")\n    .Does(() =>\n    {\n        CreateDirectory(PACKAGE_DIR);\n\n        var zipFiles = GetFiles(CurrentImageDir + \"*.*\");\n        foreach (var framework in LibraryFrameworks)\n            zipFiles += GetFiles(CurrentImageDir + \"bin/\"+ framework + \"/**/*.*\");\n        Zip(CurrentImageDir, File(ZIP_PACKAGE), zipFiles);\n    });\n\nTask(\"SignPackages\")\n    .Description(\"Signs the NuGet packages\")\n    .IsDependentOn(\"PackageFramework\")\n    .Does(() =>\n    {\n        // Get the secret.\n        var secret = EnvironmentVariable(\"SIGNING_SECRET\");\n        if(string.IsNullOrWhiteSpace(secret)) {\n            throw new InvalidOperationException(\"Could not resolve signing secret.\");\n        }\n\n        // Get the user.\n        var user = EnvironmentVariable(\"SIGNING_USER\");\n        if(string.IsNullOrWhiteSpace(user)) {\n            throw new InvalidOperationException(\"Could not resolve signing user.\");\n        }\n\n        var signClientPath = Context.Tools.Resolve(\"SignClient.exe\") ?? Context.Tools.Resolve(\"SignClient\") ?? throw new Exception(\"Failed to locate sign tool\");\n\n        var settings = File(\"./signclient.json\");\n\n        // Get the files to sign.\n        var files = GetFiles(string.Concat(PACKAGE_DIR, \"*.*nupkg\"));\n\n        foreach(var file in files)\n        {\n            Information(\"Signing {0}...\", file.FullPath);\n\n            // Build the argument list.\n            var arguments = new ProcessArgumentBuilder()\n                .Append(\"sign\")\n                .AppendSwitchQuoted(\"-c\", MakeAbsolute(settings.Path).FullPath)\n                .AppendSwitchQuoted(\"-i\", MakeAbsolute(file).FullPath)\n                .AppendSwitchQuotedSecret(\"-s\", secret)\n                .AppendSwitchQuotedSecret(\"-r\", user)\n                .AppendSwitchQuoted(\"-n\", \"NUnit.org\")\n                .AppendSwitchQuoted(\"-d\", \"NUnit is a unit-testing framework for all .NET languages.\")\n                .AppendSwitchQuoted(\"-u\", \"https://nunit.org/\");\n\n            // Sign the binary.\n            var result = StartProcess(signClientPath.FullPath, new ProcessSettings {  Arguments = arguments });\n            if(result != 0)\n            {\n                // We should not recover from this.\n                throw new InvalidOperationException(\"Signing failed!\");\n            }\n        }\n    });\n\n//////////////////////////////////////////////////////////////////////\n// SETUP AND TEARDOWN TASKS\n//////////////////////////////////////////////////////////////////////\n\nTeardown(context => CheckForError(ref ErrorDetail));\n\n//////////////////////////////////////////////////////////////////////\n// HELPER METHODS - GENERAL\n//////////////////////////////////////////////////////////////////////\n\nvoid CheckForError(ref List<string> errorDetail)\n{\n    if(errorDetail.Count != 0)\n    {\n        var copyError = new List<string>();\n        copyError = errorDetail.Select(s => s).ToList();\n        errorDetail.Clear();\n        throw new Exception(\"One or more unit tests failed, breaking the build.\\n\"\n                              + copyError.Aggregate((x,y) => x + \"\\n\" + y));\n    }\n}\n\n//////////////////////////////////////////////////////////////////////\n// HELPER METHODS - TEST\n//////////////////////////////////////////////////////////////////////\n\nFilePath GetResultXmlPath(string testAssembly, string framework)\n{\n    var assemblyName = System.IO.Path.GetFileNameWithoutExtension(testAssembly);\n\n    CreateDirectory($@\"test-results\\{framework}\");\n\n    return MakeAbsolute(new FilePath($@\"test-results\\{framework}\\{assemblyName}.xml\"));\n}\n\nvoid RunNUnitTests(DirectoryPath workingDir, string testAssembly, string framework, ref List<string> errorDetail)\n{\n    try\n    {\n        var path = workingDir.CombineWithFilePath(testAssembly);\n\n        var settings = new NUnit3Settings();\n        settings.Results = new[] { new NUnit3Result { FileName = GetResultXmlPath(testAssembly, framework) } };\n\n        if (!IsRunningOnWindows())\n            settings.Process = NUnit3ProcessOption.InProcess;\n\n        NUnit3(path.ToString(), settings);\n    }\n    catch(CakeException ce)\n    {\n        errorDetail.Add(string.Format(\"{0}: {1}\", framework, ce.Message));\n    }\n}\n\nvoid RunTest(FilePath exePath, DirectoryPath workingDir, string framework, ref List<string> errorDetail)\n{\n    RunTest(exePath, workingDir, null, GetResultXmlPath(exePath.FullPath, framework), framework, ref errorDetail);\n}\n\nvoid RunTest(FilePath exePath, DirectoryPath workingDir, string arguments, FilePath resultFile, string framework, ref List<string> errorDetail)\n{\n    int rc = StartProcess(\n        MakeAbsolute(exePath),\n        new ProcessSettings\n        {\n            Arguments = new ProcessArgumentBuilder()\n                .Append(arguments)\n                .AppendSwitchQuoted(\"--result\", \":\", resultFile.FullPath)\n                .Render(),\n            WorkingDirectory = workingDir\n        });\n\n    if (rc > 0)\n        errorDetail.Add(string.Format(\"{0}: {1} tests failed\", framework, rc));\n    else if (rc < 0)\n        errorDetail.Add(string.Format(\"{0} returned rc = {1}\", exePath, rc));\n}\n\nvoid RunDotnetCoreTests(FilePath exePath, DirectoryPath workingDir, string framework, ref List<string> errorDetail)\n{\n    RunDotnetCoreTests(exePath, workingDir, null, framework, GetResultXmlPath(exePath.FullPath, framework), ref errorDetail);\n}\n\nvoid RunDotnetCoreTests(FilePath exePath, DirectoryPath workingDir, string arguments, string framework, FilePath resultFile, ref List<string> errorDetail)\n{\n    if (!FileExists(exePath))\n    {\n        Information(string.Format(\"{0}: {1} not found\", framework, exePath));\n        return;\n    }\n\n    int rc = StartProcess(\n        \"dotnet\",\n        new ProcessSettings\n        {\n            Arguments = new ProcessArgumentBuilder()\n                .AppendQuoted(exePath.FullPath)\n                .Append(arguments)\n                .AppendSwitchQuoted(\"--result\", \":\", resultFile.FullPath)\n                .Render(),\n            WorkingDirectory = workingDir\n        });\n\n    if (rc > 0)\n        errorDetail.Add(string.Format(\"{0}: {1} tests failed\", framework, rc));\n    else if (rc < 0)\n        errorDetail.Add(string.Format(\"{0} returned rc = {1}\", exePath, rc));\n}\n\nvoid PublishTestResults(string framework)\n{\n    if (EnvironmentVariable(\"TF_BUILD\", false))\n    {\n        Information(\"Publishing test results to Azure Pipelines\");\n        var fullTestRunTitle = framework;\n        var ciRunName = Argument<string>(\"test-run-name\");\n        if (!string.IsNullOrEmpty(ciRunName))\n            fullTestRunTitle += '/' + ciRunName;\n\n        AzurePipelines.Commands.PublishTestResults(new AzurePipelinesPublishTestResultsData\n        {\n            TestResultsFiles = GetFiles($@\"test-results\\{framework}\\*.xml\").ToList(),\n            TestRunTitle = fullTestRunTitle,\n            TestRunner = AzurePipelinesTestRunnerType.NUnit,\n            MergeTestResults = true,\n            PublishRunAttachments = true,\n            Configuration = configuration\n        });\n    }\n}\n\npublic static T WithRawArgument<T>(this T settings, string rawArgument) where T : Cake.Core.Tooling.ToolSettings\n{\n    if (settings == null) throw new ArgumentNullException(nameof(settings));\n\n    if (!string.IsNullOrEmpty(rawArgument))\n    {\n        var previousCustomizer = settings.ArgumentCustomization;\n        if (previousCustomizer != null)\n            settings.ArgumentCustomization = builder => previousCustomizer.Invoke(builder).Append(rawArgument);\n        else\n            settings.ArgumentCustomization = builder => builder.Append(rawArgument);\n    }\n\n    return settings;\n}\n\n//////////////////////////////////////////////////////////////////////\n// TASK TARGETS\n//////////////////////////////////////////////////////////////////////\n\nTask(\"Rebuild\")\n    .Description(\"Rebuilds all versions of the framework\")\n    .IsDependentOn(\"Clean\")\n    .IsDependentOn(\"Build\");\n\nTask(\"Test\")\n    .Description(\"Builds and tests all versions of the framework\")\n    .IsDependentOn(\"Build\")\n    .IsDependentOn(\"TestNetFramework\")\n    .IsDependentOn(\"TestNetCore\");\n\nTask(\"Package\")\n    .Description(\"Packages all versions of the framework\")\n    .IsDependentOn(\"CheckForError\")\n    .IsDependentOn(\"PackageFramework\")\n    .IsDependentOn(\"PackageZip\");\n\n\n\nTask(\"Default\")\n    .Description(\"Builds all versions of the framework\")\n    .IsDependentOn(\"Build\");\n\n//////////////////////////////////////////////////////////////////////\n// EXECUTION\n//////////////////////////////////////////////////////////////////////\n\nRunTarget(target);\n"
        },
        {
          "name": "build.cmd",
          "type": "blob",
          "size": 0.181640625,
          "content": "@echo off\nset DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1\nset DOTNET_CLI_TELEMETRY_OPTOUT=1\nset DOTNET_NOLOGO=1\n\ndotnet tool restore\nif %ERRORLEVEL% EQU 0 dotnet cake %1 %2 %3 %4 %5 %6 %7 %8 %9\n"
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 0.3115234375,
          "content": "$ErrorActionPreference = 'Stop'\n\nSet-Location -LiteralPath $PSScriptRoot\n\n$env:DOTNET_SKIP_FIRST_TIME_EXPERIENCE = '1'\n$env:DOTNET_CLI_TELEMETRY_OPTOUT = '1'\n$env:DOTNET_NOLOGO = '1'\n\ndotnet tool restore\nif ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }\n\ndotnet cake @args\nif ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.2138671875,
          "content": "#!/usr/bin/env bash\nset -euox pipefail\n\ncd \"$(dirname \"${BASH_SOURCE[0]}\")\"\n\nexport DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1\nexport DOTNET_CLI_TELEMETRY_OPTOUT=1\nexport DOTNET_NOLOGO=1\n\ndotnet tool restore\n\ndotnet cake \"$@\"\n"
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.107421875,
          "content": "{\n  \"sdk\": {\n    \"version\": \"9.0.100\",\n    \"allowPrerelease\": false,\n    \"rollForward\": \"latestFeature\"\n  }\n}\n"
        },
        {
          "name": "nuget",
          "type": "tree",
          "content": null
        },
        {
          "name": "nunit.sln",
          "type": "blob",
          "size": 11.033203125,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.4.33110.190\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"nunit.framework\", \"src\\NUnitFramework\\framework\\nunit.framework.csproj\", \"{B7753E96-F76B-4E9B-9071-47B16DB90FD6}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{5A163AE0-C741-4824-8250-E56E1B3DF68A}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.editorconfig = .editorconfig\n\t\t.gitattributes = .gitattributes\n\t\t.gitignore = .gitignore\n\t\t.runsettings = .runsettings\n\t\tbuild.cake = build.cake\n\t\tbuild.cmd = build.cmd\n\t\tbuild.ps1 = build.ps1\n\t\tBUILDING.md = BUILDING.md\n\t\tCHANGES.md = CHANGES.md\n\t\tCONTRIBUTING.md = CONTRIBUTING.md\n\t\tsrc\\NUnitFramework\\Directory.Build.props = src\\NUnitFramework\\Directory.Build.props\n\t\tsrc\\NUnitFramework\\Directory.Packages.props = src\\NUnitFramework\\Directory.Packages.props\n\t\tglobal.json = global.json\n\t\tLICENSE.txt = LICENSE.txt\n\t\tNOTICES.md = NOTICES.md\n\t\tNuGet.config = NuGet.config\n\t\tNUnit.sln.DotSettings = NUnit.sln.DotSettings\n\t\tREADME.md = README.md\n\t\tsrc\\NUnitFramework\\StyleCop.Analyzers.globalconfig = src\\NUnitFramework\\StyleCop.Analyzers.globalconfig\n\t\tTHIRD_PARTY_NOTICES.md = THIRD_PARTY_NOTICES.md\n\t\tTHIRD_PARTY_NOTICES_DEV.md = THIRD_PARTY_NOTICES_DEV.md\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"nunitlite\", \"src\\NUnitFramework\\nunitlite\\nunitlite.csproj\", \"{A77D9156-0C6E-47EE-A03C-C458BFF4F5BE}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"mock-assembly\", \"src\\NUnitFramework\\mock-assembly\\mock-assembly.csproj\", \"{AEFC558F-1829-4D42-B0DA-AB6B9BA636DA}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"slow-nunit-tests\", \"src\\NUnitFramework\\slow-tests\\slow-nunit-tests.csproj\", \"{D0FE501F-EFE6-4E44-B798-122D3D4ACE98}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"nunit.testdata\", \"src\\NUnitFramework\\testdata\\nunit.testdata.csproj\", \"{C17BD8D8-1A77-4568-9579-0528B801566A}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"nunit.framework.tests\", \"src\\NUnitFramework\\tests\\nunit.framework.tests.csproj\", \"{79683236-E036-462A-A79A-CA6731F19208}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"nunitlite.tests\", \"src\\NUnitFramework\\nunitlite.tests\\nunitlite.tests.csproj\", \"{834A2B6C-2CAC-4486-83BC-55F41EE476BA}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"nunitlite-runner\", \"src\\NUnitFramework\\nunitlite-runner\\nunitlite-runner.csproj\", \"{6EA77093-1AD4-4066-8CC2-C35E08FE8638}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"nuget\", \"nuget\", \"{863DEE19-B23F-4FA6-951A-A6304F91ED67}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"framework\", \"framework\", \"{CE68713C-2E19-43E8-9333-6ED817110D52}\"\n\tProjectSection(SolutionItems) = preProject\n\t\tnuget\\framework\\nunit.nuspec = nuget\\framework\\nunit.nuspec\n\t\tnuget\\framework\\NUnit.props = nuget\\framework\\NUnit.props\n\tEndProjectSection\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"nunitlite\", \"nunitlite\", \"{8D43A220-7FE8-4214-BBB4-08568B88C7AA}\"\n\tProjectSection(SolutionItems) = preProject\n\t\tnuget\\nunitlite\\nunitlite.nuspec = nuget\\nunitlite\\nunitlite.nuspec\n\tEndProjectSection\nEndProject\nProject(\"{6EC3EE1D-3C4E-46DD-8F32-0CC8E7565705}\") = \"nunit.testdata.fsharp\", \"src\\NUnitFramework\\testdata.fsharp\\nunit.testdata.fsharp.fsproj\", \"{9DF6B262-70E2-44E3-A436-3B65C7FD88DE}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"nunit.framework.benchmarks\", \"src\\NUnitFramework\\benchmarks\\nunit.framework.benchmarks\\nunit.framework.benchmarks.csproj\", \"{D0D08E09-8FF4-487D-AE61-C9CCCCA8CBB0}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"nunit.framework.legacy\", \"src\\NUnitFramework\\nunit.framework.legacy\\nunit.framework.legacy.csproj\", \"{C09BC425-D524-4F75-9BEF-1724B93789B6}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"nunit.framework.legacy.tests\", \"src\\NUnitFramework\\nunit.framework.legacy.tests\\nunit.framework.legacy.tests.csproj\", \"{59DC5039-5FCD-4C0C-AC92-7F06610136D8}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \".github\", \".github\", \"{AA246190-ECE1-479E-AB8D-12F5FB60BE8B}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"workflows\", \"workflows\", \"{8C31C709-FAC1-445C-BAD6-7FFFB3F1D39E}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.github\\workflows\\NUnit.CI.yml = .github\\workflows\\NUnit.CI.yml\n\t\t.github\\workflows\\NUnit.Myget.Publish.yml = .github\\workflows\\NUnit.Myget.Publish.yml\n\tEndProjectSection\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \".config\", \".config\", \"{08744334-2350-4885-B57E-347010A27ABB}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.config\\dotnet-tools.json = .config\\dotnet-tools.json\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"windows-tests\", \"src\\NUnitFramework\\windows-tests\\windows-tests.csproj\", \"{7C19F745-B5F0-4A3A-B545-1E1DF4FA1F78}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"CakeScripts\", \"CakeScripts\\CakeScripts.csproj\", \"{8A7B6926-0FDF-4AC7-9E78-BBAC01187414}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"CakeScripts.Tests\", \"CakeScripts.Tests\\CakeScripts.Tests.csproj\", \"{FCF45E25-C1CB-42E8-8E83-F7FCB818E8D3}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{B7753E96-F76B-4E9B-9071-47B16DB90FD6}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{B7753E96-F76B-4E9B-9071-47B16DB90FD6}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{B7753E96-F76B-4E9B-9071-47B16DB90FD6}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{B7753E96-F76B-4E9B-9071-47B16DB90FD6}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{A77D9156-0C6E-47EE-A03C-C458BFF4F5BE}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{A77D9156-0C6E-47EE-A03C-C458BFF4F5BE}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{A77D9156-0C6E-47EE-A03C-C458BFF4F5BE}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{A77D9156-0C6E-47EE-A03C-C458BFF4F5BE}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{AEFC558F-1829-4D42-B0DA-AB6B9BA636DA}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{AEFC558F-1829-4D42-B0DA-AB6B9BA636DA}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{AEFC558F-1829-4D42-B0DA-AB6B9BA636DA}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{AEFC558F-1829-4D42-B0DA-AB6B9BA636DA}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{D0FE501F-EFE6-4E44-B798-122D3D4ACE98}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{D0FE501F-EFE6-4E44-B798-122D3D4ACE98}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{D0FE501F-EFE6-4E44-B798-122D3D4ACE98}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{D0FE501F-EFE6-4E44-B798-122D3D4ACE98}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{C17BD8D8-1A77-4568-9579-0528B801566A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{C17BD8D8-1A77-4568-9579-0528B801566A}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{C17BD8D8-1A77-4568-9579-0528B801566A}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{C17BD8D8-1A77-4568-9579-0528B801566A}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{79683236-E036-462A-A79A-CA6731F19208}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{79683236-E036-462A-A79A-CA6731F19208}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{79683236-E036-462A-A79A-CA6731F19208}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{79683236-E036-462A-A79A-CA6731F19208}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{834A2B6C-2CAC-4486-83BC-55F41EE476BA}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{834A2B6C-2CAC-4486-83BC-55F41EE476BA}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{834A2B6C-2CAC-4486-83BC-55F41EE476BA}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{834A2B6C-2CAC-4486-83BC-55F41EE476BA}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{6EA77093-1AD4-4066-8CC2-C35E08FE8638}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{6EA77093-1AD4-4066-8CC2-C35E08FE8638}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{6EA77093-1AD4-4066-8CC2-C35E08FE8638}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{6EA77093-1AD4-4066-8CC2-C35E08FE8638}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{9DF6B262-70E2-44E3-A436-3B65C7FD88DE}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{9DF6B262-70E2-44E3-A436-3B65C7FD88DE}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{9DF6B262-70E2-44E3-A436-3B65C7FD88DE}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{9DF6B262-70E2-44E3-A436-3B65C7FD88DE}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{D0D08E09-8FF4-487D-AE61-C9CCCCA8CBB0}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{D0D08E09-8FF4-487D-AE61-C9CCCCA8CBB0}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{D0D08E09-8FF4-487D-AE61-C9CCCCA8CBB0}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{D0D08E09-8FF4-487D-AE61-C9CCCCA8CBB0}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{C09BC425-D524-4F75-9BEF-1724B93789B6}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{C09BC425-D524-4F75-9BEF-1724B93789B6}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{C09BC425-D524-4F75-9BEF-1724B93789B6}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{C09BC425-D524-4F75-9BEF-1724B93789B6}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{59DC5039-5FCD-4C0C-AC92-7F06610136D8}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{59DC5039-5FCD-4C0C-AC92-7F06610136D8}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{59DC5039-5FCD-4C0C-AC92-7F06610136D8}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{59DC5039-5FCD-4C0C-AC92-7F06610136D8}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{7C19F745-B5F0-4A3A-B545-1E1DF4FA1F78}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{7C19F745-B5F0-4A3A-B545-1E1DF4FA1F78}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{7C19F745-B5F0-4A3A-B545-1E1DF4FA1F78}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{7C19F745-B5F0-4A3A-B545-1E1DF4FA1F78}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{8A7B6926-0FDF-4AC7-9E78-BBAC01187414}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{8A7B6926-0FDF-4AC7-9E78-BBAC01187414}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{8A7B6926-0FDF-4AC7-9E78-BBAC01187414}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{8A7B6926-0FDF-4AC7-9E78-BBAC01187414}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{FCF45E25-C1CB-42E8-8E83-F7FCB818E8D3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{FCF45E25-C1CB-42E8-8E83-F7FCB818E8D3}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{FCF45E25-C1CB-42E8-8E83-F7FCB818E8D3}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{FCF45E25-C1CB-42E8-8E83-F7FCB818E8D3}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{863DEE19-B23F-4FA6-951A-A6304F91ED67} = {5A163AE0-C741-4824-8250-E56E1B3DF68A}\n\t\t{CE68713C-2E19-43E8-9333-6ED817110D52} = {863DEE19-B23F-4FA6-951A-A6304F91ED67}\n\t\t{8D43A220-7FE8-4214-BBB4-08568B88C7AA} = {863DEE19-B23F-4FA6-951A-A6304F91ED67}\n\t\t{AA246190-ECE1-479E-AB8D-12F5FB60BE8B} = {5A163AE0-C741-4824-8250-E56E1B3DF68A}\n\t\t{8C31C709-FAC1-445C-BAD6-7FFFB3F1D39E} = {AA246190-ECE1-479E-AB8D-12F5FB60BE8B}\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {E644AD96-B769-431B-BF0A-500AC32D2975}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "signclient.json",
          "type": "blob",
          "size": 0.37109375,
          "content": "{\n  \"SignClient\": {\n    \"AzureAd\": {\n      \"AADInstance\": \"https://login.microsoftonline.com/\",\n      \"ClientId\": \"c248d68a-ba6f-4aa9-8a68-71fe872063f8\",\n      \"TenantId\": \"16076fdc-fcc1-4a15-b1ca-32c9a255900e\"\n    },\n    \"Service\": {\n      \"Url\": \"https://codesign.dotnetfoundation.org/\",\n      \"ResourceId\": \"https://SignService/3c30251f-36f3-490b-a955-520addb85001\"\n    }\n  }\n}"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}