{
  "metadata": {
    "timestamp": 1736710885616,
    "page": 458,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "castleproject/Core",
      "stars": 2233,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.4287109375,
          "content": "root = true\n\n[*]\nindent_style = tab\n\n[*.csproj]\nindent_style = tab\nindent_size = 2\n\n[*.cs]\nindent_style = tab\nindent_size = 4\ncsharp_prefer_braces = true:suggestion\ndotnet_separate_import_directive_groups = true\ndotnet_sort_system_directives_first = true\ndotnet_style_qualification_for_event = false\ndotnet_style_qualification_for_field = false\ndotnet_style_qualification_for_method = false\ndotnet_style_qualification_for_property = false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.01171875,
          "content": "* text=auto\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3115234375,
          "content": "# User-specific files\n*.suo\n*.user\n.vs\n_ReSharper*/\n*.csproj.ReSharper\n\n# Build output\nbuild/\nbin/\nobj/\n\n# Unit test scratch file (for DictionaryAdapter tests) and test runner results\n/out.xml\n/NetCoreClrTestResults.xml\n/DesktopClrTestResults.xml\n/DesktopClrWeakNamedTestResults.xml\n/NetCoreClrWeakNamedTestResults.xml\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 28.8671875,
          "content": "# Castle Core Changelog\n\n## 5.2.0 (2024-08-30)\n\nEnhancements:\n- Two new generic method overloads `proxyGenerator.CreateClassProxy<TClass>([options], constructorArguments, interceptors)` (@backstromjoel, #636)\n- Allow specifying which attributes should always be copied to proxy class by adding attribute type to `AttributesToAlwaysReplicate`. Previously only non-inherited, with `Inherited=false`, attributes were copied. (@shoaibshakeel381, #633)\n- Support for C# 8+ [default interface methods](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/default-interface-methods) in interface and class proxies without target (@stakx, #661)\n- DynamicProxy's public API has been augmented with nullable reference type annotations (@stakx, #668)\n\nBugfixes:\n- `ArgumentException`: \"Could not find method overriding method\" with overridden class method having generic by-ref parameter (@stakx, #657)\n- `ArgumentException`: \"Cannot create an instance of `TEnum` because `Type.ContainsGenericParameters` is true\" caused by `Enum` constraint on method `out` parameter (@stakx, #658)\n\n## 5.1.1 (2022-12-30)\n\nBugfixes:\n- Proxies using records derived from a base generic record broken using .NET 6 compiler (@CesarD, #632)\n- Failure proxying type that has a non-inheritable custom attribute type applied where `null` argument is given for array parameter  (@stakx, #637)\n- Nested custom attribute types do not get replicated (@stakx, #638)\n\n## 5.1.0 (2022-08-02)\n\nEnhancements:\n- Support for covariant method returns (@stakx, #619)\n- Performance improvement with proxy type generation for class proxies (without target). Abstract class methods now reuse a predefined invocation type (like methods of interface proxies without target; see explanation below at version 5.0.0 enhancements) (@stakx, #626)\n\nBugfixes:\n- DynamicProxy emits invalid metadata for redeclared event (@stakx, #590)\n- Proxies using records with a base class broken using .NET 6 compiler (@ajcvickers, #601)\n- `MissingMethodException` when proxying interfaces containing sealed methods (@stakx, #621)\n\n## 5.0.0 (2022-05-11)\n\nEnhancements:\n- .NET 6.0 support (@Jevonius, #616)\n- .NET Standard 2.0 and 2.1 support (@lg2de, #485)\n- Non-intercepted methods on a class proxy with target are now forwarded to the target (@stakx, #571)\n- Significant performance improvements with proxy type generation for interface proxies without target. Up until now, DynamicProxy generated a separate `IInvocation` implementation type for every single proxied method &ndash; it is now able to reuse a single predefined type in many cases, thereby reducing the total amount of dynamic type generation. (@stakx, #573)\n\nBugfixes:\n- Generic method with differently named generic arguments to parent throws `KeyNotFoundException` (@stakx, #106)\n- Proxying certain `[Serializable]` classes produces proxy types that fail PEVerify test (@stakx, #367)\n- `private protected` methods are not intercepted (@CrispyDrone, #535)\n- `System.UIntPtr` unsupported (@stakx, #546)\n- DynamicProxy generates two modules when proceeding from a class proxy's protected method to the target, causing an `InvalidOperationException` when saving the generated assembly to disk (@stakx, #569)\n- Upgrade log4net to v2.0.13 (@jonorossi, @stakx, @dschwartzni, #574, #605)\n\nDeprecations:\n- Removed support for the .NET Framework < 4.6.2 and .NET Standard 1.x. (@stakx, #495, #496; @Jevonius, #614)\n- Removed support for Code Access Security (CAS). (@stakx, #502)\n- Removed support for Remoting. This library no longer defines any types deriving from `MarshalByRefObject`, and `ProxyUtil.IsProxy` (which used to recognize remoting/\"transparent\" proxies) now tests only for DynamicProxy proxies. (@stakx, #507)\n- The following public members have been removed:\n  - `Castle.Core.Internal.CollectionExtensions` (class)\n  - `Castle.Core.Internal.Lock` (class) along with all related types and methods\n  - `Castle.Core.Internal.PermissionUtil.IsGranted` (method)\n  - `Castle.Core.Pair<,>` (type). Use `System.ValueTuple<,>` or `System.Tuple<,>` instead.\n  - all type members in `Castle.DynamicProxy.ModuleScope` that gave direct access to DynamicProxy's type cache and `ModuleBuilder`s. Only `SaveAssembly`, `LoadAssemblyIntoCache`, and members supporting these two facilities are left public.\n  - almost all types and type members in the `Castle.DynamicProxy.*` sub-namespaces, as most of them are intended for internal use only.\n  - DynamicProxy's custom exception types have been replaced by standard BCL exceptions (where appropriate), and by a single `DynamicProxyException` type for internal DynamicProxy errors.\n\n## 4.4.1 (2020-05-06)\n\nBugfixes:\n- Prevent method name collisions when a proxy type implements more than two identically named interfaces having one or more identically named methods each. Name collisions are avoided by including the declaring types' namespaces in the proxy type's method names. (@stakx, #469)\n- Reduce lock contention while generating new proxy types which previously blocked new proxy instances (@tangdf, #484)\n- Fix mixins where proxy constructor fields were ordered differently to interfaces because of different case comparisons (@zapov, #475)\n- Fix proxy generation for types having only a `private protected` constructor (@mriehm, #491)\n\n## 4.4.0 (2019-04-05)\n\nEnhancements:\n- Added trace logging level below Debug; maps to Trace in log4net/NLog, and Verbose in Serilog (@pi3k14, #404)\n- Recognize read-only parameters by the `In` modreq (@zvirja, #406)\n- DictionaryAdapter: Exposed GetAdapter overloads with NameValueCollection parameter in .NET Standard (@rzontar, #423)\n- Ability to add delegate mixins to proxies using `ProxyGenerationOptions.AddDelegate[Type]Mixin`. You can bind to the mixed-in `Invoke` methods on the proxy using `ProxyUtil.CreateDelegateToMixin`. (@stakx, #436)\n- New `IInvocation.CaptureProceedInfo()` method to enable better implementations of asynchronous interceptors (@stakx, #439)\n\nDeprecations:\n- The API surrounding `Lock` has been deprecated. This consists of the members listed below. Consider using the Base Class Library's `System.Threading.ReaderWriterLockSlim` instead. (@stakx, #391)\n   - `Castle.Core.Internal.Lock` (class)\n   - `Castle.Core.Internal.ILockHolder` (interface)\n   - `Castle.Core.Internal.IUpgradeableLockHolder` (interface)\n- You should no longer manually emit types into DynamicProxy's dynamic assembly. For this reason, the following member has been deprecated. (@stakx, #445)\n   - `Castle.DynamicProxy.ModuleScope.DefineType` (method)\n- The proxy type cache in `ModuleScope` should no longer be accessed directly. For this reason, the members listed below have been deprecated. (@stakx, #391)\n   - `Castle.DynamicProxy.ModuleScope.Lock` (property)\n   - `Castle.DynamicProxy.ModuleScope.GetFromCache` (method)\n   - `Castle.DynamicProxy.ModuleScope.RegisterInCache` (method)\n   - `Castle.DynamicProxy.Generators.BaseProxyGenerator.AddToCache` (method)\n   - `Castle.DynamicProxy.Generators.BaseProxyGenerator.GetFromCache` (method)\n   - `Castle.DynamicProxy.Generators.CacheKey` (class)\n   - `Castle.DynamicProxy.Serialization.CacheMappingsAttribute.ApplyTo` (method)\n   - `Castle.DynamicProxy.Serialization.CacheMappingsAttribute.GetDeserializedMappings` (method)\n\n## 4.3.1 (2018-06-21)\n\nEnhancements:\n - Use shared read locking to reduce lock contention in InvocationHelper and ProxyUtil (@TimLovellSmith, #377)\n\nBugfixes:\n- Prevent interceptors from being able to modify `in` parameters (@stakx, #370)\n- Make default value replication of optional parameters more tolerant of default values that are represented in metadata with a mismatched type (@stakx, #371)\n- Fix a concurrency issue (writing without taking a write lock first) in `BaseProxyGenerator.ObtainProxyType` (@stakx, #383)\n\nDeprecations:\n- `Castle.DynamicProxy.Generators.Emitters.ArgumentsUtil.IsAnyByRef` (@stakx, #370)\n\n## 4.3.0 (2018-06-07)\n\nEnhancements:\n- Added .NET Standard/.NET Core support for NLog (@snakefoot, #200)\n- Added .NET Standard/.NET Core support for log4net (@snakefoot, #201)\n- DynamicProxy supported C# `in` parameter modifiers only on the .NET Framework up until now. Adding .NET Standard 1.5 as an additional target to the NuGet package makes them work on .NET Core, too (@stakx, #339)\n- Replicate custom attributes on constructor parameters in the generated proxy type constructors to fulfill introspection of constructors. This does not change the proxying behavior. (@stakx, #341)\n- Improve performance of InvocationHelper cache lookups (@tangdf, #358)\n- Improve fidelity of default value replication of optional parameters to fulfill inspection of the generated proxies. This does not change the proxying behavior. (@stakx, #356)\n- Improve cache performance of MethodFinder.GetAllInstanceMethods (@tangdf, #357)\n\nBugfixes:\n- Fix Castle.Services.Logging.Log4netIntegration assembly file name casing which breaks on Linux (@beginor, #324)\n- Fix Castle.DynamicProxy.Generators.AttributesToAvoidReplicating not being thread safe (InvalidOperationException \"Collection was modified; enumeration operation may not execute.\") (@BrunoJuchli, #334)\n- Fix TraceLoggerFactory to allow specifying the default logger level (@acjh, #342)\n- Ensure that DynamicProxy doesn't create invalid dynamic assemblies when proxying types from non-strong-named assemblies (@stakx, #327)\n- Fix interceptor selectors being passed `System.RuntimeType` for class proxies instead of the target type (@stakx, #359)\n- Replace NullReferenceException with descriptive one thrown when interceptors swallow exceptions and cause a null value type to be returned (@jonorossi, #85)\n\n## 4.2.1 (2017-10-11)\n\nBugfixes:\n- Add missing equality checks in `MethodSignatureComparer.EqualSignatureTypes` to fix `TypeLoadException`s (\"Method does not have an implementation\") (@stakx, #310)\n- Add missing XML documentation files to NuGet packages (@fir3pho3nixx, #312)\n\n## 4.2.0 (2017-09-28)\n\nEnhancements:\n- Add IProxyTargetAccessor.DynProxySetTarget to set the target of a proxy (@yallie, #293)\n- Internal dynamic proxy fields are now private instead of public (@spencercw, #260)\n\nBugfixes:\n- Make ProxyUtil.IsAccessible(MethodBase) take into account declaring type's accessibility so it doesn't report false negatives for e.g. public methods in inaccessible classes. (@stakx, #289)\n- Fix InvalidCastException calling IChangeProxyTarget.ChangeProxyTarget proxying generic interfaces (@yallie, #293)\n- Ignore minor/patch level version for AssemblyVersionAttribute as this creates binding errors for downstream libraries (@fir3pho3nixx, #288)\n- Fix DictionaryAdapter firing NotifyPropertyChang(ed/ing) events after CancelEdit (@Lakritzator, #299)\n- Fix ArgumentException when overriding method with nested generics (@BitWizJason, #297)\n- Explicit package versioning applied within solution to avoid maligned NuGet upgrades for lock step versioned packages. (@fir3pho3nixx, #292)\n\nDeprecations:\n- IChangeProxyTarget.ChangeProxyTarget is deprecated in favor of IProxyTargetAccessor.DynProxySetTarget (@yallie, #293)\n\n## 4.1.1 (2017-07-12)\n\nBugfixes:\n- Prevent member name collision when proxy implements same generic interface more than twice (@stakx, #88)\n- Fix incorrect replication (reversed order) of custom modifiers (modopts and modreqs) on the CLR, does not work yet on Mono (@stakx, #277)\n- Fix COM interface proxy error case throwing exceptions trying to release null pointer from QueryInterface (@stakx, #281)\n\n## 4.1.0 (2017-06-11)\n\nBreaking Changes:\n- Remove AllowPartiallyTrustedCallersAttribute, which wasn't defined by default (@fir3pho3nixx, #241)\n- Upgrade log4net to v2.0.8 (@fir3pho3nixx, #241)\n\nEnhancements:\n- Add ProxyUtil.IsAccessible to check if a method is accessible to DynamicProxyGenAssembly2 (Blair Conrad, #235)\n- Refactor build engineering to support AppVeyor and TravisCI (@fir3pho3nixx, #241)\n\nBugfixes:\n- Fix order of class proxy constructor arguments when using multiple mixins (@sebastienros, #230)\n- Fix dependency on \"System.ComponentModel.TypeConverter\" NuGet package version that does not exist (#239)\n- Fix ParamArrayAttribute not being replicated in proxy (@stakx, #121)\n- Fix System.Net.Mail.SmtpClient is obsolete on Mono warning (#254)\n\n## 4.0.0 (2017-01-25)\n\nBreaking Changes:\n- Update to NLog 4.4.1 and remove beta .NET Core support for NLog (#228)\n- Update to log4net 2.0.7 (#229)\n\nBugfixes:\n- Fix CustomAttributeInfo.FromExpression for VB.NET (@thomaslevesque, #223)\n\n## 4.0.0-beta002 (2016-10-28)\n\nBreaking Changes:\n- Rework Serilog integration to accept an ILogger rather than a LoggerConfiguration  to work correctly with Serilog (#142, #211)\n- Remove obsolete property `AttributesToAddToGeneratedTypes` from `ProxyGenerationOptions` (#219)\n- Change type of `ProxyGenerationOptions.AdditionalAttributes` to `IList<CustomAttributeInfo>` (#219)\n- Remove `IAttributeDisassembler` which is no longer necessary (#219)\n\nEnhancements:\n- Add IProxyGenerator interface for the ProxyGenerator class (#215)\n- Improve default list of attributes to avoid replicating. Code Access Security attributes and MarshalAsAttribute will no longer be replicated (#221)\n\nBugfixes:\n- Fix building on Mono 4.6.1\n- Different attributes in `ProxyGenerationOptions.AdditionalAttributes` now generates different proxy types (#219)\n\n## 4.0.0-beta001 (2016-07-17)\n\nBreaking Changes:\n- Update to log4net 1.2.15/2.0.5 (#199)\n- Update to NLog 4.4.0-beta13 (#199)\n- Update to Serilog 2.0.0 (#199)\n\nEnhancements:\n- .NET Core 1.0 and .NET Standard 1.3 support (Jonathon Rossi, Jeremy Meng)\n- Restore DynamicDictionary class\n\nBugfixes:\n- Fix target framework moniker in NuGet package for .NET Core (#174)\n\n## 4.0.0-alpha001 (2016-04-07)\n\nBreaking Changes:\n- Remove all Silverlight support (#100, #150)\n- Remove DynamicProxy's RemotableInvocation and remoting support for invocations (#110, #65)\n\nEnhancements:\n- .NET Core DNX and dotnet5.4 support via feature conditional compilation (Jonathon Rossi, Jeremy Meng)\n- Build script improvements and consolidate version numbers (Blair Conrad, #75, #152, #153)\n\nBugfixes:\n- Fix 'System.ArgumentException: Constant does not match the defined type' with optional, nullable enum method parameters (Daniel Yankowsky, #141, #149)\n- Fix proxy generation hook notification for virtual but final methods (Axel Heer, #148)\n- Fix InvalidCastException with custom attribute having an enum array parameter with non-int enum (@csharper2010, #104, #105)\n- Update to Mono 4.0.2 and improve Mono support (#79, #95, #102)\n- Fix 'System.ArrayTypeMismatchException: Source array type cannot be assigned to destination array type' on Mono (#81)\n- Fix 'System.ArgumentException: System.Decimal is not a supported constant type' with optional method parameters (@fknx, #87, #91)\n- Fix ProxyGenerator cache does not take into account AdditionalAttributes (@cmerat, #77, #78)\n- Fix Castle.Services.Logging.SerilogIntegration.dll missing some assembly info attributes (@imzshh, #20, #82)\n\n## 3.3.3 (2014-11-06)\n- Fix Serilog integration modifies LoggerConfiguration.MinimumLevel (#70)\n- Add SourceContext to the Serilog logger (@KevivL, #69)\n\n## 3.3.2 (2014-11-03)\n- fixed #66 - SerilogLogger implementation bug where exceptions were passed through incorrectly\n\n## 3.3.1 (2014-09-10)\n- implemented #61 - Added support for Serilog - contributed by Russell J Baker (@ruba1987)\n\n## 3.3.0 (2014-04-27)\n- implemented #51 - removed abandoned projects: Binder, Pagination, Validator\n- implemented #49 - build NuGet and Zip packages from TeamCity - contributed by Blair Conrad (@blairconrad)\n- implemented #42 - move complicated BuildInternalsVisibleMessageForType method out of DynamicProxyBuilder - contributed by Blair Conrad (@blairconrad)\n- fixed #47 - Calling DynamicProxy proxy methods with multidimensional array parameters - contributed by  Ed Parcell (@edparcell)\n- fixed #44 - DictionaryAdapter FetchAttribute on type has no effect\n- fixed #34 and #39 - inaccessible type parameters should give better error messages - contributed by Blair Conrad (@blairconrad)\n\n## 3.2.2 (2013-11-30)\n- fixed #35 - ParameterBuilder.SetConstant fails when using a default value of null - contributed by (@jonasro)\n\n## 3.2.1 (2013-10-05)\n- fixed #32 - Improve configuration of SmtpClient in sync sending - contributed by Artur Dorochowicz (@ArturDorochowicz)\n- fixed #31 - [DynamicProxy] Preserve DefaultValues of proxied method's parameters (in .NET 4.5)\n- fixed #30 - tailoring InternalsVisibleTo message based on assembly of inaccessible type - contributed by Blair Conrad (@blairconrad)\n- fixed #27 - Allow dynamic proxy of generic interfaces which have generic methods, under Mono 2.10.8 and Mono 3.0.6 - contributed by Iain Ballard (@i-e-b)\n- fixed #26 - Proxy of COM class issue, reference count incremented - contributed by Jean-Claude Viau (@jcviau)\n- fixed DYNPROXY-188 - CreateInterfaceProxyWithoutTarget fails with interface containing member with 'ref UIntPtr' - contributed by Pier Janssen (@Pjanssen)\n- fixed DYNPROXY-186 - .Net remoting (transparent proxy) cannot be proxied - contributed by Jean-Claude Viau (@jcviau)\n- fixed DYNPROXY-185 - ProxyUtil.GetUnproxiedInstance returns proxy object for ClassProxyWithTarget instead of its target - contributed by Dmitry Xlestkov (@d-s-x)\n\n## 3.2.0 (2013-02-16)\n- fixed DYNPROXY-179 - Exception when creating a generic proxy (from cache)\n- fixed DYNPROXY-175 - invalid CompositionInvocation type used when code uses interface proxies with and without InterceptorSelector\n\n## 3.1.0 (2012-08-05)\n- fixed DYNPROXY-174 - Unable to cast object of type 'System.Collections.ObjectModel.ReadOnlyCollection\\`1[System.Reflection.CustomAttributeTypedArgument]' to type 'System.Array'\n\n## 3.1.0 RC (2012-07-08)\n- support multiple inheritance of DA attributes on interfaces.\n- BREAKING CHANGE: removed propagated child notifications as it violated INotifyPropertyChanged contract\n- improved DictionaryAdapter performance\n- generalized IBindingList support for DictionaryAdapters\n- added reference support to XmlAdapter\n- BREAKING CHANGE: refactored XPathAdapter into XmlAdapter with much more flexibility to support other input like XLinq\n- implemented CORE-43 - Add option to skip configuring log4net/nlog\n- fixed CORE-44 - NLog logger does not preserver call site info\n- fixed DYNPROXY-171 - PEVerify error on generic method definition\n- fixed DYNPROXY-170 - Calls to properties inside non-intercepted methods are not forwarded to target object (regression from v2.5)\n- fixed DYNPROXY-169 - Support IChangeProxyTarget on additional interfaces and mixins when using CreateInterfaceProxyWithTargetInterface\n\n## 3.0.0 (2011-12-13)\n- no major changes since RC\n\n## 3.0.0 RC 1 (2011-11-20)\n- Applied Jeff Sharps patch that refactored Xml DictionaryAdapter to improve maintainability and enable more complete functionality\n- fixed DYNPROXY-165 - Object.GetType() and Object.MemberwiseClone() should be ignored and not reported as non-interceptable to IProxyGenerationHook\n- fixed DYNPROXY-164 - Invalid Proxy type generated when there are more than one base class generic constraints\n- fixed DYNPROXY-162 - ref or out parameters can not be passed back if proxied method throw an exception\n\n## 3.0.0 beta 1 (2011-08-14)\n\nBreaking Changes:\n* Removed overloads of logging methods that were taking format string from ILogger and ILogger and IExtendedLogger and didn't have word Format in their name.\n  * For example:\n    * void Error(string format, params object[] args); // was removed\n    * void ErrorFormat(string format, params object[] args); //use this one instead\n  * impact - low\n  * fixability - medium\n  * description - To minimize confusion and duplication those methods were removed.\n  * fix - Use methods that have explicit \"Format\" word in their name and same signature.\n* Removed WebLogger and WebLoggerFactory\n  * impact - low\n  * fixability - medium\n  * description - To minimize management overhead the classes were removed so that only single Client Profile version of Castle.Core can be distributed.\n  * fix - You can use NLog or Log4Net web logger integration, or reuse implementation of existing web logger and use it as a custom logger.\n* Removed obsolete overload of ProxyGenerator.CreateClassProxy\n  * impact - low\n  * fixability - trivial\n  * description - Deprecated overload of ProxyGenerator.CreateClassProxy was removed to keep the method consistent with other methods and to remove confusion\n  * fix - whenever removed overload was used, use one of the other overloads.\n* IProxyGenerationHook.NonVirtualMemberNotification method was renamed\n  * impact - high\n  * fixability - easy\n  * description - to accommodate class proxies with target method NonVirtualMemberNotification on IProxyGenerationHook type was renamed to more accurate\n    NonProxyableMemberNotification \tsince for class proxies with target not just methods but also fields and other member that break the abstraction will\n    be passed to this method.\n  * fix - whenever NonVirtualMemberNotification is used/implemented change the method name to\n\t  NonProxyableMemberNotification. Implementors should also accommodate possibility that not\n\t  only MethodInfos will be passed as method's second parameter.\n* DynamicProxy will now allow to intercept members of System.Object\n  * impact - very low\n  * fixability - easy\n  * description - to allow scenarios like mocking of System.Object members, DynamicProxy will not\n\t  disallow proxying of these methods anymore. AllMethodsHook (default IProxyGenerationHook)\n\t  will still filter them out though.\n  * fix - whenever custom IProxyGenerationHook is used, user should account for System.Object's\n\t  members being now passed to ShouldInterceptMethod and NonVirtualMemberNotification methods\n\t  and if necessary update the code to handle them appropriately.\n\nBugfixes:\n- fixed CORE-37 - TAB characters in the XML Configuration of a component parameter is read as String.Empty\n- fixed DYNPROXY-161 - Strong Named DynamicProxy Assembly Not Available in Silverlight\n- fixed DYNPROXY-159 - Sorting MemberInfo array for serialization has side effects\n- fixed DYNPROXY-158 - Can't create class proxy with target and without target in same ProxyGenerator\n- fixed DYNPROXY-153 - When proxying a generic interface which has an interface as GenericType . No proxy can be created\n- fixed DYNPROXY-151 - Cast error when using attributes \n- implemented CORE-33 - Add lazy logging\n- implemented DYNPROXY-156 - Provide mechanism for interceptors to implement retry logic\n- removed obsolete members from ILogger and its implementations\n\n## 2.5.2 (2010-11-15)\n- fixed DYNPROXY-150 - Finalizer should not be proxied\n- implemented DYNPROXY-149 - Make AllMethodsHook members virtual so it can be used as a base class\n- fixed DYNPROXY-147 - Can't create class proxies with two non-public methods having same argument types but different return type\n- fixed DYNPROXY-145 Unable to proxy System.Threading.SynchronizationContext (.NET 4.0)\n- fixed DYNPROXY-144 - params argument not supported in constructor\n- fixed DYNPROXY-143 - Permit call to reach \"non-proxied\" methods of inherited interfaces\n- implemented DYNPROXY-139 - Better error message \n- fixed DYNPROXY-133 - Debug assertion in ClassProxyInstanceContributor fails when proxying ISerializable with an explicit implementation of GetObjectData\n- fixed CORE-32 - Determining if permission is granted via PermissionUtil does not work in .NET 4\n- applied patch by Alwin Meijs - ExtendedLog4netFactory can be configured with a stream from for example an embedded log4net xml config\n- Upgraded NLog to 2.0 Beta 1\n- Added DefaultXmlSerializer to bridge XPathAdapter with standard Xml Serialization.\n- XPathAdapter for DictionaryAdapter added IXPathSerializer to provide hooks for custom serialization.\n\n## 2.5.1 (2010-09-21)\n- Interface proxy with target Interface now accepts null as a valid target value (which can be replaced at a later stage).\n- DictionaryAdapter behavior overrides are now ordered with all other behaviors\n- BREAKING CHANGE: removed web logger so that by default Castle.Core works in .NET 4 client profile\n- added parameter to ModuleScope disabling usage of signed modules. This is to workaround issue DYNPROXY-134. Also a descriptive exception message is being thrown now when the issue is detected.\n- Added IDictionaryBehaviorBuilder to allow grouping behaviors\n- Added GenericDictionaryAdapter to simplify generic value sources\n- fixed issue DYNPROXY-138 - Error message missing space\n- fixed false positive where DynamicProxy would not let you proxy interface with target interface when target object was a COM object.\n- fixed ReflectionBasedDictionaryAdapter when using indexed properties\n\n## 2.5.0 (2010-08-21)\n- DynamicProxy will now not replicate non-public attribute types\n- Applied patch from Kenneth Siewers Møller which adds parameterless constructor to DefaultSmtpSender implementation, to be able to configure the inner SmtpClient from the application configuration file (system.net.smtp).\n- added support for .NET 4 and Silverlight 4, updated solution to VisualStudio 2010\n- Removed obsolete overload of CreateClassProxy\n- Added class proxy with target\n- Added ability to intercept explicitly implemented generic interface methods on class proxy.\n- DynamicProxy does not disallow intercepting members of System.Object anymore. AllMethodsHook will still filter them out though.\n- Added ability to intercept explicitly implemented interface members on class proxy. Does not support generic members.\n- Merged DynamicProxy into Core binary\n- fixed DYNPROXY-ISSUE-132 - \"MetaProperty equals implementation incorrect\"\n- Fixed bug in DiagnosticsLoggerTestCase, where when running as non-admin, the teardown will throw SecurityException (contributed by maxild)\n- Split IoC specific classes into Castle.Windsor project\n- Merged logging services solution\n- Merged DynamicProxy project\n\n## 1.2.0 (2010-01-11)\n- Added IEmailSender interface and its default implementation\n\n## 1.2.0 beta (2009-12-04)\n- BREAKING CHANGE - added ChangeProxyTarget method to IChangeProxyTarget interface\n- added docs to IChangeProxyTarget methods\n- Fixed DYNPROXY-ISSUE-108 - Obtaining replicated custom attributes on proxy may fail when property setter throws exception on default value\n- Moved custom attribute replication from CustomAttributeUtil to new interface - IAttributeDisassembler\n- Exposed IAttributeDisassembler via ProxyGenerationOptions, so that users can plug their implementation for some convoluted scenarios. (for Silverlight)\n- Moved IInterceptorSelector from Dynamic Proxy to Core (IOC-ISSUE-156)\n\n## 1.1.0 (2009-05-04)\n- Applied Eric Hauser's patch fixing CORE-ISSUE-22\n  \"Support for environment variables in resource URI\"\n- Applied Gauthier Segay's patch fixing CORE-ISSUE-20\n  \"Castle.Core.Tests won't build via nant because it use TraceContext without referencing System.Web.dll\"\n- Added simple interface to ComponentModel to make optional properties required. \n- Applied Mark's -- <mwatts42@gmail.com> -- patch that changes \n  the Core to support being compiled for Silverlight 2\n- Applied Louis DeJardin's patch adding TraceLogger as a new logger implementation\n- Applied Chris Bilson's patch fixing CORE-15\n  \"WebLogger Throws When Logging Outside of an HttpContext\"\n\n## Release Candidate 3\n- Added IServiceProviderEx which extends IServiceProvider\n- Added Pair<T,S> class. \n- Applied Bill Pierce's patch fixing CORE-9 \n  \"Allow CastleComponent Attribute to Specify Lifestyle in Constructor\"\n- Added UseSingleInterfaceProxy to CompomentModel to control the proxying\n  behavior while maintaining backward compatibility.\n  Added the corresponding ComponentProxyBehaviorAttribute.\n- Made NullLogger and IExtnededLogger\n- Enabled a new format on ILogger interface, with 6 overloads for each method:\n  - Debug(string)\n  - Debug(string, Exception)\n  - Debug(string, params object[])\n  - DebugFormat(string, params object[])\n  - DebugFormat(Exception, string, params object[])\n  - DebugFormat(IFormatProvider, string, params object[])\n  - DebugFormat(IFormatProvider, Exception, string, params object[])\n  - The \"FatalError\" overloads where marked as [Obsolete], replaced by \"Fatal\" and \"FatalFormat\".\n\n## 0.0.1.0\n- Included IProxyTargetAccessor\n- Removed IMethodInterceptor and IMethodInvocation, that have been replaced by IInterceptor and IInvocation\n- Added FindByPropertyInfo to PropertySetCollection\n- Made the DependencyModel.IsOptional property writable\n- Applied Curtis Schlak's patch fixing IOC-27\n  \"assembly resource format only works for resources where the assemblies name and default namespace are the same.\"\n  \n  Quoting:\n\n  \"I chose to preserve backwards compatibility by implementing the code in the \n  reverse order as suggested by the reporter. Given the following URI for a resource:\n\n  assembly://my.cool.assembly/context/moo/file.xml\n\n  It will initially look for an embedded resource with the manifest name of \n  \"my.cool.assembly.context.moo.file.xml\" in the loaded assembly my.cool.assembly.dll. \n  If it does not find it, then it looks for the embedded resource with the manifest name \n  of \"context.moo.file.xml\".\n- IServiceEnabledComponent Introduced to be used across the project as\n  a standard way to have access to common services, for example, logger factories\n- Added missing log factories\n- Refactor StreamLogger and DiagnosticLogger to be more consistent behavior-wise\n- Refactored WebLogger to extend LevelFilteredLogger (removed duplication)\n- Refactored LoggerLevel order\n- Project started\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.2099609375,
          "content": "## Contributing\nInformation on contributing to this project can be found in the [Castle Project Contributing Guide](https://github.com/castleproject/Home/blob/master/CONTRIBUTING.md) located in our Home repository.\n"
        },
        {
          "name": "Castle.Core.sln",
          "type": "blob",
          "size": 5.0849609375,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 16\nVisualStudioVersion = 16.0.30011.22\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Castle Build\", \"Castle Build\", \"{1B999D24-B7AB-4997-96E7-08FA05325694}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.editorconfig = .editorconfig\n\t\t.gitattributes = .gitattributes\n\t\t.gitignore = .gitignore\n\t\tappveyor.yml = appveyor.yml\n\t\tbuild.cmd = build.cmd\n\t\tbuild.sh = build.sh\n\t\tCHANGELOG.md = CHANGELOG.md\n\t\tbuildscripts\\common.props = buildscripts\\common.props\n\t\tCONTRIBUTING.md = CONTRIBUTING.md\n\t\tLICENSE = LICENSE\n\t\tREADME.md = README.md\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Castle.Core\", \"src\\Castle.Core\\Castle.Core.csproj\", \"{C31C55D2-32FD-4158-8EC5-0FBB56DCE4D4}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Castle.Core.Tests\", \"src\\Castle.Core.Tests\\Castle.Core.Tests.csproj\", \"{F32D049E-C486-4F29-BAD5-FC5EA06E7B88}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Castle.Services.Logging.log4netIntegration\", \"src\\Castle.Services.Logging.log4netIntegration\\Castle.Services.Logging.log4netIntegration.csproj\", \"{AFD3B071-E971-499B-A95B-E98155EB66E8}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Castle.Services.Logging.NLogIntegration\", \"src\\Castle.Services.Logging.NLogIntegration\\Castle.Services.Logging.NLogIntegration.csproj\", \"{344D907D-6641-4A61-94C2-4980B5804FE2}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Castle.Services.Logging.SerilogIntegration\", \"src\\Castle.Services.Logging.SerilogIntegration\\Castle.Services.Logging.SerilogIntegration.csproj\", \"{91B2A82F-63F6-46B1-8EDC-5D029BCF6A2B}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Castle Services\", \"Castle Services\", \"{A598EE9B-41CE-4BE8-BF93-2C91F919F97E}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Castle.Core.Tests.WeakNamed\", \"src\\Castle.Core.Tests.WeakNamed\\Castle.Core.Tests.WeakNamed.csproj\", \"{14D86762-CF9B-4560-80C9-10C16DBE246C}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"GitHub Actions\", \"GitHub Actions\", \"{149DB291-CBD6-4F82-A6A6-758E328DB946}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.github\\workflows\\build.yml = .github\\workflows\\build.yml\n\tEndProjectSection\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{C31C55D2-32FD-4158-8EC5-0FBB56DCE4D4}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{C31C55D2-32FD-4158-8EC5-0FBB56DCE4D4}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{C31C55D2-32FD-4158-8EC5-0FBB56DCE4D4}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{C31C55D2-32FD-4158-8EC5-0FBB56DCE4D4}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{F32D049E-C486-4F29-BAD5-FC5EA06E7B88}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{F32D049E-C486-4F29-BAD5-FC5EA06E7B88}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{F32D049E-C486-4F29-BAD5-FC5EA06E7B88}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{F32D049E-C486-4F29-BAD5-FC5EA06E7B88}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{AFD3B071-E971-499B-A95B-E98155EB66E8}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{AFD3B071-E971-499B-A95B-E98155EB66E8}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{AFD3B071-E971-499B-A95B-E98155EB66E8}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{AFD3B071-E971-499B-A95B-E98155EB66E8}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{344D907D-6641-4A61-94C2-4980B5804FE2}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{344D907D-6641-4A61-94C2-4980B5804FE2}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{344D907D-6641-4A61-94C2-4980B5804FE2}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{344D907D-6641-4A61-94C2-4980B5804FE2}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{91B2A82F-63F6-46B1-8EDC-5D029BCF6A2B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{91B2A82F-63F6-46B1-8EDC-5D029BCF6A2B}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{91B2A82F-63F6-46B1-8EDC-5D029BCF6A2B}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{91B2A82F-63F6-46B1-8EDC-5D029BCF6A2B}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{14D86762-CF9B-4560-80C9-10C16DBE246C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{14D86762-CF9B-4560-80C9-10C16DBE246C}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{14D86762-CF9B-4560-80C9-10C16DBE246C}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{14D86762-CF9B-4560-80C9-10C16DBE246C}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{AFD3B071-E971-499B-A95B-E98155EB66E8} = {A598EE9B-41CE-4BE8-BF93-2C91F919F97E}\n\t\t{344D907D-6641-4A61-94C2-4980B5804FE2} = {A598EE9B-41CE-4BE8-BF93-2C91F919F97E}\n\t\t{91B2A82F-63F6-46B1-8EDC-5D029BCF6A2B} = {A598EE9B-41CE-4BE8-BF93-2C91F919F97E}\n\t\t{149DB291-CBD6-4F82-A6A6-758E328DB946} = {1B999D24-B7AB-4997-96E7-08FA05325694}\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {682D4399-4863-4813-B495-5FEDD22496ED}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "Castle.Core.sln.DotSettings",
          "type": "blob",
          "size": 15.1240234375,
          "content": "﻿<wpf:ResourceDictionary xml:space=\"preserve\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:s=\"clr-namespace:System;assembly=mscorlib\" xmlns:ss=\"urn:shemas-jetbrains-com:settings-storage-xaml\" xmlns:wpf=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">\n\t<s:Boolean x:Key=\"/Default/CodeEditing/Intellisense/CodeCompletion/AutoCompleteBasicCompletion/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeEditing/Intellisense/CodeCompletion/AutoCompleteImportCompletion/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeEditing/Intellisense/LookupWindow/ShowSignatures/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeEditing/Intellisense/LookupWindow/ShowSummary/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeEditing/Intellisense/ParameterInfo/DelegatesAsLambdas/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeInspection/Highlighting/IdentifierHighlightingEnabled/@EntryValue\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/CodeStyle/CodeCleanup/Profiles/=Full_0020cleanup_0020and_0020reformat/@EntryIndexedValue\">&lt;?xml version=\"1.0\" encoding=\"utf-16\"?&gt;&lt;Profile name=\"Full cleanup and reformat\"&gt;&lt;CSArrangeThisQualifier&gt;True&lt;/CSArrangeThisQualifier&gt;&lt;CSRemoveCodeRedundancies&gt;True&lt;/CSRemoveCodeRedundancies&gt;&lt;CSUseAutoProperty&gt;True&lt;/CSUseAutoProperty&gt;&lt;CSMakeFieldReadonly&gt;True&lt;/CSMakeFieldReadonly&gt;&lt;CSUseVar&gt;&lt;BehavourStyle&gt;CAN_CHANGE_TO_IMPLICIT&lt;/BehavourStyle&gt;&lt;LocalVariableStyle&gt;ALWAYS_IMPLICIT&lt;/LocalVariableStyle&gt;&lt;ForeachVariableStyle&gt;ALWAYS_IMPLICIT&lt;/ForeachVariableStyle&gt;&lt;/CSUseVar&gt;&lt;CSOptimizeUsings&gt;&lt;OptimizeUsings&gt;True&lt;/OptimizeUsings&gt;&lt;EmbraceInRegion&gt;False&lt;/EmbraceInRegion&gt;&lt;RegionName&gt;&lt;/RegionName&gt;&lt;/CSOptimizeUsings&gt;&lt;CSShortenReferences&gt;True&lt;/CSShortenReferences&gt;&lt;CSReformatCode&gt;True&lt;/CSReformatCode&gt;&lt;CSharpFormatDocComments&gt;True&lt;/CSharpFormatDocComments&gt;&lt;CSReorderTypeMembers&gt;True&lt;/CSReorderTypeMembers&gt;&lt;CSUpdateFileHeader&gt;True&lt;/CSUpdateFileHeader&gt;&lt;/Profile&gt;</s:String>\n\t<s:Int64 x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/BLANK_LINES_BETWEEN_USING_GROUPS/@EntryValue\">1</s:Int64>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_BEFORE_TYPEOF_PARENTHESES/@EntryValue\">False</s:Boolean>\n\t<s:Int64 x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_LIMIT/@EntryValue\">200</s:Int64>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/JavaScriptCodeFormatting/ALIGN_MULTIPLE_DECLARATION/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/JavaScriptCodeFormatting/JavaScriptFormatOther/ALIGN_MULTIPLE_DECLARATION/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/XmlFormatter/ProcessingInstructionAroundAttributeEq/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/XmlFormatter/TagSpacesAroundAttributeEq/@EntryValue\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/CodeStyle/CSharpMemberOrderPattern/CustomPattern/@EntryValue\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;&#xD;\n&#xD;\n&lt;!--&#xD;\nI. Overall&#xD;\n&#xD;\nI.1 Each pattern can have &lt;Match&gt;....&lt;/Match&gt; element. For the given type declaration, the pattern with the match, evaluated to 'true' with the largest weight, will be used &#xD;\nI.2 Each pattern consists of the sequence of &lt;Entry&gt;...&lt;/Entry&gt; elements. Type member declarations are distributed between entries&#xD;\nI.3 If pattern has RemoveAllRegions=\"true\" attribute, then all regions will be cleared prior to reordering. Otherwise, only auto-generated regions will be cleared&#xD;\nI.4 The contents of each entry is sorted by given keys (First key is primary,  next key is secondary, etc). Then the declarations are grouped and en-regioned by given property&#xD;\n&#xD;\nII. Available match operands&#xD;\n&#xD;\nEach operand may have Weight=\"...\" attribute. This weight will be added to the match weight if the operand is evaluated to 'true'.&#xD;\nThe default weight is 1&#xD;\n&#xD;\nII.1 Boolean functions:&#xD;\nII.1.1 &lt;And&gt;....&lt;/And&gt;&#xD;\nII.1.2 &lt;Or&gt;....&lt;/Or&gt;&#xD;\nII.1.3 &lt;Not&gt;....&lt;/Not&gt;&#xD;\n&#xD;\nII.2 Operands&#xD;\nII.2.1 &lt;Kind Is=\"...\"/&gt;. Kinds are: class, struct, interface, enum, delegate, type, constructor, destructor, property, indexer, method, operator, field, constant, event, member&#xD;\nII.2.2 &lt;Name Is=\"...\" [IgnoreCase=\"true/false\"] /&gt;. The 'Is' attribute contains regular expression&#xD;\nII.2.3 &lt;HasAttribute CLRName=\"...\" [Inherit=\"true/false\"] /&gt;. The 'CLRName' attribute contains regular expression&#xD;\nII.2.4 &lt;Access Is=\"...\"/&gt;. The 'Is' values are: public, protected, internal, protected internal, private&#xD;\nII.2.5 &lt;Static/&gt;&#xD;\nII.2.6 &lt;Abstract/&gt;&#xD;\nII.2.7 &lt;Virtual/&gt;&#xD;\nII.2.8 &lt;Override/&gt;&#xD;\nII.2.9 &lt;Sealed/&gt;&#xD;\nII.2.10 &lt;Readonly/&gt;&#xD;\nII.2.11 &lt;ImplementsInterface CLRName=\"...\"/&gt;. The 'CLRName' attribute contains regular expression&#xD;\nII.2.12 &lt;HandlesEvent /&gt;&#xD;\n--&gt;&#xD;\n&#xD;\n&lt;Patterns xmlns=\"urn:shemas-jetbrains-com:member-reordering-patterns\"&gt;&#xD;\n&#xD;\n  &lt;!--Do not reorder COM interfaces and structs marked by StructLayout attribute--&gt;&#xD;\n  &lt;Pattern RemoveAllRegions=\"true\"&gt;&#xD;\n    &lt;Match&gt;&#xD;\n      &lt;Or Weight=\"100\"&gt;&#xD;\n        &lt;And&gt;&#xD;\n          &lt;Kind Is=\"interface\"/&gt;&#xD;\n          &lt;Or&gt;&#xD;\n            &lt;HasAttribute CLRName=\"System.Runtime.InteropServices.InterfaceTypeAttribute\"/&gt;&#xD;\n            &lt;HasAttribute CLRName=\"System.Runtime.InteropServices.ComImport\"/&gt;&#xD;\n          &lt;/Or&gt;&#xD;\n        &lt;/And&gt;&#xD;\n        &lt;HasAttribute CLRName=\"System.Runtime.InteropServices.StructLayoutAttribute\"/&gt;&#xD;\n      &lt;/Or&gt;&#xD;\n    &lt;/Match&gt;&#xD;\n  &lt;/Pattern&gt;&#xD;\n&#xD;\n  &lt;!--Special formatting of NUnit test fixture--&gt;&#xD;\n  &lt;Pattern RemoveAllRegions=\"true\"&gt;&#xD;\n    &lt;Match&gt;&#xD;\n      &lt;And Weight=\"100\"&gt;&#xD;\n        &lt;Kind Is=\"class\"/&gt;&#xD;\n        &lt;HasAttribute CLRName=\"NUnit.Framework.TestFixtureAttribute\" Inherit=\"true\"/&gt;&#xD;\n      &lt;/And&gt;&#xD;\n    &lt;/Match&gt;&#xD;\n&#xD;\n    &lt;!--Setup/Teardow--&gt;&#xD;\n    &lt;Entry&gt;&#xD;\n      &lt;Match&gt;&#xD;\n        &lt;And&gt;&#xD;\n          &lt;Kind Is=\"method\"/&gt;&#xD;\n          &lt;Or&gt;&#xD;\n            &lt;HasAttribute CLRName=\"NUnit.Framework.SetUpAttribute\" Inherit=\"true\"/&gt;&#xD;\n            &lt;HasAttribute CLRName=\"NUnit.Framework.TearDownAttribute\" Inherit=\"true\"/&gt;&#xD;\n            &lt;HasAttribute CLRName=\"NUnit.Framework.FixtureSetUpAttribute\" Inherit=\"true\"/&gt;&#xD;\n            &lt;HasAttribute CLRName=\"NUnit.Framework.FixtureTearDownAttribute\" Inherit=\"true\"/&gt;&#xD;\n          &lt;/Or&gt;&#xD;\n        &lt;/And&gt;&#xD;\n      &lt;/Match&gt;&#xD;\n      &lt;Group Region=\"Setup/Teardown\"/&gt;&#xD;\n    &lt;/Entry&gt;&#xD;\n    &#xD;\n    &lt;!--All other members--&gt;&#xD;\n    &lt;Entry/&gt;&#xD;\n    &#xD;\n    &lt;!--Test methods--&gt;&#xD;\n    &lt;Entry&gt;&#xD;\n      &lt;Match&gt;&#xD;\n        &lt;And Weight=\"100\"&gt;&#xD;\n          &lt;Kind Is=\"method\"/&gt;&#xD;\n          &lt;HasAttribute CLRName=\"NUnit.Framework.TestAttribute\" Inherit=\"false\"/&gt;&#xD;\n        &lt;/And&gt;&#xD;\n      &lt;/Match&gt;&#xD;\n      &lt;Sort&gt;&#xD;\n        &lt;Name/&gt;&#xD;\n      &lt;/Sort&gt;&#xD;\n    &lt;/Entry&gt;&#xD;\n  &lt;/Pattern&gt;&#xD;\n&#xD;\n  &lt;!--Default pattern--&gt;&#xD;\n  &lt;Pattern RemoveAllRegions=\"true\"&gt;&#xD;\n&#xD;\n    &lt;!--public delegate--&gt;&#xD;\n    &lt;Entry&gt;&#xD;\n      &lt;Match&gt;&#xD;\n        &lt;And Weight=\"100\"&gt;&#xD;\n          &lt;Access Is=\"public\"/&gt;&#xD;\n          &lt;Kind Is=\"delegate\"/&gt;&#xD;\n        &lt;/And&gt;&#xD;\n      &lt;/Match&gt;&#xD;\n      &lt;Sort&gt;&#xD;\n        &lt;Name/&gt;&#xD;\n      &lt;/Sort&gt;&#xD;\n      &lt;Group/&gt;&#xD;\n    &lt;/Entry&gt;&#xD;\n    &#xD;\n    &lt;!--public enum--&gt;&#xD;\n    &lt;Entry&gt;&#xD;\n      &lt;Match&gt;&#xD;\n        &lt;And Weight=\"100\"&gt;&#xD;\n          &lt;Access Is=\"public\"/&gt;&#xD;\n          &lt;Kind Is=\"enum\"/&gt;&#xD;\n        &lt;/And&gt;&#xD;\n      &lt;/Match&gt;&#xD;\n      &lt;Sort&gt;&#xD;\n        &lt;Name/&gt;&#xD;\n      &lt;/Sort&gt;&#xD;\n      &lt;Group&gt;&#xD;\n        &lt;Name/&gt;&#xD;\n      &lt;/Group&gt;&#xD;\n    &lt;/Entry&gt;&#xD;\n&#xD;\n    &lt;!--static fields and constants--&gt;&#xD;\n    &lt;Entry&gt;&#xD;\n      &lt;Match&gt;&#xD;\n        &lt;Or&gt;&#xD;\n          &lt;Kind Is=\"constant\"/&gt;&#xD;\n          &lt;And&gt;&#xD;\n            &lt;Kind Is=\"field\"/&gt;&#xD;\n            &lt;Static/&gt;&#xD;\n          &lt;/And&gt;&#xD;\n        &lt;/Or&gt;&#xD;\n      &lt;/Match&gt;&#xD;\n      &lt;Sort&gt;&#xD;\n        &lt;Kind Order=\"constant field\"/&gt;&#xD;\n      &lt;/Sort&gt;&#xD;\n    &lt;/Entry&gt;&#xD;\n    &#xD;\n    &lt;!--instance fields--&gt;&#xD;\n    &lt;Entry&gt;&#xD;\n      &lt;Match&gt;&#xD;\n        &lt;And&gt;&#xD;\n          &lt;Kind Is=\"field\"/&gt;&#xD;\n          &lt;Not&gt;&#xD;\n            &lt;Static/&gt;&#xD;\n          &lt;/Not&gt;&#xD;\n        &lt;/And&gt;&#xD;\n      &lt;/Match&gt;&#xD;\n      &lt;Sort&gt;&#xD;\n        &lt;Readonly/&gt;&#xD;\n        &lt;Name/&gt;&#xD;\n      &lt;/Sort&gt;&#xD;\n    &lt;/Entry&gt;&#xD;\n&#xD;\n    &lt;!--Constructors. Place static one first--&gt;&#xD;\n    &lt;Entry&gt;&#xD;\n      &lt;Match&gt;&#xD;\n        &lt;Kind Is=\"constructor\"/&gt;&#xD;\n      &lt;/Match&gt;&#xD;\n      &lt;Sort&gt;&#xD;\n        &lt;Static/&gt;&#xD;\n      &lt;/Sort&gt;&#xD;\n    &lt;/Entry&gt;&#xD;\n    &#xD;\n    &lt;!--properties, indexers--&gt;&#xD;\n    &lt;Entry&gt;&#xD;\n      &lt;Match&gt;&#xD;\n        &lt;Or&gt;&#xD;\n          &lt;Kind Is=\"property\"/&gt;&#xD;\n          &lt;Kind Is=\"indexer\"/&gt;&#xD;\n        &lt;/Or&gt;&#xD;\n      &lt;/Match&gt;&#xD;\n    &lt;/Entry&gt;&#xD;\n    &#xD;\n    &lt;!--interface implementations--&gt;&#xD;\n    &lt;Entry&gt;&#xD;\n      &lt;Match&gt;&#xD;\n        &lt;And Weight=\"100\"&gt;&#xD;\n          &lt;Kind Is=\"member\"/&gt;&#xD;\n          &lt;ImplementsInterface/&gt;&#xD;\n        &lt;/And&gt;&#xD;\n      &lt;/Match&gt;&#xD;\n      &lt;Sort&gt;&#xD;\n        &lt;ImplementsInterface Immediate=\"true\"/&gt;&#xD;\n        &lt;Name/&gt;&#xD;\n      &lt;/Sort&gt;&#xD;\n      &lt;Group&gt;&#xD;\n        &lt;ImplementsInterface Immediate=\"true\"/&gt;&#xD;\n      &lt;/Group&gt;&#xD;\n    &lt;/Entry&gt;&#xD;\n    &#xD;\n    &lt;!--all other members--&gt;&#xD;\n    &lt;Entry&gt;\t&#xD;\n      &lt;Sort&gt;&#xD;\n\t\t&lt;Access/&gt;&#xD;\n        &lt;Name/&gt;&#xD;\n      &lt;/Sort&gt;&#xD;\n\t&lt;/Entry&gt;&#xD;\n    &#xD;\n    &lt;!--nested types--&gt;&#xD;\n    &lt;Entry&gt;&#xD;\n      &lt;Match&gt;&#xD;\n        &lt;Kind Is=\"type\"/&gt;&#xD;\n      &lt;/Match&gt;&#xD;\n      &lt;Sort&gt;&#xD;\n        &lt;Name/&gt;&#xD;\n      &lt;/Sort&gt;&#xD;\n      &lt;Group&gt;&#xD;\n        &lt;Name/&gt;&#xD;\n      &lt;/Group&gt;&#xD;\n    &lt;/Entry&gt;&#xD;\n  &lt;/Pattern&gt;&#xD;\n  &#xD;\n&lt;/Patterns&gt;&#xD;\n</s:String>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CSharpUsing/AddImportsToDeepestScope/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CSharpUsing/QualifiedUsingAtNestedScope/@EntryValue\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/CodeStyle/FileHeader/FileHeaderText/@EntryValue\">Copyright 2004-$CURRENT_YEAR$ Castle Project - http://www.castleproject.org/&#xD;\n&#xD;\nLicensed under the Apache License, Version 2.0 (the \"License\");&#xD;\nyou may not use this file except in compliance with the License.&#xD;\nYou may obtain a copy of the License at&#xD;\n&#xD;\n    http://www.apache.org/licenses/LICENSE-2.0&#xD;\n&#xD;\nUnless required by applicable law or agreed to in writing, software&#xD;\ndistributed under the License is distributed on an \"AS IS\" BASIS,&#xD;\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xD;\nSee the License for the specific language governing permissions and&#xD;\nlimitations under the License.</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/EventHandlerPatternLong/@EntryValue\">$object$_On$event$</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=PrivateInstanceFields/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"aaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=PrivateStaticFields/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"\" Suffix=\"\" Style=\"aaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/VBNaming/EventHandlerPatternLong/@EntryValue\">$object$_On$event$</s:String>\n\t<s:Boolean x:Key=\"/Default/Environment/MemoryUsageIndicator/IsVisible/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpFileLayoutPatternsUpgrade/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpKeepExistingMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpPlaceEmbeddedOnSameLineMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpUseContinuousIndentInsideBracesMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002EAddAccessorOwnerDeclarationBracesMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002EMigrateBlankLinesAroundFieldToBlankLinesAroundProperty/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002EMigrateThisQualifierSettings/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002EJavaScript_002ECodeStyle_002ESettingsUpgrade_002EJsCodeFormatterSettingsUpgrader/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002EJavaScript_002ECodeStyle_002ESettingsUpgrade_002EJsParsFormattingSettingsUpgrader/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002EJavaScript_002ECodeStyle_002ESettingsUpgrade_002EJsWrapperSettingsUpgrader/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002EXml_002ECodeStyle_002EFormatSettingsUpgrade_002EXmlMoveToCommonFormatterSettingsUpgrade/@EntryIndexedValue\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/Environment/UserInterface/ShortcutSchemeName/@EntryValue\">VS</s:String></wpf:ResourceDictionary>"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.578125,
          "content": "Copyright 2004-2021 Castle Project - http://www.castleproject.org/\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.7353515625,
          "content": "# Castle Core\n\n<img align=\"right\" src=\"docs/images/castle-logo.png\">\n\nCastle Core provides common Castle Project abstractions including logging services. It also features **Castle DynamicProxy** a lightweight runtime proxy generator, and **Castle DictionaryAdapter**.\n\nSee the [documentation](docs/README.md).\n\n## Releases\n\n[![NuGet](https://img.shields.io/nuget/v/Castle.Core.svg)](https://www.nuget.org/packages/Castle.Core/)\n\nSee the [Releases](https://github.com/castleproject/Core/releases).\n\nDebugging symbols are available in symbol packages in the AppVeyor build artifacts since version 4.1.0. For example, [here are the artifacts for 4.1.0](https://ci.appveyor.com/project/castleproject/core/build/4.1.0/artifacts).\n\n## License\n\nCastle Core is &copy; 2004-2022 Castle Project. It is free software, and may be redistributed under the terms of the [Apache 2.0](http://opensource.org/licenses/Apache-2.0) license.\n\n## Contributing\n\nBrowse the [contributing section](https://github.com/castleproject/Home#its-community-driven) of our _Home_ repository to get involved.\n\n## Building\n\n| Platforms       | NuGet Feed |\n|-----------------|------------|\n| Windows & Linux | [Preview Feed](https://ci.appveyor.com/nuget/core-0mhe40ifodk8)\n\n### On Windows\n\n```\nbuild.cmd\n```\n\nCompilation requires a C# 9 compiler, an up-to-date .NET Core SDK, and MSBuild 15+ (which should be included in the former).\n\nRunning the unit tests additionally requires the .NET Framework 4.6.2+ as well as the .NET Core 2.1, 3.1 and 6.0 runtimes to be installed. (If you do not have all of those installed, you can run the tests for a specific target framework using `dotnet test -f <framework>`.)\n\nThese requirements should be covered by Visual Studio 2022 and the .NET 6 SDK.\n\n### On Linux\n\n```\n./build.sh\n```\n\nCompilation requires an up-to-date .NET Core SDK.\n\nRunning the unit tests additionally requires the .NET Core 3.1 and 6.0 runtimes to be installed, as well as either Docker or Mono. For the latter, we recommend Mono 5.10+, though older versions (4.6.1+) might still work as well.\n\n:information_source: **Mono runtime support:** Castle Core runs with minor limitations and defects on Mono 4.0.2+ (however 4.6.1+ is highly recommended, or 5.10+ if your code uses new C# 7.x language features such as `in` parameters).\n\nWe test against up-to-date Mono versions in order to fix known defects as soon as possible. Because of this, if you are using an older Mono version than our Continuous Integration (CI) build, you might see some unit tests fail.\n\nFor known Mono defects, check [our issue tracker](https://github.com/castleproject/Core/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aopen%20mono), as well as unit tests marked with `[Platform(Exclude = \"Mono\", ...)]` in the source code.\n\n### Conditional Compilation Symbols\n\nThe following conditional compilation symbols (vertical) are currently defined for each of the build configurations (horizontal):\n\nSymbol                              | .NET 4.6.2         | .NET Standard 2.x and .NET 6\n----------------------------------- | ------------------ | ----------------------------\n`FEATURE_APPDOMAIN`                 | :white_check_mark: | :no_entry_sign:\n`FEATURE_ASSEMBLYBUILDER_SAVE`      | :white_check_mark: | :no_entry_sign:\n`FEATURE_SERIALIZATION`             | :white_check_mark: | :no_entry_sign:\n`FEATURE_SYSTEM_CONFIGURATION`      | :white_check_mark: | :no_entry_sign:\n\n* `FEATURE_APPDOMAIN` - enables support for features that make use of an AppDomain in the host.\n* `FEATURE_ASSEMBLYBUILDER_SAVE` - enabled support for saving the dynamically generated proxy assembly.\n* `FEATURE_SERIALIZATION` - enables support for serialization of dynamic proxies and other types.\n* `FEATURE_SYSTEM_CONFIGURATION` - enables features that use System.Configuration and the ConfigurationManager.\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 2.728515625,
          "content": "image:\n- Visual Studio 2022\n- Ubuntu\n\n\n# ----------------\n#  ALL BUILD JOBS\n# ----------------\nskip_tags: false\ntest: off\n\n\nfor:\n- # -----------------\n  #  LINUX BUILD JOB\n  # -----------------\n  matrix:\n    only:\n    - image: Ubuntu\n\n  # build and run tests\n  build_script:\n  - uname -a\n  - ./build.sh\n\n  # upload test results\n  after_build:\n  - find \"$APPVEYOR_BUILD_FOLDER\" -type f -name '*TestResults.xml' -print0 | xargs -0 -I '{}' curl -F 'file=@{}' \"https://ci.appveyor.com/api/testresults/nunit3/$APPVEYOR_JOB_ID\"\n\n  # deployment is handled exclusively by the Windows build job (below)\n  deploy: off\n\n\n- # -------------------\n  #  WINDOWS BUILD JOB\n  # -------------------\n  matrix:\n    only:\n    - image: Visual Studio 2022\n\n  # update AppVeyor build version; this matters for deployments\n  init:\n  - ps: |\n      if ($env:APPVEYOR_REPO_TAG -eq \"true\")\n      {\n          Update-AppveyorBuild -Version ($env:APPVEYOR_REPO_TAG_NAME).TrimStart(\"v\")\n      }\n\n  # build and run tests\n  build_script:\n  - cmd: build.cmd\n\n  # upload test results\n  after_build:\n  - ps: |\n      $wc = New-Object System.Net.WebClient\n      $wc.UploadFile(\"https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)\", (Resolve-Path \"NetCoreClrTestResults.xml\"))\n      $wc.UploadFile(\"https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)\", (Resolve-Path \"NetCoreClrWeakNamedTestResults.xml\"))\n      $wc.UploadFile(\"https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)\", (Resolve-Path \"Net60TestResults.xml\"))\n      $wc.UploadFile(\"https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)\", (Resolve-Path \"Net60WeakNamedTestResults.xml\"))\n      $wc.UploadFile(\"https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)\", (Resolve-Path \"DesktopClrTestResults.xml\"))\n      $wc.UploadFile(\"https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)\", (Resolve-Path \"DesktopClrWeakNamedTestResults.xml\"))\n\n  # push packages to NuGet on tag builds\n  on_success:\n  - ps: |\n      if ($env:APPVEYOR_REPO_TAG -eq \"true\")\n      {\n          nuget push \".\\build\\Castle.Core.${env:APPVEYOR_BUILD_VERSION}.nupkg\" -ApiKey $env:NUGET_API_KEY -Source https://api.nuget.org/v3/index.json\n          nuget push \".\\build\\Castle.Core-log4net.${env:APPVEYOR_BUILD_VERSION}.nupkg\" -ApiKey $env:NUGET_API_KEY -Source https://api.nuget.org/v3/index.json\n          nuget push \".\\build\\Castle.Core-NLog.${env:APPVEYOR_BUILD_VERSION}.nupkg\" -ApiKey $env:NUGET_API_KEY -Source https://api.nuget.org/v3/index.json\n          nuget push \".\\build\\Castle.Core-Serilog.${env:APPVEYOR_BUILD_VERSION}.nupkg\" -ApiKey $env:NUGET_API_KEY -Source https://api.nuget.org/v3/index.json\n      }\n\n  # upload packages to AppVeyor\n  artifacts:\n  - path: build\\*.nupkg\n    name: core\n"
        },
        {
          "name": "build.cmd",
          "type": "blob",
          "size": 0.82421875,
          "content": "@ECHO OFF\nREM ****************************************************************************\nREM Copyright 2004-2021 Castle Project - http://www.castleproject.org/\nREM Licensed under the Apache License, Version 2.0 (the \"License\");\nREM you may not use this file except in compliance with the License.\nREM You may obtain a copy of the License at\nREM \nREM     http://www.apache.org/licenses/LICENSE-2.0\nREM \nREM Unless required by applicable law or agreed to in writing, software\nREM distributed under the License is distributed on an \"AS IS\" BASIS,\nREM WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nREM See the License for the specific language governing permissions and\nREM limitations under the License.\nREM ****************************************************************************\n\n@call buildscripts\\build.cmd %*\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 3.564453125,
          "content": "#!/bin/bash\n# ****************************************************************************\n# Copyright 2004-2022 Castle Project - http://www.castleproject.org/\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ****************************************************************************\nshopt -s expand_aliases\n\nDOTNETPATH=$(which dotnet)\nif [ ! -f \"$DOTNETPATH\" ]; then\n\techo \"Please install Microsoft/netcore from: https://www.microsoft.com/net/core\"\n\texit 1\nfi\n\nDOCKERPATH=$(which docker)\nif [ -f \"$DOCKERPATH\" ]; then\n\talias mono=\"$PWD/buildscripts/docker-run-mono.sh\"\nelse\n\tMONOPATH=$(which mono)\n\tif [ ! -f \"$MONOPATH\" ]; then\n\t\techo \"Please install either Docker, or Xamarin/Mono from http://www.mono-project.com/docs/getting-started/install/\"\n\t\texit 1\n\tfi\nfi\n\nmono --version\n\n# Linux/Darwin\nOSNAME=$(uname -s)\necho \"OSNAME: $OSNAME\"\n\ndotnet build --configuration Release || exit 1\n\necho --------------------\necho Running NET462 Tests\necho --------------------\n\nmono ./src/Castle.Core.Tests/bin/Release/net462/Castle.Core.Tests.exe --result=DesktopClrTestResults.xml;format=nunit3\nmono ./src/Castle.Core.Tests.WeakNamed/bin/Release/net462/Castle.Core.Tests.WeakNamed.exe --result=DesktopClrWeakNamedTestResults.xml;format=nunit3\n\necho ---------------------------\necho Running NETCOREAPP3.1 Tests\necho ---------------------------\n\ndotnet ./src/Castle.Core.Tests/bin/Release/netcoreapp3.1/Castle.Core.Tests.dll --result=NetCoreClrTestResults.xml;format=nunit3\ndotnet ./src/Castle.Core.Tests.WeakNamed/bin/Release/netcoreapp3.1/Castle.Core.Tests.WeakNamed.dll --result=NetCoreClrWeakNamedTestResults.xml;format=nunit3\n\necho ---------------------------\necho Running NET6.0 Tests\necho ---------------------------\n\ndotnet ./src/Castle.Core.Tests/bin/Release/net6.0/Castle.Core.Tests.dll --result=Net60TestResults.xml;format=nunit3\ndotnet ./src/Castle.Core.Tests.WeakNamed/bin/Release/net6.0/Castle.Core.Tests.WeakNamed.dll --result=Net60WeakNamedTestResults.xml;format=nunit3\n\n# Ensure that all test runs produced a protocol file:\nif [[ !( -f NetCoreClrTestResults.xml &&\n         -f NetCoreClrWeakNamedTestResults.xml &&\n         -f Net60TestResults.xml &&\n         -f Net60WeakNamedTestResults.xml &&\n         -f DesktopClrTestResults.xml &&\n         -f DesktopClrWeakNamedTestResults.xml ) ]]; then\n    echo \"Incomplete test results. Some test runs might not have terminated properly. Failing the build.\"\n    exit 1\nfi\n\n# Unit test failure\nNETCORE_FAILCOUNT=$(grep -F \"One or more child tests had errors\" NetCoreClrTestResults.xml NetCoreClrWeakNamedTestResults.xml | wc -l)\nif [ $NETCORE_FAILCOUNT -ne 0 ]\nthen\n    echo \"NetCore Tests have failed, failing the build\"\n    exit 1\nfi\n\nNET60_FAILCOUNT=$(grep -F \"One or more child tests had errors\" Net60TestResults.xml Net60WeakNamedTestResults.xml | wc -l)\nif [ $NET60_FAILCOUNT -ne 0 ]\nthen\n    echo \"Net6.0 Tests have failed, failing the build\"\n    exit 1\nfi\n\nMONO_FAILCOUNT=$(grep -F \"One or more child tests had errors\" DesktopClrTestResults.xml DesktopClrWeakNamedTestResults.xml | wc -l)\nif [ $MONO_FAILCOUNT -ne 0 ]\nthen\n    echo \"DesktopClr Tests have failed, failing the build\"\n    exit 1\nfi\n"
        },
        {
          "name": "buildscripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "nuget.config",
          "type": "blob",
          "size": 0.19140625,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <clear/>\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\n  </packageSources>\n</configuration>\n"
        },
        {
          "name": "ref",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}