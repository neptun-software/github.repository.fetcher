{
  "metadata": {
    "timestamp": 1736710836553,
    "page": 358,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lin-ycv/EverythingPowerToys",
      "stars": 2538,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 5.8818359375,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.rsuser\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Mono auto generated files\nmono_crash.*\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\n[Aa][Rr][Mm]/\n[Aa][Rr][Mm]64/\nbld/\n[Bb]in/*\n![Bb]in/.gitinclude\n[Oo]bj/\n[Ll]og/\n[Ll]ogs/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUnit\n*.VisualState.xml\nTestResult.xml\nnunit-*.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_h.h\n*.ilk\n*.meta\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*_wpftmp.csproj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/*\n!.axoCover/settings.json\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# NuGet Symbol Packages\n*.snupkg\n# The packages folder can be ignored because of Package Restore\n**/[Pp]ackages/*\n# except build/, which is used as an MSBuild target.\n!**/[Pp]ackages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/[Pp]ackages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n*.appxbundle\n*.appxupload\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!?*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk\n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n*- [Bb]ackup.rdl\n*- [Bb]ackup ([0-9]).rdl\n*- [Bb]ackup ([0-9][0-9]).rdl\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# CodeRush personal settings\n.cr/personal\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output\nASALocalRun/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder\n.mfractor/\n\n# Local History for Visual Studio\n.localhistory/\n\n# BeatPulse healthcheck temp database\nhealthchecksdb\n\n# Backup folder for Package Reference Convert tool in Visual Studio 2017\nMigrationBackup/\n\n# Ionide (cross platform F# VS Code tools) working folder\n.ionide/\n"
        },
        {
          "name": "Community.PowerToys.Run.Plugin.Everything.csproj",
          "type": "blob",
          "size": 5.5205078125,
          "content": "ï»¿<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\t<!-- Look at Directory.Build.props in root for common stuff as well -->\r\n\t<Import Project=\"..\\..\\..\\..\\Common.Dotnet.CsWinRT.props\" />\r\n\r\n\t<PropertyGroup>\r\n\t\t<LangVersion>12</LangVersion>\r\n\t\t<ProjectGuid>{64467D32-4786-4ADD-9B77-FBF3C965D3D1}</ProjectGuid>\r\n\t\t<AppDesignerFolder>Properties</AppDesignerFolder>\r\n\t\t<RootNamespace>Community.PowerToys.Run.Plugin.Everything</RootNamespace>\r\n\t\t<AssemblyName>Community.PowerToys.Run.Plugin.Everything</AssemblyName>\r\n\t\t<Version>$([System.IO.File]::ReadAllText('$(MSBuildThisFileDirectory)plugin.json').Split(',')[5].Split(':')[1].Trim().Trim('\"'))</Version>\r\n\r\n\t\t<useWPF>true</useWPF>\r\n\t\t<AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>\r\n\t\t<AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath>\r\n\t\t<GenerateSatelliteAssembliesForCore>true</GenerateSatelliteAssembliesForCore>\r\n\t\t<Company>lin-ycv</Company>\r\n\t\t<Copyright>Copyright (C) lin-ycv</Copyright>\r\n\t\t<AllowUnsafeBlocks>True</AllowUnsafeBlocks>\r\n\t</PropertyGroup>\r\n\r\n\t<PropertyGroup Condition=\"'$(Configuration)'=='Debug'\">\r\n\t\t<DebugSymbols>true</DebugSymbols>\r\n\t\t<OutputPath>bin\\$(Platform)\\$(Configuration)\\Everything\\</OutputPath>\r\n\t\t<DefineConstants>DEBUG;TRACE</DefineConstants>\r\n\t\t<DebugType>full</DebugType>\r\n\t\t<Optimize>false</Optimize>\r\n\t</PropertyGroup>\r\n\r\n\t<PropertyGroup Condition=\"'$(Configuration)'=='Release'\">\r\n\t\t<DefineConstants>TRACE</DefineConstants>\r\n\t\t<OutputPath>bin\\$(Platform)\\$(Configuration)\\Everything\\</OutputPath>\r\n\t\t<Optimize>true</Optimize>\r\n\t\t<DebugType>none</DebugType>\r\n\t</PropertyGroup>\r\n\r\n\t<PropertyGroup Condition=\"'$(Platform)'=='x64'\">\r\n\t\t<DefineConstants>$(DefineConstants);X64</DefineConstants>\r\n\t</PropertyGroup>\r\n\r\n\t<PropertyGroup Condition=\"'$(Platform)'=='ARM64'\">\r\n\t\t<DefineConstants>$(DefineConstants);ARM64</DefineConstants>\r\n\t</PropertyGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<Compile Remove=\"NativeMethods.cs\" />\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup>\r\n\t  <ProjectReference Include=\"..\\..\\..\\..\\settings-ui\\Settings.UI.Library\\Settings.UI.Library.csproj\">\r\n\t\t  <Private>false</Private>\r\n\t  </ProjectReference>\r\n\t  <ProjectReference Include=\"..\\..\\Wox.Infrastructure\\Wox.Infrastructure.csproj\">\r\n\t\t  <Private>false</Private>\r\n\t  </ProjectReference>\r\n\t  <ProjectReference Include=\"..\\..\\Wox.Plugin\\Wox.Plugin.csproj\">\r\n\t\t  <Private>false</Private>\r\n\t  </ProjectReference>\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<None Include=\"plugin.json\">\r\n\t\t\t<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n\t\t</None>\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<Compile Update=\"Properties\\Resources.Designer.cs\">\r\n\t\t\t<DesignTime>True</DesignTime>\r\n\t\t\t<AutoGen>True</AutoGen>\r\n\t\t\t<DependentUpon>Resources.resx</DependentUpon>\r\n\t\t</Compile>\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<EmbeddedResource Update=\"Properties\\Resources.es-es.resx\">\r\n\t\t</EmbeddedResource>\r\n\t\t<EmbeddedResource Update=\"Properties\\Resources.de-de.resx\">\r\n\t\t</EmbeddedResource>\r\n\t\t<EmbeddedResource Update=\"Properties\\Resources.zh-cn.resx\">\r\n\t\t</EmbeddedResource>\r\n\t\t<EmbeddedResource Update=\"Properties\\Resources.resx\">\r\n\t\t\t<Generator>PublicResXFileCodeGenerator</Generator>\r\n\t\t\t<LastGenOutput>Resources.Designer.cs</LastGenOutput>\r\n\t\t</EmbeddedResource>\r\n\t\t<EmbeddedResource Update=\"Properties\\Resources.zh-tw.resx\">\r\n\t\t</EmbeddedResource>\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<None Update=\"Everything64.dll\">\r\n\t\t\t<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n\t\t</None>\r\n\t\t<None Update=\"EverythingARM64.dll\">\r\n\t\t\t<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n\t\t</None>\r\n\t\t<None Update=\"Images\\Everything.dark.png\">\r\n\t\t\t<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n\t\t</None>\r\n\t\t<None Update=\"Images\\Everything.light.png\">\r\n\t\t\t<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n\t\t\t<Pack>True</Pack>\r\n\t\t\t<PackagePath>\\</PackagePath>\r\n\t\t</None>\r\n\t\t<None Update=\"Images\\file.png\">\r\n\t\t\t<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n\t\t</None>\r\n\t\t<None Update=\"Images\\folder.png\">\r\n\t\t\t<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n\t\t</None>\r\n\t\t<None Update=\"Images\\warning.png\">\r\n\t\t\t<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n\t\t</None>\r\n\t\t<None Update=\"settings.toml\">\r\n\t\t\t<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n\t\t</None>\r\n\t</ItemGroup>\r\n\r\n\t<Target Name=\"PostBuild\" AfterTargets=\"PostBuildEvent\">\r\n\t\t<Exec Command=\"if $(Platform) == ARM64 (&#xD;&#xA;del /Q &quot;$(TargetDir)Everything64.dll&quot;&#xD;&#xA;copy /y &quot;$(TargetDir)EverythingARM64.dll&quot; &quot;$(TargetDir)Everything64.dll&quot;&#xD;&#xA;)&#xD;&#xA;rmdir /S /Q &quot;$(TargetDir)amd64&quot;&#xD;&#xA;del /Q &quot;$(TargetDir)TraceReloggerLib.dll&quot;&#xD;&#xA;del /Q &quot;$(TargetDir)EverythingARM64.dll&quot;&#xD;&#xA;del /Q &quot;$(TargetDir)Dia2Lib.dll&quot;&#xD;&#xA;del /Q &quot;$(TargetDir)*.pdb&quot;&#xD;&#xA;del /Q &quot;$(TargetDir)PowerToys*.dll&quot;&#xD;&#xA;del /Q &quot;.\\bin\\$(Platform)_CHECKSUM.txt&quot;&#xD;&#xA;copy /y &quot;LICENSE&quot; &quot;$(TargetDir)LICENSE.txt&quot;&#xD;&#xA;powershell Compress-Archive -Path $(TargetDir) -DestinationPath .\\bin\\EverythingPT-$(Version)-$(Platform).zip -Force&#xD;&#xA;&quot;C:\\Program Files (x86)\\NSIS\\makensis&quot; /Dver=$(Version) /Ddirect=$(TargetDir) /Dplatform=$(Platform) .\\NSIS\\exeCreator.nsi&#xD;&#xA;certUtil -hashfile .\\bin\\EverythingPT-$(Version)-$(Platform).zip SHA256 &gt;&gt; .\\bin\\$(Platform)_CHECKSUM.txt&#xD;&#xA;certUtil -hashfile .\\bin\\EverythingPT-$(Version)-$(Platform).exe SHA256 &gt;&gt; .\\bin\\$(Platform)_CHECKSUM.txt&#xD;&#xA;rd /Q /S &quot;$(TargetDir)&quot;\" />\r\n\t</Target>\r\n\r\n</Project>\r\n"
        },
        {
          "name": "Community.PowerToys.Run.Plugin.Everything.xml",
          "type": "blob",
          "size": 4.7490234375,
          "content": "<?xml version=\"1.0\"?>\n<doc>\n    <assembly>\n        <name>Community.PowerToys.Run.Plugin.Everything</name>\n    </assembly>\n    <members>\n        <member name=\"T:Community.PowerToys.Run.Plugin.Everything.Properties.Resources\">\n            <summary>\n              A strongly-typed resource class, for looking up localized strings, etc.\n            </summary>\n        </member>\n        <member name=\"P:Community.PowerToys.Run.Plugin.Everything.Properties.Resources.ResourceManager\">\n            <summary>\n              Returns the cached ResourceManager instance used by this class.\n            </summary>\n        </member>\n        <member name=\"P:Community.PowerToys.Run.Plugin.Everything.Properties.Resources.Culture\">\n            <summary>\n              Overrides the current thread's CurrentUICulture property for all\n              resource lookups using this strongly typed resource class.\n            </summary>\n        </member>\n        <member name=\"P:Community.PowerToys.Run.Plugin.Everything.Properties.Resources.clipboard_failed\">\n            <summary>\n              Looks up a localized string similar to Fail to set text in clipboard.\n            </summary>\n        </member>\n        <member name=\"P:Community.PowerToys.Run.Plugin.Everything.Properties.Resources.copy_path\">\n            <summary>\n              Looks up a localized string similar to Copy path (Ctrl+C).\n            </summary>\n        </member>\n        <member name=\"P:Community.PowerToys.Run.Plugin.Everything.Properties.Resources.enable_wait\">\n            <summary>\n              Looks up a localized string similar to Enable Wait setting under PowerToys Run &gt; Everything.\n            </summary>\n        </member>\n        <member name=\"P:Community.PowerToys.Run.Plugin.Everything.Properties.Resources.Everything_ini\">\n            <summary>\n              Looks up a localized string similar to Install Everything if not installed.\n            </summary>\n        </member>\n        <member name=\"P:Community.PowerToys.Run.Plugin.Everything.Properties.Resources.Everything_not_running\">\n            <summary>\n              Looks up a localized string similar to Everything is not running.\n            </summary>\n        </member>\n        <member name=\"P:Community.PowerToys.Run.Plugin.Everything.Properties.Resources.folder_open_failed\">\n            <summary>\n              Looks up a localized string similar to Fail to open folder at.\n            </summary>\n        </member>\n        <member name=\"P:Community.PowerToys.Run.Plugin.Everything.Properties.Resources.open_containing_folder\">\n            <summary>\n              Looks up a localized string similar to Open containing folder (Ctrl+Shift+E).\n            </summary>\n        </member>\n        <member name=\"P:Community.PowerToys.Run.Plugin.Everything.Properties.Resources.open_in_console\">\n            <summary>\n              Looks up a localized string similar to Open path in console (Ctrl+Shift+C).\n            </summary>\n        </member>\n        <member name=\"P:Community.PowerToys.Run.Plugin.Everything.Properties.Resources.plugin_description\">\n            <summary>\n              Looks up a localized string similar to Get search results from Everything.\n            </summary>\n        </member>\n        <member name=\"P:Community.PowerToys.Run.Plugin.Everything.Properties.Resources.plugin_name\">\n            <summary>\n              Looks up a localized string similar to Everything.\n            </summary>\n        </member>\n        <member name=\"P:Community.PowerToys.Run.Plugin.Everything.Properties.Resources.Preview\">\n            <summary>\n              Looks up a localized string similar to Preview - Preview file content as icon, may cause freezing if file is not local..\n            </summary>\n        </member>\n        <member name=\"P:Community.PowerToys.Run.Plugin.Everything.Properties.Resources.run_as_admin\">\n            <summary>\n              Looks up a localized string similar to Run as administrator (Ctrl+Shift+Enter).\n            </summary>\n        </member>\n        <member name=\"P:Community.PowerToys.Run.Plugin.Everything.Properties.Resources.timeout\">\n            <summary>\n              Looks up a localized string similar to Timed out before finishing the query.\n            </summary>\n        </member>\n        <member name=\"P:Community.PowerToys.Run.Plugin.Everything.Properties.Resources.Top\">\n            <summary>\n              Looks up a localized string similar to Top - Insert result at the top of the list, may cause pre-selection issue..\n            </summary>\n        </member>\n        <member name=\"P:Community.PowerToys.Run.Plugin.Everything.Properties.Resources.Wait\">\n            <summary>\n              Looks up a localized string similar to Wait - Wait longer for the query to finish, enable only if prompted to..\n            </summary>\n        </member>\n    </members>\n</doc>\n"
        },
        {
          "name": "ContextMenuLoader.cs",
          "type": "blob",
          "size": 13.3076171875,
          "content": "using System;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nusing System.Diagnostics;\r\nusing System.IO;\r\nusing System.Reflection;\r\nusing System.Security.AccessControl;\r\nusing System.Threading.Tasks;\r\nusing System.Windows;\r\nusing System.Windows.Input;\r\nusing Community.PowerToys.Run.Plugin.Everything.Properties;\r\nusing Wox.Infrastructure;\r\nusing Wox.Plugin;\r\nusing Wox.Plugin.Logger;\r\n\r\nnamespace Community.PowerToys.Run.Plugin.Everything\r\n{\r\n    internal sealed class ContextMenuLoader(PluginInitContext context, string options) : IContextMenu\r\n    {\r\n        private readonly PluginInitContext _context = context;\r\n\r\n        // Extensions for adding run as admin context menu item for applications\r\n        private readonly string[] _appExtensions = [\".exe\", \".bat\", \".appref-ms\", \".lnk\"];\r\n\r\n        private bool _swapCopy;\r\n        private string _options = options;\r\n        private string _customProgram;\r\n        private string _customArg;\r\n        internal void Update(Settings s)\r\n        {\r\n            _swapCopy = s.Copy;\r\n            _options = s.Context;\r\n            _customProgram = s.CustomProgram;\r\n            _customArg = s.CustomArg;\r\n        }\r\n\r\n        public List<ContextMenuResult> LoadContextMenus(Result selectedResult)\r\n        {\r\n            var contextMenus = new List<ContextMenuResult>();\r\n            if (selectedResult.ContextData is SearchResult record)\r\n            {\r\n                bool isFile = record.File, runAs = CanFileBeRunAsAdmin(record.Path);\r\n                foreach (char o in _options)\r\n                {\r\n                    switch (o)\r\n                    {\r\n                        case '0':\r\n                            // Open folder\r\n                            if (isFile)\r\n                            {\r\n                                contextMenus.Add(new ContextMenuResult\r\n                                {\r\n                                    PluginName = Assembly.GetExecutingAssembly().GetName().Name,\r\n                                    Title = Resources.open_containing_folder,\r\n                                    Glyph = \"\\xE838\",\r\n                                    FontFamily = \"Segoe MDL2 Assets\",\r\n                                    AcceleratorKey = Key.E,\r\n                                    AcceleratorModifiers = ModifierKeys.Control | ModifierKeys.Shift,\r\n                                    Action = _ =>\r\n                                    {\r\n                                        if (!Helper.OpenInShell(\"explorer.exe\", $\"/select,\\\"{record.Path}\\\"\"))\r\n                                        {\r\n                                            var message = $\"{Resources.folder_open_failed} {Path.GetDirectoryName(record.Path)}\";\r\n                                            _context.API.ShowMsg(message);\r\n                                            return false;\r\n                                        }\r\n\r\n                                        return true;\r\n                                    },\r\n                                });\r\n                            }\r\n\r\n                            break;\r\n                        case '1':\r\n                            // Run as Adsmin\r\n                            if (runAs)\r\n                            {\r\n                                contextMenus.Add(new ContextMenuResult\r\n                                {\r\n                                    PluginName = Assembly.GetExecutingAssembly().GetName().Name,\r\n                                    Title = Resources.run_as_admin,\r\n                                    Glyph = \"\\xE7EF\",\r\n                                    FontFamily = \"Segoe MDL2 Assets\",\r\n                                    AcceleratorKey = Key.Enter,\r\n                                    AcceleratorModifiers = ModifierKeys.Control | ModifierKeys.Shift,\r\n                                    Action = _ =>\r\n                                    {\r\n                                        try\r\n                                        {\r\n                                            Task.Run(() => Helper.RunAsAdmin(record.Path));\r\n                                            return true;\r\n                                        }\r\n                                        catch (Exception e)\r\n                                        {\r\n                                            Log.Exception($\"Failed to run {record.Path} as admin, {e.Message}\", e, MethodBase.GetCurrentMethod().DeclaringType);\r\n                                            return false;\r\n                                        }\r\n                                    },\r\n                                });\r\n                            }\r\n\r\n                            break;\r\n                        case '2':\r\n                            // Run as User\r\n                            if (runAs)\r\n                            {\r\n                                contextMenus.Add(new ContextMenuResult\r\n                                {\r\n                                    PluginName = Assembly.GetExecutingAssembly().GetName().Name,\r\n                                    Title = Resources.run_as_user,\r\n                                    Glyph = \"\\xE7EE\",\r\n                                    FontFamily = \"Segoe MDL2 Assets\",\r\n                                    AcceleratorKey = Key.U,\r\n                                    AcceleratorModifiers = ModifierKeys.Control | ModifierKeys.Shift,\r\n                                    Action = _ =>\r\n                                    {\r\n                                        try\r\n                                        {\r\n                                            Task.Run(() => Helper.RunAsUser(record.Path));\r\n                                            return true;\r\n                                        }\r\n                                        catch (Exception e)\r\n                                        {\r\n                                            Log.Exception($\"Failed to run {record.Path} as different user, {e.Message}\", e, MethodBase.GetCurrentMethod().DeclaringType);\r\n                                            return false;\r\n                                        }\r\n                                    },\r\n                                });\r\n                            }\r\n\r\n                            break;\r\n                        case '3':\r\n                            // Copy File/Folder\r\n                            contextMenus.Add(new ContextMenuResult\r\n                            {\r\n                                PluginName = Assembly.GetExecutingAssembly().GetName().Name,\r\n                                Title = Resources.copy_file + (_swapCopy ? Resources.copy_shortcut : Resources.copy_shortcutAlt),\r\n                                Glyph = \"\\xE8C8\",\r\n                                FontFamily = \"Segoe MDL2 Assets\",\r\n                                AcceleratorKey = Key.C,\r\n                                AcceleratorModifiers = _swapCopy ? ModifierKeys.Control : ModifierKeys.Control | ModifierKeys.Alt,\r\n\r\n                                Action = (context) =>\r\n                                {\r\n                                    try\r\n                                    {\r\n                                        Clipboard.SetData(DataFormats.FileDrop, new string[] { record.Path });\r\n                                        return true;\r\n                                    }\r\n                                    catch (Exception e)\r\n                                    {\r\n                                        var message = Resources.clipboard_failed;\r\n                                        Log.Exception(message, e, GetType());\r\n\r\n                                        _context.API.ShowMsg(message);\r\n                                        return false;\r\n                                    }\r\n                                },\r\n                            });\r\n                            break;\r\n                        case '4':\r\n                            // Copy Path\r\n                            contextMenus.Add(new ContextMenuResult\r\n                            {\r\n                                PluginName = Assembly.GetExecutingAssembly().GetName().Name,\r\n                                Title = Resources.copy_path + (_swapCopy ? Resources.copy_shortcutAlt : Resources.copy_shortcut),\r\n                                Glyph = \"\\xE71B\",\r\n                                FontFamily = \"Segoe MDL2 Assets\",\r\n                                AcceleratorKey = Key.C,\r\n                                AcceleratorModifiers = _swapCopy ? ModifierKeys.Control | ModifierKeys.Alt : ModifierKeys.Control,\r\n\r\n                                Action = (context) =>\r\n                                {\r\n                                    try\r\n                                    {\r\n                                        Clipboard.SetDataObject(record.Path);\r\n                                        return true;\r\n                                    }\r\n                                    catch (Exception e)\r\n                                    {\r\n                                        var message = Resources.clipboard_failed;\r\n                                        Log.Exception(message, e, GetType());\r\n\r\n                                        _context.API.ShowMsg(message);\r\n                                        return false;\r\n                                    }\r\n                                },\r\n                            });\r\n                            break;\r\n                        case '5':\r\n                            // Open in Shell\r\n                            contextMenus.Add(new ContextMenuResult\r\n                            {\r\n                                PluginName = Assembly.GetExecutingAssembly().GetName().Name,\r\n                                Title = Resources.open_in_console,\r\n                                Glyph = \"\\xE756\",\r\n                                FontFamily = \"Segoe MDL2 Assets\",\r\n                                AcceleratorKey = Key.C,\r\n                                AcceleratorModifiers = ModifierKeys.Control | ModifierKeys.Shift,\r\n\r\n                                Action = (context) =>\r\n                                {\r\n                                    try\r\n                                    {\r\n                                        if (isFile)\r\n                                        {\r\n                                            Helper.OpenInConsole(Path.GetDirectoryName(record.Path));\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            Helper.OpenInConsole(record.Path);\r\n                                        }\r\n\r\n                                        return true;\r\n                                    }\r\n                                    catch (Exception e)\r\n                                    {\r\n                                        Log.Exception($\"Failed to open {record.Path} in console, {e.Message}\", e, GetType());\r\n                                        return false;\r\n                                    }\r\n                                },\r\n                            });\r\n                            break;\r\n                        case '6':\r\n                            // Pass to custom program as parameter\r\n                            contextMenus.Add(new ContextMenuResult\r\n                            {\r\n                                PluginName = Assembly.GetExecutingAssembly().GetName().Name,\r\n                                Title = Resources.open_in_custom,\r\n                                Glyph = \"\\xE8A7\",\r\n                                FontFamily = \"Segoe MDL2 Assets\",\r\n                                AcceleratorKey = Key.N,\r\n                                AcceleratorModifiers = ModifierKeys.Control,\r\n\r\n                                Action = (context) =>\r\n                                {\r\n                                    using var process = new Process();\r\n                                    process.StartInfo.FileName = _customProgram;\r\n                                    process.StartInfo.Arguments = $\"\\\"{_customArg.Replace(\"$P\", record.Path)}\\\"\";\r\n                                    try\r\n                                    {\r\n                                        process.Start();\r\n                                        return true;\r\n                                    }\r\n                                    catch (Exception e)\r\n                                    {\r\n                                        Log.Exception($\"Failed to execute {_customProgram} with arguments {_customArg}\", e, GetType());\r\n                                        return false;\r\n                                    }\r\n                                },\r\n                            });\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return contextMenus;\r\n        }\r\n\r\n        private bool CanFileBeRunAsAdmin(string path)\r\n        {\r\n            string fileExtension = Path.GetExtension(path);\r\n            foreach (string extension in _appExtensions)\r\n            {\r\n                // Using OrdinalIgnoreCase since this is internal\r\n                if (extension.Equals(fileExtension, StringComparison.OrdinalIgnoreCase))\r\n                {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n    }\r\n}\r\n"
        },
        {
          "name": "Debugger.cs",
          "type": "blob",
          "size": 0.4580078125,
          "content": "ï»¿#if DEBUG\nusing System;\nusing System.IO;\nnamespace Community.PowerToys.Run.Plugin.Everything\n{\n    internal static class Debugger\n    {\n        private static readonly string FilePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), \"EverythingPT.log\");\n        public static void Write(string message)\n        {\n            using StreamWriter writer = new(FilePath, true);\n            writer.WriteLine(message);\n        }\n    }\n}\n#endif\n"
        },
        {
          "name": "Everything.cs",
          "type": "blob",
          "size": 7.7451171875,
          "content": "ï»¿using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Runtime.InteropServices;\nusing Community.PowerToys.Run.Plugin.Everything.Properties;\nusing Wox.Plugin;\nusing Wox.Plugin.Logger;\nusing static Community.PowerToys.Run.Plugin.Everything.Interop.NativeMethods;\n\nnamespace Community.PowerToys.Run.Plugin.Everything\n{\n    internal sealed class Everything\n    {\n        private string exe = string.Empty;\n        internal Everything(Settings setting)\n        {\n            Everything_SetRequestFlags(Request.FILE_NAME | Request.PATH);\n            UpdateSettings(setting);\n        }\n\n        internal void UpdateSettings(Settings setting)\n        {\n            Everything_SetSort(setting.Sort);\n            Everything_SetMax(setting.Max);\n            Everything_SetMatchPath(setting.MatchPath);\n            Everything_SetRegex(setting.RegEx);\n            if (!string.IsNullOrEmpty(setting.EverythingPath))\n            {\n                if (setting.EverythingPath != exe && Path.Exists(setting.EverythingPath))\n                    exe = setting.EverythingPath;\n            }\n            else if (string.IsNullOrEmpty(exe))\n            {\n                exe = Path.Exists(\"C:\\\\Program Files\\\\Everything 1.5a\\\\Everything64.exe\") ? \"C:\\\\Program Files\\\\Everything 1.5a\\\\Everything64.exe\" :\n                    (Path.Exists(\"C:\\\\Program Files\\\\Everything\\\\Everything.exe\") ? \"C:\\\\Program Files\\\\Everything\\\\Everything.exe\" :\n                    (Path.Exists(\"C:\\\\Program Files (x86)\\\\Everything 1.5a\\\\Everything.exe\") ? \"C:\\\\Program Files (x86)\\\\Everything 1.5a\\\\Everything.exe\" :\n                    (Path.Exists(\"C:\\\\Program Files (x86)\\\\Everything\\\\Everything.exe\") ? \"C:\\\\Program Files (x86)\\\\Everything\\\\Everything.exe\" : string.Empty)));\n            }\n        }\n\n        internal IEnumerable<Result> Query(string query, Settings setting)\n        {\n#if DEBUG\n            if (setting.Log > LogLevel.None)\n            {\n                Debugger.Write($\"\\r\\n\\r\\nNew Query: {query}\\r\\n\" +\n                    $\"Prefix {setting.Prefix} | \" +\n                    $\"Sort {(int)setting.Sort}_{Everything_GetSort()} | \" +\n                    $\"Max {setting.Max}_{Everything_GetMax()} | \" +\n                    $\"Match Path {setting.MatchPath}_{Everything_GetMatchPath()} | \" +\n                    $\"Regex {setting.RegEx}_{Everything_GetRegex()}\");\n            }\n#endif\n\n            string orgqry = query;\n\n            if (!string.IsNullOrEmpty(setting.Prefix))\n                query = setting.Prefix + query;\n\n            if (setting.EnvVar && orgqry.Contains('%'))\n            {\n                query = Environment.ExpandEnvironmentVariables(query).Replace(';', '|');\n#if DEBUG\n                if (setting.Log > LogLevel.None)\n                    Debugger.Write($\"EnvVariable\\r\\n{query}\");\n#endif\n            }\n\n            if (Everything_GetMinorVersion() < 5 && orgqry.Contains(':'))\n            {\n                foreach (var kv in setting.Filters)\n                {\n                    if (query.Contains(kv.Key, StringComparison.OrdinalIgnoreCase))\n                    {\n                        query = query.Replace(kv.Key, kv.Value);\n#if DEBUG\n                        if (setting.Log > LogLevel.None)\n                            Debugger.Write($\"Contains Filter: {kv.Key}\\r\\n{query}\");\n#endif\n                    }\n                }\n            }\n\n            Everything_SetSearchW(query);\n            if (!Everything_QueryW(true))\n            {\n#if DEBUG\n                if (setting.Log > LogLevel.None)\n                    Debugger.Write(\"\\r\\nUnable to Query\\r\\n\");\n#endif\n                throw new Win32Exception(\"Unable to Query\");\n            }\n\n            uint resultCount = Everything_GetNumResults();\n#if DEBUG\n            if (setting.Log > LogLevel.None)\n                Debugger.Write($\"Results: {resultCount}\");\n#endif\n\n            bool showMore = setting.ShowMore && !string.IsNullOrEmpty(exe) && resultCount == setting.Max;\n            if (showMore)\n            {\n                var more = new Result()\n                {\n                    Title = Resources.more_results,\n                    SubTitle = Resources.more_results_Subtitle,\n                    IcoPath = \"Images/Everything.light.png\",\n                    Action = e =>\n                    {\n                        using var process = new Process();\n                        process.StartInfo.FileName = exe;\n                        process.StartInfo.UseShellExecute = true;\n                        process.StartInfo.Arguments = $@\"-s \"\"{query.Replace(\"\\\"\", \"\\\"\\\"\\\"\")}\"\"\";\n                        try\n                        {\n                            process.Start();\n                            return true;\n                        }\n                        catch (Win32Exception)\n                        {\n                            return false;\n                        }\n                    },\n                    Score = int.MinValue,\n                    QueryTextDisplay = orgqry,\n                };\n                yield return more;\n            }\n\n            for (uint i = 0; i < resultCount; i++)\n            {\n#if DEBUG\n                if (setting.Log > LogLevel.None)\n                    Debugger.Write($\"\\r\\n===== RESULT #{i} =====\");\n#endif\n                string name = Marshal.PtrToStringUni(Everything_GetResultFileNameW(i));\n                string path = Marshal.PtrToStringUni(Everything_GetResultPathW(i));\n                if (name == null || path == null)\n                {\n                    Log.Warn($\"Result {i} is null for {name} and/or {path}, query: {query}\", GetType());\n                    continue;\n                }\n\n                string fullPath = Path.Combine(path, name);\n#if DEBUG\n                if (setting.Log > LogLevel.None)\n                    Debugger.Write($\"{fullPath.Length} {(setting.Log == LogLevel.Verbose ? fullPath : string.Empty)}\");\n#endif\n                bool isFolder = Everything_IsFolderResult(i);\n                if (isFolder)\n                    path = fullPath;\n                string ext = Path.GetExtension(fullPath.Replace(\".lnk\", string.Empty));\n#if DEBUG\n                if (setting.Log > LogLevel.None)\n                    Debugger.Write($\"Folder: {isFolder}\\r\\nFile Path {(setting.Log == LogLevel.Verbose ? path : path.Length)}\\r\\nFile Name {(setting.Log == LogLevel.Verbose ? name : name.Length)}\\r\\nExt: {ext}\");\n#endif\n                var r = new Result()\n                {\n                    Title = name,\n                    ToolTipData = new ToolTipData(name, fullPath),\n                    SubTitle = Resources.plugin_name + \": \" + fullPath,\n\n                    IcoPath = isFolder ? \"Images/folder.png\" : (setting.Preview ?\n                        fullPath : \"Images/file.png\"),\n                    ContextData = new SearchResult()\n                    {\n                        Path = fullPath,\n                        Title = name,\n                        File = !isFolder,\n                    },\n                    Action = e =>\n                    {\n                        using var process = new Process();\n                        process.StartInfo.FileName = fullPath;\n                        process.StartInfo.WorkingDirectory = path;\n                        process.StartInfo.UseShellExecute = true;\n\n                        try\n                        {\n                            process.Start();\n                            _ = Everything_IncRunCountFromFileName(fullPath);\n                            return true;\n                        }\n                        catch (Win32Exception)\n                        {\n                            return false;\n                        }\n                    },\n\n                    QueryTextDisplay = setting.QueryText ? (isFolder ? path : name) : orgqry,\n                };\n                yield return r;\n            }\n        }\n    }\n}\n"
        },
        {
          "name": "Everything64.dll",
          "type": "blob",
          "size": 95.5078125,
          "content": null
        },
        {
          "name": "EverythingARM64.dll",
          "type": "blob",
          "size": 89.546875,
          "content": null
        },
        {
          "name": "GlobalSuppressions.cs",
          "type": "blob",
          "size": 1.6396484375,
          "content": "ï»¿// This file is used by Code Analysis to maintain SuppressMessage\n// attributes that are applied to this project.\n// Project-level suppressions either have no target or are given\n// a specific target and scoped to a namespace, type, member, etc.\n\nusing System.Diagnostics.CodeAnalysis;\n\n[assembly: SuppressMessage(\"StyleCop.CSharp.ReadabilityRules\", \"SA1124:Do not use regions\", Justification = \"Reviewed.\")]\n[assembly: SuppressMessage(\"StyleCop.CSharp.LayoutRules\", \"SA1501:Statement should not be on a single line\", Justification = \"Reviewed\")]\n[assembly: SuppressMessage(\"StyleCop.CSharp.LayoutRules\", \"SA1503:Braces should not be omitted\", Justification = \"Reviewed\")]\n[assembly: SuppressMessage(\"StyleCop.CSharp.LayoutRules\", \"SA1516:Elements should be separated by blank line\", Justification = \"Reviewed\")]\n[assembly: SuppressMessage(\"StyleCop.CSharp.DocumentationRules\", \"SA1602:Enumeration items should be documented\", Justification = \"Reviewed\")]\n[assembly: SuppressMessage(\"StyleCop.CSharp.DocumentationRules\", \"SA1633:File should have header\", Justification = \"Reviewed\")]\n[assembly: SuppressMessage(\"StyleCop.CSharp.DocumentationRules\", \"SA1636:FileHeaderCopyrightTextMustMatch\", Justification = \"Reviewed.\")]\n[assembly: SuppressMessage(\"StyleCop.CSharp.SpacingRules\", \"SA1010:Opening square brackets should be spaced correctly\", Justification = \"Reviewed\")]\n[assembly: SuppressMessage(\"StyleCop.CSharp.SpacingRules\", \"SA1005:Single line comments should begin with single space\", Justification = \"Reviewed\")]\n[assembly: SuppressMessage(\"StyleCop.CSharp.LayoutRules\", \"SA1512:Single-line comments should not be followed by blank line\", Justification = \"Reviewed\")]\n"
        },
        {
          "name": "Images",
          "type": "tree",
          "content": null
        },
        {
          "name": "Interop",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 13.765625,
          "content": "Eclipse Public License - v 2.0\n\nTHE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE PUBLIC LICENSE (âAGREEMENTâ). ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.\n\n1. DEFINITIONS\n\nâContributionâ means:\n\n  a) in the case of the initial Contributor, the initial content Distributed under this Agreement, and\n\n  b) in the case of each subsequent Contributor:\n    i) changes to the Program, and\n    ii) additions to the Program;\n  where such changes and/or additions to the Program originate from and are Distributed by that particular Contributor. A Contribution âoriginatesâ from a Contributor if it was added to the Program by such Contributor itself or anyone acting on such Contributor's behalf. Contributions do not include changes or additions to the Program that are not Modified Works.\n\nâContributorâ means any person or entity that Distributes the Program.\n\nâLicensed Patentsâ mean patent claims licensable by a Contributor which are necessarily infringed by the use or sale of its Contribution alone or when combined with the Program.\n\nâProgramâ means the Contributions Distributed in accordance with this Agreement.\n\nâRecipientâ means anyone who receives the Program under this Agreement or any Secondary License (as applicable), including Contributors.\n\nâDerivative Worksâ shall mean any work, whether in Source Code or other form, that is based on (or derived from) the Program and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship.\n\nâModified Worksâ shall mean any work in Source Code or other form that results from an addition to, deletion from, or modification of the contents of the Program, including, for purposes of clarity any new file in Source Code form that contains any contents of the Program. Modified Works shall not include works that contain only declarations, interfaces, types, classes, structures, or files of the Program solely in each case in order to link to, bind by name, or subclass the Program or Modified Works thereof.\n\nâDistributeâ means the acts of a) distributing or b) making available in any manner that enables the transfer of a copy.\n\nâSource Codeâ means the form of a Program preferred for making modifications, including but not limited to software source code, documentation source, and configuration files.\n\nâSecondary Licenseâ means either the GNU General Public License, Version 2.0, or any later versions of that license, including any exceptions or additional permissions as identified by the initial Contributor.\n\n2. GRANT OF RIGHTS\n\n  a) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, Distribute and sublicense the Contribution of such Contributor, if any, and such Derivative Works.\n\n  b) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free patent license under Licensed Patents to make, use, sell, offer to sell, import and otherwise transfer the Contribution of such Contributor, if any, in Source Code or other form. This patent license shall apply to the combination of the Contribution and the Program if, at the time the Contribution is added by the Contributor, such addition of the Contribution causes such combination to be covered by the Licensed Patents. The patent license shall not apply to any other combinations which include the Contribution. No hardware per se is licensed hereunder.\n\n  c) Recipient understands that although each Contributor grants the licenses to its Contributions set forth herein, no assurances are provided by any Contributor that the Program does not infringe the patent or other intellectual property rights of any other entity. Each Contributor disclaims any liability to Recipient for claims brought by any other entity based on infringement of intellectual property rights or otherwise. As a condition to exercising the rights and licenses granted hereunder, each Recipient hereby assumes sole responsibility to secure any other intellectual property rights needed, if any. For example, if a third party patent license is required to allow Recipient to Distribute the Program, it is Recipient's responsibility to acquire that license before distributing the Program.\n\n  d) Each Contributor represents that to its knowledge it has sufficient copyright rights in its Contribution, if any, to grant the copyright license set forth in this Agreement.\n\n  e) Notwithstanding the terms of any Secondary License, no Contributor makes additional grants to any Recipient (other than those set forth in this Agreement) as a result of such Recipient's receipt of the Program under the terms of a Secondary License (if permitted under the terms of Section 3).\n\n3. REQUIREMENTS\n\n3.1 If a Contributor Distributes the Program in any form, then:\n\n  a) the Program must also be made available as Source Code, in accordance with section 3.2, and the Contributor must accompany the Program with a statement that the Source Code for the Program is available under this Agreement, and informs Recipients how to obtain it in a reasonable manner on or through a medium customarily used for software exchange; and\n\n  b) the Contributor may Distribute the Program under a license different than this Agreement, provided that such license:\n    i) effectively disclaims on behalf of all other Contributors all warranties and conditions, express and implied, including warranties or conditions of title and non-infringement, and implied warranties or conditions of merchantability and fitness for a particular purpose;\n\n    ii) effectively excludes on behalf of all other Contributors all liability for damages, including direct, indirect, special, incidental and consequential damages, such as lost profits;\n\n    iii) does not attempt to limit or alter the recipients' rights in the Source Code under section 3.2; and\n\n    iv) requires any subsequent distribution of the Program by any party to be under a license that satisfies the requirements of this section 3.\n\n3.2 When the Program is Distributed as Source Code:\n\n  a) it must be made available under this Agreement, or if the Program (i) is combined with other material in a separate file or files made available under a Secondary License, and (ii) the initial Contributor attached to the Source Code the notice described in Exhibit A of this Agreement, then the Program may be made available under the terms of such Secondary Licenses, and\n\n  b) a copy of this Agreement must be included with each copy of the Program.\n\n3.3 Contributors may not remove or alter any copyright, patent, trademark, attribution notices, disclaimers of warranty, or limitations of liability (ânoticesâ) contained within the Program from any copy of the Program which they Distribute, provided that Contributors may add their own appropriate notices.\n\n4. COMMERCIAL DISTRIBUTION\n\nCommercial distributors of software may accept certain responsibilities with respect to end users, business partners and the like. While this license is intended to facilitate the commercial use of the Program, the Contributor who includes the Program in a commercial product offering should do so in a manner which does not create potential liability for other Contributors. Therefore, if a Contributor includes the Program in a commercial product offering, such Contributor (âCommercial Contributorâ) hereby agrees to defend and indemnify every other Contributor (âIndemnified Contributorâ) against any losses, damages and costs (collectively âLossesâ) arising from claims, lawsuits and other legal actions brought by a third party against the Indemnified Contributor to the extent caused by the acts or omissions of such Commercial Contributor in connection with its distribution of the Program in a commercial product offering. The obligations in this section do not apply to any claims or Losses relating to any actual or alleged intellectual property infringement. In order to qualify, an Indemnified Contributor must: a) promptly notify the Commercial Contributor in writing of such claim, and b) allow the Commercial Contributor to control, and cooperate with the Commercial Contributor in, the defense and any related settlement negotiations. The Indemnified Contributor may participate in any such claim at its own expense.\n\nFor example, a Contributor might include the Program in a commercial product offering, Product X. That Contributor is then a Commercial Contributor. If that Commercial Contributor then makes performance claims, or offers warranties related to Product X, those performance claims and warranties are such Commercial Contributor's responsibility alone. Under this section, the Commercial Contributor would have to defend claims against the other Contributors related to those performance claims and warranties, and if a court requires any other Contributor to pay any damages as a result, the Commercial Contributor must pay those damages.\n\n5. NO WARRANTY\n\nEXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, AND TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE PROGRAM IS PROVIDED ON AN âAS ISâ BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely responsible for determining the appropriateness of using and distributing the Program and assumes all risks associated with its exercise of rights under this Agreement, including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, programs or equipment, and unavailability or interruption of operations.\n\n6. DISCLAIMER OF LIABILITY\n\nEXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, AND TO THE EXTENT PERMITTED BY APPLICABLE LAW, NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n7. GENERAL\n\nIf any provision of this Agreement is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this Agreement, and without further action by the parties hereto, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable.\n\nIf Recipient institutes patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Program itself (excluding combinations of the Program with other software or hardware) infringes such Recipient's patent(s), then such Recipient's rights granted under Section 2(b) shall terminate as of the date such litigation is filed.\n\nAll Recipient's rights under this Agreement shall terminate if it fails to comply with any of the material terms or conditions of this Agreement and does not cure such failure in a reasonable period of time after becoming aware of such noncompliance. If all Recipient's rights under this Agreement terminate, Recipient agrees to cease use and distribution of the Program as soon as reasonably practicable. However, Recipient's obligations under this Agreement and any licenses granted by Recipient relating to the Program shall continue and survive.\n\nEveryone is permitted to copy and distribute copies of this Agreement, but in order to avoid inconsistency the Agreement is copyrighted and may only be modified in the following manner. The Agreement Steward reserves the right to publish new versions (including revisions) of this Agreement from time to time. No one other than the Agreement Steward has the right to modify this Agreement. The Eclipse Foundation is the initial Agreement Steward. The Eclipse Foundation may assign the responsibility to serve as the Agreement Steward to a suitable separate entity. Each new version of the Agreement will be given a distinguishing version number. The Program (including Contributions) may always be Distributed subject to the version of the Agreement under which it was received. In addition, after a new version of the Agreement is published, Contributor may elect to Distribute the Program (including its Contributions) under the new version.\n\nExcept as expressly stated in Sections 2(a) and 2(b) above, Recipient receives no rights or licenses to the intellectual property of any Contributor under this Agreement, whether expressly, by implication, estoppel or otherwise. All rights in the Program not expressly granted under this Agreement are reserved. Nothing in this Agreement is intended to be enforceable by any entity that is not a Contributor or Recipient. No third-party beneficiary rights are created under this Agreement.\n\nExhibit A â Form of Secondary Licenses Notice\n\nâThis Source Code may also be made available under the following Secondary Licenses when the conditions for such availability set forth in the Eclipse Public License, v. 2.0 are satisfied: {name license(s), version(s), and exceptions or additional permissions here}.â\n\n  Simply including a copy of this Agreement, including this Exhibit A is not sufficient to license the Source Code under Secondary Licenses.\n\n  If it is not possible or desirable to put the notice in a particular file, then You may include the notice in a location (such as a LICENSE file in a relevant directory) where a recipient would be likely to look for such a notice.\n\n  You may add additional accurate notices of copyright ownership."
        },
        {
          "name": "Main.cs",
          "type": "blob",
          "size": 11.3232421875,
          "content": "ï»¿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Reflection;\r\nusing System.Threading.Tasks;\r\nusing System.Windows.Controls;\r\nusing Community.PowerToys.Run.Plugin.Everything.Properties;\r\nusing Microsoft.PowerToys.Settings.UI.Library;\r\nusing Wox.Plugin;\r\nusing Wox.Plugin.Logger;\r\nusing static Community.PowerToys.Run.Plugin.Everything.Interop.NativeMethods;\r\n\r\nnamespace Community.PowerToys.Run.Plugin.Everything\r\n{\r\n    public class Main : IPlugin, IDisposable, IDelayedExecutionPlugin, IContextMenu, ISettingProvider, IPluginI18n\r\n    {\r\n        public static string PluginID => \"A86867E2D932459CBD77D176373DD657\";\r\n        public string Name => Resources.plugin_name;\r\n        public string Description => Resources.plugin_description;\r\n        private readonly Settings _setting = new();\r\n        private Everything _everything;\r\n        private ContextMenuLoader _contextMenuLoader;\r\n        private bool _disposed;\r\n\r\n        public IEnumerable<PluginAdditionalOption> AdditionalOptions =>\r\n        [\r\n            new()\r\n            {\r\n                Key = nameof(Settings.Context),\r\n                DisplayLabel = Resources.Context,\r\n                DisplayDescription = Resources.Context_Description,\r\n                PluginOptionType = PluginAdditionalOption.AdditionalOptionType.Textbox,\r\n                TextValue = _setting.Context,\r\n            },\r\n            new()\r\n            {\r\n                Key = nameof(Settings.Sort),\r\n                DisplayLabel = Resources.Sort,\r\n                DisplayDescription = Resources.Sort_Description,\r\n                PluginOptionType = PluginAdditionalOption.AdditionalOptionType.Combobox,\r\n                ComboBoxItems = Enum.GetValues<Sort>().Cast<int>().Select(v => new KeyValuePair<string, string>(((Sort)v).ToString(), v + string.Empty)).ToList(),\r\n                ComboBoxValue = (int)_setting.Sort,\r\n            },\r\n            new()\r\n            {\r\n                Key = nameof(Settings.Max),\r\n                DisplayLabel = Resources.Max,\r\n                DisplayDescription = Resources.Max_Description,\r\n                PluginOptionType = PluginAdditionalOption.AdditionalOptionType.Numberbox,\r\n                NumberValue = _setting.Max,\r\n            },\r\n            new()\r\n            {\r\n                Key = nameof(Settings.Prefix),\r\n                DisplayLabel = Resources.Prefix,\r\n                DisplayDescription = Resources.Prefix_Description,\r\n                PluginOptionType = PluginAdditionalOption.AdditionalOptionType.Textbox,\r\n                TextValue = _setting.Prefix,\r\n            },\r\n            new()\r\n            {\r\n                Key = nameof(Settings.EverythingPath),\r\n                DisplayLabel = Resources.EverythingPath,\r\n                DisplayDescription = Resources.EverythingPath_Description,\r\n                PluginOptionType = PluginAdditionalOption.AdditionalOptionType.Textbox,\r\n                TextValue = _setting.EverythingPath,\r\n            },\r\n            new()\r\n            {\r\n                Key = nameof(Settings.CustomProgram),\r\n                DisplayLabel = Resources.CustomProgram,\r\n                DisplayDescription = Resources.CustomProgram_Description,\r\n                PluginOptionType = PluginAdditionalOption.AdditionalOptionType.Textbox,\r\n                TextValue = _setting.CustomProgram,\r\n            },\r\n            new()\r\n            {\r\n                Key = nameof(Settings.CustomArg),\r\n                DisplayLabel = Resources.CustomArg,\r\n                DisplayDescription = Resources.CustomArg_Description,\r\n                PluginOptionType = PluginAdditionalOption.AdditionalOptionType.Textbox,\r\n                TextValue = _setting.CustomArg,\r\n            },\r\n            new()\r\n            {\r\n                Key = nameof(Settings.Copy),\r\n                DisplayLabel = Resources.SwapCopy,\r\n                DisplayDescription = Resources.SwapCopy_Description,\r\n                Value = _setting.Copy,\r\n            },\r\n            new()\r\n            {\r\n                Key = nameof(Settings.EnvVar),\r\n                DisplayLabel = Resources.EnvVar,\r\n                DisplayDescription = Resources.EnvVar_Description,\r\n                Value = _setting.EnvVar,\r\n            },\r\n            new()\r\n            {\r\n                Key = nameof(Settings.MatchPath),\r\n                DisplayLabel = Resources.Match_path,\r\n                DisplayDescription = Resources.Match_path_Description,\r\n                Value = _setting.MatchPath,\r\n            },\r\n            new()\r\n            {\r\n                Key = nameof(Settings.Preview),\r\n                DisplayLabel = Resources.Preview,\r\n                DisplayDescription = Resources.Preview_Description,\r\n                Value = _setting.Preview,\r\n            },\r\n            new()\r\n            {\r\n                Key = nameof(Settings.QueryText),\r\n                DisplayLabel = Resources.QueryText,\r\n                DisplayDescription = Resources.QueryText_Description,\r\n                Value = _setting.QueryText,\r\n            },\r\n            new()\r\n            {\r\n                Key = nameof(Settings.RegEx),\r\n                DisplayLabel = Resources.RegEx,\r\n                DisplayDescription = Resources.RegEx_Description,\r\n                Value = _setting.RegEx,\r\n            },\r\n            new()\r\n            {\r\n                Key = nameof(Settings.ShowMore),\r\n                DisplayLabel = Resources.ShowMore,\r\n                DisplayDescription = Resources.ShowMore_Description,\r\n                Value = _setting.ShowMore,\r\n            },\r\n            new()\r\n            {\r\n                Key = nameof(Settings.Updates),\r\n                DisplayLabel = Resources.Updates,\r\n                DisplayDescription = $\"v{Assembly.GetExecutingAssembly().GetName().Version}\",\r\n                Value = _setting.Updates,\r\n            },\r\n#if DEBUG\r\n            new()\r\n            {\r\n                Key = nameof(Settings.Log),\r\n                DisplayLabel = \"Debug Mode\",\r\n                PluginOptionType = PluginAdditionalOption.AdditionalOptionType.Combobox,\r\n                ComboBoxItems = Enum.GetValues(typeof(LogLevel)).Cast<int>().Select(d => new KeyValuePair<string, string>(((LogLevel)d).ToString(), d + string.Empty)).ToList(),\r\n                ComboBoxValue = (int)_setting.Log,\r\n            },\r\n#endif\r\n        ];\r\n\r\n        public void Init(PluginInitContext context)\r\n        {\r\n            if (_setting.Updates)\r\n                Task.Run(() => new Update().UpdateAsync(Assembly.GetExecutingAssembly().GetName().Version, _setting));\r\n            if (Everything_GetMinorVersion() < 5) _setting.Getfilters();\r\n            _everything = new Everything(_setting);\r\n            _contextMenuLoader = new ContextMenuLoader(context, _setting.Context);\r\n            _contextMenuLoader.Update(_setting);\r\n#if DEBUG\r\n            if (_setting.Log > LogLevel.None)\r\n                Debugger.Write(\"Init Complete\\r\\n\");\r\n#endif\r\n        }\r\n\r\n        public void UpdateSettings(PowerLauncherPluginSettings settings)\r\n        {\r\n            if (settings.AdditionalOptions != null)\r\n            {\r\n                _setting.Sort = (Sort)settings.AdditionalOptions.FirstOrDefault(x => x.Key == nameof(_setting.Sort)).ComboBoxValue;\r\n                _setting.Max = (uint)settings.AdditionalOptions.FirstOrDefault(x => x.Key == nameof(_setting.Max)).NumberValue;\r\n                _setting.Context = settings.AdditionalOptions.FirstOrDefault(x => x.Key == nameof(_setting.Context)).TextValue;\r\n                _setting.RegEx = settings.AdditionalOptions.FirstOrDefault(x => x.Key == nameof(_setting.RegEx)).Value;\r\n                _setting.Preview = settings.AdditionalOptions.FirstOrDefault(x => x.Key == nameof(_setting.Preview)).Value;\r\n                _setting.MatchPath = settings.AdditionalOptions.FirstOrDefault(x => x.Key == nameof(_setting.MatchPath)).Value;\r\n                _setting.Copy = settings.AdditionalOptions.FirstOrDefault(x => x.Key == nameof(_setting.Copy)).Value;\r\n                _setting.QueryText = settings.AdditionalOptions.FirstOrDefault(x => x.Key == nameof(_setting.QueryText)).Value;\r\n                _setting.EnvVar = settings.AdditionalOptions.FirstOrDefault(x => x.Key == nameof(_setting.EnvVar)).Value;\r\n                _setting.Updates = settings.AdditionalOptions.FirstOrDefault(x => x.Key == nameof(_setting.Updates)).Value;\r\n                _setting.Prefix = settings.AdditionalOptions.FirstOrDefault(x => x.Key == nameof(_setting.Prefix)).TextValue;\r\n                _setting.EverythingPath = settings.AdditionalOptions.FirstOrDefault(x => x.Key == nameof(_setting.EverythingPath)).TextValue;\r\n                _setting.CustomProgram = settings.AdditionalOptions.FirstOrDefault(x => x.Key == nameof(_setting.CustomProgram)).TextValue;\r\n                _setting.CustomArg = settings.AdditionalOptions.FirstOrDefault(x => x.Key == nameof(_setting.CustomArg)).TextValue;\r\n                _setting.ShowMore = settings.AdditionalOptions.FirstOrDefault(x => x.Key == nameof(_setting.ShowMore)).Value;\r\n#if DEBUG\r\n                _setting.Log = (LogLevel)settings.AdditionalOptions.FirstOrDefault(x => x.Key == nameof(_setting.Log)).ComboBoxValue;\r\n#endif\r\n\r\n                _everything?.UpdateSettings(_setting);\r\n                _contextMenuLoader?.Update(_setting);\r\n            }\r\n        }\r\n\r\n        public List<Result> Query(Query query)\r\n        {\r\n            List<Result> results = [];\r\n            return results;\r\n        }\r\n\r\n        public List<Result> Query(Query query, bool delayedExecution)\r\n        {\r\n            List<Result> results = [];\r\n            if (!string.IsNullOrEmpty(query.Search))\r\n            {\r\n                string searchQuery = query.Search;\r\n\r\n                try\r\n                {\r\n                    results.AddRange(_everything.Query(searchQuery, _setting));\r\n                }\r\n                catch (System.ComponentModel.Win32Exception)\r\n                {\r\n                    results.Add(new Result()\r\n                    {\r\n                        Title = Resources.Everything_not_running,\r\n                        SubTitle = Resources.Everything_ini,\r\n                        IcoPath = \"Images/warning.png\",\r\n                        Score = int.MaxValue,\r\n                    });\r\n                }\r\n                catch (Exception e)\r\n                {\r\n#if DEBUG\r\n                    if (_setting.Log > LogLevel.None)\r\n                        Debugger.Write($\"Everything Exception: {e.Message}\\r\\n{e.StackTrace}\\r\\n\");\r\n#endif\r\n\r\n                    Log.Exception($\"Everything Exception: {e.Message}\\r\\n{e.StackTrace}\\r\\n\", e, GetType());\r\n                }\r\n            }\r\n\r\n            return results;\r\n        }\r\n\r\n        protected virtual void Dispose(bool disposing)\r\n        {\r\n            if (!_disposed)\r\n            {\r\n                if (disposing)\r\n                {\r\n                }\r\n\r\n                _disposed = true;\r\n            }\r\n        }\r\n\r\n        public void Dispose()\r\n        {\r\n            // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method\r\n            Dispose(disposing: true);\r\n            GC.SuppressFinalize(this);\r\n        }\r\n\r\n        public List<ContextMenuResult> LoadContextMenus(Result selectedResult) => _contextMenuLoader.LoadContextMenus(selectedResult);\r\n        public Control CreateSettingPanel() => throw new NotImplementedException();\r\n        public string GetTranslatedPluginTitle() => Resources.plugin_name;\r\n        public string GetTranslatedPluginDescription() => Resources.plugin_description;\r\n    }\r\n}\r\n"
        },
        {
          "name": "NSIS",
          "type": "tree",
          "content": null
        },
        {
          "name": "Properties",
          "type": "tree",
          "content": null
        },
        {
          "name": "SearchHelper",
          "type": "tree",
          "content": null
        },
        {
          "name": "Settings.cs",
          "type": "blob",
          "size": 2.67578125,
          "content": "ï»¿using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Reflection;\nusing Wox.Plugin.Logger;\nusing static Community.PowerToys.Run.Plugin.Everything.Interop.NativeMethods;\n\nnamespace Community.PowerToys.Run.Plugin.Everything\n{\n    public class Settings\n    {\n        // Settings from PTR settings\n        public Sort Sort { get; set; } = Sort.NAME_ASCENDING;\n        public uint Max { get; set; } = 10;\n        public string Context { get; set; } = \"0123456\";\n        public bool Copy { get; set; }\n        public bool MatchPath { get; set; }\n        public bool Preview { get; set; } = true;\n        public bool QueryText { get; set; }\n        public bool RegEx { get; set; }\n        public bool EnvVar { get; set; }\n        public bool Updates { get; set; } = true;\n        public string Skip { get; set; }\n        public string Prefix { get; set; }\n        public string EverythingPath { get; set; }\n        public bool ShowMore { get; set; } = true;\n        public string CustomProgram { get; set; } = \"notepad.exe\";\n        public string CustomArg { get; set; } = \"$P\";\n#if DEBUG\n        public LogLevel Log { get; set; } = LogLevel.None;\n#endif\n\n        // Get Filters from settings.toml\n        public Dictionary<string, string> Filters { get; } = [];\n        internal void Getfilters()\n        {\n            Log.Info(\"User on Everything 1.4\", GetType());\n#if DEBUG\n            if (Log > LogLevel.None)\n                Debugger.Write(\"2.Getting Filters...\");\n#endif\n            string[] strArr;\n            try { strArr = File.ReadAllLines(Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), \"settings.toml\")); }\n            catch (Exception e)\n            {\n#if DEBUG\n                if (Log > LogLevel.None)\n                    Debugger.Write($\"\\r\\nERROR: {e.Message}\\r\\n\");\n#endif\n                Log.Error($\"Error reading settings.toml: {e.Message}\", GetType());\n                return;\n            }\n\n            foreach (string str in strArr)\n            {\n                if (str.Length == 0 || str[0] == '#') continue;\n                string[] kv = str.Split('=', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);\n                if (kv.Length != 2) continue;\n\n                if (kv[0].Contains(':'))\n                    Filters.TryAdd(kv[0].ToLowerInvariant(), kv[1] + (kv[1].EndsWith(';') ? ' ' : string.Empty));\n            }\n#if DEBUG\n            if (Log > LogLevel.None)\n                Debugger.Write(Log > LogLevel.Debug ? string.Join(Environment.NewLine, Filters) + \"\\r\\n\" : string.Empty + \"  GettingFilters...Done\");\n#endif\n        }\n    }\n#if DEBUG\n    public enum LogLevel\n    {\n        None,\n        Debug,\n        Verbose,\n    }\n#endif\n}\n"
        },
        {
          "name": "Update.cs",
          "type": "blob",
          "size": 4.294921875,
          "content": "ï»¿using System;\nusing System.Diagnostics;\nusing System.Globalization;\nusing System.IO;\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing Community.PowerToys.Run.Plugin.Everything.Properties;\n\nnamespace Community.PowerToys.Run.Plugin.Everything\n{\n    internal sealed class Update\n    {\n        private readonly CompositeFormat updateAvailable = CompositeFormat.Parse(Resources.UpdateAvailable);\n        internal async Task UpdateAsync(Version v, Settings s)\n        {\n            string apiUrl = \"https://api.github.com/repos/lin-ycv/EverythingPowerToys/releases/latest\";\n#if DEBUG\n            if (s.Log > LogLevel.None)\n                Debugger.Write(\"1.Checking Update...\");\n#endif\n            try\n            {\n                using HttpClient httpClient = new();\n                httpClient.DefaultRequestHeaders.UserAgent.ParseAdd(\"Mozilla/5.0\");\n\n                HttpResponseMessage response = await httpClient.GetAsync(apiUrl);\n#if DEBUG\n                if (s.Log == LogLevel.Verbose) Debugger.Write($\"\\tResponse: {response.StatusCode}\");\n#endif\n                if (response.IsSuccessStatusCode)\n                {\n                    using JsonDocument jsonDocument = await JsonDocument.ParseAsync(await response.Content.ReadAsStreamAsync());\n                    JsonElement root = jsonDocument.RootElement;\n                    Version latest = Version.TryParse(root.GetProperty(\"tag_name\").GetString().AsSpan(1), out var vNumber)\n                        ? vNumber\n                        : Version.Parse(root.GetProperty(\"tag_name\").GetString());\n                    if (latest > v && latest.ToString() != s.Skip)\n                    {\n                        MessageBoxResult mbox = MessageBox.Show(string.Format(CultureInfo.InvariantCulture, updateAvailable, v, latest), \"Updater\", MessageBoxButton.YesNoCancel);\n                        if (mbox == MessageBoxResult.Yes && root.TryGetProperty(\"assets\", out JsonElement assets))\n                        {\n                            string[] nameUrl = [string.Empty, string.Empty];\n                            foreach (JsonElement asset in assets.EnumerateArray())\n                            {\n#if X64\n                                if (asset.TryGetProperty(\"browser_download_url\", out JsonElement downUrl) && downUrl.ToString().EndsWith(\"x64.exe\", StringComparison.OrdinalIgnoreCase))\n#elif ARM64\n                                if (asset.TryGetProperty(\"browser_download_url\", out JsonElement downUrl) && downUrl.ToString().EndsWith(\"ARM64.exe\", StringComparison.OrdinalIgnoreCase))\n#endif\n                                {\n                                    nameUrl[0] = asset.GetProperty(\"name\").ToString();\n                                    nameUrl[1] = downUrl.ToString();\n                                }\n                            }\n\n                            if (nameUrl[0].Length > 0)\n                            {\n                                byte[] fileContent = await httpClient.GetByteArrayAsync(nameUrl[1]);\n                                string fileName = Path.Combine(Path.GetTempPath(), nameUrl[0]);\n                                File.WriteAllBytes(fileName, fileContent);\n                                Process.Start(fileName);\n                            }\n                            else\n                            {\n                                ProcessStartInfo p = new(\"https://github.com/lin-ycv/EverythingPowerToys/releases/latest\")\n                                {\n                                    UseShellExecute = true,\n                                    Verb = \"Open\",\n                                };\n                                Process.Start(p);\n                            }\n                        }\n                        else if (mbox == MessageBoxResult.No)\n                        {\n                            s.Skip = latest.ToString();\n                        }\n                    }\n                }\n            }\n#if RELEASE\n            catch\n            { }\n#else\n            catch (Exception e)\n            {\n                if (s.Log > LogLevel.None)\n                    Debugger.Write($\"\\r\\nERROR: {e.Message}\\r\\n{e.StackTrace}\\r\\n\");\n            \n            }\n            if (s.Log > LogLevel.None)\n                Debugger.Write(\"  Checking Update...Done\");\n#endif\n        }\n    }\n}\n"
        },
        {
          "name": "plugin.json",
          "type": "blob",
          "size": 0.435546875,
          "content": "ï»¿{\r\n  \"ID\": \"A86867E2D932459CBD77D176373DD657\",\r\n  \"ActionKeyword\": \"`\",\r\n  \"IsGlobal\": true,\r\n  \"Name\": \"Everything\",\r\n  \"Author\": \"Yu Chieh (Victor) Lin\",\r\n  \"Version\": \"0.87.0\",\r\n  \"Language\": \"csharp\",\r\n  \"Website\": \"https://github.com/Lin-ycv/EverythingPowerToys\",\r\n  \"ExecuteFileName\": \"Community.PowerToys.Run.Plugin.Everything.dll\",\r\n  \"IcoPathDark\": \"Images\\\\Everything.dark.png\",\r\n  \"IcoPathLight\": \"Images\\\\Everything.light.png\"\r\n}\r\n"
        },
        {
          "name": "settings.toml",
          "type": "blob",
          "size": 1.3759765625,
          "content": "# This file is for Everything 1.4 support, if you're using 1.5a or above, this file fill have no effect\n# Lines starting with # are comments \n# Search filters, filters result with extension type, seperated by ;\nAudio: = ext:aac;ac3;aif;aifc;aiff;amr;ape;au;cda;dts;fla;flac;it;m1a;m2a;m3u;m4a;m4b;m4p;mid;midi;mka;mod;mp2;mp3;mpa;ogg;opus;ra;rmi;spc;rmi;snd;umx;voc;wav;weba;wma;xm;\nZip: = ext:7z;ace;arj;bz2;cab;gz;gzip;jar;r00;r01;r02;r03;r04;r05;r06;r07;r08;r09;r10;r11;r12;r13;r14;r15;r16;r17;r18;r19;r20;r21;r22;r23;r24;r25;r26;r27;r28;r29;rar;tar;tgz;z;zip;\nDoc: = ext:c;cc;chm;cpp;cs;css;csv;cxx;doc;docm;docx;dot;dotm;dotx;epub;gh;h;hpp;htm;html;hxx;ini;java;js;json;lua;mht;mhtml;mobi;odp;ods;odt;pdf;php;potx;potm;ppam;ppsm;ppsx;pps;ppt;pptm;pptx;pub;py;rtf;sldm;sldx;thmx;txt;vsd;wpd;wps;wri;xlam;xls;xlsb;xlsm;xlsx;xltm;xltx;xml;vb;\nExe: = ext:bat;cmd;exe;msi;msp;msu;ps1;scr;\nPic: = ext:ani;apng;bmp;bpg;cur;gif;ico;jfi;jfif;jif;jpe;jpeg;jpg;pcx;png;psb;psd;rle;svg;tga;tif;tiff;webp;wmf;\nVideo: = ext:3g2;3gp;3gp2;3gpp;amv;asf;asx;avi;bdmv;bik;d2v;divx;drc;dsa;dsm;dss;dsv;evo;f4v;flc;fli;flic;flv;hdmov;ifo;ivf;m1v;m2p;m2t;m2ts;m2v;m4v;mkv;mp2v;mp4;mp4v;mpe;mpeg;mpg;mpls;mpv2;mpv4;mov;mts;ogm;ogv;pss;pva;qt;ram;ratdvd;rm;rmm;rmvb;roq;rpm;smil;smk;swf;tp;tpr;ts;vob;vp6;webm;wm;wmp;wmv;\n\n# Search filters, filters result with custom path(s), seperated by |\n# Demo: = C:\\Windows\\|C:\\ProgramData"
        }
      ]
    }
  ]
}