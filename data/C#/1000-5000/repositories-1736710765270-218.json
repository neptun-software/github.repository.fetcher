{
  "metadata": {
    "timestamp": 1736710765270,
    "page": 218,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ardalis/GuardClauses",
      "stars": 3108,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 5.9013671875,
          "content": "# To learn more about .editorconfig see https://aka.ms/editorconfigdocs\n###############################\n# Core EditorConfig Options   #\n###############################\n# All files\n[*]\nindent_style = space\n# Code files\n[*.{cs,csx,vb,vbx}]\nindent_size = 4\ninsert_final_newline = true\ncharset = utf-8-bom\n###############################\n# .NET Coding Conventions     #\n###############################\n[*.{cs,vb}]\n# Organize usings\ndotnet_sort_system_directives_first = true\n# this. preferences\ndotnet_style_qualification_for_field = false:silent\ndotnet_style_qualification_for_property = false:silent\ndotnet_style_qualification_for_method = false:silent\ndotnet_style_qualification_for_event = false:silent\n# Language keywords vs BCL types preferences\ndotnet_style_predefined_type_for_locals_parameters_members = true:silent\ndotnet_style_predefined_type_for_member_access = true:silent\n# Parentheses preferences\ndotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent\ndotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent\ndotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent\ndotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent\n# Modifier preferences\ndotnet_style_require_accessibility_modifiers = for_non_interface_members:silent\ndotnet_style_readonly_field = true:suggestion\n# Expression-level preferences\ndotnet_style_object_initializer = true:suggestion\ndotnet_style_collection_initializer = true:suggestion\ndotnet_style_explicit_tuple_names = true:suggestion\ndotnet_style_null_propagation = true:suggestion\ndotnet_style_coalesce_expression = true:suggestion\ndotnet_style_prefer_is_null_check_over_reference_equality_method = true:silent\ndotnet_style_prefer_inferred_tuple_names = true:suggestion\ndotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion\ndotnet_style_prefer_auto_properties = true:silent\ndotnet_style_prefer_conditional_expression_over_assignment = true:silent\ndotnet_style_prefer_conditional_expression_over_return = true:silent\n###############################\n# Naming Conventions          #\n###############################\n# Style Definitions\ndotnet_naming_style.pascal_case_style.capitalization             = pascal_case\n# Use PascalCase for constant fields  \ndotnet_naming_rule.constant_fields_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.constant_fields_should_be_pascal_case.symbols  = constant_fields\ndotnet_naming_rule.constant_fields_should_be_pascal_case.style    = pascal_case_style\ndotnet_naming_symbols.constant_fields.applicable_kinds            = field\ndotnet_naming_symbols.constant_fields.applicable_accessibilities  = *\ndotnet_naming_symbols.constant_fields.required_modifiers          = const\n###############################\n# C# Coding Conventions       #\n###############################\n[*.cs]\n# var preferences\ncsharp_style_var_for_built_in_types = true:silent\ncsharp_style_var_when_type_is_apparent = true:silent\ncsharp_style_var_elsewhere = true:silent\n# Expression-bodied members\ncsharp_style_expression_bodied_methods = false:silent\ncsharp_style_expression_bodied_constructors = false:silent\ncsharp_style_expression_bodied_operators = false:silent\ncsharp_style_expression_bodied_properties = true:silent\ncsharp_style_expression_bodied_indexers = true:silent\ncsharp_style_expression_bodied_accessors = true:silent\n# Pattern matching preferences\ncsharp_style_pattern_matching_over_is_with_cast_check = true:suggestion\ncsharp_style_pattern_matching_over_as_with_null_check = true:suggestion\n# Null-checking preferences\ncsharp_style_throw_expression = true:suggestion\ncsharp_style_conditional_delegate_call = true:suggestion\n# Modifier preferences\ncsharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion\n# Expression-level preferences\ncsharp_prefer_braces = true:silent\ncsharp_style_deconstructed_variable_declaration = true:suggestion\ncsharp_prefer_simple_default_expression = true:suggestion\ncsharp_style_pattern_local_over_anonymous_function = true:suggestion\ncsharp_style_inlined_variable_declaration = true:suggestion\n###############################\n# C# Formatting Rules         #\n###############################\n# New line preferences\ncsharp_new_line_before_open_brace = all\ncsharp_new_line_before_else = true\ncsharp_new_line_before_catch = true\ncsharp_new_line_before_finally = true\ncsharp_new_line_before_members_in_object_initializers = true\ncsharp_new_line_before_members_in_anonymous_types = true\ncsharp_new_line_between_query_expression_clauses = true\n# Indentation preferences\ncsharp_indent_case_contents = true\ncsharp_indent_switch_labels = true\ncsharp_indent_labels = flush_left\n# Space preferences\ncsharp_space_after_cast = false\ncsharp_space_after_keywords_in_control_flow_statements = true\ncsharp_space_between_method_call_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_parameter_list_parentheses = false\ncsharp_space_between_parentheses = false\ncsharp_space_before_colon_in_inheritance_clause = true\ncsharp_space_after_colon_in_inheritance_clause = true\ncsharp_space_around_binary_operators = before_and_after\ncsharp_space_between_method_declaration_empty_parameter_list_parentheses = false\ncsharp_space_between_method_call_name_and_opening_parenthesis = false\ncsharp_space_between_method_call_empty_parameter_list_parentheses = false\n# Wrapping preferences\ncsharp_preserve_single_line_statements = true\ncsharp_preserve_single_line_blocks = true\ncsharp_style_namespace_declarations = file_scoped:warning\n###############################\n# VB Coding Conventions       #\n###############################\n[*.vb]\n# Modifier preferences\nvisual_basic_preferred_modifier_order = Partial,Default,Private,Protected,Public,Friend,NotOverridable,Overridable,MustOverride,Overloads,Overrides,MustInherit,NotInheritable,Static,Shared,Shadows,ReadOnly,WriteOnly,Dim,Const,WithEvents,Widening,Narrowing,Custom,Async:suggestion\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.71875,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n**/Properties/launchSettings.json\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Typescript v1 declaration files\ntypings/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.251953125,
          "content": "# Code of Conduct\n\nThis project has adopted the code of conduct defined by the Contributor Covenant\nto clarify expected behavior in our community.\nFor more information, see the [.NET Foundation Code of Conduct](https://dotnetfoundation.org/code-of-conduct).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.998046875,
          "content": "# Contributing to Ardalis.GuardClauses\n\nWe love your input! We want to make contributing to this project as easy and transparent as possible, whether it's:\n\n- Reporting a bug\n- Discussing the current state of the code\n- Submitting a fix\n- Proposing new features\n\n## We Develop with GitHub\n\nObviously...\n\n## We Use Pull Requests\n\nMostly. But pretty much exclusively for non-maintainers. You'll need to fork the repo in order to submit a pull request. Here are the basic steps:\n\n1. Fork the repo and create your branch from `main`.\n2. If you've added code that should be tested, add tests.\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes.\n5. Make sure your code lints.\n6. Issue that pull request!\n\n- [Pull Request Check List](https://ardalis.com/github-pull-request-checklist/)\n- [Resync your fork with this upstream repo](https://ardalis.com/syncing-a-fork-of-a-github-repository-with-upstream/)\n\n## Ask before adding a pull request\n\nYou can just add a pull request out of the blue if you want, but it's much better etitquette (and more likely to be accepted) if you open a new issue or comment in an existing issue stating you'd like to make a pull request.\n\n## Getting Started\n\nLook for [issues marked with 'help wanted'](https://github.com/ardalis/guardclauses/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22) to find good places to start contributing.\n\n## Any contributions you make will be under the MIT Software License\n\nIn short, when you submit code changes, your submissions are understood to be under the same [MIT License](http://choosealicense.com/licenses/mit/) that covers this project.\n\n## Report bugs using Github's [issues](https://github.com/ardalis/guardclauses/issues)\n\nWe use GitHub issues to track public bugs. Report a bug by [opening a new issue](https://github.com/ardalis/GuardClauses/issues/new/choose); it's that easy!\n\n## Sponsor us\n\nIf you don't have the time or expertise to contribute code, you can still support us by [sponsoring](https://github.com/sponsors/ardalis).\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 0.6005859375,
          "content": "<Project>\n\n  <PropertyGroup>\n    <LangVersion>11</LangVersion>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <PropertyGroup Condition=\"'$(TargetFramework)' == 'netstandard2.0'\">\n    <AnnotatedReferenceAssemblyVersion>5.0.0</AnnotatedReferenceAssemblyVersion>\n  </PropertyGroup>\n\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'netstandard2.0'\">\n    <PackageReference Include=\"TunnelVisionLabs.ReferenceAssemblyAnnotator\" Version=\"1.0.0-alpha.160\" PrivateAssets=\"all\" />\n    <PackageDownload Include=\"Microsoft.NETCore.App.Ref\" Version=\"[$(AnnotatedReferenceAssemblyVersion)]\" />\n  </ItemGroup>\n\n</Project>\n"
        },
        {
          "name": "GuardClauses.sln",
          "type": "blob",
          "size": 1.9013671875,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.0.32112.339\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"GuardClauses\", \"src\\GuardClauses\\GuardClauses.csproj\", \"{2A1AA760-8929-433C-BC27-5513F0289842}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{D0831547-3E6D-4E0E-8CB0-F7DA27F4E8EA}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.editorconfig = .editorconfig\n\t\tDirectory.Build.props = Directory.Build.props\n\t\tREADME.md = README.md\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"GuardClauses.UnitTests\", \"test\\GuardClauses.UnitTests\\GuardClauses.UnitTests.csproj\", \"{B84F450E-7778-48C8-A9DB-CCD5EE80E92E}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{2A1AA760-8929-433C-BC27-5513F0289842}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{2A1AA760-8929-433C-BC27-5513F0289842}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{2A1AA760-8929-433C-BC27-5513F0289842}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{2A1AA760-8929-433C-BC27-5513F0289842}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{B84F450E-7778-48C8-A9DB-CCD5EE80E92E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{B84F450E-7778-48C8-A9DB-CCD5EE80E92E}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{B84F450E-7778-48C8-A9DB-CCD5EE80E92E}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{B84F450E-7778-48C8-A9DB-CCD5EE80E92E}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {46896DE3-41B8-442F-A6FB-6AC9F11CCBCE}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) 2017 Steve Smith\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.9130859375,
          "content": "![logo](media/logotype%201024.png)\n\n[![NuGet](https://img.shields.io/nuget/v/Ardalis.GuardClauses.svg)](https://www.nuget.org/packages/Ardalis.GuardClauses)[![NuGet](https://img.shields.io/nuget/dt/Ardalis.GuardClauses.svg)](https://www.nuget.org/packages/Ardalis.GuardClauses)\n![publish Ardalis.GuardClauses to nuget](https://github.com/ardalis/GuardClauses/workflows/publish%20Ardalis.GuardClauses%20to%20nuget/badge.svg)\n\n[![Follow Ardalis](https://img.shields.io/twitter/follow/ardalis.svg?label=Follow%20@ardalis)](https://twitter.com/intent/follow?screen_name=ardalis)\n[![Follow NimblePros](https://img.shields.io/twitter/follow/nimblepros.svg?label=Follow%20@nimblepros)](https://twitter.com/intent/follow?screen_name=nimblepros)\n\n# Guard Clauses\n\nA simple extensible package with guard clause extensions.\n\nA [guard clause](https://deviq.com/design-patterns/guard-clause) is a software pattern that simplifies complex functions by \"failing fast\", checking for invalid inputs up front and immediately failing if any are found.\n\n## Give a Star! :star:\n\nIf you like or are using this project please give it a star. Thanks!\n\n## Usage\n\n```c#\npublic void ProcessOrder(Order order)\n{\n    Guard.Against.Null(order);\n\n    // process order here\n}\n\n// OR\n\npublic class Order\n{\n    private string _name;\n    private int _quantity;\n    private long _max;\n    private decimal _unitPrice;\n    private DateTime _dateCreated;\n\n    public Order(string name, int quantity, long max, decimal unitPrice, DateTime dateCreated)\n    {\n        _name = Guard.Against.NullOrWhiteSpace(name);\n        _quantity = Guard.Against.NegativeOrZero(quantity);\n        _max = Guard.Against.Zero(max);\n        _unitPrice = Guard.Against.Negative(unitPrice);\n        _dateCreated = Guard.Against.OutOfSQLDateRange(dateCreated, dateCreated);\n    }\n}\n```\n\n## Supported Guard Clauses\n\n- **Guard.Against.Null** (throws if input is null)\n- **Guard.Against.NullOrEmpty** (throws if string, guid or array input is null or empty)\n- **Guard.Against.NullOrWhiteSpace** (throws if string input is null, empty or whitespace)\n- **Guard.Against.OutOfRange** (throws if integer/DateTime/enum input is outside a provided range)\n- **Guard.Against.EnumOutOfRange** (throws if an enum value is outside a provided Enum range)\n- **Guard.Against.OutOfSQLDateRange** (throws if DateTime input is outside the valid range of SQL Server DateTime values)\n- **Guard.Against.Zero** (throws if number input is zero)\n- **Guard.Against.Expression** (use any expression you define)\n- **Guard.Against.InvalidFormat** (define allowed format with a regular expression or func)\n- **Guard.Against.NotFound** (similar to Null but for use with an id/key lookup; throws a `NotFoundException`)\n\n## Extending with your own Guard Clauses\n\nTo extend your own guards, you can do the following:\n\n```c#\n// Using the same namespace will make sure your code picks up your \n// extensions no matter where they are in your codebase.\nnamespace Ardalis.GuardClauses\n{\n    public static class FooGuard\n    {\n        public static void Foo(this IGuardClause guardClause,\n            string input, \n            [CallerArgumentExpression(\"input\")] string? parameterName = null)\n        {\n            if (input?.ToLower() == \"foo\")\n                throw new ArgumentException(\"Should not have been foo!\", parameterName);\n        }\n    }\n}\n\n// Usage\npublic void SomeMethod(string something)\n{\n    Guard.Against.Foo(something);\n    Guard.Against.Foo(something, nameof(something)); // optional - provide parameter name\n}\n```\n\n## YouTube Overview\n\n[![Ardalis.GuardClauses on YouTube](http://img.youtube.com/vi/OkE2VeRM4mE/0.jpg)](http://www.youtube.com/watch?v=OkE2VeRM4mE \"Improve Your Code with Ardalis.GuardClauses\")\n\n## Breaking Changes in v4\n\n- OutOfRange for Enums now uses `EnumOutOfRange`\n- Custom error messages now work more consistently, which may break some unit tests\n\n## Nice Visualization of Refactoring to use Guard Clauses\n\nhttps://user-images.githubusercontent.com/782127/234028498-96e206b0-9a70-4aa0-9c36-a62477ea0aa9.mp4\n\nvia [Nicolas Carlo](https://toot.legacycode.rocks/@nicoespeon/110226815487285845)\n\n## References\n\n- [Getting Started with Guard Clauses](https://blog.nimblepros.com/blogs/getting-started-with-guard-clauses/)\n- [How to write clean validation clauses in .NET](https://www.youtube.com/watch?v=Tvx6DNarqDM) (Nick Chapsas, YouTube, 9 minutes)\n- [Guard Clauses (podcast: 7 minutes)](http://www.weeklydevtips.com/004)\n- [Guard Clause](http://deviq.com/guard-clause/)\n\n## Commercial Support\n\nIf you require commercial support to include this library in your applications, contact [NimblePros](https://nimblepros.com/talk-to-us-1)\n\n## Build Notes (for maintainers)\n\n- Remember to update the PackageVersion in the csproj file and then a build on main should automatically publish the new package to nuget.org.\n- Add a release with form `1.3.2` to GitHub Releases in order for the package to actually be published to Nuget. Otherwise it will claim to have been successful but is lying to you.\n\n\n"
        },
        {
          "name": "azure-pipelines.yml.bak",
          "type": "blob",
          "size": 2.3505859375,
          "content": "trigger:\n  branches:\n      include:\n      - master\n      - refs/tags/*\npr:\n- master\n\npool:\n  vmImage: 'windows-2019'\n\nvariables:\n  buildConfiguration: 'Release'\n  buildPlatform: 'Any CPU'\n  solution: '**/*.sln'\n\nsteps:\n\n# Prepare\n- task: DotNetCoreCLI@2\n  displayName: 'dotnet info'\n  inputs:\n    command: custom\n    custom: '--info'\n\n- task: DotNetCoreCLI@2\n  displayName: 'dotnet version'\n  inputs:\n    command: custom\n    custom: '--version'\n\n- task: NuGetToolInstaller@0\n  displayName: 'Use NuGet 4.9.3'\n  inputs:\n    versionSpec: 4.9.3\n\n- task: NuGetCommand@2\n  inputs:\n    restoreSolution: '$(solution)'\n    \n# Build    \n- task: VSBuild@1\n  inputs:\n    solution: '$(solution)'\n    platform: '$(buildPlatform)'\n    configuration: '$(buildConfiguration)'\n    arguments: '--output $(Build.ArtifactStagingDirectory)'\n\n# Run tests and create coverage report\n- task: DotNetCoreCLI@2\n  displayName: Test\n  inputs:\n    command: test\n#    projects: '$(Parameters.TestProjects)'\n    projects: '**/*[Tt]ests/*.csproj'\n    arguments: '--configuration $(BuildConfiguration) --no-build /p:AltCover=true /p:AltCoverForce=true /p:AltCoverCallContext=[Fact] /p:AltCoverXmlReport=..\\target\\reports\\coverage\\coverage.opencover.xml --collect \"Code Coverage\"'\n\n- task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4\n  displayName: ReportGenerator\n  inputs:\n    reports: 'src\\target\\reports\\coverage\\coverage.opencover.xml'\n    targetdir: 'src\\target\\reports\\coverage'\n    reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'\n    assemblyfilters: '-xunit*'\n\n- task: PublishCodeCoverageResults@1\n  displayName: 'Publish code coverage results'\n  inputs:\n    codeCoverageTool: Cobertura\n    summaryFileLocation: '$(build.sourcesdirectory)\\src\\target\\reports\\coverage\\Cobertura.xml'\n    reportDirectory: '$(build.sourcesdirectory)\\src\\target\\reports\\coverage'\n\n- task: CopyFiles@2\n  displayName: 'Copy *.nupkg Files'\n  inputs:\n    SourceFolder: '$(Build.SourcesDirectory)'\n    Contents: '**\\*.nupkg'\n    TargetFolder: '$(Build.ArtifactStagingDirectory)\\Package'\n    flattenFolders: true\n  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))\n\n# Publish\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Artifact'\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)\\Package'\n  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))\n\n"
        },
        {
          "name": "icon_1280.png",
          "type": "blob",
          "size": 55.2265625,
          "content": null
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "nuget.txt",
          "type": "blob",
          "size": 0.419921875,
          "content": "Checklist:\nhttps://ardalis.com/nuget-publication-checklist\n\n-- Don't forget to update the .csproj file with version and release notes!\n\ndotnet pack -c release /p:Version=1.0.0\n\n-- from /bin/release folder\ndotnet nuget push -s https://www.nuget.org/api/v2/package -k <key> Ardalis.GuardClauses.1.0.1.nupkg\n\n-- can also just add a release in github.com UI\ngit tag -a v1.2.4 -m \"Published 1.2.4 to nuget.org\"\n\ngit push --follow-tags\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}