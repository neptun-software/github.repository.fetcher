{
  "metadata": {
    "timestamp": 1736710923384,
    "page": 546,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "xamarin/XamarinComponents",
      "stars": 1989,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".ci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1484375,
          "content": "packages\nbin\nobj\noutput\ntools\nexternals\n**/Resources/Resource.designer.cs\n*.userprefs\n.vs/\ntmpnupkg/\n*.user\n.DS_Store\n*.user\nartifacts/\n.idea/\n*.binlog\n"
        },
        {
          "name": "Android",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0654296875,
          "content": "The MIT License (MIT)\n\nCopyright (c) .NET Foundation Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "Mac",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.6650390625,
          "content": "# Open Source Components\n\n[![GitHub License](https://img.shields.io/badge/license-MIT-lightgrey.svg)](https://github.com/xamarin/XamarinComponents/blob/master/LICENSE)\n\nThese are a collection of open source components (including bindings and plugins) created by Xamarin and others in the community.\n\n## Status\n\nPlease note that this repository of bindings for third-party mobile libraries is considered unsupported and unmaintained.  We have moved many of the most popular and essential bindings to other repositories.\n\nExisting bindings published from this repository will not receive fixes or updates to newer versions.\n\nFor details of bindings officially supported by Microsoft, see the [Support](https://github.com/xamarin/XamarinComponents/blob/main/Support.md) page.\n\n## Building\n\n### Prerequisites\n\nBefore building the libraries and samples in this repository, you will need to install [.NET Core](https://dotnet.microsoft.com/download) and the [Cake .NET Core Tool](http://cakebuild.net):\n\n```sh\ndotnet tool install -g cake.tool\n```\n\nWhen building on macOS, you may also need to install [CocoaPods](https://cocoapods.org/):\n\n```sh\n# Homebrew\nbrew install cocoapods\n\n# Ruby Gems\ngem install cocoapods\n```\n\n### Compiling\n\nYou can either build all the libraries and samples in the repository from the root:\n\n```sh\ndotnet cake --name=<name-from-manifest>\n```\n\nOr, you can build each component separately:\n\n```sh\ncd <path-to-component>\ndotnet cake\n```\n\nThe name of each component can be [found in the manifest.yaml](https://github.com/xamarin/XamarinComponents/blob/master/manifest.yaml). For example, to build the `ARCore` component, you can either start the build from the root:\n\n```sh\ndotnet cake --name=ARCore --target=nuget\n```\n\nOr, you can navigate to the folder and run it from there:\n\n```sh\ncd Android/ARCore\ndotnet cake --target=nuget\n```\n\nThe following targets can be specified using the `--target=<target-name>`:\n\n - `libs` builds the class library bindings (depends on `externals`)\n - `externals` downloads and builds the external dependencies\n - `samples` builds all of the samples (depends on `libs`)\n - `nuget` builds the nuget packages (depends on `libs`)\n - `clean` cleans up everything\n\n\n### Working in Visual Studio\n\nBefore the `.sln` files will compile in the IDEs, the external dependencies need to be downloaded. This can be done by running the `externals` target:\n\n```sh\ndotnet cake --target=externals\n```\n\nAfter the externals are downloaded and built, the `.sln` files should compile in your IDE.\n\n---\n\n## Support & Getting Help\n\nThe following libraries are [supported](Support.md). \n\nTo get help, visit the .NET area of [Microsoft Q&A](https://docs.microsoft.com/en-us/answers/products/dotnet).\n\n---\n\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.6181640625,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nSecurity issues and bugs should be reported privately to the Microsoft Security Response Center (MSRC), either by emailing secure@microsoft.com or via the portal at https://msrc.microsoft.com.\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your\noriginal message. Further information, including the MSRC PGP key, can be found in the [MSRC Report an Issue FAQ](https://www.microsoft.com/en-us/msrc/faqs-report-an-issue).\n\nPlease do not open issues for anything you think might have a security implication.\n"
        },
        {
          "name": "SignList.xml",
          "type": "blob",
          "size": 1.19921875,
          "content": "<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n\n  <ItemGroup>\n    <FirstParty Include=\"Xamarin.*.dll\" />\n    <FirstParty Include=\"Square.*.dll\" />\n    <FirstParty Include=\"RecyclerViewAnimators.*.dll\" />\n    <FirstParty Include=\"GoogleGson*.dll\" />\n\n    <!-- sign all the .jar files -->\n    <FirstParty Include=\"*.jar\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <!-- <ThirdParty Include=\"Newtonsoft.Json.dll\" /> -->\n    <ThirdParty Include=\"MavenNet.dll\" />\n    <ThirdParty Include=\"ILRepack.dll\" />\n    <ThirdParty Include=\"protobuf-net.dll\" />\n    <ThirdParty Include=\"Newtonsoft.Json.dll\" />\n    <ThirdParty Include=\"Mono.Cecil.dll\" />\n    <ThirdParty Include=\"Mono.Cecil.*.dll\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <!-- <Skip Include=\"System.*.dll\" /> -->\n    <Skip Include=\"System.dll\" />\n    <Skip Include=\"System.*.dll\" />\n    <Skip Include=\"mscorlib.dll\" />\n    <Skip Include=\"netstandard.dll\" />\n    <Skip Include=\"WindowsBase.dll\" />\n    <Skip Include=\"Microsoft.*.dll\" />\n    <Skip Include=\"NuGet.*.dll\" />\n    <Skip Include=\"Mono.*.dll\" />\n    <Skip Include=\"MonoPosixHelper.dll\" />\n    <Skip Include=\"libMonoPosixHelper.dll\" />\n    <Skip Include=\"RazorLight.dll\" />    \n  </ItemGroup>  \n</Project>\n"
        },
        {
          "name": "Support.md",
          "type": "blob",
          "size": 1.435546875,
          "content": "# Support\n\n## Xamarin Supported Open Source Components\n\nXamarin Supported Open Source components are a collection of Xamarin built bindings and libraries.\n\n| Name                                  | Description                                                                      | Source                                                           |\n|---------------------------------------|----------------------------------------------------------------------------------|------------------------------------------------------------------|\n| AndroidX Libraries                    | Bindings for Google's AndroidX Libraries                                         | [GitHub](https://github.com/xamarin/AndroidX)                    |\n| Google Play Services Client Libraries for Android | Bindings for Google's Play Services Client Libraries                             | [GitHub](https://github.com/xamarin/GooglePlayServicesComponents)|\n\n## How to file issues and get help  \n\nThis project uses GitHub Issues to track bugs and feature requests. Please search the existing \nissues before filing new issues to avoid duplicates.  For new issues, file your bug or \nfeature request as a new Issue.\n\nFor help and questions about using these libraries, please ask questions on [Microsoft Q&A](https://docs.microsoft.com/en-us/answers/products/dotnet).\n\n## Microsoft Support Policy  \n\nSupport for the libraries hosted in this repository are limited to the resources listed above.\n"
        },
        {
          "name": "Util",
          "type": "tree",
          "content": null
        },
        {
          "name": "XPlat",
          "type": "tree",
          "content": null
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 4.6123046875,
          "content": "trigger:\n  - main\n  - refs/tags/*\n\npr:\n  - main\n\nresources:\n  repositories:\n    - repository: internal-templates\n      type: github\n      name: xamarin/yaml-templates\n      endpoint: xamarin\n      ref: refs/heads/main\n    - repository: components\n      type: github\n      name: xamarin/XamarinComponents\n      endpoint: xamarin\n      ref: refs/heads/main\n\nvariables:\n  DotNet6Version: 6.0.300\n  DotNet6Source: https://aka.ms/dotnet6/nuget/index.json\n  NuGetOrgSource: https://api.nuget.org/v3/index.json\n  XamarinDotNetWorkloadSource: workloads.json   # or url (check for recent versions - redth)\n                                                # https://aka.ms/dotnet/maui/6.0.400.json\n  # matching builds\n  # NOTE: there wasn't a public release of 16.11 for macOS\n  LegacyXamarinAndroidPkg:  https://dl.internalx.com/vsts-devdiv/Xamarin.Android/public/6454390/6.0.4xx/0b8d593a61bb49120fdf817e8dfdbc4b33937772/xamarin.android-12.3.99.117.pkg\n  LegacyXamarinAndroidVsix: https://dl.internalx.com/vsts-devdiv/Xamarin.Android/public/6454390/6.0.4xx/0b8d593a61bb49120fdf817e8dfdbc4b33937772/Xamarin.Android.Sdk-12.3.99.117.vsix\njobs:\n  - template: .ci/build.v1.yml@components\n    parameters:\n      timeoutInMinutes: 360\n      areaPath: 'DevDiv\\VS Client - Runtime SDKs\\Android'\n      macosImage: 'macOS-12'                                  # the name of the macOS VM image\n                                                              # Monterey 20220728\n      windowsAgentPoolName: AzurePipelines-EO\n      windowsImage: ''\n      windowsImageOverride: AzurePipelinesWindows2019compliant\n\n      xcode: 13.3.1\n      buildType: 'manifest'\n\n      linuxAgentPoolName: AzurePipelines-EO\n      linuxsImage: ''\n      linuxImageOverride: AzurePipelinesUbuntu20.04compliant\n\n      validPackagePrefixes:\n        # Preferred prefixes\n        - Xamarin\n        - Mono\n        # Other product prefixes\n        - SkiaSharp\n        - HarfBuzzSharp\n        - mdoc\n        # Historical prefixes\n        - Masonry\n        - GoogleGson\n        - AndroidEasingFunctions\n        - Square\n        - JakeWharton.Picasso2OkHttp3Downloader\n        - RecyclerViewAnimators\n        - GoogleGson\n      dotnet: $(DotNet6Version)\n      preBuildSteps:\n        - task: JavaToolInstaller@0\n          displayName: install JDK 11\n          inputs:\n            versionSpec: '11'\n            jdkArchitectureOption: 'x64'\n            jdkSourceOption: 'PreInstalled'\n        - pwsh: |\n            dotnet tool install --global boots\n          displayName: install .NET global tools\n        - pwsh: |\n            boots $(XamarinAndroidPkg)\n          condition: eq(variables['System.JobName'], 'macos')\n          displayName: install Xamarin.Android\n        - pwsh: |\n            boots $(XamarinAndroidVsix)\n          condition: eq(variables['System.JobName'], 'windows')\n          displayName: install Xamarin.Android\n        - pwsh: |\n            dotnet workload update --verbosity diag --from-rollback-file $(XamarinDotNetWorkloadSource) --source $(Dotnet6Source) --source $(NuGetOrgSource)\n            dotnet workload install android --verbosity diag --skip-manifest-update --source $(Dotnet6Source) --source $(NuGetOrgSource)\n            dotnet workload install maui --verbosity diag --skip-manifest-update --source $(Dotnet6Source) --source $(NuGetOrgSource)\n          displayName: install .NET 6 Android Workload\n          condition: ne(variables['System.JobName'], 'linux')\n      tools:\n        - 'xamarin.androidbinderator.tool': '0.5.4'\n        - 'xamarin.androidx.migration.tool': '1.0.10'\n  - ${{ if eq(variables['System.TeamProject'], 'devdiv') }}:\n    - template: sign-artifacts/jobs/v2.yml@internal-templates\n      parameters:\n        dependsOn: [ 'build_linux', 'build_macos', 'windows' ]\n        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')\n    # Executive Order (EO): Software Bill of Materials (SBOM): https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/secure-supply-chain/ado-sbom-generator\n    - template: compliance/sbom/job.v1.yml@internal-templates\n      parameters:\n        dependsOn: [ 'signing' ]\n        artifactNames: [ 'nuget-signed' ]\n        packageName: Xamarin.Components         # SBOM package name. TODO: Customize for specific component: Replace with the name of the nuget package such as Square.Moshi.Adapters\n        packageVersionRegex: ''                 # SBOM package version. TODO: Customize for specific component: Regular expression used to glean the version number from the package name such as '(?i)^Square.Moshi.Adapters\\.(?<version>\\d+\\.\\d+\\.\\d+).nupkg$'\n        packageFilter: '*.nupkg'\n        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')\n"
        },
        {
          "name": "build.cake",
          "type": "blob",
          "size": 1.310546875,
          "content": "var VERBOSITY = Argument (\"v\", Argument (\"verbosity\", Verbosity.Normal));\nvar CONFIGURATION = Argument (\"c\", Argument (\"configuration\", \"Release\"));\n\nvar BUILD_NAMES = Argument (\"names\", Argument (\"name\", \"\"));\nvar BUILD_TARGETS = Argument (\"build-targets\", Argument (\"targets\", Argument (\"target\", \"ci\")));\n\nvar FORCE_BUILD = Argument (\"force\", Argument (\"forcebuild\", Argument (\"force-build\", false)));\nvar POD_REPO_UPDATE = Argument (\"repo-update\", Argument (\"pod-repo-update\", false));\n\nvar ROOT_DIR = MakeAbsolute((DirectoryPath)\".\");\n\nvar COPY_OUTPUT_TO_ROOT = Argument (\"copyoutputtoroot\", true);\nvar ROOT_OUTPUT_DIR = ROOT_DIR.Combine (\"output\");\n\nif (string.IsNullOrEmpty (BUILD_NAMES))\n\tWarning (\"No items were specified, building everything. Use the --names=<comma-separated-names> argument to build a specific item.\");\n\nvar cakeSettings = new CakeSettings {\n\tArguments = new Dictionary<string, string> {\n\t\t{ \"configuration\", CONFIGURATION },\n\t\t{ \"copyoutputtoroot\", COPY_OUTPUT_TO_ROOT.ToString () },\n\t\t{ \"root\", ROOT_DIR.FullPath },\n\t\t{ \"output\", ROOT_DIR.Combine (\"output\").FullPath },\n\t\t{ \"names\", BUILD_NAMES },\n\t\t{ \"targets\", BUILD_TARGETS },\n\t\t{ \"forcebuild\", true.ToString () },\n\t\t{ \"repo-update\", POD_REPO_UPDATE.ToString () },\n\t},\n\tVerbosity = VERBOSITY\n};\n\nCakeExecuteScript (\"./.ci/build-manifest.cake\", cakeSettings);\n"
        },
        {
          "name": "common.cake",
          "type": "blob",
          "size": 12.53515625,
          "content": "\n#addin nuget:?package=Cake.XCode&version=4.2.0\n#addin nuget:?package=Cake.Xamarin.Build&version=4.1.2\n#addin nuget:?package=Cake.Xamarin&version=3.0.2\n#addin nuget:?package=Cake.FileHelpers&version=3.2.1\n#addin nuget:?package=Cake.Yaml&version=3.1.1&loadDependencies=true\n#addin nuget:?package=Cake.Json&version=4.0.0&loadDependencies=true\n\npublic enum TargetOS {\n\tWindows,\n\tMac,\n\tAndroid,\n\tiOS,\n\ttvOS,\n}\n\nvoid BuildXCodeFatLibrary(FilePath xcodeProject, string target, string libraryTitle = null, FilePath fatLibrary = null, DirectoryPath workingDirectory = null, string targetFolderName = null, Dictionary<string, string> buildSettings = null)\n{\n\tBuildXCodeFatLibrary_iOS(xcodeProject, target, libraryTitle, fatLibrary, workingDirectory, targetFolderName, buildSettings);\n}\n\nvoid BuildXCodeFatLibrary_iOS(FilePath xcodeProject, string target, string libraryTitle = null, FilePath fatLibrary = null, DirectoryPath workingDirectory = null, string targetFolderName = null, Dictionary<string, string> buildSettings = null)\n{\n\tif (!IsRunningOnUnix())\n\t{\n\t\tWarning(\"{0} is not available on the current platform.\", \"xcodebuild\");\n\t\treturn;\n\t}\n\n\tlibraryTitle = libraryTitle ?? target;\n\tfatLibrary = fatLibrary ?? string.Format(\"lib{0}.a\", libraryTitle);\n\tworkingDirectory = workingDirectory ?? Directory(\"./externals/\");\n\n\tvar output = string.Format(\"lib{0}.a\", libraryTitle);\n\tvar i386 = string.Format(\"lib{0}-i386.a\", libraryTitle);\n\tvar x86_64 = string.Format(\"lib{0}-x86_64.a\", libraryTitle);\n\tvar armv7 = string.Format(\"lib{0}-armv7.a\", libraryTitle);\n\tvar armv7s = string.Format(\"lib{0}-armv7s.a\", libraryTitle);\n\tvar arm64 = string.Format(\"lib{0}-arm64.a\", libraryTitle);\n\n\tvar buildArch = new Action<string, string, FilePath>((sdk, arch, dest) => {\n\t\tif (!FileExists(dest))\n\t\t{\n\t\t\tXCodeBuild(new XCodeBuildSettings\n\t\t\t{\n\t\t\t\tProject = workingDirectory.CombineWithFilePath(xcodeProject).ToString(),\n\t\t\t\tTarget = target,\n\t\t\t\tSdk = sdk,\n\t\t\t\tArch = arch,\n\t\t\t\tConfiguration = \"Release\",\n\t\t\t\tBuildSettings = buildSettings\n\t\t\t});\n\t\t\tvar tmpOutputPath = workingDirectory.Combine(\"build\").Combine(\"Release-\" + sdk);\n\t\t\tif (!string.IsNullOrEmpty (targetFolderName))\n\t\t\t\ttmpOutputPath = tmpOutputPath.Combine (targetFolderName);\n\t\t\tvar outputPath = tmpOutputPath.CombineWithFilePath(output);\n\n\t\t\tCopyFile(outputPath, dest);\n\t\t}\n\t});\n\n\tbuildArch(\"iphonesimulator\", \"i386\", workingDirectory.CombineWithFilePath(i386));\n\tbuildArch(\"iphonesimulator\", \"x86_64\", workingDirectory.CombineWithFilePath(x86_64));\n\n\tbuildArch(\"iphoneos\", \"armv7\", workingDirectory.CombineWithFilePath(armv7));\n\tbuildArch(\"iphoneos\", \"armv7s\", workingDirectory.CombineWithFilePath(armv7s));\n\tbuildArch(\"iphoneos\", \"arm64\", workingDirectory.CombineWithFilePath(arm64));\n\n\tRunLipoCreate(workingDirectory, fatLibrary, i386, x86_64, armv7, armv7s, arm64);\n}\n\nvoid BuildXCodeFatLibrary_tvOS(FilePath xcodeProject, string target, string libraryTitle = null, FilePath fatLibrary = null, DirectoryPath workingDirectory = null, string targetFolderName = null, Dictionary<string, string> buildSettings = null)\n{\n\tif (!IsRunningOnUnix())\n\t{\n\t\tWarning(\"{0} is not available on the current platform.\", \"xcodebuild\");\n\t\treturn;\n\t}\n\n\tlibraryTitle = libraryTitle ?? target;\n\tfatLibrary = fatLibrary ?? string.Format(\"lib{0}.a\", libraryTitle);\n\tworkingDirectory = workingDirectory ?? Directory(\"./externals/\");\n\n\tvar output = string.Format(\"lib{0}.a\", libraryTitle);\n\tvar x86_64 = string.Format(\"lib{0}-x86_64.a\", libraryTitle);\n\tvar arm64 = string.Format(\"lib{0}-arm64.a\", libraryTitle);\n\n\tvar buildArch = new Action<string, string, FilePath>((sdk, arch, dest) => {\n\t\tif (!FileExists(dest))\n\t\t{\n\t\t\tXCodeBuild(new XCodeBuildSettings\n\t\t\t{\n\t\t\t\tProject = workingDirectory.CombineWithFilePath(xcodeProject).ToString(),\n\t\t\t\tTarget = target,\n\t\t\t\tSdk = sdk,\n\t\t\t\tArch = arch,\n\t\t\t\tConfiguration = \"Release\",\n\t\t\t\tBuildSettings = buildSettings\n\t\t\t});\n\t\t\tvar tmpOutputPath = workingDirectory.Combine(\"build\").Combine(\"Release-\" + sdk);\n\t\t\tif (!string.IsNullOrEmpty (targetFolderName))\n\t\t\t\ttmpOutputPath = tmpOutputPath.Combine (targetFolderName);\n\t\t\tvar outputPath = tmpOutputPath.CombineWithFilePath(output);\n\n\t\t\tCopyFile(outputPath, dest);\n\t\t}\n\t});\n\n\tbuildArch(\"appletvsimulator\", \"x86_64\", workingDirectory.CombineWithFilePath(x86_64));\n\tbuildArch(\"appletvos\", \"arm64\", workingDirectory.CombineWithFilePath(arm64));\n\n\tRunLipoCreate(workingDirectory, fatLibrary, x86_64, arm64);\n}\n\nvoid BuildXCodeFatLibrary_macOS(FilePath xcodeProject, string target, string libraryTitle = null, FilePath fatLibrary = null, DirectoryPath workingDirectory = null, string targetFolderName = null, Dictionary<string, string> buildSettings = null)\n{\n\tif (!IsRunningOnUnix())\n\t{\n\t\tWarning(\"{0} is not available on the current platform.\", \"xcodebuild\");\n\t\treturn;\n\t}\n\n\t// NOTE: 'i386' is no longer supported\n\n\tlibraryTitle = libraryTitle ?? target;\n\tfatLibrary = fatLibrary ?? string.Format(\"lib{0}.a\", libraryTitle);\n\tworkingDirectory = workingDirectory ?? Directory(\"./externals/\");\n\n\tvar output = string.Format(\"lib{0}.a\", libraryTitle);\n\t// var i386 = string.Format(\"lib{0}-i386.a\", libraryTitle);\n\tvar x86_64 = string.Format(\"lib{0}-x86_64.a\", libraryTitle);\n\n\tvar buildArch = new Action<string, string, FilePath>((sdk, arch, dest) => {\n\t\tif (!FileExists(dest))\n\t\t{\n\t\t\tXCodeBuild(new XCodeBuildSettings\n\t\t\t{\n\t\t\t\tProject = workingDirectory.CombineWithFilePath(xcodeProject).ToString(),\n\t\t\t\tTarget = target,\n\t\t\t\tSdk = sdk,\n\t\t\t\tArch = arch,\n\t\t\t\tConfiguration = \"Release\",\n\t\t\t\tBuildSettings = buildSettings\n\t\t\t});\n\t\t\tvar tmpOutputPath = workingDirectory.Combine(\"build\").Combine(\"Release\");\n\t\t\tif (!string.IsNullOrEmpty (targetFolderName))\n\t\t\t\ttmpOutputPath = tmpOutputPath.Combine (targetFolderName);\n\t\t\tvar outputPath = tmpOutputPath.CombineWithFilePath(output);\n\n\t\t\tCopyFile(outputPath, dest);\n\t\t}\n\t});\n\n\tbuildArch(\"macosx\", \"x86_64\", workingDirectory.CombineWithFilePath(x86_64));\n\t// buildArch(\"macosx\", \"i386\", workingDirectory.CombineWithFilePath(i386));\n\n\tRunLipoCreate(workingDirectory, fatLibrary, x86_64);\n\t// RunLipoCreate(workingDirectory, fatLibrary, x86_64, i386);\n}\n\nvoid BuildXCode (FilePath project, string target, string libraryTitle, DirectoryPath workingDirectory, TargetOS os, Dictionary<string, string> buildSettings = null)\n{\n\tif (!IsRunningOnUnix ()) {\n\t\tWarning(\"{0} is not available on the current platform.\", \"xcodebuild\");\n\t\treturn;\n\t}\n\t\n\tvar fatLibrary = string.Format(\"lib{0}.a\", libraryTitle);\n\n\tvar output = string.Format (\"lib{0}.a\", libraryTitle);\n\tvar i386 = string.Format (\"lib{0}-i386.a\", libraryTitle);\n\tvar x86_64 = string.Format (\"lib{0}-x86_64.a\", libraryTitle);\n\tvar armv7 = string.Format (\"lib{0}-armv7.a\", libraryTitle);\n\tvar armv7s = string.Format (\"lib{0}-armv7s.a\", libraryTitle);\n\tvar arm64 = string.Format (\"lib{0}-arm64.a\", libraryTitle);\n\t\n\tvar buildArch = new Action<string, string, FilePath> ((sdk, arch, dest) => {\n\t\tif (!FileExists (dest)) {\n\t\t\tXCodeBuild (new XCodeBuildSettings {\n\t\t\t\tProject = workingDirectory.CombineWithFilePath (project).ToString (),\n\t\t\t\tTarget = target,\n\t\t\t\tSdk = sdk,\n\t\t\t\tArch = arch,\n\t\t\t\tConfiguration = \"Release\",\n\t\t\t\tBuildSettings = buildSettings\n\t\t\t});\n\t\t\tvar outputPath = workingDirectory.Combine (\"build\").Combine (os == TargetOS.Mac ? \"Release\" : (\"Release-\" + sdk)).Combine (target).CombineWithFilePath (output);\n\t\t\tCopyFile (outputPath, dest);\n\t\t}\n\t});\n\t\n\tif (os == TargetOS.Mac) {\n\t\t// not supported anymore\n\t\t// buildArch (\"macosx\", \"i386\", workingDirectory.CombineWithFilePath (i386));\n\t\tbuildArch (\"macosx\", \"x86_64\", workingDirectory.CombineWithFilePath (x86_64));\n\t\t\n\t\tif (!FileExists (workingDirectory.CombineWithFilePath (fatLibrary))) {\n\t\t\tRunLipoCreate (workingDirectory, fatLibrary, x86_64);\n\t\t}\n\t} else if (os == TargetOS.iOS) {\n\t\tbuildArch (\"iphonesimulator\", \"i386\", workingDirectory.CombineWithFilePath (i386));\n\t\tbuildArch (\"iphonesimulator\", \"x86_64\", workingDirectory.CombineWithFilePath (x86_64));\n\t\t\n\t\tbuildArch (\"iphoneos\", \"armv7\", workingDirectory.CombineWithFilePath (armv7));\n\t\tbuildArch (\"iphoneos\", \"armv7s\", workingDirectory.CombineWithFilePath (armv7s));\n\t\tbuildArch (\"iphoneos\", \"arm64\", workingDirectory.CombineWithFilePath (arm64));\n\t\t\n\t\tif (!FileExists (workingDirectory.CombineWithFilePath (fatLibrary))) {\n\t\t\tRunLipoCreate (workingDirectory, fatLibrary, i386, x86_64, armv7, armv7s, arm64);\n\t\t}\n\t} else if (os == TargetOS.tvOS) {\n\t\tbuildArch (\"appletvsimulator\", \"x86_64\", workingDirectory.CombineWithFilePath (x86_64));\n\t\t\n\t\tbuildArch (\"appletvos\", \"arm64\", workingDirectory.CombineWithFilePath (arm64));\n\t\t\n\t\tif (!FileExists (workingDirectory.CombineWithFilePath (fatLibrary))) {\n\t\t\tRunLipoCreate (workingDirectory, fatLibrary, x86_64, arm64);\n\t\t}\n\t}\n}\n\nvoid BuildDynamicXCode (FilePath project, string target, string libraryTitle, DirectoryPath workingDirectory, TargetOS os, Dictionary<string, string> buildSettings = null)\n{\n\tif (!IsRunningOnUnix ()) {\n\t\tWarning(\"{0} is not available on the current platform.\", \"xcodebuild\");\n\t\treturn;\n\t}\n\t\n\tvar fatLibrary = (DirectoryPath)string.Format(\"{0}.framework\", libraryTitle);\n\tvar fatLibraryPath = workingDirectory.Combine (fatLibrary);\n\n\tvar output = (DirectoryPath)string.Format (\"{0}.framework\", libraryTitle);\n\tvar i386 = (DirectoryPath)string.Format (\"{0}-i386.framework\", libraryTitle);\n\tvar x86_64 = (DirectoryPath)string.Format (\"{0}-x86_64.framework\", libraryTitle);\n\tvar armv7 = (DirectoryPath)string.Format (\"{0}-armv7.framework\", libraryTitle);\n\tvar armv7s = (DirectoryPath)string.Format (\"{0}-armv7s.framework\", libraryTitle);\n\tvar arm64 = (DirectoryPath)string.Format (\"{0}-arm64.framework\", libraryTitle);\n\t\n\tvar buildArch = new Action<string, string, DirectoryPath> ((sdk, arch, dest) => {\n\t\tif (!DirectoryExists (dest)) {\n\t\t\tXCodeBuild (new XCodeBuildSettings {\n\t\t\t\tProject = workingDirectory.CombineWithFilePath (project).ToString (),\n\t\t\t\tTarget = target,\n\t\t\t\tSdk = sdk,\n\t\t\t\tArch = arch,\n\t\t\t\tConfiguration = \"Release\",\n\t\t\t\tBuildSettings = buildSettings\n\t\t\t});\n\t\t\tvar outputPath = workingDirectory.Combine (\"build\").Combine (os == TargetOS.Mac ? \"Release\" : (\"Release-\" + sdk)).Combine (target).Combine (output);\n\t\t\tCopyDirectory (outputPath, dest);\n\t\t}\n\t});\n\t\n\tif (os == TargetOS.Mac) {\n\t\tbuildArch (\"macosx\", \"x86_64\", workingDirectory.Combine (x86_64));\n\t\t\n\t\tif (!DirectoryExists (fatLibraryPath)) {\n\t\t\tCopyDirectory (workingDirectory.Combine (x86_64), fatLibraryPath);\n\t\t\tRunLipoCreate (workingDirectory, fatLibrary.CombineWithFilePath (libraryTitle), \n\t\t\t\tx86_64.CombineWithFilePath (libraryTitle));\n\t\t}\n\t} else if (os == TargetOS.iOS) {\n\t\tbuildArch (\"iphonesimulator\", \"i386\", workingDirectory.Combine (i386));\n\t\tbuildArch (\"iphonesimulator\", \"x86_64\", workingDirectory.Combine (x86_64));\n\t\t\n\t\tbuildArch (\"iphoneos\", \"armv7\", workingDirectory.Combine (armv7));\n\t\tbuildArch (\"iphoneos\", \"armv7s\", workingDirectory.Combine (armv7s));\n\t\tbuildArch (\"iphoneos\", \"arm64\", workingDirectory.Combine (arm64));\n\t\t\n\t\tif (!DirectoryExists (fatLibraryPath)) {\n\t\t\tCopyDirectory (workingDirectory.Combine (arm64), fatLibraryPath);\n\t\t\tRunLipoCreate (workingDirectory, fatLibrary.CombineWithFilePath (libraryTitle), \n\t\t\t\ti386.CombineWithFilePath (libraryTitle),\n\t\t\t\tx86_64.CombineWithFilePath (libraryTitle),\n\t\t\t\tarmv7.CombineWithFilePath (libraryTitle),\n\t\t\t\tarmv7s.CombineWithFilePath (libraryTitle),\n\t\t\t\tarm64.CombineWithFilePath (libraryTitle));\n\t\t}\n\t} else if (os == TargetOS.tvOS) {\n\t\tbuildArch (\"appletvsimulator\", \"x86_64\", workingDirectory.Combine (x86_64));\n\t\t\n\t\tbuildArch (\"appletvos\", \"arm64\", workingDirectory.Combine (arm64));\n\t\t\n\t\tif (!DirectoryExists (fatLibraryPath)) {\n\t\t\tCopyDirectory (workingDirectory.Combine (arm64), fatLibraryPath);\n\t\t\tRunLipoCreate (workingDirectory, fatLibrary.CombineWithFilePath (libraryTitle), \n\t\t\t\tx86_64.CombineWithFilePath (libraryTitle),\n\t\t\t\tarm64.CombineWithFilePath (libraryTitle));\n\t\t}\n\t}\n}\n\nvoid DownloadMonoSources (string tag, DirectoryPath dest, params string[] urls)\n{\n\tvar rootUrl = $\"https://github.com/mono/mono/raw/{tag}\";\n\n\tEnsureDirectoryExists (dest);\n\tforeach (var originalUrl in urls) {\n\t\t// make sure the urls are rooted\n\t\tvar url = originalUrl;\n\t\tif (!url.StartsWith (\"http:\") && !url.StartsWith (\"https:\")) {\n\t\t\turl = $\"{rootUrl}/{url}\";\n\t\t}\n\t\t// get the path parts\n\t\tvar file = url.Substring (url.LastIndexOf (\"/\") + 1);\n\t\tvar dir = url.Substring (0, url.LastIndexOf (\"/\"));\n\t\tvar destFile = dest.CombineWithFilePath (file);\n\t\t// download the file\n\t\tif (!FileExists (destFile)) {\n\t\t\tInformation ($\"Downloading '{url}' to '{destFile}'...\");\n\t\t\tDownloadFile (url, destFile);\n\t\t}\n\t\t// if this is a .sources file, download all the listed files too\n\t\tif (file.EndsWith (\".sources\")) {\n\t\t\tvar listedFiles = FileReadLines (destFile)\n\t\t\t\t.Where (f => !f.StartsWith (\"..\"))\n\t\t\t\t.Select (f => $\"{dir}/{f}\")\n\t\t\t\t.ToArray ();\n\t\t\tDownloadMonoSources (tag, dest, listedFiles);\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.2080078125,
          "content": "{\n    \"msbuild-sdks\": \n    {\n        \"MSBuild.Sdk.Extras\": \"3.0.44\",\n        \"Microsoft.Build.Traversal\": \"3.1.6\",\n        \"Microsoft.Build.NoTargets\": \"3.4.0\",\n        \"Xamarin.Legacy.Sdk\": \"0.1.2-alpha6\"\n    }\n}"
        },
        {
          "name": "iOS",
          "type": "tree",
          "content": null
        },
        {
          "name": "manifest.yaml",
          "type": "blob",
          "size": 24.787109375,
          "content": "#######################################################\n# Android\n#######################################################\n\n- Name: AndroidEasingFunctions\n  BuildScript: ./Android/AndroidEasingFunctions/build.cake\n  TriggerPaths: [ Android/AndroidEasingFunctions ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: AndroidSwipeLayout\n  BuildScript: ./Android/AndroidSwipeLayout/build.cake\n  TriggerPaths: [ Android/AndroidSwipeLayout ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: ARCore\n  BuildScript: ./Android/ARCore/build.cake\n  TriggerPaths: [ Android/ARCore ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: Coil\n  BuildScript: ./Android/Coil/build.cake\n  TriggerPaths: [ Android/Coil ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: ConstraintLayout\n  BuildScript: ./Android/ConstraintLayout/build.cake\n  TriggerPaths: [ Android/ConstraintLayout ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: CoilBase\n  BuildScript: ./Android/CoilBase/build.cake\n  TriggerPaths: [ Android/CoilBase ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: GoogleAndroidVending\n  BuildScript: ./Android/GoogleAndroidVending/build.cake\n  TriggerPaths: [ Android/GoogleAndroidVending ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n# Obsolete\n# - Name: AndroidThings\n#   BuildScript: ./Android/AndroidThings/build.cake\n#   TriggerPaths: [ Android/AndroidThings ]\n#   MacBuildTargets: [ nuget ]\n- Name: AndroidViewAnimations\n  BuildScript: ./Android/AndroidViewAnimations/build.cake\n  TriggerPaths: [ Android/AndroidViewAnimations ]\n  MacBuildTargets: [ nuget, samples ]\n# Obsolete\n# - Name: AnimatedCircleLoadingView\n#   BuildScript: ./Android/AnimatedCircleLoadingView/build.cake\n#   TriggerPaths: [ Android/AnimatedCircleLoadingView ]\n#   MacBuildTargets: [ nuget, samples ]\n- Name: AutoFitTextView\n  BuildScript: ./Android/AutoFitTextView/build.cake\n  TriggerPaths: [ Android/AutoFitTextView ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: BetterPickers\n  BuildScript: ./Android/BetterPickers/build.cake\n  TriggerPaths: [ Android/BetterPickers ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: BlurBehind\n  BuildScript: ./Android/BlurBehind/build.cake\n  TriggerPaths: [ Android/BlurBehind ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: Blurring\n  BuildScript: ./Android/Blurring/build.cake\n  TriggerPaths: [ Android/Blurring ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: Crashlytics\n  BuildScript: ./Android/Crashlytics/build.cake\n  TriggerPaths: [ Android/Crashlytics ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: RenderScriptV8\n  BuildScript: ./Android/RenderScriptV8/build.cake\n  TriggerPaths: [ Android/RenderScriptV8 ]\n  MacBuildTargets: [ nuget, samples ]\n  WindowsBuildTargets: [ nuget, samples ]\n- Name: ShimmerLayout\n  BuildScript: ./Android/ShimmerLayout/build.cake\n  TriggerPaths: [ Android/ShimmerLayout ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: Bolts\n  BuildScript: ./Android/Bolts/build.cake\n  TriggerPaths: [ Android/Bolts ]\n  MacBuildTargets: [ libs, nuget ]\n- Name: ViewPropertyObjectAnimator\n  BuildScript: ./Android/ViewPropertyObjectAnimator/build.cake\n  TriggerPaths: [ Android/ViewPropertyObjectAnimator ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: DeviceYearClass\n  BuildScript: ./Android/DeviceYearClass/build.cake\n  TriggerPaths: [ Android/DeviceYearClass ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: ElasticProgressBar\n  BuildScript: ./Android/ElasticProgressBar/build.cake\n  TriggerPaths: [ Android/ElasticProgressBar ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: FirebaseJobDispatcher\n  BuildScript: ./Android/FirebaseJobDispatcher/build.cake\n  TriggerPaths: [ Android/FirebaseJobDispatcher ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: Timber\n  BuildScript: ./Android/Timber/build.cake\n  TriggerPaths: [ Android/Timber ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: Explosions\n  BuildScript: ./Android/Explosions/build.cake\n  TriggerPaths: [ Android/Explosions ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: FloatingSearchView\n  BuildScript: ./Android/FloatingSearchView/build.cake\n  TriggerPaths: [ Android/FloatingSearchView ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: JacksonCore\n  BuildScript: ./Android/Jackson.Core/build.cake\n  TriggerPaths: [ Android/Jackson.Core ]\n  MacBuildTargets: [ nuget ]\n- Name: JazzyViewPager\n  BuildScript: ./Android/JazzyViewPager/build.cake\n  TriggerPaths: [ Android/JazzyViewPager ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: KenBurnsView\n  BuildScript: ./Android/KenBurnsView/build.cake\n  TriggerPaths: [ Android/KenBurnsView ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: MinimalJson\n  BuildScript: ./Android/MinimalJson/build.cake\n  TriggerPaths: [ Android/MinimalJson ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: NineOldAndroids\n  BuildScript: ./Android/NineOldAndroids/build.cake\n  TriggerPaths: [ Android/NineOldAndroids ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: NumberProgressBar\n  BuildScript: ./Android/NumberProgressBar/build.cake\n  TriggerPaths: [ Android/NumberProgressBar ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: PhotoView\n  BuildScript: ./Android/PhotoView/build.cake\n  TriggerPaths: [ Android/PhotoView ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: PdfViewPager\n  BuildScript: ./Android/PdfViewPager/build.cake\n  TriggerPaths: [ Android/PdfViewPager ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: RecyclerViewAnimators\n  BuildScript: ./Android/RecyclerViewAnimators/build.cake\n  TriggerPaths: [ Android/RecyclerViewAnimators ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: ReLinker\n  BuildScript: ./Android/ReLinker/build.cake\n  TriggerPaths: [ Android/ReLinker ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: RecyclerView.FastScroll\n  BuildScript: ./Android/RecyclerView.FastScroll/build.cake\n  TriggerPaths: [ Android/RecyclerView.FastScroll ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: RoundedImageView\n  BuildScript: ./Android/RoundedImageView/build.cake\n  TriggerPaths: [ Android/RoundedImageView ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: Scissors\n  BuildScript: ./Android/Scissors/build.cake\n  TriggerPaths: [ Android/Scissors ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: Screenshooter\n  BuildScript: ./Android/Screenshooter/build.cake\n  TriggerPaths: [ Android/Screenshooter ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: SortableTableView\n  BuildScript: ./Android/SortableTableView/build.cake\n  TriggerPaths: [ Android/SortableTableView ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: StickyHeader\n  BuildScript: ./Android/StickyHeader/build.cake\n  TriggerPaths: [ Android/StickyHeader ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: StickyListHeaders\n  BuildScript: ./Android/StickyListHeaders/build.cake\n  TriggerPaths: [ Android/StickyListHeaders ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: UniversalImageLoader\n  BuildScript: ./Android/UniversalImageLoader/build.cake\n  TriggerPaths: [ Android/UniversalImageLoader ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: UrlImageViewHelper\n  BuildScript: ./Android/UrlImageViewHelper/build.cake\n  TriggerPaths: [ Android/UrlImageViewHelper ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: VectorCompat\n  BuildScript: ./Android/VectorCompat/build.cake\n  TriggerPaths: [ Android/VectorCompat ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: Wear\n  BuildScript: ./Android/Wear/build.cake\n  TriggerPaths: [ Android/Wear ]\n  MacBuildTargets: [ samples, nuget ]\n- Name: GoogleLibPhoneNumber\n  BuildScript: ./Android/Google.LibPhoneNumber/build.cake\n  TriggerPaths: [ Android/Google.LibPhoneNumber ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: SceneForm\n  BuildScript: ./Android/SceneForm/build.cake\n  TriggerPaths: [ Android/SceneForm ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: SurfaceDuo\n  BuildScript: ./Android/SurfaceDuo/build.cake\n  TriggerPaths: [ Android/SurfaceDuo ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: GooglePlaces\n  BuildScript: ./Android/GooglePlaces/build.cake\n  TriggerPaths: [ Android/GooglePlaces ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: JakeWhartonPicasso2OkHttp3Downloader\n  BuildScript: ./Android/JakeWhartonPicasso2OkHttp3Downloader/build.cake\n  TriggerPaths: [ Android/JakeWhartonPicasso2OkHttp3Downloader ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: SignalRJavaClient\n  BuildScript: ./Android/SignalRJavaClient/build.cake\n  TriggerPaths: [ Android/SignalRJavaClient ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: SquareAndroidTimesSquare\n  BuildScript: ./Android/SquareAndroidTimesSquare/build.cake\n  TriggerPaths: [ Android/SquareAndroidTimesSquare ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: SquareOkHttp3v3\n  BuildScript: ./Android/SquareOkHttp3-v3/build.cake\n  TriggerPaths: [ Android/SquareOkHttp3-v3 ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: SquareOkHttp3UrlConnectionv3\n  BuildScript: ./Android/SquareOkHttp3UrlConnection-v3/build.cake\n  TriggerPaths: [ Android/SquareOkHttp3UrlConnection-v3 ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: SquareOkHttp3WS\n  BuildScript: ./Android/SquareOkHttp3WS/build.cake\n  TriggerPaths: [ Android/SquareOkHttp3WS ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: SquarePollexor\n  BuildScript: ./Android/SquarePollexor/build.cake\n  TriggerPaths: [ Android/SquarePollexor ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: SquareRetrofit2ConverterMoshi\n  BuildScript: ./Android/SquareRetrofit2ConverterMoshi/build.cake\n  TriggerPaths: [ Android/SquareRetrofit2ConverterMoshi ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: SquareSeismic\n  BuildScript: ./Android/SquareSeismic/build.cake\n  TriggerPaths: [ Android/SquareSeismic ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: SquareMoshi\n  BuildScript: ./Android/SquareMoshi/build.cake\n  TriggerPaths: [ Android/SquareMoshi ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: SquareMoshiKotlin\n  BuildScript: ./Android/SquareMoshiKotlin/build.cake\n  TriggerPaths: [ Android/SquareMoshiKotlin ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: SquareMoshiAdapters\n  BuildScript: ./Android/SquareMoshiAdapters/build.cake\n  TriggerPaths: [ Android/SquareMoshiAdapters ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: DesugarJDKLibs\n  BuildScript: ./Android/DesugarJDKLibs/build.cake\n  TriggerPaths: [ Android/DesugarJDKLibs ]\n  WindowsBuildTargets: [ ci ]\n  MacBuildTargets: [ ci ]\n- Name: SignalR.Java.Client\n  BuildScript: ./Android/SignalRJavaClient/build.cake\n  TriggerPaths: [ Android/SignalRJavaClient ]\n  WindowsBuildTargets: [ ci ]\n  MacBuildTargets: [ ci ]\n- Name: Twilio.AudioSwitch\n  BuildScript: ./Android/AudioSwitch/build.cake\n  TriggerPaths: [ Android/AudioSwitch ]\n  WindowsBuildTargets: [ ci ]\n  MacBuildTargets: [ ci ]\n\n# will be XPlat in the future\n- Name: ThreeTenAbp\n  BuildScript: ./Android/ThreeTenAbp/build.cake\n  TriggerPaths: [ Android/ThreeTenAbp ]\n  MacBuildTargets: [ libs, nuget]\n  WindowsBuildTargets: [ libs, nuget]\n- Name: TokenAutoComplete\n  BuildScript: ./Android/TokenAutoComplete/build.cake\n  TriggerPaths: [ Android/TokenAutoComplete ]\n  MacBuildTargets: [ libs, nuget]\n  WindowsBuildTargets: [ libs, nuget]\n- Name:  CheckerFramework.Checker\n  BuildScript: ./Android/CheckerFramework.Checker/build.cake\n  TriggerPaths: [ Android/CheckerFramework.Checker ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n\n\n#######################################################\n# iOS\n#######################################################\n\n- Name: AMScrollingNavbar\n  BuildScript: ./iOS/AMScrollingNavbar/build.cake\n  TriggerPaths: [ iOS/AMScrollingNavbar ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: AMViralSwitch\n  BuildScript: ./iOS/AMViralSwitch/build.cake\n  TriggerPaths: [ iOS/AMViralSwitch ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: AnimatedCheckButton\n  BuildScript: ./iOS/AnimatedCheckButton/build.cake\n  TriggerPaths: [ iOS/AnimatedCheckButton ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: AnimatedShapeButton\n  BuildScript: ./iOS/AnimatedShapeButton/build.cake\n  TriggerPaths: [ iOS/AnimatedShapeButton ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: AdvancedColorPicker\n  BuildScript: ./iOS/AdvancedColorPicker/build.cake\n  TriggerPaths: [ iOS/AdvancedColorPicker ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: Chameleon\n  BuildScript: ./iOS/Chameleon/build.cake\n  TriggerPaths: [ iOS/Chameleon ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: DACircularProgress\n  BuildScript: ./iOS/DACircularProgress/build.cake\n  TriggerPaths: [ iOS/DACircularProgress ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: DZNEmptyDataSet\n  BuildScript: ./iOS/DZNEmptyDataSet/build.cake\n  TriggerPaths: [ iOS/DZNEmptyDataSet ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: FacebookPop\n  BuildScript: ./iOS/FacebookPop/build.cake\n  TriggerPaths: [ iOS/FacebookPop ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: FXBlurView\n  BuildScript: ./iOS/FXBlurView/build.cake\n  TriggerPaths: [ iOS/FXBlurView ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: GPUImage\n  BuildScript: ./iOS/GPUImage/build.cake\n  TriggerPaths: [ iOS/GPUImage ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: HDNotification\n  BuildScript: ./iOS/HDNotification/build.cake\n  TriggerPaths: [ iOS/HDNotification ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: iCarousel\n  BuildScript: ./iOS/iCarousel/build.cake\n  TriggerPaths: [ iOS/iCarousel ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: InAppSettingsKit\n  BuildScript: ./iOS/InAppSettingsKit/build.cake\n  TriggerPaths: [ iOS/InAppSettingsKit ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: iRate\n  BuildScript: ./iOS/iRate/build.cake\n  TriggerPaths: [ iOS/iRate ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: JDStatusBarNotification\n  BuildScript: ./iOS/JDStatusBarNotification/build.cake\n  TriggerPaths: [ iOS/JDStatusBarNotification ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: JSQMessagesViewController\n  BuildScript: ./iOS/JSQMessagesViewController/build.cake\n  TriggerPaths: [ iOS/JSQMessagesViewController ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: JZMultiChoicesCircleButton\n  BuildScript: ./iOS/JZMultiChoicesCircleButton/build.cake\n  TriggerPaths: [ iOS/JZMultiChoicesCircleButton ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: LiquidFloatingActionButton\n  BuildScript: ./iOS/LiquidFloatingActionButton/build.cake\n  TriggerPaths: [ iOS/LiquidFloatingActionButton ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: TwitterImagePipeline\n  BuildScript: ./iOS/TwitterImagePipeline/build.cake\n  TriggerPaths: [ iOS/TwitterImagePipeline ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: Masonry\n  BuildScript: ./iOS/Masonry/build.cake\n  TriggerPaths: [ iOS/Masonry ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: MaterialComponents\n  BuildScript: ./iOS/MaterialComponents/build.cake\n  TriggerPaths: [ iOS/MaterialComponents ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: MBAlertView\n  BuildScript: ./iOS/MBAlertView/build.cake\n  TriggerPaths: [ iOS/MBAlertView ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: MBProgressHUD\n  BuildScript: ./iOS/MBProgressHUD/build.cake\n  TriggerPaths: [ iOS/MBProgressHUD ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: MWPhotoBrowser\n  BuildScript: ./iOS/MWPhotoBrowser/build.cake\n  TriggerPaths: [ iOS/MWPhotoBrowser ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: PullToBounce\n  BuildScript: ./iOS/PullToBounce/build.cake\n  TriggerPaths: [ iOS/PullToBounce ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: RZTransitions\n  BuildScript: ./iOS/RZTransitions/build.cake\n  TriggerPaths: [ iOS/RZTransitions ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: SCCatWaitingHUD\n  BuildScript: ./iOS/SCCatWaitingHUD/build.cake\n  TriggerPaths: [ iOS/SCCatWaitingHUD ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: SimplePing\n  BuildScript: ./iOS/SimplePing/build.cake\n  TriggerPaths: [ iOS/SimplePing ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: SDWebImage\n  BuildScript: ./iOS/SDWebImage/build.cake\n  TriggerPaths: [ iOS/SDWebImage ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: Shimmer\n  BuildScript: ./iOS/Shimmer/build.cake\n  TriggerPaths: [ iOS/Shimmer ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: SidePanels\n  BuildScript: ./iOS/SidePanels/build.cake\n  TriggerPaths: [ iOS/SidePanels ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: SlackTextViewController\n  BuildScript: ./iOS/SlackTextViewController/build.cake\n  TriggerPaths: [ iOS/SlackTextViewController ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: SWTableViewCell\n  BuildScript: ./iOS/SWTableViewCell/build.cake\n  TriggerPaths: [ iOS/SWTableViewCell ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: TextSwitch\n  BuildScript: ./iOS/TextSwitch/build.cake\n  TriggerPaths: [ iOS/TextSwitch ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: TPKeyboardAvoiding\n  BuildScript: ./iOS/TPKeyboardAvoiding/build.cake\n  TriggerPaths: [ iOS/TPKeyboardAvoiding ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: TransitionSubmit\n  BuildScript: ./iOS/TransitionSubmit/build.cake\n  TriggerPaths: [ iOS/TransitionSubmit ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: VideoSplash\n  BuildScript: ./iOS/VideoSplash/build.cake\n  TriggerPaths: [ iOS/VideoSplash ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: ZipArchive\n  BuildScript: ./iOS/ZipArchive/build.cake\n  TriggerPaths: [ iOS/ZipArchive ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: SDSegmentedControl\n  BuildScript: ./iOS/SDSegmentedControl/build.cake\n  TriggerPaths: [ iOS/SDSegmentedControl ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: XamDialogs\n  BuildScript: ./iOS/XamDialogs/build.cake\n  TriggerPaths: [ iOS/XamDialogs ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: APDropDownNavToolbar\n  BuildScript: ./iOS/APDropDownNavToolbar/build.cake\n  TriggerPaths: [ iOS/APDropDownNavToolbar ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: REFrostedViewController\n  BuildScript: ./iOS/REFrostedViewController/build.cake\n  TriggerPaths: [ iOS/REFrostedViewController ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: TrackbeamTheme\n  BuildScript: ./iOS/TrackbeamTheme/build.cake\n  TriggerPaths: [ iOS/TrackbeamTheme ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: IQAudioRecorderController\n  BuildScript: ./iOS/IQAudioRecorderController/build.cake\n  TriggerPaths: [ iOS/IQAudioRecorderController ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: PickerCells\n  BuildScript: ./iOS/PickerCells/build.cake\n  TriggerPaths: [ iOS/PickerCells ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: JVMenuPopover\n  BuildScript: ./iOS/JVMenuPopover/build.cake\n  TriggerPaths: [ iOS/JVMenuPopover ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: SwiftRuntimeSupport\n  BuildScript: ./iOS/SwiftRuntimeSupport/build.cake\n  TriggerPaths: [ iOS/SwiftRuntimeSupport ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: ExposureNotificationiOS\n  BuildScript: ./iOS/ExposureNotification/build.cake\n  TriggerPaths: [ iOS/ExposureNotification ]\n  MacBuildTargets: [ nuget ]\n- Name: ExposureNotificationAndroid\n  BuildScript: ./Android/ExposureNotification/build.cake\n  TriggerPaths: [ Android/ExposureNotification ]\n  MacBuildTargets: [ nuget ]\n- Name: ExposureNotification\n  BuildScript: ./XPlat/ExposureNotification/build.cake\n  TriggerPaths: [ XPlat/ExposureNotification ]\n  MacBuildTargets: [ nuget ]\n\n#######################################################\n# XPlat\n#######################################################\n\n# - Name: DropboxCoreApiAndroid - obsolete\n#   BuildScript: ./XPlat/DropboxCoreApi/Android/build.cake\n#   TriggerPaths: [ XPlat/DropboxCoreApi/Android ]\n#   MacBuildTargets: [ nuget, samples ]\n# - Name: DropboxCoreApiiOS - obsolete\n#   BuildScript: ./XPlat/DropboxCoreApi/iOS/build.cake\n#   TriggerPaths: [ XPlat/DropboxCoreApi/iOS ]\n#   MacBuildTargets: [ nuget, samples ]\n- Name: GoogleVRAndroid\n  BuildScript: ./XPlat/GoogleVR/Android/build.cake\n  TriggerPaths: [ XPlat/GoogleVR/Android ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: GoogleVRiOS\n  BuildScript: ./XPlat/GoogleVR/iOS/build.cake\n  TriggerPaths: [ XPlat/GoogleVR/iOS ]\n  MacBuildTargets: [ nuget, samples ]\n# Obsolete\n# - Name: OpenId\n#   BuildScript: ./XPlat/OpenId/build.cake\n#   TriggerPaths: [ XPlat/OpenId ]\n#   MacBuildTargets: [ nuget, samples ]\n- Name: AzureMessaging\n  BuildScript: ./XPlat/AzureMessaging/build.cake\n  TriggerPaths: [ XPlat/AzureMessaging ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: YouTube.Player.Android\n  BuildScript: ./XPlat/YouTube.Player/android/build.cake\n  TriggerPaths: [ XPlat/YouTube.Player/android ]\n  MacBuildTargets: [ nuget, samples ]\n# - Name: YouTube.Player.iOS\n#   BuildScript: ./XPlat/YouTube.Player/ios/build.cake\n#   TriggerPaths: [ XPlat/YouTube.Player/ios ]\n#   MacBuildTargets: [ nuget, samples ]\n- Name: CardIOAndroid\n  BuildScript: ./XPlat/CardIO/Android/build.cake\n  TriggerPaths: [ XPlat/CardIO/Android ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: CardIOiOS\n  BuildScript: ./XPlat/CardIO/iOS/build.cake\n  TriggerPaths: [ XPlat/CardIO/iOS ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: VK\n  BuildScript: ./XPlat/VK/build.cake\n  TriggerPaths: [ XPlat/VK ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: Mono.DataConverter\n  BuildScript: ./XPlat/Mono.DataConverter/build.cake\n  TriggerPaths: [ XPlat/Mono.DataConverter ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: LoginScreen\n  BuildScript: ./XPlat/LoginScreen/build.cake\n  TriggerPaths: [ XPlat/LoginScreen ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: Mapbox\n  BuildScript: ./XPlat/Mapbox/build.cake\n  TriggerPaths: [ XPlat/Mapbox ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: Mono.Terminal\n  BuildScript: ./XPlat/Mono.Terminal/build.cake\n  TriggerPaths: [ XPlat/Mono.Terminal ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: Mono.Options\n  BuildScript: ./XPlat/Mono.Options/build.cake\n  TriggerPaths: [ XPlat/Mono.Options ]\n  MacBuildTargets: [ ci ]\n  WindowsBuildTargets: [ ci ]\n- Name: Mono.ApiTools\n  BuildScript: ./XPlat/Mono.ApiTools/build.cake\n  TriggerPaths: [ XPlat/Mono.ApiTools ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: EstimoteAndroid\n  BuildScript: ./XPlat/Estimote/Android/build.cake\n  TriggerPaths: [ XPlat/Estimote/Android ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: EstimoteiOS\n  BuildScript: ./XPlat/Estimote/iOS/build.cake\n  TriggerPaths: [ XPlat/Estimote/iOS ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: RadialProgress\n  BuildScript: ./XPlat/RadialProgress/build.cake\n  TriggerPaths: [ XPlat/RadialProgress ]\n  MacBuildTargets: [ nuget, samples ]\n# Obsolete\n# - Name: ShopifyAndroid\n#   BuildScript: ./XPlat/Shopify/Android/build.cake\n#   TriggerPaths: [ XPlat/Shopify/Android ]\n#   MacBuildTargets: [ nuget, samples ]\n# Obsolete\n# - Name: ShopifyiOS\n#   BuildScript: ./XPlat/Shopify/iOS/build.cake\n#   TriggerPaths: [ XPlat/Shopify/iOS ]\n#   MacBuildTargets: [ nuget, samples ]\n- Name: StripeiOSBindings\n  BuildScript: ./XPlat/Stripe/bindings/iOS/build.cake\n  TriggerPaths: [ XPlat/Stripe/bindings/iOS ]\n  MacBuildTargets: [ nuget, samples ]\n# - Name: StripeAndroidBindings\n#   BuildScript: ./XPlat/Stripe/bindings/Android/build.cake\n#   TriggerPaths: [ XPlat/Stripe/bindings/Android ]\n#   MacBuildTargets: [ nuget, samples ]\n# - Name: DropboxApiV2\n#   BuildScript: ./XPlat/DropboxApiV2/build.cake\n#   TriggerPaths: [ XPlat/DropboxApiV2 ]\n#   MacBuildTargets: [ nuget, samples ]\n- Name: OfficeUIFabricAndroid\n  BuildScript: ./XPlat/OfficeUIFabric/Android/build.cake\n  TriggerPaths: [ XPlat/OfficeUIFabric/Android ]\n  MacBuildTargets: [ nuget, samples ]\n- Name: OfficeUIFabriciOS\n  BuildScript: ./XPlat/OfficeUIFabric/iOS/build.cake\n  TriggerPaths: [ XPlat/OfficeUIFabric/iOS ]\n  MacBuildTargets: [ nuget, samples ]\n- Name:  Mono.Posix\n  BuildScript: ./XPlat/Mono.Posix/build.cake\n  TriggerPaths: [ XPlat/Mono.Posix ]\n  LinuxBuildTargets: [ ci ]\n\n#######################################################\n# Mac\n#######################################################\n\n- Name: ITSwitch\n  BuildScript: ./Mac/ITSwitch/build.cake\n  TriggerPaths: [ Mac/ITSwitch ]\n  MacBuildTargets: [ nuget, samples ]\n\n#######################################################\n# Utilities\n#######################################################\n\n- Name: Cake.Xamarin.Binding.Util\n  BuildScript: ./Util/Cake.Xamarin.Binding.Util/build.cake\n  TriggerPaths: [ Util/Cake.Xamarin.Binding.Util ]\n  MacBuildTargets: [ nuget ]\n- Name: Xamarin.Nuget.Validator\n  BuildScript: ./Util/NugetAuditor/build.cake\n  TriggerPaths: [ Util/NugetAuditor ]\n  MacBuildTargets: [ nuget ]\n- Name: SamplePackager\n  BuildScript: ./Util/SamplePackager/build.cake\n  TriggerPaths: [ Util/SamplePackager ]\n  MacBuildTargets: [ nuget ]\n- Name: AndroidManifestMerger\n  BuildScript: ./Util/AndroidManifestMerger/build.cake\n  TriggerPaths: [ Util/AndroidManifestMerger ]\n  WindowsBuildTargets: [ ci ]\n  MacBuildTargets: [ ci ]\n- Name: Xamarin.Build.TypeRedirector\n  BuildScript: ./Util/Xamarin.Build.TypeRedirector/build.cake\n  TriggerPaths: [ Util/Xamarin.Build.TypeRedirector ]\n  WindowsBuildTargets: [ ci ]\n  MacBuildTargets: [ ci ]\n- Name: Xamarin.Kotlin.BindingSupport\n  BuildScript: ./Util/Xamarin.Kotlin.BindingSupport/build.cake\n  TriggerPaths: [ Util/Xamarin.Kotlin.BindingSupport ]\n  WindowsBuildTargets: [ nuget, samples ]\n  MacBuildTargets: [ nuget, samples ]\n"
        }
      ]
    }
  ]
}