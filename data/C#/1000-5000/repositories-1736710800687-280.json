{
  "metadata": {
    "timestamp": 1736710800687,
    "page": 280,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mini-software/MiniExcel",
      "stars": 2875,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.462890625,
          "content": "[*.{cs,vb}]\n\n# IDE0009: Member access should be qualified.\ndotnet_style_qualification_for_event = false\n\n# IDE0009: Member access should be qualified.\ndotnet_style_qualification_for_field = false\n\n# IDE0009: Member access should be qualified.\ndotnet_style_qualification_for_property = false\n\n# IDE0009: Member access should be qualified.\ndotnet_style_qualification_for_method = false\n\n# IDE0065: Misplaced using directive\ncsharp_using_directive_placement = outside_namespace"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.74609375,
          "content": "ï»¿* text=auto\n\n*.doc  diff=astextplain\n*.DOC\tdiff=astextplain\n*.docx\tdiff=astextplain\n*.DOCX\tdiff=astextplain\n*.dot\tdiff=astextplain\n*.DOT\tdiff=astextplain\n*.pdf\tdiff=astextplain\n*.PDF\tdiff=astextplain\n*.rtf\tdiff=astextplain\n*.RTF\tdiff=astextplain\n\n*.jpg binary\n*.png binary\n*.gif binary\n\n*.cs -text diff=csharp\n*.vb -text\n*.c -text\n*.cpp -text\n*.cxx -text\n*.h -text\n*.hxx -text\n*.py -text\n*.rb -text\n*.java -text\n*.html -text\n*.htm -text\n*.css -text\n*.scss -text\n*.sass -text\n*.less -text\n*.js -text\n*.lisp -text\n*.clj -text\n*.sql -text\n*.php -text\n*.lua -text\n*.m -text\n*.asm -text\n*.erl -text\n*.fs -text\n*.fsx -text\n*.hs -text\n\n*.csproj -text merge=union\n*.vbproj -text merge=union\n*.fsproj -text merge=union\n*.dbproj -text merge=union\n*.sln -text merge=union\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 6.7880859375,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/main/VisualStudio.gitignore\n\n# User-specific files\n*.rsuser\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Mono auto generated files\nmono_crash.*\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\n[Ww][Ii][Nn]32/\n[Aa][Rr][Mm]/\n[Aa][Rr][Mm]64/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n[Ll]ogs/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUnit\n*.VisualState.xml\nTestResult.xml\nnunit-*.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n# ASP.NET Scaffolding\nScaffoldingReadMe.txt\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_h.h\n*.ilk\n*.meta\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*_wpftmp.csproj\n*.log\n*.tlog\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/*\n!.axoCover/settings.json\n\n# Coverlet is a free, cross platform Code Coverage Tool\ncoverage*.json\ncoverage*.xml\ncoverage*.info\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# NuGet Symbol Packages\n*.snupkg\n# The packages folder can be ignored because of Package Restore\n**/[Pp]ackages/*\n# except build/, which is used as an MSBuild target.\n!**/[Pp]ackages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/[Pp]ackages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n*.appxbundle\n*.appxupload\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!?*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk\n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n*- [Bb]ackup.rdl\n*- [Bb]ackup ([0-9]).rdl\n*- [Bb]ackup ([0-9][0-9]).rdl\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio 6 auto-generated project file (contains which files were open etc.)\n*.vbp\n\n# Visual Studio 6 workspace and project file (working project files containing files to include in project)\n*.dsw\n*.dsp\n\n# Visual Studio 6 technical files\n*.ncb\n*.aps\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# CodeRush personal settings\n.cr/personal\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output\nASALocalRun/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder\n.mfractor/\n\n# Local History for Visual Studio\n.localhistory/\n\n# Visual Studio History (VSHistory) files\n.vshistory/\n\n# BeatPulse healthcheck temp database\nhealthchecksdb\n\n# Backup folder for Package Reference Convert tool in Visual Studio 2017\nMigrationBackup/\n\n# Ionide (cross platform F# VS Code tools) working folder\n.ionide/\n\n# Fody - auto-generated XML schema\nFodyWeavers.xsd\n\n# VS Code files for those working on multiple tools\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n*.code-workspace\n\n# Local History for Visual Studio Code\n.history/\n\n# Windows Installer files from build outputs\n*.cab\n*.msi\n*.msix\n*.msm\n*.msp\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n/BenchmarkDotNet.Artifacts\n/tests/MiniExcel.Tests.AspNetMvc/packages\n/TestTemplate\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MiniExcel.sln",
          "type": "blob",
          "size": 3.0380859375,
          "content": "ï»¿\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio Version 17\r\nVisualStudioVersion = 17.0.31903.59\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"MiniExcelLibs\", \"src\\MiniExcel\\MiniExcelLibs.csproj\", \"{097903C9-1F81-4427-B4C8-530CB59687B8}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Docs and setting\", \"Docs and setting\", \"{2AFABF2E-D6C3-4983-B43A-76ADA2BB2876}\"\r\n\tProjectSection(SolutionItems) = preProject\r\n\t\t.gitattributes = .gitattributes\r\n\t\t.gitignore = .gitignore\r\n\t\tappveyor.yml = appveyor.yml\r\n\t\t.github\\workflows\\dotnet.yml = .github\\workflows\\dotnet.yml\r\n\t\tLICENSE = LICENSE\r\n\t\tREADME-NuGet.md = README-NuGet.md\r\n\t\tREADME.md = README.md\r\n\t\tREADME.zh-CN.md = README.zh-CN.md\r\n\t\tREADME.zh-Hant.md = README.zh-Hant.md\r\n\tEndProjectSection\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"src\", \"src\", \"{CC1E0601-AEC9-42D7-8F6A-3FB3939EED16}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"tests\", \"tests\", \"{359A7094-3353-48F2-B3E1-FE9E59698318}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Releases\", \"Releases\", \"{3E370222-8E9E-45E8-8DCD-E5F41EE52A39}\"\r\n\tProjectSection(SolutionItems) = preProject\r\n\t\tdocs\\README.md = docs\\README.md\r\n\t\tdocs\\README.zh-CN.md = docs\\README.zh-CN.md\r\n\t\tdocs\\README.zh-Hant.md = docs\\README.zh-Hant.md\r\n\tEndProjectSection\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"MiniExcelTests\", \"tests\\MiniExcelTests\\MiniExcelTests.csproj\", \"{77F2C86B-0F17-4370-AB38-A089F9DF4ED5}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"benchmarks\", \"benchmarks\", \"{77A8A169-168B-457F-AB5F-48F30D6BB33C}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{097903C9-1F81-4427-B4C8-530CB59687B8}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{097903C9-1F81-4427-B4C8-530CB59687B8}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{097903C9-1F81-4427-B4C8-530CB59687B8}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{097903C9-1F81-4427-B4C8-530CB59687B8}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{77F2C86B-0F17-4370-AB38-A089F9DF4ED5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{77F2C86B-0F17-4370-AB38-A089F9DF4ED5}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{77F2C86B-0F17-4370-AB38-A089F9DF4ED5}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{77F2C86B-0F17-4370-AB38-A089F9DF4ED5}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(NestedProjects) = preSolution\r\n\t\t{097903C9-1F81-4427-B4C8-530CB59687B8} = {CC1E0601-AEC9-42D7-8F6A-3FB3939EED16}\r\n\t\t{77F2C86B-0F17-4370-AB38-A089F9DF4ED5} = {359A7094-3353-48F2-B3E1-FE9E59698318}\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {51DF25DA-2DCB-4883-90FE-399DA950D4F2}\r\n\tEndGlobalSection\r\nEndGlobal\r\n"
        },
        {
          "name": "README-NuGet.md",
          "type": "blob",
          "size": 3.828125,
          "content": "\nThis project is part of the [.NET Foundation](https://dotnetfoundation.org/projects/project-detail/miniexcel) and operates under their code of conduct.\n\n---\n\n### Introduction\n\nMiniExcel is simple and efficient to avoid OOM's .NET processing Excel tool.\n\nAt present, most popular frameworks need to load all the data into the memory to facilitate operation, but it will cause memory consumption problems. MiniExcel tries to use algorithm from a stream to reduce the original 1000 MB occupation to a few MB to avoid OOM(out of memory).\n\n![image](https://user-images.githubusercontent.com/12729184/113086657-ab8bd000-9214-11eb-9563-c970ac1ee35e.png)\n\n\n### Features\n\n- Low memory consumption, avoid OOM (out of memory) and full GC\n- Support `real-time` operation of each row of data\n- Support LINQ deferred execution, it can do low-consumption, fast paging and other complex queries\n- Lightweight, without Microsoft Office installed, no COM+, DLL size is less than 150KB\n- Easy API style to read/write/fill excel\n\n### Get Started\n\n- [Import/Query Excel](#getstart1)\n\n- [Export/Create Excel](#getstart2)\n\n- [Excel Template](#getstart3)\n\n- [Excel Column Name/Index/Ignore Attribute](#getstart4)\n\n- [Examples](#getstart5)\n\n\n\n### Installation\n\nYou can install the package [from NuGet](https://www.nuget.org/packages/MiniExcel)\n\n### Release Notes\n\nPlease Check [Release Notes](docs)\n\n### TODO\n\nPlease Check  [TODO](https://github.com/shps951023/MiniExcel/projects/1?fullscreen=true)\n\n### Performance\n\nBenchmarks logic can be found in  [MiniExcel.Benchmarks](benchmarks/MiniExcel.Benchmarks/Program.cs) , and test cli\n\n```bash\ndotnet run -p .\\benchmarks\\MiniExcel.Benchmarks\\ -c Release -f netcoreapp3.1 -- -f * --join\n```\n\nOutput from the latest run is :\n\n```bash\nBenchmarkDotNet=v0.12.1, OS=Windows 10.0.19042\nIntel Core i7-7700 CPU 3.60GHz (Kaby Lake), 1 CPU, 8 logical and 4 physical cores\n  [Host]     : .NET Framework 4.8 (4.8.4341.0), X64 RyuJIT\n  Job-ZYYABG : .NET Framework 4.8 (4.8.4341.0), X64 RyuJIT\nIterationCount=3  LaunchCount=3  WarmupCount=3\n```\n\nBenchmark History :  [Link](https://github.com/shps951023/MiniExcel/issues/276)\n\n\n\n#### Import/Query Excel\n\nLogic : [**Test1,000,000x10.xlsx**](benchmarks/MiniExcel.Benchmarks/Test1%2C000%2C000x10.xlsx)  as performance test basic file, 1,000,000 rows * 10 columns  \"HelloWorld\" cells, 23 MB file size\n\n\n| Library      | Method                       | Max Memory Usage |         Mean |\n| ---------------------------- | -------------: | ---------------: | ---------------: |\n| MiniExcel | 'MiniExcel QueryFirst'       |       0.109 MB | 0.0007264 sec |\n| ExcelDataReader | 'ExcelDataReader QueryFirst' |       15.24 MB | 10.66421 sec |\n| MiniExcel  | 'MiniExcel Query'            |        17.3 MB | 14.17933 sec |\n| ExcelDataReader | 'ExcelDataReader Query'      |        17.3 MB | 22.56508 sec |\n| Epplus    | 'Epplus QueryFirst'          |       1,452 MB | 18.19801 sec |\n| Epplus        | 'Epplus Query'               |       1,451 MB | 23.64747 sec |\n| OpenXmlSDK | 'OpenXmlSDK Query'           |       1,412 MB | 52.00327 sec |\n| OpenXmlSDK | 'OpenXmlSDK QueryFirst'      |       1,413 MB | 52.34865 sec |\n| ClosedXml | 'ClosedXml QueryFirst'       |       2,158 MB | 66.18897 sec |\n| ClosedXml  | 'ClosedXml Query'            |       2,184 MB | 191.43412 sec |\n\n#### Export/Create Excel\n\nLogic : create a total of 10,000,000 \"HelloWorld\" excel\n\n| Library            | Method                   | Max Memory Usage |         Mean |\n| ------------------------ | -------------: | ---------------: | -----------: |\n| MiniExcel | 'MiniExcel Create Xlsx'  |          15 MB | 11.53181 sec |\n| Epplus | 'Epplus Create Xlsx'     |       1,204 MB | 22.50971 sec |\n| OpenXmlSdk | 'OpenXmlSdk Create Xlsx' |       2,621 MB | 42.47399 sec |\n| ClosedXml | 'ClosedXml Create Xlsx'  |       7,141 MB | 140.93992 sec |\n\n\n\n### Documents\n\nhttps://github.com/mini-software/MiniExcel\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 57.20703125,
          "content": "<div align=\"center\">\n<p><a href=\"https://www.nuget.org/packages/MiniExcel\"><img src=\"https://img.shields.io/nuget/v/MiniExcel.svg\" alt=\"NuGet\"></a>  <a href=\"https://www.nuget.org/packages/MiniExcel\"><img src=\"https://img.shields.io/nuget/dt/MiniExcel.svg\" alt=\"\"></a>\n<a href=\"https://ci.appveyor.com/project/shps951023/miniexcel/branch/master\"><img src=\"https://ci.appveyor.com/api/projects/status/b2vustrwsuqx45f4/branch/master?svg=true\" alt=\"Build status\"></a>\n<a href=\"https://gitee.com/dotnetchina/MiniExcel\"><img src=\"https://gitee.com/dotnetchina/MiniExcel/badge/star.svg\" alt=\"star\"></a> <a href=\"https://github.com/shps951023/MiniExcel\" rel=\"nofollow\"><img src=\"https://img.shields.io/github/stars/shps951023/MiniExcel?logo=github\" alt=\"GitHub stars\"></a>\n<a href=\"https://www.nuget.org/packages/MiniExcel\"><img src=\"https://img.shields.io/badge/.NET-%3E%3D%204.5-red.svg\" alt=\"version\"></a>\n</p>\n</div>\n\n---\n\n[<img align=\"right\" src=\"https://github.com/dotnet-foundation/swag/blob/main/logo/dotnetfoundation_v4.png?raw=true\" width=\"100\" />](https://www.dotnetfoundation.org/)\n\n<div align=\"center\">\n<p>This project is part of the <a href=\"https://www.dotnetfoundation.org/\">.NET Foundation</a> and operates under their <a href=\"https://www.dotnetfoundation.org/code-of-conduct\">code of conduct</a>. </p>\n</div>\n\n---\n\n<div align=\"center\">\n<p><strong><a href=\"README.md\">English</a> | <a href=\"README.zh-CN.md\">ç®ä½ä¸­æ</a> | <a href=\"README.zh-Hant.md\">ç¹é«ä¸­æ</a></strong></p>\n</div>\n\n---\n\n<div align=\"center\">\n Your <a href=\"https://github.com/shps951023/MiniExcel\">Star</a> and <a href=\"https://miniexcel.github.io\">Donate</a> can make MiniExcel better\n</div>\n\n---\n\n### Introduction\n\nMiniExcel is simple and efficient to avoid OOM's .NET processing Excel tool.\n\nAt present, most popular frameworks need to load all the data into the memory to facilitate operation, but it will cause memory consumption problems. MiniExcel tries to use algorithm from a stream to reduce the original 1000 MB occupation to a few MB to avoid OOM(out of memory).\n\n![image](https://user-images.githubusercontent.com/12729184/113086657-ab8bd000-9214-11eb-9563-c970ac1ee35e.png)\n\n\n\n\n### Features\n\n- Low memory consumption, avoid OOM (out of memory) and full GC\n- Support `real-time` operation of each row of data\n- Support LINQ deferred execution, it can do low-consumption, fast paging and other complex queries\n- Lightweight, without Microsoft Office installed, no COM+, DLL size is less than 150KB\n- Easy API style to read/write/fill excel\n\n### Get Started\n\n- [Import/Query Excel](#getstart1)\n\n- [Export/Create Excel](#getstart2)\n\n- [Excel Template](#getstart3)\n\n- [Excel Column Name/Index/Ignore Attribute](#getstart4)\n\n- [Examples](#getstart5)\n\n\n\n### Installation\n\nYou can install the package [from NuGet](https://www.nuget.org/packages/MiniExcel)\n\n### Release Notes\n\nPlease Check [Release Notes](docs)\n\n### TODO\n\nPlease Check  [TODO](https://github.com/shps951023/MiniExcel/projects/1?fullscreen=true)\n\n### Performance\n\nBenchmarks logic can be found in  [MiniExcel.Benchmarks](benchmarks/MiniExcel.Benchmarks/Program.cs) , and test cli\n\n```bash\ndotnet run -p .\\benchmarks\\MiniExcel.Benchmarks\\ -c Release -f netcoreapp3.1 -- -f * --join\n```\n\nOutput from the latest run is :\n\n```bash\nBenchmarkDotNet=v0.12.1, OS=Windows 10.0.19042\nIntel Core i7-7700 CPU 3.60GHz (Kaby Lake), 1 CPU, 8 logical and 4 physical cores\n  [Host]     : .NET Framework 4.8 (4.8.4341.0), X64 RyuJIT\n  Job-ZYYABG : .NET Framework 4.8 (4.8.4341.0), X64 RyuJIT\nIterationCount=3  LaunchCount=3  WarmupCount=3\n```\n\nBenchmark History :  [Link](https://github.com/shps951023/MiniExcel/issues/276)\n\n\n\n#### Import/Query Excel\n\nLogic : [**Test1,000,000x10.xlsx**](benchmarks/MiniExcel.Benchmarks/Test1%2C000%2C000x10.xlsx)  as performance test basic file, 1,000,000 rows * 10 columns  \"HelloWorld\" cells, 23 MB file size\n\n\n| Library      | Method                       | Max Memory Usage |         Mean |\n| ---------------------------- | -------------: | ---------------: | ---------------: |\n| MiniExcel | 'MiniExcel QueryFirst'       |       0.109 MB | 0.0007264 sec |\n| ExcelDataReader | 'ExcelDataReader QueryFirst' |       15.24 MB | 10.66421 sec |\n| MiniExcel  | 'MiniExcel Query'            |        17.3 MB | 14.17933 sec |\n| ExcelDataReader | 'ExcelDataReader Query'      |        17.3 MB | 22.56508 sec |\n| Epplus    | 'Epplus QueryFirst'          |       1,452 MB | 18.19801 sec |\n| Epplus        | 'Epplus Query'               |       1,451 MB | 23.64747 sec |\n| OpenXmlSDK | 'OpenXmlSDK Query'           |       1,412 MB | 52.00327 sec |\n| OpenXmlSDK | 'OpenXmlSDK QueryFirst'      |       1,413 MB | 52.34865 sec |\n| ClosedXml | 'ClosedXml QueryFirst'       |       2,158 MB | 66.18897 sec |\n| ClosedXml  | 'ClosedXml Query'            |       2,184 MB | 191.43412 sec |\n\n#### Export/Create Excel\n\nLogic : create a total of 10,000,000 \"HelloWorld\" excel\n\n| Library            | Method                   | Max Memory Usage |         Mean |\n| ------------------------ | -------------: | ---------------: | -----------: |\n| MiniExcel | 'MiniExcel Create Xlsx'  |          15 MB | 11.53181 sec |\n| Epplus | 'Epplus Create Xlsx'     |       1,204 MB | 22.50971 sec |\n| OpenXmlSdk | 'OpenXmlSdk Create Xlsx' |       2,621 MB | 42.47399 sec |\n| ClosedXml | 'ClosedXml Create Xlsx'  |       7,141 MB | 140.93992 sec |\n\n### Excel Query/Import  <a name=\"getstart1\"></a>\n\n#### 1. Execute a query and map the results to a strongly typed IEnumerable [[Try it]](https://dotnetfiddle.net/w5WD1J)\n\nRecommand to use Stream.Query because of better efficiency.\n\n```csharp\npublic class UserAccount\n{\n    public Guid ID { get; set; }\n    public string Name { get; set; }\n    public DateTime BoD { get; set; }\n    public int Age { get; set; }\n    public bool VIP { get; set; }\n    public decimal Points { get; set; }\n}\n\nvar rows = MiniExcel.Query<UserAccount>(path);\n\n// or\n\nusing (var stream = File.OpenRead(path))\n    var rows = stream.Query<UserAccount>();\n```\n\n![image](https://user-images.githubusercontent.com/12729184/111107423-c8c46b80-8591-11eb-982f-c97a2dafb379.png)\n\n#### 2. Execute a query and map it to a list of dynamic objects without using head [[Try it]](https://dotnetfiddle.net/w5WD1J)\n\n* dynamic key is `A.B.C.D..`\n\n| MiniExcel     | 1     |\n| -------- | -------- |\n| Github     | 2     |\n\n```csharp\n\nvar rows = MiniExcel.Query(path).ToList();\n\n// or\nusing (var stream = File.OpenRead(path))\n{\n    var rows = stream.Query().ToList();\n\n    Assert.Equal(\"MiniExcel\", rows[0].A);\n    Assert.Equal(1, rows[0].B);\n    Assert.Equal(\"Github\", rows[1].A);\n    Assert.Equal(2, rows[1].B);\n}\n```\n\n#### 3. Execute a query with first header row [[Try it]](https://dotnetfiddle.net/w5WD1J)\n\nnote : same column name use last right one\n\nInput Excel :\n\n| Column1 | Column2 |\n| -------- | -------- |\n| MiniExcel     | 1     |\n| Github     | 2     |\n\n\n```csharp\n\nvar rows = MiniExcel.Query(useHeaderRow:true).ToList();\n\n// or\n\nusing (var stream = File.OpenRead(path))\n{\n    var rows = stream.Query(useHeaderRow:true).ToList();\n\n    Assert.Equal(\"MiniExcel\", rows[0].Column1);\n    Assert.Equal(1, rows[0].Column2);\n    Assert.Equal(\"Github\", rows[1].Column1);\n    Assert.Equal(2, rows[1].Column2);\n}\n```\n\n#### 4. Query Support LINQ Extension First/Take/Skip ...etc\n\nQuery First\n```csharp\nvar row = MiniExcel.Query(path).First();\nAssert.Equal(\"HelloWorld\", row.A);\n\n// or\n\nusing (var stream = File.OpenRead(path))\n{\n    var row = stream.Query().First();\n    Assert.Equal(\"HelloWorld\", row.A);\n}\n```\n\nPerformance between MiniExcel/ExcelDataReader/ClosedXML/EPPlus\n![queryfirst](https://user-images.githubusercontent.com/12729184/111072392-6037a900-8515-11eb-9693-5ce2dad1e460.gif)\n\n#### 5. Query by sheet name\n\n```csharp\nMiniExcel.Query(path, sheetName: \"SheetName\");\n//or\nstream.Query(sheetName: \"SheetName\");\n```\n\n#### 6. Query all sheet name and rows\n\n```csharp\nvar sheetNames = MiniExcel.GetSheetNames(path);\nforeach (var sheetName in sheetNames)\n{\n    var rows = MiniExcel.Query(path, sheetName: sheetName);\n}\n```\n\n#### 7. Get Columns\n\n```csharp\nvar columns = MiniExcel.GetColumns(path); // e.g result : [\"A\",\"B\"...]\n\nvar cnt = columns.Count;  // get column count\n```\n\n#### 8. Dynamic Query cast row to `IDictionary<string,object>`\n\n```csharp\nforeach(IDictionary<string,object> row in MiniExcel.Query(path))\n{\n    //..\n}\n\n// or\nvar rows = MiniExcel.Query(path).Cast<IDictionary<string,object>>();\n// or Query specified ranges (capitalized)\n// A2 represents the second row of column A, C3 represents the third row of column C\n// If you don't want to restrict rows, just don't include numbers\nvar rows = MiniExcel.QueryRange(path, startCell: \"A2\", endCell: \"C3\").Cast<IDictionary<string, object>>();\n```\n\n\n\n#### 9. Query Excel return DataTable\n\nNot recommended, because DataTable will load all data into memory and lose MiniExcel's low memory consumption feature.\n\n```C#\nvar table = MiniExcel.QueryAsDataTable(path, useHeaderRow: true);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/116673475-07917200-a9d6-11eb-947e-a6f68cce58df.png)\n\n\n\n#### 10. Specify the cell to start reading data\n\n```csharp\nMiniExcel.Query(path,useHeaderRow:true,startCell:\"B3\")\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117260316-8593c400-ae81-11eb-9877-c087b7ac2b01.png)\n\n\n\n#### 11. Fill Merged Cells\n\nNote: The efficiency is slower compared to `not using merge fill`\n\nReason: The OpenXml standard puts mergeCells at the bottom of the file, which leads to the need to foreach the sheetxml twice\n\n```csharp\n    var config = new OpenXmlConfiguration()\n    {\n        FillMergedCells = true\n    };\n    var rows = MiniExcel.Query(path, configuration: config);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117973630-3527d500-b35f-11eb-95c3-bde255f8114e.png)\n\nsupport variable length and width multi-row and column filling\n\n![image](https://user-images.githubusercontent.com/12729184/117973820-6d2f1800-b35f-11eb-88d8-555063938108.png)\n\n#### 12. Reading big file by disk-base cache (Disk-Base Cache - SharedString)\n\nIf the SharedStrings size exceeds 5 MB, MiniExcel default will use local disk cache, e.g, [10x100000.xlsx](https://github.com/MiniExcel/MiniExcel/files/8403819/NotDuplicateSharedStrings_10x100000.xlsx)(one million rows data), when disable disk cache the maximum memory usage is 195MB, but able disk cache only needs 65MB. Note, this optimization needs some efficiency cost, so this case will increase reading time from 7.4 seconds to 27.2 seconds, If you don't need it that you can disable disk cache with the following code:\n\n```csharp\nvar config = new OpenXmlConfiguration { EnableSharedStringCache = false };\nMiniExcel.Query(path,configuration: config)\n```\n\nYou can use `SharedStringCacheSize ` to change the sharedString file size beyond the specified size for disk caching\n```csharp\nvar config = new OpenXmlConfiguration { SharedStringCacheSize=500*1024*1024 };\nMiniExcel.Query(path, configuration: config);\n```\n\n\n![image](https://user-images.githubusercontent.com/12729184/161411851-1c3f72a7-33b3-4944-84dc-ffc1d16747dd.png)\n\n![image](https://user-images.githubusercontent.com/12729184/161411825-17f53ec7-bef4-4b16-b234-e24799ea41b0.png)\n\n\n\n\n\n\n\n\n\n### Create/Export Excel  <a name=\"getstart2\"></a>\n\n1. Must be a non-abstract type with a public parameterless constructor .\n\n2. MiniExcel support parameter IEnumerable Deferred Execution, If you want to use least memory, please do not call methods such as ToList\n\ne.g : ToList or not memory usage\n![image](https://user-images.githubusercontent.com/12729184/112587389-752b0b00-8e38-11eb-8a52-cfb76c57e5eb.png)\n\n\n\n#### 1. Anonymous or strongly type [[Try it]](https://dotnetfiddle.net/w5WD1J)\n\n```csharp\nvar path = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid()}.xlsx\");\nMiniExcel.SaveAs(path, new[] {\n    new { Column1 = \"MiniExcel\", Column2 = 1 },\n    new { Column1 = \"Github\", Column2 = 2}\n});\n```\n\n#### 2. `IEnumerable<IDictionary<string, object>>`\n\n```csharp\nvar values = new List<Dictionary<string, object>>()\n{\n    new Dictionary<string,object>{{ \"Column1\", \"MiniExcel\" }, { \"Column2\", 1 } },\n    new Dictionary<string,object>{{ \"Column1\", \"Github\" }, { \"Column2\", 2 } }\n};\nMiniExcel.SaveAs(path, values);\n```\n\nCreate File Result :\n\n| Column1 | Column2 |\n| -------- | -------- |\n| MiniExcel     | 1     |\n| Github     | 2     |\n\n\n#### 3.  IDataReader\n- `Recommended`, it can avoid to load all data into memory\n```csharp\nMiniExcel.SaveAs(path, reader);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/121275378-149a5e80-c8bc-11eb-85fe-5453552134f0.png)\n\nDataReader export multiple sheets (recommand by Dapper ExecuteReader)\n\n```csharp\nusing (var cnn = Connection)\n{\n    cnn.Open();\n    var sheets = new Dictionary<string,object>();\n    sheets.Add(\"sheet1\", cnn.ExecuteReader(\"select 1 id\"));\n    sheets.Add(\"sheet2\", cnn.ExecuteReader(\"select 2 id\"));\n    MiniExcel.SaveAs(\"Demo.xlsx\", sheets);\n}\n```\n\n\n\n#### 4. Datatable\n\n- `Not recommended`, it will load all data into memory\n\n- DataTable use Caption for column name first, then use columname\n\n```csharp\nvar path = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid()}.xlsx\");\nvar table = new DataTable();\n{\n    table.Columns.Add(\"Column1\", typeof(string));\n    table.Columns.Add(\"Column2\", typeof(decimal));\n    table.Rows.Add(\"MiniExcel\", 1);\n    table.Rows.Add(\"Github\", 2);\n}\n\nMiniExcel.SaveAs(path, table);\n```\n\n####  5. Dapper Query\n\nThanks @shaofing #552 , please use `CommandDefinition + CommandFlags.NoCache`\n\n```csharp\nusing (var connection = GetConnection(connectionString))\n{\n    var rows = connection.Query(\n        new CommandDefinition(\n            @\"select 'MiniExcel' as Column1,1 as Column2 union all select 'Github',2\"\n            , flags: CommandFlags.NoCache)\n        );\n    // Note: QueryAsync will throw close connection exception\n    MiniExcel.SaveAs(path, rows);\n}\n```\n\nBelow code will load all data into memory\n\n```csharp\nusing (var connection = GetConnection(connectionString))\n{\n    var rows = connection.Query(@\"select 'MiniExcel' as Column1,1 as Column2 union all select 'Github',2\");\n    MiniExcel.SaveAs(path, rows);\n}\n```\n\n\n#### 6. SaveAs to MemoryStream  [[Try it]](https://dotnetfiddle.net/JOen0e)\n\n```csharp\nusing (var stream = new MemoryStream()) //support FileStream,MemoryStream ect.\n{\n    stream.SaveAs(values);\n}\n```\n\ne.g : api of export excel\n\n```csharp\npublic IActionResult DownloadExcel()\n{\n    var values = new[] {\n        new { Column1 = \"MiniExcel\", Column2 = 1 },\n        new { Column1 = \"Github\", Column2 = 2}\n    };\n\n    var memoryStream = new MemoryStream();\n    memoryStream.SaveAs(values);\n    memoryStream.Seek(0, SeekOrigin.Begin);\n    return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n    {\n        FileDownloadName = \"demo.xlsx\"\n    };\n}\n```\n\n\n#### 7. Create Multiple Sheets\n\n```csharp\n// 1. Dictionary<string,object>\nvar users = new[] { new { Name = \"Jack\", Age = 25 }, new { Name = \"Mike\", Age = 44 } };\nvar department = new[] { new { ID = \"01\", Name = \"HR\" }, new { ID = \"02\", Name = \"IT\" } };\nvar sheets = new Dictionary<string, object>\n{\n    [\"users\"] = users,\n    [\"department\"] = department\n};\nMiniExcel.SaveAs(path, sheets);\n\n// 2. DataSet\nvar sheets = new DataSet();\nsheets.Add(UsersDataTable);\nsheets.Add(DepartmentDataTable);\n//..\nMiniExcel.SaveAs(path, sheets);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/118130875-6e7c4580-b430-11eb-9b82-22f02716bd63.png)\n\n\n#### 8. TableStyles Options\n\nDefault style\n\n![image](https://user-images.githubusercontent.com/12729184/138234373-cfa97109-b71f-4711-b7f5-0eaaa4a0a3a6.png)\n\nWithout style configuration\n\n```csharp\nvar config = new OpenXmlConfiguration()\n{\n     TableStyles = TableStyles.None\n};\nMiniExcel.SaveAs(path, value,configuration:config);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/118784917-f3e57700-b8c2-11eb-8718-8d955b1bc197.png)\n\n\n#### 9. AutoFilter\n\nSince v0.19.0  `OpenXmlConfiguration.AutoFilter` can en/unable AutoFilter , default value is `true`, and setting AutoFilter way:\n\n```csharp\nMiniExcel.SaveAs(path, value, configuration: new OpenXmlConfiguration() { AutoFilter = false });\n```\n\n\n\n#### 10. Create Image\n\n```csharp\nvar value = new[] {\n    new { Name=\"github\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/github_logo.png\"))},\n    new { Name=\"google\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/google_logo.png\"))},\n    new { Name=\"microsoft\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/microsoft_logo.png\"))},\n    new { Name=\"reddit\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/reddit_logo.png\"))},\n    new { Name=\"statck_overflow\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/statck_overflow_logo.png\"))},\n};\nMiniExcel.SaveAs(path, value);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/150462383-ad9931b3-ed8d-4221-a1d6-66f799743433.png)\n\n\n\n#### 11. Byte Array File Export\n\nSince 1.22.0, when value type is `byte[]` then system will save file path at cell by default, and when import system can be converted to `byte[]`. And if you don't want to use it, you can set  `OpenXmlConfiguration.EnableConvertByteArray` to `false`, it can improve the system efficiency.\n\n![image](https://user-images.githubusercontent.com/12729184/153702334-c3b834f4-6ae4-4ddf-bd4e-e5005d5d8c6a.png)\n\nSince 1.22.0, when value type is `byte[]` then system will save file path at cell by default, and when import system can be converted to `byte[]`. And if you don't want to use it, you can set  `OpenXmlConfiguration.EnableConvertByteArray` to `false`, it can improve the system efficiency.\n\n![image](https://user-images.githubusercontent.com/12729184/153702334-c3b834f4-6ae4-4ddf-bd4e-e5005d5d8c6a.png)\n\n#### 12. Merge same cells vertically\n\nThis functionality is only supported in `xlsx` format and merges cells vertically between @merge and @endmerge tags.\nYou can use @mergelimit to limit boundaries of merging cells vertically.\n\n```csharp\nvar mergedFilePath = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid().ToString()}.xlsx\");\n\nvar path = @\"../../../../../samples/xlsx/TestMergeWithTag.xlsx\";\n\nMiniExcel.MergeSameCells(mergedFilePath, path);\n```\n\n```csharp\nvar memoryStream = new MemoryStream();\n\nvar path = @\"../../../../../samples/xlsx/TestMergeWithTag.xlsx\";\n\nmemoryStream.MergeSameCells(path);\n```\n\nFile content before and after merge:\n\nWithout merge limit:\n\n<img width=\"318\" alt=\"Screenshot 2023-08-07 at 11 59 24\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/49cc96b9-6c35-4bf3-8d43-a9752a15b22e\">\n\n<img width=\"318\" alt=\"Screenshot 2023-08-07 at 11 59 57\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/3fbd529b-3ae6-4bbe-b4d8-2793a5a58010\">\n\nWith merge limit:\n\n<img width=\"346\" alt=\"Screenshot 2023-08-08 at 18 21 00\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/04049d28-84d5-4c2a-bcff-5847547df5e1\">\n\n<img width=\"346\" alt=\"Screenshot 2023-08-08 at 18 21 40\" src=\"https://github.com/mini-software/MiniExcel/assets/38832863/f5cf8957-b0b0-4831-b8fc-8556299235c2\">\n\n#### 13. Skip null values\n\nNew explicit option to write empty cells for null values:\n\n```csharp\nDataTable dt = new DataTable();\n\n/* ... */\n\nDataRow dr = dt.NewRow();\n\ndr[\"Name1\"] = \"Somebody once\";\ndr[\"Name2\"] = null;\ndr[\"Name3\"] = \"told me.\";\n\ndt.Rows.Add(dr);\n\nOpenXmlConfiguration configuration = new OpenXmlConfiguration()\n{\n     EnableWriteNullValueCell = true // Default value.\n};\n\nMiniExcel.SaveAs(@\"C:\\temp\\Book1.xlsx\", dt, configuration: configuration);\n```\n\n![image](https://user-images.githubusercontent.com/31481586/241419455-3c0aec8a-4e5f-4d83-b7ec-6572124c165d.png)\n\n```xml\n<x:row r=\"2\">\n    <x:c r=\"A2\" t =\"str\" s=\"2\">\n        <x:v>Somebody once</x:v>\n    </x:c>\n    <x:c r=\"B2\" s=\"2\"></x:c>\n    <x:c r=\"C2\" t =\"str\" s=\"2\">\n        <x:v>told me.</x:v>\n    </x:c>\n</x:row>\n```\n\nPrevious behavior:\n\n```csharp\n/* ... */\n\nOpenXmlConfiguration configuration = new OpenXmlConfiguration()\n{\n     EnableWriteNullValueCell = false // Default value is true.\n};\n\nMiniExcel.SaveAs(@\"C:\\temp\\Book1.xlsx\", dt, configuration: configuration);\n```\n\n![image](https://user-images.githubusercontent.com/31481586/241419441-c4f27e8f-3f87-46db-a10f-08665864c874.png)\n\n```xml\n<x:row r=\"2\">\n    <x:c r=\"A2\" t =\"str\" s=\"2\">\n        <x:v>Somebody once</x:v>\n    </x:c>\n    <x:c r=\"B2\" t =\"str\" s=\"2\">\n        <x:v></x:v>\n    </x:c>\n    <x:c r=\"C2\" t =\"str\" s=\"2\">\n        <x:v>told me.</x:v>\n    </x:c>\n</x:row>\n```\n\nWorks for null and DBNull values.\n\n#### 14. Freeze Panes\n```csharp\n/* ... */\n\nOpenXmlConfiguration configuration = new OpenXmlConfiguration()\n{\n    FreezeRowCount = 1,     // default is 1\n    FreezeColumnCount = 2   // default is 0\n};\n\nMiniExcel.SaveAs(@\"C:\\temp\\Book1.xlsx\", dt, configuration: configuration);\n```\n\n![image](docs/images/freeze-pane-1.png)\n\n\n### Fill Data To Excel Template <a name=\"getstart3\"></a>\n\n- The declaration is similar to Vue template `{{variable name}}`, or the collection rendering `{{collection name.field name}}`\n- Collection rendering support IEnumerable/DataTable/DapperRow\n\n#### 1. Basic Fill\n\nTemplate:\n![image](https://user-images.githubusercontent.com/12729184/114537556-ed8d2b00-9c84-11eb-8303-a69f62c41e5b.png)\n\nResult:\n![image](https://user-images.githubusercontent.com/12729184/114537490-d8180100-9c84-11eb-8c69-db58692f3a85.png)\n\nCode:\n```csharp\n// 1. By POCO\nvar value = new\n{\n    Name = \"Jack\",\n    CreateDate = new DateTime(2021, 01, 01),\n    VIP = true,\n    Points = 123\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n\n\n// 2. By Dictionary\nvar value = new Dictionary<string, object>()\n{\n    [\"Name\"] = \"Jack\",\n    [\"CreateDate\"] = new DateTime(2021, 01, 01),\n    [\"VIP\"] = true,\n    [\"Points\"] = 123\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```\n\n\n\n#### 2. IEnumerable Data Fill\n\n> Note1: Use the first IEnumerable of the same column as the basis for filling list\n\nTemplate:\n![image](https://user-images.githubusercontent.com/12729184/114564652-14f2f080-9ca3-11eb-831f-09e3fedbc5fc.png)\n\nResult:\n![image](https://user-images.githubusercontent.com/12729184/114564204-b2015980-9ca2-11eb-900d-e21249f93f7c.png)\n\nCode:\n```csharp\n//1. By POCO\nvar value = new\n{\n    employees = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Lisa\",department=\"HR\"},\n        new {name=\"John\",department=\"HR\"},\n        new {name=\"Mike\",department=\"IT\"},\n        new {name=\"Neo\",department=\"IT\"},\n        new {name=\"Loan\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n\n//2. By Dictionary\nvar value = new Dictionary<string, object>()\n{\n    [\"employees\"] = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Lisa\",department=\"HR\"},\n        new {name=\"John\",department=\"HR\"},\n        new {name=\"Mike\",department=\"IT\"},\n        new {name=\"Neo\",department=\"IT\"},\n        new {name=\"Loan\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```\n\n\n\n#### 3. Complex Data Fill\n\n> Note: Support multi-sheets and using same varible\n\nTemplate:\n\n![image](https://user-images.githubusercontent.com/12729184/114565255-acf0da00-9ca3-11eb-8a7f-8131b2265ae8.png)\n\nResult:\n\n![image](https://user-images.githubusercontent.com/12729184/114565329-bf6b1380-9ca3-11eb-85e3-3969e8bf6378.png)\n\n```csharp\n// 1. By POCO\nvar value = new\n{\n    title = \"FooCompany\",\n    managers = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Loan\",department=\"IT\"}\n    },\n    employees = new[] {\n        new {name=\"Wade\",department=\"HR\"},\n        new {name=\"Felix\",department=\"HR\"},\n        new {name=\"Eric\",department=\"IT\"},\n        new {name=\"Keaton\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n\n// 2. By Dictionary\nvar value = new Dictionary<string, object>()\n{\n    [\"title\"] = \"FooCompany\",\n    [\"managers\"] = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Loan\",department=\"IT\"}\n    },\n    [\"employees\"] = new[] {\n        new {name=\"Wade\",department=\"HR\"},\n        new {name=\"Felix\",department=\"HR\"},\n        new {name=\"Eric\",department=\"IT\"},\n        new {name=\"Keaton\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```\n\n#### 4. Fill Big Data Performance\n\n> NOTE: Using IEnumerable deferred execution not ToList can save max memory usage in MiniExcel\n\n![image](https://user-images.githubusercontent.com/12729184/114577091-5046ec80-9cae-11eb-924b-087c7becf8da.png)\n\n\n\n#### 5. Cell value auto mapping type\n\nTemplate\n\n![image](https://user-images.githubusercontent.com/12729184/114802504-64830a80-9dd0-11eb-8d56-8e8c401b3ace.png)\n\nResult\n\n![image](https://user-images.githubusercontent.com/12729184/114802419-43221e80-9dd0-11eb-9ffe-a2ce34fe7076.png)\n\nClass\n\n```csharp\npublic class Poco\n{\n    public string @string { get; set; }\n    public int? @int { get; set; }\n    public decimal? @decimal { get; set; }\n    public double? @double { get; set; }\n    public DateTime? datetime { get; set; }\n    public bool? @bool { get; set; }\n    public Guid? Guid { get; set; }\n}\n```\n\nCode\n\n```csharp\nvar poco = new TestIEnumerableTypePoco { @string = \"string\", @int = 123, @decimal = decimal.Parse(\"123.45\"), @double = (double)123.33, @datetime = new DateTime(2021, 4, 1), @bool = true, @Guid = Guid.NewGuid() };\nvar value = new\n{\n    Ts = new[] {\n        poco,\n        new TestIEnumerableTypePoco{},\n        null,\n        poco\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```\n\n\n\n#### 6. Example :  List Github Projects\n\nTemplate\n\n![image](https://user-images.githubusercontent.com/12729184/115068623-12073280-9f25-11eb-9124-f4b3efcdb2a7.png)\n\n\nResult\n\n![image](https://user-images.githubusercontent.com/12729184/115068639-1a5f6d80-9f25-11eb-9f45-27c434d19a78.png)\n\nCode\n\n```csharp\nvar projects = new[]\n{\n    new {Name = \"MiniExcel\",Link=\"https://github.com/shps951023/MiniExcel\",Star=146, CreateTime=new DateTime(2021,03,01)},\n    new {Name = \"HtmlTableHelper\",Link=\"https://github.com/shps951023/HtmlTableHelper\",Star=16, CreateTime=new DateTime(2020,02,01)},\n    new {Name = \"PocoClassGenerator\",Link=\"https://github.com/shps951023/PocoClassGenerator\",Star=16, CreateTime=new DateTime(2019,03,17)}\n};\nvar value = new\n{\n    User = \"ITWeiHan\",\n    Projects = projects,\n    TotalStar = projects.Sum(s => s.Star)\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```\n\n#### 7. Grouped Data Fill\n\n```csharp\nvar value = new Dictionary<string, object>()\n{\n    [\"employees\"] = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"John\",department=\"HR\"},\n        new {name=\"John\",department=\"IT\"},\n        new {name=\"Neo\",department=\"IT\"},\n        new {name=\"Loan\",department=\"IT\"}\n    }\n};\nawait MiniExcel.SaveAsByTemplateAsync(path, templatePath, value);\n```\n##### 1. With `@group` tag and with `@header` tag\n\nBefore\n\n![before_with_header](https://user-images.githubusercontent.com/38832863/218646717-21b9d57a-2be2-4e9a-801b-ae212231d2b4.PNG)\n\nAfter\n\n![after_with_header](https://user-images.githubusercontent.com/38832863/218646721-58a7a340-7004-4bc2-af24-cffcb2c20737.PNG)\n\n##### 2. With @group tag and without @header tag\n\nBefore\n\n![before_without_header](https://user-images.githubusercontent.com/38832863/218646873-b12417fa-801b-4890-8e96-669ed3b43902.PNG)\n\nAfter\n\n![after_without_header](https://user-images.githubusercontent.com/38832863/218646872-622461ba-342e-49ee-834f-b91ad9c2dac3.PNG)\n\n##### 3. Without @group tag\n\nBefore\n\n![without_group](https://user-images.githubusercontent.com/38832863/218646975-f52a68eb-e031-43b5-abaa-03b67c052d1a.PNG)\n\nAfter\n\n![without_group_after](https://user-images.githubusercontent.com/38832863/218646974-4a3c0e07-7c66-4088-ad07-b4ad3695b7e1.PNG)\n\n#### 8. If/ElseIf/Else Statements inside cell\n\nRules:\n1. Supports DateTime, Double, Int with ==, !=, >, >=, <, <= operators.\n2. Supports String with ==, != operators.\n3. Each statement should be new line.\n4. Single space should be added before and after operators.\n5. There shouldn't be new line inside of statements.\n6. Cell should be in exact format as below.\n\n```csharp\n@if(name == Jack)\n{{employees.name}}\n@elseif(name == Neo)\nTest {{employees.name}}\n@else\n{{employees.department}}\n@endif\n```\n\nBefore\n\n![if_before](https://user-images.githubusercontent.com/38832863/235360606-ca654769-ff55-4f5b-98d2-d2ec0edb8173.PNG)\n\nAfter\n\n![if_after](https://user-images.githubusercontent.com/38832863/235360609-869bb960-d63d-45ae-8d64-9e8b0d0ab658.PNG)\n\n#### 9. DataTable as parameter\n\n```csharp\nvar managers = new DataTable();\n{\n    managers.Columns.Add(\"name\");\n    managers.Columns.Add(\"department\");\n    managers.Rows.Add(\"Jack\", \"HR\");\n    managers.Rows.Add(\"Loan\", \"IT\");\n}\nvar value = new Dictionary<string, object>()\n{\n    [\"title\"] = \"FooCompany\",\n    [\"managers\"] = managers,\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```\n#### 10. Formulas \n\n##### 1. Example\nPrefix your formula with `$` and use `$enumrowstart` and `$enumrowend` to mark references to the enumerable start and end rows:\n\n![image](docs/images/template-formulas-1.png)\n\nWhen the template is rendered, the `$` prefix will be removed and `$enumrowstart` and `$enumrowend` will be replaced with the start and end row numbers of the enumerable:\n\n![image](docs/images/template-formulas-2.png)\n\n##### 2. Other Example Formulas:\n\n|            |                                                                                         |\n|------------|-----------------------------------------------------------------------------------------|\n|Sum         |`$=SUM(C{{$enumrowstart}}:C{{$enumrowend}})`                                             |\n|Alt. Average|`$=SUM(C{{$enumrowstart}}:C{{$enumrowend}}) / COUNT(C{{$enumrowstart}}:C{{$enumrowend}})`|\n|Range       |`$=MAX(C{{$enumrowstart}}:C{{$enumrowend}}) - MIN(C{{$enumrowstart}}:C{{$enumrowend}})`  |\n\n\n#### 11. Other\n\n##### 1. Checking template parameter key\n\nSince V1.24.0 , default ignore template missing parameter key and replace it with empty string, `IgnoreTemplateParameterMissing` can control throwing exception or not.\n\n```csharp\nvar config = new OpenXmlConfiguration()\n{\n    IgnoreTemplateParameterMissing = false,\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value, config)\n```\n\n![image](https://user-images.githubusercontent.com/12729184/157464332-e316f829-54aa-4c84-a5aa-9aef337b668d.png)\n\n\n\n### Excel Column Name/Index/Ignore Attribute <a name=\"getstart4\"></a>\n\n\n\n#### 1. Specify the column name, column index, column ignore\n\nExcel Example\n\n![image](https://user-images.githubusercontent.com/12729184/114230869-3e163700-99ac-11eb-9a90-2039d4b4b313.png)\n\nCode\n\n```csharp\npublic class ExcelAttributeDemo\n{\n    [ExcelColumnName(\"Column1\")]\n    public string Test1 { get; set; }\n    [ExcelColumnName(\"Column2\")]\n    public string Test2 { get; set; }\n    [ExcelIgnore]\n    public string Test3 { get; set; }\n    [ExcelColumnIndex(\"I\")] // system will convert \"I\" to 8 index\n    public string Test4 { get; set; }\n    public string Test5 { get; } //wihout set will ignore\n    public string Test6 { get; private set; } //un-public set will ignore\n    [ExcelColumnIndex(3)] // start with 0\n    public string Test7 { get; set; }\n}\n\nvar rows = MiniExcel.Query<ExcelAttributeDemo>(path).ToList();\nAssert.Equal(\"Column1\", rows[0].Test1);\nAssert.Equal(\"Column2\", rows[0].Test2);\nAssert.Null(rows[0].Test3);\nAssert.Equal(\"Test7\", rows[0].Test4);\nAssert.Null(rows[0].Test5);\nAssert.Null(rows[0].Test6);\nAssert.Equal(\"Test4\", rows[0].Test7);\n```\n\n\n\n\n\n#### 2. Custom Format (ExcelFormatAttribute)\n\nSince V0.21.0 support class which contains `ToString(string content)` method format\n\nClass\n\n```csharp\npublic class Dto\n{\n    public string Name { get; set; }\n\n    [ExcelFormat(\"MMMM dd, yyyy\")]\n    public DateTime InDate { get; set; }\n}\n```\n\nCode\n\n```csharp\nvar value = new Dto[] {\n    new Issue241Dto{ Name=\"Jack\",InDate=new DateTime(2021,01,04)},\n    new Issue241Dto{ Name=\"Henry\",InDate=new DateTime(2020,04,05)},\n};\nMiniExcel.SaveAs(path, value);\n```\n\nResult\n\n![image](https://user-images.githubusercontent.com/12729184/118910788-ab2bcd80-b957-11eb-8d42-bfce36621b1b.png)\n\nQuery supports custom format conversion\n\n![image](https://user-images.githubusercontent.com/12729184/118911286-87b55280-b958-11eb-9a88-c8ff403d240a.png)\n\n#### 3. Set Column Width(ExcelColumnWidthAttribute)\n\n```csharp\npublic class Dto\n{\n    [ExcelColumnWidth(20)]\n    public int ID { get; set; }\n    [ExcelColumnWidth(15.50)]\n    public string Name { get; set; }\n}\n```\n\n#### 4. Multiple column names mapping to the same property.\n\n```csharp\npublic class Dto\n{\n    [ExcelColumnName(excelColumnName:\"EmployeeNo\",aliases:new[] { \"EmpNo\",\"No\" })]\n    public string Empno { get; set; }\n    public string Name { get; set; }\n}\n```\n\n\n\n#### 5. System.ComponentModel.DisplayNameAttribute = ExcelColumnName.excelColumnNameAttribute\n\nSince 1.24.0, system supports System.ComponentModel.DisplayNameAttribute = ExcelColumnName.excelColumnNameAttribute\n\n```C#\npublic class TestIssueI4TXGTDto\n{\n    public int ID { get; set; }\n    public string Name { get; set; }\n    [DisplayName(\"Specification\")]\n    public string Spc { get; set; }\n    [DisplayName(\"Unit Price\")]\n    public decimal Up { get; set; }\n}\n```\n\n\n\n#### 6. ExcelColumnAttribute\n\nSince V1.26.0, multiple attributes can be simplified like :\n```csharp\n        public class TestIssueI4ZYUUDto\n        {\n            [ExcelColumn(Name = \"ID\",Index =0)]\n            public string MyProperty { get; set; }\n            [ExcelColumn(Name = \"CreateDate\", Index = 1,Format =\"yyyy-MM\",Width =100)]\n            public DateTime MyProperty2 { get; set; }\n        }\n```\n\n\n\n#### 7. DynamicColumnAttribute\n\nSince V1.26.0, we can set the attributes of Column dynamically\n```csharp\n            var config = new OpenXmlConfiguration\n            {\n                DynamicColumns = new DynamicExcelColumn[] {\n                    new DynamicExcelColumn(\"id\"){Ignore=true},\n                    new DynamicExcelColumn(\"name\"){Index=1,Width=10},\n                    new DynamicExcelColumn(\"createdate\"){Index=0,Format=\"yyyy-MM-dd\",Width=15},\n                    new DynamicExcelColumn(\"point\"){Index=2,Name=\"Account Point\"},\n                }\n            };\n            var path = PathHelper.GetTempPath();\n            var value = new[] { new { id = 1, name = \"Jack\", createdate = new DateTime(2022, 04, 12) ,point = 123.456} };\n            MiniExcel.SaveAs(path, value, configuration: config);\n```\n![image](https://user-images.githubusercontent.com/12729184/164510353-5aecbc4e-c3ce-41e8-b6cf-afd55eb23b68.png)\n\n#### 8. DynamicSheetAttribute\n\nSince V1.31.4 we can set the attributes of Sheet dynamically. We can set sheet name and state (visibility).\n```csharp\n            var configuration = new OpenXmlConfiguration\n            {\n                DynamicSheets = new DynamicExcelSheet[] {\n                    new DynamicExcelSheet(\"usersSheet\") { Name = \"Users\", State = SheetState.Visible },\n                    new DynamicExcelSheet(\"departmentSheet\") { Name = \"Departments\", State = SheetState.Hidden }\n                }\n            };\n\n            var users = new[] { new { Name = \"Jack\", Age = 25 }, new { Name = \"Mike\", Age = 44 } };\n            var department = new[] { new { ID = \"01\", Name = \"HR\" }, new { ID = \"02\", Name = \"IT\" } };\n            var sheets = new Dictionary<string, object>\n            {\n                [\"usersSheet\"] = users,\n                [\"departmentSheet\"] = department\n            };\n\n            var path = PathHelper.GetTempPath();\n            MiniExcel.SaveAs(path, sheets, configuration: configuration);\n```\n\nWe can also use new attribute ExcelSheetAttribute:\n\n```C#\n   [ExcelSheet(Name = \"Departments\", State = SheetState.Hidden)]\n   private class DepartmentDto\n   {\n      [ExcelColumn(Name = \"ID\",Index = 0)]\n      public string ID { get; set; }\n      [ExcelColumn(Name = \"Name\",Index = 1)]\n      public string Name { get; set; }\n   }\n```\n\n### Add, Delete, Update\n\n#### Add\n\nv1.28.0 support CSV insert N rows data after last row\n\n```csharp\n// Origin\n{\n    var value = new[] {\n          new { ID=1,Name =\"Jack\",InDate=new DateTime(2021,01,03)},\n          new { ID=2,Name =\"Henry\",InDate=new DateTime(2020,05,03)},\n    };\n    MiniExcel.SaveAs(path, value);\n}\n// Insert 1 rows after last\n{\n    var value = new { ID=3,Name = \"Mike\", InDate = new DateTime(2021, 04, 23) };\n    MiniExcel.Insert(path, value);\n}\n// Insert N rows after last\n{\n    var value = new[] {\n          new { ID=4,Name =\"Frank\",InDate=new DateTime(2021,06,07)},\n          new { ID=5,Name =\"Gloria\",InDate=new DateTime(2022,05,03)},\n    };\n    MiniExcel.Insert(path, value);\n}\n```\n\n![image](https://user-images.githubusercontent.com/12729184/191023733-1e2fa732-db5c-4a3a-9722-b891fe5aa069.png)\n\n\n\n#### Delete(waiting)\n\n#### Update(waiting)\n\n\n\n### Excel Type Auto Check <a name=\"getstart5\"></a>\n\n- MiniExcel will check whether it is xlsx or csv based on the `file extension` by default, but there may be inaccuracy, please specify it manually.\n- Stream cannot be know from which excel, please specify it manually.\n\n```csharp\nstream.SaveAs(excelType:ExcelType.CSV);\n//or\nstream.SaveAs(excelType:ExcelType.XLSX);\n//or\nstream.Query(excelType:ExcelType.CSV);\n//or\nstream.Query(excelType:ExcelType.XLSX);\n```\n\n\n\n\n\n### CSV\n\n#### Note\n\n- Default return `string` type, and value will not be converted to numbers or datetime, unless the type is defined by strong typing generic.\n\n\n\n#### Custom separator\n\nThe default is `,` as the separator, you can modify the `Seperator` property for customization\n\n```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    Seperator=';'\n};\nMiniExcel.SaveAs(path, values,configuration: config);\n```\n\nSince V1.30.1 support function to custom separator (thanks @hyzx86)\n\n```csharp\nvar config = new CsvConfiguration()\n{\n    SplitFn = (row) => Regex.Split(row, $\"[\\t,](?=(?:[^\\\"]|\\\"[^\\\"]*\\\")*$)\")\n        .Select(s => Regex.Replace(s.Replace(\"\\\"\\\"\", \"\\\"\"), \"^\\\"|\\\"$\", \"\")).ToArray()\n};\nvar rows = MiniExcel.Query(path, configuration: config).ToList();\n```\n\n\n\n#### Custom line break\n\nThe default is `\\r\\n` as the newline character, you can modify the `NewLine` property for customization\n\n```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    NewLine='\\n'\n};\nMiniExcel.SaveAs(path, values,configuration: config);\n```\n\n\n\n#### Custom coding\n\n- The default encoding is \"Detect Encoding From Byte Order Marks\"  (detectEncodingFromByteOrderMarks: true)\n- f you have custom encoding requirements, please modify the StreamReaderFunc / StreamWriterFunc  property\n\n```csharp\n// Read\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    StreamReaderFunc = (stream) => new StreamReader(stream,Encoding.GetEncoding(\"gb2312\"))\n};\nvar rows = MiniExcel.Query(path, true,excelType:ExcelType.CSV,configuration: config);\n\n// Write\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    StreamWriterFunc = (stream) => new StreamWriter(stream, Encoding.GetEncoding(\"gb2312\"))\n};\nMiniExcel.SaveAs(path, value,excelType:ExcelType.CSV, configuration: config);\n```\n\n#### Read empty string as null\n\nBy default, empty values are mapped to string.Empty. You can modify this behavior\n\n```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n   ReadEmptyStringAsNull = true\n};\n```\n\n\n### DataReader\n\n#### 1. GetReader\nSince 1.23.0, you can GetDataReader\n\n```csharp\n    using (var reader = MiniExcel.GetReader(path,true))\n    {\n        while (reader.Read())\n        {\n            for (int i = 0; i < reader.FieldCount; i++)\n            {\n                var value = reader.GetValue(i);\n            }\n        }\n    }\n```\n\n\n\n###  Async\n\n- v0.17.0 support Async (thanks isdaniel ( SHIH,BING-SIOU)](https://github.com/isdaniel))\n\n```csharp\npublic static Task SaveAsAsync(string path, object value, bool printHeader = true, string sheetName = \"Sheet1\", ExcelType excelType = ExcelType.UNKNOWN, IConfiguration configuration = null)\npublic static Task SaveAsAsync(this Stream stream, object value, bool printHeader = true, string sheetName = \"Sheet1\", ExcelType excelType = ExcelType.XLSX, IConfiguration configuration = null)\npublic static Task<IEnumerable<dynamic>> QueryAsync(string path, bool useHeaderRow = false, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)\npublic static Task<IEnumerable<T>> QueryAsync<T>(this Stream stream, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null) where T : class, new()\npublic static Task<IEnumerable<T>> QueryAsync<T>(string path, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null) where T : class, new()\npublic static Task<IEnumerable<IDictionary<string, object>>> QueryAsync(this Stream stream, bool useHeaderRow = false, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)\npublic static Task SaveAsByTemplateAsync(this Stream stream, string templatePath, object value)\npublic static Task SaveAsByTemplateAsync(this Stream stream, byte[] templateBytes, object value)\npublic static Task SaveAsByTemplateAsync(string path, string templatePath, object value)\npublic static Task SaveAsByTemplateAsync(string path, byte[] templateBytes, object value)\npublic static Task<DataTable> QueryAsDataTableAsync(string path, bool useHeaderRow = true, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)\n```\n\n-  v1.25.0 support `cancellationToken`ã\n\n\n\n### Others\n\n#### 1. Enum\n\nBe sure excel & property name same, system will auto mapping (case insensitive)\n\n![image](https://user-images.githubusercontent.com/12729184/116210595-9784b100-a775-11eb-936f-8e7a8b435961.png)\n\nSince V0.18.0 support Enum Description\n\n```csharp\npublic class Dto\n{\n    public string Name { get; set; }\n    public I49RYZUserType UserType { get; set; }\n}\n\npublic enum Type\n{\n    [Description(\"General User\")]\n    V1,\n    [Description(\"General Administrator\")]\n    V2,\n    [Description(\"Super Administrator\")]\n    V3\n}\n```\n\n![image](https://user-images.githubusercontent.com/12729184/133116630-27cc7161-099a-48b8-9784-cd1e443af3d1.png)\n\nSince 1.30.0 version support excel Description to Enum , thanks @KaneLeung\n\n#### 2. Convert CSV to XLSX or Convert XLSX to CSV\n\n```csharp\nMiniExcel.ConvertXlsxToCsv(xlsxPath, csvPath);\nMiniExcel.ConvertXlsxToCsv(xlsxStream, csvStream);\nMiniExcel.ConvertCsvToXlsx(csvPath, xlsxPath);\nMiniExcel.ConvertCsvToXlsx(csvStream, xlsxStream);\n```\n```csharp\nusing (var excelStream = new FileStream(path: filePath, FileMode.Open, FileAccess.Read))\nusing (var csvStream = new MemoryStream())\n{\n   MiniExcel.ConvertXlsxToCsv(excelStream, csvStream);\n}\n```\n\n#### 3. Custom CultureInfo\n\nSince 1.22.0, you can custom CultureInfo like below, system default `CultureInfo.InvariantCulture`.\n\n```csharp\nvar config = new CsvConfiguration()\n{\n    Culture = new CultureInfo(\"fr-FR\"),\n};\nMiniExcel.SaveAs(path, value, configuration: config);\n\n// or\nMiniExcel.Query(path, configuration: config);\n```\n\n\n#### 4. Custom Buffer Size\n```csharp\n    public abstract class Configuration : IConfiguration\n    {\n        public int BufferSize { get; set; } = 1024 * 512;\n    }\n```\n\n#### 5. FastMode\n\nSystem will not control memory, but you can get faster save speed.\n\n```csharp\nvar config = new OpenXmlConfiguration() { FastMode = true };\nMiniExcel.SaveAs(path, reader,configuration:config);\n```\n\n\n\n\n\n\n### Examples:\n\n#### 1. SQLite & Dapper `Large Size File` SQL Insert Avoid OOM\n\nnote : please don't call ToList/ToArray methods after Query, it'll load all data into memory\n\n```csharp\nusing (var connection = new SQLiteConnection(connectionString))\n{\n    connection.Open();\n    using (var transaction = connection.BeginTransaction())\n    using (var stream = File.OpenRead(path))\n    {\n       var rows = stream.Query();\n       foreach (var row in rows)\n             connection.Execute(\"insert into T (A,B) values (@A,@B)\", new { row.A, row.B }, transaction: transaction);\n       transaction.Commit();\n    }\n}\n```\n\nperformance:\n![image](https://user-images.githubusercontent.com/12729184/111072579-2dda7b80-8516-11eb-9843-c01a1edc88ec.png)\n\n\n\n\n\n#### 2. ASP.NET Core 3.1 or MVC 5 Download/Upload Excel Xlsx API Demo [Try it](tests/MiniExcel.Tests.AspNetCore)\n\n```csharp\npublic class ApiController : Controller\n{\n    public IActionResult Index()\n    {\n        return new ContentResult\n        {\n            ContentType = \"text/html\",\n            StatusCode = (int)HttpStatusCode.OK,\n            Content = @\"<html><body>\n<a href='api/DownloadExcel'>DownloadExcel</a><br>\n<a href='api/DownloadExcelFromTemplatePath'>DownloadExcelFromTemplatePath</a><br>\n<a href='api/DownloadExcelFromTemplateBytes'>DownloadExcelFromTemplateBytes</a><br>\n<p>Upload Excel</p>\n<form method='post' enctype='multipart/form-data' action='/api/uploadexcel'>\n    <input type='file' name='excel'> <br>\n    <input type='submit' >\n</form>\n</body></html>\"\n        };\n    }\n\n    public IActionResult DownloadExcel()\n    {\n        var values = new[] {\n            new { Column1 = \"MiniExcel\", Column2 = 1 },\n            new { Column1 = \"Github\", Column2 = 2}\n        };\n        var memoryStream = new MemoryStream();\n        memoryStream.SaveAs(values);\n        memoryStream.Seek(0, SeekOrigin.Begin);\n        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n        {\n            FileDownloadName = \"demo.xlsx\"\n        };\n    }\n\n    public IActionResult DownloadExcelFromTemplatePath()\n    {\n        string templatePath = \"TestTemplateComplex.xlsx\";\n\n        Dictionary<string, object> value = new Dictionary<string, object>()\n        {\n            [\"title\"] = \"FooCompany\",\n            [\"managers\"] = new[] {\n                new {name=\"Jack\",department=\"HR\"},\n                new {name=\"Loan\",department=\"IT\"}\n            },\n            [\"employees\"] = new[] {\n                new {name=\"Wade\",department=\"HR\"},\n                new {name=\"Felix\",department=\"HR\"},\n                new {name=\"Eric\",department=\"IT\"},\n                new {name=\"Keaton\",department=\"IT\"}\n            }\n        };\n\n        MemoryStream memoryStream = new MemoryStream();\n        memoryStream.SaveAsByTemplate(templatePath, value);\n        memoryStream.Seek(0, SeekOrigin.Begin);\n        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n        {\n            FileDownloadName = \"demo.xlsx\"\n        };\n    }\n\n    private static Dictionary<string, Byte[]> TemplateBytesCache = new Dictionary<string, byte[]>();\n\n    static ApiController()\n    {\n        string templatePath = \"TestTemplateComplex.xlsx\";\n        byte[] bytes = System.IO.File.ReadAllBytes(templatePath);\n        TemplateBytesCache.Add(templatePath, bytes);\n    }\n\n    public IActionResult DownloadExcelFromTemplateBytes()\n    {\n        byte[] bytes = TemplateBytesCache[\"TestTemplateComplex.xlsx\"];\n\n        Dictionary<string, object> value = new Dictionary<string, object>()\n        {\n            [\"title\"] = \"FooCompany\",\n            [\"managers\"] = new[] {\n                new {name=\"Jack\",department=\"HR\"},\n                new {name=\"Loan\",department=\"IT\"}\n            },\n            [\"employees\"] = new[] {\n                new {name=\"Wade\",department=\"HR\"},\n                new {name=\"Felix\",department=\"HR\"},\n                new {name=\"Eric\",department=\"IT\"},\n                new {name=\"Keaton\",department=\"IT\"}\n            }\n        };\n\n        MemoryStream memoryStream = new MemoryStream();\n        memoryStream.SaveAsByTemplate(bytes, value);\n        memoryStream.Seek(0, SeekOrigin.Begin);\n        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n        {\n            FileDownloadName = \"demo.xlsx\"\n        };\n    }\n\n    public IActionResult UploadExcel(IFormFile excel)\n    {\n        var stream = new MemoryStream();\n        excel.CopyTo(stream);\n\n        foreach (var item in stream.Query(true))\n        {\n            // do your logic etc.\n        }\n\n        return Ok(\"File uploaded successfully\");\n    }\n}\n```\n\n####  3. Paging Query\n\n```csharp\nvoid Main()\n{\n    var rows = MiniExcel.Query(path);\n\n    Console.WriteLine(\"==== No.1 Page ====\");\n    Console.WriteLine(Page(rows,pageSize:3,page:1));\n    Console.WriteLine(\"==== No.50 Page ====\");\n    Console.WriteLine(Page(rows,pageSize:3,page:50));\n    Console.WriteLine(\"==== No.5000 Page ====\");\n    Console.WriteLine(Page(rows,pageSize:3,page:5000));\n}\n\npublic static IEnumerable<T> Page<T>(IEnumerable<T> en, int pageSize, int page)\n{\n    return en.Skip(page * pageSize).Take(pageSize);\n}\n```\n\n![20210419](https://user-images.githubusercontent.com/12729184/114679083-6ef4c400-9d3e-11eb-9f78-a86daa45fe46.gif)\n\n\n\n#### 4. WebForm export Excel by memorystream\n\n```csharp\nvar fileName = \"Demo.xlsx\";\nvar sheetName = \"Sheet1\";\nHttpResponse response = HttpContext.Current.Response;\nresponse.Clear();\nresponse.ContentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\nresponse.AddHeader(\"Content-Disposition\", $\"attachment;filename=\\\"{fileName}\\\"\");\nvar values = new[] {\n    new { Column1 = \"MiniExcel\", Column2 = 1 },\n    new { Column1 = \"Github\", Column2 = 2}\n};\nvar memoryStream = new MemoryStream();\nmemoryStream.SaveAs(values, sheetName: sheetName);\nmemoryStream.Seek(0, SeekOrigin.Begin);\nmemoryStream.CopyTo(Response.OutputStream);\nresponse.End();\n```\n\n\n\n#### 5. Dynamic i18n multi-language and role authority management\n\nLike the example, create a method to handle i18n and permission management, and use `yield return to return IEnumerable<Dictionary<string, object>>` to achieve dynamic and low-memory processing effects\n\n```csharp\nvoid Main()\n{\n    var value = new Order[] {\n        new Order(){OrderNo = \"SO01\",CustomerID=\"C001\",ProductID=\"P001\",Qty=100,Amt=500},\n        new Order(){OrderNo = \"SO02\",CustomerID=\"C002\",ProductID=\"P002\",Qty=300,Amt=400},\n    };\n\n    Console.WriteLine(\"en-Us and Sales role\");\n    {\n        var path = Path.GetTempPath() + Guid.NewGuid() + \".xlsx\";\n        var lang = \"en-US\";\n        var role = \"Sales\";\n        MiniExcel.SaveAs(path, GetOrders(lang, role, value));\n        MiniExcel.Query(path, true).Dump();\n    }\n\n    Console.WriteLine(\"zh-CN and PMC role\");\n    {\n        var path = Path.GetTempPath() + Guid.NewGuid() + \".xlsx\";\n        var lang = \"zh-CN\";\n        var role = \"PMC\";\n        MiniExcel.SaveAs(path, GetOrders(lang, role, value));\n        MiniExcel.Query(path, true).Dump();\n    }\n}\n\nprivate IEnumerable<Dictionary<string, object>> GetOrders(string lang, string role, Order[] orders)\n{\n    foreach (var order in orders)\n    {\n        var newOrder = new Dictionary<string, object>();\n\n        if (lang == \"zh-CN\")\n        {\n            newOrder.Add(\"å®¢æ·ç¼å·\", order.CustomerID);\n            newOrder.Add(\"è®¢åç¼å·\", order.OrderNo);\n            newOrder.Add(\"äº§åç¼å·\", order.ProductID);\n            newOrder.Add(\"æ°é\", order.Qty);\n            if (role == \"Sales\")\n                newOrder.Add(\"ä»·æ ¼\", order.Amt);\n            yield return newOrder;\n        }\n        else if (lang == \"en-US\")\n        {\n            newOrder.Add(\"Customer ID\", order.CustomerID);\n            newOrder.Add(\"Order No\", order.OrderNo);\n            newOrder.Add(\"Product ID\", order.ProductID);\n            newOrder.Add(\"Quantity\", order.Qty);\n            if (role == \"Sales\")\n                newOrder.Add(\"Amount\", order.Amt);\n            yield return newOrder;\n        }\n        else\n        {\n            throw new InvalidDataException($\"lang {lang} wrong\");\n        }\n    }\n}\n\npublic class Order\n{\n    public string OrderNo { get; set; }\n    public string CustomerID { get; set; }\n    public decimal Qty { get; set; }\n    public string ProductID { get; set; }\n    public decimal Amt { get; set; }\n}\n```\n\n![image](https://user-images.githubusercontent.com/12729184/118939964-d24bc480-b982-11eb-88dd-f06655f6121a.png)\n\n\n\n### FAQ\n\n#### Q: Excel header title not equal class property name, how to mapping?\n\nA. Please use ExcelColumnName attribute\n\n![image](https://user-images.githubusercontent.com/12729184/116020475-eac50980-a678-11eb-8804-129e87200e5e.png)\n\n#### Q. How to query or export multiple-sheets?\n\nA. `GetSheetNames` method with  Query  sheetName parameter.\n\n\n\n```csharp\nvar sheets = MiniExcel.GetSheetNames(path);\nforeach (var sheet in sheets)\n{\n    Console.WriteLine($\"sheet name : {sheet} \");\n    var rows = MiniExcel.Query(path,useHeaderRow:true,sheetName:sheet);\n    Console.WriteLine(rows);\n}\n```\n\n![image](https://user-images.githubusercontent.com/12729184/116199841-2a1f5300-a76a-11eb-90a3-6710561cf6db.png)\n\n#### Q. How to query or export information about sheet visibility?\n\nA. `GetSheetInformations` method.\n\n\n\n```csharp\nvar sheets = MiniExcel.GetSheetInformations(path);\nforeach (var sheetInfo in sheets)\n{\n    Console.WriteLine($\"sheet index : {sheetInfo.Index} \"); // next sheet index - numbered from 0\n    Console.WriteLine($\"sheet name : {sheetInfo.Name} \");   // sheet name\n    Console.WriteLine($\"sheet state : {sheetInfo.State} \"); // sheet visibility state - visible / hidden\n}\n```\n\n\n#### Q. Whether to use Count will load all data into the memory?\n\nNo, the image test has 1 million rows*10 columns of data, the maximum memory usage is <60MB, and it takes 13.65 seconds\n\n![image](https://user-images.githubusercontent.com/12729184/117118518-70586000-adc3-11eb-9ce3-2ba76cf8b5e5.png)\n\n#### Q. How does Query use integer indexs?\n\nThe default index of Query is the string Key: A,B,C.... If you want to change to numeric index, please create the following method to convert\n\n```csharp\nvoid Main()\n{\n    var path = @\"D:\\git\\MiniExcel\\samples\\xlsx\\TestTypeMapping.xlsx\";\n    var rows = MiniExcel.Query(path,true);\n    foreach (var r in ConvertToIntIndexRows(rows))\n    {\n        Console.Write($\"column 0 : {r[0]} ,column 1 : {r[1]}\");\n        Console.WriteLine();\n    }\n}\n\nprivate IEnumerable<Dictionary<int, object>> ConvertToIntIndexRows(IEnumerable<object> rows)\n{\n    ICollection<string> keys = null;\n    var isFirst = true;\n    foreach (IDictionary<string,object> r in rows)\n    {\n        if(isFirst)\n        {\n            keys = r.Keys;\n            isFirst = false;\n        }\n\n        var dic = new Dictionary<int, object>();\n        var index = 0;\n        foreach (var key in keys)\n            dic[index++] = r[key];\n        yield return dic;\n    }\n}\n```\n\n#### Q. No title empty excel is generated when the value is empty when exporting Excel\n\nBecause MiniExcel uses a logic similar to JSON.NET to dynamically get type from values to simplify API operations, type cannot be knew without data. You can check [issue #133](https://github.com/shps951023/MiniExcel/issues/133) for understanding.\n\n![image](https://user-images.githubusercontent.com/12729184/122639771-546c0c00-d12e-11eb-800c-498db27889ca.png)\n\n> Strong type & DataTable will generate headers, but Dictionary are still empty Excel\n\n#### Q. How to stop the foreach when blank row?\n\nMiniExcel can be used with `LINQ TakeWhile` to stop foreach iterator.\n\n![Image](https://user-images.githubusercontent.com/12729184/130209137-162621c2-f337-4479-9996-beeac65bc4d4.png)\n\n#### Q. How to remove empty rows?\n\n![image](https://user-images.githubusercontent.com/12729184/137873865-7107d8f5-eb59-42db-903a-44e80589f1b2.png)\n\n\nIEnumerable :\n\n```csharp\npublic static IEnumerable<dynamic> QueryWithoutEmptyRow(Stream stream, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration)\n{\n    var rows = stream.Query(useHeaderRow,sheetName,excelType,startCell,configuration);\n    foreach (IDictionary<string,object> row in rows)\n    {\n        if(row.Keys.Any(key=>row[key]!=null))\n            yield return row;\n    }\n}\n```\n\n\n\nDataTable :\n\n```csharp\npublic static DataTable QueryAsDataTableWithoutEmptyRow(Stream stream, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration)\n{\n    if (sheetName == null && excelType != ExcelType.CSV) /*Issue #279*/\n        sheetName = stream.GetSheetNames().First();\n\n    var dt = new DataTable(sheetName);\n    var first = true;\n    var rows = stream.Query(useHeaderRow,sheetName,excelType,startCell,configuration);\n    foreach (IDictionary<string, object> row in rows)\n    {\n        if (first)\n        {\n\n            foreach (var key in row.Keys)\n            {\n                var column = new DataColumn(key, typeof(object)) { Caption = key };\n                dt.Columns.Add(column);\n            }\n\n            dt.BeginLoadData();\n            first = false;\n        }\n\n        var newRow = dt.NewRow();\n        var isNull=true;\n        foreach (var key in row.Keys)\n        {\n            var _v = row[key];\n            if(_v!=null)\n                isNull = false;\n            newRow[key] = _v;\n        }\n\n        if(!isNull)\n            dt.Rows.Add(newRow);\n    }\n\n    dt.EndLoadData();\n    return dt;\n}\n```\n\n\n\n#### Q. How SaveAs(path,value) to replace exists file and without throwing \"The file ...xlsx already exists error\"\n\n\nPlease use Stream class to custom file creating logic, e.g:\n\n```C#\n    using (var stream = File.Create(\"Demo.xlsx\"))\n        MiniExcel.SaveAs(stream,value);\n```\n\n\n\nor, since V1.25.0, SaveAs support overwriteFile parameter for enable/unable overwriting exist file\n\n```csharp\n    MiniExcel.SaveAs(path, value, overwriteFile: true);\n```\n\n\n\n\n### Limitations and caveats\n\n- Not support xls and encrypted file now\n- xlsm only support Query\n\n\n\n### Reference\n\n[ExcelDataReader](https://github.com/ExcelDataReader/ExcelDataReader)  / [ClosedXML](https://github.com/ClosedXML/ClosedXML) / [Dapper](https://github.com/DapperLib/Dapper) / [ExcelNumberFormat](https://github.com/andersnm/ExcelNumberFormat)\n\n\n\n### Thanks\n\n####  [Jetbrains](https://www.jetbrains.com/)\n\n![jetbrains-variant-2](https://user-images.githubusercontent.com/12729184/123997015-8456c180-da02-11eb-829a-aec476fe8e94.png)\n\nThanks for providing a free All product IDE for this project ([License](https://user-images.githubusercontent.com/12729184/123988233-6ab17c00-d9fa-11eb-8739-2a08c6a4a263.png))\n\n\n\n### Benefit\nLink https://github.com/mini-software/MiniExcel/issues/560#issue-2080619180\n\n### Contributors\n\n![](https://contrib.rocks/image?repo=shps951023/MiniExcel)\n"
        },
        {
          "name": "README.zh-CN.md",
          "type": "blob",
          "size": 51.9736328125,
          "content": "<div align=\"center\">\n<p><a href=\"https://www.nuget.org/packages/MiniExcel\"><img src=\"https://img.shields.io/nuget/v/MiniExcel.svg\" alt=\"NuGet\"></a>  <a href=\"https://www.nuget.org/packages/MiniExcel\"><img src=\"https://img.shields.io/nuget/dt/MiniExcel.svg\" alt=\"\"></a>\n<a href=\"https://ci.appveyor.com/project/shps951023/miniexcel/branch/master\"><img src=\"https://ci.appveyor.com/api/projects/status/b2vustrwsuqx45f4/branch/master?svg=true\" alt=\"Build status\"></a>\n<a href=\"https://gitee.com/dotnetchina/MiniExcel\"><img src=\"https://gitee.com/dotnetchina/MiniExcel/badge/star.svg\" alt=\"star\"></a> <a href=\"https://github.com/shps951023/MiniExcel\" rel=\"nofollow\"><img src=\"https://img.shields.io/github/stars/shps951023/MiniExcel?logo=github\" alt=\"GitHub stars\"></a>\n<a href=\"https://www.nuget.org/packages/MiniExcel\"><img src=\"https://img.shields.io/badge/.NET-%3E%3D%204.5-red.svg\" alt=\"version\"></a>\n</p>\n</div>\n\n---\n\n<div align=\"center\">\n<p><strong><a href=\"README.md\">English</a> | <a href=\"README.zh-CN.md\">ç®ä½ä¸­æ</a> | <a href=\"README.zh-Hant.md\">ç¹é«ä¸­æ</a></strong></p>\n</div>\n\n---\n\n[<img align=\"right\" src=\"https://github.com/dotnet-foundation/swag/blob/main/logo/dotnetfoundation_v4.png?raw=true\" width=\"100\" />](https://www.dotnetfoundation.org/)\n\n<div align=\"center\">\n<p>è¯¥é¡¹ç®å±äº <a href=\"https://www.dotnetfoundation.org/\">.NET åºéä¼</a> ï¼å¹¶æ ¹æ®å¶<a href=\"https://www.dotnetfoundation.org/code-of-conduct\">è¡ä¸ºåå</a> è¿ä½ã</p>\n</div>\n\n---\n\n<div align=\"center\">\n<p> æ¨ç <a href=\"https://github.com/shps951023/miniexcel\">Star</a>ã<a href=\"https://miniexcel.github.io\">èµå©</a> å <a href=\"https://edu.51cto.com/course/32914.html\">è´­ä¹°è§é¢</a> è½å¸®å© MiniExcel æé¿ </p>\n</div>\n\n---\n\n\n#### QQç¾¤ - 1ç¾¤ : [813100564](https://qm.qq.com/q/33VXm1bMQ8) / 2ç¾¤ : [579033769](https://qm.qq.com/q/TaGjA1sPaq) / 3ç¾¤ : [625362917](https://qm.qq.com/q/QOtWF0fAEq) / 4ç¾¤ : [907750429](https://qm.qq.com/q/iKYWzIZ33y)\n\n\n----\n\n### ç®ä»\n\nMiniExcelç®åãé«æé¿åOOMç.NETå¤çExcelæ¥ãåãå¡«åæ°æ®å·¥å·ã\n\n\nç®åä¸»æµæ¡æ¶å¤§å¤éè¦å°æ°æ®å¨è½½å¥å°åå­æ¹ä¾¿æä½ï¼ä½è¿ä¼å¯¼è´åå­æ¶èé®é¢ï¼MiniExcel å°è¯ä»¥ Stream è§åº¦ååºå±ç®æ³é»è¾ï¼è½è®©åæ¬1000å¤MBå ç¨éä½å°å MBï¼é¿ååå­ä¸å¤æåµã\n\n![image](https://user-images.githubusercontent.com/12729184/113120478-33d59980-9244-11eb-8675-a49651c8af67.png)\n\n### ç¹ç¹\n- ä½åå­èç¨ï¼é¿åOOMãé¢ç¹ Full GC æåµ\n- æ¯æ`å³æ¶`æä½æ¯è¡æ°æ®\n- å¼å·æ­é LINQ å»¶è¿æ¥è¯¢ç¹æ§ï¼è½åå°ä½æ¶èãå¿«éåé¡µç­å¤ææ¥è¯¢\n- è½»éï¼ä¸éè¦å®è£ Microsoft OfficeãCOM+ï¼DLLå°äº150KB\n- ç®ä¾¿æä½ç API é£æ ¼\n\n\n\n### å¿«éå¼å§\n\n- [å¯¼å¥ãè¯»å Excel](#getstart1)\n- [å¯¼åº ãåå»º Excel](#getstart2)\n- [æ¨¡æ¿å¡«åãåå»º Excel](#getstart3)\n- [Excel Column Name/Index/Ignore Attribute](#getstart4)\n- [ä¾å­](#getstart5)\n\n### å®è£\n\nè¯·æ¥ç [NuGet](https://www.nuget.org/packages/MiniExcel)\n\n### æ´æ°æ¥å¿\n\nè¯·æ¥ç [Release Notes](docs)\n\n### TODO\n\nè¯·æ¥ç [TODO](https://github.com/shps951023/MiniExcel/projects/1?fullscreen=true)\n\n### æ§è½æ¯è¾ãæµè¯\n\nBenchmarks  é»è¾å¯ä»¥å¨ [MiniExcel.Benchmarks](benchmarks/MiniExcel.Benchmarks/Program.cs) æ¥çææ¯æäº¤ PRï¼è¿è¡æä»¤\n\n```bash\ndotnet run -p .\\benchmarks\\MiniExcel.Benchmarks\\ -c Release -f netcoreapp3.1 -- -f * --join\n```\n\næåä¸æ¬¡è¿è¡è§æ ¼ãç»æ :\n\n```bash\nBenchmarkDotNet=v0.12.1, OS=Windows 10.0.19042\nIntel Core i7-7700 CPU 3.60GHz (Kaby Lake), 1 CPU, 8 logical and 4 physical cores\n  [Host]     : .NET Framework 4.8 (4.8.4341.0), X64 RyuJIT\n  Job-ZYYABG : .NET Framework 4.8 (4.8.4341.0), X64 RyuJIT\nIterationCount=3  LaunchCount=3  WarmupCount=3\n```\n\nBenchmark History :  [Link](https://github.com/shps951023/MiniExcel/issues/276)\n\n\n#### å¯¼å¥ãæ¥è¯¢ Excel æ¯è¾\né»è¾ : ä»¥ [**Test1,000,000x10.xlsx**](benchmarks/MiniExcel.Benchmarks/Test1%2C000%2C000x10.xlsx) ååºåä¸ä¸»æµæ¡æ¶åæ§è½æµè¯ï¼æ»å± 1,000,000 è¡ * 10 åç¬ \"HelloWorld\"ï¼æä»¶å¤§å° 23 MB\n\n\n| Library      | Method                       | æå¤§åå­èç¨ |         å¹³åæ¶é´ |\n| ---------------------------- | -------------: | ---------------: | ---------------: |\n| MiniExcel | 'MiniExcel QueryFirst'       |       0.109 MB | 0.0007264 sec |\n| ExcelDataReader | 'ExcelDataReader QueryFirst' |       15.24 MB | 10.66421 sec |\n| MiniExcel  | 'MiniExcel Query'            |        17.3 MB | 14.17933 sec |\n| ExcelDataReader | 'ExcelDataReader Query'      |        17.3 MB | 22.56508 sec |\n| Epplus    | 'Epplus QueryFirst'          |       1,452 MB | 18.19801 sec |\n| Epplus        | 'Epplus Query'               |       1,451 MB | 23.64747 sec |\n| OpenXmlSDK | 'OpenXmlSDK Query'           |       1,412 MB | 52.00327 sec |\n| OpenXmlSDK | 'OpenXmlSDK QueryFirst'      |       1,413 MB | 52.34865 sec |\n| ClosedXml | 'ClosedXml QueryFirst'       |       2,158 MB | 66.18897 sec |\n| ClosedXml  | 'ClosedXml Query'            |       2,184 MB | 191.43412 sec |\n\n#### å¯¼åºãåå»º Excel æ¯è¾\n\né»è¾ : åå»º1åä¸ç¬ \"HelloWorld\"\n\n| Library            | Method                   | æå¤§åå­èç¨ |         å¹³åæ¶é´ |\n| ------------------------ | -------------: | ---------------: | -----------: |\n| MiniExcel | 'MiniExcel Create Xlsx'  |          15 MB | 11.53181 sec |\n| Epplus | 'Epplus Create Xlsx'     |       1,204 MB | 22.50971 sec |\n| OpenXmlSdk | 'OpenXmlSdk Create Xlsx' |       2,621 MB | 42.47399 sec |\n| ClosedXml | 'ClosedXml Create Xlsx'  |       7,141 MB | 140.93992 sec |\n\n\n\n### è¯»/å¯¼å¥ Excel <a name=\"getstart1\"></a>\n\n\n\n#### 1. Query æ¥è¯¢ Excel è¿å`å¼ºåå«` IEnumerable æ°æ® [[Try it]](https://dotnetfiddle.net/w5WD1J)\n\n```csharp\npublic class UserAccount\n{\n    public Guid ID { get; set; }\n    public string Name { get; set; }\n    public DateTime BoD { get; set; }\n    public int Age { get; set; }\n    public bool VIP { get; set; }\n    public decimal Points { get; set; }\n}\n\nvar rows = MiniExcel.Query<UserAccount>(path);\n\n// or\n\nusing (var stream = File.OpenRead(path))\n    var rows = stream.Query<UserAccount>();\n```\n\n![image](https://user-images.githubusercontent.com/12729184/111107423-c8c46b80-8591-11eb-982f-c97a2dafb379.png)\n\n\n#### 2. Query æ¥è¯¢ Excel è¿å`Dynamic` IEnumerable æ°æ® [[Try it]](https://dotnetfiddle.net/w5WD1J)\n\n* Key ç³»ç»é¢è®¾ä¸º `A,B,C,D...Z`\n\n| MiniExcel     | 1     |\n| -------- | -------- |\n| Github     | 2     |\n\n```csharp\n\nvar rows = MiniExcel.Query(path).ToList();\n\n// or\nusing (var stream = File.OpenRead(path))\n{\n    var rows = stream.Query().ToList();\n\n    Assert.Equal(\"MiniExcel\", rows[0].A);\n    Assert.Equal(1, rows[0].B);\n    Assert.Equal(\"Github\", rows[1].A);\n    Assert.Equal(2, rows[1].B);\n}\n```\n\n#### 3. æ¥è¯¢æ°æ®ä»¥ç¬¬ä¸è¡æ°æ®å½Key [[Try it]](https://dotnetfiddle.net/w5WD1J)\n\næ³¨æ : ååä»¥å³è¾¹æ°æ®ä¸ºå\n\nInput Excel :\n\n| Column1 | Column2 |\n| -------- | -------- |\n| MiniExcel     | 1     |\n| Github     | 2     |\n\n\n```csharp\n\nvar rows = MiniExcel.Query(useHeaderRow:true).ToList();\n\n// or\n\nusing (var stream = File.OpenRead(path))\n{\n    var rows = stream.Query(useHeaderRow:true).ToList();\n\n    Assert.Equal(\"MiniExcel\", rows[0].Column1);\n    Assert.Equal(1, rows[0].Column2);\n    Assert.Equal(\"Github\", rows[1].Column1);\n    Assert.Equal(2, rows[1].Column2);\n}\n```\n\n#### 4. Query æ¥è¯¢æ¯æ´å»¶è¿å è½½(Deferred Execution)ï¼è½éåLINQ First/Take/Skipåå°ä½æ¶èãé«æçå¤ææ¥è¯¢\n\nä¸¾ä¾ : æ¥è¯¢ç¬¬ä¸ç¬æ°æ®\n\n```csharp\nvar row = MiniExcel.Query(path).First();\nAssert.Equal(\"HelloWorld\", row.A);\n\n// or\n\nusing (var stream = File.OpenRead(path))\n{\n    var row = stream.Query().First();\n    Assert.Equal(\"HelloWorld\", row.A);\n}\n```\n\nä¸å¶ä»æ¡æ¶æçæ¯è¾ :\n\n![queryfirst](https://user-images.githubusercontent.com/12729184/111072392-6037a900-8515-11eb-9693-5ce2dad1e460.gif)\n\n#### 5. æ¥è¯¢æå® Sheet åç§°\n\n```csharp\nMiniExcel.Query(path, sheetName: \"SheetName\");\n//or\nstream.Query(sheetName: \"SheetName\");\n```\n\n#### 6. æ¥è¯¢ææ Sheet åç§°è·æ°æ®\n\n```csharp\nvar sheetNames = MiniExcel.GetSheetNames(path);\nforeach (var sheetName in sheetNames)\n{\n    var rows = MiniExcel.Query(path, sheetName: sheetName);\n}\n```\n\n#### 7. æ¥è¯¢æææ (å)\n\n```csharp\nvar columns = MiniExcel.GetColumns(path); // e.g result : [\"A\",\"B\"...]\n\nor\n\nvar columns = MiniExcel.GetColumns(path, useHeaderRow: true);\n// e.g result : [\"excelè¡¨å®éçååç§°\",\"excelè¡¨å®éçååç§°\"...]\n\nvar cnt = columns.Count;  // get column count\n```\n\n#### 8. Dynamic Query è½¬æ `IDictionary<string,object>` æ°æ®\n\n```csharp\nforeach(IDictionary<string,object> row in MiniExcel.Query(path))\n{\n    //..\n}\n\n// or\nvar rows = MiniExcel.Query(path).Cast<IDictionary<string,object>>();\n// or æ¥è¯¢æå®èå´ï¼è¦å¤§åæçæå¦ï¼\n// A2ï¼å·¦ä¸è§ï¼ä»£è¡¨Aåçç¬¬äºè¡ï¼C3ï¼å³ä¸è§ï¼ä»£è¡¨Cåçç¬¬ä¸è¡\n// å¦æä½ ä¸æ³éå¶è¡ï¼å°±ä¸è¦åå«æ°å­\nvar rows = MiniExcel.QueryRange(path, startCell: \"A2\", endCell: \"C3\").Cast<IDictionary<string, object>>();\n```\n\n#### 9. Query è¯» Excel è¿å DataTable\n\næé : ä¸å»ºè®®ä½¿ç¨ï¼å ä¸ºDataTableä¼å°æ°æ®`å¨è½½å¥åå­`ï¼å¤±å»MiniExcelä½åå­æ¶èåè½ã\n\n```C#\nvar table = MiniExcel.QueryAsDataTable(path, useHeaderRow: true);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/116673475-07917200-a9d6-11eb-947e-a6f68cce58df.png)\n\n#### 10. æå®ååæ ¼å¼å§è¯»åæ°æ®\n\n```csharp\nMiniExcel.Query(path,useHeaderRow:true,startCell:\"B3\")\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117260316-8593c400-ae81-11eb-9877-c087b7ac2b01.png)\n\n#### 11. åå¹¶çååæ ¼å¡«å\n\næ³¨æ : æçç¸å¯¹äº`æ²¡æä½¿ç¨åå¹¶å¡«å`æ¥è¯´å·®\nåºå±åå  : OpenXml æ åå° mergeCells æ¾å¨æä»¶æä¸æ¹ï¼å¯¼è´éè¦éåä¸¤æ¬¡ sheetxml\n\n```csharp\n    var config = new OpenXmlConfiguration()\n    {\n        FillMergedCells = true\n    };\n    var rows = MiniExcel.Query(path, configuration: config);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117973630-3527d500-b35f-11eb-95c3-bde255f8114e.png)\n\n\næ¯æä¸åºå®é¿å®½å¤è¡åå¡«å\n\n![image](https://user-images.githubusercontent.com/12729184/117973820-6d2f1800-b35f-11eb-88d8-555063938108.png)\n\n\n\n\n\n#### 12. è¯»åå¤§æä»¶ç¡¬çç¼å­ (Disk-Base Cache - SharedString)\n\næ¦å¿µ : MiniExcel å½å¤æ­æä»¶ SharedString å¤§å°è¶è¿ 5MBï¼é¢è®¾ä¼ä½¿ç¨æ¬å°ç¼å­ï¼å¦ [10x100000.xlsx](https://github.com/MiniExcel/MiniExcel/files/8403819/NotDuplicateSharedStrings_10x100000.xlsx)(ä¸ç¾ä¸ç¬æ°æ®)ï¼è¯»åä¸å¼å¯æ¬å°ç¼å­éè¦æé«åå­ä½¿ç¨çº¦195MBï¼å¼å¯åéä¸º65MBãä½è¦ç¹å«æ³¨æï¼æ­¤ä¼åæ¯ä»¥`æ¶é´æ¢ååå­åå°`ï¼æä»¥è¯»åæçä¼åæ¢ï¼æ­¤ä¾å­è¯»åæ¶é´ä» 7.4 ç§æé«å° 27.2 ç§ï¼åå¦ä¸éè¦è½ç¨ä»¥ä¸ä»£ç å³é­ç¡¬çç¼å­\n\n```csharp\nvar config = new OpenXmlConfiguration { EnableSharedStringCache = false };\nMiniExcel.Query(path,configuration: config)\n```\n\nä¹è½ä½¿ç¨ SharedStringCacheSize è°æ´ sharedString æä»¶å¤§å°è¶è¿æå®å¤§å°æåç¡¬çç¼å­\n```csharp\nvar config = new OpenXmlConfiguration { SharedStringCacheSize=500*1024*1024 };\nMiniExcel.Query(path, configuration: config);\n```\n\n\n![image](https://user-images.githubusercontent.com/12729184/161411851-1c3f72a7-33b3-4944-84dc-ffc1d16747dd.png)\n\n![image](https://user-images.githubusercontent.com/12729184/161411825-17f53ec7-bef4-4b16-b234-e24799ea41b0.png)\n\n\n\n\n\n### å/å¯¼åº Excel  <a name=\"getstart2\"></a>\n\n1. å¿é¡»æ¯éabstract ç±»å«æå¬å¼æ åæ°æé å½æ°\n2. MiniExcel SaveAs æ¯æ´ `IEnumerableåæ°å»¶è¿æ¥è¯¢`ï¼é¤éå¿è¦è¯·ä¸è¦ä½¿ç¨ ToList ç­æ¹æ³è¯»åå¨é¨æ°æ®å°åå­\n\nå¾ç : æ¯å¦å¼å« ToList çåå­å·®å«\n\n#### ![image](https://user-images.githubusercontent.com/12729184/112587389-752b0b00-8e38-11eb-8a52-cfb76c57e5eb.png)1. æ¯æéå<å¿åç±»å«>ææ¯<å¼ºåå«> [[Try it]](https://dotnetfiddle.net/w5WD1J)\n\n```csharp\nvar path = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid()}.xlsx\");\nMiniExcel.SaveAs(path, new[] {\n    new { Column1 = \"MiniExcel\", Column2 = 1 },\n    new { Column1 = \"Github\", Column2 = 2}\n});\n```\n\n\n\n#### 2. `IEnumerable<IDictionary<string, object>>`\n\n```csharp\nvar values = new List<Dictionary<string, object>>()\n{\n    new Dictionary<string,object>{{ \"Column1\", \"MiniExcel\" }, { \"Column2\", 1 } },\n    new Dictionary<string,object>{{ \"Column1\", \"Github\" }, { \"Column2\", 2 } }\n};\nMiniExcel.SaveAs(path, values);\n```\n\noutput :\n\n| Column1   | Column2 |\n| --------- | ------- |\n| MiniExcel | 1       |\n| Github    | 2       |\n\n\n\n#### 3.  IDataReader\n\n- æ¨èä½¿ç¨ï¼å¯ä»¥é¿åè½½å¥å¨é¨æ°æ®å°åå­\n\n```csharp\nMiniExcel.SaveAs(path, reader);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/121275378-149a5e80-c8bc-11eb-85fe-5453552134f0.png)\n\næ¨è DataReader å¤è¡¨æ ¼å¯¼åºæ¹å¼(å»ºè®®ä½¿ç¨ Dapper ExecuteReader )\n\n```csharp\nusing (var cnn = Connection)\n{\n    cnn.Open();\n    var sheets = new Dictionary<string,object>();\n    sheets.Add(\"sheet1\", cnn.ExecuteReader(\"select 1 id\"));\n    sheets.Add(\"sheet2\", cnn.ExecuteReader(\"select 2 id\"));\n    MiniExcel.SaveAs(\"Demo.xlsx\", sheets);\n}\n```\n\n\n\n####  4. Datatable\n\n- ä¸æ¨èä½¿ç¨ï¼ä¼å°æ°æ®å¨è½½å¥åå­\n- ä¼åä½¿ç¨ Caption å½æ ä½åç§°\n\n```csharp\nvar path = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid()}.xlsx\");\nvar table = new DataTable();\n{\n    table.Columns.Add(\"Column1\", typeof(string));\n    table.Columns.Add(\"Column2\", typeof(decimal));\n    table.Rows.Add(\"MiniExcel\", 1);\n    table.Rows.Add(\"Github\", 2);\n}\n\nMiniExcel.SaveAs(path, table);\n```\n\n####  5. Dapper Query\n\næè°¢ @shaofing #552 æ´æ­£ï¼ä½åå­è¯·ä½¿ç¨ `CommandDefinition + CommandFlags.NoCache`ï¼å¦ä¸\n\n```csharp\nusing (var connection = GetConnection(connectionString))\n{\n    var rows = connection.Query(\n        new CommandDefinition(\n            @\"select 'MiniExcel' as Column1,1 as Column2 union all select 'Github',2\"\n            , flags: CommandFlags.NoCache)\n        );\n    MiniExcel.SaveAs(path, rows);\n}\n```\nä¸é¢çæ¹æ³å·²ç¥çé®é¢ï¼ä¸è½ä½¿ç¨å¼æ­¥QueryAsyncçæ¹æ³ï¼ä¼æ¥è¿æ¥å·²ç»å³é­çå¼å¸¸\n\nä»¥ä¸åæ³ä¼å°æ°æ®å¨è½½å¥åå­\n\n```csharp\nusing (var connection = GetConnection(connectionString))\n{\n    var rows = connection.Query(@\"select 'MiniExcel' as Column1,1 as Column2 union all select 'Github',2\");\n    MiniExcel.SaveAs(path, rows);\n}\n```\n\n\n\n#### 6. SaveAs æ¯æ Streamï¼çææä»¶ä¸è½å° [[Try it]](https://dotnetfiddle.net/JOen0e)\n\n```csharp\nusing (var stream = new MemoryStream()) //æ¯æ FileStream,MemoryStream..ç­\n{\n    stream.SaveAs(values);\n}\n```\n\nåæ¯ API å¯¼åº Excel\n\n```csharp\npublic IActionResult DownloadExcel()\n{\n    var values = new[] {\n        new { Column1 = \"MiniExcel\", Column2 = 1 },\n        new { Column1 = \"Github\", Column2 = 2}\n    };\n\n    var memoryStream = new MemoryStream();\n    memoryStream.SaveAs(values);\n    memoryStream.Seek(0, SeekOrigin.Begin);\n    return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n    {\n        FileDownloadName = \"demo.xlsx\"\n    };\n}\n```\n\n\n\n#### 7. åå»ºå¤ä¸ªå·¥ä½è¡¨(Sheet)\n\n```csharp\n// 1. Dictionary<string,object>\nvar users = new[] { new { Name = \"Jack\", Age = 25 }, new { Name = \"Mike\", Age = 44 } };\nvar department = new[] { new { ID = \"01\", Name = \"HR\" }, new { ID = \"02\", Name = \"IT\" } };\nvar sheets = new Dictionary<string, object>\n{\n    [\"users\"] = users,\n    [\"department\"] = department\n};\nMiniExcel.SaveAs(path, sheets);\n\n// 2. DataSet\nvar sheets = new DataSet();\nsheets.Add(UsersDataTable);\nsheets.Add(DepartmentDataTable);\n//..\nMiniExcel.SaveAs(path, sheets);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/118130875-6e7c4580-b430-11eb-9b82-22f02716bd63.png)\n\n#### 8. è¡¨æ ¼æ ·å¼éæ©\n\né¢è®¾æ ·å¼ä¸º\n\n![image](https://user-images.githubusercontent.com/12729184/138234373-cfa97109-b71f-4711-b7f5-0eaaa4a0a3a6.png)\n\nä¸éè¦æ ·å¼\n\n```csharp\nvar config = new OpenXmlConfiguration()\n{\n    TableStyles = TableStyles.None\n};\nMiniExcel.SaveAs(path, value,configuration:config);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/118784917-f3e57700-b8c2-11eb-8718-8d955b1bc197.png)\n\n#### 9. AutoFilter ç­é\n\nä» 0.19.0 æ¯æï¼å¯èç± OpenXmlConfiguration.AutoFilter è®¾å®ï¼é¢è®¾ä¸ºTrueãå³é­ AutoFilter æ¹å¼ :\n\n```csharp\nMiniExcel.SaveAs(path, value, configuration: new OpenXmlConfiguration() { AutoFilter = false });\n```\n\n\n\n#### 10. å¾ççæ\n\næ³¨æ : ç®åæ­¤åè½ä¸æ¯æé¿åOOM\n\n```csharp\nvar value = new[] {\n    new { Name=\"github\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/github_logo.png\"))},\n    new { Name=\"google\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/google_logo.png\"))},\n    new { Name=\"microsoft\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/microsoft_logo.png\"))},\n    new { Name=\"reddit\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/reddit_logo.png\"))},\n    new { Name=\"statck_overflow\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/statck_overflow_logo.png\"))},\n};\nMiniExcel.SaveAs(path, value);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/150462383-ad9931b3-ed8d-4221-a1d6-66f799743433.png)\n\n\n\n#### 11. Byte Array æä»¶å¯¼åº\n\nä» 1.22.0 å¼å§ï¼å½å¼ç±»åä¸º `byte[]` ç³»ç»é¢è®¾ä¼è½¬æä¿å­æä»¶è·¯å¾ä»¥ä¾¿å¯¼å¥æ¶è½¬å `byte[]`ï¼å¦ä¸æ³è½¬æ¢å¯ä»¥å° `OpenXmlConfiguration.EnableConvertByteArray` æ¹ä¸º `false`ï¼è½æåç³»ç»æçã\n\n![image](https://user-images.githubusercontent.com/12729184/153702334-c3b834f4-6ae4-4ddf-bd4e-e5005d5d8c6a.png)\n\n\n\n#### 12. åç´åå¹¶ç¸åçååæ ¼\n\nåªæ¯æ `xlsx` æ ¼å¼åå¹¶ååæ ¼\n\n```csharp\nvar mergedFilePath = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid().ToString()}.xlsx\");\n\nvar path = @\"../../../../../samples/xlsx/TestMergeSameCells.xlsx\";\n\nMiniExcel.MergeSameCells(mergedFilePath, path);\n```\n\n```csharp\nvar memoryStream = new MemoryStream();\n\nvar path = @\"../../../../../samples/xlsx/TestMergeSameCells.xlsx\";\n\nmemoryStream.MergeSameCells(path);\n```\n\nåå¹¶ååå¯¹æ¯\n\n![before_merge_cells](https://user-images.githubusercontent.com/38832863/219970175-913b3d04-d714-4279-a7a4-6cefb7aa6ce8.PNG)\n![after_merge_cells](https://user-images.githubusercontent.com/38832863/219970176-e78c491a-2f90-45a7-a4a2-425c5708d38c.PNG)\n\n#### 13. æ¯å¦åå¥ null values cell\n\né¢è®¾:\n\n```csharp\nDataTable dt = new DataTable();\n\n/* ... */\n\nDataRow dr = dt.NewRow();\n\ndr[\"Name1\"] = \"Somebody once\";\ndr[\"Name2\"] = null;\ndr[\"Name3\"] = \"told me.\";\n\ndt.Rows.Add(dr);\n\nMiniExcel.SaveAs(@\"C:\\temp\\Book1.xlsx\", dt);\n```\n\n![image](https://user-images.githubusercontent.com/31481586/241419441-c4f27e8f-3f87-46db-a10f-08665864c874.png)\n\n```xml\n<x:row r=\"2\">\n    <x:c r=\"A2\" t =\"str\" s=\"2\">\n        <x:v>Somebody once</x:v>\n    </x:c>\n    <x:c r=\"B2\" t =\"str\" s=\"2\">\n        <x:v></x:v>\n    </x:c>\n    <x:c r=\"C2\" t =\"str\" s=\"2\">\n        <x:v>told me.</x:v>\n    </x:c>\n</x:row>\n```\n\nè®¾å®ä¸åå¥:\n\n```csharp\nOpenXmlConfiguration configuration = new OpenXmlConfiguration()\n{\n     EnableWriteNullValueCell = false // Default value is true.\n};\n\nMiniExcel.SaveAs(@\"C:\\temp\\Book1.xlsx\", dt, configuration: configuration);\n```\n\n![image](https://user-images.githubusercontent.com/31481586/241419455-3c0aec8a-4e5f-4d83-b7ec-6572124c165d.png)\n\n\n```xml\n<x:row r=\"2\">\n    <x:c r=\"A2\" t =\"str\" s=\"2\">\n        <x:v>Somebody once</x:v>\n    </x:c>\n    <x:c r=\"B2\" s=\"2\"></x:c>\n    <x:c r=\"C2\" t =\"str\" s=\"2\">\n        <x:v>told me.</x:v>\n    </x:c>\n</x:row>\n```\n\n\n\n\n### æ¨¡æ¿å¡«å Excel <a name=\"getstart3\"></a>\n\n- å®£åæ¹å¼ç±»ä¼¼ Vue æ¨¡æ¿ `{{åéåç§°}}`, ææ¯éåæ¸²æ `{{éååç§°.æ ä½åç§°}}`\n- éåæ¸²ææ¯æ IEnumerable/DataTable/DapperRow\n\n#### 1. åºæ¬å¡«å\n\næ¨¡æ¿:\n![image](https://user-images.githubusercontent.com/12729184/114537556-ed8d2b00-9c84-11eb-8303-a69f62c41e5b.png)\n\næç»ææ:\n![image](https://user-images.githubusercontent.com/12729184/114537490-d8180100-9c84-11eb-8c69-db58692f3a85.png)\n\nä»£ç :\n```csharp\n// 1. By POCO\nvar value = new\n{\n    Name = \"Jack\",\n    CreateDate = new DateTime(2021, 01, 01),\n    VIP = true,\n    Points = 123\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n\n\n// 2. By Dictionary\nvar value = new Dictionary<string, object>()\n{\n    [\"Name\"] = \"Jack\",\n    [\"CreateDate\"] = new DateTime(2021, 01, 01),\n    [\"VIP\"] = true,\n    [\"Points\"] = 123\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```\n\n\n\n#### 2. IEnumerable æ°æ®å¡«å\n\n> Note1: åè¡ä»å·¦å¾å³ä»¥ç¬¬ä¸ä¸ª IEnumerableUse å½åè¡¨æ¥æº (ä¸æ¯æååå¤éå)\n\næ¨¡æ¿:\n![image](https://user-images.githubusercontent.com/12729184/114564652-14f2f080-9ca3-11eb-831f-09e3fedbc5fc.png)\n\næç»ææ:\n![image](https://user-images.githubusercontent.com/12729184/114564204-b2015980-9ca2-11eb-900d-e21249f93f7c.png)\n\nä»£ç :\n\n```csharp\n//1. By POCO\nvar value = new\n{\n    employees = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Lisa\",department=\"HR\"},\n        new {name=\"John\",department=\"HR\"},\n        new {name=\"Mike\",department=\"IT\"},\n        new {name=\"Neo\",department=\"IT\"},\n        new {name=\"Loan\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n\n//2. By Dictionary\nvar value = new Dictionary<string, object>()\n{\n    [\"employees\"] = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Lisa\",department=\"HR\"},\n        new {name=\"John\",department=\"HR\"},\n        new {name=\"Mike\",department=\"IT\"},\n        new {name=\"Neo\",department=\"IT\"},\n        new {name=\"Loan\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```\n\n\n\n#### 3. å¤ææ°æ®å¡«å\n\n> Note: æ¯æå¤ sheet å¡«å,å¹¶å±ç¨åä¸ç»åæ°\n\næ¨¡æ¿:\n\n![image](https://user-images.githubusercontent.com/12729184/114565255-acf0da00-9ca3-11eb-8a7f-8131b2265ae8.png)\n\næç»ææ:\n\n![image](https://user-images.githubusercontent.com/12729184/114565329-bf6b1380-9ca3-11eb-85e3-3969e8bf6378.png)\n\nä»£ç :\n\n```csharp\n// 1. By POCO\nvar value = new\n{\n    title = \"FooCompany\",\n    managers = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Loan\",department=\"IT\"}\n    },\n    employees = new[] {\n        new {name=\"Wade\",department=\"HR\"},\n        new {name=\"Felix\",department=\"HR\"},\n        new {name=\"Eric\",department=\"IT\"},\n        new {name=\"Keaton\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n\n// 2. By Dictionary\nvar value = new Dictionary<string, object>()\n{\n    [\"title\"] = \"FooCompany\",\n    [\"managers\"] = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Loan\",department=\"IT\"}\n    },\n    [\"employees\"] = new[] {\n        new {name=\"Wade\",department=\"HR\"},\n        new {name=\"Felix\",department=\"HR\"},\n        new {name=\"Eric\",department=\"IT\"},\n        new {name=\"Keaton\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```\n\n#### 4. å¤§æ°æ®å¡«åæçæ¯è¾\n\n> NOTE: å¨ MiniExcel ä½¿ç¨ IEnumerable å»¶è¿ ( ä¸ToList ) å¯ä»¥èçåå­ä½¿ç¨\n\n![image](https://user-images.githubusercontent.com/12729184/114577091-5046ec80-9cae-11eb-924b-087c7becf8da.png)\n\n#### 5. Cell å¼èªå¨ç±»å«å¯¹åº\n\næ¨¡æ¿\n\n![image](https://user-images.githubusercontent.com/12729184/114802504-64830a80-9dd0-11eb-8d56-8e8c401b3ace.png)\n\næç»ææ\n\n![image](https://user-images.githubusercontent.com/12729184/114802419-43221e80-9dd0-11eb-9ffe-a2ce34fe7076.png)\n\nç±»å«\n\n```csharp\npublic class Poco\n{\n    public string @string { get; set; }\n    public int? @int { get; set; }\n    public decimal? @decimal { get; set; }\n    public double? @double { get; set; }\n    public DateTime? datetime { get; set; }\n    public bool? @bool { get; set; }\n    public Guid? Guid { get; set; }\n}\n```\n\nä»£ç \n\n```csharp\nvar poco = new TestIEnumerableTypePoco { @string = \"string\", @int = 123, @decimal = decimal.Parse(\"123.45\"), @double = (double)123.33, @datetime = new DateTime(2021, 4, 1), @bool = true, @Guid = Guid.NewGuid() };\nvar value = new\n{\n    Ts = new[] {\n        poco,\n        new TestIEnumerableTypePoco{},\n        null,\n        poco\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```\n\n\n\n#### 6. Example :  ååº Github ä¸æ¡\n\næ¨¡æ¿\n\n![image](https://user-images.githubusercontent.com/12729184/115068623-12073280-9f25-11eb-9124-f4b3efcdb2a7.png)\n\n\næç»ææ\n\n![image](https://user-images.githubusercontent.com/12729184/115068639-1a5f6d80-9f25-11eb-9f45-27c434d19a78.png)\n\nä»£ç \n\n```csharp\nvar projects = new[]\n{\n    new {Name = \"MiniExcel\",Link=\"https://github.com/shps951023/MiniExcel\",Star=146, CreateTime=new DateTime(2021,03,01)},\n    new {Name = \"HtmlTableHelper\",Link=\"https://github.com/shps951023/HtmlTableHelper\",Star=16, CreateTime=new DateTime(2020,02,01)},\n    new {Name = \"PocoClassGenerator\",Link=\"https://github.com/shps951023/PocoClassGenerator\",Star=16, CreateTime=new DateTime(2019,03,17)}\n};\nvar value = new\n{\n    User = \"ITWeiHan\",\n    Projects = projects,\n    TotalStar = projects.Sum(s => s.Star)\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```\n\n#### 7. åç»æ°æ®å¡«å\n\n```csharp\nvar value = new Dictionary<string, object>()\n{\n    [\"employees\"] = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"John\",department=\"HR\"},\n        new {name=\"John\",department=\"IT\"},\n        new {name=\"Neo\",department=\"IT\"},\n        new {name=\"Loan\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```\n##### 1. ä½¿ç¨`@group` tag å @header` tag\n\nBefore\n\n![before_with_header](https://user-images.githubusercontent.com/38832863/218646717-21b9d57a-2be2-4e9a-801b-ae212231d2b4.PNG)\n\nAfter\n\n![after_with_header](https://user-images.githubusercontent.com/38832863/218646721-58a7a340-7004-4bc2-af24-cffcb2c20737.PNG)\n\n##### 2. ä½¿ç¨ @group tag æ²¡æ @header tag\n\nBefore\n\n![before_without_header](https://user-images.githubusercontent.com/38832863/218646873-b12417fa-801b-4890-8e96-669ed3b43902.PNG)\n\nAfter\n\n![after_without_header](https://user-images.githubusercontent.com/38832863/218646872-622461ba-342e-49ee-834f-b91ad9c2dac3.PNG)\n\n##### 3. æ²¡æ @group tag\n\nBefore\n\n![without_group](https://user-images.githubusercontent.com/38832863/218646975-f52a68eb-e031-43b5-abaa-03b67c052d1a.PNG)\n\nAfter\n\n![without_group_after](https://user-images.githubusercontent.com/38832863/218646974-4a3c0e07-7c66-4088-ad07-b4ad3695b7e1.PNG)\n\n#### 8. DataTable å½åæ°\n\n```csharp\nvar managers = new DataTable();\n{\n    managers.Columns.Add(\"name\");\n    managers.Columns.Add(\"department\");\n    managers.Rows.Add(\"Jack\", \"HR\");\n    managers.Rows.Add(\"Loan\", \"IT\");\n}\nvar value = new Dictionary<string, object>()\n{\n    [\"title\"] = \"FooCompany\",\n    [\"managers\"] = managers,\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```\n\n#### 9. å¶ä»\n\n##### 1. æ£æ¥æ¨¡çåæ°\n\nä» V1.24.0 çæ¬å¼å§ï¼é¢è®¾å¿½ç¥æ¨¡çä¸å­å¨çåæ°Keyï¼IgnoreTemplateParameterMissing å¯ä»¥å³å®æ¯å¦æåºéè¯¯\n\n```csharp\nvar config = new OpenXmlConfiguration()\n{\n    IgnoreTemplateParameterMissing = false,\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value, config)\n```\n\n![image](https://user-images.githubusercontent.com/12729184/157464332-e316f829-54aa-4c84-a5aa-9aef337b668d.png)\n\n\n\n\n\n### Excel åå±æ§ (Excel Column Attribute) <a name=\"getstart4\"></a>\n\n\n\n#### 1. æå®ååç§°ãæå®ç¬¬å åãæ¯å¦å¿½ç¥è¯¥å\n\nExcelä¾å­\n\n![image](https://user-images.githubusercontent.com/12729184/114230869-3e163700-99ac-11eb-9a90-2039d4b4b313.png)\n\n\nä»£ç \n```csharp\npublic class ExcelAttributeDemo\n{\n    [ExcelColumnName(\"Column1\")]\n    public string Test1 { get; set; }\n    [ExcelColumnName(\"Column2\")]\n    public string Test2 { get; set; }\n    [ExcelIgnore]\n    public string Test3 { get; set; }\n    [ExcelColumnIndex(\"I\")] // ç³»ç»ä¼èªå¨è½¬æ¢\"I\"ä¸ºç¬¬8å\n    public string Test4 { get; set; }\n    public string Test5 { get; } //ç³»ç»ä¼å¿½ç¥æ­¤å\n    public string Test6 { get; private set; } //setéå¬å¼,ç³»ç»ä¼å¿½ç¥\n    [ExcelColumnIndex(3)] // ä»0å¼å§ç´¢å¼\n    public string Test7 { get; set; }\n}\n\nvar rows = MiniExcel.Query<ExcelAttributeDemo>(path).ToList();\nAssert.Equal(\"Column1\", rows[0].Test1);\nAssert.Equal(\"Column2\", rows[0].Test2);\nAssert.Null(rows[0].Test3);\nAssert.Equal(\"Test7\", rows[0].Test4);\nAssert.Null(rows[0].Test5);\nAssert.Null(rows[0].Test6);\nAssert.Equal(\"Test4\", rows[0].Test7);\n```\n\n#### 2. èªå®ä¹Formatæ ¼å¼ (ExcelFormatAttribute)\n\nå¾ V0.21.0 éå§æ¯ææ `ToString(string content)` çé¡å¥ format\n\nç±»å«\n\n```csharp\npublic class Dto\n{\n    public string Name { get; set; }\n\n    [ExcelFormat(\"MMMM dd, yyyy\")]\n    public DateTime InDate { get; set; }\n}\n```\n\nä»£ç \n\n```csharp\nvar value = new Dto[] {\n    new Issue241Dto{ Name=\"Jack\",InDate=new DateTime(2021,01,04)},\n    new Issue241Dto{ Name=\"Henry\",InDate=new DateTime(2020,04,05)},\n};\nMiniExcel.SaveAs(path, value);\n```\n\nææ\n\n![image](https://user-images.githubusercontent.com/12729184/118910788-ab2bcd80-b957-11eb-8d42-bfce36621b1b.png)\n\nQuery æ¯æèªå®ä¹æ ¼å¼è½¬æ¢\n\n![image](https://user-images.githubusercontent.com/12729184/118911286-87b55280-b958-11eb-9a88-c8ff403d240a.png)\n\n#### 3. æå®åå®½(ExcelColumnWidthAttribute)\n\n```csharp\npublic class Dto\n{\n    [ExcelColumnWidth(20)]\n    public int ID { get; set; }\n    [ExcelColumnWidth(15.50)]\n    public string Name { get; set; }\n}\n```\n\n#### 4. å¤ååå¯¹åºåä¸å±æ§\n\n```csharp\npublic class Dto\n{\n    [ExcelColumnName(excelColumnName:\"EmployeeNo\",aliases:new[] { \"EmpNo\",\"No\" })]\n    public string Empno { get; set; }\n    public string Name { get; set; }\n}\n```\n\n\n\n#### 5. System.ComponentModel.DisplayNameAttribute = ExcelColumnName.excelColumnNameAttribute\n\nä» 1.24.0 å¼å§æ¯æ System.ComponentModel.DisplayNameAttribute ç­åäº ExcelColumnName.excelColumnNameAttribute ææ\n\n```C#\npublic class TestIssueI4TXGTDto\n{\n    public int ID { get; set; }\n    public string Name { get; set; }\n    [DisplayName(\"Specification\")]\n    public string Spc { get; set; }\n    [DisplayName(\"Unit Price\")]\n    public decimal Up { get; set; }\n}\n```\n\n#### 6. ExcelColumnAttribute\n\nä» 1.26.0 çæ¬å¼å§ï¼å¯ä»¥ç®åå¤Attributeåæ³\n```csharp\n        public class TestIssueI4ZYUUDto\n        {\n            [ExcelColumn(Name = \"ID\",Index =0)]\n            public string MyProperty { get; set; }\n            [ExcelColumn(Name = \"CreateDate\", Index = 1,Format =\"yyyy-MM\",Width =100)]\n            public DateTime MyProperty2 { get; set; }\n        }\n```\n\n#### 7. DynamicColumnAttribute å¨æè®¾å® Column\n\nä» 1.26.0 çæ¬å¼å§ï¼å¯ä»¥å¨æè®¾å® Column çå±æ§\n```csharp\n            var config = new OpenXmlConfiguration\n            {\n                DynamicColumns = new DynamicExcelColumn[] {\n                    new DynamicExcelColumn(\"id\"){Ignore=true},\n                    new DynamicExcelColumn(\"name\"){Index=1,Width=10},\n                    new DynamicExcelColumn(\"createdate\"){Index=0,Format=\"yyyy-MM-dd\",Width=15},\n                    new DynamicExcelColumn(\"point\"){Index=2,Name=\"Account Point\"},\n                }\n            };\n            var path = PathHelper.GetTempPath();\n            var value = new[] { new { id = 1, name = \"Jack\", createdate = new DateTime(2022, 04, 12) ,point = 123.456} };\n            MiniExcel.SaveAs(path, value, configuration: config);\n```\n![image](https://user-images.githubusercontent.com/12729184/164510353-5aecbc4e-c3ce-41e8-b6cf-afd55eb23b68.png)\n\n\n\n### æ°å¢ãå é¤ãä¿®æ¹\n\n#### æ°å¢\n\nv1.28.0 å¼å§æ¯æ CSV æå¥æ°å¢ï¼å¨æåä¸è¡æ°å¢Nç¬æ°æ®\n\n```csharp\n// åå§æ°æ®\n{\n    var value = new[] {\n          new { ID=1,Name =\"Jack\",InDate=new DateTime(2021,01,03)},\n          new { ID=2,Name =\"Henry\",InDate=new DateTime(2020,05,03)},\n    };\n    MiniExcel.SaveAs(path, value);\n}\n// æåä¸è¡æ°å¢ä¸è¡æ°æ®\n{\n    var value = new { ID=3,Name = \"Mike\", InDate = new DateTime(2021, 04, 23) };\n    MiniExcel.Insert(path, value);\n}\n// æåä¸è¡æ°å¢Nè¡æ°æ®\n{\n    var value = new[] {\n          new { ID=4,Name =\"Frank\",InDate=new DateTime(2021,06,07)},\n          new { ID=5,Name =\"Gloria\",InDate=new DateTime(2022,05,03)},\n    };\n    MiniExcel.Insert(path, value);\n}\n```\n\n![image](https://user-images.githubusercontent.com/12729184/191023733-1e2fa732-db5c-4a3a-9722-b891fe5aa069.png)\n\n\n\n#### å é¤(æªå®æ)\n\n#### ä¿®æ¹(æªå®æ)\n\n### Excel ç±»å«èªå¨å¤æ­ <a name=\"getstart5\"></a>\n\n- MiniExcel é¢è®¾ä¼æ ¹æ®`æä»¶æ©å±å`å¤æ­æ¯ xlsx è¿æ¯ csvï¼ä½ä¼æå¤±åæ¶åï¼è¯·èªè¡æå®ã\n- Stream ç±»å«æ æ³å¤æ­æ¥æºäºåªç§ excel è¯·èªè¡æå®\n\n```csharp\nstream.SaveAs(excelType:ExcelType.CSV);\n//or\nstream.SaveAs(excelType:ExcelType.XLSX);\n//or\nstream.Query(excelType:ExcelType.CSV);\n//or\nstream.Query(excelType:ExcelType.XLSX);\n```\n\n\n\n### CSV\n\n#### æ¦å¿µ\n\n- é¢è®¾å¨ä»¥å­ä¸²ç±»åè¿åï¼é¢è®¾ä¸ä¼è½¬æ¢ä¸ºæ°å­æèæ¥æï¼é¤éæå¼ºåå«å®ä¹æ³å\n\n\n\n#### èªå®åéç¬¦\n\né¢è®¾ä»¥ `,` ä½ä¸ºåéç¬¦ï¼èªå®ä¹è¯·ä¿®æ¹ `Seperator` å±æ§\n\n```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    Seperator=';'\n};\nMiniExcel.SaveAs(path, values,configuration: config);\n```\n\n\n\n#### èªå®ä¹æ¢è¡ç¬¦\n\né¢è®¾ä»¥ `\\r\\n` ä½ä¸ºæ¢è¡ç¬¦ï¼èªå®ä¹è¯·ä¿®æ¹ `NewLine` å±æ§\n\n```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    NewLine='\\n'\n};\nMiniExcel.SaveAs(path, values,configuration: config);\n```\n\nå¨ V1.30.1 çæ¬å¼å§æ¯æå¨ææ´æ¢æ¢è¡ç¬¦ (thanks @hyzx86)\n\n```csharp\nvar config = new CsvConfiguration()\n{\n    SplitFn = (row) => Regex.Split(row, $\"[\\t,](?=(?:[^\\\"]|\\\"[^\\\"]*\\\")*$)\")\n        .Select(s => Regex.Replace(s.Replace(\"\\\"\\\"\", \"\\\"\"), \"^\\\"|\\\"$\", \"\")).ToArray()\n};\nvar rows = MiniExcel.Query(path, configuration: config).ToList();\n```\n\n\n\n\n\n#### èªå®ä¹ç¼ç \n\n- é¢è®¾ç¼ç ä¸ºãä»Byteé¡ºåºæ è®°æ£æµç¼ç ã(detectEncodingFromByteOrderMarks: true)\n- æèªå®ä¹ç¼ç éæ±ï¼è¯·ä¿®æ¹ StreamReaderFunc /  StreamWriterFunc å±æ§\n\n```csharp\n// Read\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    StreamReaderFunc = (stream) => new StreamReader(stream,Encoding.GetEncoding(\"gb2312\"))\n};\nvar rows = MiniExcel.Query(path, true,excelType:ExcelType.CSV,configuration: config);\n\n// Write\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    StreamWriterFunc = (stream) => new StreamWriter(stream, Encoding.GetEncoding(\"gb2312\"))\n};\nMiniExcel.SaveAs(path, value,excelType:ExcelType.CSV, configuration: config);\n```\n\n\n\n### DataReader\n\n#### 1. GetReader\n\nä» 1.23.0 çæ¬å¼å§è½è·å DataReader\n\n```csharp\n    using (var reader = MiniExcel.GetReader(path,true))\n    {\n        while (reader.Read())\n        {\n            for (int i = 0; i < reader.FieldCount; i++)\n            {\n                var value = reader.GetValue(i);\n            }\n        }\n    }\n```\n\n\n\n\n\n### å¼æ­¥ Async\n\n- ä» v0.17.0 çæ¬å¼å§æ¯æå¼æ­¥ (æè°¢[isdaniel ( SHIH,BING-SIOU)](https://github.com/isdaniel))\n\n```csharp\npublic static Task SaveAsAsync(string path, object value, bool printHeader = true, string sheetName = \"Sheet1\", ExcelType excelType = ExcelType.UNKNOWN, IConfiguration configuration = null)\npublic static Task SaveAsAsync(this Stream stream, object value, bool printHeader = true, string sheetName = \"Sheet1\", ExcelType excelType = ExcelType.XLSX, IConfiguration configuration = null)\npublic static Task<IEnumerable<dynamic>> QueryAsync(string path, bool useHeaderRow = false, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)\npublic static Task<IEnumerable<T>> QueryAsync<T>(this Stream stream, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null) where T : class, new()\npublic static Task<IEnumerable<T>> QueryAsync<T>(string path, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null) where T : class, new()\npublic static Task<IEnumerable<IDictionary<string, object>>> QueryAsync(this Stream stream, bool useHeaderRow = false, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)\npublic static Task SaveAsByTemplateAsync(this Stream stream, string templatePath, object value)\npublic static Task SaveAsByTemplateAsync(this Stream stream, byte[] templateBytes, object value)\npublic static Task SaveAsByTemplateAsync(string path, string templatePath, object value)\npublic static Task SaveAsByTemplateAsync(string path, byte[] templateBytes, object value)\npublic static Task<DataTable> QueryAsDataTableAsync(string path, bool useHeaderRow = true, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)\n```\n\n- ä» v1.25.0 å¼å§æ¯æ `cancellationToken`ã\n\n\n\n### å¶ä»\n\n#### 1. æ å°æä¸¾(enum)\n\nç³»ç»ä¼èªå¨æ å°(æ³¨æ:å¤§å°åä¸ææ)\n\n![image](https://user-images.githubusercontent.com/12729184/116210595-9784b100-a775-11eb-936f-8e7a8b435961.png)\n\nä»V0.18.0çæ¬å¼å§æ¯æEnum Description\n\n```csharp\npublic class Dto\n{\n    public string Name { get; set; }\n    public Type UserType { get; set; }\n}\n\npublic enum Type\n{\n    [Description(\"General User\")]\n    V1,\n    [Description(\"General Administrator\")]\n    V2,\n    [Description(\"Super Administrator\")]\n    V3\n}\n```\n\n![image](https://user-images.githubusercontent.com/12729184/133116630-27cc7161-099a-48b8-9784-cd1e443af3d1.png)\n\nä» 1.30.0 çæ¬å¼å§æ¯æç± Description è½¬å Enum åè½ï¼æè°¢ @KaneLeung\n\n\n\n#### 2. CSV è½¬ XLSX ææ¯ XLSX è½¬ CSV\n\n```csharp\nMiniExcel.ConvertXlsxToCsv(xlsxPath, csvPath);\nMiniExcel.ConvertXlsxToCsv(xlsxStream, csvStream);\nMiniExcel.ConvertCsvToXlsx(csvPath, xlsxPath);\nMiniExcel.ConvertCsvToXlsx(csvStream, xlsxStream);\n```\n```csharp\nusing (var excelStream = new FileStream(path: filePath, FileMode.Open, FileAccess.Read))\nusing (var csvStream = new MemoryStream())\n{\n   MiniExcel.ConvertXlsxToCsv(excelStream, csvStream);\n}\n```\n#### 3. èªå®ä¹ CultureInfo\n\nä» 1.22.0 çæ¬å¼å§ï¼å¯ä»¥ä½¿ç¨ä»¥ä¸ä»£ç èªå®ä¹æåä¿¡æ¯ï¼ç³»ç»é¢è®¾ `CultureInfo.InvariantCulture`ã\n\n```csharp\nvar config = new CsvConfiguration()\n{\n    Culture = new CultureInfo(\"fr-FR\"),\n};\nMiniExcel.SaveAs(path, value, configuration: config);\n\n//or\nMiniExcel.Query(path, configuration: config);\n```\n\n#### 4. å¯¼åºèªå®ä¹ Buffer Size\n```csharp\n    public abstract class Configuration : IConfiguration\n    {\n        public int BufferSize { get; set; } = 1024 * 512;\n    }\n```\n\n#### 5. FastMode\n\nç³»ç»ä¸ä¼éå¶åå­ï¼è¾¾å°æ´å¿«çæç\n\n```csharp\nvar config = new OpenXmlConfiguration() { FastMode = true };\nMiniExcel.SaveAs(path, reader,configuration:config);\n```\n\n\n\n### ä¾å­\n\n#### 1. SQLite & Dapper è¯»åå¤§æ°æ®æ°å¢å°æ°æ®åº\n\nNote : è¯·ä¸è¦å¼å« call ToList/ToArray ç­æ¹æ³ï¼è¿ä¼å°æææ°æ®è¯»å°åå­å\n\n```csharp\nusing (var connection = new SQLiteConnection(connectionString))\n{\n    connection.Open();\n    using (var transaction = connection.BeginTransaction())\n    using (var stream = File.OpenRead(path))\n    {\n       var rows = stream.Query();\n       foreach (var row in rows)\n             connection.Execute(\"insert into T (A,B) values (@A,@B)\", new { row.A, row.B }, transaction: transaction);\n       transaction.Commit();\n    }\n}\n```\n\næè½:\n![image](https://user-images.githubusercontent.com/12729184/111072579-2dda7b80-8516-11eb-9843-c01a1edc88ec.png)\n\n\n#### 2. ASP.NET Core 3.1 ä¸è½½/ä¸ä¼  Excel Xlsx API Demo [Try it](tests/MiniExcel.Tests.AspNetCore)\n\n```csharp\npublic class ApiController : Controller\n{\n    public IActionResult Index()\n    {\n        return new ContentResult\n        {\n            ContentType = \"text/html\",\n            StatusCode = (int)HttpStatusCode.OK,\n            Content = @\"<html><body>\n<a href='api/DownloadExcel'>DownloadExcel</a><br>\n<a href='api/DownloadExcelFromTemplatePath'>DownloadExcelFromTemplatePath</a><br>\n<a href='api/DownloadExcelFromTemplateBytes'>DownloadExcelFromTemplateBytes</a><br>\n<p>Upload Excel</p>\n<form method='post' enctype='multipart/form-data' action='/api/uploadexcel'>\n    <input type='file' name='excel'> <br>\n    <input type='submit' >\n</form>\n</body></html>\"\n        };\n    }\n\n    public IActionResult DownloadExcel()\n    {\n        var values = new[] {\n            new { Column1 = \"MiniExcel\", Column2 = 1 },\n            new { Column1 = \"Github\", Column2 = 2}\n        };\n        var memoryStream = new MemoryStream();\n        memoryStream.SaveAs(values);\n        memoryStream.Seek(0, SeekOrigin.Begin);\n        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n        {\n            FileDownloadName = \"demo.xlsx\"\n        };\n    }\n\n    public IActionResult DownloadExcelFromTemplatePath()\n    {\n        string templatePath = \"TestTemplateComplex.xlsx\";\n\n        Dictionary<string, object> value = new Dictionary<string, object>()\n        {\n            [\"title\"] = \"FooCompany\",\n            [\"managers\"] = new[] {\n                new {name=\"Jack\",department=\"HR\"},\n                new {name=\"Loan\",department=\"IT\"}\n            },\n            [\"employees\"] = new[] {\n                new {name=\"Wade\",department=\"HR\"},\n                new {name=\"Felix\",department=\"HR\"},\n                new {name=\"Eric\",department=\"IT\"},\n                new {name=\"Keaton\",department=\"IT\"}\n            }\n        };\n\n        MemoryStream memoryStream = new MemoryStream();\n        memoryStream.SaveAsByTemplate(templatePath, value);\n        memoryStream.Seek(0, SeekOrigin.Begin);\n        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n        {\n            FileDownloadName = \"demo.xlsx\"\n        };\n    }\n\n    private static Dictionary<string, Byte[]> TemplateBytesCache = new Dictionary<string, byte[]>();\n\n    static ApiController()\n    {\n        string templatePath = \"TestTemplateComplex.xlsx\";\n        byte[] bytes = System.IO.File.ReadAllBytes(templatePath);\n        TemplateBytesCache.Add(templatePath, bytes);\n    }\n\n    public IActionResult DownloadExcelFromTemplateBytes()\n    {\n        byte[] bytes = TemplateBytesCache[\"TestTemplateComplex.xlsx\"];\n\n        Dictionary<string, object> value = new Dictionary<string, object>()\n        {\n            [\"title\"] = \"FooCompany\",\n            [\"managers\"] = new[] {\n                new {name=\"Jack\",department=\"HR\"},\n                new {name=\"Loan\",department=\"IT\"}\n            },\n            [\"employees\"] = new[] {\n                new {name=\"Wade\",department=\"HR\"},\n                new {name=\"Felix\",department=\"HR\"},\n                new {name=\"Eric\",department=\"IT\"},\n                new {name=\"Keaton\",department=\"IT\"}\n            }\n        };\n\n        MemoryStream memoryStream = new MemoryStream();\n        memoryStream.SaveAsByTemplate(bytes, value);\n        memoryStream.Seek(0, SeekOrigin.Begin);\n        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n        {\n            FileDownloadName = \"demo.xlsx\"\n        };\n    }\n\n    public IActionResult UploadExcel(IFormFile excel)\n    {\n        var stream = new MemoryStream();\n        excel.CopyTo(stream);\n\n        foreach (var item in stream.Query(true))\n        {\n            // do your logic etc.\n        }\n\n        return Ok(\"File uploaded successfully\");\n    }\n}\n```\n\n####  3. åé¡µæ¥è¯¢\n\n```csharp\nvoid Main()\n{\n    var rows = MiniExcel.Query(path);\n\n    Console.WriteLine(\"==== No.1 Page ====\");\n    Console.WriteLine(Page(rows,pageSize:3,page:1));\n    Console.WriteLine(\"==== No.50 Page ====\");\n    Console.WriteLine(Page(rows,pageSize:3,page:50));\n    Console.WriteLine(\"==== No.5000 Page ====\");\n    Console.WriteLine(Page(rows,pageSize:3,page:5000));\n}\n\npublic static IEnumerable<T> Page<T>(IEnumerable<T> en, int pageSize, int page)\n{\n    return en.Skip(page * pageSize).Take(pageSize);\n}\n```\n\n![20210419](https://user-images.githubusercontent.com/12729184/114679083-6ef4c400-9d3e-11eb-9f78-a86daa45fe46.gif)\n\n#### 4. WebFormä¸è½å°å¯¼åºExcel\n\n```csharp\nvar fileName = \"Demo.xlsx\";\nvar sheetName = \"Sheet1\";\nHttpResponse response = HttpContext.Current.Response;\nresponse.Clear();\nresponse.ContentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\nresponse.AddHeader(\"Content-Disposition\", $\"attachment;filename=\\\"{fileName}\\\"\");\nvar values = new[] {\n    new { Column1 = \"MiniExcel\", Column2 = 1 },\n    new { Column1 = \"Github\", Column2 = 2}\n};\nvar memoryStream = new MemoryStream();\nmemoryStream.SaveAs(values, sheetName: sheetName);\nmemoryStream.Seek(0, SeekOrigin.Begin);\nmemoryStream.CopyTo(Response.OutputStream);\nresponse.End();\n```\n\n\n\n#### 5. å¨æ i18n å¤å½è¯­è¨è·æéç®¡ç\n\nåä¾å­ä¸æ ·ï¼å»ºç«ä¸ä¸ªæ¹æ³å¤ç i18n è·æéç®¡çï¼å¹¶æ­é `yield return è¿å IEnumerable<Dictionary<string, object>>`ï¼å³å¯è¾¾å°å¨æãä½åå­å¤çææ\n\n```csharp\nvoid Main()\n{\n    var value = new Order[] {\n        new Order(){OrderNo = \"SO01\",CustomerID=\"C001\",ProductID=\"P001\",Qty=100,Amt=500},\n        new Order(){OrderNo = \"SO02\",CustomerID=\"C002\",ProductID=\"P002\",Qty=300,Amt=400},\n    };\n\n    Console.WriteLine(\"en-Us and Sales role\");\n    {\n        var path = Path.GetTempPath() + Guid.NewGuid() + \".xlsx\";\n        var lang = \"en-US\";\n        var role = \"Sales\";\n        MiniExcel.SaveAs(path, GetOrders(lang, role, value));\n        MiniExcel.Query(path, true).Dump();\n    }\n\n    Console.WriteLine(\"zh-CN and PMC role\");\n    {\n        var path = Path.GetTempPath() + Guid.NewGuid() + \".xlsx\";\n        var lang = \"zh-CN\";\n        var role = \"PMC\";\n        MiniExcel.SaveAs(path, GetOrders(lang, role, value));\n        MiniExcel.Query(path, true).Dump();\n    }\n}\n\nprivate IEnumerable<Dictionary<string, object>> GetOrders(string lang, string role, Order[] orders)\n{\n    foreach (var order in orders)\n    {\n        var newOrder = new Dictionary<string, object>();\n\n        if (lang == \"zh-CN\")\n        {\n            newOrder.Add(\"å®¢æ·ç¼å·\", order.CustomerID);\n            newOrder.Add(\"è®¢åç¼å·\", order.OrderNo);\n            newOrder.Add(\"äº§åç¼å·\", order.ProductID);\n            newOrder.Add(\"æ°é\", order.Qty);\n            if (role == \"Sales\")\n                newOrder.Add(\"ä»·æ ¼\", order.Amt);\n            yield return newOrder;\n        }\n        else if (lang == \"en-US\")\n        {\n            newOrder.Add(\"Customer ID\", order.CustomerID);\n            newOrder.Add(\"Order No\", order.OrderNo);\n            newOrder.Add(\"Product ID\", order.ProductID);\n            newOrder.Add(\"Quantity\", order.Qty);\n            if (role == \"Sales\")\n                newOrder.Add(\"Amount\", order.Amt);\n            yield return newOrder;\n        }\n        else\n        {\n            throw new InvalidDataException($\"lang {lang} wrong\");\n        }\n    }\n}\n\npublic class Order\n{\n    public string OrderNo { get; set; }\n    public string CustomerID { get; set; }\n    public decimal Qty { get; set; }\n    public string ProductID { get; set; }\n    public decimal Amt { get; set; }\n}\n```\n\n![image](https://user-images.githubusercontent.com/12729184/118939964-d24bc480-b982-11eb-88dd-f06655f6121a.png)\n\n\n\n\n\n\n\n\n\n### FAQ å¸¸è§é®é¢\n\n#### Q: Excel è¡¨å¤´æ é¢åç§°è· class å±æ§åç§°ä¸ä¸è´ï¼å¦ä½å¯¹åº?\n\nA. è¯·ä½¿ç¨ ExcelColumnName ä½ mapping\n\n![image](https://user-images.githubusercontent.com/12729184/116020475-eac50980-a678-11eb-8804-129e87200e5e.png)\n\n#### Q. å¤å·¥ä½è¡¨(sheet)å¦ä½å¯¼åº/æ¥è¯¢æ°æ®?\n\nA. ä½¿ç¨ `GetSheetNames `æ¹æ³æ­é Query ç sheetName åæ°\n\n\n\n```csharp\nvar sheets = MiniExcel.GetSheetNames(path);\nforeach (var sheet in sheets)\n{\n    Console.WriteLine($\"sheet name : {sheet} \");\n    var rows = MiniExcel.Query(path,useHeaderRow:true,sheetName:sheet);\n    Console.WriteLine(rows);\n}\n```\n\n![image](https://user-images.githubusercontent.com/12729184/116199841-2a1f5300-a76a-11eb-90a3-6710561cf6db.png)\n\n\n\n#### Q. æ¯å¦ä½¿ç¨ Count ä¼è½½å¥å¨é¨æ°æ®å°åå­\n\nä¸ä¼ï¼å¾çæµè¯ä¸ç¾ä¸è¡*ååæ°æ®ï¼ç®åæµè¯ï¼åå­æå¤§ä½¿ç¨ < 60MBï¼è±è´¹13.65ç§\n\n![image](https://user-images.githubusercontent.com/12729184/117118518-70586000-adc3-11eb-9ce3-2ba76cf8b5e5.png)\n\n\n\n#### Q. Queryå¦ä½ä½¿ç¨æ´æ°ç´¢å¼åå¼?\n\nQuery é¢è®¾ç´¢å¼ä¸ºå­ä¸²Key : A,B,C....ï¼æ³è¦æ¹ä¸ºæ°å­ç´¢å¼ï¼è¯·å»ºç«ä»¥ä¸æ¹æ³èªè¡è½¬æ¢\n\n```csharp\nvoid Main()\n{\n    var path = @\"D:\\git\\MiniExcel\\samples\\xlsx\\TestTypeMapping.xlsx\";\n    var rows = MiniExcel.Query(path,true);\n    foreach (var r in ConvertToIntIndexRows(rows))\n    {\n        Console.Write($\"column 0 : {r[0]} ,column 1 : {r[1]}\");\n        Console.WriteLine();\n    }\n}\n\nprivate IEnumerable<Dictionary<int, object>> ConvertToIntIndexRows(IEnumerable<object> rows)\n{\n    ICollection<string> keys = null;\n    var isFirst = true;\n    foreach (IDictionary<string,object> r in rows)\n    {\n        if(isFirst)\n        {\n            keys = r.Keys;\n            isFirst = false;\n        }\n\n        var dic = new Dictionary<int, object>();\n        var index = 0;\n        foreach (var key in keys)\n            dic[index++] = r[key];\n        yield return dic;\n    }\n}\n```\n\n#### Q. å¯¼åºæ¶æ°ç»ä¸ºç©ºæ¶çææ²¡ææ é¢ç©º Excel\n\nå ä¸º MiniExcel ä½¿ç¨ç±»ä¼¼ JSON.NET å¨æä»å¼è·åç±»å«æºå¶ç®å API æä½ï¼æ²¡ææ°æ®å°±æ æ³è·åç±»å«ãå¯ä»¥æ¥ç[ issue #133](https://github.com/shps951023/MiniExcel/issues/133) äºè§£ã\n\n![image](https://user-images.githubusercontent.com/12729184/122639771-546c0c00-d12e-11eb-800c-498db27889ca.png)\n\n> å¼ºåå«å DataTable ä¼çæè¡¨å¤´ï¼ä½ Dicionary ä¾æ§æ¯ç©º Excel\n\n#### Q. å¦ä½äººä¸ºç©ºç½è¡ä¸­æ­¢éå?\n\nå¸¸åçäººä¸ºä¸å°å¿å¨æåå è¡çä¸ç©ºç½è¡æåµï¼MiniExcelå¯ä»¥æ­é `LINQ TakeWhile`å®ç°ç©ºç½è¡ä¸­æ­éåã\n\n![image](https://user-images.githubusercontent.com/12729184/130209137-162621c2-f337-4479-9996-beeac65bc4d4.png)\n\n\n\n#### Q. ä¸æ³è¦ç©ºç½è¡å¦ä½å»é¤?\n\n\n\n![image](https://user-images.githubusercontent.com/12729184/137873865-7107d8f5-eb59-42db-903a-44e80589f1b2.png)\n\n\n\nIEnumerableçæ¬\n\n```csharp\npublic static IEnumerable<dynamic> QueryWithoutEmptyRow(Stream stream, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration)\n{\n    var rows = stream.Query(useHeaderRow,sheetName,excelType,startCell,configuration);\n    foreach (IDictionary<string,object> row in rows)\n    {\n        if(row.Keys.Any(key=>row[key]!=null))\n            yield return row;\n    }\n}\n```\n\n\n\nDataTableçæ¬\n\n```csharp\npublic static DataTable QueryAsDataTableWithoutEmptyRow(Stream stream, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration)\n{\n    if (sheetName == null && excelType != ExcelType.CSV) /*Issue #279*/\n        sheetName = stream.GetSheetNames().First();\n\n    var dt = new DataTable(sheetName);\n    var first = true;\n    var rows = stream.Query(useHeaderRow,sheetName,excelType,startCell,configuration);\n    foreach (IDictionary<string, object> row in rows)\n    {\n        if (first)\n        {\n\n            foreach (var key in row.Keys)\n            {\n                var column = new DataColumn(key, typeof(object)) { Caption = key };\n                dt.Columns.Add(column);\n            }\n\n            dt.BeginLoadData();\n            first = false;\n        }\n\n        var newRow = dt.NewRow();\n        var isNull=true;\n        foreach (var key in row.Keys)\n        {\n            var _v = row[key];\n            if(_v!=null)\n                isNull = false;\n            newRow[key] = _v;\n        }\n\n        if(!isNull)\n            dt.Rows.Add(newRow);\n    }\n\n    dt.EndLoadData();\n    return dt;\n}\n```\n\n\n\n#### Q. ä¿å­å¦ä½åä»£MiniExcel.SaveAs(path, value)ï¼æä»¶å­å¨ç³»ç»ä¼æ¥å·²å­å¨éè¯¯?\n\nè¯·æ¹ä»¥Streamèªè¡ç®¡æ§Streamè¡ä¸ºï¼å¦\n\n```C#\n    using (var stream = File.Create(\"Demo.xlsx\"))\n        MiniExcel.SaveAs(stream,value);\n```\n\nä»V1.25.0çæ¬å¼å§ï¼æ¯æ overwriteFile åæ¸ï¼æ¹ä¾¿èª¿æ´æ¯å¦è¦è¦èå·²å­å¨æä»¶\n\n```csharp\n    MiniExcel.SaveAs(path, value, overwriteFile: true);\n```\n\n\n\n\n\n### å±éä¸è­¦å\n\n- ç®åä¸æ¯æ´ xls (97-2003) ææ¯å å¯æä»¶\n- xlsm åªæ¯ææ¥è¯¢\n\n\n\n### åè\n\n[ExcelDataReader](https://github.com/ExcelDataReader/ExcelDataReader)  / [ClosedXML](https://github.com/ClosedXML/ClosedXML) / [Dapper](https://github.com/DapperLib/Dapper) / [ExcelNumberFormat](https://github.com/andersnm/ExcelNumberFormat)\n\n\n\n### æè°¢åå\n\n####  [Jetbrains](https://www.jetbrains.com/)\n\n![jetbrains-variant-2](https://user-images.githubusercontent.com/12729184/123997015-8456c180-da02-11eb-829a-aec476fe8e94.png)\n\næè°¢æä¾åè´¹IDEæ¯ææ­¤é¡¹ç® ([License](https://user-images.githubusercontent.com/12729184/123988233-6ab17c00-d9fa-11eb-8739-2a08c6a4a263.png))\n\n\n\n### æ¶çæµæ°´\nç®åæ¶ç https://github.com/mini-software/MiniExcel/issues/560#issue-2080619180\n\n\n### Contributors\n\n![](https://contrib.rocks/image?repo=shps951023/MiniExcel)\n\n"
        },
        {
          "name": "README.zh-Hant.md",
          "type": "blob",
          "size": 51.7392578125,
          "content": "<div align=\"center\">\n<p><a href=\"https://www.nuget.org/packages/MiniExcel\"><img src=\"https://img.shields.io/nuget/v/MiniExcel.svg\" alt=\"NuGet\"></a>  <a href=\"https://www.nuget.org/packages/MiniExcel\"><img src=\"https://img.shields.io/nuget/dt/MiniExcel.svg\" alt=\"\"></a>\n<a href=\"https://ci.appveyor.com/project/shps951023/miniexcel/branch/master\"><img src=\"https://ci.appveyor.com/api/projects/status/b2vustrwsuqx45f4/branch/master?svg=true\" alt=\"Build status\"></a>\n<a href=\"https://gitee.com/dotnetchina/MiniExcel\"><img src=\"https://gitee.com/dotnetchina/MiniExcel/badge/star.svg\" alt=\"star\"></a> <a href=\"https://github.com/shps951023/MiniExcel\" rel=\"nofollow\"><img src=\"https://img.shields.io/github/stars/shps951023/MiniExcel?logo=github\" alt=\"GitHub stars\"></a>\n<a href=\"https://www.nuget.org/packages/MiniExcel\"><img src=\"https://img.shields.io/badge/.NET-%3E%3D%204.5-red.svg\" alt=\"version\"></a>\n</p>\n</div>\n\n---\n\n<div align=\"center\">\n<p><strong><a href=\"README.md\">English</a> | <a href=\"README.zh-CN.md\">ç®ä½ä¸­æ</a> | <a href=\"README.zh-Hant.md\">ç¹é«ä¸­æ</a></strong></p>\n</div>\n\n---\n\n[<img align=\"right\" src=\"https://github.com/dotnet-foundation/swag/blob/main/logo/dotnetfoundation_v4.png?raw=true\" width=\"100\" />](https://www.dotnetfoundation.org/)\n\n<div align=\"center\">\n<p>è©²å°æ¡æ¯ <a href=\"https://www.dotnetfoundation.org/\">.NET åºéæ</a> çä¸é¨åï¼ä¸¦æ ¹æå¶<a href=\"https://www.dotnetfoundation.org/code-of-conduct\">è¡çºæºå</a> éä½ã</p>\n</div>\n\n---\n\n<div align=\"center\">\n<p> æ¨ç <a href=\"https://github.com/shps951023/miniexcel\">Star</a> å <a href=\"https://miniexcel.github.io\">è´å©</a> è½å¹«å© MiniExcel æé· </p>\n</div>\n\n---\n\n### [ð¥å½±çæå­¸](https://www.udemy.com/course/miniexcel-tutorial/?referralCode=732E11323F1E8064F96C)\n\n---\n\n### ç°¡ä»\n\nMiniExcel ç°¡å®ãé«æé¿åOOMç.NETèçExcelæ¥ãå¯«ãå¡«åå·¥å·ã\n\nç®åä¸»æµæ¡æ¶å¤§å¤éè¦å°è³æå¨è¼å¥å°è¨æ¶é«æ¹ä¾¿æä½ï¼ä½éæå°è´è¨æ¶é«æ¶èåé¡ï¼MiniExcel åè©¦ä»¥ Stream è§åº¦å¯«åºå±¤ç®æ³éè¼¯ï¼è½è®åæ¬1000å¤MBå ç¨éä½å°å¹¾MBï¼é¿åè¨æ¶é«ä¸å¤ ææ³ã\n\n![image](https://user-images.githubusercontent.com/12729184/113084691-1804d000-9211-11eb-9b08-cbb89d9ecdc2.png)\n\n### ç¹é»\n- ä½è¨æ¶é«èç¨ï¼é¿åOOMãé »ç¹ Full GC ææ³\n- æ¯æ`å³æ`æä½æ¯è¡è³æ\n- å¼å·æ­é LINQ å»¶é²æ¥è©¢ç¹æ§ï¼è½è¾¦å°ä½æ¶èãå¿«éåé ç­è¤éæ¥è©¢\n- è¼éï¼ä¸éè¦å®è£ Microsoft OfficeãCOM+ï¼DLLå°æ¼150KB\n- ç°¡ä¾¿æä½ç API é¢¨æ ¼\n\n\n\n### å¿«ééå§\n\n- [å°å¥ãè®å Excel](#getstart1)\n- [å°åº ãåµå»º Excel](#getstart2)\n- [æ¨¡æ¿å¡«åãåµå»º Excel](#getstart3)\n- [Excel Column Name/Index/Ignore Attribute](#getstart4)\n- [ä¾å­](#getstart5)\n\n\n### å®è£\n\nè«æ¥ç [NuGet](https://www.nuget.org/packages/MiniExcel)\n\n### æ´æ°æ¥èª\n\nè«æ¥ç [Release Notes](docs)\n\n### TODO\n\nè«æ¥ç [TODO](https://github.com/shps951023/MiniExcel/projects/1?fullscreen=true)\n\n### æ§è½æ¯è¼ãæ¸¬è©¦\n\nBenchmarks  éè¼¯å¯ä»¥å¨ [MiniExcel.Benchmarks](benchmarks/MiniExcel.Benchmarks/Program.cs) æ¥çææ¯æäº¤ PRï¼éè¡æä»¤\n\n```bash\ndotnet run -p .\\benchmarks\\MiniExcel.Benchmarks\\ -c Release -f netcoreapp3.1 -- -f * --join\n```\n\næå¾ä¸æ¬¡éè¡è¦æ ¼ãçµæ :\n\n```bash\nBenchmarkDotNet=v0.12.1, OS=Windows 10.0.19042\nIntel Core i7-7700 CPU 3.60GHz (Kaby Lake), 1 CPU, 8 logical and 4 physical cores\n  [Host]     : .NET Framework 4.8 (4.8.4341.0), X64 RyuJIT\n  Job-ZYYABG : .NET Framework 4.8 (4.8.4341.0), X64 RyuJIT\nIterationCount=3  LaunchCount=3  WarmupCount=3\n```\n\nBenchmark History :  [Link](https://github.com/shps951023/MiniExcel/issues/276)\n\n\n\n#### å°å¥ãæ¥è©¢ Excel æ¯è¼\n\néè¼¯ : ä»¥ [**Test1,000,000x10.xlsx**](benchmarks/MiniExcel.Benchmarks/Test1%2C000%2C000x10.xlsx) ååºæºèä¸»æµæ¡æ¶åæ§è½æ¸¬è©¦ï¼ç¸½å± 1,000,000 è¡ * 10 åç­ \"HelloWorld\"ï¼æä»¶å¤§å° 23 MB\n\n\n| Library      | Method                       | æå¤§è¨æ¶é«èç¨ |         å¹³åæé |\n| ---------------------------- | -------------: | ---------------: | ---------------: |\n| MiniExcel | 'MiniExcel QueryFirst'       |       0.109 MB | 0.0007264 sec |\n| ExcelDataReader | 'ExcelDataReader QueryFirst' |       15.24 MB | 10.66421 sec |\n| MiniExcel  | 'MiniExcel Query'            |        17.3 MB | 14.17933 sec |\n| ExcelDataReader | 'ExcelDataReader Query'      |        17.3 MB | 22.56508 sec |\n| Epplus    | 'Epplus QueryFirst'          |       1,452 MB | 18.19801 sec |\n| Epplus        | 'Epplus Query'               |       1,451 MB | 23.64747 sec |\n| OpenXmlSDK | 'OpenXmlSDK Query'           |       1,412 MB | 52.00327 sec |\n| OpenXmlSDK | 'OpenXmlSDK QueryFirst'      |       1,413 MB | 52.34865 sec |\n| ClosedXml | 'ClosedXml QueryFirst'       |       2,158 MB | 66.18897 sec |\n| ClosedXml  | 'ClosedXml Query'            |       2,184 MB | 191.43412 sec |\n\n#### å°åºãåµå»º Excel æ¯è¼\n\néè¼¯ : åµå»º1åè¬ç­ \"HelloWorld\"\n\n| Library            | Method                   | æå¤§è¨æ¶é«èç¨ |         å¹³åæé |\n| ------------------------ | -------------: | ---------------: | -----------: |\n| MiniExcel | 'MiniExcel Create Xlsx'  |          15 MB | 11.53181 sec |\n| Epplus | 'Epplus Create Xlsx'     |       1,204 MB | 22.50971 sec |\n| OpenXmlSdk | 'OpenXmlSdk Create Xlsx' |       2,621 MB | 42.47399 sec |\n| ClosedXml | 'ClosedXml Create Xlsx'  |       7,141 MB | 140.93992 sec |\n\n\n\n\n\n### è®/å°å¥ Excel <a name=\"getstart1\"></a>\n\n- æ¯æä»»ä½ stream ç±»å : FileStream,MemoryStream\n\n\n\n#### 1. Query æ¥è©¢ Excel è¿å`å¼·åå¥` IEnumerable è³æ [[Try it]](https://dotnetfiddle.net/w5WD1J)\n\n```csharp\npublic class UserAccount\n{\n    public Guid ID { get; set; }\n    public string Name { get; set; }\n    public DateTime BoD { get; set; }\n    public int Age { get; set; }\n    public bool VIP { get; set; }\n    public decimal Points { get; set; }\n}\n\nvar rows = MiniExcel.Query<UserAccount>(path);\n\n// or\n\nusing (var stream = File.OpenRead(path))\n    var rows = stream.Query<UserAccount>();\n```\n\n![image](https://user-images.githubusercontent.com/12729184/111107423-c8c46b80-8591-11eb-982f-c97a2dafb379.png)\n\n\n#### 2. Query æ¥è©¢ Excel è¿å`Dynamic` IEnumerable è³æ [[Try it]](https://dotnetfiddle.net/w5WD1J)\n\n* Key ç³»çµ±é è¨­çº `A,B,C,D...Z`\n\n| MiniExcel     | 1     |\n| -------- | -------- |\n| Github     | 2     |\n\n```csharp\n\nvar rows = MiniExcel.Query(path).ToList();\n\n// or\nusing (var stream = File.OpenRead(path))\n{\n    var rows = stream.Query().ToList();\n\n    Assert.Equal(\"MiniExcel\", rows[0].A);\n    Assert.Equal(1, rows[0].B);\n    Assert.Equal(\"Github\", rows[1].A);\n    Assert.Equal(2, rows[1].B);\n}\n```\n\n#### 3. æ¥è©¢è³æä»¥ç¬¬ä¸è¡æ¸æç¶Key [[Try it]](https://dotnetfiddle.net/w5WD1J)\n\næ³¨æ : ååä»¥å³éæ¸æçºæº\n\nInput Excel :\n\n| Column1 | Column2 |\n| -------- | -------- |\n| MiniExcel     | 1     |\n| Github     | 2     |\n\n\n```csharp\n\nvar rows = MiniExcel.Query(useHeaderRow:true).ToList();\n\n// or\n\nusing (var stream = File.OpenRead(path))\n{\n    var rows = stream.Query(useHeaderRow:true).ToList();\n\n    Assert.Equal(\"MiniExcel\", rows[0].Column1);\n    Assert.Equal(1, rows[0].Column2);\n    Assert.Equal(\"Github\", rows[1].Column1);\n    Assert.Equal(2, rows[1].Column2);\n}\n```\n\n#### 4. Query æ¥è©¢æ¯æ´å»¶é²å è¼(Deferred Execution)ï¼è½éåLINQ First/Take/Skipè¾¦å°ä½æ¶èãé«æçè¤éæ¥è©¢\n\nèä¾ : æ¥è©¢ç¬¬ä¸ç­è³æ\n\n```csharp\nvar row = MiniExcel.Query(path).First();\nAssert.Equal(\"HelloWorld\", row.A);\n\n// or\n\nusing (var stream = File.OpenRead(path))\n{\n    var row = stream.Query().First();\n    Assert.Equal(\"HelloWorld\", row.A);\n}\n```\n\nèå¶ä»æ¡æ¶æçæ¯è¼ :\n\n![queryfirst](https://user-images.githubusercontent.com/12729184/111072392-6037a900-8515-11eb-9693-5ce2dad1e460.gif)\n\n#### 5. æ¥è©¢æå® Sheet åç¨±\n\n```csharp\nMiniExcel.Query(path, sheetName: \"SheetName\");\n//or\nstream.Query(sheetName: \"SheetName\");\n```\n\n#### 6. æ¥è©¢ææ Sheet åç¨±è·è³æ\n\n```csharp\nvar sheetNames = MiniExcel.GetSheetNames(path);\nforeach (var sheetName in sheetNames)\n{\n    var rows = MiniExcel.Query(path, sheetName: sheetName);\n}\n```\n\n#### 7. æ¥è©¢æææ¬(å)\n\n```csharp\nvar columns = MiniExcel.GetColumns(path); // e.g result : [\"A\",\"B\"...]\n\nvar cnt = columns.Count;  // get column count\n```\n\n#### 8. Dynamic Query è½æ `IDictionary<string,object>` è³æ\n\n```csharp\nforeach(IDictionary<string,object> row in MiniExcel.Query(path))\n{\n    //..\n}\n\n// or\nvar rows = MiniExcel.Query(path).Cast<IDictionary<string,object>>();\n// or æ»è©¢æå®ç¯åï¼è¦å¤§å¯«æçæå¦ï¼\n// A2ï¼å·¦ä¸è§ï¼ä»£è¡¨Aåçç¬¬äºè¡ï¼C3ï¼å³ä¸è§ï¼ä»£è¡¨Cåçç¬¬ä¸è¡\n// å¦æä½ ä¸æ³éå¶è¡ï¼å°±ä¸è¦åå«æ¸ä½\nvar rows = MiniExcel.QueryRange(path, startCell: \"A2\", endCell: \"C3\").Cast<IDictionary<string, object>>();\n```\n\n\n\n#### 9. Query è® Excel è¿å DataTable\n\næé : ä¸å»ºè­°ä½¿ç¨ï¼å çºDataTableæå°æ¸æ`å¨è¼å¥å§å­`ï¼å¤±å»MiniExcelä½è¨æ¶é«æ¶èåè½ã\n\n```C#\nvar table = MiniExcel.QueryAsDataTable(path, useHeaderRow: true);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/116673475-07917200-a9d6-11eb-947e-a6f68cce58df.png)\n\n#### 10. æå®å®åæ ¼éå§è®åè³æ\n\n```csharp\nMiniExcel.Query(path,useHeaderRow:true,startCell:\"B3\")\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117260316-8593c400-ae81-11eb-9877-c087b7ac2b01.png)\n\n#### 11. åä½µçå®åæ ¼å¡«å\n\næ³¨æ : æçç¸å°æ¼`æ²æä½¿ç¨åä½µå¡«å`ä¾èªªå·®\nåºå±¤åå  : OpenXml æ¨åå° mergeCells æ¾å¨æä»¶æä¸æ¹ï¼å°è´éè¦éæ­·å©æ¬¡ sheetxml\n\n```csharp\n    var config = new OpenXmlConfiguration()\n    {\n        FsillMergedCells = true\n    };\n    var rows = MiniExcel.Query(path, configuration: config);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/117973630-3527d500-b35f-11eb-95c3-bde255f8114e.png)\n\næ¯æä¸åºå®é·å¯¬å¤è¡åå¡«å\n\n![image](https://user-images.githubusercontent.com/12729184/117973820-6d2f1800-b35f-11eb-88d8-555063938108.png)\n\n\n#### 12. è®åå¤§æä»¶ç¡¬ç¢ç·©å­ (Disk-Base Cache - SharedString)\n\næ¦å¿µ : MiniExcel ç¶å¤æ·æä»¶ SharedString å¤§å°è¶é 5MBï¼é è¨­æä½¿ç¨æ¬å°ç·©å­ï¼å¦ [10x100000.xlsx](https://github.com/MiniExcel/MiniExcel/files/8403819/NotDuplicateSharedStrings_10x100000.xlsx)(ä¸ç¾è¬ç­æ¸æ)ï¼è®åä¸éåæ¬å°ç·©å­éè¦æé«è¨æ¶é«ä½¿ç¨ç´195MBï¼éåå¾éçº65MBãä½è¦ç¹å¥æ³¨æï¼æ­¤åªåæ¯ä»¥`æéæåè¨æ¶é«æ¸å°`ï¼æä»¥è®åæçæè®æ¢ï¼æ­¤ä¾å­è®åæéå¾ 7.4 ç§æé«å° 27.2 ç§ï¼åå¦ä¸éè¦è½ç¨ä»¥ä¸ä»£ç¢¼ééç¡¬ç¢ç·©å­\n\n```csharp\nvar config = new OpenXmlConfiguration { EnableSharedStringCache = false };\nMiniExcel.Query(path,configuration: config)\n```\n\nä¹è½ä½¿ç¨ SharedStringCacheSize èª¿æ´ sharedString æä»¶å¤§å°è¶éæå®å¤§å°æåç¡¬ç¢ç·©å­\n```csharp\nvar config = new OpenXmlConfiguration { SharedStringCacheSize=500*1024*1024 };\nMiniExcel.Query(path, configuration: config);\n```\n\n\n![image](https://user-images.githubusercontent.com/12729184/161411851-1c3f72a7-33b3-4944-84dc-ffc1d16747dd.png)\n\n![image](https://user-images.githubusercontent.com/12729184/161411825-17f53ec7-bef4-4b16-b234-e24799ea41b0.png)\n\n\n\n### å¯«/å°åº Excel  <a name=\"getstart2\"></a>\n\n1. å¿é æ¯éabstract é¡å¥æå¬éç¡åæ¸æ§é å½æ¸\n2. MiniExcel SaveAs æ¯æ´ `IEnumerableåæ¸å»¶é²æ¥è©¢`ï¼é¤éå¿è¦è«ä¸è¦ä½¿ç¨ ToList ç­æ¹æ³è®åå¨é¨è³æå°è¨æ¶é«\n\nåç : æ¯å¦å¼å« ToList çè¨æ¶é«å·®å¥\n\n#### ![image](https://user-images.githubusercontent.com/12729184/112587389-752b0b00-8e38-11eb-8a52-cfb76c57e5eb.png)\n\n\n\n#### 1. æ¯æéå<å¿åé¡å¥>ææ¯<å¼·åå¥> [[Try it]](https://dotnetfiddle.net/w5WD1J)\n\n```csharp\nvar path = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid()}.xlsx\");\nMiniExcel.SaveAs(path, new[] {\n    new { Column1 = \"MiniExcel\", Column2 = 1 },\n    new { Column1 = \"Github\", Column2 = 2}\n});\n```\n\n\n\n#### 2. `IEnumerable<IDictionary<string, object>>`\n\n```csharp\nvar values = new List<Dictionary<string, object>>()\n{\n    new Dictionary<string,object>{{ \"Column1\", \"MiniExcel\" }, { \"Column2\", 1 } },\n    new Dictionary<string,object>{{ \"Column1\", \"Github\" }, { \"Column2\", 2 } }\n};\nMiniExcel.SaveAs(path, values);\n```\n\noutput :\n\n| Column1   | Column2 |\n| --------- | ------- |\n| MiniExcel | 1       |\n| Github    | 2       |\n\n\n\n#### 3.  IDataReader\n\n- æ¨è¦ä½¿ç¨ï¼å¯ä»¥é¿åè¼å¥å¨é¨æ¸æå°è¨æ¶é«\n\n```csharp\nMiniExcel.SaveAs(path, reader);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/121275378-149a5e80-c8bc-11eb-85fe-5453552134f0.png)\n\næ¨è¦ DataReader å¤è¡¨æ ¼å°åºæ¹å¼(å»ºè­°ä½¿ç¨ Dapper ExecuteReader )\n\n```csharp\nusing (var cnn = Connection)\n{\n    cnn.Open();\n    var sheets = new Dictionary<string,object>();\n    sheets.Add(\"sheet1\", cnn.ExecuteReader(\"select 1 id\"));\n    sheets.Add(\"sheet2\", cnn.ExecuteReader(\"select 2 id\"));\n    MiniExcel.SaveAs(\"Demo.xlsx\", sheets);\n}\n```\n\n\n\n####  4. Datatable\n\n- `ä¸æ¨è¦ä½¿ç¨`ï¼æå°æ¸æå¨è¼å¥è¨æ¶é«\n- åªåä½¿ç¨ Caption ç¶æ¬ä½åç¨±\n\n```csharp\nvar path = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid()}.xlsx\");\nvar table = new DataTable();\n{\n    table.Columns.Add(\"Column1\", typeof(string));\n    table.Columns.Add(\"Column2\", typeof(decimal));\n    table.Rows.Add(\"MiniExcel\", 1);\n    table.Rows.Add(\"Github\", 2);\n}\n\nMiniExcel.SaveAs(path, table);\n```\n\n####  5. Dapper Query\n\næè¬ @shaofing #552 æ´æ­£ï¼ä½å§å­è«ä½¿ç¨ `CommandDefinition + CommandFlags.NoCache`ï¼å¦ä¸\n\n```csharp\nusing (var connection = GetConnection(connectionString))\n{\n    var rows = connection.Query(\n        new CommandDefinition(\n            @\"select 'MiniExcel' as Column1,1 as Column2 union all select 'Github',2\"\n            , flags: CommandFlags.NoCache)\n        );\n    MiniExcel.SaveAs(path, rows);\n}\n```\nä¸é¢çæ¹æ³å·²ç¥çåé¡ï¼ä¸è½ä½¿ç¨ç°æ­¥QueryAsyncçæ¹æ³ï¼æå ±é£æ¥å·²ç¶ééçç°å¸¸\n\nä»¥ä¸å¯«æ³æå°æ¸æå¨è¼å¥å§å­\n\n```csharp\nusing (var connection = GetConnection(connectionString))\n{\n    var rows = connection.Query(@\"select 'MiniExcel' as Column1,1 as Column2 union all select 'Github',2\");\n    MiniExcel.SaveAs(path, rows);\n}\n```\n\n\n\n#### 6. SaveAs æ¯æ Streamï¼çææä»¶ä¸è½å° [[Try it]](https://dotnetfiddle.net/JOen0e)\n\n```csharp\nusing (var stream = new MemoryStream()) //æ¯æ FileStream,MemoryStream..ç­\n{\n    stream.SaveAs(values);\n}\n```\n\nåæ¯ API å°åº Excel\n\n```csharp\npublic IActionResult DownloadExcel()\n{\n    var values = new[] {\n        new { Column1 = \"MiniExcel\", Column2 = 1 },\n        new { Column1 = \"Github\", Column2 = 2}\n    };\n\n    var memoryStream = new MemoryStream();\n    memoryStream.SaveAs(values);\n    memoryStream.Seek(0, SeekOrigin.Begin);\n    return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n    {\n        FileDownloadName = \"demo.xlsx\"\n    };\n}\n```\n\n\n\n#### 7. åµå»ºå¤åå·¥ä½è¡¨(Sheet)\n\n```csharp\n// 1. Dictionary<string,object>\nvar users = new[] { new { Name = \"Jack\", Age = 25 }, new { Name = \"Mike\", Age = 44 } };\nvar department = new[] { new { ID = \"01\", Name = \"HR\" }, new { ID = \"02\", Name = \"IT\" } };\nvar sheets = new Dictionary<string, object>\n{\n    [\"users\"] = users,\n    [\"department\"] = department\n};\nMiniExcel.SaveAs(path, sheets);\n\n// 2. DataSet\nvar sheets = new DataSet();\nsheets.Add(UsersDataTable);\nsheets.Add(DepartmentDataTable);\n//..\nMiniExcel.SaveAs(path, sheets);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/118130875-6e7c4580-b430-11eb-9b82-22f02716bd63.png)\n\n#### 8. è¡¨æ ¼æ¨£å¼é¸æ\n\né è¨­æ¨£å¼\n\n![image](https://user-images.githubusercontent.com/12729184/138234373-cfa97109-b71f-4711-b7f5-0eaaa4a0a3a6.png)\n\nä¸éè¦æ¨£å¼\n\n```csharp\nvar config = new OpenXmlConfiguration()\n{\n    TableStyles = TableStyles.None\n};\nMiniExcel.SaveAs(path, value,configuration:config);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/118784917-f3e57700-b8c2-11eb-8718-8d955b1bc197.png)\n\n\n\n\n\n#### 9. AutoFilter ç¯©é¸\n\nå¾ 0.19.0 æ¯æï¼å¯èç± OpenXmlConfiguration.AutoFilter è¨­å®ï¼é è¨­çºTrueãéé AutoFilter æ¹å¼ :\n\n```csharp\nMiniExcel.SaveAs(path, value, configuration: new OpenXmlConfiguration() { AutoFilter = false });\n```\n\n\n\n#### 10. åççæ\n\n```csharp\nvar value = new[] {\n    new { Name=\"github\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/github_logo.png\"))},\n    new { Name=\"google\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/google_logo.png\"))},\n    new { Name=\"microsoft\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/microsoft_logo.png\"))},\n    new { Name=\"reddit\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/reddit_logo.png\"))},\n    new { Name=\"statck_overflow\",Image=File.ReadAllBytes(PathHelper.GetFile(\"images/statck_overflow_logo.png\"))},\n};\nMiniExcel.SaveAs(path, value);\n```\n\n![image](https://user-images.githubusercontent.com/12729184/150462383-ad9931b3-ed8d-4221-a1d6-66f799743433.png)\n\n\n\n#### 11. Byte Array æä»¶å°åº\n\nå¾ 1.22.0 éå§ï¼ç¶å¼é¡åçº `byte[]` ç³»çµ±é è¨­æè½æä¿å­æä»¶è·¯å¾ä»¥ä¾¿å°å¥æè½å `byte[]`ï¼å¦ä¸æ³è½æå¯ä»¥å° `OpenXmlConfiguration.EnableConvertByteArray` æ¹çº `false`ï¼è½æåç³»çµ±æçã\n\n![image](https://user-images.githubusercontent.com/12729184/153702334-c3b834f4-6ae4-4ddf-bd4e-e5005d5d8c6a.png)\n\n#### 12. åç´åä½µç¸åçå®åæ ¼\n\nåªæ¯æ `xlsx` æ ¼å¼åä½µå®åæ ¼\n\n```csharp\nvar mergedFilePath = Path.Combine(Path.GetTempPath(), $\"{Guid.NewGuid().ToString()}.xlsx\");\n\nvar path = @\"../../../../../samples/xlsx/TestMergeSameCells.xlsx\";\n\nMiniExcel.MergeSameCells(mergedFilePath, path);\n```\n\n```csharp\nvar memoryStream = new MemoryStream();\n\nvar path = @\"../../../../../samples/xlsx/TestMergeSameCells.xlsx\";\n\nmemoryStream.MergeSameCells(path);\n```\n\nåä½µåå¾å°æ¯\n\n![before_merge_cells](https://user-images.githubusercontent.com/38832863/219970175-913b3d04-d714-4279-a7a4-6cefb7aa6ce8.PNG)\n![after_merge_cells](https://user-images.githubusercontent.com/38832863/219970176-e78c491a-2f90-45a7-a4a2-425c5708d38c.PNG)\n\n\n\n#### 13. æ¯å¦å¯«å¥ null values cell\n\né è¨­:\n\n```csharp\nDataTable dt = new DataTable();\n\n/* ... */\n\nDataRow dr = dt.NewRow();\n\ndr[\"Name1\"] = \"Somebody once\";\ndr[\"Name2\"] = null;\ndr[\"Name3\"] = \"told me.\";\n\ndt.Rows.Add(dr);\n\nMiniExcel.SaveAs(@\"C:\\temp\\Book1.xlsx\", dt);\n```\n\n![image](https://user-images.githubusercontent.com/31481586/241419441-c4f27e8f-3f87-46db-a10f-08665864c874.png)\n\n```xml\n<x:row r=\"2\">\n    <x:c r=\"A2\" t =\"str\" s=\"2\">\n        <x:v>Somebody once</x:v>\n    </x:c>\n    <x:c r=\"B2\" t =\"str\" s=\"2\">\n        <x:v></x:v>\n    </x:c>\n    <x:c r=\"C2\" t =\"str\" s=\"2\">\n        <x:v>told me.</x:v>\n    </x:c>\n</x:row>\n```\n\nè¨­å®ä¸å¯«å¥:\n\n```csharp\nOpenXmlConfiguration configuration = new OpenXmlConfiguration()\n{\n     EnableWriteNullValueCell = false // Default value is true.\n};\n\nMiniExcel.SaveAs(@\"C:\\temp\\Book1.xlsx\", dt, configuration: configuration);\n```\n\n![image](https://user-images.githubusercontent.com/31481586/241419455-3c0aec8a-4e5f-4d83-b7ec-6572124c165d.png)\n\n\n```xml\n<x:row r=\"2\">\n    <x:c r=\"A2\" t =\"str\" s=\"2\">\n        <x:v>Somebody once</x:v>\n    </x:c>\n    <x:c r=\"B2\" s=\"2\"></x:c>\n    <x:c r=\"C2\" t =\"str\" s=\"2\">\n        <x:v>told me.</x:v>\n    </x:c>\n</x:row>\n```\n\n\n\n### æ¨¡æ¿å¡«å Excel <a name=\"getstart3\"></a>\n\n- å®£åæ¹å¼é¡ä¼¼ Vue æ¨¡æ¿ `{{è®éåç¨±}}`, ææ¯éåæ¸²æ `{{éååç¨±.æ¬ä½åç¨±}}`\n- éåæ¸²ææ¯æ IEnumerable/DataTable/DapperRow\n\n\n\n#### 1. åºæ¬å¡«å\n\næ¨¡æ¿:\n![image](https://user-images.githubusercontent.com/12729184/114537556-ed8d2b00-9c84-11eb-8303-a69f62c41e5b.png)\n\næçµææ:\n![image](https://user-images.githubusercontent.com/12729184/114537490-d8180100-9c84-11eb-8c69-db58692f3a85.png)\n\nä»£ç¢¼:\n```csharp\n// 1. By POCO\nvar value = new\n{\n    Name = \"Jack\",\n    CreateDate = new DateTime(2021, 01, 01),\n    VIP = true,\n    Points = 123\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n\n\n// 2. By Dictionary\nvar value = new Dictionary<string, object>()\n{\n    [\"Name\"] = \"Jack\",\n    [\"CreateDate\"] = new DateTime(2021, 01, 01),\n    [\"VIP\"] = true,\n    [\"Points\"] = 123\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```\n\n\n\n#### 2. IEnumerable/DataTable æ¸æå¡«å\n\n> Note1: åè¡å¾å·¦å¾å³ä»¥ç¬¬ä¸å IEnumerableUse ç¶åè¡¨ä¾æº (ä¸æ¯æååå¤éå)\n\næ¨¡æ¿:\n![image](https://user-images.githubusercontent.com/12729184/114564652-14f2f080-9ca3-11eb-831f-09e3fedbc5fc.png)\n\næçµææ:\n![image](https://user-images.githubusercontent.com/12729184/114564204-b2015980-9ca2-11eb-900d-e21249f93f7c.png)\n\nä»£ç¢¼:\n\n```csharp\n//1. By POCO\nvar value = new\n{\n    employees = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Lisa\",department=\"HR\"},\n        new {name=\"John\",department=\"HR\"},\n        new {name=\"Mike\",department=\"IT\"},\n        new {name=\"Neo\",department=\"IT\"},\n        new {name=\"Loan\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n\n//2. By Dictionary\nvar value = new Dictionary<string, object>()\n{\n    [\"employees\"] = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Lisa\",department=\"HR\"},\n        new {name=\"John\",department=\"HR\"},\n        new {name=\"Mike\",department=\"IT\"},\n        new {name=\"Neo\",department=\"IT\"},\n        new {name=\"Loan\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```\n\n\n\n#### 3. è¤éæ¸æå¡«å\n\n> Note: æ¯æå¤ sheet å¡«å,ä¸¦å±ç¨åä¸çµåæ¸\n\næ¨¡æ¿:\n\n![image](https://user-images.githubusercontent.com/12729184/114565255-acf0da00-9ca3-11eb-8a7f-8131b2265ae8.png)\n\næçµææ:\n\n![image](https://user-images.githubusercontent.com/12729184/114565329-bf6b1380-9ca3-11eb-85e3-3969e8bf6378.png)\n\nä»£ç¢¼:\n\n```csharp\n// 1. By POCO\nvar value = new\n{\n    title = \"FooCompany\",\n    managers = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Loan\",department=\"IT\"}\n    },\n    employees = new[] {\n        new {name=\"Wade\",department=\"HR\"},\n        new {name=\"Felix\",department=\"HR\"},\n        new {name=\"Eric\",department=\"IT\"},\n        new {name=\"Keaton\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n\n// 2. By Dictionary\nvar value = new Dictionary<string, object>()\n{\n    [\"title\"] = \"FooCompany\",\n    [\"managers\"] = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Loan\",department=\"IT\"}\n    },\n    [\"employees\"] = new[] {\n        new {name=\"Wade\",department=\"HR\"},\n        new {name=\"Felix\",department=\"HR\"},\n        new {name=\"Eric\",department=\"IT\"},\n        new {name=\"Keaton\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```\n\n#### 4. å¤§æ¸æå¡«åæçæ¯è¼\n\n> NOTE: å¨ MiniExcel ä½¿ç¨ IEnumerable å»¶é² ( ä¸ToList ) å¯ä»¥ç¯çè¨æ¶é«ä½¿ç¨\n\n![image](https://user-images.githubusercontent.com/12729184/114577091-5046ec80-9cae-11eb-924b-087c7becf8da.png)\n\n\n\n#### 5. Cell å¼èªåé¡å¥å°æ\n\næ¨¡æ¿\n\n![image](https://user-images.githubusercontent.com/12729184/114802504-64830a80-9dd0-11eb-8d56-8e8c401b3ace.png)\n\næçµææ\n\n![image](https://user-images.githubusercontent.com/12729184/114802419-43221e80-9dd0-11eb-9ffe-a2ce34fe7076.png)\n\né¡å¥\n\n```csharp\npublic class Poco\n{\n    public string @string { get; set; }\n    public int? @int { get; set; }\n    public decimal? @decimal { get; set; }\n    public double? @double { get; set; }\n    public DateTime? datetime { get; set; }\n    public bool? @bool { get; set; }\n    public Guid? Guid { get; set; }\n}\n```\n\nä»£ç¢¼\n\n```csharp\nvar poco = new TestIEnumerableTypePoco { @string = \"string\", @int = 123, @decimal = decimal.Parse(\"123.45\"), @double = (double)123.33, @datetime = new DateTime(2021, 4, 1), @bool = true, @Guid = Guid.NewGuid() };\nvar value = new\n{\n    Ts = new[] {\n        poco,\n        new TestIEnumerableTypePoco{},\n        null,\n        poco\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```\n\n\n\n#### 6. Example :  ååº Github å°æ¡\n\næ¨¡æ¿\n\n![image](https://user-images.githubusercontent.com/12729184/115068665-221f1200-9f25-11eb-9820-3d7d9638cb03.png)\n\næçµææ\n\n![image](https://user-images.githubusercontent.com/12729184/115068685-2814f300-9f25-11eb-96b5-0e7f21297f4d.png)\n\nä»£ç¢¼\n\n```csharp\nvar projects = new[]\n{\n    new {Name = \"MiniExcel\",Link=\"https://github.com/shps951023/MiniExcel\",Star=146, CreateTime=new DateTime(2021,03,01)},\n    new {Name = \"HtmlTableHelper\",Link=\"https://github.com/shps951023/HtmlTableHelper\",Star=16, CreateTime=new DateTime(2020,02,01)},\n    new {Name = \"PocoClassGenerator\",Link=\"https://github.com/shps951023/PocoClassGenerator\",Star=16, CreateTime=new DateTime(2019,03,17)}\n};\nvar value = new\n{\n    User = \"ITWeiHan\",\n    Projects = projects,\n    TotalStar = projects.Sum(s => s.Star)\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```\n\n#### 7. åçµæ¸æå¡«å\n\n```csharp\nvar value = new Dictionary<string, object>()\n{\n    [\"employees\"] = new[] {\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"Jack\",department=\"HR\"},\n        new {name=\"John\",department=\"HR\"},\n        new {name=\"John\",department=\"IT\"},\n        new {name=\"Neo\",department=\"IT\"},\n        new {name=\"Loan\",department=\"IT\"}\n    }\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```\n##### 1. ä½¿ç¨`@group` tag å @header` tag\n\nBefore\n\n![before_with_header](https://user-images.githubusercontent.com/38832863/218646717-21b9d57a-2be2-4e9a-801b-ae212231d2b4.PNG)\n\nAfter\n\n![after_with_header](https://user-images.githubusercontent.com/38832863/218646721-58a7a340-7004-4bc2-af24-cffcb2c20737.PNG)\n\n##### 2. ä½¿ç¨ @group tag æ²æ @header tag\n\nBefore\n\n![before_without_header](https://user-images.githubusercontent.com/38832863/218646873-b12417fa-801b-4890-8e96-669ed3b43902.PNG)\n\nAfter\n\n![after_without_header](https://user-images.githubusercontent.com/38832863/218646872-622461ba-342e-49ee-834f-b91ad9c2dac3.PNG)\n\n##### 3. æ²æ @group tag\n\nBefore\n\n![without_group](https://user-images.githubusercontent.com/38832863/218646975-f52a68eb-e031-43b5-abaa-03b67c052d1a.PNG)\n\nAfter\n\n![without_group_after](https://user-images.githubusercontent.com/38832863/218646974-4a3c0e07-7c66-4088-ad07-b4ad3695b7e1.PNG)\n\n#### 8. DataTable ç¶åæ¸\n\n```csharp\nvar managers = new DataTable();\n{\n    managers.Columns.Add(\"name\");\n    managers.Columns.Add(\"department\");\n    managers.Rows.Add(\"Jack\", \"HR\");\n    managers.Rows.Add(\"Loan\", \"IT\");\n}\nvar value = new Dictionary<string, object>()\n{\n    [\"title\"] = \"FooCompany\",\n    [\"managers\"] = managers,\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value);\n```\n\n#### 9. å¶ä»\n\n##### 1. æª¢æ¥æ¨¡çåæ¸\n\nå¾ V1.24.0 çæ¬éå§ï¼é è¨­å¿½ç¥æ¨¡çä¸å­å¨çåæ¸Keyï¼IgnoreTemplateParameterMissing å¯ä»¥æ±ºå®æ¯å¦æåºé¯èª¤\n\n```csharp\nvar config = new OpenXmlConfiguration()\n{\n    IgnoreTemplateParameterMissing = false,\n};\nMiniExcel.SaveAsByTemplate(path, templatePath, value, config)\n```\n\n![image](https://user-images.githubusercontent.com/12729184/157464332-e316f829-54aa-4c84-a5aa-9aef337b668d.png)\n\n\n\n### Excel åå±¬æ§ (Excel Column Attribute) <a name=\"getstart4\"></a>\n\n\n\n#### 1. æå®ååç¨±ãæå®ç¬¬å¹¾åãæ¯å¦å¿½ç¥è©²å\n\nExcelä¾å­\n\n![image](https://user-images.githubusercontent.com/12729184/114230869-3e163700-99ac-11eb-9a90-2039d4b4b313.png)\n\n\nä»£ç¢¼\n\n```csharp\npublic class ExcelAttributeDemo\n{\n    [ExcelColumnName(\"Column1\")]\n    public string Test1 { get; set; }\n    [ExcelColumnName(\"Column2\")]\n    public string Test2 { get; set; }\n    [ExcelIgnore]\n    public string Test3 { get; set; }\n    [ExcelColumnIndex(\"I\")] // ç³»çµ±æèªåè½æ\"I\"çºç¬¬8å\n    public string Test4 { get; set; }\n    public string Test5 { get; } //ç³»çµ±æå¿½ç¥æ­¤å\n    public string Test6 { get; private set; } //setéå¬é,ç³»çµ±æå¿½ç¥\n    [ExcelColumnIndex(3)] // å¾0éå§ç´¢å¼\n    public string Test7 { get; set; }\n}\n\nvar rows = MiniExcel.Query<ExcelAttributeDemo>(path).ToList();\nAssert.Equal(\"Column1\", rows[0].Test1);\nAssert.Equal(\"Column2\", rows[0].Test2);\nAssert.Null(rows[0].Test3);\nAssert.Equal(\"Test7\", rows[0].Test4);\nAssert.Null(rows[0].Test5);\nAssert.Null(rows[0].Test6);\nAssert.Equal(\"Test4\", rows[0].Test7);\n```\n\n#### 2. èªå®ç¾©Formatæ ¼å¼ (ExcelFormatAttribute)\n\nå¾ V0.21.0 éå§æ¯ææ `ToString(string content)` çé¡å¥ format\n\né¡å¥\n\n```csharp\npublic class Dto\n{\n    public string Name { get; set; }\n\n    [ExcelFormat(\"MMMM dd, yyyy\")]\n    public DateTime InDate { get; set; }\n}\n```\n\nä»£ç¢¼\n\n```csharp\nvar value = new Dto[] {\n    new Issue241Dto{ Name=\"Jack\",InDate=new DateTime(2021,01,04)},\n    new Issue241Dto{ Name=\"Henry\",InDate=new DateTime(2020,04,05)},\n};\nMiniExcel.SaveAs(path, value);\n```\n\nææ\n\n![image](https://user-images.githubusercontent.com/12729184/118910788-ab2bcd80-b957-11eb-8d42-bfce36621b1b.png)\n\nQuery æ¯æèªå®ç¾©æ ¼å¼è½æ\n\n![image](https://user-images.githubusercontent.com/12729184/118911286-87b55280-b958-11eb-9a88-c8ff403d240a.png)\n\n#### 3. æå®åå¯¬(ExcelColumnWidthAttribute)\n\n```csharp\npublic class Dto\n{\n    [ExcelColumnWidth(20)]\n    public int ID { get; set; }\n    [ExcelColumnWidth(15.50)]\n    public string Name { get; set; }\n}\n```\n\n#### 4. å¤ååå°æåä¸å±¬æ§\n\n```csharp\npublic class Dto\n{\n    [ExcelColumnName(excelColumnName:\"EmployeeNo\",aliases:new[] { \"EmpNo\",\"No\" })]\n    public string Empno { get; set; }\n    public string Name { get; set; }\n}\n```\n\n\n\n#### 5. System.ComponentModel.DisplayNameAttribute = ExcelColumnName.excelColumnNameAttribute\n\nå¾ 1.24.0 éå§æ¯æ System.ComponentModel.DisplayNameAttribute ç­åæ¼ ExcelColumnName.excelColumnNameAttribute ææ\n\n```C#\npublic class TestIssueI4TXGTDto\n{\n    public int ID { get; set; }\n    public string Name { get; set; }\n    [DisplayName(\"Specification\")]\n    public string Spc { get; set; }\n    [DisplayName(\"Unit Price\")]\n    public decimal Up { get; set; }\n}\n```\n\n#### 6. ExcelColumnAttribute\n\nå¾ 1.26.0 çæ¬éå§ï¼å¯ä»¥ç°¡åå¤Attributeå¯«æ³\n```csharp\n        public class TestIssueI4ZYUUDto\n        {\n            [ExcelColumn(Name = \"ID\",Index =0)]\n            public string MyProperty { get; set; }\n            [ExcelColumn(Name = \"CreateDate\", Index = 1,Format =\"yyyy-MM\",Width =100)]\n            public DateTime MyProperty2 { get; set; }\n        }\n```\n\n#### 7. DynamicColumnAttribute åæè¨­å® Column\n\nå¾ 1.26.0 çæ¬éå§ï¼å¯ä»¥åæè¨­å® Column çå±¬æ§\n```csharp\n            var config = new OpenXmlConfiguration\n            {\n                DynamicColumns = new DynamicExcelColumn[] {\n                    new DynamicExcelColumn(\"id\"){Ignore=true},\n                    new DynamicExcelColumn(\"name\"){Index=1,Width=10},\n                    new DynamicExcelColumn(\"createdate\"){Index=0,Format=\"yyyy-MM-dd\",Width=15},\n                    new DynamicExcelColumn(\"point\"){Index=2,Name=\"Account Point\"},\n                }\n            };\n            var path = PathHelper.GetTempPath();\n            var value = new[] { new { id = 1, name = \"Jack\", createdate = new DateTime(2022, 04, 12) ,point = 123.456} };\n            MiniExcel.SaveAs(path, value, configuration: config);\n```\n![image](https://user-images.githubusercontent.com/12729184/164510353-5aecbc4e-c3ce-41e8-b6cf-afd55eb23b68.png)\n\n\n\n\n\n### æ°å¢ãåªé¤ãä¿®æ¹\n\n#### æ°å¢\n\nv1.28.0 éå§æ¯æ CSV æå¥æ°å¢ï¼å¨æå¾ä¸è¡æ°å¢Nç­æ¸æ\n\n```csharp\n// åå§æ¸æ\n{\n    var value = new[] {\n          new { ID=1,Name =\"Jack\",InDate=new DateTime(2021,01,03)},\n          new { ID=2,Name =\"Henry\",InDate=new DateTime(2020,05,03)},\n    };\n    MiniExcel.SaveAs(path, value);\n}\n// æå¾ä¸è¡æ°å¢ä¸è¡æ¸æ\n{\n    var value = new { ID=3,Name = \"Mike\", InDate = new DateTime(2021, 04, 23) };\n    MiniExcel.Insert(path, value);\n}\n// æå¾ä¸è¡æ°å¢Nè¡æ¸æ\n{\n    var value = new[] {\n          new { ID=4,Name =\"Frank\",InDate=new DateTime(2021,06,07)},\n          new { ID=5,Name =\"Gloria\",InDate=new DateTime(2022,05,03)},\n    };\n    MiniExcel.Insert(path, value);\n}\n```\n\n![image](https://user-images.githubusercontent.com/12729184/191023733-1e2fa732-db5c-4a3a-9722-b891fe5aa069.png)\n\n\n\n#### åªé¤(æªå®æ)\n\n#### ä¿®æ¹(æªå®æ)\n\n\n\n### Excel é¡å¥èªåå¤æ· <a name=\"getstart5\"></a>\n\n- MiniExcel é è¨­ææ ¹æ`æä»¶æ´å±å`å¤æ·æ¯ xlsx éæ¯ csvï¼ä½ææå¤±æºæåï¼è«èªè¡æå®ã\n- Stream é¡å¥ç¡æ³å¤æ·ä¾æºæ¼åªç¨® excel è«èªè¡æå®\n\n```csharp\nstream.SaveAs(excelType:ExcelType.CSV);\n//or\nstream.SaveAs(excelType:ExcelType.XLSX);\n//or\nstream.Query(excelType:ExcelType.CSV);\n//or\nstream.Query(excelType:ExcelType.XLSX);\n```\n\n\n\n### CSV\n\n#### æ¦å¿µ\n\n- é è¨­å¨ä»¥å­ä¸²é¡åè¿åï¼é è¨­ä¸æè½æçºæ¸å­æèæ¥æï¼é¤éæå¼·åå¥å®ç¾©æ³å\n\n\n\n#### èªå®åéç¬¦\n\né è¨­ä»¥ `,` ä½çºåéç¬¦ï¼èªå®ç¾©è«ä¿®æ¹ `Seperator` å±¬æ§\n\n```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    Seperator=';'\n};\nMiniExcel.SaveAs(path, values,configuration: config);\n```\n\n\n\n#### èªå®ç¾©æè¡ç¬¦\n\né è¨­ä»¥ `\\r\\n` ä½çºæè¡ç¬¦ï¼èªå®ç¾©è«ä¿®æ¹ `NewLine` å±¬æ§\n\n```csharp\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    NewLine='\\n'\n};\nMiniExcel.SaveAs(path, values,configuration: config);\n```\n\nå¨ V1.30.1 çæ¬éå§æ¯æåææ´ææè¡ç¬¦ (thanks @hyzx86)\n\n```csharp\nvar config = new CsvConfiguration()\n{\n    SplitFn = (row) => Regex.Split(row, $\"[\\t,](?=(?:[^\\\"]|\\\"[^\\\"]*\\\")*$)\")\n        .Select(s => Regex.Replace(s.Replace(\"\\\"\\\"\", \"\\\"\"), \"^\\\"|\\\"$\", \"\")).ToArray()\n};\nvar rows = MiniExcel.Query(path, configuration: config).ToList();\n```\n\n#### èªå®ç¾©ç·¨ç¢¼\n\n- é è¨­ç·¨ç¢¼çºãå¾Byteé åºæ¨è¨æª¢æ¸¬ç·¨ç¢¼ã(detectEncodingFromByteOrderMarks: true)\n- æèªå®ç¾©ç·¨ç¢¼éæ±ï¼è«ä¿®æ¹ StreamReaderFunc /  StreamWriterFunc å±¬æ§\n\n```csharp\n// Read\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    StreamReaderFunc = (stream) => new StreamReader(stream,Encoding.GetEncoding(\"gb2312\"))\n};\nvar rows = MiniExcel.Query(path, true,excelType:ExcelType.CSV,configuration: config);\n\n// Write\nvar config = new MiniExcelLibs.Csv.CsvConfiguration()\n{\n    StreamWriterFunc = (stream) => new StreamWriter(stream, Encoding.GetEncoding(\"gb2312\"))\n};\nMiniExcel.SaveAs(path, value,excelType:ExcelType.CSV, configuration: config);\n```\n\n\n### DataReader\n\n#### 1. GetReader\n\nä» 1.23.0 çæ¬å¼å§è½è·å DataReader\n\n```csharp\n    using (var reader = MiniExcel.GetReader(path,true))\n    {\n        while (reader.Read())\n        {\n            for (int i = 0; i < reader.FieldCount; i++)\n            {\n                var value = reader.GetValue(i);\n            }\n        }\n    }\n```\n\n\n\n### ç°æ­¥ Async\n\n- å¾ v0.17.0 çæ¬éå§æ¯æç°æ­¥ (æè¬[isdaniel ( SHIH,BING-SIOU)](https://github.com/isdaniel))\n\n```csharp\npublic static Task SaveAsAsync(string path, object value, bool printHeader = true, string sheetName = \"Sheet1\", ExcelType excelType = ExcelType.UNKNOWN, IConfiguration configuration = null)\npublic static Task SaveAsAsync(this Stream stream, object value, bool printHeader = true, string sheetName = \"Sheet1\", ExcelType excelType = ExcelType.XLSX, IConfiguration configuration = null)\npublic static Task<IEnumerable<dynamic>> QueryAsync(string path, bool useHeaderRow = false, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)\npublic static Task<IEnumerable<T>> QueryAsync<T>(this Stream stream, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null) where T : class, new()\npublic static Task<IEnumerable<T>> QueryAsync<T>(string path, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null) where T : class, new()\npublic static Task<IEnumerable<IDictionary<string, object>>> QueryAsync(this Stream stream, bool useHeaderRow = false, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)\npublic static Task SaveAsByTemplateAsync(this Stream stream, string templatePath, object value)\npublic static Task SaveAsByTemplateAsync(this Stream stream, byte[] templateBytes, object value)\npublic static Task SaveAsByTemplateAsync(string path, string templatePath, object value)\npublic static Task SaveAsByTemplateAsync(string path, byte[] templateBytes, object value)\npublic static Task<DataTable> QueryAsDataTableAsync(string path, bool useHeaderRow = true, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = \"A1\", IConfiguration configuration = null)\n```\n\n- å¾ v1.25.0 éå§æ¯æ `cancellationToken`ã\n\n\n\n### å¶ä»\n\n#### 1. æ å°æè(enum)\n\nç³»çµ±æèªåæ å°(æ³¨æ:å¤§å°å¯«ä¸ææ)\n\n![image](https://user-images.githubusercontent.com/12729184/116210595-9784b100-a775-11eb-936f-8e7a8b435961.png)\n\nå¾V0.18.0çæ¬éå§æ¯æEnum Description\n\n```csharp\npublic class Dto\n{\n    public string Name { get; set; }\n    public I49RYZUserType UserType { get; set; }\n}\n\npublic enum Type\n{\n    [Description(\"General User\")]\n    V1,\n    [Description(\"General Administrator\")]\n    V2,\n    [Description(\"Super Administrator\")]\n    V3\n}\n```\n\n![image](https://user-images.githubusercontent.com/12729184/133116630-27cc7161-099a-48b8-9784-cd1e443af3d1.png)\n\nå¾ 1.30.0 çæ¬éå§æ¯æç± Description è½å Enum åè½ï¼æè¬ @KaneLeung\n\n\n\n#### 2. CSV è½ XLSX ææ¯ XLSX è½ CSV\n\n```csharp\nMiniExcel.ConvertXlsxToCsv(xlsxPath, csvPath);\nMiniExcel.ConvertXlsxToCsv(xlsxStream, csvStream);\nMiniExcel.ConvertCsvToXlsx(csvPath, xlsxPath);\nMiniExcel.ConvertCsvToXlsx(csvStream, xlsxStream);\n```\n```csharp\nusing (var excelStream = new FileStream(path: filePath, FileMode.Open, FileAccess.Read))\nusing (var csvStream = new MemoryStream())\n{\n   MiniExcel.ConvertXlsxToCsv(excelStream, csvStream);\n}\n```\n\n#### 3. èªå®ç¾© CultureInfo\n\nå¾ 1.22.0 çæ¬éå§ï¼å¯ä»¥ä½¿ç¨ä»¥ä¸ä»£ç¢¼èªå®ç¾©æåè³è¨ï¼ç³»çµ±é è¨­ `CultureInfo.InvariantCulture`ã\n\n```csharp\nvar config = new CsvConfiguration()\n{\n    Culture = new CultureInfo(\"fr-FR\"),\n};\nMiniExcel.SaveAs(path, value, configuration: config);\n\n// or\nMiniExcel.Query(path,configuration: config);\n```\n\n#### 4. å°åºèªå®ç¾© Buffer Size\n```csharp\n    public abstract class Configuration : IConfiguration\n    {\n        public int BufferSize { get; set; } = 1024 * 512;\n    }\n```\n\n#### 5. FastMode\n\nç³»çµ±ä¸æéå¶è¨æ¶é«ï¼éå°æ´å¿«çæç\n\n```csharp\nvar config = new OpenXmlConfiguration() { FastMode = true };\nMiniExcel.SaveAs(path, reader,configuration:config);\n```\n\n\n\n### ç¯ä¾\n\n#### 1. SQLite & Dapper è®åå¤§æ¸ææ°å¢å°è³æåº«\n\nNote : è«ä¸è¦å¼å« call ToList/ToArray ç­æ¹æ³ï¼éæå°ææè³æè®å°è¨æ¶é«å§\n\n```csharp\nusing (var connection = new SQLiteConnection(connectionString))\n{\n    connection.Open();\n    using (var transaction = connection.BeginTransaction())\n    using (var stream = File.OpenRead(path))\n    {\n       var rows = stream.Query();\n       foreach (var row in rows)\n             connection.Execute(\"insert into T (A,B) values (@A,@B)\", new { row.A, row.B }, transaction: transaction);\n       transaction.Commit();\n    }\n}\n```\n\næè½:\n![image](https://user-images.githubusercontent.com/12729184/111072579-2dda7b80-8516-11eb-9843-c01a1edc88ec.png)\n\n\n#### 2. ASP.NET Core 3.1 or MVC 5 ä¸è¼/ä¸å³ Excel Xlsx API Demo [Try it](tests/MiniExcel.Tests.AspNetCore)\n\n```csharp\npublic class ApiController : Controller\n{\n    public IActionResult Index()\n    {\n        return new ContentResult\n        {\n            ContentType = \"text/html\",\n            StatusCode = (int)HttpStatusCode.OK,\n            Content = @\"<html><body>\n<a href='api/DownloadExcel'>DownloadExcel</a><br>\n<a href='api/DownloadExcelFromTemplatePath'>DownloadExcelFromTemplatePath</a><br>\n<a href='api/DownloadExcelFromTemplateBytes'>DownloadExcelFromTemplateBytes</a><br>\n<p>Upload Excel</p>\n<form method='post' enctype='multipart/form-data' action='/api/uploadexcel'>\n    <input type='file' name='excel'> <br>\n    <input type='submit' >\n</form>\n</body></html>\"\n        };\n    }\n\n    public IActionResult DownloadExcel()\n    {\n        var values = new[] {\n            new { Column1 = \"MiniExcel\", Column2 = 1 },\n            new { Column1 = \"Github\", Column2 = 2}\n        };\n        var memoryStream = new MemoryStream();\n        memoryStream.SaveAs(values);\n        memoryStream.Seek(0, SeekOrigin.Begin);\n        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n        {\n            FileDownloadName = \"demo.xlsx\"\n        };\n    }\n\n    public IActionResult DownloadExcelFromTemplatePath()\n    {\n        string templatePath = \"TestTemplateComplex.xlsx\";\n\n        Dictionary<string, object> value = new Dictionary<string, object>()\n        {\n            [\"title\"] = \"FooCompany\",\n            [\"managers\"] = new[] {\n                new {name=\"Jack\",department=\"HR\"},\n                new {name=\"Loan\",department=\"IT\"}\n            },\n            [\"employees\"] = new[] {\n                new {name=\"Wade\",department=\"HR\"},\n                new {name=\"Felix\",department=\"HR\"},\n                new {name=\"Eric\",department=\"IT\"},\n                new {name=\"Keaton\",department=\"IT\"}\n            }\n        };\n\n        MemoryStream memoryStream = new MemoryStream();\n        memoryStream.SaveAsByTemplate(templatePath, value);\n        memoryStream.Seek(0, SeekOrigin.Begin);\n        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n        {\n            FileDownloadName = \"demo.xlsx\"\n        };\n    }\n\n    private static Dictionary<string, Byte[]> TemplateBytesCache = new Dictionary<string, byte[]>();\n\n    static ApiController()\n    {\n        string templatePath = \"TestTemplateComplex.xlsx\";\n        byte[] bytes = System.IO.File.ReadAllBytes(templatePath);\n        TemplateBytesCache.Add(templatePath, bytes);\n    }\n\n    public IActionResult DownloadExcelFromTemplateBytes()\n    {\n        byte[] bytes = TemplateBytesCache[\"TestTemplateComplex.xlsx\"];\n\n        Dictionary<string, object> value = new Dictionary<string, object>()\n        {\n            [\"title\"] = \"FooCompany\",\n            [\"managers\"] = new[] {\n                new {name=\"Jack\",department=\"HR\"},\n                new {name=\"Loan\",department=\"IT\"}\n            },\n            [\"employees\"] = new[] {\n                new {name=\"Wade\",department=\"HR\"},\n                new {name=\"Felix\",department=\"HR\"},\n                new {name=\"Eric\",department=\"IT\"},\n                new {name=\"Keaton\",department=\"IT\"}\n            }\n        };\n\n        MemoryStream memoryStream = new MemoryStream();\n        memoryStream.SaveAsByTemplate(bytes, value);\n        memoryStream.Seek(0, SeekOrigin.Begin);\n        return new FileStreamResult(memoryStream, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n        {\n            FileDownloadName = \"demo.xlsx\"\n        };\n    }\n\n    public IActionResult UploadExcel(IFormFile excel)\n    {\n        var stream = new MemoryStream();\n        excel.CopyTo(stream);\n\n        foreach (var item in stream.Query(true))\n        {\n            // do your logic etc.\n        }\n\n        return Ok(\"File uploaded successfully\");\n    }\n}\n```\n\n####  3. åé æ¥è©¢\n\n```csharp\nvoid Main()\n{\n    var rows = MiniExcel.Query(path);\n\n    Console.WriteLine(\"==== No.1 Page ====\");\n    Console.WriteLine(Page(rows,pageSize:3,page:1));\n    Console.WriteLine(\"==== No.50 Page ====\");\n    Console.WriteLine(Page(rows,pageSize:3,page:50));\n    Console.WriteLine(\"==== No.5000 Page ====\");\n    Console.WriteLine(Page(rows,pageSize:3,page:5000));\n}\n\npublic static IEnumerable<T> Page<T>(IEnumerable<T> en, int pageSize, int page)\n{\n    return en.Skip(page * pageSize).Take(pageSize);\n}\n```\n\n![20210419](https://user-images.githubusercontent.com/12729184/114679083-6ef4c400-9d3e-11eb-9f78-a86daa45fe46.gif)\n\n#### 4. WebFormä¸è½å°å°åºExcel\n\n```csharp\nvar fileName = \"Demo.xlsx\";\nvar sheetName = \"Sheet1\";\nHttpResponse response = HttpContext.Current.Response;\nresponse.Clear();\nresponse.ContentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\nresponse.AddHeader(\"Content-Disposition\", $\"attachment;filename=\\\"{fileName}\\\"\");\nvar values = new[] {\n    new { Column1 = \"MiniExcel\", Column2 = 1 },\n    new { Column1 = \"Github\", Column2 = 2}\n};\nvar memoryStream = new MemoryStream();\nmemoryStream.SaveAs(values, sheetName: sheetName);\nmemoryStream.Seek(0, SeekOrigin.Begin);\nmemoryStream.CopyTo(Response.OutputStream);\nresponse.End();\n```\n\n#### 5. åæ i18n å¤åèªè¨è·æ¬éç®¡ç\n\nåä¾å­ä¸æ¨£ï¼å»ºç«ä¸åæ¹æ³èç i18n è·æ¬éç®¡çï¼ä¸¦æ­é `yield return è¿å IEnumerable<Dictionary<string, object>>`ï¼å³å¯éå°åæãä½è¨æ¶é«èçææ\n\n```csharp\nvoid Main()\n{\n    var value = new Order[] {\n        new Order(){OrderNo = \"SO01\",CustomerID=\"C001\",ProductID=\"P001\",Qty=100,Amt=500},\n        new Order(){OrderNo = \"SO02\",CustomerID=\"C002\",ProductID=\"P002\",Qty=300,Amt=400},\n    };\n\n    Console.WriteLine(\"en-Us and Sales role\");\n    {\n        var path = Path.GetTempPath() + Guid.NewGuid() + \".xlsx\";\n        var lang = \"en-US\";\n        var role = \"Sales\";\n        MiniExcel.SaveAs(path, GetOrders(lang, role, value));\n        MiniExcel.Query(path, true).Dump();\n    }\n\n    Console.WriteLine(\"zh-CN and PMC role\");\n    {\n        var path = Path.GetTempPath() + Guid.NewGuid() + \".xlsx\";\n        var lang = \"zh-CN\";\n        var role = \"PMC\";\n        MiniExcel.SaveAs(path, GetOrders(lang, role, value));\n        MiniExcel.Query(path, true).Dump();\n    }\n}\n\nprivate IEnumerable<Dictionary<string, object>> GetOrders(string lang, string role, Order[] orders)\n{\n    foreach (var order in orders)\n    {\n        var newOrder = new Dictionary<string, object>();\n\n        if (lang == \"zh-CN\")\n        {\n            newOrder.Add(\"å®¢æ¶ç·¨è\", order.CustomerID);\n            newOrder.Add(\"è¨å®ç·¨è\", order.OrderNo);\n            newOrder.Add(\"ç¢åç·¨è\", order.ProductID);\n            newOrder.Add(\"æ¸é\", order.Qty);\n            if (role == \"Sales\")\n                newOrder.Add(\"å¹æ ¼\", order.Amt);\n            yield return newOrder;\n        }\n        else if (lang == \"en-US\")\n        {\n            newOrder.Add(\"Customer ID\", order.CustomerID);\n            newOrder.Add(\"Order No\", order.OrderNo);\n            newOrder.Add(\"Product ID\", order.ProductID);\n            newOrder.Add(\"Quantity\", order.Qty);\n            if (role == \"Sales\")\n                newOrder.Add(\"Amount\", order.Amt);\n            yield return newOrder;\n        }\n        else\n        {\n            throw new InvalidDataException($\"lang {lang} wrong\");\n        }\n    }\n}\n\npublic class Order\n{\n    public string OrderNo { get; set; }\n    public string CustomerID { get; set; }\n    public decimal Qty { get; set; }\n    public string ProductID { get; set; }\n    public decimal Amt { get; set; }\n}\n```\n\n![image](https://user-images.githubusercontent.com/12729184/118939964-d24bc480-b982-11eb-88dd-f06655f6121a.png)\n\n\n\n### FAQ å¸¸è¦åé¡\n\n#### Q: Excel è¡¨é ­æ¨é¡åç¨±è· class å±¬æ§åç¨±ä¸ä¸è´ï¼å¦ä½å°æ?\n\nA. è«ä½¿ç¨ ExcelColumnName ä½ mapping\n\n![image](https://user-images.githubusercontent.com/12729184/116020475-eac50980-a678-11eb-8804-129e87200e5e.png)\n\n\n\n#### Q. å¤å·¥ä½è¡¨(sheet)å¦ä½å°åº/æ¥è©¢è³æ?\n\nA. ä½¿ç¨ `GetSheetNames `æ¹æ³æ­é Query ç sheetName åæ¸\n\n\n\n```csharp\nvar sheets = MiniExcel.GetSheetNames(path);\nforeach (var sheet in sheets)\n{\n    Console.WriteLine($\"sheet name : {sheet} \");\n    var rows = MiniExcel.Query(path,useHeaderRow:true,sheetName:sheet);\n    Console.WriteLine(rows);\n}\n```\n\n![image](https://user-images.githubusercontent.com/12729184/116199841-2a1f5300-a76a-11eb-90a3-6710561cf6db.png)\n\n\n\n#### Q. æ¯å¦ä½¿ç¨ Count æè¼å¥å¨é¨æ¸æå°è¨æ¶é«\n\nä¸æï¼åçæ¸¬è©¦ä¸ç¾è¬è¡*ååè³æï¼ç°¡å®æ¸¬è©¦ï¼å§å­æå¤§ä½¿ç¨ < 60MBï¼è±è²»13.65ç§\n\n![image](https://user-images.githubusercontent.com/12729184/117118518-70586000-adc3-11eb-9ce3-2ba76cf8b5e5.png)\n\n#### Q. Queryå¦ä½ä½¿ç¨æ´æ¸ç´¢å¼åå¼?\n\nQuery é è¨­ç´¢å¼çºå­ä¸²Key : A,B,C....ï¼æ³è¦æ¹çºæ¸å­ç´¢å¼ï¼è«å»ºç«ä»¥ä¸æ¹æ³èªè¡è½æ\n\n```csharp\nvoid Main()\n{\n    var path = @\"D:\\git\\MiniExcel\\samples\\xlsx\\TestTypeMapping.xlsx\";\n    var rows = MiniExcel.Query(path,true);\n    foreach (var r in ConvertToIntIndexRows(rows))\n    {\n        Console.Write($\"column 0 : {r[0]} ,column 1 : {r[1]}\");\n        Console.WriteLine();\n    }\n}\n\nprivate IEnumerable<Dictionary<int, object>> ConvertToIntIndexRows(IEnumerable<object> rows)\n{\n    ICollection<string> keys = null;\n    var isFirst = true;\n    foreach (IDictionary<string,object> r in rows)\n    {\n        if(isFirst)\n        {\n            keys = r.Keys;\n            isFirst = false;\n        }\n\n        var dic = new Dictionary<int, object>();\n        var index = 0;\n        foreach (var key in keys)\n            dic[index++] = r[key];\n        yield return dic;\n    }\n}\n```\n\n#### Q. å°åºææ¸çµçºç©ºæçææ²ææ¨é¡ç©º Excel\n\nå çº MiniExcel ä½¿ç¨é¡ä¼¼ JSON.NET åæå¾å¼ç²åé¡å¥æ©å¶ç°¡å API æä½ï¼æ²ææ¸æå°±ç¡æ³ç²åé¡å¥ãå¯ä»¥æ¥ç[ issue #133](https://github.com/shps951023/MiniExcel/issues/133) äºè§£ã\n\n![image](https://user-images.githubusercontent.com/12729184/122639771-546c0c00-d12e-11eb-800c-498db27889ca.png)\n\n> å¼·åå¥å DataTable æçæè¡¨é ­ï¼ä½ Dicionary ä¾èæ¯ç©º Excel\n\n#### Q. å¦ä½äººçºç©ºç½è¡ä¸­æ­¢éæ­·?\n\nå¸¸ç¼çäººçºä¸å°å¿å¨æå¾å¹¾è¡çä¸ç©ºç½è¡ææ³ï¼MiniExcelå¯ä»¥æ­é `LINQ TakeWhile`å¯¦ç¾ç©ºç½è¡ä¸­æ·éæ­·ã\n\n![image](https://user-images.githubusercontent.com/12729184/130209137-162621c2-f337-4479-9996-beeac65bc4d4.png)\n\n#### Q. ä¸æ³è¦ç©ºç½è¡å¦ä½å»é¤?\n![image](https://user-images.githubusercontent.com/12729184/137873865-7107d8f5-eb59-42db-903a-44e80589f1b2.png)\n\n\nIEnumerableçæ¬\n\n```csharp\npublic static IEnumerable<dynamic> QueryWithoutEmptyRow(Stream stream, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration)\n{\n    var rows = stream.Query(useHeaderRow,sheetName,excelType,startCell,configuration);\n    foreach (IDictionary<string,object> row in rows)\n    {\n        if(row.Keys.Any(key=>row[key]!=null))\n            yield return row;\n    }\n}\n```\n\n\n\nDataTableçæ¬\n\n```csharp\npublic static DataTable QueryAsDataTableWithoutEmptyRow(Stream stream, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration)\n{\n    if (sheetName == null && excelType != ExcelType.CSV) /*Issue #279*/\n        sheetName = stream.GetSheetNames().First();\n\n    var dt = new DataTable(sheetName);\n    var first = true;\n    var rows = stream.Query(useHeaderRow,sheetName,excelType,startCell,configuration);\n    foreach (IDictionary<string, object> row in rows)\n    {\n        if (first)\n        {\n\n            foreach (var key in row.Keys)\n            {\n                var column = new DataColumn(key, typeof(object)) { Caption = key };\n                dt.Columns.Add(column);\n            }\n\n            dt.BeginLoadData();\n            first = false;\n        }\n\n        var newRow = dt.NewRow();\n        var isNull=true;\n        foreach (var key in row.Keys)\n        {\n            var _v = row[key];\n            if(_v!=null)\n                isNull = false;\n            newRow[key] = _v;\n        }\n\n        if(!isNull)\n            dt.Rows.Add(newRow);\n    }\n\n    dt.EndLoadData();\n    return dt;\n}\n```\n\n\n\n#### Q. ä¿å­å¦ä½åä»£MiniExcel.SaveAs(path, value)ï¼æä»¶å­å¨ç³»çµ±æå ±å·²å­å¨é¯èª¤?\n\nè«æ¹ä»¥Streamèªè¡ç®¡æ§Streamè¡çºï¼å¦\n\n```C#\n    using (var stream = File.Create(\"Demo.xlsx\"))\n        MiniExcel.SaveAs(stream,value);\n```\n\n\n\nå¾V1.25.0çæ¬éå§ï¼æ¯æ overwriteFile åæ¸ï¼æ¹ä¾¿èª¿æ´æ¯å¦è¦è¦èå·²å­å¨æä»¶\n\n```csharp\n    MiniExcel.SaveAs(path, value, overwriteFile: true);\n```\n\n\n\n### ä¾·éèè­¦å\n\n- ç®åä¸æ¯æ´ xls (97-2003) ææ¯å å¯æªæ¡\n- xlsm åªæ¯ææ¥è©¢\n\n\n\n### åè\n\n[ExcelDataReader](https://github.com/ExcelDataReader/ExcelDataReader)  / [ClosedXML](https://github.com/ClosedXML/ClosedXML) / [Dapper](https://github.com/DapperLib/Dapper) / [ExcelNumberFormat](https://github.com/andersnm/ExcelNumberFormat)\n\n\n\n### æè¬åå®\n\n####  [Jetbrains](https://www.jetbrains.com/)\n\n![jetbrains-variant-2](https://user-images.githubusercontent.com/12729184/123997015-8456c180-da02-11eb-829a-aec476fe8e94.png)\n\næè¬æä¾åè²»IDEæ¯ææ­¤å°æ¡ ([License](https://user-images.githubusercontent.com/12729184/123988233-6ab17c00-d9fa-11eb-8739-2a08c6a4a263.png))\n\n### æ¶çæµæ°´\nç®åæ¶ç https://github.com/mini-software/MiniExcel/issues/560#issue-2080619180\n\n\n\n### Contributors\n\n![](https://contrib.rocks/image?repo=shps951023/MiniExcel)"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.98828125,
          "content": "version: build-{build}\nskip_tags: true\nimage: Visual Studio 2019\nconfiguration: Debug\nbuild_script:\n- ps: |-\n    #cd src\n    If ($Env:APPVEYOR_REPO_BRANCH -eq \"master\") {\n      $Env:VERSION_SUFFIX=\"\"\n    } Else {\n      $Env:VERSION_SUFFIX=$Env:APPVEYOR_REPO_BRANCH + $Env:APPVEYOR_BUILD_NUMBER.PadLeft(5, \"0\")\n    }\n    msbuild /t:Restore /p:VersionSuffix=$Env:VERSION_SUFFIX\n    msbuild MiniExcel.sln /verbosity:minimal /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\" /p:Configuration=$Env:CONFIGURATION /p:VersionSuffix=$Env:VERSION_SUFFIX /p:TreatWarningsAsErrors=true\ntest_script:\n- ps: |-\n    # run tests\n    dotnet test tests\\MiniExcelTests\\MiniExcelTests.csproj --no-build --logger \"trx\" -c $Env:CONFIGURATION\n    # upload results to AppVeyor\n    $wc = New-Object 'System.Net.WebClient'\n    Resolve-Path tests\\MiniExcelTests\\TestResults\\*.trx | % { $wc.UploadFile(\"https://ci.appveyor.com/api/testresults/mstest/$($env:APPVEYOR_JOB_ID)\", \"$_\") }\n#artifacts:\n#- path: '**\\*.nupkg'"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}