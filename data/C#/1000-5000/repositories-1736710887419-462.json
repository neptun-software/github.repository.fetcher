{
  "metadata": {
    "timestamp": 1736710887419,
    "page": 462,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ardalis/SmartEnum",
      "stars": 2229,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.29296875,
          "content": "##########################################\n# Common Settings\n##########################################\n\n# This file is the top-most EditorConfig file\nroot = true\n\n# All Files\n[*]\ncharset = utf-8\n\n[.cs]\nindent_style = space\nindent_size = 4\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.853515625,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Visual Studio Code cache/options directory\n.vscode/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n**/Properties/launchSettings.json\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Typescript v1 declaration files\ntypings/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# macOS hidden files\n._.DS_Store\n.DS_Store\n\ncoverage\\.cobertura\\.xml\ncoverage.json\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.986328125,
          "content": "# Contributing to Ardalis.SmartEnum\n\nWe love your input! We want to make contributing to this project as easy and transparent as possible, whether it's:\n\n- Reporting a bug\n- Discussing the current state of the code\n- Submitting a fix\n- Proposing new features\n\n## We Develop with GitHub\n\nObviously...\n\n## We Use Pull Requests\n\nMostly. But pretty much exclusively for non-maintainers. You'll need to fork the repo in order to submit a pull request. Here are the basic steps:\n\n1. Fork the repo and create your branch from `main`.\n2. If you've added code that should be tested, add tests.\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes.\n5. Make sure your code lints.\n6. Issue that pull request!\n\n- [Pull Request Check List](https://ardalis.com/github-pull-request-checklist/)\n- [Resync your fork with this upstream repo](https://ardalis.com/syncing-a-fork-of-a-github-repository-with-upstream/)\n\n## Ask before adding a pull request\n\nYou can just add a pull request out of the blue if you want, but it's much better etitquette (and more likely to be accepted) if you open a new issue or comment in an existing issue stating you'd like to make a pull request.\n\n## Getting Started\n\nLook for [issues marked with 'help wanted'](https://github.com/ardalis/SmartEnum/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22) to find good places to start contributing.\n\n## Any contributions you make will be under the MIT Software License\n\nIn short, when you submit code changes, your submissions are understood to be under the same [MIT License](http://choosealicense.com/licenses/mit/) that covers this project.\n\n## Report bugs using Github's [issues](https://github.com/ardalis/SmartEnum/issues)\n\nWe use GitHub issues to track public bugs. Report a bug by [opening a new issue](https://github.com/ardalis/SmartEnum/issues/new/choose); it's that easy!\n\n## Sponsor us\n\nIf you don't have the time or expertise to contribute code, you can still support us by [sponsoring](https://github.com/sponsors/ardalis).\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 2.26171875,
          "content": "<Project>\n\t<PropertyGroup>\n\t\t<RepoRoot>$(MSBuildThisFileDirectory)</RepoRoot>\n\t\t<GeneratePackageOnBuild>true</GeneratePackageOnBuild>\n\t\t<Authors>Steve Smith (@ardalis)</Authors>\n\t\t<Company>Ardalis.com</Company>\n\t\t<RepositoryUrl>https://github.com/ardalis/SmartEnum</RepositoryUrl>\n\t\t<RepositoryType>git</RepositoryType>\n\t\t<PackageProjectUrl>https://github.com/ardalis/SmartEnum</PackageProjectUrl>\n\t\t<PublishRepositoryUrl>true</PublishRepositoryUrl>\n\t\t<PackageLicenseExpression>MIT</PackageLicenseExpression>\n\t\t<TargetFrameworks>net6.0;net7.0;net8.0;netstandard2.0</TargetFrameworks>\n\t\t<!-- <TreatWarningsAsErrors>true</TreatWarningsAsErrors> -->\n\t\t<AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>\n\t\t<Version>8.2.0</Version>\n\t\t<LangVersion>11</LangVersion>\n\t\t<Features>strict</Features>\n\t</PropertyGroup>\n\t<PropertyGroup>\n\t\t<SolutionDir Condition=\"'$(SolutionDir)'==''\">$(MSBuildThisFileDirectory)</SolutionDir>\n\t\t<RepoRelativeProjectDir>$([MSBuild]::MakeRelative($(RepoRoot), $(MSBuildProjectDirectory)))</RepoRelativeProjectDir>\n\n\t\t<!-- Define useful flags based on project name conventions -->\n\t\t<IsUnitTestProject>false</IsUnitTestProject>\n\t\t<IsUnitTestProject Condition=\"$(MSBuildProjectName.EndsWith('Tests')) or $(MSBuildProjectName.EndsWith('.Test')) or $(MSBuildProjectName.EndsWith('.FunctionalTest'))\">true</IsUnitTestProject>\n\t\t<IsTestAssetProject Condition=\"$(RepoRelativeProjectDir.Contains('testassets'))\">true</IsTestAssetProject>\n\t\t<IsSampleProject Condition=\"$(RepoRelativeProjectDir.Contains('sample'))\">true</IsSampleProject>\n\t\t<IsAnalyzersProject Condition=\"$(MSBuildProjectName.EndsWith('.Analyzers'))\">true</IsAnalyzersProject>\n\t\t<IsShipping Condition=\"'$(IsSampleProject)' == 'true' or '$(IsTestAssetProject)' == 'true' or '$(IsBenchmarkProject)' == 'true' or '$(IsUnitTestProject)' == 'true'\">false</IsShipping>\n\n\t\t<!--\n      Following logic mimics core-setup approach as well as\n      https://github.com/dotnet/arcade/blob/694d59f090b743f894779d04a7ffe11cbaf352e7/src/Microsoft.DotNet.Arcade.Sdk/tools/Publish.proj#L30-L31\n      $(DotNetFinalVersionKind) is set globally when doing final aka stable builds. Arcade infrastructure should pick\n      up $(IsStableBuild) automatically; property is also used to control prerelease branding.\n    -->\n\t</PropertyGroup>\n</Project>\n"
        },
        {
          "name": "Directory.Packages.props",
          "type": "blob",
          "size": 2.2021484375,
          "content": "<Project>\n  <PropertyGroup>\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageVersion Include=\"Ardalis.GuardClauses\" Version=\"5.0.0\" />\n    <PackageVersion Include=\"AutoFixture\" Version=\"4.18.1\" />\n    <PackageVersion Include=\"BenchmarkDotNet\" Version=\"0.14.0\" />\n    <PackageVersion Include=\"Constant\" Version=\"2.0.4\" />\n    <PackageVersion Include=\"coverlet.collector\" Version=\"6.0.2\" />\n    <PackageVersion Include=\"coverlet.msbuild\" Version=\"6.0.2\" />\n    <PackageVersion Include=\"Dapper\" Version=\"2.1.35\" />\n    <PackageVersion Include=\"Enums.NET\" Version=\"5.0.0\" />\n    <PackageVersion Include=\"FluentAssertions\" Version=\"6.12.2\" />\n    <PackageVersion Include=\"MessagePack\" Version=\"2.5.192\" />\n    <PackageVersion Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"2.2.5\" />\n    <PackageVersion Include=\"Microsoft.Data.Sqlite\" Version=\"7.0.13\" />\n    <PackageVersion Include=\"Microsoft.EntityFrameworkCore\" Version=\"7.0.13\" />\n    <PackageVersion Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"7.0.13\" />\n    <PackageVersion Include=\"Microsoft.EntityFrameworkCore.Sqlite\" Version=\"7.0.13\" />\n    <PackageVersion Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.12.0\" />\n    <PackageVersion Include=\"Moq\" Version=\"4.20.72\" />\n    <PackageVersion Include=\"Newtonsoft.Json\" Version=\"13.0.3\" />\n    <PackageVersion Include=\"protobuf-net\" Version=\"3.2.45\" />\n    <PackageVersion Include=\"System.ComponentModel.Annotations\" Version=\"5.0.0\" />\n    <PackageVersion Include=\"System.Net.Http\" Version=\"4.3.4\" />\n    <PackageVersion Include=\"System.Text.Encodings.Web\" Version=\"9.0.0\" />\n    <PackageVersion Include=\"System.Text.Json\" Version=\"9.0.0\" />\n    <PackageVersion Include=\"System.Text.RegularExpressions\" Version=\"4.3.1\" />\n    <PackageVersion Include=\"Utf8Json\" Version=\"1.3.7\" />\n    <PackageVersion Include=\"xunit\" Version=\"2.9.2\" />\n    <PackageVersion Include=\"xunit.runner.visualstudio\" Version=\"2.8.2\" />\n  </ItemGroup>\n  <ItemGroup>\n    <GlobalPackageReference Include=\"Microsoft.SourceLink.GitHub\" Version=\"8.0.0\" PrivateAssets=\"All\" />\n    <GlobalPackageReference Include=\"SonarAnalyzer.CSharp\" Version=\"9.32.0.97167\" PrivateAssets=\"All\" />\n  </ItemGroup>\n</Project>"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) 2017 Steve Smith\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 33.60546875,
          "content": "[![NuGet](https://img.shields.io/nuget/v/Ardalis.SmartEnum.svg)](https://www.nuget.org/packages/Ardalis.SmartEnum)[![NuGet](https://img.shields.io/nuget/dt/Ardalis.SmartEnum.svg)](https://www.nuget.org/packages/Ardalis.SmartEnum)\n![Last Publish Ardalis.SmartEnum to NuGet](https://github.com/ardalis/SmartEnum/workflows/publish%20Ardalis.SmartEnum%20to%20nuget/badge.svg)\n\n## Table Of Contents\n\n- [Table Of Contents](#table-of-contents)\n  * [Sub-packages](#sub-packages)\n  * [Give a Star! ⭐](give-a-star-star)\n- [SmartEnum](#smart-enum)\n  * [Contributors](#contributors)\n- [Install](#install)\n  * [Version](#version)\n- [Usage](#usage)\n  * [List](#list)\n  * [FromName()](#fromname)\n  * [FromValue()](#fromvalue)\n  * [ToString()](#tostring)\n  * [Switch](#switch)\n  * [SmartFlagEnum](#smartflagenum)\n  * [Setting SmartFlagEnum Values](#setting-smartflagenum-values)\n  * [Usage - (SmartFlagEnum)](#usage---smartflagenum)\n  * [FromName()](#fromname-1)\n  * [FromValue()](#fromvalue-1)\n  * [FromValueToString()](#fromvaluetostring)\n  * [BitWiseOrOperator](#bitwiseoroperator)\n  * [Persisting with EF Core 2.1 or higher](#persisting-with-ef-core-21-or-higher)\n  * [Using SmartEnum.EFCore](#using-smartenumefcore)\n  * [AutoFixture support](#autofixture-support)\n  * [Json support](#jsonnet-support)\n  * [Dapper support](#dapper-support)\n  * [DapperSmartEnum](#dappersmartenum)\n  * [Case Insensitive String Enum](#case-insensitive-string-enum)\n  * [Name Validation Attribute](#name-validation-attribute)\n  * [Examples in the Real World](#examples-in-the-real-world)\n  * [References](#references)\n\n### Sub-packages\n\nSmartEnum.AutoFixture: [![NuGet](https://img.shields.io/nuget/v/Ardalis.SmartEnum.AutoFixture.svg)](https://www.nuget.org/packages/Ardalis.SmartEnum.AutoFixture)[![NuGet](https://img.shields.io/nuget/dt/Ardalis.SmartEnum.AutoFixture.svg)](https://www.nuget.org/packages/Ardalis.SmartEnum.AutoFixture)![publish SmartEnum.AutoFixture to nuget](https://github.com/ardalis/SmartEnum/workflows/publish%20SmartEnum.AutoFixture%20to%20nuget/badge.svg)\n\nSmartEnum.Dapper: [![NuGet](https://img.shields.io/nuget/v/Ardalis.SmartEnum.Dapper.svg)](https://www.nuget.org/packages/Ardalis.SmartEnum.Dapper)[![NuGet](https://img.shields.io/nuget/dt/Ardalis.SmartEnum.Dapper.svg)](https://www.nuget.org/packages/Ardalis.SmartEnum.Dapper)![publish SmartEnum.Dapper to nuget](https://github.com/ardalis/SmartEnum/workflows/publish%20SmartEnum.Dapper%20to%20nuget/badge.svg)\n\nSmartEnum.EFCore: [![NuGet](https://img.shields.io/nuget/v/Ardalis.SmartEnum.EFCore.svg)](https://www.nuget.org/packages/Ardalis.SmartEnum.EFCore)[![NuGet](https://img.shields.io/nuget/dt/Ardalis.SmartEnum.EFCore.svg)](https://www.nuget.org/packages/Ardalis.SmartEnum.EFCore)![publish SmartEnum.EFCore to nuget](https://github.com/ardalis/SmartEnum/workflows/publish%20SmartEnum.EFCore%20to%20nuget/badge.svg)\n\nSmartEnum.JsonNet: [![NuGet](https://img.shields.io/nuget/v/Ardalis.SmartEnum.JsonNet.svg)](https://www.nuget.org/packages/Ardalis.SmartEnum.JsonNet)[![NuGet](https://img.shields.io/nuget/dt/Ardalis.SmartEnum.JsonNet.svg)](https://www.nuget.org/packages/Ardalis.SmartEnum.JsonNet)![publish jsonnet to nuget](https://github.com/ardalis/SmartEnum/workflows/publish%20SmartEnum.JsonNet%20to%20nuget/badge.svg)\n\nSmartEnum.MessagePack: [![NuGet](https://img.shields.io/nuget/v/Ardalis.SmartEnum.MessagePack.svg)](https://www.nuget.org/packages/Ardalis.SmartEnum.MessagePack)[![NuGet](https://img.shields.io/nuget/dt/Ardalis.SmartEnum.MessagePack.svg)](https://www.nuget.org/packages/Ardalis.SmartEnum.MessagePack)![publish SmartEnum.MessagePack to nuget](https://github.com/ardalis/SmartEnum/workflows/publish%20SmartEnum.MessagePack%20to%20nuget/badge.svg)\n\nSmartEnum.ProtoBufNet: [![NuGet](https://img.shields.io/nuget/v/Ardalis.SmartEnum.ProtoBufNet.svg)](https://www.nuget.org/packages/Ardalis.SmartEnum.ProtoBufNet)[![NuGet](https://img.shields.io/nuget/dt/Ardalis.SmartEnum.ProtoBufNet.svg)](https://www.nuget.org/packages/Ardalis.SmartEnum.ProtoBufNet)![publish SmartEnum.ProtoBufNet to nuget](https://github.com/ardalis/SmartEnum/workflows/publish%20SmartEnum.ProtoBufNet%20to%20nuget/badge.svg)\n\nSmartEnum.SystemTextJson: [![NuGet](https://img.shields.io/nuget/v/Ardalis.SmartEnum.SystemTextJson.svg)](https://www.nuget.org/packages/Ardalis.SmartEnum.SystemTextJson)[![NuGet](https://img.shields.io/nuget/dt/Ardalis.SmartEnum.SystemTextJson.svg)](https://www.nuget.org/packages/Ardalis.SmartEnum.SystemTextJson)![publish SmartEnum.SystemTextJson to nuget](https://github.com/ardalis/SmartEnum/workflows/publish%20SmartEnum.SystemTextJson%20to%20nuget/badge.svg)\n\nSmartEnum.Utf8Json: [![NuGet](https://img.shields.io/nuget/v/Ardalis.SmartEnum.Utf8Json.svg)](https://www.nuget.org/packages/Ardalis.SmartEnum.Utf8Json)[![NuGet](https://img.shields.io/nuget/dt/Ardalis.SmartEnum.Utf8Json.svg)](https://www.nuget.org/packages/Ardalis.SmartEnum.Utf8Json)![publish SmartEnum.Utf8Json to nuget](https://github.com/ardalis/SmartEnum/workflows/publish%20SmartEnum.Utf8Json%20to%20nuget/badge.svg)\n\n## Give a Star! :star:\n\nIf you like or are using this project please give it a star. Thanks!\n\n# Smart Enum\n\nAn implementation of a [type-safe object-oriented alternative](https://codeblog.jonskeet.uk/2006/01/05/classenum/) to [C# enum](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/enum).\n\n## Contributors\n\nThanks to [Scott DePouw](https://github.com/sdepouw), [Antão Almada](https://github.com/aalmada), and [Nagasudhir Pulla](https://github.com/nagasudhirpulla) for help with this project!\n\n# Install\n\nThe framework is provided as a set of NuGet packages. In many cases you'll only need the base package, but if you need serialization and/or ORM support there are many implementation-specific packages available to assist.\n\nTo install the minimum requirements:\n\n```\nInstall-Package Ardalis.SmartEnum\n```\n\nTo install support for serialization, AutoFixture, EF Core, Model Binding, or Dapper select the lines that apply:\n\n```\nInstall-Package Ardalis.SmartEnum.AutoFixture\nInstall-Package Ardalis.SmartEnum.JsonNet\nInstall-Package Ardalis.SmartEnum.SystemTextJson\nInstall-Package Ardalis.SmartEnum.Utf8Json\nInstall-Package Ardalis.SmartEnum.MessagePack\nInstall-Package Ardalis.SmartEnum.ProtoBufNet\nInstall-Package Ardalis.SmartEnum.EFCore\nInstall-Package Ardalis.SmartEnum.ModelBinding\nInstall-Package Ardalis.SmartEnum.Dapper\n```\n\n## Version\n\nThe latest version of the package supports .NET 8 and NetStandard 2.0.\n\n## Usage\n\nDefine your smart enum by inheriting from `SmartEnum<TEnum>` where `TEnum` is the type you're declaring. For [example](/test/SmartEnum.UnitTests/TestEnum.cs):\n\n```csharp\nusing Ardalis.SmartEnum;\n\npublic sealed class TestEnum : SmartEnum<TestEnum>\n{\n    public static readonly TestEnum One = new TestEnum(nameof(One), 1);\n    public static readonly TestEnum Two = new TestEnum(nameof(Two), 2);\n    public static readonly TestEnum Three = new TestEnum(nameof(Three), 3);\n\n    private TestEnum(string name, int value) : base(name, value)\n    {\n    }\n}\n```\n\nThe default value type is `int` but it can be set using the second generic argument `TValue`.\nThe string alias can also be set explicitly, where spaces are allowed.\n\n```csharp\nusing Ardalis.SmartEnum;\n\npublic sealed class TestEnum : SmartEnum<TestEnum, ushort>\n{\n    public static readonly TestEnum One = new TestEnum(\"A string!\", 1);\n    public static readonly TestEnum Two = new TestEnum(\"Another string!\", 2);\n    public static readonly TestEnum Three = new TestEnum(\"Yet another string!\", 3);\n\n    private TestEnum(string name, ushort value) : base(name, value)\n    {\n    }\n}\n```\n\nJust like regular `enum`, more than one string can be assigned to the same value but only one value can be assigned to a string:\n\n```csharp\nusing Ardalis.SmartEnum;\n\npublic sealed class TestEnum : SmartEnum<TestEnum>\n{\n    public static readonly TestEnum One = new TestEnum(nameof(One), 1);\n    public static readonly TestEnum Two = new TestEnum(nameof(Two), 2);\n    public static readonly TestEnum Three = new TestEnum(nameof(Three), 3);\n    public static readonly TestEnum AnotherThree = new TestEnum(nameof(AnotherThree), 3);\n    // public static TestEnum Three = new TestEnum(nameof(Three), 4); -> throws exception\n\n    private TestEnum(string name, int value) : base(name, value)\n    {\n    }\n}\n```\n\nIn this case, `TestEnum.FromValue(3)` will return the first instance found, either `TestEnum.Three` or `TestEnum.AnotherThree`. No order should be assumed.\n\nThe `Value` content is used when comparing two smart enums, while `Name` is ignored:\n\n```csharp\nTestEnum.One.Equals(TestEnum.One); // returns true\nTestEnum.One.Equals(TestEnum.Three); // returns false\nTestEnum.Three.Equals(TestEnum.AnotherThree); // returns true\n```\n\nInheritance can be used to add \"behavior\" to a smart enum.\n\nThis example adds a `BonusSize` property, avoiding the use of the `switch` typically used with regular enums:\n\n```csharp\nusing Ardalis.SmartEnum;\n\npublic abstract class EmployeeType : SmartEnum<EmployeeType>\n{\n    public static readonly EmployeeType Manager = new ManagerType();\n    public static readonly EmployeeType Assistant = new AssistantType();\n\n    private EmployeeType(string name, int value) : base(name, value)\n    {\n    }\n\n    public abstract decimal BonusSize { get; }\n\n    private sealed class ManagerType : EmployeeType\n    {\n        public ManagerType() : base(\"Manager\", 1) {}\n\n        public override decimal BonusSize => 10_000m;\n    }\n\n    private sealed class AssistantType : EmployeeType\n    {\n        public AssistantType() : base(\"Assistant\", 2) {}\n\n        public override decimal BonusSize => 1_000m;\n    }\n}\n```\n\nYou can take this a step further and use the `ManagerType` and associated `BonusSize` property in a parent class like so:\n\n```csharp\npublic class Manager\n{\n    private ManagerType _managerType { get; set; }\n    public string Type\n    {\n        get => _managerType.Name;\n        set\n        {\n            if (!ManagerType.TryFromName(value, true, out var parsed))\n            {\n                throw new Exception($\"Invalid manager type of '{value}'\");\n            }\n            _managerType = parsed;\n        }\n    }\n\n    public string BonusSize\n    {\n        get => _managerType.BonusSize();\n        set => _bonusSize_ = value;\n    }\n}\n```\n\nThis other example implements a *state machine*. The method `CanTransitionTo()` returns `true` if it's allowed to transition from current state to `next`; otherwise returns `false`.\n\n```csharp\nusing Ardalis.SmartEnum;\n\npublic abstract class ReservationStatus : SmartEnum<ReservationStatus>\n{\n    public static readonly ReservationStatus New = new NewStatus();\n    public static readonly ReservationStatus Accepted = new AcceptedStatus();\n    public static readonly ReservationStatus Paid = new PaidStatus();\n    public static readonly ReservationStatus Cancelled = new CancelledStatus();\n\n    private ReservationStatus(string name, int value) : base(name, value)\n    {\n    }\n\n    public abstract bool CanTransitionTo(ReservationStatus next);\n\n    private sealed class NewStatus: ReservationStatus\n    {\n        public NewStatus() : base(\"New\", 0)\n        {\n        }\n\n        public override bool CanTransitionTo(ReservationStatus next) =>\n            next == ReservationStatus.Accepted || next == ReservationStatus.Cancelled;\n    }\n\n    private sealed class AcceptedStatus: ReservationStatus\n    {\n        public AcceptedStatus() : base(\"Accepted\", 1)\n        {\n        }\n\n        public override bool CanTransitionTo(ReservationStatus next) =>\n            next == ReservationStatus.Paid || next == ReservationStatus.Cancelled;\n    }\n\n    private sealed class PaidStatus: ReservationStatus\n    {\n        public PaidStatus() : base(\"Paid\", 2)\n        {\n        }\n\n        public override bool CanTransitionTo(ReservationStatus next) =>\n            next == ReservationStatus.Cancelled;\n    }\n\n    private sealed class CancelledStatus: ReservationStatus\n    {\n        public CancelledStatus() : base(\"Cancelled\", 3)\n        {\n        }\n\n        public override bool CanTransitionTo(ReservationStatus next) =>\n            false;\n    }\n}\n```\n\n### List\n\nYou can list all of the available options using the enum's static `List` property:\n\n```csharp\nforeach (var option in TestEnum.List)\n    Console.WriteLine(option.Name);\n```\n\n`List` returns an `IReadOnlyCollection` so you can use the `Count` property to efficiently get the number of available options.\n\n```csharp\nvar count = TestEnum.List.Count;\n```\n\n### FromName()\n\nAccess an instance of an enum by matching a string to its `Name` property:\n\n```csharp\nvar myEnum = TestEnum.FromName(\"One\");\n```\n\nException `SmartEnumNotFoundException` is thrown when name is not found. Alternatively, you can use `TryFromName` that returns `false` when name is not found:\n\n```csharp\nif (TestEnum.TryFromName(\"One\", out var myEnum))\n{\n    // use myEnum here\n}\n```\n\nBoth methods have a `ignoreCase` parameter (the default is case sensitive).\n\n### FromValue()\n\nAccess an instance of an enum by matching its value:\n\n```csharp\nvar myEnum = TestEnum.FromValue(1);\n```\n\nException `SmartEnumNotFoundException` is thrown when value is not found. Alternatively, you can use `TryFromValue` that returns `false` when value is not found:\n\n```csharp\nif (TestEnum.TryFromValue(1, out var myEnum))\n{\n    // use myEnum here\n}\n```\n\n### ToString()\n\nDisplay an enum using the `ToString()` override:\n\n```csharp\nConsole.WriteLine(TestEnum.One); // One\n```\n\n### Switch\n\nGiven an instance of a TestEnum, switch depending on value:\n\n```csharp\nswitch(testEnumVar.Name)\n{\n    case nameof(TestEnum.One):\n        ...\n        break;\n    case nameof(TestEnum.Two):\n        ...\n        break;\n    case nameof(TestEnum.Three):\n        ...\n        break;\n    default:\n        ...\n        break;\n}\n```\n\nUsing pattern matching:\n\n```csharp\nswitch(testEnumVar)\n{\n    case null:\n        ...\n        break;\n    case var e when e.Equals(TestEnum.One):\n        ...\n        break;\n    case var e when e.Equals(TestEnum.Two):\n        ...\n        break;\n    case var e when e.Equals(TestEnum.Three):\n        ...\n        break;\n    default:\n        ...\n        break;\n}\n```\nBecause of the limitations of pattern matching SmartEnum also provides a fluent interface to help create clean code:\n\n```csharp\ntestEnumVar\n    .When(TestEnum.One).Then(() => ... )\n    .When(TestEnum.Two).Then(() => ... )\n    .When(TestEnum.Three).Then(() => ... )\n    .Default( ... );\n```\n\nN.B. For performance critical code the fluent interface carries some overhead that you may wish to avoid. See the available [benchmarks](benchmarks/SmartEnum.Benchmarks) code for your use case.\n\n### SmartFlagEnum\n\nSupport has been added for a `Flag` functionality.\nThis feature is similar to the behaviour seen when applying the `[Flag]` attribute to Enums in the .NET Framework\nAll methods available on the `SmartFlagEnum` class return an `IEnumerable<SmartFlagEnum>` with one or more values depending on the value provided/method called.\nSome Functionality is shared with the original SmartEnum class, listed below are the variations.\n\n### Setting SmartFlagEnum Values\n\nWhen setting the values for a `SmartFlagEnum` It is imperative to provide values as powers of two.  If at least one value is not set as power of two or two or more power of two values are provided inconsecutively (eg: 1, 2, no four!, 8) a `SmartFlagEnumDoesNotContainPowerOfTwoValuesException` will be thrown.\n\n```csharp\npublic class SmartFlagTestEnum : SmartFlagEnum<SmartFlagTestEnum>\n    {\n        public static readonly SmartFlagTestEnum None = new SmartFlagTestEnum(nameof(None), 0);\n        public static readonly SmartFlagTestEnum Card = new SmartFlagTestEnum(nameof(Card), 1);\n        public static readonly SmartFlagTestEnum Cash = new SmartFlagTestEnum(nameof(Cash), 2);\n        public static readonly SmartFlagTestEnum Bpay = new SmartFlagTestEnum(nameof(Bpay), 4);\n        public static readonly SmartFlagTestEnum Paypal = new SmartFlagTestEnum(nameof(Paypal), 8);\n        public static readonly SmartFlagTestEnum BankTransfer = new SmartFlagTestEnum(nameof(BankTransfer), 16);\n\n        public SmartFlagTestEnum(string name, int value) : base(name, value)\n        {\n        }\n    }\n```\n\nThis behaviour can be disabled by applying the `AllowUnsafeFlagEnumValuesAttribute` to the smart enum class.  Note: If power of two values are not provided the SmarFlagEnum will not behave as expected!\n\n```csharp\n[AllowUnsafeFlagEnumValues]\npublic class SmartFlagTestEnum : SmartFlagEnum<SmartFlagTestEnum>\n    {\n        public static readonly SmartFlagTestEnum None = new SmartFlagTestEnum(nameof(None), 0);\n        public static readonly SmartFlagTestEnum Card = new SmartFlagTestEnum(nameof(Card), 1);\n        public static readonly SmartFlagTestEnum Cash = new SmartFlagTestEnum(nameof(Cash), 2);\n        public static readonly SmartFlagTestEnum Bpay = new SmartFlagTestEnum(nameof(Bpay), 4);\n        public static readonly SmartFlagTestEnum Paypal = new SmartFlagTestEnum(nameof(Paypal), 8);\n        public static readonly SmartFlagTestEnum BankTransfer = new SmartFlagTestEnum(nameof(BankTransfer), 16);\n\n        public SmartFlagTestEnum(string name, int value) : base(name, value)\n        {\n        }\n    }\n```\n\n`Combination` values can be provided explicitly and will be returned in place of the multiple flag values that would have been returned from the `FromValue()` method.\n\n```csharp\npublic class SmartFlagTestEnum : SmartFlagEnum<SmartFlagTestEnum>\n    {\n        public static readonly SmartFlagTestEnum None = new SmartFlagTestEnum(nameof(None), 0);\n        public static readonly SmartFlagTestEnum Card = new SmartFlagTestEnum(nameof(Card), 1);\n        public static readonly SmartFlagTestEnum Cash = new SmartFlagTestEnum(nameof(Cash), 2);\n        public static readonly SmartFlagTestEnum CardAndCash = new SmartFlagTestEnum(nameof(CardAndCash), 3); -- Explicit `Combination` value\n        public static readonly SmartFlagTestEnum Bpay = new SmartFlagTestEnum(nameof(Bpay), 4);\n        public static readonly SmartFlagTestEnum Paypal = new SmartFlagTestEnum(nameof(Paypal), 8);\n        public static readonly SmartFlagTestEnum BankTransfer = new SmartFlagTestEnum(nameof(BankTransfer), 16);\n\n        public SmartFlagTestEnum(string name, int value) : base(name, value)\n        {\n        }\n    }\n```\n\nThese explicit values can be provided above the highest allowable flag value without consequence, however attempting to access a value that is higher than the maximum flag value that has not explicitly been provided (for example 4) will cause a `SmartEnumNotFoundException` to be thrown.\n\n```csharp\npublic class SmartFlagTestEnum : SmartFlagEnum<SmartFlagTestEnum>\n    {\n        public static readonly SmartFlagTestEnum None = new SmartFlagTestEnum(nameof(None), 0);\n        public static readonly SmartFlagTestEnum Card = new SmartFlagTestEnum(nameof(Card), 1);\n        public static readonly SmartFlagTestEnum Cash = new SmartFlagTestEnum(nameof(Cash), 2);\n        public static readonly SmartFlagTestEnum AfterPay = new SmartFlagTestEnum(nameof(AfterPay), 5);\n\n        public SmartFlagTestEnum(string name, int value) : base(name, value)\n        {\n        }\n    }\n\n    var myFlagEnums = FromValue(3) -- Works!\n    -and-\n    var myFlagEnums = FromValue(5) -- Works!\n    -but-\n    Var myFlagEnums = FromValue(4) -- will throw an exception :(\n```\n\nA Negative One (-1) value may be provided as an `All` value. When a value of -1 is passed into any of the `FromValue()` methods an IEnumerable containing all values (excluding 0) will be returned.\nIf an explicit `Combination` value exists with a value of -1 this will be returned instead.\n\n```csharp\npublic class SmartFlagTestEnum : SmartFlagEnum<SmartFlagTestEnum>\n    {\n        public static readonly SmartFlagTestEnum All = new SmartFlagTestEnum(nameof(All), -1);\n        public static readonly SmartFlagTestEnum None = new SmartFlagTestEnum(nameof(None), 0);\n        public static readonly SmartFlagTestEnum Card = new SmartFlagTestEnum(nameof(Card), 1);\n        public static readonly SmartFlagTestEnum Cash = new SmartFlagTestEnum(nameof(Cash), 2);\n        public static readonly SmartFlagTestEnum Bpay = new SmartFlagTestEnum(nameof(Bpay), 4);\n        public static readonly SmartFlagTestEnum Paypal = new SmartFlagTestEnum(nameof(Paypal), 8);\n        public static readonly SmartFlagTestEnum BankTransfer = new SmartFlagTestEnum(nameof(BankTransfer), 16);\n\n        public SmartFlagTestEnum(string name, int value) : base(name, value)\n        {\n        }\n    }\n```\n\n### Usage - (SmartFlagEnum)\n\n```csharp\npublic abstract class EmployeeType : SmartFlagEnum<EmployeeType>\n    {\n        public static readonly EmployeeType Director = new DirectorType();\n        public static readonly EmployeeType Manager = new ManagerType();\n        public static readonly EmployeeType Assistant = new AssistantType();\n\n        private EmployeeType(string name, int value) : base(name, value)\n        {\n        }\n\n        public abstract decimal BonusSize { get; }\n\n        private sealed class DirectorType : EmployeeType\n        {\n            public DirectorType() : base(\"Director\", 1) { }\n\n            public override decimal BonusSize => 100_000m;\n        }\n\n        private sealed class ManagerType : EmployeeType\n        {\n            public ManagerType() : base(\"Manager\", 2) { }\n\n            public override decimal BonusSize => 10_000m;\n        }\n\n        private sealed class AssistantType : EmployeeType\n        {\n            public AssistantType() : base(\"Assistant\", 4) { }\n\n            public override decimal BonusSize => 1_000m;\n        }\n    }\n\n    public class SmartFlagEnumUsageExample\n    {\n        public void UseSmartFlagEnumOne()\n        {\n            var result = EmployeeType.FromValue(3).ToList();\n\n            var outputString = \"\";\n            foreach (var employeeType in result)\n            {\n                outputString += $\"{employeeType.Name} earns ${employeeType.BonusSize} bonus this year.\\n\";\n            }\n\n                => \"Director earns $100000 bonus this year.\\n\"\n                   \"Manager earns $10000 bonus this year.\\n\"\n        }\n\n        public void UseSmartFlagEnumTwo()\n        {\n            EmployeeType.FromValueToString(-1)\n                => \"Director, Manager, Assistant\"\n        }\n\n        public void UseSmartFlagEnumTwo()\n        {\n            EmployeeType.FromValueToString(EmployeeType.Assistant | EmployeeType.Director)\n                => \"Director, Assistant\"\n        }\n    }\n\n```\n\n### FromName()\n\nAccess an `IEnumerable` of enum instances by matching a string containing one or more enum names seperated by commas to its `Names` property:\n\n```csharp\nvar myFlagEnums = TestFlagEnum.FromName(\"One, Two\");\n```\n\nException `SmartEnumNotFoundException` is thrown when no names are found. Alternatively, you can use `TryFromName` that returns `false` when no names are found:\n\n```csharp\nif (TestFlagEnum.TryFromName(\"One, Two\", out var myFlagEnums))\n{\n    // use myFlagEnums here\n}\n```\n\nBoth methods have a `ignoreCase` parameter (the default is case sensitive).\n\n### FromValue()\n\nAccess an `IEnumerable` of enum instances by matching a value:\n\n```csharp\nvar myFlagEnums = TestFlagEnum.FromValue(3);\n```\n\nException `SmartEnumNotFoundException` is thrown when no values are found. Alternatively, you can use `TryFromValue` that returns `false` when values are not found:\n\n```csharp\nif (TestFlagEnum.TryFromValue(3, out var myFlagEnums))\n{\n    // use myFlagEnums here\n}\n```\n\nNote: Negative values other than (-1) passed into this method will cause a `NegativeValueArgumentException` to be thrown, this behaviour can be disabled by applying the `AllowNegativeInput` attribute to the desired `SmartFlagEnum` class.\n\n```csharp\n[AllowNegativeInput]\npublic class SmartFlagTestEnum : SmartFlagEnum<SmartFlagTestEnum>\n    {\n        public static readonly SmartFlagTestEnum None = new SmartFlagTestEnum(nameof(None), 0);\n        public static readonly SmartFlagTestEnum Card = new SmartFlagTestEnum(nameof(Card), 1);\n\n        public SmartFlagTestEnum(string name, int value) : base(name, value)\n        {\n        }\n    }\n```\n\nNote: `FromValue()` will accept any input that can be succesfully parsed as an integer.  If an invalid value is supplied it will throw an `InvalidFlagEnumValueParseException`.\n\n### FromValueToString()\n\nReturn a string representation of a series of enum instances name's:\n\n```csharp\nvar myFlagEnumString = TestFlagEnum.FromValueToString(3);\n```\n\nException `SmartEnumNotFoundException` is thrown when no values are found. Alternatively, you can use `TryFromValueToString` that returns `false` when values are not found:\n\n```csharp\nif (TestFlagEnum.TryFromValueToString(3, out var myFlagEnumsAsString))\n{\n    // use myFlagEnumsAsString here\n}\n```\n\nNote: Negative values other than (-1) passed into this method will cause a `NegativeValueArgumentException` to be thrown, this behaviour can be disabled by applying the `AllowNegativeInput` attribute to the desired `SmartFlagEnum` class.\n\n### BitWiseOrOperator\n\nThe `FromValue()` methods allow the Or ( | ) operator to be used to `add` enum values together and provide multiple values at once.\n\n```csharp\nvar myFlagEnums = TestFlagEnum.FromValue(TestFlagEnum.One | TestFlagEnum.Two);\n```\n\nThis will only work where the type of the `SmartFlagEnum` has been specified as `Int32` or else can be explicitly cast as an `Int32`.\n\n```csharp\nvar myFlagEnums = TestFlagEnumDecimal.FromValue((int)TestFlagEnum.One | (int)TestFlagEnum.Two);\n```\n\n### Persisting with EF Core 2.1 or higher\n\nEF Core 2.1 introduced [value conversions](https://docs.microsoft.com/en-us/ef/core/modeling/value-conversions) which can be used to map SmartEnum types to simple database types. For example, given an entity named `Policy` with a property `PolicyStatus` that is a SmartEnum, you could use the following code to persist just the value to the database:\n\n```csharp\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    base.OnModelCreating(builder);\n\n    builder.Entity<Policy>()\n        .Property(p => p.PolicyStatus)\n        .HasConversion(\n            p => p.Value,\n            p => PolicyStatus.FromValue(p));\n}\n```\n\nRemember, you need to implement your own parameterless constructor to make it works with db context. See [#103 issue](https://github.com/ardalis/SmartEnum/issues/103).\n\n#### Using SmartEnum.EFCore\n\nEF Core 6 introduced pre-convention model configuration which allows value conversions to be configured for specific types within a model. If you have installed `Ardalis.SmartEnum.EFCore` it is sufficient to add the following line at the beginning of the `ConfigureConventions` method:\n\n```csharp\nprotected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)\n{\n    configurationBuilder.ConfigureSmartEnum();\n\n    ...\n}\n```\n\nFor previous versions of EF Core, the following line can be added at the end of the `OnModelCreating` method:\n\n```csharp\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    ...\n\n    modelBuilder.ConfigureSmartEnum();\n}\n```\n\n## AutoFixture support\n\nNew instance of a `SmartEnum` should not be created. Instead, references to the existing ones should always be used. [AutoFixture](https://github.com/AutoFixture/AutoFixture) by default doesn't know how to do this. The `Ardalis.SmartEnum.AutoFixture` package includes a specimen builder for `SmartEnum`. Simply add the customization to the `IFixture` builder:\n\n```csharp\nvar fixture = new Fixture()\n    .Customize(new SmartEnumCustomization());\n\nvar smartEnum = fixture.Create<TestEnum>();\n```\n\n## Json support\n\nWhen serializing a `SmartEnum` to JSON, only one of the properties (`Value` or `Name`) should be used. \n\n### Json<span></span>.Net\n[Json.NET](https://www.newtonsoft.com/json) by default doesn't know how to do this. The `Ardalis.SmartEnum.JsonNet` package includes a couple of converters to achieve this. Simply use the attribute [JsonConverterAttribute](https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_JsonConverter.htm) to assign one of the converters to the `SmartEnum` to be de/serialized:\n\n### System<span></span>.Text<span></span>.Json\n[System.Text.Json](https://learn.microsoft.com/en-us/dotnet/api/system.text.json?view=net-8.0) by default doesn't know how to do this. The `Ardalis.SmartEnum.SystemTextJson` package includes a couple of converters to achieve this. Simply use the attribute [JsonConverterAttribute](https://learn.microsoft.com/en-us/dotnet/api/system.text.json.serialization.jsonconverterattribute?view=net-8.0) to assign one of the converters to the `SmartEnum` to be de/serialized:\n\n```csharp\npublic class TestClass\n{\n    [JsonConverter(typeof(SmartEnumNameConverter<TestEnum,int>))]\n    public TestEnum Property { get; set; }\n}\n```\n\nuses the `Name`:\n\n```json\n{\n  \"Property\": \"One\"\n}\n```\n\nWhile this:\n\n```csharp\npublic class TestClass\n{\n    [JsonConverter(typeof(SmartEnumValueConverter<TestEnum,int>))]\n    public TestEnum Property { get; set; }\n}\n```\n\nuses the `Value`:\n\n```json\n{\n  \"Property\": 1\n}\n```\n\nNote: The SmartFlagEnum works identically to the SmartEnum when being Serialized and Deserialized.\n\n## Dapper support\n\nTo enable Dapper support for `SmartEnum` values, add a `SmartEnumTypeHandler` to `SqlMapper` for the\ngiven `SmartEnum` type. There are two inheritors of `SmartEnumTypeHandler`:\n`SmartEnumByNameTypeHandler`, which maps the Name of a `SmartEnum` to a database column, and\n`SmartEnumByValueTypeHandler`, which maps the Value of a `SmartEnum` to a database column.\n\n```csharp\n// Maps the name of TestEnum objects (e.g. \"One\", \"Two\", or \"Three\") to a database column.\nSqlMapper.AddTypeHandler(typeof(TestEnum), new SmartEnumByNameTypeHandler<TestEnum>());\n```\n\n```csharp\n// Maps the value of TestEnum objects (e.g. 1, 2, or 3) to a database column.\nSqlMapper.AddTypeHandler(typeof(TestEnum), new SmartEnumByValueTypeHandler<TestEnum>());\n```\n\n### DapperSmartEnum\n\nTo avoid needing to explicitly register a `SmartEnum` type with Dapper, it can be done automatically\nby inheriting from `DapperSmartEnumByName` or `DapperSmartEnumByValue` instead of from `SmartEnum`.\n\n```csharp\npublic class TestEnumByName : DapperSmartEnumByName<TestEnumByName>\n{\n    public static readonly TestEnumByName One = new TestEnumByName(1);\n    public static readonly TestEnumByName Two = new TestEnumByName(2);\n    public static readonly TestEnumByName Three = new TestEnumByName(3);\n\n    protected TestEnumByName(int value, [CallerMemberName] string name = null) : base(name, value)\n    {\n    }\n}\n```\n\n```csharp\npublic class TestEnumByValue : DapperSmartEnumByValue<TestEnumByValue>\n{\n    public static readonly TestEnumByValue One = new TestEnumByValue(1);\n    public static readonly TestEnumByValue Two = new TestEnumByValue(2);\n    public static readonly TestEnumByValue Three = new TestEnumByValue(3);\n\n    protected TestEnumByValue(int value, [CallerMemberName] string name = null) : base(name, value)\n    {\n    }\n}\n```\n\nInheritors of `DapperSmartEnum` can be decorated with custom attributes in order to configure\nits type handler. Use `DbTypeAttribute` (e.g. `[DbType(DbType.String)]`) to specify that parameters\nshould have their `DbType` property set to the specified value. Use `DoNotSetDbTypeAttribute` (e.g.\n`[DoNotSetDbType]`) to specify that parameters should not have their `DbType` property set. Use\n`IgnoreCaseAttribute` (e.g. `[IgnoreCase]`) when inheriting from `DapperSmartEnumByName` to specify\nthat database values do not need to match the case of a SmartEnum Name.\n\n### Case Insensitive String Enum\n\nWhen creating enums of strings, the default behaviour of SmartEnum is to compare the strings with a case sensitive comparer.\nIt is possible to specify a different equality comparer for the enum values, for example a case insensitive one:\n\n```csharp\n[SmartEnumStringComparer(StringComparison.InvariantCultureIgnoreCase)]\npublic class CaseInsensitiveEnum : SmartEnum<CaseInsensitiveEnum, string>\n{\n    protected CaseInsensitiveEnum(string name, string value) : base(name, value) { }\n\n    public static CaseInsensitiveEnum One = new CaseInsensitiveEnum(\"One\", \"one\");\n    public static CaseInsensitiveEnum Two = new CaseInsensitiveEnum(\"Two\", \"two\");\n}\n\nvar e1 = CaseInsensitiveEnum.FromValue(\"ONE\");\nvar e2 = CaseInsensitiveEnum.FromValue(\"one\");\n\n//e1 is equal to e2\n```\n## Name Validation Attribute\nThe DataAnnotations ValidationAttribute `SmartEnumNameAttribute` allows you to validate your models, mandating that when provided a value it must be matching the name of a given `SmartEnum`. This attribute allows `null` values (use `[Required]` to disallow nulls).\n\nIn addition to specifying the `SmartEnum` to match, you may also pass additional parameters:\n- `allowCaseInsensitiveMatch` (default `false`)\n- `errorMessage` (default `\"{0} must be one of: {1}\"`): A format string to customize the error\n  - `{0}` is the name of the property being validated\n  - `{1}` is the comma-separated list of valid `SmartEnum` names\n\n### Example of Name Validation Attribute\n```csharp\npublic sealed class ExampleSmartEnum : SmartEnum<ExampleSmartEnum>\n{\n    public static readonly ExampleSmartEnum Foo = new ExampleSmartEnum(nameof(Foo), 1);\n    public static readonly ExampleSmartEnum Bar = new ExampleSmartEnum(nameof(Bar), 2);\n    \n    private ExampleSmartEnum(string name, int value) : base(name, value) { }\n}\n\npublic class ExampleModel\n{\n    [Required]\n    [SmartEnumName(typeof(ExampleSmartEnum)]\n    public string MyExample { get; set; } // must be \"Foo\" or \"Bar\"\n    \n    [SmartEnumName(typeof(ExampleSmartEnum), allowCaseInsensitiveMatch: true)]\n    public string CaseInsensitiveExample { get; set; } // \"Foo\", \"foo\", etc. allowed; null also allowed here\n}\n```\n\n## Examples in the Real World\n\n- [Race](https://github.com/pdevito3/PeakLimsApi/blob/main/PeakLims/src/PeakLims/Domain/Races/Race.cs)\n\n[Search for more](https://github.com/search?l=C%23&q=Ardalis.SmartEnum&type=Code)\n\n## References\n\n- [Listing Strongly Typed Enums...)](https://ardalis.com/listing-strongly-typed-enum-options-in-c)\n- [Enum Alternatives in C#](https://ardalis.com/enum-alternatives-in-c)\n- [Smarter Enumerations (podcast episode)](http://www.weeklydevtips.com/014)\n- [Persisting a Smart Enum with Entity Framework Core](https://blog.nimblepros.com/blogs/persisting-a-smart-enum-with-entity-framework-core/)\n"
        },
        {
          "name": "SmartEnum.sln",
          "type": "blob",
          "size": 15.9833984375,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.0.32112.339\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SmartEnum\", \"src\\SmartEnum\\SmartEnum.csproj\", \"{2A1AA760-8929-433C-BC27-5513F0289842}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SmartEnum.UnitTests\", \"test\\SmartEnum.UnitTests\\SmartEnum.UnitTests.csproj\", \"{7EC129B9-8A9B-469E-A160-8C351161F097}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution\", \"Solution\", \"{E458C16C-956D-48B1-B673-C202B96CC748}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.editorconfig = .editorconfig\n\t\t.gitignore = .gitignore\n\t\tazure-pipelines.yml = azure-pipelines.yml\n\t\tDirectory.Build.props = Directory.Build.props\n\t\tDirectory.Packages.props = Directory.Packages.props\n\t\tLICENSE = LICENSE\n\t\tnuget.txt = nuget.txt\n\t\tREADME.md = README.md\n\t\tSmartEnumTests.ruleset = SmartEnumTests.ruleset\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SmartEnum.Benchmarks\", \"benchmarks\\SmartEnum.Benchmarks\\SmartEnum.Benchmarks.csproj\", \"{0F0C288D-39BA-4E83-A7FE-3B90D7CF250A}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SmartEnum.AutoFixture\", \"src\\SmartEnum.AutoFixture\\SmartEnum.AutoFixture.csproj\", \"{2D6FEC9B-F2B4-4B6F-8FBC-73F8ED6D0843}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SmartEnum.AutoFixture.UnitTests\", \"test\\SmartEnum.AutoFixture.UnitTests\\SmartEnum.AutoFixture.UnitTests.csproj\", \"{5FE49DE4-C835-4FD7-BF83-6253ED3DEDD1}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SmartEnum.JsonNet\", \"src\\SmartEnum.JsonNet\\SmartEnum.JsonNet.csproj\", \"{0293FF49-E253-48D2-A11D-3ED3D81BDF64}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SmartEnum.JsonNet.UnitTests\", \"test\\SmartEnum.JsonNet.UnitTests\\SmartEnum.JsonNet.UnitTests.csproj\", \"{3E78F627-5D62-411B-AA93-44311AD86284}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SmartEnum.MessagePack\", \"src\\SmartEnum.MessagePack\\SmartEnum.MessagePack.csproj\", \"{A33AB3A6-3095-436C-A732-5B0FDF60D974}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SmartEnum.MessagePack.UnitTests\", \"test\\SmartEnum.MessagePack.UnitTests\\SmartEnum.MessagePack.UnitTests.csproj\", \"{DB418628-F36F-4278-A34D-E5BDD35F4707}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SmartEnum.ProtoBufNet\", \"src\\SmartEnum.ProtoBufNet\\SmartEnum.ProtoBufNet.csproj\", \"{E42A9786-7093-47EE-9916-DC478E922734}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SmartEnum.ProtoBufNet.UnitTests\", \"test\\SmartEnum.ProtoBufNet.UnitTests\\SmartEnum.ProtoBufNet.UnitTests.csproj\", \"{C65837A3-1AB1-4AD4-9D9E-C3FF437A5714}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SmartEnum.Utf8Json\", \"src\\SmartEnum.Utf8Json\\SmartEnum.Utf8Json.csproj\", \"{8FC7B9E5-B651-42BC-B21B-B45F0C8A239B}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SmartEnum.Utf8Json.UnitTests\", \"test\\SmartEnum.Utf8Json.UnitTests\\SmartEnum.Utf8Json.UnitTests.csproj\", \"{66EF3D1A-32AE-4B28-BC3E-7441615722A9}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"tests\", \"tests\", \"{79268877-BBEF-4DE2-B8D9-697F21933159}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"src\", \"src\", \"{FA199ECB-5F29-442A-AAC6-91DBCB7A5A04}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"benchmarks\", \"benchmarks\", \"{5952C160-ABAA-4302-9150-0928E82545B1}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SmartFlagEnum.UnitTests\", \"test\\SmartFlagEnum.UnitTests\\SmartFlagEnum.UnitTests.csproj\", \"{A927CEF1-A29C-4A8B-A590-7907ED93231F}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SmartEnum.SystemTextJson\", \"src\\SmartEnum.SystemTextJson\\SmartEnum.SystemTextJson.csproj\", \"{A7F1C0E7-F641-4800-98DA-FA7A7B7B76E9}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SmartEnum.SystemTextJson.UnitTests\", \"test\\SmartEnum.SystemTextJson.UnitTests\\SmartEnum.SystemTextJson.UnitTests.csproj\", \"{3EBD6CA5-CF2C-4350-922E-CEE2AE01445A}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SmartEnum.EFCore\", \"src\\SmartEnum.EFCore\\SmartEnum.EFCore.csproj\", \"{CDA8EF6E-F678-4FD3-80B0-5C61FC76EE51}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SmartEnum.EFCore.IntegrationTests\", \"test\\SmartEnum.EFCore.IntegrationTests\\SmartEnum.EFCore.IntegrationTests.csproj\", \"{DF5E3B19-AE8E-48A4-B023-4FA42D6EA8FF}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"IntegrationTests\", \"IntegrationTests\", \"{EF5634F4-4667-4481-934C-D1CFA042AD0B}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SmartEnum.ModelBinding\", \"src\\SmartEnum.ModelBinding\\SmartEnum.ModelBinding.csproj\", \"{C9028EC4-2B46-4A4F-BDE8-BC249BFB0C5A}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SmartEnum.Dapper\", \"src\\SmartEnum.Dapper\\SmartEnum.Dapper.csproj\", \"{7E08FCFA-2318-4D36-BAB5-8AFA41F00CC3}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SmartEnum.Dapper.UnitTests\", \"test\\SmartEnum.Dapper.UnitTests\\SmartEnum.Dapper.UnitTests.csproj\", \"{ADBD5097-87A4-492B-9399-6A4CCC53CD5A}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SmartEnum.Dapper.IntegrationTests\", \"test\\SmartEnum.Dapper.IntegrationTests\\SmartEnum.Dapper.IntegrationTests.csproj\", \"{ACCA93E9-EE80-490C-81A3-824086E4EA2F}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SmartEnum.GuardClauses\", \"src\\SmartEnum.GuardClauses\\SmartEnum.GuardClauses.csproj\", \"{A720F348-2176-4A47-ADC5-CC2664FDA516}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"SmartEnum.GuardClauses.UnitTests\", \"test\\SmartEnum.GuardClauses.UnitTests\\SmartEnum.GuardClauses.UnitTests.csproj\", \"{B7B944B3-E9DC-4CFC-BADC-11EC2F226AA2}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{2A1AA760-8929-433C-BC27-5513F0289842}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{2A1AA760-8929-433C-BC27-5513F0289842}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{2A1AA760-8929-433C-BC27-5513F0289842}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{2A1AA760-8929-433C-BC27-5513F0289842}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{7EC129B9-8A9B-469E-A160-8C351161F097}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{7EC129B9-8A9B-469E-A160-8C351161F097}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{7EC129B9-8A9B-469E-A160-8C351161F097}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{7EC129B9-8A9B-469E-A160-8C351161F097}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{0F0C288D-39BA-4E83-A7FE-3B90D7CF250A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{0F0C288D-39BA-4E83-A7FE-3B90D7CF250A}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{0F0C288D-39BA-4E83-A7FE-3B90D7CF250A}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{0F0C288D-39BA-4E83-A7FE-3B90D7CF250A}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{2D6FEC9B-F2B4-4B6F-8FBC-73F8ED6D0843}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{2D6FEC9B-F2B4-4B6F-8FBC-73F8ED6D0843}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{2D6FEC9B-F2B4-4B6F-8FBC-73F8ED6D0843}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{2D6FEC9B-F2B4-4B6F-8FBC-73F8ED6D0843}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{5FE49DE4-C835-4FD7-BF83-6253ED3DEDD1}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{5FE49DE4-C835-4FD7-BF83-6253ED3DEDD1}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{5FE49DE4-C835-4FD7-BF83-6253ED3DEDD1}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{5FE49DE4-C835-4FD7-BF83-6253ED3DEDD1}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{0293FF49-E253-48D2-A11D-3ED3D81BDF64}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{0293FF49-E253-48D2-A11D-3ED3D81BDF64}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{0293FF49-E253-48D2-A11D-3ED3D81BDF64}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{0293FF49-E253-48D2-A11D-3ED3D81BDF64}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{3E78F627-5D62-411B-AA93-44311AD86284}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{3E78F627-5D62-411B-AA93-44311AD86284}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{3E78F627-5D62-411B-AA93-44311AD86284}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{3E78F627-5D62-411B-AA93-44311AD86284}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{A33AB3A6-3095-436C-A732-5B0FDF60D974}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{A33AB3A6-3095-436C-A732-5B0FDF60D974}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{A33AB3A6-3095-436C-A732-5B0FDF60D974}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{A33AB3A6-3095-436C-A732-5B0FDF60D974}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{DB418628-F36F-4278-A34D-E5BDD35F4707}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{DB418628-F36F-4278-A34D-E5BDD35F4707}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{DB418628-F36F-4278-A34D-E5BDD35F4707}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{DB418628-F36F-4278-A34D-E5BDD35F4707}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{E42A9786-7093-47EE-9916-DC478E922734}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{E42A9786-7093-47EE-9916-DC478E922734}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{E42A9786-7093-47EE-9916-DC478E922734}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{E42A9786-7093-47EE-9916-DC478E922734}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{C65837A3-1AB1-4AD4-9D9E-C3FF437A5714}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{C65837A3-1AB1-4AD4-9D9E-C3FF437A5714}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{C65837A3-1AB1-4AD4-9D9E-C3FF437A5714}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{C65837A3-1AB1-4AD4-9D9E-C3FF437A5714}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{8FC7B9E5-B651-42BC-B21B-B45F0C8A239B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{8FC7B9E5-B651-42BC-B21B-B45F0C8A239B}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{8FC7B9E5-B651-42BC-B21B-B45F0C8A239B}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{8FC7B9E5-B651-42BC-B21B-B45F0C8A239B}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{66EF3D1A-32AE-4B28-BC3E-7441615722A9}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{66EF3D1A-32AE-4B28-BC3E-7441615722A9}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{66EF3D1A-32AE-4B28-BC3E-7441615722A9}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{66EF3D1A-32AE-4B28-BC3E-7441615722A9}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{A927CEF1-A29C-4A8B-A590-7907ED93231F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{A927CEF1-A29C-4A8B-A590-7907ED93231F}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{A927CEF1-A29C-4A8B-A590-7907ED93231F}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{A927CEF1-A29C-4A8B-A590-7907ED93231F}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{A7F1C0E7-F641-4800-98DA-FA7A7B7B76E9}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{A7F1C0E7-F641-4800-98DA-FA7A7B7B76E9}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{A7F1C0E7-F641-4800-98DA-FA7A7B7B76E9}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{A7F1C0E7-F641-4800-98DA-FA7A7B7B76E9}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{3EBD6CA5-CF2C-4350-922E-CEE2AE01445A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{3EBD6CA5-CF2C-4350-922E-CEE2AE01445A}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{3EBD6CA5-CF2C-4350-922E-CEE2AE01445A}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{3EBD6CA5-CF2C-4350-922E-CEE2AE01445A}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{CDA8EF6E-F678-4FD3-80B0-5C61FC76EE51}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{CDA8EF6E-F678-4FD3-80B0-5C61FC76EE51}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{CDA8EF6E-F678-4FD3-80B0-5C61FC76EE51}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{CDA8EF6E-F678-4FD3-80B0-5C61FC76EE51}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{DF5E3B19-AE8E-48A4-B023-4FA42D6EA8FF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{DF5E3B19-AE8E-48A4-B023-4FA42D6EA8FF}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{DF5E3B19-AE8E-48A4-B023-4FA42D6EA8FF}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{DF5E3B19-AE8E-48A4-B023-4FA42D6EA8FF}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{C9028EC4-2B46-4A4F-BDE8-BC249BFB0C5A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{C9028EC4-2B46-4A4F-BDE8-BC249BFB0C5A}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{C9028EC4-2B46-4A4F-BDE8-BC249BFB0C5A}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{C9028EC4-2B46-4A4F-BDE8-BC249BFB0C5A}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{7E08FCFA-2318-4D36-BAB5-8AFA41F00CC3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{7E08FCFA-2318-4D36-BAB5-8AFA41F00CC3}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{7E08FCFA-2318-4D36-BAB5-8AFA41F00CC3}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{7E08FCFA-2318-4D36-BAB5-8AFA41F00CC3}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{ADBD5097-87A4-492B-9399-6A4CCC53CD5A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{ADBD5097-87A4-492B-9399-6A4CCC53CD5A}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{ADBD5097-87A4-492B-9399-6A4CCC53CD5A}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{ADBD5097-87A4-492B-9399-6A4CCC53CD5A}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{ACCA93E9-EE80-490C-81A3-824086E4EA2F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{ACCA93E9-EE80-490C-81A3-824086E4EA2F}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{ACCA93E9-EE80-490C-81A3-824086E4EA2F}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{ACCA93E9-EE80-490C-81A3-824086E4EA2F}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{A720F348-2176-4A47-ADC5-CC2664FDA516}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{A720F348-2176-4A47-ADC5-CC2664FDA516}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{A720F348-2176-4A47-ADC5-CC2664FDA516}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{A720F348-2176-4A47-ADC5-CC2664FDA516}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{B7B944B3-E9DC-4CFC-BADC-11EC2F226AA2}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{B7B944B3-E9DC-4CFC-BADC-11EC2F226AA2}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{B7B944B3-E9DC-4CFC-BADC-11EC2F226AA2}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{B7B944B3-E9DC-4CFC-BADC-11EC2F226AA2}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{2A1AA760-8929-433C-BC27-5513F0289842} = {FA199ECB-5F29-442A-AAC6-91DBCB7A5A04}\n\t\t{7EC129B9-8A9B-469E-A160-8C351161F097} = {79268877-BBEF-4DE2-B8D9-697F21933159}\n\t\t{0F0C288D-39BA-4E83-A7FE-3B90D7CF250A} = {5952C160-ABAA-4302-9150-0928E82545B1}\n\t\t{2D6FEC9B-F2B4-4B6F-8FBC-73F8ED6D0843} = {FA199ECB-5F29-442A-AAC6-91DBCB7A5A04}\n\t\t{5FE49DE4-C835-4FD7-BF83-6253ED3DEDD1} = {79268877-BBEF-4DE2-B8D9-697F21933159}\n\t\t{0293FF49-E253-48D2-A11D-3ED3D81BDF64} = {FA199ECB-5F29-442A-AAC6-91DBCB7A5A04}\n\t\t{3E78F627-5D62-411B-AA93-44311AD86284} = {79268877-BBEF-4DE2-B8D9-697F21933159}\n\t\t{A33AB3A6-3095-436C-A732-5B0FDF60D974} = {FA199ECB-5F29-442A-AAC6-91DBCB7A5A04}\n\t\t{DB418628-F36F-4278-A34D-E5BDD35F4707} = {79268877-BBEF-4DE2-B8D9-697F21933159}\n\t\t{E42A9786-7093-47EE-9916-DC478E922734} = {FA199ECB-5F29-442A-AAC6-91DBCB7A5A04}\n\t\t{C65837A3-1AB1-4AD4-9D9E-C3FF437A5714} = {79268877-BBEF-4DE2-B8D9-697F21933159}\n\t\t{8FC7B9E5-B651-42BC-B21B-B45F0C8A239B} = {FA199ECB-5F29-442A-AAC6-91DBCB7A5A04}\n\t\t{66EF3D1A-32AE-4B28-BC3E-7441615722A9} = {79268877-BBEF-4DE2-B8D9-697F21933159}\n\t\t{A927CEF1-A29C-4A8B-A590-7907ED93231F} = {79268877-BBEF-4DE2-B8D9-697F21933159}\n\t\t{A7F1C0E7-F641-4800-98DA-FA7A7B7B76E9} = {FA199ECB-5F29-442A-AAC6-91DBCB7A5A04}\n\t\t{3EBD6CA5-CF2C-4350-922E-CEE2AE01445A} = {79268877-BBEF-4DE2-B8D9-697F21933159}\n\t\t{CDA8EF6E-F678-4FD3-80B0-5C61FC76EE51} = {FA199ECB-5F29-442A-AAC6-91DBCB7A5A04}\n\t\t{DF5E3B19-AE8E-48A4-B023-4FA42D6EA8FF} = {EF5634F4-4667-4481-934C-D1CFA042AD0B}\n\t\t{EF5634F4-4667-4481-934C-D1CFA042AD0B} = {79268877-BBEF-4DE2-B8D9-697F21933159}\n\t\t{C9028EC4-2B46-4A4F-BDE8-BC249BFB0C5A} = {FA199ECB-5F29-442A-AAC6-91DBCB7A5A04}\n\t\t{7E08FCFA-2318-4D36-BAB5-8AFA41F00CC3} = {FA199ECB-5F29-442A-AAC6-91DBCB7A5A04}\n\t\t{ADBD5097-87A4-492B-9399-6A4CCC53CD5A} = {79268877-BBEF-4DE2-B8D9-697F21933159}\n\t\t{ACCA93E9-EE80-490C-81A3-824086E4EA2F} = {EF5634F4-4667-4481-934C-D1CFA042AD0B}\n\t\t{A720F348-2176-4A47-ADC5-CC2664FDA516} = {FA199ECB-5F29-442A-AAC6-91DBCB7A5A04}\n\t\t{B7B944B3-E9DC-4CFC-BADC-11EC2F226AA2} = {79268877-BBEF-4DE2-B8D9-697F21933159}\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {46896DE3-41B8-442F-A6FB-6AC9F11CCBCE}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "azure-pipelines.yml.archive",
          "type": "blob",
          "size": 2.5244140625,
          "content": "trigger:\n  branches:\n      include:\n      - master\n      - refs/tags/*\npr:\n- master\n\npool:\n  vmImage: 'windows-2019'\n\nvariables:\n  solution: '**/*.sln'\n  buildPlatform: 'Any CPU'\n  buildConfiguration: 'Release'\n\n# see reference\n# https://github.com/danielpalme/ReportGenerator/blob/master/azure-pipelines.yml\n\nsteps:\n- task: DotNetCoreCLI@2\n  displayName: 'dotnet version'\n  inputs:\n    command: custom\n    custom: '--version'\n\n- task: DotNetCoreInstaller@0\n  displayName: 'Use .NET Core SDK 2.2.300'\n  inputs:\n    version: 2.2.300\n\n- task: DotNetCoreCLI@2\n  displayName: 'dotnet info'\n  inputs:\n    command: custom\n    custom: '--info'\n\n- task: DotNetCoreCLI@2\n  displayName: 'dotnet version'\n  inputs:\n    command: custom\n    custom: '--version'\n  \n# Build\n\n- task: DotNetCoreCLI@2\n  displayName: Build src projects\n  inputs:\n    command: build\n    projects: |\n      **/*.csproj\n      !**/*Benchmarks.csproj\n      !**/*Tests.csproj\n    arguments: '--configuration $(buildConfiguration) --output $(Agent.BuildDirectory)'\n\n- task: DotNetCoreCLI@2\n  displayName: Build UnitTests\n  inputs:\n    command: build\n    projects: '**/*Tests.csproj'\n    arguments: '--configuration $(buildConfiguration)'\n\n# Run tests and create coverage report\n- task: DotNetCoreCLI@2\n  displayName: Run test\n  inputs:\n    command: test\n    projects: '**/*Tests.csproj'\n    arguments: '--configuration $(buildConfiguration) --no-build --collect:\"XPlat Code Coverage\" /p:AltCover=true /p:AltCoverForce=true /p:AltCoverCallContext=[Fact]'\n\n- task: reportgenerator@4\n  displayName: ReportGenerator\n  inputs:\n    reports: $(Agent.TempDirectory)/**/*coverage.cobertura.xml\n    targetdir: '$(Build.ArtifactStagingDirectory)/reports/coverage'\n    reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'\n    assemblyfilters: '-xunit*'\n\n- task: PublishCodeCoverageResults@1\n  displayName: 'Publish code coverage results'\n  inputs:\n    codeCoverageTool: Cobertura\n    summaryFileLocation: '$(Build.ArtifactStagingDirectory)\\**\\*Cobertura.xml'\n    reportDirectory: '$(Build.ArtifactStagingDirectory)\\reports\\coverage'\n\n#Publish packages\n- task: CopyFiles@2\n  displayName: 'Copy Files'\n  inputs:\n    SourceFolder: '$(Agent.BuildDirectory)'\n    Contents: '**\\*.nupkg'\n    TargetFolder: '$(Build.ArtifactStagingDirectory)\\Package'\n  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Artifact'\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)\\Package'\n  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "nuget.txt",
          "type": "blob",
          "size": 0.3486328125,
          "content": "Checklist:\nhttps://ardalis.com/nuget-publication-checklist\n\n-- update csproj file with version and release notes\n\ndotnet pack -c release /p:Version=1.0.X\n\n-- from /bin/release folder\ndotnet nuget push -s https://www.nuget.org/api/v2/package -k <key> Ardalis.SmartEnum.1.0.X.nupkg\n\ngit tag -a v1.0.X -m \"Published 1.0.X to nuget.org\"\n\ngit push --follow-tags\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}