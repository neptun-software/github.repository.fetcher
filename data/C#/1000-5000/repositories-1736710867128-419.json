{
  "metadata": {
    "timestamp": 1736710867128,
    "page": 419,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "CommunityToolkit/Maui",
      "stars": 2349,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 5.90234375,
          "content": "# Suppress: EC112\n# top-most EditorConfig file\nroot = true\n\n# Default settings:\n# A newline ending every file\n# Use 4 spaces as indentation\n[*]\ninsert_final_newline = false\nindent_style = space\nindent_size = 4\n\n# Code files\n[*.{cs,csx,vb,vbx}]\nindent_style = tab\nindent_size = 4\n\n# Code files\n[*.sln]\nindent_size = 4\n\n# Xml project files\n[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]\nindent_size = 2\n\n# Xml config files\n[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]\nindent_size = 2\n\n# JSON files\n[*.json]\nindent_size = 2\n\n# XML files\n[*.xml]\nindent_size = 2\n\n[*.cs]\n\n# Organize usings\ndotnet_sort_system_directives_first = true\n\n# IDE0160: Use file scoped namespace\ncsharp_style_namespace_declarations = file_scoped:error\n\n# CS4014: Because this call is not awaited, execution of the current method continues before the call is completed\ndotnet_diagnostic.CS4014.severity = error\n\n# CS2012: ValueTask instances returned from member invocations are intended to be directly awaited. Attempts to consume a ValueTask multiple times or to directly access one's result before it's known to be completed may result in an exception or corruption. Ignoring such a ValueTask is likely an indication of a functional bug and may degrade performance.\ndotnet_diagnostic.CS2012.severity = error\n\n# CS1998 : This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.\ndotnet_diagnostic.CS1998.severity = error\n\n# Remove explicit default access modifiers\ndotnet_style_require_accessibility_modifiers = omit_if_default:error\n\n# CA1063: Implement IDisposable Correctly\ndotnet_diagnostic.CA1063.severity = error\n\n# CA1001: Type owns disposable field(s) but is not disposable\ndotnet_diagnostic.CA1001.severity = error\n\n# Add braces (IDE0011)\ncsharp_prefer_braces = true\ndotnet_diagnostic.IDE0011.severity = error\n\n# Pattern matching\ndotnet_style_object_initializer = true:suggestion\ndotnet_style_collection_initializer = true:suggestion\ndotnet_style_coalesce_expression = true:suggestion\ndotnet_style_null_propagation = true:suggestion\ndotnet_style_explicit_tuple_names = true:suggestion\ndotnet_style_prefer_is_null_check_over_reference_equality_method=true:suggestion\n\ncsharp_style_pattern_matching_over_is_with_cast_check = true:suggestion\ncsharp_style_pattern_matching_over_as_with_null_check = true:suggestion\ncsharp_style_inlined_variable_declaration = true:suggestion\ncsharp_style_throw_expression = true:suggestion\ncsharp_style_conditional_delegate_call = true:suggestion\n\n# Collection Expressions\ndotnet_style_prefer_collection_expression = when_types_loosely_match:suggestion\ndotnet_diagnostic.IDE0303.severity = suggestion\n\n# Naming rules\n\ndotnet_diagnostic.IDE1006.severity = error\n\n## Public Fields are kept Pascal Case\ndotnet_naming_symbols.public_symbols.applicable_kinds           = field\ndotnet_naming_symbols.public_symbols.applicable_accessibilities = public, internal\n\ndotnet_naming_style.first_word_upper_case_style.capitalization = first_word_upper\n\ndotnet_naming_rule.public_members_must_be_capitalized.symbols   = public_symbols\ndotnet_naming_rule.public_members_must_be_capitalized.style    = first_word_upper_case_style\ndotnet_naming_rule.public_members_must_be_capitalized.severity = suggestion\n\n## Instance fields are camelCase\ndotnet_naming_rule.instance_fields_should_be_camel_case.severity = error\ndotnet_naming_rule.instance_fields_should_be_camel_case.symbols = instance_fields\ndotnet_naming_rule.instance_fields_should_be_camel_case.style = instance_field_style\n\ndotnet_naming_symbols.instance_fields.applicable_kinds = field\n\ndotnet_naming_style.instance_field_style.capitalization = camel_case\ndotnet_naming_style.instance_field_style.required_prefix =\n\n## Static fields are camelCase\ndotnet_naming_rule.static_fields_should_be_camel_case.severity = error\ndotnet_naming_rule.static_fields_should_be_camel_case.symbols = static_fields\ndotnet_naming_rule.static_fields_should_be_camel_case.style = static_field_style\n\ndotnet_naming_symbols.static_fields.applicable_kinds = field\ndotnet_naming_symbols.static_fields.required_modifiers = static\ndotnet_naming_symbols.static_fields.applicable_accessibilities = private, protected, protected_internal, private_protected\n\ndotnet_naming_style.static_field_style.capitalization = camel_case\ndotnet_naming_style.static_field_style.required_prefix =\n\n# Modifier preferences\ncsharp_prefer_static_local_function = true:suggestion\ncsharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:error\n\n# CA1822: Member does not access instance data and can be marked as static\ndotnet_diagnostic.CA1822.severity = suggestion\n\n# CA1050: Declare types in namespaces\ndotnet_diagnostic.CA1050.severity = error\n\n# CA2016: Forward the 'cancellationToken' parameter methods that take one\ndotnet_diagnostic.CA2016.severity = error\n\n# CA1068: CancellationToken parameters must come last\ndotnet_diagnostic.CA1068.severity = error\n\n# CA2208: Method passes parameter as the paramName argument to a ArgumentNullException constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.\ndotnet_diagnostic.CA2208.severity = error\n\n# CA1834: Use 'StringBuilder.Append(char)' instead of 'StringBuilder.Append(string)' when the input is a constant unit string\ndotnet_diagnostic.CA1834.severity = error\n\n# IDE0220: Add explicit cast\ndotnet_diagnostic.IDE0220.severity = error\n\n# Warning CA2264 : Calling 'ArgumentNullException.ThrowIfNull' and passing a non-nullable value is a no-op\ndotnet_diagnostic.CA2264.severity = error\n\n# MVMTK0042: The field [ObservableProperty] can be converted to a partial property\ndotnet_diagnostic.MVMTK0042.severity = error\n\n# XC0045: Binding Property not found\ndotnet_diagnostic.XC0045.severity = error"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.6884765625,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n\n# Force bash scripts to always use lf line endings so that if a repo is accessed\n# in Unix via a file share from Windows, the scripts will work.\n*.sh text eol=lf\n\n# Force the docs to always use lf line endings\ndocs/**/*.xml text eol=lf"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.4970703125,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# ignore Xamarin.Android Resource.Designer.cs files\n**/*.Droid/**/[Rr]esource.[Dd]esigner.cs\n**/*.Android/**/[Rr]esource.[Dd]esigner.cs\n**/Android/**/[Rr]esource.[Dd]esigner.cs\n**/Droid/**/[Rr]esource.[Dd]esigner.cs\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n**/.DS_Store\n**/.meteor\n\n# MFractors (Xamarin productivity tool) working folder\n.mfractor/\n\n# Visual Studio Code\n.vscode\n/samples/workload-install.ps1\n\n# Benchmarkdot\nBenchmarkDotNet.Artifacts/"
        },
        {
          "name": ".runsettings",
          "type": "blob",
          "size": 0.53515625,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RunSettings>\n  <RunConfiguration>\n    <TreatNoTestsAsError>true</TreatNoTestsAsError>\n  </RunConfiguration>\n\n  <DataCollectionRunSettings>\n    <DataCollectors>\n      <DataCollector friendlyName=\"XPlat code coverage\">\n        <Configuration>\n          <Format>cobertura</Format>\n          <SkipAutoProps>true</SkipAutoProps>          \n          <IncludeTestAssembly>false</IncludeTestAssembly>\n        </Configuration>\n      </DataCollector>\n    </DataCollectors>\n  </DataCollectionRunSettings>\n</RunSettings>"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 13.0263671875,
          "content": "# Contributing\n\nThank you for your interest in contributing to the .NET MAUI Community Toolkit! In this document we'll outline what you need to know about contributing and how to get started.\n\nFirst and foremost: we're all friends here. Whether you are a first-time contributor or a core team member from one of the associated projects, we welcome any and all people to contribute to our lovely little project. I mean, it is called *community* toolkit after all.\n\nHaving that said, if you are a first-timer and you could use some help please reach out to any core member. They will be happy to help you out or find someone who can.\n\nFurthermore, for anyone, we would like you to take into consideration the following guidelines.\n\n### Make an effort to be nice\n\nIf you disagree, that's fine. We don't think about everything the same way, be respectful and at some point decide to agree to disagree. If a decision needs to be made, try to involve at least one other person without continuing an endless discussion.\n\nWhen you disagree with a piece of code that is written, try to be helpful and explain why you disagree or how things can be improved (according to you). Always remember there are numerous ways to solve things, there is not one right way, but it's always good to learn about alternatives.\n\nDuring a code review try to make a habit out of it to say at least one nice thing. Obviously about something you like in the code. If a change is not that big or so straight-forward that you can't comment nicely on that, find something else to compliment the person. Make an effort to look at their profile of blog and mention something you like, make that persons day a bit better! <3\n\n### Make an effort to see it from their perspective\n\nRemember English is not everyones native language. Written communication always lacks non-verbal communication. With written communication in a language that is not your native tongue it is even harder to express certain emotions.\n\nAlways assume that people mean to do right. Try to read a sentence a couple of times over and take things more literal. Try to place yourself in their shoes and see the message beyond the actual words. \n\nThings might come across different than they were intended, please keep that in mind and always check to see how someone meant it. If you're not sure, pull someone offline in a private channel on Twitter or email and chat about it for a bit. Maybe even jump on a call to collaborate. We're living in the 21st century, all the tools are there, why not use them to get to know each other and be friends?!\n\nBesides language, we understand that contributing to open-source mostly happens in your spare time. Remember that priorities might change and we can only spend our time once. This works as a two-way street: don't expect things to be solved instantly, but also please let us know if you do not have the capacity to finish work you have in progress. There is no shame in that. That way it's clear to other people that they can step in and take over.\n\n### THANK YOU!\n\nLastly, a big thank you for spending your precious time on our project. We appreciate any effort you make to help us with this project.\n\n## Code of Conduct\n\nPlease see our [Code of Conduct](https://dotnetfoundation.org/code-of-conduct).\n\nAs should be clear by now: we assume everyone tries to do their best, everyone should be treated with respect and equally.\n\nIn the unfortunate event that doesn't happen, please feel free to report it to any of the team members or reach out to [Gerald](mailto:gerald.versluis@microsoft.com) directly.\n\nWe will take appropriate actions and measures if necessary.\n\n## Prerequisites\n\n1. Install latest stable [.NET SDK](https://dotnet.microsoft.com/en-us/download)\n1. Install .NET MAUI workloads (we recommend using Visual Studio installer)\n\n> You will need to complete a Contribution License Agreement before any pull request can be accepted. Complete the CLA at https://cla.dotnetfoundation.org/. This will also be triggered whenever you open a PR and the link should guide you through it.\n\n## Reporting a bug\n\nIf you found something that looks like a bug don't hesitate in opening an issue reporting it. We strongly recommend you to follow our template, if you don't follow your issue can be closed, and that's because we don't have a lot of resources, so we will focus on issues that have most information that we need to work with. And, we would say, the most important part is the reproduction sample that shows the bug.\n\n### Bug reproduction\n\nWe always request a reproduction sample, and that's not to make your life hard or anything like that... The reason of having a reproduction is to save us time to indentify and fix the bug. Create a new project; download the MCT NuGet; write UI; ViewModel; create a service; run it. As you can see it's a lot of timing consuming for us that we could spend fixing the actual issue. So **PLEASE** create a small reproduction project, upload it on GitHub or GitLab and paste the link in the issue.\n\n> We don't accept `.zip` files as reproduction samples, for security reasons. So if you send us a `.zip` file we will kindly ask you to upload it to GitHub or GitLab and share the link\n\nAnd most important: **Please, help us to help you ❤️**\n\n\n## Opening a PR process\n\n### TL;DR\n* Find an issue/feature, make sure that the issue/feature has been `Approved` and is welcomed (also see [New Features](https://github.com/CommunityToolkit/Maui#submitting-a-new-feature))\n* Fork repository\n* Create branch\n* Implement\n* Open a PR\n* We merge\n* High-fives all-around\n\n### Please consider\n\n#### Tabs vs. Spaces?!\n[Tabs](https://www.reddit.com/r/javascript/comments/c8drjo/nobody_talks_about_the_real_reason_to_use_tabs/).\n\n#### Make your changes small, don't keep adding\nWe love your enthusiasm, but small changes and small PRs are easier to digest. We're all doing this in our spare time, it is easier to review a couple of small things and merge that and iterate from there than to have a PR with 100+ files changed that will sit there forever.\n\n#### Added features should have tests, a sample and documentation\nWe like quality as much as the next person, so please provide tests.\n\nIn addition, we would want a new feature or change to be as clear as possible for other developers. Please add a sample to the sample app as part of your PR and also provide a PR to our [documentation repository](https://github.com/MicrosoftDocs/CommunityToolkit).\n\n## Where to make your changes?\n\nIf you are unsure on where to locate the changes you need to make then please use the following section and flowchart.\n\n![](https://user-images.githubusercontent.com/13558917/145694198-7addbd35-0e5f-4816-b351-759a01ec2672.png)\n\n### CommunityToolkit.Maui.Core\n\nIn general, this project will have all the basement to develop our Toolkit, including some primitive types, interfaces and base classes, base views, and common code. This will be referenced by other Frameworks/Toolkit based on .NET MAUI that wants to have the same features that us.\n\nHere we will have some:\n\n- BaseViews, could be Views that will be used by other Views, like PaddingButton (that's used by Snackbar) or the MauiPopup (used by Popup) that will be a native control implemented in a way that can work with our handler. This same approach is used here\n\n- Primitives, which will be base types that can be used by everyone, like our MathOperator. So other frameworks may not have the concept of Behavior or Converter but they can mimic them as helper classes/methods and use our primitives.\n\n- Common Code, this will be all generic code (platform-specific or not) that can be used by other Frameworks/Toolkits\n\n- Layout Managers, were introduced on .NET MAUI and they live on Microsoft.Maui.Core so makes sense to have our managers on Core as well.\n\n- Handlers, on Core will be the most general Handler with the majority of features.\n\n### CommunityToolkit.Maui:\n\nThis project has a reference to the Core project. Here will live the implementation of our Controls, Views, Behaviors, Animations, etc. In other words, this project will work with the .NET MAUI and will be MVVM friendly. Also, other Toolkits/Frameworks can reference this package if needed.\n\nHere we will have some:\n\n- View Implementation, with BindableProperties, support to attach effects, behaviors, triggers, and all that jazz.\n\n- Platform Configuration, that is Platform-specific features, that can relate to some control - like the ArrowDirection that is part of Popup and works just on iOS - or the application itself - like the StatusBarColorEffect from XCT.\n\n- Handlers Implementation, We will add to our PropertyMapper and/or CommandMapper any Platform Configuration that some Handler/View may have. We also can implement here some features that we think will not be great to have on Core. Here is a reference for this\n\n- Layout, will be the implementation of ours custom layouts and will use the Layout Managers on Core\n\n## Contributing Code - Best Practices\n\n### Debug Logging\n* Always use `Trace.WriteLine()` instead of `Debug.WriteLine` for debug logging because `Debug.WriteLine` is removed by the compiler in Release builds\n\n### Methods Returning Task and ValueTask\n* Always include a `CancellationToken` as a parameter to every method returning `Task` or `ValueTask`\n* If the method is public, provide a the default value for the `CancellationToken` (eg `CancellationToken token = default`)\n  * If the method is not publc, do not provide a default value for the `CancellationToken`\n* Use `CancellationToken.ThrowIfCancellationRequested()` to verify the `CancellationToken`\n\n### Enums\n* Always use `Unknown` at index 0 for return types that may have a value that is not known\n* Always use `Default` at index 0 for option types that can use the system default option\n* Follow naming guidelines for tense... `SensorSpeed` not `SensorSpeeds`\n* Assign values (0,1,2,3) for all enums\n\n### Property Names\n* Include units only if one of the platforms includes it in their implementation. For instance HeadingMagneticNorth implies degrees on all platforms, but PressureInHectopascals is needed since platforms don't provide a consistent API for this.\n\n### Units\n* Use the standard units and most well accepted units when possible. For instance Hectopascals are used on UWP/Android and iOS uses Kilopascals so we have chosen Hectopascals.\n\n### Pattern matching\n\n#### Null checking\n* Prefer using `is` when checking for null instead of `==`.\n\ne.g. \n\n```csharp\n// null\nif (something is null)\n{\n\n}\n\n// or not null\nif (something is not null)\n{\n   \n}\n```\n\n* Avoid using the `!` [null forgiving operator](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-forgiving) to avoid the unintended introduction of bugs.\n\n#### Type checking\n\n* Prefer `is` when checking for types instead of casting.\n\ne.g.\n\n```csharp\nif (something is Bucket bucket)\n{\n   bucket.Empty();\n}\n```\n\n### File Scoped Namespaces\n* Use [file scoped namespaces](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-10.0/file-scoped-namespaces) to help reduce code verbosity.\n\ne.g. \n\n```csharp\nnamespace CommunityToolkit.Maui.Converters;\n\nusing System;\n\nclass BoolToObjectConverter\n{\n}\n```\n\n### Braces\n\nPlease use `{ }` after `if`, `for`, `foreach`, `do`, `while`, etc.\n\ne.g.\n\n```csharp\nif (something is not null)\n{\n   ActOnIt();\n}\n```\n\n### `NotImplementedException`\n\nPlease avoid adding new code that throws a `NotImplementedException`. According to the [Microsoft Docs](https://docs.microsoft.com/dotnet/api/system.notimplementedexception), we should only \"throw a `NotImplementedException` exception in properties or methods in your own types when that member is still in development and will only later be implemented in production code. In other words, a NotImplementedException exception should be synonymous with 'still in development.'\"\n\nIn other words, `NotImplementedException` implies that a feature is still in development, indicating that the Pull Request is incomplete.\n\n### Bug Fixes\n\nIf you're looking for something to fix, please browse [open issues](https://github.com/CommunityToolkit/Maui/issues). \n\nFollow the style used by the [.NET Foundation](https://github.com/dotnet/runtime/blob/master/docs/coding-guidelines/coding-style.md), with two primary exceptions:\n\n- We do not use the `private` keyword as it is the default accessibility level in C#.\n- We will **not** use `_` or `s_` as a prefix for internal or private field names\n- We will use `camelCaseFieldName` for naming internal or private fields in both instance and static implementations\n\nRead and follow our [Pull Request template](https://github.com/CommunityToolkit/Maui/blob/main/.github/PULL_REQUEST_TEMPLATE.md)\n\n### Proposals\n\nTo propose a change or new feature, review the guidance on [Submitting a New Feature](https://github.com/CommunityToolkit/Maui#submitting-a-new-feature).\n\n#### Non-Starter Topics\nThe following topics should generally not be proposed for discussion as they are non-starters:\n\n* Large renames of APIs\n* Large non-backward-compatible breaking changes\n* Platform-Specifics which can be accomplished without changing the .NET MAUI Community Toolkit\n* Avoid clutter posts like \"+1\" which do not serve to further the conversation, please use the emoji resonses for that\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 13.1318359375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Project>\n  <PropertyGroup>\n    <Nullable>enable</Nullable>\n    <NoWarn>NETSDK1023</NoWarn>\n    <NetVersion>net9.0</NetVersion>\n    <LangVersion>preview</LangVersion>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>\n    <ProduceReferenceAssembly>true</ProduceReferenceAssembly>\n    <AccelerateBuildsInVisualStudio>true</AccelerateBuildsInVisualStudio>\n    <GenerateErrorForMissingTargetingPacks>false</GenerateErrorForMissingTargetingPacks>\n\n    <!-- Prevent NuGet Package Vulnerabilities -->\n    <NuGetAudit>enable</NuGetAudit>\n    <NuGetAuditMode>all</NuGetAuditMode>\n\n    <!-- MAUI Specific -->\n    <MauiPackageVersion>9.0.21</MauiPackageVersion>\n    <NextMauiPackageVersion>10.0.0</NextMauiPackageVersion>\n    <MauiStrictXamlCompilation>true</MauiStrictXamlCompilation>\n    <SkipValidateMauiImplicitPackageReferences>true</SkipValidateMauiImplicitPackageReferences>\n    <MauiEnableXamlCBindingWithSourceCompilation>true</MauiEnableXamlCBindingWithSourceCompilation>\n\n    <!-- https://learn.microsoft.com/dotnet/core/deploying/native-aot/?tabs=net8plus%2Cwindows -->\n    <StripSymbols>false</StripSymbols>\n    <TrimmerSingleWarn>false</TrimmerSingleWarn>\n\n    <!-- WarningsAsErrors\n     CS0419: Ambiguous reference in cref attribute \n     CS1570: XML comment has badly formed XML 'Expected an end tag for element [parameter] \n     CS1571: XML comment on [construct] has a duplicate param tag for [parameter] \n     CS1572: XML comment has a param tag for '[parameter]', but there is no parameter by that name \n     CS1573: Parameter has no matching param tag in the XML comment \n     CS1574: XML comment has cref attribute that could not be resolved \n     CS1580: Invalid type for parameter 'parameter number' in XML comment cref attribute \n     CS1581: Invalid return type in XML comment cref attribute \n     CS1584: XML comment has syntactically incorrect cref attribute\n     CS1587: XML comment is not placed on a valid language element \n     CS1589: The syntax of a tag which referenced a file was incorrect \n     CS1590: Invalid XML include element Missing file attribute \n     CS1591: Missing XML comment for publicly visible type or member\n     CS1592: Badly formed XML in included comments file \n     CS1598: XML parser could not be loaded. The XML documentation file will not be generated. \n     CS1658: Identifier expected; 'true' is a keyword\n     CS1710: XML comment on 'type' has a duplicate typeparam tag for 'parameter'\n     CS1711: XML comment has a typeparam tag, but there is no type parameter by that name \n     CS1712: Type parameter has no matching typeparam tag in the XML comment\n     CS1723: XML comment has cref attribute that refers to a type parameter\n     CS1734: XML comment has a paramref tag, but there is no parameter by that name\n     MVMTK0042: The field [ObservableProperty] can be converted to a partial property\n     CsWinRT1028: Class implements WinRT interfaces but isn't marked partial\n     CsWinRT1030: Class implements WinRT interfaces that require unsafe code\n     NU1900\tError communicating with package source, while getting vulnerability information.\n     NU1901\tPackage with low severity detected\n     NU1902\tPackage with moderate severity detected\n     NU1903\tPackage with high severity detected\n     NU1904\tPackage with critical severity detected\n     NU1905\tAn audit source does not provide a vulnerability database\n     xUnit1000: Test classes must be public\n     xUnit1001: Fact methods cannot have parameters\n     xUnit1002: Test methods cannot have multiple Fact or Theory attributes\n     xUnit1003: Theory methods must have test data\n     xUnit1004: Test methods should not be skipped\n     xUnit1005: Fact methods should not have test data\n     xUnit1006: Theory methods should have parameters\n     xUnit1007: ClassData must point at a valid class\n     xUnit1008: Test data attribute should only be used on a Theory\n     xUnit1009: InlineData values must match the number of method parameters\n     xUnit1010: The value is not convertible to the method parameter type\n     xUnit1011: There is no matching method parameter\n     xUnit1012: Null should not be used for value type parameters\n     xUnit1013: Public method should be marked as test\n     xUnit1014: MemberData should use nameof operator for member name\n     xUnit1015: MemberData must reference an existing member\n     xUnit1016: MemberData must reference a public member\n     xUnit1017: MemberData must reference a static member\n     xUnit1018: MemberData must reference a valid member kind\n     xUnit1019: MemberData must reference a member providing a valid data type\n     xUnit1020: MemberData must reference a property with a getter\n     xUnit1021: MemberData should not have parameters if the referenced member is not a method\n     xUnit1022: Theory methods cannot have a parameter array\n     xUnit1023: Theory methods cannot have default parameter values\n     xUnit1024: Test methods cannot have overloads\n     xUnit1025: InlineData should be unique within the Theory it belongs to\n     xUnit1026: Theory methods should use all of their parameters\n     xUnit1027: Collection definition classes must be public\n     xUnit1028: Test method must have valid return type\n     xUnit1029: Local functions cannot be test functions\n     xUnit1030: Do not call ConfigureAwait in test method\n     xUnit1031: Do not use blocking task operations in test method\n     xUnit1032: Test classes cannot be nested within a generic class\n     xUnit1033: Test classes decorated with 'Xunit.IClassFixture' or 'Xunit.ICollectionFixture' should add a constructor argument of type TFixture\n     xUnit1034: Null should only be used for nullable parameters\n     xUnit1035: The value is not convertible to the method parameter type\n     xUnit1036: There is no matching method parameter\n     xUnit1037: There are fewer theory data type arguments than required by the parameters of the test method\n     xUnit1038: There are more theory data type arguments than allowed by the parameters of the test method\n     xUnit1039: The type argument to theory data is not compatible with the type of the corresponding test method parameter\n     xUnit1040: The type argument to theory data is nullable, while the type of the corresponding test method parameter is not\n     xUnit1041:\tFixture arguments to test classes must have fixture sources\n     xUnit1042: The member referenced by the MemberData attribute returns untyped data rows\n     xUnit1043: Constructors on classes derived from FactAttribute must be public when used on test methods\n     xUnit1048: Avoid using 'async void' for test methods as it is deprecated in xUnit.net v3\n     xUnit1049: Do not use 'async void' for test methods as it is no longer supported\n     xUnit1050: The class referenced by the ClassData attribute returns untyped data rows\n     xUnit1051: Calls to methods which accept CancellationToken should use TestContext.Current.CancellationToken\n     xUnit2000: Constants and literals should be the expected argument\n     xUnit2001: Do not use invalid equality check\n     xUnit2002: Do not use null check on value type\n     xUnit2003: Do not use equality check to test for null value\n     xUnit2004: Do not use equality check to test for boolean conditions\n     xUnit2005: Do not use identity check on value type\n     xUnit2006: Do not use invalid string equality check\n     xUnit2007: Do not use typeof expression to check the type\n     xUnit2008: Do not use boolean check to match on regular expressions\n     xUnit2009: Do not use boolean check to check for substrings\n     xUnit2010: Do not use boolean check to check for string equality\n     xUnit2011: Do not use empty collection check\n     xUnit2012: Do not use Enumerable.Any() to check if a value exists in a collection\n     xUnit2013: Do not use equality check to check for collection size.\n     xUnit2014:\tDo not use throws check to check for asynchronously thrown exception\n     xUnit2015:\tDo not use typeof expression to check the exception type\n     xUnit2016:\tKeep precision in the allowed range when asserting equality of doubles or decimals.\n     xUnit2017:\tDo not use Contains() to check if a value exists in a collection\n     xUnit2018:\tDo not compare an object's exact type to an abstract class or interface\n     xUnit2019:\tDo not use obsolete throws check to check for asynchronously thrown exception\n     xUnit2020:\tDo not use always-failing boolean assertion to fail a test\n     xUnit2021:\tAsync assertions should be awaited\n     xUnit2022:\tBoolean assertions should not be negated\n     xUnit2023:\tDo not use collection methods for single-item collections\n     xUnit2024:\tDo not use boolean asserts for simple equality tests\n     xUnit2025:\tThe boolean assertion statement can be simplified\n     xUnit2026:\tComparison of sets must be done with IEqualityComparer\n     xUnit2027:\tComparison of sets to linear containers have undefined results\n     xUnit2028:\tDo not use Assert.Empty or Assert.NotEmpty with problematic types\n     xUnit2029:\tDo not use Assert.Empty to check if a value does not exist in a collection\n     xUnit2030:\tDo not use Assert.NotEmpty to check if a value exists in a collection\n     xUnit2031:\tDo not use Where clause with Assert.Single\n     xUnit2032:\tType assertions based on 'assignable from' are confusingly named\n     xUnit3000: Classes which cross AppDomain boundaries must derive directly or indirectly from LongLivedMarshalByRefObject\n     xUnit3001: Classes that are marked as serializable (or created by the test framework at runtime) must have a public parameterless constructor\n     xUnit3002: Classes which are JSON serializable should not be tested for their concrete type\n     XC0045: Binding: Property not found\n     XC0103: Consider attributing the markup extension with [RequireService] or [AcceptEmptyServiceProvider] if it doesn't require any\n     IL2***: Trim Warnings     \n     IL3***: AOT Warnings     \n     RS2007: Analyzer release file 'AnalyzerReleases.Shipped.md' has a missing or invalid release header-->\n    <WarningsAsErrors>\n      nullable,\n      CS0419,CS1570,CS1571,CS1572,CS1573,CS1574,CS1580,CS1581,CS1584,CS1587,CS1589,CS1590,CS1591,CS1592,CS1598,CS1658,CS1710,CS1711,CS1712,CS1723,CS1734,\n      CsWinRT1028,CsWinRT1030,\n      MVMTK0042,\n      NU1900,NU1901,NU1902,NU1903,NU1904,NU1905,\n      xUnit1000,xUnit1001,xUnit1002,xUnit1003,xUnit1004,xUnit1005,xUnit1006,xUnit1007,xUnit1008,xUnit1009,xUnit1010,xUnit1011,xUnit1012,xUnit1013,xUnit1014,xUnit1015,xUnit1016,xUnit1017,xUnit1018,xUnit1019,xUnit1020,xUnit1021,xUnit1022,xUnit1023,xUnit1024,xUnit1025,xUnit1026,xUnit1027,xUnit1028,xUnit1029,xUnit1030,xUnit1031,xUnit1032,xUnit1033,xUnit1034,xUnit1035,xUnit1036,xUnit1037,xUnit1038,xUnit1039,xUnit1040,xUnit1041,xUnit1042,xUnit1043,xUnit1048,xUnit1049,xUnit1050,xUnit1051,\n      xUnit2000,xUnit2001,xUnit2002,xUnit2003,xUnit2004,xUnit2005,xUnit2006,xUnit2007,xUnit2008,xUnit2009,xUnit2010,xUnit2011,xUnit2012,xUnit2013,xUnit2014,xUnit2015,xUnit2016,xUnit2017,xUnit2018,xUnit2019,xUnit2020,xUnit2021,xUnit2022,xUnit2023,xUnit2024,xUnit2025,xUnit2026,xUnit2027,xUnit2028,xUnit2029,xUnit2030,xUnit2031,xUnit2032,\n      xUnit3000,xUnit3001,xUnit3002,\n      XC0045,XC0103,\n      IL2001,IL2002,IL2003,IL2004,IL2005,IL2006,IL2007,IL2008,IL2009,\n      IL2010,IL2011,IL2012,IL2013,IL2014,IL2015,IL2016,IL2017,IL2018,IL2019,\n      IL2020,IL2021,IL2022,IL2023,IL2024,IL2025,IL2026,IL2027,IL2028,IL2029,\n      IL2030,IL2031,IL2032,IL2033,IL2034,IL2035,IL2036,IL2037,IL2038,IL2039,\n      IL2040,IL2041,IL2042,IL2043,IL2044,IL2045,IL2046,IL2047,IL2048,IL2049,\n      IL2050,IL2051,IL2052,IL2053,IL2054,IL2055,IL2056,IL2057,IL2058,IL2059,\n      IL2060,IL2061,IL2062,IL2063,IL2064,IL2065,IL2066,IL2067,IL2068,IL2069,\n      IL2070,IL2071,IL2072,IL2073,IL2074,IL2075,IL2076,IL2077,IL2078,IL2079,\n      IL2080,IL2081,IL2082,IL2083,IL2084,IL2085,IL2086,IL2087,IL2088,IL2089,\n      IL2090,IL2091,IL2092,IL2093,IL2094,IL2095,IL2096,IL2097,IL2098,IL2099,\n      IL2100,IL2101,IL2102,IL2103,IL2104,IL2105,IL2106,IL2107,IL2108,IL2109,\n      IL2110,IL2111,IL2112,IL2113,IL2114,IL2115,IL2116,IL2117,IL2118,IL2119,\n      IL2120,IL2121,IL2122,\n      IL3050,IL3051,IL3052,IL3053,IL3054,IL3055,IL3056,\n      RS2007\n    </WarningsAsErrors>\n  </PropertyGroup>\n\n  <!-- Required for NuGet Source Link -->\n  <PropertyGroup Condition=\"'$(TF_BUILD)' == 'true' OR '$(GITHUB_ACTIONS)' == 'true'\">\n    <!--  Ensure deterministic build when using Azure Pipelines or GitHub Actions-->\n    <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>\n\n    <!-- Publish the repository URL in the built .nupkg (in the NuSpec <Repository> element) -->\n    <PublishRepositoryUrl>true</PublishRepositoryUrl>\n\n    <!-- Embed source files that are not tracked by the source control manager in the PDB -->\n    <EmbedUntrackedSources>true</EmbedUntrackedSources>\n\n    <!-- Embed symbols containing Source Link in the main file (exe/dll) -->\n    <DebugType>embedded</DebugType>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <InternalsVisibleTo Include=\"CommunityToolkit.Maui.UnitTests\"/>\n    <InternalsVisibleTo Include=\"CommunityToolkit.Maui.Analyzers.UnitTests\"/>\n  </ItemGroup>\n\n  <PropertyGroup Condition=\"('$(TF_BUILD)' == 'true' OR '$(GITHUB_ACTIONS)' == 'true') and $([MSBuild]::IsOSPlatform('windows')) == 'true'\">\n    <IncludeTizenTargetFrameworks>true</IncludeTizenTargetFrameworks>\n  </PropertyGroup>\n</Project>\n"
        },
        {
          "name": "Directory.Build.targets",
          "type": "blob",
          "size": 3.203125,
          "content": "﻿<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Project>\n  <ItemGroup Condition=\"$(TargetFramework.StartsWith('Xamarin.iOS')) != true AND $(TargetFramework.StartsWith('$(NetVersion)-ios')) != true\">\n    <Compile Remove=\"**\\**\\*.ios.cs\" />\n    <None Include=\"**\\**\\*.ios.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n    <Compile Remove=\"**\\ios\\**\\*.cs\" />\n    <None Include=\"**\\ios\\**\\*.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n  </ItemGroup>\n  <ItemGroup Condition=\"$(TargetFramework.StartsWith('Xamarin.Mac')) != true AND $(TargetFramework.StartsWith('$(NetVersion)-maccatalyst')) != true\">\n    <Compile Remove=\"**\\*.macos.cs\" />\n    <None Include=\"**\\*.macos.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n    <Compile Remove=\"**\\macos\\**\\*.cs\" />\n    <None Include=\"**\\macos\\**\\*.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n  </ItemGroup>\n  <ItemGroup Condition=\"$(TargetFramework.StartsWith('Xamarin.Mac')) != true AND $(TargetFramework.StartsWith('Xamarin.iOS')) != true AND $(TargetFramework.StartsWith('$(NetVersion)-ios')) != true AND $(TargetFramework.StartsWith('$(NetVersion)-maccatalyst')) != true\">\n    <Compile Remove=\"**\\*.macios.cs\" />\n    <None Include=\"**\\*.macios.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n    <Compile Remove=\"**\\macios\\**\\*.cs\" />\n    <None Include=\"**\\macios\\**\\*.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n  </ItemGroup>\n  <ItemGroup Condition=\"$(TargetFramework.StartsWith('MonoAndroid')) != true AND $(TargetFramework.StartsWith('$(NetVersion)-android')) != true \">\n    <Compile Remove=\"**\\**\\*.android.cs\" />\n    <None Include=\"**\\**\\*.android.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n    <Compile Remove=\"**\\android\\**\\*.cs\" />\n    <None Include=\"**\\android\\**\\*.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n  </ItemGroup>\n  <ItemGroup Condition=\"$(TargetFramework.Contains('-windows')) != true \">\n    <Compile Remove=\"**\\*.windows.cs\" />\n    <None Include=\"**\\*.windows.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n    <Compile Remove=\"**\\windows\\**\\*.cs\" />\n    <None Include=\"**\\windows\\**\\*.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n  </ItemGroup>\n  <ItemGroup Condition=\"$(TargetFramework.Contains('-tizen')) != true \">\n    <Compile Remove=\"**\\*.tizen.cs\" />\n    <None Include=\"**\\*.tizen.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n    <Compile Remove=\"**\\tizen\\**\\*.cs\" />\n    <None Include=\"**\\tizen\\**\\*.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n  </ItemGroup> \n  <ItemGroup Condition=\"!($(TargetFramework.StartsWith('net')) == true AND $(TargetFramework.EndsWith('.0')) == true AND $(TargetFramework.Contains('-')) != true)\"> <!-- e.g net6.0 or net7.0 -->\n    <Compile Remove=\"**\\*.net.cs\" />\n    <None Include=\"**\\*.net.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n    <Compile Remove=\"**\\net\\**\\*.cs\" />\n    <None Include=\"**\\net\\**\\*.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n  </ItemGroup>\n</Project>"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0849609375,
          "content": "The MIT License (MIT)\nCopyright (c) .NET Foundation and Contributors\nAll Rights Reserved\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.2919921875,
          "content": "<img src=\"https://user-images.githubusercontent.com/13558917/137551073-ac8958bf-83e3-4ae3-8623-4db6dce49d02.png\" alt=\"..NET Bot\" width=125>  [<img src=\"https://raw.githubusercontent.com/dotnet-foundation/swag/master/logo/dotnetfoundation_v4.svg\" alt=\".NET Foundation\" width=100>](https://dotnetfoundation.org) \n\n[![Build Status](https://dev.azure.com/dotnet/CommunityToolkit/_apis/build/status/CommunityToolkit.Maui?branchName=main)](https://dev.azure.com/dotnet/CommunityToolkit/_build/latest?definitionId=169&branchName=main) [![NuGet Version](https://img.shields.io/nuget/vpre/CommunityToolkit.Maui)](https://www.nuget.org/packages/CommunityToolkit.Maui) [![NuGet Downloads](https://img.shields.io/nuget/dt/CommunityToolkit.Maui)](https://www.nuget.org/packages/CommunityToolkit.Maui)\n\n# .NET MAUI Community Toolkit\n\nThe .NET MAUI Community Toolkit is a collection of common elements for development with .NET MAUI that developers tend to replicate across multiple apps. It simplifies and demonstrates common developer tasks when building apps with .NET MAUI. \n\nAll features are contributed by you, our amazing .NET community, and maintained by a core set of maintainers.\n\nAnd – the best part – the features you add to the .NET MAUI Toolkit may one day be included into the official .NET MAUI library! We leverage the Community Toolkits to debut new features and work closely with the .NET MAUI engineering team to nominate features for promotion.\n\n## Documentation\n\n<a href=\"https://learn.microsoft.com/dotnet/communitytoolkit/maui/get-started?tabs=CommunityToolkitMaui\"><img width=\"200\" alt=\"image\" src=\"https://user-images.githubusercontent.com/13558917/232885041-35b62d65-26d3-44a7-a525-5239ac811498.png\"></a>\n\nAll of the [documentation](https://learn.microsoft.com/dotnet/communitytoolkit/maui/get-started?tabs=CommunityToolkitMaui) for `CommunityToolkit.Maui` can be found here on [Microsoft Learn](https://learn.microsoft.com/dotnet/communitytoolkit/maui/get-started?tabs=CommunityToolkitMaui):\n\nhttps://learn.microsoft.com/dotnet/communitytoolkit/maui/get-started\n\n## Getting Started\n\nIn order to use the .NET MAUI Community Toolkit you need to call the extension method in your `MauiProgram.cs` file as follows:\n\n```csharp\nusing CommunityToolkit.Maui;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseMauiApp<App>()\n\t\t\t// Initialize the .NET MAUI Community Toolkit by adding the below line of code\n\t\t\t.UseMauiCommunityToolkit()\n\t\t\t// After initializing the .NET MAUI Community Toolkit, optionally add additional fonts\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t\tfonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n\t\t\t});\n\n\t\t// Continue initializing your .NET MAUI App here\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n### XAML usage\n\nIn order to make use of the toolkit within XAML you can use this namespace:\n\n```xml\nxmlns:toolkit=\"http://schemas.microsoft.com/dotnet/2022/maui/toolkit\"\n```\n\n## Roadmap / Plan\n\nAll work carried out on the toolkit is done so by the community and the core maintainers in our spare time on nights and weekends. Due to this reason we do not have a concrete plan on when features will be added and delivered. What we do have is a list of proposals and a [Project board](https://github.com/CommunityToolkit/Maui/projects/1) which summarises they states. Please feel free to check them out and jump in to providing any assistance that you feel you can.\n\n## Submitting A New Feature\n\nNew features will follow the below workflow, described in more detail in the steps below\n\n[![New Feature Workflow](https://user-images.githubusercontent.com/13558917/160910778-1e61f478-f1f6-48b4-8d37-8016eae1bd12.png)](./build/workflow.sketch)\n\n### 1. Discussion Started\n\nDebate pertaining to new Maui Toolkit features takes place in the form of [Discussions](https://github.com/communitytoolkit/maui/discussions) in this repo.\n\nIf you want to suggest a feature, discuss current design notes or proposals, etc., please [open a new Discussion topic](https://github.com/communitytoolkit/maui/discussions/new).\n\nDiscussions that are short and stay on topic are much more likely to be read. If you leave comment number fifty, chances are that only a few people will read it. To make discussions easier to navigate and benefit from, please observe a few rules of thumb:\n\n- Discussion should be relevant to the .NET MAUI Toolkit. If they are not, they will be summarily closed.\n- Choose a descriptive topic that clearly communicates the scope of discussion.\n- Stick to the topic of the discussion. If a comment is tangential, or goes into detail on a subtopic, start a new discussion and link back.\n- Is your comment useful for others to read, or can it be adequately expressed with an emoji reaction to an existing comment?\n\n### 2. Proposal Submitted\nOnce you have a fully fleshed out proposal describing a new feature in syntactic and semantic detail, please [open an issue for it](https://github.com/communitytoolkit/maui/issues/new/choose), and it will be labeled as a [Proposal](https://github.com/communitytoolkit/maui/issues?q=is%3Aopen+is%3Aissue+label%3Aproposal). The comment thread on the issue can be used to hash out or briefly discuss details of the proposal, as well as pros and cons of adopting it into the .NET MAUI Toolkit. If an issue does not meet the bar of being a full proposal, we may move it to a discussion, so that it can be further matured. Specific open issues or more expansive discussion with a proposal will often warrant opening a side discussion rather than cluttering the comment section on the issue.\n\n### 3. Proposal Championed\nWhen a member of the .NET MAUI Toolkit core team finds that a proposal merits promotion into the Toolkit, they can [Champion](https://github.com/communitytoolkit/maui/issues?q=is%3Aopen+is%3Aissue+label%3A%22proposal+champion%22) it, which means that they will bring it to the monthly [.NET MAUI Toolkit Community Standup](https://www.youtube.com/watch?v=0ZBh2Hl54ZY). \n\n### 4. Proposal Approved\nThe .NET MAUI Toolkit core team will collectively vote to work on adopting and/or modifying the proposal, requiring a majority approval (i.e. greater than 50%) to be added to the Toolkit.\n\nOnce a Proposal has been championed and has received a majority approval from the .NET MAUI Toolkit core team, a Pull Request can be opened.\n\n### 5. Pull Request Approved\nAfter a Pull Request has been submitted, it will be reviewed and approved by the Proposal Champion. \n\nEvery new feature also requires an associated sample to be added to the .NET MAUI Toolkit Sample app.\n\n### 6. Documentation Complete \nBefore a Pull Request can be merged into the .NET MAUI Toolkit, the Pull Request Author must also submit the documentation to [documentation repository](https://github.com/MicrosoftDocs/CommunityToolkit).\n\n### 7. Completed\nOnce a Pull Request has been reviewed + approved AND the documentation has been written, submitted and approved, the new feature will be merged adding it to the .NET MAUI Toolkit\n\n## Code of Conduct\nAs a part of the .NET Foundation, we have adopted the [.NET Foundation Code of Conduct](https://dotnetfoundation.org/code-of-conduct). Please familiarize yourself with that before participating with this repository. Thanks!\n\n## .NET Foundation\nThis project is supported by the [.NET Foundation](https://dotnetfoundation.org).\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 26.228515625,
          "content": "variables:\n  CurrentSemanticVersionBase: '99.0.0'\n  PreviewNumber: $[counter(variables['CurrentSemanticVersionBase'], 1001)]\n  CurrentSemanticVersion: '$(CurrentSemanticVersionBase)-preview$(PreviewNumber)'\n  NugetPackageVersion: '$(CurrentSemanticVersion)'\n  NugetPackageVersionCamera: '$(CurrentSemanticVersion)'\n  NugetPackageVersionMediaElement: '$(CurrentSemanticVersion)'\n  NugetPackageVersionMaps: '$(CurrentSemanticVersion)'\n  TOOLKIT_NET_VERSION: '9.0.101'\n  LATEST_NET_VERSION: '9.0.x'\n  PathToLibrarySolution: 'src/CommunityToolkit.Maui.sln'\n  PathToSamplesSolution: 'samples/CommunityToolkit.Maui.Sample.sln'\n  PathToCommunityToolkitCsproj: 'src/CommunityToolkit.Maui/CommunityToolkit.Maui.csproj'\n  PathToCommunityToolkitCoreCsproj: 'src/CommunityToolkit.Maui.Core/CommunityToolkit.Maui.Core.csproj'\n  PathToCommunityToolkitCameraCsproj: 'src/CommunityToolkit.Maui.Camera/CommunityToolkit.Maui.Camera.csproj'\n  PathToCommunityToolkitMediaElementCsproj: 'src/CommunityToolkit.Maui.MediaElement/CommunityToolkit.Maui.MediaElement.csproj'\n  PathToCommunityToolkitMapsCsproj: 'src/CommunityToolkit.Maui.Maps/CommunityToolkit.Maui.Maps.csproj'\n  PathToCommunityToolkitSampleCsproj: 'samples/CommunityToolkit.Maui.Sample/CommunityToolkit.Maui.Sample.csproj'\n  PathToCommunityToolkitUnitTestCsproj: 'src/CommunityToolkit.Maui.UnitTests/CommunityToolkit.Maui.UnitTests.csproj'\n  PathToCommunityToolkitAnalyzersCsproj: 'src/CommunityToolkit.Maui.Analyzers/CommunityToolkit.Maui.Analyzers.csproj'\n  PathToCommunityToolkitCameraAnalyzersCsproj: 'src/CommunityToolkit.Maui.Camera.Analyzers/CommunityToolkit.Maui.Camera.Analyzers.csproj'\n  PathToCommunityToolkitMediaElementAnalyzersCsproj: 'src/CommunityToolkit.Maui.MediaElement.Analyzers/CommunityToolkit.Maui.MediaElement.Analyzers.csproj'\n  PathToCommunityToolkitSourceGeneratorsCsproj: 'src/CommunityToolkit.Maui.SourceGenerators/CommunityToolkit.Maui.SourceGenerators.csproj'\n  PathToCommunityToolkitSourceGeneratorsInternalCsproj: 'src/CommunityToolkit.Maui.SourceGenerators.Internal/CommunityToolkit.Maui.SourceGenerators.Internal.csproj'\n  PathToCommunityToolkitAnalyzersCodeFixCsproj: 'src/CommunityToolkit.Maui.Analyzers.CodeFixes/CommunityToolkit.Maui.Analyzers.CodeFixes.csproj'\n  PathToCommunityToolkitCameraAnalyzersCodeFixCsproj: 'src/CommunityToolkit.Maui.Camera.Analyzers.CodeFixes/CommunityToolkit.Maui.Camera.Analyzers.CodeFixes.csproj'\n  PathToCommunityToolkitMediaElementAnalyzersCodeFixCsproj: 'src/CommunityToolkit.Maui.MediaElement.Analyzers.CodeFixes/CommunityToolkit.Maui.MediaElement.Analyzers.CodeFixes.csproj'\n  PathToCommunityToolkitAnalyzersUnitTestCsproj: 'src/CommunityToolkit.Maui.Analyzers.UnitTests/CommunityToolkit.Maui.Analyzers.UnitTests.csproj'\n  PathToCommunityToolkitAnalyzersBenchmarkCsproj: 'src/CommunityToolkit.Maui.Analyzers.Benchmarks/CommunityToolkit.Maui.Analyzers.Benchmarks.csproj'\n  DotNetMauiRollbackFile: 'https://maui.blob.core.windows.net/metadata/rollbacks/8.0.6.json'\n  CommunityToolkitSampleApp_Xcode_Version: '16.2'\n  CommunityToolkitLibrary_Xcode_Version: '16.1'\n\ntrigger:\n  branches:\n    include:\n    - main\n    - develop\n  tags:\n    include:\n    - '*'\n  paths:\n    exclude:\n    - README.md\n\npr:\n  autoCancel: 'true'\n  branches:\n    include:\n    - main\n    - develop\n  paths:\n    exclude:\n    - README.md\n\njobs:\n  - job: build_sample\n    displayName: Build Sample App using Latest .NET SDK\n    strategy:\n      matrix:\n        'Windows':\n          image: 'windows-latest'\n        'macOS':\n          image: 'macos-15'\n    pool:\n      vmImage: $(image)\n    steps:\n      - task: CmdLine@2\n        displayName: 'Set Xcode v$(CommunityToolkitSampleApp_Xcode_Version)'\n        condition: eq(variables['Agent.OS'], 'Darwin') # Only run this step on macOS\n        inputs:\n          script: |\n            echo Installed Xcode Versions:\n            ls -al  /Applications | grep Xcode\n            echo '##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]'/Applications/Xcode_$(CommunityToolkitSampleApp_Xcode_Version).app;sudo xcode-select --switch /Applications/Xcode_$(CommunityToolkitSampleApp_Xcode_Version).app/Contents/Developer\n\n      - task: UseDotNet@2\n        displayName: 'Install Latest .NET SDK, v$(LATEST_NET_VERSION)'\n        inputs:\n          packageType: 'sdk'\n          version: '$(LATEST_NET_VERSION)'\n          includePreviewVersions: false\n\n      - task: CmdLine@2\n        displayName: 'Install Latest .NET MAUI Workload'\n        inputs:\n          script: |\n            dotnet workload install maui\n            dotnet workload update\n\n      - powershell: |\n          Invoke-WebRequest 'https://raw.githubusercontent.com/Samsung/Tizen.NET/main/workload/scripts/workload-install.ps1' -OutFile 'workload-install.ps1'\n          .\\workload-install.ps1\n        displayName: Install Tizen Workload\n\n      # Print Information on the .NET SDK Used By the CI Build Host\n      # These logs are useful information when debugging CI Builds\n      # Note: This step doesn't execute nor modify any code; it is strictly used for logging + debugging purposes\n      - task: CmdLine@2\n        displayName: 'Display dotnet --info'\n        inputs:\n          script: dotnet --info\n\n      - task: CmdLine@2\n        displayName: 'Build CommunityToolkit.Maui.Analyzers'\n        inputs:\n          script: 'dotnet build -c Release $(PathToCommunityToolkitAnalyzersCsproj)'\n\n      - task: CmdLine@2\n        displayName: 'Build CommunityToolkit.Maui.Analyzers.CodeFixes'\n        inputs:\n          script: 'dotnet build -c Release $(PathToCommunityToolkitAnalyzersCodeFixCsproj)'\n\n      - task: CmdLine@2\n        displayName: 'Build CommunityToolkit.Maui.MediaElement.Analyzers'\n        inputs:\n          script: 'dotnet build -c Release $(PathToCommunityToolkitMediaElementAnalyzersCsproj)'\n\n      - task: CmdLine@2\n        displayName: 'Build CommunityToolkit.Maui.MediaElement.Analyzers.CodeFixes'\n        inputs:\n          script: 'dotnet build -c Release $(PathToCommunityToolkitMediaElementAnalyzersCodeFixCsproj)'\n\n      - task: CmdLine@2\n        displayName: 'Build CommunityToolkit.Maui.SourceGenerators'\n        inputs:\n          script: 'dotnet build -c Release $(PathToCommunityToolkitSourceGeneratorsCsproj)'\n\n      - task: CmdLine@2\n        displayName: 'Build CommunityToolkit.SourceGenerators.Internal'\n        inputs:\n          script: 'dotnet build -c Release $(PathToCommunityToolkitSourceGeneratorsInternalCsproj)'\n\n      # build sample\n      - task: CmdLine@2\n        displayName: 'Build Community Toolkit Sample'\n        inputs:\n          script: 'dotnet build $(PathToCommunityToolkitSampleCsproj) -c Release'\n\n  - job: build_library\n    displayName: Build Library\n    strategy:\n      matrix:\n        'Windows':\n          image: 'windows-latest'\n        'macOS':\n          image: 'macos-15'\n    pool:\n      vmImage: $(image)\n    steps:\n      # if this is a tagged build for CommunityToolkit.Maui, then update the version number\n      - powershell: |\n          $buildSourceBranch = \"$(Build.SourceBranch)\"\n          $tagVersion = $buildSourceBranch.Substring($buildSourceBranch.LastIndexOf(\"/\") + 1)\n          Write-Host(\"Branch = $buildSourceBranch, Version = $tagVersion\");\n          Write-Host (\"##vso[task.setvariable variable=NugetPackageVersion;]$tagVersion\")\n        displayName: Set NuGet Version to Tag Number\n        condition: and(startsWith(variables['Build.SourceBranch'], 'refs/tags/'), not(endsWith(variables['Build.SourceBranch'], '-mediaelement'))) # Only run this step when a Tag has triggered the CI Pipeline\n\n      # if this is a tagged build for CommunityToolkit.Maui.Camera, then update the version number\n      - powershell: |\n          $buildSourceBranch = \"$(Build.SourceBranch)\"\n          $tagVersion = $buildSourceBranch.Substring($buildSourceBranch.LastIndexOf(\"/\") + 1)\n          $tagVersion = $tagVersion.Substring(0, $tagVersion.LastIndexOf(\"-\"))\n          Write-Host(\"Branch = $buildSourceBranch, Version = $tagVersion\");\n          Write-Host (\"##vso[task.setvariable variable=NugetPackageVersionCamera;]$tagVersion\")\n        displayName: Set NuGet Version to Tag Number\n        condition: and(startsWith(variables['Build.SourceBranch'], 'refs/tags/'), endsWith(variables['Build.SourceBranch'], '-camera')) # Only run this step when a Tag has triggered the CI Pipeline\n\n      # if this is a tagged build for CommunityToolkit.Maui.MediaElement, then update the version number\n      - powershell: |\n          $buildSourceBranch = \"$(Build.SourceBranch)\"\n          $tagVersion = $buildSourceBranch.Substring($buildSourceBranch.LastIndexOf(\"/\") + 1)\n          $tagVersion = $tagVersion.Substring(0, $tagVersion.LastIndexOf(\"-\"))\n          Write-Host(\"Branch = $buildSourceBranch, Version = $tagVersion\");\n          Write-Host (\"##vso[task.setvariable variable=NugetPackageVersionMediaElement;]$tagVersion\")\n        displayName: Set NuGet Version to Tag Number\n        condition: and(startsWith(variables['Build.SourceBranch'], 'refs/tags/'), endsWith(variables['Build.SourceBranch'], '-mediaelement')) # Only run this step when a Tag has triggered the CI Pipeline\n\n      # if this is a tagged build for CommunityToolkit.Maui.Maps, then update the version number\n      - powershell: |\n          $buildSourceBranch = \"$(Build.SourceBranch)\"\n          $tagVersion = $buildSourceBranch.Substring($buildSourceBranch.LastIndexOf(\"/\") + 1)\n          $tagVersion = $tagVersion.Substring(0, $tagVersion.LastIndexOf(\"-\"))\n          Write-Host(\"Branch = $buildSourceBranch, Version = $tagVersion\");\n          Write-Host (\"##vso[task.setvariable variable=NugetPackageVersionMaps;]$tagVersion\")\n        displayName: Set NuGet Version to Tag Number\n        condition: and(startsWith(variables['Build.SourceBranch'], 'refs/tags/'), endsWith(variables['Build.SourceBranch'], '-maps')) # Only run this step when a Tag has triggered the CI Pipeline\n\n      # if this is a PR build, then update the version number\n      - powershell: |\n          $prNumber = $env:System_PullRequest_PullRequestNumber\n          $commitId = \"$($env:System_PullRequest_SourceCommitId)\".Substring(0, 7)\n          $fullVersionString = \"$(CurrentSemanticVersionBase)-build-$prNumber.$(Build.BuildId)+$commitId\"\n          Write-Host(\"GitHub PR = $prNumber, Commit = $commitId\");\n          Write-Host (\"##vso[task.setvariable variable=NugetPackageVersion;]$fullVersionString\")\n          Write-Host (\"##vso[task.setvariable variable=NugetPackageVersionMediaElement;]$fullVersionString\")\n          Write-Host (\"##vso[task.setvariable variable=NugetPackageVersionMaps;]$fullVersionString\")\n          Write-Host \"##vso[build.updatebuildnumber]$fullVersionString\"\n        displayName: Set NuGet Version to PR Version\n        condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['build.reason'], 'PullRequest')) # Only run this step on Windows when a Pull Request has triggered the CI Pipeline\n      \n      - task: CmdLine@2\n        displayName: 'Set Xcode v$(CommunityToolkitLibrary_Xcode_Version)'\n        condition: eq(variables['Agent.OS'], 'Darwin') # Only run this step on macOS\n        inputs:\n          script: |\n            echo Installed Xcode Versions:\n            ls -al  /Applications | grep Xcode\n            echo '##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]'/Applications/Xcode_$(CommunityToolkitLibrary_Xcode_Version).app;sudo xcode-select --switch /Applications/Xcode_$(CommunityToolkitLibrary_Xcode_Version).app/Contents/Developer\n\n      - task: UseDotNet@2\n        displayName: Install .NET v$(TOOLKIT_NET_VERSION)\n        inputs:\n          packageType: 'sdk'\n          version: '$(TOOLKIT_NET_VERSION)'\n          includePreviewVersions: false\n\n      - task: CmdLine@2\n        displayName: 'Install .NET MAUI Workload $(TOOLKIT_NET_VERSION)'\n        inputs:\n          script: |\n            dotnet workload install maui\n            dotnet workload update\n\n      - powershell: |\n          Invoke-WebRequest 'https://raw.githubusercontent.com/Samsung/Tizen.NET/main/workload/scripts/workload-install.ps1' -OutFile 'workload-install.ps1'\n          .\\workload-install.ps1\n        displayName: Install Tizen Workload\n\n      # Print Information on the .NET SDK Used By the CI Build Host\n      # These logs are useful information when debugging CI Builds\n      # Note: This step doesn't execute nor modify any code; it is strictly used for logging + debugging purposes\n      - task: CmdLine@2\n        displayName: 'Display dotnet --info'\n        inputs:\n          script: dotnet --info\n\n      - task: CmdLine@2\n        displayName: 'Build CommunityToolkit.Maui.Analyzers'\n        inputs:\n          script: 'dotnet build -c Release $(PathToCommunityToolkitAnalyzersCsproj)'\n\n      - task: CmdLine@2\n        displayName: 'Build CommunityToolkit.Maui.Analyzers.CodeFixes'\n        inputs:\n          script: 'dotnet build -c Release $(PathToCommunityToolkitAnalyzersCodeFixCsproj)'\n\n      - task: CmdLine@2\n        displayName: 'Build CommunityToolkit.Maui.Camera.Analyzers'\n        inputs:\n          script: 'dotnet build -c Release $(PathToCommunityToolkitCameraAnalyzersCsproj)'\n\n      - task: CmdLine@2\n        displayName: 'Build CommunityToolkit.Maui.Camera.Analyzers.CodeFixes'\n        inputs:\n          script: 'dotnet build -c Release $(PathToCommunityToolkitCameraAnalyzersCodeFixCsproj)'\n\n      - task: CmdLine@2\n        displayName: 'Build CommunityToolkit.Maui.MediaElement.Analyzers'\n        inputs:\n          script: 'dotnet build -c Release $(PathToCommunityToolkitMediaElementAnalyzersCsproj)'\n\n      - task: CmdLine@2\n        displayName: 'Build CommunityToolkit.Maui.MediaElement.Analyzers.CodeFixes'\n        inputs:\n          script: 'dotnet build -c Release $(PathToCommunityToolkitMediaElementAnalyzersCodeFixCsproj)'\n\n      - task: CmdLine@2\n        displayName: 'Build CommunityToolkit.Maui.SourceGenerators'\n        inputs:\n          script: 'dotnet build -c Release $(PathToCommunityToolkitSourceGeneratorsCsproj)'\n\n      - task: CmdLine@2\n        displayName: 'Build CommunityToolkit.SourceGenerators.Internal'\n        inputs:\n          script: 'dotnet build -c Release $(PathToCommunityToolkitSourceGeneratorsInternalCsproj)'\n\n      - task: CmdLine@2\n        displayName: 'Build CommunityToolkit.Maui.Core'\n        inputs:\n          script: 'dotnet build $(PathToCommunityToolkitCoreCsproj) -c Release -p:PackageVersion=$(NugetPackageVersion) -p:Version=$(NugetPackageVersion)'\n\n      - task: CmdLine@2\n        displayName: 'Build CommunityToolkit.Maui'\n        inputs:\n          script: 'dotnet build $(PathToCommunityToolkitCsproj) -c Release -p:PackageVersion=$(NugetPackageVersion) -p:Version=$(NugetPackageVersion)'\n\n      - task: CmdLine@2\n        displayName: 'Build CommunityToolkit.Maui.Camera'\n        inputs:\n          script: 'dotnet build $(PathToCommunityToolkitCameraCsproj) -c Release -p:PackageVersion=$(NugetPackageVersionCamera) -p:Version=$(NugetPackageVersion)'\n\n      - task: CmdLine@2\n        displayName: 'Build CommunityToolkit.Maui.MediaElement'\n        inputs:\n          script: 'dotnet build $(PathToCommunityToolkitMediaElementCsproj) -c Release -p:PackageVersion=$(NugetPackageVersionMediaElement) -p:Version=$(NugetPackageVersion)'\n\n      - task: CmdLine@2\n        displayName: 'Build CommunityToolkit.Maui.Maps'\n        inputs:\n          script: 'dotnet build $(PathToCommunityToolkitMapsCsproj) -c Release -p:PackageVersion=$(NugetPackageVersionMaps) -p:Version=$(NugetPackageVersion)'\n\n      - task: CmdLine@2\n        displayName: 'Run CommunityToolkit.Maui.Analyzers.UnitTests'\n        env:\n          VSTEST_TESTHOST_SHUTDOWN_TIMEOUT: 1100 # Fixes \"The active test run was aborted. Reason: Test host process crashed\" https://dev.azure.com/dotnet/CommunityToolkit/_build/results?buildId=109660&view=logs&j=3f96dcf5-6e1e-5485-3200-c557d5216be3&t=12286b69-c788-55db-0a8c-ef899858fbe6&l=76 (source: https://github.com/microsoft/vstest/issues/2952#issuecomment-2234253765): $(sauceUsername)\n        inputs:\n          script: 'dotnet test $(PathToCommunityToolkitAnalyzersUnitTestCsproj) -c Release'\n\n      - task: CmdLine@2\n        displayName: 'Run CommunityToolkit.Maui.UnitTests'\n        env:\n          VSTEST_TESTHOST_SHUTDOWN_TIMEOUT: 1100 # Fixes \"The active test run was aborted. Reason: Test host process crashed\" https://dev.azure.com/dotnet/CommunityToolkit/_build/results?buildId=109660&view=logs&j=3f96dcf5-6e1e-5485-3200-c557d5216be3&t=12286b69-c788-55db-0a8c-ef899858fbe6&l=76 (source: https://github.com/microsoft/vstest/issues/2952#issuecomment-2234253765): $(sauceUsername)\n        inputs:\n          script: 'dotnet test $(PathToCommunityToolkitUnitTestCsproj) -c Release --settings \".runsettings\" --collect \"XPlat code coverage\" --logger trx --results-directory $(Agent.TempDirectory)'\n\n      - task: PublishTestResults@2\n        condition: eq(variables['Agent.OS'], 'Windows_NT') # Only run this step on Windows\n        displayName: 'Publish Test Results'\n        inputs:\n          testResultsFormat: VSTest\n          testResultsFiles: '**/*.trx'\n          searchFolder: $(Agent.TempDirectory)\n\n      - task: PublishCodeCoverageResults@2\n        condition: eq(variables['Agent.OS'], 'Windows_NT') # Only run this step on Windows\n        displayName: 'Publish Code Coverage Results'\n        inputs:\n          codeCoverageTool: 'Cobertura'\n          summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'\n          failIfCoverageEmpty: true\n\n      - task: CmdLine@2\n        displayName: 'Pack CommunityToolkit.Maui.Core NuGet'\n        inputs:\n          script: 'dotnet pack $(PathToCommunityToolkitCoreCsproj) -c Release -p:PackageVersion=$(NugetPackageVersion) -p:Version=$(NugetPackageVersion)'\n\n      - task: CmdLine@2\n        displayName: 'Pack CommunityToolkit.Maui NuGet'\n        inputs:\n          script: 'dotnet pack $(PathToCommunityToolkitCsproj) -c Release -p:PackageVersion=$(NugetPackageVersion) -p:Version=$(NugetPackageVersion)'\n\n      - task: CmdLine@2\n        displayName: 'Pack CommunityToolkit.Maui.Camera NuGet'\n        inputs:\n          script: 'dotnet pack $(PathToCommunityToolkitCameraCsproj) -c Release -p:PackageVersion=$(NugetPackageVersionCamera) -p:Version=$(NugetPackageVersion)'\n\n      - task: CmdLine@2\n        displayName: 'Pack CommunityToolkit.Maui.MediaElement NuGet'\n        inputs:\n          script: 'dotnet pack $(PathToCommunityToolkitMediaElementCsproj) -c Release -p:PackageVersion=$(NugetPackageVersionMediaElement) -p:Version=$(NugetPackageVersion)'\n\n      - task: CmdLine@2\n        displayName: 'Pack CommunityToolkit.Maui.Maps NuGet'\n        inputs:\n          script: 'dotnet pack $(PathToCommunityToolkitMapsCsproj) -c Release -p:PackageVersion=$(NugetPackageVersionMaps) -p:Version=$(NugetPackageVersion)'\n\n      # check vulnerabilities\n      - powershell: |\n          cd src\n          dotnet list package --include-transitive # Print all transitive packages\n          dotnet list package --vulnerable --include-transitive | findstr /S /c:\"has the following vulnerable packages\"; # Print all transitive packages with vulnerabilities\n          if ($LastExitCode -ne 1)\n          {\n            dotnet list package --vulnerable --include-transitive;\n            exit 1;\n          }\n\n          exit 0;\n        displayName: 'Check Dependencies'\n        condition: eq(variables['Agent.OS'], 'Windows_NT') # Only run this step on Windows\n      \n      # Copy all NuGet packages\n      - task: PowerShell@2\n        condition: and(eq(variables['Agent.OS'], 'Windows_NT'), not(startsWith(variables['Build.SourceBranch'], 'refs/tags/'))) # Only run this step on Windows and when it's not a tagged build\n        displayName: 'Copy NuGet Packages to Staging Directory'\n        inputs:\n          targetType: 'inline'\n          script: |\n            $source = \".\\src\"\n            $filter = \"nupkg\"\n            Get-ChildItem -Path $source -Recurse | Where-Object { $_.Extension -match $filter } | Copy-Item -Destination \"$(Build.ArtifactStagingDirectory)\"\n          pwsh: true\n\n      # Copy CommunityToolkit.Maui & CommunityToolkit.Maui.Core packages\n      - task: PowerShell@2\n        condition: and(eq(variables['Agent.OS'], 'Windows_NT'),\n          startsWith(variables['Build.SourceBranch'], 'refs/tags/'),\n          not(endsWith(variables['Build.SourceBranch'], '-mediaelement')), \n          not(endsWith(variables['Build.SourceBranch'], '-maps')),\n          not(endsWith(variables['Build.SourceBranch'], '-camera'))) # Only run this step on Windows and when it's a tagged build and the tag does NOT end with -mediaelement and does NOT end with -maps and does NOT end with -camera\n        displayName: 'Copy CommunityToolkit.Maui & CommunityToolkit.Maui.Core NuGet Packages to Staging Directory'\n        inputs:\n          targetType: 'inline'\n          script: |\n            $source = \".\\src\"\n            $filter = \"CommunityToolkit.Maui.(Core.)*[0-9]+.[0-9]+.[0-9]+(-[a-zA-Z0-9]*)*.nupkg\"\n            Get-ChildItem -Path $source -Recurse | Where-Object { $_.Name -match $filter } | Copy-Item -Destination \"$(Build.ArtifactStagingDirectory)\"\n          pwsh: true\n\n      # Copy CommunityToolkit.Maui.Camera package\n      - task: PowerShell@2\n        condition: and(eq(variables['Agent.OS'], 'Windows_NT'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'), endsWith(variables['Build.SourceBranch'], '-camera')) # Only run this step on Windows and when it's a tagged build and the tag ends with -camera\n        displayName: 'Copy CommunityToolkit.Maui.Camera NuGet Package to Staging Directory'\n        inputs:\n          targetType: 'inline'\n          script: |\n            $source = \".\\src\"\n            $filter = \"CommunityToolkit.Maui.Camera.[0-9]+.[0-9]+.[0-9]+(-[a-zA-Z0-9]*)*.nupkg\"\n            Get-ChildItem -Path $source -Recurse | Where-Object { $_.Name -match $filter } | Copy-Item -Destination \"$(Build.ArtifactStagingDirectory)\"\n          pwsh: true\n\n      # Copy CommunityToolkit.Maui.MediaElement package\n      - task: PowerShell@2\n        condition: and(eq(variables['Agent.OS'], 'Windows_NT'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'), endsWith(variables['Build.SourceBranch'], '-mediaelement')) # Only run this step on Windows and when it's a tagged build and the tag ends with -mediaelement\n        displayName: 'Copy CommunityToolkit.Maui.MediaElement NuGet Package to Staging Directory'\n        inputs:\n          targetType: 'inline'\n          script: |\n            $source = \".\\src\"\n            $filter = \"CommunityToolkit.Maui.MediaElement.[0-9]+.[0-9]+.[0-9]+(-[a-zA-Z0-9]*)*.nupkg\"\n            Get-ChildItem -Path $source -Recurse | Where-Object { $_.Name -match $filter } | Copy-Item -Destination \"$(Build.ArtifactStagingDirectory)\"\n          pwsh: true\n\n      # Copy CommunityToolkit.Maui.Maps package\n      - task: PowerShell@2\n        condition: and(eq(variables['Agent.OS'], 'Windows_NT'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'), endsWith(variables['Build.SourceBranch'], '-maps')) # Only run this step on Windows and when it's a tagged build and the tag ends with -maps\n        displayName: 'Copy CommunityToolkit.Maui.Maps NuGet Package to Staging Directory'\n        inputs:\n          targetType: 'inline'\n          script: |\n            $source = \".\\src\"\n            $filter = \"CommunityToolkit.Maui.Maps.[0-9]+.[0-9]+.[0-9]+(-[a-zA-Z0-9]*)*.nupkg\"\n            Get-ChildItem -Path $source -Recurse | Where-Object { $_.Name -match $filter } | Copy-Item -Destination \"$(Build.ArtifactStagingDirectory)\"\n          pwsh: true\n      \n      # Sign NuGet Packages\n      - task: PowerShell@2\n        displayName: Authenticode Sign Packages\n        inputs:\n          filePath: build/Sign-Package.ps1\n        env:\n          SignClientUser: $(SignClientUser)\n          SignClientSecret: $(SignClientSecret)\n          ArtifactDirectory: $(Build.ArtifactStagingDirectory)\n        condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), not(eq(variables['build.reason'], 'PullRequest')), not(eq(variables['SignClientSecret'], '')), not(eq(variables['SignClientUser'], ''))) # Only run this step on Windows when the CI Pipeline has not been triggered by a Pull Request and the NuGet Signing Certificate is valid\n      \n      # Publish build artifacts\n      - task: PublishBuildArtifacts@1\n        condition: eq(variables['Agent.OS'], 'Windows_NT') # Only run this step on Windows\n        displayName: 'Publish NuGets'\n        inputs:\n          artifactName: nuget\n          pathToPublish: '$(Build.ArtifactStagingDirectory)'\n\n  - job: run_benchmarks\n    displayName: Run Benchmarks\n    strategy:\n        matrix:\n          'Windows':\n            image: 'windows-latest'\n          'macOS':\n            image: 'macos-15'\n    pool:\n      vmImage: $(image)\n    steps:\n      - script: |\n          echo Installed Xcode Versions:\n          ls -al  /Applications | grep Xcode\n          echo '##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]'/Applications/Xcode_$(CommunityToolkitLibrary_Xcode_Version).app;sudo xcode-select --switch /Applications/Xcode_$(CommunityToolkitLibrary_Xcode_Version).app/Contents/Developer\n        displayName: 'Set Xcode v$(CommunityToolkitLibrary_Xcode_Version)'\n        condition: eq(variables['Agent.OS'], 'Darwin') # Only run this step on macOS\n\n      - task: UseDotNet@2\n        displayName: 'Install .NET SDK'\n        inputs:\n          packageType: 'sdk'\n          version: '$(LATEST_NET_VERSION)'\n          includePreviewVersions: false\n\n      - task: CmdLine@2\n        displayName: 'Install .NET MAUI Workload'\n        inputs:\n          script : |\n            dotnet workload install maui\n            dotnet workload update\n\n      - pwsh: |\n          Invoke-WebRequest 'https://raw.githubusercontent.com/Samsung/Tizen.NET/main/workload/scripts/workload-install.ps1' -OutFile 'workload-install.ps1'\n          .\\workload-install.ps1\n        displayName: Install Tizen Workload\n\n      # Print Information on the .NET SDK Used By the CI Build Host\n      # These logs are useful information when debugging CI Builds\n      # Note: This step doesn't execute nor modify any code; it is strictly used for logging + debugging purposes\n      - task: CmdLine@2\n        displayName: 'Display dotnet --info'\n        inputs:\n          script: dotnet --info\n\n      - task: CmdLine@2\n        displayName: 'Run Benchmarks'\n        inputs:\n          script : 'dotnet run --project $(PathToCommunityToolkitAnalyzersBenchmarkCsproj) -c Release -- -a $(Build.ArtifactStagingDirectory)'\n\n      # publish the Benchmark Results\n      - task: PublishBuildArtifacts@1\n        condition: eq(variables['Agent.OS'], 'Windows_NT') # Only run this step on Windows\n        displayName: 'Publish Benchmark Artifacts'\n        inputs:\n          artifactName: benchmarks\n          pathToPublish: '$(Build.ArtifactStagingDirectory)'\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.107421875,
          "content": "{\n  \"sdk\": {\n    \"version\": \"9.0.101\",\n    \"rollForward\": \"latestFeature\",\n    \"allowPrerelease\": false\n  }\n}\n"
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}