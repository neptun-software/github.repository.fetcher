{
  "metadata": {
    "timestamp": 1736710694239,
    "page": 61,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Code52/carnac",
      "stars": 4257,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2421875,
          "content": "# Set the default behavior, in case people don't have core.autocrlf set.\n* text=auto\n\n*.cmd text eol=lf\n*.md text eol=lf\n*.config text eol=crlf\n*.yaml text eol=crlf\n*.cs text eol=crlf\n*.xaml text eol=crlf\n*.csproj text eol=crlf\n*.sln text eol=crlf\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2958984375,
          "content": "[Oo]bj/\n[Bb]in/\n*.user\n/TestResults\n*.vspscc\n*.vssscc\ndeploy\ndeploy/*\n*.suo\n*.cache\npackages/\nmsbuild.log\nartifacts/log\nartifacts/\npost-build*\n_ReSharper.*\ndeploy-to-ec2*\n*.ncrunchsolution\n*.orig\nThumbs.db\nsrc/Carnac.sln.ide/\n\n# Cake - Uncomment if you are using it\ntools/**\n!tools/packages.config\n.vs/\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.181640625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [github@brendanforster.com](mailto:github@brendanforster.com). The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 2.5771484375,
          "content": "###Microsoft Public License (MS-PL)\n\nThis license governs use of the accompanying software. If you use the software, you\naccept this license. If you do not accept the license, do not use the software.\n\n1. Definitions\nThe terms \"reproduce,\" \"reproduction,\" \"derivative works,\" and \"distribution\" have the\nsame meaning here as under U.S. copyright law.  \nA \"contribution\" is the original software, or any additions or changes to the software.  \nA \"contributor\" is any person that distributes its contribution under this license.\n\"Licensed patents\" are a contributor's patent claims that read directly on its contribution.\n\n2. Grant of Rights  \n(A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.  \n(B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.\n\n3. Conditions and Limitations  \n(A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks.  \n(B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, your patent license from such contributor to the software ends automatically.  \n(C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution notices that are present in the software.  \n(D) If you distribute any portion of the software in source code form, you may do so only under this license by including a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object code form, you may only do so under a license that complies with this license.  \n(E) The software is licensed \"as-is.\" You bear the risk of using it. The contributors give no express warranties, guarantees or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular purpose and non-infringement."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.6083984375,
          "content": "## Carnac the Magnificent Keyboard Utility\n\n[![Join the chat at https://gitter.im/Code52/carnac](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/Code52/carnac?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nA keyboard logging and presentation utility for presentations, screencasts, and to help you become a better keyboard user.\n\n### Build Status\n[![Build status](https://ci.appveyor.com/api/projects/status/qorhqwc2favf18r4?svg=true)](https://ci.appveyor.com/project/shiftkey/carnac)\n\n### Installation\n\nYou can install the latest version of Carnac via [Chocolatey](https://chocolatey.org/):\n\n```ps\ncinst carnac\n```\n\nAlternatively, you can grab the latest zip file from [here](https://github.com/Code52/carnac/releases/latest), unpack it and run `Setup.exe`.\n\n**Note:** Carnac requires .NET 4.5.2 to work - you can install that from [here](https://www.microsoft.com/en-au/download/details.aspx?id=42643) if you don't have it already.\n\n### Updating\n\nWe use `Squirrel.Windows` to update your `carnac` application. \n\nThe application will check for updates in the background, if a new version has been released, it will automatically install the new version and once you restart `carnac` you will be up-to-date.\n\n### Usage\n\n**Enabling silent mode**\n\nIf you want to stop `Carnac` from recording certain key strokes, you can enter _silent mode_ by pressing `Ctrl+Alt+P`. To exit _silent mode_ you simply press `Ctrl+Alt+P` again.\n\n### Contributing\n\n**Getting started with Git and GitHub**\n\n * [Setting up Git for Windows and connecting to GitHub](http://help.github.com/win-set-up-git/)\n * [Forking a GitHub repository](http://help.github.com/fork-a-repo/)\n * [The simple guide to GIT guide](http://rogerdudler.github.com/git-guide/)\n * [Open an issue](https://github.com/Code52/carnac/issues) if you encounter a bug or have a suggestion for improvements/features\n\nOnce you're familiar with Git and GitHub, clone the repository and run the ```.\\build.cmd``` script to compile the code and run all the unit tests. You can use this script to test your changes quickly.\n\n### Resources\nThis blog series covers a series of refactorings which have recently happened in Carnac to make better use of Rx.\nIf you are learning Rx and want to be shown through Carnac's codebase then this blog series may help you.\n\n[Part 1 - Refactoring the InterceptKeys class ](http://jake.ginnivan.net/blog/carnac-improvements/part-1/)  \n[Part 2 - Refactoring the MessageProvider class](http://jake.ginnivan.net/blog/carnac-improvements/part-2/)  \n[Part 3 - Introducing the MessageController class](http://jake.ginnivan.net/blog/carnac-improvements/part-3/)  \n\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.5068359375,
          "content": "version: 2.2.{build}\nconfiguration: Release\nskip_branch_with_pr: true\nskip_tags: false\nassembly_info:\n  patch: false\nbranches:\n  only:\n    - master\n    - \\d*\\.\\d*\\.\\d*/\nenvironment:\n  Version: $(APPVEYOR_BUILD_VERSION)\n  GithubRepo: $(APPVEYOR_REPO_NAME)\n  GithubAuthToken:\n    secure: qgh2y38nOEG/eAnQe0EwNSqMDSXf9akPDwJI5Yasvyiemh5GBbbzkDIleAhGak6i\nbuild_script:\n- ps: .\\build.ps1 -Configuration Release -Experimental\ntest:\n  assemblies:\n    - '**\\Carnac.Tests.dll'\nartifacts:\n- path: deploy\\Chocolatey\\*.nupkg\n  name: ChocoPackage\n- path: deploy\\GitHub\\*.zip\n  name: ZipPackage\n- path: deploy\\Squirrel\\Releases\\*\n  name: SquirrelPackage\n- path: deploy\\Checksums\\*.txt\n  name: Checksums\ndeploy:\n- provider: GitHub\n  auth_token:\n    secure: qgh2y38nOEG/eAnQe0EwNSqMDSXf9akPDwJI5Yasvyiemh5GBbbzkDIleAhGak6i\n  artifact: ZipPackage\n  draft: false\n  on:\n    branch: master\n    APPVEYOR_REPO_TAG: true\n- provider: GitHub\n  auth_token:\n    secure: qgh2y38nOEG/eAnQe0EwNSqMDSXf9akPDwJI5Yasvyiemh5GBbbzkDIleAhGak6i\n  artifact: SquirrelPackage\n  draft: false\n  on:\n    branch: master\n    APPVEYOR_REPO_TAG: true\n- provider: GitHub\n  auth_token:\n    secure: qgh2y38nOEG/eAnQe0EwNSqMDSXf9akPDwJI5Yasvyiemh5GBbbzkDIleAhGak6i\n  artifact: Checksums\n  draft: false\n  on:\n    branch: master\n    APPVEYOR_REPO_TAG: true\n- provider: NuGet\n  server: https://chocolatey.org/\n  api_key:\n    secure: sMCceYyOHQxaJMpcWBGmbGkbB6aYToUWm3rqfLv1ZZaeToqM2PAz1or18hnJbon0\n  skip_symbols: true\n  artifact: ChocoPackage\n  on:\n    branch: master\n    APPVEYOR_REPO_TAG: true\n"
        },
        {
          "name": "build.cake",
          "type": "blob",
          "size": 7.0205078125,
          "content": "#tool \"nuget:?package=xunit.runners&version=1.9.2\";\n#tool \"nuget:?package=Squirrel.Windows&version=1.9.1\";\n#tool \"nuget:?package=GitVersion.CommandLine&version=5.3.6\";\n\n#addin \"nuget:?package=Cake.FileHelpers&version=3.2.1\";\n#addin \"nuget:?package=Cake.Squirrel&version=0.15.1\";\n#addin \"nuget:?package=Newtonsoft.Json&version=12.0.3\";\nusing Newtonsoft.Json;\n\nvar target = Argument(\"target\", \"Default\");\nvar configuration = Argument(\"configuration\", \"Debug\");\nvar githubRepo = Argument(\"githubrepo\", \"Code52/carnac\");\nvar githubAuthToken = Argument(\"GithubAuthToken\", \"\");\n\nvar githubRepoUrl = $\"https://github.com/{githubRepo}\";\nvar solutionFile = \"./src/Carnac.sln\";\nvar buildDir = Directory(\"./src/Carnac/bin\") + Directory(configuration);\nvar toolsDir = Directory(\"./tools\");\nvar deployDir = Directory(\"./deploy\");\nvar zipFileHash = \"\";\n\nvar squirrelDeployDir = deployDir + Directory(\"Squirrel\");\nvar squirrelReleaseDir = squirrelDeployDir + Directory(\"Releases\");\nvar gitHubDeployDir = deployDir + Directory(\"GitHub\");\nGitVersion gitVersionInfo;\nstring nugetVersion;\n\nSetup(context => \n{\n\tgitVersionInfo = GitVersion(new GitVersionSettings {\n\t\tUpdateAssemblyInfo = true,\n\t\tOutputType = GitVersionOutput.Json\n\t});\n\tnugetVersion = gitVersionInfo.NuGetVersion;\n\n\tInformation(\"Output from GitVersion:\");\n\tInformation(JsonConvert.SerializeObject(gitVersionInfo, Formatting.Indented));\n\n\tif (BuildSystem.IsRunningOnAppVeyor) {\n\t\tBuildSystem.AppVeyor.UpdateBuildVersion(nugetVersion);\n\t}\n\n\tInformation($\"Building {githubRepo} v{nugetVersion}\");\n\tInformation($\"Informational version {gitVersionInfo.InformationalVersion}\");\n});\n\nTask(\"Clean\")\n    .Does(() =>\n    {\n\t\tFunc<IFileSystemInfo, bool> excludeSquirrelDir =\n\t\t\tfileSystemInfo => !(fileSystemInfo.Path.FullPath.IndexOf(\"Squirrel\", StringComparison.OrdinalIgnoreCase) >= 0);\n        \n\t\tCleanDirectory(buildDir);\n\t\tCleanDirectory(deployDir, excludeSquirrelDir);\n    });\n\nTask(\"Restore-NuGet-Packages\")\n    .IsDependentOn(\"Clean\")\n    .Does(() =>\n    {\n        NuGetRestore(solutionFile);\n    });\n\nTask(\"Build\")\n    .IsDependentOn(\"Restore-NuGet-Packages\")\n    .Does(() => \n    {\n        MSBuild(solutionFile, settings =>\n            settings.SetConfiguration(configuration));\n    });\n\nTask(\"Run-Unit-Tests\")\n    .IsDependentOn(\"Build\")\n    .Does(() =>\n    {\n        XUnit($\"./src/Carnac.Tests/bin/{configuration}/*.Tests.dll\");\n    });\n\nTask(\"Package-Squirrel\")\n\t.IsDependentOn(\"Run-Unit-Tests\")\n\t.Does(() =>\n\t{\n\t\tvar syncReleasesDir = toolsDir + Directory(\"squirrel.windows.1.9.1/tools\");\n\n\t\tEnsureDirectoryExists(deployDir);\n\t\tEnsureDirectoryExists(squirrelDeployDir);\n\n\t\t// Create nuget package\n\t\tvar appFiles = GetFiles(buildDir.Path + \"/**/*.*\").Select(f => f.FullPath);\n\t\tvar deltaCompressionFiles = GetFiles($\"{(toolsDir + Directory(\"DeltaCompressionDotNet/lib/net45\")).Path}/*.dll\").Select(f => f.FullPath);\n\t\tvar monoCecilFiles = GetFiles($\"{(toolsDir + Directory(\"Mono.Cecil/lib/net45\")).Path}/*.dll\").Select(f => f.FullPath);\n\t\tvar splatFiles = GetFiles($\"{(toolsDir + Directory(\"Splat/lib/Net45\")).Path}/*.dll\").Select(f => f.FullPath);\n\t\tvar iCSharpCodeFiles = GetFiles($\"{(toolsDir + Directory(\"squirrel.windows/lib/Net45\")).Path}/ICSharpCode.SharpZipLib.*\").Select(f => f.FullPath);\n\t\tvar squirrelFiles = GetFiles($\"{(toolsDir + Directory(\"squirrel.windows/lib/Net45\")).Path}/*Squirrel.dll\").Select(f => f.FullPath);\n\t\tvar releaseFiles = new HashSet<string>(\n\t\t\tappFiles\n\t\t\t\t.Concat(deltaCompressionFiles)\n\t\t\t\t.Concat(monoCecilFiles)\n\t\t\t\t.Concat(splatFiles)\n\t\t\t\t.Concat(iCSharpCodeFiles)\n\t\t\t\t.Concat(squirrelFiles)\n\t\t);\n\t\treleaseFiles.RemoveWhere(f => f.Contains(\".vshost.\") || f.EndsWith(\".pdb\"));\n\n\t\tvar nuGetPackSettings = new NuGetPackSettings\n\t\t{\n\t\t\tVersion = nugetVersion,\n\t\t\tFiles = releaseFiles.Select(f => new NuSpecContent { Source = f, Target = \"lib/net45\" + (f.Contains(\"Keymaps\") ? \"/Keymaps\" : \"\") }).ToList(),\n\t\t\tBasePath = buildDir,\n\t\t\tOutputDirectory = squirrelDeployDir,\n\t\t\tNoPackageAnalysis = true\n\t\t};\n\t\tNuGetPack(\"./src/Carnac/Carnac.nuspec\", nuGetPackSettings);\n\t\t\n\t\t// Sync latest release to build new package\n\t\tvar squirrelSyncReleasesExe = syncReleasesDir + File(\"SyncReleases.exe\");\n\t\tStartProcess(squirrelSyncReleasesExe, new ProcessSettings { Arguments = $\"--url {githubRepoUrl} --releaseDir {squirrelReleaseDir.Path}{(!string.IsNullOrEmpty(githubAuthToken) ? \" --token \" + githubAuthToken : \"\")}\" });\n\n\t\t// Create new squirrel package\n\t\tSquirrel(\n\t\t\tsquirrelDeployDir + File($\"carnac.{nugetVersion}.nupkg\"), \n\t\t\tnew SquirrelSettings\n\t\t\t{\n\t\t\t\tReleaseDirectory = squirrelReleaseDir,\n\t\t\t\tNoMsi = true,\n\t\t\t\tIcon = \"./src/Carnac/icon.ico\",\n\t\t\t\tSetupIcon = \"./src/Carnac/icon.ico\",\n\t\t\t\tShortCutLocations = \"StartMenu\",\n\t\t\t\tSilent = true\n\t\t\t}\n\t\t);\n\t});\n\nTask(\"Package-Zip\")\n\t.IsDependentOn(\"Package-Squirrel\")\n\t.Does(() =>\n\t{\n\t\tvar zipFile = gitHubDeployDir + File($\"carnac.{nugetVersion}.zip\");\n\n\t\tEnsureDirectoryExists(deployDir);\n\t\tEnsureDirectoryExists(gitHubDeployDir);\n\n\t\tvar files = GetFiles($\"{squirrelReleaseDir.Path}\\\\carnac-{nugetVersion}-*.nupkg\")\n\t\t\t.Select(f => f.FullPath)\n\t\t\t.Concat(\n\t\t\t\tnew []\n\t\t\t\t{\n\t\t\t\t\t$\"{squirrelReleaseDir.Path}\\\\RELEASES\",\n\t\t\t\t\t$\"{squirrelReleaseDir.Path}\\\\Setup.exe\"\n\t\t\t\t}\n\t\t\t);\n\t\t\n\t\tZip(squirrelReleaseDir, zipFile, files);\n\t\tzipFileHash = CalculateFileHash(zipFile, HashAlgorithm.SHA256).ToHex();\n\t});\n\nTask(\"Package-Choco\")\n\t.IsDependentOn(\"Package-Zip\")\n\t.Does(() =>\n\t{\n\t\tvar chocoSourceDir = Directory(\"./src/Chocolatey\");\n\t\tvar chocoToolsDir = chocoSourceDir + Directory(\"tools\");\n\t\tvar chocoInstallFile = chocoToolsDir + File(\"chocolateyinstall.ps1\");\n\t\tvar chocoSpecPath = chocoSourceDir + File(\"carnac.nuspec\");\n\t\tvar chocoDeployDir = deployDir + Directory(\"Chocolatey\");\n\t\t\n\t\tEnsureDirectoryExists(deployDir);\n\t\tEnsureDirectoryExists(chocoDeployDir);\n\n\t\tvar url = $\"{githubRepoUrl}/releases/download/{nugetVersion}\";\n\n\t\tReplaceRegexInFiles(chocoInstallFile, @\"\\$url = '.+'\", $\"$url = '{url}/carnac.{nugetVersion}.zip'\");\n\t\tReplaceRegexInFiles(chocoInstallFile, @\"\\$zipFileHash = '.+'\", $\"$zipFileHash = '{zipFileHash}'\");\n\n\t\tChocolateyPack(chocoSpecPath, new ChocolateyPackSettings\n\t\t{\n\t\t\tVersion = nugetVersion\n\t\t});\n\t\tMoveFiles(\"./*.nupkg\", chocoDeployDir);\n\t});\n\nTask(\"Package\")\n\t.IsDependentOn(\"Package-Zip\")\n\t.IsDependentOn(\"Package-Squirrel\")\n\t.IsDependentOn(\"Package-Choco\")\n\t.Does(() =>\n\t{\n\t\tEnsureDirectoryExists(deployDir);\n\t});\n\nTask(\"Create-Checksums-File\")\n    .IsDependentOn(\"Package\")\n    .Does(() =>\n    {\n        var checksumDir = deployDir + Directory(\"Checksums\");\n        EnsureDirectoryExists(checksumDir);\n\n        var files = GetFiles($\"{squirrelReleaseDir.Path}\\\\*\")\n            .Concat(GetFiles($\"{gitHubDeployDir.Path}\\\\*\"));\n\n        var checksumFile = checksumDir + File($\"sha256sums.txt\");\n        var sha256sums = new List<string>();\n        foreach(var file in files)\n        {\n            var fileName = file.GetFilename();\n            var fileHash = CalculateFileHash(file, HashAlgorithm.SHA256).ToHex();\n            sha256sums.Add($\"{fileHash} {fileName}\");\n        }\n        FileAppendLines(checksumFile, sha256sums.ToArray());\n    });\n\nTask(\"Default\")\n    .IsDependentOn(\"Create-Checksums-File\");\n\nRunTarget(target);"
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 7.10546875,
          "content": "##########################################################################\n# This is the Cake bootstrapper script for PowerShell.\n# This file was downloaded from https://github.com/cake-build/resources\n# Feel free to change this file to fit your needs.\n##########################################################################\n\n<#\n\n.SYNOPSIS\nThis is a Powershell script to bootstrap a Cake build.\n\n.DESCRIPTION\nThis Powershell script will download NuGet if missing, restore NuGet tools (including Cake)\nand execute your Cake build script with the parameters you provide.\n\n.PARAMETER Script\nThe build script to execute.\n.PARAMETER Target\nThe build script target to run.\n.PARAMETER Configuration\nThe build configuration to use.\n.PARAMETER Verbosity\nSpecifies the amount of information to be displayed.\n.PARAMETER Experimental\nTells Cake to use the latest Roslyn release.\n.PARAMETER WhatIf\nPerforms a dry run of the build script.\nNo tasks will be executed.\n.PARAMETER Mono\nTells Cake to use the Mono scripting engine.\n.PARAMETER SkipToolPackageRestore\nSkips restoring of packages.\n.PARAMETER ScriptArgs\nRemaining arguments are added here.\n\n.LINK\nhttp://cakebuild.net\n\n#>\n\n[CmdletBinding()]\nParam(\n    [string]$Script = \"build.cake\",\n    [string]$Target = \"Default\",\n    [ValidateSet(\"Release\", \"Debug\")]\n    [string]$Configuration = \"Debug\",\n    [ValidateSet(\"Quiet\", \"Minimal\", \"Normal\", \"Verbose\", \"Diagnostic\")]\n    [string]$Verbosity = \"Verbose\",\n    [switch]$Experimental,\n    [Alias(\"DryRun\",\"Noop\")]\n    [switch]$WhatIf,\n    [switch]$Mono,\n    [switch]$SkipToolPackageRestore,\n    [Parameter(Position=0,Mandatory=$false,ValueFromRemainingArguments=$true)]\n    [string[]]$ScriptArgs\n)\n\n[Reflection.Assembly]::LoadWithPartialName(\"System.Security\") | Out-Null\nfunction MD5HashFile([string] $filePath)\n{\n    if ([string]::IsNullOrEmpty($filePath) -or !(Test-Path $filePath -PathType Leaf))\n    {\n        return $null\n    }\n\n    [System.IO.Stream] $file = $null;\n    [System.Security.Cryptography.MD5] $md5 = $null;\n    try\n    {\n        $md5 = [System.Security.Cryptography.MD5]::Create()\n        $file = [System.IO.File]::OpenRead($filePath)\n        return [System.BitConverter]::ToString($md5.ComputeHash($file))\n    }\n    finally\n    {\n        if ($file -ne $null)\n        {\n            $file.Dispose()\n        }\n    }\n}\n\nWrite-Host \"Preparing to run build script...\"\n\nif(!$PSScriptRoot){\n    $PSScriptRoot = Split-Path $MyInvocation.MyCommand.Path -Parent\n}\n\n$TOOLS_DIR = Join-Path $PSScriptRoot \"tools\"\n$ADDINS_DIR = Join-Path $TOOLS_DIR \"addins\"\n$MODULES_DIR = Join-Path $TOOLS_DIR \"modules\"\n$NUGET_EXE = Join-Path $TOOLS_DIR \"nuget.exe\"\n$CAKE_EXE = Join-Path $TOOLS_DIR \"Cake/Cake.exe\"\n$NUGET_URL = \"https://dist.nuget.org/win-x86-commandline/latest/nuget.exe\"\n$PACKAGES_CONFIG = Join-Path $TOOLS_DIR \"packages.config\"\n$PACKAGES_CONFIG_MD5 = Join-Path $TOOLS_DIR \"packages.config.md5sum\"\n$ADDINS_PACKAGES_CONFIG = Join-Path $ADDINS_DIR \"packages.config\"\n$MODULES_PACKAGES_CONFIG = Join-Path $MODULES_DIR \"packages.config\"\n\n# Should we use mono?\n$UseMono = \"\";\nif($Mono.IsPresent) {\n    Write-Verbose -Message \"Using the Mono based scripting engine.\"\n    $UseMono = \"-mono\"\n}\n\n# Should we use the new Roslyn?\n$UseExperimental = \"\";\nif($Experimental.IsPresent -and !($Mono.IsPresent)) {\n    Write-Verbose -Message \"Using experimental version of Roslyn.\"\n    $UseExperimental = \"-experimental\"\n}\n\n# Is this a dry run?\n$UseDryRun = \"\";\nif($WhatIf.IsPresent) {\n    $UseDryRun = \"-dryrun\"\n}\n\n# Make sure tools folder exists\nif ((Test-Path $PSScriptRoot) -and !(Test-Path $TOOLS_DIR)) {\n    Write-Verbose -Message \"Creating tools directory...\"\n    New-Item -Path $TOOLS_DIR -Type directory | out-null\n}\n\n# Make sure that packages.config exist.\nif (!(Test-Path $PACKAGES_CONFIG)) {\n    Write-Verbose -Message \"Downloading packages.config...\"\n    try { (New-Object System.Net.WebClient).DownloadFile(\"http://cakebuild.net/download/bootstrapper/packages\", $PACKAGES_CONFIG) } catch {\n        Throw \"Could not download packages.config.\"\n    }\n}\n\n# Try find NuGet.exe in path if not exists\nif (!(Test-Path $NUGET_EXE)) {\n    Write-Verbose -Message \"Trying to find nuget.exe in PATH...\"\n    $existingPaths = $Env:Path -Split ';' | Where-Object { (![string]::IsNullOrEmpty($_)) -and (Test-Path $_ -PathType Container) }\n    $NUGET_EXE_IN_PATH = Get-ChildItem -Path $existingPaths -Filter \"nuget.exe\" | Select -First 1\n    if ($NUGET_EXE_IN_PATH -ne $null -and (Test-Path $NUGET_EXE_IN_PATH.FullName)) {\n        Write-Verbose -Message \"Found in PATH at $($NUGET_EXE_IN_PATH.FullName).\"\n        $NUGET_EXE = $NUGET_EXE_IN_PATH.FullName\n    }\n}\n\n# Try download NuGet.exe if not exists\nif (!(Test-Path $NUGET_EXE)) {\n    Write-Verbose -Message \"Downloading NuGet.exe...\"\n    try {\n        (New-Object System.Net.WebClient).DownloadFile($NUGET_URL, $NUGET_EXE)\n    } catch {\n        Throw \"Could not download NuGet.exe.\"\n    }\n}\n\n# Save nuget.exe path to environment to be available to child processed\n$ENV:NUGET_EXE = $NUGET_EXE\n\n# Restore tools from NuGet?\nif(-Not $SkipToolPackageRestore.IsPresent) {\n    Push-Location\n    Set-Location $TOOLS_DIR\n\n    # Check for changes in packages.config and remove installed tools if true.\n    [string] $md5Hash = MD5HashFile($PACKAGES_CONFIG)\n    if((!(Test-Path $PACKAGES_CONFIG_MD5)) -Or\n      ($md5Hash -ne (Get-Content $PACKAGES_CONFIG_MD5 ))) {\n        Write-Verbose -Message \"Missing or changed package.config hash...\"\n        Remove-Item * -Recurse -Exclude packages.config,nuget.exe\n    }\n\n    Write-Verbose -Message \"Restoring tools from NuGet...\"\n    $NuGetOutput = Invoke-Expression \"&`\"$NUGET_EXE`\" install -ExcludeVersion -OutputDirectory `\"$TOOLS_DIR`\"\"\n\n    if ($LASTEXITCODE -ne 0) {\n        Throw \"An error occured while restoring NuGet tools.\"\n    }\n    else\n    {\n        $md5Hash | Out-File $PACKAGES_CONFIG_MD5 -Encoding \"ASCII\"\n    }\n    Write-Verbose -Message ($NuGetOutput | out-string)\n    \n    Pop-Location\n}\n\n# Restore addins from NuGet\nif (Test-Path $ADDINS_PACKAGES_CONFIG) {\n    Push-Location\n    Set-Location $ADDINS_DIR\n\n    Write-Verbose -Message \"Restoring addins from NuGet...\"\n    $NuGetOutput = Invoke-Expression \"&`\"$NUGET_EXE`\" install -ExcludeVersion -OutputDirectory `\"$ADDINS_DIR`\"\"\n\n    if ($LASTEXITCODE -ne 0) {\n        Throw \"An error occured while restoring NuGet addins.\"\n    }\n\n    Write-Verbose -Message ($NuGetOutput | out-string)\n\n    Pop-Location\n}\n\n# Restore modules from NuGet\nif (Test-Path $MODULES_PACKAGES_CONFIG) {\n    Push-Location\n    Set-Location $MODULES_DIR\n\n    Write-Verbose -Message \"Restoring modules from NuGet...\"\n    $NuGetOutput = Invoke-Expression \"&`\"$NUGET_EXE`\" install -ExcludeVersion -OutputDirectory `\"$MODULES_DIR`\"\"\n\n    if ($LASTEXITCODE -ne 0) {\n        Throw \"An error occured while restoring NuGet modules.\"\n    }\n\n    Write-Verbose -Message ($NuGetOutput | out-string)\n\n    Pop-Location\n}\n\n# Make sure that Cake has been installed.\nif (!(Test-Path $CAKE_EXE)) {\n    Throw \"Could not find Cake.exe at $CAKE_EXE\"\n}\n\n# Start Cake\nWrite-Host \"Running build script...\"\nInvoke-Expression \"& `\"$CAKE_EXE`\" `\"$Script`\" -target=`\"$Target`\" -configuration=`\"$Configuration`\" -verbosity=`\"$Verbosity`\" $UseMono $UseDryRun $UseExperimental $ScriptArgs\"\nexit $LASTEXITCODE"
        },
        {
          "name": "gitversion.yml",
          "type": "blob",
          "size": 0.025390625,
          "content": "mode: ContinuousDeployment"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}