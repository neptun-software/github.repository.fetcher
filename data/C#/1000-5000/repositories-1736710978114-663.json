{
  "metadata": {
    "timestamp": 1736710978114,
    "page": 663,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "reactivemarbles/DynamicData",
      "stars": 1762,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 22.0439453125,
          "content": "# editorconfig.org\n\n# top-most EditorConfig file\nroot = true\n\n# Default settings:\n# A newline ending every file\n# Use 4 spaces as indentation\n[*]\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\ndotnet_diagnostic.CA1027.severity=error\ndotnet_diagnostic.CA1062.severity=error\ndotnet_diagnostic.CA1064.severity=error\ndotnet_diagnostic.CA1066.severity=error\ndotnet_diagnostic.CA1067.severity=error\ndotnet_diagnostic.CA1068.severity=error\ndotnet_diagnostic.CA1069.severity=warning\ndotnet_diagnostic.CA2013.severity=error\ndotnet_diagnostic.CA1802.severity=error\ndotnet_diagnostic.CA1813.severity=error\ndotnet_diagnostic.CA1814.severity=error\ndotnet_diagnostic.CA1815.severity=error\ndotnet_diagnostic.CA1822.severity=error\ndotnet_diagnostic.CA1827.severity=error\ndotnet_diagnostic.CA1828.severity=error\ndotnet_diagnostic.CA1826.severity=error\ndotnet_diagnostic.CA1829.severity=error\ndotnet_diagnostic.CA1830.severity=error\ndotnet_diagnostic.CA1831.severity=error\ndotnet_diagnostic.CA1832.severity=error\ndotnet_diagnostic.CA1833.severity=error\ndotnet_diagnostic.CA1834.severity=error\ndotnet_diagnostic.CA1835.severity=error\ndotnet_diagnostic.CA1836.severity=error\ndotnet_diagnostic.CA1837.severity=error\ndotnet_diagnostic.CA1838.severity=error\ndotnet_diagnostic.CA2015.severity=error\ndotnet_diagnostic.CA2012.severity=error\ndotnet_diagnostic.CA2011.severity=error\ndotnet_diagnostic.CA2009.severity=error\ndotnet_diagnostic.CA2008.severity=error\ndotnet_diagnostic.CA2007.severity=warning\ndotnet_diagnostic.CA2000.severity=suggestion\n\n[project.json]\nindent_size = 2\n\n# C# files\n[*.cs]\n# New line preferences\ntab_width = 4\nend_of_line = crlf\ncsharp_new_line_before_open_brace = all\ncsharp_new_line_before_else = true\ncsharp_new_line_before_catch = true\ncsharp_new_line_before_finally = true\ncsharp_new_line_before_members_in_object_initializers = true\ncsharp_new_line_before_members_in_anonymous_types = true\ncsharp_new_line_between_query_expression_clauses = true\n\n# Indentation preferences\ncsharp_indent_block_contents = true\ncsharp_indent_braces = false\ncsharp_indent_case_contents = true\ncsharp_indent_case_contents_when_block = true\ncsharp_indent_switch_labels = true\ncsharp_indent_labels = one_less_than_current\n\n# Modifier preferences\ncsharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion\n\n# avoid this. unless absolutely necessary\ndotnet_style_qualification_for_field = false:suggestion\ndotnet_style_qualification_for_property = false:suggestion\ndotnet_style_qualification_for_method = false:suggestion\ndotnet_style_qualification_for_event = false:suggestion\n\n# only use var when it's obvious what the variable type is\ncsharp_style_var_for_built_in_types = true:suggestion\ncsharp_style_var_when_type_is_apparent = true:suggestion\ncsharp_style_var_elsewhere = true:suggestion\n\n# prefer C# premade types.\ndotnet_style_predefined_type_for_locals_parameters_members = true:suggestion\ndotnet_style_predefined_type_for_member_access = true:suggestion\n\n# TO BE REVIEWED\n# dotnet_diagnostic.CA2237.severity = none\n\n# name all constant fields using PascalCase\ndotnet_naming_rule.constant_fields_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.constant_fields_should_be_pascal_case.symbols  = constant_fields\ndotnet_naming_rule.constant_fields_should_be_pascal_case.style    = pascal_case_style\ndotnet_naming_symbols.constant_fields.applicable_kinds   = field\ndotnet_naming_symbols.constant_fields.required_modifiers = const\ndotnet_naming_style.pascal_case_style.capitalization = pascal_case\n\n# static fields should have s_ prefix\ndotnet_naming_rule.static_fields_should_have_prefix.severity = none\ndotnet_naming_rule.static_fields_should_have_prefix.symbols  = static_fields\ndotnet_naming_rule.static_fields_should_have_prefix.style    = static_prefix_style\ndotnet_naming_symbols.static_fields.applicable_kinds   = field\ndotnet_naming_symbols.static_fields.required_modifiers = static\ndotnet_naming_symbols.static_fields.applicable_accessibilities = private, internal, private_protected\ndotnet_naming_style.static_prefix_style.required_prefix = _\ndotnet_naming_style.static_prefix_style.capitalization = camel_case\n\n# internal and private fields should be _camelCase\ndotnet_naming_rule.camel_case_for_private_internal_fields.severity = suggestion\ndotnet_naming_rule.camel_case_for_private_internal_fields.symbols  = private_internal_fields\ndotnet_naming_rule.camel_case_for_private_internal_fields.style    = camel_case_underscore_style\ndotnet_naming_symbols.private_internal_fields.applicable_kinds = field\ndotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private, internal\ndotnet_naming_style.camel_case_underscore_style.required_prefix = _\ndotnet_naming_style.camel_case_underscore_style.capitalization = camel_case\n\n# Code style defaults\ncsharp_using_directive_placement = outside_namespace:suggestion\ndotnet_sort_system_directives_first = true\ncsharp_prefer_braces = true:silent\ncsharp_preserve_single_line_blocks = true:none\ncsharp_preserve_single_line_statements = false:none\ncsharp_prefer_static_local_function = true:suggestion\ncsharp_prefer_simple_using_statement = false:none\ncsharp_style_prefer_switch_expression = true:suggestion\ncsharp_style_namespace_declarations = block_scoped:silent\ncsharp_style_prefer_method_group_conversion = true:silent\ncsharp_style_prefer_top_level_statements = true:silent\ncsharp_style_prefer_primary_constructors = true:suggestion\ndotnet_style_prefer_collection_expression = true:suggestion\ndotnet_style_operator_placement_when_wrapping = beginning_of_line\n\n# Code quality\ndotnet_style_readonly_field = true:suggestion\ndotnet_code_quality_unused_parameters = non_public:suggestion\n\n# Expression-level preferences\ndotnet_style_object_initializer = true:suggestion\ndotnet_style_collection_initializer = true:suggestion\ndotnet_style_explicit_tuple_names = true:suggestion\ndotnet_style_coalesce_expression = true:suggestion\ndotnet_style_null_propagation = true:suggestion\ndotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion\ndotnet_style_prefer_inferred_tuple_names = true:suggestion\ndotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion\ndotnet_style_prefer_auto_properties = true:suggestion\ndotnet_style_prefer_conditional_expression_over_assignment = true:silent\ndotnet_style_prefer_conditional_expression_over_return = true:silent\ncsharp_prefer_simple_default_expression = true:suggestion\ndotnet_style_prefer_simplified_boolean_expressions = true:suggestion\ndotnet_style_prefer_compound_assignment = true:suggestion\ndotnet_style_prefer_simplified_interpolation = true:suggestion\ndotnet_style_namespace_match_folder = true:suggestion\n\n# Expression-bodied members\ncsharp_style_expression_bodied_methods = true:suggestion\ncsharp_style_expression_bodied_constructors = true:suggestion\ncsharp_style_expression_bodied_operators = true:suggestion\ncsharp_style_expression_bodied_properties = true:suggestion\ncsharp_style_expression_bodied_indexers = true:suggestion\ncsharp_style_expression_bodied_accessors = true:suggestion\ncsharp_style_expression_bodied_lambdas = true:suggestion\ncsharp_style_expression_bodied_local_functions = true:suggestion\n\n# Pattern matching\ncsharp_style_pattern_matching_over_is_with_cast_check = true:suggestion\ncsharp_style_pattern_matching_over_as_with_null_check = true:suggestion\ncsharp_style_inlined_variable_declaration = true:suggestion\n\n# Null checking preferences\ncsharp_style_throw_expression = true:suggestion\ncsharp_style_conditional_delegate_call = true:suggestion\n\n# Other features\ncsharp_style_prefer_index_operator = false:none\ncsharp_style_prefer_range_operator = false:none\ncsharp_style_pattern_local_over_anonymous_function = false:none\n\n# Space preferences\ncsharp_space_after_cast = false\ncsharp_space_after_colon_in_inheritance_clause = true\ncsharp_space_after_comma = true\ncsharp_space_after_dot = false\ncsharp_space_after_keywords_in_control_flow_statements = true\ncsharp_space_after_semicolon_in_for_statement = true\ncsharp_space_around_binary_operators = before_and_after\ncsharp_space_around_declaration_statements = do_not_ignore\ncsharp_space_before_colon_in_inheritance_clause = true\ncsharp_space_before_comma = false\ncsharp_space_before_dot = false\ncsharp_space_before_open_square_brackets = false\ncsharp_space_before_semicolon_in_for_statement = false\ncsharp_space_between_empty_square_brackets = false\ncsharp_space_between_method_call_empty_parameter_list_parentheses = false\ncsharp_space_between_method_call_name_and_opening_parenthesis = false\ncsharp_space_between_method_call_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_empty_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_name_and_open_parenthesis = false\ncsharp_space_between_method_declaration_parameter_list_parentheses = false\ncsharp_space_between_parentheses = false\ncsharp_space_between_square_brackets = false\n\n# analyzers\ndotnet_diagnostic.AvoidAsyncVoid.severity = suggestion\n\ndotnet_diagnostic.CA1000.severity = none\ndotnet_diagnostic.CA1001.severity = error\ndotnet_diagnostic.CA1009.severity = error\ndotnet_diagnostic.CA1016.severity = error\ndotnet_diagnostic.CA1030.severity = none\ndotnet_diagnostic.CA1031.severity = none\ndotnet_diagnostic.CA1033.severity = none\ndotnet_diagnostic.CA1036.severity = none\ndotnet_diagnostic.CA1049.severity = error\ndotnet_diagnostic.CA1056.severity = suggestion\ndotnet_diagnostic.CA1060.severity = error\ndotnet_diagnostic.CA1061.severity = error\ndotnet_diagnostic.CA1063.severity = error\ndotnet_diagnostic.CA1065.severity = error\ndotnet_diagnostic.CA1301.severity = error\ndotnet_diagnostic.CA1303.severity = none\ndotnet_diagnostic.CA1308.severity = none\ndotnet_diagnostic.CA1400.severity = error\ndotnet_diagnostic.CA1401.severity = error\ndotnet_diagnostic.CA1403.severity = error\ndotnet_diagnostic.CA1404.severity = error\ndotnet_diagnostic.CA1405.severity = error\ndotnet_diagnostic.CA1410.severity = error\ndotnet_diagnostic.CA1415.severity = error\ndotnet_diagnostic.CA1507.severity = error\ndotnet_diagnostic.CA1710.severity = suggestion\ndotnet_diagnostic.CA1716.severity = suggestion\ndotnet_diagnostic.CA1724.severity = none\ndotnet_diagnostic.CA1801.severity = error\ndotnet_diagnostic.CA1810.severity = none\ndotnet_diagnostic.CA1821.severity = error\ndotnet_diagnostic.CA1900.severity = error\ndotnet_diagnostic.CA1901.severity = error\ndotnet_diagnostic.CA2000.severity = none\ndotnet_diagnostic.CA2002.severity = error\ndotnet_diagnostic.CA2007.severity = none\ndotnet_diagnostic.CA2100.severity = error\ndotnet_diagnostic.CA2101.severity = error\ndotnet_diagnostic.CA2108.severity = error\ndotnet_diagnostic.CA2111.severity = error\ndotnet_diagnostic.CA2112.severity = error\ndotnet_diagnostic.CA2114.severity = error\ndotnet_diagnostic.CA2116.severity = error\ndotnet_diagnostic.CA2117.severity = error\ndotnet_diagnostic.CA2122.severity = error\ndotnet_diagnostic.CA2123.severity = error\ndotnet_diagnostic.CA2124.severity = error\ndotnet_diagnostic.CA2126.severity = error\ndotnet_diagnostic.CA2131.severity = error\ndotnet_diagnostic.CA2132.severity = error\ndotnet_diagnostic.CA2133.severity = error\ndotnet_diagnostic.CA2134.severity = error\ndotnet_diagnostic.CA2137.severity = error\ndotnet_diagnostic.CA2138.severity = error\ndotnet_diagnostic.CA2140.severity = error\ndotnet_diagnostic.CA2141.severity = error\ndotnet_diagnostic.CA2146.severity = error\ndotnet_diagnostic.CA2147.severity = error\ndotnet_diagnostic.CA2149.severity = error\ndotnet_diagnostic.CA2200.severity = error\ndotnet_diagnostic.CA2202.severity = error\ndotnet_diagnostic.CA2207.severity = error\ndotnet_diagnostic.CA2212.severity = error\ndotnet_diagnostic.CA2213.severity = error\ndotnet_diagnostic.CA2214.severity = error\ndotnet_diagnostic.CA2216.severity = error\ndotnet_diagnostic.CA2220.severity = error\ndotnet_diagnostic.CA2229.severity = error\ndotnet_diagnostic.CA2231.severity = error\ndotnet_diagnostic.CA2232.severity = error\ndotnet_diagnostic.CA2235.severity = error\ndotnet_diagnostic.CA2236.severity = error\ndotnet_diagnostic.CA2237.severity = error\ndotnet_diagnostic.CA2238.severity = error\ndotnet_diagnostic.CA2240.severity = error\ndotnet_diagnostic.CA2241.severity = error\ndotnet_diagnostic.CA2242.severity = error\n\ndotnet_diagnostic.RCS1001.severity = error\ndotnet_diagnostic.RCS1018.severity = error\ndotnet_diagnostic.RCS1037.severity = error\ndotnet_diagnostic.RCS1055.severity = error\ndotnet_diagnostic.RCS1062.severity = error\ndotnet_diagnostic.RCS1066.severity = error\ndotnet_diagnostic.RCS1069.severity = error\ndotnet_diagnostic.RCS1071.severity = error\ndotnet_diagnostic.RCS1074.severity = error\ndotnet_diagnostic.RCS1090.severity = error\ndotnet_diagnostic.RCS1138.severity = error\ndotnet_diagnostic.RCS1139.severity = error\ndotnet_diagnostic.RCS1163.severity = suggestion\ndotnet_diagnostic.RCS1168.severity = suggestion\ndotnet_diagnostic.RCS1188.severity = error\ndotnet_diagnostic.RCS1201.severity = error\ndotnet_diagnostic.RCS1207.severity = error\ndotnet_diagnostic.RCS1211.severity = error\ndotnet_diagnostic.RCS1507.severity = error\n\ndotnet_diagnostic.SA1000.severity = error\ndotnet_diagnostic.SA1001.severity = error\ndotnet_diagnostic.SA1002.severity = none\ndotnet_diagnostic.SA1003.severity = error\ndotnet_diagnostic.SA1004.severity = error\ndotnet_diagnostic.SA1005.severity = error\ndotnet_diagnostic.SA1006.severity = error\ndotnet_diagnostic.SA1007.severity = error\ndotnet_diagnostic.SA1008.severity = error\ndotnet_diagnostic.SA1009.severity = none\ndotnet_diagnostic.SA1010.severity = none\ndotnet_diagnostic.SA1011.severity = error\ndotnet_diagnostic.SA1012.severity = error\ndotnet_diagnostic.SA1013.severity = error\ndotnet_diagnostic.SA1014.severity = error\ndotnet_diagnostic.SA1015.severity = error\ndotnet_diagnostic.SA1016.severity = error\ndotnet_diagnostic.SA1017.severity = error\ndotnet_diagnostic.SA1018.severity = error\ndotnet_diagnostic.SA1019.severity = error\ndotnet_diagnostic.SA1020.severity = error\ndotnet_diagnostic.SA1021.severity = error\ndotnet_diagnostic.SA1022.severity = error\ndotnet_diagnostic.SA1023.severity = error\ndotnet_diagnostic.SA1024.severity = error\ndotnet_diagnostic.SA1025.severity = error\ndotnet_diagnostic.SA1026.severity = error\ndotnet_diagnostic.SA1027.severity = error\ndotnet_diagnostic.SA1028.severity = error\ndotnet_diagnostic.SA1100.severity = error\ndotnet_diagnostic.SA1101.severity = none\ndotnet_diagnostic.SA1102.severity = error\ndotnet_diagnostic.SA1103.severity = error\ndotnet_diagnostic.SA1104.severity = error\ndotnet_diagnostic.SA1105.severity = error\ndotnet_diagnostic.SA1106.severity = error\ndotnet_diagnostic.SA1107.severity = error\ndotnet_diagnostic.SA1108.severity = error\ndotnet_diagnostic.SA1110.severity = error\ndotnet_diagnostic.SA1111.severity = error\ndotnet_diagnostic.SA1112.severity = error\ndotnet_diagnostic.SA1113.severity = error\ndotnet_diagnostic.SA1114.severity = none\ndotnet_diagnostic.SA1115.severity = error\ndotnet_diagnostic.SA1116.severity = none\ndotnet_diagnostic.SA1117.severity = error\ndotnet_diagnostic.SA1118.severity = none\ndotnet_diagnostic.SA1119.severity = error\ndotnet_diagnostic.SA1120.severity = error\ndotnet_diagnostic.SA1121.severity = error\ndotnet_diagnostic.SA1122.severity = error\ndotnet_diagnostic.SA1123.severity = error\ndotnet_diagnostic.SA1124.severity = error\ndotnet_diagnostic.SA1125.severity = error\ndotnet_diagnostic.SA1127.severity = error\ndotnet_diagnostic.SA1128.severity = error\ndotnet_diagnostic.SA1129.severity = error\ndotnet_diagnostic.SA1130.severity = error\ndotnet_diagnostic.SA1131.severity = error\ndotnet_diagnostic.SA1132.severity = error\ndotnet_diagnostic.SA1133.severity = error\ndotnet_diagnostic.SA1134.severity = error\ndotnet_diagnostic.SA1135.severity = error\ndotnet_diagnostic.SA1136.severity = error\ndotnet_diagnostic.SA1137.severity = error\ndotnet_diagnostic.SA1139.severity = error\ndotnet_diagnostic.SA1200.severity = none\ndotnet_diagnostic.SA1201.severity = none\ndotnet_diagnostic.SA1202.severity = none\ndotnet_diagnostic.SA1203.severity = none\ndotnet_diagnostic.SA1204.severity = none\ndotnet_diagnostic.SA1205.severity = error\ndotnet_diagnostic.SA1206.severity = error\ndotnet_diagnostic.SA1207.severity = error\ndotnet_diagnostic.SA1208.severity = error\ndotnet_diagnostic.SA1209.severity = error\ndotnet_diagnostic.SA1210.severity = error\ndotnet_diagnostic.SA1211.severity = error\ndotnet_diagnostic.SA1212.severity = error\ndotnet_diagnostic.SA1213.severity = error\ndotnet_diagnostic.SA1214.severity = error\ndotnet_diagnostic.SA1216.severity = error\ndotnet_diagnostic.SA1217.severity = error\ndotnet_diagnostic.SA1300.severity = error\ndotnet_diagnostic.SA1302.severity = error\ndotnet_diagnostic.SA1303.severity = error\ndotnet_diagnostic.SA1304.severity = error\ndotnet_diagnostic.SA1306.severity = none\ndotnet_diagnostic.SA1307.severity = error\ndotnet_diagnostic.SA1308.severity = error\ndotnet_diagnostic.SA1309.severity = none\ndotnet_diagnostic.SA1310.severity = error\ndotnet_diagnostic.SA1311.severity = none\ndotnet_diagnostic.SA1312.severity = error\ndotnet_diagnostic.SA1313.severity = error\ndotnet_diagnostic.SA1314.severity = error\ndotnet_diagnostic.SA1316.severity = none\ndotnet_diagnostic.SA1400.severity = error\ndotnet_diagnostic.SA1401.severity = error\ndotnet_diagnostic.SA1402.severity = none\ndotnet_diagnostic.SA1403.severity = error\ndotnet_diagnostic.SA1404.severity = error\ndotnet_diagnostic.SA1405.severity = error\ndotnet_diagnostic.SA1406.severity = error\ndotnet_diagnostic.SA1407.severity = error\ndotnet_diagnostic.SA1408.severity = error\ndotnet_diagnostic.SA1410.severity = error\ndotnet_diagnostic.SA1411.severity = error\ndotnet_diagnostic.SA1413.severity = none\ndotnet_diagnostic.SA1500.severity = error\ndotnet_diagnostic.SA1501.severity = error\ndotnet_diagnostic.SA1502.severity = error\ndotnet_diagnostic.SA1503.severity = none\ndotnet_diagnostic.SA1504.severity = error\ndotnet_diagnostic.SA1505.severity = error\ndotnet_diagnostic.SA1506.severity = error\ndotnet_diagnostic.SA1507.severity = error\ndotnet_diagnostic.SA1508.severity = error\ndotnet_diagnostic.SA1509.severity = error\ndotnet_diagnostic.SA1510.severity = error\ndotnet_diagnostic.SA1511.severity = error\ndotnet_diagnostic.SA1512.severity = none\ndotnet_diagnostic.SA1513.severity = none\ndotnet_diagnostic.SA1514.severity = error\ndotnet_diagnostic.SA1515.severity = none\ndotnet_diagnostic.SA1516.severity = error\ndotnet_diagnostic.SA1517.severity = error\ndotnet_diagnostic.SA1518.severity = error\ndotnet_diagnostic.SA1519.severity = error\ndotnet_diagnostic.SA1520.severity = error\ndotnet_diagnostic.SA1600.severity = error\ndotnet_diagnostic.SA1601.severity = error\ndotnet_diagnostic.SA1602.severity = error\ndotnet_diagnostic.SA1604.severity = error\ndotnet_diagnostic.SA1605.severity = error\ndotnet_diagnostic.SA1606.severity = error\ndotnet_diagnostic.SA1607.severity = error\ndotnet_diagnostic.SA1608.severity = error\ndotnet_diagnostic.SA1610.severity = error\ndotnet_diagnostic.SA1611.severity = error\ndotnet_diagnostic.SA1612.severity = error\ndotnet_diagnostic.SA1613.severity = error\ndotnet_diagnostic.SA1614.severity = error\ndotnet_diagnostic.SA1615.severity = error\ndotnet_diagnostic.SA1616.severity = error\ndotnet_diagnostic.SA1617.severity = error\ndotnet_diagnostic.SA1618.severity = error\ndotnet_diagnostic.SA1619.severity = error\ndotnet_diagnostic.SA1620.severity = error\ndotnet_diagnostic.SA1621.severity = error\ndotnet_diagnostic.SA1622.severity = error\ndotnet_diagnostic.SA1623.severity = none\ndotnet_diagnostic.SA1624.severity = error\ndotnet_diagnostic.SA1625.severity = error\ndotnet_diagnostic.SA1626.severity = error\ndotnet_diagnostic.SA1627.severity = error\ndotnet_diagnostic.SA1629.severity = error\ndotnet_diagnostic.SA1633.severity = error\ndotnet_diagnostic.SA1634.severity = error\ndotnet_diagnostic.SA1635.severity = error\ndotnet_diagnostic.SA1636.severity = error\ndotnet_diagnostic.SA1637.severity = none\ndotnet_diagnostic.SA1638.severity = none\ndotnet_diagnostic.SA1640.severity = error\ndotnet_diagnostic.SA1641.severity = error\ndotnet_diagnostic.SA1642.severity = error\ndotnet_diagnostic.SA1643.severity = error\ndotnet_diagnostic.SA1649.severity = error\ndotnet_diagnostic.SA1651.severity = error\n\ndotnet_diagnostic.SX1101.severity = error\ndotnet_diagnostic.SX1309.severity = error\ndotnet_diagnostic.SX1309S.severity=silent\ndotnet_diagnostic.SX1623.severity = none\ndotnet_diagnostic.RCS1102.severity=error\ndotnet_diagnostic.RCS1166.severity=error\ndotnet_diagnostic.RCS1078i.severity=error\ndotnet_diagnostic.RCS1248.severity=error\ndotnet_diagnostic.RCS1080.severity=error\ndotnet_diagnostic.RCS1077.severity=error\ndotnet_diagnostic.CA1825.severity=error\ndotnet_diagnostic.CA1812.severity=error\ndotnet_diagnostic.CA1805.severity=error\ndotnet_diagnostic.RCS1194.severity = none\ndotnet_diagnostic.RCS1197.severity=error\ndotnet_diagnostic.RCS1198.severity=none\ndotnet_diagnostic.RCS1231.severity=suggestion\ndotnet_diagnostic.RCS1235.severity=error\ndotnet_diagnostic.RCS1242.severity=error\ndotnet_diagnostic.CA2016.severity=warning\ndotnet_diagnostic.CA2014.severity=error\ndotnet_diagnostic.RCS1010.severity=error\ndotnet_diagnostic.RCS1006.severity=suggestion\ndotnet_diagnostic.RCS1005.severity=error\ndotnet_diagnostic.RCS1020.severity=error\ndotnet_diagnostic.RCS1049.severity=warning\ndotnet_diagnostic.RCS1058.severity=warning\ndotnet_diagnostic.RCS1068.severity=warning\ndotnet_diagnostic.RCS1073.severity=warning\ndotnet_diagnostic.RCS1084.severity=error\ndotnet_diagnostic.RCS1085.severity=none\ndotnet_diagnostic.RCS1105.severity=error\ndotnet_diagnostic.RCS1112.severity=error\ndotnet_diagnostic.RCS1128.severity=error\ndotnet_diagnostic.RCS1143.severity=error\ndotnet_diagnostic.RCS1171.severity=error\ndotnet_diagnostic.RCS1173.severity=error\ndotnet_diagnostic.RCS1176.severity=error\ndotnet_diagnostic.RCS1177.severity=error\ndotnet_diagnostic.RCS1179.severity=error\ndotnet_diagnostic.RCS1180.severity=warning\ndotnet_diagnostic.RCS1190.severity=error\ndotnet_diagnostic.RCS1195.severity=error\ndotnet_diagnostic.RCS1214.severity=error\n\ndotnet_diagnostic.IDE1006.severity=none\n\n# C++ Files\n[*.{cpp,h,in}]\ncurly_bracket_next_line = true\nindent_brace_style = Allman\n\n# Xml project files\n[*.{csproj,vcxproj,vcxproj.filters,proj,nativeproj,locproj}]\nindent_size = 2\n\n# Xml build files\n[*.builds]\nindent_size = 2\n\n# Xml files\n[*.{xml,stylecop,resx,ruleset}]\nindent_size = 2\n\n# Xml config files\n[*.{props,targets,config,nuspec}]\nindent_size = 2\n\n# Shell scripts\n[*.sh]\nend_of_line = lf\n[*.{cmd, bat}]\nend_of_line = crlf\n\nvsspell_dictionary_languages = en-US\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 6.169921875,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.rsuser\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Mono auto generated files\nmono_crash.*\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\n[Ww][Ii][Nn]32/\n[Aa][Rr][Mm]/\n[Aa][Rr][Mm]64/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n[Ll]ogs/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUnit\n*.VisualState.xml\nTestResult.xml\nnunit-*.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n# ASP.NET Scaffolding\nScaffoldingReadMe.txt\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_h.h\n*.ilk\n*.meta\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*_wpftmp.csproj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/*\n!.axoCover/settings.json\n\n# Coverlet is a free, cross platform Code Coverage Tool\ncoverage*.json\ncoverage*.xml\ncoverage*.info\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# NuGet Symbol Packages\n*.snupkg\n# The packages folder can be ignored because of Package Restore\n**/[Pp]ackages/*\n# except build/, which is used as an MSBuild target.\n!**/[Pp]ackages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/[Pp]ackages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n*.appxbundle\n*.appxupload\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!?*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk\n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n*- [Bb]ackup.rdl\n*- [Bb]ackup ([0-9]).rdl\n*- [Bb]ackup ([0-9][0-9]).rdl\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# CodeRush personal settings\n.cr/personal\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output\nASALocalRun/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder\n.mfractor/\n\n# Local History for Visual Studio\n.localhistory/\n\n# BeatPulse healthcheck temp database\nhealthchecksdb\n\n# Backup folder for Package Reference Convert tool in Visual Studio 2017\nMigrationBackup/\n\n# Ionide (cross platform F# VS Code tools) working folder\n.ionide/\n\n# Fody - auto-generated XML schema\nFodyWeavers.xsd\n\n# macOS\t\n.DS_Store\t\n\n# API Tests\nsrc/*.Tests/API/ApiApprovalTests.*.received.txt\n\n# JetBrains\n.idea/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0830078125,
          "content": "The MIT License (MIT)\n\nCopyright (c) Roland Pheasant 2011-2022\n\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "NonProduction",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 23.33203125,
          "content": "![Build](https://github.com/reactivemarbles/DynamicData/workflows/Build/badge.svg) [![Coverage](https://sonarcloud.io/api/project_badges/measure?project=reactivemarbles_DynamicData&metric=coverage)](https://sonarcloud.io/summary/new_code?id=reactivemarbles_DynamicData) [![Reliability Rating](https://sonarcloud.io/api/project_badges/measure?project=reactivemarbles_DynamicData&metric=reliability_rating)](https://sonarcloud.io/summary/new_code?id=reactivemarbles_DynamicData) [![Duplicated Lines (%)](https://sonarcloud.io/api/project_badges/measure?project=reactivemarbles_DynamicData&metric=duplicated_lines_density)](https://sonarcloud.io/summary/new_code?id=reactivemarbles_DynamicData) [![Vulnerabilities](https://sonarcloud.io/api/project_badges/measure?project=reactivemarbles_DynamicData&metric=vulnerabilities)](https://sonarcloud.io/summary/new_code?id=reactivemarbles_DynamicData) [![Security Rating](https://sonarcloud.io/api/project_badges/measure?project=reactivemarbles_DynamicData&metric=security_rating)](https://sonarcloud.io/summary/new_code?id=reactivemarbles_DynamicData)\n<a href=\"https://reactiveui.net/slack\">\n        <img src=\"https://img.shields.io/badge/chat-slack-blue.svg\">\n</a>\n[![NuGet Stats](https://img.shields.io/nuget/v/DynamicData.svg)](https://www.nuget.org/packages/DynamicData) ![Downloads](https://img.shields.io/nuget/dt/DynamicData.svg)\n<br />\n<br />\n<a href=\"https://github.com/reactiveui/DynamicData\">\n        <img width=\"170\" height=\"170\" src=\"https://github.com/reactiveui/styleguide/blob/master/logo_dynamic_data/logo.svg\"/>\n</a>\n\n## Dynamic Data\n\nDynamic Data is a portable class library which brings the power of Reactive Extensions (Rx) to collections.  \n\nRx is extremely powerful but out of the box provides nothing to assist with managing collections.  In most applications there is a need to update the collections dynamically.  Typically a collection is loaded and after the initial load, asynchronous updates are received.  The original collection will need to reflect these changes. In simple scenarios the code is simple. However, typical applications are much more complicated and may apply a filter, transform the original dto and apply a sort. Even with these simple every day operations the complexity of the code is quickly magnified.  Dynamic data has been developed to remove the tedious code of dynamically maintaining collections. It has grown to become functionally very rich with at least 60 collection based operations which amongst other things enable filtering, sorting, grouping,  joining different sources,  transforms, binding, pagination, data virtualisation, expiration, disposal management plus more.  \n\nThe concept behind using dynamic data is you maintain a data source (either ```SourceCache<TObject, TKey>``` or  ```SourceList<TObject>```),  then chain together various combinations of operators to declaratively manipulate and shape the data without the need to directly manage any collection.   \n\nAs an example the following code will filter trades to select only live trades, creates a proxy for each live trade, and finally orders the results by most recent first. The resulting trade proxies are bound on the dispatcher thread to an observable collection.  Also since  the proxy is disposable ```DisposeMany()``` will ensure the proxy is disposed when no longer used.\n\n```cs\nReadOnlyObservableCollection<TradeProxy> list;\n\nvar myTradeCache = new SourceCache<Trade, long>(trade => trade.Id);\nvar myOperation = myTradeCache.Connect() \n\t\t.Filter(trade=>trade.Status == TradeStatus.Live) \n\t\t.Transform(trade => new TradeProxy(trade))\n\t\t.Sort(SortExpressionComparer<TradeProxy>.Descending(t => t.Timestamp))\n\t\t.ObserveOnDispatcher()\n\t\t.Bind(out list) \n\t\t.DisposeMany()\n\t\t.Subscribe()\n```\nThe magic is that as  ```myTradeCache``` is maintained the target observable collection looks after itself.\n\nThis is a simple example to show how using Dynamic Data's collections and operators make in-memory data management extremely easy and can reduce the size and complexity of your code base by abstracting complicated and often repetitive operations.\n\n### Sample Projects \n\n- Sample WPF project trading project [Dynamic Trader](https://github.com/RolandPheasant/Dynamic.Trader)\n- Various unit tested examples of many different operators [Snippets](https://github.com/RolandPheasant/DynamicData.Snippets)\n- [Tail Blazer](https://github.com/RolandPheasant/TailBlazer) for tailing files \n\n### Get in touch \n\nIf you have any questions, want to get involved or would simply like to keep abreast of developments, you are welcome to join the slack community [Reactive UI Slack](https://reactiveui.net/slack). I am also available [@RolandPheasant](https://twitter.com/RolandPheasant) \nThere is a blog at  https://dynamic-data.org/ but alas it is hopelessly out of date.\n\n## Table of Contents\n\n* [Dynamic Data](#dynamic-data)\n  * [Sample Projects](#sample-projects)\n  * [Get in touch](#get-in-touch)\n* [Table of Contents](#table-of-contents)\n* [Create Dynamic Data Collections](#create-dynamic-data-collections)\n  * [The Observable List](#the-observable-list)\n  * [The Observable Cache](#the-observable-cache)\n* [Creating Observable Change Sets](#creating-observable-change-sets)\n  * [Connect to a Cache or List](#connect-to-a-cache-or-list)\n  * [Create an Observable Change Set from an Rx Observable](#create-an-observable-change-set-from-an-rx-observable)\n  * [Create an Observable Change Set from an Rx Observable with an Expiring Cache](#create-an-observable-change-set-from-an-rx-observable-with-an-expiring-cache)\n  * [Create an Observable Change Set from an Observable Collection](#create-an-observable-change-set-from-an-observable-collection)\n  * [Create an Observable Change Set from an Binding List](#create-an-observable-change-set-from-an-binding-list)\n  * [Using the ObservableChangeSet static class](#using-the-observablechangeset-static-class)\n* [Consuming Observable Change Sets](#consuming-observable-change-sets)\n* [Observable list vs observable cache](#observable-list-vs-observable-cache)\n* [History of Dynamic Data](#history-of-dynamic-data)\n* [Want to know more?](#want-to-know-more)\n\n## Create Dynamic Data Collections\n\n### The Observable List\n\nCreate an observable list like this:\n```cs\nvar myInts = new SourceList<int>();\n```\nThe observable list provides the direct edit methods you would expect. For example:\n```cs\nmyInts.AddRange(Enumerable.Range(0, 10000)); \nmyInts.Add(99999); \nmyInts.Remove(99999);\n```\nThe `AddRange`, `Add` and `Remove` methods above will each produce a distinct change notification.  In order to increase efficiency when making multiple amendments, the list provides a means of batch editing. This is achieved using the `.Edit` method which ensures only a single change notification is produced.\n```cs\nmyInts.Edit(innerList =>\n{\n   innerList.Clear();\n   innerList.AddRange(Enumerable.Range(0, 10000));\n});\n```\nIf ``myInts`` is to be exposed publicly it can be made read only using `.AsObservableList`\n```cs\nIObservableList<int> readonlyInts = myInts.AsObservableList();\n```\nwhich hides the edit methods.\n\nThe list's changes can be observed by calling `myInts.Connect()` like this:\n```cs\nIObservable<IChangeSet<int>> myIntsObservable = myInts.Connect();\n```\nThis creates an observable change set for which there are dozens of operators. The changes are transmitted as an Rx observable, so they are fluent and composable.\n\n### The Observable Cache\n\nCreate an observable cache like this:\n```cs\nvar myCache = new SourceCache<TObject,TKey>(t => key);\n```\nThere are direct edit methods, for example\n\n```cs\nmyCache.Clear();\nmyCache.AddOrUpdate(myItems);\n```\nThe `Clear` and `AddOrUpdate` methods above will each produce a distinct change notification.  In order to increase efficiency when making multiple amendments, the cache provides a means of batch editing. This is achieved using the `.Edit` method which ensures only a single change notification is produced.\n\n```cs\nmyCache.Edit(innerCache =>\n\t\t\t  {\n\t\t\t      innerCache.Clear();\n\t\t\t      innerCache.AddOrUpdate(myItems);\n\t\t\t  });\n```\nIf `myCache` is to be exposed publicly it can be made read only using `.AsObservableCache`\n\n```cs\nIObservableCache<TObject,TKey> readonlyCache = myCache.AsObservableCache();\n```\nwhich hides the edit methods.\n\nThe cache is observed by calling `myCache.Connect()` like this:\n```cs\nIObservable<IChangeSet<TObject,TKey>> myCacheObservable = myCache.Connect();\n```\nThis creates an observable change set for which there are dozens of operators. The changes are transmitted as an Rx observable, so they are fluent and composable.\n\n## Creating Observable Change Sets\nAs stated in the introduction of this document, Dynamic Data is based on the concept of creating and manipulating observable change sets. \n\nThe primary method of creating observable change sets is to connect to instances of `ISourceCache<T,K>` and `ISourceList<T>`. There are alternative methods to produce observables change sets however, depending on the data source.\n\n### Connect to a Cache or List\nCalling `Connect()` on a `ISourceList<T>` or `ISourceCache<T,K>` will produce an observable change set. \n```cs\nvar myObservableChangeSet = myDynamicDataSource.Connect();\n```\n\n### Create an Observable Change Set from an Rx Observable\nGiven either of the following observables:\n```cs\nIObservable<T> myObservable;\nIObservable<IEnumerable<T>> myObservable;\n```\nan observable change set can be created like by calling `.ToObservableChangeSet` like this:\n```cs\nvar myObservableChangeSet = myObservable.ToObservableChangeSet(t=> t.key);\n```\n\n### Create an Observable Change Set from an Rx Observable with an Expiring Cache\nThe problem with the example above is that the internal backing cache of the observable change set will grow in size forever. \nTo counter this behavior, there are overloads of `.ToObservableChangeSet` where a size limitation or expiry time can be specified for the internal cache.\n\nTo create a time expiring cache, call `.ToObservableChangeSet` and specify the expiry time using the expireAfter argument:\n```cs\nvar myConnection = myObservable.ToObservableChangeSet(t=> t.key, expireAfter: item => TimeSpan.FromHours(1));\n```\n\nTo create a size limited cache, call `.ToObservableChangeSet` and specify the size limit using the limitSizeTo argument:\n```cs\nvar myConnection = myObservable.ToObservableChangeSet(t=> t.key, limitSizeTo:10000);\n```\nThere is also an overload to specify expiration by both time and size.\n\n### Create an Observable Change Set from an Observable Collection\n```cs\nvar myObservableCollection = new ObservableCollection<T>();\n```\nTo create a cache based observable change set, call `.ToObservableChangeSet` and specify a key selector for the backing cache\n```cs\nvar myConnection = myObservableCollection.ToObservableChangeSet(t => t.Key);\n```\nor to create a list based observable change set call `.ToObservableChangeSet` with no arguments\n```cs\nvar myConnection = myObservableCollection.ToObservableChangeSet();\n```\nThis method is only recommended for simple queries which act only on the UI thread as `ObservableCollection` is not thread safe.\n\n### Create an Observable Change Set from an Binding List\n```cs\nvar myBindingList = new BindingList<T>();\n```\nTo create a cache based observable change set, call `.ToObservableChangeSet` and specify a key selector for the backing cache\n```cs\nvar myConnection = myBindingList.ToObservableChangeSet(t => t.Key);\n```\nor to create a list based observable change set call `.ToObservableChangeSet` with no arguments\n```cs\nvar myConnection = myBindingList.ToObservableChangeSet();\n```\nThis method is only recommended for simple queries which act only on the UI thread as `ObservableCollection` is not thread safe.\n\n### Using the ObservableChangeSet static class\n\nThere is also  another way to create observable change sets, and that is to use the ```ObservableChangeSet``` static class.  This class is a facsimile of the Rx.Net ```Observable``` static class and provides an almost identical API. \n\nAn observable list can be created as follows:\n\n```cs\n  var myObservableList = ObservableChangeSet.Create<int>(observableList =>\n  {\n\t  //some code to load data and subscribe\n      var loader= myService.LoadMyDataObservable().Subscribe(observableList.Add);\n      var subscriber = myService.GetMySubscriptionsObservable().Subscribe(observableList.Add);\n      //dispose of resources\n      return new CompositeDisposable(loader,subscriber );\n  });\n```\nand creating a cache is almost identical except a key has to be specified \n```cs\n  var myObservableCache = ObservableChangeSet.Create<Trade, int>(observableCache =>\n  {\n\t  //code omitted\n  }, trade = > trade.Id);\n```\nThere are several overloads ```ObservableChangeSet.Create``` which match the overloads which ```Observable.Create``` provides.\n\n## Consuming Observable Change Sets\nThe examples below illustrate the kind of things you can achieve after creating an observable change set. \nNow you can create an observable cache or an observable list, here are a few quick fire examples to illustrate the diverse range of things you can do. In all of these examples the resulting sequences always exactly reflect the items is the cache i.e. adds, updates and removes are always propagated.\n\n#### Create a Derived List or Cache\nThis example shows how you can create derived collections from an observable change set. It applies a filter to a collection, and then creates a new observable collection that only contains items from the original collection that pass the filter.\nThis pattern is incredibly useful when you want to make modifications to an existing collection and then expose the modified collection to consumers. \n\nEven though the code in this example is very simple, this is one of the most powerful aspects of Dynamic Data. \n\nGiven a SourceList \n```cs\nvar myList = new SourceList<People>();\n```\nYou can apply operators, in this case the `Filter()` operator, and then create a new observable list with `AsObservableList()`\n```cs\nvar oldPeople = myList.Connect().Filter(person => person.Age > 65).AsObservableList();\n```\nThe resulting observable list, oldPeople, will only contain people who are older than 65.\n\nThe same pattern can be used with SourceCache by using `.AsObservableCache()` to create derived caches.\n\nAs an alternative to `.Bind(out collection)` you can use `.BindToObservableList(out observableList)` for both `SourceList` & `SourceCache`. This is useful for getting derived read-only lists from sources that use `.AutoRefresh()`, since collections do not support refresh notifications.\n\n#### Filtering\nFilter the observable change set by using the `Filter` operator\n```cs\nvar myPeople = new SourceList<People>();\nvar myPeopleObservable = myPeople.Connect();\n\nvar myFilteredObservable = myPeopleObservable.Filter(person => person.Age > 50); \n```\nor to filter a change set dynamically \n```cs\nIObservable<Func<Person,bool>> observablePredicate=...;\nvar myFilteredObservable = myPeopleObservable.Filter(observablePredicate); \n```\n\n#### Sorting\nSort the observable change set by using the `Sort` operator\n```cs\nvar myPeople = new SourceList<People>();\nvar myPeopleObservable = myPeople.Connect();\nvar mySortedObservable = myPeopleObservable.Sort(SortExpressionComparer.Ascending(p => p.Age)); \n```\nor to dynamically change sorting\n```cs\nIObservable<IComparer<Person>> observableComparer=...;\nvar mySortedObservable = myPeopleObservable.Sort(observableComparer);\n```\nFor more information on sorting see [wiki](https://github.com/RolandPheasant/DynamicData/wiki/Sorting)\n\n#### Grouping\nThe `GroupOn` operator pre-caches the specified groups according to the group selector.\n```cs\nvar myOperation = personChangeSet.GroupOn(person => person.Status)\n```\nThe value of the inner group is represented by an observable list for each matched group. When values matching the inner grouping are modified, it is the inner group which produces the changes.\nYou can also use `GroupWithImmutableState` which will produce a grouping who's inner items are a fixed size array.\n\n#### Transformation\nThe `Transform` operator allows you to map objects from the observable change set to another object\n```cs\nvar myPeople = new SourceList<People>();\nvar myPeopleObservable = myPeople.Connect();\nvar myTransformedObservable = myPeopleObservable.Transform(person => new PersonProxy(person));\n```\n\nThe `TransformToTree` operator allows you to create a fully formed reactive tree (only available for observable cache)\n```cs\nvar myPeople = new SourceCache<Person, string>(p => p.Name);\nvar myTransformedObservable = myPeople.Connect().TransformToTree(person => person.BossId);\n```\n\n\nFlatten a child enumerable\n```cs\nvar myOperation = personChangeSet.TransformMany(person => person.Children) \n```\n\n#### Aggregation\nThe `Count`, `Max`, `Min`, `Avg`, and `StdDev` operators allow you to perform aggregate functions on observable change sets\n```cs\nvar myPeople = new SourceList<People>();\nvar myPeopleObservable = myPeople.Connect();\n\nvar countObservable = \t myPeopleObservable.Count();\nvar maxObservable = \t myPeopleObservable.Max(p => p.Age);\nvar minObservable = \t myPeopleObservable.Min(p => p.Age);\nvar stdDevObservable =   myPeopleObservable.StdDev(p => p.Age);\nvar avgObservable = \t myPeopleObservable.Avg(p => p.Age);\n```\nMore aggregating operators will be added soon.\n\n#### Logical Operators\nThe `And`, `Or`, `Xor` and `Except` operators allow you to perform logical operations on observable change sets\n```cs\nvar peopleA = new SourceCache<Person,string>(p => p.Name);\nvar peopleB = new SourceCache<Person,string>(p => p.Name);\n\nvar observableA = peopleA.Connect();\nvar observableB = peopleB.Connect();\n\nvar inBoth = observableA.And(observableB);\nvar inEither= observableA.Or(observableB);\nvar inOnlyOne= observableA.Xor(observableB);\nvar inAandNotinB = observableA.Except(observableB);\n```\n\nA recent and very powerful feature is dynamic logical operators. From version 4.6 onwards you can dynamically include and exclude collections from the resulting list. \n```cs\nvar list1 = new SourceList<int>();\nvar list2 = new SourceList<int>();\nvar list3  = new SourceList<int>();\n\t\nvar combined = new SourceList<ISourceList<int>>();\n\n//child lists can be added or removed any time\ncombined.Add(list1);\ncombined.Add(list2);\ncombined.Add(list3);\n\n//The operators look after themselves \nvar inAll = combined.And();\nvar inAny = combined.Or();\nvar inOnlyOne= combined.Xor();\nvar inFirstAndNotAnyOther = combined.Except();\n```\nFor more information on grouping see [wiki](https://github.com/RolandPheasant/DynamicData/wiki/Composite-Collections)\n \n\n#### Disposal\nThe `DisposeMany` operator ensures that objects are disposed when removed from an observable stream\n```cs\nvar myPeople = new SourceList<People>();\nvar myPeopleObservable = myPeople.Connect();\nvar myTransformedObservable = myPeopleObservable.Transform(person => new DisposablePersonProxy(person))\n                                                .DisposeMany();\n```\nThe `DisposeMany` operator is typically used when a transform function creates disposable objects.\n\n#### Distinct Values\nThe `DistinctValues` operator will select distinct values from the underlying collection\n```cs\nvar myPeople = new SourceList<People>();\nvar myPeopleObservable = myPeople.Connect();\nvar myDistinctObservable = myPeopleObservable.DistinctValues(person => person.Age);\n```\n\n#### Virtualisation\n\nVirtualise data to restrict by index and segment size\n```cs\nIObservable<IVirtualRequest> request; //request stream\nvar virtualisedStream = someDynamicDataSource.Virtualise(request)\n```\nVirtualise data to restrict by index and page size\n```cs\nIObservable<IPageRequest> request; //request stream\nvar pagedStream = someDynamicDataSource.Page(request)\n```\nIn either of the above, the result is re-evaluated when the request stream changes\n\nTop is an overload of ```Virtualise()``` and will return items matching the first 'n'  items.\n```cs\nvar topStream = someDynamicDataSource.Top(10)\n```\n\n#### Observing Properties of Objects in a Collection\nIf the collection is made up of objects that implement `INotifyPropertyChanged` then the following operators are available\n\nThe `WhenValueChanged` operator returns an observable of the value of the specified property when it has changed\n```cs\nvar ageChanged = peopleDataSource.Connect().WhenValueChanged(p => p.Age)\n```\n\nThe `WhenPropertyChanged` operator returns an observable made up of the value of the specified property as well as it's parent object when the specified property has changed\n```cs\nvar ageChanged = peopleDataSource.Connect().WhenPropertyChanged(p => p.Age)\n```\n\nThe `WhenAnyPropertyChanged` operator returns an observable of objects when any of their properties have changed\n```cs\nvar personChanged = peopleDataSource.Connect().WhenAnyPropertyChanged()\n```\n\n#### Observing item changes\n\nBinding is a very small part of Dynamic Data. The above notify property changed overloads are just an example when binding. If you have a domain object which has children observables you can use ```MergeMany()``` which subscribes to and unsubscribes from items according to collection changes.\n\n```cs\nvar myoperation = somedynamicdatasource.Connect() \n\t\t\t.MergeMany(trade => trade.SomeObservable());\n```\nThis wires and unwires ```SomeObservable``` as the collection changes.\n\n## Observable list vs observable cache\nI get asked about the differences between these a lot and the answer is really simple. If you have a unique id, you should use an observable cache as it is dictionary based which will ensure no duplicates can be added and it notifies on adds, updates and removes, whereas list allows duplicates and only has no concept of an update.\n\nThere is another difference. The cache side of dynamic data is much more mature and has a wider range of operators. Having more operators is mainly because I found it easier to achieve good all round performance with the key based operators and do not want to add anything to Dynamic Data which inherently has poor performance.\n\n## History of Dynamic Data\nEven before Rx existed I had implemented a similar concept using old fashioned events but the code was very ugly and my implementation full of race conditions so it never existed outside of my own private sphere. My second attempt was a similar implementation to the first but using Rx when it first came out. This also failed as my understanding of Rx was flawed and limited and my design forced consumers to implement interfaces.  Then finally I got my design head on and in 2011-ish I started writing what has become dynamic data. No inheritance, no interfaces, just the ability to plug in and use it as you please.  All along I meant to open source it but having so utterly failed on my first 2 attempts I decided to wait until the exact design had settled down. The wait lasted longer than I expected and ended up taking over 2 years but the benefit is it has been trialled for 2 years on a very busy high volume low latency trading system which has seriously complicated data management. And what's more that system has gathered a load of attention for how slick and cool and reliable it is both from the user and IT point of view. So I present this library with the confidence of it being tried, tested, optimised and mature. I hope it can make your life easier like it has done for me.\n\n## Want to know more?\nI could go on endlessly but this is not the place for full documentation.  I promise this will come but for now I suggest downloading my WPF sample app (links at top of document)  as I intend it to be a 'living document' and I promise it will be continually maintained. \n\nAlso, if you follow me on Twitter you will find out when new samples or blog posts have been updated.\n\nAdditionally, if you have read up to here and not pressed star then why not? Ha. A star may make me be more responsive to any requests or queries.\n"
        },
        {
          "name": "ReleaseNotes.md",
          "type": "blob",
          "size": 5.1220703125,
          "content": "The release notes from now on will be contained within https://github.com/reactiveui/DynamicData/releases\n\n### v 6.12.3\n\nFirst release done by the ReactiveUI release process. Release notes are now auto-generated. With the change to the ReactiveUI project there has been a rebranding of the logo. Roland Pheasant is still the main maintainer and copyright owner of the code.\n\n* housekeeping: dont sign the DynamicData packages. [#249](https://github.com/RolandPheasant/DynamicData/pull/234) @glennawatson \n* housekeeping: Correct PackageIconUrl @worldbeater \n* Azure build script, cake script, complying with code standards [#241](https://github.com/RolandPheasant/DynamicData/pull/241) @glennawatson \n* Moved the NuGet icon, removed AppVeyor. @glennawatson \n* Update readme with the new logo/build status. @glennawatson \n* Move files from base directory to /src directory [#242](https://github.com/RolandPheasant/DynamicData/pull/242) @glennawatson \n\n### v 6.11.0\n\nChange aware cache crash - fixed [#234](https://github.com/RolandPheasant/DynamicData/pull/234)\nFixed bug in And operator [#231](https://github.com/RolandPheasant/DynamicData/pull/231)\nTransform to tree issue when adding parent after child fix [#230](https://github.com/RolandPheasant/DynamicData/pull/230)\n\n\n### v 6.10.0\n\nTransform to tree fixes [#230](https://github.com/RolandPheasant/DynamicData/issues/230) and [#225](https://github.com/RolandPheasant/DynamicData/issues/225).\nUse minimum version of Rx = 4.1.5. See [#229](https://github.com/RolandPheasant/DynamicData/pull/229)\n\n### v 6.9.1\n\nFix for transform on refresh overload for source list[#220](https://github.com/RolandPheasant/DynamicData/issues/220).\n\n### v 6.9.0\n\nIntroduction of `Preview` operator which applies to soure cache and source list [#218](https://github.com/RolandPheasant/DynamicData/issues/218). There is a detailed explanation of [in the preview wiki](https://github.com/RolandPheasant/DynamicData/wiki/Preview-observable)\n\nFix crash in parallel transform when value is null [#216](https://github.com/RolandPheasant/DynamicData/pull/216)\n\n### v 6.8.0\n\nUpdate to MsBuild.Sdk.Extras v1.6.68 [#207](https://github.com/RolandPheasant/DynamicData/issues/207)\n\nAdd overload for AddOrUpdate with IEqualityComparer parameter [#204](https://github.com/RolandPheasant/DynamicData/issues/204)\n\nUpdate to latest version of SourceLink in order to compile on mac [#203](https://github.com/RolandPheasant/DynamicData/issues/203)\n\nAdd ToSortedCollection() operator for ObservableCache and ObservableList [#202](https://github.com/RolandPheasant/DynamicData/issues/202)\n\nFix expire after bug [#196](https://github.com/RolandPheasant/DynamicData/issues/196)\n\nAdd overload for TransformMany to support IObservableList [#193](https://github.com/RolandPheasant/DynamicData/issues/193)\n\n### v 6.7.1\n\nCountChanged not working on SourceCache [#188](https://github.com/RolandPheasant/DynamicData/issues/188)\n\n### v 6.7.0\n\nAdded overloads of ```Bind()``` to support binding to ```BindingList``` [#182](https://github.com/RolandPheasant/DynamicData/issues/182)\n\nFix for ```TransformMany``` when a refresh event is received  [#173](https://github.com/RolandPheasant/DynamicData/pull/173)\n\n\n### v 6.6.1\n\nFix for UWP load issue. See additonally comment on [#161](https://github.com/RolandPheasant/DynamicData/issues/161)\n\nDynamic filter with source list not filtering correctly when item is not initially matching filter [#164](https://github.com/RolandPheasant/DynamicData/issues/164)\n\n### v 6.6.0\n\nUpgraded DynamicData.ReactiveUI to use minimum version of ReactiveUI v9.0.1. \nThis effectively marks DynamicData.ReactiveUI as obsolete as it provides apaptors for ReactiveList which is no longer supported by the ReactiveUI team.\n\nSupport for UWP [#161](https://github.com/RolandPheasant/DynamicData/issues/161)\n\n### v 6.5.1\n\nFix locking error in SourceCache internals [#153](https://github.com/RolandPheasant/DynamicData/issues/153)\n\n### v 6.5.0\n\nMemory and performance improvements for the observable cache, which has been achieved by reducing the number of allocations when maintaining state and when creating change sets.\n\nUpdated Dynamic Data to use minimum version of Rx v4.0.0 [#124](https://github.com/RolandPheasant/DynamicData/issues/124)\n\nImproved debugging experience thanks to embedded symbols [#147](https://github.com/RolandPheasant/DynamicData/issues/147) \n\nPerformance improvement for Bind operator in observable list  [#143](https://github.com/RolandPheasant/DynamicData/pull/143)\n\nEnable the creation of an observable change set from any enumerable [#132](https://github.com/RolandPheasant/DynamicData/issues/132)\n\nFix bug in distinct values in observable list [#139](https://github.com/RolandPheasant/DynamicData/issues/139)\n\nFilter(reapplyFilter) throws an ArgumentNullException [#128](https://github.com/RolandPheasant/DynamicData/issues/128)\n\nOnItemAdded and OnItemRemoved for SourceCache [#135](https://github.com/RolandPheasant/DynamicData/pull/135)\n\nAlso a previous PR [#126](https://github.com/RolandPheasant/DynamicData/pull/126) to optimise sorting has been reverted due a bug which caused an occasional crash in in Dynamic Trader. The intention is to fix the bug and restate the PR at a later date\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "nuget.config",
          "type": "blob",
          "size": 0.439453125,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!--\nDO NOT REMOVE THIS FILE\nThere is an issue where the nuget config local cache can play up.\nAlready had similar issues with the local cache and it containing netcore 3.1 packages.\nhttps://github.com/actions/virtual-environments/issues/1090\n-->\n<configuration>\n  <packageSources>\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\n  </packageSources>\n</configuration>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.json",
          "type": "blob",
          "size": 0.4462890625,
          "content": "{\n    \"version\": \"9.0\",\n    \"publicReleaseRefSpec\": [\n        \"^refs/heads/main$\", // we release out of master\n        \"^refs/heads/preview/.*\", // we release previews\n        \"^refs/heads/rel/\\\\d+\\\\.\\\\d+\\\\.\\\\d+\" // we also release branches starting with rel/N.N.N\n    ],\n    \"nugetPackageVersion\": {\n        \"semVer\": 2\n    },\n    \"cloudBuild\": {\n        \"setVersionVariables\": true,\n        \"buildNumber\": {\n            \"enabled\": false\n        }\n    }\n}\n"
        }
      ]
    }
  ]
}