{
  "metadata": {
    "timestamp": 1736710766704,
    "page": 221,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "SuxueCode/WechatBakTool",
      "stars": 3099,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.458984375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 6.1044921875,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.rsuser\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Mono auto generated files\nmono_crash.*\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\n[Ww][Ii][Nn]32/\n[Aa][Rr][Mm]/\n[Aa][Rr][Mm]64/\nbld/\n[Bb]in/\n[Oo]bj/\n[Oo]ut/\n[Ll]og/\n[Ll]ogs/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUnit\n*.VisualState.xml\nTestResult.xml\nnunit-*.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n# ASP.NET Scaffolding\nScaffoldingReadMe.txt\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_h.h\n*.ilk\n*.meta\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*_wpftmp.csproj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/*\n!.axoCover/settings.json\n\n# Coverlet is a free, cross platform Code Coverage Tool\ncoverage*.json\ncoverage*.xml\ncoverage*.info\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# NuGet Symbol Packages\n*.snupkg\n# The packages folder can be ignored because of Package Restore\n**/[Pp]ackages/*\n# except build/, which is used as an MSBuild target.\n!**/[Pp]ackages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/[Pp]ackages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n*.appxbundle\n*.appxupload\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!?*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk\n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n*- [Bb]ackup.rdl\n*- [Bb]ackup ([0-9]).rdl\n*- [Bb]ackup ([0-9][0-9]).rdl\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# CodeRush personal settings\n.cr/personal\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output\nASALocalRun/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder\n.mfractor/\n\n# Local History for Visual Studio\n.localhistory/\n\n# BeatPulse healthcheck temp database\nhealthchecksdb\n\n# Backup folder for Package Reference Convert tool in Visual Studio 2017\nMigrationBackup/\n\n# Ionide (cross platform F# VS Code tools) working folder\n.ionide/\n\n# Fody - auto-generated XML schema\nFodyWeavers.xsd\n/WechatPCMsgBakTool.csproj\n"
        },
        {
          "name": "Analyse.xaml",
          "type": "blob",
          "size": 2.5166015625,
          "content": "ï»¿<Window x:Class=\"WechatBakTool.Analyse\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n        xmlns:local=\"clr-namespace:WechatBakTool\"\n        mc:Ignorable=\"d\"\n        WindowStartupLocation=\"CenterScreen\"\n        Title=\"æº¯éªå¾®ä¿¡å¤ä»½å·¥å·-åæ\" Height=\"450\" Width=\"900\">\n    <Grid>\n        <ListView Name=\"list_msg_group\" Margin=\"41,75,0,19\" HorizontalAlignment=\"Left\" Width=\"420\" SelectionChanged=\"list_msg_group_SelectionChanged\">\n            <ListView.View>\n                <GridView>\n                    <GridViewColumn Header=\"æµç§°\" Width=\"120\" DisplayMemberBinding=\"{Binding NickName}\" />\n                    <GridViewColumn Header=\"åå§ID\" Width=\"120\" DisplayMemberBinding=\"{Binding UserName}\" />\n                    <GridViewColumn Header=\"æ°é\" Width=\"140\" DisplayMemberBinding=\"{Binding MsgCount}\" />\n                </GridView>\n            </ListView.View>\n        </ListView>\n        <Button x:Name=\"btn_analyse\" Content=\"åæ\" HorizontalAlignment=\"Left\" Margin=\"42,43,0,0\" VerticalAlignment=\"Top\" Width=\"72\" Click=\"btn_analyse_Click\"/>\n        <Button x:Name=\"btn_copy_id\" Content=\"å¤å¶id\" HorizontalAlignment=\"Left\" Margin=\"366,43,0,0\" VerticalAlignment=\"Top\" Width=\"94\" Click=\"btn_copy_id_Click\"/>\n\n        <ListView Name=\"list_msg_search\" Margin=\"500,75,0,19\" HorizontalAlignment=\"Left\" Width=\"350\">\n            <ListView.View>\n                <GridView>\n                    <GridViewColumn Header=\"åå§ID\" Width=\"120\" DisplayMemberBinding=\"{Binding StrTalker}\" />\n                    <GridViewColumn Header=\"æ¶æ¯\" Width=\"200\" DisplayMemberBinding=\"{Binding StrContent}\" />\n                </GridView>\n            </ListView.View>\n        </ListView>\n        <TextBox Name=\"txt_search_text\" HorizontalAlignment=\"Left\" Margin=\"574,43,0,0\" TextWrapping=\"Wrap\" Text=\"\" VerticalAlignment=\"Top\" Width=\"120\" Height=\"20\"/>\n        <Label Content=\"æ¶æ¯æç´¢ï¼\" HorizontalAlignment=\"Left\" Margin=\"504,41,0,0\" VerticalAlignment=\"Top\"/>\n        <Button x:Name=\"btn_search\" Content=\"æç´¢\" HorizontalAlignment=\"Left\" Margin=\"708,43,0,0\" VerticalAlignment=\"Top\" Width=\"65\" Click=\"btn_search_Click\" />\n        <Button x:Name=\"btn_search_copy_id\" Content=\"å¤å¶id\" HorizontalAlignment=\"Left\" Margin=\"784,43,0,0\" VerticalAlignment=\"Top\" Width=\"65\" Click=\"btn_search_copy_id_Click\" />\n    </Grid>\n</Window>\n"
        },
        {
          "name": "Analyse.xaml.cs",
          "type": "blob",
          "size": 3.3935546875,
          "content": "ï»¿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Shapes;\nusing WechatBakTool.Model;\n\nnamespace WechatBakTool\n{\n    /// <summary>\n    /// Analyse.xaml çäº¤äºé»è¾\n    /// </summary>\n    public partial class Analyse : Window\n    {\n        private UserBakConfig UserBakConfig;\n        private WXUserReader UserReader;\n        public Analyse(UserBakConfig userBakConfig,WXUserReader reader)\n        {\n            UserBakConfig = userBakConfig;\n            UserReader = reader;\n            InitializeComponent();\n        }\n\n        private void btn_analyse_Click(object sender, RoutedEventArgs e)\n        {\n            var tmp = UserReader.GetWXContacts();\n            List<WXContact> contacts;\n            if (tmp == null)\n                contacts = new List<WXContact>();\n            else\n                contacts = tmp.ToList();\n            \n            List<WXMsgGroup> list = UserReader.GetWXMsgGroup().OrderByDescending(x => x.MsgCount).ToList();\n\n            foreach (WXMsgGroup item in list)\n            {\n                WXContact? contact = contacts.Find(x => x.UserName == item.UserName);\n                if (contact != null)\n                {\n                    item.NickName = contact.NickName;\n                }\n                else\n                    item.NickName = \"å·²å é¤äººåï¼\" + item.UserName;\n            }\n            list_msg_group.ItemsSource = list;\n        }\n\n        private void btn_copy_id_Click(object sender, RoutedEventArgs e)\n        {\n            WXMsgGroup? msgGroup = list_msg_group.SelectedItem as WXMsgGroup;\n            if(msgGroup == null)\n            {\n                MessageBox.Show(\"è¯·åéæ©æ°æ®\");\n                return;\n            }\n            else\n            {\n                Clipboard.SetDataObject(msgGroup.UserName);\n            }\n            \n        }\n\n        private void list_msg_group_SelectionChanged(object sender, SelectionChangedEventArgs e)\n        {\n            WXMsgGroup? wXMsgGroup = list_msg_group.SelectedItem as WXMsgGroup;\n            if(wXMsgGroup != null)\n            {\n                List<WXMsg>? wXMsgs = UserReader.GetWXMsgs(wXMsgGroup.UserName);\n                if(wXMsgs != null)\n                {\n                    wXMsgs = wXMsgs.OrderByDescending(x => x.CreateTime).ToList();\n                    list_msg_search.ItemsSource = wXMsgs;\n                }\n                    \n            }\n        }\n\n        private void btn_search_Click(object sender, RoutedEventArgs e)\n        {\n            List<WXMsg>? wXMsgs = UserReader.GetWXMsgs(\"\",txt_search_text.Text);\n            if (wXMsgs != null)\n            {\n                wXMsgs = wXMsgs.OrderByDescending(x => x.CreateTime).ToList();\n                list_msg_search.ItemsSource = wXMsgs;\n            }\n        }\n\n        private void btn_search_copy_id_Click(object sender, RoutedEventArgs e)\n        {\n            WXMsg? wxMsg = list_msg_search.SelectedItem as WXMsg;\n            if (wxMsg == null)\n            {\n                MessageBox.Show(\"è¯·åéæ©æ°æ®\");\n                return;\n            }\n            else\n            {\n                Clipboard.SetDataObject(wxMsg.StrTalker);\n            }\n        }\n    }\n}\n"
        },
        {
          "name": "App.xaml",
          "type": "blob",
          "size": 0.357421875,
          "content": "ï»¿<Application x:Class=\"WechatBakTool.App\"\n             xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n             xmlns:local=\"clr-namespace:WechatBakTool\"\n             StartupUri=\"Main2.xaml\">\n    <Application.Resources>\n         \n    </Application.Resources>\n</Application>\n"
        },
        {
          "name": "App.xaml.cs",
          "type": "blob",
          "size": 0.3212890625,
          "content": "ï»¿using System;\nusing System.Collections.Generic;\nusing System.Configuration;\nusing System.Data;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Windows;\n\nnamespace WechatBakTool\n{\n    /// <summary>\n    /// Interaction logic for App.xaml\n    /// </summary>\n    public partial class App : Application\n    {\n    }\n}\n"
        },
        {
          "name": "AssemblyInfo.cs",
          "type": "blob",
          "size": 0.5810546875,
          "content": "using System.Windows;\n\n[assembly: ThemeInfo(\n    ResourceDictionaryLocation.None, //where theme specific resource dictionaries are located\n                                     //(used if a resource is not found in the page,\n                                     // or application resource dictionaries)\n    ResourceDictionaryLocation.SourceAssembly //where the generic resource dictionary is located\n                                              //(used if a resource is not found in the page,\n                                              // app, or any theme specific resource dictionaries)\n)]\n"
        },
        {
          "name": "Dialog",
          "type": "tree",
          "content": null
        },
        {
          "name": "Export",
          "type": "tree",
          "content": null
        },
        {
          "name": "Helpers",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 33.7138671875,
          "content": "                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<https://www.gnu.org/licenses/>.\n"
        },
        {
          "name": "Main2.xaml",
          "type": "blob",
          "size": 12.88671875,
          "content": "ï»¿<Window x:Class=\"WechatBakTool.Main2\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n        xmlns:local=\"clr-namespace:WechatBakTool\"\n        mc:Ignorable=\"d\" WindowStartupLocation=\"CenterScreen\" WindowStyle=\"None\" WindowState=\"Normal\" Background=\"Transparent\" AllowsTransparency=\"True\" ResizeMode=\"NoResize\"\n        Title=\"WechatBakTool\" Height=\"550\" Width=\"950\"  >\n    <Window.Resources>\n        <Style TargetType=\"local:Main2\">\n            <!-- è®¾ç½®çªä½çWindowChrome -->\n            <Setter Property=\"WindowChrome.WindowChrome\">\n                <Setter.Value>\n                    <!-- ResizeBorderThickness:ææ½æ¹åçªä½å¤§å°çè¾¹æ¡ååº¦ï¼-->\n                    <!-- CornerRadiusï¼çªä½åè§ï¼-->\n                    <!-- CaptionHeighté¡¶é¨æ é¢çé«åº¦ï¼-->\n                    <!-- GlassFrameThickness:é»è®¤è¾¹æ¡çå¤§å°ï¼0ä¸ºä¸ä½¿ç¨é»è®¤è¾¹æ¡ï¼è¿æ ·å®ä¹çåè§æææï¼ï¼-1ä¸ºä½¿ç¨é»è®¤è¾¹æ¡é»è®¤å¼-->\n                    <WindowChrome CornerRadius=\"5\" CaptionHeight=\"5\" GlassFrameThickness=\"0\" />\n                </Setter.Value>\n            </Setter>\n        </Style>\n        <DrawingImage x:Key=\"svg_min\">\n            <DrawingImage.Drawing>\n                <DrawingGroup ClipGeometry=\"M0,0 V1024 H1024 V0 H0 Z\">\n                    <GeometryDrawing Brush=\"#2775b6\" Geometry=\"F1 M1024,1024z M0,0z M370.752,608L129.6,849.152A32,32,0,0,0,174.848,894.4L416,653.248 416,768A32,32,0,0,0,480,768L480,576A31.904,31.904,0,0,0,448,544L256,544A32,32,0,0,0,256,608L370.752,608z M553.376,470.624A31.904,31.904,0,0,1,544,448L544,256A32,32,0,0,1,608,256L608,370.752 849.152,129.6A32,32,0,1,1,894.4,174.848L653.248,416 768,416A32,32,0,0,1,768,480L576,480A31.904,31.904,0,0,1,553.376,470.624z\" />\n                </DrawingGroup>\n            </DrawingImage.Drawing>\n        </DrawingImage>\n        <DrawingImage x:Key=\"svg_close\">\n            <DrawingImage.Drawing>\n                <DrawingGroup ClipGeometry=\"M0,0 V1024 H1024 V0 H0 Z\">\n                    <GeometryDrawing Brush=\"#2775b6\" Geometry=\"F1 M1024,1024z M0,0z M556.8,512L828.8,240C841.6,227.2 841.6,208 828.8,195.2 816,182.4 796.8,182.4 784,195.2L512,467.2 240,195.2C227.2,182.4 208,182.4 195.2,195.2 182.4,208 182.4,227.2 195.2,240L467.2,512 195.2,784C182.4,796.8 182.4,816 195.2,828.8 208,841.6 227.2,841.6 240,828.8L512,556.8 784,828.8C796.8,841.6 816,841.6 828.8,828.8 841.6,816 841.6,796.8 828.8,784L556.8,512z\" />\n                </DrawingGroup>\n            </DrawingImage.Drawing>\n        </DrawingImage>\n        <DrawingImage x:Key=\"friends_nums\">\n            <DrawingImage.Drawing>\n                <DrawingGroup ClipGeometry=\"M0,0 V1024 H1024 V0 H0 Z\">\n                    <GeometryDrawing Brush=\"#FFF\" Geometry=\"F1 M1024,1024z M0,0z M512.018127441406,140.7236328125C386.078552246094,140.7236328125 283.536560058594,243.226898193359 283.536560058594,369.204376220703 283.536560058594,495.106048583984 386.003570556641,597.648864746094 512.018127441406,597.648864746094 637.994781494141,597.648864746094 740.535949707031,495.106872558594 740.535949707031,369.204376220703 740.535949707031,243.226898193359 637.994781494141,140.7236328125 512.018127441406,140.7236328125z\" />\n                    <GeometryDrawing Brush=\"#FFF\" Geometry=\"F1 M1024,1024z M0,0z M688.11962890625,592.435577392578C639.437561035156,630.917663574219 578.812805175781,654.760192871094 512.018127441406,654.760192871094 445.222625732422,654.760192871094 384.636596679688,630.844329833984 335.842468261719,592.435577392578 243.466674804688,651.248413085937 179.148040771484,754.530334472656 170.313385009766,874.148376464844 202.656860351563,878.545104980469 260.212310791016,883.2763671875 342.347747802734,883.2763671875L681.539367675781,883.2763671875C763.712707519531,883.2763671875 821.304412841797,878.545104980469 853.686614990234,874.148376464844 844.924468994141,754.454528808594 780.606658935547,651.248413085938 688.11962890625,592.435577392578z\" />\n                </DrawingGroup>\n            </DrawingImage.Drawing>\n        </DrawingImage>\n        <DrawingImage x:Key=\"msg_nums\">\n            <DrawingImage.Drawing>\n                <DrawingGroup ClipGeometry=\"M0,0 V1024 H1024 V0 H0 Z\">\n                    <GeometryDrawing Brush=\"#FFF\" Geometry=\"F1 M1024,1024z M0,0z M512,917.333333A308.458667,308.458667,0,0,1,425.941333,908.181333C366.592,890.88 248.298666,903.808 153.365333,922.666667 153.365333,922.666667 145.173333,924.010667 144.661333,924.010667A42.282667,42.282667,0,0,1,103.253333,871.488C123.498666,779.754667,131.306666,670.741333,115.584,596.906667A405.333333,405.333333,0,1,1,512,917.333333z M339.008,640L552.341333,640A32,32,0,1,0,552.341333,576L339.008,576A32,32,0,0,0,339.008,640z M680.341333,405.333333L339.008,405.333333A32,32,0,0,0,339.008,469.333333L680.341333,469.333333A32,32,0,1,0,680.341333,405.333333z\" />\n                </DrawingGroup>\n            </DrawingImage.Drawing>\n        </DrawingImage>\n        <DataTemplate x:Key=\"ListViewItemContentTemplate\">\n            <Grid Margin=\"5\">\n                <Label Margin=\"0\" Content=\"{Binding Account}\" FontSize=\"16\" VerticalAlignment=\"Top\" HorizontalAlignment=\"Left\" Foreground=\"White\" />\n                <Image Source=\"{StaticResource friends_nums}\" Width=\"15\" Height=\"15\" Margin=\"2,30,0,0\" VerticalAlignment=\"Top\" HorizontalAlignment=\"Left\" />\n                <Label Margin=\"13,25.5,0,0\" Content=\"{Binding Friends_Number}\" VerticalAlignment=\"Top\" HorizontalAlignment=\"Left\" Foreground=\"White\" />\n                <Image Source=\"{StaticResource msg_nums}\" Width=\"15\" Height=\"15\" Margin=\"60,30,0,0\" VerticalAlignment=\"Top\" HorizontalAlignment=\"Left\" />\n                <Label Margin=\"73,25.5,0,0\" Content=\"{Binding Msg_Number}\" VerticalAlignment=\"Top\" HorizontalAlignment=\"Left\" Foreground=\"White\" />\n                <Border Margin=\"150,25.5,0,0\"  VerticalAlignment=\"Top\" HorizontalAlignment=\"Left\" CornerRadius=\"5\" BorderThickness=\"1\" Background=\"White\" >\n                    <Label Padding=\"5\" FontSize=\"8\" Content=\"{Binding DecryptStatus}\"  Foreground=\"#2775b6\" Background=\"Transparent\" />\n                </Border>\n            </Grid>\n        </DataTemplate>\n    </Window.Resources>\n    <Grid Background=\"White\" MouseDown=\"Grid_MouseDown\">\n        <Image Panel.ZIndex=\"100\" Name=\"img_btn_min\" Source=\"{StaticResource svg_min}\" Width=\"20\" Height=\"20\" HorizontalAlignment=\"Left\" Margin=\"860,20,0,0\" VerticalAlignment=\"Top\" MouseLeftButtonDown=\"img_btn_min_MouseLeftButtonDown\">\n            <Image.RenderTransform>\n                <RotateTransform CenterX=\"0.5\" CenterY=\"0.5\" />\n            </Image.RenderTransform>\n            <Image.RenderTransformOrigin>\n                <Point>0.5,0.5</Point>\n            </Image.RenderTransformOrigin>\n            <Image.Triggers>\n                <EventTrigger RoutedEvent=\"Image.MouseEnter\">\n                    <BeginStoryboard>\n                        <Storyboard>\n                            <DoubleAnimation\n                                Storyboard.TargetName=\"img_btn_min\"\n                                Storyboard.TargetProperty=\"(Image.RenderTransform).(RotateTransform.Angle)\"\n                                To=\"180\" Duration=\"0:0:0.300\"/>\n                        </Storyboard>\n                    </BeginStoryboard>\n                </EventTrigger>\n                <EventTrigger RoutedEvent=\"Image.MouseLeave\">\n                    <BeginStoryboard>\n                        <Storyboard>\n                            <DoubleAnimation\n                                Storyboard.TargetName=\"img_btn_min\"\n                                Storyboard.TargetProperty=\"(Image.RenderTransform).(RotateTransform.Angle)\"\n                                To=\"0\" Duration=\"0:0:0.300\" />\n                        </Storyboard>\n                    </BeginStoryboard>\n                </EventTrigger>\n            </Image.Triggers>\n        </Image>\n        <Image Panel.ZIndex=\"100\" Name=\"img_btn_close\" Source=\"{StaticResource svg_close}\" Width=\"20\" Height=\"20\" HorizontalAlignment=\"Left\" Margin=\"900,20,0,0\" VerticalAlignment=\"Top\" MouseLeftButtonDown=\"img_btn_close_MouseLeftButtonDown\">\n            <Image.RenderTransform>\n                <RotateTransform CenterX=\"0.5\" CenterY=\"0.5\" />\n            </Image.RenderTransform>\n            <Image.RenderTransformOrigin>\n                <Point>0.5,0.5</Point>\n            </Image.RenderTransformOrigin>\n            <Image.Triggers>\n                <EventTrigger RoutedEvent=\"Image.MouseEnter\">\n                    <BeginStoryboard>\n                        <Storyboard>\n                            <DoubleAnimation\n                                Storyboard.TargetName=\"img_btn_close\"\n                                Storyboard.TargetProperty=\"(Image.RenderTransform).(RotateTransform.Angle)\"\n                                To=\"90\" Duration=\"0:0:0.200\"/>\n                        </Storyboard>\n                    </BeginStoryboard>\n                </EventTrigger>\n                <EventTrigger RoutedEvent=\"Image.MouseLeave\">\n                    <BeginStoryboard>\n                        <Storyboard>\n                            <DoubleAnimation\n                                Storyboard.TargetName=\"img_btn_close\"\n                                Storyboard.TargetProperty=\"(Image.RenderTransform).(RotateTransform.Angle)\"\n                                To=\"0\" Duration=\"0:0:0.200\" />\n                        </Storyboard>\n                    </BeginStoryboard>\n                </EventTrigger>\n            </Image.Triggers>\n        </Image>\n        \n        <Grid Width=\"230\" Background=\"#2775b6\" HorizontalAlignment=\"Left\" IsHitTestVisible=\"True\">\n\n            <ListView BorderThickness=\"0\" Background=\"Transparent\" Margin=\"0,0,0,85\" Name=\"list_workspace\" ItemTemplate=\"{DynamicResource ListViewItemContentTemplate}\" SelectionChanged=\"list_workspace_SelectionChanged\">\n                <ListView.ContextMenu>\n                    <ContextMenu>\n                        <MenuItem Header=\"æ¥ç\" Click=\"MenuItem_Click\"  />\n                        <MenuItem Header=\"ç®¡ç\" Click=\"MenuItem_Click_1\" />\n                    </ContextMenu>\n                </ListView.ContextMenu>\n            </ListView>\n            <Grid Name=\"new_workspace\" Width=\"170\" Height=\"40\" VerticalAlignment=\"Bottom\" Margin=\"30,45\" IsHitTestVisible=\"True\">\n                <Rectangle Name=\"new_workspace_fill\" Fill=\"Transparent\"  RadiusX=\"0\" RadiusY=\"0\" Stroke=\"White\" StrokeDashArray=\"5\" MouseDown=\"new_workspace_fill_MouseDown\">\n                    <Rectangle.Triggers>\n                        <EventTrigger RoutedEvent=\"Rectangle.MouseEnter\">\n                            <BeginStoryboard>\n                                <Storyboard>\n                                    <ColorAnimation\n                                Storyboard.TargetName=\"new_workspace_fill\"\n                                Storyboard.TargetProperty=\"(Rectangle.Fill).(SolidColorBrush.Color)\"\n                                To=\"White\" Duration=\"0:0:0.300\"/>\n                                    <ColorAnimation\n                                Storyboard.TargetName=\"new_workspace_text\"\n                                Storyboard.TargetProperty=\"(Label.Foreground).(SolidColorBrush.Color)\"\n                                To=\"Black\" Duration=\"0:0:0.300\"/>\n                                </Storyboard>\n                            </BeginStoryboard>\n                        </EventTrigger>\n                        <EventTrigger RoutedEvent=\"Rectangle.MouseLeave\">\n                            <BeginStoryboard>\n                                <Storyboard>\n                                    <ColorAnimation\n                                Storyboard.TargetName=\"new_workspace_fill\"\n                                Storyboard.TargetProperty=\"(Rectangle.Fill).(SolidColorBrush.Color)\"\n                                To=\"Transparent\" Duration=\"0:0:0.300\"/>\n                                    <ColorAnimation\n                                Storyboard.TargetName=\"new_workspace_text\"\n                                Storyboard.TargetProperty=\"(Label.Foreground).(SolidColorBrush.Color)\"\n                                To=\"White\" Duration=\"0:0:0.300\"/>\n                                </Storyboard>\n                            </BeginStoryboard>\n                        </EventTrigger>\n                    </Rectangle.Triggers>\n                </Rectangle>\n                <Label Name=\"new_workspace_text\" Content=\"æ°å»ºå·¥ä½åº\" VerticalAlignment=\"Center\" HorizontalAlignment=\"Center\" Foreground=\"White\" IsHitTestVisible=\"False\"/>\n            </Grid>\n            <Label Name=\"lab_version\" Content=\"çæ¬ï¼\" Margin=\"10\" VerticalAlignment=\"Bottom\" HorizontalAlignment=\"Center\" Foreground=\"White\" />\n        </Grid>\n        <Grid Margin=\"230,0,0,0\" Width=\"720\" Background=\"Transparent\" HorizontalAlignment=\"Left\" Panel.ZIndex=\"1\">\n            <Frame Name=\"MainFrame\" Source=\"/Pages/Welcome.xaml\" NavigationUIVisibility=\"Hidden\" />\n        </Grid>\n    </Grid>\n\n</Window>\n"
        },
        {
          "name": "Main2.xaml.cs",
          "type": "blob",
          "size": 4.4130859375,
          "content": "ï»¿using Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing WechatBakTool.Model;\n\nnamespace WechatBakTool\n{\n    /// <summary>\n    /// Main2.xaml çäº¤äºé»è¾\n    /// </summary>\n    public partial class Main2 : Window\n    {\n        public static UserBakConfig? CurrentUserBakConfig;\n        private ObservableCollection<UserBakConfig> userBakConfigs = new ObservableCollection<UserBakConfig>();\n        public Main2()\n        {\n            InitializeComponent();\n            // è·åæä»¶çæ¬\n            lab_version.Content += $\" {Application.ResourceAssembly.GetName().Version}\";\n            //å è½½å·¥ä½åº\n            LoadWorkspace();\n        }\n\n        private void img_btn_close_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)\n        {\n            Application.Current.Shutdown();\n        }\n\n        public void LoadWorkspace()\n        {\n            userBakConfigs.Clear();\n            // æ ¹ç®å½worksapceè¯»å·¥ä½åº\n            string path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"workspace\");\n            if (Directory.Exists(path))\n            {\n                string[] files = Directory.GetFiles(path);\n                //ç®å½åjsonæä»¶ä¸ºåå·¥ä½åºéç½®æä»¶\n                foreach (string file in files)\n                {\n                    string type = file.Substring(file.Length - 5, 5);\n                    if (type == \".json\")\n                    {\n                        string jsonString = File.ReadAllText(file);\n                        UserBakConfig? userBakConfig = null;\n                        try\n                        {\n                            userBakConfig = JsonConvert.DeserializeObject<UserBakConfig>(jsonString);\n                        }\n                        catch\n                        {\n                            MessageBox.Show(\"è¯»åå°å¼å¸¸å·¥ä½åºæä»¶ï¼è¯·ç¡®è®¤å¤ä»½æ°æ®æ¯å¦æ­£å¸¸\\r\\næä»¶è·¯å¾ï¼\" + file, \"éè¯¯\");\n                        }\n                        if (userBakConfig != null)\n                        {\n                            userBakConfigs.Add(userBakConfig);\n                        }\n                    }\n                }\n            }\n            list_workspace.ItemsSource = userBakConfigs;\n        }\n\n        private void list_workspace_SelectionChanged(object sender, SelectionChangedEventArgs e)\n        {\n            UserBakConfig? config = list_workspace.SelectedItem as UserBakConfig;\n            if(config == null)\n            {\n                MainFrame.Navigate(new Uri(\"pack://application:,,,/Pages/Welcome.xaml?datatime=\" + DateTime.Now.Ticks));\n                return;\n            }\n\n            CurrentUserBakConfig = config;\n            if (!config.Decrypt)\n            {\n                MessageBox.Show(\"è¯·åå°åå»ºå·¥ä½åºè¿è¡è§£å¯\");\n                MainFrame.Navigate(new Uri(\"pack://application:,,,/Pages/CreateWork.xaml?datatime=\" + DateTime.Now.Ticks));\n                return;\n            }\n\n            MainFrame.Navigate(new Uri(\"pack://application:,,,/Pages/Workspace.xaml?datatime=\" + DateTime.Now.Ticks));\n        }\n\n        private void new_workspace_fill_MouseDown(object sender, MouseButtonEventArgs e)\n        {\n            list_workspace.SelectedItem = null;\n            MainFrame.Navigate(new Uri(\"pack://application:,,,/Pages/CreateWork.xaml?datatime=\" + DateTime.Now.Ticks));\n        }\n\n        private void img_btn_min_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)\n        {\n            WindowState = WindowState.Minimized;\n        }\n\n        private void Grid_MouseDown(object sender, MouseButtonEventArgs e)\n        {\n            if (e.LeftButton == MouseButtonState.Pressed)\n            {\n                DragMove();\n            }\n        }\n\n        private void MenuItem_Click(object sender, RoutedEventArgs e)\n        {\n            MainFrame.Navigate(new Uri(\"pack://application:,,,/Pages/Workspace.xaml?datatime=\" + DateTime.Now.Ticks));\n        }\n\n        private void MenuItem_Click_1(object sender, RoutedEventArgs e)\n        {\n            MainFrame.Navigate(new Uri(\"pack://application:,,,/Pages/Manager.xaml?datatime=\" + DateTime.Now.Ticks));\n        }\n    }\n}\n"
        },
        {
          "name": "Model",
          "type": "tree",
          "content": null
        },
        {
          "name": "Pages",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.91015625,
          "content": "\n# WechatBakTool\nåºäºC#å¼åçå¾®ä¿¡èå¤©è®°å½å¤ä»½åæå·¥å·ï¼åªååæå¥½ç¨çå¾®ä¿¡å¤ä»½å·¥å·ã\n\n- çè®ºæ¯æ64ä½çæ¬ææå¾®ä¿¡ï¼æ¯æä¸¤ç§æ¹å¼éç´æ¥å°åè·åKey[1]\n- å·¥ä½åºæ¦å¿µï¼æ¯æå¤å¾®ä¿¡åæ¢æä½ã\n- æ¯æå¯¼åºHtmlæä»¶ï¼TXTæä»¶ï¼æ¯ææ¹éå¯¼åº\n- æ¯æèå¤©é¢çåæï¼å¨æ¶æ¯åºåå®¹æç´¢\n- ç®åæ¯æä»¥ä¸ç±»åæ¶æ¯è§£æ\n- [x] ææ¬æ¶æ¯\n- [x] å¾ç\n- [x] è¯­é³\n- [x] åäº«é¾æ¥\n- [x] ç¾¤è\n- [x] ç³»ç»æ¶æ¯\n- [x] æä»¶\n- [x] å¼ç¨/è½¬åæ¶æ¯\n- [x] è¡¨æ(éè¦é¢ä¸è½½)\n\nå¦ææä»ä¹å¥½çå»ºè®®ææè§ï¼æèéå°ä»ä¹é®é¢ï¼æ¬¢è¿æissueï¼çå°ä¼åã\n\n> [!NOTE]\n> åé¦ç¾¤ï¼815054692<br/>\n> å¦æè§å¾ä¸éï¼æ¬¢è¿å³ä¸è§ç¹ä¸ªstarï¼è¿æ¯å¯¹ä½èçé¼å±ï¼è°¢è°¢ï¼<br/>\n> è¿ç¾¤è¯·åStaré¡¹ç®ï¼ç¶åé®ç­æ¶æ¯çid<br/>\n<br/>\n\n### åè´£å£°æ\n**æ¬é¡¹ç®ä»ä¾å­¦ä¹ ãç ç©¶ä½¿ç¨ï¼ä¸¥ç¦åä¸ä½¿ç¨**<br/>\n**ç¨äºç½ç»å®å¨ç¨éçï¼è¯·ç¡®ä¿å¨å½å®¶æ³å¾æ³è§ä¸ä½¿ç¨**<br/>\n**æ¬é¡¹ç®å®å¨åè´¹ï¼é®ä½ è¦é±çé½æ¯éªå­**<br/>\n**ä½¿ç¨æ¬é¡¹ç®åè¡·æ¯ä½èç ç©¶å¾®ä¿¡æ°æ®åºçè¿è¡ä½¿ç¨ï¼æ¨ä½¿ç¨æ¬è½¯ä»¶å¯¼è´çåæï¼åå«ä½ä¸éäºæ°æ®æåï¼è®°å½ä¸¢å¤±ç­é®é¢ï¼ä½èä¸æ¿æç¸å³è´£ä»»ã**<br/>\n**å è½¯ä»¶ç¹æ®æ§è´¨ï¼è¯·å¨ä½¿ç¨æ¶è·å¾å¾®ä¿¡è´¦å·ææäººææï¼ä½ å½ç¡®ä¿ä¸ä¾µç¯ä»äººä¸ªäººéç§æï¼åæèªè¡æ¿æ**<br/>\n<br/>\n\n### éç§å£°æ\n**æ¬é¡¹ç®ä¸ä¼ä¸ä¼ ä»»ä½ä½ çæ°æ®è³ä»»ä½ç¬¬ä¸æ¹ç³»ç»**<br/>\n**å¦æåçä»»ä½åä¼ è¡ä¸ºï¼è¯·æ£æ¥æ¯å¦ä¸ºç¬¬ä¸æ¹ä¿®æ¹çæ¬**<br/>\n<br/>\n\n### è¿æå¼åè§å\næ¬é¡¹ç®ææ¯æ ä¸ºï¼\nC# + .NET6.0 + WPF <br/>\n- [x] ~~æ°çæ¬UIçé¢å¼å~~\n- [x] å®ååç±»æ¶æ¯æ¯æï¼å·²ç»åæ­¥å®æï¼\n- [x] ~~è¯äº~~\n- [ ] æ§è½ä¼å\n- [ ] æåèµæºæä»¶å¤¹\n- [ ] æå¨æ¨¡å¼(åéç¦»çº¿åæ)\n- [ ] å¹´åº¦æ¥åç±»åæ(ç­ç¾æ¯èµæºä¸­ï¼æ²¡æèµæºä¸å)\n<br/>\n\n### é¨åé®é¢\nQï¼æ¯æææºç«¯å<br/>\nAï¼<b>å¨ææºç«¯</b>ä½¿ç¨è¿ç§»åè½å³å¯ï¼è·¯å¾ï¼æ->è®¾ç½®->èå¤©->èå¤©è®°å½è¿ç§»ä¸å¤ä»½->è¿ç§»<br/>\n<br/>\nQï¼æä¹å¯¼åºå¨é¨çè®°å½<br/>\nAï¼å·¥ä½åº->å³é®->ç®¡çï¼å°±è§äºã<br/>\n<br/>\nQï¼è§£å¯å·¥ä½åºæç¤ºno such teble:MSGæä¹å<br/>\nAï¼åºæ¬ä¸é½æ¯å ä¸ºåè¿ç§»å®ï¼ç¼å­æ²¡åå¥å°æ°æ®åºå¯¼è´çï¼å»ºè®®è¿ç§»å®éå¯ä¸æ¬¡å¾®ä¿¡åååå»ºå·¥ä½åº<br/>\n<br/>\nQï¼è§£å¯å·¥ä½åºæç¤ºno such teble:XXXXXXXæä¹å<br/>\nAï¼è¿ä¸ªåå åºæ¬ä¸æ¯å ä¸ºè§£å¯å¤±è´¥å¯¼è´çï¼åè½ä½¿ç¨åºå®å°åæ¥æ¾æ¹å¼è§£å¯ï¼è¯·ç¡®ä¿ä½ çå¾®ä¿¡çæ¬å¨version.jsonåæ¯æ<br/>\n<br/>\nQï¼è§£å¯æ¶æç¤ºï¼Unable to load DLL 'libcrypto-1_1' or one of its dependenciesæä¹å<br/>\nAï¼è¿ä¸ªæ¯å ä¸ºå è§£å¯åºçè¿è¡ç¯å¢ä¸æ»¡è¶³ï¼å®è£vc++2015 x64è¿è¡åºååå°è¯<br/>\n<br/>\n\n### ä½¿ç¨è¯´æ\n0.å®è£.NET Desktop Runtime(æ³¨ææ¯6.0çæ¬çDesktop Runtimeï¼å¦å·²ç»å®è£å¿½ç¥)<br/>\n1.æå¼å¾®ä¿¡ï¼å¹¶ç»å½ã<br/>\n2.å¨è½¯ä»¶å·¦ä¾§ä¸æ¹ç¹å»**æ°å»ºå·¥ä½åº**ï¼<br/>\n3.å¨**æ°å»ºå·¥ä½åºçé¢**ï¼éæ©è¦åå»ºå·¥ä½åºçå¾®ä¿¡è¿ç¨ï¼å¹¶**ç¡®è®¤ä¸æ¹å¾®ä¿¡å·æ¯å¦æ­£ç¡®**<br/>\n4.è§£å¯æ¹å¼**æ¨èéæ©ç¨æ·åæ¨æ­æ¥æ¾**ï¼è¯¥æ¹å¼çè®ºæ¯æææ64ä½çæ¬å¾®ä¿¡ã**ä½è¯¥æ¨¡å¼éè¦ç¡®ä¿å¾®ä¿¡è´¦å·æ­£ç¡®**<br/>\n5.æ°æè¯·å¿½ç¥å¶ä»éé¡¹ï¼ç´æ¥**ç¹å»åå»ºå·¥ä½åº**ï¼ç¨åºä¼èªå¨è¿è¡å·¥ä½åºåå»ºãè§£å¯ã<br/><br/>\n**å·¥ä½åºåå»ºå®æ¯ï¼ç¹å»å·¦ä¾§å·¥ä½åºï¼å°½æä½¿ç¨å§ï¼**<br/>\n<br/>\n\n### åè/å¼ç¨\né¡¹ç®å¨å¼åè¿ç¨ä¸­åèäºä»¥ä¸é¡¹ç®æèµæï¼æå¼ç¨ç¸å³ä»£ç ï¼å¦æéè¦ï¼æ¨èæ¨å¯ä»¥å»åèä¸ç¸å³èµæï¼\n\n1. C#ä½¿ç¨OpenSSLè§£å¯å¾®ä¿¡æ°æ®åºï¼è¿éæ³¨æä¸ä¸64ä½ééé®é¢ï¼æ³¨ædllå¼ç¨ï¼å¦å¤è§£å¯çèµæºä¼åä¸æ¯å¾å¥½ï¼å¯ä»¥åèä¸ä¸ææ¹åçï¼C#è¿éè¦æ³¨æä¸ä¸è¶å¤§æä»¶çé®é¢ï¼ [Mr0x01/WXDBDecrypt.NET](https://github.com/Mr0x01/WXDBDecrypt.NET)<br/>\n2. C#ä½¿ç¨å°åè·åå¾®ä¿¡Keyï¼ [AdminTest0/SharpWxDump](https://github.com/AdminTest0/SharpWxDump)\n3. è§£å¯å¾®ä¿¡è¯­é³ï¼ææ¯ç´æ¥è°ç¨è§£å¯ï¼åæ­£é½è¦ffmpegï¼å¤ä¸ä¸ªä¹æ¯å¤ï¼å¤ä¸¤ä¸ªä¹æ¯å¤ï¼æå¾å¤´éå®ç°ï¼ [kn007/silk-v3-decoder](https://github.com/kn007/silk-v3-decoder)\n4. è§£å¯å¾®ä¿¡å¾ç [å¾ç±ç ´è§£chenhahacjl/å¾®ä¿¡ DAT å¾çè§£å¯ ï¼C#ï¼](https://www.52pojie.cn/forum.php?mod=viewthread&tid=1507922)\n5. åèäºå¥æåç§°å®ç°ï¼æ³¨æè·åå¥æå«çè¿éï¼#10 è¿ä¸ªissueå°±æ¯è¡æ³ª [huiyadanli/RevokeMsgPatcher](https://github.com/huiyadanli/RevokeMsgPatcher)\n6. åèäºå¥æè·å [FuzzySecurity/Sharp-Suite](https://github.com/FuzzySecurity/Sharp-Suite)\n7. è¿ä¸ªè·åç§é¥æ´éç¨ä¸äº [SnowMeteors/GetWeChatKey](https://github.com/SnowMeteors/GetWeChatKey) ,ç¨æ·åä¸æ¯å¾ç¨³å®\n\n### å¶ä»å£°æ\n[1] çè®ºæ¯æææ64ä½çæ¬æç¨æ·åæ¨æ­åå¬é¥å¤´æ¨æ­ï¼å°åç´æ¥è·åæ¹å¼éè¦version.jsonæ¯æï¼æ´æ°ä¸æ¯å¾åæ¶ã\n"
        },
        {
          "name": "Resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tools.xaml",
          "type": "blob",
          "size": 1.0126953125,
          "content": "ï»¿<Window x:Class=\"WechatBakTool.Tools\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n        xmlns:local=\"clr-namespace:WechatBakTool\"\n        mc:Ignorable=\"d\"\n        Title=\"èµæºåéå·¥å·\" Height=\"450\" Width=\"800\" WindowStartupLocation=\"CenterScreen\">\n    <Grid>\n        <Button Name=\"back_video_file\" Content=\"åéè§é¢æä»¶\" HorizontalAlignment=\"Left\" Margin=\"191,39,0,0\" VerticalAlignment=\"Top\" Height=\"28\" Width=\"96\" Click=\"back_video_file_Click\"/>\n        <TextBox Name=\"txt_log\" VerticalScrollBarVisibility=\"Auto\" Margin=\"40,88,40,31\" TextWrapping=\"Wrap\" Text=\"\" AcceptsReturn=\"True\" IsReadOnly=\"True\"/>\n        <ComboBox Name=\"list_workspace\" DisplayMemberPath=\"UserName\" HorizontalAlignment=\"Left\" Margin=\"40,43,0,0\" VerticalAlignment=\"Top\" Width=\"120\"/>\n\n    </Grid>\n</Window>\n"
        },
        {
          "name": "Tools.xaml.cs",
          "type": "blob",
          "size": 6.484375,
          "content": "ï»¿using Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing WechatBakTool.Model;\n\nnamespace WechatBakTool\n{\n    /// <summary>\n    /// Tools.xaml çäº¤äºé»è¾\n    /// </summary>\n    public partial class Tools : Window\n    {\n        public Tools()\n        {\n            InitializeComponent();\n            LoadWorkspace();\n        }\n\n        private void LoadWorkspace()\n        {\n            list_workspace.Items.Clear();\n            string path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"workspace\");\n            if (Directory.Exists(path))\n            {\n                string[] files = Directory.GetFiles(path);\n                foreach (string file in files)\n                {\n                    string type = file.Substring(file.Length - 5, 5);\n                    if (type == \".json\")\n                    {\n                        string jsonString = File.ReadAllText(file);\n                        UserBakConfig? userBakConfig = null;\n                        try\n                        {\n                            userBakConfig = JsonConvert.DeserializeObject<UserBakConfig>(jsonString);\n                        }\n                        catch\n                        {\n                            MessageBox.Show(\"è¯»åå°å¼å¸¸å·¥ä½åºæä»¶ï¼è¯·ç¡®è®¤å¤ä»½æ°æ®æ¯å¦æ­£å¸¸\\r\\næä»¶è·¯å¾ï¼\" + file, \"éè¯¯\");\n                        }\n                        if (userBakConfig != null)\n                        {\n                            list_workspace.Items.Add(userBakConfig);\n                        }\n                    }\n                }\n            }\n        }\n\n        private void back_video_file_Click(object sender, RoutedEventArgs e)\n        {\n            Task.Run(() => {\n                UserBakConfig? selectConfig = null;\n                Dispatcher.Invoke(() => {\n                    selectConfig = list_workspace.SelectedItem as UserBakConfig;\n                });\n                if (selectConfig != null)\n                {\n                    if (!selectConfig.Decrypt)\n                    {\n                        MessageBox.Show(\"å·¥ä½åºæªè§£å¯ï¼è¯·åç¨ä¸»ç¨åºè¿è¡è§£å¯\");\n                        return;\n                    }\n\n                    // æ£æ¥å·¥ä½åºè§é¢æä»¶å¤¹\n                    string video_dir = Path.Combine(selectConfig.UserWorkspacePath, \"Video\");\n                    string[] files = Directory.GetFiles(video_dir);\n                    if (!Directory.Exists(video_dir))\n                    {\n                        Dispatcher.Invoke(() => {\n                            txt_log.Text += video_dir + \"ä¸å­å¨\\r\\n\";\n                            txt_log.ScrollToEnd();\n                        });\n                        return;\n                    }\n\n                    WXUserReader UserReader = new WXUserReader(selectConfig);\n                    // è·åç¨æ·\n                    var atc_list = UserReader.GetWXMsgAtc();\n                    if(atc_list == null)\n                    {\n                        Dispatcher.Invoke(() => {\n                            txt_log.Text += \"è§é¢åè¡¨æ²¡æåå®¹ï¼æ æ³åé\\r\\n\";\n                            txt_log.ScrollToEnd();\n                        });\n                        return;\n                    }\n                    foreach (string file in files)\n                    {\n                        FileInfo fileInfo = new FileInfo(file);\n                        var search = atc_list.FindAll(x => x.attachPath.Contains(fileInfo.Name));\n                        if (search != null)\n                        {\n                            WXSessionAttachInfo? select_atc = null;\n                            if (search.Count > 1)\n                            {\n                                foreach (var s in search)\n                                {\n                                    Dispatcher.Invoke(() =>\n                                    {\n                                        txt_log.Text += s + \"\\r\\n\";\n                                        txt_log.ScrollToEnd();\n                                    });\n                                    if (s.attachPath.Contains(\"_raw\"))\n                                        select_atc = s;\n                                }\n                            }\n                            else if (search.Count == 1)\n                                select_atc = search[0];\n                            else\n                            {\n                                Dispatcher.Invoke(() =>\n                                {\n                                    txt_log.Text += \"å¹éä¸å°æä»¶\\r\\n\";\n                                    txt_log.ScrollToEnd();\n                                });\n                                continue;\n                            }\n\n                            if (select_atc == null)\n                            {\n                                Dispatcher.Invoke(() =>\n                                {\n                                    txt_log.Text += \"å¹éå¤±è´¥\\r\\n\";\n                                    txt_log.ScrollToEnd();\n                                });\n                                continue;\n                            }\n                                \n                            // å»ºç«è·¯å¾\n                            string source_video_file = Path.Combine(selectConfig.UserResPath, select_atc.attachPath);\n                            if (File.Exists(source_video_file))\n                            {\n                                Dispatcher.Invoke(() => {\n                                    txt_log.Text += source_video_file + \"å·²ç»å­å¨\\r\\n\";\n                                    txt_log.ScrollToEnd();\n                                });\n\n                                continue;\n                            }\n                            else\n                            {\n                                Dispatcher.Invoke(() => {\n                                    txt_log.Text += source_video_file + \"å¼å§åèµ·åé\\r\\n\";\n                                    txt_log.ScrollToEnd();\n                                });\n                                File.Copy(fileInfo.FullName, source_video_file);\n                            }\n                        }\n                    }\n                }\n            });\n            \n        }\n    }\n}\n"
        },
        {
          "name": "Tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "ViewModel",
          "type": "tree",
          "content": null
        },
        {
          "name": "WXUserReader.cs",
          "type": "blob",
          "size": 27.5791015625,
          "content": "ï»¿using K4os.Compression.LZ4.Encoders;\nusing K4os.Compression.LZ4;\nusing SQLite;\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.IO;\nusing System.Linq;\nusing System.Net.Mime;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Interop;\nusing System.Windows.Media.Imaging;\nusing System.Xml;\nusing System.Xml.Linq;\nusing WechatBakTool.Helpers;\nusing WechatBakTool.Model;\nusing System.Windows;\nusing System.Net.Http;\nusing System.Reflection.Metadata;\nusing System.Threading;\nusing Newtonsoft.Json;\nusing WechatBakTool.ViewModel;\n\nnamespace WechatBakTool\n{\n    public class WXUserReader\n    {\n        private Dictionary<string, SQLiteConnection> DBInfo = new Dictionary<string, SQLiteConnection>();\n        private UserBakConfig? UserBakConfig = null;\n        private Hashtable HeadImgCache = new Hashtable();\n        private Hashtable UserNameCache = new Hashtable();\n        private Hashtable EmojiCache = new Hashtable();\n        private HttpClient httpClient = new HttpClient();\n        public WXUserReader(UserBakConfig userBakConfig) {\n            string path = Path.Combine(userBakConfig.UserWorkspacePath, \"DecDB\");\n            UserBakConfig = userBakConfig;\n            LoadDB(path);\n            InitCache();\n            EmojiCacheInit();\n        }\n\n        public void LoadDB(string path)\n        {\n            string[] dbFileList = Directory.GetFiles(path);\n            foreach (var item in dbFileList)\n            {\n                FileInfo fileInfo = new FileInfo(item);\n                if (fileInfo.Extension != \".db\")\n                    continue;\n                SQLiteConnection con = new SQLiteConnection(item);\n                string dbName = fileInfo.Name.Split('.')[0];\n                if (DBInfo.ContainsKey(dbName))\n                {\n                    continue;\n                } \n                DBInfo.Add(dbName, con);\n            }\n        }\n\n        private SQLiteConnection? getCon(string name)\n        {\n            if (DBInfo.ContainsKey(name))\n            {\n                return DBInfo[name];\n            }\n            else\n            {\n                return null;\n            }\n        }\n\n        public void InitCache()\n        {\n            SQLiteConnection? con = getCon(\"Misc\");\n            if (con == null)\n                return;\n\n            string query = @\"SELECT * FROM ContactHeadImg1\";\n            List<ContactHeadImg> imgs = con.Query<ContactHeadImg>(query);\n            foreach(ContactHeadImg item in imgs)\n            {\n                if (!HeadImgCache.ContainsKey(item.usrName))\n                {\n                    HeadImgCache.Add(item.usrName, item);\n                }\n            }\n\n            List<WXContact> contacts = GetWXContacts(null, true).ToList();\n            foreach(WXContact contact in contacts)\n            {\n                if (!UserNameCache.ContainsKey(contact.UserName))\n                    UserNameCache.Add(contact.UserName, contact);\n            }\n        }\n\n        public void EmojiCacheInit()\n        {\n            string emoji_path = Path.Combine(UserBakConfig!.UserWorkspacePath, \"Emoji\");\n            if (Directory.Exists(emoji_path))\n            {\n                string[] files = Directory.GetFiles(emoji_path);\n                foreach (string file in files)\n                {\n                    FileInfo fileInfo = new FileInfo(file);\n                    string[] names = fileInfo.Name.Split(\".\");\n                    if (!EmojiCache.ContainsKey(names[0]))\n                    {\n                        EmojiCache.Add(names[0], 1);\n                    }\n                }\n            }\n        }\n\n        public void PreDownloadEmoji(string username = \"\")\n        {\n            if (UserBakConfig == null)\n                return;\n\n            HttpClientHandler handler = new HttpClientHandler() { AutomaticDecompression = System.Net.DecompressionMethods.GZip | System.Net.DecompressionMethods.Deflate };\n            HttpClient httpClient = new HttpClient(handler);\n\n            List<WXMsg> msgs = GetTypeMsg(\"47\", username);\n            int i = 0;\n\n            // ä¸è½½åçEmoji Cacheä¸ç¨åäºï¼å¨Initçæ¶åå·²ç»åäº\n            foreach (var msg in msgs)\n            {\n                i++;\n                if (i % 5 == 0)\n                {\n                    // æ¯5æ¬¡è®©ä¸è½½çº¿ç¨ä¼æ¯1ç§\n                    Thread.Sleep(1000);\n                }\n                try\n                {\n                    XmlDocument xmlDocument = new XmlDocument();\n                    xmlDocument.LoadXml(msg.StrContent);\n                    XmlNode? node = xmlDocument.SelectSingleNode(\"/msg/emoji\");\n                    if (node != null)\n                    {\n                        if (node.Attributes != null)\n                        {\n                            string type = \"\";\n                            string md5 = \"\";\n                            string url = \"\";\n                            XmlNode? item = node.Attributes.GetNamedItem(\"type\");\n                            type = item != null ? item.InnerText : \"\";\n\n                            item = node.Attributes.GetNamedItem(\"md5\");\n                            md5 = item != null ? item.InnerText : \"\";\n\n                            item = node.Attributes.GetNamedItem(\"cdnurl\");\n                            url = item != null ? item.InnerText : \"\";\n\n                            if (EmojiCache.ContainsKey(md5))\n                            {\n                                i--;\n                                continue;\n                            }\n                            if (url == \"\")\n                            {\n                                i--;\n                                continue;\n                            }\n                            else\n                            {\n                                string path = Path.Combine(UserBakConfig.UserWorkspacePath, msg.StrTalker, \"Emoji\", md5 + \".gif\");\n                                try\n                                {\n                                    HttpResponseMessage res = httpClient.GetAsync(url).Result;\n                                    if (res.IsSuccessStatusCode)\n                                    {\n                                        using (FileStream fs = File.Create(path))\n                                        {\n                                            res.Content.ReadAsStream().CopyTo(fs);\n                                        }\n                                    }\n                                }\n                                catch (Exception ex)\n                                {\n\n                                }\n                            }\n                        }\n                    }\n                }\n                catch (Exception ex)\n                {\n\n                }\n            }\n\n            // ä¸è½½å®æåå¯è½ååï¼æ£æ¥ä¸ä¸\n            EmojiCacheInit();\n        }\n\n        public byte[]? GetHeadImgCahce(string username)\n        {\n            if (HeadImgCache.ContainsKey(username))\n            {\n                ContactHeadImg? img = HeadImgCache[username] as ContactHeadImg;\n                if (img == null)\n                    return null;\n                else\n                    return img.smallHeadBuf;\n            }\n            return null;\n        }\n\n        public int[] GetWXCount()\n        {\n            SQLiteConnection? con = getCon(\"MicroMsg\");\n            if (con == null)\n                return new int[] { 0, 0 };\n\n            string query = @\"select count(*) as count from contact where type != 4\";\n            int userCount = con.Query<WXCount>(query)[0].Count;\n\n            int msgCount = 0;\n            for (int i = 0; i <= 99; i++)\n            {\n                con = getCon(\"MSG\" + i.ToString());\n                if (con == null)\n                    return new int[] { userCount, msgCount };\n\n                query = \"select count(*) as count from MSG\";\n                msgCount += con.Query<WXCount>(query)[0].Count;\n            }\n            return new int[] { userCount, msgCount };\n        }\n\n        public ObservableCollection<WXContact> GetWXContacts(string? name = null,bool all = false)\n        {\n            SQLiteConnection? con = getCon(\"MicroMsg\");\n            if (con == null)\n                return new ObservableCollection<WXContact>();\n            string query = @\"select contact.*,session.strContent,contactHeadImgUrl.smallHeadImgUrl,contactHeadImgUrl.bigHeadImgUrl from contact \n            left join session on session.strUsrName = contact.username\n            left join contactHeadImgUrl on contactHeadImgUrl.usrName = contact.username\n            where type != 4 {searchName}\n            order by nOrder desc\";\n\n            if (all)\n            {\n                query = query.Replace(\"where type != 4 \", \"\");\n            }\n\n            List<WXContact>? contacts = null;\n            if (name != null)\n            {\n                query = query.Replace(\"{searchName}\", \" and (username like ? or alias like ? or nickname like ? or remark like ?)\");\n                contacts = con.Query<WXContact>(query, $\"%{name}%\", $\"%{name}%\", $\"%{name}%\", $\"%{name}%\");\n            }\n            else\n            {\n                query = query.Replace(\"{searchName}\", \"\");\n                contacts = con.Query<WXContact>(query);\n            }\n\n            foreach (WXContact contact in contacts)\n            {\n                if(contact.Remark != \"\")\n                    contact.NickName = contact.Remark;\n\n                byte[]? imgBytes = GetHeadImgCahce(contact.UserName);\n                if (imgBytes != null)\n                {\n                    try\n                    {\n                        MemoryStream stream = new MemoryStream(imgBytes);\n                        BitmapImage bitmapImage = new BitmapImage();\n                        bitmapImage.BeginInit();\n                        bitmapImage.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;\n                        bitmapImage.StreamSource = stream;\n                        bitmapImage.EndInit();\n                        bitmapImage.Freeze();\n                        contact.Avatar = bitmapImage;\n                    }\n                    catch\n                    {\n#if DEBUG\n                        File.AppendAllText(\"debug.log\", string.Format(\"[D]{0} {1}:{2}\\n\", DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\"), \"BitmapConvert Err=>Length\", imgBytes.Length));\n#endif\n                    }\n                }\n                else\n                    continue;\n            }\n\n            return new ObservableCollection<WXContact>(contacts);\n        }\n\n        public List<WXUserImg>? GetUserImgs()\n        {\n            SQLiteConnection? con = getCon(\"MicroMsg\");\n            if (con == null)\n                return null;\n            string query = \"select * from contactHeadImgUrl\";\n            return con.Query<WXUserImg>(query);\n        }\n\n        public List<WXChatRoom>? GetWXChatRooms()\n        {\n            SQLiteConnection? con = getCon(\"MicroMsg\");\n            if (con == null)\n                return null;\n            string query = \"select * from ChatRoom\";\n            return con.Query<WXChatRoom>(query);\n        }\n\n        public List<WXMsg> GetTypeMsg(string type,string username)\n        {\n            List<WXMsg> tmp = new List<WXMsg>();\n            for (int i = 0; i <= 99; i++)\n            {\n                SQLiteConnection? con = getCon(\"MSG\" + i.ToString());\n                if (con == null)\n                    return tmp;\n\n                List<WXMsg> wXMsgs;\n                if (username == \"\")\n                {\n                    string query = \"select * from MSG where Type=?\";\n                    wXMsgs = con.Query<WXMsg>(query, type);\n                }\n                else\n                {\n                    string query = \"select * from MSG where Type=? and StrTalker = ?\";\n                    wXMsgs = con.Query<WXMsg>(query, type, username);\n                }\n                tmp.AddRange(wXMsgs);\n            }\n            return tmp;\n        }\n\n        public List<WXMsg>? GetWXMsgs(string uid,int time,int page)\n        {\n            List<WXMsg> tmp = new List<WXMsg>();\n            for (int i = 0; i <= 99; i++)\n            {\n                SQLiteConnection? con = getCon(\"MSG\" + i.ToString());\n                if (con == null)\n                    return tmp;\n\n                List<WXMsg>? wXMsgs = null;\n                string query = \"select * from MSG where StrTalker=? and CreateTime>? Limit ?\";\n                wXMsgs = con.Query<WXMsg>(query, uid, time, page);\n                if (wXMsgs.Count != 0) {\n                    return ProcessMsg(wXMsgs, uid);\n                }\n            }\n            return tmp;\n        }\n        public List<WXMsg>? GetWXMsgs(string uid,string msg = \"\")\n        {\n            List<WXMsg> tmp = new List<WXMsg>();\n            for (int i = 0; i <= 99; i++)\n            {\n                SQLiteConnection? con = getCon(\"MSG\" + i.ToString());\n                if (con == null)\n                    return tmp;\n\n                List<WXMsg>? wXMsgs = null;\n                if (msg == \"\")\n                {\n                    string query = \"select * from MSG where StrTalker=?\";\n                    wXMsgs = con.Query<WXMsg>(query, uid);\n                }\n                else if (uid == \"\")\n                {\n                    string query = \"select * from MSG where StrContent like ?\";\n                    wXMsgs = con.Query<WXMsg>(query, string.Format(\"%{0}%\", msg));\n                }\n                else\n                {\n                    string query = \"select * from MSG where StrTalker=? and StrContent like ?\";\n                    wXMsgs = con.Query<WXMsg>(query, uid, string.Format(\"%{0}%\", msg));\n                }\n\n                tmp.AddRange(ProcessMsg(wXMsgs, uid));\n            }\n            return tmp;\n        }\n\n        public List<WXMsg>? GetWXMsgs(string uid, DatetimePickerViewModel dateModel)\n        {\n            List<WXMsg> tmp = new List<WXMsg>();\n            for (int i = 0; i <= 99; i++)\n            {\n                SQLiteConnection? con = getCon(\"MSG\" + i.ToString());\n                if (con == null)\n                    return tmp;\n\n                List<WXMsg>? wXMsgs = null;\n                string query = \"\";\n\n                if (dateModel.DateType == 2 || dateModel.DateType == 3)\n                {\n                    query = \"select * from MSG where StrTalker=? and date(createtime,'unixepoch') = ?\";\n                    wXMsgs = con.Query<WXMsg>(query, uid, dateModel.PickDate.ToString(\"yyyy-MM-dd\"));\n                }\n                else if(dateModel.DateType == 4 )\n                {\n                    query = \"select * from MSG where StrTalker=? and date(createtime,'unixepoch') >= ? and date(createtime,'unixepoch') <= ?\";\n                    wXMsgs = con.Query<WXMsg>(query, uid, dateModel.StartDate.ToString(\"yyyy-MM-dd\"), dateModel.EndDate.ToString(\"yyyy-MM-dd\"));\n                }\n                else\n                {\n                    query = \"select * from MSG where StrTalker=?\";\n                    wXMsgs = con.Query<WXMsg>(query, uid);\n                }\n                \n                tmp.AddRange(ProcessMsg(wXMsgs, uid));\n            }\n            return tmp;\n        }\n\n        private List<WXMsg> ProcessMsg(List<WXMsg> msgs,string uid)\n        {\n            foreach (WXMsg w in msgs)\n            {\n                if (UserNameCache.ContainsKey(w.StrTalker))\n                {\n                    WXContact? contact = UserNameCache[w.StrTalker] as WXContact;\n                    if (contact != null)\n                    {\n                        if (contact.Remark != \"\")\n                            w.NickName = contact.Remark;\n                        else\n                            w.NickName = contact.NickName;\n\n                        w.StrTalker = contact.UserName;\n                    }\n                }\n                else\n                {\n                    w.NickName = uid;\n                }\n\n                // ç¾¤èå¤ç\n                if (uid.Contains(\"@chatroom\"))\n                {\n                    string userId = \"\";\n\n                    if (w.BytesExtra == null)\n                        continue;\n\n                    string sl = BitConverter.ToString(w.BytesExtra).Replace(\"-\", \"\");\n\n                    ProtoMsg protoMsg;\n                    using (MemoryStream stream = new MemoryStream(w.BytesExtra))\n                    {\n                        protoMsg = ProtoBuf.Serializer.Deserialize<ProtoMsg>(stream);\n                    }\n\n                    if (protoMsg.TVMsg != null)\n                    {\n                        foreach (TVType _tmp in protoMsg.TVMsg)\n                        {\n                            if (_tmp.Type == 1)\n                                userId = _tmp.TypeValue;\n                        }\n                    }\n\n\n                    if (!w.IsSender)\n                    {\n                        if (UserNameCache.ContainsKey(userId))\n                        {\n                            WXContact? contact = UserNameCache[userId] as WXContact;\n                            if (contact != null)\n                                w.NickName = contact.Remark == \"\" ? contact.NickName : contact.Remark;\n                        }\n                        else\n                        {\n                            w.NickName = userId;\n                        }\n                    }\n                }\n\n\n                // åéäººåå­å¤ç\n                if (w.IsSender)\n                    w.NickName = \"æ\";\n\n                w.DisplayContent = w.StrContent;\n                // é¢å¤æ ¼å¼å¤ç\n                if (w.Type != 1)\n                {\n                    if (w.Type == 10000)\n                    {\n                        w.Type = 1;\n                        w.NickName = \"ç³»ç»æ¶æ¯\";\n                        w.DisplayContent = w.StrContent.Replace(\"<revokemsg>\", \"\").Replace(\"</revokemsg>\", \"\");\n                    }\n                    else if (w.Type == 49 && (w.SubType == 6 || w.SubType == 19 || w.SubType == 40))\n                    {\n                        WXSessionAttachInfo? attachInfos = GetWXMsgAtc(w);\n                        if (attachInfos == null)\n                        {\n                            w.DisplayContent = \"éä»¶ä¸å­å¨\";\n                        }\n                        else\n                        {\n                            w.DisplayContent = Path.Combine(UserBakConfig!.UserResPath, attachInfos.attachPath);\n                        }\n                    }\n                    else\n                    {\n                        w.DisplayContent = \"[çé¢æªæ¯ææ ¼å¼]Type=\" + w.Type;\n                    }\n                }\n            }\n            return msgs;\n        }\n        public List<WXSessionAttachInfo>? GetWXMsgAtc()\n        {\n            SQLiteConnection? con = getCon(\"MultiSearchChatMsg\");\n            if (con == null)\n                return null;\n\n            string query = \"select * from SessionAttachInfo\";\n            List<WXSessionAttachInfo> list = con.Query<WXSessionAttachInfo>(query);\n            if (list.Count != 0)\n            {\n                return list;\n            }\n            else\n                return null;\n        }\n        public WXSessionAttachInfo? GetWXMsgAtc(WXMsg msg)\n        {\n            SQLiteConnection? con = getCon(\"MultiSearchChatMsg\");\n            if (con == null)\n                return null;\n\n            string query = \"select * from SessionAttachInfo where msgId = ? order by attachsize desc\";\n            List<WXSessionAttachInfo> list = con.Query<WXSessionAttachInfo>(query, msg.MsgSvrID);\n            if (list.Count != 0)\n            {\n                //é¨åéä»¶å¯è½æmd5æ ¡éªï¼è¿éç§»é¤æ ¡éªï¼ç»çæ¯æ­£ç¡®è·¯å¾\n                WXSessionAttachInfo acc = list[0];\n                int index = acc.attachPath.IndexOf(\".dat\");\n                int index2 = acc.attachPath.IndexOf(\".dat\");\n                if (acc.attachPath.Length - index > 10 && index != -1)\n                {\n                    acc.attachPath = acc.attachPath.Substring(0, acc.attachPath.Length - 32);\n                }\n                if (acc.attachPath.Length - index2 > 10 && index2 != -1)\n                {\n                    acc.attachPath = acc.attachPath.Substring(0, acc.attachPath.Length - 32);\n                }\n                return acc;\n            }\n            else\n                return null;\n        }\n        public WXMediaMsg? GetVoiceMsg(WXMsg msg)\n        {\n            for (int i = 0; i <= 99; i++)\n            {\n                SQLiteConnection? con = getCon(\"MediaMSG\" + i.ToString());\n                if (con == null)\n                    continue;\n\n                string query = \"select * from Media where Reserved0=?\";\n                List<WXMediaMsg> wXMsgs = con.Query<WXMediaMsg>(query, msg.MsgSvrID);\n                if (wXMsgs.Count != 0)\n                    return wXMsgs[0];\n            }\n            return null;\n        }\n        public string? GetAttachment(WXMsgType type, WXMsg msg)\n        {\n            if (UserBakConfig == null)\n                return null;\n\n            string? tmpPath = Path.Combine(UserBakConfig.UserWorkspacePath, msg.StrTalker, \"Temp\");\n            if (!Directory.Exists(tmpPath))\n                Directory.CreateDirectory(tmpPath);\n\n            // è¿é¨åæ¯æ¥æ¾\n            // å¦ææ¯å¾çåè§é¢ï¼ä»éä»¶åºä¸­æç´¢\n            string? path = null;\n            if (type == WXMsgType.Image || type == WXMsgType.Video || type == WXMsgType.File)\n            {\n                WXSessionAttachInfo? atcInfo = GetWXMsgAtc(msg);\n                if (atcInfo == null)\n                    return null;\n                path = atcInfo.attachPath;\n            }\n            // å¦ææ¯ä»è¯­é³ï¼ä»åªä½åºæ¥æ¾\n            else if (type == WXMsgType.Audio)\n            {\n                WXMediaMsg? voiceMsg = GetVoiceMsg(msg);\n                if (voiceMsg == null)\n                    return null;\n                if (voiceMsg.Buf == null)\n                    return null;\n\n                // ä»DBåé³é¢æä»¶å°ä¸´æ¶ç®å½\n                string tmp_file_path = Path.Combine(tmpPath, voiceMsg.Key + \".arm\");\n                using (FileStream stream = new FileStream(tmp_file_path, FileMode.OpenOrCreate))\n                {\n                    stream.Write(voiceMsg.Buf, 0, voiceMsg.Buf.Length);\n                }\n                path = tmp_file_path;\n            }\n            else if (type == WXMsgType.Emoji)\n            {\n                try\n                {\n                    XmlDocument xmlDocument = new XmlDocument();\n                    xmlDocument.LoadXml(msg.StrContent);\n                    XmlNode? node = xmlDocument.SelectSingleNode(\"/msg/emoji\");\n                    if (node != null)\n                    {\n                        if (node.Attributes != null)\n                        {\n                            XmlNode? item = node.Attributes.GetNamedItem(\"md5\");\n                            string md5 = item != null ? item.InnerText : \"\";\n                            if (EmojiCache.ContainsKey(md5))\n                            {\n                                path = string.Format(\"Emoji\\\\{0}.gif\", md5);\n                            }\n                        }\n                    }\n                }\n                catch\n                {\n                    return null;\n                }\n                \n            }\n\n            if (path == null)\n                return null;\n\n            // è¿é¨åæ¯è§£å¯\n            // è·åå°åè·¯å¾åï¼å¼å§è¿è¡è§£å¯è½¬ç§»,åªæå¾çåè¯­é³éè¦è§£å¯ï¼è§£å¯åæ¯ç´æ¥å½æ¡£ç®å½\n            if (type == WXMsgType.Image || type == WXMsgType.Audio)\n            {\n                path = DecryptAttachment(type, path, msg.StrTalker);\n            }\n            else if (type == WXMsgType.Video || type == WXMsgType.File)\n            {\n                string to_dir;\n                if (type == WXMsgType.Video)\n                    to_dir = Path.Combine(UserBakConfig.UserWorkspacePath, msg.StrTalker, \"Video\");\n                else\n                    to_dir = Path.Combine(UserBakConfig.UserWorkspacePath, msg.StrTalker, \"File\");\n                if (!Directory.Exists(to_dir))\n                    Directory.CreateDirectory(to_dir);\n                FileInfo fileInfo = new FileInfo(path);\n                // ç®æ è§é¢è·¯å¾\n                string to_file_path = Path.Combine(to_dir, fileInfo.Name);\n                // è§é¢çè·¯å¾æ¯ç¸å¯¹è·¯å¾ï¼éè¦å ä¸èµæºç®å½\n                path = Path.Combine(UserBakConfig.UserResPath, path);\n                // åæä»¶å­å¨ï¼ç®æ ä¸å­å¨\n                if (!File.Exists(to_file_path) && File.Exists(path))\n                {\n                    // å¤å¶\n                    File.Copy(path, to_file_path);\n                    path = to_file_path;\n                }\n                else if (File.Exists(to_file_path))\n                {\n                    path = to_file_path;\n                }\n                else\n                    return null;\n            }\n\n            if (path == null)\n                return null;\n\n            // æ¹ç¸å¯¹è·¯å¾\n            path = path.Replace(UserBakConfig.UserWorkspacePath + \"\\\\\", \"\");\n            return path;\n\n        }\n        public string? DecryptAttachment(WXMsgType type, string path,string username)\n        {\n            if (UserBakConfig == null)\n                return null;\n\n            string? file_path = null;\n            switch (type)\n            {\n                case WXMsgType.Image:\n                    string img_dir = Path.Combine(UserBakConfig.UserWorkspacePath, username, \"Image\");\n                    if (!Directory.Exists(img_dir))\n                        Directory.CreateDirectory(img_dir);\n                    // å¾ççè·¯å¾æ¯ç¸å¯¹è·¯å¾ï¼éè¦å ä¸èµæºç®å½\n                    path = Path.Combine(UserBakConfig.UserResPath, path);\n                    if (!File.Exists(path))\n                        return null;\n                    byte[] decFileByte = DecryptionHelper.DecImage(path);\n                    if (decFileByte.Length < 2)\n                        new Exception(\"è§£å¯å¤±è´¥ï¼å¯è½æ¯æªæ¯æçæ ¼å¼\");\n                    string decFiletype = DecryptionHelper.CheckFileType(decFileByte);\n                    file_path = DecryptionHelper.SaveDecImage(decFileByte, path, img_dir, decFiletype);\n                    break;\n                case WXMsgType.Audio:\n                    string audio_dir = Path.Combine(UserBakConfig.UserWorkspacePath, username, \"Audio\");\n                    if (!Directory.Exists(audio_dir))\n                        Directory.CreateDirectory(audio_dir);\n                    FileInfo fileInfo = new FileInfo(path);\n                    string audio_file_dir = Path.Combine(audio_dir, fileInfo.Name + \".mp3\");\n                    ToolsHelper.DecodeVoice(path, path + \".pcm\", audio_file_dir);\n                    file_path = audio_file_dir;\n                    break;\n            }\n            return file_path;\n        }\n        public List<WXMsgGroup> GetWXMsgGroup()\n        {\n            List<WXMsgGroup> g = new List<WXMsgGroup>();\n            for (int i = 0; i <= 99; i++)\n            {\n                SQLiteConnection? con = getCon(\"MSG\" + i.ToString());\n                if (con == null)\n                    return g;\n\n                string query = \"select StrTalker,Count(localId) as MsgCount from MSG GROUP BY StrTalker\";\n                List<WXMsgGroup> wXMsgs = con.Query<WXMsgGroup>(query);\n                foreach (WXMsgGroup w in wXMsgs)\n                {\n                    WXMsgGroup? tmp = g.Find(x => x.UserName == w.UserName);\n                    if (tmp == null)\n                        g.Add(w);\n                    else\n                        tmp.MsgCount += g.Count;\n                }\n\n            }\n            return g;\n        }\n    }\n\n    public enum WXMsgType\n    {\n        Image = 0,\n        Video = 1,\n        Audio = 2,\n        File = 3,\n        Emoji = 4,\n    }\n}\n"
        },
        {
          "name": "WXWorkspace.cs",
          "type": "blob",
          "size": 6.9580078125,
          "content": "ï»¿using Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Linq;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing WechatBakTool.Helpers;\nusing WechatBakTool.Model;\nusing WechatBakTool.ViewModel;\n\nnamespace WechatBakTool\n{\n    public class WXWorkspace\n    {\n        private UserBakConfig UserBakConfig = new UserBakConfig();\n        public WXWorkspace(string path,string account = \"\") {\n            string checkResult = Init(path, false, account);\n            if (checkResult != \"\")\n                new Exception(checkResult);\n        }\n\n        public WXWorkspace(UserBakConfig userBakConfig)\n        {\n            UserBakConfig = userBakConfig;\n        }\n\n        public void DecryptDB(string pid,int type,CreateWorkViewModel viewModel,string pwd = \"\")\n        {\n            if (UserBakConfig == null)\n            {\n                throw new Exception(\"æ²¡æå·¥ä½åºæä»¶ï¼æ æ³è§£å¯\");\n            }\n\n            if (!UserBakConfig.Decrypt)\n            {\n                byte[]? key = null;\n                viewModel.LabelStatus = \"æ­£å¨è·åç§é¥ï¼éè¦1 - 10ç§å·¦å³\";\n                if(pwd == \"\")\n                    key = DecryptionHelper.GetWechatKey(pid, type, UserBakConfig.Account);\n                else\n                {\n                    key = new byte[pwd.Length / 2];\n                    for(int i = 0;i<pwd.Length / 2; i++)\n                    {\n                        key[i] = Convert.ToByte(pwd.Substring(i * 2, 2), 16);\n                    }\n                    \n                }\n#if DEBUG\n                File.WriteAllText(\"key.log\", BitConverter.ToString(key!));\n#endif\n                if (key == null)\n                {\n                    throw new Exception(\"è·åå°çå¯é¥ä¸ºç©ºï¼è·åå¤±è´¥\");\n                }\n\n                string source = Path.Combine(UserBakConfig.UserWorkspacePath, \"OriginalDB\");\n                string to = Path.Combine(UserBakConfig.UserWorkspacePath, \"DecDB\");\n\n                DecryptionHelper.DecryUserData(key, source, to, viewModel);\n                UserBakConfig.Decrypt = true;\n\n                WXUserReader reader = new WXUserReader(UserBakConfig);\n                int[] count = reader.GetWXCount();\n                UserBakConfig.Friends_Number = count[0].ToString();\n                UserBakConfig.Msg_Number = count[1].ToString();\n                SaveConfig(UserBakConfig);\n            }\n        }\n\n        public void MoveDB(CreateWorkViewModel viewModel)\n        {\n            string sourceBase = Path.Combine(UserBakConfig.UserResPath, \"Msg\");\n            string sourceMulit = Path.Combine(UserBakConfig.UserResPath, \"Msg/Multi\");\n            string[] files = Directory.GetFiles(sourceBase);\n            foreach (string file in files)\n            {\n                FileInfo fileInfo = new FileInfo(file);\n                if (fileInfo.Extension == \".db\")\n                {\n                    viewModel.LabelStatus = \"æ­£å¨è¿ç§»\" + fileInfo.Name;\n                    string to_path = Path.Combine(UserBakConfig.UserWorkspacePath, \"OriginalDB\", fileInfo.Name);\n                    File.Copy(file, to_path, true);\n                }\n            }\n\n            files = Directory.GetFiles(sourceMulit);\n            foreach (string file in files)\n            {\n                FileInfo fileInfo = new FileInfo(file);\n                if (fileInfo.Extension == \".db\")\n                {\n                    viewModel.LabelStatus = \"æ­£å¨è¿ç§»\" + fileInfo.Name;\n                    string to_path = Path.Combine(UserBakConfig.UserWorkspacePath, \"OriginalDB\", fileInfo.Name);\n                    File.Copy(file, to_path, true);\n                }\n            }\n        }\n        public UserBakConfig ReturnConfig()\n        {\n            return UserBakConfig;\n        }\n        public static void SaveConfig(UserBakConfig userBakConfig, bool manual = false)\n        {\n            if(userBakConfig.UserWorkspacePath != \"\")\n            {\n                DirectoryInfo directoryInfo = new DirectoryInfo(userBakConfig.UserWorkspacePath);\n                if(directoryInfo.Parent != null)\n                {\n                    string json_path = Path.Combine(directoryInfo.Parent.FullName, userBakConfig.Manual ? userBakConfig.Hash + \".json\" : userBakConfig.UserName + \".json\");\n                    string json = JsonConvert.SerializeObject(userBakConfig);\n                    File.WriteAllText(json_path, json);\n                }\n            }\n        }\n\n        public void ManualInit()\n        {\n            Init(\"\", true, \"\");\n        }\n        private string Init(string path,bool manual = false,string account = \"\")\n        {\n            string curPath = AppDomain.CurrentDomain.BaseDirectory;\n            if (!manual)\n            {\n                string md5 = GetMd5Hash(path);\n                string[] paths = path.Split(new string[] { \"/\", \"\\\\\" }, StringSplitOptions.None);\n                string username = paths[paths.Length - 1];\n                UserBakConfig.UserResPath = path;\n                UserBakConfig.UserWorkspacePath = Path.Combine(curPath, \"workspace\", md5);\n                UserBakConfig.Hash = md5;\n                UserBakConfig.UserName = username;\n                UserBakConfig.Account = account;\n            }\n\n            UserBakConfig.Manual = manual;\n\n            if (!Directory.Exists(UserBakConfig.UserResPath) && !manual)\n            {\n                return \"ç¨æ·èµæºæä»¶å¤¹ä¸å­å¨ï¼å¦éä½¿ç¨ç¦»çº¿æ°æ®ï¼è¯·ä»å·¥ä½åºè¯»å\";\n            }\n\n            if (!Directory.Exists(UserBakConfig.UserWorkspacePath))\n            {\n                Directory.CreateDirectory(UserBakConfig.UserWorkspacePath);\n            }\n\n            string db = Path.Combine(UserBakConfig.UserWorkspacePath, \"OriginalDB\");\n            string decDb = Path.Combine(UserBakConfig.UserWorkspacePath, \"DecDB\");\n\n            if (!Directory.Exists(db))\n            {\n                Directory.CreateDirectory (db);\n            }\n            if (!Directory.Exists(decDb))\n            {\n                Directory.CreateDirectory(decDb);\n            }\n            SaveConfig(UserBakConfig, manual);\n            return \"\";\n        }\n\n        private static string GetMd5Hash(string input)\n        {\n            using (MD5 md5Hash = MD5.Create())\n            {\n                // Convert the input string to a byte array and compute the hash.\n                byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));\n\n                // Create a new Stringbuilder to collect the bytes\n                // and create a string.\n                StringBuilder sBuilder = new StringBuilder();\n\n                // Loop through each byte of the hashed data \n                // and format each one as a hexadecimal string.\n                for (int i = 0; i < data.Length; i++)\n                {\n                    sBuilder.Append(data[i].ToString(\"x2\"));\n                }\n\n                // Return the hexadecimal string.\n                return sBuilder.ToString();\n            }\n        }\n    }\n}\n"
        },
        {
          "name": "WechatBakTool.csproj",
          "type": "blob",
          "size": 3.060546875,
          "content": "ï»¿<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>WinExe</OutputType>\n    <TargetFramework>net6.0-windows</TargetFramework>\n    <Nullable>enable</Nullable>\n    <UseWPF>true</UseWPF>\n    <AllowUnsafeBlocks>True</AllowUnsafeBlocks>\n    <AssemblyVersion>0.9.7.5</AssemblyVersion>\n    <FileVersion>0.9.7.5</FileVersion>\n    <Version>0.9.7.5</Version>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <Compile Remove=\"YearReport\\**\" />\n    <EmbeddedResource Remove=\"YearReport\\**\" />\n    <None Remove=\"YearReport\\**\" />\n    <Page Remove=\"YearReport\\**\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"CommunityToolkit.Mvvm\" Version=\"8.2.2\" />\n    <PackageReference Include=\"jieba.NET\" Version=\"0.42.2\" />\n    <PackageReference Include=\"K4os.Compression.LZ4.Streams\" Version=\"1.3.6\" />\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.3\" />\n    <PackageReference Include=\"protobuf-net\" Version=\"3.2.30\" />\n    <PackageReference Include=\"sqlite-net-pcl\" Version=\"1.8.116\" />\n    <PackageReference Include=\"System.Drawing.Common\" Version=\"8.0.0\" />\n    <PackageReference Include=\"WordCloudSharp\" Version=\"1.1.0\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <None Update=\"libcrypto-1_1.dll\">\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\n    </None>\n    <None Update=\"libssl-1_1.dll\">\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\n    </None>\n    <None Update=\"mask.png\">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n    <None Update=\"Resources\\char_state_tab.json\">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n    <None Update=\"Resources\\cn_synonym.txt\">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n    <None Update=\"Resources\\dict.txt\">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n    <None Update=\"Resources\\idf.txt\">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n    <None Update=\"Resources\\pos_prob_emit.json\">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n    <None Update=\"Resources\\pos_prob_start.json\">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n    <None Update=\"Resources\\pos_prob_trans.json\">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n    <None Update=\"Resources\\prob_emit.json\">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n    <None Update=\"Resources\\prob_trans.json\">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n    <None Update=\"Resources\\stopwords.txt\">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n    <None Update=\"Tools\\ffmpeg.exe\">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n    <None Update=\"Tools\\silk_v3_decoder.exe\">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n    <None Update=\"version.json\">\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\n    </None>\n  </ItemGroup>\n\n</Project>\n"
        },
        {
          "name": "WechatBakTool.sln",
          "type": "blob",
          "size": 1.080078125,
          "content": "ï»¿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.5.33530.505\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"WechatBakTool\", \"WechatBakTool.csproj\", \"{2F385240-6FD0-47C5-9B5E-CC8D9AA55B25}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{2F385240-6FD0-47C5-9B5E-CC8D9AA55B25}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{2F385240-6FD0-47C5-9B5E-CC8D9AA55B25}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{2F385240-6FD0-47C5-9B5E-CC8D9AA55B25}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{2F385240-6FD0-47C5-9B5E-CC8D9AA55B25}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {687B0D0F-1496-444B-8117-C613700F7231}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "WordCloudSetting.xaml",
          "type": "blob",
          "size": 2.0654296875,
          "content": "ï»¿<Window x:Class=\"WechatBakTool.WordCloudSetting\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n        xmlns:local=\"clr-namespace:WechatBakTool\"\n        mc:Ignorable=\"d\"\n        Title=\"è¯äºæ¸²æè®¾ç½®\" Height=\"360\" Width=\"300\" WindowStartupLocation=\"CenterScreen\">\n    <Grid>\n        <Label HorizontalAlignment=\"left\" VerticalAlignment=\"Top\" Margin=\"20,10,0,0\">æ¸²æé«åº¦</Label>\n        <TextBox HorizontalAlignment=\"left\" VerticalAlignment=\"Top\" Margin=\"25,35,0,0\" Width=\"220\" Text=\"{Binding ImgHeight}\"/>\n        <Label HorizontalAlignment=\"left\" VerticalAlignment=\"Top\" Margin=\"20,60,0,0\">æ¸²æå®½åº¦</Label>\n        <TextBox HorizontalAlignment=\"left\" VerticalAlignment=\"Top\" Margin=\"25,85,0,0\" Width=\"220\" Text=\"{Binding ImgWidth}\"/>\n        <Label HorizontalAlignment=\"left\" VerticalAlignment=\"Top\" Margin=\"20,110,0,0\">æå¤§è¯æ°</Label>\n        <TextBox HorizontalAlignment=\"left\" VerticalAlignment=\"Top\" Margin=\"25,135,0,0\" Width=\"220\" Text=\"{Binding MaxKeyCount}\"/>\n        <Label HorizontalAlignment=\"left\" VerticalAlignment=\"Top\" Margin=\"20,160,0,0\">æ¸²æå­ä½</Label>\n        <ComboBox HorizontalAlignment=\"left\" VerticalAlignment=\"Top\" Margin=\"25,185,0,0\" Width=\"220\" SelectedItem=\"{Binding Font}\" ItemsSource=\"{Binding FontList}\"/>\n        <CheckBox HorizontalAlignment=\"left\" VerticalAlignment=\"Top\" Margin=\"25,215,0,0\" Content=\"è¿æ»¤åªæä¸ä¸ªå­çå³é®è¯ãæ¨èã\" IsChecked=\"{Binding EnableRemoveOneKey}\" />\n\n        <Label HorizontalAlignment=\"left\" VerticalAlignment=\"Top\" Margin=\"20,235,0,0\">èªå®ä¹è¿æ»¤è¯ï¼è±æ,å·åéï¼</Label>\n        <TextBox HorizontalAlignment=\"left\" VerticalAlignment=\"Top\" Margin=\"25,260,0,0\" Width=\"220\" Text=\"{Binding RemoveKey}\"/>\n        <Button Content=\"ç¡®å®\" HorizontalAlignment=\"Left\" Margin=\"91,293,0,0\" VerticalAlignment=\"Top\" Width=\"100\" Click=\"Button_Click\"/>\n\n    </Grid>\n</Window>\n"
        },
        {
          "name": "WordCloudSetting.xaml.cs",
          "type": "blob",
          "size": 1.2919921875,
          "content": "ï»¿using System;\nusing System.Collections.Generic;\nusing System.Drawing.Text;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Shapes;\nusing WechatBakTool.ViewModel;\n\nnamespace WechatBakTool\n{\n    /// <summary>\n    /// WordCloudSetting.xaml çäº¤äºé»è¾\n    /// </summary>\n    public partial class WordCloudSetting : Window\n    {\n        public WordCloudSetting(WordCloudSettingViewModel viewModel)\n        {\n            DataContext = viewModel;\n            InitializeComponent();\n            viewModel.FontList = LoadFont();\n        }\n\n        private List<string> LoadFont()\n        {\n            InstalledFontCollection installedFontCollection = new InstalledFontCollection();\n            var fontFamilies = installedFontCollection.Families;\n            List<string> list = new List<string>();\n            foreach ( var fontFamily in fontFamilies )\n            {\n                list.Add(fontFamily.Name);\n            }\n            return list;\n        }\n\n        private void Button_Click(object sender, RoutedEventArgs e)\n        {\n            Close();\n        }\n    }\n}\n"
        },
        {
          "name": "libcrypto-1_1.dll",
          "type": "blob",
          "size": 3338,
          "content": null
        },
        {
          "name": "libssl-1_1.dll",
          "type": "blob",
          "size": 670,
          "content": null
        },
        {
          "name": "mask.png",
          "type": "blob",
          "size": 11.4326171875,
          "content": null
        },
        {
          "name": "version.json",
          "type": "blob",
          "size": 0.7626953125,
          "content": "ï»¿[\n\t{\n\t\t\"Version\": \"3.9.6.33\",\n\t\t\"BaseAddr\": 62031872\n\t},\n\t{\n\t\t\"Version\": \"3.9.7.25\",\n\t\t\"BaseAddr\": 63484032\n\t},\n\t{\n\t\t\"Version\": \"3.9.7.29\",\n\t\t\"BaseAddr\": 63488256\n\t},\n\t{\n\t\t\"Version\": \"3.9.8.15\",\n\t\t\"BaseAddr\": 64997904\n\t},\n\t{\n\t\t\"Version\": \"3.9.8.25\",\n\t\t\"BaseAddr\": 65002192\n\t},\n\t{\n\t\t\"Version\": \"3.9.9.27\",\n\t\t\"BaseAddr\": 68066576\n\t},\n\t{\n\t\t\"Version\": \"3.9.9.35\",\n\t\t\"BaseAddr\": 68066576\n\t},\n\t{\n\t\t\"Version\": \"3.9.9.43\",\n\t\t\"BaseAddr\": 68067216\n\t},\n\t{\n\t\t\"Version\": \"3.9.10.19\",\n\t\t\"BaseAddr\": 95131040\n\t},\n\t{\n\t\t\"Version\": \"3.9.10.27\",\n\t\t\"BaseAddr\": 95126928\n\t},\n\t{\n\t\t\"Version\": \"3.9.11.19\",\n\t\t\"BaseAddr\": 93551568\n\t},\n\t{\n\t\t\"Version\": \"3.9.11.23\",\n\t\t\"BaseAddr\": 93700920\n\t},\n\t{\n\t\t\"Version\": \"3.9.11.25\",\n\t\t\"BaseAddr\": 93702352\n\t},\n\t{\n\t\t\"Version\": \"3.9.12.15\",\n\t\t\"BaseAddr\": 93814816\n\t}\n]"
        }
      ]
    }
  ]
}