{
  "metadata": {
    "timestamp": 1736710764027,
    "page": 215,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Unity-Technologies/arfoundation-samples",
      "stars": 3117,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5517578125,
          "content": "[Ll]ibrary/\n[Ll]ogs/\n[Tt]emp/\n[Oo]bj/\n[Bb]uild/\n[Bb]uilds/\n[Uu]serSettings/\nAssets/AssetStoreTools*\nPackages/packages-lock.json\n\n# Visual Studio 2015 cache directory\n/.vs/\n.vscode\n\n# Ignore manually added packages\ncom.*\nupm-xr*\n\n# Autogenerated VS/MD/Consulo solution and project files\nExportedObj/\n.consulo/\n*.csproj\n*.unityproj\n*.sln\n*.suo\n*.tmp\n*.user\n*.userprefs\n*.pidb\n*.booproj\n*.svd\n*.pdb\n*.idea\n.vsconfig\n\n# Unity3D generated meta files\n*.pidb.meta\n*.pdb.meta\n\n# Unity3D Generated File On Crash Reports\nsysinfo.txt\n\n# Builds\n*.apk\n*.unitypackage\n\n.DS_Store\n"
        },
        {
          "name": "Assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.240234375,
          "content": "# Contributing\n\nAt this time, the repo is not accepting external contributions in the form of PRs. \n\nWe encourage you to submit bugs, suggestions, and feedback as [GitHub issues](https://github.com/Unity-Technologies/arfoundation-samples/issues)."
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 0.4697265625,
          "content": "AR Foundation Samples copyright © 2020 Unity Technologies ApS\n\nLicensed under the Unity Companion License for Unity-dependent projects--see [Unity Companion License](http://www.unity3d.com/legal/licenses/Unity_Companion_License).\n\nUnless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions.\n"
        },
        {
          "name": "Packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "ProjectSettings",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 29.1533203125,
          "content": "# AR Foundation Samples\n\nExample AR scenes that use [AR Foundation 6.0](https://docs.unity3d.com/Packages/com.unity.xr.arfoundation@6.0/manual/index.html) and demonstrate its features. Each feature is used in a minimal sample scene with example code that you can modify or copy into your project.\n\nThis sample project primarily depends on five Unity packages:\n\n* [AR Foundation](https://docs.unity3d.com/Packages/com.unity.xr.arfoundation@6.0/manual/index.html)\n* [Google ARCore XR Plug-in](https://docs.unity3d.com/Packages/com.unity.xr.arcore@6.0/manual/index.html) on Android\n* [Apple ARKit XR Plug-in](https://docs.unity3d.com/Packages/com.unity.xr.arkit@6.0/manual/index.html) on iOS\n* [OpenXR Plug-in](https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.8/manual/index.html) on HoloLens 2\n* [Unity OpenXR: Meta](https://docs.unity3d.com/Packages/com.unity.xr.meta-openxr@2.0/manual/index.html) on Meta Quest\n\n## Which version should I use?\n\nThe `main` branch of this repository uses AR Foundation 6.0 and is compatible with Unity 2023.2 and newer. To access sample scenes for previous versions of AR Foundation, refer to the table below for links to other branches.\n\n| Unity Version    | AR Foundation Version |\n| ---------------- | --------------------- |\n| Unity 6 (6000.0) | 6.0 (main) |\n| 2022.3           | [5.1](https://github.com/Unity-Technologies/arfoundation-samples/tree/5.1) |\n| 2021.3           | [4.2](https://github.com/Unity-Technologies/arfoundation-samples/tree/4.2) |\n\n## How to use these samples\n\n### Build and run on device\n\nYou can build the AR Foundation Samples project directly to device, which can be a helpful introduction to using AR Foundation features for the first time.\n\nTo build to device, follow the steps below:\n\n1. Install Unity 2023.2 or later and clone this repository.\n\n2. Open the Unity project at the root of this repository.\n\n3. As with any other Unity project, go to [Build Settings](https://docs.unity3d.com/Manual/BuildSettings.html), select your target platform, and build this project.\n\n#### Meta Quest\n\nThis repository is configured with the Google ARCore XR Plug-in enabled by default on the Android platform. To build for Meta Quest, disable the **Google ARCore** provider in the Android tab of **Project Settings** > **XR Plug-in Management**, then follow the Meta Quest [Project setup](https://docs.unity3d.com/Packages/com.unity.xr.meta-openxr@2.0/manual/project-setup.html) instructions.\n\n### Understand the sample code\n\nAll sample scenes in this project can be found in the `Assets/Scenes` folder. To learn more about the AR Foundation components used in each scene, refer to the [AR Foundation Documentation](https://docs.unity3d.com/Packages/com.unity.xr.arfoundation@6.0/manual/index.html). Each scene is explained in more detail below.\n\n# Table of Contents\n\n| Sample scene(s) | Description |\n| :-------------- | :---------- |\n| [Simple AR](#simple-ar) | Demonstrates basic Plane detection and Raycasting\n| [Camera](#camera) | Scenes that demonstrate Camera features |\n| [Plane detection](#plane-detection) | Scenes that demonstrate Plane detection |\n| [Image tracking](#image-tracking) | Scenes that demonstrate Image tracking |\n| [Object tracking](#object-tracking) | Demonstrates Object tracking |\n| [Face tracking](#face-tracking) | Scenes that demonstrate Face tracking |\n| [Body tracking](#body-tracking) | Scenes that demonstrate Body tracking |\n| [Point clouds](#point-clouds) | Demonstrates Point clouds |\n| [Anchors](#anchors) | Demonstrates Anchors |\n| [Meshing](#meshing) | Scenes that demonstrate Meshing |\n| [Environment Probes](#environment-probes) | Demonstrates Environment Probes |\n| [Occlusion](#occlusion) | Scenes that demonstrate Occlusion |\n| [Check support](#check-support) | Demonstrates checking for AR support on device |\n| [Configuration Chooser](#configuration-chooser) | Demonstrates AR Foundation's Configuration Chooser |\n| [Debug Menu](#debug-menu) | Visualize trackables and configurations on device |\n| [ARKit](#arkit) | ARKit-specific sample scenes |\n| [ARCore session recording](#arcore-session-recording) | Demonstrates the session recording and playback functionality available in ARCore |\n\n## Simple AR\n\nThis is a good starting sample that enables point cloud visualization and plane detection. There are buttons on screen that let you pause, resume, reset, and reload the ARSession.\n\nWhen a plane is detected, you can tap on the detected plane to place a cube on it. This uses the `ARRaycastManager` to perform a raycast against the plane. If the plane is in `TrackingState.Limited`, it will highlight red. In the case of ARCore, this means that raycasting will not be available until the plane is in `TrackingState.Tracking` again.\n\n| Action | Meaning |\n| ------ | ------- |\n| Pause  | Pauses the ARSession, meaning device tracking and trackable detection (e.g., plane detection) is temporarily paused. While paused, the ARSession does not consume CPU resources. |\n| Resume | Resumes a paused ARSession. The device will attempt to relocalize and previously detected objects may shift around as tracking is reestablished. |\n| Reset | Clears all detected trackables and effectively begins a new ARSession. |\n| Reload | Completely destroys the ARSession GameObject and re-instantiates it. This simulates the behavior you might experience during scene switching. |\n\n## Camera\n\n### CPU Images\n\nThis samples shows how to acquire and manipulate textures obtained from AR Foundation on the CPU. Most textures in ARFoundation (e.g., the pass-through video supplied by the `ARCameraManager`, and the human depth and human stencil buffers provided by the `AROcclusionManager`) are GPU textures. Computer vision or other CPU-based applications often require the pixel buffers on the CPU, which would normally involve an expensive GPU readback. AR Foundation provides an API for obtaining these textures on the CPU for further processing, without incurring the costly GPU readback.\n\nThe relevant script is [`CpuImageSample.cs`](https://github.com/Unity-Technologies/arfoundation-samples/blob/master/Assets/Scripts/CpuImageSample.cs).\n\nThe resolution of the camera image is affected by the camera's configuration. The current configuration is indicated at the bottom left of the screen inside a dropdown box which lets you select one of the supported camera configurations. The [`CameraConfigController.cs`](https://github.com/Unity-Technologies/arfoundation-samples/blob/master/Assets/Scripts/CameraConfigController.cs) demonstrates enumerating and selecting a camera configuration. It is on the `CameraConfigs` GameObject.\n\nWhere available (currently iOS 13+ only), the human depth and human stencil textures are also available on the CPU. These appear inside two additional boxes underneath the camera's image.\n\n### Basic Light Estimation\n\nDemonstrates basic light estimation information from the camera frame. You should find values for \"Ambient Intensity\" and \"Ambient Color\" on screen. The relevant script is [`BasicLightEstimation.cs`](https://github.com/Unity-Technologies/arfoundation-samples/blob/master/Assets/Scripts/BasicLightEstimation.cs) script.\n\n### HDR Light Estimation\n\nThis sample attempts to read HDR lighting information. You should find values for \"Ambient Intensity\", \"Ambient Color\", \"Main Light Direction\", \"Main Light Intensity Lumens\", \"Main Light Color\", and \"Spherical Harmonics\". Most devices only support a subset of these 6, so some will be listed as \"Unavailable.\" The relevant script is [`HDRLightEstimation.cs`](https://github.com/Unity-Technologies/arfoundation-samples/blob/master/Assets/Scripts/HDRLightEstimation.cs) script.\n\nOn iOS, this is only available when face tracking is enabled and requires a device that supports face tracking (such as an iPhone X, XS or 11). When available, a virtual arrow appears in front of the camera which indicates the estimated main light direction. The virtual light direction is also updated, so that virtual content appears to be lit from the direction of the real light source.\n\nWhen using `HDRLightEstimation`, the sample will automatically pick the supported camera facing direction for you, for example `World` on Android and `User` on iOS, so it does not matter which facing direction you select in the `ARCameraManager` component.\n\n### Background Rendering Order\n\nProduces a visual example of how changing the background rendering between `BeforeOpaqueGeometry` and `AfterOpaqueGeometry` would effect a rudimentary AR application. Leverages Occlusion where available to display `AfterOpaqueGeometry` support for AR Occlusion.\n\n### Camera Grain (ARKit)\n\nThis sample demonstrates the camera grain effect. Once a plane is detected, you can place a cube on it with a material that simulates the camera grain noise in the camera feed. Refer to the `CameraGrain.cs` script. Also check  `CameraGrain.shader` which animates and applies the camera grain texture (through linear interpolation) in screenspace.\n\nThis sample requires a device running iOS 13 or later and Unity 2020.2 or later.\n\n### EXIF Data\n\nThis sample demonstrates how to access camera frame's EXIF metadata. You should find values for all the supported EXIF tags on screen. Refer to `ExifDataLogger.cs` for more details.\n\nThis sample requires iOS 16 or newer.\n\n### Image Stabilization (ARCore)\n\nThis sample shows how to toggle the Image Stabilization feature on and off, and requires an ARCore-supported device with _Google Play Services for AR_ version 1.37 or newer.\n\n## Plane Detection \n\n### Toggle Plane Detection\n\nThis sample shows how to toggle plane detection on and off. When off, it will also hide all previously detected planes by disabling their GameObjects. Refer to [`PlaneDetectionController.cs`](https://github.com/Unity-Technologies/arfoundation-samples/blob/master/Assets/Scripts/PlaneDetectionController.cs).\n\n### Plane Masking\n\nThis sample demonstrates basic plane detection, but uses an occlusion shader for the plane's material. This makes the plane appear invisible, but virtual objects behind the plane are culled. This provides an additional level of realism when, for example, placing objects on a table.\n\nMove the device around until a plane is detected (its edges are still drawn) and then tap on the plane to place/move content.\n\n### Plane Detection Mode\n\nThis sample shows how to change the plane detection mode flags. Each type of plane (`Horizontal`, `Vertical`, and `NotAxisAligned`) can be toggled on and off.\n\n## Image Tracking\n\nThere are two samples demonstrating image tracking. The image tracking samples are supported on ARCore and ARKit. To enable image tracking, you must first create an `XRReferenceImageLibrary`. This is the set of images to look for in the environment. [Click here](https://docs.unity3d.com/Packages/com.unity.xr.arfoundation@6.0/manual/features/image-tracking.html) for instructions on creating one.\n\nYou can also add images to the reference image library at runtime. This sample includes a button that adds the images `one.png` and `two.png` to the reference image library. Refer to the script `DynamicLibrary.cs` for example code.\n\nRun the sample on an ARCore or ARKit-capable device and point your device at one of the images in [`Assets/Scenes/ImageTracking/Images`](https://github.com/Unity-Technologies/arfoundation-samples/tree/master/Assets/Scenes/ImageTracking/Images). They can be displayed on a computer monitor; they do not need to be printed out.\n\n### Basic Image Tracking\n\nAt runtime, ARFoundation will generate an `ARTrackedImage` for each detected reference image. This sample uses the [`TrackedImageInfoManager.cs`](https://github.com/Unity-Technologies/arfoundation-samples/blob/master/Assets/Scenes/ImageTracking/BasicImageTracking/TrackedImageInfoManager.cs) script to overlay the original image on top of the detected image, along with some meta data.\n\n### Image Tracking With Multiple Prefabs\n\nWith [`PrefabImagePairManager.cs`](https://github.com/Unity-Technologies/arfoundation-samples/blob/master/Assets/Scenes/ImageTracking/ImageTrackingWithMultiplePrefabs/PrefabImagePairManager.cs) script, you can assign different prefabs for each image in the reference image library.\n\nYou can also change prefabs at runtime. This sample includes a button that switch between the original and alternative prefab for the first image in the reference image library. Refer to the script [`DynamicPrefab.cs`](https://github.com/Unity-Technologies/arfoundation-samples/blob/master/Assets/Scenes/ImageTracking/ImageTrackingWithMultiplePrefabs/DynamicPrefab.cs) for example code.\n\n## Object Tracking\n\nSimilar to the image tracking sample, this sample detects a 3D object from a set of reference objects in an `XRReferenceObjectLibrary`. [Click here](https://docs.unity3d.com/Packages/com.unity.xr.arfoundation@6.0/manual/features/object-tracking.html) for instructions on creating one.\n\nTo use this sample, you must have a physical object the device can recognize. The sample's reference object library is built using two reference objects. The sample includes [printable templates](https://github.com/Unity-Technologies/arfoundation-samples/tree/master/Assets/Scenes/Object%20Tracking/Printable%20Templates) which can be printed on 8.5x11 inch paper and folded into a cube and cylinder.\n\nAlternatively, you can [scan your own objects](https://developer.apple.com/documentation/arkit/scanning_and_detecting_3d_objects) and add them to the reference object library.\n\nThis sample requires iOS 12 or above.\n\n## Face Tracking\n\nThere are several samples showing different face tracking features. Some are ARCore specific and some are ARKit specific.\n\n### Face Pose\n\nThis is the simplest face tracking sample and simply draws an axis at the detected face's pose.\n\nThis sample uses the front-facing (i.e., selfie) camera.\n\n### Face Mesh\n\nThis sample instantiates and updates a mesh representing the detected face. Information about the device support (e.g., number of faces that can be simultaneously tracked) is displayed on the screen.\n\nThis sample uses the front-facing (i.e., selfie) camera.\n\n### Face Regions (ARCore)\n\n\"Face regions\" are an ARCore-specific feature which provides pose information for specific \"regions\" on the detected face, e.g., left eyebrow. In this example, axes are drawn at each face region. Refer to the [`ARCoreFaceRegionManager.cs`](https://github.com/Unity-Technologies/arfoundation-samples/blob/master/Assets/Scripts/ARCoreFaceRegionManager.cs).\n\nThis sample uses the front-facing (i.e., selfie) camera.\n\n### Blend Shapes (ARKit)\n\n\"Blend shapes\" are an ARKit-specific feature which provides information about various facial features on a scale of 0..1. For instance, \"wink\" and \"frown\". In this sample, blend shapes are used to puppet a cartoon face which is displayed over the detected face. Refer to the [`ARKitBlendShapeVisualizer.cs`](https://github.com/Unity-Technologies/arfoundation-samples/blob/master/Assets/Scripts/ARKitBlendShapeVisualizer.cs).\n\nThis sample uses the front-facing (i.e., selfie) camera.\n\n### Eye Lasers, Eye Poses, and Fixation Point (ARKit)\n\nThese samples demonstrate eye and fixation point tracking. Eye tracking produces a pose (position and rotation) for each eye in the detected face, and the \"fixation point\" is the point the face is looking at (i.e., fixated upon). `EyeLasers` uses the eye pose to draw laser beams emitted from the detected face.\n\nThis sample uses the front-facing (i.e., selfie) camera and requires an iOS device with a TrueDepth camera.\n\n### Rear Camera (ARKit)\n\niOS 13 adds support for face tracking while the world-facing (i.e., rear) camera is active. This means the user-facing (i.e., front) camera is used for face tracking, but the pass through video uses the world-facing camera. To enable this mode in ARFoundation, you must enable an `ARFaceManager`, set the `ARSession` tracking mode to \"Position and Rotation\" or \"Don't Care\", and set the `ARCameraManager`'s facing direction to \"World\". Tap the screen to toggle between the user-facing and world-facing cameras.\n\nThe sample code in `DisplayFaceInfo.OnEnable` shows how to detect support for these face tracking features.\n\nWhen using the world-facing camera, a cube is displayed in front of the camera whose orientation is driven by the face in front of the user-facing camera.\n\nThis feature requires a device with a TrueDepth camera and an A12 bionic chip running iOS 13.\n\n## Body Tracking\n\n### Body Tracking 2D\n\nThis sample demonstrates 2D screen space body tracking. A 2D skeleton is generated when a person is detected. Refer to the [`ScreenSpaceJointVisualizer.cs`](https://github.com/Unity-Technologies/arfoundation-samples/blob/master/Assets/Scripts/ScreenSpaceJointVisualizer.cs) script.\n\nThis sample requires a device with an A12 bionic chip running iOS 13 or above.\n\n### Body Tracking 3D\n\nThis sample demonstrates 3D world space body tracking. A 3D skeleton is generated when a person is detected. Refer to the [`HumanBodyTracker.cs`](https://github.com/Unity-Technologies/arfoundation-samples/blob/master/Assets/Scripts/HumanBodyTracker.cs) script.\n\nThis sample requires a device with an A12 bionic chip running iOS 13 or above.\n\n## Point Clouds\n\nThis sample shows all feature points over time, not just the current frame's feature points as the \"AR Default Point Cloud\" prefab does. It does this by using a slightly modified version of the `ARPointCloudParticleVisualizer` component that stores all the feature points in a Dictionary. Since each feature point has a unique identifier, it can look up the stored point and update its position in the dictionary if it already exists. This can be a useful starting point for custom solutions that require the entire map of point cloud points, e.g., for custom mesh reconstruction techniques.\n\nThis sample has two UI components:\n* A button in the lower left which allows you to switch between visualizing \"All\" the points and just those in the \"Current Frame\".\n* Text in the upper right which displays the number of points in each point cloud (ARCore & ARKit will only ever have one).\n\n## Anchors\n\nThis sample shows how to create anchors as the result of a raycast hit. The \"Clear Anchors\" button removes all created anchors. Refer to the [`AnchorCreator.cs`](https://github.com/Unity-Technologies/arfoundation-samples/blob/master/Assets/Scripts/AnchorCreator.cs) script.\n\nThis script can create two kinds of anchors:\n1. If a feature point is hit, it creates a normal anchor at the hit pose using the `GameObject.AddComponent<ARAnchor>()` method.\n1. If a plane is hit, it creates an anchor \"attached\" to the plane using the [AttachAnchor](https://docs.unity3d.com/Packages/com.unity.xr.arfoundation@6.0/api/UnityEngine.XR.ARFoundation.ARAnchorManager.html#UnityEngine_XR_ARFoundation_ARAnchorManager_AttachAnchor_UnityEngine_XR_ARFoundation_ARPlane_Pose_) method.\n\n## Meshing\n\nThese meshing scenes use features of some devices to construct meshes from scanned data of real world surfaces. These meshing scenes will not work on all devices.\n\nFor ARKit, this functionality requires at least iPadOS 13.4 running on a device with a LiDAR scanner.\n\n### Classification Meshes\n\nThis scene demonstrates mesh classification functionality. With mesh classification enabled, each triangle in the mesh surface is identified as one of several surface types. This sample scene creates submeshes for each classification type and renders each mesh type with a different color.\n\nThis scene only works on ARKit.\n\n### Normal Meshes\n\nThis scene renders an overlay on top of the real world scanned geometry illustrating the normal of the surface.\n\n### Occlusion Meshes\n\nAt first, this scene may appear to be doing nothing. However, it is rendering a depth texture on top of the scene based on the real world geometry. This allows for the real world to occlude virtual content. The scene has a script on it that fires a red ball into the scene when you tap. To see occlusion working, fire the red balls into a space and move the iPad camera behind a real world object. You will see that the virtual red balls are occluded by the real world object.\n\n## Environment Probes\n\nThis sample demonstrates environment probes, a feature which attempts to generate a 3D texture from the real environment and applies it to reflection probes in the scene. The scene includes several spheres which start out completely black, but will change to shiny spheres which reflect the real environment when possible.\n\n## Occlusion\n\n### SimpleOcclusion\n\nThis sample demonstrates occlusion of virtual content by real world content through the use of environment depth images on supported Android and iOS devices.\n\n### Depth Images\n\nThis sample demonstrates raw texture depth images from different methods.\n* Environment depth (certain Android devices and Apple devices with the LiDAR sensor)\n* Human stencil (Apple devices with an A12 bionic chip (or later) running iOS 13 or later)\n* Human depth (Apple devices with an A12 bionic chip (or later) running iOS 13 or later)\n\n## Check Support\n\nDemonstrates checking for AR support and logs the results to the screen. The relevant script is [`SupportChecker.cs`](https://github.com/Unity-Technologies/arfoundation-samples/blob/master/Assets/Scripts/SupportChecker.cs).\n\n## Configuration Chooser\n\nDemonstrates how to use the AR Foundation session's ConfigurationChooser to swap between rear and front-facing camera configurations.\n\n## Debug Menu\n\nThe AR Foundation Debug Menu allows you to visualize trackables and configurations on device.\n\n## ARKit\n\nThese samples are only available on iOS devices.\n\n### Coaching Overlay\n\nThe coaching overlay is an ARKit-specific feature which will overlay a helpful UI guiding the user to perform certain actions to achieve some \"goal\", such as finding a horizontal plane.\n\nThe coaching overlay can be activated automatically or manually, and you can set its goal. In this sample, we've set the goal to be \"Any plane\", and for it to activate automatically. This will display a special UI on the screen until a plane is found. There is also a button to activate it manually.\n\nThe sample includes a MonoBehavior to define the settings of the coaching overlay. Refer to [`ARKitCoachingOverlay.cs`](https://github.com/Unity-Technologies/arfoundation-samples/blob/master/Assets/Scenes/ARKit/ARKitCoachingOverlay/ARKitCoachingOverlay.cs).\n\nThis sample also shows how to subscribe to ARKit session callbacks. Refer to [CustomSessionDelegate](https://github.com/Unity-Technologies/arfoundation-samples/blob/master/Assets/Scenes/ARKit/ARKitCoachingOverlay/CustomSessionDelegate.cs).\n\nThis sample requires iOS 13 or above.\n\n### Thermal State\n\nThis sample contains the code required to query for an iOS device's thermal state so that the thermal state may be used with C# game code. This sample illustrates how the thermal state may be used to disable AR Foundation features to reduce the thermal state of the device.\n\n### AR World Map\n\nAn `ARWorldMap` is an ARKit-specific feature which lets you save a scanned area. ARKit can optionally relocalize to a saved world map at a later time. This can be used to synchronize multiple devices to a common space, or for curated experiences specific to a location, such as a museum exhibition or other special installation. Read more about world maps [here](https://developer.apple.com/documentation/arkit/arworldmap). A world map will store most types of trackables, such as reference points and planes.\n\nThe [`ARWorldMapController.cs`](https://github.com/Unity-Technologies/arfoundation-samples/blob/master/Assets/Scripts/ARWorldMapController.cs) performs most of the logic in this sample.\n\nThis sample requires iOS 12 or above.\n\n### Geo Anchors\n\n[ARKit's ARGeoAnchors](https://developer.apple.com/documentation/arkit/argeoanchor?language=objc) are not yet supported by ARFoundation, but you can still access this feature with a bit of Objective-C. This sample uses a custom [ConfigurationChooser](https://docs.unity3d.com/Packages/com.unity.xr.arfoundation@6.0/api/UnityEngine.XR.ARSubsystems.ConfigurationChooser.html) to instruct the Apple ARKit XR Plug-in to use an [ARGeoTrackingConfiguration](https://developer.apple.com/documentation/arkit/argeotrackingconfiguration?language=objc).\n\nThis sample also shows how to interpret the [nativePtr](https://docs.unity3d.com/Packages/com.unity.xr.arfoundation@6.0/api/UnityEngine.XR.ARSubsystems.XRSessionSubsystem.html#UnityEngine_XR_ARSubsystems_XRSessionSubsystem_nativePtr) provided by the [XRSessionSubsystem](https://docs.unity3d.com/Packages/com.unity.xr.arfoundation@6.0/api/UnityEngine.XR.ARSubsystems.XRSessionSubsystem.html) as an ARKit [ARSession](https://developer.apple.com/documentation/arkit/arsession?language=objc) pointer.\n\nThis sample requires an iOS device running iOS 14.0 or later, an A12 chip or later, location services enabled, and cellular capability.\n\n### AR Collaboration Data\n\nSimilar to an `ARWorldMap`, a \"collaborative session\" is an ARKit-specific feature which allows multiple devices to share session information in real time. Each device will periodically produce `ARCollaborationData` which should be sent to all other devices in the collaborative session. ARKit will share each participant's pose and all reference points. Other types of trackables, such as detected planes, are not shared.\n\nRefer to [`CollaborativeSession.cs`](https://github.com/Unity-Technologies/arfoundation-samples/blob/master/Assets/Scenes/ARKit/ARCollaborationData/CollaborativeSession.cs). Note there are two types of collaboration data: \"Critical\" and \"Optional\". \"Critical\" data is available periodically and should be sent to all other devices reliably. \"Optional\" data is available nearly every frame and may be sent unreliably. Data marked as \"optional\" includes data about the device's location, which is why it is produced very frequently (i.e., every frame).\n\nNote that ARKit's support for collaborative sessions does not include any networking; it is up to the developer to manage the connection and send data to other participants in the collaborative session. For this sample, we used Apple's [MultipeerConnectivity Framework](https://developer.apple.com/documentation/multipeerconnectivity). Our implementation can be found [here](https://github.com/Unity-Technologies/arfoundation-samples/tree/master/Assets/Scripts/Multipeer).\n\nYou can create reference points by tapping on the screen. Reference points are created when the tap results in a raycast which hits a point in the point cloud.\n\nThis sample requires iOS 13 or above.\n\n### High Resolution CPU Image\n\nThis sample demonstrates high resolution CPU image capture on iOS 16 and newer. Check the [High Resolution CPU Image](https://docs.unity3d.com/Packages/com.unity.xr.arkit@6.0/manual/arkit-camera.html#high-resolution-cpu-image) package documentation to learn more about this feature.\n\n### Camera Exposure\n\nThis sample shows how to lock the device camera and set the camera exposure mode, duration, and ISO. Refer to [CameraExposureController.cs](https://github.com/Unity-Technologies/arfoundation-samples/blob/main/Assets/Scenes/ARKit/CameraExposure/CameraExposureController.cs) for example code.\n\nThis sample requires iOS 16 or newer and a device with an ultra-wide camera.\n\n### Camera White Balance\n\nThis sample shows how to lock the device camera and set the camera white balance mode and gains. Refer to [CameraWhiteBalanceController.cs](https://github.com/Unity-Technologies/arfoundation-samples/blob/main/Assets/Scenes/ARKit/CameraWhiteBalance/CameraWhiteBalanceController.cs) for example code.\n\nThis sample requires iOS 16 or newer and a device with an ultra-wide camera.\n\n### Camera Focus\n\nThis sample shows how to lock the device camera and set the camera focus mode and lens position. Refer to [CameraFocusController.cs](https://github.com/Unity-Technologies/arfoundation-samples/blob/main/Assets/Scenes/ARKit/CameraFocus/CameraFocusController.cs) for example code.\n\nThis sample requires iOS 16 or newer and a device with an ultra-wide camera.\n\n## ARCore Session Recording\n\nThis sample demonstrates the session recording and playback functionality available in ARCore. This feature allows you to record the sensor and camera telemetry during a live session, and then reply it at later time. When replayed, ARCore runs on the target device using the recorded telemetry rather than live data. Refer to [ARCoreSessionRecorder.cs](https://github.com/Unity-Technologies/arfoundation-samples/blob/main/Assets/Scenes/ARCore/ARCoreSessionRecorder.cs) for example code.\n\n## Additional demos\n\nWhile no longer actively maintained, Unity has a separate [AR Foundation Demos](https://github.com/Unity-Technologies/arfoundation-demos) repository that contains some larger samples including localization, mesh placement, shadows, and user onboarding UX.\n\n# Community and feedback\n\nRefer to sections below to understand how to provide different kinds of feedback to Unity.\n\n## AR Foundation bug reports\n\nTo report a bug in AR Foundation, please [file a bug](https://unity3d.com/unity/qa/bug-reporting). You may also submit a GitHub issue, but we will close your GitHub issue if it does not contain an official bug ID number. The best way to ensure that your issue is addressed is to file a bug using Unity's official bug reporting process.\n\n## AR Foundation feature requests\n\nTo request a new feature in AR Foundation or related packages, use Unity's [XR Roadmap](https://unity.com/roadmap/unity-platform/xr). Click on the **AR Foundation** tab, then scroll down to **Submit a New Idea**.\n\n## Contributions to this repository\n\nWe are not accepting pull requests at this time. If you find an issue with the samples or would like to request a new sample, please submit a [GitHub issue](https://github.com/Unity-Technologies/arfoundation-samples/issues).\n"
        }
      ]
    }
  ]
}