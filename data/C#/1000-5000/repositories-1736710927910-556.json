{
  "metadata": {
    "timestamp": 1736710927910,
    "page": 556,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "UnityTech/UIWidgets",
      "stars": 1971,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 2.14453125,
          "content": "##########################################\n####                                  ####\n#### EditorConfig for JetBrains Rider ####\n####                                  ####\n####              by Project UIWidget ####\n####                                  ####\n##########################################\n\n################# How to #################\n# \n# (1) Code Cleanup\n#\n# Prepare: Preferences -> Manage Layers ->\n# add a layer from UIWidgetCleanupPlugin.\n# DotSettings to your personal layer\n#\n# Whenever want to clean-up, use \n# Menu -> Code -> Code Cleanup -> UIWidget\n# -> OK\n#\n#\n# (2) Code Inspect\n# Preferences -> Editor -> Inspection\n# Settings -> select \"Read settings from \n# editorconfig...\"\n#\n############################################\n\n\n#### !!!! EditorConfig Starts Here !!!! #####\nroot = true\n\n# For CSharp Only\n[*.cs]\n\n################\n# Code Cleanup #\n################\n\n# indents (4 spaces)\nindent_style=space\nindent_size=4\n\n\n# no requirement for converting type declaration to var\ncsharp_for_built_in_types=can_use_either\ncsharp_for_other_types=can_use_either\ncsharp_for_simple_types=can_use_either\n\n\n# use this.{} for all instance members\ncsharp_instance_members_qualify_members=all\n\n\n# all braces start at the end of a line\ncsharp_brace_style=end_of_line\n\n\n# don't use 'private' whenever possible\ncsharp_default_private_modifier=implicit\ncsharp_default_internal_modifier=implicit\n\n\n# not requirement for converting named arguments into positioned arguments whenever possible\ncsharp_arguments_named=named\n\n# add braces whenever necessary\ncsharp_braces_for_ifelse=required\ncsharp_braces_for_for=required\ncsharp_braces_for_foreach=required\ncsharp_braces_for_while=required\ncsharp_braces_for_dowhile=required\ncsharp_braces_for_using=required\ncsharp_braces_for_fixed=required\ncsharp_braces_redundant=true\n\n\n# prefer block_body to expression_body\ncsharp_method_or_operator_body=block_body\ncsharp_local_function_body=block_body\ncsharp_constructor_or_destructor_body=block_body\ncsharp_accessor_owner_body=accessors_with_block_body\n\n\n\n###################\n# CODE INSPECTION #\n###################\n\n# use this.{} for all instance members\nresharper_arrange_this_qualifier_highlighting=error"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.619140625,
          "content": "[Ll]ibrary/\n[Tt]emp/\n[Oo]bj/\n[Bb]uild/\n[Bb]uilds/\nAssets/AssetStoreTools*\n\n# Visual Studio cache directory\n.vs/\n\n# Autogenerated VS/MD/Consulo solution and project files\nExportedObj/\n.consulo/\n*.csproj\n*.unityproj\n*.sln\n*.suo\n*.tmp\n*.user\n*.userprefs\n*.pidb\n*.booproj\n*.svd\n*.pdb\n*.opendb\n\n# Unity3D generated meta files\n*.pidb.meta\n*.pdb.meta\n\n# Unity3D Generated File On Crash Reports\nsysinfo.txt\n\n# Builds\n*.apk\n*.unitypackage\n\n# node.js\n#\nnode_modules/\nnpm-debug.log\nyarn-error.log\n\nartifacts/**\nbuild/**\n.build_script/**\nnode_modules/**\n.DS_Store\n.npmrc\n!Documentation~\n!.Documentation\nnpm-debug.log\nbuild.sh.meta\nbuild.bat.meta\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.3359375,
          "content": "artifacts/**\nbuild/**\n.build_script/**\nnode_modules/**\nDocumentation/ApiDocs/**\nDocumentation~/ApiDocs/**\n.DS_Store\n.npmrc\n.npmignore\n.gitignore\nCONTRIBUTING.md\nCONTRIBUTING.md.meta\nQAReport.md\nQAReport.md.meta\n.gitlab-ci.yml\nbuild.sh\nbuild.sh.meta\nbuild.bat\nbuild.bat.meta\n\nautomation/**\nutr_output/**\n.Editor/**\n.yamato/**\n*.zip*\nscripts~/**\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.3642578125,
          "content": "# Changelog\nAll notable changes to this package will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\nand this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).\n\n## [1.0.0-preview] - 2019-03-01\n\n### This is the first release of *Unity Package UIWidgets*.\n\n*just the first release*\n\n\n## [1.5.4-release] - 2019-08-30\n\n#### In this release we mainly focus on the optimization and stabilization of the framework. \n#### We also upgrade UIWidgets to version 1.5.4, mainly derived from flutter 1.5.4.\n\n### New Features\n- Optimize the GC performance of the rendering system [\\#247](https://github.com/UnityTech/UIWidgets/pull/247)\n- Optimize the rendering performance of shadows [\\#257](https://github.com/UnityTech/UIWidgets/pull/257)\n- Leverage Compute Buffer to optimize GPU-CPU communication [\\#272](https://github.com/UnityTech/UIWidgets/pull/272)\n- Cupertino Theme Supported [\\#287](https://github.com/UnityTech/UIWidgets/pull/287)\n- Support Unity Editor Drag&Drop mouse event [\\#253](https://github.com/UnityTech/UIWidgets/pull/253)\n- Implement geometric shapes anti-alias draw [\\#262](https://github.com/UnityTech/UIWidgets/pull/262)\n- Optimize paragraph layout [\\#254](https://github.com/UnityTech/UIWidgets/pull/254)\n- Support emoji display and edit [\\#231](https://github.com/UnityTech/UIWidgets/pull/231)\n\n"
        },
        {
          "name": "CHANGELOG.md.meta",
          "type": "blob",
          "size": 0.154296875,
          "content": "fileFormatVersion: 2\nguid: 522d519f4b74c4c28a5079ec64c78e4d\nTextScriptImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.5966796875,
          "content": "# Contributing\n\n## If you are interested in contributing, here are some ground rules:\n\n### Code Style (using JetBrains Rider)\n1. **Import the Customized Code Cleanup Settings**: Open Preferences -> Manage Layers, \nChoose 'Solution \"\\<YourProjectName\\>\" personal' and Click \"Add Layer\" (\"+\") -> \"Open Settings File...\".\nand Open the file \"UIWidgetCleanupPlugin.DotSettings\" under \\<YourProjectPath\\>/Packages/com.unity.uiwidgets/\"\n\n2. **Cleanup Code style using the Customized Code Cleanup Settings**: Open Code -> Code Cleanup,\nPick a Cleanup scope as you want and Choose \"UIWidgets\" as the \"Code cleanup profile\", then click \"OK\"\n\n3. **Refine Code Style Rules**: Edit the \".editorconfig\" file under \\<YourProjectPath\\>/Packages/com.unity.uiwidgets/\". Visit\n https://www.jetbrains.com/help/rider/EditorConfig_Index.html for the detailed.\n\n### Generate Code.\n\nCode files ending with \".gen.cs\" are auto generated. Follow these steps to generate them:\n\n1. **Go to scripts Folder and Run npm install**:\n```\ncd <YourProjectPath>/Packages/com.unity.uiwidgets/scripts~\nnpm install\n```\n\n2. **Run the codegen Command**:\n```\nnode uiwidgets-cli.js codegen . generate mixin code\n```\n\n\n## All contributions are subject to the [Unity Contribution Agreement(UCA)](https://unity3d.com/legal/licenses/Unity_Contribution_Agreement)\nBy making a pull request, you are confirming agreement to the terms and conditions of the UCA, including that your Contributions are your original creation and that you have complete right and authority to make your Contributions.\n\n## Once you have a change ready following these ground rules. Simply make a pull request\n"
        },
        {
          "name": "CONTRIBUTING.md.meta",
          "type": "blob",
          "size": 0.154296875,
          "content": "fileFormatVersion: 2\nguid: d5079cbdd40a34d6e966a9cb9e355f76\nTextScriptImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "Documentation~",
          "type": "tree",
          "content": null
        },
        {
          "name": "Editor.meta",
          "type": "blob",
          "size": 0.16796875,
          "content": "fileFormatVersion: 2\nguid: 8c3d3cc93dd04445ea15339f8ad7482e\nfolderAsset: yes\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "Editor",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 0.458984375,
          "content": "UIWidgets copyright © 2019 Unity Technologies ApS\n\nLicensed under the Unity Companion License for Unity-dependent projects--see [Unity Companion License](http://www.unity3d.com/legal/licenses/Unity_Companion_License). \n\nUnless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions.\n"
        },
        {
          "name": "LICENSE.md.meta",
          "type": "blob",
          "size": 0.154296875,
          "content": "fileFormatVersion: 2\nguid: f77549dfdff0141cf93f22327b7d1feb\nTextScriptImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "QAReport.md",
          "type": "blob",
          "size": 0.662109375,
          "content": "# Quality Report\n\n## Version tested: [1.0.3-preview]\n\n## QA Owner: Jason Fu\n## UX Owner: Yuncong Zhang\n\n## Test strategy\n* Results from the package's editor and runtime test suite.\n```\nOverall result: PASS\nTotal Tests run: 4, Passed: 4, Failures: 0, Errors: 0, Inconclusives: 0\nTotal not run : 0, Invalid: 0, Ignored: 0, Skipped: 0\n```\n* Test Rail Scenarios:https://qatestrail.hq.unity3d.com/index.php?/suites/view/67&group_by=cases:section_id&group_order=asc&group_id=76244\n* Editor/Runtime Test Suite:\n* Manual test Results: https://qatestrail.hq.unity3d.com/index.php?/runs/view/13298&group_by=cases:section_id&group_order=asc\n\n## Package Status\n* package stability\n\t* Stable"
        },
        {
          "name": "QAReport.md.meta",
          "type": "blob",
          "size": 0.154296875,
          "content": "fileFormatVersion: 2\nguid: f19a98a9c074242b6908ab1bddaa66ca\nTextScriptImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "README-ZH.md",
          "type": "blob",
          "size": 16.3642578125,
          "content": "⚠️ 本项目的开发与维护目前已转移至https://github.com/Unity-Technologies/com.unity.uiwidgets. 如果您遇到Issue或者对UIWidgets有任何意见和建议，请移步我们的新仓库。谢谢您的关注！\n\n# UIWidgets\n\n\n## 介绍\n\nUIWidgets是Unity编辑器的一个插件包，可帮助开发人员通过Unity引擎来创建、调试和部署高效的跨平台应用。\n\nUIWidgets主要来自[Flutter](https://github.com/flutter/flutter)。但UIWidgets通过使用强大的Unity引擎为开发人员提供了许多新功能，显著地改进他们开发的应用性能和工作流程。\n\n#### 效率\n通过使用最新的Unity渲染SDK，UIWidgets应用可以非常快速地运行并且大多数时间保持大于60fps的速度。\n\n#### 跨平台\n与任何其他Unity项目一样，UIWidgets应用可以直接部署在各种平台上，包括PC，移动设备和网页等。\n\n#### 多媒体支持\n除了基本的2D UI之外，开发人员还能够将3D模型，音频，粒子系统添加到UIWidgets应用中。\n\n#### 开发者友好\n开发者可以使用许多高级工具，如CPU/GPU Profiling和FPS Profiling，直接在Unity Editor中调试UIWidgets应用。\n\n## 示例\n\n<div style=\"text-align: center\"><table><tr>\n<td style=\"text-align: center\">\n  <img src=\"https://connect-prd-cdn.unity.com/20190323/p/images/2a27606f-a2cc-4c9f-9e34-bb39ae64d06c_uiwidgets1.gif\" width=\"200\"/>\n</td>\n<td style=\"text-align: center\">\n  <img src=\"https://connect-prd-cdn.unity.com/20190323/p/images/097a7c53-19b3-4e0a-ad27-8ec02506905d_uiwidgets2.gif\" width=\"200\" />\n</td>\n<td style=\"text-align: center\">\n  <img src=\"https://connect-prd-cdn.unity.com/20190323/p/images/1f03c1d0-758c-4dde-b3a9-2f5f7216b7d9_uiwidgets3.gif\" width=\"200\"/>\n</td>\n<td style=\"text-align: center\">\n  <img src=\"https://connect-prd-cdn.unity.com/20190323/p/images/a8884fbd-9e7c-4bd7-af46-0947e01d01fd_uiwidgets4.gif\" width=\"200\"/>\n</td>\n</tr></table></div>\n\n### 基于UIWidgets的项目\n\n#### Unity Connect App\nUnity Connect App是使用UIWidgets开发的一个移动App产品，您随时可以在Android (https://connect.unity.com/connectApp/download)\n以及iOS (Searching for \"Unity Connect\" in App Store)端下载到它最新的版本. 本项目的所有代码均开源@https://github.com/UnityTech/ConnectAppCN.\n\n#### Unity中文官方文档\nUnity的线上中文官方文档由UIWidgets开发，您可以点击以下网址 https://connect.unity.com/doc 来访问它的全部内容。该项目目前已开源，所有代码可以在\nhttps://github.com/UnityTech/DocCN 查看。\n\n## 使用要求\n\n#### Unity\n\n安装 **Unity 2018.4.10f1(LTS)** 或 **Unity 2019.1.14f1** 及其更高版本。 你可以从[https://unity3d.com/get-unity/download](https://unity3d.com/get-unity/download)下载最新的Unity。\n\n#### UIWidgets包\n\n访问我们的Github存储库 [https://github.com/UnityTech/UIWidgets](https://github.com/UnityTech/UIWidgets)下载最新的UIWidgets包。\n\n将下载的包文件夹移动到Unity项目的Package文件夹中。\n\n通常，你可以在控制台（或终端）应用程序中输入下面的代码来完成这个操作：\n\n   ```none\n    cd <YourProjectPath>/Packages\n    git clone https://github.com/UnityTech/UIWidgets.git com.unity.uiwidgets\n   ```\n\n## 入门指南\n\n#### 一、 概观\n在本教程中，我们将创建一个非常简单的UIWidgets应用。 该应用只包含文本标签和按钮。 文本标签将计算按钮上的点击次数。\n\n首先，请打开或创建Unity项目并使用Unity编辑器打开它。\n\n然后打开Project Settings，转到Player部分并**将“UIWidgets_DEBUG”添加到Scripting Define Symbols字段中。**\n\n这样就启动了UIWidgets的调试模式。 在之后发布版本的时候清空这个字段。\n\n#### 二、 场景构建\n\nUIWidgets应用通常构建在Unity UI Canvas上。 请按照以下步骤在Unity中创建一个\nUI Canvas。\n1. 选择 File > New Scene来创建一个新场景。\n2. 选择 GameObject > UI > Canvas 在场景中创建UI Canvas。\n3. 右键单击Canvas并选择UI > Panel，将面板（即面板1）添加到UI Canvas中。 然后删除面板中的 **Image** 组件。\n\n#### 三、创建小部件\n\nUIWidgets应用是用**C＃脚本**来编写的。 请按照以下步骤创建应用程序并在Unity编辑器中播放。\n1. 创建一个新C＃脚本，命名为“UIWidgetsExample.cs”，并将以下代码粘贴到其中。\n\n```csharp\n    using System.Collections.Generic;\n    using Unity.UIWidgets.animation;\n    using Unity.UIWidgets.engine;\n    using Unity.UIWidgets.foundation;\n    using Unity.UIWidgets.material;\n    using Unity.UIWidgets.painting;\n    using Unity.UIWidgets.ui;\n    using Unity.UIWidgets.widgets;\n    using UnityEngine;\n    using FontStyle = Unity.UIWidgets.ui.FontStyle;\n\n    namespace UIWidgetsSample {\n        public class UIWidgetsExample : UIWidgetsPanel {\n            protected override void OnEnable() {\n                // if you want to use your own font or font icons.\n                // FontManager.instance.addFont(Resources.Load<Font>(path: \"path to your font\"), \"font family name\");\n\n                // load custom font with weight & style. The font weight & style corresponds to fontWeight, fontStyle of\n                // a TextStyle object\n                // FontManager.instance.addFont(Resources.Load<Font>(path: \"path to your font\"), \"Roboto\", FontWeight.w500,\n                //    FontStyle.italic);\n\n                // add material icons, familyName must be \"Material Icons\"\n                // FontManager.instance.addFont(Resources.Load<Font>(path: \"path to material icons\"), \"Material Icons\");\n\n                base.OnEnable();\n            }\n\n            protected override Widget createWidget() {\n                return new WidgetsApp(\n                    home: new ExampleApp(),\n                    pageRouteBuilder: (RouteSettings settings, WidgetBuilder builder) =>\n                        new PageRouteBuilder(\n                            settings: settings,\n                            pageBuilder: (BuildContext context, Animation<float> animation,\n                                Animation<float> secondaryAnimation) => builder(context)\n                        )\n                );\n            }\n\n            class ExampleApp : StatefulWidget {\n                public ExampleApp(Key key = null) : base(key) {\n                }\n\n                public override State createState() {\n                    return new ExampleState();\n                }\n            }\n\n            class ExampleState : State<ExampleApp> {\n                int counter = 0;\n\n                public override Widget build(BuildContext context) {\n                    return new Column(\n                        children: new List<Widget> {\n                            new Text(\"Counter: \" + this.counter),\n                            new GestureDetector(\n                                onTap: () => {\n                                    this.setState(() => {\n                                        this.counter++;\n                                    });\n                                },\n                                child: new Container(\n                                    padding: EdgeInsets.symmetric(20, 20),\n                                    color: Colors.blue,\n                                    child: new Text(\"Click Me\")\n                                )\n                            )\n                        }\n                    );\n                }\n            }\n        }\n    }\n```\n\n2. 保存此脚本，并将其附加到Panel 1中作为其组件。\n3. 在Unity编辑器中，点击Play按钮来启动应用。\n\n#### 四、构建应用程序\n\n最后，你可以按以下步骤将UIWidgets应用构建成适用于任何特定平台的应用程序包。\n1. 选择**File** > **Build Settings...**打开Build Settings面板。\n2. 选择目标平台，点击Build。 之后Unity编辑器将自动组装所有相关资源并生成最终的应用程序包。\n\n#### 五、如何加载图像？\n1. 将你的图像文件，如image1.png，放在Resources文件夹中。\n2. 你可以在同一文件夹中添加image1@2.png和image1@3.png以支持高清屏幕显示。\n3. 使用Image.asset（“image1”）加载图像。 注意：因为是在Unity中，所以不需要添加.png后缀。\n\n\nUIWidgets也支持Gif！\n1. 假设你有一个loading1.gif文件，将其重命名为loading1.gif.bytes并复制到Resources文件夹。\n2. 你可以在同一文件夹中添加loading1@2.gif.bytes和loading1@3.gif.bytes以支持高清屏幕显示。\n3. 使用Image.asset（“loading1.gif”）加载gif图像。\n\n#### 六、在安卓上显示状态栏\n当一个Unity项目运行在Android设备上时，状态栏是默认隐藏且无法在编辑内进行调整的。\n如果您希望在您的UIWidgets App中显示状态栏，您可以使用这个[解决方案](https://github.com/Over17/UnityShowAndroidStatusBar)。我们将尽快推出我们自己的解决方案，并保证届时开发者可以进行无缝切换。\n\n此外，为了让上述插件在Android P及以上Android系统中正常工作，请勾选上\"Player Settings\"中的\"Render Outside Safe Area\"选项。\n\n#### 七、自动调节帧率\n如果要使得构建出的应用能够自动调节帧率，请打开Project Settings，将构建目标平台对应的Quality选项卡中的V Sync Count设置为Don't Sync。\n默认的逻辑是在界面静止时将帧率降低，在界面变动时再将帧率提高至60。\n如果您不想开启该功能，请将`Window.onFrameRateSpeedUp`和/或`Window.onFrameRateCoolDown`设置为空函数，()=> {}即可。\n\n在Unity 2019.3版本及以上，UIWidgets将使用OnDemandRenderAPI来实现帧率调节，它将在不影响UI响应速度的情况下大幅降低耗电和发热问题。\n\n#### 八、WebGL Canvas分辨率调整插件\n因为浏览器中Canvas的宽高和其在显示器上的像素数可能不一致，所以构建出的WebGL程序中画面可能会模糊。\n插件`Plugins/platform/webgl/UIWidgetsCanvasDevicePixelRatio_20xx.x.jslib`（目前有2018.3和2019.1）解决了这个问题。\n请根据您的项目的Unity版本选择对应的插件，并禁用此插件的其他版本。方法如下：在Project面板中选中该插件，在Inspector面板中的Select platforms for plugin中，去掉WebGL后面的对勾。\n如果您因为任何原因需要完全禁止此插件的功能，请按上述方法禁用此插件的所有版本。\n\n此插件覆盖了Unity WebGL构建模块中的如下参数：\n```none\nJS_SystemInfo_GetWidth\nJS_SystemInfo_GetHeight\nJS_SystemInfo_GetCurrentCanvasWidth\nJS_SystemInfo_GetCurrentCanvasHeight\n$Browser\n$JSEvents\n```\n如果您需要实现自己的WebGL插件，并且您的插件覆盖了这些参数中的至少一种，您需要采用上文中提到的方法禁用`UIWidgetsCanvasDevicePixelRatio`插件，以防止可能的冲突。\n如果您仍然需要此插件所提供的功能，您可以手动将此插件对Unity WebGL构建模块的修改应用到您的插件中。\n`UIWidgetsCanvasDevicePixelRatio`插件中所有的修改之处都以`////////// Modification Start ////////////`和`////////// Modification End ////////////`标识。\n在被标识的代码中，所有乘/除以`devicePixelRatio`都来自于我们的修改。\n若您需要详细了解此插件所修改的脚本，请参考您的Unity Editor安装目录下的`PlaybackEngines/WebGLSupport/BuildTools/lib`文件夹中的`SystemInfo.js`和`UnityNativeJS/UnityNative.js`。\n\n#### 九、图片导入设置\n默认情况下，Unity会将导入图片的宽和高放缩为最近的等于2的幂的整数。\n在UIWidgets中使用图片时，记得将这一特性关闭，以免图片被意外放缩，方法如下：在Project面板中选中图片，在\"Inspector\"面板中将\"Non Power of 2\"（在\"Advanced\"中）设置为\"None\"。\n\n#### 十、更新表情(Emoji)\nUIWidgets支持渲染文本中包含的表情。\n默认的表情资源为[iOS 13.2](https://emojipedia.org/apple/ios-13.2)。\n我们也准备了[Google Emoji](https://emojipedia.org/google)的表情资源。\n如果您希望切换到Google版本的表情，请按如下步骤操作：\n\n1. 拷贝`Runtime/Resources/backup~/EmojiGoogle.png`到`Runtime/Resources/images`目录。\n2. 在**Project**面板中，找到`EmojiGoogle`资源，在**Inspector**面板中，将**Max Size**更改为4096，取消选中**Generate Mipmaps**，并选中**Alpha Is Transparency**。\n3. 在您的代码中继承`UIWidgetsPanel`的类的`OnEnable()`函数中，添加如下代码\n\n```csharp\nEmojiUtils.configuration = EmojiUtils.googleEmojiConfiguration;\n```\n\n如果您希望使用自己的表情图片，请按如下步骤操作：\n\n1. 参照`EmojiGoogle.png`，创建您自己的Emoji表单，并放到工程目录下的某个`Resources`目录中，例如`Resources/myImages/MyEmoji.png`）。\n2. 在`OnEnable()`函数中，添加如下代码（记得将示例的值改为真实的值）。注意Emoji的编码的顺序要和Emoji表单一致。\n\n```csharp\nEmojiUtils.configuration = new EmojiResourceConfiguration(\n  spriteSheetAssetName: \"myImage/MyEmoji\",\n  emojiCodes: new List<int> {\n    0x1f004, 0x1f0cf, 0x1f170, ...\n  },\n  spriteSheetNumberOfRows: 36,\n  spriteSheetNumberOfColumns: 37,\n);\n```\n\n#### 十一、与GameObject进行拖拽交互\n\n<p align=\"center\">\n  <img src=\"https://connect-prd-cdn.unity.com/20190718/p/images/e3c9cf9b-c732-4eb2-9afd-fe7de894f342_Custom_Inspector_Showcase_320px.gif\" width=\"300\"/>\n</p>\n\n我们提供了一个包装好的`UnityObjectDetector`组件以及`onRelease`回调函数，借此您可以实现简单地将物体（例如Hierarchy内的场景物体、Project窗口下的文件等）拖拽至区域内，来获得`UnityEngine.Object[] `类型的引用并进行操作。\n\n\n## 调试UIWidgets应用程序\n\n#### 定义UIWidgets_DEBUG\n我们建议在Unity编辑器中定义 UIWidgets_DEBUG 脚本符号，这将打开UIWidgets中的调试断言（debug assertion），有助于更早发现潜在的Bug。\n因此选择 **Player Settings** > **Other Settings** > **Configuration** > **Scripting Define Symbols** ，并添加 UIWidgets_DEBUG。\n该符号仅供调试使用，请在发布版本中删除它。\n\n#### UIWidgets Inspector\n\nUIWidgets Inspector工具用于可视化和浏览窗口小部件树。 你可以在Unity编辑器的**Window** > **Analysis** > **UIWidget Inspector** 中的找到它。\n\n注意\n- 需要定义 UIWidgets_DEBUG 使inspector正常工作。\n- Inspector目前仅适用于编辑器的播放模式，目前不支持独立版本的应用程序。\n\n\n## 学习\n\n#### 教程\n\n包括开发组在内的广大开发者为UIWidgets提供了许多可供学习的样例和教程，你可以根据你的需求进行学习：\n- UIWidgets官方示例。目前所有官方使用的示例项目均维护在一个独立的Github仓库（ https://github.com/UIWidgets/UIWidgetsSamples ）中。你可以\n将它clone到你项目本地的Assets目录下使用。\n具体的，你可以在Sample项目的**Scene**子文件夹中浏览所有示例UI场景。\n此外，你还可以点击主菜单上的新增的UIWidgetsTests选项卡，并在下拉菜单中选择一个EditorWindow UI示例来运行。\n- UIWidgets凉鞋系列教程。你可以在凉鞋老师整理的Github仓库（ https://github.com/liangxiegame/awesome-uiwidgets ）中学习UIWidgets的基本用法\n以及许多有趣的小Demo。\n- ConnectApp开源项目。这是一个完整的线上、开源、完全基于UIWidgets的第一方App项目。其中包含了大量产品级的UIWidgets工程实践细节，\n如果你想深入了解UIWidgets并且使用它构建线上项目，请访问项目Github仓库了解更多（ https://github.com/UnityTech/ConnectAppCN ）。\n\n#### Wiki\n\n目前开发团队仍在改进UIWidgets Wiki。 由于UIWidgets主要来源于Flutter，你也可以参考Flutter Wiki中与UIWidgets API对应部分的详细描述。\n同时，你可以加入我们的讨论组( https://connect.unity.com/g/uiwidgets )。\n\n#### 常问问题解答\n\n| 问题     | 回答  |\n| :-----------------------------------------------| ---------------------: |\n| 我可以使用UIWidgets创建独立应用吗？     | 可以  |\n| 我可以使用UIWidgets构建游戏UI吗？   | 可以    |\n| 我可以使用UIWidgets开发Unity编辑器插件吗？ | 可以 |\n| UIWidgets是UGUI / NGUI的扩展吗？ | 不是 |\n| UIWidgets只是Flutter的副本吗？ | 不是 |\n| 我可以通过简单的拖放操作来创建带有UIWidgets的UI吗？ | 不可以 |\n| 我是否需要付费使用UIWidgets？ | 不需要 |\n| 有推荐的适用于UIWidgets的IDE吗？ | Rider, VSCode(Open .sln) |\n\n## 如何贡献\n请查看[CONTRIBUTING.md](CONTRIBUTING.md)\n"
        },
        {
          "name": "README-ZH.md.meta",
          "type": "blob",
          "size": 0.154296875,
          "content": "fileFormatVersion: 2\nguid: 10bb16e0fd5d84445aa576a308664220\nTextScriptImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.1904296875,
          "content": "⚠️ The main repository of UIWidgets has been moved to https://github.com/Unity-Technologies/com.unity.uiwidgets. Please visit the new site if you have an issue or want to contribute. Thanks!\n\n# UIWidgets\n[中文](README-ZH.md)\n\n\n## Introduction\n\nUIWidgets is a plugin package for Unity Editor which helps developers to create, debug and deploy efficient,\ncross-platform Apps using the Unity Engine.\n\nUIWidgets is mainly derived from [Flutter](https://github.com/flutter/flutter). However, taking advantage of\nthe powerful Unity Engine, it offers developers many new features to improve their Apps\nas well as the develop workflow significantly.\n\n#### Efficiency\nUsing the latest Unity rendering SDKs, a UIWidgets App can run very fast and keep >60fps in most times.\n\n\n#### Cross-Platform\nA UIWidgets App can be deployed on all kinds of platforms including PCs, mobile devices and web page directly, like\nany other Unity projects.\n\n#### Multimedia Support\nExcept for basic 2D UIs, developers are also able to include 3D Models, audios, particle-systems to their UIWidgets Apps.\n\n\n#### Developer-Friendly\nA UIWidgets App can be debug in the Unity Editor directly with many advanced tools like\nCPU/GPU Profiling, FPS Profiling.\n\n\n## Example\n\n<div style=\"text-align: center\"><table><tr>\n<td style=\"text-align: center\">\n  <img src=\"https://connect-prd-cdn.unity.com/20190323/p/images/2a27606f-a2cc-4c9f-9e34-bb39ae64d06c_uiwidgets1.gif\" width=\"200\"/>\n</td>\n<td style=\"text-align: center\">\n  <img src=\"https://connect-prd-cdn.unity.com/20190323/p/images/097a7c53-19b3-4e0a-ad27-8ec02506905d_uiwidgets2.gif\" width=\"200\" />\n</td>\n<td style=\"text-align: center\">\n  <img src=\"https://connect-prd-cdn.unity.com/20190323/p/images/1f03c1d0-758c-4dde-b3a9-2f5f7216b7d9_uiwidgets3.gif\" width=\"200\"/>\n</td>\n<td style=\"text-align: center\">\n  <img src=\"https://connect-prd-cdn.unity.com/20190323/p/images/a8884fbd-9e7c-4bd7-af46-0947e01d01fd_uiwidgets4.gif\" width=\"200\"/>\n</td>\n</tr></table></div>\n\n### Projects using UIWidgets\n\n#### Unity Connect App\nThe Unity Connect App is created using UIWidgets and available for both Android (https://connect.unity.com/connectApp/download)\nand iOS (Searching for \"Unity Connect\" in App Store). This project is open-sourced @https://github.com/UnityTech/ConnectAppCN.\n\n#### Unity Chinese Doc\nThe official website of Unity Chinese Documentation (https://connect.unity.com/doc) is powered by UIWidgets and\nopen-sourced @https://github.com/UnityTech/DocCN.\n\n## Requirements\n\n#### Unity\n\nInstall **Unity 2018.4.10f1 (LTS)** or **Unity 2019.1.14f1** and above. You can download the latest Unity on https://unity3d.com/get-unity/download.\n\n#### UIWidgets Package\nVisit our Github repository https://github.com/UnityTech/UIWidgets\n to download the latest UIWidgets package.\n\nMove the downloaded package folder into the **Package** folder of your Unity project.\n\nGenerally, you can make it using a console (or terminal) application by just a few commands as below:\n\n   ```none\n    cd <YourProjectPath>/Packages\n    git clone https://github.com/UnityTech/UIWidgets.git com.unity.uiwidgets\n   ```\n\n## Getting Start\n\n#### i. Overview\nIn this tutorial, we will create a very simple UIWidgets App as the kick-starter. The app contains\nonly a text label and a button. The text label will count the times of clicks upon the button.\n\nFirst of all, please open or create a Unity Project and open it with Unity Editor.\n\nAnd then open Project Settings, go to Player section and **add \"UIWidgets_DEBUG\" to the Scripting Define Symbols field.**\nThis enables the debug mode of UIWidgets for your development. Remove this for your release build afterwards.\n\n#### ii. Scene Build\nA UIWidgets App is usually built upon a Unity UI Canvas. Please follow the steps to create a\nUI Canvas in Unity.\n1. Create a new Scene by \"File -> New Scene\";\n1. Create a UI Canvas in the scene by \"GameObject -> UI -> Canvas\";\n1. Add a Panel (i.e., **Panel 1**) to the UI Canvas by right click on the Canvas and select \"UI -> Panel\". Then remove the\n**Image** Component from the Panel.\n\n#### iii. Create Widget\nA UIWidgets App is written in **C# Scripts**. Please follow the steps to create an App and play it\nin Unity Editor.\n\n1. Create a new C# Script named \"UIWidgetsExample.cs\" and paste the following codes into it.\n   ```csharp\n    using System.Collections.Generic;\n    using Unity.UIWidgets.animation;\n    using Unity.UIWidgets.engine;\n    using Unity.UIWidgets.foundation;\n    using Unity.UIWidgets.material;\n    using Unity.UIWidgets.painting;\n    using Unity.UIWidgets.ui;\n    using Unity.UIWidgets.widgets;\n    using UnityEngine;\n    using FontStyle = Unity.UIWidgets.ui.FontStyle;\n\n    namespace UIWidgetsSample {\n        public class UIWidgetsExample : UIWidgetsPanel {\n            protected override void OnEnable() {\n                // if you want to use your own font or font icons.\n                // FontManager.instance.addFont(Resources.Load<Font>(path: \"path to your font\"), \"font family name\");\n\n                // load custom font with weight & style. The font weight & style corresponds to fontWeight, fontStyle of\n                // a TextStyle object\n                // FontManager.instance.addFont(Resources.Load<Font>(path: \"path to your font\"), \"Roboto\", FontWeight.w500,\n                //    FontStyle.italic);\n\n                // add material icons, familyName must be \"Material Icons\"\n                // FontManager.instance.addFont(Resources.Load<Font>(path: \"path to material icons\"), \"Material Icons\");\n\n                base.OnEnable();\n            }\n\n            protected override Widget createWidget() {\n                return new WidgetsApp(\n                    home: new ExampleApp(),\n                    pageRouteBuilder: (RouteSettings settings, WidgetBuilder builder) =>\n                        new PageRouteBuilder(\n                            settings: settings,\n                            pageBuilder: (BuildContext context, Animation<float> animation,\n                                Animation<float> secondaryAnimation) => builder(context)\n                        )\n                );\n            }\n\n            class ExampleApp : StatefulWidget {\n                public ExampleApp(Key key = null) : base(key) {\n                }\n\n                public override State createState() {\n                    return new ExampleState();\n                }\n            }\n\n            class ExampleState : State<ExampleApp> {\n                int counter = 0;\n\n                public override Widget build(BuildContext context) {\n                    return new Column(\n                        children: new List<Widget> {\n                            new Text(\"Counter: \" + this.counter),\n                            new GestureDetector(\n                                onTap: () => {\n                                    this.setState(()\n                                        => {\n                                        this.counter++;\n                                    });\n                                },\n                                child: new Container(\n                                    padding: EdgeInsets.symmetric(20, 20),\n                                    color: Colors.blue,\n                                    child: new Text(\"Click Me\")\n                                )\n                            )\n                        }\n                    );\n                }\n            }\n        }\n    }\n   ```\n\n1. Save this script and attach it to **Panel 1** as its component.\n1. Press the \"Play\" Button to start the App in Unity Editor.\n\n#### iv. Build App\nFinally, the UIWidgets App can be built to packages for any specific platform by the following steps.\n1. Open the Build Settings Panel by \"File -> Build Settings...\"\n1. Choose a target platform and click \"Build\". Then the Unity Editor will automatically assemble\nall relevant resources and generate the final App package.\n\n#### How to load images?\n1. Put your images files in Resources folder. e.g. image1.png.\n2. You can add image1@2.png and image1@3.png in the same folder to support HD screens.\n3. Use Image.asset(\"image1\") to load the image. Note: as in Unity, \".png\" is not needed.\n\nUIWidgets supports Gif as well!\n1. Suppose you have loading1.gif. Rename it to loading1.gif.bytes and copy it to Resources folder.\n2. You can add loading1@2.gif.bytes and loading1@3.gif.bytes in the same folder to support HD screens.\n3. Use Image.asset(\"loading1.gif\") to load the gif images.\n\n#### Using Window Scope\nIf you see the error `AssertionError: Window.instance is null` or null pointer error of `Window.instance`,\nit means the code is not running in the window scope. In this case, you can enclose your code\nwith window scope as below:\n```csharp\nusing(WindowProvider.of(your gameObject with UIWidgetsPanel).getScope()) {\n    // code dealing with UIWidgets,\n    // e.g. setState(() => {....})\n}\n```\n\nThis is needed if the code is in methods\nnot invoked by UIWidgets. For example, if the code is in `completed` callback of `UnityWebRequest`,\nyou need to enclose them with window scope.\nPlease see [HttpRequestSample](./Samples/UIWidgetSample/HttpRequestSample.cs) for detail.\nFor callback/event handler methods from UIWidgets (e.g `Widget.build, State.initState...`), you don't need do\nit yourself, since the framework ensure it's in window scope.\n\n#### Show Status Bar on Android\nStatus bar is always hidden by default when an Unity project is running on an Android device. If you\n want to show the status bar in your App, this\n [solution](https://github.com/Over17/UnityShowAndroidStatusBar) seems to be\n compatible to UIWidgets, therefore can be used as a good option before we release our\n full support solution on this issue.\n\n Besides,\n please set \"Render Outside Safe Area\" to true in the \"Player Settings\" to make this plugin working properly on Android P or later.\n\n\n\n\n#### Automatically Adjust Frame Rate\n\nTo build an App that is able to adjust the frame rate automatically, please open Project Settings, and in the Quality tab, set the \"V Sync Count\" option of the target platform to \"Don't Sync\".\nThe default logic is to reduce the frame rate when the screen is static, and change it back to 60 whenever the screen changes.\nIf you would like to disable this behavior, please set `Window.onFrameRateSpeedUp` and `Window.onFrameRateCoolDown` to null function, i.e., () => {}.\n\nNote that in Unity 2019.3 and above, UIWidgets will use OnDemandRenderAPI to implement this feature, which will greatly save the battery.\n\n#### WebGL Canvas Device Pixel Ratio Plugin\nThe width and height of the Canvas in browser may differ from the number of pixels the Canvas occupies on the screen.\nTherefore, the image may blur in the builded WebGL program.\nThe Plugin `Plugins/platform/webgl/UIWidgetsCanvasDevicePixelRatio_20xx.x.jslib` (2018.3 and 2019.1 for now) solves this issue.\nPlease select the plugin of the Unity version corresponding to your project, and disable other versions of this plugin, as follows: select this plugin in the **Project** panel, and uncheck **WebGL** under **Select platforms for plugin** in the **Inspector** panel.\nIf you need to disable this plugin for any reason, please disable all the versions of this plugin as described above.\n\nThis plugin overrides the following parameters in the Unity WebGL building module:\n```none\nJS_SystemInfo_GetWidth\nJS_SystemInfo_GetHeight\nJS_SystemInfo_GetCurrentCanvasWidth\nJS_SystemInfo_GetCurrentCanvasHeight\n$Browser\n$JSEvents\n```\nIf you would like to implement your own WebGL plugin, and your plugin overrides at least one of the above parameters, you need to disable the `UIWidgetsCanvasDevicePixelRatio` plugin in the above mentioned way to avoid possible conflicts.\nIf you still need the function provided by this plugin, you can mannually apply the modification to Unity WebGL building module introduced in this plugin.\nAll the modifications introduced in `UIWidgetsCanvasDevicePixelRatio` are marked by `////////// Modifcation Start ////////////` and `////////// Modifcation End ////////////`.\nIn the marked codes, all the multiplications and divisions with `devicePixelRatio` are introduced by our modification.\nTo learn about the original script in detail, please refer to `SystemInfo.js` and `UnityNativeJS/UnityNative.js` in `PlaybackEngines/WebGLSupport/BuildTools/lib` in your Unity Editor installation.\n\n#### Image Import Setting\nUnity, by default, resizes the width and height of an imported image to the nearest integer that is a power of 2.\nIn UIWidgets, you should almost always disable this by selecting the image in the \"Project\" panel, then in the \"Inspector\" panel set the \"Non Power of 2\" option (in \"Advanced\") to \"None\", to prevent your image from being resized unexpectedly.\n\n#### Update Emoji\nUIWidgets supports rendering emoji in (editable) texts.\nThe default emoji resource version is [iOS 13.2](https://emojipedia.org/apple/ios-13.2).\nWe also prepared the resources of [Google Emoji](https://emojipedia.org/google).\nTo switch to Google version of emoji, please follow the following steps:\n\n1. Copy `Runtime/Resources/backup~/EmojiGoogle.png` to `Runtime/Resources/images` folder.\n2. In the **Project** panel, find and select `EmojiGoogle` asset, and in the **Inspector** panel, change **Max Size** to 4096, disable **Generate Mipmaps**, and enable **Alpha Is Transparency**.\n3. In the `OnEnable()` function in your class overriding `UIWidgetsPanel`, add the following code\n\n```csharp\nEmojiUtils.configuration = EmojiUtils.googleEmojiConfiguration;\n```\n\nIf you would like to use your own images for emoji, please follow the following steps:\n\n1. Create the sprite sheet (take `EmojiGoogle.png` as an example), and put in a `Resources` folder in your project, (for example `Resources/myImages/MyEmoji.png`).\n2. In the `OnEnable()` function, add the following code (replace example values with actual value). Note that the order of emoji codes should be consistent with the sprite sheet.\n\n```csharp\nEmojiUtils.configuration = new EmojiResourceConfiguration(\n  spriteSheetAssetName: \"myImage/MyEmoji\",\n  emojiCodes: new List<int> {\n    0x1f004, 0x1f0cf, 0x1f170, ...\n  },\n  spriteSheetNumberOfRows: 36,\n  spriteSheetNumberOfColumns: 37,\n);\n```\n\n#### Interact with GameObject Drag&Drops\n\n<p align=\"center\">\n  <img src=\"https://connect-prd-cdn.unity.com/20190718/p/images/e3c9cf9b-c732-4eb2-9afd-fe7de894f342_Custom_Inspector_Showcase_320px.gif\" width=\"300\"/>\n</p>\n\nWith the provided packaged stateful widget `UnityObjectDetector` and its `onRelease` callback function, you can easily drag some objects (for example GameObject from Hierarchy, files from Project Window, etc) into the area, get the UnityEngine.Object[] references and make further modification.\n\n\n## Debug UIWidgets Application\n\n#### Define UIWidgets_DEBUG\nIt's recommended to define the **UIWidgets_DEBUG** script symbol in editor, this will turn on\ndebug assertion in UIWidgets, which will help to find potential bugs earlier. To do this:\nplease go to **Player Settings -> Other Settings -> Configuration -> Scripting Define Symbols**,\nand add **UIWidgets_DEBUG**.\nThe symbol is for debug purpose, please remove it from your release build.\n\n#### UIWidgets Inspector\nThe UIWidgets Inspector tool is for visualizing and exploring the widget trees. You can find it\nvia *Window/Analysis/UIWidgets* inspector in Editor menu.\n\n**Note**\n* **UIWidgets_DEBUG** needs to be define for inspector to work properly.\n* Inspector currently only works in Editor Play Mode, inspect standalone built application is not supported for now.\n\n## Learn\n\n#### Samples\nYou can find many UIWidgets sample projects on Github, which cover different aspects and provide you\nlearning materials in various levels:\n* UIWidgetsSamples (https://github.com/UIWidgets/UIWidgetsSamples). These samples are developed by the dev team in order to illustrates all the features of \nUIWidgets. First clone this Repo to the **Assets** folder of your local UIWidgets project. Then\nyou can find all the sample scenes under the **Scene** folder.\nYou can also try UIWidgets-based Editor windows by clicking the new **UIWidgetsTests** tab on the main menu\nand open one of the dropdown samples.\n* awesome-UIWidgets by Liangxie (https://github.com/liangxiegame/awesome-uiwidgets). This Repo contains \nlots of UIWidget demo apps and third-party applications. \n* ConnectApp (https://github.com/UnityTech/ConnectAppCN). This is an online, open-source UIWidget-based App developed \nby the dev team. If you are making your own App with UIWidgets, this project will provides you with \nmany best practice cases.\n\n\n#### Wiki\nThe develop team is still working on the UIWidgets Wiki. However, since UIWidgets is mainly derived from Flutter,\n you can refer to Flutter Wiki to access detailed descriptions of UIWidgets APIs\n from those of their Flutter counterparts.\nMeanwhile, you can join the discussion channel at (https://connect.unity.com/g/uiwidgets)\n\n#### FAQ\n\n| Question     | Answer  |\n| :-----------------------------------------------| ---------------------: |\n| Can I create standalone App using UIWidgets?     | **Yes**  |\n| Can I use UIWidgets to build game UIs?   | **Yes**    |\n| Can I develop Unity Editor plugins using UIWidgets?  | **Yes** |\n| Is UIWidgets a extension of UGUI/NGUI? | **No** |\n| Is UIWidgets just a copy of Flutter? | **No** |\n| Can I create UI with UIWidgets by simply drag&drop? | **No** |\n| Do I have to pay for using UIWidgets? | **No** |\n| Any IDE recommendation for UIWidgets? | **Rider, VSCode(Open .sln)** |\n\n## How to Contribute\n\nCheck [CONTRIBUTING.md](CONTRIBUTING.md)\n"
        },
        {
          "name": "README.md.meta",
          "type": "blob",
          "size": 0.154296875,
          "content": "fileFormatVersion: 2\nguid: 1f81db83864a64e1787884fbd1e25cba\nTextScriptImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "Runtime.meta",
          "type": "blob",
          "size": 0.16796875,
          "content": "fileFormatVersion: 2\nguid: efe238f8645004af69998c3abf6eb3bf\nfolderAsset: yes\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "Runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "Scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "Third Party Notices.md",
          "type": "blob",
          "size": 2.8017578125,
          "content": "This package contains third-party software components governed by the license(s) indicated below:\n---------\n\nComponent Name: [flutter](https://flutter.dev/)\n\nLicense Type: flutter\n\nCopyright 2014 The Chromium Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials provided\n      with the distribution.\n    * Neither the name of Google Inc. nor the names of its\n      contributors may be used to endorse or promote products derived\n      from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nComponent Name: [SimpleJSON](https://wiki.unity3d.com/index.php/SimpleJSON)\n\nLicense Type: MIT\n\nCopyright (c) 2012-2017 Markus Göbel (Bunny83)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "Third Party Notices.md.meta",
          "type": "blob",
          "size": 0.154296875,
          "content": "fileFormatVersion: 2\nguid: 91b9be9cd98a141278c4884aa6446901\nTextScriptImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "UIWidgetCleanupPlugin.DotSettings",
          "type": "blob",
          "size": 3.443359375,
          "content": "﻿<wpf:ResourceDictionary xml:space=\"preserve\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:s=\"clr-namespace:System;assembly=mscorlib\" xmlns:ss=\"urn:shemas-jetbrains-com:settings-storage-xaml\" xmlns:wpf=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">\n\t<s:Boolean x:Key=\"/Default/CodeInspection/Highlighting/ReadSettingsFromFileLevel/@EntryValue\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/CodeStyle/CodeCleanup/Profiles/=UIWidgets/@EntryIndexedValue\">&lt;?xml version=\"1.0\" encoding=\"utf-16\"?&gt;&lt;Profile name=\"UIWidgets\"&gt;&lt;JsReformatCode&gt;True&lt;/JsReformatCode&gt;&lt;CSCodeStyleAttributes ArrangeTypeAccessModifier=\"True\" ArrangeTypeMemberAccessModifier=\"True\" SortModifiers=\"False\" RemoveRedundantParentheses=\"False\" AddMissingParentheses=\"True\" ArrangeBraces=\"True\" ArrangeAttributes=\"False\" ArrangeArgumentsStyle=\"False\" ArrangeCodeBodyStyle=\"True\" ArrangeVarStyle=\"False\" /&gt;&lt;CSOptimizeUsings&gt;&lt;OptimizeUsings&gt;True&lt;/OptimizeUsings&gt;&lt;EmbraceInRegion&gt;False&lt;/EmbraceInRegion&gt;&lt;RegionName&gt;&lt;/RegionName&gt;&lt;/CSOptimizeUsings&gt;&lt;CSReformatCode&gt;True&lt;/CSReformatCode&gt;&lt;CSFixBuiltinTypeReferences&gt;True&lt;/CSFixBuiltinTypeReferences&gt;&lt;CSArrangeQualifiers&gt;True&lt;/CSArrangeQualifiers&gt;&lt;CSShortenReferences&gt;True&lt;/CSShortenReferences&gt;&lt;IDEA_SETTINGS&gt;&amp;lt;profile version=\"1.0\"&amp;gt;\n  &amp;lt;option name=\"myName\" value=\"UIWidgets\" /&amp;gt;\n  &amp;lt;inspection_tool class=\"ES6ShorthandObjectProperty\" enabled=\"false\" level=\"INFORMATION\" enabled_by_default=\"false\" /&amp;gt;\n  &amp;lt;inspection_tool class=\"JSArrowFunctionBracesCanBeRemoved\" enabled=\"false\" level=\"INFORMATION\" enabled_by_default=\"false\" /&amp;gt;\n  &amp;lt;inspection_tool class=\"JSPrimitiveTypeWrapperUsage\" enabled=\"false\" level=\"WARNING\" enabled_by_default=\"false\" /&amp;gt;\n  &amp;lt;inspection_tool class=\"JSRemoveUnnecessaryParentheses\" enabled=\"false\" level=\"INFORMATION\" enabled_by_default=\"false\" /&amp;gt;\n  &amp;lt;inspection_tool class=\"JSUnnecessarySemicolon\" enabled=\"false\" level=\"WARNING\" enabled_by_default=\"false\" /&amp;gt;\n  &amp;lt;inspection_tool class=\"TypescriptExplicitMemberType\" enabled=\"false\" level=\"INFORMATION\" enabled_by_default=\"false\" /&amp;gt;\n  &amp;lt;inspection_tool class=\"UnnecessaryContinueJS\" enabled=\"false\" level=\"WARNING\" enabled_by_default=\"false\" /&amp;gt;\n  &amp;lt;inspection_tool class=\"UnnecessaryLabelJS\" enabled=\"false\" level=\"WARNING\" enabled_by_default=\"false\" /&amp;gt;\n  &amp;lt;inspection_tool class=\"UnnecessaryLabelOnBreakStatementJS\" enabled=\"false\" level=\"WARNING\" enabled_by_default=\"false\" /&amp;gt;\n  &amp;lt;inspection_tool class=\"UnnecessaryLabelOnContinueStatementJS\" enabled=\"false\" level=\"WARNING\" enabled_by_default=\"false\" /&amp;gt;\n  &amp;lt;inspection_tool class=\"UnnecessaryReturnJS\" enabled=\"false\" level=\"WARNING\" enabled_by_default=\"false\" /&amp;gt;\n  &amp;lt;inspection_tool class=\"UnterminatedStatementJS\" enabled=\"false\" level=\"WARNING\" enabled_by_default=\"false\" /&amp;gt;\n&amp;lt;/profile&amp;gt;&lt;/IDEA_SETTINGS&gt;&lt;XAMLCollapseEmptyTags&gt;False&lt;/XAMLCollapseEmptyTags&gt;&lt;RemoveCodeRedundanciesVB&gt;True&lt;/RemoveCodeRedundanciesVB&gt;&lt;VBOptimizeImports&gt;True&lt;/VBOptimizeImports&gt;&lt;VBShortenReferences&gt;True&lt;/VBShortenReferences&gt;&lt;VBFormatDocComments&gt;True&lt;/VBFormatDocComments&gt;&lt;CssAlphabetizeProperties&gt;True&lt;/CssAlphabetizeProperties&gt;&lt;/Profile&gt;</s:String></wpf:ResourceDictionary>"
        },
        {
          "name": "UIWidgetCleanupPlugin.DotSettings.meta",
          "type": "blob",
          "size": 0.1513671875,
          "content": "fileFormatVersion: 2\nguid: 2b375812364de43858a5045e73ed3bd3\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.224609375,
          "content": "{\n\t\"name\": \"com.unity.uiwidgets\",\n\t\"displayName\":\"UIWidgets\",\n\t\"version\": \"1.5.4-preview.1\",\n\t\"unity\": \"2018.4\",\n\t\"description\": \"UIWidgets allows you to build beautiful cross-platform apps through Unity\",\n\t\"dependencies\": {\n\t}\n}\n"
        },
        {
          "name": "package.json.meta",
          "type": "blob",
          "size": 0.154296875,
          "content": "fileFormatVersion: 2\nguid: 98f4768c9e1754bee9b7438f40b2b854\nTextScriptImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        },
        {
          "name": "scripts.meta",
          "type": "blob",
          "size": 0.16796875,
          "content": "fileFormatVersion: 2\nguid: 4b06650fb3b6d4b738815827309fb1aa\nfolderAsset: yes\nDefaultImporter:\n  externalObjects: {}\n  userData: \n  assetBundleName: \n  assetBundleVariant: \n"
        }
      ]
    }
  ]
}