{
  "metadata": {
    "timestamp": 1736711085266,
    "page": 879,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "RicoSuter/NJsonSchema",
      "stars": 1423,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.107421875,
          "content": "* text=auto\n*.cs diff=csharp\n*.tt text eol=crlf\n*.sln text eol=crlf\n*.csproj text eol=crlf\n*.vbproj text eol=crlf\n*.vcxproj text eol=crlf\n*.vcproj text eol=crlf\n*.dbproj text eol=crlf\n*.fsproj text eol=crlf\n*.lsproj text eol=crlf\n*.wixproj text eol=crlf\n*.modelproj text eol=crlf\n*.sqlproj text eol=crlf\n*.wmaproj text eol=crlf\n*.xproj text eol=crlf\n*.props text eol=crlf\n*.filters text eol=crlf\n*.vcxitems text eol=crlf\n*.bat text\n*.coffee text\n*.css text\n*.htm text\n*.html text\n*.inc text\n*.ini text\n*.js text\n*.jsx text\n*.json text\n*.less text\n*.php text\n*.pl text\n*.py text\n*.rb text\n*.sass text\n*.scm text\n*.scss text\n*.sh eol=lf\n*.sql text\n*.styl text\n*.tpl text\n*.ts text\n*.twig text\n*.xml text\n*.xhtml text\n*.markdown text\n*.md text\n*.mdwn text\n*.mdown text\n*.mkd text\n*.mkdn text\n*.mdtxt text\n*.mdtext text\n*.txt text\nAUTHORS text\nCHANGELOG text\nCHANGES text\nCONTRIBUTING text\nCOPYING text\nINSTALL text\nlicense text\nLICENSE text\nNEWS text\nreadme text\n*README* text\nTODO text\n*.dot text\n*.ejs text\n*.haml text\n*.handlebars text\n*.hbs text\n*.hbt text\n*.jade text\n*.latte text\n*.mustache text\n*.phtml text\n*.tmpl text\n.csslintrc text\n.eslintrc text\n.jscsrc text\n.jshintrc text\n.jshintignore text\n.stylelintrc text\n*.bowerrc text\n*.cnf text\n*.conf text\n*.config text\n.editorconfig text\n.gitattributes text\n.gitconfig text\n.gitignore text\n.htaccess text\n*.npmignore text\n*.yaml text\n*.yml text\nMakefile text\nmakefile text\n*.ai binary\n*.bmp binary\n*.eps binary\n*.gif binary\n*.ico binary\n*.jng binary\n*.jp2 binary\n*.jpg binary\n*.jpeg binary\n*.jpx binary\n*.jxr binary\n*.pdf binary\n*.png binary\n*.psb binary\n*.psd binary\n*.svg text\n*.svgz binary\n*.tif binary\n*.tiff binary\n*.wbmp binary\n*.webp binary\n*.kar binary\n*.m4a binary\n*.mid binary\n*.midi binary\n*.mp3 binary\n*.ogg binary\n*.ra binary\n*.3gpp binary\n*.3gp binary\n*.as binary\n*.asf binary\n*.asx binary\n*.fla binary\n*.flv binary\n*.m4v binary\n*.mng binary\n*.mov binary\n*.mp4 binary\n*.mpeg binary\n*.mpg binary\n*.swc binary\n*.swf binary\n*.webm binary\n*.7z binary\n*.gz binary\n*.rar binary\n*.tar binary\n*.zip binary\n*.ttf binary\n*.eot binary\n*.otf binary\n*.woff binary\n*.woff2 binary\n*.exe binary\n*.pyc binary"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3525390625,
          "content": "**/bin/**\n**/obj/**\nsrc/packages/Newtonsoft.Json**\n\n**.suo\n**.user\n**.DotSettings\n\n**.sln.ide/**\n**.vs/**\n.vscode/\n.idea/\n\n/src/NJsonSchema.sln.GhostDoc.xml\n\n[Bb]in/\n[Oo]bj/\n/src/packages\n.vs\n/src/NJsonSchema.CodeGeneration.Tests2\n*.vspx\n/src/TestResults\n/src/.cr/*\n/src/NJsonSchema.Benchmark/BenchmarkDotNet.Artifacts*\n_ReSharper.Caches\n/.nuke/temp\n/artifacts\n"
        },
        {
          "name": ".nuke",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.73046875,
          "content": "# Contributor License Agreement\n\nBy contributing your code to NJsonSchema you grant Rico Suter a non-exclusive, irrevocable, worldwide,\nroyalty-free, sublicenseable, transferable license under all of Your relevant intellectual property rights\n(including copyright, patent, and any other rights), to use, copy, prepare derivative works of, distribute and\npublicly perform and display the Contributions on any licensing terms, including without limitation:\n(a) open source licenses like the MIT license; and (b) binary, proprietary, or commercial licenses. Except for the\nlicenses granted herein, You reserve all right, title, and interest in and to the Contribution.\n\nYou confirm that you are able to grant us these rights. You represent that You are legally entitled to grant the\nabove license. If Your employer has rights to intellectual property that You create, You represent that You have\nreceived permission to make the Contributions on behalf of that employer, or that Your employer has waived such\nrights for the Contributions.\n\nYou represent that the Contributions are Your original works of authorship, and to Your knowledge, no other person\nclaims, or has the right to claim, any right in any invention or patent related to the Contributions. You also\nrepresent that You are not legally obligated, whether by entering into an agreement or otherwise, in any way that\nconflicts with the terms of this license.\n\nRico Suter acknowledges that, except as explicitly described in this Agreement, any Contribution which\nyou provide is on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED,\nINCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY, OR FITNESS\nFOR A PARTICULAR PURPOSE."
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 2.96484375,
          "content": "<Project>\n    <PropertyGroup>\n        <VersionPrefix>11.0.0</VersionPrefix>\n\n        <Authors>Rico Suter</Authors>\n        <Copyright>Copyright Â© Rico Suter, 2022</Copyright>\n\n        <SignAssembly>True</SignAssembly>\n        <AssemblyOriginatorKeyFile>../NJsonSchema.snk</AssemblyOriginatorKeyFile>\n\n        <PackageTags>json schema validation generator .net</PackageTags>\n        <PackageProjectUrl>http://NJsonSchema.org</PackageProjectUrl>\n        <Description>JSON Schema reader, generator and validator for .NET</Description>\n        <PackageIcon>NuGetIcon.png</PackageIcon>\n        <PackageLicenseExpression>MIT</PackageLicenseExpression>\n        <Company />\n        <PublishRepositoryUrl>true</PublishRepositoryUrl>\n        <EmbedUntrackedSources>true</EmbedUntrackedSources>\n        <IncludeSymbols>true</IncludeSymbols>\n        <SymbolPackageFormat>snupkg</SymbolPackageFormat>\n        <DebugSymbols>True</DebugSymbols>\n\n        <LangVersion>latest</LangVersion>\n        <TreatWarningsAsErrors>true</TreatWarningsAsErrors>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n\n        <UseArtifactsOutput>true</UseArtifactsOutput>\n        <GenerateDocumentationFile>true</GenerateDocumentationFile>\n\n    </PropertyGroup>\n\n    <PropertyGroup Label=\"Analyzer settings\">\n        <EnableNETAnalyzers>true</EnableNETAnalyzers>\n        <AnalysisLevel>latest-Recommended</AnalysisLevel>\n        <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>\n        <!--\n          [IDE0008] Use explicit type instead of 'var'\n          [IDE0021] Use block body for constructor\n          [IDE0022] Use block body for method\n          [IDE0029] Null check can be simplified\n          [IDE0032] Use auto property\n          [IDE0039] Use local function\n          [IDE0045] 'if' statement can be simplified\n          [IDE0046] 'if' statement can be simplified\n          [IDE0055] Fix formatting\n          [IDE0057] Substring can be simplified\n          [IDE0059] Unnecessary assignment of a value\n          [IDE0060] Remove unused parameter\n          [IDE0090] 'new' expression can be simplified\n          [IDE0130] Namespace does not match folder structure\n          [IDE0160] Convert to block scoped namespace\n          [IDE0290] Use primary constructor\n          [CA1200] Avoid using cref tags with a prefix\n          [CA1510] Use 'ArgumentNullException.ThrowIfNull' instead of explicitly throwing a new exception instance\n          [CA1716] rename parameter property so that it no longer conflicts with the reserved language keyword\n          [CA1720] Identifier 'xxx' contains type name\n          [CA1870] Use a cached 'SearchValues' instance for improved searching performance\n          [CA2263] Prefer the generic overload 'System.Enum.GetValues<TEnum>()'\n        -->\n        <NoWarn>$(NoWarn);IDE0008;IDE0021;IDE0022;IDE0029;IDE0032;IDE0039;IDE0045;IDE0046;IDE0055;IDE0057;IDE0059;IDE0060;IDE0090;IDE0130;IDE0160;IDE0290;CA1200;CA1510;CA1716;CA1720;CA1870;CA2263</NoWarn>\n    </PropertyGroup>\n\n</Project>\n"
        },
        {
          "name": "Directory.Packages.props",
          "type": "blob",
          "size": 1.458984375,
          "content": "<Project>\n  <PropertyGroup>\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\n    <CentralPackageTransitivePinningEnabled>false</CentralPackageTransitivePinningEnabled>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageVersion Include=\"BenchmarkDotNet\" Version=\"0.14.0\" />\n    <PackageVersion Include=\"Fluid.Core\" Version=\"2.17.0\" />\n    <PackageVersion Include=\"Microsoft.CodeAnalysis.Analyzers\" Version=\"3.11.0\" />\n    <PackageVersion Include=\"Microsoft.CodeAnalysis.CSharp\" Version=\"4.12.0\" />\n    <PackageVersion Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.12.0\" />\n    <PackageVersion Include=\"Namotion.Reflection\" Version=\"3.2.0\" />\n    <PackageVersion Include=\"NBench\" Version=\"2.0.1\" />\n    <PackageVersion Include=\"Newtonsoft.Json\" Version=\"13.0.3\" />\n    <PackageVersion Include=\"NodaTime\" Version=\"3.2.0\" />\n    <PackageVersion Include=\"NSwag.Core.Yaml\" Version=\"14.0.0\" />\n    <PackageVersion Include=\"Pro.NBench.xUnit\" Version=\"2.0.0\" />\n    <PackageVersion Include=\"System.Text.Json\" Version=\"8.0.5\" />\n    <PackageVersion Include=\"Verify.XUnit\" Version=\"28.8.1\" />\n    <PackageVersion Include=\"xunit\" Version=\"2.9.2\" />\n    <PackageVersion Include=\"xunit.runner.visualstudio\" Version=\"3.0.0\" />\n    <PackageVersion Include=\"YamlDotNet\" Version=\"16.3.0\" />\n  </ItemGroup>\n  <ItemGroup>\n    <GlobalPackageReference Include=\"GitHubActionsTestLogger\" Version=\"2.4.1\" />\n    <GlobalPackageReference Include=\"PolySharp\" Version=\"1.15.0\" />\n  </ItemGroup>\n</Project>"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0517578125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Rico Suter\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.59375,
          "content": "# NJsonSchema for .NET\n\n[NSwag](http://nswag.org) | NJsonSchema | [Apimundo](https://apimundo.com) | [Namotion.Reflection](https://github.com/RicoSuter/Namotion.Reflection)\n\n[![Azure DevOps](https://img.shields.io/azure-devops/build/rsuter/NJsonSchema/17/master.svg)](https://rsuter.visualstudio.com/NJsonSchema/_build?definitionId=17)\n[![Nuget](https://img.shields.io/nuget/v/NJsonSchema.svg)](https://www.nuget.org/packages?q=NJsonSchema)\n[![Discord](https://img.shields.io/badge/Discord-join%20chat-1dce73.svg)](https://discord.gg/BxQNy25WF6)\n[![StackOverflow](https://img.shields.io/badge/questions-on%20StackOverflow-orange.svg?style=flat)](http://stackoverflow.com/questions/tagged/njsonschema)\n[![Wiki](https://img.shields.io/badge/docs-in%20wiki-orange.svg?style=flat)](https://github.com/RicoSuter/njsonschema/wiki)\n[![Apimundo](https://img.shields.io/badge/Architecture-Apimundo-728199.svg)](https://apimundo.com/organizations/github/projects/ricosuter?tab=repositories)\n\n<img align=\"left\" src=\"https://raw.githubusercontent.com/RSuter/NJsonSchema/master/assets/GitHubIcon.png\">\n\nNJsonSchema is a .NET library to read, generate and validate JSON Schema draft v4+ schemas. The library can read a schema from a file or string and validate JSON data against it. A schema can also be generated from an existing .NET class. With the code generation APIs you can generate C# and TypeScript classes or interfaces from a schema. \n\nThe library uses [Json.NET](http://james.newtonking.com/json) to read and write JSON data and [Namotion.Reflection](https://github.com/RicoSuter/Namotion.Reflection) for additional .NET reflection APIs.\n\n**NuGet packages:** \n- [NJsonSchema](https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NJsonSchema/versions/latest) : JSON Schema parsing, validation and generation classes\n- [NJsonSchema.Annotations](https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NJsonSchema.Annotations/versions/latest) : JSON Schema annotations controlling serialization\n- [NJsonSchema.Yaml](https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NJsonSchema.Yaml/versions/latest) : Read and write JSON Schemas from YAML\n- [NJsonSchema.CodeGeneration](https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NJsonSchema.CodeGeneration/versions/latest) : Base classes to generate code from a JSON Schema\n- [NJsonSchema.CodeGeneration.CSharp](https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NJsonSchema.CodeGeneration.CSharp/versions/latest) : Generates CSharp classes\n- [NJsonSchema.CodeGeneration.TypeScript](https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NJsonSchema.CodeGeneration.TypeScript/versions/latest) : Generates TypeScript interfaces or classes\n\nPreview NuGet Feed: https://www.myget.org/F/njsonschema/api/v3/index.json\n\n**Features:**\n\n- [Read existing JSON Schemas](https://github.com/RicoSuter/NJsonSchema/wiki/JsonSchema) and [validate JSON data](https://github.com/RicoSuter/NJsonSchema/wiki/JsonSchemaValidator) (`JsonSchema.FromJsonAsync()`)\n- [Generate JSON Schema from .NET type via reflection](https://github.com/RicoSuter/NJsonSchema/wiki/JsonSchemaGenerator) (with support for many attributes/annotations) (`JsonSchema.FromType<MyType>()`)\n- [Generate JSON Schema from sample JSON data](https://github.com/RicoSuter/NJsonSchema/wiki/SampleJsonSchemaGenerator) (`JsonSchema.FromSampleJson()`)\n- Support for schema references ($ref) (relative, URL and file)\n- Generate C# and TypeScript code from JSON Schema\n- Supports .NET Standard 2.0, also see [XML Documentation](https://github.com/NJsonSchema/NJsonSchema/wiki/XML-Documentation))\n- Supports JSON Schema, Swagger and OpenAPI DTO schemas\n\nNJsonSchema is heavily used in [NSwag](http://nswag.org), a Swagger API toolchain for .NET which generates client code for Web API services. NSwag also provides command line tools to use the NJsonSchema's JSON Schema generator (command `types2swagger`). \n\nThe project is developed and maintained by [Rico Suter](http://rsuter.com) and other contributors. \n\n**Some code generators can directly be used via the [Apimundo service](https://apimundo.com/tools).**\n\n## NJsonSchema usage\n\nThe [JsonSchema](https://github.com/NJsonSchema/NJsonSchema/wiki/JsonSchema) class can be used as follows: \n\n```csharp\nvar schema = JsonSchema.FromType<Person>();\nvar schemaData = schema.ToJson();\nvar errors = schema.Validate(\"{...}\");\n\nforeach (var error in errors)\n    Console.WriteLine(error.Path + \": \" + error.Kind);\n\nschema = await JsonSchema.FromJsonAsync(schemaData);\n```\n\nThe `Person` class: \n\n```cs\npublic class Person\n{\n    [Required]\n    public string FirstName { get; set; }\n\n    public string MiddleName { get; set; }\n\n    [Required]\n    public string LastName { get; set; }\n\n    public Gender Gender { get; set; }\n\n    [Range(2, 5)]\n    public int NumberWithRange { get; set; }\n\n    public DateTime Birthday { get; set; }\n\n    public Company Company { get; set; }\n\n    public Collection<Car> Cars { get; set; }\n}\n\npublic enum Gender\n{\n    Male,\n    Female\n}\n\npublic class Car\n{\n    public string Name { get; set; }\n\n    public Company Manufacturer { get; set; }\n}\n\npublic class Company\n{\n    public string Name { get; set; }\n}\n```\n  \nThe generated JSON schema data stored in the `schemaData` variable: \n\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"title\": \"Person\",\n  \"type\": \"object\",\n  \"additionalProperties\": false,\n  \"required\": [\n    \"FirstName\",\n    \"LastName\"\n  ],\n  \"properties\": {\n    \"FirstName\": {\n      \"type\": \"string\"\n    },\n    \"MiddleName\": {\n      \"type\": [\n        \"null\",\n        \"string\"\n      ]\n    },\n    \"LastName\": {\n      \"type\": \"string\"\n    },\n    \"Gender\": {\n      \"oneOf\": [\n        {\n          \"$ref\": \"#/definitions/Gender\"\n        }\n      ]\n    },\n    \"NumberWithRange\": {\n      \"type\": \"integer\",\n      \"format\": \"int32\",\n      \"maximum\": 5.0,\n      \"minimum\": 2.0\n    },\n    \"Birthday\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\"\n    },\n    \"Company\": {\n      \"oneOf\": [\n        {\n          \"$ref\": \"#/definitions/Company\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"Cars\": {\n      \"type\": [\n        \"array\",\n        \"null\"\n      ],\n      \"items\": {\n        \"$ref\": \"#/definitions/Car\"\n      }\n    }\n  },\n  \"definitions\": {\n    \"Gender\": {\n      \"type\": \"integer\",\n      \"description\": \"\",\n      \"x-enumNames\": [\n        \"Male\",\n        \"Female\"\n      ],\n      \"enum\": [\n        0,\n        1\n      ]\n    },\n    \"Company\": {\n      \"type\": \"object\",\n      \"additionalProperties\": false,\n      \"properties\": {\n        \"Name\": {\n          \"type\": [\n            \"null\",\n            \"string\"\n          ]\n        }\n      }\n    },\n    \"Car\": {\n      \"type\": \"object\",\n      \"additionalProperties\": false,\n      \"properties\": {\n        \"Name\": {\n          \"type\": [\n            \"null\",\n            \"string\"\n          ]\n        },\n        \"Manufacturer\": {\n          \"oneOf\": [\n            {\n              \"$ref\": \"#/definitions/Company\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n## NJsonSchema.CodeGeneration usage\n\nThe `NJsonSchema.CodeGeneration` can be used to generate C# or TypeScript code from a JSON schema:\n\n```cs\nvar generator = new CSharpGenerator(schema);\nvar file = generator.GenerateFile();\n```\n    \nThe `file` variable now contains the C# code for all the classes defined in the JSON schema. \n\n### TypeScript\n\nThe previously generated JSON Schema would generate the following TypeScript interfaces. \n\n**Settings:** \n\n    new TypeScriptGeneratorSettings { TypeStyle = TypeScriptTypeStyle.Interface, TypeScriptVersion = 2.0m }\n    \n**Output:** \n\n```typescript\nexport enum Gender {\n    Male = 0, \n    Female = 1, \n}\n\nexport interface Company {\n    Name: string | undefined;\n}\n\nexport interface Car {\n    Name: string | undefined;\n    Manufacturer: Company | undefined;\n}\n\nexport interface Person {\n    FirstName: string;\n    MiddleName: string | undefined;\n    LastName: string;\n    Gender: Gender;\n    NumberWithRange: number;\n    Birthday: Date;\n    Company: Company | undefined;\n    Cars: Car[] | undefined;\n}\n```\n\n... and the following TypeScript classes. \n\n**Settings:** \n\n    new TypeScriptGeneratorSettings { TypeStyle = TypeScriptTypeStyle.Class, TypeScriptVersion = 2.0m }\n\n**Output:**\n\n```typescript\nexport enum Gender {\n    Male = 0, \n    Female = 1, \n}\n\nexport class Company implements ICompany {\n    name: string | undefined;\n\n    constructor(data?: ICompany) {\n        if (data) {\n            for (var property in data) {\n                if (data.hasOwnProperty(property))\n                    (<any>this)[property] = (<any>data)[property];\n            }\n        }\n    }\n\n    init(data?: any) {\n        if (data) {\n            this.name = data[\"Name\"];\n        }\n    }\n\n    static fromJS(data: any): Company {\n        let result = new Company();\n        result.init(data);\n        return result;\n    }\n\n    toJSON(data?: any) {\n        data = typeof data === 'object' ? data : {};\n        data[\"Name\"] = this.name;\n        return data; \n    }\n}\n\nexport interface ICompany {\n    name: string | undefined;\n}\n\nexport class Car implements ICar {\n    name: string | undefined;\n    manufacturer: Company | undefined;\n\n    constructor(data?: ICar) {\n        if (data) {\n            for (var property in data) {\n                if (data.hasOwnProperty(property))\n                    (<any>this)[property] = (<any>data)[property];\n            }\n        }\n    }\n\n    init(data?: any) {\n        if (data) {\n            this.name = data[\"Name\"];\n            this.manufacturer = data[\"Manufacturer\"] ? Company.fromJS(data[\"Manufacturer\"]) : <any>undefined;\n        }\n    }\n\n    static fromJS(data: any): Car {\n        let result = new Car();\n        result.init(data);\n        return result;\n    }\n\n    toJSON(data?: any) {\n        data = typeof data === 'object' ? data : {};\n        data[\"Name\"] = this.name;\n        data[\"Manufacturer\"] = this.manufacturer ? this.manufacturer.toJSON() : <any>undefined;\n        return data; \n    }\n}\n\nexport interface ICar {\n    name: string | undefined;\n    manufacturer: Company | undefined;\n}\n\nexport class Person implements IPerson {\n    firstName: string;\n    middleName: string | undefined;\n    lastName: string;\n    gender: Gender;\n    numberWithRange: number;\n    birthday: Date;\n    company: Company | undefined;\n    cars: Car[] | undefined;\n\n    constructor(data?: IPerson) {\n        if (data) {\n            for (var property in data) {\n                if (data.hasOwnProperty(property))\n                    (<any>this)[property] = (<any>data)[property];\n            }\n        }\n    }\n\n    init(data?: any) {\n        if (data) {\n            this.firstName = data[\"FirstName\"];\n            this.middleName = data[\"MiddleName\"];\n            this.lastName = data[\"LastName\"];\n            this.gender = data[\"Gender\"];\n            this.numberWithRange = data[\"NumberWithRange\"];\n            this.birthday = data[\"Birthday\"] ? new Date(data[\"Birthday\"].toString()) : <any>undefined;\n            this.company = data[\"Company\"] ? Company.fromJS(data[\"Company\"]) : <any>undefined;\n            if (data[\"Cars\"] && data[\"Cars\"].constructor === Array) {\n                this.cars = [];\n                for (let item of data[\"Cars\"])\n                    this.cars.push(Car.fromJS(item));\n            }\n        }\n    }\n\n    static fromJS(data: any): Person {\n        let result = new Person();\n        result.init(data);\n        return result;\n    }\n\n    toJSON(data?: any) {\n        data = typeof data === 'object' ? data : {};\n        data[\"FirstName\"] = this.firstName;\n        data[\"MiddleName\"] = this.middleName;\n        data[\"LastName\"] = this.lastName;\n        data[\"Gender\"] = this.gender;\n        data[\"NumberWithRange\"] = this.numberWithRange;\n        data[\"Birthday\"] = this.birthday ? this.birthday.toISOString() : <any>undefined;\n        data[\"Company\"] = this.company ? this.company.toJSON() : <any>undefined;\n        if (this.cars && this.cars.constructor === Array) {\n            data[\"Cars\"] = [];\n            for (let item of this.cars)\n                data[\"Cars\"].push(item.toJSON());\n        }\n        return data; \n    }\n}\n\nexport interface IPerson {\n    firstName: string;\n    middleName: string | undefined;\n    lastName: string;\n    gender: Gender;\n    numberWithRange: number;\n    birthday: Date;\n    company: Company | undefined;\n    cars: Car[] | undefined;\n}\n```\n\n## Final notes\n\nApplications which use the library: \n\n- [VisualJsonEditor](http://visualjsoneditor.org), a JSON schema based file editor for Windows. \n- [NSwag](http://nswag.org): The Swagger API toolchain for .NET\n- [SigSpec for SignalR Core](https://github.com/RicoSuter/SigSpec): Specification and code generator for SignalR Core. \n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.cmd",
          "type": "blob",
          "size": 0.2021484375,
          "content": ":; set -eo pipefail\n:; SCRIPT_DIR=$(cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd)\n:; ${SCRIPT_DIR}/build.sh \"$@\"\n:; exit $?\n\n@ECHO OFF\npowershell -ExecutionPolicy ByPass -NoProfile -File \"%~dp0build.ps1\" %*\n"
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 3.1484375,
          "content": "[CmdletBinding()]\nParam(\n    [Parameter(Position=0,Mandatory=$false,ValueFromRemainingArguments=$true)]\n    [string[]]$BuildArguments\n)\n\nWrite-Output \"PowerShell $($PSVersionTable.PSEdition) version $($PSVersionTable.PSVersion)\"\n\nSet-StrictMode -Version 2.0; $ErrorActionPreference = \"Stop\"; $ConfirmPreference = \"None\"; trap { Write-Error $_ -ErrorAction Continue; exit 1 }\n$PSScriptRoot = Split-Path $MyInvocation.MyCommand.Path -Parent\n\n###########################################################################\n# CONFIGURATION\n###########################################################################\n\n$BuildProjectFile = \"$PSScriptRoot\\build\\_build.csproj\"\n$TempDirectory = \"$PSScriptRoot\\\\.nuke\\temp\"\n\n$DotNetGlobalFile = \"$PSScriptRoot\\\\global.json\"\n$DotNetInstallUrl = \"https://dot.net/v1/dotnet-install.ps1\"\n$DotNetChannel = \"STS\"\n\n$env:DOTNET_CLI_TELEMETRY_OPTOUT = 1\n$env:DOTNET_NOLOGO = 1\n\n###########################################################################\n# EXECUTION\n###########################################################################\n\nfunction ExecSafe([scriptblock] $cmd) {\n    & $cmd\n    if ($LASTEXITCODE) { exit $LASTEXITCODE }\n}\n\n# If dotnet CLI is installed globally and it matches requested version, use for execution\nif ($null -ne (Get-Command \"dotnet\" -ErrorAction SilentlyContinue) -and `\n     $(dotnet --version) -and $LASTEXITCODE -eq 0) {\n    $env:DOTNET_EXE = (Get-Command \"dotnet\").Path\n}\nelse {\n    # Download install script\n    $DotNetInstallFile = \"$TempDirectory\\dotnet-install.ps1\"\n    New-Item -ItemType Directory -Path $TempDirectory -Force | Out-Null\n    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n    (New-Object System.Net.WebClient).DownloadFile($DotNetInstallUrl, $DotNetInstallFile)\n\n    # If global.json exists, load expected version\n    if (Test-Path $DotNetGlobalFile) {\n        $DotNetGlobal = $(Get-Content $DotNetGlobalFile | Out-String | ConvertFrom-Json)\n        if ($DotNetGlobal.PSObject.Properties[\"sdk\"] -and $DotNetGlobal.sdk.PSObject.Properties[\"version\"]) {\n            $DotNetVersion = $DotNetGlobal.sdk.version\n        }\n    }\n\n    # Install by channel or version\n    $DotNetDirectory = \"$TempDirectory\\dotnet-win\"\n    if (!(Test-Path variable:DotNetVersion)) {\n        ExecSafe { & powershell $DotNetInstallFile -InstallDir $DotNetDirectory -Channel $DotNetChannel -NoPath }\n    } else {\n        ExecSafe { & powershell $DotNetInstallFile -InstallDir $DotNetDirectory -Version $DotNetVersion -NoPath }\n    }\n    $env:DOTNET_EXE = \"$DotNetDirectory\\dotnet.exe\"\n    $env:PATH = \"$DotNetDirectory;$env:PATH\"\n}\n\nWrite-Output \"Microsoft (R) .NET SDK version $(& $env:DOTNET_EXE --version)\"\n\nif (Test-Path env:NUKE_ENTERPRISE_TOKEN) {\n    & $env:DOTNET_EXE nuget remove source \"nuke-enterprise\" > $null\n    & $env:DOTNET_EXE nuget add source \"https://f.feedz.io/nuke/enterprise/nuget\" --name \"nuke-enterprise\" --username \"PAT\" --password $env:NUKE_ENTERPRISE_TOKEN > $null\n}\n\nExecSafe { & $env:DOTNET_EXE build $BuildProjectFile /nodeReuse:false /p:UseSharedCompilation=false -nologo -clp:NoSummary --verbosity quiet }\nExecSafe { & $env:DOTNET_EXE run --project $BuildProjectFile --no-build -- $BuildArguments }\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 2.5654296875,
          "content": "#!/usr/bin/env bash\n\nbash --version 2>&1 | head -n 1\n\nset -eo pipefail\nSCRIPT_DIR=$(cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd)\n\n###########################################################################\n# CONFIGURATION\n###########################################################################\n\nBUILD_PROJECT_FILE=\"$SCRIPT_DIR/build/_build.csproj\"\nTEMP_DIRECTORY=\"$SCRIPT_DIR//.nuke/temp\"\n\nDOTNET_GLOBAL_FILE=\"$SCRIPT_DIR//global.json\"\nDOTNET_INSTALL_URL=\"https://dot.net/v1/dotnet-install.sh\"\nDOTNET_CHANNEL=\"STS\"\n\nexport DOTNET_CLI_TELEMETRY_OPTOUT=1\nexport DOTNET_NOLOGO=1\n\n###########################################################################\n# EXECUTION\n###########################################################################\n\nfunction FirstJsonValue {\n    perl -nle 'print $1 if m{\"'\"$1\"'\": \"([^\"]+)\",?}' <<< \"${@:2}\"\n}\n\n# If dotnet CLI is installed globally and it matches requested version, use for execution\nif [ -x \"$(command -v dotnet)\" ] && dotnet --version &>/dev/null; then\n    export DOTNET_EXE=\"$(command -v dotnet)\"\nelse\n    # Download install script\n    DOTNET_INSTALL_FILE=\"$TEMP_DIRECTORY/dotnet-install.sh\"\n    mkdir -p \"$TEMP_DIRECTORY\"\n    curl -Lsfo \"$DOTNET_INSTALL_FILE\" \"$DOTNET_INSTALL_URL\"\n    chmod +x \"$DOTNET_INSTALL_FILE\"\n\n    # If global.json exists, load expected version\n    if [[ -f \"$DOTNET_GLOBAL_FILE\" ]]; then\n        DOTNET_VERSION=$(FirstJsonValue \"version\" \"$(cat \"$DOTNET_GLOBAL_FILE\")\")\n        if [[ \"$DOTNET_VERSION\" == \"\"  ]]; then\n            unset DOTNET_VERSION\n        fi\n    fi\n\n    # Install by channel or version\n    DOTNET_DIRECTORY=\"$TEMP_DIRECTORY/dotnet-unix\"\n    if [[ -z ${DOTNET_VERSION+x} ]]; then\n        \"$DOTNET_INSTALL_FILE\" --install-dir \"$DOTNET_DIRECTORY\" --channel \"$DOTNET_CHANNEL\" --no-path\n    else\n        \"$DOTNET_INSTALL_FILE\" --install-dir \"$DOTNET_DIRECTORY\" --version \"$DOTNET_VERSION\" --no-path\n    fi\n    export DOTNET_EXE=\"$DOTNET_DIRECTORY/dotnet\"\n    export PATH=\"$DOTNET_DIRECTORY:$PATH\"\nfi\n\necho \"Microsoft (R) .NET SDK version $(\"$DOTNET_EXE\" --version)\"\n\nif [[ ! -z ${NUKE_ENTERPRISE_TOKEN+x} && \"$NUKE_ENTERPRISE_TOKEN\" != \"\" ]]; then\n    \"$DOTNET_EXE\" nuget remove source \"nuke-enterprise\" &>/dev/null || true\n    \"$DOTNET_EXE\" nuget add source \"https://f.feedz.io/nuke/enterprise/nuget\" --name \"nuke-enterprise\" --username \"PAT\" --password \"$NUKE_ENTERPRISE_TOKEN\" --store-password-in-clear-text &>/dev/null || true\nfi\n\n\"$DOTNET_EXE\" build \"$BUILD_PROJECT_FILE\" /nodeReuse:false /p:UseSharedCompilation=false -nologo -clp:NoSummary --verbosity quiet\n\"$DOTNET_EXE\" run --project \"$BUILD_PROJECT_FILE\" --no-build -- \"$@\"\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.0751953125,
          "content": "{\n  \"sdk\": {\n    \"version\": \"9.0.100\",\n    \"rollForward\": \"latestMinor\"\n  }\n}"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}