{
  "metadata": {
    "timestamp": 1736711033586,
    "page": 765,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "andrewlock/StronglyTypedId",
      "stars": 1575,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.470703125,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n*.sh eol=lf\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.806640625,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n.idea\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\n[Xx]64/\n[Xx]86/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n\n# TODO: Un-comment the next line if you do not want to checkin \n# your web deploy settings because they may include unencrypted\n# passwords\n#*.pubxml\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Microsoft Azure ApplicationInsights config file\nApplicationInsights.config\n\n# Windows Store app package directory\nAppPackages/\nBundleArtifacts/\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# LightSwitch generated files\nGeneratedArtifacts/\nModelManifest.xml\n\n# Paket dependency manager\n.paket/paket.exe\n\n# FAKE - F# Make\n.fake/\ntools/*\n!tools/packages.config\n\n# NuGet testing\nglobalPackagesFolder"
        },
        {
          "name": ".nuke",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.4609375,
          "content": "# Changelog\n\n## [v1.0.0-beta08]\n\nFixes\n* Fix bug in System.Text.Json converters that could cause errors when used with source generators\n\n## [v1.0.0-beta07]\n\nBreaking Changes:\n* This release contains a fundamental change in how you define your IDs\n  * For details see [the related issue](https://github.com/andrewlock/StronglyTypedId/issues/102), the [PR](https://github.com/andrewlock/StronglyTypedId/pull/117), or the [README](./README.md)\n  * The \"options\" enums `StronglyTypedIdBackingType`, `StronglyTypedIdConverter`, and `StronglyTypedIdImplementations` have been removed.\n  * Instead, you simply choose one of 4 different built-in templates, or use a custom template.\n\nFeatures\n* Adds `[GeneratedCode]` attribute to generated IDs (Fixes https://github.com/andrewlock/StronglyTypedId/issues/57)\n* Add support for parsing `SCOPE_IDENTITY()` and `@@IDENTITY` in MSSQL with `DapperTypeHandler` (Fixes https://github.com/andrewlock/StronglyTypedId/issues/118)\n* Fix exception being thrown when deserializing nullable strongly-typed id backed by string (Fixes https://github.com/andrewlock/StronglyTypedId/issues/83)\n* Allow creating multiple IDs with the same name in a project (Fixes https://github.com/andrewlock/StronglyTypedId/issues/74, [thanks @jo-goro](https://github.com/andrewlock/StronglyTypedId/pull/77)!)\n\n## [v1.0.0-beta06]\n\nFeatures\n* Added support for Masstransit.NewId ([thanks @Khitiara](https://github.com/andrewlock/StronglyTypedId/pull/52)!) Fixes https://github.com/andrewlock/StronglyTypedId/issues/51\n* Added parameterless constructor to EF Core ValueConverts for compatibility with global conventions. Fixes https://github.com/andrewlock/StronglyTypedId/issues/50\n* Added `#pragma warning disable 1591` to generated code to avoid warning CS1591. Fixes https://github.com/andrewlock/StronglyTypedId/issues/47\n\n\n## [v1.0.0-beta05]\n\nBreaking Changes:\n* Removed StronglyTypedId.Attributes NuGet package.\n* The attributes are no longer embed in your project by default, instead it will use the external dll. You can re-enable the embedding by setting `STRONGLY_TYPED_ID_EMBED_ATTRIBUTES`.\n\nNew Features:\n\n* Improved approach to handling [InternalsVisibleTo] issues, by embedding the StronglyTypedId.Attributes.dll in the NuGet package directly.\n\n## [v1.0.0-beta04]\n\nNew Features:\n\n* Added support for IDs inside nested classes/records/structs (Fixes https://github.com/andrewlock/StronglyTypedId/issues/40)\n \n## [v1.0.0-beta03]\n\nBreaking Changes:\n\n* Converted to use .NET 6's incremental source generators. This should provide performance improvements, but it requires using the .NET 6 SDK.\n\nBug fixes:\n\n* Fixed problem deserializing nullable strongly-typed IDs with Newtonsoft.Json (https://github.com/andrewlock/StronglyTypedId/issues/36)\n\nNew Features:\n\n* To support scenarios in which [InternalsVisibleTo] causes duplicate reference issues with the marker attributes, you can set the msbuild constant `STRONGLY_TYPED_ID_EXCLUDE_ATTRIBUTES` to exclude these from build output. You must then reference the StronglyTypedId.Attributes project as well, which contains the marker attributes.\n* By default, the marker attributes are decorated with the `[Conditional]` attribute, so they will not appear on your IDs. If you need these to persist, define the msbuild constant `STRONGLY_TYPED_ID_USAGES`.\n\n## [v1.0.0-beta02]\n\nBug fixes\n\n* Adds auto-generated attributes and enums as `internal` to help avoid referencing issues\n\n## [v1.0.0-beta01]\n\nVersion 0.x of this library used the helper library [CodeGeneration.Roslyn](https://github.com/AArnott/CodeGeneration.Roslyn) by [AArnott](https://github.com/AArnott), for build-time source generation. In version 1.x this approach has been completely replaced in favour of source generators, as these are explicitly supported in .NET 5+. As part of this change, there were a number of additional features added and breaking changes made.\n\nBreaking Changes\n\n* `StronglyTypedIds` namespace is required. In version 0.x of the library, the `[StronglyTypedId]` attribute was in the global namespace. In version 1.x, the attribute is in the `StronglyTypedIds` namespace, so you must add `namespace StronglyTypedIds;`.\n* The properties exposed by `StronglyTypedIds` have changed: there is no longer a `generateJsonConverter` property. Instead, this is infered based on the `StronglyTypedIdConverters` flags provided.\n* The `String` backing typed ID will throw if you call the constructor with a `null` value\n\nNew Features\n\n* The attributes can now auto-generate additional converter types such as EF Core `ValueConverter` and Dapper `TypeHandler`, as described in [my blog posts](https://andrewlock.net/series/using-strongly-typed-entity-ids-to-avoid-primitive-obsession/). These are optional flags on the `converters` property.\n* Made interface implementations (`IEquatable<T>` and `IComparable<T>` currently) optional. This is to potentially support additional interfaces in future versions.\n* Added a `NullableString` backing type. Due to the behaviour of `struct`s in c#, the `String` backing type ID _may_ still be null, but you can't explicitly call the constructor with a null value. In contrast, you can do this with the `NullableString` backing type.\n* Added a `[StronglyTypedIdDefaults]` attribute to set default values for all `[StronglyTypedId]` attributes in your project. This is useful if you want to customise all the attributes, for example, if you want to generate additional converters by default. You can still override all the properties of a `[StronglyTypedId]` instance.\n\nBug Fixes\n\n* Some converters had incorrect implementations, such as in ([#26](https://github.com/andrewlock/StronglyTypedId/issues/24)). These have been addressed in version 1.x.\n* Better null handling has been added for the `String` backing type, handling issues such as [#32](https://github.com/andrewlock/StronglyTypedId/issues/32).\n* The code is marked as auto generated, to avoid errors such as #CS1591 as described in [#27](https://github.com/andrewlock/StronglyTypedId/issues/27)\n\n## [v0.2.1]\n\nFeatures:\n\n* Fix Package description\n\n## [v0.2.0]\n\nFeatures:\n\n* Added support for .NET Core 3.1, and converted to using CodeGeneration.Roslyn.Tool instead of dotnet-codegen (thanks [Bartłomiej Oryszak\n](https://github.com/vebbo2))\n* Added support for generating System.Text.Json `JsonConverters` (thanks [Bartłomiej Oryszak\n](https://github.com/vebbo2))\n* Added support for long backing type (thanks [Bartłomiej Oryszak\n](https://github.com/vebbo2))\n\n## [v0.1.0]\n\nInitial release\n\n[v0.2.0]: https://github.com/andrewlock/StronglyTypedId/compare/v0.1.0...v0.2.0"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 1.64453125,
          "content": "<Project>\n\n  <Import Project=\"version.props\" />\n\n\n  <PropertyGroup>\n    <Authors>Andrew Lock</Authors>\n    <Copyright>Copyright © AndrewLock</Copyright>\n    <NeutralLanguage>en-GB</NeutralLanguage>\n    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\n    <PackageIcon>logo.png</PackageIcon>\n    <PackageProjectUrl>https://github.com/andrewlock/StronglyTypedId</PackageProjectUrl>\n    <PackageTags>stronglytypedid attribute generator generation codegen codegenerator codegeneration netescapades</PackageTags>\n    <RepositoryUrl>https://github.com/andrewlock/StronglyTypedId</RepositoryUrl>\n    <RepositoryType>git</RepositoryType>\n    <CheckEolTargetFramework>false</CheckEolTargetFramework>\n  </PropertyGroup>\n\n  <PropertyGroup>\n    <DebugType>embedded</DebugType>\n    <NoPackageAnalysis>true</NoPackageAnalysis>\n    <LangVersion>latest</LangVersion>\n    <GeneratePackageOnBuild>False</GeneratePackageOnBuild>\n    <EmbedUntrackedSources>true</EmbedUntrackedSources>\n    <PublishRepositoryUrl>true</PublishRepositoryUrl>\n    <PackageOutputPath>$(MSBuildThisFileDirectory)\\artifacts</PackageOutputPath>\n  </PropertyGroup>\n\n  <PropertyGroup>\n    <PackageReadmeFile>README.md</PackageReadmeFile>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <None Include=\"$(MSBuildThisFileDirectory)\\logo.png\" Pack=\"true\" PackagePath=\"\\\"/>\n    <None Include=\"$(MSBuildThisFileDirectory)\\README.md\" Pack=\"true\" PackagePath=\"\\\"/>\n  </ItemGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.SourceLink.GitHub\" Version=\"1.1.1\" PrivateAssets=\"All\"/>\n  </ItemGroup>\n\n  <Import Project=\"releasenotes.props\" />\n\n</Project>"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0517578125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2019 andrewlock\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "NuGet.integration-tests.config",
          "type": "blob",
          "size": 0.607421875,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <config>\n    <add key=\"globalPackagesFolder\" value=\"globalPackagesFolder\" />\n  </config>\n  <packageSources>\n    <clear />\n    <add key=\"local-packages\" value=\"./artifacts\" />\n    <add key=\"nuget\" value=\"https://api.nuget.org/v3/index.json\" />\n  </packageSources>\n  <packageSourceMapping>\n    <packageSource key=\"nuget\">\n      <package pattern=\"*\" />\n    </packageSource>\n    <packageSource key=\"local-packages\">\n      <package pattern=\"StronglyTypedId\" />\n      <package pattern=\"StronglyTypedId.*\" />\n    </packageSource>\n  </packageSourceMapping>\n</configuration>"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.6025390625,
          "content": "# StronglyTypedId\n\n![StronglyTypedId logo](https://raw.githubusercontent.com/andrewlock/StronglyTypedId/master/logo.png)\n\n![Build status](https://github.com/andrewlock/StronglyTypedId/actions/workflows/BuildAndPack.yml/badge.svg)\n[![NuGet](https://img.shields.io/nuget/v/StronglyTypedId.svg)](https://www.nuget.org/packages/StronglyTypedId/)\n\nStronglyTypedId makes creating strongly-typed IDs as easy as adding an attribute! No more [accidentally passing arguments in the wrong order to methods](https://andrewlock.net/using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-1/#an-example-of-the-problem) - StronglyTypedId uses .NET 7+'s compile-time incremental source generators to generate [the boilerplate](https://andrewlock.net/using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-2/#a-full-example-implementation) required to use strongly-typed IDs.\n\nSimply, [install the required package](#installing) add the `[StronglyTypedId]` attribute to a `struct` (in the `StronglyTypedIds` namespace):\n\n```csharp\nusing StronglyTypedIds;\n \n[StronglyTypedId] // <- Add this attribute to auto-generate the rest of the type\npublic partial struct FooId { }\n```\n\nand the source generator magically generates the backing code when you save the file! Use _Go to Definition_ to see the generated code:\n\n<img src=\"https://raw.githubusercontent.com/andrewlock/StronglyTypedId/master/docs/strongly_typed_id.gif\" alt=\"Generating a strongly-typed ID using the StronglyTypedId packages\"/>\n\n> StronglyTypedId requires [the .NET Core SDK v7.0.100 or greater](https://dotnet.microsoft.com/download/dotnet/7.0).\n\n\n## Why do I need this library?\n\nI have [written a blog-post series](https://andrewlock.net/using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-1/) on strongly-typed IDs that explains the issues and rational behind this library. For a detailed view, I suggest starting there, but I provide a brief introduction here.\n\nThis library is designed to tackle a specific instance of [_primitive obsession_](https://lostechies.com/jimmybogard/2007/12/03/dealing-with-primitive-obsession/), whereby we use primitive objects (`Guid`/`string`/`int`/`long` etc) to represent the IDs of domain objects. The problem is that these IDs are all interchangeable - an order ID can be assigned to a product ID, despite the fact that is likely nonsensical from the domain point of view. [See here for a more concrete example](https://andrewlock.net/using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-1/#an-example-of-the-problem).\n\nBy using strongly-typed IDs, we give each ID its own `Type` which _wraps_ the underlying primitive value. This ensures you can only use the ID where it makes sense: `ProductId`s can only be assigned to products, or you can only search for products using a `ProductId`, not an `OrderId`.\n\nUnfortunately, taking this approach requires [a lot of boilerplate and ceremony](https://andrewlock.net/using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-2/#a-full-example-implementation) to make working with the IDs manageable. This library abstracts all that away from you, by generating the boilerplate at build-time by using a Roslyn-powered code generator.\n\n## Requirements\n\nThe StronglyTypedId NuGet package is a .NET Standard 2.0 package. \n\nYou must be using the .NET 7+ SDK (though you can compile for other target frameworks like .NET Core 2.1 and .NET Framework 4.8)\n\n## Installing\n\nTo use StronglyTypedIds, install the [StronglyTypedId NuGet package](https://www.nuget.org/packages/StronglyTypedId) into your _csproj_ file, for example by running\n\n```bash\ndotnet add package StronglyTypedId --version 1.0.0-beta08\n```\n\nThis adds a `<PackageReference>` to your project. You can additionally mark the package as `PrivateAsets=\"all\"` and `ExcludeAssets=\"runtime\"`.\n\n> Setting `PrivateAssets=\"all\"` means any projects referencing this one will not also get a reference to the _StronglyTypedId_ package. Setting `ExcludeAssets=\"runtime\"` ensures the _StronglyTypedId.Attributes.dll_ file is not copied to your build output (it is not required at runtime).\n\n```xml\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net6.0</TargetFramework>\n  </PropertyGroup>\n  \n  <ItemGroup>\n    <!-- Add the package -->\n    <PackageReference Include=\"StronglyTypedId\" Version=\"1.0.0-beta08\" PrivateAssets=\"all\" ExcludeAssets=\"runtime\" />\n    <!-- -->\n  </ItemGroup>\n\n</Project>\n```\n\n## Usage\n\nTo create a strongly-typed ID, create a `partial struct` with the desired name, and decorate it with the `[StronglyTypedId]` attribute, in the `StronglyTypedIds` namespace:\n\n```csharp\nusing StronglyTypedIds;\n\n[StronglyTypedId] // Add this attribute to auto-generate the rest of the type\npublic partial struct FooId { }\n```\n\nThis generates the \"default\" strongly-typed ID using a `Guid` backing field. You can use your IDE's _Go to Definition_ functionality on your ID to see the_exact code generated by the source generator. The ID implements the following interfaces automatically:\n\n- `IComparable<T>`\n- `IEquatable<T>`\n- `IFormattable`\n- `ISpanFormattable` (.NET 6+)\n- `IParsable<T>` (.NET 7+)\n- `ISpanParsable<T>` (.NET 7+)\n- `IUtf8SpanFormattable` (.NET 8+)\n- `IUtf8SpanParsable<T>` (.NET 8+)\n\nAnd it additionally includes two converters/serializers:\n\n- `System.ComponentModel.TypeConverter`\n- `System.Text.Json.Serialization.JsonConverter`\n\nThis provides basic integration for many use cases, but you may want to customize the IDs further, as you'll see shortly.\n\n### Using different types as a backing fields\n\nThe default strongly-typed ID uses a `Guid` backing field:\n\n```csharp\nusing StronglyTypedIds;\n\n[StronglyTypedId]\npublic partial struct FooId { }\n\nvar id = new FooId(Guid.NewGuid());\n```\n\nYou can choose a different type backing field, by passing a value of the `Template` enum in the constructor. \n\n```csharp\nusing StronglyTypedIds;\n\n[StronglyTypedId(Template.Int)]\npublic partial struct FooId { }\n\nvar id = new FooId(123);\n```\n\nCurrently supported built-in backing types are:\n\n- `Guid` (the default)\n- `int`\n- `long`\n- `string`\n\n### Changing the defaults globally\n\nIf you wish to change the template used by default for _all_ the `[StronglyTypedId]`-decorated IDs in your project, you can use the assembly attribute `[StronglyTypedIdDefaults]` to set all of these. For example, the following changes the default backing-type for all IDs to `int` \n\n```csharp\n// Set the defaults for the project\n[assembly:StronglyTypedIdDefaults(Template.Int)]\n\n[StronglyTypedId] // Uses the default 'int' template\npublic partial struct OrderId { }\n\n[StronglyTypedId] // Uses the default 'int' template\npublic partial struct UserId { } \n\n[StronglyTypedId(Template.Guid)] // Overrides the default to use 'Guid' template\npublic partial struct HostId { } \n```\n\n### Using custom templates\n\nIn addition to the built-in templates, you can provide your _own_ templates for use with strongly typed IDs. To do this, do the following:\n\n- Add a file to your project with the name _TEMPLATE.typedid_, where `TEMPLATE` is the name of the template\n- Update the template with your desired ID content. Use `PLACEHOLDERID` inside the template. This will be replaced with the ID's name when generating the template.\n- Update the \"build action\" for the template to `AdditionalFiles` or `C# analyzer additional file` (depending on your IDE).\n\nFor example, you could create a template that provides an EF Core `ValueConverter` implementation called _guid-efcore.typedid_ like this:\n\n```csharp\npartial struct PLACEHOLDERID\n{\n    public class EfCoreValueConverter : global::Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter<PLACEHOLDERID, global::System.Guid>\n    {\n        public EfCoreValueConverter() : this(null) { }\n        public EfCoreValueConverter(global::Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints? mappingHints = null)\n            : base(\n                id => id.Value,\n                value => new PLACEHOLDERID(value),\n                mappingHints\n            ) { }\n    }\n}\n```\n\n> Note that the content of the _guid-efcore.typedid_ file is valid C#. One easy way to author these templates is to create a _.cs_ file containing the code you want for your ID, then rename your ID to `PLACEHOLDERID`, change the file extension from _.cs_ to _.typedid, and then set the build action.\n\nAfter creating a template in your project you can apply it to your IDs like this:\n\n```csharp\n// Use the built-in Guid template and also the custom template\n[StronglyTypedId(Template.Guid, \"guid-efcore\")] \npublic partial struct GuidId {}\n```\n\nThis shows another important feature: you can specify _multiple_ templates to use when generating the ID.\n\n### Using multiple templates\n\nWhen specifying the templates for an ID, you can specify\n\n- 0 or 1 built-in templates (using `Template.Guid` etc)\n- 0 or more custom templates\n\nFor example:\n\n```csharp\n[StronglyTypedId] // Use the default templates\npublic partial struct MyDefaultId {}\n\n[StronglyTypedId(Template.Guid)] // Use a built-in template only\npublic partial struct MyId1 {}\n\n[StronglyTypedId(\"my-guid\")] // Use a custom template only\npublic partial struct MyId2 {}\n\n[StronglyTypedId(\"my-guid\", \"guid-efcore\")] // Use multiple custom templates\npublic partial struct MyId2 {}\n\n[StronglyTypedId(Template.Guid, \"guid-efcore\")] // Use a built-in template _and_ a custom template\npublic partial struct MyId3 {}\n\n// Use a built-in template _and_ multiple custom template\n[StronglyTypedId(Template.Guid, \"guid-efcore\", \"guid-dapper\")]\npublic partial struct MyId4 {}\n```\n\nSimilarly, for the optional `[StronglyTypedIdDefaults]` assembly attribute, which defines the _default_ templates to use when you use the raw `[StronglyTypedId]` attribute, you use a combination of built-in and/or custom templates:\n\n```csharp\n//⚠ You can only use _one_ of these in your project, they're all shown here for comparison\n\n[assembly:StronglyTypedIdDefaults(Template.Guid)] // Use a built-in template only\n\n[assembly:StronglyTypedIdDefaults(\"my-guid\")] // Use a custom template only\n\n[assembly:StronglyTypedIdDefaults(\"my-guid\", \"guid-efcore\")] // Use multiple custom templates\n\n[assembly:StronglyTypedIdDefaults(Template.Guid, \"guid-efcore\")] // Use a built-in template _and_ a custom template\n\n// Use a built-in template _and_ multiple custom template\n[assembly:StronglyTypedIdDefaults(Template.Guid, \"guid-efcore\", \"guid-dapper\")]\n\n[StronglyTypedId] // Uses whatever templates were specified!\npublic partial struct MyDefaultId {}\n```\n\nTo simplify the creation of templates, the _StronglyTypedId_ package includes a code-fix provider to generate a template.\n\n## Creating a custom template with the Roslyn CodeFix provider\n\nAs well as the source generator, the _StronglyTypedId_ NuGet package includes a CodeFix provider that looks for cases where you have specified a custom template that the source generator cannot find. For example, in the following code,the `\"some-int\"` template does not yet exist:\n\n```csharp\n[StronglyTypedId(\"some-int\")] // does not exist\npublic partial struct MyStruct { }\n```\n\nIn the IDE, you can see the generator has marked this as an error:\n\n![An error is shown when the template does not exist](https://github.com/andrewlock/StronglyTypedId/assets/18755388/2a0ed4ce-0c0b-4508-b2c0-46ba7b756b8e)\n\nThe image above also shows that there's a CodeFix action available. Clicking the action reveals the possible fix: **Add some-int.typedid template to the project**, and shows a preview of the file that will be added:\n\n![Showing the CodeFix in action, suggesting you can add a project](https://github.com/andrewlock/StronglyTypedId/assets/18755388/ffd62acd-3ea9-448b-adc7-5255cae651c3)\n\nChoosing this option will add the template to your project. \n\n> Unfortunately, [due to limitations with the Roslyn APIs](https://github.com/dotnet/roslyn/issues/4655), it's not possible to add the new template with the required **AdditionalFiles**/**C# analyzer additional file** build action already set. Until you change the build-action, the error will remain on your `[StronglyTypedId]` attribute. \n\nRight-click the newly-added template, choose **Properties**, and change the **Build Action** to either **C# analyzer additional file** (Visual Studio 2022) or **AdditionalFiles** (JetBrains Rider). The source generator will then detect your template and the error will disappear. \n\nThe CodeFix provider does a basic check against the name of the template you're trying to create. If it includes `int`, `long`, or `string`, the template it creates will be based on one of those backing types. Otherwise, the template is based on a `Guid` backing type.\n\nOnce the template is created, you're free to edit it as required.\n\n## \"Community\" templates package _StronglyTypedId.Templates_\n\nThe \"template-based\" design of StronglyTypedId is intended to make it easy to get started, while also giving you the flexibility to customise your IDs to your needs.\n\nTo make it easier to share templates with multiple people, and optional _StronglyTypedId.Templates_ NuGet package is available that includes various converters and other backing types. To use these templates, add the _StronglyTypedId.Templates_ package to your project:\n\n```bash\ndotnet add package StronglyTypedId.Templates --version 1.0.0-beta08\n```\n\nYou will then be able to reference any of the templates it includes. This includes \"complete\" implementations, including multiple converters, for various backing types:\n\n\n- `guid-full`\n- `int-full`\n- `long-full`\n- `string-full`\n- `nullablestring-full`\n- `newid-full`\n\n\nIt also includes \"standalone\" EF Core, Dapper, and Newtonsoft JSON converter templates to enhance the `Guid`/`int`/`long`/`string` built-in templates. For example\n\n- Templates for use with `Template.Guid`\n  - `guid-dapper` \n  - `guid-efcore`\n  - `guid-newtonsoftjson`\n- Templates for use with `Template.Int`\n  - `int-dapper`\n  - `int-efcore`\n  - `int-newtonsoftjson`\n- Templates for use with `Template.Long`\n  - `long-dapper`\n  - `long-efcore`\n  - `long-newtonsoftjson`\n- Templates for use with `Template.String`\n  - `string-dapper`\n  - `string-efcore`\n  - `string-newtonsoftjson`\n\nFor the full list of available templates, [see GitHub](https://github.com/andrewlock/StronglyTypedId/tree/master/src/StronglyTypedIds.Templates). \n\nYou can also create your own templates package and distribute it on NuGet.\n\n## Embedding the attributes in your project\n\nBy default, the `[StronglyTypedId]` attributes referenced in your application are contained in an external dll. It is also possible to embed the attributes directly in your project, so they appear in the dll when your project is built. If you wish to do this, you must do two things:\n\n1. Define the MSBuild constant `STRONGLY_TYPED_ID_EMBED_ATTRIBUTES`. This ensures the attributes are embedded in your project\n2. Add `compile` to the list of excluded assets in your `<PackageReference>` element. This ensures the attributes in your project are referenced, instead of the _StronglyTypedId.Attributes.dll_ library.\n\nYour project file should look something like this:\n\n```xml\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net6.0</TargetFramework>\n    <!--  Define the MSBuild constant    -->\n    <DefineConstants>STRONGLY_TYPED_ID_EMBED_ATTRIBUTES</DefineConstants>\n  </PropertyGroup>\n\n  <!-- Add the package -->\n  <PackageReference Include=\"StronglyTypedId\" Version=\"1.0.0-beta08\" \n                    PrivateAssets=\"all\"\n                    ExcludeAssets=\"compile;runtime\" />\n<!--                               ☝ Add compile to the list of excluded assets. -->\n\n</Project>\n```\n\n## Preserving usages of the `[StronglyTypedId]` attribute\n\nThe `[StronglyTypedId]` and `[StronglyTypedIdDefaults]` attributes are decorated with the `[Conditional]` attribute, [so their usage will not appear in the build output of your project](https://andrewlock.net/conditional-compilation-for-ignoring-method-calls-with-the-conditionalattribute/#applying-the-conditional-attribute-to-classes). If you use reflection at runtime on one of your IDs, you will not find `[StronglyTypedId]` in the list of custom attributes.\n\nIf you wish to preserve these attributes in the build output, you can define the `STRONGLY_TYPED_ID_USAGES` MSBuild variable. Note that this means your project will have a runtime-dependency on _StronglyTypedId.Attributes.dll_ so you need to ensure this is included in your build output.\n\n```xml\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net6.0</TargetFramework>\n    <!--  Define the MSBuild constant to preserve usages   -->\n    <DefineConstants>STRONGLY_TYPED_ID_USAGES</DefineConstants>\n  </PropertyGroup>\n\n  <!-- Add the package -->\n  <PackageReference Include=\"StronglyTypedId\" Version=\"1.0.0-beta08\" PrivateAssets=\"all\" />\n  <!--              ☝ You must not exclude the runtime assets in this case -->\n\n</Project>\n```\n\n## Error CS0436 and [InternalsVisibleTo]\n\n> In the latest version of StronglyTypedId, you should not experience error CS0436 by default. \n\nIn previous versions of the StronglyTypedId generator, the `[StronglyTypedId]` attributes were added to your compilation as `internal` attributes by default. If you added the source generator package to multiple projects, and used the `[InternalsVisibleTo]` attribute, you could experience errors when you build:\n\n```bash\nwarning CS0436: The type 'StronglyTypedIdImplementations' in 'StronglyTypedIds\\StronglyTypedIds.StronglyTypedIdGenerator\\StronglyTypedIdImplementations.cs' conflicts with the imported type 'StronglyTypedIdImplementations' in 'MyProject, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.\n```\n\nIn the latest version of _StronglyTypedId_, the attributes are not embedded by default, so you should not experience this problem. If you see this error, compare your installation to the examples in the installation guide."
        },
        {
          "name": "StronglyTypedId.sln",
          "type": "blob",
          "size": 11.9140625,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 16\nVisualStudioVersion = 16.0.28803.352\nMinimumVisualStudioVersion = 15.0.26124.0\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"src\", \"src\", \"{EE1258BD-3422-4F55-B9CF-B4D6C95DAD68}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"test\", \"test\", \"{D1907D86-8FFC-4178-A3DB-0ADBDD282C64}\"\n\tProjectSection(SolutionItems) = preProject\n\t\ttest\\IntegrationLibraries.props = test\\IntegrationLibraries.props\n\tEndProjectSection\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{0C4F0391-8A5A-4225-B356-01EFA94672AB}\"\n\tProjectSection(SolutionItems) = preProject\n\t\tDirectory.Build.props = Directory.Build.props\n\t\tREADME.md = README.md\n\t\treleasenotes.props = releasenotes.props\n\t\tversion.props = version.props\n\tEndProjectSection\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"StronglyTypedIds\", \"src\\StronglyTypedIds\\StronglyTypedIds.csproj\", \"{9C0F3A36-ED47-4D0F-B736-EFC559C9E2DA}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"StronglyTypedIds.Tests\", \"test\\StronglyTypedIds.Tests\\StronglyTypedIds.Tests.csproj\", \"{00B5ED3F-827D-41CD-9AF2-A9A20A6604E1}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"StronglyTypedIds.IntegrationTests\", \"test\\StronglyTypedIds.IntegrationTests\\StronglyTypedIds.IntegrationTests.csproj\", \"{09F7364F-8CE9-4E9D-9BB7-B4CEBF682904}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"_build\", \"build\\_build.csproj\", \"{E13FB452-2D47-4719-8BAA-7B695D79AF3A}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"StronglyTypedIds.Attributes\", \"src\\StronglyTypedIds.Attributes\\StronglyTypedIds.Attributes.csproj\", \"{F25F6E67-E62A-4075-86CF-4C4EDD7E4883}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"StronglyTypedIds.Nuget.IntegrationTests\", \"test\\StronglyTypedIds.Nuget.IntegrationTests\\StronglyTypedIds.Nuget.IntegrationTests.csproj\", \"{A7355210-7DDC-4968-84B7-79002113EA6E}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"StronglyTypedIds.Nuget.Attributes.IntegrationTests\", \"test\\StronglyTypedIds.Nuget.Attributes.IntegrationTests\\StronglyTypedIds.Nuget.Attributes.IntegrationTests.csproj\", \"{19A9B323-8C0B-4D1B-A20C-8CECFFD37F23}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"StronglyTypedIds.Templates\", \"src\\StronglyTypedIds.Templates\\StronglyTypedIds.Templates.csproj\", \"{336D7EE4-90BA-4BFC-99F6-D70B8D494E8C}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"StronglyTypedIds.IntegrationTests.Types\", \"test\\StronglyTypedIds.IntegrationTests.Types\\StronglyTypedIds.IntegrationTests.Types.csproj\", \"{A5804404-E5A5-4F05-86E2-B2A11D370498}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"StronglyTypedIds.IntegrationTests.ExternalIds\", \"test\\StronglyTypedIds.IntegrationTests.ExternalIds\\StronglyTypedIds.IntegrationTests.ExternalIds.csproj\", \"{07875BB0-EFEE-4F90-AAB8-4B11F78C8047}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tDebug|x64 = Debug|x64\n\t\tDebug|x86 = Debug|x86\n\t\tRelease|Any CPU = Release|Any CPU\n\t\tRelease|x64 = Release|x64\n\t\tRelease|x86 = Release|x86\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{E13FB452-2D47-4719-8BAA-7B695D79AF3A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{E13FB452-2D47-4719-8BAA-7B695D79AF3A}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{9C0F3A36-ED47-4D0F-B736-EFC559C9E2DA}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{9C0F3A36-ED47-4D0F-B736-EFC559C9E2DA}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{9C0F3A36-ED47-4D0F-B736-EFC559C9E2DA}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{9C0F3A36-ED47-4D0F-B736-EFC559C9E2DA}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{9C0F3A36-ED47-4D0F-B736-EFC559C9E2DA}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{9C0F3A36-ED47-4D0F-B736-EFC559C9E2DA}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{9C0F3A36-ED47-4D0F-B736-EFC559C9E2DA}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{9C0F3A36-ED47-4D0F-B736-EFC559C9E2DA}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{9C0F3A36-ED47-4D0F-B736-EFC559C9E2DA}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{9C0F3A36-ED47-4D0F-B736-EFC559C9E2DA}.Release|x64.Build.0 = Release|Any CPU\n\t\t{9C0F3A36-ED47-4D0F-B736-EFC559C9E2DA}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{9C0F3A36-ED47-4D0F-B736-EFC559C9E2DA}.Release|x86.Build.0 = Release|Any CPU\n\t\t{00B5ED3F-827D-41CD-9AF2-A9A20A6604E1}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{00B5ED3F-827D-41CD-9AF2-A9A20A6604E1}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{00B5ED3F-827D-41CD-9AF2-A9A20A6604E1}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{00B5ED3F-827D-41CD-9AF2-A9A20A6604E1}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{00B5ED3F-827D-41CD-9AF2-A9A20A6604E1}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{00B5ED3F-827D-41CD-9AF2-A9A20A6604E1}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{00B5ED3F-827D-41CD-9AF2-A9A20A6604E1}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{00B5ED3F-827D-41CD-9AF2-A9A20A6604E1}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{00B5ED3F-827D-41CD-9AF2-A9A20A6604E1}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{00B5ED3F-827D-41CD-9AF2-A9A20A6604E1}.Release|x64.Build.0 = Release|Any CPU\n\t\t{00B5ED3F-827D-41CD-9AF2-A9A20A6604E1}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{00B5ED3F-827D-41CD-9AF2-A9A20A6604E1}.Release|x86.Build.0 = Release|Any CPU\n\t\t{09F7364F-8CE9-4E9D-9BB7-B4CEBF682904}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{09F7364F-8CE9-4E9D-9BB7-B4CEBF682904}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{09F7364F-8CE9-4E9D-9BB7-B4CEBF682904}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{09F7364F-8CE9-4E9D-9BB7-B4CEBF682904}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{09F7364F-8CE9-4E9D-9BB7-B4CEBF682904}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{09F7364F-8CE9-4E9D-9BB7-B4CEBF682904}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{09F7364F-8CE9-4E9D-9BB7-B4CEBF682904}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{09F7364F-8CE9-4E9D-9BB7-B4CEBF682904}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{09F7364F-8CE9-4E9D-9BB7-B4CEBF682904}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{09F7364F-8CE9-4E9D-9BB7-B4CEBF682904}.Release|x64.Build.0 = Release|Any CPU\n\t\t{09F7364F-8CE9-4E9D-9BB7-B4CEBF682904}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{09F7364F-8CE9-4E9D-9BB7-B4CEBF682904}.Release|x86.Build.0 = Release|Any CPU\n\t\t{F25F6E67-E62A-4075-86CF-4C4EDD7E4883}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{F25F6E67-E62A-4075-86CF-4C4EDD7E4883}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{F25F6E67-E62A-4075-86CF-4C4EDD7E4883}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{F25F6E67-E62A-4075-86CF-4C4EDD7E4883}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{F25F6E67-E62A-4075-86CF-4C4EDD7E4883}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{F25F6E67-E62A-4075-86CF-4C4EDD7E4883}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{F25F6E67-E62A-4075-86CF-4C4EDD7E4883}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{F25F6E67-E62A-4075-86CF-4C4EDD7E4883}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{F25F6E67-E62A-4075-86CF-4C4EDD7E4883}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{F25F6E67-E62A-4075-86CF-4C4EDD7E4883}.Release|x64.Build.0 = Release|Any CPU\n\t\t{F25F6E67-E62A-4075-86CF-4C4EDD7E4883}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{F25F6E67-E62A-4075-86CF-4C4EDD7E4883}.Release|x86.Build.0 = Release|Any CPU\n\t\t{A7355210-7DDC-4968-84B7-79002113EA6E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{A7355210-7DDC-4968-84B7-79002113EA6E}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{A7355210-7DDC-4968-84B7-79002113EA6E}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{A7355210-7DDC-4968-84B7-79002113EA6E}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{A7355210-7DDC-4968-84B7-79002113EA6E}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{A7355210-7DDC-4968-84B7-79002113EA6E}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{19A9B323-8C0B-4D1B-A20C-8CECFFD37F23}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{19A9B323-8C0B-4D1B-A20C-8CECFFD37F23}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{19A9B323-8C0B-4D1B-A20C-8CECFFD37F23}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{19A9B323-8C0B-4D1B-A20C-8CECFFD37F23}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{19A9B323-8C0B-4D1B-A20C-8CECFFD37F23}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{19A9B323-8C0B-4D1B-A20C-8CECFFD37F23}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{336D7EE4-90BA-4BFC-99F6-D70B8D494E8C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{336D7EE4-90BA-4BFC-99F6-D70B8D494E8C}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{336D7EE4-90BA-4BFC-99F6-D70B8D494E8C}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{336D7EE4-90BA-4BFC-99F6-D70B8D494E8C}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{336D7EE4-90BA-4BFC-99F6-D70B8D494E8C}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{336D7EE4-90BA-4BFC-99F6-D70B8D494E8C}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{336D7EE4-90BA-4BFC-99F6-D70B8D494E8C}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{336D7EE4-90BA-4BFC-99F6-D70B8D494E8C}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{336D7EE4-90BA-4BFC-99F6-D70B8D494E8C}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{336D7EE4-90BA-4BFC-99F6-D70B8D494E8C}.Release|x64.Build.0 = Release|Any CPU\n\t\t{336D7EE4-90BA-4BFC-99F6-D70B8D494E8C}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{336D7EE4-90BA-4BFC-99F6-D70B8D494E8C}.Release|x86.Build.0 = Release|Any CPU\n\t\t{A5804404-E5A5-4F05-86E2-B2A11D370498}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{A5804404-E5A5-4F05-86E2-B2A11D370498}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{A5804404-E5A5-4F05-86E2-B2A11D370498}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{A5804404-E5A5-4F05-86E2-B2A11D370498}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{A5804404-E5A5-4F05-86E2-B2A11D370498}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{A5804404-E5A5-4F05-86E2-B2A11D370498}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{A5804404-E5A5-4F05-86E2-B2A11D370498}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{A5804404-E5A5-4F05-86E2-B2A11D370498}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{A5804404-E5A5-4F05-86E2-B2A11D370498}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{A5804404-E5A5-4F05-86E2-B2A11D370498}.Release|x64.Build.0 = Release|Any CPU\n\t\t{A5804404-E5A5-4F05-86E2-B2A11D370498}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{A5804404-E5A5-4F05-86E2-B2A11D370498}.Release|x86.Build.0 = Release|Any CPU\n\t\t{07875BB0-EFEE-4F90-AAB8-4B11F78C8047}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{07875BB0-EFEE-4F90-AAB8-4B11F78C8047}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{07875BB0-EFEE-4F90-AAB8-4B11F78C8047}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{07875BB0-EFEE-4F90-AAB8-4B11F78C8047}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{07875BB0-EFEE-4F90-AAB8-4B11F78C8047}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{07875BB0-EFEE-4F90-AAB8-4B11F78C8047}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{07875BB0-EFEE-4F90-AAB8-4B11F78C8047}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{07875BB0-EFEE-4F90-AAB8-4B11F78C8047}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{07875BB0-EFEE-4F90-AAB8-4B11F78C8047}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{07875BB0-EFEE-4F90-AAB8-4B11F78C8047}.Release|x64.Build.0 = Release|Any CPU\n\t\t{07875BB0-EFEE-4F90-AAB8-4B11F78C8047}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{07875BB0-EFEE-4F90-AAB8-4B11F78C8047}.Release|x86.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{9C0F3A36-ED47-4D0F-B736-EFC559C9E2DA} = {EE1258BD-3422-4F55-B9CF-B4D6C95DAD68}\n\t\t{00B5ED3F-827D-41CD-9AF2-A9A20A6604E1} = {D1907D86-8FFC-4178-A3DB-0ADBDD282C64}\n\t\t{09F7364F-8CE9-4E9D-9BB7-B4CEBF682904} = {D1907D86-8FFC-4178-A3DB-0ADBDD282C64}\n\t\t{F25F6E67-E62A-4075-86CF-4C4EDD7E4883} = {EE1258BD-3422-4F55-B9CF-B4D6C95DAD68}\n\t\t{A7355210-7DDC-4968-84B7-79002113EA6E} = {D1907D86-8FFC-4178-A3DB-0ADBDD282C64}\n\t\t{19A9B323-8C0B-4D1B-A20C-8CECFFD37F23} = {D1907D86-8FFC-4178-A3DB-0ADBDD282C64}\n\t\t{336D7EE4-90BA-4BFC-99F6-D70B8D494E8C} = {EE1258BD-3422-4F55-B9CF-B4D6C95DAD68}\n\t\t{A5804404-E5A5-4F05-86E2-B2A11D370498} = {D1907D86-8FFC-4178-A3DB-0ADBDD282C64}\n\t\t{07875BB0-EFEE-4F90-AAB8-4B11F78C8047} = {D1907D86-8FFC-4178-A3DB-0ADBDD282C64}\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {8D1F0534-B8AD-4CFA-9C14-CBC757BCB1E1}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "build.cmd",
          "type": "blob",
          "size": 0.2021484375,
          "content": ":; set -eo pipefail\n:; SCRIPT_DIR=$(cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd)\n:; ${SCRIPT_DIR}/build.sh \"$@\"\n:; exit $?\n\n@ECHO OFF\npowershell -ExecutionPolicy ByPass -NoProfile -File \"%~dp0build.ps1\" %*\n"
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 3.1484375,
          "content": "[CmdletBinding()]\nParam(\n    [Parameter(Position=0,Mandatory=$false,ValueFromRemainingArguments=$true)]\n    [string[]]$BuildArguments\n)\n\nWrite-Output \"PowerShell $($PSVersionTable.PSEdition) version $($PSVersionTable.PSVersion)\"\n\nSet-StrictMode -Version 2.0; $ErrorActionPreference = \"Stop\"; $ConfirmPreference = \"None\"; trap { Write-Error $_ -ErrorAction Continue; exit 1 }\n$PSScriptRoot = Split-Path $MyInvocation.MyCommand.Path -Parent\n\n###########################################################################\n# CONFIGURATION\n###########################################################################\n\n$BuildProjectFile = \"$PSScriptRoot\\build\\_build.csproj\"\n$TempDirectory = \"$PSScriptRoot\\\\.nuke\\temp\"\n\n$DotNetGlobalFile = \"$PSScriptRoot\\\\global.json\"\n$DotNetInstallUrl = \"https://dot.net/v1/dotnet-install.ps1\"\n$DotNetChannel = \"STS\"\n\n$env:DOTNET_CLI_TELEMETRY_OPTOUT = 1\n$env:DOTNET_NOLOGO = 1\n\n###########################################################################\n# EXECUTION\n###########################################################################\n\nfunction ExecSafe([scriptblock] $cmd) {\n    & $cmd\n    if ($LASTEXITCODE) { exit $LASTEXITCODE }\n}\n\n# If dotnet CLI is installed globally and it matches requested version, use for execution\nif ($null -ne (Get-Command \"dotnet\" -ErrorAction SilentlyContinue) -and `\n     $(dotnet --version) -and $LASTEXITCODE -eq 0) {\n    $env:DOTNET_EXE = (Get-Command \"dotnet\").Path\n}\nelse {\n    # Download install script\n    $DotNetInstallFile = \"$TempDirectory\\dotnet-install.ps1\"\n    New-Item -ItemType Directory -Path $TempDirectory -Force | Out-Null\n    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n    (New-Object System.Net.WebClient).DownloadFile($DotNetInstallUrl, $DotNetInstallFile)\n\n    # If global.json exists, load expected version\n    if (Test-Path $DotNetGlobalFile) {\n        $DotNetGlobal = $(Get-Content $DotNetGlobalFile | Out-String | ConvertFrom-Json)\n        if ($DotNetGlobal.PSObject.Properties[\"sdk\"] -and $DotNetGlobal.sdk.PSObject.Properties[\"version\"]) {\n            $DotNetVersion = $DotNetGlobal.sdk.version\n        }\n    }\n\n    # Install by channel or version\n    $DotNetDirectory = \"$TempDirectory\\dotnet-win\"\n    if (!(Test-Path variable:DotNetVersion)) {\n        ExecSafe { & powershell $DotNetInstallFile -InstallDir $DotNetDirectory -Channel $DotNetChannel -NoPath }\n    } else {\n        ExecSafe { & powershell $DotNetInstallFile -InstallDir $DotNetDirectory -Version $DotNetVersion -NoPath }\n    }\n    $env:DOTNET_EXE = \"$DotNetDirectory\\dotnet.exe\"\n    $env:PATH = \"$DotNetDirectory;$env:PATH\"\n}\n\nWrite-Output \"Microsoft (R) .NET SDK version $(& $env:DOTNET_EXE --version)\"\n\nif (Test-Path env:NUKE_ENTERPRISE_TOKEN) {\n    & $env:DOTNET_EXE nuget remove source \"nuke-enterprise\" > $null\n    & $env:DOTNET_EXE nuget add source \"https://f.feedz.io/nuke/enterprise/nuget\" --name \"nuke-enterprise\" --username \"PAT\" --password $env:NUKE_ENTERPRISE_TOKEN > $null\n}\n\nExecSafe { & $env:DOTNET_EXE build $BuildProjectFile /nodeReuse:false /p:UseSharedCompilation=false -nologo -clp:NoSummary --verbosity quiet }\nExecSafe { & $env:DOTNET_EXE run --project $BuildProjectFile --no-build -- $BuildArguments }\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 2.5654296875,
          "content": "#!/usr/bin/env bash\n\nbash --version 2>&1 | head -n 1\n\nset -eo pipefail\nSCRIPT_DIR=$(cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd)\n\n###########################################################################\n# CONFIGURATION\n###########################################################################\n\nBUILD_PROJECT_FILE=\"$SCRIPT_DIR/build/_build.csproj\"\nTEMP_DIRECTORY=\"$SCRIPT_DIR//.nuke/temp\"\n\nDOTNET_GLOBAL_FILE=\"$SCRIPT_DIR//global.json\"\nDOTNET_INSTALL_URL=\"https://dot.net/v1/dotnet-install.sh\"\nDOTNET_CHANNEL=\"STS\"\n\nexport DOTNET_CLI_TELEMETRY_OPTOUT=1\nexport DOTNET_NOLOGO=1\n\n###########################################################################\n# EXECUTION\n###########################################################################\n\nfunction FirstJsonValue {\n    perl -nle 'print $1 if m{\"'\"$1\"'\": \"([^\"]+)\",?}' <<< \"${@:2}\"\n}\n\n# If dotnet CLI is installed globally and it matches requested version, use for execution\nif [ -x \"$(command -v dotnet)\" ] && dotnet --version &>/dev/null; then\n    export DOTNET_EXE=\"$(command -v dotnet)\"\nelse\n    # Download install script\n    DOTNET_INSTALL_FILE=\"$TEMP_DIRECTORY/dotnet-install.sh\"\n    mkdir -p \"$TEMP_DIRECTORY\"\n    curl -Lsfo \"$DOTNET_INSTALL_FILE\" \"$DOTNET_INSTALL_URL\"\n    chmod +x \"$DOTNET_INSTALL_FILE\"\n\n    # If global.json exists, load expected version\n    if [[ -f \"$DOTNET_GLOBAL_FILE\" ]]; then\n        DOTNET_VERSION=$(FirstJsonValue \"version\" \"$(cat \"$DOTNET_GLOBAL_FILE\")\")\n        if [[ \"$DOTNET_VERSION\" == \"\"  ]]; then\n            unset DOTNET_VERSION\n        fi\n    fi\n\n    # Install by channel or version\n    DOTNET_DIRECTORY=\"$TEMP_DIRECTORY/dotnet-unix\"\n    if [[ -z ${DOTNET_VERSION+x} ]]; then\n        \"$DOTNET_INSTALL_FILE\" --install-dir \"$DOTNET_DIRECTORY\" --channel \"$DOTNET_CHANNEL\" --no-path\n    else\n        \"$DOTNET_INSTALL_FILE\" --install-dir \"$DOTNET_DIRECTORY\" --version \"$DOTNET_VERSION\" --no-path\n    fi\n    export DOTNET_EXE=\"$DOTNET_DIRECTORY/dotnet\"\n    export PATH=\"$DOTNET_DIRECTORY:$PATH\"\nfi\n\necho \"Microsoft (R) .NET SDK version $(\"$DOTNET_EXE\" --version)\"\n\nif [[ ! -z ${NUKE_ENTERPRISE_TOKEN+x} && \"$NUKE_ENTERPRISE_TOKEN\" != \"\" ]]; then\n    \"$DOTNET_EXE\" nuget remove source \"nuke-enterprise\" &>/dev/null || true\n    \"$DOTNET_EXE\" nuget add source \"https://f.feedz.io/nuke/enterprise/nuget\" --name \"nuke-enterprise\" --username \"PAT\" --password \"$NUKE_ENTERPRISE_TOKEN\" --store-password-in-clear-text &>/dev/null || true\nfi\n\n\"$DOTNET_EXE\" build \"$BUILD_PROJECT_FILE\" /nodeReuse:false /p:UseSharedCompilation=false -nologo -clp:NoSummary --verbosity quiet\n\"$DOTNET_EXE\" run --project \"$BUILD_PROJECT_FILE\" --no-build -- \"$@\"\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.044921875,
          "content": "{\n  \"sdk\": {\n    \"allowPrerelease\": true\n  }\n}"
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 18.771484375,
          "content": null
        },
        {
          "name": "logo.xcf",
          "type": "blob",
          "size": 292.048828125,
          "content": null
        },
        {
          "name": "releasenotes.props",
          "type": "blob",
          "size": 5.85546875,
          "content": "<Project>\n  <PropertyGroup>\n    <PackageReleaseNotes Condition=\"'$(VersionPrefix)' == '1.0.0'\">\n      <![CDATA[\n\n## Changes in 1.0.0-beta08:\n\nFixes\n* Fix bug in System.Text.Json converters that could cause errors when used with source generators\n\n## Changes in 1.0.0-beta07:\n\n⚠ WARNING ⚠ \nThis version contains a fundamental breaking change in how you define your IDs \n\nBreaking Changes:\n* This release contains a fundamental change in how you define your IDs\n  * For details see the related issue (https://github.com/andrewlock/StronglyTypedId/issues/102), the PR (https://github.com/andrewlock/StronglyTypedId/pull/117), or the README\n  * The \"options\" enums `StronglyTypedIdBackingType`, `StronglyTypedIdConverter`, and `StronglyTypedIdImplementations` have been removed.\n  * Instead, you simply choose one of 4 different built-in templates, or use a custom template.\n\nFeatures\n* Adds `[GeneratedCode]` attribute to generated IDs (Fixes https://github.com/andrewlock/StronglyTypedId/issues/57)\n* Add support for parsing `SCOPE_IDENTITY()` and `@@IDENTITY` in MSSQL with `DapperTypeHandler` (Fixes https://github.com/andrewlock/StronglyTypedId/issues/118)\n* Fix exception being thrown when deserializing nullable strongly-typed id backed by string (Fixes https://github.com/andrewlock/StronglyTypedId/issues/83)\n* Allow creating multiple IDs with the same name in a project (Fixes https://github.com/andrewlock/StronglyTypedId/issues/74, thanks @jo-goro https://github.com/andrewlock/StronglyTypedId/pull/77!)\n\n## Changes in 1.0.0-beta06:\n\n* Added support for Masstransit.NewId (thanks @Khitiara!) Fixes https://github.com/andrewlock/StronglyTypedId/issues/51\n* Added parameterless constructor to EF Core ValueConverts for compatibility with global conventions. Fixes https://github.com/andrewlock/StronglyTypedId/issues/50\n* Added `#pragma warning disable 1591` to generated code to avoid warning CS1591. Fixes https://github.com/andrewlock/StronglyTypedId/issues/47\n\n## Changes in 1.0.0-beta05:\n\nBreaking Changes:\n* Removed StronglyTypedId.Attributes NuGet package.\n* The attributes are no longer embed in your project by default, instead it will use the external dll. You can re-enable the embedding by setting `STRONGLY_TYPED_ID_EMBED_ATTRIBUTES`.\n\nNew Features:\n\n* Improved approach to handling [InternalsVisibleTo] issues, by embedding the StronglyTypedId.Attributes.dll in the NuGet package directly.\n\n## Changes in 1.0.0-beta04:\n\nNew Features:\n\n* Added support for IDs inside nested classes/records/structs (Fixes https://github.com/andrewlock/StronglyTypedId/issues/40)\n\n## Changes in 1.0.0-beta03:\n\nBreaking Changes:\n\n* Converted to use .NET 6's incremental source generators. This should provide performance improvements, but it requires using the .NET 6 SDK.\n\nBug fixes:\n\n* Fixed problem deserializing nullable strongly-typed IDs with Newtonsoft.Json (https://github.com/andrewlock/StronglyTypedId/issues/36)\n\nNew Features:\n\n* To support scenarios in which [InternalsVisibleTo] causes duplicate reference issues with the marker attributes, you can set the msbuild constant `STRONGLY_TYPED_ID_EXCLUDE_ATTRIBUTES` to exclude these from build output. You must then reference the StronglyTypedId.Attributes project as well, which contains the marker attributes.\n* By default, the marker attributes are decorated with the `[Conditional]` attribute, so they will not appear on your IDs. If you need these to persist, define the msbuild constant `STRONGLY_TYPED_ID_USAGES`.\n\n## Changes in 1.0.0-beta02:\n\nBug fixes\n\n* Adds auto-generated attributes and enums as `internal` to help avoid referencing issues\n\n## Breaking Changes\n\n* `StronglyTypedIds` namespace is required. In version 0.x of the library, the `[StronglyTypedId]` attribute was in the global namespace. In version 1.x, the attribute is in the `StronglyTypedIds` namespace, so you must add `namespace StronglyTypedIds;`.\n* The properties exposed by `StronglyTypedIds` have changed: there is no longer a `generateJsonConverter` property. Instead, this is infered based on the `StronglyTypedIdConverters` flags provided.\n* The `String` backing typed ID will throw if you call the constructor with a `null` value\n\n## New Features\n\n* The attributes can now auto-generate additional converter types such as EF Core `ValueConverter` and Dapper `TypeHandler`, as described in [my blog posts](https://andrewlock.net/series/using-strongly-typed-entity-ids-to-avoid-primitive-obsession/). These are optional flags on the `converters` property.\n* Made interface implementations (`IEquatable<T>` and `IComparable<T>` currently) optional. This is to potentially support additional interfaces in future versions.\n* Added a `NullableString` backing type. Due to the behaviour of `struct`s in c#, the `String` backing type ID _may_ still be null, but you can't explicitly call the constructor with a null value. In contrast, you can do this with the `NullableString` backing type.\n* Added a `[StronglyTypedIdDefaults]` attribute to set default values for all `[StronglyTypedId]` attributes in your project. This is useful if you want to customise all the attributes, for example, if you want to generate additional converters by default. You can still override all the properties of a `[StronglyTypedId]` instance.\n\n## Bug Fixes\n\n* Some converters had incorrect implementations, such as in ([#26](https://github.com/andrewlock/StronglyTypedId/issues/24)). These have been addressed in version 1.x.\n* Better null handling has been added for the `String` backing type, handling issues such as [#32](https://github.com/andrewlock/StronglyTypedId/issues/32).\n* The code is marked as auto generated, to avoid errors such as #CS1591 as described in [#27](https://github.com/andrewlock/StronglyTypedId/issues/27)\n\n]]>\n    </PackageReleaseNotes>\n     <PackageReleaseNotes>$(PackageReleaseNotes)\nSee $(PackageProjectUrl)/blob/master/CHANGELOG.md#v$(VersionPrefix.Replace('.','')) for more details.</PackageReleaseNotes>\n  </PropertyGroup>\n</Project>"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.props",
          "type": "blob",
          "size": 0.33203125,
          "content": "<Project>\n  <PropertyGroup>\n    <VersionPrefix>1.0.0</VersionPrefix>\n    <VersionSuffix>beta08</VersionSuffix>\n    <PackageVersion Condition=\"'$(VersionSuffix)' == ''\">$(VersionPrefix)</PackageVersion>\n    <PackageVersion Condition=\"'$(VersionSuffix)' != ''\">$(VersionPrefix)-$(VersionSuffix)</PackageVersion>\n  </PropertyGroup>\n</Project>\n"
        }
      ]
    }
  ]
}