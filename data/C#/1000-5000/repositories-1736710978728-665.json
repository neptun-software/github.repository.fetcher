{
  "metadata": {
    "timestamp": 1736710978728,
    "page": 665,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "TylerBrinkley/Enums.NET",
      "stars": 1757,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.458984375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.1337890625,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n## TODO: Comment the next line if you want to checkin your\n## web deploy settings but do note that will include unencrypted\n## passwords\n#*.pubxml\n\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# LightSwitch generated files\nGeneratedArtifacts/\n_Pvt_Extensions/\nModelManifest.xml\n/Working\n/Src/Enums.NET/Enums.NET.project.lock.json\n*project.lock.json\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0556640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Tyler Brinkley\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.5546875,
          "content": "![GitHub last commit (master)](https://img.shields.io/github/last-commit/TylerBrinkley/Enums.NET/master.svg?logo=github)\n[![NuGet Version](https://img.shields.io/nuget/v/Enums.NET.svg?logo=nuget)](https://www.nuget.org/packages/Enums.NET/)\n[![NuGet Downloads](https://img.shields.io/nuget/dt/Enums.NET.svg?logo=nuget)](https://www.nuget.org/packages/Enums.NET/)\n[![Build status](https://img.shields.io/azure-devops/build/tydude4christ/Public/2.svg?logo=azuredevops)](https://dev.azure.com/tydude4christ/Public/_build?definitionId=2)\n\n## v5.0 Changes\nRemoved `Boolean` enum support and dropped support for net45 and bumped it to net461 due to updating dependencies. Also dropped support for netstandard 1.x tfms for similar reasons. Added a net7 target which utilizes the built-in generic number interfaces. Also added an `EnumValidatorAttribute` base class since generic attributes are now supported.\n\n## v4.0 Changes\nRemoved `NonGenericEnums`, `NonGenericFlagEnums`, `UnsafeEnums`, and `UnsafeFlagEnums` classes which were deprecated in v3.0 and also removed all other deprecated methods in an effort to slim the library size down. It is recommended if upgrading from 2.x and below to update to 3.x first and follow the warnings to migrate any code that's using deprecated methods and classes. Also, a dependency on the `System.Runtime.CompilerServices.Unsafe` package was added for the .NET 4.5 target in order to remove a build dependency on `Fody`.\n\n# Enums.NET\nEnums.NET is a high-performance type-safe .NET enum utility library which provides many operations as convenient extension methods. It is compatible with .NET Framework 4.6.1+ and .NET Standard 2.0+.\n\n## What's wrong with `System.Enum`\n1. Support for flag enums is limited to just the `HasFlag` method which isn't type-safe~, is inefficient,~ and is ambiguous as to whether it determines if the value has all or any of the specified flags. It's all by the way.\n2. Most of its methods use reflection on each call without any sort of caching causing poor performance.\n3. The pattern to associate extra data with an enum member using `Attribute`s is not supported and instead requires users to manually retrieve the `Attribute`s via reflection. This pattern is commonly used on enum members with the `DescriptionAttribute`, `EnumMemberAttribute`, and `DisplayAttribute`.\n\nEnums.NET solves all of these issues and more.\n\n## Enums.NET Demo\n\n```c#\nusing System;\nusing System.Linq;\nusing EnumsNET;\nusing Xunit;\nusing DescriptionAttribute = System.ComponentModel.DescriptionAttribute;\n\nclass EnumsNETDemo\n{\n    // Enum definitions at bottom\n\n    [Fact]\n    public void Enumerate()\n    {\n        var count = 0;\n        // Retrieves all enum members in increasing value order\n        foreach (var member in Enums.GetMembers<NumericOperator>())\n        {\n            NumericOperator value = member.Value;\n            string name = member.Name;\n            AttributeCollection attributes = member.Attributes;\n            ++count;\n        }\n        Assert.Equal(8, count);\n\n        count = 0;\n        // Retrieves distinct values in increasing value order\n        foreach (var value in Enums.GetValues<NumericOperator>(EnumMemberSelection.Distinct))\n        {\n            string name = value.GetName();\n            AttributeCollection attributes = value.GetAttributes();\n            ++count;\n        }\n        Assert.Equal(6, count);\n    }\n\n    [Fact]\n    public void FlagEnumOperations()\n    {\n        // HasAllFlags\n        Assert.True((DaysOfWeek.Monday | DaysOfWeek.Wednesday | DaysOfWeek.Friday).HasAllFlags(DaysOfWeek.Monday | DaysOfWeek.Wednesday));\n        Assert.False(DaysOfWeek.Monday.HasAllFlags(DaysOfWeek.Monday | DaysOfWeek.Wednesday));\n\n        // HasAnyFlags\n        Assert.True(DaysOfWeek.Monday.HasAnyFlags(DaysOfWeek.Monday | DaysOfWeek.Wednesday));\n        Assert.False((DaysOfWeek.Monday | DaysOfWeek.Wednesday).HasAnyFlags(DaysOfWeek.Friday));\n\n        // CombineFlags ~ bitwise OR\n        Assert.Equal(DaysOfWeek.Monday | DaysOfWeek.Wednesday, DaysOfWeek.Monday.CombineFlags(DaysOfWeek.Wednesday));\n        Assert.Equal(DaysOfWeek.Monday | DaysOfWeek.Wednesday | DaysOfWeek.Friday, FlagEnums.CombineFlags(DaysOfWeek.Monday, DaysOfWeek.Wednesday, DaysOfWeek.Friday));\n\n        // CommonFlags ~ bitwise AND\n        Assert.Equal(DaysOfWeek.Monday, DaysOfWeek.Monday.CommonFlags(DaysOfWeek.Monday | DaysOfWeek.Wednesday));\n        Assert.Equal(DaysOfWeek.None, DaysOfWeek.Monday.CommonFlags(DaysOfWeek.Wednesday));\n\n        // RemoveFlags\n        Assert.Equal(DaysOfWeek.Wednesday, (DaysOfWeek.Monday | DaysOfWeek.Wednesday).RemoveFlags(DaysOfWeek.Monday));\n        Assert.Equal(DaysOfWeek.None, (DaysOfWeek.Monday | DaysOfWeek.Wednesday).RemoveFlags(DaysOfWeek.Monday | DaysOfWeek.Wednesday));\n\n        // GetFlags, splits out the individual flags in increasing significance bit order\n        var flags = DaysOfWeek.Weekend.GetFlags();\n        Assert.Equal(2, flags.Count);\n        Assert.Equal(DaysOfWeek.Sunday, flags[0]);\n        Assert.Equal(DaysOfWeek.Saturday, flags[1]);\n    }\n\n    [Fact]\n    public void AsString()\n    {\n        // AsString, equivalent to ToString\n        Assert.Equal(\"Equals\", NumericOperator.Equals.AsString());\n        Assert.Equal(\"-1\", ((NumericOperator)(-1)).AsString());\n\n        // GetName\n        Assert.Equal(\"Equals\", NumericOperator.Equals.GetName());\n        Assert.Null(((NumericOperator)(-1)).GetName());\n\n        // Get description\n        Assert.Equal(\"Is\", NumericOperator.Equals.AsString(EnumFormat.Description));\n        Assert.Null(NumericOperator.LessThan.AsString(EnumFormat.Description));\n\n        // Get description if applied, otherwise the name\n        Assert.Equal(\"LessThan\", NumericOperator.LessThan.AsString(EnumFormat.Description, EnumFormat.Name));\n    }\n\n    [Fact]\n    public void Validate()\n    {\n        // Standard Enums, checks is defined\n        Assert.True(NumericOperator.LessThan.IsValid());\n        Assert.False(((NumericOperator)20).IsValid());\n\n        // Flag Enums, checks is valid flag combination or is defined\n        Assert.True((DaysOfWeek.Sunday | DaysOfWeek.Wednesday).IsValid());\n        Assert.False((DaysOfWeek.Sunday | DaysOfWeek.Wednesday | ((DaysOfWeek)(-1))).IsValid());\n\n        // Custom validation through IEnumValidatorAttribute<TEnum>\n        Assert.True(DayType.Weekday.IsValid());\n        Assert.True((DayType.Weekday | DayType.Holiday).IsValid());\n        Assert.False((DayType.Weekday | DayType.Weekend).IsValid());\n    }\n\n    [Fact]\n    public void CustomEnumFormat()\n    {\n        EnumFormat symbolFormat = Enums.RegisterCustomEnumFormat(member => member.Attributes.Get<SymbolAttribute>()?.Symbol);\n        Assert.Equal(\">\", NumericOperator.GreaterThan.AsString(symbolFormat));\n        Assert.Equal(NumericOperator.LessThan, Enums.Parse<NumericOperator>(\"<\", ignoreCase: false, symbolFormat));\n    }\n\n    [Fact]\n    public void Attributes()\n    {\n        Assert.Equal(\"!=\", NumericOperator.NotEquals.GetAttributes().Get<SymbolAttribute>().Symbol);\n        Assert.True(Enums.GetMember<NumericOperator>(\"GreaterThanOrEquals\").Attributes.Has<PrimaryEnumMemberAttribute>());\n        Assert.False(NumericOperator.LessThan.GetAttributes().Has<DescriptionAttribute>());\n    }\n\n    [Fact]\n    public void Parsing()\n    {\n        Assert.Equal(NumericOperator.GreaterThan, Enums.Parse<NumericOperator>(\"GreaterThan\"));\n        Assert.Equal(NumericOperator.NotEquals, Enums.Parse<NumericOperator>(\"1\"));\n        Assert.Equal(NumericOperator.Equals, Enums.Parse<NumericOperator>(\"Is\", ignoreCase: false, EnumFormat.Description));\n\n        Assert.Equal(DaysOfWeek.Monday | DaysOfWeek.Wednesday, Enums.Parse<DaysOfWeek>(\"Monday, Wednesday\"));\n        Assert.Equal(DaysOfWeek.Tuesday | DaysOfWeek.Thursday, FlagEnums.ParseFlags<DaysOfWeek>(\"Tuesday | Thursday\", ignoreCase: false, delimiter: \"|\"));\n    }\n\n    enum NumericOperator\n    {\n        [Symbol(\"=\"), Description(\"Is\")]\n        Equals,\n        [Symbol(\"!=\"), Description(\"Is not\")]\n        NotEquals,\n        [Symbol(\"<\")]\n        LessThan,\n        [Symbol(\">=\"), PrimaryEnumMember] // PrimaryEnumMember indicates enum member as primary duplicate for extension methods\n        GreaterThanOrEquals,\n        NotLessThan = GreaterThanOrEquals,\n        [Symbol(\">\")]\n        GreaterThan,\n        [Symbol(\"<=\"), PrimaryEnumMember]\n        LessThanOrEquals,\n        NotGreaterThan = LessThanOrEquals\n    }\n\n    [AttributeUsage(AttributeTargets.Field)]\n    class SymbolAttribute : Attribute\n    {\n        public string Symbol { get; }\n\n        public SymbolAttribute(string symbol)\n        {\n            Symbol = symbol;\n        }\n    }\n\n    [Flags]\n    enum DaysOfWeek\n    {\n        None = 0,\n        Sunday = 1,\n        Monday = 2,\n        Tuesday = 4,\n        Wednesday = 8,\n        Thursday = 16,\n        Friday = 32,\n        Weekdays = Monday | Tuesday | Wednesday | Thursday | Friday,\n        Saturday = 64,\n        Weekend = Sunday | Saturday,\n        All = Sunday | Monday | Tuesday | Wednesday | Thursday | Friday | Saturday\n    }\n\n    [Flags, DayTypeValidator]\n    enum DayType\n    {\n        Weekday = 1,\n        Weekend = 2,\n        Holiday = 4\n    }\n\n    class DayTypeValidatorAttribute : EnumValidatorAttribute<DayType>\n    {\n        public override bool IsValid(DayType value) => value.GetFlagCount(DayType.Weekday | DayType.Weekend) == 1 && FlagEnums.IsValidFlagCombination(value);\n    }\n}\n```\n\n---\n![Performance](performance.png)\n\nResults from running the [PerformanceTestConsole](./Src/Enums.NET.PerfTestConsole/Program.cs) BenchmarkDotNet application.\n\n## Interface\nSee [fuget](https://www.fuget.org/packages/Enums.NET) for exploring the interface.\n\n## Credits\nInspired by Jon Skeet's [Unconstrained Melody](https://github.com/jskeet/unconstrained-melody).\n"
        },
        {
          "name": "Src",
          "type": "tree",
          "content": null
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 0.984375,
          "content": "# .NET Desktop\n# Build and run tests for .NET Desktop or Windows classic desktop solutions.\n# Add steps that publish symbols, save build artifacts, and more:\n# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net\n\ntrigger:\n- master\n\npool:\n  vmImage: 'windows-2019'\n\nvariables:\n  solution: '**/*.sln'\n  buildPlatform: 'Any CPU'\n  buildConfiguration: 'Release'\n\nsteps:\n- task: DotNetCoreInstaller@0\n  displayName: 'Install .net core 3.0'\n  inputs:\n    version: '3.0.100'\n\n- task: NuGetToolInstaller@0\n  inputs:\n    versionSpec: '4.x'\n\n- task: NuGetCommand@2\n  inputs:\n    restoreSolution: '$(solution)'\n\n- task: VSBuild@1\n  inputs:\n    solution: '$(solution)'\n    platform: '$(buildPlatform)'\n    configuration: '$(buildConfiguration)'\n\n- task: VisualStudioTestPlatformInstaller@1\n  inputs:\n    packageFeedSelector: 'nugetOrg'\n    versionSelector: 'latestStable'\n\n- task: VSTest@2\n  inputs:\n    platform: '$(buildPlatform)'\n    configuration: '$(buildConfiguration)'\n    vsTestVersion: '16.0'"
        },
        {
          "name": "performance.png",
          "type": "blob",
          "size": 53.111328125,
          "content": null
        },
        {
          "name": "performance.xlsx",
          "type": "blob",
          "size": 13.6396484375,
          "content": null
        }
      ]
    }
  ]
}