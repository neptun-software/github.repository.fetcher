{
  "metadata": {
    "timestamp": 1736710675965,
    "page": 24,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "commandlineparser/commandline",
      "stars": 4622,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.333984375,
          "content": "#top-most EditorConfig for project\nroot = true\n\n[*]\nend_of_line = crlf\ninsert_final_newline = true\n\n[*.cs]\nindent_style = space\nindent_size = 4\n\n[*.{xml,csproj,config}]\nindent_style = tab\nindent_size = 4\n\n[*.json]\nindent_style = space\nindent_size = 2\n\n[*.js]\nindent_style = space\nindent_size = 2\n\n[*.yml]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.517578125,
          "content": "\n#ignore build outputs\n[B|b]in\n[O|o]bj\nbuild/*\n\n#ignore managed external libs\npackages\npaket-files\n\n*.suo\n*.userprefs\n*~\n\\#*\\#\n*.pidb\n\n#ignore Test results/temps\n*.test-cache\ntests/CommandLine/test-results/*\ntests/CommandLine.Tests/test-results/*\nTestResult.xml\n\n*.DS_Store\n*.csproj.user\n*.nupkg\n*.old\nStyleCop.Cache\n.paket/paket.exe\n.fake\n*.cache\ndocs/output/*\nartifacts/*\n*.xproj.user\n*.nuget.targets\n*.lock.json\n*.nuget.props\n*.DotSettings.user\n# Visual Studio 2015 cache/options directory\n.vs/\n# Rider\n.idea/\n\n[R|r]elease/** \n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 12.76171875,
          "content": "# Changelog\nAll notable changes to this project will be documented in this file.\n\nCommandLineParser project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [2.9.0-preview2] \n\n### Added\n- Properly assign arguments after a double dash to values, fix #605 by [@robnasby, PR# 610](https://github.com/commandlineparser/commandline/pull/610).\n\n### Changed\n- Drop \"Add multi-instance option support\".\n\n\n## [2.9.0-preview1] - 2020-7-24\n\n### Added\n- Add multi-instance option support by [@rmunn and @tydunkel, PR# 594](https://github.com/commandlineparser/commandline/pull/594).\n- Fix unparsing FileInfo and DirectoryInfo by[@kapsiR, PR# 627](https://github.com/commandlineparser/commandline/pull/627).\n- Move Errors and Value up to the abstract class definition, fixes #543 , #165 by [@johnjaylward, PR# 634](https://github.com/commandlineparser/commandline/pull/634).\n- Add support for flags enums, fixes  #247, #599 and #582 by [@shaosss, PR# 623](https://github.com/commandlineparser/commandline/pull/623).\n- Implement verb aliases, fixes #6,  #517 by[@johnjaylward, PR# 636](https://github.com/commandlineparser/commandline/pull/636).\n- Add a new method FormatCommandLineArgs  to unparse commandline to array of string, Fix #375 and #628 . \n  - Also, add SplitArgs  method to split commandline, fix #665 by[@moh-hassan, PR# 662](https://github.com/commandlineparser/commandline/pull/662) and [commit cccae2db](https://github.com/commandlineparser/commandline/commit/cccae2db749c2ebf25125bfd18e05427be0adbcf).\n- Allow single dash as a value, fix #300 and #574 by [@moh-hassan, PR# 669](https://github.com/commandlineparser/commandline/pull/669).\n\n\n## [2.8.0] - 2020-5-1\n## [2.8.0-preview4] - 2020-4-30\n## [2.8.0-preview1] - 2020-3-14\n\n### Added\n- Added support for async programming for `WithParsed and WithNotParsed` by [@joseangelmt, PR# 390 ](https://github.com/commandlineparser/commandline/pull/390).\n- Publish a new symbol packages with source link support for c# and F# (.snupkg) to improved package debugging experience by [@moh-hassan, PR#554](https://github.com/commandlineparser/commandline/pull/554)\n- Add default verb support by [@Artentus, PR# 556](https://github.com/commandlineparser/commandline/pull/556).\n- Add more details for localized attribute properties  by [@EdmondShtogu, PR# 558](https://github.com/commandlineparser/commandline/pull/558)\n- Support Default in Group Options and raise error if both SetName and Group are applied on option by [@hadzhiyski, PR# 575](https://github.com/commandlineparser/commandline/pull/575).\n- Support mutable types without empty constructor that only does explicit implementation of interfaces by [@pergardebrink, PR#590](https://github.com/commandlineparser/commandline/pull/590).\n\n\n### Changed\n- Tests cleanup by [@gsscoder, PR# 560](https://github.com/commandlineparser/commandline/pull/560).\n- Upgraded parts of CSharpx from Version 1.6.2-alpha by [@gsscoder, PR# 561](https://github.com/commandlineparser/commandline/pull/561).\n- Upgraded RailwaySharp from Version 1.1.0 by [@gsscoder, PR# 562](https://github.com/commandlineparser/commandline/pull/562).\n- SkipDefault is being respected by [Usage] Examples by [@kendfrey, PR# 565](https://github.com/commandlineparser/commandline/pull/565).\n- Remove useless testing code by [@gsscoder, PR# 568](https://github.com/commandlineparser/commandline/pull/568).\n- Remove constraint on T for ParseArguments with factory (required by issue #70) by [@pergardebrink](https://github.com/commandlineparser/commandline/pull/590).\n- Update nuget api key by [@ericnewton76](https://github.com/commandlineparser/commandline/commit/2218294550e94bcbc2b76783970541385eaf9c07)\n\n### Fixed\n- Fix #579 Unable to parse TimeSpan given from the FormatCommandLine by [@gsscoder, PR# 580](https://github.com/commandlineparser/commandline/pull/580).\n- Fix issue #339 for using custom struct having a constructor with string parameter by [moh-hassan, PR# 588](https://github.com/commandlineparser/commandline/pull/588).\n- Fix issue #409 to avoid IOException break in Debug mode in WPF app by [moh-hassan, PR# 589 ](https://github.com/commandlineparser/commandline/pull/589).\n\n\n## [2.7.82] - 2020-1-1\n## [2.7.0] - 2020-1-1\n### Added\n- Add option groups feature by [@hadzhiyski](https://github.com/commandlineparser/commandline/pull/552) - When one or more options has group set, at least one of these properties should have set value (they behave as required).\n- Add a new overload method for AutoBuild to enable HelpText customization by [@moh-hassan](https://github.com/commandlineparser/commandline/pull/557).\n- Improve spacing in HelpText by [@asherber](https://github.com/commandlineparser/commandline/pull/494) by adding a new option in the HelpText.\n- Add a new option \"SkipDefault\" in UnParserSettings by [@moh-hassan](https://github.com/commandlineparser/commandline/pull/550) to add the ability of skipping the options with a default value and fix [#541](https://github.com/commandlineparser/commandline/issues/541).\n- Generate a new symbolic nuget Package by [@moh-hassan](https://github.com/commandlineparser/commandline/pull/554) to Improve the debugging of Applications with the  NuGet package using [symbols experience](https://github.com/NuGet/Home/wiki/NuGet-Package-Debugging-&-Symbols-Improvements).\n- Add Support to [SourceLink](https://github.com/dotnet/sourcelink/blob/master/docs/README.md) in the nuget package  [@moh-hassan](https://github.com/commandlineparser/commandline/pull/554).\n\n### Changed\n- Remove the Exception when both CompanyAttribute and CopyRightAttribute are null in the Excuting assembly and set the copyright text to a default value by [@moh-hassan](https://github.com/commandlineparser/commandline/pull/557).\n- Change the default copyright to include current year instead of 1 by [@moh-hassan](https://github.com/commandlineparser/commandline/pull/557).\n- Enabling c# 8 and Vs2019 image in Appveyor.\n\n### Fixed\n- Fix NullReferenceException when creating a default immutable instance by [@0xced](https://github.com/commandlineparser/commandline/pull/495).\n- Fix issue [#496](https://github.com/commandlineparser/commandline/issues/496) - Cryptic error message with immutable option class by[@moh-hassan](https://github.com/commandlineparser/commandline/pull/555).\n- Fix UnParserExtensions.FormatCommandLine by [@moh-hassan](https://github.com/commandlineparser/commandline/pull/550) to resolve:\n  -  Fix Quote for Options of type DatTime [#502](https://github.com/commandlineparser/commandline/issues/502) and [#528](https://github.com/commandlineparser/commandline/issues/258).\n  - Fix Quote for options of type TimeSpan and DateTimeOffset.\n  - Fix Nullable type [#305](https://github.com/commandlineparser/commandline/issues/305)\n\n- Fix nuget Licence in nuget package by [@moh-hassan](https://github.com/commandlineparser/commandline/pull/549) and fix issue  [#545](https://github.com/commandlineparser/commandline/issues/545).\n- Fix PackageIconUrl warning in nuget package by [@moh-hassan](https://github.com/commandlineparser/commandline/pull/551).\n- Fix immutable nullException, Improve exception message when immutable type can't be created\n- Fix Custom help for verbs issue[#529](https://github.com/commandlineparser/commandline/issues/529) by [@moh-hassan](https://github.com/commandlineparser/commandline/pull/557).\n- Fix --help switch throwing exception in F# [#366](https://github.com/commandlineparser/commandline/issues/366)\nby [@WallaceKelly](https://github.com/commandlineparser/commandline/pull/493)\n\n## [2.6.0] - 2019-07-31\n### Added\n- Support HelpText localization with ResourceType property by [@tkouba](https://github.com/commandlineparser/commandline/pull/356).\n- Add demo for complete localization of command line help using resources by[@tkouba](https://github.com/commandlineparser/commandline/pull/485).\n- Localize VerbAttribute  by [@moh-hassan](https://github.com/commandlineparser/commandline/pull/473).\n- Improve support for multiline help text by [@NeilMacMullen](https://github.com/commandlineparser/commandline/pull/456/).\n- Reorder options in auto help text (issue #482) [@b3b00](https://github.com/commandlineparser/commandline/pull/484).\n- Add IsHelp() and IsVersion() Extension methods to mange HelpText errors by [@moh-hassan](https://github.com/commandlineparser/commandline/pull/467).\n\n### Fixed\n- Fix issues for HelpText.AutoBuild configuration (issues #224 , # 259) by [@moh-hassan](https://github.com/commandlineparser/commandline/pull/467).\n- Test maintainance: add missed tests and removing xUnit1013 warning by [@moh-hassan](https://github.com/commandlineparser/commandline/pull/462).\n- Fix issue #104 of nullable enum by [@moh-hassan](https://github.com/commandlineparser/commandline/pull/453).\n- Fix issue #418, modify version screen to print a new line at the end by [@moh-hassan](https://github.com/commandlineparser/commandline/pull/443).\n\n\n## [2.5.0] - 2019-04-27\n### Added\n- Add support to  NET40 and NET45 for both CSharp and FSharp by [@moh-hassan](https://github.com/commandlineparser/commandline/pull/430).\n\n \n### Changed\n- Proposed changes for enhancement by [@Wind010](https://github.com/commandlineparser/commandline/pull/314), cover:appveyor.yml, ReflectionExtensions.cs and error.cs.\n- Enhance the CSharp demo to run in multi-target net40;net45;netcoreapp2.0;netcoreapp2.1 by [@moh-hassan](https://github.com/commandlineparser/commandline/pull/430).\n- Added explicit support for .NET 4.6.1 and .NET Core 2.0 by [@ravenpride](https://github.com/commandlineparser/commandline/pull/400). \n- Convert commandline project to multi-target project netstandard2.0;net40;net45;net461.\n- Convert commandline Test to multi-target project net461;netcoreapp2.0. \n\n\n\n### Fixed\n- Fix the null EntryAssembly Exception in unit test of net4x projects: issues #389,#424 by [@moh-hassan](https://github.com/commandlineparser/commandline/pull/430).\n- Fix the test case 'Add unit tests for Issue #389 and #392\n- Fix CSC error CS7027: Error signing output with public key from file 'CommandLine.snk' -- Invalid public key in appveyor CI.\n- Fix the error CS0234: The type or namespace name 'FSharp' for net40 Framework.\n- Fix Mis-typed CommandLine.BaseAttribute.Default results in ArgumentException: Object of type 'X' cannot be converted to type 'Y' (issue #189) by[@Wind010](https://github.com/commandlineparser/commandline/pull/314).\n\n\n\n\n## [2.4.3] - 2019-01-09\n### Added\n- Add support to  NetStandard2.0 by [@ViktorHofer](https://github.com/commandlineparser/commandline/pull/307) \n- Add strong name signing  [@ViktorHofer](https://github.com/commandlineparser/commandline/pull/307) \n-  Added AutoBuild and AutoVersion properties to control adding of implicit 'help' and 'version' options/verbs by [@Athari](https://github.com/commandlineparser/commandline/pull/256). \n- Added simpler C# Quick Start example at readme.md by [@lythix](https://github.com/commandlineparser/commandline/pull/274).\n- Add validate feature in Set parameter, and throw exception, and show usage,Issue #283 by[@e673](https://github.com/commandlineparser/commandline/pull/286).\n\n\n### Deprecated\n- Drop support for NET40 and NET45\n\n\n### Removed\n- Disable faulty tests in netsatbdard2.0 and enable testing in CI.\n\n\n### Fixed\n- Fix grammar error in specification error message by [@DillonAd](https://github.com/commandlineparser/commandline/pull/276).\n- Fix HelpText.AutoBuild Usage spacing  by[@ElijahReva](https://github.com/commandlineparser/commandline/pull/280).\n- Fix type at readme.md file by [@matthewjberger](https://github.com/commandlineparser/commandline/pull/304)\n- Fix not showing correct header info, issue #34 by[@tynar](https://github.com/commandlineparser/commandline/pull/312).\n- Fix title of assembly renders oddly issue-#197 by [@Yiabiten](https://github.com/commandlineparser/commandline/pull/344).\n- Fix nuget apikey by [@ericnewton76](https://github.com/commandlineparser/commandline/pull/386).\n- Fix missing fsharp from github release deployment by @ericnewton76.\n- Fix to Display Width Tests by [@Oddley](https://github.com/commandlineparser/commandline/pull/278).\n- Fixing DisplayWidth for newer Mono  by [@Oddley](https://github.com/commandlineparser/commandline/pull/279).\n\n\n## [2.3.0] - 2018-08-13\n### Added\n- Properly handle CaseInsensitiveEnumValues flag fixing issue #198 by [@niklaskarl](https://github.com/commandlineparser/commandline/pull/231).\n\n### Changed\n- Updated README examples quick start example for c# and Vb.net to work with the new API by [@loligans](https://github.com/commandlineparser/commandline/pull/218).\n- Updated README by [@ericnewton76](https://github.com/commandlineparser/commandline/pull/208).\n- Update copyright in unit tests \n- Patching appveyor dotnet csproj \n- Updates to appveyor to create a build matrix\n\n### Fixed\n- hotfix/issue #213 fsharp dependency by [@ericnewton76](https://github.com/commandlineparser/commandline/pull/215).\n\n\n## [2.2.1] - 2018-01-10\n\n## [2.2.0] - 2018-01-07 \n\n## [1.9.71.2] - 2013-02-27: The starting bascode version\n"
        },
        {
          "name": "CommandLine.sln",
          "type": "blob",
          "size": 1.9951171875,
          "content": "﻿\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio 15\r\nVisualStudioVersion = 15.0.27703.2042\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"CommandLine\", \"src\\CommandLine\\CommandLine.csproj\", \"{E1BD3C65-49C3-49E7-BABA-C60980CB3F20}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"CommandLine.Tests\", \"tests\\CommandLine.Tests\\CommandLine.Tests.csproj\", \"{0A15C4D2-B3E9-43AB-8155-1B39F7AC8A5E}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Tests\", \"Tests\", \"{1361E8B1-D0E1-493E-B8C1-7380A7B7C472}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{E1BD3C65-49C3-49E7-BABA-C60980CB3F20}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{E1BD3C65-49C3-49E7-BABA-C60980CB3F20}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{E1BD3C65-49C3-49E7-BABA-C60980CB3F20}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{E1BD3C65-49C3-49E7-BABA-C60980CB3F20}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{0A15C4D2-B3E9-43AB-8155-1B39F7AC8A5E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{0A15C4D2-B3E9-43AB-8155-1B39F7AC8A5E}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{0A15C4D2-B3E9-43AB-8155-1B39F7AC8A5E}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{0A15C4D2-B3E9-43AB-8155-1B39F7AC8A5E}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(NestedProjects) = preSolution\r\n\t\t{0A15C4D2-B3E9-43AB-8155-1B39F7AC8A5E} = {1361E8B1-D0E1-493E-B8C1-7380A7B7C472}\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {5B5A476C-82FB-49FB-B592-5224D9005186}\r\n\tEndGlobalSection\r\n\tGlobalSection(MonoDevelopProperties) = preSolution\r\n\t\tStartupItem = src\\CommandLine\\CommandLine.csproj\r\n\tEndGlobalSection\r\nEndGlobal\r\n"
        },
        {
          "name": "CommandLine.snk",
          "type": "blob",
          "size": 0.58203125,
          "content": null
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 0.9140625,
          "content": "<Project>\n\t<PropertyGroup>\n\t\t<NoWarn>CS1591;CS0219;8002;NU5125</NoWarn>\n\t\t<SolutionDirectory Condition=\"'$(SolutionDirectory)'==''\">$(MSBuildThisFileDirectory)</SolutionDirectory>\n\t\t<IncludeSourceRevisionInInformationalVersion>false</IncludeSourceRevisionInInformationalVersion>\n\t</PropertyGroup>\n\t<PropertyGroup Condition=\"$(TargetFramework.StartsWith('net4'))\">\n\t\t<DefineConstants>$(DefineConstants);NETFRAMEWORK</DefineConstants>\n\t</PropertyGroup>\n\t<!-- Enable building .NET Framework projects on any machine with at least MSBuild or the .NET Core SDK installed.-->\n\t<ItemGroup>\n\t\t<PackageReference Include=\"Microsoft.NETFramework.ReferenceAssemblies\" Version=\"1.0.0\">\n\t\t\t<IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>\n\t\t\t<PrivateAssets>all</PrivateAssets>\n\t\t</PackageReference>\n\t\t<PackageReference Include=\"Microsoft.SourceLink.GitHub\" Version=\"1.0.0\" PrivateAssets=\"All\" />\n\t</ItemGroup>\n</Project>\n"
        },
        {
          "name": "License.md",
          "type": "blob",
          "size": 1.0849609375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2005 - 2015 Giacomo Stelluti Scala & Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.0888671875,
          "content": "[![Build status](https://ci.appveyor.com/api/projects/status/p61dj8udxs2aocmo/branch/master?svg=true)](https://ci.appveyor.com/project/commandlineparser/commandline/branch/master)\n[![NuGet](https://img.shields.io/nuget/dt/commandlineparser.svg)](http://nuget.org/packages/commandlineparser)\n[![NuGet](https://img.shields.io/nuget/v/commandlineparser.svg)](https://www.nuget.org/packages/CommandLineParser/)\n[![NuGet](https://img.shields.io/nuget/vpre/commandlineparser.svg)](https://www.nuget.org/packages/CommandLineParser/)\n[![Join the Gitter chat!](https://badges.gitter.im/gsscoder/commandline.svg)](https://gitter.im/gsscoder/commandline?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n# Command Line Parser Library for CLR and NetStandard\n\n**Note:** the API surface has changed since v1.9.x and earlier. If you are looking for documentation on v1.9.x, please see [stable-1.9.71.2](https://github.com/gsscoder/commandline/tree/stable-1.9.71.2)\n\nThe Command Line Parser Library offers CLR applications a clean and concise API for manipulating command line arguments and related tasks, such as defining switches, options and verb commands. It allows you to display a help screen with a high degree of customization and a simple way to report syntax errors to the end user.\n\n```\nC:\\Project> NuGet Install CommandLineParser\n```\n\n# Nightly Build\n\nNightly version of the CommandLineParser can be downloaded from github [Releases](https://github.com/commandlineparser/commandline/releases). \n\nThe Last new features and fixes, read [changelog](https://github.com/commandlineparser/commandline/blob/master/CHANGELOG.md)\n\n\n_NOTE: Mentioned F# Support is provided via ```CommandLineParser.FSharp``` package with FSharp dependencies._\n\n__This library provides _hassle free_ command line parsing with a constantly updated API since 2005.__\n\n# At a glance:\n\n- Compatible with __.NET Framework 4.0+__, __Mono 2.1+ Profile__, __.NET Standard__ and __.NET Core__\n- Doesn't depend on other packages (No dependencies beyond standard base libraries)\n- One line parsing using default singleton: `CommandLine.Parser.Default.ParseArguments(...)` and three overload methods.\n- Automatic or one line help screen generator: `HelpText.AutoBuild(...)`.\n- Supports `--help`, `--version`, `version` and `help [verb]` by default with customization.\n- Map to sequences (via `IEnumerable<T>` and similar) and scalar types, including Enums and `Nullable<T>`.\n- You can also map to every type with a constructor that accepts a string (like `System.Uri`) for reference and value types.\n- Verbs can be array of types collected from Plugins or IoC container.\n- Define [verb commands](https://github.com/commandlineparser/commandline/wiki/Verbs) similar to `git commit -a`.\n- Support default verb.\n- Support Mutable and Immutable types.\n- Support HelpText localization.\n- Support ordering of options in HelpText.\n- Support [Mutually Exclusive Options](https://github.com/commandlineparser/commandline/wiki/Mutually-Exclusive-Options) and [Option groups](https://github.com/commandlineparser/commandline/wiki/Option-Groups).\n- Support named and value options.\n- Support Asynchronous programming with async and await.\n- Unparsing support: `CommandLine.Parser.Default.FormatCommandLine<T>(T options)`.\n- CommandLineParser.FSharp package is F#-friendly with support for `option<'a>`, see [demo](https://github.com/commandlineparser/commandline/blob/master/demo/fsharp-demo.fsx).  _NOTE: This is a separate NuGet package._\n- Include wiki documentation with lot of examples ready to run online.\n- Support Source Link and symbolic nuget package snupkg.\n- Tested in Windows, Linux Ubuntu 18.04 and Mac OS.\n- Most of features applies with a [CoC](http://en.wikipedia.org/wiki/Convention_over_configuration) philosophy.\n- C# demo: source [here](https://github.com/commandlineparser/commandline/tree/master/demo/ReadText.Demo).\n\n# Getting Started with the Command Line Parser Library\n\nYou can utilize the parser library in several ways:\n\n- Install via NuGet/Paket: [https://www.nuget.org/packages/CommandLineParser/](https://www.nuget.org/packages/CommandLineParser/)\n- Integrate directly into your project by copying the .cs files into your project.\n- ILMerge during your build process.\n\n## Quick Start Examples\n\n1. Create a class to define valid options, and to receive the parsed options.\n2. Call ParseArguments with the args string array.\n\nC# Quick Start:\n\n```cs\nusing System;\nusing CommandLine;\n\nnamespace QuickStart\n{\n    class Program\n    {\n        public class Options\n        {\n            [Option('v', \"verbose\", Required = false, HelpText = \"Set output to verbose messages.\")]\n            public bool Verbose { get; set; }\n        }\n\n        static void Main(string[] args)\n        {\n            Parser.Default.ParseArguments<Options>(args)\n                   .WithParsed<Options>(o =>\n                   {\n                       if (o.Verbose)\n                       {\n                           Console.WriteLine($\"Verbose output enabled. Current Arguments: -v {o.Verbose}\");\n                           Console.WriteLine(\"Quick Start Example! App is in Verbose mode!\");\n                       }\n                       else\n                       {\n                           Console.WriteLine($\"Current Arguments: -v {o.Verbose}\");\n                           Console.WriteLine(\"Quick Start Example!\");\n                       }\n                   });\n        }\n    }\n}\n```\n\n## C# Examples:\n\n<details>\n  <summary>Click to expand!</summary>\n\n```cs\n\nclass Options\n{\n  [Option('r', \"read\", Required = true, HelpText = \"Input files to be processed.\")]\n  public IEnumerable<string> InputFiles { get; set; }\n\n  // Omitting long name, defaults to name of property, ie \"--verbose\"\n  [Option(\n\tDefault = false,\n\tHelpText = \"Prints all messages to standard output.\")]\n  public bool Verbose { get; set; }\n  \n  [Option(\"stdin\",\n\tDefault = false,\n\tHelpText = \"Read from stdin\")]\n  public bool stdin { get; set; }\n\n  [Value(0, MetaName = \"offset\", HelpText = \"File offset.\")]\n  public long? Offset { get; set; }\n}\n\nstatic void Main(string[] args)\n{\n  CommandLine.Parser.Default.ParseArguments<Options>(args)\n    .WithParsed(RunOptions)\n    .WithNotParsed(HandleParseError);\n}\nstatic void RunOptions(Options opts)\n{\n  //handle options\n}\nstatic void HandleParseError(IEnumerable<Error> errs)\n{\n  //handle errors\n}\n\n```\n\n</details>\n\nDemo to show IEnumerable  options and other usage:  [Online Demo](https://dotnetfiddle.net/wrcAxr)\n\n## F# Examples:\n\n<details>\n  <summary>Click to expand!</summary>\n\n```fsharp\n\ntype options = {\n  [<Option('r', \"read\", Required = true, HelpText = \"Input files.\")>] files : seq<string>;\n  [<Option(HelpText = \"Prints all messages to standard output.\")>] verbose : bool;\n  [<Option(Default = \"русский\", HelpText = \"Content language.\")>] language : string;\n  [<Value(0, MetaName=\"offset\", HelpText = \"File offset.\")>] offset : int64 option;\n}\n\nlet main argv =\n  let result = CommandLine.Parser.Default.ParseArguments<options>(argv)\n  match result with\n  | :? Parsed<options> as parsed -> run parsed.Value\n  | :? NotParsed<options> as notParsed -> fail notParsed.Errors\n```\n</details>\n\n## VB.NET Example:\n\n<details>\n  <summary>Click to expand!</summary>\n\n```vb\n\nClass Options\n\t<CommandLine.Option('r', \"read\", Required := true,\n\tHelpText:=\"Input files to be processed.\")>\n\tPublic Property InputFiles As IEnumerable(Of String)\n\n\t' Omitting long name, defaults to name of property, ie \"--verbose\"\n\t<CommandLine.Option(\n\tHelpText:=\"Prints all messages to standard output.\")>\n\tPublic Property Verbose As Boolean\n\n\t<CommandLine.Option(Default:=\"中文\",\n\tHelpText:=\"Content language.\")>\n\tPublic Property Language As String\n\n\t<CommandLine.Value(0, MetaName:=\"offset\",\n\tHelpText:=\"File offset.\")>\n\tPublic Property Offset As Long?\nEnd Class\n\nSub Main(ByVal args As String())\n    CommandLine.Parser.Default.ParseArguments(Of Options)(args) _\n        .WithParsed(Function(opts As Options) RunOptionsAndReturnExitCode(opts)) _\n        .WithNotParsed(Function(errs As IEnumerable(Of [Error])) 1)\nEnd Sub\n```\n</details>\n\n## For verbs:\n\n1. Create separate option classes for each verb.  An options base class is supported.  \n2. Call ParseArguments with all the verb attribute decorated options classes.\n3. Use MapResult to direct program flow to the verb that was parsed.\n\n### C# example:\n\n\n<details>\n  <summary>Click to expand!</summary>\n\n```csharp\n[Verb(\"add\", HelpText = \"Add file contents to the index.\")]\nclass AddOptions {\n  //normal options here\n}\n[Verb(\"commit\", HelpText = \"Record changes to the repository.\")]\nclass CommitOptions {\n  //commit options here\n}\n[Verb(\"clone\", HelpText = \"Clone a repository into a new directory.\")]\nclass CloneOptions {\n  //clone options here\n}\n\nint Main(string[] args) {\n  return CommandLine.Parser.Default.ParseArguments<AddOptions, CommitOptions, CloneOptions>(args)\n\t.MapResult(\n\t  (AddOptions opts) => RunAddAndReturnExitCode(opts),\n\t  (CommitOptions opts) => RunCommitAndReturnExitCode(opts),\n\t  (CloneOptions opts) => RunCloneAndReturnExitCode(opts),\n\t  errs => 1);\n}\n```\n</details>\n\n### VB.NET example:\n\n\n<details>\n  <summary>Click to expand!</summary>\n\n```vb\n<CommandLine.Verb(\"add\", HelpText:=\"Add file contents to the index.\")>\nPublic Class AddOptions\n    'Normal options here\nEnd Class\n<CommandLine.Verb(\"commit\", HelpText:=\"Record changes to the repository.\")>\nPublic Class CommitOptions\n    'Normal options here\nEnd Class\n<CommandLine.Verb(\"clone\", HelpText:=\"Clone a repository into a new directory.\")>\nPublic Class CloneOptions\n    'Normal options here\nEnd Class\n\nFunction Main(ByVal args As String()) As Integer\n    Return CommandLine.Parser.Default.ParseArguments(Of AddOptions, CommitOptions, CloneOptions)(args) _\n          .MapResult(\n              (Function(opts As AddOptions) RunAddAndReturnExitCode(opts)),\n              (Function(opts As CommitOptions) RunCommitAndReturnExitCode(opts)),\n              (Function(opts As CloneOptions) RunCloneAndReturnExitCode(opts)),\n              (Function(errs As IEnumerable(Of [Error])) 1)\n          )\nEnd Function\n```\n</details>\n\n### F# Example:\n\n<details>\n  <summary>Click to expand!</summary>\n\n```fs\nopen CommandLine\n\n[<Verb(\"add\", HelpText = \"Add file contents to the index.\")>]\ntype AddOptions = {\n  // normal options here\n}\n[<Verb(\"commit\", HelpText = \"Record changes to the repository.\")>]\ntype CommitOptions = {\n  // normal options here\n}\n[<Verb(\"clone\", HelpText = \"Clone a repository into a new directory.\")>]\ntype CloneOptions = {\n  // normal options here\n}\n\n[<EntryPoint>]\nlet main args =\n  let result = Parser.Default.ParseArguments<AddOptions, CommitOptions, CloneOptions> args\n  match result with\n  | :? CommandLine.Parsed<obj> as command ->\n\tmatch command.Value with\n\t| :? AddOptions as opts -> RunAddAndReturnExitCode opts\n\t| :? CommitOptions as opts -> RunCommitAndReturnExitCode opts\n\t| :? CloneOptions as opts -> RunCloneAndReturnExitCode opts\n  | :? CommandLine.NotParsed<obj> -> 1\n```\n</details>\n\n# Release History\n\nSee the [changelog](CHANGELOG.md)\n\n# Contributors\nFirst off, _Thank you!_  All contributions are welcome.  \n\nPlease consider sticking with the GNU getopt standard for command line parsing.  \n\nAdditionally, for easiest diff compares, please follow the project's tabs settings.  Utilizing the EditorConfig extension for Visual Studio/your favorite IDE is recommended.\n\n__And most importantly, please target the ```develop``` branch in your pull requests!__\n\n## Main Contributors (alphabetical order):\n- Alexander Fast (@mizipzor)\n- Dan Nemec (@nemec)\n- Eric Newton (@ericnewton76)\n- Kevin Moore (@gimmemoore)\n- Moh-Hassan (@moh-hassan)\n- Steven Evans\n- Thomas Démoulins (@Thilas)\n\n## Resources for newcomers:\n\n- [Wiki](https://github.com/commandlineparser/commandline/wiki)\n- [GNU getopt](http://www.gnu.org/software/libc/manual/html_node/Getopt.html)\n\n# Contacts:\n\n- Giacomo Stelluti Scala\n  - gsscoder AT gmail DOT com (_use this for everything that is not available via GitHub features_)\n  - GitHub: [gsscoder](https://github.com/gsscoder)\n  - [Blog](http://gsscoder.blogspot.it)\n  - [Twitter](http://twitter.com/gsscoder)\n- Dan Nemec\n- Eric Newton\n  - ericnewton76+commandlineparser AT gmail DOT com\n  - GitHub: [ericnewton76](https://github.com/ericnewton76)\n  - Blog: \n  - Twitter: [enorl76](http://twitter.com/enorl76)\n- Moh-Hassan \n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.3291015625,
          "content": "#version should be only changed with RELEASE eminent, see RELEASE.md\n\nversion: 2.9.1-ci-{build}\n\nimage: Visual Studio 2019\n\nclone_depth: 1\npull_requests:\n  do_not_increment_build_number: true\n\ninit:\n  - ps: |\n      git config --global core.autocrlf input\n      \n      if ($env:APPVEYOR_REPO_TAG -eq \"true\") {\n        $ver = $env:APPVEYOR_REPO_TAG_NAME\n        if($ver.StartsWith(\"v\") -eq $true) { $ver = $ver.Substring(1) }\n        Update-AppveyorBuild -Version $ver\n      }\n\nenvironment:\n  matrix:\n    - BUILD_TARGET: base\n    - BUILD_TARGET: fsharp\n\nbuild_script:\n- cmd: dotnet build src/CommandLine/ -c Release --version-suffix %APPVEYOR_BUILD_VERSION% /p:BuildTarget=%BUILD_TARGET%\n\ntest_script: \n- cmd: dotnet test tests/CommandLine.Tests/ /p:BuildTarget=%BUILD_TARGET%\n\nafter_test:\n- cmd: dotnet pack src/CommandLine/ -c Release --version-suffix %APPVEYOR_BUILD_VERSION% /p:BuildTarget=%BUILD_TARGET%\n\nartifacts:\n- path: 'src/CommandLine/bin/Release/*.nupkg'\n  name: NuGetPackages\n- path: 'src/CommandLine/bin/Release/*.snupkg'\n  name: symbol \n  \non_failure:\n- cmd: |\n    tree /f /a >files.lst\n    appveyor PushArtifact .\\files.lst -DeploymentName \"Failed Build File Listing\"\n\ndeploy:\n- provider: NuGet\n  api_key:\n    secure: llMIgYMuLHh9thyKMEAmkWraTaA9Zvcm1F8/yRwm0HCiPIt/ehR/GI4kJKyMTPyf\n  artifact: /.*(\\.|\\.s)nupkg/\n  on:\n    APPVEYOR_REPO_TAG: true\n"
        },
        {
          "name": "art",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}