{
  "metadata": {
    "timestamp": 1736710816341,
    "page": 312,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dotnet/extensions",
      "stars": 2731,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.767578125,
          "content": "# Remove the line below if you want to inherit .editorconfig settings from higher directories\nroot = true\n\n[*]\n\nindent_size = 4\nindent_style = space\ntab_width = 4\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\nspelling_languages = en-us\nspelling_checkable_types = strings,identifiers,comments\nspelling_error_severity = information\nspelling_exclusion_path = .\\eng\\spellchecking_exclusions.dic\n\nfile_header_template = Licensed to the .NET Foundation under one or more agreements.\\nThe .NET Foundation licenses this file to you under the MIT license.\n\n[*.{appxmanifest,axml,build,config,proj,csproj,dbml,discomap,dtd,json,jsproj,lsproj,njsproj,nuspec,proj,props,resjson,resw,resx,StyleCop,targets,tasks,vbproj,yml,xml,xsd}]\nindent_style = space\nindent_size = 2\ntab_width = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 1.2041015625,
          "content": "# https://help.github.com/articles/dealing-with-line-endings/\n# Set default behavior to automatically normalize line endings.\n* text=auto\n\n*.doc  diff=astextplain\n*.DOC   diff=astextplain\n*.docx  diff=astextplain\n*.DOCX  diff=astextplain\n*.dot   diff=astextplain\n*.DOT   diff=astextplain\n*.pdf   diff=astextplain\n*.PDF   diff=astextplain\n*.rtf   diff=astextplain\n*.RTF   diff=astextplain\n\n# Force bash scripts to always use lf line endings so that if a repo is accessed\n# in Unix via a file share from Windows, the scripts will work.\n*.in text eol=lf\n*.sh text eol=lf\n\n# Likewise, force cmd and batch scripts to always use crlf\n*.cmd text eol=crlf\n*.bat text eol=crlf\n\n*.cs text=auto diff=csharp\n*.vb text=auto\n*.resx text=auto\n*.c text=auto\n*.cpp text=auto\n*.cxx text=auto\n*.h text=auto\n*.hxx text=auto\n*.py text=auto\n*.rb text=auto\n*.java text=auto\n*.html text=auto\n*.htm text=auto\n*.css text=auto\n*.scss text=auto\n*.sass text=auto\n*.less text=auto\n*.js text=auto\n*.lisp text=auto\n*.clj text=auto\n*.sql text=auto\n*.php text=auto\n*.lua text=auto\n*.m text=auto\n*.asm text=auto\n*.erl text=auto\n*.fs text=auto\n*.fsx text=auto\n*.hs text=auto\n\n*.csproj text=auto\n*.vbproj text=auto\n*.fsproj text=auto\n*.dbproj text=auto\n*.sln text=auto\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.765625,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# Tool Runtime Dir\n# note: there is no trailing slash so if these are symlinks (which are seen as files,\n#       instead of directories), git will still ignore them.\n.dotnet\n.dotnet-mono\n.dotnet-tools-global\n.packages\n.tools\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n*.sln\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n!/eng/Release/\n[Rr]eleases/\n!/docs/releases/\n[Xx]64/\n[Xx]86/\n[Bb]uild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n.build/\n.vscode\n!.vscode/settings.json\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# VERIFY\n*.received.*\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n\n# TODO: Un-comment the next line if you do not want to checkin\n# your web deploy settings because they may include unencrypted\n# passwords\n#*.pubxml\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\npackages/*\npackages\n# except build/, which is used as an MSBuild target.\n!packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n!src/[Pp]ackages\n!eng/[Pp]ackages\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Microsoft Azure ApplicationInsights config file\nApplicationInsights.config\n\n# Windows Store app package directory\nAppPackages/\nBundleArtifacts/\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# LightSwitch generated files\nGeneratedArtifacts/\nModelManifest.xml\n\n# Paket dependency manager\n.paket/paket.exe\n\n# FAKE - F# Make\n.fake/\n\nPubsubService/ServiceConfiguration.cscfg\n\n# Microsoft.Cloud.InstrumentationFramework.Metrics\n*Ifx*.lib\n*Ifx*.dll\n*Tfx*.lib\n*Tfx*.dll\n*120.dll\nTfxPerfCounter.man\n\n# Meta directories\n.packages/*/*\n\n# Rider\n.idea/\n\n!src/MetaPackages/Sdk/build\n!eng/Build\npackages.lock.json\nPackageInfo.json\nProjectInfo.json\n\ndocs/_site\ndocs/obj\ndocs/refdocs/Microsoft.*.yml\ndocs/refdocs/Project.*.yml\ndocs/refdocs/toc.yml\ndocs/refdocs/.manifest\ndocs/packages/index.md\ndocs/binaries\n\nBenchmarkDotNet.Artifacts/*\n!test/Extensions/Cryptography.Test/TestVectors/Files/*.rsp\n\n# local mutation testing\ngit-diff.txt\nmutation-report.json\nmutation-report.html\n\n*.sln\n*.metaproj\n**/launchSettings.json\n\nBenchmarkDotNet.artifacts/\n\n/out.txt\n/.targetframeworks\n\n/_TEST\n\n*.binlog\n/eng/scripts/repo-digest.html\n**/.DS_Store\n"
        },
        {
          "name": ".spelling",
          "type": "blob",
          "size": 3.123046875,
          "content": ".NET\n2.x\n3.x\n4.6x\n4.7x\n4.8x\n5xx\n6.a\n6.c\n6.f\nAAD\nAAD\nabstractions\nad\nAgentless\nAggregator\naggregators\nAKS\nAKV\nAKVs\nAlexey\nanalyzer\nAnalyzers\nAndrey\nAPI\nAPIs\nAppInsights\napprovers\nASP.NET\nASP.NET.\nasync\nATM\nAuthenticode\nAutofac\nawaitable\nAzSecPack\nAzure\nbackend\nBackoff\nbase64\nBase64\nBehavior\nBelenko\nBezdolny\nBinskim\nBlackforest\nBlazek\nbloomfilter\nbloomfilters\nboolean\nbootstrapper\nbuildout\nBrownbag\nBrownbags\nbyte\nC#\nCaching\nCAE\ncallee\ncallouts\nCallouts\nCDPx\nChainable\ncheckboxes\ncheckin\ncmdlets\ncmdlet\nCNAME\nCNAME\nCNAMEs\nCNAMEs\ncodebase\ncodebases\nCOGs\ncombinators\ncomposability\ncomposable\ncomposable\nconfig\nConfig\nCoreAuth\nCoreAuth\ncorrelators\ncpu\nCPU\ncross-cutting\ncross-cutting\nCrypto\ncscfg\ncustomizable\nCv2\nDCs\ndecorrelated\nDeepak\nDeliverables\ndeserialization\ndeserialize\ndeserialized\ndev\nDevOps\nDGrep\ndiscoverability\ndockerize\nDoD\ndogfood\nDogfood\ndont's\ndotnet\ndSMS\ne.g.\nECS\nECS\nejuvenate\nencodings\nenricher\nEnricher\nenrichers\nEnrichers\nenum\nenums\nEv2\nexecutables\nexternal_bp\nfailover\nfilename\nFlatBuffer\nFlatBuffers\nFlatSharp\nflighting\nFluentD\nformatters\nfulfill\nFxCop\nGallatin\nGameday\nGamedays\nGantt\nGenerators\ngeneva\ngeo\ngeos\ngetters\ngithub\nGolang-ci\ngRPC\nGrpc\nGuestUser\nhoc\nhotfix\nhotfixes\nhow-tos\nhttp\nHTTP\nHttpClient\nhttps\ni.e.\nIC3\nIDWeb\nifx\nIhar\nIn-proc\nindempotent\nInfoSec\nInfoSec\ninitializer\ninitializers\nInitializers\ninjectable\ninjectable\ninlining\nIntelliSense\ninteroperate\nintrinsic\nintrinsics\nIoC\niOS\nJSON\nJSON-encoded\nJuraj\nKlauco\nKubernetes\nKusto\nlearnings\nlifecycle\nlightbulb\nLinkedIn\nLiron\nlivesite\nLogging\nlookups\nMalkevich\nMarcano\nMatej\nMcAllister\nMdmMetricReporter\nmemoization\nmemoize\nmemoized\nmetadata\nmicroservice\nmicroservices\nMicrosoft\nmicrosoft.com\nmiddleware\nmiddlewares\nMiri\nmiscomputed\nMise\nMise\nMISE\nMISE\nmitigation\nmitigations\nMitrache\nModi\nMooncake\nMSBuild\nMSGraph\nMSGraph\nMSI\nMSIs\nmutator\nMyAccess\nnaïve\nnamespace\nnamespaces\nnatively\nnatively\nNewtonsoft\nNLog\nNoskov\nns\nNuGet\nNuGets\nnullability\nnullable\nonboard\nonboarded\nonboarding\nonboards\nOneBranch\nOneCert\nOneDrive\nOneObservability\nOSS\nOTEPs\nPaaSv1\nparallelization\nparameterless\npdf\nPerfmon\nPerfPanel\nPerfView\npluggability\nPOCO\nPOCOs\nPolly\nPolly.NET\nPostconfiguration\nPowerShell\nppe\nPranav\npre\npre-aggregated\npre-aggregation\npre-built\npre-release\npre-requisite\npreaggregate\npreaggregates\npreallocated\nPreconfiguration\npreconfigured\npreformatted\npreimage\nprepending\nprober\nprogrammatically\nProtobuf\nProtobuf-net\nPubSub\nQoS\nquantiles\nRamati\nramping\nRDFE\nreconfigure\nRedis\nreimplementation\nremediations\nrepo\nrepos\nRing0\nRing1\nrollout\nrollouts\nRousos\nroutable\nruntime\nruntimes\nSaares\nSAL\nschemas\nScortzario\nsdf\nSDK\nSDKs\nseatbelt\nserializer\nserializers\nSerilog\nServiceTree\nSev3\nSharePoint\nShearar\nShiproom\nShullo\nSimmy\nSimpleInjector\nSkowronski\nSkype\nSkypetoken\nSLA\nSLAs\nsnappable\nstandalone\nstateful\nstruct\nstructs\nStryker\nStryker.NET\nsubstring\nSumObserver\nsuppressions\nTal\nteams-service-mwt-fae-data-service\ntimestamp\nTomka\ntoolchain\ntoolchains\ntoolset\nTrouter\nTRv2\nuncheck\nunmanaged\nunredacted\nuri\nURI\nv1.3\nv1.4\nv1.6\nvalidator\nvalidators\nversionable\nversioned\nversioning\nVersioning\nVirtualization\nvirtualization\nVM\nWebAuth\nWebHost\nWebRTC\nwhitespace\nWiki\nwildcard\nWin32\nWorkstream\nWorkstreams\nxmls\nxUnit\nZipkin\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.2529296875,
          "content": "# Code of Conduct\n\nThis project has adopted the code of conduct defined by the Contributor Covenant\nto clarify expected behavior in our community.\n\nFor more information, see the [.NET Foundation Code of Conduct](https://dotnetfoundation.org/code-of-conduct).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 13.087890625,
          "content": "# Contributing Guide\n\n> :warning: Please note, this document is a subset of [Contributing to .NET Runtime][net-contributing], make sure to read it first.\n\n* [Reporting Issues](#reporting-issues)\n  + [Identify Where to Report](#identify-where-to-report)\n  + [Finding Existing Issues](#finding-existing-issues)\n  + [Writing a Good API Proposal](#writing-a-good-api-proposal)\n  + [Writing a Good Bug Report](#writing-a-good-bug-report)\n    - [Why are Minimal Reproductions Important?](#why-are-minimal-reproductions-important)\n    - [Are Minimal Reproductions Required?](#are-minimal-reproductions-required)\n    - [How to Create a Minimal Reproduction](#how-to-create-a-minimal-reproduction)\n* [Contributing Changes](#contributing-changes)\n  + [DOs and DON'Ts](#dos-and-donts)\n  + [Breaking Changes](#breaking-changes)\n  + [Suggested Workflow](#suggested-workflow)\n  + [Commit Messages](#commit-messages)\n  + [PR Feedback](#pr-feedback)\n  + [Help Wanted (Up for Grabs)](#help-wanted-up-for-grabs)\n  + [Contributor License Agreement](#contributor-license-agreement)\n\nYou can contribute with issues, pull-requests, and general reviews of both issues and pull-requests. Simply filing issues for problems you encounter is a great way to contribute. Contributing implementations is greatly appreciated.\n\n## Reporting Issues\n\nWe always welcome bug reports, API proposals and overall feedback. Here are a few tips on how you can make reporting your issue as effective as possible.\n\n### Identify Where to Report\n\nThe .NET codebase is distributed across multiple repositories in the [.NET organization](https://github.com/dotnet). Depending on the feedback you might want to file the issue on a different repo. Here are a few common repos:\n\n* [dotnet/runtime](https://github.com/dotnet/runtime) .NET runtime, libraries and shared host installers.\n* [dotnet/aspnetcore](https://github.com/dotnet/aspnetcore) ASP.NET Core.\n* [azure/dotnet-extensions-experimental](https://github.com/azure/dotnet-extensions-experimental) Extensions for Azure.\n\n### Finding Existing Issues\n\nBefore filing a new issue, please search our [open issues](https://github.com/dotnet/extensions/issues) to check if it already exists.\n\nIf you do find an existing issue, please include your own feedback in the discussion. Do consider upvoting (👍 reaction) the original post, as this helps us prioritize popular issues in our backlog.\n\n### Writing a Good API Proposal\n\nPlease review our [API review process](https://github.com/dotnet/runtime/blob/main/docs/project/api-review-process.md) documents for guidelines on how to submit an API review. When ready to submit a proposal, please use the [API Suggestion issue template](https://github.com/dotnet/extensions/issues/new?assignees=&labels=api-suggestion&template=02_api_proposal.yml&title=%5BAPI+Proposal%5D%3A+).\n\n### Writing a Good Bug Report\n\nGood bug reports make it easier for maintainers to verify and root cause the underlying problem. The better a bug report, the faster the problem will be resolved. Ideally, a bug report should contain the following information:\n\n* A high-level description of the problem.\n* A _minimal reproduction_, i.e. the smallest size of code/configuration required to reproduce the wrong behavior.\n* A description of the _expected behavior_, contrasted with the _actual behavior_ observed.\n* Information on the environment: OS/distro, CPU arch, SDK version, etc.\n* Additional information, e.g. is it a regression from previous versions? are there any known workarounds?\n\nWhen ready to submit a bug report, please use the [Bug Report issue template](https://github.com/dotnet/extensions/issues/new?assignees=&labels=&template=01_bug_report.yml).\n\n#### Why are Minimal Reproductions Important?\n\nA reproduction lets maintainers verify the presence of a bug, and diagnose the issue using a debugger. A _minimal_ reproduction is the smallest possible console application demonstrating that bug. Minimal reproductions are generally preferable since they:\n\n1. Focus debugging efforts on a simple code snippet,\n2. Ensure that the problem is not caused by unrelated dependencies/configuration,\n3. Avoid the need to share production codebases.\n\n#### Are Minimal Reproductions Required?\n\nIn certain cases, creating a minimal reproduction might not be practical (e.g. due to nondeterministic factors, external dependencies). In such cases you would be asked to provide as much information as possible, for example by sharing a memory dump of the failing application. If maintainers are unable to root cause the problem, they might still close the issue as not actionable. While not required, minimal reproductions are strongly encouraged and will significantly improve the chances of your issue being prioritized and fixed by the maintainers.\n\n#### How to Create a Minimal Reproduction\n\nThe best way to create a minimal reproduction is gradually removing code and dependencies from a reproducing app, until the problem no longer occurs. A good minimal reproduction:\n\n* Excludes all unnecessary types, methods, code blocks, source files, nuget dependencies and project configurations.\n* Contains documentation or code comments illustrating expected vs actual behavior.\n* If possible, avoids performing any unneeded IO or system calls. For example, can the ASP.NET based reproduction be converted to a plain old console app?\n\n## Contributing Changes\n\nProject maintainers will merge changes that improve the product significantly.\n\nThe [Pull Request Guide][pr-guide] and [Copyright][copyright-guide] docs define additional guidance.\n\n### DOs and DON'Ts\n\nPlease do:\n\n* **DO** follow our [coding style][coding-style] (C# code-specific)<br/>\n  We strive to wrap the lines around 120 mark, and it's acceptable to stretch to no more than 150 chars (with some exceptions being URLs). [EditorGuidelines VS extension](https://marketplace.visualstudio.com/items?itemName=PaulHarrington.EditorGuidelines) makes it easier to visualise (see https://github.com/dotnet/winforms/pull/4836).\n* **DO** give priority to the current style of the project or file you're changing even if it diverges from the general guidelines.\n* **DO** include tests when adding new features. When fixing bugs, start with\n  adding a test that highlights how the current behavior is broken.\n* **DO** keep the discussions focused. When a new or related topic comes up\n  it's often better to create new issue than to side track the discussion.\n* **DO** blog and tweet (or whatever) about your contributions, frequently!\n\nPlease do not:\n\n* **DON'T** make PRs for style changes.\n* **DON'T** surprise us with big pull requests. Instead, file an issue and start\n  a discussion so we can agree on a direction before you invest a large amount\n  of time.\n* **DON'T** commit code that you didn't write. If you find code that you think is a good fit to add to .NET Core, file an issue and start a discussion before proceeding.\n* **DON'T** submit PRs that alter licensing related files or headers. If you believe there's a problem with them, file an issue and we'll be happy to discuss it.\n* **DON'T** add API additions without filing an issue and discussing with us first. See [API Review Process][api-review-process].\n\n### Breaking Changes\n\nContributions must maintain [API signature][breaking-changes-public-contract] and behavioral compatibility. Contributions that include [breaking changes][breaking-changes] will be rejected. Please file an issue to discuss your idea or change if you believe that it may affect managed code compatibility.\n\n### Suggested Workflow\n\nWe use and recommend the following workflow:\n\n1. Create an issue for your work.\n    - You can skip this step for trivial changes.\n    - Reuse an existing issue on the topic, if there is one.\n    - Get agreement from the team and the community that your proposed change is a good one.\n    - If your change adds a new API, follow the [API Review Process][api-review-process].\n    - Clearly state that you are going to take on implementing it, if that's the case. You can request that the issue be assigned to you. Note: The issue filer and the implementer don't have to be the same person.\n2. Create a personal fork of the repository on GitHub (if you don't already have one).\n3. In your fork, create a branch off of main (`git checkout -b mybranch`).\n    - Name the branch so that it clearly communicates your intentions, such as issue-123 or githubhandle-issue.\n    - Branches are useful since they isolate your changes from incoming changes from upstream. They also enable you to create multiple PRs from the same fork.\n4. Make and commit your changes to your branch.\n    - [Workflow Instructions](docs/building.md) explains how to build and test.\n    - Please follow our [Commit Messages](#commit-messages) guidance.\n5. Add new tests corresponding to your change, if applicable.\n6. Build the repository with your changes.\n    - Make sure that the builds are clean.\n    - Make sure that the tests are all passing, including your new tests.\n7. Create a pull request (PR) against the dotnet/extensions repository's **main** branch.\n    - State in the description what issue or improvement your change is addressing.\n    - Check if all the Continuous Integration checks are passing.\n8. Wait for feedback or approval of your changes from the area owners.\n    - Details about the pull request [review procedure](docs/pr-guide.md).\n9. When area owners have signed off, and all checks are green, your PR will be merged.\n    - The next official build will automatically include your change.\n    - You can delete the branch you used for making the change.\n\n### Commit Messages\n\nPlease format commit messages as follows (based on [A Note About Git Commit Messages][note-about-git-commit-messages]). Also, use the [GitHub keywords][github-keywords]:\n\n    ```\n    Summarize change in 50 characters or less\n\n    Fixes #42\n\n    Provide more detail after the first line. Leave one blank line below the\n    summary and wrap all lines at 72 characters or less.\n\n    If the change fixes an issue, leave another blank line after the final\n    paragraph and indicate which issue is fixed in the specific format\n    below.\n    ```\n\nAlso do your best to factor commits appropriately, not too large with unrelated things in the same commit, and not too small with the same small change applied N times in N different commits.\n\n### PR Feedback\n\nProject maintainers and community members will provide feedback on your change. Community feedback is highly valued. You will often see the absence of team feedback if the community has already provided good review feedback.\n\nOne or more project maintainers members will review every PR prior to merge. They will often reply with \"LGTM, modulo comments\". That means that the PR will be merged once the feedback is resolved. \"LGTM\" == \"looks good to me\".\n\nThere are lots of thoughts and [approaches](https://github.com/antlr/antlr4-cpp/blob/master/CONTRIBUTING.md#emoji) for how to efficiently discuss changes. It is best to be clear and explicit with your feedback. Please be patient with people who might not understand the finer details about your approach to feedback.\n\n### Help Wanted (Up for Grabs)\n\nThe team marks the most straightforward issues as [help wanted](https://github.com/dotnet/extensions/labels/help%20wanted). This set of issues is the place to start if you are interested in contributing but new to the codebase.\n\n### Contributor License Agreement\n\nYou must sign a [.NET Foundation Contribution License Agreement (CLA)](https://cla.dotnetfoundation.org) before your PR will be merged. This is a one-time requirement for projects in the .NET Foundation. You can read more about [Contribution License Agreements (CLA)](http://en.wikipedia.org/wiki/Contributor_License_Agreement) on Wikipedia.\n\nThe agreement: [net-foundation-contribution-license-agreement.pdf](https://github.com/dotnet/home/blob/master/guidance/net-foundation-contribution-license-agreement.pdf)\n\nYou don't have to do this up-front. You can simply clone, fork, and submit your pull-request as usual. When your pull-request is created, it is classified by a CLA bot. If the change is trivial (for example, you just fixed a typo), then the PR is labelled with `cla-not-required`. Otherwise it's classified as `cla-required`. Once you signed a CLA, the current and all future pull-requests will be labelled as `cla-signed`.\n\n\n[comment]: <> (URI Links)\n\n[api-review-process]: https://github.com/dotnet/runtime/blob/main/docs/project/api-review-process.md\n[breaking-changes]: https://github.com/dotnet/runtime/blob/main/docs/coding-guidelines/breaking-changes.md\n[breaking-changes-public-contract]: https://github.com/dotnet/runtime/blob/main/docs/coding-guidelines/breaking-changes.md#bucket-1-public-contract\n[coding-style]: https://github.com/dotnet/runtime/blob/master/docs/coding-guidelines/coding-style.md\n[copyright-guide]: https://github.com/dotnet/runtime/blob/main/docs/project/copyright.md\n[github-keywords]: https://docs.github.com/get-started/writing-on-github/working-with-advanced-formatting/using-keywords-in-issues-and-pull-requests#linking-a-pull-request-to-an-issue\n[net-contributing]: https://github.com/dotnet/extensions/blob/main/CONTRIBUTING.md\n[note-about-git-commit-messages]: http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\n[pr-guide]: https://github.com/dotnet/runtime/blob/main/docs/pr-guide.md\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 6.3701171875,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project>\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.DotNet.Arcade.Sdk\" />\n\n  <!-- TFMs and their permutations -->\n  <PropertyGroup>\n    <TargetFrameworkName>net</TargetFrameworkName>\n    <TargetFrameworkMajorVersion>9</TargetFrameworkMajorVersion>\n    <TargetFrameworkMinorVersion>0</TargetFrameworkMinorVersion>\n    <TargetFrameworkVersion>$(TargetFrameworkMajorVersion).$(TargetFrameworkMinorVersion)</TargetFrameworkVersion>\n\n    <!-- The latest TFM we're targeting overall -->\n    <LatestTargetFramework>$(TargetFrameworkName)$(TargetFrameworkVersion)</LatestTargetFramework>\n    <!-- All the .NET TFMs we're building -->\n    <SupportedNetCoreTargetFrameworks>$(LatestTargetFramework)</SupportedNetCoreTargetFrameworks>\n    <NetCoreTargetFrameworks>$(SupportedNetCoreTargetFrameworks);net8.0</NetCoreTargetFrameworks>\n\n    <!-- The minimum supported .NET version for external consumers. This is used for packaging control, see Packaging.targets -->\n    <MinimumSupportedTfmForPackaging>net8.0</MinimumSupportedTfmForPackaging>\n\n    <!-- Limit the .NET TFMs when .targetframeworks is defined -->\n    <!--\n      When .targetframeworks exists, only the TFMs listed in this file will be built unless for the projects\n      which have mandatory TFMs. Variables named $(Conditional[TFM]) will include this TFM only if it should\n      be built. In projects that can optionally target the TFM use this variable instead of the TFM.\n    -->\n    <CustomTargetFrameworks Condition=\"Exists('$(MSBuildThisFileDirectory)\\.targetframeworks')\">$([System.IO.File]::ReadAllText('$(MSBuildThisFileDirectory)\\.targetframeworks').Trim())</CustomTargetFrameworks>\n    <SupportedNetCoreTargetFrameworks Condition=\"'$(CustomTargetFrameworks)' != ''\">$(LatestTargetFramework)</SupportedNetCoreTargetFrameworks>\n    <NetCoreTargetFrameworks Condition=\"'$(CustomTargetFrameworks)' != ''\">$(SupportedNetCoreTargetFrameworks)</NetCoreTargetFrameworks>\n    <NetCoreTargetFrameworks Condition=\"'$(CustomTargetFrameworks)' != '' AND $(CustomTargetFrameworks.Contains('net8.0'))\">$(NetCoreTargetFrameworks);net8.0</NetCoreTargetFrameworks>\n    <ConditionalNet462 Condition=\"'$(CustomTargetFrameworks)' == '' OR $(CustomTargetFrameworks.Contains('net462'))\">;net462</ConditionalNet462>\n\n    <!-- All the .NET TFMs we're testing against -->\n    <TestNetCoreTargetFrameworks>$(NetCoreTargetFrameworks)</TestNetCoreTargetFrameworks>\n  </PropertyGroup>\n\n  <PropertyGroup>\n    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>\n    <LangVersion>latest</LangVersion>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>disable</ImplicitUsings>\n    <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>\n    <DebugType>portable</DebugType>\n    <DebugSymbols>true</DebugSymbols>\n    <SuppressNETCoreSdkPreviewMessage>true</SuppressNETCoreSdkPreviewMessage>\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\n    <Deterministic>true</Deterministic>\n    <Features>debug-determinism</Features>\n\n    <!-- https://learn.microsoft.com/dotnet/fundamentals/package-validation/overview -->\n    <EnablePackageValidation>true</EnablePackageValidation>\n\n    <EnableXlfLocalization>false</EnableXlfLocalization>\n    <UpdateXlfOnBuild>false</UpdateXlfOnBuild>\n\n    <!--\n      Opt Arcade-driven (restore.cmd, official build, and CI build) restores into using NuGet's static-graph restore\n      (https://learn.microsoft.com/nuget/reference/msbuild-targets#restoring-with-msbuild-static-graph-evaluation),\n      which uses MSBuild's static-graph-construction features to speed up the restore operation.\n     -->\n    <RestoreUseStaticGraphEvaluation>true</RestoreUseStaticGraphEvaluation>\n\n    <!-- These are explicitly set in src/Analyzers and src/Generators -->\n    <GenerateNeutralResourcesLanguageAttribute>false</GenerateNeutralResourcesLanguageAttribute>\n\n    <!-- Allow SourceLink to work for strongly types resource files (SR) by embedding generated files into the PDBs -->\n    <EmbedUntrackedSources>true</EmbedUntrackedSources>\n\n    <!-- Opt in to build acceleration in VS (from 17.5 onwards): https://github.com/dotnet/project-system/blob/main/docs/build-acceleration.md -->\n    <ProduceReferenceAssembly>true</ProduceReferenceAssembly>\n    <AccelerateBuildsInVisualStudio>true</AccelerateBuildsInVisualStudio>\n\n    <!-- This repo introduces a replacement generator, we don't use the one from dotnet/runtime -->\n    <DisableMicrosoftExtensionsLoggingSourceGenerator>true</DisableMicrosoftExtensionsLoggingSourceGenerator>\n  </PropertyGroup>\n\n  <!-- https://github.com/dotnet/aspnetcore/blob/72b0269372a/eng/Common.props#L3-L6 -->\n  <PropertyGroup>\n    <TargetOsName Condition=\" '$(TargetOsName)' == '' AND $([MSBuild]::IsOSPlatform('Windows'))\">win</TargetOsName>\n    <IsWindowsBuild>false</IsWindowsBuild>\n    <IsWindowsBuild Condition=\" '$(TargetOsName)' == 'win' \">true</IsWindowsBuild>\n  </PropertyGroup>\n\n  <PropertyGroup Condition=\"'$(DotNetBuildOffline)' == 'true'\">\n    <!--\n      Arcade has a special version prop for CodeAnalysis.CSharp in GenFacades\n      to try to match the version loaded by msbuild.  In the offline build, this\n      is simply the source-built version.\n    -->\n    <MsbuildTaskMicrosoftCodeAnalysisCSharpVersion>$(MicrosoftCodeAnalysisCSharpVersion)</MsbuildTaskMicrosoftCodeAnalysisCSharpVersion>\n  </PropertyGroup>\n\n  <!-- Test configuration -->\n  <PropertyGroup>\n    <!-- Disable building Integration Test projects in LUT. -->\n    <BuildForLiveUnitTesting Condition=\"'$(BuildForLiveUnitTesting)' == '' and '$(IsIntegrationTestProject)' == 'true'\">false</BuildForLiveUnitTesting>\n\n    <!-- Redirect test logs into a subfolder -->\n    <TestResultsLogDir>$([MSBuild]::NormalizeDirectory('$(ArtifactsLogDir)', 'TestLogs'))</TestResultsLogDir>\n\n    <!--\n      Run tests with the VS Test Runner (dotnet test) instead of the XUnit Test runner (dotnet exec).\n      This is needed to produce Cobertura code coverage. See the targets file to more information.\n    -->\n    <UseVSTestRunner>true</UseVSTestRunner>\n  </PropertyGroup>\n\n  <!-- Common properties -->\n  <Import Project=\"$(MSBuildThisFileDirectory)\\eng\\MSBuild\\Analyzers.props\" />\n  <Import Project=\"$(MSBuildThisFileDirectory)\\eng\\MSBuild\\Packaging.props\" />\n  <Import Project=\"$(MSBuildThisFileDirectory)\\eng\\MSBuild\\LegacySupport.props\" />\n  <Import Project=\"$(MSBuildThisFileDirectory)\\eng\\MSBuild\\Shared.props\" />\n  <Import Project=\"$(MSBuildThisFileDirectory)\\eng\\MSBuild\\Generators.props\" />\n</Project>\n"
        },
        {
          "name": "Directory.Build.targets",
          "type": "blob",
          "size": 5.822265625,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project>\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.DotNet.Arcade.Sdk\" />\n  <Import Project=\"$(MSBuildThisFileDirectory)\\eng\\MSBuild\\Analyzers.targets\" />\n  <Import Project=\"$(MSBuildThisFileDirectory)\\eng\\MSBuild\\Packaging.targets\" />\n  <Import Project=\"$(MSBuildThisFileDirectory)\\eng\\MSBuild\\LegacySupport.targets\" />\n  <Import Project=\"$(MSBuildThisFileDirectory)\\eng\\MSBuild\\Shared.targets\" />\n  <Import Project=\"$(MSBuildThisFileDirectory)\\eng\\MSBuild\\Generators.targets\" />\n  <Import Project=\"$(MSBuildThisFileDirectory)\\eng\\MSBuild\\ProjectStaging.targets\" />\n\n  <!-- Warning stuff -->\n  <PropertyGroup>\n    <MSBuildWarningsAsMessages>$(MSBuildWarningsAsMessages);NETSDK1138;MSB3270</MSBuildWarningsAsMessages>\n    <WarningLevel>5</WarningLevel>\n\n    <!-- This is false for local development, but set to true in the CI system -->\n    <TreatWarningsAsErrors Condition=\" '$(TreatWarningsAsErrors)' == '' \">false</TreatWarningsAsErrors>\n\n    <!-- Prevent analyzer crashes from stopping things -->\n    <NoWarn>$(NoWarn);AD0001</NoWarn>\n\n    <!-- Experimental warnings are for customers, not for this repo -->\n    <NoWarn>$(NoWarn);EXTEXP0001;EXTEXP0002;EXTEXP0003;EXTEXP0004;EXTEXP0005;EXTEXP0006;EXTEXP0007;EXTEXP0008;EXTEXP0009;EXTEXP0010;EXTEXP0011;EXTEXP0012;EXTEXP0013;EXTEXP0014;EXTEXP0015;EXTEXP0016;EXTEXP0017;EXTEXP0018</NoWarn>\n\n    <!-- Obsoletion warnings are for customers, not for this repo -->\n    <NoWarn>$(NoWarn);EXTOBS0001;</NoWarn>\n\n    <!-- NU5104: A stable release of a package should not have a prerelease dependency -->\n    <NoWarn>$(NoWarn);NU5104</NoWarn>\n\n    <NoWarn Condition=\"'$(GenerateDocumentationFile)' != 'true'\">$(NoWarn);SA1600;SA0001</NoWarn>\n\n    <!-- Conflicts with SA1405: Debug.Assert should provide message text -->\n    <NoWarn>$(NoWarn);S3236</NoWarn>\n\n    <!-- Legacy targets do not support attributes for a nullable context thus suppressing null check warnings -->\n    <NoWarn Condition=\"'$(TargetFramework)' == 'net462' or '$(TargetFramework)' == 'netstandard2.0'\">$(NoWarn);CA1062</NoWarn>\n  </PropertyGroup>\n\n  <ItemGroup Condition=\"('$(Stage)' == 'normal' OR '$(Stage)' == 'obsolete') AND '$(OutputType)' != 'Exe' AND '$(IsPackable)' == 'true' AND '$(Api)' != 'false'\">\n    <AdditionalFiles Include=\"$(MSBuildProjectName).json\" Visible=\"False\" CopyToOutputDirectory=\"PreserveNewest\" />\n  </ItemGroup>\n\n  <Target\n    Name=\"AddApiBaselineFilesToRoot\"\n    Condition=\"('$(Stage)' == 'normal' OR '$(Stage)'=='obsolete') AND '$(OutputType)' != 'Exe' AND '$(IsPackable)' == 'true' AND '$(Api)' != 'false'\"\n    BeforeTargets=\"BeforeCompile\">\n      <WriteLinesToFile\n        File=\"$(MSBuildProjectName).json\"\n        Lines=\"\"\n        Condition=\"!Exists('$(MSBuildProjectName).json')\" />\n  </Target>\n\n  <ItemGroup Condition=\"'$(Stage)' == 'dev' AND '$(OutputType)' != 'Exe' AND '$(Api)' != 'false'\">\n    <AssemblyAttribute Include=\"System.Diagnostics.CodeAnalysis.ExperimentalAttribute\">\n      <_Parameter1>$(StageDevDiagnosticId)</_Parameter1>\n      <_Parameter2>UrlFormat = \"https://aka.ms/dotnet-extensions-warnings/{0}\"</_Parameter2>\n      <_Parameter2_IsLiteral>true</_Parameter2_IsLiteral>\n    </AssemblyAttribute>\n  </ItemGroup>\n\n  <Target Name=\"AddInternalsVisibleToDynamicProxyGenAssembly2\" BeforeTargets=\"BeforeCompile\">\n    <ItemGroup Condition=\"'@(InternalsVisibleToDynamicProxyGenAssembly2->Count())' &gt; 0\">\n      <AssemblyAttribute Include=\"System.Runtime.CompilerServices.InternalsVisibleTo\">\n        <_Parameter1 Condition=\"'$(SignArtifacts)' == 'true' \">DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7</_Parameter1>\n        <_Parameter1 Condition=\"'$(SignArtifacts)' != 'true' \">DynamicProxyGenAssembly2</_Parameter1>\n      </AssemblyAttribute>\n    </ItemGroup>\n  </Target>\n\n  <Target Name=\"AddInternalsVisibleToTest\" Condition=\"'$(BuildTests)'!='false'\" BeforeTargets=\"BeforeCompile\">\n    <ItemGroup Condition=\"'@(InternalsVisibleToTest->Count())' &gt; 0\">\n      <InternalsVisibleTo Include=\"%(InternalsVisibleToTest.Identity)\" />\n    </ItemGroup>\n  </Target>\n\n  <Target Name=\"_ConfigureTestRunnerAdditionalArguments\" BeforeTargets=\"_InnerGetTestsToRun\">\n    <PropertyGroup>\n      <!-- See https://learn.microsoft.com/dotnet/core/tools/dotnet-test -->\n      <_BlameArgs>--blame --blame-crash --blame-crash-dump-type full --blame-hang --blame-hang-dump-type full --blame-hang-timeout 6m</_BlameArgs>\n\n      <!-- This property is used by the Arcade SDK while bootstrapping the VS Test runner -->\n      <TestRunnerAdditionalArguments>$(TestRunnerAdditionalArguments) $(_BlameArgs)</TestRunnerAdditionalArguments>\n    </PropertyGroup>\n  </Target>\n\n  <!-- This target will make sure that projects targeting net462 will also have the Microsoft.Extensions.Logging.Abstractions analyzer removed. -->\n  <Target Name=\"_Microsoft_Extensions_Logging_AbstractionsRemoveAnalyzers\"\n          Condition=\"'$(DisableMicrosoftExtensionsLoggingSourceGenerator)' == 'true'\"\n          AfterTargets=\"ResolveReferences\">\n    <ItemGroup>\n      <_Microsoft_Extensions_Logging_AbstractionsAnalyzer Include=\"@(Analyzer)\" Condition=\"'%(Analyzer.NuGetPackageId)' == 'Microsoft.Extensions.Logging.Abstractions' Or\n                                                                                           ('%(Analyzer.AssemblyName)' == 'Microsoft.Extensions.Logging.Generators' and '%(Analyzer.NuGetPackageId)' == 'Microsoft.AspNetCore.App.Ref')\" />\n    </ItemGroup>\n\n    <!-- Remove Microsoft.Extensions.Logging.Abstractions Analyzer -->\n    <ItemGroup>\n      <Analyzer Remove=\"@(_Microsoft_Extensions_Logging_AbstractionsAnalyzer)\" />\n    </ItemGroup>\n  </Target>\n</Project>\n"
        },
        {
          "name": "Directory.Packages.props",
          "type": "blob",
          "size": 0.1923828125,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <Import Project=\"$(MSBuildThisFileDirectory)\\eng\\packages\\General.props\" />\n</Project>"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0947265625,
          "content": "The MIT License (MIT)\n\nCopyright (c) .NET Foundation. All rights reserved.\n\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "NuGet.config",
          "type": "blob",
          "size": 1.634765625,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <clear />\n    <add key=\"dotnet-public\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public/nuget/v3/index.json\" />\n    <add key=\"dotnet-eng\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json\" />\n    <add key=\"dotnet-tools\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json\" />\n    <add key=\"dotnet9\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet9/nuget/v3/index.json\" />\n    <add key=\"dotnet9-transport\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet9-transport/nuget/v3/index.json\" />\n    <!-- Used for the Rich Navigation indexing task -->\n    <add key=\"richnav\" value=\"https://pkgs.dev.azure.com/azure-public/vside/_packaging/vs-buildservices/nuget/v3/index.json\" />\n  </packageSources>\n  <!-- Define mappings by adding package patterns beneath the target source.\n       https://aka.ms/nuget-package-source-mapping  -->\n  <packageSourceMapping>\n    <packageSource key=\"dotnet-public\">\n      <package pattern=\"*\" />\n    </packageSource>\n    <packageSource key=\"dotnet-eng\">\n      <package pattern=\"*\" />\n    </packageSource>\n    <packageSource key=\"dotnet-tools\">\n      <package pattern=\"*\" />\n    </packageSource>\n    <packageSource key=\"dotnet9\">\n      <package pattern=\"*\" />\n    </packageSource>\n    <packageSource key=\"dotnet9-transport\">\n      <package pattern=\"*\" />\n    </packageSource>\n    <packageSource key=\"richnav\">\n      <package pattern=\"*\" />\n    </packageSource>\n  </packageSourceMapping>\n  <disabledPackageSources />\n</configuration>\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.4404296875,
          "content": "# Enriched Capabilities\n\nThis repository contains a suite of libraries that provide facilities commonly needed when creating production-ready applications. Initially developed to support high-scale and high-availability services within Microsoft, such as Microsoft Teams, these libraries deliver functionality that can help make applications more efficient, more robust, and more manageable.\n\nThe major functional areas this repo addresses are:\n- AI: Abstractions and middlewares for working with generative AI models and services.\n- Compliance: Mechanisms to help manage application data according to privacy regulations and policies, which includes a data annotation framework, audit report generation, and telemetry redaction.\n- Diagnostics: Provides a set of APIs that can be used to gather and report diagnostic information about the health of a service.\n- Contextual Options: Extends the .NET Options model to enable experimentations in production.\n- Resilience: Builds on top of the popular Polly library to provide sophisticated resilience pipelines to make applications robust to transient errors.\n- Telemetry: Sophisticated telemetry facilities provide enhanced logging, metering, tracing, and latency measuring functionality.\n- AspNetCore extensions: Provides different middlewares and extensions that can be used to build high-performance and high-availability ASP.NET Core services.\n- Static Analysis: Curated static analysis settings to help improve your code.\n- Testing: Dramatically simplifies testing around common .NET abstractions such as ILogger and the TimeProvider.\n\n[![Build Status](https://dev.azure.com/dnceng/internal/_apis/build/status/r9/dotnet-r9?branchName=main)](https://dev.azure.com/dnceng/internal/_build/latest?definitionId=1223&branchName=main)\n[![Help Wanted](https://img.shields.io/github/issues/dotnet/extensions/help%20wanted?style=flat-square&color=%232EA043&label=help%20wanted)](https://github.com/dotnet/extensions/labels/help%20wanted)\n[![Discord](https://img.shields.io/discord/732297728826277939?style=flat-square&label=Discord&logo=discord&logoColor=white&color=7289DA)](https://aka.ms/dotnet-discord)\n\n## How can I contribute?\n\nWe welcome contributions! Many people all over the world have helped make this project better.\n\n* [Contributing](CONTRIBUTING.md) explains what kinds of contributions we welcome\n* [Build instructions](docs/building.md) explains how to build and test\n\n## Reporting security issues and security bugs\n\nSecurity issues and bugs should be reported privately, via email, to the Microsoft Security Response Center (MSRC) <secure@microsoft.com>. You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Further information, including the MSRC PGP key, can be found in the [Security TechCenter](https://www.microsoft.com/msrc/faqs-report-an-issue). You can also find these instructions in this repo's [Security doc](SECURITY.md).\n\nAlso see info about related [Microsoft .NET Core and ASP.NET Core Bug Bounty Program](https://www.microsoft.com/msrc/bounty-dot-net-core).\n\n## Useful Links\n\n* [.NET Core source index](https://source.dot.net) / [.NET Framework source index](https://referencesource.microsoft.com)\n* [API Reference docs](https://docs.microsoft.com/dotnet/api)\n* [.NET API Catalog](https://apisof.net) (incl. APIs from daily builds and API usage info)\n* [API docs writing guidelines](https://github.com/dotnet/dotnet-api-docs/wiki) - useful when writing /// comments\n* [.NET Discord Server](https://aka.ms/dotnet-discord) - a place to discuss the development of .NET and its ecosystem\n\n## .NET Foundation\n\nThis project is a [.NET Foundation](https://www.dotnetfoundation.org/projects) project.\n\nThere are many .NET related projects on GitHub.\n\n* [.NET home repo](https://github.com/Microsoft/dotnet) - links to 100s of .NET projects, from Microsoft and the community.\n* [ASP.NET Core home](https://docs.microsoft.com/aspnet/core) - the best place to start learning about ASP.NET Core.\n\nThis project has adopted the code of conduct defined by the [Contributor Covenant](https://contributor-covenant.org) to clarify expected behavior in our community. For more information, see the [.NET Foundation Code of Conduct](https://www.dotnetfoundation.org/code-of-conduct).\n\nGeneral .NET OSS discussions: [.NET Foundation Discussions](https://github.com/dotnet-foundation/Home/discussions)\n\n## License\n\n.NET (including the runtime repo) is licensed under the [MIT](LICENSE) license.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.7158203125,
          "content": "<!-- BEGIN MICROSOFT SECURITY.MD V0.0.6 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://docs.microsoft.com/en-us/previous-versions/tn-archive/cc751383(v=technet.10)), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://msrc.microsoft.com/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://www.microsoft.com/en-us/msrc/pgp-key-msrc).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://www.microsoft.com/msrc). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://microsoft.com/msrc/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://www.microsoft.com/en-us/msrc/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n"
        },
        {
          "name": "THIRD-PARTY-NOTICES.TXT",
          "type": "blob",
          "size": 0.345703125,
          "content": ".NET Core uses third-party libraries or other resources that may be\ndistributed under licenses different than the .NET Core software.\n\nIn the event that we accidentally failed to list a required notice, please\nbring it to our attention. Post an issue or email us:\n\n           dotnet@microsoft.com\n\nThe attached notices are provided for information only.\n"
        },
        {
          "name": "azure-pipelines-public.yml",
          "type": "blob",
          "size": 7.43359375,
          "content": "# Setting batch to true, triggers one build at a time.\n# if there is a push while a build in progress, it will wait,\n# until the running build finishes, and produce a build with all the changes\n# that happened during the last build.\ntrigger:\n  batch: true\n  branches:\n    include:\n      - main\n      - dev\n      - release/*\n  paths:\n    include:\n      - '*'\n    exclude:\n      - eng/Version.Details.xml\n      - .github/*\n      - docs/*\n      - CODE_OF_CONDUCT.md\n      - CONTRIBUTING.md\n      - README.md\n      - SECURITY.md\n      - LICENSE.TXT\n      - PATENTS.TXT\n      - THIRD-PARTY-NOTICES.TXT\n\npr:\n  branches:\n    include:\n      - main\n      - dev\n      - release/*\n  paths:\n    include:\n      - '*'\n    exclude:\n      - eng/Version.Details.xml\n      - .github/*\n      - docs/*\n      - CODE_OF_CONDUCT.md\n      - CONTRIBUTING.md\n      - README.md\n      - SECURITY.md\n      - LICENSE.TXT\n      - PATENTS.TXT\n      - THIRD-PARTY-NOTICES.TXT\n\nvariables:\n  - name: Build.Arcade.ArtifactsPath\n    value: $(Build.SourcesDirectory)/artifacts/\n  - name: Build.Arcade.LogsPath\n    value: $(Build.Arcade.ArtifactsPath)log/$(_BuildConfig)/\n  - name: Build.Arcade.TestResultsPath\n    value: $(Build.Arcade.ArtifactsPath)TestResults/$(_BuildConfig)/\n\n  - name: SkipQualityGates\n    value: false\n  - name: _TeamName\n    value: dotnet-r9\n  - name: NativeToolsOnMachine\n    value: true\n  - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE\n    value: true\n  - name: _BuildConfig\n    value: Release\n  - name: PostBuildSign\n    value: false\n  # needed for darc (dependency flow) publishing\n  - name: _PublishArgs\n    value: ''\n  - name: _OfficialBuildIdArgs\n    value: ''\n  # needed for signing\n  - name: _SignType\n    value: test\n  - name: _SignArgs\n    value: ''\n  - name: _Sign\n    value: false\n\nstages:\n- stage: build\n  displayName: Build\n  variables:\n  - template: /eng/common/templates/variables/pool-providers.yml\n  jobs:\n  - template: /eng/common/templates/jobs/jobs.yml\n    parameters:\n      enableMicrobuild: true\n      enableTelemetry: true\n      enableSourceIndex: false\n      runAsPublic: true\n      # Publish build logs\n      enablePublishBuildArtifacts: true\n      # Publish test logs\n      enablePublishTestResults: true\n      # Publish NuGet packages using v3\n      # https://github.com/dotnet/arcade/blob/main/Documentation/CorePackages/Publishing.md#basic-onboarding-scenario-for-new-repositories-to-the-current-publishing-version-v3\n      enablePublishUsingPipelines: true\n      enablePublishBuildAssets: true\n      workspace:\n        clean: all\n\n      jobs:\n\n      # ----------------------------------------------------------------\n      # This job build and run tests on Windows\n      # ----------------------------------------------------------------\n      - job: Windows\n        timeoutInMinutes: 180\n        testResultsFormat: VSTest\n\n        pool:\n          name: $(DncEngPublicBuildPool)\n          demands: ImageOverride -equals windows.vs2022preview.amd64.open\n\n        variables:\n          - _buildScript: $(Build.SourcesDirectory)/build.cmd -ci -NativeToolsOnMachine\n\n        preSteps:\n          - checkout: self\n            clean: true\n            persistCredentials: true\n            fetchDepth: 1\n\n        steps:\n          - template: /eng/pipelines/templates/BuildAndTest.yml\n            parameters:\n              buildScript: $(_buildScript)\n              buildConfig: $(_BuildConfig)\n              repoLogPath: $(Build.Arcade.LogsPath)\n              repoTestResultsPath: $(Build.Arcade.TestResultsPath)\n              skipQualityGates: ${{ eq(variables['SkipQualityGates'], 'true') }}\n              isWindows: true\n              warnAsError: 0\n              runAsPublic: true\n\n      # ----------------------------------------------------------------\n      # This job build and run tests on Ubuntu\n      # ----------------------------------------------------------------\n      - job: Ubuntu\n        timeoutInMinutes: 180\n        testResultsFormat: VSTest\n\n        pool:\n          name: $(DncEngPublicBuildPool)\n          demands: ImageOverride -equals build.ubuntu.2004.amd64.open\n\n        variables:\n          - _buildScript: $(Build.SourcesDirectory)/build.sh --ci\n\n        preSteps:\n          - checkout: self\n            clean: true\n            persistCredentials: true\n            fetchDepth: 1\n\n        steps:\n          - template: /eng/pipelines/templates/BuildAndTest.yml\n            parameters:\n              buildScript: $(_buildScript)\n              buildConfig: $(_BuildConfig)\n              repoLogPath: $(Build.Arcade.LogsPath)\n              repoTestResultsPath: $(Build.Arcade.TestResultsPath)\n              skipQualityGates: ${{ eq(variables['SkipQualityGates'], 'true') }}\n              isWindows: false\n              warnAsError: 0\n              runAsPublic: true\n\n\n# ----------------------------------------------------------------\n# This stage performs quality gates enforcements\n# ----------------------------------------------------------------\n- stage: codecoverage\n  displayName: CodeCoverage\n  dependsOn: \n    - build\n  condition: and(succeeded('build'), ne(variables['SkipQualityGates'], 'true'))\n  variables:\n  - template: /eng/common/templates/variables/pool-providers.yml\n  jobs:\n  - template: /eng/common/templates/jobs/jobs.yml\n    parameters:\n      enableMicrobuild: true\n      enableTelemetry: true\n      runAsPublic: true\n      workspace:\n        clean: all\n\n      # ----------------------------------------------------------------\n      # This stage downloads the code coverage reports from the build jobs,\n      # merges those and validates the combined test coverage.\n      # ----------------------------------------------------------------\n      jobs:\n      - job: CodeCoverageReport\n        timeoutInMinutes: 180\n\n        pool:\n          name: $(DncEngPublicBuildPool)\n          demands: ImageOverride -equals build.ubuntu.2004.amd64.open\n\n        preSteps:\n          - checkout: self\n            clean: true\n            persistCredentials: true\n            fetchDepth: 1\n\n        steps:\n        - script: $(Build.SourcesDirectory)/build.sh --ci --restore\n          displayName: Init toolset\n\n        - template: /eng/pipelines/templates/VerifyCoverageReport.yml\n\n\n# ----------------------------------------------------------------\n# This stage only performs a build treating warnings as errors\n# to detect any kind of code style violations\n# ----------------------------------------------------------------\n- stage: correctness\n  displayName: Correctness\n  dependsOn: []\n  variables:\n  - template: /eng/common/templates/variables/pool-providers.yml\n  jobs:\n  - template: /eng/common/templates/jobs/jobs.yml\n    parameters:\n      enableMicrobuild: true\n      enableTelemetry: true\n      runAsPublic: true\n      workspace:\n        clean: all\n\n      jobs:\n      - job: WarningsCheck\n        timeoutInMinutes: 180\n\n        pool:\n          name: $(DncEngPublicBuildPool)\n          demands: ImageOverride -equals build.ubuntu.2004.amd64.open\n\n        variables:\n          - _buildScript: $(Build.SourcesDirectory)/build.sh --ci\n\n        preSteps:\n          - checkout: self\n            clean: true\n            persistCredentials: true\n            fetchDepth: 1\n\n        steps:\n          - template: /eng/pipelines/templates/BuildAndTest.yml\n            parameters:\n              buildScript: $(_buildScript)\n              buildConfig: $(_BuildConfig)\n              repoLogPath: $(Build.Arcade.LogsPath)\n              repoTestResultsPath: $(Build.Arcade.TestResultsPath)\n              skipTests: true\n              skipQualityGates: true\n              isWindows: false\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 11.2060546875,
          "content": "# Setting batch to true, triggers one build at a time.\n# if there is a push while a build in progress, it will wait,\n# until the running build finishes, and produce a build with all the changes\n# that happened during the last build.\ntrigger:\n  batch: true\n  branches:\n    include:\n      - main\n      - dev\n      - release/*\n      - internal/release/*\n  paths:\n    include:\n      - '*'\n    exclude:\n      - eng/Version.Details.xml\n      - .github/*\n      - docs/*\n      - CODE_OF_CONDUCT.md\n      - CONTRIBUTING.md\n      - README.md\n      - SECURITY.md\n      - LICENSE.TXT\n      - PATENTS.TXT\n      - THIRD-PARTY-NOTICES.TXT\n\npr:\n  branches:\n    include:\n      - main\n      - dev\n      - release/*\n      - internal/release/*\n  paths:\n    include:\n      - '*'\n    exclude:\n      - eng/Version.Details.xml\n      - .github/*\n      - docs/*\n      - CODE_OF_CONDUCT.md\n      - CONTRIBUTING.md\n      - README.md\n      - SECURITY.md\n      - LICENSE.TXT\n      - PATENTS.TXT\n      - THIRD-PARTY-NOTICES.TXT\n\nvariables:\n  - name: _TeamName\n    value: dotnet-r9\n  - name: NativeToolsOnMachine\n    value: true\n  - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE\n    value: true\n\n  - name: SkipQualityGates\n    value: false\n\n  - name: runAsPublic\n    value: ${{ eq(variables['System.TeamProject'], 'public') }}\n\n  - name: _BuildConfig\n    value: Release\n  - name: isOfficialBuild\n    value: ${{ and(ne(variables['runAsPublic'], 'true'), notin(variables['Build.Reason'], 'PullRequest')) }}\n  - name: Build.Arcade.ArtifactsPath\n    value: $(Build.SourcesDirectory)/artifacts/\n  - name: Build.Arcade.LogsPath\n    value: $(Build.Arcade.ArtifactsPath)log/$(_BuildConfig)/\n  - name: Build.Arcade.TestResultsPath\n    value: $(Build.Arcade.ArtifactsPath)TestResults/$(_BuildConfig)/\n\n  - ${{ if or(startswith(variables['Build.SourceBranch'], 'refs/heads/release/'), startswith(variables['Build.SourceBranch'], 'refs/heads/internal/release/'), eq(variables['Build.Reason'], 'Manual')) }}:\n    - name: PostBuildSign\n      value: false\n  - ${{ else }}:\n    - name: PostBuildSign\n      value: true\n\n  # Produce test-signed build for PR and Public builds\n  - ${{ if or(eq(variables['runAsPublic'], 'true'), eq(variables['Build.Reason'], 'PullRequest')) }}:\n    # needed for darc (dependency flow) publishing\n    - name: _PublishArgs\n      value: ''\n    - name: _OfficialBuildIdArgs\n      value: ''\n    # needed for signing\n    - name: _SignType\n      value: test\n    - name: _SignArgs\n      value: ''\n    - name: _Sign\n      value: false\n\n  # Set up non-PR build from internal project\n  - ${{ if and(ne(variables['runAsPublic'], 'true'), ne(variables['Build.Reason'], 'PullRequest')) }}:\n    # needed for darc (dependency flow) publishing\n    - name: _PublishArgs\n      value: >-\n            /p:DotNetPublishUsingPipelines=true\n    - name: _OfficialBuildIdArgs\n      value: /p:OfficialBuildId=$(BUILD.BUILDNUMBER)\n    # needed for signing\n    - name: _SignType\n      value: real\n    - name: _SignArgs\n      value: /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName) /p:Sign=$(_Sign) /p:DotNetPublishUsingPipelines=true\n    - name: _Sign\n      value: true\n\nresources:\n  repositories:\n  - repository: 1ESPipelineTemplates\n    type: git\n    name: 1ESPipelineTemplates/1ESPipelineTemplates\n    ref: refs/tags/release\n\nextends:\n  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates\n  parameters:\n    sdl:\n      policheck:\n        enabled: true\n        exclusionsFile: $(Build.SourcesDirectory)\\.config\\PoliCheckExclusions.xml\n      sourceAnalysisPool:\n        name: NetCore1ESPool-Internal\n        image: windows.vs2022preview.amd64\n        os: windows\n      tsa:\n        enabled: true\n    customBuildTags:\n    - ES365AIMigrationTooling\n\n    stages:\n    - stage: build\n      displayName: Build\n      variables:\n      - template: /eng/common/templates-official/variables/pool-providers.yml@self\n      jobs:\n      - template: /eng/common/templates-official/jobs/jobs.yml@self\n        parameters:\n          enableMicrobuild: true\n          enableTelemetry: true\n          enableSourceIndex: true\n          runAsPublic: ${{ variables['runAsPublic'] }}\n          # Publish build logs\n          enablePublishBuildArtifacts: true\n          # Publish test logs\n          enablePublishTestResults: true\n          # Publish NuGet packages using v3\n          # https://github.com/dotnet/arcade/blob/main/Documentation/CorePackages/Publishing.md#basic-onboarding-scenario-for-new-repositories-to-the-current-publishing-version-v3\n          enablePublishUsingPipelines: true\n          enablePublishBuildAssets: true\n          workspace:\n            clean: all\n\n          jobs:\n\n          # ----------------------------------------------------------------\n          # This job build and run tests on Windows\n          # ----------------------------------------------------------------\n          - job: Windows\n            timeoutInMinutes: 180\n            testResultsFormat: VSTest\n            pool:\n              name: NetCore1ESPool-Internal\n              image: windows.vs2022preview.amd64\n              os: windows\n\n            variables:\n            - _buildScript: $(Build.SourcesDirectory)/build.cmd -ci -NativeToolsOnMachine\n\n            preSteps:\n            - checkout: self\n              clean: true\n              persistCredentials: true\n              fetchDepth: 1\n\n            steps:\n            - template: /eng/pipelines/templates/BuildAndTest.yml\n              parameters:\n                buildScript: $(_buildScript)\n                buildConfig: $(_BuildConfig)\n                repoLogPath: $(Build.Arcade.LogsPath)\n                repoTestResultsPath: $(Build.Arcade.TestResultsPath)\n                skipQualityGates: ${{ eq(variables['SkipQualityGates'], 'true') }}\n                isWindows: true\n                warnAsError: 0\n\n          # ----------------------------------------------------------------\n          # This job build and run tests on Ubuntu\n          # ----------------------------------------------------------------\n          - job: Ubuntu\n            timeoutInMinutes: 180\n            testResultsFormat: VSTest\n            pool:\n              name: NetCore1ESPool-Internal\n              image: 1es-mariner-2\n              os: linux\n\n            variables:\n            - _buildScript: $(Build.SourcesDirectory)/build.sh --ci\n\n            preSteps:\n            - checkout: self\n              clean: true\n              persistCredentials: true\n              fetchDepth: 1\n\n            steps:\n            - template: /eng/pipelines/templates/BuildAndTest.yml\n              parameters:\n                buildScript: $(_buildScript)\n                buildConfig: $(_BuildConfig)\n                repoLogPath: $(Build.Arcade.LogsPath)\n                repoTestResultsPath: $(Build.Arcade.TestResultsPath)\n                skipQualityGates: ${{ eq(variables['SkipQualityGates'], 'true') }}\n                isWindows: false\n                warnAsError: 0\n\n    # ----------------------------------------------------------------\n    # This stage performs quality gates enforcements\n    # ----------------------------------------------------------------\n    - stage: codecoverage\n      displayName: CodeCoverage\n      dependsOn:\n      - build\n      condition: and(succeeded('build'), ne(variables['SkipQualityGates'], 'true'))\n      variables:\n      - template: /eng/common/templates-official/variables/pool-providers.yml@self\n      jobs:\n      - template: /eng/common/templates-official/jobs/jobs.yml@self\n        parameters:\n          enableMicrobuild: true\n          enableTelemetry: true\n          runAsPublic: ${{ variables['runAsPublic'] }}\n          workspace:\n            clean: all\n\n          # ----------------------------------------------------------------\n          # This stage downloads the code coverage reports from the build jobs,\n          # merges those and validates the combined test coverage.\n          # ----------------------------------------------------------------\n          jobs:\n          - job: CodeCoverageReport\n            timeoutInMinutes: 180\n\n            pool:\n              name: NetCore1ESPool-Internal\n              image: 1es-mariner-2\n              os: linux\n\n            preSteps:\n            - checkout: self\n              clean: true\n              persistCredentials: true\n              fetchDepth: 1\n\n            steps:\n            - script: $(Build.SourcesDirectory)/build.sh --ci --restore\n              displayName: Init toolset\n\n            - template: /eng/pipelines/templates/VerifyCoverageReport.yml\n\n\n    # ----------------------------------------------------------------\n    # This stage only performs a build treating warnings as errors\n    # to detect any kind of code style violations\n    # ----------------------------------------------------------------\n    - stage: correctness\n      displayName: Correctness\n      dependsOn: []\n      variables:\n      - template: /eng/common/templates-official/variables/pool-providers.yml@self\n      jobs:\n      - template: /eng/common/templates-official/jobs/jobs.yml@self\n        parameters:\n          enableMicrobuild: true\n          enableTelemetry: true\n          runAsPublic: ${{ variables['runAsPublic'] }}\n          workspace:\n            clean: all\n\n          jobs:\n          - job: WarningsCheck\n            timeoutInMinutes: 180\n\n            pool:\n              ${{ if eq(variables['runAsPublic'], 'true') }}:\n              name: NetCore1ESPool-Internal\n              image: 1es-mariner-2\n              os: linux\n\n            variables:\n            - _buildScript: $(Build.SourcesDirectory)/build.sh --ci\n\n            preSteps:\n            - checkout: self\n              clean: true\n              persistCredentials: true\n              fetchDepth: 1\n\n            steps:\n            - template: '\\eng\\pipelines\\templates\\BuildAndTest.yml'\n              parameters:\n                buildScript: $(_buildScript)\n                buildConfig: $(_BuildConfig)\n                repoLogPath: $(Build.Arcade.LogsPath)\n                repoTestResultsPath: $(Build.Arcade.TestResultsPath)\n                skipTests: true\n                skipQualityGates: true\n                isWindows: false\n\n\n    # Publish and validation steps. Only run in official builds\n    - ${{ if and(ne(variables['runAsPublic'], 'true'), notin(variables['Build.Reason'], 'PullRequest')) }}:\n      - template: /eng/common/templates-official/post-build/post-build.yml@self\n        parameters:\n          validateDependsOn:\n          - build\n          - codecoverage\n          - correctness\n          publishingInfraVersion: 3\n          enableSymbolValidation: false\n          enableSigningValidation: false\n          enableNugetValidation: false\n          enableSourceLinkValidation: false\n          # these param values come from the DotNet-Winforms-SDLValidation-Params azdo variable group\n          SDLValidationParameters:\n            enable: false\n            params: ' -SourceToolsList $(_TsaSourceToolsList)\n              -TsaInstanceURL $(_TsaInstanceURL)\n              -TsaProjectName $(_TsaProjectName)\n              -TsaNotificationEmail $(_TsaNotificationEmail)\n              -TsaCodebaseAdmin $(_TsaCodebaseAdmin)\n              -TsaBugAreaPath $(_TsaBugAreaPath)\n              -TsaIterationPath $(_TsaIterationPath)\n              -TsaRepositoryName $(_TsaRepositoryName)\n              -TsaCodebaseName $(_TsaCodebaseName)\n              -TsaOnboard $(_TsaOnboard)\n              -TsaPublish $(_TsaPublish)'\n"
        },
        {
          "name": "bench",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.cmd",
          "type": "blob",
          "size": 0.3095703125,
          "content": "@ECHO OFF\n\nSET _args=%*\nIF \"%~1\"==\"-?\" SET _args=-help\nIF \"%~1\"==\"/?\" SET _args=-help\n\nIF [\"%_args%\"] == [\"\"] (\n    :: Perform restore and build, IF no args are supplied.\n    SET _args=-restore -build\n)\n\npowershell -ExecutionPolicy ByPass -NoProfile -command \"& \"\"\"%~dp0eng\\build.ps1\"\"\" %_args%\"\nEXIT /b %ERRORLEVEL%\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.7607421875,
          "content": "#!/usr/bin/env bash\n\nfunction is_cygwin_or_mingw()\n{\n  case $(uname -s) in\n    CYGWIN*)    return 0;;\n    MINGW*)     return 0;;\n    *)          return 1;;\n  esac\n}\n\n# Stop script if unbound variable found (use ${var:-} if intentional)\nset -u\n\n# Stop script if command returns non-zero exit code.\n# Prevents hidden errors caused by missing error code propagation.\nset -e\n\nset -euo pipefail\n\nif [[ $# < 1 ]]\nthen\n    # Perform restore and build, if no args are supplied.\n    set -- --restore --build;\nfi\n\nDIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n\nif is_cygwin_or_mingw; then\n  # if bash shell running on Windows (not WSL),\n  # pass control to powershell build script.\n  DIR=$(cygpath -d \"$DIR\")\n  powershell -c \"$DIR\\\\build.cmd\" $@\nelse\n  \"$DIR/eng/build.sh\" $@\nfi\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "eng",
          "type": "tree",
          "content": null
        },
        {
          "name": "github-merge-flow.jsonc",
          "type": "blob",
          "size": 0.3759765625,
          "content": "// IMPORTANT: This file is read by the merge flow from main branch only. \n{\n    \"merge-flow-configurations\": {\n        // Automate opening PRs to merge extensions main branch back to dev\n        // Disable this for now as dev branch has been merged to main\n        // \"main\":{\n        //     \"MergeToBranch\": \"dev\",\n        //     \"ExtraSwitches\": \"-QuietComments\"\n        // }\n    }\n}"
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.4697265625,
          "content": "{\n  \"sdk\": {\n    \"version\": \"9.0.100\"\n  },\n  \"tools\": {\n    \"dotnet\": \"9.0.100\",\n    \"runtimes\": {\n      \"dotnet\": [\n        \"8.0.0\",\n        \"9.0.0-rc.1.24431.7\"\n      ],\n      \"aspnetcore\": [\n        \"8.0.0\",\n        \"9.0.0-rc.1.24452.1\"\n      ]\n    }\n  },\n  \"msbuild-sdks\": {\n    \"Microsoft.Build.NoTargets\": \"3.7.0\",\n    \"Microsoft.Build.Traversal\": \"3.2.0\",\n    \"Microsoft.DotNet.Arcade.Sdk\": \"9.0.0-beta.24623.3\",\n    \"Microsoft.DotNet.Helix.Sdk\": \"9.0.0-beta.24623.3\"\n  }\n}\n"
        },
        {
          "name": "restore.cmd",
          "type": "blob",
          "size": 0.2119140625,
          "content": "@echo off\nSETLOCAL\n\nset _args=%*\nif \"%~1\"==\"-?\" set _args=-help\nif \"%~1\"==\"/?\" set _args=-help\n\npowershell -ExecutionPolicy ByPass -NoProfile -command \"& \"\"\"%~dp0eng\\build.ps1\"\"\" -restore %_args%\"\nexit /b %ErrorLevel%"
        },
        {
          "name": "restore.sh",
          "type": "blob",
          "size": 0.1279296875,
          "content": "#!/usr/bin/env bash\n\nset -euo pipefail\n\nDIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n\"$DIR/eng/build.sh\" --restore \"$@\"\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "start-code.cmd",
          "type": "blob",
          "size": 0.953125,
          "content": "@ECHO OFF\nSETLOCAL\n\n:: This command launches a Visual Studio Code with environment variables required to use a local version of the .NET Core SDK.\n\nFOR /f \"delims=\" %%a IN ('where.exe code') DO @SET vscode=%%a& GOTO break\n:break\n\nIF [\"%vscode%\"] == [\"\"] (\n    echo \u001b[41m[ERROR]\u001b[0m Visual Studio Code is not installed or can't be found.\n    echo.\n    exit /b 1\n)\n\n:: This tells .NET Core to use the same dotnet.exe that build scripts use\nSET DOTNET_ROOT=%~dp0.dotnet\nSET DOTNET_ROOT(x86)=%~dp0.dotnet\\x86\n\n:: This tells .NET Core not to go looking for .NET Core in other places\nSET DOTNET_MULTILEVEL_LOOKUP=0\n\n:: Put our local dotnet.exe on PATH first so Visual Studio knows which one to use\nSET PATH=%DOTNET_ROOT%;%PATH%\n\nIF NOT EXIST \"%DOTNET_ROOT%\\dotnet.exe\" (\n    echo \u001b[41m[ERROR]\u001b[0m .NET SDK has not yet been installed. Run \u001b[93m%~dp0restore.cmd\u001b[0m to install.\n    echo.\n    exit /b 1\n)\n\nIF [\"%~1\"] == [\"\"] GOTO noargs\n\"%vscode%\" %*\nexit /b 1\n\n:noargs\n\"%vscode%\" \".\"\n"
        },
        {
          "name": "start-code.sh",
          "type": "blob",
          "size": 0.650390625,
          "content": "#!/usr/bin/env bash\n\nset -euo pipefail\n\nDIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n\n# This tells .NET Core to use the same dotnet.exe that build scripts use\nexport DOTNET_ROOT=$DIR/.dotnet\n\n# This tells .NET Core not to go looking for .NET Core in other places\nexport DOTNET_MULTILEVEL_LOOKUP=0\n\n# Put our local dotnet on PATH first so the SDK knows which one to use\nexport PATH=$DOTNET_ROOT:$PATH\n\nif [ ! -e $DOTNET_ROOT/dotnet ]; then\n    echo \"[ERROR] .NET SDK has not yet been installed. Run ./restore.sh to install tools\"\n    exit -1\nfi\n\nif [[ $# < 1 ]]\nthen\n    # Perform restore and build, if no args are supplied.\n    set -- '.';\nfi\n\ncode \"$@\"\n\n"
        },
        {
          "name": "start-vs.cmd",
          "type": "blob",
          "size": 1.5078125,
          "content": "@echo off\nsetlocal enabledelayedexpansion\n\n:: This command launches a Visual Studio solution with environment variables required to use a local version of the .NET Core SDK.\n\n:: This tells .NET Core to use the same dotnet.exe that build scripts use\nset DOTNET_ROOT=%~dp0.dotnet\nset DOTNET_ROOT(x86)=%~dp0.dotnet\\x86\n\n:: This tells .NET Core not to go looking for .NET Core in other places\nset DOTNET_MULTILEVEL_LOOKUP=0\n\n:: Put our local dotnet.exe on PATH first so Visual Studio knows which one to use\nset PATH=%DOTNET_ROOT%;%PATH%\n\nset SLN=SDK.sln\nif not exist \"%~dp0%SLN%\" (\n    echo \u001b[41m[ERROR]\u001b[0m %~dp0%SLN% not found.\n    echo See \u001b[93m%~dp0%docs\\building.md\u001b[0m for instructions on how to generate a solution file.\n    echo.\n    exit /b 1\n)\n\ncall restore.cmd\n\nif not exist \"%DOTNET_ROOT%\\dotnet.exe\" (\n    echo \u001b[41m[ERROR]\u001b[0m .NET SDK has not yet been installed. Run \u001b[93m%~dp0restore.cmd\u001b[0m to install.\n    echo.\n    exit /b 1\n)\n\n:: Prefer the VS in the developer command prompt if we're in one, followed by whatever shows up in the current search path.\nset \"DEVENV=%DevEnvDir%devenv.exe\"\n\nif exist \"%DEVENV%\" (\n    :: Fully qualified works\n    set \"COMMAND=start \"\" /B \"%ComSpec%\" /S /C \"\"%DEVENV%\" \"%~dp0%SLN%\"\"\"\n) else (\n    where devenv.exe /Q\n    if !errorlevel! equ 0 (\n        :: On the PATH, use that.\n        set \"COMMAND=start \"\" /B \"%ComSpec%\" /S /C \"devenv.exe \"%~dp0%SLN%\"\"\"\n    ) else (\n        :: Can't find devenv.exe, let file associations take care of it\n        set \"COMMAND=start /B .\\%SLN%\"\n    )\n)\n\n%COMMAND%\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "testEnvironments.json",
          "type": "blob",
          "size": 0.140625,
          "content": "﻿{\n  \"version\": \"1\",\n  \"environments\": [\n    {\n      \"name\": \"WSL Ubuntu\",\n      \"type\": \"wsl\",\n      \"wslDistribution\": \"Ubuntu\"\n    }\n  ]\n}\n"
        }
      ]
    }
  ]
}