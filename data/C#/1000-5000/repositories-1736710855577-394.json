{
  "metadata": {
    "timestamp": 1736710855577,
    "page": 394,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "eventflow/EventFlow",
      "stars": 2407,
      "defaultBranch": "develop-v1",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.7783203125,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n/.vs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Roslyn cache directories\n*.ide/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n#NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding addin-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings \n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# SourceTree\n*.orig\n\n# NCrunch\n*.ncrunchsolution\n*.ncrunchproject\n\n# Paket\n/.paket/paket.exe\n\n# FAKE\n/.fake\n\n# JetBrains Rider\n/.idea\n\n# Git commit history\n/-la\n\n# Visual Studio Code\n/.ionide\n/.vscode\n\n#####################################################\n\n# Project specific files\n/Tools\n/Build\n\n# mkdocs output\n/docs\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.130859375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at r@smus.nu. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.4833984375,
          "content": "## How to contribute\n\nEventFlow still needs a lot of love and if you want to help out there are\nseveral areas that you could help out with.\n\n* **Features:** If you have a great idea for EventFlow, create a pull request.\n   It might be a finished idea or just some basic concepts showing the feature\n   outline\n* **Pull request feedback:** Typically there are several pull requests marked\n   with the `in progress` and feedback is always welcome. Please note that the\n   quality of the code here might not be \"production ready\", especially if\n   the pull request is marked with the `prof of concept` label\n* **Documentation:** Good documentation is very important for any library and\n   is also very hard to do properly, so if spot a spelling error, think up\n   a good idea for a guide or just have some comments, then please create\n   either a pull request or an issue\n* **Information sharing:** Working with CQRS+ES and DDD is hard, so if you come\n   across articles that might be relevant for EventFlow, or even better, can\n   point to specfic EventFlow functionality that might be done better, then\n   please create an issue or ask in the Gitter chat\n* **Expand the shipping example:** If you have ideas on how to expand the\n  shipping example found in the code base, the please create a pull request\n  or create an issue\n  * Give a good understanding of how to use EventFlow\n  * Give a better understanding of how API changes in EventFlow affect\n    existing applications\n  * Provide a platform for DDD discussions\n"
        },
        {
          "name": "CONTRIBUTORS.md",
          "type": "blob",
          "size": 1.6181640625,
          "content": "# Contributors\n\nList of notable contributors to EventFlow sorted alphabetically. For a\ncomplete list of all contributions to EventFlow, have look at the\n[contributors](https://github.com/eventflow/EventFlow/graphs/contributors)\ngraph.\n\nIf you think your name is missing from the list, create a pull-request.\n\n### [Carlos Eduardo Ferrari](https://github.com/ceferrari)\n\n* Converted EventFlow to Visual Studio 2017 project format\n\n### [Christian Ã˜lholm](https://github.com/olholm)\n\n* Created the current logo of EventFlow\n\n### [Edward Wilson](https://github.com/edwardwilson)\n\n* Original MongoDB author\n\n### [Emanuele Curati](https://github.com/ProH4Ck)\n\n* ASP.NET Core 3 \n* Docker integration test cleanup\n\n### [Frank Ebersoll](https://github.com/frankebersoll)\n\n* Created following packages\n  * `EventFlow.DependencyInjection`\n  * `EventFlow.EntityFramework`\n* Several key contributions and bug fixes\n\n### [idubnori](https://github.com/idubnori)\n\n* PostgreSQL implementation\n* EntityFramework implementation\n* Build and integration test improvements\n\n### [Jaco Coetzee](https://github.com/JC008)\n\n* Several key contributions and bug fixes\n* Donated Navicat Essentials for SQLite\n\n### [Jan Feyen](https://github.com/janfeyen)\n\n* Key MongoDB contributions\n\n### [Rasmus Mikkelsen](https://github.com/rasmus)\n\n* Original creator and author of EventFlow\n\n### [Rida Messaoudene](https://github.com/rmess)\n\n* PostgreSQL implementation\n\n### [Willem Peters](https://github.com/wgtmpeters)\n\n* MongoDB cleanup and move to main repository\n\n### [PrzemysÅ‚aw Andruszewski](https://github.com/przemyslawandruszewski)\n\n* SQL Server and PostgreSQL query generation cleanup\n"
        },
        {
          "name": "Documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "EventFlow.sln",
          "type": "blob",
          "size": 13.8564453125,
          "content": "ï»¿\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio Version 17\r\nVisualStudioVersion = 17.1.32210.238\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"EventFlow\", \"Source\\EventFlow\\EventFlow.csproj\", \"{11131251-778D-4D2E-BDD1-4844A789BCA9}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"EventFlow.Tests\", \"Source\\EventFlow.Tests\\EventFlow.Tests.csproj\", \"{7747E4A0-B378-46B6-837D-5E78C497B061}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"EventFlow.TestHelpers\", \"Source\\EventFlow.TestHelpers\\EventFlow.TestHelpers.csproj\", \"{571D291C-5E4C-43AF-855F-7C4E2F318F4C}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Examples\", \"Examples\", \"{673D0A1A-EFEA-4541-942B-6C1FE704EC56}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Shipping\", \"Shipping\", \"{405C2850-2435-4C27-84BA-9DE3BC1DF68B}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"EventFlow.Examples.Shipping\", \"Source\\EventFlow.Examples.Shipping\\EventFlow.Examples.Shipping.csproj\", \"{8AF502A3-CF1D-4619-B169-517F157951DF}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"EventFlow.Examples.Shipping.Queries.InMemory\", \"Source\\EventFlow.Examples.Shipping.Queries.InMemory\\EventFlow.Examples.Shipping.Queries.InMemory.csproj\", \"{1C30C2E9-A3C4-41D5-B2A2-25C1DDE33F3A}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"EventFlow.Examples.Shipping.Tests\", \"Source\\EventFlow.Examples.Shipping.Tests\\EventFlow.Examples.Shipping.Tests.csproj\", \"{0EBEA705-79DC-497A-B4A2-FCCFB012EA65}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Extensions\", \"Extensions\", \"{5EE323DE-E69B-451A-8AC3-22DD6A004FBA}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"SQL\", \"SQL\", \"{88359036-4F35-487C-BF2C-4F31C7BC92D8}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"EventFlow.Sql\", \"Source\\EventFlow.Sql\\EventFlow.Sql.csproj\", \"{983EFD08-2256-4361-A869-23EB872328CB}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"EventFlow.MsSql\", \"Source\\EventFlow.MsSql\\EventFlow.MsSql.csproj\", \"{96A39EA3-6772-409E-AF0B-C5A35A1A13CC}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"EventFlow.MsSql.Tests\", \"Source\\EventFlow.MsSql.Tests\\EventFlow.MsSql.Tests.csproj\", \"{CE19355C-6355-405F-A640-908AE4F83C2C}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"PostgreSql\", \"PostgreSql\", \"{37ABC463-BAF5-4B5E-9A55-2BF12B0C144A}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"EventFlow.PostgreSql\", \"Source\\EventFlow.PostgreSql\\EventFlow.PostgreSql.csproj\", \"{B05E67FF-294D-4871-A5EF-8BA762951476}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"EventFlow.PostgreSql.Tests\", \"Source\\EventFlow.PostgreSql.Tests\\EventFlow.PostgreSql.Tests.csproj\", \"{87A29B00-48EB-40BC-B532-7EDC17604BB3}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"MongoDB\", \"MongoDB\", \"{9B07B6E9-428A-42F7-AFB1-B23755A409EE}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"EventFlow.MongoDB\", \"Source\\EventFlow.MongoDB\\EventFlow.MongoDB.csproj\", \"{BF9A0D20-4F8E-443C-8F36-5DD854D188C2}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"EventFlow.MongoDB.Tests\", \"Source\\EventFlow.MongoDB.Tests\\EventFlow.MongoDB.Tests.csproj\", \"{9132960E-9496-4C77-BD80-A09A86814757}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"MsSql\", \"MsSql\", \"{942CFA92-D15D-4CF8-87C9-0B9B727E5E22}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"PostgreSql\", \"PostgreSql\", \"{3A68BD5F-FE8D-4CD4-A039-3EFBDEDE8865}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"RabbitMq\", \"RabbitMq\", \"{CE1D5F5A-B348-423E-9B5E-1A805BFB199F}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"EventFlow.RabbitMQ\", \"Source\\EventFlow.RabbitMQ\\EventFlow.RabbitMQ.csproj\", \"{9B807641-8566-4382-AF8B-445D074105AD}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"EventFlow.RabbitMQ.Tests\", \"Source\\EventFlow.RabbitMQ.Tests\\EventFlow.RabbitMQ.Tests.csproj\", \"{683BBF59-C81F-4E04-BE33-E8806B40F766}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Hangfire\", \"Hangfire\", \"{2E9CFB92-E8E5-4466-8410-CCB5BA5CB6D1}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"EventFlow.Hangfire\", \"Source\\EventFlow.Hangfire\\EventFlow.Hangfire.csproj\", \"{8BC99846-DDDB-40E7-B062-308BF8A1239F}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"EventFlow.Hangfire.Tests\", \"Source\\EventFlow.Hangfire.Tests\\EventFlow.Hangfire.Tests.csproj\", \"{B4247230-5289-4D17-BB0F-CB2FDBABA988}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"SQLite\", \"SQLite\", \"{74EFCDE2-CB0F-49B1-9CEC-BE748EB1FBF7}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"EventFlow.SQLite\", \"Source\\EventFlow.SQLite\\EventFlow.SQLite.csproj\", \"{D2B5B5CA-57C2-4354-ADB7-47A6D81AD521}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"EventFlow.SQLite.Tests\", \"Source\\EventFlow.SQLite.Tests\\EventFlow.SQLite.Tests.csproj\", \"{8FAC191C-340D-47C6-B8AE-3D57783749C4}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{11131251-778D-4D2E-BDD1-4844A789BCA9}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{11131251-778D-4D2E-BDD1-4844A789BCA9}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{11131251-778D-4D2E-BDD1-4844A789BCA9}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{11131251-778D-4D2E-BDD1-4844A789BCA9}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{7747E4A0-B378-46B6-837D-5E78C497B061}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{7747E4A0-B378-46B6-837D-5E78C497B061}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{7747E4A0-B378-46B6-837D-5E78C497B061}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{7747E4A0-B378-46B6-837D-5E78C497B061}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{571D291C-5E4C-43AF-855F-7C4E2F318F4C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{571D291C-5E4C-43AF-855F-7C4E2F318F4C}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{571D291C-5E4C-43AF-855F-7C4E2F318F4C}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{571D291C-5E4C-43AF-855F-7C4E2F318F4C}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{8AF502A3-CF1D-4619-B169-517F157951DF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{8AF502A3-CF1D-4619-B169-517F157951DF}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{8AF502A3-CF1D-4619-B169-517F157951DF}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{8AF502A3-CF1D-4619-B169-517F157951DF}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{1C30C2E9-A3C4-41D5-B2A2-25C1DDE33F3A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{1C30C2E9-A3C4-41D5-B2A2-25C1DDE33F3A}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{1C30C2E9-A3C4-41D5-B2A2-25C1DDE33F3A}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{1C30C2E9-A3C4-41D5-B2A2-25C1DDE33F3A}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{0EBEA705-79DC-497A-B4A2-FCCFB012EA65}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{0EBEA705-79DC-497A-B4A2-FCCFB012EA65}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{0EBEA705-79DC-497A-B4A2-FCCFB012EA65}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{0EBEA705-79DC-497A-B4A2-FCCFB012EA65}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{983EFD08-2256-4361-A869-23EB872328CB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{983EFD08-2256-4361-A869-23EB872328CB}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{983EFD08-2256-4361-A869-23EB872328CB}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{983EFD08-2256-4361-A869-23EB872328CB}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{96A39EA3-6772-409E-AF0B-C5A35A1A13CC}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{96A39EA3-6772-409E-AF0B-C5A35A1A13CC}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{96A39EA3-6772-409E-AF0B-C5A35A1A13CC}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{96A39EA3-6772-409E-AF0B-C5A35A1A13CC}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{CE19355C-6355-405F-A640-908AE4F83C2C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{CE19355C-6355-405F-A640-908AE4F83C2C}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{CE19355C-6355-405F-A640-908AE4F83C2C}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{CE19355C-6355-405F-A640-908AE4F83C2C}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{B05E67FF-294D-4871-A5EF-8BA762951476}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{B05E67FF-294D-4871-A5EF-8BA762951476}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{B05E67FF-294D-4871-A5EF-8BA762951476}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{B05E67FF-294D-4871-A5EF-8BA762951476}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{87A29B00-48EB-40BC-B532-7EDC17604BB3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{87A29B00-48EB-40BC-B532-7EDC17604BB3}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{87A29B00-48EB-40BC-B532-7EDC17604BB3}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{87A29B00-48EB-40BC-B532-7EDC17604BB3}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{BF9A0D20-4F8E-443C-8F36-5DD854D188C2}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{BF9A0D20-4F8E-443C-8F36-5DD854D188C2}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{BF9A0D20-4F8E-443C-8F36-5DD854D188C2}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{BF9A0D20-4F8E-443C-8F36-5DD854D188C2}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{9132960E-9496-4C77-BD80-A09A86814757}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{9132960E-9496-4C77-BD80-A09A86814757}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{9132960E-9496-4C77-BD80-A09A86814757}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{9132960E-9496-4C77-BD80-A09A86814757}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{9B807641-8566-4382-AF8B-445D074105AD}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{9B807641-8566-4382-AF8B-445D074105AD}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{9B807641-8566-4382-AF8B-445D074105AD}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{9B807641-8566-4382-AF8B-445D074105AD}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{683BBF59-C81F-4E04-BE33-E8806B40F766}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{683BBF59-C81F-4E04-BE33-E8806B40F766}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{683BBF59-C81F-4E04-BE33-E8806B40F766}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{683BBF59-C81F-4E04-BE33-E8806B40F766}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{8BC99846-DDDB-40E7-B062-308BF8A1239F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{8BC99846-DDDB-40E7-B062-308BF8A1239F}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{8BC99846-DDDB-40E7-B062-308BF8A1239F}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{8BC99846-DDDB-40E7-B062-308BF8A1239F}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{B4247230-5289-4D17-BB0F-CB2FDBABA988}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{B4247230-5289-4D17-BB0F-CB2FDBABA988}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{B4247230-5289-4D17-BB0F-CB2FDBABA988}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{B4247230-5289-4D17-BB0F-CB2FDBABA988}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{D2B5B5CA-57C2-4354-ADB7-47A6D81AD521}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{D2B5B5CA-57C2-4354-ADB7-47A6D81AD521}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{D2B5B5CA-57C2-4354-ADB7-47A6D81AD521}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{D2B5B5CA-57C2-4354-ADB7-47A6D81AD521}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{8FAC191C-340D-47C6-B8AE-3D57783749C4}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{8FAC191C-340D-47C6-B8AE-3D57783749C4}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{8FAC191C-340D-47C6-B8AE-3D57783749C4}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{8FAC191C-340D-47C6-B8AE-3D57783749C4}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(NestedProjects) = preSolution\r\n\t\t{405C2850-2435-4C27-84BA-9DE3BC1DF68B} = {673D0A1A-EFEA-4541-942B-6C1FE704EC56}\r\n\t\t{8AF502A3-CF1D-4619-B169-517F157951DF} = {405C2850-2435-4C27-84BA-9DE3BC1DF68B}\r\n\t\t{1C30C2E9-A3C4-41D5-B2A2-25C1DDE33F3A} = {405C2850-2435-4C27-84BA-9DE3BC1DF68B}\r\n\t\t{0EBEA705-79DC-497A-B4A2-FCCFB012EA65} = {405C2850-2435-4C27-84BA-9DE3BC1DF68B}\r\n\t\t{88359036-4F35-487C-BF2C-4F31C7BC92D8} = {5EE323DE-E69B-451A-8AC3-22DD6A004FBA}\r\n\t\t{983EFD08-2256-4361-A869-23EB872328CB} = {88359036-4F35-487C-BF2C-4F31C7BC92D8}\r\n\t\t{96A39EA3-6772-409E-AF0B-C5A35A1A13CC} = {942CFA92-D15D-4CF8-87C9-0B9B727E5E22}\r\n\t\t{CE19355C-6355-405F-A640-908AE4F83C2C} = {942CFA92-D15D-4CF8-87C9-0B9B727E5E22}\r\n\t\t{37ABC463-BAF5-4B5E-9A55-2BF12B0C144A} = {3A68BD5F-FE8D-4CD4-A039-3EFBDEDE8865}\r\n\t\t{B05E67FF-294D-4871-A5EF-8BA762951476} = {37ABC463-BAF5-4B5E-9A55-2BF12B0C144A}\r\n\t\t{87A29B00-48EB-40BC-B532-7EDC17604BB3} = {37ABC463-BAF5-4B5E-9A55-2BF12B0C144A}\r\n\t\t{9B07B6E9-428A-42F7-AFB1-B23755A409EE} = {5EE323DE-E69B-451A-8AC3-22DD6A004FBA}\r\n\t\t{BF9A0D20-4F8E-443C-8F36-5DD854D188C2} = {9B07B6E9-428A-42F7-AFB1-B23755A409EE}\r\n\t\t{9132960E-9496-4C77-BD80-A09A86814757} = {9B07B6E9-428A-42F7-AFB1-B23755A409EE}\r\n\t\t{942CFA92-D15D-4CF8-87C9-0B9B727E5E22} = {88359036-4F35-487C-BF2C-4F31C7BC92D8}\r\n\t\t{3A68BD5F-FE8D-4CD4-A039-3EFBDEDE8865} = {88359036-4F35-487C-BF2C-4F31C7BC92D8}\r\n\t\t{CE1D5F5A-B348-423E-9B5E-1A805BFB199F} = {5EE323DE-E69B-451A-8AC3-22DD6A004FBA}\r\n\t\t{9B807641-8566-4382-AF8B-445D074105AD} = {CE1D5F5A-B348-423E-9B5E-1A805BFB199F}\r\n\t\t{683BBF59-C81F-4E04-BE33-E8806B40F766} = {CE1D5F5A-B348-423E-9B5E-1A805BFB199F}\r\n\t\t{2E9CFB92-E8E5-4466-8410-CCB5BA5CB6D1} = {5EE323DE-E69B-451A-8AC3-22DD6A004FBA}\r\n\t\t{8BC99846-DDDB-40E7-B062-308BF8A1239F} = {2E9CFB92-E8E5-4466-8410-CCB5BA5CB6D1}\r\n\t\t{B4247230-5289-4D17-BB0F-CB2FDBABA988} = {2E9CFB92-E8E5-4466-8410-CCB5BA5CB6D1}\r\n\t\t{74EFCDE2-CB0F-49B1-9CEC-BE748EB1FBF7} = {88359036-4F35-487C-BF2C-4F31C7BC92D8}\r\n\t\t{D2B5B5CA-57C2-4354-ADB7-47A6D81AD521} = {74EFCDE2-CB0F-49B1-9CEC-BE748EB1FBF7}\r\n\t\t{8FAC191C-340D-47C6-B8AE-3D57783749C4} = {74EFCDE2-CB0F-49B1-9CEC-BE748EB1FBF7}\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {17607E2C-4E8E-45A2-85BD-0A5808E1C0F3}\r\n\tEndGlobalSection\r\nEndGlobal\r\n"
        },
        {
          "name": "EventFlow.sln.DotSettings",
          "type": "blob",
          "size": 1.056640625,
          "content": "ï»¿<wpf:ResourceDictionary xml:space=\"preserve\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:s=\"clr-namespace:System;assembly=mscorlib\" xmlns:ss=\"urn:shemas-jetbrains-com:settings-storage-xaml\" xmlns:wpf=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Mikkelsen/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=NONINFRINGEMENT/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Populator/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Rasmus/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Serilizer/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=snapsnot/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Upgrader/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Upgraders/@EntryIndexedValue\">True</s:Boolean></wpf:ResourceDictionary>"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1005859375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015-2025 Rasmus Mikkelsen\nhttps://github.com/eventflow/EventFlow\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.8828125,
          "content": "# EventFlow\n\n![EventFlow logo](https://raw.githubusercontent.com/eventflow/EventFlow/develop-v1/icon-128.png)\n\n```\n$ dotnet add package EventFlow\n```\n\nEventFlow is a basic CQRS+ES framework designed to be easy to use.\n\nHave a look at our [getting started guide](https://geteventflow.net/getting-started/),\nthe [doâ€™s and donâ€™ts](https://geteventflow.net/additional/dos-and-donts/) and the\n[FAQ](https://geteventflow.net/additional/faq/).\n\nAlternatively, join our [Discord](https://discord.gg/QfgNPs5WxR) server to engage with the community. Its hopefully getting a reboot to kickstart the upcoming release of v1.\n\n## Features\n\n* **Easy to use**: Designed with sensible defaults and implementations that make it\n  easy to create an example application\n* **Highly configurable and extendable**: EventFlow uses interfaces for every part of\n  its core, making it easy to replace or extend existing features with custom\n  implementation\n* **No use of threads or background workers**\n* **MIT licensed** Easy to understand and use license for enterprise\n\n## Versions\n\nDevelopment of version 1.0 has started and is mainly braking changes regarding changes\nrelated to replacing EventFlow types with that of Microsoft extension abstractions,\nmainly `IServiceProvider` and `ILogger<>`.\n\nThe following list key characteristics of each version as well as its related branches\n(not properly configured yet).\n\n* `1.x`\n\n  Represents the next iteration of EventFlow that aligns EventFlow with the standard\n  packages for .NET. Releases here will only support .NET Standard, .NET Core\n  and .NET versions 6+ going forward.\n\n  - Released\n  - Still development\n  - Not all projects migrated yet\n  \n  Read the [migration guide](https://geteventflow.net/migrations/v0-to-v1/) to view the full list of breaking\n  changes as well as recommendations on how to migrate.\n\n  ### Documentation\n  Version 1.x documentation has been pulled into this repository in order to have\n  the code and documentation closer together and have the documentation\n  updated in the same pull-requests as any code changes. The compiled version of the\n  documentation is available at https://geteventflow.net/.\n\n  ### NuGet package status\n\n  - ðŸŸ¢ ported\n  - ðŸ’š newly added to 1.0\n  - ðŸŸ  not yet ported to 1.0\n  - ðŸ’€ for packages that are removed as part of 1.0 (see the [migration guide](https://geteventflow.net/migrations/v0-to-v1/) for details)\n\n  Projects\n    - ðŸŸ¢ `EventFlow`\n    - ðŸŸ  `EventFlow.AspNetCore`\n    - ðŸ’€ `EventFlow.Autofac`\n    - ðŸ’€ `EventFlow.DependencyInjection`\n    - ðŸŸ  `EventFlow.Elasticsearch`\n    - ðŸŸ  `EventFlow.EntityFramework`\n    - ðŸŸ  `EventFlow.EventStores.EventStore`\n    - ðŸŸ¢ `EventFlow.Hangfire`\n    - ðŸŸ¢ `EventFlow.MongoDB`\n    - ðŸŸ¢ `EventFlow.MsSql`\n    - ðŸ’€ `EventFlow.Owin`\n    - ðŸŸ¢ `EventFlow.PostgreSql`\n    - ðŸ’š `EventFlow.Redis`\n    - ðŸŸ  `EventFlow.RabbitMQ`\n    - ðŸŸ¢ `EventFlow.Sql`\n    - ðŸŸ¢ `EventFlow.SQLite`\n    - ðŸŸ¢ `EventFlow.TestHelpers`\n\n  ### Branches\n  - `develop-v1`: Development branch, pull requests should be done here\n  - `release-v1`: Release branch, merge commits are done to this branch from\n    `develop-v1` to create releases. Typically each commit represents a release\n\n* `0.x` (legacy)\n\n  The current stable version of EventFlow and has been the version of EventFlow\n  for almost six years. 0.x versions have .NET Framework support and limited\n  support to the Microsoft extension packages through extra NuGet packages.\n\n  Feature and bug fix releases will still be done while there's interest in\n  the community.\n\n  ### Branches\n  - `develop-v0`: Development branch, pull requests should be done here\n  - `release-v0`: Release branch, merge commits are done to this branch from\n    `develop-v0` to create releases. Typically each commit represents a release\n\n  ### Documentation\n  Version 0.x documentation is (although a bit outdated) is live at\n  https://docs.geteventflow.net/.\n\n\n## Talks directly related to EventFlow\n\n- [GOTO Aarhus 2022](https://github.com/rasmus/presentation-goto-2022) by [rasmus](https://github.com/rasmus)\n  Practical event sourcing using EventFlow\n\n## Examples\n\n* **[Complete](#complete-example):** Shows a complete example on how to use\n  EventFlow with in-memory event store and read models in a relatively few lines\n  of code\n* **Shipping:** To get a more complete example of how EventFlow _could_ be used,\n  have a look at the shipping example found here in the code base. The example\n  is based on the shipping example from the book \"Domain-Driven Design -\n  Tackling Complexity in the Heart of Software\" by Eric Evans. Its\n  _in-progress_, but should provide inspiration on how to use EventFlow on a\n  larger scale. If you have ideas and/or comments, create a pull request or\n  an issue\n  \n### External Examples\n\nList of examples create by different community members. Note that many of these\nexamples will be using EventFlow 0.x.\n\n*Create a pull request to get your exampled linked from here.*\n\n * **[Racetimes:](https://github.com/dennisfabri/Eventflow.Example.Racetimes)**\n   Shows some features of EventFlow that are not covered in the \n   [complete example](#complete-example). It features entities, a read model for \n   an entity, delete on read models, specifications and snapshots.\n\n   * **[Racetimes for Azure Functions:](https://github.com/craignicol/Eventflow.Example.Racetimes)**\n     Extends the above example to support the HTTP access via Azure Functions\n     \n   * **[Racetimes for Azure Functions and Event Grid:](https://github.com/craignicol/Eventflow.Example.Racetimes/tree/feature/event-grid-as-extension)**\n     Further extends the Azure Functions Example to publish to Event Grid, following the RabbitMQ pattern\n\n * **[.NET Core:](https://github.com/johnny-chan/EventFlowDemo)**\n\tA Web API running .NET Core 2.2 using the event flow. It uses the pre-defined \n\tcommand/entities/events from the [complete example](#complete-example). There are endpoints to \n\tcreate a new example event, getting a data model and to replay all data models.\n\t\n* **[ElasticSearch/.NET Core:](https://github.com/DureSameen/EventFlowWithElasticSearch)**\n\tIt is configured with EventFlow, ElasticSearch, EventStore, and RabbitMq. See \"withRabbitMq\" branch for #384.\n\n * **[Vehicle Tracking:](https://github.com/MongkonEiadon/VehicleTracker)**\n\tA Microservice on .NET Core 2.2 with docker based, you can up the service with docker-compose, this project using various\n  tools to up the services aka. Linux Docker based on .NET Core, RabbitMq, EntityFramework with SQL Server and using EventFlow following CQRS-ES architecture\n  and all microservice can access through ApiGateway which using Ocelot\n\n  * **[RestAirline:](https://github.com/twzhangyang/RestAirline)**\n\tA classic DDD with CQRS-ES, Hypermedia API project based on EventFlow. It's targeted to ASP.NET Core 2.2 and can be deployed to docker and k8s.\n\t\n* **[Full Example:](https://github.com/OKTAYKIR/EventFlow.Example)**\n\tA console application on .NET Core 2.2. You can up the services using [docker-compose file](https://github.com/OKTAYKIR/EventFlow.Example/blob/master/build/docker-compose.yml). Docker-compose file include EventStore, RabbitMq, MongoDb, and PostgreSQL. It include following EventFlow concepts:\n\t* Aggregates\n\t* Command bus and commands\n\t* Synchronous subscriber\n\t* Event store ([GES](https://eventstore.com/))\n\t* In-memory read model.\n\t* Snapshots ([MongoDb](https://www.mongodb.com/))\n\t* Sagas\n\t* Event publising (In-memory, [RabbitMq](https://www.rabbitmq.com/))\n\t* Metadata\n\t* Command bus decorator, custom value object, custom execution result, ...\n\t\n### Overview\n\nHere is a list of the EventFlow concepts. Use the links to navigate\nto the documentation.\n\n* [**Aggregates:**](https://geteventflow.net/basics/aggregates/)\n  Domains object that guarantees the consistency of changes being made within\n  each aggregate\n* [**Command bus and commands:**](https://geteventflow.net/basics/commands/)\n  Entry point for all command/operation execution.\n* [**Event store:**](https://geteventflow.net/integration/event-stores/)\n  Storage of the event stream for aggregates. Currently there is support for\n  these storage types.\n  * In-memory - only for test\n  * Files - only for test\n  * Microsoft SQL Server\n  * Entity Framework Core\n  * SQLite\n  * PostgreSQL\n  * EventStore - [home page](https://eventstore.org/)\n* [**Subscribers:**](https://geteventflow.net/basics/subscribers/)\n  Listeners that act on specific domain events. Useful if an specific action\n  needs to be triggered after a domain event has been committed.\n* [**Read models:**](https://geteventflow.net/integration/read-stores/)\n  Denormalized representation of aggregate events optimized for reading fast.\n  Currently there is support for these read model storage types.\n  For the SQL storage types the queries are being generated automatically with quoted columns and table names.\n  * Elasticsearch\n  * In-memory - only for test\n  * Microsoft SQL Server\n  * Entity Framework Core\n  * SQLite\n  * PostgreSQL\n* [**Snapshots:**](https://geteventflow.net/additional/snapshots/)\n  Instead of reading the entire event stream every single time, a snapshot can\n  be created every so often that contains the aggregate state. EventFlow\n  supports upgrading existing snapshots, which is useful for long-lived\n  aggregates. Snapshots in EventFlow are opt-in and EventFlow has support for\n  * In-memory - only for test\n  * Microsoft SQL Server\n  * Entity Framework Core\n  * SQLite\n  * PostgreSQL\n* [**Sagas:**](https://geteventflow.net/basics/sagas/)\n  Also known as _process managers_, coordinates and routes messages between\n  bounded contexts and aggregates\n* [**Queries:**](https://geteventflow.net/basics/queries/)\n  Value objects that represent a query without specifying how its executed,\n  that is let to a query handler\n* [**Jobs:**](https://geteventflow.net/basics/jobs/) Perform scheduled tasks at\n  a later time, e.g. publish a command. EventFlow provides support for these\n  job schedulers\n  * Hangfire - [home page](https://hangfire.io/)\n* [**Event upgrade:**](https://geteventflow.net/basics/event-upgrade/)\n  As events committed to the event store is never changed, EventFlow uses the\n  concept of event upgraders to deprecate events and replace them with new\n  during aggregate load.\n* **Event publishing:** Sometimes you want other applications or services to\n  consume and act on domains. For this EventFlow supports event publishing.\n  * RabbitMQ\n* [**Metadata:**](https://geteventflow.net/basics/metadata/)\n  Additional information for each aggregate event, e.g. the IP of\n  the user behind the event being emitted. EventFlow ships with\n  several providers ready to use used.\n* [**Value objects:**](https://geteventflow.net/additional/value-objects/)\n  Data containing classes used to validate and hold domain data, e.g. a\n  username or e-mail.\n\n## Complete example\nHere's a complete example on how to use the default in-memory event store\nalong with an in-memory read model.\n\nThe example consists of the following classes, each shown below\n\n- `ExampleAggregate`: The aggregate root\n- `ExampleId`: Value object representing the identity of the aggregate root\n- `ExampleEvent`: Event emitted by the aggregate root\n- `ExampleCommand`: Value object defining a command that can be published to the\n  aggregate root\n- `ExampleCommandHandler`: Command handler which EventFlow resolves using its IoC\n  container and defines how the command specific is applied to the aggregate root\n- `ExampleReadModel`: In-memory read model providing easy access to the current\n  state\n\n**Note:** This example is part of the EventFlow test suite, so checkout the\ncode and give it a go.\n\n```csharp\n[Test]\npublic async Task Example()\n{\n  // We wire up EventFlow with all of our classes. Instead of adding events,\n  // commands, etc. explicitly, we could have used the the simpler\n  // AddDefaults(Assembly) instead.\n  var serviceCollection = new ServiceCollection()\n    .AddLogging()\n    .AddEventFlow(o => o\n      .AddEvents(typeof(ExampleEvent))\n      .AddCommands(typeof(ExampleCommand))\n      .AddCommandHandlers(typeof(ExampleCommandHandler))\n      .UseInMemoryReadStoreFor<ExampleReadModel>());\n\n  using (var serviceProvider = serviceCollection.BuildServiceProvider())\n  {\n    // Create a new identity for our aggregate root\n    var exampleId = ExampleId.New;\n\n    // Resolve the command bus and use it to publish a command\n    var commandBus = serviceProvider.GetRequiredService<ICommandBus>();\n    await commandBus.PublishAsync(\n      new ExampleCommand(exampleId, 42), CancellationToken.None);\n\n    // Resolve the query handler and use the built-in query for fetching\n    // read models by identity to get our read model representing the\n    // state of our aggregate root\n    var queryProcessor = serviceProvider.GetRequiredService<IQueryProcessor>();\n    var exampleReadModel = await queryProcessor.ProcessAsync(\n      new ReadModelByIdQuery<ExampleReadModel>(exampleId), CancellationToken.None);\n\n    // Verify that the read model has the expected magic number\n    exampleReadModel.MagicNumber.Should().Be(42);\n  }\n}\n```\n\n```csharp\n// The aggregate root\npublic class ExampleAggregate : AggregateRoot<ExampleAggregate, ExampleId>,\n  IEmit<ExampleEvent>\n{\n  private int? _magicNumber;\n\n  public ExampleAggregate(ExampleId id) : base(id) { }\n\n  // Method invoked by our command\n  public void SetMagicNumber(int magicNumber)\n  {\n    if (_magicNumber.HasValue)\n      throw DomainError.With(\"Magic number already set\");\n\n    Emit(new ExampleEvent(magicNumber));\n  }\n\n  // We apply the event as part of the event sourcing system. EventFlow\n  // provides several different methods for doing this, e.g. state objects,\n  // the Apply method is merely the simplest\n  public void Apply(ExampleEvent aggregateEvent)\n  {\n    _magicNumber = aggregateEvent.MagicNumber;\n  }\n}\n```\n\n```csharp\n// Represents the aggregate identity (ID)\npublic class ExampleId : Identity<ExampleId>\n{\n  public ExampleId(string value) : base(value) { }\n}\n```\n\n```csharp\n// A basic event containing some information\npublic class ExampleEvent : AggregateEvent<ExampleAggregate, ExampleId>\n{\n  public ExampleEvent(int magicNumber)\n  {\n      MagicNumber = magicNumber;\n  }\n\n  public int MagicNumber { get; }\n}\n```\n\n```csharp\n// Command for update magic number\npublic class ExampleCommand : Command<ExampleAggregate, ExampleId>\n{\n  public ExampleCommand(\n    ExampleId aggregateId,\n    int magicNumber)\n    : base(aggregateId)\n  {\n    MagicNumber = magicNumber;\n  }\n\n  public int MagicNumber { get; }\n}\n```\n\n```csharp\n// Command handler for our command\npublic class ExampleCommandHandler\n  : CommandHandler<ExampleAggregate, ExampleId, ExampleCommand>\n{\n  public override Task ExecuteAsync(\n    ExampleAggregate aggregate,\n    ExampleCommand command,\n    CancellationToken cancellationToken)\n  {\n    aggregate.SetMagicNumber(command.MagicNumber);\n    return Task.CompletedTask;;\n  }\n}\n```\n\n```csharp\n// Read model for our aggregate\npublic class ExampleReadModel : IReadModel,\n  IAmReadModelFor<ExampleAggregate, ExampleId, ExampleEvent>\n{\n  public int MagicNumber { get; private set; }\n\n  public Task ApplyAsync(\n    IReadModelContext context,\n    IDomainEvent<ExampleAggregate, ExampleId, ExampleEvent> domainEvent,\n    CancellationToken _cancellationToken\n  {\n    MagicNumber = domainEvent.AggregateEvent.MagicNumber;\n    return Task.CompletedTask;\n  }\n}\n```\n\n\n## State of EventFlow\n\nEventFlow is still under development, especially the parts regarding\nhow read models are re-populated.\n\nEventFlow  _is_ currently used in production environments and performs very well,\nbut it needs to mature before key APIs are stable.\n\nEventFlow is greatly opinionated, but it's possible to create new implementations\nfor almost every part of EventFlow by registering a different implementation of\nan interface.\n\n## Useful articles related to EventFlow and DDD\n\nMany of the technical design decisions in EventFlow is based on articles. This\nsection lists some of them. If you have a link with a relevant article, please\nshare it by creating an issue with the link.\n\n* **Domain-Driven Design**\n  * [Domain-Driven Design Reference](https://domainlanguage.com/ddd/reference/)\n    by Eric Evans\n  * [DDD Decoded - Bounded Contexts Explained](https://blog.sapiensworks.com/post/2016/08/12/DDD-Bounded-Contexts-Explained)\n  * [Going \"Events-First\" for Microservices with Event Storming and DDD](http://www.russmiles.com/essais/going-events-first-for-microservices-with-event-storming-and-ddd)\n* **General CQRS+ES**\n  * [CQRS Journey by Microsoft](https://msdn.microsoft.com/en-us/library/jj554200.aspx)\n    published by Microsoft\n  * [An In-Depth Look At CQRS](https://blog.sapiensworks.com/post/2015/09/01/In-Depth-CQRS)\n    by Mike Mogosanu\n  * [CQRS, Task Based UIs, Event Sourcing agh!](http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/)\n    by Greg Young\n  * [Busting some CQRS myths](https://lostechies.com/jimmybogard/2012/08/22/busting-some-cqrs-myths/)\n    by Jimmy Bogard\n  * [CQRS applied](https://lostechies.com/gabrielschenker/2015/04/12/cqrs-applied/)\n    by Gabriel Schenker\n  * [DDD Decoded - Entities and Value Objects Explained](https://blog.sapiensworks.com/post/2016/07/29/DDD-Entities-Value-Objects-Explained)\n* **Eventual consistency**\n  * [How To Ensure Idempotency In An Eventual Consistent DDD/CQRS Application](https://blog.sapiensworks.com/post/2015/08/26/How-To-Ensure-Idempotency)\n   by Mike Mogosanu\n  * [DDD Decoded - Don't Fear Eventual Consistency](https://blog.sapiensworks.com/post/2016/07/23/DDD-Eventual-Consistency)\n* **Why _not_ to implement \"unit of work\" in DDD**\n  * [Unit Of Work is the new Singleton](https://blog.sapiensworks.com/post/2014/06/04/Unit-Of-Work-is-the-new-Singleton.aspx)\n    by Mike Mogosanu\n  * [The Unit of Work and Transactions In Domain-Driven Design](https://blog.sapiensworks.com/post/2015/09/02/DDD-and-UoW)\n    by Mike Mogosanu\n\n\n### Integration tests\n\nEventFlow has several tests that verify that its ability to use the systems it\nintegrates with correctly.\n\n * [Elasticsearch](https://www.elastic.co/)\n * [EventStore](https://geteventstore.com/)\n * [RabbitMQ](https://www.rabbitmq.com/)\n * Microsoft SQL Server\n * PostgreSQL\n\nTo setup a local test environment run the following commands in the checkout\ndirectory of EventFlow.\n\n```\ndocker-compose pull\ndocker-compose up\n```\n\nAlternatively, you can skip the NUnit tests marked with the `integration`\ncategory.\n\n## Thanks\n\n\n![JetBrains logo](https://raw.githubusercontent.com/eventflow/EventFlow/develop-v1/Resources/jetbrains-128x128.png)\n\n* [Contributors](https://github.com/eventflow/EventFlow/graphs/contributors)\n* [JetBrains](https://www.jetbrains.com/resharper/): OSS licenses\n* [olholm](https://github.com/olholm): Current logo\n* [iconmonstr](https://iconmonstr.com/network-6-icon/): First logo\n* [JC008](https://github.com/JC008): License for Navicat Essentials for SQLite\n\n## License\n\nEventFlow was originally developed <u>in my spare time</u> while I worked at both\n<a href=\"https://www.ebay.com/\">eBay (2015 to 2021)</a> and\n<a href=\"https://schibsted.com/\">Schibsted (2021 and onward)</a>.\n\n```\nThe MIT License (MIT)\n\nCopyright (c) 2015-2025 Rasmus Mikkelsen\nhttps://github.com/eventflow/EventFlow\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n\n"
        },
        {
          "name": "RELEASE_NOTES.md",
          "type": "blob",
          "size": 66.078125,
          "content": "### New in 1.1.1 (working version, not released yet)\n\n* New: NuGet `EventFlow.SQLite` is now released as part of v1 and enables support for SQLite\n* Fix: Invoking `UseEventPersistence` now removes any previously registered event persistence. This\n  fixes a service ordering issue in the following event store configurations\n  - MongoDB\n  - MSSQL\n  - PostgreSQL\n\n\n### New in 1.1.0 (released 2024-12-16)\n\n* New: More control of event naming by introducing the interface `IEventNamingStrategy`, see the\n  updated documentation at https://geteventflow.net/additional/event-naming-strategies/ for more\n  information (thanks @SeWaS)\n\n### New in 1.0.5007 (released 2024-11-16)\n\nRead the complete migration guide to get the full list of changes as well as recommendations\non how to do the migration.\n\nhttps://geteventflow.net/migrations/v0-to-v1/\n\n(If you see any changes you feel ownership of and you want you name there, create an issue\nand it will get fixed asap. EventFlow would be where it is today without the grate community\ncontributions that it have received over the years)\n\nChanges since last 1.x pre-release, `1.0.5003-alpha`\n\n* New: .NET 8 support\n* New: Enable `IEventStore` to load events to a given sequence number (thanks @SeWaS)\n* New: `EventFlow.Hangfire` now part of the v1 release cycle (thanks @nicolaj-hartmann)\n* Fix/breaking: Switch from `System.Data.SqlClient` to `Microsoft.Data.SqlClient` (thanks @janrybka)\n\nChanges since last 1.x pre-release, `1.0.5002-alpha`\n\n* New: Read model rebuilder can be done across multiple read model types. The piping of events\n  and applying them are now done concurrently to reduced memory usage and significantly improve\n  time to completion (by @kyle-bradley)\n* New: Created `EventFlow.Redis` (by @joshua211)\n* New: Migrated `EventFlow.RabbitMQ` to v1 (by @kyle-bradley)\n* Breaking: Removed old `EventFlow.Shims.Tasks` class that provided a wrapper for `Task.CompletedTask`\n  in frameworks that did not have it\n\nChanges since last 1.x pre-release, `1.0.5001-alpha`\n\n* New/breaking: `IEventUpgrader<,>` are now (finally) async. For an easy upgrade experience,\n  use the new base class `EventUpgraderNonAsync` for any existing upgraders. Its a `abstract`\n  class that implements the updated interface and provides a `abstract` method with the same\n  signature as the previous interface\n* Fix/breaking: Event upgraders are now used during read model population. As the upgraders\n  are re-used across multiple aggregates, there is a high likelihood that some additions are\n  needed in any existing upgraders. Upgraders are stored on the new `IEventUpgradeContext`,\n  which is created by the new `IEventUpgradeContextFactory`. Replace this if you need addition\n  context during event upgrades\n* Fix: `SnapshotAggregateRoot` now correctly loads previous source IDs as well\n  adds the current source ID that triggered the snapshot. This causes the\n  `DuplicateOperationException` to be correctly thrown if a duplicate source\n  ID as added before a snapshot was taken\n* Fix: Upgrade `Newtonsoft.Json` from `11.0.2` to `13.0.1` to fix DoS\n  vulnerability\n  - https://github.com/advisories/GHSA-5crp-9r3c-p9vr\n  - https://security.snyk.io/vuln/SNYK-DOTNET-NEWTONSOFTJSON-2774678\n* Fix: `UseFilesEventPersistence` should no longer throw exception for .NET regarding relative paths\n\nComplete 1.0 change log\n\n* New: Read model rebuilder can be done across multiple read model types. The piping of events\n  and applying them are now done concurrently to reduced memory usage and significantly improve\n  time to completion (by @kyle-bradley)\n* New: Created `EventFlow.Redis` (by @joshua211)\n* New/breaking: Replace internal IoC implementation with `Microsoft.Extensions.DependencyInjection`\n* New/breaking: Replace internal logging implementation with `Microsoft.Extensions.Logging`\n* New/breaking: SQL read models now support different connection strings using the\n  `[SqlReadModelConnectionStringName]` attribute. To allow executing queries using different\n  connection strings, all methods on `IMsSqlConnection` and `ISqlConnection` now have an\n  additional argument, `string connectionStringName` to signify which connection string\n  should be used for the query\n* New/breaking: SQL connection strings are now fetched from the\n  `SqlConfiguration<T>.GetConnectionStringAsync(...)` instead of a property, allowing more\n  control of the connection string used at runtime\n* New/breaking: `IEventUpgrader<,>` are now (finally) async. For an easy upgrade experience,\n  use the new base class `EventUpgraderNonAsync` for any existing upgraders. Its a `abstract`\n  class that implements the updated interface and provides a `abstract` method with the same\n  signature as the previous interface\n* New: Its now possible to change the execution timeout for database migrations using the\n  `SetUpgradeExecutionTimeout(...)` on the SQL configuration\n* Fix/breaking: Event upgraders are now used during read model population. As the upgraders\n  are re-used across multiple aggregates, there is a high likelihood that some additions are\n  needed in any existing upgraders. Upgraders are stored on the new `IEventUpgradeContext`,\n  which is created by the new `IEventUpgradeContextFactory`. Replace this if you need addition\n  context during event upgrades\n* Breaking: Removed the following dead and/or confusion MSSQL attributes. The real ones\n  are named the same, with with `Sql...` instead of `MsSql...`\n  - `MsSqlReadModelIdentityColumn`\n  - `MsSqlReadModelIgnoreColumn`\n  - `MsSqlReadModelVersionColumn`\n* Breaking: Methods on `IMsSqlDatabaseMigrator` and `ISqlDatabaseMigrator` have been\n  made async and have an extra `CancellationToken` argument\n* Breaking: Remove support for .NET Framework and consolidate on .NET (Core) LTS versions\n* Breaking: Replace internal in-memory caching with `Microsoft.Extensions.Caching.Memory`\n* Breaking: Removed `IAmAsyncReadModelFor` and made `IAmReadModelFor` async\n* Breaking: Removed `EventFlow.Core.AsyncHelper` as well as all async wrapper methods\n  that used it\n  - `IAggregateStore.Load`\n  - `IAggregateStore.Store`\n  - `IAggregateStore.Update`\n  - `ICommandBus.Publish`\n  - `IEventStore.LoadAggregate`\n  - `IEventStore.LoadEvents`\n  - `IEventStore.LoadAllEvents`\n  - `IQueryProcessor.Process`\n  - `IReadModelPopulator.Populate`\n  - `IReadModelPopulator.Purge`\n* Breaking: Removed old `EventFlow.Shims.Tasks` class that provided a wrapper for `Task.CompletedTask`\n  in frameworks that did not have it\n* Fix: `SnapshotAggregateRoot` now correctly loads previous source IDs as well\n  adds the current source ID that triggered the snapshot. This causes the\n  `DuplicateOperationException` to be correctly thrown if a duplicate source\n  ID as added before a snapshot was taken\n* Fix: Upgrade `Newtonsoft.Json` from `11.0.2` to `13.0.1` to fix DoS\n  vulnerability\n  - https://github.com/advisories/GHSA-5crp-9r3c-p9vr\n  - https://security.snyk.io/vuln/SNYK-DOTNET-NEWTONSOFTJSON-2774678\n* Version of 0.x included: `0.83.4713`. 0.x changes are merged to 1.x at regular\n  intervals, but might be one or two releases behind\n\n\n### New in 0.83.4713 (released 2021-09-07)\n\n* New: Queue name used by HangfireJobScheduler can be overridden:\n  ```csharp\n  eventFlowOptions.UseHangfireJobScheduler(o => o.UseQueueName(\"myqueue\"))\n  ```\n* Fixed: Do not throw `MetadataKeyNotFoundException` if there is no meta data on\n  `previous_source_ids` in snapshots\n\n### New in 0.82.4684 (released 2021-08-31)\n\n* Fix: Allow the use of explicitly implemented interfaces in the read model\n* New: added extension methods to the `EventFlow.EntityFramework` package that allow\n  us to configure [eager loading of related data](https://docs.microsoft.com/en-us/ef/core/querying/related-data/eager). Example usage:\n  ```csharp\n  public static IEventFlowOptions Configure(this IEventFlowOptions options)\n  {\n    return options\n      .UseEntityFrameworkReadModel<MyEntity, MyDbContext>(\n        cfg => cfg.Include(x => x.SomeProperty)\n                  .ThenInclude(y => y.SomeOtherProperty)\n      );\n  }\n  ```\n\n### New in 0.82.4659 (released 2021-06-17)\n\n* Fix: Source IDs are now added to snapshots\n* Fix: InMemoryReadStore will not break on unmodified update result\n\n### New in 0.81.4483 (released 2020-12-14)\n\n* Breaking: Elasticsearch NEST Nuget Library updated from v6.1.0 to v7.8.2\n* New: Now possible to implement error handlers for specific sagas using\n  `ISagaErrorHandler<TSaga>`\n* Fixed: You can now create `Id : Identity<Id>`\n\n### New in 0.80.4377 (released 2020-10-01)\n\n* Breaking: To support .NET going forward, all EventFlow test have been converted\n  from .NET Framework 4.x to .NET Core 3.1. This however, introduced a set of\n  breaking changes\n  * EntityFramework has been updated from 2.2.6 to 3.1.5 \n  * `IHangfireJobRunner.Execute` is now `IHangfireJobRunner.ExecuteAsync`\n* Breaking: Merged `AggregateReadStoreManager` and `SingleAggregateReadStoreManager`\n  into one class in order to always guarantee in-order event processing\n* Breaking: Marked the `UseReadStoreFor<,,,>` configuration methods as obsolete,\n  in favor of the simpler overloads with less type parameters (as those automatically\n  figure out the AggregateRoot and Id types and configure the more reliable \n  `SingleAggregateReadStoreManager` implementation)\n* Obsolete: The class `AsyncHelper` and all non-async methods using it have been\n  marked obsolete and will be removed in EventFlow 1.0 (not planned yet). If you rely\n  on these non-async methods, then merely copy-paste the `AsyncHelper` from the EventFlow\n  code base and continue using it in your transition to async only \n* Fixed: An issue where `EntityFrameworkEventPersistence` could possibly save aggregate \n  events out of order, which would lead to out-of-order application when streaming events\n  ordered by GlobalSequenceNumber\n* New: `FilesEventPersistence` now uses relative paths\n* New: A new set of hook-in interfaces are provided from this release, which should\n  make it easier to implement crash resilience (#439) in EventFlow. Please note that\n  this new API is experimentational and subject to change as different strategies are\n  implemented\n  * `IAggregateStoreResilienceStrategy`\n  * `IDispatchToReadStoresResilienceStrategy`\n  * `IDispatchToSubscriberResilienceStrategy`\n  * `ISagaUpdateResilienceStrategy`\n\n### New in 0.79.4216 (released 2020-05-13)\n\n* New: Added .NET Core 3.1 target for the `EventFlow`\n  and `EventFlow.EntityFramework` packages\n* Added quoting to the SQL query generator for the column names\n\n### New in 0.78.4205 (released 2020-05-11)\n\n* New: Updated LibLog provider to support structured logging with NLog 4.5. \n  Reduced memory allocations for log4net-provider\n* New: Made several methods in `AggregateRoot<,>` `virtual` to allow\n  easier customization\n* Fixed: Added quoting to the SQL query generator for the column names\n```sql\n  -- query before the fix\n    UPDATE [ReadModel-TestAttributes]\n    SET UpdatedTime = @UpdatedTime\n    WHERE Id = @Id\n  \n  -- query after the fix\n    UPDATE [ReadModel-TestAttributes]\n    SET [UpdatedTime] = @UpdatedTime\n    WHERE [Id] = @Id\n  ```\n* Fixed: Do not log about event upgraders if none is found for an event\n* Fixed: Add default `null` predicate to `AddCommands` and `AddJobs`\n\n### New in 0.77.4077 (released 2019-12-10)\n\n* New: The `EventFlow.AspNetCore` NuGet package now has ASP.NET Core 3 support\n\n### New in 0.76.4014 (released 2019-10-19)\n\n* New: Mongo DB read model store Queryable:\n  ```csharp\n  MongoDbReadModelStore readModelStore;\n  IQueryable<TReadModel> queryable = readModelStore.AsQueryable();\n  ```\n* New: Moved publish of messages in `RabbitMqPublisher` to a new virtual\n  method to ease reuse and customization\n* Fixed: MongoDB read models no longer has the `new()` generic requirement,\n  which aligns read model requirements with the rest of EventFlow\n\n### New in 0.75.3970 (released 2019-09-12)\n\n* Fix: When deserializing the JSON value `\"null\"` into a struct value like\n  `int`, the `SingleValueObjectConverter` threw an exception instead of\n  merely returning `null` representing an absent `SingleValueObject<int>` value\n\n### New in 0.74.3948 (released 2019-07-01)\n\n* Breaking: Renamed `AspNetCoreEventFlowOptions.AddMetadataProviders()` \n  to `AddDefaultMetadataProviders()` and made `AddUserClaimsMetadata` opt-in\n  in order to prevent policy issues. \n* Fix: Allow explicit implementations of `IEmit<>` in aggregate roots\n* Fix: Using `.AddAspNetCore()` with defaults now doesn't throw a DI\n  exception.\n\n### New in 0.73.3933 (released 2019-06-11)\n\n* New: Configure JSON serialization: \n  ```csharp\n  EventFlowOptions.New.\n    .ConfigureJson(json => json\n      .AddSingleValueObjects()\n      .AddConverter<SomeConverter>()\n    )\n  ```\n* New: ASP.NET Core enhancements:\n  - New fluent configuration API for ASP.NET Core components:\n    `services.AddEventFlow(o => o.AddAspNetCore(c => {...}));` (old syntax\n    `AddAspNetCoreMetadataProviders` is now deprecated).\n  - `.RunBootstrapperOnHostStartup()` runs bootstrappers together with ASP.NET\n    host startup. Previously, this was done in `AddAspNetCoreMetadataProviders`\n    and led to some confusion.\n  - `.UseMvcJsonOptions()` adds EventFlow JSON configuration (see below) to ASP.NET Core,\n    so you can accept and return Single Value Objects as plain strings for example.\n  - `.Add{Whatever}Metadata()` configures specific metadata provider.\n  - `.AddUserClaimsMetadata(params string claimTypes)` configures the new claims metadata\n    provider (for auditing or \"ChangedBy\" in read models).\n  - `.UseLogging()` configures an adapter for Microsoft.Extensions.Logging\n  - `.UseModelBinding()` adds model binding support for Single Value Objects:\n    ```csharp\n\t    [HttpGet(\"customers/{id}\")]\n\t    public async Task<IActionResult> SingleValue(CustomerId id)\n\t    {\n\t        if (!ModelState.IsValid)\n\t        {\n\t            return BadRequest(ModelState);\n\t        }\n    ```\n* Fix: ASP.NET Core `AddRequestHeadersMetadataProvider` doesn't throw when\n  HttpContext is null.\n* Fix: `ReadModelRepopulator` now correctly populates `IAmAsyncReadModelFor`\n\n### New in 0.72.3914 (released 2019-05-28)\n\n* New: `EventFlow.TestHelpers` are now released as .NET Standard as well\n* Fix: Upgrade `EventStore.Client` to v5.0.1 and use it for both .NET Framework and .NET Core\n* Fix: Storing events in MS SQL Server using `MsSqlEventPersistence` now correctly\n  handles non-ANSI unicode characters in strings.\n* Fix: Source link integration now works correctly\n\n### New in 0.71.3834 (released 2019-04-17)\n\n* Breaking: Commands published from AggregateSaga which return `false` \n  in `IExecutionResult.IsSuccess` will newly lead to an exception being thrown.\n  For disabling all new changes just set protected property\n  `AggregateSaga.ThrowExceptionsOnFailedPublish` to `false` in your AggregateSaga constructor.\n  Also an Exception thrown from any command won't prevent other commands from being executed.\n  All exceptions will be collected and then re-thrown in SagaPublishException (even in case \n  of just one Exception). The exception structure is following:\n  - SagaPublishException : AggregateException\n    - .InnerExceptions\n      - CommandException : Exception\n        - .CommandType\n        - .SourceId\n        - .InnerException # in case of an exception thrown from the command\n      - CommandException : Exception\n        - .CommandType\n        - .SourceId\n        - .ExecutionResult # in case of returned `false` in `IExecutionResult.IsSuccess`\n  You need to update your `ISagaErrorHandler` implementation to reflect new exception structure,\n  unless you disable this new feature.\n* Fix: MongoDB read store no longer throws an exception on non-existing read models (#625)\n\n### New in 0.70.3824 (released 2019-04-11)\n\n* Breaking: Changed target framework to to .NET Framework 4.5.2 for the following NuGet packages,\n  as Microsoft has [discontinued](https://github.com/Microsoft/dotnet/blob/master/releases/README.md)\n  support for .NET Framework 4.5.1\n  - `EventFlow`\n  - `EventFlow.TestHelpers`\n  - `EventFlow.Autofac`\n  - `EventFlow.Elasticsearch`\n  - `EventFlow.Examples.Shipping`\n  - `EventFlow.Examples.Shipping.Queries.InMemory`\n  - `EventFlow.Hangfire`\n  - `EventFlow.MongoDB`\n  - `EventFlow.MsSql`\n  - `EventFlow.Owin`\n  - `EventFlow.PostgreSql`\n  - `EventFlow.RabbitMQ`\n  - `EventFlow.Sql`\n  - `EventFlow.SQLite`\n* New: Added [SourceLink](https://github.com/dotnet/sourcelink) support\n* Fix: `DispatchToSagas.ProcessSagaAsync` use `EventId` instead of `SourceId` as `SourceId` \n  for delivery of external event to AggregateSaga\n* Fix: `Identity<T>.NewComb()` now produces string values that doesn't cause\n  too much index fragmentation in MSSQL string columns\n\n### New in 0.69.3772 (released 2019-02-12)\n\n* New: Added configuration option to set the \"point of no return\" when using\n  cancellation tokens. After this point in processing, cancellation tokens\n  are ignored: \n  `options.Configure(c => c.CancellationBoundary = CancellationBoundary.BeforeCommittingEvents)`\n* New: Added `EventFlowOptions.RunOnStartup<TBootstrap>` extension method to\n  register `IBootstrap` types that should run on application startup.\n* New: Support for async read model updates (`IAmAsyncReadModelFor`).\n  You can mix and match asynchronous and synchronous updates, \n  as long as you don't subscribe to the same event in both ways.\n* Fix: Added the schema `dbo` to the `eventdatamodel_list_type` in script \n  `0002 - Create eventdatamodel_list_type.sql` for `EventFlow.MsSql`.\n* Fix: `LoadAllCommittedEvents` now correctly handles cases where the \n  `GlobalSequenceNumber` column contains gaps larger than the page size. This bug\n  lead to incomplete event application when using the `ReadModelPopulator` (see #564).\n* Fix: `IResolver.Resolve<T>()` and `IResolver.Resolve(Type)` now throw an\n  exception for unregistered services when using `EventFlow.DependencyInjection`.\n* Minor fix: Fixed stack overflow in `ValidateRegistrations` when decorator\n  components are co-located together with other components that are registed using\n  `Add*`-methods\n\n### New in 0.68.3728 (released 2018-12-03)\n\n* Breaking: Changed name of namespace of the projects AspNetCore `EventFlow.Aspnetcore`\n  to `EventFlow.AspNetCore`\n* Fix: Ignore multiple loads of the same saga\n\n### New in 0.67.3697 (released 2018-10-14)\n\n* New: Expose `Lifetime.Scoped` through the EventFLow service registration\n  interface\n* New: Upgrade NEST version to 6.1.0 and Hangfire.Core to 1.6.20\n  Now Elasticsearch provide one index per document. If `ElasticsearchTypeAttribute`\n  is used the index is map with the Name value as an alias.\n  When `ElasticsearchReadModelStore` delete all documents, it will delete \n  all indexes linked to the alias.\n* Fix: Internal IoC (remember its just for testing) now correctly invokes\n  `IDisposable.Dispose()` on scope and container dispose\n\n### New in 0.66.3673 (released 2018-09-30)\n\n*  **Critical fix:** - fix issue where the process using EventFlow could hang using\n   100% CPU due to unsynchronized Dictionary access, See #541.\n\n### New in 0.65.3664 (released 2018-09-22)\n\n* New: Entity Framework Core support in the form of the new `EventFlow.EntityFramework` NuGet\n  package. It has been tested with the following stacks.\n  - EF Core In-Memory Database Provider\n  - SQLite\n  - SQL Server\n  - PostgreSQL\n* Minor: Performance improvement of storing events for `EventFlow.PostgreSql`\n\n### New in 0.64.3598 (released 2018-08-24)\n\n* New: Added .NET standard support for SQLite\n\n### New in 0.63.3581 (released 2018-08-07)\n\n* New: PostgreSQL support in the form of the new `EventFlow.PostgreSql` NuGet package\n\n### New in 0.62.3569 (released 2018-07-05)\n\n* New: Created `AggregateReadStoreManager<,,,>` which is a new read store manager\n  for read models that have a 1-to-1 relation with an aggregate. If read models get\n  out of sync, or events are applied in different order, events are either fecthed\n  or skipped. Added extensions to allow registration.\n  - `UseInMemoryReadStoreFor<,,>`\n  - `UseElasticsearchReadModelFor<,,>`\n  - `UseMssqlReadModelFor<,,>`\n  - `UseSQLiteReadModelFor<,,>`\n* New: Added `ReadModelId` and `IsNew` properties to the context object that is\n  available to a read model inside the `Apply` methods in order to better support\n  scenarios where a single event affects multiple read model instances.\n* Minor: Applying events to a snapshot will now have the correct `Version` set\n  inside the `Apply` methods.\n* Minor: Trying to apply events in the wrong order will now throw an exception.\n\n### New in 0.61.3524 (released 2018-06-26)\n\n* New: Support for `Microsoft.Extensions.DependencyInjection` (`IServiceProvider`\n  and `IServiceCollection`) using the `EventFlow.DependencyInjection` NuGet package.\n\n  Add it to your ASP.NET Core 2.0 application:\n  ```csharp\n\tpublic void ConfigureServices(IServiceCollection services)\n\t{\n\t\tservices.AddMvc();\n\t\tservices.AddEventFlow(o => o.AddDefaults(MyDomainAssembly));\n\t}\n  ```\n  Or use it explicitly:\n  ```csharp\n\tEventFlowOptions.New.\n\t\t.UseServiceCollection()\n\t\t...\n\t\t.CreateServiceProvider();\n  ```\n* New: Package `EventFlow.Autofac` now references Autofac 3.5.2 for .NET\n  framework 4.5.1 (down from Autofac v4.5.0)\n* Fixed: Constructor injection of scoped instances into query handlers\n\n### New in 0.60.3490 (released 2018-06-18)\n\n* New: Implemented optimistic concurrency checks for MSSQL, SQLite and\n  Elasticsearch read models\n* New: Added .NET standard support for EventStore\n* New: Delete read models by invoking `context.MarkForDeletion()` in an Apply method\n* Minor: Removed unnecessary transaction in EventStore persistance\n* Fixed: Read model SQL schema is no longer ignored for `Table` attribute\n\n### New in 0.59.3396 (released 2018-05-23)\n\n* Fix: Commands are now correctly published when no events are emitted from a saga\n  after handling a domain event\n* Minor fix: Updated name of Primary Key for MSSQL Snapshot Store to be different\n  from MSSQL Event Store, so both can be used in the same database without conflicts\n\n### New in 0.58.3377 (released 2018-05-15)\n\n* Minor fix: Corrected log in `CommandBus` regarding events emitted due to command\n\n### New in 0.57.3359 (released 2018-04-30)\n\n* Fixed: AggregateException/InvalidOperationException when reading and updating\n  an aggregate from different threads at the same time using `InMemoryEventPersistence`\n* New: .NET standard 1.6 and 2.0 support for `EventFlow.MsSql` package\n\n### New in 0.56.3328 (released 2018-04-24)\n\n* New: Allow enums to be used in `SingleValueObject<T>` and protect from\n  undefined enum values\n\n### New in 0.55.3323 (released 2018-04-24)\n\n* Fixed: Re-populating events to read models that span multiple aggregates\n  now has events orderd by timestamp instead of sequence numbers, i.e., events\n  from aggregates with higher sequences numbers isn't forced last\n* New: Trigger sagas without the need of any domain events by using\n  `ISagaStore.UpdateAsync(...)`\n* New: .NET standard 2.0 (still supports 1.6) support added to these\n  NuGet packages\n  - EventFlow\n  - EventFlow.Autofac\n  - EventFlow.Elasticsearch\n  - EventFlow.Hangfire\n  - EventFlow.Sql\n\n### New in 0.54.3261 (released 2018-02-25)\n\n- **Critical fix:** `SagaAggregateStore` was incorrectly putting an object reference\n  into its memory cache causing an object already disposed exception when working with\n  sagas\n- New: Added [LibLog](https://github.com/damianh/LibLog), enable by\n  calling the `IEventFlowOptions.UseLibLog(...)` extension\n\n### New in 0.53.3204 (released 2018-01-25)\n\n* New: Allow events to have multiple `EventVersion` attributes\n* Fixed: `ReflectionHelper.CompileMethodInvocation` now recognises\n  `private` methods.\n\n### New in 0.52.3178 (released 2017-11-02)\n\n* Fixed: `.UseFilesEventStore` now uses a thread safe singleton instance for\n  file system persistence, making it suitable for use in multi-threaded unit\n  tests. Please don't use the files event store in production scenarios\n* New: Support for unicode characters in type names. This simplifies using an\n  [ubiquitous language](http://www.jamesshore.com/Agile-Book/ubiquitous_language.html)\n  in non-english domains\n* Fixed: Include hyphen in prefix validation for identity values. This fixes a bug\n  where invalid identities could be created (e.g. `ThingyId.With(\"thingyINVALID-a41e...\")`)\n\n### New in 0.51.3155 (released 2017-10-25)\n\n* New: Removed the `new()` requirement for read models\n* New: If `ISagaLocator.LocateSagaAsync` cannot identify the saga for a given\n  event, it may now return `Task.FromResult(null)` in order to short-circuit\n  the dispatching process. This might be useful in cases where some instances\n  of an event belong to a saga process while others don't\n* Fixed: `StringExtensions.ToSha256()` can now be safely used from\n  concurrent threads\n\n### New in 0.50.3124 (released 2017-10-21)\n\n* New: While EventFlow tries to limit the about of painful API changes, the\n  introduction of execution/command results are considered a necessary step\n  towards as better API.\n\n  Commands and command handlers have been updated to support execution\n  results. Execution results is meant to be an alternative to throwing domain\n  exceptions to do application flow. In short, before you were required to\n  throw an exception if you wanted to abort execution and \"return\" a failure\n  message.\n\n  The introduction of execution results changes this, as it allows\n  returning a failed result that is passed all the way back to the command\n  publisher. Execution results are generic and can thus contain e.g. any\n  validation results that a UI might need. The `ICommandBus.PublishAsync`\n  signature has changed to reflect this.\n\n  from\n  ```csharp\n      Task<ISourceId> PublishAsync<TAggregate, TIdentity, TSourceIdentity>(\n        ICommand<TAggregate, TIdentity, TSourceIdentity> command)\n        where TAggregate : IAggregateRoot<TIdentity>\n        where TIdentity : IIdentity\n        where TSourceIdentity : ISourceId\n  ```\n  to\n  ```csharp\n      Task<TExecutionResult> PublishAsync<TAggregate, TIdentity, TExecutionResult>(\n        ICommand<TAggregate, TIdentity, TExecutionResult> command,\n        CancellationToken cancellationToken)\n        where TAggregate : IAggregateRoot<TIdentity>\n        where TIdentity : IIdentity\n        where TExecutionResult : IExecutionResult\n  ```\n\n  Command handler signature has changed from\n\n  ```csharp\n      Task ExecuteAsync(\n          TAggregate aggregate,\n          TCommand command,\n          CancellationToken cancellationToken);\n  ```\n  to\n  ```csharp\n      Task<TExecutionResult> ExecuteCommandAsync(\n          TAggregate aggregate,\n          TCommand command,\n          CancellationToken cancellationToken)\n  ```\n\n  Migrating to the new structure should be seamless if your current code base\n  inherits its command handlers from the provided `CommandHandler<,,>` base\n  class.\n\n* Breaking: Source IDs on commands have been reworked to \"make room\" for\n  execution results on commands. The generic parameter from `ICommand<,,>`\n  and `ICommandHandler<,,,>` has been removed in favor of the new execution\n  results. `ICommand.SourceId` is now of type `ISourceId` instead of using\n  the generic type and the `ICommandBus.PublishAsync` no longer returns\n  `Task<ISourceId>`\n\n  To get code that behaves similar to the previous version, simply take the\n  `ISourceId` from the command, i.e., instead of this\n\n  ```csharp\n  var sourceId = await commandBus.PublishAsync(command);\n  ```\n  write this\n  ```csharp\n  await commandBus.PublishAsync(command);\n  var sourceId = command.SourceId;\n  ```\n  (`CancellationToken` and `.ConfigureAwait(false)` omitted fromt he above)\n\n* Breaking: Upgraded NuGet dependency on `RabbitMQ.Client` from `>= 4.1.3`\n  to `>= 5.0.1`\n\n### New in 0.49.3031 (released 2017-09-07)\n\n* Breaking: Upgraded `EventStore.Client` dependency to version 4.0\n* Breaking: Changed target framework for `EventFlow.EventStores.EventStore` to\n  .NET 4.6.2 as required by `EventStore.Client` NuGet dependency\n* Fix: `EventFlow.Hangfire` now depends on `Hangfire.Core` instead of\n  `Hangfire`\n* New: Added an overload to `IDomainEventPublisher.PublishAsync` that isn't\n  generic and doesn't require an aggregate ID\n* New: Added `IReadModelPopulator.DeleteAsync` that allows deletion of single\n  read models\n* Obsolete: `IDomainEventPublisher.PublishAsync<,>` (generic) in favor of the\n  new less restrictive non-generic overload\n\n### New in 0.48.2937 (released 2017-07-11)\n\n* Breaking: Moved non-async methods on `IReadModelPopulator` to extension\n  methods\n* New: Added non-generic overloads for purge and populate methods on\n  `IReadModelPopulator`\n* New: Provided `EventFlow.TestHelpers` which contains several test suites\n  that is useful when developing event and read model stores for EventFlow.\n  The package is an initial release and its interface is unstable and\n  subject to change\n* New: Now possible to configure retry delay for MSSQL error `40501` (server\n  too busy) using `IMsSqlConfiguration.SetServerBusyRetryDelay(RetryDelay)`\n* New: Now possible to configure the retry count of transient exceptions for\n  MSSQL and SQLite using the `ISqlConfiguration.SetTransientRetryCount(int)`\n* Fixed: Added MSSQL error codes `10928`, `10929`, `18401` and `40540` as well\n  as a few native `Win32Exception` exceptions to the list treated as transient\n  errors, i.e., EventFlow will automatically retry if the server returns one\n  of these\n\n### New in 0.47.2894 (released 2017-06-28)\n\n* New: To be more explicit, `IEventFlowOpions.AddSynchronousSubscriber<,,,>` and\n  `IEventFlowOpions.AddAsynchronousSubscriber<,,,>` generic methods\n* Fix: `IEventFlowOpions.AddSubscriber`, `IEventFlowOpions.AddSubscribers` and\n  `IEventFlowOpions.AddDefaults` now correctly registers implementations of\n  `ISubscribeAsynchronousTo<,,>`\n* Obsolete:  `IEventFlowOpions.AddSubscriber` is marked obsolete in favor of its\n  explicite counterparts\n\n### New in 0.46.2886 (released 2017-05-29)\n\n* Fix: EventFlow now uses a Autofac lifetime scope for validating service\n  registrations when `IEventFlowOpions.CreateResolver(true)` is invoked.\n  Previously services were created but never disposed as they were resolved\n  using the root container\n\n### New in 0.45.2877 (released 2017-05-28)\n\n* Breaking: Asynchronous subscribers are now **disabled by default**, i.e.,\n  any implementations of `ISubscribeAsynchronousTo<,,>` wont get invoked\n  unless enabled\n  ```\n  eventFlowOptions.Configure(c => IsAsynchronousSubscribersEnabled = true);\n  ```\n  the `ITaskRunner` has been removed and asynchronous subscribers are now\n  invoked using a new scheduled job that's scheduled to run right after the\n  domain events are emitted. Using the `ITaskRunner` led to unexpected task\n  terminations, especially if EventFlow was hosted in IIS. If enabling\n  asynchronous subscribers, please _make sure_ to configure proper job\n  scheduling, e.g. by using the `EventFlow.Hangfire` NuGet package. The default\n  job scheduler is `InstantJobScheduler`, which executes jobs _synchronously_,\n  giving a end result similar to that of synchronous subscribers\n* Breaking: `InstantJobScheduler`, the default in-memory scheduler if nothing\n  is configured, now swallows all job exceptions and logs them as errors. This\n  ensure that the `InstantJobScheduler` behaves as any other out-of-process\n  job scheduler\n\n### New in 0.44.2832 (released 2017-05-12)\n\n* New: .NET Standard 1.6 support for the following NuGet packages\n  - `EventFlow`\n  - `EventFlow.Autofac`\n  - `EventFlow.Elasticsearch`\n  - `EventFlow.Hangfire`\n  - `EventFlow.RabbitMQ`\n* Fixed: Removed dependency `Microsoft.Owin.Host.HttpListener` from\n  `EventFlow.Owin` as it doesn't need it\n\n### New in 0.43.2806 (released 2017-05-05)\n\n* Breaking: Updated _all_ NuGet package dependencies to their latest versions\n* New: EventFlow now embeds PDB and source code within the assemblies using\n  [SourceLink](https://github.com/ctaggart/SourceLink) (GitLink now removed)\n\n### New in 0.42.2755 (released 2017-05-02)\n\n* Fixed: The deterministic `IDomainEvent.Metadata.EventId` is now correctly\n  based on the both the aggregate identity and the aggregate sequence number,\n  instead of merely the aggregate identity\n* Fixed: [GitLink](https://github.com/gittools/gitlink) PDB source URLs\n\n### New in 0.41.2727 (released 2017-04-27)\n\n* New: NuGet packages now contain PDB files with links to GitHub\n  (thanks to [GitLink](https://github.com/gittools/gitlink)). Be sure\n  to check `Enable source server support` to be able to step through\n  the EventFlow source code. See GitLink documentation for details\n* Fixed: Fixed a bug in how EventFlow registers singletons with Autofac\n  that made Autofac invoke `IDisposable.Dispose()` upon disposing\n  lifetime scopes\n\n### New in 0.40.2590 (released 2017-03-30)\n\n* New: Updated EventFlow logo (thanks @olholm)\n* Fixed: Corrected logo path in NuGet packages\n\n### New in 0.39.2553 (released 2017-01-16)\n\n* New: Autofac is no longer IL merged into the `EventFlow` core NuGet package.\n  This is both in preparation for .NET Core and to simplify the build process.\n  EventFlow now ships with a custom IoC container by default. The Autofac based\n  IoC container is still available via the `EventFlow.Autofac` and will\n  continue to be supported as it is recommended for production use\n* New: An IoC container based aggregate root factory is now the default\n  aggregate factory. The old implementation merely invoked a constructor\n  with the aggregate ID as argument. The new default also checks if any\n  additional services are required for the constructor making the distinction\n  between the two obsolete\n* New: `Command<,,>` now inherits from `ValueObject`\n* Obsolete: `UseResolverAggregateRootFactory()` and `UseAutofacAggregateRootFactory()`\n  are marked as obsolete as this is now the default. The current implementation\n  of these methods does nothing\n* Obsolete: All `IEventFlowOptions.AddAggregateRoots(...)` overloads are obsolete,\n  the aggregate factory no longer has any need for the aggregate types to be\n  registered with the container. The current implementation of the method does\n  nothing\n\n### New in 0.38.2454 (released 2016-12-02)\n\n* Fix: Single aggregate read models can now be re-populated again\n\n### New in 0.37.2424 (released 2016-11-08)\n\n* Breaking: Remove the following empty and deprecated MSSQL NuGet packages. If\n  you use any of these packages, then switch to the `EventFlow.MsSql` package\n  - `EventFlow.EventStores.MsSql`\n  - `EventFlow.ReadStores.MsSql`\n* Breaking: `ITaskRunner.Run(...)` has changed signature. The task factory now\n  gets an instance of `IResolver` that is valid for the duration of the task\n  execution\n* Fixed: The resolver scope of `ISubscribeAsynchronousTo<,,>` is now valid for\n  the duration of the domain handling\n* New: Documentation is now released in HTML format along with NuGet packages.\n  Access the ZIP file from the GitHub releases page\n\n### New in 0.36.2315 (released 2016-10-18)\n\n* New: Documentation is now hosted at http://docs.geteventflow.net/ and\n  http://eventflow.readthedocs.io/ and while documentation is still kept\n  along the source code, the documentation files have been converted from\n  markdown to reStructuredText\n* New: Added `ISubscribeAsynchronousTo<,,>` as an alternative to the existing\n  `ISubscribeSynchronousTo<,,>`, which allow domain event subscribers to be\n  executed using the new `ITaskRunner`\n* New: Added `ITaskRunner` for which the default implementation is mere a thin\n  wrapper around `Task.Run(...)` with some logging added. Implemting this\n  interface allows control of how EventFlows runs tasks. Please note that\n  EventFlow will only use `ITaskRunner` in very limited cases, e.g. if\n  there's implantations of `ISubscribeAsynchronousTo<,,>`\n\n### New in 0.35.2247 (released 2016-09-06)\n\n* Fixed: `IAggregateStore.UpdateAsync` and `StoreAsync` now publishes committed\n  events as expected. This basically means that its now possible to circumvent the\n  command and command handler pattern and use the `IAggregateStore.UpdateAsync`\n  directly to modify an aggregate root\n* Fixed: Domain events emitted from aggregate sagas are now published\n\n### New in 0.34.2221 (released 2016-08-23)\n\n* **New core feature:** EventFlow now support sagas, also known as process\n  managers. The use of sagas is opt-in. Currently EventFlow only supports sagas\n  based on aggregate roots, but its possible to implement a custom saga store.\n  Consult the documentation for details on how to get started using sagas\n* New: Added `IMemoryCache` for which the default implementation is a thin\n  wrapper for the .NET built-in `MemoryCache`. EventFlow relies on extensive use\n  of reflection and the internal parts of EventFlow will move to this\n  implementation for caching internal reflection results to allow better control\n  of EventFlow memory usage. Invoke the `UsePermanentMemoryCache()` extension\n  method on `IEventFlowOptions` to have EventFlow use the previous cache\n  behavior using `ConcurrentDictionary<,,>` based in-memory cache\n* New: Added `Identity<>.With(Guid)` which allows identities to be created\n  based on a specific `Guid`\n* New: Added `Identity<>.GetGuid()` which returns the internal `Guid`\n\n### New in 0.33.2190 (released 2016-08-16)\n\n* Fixed: Fixed regression in `v0.32.2163` by adding NuGet package reference\n  `DbUp` to `EventFlow.Sql`. The package was previously ILMerged.\n* Fixed: Correct NuGet package project URL\n  - Old: https://github.com/rasmus/EventFlow\n  - New: https://github.com/eventflow/EventFlow\n\n### New in 0.32.2163 (released 2016-07-04)\n\n* Breaking: This release contains several breaking changes related to\n  Elasticsearch read models\n  - Elasticsearch NuGet package has been renamed to `EventFlow.Elasticsearch`\n  - Upgraded Elasticsearch dependencies to version 2.3.3\n  - Purging all read models from Elasticsearch for a specific type now\n    **deletes the index** instead of doing a _delete by query_. Make sure to\n    create a separate index for each read model. Delete by query has been\n    [moved to a plugin in Elasticsearch 2.x](https://www.elastic.co/blog/core-delete-by-query-is-a-plugin) and\n    deleting the entire index is now recommended\n  - The default index for a read model is now `eventflow-[lower case type name]`,\n    e.g. `eventflow-thingyreadmodel`, instead of merely `eventflow`\n* Breaking: The following NuGet dependencies have been updated\n  - `Elasticsearch.Net` v2.3.3 (up from v1.7.1)\n  - `Elasticsearch.Net.JsonNET` removed\n  - `NEST` v2.3.3 (up from v1.7.1)\n  - `Newtonsoft.Json` v8.0.3 (up from v7.0.1)\n* Breaking: Several non-async methods have been moved from the following\n  interfaces to extension methods and a few additional overloads have\n  been created\n  - `IEventStore`\n  - `ICommandBus`\n\n### New in 0.31.2106 (released 2016-06-30)\n\n* New: EventFlow can now be configured to throw exceptions thrown by subscribers\n  by `options.Configure(c => c.ThrowSubscriberExceptions = true)`\n* New: Added an `ICommandScheduler` for easy scheduling of commands\n\n### New in 0.30.2019 (released 2016-06-16)\n\n* Breaking: To simplify the EventFlow NuGet package structure, the two NuGet\n  packages `EventFlow.EventStores.MsSql` and `EventFlow.ReadStores.MsSql` have\n  been discontinued and their functionality move to the existing package\n  `EventFlow.MsSql`. The embedded SQL scripts have been made idempotent making\n  the upgrade a simple operation of merely using the new name spaces. To make\n  the upgrade easier, the deprecated NuGet packages will still be uploaded,\n  but will not contain anything\n* Fixed: When configuring Elasticsearch and using the overload of\n  `ConfigureElasticsearch` that takes multiple of URLs, `SniffingConnectionPool`\n  is now used instead of `StaticConnectionPool` and with sniff life span of five\n  minutes\n\n### New in 0.29.1973 (released 2016-04-19)\n\n* Breaking: `IAggregateRoot` has some breaking changes. If these methods aren't\n  used (which is considered the typical case), then the base class\n  `AggregateRoot<,,>` will automatically handle it\n  - `CommitAsync` has an additional `ISnapshotStore` parameter. If you don't\n    use snapshot aggregates, then you can safely pass `null`\n  - `LoadAsync` is a new method that lets the aggregate control how its\n    loaded fromt the event- and snapshot stores\n* **New core feature:** EventFlow now support snapshot creation for aggregate\n  roots. The EventFlow documentation has been updated to include a guide on\n  how to get started using snapshots. Snapshots are basically an opt-in optimized\n  method for handling long-lived aggregate roots. Snapshot support in EventFlow\n  introduces several new elements, read the documentation to get an overview.\n  Currently EventFlow offers the following snapshot stores\n  - In-memory\n  - Microsoft SQL Server\n* New: The `IAggregateStore` is introduced, which provides a cleaner interface\n  for manipulating aggregate roots. The most important method is the\n  `UpdateAsync` which allows easy updates to aggregate roots without the need\n  for a command and command handler\n  - `LoadAsync`\n  - `UpdateAsync`\n  - `StoreAsync`\n* New: `IEventStore` now supports loading events from a specific version using\n  the new overload of `LoadEventsAsync` that takes a `fromEventSequenceNumber`\n  argument\n* New: `IMsSqlDatabaseMigrator` now has a overloaded method named\n  `MigrateDatabaseUsingScripts` that takes an `IEnumerable<SqlScript>`\n  enabling specific scripts to be used in a database migration\n* New: Added suport to use EventStore persistence with connection strings\n  instead IPs only\n* Obsolete: The following aggregate related methods on `IEventStore` has been\n  marked as obsolete in favor of the new `IAggregateStore`. The methods will be\n  removed at some point in the future\n  - `LoadAggregateAsync`\n  - `LoadAggregate`\n\n### New in 0.28.1852 (released 2016-04-05)\n\n* **Critical fix:** `OptimisticConcurrencyRetryStrategy` now correctly only\n  states that `OptimisticConcurrencyException` should be retried. Before\n  _ALL_ exceptions from the event stores were retried, not only the transient!\n  If you have inadvertently become dependent on this bug, then implement your\n  own `IOptimisticConcurrencyRetryStrategy` that has the old behavior\n* Fixed: `OptimisticConcurrencyRetryStrategy` has a off-by-one error that caused\n  it to retry one less that it actually should\n* Fixed: Prevent `abstract ICommandHandler<,,,>` from being registered in\n   `EventFlowOptionsCommandHandlerExtensions.AddCommandHandlers(...)`\n* Fixed: Prevent `abstract IEventUpgrader<,>` from being registered in\n   `EventFlowOptionsEventUpgradersExtensions.AddEventUpgraders(...)`\n* Fixed: Prevent `abstract IMetadataProvider` from being registered in\n   `EventFlowOptionsMetadataProvidersExtensions.AddMetadataProviders(...)`\n* Fixed: Prevent `abstract IQueryHandler<,>` from being registered in\n   `EventFlowOptionsQueriesExtensions.AddQueryHandlers(...)`\n* Fixed: Prevent `abstract ISubscribeSynchronousTo<,,>` from being registered in\n   `EventFlowOptionsSubscriberExtensions.AddSubscribers(...)`\n\n### New in 0.27.1765 (released 2016-02-25)\n\n * New: Configure Hangfire job display names by implementing\n   `IJobDisplayNameBuilder`. The default implementation uses job description\n   name and version\n\n### New in 0.26.1714 (released 2016-02-20)\n\n * Breaking: Renamed `MssqlMigrationException` to `SqlMigrationException`\n * Breaking: Renamed `SqlErrorRetryStrategy` to `MsSqlErrorRetryStrategy`\n   as its MSSQL specific\n * Breaking: The NuGet package `Dapper` is no longer IL merged with the package\n   `EventFlow.MsSql` but is now listed as a NuGet dependency. The current\n   version used by EventFlow is `v1.42`\n * New: Introduced the NuGet package `EventFlow.SQLite` that adds event store\n   support for SQLite databases, both as event store and read model store\n * New: Introduced the NuGet package `EventFlow.Sql` as shared package for\n   EventFlow packages that uses SQL\n * New: Its now possible to configure the retry delay for MSSQL transient\n   errors using the new `IMsSqlConfiguration.SetTransientRetryDelay`. The\n   default is a random delay between 50 and 100 milliseconds\n\n### New in 0.25.1695 (released 2016-02-15)\n\n* Fixed: Deadlock in `AsyncHelper` if e.g. an exception caused no `async` tasks\n  to be scheduled. The `AsyncHelper` is used by EventFlow to expose non-`async`\n  methods to developers and provide the means to call `async` methods from\n  a synchronous context without causing a deadlock. There's no change to any of\n  the `async` methods.\n\n  The `AsyncHelper` is used in the following methods.\n  - `ICommandBus.Publish`\n  - `IEventStore.LoadEvents`\n  - `IEventStore.LoadAggregate`\n  - `IEventStore.LoadAllEvents`\n  - `IJobRunner.Execute`\n  - `IReadModelPopulator.Populate`\n  - `IReadModelPopulator.Purge`\n  - `IQueryProcessor.Process`\n\n### New in 0.24.1563 (released 2016-01-17)\n\n * Breaking: The following NuGet references have been updated\n   - `EventStore.Client` v3.4.0 (up from v3.0.2)\n   - `Hangfire.Core` v1.5.3 (up from v1.4.6)\n   - `RabbitMQ.Client` v3.6.0 (up from v3.5.4)\n * New: EventFlow now uses Paket to manage NuGet packages\n * Fixed: Incorrect use of `EventStore.Client` that caused it to throw\n   `WrongExpectedVersionException` when committing aggregates multiple times\n * Fixed: Updated NuGet package titles of the following NuGet packages to\n   contain assembly name to get a better overview when searching on\n   [nuget.org](http://nuget.org)\n   - `EventFlow.RabbitMQ`\n   - `EventFlow.EventStores.EventStore`\n * Fixed: Updated internal NuGet reference `dbup` to v3.3.0 (up from v3.2.1)\n\n### New in 0.23.1470 (released 2015-12-05)\n\n* Breaking: EventFlow no longer ignores columns named `Id` in MSSQL read models.\n  If you were dependent on this, use the `MsSqlReadModelIgnoreColumn` attribute\n* Fixed: Instead of using `MethodInfo.Invoke` to call methods on reflected\n  types, e.g. when a command is published, EventFlow now compiles an expression\n  tree instead. This has a slight initial overhead, but provides a significant\n  performance improvement for subsequent calls\n* Fixed: Read model stores are only invoked if there's any read model updates\n* Fixed: EventFlow now correctly throws an `ArgumentException` if EventFlow has\n  been incorrectly configure with known versioned types, e.g. an event\n  is emitted that hasn't been added during EventFlow initialization. EventFlow\n  would handle the save operation correctly, but if EventFlow was reinitialized\n  and the event was loaded _before_ it being emitted again, an exception would\n  be thrown as EventFlow would know which type to use. Please make sure to\n  correctly load all event, command and job types before use\n* Fixed: `IReadModelFactory<>.CreateAsync(...)` is now correctly used in\n  read store mangers\n* Fixed: Versioned type naming convention now allows numbers\n\n### New in 0.22.1393 (released 2015-11-19)\n\n* New: To customize how a specific read model is initially created, implement\n  a specific `IReadModelFactory<>` that can bootstrap that read model\n* New: How EventFlow handles MSSQL read models has been refactored to allow\n  significantly more freedom to developers. MSSQL read models are no longer\n  required to implement `IMssqlReadModel`, only the empty `IReadModel`\n  interface. Effectively, this means that no specific columns are required,\n  meaning that the following columns are no longer enforced on MSSQL read\n  models. Use the new required `MsSqlReadModelIdentityColumn` attribute to mark\n  the identity column and the optional (but recommended)\n  `MsSqlReadModelVersionColumn` to mark the version column.\n  - `string AggregateId`\n  - `DateTimeOffset CreateTime`\n  - `DateTimeOffset UpdatedTime`\n  - `int LastAggregateSequenceNumber`\n* Obsolete: `IMssqlReadModel` and `MssqlReadModel`. Developers should instead\n  use the `MsSqlReadModelIdentityColumn` and `MsSqlReadModelVersionColumn`\n  attributes to mark the identity and version columns (read above).\n  EventFlow will continue to support `IMssqlReadModel`, but it _will_ be\n  removed at some point in the future\n* Fixed: Added missing `UseElasticsearchReadModel<TReadModel, TReadModelLocator>()`\n  extension\n\n### New in 0.21.1312 (released 2015-10-26)\n\n* New: Added `Identity<>.NewComb()` that creates sequential unique IDs which can\n  be used to minimize database fragmentation\n* New: Added `IReadModelContext.Resolver` to allow read models to fetch\n  additional resources when events are applied\n* New: The `PrettyPrint()` type extension method, mostly used for verbose\n  logging, now prints even prettier type names, e.g.\n  `KeyValuePair<Boolean,Int64>` instead of merely `KeyValuePair'2`, making log\n  messages slightly more readable\n\n### New in 0.20.1274 (released 2015-10-22)\n\n* Breaking: `Entity<T>` now inherits from `ValueObject` but uses only the `Id`\n  field as equality component. Override `GetEqualityComponents()` if you have\n  a different notion of equality for a specific entity\n* Breaking: `Entity<T>` will now throw an `ArgumentNullException` if the `id`\n  passed to its constructor is `null`\n* Breaking: Fixed method spelling. Renamed\n `ISpecification<T>.WhyIsNotStatisfiedBy` to `WhyIsNotSatisfiedBy` and\n `Specification<T>.IsNotStatisfiedBecause` to `IsNotSatisfiedBecause`\n* New: Read model support for Elasticsearch via the new NuGet package\n  `EventFlow.ReadStores.Elasticsearch`\n\n### New in 0.19.1225 (released 2015-10-19)\n\n* Breaking: `AddDefaults` now also adds the job type definition to the\n  `IJobsDefinitonService`\n* New: Implemented a basic specification pattern by providing\n  `ISpecification<T>`, an easy-to-use `Specificaion<T>` and a set of extension\n  methods. Look at the EventFlow specification tests to get started\n* Fixed: `IEventDefinitionService`, `ICommandDefinitonService` and\n  `IJobsDefinitonService` now longer throw an exception if an existing\n  event is loaded, i.e., multiple calls to `AddEvents(...)`, `AddCommand(...)`\n  and `AddJobs(...)` no longer throws an exception\n* Fixed: `DomainError.With(...)` no longer executes `string.format` if only\n  one argument is parsed\n\n### New in 0.18.1181 (released 2015-10-07)\n\n* POTENTIAL DATA LOSS for the **files event store**: The EventFlow\n  internal functionality regarding event stores has been refactored resulting\n  in information regarding aggregate names being removed from the event\n  persistence layer. The files based event store no longer stores its events in\n  the path `[STORE PATH]\\[AGGREGATE NAME]\\[AGGREGATE ID]\\[SEQUENCE].json`, but\n  in the path `[STORE PATH]\\[AGGREGATE ID]\\[SEQUENCE].json`. Thus if you are\n  using the files event store for tests, you should move the events into the\n  new file structure. Alternatively, implement the new `IFilesEventLocator` and\n  provide your own custom event file layout.\n* Breaking: Event stores have been split into two parts, the `IEventStore`\n  and the new `IEventPersistence`. `IEventStore` has the same interface before\n  but the implementation is now no longer responsible for persisting the events,\n  only converting and serializing the persisted events. `IEventPersistence`\n  handles the actual storing of events and thus if any custom event stores have\n  been implemented, they should implement to the new `IEventPersistence`\n  instead.\n* New: Added `IEntity`, `IEntity<>` and an optional `Entity<>` that developers\n  can use to implement DDD entities.\n\n### New in 0.17.1134 (released 2015-09-28)\n\n* Fixed: Using NuGet package `EventFlow.Autofac` causes an exception with the\n  message `The type 'EventFlow.Configuration.Registrations.AutofacStartable'\n  is not assignable to service 'Autofac.IStartable` during EventFlow setup\n\n### New in 0.16.1120 (released 2015-09-27)\n\n* Breaking: Removed `HasRegistrationFor<>` and `GetRegisteredServices()`\n  from `IServiceRegistration` and added them to `IResolver` instead. The\n  methods required that all service registrations went through EventFlow,\n  which in most cases they will not\n* Obsolete: Marked `IServiceRegistration.RegisterIfNotRegistered(...)`, use\n  the `keepDefault = true` on the other `Register(...)` methods instead\n* New: Major changes have been done to how EventFlow handles service\n  registration and bootstrapping in order for developers to skip calling\n  `CreateResolver()` (or `CreateContainer()` if using the `EventFlow.Autofac`\n  package) completely. EventFlow will register its bootstrap services in the\n  IoC container and configure itself whenever the container is created\n* New: Introduced `IBootstrap` interface that you can register. It has a\n  single `BootAsync(...)` method that will be called as soon as the IoC\n  container is ready (similar to that of `IStartable` of Autofac)\n* Fixed: Correct order of service registration decorators. They are now\n  applied in the same order they are applied, e.g., the _last_ registered\n  service decorator will be the \"outer\" service\n* Fixed: Added missing `ICommand<,>` interface to abstract `Command<,>` class in\n  `EventFlow.Commands`.\n\n### New in 0.15.1057 (released 2015-09-24)\n\n* Fixed: Added `UseHangfireJobScheduler()` and marked `UseHandfireJobScheduler()`\n  obsolete, fixing method spelling mistake\n\n### New in 0.14.1051 (released 2015-09-23)\n\n* Breaking: All `EventFlowOptions` extensions are now `IEventFlowOptions`\n  instead and `EventFlowOptions` implements this interface. If you have made\n  your own extensions, you will need to use the newly created interface\n  instead. Changed in order to make testing of extensions and classes\n  dependent on the EventFlow options easier to test\n* New: You can now bundle your configuration of EventFlow into modules that\n  implement `IModule` and register these by calling\n  `EventFlowOptions.RegisterModule(...)`\n* New: EventFlow now supports scheduled job execution via e.g. Hangfire. You\n  can create your own scheduler or install the new `EventFlow.Hangfire` NuGet\n  package. Read the jobs documentation for more details\n* New: Created the OWIN `CommandPublishMiddleware` middleware that can\n  handle publishing of commands by posting a JSON serialized command to\n  e.g. `/commands/ping/1` in which `ping` is the command name and `1` its\n  version. Remember to add authentication\n* New: Created a new interface `ICommand<TAggregate,TIdentity,TSourceIdentity>`\n  to allow developers to control the type of `ICommand.SourceId`. Using the\n  `ICommand<TAggregate,TIdentity>` (or Command<TAggregate,TIdentity>)\n  will still yield the same result as before, i.e., `ICommand.SourceId` being\n  of type `ISourceId`\n* New: The `AddDefaults(...)` now also adds the command type definition to the\n  new `ICommandDefinitonService`\n\n### New in 0.13.962 (released 2015-09-13)\n\n * Breaking: `EventFlowOptions.AddDefaults(...)` now also adds query handlers\n * New: Added an optional `Predicate<Type>` to the following option extension\n   methods that scan an `Assembly`: `AddAggregateRoots(...)`,\n   `AddCommandHandlers(...)`, `AddDefaults(...)`, `AddEventUpgraders(...)`,\n   `AddEvents(...)`, `AddMetadataProviders(...)`, `AddQueryHandlers(...)` and\n   `AddSubscribers(...)`\n * Fixed: `EventFlowOptions.AddAggregateRoots(...)` now prevents abstract\n   classes from being registered when passing `IEnumerable<Type>`\n * Fixed: Events published to RabbitMQ are now in the right order for chains\n   of subscribers, if `event A -> subscriber -> command -> aggregate -> event B`,\n   then the order of published events to RabbitMQ was `event B` and then\n   `event A`\n\n### New in 0.12.891 (released 2015-09-04)\n\n * Breaking: Aggregate root no longer have `Aggregate` removed from their\n   when name, i.e., the metadata property with key `aggregate_name` (or\n   `MetadataKeys.AggregateName`). If you are dependent on the previous naming,\n   use the new `AggregateName` attribute and apply it to your aggregates\n * Breaking: Moved `Identity<>` and `IIdentity` from the `EventFlow.Aggregates`\n   namespace to `EventFlow.Core` as the identities are not specific for aggregates\n * Breaking: `ICommand.Id` is renamed to `ICommand.AggregateId` to make \"room\"\n   for the new `ICommand.SourceId` property. If commands are serialized, then\n   it _might_ be important verify that the serialization still works. EventFlow\n   _does not_ serialize commands, so no mitigation is provided. If the\n   `Command<,>` is used, make sure to use the correct protected constructor\n * Breaking: `IEventStore.StoreAsync(...)` now requires an additional\n   `ISourceId` argument. To create a random one, use `SourceId.New`, but it\n   should be e.g. the command ID that resulted in the events. Note, this method\n   isn't typically used by developers\n * New: Added `ICommand.SourceId`, which contains the ID of the source. The\n   default (if your commands inherit from `Command<,>`) will be a new\n   `CommandId` each time the a `Command<,>` instance is created. You can pass\n   specific value, merely use the newly added constructor taking the ID.\n   Alternatively you commands could inherit from the new\n   `DistinctCommand`, enabling commands with the same state to have the\n   same `SourceId`\n * New: Duplicate commands can be detected using the new `ISourceId`. Read the\n   EventFlow article regarding commands for more details\n * New: Aggregate names can now be configured using the attribute\n   `AggregateName`. The name can be accessed using the new `IAggregateRoot.Name`\n   property\n * New: Added `Identity<>.NewDeterministic(Guid, string)` enabling creation of\n   [deterministic GUIDs](http://code.logos.com/blog/2011/04/generating_a_deterministic_guid.html)\n * New: Added new metadata key `source_id` (`MetadataKeys.SourceId`) containing\n   the source ID, typically the ID of the command from which the event\n   originated\n * New: Added new metadata key `event_id` (`MetadataKeys.EventId`) containing a\n   deterministic ID for the event. Events with the same aggregate sequence\n   number and from aggregates with the same identity, will have the same event\n   identity\n * Fixed: `Identity<>.With(string)` now throws an `ArgumentException` instead of\n   a `TargetInvocationException` when passed an invalid identity\n * Fixed: Aggregate roots now build the cache of `Apply` methods once, instead\n   of when the method is requested the first time\n\n### New in 0.11.751 (released 2015-08-24)\n\n * Breaking: `EventFlowOptions.AddDefaults(...)` now also adds event\n   definitions\n * New: [RabbitMQ](http://www.rabbitmq.com/) is now supported through the new\n   NuGet package called `EventFlow.RabbitMQ` which enables domain events to be\n   published to the bus\n * New: If you want to subscribe to all domain events, you can implement\n   and register a service that implements `ISubscribeSynchronousToAll`. Services\n   that implement this will automatically be added using the\n   `AddSubscribers(...)` or `AddDefaults(...)` extension to `EventFlowOptions`\n * New: Use `EventFlowOptions.UseAutofacAggregateRootFactory(...)` to use an\n   Autofac aggregate root factory, enabling you to use services in your\n   aggregate root constructor\n * New: Use `EventFlowOptions.UseResolverAggregateRootFactory()` to use the\n   resolver to create aggregate roots. Same as\n   `UseAutofacAggregateRootFactory(...)` but for when using the internal IoC\n   container\n * New: Use `EventFlowOptions.AddAggregateRoots(...)` to register aggregate root\n   types\n * New: Use `IServiceRegistration.RegisterType(...)` to register services by\n   type\n\n### New in 0.10.642 (released 2015-08-17)\n\n * Breaking: Updated NuGet reference `Newtonsoft.Json` to v7.0.1\n   (up from v6.0.8)\n * Breaking: Remove the empty constructor from `SingleValueObject<>`\n * New: Added `SingleValueObjectConverter` to help create clean JSON when\n   e.g. domain events are serialized\n * New: Added a protected method `Register(IEventApplier)` to\n   `AggregateRoot<,>` that enables developers to override how events are\n   applied. Use this to e.g. implement state objects\n * New: Create `AggregateState<,,>` that developers can use to create aggregate\n   state objects. Call `Register(...)` with the state object as argument\n   to redirect events to it\n * New: Allow `AggregateRoot<,>.Apply(...)`, i.e., methods for applying events,\n   to be `private` and `protected`\n * New: Made `AggregateRoot<,>.Emit(...)` protected and virtual to allow\n   overrides that e.g. add a standard set of metadata from the aggregate state.\n * New: Made `AggregateRoot<,>.ApplyEvent(...)` protected and virtual to\n   allow more custom implementations of applying events to the aggregate root.\n * Fixed: Updated internal NuGet reference `Dapper` to v1.42 (up from v1.38)\n\n### New in 0.9.580 (released 2015-07-20)\n\n * Braking: `IEventStore.LoadAllEventsAsync` and `IEventStore.LoadAllEvents`\n   now take a `GlobalPosition` as an argument instead of a `long` for the\n   starting position. The `GlobalPosition` is basically a wrapper around a\n   string that hides the inner workings of each event store.\n * New: NuGet package `EventFlow.EventStores.EventStore` that provides\n   integration to [Event Store](https://geteventstore.com/). Its an initial\n   version and shouldn't be used in production.\n\n### New in 0.8.560 (released 2015-05-29)\n\n * Breaking: Remove _all_ functionality related to global sequence\n   numbers as it proved problematic to maintain. It also matches this\n   quote:\n\n   > Order is only assured per a handler within an aggregate root\n   > boundary. There is no assurance of order between handlers or\n   > between aggregates. Trying to provide those things leads to\n   > the dark side.\n   >> Greg Young\n\n   - If you use a MSSQL read store, be sure to delete the\n     `LastGlobalSequenceNumber` column during update, or set it to\n     default `NULL`\n   - `IDomainEvent.GlobalSequenceNumber` removed\n   - `IEventStore.LoadEventsAsync` and `IEventStore.LoadEvents` taking\n     a `GlobalSequenceNumberRange` removed\n * Breaking: Remove the concept of event caches. If you really need this\n   then implement it by registering a decorator for `IEventStore`\n * Breaking: Moved `IDomainEvent.BatchId` to metadata and created\n   `MetadataKeys.BatchId` to help access it\n * New: `IEventStore.DeleteAggregateAsync` to delete an entire aggregate\n   stream. Please consider carefully if you really want to use it. Storage\n   might be cheaper than the historic knowledge within your events\n * New: `IReadModelPopulator` is new and enables you to both purge and\n   populate read models by going though the entire event store. Currently\n   its only basic functionality, but more will be added\n * New: `IEventStore` now has `LoadAllEventsAsync` and `LoadAllEvents` that\n   enables you to load all events in the event store a few at a time.\n * New: `IMetadata.TimestampEpoch` contains the Unix timestamp version\n   of `IMetadata.Timestamp`. Also, an additional metadata key\n   `timestamp_epoch` is added to events containing the same data. Note,\n   the `TimestampEpoch` on `IMetadata` handles cases in which the\n   `timestamp_epoch` is not present by using the existing timestamp\n * Fixed: `AggregateRoot<>` now reads the aggregate version from\n   domain events applied during aggregate load. This resolves an issue\n   for when an `IEventUpgrader` removed events from the event stream\n * Fixed: `InMemoryReadModelStore<,>` is now thread safe\n\n### New in 0.7.481 (released 2015-05-22)\n\n * New: EventFlow now includes a `IQueryProcessor` that enables you to implement\n   queries and query handlers in a structure manner. EventFlow ships with two\n   ready-to-use queries and related handlers\n   - `ReadModelByIdQuery<TReadModel>`: Supported by in-memory and MSSQL read\n     model stores\n   - `InMemoryQuery<TReadModel>`: Only supported by in-memory read model store,\n     but lets you search for any read model based on a `Predicate<TReadModel>`\n\n### New in 0.6.456 (released 2015-05-18)\n\n * Breaking: Read models have been significantly improved as they can now\n   subscribe to events from multiple aggregates. Use a custom\n   `IReadModelLocator` to define how read models are located. The supplied\n   `ILocateByAggregateId` simply uses the aggregate ID. To subscribe\n   to other events, simply implement `IAmReadModelFor<,,>` and make sure\n   you have supplied a proper read model locator.\n   - `UseMssqlReadModel` signature changed, change to\n   `.UseMssqlReadModel<MyReadModel, ILocateByAggregateId>()` in\n   order to have the previous functionality\n   - `UseInMemoryReadStoreFor` signature changed, change to\n   `.UseInMemoryReadStoreFor<MyReadModel, ILocateByAggregateId>()` in\n   order to have the previous functionality\n * Breaking: A warning is no longer logged if you forgot to subscribe to\n   a aggregate event in your read model as read models are no longer\n   strongly coupled to a specific aggregate and its events\n * Breaking: `ITransientFaultHandler` now takes the strategy as a generic\n   argument instead of the `Use<>` method. If you want to configure the\n   retry strategy, use `ConfigureRetryStrategy(...)` instead\n * New: You can now have multiple `IReadStoreManager` if you would like to\n   implement your own read model handling\n * New: `IEventStore` now has a `LoadEventsAsync` and `LoadEvents`\n   that loads `IDomainEvent`s based on global sequence number range\n * New: Its now possible to register generic services without them being\n   constructed generic types, i.e., register `typeof(IMyService<>)` as\n   `typeof(MyService<>)`\n * New: Table names for MSSQL read models can be assigned using the\n   `TableAttribute` from `System.ComponentModel.DataAnnotations`\n * Fixed: Subscribers are invoked _after_ read stores have been updated,\n   which ensures that subscribers can use any read models that were\n   updated\n\n### New in 0.5.390 (released 2015-05-08)\n\n * POTENTIAL DATA LOSS for files event store: Files event store now\n   stores its log as JSON instead of an `int` in the form\n   `{\"GlobalSequenceNumber\":2}`. So rename the current file and put in the\n   global sequence number before startup\n * Breaking: Major changes has been made regarding how the aggregate\n   identity is implemented and referenced through interfaces. These changes makes\n   it possible to access the identity type directly though all interface. Some\n   notable examples are listed here. Note that this has NO impact on how data\n   is stored!\n   - `IAggregateRoot` changed to `IAggregateRoot<TIdentity>`\n   - `ICommand<TAggregate>` changed to `ICommand<TAggregate,TIdentity>`\n   - `ICommandHandler<TAggregate,TCommand>` changed to\n     `ICommandHandler<TAggregate,TIdentity, TCommand>`\n   - `IAmReadModelFor<TEvent>` changed to\n     `IAmReadModelFor<TAggregate,TIdentity,TEvent>`\n   - `IDomainEvent<TEvent>` changed to `IDomainEvent<TAggregate,TIdentity>`\n * New: `ICommandBus.Publish` now takes a `CancellationToken` argument\n * Fixed: MSSQL should list columns to SELECT when fetching events\n\n\n### New in 0.4.353 (released 2015-05-05)\n\n* Breaking: `ValueObject` now uses public properties instead of both\n  private and public fields\n* Breaking: Aggregate IDs are no longer `string` but objects implementing\n  `IIdentity`\n* Breaking: MSSQL transient exceptions are now retried\n* Breaking: All methods on `IMsSqlConnection` has an extra `Label` argument\n* New: `ITransientFaultHandler` added along with default retry strategies\n  for optimistic concurrency and MSSQL transient exceptions\n* New: Release notes added to NuGet packages\n* New: Better logging and more descriptive exceptions\n* Fixed: Unchecked missing in `ValueObject` when claculating hash\n* Fixed: `NullReferenceException` thrown if `null` was stored\n  in `SingleValueObject` and `ToString()` was called\n\n\n### New in 0.3.292 (released 2015-04-30)\n\n* First stable version of EventFlow\n"
        },
        {
          "name": "Resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "Source",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 1.0751953125,
          "content": "# Please note, some of the services can be installed on your machine \n\nversion: '2.4'\n\nservices:\n\n# If you have MS SQL Server installed locally you can comment this service or bind on different port\n  mssql:\n    image: mcr.microsoft.com/mssql/server:2017-latest\n    container_name: mssql-ef\n    environment:\n      ACCEPT_EULA: Y\n      SA_PASSWORD: Password12!\n    ports:\n      - \"1433:1433\"\n\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:6.8.3\n    container_name: elasticsearch-ef\n    environment:\n      - discovery.type=single-node\n      - ES_JAVA_OPTS=-Xms1g -Xmx1g\n    ports:\n      - \"9200:9200\"\n      - \"9300:9300\"\n    mem_limit: 4g\n\n  rabbitmq:\n    image: rabbitmq:3-management-alpine\n    container_name: rabbitmq-ef\n    ports:\n      - \"5672:5672\"\n      - \"15672:15672\"\n\n  eventstore:\n    image: eventstore/eventstore:release-4.1.3\n    container_name: eventstore-ef\n    ports:\n      - \"1113:1113\"\n      - \"2113:2113\"\n\n  postgres:\n    image: postgres:10\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: Password12!\n    ports:\n      - \"5432:5432\"\n"
        },
        {
          "name": "icon-128.png",
          "type": "blob",
          "size": 3.2705078125,
          "content": null
        },
        {
          "name": "icon-256.png",
          "type": "blob",
          "size": 3.21484375,
          "content": null
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 1.0615234375,
          "content": "site_name: EventFlow\nsite_url: https://geteventflow.net/\ntheme: material\ndocs_dir: Documentation\nrepo_name: EventFlow\nrepo_url: https://github.com/eventflow/EventFlow\nedit_uri: edit/develop-v1/Documentation\n\ntheme:\n  name: material\n  logo: assets/logo.png\n  palette:\n    scheme: slate\n    primary: blue grey\n  icon:\n    repo: fontawesome/brands/github\n  features:\n    - content.action.edit\n    - navigation.footer\n    - header.autohide\n\nplugins:\n- search\n- git-committers:\n    repository: eventflow/EventFlow\n    branch: develop-v1\n\nmarkdown_extensions:\n- admonition\n- attr_list\n- pymdownx.details\n- pymdownx.superfences\n- pymdownx.highlight:\n    linenums: true\n- pymdownx.emoji:\n    emoji_index: !!python/name:material.extensions.emoji.twemoji\n    emoji_generator: !!python/name:material.extensions.emoji.to_svg\n\nextra:\n  social:\n  - icon: fontawesome/brands/github\n    link: https://github.com/eventflow/EventFlow/\n  - icon: fontawesome/brands/linkedin\n    link: https://www.linkedin.com/in/rasmusmikkelsen/\n  - icon: fontawesome/brands/discord\n    link: https://discord.gg/QfgNPs5WxR\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.046875,
          "content": "mkdocs-material\nmkdocs-git-committers-plugin-2\n\n"
        }
      ]
    }
  ]
}