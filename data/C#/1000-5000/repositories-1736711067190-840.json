{
  "metadata": {
    "timestamp": 1736711067190,
    "page": 840,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "belav/csharpier",
      "stars": 1479,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".csharpierignore",
          "type": "blob",
          "size": 0.0341796875,
          "content": "Uploads/\n\nTests/MsBuild/TestCases/\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.326171875,
          "content": "**/.classpath\n**/.dockerignore\n**/.env\n**/.git\n**/.gitignore\n**/.project\n**/.settings\n**/.toolstarget\n**/.vs\n**/.vscode\n**/*.*proj.user\n**/*.dbmdl\n**/*.jfm\n**/azds.yaml\n**/bin\n**/charts\n**/docker-compose*\n**/Dockerfile*\n**/node_modules\n**/npm-debug.log\n**/obj\n**/secrets.dev.yaml\n**/values.dev.yaml\n**/.idea\n**/build\nLICENSE\nREADME.md"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 1.1513671875,
          "content": "[*.{xml,csproj,props,targets}]\nindent_size = 2\nindent_style = space\n\ncsharp_using_directive_placement = outside_namespace\ncsharp_style_inlined_variable_declaration = true\ncsharp_style_pattern_matching_over_is_with_cast_check = true\ncsharp_style_var_elsewhere = true\ncsharp_style_var_for_built_in_types = true\ncsharp_style_var_when_type_is_apparent = true\n\n[*.{cs,vb}]\ndotnet_diagnostic.RS0041.severity = warning\ndotnet_diagnostic.IDE0007.severity = warning\ndotnet_diagnostic.IDE0018.severity = warning\ndotnet_diagnostic.IDE0019.severity = warning\ndotnet_diagnostic.IDE0020.severity = warning\ndotnet_diagnostic.IDE0029.severity = warning\ndotnet_diagnostic.IDE0030.severity = warning\ndotnet_diagnostic.IDE0031.severity = warning\ndotnet_diagnostic.IDE0032.severity = warning\ndotnet_diagnostic.IDE0036.severity = warning\ndotnet_diagnostic.IDE0038.severity = warning\ndotnet_diagnostic.IDE0065.severity = warning\ndotnet_diagnostic.IDE0075.severity = warning\ndotnet_diagnostic.IDE0078.severity = warning\ndotnet_diagnostic.IDE0150.severity = warning\ndotnet_diagnostic.IDE0290.severity = warning\ndotnet_diagnostic.IDE0300.severity = warning\ndotnet_diagnostic.IDE0301.severity = warning\n\n\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.072265625,
          "content": "* text=auto\n\n# Preserve line endings in gradle scripts\ngradlew* -text diff"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.205078125,
          "content": "# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and WebStorm\n# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n\n# User-specific stuff\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# Jetbrains files\n**/.idea/**/workspace.xml\n**/.idea/**/tasks.xml\n**/.idea/**/usage.statistics.xml\n**/.idea/**/dictionaries\n**/.idea/**/shelf\n**/.idea/**/misc.xml\n**/.idea/**/contentModel.xml\n**/.idea/**/dataSources/\n**/.idea/**/dataSources.ids\n**/.idea/**/dataSources.local.xml\n**/.idea/**/sqlDataSources.xml\n**/.idea/**/dynamic.xml\n**/.idea/**/uiDesigner.xml\n**/.idea/**/dbnavigator.xml\n\n# Jetbrains doesn't say to ignore these, but it seems like they shouldn't be committed\n**/.idea/**/watcherTasks.xml\n\n.vs\n.vscode\n.vscode-test\n\n.gradle\n.qodana\n.tmp\n\nnode_modules\nbin\nobj\n\nApp_Data\n\nnupkg\n\ndist\nbuild\npublish\n\n*.doctree.txt\n*.actual.cst\n*.actual.test\n*.vsix\n/.husky/pre-commit\n\ndebug.txt\n\nSrc/CSharpier.VSCode/.idea/prettier.xml\n/Src/CSharpier.Tests/Samples/Scratch.cst\n\n.idea/.idea.CSharpier/.idea/riderMarkupCache.xml\n/Src/CSharpier.Benchmarks/BenchmarkDotNet.Artifacts/\n/Src/CSharpier.Tests/TestResults\n/Src/CSharpier.MsBuild.Test/.idea\n/Tests/MsBuild/GeneratedScenarios\n"
        },
        {
          "name": ".husky",
          "type": "tree",
          "content": null
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": ".run",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 94.7880859375,
          "content": "ï»¿# 0.30.6\n## What's Changed\n### Trailing comma is placed on new line if last enum value is followed by a comment [#1429](https://github.com/belav/csharpier/issues/1429)\n```c#\n// input\nenum MyEnum\n{\n    First,\n    Second // the second value\n}\n\n// 0.30.5\nenum MyEnum\n{\n    First,\n    Second // the second value\n    ,\n}\n\n// 0.30.6\nenum MyEnum\n{\n    First,\n    Second, // the second value\n}\n```\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.30.5...0.30.6\n# 0.30.5\n## What's Changed\n### Extra blank line added to file each time csharpier runs on this file [#1426](https://github.com/belav/csharpier/issues/1426)\nWhen a file ended in a comment and that comment had multiple blank lines before it, a new blank line was being added each time it was formatted.\n// input\n```c#\n// input\nnamespace MyCompany.MyNamespace;\n\n\n// Comment block\n\n// 0.30.4\nnamespace MyCompany.MyNamespace;\n\n\n\n// Comment block\n\n// 0.30.5\nnamespace MyCompany.MyNamespace;\n\n// Comment block\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.30.4...0.30.5\n# 0.30.4\n## What's Changed\n### Formatting deletes `unsafe` modifier [#1416](https://github.com/belav/csharpier/issues/1416)\nFormatting a using directive with an unsafe modifier resulted in the lose of the unsafe keyword\n```c#\n// input & expected output\nusing unsafe NvapiQueryInterface = delegate* unmanaged[Cdecl]<uint, nint>;\n\n// 0.30.3\nusing NvapiQueryInterface = delegate* unmanaged[Cdecl]<uint, nint>;\n```\n### CSharpier keeps adding a newline every time a file is formatted [#1408](https://github.com/belav/csharpier/issues/1408)\nIn some cases if a file ended with a comment, CSharpier would add a new extra blank line above the comment each time it formatted the file\n```c#\n// input & expected outpet\nusing System;\n\nnamespace MyCompany.MyNamespace;\n\n// Comment block\n\n// 0.30.3\nusing System;\n\nnamespace MyCompany.MyNamespace;\n\n\n// Comment block\n```\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.30.3...0.30.4\n# 0.30.3\n## What's Changed\n### CSharpier.MsBuild doesn't fail the github action anymore [#1357](https://github.com/belav/csharpier/issues/1357)\nThe changes for [1311](https://github.com/belav/csharpier/pull/1311) caused CSharpier.MsBuild to not report unformatted files as errors on linux.\n\nThanks go to @PetSerAl for the fix\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.30.2...0.30.3\n# 0.30.2\n## What's Changed\n### CSharpier.MsBuild now uses DOTNET_HOST_PATH instead of just dotnet [#1387](https://github.com/belav/csharpier/pull/1387)\nUse current dotnet binary from DOTNET_HOST_PATH instead of just dotnet.\n- Global (in PATH) may not exist (when used Binaries, but not Installers).\n- Global can have different runtime version.\n- Consistent with outer tools (csc for example).\nhttps://github.com/dotnet/roslyn/blob/324fd25331c969cd742ba68eee09ffd4b6fd29e3/src/Compilers/Shared/RuntimeHostInfo.cs#L61-L64\n- It is documented to be used for that purpose.\nhttps://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-environment-variables#dotnet_host_path\n\n### Collection expression inside a dictionary adds unexpected new line [#1390](https://github.com/belav/csharpier/issues/1390)\n```c#\n// input & expected output\nDictionary<string, string[]> dictionary = new()\n{\n    {\n        \"Key\",\n        [\n            \"SomeValue__________________________________________\",\n            \"SomeValue__________________________________________\",\n        ]\n    },\n};\n\n// 0.30.1\nDictionary<string, string[]> dictionary = new()\n{\n    {\n        \"Key\",\n\n        [\n            \"SomeValue__________________________________________\",\n            \"SomeValue__________________________________________\",\n        ]\n    },\n};\n```\n### Failed syntax tree validation reported when trailing comma added before a trailing comment [#1388](https://github.com/belav/csharpier/issues/1388)\nWith the following code, CSharpier will add a trailing comma before the trailing comment.  \nCSharpier's syntax tree validation was incorrectly reporting this as a failure.\n```c#\n// input\nvar someObject = new SomeObject()\n{\n    Property1 = 1,\n    Property2 = 2 // Trailing Comment\n};\n\n// output\nvar someObject = new SomeObject()\n{\n    Property1 = 1,\n    Property2 = 2, // Trailing Comment\n};\n```\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.30.1...0.30.2\n# 0.30.1\n## What's Changed\nRevert tool command back to `dotnet-csharpier`, it was supposed to be changed to `csharpier` for 1.0.0\n\n# 0.30.0\n## Breaking Changes\nThe CSharpier dotnet tool no longer supports net6 & net7.\n## What's Changed\n### Support C# 13 & dotnet 9. [#1318](https://github.com/belav/csharpier/issues/1318)\nCSharpier now supports dotnet 9 along with formatting all C# 13 language features.\n### Inconsistent Formatting for new() Operator Compared to Explicit Object Constructors [#1364](https://github.com/belav/csharpier/issues/1364)\nImplicit and explicit object initialization with constructors was not formatted consistently\n```c#\n// input & expected output\nSomeObject someObject = new(\n    someLongParameter___________________,\n    someLongParameter___________________\n)\n{\n    Property = longValue_______________________________________________________________________,\n};\n\nSomeObject someObject = new SomeObject(\n    someLongParameter___________________,\n    someLongParameter___________________\n)\n{\n    Property = longValue_______________________________________________________________________,\n};\n\n// 0.29.2\nSomeObject someObject =\n    new(someLongParameter___________________, someLongParameter___________________)\n    {\n        Property = longValue_______________________________________________________________________,\n    };\n\nSomeObject someObject = new SomeObject(\n    someLongParameter___________________,\n    someLongParameter___________________\n)\n{\n    Property = longValue_______________________________________________________________________,\n};\n\n```\n### Adds additional space before each member access in verbatim interpolated multiline string [#1358](https://github.com/belav/csharpier/issues/1358)\nWhen an interpolated verbatim string contained line breaks, the code within the interpolations would contain extra spaces.\n```c#\n// input & expected output\nvar someStringWithLineBreakAndLongValue =\n    $@\"\n{someValue.GetValue().Name} someLongText________________________________________________________________\";\n\n// 0.29.2\nvar someStringWithLineBreakAndLongValue =\n    $@\"\n        {someValue .GetValue() .Name} someLongText________________________________________________________________\";\n```\n\n### Inserting trailing comma with trailing comment causes problems. [#1354](https://github.com/belav/csharpier/issues/1354)\nCSharpier would insert a trailing comma after a trailing comment and format the end result poorly.\n```c#\n// input\nvar someObject = new SomeObject()\n{\n    Property1 = 1,\n    Property2 = 2 // Trailing Comment\n};\n\n// 0.29.2\nvar someObject = new SomeObject()\n{\n    Property1 = 1,\n    Property2 =\n        2 // Trailing Comment\n    ,\n};\n\n// 0.30.0\nvar someObject = new SomeObject()\n{\n    Property1 = 1,\n    Property2 = 2, // Trailing Comment\n};\n```\n\n### Double line break before collection expression in field [#1351](https://github.com/belav/csharpier/issues/1351)\nCSharpier was inserting an extra line break on a long field name followed by a collection expression to initialize it.\n```c#\n// input & expected output\nclass ClassName\n{\n    public SomeType[] LongName____________________________________________________________________________ =\n    [\n        someLongValue___________________________________________________,\n        someLongValue___________________________________________________,\n    ];\n}\n\n// 0.29.2\nclass ClassName\n{\n    public SomeType[] LongName____________________________________________________________________________ =\n\n        [\n            someLongValue___________________________________________________,\n            someLongValue___________________________________________________,\n        ];\n}\n\n```\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.29.2...0.30.0\n# 0.29.2\n## What's Changed\n### Comments don't follow tabs indent style [#1343](https://github.com/belav/csharpier/issues/1343)\nPrior to `0.29.2` CSharpier was converting any tabs within the block of a multiline comment to spaces.\n```c#\npublic void SomeFunction()\n{\n\t/*\n\tThe following line is an example with an indent:\n\t\tThis line is indented by one tab. (prior to 0.29.2 this would end up as a tab followed by 4 spaces)\n\t*/\n\t/*\n\tThe following line is an example with an indent:\n\t\tThis line is indented by 4 spaces but will be converted to 1 tab (prior to 0.29.2 this would end up as a tab followed by 4 spaces)\n\t*/\n\t/*\n\tThe following line is an example with an indent:\n\t   This line is indented by 3 spaces but will be left as 3 spaces\n\t*/\n}\n```\n### `csharpier-ignore-start` now supported in object initializers [#1342](https://github.com/belav/csharpier/issues/1342)\n```c#\n// input & expected output\nreturn new SomeClass\n{\n    // csharpier-ignore-start\n    SomeProperty =     someValue,\n    SomeProperty2 =     someValue\n    // csharpier-ignore-end\n};\n\n// 0.29.1\nreturn new SomeClass\n{\n    // csharpier-ignore-start\n    SomeProperty = someValue,\n    SomeProperty2 = someValue\n    // csharpier-ignore-end\n};\n\n```\n### Fixed extra new line between cast and collection expression. [#1334](https://github.com/belav/csharpier/issues/1334)\n```c#\n// input & expected output\nCallMethod(\n    (string[])\n        [\n            longerValue_____________________________________________,\n            longerValue_____________________________________________,\n        ]\n);\n\n// 0.29.1\nCallMethod(\n    (string[])\n\n        [\n            longerValue_____________________________________________,\n            longerValue_____________________________________________,\n        ]\n);\n\n```\n\n### Support custom extensions in .editorconfig [#1273](https://github.com/belav/csharpier/issues/1273)\nAs of `0.29.0` CSharpier could format non-standard file extensions, but only if configured in the `csharpierrc` file. This is now supported with an `.editorconfig`\n\n```ini\n[*.cst]\ncsharpier_formatter = csharp\nindent_style = space\nindent_size = 2\nmax_line_length = 80\n```\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.29.1...0.29.2\n# 0.29.1\n## What's Changed\n### Sorting of usings with underscore differs from Visual Studio [#1327](https://github.com/belav/csharpier/issues/1327)\nCSharpier now sorts `_` to the bottom of usings.\n```c#\nusing SomeCompany.MWord;\nusing SomeCompany.ZWord;\nusing SomeCompany._Word;\n```\n### Process cannot access the file \"....net8.0\\any\\server.log\" while running multiple extensions. [#1324](https://github.com/belav/csharpier/issues/1324)\nCSharpier Server now uses a log file name based on the port that it is starting on to avoid concurrency issues trying to access the same log file\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.29.0...0.29.1\n# 0.29.0\n## Breaking Changes\n### The formatting command will now exit with an error code of 1 if one of the target files cannot be compiled [#1131](https://github.com/belav/csharpier/issues/1131)\nPrior to 0.29.0 if csharpier encountered a file that could not be compiled it would treat it as a warning and exit with a code of 0.  \nAs of 0.29.0 a file that cannot be compiled is now treated as an error and csharpier will exit with code 1\n\n## What's Changed\n### Enforce trailing commas in object and collection initializer [#668](https://github.com/belav/csharpier/issues/668)\nCSharpier will now add trailing commas automatically where appropriate. It will collapse to a single line and remove the trailing comma in cases where everything fits on one line.\n```c#\n// input\npublic enum SomeEnum\n{\n    Value1,\n    Value2\n}\n\nstring[] someArray = new string[]\n{\n    someLongValue_____________________________________________,\n    someLongValue_____________________________________________\n};\n\nstring[] someArray = new string[]\n{\n    someValue,\n    someValue,\n};\n\n// 0.29.0\npublic enum SomeEnum\n{\n    Value1,\n    Value2,\n}\n\nstring[] someArray = new string[]\n{\n    someLongValue_____________________________________________,\n    someLongValue_____________________________________________,\n}\n\nstring[] someArray = new string[] { someValue, someValue };\n```\nMany thanks go to @dawust for the contribution.\n\n### Support for formatting custom file extensions [#1220](https://github.com/belav/csharpier/issues/1220)\nPrior to 0.29.0 csharpier would only format files with an extension of .cs or .csx. It is now possible to configure csharpier to format other files extensions, and to specify configuration options per file extension.\nSee https://csharpier.com/docs/Configuration#configuration-overrides for more details.\n\n### Invalid blank line being added with lambda returning collection expression [#1306](https://github.com/belav/csharpier/issues/1306)\n```c#\n// input & expected output\nCallMethod(_ =>\n    [\n        LongValue________________________________________________,\n        LongValue________________________________________________,\n    ]\n);\n\n// 0.28.2\nCallMethod(_ =>\n\n    [\n        LongValue________________________________________________,\n        LongValue________________________________________________,\n    ]\n);\n\n```\n### Switch expressions do not break consistently with other lambdas [#1282](https://github.com/belav/csharpier/issues/1282)\nPrior to 0.29.0 csharpier would break before the `=>` in switch expression arms. It now breaks after them to be consistent with other lambda expressions.\n```c#\n// 0.28.2\nreturn someEnum switch\n{\n    Value1 => someOtherValue,\n    Value2\n    or Value3\n        => someValue________________________________________________________________________,\n    Value4\n        => someValue_____________________________________________________________________________,\n};\n\n// 0.29.0\nreturn someEnum switch\n{\n    Value1 => someOtherValue,\n    Value2 or Value3 =>\n        someValue________________________________________________________________________,\n    Value4 =>\n        someValue_____________________________________________________________________________,\n};\n\n```\n### Formatting of empty collection initializer for huge type [#1268](https://github.com/belav/csharpier/issues/1268)\nEmpty collection expression initializers formatting was including a break plus indentation resulting in poor formatting.\n```c#\n// 0.28.2\nvar someObject = new List<(\n    int Field1__________________________________,\n    int Field2__________________________________\n)>\n{\n    };\n\n// 0.29.0\nvar someObject = new List<(\n    int Field1__________________________________,\n    int Field2__________________________________\n)>\n{ };\n\n```\n\nThanks go to @Rudomitori for the contribution\n\n### Switch expression single line broken when preceded by comment [#1262](https://github.com/belav/csharpier/issues/1262)\nImproved formatting for short expression arms that have a leading comment.\n```c#\n// 0.28.2\nreturn someValue switch\n{\n    // comment\n    Some.One\n        => 1,\n    Some.Two => 2,\n};\n\nreturn someValue switch\n{\n    Some.One => 1,\n    // comment\n    Some.Two\n        => 2,\n};\n\n// 0.29.0\nreturn someValue switch\n{\n    // comment\n    Some.One => 1,\n    Some.Two => 2,\n};\n\nreturn someValue switch\n{\n    Some.One => 1,\n    // comment\n    Some.Two => 2,\n};\n\n```\n### Incorrect formatting of ternary expression with a comment after an interpolated string [#1258](https://github.com/belav/csharpier/issues/1258)\nFixed bug with comments on a ternary expression that resulted in invalid code.\n```c#\n// input & expected output\npublic string TrailingComment = someCondition\n    ? $\"empty\" // trailing comment\n    : someString;\n\n// 0.28.2\npublic string TrailingComment = someCondition ? $\"empty\" // trailing comment : someString;\n\n```\n### Formatting for indexer parameters should mostly be the same as for method parameters. [#1255](https://github.com/belav/csharpier/issues/1255)\nImproved formatting of indexed properties that contained attributes.\n```c#\n// input & expected output\npublic class ClassName\n{\n    public string this[\n        [SomeAttribute] int a________________________________,\n        [SomeAttribute] int b________________________________\n    ] => someValue;\n}\n\n// 0.28.2\npublic class ClassName\n{\n    public string this[[SomeAttribute] int a________________________________, [SomeAttribute]\n        int b________________________________] => someValue;\n}\n\n```\n\n### Do not overwrite `CSharpier_Check` when already set. [#1314](https://github.com/belav/csharpier/pull/1314)\nFixed a bug with csharpier.msbuild where it would overwrite the `CSharpier_Check` value in some cases.\n\nThanks go to @PetSerAl for the contribution\n\n### The CLI has contradictory message about directoryOrFile being required [#1296](https://github.com/belav/csharpier/issues/1296)\nThe help text for the cli has been improved to better indicate when `directoryOrFile` is required.\n\nThanks go to @marcinjahn for the contribution\n\n### Fullwidth unicode characters should be accounted for in print width [#260](https://github.com/belav/csharpier/issues/260)\nCSharpier now considers full width unicode characters such as `ê°` to be 2 spaces wide when determining how to format code.\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.28.2...0.29.0\n# 0.28.2\n## What's Changed\n### Pipe to `dotnet csharpier` fails when subdirectory is inaccessible [#1240](https://github.com/belav/csharpier/pull/1240)\nWhen running the following CSharpier would look for config files in subdirectories of the `pwd`. This could lead to exceptions if some of those directories were inaccessible.\n```\necho \"namespace Foo { public class Bar { public string Baz {get;set;}}}\" | dotnet csharpier\n```\n\nThanks go to @jamesfoster for reporting the issue.\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.28.1...0.28.2\n# 0.28.1\n## What's Changed\n### Third party .editorconfig leading to: Error Failure parsing editorconfig files [#1227](https://github.com/belav/csharpier/issues/1227)\nWhen CSharpier encountered an invalid `.editorconfig` file, it would throw an exception and not format files. These files could appear in 3rd party code (for example within node_modules). CSharpier now ignores invalid lines in `.editorconfigs`\n\n\nThanks go to @K0Te for reporting the issue\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.28.0...0.28.1\n# 0.28.0\n## What's Changed\n### Fix dedented method call if there is a long chain [#1154](https://github.com/belav/csharpier/issues/1154)\nIn some cases of method chains, the first invocation would end up dedented.\n\n```c#\n// 0.27.3\no.Property.CallMethod(\n    someParameter_____________________________,\n    someParameter_____________________________\n)\n    .CallMethod()\n    .CallMethod();\n\n// 0.28.0\no.Property.CallMethod(\n        someParameter_____________________________,\n        someParameter_____________________________\n    )\n    .CallMethod()\n    .CallMethod();\n```\n### Extra newline in switch case statement with curly braces [#1192](https://github.com/belav/csharpier/issues/1192\nIf a case statement started with a block it would get an extra new line\n```c#\n// 0.27.3\nswitch (someValue)\n{\n    case 0:\n    {\n        // dedented because the only statement is a block\n        break;\n    }\n\n    case 1:\n\n        {\n            // indented because there are two statements, a block then a break\n        }\n        break;\n}\n\n// 0.28.0\n// 0.27.3\nswitch (someValue)\n{\n    case 0:\n    {\n        // dedented because the only statement is a block\n        break;\n    }\n\n    case 1:\n        {\n            // indented because there are two statements, a block then a break\n        }\n        break;\n}\n```\n\nThanks go to @emberTrev for reporting the bug.\n\n### Handle more editorconfig glob patterns. [#1214](https://github.com/belav/csharpier/issues/1214)\nThe editorconfig parsing was not handling glob patterns that contained braces.\n```editorconfig\n# worked in 0.27.3\n[*.cs]\nindent_size = 4\ntab_width = 4\n\n# did not work in 0.27.3\n[*.{cs,csx}]\nindent_size = 4\ntab_width = 4\n\n# did not work in 0.27.3\n[*.{cs}]\nindent_size = 4\ntab_width = 4\n```\n\nThanks go to @kada-v for reporting the bug \n\n### Ignore-start combined with regions throws exception [#1197](https://github.com/belav/csharpier/issues/1197)\nThe following code would throw an exception, it is now working as expected.\n```c#\nclass ClassName\n{\n    #region Region\n    // csharpier-ignore-start\n    public string   Field;\n    // csharpier-ignore-end\n    #endregion\n}\n```\nThanks go to @davidescapolan01 for reporting the bug\n\n### Cannot format project containing editorconfig [#1194](https://github.com/belav/csharpier/issues/1194)\nOn some OSs the following would cause an exception.\n```bash\ndotnet new console -n foo\ncd foo\ndotnet new editorconfig\ndotnet csharpier ./\n```\n\nThanks go to @hashitaku for contributing the fix.\n\n### Expose IncludeGenerated in CodeFormatterOptions [#1215](https://github.com/belav/csharpier/issues/1215)\n`CodeFormatterOptions.IncludeGenerated` is now available for the SDK.\n\n### Returning errors + status from csharpier http server [#1191](https://github.com/belav/csharpier/pull/1191)\nImproved the http server that CSharpier will soon use to facilitate formatting by plugins. The formatting request now returns errors and a status for each file formatted.\nThis allows the plugin to provide more information to the user when they attempt to format a file. The plugins will be updated to use the http server option for CSharpier 0.28.0+\n\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.27.3...0.28.0\n# 0.27.3\n## What's Changed\n### Add more options to CodeFormatterOptions [#1172](https://github.com/belav/csharpier/issues/1172)\nThe API for CSharpier was only exposing `CodeFormatterOptions.PrintWidth`. It is now in sync with the CLI and exposes all of the available options\n```c#\npublic class CodeFormatterOptions\n{\n    public int Width { get; init; } = 100;\n    public IndentStyle IndentStyle { get; init; } = IndentStyle.Spaces;\n    public int IndentSize { get; init; } = 4;\n    public EndOfLine EndOfLine { get; init; } = EndOfLine.Auto;\n}\n```\n\nThanks go to @Phault for the contribution\n### Extra indent when call method on RawStringLiteral [#1169](https://github.com/belav/csharpier/issues/1169)\nWhen a raw string literal was the first argument to a method call, it was getting an extra indent.\n\n```c#\n// input & expected output\nCallMethod(\n    \"\"\"\n    SomeRawString\n    \"\"\".CallMethod()\n);\n\n// 0.27.2\nCallMethod(\n    \"\"\"\n        SomeRawString\n        \"\"\".CallMethod()\n);\n\n```\n\nThanks go to @Rudomitori for reporting the bug.\n### Using aliases sorting is not always the same depending on the input order [#1168](https://github.com/belav/csharpier/issues/1168)\nUsing aliases were not sorting properly, resulting differing outputs and unstable formatting.\n\nInputs of\n\n```c#\nusing A = string;\nusing B = string;\nusing C = string;\nusing D = string;\n```\nAnd\n```c#\nusing D = string;\nusing C = string;\nusing B = string;\nusing A = string;\n```\nNow always result in properly sorted output of\n```c#\nusing A = string;\nusing B = string;\nusing C = string;\nusing D = string;\n```\n\nThanks go to @Araxor for reporting the bug.\n### Spread (in collection expression) are not formatted [#1167](https://github.com/belav/csharpier/issues/1167)\nThe spread element was unformatted, and left as is. It is now formatted as follows.\n```c#\nint[] someArray = [.. someOtherArray];\nint[] someOtherArray = [.. value1, .. value2, .. value3];\n\nint[] someOtherArray =\n[\n    .. value1________________________________,\n    .. value2________________________________,\n    .. value3________________________________\n];\n```\n\nThanks go to @jods4 for reporting the bug.\n### Fix empty line before collection expression in attribute [#1164](https://github.com/belav/csharpier/pull/1160)\nA collection expression in an attribute resulted in an extra line before the collection expression.\n```c#\n// input & expected output\n[SomeAttribute(\n    [\n        someValue_______________________________________________,\n        someValue_______________________________________________,\n\n    ]\n)]\nclass ClassName { }\n\n// 0.27.2\n[SomeAttribute(\n\n    [\n        someValue_______________________________________________,\n        someValue_______________________________________________,\n    ]\n)]\nclass ClassName { }\n\n```\n\nThanks go to @Rudomitori for reporting the bug.\n### using static System.* usings not ordered before other static usings like using System.* ones [#1162](https://github.com/belav/csharpier/issues/1162)\nStatic usings were not following the rule that `System.*` should be sorted to the top.\n```c#\n// input & expected output\nusing static System;\nusing static System.Web;\nusing static AWord;\nusing static ZWord;\n\n// 0.27.2\nusing static AWord;\nusing static System;\nusing static System.Web;\nusing static ZWord;\n```\n\n### Remove hash from version [#1144](https://github.com/belav/csharpier/issues/1144)\nWhen `.net8` support was added, CSharpier started including a commit hash in the version number output. This was due to a [breaking change](https://github.com/dotnet/sdk/issues/34568) in the sdk.\n```bash\n> dotnet csharpier --version\n0.27.2+b456544aad8957d0e2026afe1a37544bb74552ba\n```\n\nCSharpier no longer includes the commit hash\n```bash\n> dotnet csharpier --version\n0.27.3\n```\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.27.2...0.27.3\n# 0.27.2\n## What's Changed\n### Orphan variable since 0.27.1 [#1153](https://github.com/belav/csharpier/issues/1153)\n0.27.1 introduced the following formatting regression, resulting in short variables being orphaned on a line\n```c#\n// 0.27.1\no\n    .Property.CallMethod(\n        someParameter_____________________________,\n        someParameter_____________________________\n    )\n    .CallMethod()\n    .CallMethod();\n\n// 0.27.2\no.Property.CallMethod(\n    someParameter_____________________________,\n    someParameter_____________________________\n)\n    .CallMethod()\n    .CallMethod();\n```\n\nThanks go to @aurnoi1 for reporting the bug\n\n### Better support for CSharp Script [#1141](https://github.com/belav/csharpier/issues/1141)\nVersion 0.27.1 parsed `.csx` files as if they were C#, so it could only format simple ones. It now parses them as CSharpScript files so it can format them properly.\n\nThanks go to @Eptagone for reporting the bug.\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.27.1...0.27.2\n# 0.27.1\n## What's Changed\n### Support for CSharp Script [#1141](https://github.com/belav/csharpier/issues/1141)\nPreviously CSharpier would only format files matching `*.cs` which prevented it from formatting C# script files. It now formats `*.{cs,csx}`\n\nThanks go to @Eptagone for the suggestion\n### Weird formatting of invocation chain [#1130](https://github.com/belav/csharpier/issues/1130)\nInvocation chains that started with an identifier <= 4 characters were causing a strange break in the first method call. There were other edge cases cleaned up while working on the fix.\n\n```c#\n// 0.27.0\nvar something________________________________________ = x.SomeProperty.CallMethod(\n    longParameter_____________,\n    longParameter_____________\n)\n    .CallMethod();\n\n// 0.27.1\nvar something________________________________________ = x\n    .SomeProperty.CallMethod(longParameter_____________, longParameter_____________)\n    .CallMethod();\n```\n\n```c#\n// 0.27.0\nvar someLongValue_________________ = memberAccessExpression[\n    elementAccessExpression\n].theMember______________________________();\n\n// 0.27.1\nvar someLongValue_________________ = memberAccessExpression[elementAccessExpression]\n    .theMember______________________________();\n```\n\n```c#\n// 0.27.0\nsomeThing_______________________\n    ?.Property\n    .CallMethod__________________()\n    .CallMethod__________________();\n\n// 0.27.1\nsomeThing_______________________\n    ?.Property.CallMethod__________________()\n    .CallMethod__________________();\n```\n\nThanks go to @Rudomitori for reporting the issue\n### \"Failed syntax tree validation\" for raw string literals [#1129](https://github.com/belav/csharpier/issues/1129)\nWhen an interpolated raw string changed indentation due to CSharpier formatting, CSharpier was incorrectly reporting it as failing syntax tree validation.\n```c#\n// input\nCallMethod(CallMethod(\n   $$\"\"\"\n   SomeString\n   \"\"\", someValue));\n\n// output\nCallMethod(\n    CallMethod(\n        $$\"\"\"\n        SomeString\n        \"\"\",\n        someValue\n    )\n);\n```\nThanks go to @Rudomitori for reporting the issue\n\n### Adding experimental support using HTTP for the extensions to communicate with CSharpier [#1137](https://github.com/belav/csharpier/pull/1137)\nThe GRPC support added in 0.27.0 increased the size of the nuget package significantly and has been removed.\n\nCSharpier can now start a kestrel web server to support communication with the extensions once they are all updated.\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.27.0...0.27.1\n# 0.27.0\n## What's Changed\n### Improve formatting of lambda expressions [#1066](https://github.com/belav/csharpier/pull/1066)\nMany thanks go to @Rudomitori for contributing a number of improvements to the formatting of lambda expressions.\n\nSome examples of the improvements.\n```c#\n// input\nvar affectedRows = await _dbContext.SomeEntities\n    .ExecuteUpdateAsync(\n        x => \n            x.SetProperty(x => x.Name, x => command.NewName)\n                .SetProperty(x => x.Title, x => command.NewTItle)\n                .SetProperty(x => x.Count, x => x.Command.NewCount)\n    );\n\n// 0.27.0\nvar affectedRows = await _dbContext.SomeEntities\n    .ExecuteUpdateAsync(x =>\n        x.SetProperty(x => x.Name, x => command.NewName)\n            .SetProperty(x => x.Title, x => command.NewTItle)\n            .SetProperty(x => x.Count, x => x.Command.NewCount)\n    );\n```\n\n```c#\n// input\nbuilder.Entity<IdentityUserToken<string>>(b =>\n{\n    b.HasKey(\n        l =>\n            new\n            {\n                l.UserId,\n                l.LoginProvider,\n                l.Name\n            }\n    );\n    b.ToTable(\"AspNetUserTokens\");\n});\n\n// 0.27.0\nbuilder.Entity<IdentityUserToken<string>>(b =>\n{\n    b.HasKey(l => new\n    {\n        l.UserId,\n        l.LoginProvider,\n        l.Name\n    });\n    b.ToTable(\"AspNetUserTokens\");\n});\n```\n\n```c#\n// input\ntable.PrimaryKey(\n    \"PK_AspNetUserTokens\",\n    x =>\n        new\n        {\n            x.UserId,\n            x.LoginProvider,\n            x.Name\n        }\n);\n\n// 0.27.0\ntable.PrimaryKey(\n    \"PK_AspNetUserTokens\",\n    x => new\n    {\n        x.UserId,\n        x.LoginProvider,\n        x.Name\n    }\n);\n```\n\n### `readonly ref` is changed to `ref readonly` causing error CS9190 [#1123](https://github.com/belav/csharpier/issues/1123)\nCSharpier was sorting modifiers in all places they occurred. Resulting the following change that led to code that would not compile.\n```c#\n// input\nvoid Method(ref readonly int someParameter) { }\n\n// 0.26.7\nvoid Method(readonly ref int someParameter) { }\n\n// 0.27.0\nvoid Method(ref readonly int someParameter) { }\n```\nThanks go to @aurnoi1 for reporting the bug\n### #if at the end of collection expression gets eaten [#1119](https://github.com/belav/csharpier/issues/1119)\nWhen a collection expression contained a directive immediately before the closing bracket, that directive was not included in the output.\n\n```c#\n// input\nint[] someArray =\n[\n    1\n#if DEBUG\n    ,\n    2\n#endif\n];\n\n// 0.26.7\nint[] someArray = [1];\n\n// 0.27.0\nint[] someArray =\n[\n    1\n#if DEBUG\n    ,\n    2\n#endif\n];\n```\n\nThanks go to @Meowtimer for reporting the bug\n### CSharpier.MsBuild - Set Fallback for dotnetcore3.1 or net5.0 applications [#1111](https://github.com/belav/csharpier/pull/1111)\nCSharpier.MsBuild made an assumption that the project being built would be built using net6-net8 and failed when the project was built with earlier versions of dotnet.\n\nIt now falls back to trying to use `net8`\n\nThanks go to @samtrion for the contribution\n### Allow empty/blank lines in object initializers [#1110](https://github.com/belav/csharpier/issues/1110)\nLarge object initializers now retain single empty lines between initializers.\n\n```c#\nvvar someObject = new SomeObject\n{\n    NoLineAllowedAboveHere = 1,\n\n    ThisLineIsOkay = 2,\n\n    // comment\n    AndThisLine = 3,\n    DontAddLines = 4,\n};\n```\n\nThanks go to @Qtax for the suggestion\n### Add option to allow formatting auto generated files. [#1055](https://github.com/belav/csharpier/issues/1055\nBy default CSharpier will not format files that were generated by the SDK, or files that begin with `<autogenerated />` comments.\n\nPassing the option `--include-generated` to the CLI will cause those files to be formatted.\n\n### Format raw string literals indentation [#975](https://github.com/belav/csharpier/issues/975)\nCSharpier now adjusts the indentation of raw string literals if the end delimiter is indented.\n\n```c#\n// input\nvar someString = \"\"\"\n            Indent based on previous line\n            \"\"\";\n\nvar doNotIndentIfEndDelimiterIsAtZero = \"\"\"\nKeep This\n    Where It\nIs\n\"\"\";\n\n// 0.26.7\nvar someString = \"\"\"\n            Indent based on previous line\n            \"\"\";\n\nvar doNotIndentIfEndDelimiterIsAtZero = \"\"\"\nKeep This\n    Where It\nIs\n\"\"\";\n\n// 0.27.0\nvar someString = \"\"\"\n    Indent based on previous line\n    \"\"\";\n\nvar doNotIndentIfEndDelimiterIsAtZero = \"\"\"\nKeep This\n    Where It\nIs\n\"\"\";\n```\n\nThanks go to @jods4 for reporting the issue\n### Incorrect indentation on a multi-line statement split by comments [#968](https://github.com/belav/csharpier/issues/968\nCSharpier was not properly indenting an invocation chain when it was being split by comments.\n```c#\n// input\nvar someValue =\n    // Some Comment\n    CallSomeMethod()\n        // Another Comment\n        .CallSomeMethod();\n\n// 0.26.7\nvar someValue =\n// Some Comment\nCallSomeMethod()\n    // Another Comment\n    .CallSomeMethod();\n\n// 0.27.0\nvar someValue =\n    // Some Comment\n    CallSomeMethod()\n        // Another Comment\n        .CallSomeMethod();\n```\n\nThanks go to @tyrrrz for reporting the issue\n### Adding experimental support for GRPC for the extensions to communicate with CSharpier [#944](https://github.com/belav/csharpier/pull/944)\nCurrently the extensions for CSharpier send data to a running instance of CSharpier by piping stdin/stdout back and forth. This approach has proved problematic and hard to extend.\n\nAs of 0.27.0, CSharpier can run a GRPC server to allow communication with the extensions once they are all updated.\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.26.7...0.27.0\n# 0.26.7\n## What's Changed\n### Keep Field.Method() on the same line when breaking long method chain [#1010](https://github.com/belav/csharpier/issues/1010)\n0.26.0 introduced changes that broke long invocation chains on fields/properties as well as methods. That change has been reverted after community feedback.\n\n```c#\n// 0.26.0\nvar loggerConfiguration = new LoggerConfiguration()\n    .Enrich\n    .FromLogContext()\n    .Enrich\n    .WithProperty(\"key\", \"value\")\n    .Enrich\n    .WithProperty(\"key\", \"value\")\n    .Enrich\n    .WithProperty(\"key\", \"value\")\n    .Enrich\n    .WithProperty(\"key\", \"value\")\n    .WriteTo\n    .Console(outputTemplate: \"template\");\n\n// 0.26.7\nvar loggerConfiguration = new LoggerConfiguration()\n    .Enrich.FromLogContext()\n    .Enrich.WithProperty(\"key\", \"value\")\n    .Enrich.WithProperty(\"key\", \"value\")\n    .Enrich.WithProperty(\"key\", \"value\")\n    .Enrich.WithProperty(\"key\", \"value\")\n    .WriteTo.Console(outputTemplate: \"template\");\n```\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.26.6...0.26.7\n# 0.26.6\n## What's Changed\n### CSharpier incorrectly reports problems with differing line endings as \"The file did not end with a single newline\"[#1067](https://github.com/belav/csharpier/issues/1067)\nIf CSharpier was validating that a file was formatted, and that file contained only `\\n` but CSharpier was configured to use `\\r\\n`, then it would report the problem as `The file did not end with a single newline`\n\nCSharpier added support for reading line ending configuration from an `.editorconfig` which could contain `end_of_line = crlf` so some users were unknowingly configuring CSharpier to use `\\r\\n`\n\nCSharpier now correctly reports the problem as `The file contained different line endings than formatting it would result in.`\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.26.5...0.26.6\n# 0.26.5\n## What's Changed\n### 0.26.4 sorts `NSubstitute` before `Newtonsoft.Json` [#1061](https://github.com/belav/csharpier/issues/1061)\nThe using sorting in `0.26.4` was taking into account case.\n\n```c#\n// 0.26.4\nusing System;\nusing NSubstitute;\nusing Newtonsoft.Json;\n\n// 0.26.5\nusing System;\nusing Newtonsoft.Json;\nusing NSubstitute;\n```\n\nThanks go to @loraderon for contributing the fix.\n\n### Extra newline added when using a collection expression with { get; } [#1063](https://github.com/belav/csharpier/issues/1063)\nA collection expression in a property initializer was including an extra new line.\n```c#\n// 0.26.4\npublic class ClassName\n{\n    public List<DayOfWeek> DaysOfWeek { get; } =\n\n        [\n            DayOfWeek.Sunday,\n            // snip\n            DayOfWeek.Saturday\n        ];    \n}\n\n// 0.26.5\npublic class ClassName\n{\n    public List<DayOfWeek> DaysOfWeek { get; } =\n        [\n            DayOfWeek.Sunday,\n            // snip\n            DayOfWeek.Saturday\n        ];    \n}\n```\nThanks go to @SapiensAnatis for contributing the fix.\n\n### Comments at the end of a collection expression should be indented [#1059](https://github.com/belav/csharpier/issues/1059)\nWhen the close bracket on a collection expression had a leading comment, it had the same indentation as the bracket.\n```c#\n// 0.26.4\nhost.AddSection(\n    name: \"Kontakt Libraries (Third Party)\",\n    tags: Tags.SamplesUsed,\n    tasks:\n    [\n    // TODO: Add any used third party instruments below as you discover them.\n    ]\n);\n\n// 0.26.5\nhost.AddSection(\n    name: \"Kontakt Libraries (Third Party)\",\n    tags: Tags.SamplesUsed,\n    tasks:\n    [\n        // TODO: Add any used third party instruments below as you discover them.\n    ]\n);\n```\n\nThanks go to @fgimian for reporting the problem\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.26.4...0.26.5\n# 0.26.4\n## What's Changed\n### Spacing bugs related to C#12 collection expressions [#1049](https://github.com/belav/csharpier/issues/1049) [#1047](https://github.com/belav/csharpier/issues/1047)\nThere were a number of cases where CSharpier was including extra blank lines, an extra space, or not formatting contents of collection expressions.\n```c#\n// 0.26.3\nvar a = new A { B =  [1, 2, 3] };\n\nList<string> items = [// My item\n    \"Hello\",];\n\nitems.AddRange(\n\n    [\n        LongValue________________________________________________,\n        LongValue________________________________________________\n    ]\n);\n\nitems =  [];\nitems ??=  [];\n\nclass SomeClass\n{\n    public SomeValue SomeProperty =>\n\n        [\n            LongValue________________________________________________,\n            LongValue________________________________________________\n        ];\n\n    public SomeValue Method() =>\n\n        [\n            LongValue________________________________________________,\n            LongValue________________________________________________\n        ];\n}\n\n// 0.26.4\nvar a = new A { B = [1, 2, 3] };\n\nList<string> items =\n[\n    // My item\n    \"Hello\",\n];\n\nitems.AddRange(\n    [\n        LongValue________________________________________________,\n        LongValue________________________________________________\n    ]\n);\n\nitems = [];\nitems ??= [];\n\nclass SomeClass\n{\n    public SomeValue SomeProperty =>\n        [\n            LongValue________________________________________________,\n            LongValue________________________________________________\n        ];\n\n    public SomeValue Method() =>\n        [\n            LongValue________________________________________________,\n            LongValue________________________________________________\n        ];\n}\n\n\n```\n\n\nThanks go to @fgimian and @JoshWoodArup for reporting the issues\n### Usings sorting differs based on system culture [#1051](https://github.com/belav/csharpier/issues/1051)\nThe sorting of Usings was done in a culture specific manner, resulting in unexpected behavior.\\\nIn Czech (cs-CZ) the `ch` is a \"single letter\" which is placed between `h` and `i`, which resulted in the following sorting behavior.\n```c#\n// 0.26.3\nusing Microsoft.ApplicationInsights.DataContracts;\nusing Microsoft.ApplicationInsights.Extensibility;\nusing Microsoft.ApplicationInsights.Channel;\n\n// 0.26.4\nusing Microsoft.ApplicationInsights.Channel;\nusing Microsoft.ApplicationInsights.DataContracts;\nusing Microsoft.ApplicationInsights.Extensibility;\n```\n\nThanks go to @davidkudera for the contribution\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.26.3...0.26.4\n# 0.26.3\n## What's Changed\n### C#12 Collection expressions are prefixed with two spaces [#1009](https://github.com/belav/csharpier/issues/1009)\n```c#\n// 0.26.0\nList<int> ids =  [];\n\n// 0.26.3\nList<int> ids = [];\n```\n\nThanks go to @Jackenmen for reporting the problem.\n### CSharpier inserts extra spaces around the contents of collection expressions [#1002](https://github.com/belav/csharpier/issues/1002)\n```c#\n// 0.26.0\nList<int> ids = [ ];\nList<int> ids = [ 1, 2, 3 ];\n\n// 0.26.3\nList<int> ids = [];\nList<int> ids = [1, 2, 3];\n```\n\nThanks go to @golavr for reporting the problem.\n### Configuration files not respected for stdin [#1028](https://github.com/belav/csharpier/issues/1028)\nWhen piping a file to csharpier via stdin, CSharpier uses the working directory to locate any configuration files. This was broken with `0.26.0`.\n\nThanks go to @kikniknik for reporting the problem.\n\n### Modify CSharpier.MSBuild to use NETCoreSdkVersion to detect which sdk to use for running CSharpier [#1022](https://github.com/belav/csharpier/issues/1022) [#1027](https://github.com/belav/csharpier/issues/1027)\nPreviously CSharpier.MSBuild was using `targetFramework` to determine which version of CSharpier to run. This was problematic when there were multiple target frameworks, or the project was targeting a superset such as `net8.0-windows`\n\nIt now makes use of `NETCoreSdkVersion` to determine which version of CSharpier to run.\n\nThanks go to @Tyrrrz for the suggestion and to @Cjewett for the contribution to make it work\n### CSharpierIgnore not respected when recursively finding .editorconfig\nWhen looking for `.editorconfig` files, CSharpier looks for them recursively in the current directory. This logic was not taking into account any files or directories ignored by a `.csharpierignore`.\n\nThanks go to @sebastieng84 for the contribution.\n### Optimize editorconfig lookups when piping files [#1039](https://github.com/belav/csharpier/pull/1039)\nCSharpier now only looks for an `.editorconfig` for the file being piped to CSharpier. Under normal usage it recursively looks for all possible `.editorconfig` files for the given directory. \n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.26.2...0.26.3\n# 0.26.2\n## What's Changed\n### CSharpier.MsBuild does not support DotNet 8 [#1012](https://github.com/belav/csharpier/issues/1012)\nWhen using CSharpier.MsBuild in a setting where the project targeted net8.0 and only the net8 sdk was installed, CSharpier.MsBuild would attempt to run the net7.0 version of csharpier which failed.\n\nThanks go to @aditnryn for the fix\n### Global System using directives should be sorted first [#1003](https://github.com/belav/csharpier/issues/1003)\nGlobal using were not sorting `System` to the top, which was inconsistent with regular using.\n\n```c#\n// 0.26.1\nglobal using ZWord;\nglobal using AWord;\nglobal using System.Web;\nglobal using System;\n\n// 0.26.2\nglobal using System;\nglobal using System.Web;\nglobal using AWord;\nglobal using ZWord;\n```\n\nThanks go to @vipentti for the fix\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.26.1...0.26.2\n# 0.26.1\n## What's Changed\n### Editorconfig with duplicated sections was freezing IDE's [#989](https://github.com/belav/csharpier/issues/989)\nCSharpier was unable to parse an `.editorconfig` file that contained duplicate sections and would crash. This would result in a hung IDE.\n```\n[*]\ninsert_final_newline = true\n\n[*]\nspelling_languages = en-us\n```\n\nThanks go to @echoix for helping track this down.\n\n### A .csharpierrc file anywhere above a file now takes priority over any .editorconfig [#987](https://github.com/belav/csharpier/issues/987)\nGiven the following setup\n```\n/src/.editorconfig\n/src/ProjectName/.editorconfig\n/src/.csharpierrc\n```\n\nOriginally with 0.26.0, the `/src/ProjectName/.editorconfig` file would be used for determining the configuration options for a file within `src/ProjectName`. This resulted in the existing options within `.csharpierrc` being ignored.\n\nWith 0.26.1, if a `.csharpierrc` exists anywhere above a given file, it will be used to determine the configuration options.\n\nThanks go to @parched for reporting the issue.\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.26.0...0.26.1\n# 0.26.0\n## What's Changed\n### EditorConfig Support\nCSharpier will now read configuration options from an `.editorconfig`. See https://csharpier.com/docs/Configuration for more details.\n\n### Net8 Support\nCSharpier now supports the .net8 sdk. It still supports net6 and net7.\n\n### Sorting of using directives [#661](https://github.com/belav/csharpier/issues/661)\nCSharpier now sorts using statements. It follows the following rules\n```c#\nglobal using System.Linq; // sort global first\nusing System; // sort anything in System\nusing NonSystem; // sort anything non-system\nusing static Static; // sort static\nusing Alias = Z; // sort alias\nusing SomeAlias = A;\n#if DEBUG // finally any usings in #if's\nusing Z; // contents are not sorted as of now\nusing A;\n#endif\n```\n### Remove line before the content of a bracketless if/else statement [#979](https://github.com/belav/csharpier/issues/979)\n```c#\n// input\nif (true)\n\n    CallMethod();\nelse if (false)\n\n    CallMethod();\nelse\n\n    CallMethod();\n\nfor (; ; )\n\n    CallMethod();\n\nwhile (true)\n\n    CallMethod();\n\n// 0.26.0\nif (true)\n    CallMethod();\nelse if (false)\n    CallMethod();\nelse\n    CallMethod();\n\nfor (; ; )\n    CallMethod();\n\nwhile (true)\n    CallMethod();\n```\n\nThanks go to @Infinite-3D for reporting\n### Support C# 12 primary constructors on structs [#969](https://github.com/belav/csharpier/issues/969)\nCSharpier now supports primary constructors on structs\n```c#\npublic struct NamedItem2(\n    string name1,\n    string name2\n)\n{\n    public string Name1 => name1;\n    public string Name2 => name1;\n}\n```\n### Support C# 12 collection expressions [#964](https://github.com/belav/csharpier/issues/964\nCSharpier now supports collection expressions\n```c#\nint[] a =  [ 1, 2, 3, 4, 5, 6, 7, 8 ];\n\nSpan<int> b =  [ 'a', 'b', 'c', 'd', 'e', 'f', 'h', 'i' ];\n\nstring[] c =\n[\n    \"________________________\",\n    \"________________________\",\n    \"________________________\",\n    \"________________________\"\n];\n\nint[][] d =\n[\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n```\n\nThanks go to @meenzen for reporting\n### MSBuild - when a file fails to compile csharpier interferes with getting you clickable links to the compilation errors. [#957](https://github.com/belav/csharpier/issues/957)\nBuild errors will now display properly when using CSharpier.MSBuild\n### Format element access properly in long invocation chains [#956](https://github.com/belav/csharpier/issues/956)\n```c#\n// 0.25.0\nvar x = someLongNameField.CallMethod____________________________________().AccessArray[\n    1\n].Property_______________;\n\n// 0.26.0\nvar x = someLongNameField\n    .CallMethod____________________________________()\n    .AccessArray[1]\n    .Property_______________;\n```\n### Improvements to visible whitespace in console output. [#953](https://github.com/belav/csharpier/issues/953)\nWhen using `cshapier --check` whitespace is now only visible in the following situations\n\nWhen an otherwise empty line contains whitespace\n```\n----------------------------- Expected: Around Line 4 -----------------------------\n    private string field1;\n\n    private string field2;\n----------------------------- Actual: Around Line 4 -----------------------------\n    private string field1;\nÂ·Â·Â·Â·\n    private string field2;\n```\n\nWhen a line has extra trailing whitespace\n```\n----------------------------- Expected: Around Line 3 -----------------------------\n{\n    private string field1;\n}\n----------------------------- Actual: Around Line 3 -----------------------------\n{\n    private string field1;Â·Â·Â·Â·\n}\n```\n### MSBuild is not encoding using UTF8 [#947](https://github.com/belav/csharpier/issues/947)\nWhen CSharpier.MSBuild ran into a failed csharpier check, it was not encoding the std-error output with UTF8. This resulted in messages such as\n```\n----------------------------- Expected: Around Line 3 -----------------------------\n{\nâ¬ââ¬ââ¬ââ¬âprivateâ¬âstringâ¬âfield1;\n}\n----------------------------- Actual: Around Line 3 -----------------------------\n{\nâ¬ââ¬ââ¬ââ¬âprivateâ¬âstringâ¬âfield1;â¬ââ¬ââ¬ââ¬â\n}\n```\nThanks go to @Tyrrrz for reporting\n### Comment inside raw string literal is lost when file is formatted. [#937](https://github.com/belav/csharpier/issues/937)\n```c#\n// input\nvar rawLiteralWithExpressionThatWeDontFormat = new StringContent(\n    // this comment shouldn't go away\n    $$\"\"\"\n      {\n          \"params\": \"{{searchFilter switch\n{\n    SearchFilter.Video => \"EgIQAQ%3D%3D\",\n    _ => null\n}}}\"\n      }\n      \"\"\"\n);\n\n// 0.25.0\nvar rawLiteralWithExpressionThatWeDontFormat = new StringContent(\n    $$\"\"\"\n      {\n          \"params\": \"{{searchFilter switch\n{\n    SearchFilter.Video => \"EgIQAQ%3D%3D\",\n    _ => null\n}}}\"\n      }\n      \"\"\"\n);\n```\n\nThanks go to @Tyrrrz for reporting\n### Allow line endings to be configurable [#935](https://github.com/belav/csharpier/issues/935)\nCSharpier now supports the following options for line endings. The default is `auto`\n- \"auto\" - Maintain existing line endings (mixed values within one file are normalised by looking at what's used after the first line)\n- \"lf\" â Line Feed only (\\n), common on Linux and macOS as well as inside git repos\n- \"crlf\" - Carriage Return + Line Feed characters (\\r\\n), common on Windows\n\nThanks go to @phuhl for the feature request\n### Avoid breaking only around binary expression but not binary expression itself [#924](https://github.com/belav/csharpier/issues/924)\n```c#\n// 0.25.0\nif (\n    someLongStatement == true || someOtherStatement________________________________ == false\n)\n\n// 0.26.0\nif (someLongStatement == true || someOtherStatement________________________________ == false)\n```\n\nThanks go to @Nixxen for reporting\n### Nested loops without brackets should not be indented [#867](https://github.com/belav/csharpier/issues/867)\n```c#\n// 0.25.0\nforeach (var subsequence in sequence)\n    foreach (var item in subsequence)\n        item.DoSomething();\n\n// 0.26.0\nforeach (var subsequence in sequence)\nforeach (var item in subsequence)\n    item.DoSomething();\n```\nThanks go to @Rudomitori for the contribution\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.25.0...0.26.0\n# 0.25.0\n## Breaking Changes\n### Improve if directive formatting [#404](https://github.com/belav/csharpier/issues/404)\nThe `preprocessorSymbolSets` configuration option is no longer supported. \nCSharpier can now parse and format the full range of `#if` preprocessor statements so it is no longer required.\n```\n// 0.24.2 - supported some basic versions of #if\n#if DEBUG\n// some code \n#endif\n\n// 0.25.0 - supports the full range of #if including nested statements\n// would require the use of the preprocessorSymbolSets configuration option previously \n#if (DEBUG && !NET48) || MONO\n// some code\n#if NET6_0\n// some other code\n#endif \n#endif\n```\n\n## What's Changed\n### Sort Modifiers [#725](https://github.com/belav/csharpier/issues/725)\nCSharpier will now sort modifiers according to the defaults for [IDE0036](https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0036#csharp_preferred_modifier_order)\n```c#\n// input\npublic override async Task Method1() { } \nasync public override Task Method2() { }\n\n// output\npublic override async Task Method1() { } \npublic override async Task Method2() { }\n```\n\nThanks go to @glmnet for the contribution\n\n### Support c# 12 features [#883](https://github.com/belav/csharpier/issues/883)\nCSharpier now supports formatting \n[Primary Constructors](https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-12#primary-constructors),\n[Alias any typ](https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-12#alias-any-type), and\n[Default lambda parameters](https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-12#default-lambda-parameters)\n\n### Support for log levels [#875](https://github.com/belav/csharpier/issues/875)\nCSharpier now supports `--loglevel` with the CLI and `CSharpier_LogLevel` for MSBuild. This changes the level of logging output. Valid options are:\n- None\n- Error\n- Warning\n- Information (default)\n- Debug\n\nThanks go to @samtrion for the suggestion\n\n### CSharpier removes blank line before unsafe block [#917](https://github.com/belav/csharpier/issues/917)\nCSharpier was not honoring lines that appeared before `unsafe`\n```c#\n// input\nvar x = 1;\n\nunsafe\n{\n    // should retain empty line\n}\n\n// 0.24.2\nvar x = 1;\nunsafe\n{\n    // should retain empty line\n}\n\n// 0.25.0\nvar x = 1;\n\nunsafe\n{\n    // should retain empty line\n}\n```\n\nThanks go to @fgimian for reporting the bug\n\n### Adding ability to bypass CSharpier when using CSharpier.MsBuild [#914](https://github.com/belav/csharpier/issues/914)\nIn some instances it is desirable to completely bypass CSharpier.MsBuild, this can now be done with the `CSharpier_Bypass` property.\n```bash\ndotnet publish -c release -o /app --no-restore /p:CSharpier_Bypass=true\n```\n\nThanks go to @OneCyrus for the suggestion\n\n### Strong Name Sign Assemblies [#911](https://github.com/belav/csharpier/issues/911)\nCSharpier is now strong name signed so that it can be used in packages that are strong name signed.\n\nThanks go to @TwentyFourMinutes for the suggestions and to @goelhardik for strong name signing [Ignore](https://github.com/goelhardik/ignore)\n\n### Don't format files in obj folders [#910](https://github.com/belav/csharpier/pull/910)\nCSharpier will no longer format `cs` files that are in an `obj` folder.\n\n### CSharpier.MsBuild runs once for each framework, can it be more efficient. [#900](https://github.com/belav/csharpier/issues/900)\nWhen CSharpier.MsBuild was in a csproj that had multiple target frameworks, it would run once for each target framework. It will now run just a single time. \n\n### CSharpier.MsBuild returns exit code 1 when ManagePackageVersionsCentrally is set to true [#898](https://github.com/belav/csharpier/issues/898)\nCSharpier.MsBuild was not running correctly when used in a project that had centrally managed package version.\n\nThanks go to @adc-cjewett for reporting the bug\n\n### Multiline comments always indented with spaces when formatting with tabs [#891](https://github.com/belav/csharpier/issues/891)\nWith `useTabs: true`, CSharpier was formatting multiline comments with a space instead of a tab.\n```c#\n// input\npublic class Foo\n{\n\t/**\n\t * comment\n\t */\n\tpublic class Bar { }\n}\n\n// 0.24.1\npublic class Foo\n{\n /**\n  * comment\n  */\n\tpublic class Bar { }\n}\n\n// 0.25.0\npublic class Foo\n{\n\t/**\n\t * comment\n\t */\n\tpublic class Bar { }\n}\n```\n\nThanks go to @MonstraG for reporting the bug.\n\n### File scoped namespaces should be followed by a blank line [#861](https://github.com/belav/csharpier/issues/861)\nCSharpier now adds an empty line after file scoped namespaces if there is not already one\n```c#\n// input\nnamespace Namespace;\nusing System;\n\n// 0.25.0\nnamespace Namespace;\n\nusing System;\n```\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.24.2...0.25.0\n# 0.24.2\n## What's Changed\n### csharpier-ignore comments force CRLF line endings [#884](https://github.com/belav/csharpier/issues/884)\nIn a case where \n- a file on windows (which defaults to CRLF) contained only LF\n- the file contained `// csharpier-ignore` on a multi-line statement\n- the file was formatted in multiple passes due to preprocessor symbols (such as an `#if DEBUG`)\n\nCSharpier would end up formatting the file with `CRLF` on the `// csharpier-ignore` statement but `LF` in the rest of the file. The file would then fail the formatting check.\n\nThanks go to @pingzing for the bug report and detailed reproduction steps.\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.24.1...0.24.2\n\n\n# 0.24.1\n## What's Changed\n### 0.24.0 Regression csharpier-ignore causes blank lines between statements to be removed. [#879](https://github.com/belav/csharpier/issues/879)\n```c#\n// input & expected output\n\n// csharpier-ignore\npublic string Example\n{\n  get\n     {\n       if (_example is not null)\n         return _example;\n\n       var number = Random.Shared.Next();\n\n       return _example = number.ToString();\n     }\n}\n\n// 0.24.0\n\n// csharpier-ignore\npublic string Example\n{\n  get\n     {\n       if (_example is not null)\n         return _example;\n       var number = Random.Shared.Next();\n       return _example = number.ToString();\n     }\n}\n```\n\nThanks go to @Pentadome for reporting the regression bug.\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.24.0...0.24.1\n\n\n# 0.24.0\n## What's Changed\n### Formatting named list patterns loses code and causes compilation error [#876](https://github.com/belav/csharpier/issues/876)\n```c#\n// input & expected output\nreturn list switch\n{\n    [var elem] => elem * elem,\n    [] => 0,\n    [..] elems => elems.Sum(e => e + e),\n};\n\n// 0.23.0\nreturn list switch\n{\n    [var elem] => elem * elem,\n    [] => 0,\n    [..] => elems.Sum(e => e + e),\n};\n\n```\n\nThanks go to @Dragemil for reporting the bug\n\n### CSharpier.MSBuild does not support usernames or project paths with spaces [#872](https://github.com/belav/csharpier/issues/872)\nCSharpier.MSBuild would throw an exception when building a project if the username had a space, or if the project path had a space.\n\nThanks go to @ooo2003003v2 for reporting the bug.\n\n### #pragma with long line introduces extra line break [#865](https://github.com/belav/csharpier/issues/865)\n```c#\n// input & expected output\nif (\n    e is\n#pragma warning disable CS0618\n    BadHttpRequestException\n#pragma warning restore CS0618\n    {\n        Message: \"______________________________________________________________________________________________________________\"\n    }\n) { }\n\n// 0.23.0\nif (\n    e is\n#pragma warning disable CS0618\n    BadHttpRequestException\n#pragma warning restore CS0618\n\n    {\n        Message: \"______________________________________________________________________________________________________________\"\n    }\n) { }\n```\n\nThanks go to @Denton-L for reporting the bug\n\n### Better support for ignore on method attributes [#848](https://github.com/belav/csharpier/issues/848)\n```c#\n// input\npublic class AttributesAndMethods\n{\n    // csharpier-ignore - only the first attribute\n    [Attribute          ]\n    [Attribute          ]\n    public void MethodThatShouldFormat()     { }\n\n    [Attribute]\n    // csharpier-ignore - only the second attribute\n    [Attribute         ]\n    public void MethodThatShouldFormat()     { }\n\n    [Attribute  ]\n    [Attribute  ]\n    // csharpier-ignore - just the method\n    public void MethodThatShouldNotFormat(           ) { }\n}\n\n// 0.23.0\npublic class AttributesAndMethods\n{\n    // csharpier-ignore - only the first attribute\n    [Attribute          ]\n    [Attribute          ]\n    public void MethodThatShouldFormat()     { }\n\n    [Attribute]\n    // csharpier-ignore - only the second attribute\n    [Attribute]\n    public void MethodThatShouldFormat() { }\n\n    [Attribute]\n    [Attribute]\n    // csharpier-ignore - just the method\n    public void MethodThatShouldNotFormat() { }\n}\n\n// 0.24.0\npublic class AttributesAndMethods\n{\n    // csharpier-ignore - only the first attribute\n    [Attribute          ]\n    [Attribute]\n    public void MethodThatShouldFormat() { }\n\n    [Attribute]\n    // csharpier-ignore - only the second attribute\n    [Attribute]\n    public void MethodThatShouldFormat() { }\n\n    [Attribute]\n    [Attribute]\n    // csharpier-ignore - just the method\n    public void MethodThatShouldNotFormat() { }\n}\n```\n\nThanks go to @Billuc for reporting the bug\n\n### Ranged ignore applies some formatting when multiple statements are on a line [#846](https://github.com/belav/csharpier/issues/846)\n```c#\n// input & expected output\nvoid MethodName()\n{\n    // csharpier-ignore-start\n    var packet = new List<byte>();\n    packet.Add(0x0f); packet.Add(0x00);\n    packet.Add(0x00); packet.Add(0x00);\n    // csharpier-ignore-end\n}\n\n// 0.23.0\nvoid MethodName()\n{\n    // csharpier-ignore-start\n    var packet = new List<byte>();\n    packet.Add(0x0f);\npacket.Add(0x00);\n    packet.Add(0x00);\npacket.Add(0x00);\n    // csharpier-ignore-end\n}\n```\n\nThanks go to @Billuc for reporting the bug\n\n### Support scoped variables (better handling of unrecognized syntax nodes) [#839](https://github.com/belav/csharpier/issues/839)\nScoped variables are a language proposal. CSharpier has some support for printing unrecognized syntax nodes but the validation logic didn't account for them and would throw an exception\n```c#\nscoped Span<byte> span;\n```\nThanks go to @Dragemil for reporting the bug\n### Unrecognized syntax nodes lose comments [#869](https://github.com/belav/csharpier/issues/869)\nCSharpier now supports printing commends on unrecognized nodes.\n```c#\n// comment on unrecognized node\nscoped Span<byte> span;\n```\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.23.0...0.24.0\n\n\n# 0.23.0\n## Breaking Changes\n### Make compile errors public when using CSharpier.Core [#799](https://github.com/belav/csharpier/issues/799)\nPreviously `CodeFormatter.Format(unformattedCode)` and its overloads returned only the formatted code. It now returns a result object.\n```c#\npublic class CodeFormatterResult\n{\n    public string Code { get; }\n    public IEnumerable<Diagnostic> CompilationErrors { get; }\n}\n```\n\nThis is a breaking change. There were also a number of types that should not have been `public` that were made `internal`.\n\nThanks go to @verdverm for the suggestion\n## What's Changed\n### Allow comment-description suffix on csharpier-ignore comments [#835](https://github.com/belav/csharpier/issues/835)\nIt is now possible to include a suffix on `csharpier-ignore` comments. The description must be seperated from the comment by at least one - character.\n```c#\n// csharpier-ignore - class copied as-is from another project\npublic class Unformatted     { \n        private string     unformatted;\n}\n\n// csharpier-ignore-start -- class copied as-is from another project\npublic class Unformatted1     { }\npublic class Unformatted2     { }\n// csharpier-ignore-end\n```\nThanks go to @strepto for the suggestion\n\n### Fix formatting for open generics [#832](https://github.com/belav/csharpier/issues/832)\n```c#\n// 0.22.1\ntypeof(AnExceptionallyLongAndElaborateClassNameToMakeAnExampleRegardingOpenGenerics<\n    ,\n>).MakeGenericType(typeof(string), typeof(int));\n\n// 0.23.0\ntypeof(AnExceptionallyLongAndElaborateClassNameToMakeAnExampleRegardingOpenGenerics<,>).MakeGenericType(\n    typeof(string),\n    typeof(int)\n);\n```\n\n\nThanks go to @jonstodle for reporting the issue\n\n### #region should be indented based on context [#812](https://github.com/belav/csharpier/issues/812)\nPreviously the preceding whitespace was left as is on `#region` and `#endregion` which resulted undesired formatting.\n```c#\n// 0.22.1\npublic class ClassName\n{\n            #region Ugly methods\n    public int LongUglyMethod()\n    {    \n        return 42;\n    }\n            #endregion\n}\n\n// 0.23.0\npublic class ClassName\n{\n    #region Ugly methods\n    public int LongUglyMethod()\n    {    \n        return 42;\n    }\n    #endregion\n}\n```\nThanks go to @jods4 for reporting the issue\n### Return statement followed by linq query syntax not indenting correctly [#811](https://github.com/belav/csharpier/issues/811)\n```c#\n// 0.22.1\nreturn from i in Enumerable.Range(0, 10)\nlet i2 = i * i\nwhere i2 < 100\nselect new { Square = i2, Root = i };\n\n// 0.23.0\nreturn from i in Enumerable.Range(0, 10)\n    let i2 = i * i\n    where i2 < 100\n    select new { Square = i2, Root = i };\n```\n\nThanks go to @jods4 for reporting the issue\n\n### Array and dictionary initializers should break in some cases to improve readability [#809](https://github.com/belav/csharpier/issues/809)\n```c#\n// 0.22.1\nvar dictionaryInitializer = new Dictionary<int, string> { { 1, \"\" }, { 2, \"a\" }, { 3, \"b\" } };\nint[,,] cube = { { { 111, 112 }, { 121, 122 } }, { { 211, 212 }, { 221, 222 } } };\nint[][] jagged = { { 111 }, { 121, 122 } };\n\n// 0.23.0\nvar dictionaryInitializer = new Dictionary<int, string>\n{\n    { 1, \"\" },\n    { 2, \"a\" },\n    { 3, \"b\" }\n};\nint[,,] cube =\n{\n    {\n        { 111, 112 },\n        { 121, 122 }\n    },\n    {\n        { 211, 212 },\n        { 221, 222 }\n    }\n};\nint[][] jagged =\n{\n    { 111 },\n    { 121, 122 }\n};\n```\n### List initializer inside object initializer breaks poorly [#802](https://github.com/belav/csharpier/issues/802)\n```c#\n// 0.22.1\nvar someObject = new SomeObject { SomeArray = new SomeOtherObject[]\n    {\n        new SomeOtherObject { SomeProperty = 1 },\n        new SomeOtherObject()\n    }.CallMethod().CallMethod() };\n\n// 0.23.0\nvar someObject = new SomeObject\n{\n    SomeArray = new SomeOtherObject[]\n    {\n        new SomeOtherObject { SomeProperty = 1 },\n        new SomeOtherObject()\n    }\n        .CallMethod()\n        .CallMethod()\n};\n\n```\n\nThanks go to @shocklateboy92 for reporting the issue\n### Allow passing --config-path to cli [#777](https://github.com/belav/csharpier/issues/777)\nIt is now possible to pass `--config-path` to the cli for cases where it is not in the root or you want to bypass the auto location and speed up formatting requests.\n```bash\ndotnet csharpier . --config-path \"./config/.csharpierrc\"\n```\n\nThanks go to @bdovaz for the suggestion\n\n### Allow blank lines in query syntax [#754](https://github.com/belav/csharpier/issues/754)\nIt is now possible to add blank lines in query syntax expressions which can aid in readability\n```c#\nvar result = await (\n    from post in dbContext.Posts\n    join blog in dbContext.Blogs on post.BlogId equals blog.Id\n    \n    let count = dbContext.Posts.Count(p => p.Name == post.Name)\n    \n    where post.Id == 1\n    select new \n    {\n         Post = post,\n         Blog = blog,\n         SamePostNameCount = count\n    }\n)\n    .AsNoTracking()\n    .FirstAsync();\n```\n\nThanks go to @TwentyFourMinutes for the suggestion\n\n### #if causes line after it to break when it contains an if [#666](https://github.com/belav/csharpier/issues/666)\n```c#\n// 0.22.1\nclass ClassName\n{\n    public void MethodName()\n    {\n#if !IF_STATEMENT_HERE_SHOULD_NOT_BREAK_INVOCATION_AFTER_ENDIF\n        if (true)\n        {\n            return;\n        }\n#endif\n        SomeObject\n            .CallMethod()\n            .CallOtherMethod(shouldNotBreak);\n    }\n}\n\n// 0.23.0\nclass ClassName\n{\n    public void MethodName()\n    {\n#if !IF_STATEMENT_HERE_SHOULD_NOT_BREAK_INVOCATION_AFTER_ENDIF\n        if (true)\n        {\n            return;\n        }\n#endif\n        SomeObject.CallMethod().CallOtherMethod(shouldNotBreak);\n    }\n}\n\n```\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.22.0...0.23.0\n\n# 0.22.1\n## What's Changed\n### Fix for CSharpier.MsBuild so it selects a compatible framework if the project does not target net6 or net7 [#797](https://github.com/belav/csharpier/pull/797)\nThis fix auto selects `net7.0` for projects that do not target `net6.0` or `net7.0`. This means the `CSharpier_FrameworkVersion` property is only required if a project is targeting < `net6.0` and `net7.0` is not installed.\n\nThanks go to @samtrion for submitting the fix.\n\n# 0.22.0\n## Breaking Changes\n### Support only UTF8 and UTF8-BOM files [#787](https://github.com/belav/csharpier/pull/787)\nPreviously UTF.Unknown was used to try to determine file encodings. \nThis was problematic because if a file was too small it would not properly detect the encoding.\n```c#\npublic enum MeetingLocation\n{\n  CafÃ©,\n  Restaurant\n}\n```\nThis file saved as UTF8 would be detected as SBCSCodePageEncoding and result in CSharpier trying to parse the following file\n```c#\npublic enum MeetingLocation\n{\n  CafÃâÃÂ©,\n  Restaurant\n}\n```\n\nCSharpier now only supports UTF8 & UTF8-BOM files. This is consistent with the IDE plugins, which stream files to CSharpier as UTF8.\n\nThanks go to @Meligy for reporting the problem.\n\n### CSharpier.MSBuild support for .NET 7 [#773](https://github.com/belav/csharpier/issues/773)\nCSharpier.MSBuild now multi-targets net6.0 and net7.0. As a side effect of multi-targeting, the `CSharpier_FrameworkVersion` property is now required for projects that do not target `net6.0` or `net7.0`. See https://csharpier.com/docs/MsBuild#target-frameworks\n\nThanks go to @OneCyrus for reporting it\n\n## What's Changed\n### Fix for CSharpier.MsBuild \"Specified condition \"$(CSharpier_Check)\" evaluates to \"\" instead of a boolean\" [#788](https://github.com/belav/csharpier/pull/788)\nWhen projects referencing CSharpier.MsBuild were reloaded, they would get the error \"Specified condition \"$(CSharpier_Check)\" evaluates to \"\" instead of a boolean\" and fail to load.\n\n\nThanks go to @samtrion for submitting the fix.\n\n### List Pattern support for subpattern within a slice [#779](https://github.com/belav/csharpier/issues/779)\n\nCSharpier did not have proper support for the new c# 11 slice pattern. When a slice contained a pattern, that pattern would be lost.\n\n```c#\n// input\nvar someValue = someString is [var firstCharacter, .. var rest];\n\n// 0.21.0\nvar someValue = someString is [var firstCharacter, ..];\n\n// 0.22.0\nvar someValue = someString is [var firstCharacter, .. var rest];\n```\n\nThanks go to @domn1995 for reporting it\n\n### Fix for comments within expressions in interpolated strings [#774](https://github.com/belav/csharpier/issues/774)\nWhen an interpolated string contained a comment within an expression, CSharpier was inserting a line break that resulted in invalid code.\n\n```c#\n// input\nvar trailingComment = $\"{someValue /* Comment shouldn't cause new line */}\";\n\n// 0.21.0\nvar trailingComment = $\"{someValue /* Comment shouldn't cause new line */\n    }\";\n\n// 0.22.0\nvar trailingComment = $\"{someValue /* Comment shouldn't cause new line */}\";\n```\n\nThanks go to @IT-CASADO for reporting it\n\n### Always put generic type constraints onto a new line [#527](https://github.com/belav/csharpier/issues/527)\n```c#\n// 0.21.0\npublic class SimpleGeneric<T> where T : new() { }\n\n// 0.22.0 \npublic class SimpleGeneric<T>\n    where T : new() { }\n```\n### Always put constructor initializers on their own line [#526](https://github.com/belav/csharpier/issues/526)\n```c#\n// 0.21.0\npublic Initializers() : this(true) { }\n\npublic Initializers(string value) : base(value) { }\n\n// 0.22.0\npublic Initializers()\n    : this(true) { }\n\npublic Initializers(string value)\n    : base(value) { }\n```\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.21.0...0.22.0\n\n\n# 0.21.0\n## What's Changed\n### Support file scoped types [#748](https://github.com/belav/csharpier/issues/748)\nCSharpier now supports a file scoped type\n```c#\nfile class FileScopedClass\n{\n    // implementation\n}\n```\n\n### Csharpier removes empty lines in ignored blocks of code [#742](https://github.com/belav/csharpier/issues/742)\nIn some instances csharpier was removing empty lines in `csharpier-ignore` blocks of code\n```c#\n// input\npublic class KeepLines1\n{\n    // csharpier-ignore-start\n    private string    first;\n\n    private string    second;\n    // csharpier-ignore-end\n}\n\n// 0.20.0\npublic class KeepLines1\n{\n    // csharpier-ignore-start\n    private string    first;private string    second;\n    // csharpier-ignore-end\n}\n```\n\nThanks go to @MonstraG for reporting it\n\n### Await + LINQ query syntax indents incorrectly [#740](https://github.com/belav/csharpier/issues/740)\n```c#\n// 0.20.0\nvar result = await from thing in Things\nfrom otherThing in OtherThings\nfrom finalThing in SomethingAsync(thing, otherThing)\nselect finalThing;\n\n// 0.21.0\nvar result = await\n    from thing in Things\n    from otherThing in OtherThings\n    from finalThing in SomethingAsync(thing, otherThing)\n    select finalThing;\n```\nThanks go to @domn1995 for reporting it.\n\n### Break anonymous object creation when there are more than two properties [#753](https://github.com/belav/csharpier/issues/753)\nObject initializers break when they have more than two properties. For example\n```c#\nvar x = new Thing\n{\n    Post = post,\n    Blog = blog,\n    SamePostNameCount = count\n};\n```\n\nAnonymous object initializers were not included in this logic prior to 0.21.0\n```c#\n// 0.20.0\nvar result =\n    from post in Posts\n    select new { Post = post, Blog = blog, SamePostNameCount = count };\n\n// 0.21.0\nvar result =\n    from post in Posts\n    select new\n    {\n        Post = post,\n        Blog = blog,\n        SamePostNameCount = count\n    };\n```\n\nThanks go to @TwentyFourMinutes for reporting it.\n\n### Support net7 [#756](https://github.com/belav/csharpier/pull/756)\nThe CSharpier dotnet tool now works with net6 or net7.\n\n### Fix for ignoring subfolders in node_modules [#762](https://github.com/belav/csharpier/pull/762)\nCSharpier was not properly ignoring .cs files when they were in a subfolder of node_modules\n\nThanks go to @snebjorn for reporting the bug.\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.20.0...0.21.0\n\n\n# 0.20.0\n## What's Changed\n### Improve Tuple formatting [#735](https://github.com/belav/csharpier/issues/#735)\nTuples would break poorly in some cases\n```c#\n// 0.19.2\n\npublic async Task<(ILookup<string, int> someLookup, ILookup<int, string> reverseLookup, ILookup<\n        string,\n        ClassName\n    > thirdLookup)> CreateLookups()\n{\n    return (null, null);\n}\n\npublic void TuplesAsInput(\n    (int myInt, string myString, ClassName myClassNameInstance, Dictionary<\n        int,\n        string\n    > wordList) inputArgs\n)\n{\n    // do something\n}\n\n// 0.20.0\npublic async Task<(\n    ILookup<string, int> someLookup,\n    ILookup<int, string> reverseLookup,\n    ILookup<string, ClassName> thirdLookup\n)> CreateLookups()\n{\n  return (null, null);\n}\n\npublic void TuplesAsInput(\n    (\n        int myInt,\n        string myString,\n        ClassName myClassNameInstance,\n        Dictionary<int, string> wordList\n    ) inputArgs\n )\n {\n   // do something\n }\n```\n\nThanks go to @BenjaBobs for reporting the bug.\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.19.2...0.20.0\n\n\n# 0.19.2\n## What's Changed\n### .NET Tool Crashes When Run Concurrently [#728](https://github.com/belav/csharpier/issues/733)\n\nFixed another edge case with running csharpier concurrently.\n\nThanks go to @Kurt-von-Laven for reporting the bug.\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.19.1...0.19.2\n\n# 0.19.1\n## What's Changed\n### CSharpier crashes when run multiple times simultaneously [#728](https://github.com/belav/csharpier/issues/728)\n\nThe new caching for CSharpier didn't properly handle multiple CSharpier processes formatting at the same time. This is most common when using CSharpier.MsBuild in a solution with multiple projects.\n\nThanks go to @pingzing for reporting the bug.\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.19.0...0.19.1\n\n\n# 0.19.0\n## What's Changed\n### Adding a cache to speed up formatting. [#692](https://github.com/belav/csharpier/issues/692)\nCSharpier now caches information about files that it has formatted to speed up subsequent runs.  \nBy default the following are used as cache keys and a file is only formatted if one of them has changed.\n\n- CSharpier Version\n- CSharpier Options\n- Content of the file\n\nThe cache is stored at [LocalApplicationData]/CSharpier/.formattingCache.\n\n### Ignore node_modules [#699](https://github.com/belav/csharpier/issues/699)\n\nCSharpier now ignores any files within a node_modules folder.\n\nThanks go to @RichiCoder1 for the suggestion and @SubjectAlpha for the implementation.\n\n### Extra space before curly brace in array initializer [#693](https://github.com/belav/csharpier/issues/693)\n\n```c#\n// 0.18.0\npublic class ClassName\n{\n    public int[] SomeArray { get; set; } =  { 1, 2, 3 };\n}\n// 0.19.0\npublic class MyClass\n{\n    public int[] SomeArray { get; set; } = { 1, 2, 3 };\n}\n\n```\n\nThanks go to @TiraelSedai for reporting the bug.\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.18.0...0.19.0\n\n\n# 0.18.0\n## What's Changed\n### Initial C# 11 support [#686](https://github.com/belav/csharpier/pull/686)\nCSharpier can format the following c# 11 features\n- Raw string literals\n- Generic attributes\n- Static abstract members in interfaces\n- Newlines in string interpolation expressions **CSharpier will leave existing new lines within expressions and not add new ones**\n- List Patterns\n- UTF8 string literals\n- Unsigned right shift operator\n- Checked operator\n- Generic math\n\n### use relative file path in CommandLineFormatter [#680](https://github.com/belav/csharpier/pull/680)\nCSharpier now outputs relative or absolute file paths so that they are clickable in terminals.\n```\ndotnet csharpier .\n\n# csharpier 0.17.0\nError Invalid.cs - Failed to compile so was not formatted.\n\n# csharpier 0.18.0\nError ./Invalid.cs - Failed to compile so was not formatted.\n\ndotnet csharpier c:/src\n\n# csharpier 0.17.0\nError Invalid.cs - Failed to compile so was not formatted.\n\n# csharpier 0.18.0\nError c:/src/Invalid.cs - Failed to compile so was not formatted.\n```\n\nThanks go to @dlech\n\n### Invalid code for comments inside expressions in verbatim interpolated strings [#679](https://github.com/belav/csharpier/issues/679)\n```c#\n// input\nvar someValue =\n    $@\"\n    {\n        // comment\n        \"hi\"\n    }\n    \";\n// 0.17.0\nvar someValue =\n    $@\"\n    {\n        // comment \"hi\"}\n    \";\n// 0.18.0\nvar someValue =\n    $@\"\n    {\n        // comment\n        \"hi\"\n    }\n    \";\n```\nThanks go to @ivan-razorenov\n### CSharpier ranged ignore [#678](https://github.com/belav/csharpier/issues/678)\nCSharpier now has the ability to ignore a range of statements or members. See [Ignore](https://csharpier.com/docs/Ignore) for more details\n```c#\n// csharpier-ignore-start\nvar unformatted =        true;\nvar unformatted =        true;\n// csharpier-ignore-end\n```\nThanks go to @pingzing\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.17.0...0.18.0\n\n\n# 0.17.0\n## What's Changed\n\n- MSBuild Task target too late? Breakpoints are not hit [#674](https://github.com/belav/csharpier/issues/674)\n- Excessive indent level with lambda as the only method call argument [#669](https://github.com/belav/csharpier/issues/669)\n- Empty (or malformed) .csproj file will cause csharpier to fail. [#665](https://github.com/belav/csharpier/issues/665)\n- #endif retains extra blank lines [#660](https://github.com/belav/csharpier/issues/660)\n- Option for indentation  [#645](https://github.com/belav/csharpier/issues/645)\n- Small bug with formatting LINQ queries with multiple orderby fields [#643](https://github.com/belav/csharpier/issues/643)\n- Consistently Indent By 4 Spaces [#617](https://github.com/belav/csharpier/issues/617)\n- Conditional access edge cases [#603](https://github.com/belav/csharpier/issues/603)\n- Improve formatting for casting [#407](https://github.com/belav/csharpier/issues/407)\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.16.0...0.17.0\n\n# 0.16.0\n## What's Changed\n\n- fix: ignore file detection when directory contains period [#634](https://github.com/belav/csharpier/pull/634)\n- Format switch statement consistently with other code. [#624](https://github.com/belav/csharpier/pull/624)\n- CodeFormatter should accept SyntaxTree [#621](https://github.com/belav/csharpier/issues/621)\n- Add support for netstandard 2.0 to CSharpier.Core [#619](https://github.com/belav/csharpier/pull/619)\n- Indent c style multiline comments correctly when they switch indentation. [#606](https://github.com/belav/csharpier/issues/606)\n- Member access should break [#600](https://github.com/belav/csharpier/issues/600)\n- SuppressNullableWarningExpression ( !. ) does not break consistenly [#596](https://github.com/belav/csharpier/issues/596)\n- Turn CSharpier.com into a proper website. [#505](https://github.com/belav/csharpier/issues/505)\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.15.1...0.16.0\n\n# 0.15.1\n## What's Changed\n- Set CSharpier.MsBuild as DevelopmentDependency. [#607](https://github.com/belav/csharpier/pull/607)\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.15.0...0.15.1\n \n# 0.15.0\n## Breaking Changes\n- `CSharpier.MsBuild` now requires .NET6 [#565](https://github.com/belav/csharpier/issues/565)\n\n## What's Changed\n- .csharpierignore causes csharpier to be significantly slower [#594](https://github.com/belav/csharpier/issues/594)\n- Support for // csharpier-ignore [#581](https://github.com/belav/csharpier/issues/581)\n- Multiline comments are not properly indented. [#580](https://github.com/belav/csharpier/issues/580)\n- Generics + ObjectCreationExpression should break consistently [#578](https://github.com/belav/csharpier/issues/578)\n- Extra blank lines should be removed at the end of a method [#575](https://github.com/belav/csharpier/issues/575)\n- Null conditional operator does not break consistently [#561](https://github.com/belav/csharpier/issues/561)\n- Enum members should follow the rules for new lines [#553](https://github.com/belav/csharpier/issues/553)\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.14.0...0.15.0\n\n# 0.14.0\n## What's Changed\n- File with no preprocessor symbols formats twice. [#555](https://github.com/belav/csharpier/issues/555)\n- A namespace with `assembly` attribute and `using` causes two newlines [#551](https://github.com/belav/csharpier/issues/551)\n- Wrapping arithmetic expressions not stacked/chopped down [#547](https://github.com/belav/csharpier/issues/547)\n- Use UTF8 for piping in/out to CLI to support unicode characters  [#545](https://github.com/belav/csharpier/issues/545)\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.13.0...0.14.0\n\n# 0.13.0\n## What's Changed\n- Incorrect indentation in Method chain inside Initializer [#529](https://github.com/belav/csharpier/issues/529)\n- Allow empty lines before comments in enums [#524](https://github.com/belav/csharpier/issues/524)\n- For with empty statement should have space. [#523](https://github.com/belav/csharpier/issues/523)\n- Empty lines are not respected with break and continue [#520](https://github.com/belav/csharpier/issues/520)\n- Extra Whitespace in empty anonymous initializer [#519](https://github.com/belav/csharpier/issues/519)\n- Class that ends with comment does not retain extra line before comment [#513](https://github.com/belav/csharpier/issues/513)\n- Join Clause with Type losing Type [#508](https://github.com/belav/csharpier/issues/508)\n- Give cli bad path, you get an exception [#506](https://github.com/belav/csharpier/issues/506)\n- Double blank lines appearing in top level statements [#501](https://github.com/belav/csharpier/issues/501)\n- VisualStudio Extension [#499](https://github.com/belav/csharpier/issues/499)\n- Rider Plugin [#498](https://github.com/belav/csharpier/issues/498)\n- CSharpier.MSBuild may have mismatched version with CLI [#490](https://github.com/belav/csharpier/issues/490)\n- Break object initializers if there are 3 or more properties [#446](https://github.com/belav/csharpier/issues/446)\n- Force lines before and after some members. [#285](https://github.com/belav/csharpier/issues/285)\n- Formatting may conflict with StyleCopAnalayzers [#13](https://github.com/belav/csharpier/issues/13)\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.12.0...0.13.0\n\n# 0.12.0\n## Breaking Changes\n- If a file that fails to compile is piped to csharpier, csharpier now writes an error message on std error and return a 1 exit code.  \n\n## What's Changed\n- Nested Initializers should break [#487](https://github.com/belav/csharpier/issues/487)\n- Adding --pipe-multiple-files and other changes to support vscode extension [#283](https://github.com/belav/csharpier/pull/495)\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.11.1...0.12.0\n\n# 0.11.2 (CSharpier.MSBuild only)\n## What's Changed\n- CSharpier.MSBuild 0.11.1 is not published correctly [#481](https://github.com/belav/csharpier/issues/481)\n\n# 0.11.1\n## What's Changed\n- base should merge in an invocation chain [#473](https://github.com/belav/csharpier/issues/473)\n- File with multiple newlines at the end keeps them [#464](https://github.com/belav/csharpier/issues/464)\n- Extra space in generic with omitted types [#463](https://github.com/belav/csharpier/issues/463)\n- Object creation still uses SpaceBrace [#462](https://github.com/belav/csharpier/issues/462)\n- Empty Initializer gets double whitespace [#461](https://github.com/belav/csharpier/issues/461)\n- Support C# 10 and .Net 6 [#448](https://github.com/belav/csharpier/issues/448)\n- Always break nested Conditionals  [#434](https://github.com/belav/csharpier/issues/434)\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.10.0...0.11.1\n\n# 0.10.0\n## What's Changed\n- try-finally without catch clause is formatted strangely. [#454](https://github.com/belav/csharpier/issues/454)\n- Nested FixedStatements should break [#438](https://github.com/belav/csharpier/issues/438)\n- Disabled text validation fails with trailing whitespace [#428](https://github.com/belav/csharpier/issues/428)\n- Vertically Align Curly Braces [#423](https://github.com/belav/csharpier/issues/423)\n- Crash On Empty Config File [#421](https://github.com/belav/csharpier/issues/421)\n- Conditional in Arguments should indent. [#419](https://github.com/belav/csharpier/issues/419)\n- Chained assignments formatting can be improved [#417](https://github.com/belav/csharpier/issues/417)\n- Improve ConditionalExpression in ReturnStatement formatting [#416](https://github.com/belav/csharpier/issues/416)\n- Pattern Matching edge cases [#413](https://github.com/belav/csharpier/issues/413)\n- Implement proper logging. [#406](https://github.com/belav/csharpier/issues/406)\n- (finally) Improve formatting of InvocationExpressions [#7](https://github.com/belav/csharpier/issues/7)\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.9.9...0.10.0\n\n# 0.9.9\n## Breaking Changes\n- Require the directoryOrFile argument when not piping into to stdin [#381](https://github.com/belav/csharpier/issues/381)\n\n## What's Changed\n- SwitchExpression + Pattern edge cause causes extra line and poor formatting [#408](https://github.com/belav/csharpier/issues/408)\n- NewLines not retained before lock statement [#401](https://github.com/belav/csharpier/issues/401)\n- Better error handling when given a csproj or sln file [#398](https://github.com/belav/csharpier/issues/398)\n- CSharpierignore not taken into account when supplying . as the directory [#392](https://github.com/belav/csharpier/issues/392)\n- SwitchStatement with When breaks even with body of switch [#387](https://github.com/belav/csharpier/issues/387)\n- Respect new lines between case statements [#383](https://github.com/belav/csharpier/issues/383)\n- Line breaks in \"when\" clause in SwitchExpression [#382](https://github.com/belav/csharpier/issues/382)\n- Block loses extra lines [#378](https://github.com/belav/csharpier/issues/378)\n- RecordDeclaration should format consistently with ConstructorDeclaration [#371](https://github.com/belav/csharpier/issues/371)\n- Conditional breaking without indentation [#345](https://github.com/belav/csharpier/issues/345)\n- Improve formatting of pattern matching (IsPatternExpression, BinaryPattern, etc) [#154](https://github.com/belav/csharpier/issues/154)\n- Code in IfDirective can't currently be formatted [#15](https://github.com/belav/csharpier/issues/15)\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.9.8...0.9.9\n\n# 0.9.8\n## What's Changed\n- Remove all configuration options except for print width. [#358](https://github.com/belav/csharpier/issues/358)\n- Array Rank not breaking [#353](https://github.com/belav/csharpier/issues/353)\n- SwitchStatement should SpaceBrace [#352](https://github.com/belav/csharpier/issues/352)\n- ObjectInitializer keeping brace on same line [#336](https://github.com/belav/csharpier/issues/336)\n- ObjectInitializer in CollectionInitializer breaking [#335](https://github.com/belav/csharpier/issues/335)\n- Better format do-while [#317](https://github.com/belav/csharpier/issues/317)\n- Blocks inside of other blocks are getting an extra new line. [#316](https://github.com/belav/csharpier/issues/316)\n- Implicit Object Creation breaking  [#302](https://github.com/belav/csharpier/issues/302)\n- ForEachVariableStatement not breaking/indenting consistently with regular ForEachStatement [#300](https://github.com/belav/csharpier/issues/300)\n- MethodDeclaration with Constraints not breaking before brace [#299](https://github.com/belav/csharpier/issues/299)\n- Constructor with Base edge cases [#298](https://github.com/belav/csharpier/issues/298)\n- Nested Generics in Variable Declaration [#295](https://github.com/belav/csharpier/issues/295)\n- #pragma or trailing comment causes breaking in Object Initializer [#252](https://github.com/belav/csharpier/issues/252)\n- Verbatim string with mismatched line endings triggers \"failed syntax tree validation\" [#244](https://github.com/belav/csharpier/issues/244)\n- SwitchExpression formatting. [#237](https://github.com/belav/csharpier/issues/237)\n- Empty Method should keep braces on same line [#133](https://github.com/belav/csharpier/issues/133)\n- Improving formatting for edge cases of ForStatement [#112](https://github.com/belav/csharpier/issues/112)\n- ConditionalExpression indentation [#83](https://github.com/belav/csharpier/issues/83)\n- BinaryExpression Grouping [#37](https://github.com/belav/csharpier/issues/37)\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.9.7...0.9.8\n\n# 0.9.7\n## What's Changed\n- New overload for `Doc.GroupWithId()` [#334](https://github.com/belav/csharpier/issues/334)\n- Improve formatting by grouping parenthesized expressions and indenting them if they break. [#328](https://github.com/belav/csharpier/issues/328)\n- Improve formatting of IsPattern in IfStatement [#327](https://github.com/belav/csharpier/issues/327)\n- Improve formatting of the condition in a do-while [#326](https://github.com/belav/csharpier/issues/326)\n- Always break statements without braces. [#303](https://github.com/belav/csharpier/issues/303)\n- Empty Line being added with Array Type [#301](https://github.com/belav/csharpier/issues/301)\n- Implicit Array Initializer does not format braces consistently with other statements. [#297](https://github.com/belav/csharpier/issues/297)\n- Format checked like a invocation expression with an argument list [#270](https://github.com/belav/csharpier/issues/270)\n- Attribute should newline before close paren [#257](https://github.com/belav/csharpier/issues/257)\n- Tuple with VariableDeclaration [#251](https://github.com/belav/csharpier/issues/251)\n- Record - does not format consistently with a class. [#233](https://github.com/belav/csharpier/issues/233)\n- CSharpier.Playground should only publish with new released version [#224](https://github.com/belav/csharpier/issues/224)\n- Attributes on parameters [#204](https://github.com/belav/csharpier/issues/204)\n- Improve Lambda Formatting - indent expression body and break in a way to minimize new lines. [#176](https://github.com/belav/csharpier/issues/176)\n- Format ObjectCreationExpression with Initializer consistently [#113](https://github.com/belav/csharpier/issues/113)\n- Improve formatting of long Catch Clauses [#86](https://github.com/belav/csharpier/issues/86)\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.9.6...0.9.7\n\n# 0.9.6\n## What's Changed\n- Add options to write the formatted file to stdout and accept a file from stdin [#282](https://github.com/belav/csharpier/issues/282)\n- Implement ConditionalGroup doc type [#278](https://github.com/belav/csharpier/issues/278)\n- Optimize some hot paths to speed up formatting. [#277](https://github.com/belav/csharpier/issues/277)\n- Implement Align Doc Type [#276](https://github.com/belav/csharpier/issues/276)\n- Improve formatting of ClassDeclaration with BaseList + Constraints [#275](https://github.com/belav/csharpier/issues/275)\n- Switch tests to width 100 so they line up with default option [#256](https://github.com/belav/csharpier/issues/256)\n- Improving formatting of generics + variable declarations. [#240](https://github.com/belav/csharpier/pull/240)\n- Improve Forrmatting of Field with lambda and generics [#236](https://github.com/belav/csharpier/issues/236)\n- Improve Formatting of object initialiser syntax [#234](https://github.com/belav/csharpier/issues/234)\n- Improve formatting of generic methods and constructors [#94](https://github.com/belav/csharpier/issues/94)\n- Improve formatting of field with generics [#47](https://github.com/belav/csharpier/issues/47)\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.9.5...0.9.6\n\n# 0.9.5\n## What's Changed\n- CSharpier.MSBuild does not work with dotnet watch run [#228](https://github.com/belav/csharpier/issues/228)\n- Leading comments interfering with breaking InitializerExpression [#217](https://github.com/belav/csharpier/issues/217)\n- \\#endregion is getting indented more on each format [#216](https://github.com/belav/csharpier/issues/216)\n- Some files getting extra new lines on each format [#215](https://github.com/belav/csharpier/issues/215)\n- File that fails check should give some indication of the formatting that was missing. [#182](https://github.com/belav/csharpier/issues/182)\n- Missing nodes in SyntaxNodeComparer need better reporting. [#160](https://github.com/belav/csharpier/issues/160)\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.9.4...0.9.5\n\n# 0.9.4\n## What's Changed\n- Interpolated verbatim string is not handling line endings [#221](https://github.com/belav/csharpier/issues/221)\n- CLI Support for multiple targets [#220](https://github.com/belav/csharpier/issues/220)\n- Add support for nuget package that inject msbuild step to run csharpier [#218](https://github.com/belav/csharpier/issues/218)\n- Loops without braces [#202](https://github.com/belav/csharpier/issues/202)\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.9.3...0.9.4\n\n# 0.9.3\n## What's Changed\n- RecordDeclaration with Generics produces invalid code [#201](https://github.com/belav/csharpier/issues/201)\n- Formatting of auto implemented properties with access modifiers [#188](https://github.com/belav/csharpier/issues/188)\n- Verbatim string literals take into account EndOfLine configuration [#183](https://github.com/belav/csharpier/issues/183)\n- CSharpierIgnore & CSharpierRC from parent directories should be respected. [#181](https://github.com/belav/csharpier/issues/181)\n- Break apart readme [#172](https://github.com/belav/csharpier/issues/172)\n- PatternMatching includes extra spaces [#167](https://github.com/belav/csharpier/issues/167)\n- Re-add async file reads [#127](https://github.com/belav/csharpier/issues/127)\n- Dictionary Initializer inserts extra new line [#103](https://github.com/belav/csharpier/issues/103)\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.9.2...0.9.3\n\n#0.9.2\n## What's Changed\n- Support \"auto\" for endOfLine [#147](https://github.com/belav/csharpier/issues/147)\n- Long Parameter Attribute should break after ending brace [#174](https://github.com/belav/csharpier/issues/174)\n- Attribute on parameter should have space [#104](https://github.com/belav/csharpier/issues/104)\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.9.1...0.9.2\n\n# 0.9.1\n## What's Changed\n- Add support for .csharpierignore [#159](https://github.com/belav/csharpier/issues/159)\n- Break before BinaryOperator [#152](https://github.com/belav/csharpier/issues/152)\n- LeadingComments affect breaking [#149](https://github.com/belav/csharpier/issues/149)\n- Ignore generated files by default [#140](https://github.com/belav/csharpier/issues/140)\n- Return with BinaryExpression [#137](https://github.com/belav/csharpier/issues/137)\n- IsPattern breaking inside of IfStatement [#130](https://github.com/belav/csharpier/issues/130)\n- SpaceBrace causing breaking when it shouldn't [#100](https://github.com/belav/csharpier/issues/100)\n- Implement Formatting Options with Configuration File [#10](https://github.com/belav/csharpier/issues/10)\n\n**Full Changelog**: https://github.com/belav/csharpier/compare/0.9.0...0.9.1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.4365234375,
          "content": "## Development\nThe two main ways to work with CSharpier locally are the playground or with formatting tests.\n\n### Using the playground\nFrom your IDE run the following in the /CSharpier/CSharpier.Playground directory\n```bash\ndotnet watch run\n```\n- This should open the playground website at http://localhost:7000\n- Paste the code you want to format there and click format.\n- The playground includes options to view the AST and generated doc tree, which help troubleshooting issues.\n\n### Formatting Tests\nThe main way CSharpier is tested is with the files at src/CSharpier.Tests/FormattingTests/TestFiles. Any changes to formatting should include appropriate test coverage using these files.\n\nA source generator is used to generate an nunit test for each file. That test\n- Uses CSharpier to format each [FileName].cst to a new file [FileName].actual.cst\n- If a file [FileName].expected.cst exists, it is compared to [FileName].actual.cst instead\n- If the files differ, a diff tool will automatically open to allow you to compare the files.\n\n### Other Tests\nMost areas of CSharpier are covered by tests. Some to take note of\n\n- /Scripts/TestCli.ps1 - Full end to end style tests, only used for cases that can't be covered another way.\n- /Src/CSharpier.Tests/CommandLineFormatterTests - Integration tests that are close to end to end.\n- /Src/CSharpier.Tests/DocPrinterTests - used to test the doc types directly. Can be useful to understand how the different doc types work.\n- /Scripts/CreateTestingPR.ps1 - used to test the formatting changes in your branch against a large repo. Useful for finding edge cases you may have missed. (this script may require changes to work correctly)\n\n### Helpful Information\n- https://github.com/prettier/prettier/blob/main/commands.md is useful for understanding how formatting with the Doc classes works. CSharpier hasn't implemented all of the prettier Doc types, and it has added a couple new ones.\n- https://dev.to/fvictorio/how-to-write-a-plugin-for-prettier-6gi is also useful for understanding how formatting works.\n- https://sharplab.io/ is useful for understanding the AST that is produced from some C# code\n- https://www.linqpad.net/ can also show the AST, but is less forgiving with errors in your code.\n- https://www.sapehin.com/blog/csharp-via-roslynapi-the-big-picture/ gives an overview of all the different syntax nodes in c#\n\n### Issues\nIf you plan to contribute by working on an issue, you can assign it to yourself by adding a comment `.assign`\n"
        },
        {
          "name": "CSharpier.sln",
          "type": "blob",
          "size": 9.546875,
          "content": "Microsoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.1.32228.430\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"CSharpier.Playground\", \"Src\\CSharpier.Playground\\CSharpier.Playground.csproj\", \"{E7F03E73-82C7-4DB2-AF20-F25C45231A72}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"CSharpier\", \"Src\\CSharpier\\CSharpier.csproj\", \"{F1DE8719-9961-4F83-8BE6-34639C96DA5E}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"CSharpier.Tests\", \"Src\\CSharpier.Tests\\CSharpier.Tests.csproj\", \"{A77E4297-FAA5-40AB-9856-ECF72AF5D859}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{51C3E932-8A7B-4004-AA94-2AF89619B6F4}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.csharpierignore = .csharpierignore\n\t\t.dockerignore = .dockerignore\n\t\t.gitignore = .gitignore\n\t\tDockerfile = Dockerfile\n\t\tDockerfile-Website = Dockerfile-Website\n\t\t.config\\dotnet-tools.json = .config\\dotnet-tools.json\n\t\tglobal.json = global.json\n\t\tLICENSE = LICENSE\n\t\t.husky\\pre-commit = .husky\\pre-commit\n\t\tREADME.md = README.md\n\t\t.husky\\task-runner.json = .husky\\task-runner.json\n\t\tDirectory.Build.props = Directory.Build.props\n\t\tDirectory.Packages.props = Directory.Packages.props\n\t\tNuget\\Build.props = Nuget\\Build.props\n\t\t.editorconfig = .editorconfig\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"CSharpier.Benchmarks\", \"Src\\CSharpier.Benchmarks\\CSharpier.Benchmarks.csproj\", \"{A338903F-69AD-4950-B827-8EE75F98B620}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"CSharpier.Tests.Generators\", \"Src\\CSharpier.Tests.Generators\\CSharpier.Tests.Generators.csproj\", \"{3E1D074B-A4F3-4010-84E7-820459214202}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"CSharpier.Generators\", \"Src\\CSharpier.Generators\\CSharpier.Generators.csproj\", \"{D846F494-57FC-4315-A2A8-357343175D2E}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"CSharpier.Cli\", \"Src\\CSharpier.Cli\\CSharpier.Cli.csproj\", \"{F2BF106F-BB0A-44AC-8249-91BC53FFC83A}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SyntaxFinder\", \"Src\\SyntaxFinder\\SyntaxFinder.csproj\", \"{0B075DD3-1FEE-483E-8665-43C226188287}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"CSharpier.Cli.Tests\", \"Src\\CSharpier.Cli.Tests\\CSharpier.Cli.Tests.csproj\", \"{FDCC2871-9003-4EB8-B714-5C7E50FD5D04}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Docs\", \"docs\\Docs.csproj\", \"{1E43290C-C7DA-43CA-ADC5-BD95786BA440}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Scripts\", \"Scripts\\Scripts.csproj\", \"{3CFB200D-ABA6-4021-AF40-CFCF26DBCD66}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Github\", \".github\\Github.csproj\", \"{6D0C91DF-2FB7-48EC-8C1D-86FD4F6531A5}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"MsBuild\", \"Src\\CSharpier.MsBuild\\MsBuild.csproj\", \"{19874634-1A44-4831-BB43-6E2B864AB3ED}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"CSharpier.FakeGenerators\", \"Src\\CSharpier.FakeGenerators\\CSharpier.FakeGenerators.csproj\", \"{BD5D6F99-E1F8-4764-AE15-E70EF3F5CC43}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Shell\", \"Shell\\Shell.csproj\", \"{497B849B-044C-4350-BDE8-13CA3E6C7845}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Src\", \"Src\", \"{0D12A95B-A237-4181-937C-DF6D0265975E}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Website\", \"Src\\Website\\Website.csproj\", \"{A5573FE8-F544-4F18-B554-A8F9CC16A5DB}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{E7F03E73-82C7-4DB2-AF20-F25C45231A72}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{E7F03E73-82C7-4DB2-AF20-F25C45231A72}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{E7F03E73-82C7-4DB2-AF20-F25C45231A72}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{E7F03E73-82C7-4DB2-AF20-F25C45231A72}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{F1DE8719-9961-4F83-8BE6-34639C96DA5E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{F1DE8719-9961-4F83-8BE6-34639C96DA5E}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{F1DE8719-9961-4F83-8BE6-34639C96DA5E}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{F1DE8719-9961-4F83-8BE6-34639C96DA5E}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{A77E4297-FAA5-40AB-9856-ECF72AF5D859}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{A77E4297-FAA5-40AB-9856-ECF72AF5D859}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{A77E4297-FAA5-40AB-9856-ECF72AF5D859}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{A77E4297-FAA5-40AB-9856-ECF72AF5D859}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{A338903F-69AD-4950-B827-8EE75F98B620}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{A338903F-69AD-4950-B827-8EE75F98B620}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{A338903F-69AD-4950-B827-8EE75F98B620}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{A338903F-69AD-4950-B827-8EE75F98B620}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{3E1D074B-A4F3-4010-84E7-820459214202}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{3E1D074B-A4F3-4010-84E7-820459214202}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{3E1D074B-A4F3-4010-84E7-820459214202}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{3E1D074B-A4F3-4010-84E7-820459214202}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{D846F494-57FC-4315-A2A8-357343175D2E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{D846F494-57FC-4315-A2A8-357343175D2E}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{D846F494-57FC-4315-A2A8-357343175D2E}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{D846F494-57FC-4315-A2A8-357343175D2E}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{F2BF106F-BB0A-44AC-8249-91BC53FFC83A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{F2BF106F-BB0A-44AC-8249-91BC53FFC83A}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{F2BF106F-BB0A-44AC-8249-91BC53FFC83A}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{F2BF106F-BB0A-44AC-8249-91BC53FFC83A}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{0B075DD3-1FEE-483E-8665-43C226188287}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{0B075DD3-1FEE-483E-8665-43C226188287}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{0B075DD3-1FEE-483E-8665-43C226188287}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{0B075DD3-1FEE-483E-8665-43C226188287}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{FDCC2871-9003-4EB8-B714-5C7E50FD5D04}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{FDCC2871-9003-4EB8-B714-5C7E50FD5D04}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{FDCC2871-9003-4EB8-B714-5C7E50FD5D04}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{FDCC2871-9003-4EB8-B714-5C7E50FD5D04}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{1E43290C-C7DA-43CA-ADC5-BD95786BA440}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{1E43290C-C7DA-43CA-ADC5-BD95786BA440}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{3CFB200D-ABA6-4021-AF40-CFCF26DBCD66}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{3CFB200D-ABA6-4021-AF40-CFCF26DBCD66}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{6D0C91DF-2FB7-48EC-8C1D-86FD4F6531A5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{6D0C91DF-2FB7-48EC-8C1D-86FD4F6531A5}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{19874634-1A44-4831-BB43-6E2B864AB3ED}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{19874634-1A44-4831-BB43-6E2B864AB3ED}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{BD5D6F99-E1F8-4764-AE15-E70EF3F5CC43}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{BD5D6F99-E1F8-4764-AE15-E70EF3F5CC43}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{BD5D6F99-E1F8-4764-AE15-E70EF3F5CC43}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{BD5D6F99-E1F8-4764-AE15-E70EF3F5CC43}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{497B849B-044C-4350-BDE8-13CA3E6C7845}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{497B849B-044C-4350-BDE8-13CA3E6C7845}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{497B849B-044C-4350-BDE8-13CA3E6C7845}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{497B849B-044C-4350-BDE8-13CA3E6C7845}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{A5573FE8-F544-4F18-B554-A8F9CC16A5DB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{A5573FE8-F544-4F18-B554-A8F9CC16A5DB}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{A5573FE8-F544-4F18-B554-A8F9CC16A5DB}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{A5573FE8-F544-4F18-B554-A8F9CC16A5DB}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {00B535B6-778C-44D7-8DEC-0429BAAE4DC2}\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{F1DE8719-9961-4F83-8BE6-34639C96DA5E} = {0D12A95B-A237-4181-937C-DF6D0265975E}\n\t\t{A338903F-69AD-4950-B827-8EE75F98B620} = {0D12A95B-A237-4181-937C-DF6D0265975E}\n\t\t{F2BF106F-BB0A-44AC-8249-91BC53FFC83A} = {0D12A95B-A237-4181-937C-DF6D0265975E}\n\t\t{FDCC2871-9003-4EB8-B714-5C7E50FD5D04} = {0D12A95B-A237-4181-937C-DF6D0265975E}\n\t\t{BD5D6F99-E1F8-4764-AE15-E70EF3F5CC43} = {0D12A95B-A237-4181-937C-DF6D0265975E}\n\t\t{D846F494-57FC-4315-A2A8-357343175D2E} = {0D12A95B-A237-4181-937C-DF6D0265975E}\n\t\t{E7F03E73-82C7-4DB2-AF20-F25C45231A72} = {0D12A95B-A237-4181-937C-DF6D0265975E}\n\t\t{A77E4297-FAA5-40AB-9856-ECF72AF5D859} = {0D12A95B-A237-4181-937C-DF6D0265975E}\n\t\t{3E1D074B-A4F3-4010-84E7-820459214202} = {0D12A95B-A237-4181-937C-DF6D0265975E}\n\t\t{19874634-1A44-4831-BB43-6E2B864AB3ED} = {0D12A95B-A237-4181-937C-DF6D0265975E}\n\t\t{0B075DD3-1FEE-483E-8665-43C226188287} = {0D12A95B-A237-4181-937C-DF6D0265975E}\n\t\t{A5573FE8-F544-4F18-B554-A8F9CC16A5DB} = {0D12A95B-A237-4181-937C-DF6D0265975E}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "CSharpier.sln.DotSettings",
          "type": "blob",
          "size": 0.9619140625,
          "content": "ï»¿<wpf:ResourceDictionary xml:space=\"preserve\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:s=\"clr-namespace:System;assembly=mscorlib\" xmlns:ss=\"urn:shemas-jetbrains-com:settings-storage-xaml\" xmlns:wpf=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Concated/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=csharpier/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=csharpierignore/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=csharpierrc/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=externs/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Sharpier/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=usings/@EntryIndexedValue\">True</s:Boolean></wpf:ResourceDictionary>"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 0.5576171875,
          "content": "<Project>\n  <PropertyGroup>\n    <TargetFrameworks>net9.0</TargetFrameworks>\n    <LangVersion>12</LangVersion>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n    <!-- this is the warning generators get when they fail to generate a source file this makes sure the error for it failing is obvious -->\n    <WarningsAsErrors>CS8032</WarningsAsErrors>\n    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>\n    <EnableNETAnalyzers>true</EnableNETAnalyzers>\n    <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>\n  </PropertyGroup>\n</Project>\n"
        },
        {
          "name": "Directory.Packages.props",
          "type": "blob",
          "size": 2.189453125,
          "content": "<Project>\n  <PropertyGroup>\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageVersion Include=\"BenchmarkDotNet\" Version=\"0.14.0\" />\n    <PackageVersion Include=\"BenchmarkDotNet.Annotations\" Version=\"0.14.0\" />\n    <PackageVersion Include=\"CliWrap\" Version=\"3.6.6\" />\n    <PackageVersion Include=\"DiffEngine\" Version=\"6.5.7\" />\n    <PackageVersion Include=\"FluentAssertions\" Version=\"6.12.1\" />\n    <PackageVersion Include=\"GitHubActionsTestLogger\" Version=\"2.4.1\" />\n    <PackageVersion Include=\"Ignore\" Version=\"0.2.1\" />\n    <PackageVersion Include=\"ini-parser-netstandard\" Version=\"2.5.2\" />\n    <PackageVersion Include=\"Microsoft.AspNetCore.SpaServices.Extensions\" Version=\"8.0.8\" />\n    <PackageVersion Include=\"Microsoft.CodeAnalysis.Common\" Version=\"4.11.0\" />\n    <PackageVersion Include=\"Microsoft.CodeAnalysis.CSharp\" Version=\"4.11.0\" />\n    <PackageVersion Include=\"Microsoft.CodeAnalysis.PublicApiAnalyzers\" Version=\"3.3.4\" />\n    <PackageVersion Include=\"Microsoft.CSharp\" Version=\"4.7.0\" />\n    <PackageVersion Include=\"Microsoft.Extensions.Logging\" Version=\"8.0.0\" />\n    <PackageVersion Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.11.1\" />\n    <PackageVersion Include=\"NReco.Logging.File\" Version=\"1.2.1\" />\n    <PackageVersion Include=\"NUnit\" Version=\"4.2.2\" />\n    <PackageVersion Include=\"NUnit3TestAdapter\" Version=\"4.6.0\" />\n    <PackageVersion Include=\"PolySharp\" Version=\"1.14.1\" />\n    <PackageVersion Include=\"Scriban\" Version=\"5.10.0\" />\n    <PackageVersion Include=\"Serilog.Extensions.Logging.File\" Version=\"3.0.0\" />\n    <PackageVersion Include=\"System.CommandLine\" Version=\"2.0.0-beta1.21308.1\" />\n    <PackageVersion Include=\"System.IO.Abstractions\" Version=\"21.0.29\" />\n    <PackageVersion Include=\"System.IO.Abstractions.TestingHelpers\" Version=\"21.0.29\" />\n    <PackageVersion Include=\"System.IO.Hashing\" Version=\"8.0.0\" />\n    <PackageVersion Include=\"System.Text.Encoding.CodePages\" Version=\"8.0.0\" />\n    <PackageVersion Include=\"System.Text.Json\" Version=\"8.0.5\" />\n    <PackageVersion Include=\"System.Threading.Tasks.Extensions\" Version=\"4.5.4\" />\n    <PackageVersion Include=\"YamlDotNet\" Version=\"16.1.2\" />\n  </ItemGroup>\n</Project>"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.5927734375,
          "content": "FROM mcr.microsoft.com/dotnet/aspnet:9.0.0-bookworm-slim-amd64 AS base\nWORKDIR /app\nENV ASPNETCORE_URLS=http://+:80\nEXPOSE 80\n\nFROM mcr.microsoft.com/dotnet/sdk:9.0.100-bookworm-slim-amd64 AS build\n\nRUN set -uex \\\n    && apt-get update \\\n    && apt-get install -y ca-certificates curl gnupg \\\n    && mkdir -p /etc/apt/keyrings \\\n    && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key \\\n     | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \\\n    && NODE_MAJOR=18 \\\n    && echo \"deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main\" \\\n     | tee /etc/apt/sources.list.d/nodesource.list \\\n    && apt-get update \\\n    && apt-get install nodejs -y;\n\nWORKDIR /build\nCOPY ./Directory.Build.props ./Directory.Packages.props ./\nCOPY ./Src/CSharpier.Playground/CSharpier.Playground.csproj Src/CSharpier.Playground/\nCOPY ./Src/CSharpier/CSharpier.csproj Src/CSharpier/\nARG RESTORE_TOOLS=0\nRUN dotnet restore \"Src/CSharpier.Playground/CSharpier.Playground.csproj\"\n\nCOPY ./Src/CSharpier.Playground/ClientApp/package.json Src/CSharpier.Playground/ClientApp/\nCOPY ./Src/CSharpier.Playground/ClientApp/package-lock.json Src/CSharpier.Playground/ClientApp/\nWORKDIR /build/Src/CSharpier.Playground/ClientApp\nRUN npm ci\nCOPY ./Src/CSharpier.Playground/ClientApp/ .\nRUN npm run build\n\nWORKDIR /build\nCOPY . .\n\nFROM build AS publish\nARG RESTORE_TOOLS=0\nRUN dotnet publish \"Src/CSharpier.Playground/CSharpier.Playground.csproj\" -c Release -o /app/publish\n\nFROM base AS final\nWORKDIR /app\nCOPY --from=publish /app/publish .\nENTRYPOINT [\"dotnet\", \"CSharpier.Playground.dll\"]"
        },
        {
          "name": "Dockerfile-Website",
          "type": "blob",
          "size": 0.2314453125,
          "content": "FROM node:18-alpine AS base\nEXPOSE 80\n\nWORKDIR /src\nCOPY ./Src/Website/package.json .\nCOPY ./Src/Website/package-lock.json .\n\nRUN npm ci\n\nCOPY ./Src/Website/ .\nRUN npm run build\n\nENTRYPOINT npm run start:prod -- --port 80 --host 0.0.0.0\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.037109375,
          "content": "MIT License\n\nCopyright (c) 2021 belav\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Nuget",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.9609375,
          "content": "![CSharpier](./banner.svg)\n\nCSharpier is an opinionated code formatter for c#. It uses Roslyn to parse your code and re-prints it using its own rules. \nThe printing process was ported from [prettier](https://github.com/prettier/prettier) but has evolved over time.\n\nCSharpier provides a few basic options that affect formatting and has no plans to add more. It follows the [Option Philosophy](https://prettier.io/docs/en/option-philosophy.html) of prettier.\n\n### Quick Start\nInstall CSharpier globally using the following command.\n```bash\ndotnet tool install csharpier -g\n```\nThen format the contents of a directory and its children with the following command.\n```bash\ndotnet csharpier .\n```\n\nCSharpier can also format [on save in your editor](https://csharpier.com/docs/Editors) or as a [pre-commit hook](https://csharpier.com/docs/Pre-commit). Then you can ensure code was formatted with a [CI/CD tool](https://csharpier.com/docs/ContinuousIntegration).\n\n---\n\n[Read the documentation](https://csharpier.com)    \n  \n[Try it out](https://playground.csharpier.com)\n\n---\n\n### Before\n```c#\npublic class ClassName {\n    public void CallMethod() { \n        this.LongUglyMethod(\"1234567890\", \"abcdefghijklmnopqrstuvwxyz\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n    }\n}\n```\n\n### After\n```c#\npublic class ClassName\n{\n    public void CallMethod()\n    {\n        this.LongUglyMethod(\n            \"1234567890\",\n            \"abcdefghijklmnopqrstuvwxyz\",\n            \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        );\n    }\n}\n```\n\n## Contributing\nSee [Development Readme](CONTRIBUTING.md)  \n\nJoin Us [![Discord](https://img.shields.io/badge/Discord-chat?label=&logo=discord&logoColor=ffffff&color=7389D8&labelColor=6A7EC2)](https://discord.gg/HfAKGEZQcX)\n\n## Sponsors\n\nSpecial thanks to the [.NET on AWS Open Source Software Fund](https://github.com/aws/dotnet-foss) for sponsoring the ongoing development CSharpier.\n\n[<img src=\"./Src/Website/static/img/aws.png\" style=\"padding: 10px 0; width: 200px\" />](https://github.com/aws/dotnet-foss)\n"
        },
        {
          "name": "Scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "Shell",
          "type": "tree",
          "content": null
        },
        {
          "name": "Src",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "banner.svg",
          "type": "blob",
          "size": 3.4677734375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<svg\n   id=\"Layer_1\"\n   data-name=\"Layer 1\"\n   viewBox=\"0 0 1400 607.13\"\n   version=\"1.1\"\n   sodipodi:docname=\"banner.svg\"\n   width=\"1400\"\n   height=\"607.13\"\n   inkscape:version=\"1.1.1 (3bf5ae0d25, 2021-09-20)\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\">\n  <sodipodi:namedview\n     id=\"namedview21\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pagecheckerboard=\"0\"\n     showgrid=\"false\"\n     width=\"1200px\"\n     inkscape:zoom=\"1.0167579\"\n     inkscape:cx=\"568.96534\"\n     inkscape:cy=\"252.27245\"\n     inkscape:window-width=\"2560\"\n     inkscape:window-height=\"1377\"\n     inkscape:window-x=\"2552\"\n     inkscape:window-y=\"-8\"\n     inkscape:window-maximized=\"1\"\n     inkscape:current-layer=\"Layer_1\"\n     showguides=\"true\"\n     inkscape:guide-bbox=\"true\">\n    <sodipodi:guide\n       position=\"699.97291,926.34268\"\n       orientation=\"1,0\"\n       id=\"guide1491\" />\n    <sodipodi:guide\n       position=\"412.09417,305.18988\"\n       orientation=\"0,-1\"\n       id=\"guide1585\" />\n  </sodipodi:namedview>\n  <defs\n     id=\"defs4\">\n    <style\n       id=\"style2\">.cls-1{fill:#32566c;}.cls-2{fill:#d8d8d8;}.cls-3{fill:#748e9e;}.cls-4{fill:#092b3e;}</style>\n  </defs>\n  <polygon\n     class=\"cls-1\"\n     points=\"303.56,590.55 55.03,447.06 55.03,160.07 303.56,16.58 552.1,160.07 552.1,447.06 \"\n     id=\"polygon6\"\n     transform=\"matrix(0.82900833,0,0,0.82900833,447.40967,54.97913)\" />\n  <polyline\n     class=\"cls-2\"\n     points=\"448.06 386.8 303.89 470.04 159.72 386.8 159.72 220.33 303.89 137.09 447.67 220.1 450.37 166.77 303.89 82.2 112.18 192.88 112.18 414.25 303.89 524.93 446.84 442.4\"\n     id=\"polyline8\"\n     transform=\"matrix(0.82900833,0,0,0.82900833,447.40967,54.97913)\" />\n  <polygon\n     class=\"cls-3\"\n     points=\"403.39,261.01 399.7,285.39 373.05,285.39 376.74,261.01 \"\n     id=\"polygon10\"\n     transform=\"matrix(0.82900833,0,0,0.82900833,447.40967,54.97913)\" />\n  <path\n     class=\"cls-4\"\n     d=\"m 715.17936,329.94461 -4.52638,32.33133 h -19.9791 l 4.52638,-32.33133 h -17.94803 l -4.52638,32.33133 h -20.06201 l 4.61758,-32.33133 h -16.77913 l 2.75231,-19.53143 h 16.77913 l 2.48702,-18.01436 h -16.69622 l 2.66111,-19.53143 h 16.77913 l 4.44349,-31.78418 h 21.21432 l -4.4352,31.78418 H 702.023 l 4.4352,-31.78418 h 21.22261 l -4.44349,31.78418 h 18.73559 l -2.7523,19.53143 h -18.73559 l -2.56993,18.01436 h 18.7273 l -2.75231,19.53143 z m -14.64857,-37.54579 h -18.03923 l -2.48702,18.01436 h 17.93145 z\"\n     id=\"path12\"\n     style=\"stroke-width:0.829008\" />\n  <polygon\n     class=\"cls-3\"\n     points=\"371.75,293.98 365.14,337.69 391.6,337.69 398.41,293.98 \"\n     id=\"polygon14\"\n     transform=\"matrix(0.82900833,0,0,0.82900833,447.40967,54.97913)\" />\n  <polygon\n     class=\"cls-3\"\n     points=\"457.62,337.66 466.44,278.02 515.29,278.02 512.52,297.58 487.5,297.58 481.88,337.66 \"\n     id=\"polygon16\"\n     transform=\"matrix(0.82900833,0,0,0.82900833,447.40967,54.97913)\" />\n  <polygon\n     class=\"cls-3\"\n     points=\"456.01,307.51 460.6,277.33 406.85,277.33 397.72,337.69 451.47,337.69 454.78,315.83 425.55,315.83 425.51,315.83 426.77,307.51 430.07,287.68 447.23,287.68 445.28,301.97 433.73,301.97 432.85,307.41 \"\n     id=\"polygon18\"\n     transform=\"matrix(0.82900833,0,0,0.82900833,447.40967,54.97913)\" />\n</svg>\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.1474609375,
          "content": "{\n  \"sdk\": {\n    \"version\": \"9.0.100-rc.2\",\n    \"rollForward\": \"latestFeature\"\n  },\n  \"msbuild-sdks\": {\n    \"Microsoft.Build.Traversal\": \"4.1.0\"\n  }\n}\n"
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 29.4443359375,
          "content": null
        },
        {
          "name": "logo.svg",
          "type": "blob",
          "size": 1.3779296875,
          "content": "<svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 607.13 607.13\"><defs><style>.cls-1{fill:#32566c;}.cls-2{fill:#d8d8d8;}.cls-3{fill:#748e9e;}.cls-4{fill:#092b3e;}</style></defs><polygon class=\"cls-1\" points=\"55.03 447.06 55.03 160.07 303.56 16.58 552.1 160.07 552.1 447.06 303.56 590.55 55.03 447.06\"/><polyline class=\"cls-2\" points=\"448.06 386.8 303.89 470.04 159.72 386.8 159.72 220.33 303.89 137.09 447.67 220.1 450.37 166.77 303.89 82.2 112.18 192.88 112.18 414.25 303.89 524.93 446.84 442.4\"/><polygon class=\"cls-3\" points=\"399.7 285.39 373.05 285.39 376.74 261.01 403.39 261.01 399.7 285.39\"/><path class=\"cls-4\" d=\"M323,331.68l-5.46,39h-24.1l5.46-39H277.25l-5.46,39h-24.2l5.57-39H232.92l3.32-23.56h20.24l3-21.73H239.34l3.21-23.56h20.24l5.36-38.34h25.59l-5.35,38.34h18.74l5.35-38.34h25.6l-5.36,38.34h22.6L352,286.39H329.4l-3.1,21.73h22.59l-3.32,23.56Zm-17.67-45.29H283.57l-3,21.73H302.2Z\"/><polygon class=\"cls-3\" points=\"365.14 337.69 391.6 337.69 398.41 293.98 371.75 293.98 365.14 337.69\"/><polygon class=\"cls-3\" points=\"466.44 278.02 515.29 278.02 512.52 297.58 487.5 297.58 481.88 337.66 457.62 337.66 466.44 278.02\"/><polygon class=\"cls-3\" points=\"460.6 277.33 406.85 277.33 397.72 337.69 451.47 337.69 454.78 315.83 425.55 315.83 425.51 315.83 426.77 307.51 430.07 287.68 447.23 287.68 445.28 301.97 433.73 301.97 432.85 307.41 456.01 307.51 460.6 277.33\"/></svg>"
        },
        {
          "name": "nuget.config",
          "type": "blob",
          "size": 0.34765625,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <clear />\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\n  </packageSources>\n\n  <packageSourceMapping>\n    <packageSource key=\"nuget.org\">\n      <package pattern=\"*\" />\n    </packageSource>\n  </packageSourceMapping>\n</configuration>\n"
        }
      ]
    }
  ]
}