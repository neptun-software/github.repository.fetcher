{
  "metadata": {
    "timestamp": 1736710737160,
    "page": 155,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "playgameservices/play-games-plugin-for-unity",
      "stars": 3489,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "Assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.txt",
          "type": "blob",
          "size": 25.375,
          "content": "Version 2.0.0\n    New Features:\n    * Recall feature implementation. See [Recall for unity](https://developer.android.com/games/pgs/recall)\n    * Smoketest app is updated. \n    * Update Android Gradle Plugin and Gradle to 7.5.1.\n    * Upgraded maven to maven-publish\n    * Pin unity-jar-resolver version to 1.2.182.\n    * Removal of PGA dependency\n    * Updated documentation. See [Set up Google Play Games for Unity and sign-in](https://developer.android.com/games/pgs/unity/unity-start)\n\nVersion 0.11.01\n    New Features:\n    * The plugin now uses Play Games Services v2 SDK. See [Sign-in for Android Games](https://developers.google.com/games/services/android/signin)\n\nVersion 0.10.14\n    Bug fixes:\n    * #3091 Fixed the issue of unity <=2019 not detecting GooglePlayGames as an\n    android library.\n\nVersion 0.10.13\n    Bug fixes:\n    * Fixed the `Ambiguous match found` error, resolving the dependencies.\n    * #3088 Fixed `GooglePlayGames.plugin` not found error on Unity 2021.2.\n    * #2876 Fixed `When using LoadScores with SetUserFilter the Scores\n    list returns empty`.\n    * Removed obsolete code from GPGSUpgrader.\n\nVersion 0.10.12\n    New Features:\n    * Updated play-services-games version to 21.0.0\n    * Updated play-services-auth version to 19.0.0\n    * Updated GradleDependency to 4.0.2\n    * Replace Debug.Log with OurUtils.Logger\n    * Build configuration updates.\n    Bug fixes:\n    * #2967 Fixed the GUID not found error.\n    * Fixed issue where Google Play Games SDK path not found for Unity_2020.\n    * Fixed rounding issue with incremental achievements.\n    * Unit test fixes.\n\nVersion 0.10.10\n    New Features:\n    * Added Friends APIs: Play Games now has a cross-game Friends list. Request access to your players cross-game PGS friends list and integrate it with your in-game system to help players play with a set of high-quality gaming friends, and help people find their friends within your game. Learn more about Play Games Services .\n    Bug fixes:\n    * Removed Multiplayer code.\n\nVersion 0.10.09\n    Bug fixes:\n    * Fixed the issue of having an invalidated account in cache.\n    * Added more logs to sign-in and sign-out, removed unnecessary logs, formatted code.\n    * Moved AndroidClient.SignOut method callback onto the main thread.\n\nVersion 0.10.08\n    Bug fixes:\n    * #2853 Fixed the authentication callback not called on the main thread issue.\n    * Migrated old urls to start with https instead of http.\nVersion 0.10.07\n    New Features:\n    * Implementation of new authentication method and permission APIs.\n    Bug fixes:\n    * #2836 Fixed the wrong conversion of TotalTimePlayed.\n    * #2781 Disabled unnecessary warnings.\n    * #2791 Added gameId field to PlayGamesUserProfile for Unity 2020.1.\nVersion 0.10.06\n    Bug fixes:\n    * #2776 Crashes due to uninstalled Play Games App.\n    * #2766, #2772 Android SDK path detection in versions older than 2019.x.\nVersion 0.10.05\n    Bug fixes:\n    * #2753 VersionHandlerImpl.UpdateVersionedAssets not found.\n    * Fixed the issues caused by Nearby and RTMP callbacks not being on the main thread.\n    * Fixed detecting AndroidSdkRoot when unity embedded is used.\nVersion 0.10.04\n    Bug fixes:\n    * Updated the way of handling requests to prevent them being processed twice.\n    * Fixed the callback not being triggered in CommitUpdate issue.\n    * RealTimeMultiplayerListener runs on the game thread.\nVersion 0.10.03\n    Bug fixes:\n    * Fixed the exception caused by ui callbacks.\nVersion 0.10.02\n    Bug Fixes:\n    * Fixed LoadMoreScores.\n    * Fixed sign out issues when signed out from ui.\n    * GetAnotherServerAuthCode uses the same scopes used in sign in.\n    * Local user id is returned instead of \"me\" in LoadScores.\n    * Removed AndroidX dependency.\nVersion 0.10.01\n    Other:\n      * Reimplementation of the plugin without using C++ SDK\n    New Features:\n      * Updated play-services-games version to 18.0.1\n      * Migrated java code to AndroidX\nVersion 0.9.64\n    New Features:\n      * Updated gradle version to 5.4.1 and tools to 3.4.0\n    Bug Fixes:\n      * #2553 NullReferenceException with new v0.9.63 Achievements system\n      * #2545 Soft crash when opening achievements\n      * #2549 PlayerStats.AvgSessonLength is a typo\nVersion 0.9.63\n    New Features:\n      * Updated gradle version to 3.3.2\n      * Updated play-services-games version to 17.0\n      * [TBMP] Added GetMatch method\n      * [TBMP] Added Dismiss method\n      * [TBMP] Expose creation and update timestamps of match\n      * [TBMP] Expose creation time of invitation\n    Bug Fixes:\n      * Improved sign-in time.\n      * Refactored achievements implementation. Now it uses less server calls and massive achievement increement will not block Achievement UI.\n      * Log DateTime guard\n      * Fix DirectoryNotFoundException in GPGSUtil.GenerateAndroidManifest\n      * Fixed readme\n      * #2482 Warning in AndroidTokenClient when building for device\n      * #2486 CanRematch in TBM always false\n    Other:\n      * Removed GetAchievement method. Use LoadAchievements instead.\nVersion 0.9.62\n    Bug Fixes:\n      * #2475 ANRs 0.9.61 TokenFragment\n      * #2473 GetAnotherServerAuthCode email scope not granted\n      * #2465 Crash during sign-in failure at TokenFragment\n      * Additional check if Play Games is installed.\nVersion 0.9.61\n    Bug Fixes:\n      * #2442 GetAnotherServerAuthCode doesn't honor OAuth scope\n      * #2444 Crash during sign-in failure at TokenFragment line 258\nVersion 0.9.60\n    Bug Fixes:\n      * #2439 UnityWebRequestTexture class is not contained at unity 5.6\nVersion 0.9.59\n    Bug Fixes:\n      * #2430 Fixed sign-in issues with Android version 7 and less\n      * #2417 Windows. System.UnauthorizedAccessException: Access to the path is denied\n      * Replaces WWW with UnityWebRequest\n    New Features:\n      * Updated PlayServicesResolver to 1.2.100.0\nVersion 0.9.58\n    Bug Fixes:\n      * #2409 GetAnotherServerAuthCode always requests email permission\n      * #2406 IL2CPP managed stripping level\n      * #2401 Fix for missing TokenFragment class\n      * #2400 Many crash in Unity 2018.3.0f2\n      * #2395 Not working with Unity 2018.3.0f2\n    New Features:\n      * Updated PlayServicesResolver to 1.2.98.0\n      * Updated gradle version to 3.3.0\nVersion 0.9.57\n    Bug Fixes:\n      * Fixed issue with unable to sign-in if Google Play Services or Google Play Games need to be updated.\n      * #2388 IVideoClient not in package\nVersion 0.9.56\n    Bug Fixes:\n      * #2387 ISavedGameClient null if Authentication Failed.\n      * Non silent Authenticate in some cases failed silently.\nVersion 0.9.55\n    Bug Fixes:\n      * #2371 Authenticate callback is not called if sign-in was canceled.\n      * #1983, #2078, #2167 Android 8+ sign in fails when using EnableHidePopups.\nVersion 0.9.54\n    Bug Fixes:\n      * #2361 Failing to silently login - auth fails on request - initialisation order problem?\n      * #2350 Remove unused import that breaks iOS builds\n      * #2339 GetAnotherServerAuthCode Nothing Happens\nVersion 0.9.53\n    Bug Fixes:\n      * #2348 pragma UNITY_2017 should be UNITY_2017_1_OR_NEWER.\n      * #1581 Solve namespace error when importing to Unity project with existing Result class.\n      * Annotations fixes.\nVersion 0.9.52\n    Bug Fixes:\n      * #2319 Not Working with Unity 2018.2\nVersion 0.9.51\n    Bug Fixes:\n      * #2324 Please update the plugin to support new version of gms！！！please！！！！\n      * #2325 Google play services sdk and facebook sdk creating build issues\n      * #2327 Libgpg not included with arm64\n      * #2330 Play-games-plugin-for-unity vs google-play-services.jar\n      * #2334 Forced Resolution Failed for plugin 0.9.50\n    New Features:\n      * Using GPGS C++ SDK 3.0.1.\n      * Using play-services 15.01+.\n      * Added arm64-v8a support.\nVersion 0.9.50\n    Bug Fixes:\n      * Non-Fat APK including all native ABI libraries.\n      * Nearby connections advertising JNI error.\n      * #2067 iOS Cocoapods added during iOS build.\n    New Features:\n      * Using GPGS C++ SDK 3.0\n      * Removed iOS menu items.\n      * Adopted JarResolver version handler logic for plugin upgrades.\n      * Removed the Quests API.\n      * Added Support for SaveGames conflict resolution with updated\n          data and metadata changes.  This matches the changes in the\n          C++ API.\nVersion 0.9.42\n    Bug Fixes:\n       * #1909 Account Picker displayed after backgrounding/foregrounding app.\n       * #1922 Cannot build with Gradle: missing google_play_services_version.\n       * #1940 Leaderboard and other activities do not work.\n       * #1971 Cannot have separate builds for x86, arm7v.\nVersion 0.9.41\n    Bug Fixes:\n        * #1785 - Cleaned up files in Plugins/Android.\n        * #1833 - Added RevealAchievement method to PlayGamesPlatform\n        * #1867 - Added connection failure handling for auth failure edge cases.\n    New Features:\n        * Updated Play Services jar resolver uses xml file configuration.\n        * Added method GetAnotherServerAuthCode() to get additional server auth\n            codes without signing out.\nVersion 0.9.40\n    Bug Fixes:\n        * #1610 - Show menu items even if not on Android/iOS.\n        * #1764 - Jar Resolver conflicts with Firebase\n        * #1794 - Reduced warning spam about deprecations\n        * #1791 - Fixed typos in README.MD\n                - Added Jar resolver call when building just a nearby connections app.\nVersion 0.9.39a\n    Bug Fixes:\n        * #1778 - Requesting Id Token error.\nVersion 0.9.39\n    Bug Fixes:\n        * #1712 - Signing in/out multiple accounts does not work.\n        * #1756 - After signout, email, token are empty when reconnected.\n        * #1761 - Google.IOSResolver.Enabled is read-only.\n        * #1766 - Error executing VideoManager@IsCaptureAvailableCallback\n    New Features:\n        * #1743 - Ability to set the gravity of Achievement popups.\nVersion 0.9.38a\n    Bug Fixes:\n        * #1729 - Strings marshaled incorrectly.\nVersion 0.9.38\n    Bug Fixes:\n        * #1711 - iOSClient Error does not implement interface member\n        * #1712 - Signing in/out multiple google accounts\n        * #1699 - GetServerAuthCode causes \"invalid_grant: Code was already redeemed\n        * #1692 - See semi-transparent black screen during login.\n        * #1675 - Calling Signout causes crash.\nVersion 0.9.37\n    Bug Fixes:\n        * #1604 - Incompatible class error with play-services 10.1.\n        * #370 - Fixed freeze/crash when calling Application.Quit().\n    New Features:\n        * #35 - Added a method to inhibit achievment popups.\n        * Google SignIn support for Auth Code, Id Token and email.\n        * Updated to use GPGS C++ SDK version 2.3.\n        * Added the Video Capture API.\n    Deprecated Features:\n        * iOS Support will be winding down, ending iOS services in March 2018.\n            See https://android-developers.googleblog.com/2017/04/focusing-our-google-play-games-services.html\n\n        ** IMPORTANT **\n        This is the last version with iOS support for GPGS.  Plan accordingly.\n        ** IMPORTANT **\n\n        * Quests are deprecated.\n\nVersion 0.9.36\n    Bug Fixes:\n        * #1432 - Updating Authenticate to match Unity 5.5 interface.\n        * #1496 - Fixing NO_GPGS not being honored.\n        * Disabled JarResolver for iOS, added instructions for CocoaPods.\n    New Features:\n        * #1346 - Check if Play Games is installed.\nVersion 0.9.35\n    Bug Fixes:\n        * #1194 - OnPostprocessAllAssets called before Resolver is registered.\n        * #1209 - Stuck incremental achievements due to lost precision (via PR #1258).\n        * #1313 - NSInvalidArgumentException in iOS didRegisterForRemoteNotificationsWithDeviceToken.\n        * #1360 - Fixed Object not set to instance in PlayServicesResolver.\n        * #1361 - Removed multiple Resolver version log messages.\n        * #1371 - Removed warning about unreachable code in GPGSUpgrader.\n        * #1396 - Logging calls on non-game thread crash in IL2CPP for Android.\n        Updated CubicPilot to use SceneManager in Unity 5.3+\n    New Features:\n        * #1134 - No API for setting OAuth scopes (via PR #1296)\n        * Added HighSpenderProbability, TotalSpendNext28Days to PlayerStats for Android.\n        * Improved Jar Resolver - see README.\nVersion 0.9.34\n    Bug Fixes:\n        * #1162 - Cannot build from source\n        * #1179 - Interfaces should not be under `#if`\n        * #1175 - Play-services version needs to be updated to 9.0.0\n        * #1180 - PlayGamesUserProfile.Equals(object obj)` implemented incorrectly\n    New Features:\n        * #1085 - Add SpendProbability player stat.\nVersion 0.9.33\n    Bug Fixes:\n        * #1032 - Not able to get user's email.\n        * #1040 - Cannot parse PBX project for iOS\n        * #1068 - CreateWithInvitationScreen callback called twice on cancel.\n        * #1082 - Changed postbuild order to avoid Invalid PBX project.\n        * #1088 - Disable BITCODE for iOS build\n        * #1105 - GetServerAuthCode callback should be on game thread.\n                    (also moved other callbacks to be on game thread).\n        * Improved jar resolver logic during setup.\n    New Features:\n        * #990 - Support callback for getting email address.\n        * Removed dependency on Google+.\nVersion 0.9.32\n    Bug Fixes:\n        * #989 - Fixed misleading messages about RTMP when authenticating.\n        * #999 - Fixed BuildTarget.iOS reference when using Unity 4.x.\n        * #1004 - Upgrading from older version of plugin did not remove unused files.\n        * #1010 - Updated documentation about which Android SDK components\n            are needed.\n        * Updated dependency pattern for android-support-v4 to be 23.1+.\n    New Features:\n        * Play-services-jar resolver update to 1.1.1.\n            See https://github.com/googlesamples/unity-jar-resolver/blob/master/CHANGELOG.md\n            for details on the changes.\n        * Added plugin version to manifest.\nVersion 0.9.31a\n    Bug Fixes:\n        * #977 - IsConnectedToRoom always returned false, causing local player\n                to be removed from real time multiplayer room.\n        * #971 - NO_GPGS did not remove the Cocoapod dependencies corrrectly.\nVersion 0.9.31\n    New Features:\n        * PlayGamesAchievement (the object returned by\n            PlayGamesPlatform.LoadAchievements) now includes the current number\n            of steps and the total number of steps for the corresponding\n            achievement.\n        * Play-services-jar-resolver updated to 1.1.  This fixes the\n            problem of include play-services-measurement which has a variable\n            in the AndroidManifest.xml file.\n    Bug Fixes:\n        * #935 include IFDEF to allow editing in unsupported platforms.\nVersion 0.9.30\n    ** BREAKING CHANGES **\n        * `PlayerStats` is now a standalone class,\n            rather than a subclass of `PlayGamesLocalUser`.\n            All existing references to `PlayGamesLocalUser.PlayerStats`\n            should now directly refer to `PlayerStats`.\n        * The `NumOfSessions` property in `PlayerStats` has been renamed\n            `NumberOfSessions` to be consistent with other properties.\n    New Features:\n        * Rebase PlayerStats API to use the Play Games C++ SDK.\n        * PlayerStats API now supported on iOS.\n        * Added an option to PlayGamesClientConfiguration to require Google+.\n        * Updated to use GPGS C++ SDK version 2.1.\n        * Deprecated GetIdToken and GetAccessToken.  Applications should use\n            `PlayGamesPlatform.GetServerAuthCode()` to use the player's identity\n            on the server side.\n        * Updated configuration dialogs exposing the **Require Google Plus** property.\n            This property should be false if possible, reducing the number of\n            scopes and permissions the player has to allow.  Game developers should\n            use PlayGamesPlatform.GetServerAuthCode() to pass the player's OAuth\n            credentials to the server, and use Player.Id when possible for a persistent,\n            unique identifier for the player rather than email address.\n    Bug Fixes:\n        * #917 iOS 9, game freeze after closing authentication window.\n        * #919 Resolves Android jars even when target is not Android.\n        * #868 Avoid memory allocations in the PlayGamesHelperObject.\n        * #865 GetIdToken needs to be asynchronous.\nVersion 0.9.28\n        ** BREAKING CHANGES **\n\n        The jar resolution process for importing Play Services has been\n        standardized with the other Google plugins.  If you are upgrading\n        from 0.9.27, you will need to delete the Assets/GooglePlayGames/Editor\n        directory and restart Unity, then re-import version 0.9.28.\n\n    New Features:\n        * Integrated Play-services-jar resolver plugin for improved compatibility.\nVersion 0.9.27a\n    Bug Fixes:\n        * #809 Unity 5.3 namespace conflict\nVersion 0.9.27\n    New Features:\n        * Updating Android email and token access for new permissions model.\n        * Specify directory for generated game resource constants.\n        * Improved plugin initialization and setup.\n        * Added getChurnProbability() to PlayerStats.\n    Bug Fixes:\n        * #750 AndroidJavaProxy not found when building for iOS.\n        * #757 Can only start coroutine from main thread.\n        * #771 Documentation update: what are \"Android Resources\"\n        * #772 Disable bitcode in podfile\n        * #777 Can not get the list of friend images.\n        * #785 Regression on reportProgress for incremental achievement.\n        * #610 Stripped version of Play Services client library.\n        * #565 Minimize client library to avoid 65k dex limit.\n        * #323 Support for split client aars.\nVersion 0.9.26\n    New Features:\n        * #666 Expose invitation property for Real time game.\n        * Implement PlayerStats API for the local user.\n        * Requires version 8.1.5 of play services SDK\n    Bug Fixes:\n        * #696 Validate constants classname during setup.\n        * #709 ShowWaitingRoom cancels match.\n        * #712 Waiting room does not appear\n        * #719 Extra web client label in ios Setup dialog\n        * #726 inviter profile image not loading\n        * #722 Social.localUser.id throws NullPointerException\nVersion 0.9.25 (codename: frengle)\n    11 Sept 2015\n    ** BREAKING CHANGES **\n       * Cloud Save service (AppState) has been removed.\n       * The setup dialog now requires the generated resource data from\n            Google Play Developer Console.  This reduces the number of\n            copy & pastes needed and makes it harder to make a mistake with the\n            client id.\n    New Features:\n       * Updated Configuration setup using Resource data from Play Console.\n       * Added support for exclusiveBitmask in Turnbased quickmatches.\n       * Implementing Google Auth 2.0 for iOS authentication\n       * #120 implement setStepsAtLeast for achievements\n       * #274 Added the score reception functionality - method LoadCurrentScore\n       * #256 Get all turn-based invitations\n       * #259 implement LoadAchievements\n       * #186 Return Leaderboard Rank?\n       * #380 Callback on CreateWithInvitationScreen\n       * #480 Get score rank after submitting\n       * #503 LoadScores not implemented\n       * #546 Loading friends of logged in user. (Thanks @ashkan-saeedi-mazdeh\n                for the initial implementation).\n       * #617 Get all turn-based matches\n    Bug Fixes:\n       * #182 Response to Submit Score or Load Scores\n       * #387 OnLeftRoom not called when application is paused\n       * #445 Variant error in turn based match\n       * #563 Custom UI for invitation UI.\n       * #614 OnRoomConnected() getting called twice after implementing ShowWaitingRoomUI\n       * #619 NO_GPGS does not work with Symlink Unity libraries\n       * #655 Authenticate fails at first, then succeeds second time\nVersion 0.9.21\n  **BREAKING CHANGES**\n       * #382 Callback for declined invitation when creating RTMP room\n    This change adds the method `OnParticipantLeft` to the\n `RealTimeMultiplayerListener` interface.  Existing games that use this interface\nneed to add an implementation of this method.\n  New Features:\n       * #136 Callback for ShowLeaderboardUI()\n       * #392 Support for Default waiting room for RTMP\n       * #498 Bitmask filter in CreateQuickGame\n       * #537 Exposing Saved Games Delete API\n       * iOS builds will use Cocoapods if installed to build xcode project.\n  Bug Fixes\n       * #440 No callback from ReportProgress\n       * #444 Can Rematch always returns false\n       * #483 IncrementAchievement does not update Achievement data cache\n       * #488 Peers disconnected right after OnRoomConnected\n       * #568 Exception with null or empty image URL\n       * Fixed Setup dialogs not laidout correctly.\n2015-05-01 Version 0.9.20 (codename: ewokian)\n   New Features:\n       * Support for Events and Quests\n       * Support for Nearby Connections\n   Bug Fixes:\n       * #275 Plugin crashes when sending invite for iOS RTMP\n       * #326 Not always receiving invitations in iOS\n       * #363 Save Games not working on iOS\n       * #375 Authentication Return calls before initialization done\n       * #379 OnPeersDisconnected(string[] participantIds) is never called\n       * #443 ERROR_NOT_AUTHORIZED on re-login\n       * #453 NO_GPGS causes unreachable code warnings\n       * #454 Error building Player: IOException: android-support-v4.jar already exists\nVersion 0.9.15 (codename: auto-dogey5)\n    New Features:\n        * #276 Added support for excluding Google Play Game Services for iOS build (NO_GPGS)\n    Bug Fixes:\n        * #376 Moved Editor scripts into GooglePlayGames/Editor to reduce script sprawl.\n        * #331 Corrected Download menu item text.\n        * #331 Added support for new android-support jar location.\n        * #331 Removed Google play services version check when building.\n        * #361 Fixed player image not refreshed when changing players.\n        * #318 Removed armeabi libraries which broke Unity 5 building.\n        * #371 Unable to reshow Achievement or Leaderboard UI after Home button is pressed\nVersion 0.9.12 (codename: auto-dogey)\n    New features:\n        * Refactored AndroidSetup script to facilitate automated builds.\n        * Refactored Samples to be packaged as custom packaged Assets vs. projects.\nVersion 0.9.11 (codename: extra-dogey)\n    New features:\n        * Image property of IUserProfile implemented\n        * An implementation of Saved Games is now available. This obviates the old\n          cloud save feature, which is deprecated and will be removed. See\n          ISavedGameClient.cs for more details.\n    API Changes:\n        * RTMP Clients will no longer automatically call LeaveRoom when\n          they are removed from the connected set. Also, the local player\n          will never appear as a participant in\n          OnPeersConnected/OnPeersDisconnected.\n        * The PlayGamesPlatform must be configured before it can be used.\n          See PlayGamesClientConfiguration, PlayGamesPlatform.InitializeInstance,\n          and PlayGamesClientFactory.GetPlatformPlayGamesClient.\n    Bug Fixes:\n        * #309 - LeaderboardManager calls ShowAllUI when using leaderboard id\n\n\n2014-11-14 Version 0.9.10 (codename: doge)\n    This release is a major rearchitecting of the plugin to use\n    the Play Games C++ SDK. This allows us to re-use the same code on\n    all supported platforms, reducing codesize and decreasing the\n    work required to add new features. This release makes few\n    developer-facing API changes, apart from those required for\n    correctness reasons.\n\n    New features:\n        * Post-process build is handled by pure C# code rather than\n          bash / shell scripts.\n        * Implemented on top of the cross platform C++ Play Games SDK\n    API Changes:\n        * Conversions from int to uint where applicable:\n            - TurnBasedMatch.AvailableAutomatchSlots\n            - TurnBasedMatch.Variant\n            - IPlayGamesClient.IncrementAchievement\n            - IRealTimeMultiplayerClient.CreateQuickGame\n            - IRealTimeMultiplayerClient.CreateWithInvitationScreen\n            - ITurnBasedMultiplayerClient.CreateQuickGame\n            - ITurnBasedMultiplayerClient.CreateWithInvitationScreen\n        * Removes support for cloud state on iOS (a crossplatform\n          alternative is coming soon).\n        * Removes cloud state encrypter (only used by iOS).\n        * Real Time multiplayer calls will fail immediately when the\n          current match is being left or is shutdown.\n        * Turn-based multiplayer APIs now take instances of TurnBasedMatch\n          rather than just match ID. This is required for correctness\n          (the previous API allowed silently overwriting updated matches).\n\n\n2014-03-17 Version 0.9.00 (codename: cuiaba)\n\n    New features:\n        * Turn-based multiplayer (iOS, Android)\n        * Real-time multiplayer (iOS, Android)\n    Bug fixes:\n        * #49 - double cancellation necessary\n        * #40 - add account crashes app\n        * #25 - Action Scheduled for Later\n        * properly close Achievement buffer\n        * fix memory management on iOS\n        * minor fixes\n\n2014-02-04 Version 0.8.01 (codename: brasilia)\n\n    Updates all plug in code to use new Google Play Services\n    programming pattern (GoogleApiClient) and provides a few\n    bug fixes.\n\n    * References to GamesClient and AppStateClient updated to use GoogleApiClient\n    * Bug fix: GetUserId() occasionally causing crashes on IOS\n    * Bug fix: IsAuthenticated() returning true immediatly after SignOut()\n    * Bug fix: GPGSAppController.m missing call to super\n    * Bug fix: Error dialogs pop up briefly when no network available\n    * Bug fix: PostProcessBuildPlayer not friendly with other plugins\n    * Bug fix: Missing AddressBook.framework in iOS build instructions\n\n2013-12-10 Version 0.8.00 (codename: altamira)\n\n    Initial launch.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.671875,
          "content": "Copyright (C) 2014 Google Inc.\n \n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n \n        http://www.apache.org/licenses/LICENSE-2.0\n \n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "ProjectSettings",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.3095703125,
          "content": "# Google Play Games plugin for Unity\n_Copyright (c) 2014 Google Inc. All rights reserved._\n\nThe Google Play Games plugin for Unity&reg; is an open-source project whose goal\nis to provide a plugin that allows game developers to integrate with\nthe Google Play Games API from a game written in Unity&reg;. However, this project is\nnot in any way endorsed or supervised by Unity Technologies.\n\n_Unity&reg; is a trademark of Unity Technologies._\n\n_iOS is a trademark of Apple, Inc._\n\n## Downloads\n\nPlease download the package from the [Github release page](https://github.com/playgameservices/play-games-plugin-for-unity/releases).\n\n## Overview\n\nThe Google Play Games plugin for Unity allows you to access the Google Play Games\nAPI through Unity's [social interface](http://docs.unity3d.com/Documentation/ScriptReference/Social.html).\nThe plugin provides support for the\nfollowing features of the Google Play Games API:<br/>\n\n* sign in\n* friends\n* unlock/reveal/increment achievement\n* post score to leaderboard\n* cloud save read/write\n* show built-in achievement/leaderboards UI\n* events\n* [nearby connections](NEARBY.md)\n\n__NOTICE__: This version of the plugin no longer supports iOS.  Google Play games services for iOS is deprecated,\nand is not likely to function as expected. Do not use Google Play games\nservices for iOS in new apps. See the [deprecation announcement](https://android-developers.googleblog.com/2017/04/focusing-our-google-play-games-services.html) blog post for more details.\n\nFeatures:\n\n* easy GUI-oriented project setup (integrated into the Unity GUI)\n* no need to override/customize the player Activity\n* no need to override/customize AndroidManifest.xml\n\n## Documentation\n\nFor instructions on using the plugin, please refer to [this developer guide](https://developer.android.com/games/pgs/unity/unity-start).\n\nFor a sample application demonstrating how to use Google Play Games see [SmokeTest](https://github.com/playgameservices/play-games-plugin-for-unity/tree/master/Samples/SmokeTest) project;\n\n\n## Upgrading\n\nIf you have already integrated your project with a previous version of the\nplugin and wish to upgrade to a new version, please refer to the\n[upgrade instructions](UPGRADING.txt).\n\n## Retrieving server authentication codes ##\nIn order to access Google APIs on a backend web server on behalf of the current\nplayer, you need to get an authentication code from the client application and\npass this to your web server application.  This code can then be exchanged for\nan access token to make calls to the various APIs.\nFor more details on this flow see: [Google Sign-In for Websites](https://developers.google.com/identity/sign-in/web/server-side-flow).\n\nTo get the Server Auth code:\n1. Configure the web client Id of the web application linked to your game in the\n   Play Game Console.\n2. Call `PlayGamesClientConfiguration.Builder.RequestServerAuthCode(false)` when\n   creating the configuration.\n3. Call `PlayGamesPlatform.Instance.GetServerAuthCode()` once the player is authenticated.\n4. Pass this code to your server application.\n\n```csharp\n  PlayGamesPlatform.Instance.RequestServerSideAccess(\n    /* forceRefreshToken= */ false,\n    code -> {\n      // send code to server\n    });\n```\n\n## Decreasing apk size\n\nIt is possible to decrease the size of the Play Games Services Unity Plugin by removing code for the Play Games Services features that your game doesn’t use by using Proguard. Proguard will remove the Play Games Unity plugin code for features that are not used in your game, so your game ships with only the code that is needed and minimizes the size impact of using Play Games Services.\n\nAdditionally, it is possible to reduce the size of the entire Unity project using Unity’s [Managed Code Stripping](https://docs.unity3d.com/Manual/ManagedCodeStripping.html), which will compress your entire project.  This can be used in conjunction with Proguard.\n\n### Play Games Services Proguard configuration\n\n1. Go to `File > Build Settings > Player Settings` and click `Publishing Settings` section. Choose `Proguard` for `Minify > Release`. Then, enable `User Proguard File`. If you want the plugin to be proguarded for debug apks as well, you can choose `Proguard` for `Minify > Debug`.\n2. Copy the content of [the proguard configuration](scripts/proguard.txt) into `Assets/Plugins/Android/proguard-user.txt`.\n\n## (Advanced) Using the Plugin Without Overriding the Default Social Platform\n\nWhen you call `PlayGamesPlatform.Activate`, Google Play Games becomes your default social platform implementation, which means that static calls to methods in `Social` and `Social.Active` will be carried out by the Google Play Games plugin. This is the desired behavior for most games using the plugin.\n\nHowever, if for some reason you wish to keep the default implementation accessible (for example, to use it to submit achievements and leaderboards to a different social platform), you can use the Google Play Games plugin without overriding the default one. To do this:\n\n1. Do not call `PlayGamesPlatform.Activate`\n2. If `Xyz` is the name of a method you wish to call on the `Social` class, do not call `Social.Xyz`. Instead, call `PlayGamesPlatform.Instance.Xyz`\n3. Do not use `Social.Active` when interacting with Google Play Games. Instead, use `PlayGamesPlatform.Instance`.\n\nThat way, you can even submit scores and achievements simultaneously to two or more social platforms:\n\n```csharp\n    // Submit achievement to original default social platform\n    Social.ReportProgress(\"MyAchievementIdHere\", 100.0f, callback);\n\n    // Submit achievement to Google Play\n    PlayGamesPlatform.Instance.ReportProgress(\"MyGooglePlayAchievementIdHere\", 100.0f, callback);\n```\n\n## Special Thanks\n\nThis section lists people who have contributed to this project by writing code, improving documentation or fixing bugs.\n\n* [Dgizusse](https://github.com/Dgizusse) for figuring out that setting JAVA_HOME is necessary on Windows.\n* [antonlicht](https://github.com/antonlicht) for fixing a bug with the parameter type of showErrorDialog on the support library.\n* [pR0Ps](https://github.com/pR0Ps) for fixing an issue where OnAchievementsLoaded was not accepting an OPERATION_DEFERRED result code as a success.\n* [friikyeu](https://github.com/friikyeu) for helping debug [an issue](https://github.com/playgameservices/play-games-plugin-for-unity/issues/25) that caused API calls to be queued up rather than executed even when connected.\n"
        },
        {
          "name": "Samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "SupportFiles",
          "type": "tree",
          "content": null
        },
        {
          "name": "UPGRADING.txt",
          "type": "blob",
          "size": 0.677734375,
          "content": "NOTES ON UPGRADING\n\nNote for 2.0.0\n\nThe new SDK contains six changes which you should be aware of:\n1. Recall feature implementation. See [Recall for unity](https://developer.android.com/games/pgs/recall)\n2. Smoketest app is updated. \n3. Update Android Gradle Plugin and Gradle to 7.5.1.\n4. Upgraded maven to maven-publish\n5. Pin unity-jar-resolver version to 1.2.182.\n6. Removal of PGA dependency\n\nThere are no major changes related to sign-in flow.\n\nBefore importing the unity package for v2.0.0, delete\n`Assets/Plugins/Android/com.google.android.gms.play-services-games-<version_number>.aar`\nand everything under `Assets/GooglePlayGames`. You can then follow the regular\nintegration process.\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 25.171875,
          "content": "/*\n*   Gradle file to build the Unity plugin for Google Play Game Services.\n*/\n\nbuildscript {\n    repositories {\n        google()\n        mavenCentral()\n        mavenLocal()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:7.4.2'\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        mavenCentral()\n    }\n}\n\n/*\n    Project level variables\n*/\nproject.ext {\n    os_name = System.getProperty(\"os.name\").toLowerCase();\n    os_osx = os_name.contains(\"mac os x\");\n    os_windows = os_name.contains(\"windows\");\n    os_linux = os_name.contains(\"linux\");\n\n    ndk_root = System.getProperty(\"ANDROID_NDK_ROOT\")\n    if (ndk_root == null || ndk_root.isEmpty()) {\n        ndk_root = System.getenv(\"ANDROID_NDK_ROOT\")\n    }\n    sdk_root = System.getProperty(\"ANDROID_HOME\")\n    if (sdk_root == null || sdk_root.isEmpty()) {\n        sdk_root = System.getenv(\"ANDROID_HOME\")\n    }\n    unity_exe = System.getProperty(\"UNITY_EXE\")\n    if (unity_exe == null || unity_exe.isEmpty()) {\n        unity_exe = System.getenv(\"UNITY_EXE\")\n    }\n\n    // Take a guess at where Unity is located as a last resort.\n    if (unity_exe == null || unity_exe.isEmpty()) {\n      if (os_osx) {\n        unity_exe ='/Applications/Unity/Unity.app/Contents/MacOS/Unity'\n      } else if (os_windows) {\n        unity_exe ='c:\\\\program files\\\\unity\\\\editor\\\\unity.exe'\n      } else {\n        unity_exe = 'Unity'\n      }\n    }\n\n    git_exe = System.getProperty(\"GIT_EXE\")\n    if (git_exe == null || git_exe.isEmpty()) {\n        git_exe = System.getenv(\"GIT_EXE\")\n    }\n    if (git_exe == null || git_exe.isEmpty()) {\n        git_exe = 'git'\n    }\n\n    // Also update in com.google.play.games/package.json\n    pluginVersion = \"2.0.0\"\n\n    // String for specifying the build mode.\n    // If 'eap', will include all files from the 'Protected' folder.\n    // If build mode is anything other than 'eap', assumes a regular public\n    // build.\n    //   -PbuildMode=eap\n    if (!project.hasProperty('buildMode') || buildMode != 'eap') {\n        buildMode = 'public'\n    }\n\n    if (buildMode == 'eap') {\n        buildPath = file('build-eap').absolutePath\n        currentPluginPath = buildPath\n        currentPluginVersion = \"${pluginVersion}-eap\"\n    } else {\n        buildPath = file('build').absolutePath\n        currentPluginPath = buildPath\n        currentPluginVersion = \"${pluginVersion}\"\n    }\n    pluginSrc = file('Assets/Public/GooglePlayGames').absolutePath\n    manifestSrc = file('Assets/Plugins').absolutePath\n    protectedPluginSrc = file('Assets/Protected/GooglePlayGames').absolutePath\n    supportLib = file('SupportFiles/Public').absolutePath\n    protectedSupportLib = file('SupportFiles/Protected').absolutePath\n    supportLibProj = file(\"${buildPath}/SupportLibProject\").absolutePath\n    supportLibGradle = \"${buildPath}/SupportLibProject/build.gradle\"\n    pluginBuildSrc = file(\"${buildPath}/PluginSrc/Assets/GooglePlayGames\").absolutePath\n    manifestBuildSrc = file(\"${buildPath}/PluginSrc/Assets/Plugins\").absolutePath\n    pluginProj = file(\"${buildPath}/PluginProject\").absolutePath\n    samplesPath = file('Samples').absolutePath\n    protectedSamplesPath = file('Samples').absolutePath\n    samplesBuildSrc = file(\"${buildPath}/sampleSrc\").absolutePath\n    exportPath = file(\"${buildPath}/plugin.unitypackage\").absolutePath\n    currentPluginBasename = 'GooglePlayGamesPlugin'\n    currentPluginName = \"${currentPluginBasename}-${currentPluginVersion}.unitypackage\"\n    resolverDir = new File(\"${buildPath}/jarresolver\").absolutePath\n\n    editorDir = \"Assets/GooglePlayGames/com.google.play.games/Editor\"\n    pluginRepoDir = \"${pluginProj}/${editorDir}/m2repository\"\n\n   // Determine where we are relative to the Assets directory.\n    def currentDirectory = file('.')\n    if (file('PluginDev/Assets').isDirectory()) {\n        assetsPath = file('PluginDev/Assets')\n    } else if (file('Assets').isDirectory()) {\n        assetsPath = file('Assets')\n    } else if (currentDirectory.getName() == 'Assets') {\n        assetsPath = currentDirectory\n    } else if (currentDirectory.getParentFile().getName() == 'Assets') {\n        assetsPath = currentDirectory.getParentFile()\n    } else {\n        throw new GradleException(\"Unable to locate Assets directory in path: $currentDirectory\")\n    }\n\n    // String for specifying if samples are built.\n    // If 'off', only the plugin will be built.\n    // If sampleBuild mode is anything other than 'off', assume samples are\n    // built.\n    //   -PsampleBuild=off\n    if (!project.hasProperty('sampleBuild') || sampleBuild != 'off') {\n        sampleBuild = 'on'\n    }\n\n    if (sampleBuild == 'on') {\n        sampleList = ['SmokeTest']\n    } else {\n        sampleList = []\n    }\n\n    jarresolver_uri = System.getProperty(\"RESOLVER_PACKAGE_URI\")\n    jarresolver_repos = [\n      'https://github.com/googlesamples/unity-jar-resolver.git'\n    ]\n    jarresolver_tag = 'v1.2.182';\n}\n\nif (!tasks.findByName('prebuild')) {\n    task prebuild() {\n        println('Local prebuild')\n    }\n    prebuild.dependsOn {\n        project.tasks.findAll { task -> task.ext.has('remoteTaskPhase') && task.ext.remoteTaskPhase == 'prebuild' }\n    }\n}\nif (!tasks.findByName('build')) {\n    task build() {\n        println('Local build')\n    }\n    build.dependsOn {\n        project.tasks.findAll { task -> task.ext.has('remoteTaskPhase') && task.ext.remoteTaskPhase == 'build' }\n    }\n}\nif (!tasks.findByName('postbuild')) {\n    task postbuild() {\n        println('Local postbuild')\n    }\n    postbuild.dependsOn {\n        project.tasks.findAll { task -> task.ext.has('remoteTaskPhase') && task.ext.remoteTaskPhase == 'postbuild' }\n    }\n}\n\nproject.defaultTasks = ['prebuild', 'build', 'postbuild']\n\n\n/**\n    Final task of building all the unity packages.\n**/\ntask unity_package(dependsOn:'export_legacy_package') {\n\n    description = \"Top level task for building the unity packages\"\n\n    doLast {\n        println \"Packaging Complete!\"\n    }\n\n    // Mark this a build phase task for remoteTask support.\n    ext.remoteTaskPhase = 'build'\n\n    // Depends on packaging all the samples\n    dependsOn {\n        tasks.findAll { task -> task.name.startsWith('PackageSample') }\n    }\n}\n\n/**\n    Generate tasks for the samples.  There are several tasks for each sample.\n**/\nsampleList.each { sampleName ->\n    def createTask   = project.tasks.create('CreateSample' + sampleName)\n    def copySrcTask   = project.tasks.create('CopySrcSample' + sampleName)\n    def copyBuildSrcTask   = project.tasks.create('CopyBuildSrcSample' + sampleName)\n    def copyPluginSrcTask   = project.tasks.create('CopyPluginSrcSample' + sampleName)\n\n    // this is the path to the source code\n    def sampleSrcDir = samplesPath + '/' + sampleName\n\n    // this is the path to the source code for eap code\n    def protectedSampleSrcDir = protectedSamplesPath + '/' + sampleName\n\n    // this is the path to the source code in the build dir\n    def sampleBuildSrcDir = samplesBuildSrc + '/' + sampleName\n\n    // this is the path to build the sample package\n    def sampleDestSrcDir = file(\"${pluginProj}/Samples/${sampleName}/Assets/${sampleName}\").absolutePath\n\n    // this is the path for the plugin assets for the sample package\n    def samplePluginSrcDir = file(\"${pluginProj}/Samples/${sampleName}/Assets\").absolutePath\n\n    // the relative path to the sample assets within the project.\n    def sampleAssets = \"Assets/${sampleName}\"\n\n    // the path to the plugin code that will be copied into the sample package\n    def pluginDir = file(\"${pluginProj}/Assets\")\n\n    def sampleDir = file(\"${pluginProj}/Samples/${sampleName}/Assets/${sampleName}\")\n    if (!sampleDir.exists()) {\n        sampleDir.mkdirs()\n    }\n\n    /*\n        Create the sample in the build directory\n    */\n    createTask.description = \"Create the ${sampleName} package\"\n    createTask.dependsOn 'export_legacy_package'\n    createTask.doFirst {\n        delete \"${pluginProj}/Samples/${sampleName}/Assets/${sampleName}\"\n\n        def logFilename = \"${pluginProj}/Samples/${sampleName}/CreateSample${sampleName}.log\"\n        def argv = [\n          \"-gvh_disable\",\n          \"-g.building\",\n          \"-batchmode\",\n          \"-createProject\", \"${pluginProj}/Samples/${sampleName}\",\n          \"-logFile\", logFilename,\n          \"-quit\"\n        ]\n        runUnity(argv, logFilename)\n\n    }\n    // This is a build task\n    createTask.ext.remoteTaskPhase = 'build'\n\n    /*\n        Copy the source of the sample into build dir.\n        This is done so it can be remoted and assembled as a part of a RemoteTask.\n    */\n    copyBuildSrcTask.description = \"Copies sample ${sampleName} source code to build area\"\n    copyBuildSrcTask.doFirst {\n            copy {\n                from sampleSrcDir\n                into sampleBuildSrcDir\n            }\n            if (buildMode == 'eap') {\n                copy {\n                    from protectedSampleSrcDir\n                    into sampleBuildSrcDir\n                }\n            }\n    }\n    copyBuildSrcTask.doLast {\n            println 'copied ' + sampleSrcDir + ' to ' + sampleBuildSrcDir\n    }\n\n    copyBuildSrcTask.ext.remoteTaskPhase = 'prebuild'\n\n    /*\n        Copy the source of the sample into build target.  Don't import the\n        sample package, since we want the latest source code.\n    */\n    copySrcTask.description = \"Copies sample ${sampleName} source code to sample project build area\"\n    copySrcTask.dependsOn createTask, copyBuildSrcTask\n    copySrcTask.doFirst {\n            copy {\n                from sampleBuildSrcDir\n                into sampleDestSrcDir\n            }\n    }\n    copySrcTask.doLast {\n            println 'copied ' + sampleBuildSrcDir + ' to ' + sampleDestSrcDir\n    }\n\n    copySrcTask.ext.remoteTaskPhase = 'build'\n\n    /*\n        Copy the source of the plugin and jar resolver into build dir.\n        This is done so it can be remoted and assembled as a part of a RemoteTask.\n    */\n    copyPluginSrcTask.description = \"Copies plugin into sample ${sampleName} build area\"\n    copyPluginSrcTask.dependsOn createTask, copySrcTask, 'export_legacy_package'\n\n    copyPluginSrcTask.doFirst {\n            copy {\n                from pluginDir\n                into samplePluginSrcDir\n            }\n    }\n    copyPluginSrcTask.doLast {\n            println 'copied ' + pluginDir + ' to ' + samplePluginSrcDir\n    }\n\n    copyPluginSrcTask.ext.remoteTaskPhase = 'build'\n\n    /*\n        Create the exported package\n    */\n    def packageTask   = project.tasks.create('PackageSample' + sampleName)\n\n        packageTask.description = \"Package ${sampleName} sample\"\n\n        packageTask.dependsOn createTask, copySrcTask, copyPluginSrcTask\n\n        packageTask.doLast {\n            def pluginAssets = file(\"${pluginProj}/Samples/${sampleName}/Assets/GooglePlayGames/com.google.play.games\")\n            if (!pluginAssets.exists()) {\n                println 'Could not find ' + pluginAssets\n            }\n            def logFilename = \"${pluginProj}/Samples/${sampleName}/ExportSample${sampleName}.log\"\n            def argv = [\n              \"-gvh_disable\",\n              \"-g.building\",\n              \"-batchmode\",\n              \"-projectPath\", \"${pluginProj}/Samples/${sampleName}\",\n              \"-buildTarget\", \"android\",\n              \"-logFile\", logFilename,\n              \"-exportPackage\",\n                     \"${sampleAssets}\",\n                     \"Assets/GooglePlayGames/com.google.play.games\",\n                     \"Assets/Plugins/Android/GooglePlayGamesManifest.androidlib\",\n              \"${pluginProj}/Samples/${sampleName}.unitypackage\",\n              \"-quit\"\n              ]\n            runUnity(argv, logFilename)\n        }\n        packageTask.ext.remoteTaskPhase = 'build'\n\n        /*\n            Finally, copy the package to the source sample dir.\n        */\n        def copySamplePackageTask = project.tasks.create('CopySamplePackage' + sampleName)\n        copySamplePackageTask.description = \"Copy unity package for \" + sampleName + \" back to src dir\"\n        copySamplePackageTask.doLast {\n            if (buildMode == 'eap') {\n                copy {\n                    from file(\"${pluginProj}/Samples/${sampleName}.unitypackage\")\n                    into file(\"${protectedSamplesPath}/${sampleName}\")\n                }\n            } else {\n                copy {\n                    from file(\"${pluginProj}/Samples/${sampleName}.unitypackage\")\n                    into file(\"${samplesPath}/${sampleName}\")\n                }\n            }\n        }\n\n        copySamplePackageTask.ext.remoteTaskPhase = 'postbuild'\n}\n\ntask import_jarresolver() {\n    description = \"Imports the jar resolver package into the plugin\"\n    ext.remoteTaskPhase = 'build'\n    doFirst {\n        if (file(pluginProj).exists()) {\n            delete pluginProj\n        }\n    }\n    doLast {\n        def tree = fileTree(\"${resolverDir}\")\n            {\n                include 'external-dependency-manager-latest.unitypackage'\n            }\n        def jarresolver_package = tree.getSingleFile()\n\n        def logFilename = \"${pluginProj}/import_resolver_unity.log\"\n        def argv = [\n            \"-gvh_disable\",\n            \"-g.building\",\n            \"-batchmode\",\n            \"-createProject\", \"${pluginProj}\",\n            \"-logFile\", logFilename,\n            \"-importPackage\", \"${jarresolver_package}\",\n            \"-quit\"\n            ]\n        runUnity(argv, logFilename)\n    }\n\n}\n// don't explicitly depend on copy_jarresolver here since it is run\n// as a prebuild step, and import_jarresolver is a build step which can happen\n// on a machine with limited network connectivity.\n// import_jarresolver.dependsOn \"copy_jarresolver\"\n\ntask copy_pluginProjSrc () {\n    doFirst {\n      copy {\n        from {\"${pluginBuildSrc}\"}\n        includes [\"**/*\"]\n        duplicatesStrategy DuplicatesStrategy.INCLUDE\n        into {\"${pluginProj}/Assets/GooglePlayGames\"}\n      }\n      copy {\n        from {\"${manifestBuildSrc}\"}\n        includes [\"**/*\"]\n        duplicatesStrategy DuplicatesStrategy.INCLUDE\n        into {\"${pluginProj}/Assets/Plugins\"}\n      }\n    }\n    doLast {\n      copy {\n        from {\"${project.ext.buildPath}/m2repository\"}\n        includes [\"**/*\"]\n        duplicatesStrategy DuplicatesStrategy.INCLUDE\n        into {\"${pluginRepoDir}\"}\n      }\n    }\n}\ncopy_pluginProjSrc.dependsOn import_jarresolver\ncopy_pluginProjSrc.ext.remoteTaskPhase = 'build'\n\n\n\ntask generate_dependency_xml() {\n  description \"Generate the JarResolver dependency file for the support library\"\n  dependsOn copy_pluginProjSrc\n  doFirst {\n    def xmlFile = file(\"${pluginProj}/${editorDir}/${currentPluginBasename}Dependencies.xml\")\n    xmlFile << '<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\\n'\n    xmlFile << '<dependencies>\\n'\n    xmlFile << '<!-- Internal library dependency generated at build time. \\n'\n    xmlFile << '    It also defines the transitive dependencies on play-services\\n'\n    xmlFile << '-->\\n'\n    xmlFile << '  <androidPackages>\\n'\n    xmlFile << '    <androidPackage spec=\"com.google.games:gpgs-plugin-support:'\n    xmlFile << \"${currentPluginVersion}\\\">\\n\"\n    xmlFile << '      <repositories>\\n'\n    xmlFile << '        <repository>Assets/GooglePlayGames/com.google.play.games/Editor/m2repository</repository>\\n'\n    xmlFile << '      </repositories>\\n'\n    xmlFile << '    </androidPackage>\\n'\n    xmlFile << '  </androidPackages>\\n'\n    xmlFile << '</dependencies>\\n'\n  }\n}\n\n\ntask inject_versionIntoMetaFiles() {\n  description 'Inject the version number into the plugin\\'s meta files.'\n  dependsOn copy_pluginProjSrc, generate_dependency_xml, import_jarresolver\n  doLast {\n    def currentManifestFile = versionedAssetName(\"${currentPluginBasename}.txt\", \"${currentPluginVersion}\")\n    for (fileobj in fileTree(\"${pluginProj}\")) {\n      if (fileobj.path.endsWith('.meta')) {\n        // Skip the manifest files for any previous versions\n        // Skip any files in 'PackageCache' subdirectory\n        if (fileobj.path.contains(\"Editor/${currentPluginBasename}\") &&\n            !fileobj.path.contains(currentManifestFile) ||\n                fileobj.path.contains(\"PackageCache\")) {\n          continue\n        }\n        def lines = fileobj.text.split('\\n')\n        def outputLines = []\n        def added = false\n        for (line in lines) {\n          outputLines.add(line)\n          if (line.contains('labels:')) {\n            outputLines.add(\"- gvh_v${currentPluginVersion}\")\n            added = true\n          } else if (line.contains('folderAsset:') && line.contains('yes')) {\n            added = true\n          }\n        }\n        if (!added) {\n          outputLines.add(\"labels:\\n- gvh_v${currentPluginVersion}\")\n        }\n        fileobj.write(outputLines.join('\\n') + '\\n')\n      }\n    }\n  }\n}\n\ntask generate_manifest(dependsOn: [ 'inject_versionIntoMetaFiles']) {\n  description 'Generate a manifest for the files in the plug-in.'\n  doLast {\n    def dir = file(\"${pluginProj}/Assets\")\n    def list = []\n    dir.eachFileRecurse(groovy.io.FileType.FILES) { filename ->\n        def path = filename.path\n        if (!path.toLowerCase().endsWith('.meta')) {\n          list << filename.path.replace(\"${pluginProj}/\", '')\n        }\n    }\n    def manifest = file(\"${pluginProj}/${editorDir}/\" +\n          versionedAssetName(currentPluginBasename + '.txt', \"${currentPluginVersion}\"))\n    manifest.write(list.join('\\n') + '\\n')\n  }\n}\n\n\ntask copy_manifestMetadata(dependsOn: generate_manifest, type: Copy) {\n  def manifestBasename = versionedAssetName(currentPluginBasename + '.txt',\n        null) + '.meta'\n  description 'Copy .meta file for the plugin manifest.'\n  from file(\"${pluginProj}/${editorDir}/\" + manifestBasename)\n  into file(\"${pluginProj}/${editorDir}/\")\n  rename {\n    String fn ->\n      return fn.replace(manifestBasename,\n          versionedAssetName(currentPluginBasename + '.txt',\n          \"${currentPluginVersion}\") + '.meta')\n  }\n}\ntask export_legacy_package () {\n    description = \"Creates and exports the Plugin unity package\"\n    doFirst {\n        ext.path = \"${pluginProj}/${editorDir}/projsettings.txt\"\n        delete '${ext.path}'\n    }\n\n    doLast {\n        def logFilename = \"${pluginProj}/unity.log\"\n        def argv = [\n                \"-g.building\",\n                // This prevents the VersionHandler to preserve the plugin layout\n                \"-gvh_disable\",\n                // NOTE: This doesn't target Android since we don't want to have\n                // dependencies on the Jar Resolver as they require the plugin to\n                // be enabled during the build process which would break the\n                // versioning process.  Compilation is verified when exporting\n                // the sample projects.\n                \"-batchmode\",\n                \"-projectPath\", \"${pluginProj}\",\n                \"-logFile\", logFilename,\n                \"-exportPackage\",\n                    \"Assets/GooglePlayGames/com.google.play.games\",\n                    \"Assets/Plugins/Android/GooglePlayGamesManifest.androidlib\",\n                    \"Assets/ExternalDependencyManager\",\n                \"${exportPath}\",\n                \"-quit\"\n        ]\n        runUnity(argv, logFilename)\n    }\n}\nexport_legacy_package.dependsOn generate_manifest, import_jarresolver, copy_manifestMetadata\nexport_legacy_package.dependsOn copy_pluginProjSrc\nexport_legacy_package.ext.remoteTaskPhase = 'build'\n\ntask export_plugin_tgz_setup() {\n    description 'Creates a gradle task for each UPM .tgz that we need to generate'\n    fileTree(assetsPath).matching {\n        include '**/package.json'\n    }.each {\n        def packageJsonFile ->\n            println 'Package.json file found at ' + packageJsonFile\n            def packageJson = new groovy.json.JsonSlurper().parse(packageJsonFile)\n            def packageName = packageJson.name\n            def packageVersion = packageJson.version\n            // Create a Tar task for each package.\n            def task = tasks.create(name: \"upmTar-${packageName}\", type: Tar) {\n                compression = Compression.GZIP\n                archiveFileName = \"${packageName}-${packageVersion}.tgz\"\n                destinationDirectory = file(\"${project.ext.buildPath}\")\n                into('package') {\n                    from file(\"${pluginProj}/Assets/GooglePlayGames/${packageName}\")\n                }\n            }\n            task.dependsOn generate_manifest, import_jarresolver, copy_manifestMetadata\n            task.dependsOn copy_pluginProjSrc\n    }\n}\nexport_plugin_tgz_setup.ext.remoteTaskPhase = 'build'\n\ntask export_plugin_tgz(dependsOn: export_plugin_tgz_setup) {\n    description 'Creates a Unity Package Manager .tgz file for every package in the project'\n    doFirst {\n        println \"Creating .tgz packages.\"\n    }\n    // Lazily add a dependency on each of the package creation tasks.\n    dependsOn {\n        tasks.findAll { task -> task.name.startsWith('upmTar') }\n    }\n}\nexport_plugin_tgz.ext.remoteTaskPhase = 'build'\n\n/*\n    Copy the plugin to the current-build directory\n*/\ntask copy_plugin() {\n    description = 'Copy plugin to the current-build directory'\n    doFirst {\n            copy {\n                from file(exportPath)\n                into file(currentPluginPath)\n                rename ('plugin.unitypackage', currentPluginName)\n            }\n        }\n\n    doLast {\n        println \"Copied  ${exportPath}  to   ${currentPluginPath}\"\n    }\n\n    ext.remoteTaskPhase = 'postbuild'\n}\n\ntask copy_plugin_source {\n  description = \"Copies plugin source into build directory\"\n  ext.remoteTaskPhase = 'prebuild'\n\n  doFirst {\n    copy {\n        from(\"${pluginSrc}\") {\n            exclude '**/Samples', '**/Samples.meta'\n        }\n        into {\"${pluginBuildSrc}\"}\n    }\n    copy {\n        from(\"${manifestSrc}\")\n        into {\"${manifestBuildSrc}\"}\n    }\n    println \"Copied  ${manifestSrc}  to   ${manifestBuildSrc}\"\n    if (buildMode == 'eap') {\n      copy {\n          from(\"${protectedPluginSrc}\") {\n              exclude 'README.md', '**/Samples', '**/Samples.meta'\n          }\n          into {\"${pluginBuildSrc}\"}\n      }\n    }\n  }\n}\n\ntask copy_supportlib_source {\n  description = \"Copies support lib source into build directory for EAPs only\"\n  ext.remoteTaskPhase = 'prebuild'\n\n  copy {\n      from(\"${supportLib}\")\n      into {\"${supportLibProj}\"}\n  }\n  if (buildMode == 'eap') {\n    copy {\n        from(\"${protectedSupportLib}\") {\n            exclude 'README.md'\n        }\n        into {\"${supportLibProj}\"}\n    }\n  }\n}\n\ntask copy_jarresolver() {\n    description = \"Clones the jar resolver project and copied into the build.\"\n    ext.remoteTaskPhase = \"prebuild\"\n    dependsOn copy_plugin_source\n\n    doFirst {\n        if (file(resolverDir).exists()) {\n            delete resolverDir\n        }\n    }\n\n    doLast {\n        if (jarresolver_uri != null) {\n            mkdir(\"${resolverDir}\")\n            def resolver = new File(\"${resolverDir}/resolver.unitypackage\")\n            new URL(\"${jarresolver_uri}\").withInputStream {\n                inputStream -> resolver.withOutputStream { it << inputStream }\n            }\n            return\n        }\n\n        for (repo in jarresolver_repos) {\n            println 'clone ' + repo\n            def result = exec {\n                executable \"${git_exe}\"\n                args \"clone\", repo, \"${resolverDir}\"\n                ignoreExitValue true\n            }\n            if (result.exitValue == 0 && jarresolver_tag != null) {\n                result = exec {\n                    executable \"${git_exe}\"\n                    args \"checkout\", \"-b\", \"buildver\", \"${jarresolver_tag}\"\n                    workingDir \"${resolverDir}\"\n                }\n            }\n\n            if (result.exitValue == 0) {\n                println \"Downloaded resolver from \" + repo\n                return\n            }\n        }\n    }\n}\n\ntask build_java_support_lib(type: GradleBuild) {\n    description = \"Builds the client libraries for Android\"\n    buildFile = supportLibGradle\n    dependsOn copy_supportlib_source\n    startParameter.projectProperties.put('projVersion',currentPluginVersion)\n    startParameter.projectProperties.put('uploadDir', \"${project.ext.buildPath}/m2repository\")\n\n    tasks = ['build', 'publish']\n}\n\nbuild_java_support_lib.ext.remoteTaskPhase = 'prebuild'\n\ntask clean_support_lib(type: GradleBuild) {\n    description = \"cleans the client libraries for Android\"\n    buildFile = supportLibGradle\n    tasks = ['clean']\n}\ntask clean() {\n    doFirst {\n        delete 'build'\n        }\n    dependsOn clean_support_lib\n}\n\ntasks.findAll { task -> task.ext.has('remoteTaskPhase') && task.ext.remoteTaskPhase == 'build' }*.dependsOn('prebuild')\ntasks.findAll { task -> task.ext.has('remoteTaskPhase') && task.ext.remoteTaskPhase == 'postbuild' }*.dependsOn('build')\n\n// Construct the name of a versioned asset from the source filename and version\n// // string.\n// // The encoded string takes the form...\n// // ${filename}_v${version}_.${extension}\n// // where extension is derived from the specified filename.\ndef versionedAssetName(filename, version) {\n  def extensionIndex = filename.lastIndexOf('.')\n  def basename = filename.substring(0, extensionIndex)\n  def extension = filename.substring(extensionIndex)\n  // Encode the DLL version and target names into the DLL in the form...\n  // ${dllname}_t${hypen_separated_target_names}_v${version}.dll\n  def targetName = basename\n  if (version != null && !version.isEmpty()) {\n    targetName += '_v' + version\n  }\n  return targetName + extension\n}\n\ndef runUnity(argv, logFilename) {\n  def result = exec {\n    executable \"${project.ext.unity_exe}\"\n    args argv\n    ignoreExitValue true\n  }\n\n  if (result.exitValue != 0) {\n    println \"***Error Running Unity: ${result}\"\n    def src = file(logFilename).text\n    print src\n    throw new GradleException('error exporting sample')\n  }\n}\n"
        },
        {
          "name": "current-build",
          "type": "tree",
          "content": null
        },
        {
          "name": "docgen",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.48828125,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd \"${APP_HOME:-./}\" > /dev/null && pwd -P ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.7109375,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n\n@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\n@rem This is normally unused\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif %ERRORLEVEL% equ 0 goto execute\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif %ERRORLEVEL% equ 0 goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nset EXIT_CODE=%ERRORLEVEL%\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\nexit /b %EXIT_CODE%\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}