{
  "metadata": {
    "timestamp": 1736710899318,
    "page": 488,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jwt-dotnet/jwt",
      "stars": 2146,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.4296875,
          "content": "root = true;\r\n\r\n[*]\r\nend_of_line = crlf;\r\n\r\n[*.cs]\r\nindent_style = space;\r\nindent_size = 4;\r\ninsert_final_newline = false;\r\ntrim_trailing_whitespace = true;\r\n\r\n## IDE\r\n\r\n# IDE0003: Remove qualification\r\ndotnet_style_qualification_for_property = true:warning\r\n\r\n# IDE0049: Simplify Names\r\ndotnet_style_predefined_type_for_member_access = false\r\n\r\n# IDE0090: Use 'new(...)'\r\ncsharp_style_implicit_object_creation_when_type_is_apparent = false"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 5.7880859375,
          "content": "## Ignore Visual Studio temporary files, build results, and\r\n## files generated by popular Visual Studio add-ons.\r\n##\r\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\r\n\r\n# User-specific files\r\n*.suo\r\n*.user\r\n*.userosscache\r\n*.sln.docstates\r\n\r\n# User-specific files (MonoDevelop/Xamarin Studio)\r\n*.userprefs\r\n\r\n# Build results\r\n[Dd]ebug/\r\n[Dd]ebugPublic/\r\n[Rr]elease/\r\n[Rr]eleases/\r\nx64/\r\nx86/\r\nbld/\r\n[Bb]in/\r\n[Oo]bj/\r\n[Ll]og/\r\n\r\n# Visual Studio 2015/2017 cache/options directory\r\n.vs/\r\n# Uncomment if you have tasks that create the project's static files in wwwroot\r\n#wwwroot/\r\n\r\n# Visual Studio 2017 auto generated files\r\nGenerated\\ Files/\r\n\r\n# MSTest test Results\r\n[Tt]est[Rr]esult*/\r\n[Bb]uild[Ll]og.*\r\n\r\n# NUNIT\r\n*.VisualState.xml\r\nTestResult.xml\r\n\r\n# Build Results of an ATL Project\r\n[Dd]ebugPS/\r\n[Rr]eleasePS/\r\ndlldata.c\r\n\r\n# Benchmark Results\r\nBenchmarkDotNet.Artifacts/\r\n\r\n# .NET Core\r\nproject.lock.json\r\nproject.fragment.lock.json\r\nartifacts/\r\n\r\n# StyleCop\r\nStyleCopReport.xml\r\n\r\n# Files built by Visual Studio\r\n*_i.c\r\n*_p.c\r\n*_h.h\r\n*.ilk\r\n*.meta\r\n*.obj\r\n*.iobj\r\n*.pch\r\n*.pdb\r\n*.ipdb\r\n*.pgc\r\n*.pgd\r\n*.rsp\r\n*.sbr\r\n*.tlb\r\n*.tli\r\n*.tlh\r\n*.tmp\r\n*.tmp_proj\r\n*.log\r\n*.vspscc\r\n*.vssscc\r\n.builds\r\n*.pidb\r\n*.svclog\r\n*.scc\r\n\r\n# Chutzpah Test files\r\n_Chutzpah*\r\n\r\n# Visual C++ cache files\r\nipch/\r\n*.aps\r\n*.ncb\r\n*.opendb\r\n*.opensdf\r\n*.sdf\r\n*.cachefile\r\n*.VC.db\r\n*.VC.VC.opendb\r\n\r\n# Visual Studio profiler\r\n*.psess\r\n*.vsp\r\n*.vspx\r\n*.sap\r\n\r\n# Visual Studio Trace Files\r\n*.e2e\r\n\r\n# TFS 2012 Local Workspace\r\n$tf/\r\n\r\n# Guidance Automation Toolkit\r\n*.gpState\r\n\r\n# ReSharper is a .NET coding add-in\r\n_ReSharper*/\r\n*.[Rr]e[Ss]harper\r\n*.DotSettings.user\r\n\r\n# JustCode is a .NET coding add-in\r\n.JustCode\r\n\r\n# TeamCity is a build add-in\r\n_TeamCity*\r\n\r\n# DotCover is a Code Coverage Tool\r\n*.dotCover\r\n\r\n# AxoCover is a Code Coverage Tool\r\n.axoCover/*\r\n!.axoCover/settings.json\r\n\r\n# Visual Studio code coverage results\r\n*.coverage\r\n*.coveragexml\r\n\r\n# NCrunch\r\n_NCrunch_*\r\n.*crunch*.local.xml\r\nnCrunchTemp_*\r\n\r\n# MightyMoose\r\n*.mm.*\r\nAutoTest.Net/\r\n\r\n# Web workbench (sass)\r\n.sass-cache/\r\n\r\n# Installshield output folder\r\n[Ee]xpress/\r\n\r\n# DocProject is a documentation generator add-in\r\nDocProject/buildhelp/\r\nDocProject/Help/*.HxT\r\nDocProject/Help/*.HxC\r\nDocProject/Help/*.hhc\r\nDocProject/Help/*.hhk\r\nDocProject/Help/*.hhp\r\nDocProject/Help/Html2\r\nDocProject/Help/html\r\n\r\n# Click-Once directory\r\npublish/\r\n\r\n# Publish Web Output\r\n*.[Pp]ublish.xml\r\n*.azurePubxml\r\n# Note: Comment the next line if you want to checkin your web deploy settings,\r\n# but database connection strings (with potential passwords) will be unencrypted\r\n*.pubxml\r\n*.publishproj\r\n\r\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\r\n# checkin your Azure Web App publish settings, but sensitive information contained\r\n# in these scripts will be unencrypted\r\nPublishScripts/\r\n\r\n# NuGet Packages\r\n*.nupkg\r\n# The packages folder can be ignored because of Package Restore\r\n**/[Pp]ackages/*\r\n# except build/, which is used as an MSBuild target.\r\n!**/[Pp]ackages/build/\r\n# Uncomment if necessary however generally it will be regenerated when needed\r\n#!**/[Pp]ackages/repositories.config\r\n# NuGet v3's project.json files produces more ignorable files\r\n*.nuget.props\r\n*.nuget.targets\r\n\r\n# Microsoft Azure Build Output\r\ncsx/\r\n*.build.csdef\r\n\r\n# Microsoft Azure Emulator\r\necf/\r\nrcf/\r\n\r\n# Windows Store app package directories and files\r\nAppPackages/\r\nBundleArtifacts/\r\nPackage.StoreAssociation.xml\r\n_pkginfo.txt\r\n*.appx\r\n\r\n# Visual Studio cache files\r\n# files ending in .cache can be ignored\r\n*.[Cc]ache\r\n# but keep track of directories ending in .cache\r\n!*.[Cc]ache/\r\n\r\n# Others\r\nClientBin/\r\n~$*\r\n*~\r\n*.dbmdl\r\n*.dbproj.schemaview\r\n*.jfm\r\n*.pfx\r\n*.publishsettings\r\norleans.codegen.cs\r\n\r\n# Including strong name files can present a security risk\r\n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\r\n#*.snk\r\n\r\n# Since there are multiple workflows, uncomment next line to ignore bower_components\r\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\r\n#bower_components/\r\n\r\n# RIA/Silverlight projects\r\nGenerated_Code/\r\n\r\n# Backup & report files from converting an old project file\r\n# to a newer Visual Studio version. Backup files are not needed,\r\n# because we have git ;-)\r\n_UpgradeReport_Files/\r\nBackup*/\r\nUpgradeLog*.XML\r\nUpgradeLog*.htm\r\nServiceFabricBackup/\r\n*.rptproj.bak\r\n\r\n# SQL Server files\r\n*.mdf\r\n*.ldf\r\n*.ndf\r\n\r\n# Business Intelligence projects\r\n*.rdl.data\r\n*.bim.layout\r\n*.bim_*.settings\r\n*.rptproj.rsuser\r\n\r\n# Microsoft Fakes\r\nFakesAssemblies/\r\n\r\n# GhostDoc plugin setting file\r\n*.GhostDoc.xml\r\n\r\n# Node.js Tools for Visual Studio\r\n.ntvs_analysis.dat\r\nnode_modules/\r\n\r\n# Visual Studio 6 build log\r\n*.plg\r\n\r\n# Visual Studio 6 workspace options file\r\n*.opt\r\n\r\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\r\n*.vbw\r\n\r\n# Visual Studio LightSwitch build output\r\n**/*.HTMLClient/GeneratedArtifacts\r\n**/*.DesktopClient/GeneratedArtifacts\r\n**/*.DesktopClient/ModelManifest.xml\r\n**/*.Server/GeneratedArtifacts\r\n**/*.Server/ModelManifest.xml\r\n_Pvt_Extensions\r\n\r\n# Paket dependency manager\r\n.paket/paket.exe\r\npaket-files/\r\n\r\n# FAKE - F# Make\r\n.fake/\r\n\r\n# JetBrains Rider\r\n.idea/\r\n*.sln.iml\r\n\r\n# CodeRush\r\n.cr/\r\n\r\n# Python Tools for Visual Studio (PTVS)\r\n__pycache__/\r\n*.pyc\r\n\r\n# Cake - Uncomment if you are using it\r\n# tools/**\r\n# !tools/packages.config\r\n\r\n# Tabs Studio\r\n*.tss\r\n\r\n# Telerik's JustMock configuration file\r\n*.jmconfig\r\n\r\n# BizTalk build output\r\n*.btp.cs\r\n*.btm.cs\r\n*.odx.cs\r\n*.xsd.cs\r\n\r\n# OpenCover UI analysis results\r\nOpenCover/\r\n\r\n# Azure Stream Analytics local run output\r\nASALocalRun/\r\n\r\n# MSBuild Binary and Structured Log\r\n*.binlog\r\n\r\n# NVidia Nsight GPU debugger configuration file\r\n*.nvuser\r\n\r\n# MFractors (Xamarin productivity tool) working folder\r\n.mfractor/\r\n\r\n# Local History for Visual Studio\r\n.localhistory/\r\n"
        },
        {
          "name": ".pipelines",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.9580078125,
          "content": "# Unreleased\r\n\r\n# JWT 11.0.0\r\n\r\n- Updated System.Text.Json to version 9.0.0\r\n\r\n# JWT 11.0.0-beta3\r\n\r\n- Updated System.Text.Json to version 8.0.4\r\n\r\n# JWT.Extensions.AspNetCore 11.0.0-beta4\r\n\r\n- Make the event model support async-await\r\n\r\n# JWT.Extensions.AspNetCore 11.0.0-beta3\r\n\r\n- Converted to use the event model to allow dependency injection with custom event classes.\r\n\r\n# JWT 11.0.0-beta2, JWT.Extensions.AspNetCore 11.0.0-beta2, JWT.Extensions.DependencyInjection 3.0.0-beta2\r\n\r\n- Replaced .NET 7 with .NET 8 whenever applicable\r\n- Updated System.Text.Json to version 8.0.3\r\n\r\n# JWT 11.0.0-beta1, JWT.Extensions.AspNetCore 11.0.0-beta1, JWT.Extensions.DependencyInjection 3.0.0-beta1\r\n\r\n- Remove System.Text.Json when referring .NET 6 and higher as it's provided by the framework\r\n- Updated Newtonsoft.Json to version to 13.0.3\r\n- Updated System.Text.Json to version 6.0.9\r\n\r\n# JWT 10.1.1\r\n\r\n- Made ctor of ValidationParameters public, set default values for boolean properties to true\r\n\r\n# JWT 10.1.0\r\n\r\n- Unmarked HMAC SHA based algorithms as insecure and obsolete (was done in 9.0.0-beta4)\r\n\r\n# JWT 10.0.3\r\n\r\n- Added default ctor to JwtHeader and decorated it with `[JsonConstructor]`\r\n\r\n# JWT 10.0.2\r\n\r\n- Disallowed Encode(payload) with AddClaim(s)\r\n\r\n# JWT 10.0.1\r\n\r\n- Fixed deserializing JWT header\r\n- Updated Newtonsoft.Json to version to 13.0.2\r\n- Updated System.Text.Json to version 6.0.7\r\n\r\n# JWT 10.0.0\r\n\r\n- **Breaking:** Made System.Text.Json the default serializer on the platforms where it's available\r\n- **Breaking:** Made verify=true by default in IJwtDecoder methods\r\n\r\n- Made NoneAlgorithm not requiring any keys as it is not signed\r\n- Added option to select default serializer, Newtonsoft.Json or System.Text.Json (#433)\r\n- Renamed default IdentityFactory in Jwt.Extensions.AspNetCore, opened up for inheritance, extension (#428)\r\n- Added Encode(T) and Encode(Type, object) to JwtBuilder (#415)\r\n- Updated Newtonsoft.Json to version 13.0.1\r\n- Fixed typos in exception messages\r\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 1.75,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n\n  <PropertyGroup>\n    <LangVersion>latest</LangVersion>\n\n    <PackageProjectUrl>https://github.com/jwt-dotnet/jwt</PackageProjectUrl>\n    <PackageReleaseNotes>https://github.com/jwt-dotnet/jwt/releases</PackageReleaseNotes>\n    <RepositoryUrl>https://github.com/jwt-dotnet/jwt</RepositoryUrl>\n    <RepositoryType>git</RepositoryType>\n\n    <EnableSourceControlManagerQueries>true</EnableSourceControlManagerQueries>\n    <PublishRepositoryUrl>true</PublishRepositoryUrl>\n    <EmbedUntrackedSources>true</EmbedUntrackedSources>\n    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>\n\n    <SignAssembly>true</SignAssembly>\n    <AssemblyOriginatorKeyFile>..\\..\\JwtStrongNameKey.snk</AssemblyOriginatorKeyFile>\n\n    <EnableNETAnalyzers>true</EnableNETAnalyzers>\n    <AnalysisLevel>latest</AnalysisLevel>\n\n    <!-- Disable Warning CS1591: Missing XML comment for publicly visible type or member 'xyz' -->\n    <NoWarn>$(NoWarn);CS0618</NoWarn>\n    <!-- Disable Warning CS0618: 'xyz' is obsolete: -->\n    <NoWarn>$(NoWarn);CS1591</NoWarn>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.CodeAnalysis.NetAnalyzers\" Version=\"8.0.0\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"Microsoft.SourceLink.GitHub\" Version=\"8.0.0\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>\n    </PackageReference>\n  </ItemGroup>\n\n</Project>"
        },
        {
          "name": "JWT.sln",
          "type": "blob",
          "size": 8.3798828125,
          "content": "﻿\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio Version 17\r\nVisualStudioVersion = 17.0.32014.148\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"_\", \"_\", \"{513CE2B5-E0D6-43BC-998A-A02CB2875479}\"\r\n\tProjectSection(SolutionItems) = preProject\r\n\t\t.editorconfig = .editorconfig\r\n\t\t.gitignore = .gitignore\r\n\t\tCHANGELOG.md = CHANGELOG.md\r\n\t\tDirectory.Build.props = Directory.Build.props\r\n\t\tJWT.sln.DotSettings = JWT.sln.DotSettings\r\n\t\tJwtStrongNameKey.snk = JwtStrongNameKey.snk\r\n\t\tLICENSE.md = LICENSE.md\r\n\t\tNuGet.config = NuGet.config\r\n\t\tREADME.md = README.md\r\n\tEndProjectSection\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \".pipelines\", \".pipelines\", \"{BC7D1169-0261-419F-84F2-6312910AD508}\"\r\n\tProjectSection(SolutionItems) = preProject\r\n\t\t.pipelines\\build.yml = .pipelines\\build.yml\r\n\tEndProjectSection\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"JWT\", \"src\\JWT\\JWT.csproj\", \"{2F79EB8D-5B33-4EA6-AC1A-89B107F043D2}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"tests\", \"tests\", \"{44284230-53D0-4589-AFE8-52F003F6CB05}\"\r\n\tProjectSection(SolutionItems) = preProject\r\n\t\ttests\\Directory.Build.props = tests\\Directory.Build.props\r\n\tEndProjectSection\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"JWT.Tests.Common\", \"tests\\JWT.Tests.Common\\JWT.Tests.Common.csproj\", \"{5D0282D5-9CC4-4D42-A3F0-E18270F92184}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"JWT.Tests.NetCore3\", \"tests\\JWT.Tests.NetCore3\\JWT.Tests.NetCore3.csproj\", \"{559F1CBB-DB9C-4149-BEAC-417DA1BBB162}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"JWT.Tests.Net35\", \"tests\\JWT.Tests.Net35\\JWT.Tests.Net35.csproj\", \"{30D3D291-2C79-4CDD-94D3-C834A4995149}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"JWT.Tests.Net40\", \"tests\\JWT.Tests.Net40\\JWT.Tests.Net40.csproj\", \"{53CA6EF4-9C1E-4BDB-9829-CCD5C581DC00}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"JWT.Tests.Net46\", \"tests\\JWT.Tests.Net46\\JWT.Tests.Net46.csproj\", \"{78D9FDC0-9CFB-447B-B373-D43EB8122D10}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"JWT.Tests.Net60\", \"tests\\JWT.Tests.Net60\\JWT.Tests.Net60.csproj\", \"{241D7C36-5693-4115-800E-8F080DD1FB5B}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"JWT.Tests.Net80\", \"tests\\JWT.Tests.Net80\\JWT.Tests.Net80.csproj\", \"{D7F24AC9-D178-4BAB-BF93-4BAD8028416D}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Extensions\", \"Extensions\", \"{E7F3756F-ABDA-436D-8C42-FADAF79012ED}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"JWT.Extensions.AspNetCore\", \"src\\JWT.Extensions.AspNetCore\\JWT.Extensions.AspNetCore.csproj\", \"{3AC25D69-9863-45ED-A767-2809C46CB5A1}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"JWT.Extensions.AspNetCore.Tests\", \"tests\\JWT.Extensions.AspNetCore.Tests\\JWT.Extensions.AspNetCore.Tests.csproj\", \"{319388E9-1529-46B2-A230-2B978BAC4649}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"JWT.Extensions.DependencyInjection\", \"src\\JWT.Extensions.DependencyInjection\\JWT.Extensions.DependencyInjection.csproj\", \"{5805A1D3-60B7-4F73-BA9F-F49B0BBFBB94}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"JWT.Extensions.DependencyInjection.Tests\", \"tests\\JWT.Extensions.DependencyInjection.Tests\\JWT.Extensions.DependencyInjection.Tests.csproj\", \"{73167BAB-1F21-4DE9-83E0-5E0686AB7245}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{2F79EB8D-5B33-4EA6-AC1A-89B107F043D2}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{2F79EB8D-5B33-4EA6-AC1A-89B107F043D2}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{2F79EB8D-5B33-4EA6-AC1A-89B107F043D2}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{2F79EB8D-5B33-4EA6-AC1A-89B107F043D2}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{5D0282D5-9CC4-4D42-A3F0-E18270F92184}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{5D0282D5-9CC4-4D42-A3F0-E18270F92184}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{5D0282D5-9CC4-4D42-A3F0-E18270F92184}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{5D0282D5-9CC4-4D42-A3F0-E18270F92184}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{559F1CBB-DB9C-4149-BEAC-417DA1BBB162}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{559F1CBB-DB9C-4149-BEAC-417DA1BBB162}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{559F1CBB-DB9C-4149-BEAC-417DA1BBB162}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{559F1CBB-DB9C-4149-BEAC-417DA1BBB162}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{30D3D291-2C79-4CDD-94D3-C834A4995149}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{30D3D291-2C79-4CDD-94D3-C834A4995149}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{30D3D291-2C79-4CDD-94D3-C834A4995149}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{30D3D291-2C79-4CDD-94D3-C834A4995149}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{53CA6EF4-9C1E-4BDB-9829-CCD5C581DC00}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{53CA6EF4-9C1E-4BDB-9829-CCD5C581DC00}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{53CA6EF4-9C1E-4BDB-9829-CCD5C581DC00}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{53CA6EF4-9C1E-4BDB-9829-CCD5C581DC00}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{78D9FDC0-9CFB-447B-B373-D43EB8122D10}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{78D9FDC0-9CFB-447B-B373-D43EB8122D10}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{78D9FDC0-9CFB-447B-B373-D43EB8122D10}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{78D9FDC0-9CFB-447B-B373-D43EB8122D10}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{241D7C36-5693-4115-800E-8F080DD1FB5B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{241D7C36-5693-4115-800E-8F080DD1FB5B}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{241D7C36-5693-4115-800E-8F080DD1FB5B}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{241D7C36-5693-4115-800E-8F080DD1FB5B}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{3AC25D69-9863-45ED-A767-2809C46CB5A1}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{3AC25D69-9863-45ED-A767-2809C46CB5A1}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{3AC25D69-9863-45ED-A767-2809C46CB5A1}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{3AC25D69-9863-45ED-A767-2809C46CB5A1}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{319388E9-1529-46B2-A230-2B978BAC4649}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{319388E9-1529-46B2-A230-2B978BAC4649}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{319388E9-1529-46B2-A230-2B978BAC4649}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{319388E9-1529-46B2-A230-2B978BAC4649}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{5805A1D3-60B7-4F73-BA9F-F49B0BBFBB94}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{5805A1D3-60B7-4F73-BA9F-F49B0BBFBB94}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{5805A1D3-60B7-4F73-BA9F-F49B0BBFBB94}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{5805A1D3-60B7-4F73-BA9F-F49B0BBFBB94}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{73167BAB-1F21-4DE9-83E0-5E0686AB7245}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{73167BAB-1F21-4DE9-83E0-5E0686AB7245}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{73167BAB-1F21-4DE9-83E0-5E0686AB7245}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{73167BAB-1F21-4DE9-83E0-5E0686AB7245}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{D7F24AC9-D178-4BAB-BF93-4BAD8028416D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{D7F24AC9-D178-4BAB-BF93-4BAD8028416D}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{D7F24AC9-D178-4BAB-BF93-4BAD8028416D}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{D7F24AC9-D178-4BAB-BF93-4BAD8028416D}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(NestedProjects) = preSolution\r\n\t\t{BC7D1169-0261-419F-84F2-6312910AD508} = {513CE2B5-E0D6-43BC-998A-A02CB2875479}\r\n\t\t{3AC25D69-9863-45ED-A767-2809C46CB5A1} = {E7F3756F-ABDA-436D-8C42-FADAF79012ED}\r\n\t\t{319388E9-1529-46B2-A230-2B978BAC4649} = {E7F3756F-ABDA-436D-8C42-FADAF79012ED}\r\n\t\t{5805A1D3-60B7-4F73-BA9F-F49B0BBFBB94} = {E7F3756F-ABDA-436D-8C42-FADAF79012ED}\r\n\t\t{73167BAB-1F21-4DE9-83E0-5E0686AB7245} = {E7F3756F-ABDA-436D-8C42-FADAF79012ED}\r\n\t\t{44284230-53D0-4589-AFE8-52F003F6CB05} = {513CE2B5-E0D6-43BC-998A-A02CB2875479}\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {E1410453-72A1-44D5-AE80-32835754BEDA}\r\n\tEndGlobalSection\r\nEndGlobal\r\n"
        },
        {
          "name": "JWT.sln.DotSettings",
          "type": "blob",
          "size": 1.5703125,
          "content": "﻿<wpf:ResourceDictionary xml:space=\"preserve\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:s=\"clr-namespace:System;assembly=mscorlib\" xmlns:ss=\"urn:shemas-jetbrains-com:settings-storage-xaml\" xmlns:wpf=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">\n\t\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=HMACSHA/@EntryIndexedValue\">HMACSHA</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=RS/@EntryIndexedValue\">RS</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=RSA/@EntryIndexedValue\">RSA</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=ECDSA/@EntryIndexedValue\">ECDSA</s:String>\n\t<s:Boolean x:Key=\"/Default/Environment/InjectedLayers/FileInjectedLayer/=69CA6CF3E63C5943A86891A91C864D7C/@KeyIndexDefined\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/Environment/InjectedLayers/FileInjectedLayer/=69CA6CF3E63C5943A86891A91C864D7C/RelativePath/@EntryValue\">JWT.sln.DotSettings</s:String>\n\t<s:Boolean x:Key=\"/Default/Environment/InjectedLayers/InjectedLayerCustomization/=File69CA6CF3E63C5943A86891A91C864D7C/@KeyIndexDefined\">True</s:Boolean>\n\t<s:Double x:Key=\"/Default/Environment/InjectedLayers/InjectedLayerCustomization/=File69CA6CF3E63C5943A86891A91C864D7C/RelativePriority/@EntryValue\">1</s:Double>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EFeature_002EServices_002ECodeCleanup_002EFileHeader_002EFileHeaderSettingsMigrate/@EntryIndexedValue\">True</s:Boolean>\n</wpf:ResourceDictionary>"
        },
        {
          "name": "JwtStrongNameKey.snk",
          "type": "blob",
          "size": 0.58203125,
          "content": null
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.6455078125,
          "content": "# Public Domain\n\nOriginally written by John Sheehan (https://john-sheehan.com). Then updated and maintained by Alexander Batishchev (https://abatishchev.dev).\n\nThis work is public domain.\n\nThe person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by law.\n\nFor more information, please visit: http://creativecommons.org/publicdomain/zero/1.0/\n\n# MIT\n\nCopyright (c) 2019 Jwt.Net Maintainers and Contributors.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please visit: https://opensource.org/licenses/MIT\n"
        },
        {
          "name": "NuGet.config",
          "type": "blob",
          "size": 0.2001953125,
          "content": "﻿<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\n  </packageSources>\n</configuration>"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.2373046875,
          "content": "<!-- START doctoc generated TOC please keep comment here to allow auto update -->\r\n<!-- DO NOT EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\r\n\r\n- [Jwt.Net, a JWT (JSON Web Token) implementation for .NET](#jwtnet-a-jwt-json-web-token-implementation-for-net)\r\n- [Sponsor](#sponsor)\r\n- [Avaliable NuGet packages](#avaliable-nuget-packages)\r\n- [Supported .NET versions:](#supported-net-versions)\r\n- [Jwt.NET](#jwtnet)\r\n  - [Creating (encoding) token](#creating-encoding-token)\r\n    - [Or using the fluent builder API](#or-using-the-fluent-builder-api)\r\n  - [Parsing (decoding) and verifying token](#parsing-decoding-and-verifying-token)\r\n    - [Or using the fluent builder API](#or-using-the-fluent-builder-api-1)\r\n    - [Or using the fluent builder API](#or-using-the-fluent-builder-api-2)\r\n  - [Validate token expiration](#validate-token-expiration)\r\n  - [Parsing (decoding) token header](#parsing-decoding-token-header)\r\n    - [Or using the fluent builder API](#or-using-the-fluent-builder-api-3)\r\n  - [Turning off parts of token validation](#turning-off-parts-of-token-validation)\r\n    - [Or using the fluent builder API](#or-using-the-fluent-builder-api-4)\r\n  - [Custom JSON serializer](#custom-json-serializer)\r\n  - [Custom JSON serialization settings with the default JsonNetSerializer](#custom-json-serialization-settings-with-the-default-jsonnetserializer)\r\n- [Jwt.Net ASP.NET Core](#jwtnet-aspnet-core)\r\n  - [Register authentication handler to validate JWT](#register-authentication-handler-to-validate-jwt)\r\n  - [Custom factories to produce Identity or AuthenticationTicket](#custom-factories-to-produce-identity-or-authenticationticket)\r\n- [License](#license)\r\n\r\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\r\n\r\n[![Build status](https://abatishchev.visualstudio.com/OpenSource/_apis/build/status/Jwt.Net-CI)](https://abatishchev.visualstudio.com/OpenSource/_build/latest?definitionId=9)\r\n[![Release status](https://abatishchev.vsrm.visualstudio.com/_apis/public/Release/badge/b7fc2610-91d5-4968-814c-97a9d76b03c4/2/2)](https://abatishchev.visualstudio.com/OpenSource/_release?_a=releases&view=mine&definitionId=2)\r\n\r\n## Jwt.Net, a JWT (JSON Web Token) implementation for .NET\r\n\r\nThis library supports generating and decoding [JSON Web Tokens](https://tools.ietf.org/html/rfc7519).\r\n\r\n## Sponsor\r\n\r\n| | |\r\n|-|-|\r\n| [<img alt=\"Auth0 logo\" src=\"https://cdn.auth0.com/blog/github-sponsorships/brand-evolution-logo-Auth0-horizontal-Indigo.png\" height=\"91\">](https://a0.to/try-auth0) | If you want to quickly implement a secure authentication to your JWT project, [create an Auth0 account](https://a0.to/try-auth0); it's Free! |\r\n\r\n## Avaliable NuGet packages\r\n\r\n1.  Jwt.Net\r\n\r\n[![NuGet](https://img.shields.io/nuget/v/JWT.svg)](https://www.nuget.org/packages/JWT)\r\n[![NuGet Pre](https://img.shields.io/nuget/vpre/JWT.svg)](https://www.nuget.org/packages/JWT)\r\n\r\n2. Jwt.Net for Microsoft Dependency Injection container\r\n\r\n[![NuGet](https://img.shields.io/nuget/v/JWT.Extensions.DependencyInjection.svg)](https://www.nuget.org/packages/JWT.Extensions.DependencyInjection)\r\n[![NuGet Pre](https://img.shields.io/nuget/vpre/JWT.Extensions.DependencyInjection.svg)](https://www.nuget.org/packages/JWT.Extensions.DependencyInjection)\r\n\r\n3. Jwt.Net for ASP.NET Core\r\n\r\n[![NuGet](https://img.shields.io/nuget/v/JWT.Extensions.AspNetCore.svg)](https://www.nuget.org/packages/JWT.Extensions.AspNetCore)\r\n[![NuGet Pre](https://img.shields.io/nuget/vpre/JWT.Extensions.AspNetCore.svg)](https://www.nuget.org/packages/JWT.Extensions.AspNetCore)\r\n\r\n## Supported .NET versions:\r\n\r\n- .NET Framework 3.5\r\n- .NET Framework 4.0 - 4.8\r\n- .NET Standard 1.3, 2.0\r\n- .NET 6.0\r\n\r\n## Jwt.NET\r\n\r\n### Creating (encoding) token\r\n\r\n```c#\r\nvar payload = new Dictionary<string, object>\r\n{\r\n    { \"claim1\", 0 },\r\n    { \"claim2\", \"claim2-value\" }\r\n};\r\n\r\nIJwtAlgorithm algorithm = new RS256Algorithm(certificate);\r\nIJsonSerializer serializer = new JsonNetSerializer();\r\nIBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();\r\nIJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);\r\nconst string key = null; // not needed if algorithm is asymmetric\r\n\r\nvar token = encoder.Encode(payload, key);\r\nConsole.WriteLine(token);\r\n```\r\n\r\n#### Or using the fluent builder API\r\n\r\n```c#\r\nvar token = JwtBuilder.Create()\r\n                      .WithAlgorithm(new RS256Algorithm(certificate))\r\n                      .AddClaim(\"exp\", DateTimeOffset.UtcNow.AddHours(1).ToUnixTimeSeconds())\r\n                      .AddClaim(\"claim1\", 0)\r\n                      .AddClaim(\"claim2\", \"claim2-value\")\r\n                      .Encode();\r\nConsole.WriteLine(token);\r\n```\r\n### Parsing (decoding) and verifying token\r\n\r\n```c#\r\ntry\r\n{\r\n    IJsonSerializer serializer = new JsonNetSerializer();\r\n    IDateTimeProvider provider = new UtcDateTimeProvider();\r\n    IJwtValidator validator = new JwtValidator(serializer, provider);\r\n    IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();\r\n    IJwtAlgorithm algorithm = new RS256Algorithm(certificate);\r\n    IJwtDecoder decoder = new JwtDecoder(serializer, validator, urlEncoder, algorithm);\r\n    \r\n    var json = decoder.Decode(token);\r\n    Console.WriteLine(json);\r\n}\r\ncatch (TokenNotYetValidException)\r\n{\r\n    Console.WriteLine(\"Token is not valid yet\");\r\n}\r\ncatch (TokenExpiredException)\r\n{\r\n    Console.WriteLine(\"Token has expired\");\r\n}\r\ncatch (SignatureVerificationException)\r\n{\r\n    Console.WriteLine(\"Token has invalid signature\");\r\n}\r\n```\r\n\r\n#### Or using the fluent builder API\r\n\r\n```c#\r\nvar json = JwtBuilder.Create()\r\n                     .WithAlgorithm(new RS256Algorithm(certificate))\r\n                     .MustVerifySignature()\r\n                     .Decode(token);                    \r\nConsole.WriteLine(json);\r\n```\r\n\r\nThe output would be:\r\n\r\n>{ \"claim1\": 0, \"claim2\": \"claim2-value\" }\r\n\r\nYou can also deserialize the JSON payload directly to a .NET type:\r\n\r\n```c#\r\nvar payload = decoder.DecodeToObject<IDictionary<string, object>>(token, secret);\r\n```\r\n\r\n#### Or using the fluent builder API\r\n\r\n```c#\r\nvar payload = JwtBuilder.Create()\r\n                        .WithAlgorithm(new RS256Algorithm(certificate))\r\n                        .WithSecret(secret)\r\n                        .MustVerifySignature()\r\n                        .Decode<IDictionary<string, object>>(token);     \r\n```\r\n\r\n### Validate token expiration\r\n\r\nAs described in the [RFC 7519 section 4.1.4](https://tools.ietf.org/html/rfc7519#section-4.1.4):\r\n\r\n>The `exp` claim identifies the expiration time on or after which the JWT MUST NOT be accepted for processing.\r\n\r\nIf it is present in the payload and is past the current time, the token will fail verification. The value must be specified as the number of seconds since the [Unix epoch](https://en.wikipedia.org/wiki/Unix_time), 1/1/1970 00:00:00 UTC.\r\n\r\n```c#\r\nIDateTimeProvider provider = new UtcDateTimeProvider();\r\nvar now = provider.GetNow().AddMinutes(-5); // token has expired 5 minutes ago\r\n\r\ndouble secondsSinceEpoch = UnixEpoch.GetSecondsSince(now);\r\n\r\nvar payload = new Dictionary<string, object>\r\n{\r\n    { \"exp\", secondsSinceEpoch }\r\n};\r\nvar token = encoder.Encode(payload);\r\n\r\ndecoder.Decode(token); // throws TokenExpiredException\r\n```\r\n\r\nThen, as described in the [RFC 7519 section 4.1.5](https://tools.ietf.org/html/rfc7519#section-4.1.5):\r\n\r\n>The \"nbf\" (not before) claim identifies the time before which the JWT MUST NOT be accepted for processing\r\n\r\nIf it is present in the payload and is prior to the current time, the token will fail verification.\r\n\r\n### Parsing (decoding) token header\r\n\r\n```c#\r\nIJsonSerializer serializer = new JsonNetSerializer();\r\nIBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();\r\nIJwtDecoder decoder = new JwtDecoder(serializer, urlEncoder);\r\n\r\nJwtHeader header = decoder.DecodeHeader<JwtHeader>(token);\r\n\r\nvar typ = header.Type; // JWT\r\nvar alg = header.Algorithm; // RS256\r\nvar kid = header.KeyId; // CFAEAE2D650A6CA9862575DE54371EA980643849\r\n```\r\n\r\n#### Or using the fluent builder API\r\n\r\n```c#\r\nJwtHeader header = JwtBuilder.Create()\r\n                             .DecodeHeader<JwtHeader>(token);\r\n\r\nvar typ = header.Type; // JWT\r\nvar alg = header.Algorithm; // RS256\r\nvar kid = header.KeyId; // CFAEAE2D650A6CA9862575DE54371EA980643849\r\n```\r\n\r\n### Turning off parts of token validation\r\n\r\nIf you'd like to validate a token but ignore certain parts of the validation (such as whether to the token has expired or not valid yet), you can pass a `ValidateParameters` object to the constructor of the `JwtValidator` class.\r\n\r\n```c#\r\nvar validationParameters = new ValidationParameters\r\n{\r\n    ValidateSignature = true,\r\n    ValidateExpirationTime = false,\r\n    ValidateIssuedTime = false,\r\n    TimeMargin = 100\r\n};\r\nIJwtValidator validator = new JwtValidator(serializer, provider, validationParameters);\r\nIJwtDecoder decoder = new JwtDecoder(serializer, validator, urlEncoder, algorithm);\r\nvar json = decoder.Decode(expiredToken); // will not throw because of expired token\r\n```\r\n\r\n#### Or using the fluent builder API\r\n\r\n```c#\r\nvar json = JwtBuilder.Create()\r\n                     .WithAlgorithm(new RS256Algorirhm(certificate))\r\n                     .WithSecret(secret)\r\n                     .WithValidationParameters(\r\n                         new ValidationParameters\r\n                         {\r\n                             ValidateSignature = true,\r\n                             ValidateExpirationTime = false,\r\n                             ValidateIssuedTime = false,\r\n                             TimeMargin = 100\r\n                         })\r\n                     .Decode(expiredToken);\r\n```\r\n\r\n### Custom JSON serializer\r\n\r\nBy default JSON serialization is performed by JsonNetSerializer implemented using [Json.Net](https://www.json.net). To use a different one, implement the `IJsonSerializer` interface:\r\n\r\n```c#\r\npublic sealed class CustomJsonSerializer : IJsonSerializer\r\n{\r\n    public string Serialize(object obj)\r\n    {\r\n        // Implement using favorite JSON serializer\r\n    }\r\n\r\n    public T Deserialize<T>(string json)\r\n    {\r\n        // Implement using favorite JSON serializer\r\n    }\r\n}\r\n```\r\n\r\nAnd then pass this serializer to JwtEncoder constructor:\r\n\r\n```c#\r\nIJwtAlgorithm algorithm = new RS256Algorirhm(certificate);\r\nIJsonSerializer serializer = new CustomJsonSerializer();\r\nIBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();\r\nIJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);\r\n```\r\n\r\n### Custom JSON serialization settings with the default JsonNetSerializer\r\n\r\nAs mentioned above, the default JSON serialization is done by `JsonNetSerializer`. You can define your own custom serialization settings as follows:\r\n\r\n```c#\r\nJsonSerializer customJsonSerializer = new JsonSerializer\r\n{\r\n    // All keys start with lowercase characters instead of the exact casing of the model/property, e.g. fullName\r\n    ContractResolver = new CamelCasePropertyNamesContractResolver(), \r\n    \r\n    // Nice and easy to read, but you can also use Formatting.None to reduce the payload size\r\n    Formatting = Formatting.Indented,\r\n    \r\n    // The most appropriate datetime format.\r\n    DateFormatHandling = DateFormatHandling.IsoDateFormat,\r\n    \r\n    // Don't add keys/values when the value is null.\r\n    NullValueHandling = NullValueHandling.Ignore,\r\n    \r\n    // Use the enum string value, not the implicit int value, e.g. \"red\" for enum Color { Red }\r\n    Converters.Add(new StringEnumConverter())\r\n};\r\nIJsonSerializer serializer = new JsonNetSerializer(customJsonSerializer);\r\n```\r\n\r\n## Jwt.Net ASP.NET Core\r\n\r\n### Register authentication handler to validate JWT\r\n\r\n```c#\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n    services.AddAuthentication(options =>\r\n                 {\r\n                     options.DefaultAuthenticateScheme = JwtAuthenticationDefaults.AuthenticationScheme;\r\n                     options.DefaultChallengeScheme = JwtAuthenticationDefaults.AuthenticationScheme;\r\n                 })\r\n            .AddJwt(options =>\r\n                 {\r\n                     // secrets, required only for symmetric algorithms, such as HMACSHA256Algorithm\r\n                     // options.Keys = new[] { \"mySecret\" };\r\n                     \r\n                     // optionally; disable throwing an exception if JWT signature is invalid\r\n                     // options.VerifySignature = false;\r\n                 });\r\n  // the non-generic version AddJwt() requires registering an instance of IAlgorithmFactory manually\r\n  services.AddSingleton<IAlgorithmFactory>(new RSAlgorithmFactory(certificate));\r\n  // or\r\n  services.AddSingleton<IAlgorithmFactory>(new DelegateAlgorithmFactory(algorithm));\r\n\r\n  // or use the generic version AddJwt<TFactory() to use a custom implementation of IAlgorithmFactory\r\n  .AddJwt<MyCustomAlgorithmFactory>(options => ...);\r\n}\r\n\r\npublic void Configure(IApplicationBuilder app)\r\n{\r\n    app.UseAuthentication();\r\n}\r\n```\r\n\r\n### Custom factories to produce Identity or AuthenticationTicket\r\n\r\n```c#\r\nservices.AddSingleton<IIdentityFactory, CustomIdentityFctory>();\r\nservices.AddSingleton<ITicketFactory, CustomTicketFactory>();\r\n```\r\n\r\n## License\r\n\r\nThe following projects and their resulting packages are licensed under Public Domain, see the [LICENSE#Public-Domain](LICENSE.md#Public-Domain) file.\r\n\r\n- JWT \r\n\r\nThe following projects and their resulting packages are licensed under the MIT License, see the [LICENSE#MIT](LICENSE.md#MIT) file.\r\n\r\n- JWT.Extensions.AspNetCore\r\n- JWT.Extensions.DependencyInjection\r\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}