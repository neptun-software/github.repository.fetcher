{
  "metadata": {
    "timestamp": 1736710848021,
    "page": 378,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "OpenLiveWriter/OpenLiveWriter",
      "stars": 2459,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.369140625,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# Custom for Visual Studio\n*.cs     diff=csharp\n\n# Standard to msysgit\n*.doc\t diff=astextplain\n*.DOC\t diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot  diff=astextplain\n*.DOT  diff=astextplain\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.0634765625,
          "content": "## Ignore automatically generated files.\nsrc/managed/GlobalAssemblyVersionInfo.cs\nsrc/unmanaged/version.h\nsrc/managed/OpenLiveWriter.BlogClient/Clients/GoogleBloggerv3Secrets.json\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Visual Studo 2015 cache/options directory\n.vs/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding addin-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings \n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\n*.[Cc]ache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\nbower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n#Visual Studio specific files\n*.VC.opendb\n*.VC.db"
        },
        {
          "name": "AppxManifest.xml",
          "type": "blob",
          "size": 2.287109375,
          "content": "ï»¿<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Package xmlns=\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\" \r\nxmlns:uap=\"http://schemas.microsoft.com/appx/manifest/uap/windows10\" \r\nxmlns:uap2=\"http://schemas.microsoft.com/appx/manifest/uap/windows10/2\" \r\nxmlns:uap3=\"http://schemas.microsoft.com/appx/manifest/uap/windows10/3\" \r\nxmlns:rescap=\"http://schemas.microsoft.com/appx/manifest/foundation/windows10/restrictedcapabilities\" \r\nxmlns:desktop=\"http://schemas.microsoft.com/appx/manifest/desktop/windows10\"\r\nIgnorableNamespaces=\"uap uap2 uap3 mp rescap desktop\">\r\n  <Identity Name=\"D5BA6BCD.OpenLiveWriter\" ProcessorArchitecture=\"x86\" Publisher=\"CN=59FB1262-434E-4693-9A1E-CD275B151706\" Version=\"0.6.1.0\" />\r\n  <Properties>\r\n    <DisplayName>Open Live Writer</DisplayName>\r\n    <PublisherDisplayName>.NET Foundation</PublisherDisplayName>\r\n    <Logo>Assets\\Writer50x50.png</Logo>\r\n  </Properties>\r\n  <Resources>\r\n    <Resource Language=\"en-us\" />\r\n  </Resources>\r\n  <Dependencies>\r\n    <TargetDeviceFamily Name=\"Windows.Desktop\" MinVersion=\"10.0.14393.0\" MaxVersionTested=\"10.0.14393.0\" />\r\n  </Dependencies>\r\n  <Capabilities>\r\n    <rescap:Capability Name=\"runFullTrust\" />\r\n  </Capabilities>\r\n  <Applications>\r\n    <Application Id=\"OpenLiveWriter\" Executable=\"VFS\\Users\\ContainerAdministrator\\AppData\\Local\\OpenLiveWriter\\app-0.6.1.0\\OpenLiveWriter.exe\" EntryPoint=\"Windows.FullTrustApplication\">\r\n      <uap:VisualElements DisplayName=\"Open Live Writer\" Description=\"Open Live Writer\" BackgroundColor=\"#a25da2\" Square150x150Logo=\"Assets\\Writer150x150.png\" Square44x44Logo=\"Assets\\Writer44x44.png\">\r\n        <uap:DefaultTile>\r\n          <uap:ShowNameOnTiles>\r\n            <uap:ShowOn Tile=\"square150x150Logo\" />\r\n          </uap:ShowNameOnTiles>\r\n        </uap:DefaultTile>\r\n      </uap:VisualElements>\r\n      <Extensions>\r\n\t\t<uap3:Extension Category=\"windows.fileTypeAssociation\">\r\n\t\t\t<uap3:FileTypeAssociation Name=\"openLiveWriter\" Parameters=\"&quot;%1&quot;\">\r\n\t\t\t\t<uap:SupportedFileTypes>\r\n\t\t\t\t\t<uap:FileType>.wpost</uap:FileType>\t\t\t\t\t\r\n\t\t\t\t</uap:SupportedFileTypes>\r\n\t\t\t\t<uap2:SupportedVerbs>\r\n\t\t\t\t\t<uap3:Verb Id=\"Edit\" Parameters=\"&quot;%1&quot;\">Edit</uap3:Verb>\r\n\t\t\t\t</uap2:SupportedVerbs>\r\n\t\t\t</uap3:FileTypeAssociation>\t\t\t\r\n\t\t</uap3:Extension>\r\n\t  </Extensions>\r\n    </Application>\r\n  </Applications>\r\n</Package>"
        },
        {
          "name": "BuildNuget.cmd",
          "type": "blob",
          "size": 0.0791015625,
          "content": "%LocalAppData%\\NuGet\\NuGet.exe pack OpenLiveWriter.SDK.nuspec -OutputDirectory .\\"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.3896484375,
          "content": "# Contributing to Open Live Writer\nOpen Live Writer is an open source project and wouldn't exist without the passionate community of volunteer\n[contributors](https://github.com/OpenLiveWriter/OpenLiveWriter/graphs/contributors).\nThis project has adopted the code of conduct defined by the [Contributor Covenant](http://contributor-covenant.org/)\nto clarify expected behavior in our community. \nFor more information see the [.NET Foundation Code of Conduct](http://www.dotnetfoundation.org/code-of-conduct).\n\n## Issues\nIf you have found a bug or have an idea for a new feature / enhancement then please take\na look at the Issues. You can search the Issues to see if someone has a similar problem\nor idea by using the Filter box. If your issue is a new one then please create it.\n\nWhen creating issues, please provide as much information as possible.  The following \ninformation is recommended:\n\n - Type of blog server you are using Live Writer with (i.e. Blogger, Wordpress etc) or\n   the URL of the blog you are trying to post to.\n   \n - The operating system version you are running on (i.e. Windows 10, Windows 8.1, Windows 7)\n \n - Detailed steps to be able to reproduce the error that you found\n \n - Any details of the error that you saw, screen shots of error dialogs are great. You can get\n   access to your Open Live Writer logs by going to File, About Open Live Writer, Show log file.\n   If you can see an error message that looks to be related to your issue then please include\n   details of that as well.\n\n## Documentation\nThere are three main types of documentation for Open Live Writer and we'd love your help with\nall of them.\n 1. End user documentation: Showing how to get the best out of Open Live Writer. End user\n    documentation is best provided on the http://openlivewriter.org site, and the source\n    code for it is over in the [OpenLiveWriter.github.io](https://github.com/OpenLiveWriter/OpenLiveWriter.Github.io) repo.\n 2. Plugin Developer documentation: Details and examples about how to write plugins for \n    Open Live Writer.\n 3. Developer documentation: Showing how to build, test and submit new bug fixes or features to\n    Open Live Writer.\n\nIf you would like to contribute to the documentation then please send a Pull Request with your changes\nusing the instructions below. \n \n## Developers\nWe would love your contributions to making Open Live Writer better. To find more information\nabout developing Open Live Writer then please see the links below:\n\n* [Building, testing and debugging the sources](https://github.com/OpenLiveWriter/OpenLiveWriter/wiki/Building,-Testing,-and-Debugging)\n\nTo contribute code to the project simply:\n  1. Fork the repo and clone locally\n  2. Create a specific topic branch, add a nice feature or fix your bug\n  3. Send a Pull Request to spread the fun!\n\nIf you haven't already, please sign the [.NET Foundation CLA](http://cla2.dotnetfoundation.org) to give us \npermission to include your contributions in the next release of Open Live Writer.\n\nIf you would like to discuss a change you are thinking of doing before you start work on it then feel free to raise an\nissue. The developers for Open Live Writer [chat on Gitter](https://gitter.im/OpenLiveWriter/OpenLiveWriter?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge) when they are online \n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/OpenLiveWriter/OpenLiveWriter?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n"
        },
        {
          "name": "NuGet.config",
          "type": "blob",
          "size": 0.1640625,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <add key=\"NuGet\" value=\"https://nuget.org/api/v2/\" />\n  </packageSources>\n</configuration>"
        },
        {
          "name": "OpenLiveWriter.Install.nuspec",
          "type": "blob",
          "size": 1.5400390625,
          "content": "ï»¿<?xml version=\"1.0\"?>\n<package xmlns=\"http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd\">\n  <metadata>\n    <id>openlivewriter</id>\n    <version>0.5.0.0</version>\n    <title>OpenLiveWriter (Install)</title>\n    <authors>See list of authors at http://openlivewriter.org/</authors>\n    <owners>Darwin Sanoy, OpenLiveWriter</owners>\n    <licenseUrl>https://github.com/OpenLiveWriter/OpenLiveWriter/blob/master/license.txt</licenseUrl>\n    <projectUrl>http://openlivewriter.org/</projectUrl>\n    <iconUrl>https://cdn.rawgit.com/csi-windowschocolatey/openlivewriter/master/app.png</iconUrl>\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\n    <description>Open Live Writer is an open source application enabling users to author, edit, and publish blog posts.\n      It is based on a fork of the well-loved but not actively developed Windows Live Writer code.</description>\n    <summary>Open Live Writer makes it easy to write, preview, and post to your blog.</summary>\n    <copyright>.NET Foundation</copyright>\n    <tags>Blog WindowsLiveWriter OpenLiveWriter</tags>\n    <releaseNotes>https://github.com/OpenLiveWriter/OpenLiveWriter/releases</releaseNotes>\n    <!--<projectSourceUrl>https://github.com/OpenLiveWriter</projectSourceUrl>-->\n  </metadata>\n  <files>\n    <file src=\"OpenLiveWriterSetup.exe\" target=\"tools\" />\n    <file src=\"..\\choco\\chocolateyInstall.ps1\" target=\"tools\"/>\n    <file src=\"..\\choco\\chocolateyUninstall.ps1\" target=\"tools\"/>\n    <file src=\"..\\choco\\VERIFICATION.TXT\" />\n    <file src=\"..\\choco\\LICENSE.TXT\" />\n  </files>\n</package>"
        },
        {
          "name": "OpenLiveWriter.SDK.nuspec",
          "type": "blob",
          "size": 1.1640625,
          "content": "ï»¿<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<package xmlns=\"http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd\">\n    <metadata>\n        <id>OpenLiveWriter.SDK</id>\n        <version>0.5.0-beta</version>\n        <authors>Open Live Writer</authors>\n        <owners>OpenLiveWriter</owners>\n        <licenseUrl>https://github.com/OpenLiveWriter/OpenLiveWriter/blob/master/license.txt?raw=true</licenseUrl>\n        <projectUrl>http://openlivewriter.org</projectUrl>\n        <iconUrl>http://openlivewriter.github.io/favicon.ico</iconUrl>\n        <requireLicenseAcceptance>true</requireLicenseAcceptance>\n        <description>The SDK required to create plug-ins for Open Live Writer.</description>\n        <copyright>(c) .NET  Foundation</copyright>\n        <frameworkAssemblies>\n            <frameworkAssembly assemblyName=\"System.Windows.Forms\" targetFramework=\".NETFramework4.6.1\" />\n            <frameworkAssembly assemblyName=\"System.Drawing\" targetFramework=\".NETFramework4.6.1\" />\n        </frameworkAssemblies>\n    </metadata>\n    <files>\n        <file src=\"src\\managed\\bin\\Release\\i386\\Writer\\OpenLiveWriter.Api.dll\" target=\"lib\\net461\\OpenLiveWriter.Api.dll\" />\n    </files>\n</package>"
        },
        {
          "name": "OpenLiveWriter.nuspec",
          "type": "blob",
          "size": 5.7099609375,
          "content": "ï»¿<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<package xmlns=\"http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd\">\n    <metadata>\n        <id>OpenLiveWriter</id>\n        <version>0.0.0.0</version>\n        <authors>Open Live Writer</authors>\n        <licenseUrl>https://github.com/OpenLiveWriter/OpenLiveWriter/blob/master/license.txt?raw=true</licenseUrl>\n        <iconUrl>http://openlivewriter.github.io/favicon.ico</iconUrl>\n        <requireLicenseAcceptance>true</requireLicenseAcceptance>\n        <description>Open Live Writer</description>\n        <summary>Open Live Writer makes it easy to write, preview and post to your blog.</summary>\n    </metadata>\n    <files>\n        <file src=\"DeltaCompressionDotNet.dll\" target=\"lib\\net451\\DeltaCompressionDotNet.dll\" />\n        <file src=\"DeltaCompressionDotNet.MsDelta.dll\" target=\"lib\\net451\\DeltaCompressionDotNet.MsDelta.dll\" />\n        <file src=\"DeltaCompressionDotNet.PatchApi.dll\" target=\"lib\\net451\\DeltaCompressionDotNet.PatchApi.dll\" />\n        <file src=\"Google.Apis.dll\" target=\"lib\\net451\\Google.Apis.dll\" />\n        <file src=\"Google.Apis.Auth.dll\" target=\"lib\\net451\\Google.Apis.Auth.dll\" />\n        <file src=\"Google.Apis.Auth.PlatformServices.dll\" target=\"lib\\net451\\Google.Apis.Auth.PlatformServices.dll\" />\n        <file src=\"Google.Apis.Blogger.v3.dll\" target=\"lib\\net451\\Google.Apis.Blogger.v3.dll\" />\n        <file src=\"Google.Apis.Drive.v3.dll\" target=\"lib\\net451\\Google.Apis.Drive.v3.dll\" />\n        <file src=\"Google.Apis.Core.dll\" target=\"lib\\net451\\Google.Apis.Core.dll\" />\n        <file src=\"Google.Apis.PlatformServices.dll\" target=\"lib\\net451\\Google.Apis.PlatformServices.dll\" />\n        <file src=\"html\\map.html\" target=\"lib\\net451\\html\\map.html\" />\n        <file src=\"html\\map-preview.html\" target=\"lib\\net451\\html\\map-preview.html\" />\n        <file src=\"ICSharpCode.SharpZipLib.dll\" target=\"lib\\net451\\ICSharpCode.SharpZipLib.dll\" />\n        <file src=\"Microsoft.Threading.Tasks.dll\" target=\"lib\\net451\\Microsoft.Threading.Tasks.dll\" />\n        <file src=\"Microsoft.Threading.Tasks.Extensions.dll\" target=\"lib\\net451\\Microsoft.Threading.Tasks.Extensions.dll\" />\n        <file src=\"Microsoft.Threading.Tasks.Extensions.Desktop.dll\" target=\"lib\\net451\\Microsoft.Threading.Tasks.Extensions.Desktop.dll\" />\n        <file src=\"Mono.Cecil.dll\" target=\"lib\\net451\\Mono.Cecil.dll\" />\n        <file src=\"Mono.Cecil.Mdb.dll\" target=\"lib\\net451\\Mono.Cecil.Mdb.dll\" />\n        <file src=\"Mono.Cecil.Pdb.dll\" target=\"lib\\net451\\Mono.Cecil.Pdb.dll\" />\n        <file src=\"Mono.Cecil.Rocks.dll\" target=\"lib\\net451\\Mono.Cecil.Rocks.dll\" />\n        <file src=\"Newtonsoft.Json.dll\" target=\"lib\\net451\\Newtonsoft.Json.dll\" />\n        <file src=\"NuGet.Squirrel.dll\" target=\"lib\\net451\\NuGet.Squirrel.dll\" />\n        <file src=\"OpenLiveWriter.Api.dll\" target=\"lib\\net451\\OpenLiveWriter.Api.dll\" />\n        <file src=\"OpenLiveWriter.ApplicationFramework.dll\" target=\"lib\\net451\\OpenLiveWriter.ApplicationFramework.dll\" />\n        <file src=\"OpenLiveWriter.BlogClient.dll\" target=\"lib\\net451\\OpenLiveWriter.BlogClient.dll\" />\n        <file src=\"OpenLiveWriter.BrowserControl.dll\" target=\"lib\\net451\\OpenLiveWriter.BrowserControl.dll\" />\n        <file src=\"OpenLiveWriter.Controls.dll\" target=\"lib\\net451\\OpenLiveWriter.Controls.dll\" />\n        <file src=\"OpenLiveWriter.CoreServices.dll\" target=\"lib\\net451\\OpenLiveWriter.CoreServices.dll\" />\n        <file src=\"OpenLiveWriter.exe\" target=\"lib\\net451\\OpenLiveWriter.exe\" />\n        <file src=\"OpenLiveWriter.exe.config\" target=\"lib\\net451\\OpenLiveWriter.exe.config\" />\n        <file src=\"OpenLiveWriter.exe.manifest\" target=\"lib\\net451\\OpenLiveWriter.exe.manifest\" />\n        <file src=\"OpenLiveWriter.Extensibility.dll\" target=\"lib\\net451\\OpenLiveWriter.Extensibility.dll\" />\n        <file src=\"OpenLiveWriter.FileDestinations.dll\" target=\"lib\\net451\\OpenLiveWriter.FileDestinations.dll\" />\n        <file src=\"OpenLiveWriter.HtmlEditor.dll\" target=\"lib\\net451\\OpenLiveWriter.HtmlEditor.dll\" />\n        <file src=\"OpenLiveWriter.HtmlParser.dll\" target=\"lib\\net451\\OpenLiveWriter.HtmlParser.dll\" />\n        <file src=\"OpenLiveWriter.InternalWriterPlugin.dll\" target=\"lib\\net451\\OpenLiveWriter.InternalWriterPlugin.dll\" />\n        <file src=\"OpenLiveWriter.Interop.dll\" target=\"lib\\net451\\OpenLiveWriter.Interop.dll\" />\n        <file src=\"OpenLiveWriter.Interop.Mshtml.dll\" target=\"lib\\net451\\OpenLiveWriter.Interop.Mshtml.dll\" />\n        <file src=\"OpenLiveWriter.Interop.SHDocVw.dll\" target=\"lib\\net451\\OpenLiveWriter.Interop.SHDocVw.dll\" />\n        <file src=\"OpenLiveWriter.Localization.dll\" target=\"lib\\net451\\OpenLiveWriter.Localization.dll\" />\n        <file src=\"OpenLiveWriter.Mshtml.dll\" target=\"lib\\net451\\OpenLiveWriter.Mshtml.dll\" />\n        <file src=\"OpenLiveWriter.PostEditor.dll\" target=\"lib\\net451\\OpenLiveWriter.PostEditor.dll\" />\n        <file src=\"OpenLiveWriter.Ribbon.dll\" target=\"lib\\net451\\OpenLiveWriter.Ribbon.dll\" />\n        <file src=\"OpenLiveWriter.SpellChecker.dll\" target=\"lib\\net451\\OpenLiveWriter.SpellChecker.dll\" />\n        <file src=\"PlatformSpellCheck.dll\" target=\"lib\\net451\\PlatformSpellCheck.dll\" />\n        <file src=\"Splat.dll\" target=\"lib\\net451\\Splat.dll\" />\n        <file src=\"Squirrel.dll\" target=\"lib\\net451\\Squirrel.dll\" />\n        <file src=\"System.Net.Http.Extensions.dll\" target=\"lib\\net451\\System.Net.Http.Extensions.dll\" />\n        <file src=\"System.Net.Http.Primitives.dll\" target=\"lib\\net451\\System.Net.Http.Primitives.dll\" />\n        <file src=\"template\\default.htm\" target=\"lib\\net451\\template\\default.htm\" />\n        <file src=\"template\\defaultstyle.css\" target=\"lib\\net451\\template\\defaultstyle.css\" />\n        <file src=\"YamlDotNet.dll\" target=\"lib\\net451\\YamlDotNet.dll\" />\n        <file src=\"Zlib.Portable.dll\" target=\"lib\\net451\\Zlib.Portable.dll\" />\n    </files>\n</package>"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.185546875,
          "content": "# Open Live Writer\nOpen Live Writer makes it easy to write, preview, and post to your blog.\nFor more information see http://www.OpenLiveWriter.com/.\n\n[![Build status](https://ci.appveyor.com/api/projects/status/8xpga2y53sgwo24g?svg=true)](https://ci.appveyor.com/project/dotnetfoundation/openlivewriter)\n\n### Installation\nYou can install the latest version of Open Live Writer alongside an [older version of Windows Live Writer](http://windows.microsoft.com/en-us/windows-live/essentials). Visit\nhttp://www.OpenLiveWriter.com to download and install the latest release.\n\n### Latest News\nThe current version of Open Live Writer is our first open source version.\nFor a [list of known issues see GitHub](https://github.com/OpenLiveWriter/OpenLiveWriter/issues) or take a\nlook at the [roadmap](roadmap.md) to see what the current plans are.\n\nFor the latest news and updates about Open Live Writer, you can follow us on Twitter \n([@OpenLiveWriter](https://twitter.com/OpenLiveWriter)), by keeping an eye on the website\n http://www.OpenLiveWriter.com or by watching this repo and subscribing to notifications.\n\n### Contributing\nOpen Live Writer is an open source project and wouldn't exist without the passionate community of volunteer\n[contributors](https://github.com/OpenLiveWriter/OpenLiveWriter/graphs/contributors).\nIf you would like to help out then please see the [Contributing](CONTRIBUTING.md) guide.\n\nThis project has adopted the code of conduct defined by the [Contributor Covenant](http://contributor-covenant.org/)\nto clarify expected behavior in our community.\nFor more information see the [.NET Foundation Code of Conduct](http://www.dotnetfoundation.org/code-of-conduct).\n\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/OpenLiveWriter/OpenLiveWriter?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\n### License\nOpen Live Writer proudly uses the [MIT License](license.txt).\n\n### History\nThe product that became Live Writer was originally created by a small, super-talented team of engineers including \nJJ Allaire, Joe Cheng, Charles Teague, and Spike Washburn. The team was acquired by Microsoft \nin 2006 and organized with the Spaces team. Becky Pezely joined the team and over time, the team grew and shipped\nmany popular releases of Windows Live Writer.\n\nAs Microsoft was planning for the version of Windows Live that would coincide with Windows 8 operating system\nrelease, the teams that built the Windows Live client apps for Windows were encouraged to focus on building a \nsmaller set of Windows 8 apps designed to work well with both traditional PC input mechanisms and touch. \nWith the rise of micro-blogging platforms and other forms of sharing, eventually this team decided to conclude\ntheir work on Windows Live Writer with Windows Live Writer 2012.\n\nEven though there was no active development, Windows Live Writer continued to be a favorite tool of a passionate\ncommunity of Windows PC users for authoring, editing, and publishing blog posts. Data from WordPress.com at the \ntime suggested that Windows Live Writer (even two years after active development ended) was the #1 app for authoring\na blog post to WordPress.com from a Windows PC. \n\nA few employees at Microsoft took an interest in reviving Live Writer as an open source project in their\nspare time.  By January 2015, a group of about a half-dozen engineers interested in spending some of their\nvolunteer time to help release an updated version of Live Writer had found each other and began work on getting\nthis open source fork of Live Writer formed and ready to ship. In December 2015 Microsoft donated the code\nto the .NET Foundation and this passionate group of volunteer engineers rapidly assembled the first open source\nversion.\n\n### Building\nOpen Live Writer can be built by running build.cmd found in this directory.   \nIt can be opened in Visual Studio.  The solution is in src/managed/writer.sln -- if you see errors in Visual Studio run build.cmd from the command prompt and it should be resolved.\nThe main program is src/managed/OpenLiveWriter/ApplicationMain.cs .\nTo run from Visual Studio, set the startup project to OpenLiveWriter.\n\n### .NET Foundation\n\nThe Open Live Writer project is supported by the [.NET Foundation](http://www.dotnetfoundation.org).\n"
        },
        {
          "name": "SignClient",
          "type": "tree",
          "content": null
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.1025390625,
          "content": "version: 0.6.2.{build}\npull_requests:\n  do_not_increment_build_number: true\nbranches:\n  only:\n  - master\nimage: Visual Studio 2017\nenvironment:\n  OLW_CONFIG: Release\n  OlwBloggerClientId: 597389294595-271ukaucs8ghmc6c6cnhrbef2c02g5qa.apps.googleusercontent.com\n  OlwBloggerClientSecret:\n    secure: ym7cbPINJz58iEgVlQCDbRz2W1CTYnxWsvMpMvxHFY4=\n  SignClientSecret:\n    secure: Ks35w5ZOk78Bla9953hrhvDm2+t2NY83VgI+IcW92L0=\n  SignClientUser:\n    secure: v2LT5VnPWsq3/aLDN0xsyNjdwCZutUSH8CS/htCB8yXbzmwWrQIWs7TvJdrFqZB+\nnuget:\n  disable_publish_on_pr: true\nbuild_script:\n  - cmd: rmdir C:\\Tools\\vcpkg /q /s \n  - cmd: ./build.cmd\ntest: off\ninstall:\n  - cmd: nuget install SignClient -Version 0.9.0 -SolutionDir %APPVEYOR_BUILD_FOLDER% -Verbosity quiet -ExcludeVersion\nafter_build:\n  - ps: '.\\SignClient\\Sign-Package.ps1'  \nartifacts:\n- path: releases\\*\n  name: Setup\ndeploy:\n- provider: AzureBlob\n  storage_account_name: olw\n  storage_access_key:\n    secure: GruVAC0VrJlbCP3AYz5XownU5bxltZBuGinJ9KwdedM12B07msVLwLYWAsWfWA8Cq6xxt3QN2tKMsDnkzSxSenYFBHZEkGXwRdmh9K/a9jReoNUeQukP/RXRqsS0otFh\n  container: nightly\n  on:\n    branch: master\n"
        },
        {
          "name": "build.cmd",
          "type": "blob",
          "size": 0.021484375,
          "content": "powershell .\\build.ps1"
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 2.84765625,
          "content": "# Cause powershell to fail on errors rather than keep going\n$ErrorActionPreference = \"Stop\";\n\n@\"\n\n=======================================================\n Checking solution exists\n=======================================================\n\"@\n\n$solutionFile = \"$PSSCRIPTROOT\\src\\managed\\writer.sln\"\nif (-Not (Test-Path \"$solutionFile\" -PathType Leaf))\n{\n\t\"Unable to find solution file at $solutionFile\"\n\texit 100\n}\n\"Solution found at '$solutionFile'\"\n\n@\"\n\n=======================================================\n Fetching MSBuild location\n=======================================================\n\"@\n\n# Install module to allow us to find MSBuild\n# See https://github.com/Microsoft/vssetup.powershell\nInstall-Module VSSetup -Scope CurrentUser\n\n$visualStudioLocation = (Get-VSSetupInstance `\n  | Select-VSSetupInstance -Version '[15.0,16.0)' -Latest).InstallationPath\n\n$msBuildExe = $visualStudioLocation + \"\\MSBuild\\15.0\\Bin\\msbuild.exe\"\nIF (-Not (Test-Path -LiteralPath \"$msBuildExe\" -PathType Leaf))\n{\n\t\"MSBuild not found at '$msBuildExe'\"\n\t\"In order to build OpenLiveWriter either Visual Studio 2017 (any edition) or Build \"\n\t\"Tools for Visual Studio 2017 must be installed.\"\n\t\"These can be downloadd from https://visualstudio.microsoft.com/downloads/\"\n\texit 101\n}\n\n\"MSBuild.exe found at: '$msBuildExe'\"\n\n@\"\n\n=======================================================\n Ensureing nuget.exe exists\n=======================================================\n\"@\n\n$nugetPath = \"$env:LocalAppData\\NuGet\"\n$nugetExe = \"$nugetPath\\NuGet.exe\"\nif (-Not (Test-Path -LiteralPath \"$nugetExe\" -PathType Leaf))\n{\n\tif (-Not (Test-Path -LiteralPath \"$nugetPath\" -PathType Container))\n\t{\n\t\t\"Creating Directory '$nugetPath'\"\n\t\tNew-Item \"$nugetPath\" -Type Directory\n\t}\n\t\"Downloading nuget.exe\"\n\tInvoke-WebRequest 'https://dist.nuget.org/win-x86-commandline/latest/nuget.exe' -OutFile \"$nugetExe\"\n}\n\n\"Nuget.exe found at: '$nugetExe'\"\n\n@\"\n\n=======================================================\n Ensure nuget packages exist\n=======================================================\n\"@\n\n$packageFolder = \"$PSSCRIPTROOT\\src\\managed\\packages\"\nif (Test-Path -LiteralPath $packageFolder)\n{\n    \"Packages found at '$packageFolder'\"\n}\nelse\n{\n\t\"Running nuget restore\"\n\t& $nugetExe restore $solutionFile\n}\n\n@\"\n\n=======================================================\n Check build type\n=======================================================\n\"@\n\nif (-Not (Test-Path env:OLW_CONFIG))\n{\n    \"Environment variable OWL_CONFIG not set, setting to 'Debug'\"\n\t$env:OLW_CONFIG = 'Debug'\n}\n\n\"Using build '$env:OLW_CONFIG'\"\n\n@\"\n\n=======================================================\n Starting build\n=======================================================\n\"@\nGet-Date\n$buildCommand = \"`\"$msBuildExe`\" $solutionFile /nologo /maxcpucount /verbosity:minimal /p:Configuration=$env:OLW_CONFIG $ARGS\"\n\"Running build command '$buildCommand'\"\nInvoke-Expression \"& $buildCommand\""
        },
        {
          "name": "buildstrings.cmd",
          "type": "blob",
          "size": 0.416015625,
          "content": "@echo Building Strings resource and StringId enum from Strings.csv\nsrc\\managed\\bin\\Debug\\i386\\Writer\\locutil.exe /s:src\\managed\\OpenLiveWriter.Localization\\Strings.csv /senum:src\\managed\\OpenLiveWriter.Localization\\StringId.cs /strings:src\\managed\\OpenLiveWriter.Localization\\Strings.resx /props:src\\managed\\OpenLiveWriter.Localization\\Properties.resx /propsnonloc:src\\managed\\OpenLiveWriter.Localization\\PropertiesNonLoc.resx"
        },
        {
          "name": "choco",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "faq.md",
          "type": "blob",
          "size": 3.92578125,
          "content": "##### Q: What is this?\nA: Open Live Writer is an open source fork of the original Windows Live Writer; an application for authoring, editing, and publishing weblog posts.\n\n##### Q: Does this replace Windows Live Writer?\nA: Technically no, spiritually yes.  Open Live Writer is designed to run side-by-side with Windows Live Writer so you can still use Windows Live Writer as you have been.  Spiritually, the volunteer team hopes that Open Live Writer will have all of the functionality of Windows Live Writer and much more.  One of the best things about Windows Live Writer was the community behind it, thus the community can really get involved with Open Live Writer.\n\n##### Q: Why the .NET Foundation?\nA: The codebase is approximately 200,000 lines of C# so it was a good fit. Take a look at their [About](http://www.dotnetfoundation.org/about) page to learn more.\n\n##### Q: Does it work on older versions of Windows? \nA: We focused on Windows 10 for the v0.5 release.  We hope to support Windows 7 and Windows 8 for a while at least.  We will not be able to support Windows XP due to the version of .NET used.\n\n##### Q: Does it work on a Mac?  On Linux?\nA: Since .NET runs on Mac OS and Linux, it is possible to port some of the code to run on Mac OS or Linux. But significant portions of the code use Windows-specific APIs. You are welcome to find the code on GitHub and fork it to run under Mono - that would be awesome.\n\n##### Q: Is this really free?\nA: Yes! Open Live Writer is licensed under the open source [MIT license](https://github.com/OpenLiveWriter/OpenLiveWriter/blob/master/license.txt). If someone made you pay for your copy of Open Live Writer then ask for your money back and go download from http://openlivewriter.org\n\n##### Q: I found a bug, what do I do?\nA: Add to an existing issue or create a new issue via GitHub: https://github.com/OpenLiveWriter/OpenLiveWriter/issues/new\n   Before creating a new issue, make sure that the issue does not already exist and feel free to add to the issue.\n   When creating a new issue, identify as much information as you can to assist the developers in fixing the issue.  It would be \n   helpful to include the log file and any messages you received.  The log file is found at %localappdata%\\OpenLiveWriter . An easy way\n   to get to it is to navigate to File | About | Show log file which is on the lower left of the about dialog box.\n\n##### Q: How can I get involved?\nA: WELCOME!  We definitely love contributions!  \n\n##### Q: Do Windows Live Writer plug-ins work with Open Live Writer?\nA: Weâre looking at plug-ins for the v1.0 release. We want to build a future home for all the great open source plugins that existed for Windows Live Writer.\n\n##### Q: Will there be a plug-in gallery like there was for Windows Live Writer?\nA: Since Open Live Writer is an open source project run by volunteers, we might start with something simple like a wiki page; but if youâre interested, this would be a great community contribution.\n\n##### Q: Is this abandonware?               \nA: Quite the opposite.  Microsoft Corp. did not see a business case to continue investing in Windows Live Writer, but a bunch of passionate volunteers inside and outside of Microsoft spent early mornings, late evenings, and weekends to help fork the Windows Live Writer code and make any necessary edits so it could be released under the MIT License as Open Live Writer.  Hopefully there will be a vibrant community of contributors and committers for Open Live Writer - we'd love for you to get involved.\n\n##### Q: How can I support this effort?\nA: Here are a few ways you can support the Open Live Writer effort:\n * Use the product\n * If you like it, tell your friends\n * If you have suggestions, tell the volunteer team\n * Raise an issue or contribute code at [GitHub](https://github.com/OpenLiveWriter/OpenLiveWriter)\n\n##### Q: Can I subscribe to announcements?\nA: YES, we have an email list to which weâll be sending announcements, [please subscribe](http://eepurl.com/bI77cP)\n"
        },
        {
          "name": "getversion.cmd",
          "type": "blob",
          "size": 0.298828125,
          "content": "@ECHO OFF\n\nSET /P version=<\"%~dp0version.txt\"\n\nFOR /F \"tokens=1-4 delims=.\" %%V in (\"%version%\") DO (\n    ::NuGet now normalizes versions, so need to remove build number if 0\n    IF %%Y EQU 0 (SET \"dottedVersion=%%V.%%W.%%X\") ELSE (SET \"dottedVersion=%%V.%%W.%%X.%%Y\")\n    SET \"rcVersion=%%V,%%W,%%X,%%Y\"\n)"
        },
        {
          "name": "intl",
          "type": "tree",
          "content": null
        },
        {
          "name": "key.snk",
          "type": "blob",
          "size": 0.58203125,
          "content": null
        },
        {
          "name": "license.txt",
          "type": "blob",
          "size": 1.091796875,
          "content": "Open Live Writer \n\nCopyright (c) .NET Foundation. All rights reserved. \n\nThe MIT License (MIT)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "logotype.svg",
          "type": "blob",
          "size": 2.744140625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"439\"\n   height=\"248\"\n   viewBox=\"0 0 116.15208 65.616669\"\n   version=\"1.1\"\n   id=\"svg4639\"\n   inkscape:version=\"0.92.4 (5da689c313, 2019-01-14)\"\n   sodipodi:docname=\"logotype.svg\">\n  <defs\n     id=\"defs4633\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"0.98994949\"\n     inkscape:cx=\"27.052336\"\n     inkscape:cy=\"109.95002\"\n     inkscape:document-units=\"mm\"\n     inkscape:current-layer=\"layer1\"\n     showgrid=\"false\"\n     units=\"px\"\n     inkscape:window-width=\"1920\"\n     inkscape:window-height=\"1027\"\n     inkscape:window-x=\"-8\"\n     inkscape:window-y=\"635\"\n     inkscape:window-maximized=\"1\" />\n  <metadata\n     id=\"metadata4636\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title></dc:title>\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\"\n     transform=\"translate(0,-231.38331)\">\n    <text\n       xml:space=\"preserve\"\n       style=\"font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:13.40555573px;line-height:1.25;font-family:'Segoe UI';-inkscape-font-specification:'Segoe UI, Normal';font-variant-ligatures:normal;font-variant-caps:normal;font-variant-numeric:normal;font-feature-settings:normal;text-align:start;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#ffffff;fill-opacity:1;stroke:none;stroke-width:0.26458332\"\n       x=\"-0.61529404\"\n       y=\"293.91696\"\n       id=\"text5198\"><tspan\n         sodipodi:role=\"line\"\n         id=\"tspan5196\"\n         x=\"-0.61529404\"\n         y=\"293.91696\"\n         style=\"font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:13.40555573px;font-family:'Segoe UI';-inkscape-font-specification:'Segoe UI, Normal';font-variant-ligatures:normal;font-variant-caps:normal;font-variant-numeric:normal;font-feature-settings:normal;text-align:start;letter-spacing:-0.15875px;writing-mode:lr-tb;text-anchor:start;fill:#ffffff;stroke-width:0.26458332\">Open Live Writer</tspan></text>\n  </g>\n</svg>\n"
        },
        {
          "name": "roadmap.md",
          "type": "blob",
          "size": 1.7880859375,
          "content": "Below is a roadmap of potential Open Live Writer features and releases\n\n## v0.5 - Initial release\nFirst public release of Open Live Writer\n\n#### Key use cases(s): \n* **Blog content**: Publish a blog post with text + image\n* **Blog host platforms**: Publish to WordPress.com, hosted WordPress, and Blogger \n* **OS Platform(s)**: Windows 10, time permitting, maybe Windows 7 and Windows 8\n\n#### Specific features:\n* Update copyright statements\n* Remove code for wlw: protocol launcher\n* Verify and test existing error and crash reporting\n\n\n## v0.6 - Quick fixes\nSet of quick fixes to Open Live Writer addressing customer feedback and helping us get more customer feedback\n* Responses to customer feedback coming-in immediately after release\n* (If necessary) Additional telemetry to help diagnose potential issues\n\n\n## v1.0 - Feature Complete\nClose to feature parity with Windows Live Writer \n* Support for multiple languages\n* Full test suite - important for making it easier to accept pull requests\n\nFull list of features/issues at:\n\n### Key use case(s):\n* **Blog content**: Publish a blog post with text, images, embedded video, embedded tweets, other popular embedded content\n* **Blog host platforms**: v0.5 plus TypePad, LiveJournal, and other popular blogging platforms \n* **OS Platform(s)**: Windows 10, Windows 7 and Windows 8 depending on level of investment required\n\n### Specific features:\n* Add Test Suite\n* Add find and replace functionality\n* Multiple languages\n\n\n## v1.0.1 - Minor bug fixes to feature complete release\n\n## v1.1 - Smaller New Features\nFirst release after v1.0 that includes new features\n* Azure Active Directory (AAD) support for authentication (#71)\n* Additional publishing targets\n  * Facebook status update\n  * Twitter status\n* Support for Markdown editing and previews\n\n## v2.0 - Major New Features\n"
        },
        {
          "name": "run.cmd",
          "type": "blob",
          "size": 0.33203125,
          "content": "@ECHO OFF\n\nSETLOCAL\n\nIF \"%OLW_CONFIG%\" == \"\" (\n  echo %%OLW_CONFIG%% not set, will default to 'Debug'\n  set OLW_CONFIG=Debug\n)\n\nSET WRITER_EXE_PATH=\"%~dp0src\\managed\\bin\\%OLW_CONFIG%\\i386\\Writer\\OpenLiveWriter.exe\"\n\nIF NOT EXIST \"%WRITER_EXE_PATH%\" (\n  ECHO ERROR: %WRITER_EXE_PATH% does not exist.\n  EXIT /B 1\n)\n\nCALL %WRITER_EXE_PATH% %*\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "testplan",
          "type": "tree",
          "content": null
        },
        {
          "name": "utilities",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.txt",
          "type": "blob",
          "size": 0.0068359375,
          "content": "0.6.3.0"
        },
        {
          "name": "writer.build.settings",
          "type": "blob",
          "size": 8.5341796875,
          "content": "<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n\n    <PropertyGroup>\n      <Project>Writer</Project>\n      <TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>\n      <RepoRoot>$(MSBuildThisFileDirectory)</RepoRoot>\n      <SrcManagedRoot>$(RepoRoot)\\src\\managed</SrcManagedRoot>\n      <SolutionDir Condition=\"'$(SolutionDir)'==''\">$(SrcManagedRoot)</SolutionDir>\n    </PropertyGroup>\n    \n    <!-- ********************************************************************************************* -->\n    <!-- * Build Environment settings  -->\n    <!-- ********************************************************************************************* -->\n    <PropertyGroup>        \n        <BuildPathEnvironment>$(BUILD_PATH)</BuildPathEnvironment>\n      \n        <!-- ManagedToolPath only needs to really have the installed 2.0 path for parity with BUILD.EXE -->\n        <ManagedToolPathEnvironment>$(URTTARGET_2_0)</ManagedToolPathEnvironment>\n      \n        <!-- This is the Path during the build, that will be set by SetEnvironment,\n             and is different from the path in the command window -->\n        <Path>$(ManagedToolPathEnvironment);$(BuildPathEnvironment);</Path>\n\n        <!-- Prevent accidental pickup of local-machine scripts -->\n        <MSBuildExtensionsPath>$(MSBuildToolsPath)\\MsBuildExtensions</MSBuildExtensionsPath>\n        <MSBuildExtensionsPath32>$(MsBuildExtensionsPath)</MSBuildExtensionsPath32>\n\n        <DirectorySuffix Condition=\"'$(BUILD_ALT_DIR)'!=''\">$(BUILD_ALT_DIR)</DirectorySuffix>\n\n    </PropertyGroup>\n    \n    <!-- ********************************************************************************************* -->\n    <!-- *** Configurations, Platforms, Architectures Defaults -->\n    <!-- ********************************************************************************************* -->\n    <PropertyGroup>\n        <Configuration Condition=\"'$(Configuration)'==''\">Debug</Configuration>\n        <Platform Condition=\"'$(Platform)' == ''\">AnyCPU</Platform>\n\n        <!-- Processor Architecture -->\n        <!-- Currently building from anything other than i386 window isn't supported -->\n        <ProcessorArchitecture Condition=\"'$(ProcessorArchitecture)' == ''\">$(PROCESSOR_ARCHITECTURE)</ProcessorArchitecture>\n\n        <!-- Build Architectures -->\n        <DefaultBuildArchitecture Condition=\"'$(_defaultBuildArch)'!=''\">$(_defaultBuildArch)</DefaultBuildArchitecture>\n        <DefaultBuildArchitecture Condition=\"'$(DefaultBuildArchitecture)'==''\">i386</DefaultBuildArchitecture>\n\n        <!-- TODO: We need to make sure we are setting _BUILDARCH correctly based on ProcessorArchitecture -->\n        <!-- Do not use $(386) - msbuild ignores properties with periods or starting with numbers so it will never be set -->\n        <BuildArchitecture Condition=\"'$(ia64)' == '1'\">ia64</BuildArchitecture>\n        <BuildArchitecture Condition=\"'$(amd64)' == '1'\">amd64</BuildArchitecture>\n        <BuildArchitecture Condition=\"'$(_BuildArch)' == 'x86'\">i386</BuildArchitecture>\n        <BuildArchitecture Condition=\"'$(arm)' == '1'\">arm</BuildArchitecture>\n\n        <BuildArchitecture Condition=\"'$(BuildArchitecture)' == ''\">$(DefaultBuildArchitecture)</BuildArchitecture>\n        <BuildArchitecture Condition=\"'$(BuildArchitecture)' == 'x86'\">i386</BuildArchitecture>\n    </PropertyGroup>\n        \n    <!-- ********************************************************************************************* -->\n    <!-- *** Settings to allow Platform specific assemblies -->\n    <!-- ********************************************************************************************* -->\n    <PropertyGroup Condition=\"'$(PlatformSpecificBuild)' == 'true'\">\n        <PlatformTarget>AnyCPU</PlatformTarget>\n        <PlatformTarget Condition=\"'$(BuildArchitecture)' == 'ia64'\">Itanium</PlatformTarget>\n        <PlatformTarget Condition=\"'$(BuildArchitecture)' == 'amd64'\">x64</PlatformTarget>\n        <PlatformTarget Condition=\"'$(BuildArchitecture)' == 'i386'\">x86</PlatformTarget>\n    </PropertyGroup>\n    \n    <!-- ********************************************************************************************* -->\n    <!-- *** Compile defaults -->\n    <!-- ********************************************************************************************* -->           \n    <PropertyGroup>\n        <OutputType Condition=\"$(OutputType)==''\">Library</OutputType>\n        <NoLogo Condition=\"'$(NoLogo)' == ''\">true</NoLogo>\n        <CheckForOverflowUnderflow Condition=\"'$(CheckForOverflowUnderflow)' == ''\">false</CheckForOverflowUnderflow>\n        <GenerateFullPaths Condition=\"'$(GenerateFullPaths)' == ''\">true</GenerateFullPaths>        \n        <TreatWarningsAsErrors Condition=\"'$(TreatWarningsAsErrors)' == ''\">true</TreatWarningsAsErrors>\n        <WarningLevel Condition=\"'$(WarningLevel)' == ''\">4</WarningLevel> <!-- 0-4 -->\n        <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>\n        <ErrorReport>prompt</ErrorReport>\n        <SignAssembly Condition=\"'$(SignAssembly)' == ''\">false</SignAssembly>\n        <DefineConstants Condition=\"'$(SignAssembly)' == 'true'\">$(DefineConstants);SIGN;</DefineConstants>\n        <DelaySign Condition=\"'$(DelaySign)' == ''\">false</DelaySign>\n        <AssemblyOriginatorKeyFile Condition=\"'$(AssemblyOriginatorKeyFile)' == ''\">$(RepoRoot)\\key.snk</AssemblyOriginatorKeyFile>\n    </PropertyGroup>\n\n    <!-- ********************************************************************************************* -->\n    <!-- *** Assembly Attributes generation Defaults -->\n    <!-- ********************************************************************************************* -->\n    <PropertyGroup>        \n        <GenerateAssemblyAttribute Condition=\"'$(GenerateAssemblyAttribute)' == ''\">true</GenerateAssemblyAttribute>\n        <AssemblyAttributeComVisible Condition=\"'$(AssemblyAttributeComVisible)' == ''\">false</AssemblyAttributeComVisible>\n        <AssemblyAttributeClsCompliant Condition=\"'$(AssemblyAttributeClsCompliant)' == ''\">false</AssemblyAttributeClsCompliant>\n    </PropertyGroup>\n    \n    <!-- ********************************************************************************************* -->\n    <!-- *** Other Defaults -->\n    <!-- ********************************************************************************************* -->\n    <PropertyGroup>    \n        <!-- The default target that should be built when P2P references are followed -->\n        <ProjectReferenceBuildTargets>Build</ProjectReferenceBuildTargets>    \n        <UseHostCompilerIfAvailable Condition=\" '$(UseHostCompilerIfAvailable)' == ''\">false</UseHostCompilerIfAvailable>        \n        <OverwriteReadOnlyFiles>true</OverwriteReadOnlyFiles>\n    </PropertyGroup>\n    \n    <PropertyGroup>\n        <!-- \n          * This only catches settings before our import and not settings made in the project files themselves. \n          * We want OutDir==OutputPath, but setting this in the targets file is difficult because of include\n          * order and missed dependencies.  Instead, we will error out during execution if OutDir!=OutputPath\n        --> \n        <OutputPath Condition=\"'$(OutputPath)' != '$(OutDir)' AND '$(OutDir)' != ''\">$(OutDir)</OutputPath>\n        <OutputPath Condition=\"'$(OutputPath)' == ''\">$(SolutionDir)\\bin\\$(Configuration)\\$(BuildArchitecture)</OutputPath>\n        <OutputPath Condition=\"'$(OutputPath)' != '' and !HasTrailingSlash('$(OutputPath)')\">$(OutputPath)\\</OutputPath>\n    </PropertyGroup>\n\n    <PropertyGroup>\n      <IntermediateOutputRoot>$(SrcManagedRoot)\\obj\\</IntermediateOutputRoot>\n      <IntermediateOutputPath>$(IntermediateOutputRoot)\\$(Configuration)\\$(MSBuildProjectName)\\</IntermediateOutputPath>\n    </PropertyGroup>\n\n    <PropertyGroup>\n      <ProductName>Open Live Writer</ProductName>\n      <Title>Open Live Writer</Title>\n      <CopyrightText>Copyright (c) Open Live Writer. All rights reserved.</CopyrightText>\n      <OutputPath>$(OutputPath)$(Project)\\</OutputPath>\n      <OutDir>$(OutputPath)</OutDir>\n      <PlatformTarget>x86</PlatformTarget>\n    </PropertyGroup>\n\t\n    <PropertyGroup>\n        <AssemblyVersionName>corext</AssemblyVersionName>\n    </PropertyGroup>\n\n    <PropertyGroup Condition=\"'$(Configuration)' == 'Debug'\">\n        <DebugType>full</DebugType>\n        <DebugSymbols>true</DebugSymbols>\n        <DefineConstants>$(DefineConstants);DEBUG;TRACE</DefineConstants>\n        <Optimize>false</Optimize>\n    </PropertyGroup>\n\n    <PropertyGroup Condition=\"'$(Configuration)' == 'Release'\">\n        <DebugType>pdbonly</DebugType>\n        <DefineConstants>$(DefineConstants);TRACE</DefineConstants>\n        <Optimize>true</Optimize>\n    </PropertyGroup>\n\n</Project>\n"
        },
        {
          "name": "writer.build.targets",
          "type": "blob",
          "size": 2.2265625,
          "content": "<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n\n  <PropertyGroup>\n    <VersionTxt>$(RepoRoot)\\version.txt</VersionTxt>\n    <GlobalAssemblyVersionInfoPath>$(SrcManagedRoot)\\GlobalAssemblyVersionInfo.cs</GlobalAssemblyVersionInfoPath>\n    <UnmanagedVersionPath>$(RepoRoot)\\src\\unmanaged\\version.h</UnmanagedVersionPath>\n  </PropertyGroup>\n  \n  <Target Name=\"GenerateVersionFiles\" BeforeTargets=\"CoreCompile\" Inputs=\"$(VersionTxt)\" Outputs=\"$(GlobalAssemblyVersionInfoPath);$(UnmanagedVersionPath)\">\n    <ReadLinesFromFile File=\"$(VersionTxt)\">\n      <Output TaskParameter=\"Lines\" ItemName=\"VersionTextLines\"/>\n    </ReadLinesFromFile>\n    <PropertyGroup>\n      <BuildVersion>@(VersionTextLines)</BuildVersion>\n    </PropertyGroup>\n    <WriteLinesToFile File=\"$(GlobalAssemblyVersionInfoPath)\" Lines=\"[assembly: System.Reflection.AssemblyVersion(&quot;$(BuildVersion)&quot;)];[assembly: System.Reflection.AssemblyFileVersion(&quot;$(BuildVersion)&quot;)]\" Overwrite=\"true\" />\n    <WriteLinesToFile File=\"$(UnmanagedVersionPath)\" Lines=\"#define FILE_VERSION $(BuildVersion.Replace(&quot;.&quot;,&quot;,&quot;));#define PRODUCT_VERSION $(BuildVersion)\" Overwrite=\"true\" />\n    <ItemGroup>\n      <Compile Condition=\"Exists('$(GlobalAssemblyVersionInfoPath)')\" Include=\"$(GlobalAssemblyVersionInfoPath)\" />\n    </ItemGroup>\n  </Target>\n\n  <!-- Google Blogger -->\n\n  <PropertyGroup>\n    <BloggerClientSecretsJson>$(RepoRoot)\\src\\managed\\OpenLiveWriter.BlogClient\\Clients\\GoogleBloggerv3Secrets.json</BloggerClientSecretsJson>\n    <OlwBloggerClientId Condition=\"'$(OlwBloggerClientId)'==''\">PASTE_YOUR_CLIENT_ID_HERE</OlwBloggerClientId>\n    <OlwBloggerClientSecret Condition=\"'$(OlwBloggerClientSecret)'==''\">PASTE_YOUR_CLIENT_SECRET_HERE</OlwBloggerClientSecret>\n  </PropertyGroup>\n\n  <Target Name=\"GenerateBloggerClientSecrets\" BeforeTargets=\"CoreCompile\" Inputs=\"$(MSBuildThisFileFullPath)\" Outputs=\"$(BloggerClientSecretsJson)\">\n    <Message Text=\"$(BloggerClientSecretsJson)\" Importance=\"high\" />\n    <WriteLinesToFile File=\"$(BloggerClientSecretsJson)\" Lines=\"{ &quot;installed&quot;: { &quot;client_id&quot;: &quot;$(OlwBloggerClientId)&quot;, &quot;client_secret&quot;: &quot;$(OlwBloggerClientSecret)&quot; } }\" Overwrite=\"true\" />\n  </Target>\n\n</Project>\n"
        }
      ]
    }
  ]
}