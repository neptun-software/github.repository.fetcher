{
  "metadata": {
    "timestamp": 1736711133535,
    "page": 986,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Arvtesh/UnityFx.Outline",
      "stars": 1291,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 3.5791015625,
          "content": "# EditorConfig is awesome: http://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n# Use tabs for indentation.\n[*]\nindent_style = tab\ntrim_trailing_whitespace = true\ninsert_final_newline = true\ncharset = utf-8-bom\nend_of_line = crlf\n# (Please don't specify an indent_size here; that has too many unintended consequences.)\n\n# Code files\n[*.{cs,csx,vb,vbx}]\nindent_size = 4\n\n# Xml project files\n[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]\nindent_size = 2\n\n# Xml config files\n[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]\nindent_size = 2\n\n# Yml config files\n[*.{yml,yaml}]\nindent_style = space\nindent_size = 2\n\n# JSON files\n[*.json]\nindent_size = 2\n\n# Dotnet code style settings:\n[*.{cs,vb}]\n# Sort using and Import directives with System.* appearing first\ndotnet_sort_system_directives_first = true\n\n# Avoid \"this.\" and \"Me.\" if not necessary\ndotnet_style_qualification_for_field = false:suggestion\ndotnet_style_qualification_for_property = false:suggestion\ndotnet_style_qualification_for_method = false:suggestion\ndotnet_style_qualification_for_event = false:suggestion\n\n# Use language keywords instead of framework type names for type references\ndotnet_style_predefined_type_for_locals_parameters_members = true:warning\ndotnet_style_predefined_type_for_member_access = true:warning\n\n# Suggest more modern language features when available\ndotnet_style_object_initializer = true:suggestion\ndotnet_style_collection_initializer = true:suggestion\ndotnet_style_coalesce_expression = true:warning\ndotnet_style_null_propagation = true:warning\ndotnet_style_explicit_tuple_names = true:suggestion\n\n# CSharp code style settings:\n[*.cs]\n# Prefer \"var\" everywhere\ncsharp_style_var_for_built_in_types = true:suggestion\ncsharp_style_var_when_type_is_apparent = true:warning\ncsharp_style_var_elsewhere = true:warning\n\n# Prefer method-like constructs to have a block body\ncsharp_style_expression_bodied_methods = false:none\ncsharp_style_expression_bodied_constructors = false:none\ncsharp_style_expression_bodied_operators = false:none\n\n# Prefer property-like constructs to have an expression-body\ncsharp_style_expression_bodied_properties = true:suggestion\ncsharp_style_expression_bodied_indexers = true:suggestion\ncsharp_style_expression_bodied_accessors = true:none\n\n# Suggest more modern language features when available\ncsharp_style_pattern_matching_over_is_with_cast_check = true:suggestion\ncsharp_style_pattern_matching_over_as_with_null_check = true:suggestion\ncsharp_style_inlined_variable_declaration = true:warning\ncsharp_style_throw_expression = true:suggestion\ncsharp_style_conditional_delegate_call = true:suggestion\ncsharp_style_deconstructed_variable_declaration = true:suggestion\n\ncsharp_prefer_simple_default_expression = true:suggestion\ncsharp_prefer_braces = true:warning\n\n# Newline settings\ncsharp_new_line_before_open_brace = all\ncsharp_new_line_before_else = true\ncsharp_new_line_before_catch = true\ncsharp_new_line_before_finally = true\ncsharp_new_line_before_members_in_object_initializers = true\ncsharp_new_line_before_members_in_anonymous_types = true\ncsharp_new_line_between_query_expression_clauses = true\n\n# Formatting settings\ncsharp_indent_case_contents = true\ncsharp_indent_switch_labels = true\ncsharp_indent_labels = flush_left\n\ncsharp_space_after_cast = false\ncsharp_space_after_keywords_in_control_flow_statements = true\ncsharp_space_between_method_declaration_parameter_list_parentheses = false\ncsharp_space_between_method_call_parameter_list_parentheses = false\ncsharp_space_between_parentheses = false\n\ncsharp_preserve_single_line_statements = false\ncsharp_preserve_single_line_blocks = true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4052734375,
          "content": "[Ll]ibrary/\n[Tt]emp/\n[Oo]bj/\n[Bb]uild/\n[Bb]uilds/\n[Ll]ogs/\n\n# Visual Studio cache directory\n.vs/\n\n# Autogenerated VS/MD/Consulo solution and project files\nExportedObj/\n.consulo/\n*.csproj\n*.unityproj\n*.sln\n*.suo\n*.tmp\n*.user\n*.userprefs\n*.pidb\n*.booproj\n*.svd\n*.pdb\n*.opendb\n\n# Unity3D generated meta files\n*.pidb.meta\n*.pdb.meta\n\n# Unity3D Generated File On Crash Reports\nsysinfo.txt\n\n# Builds\n*.apk\n*.unitypackage\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 9.2060546875,
          "content": "# UnityFx.Outline changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/); this project adheres to [Semantic Versioning](http://semver.org/).\n\n## [0.8.5] - 2021.11.18\n\nBugfixes and improvements.\n\n### Added\n- Added support for HDR color pickers ([#42](https://github.com/Arvtesh/UnityFx.Outline/issues/42)).\n\n### Fixed\n- Fixed URP depth testing with MSAA enabled when using `OutlineLayerCollection`, thanks @AGM-GR for the help ([#39](https://github.com/Arvtesh/UnityFx.Outline/issues/39)).\n- Added loop unroll statement to make shaders compatible with some platforms (WebGL 1.0) ([#45](https://github.com/Arvtesh/UnityFx.Outline/issues/45)).\n- Removed `BeginSample`/`EndSample` profiler calls when rendering outlines to get rid of the editor errors ([#44](https://github.com/Arvtesh/UnityFx.Outline/issues/44)).\n\n## [0.8.4] - 2021.08.17\n\nMisc improvements.\n\n### Added\n- Added support for URP sprite outlines ([#28](https://github.com/Arvtesh/UnityFx.Outline/issues/28)).\n- Enabled ourlines for renderers with no materials attached ([#33](https://github.com/Arvtesh/UnityFx.Outline/issues/33)).\n\n## [0.8.3] - 2021.01.25\n\nMisc improvements and bugfixes.\n\n### Added\n- Added possibility to set custom shader tags for URP outlines.\n- Added support for filtering URP outline renderers by [rendering layer mask](https://docs.unity3d.com/ScriptReference/Renderer-renderingLayerMask.html) ([#22](https://github.com/Arvtesh/UnityFx.Outline/issues/22)).\n\n### Fixed\n- Fixed URP outlines rendering issue when both depth-testing and MSAA are enabled ([#23](https://github.com/Arvtesh/UnityFx.Outline/issues/23)).\n- Fixed `OutlineBehaviour` not working in edit mode after disabling and enabling it again.\n\n### Changed\n- `OutlineEffect` now works in edit-mode.\n- `OutlineEffect` now exposes `OutlineLayerCollection` instead of `IList`.\n- `OutlineEffect` now uses `OnPreRender` to update its command buffer.\n- Moved `MergeLayerObjects` flag to `OutlineLayer` from `OutlineLayerCollection`.\n- Multiple `OutlineEffect` component instances can now be added to a camera.\n\n## [0.8.2] - 2020.11.10\n\n[URP](https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal@8.1/manual/index.html) per-layer outlines and misc improvements.\n\n### Added\n- Added URP-specific shader versions.\n- Added URP layer-based outline rendering ([#9](https://github.com/Arvtesh/UnityFx.Outline/issues/9)).\n- Added support for Single Pass Instanced XR rendering for built-in and URP ([#13](https://github.com/Arvtesh/UnityFx.Outline/issues/13)).\n\n### Fixed\n- Fixed URP outlines rendering issue in Unity 2020.2 ([#21](https://github.com/Arvtesh/UnityFx.Outline/issues/21)).\n\n## [0.8.1] - 2020.09.21\n\nAlpha test support, bugfixes and misc improvements.\n\n### Added\n- Added support for alpha-testing ([#10](https://github.com/Arvtesh/UnityFx.Outline/issues/10)).\n- Added support for merging outline layer objects ([#12](https://github.com/Arvtesh/UnityFx.Outline/issues/12)).\n- Added `RemoveGameObject` helper methof to `OutlineEffect` ([#15](https://github.com/Arvtesh/UnityFx.Outline/issues/15)).\n- Added ability to customize render event in `OutlineBehaviour`.\n- Added ability to render outlines to the specified camera only for `OutlineBehaviour`.\n- Added warning for unsupported render pipelines for `OutlineBehaviour` and `OutlineEffect`.\n\n### Changed\n- Misc inspector improvements.\n- Changed default render event to `AfterSkybox`.\n\n### Fixed\n- Fixed incorrect condition for selection of render method, which sometimes caused problems with outline rendering on mobiles ([#14](https://github.com/Arvtesh/UnityFx.Outline/issues/14)).\n\n## [0.8.0] - 2020.05.30\n\n[URP](https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal@8.1/manual/index.html) support, core refactoring and bugfixes.\n\n### Added\n- Added [URP](https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal@8.1/manual/index.html) support ([#5](https://github.com/Arvtesh/UnityFx.Outline/issues/5)).\n- Use procedural geometry ([DrawProcedural](https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawProcedural.html)) on SM3.5+.\n- Added support for both forward and deferred renderers (built-in RP).\n- Added ignore layer mask settings to `OutlineLayerCollection` (previously the ignore layers were specified when adding game objects to layers).\n- Added `OutlineBuilder` helper script for managinf `OutlineLayerCollection` content from editor ([#8](https://github.com/Arvtesh/UnityFx.Outline/issues/8)).\n\n### Changed\n- Changed `OutlineSettings` to display enum mask instead of checkboxes.\n- Changed inspector look and feel for `OutlineLayerCollection` assets.\n- Merged shaders for the 2 outline passes into one multi-pass shader.\n- `OutlineLayerCollection` doe not depend on `OutlineRenderer` now.\n\n### Fixed\n- Fixed outline rendering on mobiles ([#7](https://github.com/Arvtesh/UnityFx.Outline/issues/7)).\n- Fixed outline shader error on low-end devices.\n- Fixed post-ptocessing implementation to require depth texture.\n\n### Removed\n- Dropped .NET 3.5 support, minimal Unity version is set to 2018.4.\n- Removed `IOutlineSettingsEx` interface.\n\n## [0.7.2] - 2020.04.08\n\nDepth testing support and performance optimizations.\n\n### Added\n- Added support for depth testing when rendering outlines. When enabled, outlines are only rendered around the visible object parts ([#1](https://github.com/Arvtesh/UnityFx.Outline/issues/1)).\n- Added a few convenience methods to `OutlineEffect`.\n- Added editor tooltips for outline component fileds.\n\n### Fixed\n- Get rid of GC allocatinos during command buffer updates.\n- Fixed compiler warning in post-processing compatibility package (0649).\n- Fixed `IndexOutOfRangeException` when setting outline width to max value ([#4](https://github.com/Arvtesh/UnityFx.Outline/issues/4)).\n\n### Removed\n- Removed change tracking support in package entities ([#2](https://github.com/Arvtesh/UnityFx.Outline/issues/2)).\n\n## [0.7.1] - 2020.01.28\n\nBugfixes and project layout changes.\n\n### Fixed\n- Fixed `OutlineBehaviour` to allow changing its state while its `GameObject` is inactive.\n\n## [0.7.0] - 2019.11.26\n\n`MaterialPropertyBlock`-based rendering and [Unity Post-processing Stack v2](https://github.com/Unity-Technologies/PostProcessing/tree/v2) compatibility.\n\n### Added\n- Moved to for `MaterialPropertyBlock`-based rendering. This is in-line with Unity post-processing Stack and is more performant approach.\n- Significant optimizations made to `OutlineRenderer`.\n\n### Changed\n- `IOutlineSettings` now implements `IEquatable`.\n- Changed all outline shaders to use HLSL-based macros.\n- Modified all shaders to ignore MVP vertex transform to be compatible with the new rendering model.\n- Exposed rendering APIs for `OutlineLayer` and `OutlineLayerCollection`.\n\n### Fixed\n- Fixed `TiledGPUPerformanceWarning` on mobile targets.\n\n### Removed\n- Removed `OutlineMaterialSet` class. It is not used in `MaterialPropertyBlock`-based effect rendering.\n\n## [0.6.0] - 2019.09.26\n\nQuality of life improvements.\n\n### Added\n- Added `OutlineLayer.Enabled`.\n- Added `OutlineLayer.Name`.\n- Added possibility to change render order of layers via `OutlineLayer.Priority`.\n- Added possibility to edit renderers of an `OutlineLayer`.\n- Added possibility to alter `CameraEvent` used to render `OutlineEffect`.\n- Added more info to the `OutlineLayer` preview inspector.\n\n### Changed\n- `IOutilneSettings` setters now throw if overriden.\n\n### Fixed\n- Fixed `OutlineLayer.Add` not filtering renderers by the mask passed.\n\n## [0.5.0] - 2019.09.09\n\nEditor UI improvements and unit tests.\n\n### Added\n- Added `OutlineSettings`, that can be shared between dfferent `OutlineLayer` and `OutlineBehaviour` instances.\n- Added custom inspectors for `OutlineSettings`, `OutlineLayerCollection`.\n- Added undo/redo support to all custom inspectors.\n- Added unit-tests.\n\n### Changed\n- Improved inspectors for `OutlineBehaviour` and `OutlineEffect`.\n\n## [0.4.0] - 2019.08.31\n\nBlurred outlines.\n\n### Added\n- Added Gauss blurring to outlines.\n- Added outline mode parameter (possible values are `Solid` and `Blurred`).\n- Added outline intensity parameter (for blurred outlines only).\n- Added `IOutlineSettings` interface to make outline settings the same for `OutlineBehaviour` and `OutlineLayer`.\n- Added `OutlineMaterialSet` helper.\n\n### Changed\n- Changed solid outline to use Gauss sampling (to achieve smoother outlines).\n- Changed outline implementation to use different passed for horizontal and vertical sampling (to make algorithm complexity linear instead of quadric).\n\n### Fixed\n- Fixed an issue with `OutlineBehaviour` not rendering outlines if attached to a `GameObject` with no renderers.\n\n### Removed\n- Removed `OutlineResourceCache` class.\n\n## [0.3.0] - 2019.08.27\n\n### Added\n- Added support for sharing outline layers between `OutlineEffect` instances.\n- Added custom editors for `OutlineEffect` and `OutlineBehaviour`.\n- Added possibility to setup outline layers as `ScriptableObject` asset.\n\n### Fixed\n- Fixed profiler error 'BeginSample and EndSample count must match'.\n\n## [0.2.0] - 2019.08.19\n\n### Added\n- Added `OutlineBehaviour` for rendering per-object outlines.\n- Added `OutlineResources` to help initialize outline effects in runtime.\n- Added `OutlineRenderer` as low-level helper for outline rendering.\n\n## [0.1.0] - 2019.08.18\n\n### Added\n- Initial release.\n\n"
        },
        {
          "name": "Docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0546875,
          "content": "# MIT License\n\nCopyright (c) 2019 Alexander Bogarsukov.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "NpmPublish.bat",
          "type": "blob",
          "size": 0.1025390625,
          "content": "npm publish Outline.Core\\Packages\\UnityFx.Outline\nnpm publish Outline.HDRP\\Packages\\UnityFx.Outline.HDRP\n"
        },
        {
          "name": "Outline.Core",
          "type": "tree",
          "content": null
        },
        {
          "name": "Outline.HDRP",
          "type": "tree",
          "content": null
        },
        {
          "name": "Outline.PostProcessing",
          "type": "tree",
          "content": null
        },
        {
          "name": "Outline.URP",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.6015625,
          "content": "# UnityFx.Outline\n\nChannel | UnityFx.Outline |\n--------|-----------------|\nGithub | [![GitHub release](https://img.shields.io/github/release/Arvtesh/UnityFx.Outline.svg?logo=github)](https://github.com/Arvtesh/UnityFx.Outline/releases)\nNpm (core + built-in RP) | [![Npm release](https://img.shields.io/npm/v/com.unityfx.outline.svg)](https://www.npmjs.com/package/com.unityfx.outline) ![npm](https://img.shields.io/npm/dt/com.unityfx.outline)\nNpm (Post-processing v2) | [![Npm release](https://img.shields.io/npm/v/com.unityfx.outline.postprocessing.svg)](https://www.npmjs.com/package/com.unityfx.outline.postprocessing) ![npm](https://img.shields.io/npm/dt/com.unityfx.outline.postprocessing)\nNpm (URP) | [![Npm release](https://img.shields.io/npm/v/com.unityfx.outline.urp.svg)](https://www.npmjs.com/package/com.unityfx.outline.urp) ![npm](https://img.shields.io/npm/dt/com.unityfx.outline.urp)\nNpm (HDRP) | TODO\n\n**Requires Unity 2018.4 or higher.**<br/>\n**Compatible with [Unity Post-processing Stack v2](https://github.com/Unity-Technologies/PostProcessing/tree/v2).**<br/>\n**Compatible with [Universal Render Pipeline](https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal@8.1/manual/index.html).**</br>\n**Compatible with [XR](https://docs.unity3d.com/Manual/XR.html) (Multi Pass, Single Pass Instanced).**\n\n**Please ask any questions and leave feedback at the [Unity forums](https://forum.unity.com/threads/screen-space-outline-effect-for-unity-free.836908/).**\n\n## Synopsis\n![Outline demo](Docs/OutlineSamples.png \"Outline demo\")\n![Outline demo](Docs/MotusOutline.png \"Outline demo\")\n\n*UnityFx.Outline* implements configurable per-object and per-camera outlines. Both solid and blurred outline modes are supported (Gauss blur). The outlines can be easily customized either through scripts or with Unity editor (both in edit-time or runtime).\n\nImplementation is based on Unity [command buffers](https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.html), compatible with [Unity Post-processing Stack v2](https://github.com/Unity-Technologies/PostProcessing/tree/v2) and [Universal Render Pipeline](https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal@8.1/manual/index.html), extendable and has no external dependencies.\n\nSupported outline parameters are:\n- Color;\n- Width (in pixels);\n- Type (solid or blurred);\n- Intensity (for blurred outlines);\n- Depth testing;\n- Alpha testing.\n\nSupported platforms:\n- Windows/Mac standalone;\n- Android;\n- iOS;\n- WebGL;\n- Other platforms (untested).\n\nPlease see [CHANGELOG](CHANGELOG.md) for information on recent changes.\n\n## Getting Started\n### Prerequisites\nYou may need the following software installed in order to build/use the library:\n- [Unity3d 2018.4+](https://store.unity.com/).\n\n### Getting the code\nYou can get the code by cloning the github repository using your preffered git client UI or you can do it from command line as follows:\n```cmd\ngit clone https://github.com/Arvtesh/UnityFx.Outline.git\n```\n\n### Npm packages\n[![NPM](https://nodei.co/npm/com.unityfx.outline.png)](https://www.npmjs.com/package/com.unityfx.outline)<br/>\n[![NPM](https://nodei.co/npm/com.unityfx.outline.postprocessing.png)](https://www.npmjs.com/package/com.unityfx.outline.postprocessing)<br/>\n[![NPM](https://nodei.co/npm/com.unityfx.outline.urp.png)](https://www.npmjs.com/package/com.unityfx.outline.urp)<br/>\n\nNpm core package is available at [npmjs.com](https://www.npmjs.com/package/com.unityfx.outline). There are dedicated packages for [Post-processing Stack v2](https://github.com/Unity-Technologies/PostProcessing/tree/v2) and [Universal Render Pipeline](https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal@8.0/manual/index.html). To use the packages, add the following line to dependencies section of your `manifest.json`. Unity should download and link the package automatically:\n```json\n{\n  \"scopedRegistries\": [\n    {\n      \"name\": \"Arvtesh\",\n      \"url\": \"https://registry.npmjs.org/\",\n      \"scopes\": [\n        \"com.unityfx\"\n      ]\n    }\n  ],\n  \"dependencies\": {\n    \"com.unityfx.outline\": \"0.8.5\",\n    \"com.unityfx.outline.urp\": \"0.5.0\",\n  }\n}\n```\n\n## Usage\nInstall the package and import the namespace:\n```csharp\nusing UnityFx.Outline;\n```\n\n### Per-camera outlines (built-in RP)\n![Outline demo](Docs/OutlineEffectInspector.png \"OutlineEffect Inspector\")\n\nAdd `OutlineEffect` script to a camera that should render outlines. Then add and configure as many layers as you need. An outline layer is a group of game objects that share the same outline settings:\n```csharp\nvar outlineEffect = Camera.main.GetComponent<OutlineEffect>();\nvar layer = new OutlineLayer(\"MyOutlines\");\n\nlayer.OutlineColor = Color.red;\nlayer.OutlineWidth = 7;\nlayer.OutlineRenderMode = OutlineRenderFlags.Blurred;\nlayer.Add(myGo);\n\noutlineEffect.OutlineLayers.Add(layer);\n```\nor\n```csharp\nvar outlineEffect = Camera.main.GetComponent<OutlineEffect>();\n\n// This adds layer 0 (if it is not there) and then adds myGo.\noutlineEffect.AddGameObject(myGo);\n\n// Now setup the layer.\nvar layer = outlineEffect[0];\n\nlayer.OutlineColor = Color.red;\nlayer.OutlineWidth = 7;\nlayer.OutlineRenderMode = OutlineRenderFlags.Blurred;\nlayer.Add(myGo);\n```\n\nThis can be done at runtime or while editing a scene. If you choose to assign the script in runtime make sure `OutlineEffect.OutlineResources` is initialized. Disabling `OutlineEffect` script disables outlining for the camera (and frees all resources used).\n\nMultiple `OutlineEffect` scripts can share outline layers rendered. To achieve that assign the same layer set to all `OutlineEffect` instances:\n\n```csharp\nvar effect1 = camera1.GetComponent<OutlineEffect>();\nvar effect2 = camera2.GetComponent<OutlineEffect>();\n\n// Make effect1 share its layers with effect2.\neffect1.ShareLayersWith(effect2);\n```\n\n### Per-object outlines (built-in RP)\n![Outline demo](Docs/OutlineBehaviourInspector.png \"OutlineBehaviour Inspector\")\n\nAdd `OutlineBehaviour` script to objects that should be outlined (in edit mode or in runtime). Make sure `OutlineBehaviour.OutlineResources` is initialized. You can customize outline settings either via Unity inspector or via script. Objects with `OutlineBehaviour` assigned render outlines in all cameras.\n\n```csharp\nvar outlineBehaviour = GetComponent<OutlineBehaviour>();\n\n// Make sure to set this is OutlineBehaviour was added at runtime.\noutlineBehaviour.OutlineResources = myResources;\n\noutlineBehaviour.OutlineColor = Color.green;\noutlineBehaviour.OutlineWidth = 2;\noutlineBehaviour.OutlineIntensity = 10;\n```\n\n### Depth testing\nBy default depth testing is disabled when rendering outlines. This behaviour can be overriden by setting `EnableDepthTesting` flag of `Rander Flags` (either via scripting API or with editor).\n```csharp\nvar outlineSettings = GetComponent<OutlineBehaviour>();\n\noutlineSettings.OutlineColor = Color.green;\noutlineSettings.OutlineWidth = 2;\noutlineSettings.OutlineRenderMode = OutlineRenderFlags.Blurred | OutlineRenderFlags.EnableDepthTesting;\n```\n\n### Alpha testing\nBy default alpha testing is disabled when rendering outlines. This behaviour can be overriden by setting `EnableAlphaTesting` flag of `Rander Flags` (either via scripting API or with editor).\n```csharp\noutlineSettings.OutlineRenderMode = OutlineRenderFlags.EnableAlphaTesting;\n```\n\n### Ignore layers\nWhen adding a `GameObject` to outline collection it is often desirable to ignore child renderers in specific layers (for instance, `TransparentFX`). This can be achieved by settings the `IgnoreLayers` mask in outline settings (or through corresponding API).\n```csharp\nvar outlineSettings = GetComponent<OutlineBehaviour>();\noutlineSettings.IgnoreLayerMask = LayerMask.GetMask(\"TransparentFX\", \"UI\");\n```\n\n### Extensibility\nThere are a number of helper classes that can be used for writing highly customized outline implementations (if neither `OutlineBehaviour` nor `OutlineEffect` does not suit your needs).\nAll outline implementations use following helpers:\n- `OutlineRenderer` is basically a wrapper around `CommandBuffer` for low-level outline rendering.\n- `OutlineSettings` is a set of outline settings.\n\nUsing these helpers is quite easy to create new outline tools. For instance, the following code renders a blue outline around object the script is attached to in `myCamera`:\n\n```csharp\nvar commandBuffer = new CommandBuffer();\nvar renderers = GetComponentsInChildren<Renderer>();\n\n// Any implementation of `IOutlineSettings` interface can be used here instead of `OutlineSettings`.\nvar settings = ScriptableObject.CreateInstance<OutlineSettings>();\n\nsettings.OutlineColor = Color.blue;\nsettings.OutlineWidth = 12;\n\n// Get outline assets instance. In real app this usually comes from MonoBehaviour's serialized fields.\nvar resources = GetMyResources();\n\nusing (var renderer = new OutlineRenderer(commandBuffer, resources))\n{\n  renderer.Render(renderers, settings, myCamera.actualRenderingPath);\n}\n\nmyCamera.AddCommandBuffer(OutlineRenderer.RenderEvent, commandBuffer);\n```\n\n## Integration with Unity post-processing v2.\n[![NPM](https://nodei.co/npm/com.unityfx.outline.postprocessing.png)](https://www.npmjs.com/package/com.unityfx.outline.postprocessing)\n\nInstall the package, add `Outline` effect to `PostProcessProfile`'s overrides list. Configure the effect parameters, make sure outline resources and layer collection are set:\n\n![Post processing outlinesettings](Docs/PpOutlineSettings.png \"Post processing outlinesettings\")\n\nAssign the configured `PostProcessProfile` to `PostProcessVolume` and that's it!\n\nMore info on writing custom post processing effects can be found [here](https://docs.unity3d.com/Packages/com.unity.postprocessing@2.3/manual/Writing-Custom-Effects.html).\n\n## Integration with Universal Render Pipeline (URP).\n[![NPM](https://nodei.co/npm/com.unityfx.outline.urp.png)](https://www.npmjs.com/package/com.unityfx.outline.urp)\n\nInstall the package, add `OutlineFeature` to `ScriptableRendererData`'s list of features. Configure the feature parameters (make sure outline resources reference is set). Outline objects can be selected by layer or explixitly using `OutlineLayerCollection`:\n\n![URP outline settings](Docs/UrpOutlineSettings.png \"URP outline settings\")\n\nEnable depth texture rendering in `UniversalRenderPipelineAsset` and that's it!\n\n### Integration with High Definition Render Pipeline (HDRP).\n[![NPM](https://nodei.co/npm/com.unityfx.outline.hdrp.png)](https://www.npmjs.com/package/com.unityfx.outline.hdrp)\n\nTODO\n\n## Motivation\nThe project was initially created to help author with his [Unity3d](https://unity3d.com) projects. There are not many reusable open-source examples of it, so here it is. Hope it will be useful for someone.\n\n## Documentation\nPlease see the links below for extended information on the product:\n- [Unity forums](https://forum.unity.com/threads/screen-space-outline-effect-for-unity-free.836908/).\n- [CHANGELOG](CHANGELOG.md).\n- [SUPPORT](.github/SUPPORT.md).\n\n## Useful links\n- [A great outline tutorial](https://willweissman.wordpress.com/tutorials/shaders/unity-shaderlab-object-outlines/).\n- [Command buffers tutorial](https://lindenreid.wordpress.com/2018/09/13/using-command-buffers-in-unity-selective-bloom/).\n- [Gaussian blur tutorial](https://www.ronja-tutorials.com/2018/08/27/postprocessing-blur.html).\n- [Excellent post-processing tutorial](https://catlikecoding.com/unity/tutorials/scriptable-render-pipeline/post-processing/).\n\n## Contributing\nPlease see [contributing guide](.github/CONTRIBUTING.md) for details.\n\n## Versioning\nThe project uses [SemVer](https://semver.org/) versioning pattern. For the versions available, see [tags in this repository](https://github.com/Arvtesh/UnityFx.Outline/tags).\n\n## License\nPlease see the [![license](https://img.shields.io/github/license/Arvtesh/UnityFx.Outline.svg)](LICENSE.md) for details.\n"
        }
      ]
    }
  ]
}