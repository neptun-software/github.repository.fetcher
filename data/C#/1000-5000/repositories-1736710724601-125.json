{
  "metadata": {
    "timestamp": 1736710724601,
    "page": 125,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "borisdj/EFCore.BulkExtensions",
      "stars": 3711,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2626953125,
          "content": "root = true\r\n\r\n[*]\r\nindent_style = space\r\n\r\n[*.cs]\r\nindent_size = 4\r\ntab_width = 4\r\nend_of_line = lf\r\ntrim_trailing_whitespace = false\r\ninsert_final_newline = true\r\ncsharp_style_namespace_declarations = file_scoped:warning\r\ndotnet_diagnostic.CA2007.severity = warning\r\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.359375,
          "content": "bin\nobj\n.vs\n*.user\n.idea\nNugets\n\n/EFCore.BulkExtensions.Tests/testsettings.local.json\n!*.csproj\n!*.png\nEFCore.BulkExtensions.PerProvider/EFCore.BulkExtensions.MySql/*\nEFCore.BulkExtensions.PerProvider/EFCore.BulkExtensions.PostgreSql/*\nEFCore.BulkExtensions.PerProvider/EFCore.BulkExtensions.Sqlite/*\nEFCore.BulkExtensions.PerProvider/EFCore.BulkExtensions.SqlServer/*"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.1455078125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the [author](https://github.com/borisdj). The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at<br>\n[http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.7958984375,
          "content": "## Contributing\n\nüëç First off, thanks for taking the time to contribute! üëç<br>\nWorking together we can make a better tool for everyone.\n\n## Code of Conduct\n\nThis project and everyone participating in it is governed by the [Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating, you are expected to uphold this code.\nBy making a PullRequest Contributor assigns the copyright to the project owner.\n\n### Where do I go from here?\n\nIf you've noticed a bug or have an idea about new feature you can open a issue.\nBefore doing that please go through README and existing issues(both open and closed) and check if that question already exist to avoid duplication.\nOnce the issue is created we will discuss it there and decide the next actions.\n\nIf that would be something you think you can fix, please suggest your solution and we can coordinated accordingly.\nWhen making changes on code please go through all code for understanding whole picture in order to make change affect everything it should but no more, and to do it in the correct way.\n\nAfter that Tests should up updated if change affects them, or new Tests could be created.\nLastly README should be updated if additional explanations are required regarding the change.\n\n### How Do I Submit A (Good) Bug Report?\n- Use a clear and descriptive title for the issue to identify the problem.\n- Describe the exact steps which reproduce the problem in as many details as possible.\n- Provide specific examples to demonstrate the steps. \n- Describe the behavior you observed after following the steps and point out what exactly is the problem with that behavior.\n- Explain which behavior you expected to see instead and why.\n\n## Submitting changes\n\nPlease send a GitHub Pull Request with a clear list of what you've done (read more about [pull requests](https://help.github.com/articles/about-pull-requests/)). Please follow coding conventions (below) and make sure all of your commits are atomic (one feature per commit).\n\nAlways write a clear log message for your commits. One-line messages are fine for small changes, but bigger changes should look like this:\n\n    $ git commit -m \"A brief summary of the commit\n    > \n    > A paragraph describing what changed and its impact.\"\n\n## Coding conventions\n\nStart reading the code and you'll get the hang of it. It is optimized for readability:\n\n  * This is open source software. Consider the people who will read your code, and make it look nice for them. It's sort of like driving a car: Perhaps you love doing donuts when you're alone, but with passengers the goal is to make the ride as smooth as possible.\n  * https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/index\n  * https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions\n  * https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/index\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 1.8525390625,
          "content": "<Project>\n  <PropertyGroup>\n    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>\n    <Nullable>enable</Nullable>\n    <Authors>borisdj</Authors>\n    <PackageProjectUrl>https://github.com/borisdj/EFCore.BulkExtensions</PackageProjectUrl>\n    <Company>CODIS LLC</Company>\n    <Version>9.0.0</Version>\n    <AssemblyVersion>$(Version).0</AssemblyVersion>\n    <FileVersion>$(Version).0</FileVersion>\n    <PackageIcon>EFCoreBulk.png</PackageIcon>\n    <PackageLicenseFile>LICENSE.txt</PackageLicenseFile>\n\t<PackageReleaseNotes>net 9 update</PackageReleaseNotes>\n    <PackageTags>EntityFrameworkCore Entity Framework Core .Net EFCore EF Core Bulk Batch Copy SqlBulkCopy Extensions Insert Update Delete Read Truncate SaveChanges</PackageTags>\n    <PackageRequireLicenseAcceptance>True</PackageRequireLicenseAcceptance>\n    <RepositoryUrl>https://github.com/borisdj/EFCore.BulkExtensions</RepositoryUrl>\n    <RepositoryType>Git</RepositoryType>\n    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>\n    <SignAssembly>true</SignAssembly>\n    <AssemblyOriginatorKeyFile>..\\Keys\\EFCore.BulkExtensions.snk</AssemblyOriginatorKeyFile>\n    <DelaySign>false</DelaySign>\n    <GenerateDocumentationFile>true</GenerateDocumentationFile>\n    <LangVersion>latest</LangVersion>\n    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>\n    <PackageOutputPath>../Nugets</PackageOutputPath> \n    <PackageReadmeFile>README.md</PackageReadmeFile>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageReference Include=\"StrongNamer\" Version=\"0.2.5\" PrivateAssets=\"All\" />\n  </ItemGroup>\n  <ItemGroup>\n    <None Include=\"..\\README.md\" Pack=\"true\" PackagePath=\"\" />\n    <None Include=\"..\\LICENSE.txt\" Pack=\"true\" PackagePath=\"\" />\n    <None Include=\"EFCoreBulk.png\" Pack=\"true\" PackagePath=\"\" />\n  </ItemGroup>\n</Project>\n"
        },
        {
          "name": "EFCore.BulkExtensions.Core",
          "type": "tree",
          "content": null
        },
        {
          "name": "EFCore.BulkExtensions.MySql",
          "type": "tree",
          "content": null
        },
        {
          "name": "EFCore.BulkExtensions.PostgreSql",
          "type": "tree",
          "content": null
        },
        {
          "name": "EFCore.BulkExtensions.SqlServer",
          "type": "tree",
          "content": null
        },
        {
          "name": "EFCore.BulkExtensions.Sqlite",
          "type": "tree",
          "content": null
        },
        {
          "name": "EFCore.BulkExtensions.Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "EFCore.BulkExtensions.sln",
          "type": "blob",
          "size": 4.794921875,
          "content": "Microsoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.4.32804.182\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"EFCore.BulkExtensions.Tests\", \"EFCore.BulkExtensions.Tests\\EFCore.BulkExtensions.Tests.csproj\", \"{2328B243-982C-47B7-885B-999231149C72}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"EFCore.BulkExtensions\", \"EFCore.BulkExtensions\\EFCore.BulkExtensions.csproj\", \"{6796CE3B-B8AA-4F6E-ADAE-DDA86CF79882}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"EFCore.BulkExtensions.Core\", \"EFCore.BulkExtensions.Core\\EFCore.BulkExtensions.Core.csproj\", \"{098F9FE6-0054-4907-9F46-D55D63077BCB}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"EFCore.BulkExtensions.MySql\", \"EFCore.BulkExtensions.MySql\\EFCore.BulkExtensions.MySql.csproj\", \"{56BE5934-DE55-43D5-B534-F44AF96093D1}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"EFCore.BulkExtensions.PostgreSql\", \"EFCore.BulkExtensions.PostgreSql\\EFCore.BulkExtensions.PostgreSql.csproj\", \"{1FB8C964-B38B-4A2F-848B-A5FCDD45354A}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"EFCore.BulkExtensions.Sqlite\", \"EFCore.BulkExtensions.Sqlite\\EFCore.BulkExtensions.Sqlite.csproj\", \"{C5C3B567-C045-40DD-8AB3-E437750EC8EA}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"EFCore.BulkExtensions.SqlServer\", \"EFCore.BulkExtensions.SqlServer\\EFCore.BulkExtensions.SqlServer.csproj\", \"{8879D6FE-62DB-49DF-A8DF-70AD386C9FC6}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"EFCore.BulkExtensions.PerProvider\", \"EFCore.BulkExtensions.PerProvider\", \"{2DFD1CF8-67D7-4B56-B131-CE01B1F2DC7C}\"\nEndProject\nGlobal\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{1FB8C964-B38B-4A2F-848B-A5FCDD45354A} = {2DFD1CF8-67D7-4B56-B131-CE01B1F2DC7C}\n\t\t{56BE5934-DE55-43D5-B534-F44AF96093D1} = {2DFD1CF8-67D7-4B56-B131-CE01B1F2DC7C}\n\t\t{8879D6FE-62DB-49DF-A8DF-70AD386C9FC6} = {2DFD1CF8-67D7-4B56-B131-CE01B1F2DC7C}\n\t\t{C5C3B567-C045-40DD-8AB3-E437750EC8EA} = {2DFD1CF8-67D7-4B56-B131-CE01B1F2DC7C}\n\tEndGlobalSection\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{098F9FE6-0054-4907-9F46-D55D63077BCB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{098F9FE6-0054-4907-9F46-D55D63077BCB}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{098F9FE6-0054-4907-9F46-D55D63077BCB}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{098F9FE6-0054-4907-9F46-D55D63077BCB}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{1FB8C964-B38B-4A2F-848B-A5FCDD45354A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{1FB8C964-B38B-4A2F-848B-A5FCDD45354A}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{1FB8C964-B38B-4A2F-848B-A5FCDD45354A}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{1FB8C964-B38B-4A2F-848B-A5FCDD45354A}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{2328B243-982C-47B7-885B-999231149C72}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{2328B243-982C-47B7-885B-999231149C72}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{2328B243-982C-47B7-885B-999231149C72}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{2328B243-982C-47B7-885B-999231149C72}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{56BE5934-DE55-43D5-B534-F44AF96093D1}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{56BE5934-DE55-43D5-B534-F44AF96093D1}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{56BE5934-DE55-43D5-B534-F44AF96093D1}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{56BE5934-DE55-43D5-B534-F44AF96093D1}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{6796CE3B-B8AA-4F6E-ADAE-DDA86CF79882}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{6796CE3B-B8AA-4F6E-ADAE-DDA86CF79882}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{6796CE3B-B8AA-4F6E-ADAE-DDA86CF79882}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{6796CE3B-B8AA-4F6E-ADAE-DDA86CF79882}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{8879D6FE-62DB-49DF-A8DF-70AD386C9FC6}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{8879D6FE-62DB-49DF-A8DF-70AD386C9FC6}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{8879D6FE-62DB-49DF-A8DF-70AD386C9FC6}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{8879D6FE-62DB-49DF-A8DF-70AD386C9FC6}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{C5C3B567-C045-40DD-8AB3-E437750EC8EA}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{C5C3B567-C045-40DD-8AB3-E437750EC8EA}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{C5C3B567-C045-40DD-8AB3-E437750EC8EA}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{C5C3B567-C045-40DD-8AB3-E437750EC8EA}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {F6CFFD1D-D456-4A8F-86FC-7CF2C893AB08}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "EFCore.BulkExtensions",
          "type": "tree",
          "content": null
        },
        {
          "name": "EFCore8-version",
          "type": "tree",
          "content": null
        },
        {
          "name": "EFCoreBulkLogo.png",
          "type": "blob",
          "size": 87.369140625,
          "content": null
        },
        {
          "name": "EFCoreBulkLogo_small.png",
          "type": "blob",
          "size": 27.3564453125,
          "content": null
        },
        {
          "name": "Keys",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.3681640625,
          "content": "EFCore.BulkExtensions DUAL LICENSE AGREEMENT\nVersion 1.0, January 2024\nAUTHOR: Copyright (c) 2017-present: borisdj (Boris Djurdjevic)\nPUBLISHER: CODIS LLC\n\n\"You\" mean an individual or Legal Entity exercising permissions granted by this License.\n\"Software\" means source code and/or binary form and/or documentation.\n\"Package\": EFCore.BulkExtensions Software\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nBY INSTALLING, COPYING, OR OTHERWISE USING THE PRODUCT, YOU AGREE TO BE\nBOUND BY ALL OF THE TERMS AND CONDITIONS OF THE DUAL LICENSE AGREEMENT.\n\nAUTHOR & PUBLISHER provide the Package under the DUAL LICENSE AGREEMENT\n\nLicenses are granted based upon You meeting the qualified criteria as stated.\nOnce granted, You must reference the granted license only in all documentation.\n\n(1) SOFTWARE is licensed to You under the free community License if meet at least 1 of conditions:\n- You are consuming the PACKAGE as a company/individual with less than 1 million USD annual gross revenue.\n- You are consuming the PACKAGE in the capacity of a Non-profit(Non-governmental) Organization or Registered Charity.\n- You are consuming the PACKAGE for use in software licensed under an Free Open Source license.\n\n(2) For all other scenarios, Packages in source code or binary form are licensed to You under the Commercial License which may be purchased by visiting:\nhttps://codis.tech/efcorebulk\n"
        },
        {
          "name": "MultiTargetRefs.txt",
          "type": "blob",
          "size": 2.08203125,
          "content": "<TargetFrameworks>net8.0;net7.0;net6.0;</TargetFrameworks>\n\n  <!-- net 7.0 -->\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'net7.0' \">\n    <PackageReference Include=\"Microsoft.Data.SqlClient\" Version=\"5.1.1\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Relational\" Version=\"7.0.11\" />\n\t<PackageReference Include=\"System.Diagnostics.DiagnosticSource\" Version=\"7.0.2\" />\n\t<PackageReference Include=\"NetTopologySuite.IO.SqlServerBytes\" Version=\"2.1.0\" />\n\t<PackageReference Include=\"EntityFrameworkCore.SqlServer.HierarchyId\" Version=\"4.0.0\" />\n\t<PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer.NetTopologySuite\" Version=\"7.0.11\" />\n\t<PackageReference Include=\"Npgsql.EntityFrameworkCore.PostgreSQL\" Version=\"7.0.11\" />\n    <PackageReference Include=\"Pomelo.EntityFrameworkCore.MySql\" Version=\"7.0.0\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Sqlite.Core\" Version=\"7.0.11\" />\n\t<PackageReference Include=\"NetTopologySuite.IO.SpatiaLite\" Version=\"2.0.0\" />\n\t<PackageReference Include=\"MedallionTopologicalSort\" Version=\"1.0.0\" />\n\t<PackageReference Include=\"StrongNamer\" Version=\"0.2.5\" />\n  </ItemGroup>\n  <!-- net 6.0 -->\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'net6.0' \">\n  \t<PackageReference Include=\"Microsoft.Data.SqlClient\" Version=\"2.1.6\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Relational\" Version=\"6.0.21\" />\n\t<PackageReference Include=\"System.Diagnostics.DiagnosticSource\" Version=\"6.0.1\" />\n\t<PackageReference Include=\"NetTopologySuite.IO.SqlServerBytes\" Version=\"2.1.0\" />\n\t<PackageReference Include=\"EntityFrameworkCore.SqlServer.HierarchyId\" Version=\"3.0.1\" />\n\t<PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer.NetTopologySuite\" Version=\"6.0.21\" />\n\t<PackageReference Include=\"Npgsql.EntityFrameworkCore.PostgreSQL\" Version=\"6.0.8\" />\n    <PackageReference Include=\"Pomelo.EntityFrameworkCore.MySql\" Version=\"6.0.2\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Sqlite.Core\" Version=\"6.0.21\" />\n\t<PackageReference Include=\"NetTopologySuite.IO.SpatiaLite\" Version=\"2.0.0\" />\n  </ItemGroup>"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 35.9091796875,
          "content": "# EFCore.BulkExtensions\nEntityFrameworkCore extensions (performance improvement - into overdrive):  \n-Bulk operations (super fast): **Insert, Update, Delete, Read, Upsert, Sync, SaveChanges.**  \n-Batch ops: **Update, Delete** - Deprecated from EF8 since EF7+ has native Execute-Up/Del.  \n-AddOps (additional): **Truncate.**  \nLibrary is Lightweight and very Efficient (warp speed), having all mostly used [CRUD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete) operation.  \nWas selected in top 20 [EF Core Extensions](https://docs.microsoft.com/en-us/ef/core/extensions/) recommended by Microsoft.  \nLatest version is using EF Core 9.  \nSupports all 4 major sql databases: **SQLServer, PostgreSQL, MySQL, SQLite.**  \nCheck out [Testimonials](https://docs.google.com/spreadsheets/d/e/2PACX-1vShdv2sTm3oQfowm9kVIx-PLBCk1lGQEa9E6n92-dX3pni7-XQUEp6taVcMSZVi9BaSAizv1YanWTy3/pubhtml?gid=801420190&single=true) from the Community and User Comments.  \nWith thousands of satisfied users and many happy customers from around the globe.  \nIcon>> and Logo (__):  \n<img src=\"/EFCore.BulkExtensions/EFCoreBulk.png\" height=60> & <img src=\"EFCoreBulkLogo_small.png\" height=60>  \n(f.forward | rocket time)\n\n**Also take a look into others packages:</br>\nOpen source (MIT or cFOSS) authored [.Net libraries](https://infopedia.io/dot-net-libraries/) (@[**Infopedia.io**](https://infopedia.io/) personal blog post)\n| ‚Ññ  | .Net library             | Description                                              |\n| -  | ------------------------ | -------------------------------------------------------- |\n| 1* | [EFCore.BulkExtensions](https://github.com/borisdj/EFCore.BulkExtensions) | EF Core Bulk CRUD Ops (**Flagship** Lib) |\n| 2  | [EFCore.UtilExtensions](https://github.com/borisdj/EFCore.UtilExtensions) | EF Core Custom Annotations and AuditInfo |\n| 3  | [EFCore.FluentApiToAnnotation](https://github.com/borisdj/EFCore.FluentApiToAnnotation) | Converting FluentApi configuration to Annotations |\n| 4  | [ExcelIO.FastMapper](https://github.com/borisdj/ExcelIO.FastMapper) | Excel Input Output Mapper to-from Poco & .xlsx with attribute |\n| 5  | [FixedWidthParserWriter](https://github.com/borisdj/FixedWidthParserWriter) | Reading & Writing fixed-width/flat data files |\n| 6  | [CsCodeGenerator](https://github.com/borisdj/CsCodeGenerator) | C# code generation based on Classes and elements |\n| 7  | [CsCodeExample](https://github.com/borisdj/CsCodeExample) | Examples of C# code in form of a simple tutorial |\n\n## License\nBulkExtensions [licensed](https://github.com/borisdj/EFCore.BulkExtensions/blob/master/LICENSE.txt) under [**Dual License v1**](https://codis.tech/efcorebulk) (**cFOSS**: conditionallyFree OSS - [OpenSource Sustainability](https://infopedia.io/solution-to-opensource-sustainability/) funding).  \nIf you do not meet criteria for free usage of software with community license then you have to buy commercial one.  \nIf eligible for free usage but still need  active support, consider purchasing Starter Lic.  \n\n## Support\nIf you find this project useful you can mark it by leaving a Github **Star** :star:  \nAnd even with Community license, if you want help Development, you can make a Donation:  \n[<img src=\"https://www.buymeacoffee.com/assets/img/custom_images/yellow_img.png\" alt=\"Buy Me A Coffee\" height=28>](https://www.buymeacoffee.com/boris.dj) _ or _ \n[![Button](https://img.shields.io/badge/donate-Bitcoin-orange.svg?logo=bitcoin):zap:](https://borisdj.net/donation/donate-btc.html)\n\n## Contributing\nPlease read [CONTRIBUTING](CONTRIBUTING.md) for details on code of conduct, and the process for submitting pull requests.  \nWhen opening issues do write detailed explanation of the problem or feature with reproducible example.  \nWant to **Contact** for Development & Consulting: [www.codis.tech](http://www.codis.tech) (*Quality Delivery*)  \n\n## Description\nSupported databases:  \n-**SQLServer** (or AzureSQL) under the hood uses [SqlBulkCopy](https://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlbulkcopy.aspx) for Insert, Update/Delete = BulkInsert + raw Sql [MERGE](https://docs.microsoft.com/en-us/sql/t-sql/statements/merge-transact-sql).  \n-**PostgreSQL** (9.5+) is using [COPY BINARY](https://www.postgresql.org/docs/9.2/sql-copy.html) combined with [ON CONFLICT](https://www.postgresql.org/docs/10/sql-insert.html#SQL-ON-CONFLICT) for Update.  \n-**MySQL** (8+) is using [MySqlBulkCopy](https://mysqlconnector.net/api/mysqlconnector/mysqlbulkcopytype/) combined with [ON DUPLICATE](https://dev.mysql.com/doc/refman/8.0/en/insert-on-duplicate.html) for Update.  \n-**SQLite** has no Copy tool, instead library uses [plain SQL](https://learn.microsoft.com/en-us/dotnet/standard/data/sqlite/bulk-insert) combined with [UPSERT](https://www.sqlite.org/lang_UPSERT.html).  \nBulk Tests can not have UseInMemoryDb because InMemoryProvider does not support Relational-specific methods.  \nInstead Test options are  SqlServer(Developer or Express), LocalDb(if alongside [Developer v.](https://stackoverflow.com/questions/42885377/sql-server-2016-developer-version-can-not-connect-to-localdb-mssqllocaldb?noredirect=1&lq=1)), or with  other adapters.\n\n## Installation\nAvailable on [![NuGet](https://img.shields.io/nuget/v/EFCore.BulkExtensions.svg)](https://www.nuget.org/packages/EFCore.BulkExtensions/)  [![Downloads](https://img.shields.io/nuget/dt/EFCore.BulkExtensions.svg)](https://www.nuget.org/packages/EFCore.BulkExtensions/)  \nMain nuget is for all Databases, and specific ones with single provider for those who need small packages.  \nPackage manager console command for installation: *Install-Package EFCore.BulkExtensions*  \nSpecific ones have adapter suffix: MainNuget + *.SqlServer/PostgreSql/MySql/Sqlite* \n(\n[![](https://img.shields.io/static/v1?label=&message=MS&color=darkred)](https://www.nuget.org/packages/EFCore.BulkExtensions.SqlServer)\n[![](https://img.shields.io/static/v1?label=&message=PG&color=blue)](https://www.nuget.org/packages/EFCore.BulkExtensions.PostgreSql)\n[![](https://img.shields.io/static/v1?label=&message=MY&color=chocolate)](https://www.nuget.org/packages/EFCore.BulkExtensions.MySql)\n[![](https://img.shields.io/static/v1?label=&message=LT&color=lightgreen)](https://www.nuget.org/packages/EFCore.BulkExtensions.Sqlite)\n)  \nIts assembly is [Strong-Named](https://docs.microsoft.com/en-us/dotnet/standard/library-guidance/strong-naming) and [Signed](https://github.com/borisdj/EFCore.BulkExtensions/issues/161) with a key.\n| Nuget | Target          | Used EF v.| For projects targeting          |\n| ----- | --------------- | --------- | ------------------------------- |\n| 9.x   | Net 9.0         | EF Core 9 | Net 9.0+                        |\n| 8.x   | Net 8.0         | EF Core 8 | Net 8.0+                        |\n| 7.x   | Net 6.0         | EF Core 7 | Net 7.0+ or 6.0+                |\n| 6.x   | Net 6.0         | EF Core 6 | Net 6.0+                        |\n| 5.x   | NetStandard 2.1 | EF Core 5 | Net 5.0+                        |\n| 3.x   | NetStandard 2.0 | EF Core 3 | NetCore(3.0+) or NetFrm(4.6.1+) [info](https://github.com/borisdj/EFCore.BulkExtensions/issues/271#issuecomment-567117488)|\n| 2.x   | NetStandard 2.0 | EF Core 2 | NetCore(2.0+) or NetFrm(4.6.1+) |\n| 1.x   | NetStandard 1.4 | EF Core 1 | NetCore(1.0+)                   |\n\nSupports follows official [.Net lifecycle](https://dotnet.microsoft.com/en-us/platform/support/policy/dotnet-core), currently v.9 as latest and v.8(LTS).\n\n## Usage\nIt's pretty simple and straightforward.  \n**Bulk** Extensions are made on *DbContext* and are used with entities List (supported both regular and Async methods):\n```C#\ncontext.BulkInsert(entities);                 context.BulkInsertAsync(entities);\ncontext.BulkInsertOrUpdate(entities);         context.BulkInsertOrUpdateAsync(entities);    //Upsert\ncontext.BulkInsertOrUpdateOrDelete(entities); context.BulkInsertOrUpdateOrDeleteAsync(entiti);//Sync\ncontext.BulkUpdate(entities);                 context.BulkUpdateAsync(entities);\ncontext.BulkDelete(entities);                 context.BulkDeleteAsync(entities);\ncontext.BulkRead(entities);                   context.BulkReadAsync(entities);\ncontext.BulkSaveChanges();                    context.BulkSaveChangesAsync();\n```\n\n**-MySQL** when running its Test for the first time execute sql command ([local-data](https://stackoverflow.com/questions/59993844/error-loading-local-data-is-disabled-this-must-be-enabled-on-both-the-client)): `SET GLOBAL local_infile = true;`  \n**-SQLite** requires package: [*SQLitePCLRaw.bundle_e_sqlite3*](https://docs.microsoft.com/en-us/dotnet/standard/data/sqlite/custom-versions?tabs=netcore-cli) with call to `SQLitePCL.Batteries.Init()`  \n\n**Batch** Extensions are made on *IQueryable* DbSet and can be used as in the following code segment.  \nThey are done as pure sql and no check is done whether some are prior loaded in memory and are being Tracked.  \n(*updateColumns* is optional param in which PropertyNames added explicitly when need update to it's default value)  \nInfo about [lock-escalation](https://docs.microsoft.com/en-us/troubleshoot/sql/performance/resolve-blocking-problems-caused-lock-escalation) in SQL Server with Batch iteration example as a solution at the bottom of code segment.\n```C#\n// Delete\ncontext.Items.Where(a => a.ItemId >  500).BatchDelete();\ncontext.Items.Where(a => a.ItemId >  500).BatchDeleteAsync();\n\n// Update (using Expression arg.) supports Increment/Decrement \ncontext.Items.Where(a => a.ItemId <= 500).BatchUpdate(a => new Item { Quantity = a.Quantity + 100});\ncontext.Items.Where(a => a.ItemId <= 500).BatchUpdateAsync(a => new Item {Quantity=a.Quantity+100});\n  // can be as value '+100' or as variable '+incrementStep' (int incrementStep = 100;)\n  \n// Update (via simple object)\ncontext.Items.Where(a => a.ItemId <= 500).BatchUpdate(new Item { Description = \"Updated\" });\ncontext.Items.Where(a => a.ItemId <= 500).BatchUpdateAsync(new Item { Description = \"Updated\" });\n// Update (via simple object) - requires additional Argument for setting to Property default value\nvar updateCols = new List<string> { nameof(Item.Quantity) }; //Update 'Quantity' to default val:'0'\nvar q = context.Items.Where(a => a.ItemId <= 500);\nint affected = q.BatchUpdate(new Item { Description=\"Updated\" }, updateCols); //result assigned aff.\n\n// Batch iteration (useful in same cases to avoid lock escalation)\ndo {\n    rowsAffected = query.Take(chunkSize).BatchDelete();\n} while (rowsAffected >= chunkSize);\n\n// Truncate\ncontext.Truncate<Entity>();\ncontext.TruncateAsync<Entity>();\n```\n\n## Performances\nFollowing are performances (in seconds)\n* For SQL Server (v. 2019):\n\n| Ops\\Rows | EF 100K | Bulk 100K | EF 1 MIL.| Bulk 1 MIL.|\n| -------- | ------: | --------: | -------: | ---------: |\n| Insert   |  11 s   | 3 s       |   60 s   | 15  s      |\n| Update   |   8 s   | 4 s       |   84 s   | 27  s      |\n| Delete   |  50 s   | 3 s       | 5340 s   | 15  s      |\n\nTestTable has 6 columns (Guid, string x2, int, decimal?, DateTime), all inserted and 2 were updated.  \nTest done locally on configuration: INTEL i7-10510U CPU 2.30GHz, DDR3 16 GB, SSD SAMSUNG 512 GB.  \nFor small data sets there is an overhead since most Bulk ops need to create Temp table and also Drop it after finish.  \nProbably good advice would be to use **Bulk ops for sets greater than 1000** (condition in DbContext or Repository).\n\n## Bulk info\nIf Windows Authentication is used then in ConnectionString there should be *Trusted_Connection=True;* because Sql credentials are required to stay in connection.  \nAnother Conn.Str. config that can be useful for operations with extremely large data sets is [*ConnectionTimeout*](https://learn.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlconnection.connectiontimeout?view=netframework-4.8.1&redirectedfrom=MSDN#System_Data_SqlClient_SqlConnection_ConnectionTimeout) that can be increased from default 15 s to 60 or more to avoid '*Execution Timeout*' if it were to occur.\n\nWhen used directly each of these operations are separate transactions and are automatically committed.  \nAnd if we need multiple operations in single procedure then explicit transaction should be used, for example:  \n```C#\nusing (var transaction = context.Database.BeginTransaction())\n{\n    context.BulkInsert(entities1List);\n    context.BulkInsert(entities2List);\n    transaction.Commit();\n}\n\n// or with newer synax as of C# 8.0 (auto disposable objects)\nusing var transaction = context.Database.BeginTransaction();\ncontext.BulkInsert(entities1List);\ncontext.BulkInsert(entities2List);\ntransaction.Commit();\n```\n\n**BulkInsertOrUpdate** method can be used when there is need for both operations but in one connection to database.  \nIt makes Update when PK(PrimaryKey) is matched, otherwise does Insert.  \n\n**BulkInsertOrUpdateOrDelete** effectively [synchronizes](https://www.mssqltips.com/sqlservertip/1704/using-merge-in-sql-server-to-insert-update-and-delete-at-the-same-time/) table rows with input data.  \nThose in Db that are not found in the list will be deleted.  \nPartial Sync can be done on table subset using expression set on config with method:  \n`bulkConfig.SetSynchronizeFilter<Item>(a => a.Quantity > 0);`  \nNot supported for SQLite (Lite has only UPSERT statement) nor currently for PostgreSQL. Here way to achieve sync functionality is to Select or BulkRead existing data from DB, split list into sublists and call separately Bulk methods for BulkInsertOrUpdate and Delete.\n\n**BulkRead** (SELECT and JOIN done in Sql)  \nUsed when need to Select from big List based on Unique Prop./Columns specified in config `UpdateByProperties`  \n```C#\n// instead of WhereIN which will TimeOut for List with over around 40 K records\nvar entities = context.Items.Where(a=> itemsNames.Contains(a.Name)).AsNoTracking().ToList();//SQL IN\n// or JOIN in Memory that loads entire table\nvar entities = context.Items.Join(itemsNames, a => a.Name, p => p,(a,p)=>a).AsNoTracking().ToList();\n\n// USE\nvar items = itemsNames.Select(a => new Item { Name = a }).ToList(); // Items list with only Name set\nvar bulkConfig = new BulkConfig { UpdateByProperties = new List<string> { nameof(Item.Name) } };\ncontext.BulkRead(items, bulkConfig); //Items list will be loaded from Db with data(other properties)\n```\nUseful config **ReplaceReadEntities** that works as *Contains/IN* and returns all which match the criteria (not unique).  \n[Example](https://github.com/borisdj/EFCore.BulkExtensions/issues/733) of special use case when need to BulkRead child entities after BulkReading parent list. \n\n**SaveChanges** uses Change Tracker to find all modified(CUD) entities and call proper BulkOperations for each table.  \nBecause it needs tracking it is slower than pure BulkOps but still much faster than regular SaveChanges.  \nWith config *OnSaveChangesSetFK* setting FKs can be controlled depending on whether PKs are generated in Db or in memory.  \nSupport for this method was added in version 6 of the library.  \nBefore calling this method newly created should be added into Range:\n```C#\ncontext.Items.AddRange(newEntities); // if newEntities is parent list it can have child sublists\ncontext.BulkSaveChanges();\n```\nPractical general usage could be made in a way to override regular SaveChanges and if any list of Modified entities entries is greater then say 1000 to redirect to Bulk version.\n\nNote: Bulk ops have optional argument *Type type* that can be set to type of Entity if list has dynamic runtime objects or is inherited from Entity class.\n\n## BulkConfig arguments\n\n**Bulk** methods can have optional argument **BulkConfig** with properties (bool, int, string, object, List<string>):  \n```C#\nPROPERTY : DEFAULTvalue\n----------------------------------------------------------------------------------------------\n 1 PreserveInsertOrder: true,                   21 PropertiesToInclude: null,\n 2 SetOutputIdentity: false,                    22 PropertiesToIncludeOnCompare: null,\n 3 SetOutputNonIdentityColumns: true,           23 PropertiesToIncludeOnUpdate: null,\n 4 LoadOnlyIncludedColumns: false,              24 PropertiesToExclude: null,\n 5 BatchSize: 2000,                             25 PropertiesToExcludeOnCompare: null,\n 6 NotifyAfter: null,                           26 PropertiesToExcludeOnUpdate: null,\n 7 BulkCopyTimeout: null,                       27 UpdateByProperties: null,\n 8 TrackingEntities: false,                     28 ReplaceReadEntities: false,\n 9 UseTempDB: false,                            29 EnableShadowProperties: false,\n10 UniqueTableNameTempDb: true,                 30 CustomSqlPostProcess: null,\n11 CustomDestinationTableName: null,            31 IncludeGraph: false,\n12 CustomSourceTableName: null,                 32 OmitClauseExistsExcept: false,\n13 CustomSourceDestinationMappingColumns: null, 33 DoNotUpdateIfTimeStampChanged: false,\n14 OnConflictUpdateWhereSql: null,              34 SRID: 4326,\n15 WithHoldlock: true,                          35 DateTime2PrecisionForceRound: false,\n16 CalculateStats: false,                       36 TemporalColumns: { \"PeriodStart\", \"PeriodEnd\" },\n17 SqlBulkCopyOptions: Default,                 37 OnSaveChangesSetFK: true,\n18 SqlBulkCopyColumnOrderHints: null,           38 IgnoreGlobalQueryFilters: false,\n19 DataReader: null,                            39 EnableStreaming: false,\n20 UseOptionLoopJoin:false,                     40 ApplySubqueryLimit: 0\n----------------------------------------------------------------------------------------------\nMETHOD: SetSynchronizeFilter<T>\n        SetSynchronizeSoftDelete<T>\n```\nIf we want to change defaults, BulkConfig should be added explicitly with one or more bool properties set to true, and/or int props like **BatchSize** to different number.   Config also has DelegateFunc for setting *Underlying-Connection/Transaction*, e.g. in UnderlyingTest.  \nWhen doing update we can chose to exclude one or more properties by adding their names into **PropertiesToExclude**, or if we need to update less then half column then **PropertiesToInclude** can be used. Setting both Lists are not allowed.\n\nWhen using the **BulkInsert_/OrUpdate** methods, you may also specify the **PropertiesToIncludeOnCompare** and **PropertiesToExcludeOnCompare** properties (only for SqlServer). By adding a column name to the *PropertiesToExcludeOnCompare*, will allow it to be inserted and updated but will not update the row if any of the other columns in that row did not change. For example, if you are importing bulk data and want to remove from comparison an internal *CreateDate* or *UpdateDate*, you add those columns to the *PropertiesToExcludeOnCompare*.  \nAnother option that may be used in the same scenario are the **PropertiesToIncludeOnUpdate** and **PropertiesToExcludeOnUpdate** properties. These properties will allow you to specify insert-only columns such as *CreateDate* and *CreatedBy*.\n\nIf we want Insert only new and skip existing ones in Db (Insert_if_not_Exist) then use *BulkInsertOrUpdate* with config\n`PropertiesToIncludeOnUpdate = new List<string> { \"\" }`\n\nAdditionally, there is **UpdateByProperties** for specifying custom properties, by which we want update to be done.  \nWhen setting multiple props in UpdateByProps then match done by columns combined, like unique constrains based on those cols.  \nUsing UpdateByProperties while also having Identity column requires that Id property be [Excluded](https://github.com/borisdj/EFCore.BulkExtensions/issues/131).  \nAlso, with PostgreSQL when matching is done it requires UniqueIndex so for custom UpdateByProperties that do not have Un.Ind., it is temporarily created in which case method can not be in transaction (throws: *current transaction is aborted; CREATE INDEX CONCURRENTLY cannot run inside a transaction block*).  \nSimilar is done with MySQL by temporarily adding UNIQUE CONSTRAINT.  \n\nIf **NotifyAfter** is not set it will have same value as _BatchSize_ while **BulkCopyTimeout** when not set, has SqlBulkCopy default, which is 30 seconds and if set to 0 it indicates no limit.    \n_SetOutputIdentity_ have a purpose only when PK has Identity (usually *int* type with AutoIncrement), while if PK is Guid(sequential) created in Application there is no need for them.  \nAlso, Tables with Composite Keys have no Identity column, so no functionality for them in that case either.\n```C#\nvar bulkConfig = new BulkConfig { SetOutputIdentity = true, BatchSize = 4000 };\ncontext.BulkInsert(entities, bulkConfig);\ncontext.BulkInsertOrUpdate(entities, new BulkConfig { SetOutputIdentity = true }); //e.g.\ncontext.BulkInsertOrUpdate(entities, b => b.SetOutputIdentity = true); //BulkConfig with Action arg.\n```\n\n**PreserveInsertOrder** is **true** by default and makes sure that entities are inserted to Db as ordered in entitiesList.  \nWhen a table has Identity column (int autoincrement) with 0 values in list, they will temporarily be automatically changed from 0s into range -N:-1.  \nOr it can be manually set with proper values for order (Negative values used to skip conflict with existing ones in Db).  \nHere single Id value itself doesn't matter, db will change it to next in sequence, what matters is their mutual relationship for sorting.  \nInsertion order is implemented with [TOP](https://docs.microsoft.com/en-us/sql/t-sql/queries/top-transact-sql) in conjunction with ORDER BY. [so/merge-into-insertion-order](https://stackoverflow.com/questions/884187/merge-into-insertion-order).  \nThis config should remain true when *SetOutputIdentity* is set to true on Entity containing NotMapped Property. [issues/76](https://github.com/borisdj/EFCore.BulkExtensions/issues/76)  \nWhen using **SetOutputIdentity** Id values will be updated to new ones from database.  \nWith BulkInsertOrUpdate on SQLServer for those that will be updated it has to match with Id column, or other unique column(s) if using UpdateByProperties in which case  [orderBy done with those props](https://github.com/borisdj/EFCore.BulkExtensions/issues/806) instead of ID, due to how Sql MERGE works. To preserve insert order by Id in this case alternative would be first to use BulkRead and find which records already exist, then split the list into 2 lists entitiesForUpdate and entitiesForInsert without configuring UpdateByProps).  \nAlso for SQLite combination of BulkInsertOrUpdate and IdentityId automatic set will not work properly since it does [not have full MERGE](https://github.com/borisdj/EFCore.BulkExtensions/issues/556) capabilities like SqlServer. Instead list can be split into 2 lists, and call separately BulkInsert and BulkUpdate.  \n  \n**SetOutputIdentity** is useful when BulkInsert is done to multiple related tables that have Identity column.  \nAfter Insert is done to the first table, we need Id-s (if using Option 1) that were generated in Db because they are FK(ForeignKey) in second table.  \nIt is implemented with [OUTPUT](https://docs.microsoft.com/en-us/sql/t-sql/queries/output-clause-transact-sql) as part of MERGE Query, so in this case, even the Insert is not done directly to TargetTable but to TempTable and then Merged with TargetTable.  \nWhen used Id-s will be updated on entitiesList, and if *PreserveInsertOrder* is set to *false* then entitiesList will be cleared and reloaded.  \nIf Entity has Json column with null value and we set OutputIdentity then also set OutputNonIdentity to false, because [JsonNull](https://github.com/borisdj/EFCore.BulkExtensions/issues/1572) mapping throws an exception.  \n**SetOutputNonIdentityColumns** used only when *SetOutputIdentity* is set to true, and if this remains True (which is default) all columns are reloaded from Db.  \nWhen changed to false, only the Identity column is loaded to reduce load back from DB for efficiency.  \n  \nExample of *SetOutputIdentity* with parent-child FK related tables:\n```C#\nint numberOfEntites = 1000;\nvar entities = new List<Item>();\nvar subEntities = new List<ItemHistory>();\nfor (int i = 1; i <= numberOfEntites; i++)\n{\n    var entity = new Item { Name = $\"Name {i}\" };\n    entity.ItemHistories = new List<ItemHistory>()\n    {\n        new ItemHistory { Remark = $\"Info {i}.1\" },\n        new ItemHistory { Remark = $\"Info {i}.2\" }\n    };\n    entities.Add(entity);\n}\n\n// Option 1 (recommended)\nusing (var transaction = context.Database.BeginTransaction())\n{\n    context.BulkInsert(entities, new BulkConfig { SetOutputIdentity = true });\n    foreach (var entity in entities) {\n        foreach (var subEntity in entity.ItemHistories) {\n            subEntity.ItemId = entity.ItemId; // sets FK to match linked PK that was generated in DB\n        }\n        subEntities.AddRange(entity.ItemHistories);\n    }\n    context.BulkInsert(subEntities);\n    transaction.Commit();\n}\n\n// Option 2 using Graph (only for SQL Server and only for simple relationship parent-child)\n// - all entities in relationship with main ones in list are BulkInsertUpdated\ncontext.BulkInsert(entities, b => b.IncludeGraph = true);\n  \n// Option 3 with BulkSaveChanges() - uses ChangeTracker so little slower then direct Bulk\ncontext.Items.AddRange(entities);\ncontext.BulkSaveChanges();\n```\nWhen **CalculateStats** set to True the result returned in `BulkConfig.StatsInfo` (*StatsNumber-Inserted/Updated/Deleted*).  \nIf used for pure Insert (with Batching) then SetOutputIdentity should also be configured because Merge is required.  \n**TrackingEntities** can be set to True if we want to have tracking of entities from BulkRead or if SetOutputIdentity is set.  \n**WithHoldlock** means [Serializable isolation](https://github.com/borisdj/EFCore.BulkExtensions/issues/41) level that locks the table (can have negative effect on [concurrency](https://www.linkedin.com/posts/milan-jovanovic_ef-core-doesnt-support-pessimistic-locking-activity-7184445256870825984-QSLU/)).  \n_ Setting it False can optionally be used to solve deadlock issue Insert.  \n**UseTempDB** when set then BulkOperation has to be [inside Transaction](https://github.com/borisdj/EFCore.BulkExtensions/issues/49).  \n**UniqueTableNameTempDb** when changed to false, temp table name will be only 'Temp' without random numbers.  \n**CustomDestinationTableName** can be set with 'TableName' only or with 'Schema.TableName'.  \n**CustomSourceTableName** when set enables source data from specified table already in Db, so input list not used and can be empty.  \n**CustomSourceDestinationMappingColumns** dict can be set only if CustomSourceTableName is configured and it is used for specifying Source-Destination column names when they are not the same. Example in test `DestinationAndSourceTableNameTest`.  \n**EnableShadowProperties** to add (normal) Shadow Property and to persist value. Disables automatic discriminator, use manual method.  \n**CustomSqlPostProcess** If used, should be set to valid pure Sql syntax, that would be run after main operation but before deleting temporary tables. One practical use case would be to move data from TempOutput table (set UniqueTableNameTempDb to False know the name) into a some Log table, optionally using FOR JSON PATH (example test: *CustomSqlPostProcessTest*).  \n**IncludeGraph** when set, all entities that have relations with main ones from the list are also merged into theirs tables.  \n**OmitClauseExistsExcept** removes the clause from Merge statement, required when having noncomparable types like XML, and useful when need to activate triggers even for same data.  \n_ Also in some [sql collation](https://github.com/borisdj/EFCore.BulkExtensions/issues/641), small and capital letters are considered same (case-insensitive) so for BulkUpdate set it false.  \n**DoNotUpdateIfTimeStampChanged** if set checks TimeStamp for Concurrency, ones with conflict will [not be updated](https://github.com/borisdj/EFCore.BulkExtensions/issues/469#issuecomment-803662721).  \nReturn info will be in *BulkConfig.**TimeStampInfo*** object within field `NumberOfSkippedForUpdate` and list `EntitiesOutput`.  \n**SRID** Spatial Reference Identifier - for SQL Server with NetTopologySuite.  \n**DateTime2PrecisionForceRound** If dbtype datetime2 has precision less then default 7, example 'datetime2(3)' SqlBulkCopy does Floor instead of Round so when this Property is set then Rounding will be done in memory to make sure inserted values are same as with regular SaveChanges.  \n**TemporalColumns** are shadow columns used for Temporal table. Default elements 'PeriodStart' and 'PeriodEnd' can be changed if those columns have custom names.  \n**OnSaveChangesSetFK** is used only for BulkSaveChanges. When multiply entries have FK relationship which is Db generated, this set proper value after reading parent PK from Db. IF PK are generated in memory like are some Guid then this can be set to false for better efficiency.  \n**ReplaceReadEntities** when set to True result of BulkRead operation will be provided using replace instead of update. Entities list parameter of BulkRead method will be repopulated with obtained data. Enables functionality of Contains/IN which will return all entities matching the criteria (does not have to be by unique columns).  \n**UseOptionLoopJoin** when set it appends 'OPTION (LOOP JOIN)' for SqlServer, to reduce potential deadlocks on tables that have FKs. Use this [sql hint](https://learn.microsoft.com/en-us/sql/t-sql/queries/hints-transact-sql-query?view=sql-server-ver16) as a last resort for experienced devs and db admins.  \n**ApplySubqueryLimit** Default is zero '0'. When set to larger value it appends: LIMIT 'N', to generated query. Used only with PostgreSql.\n\n**DataReader** can be used when DataReader is also configured and when set it is propagated to SqlBulkCopy util object.  \n**EnableStreaming** can be set to True if want to have tracking of entities from BulkRead or when SetOutputIdentity is set, useful for big field like blob, binary column.\n\n**SqlBulkCopyOptions** is Enum (only for SqlServer) with [[Flags]](https://stackoverflow.com/questions/8447/what-does-the-flags-enum-attribute-mean-in-c) attribute which enables specifying one or more options:  \n*Default, KeepIdentity, CheckConstraints, TableLock, KeepNulls, FireTriggers, UseInternalTransaction*  \nIf need to set Identity PK in memory, Not let DB do the autoincrement, then need to use **KeepIdentity**:  \n`var bulkConfig = new BulkConfig { SqlBulkCopyOptions = SqlBulkCopyOptions.KeepIdentity };`  \nUseful for example when copying from one Db to another.\n\n**OnConflictUpdateWhereSql<T>** To define conditional updates on merges, receives (existingTable, insertedTable).  \n--Example: `bc.OnConflictUpdateWhereSql = (ex, in) => $\"{in}.TimeUpdated > {ex}.TimeUpdated\";`  \n**SetSynchronizeFilter<T>** A method that receives and sets expression filter on entities to delete when using BulkInsertOrUpdateOrDelete. Those that are filtered out will be ignored and not deleted.  \n**SetSynchronizeSoftDelete<T>** A method that receives and sets expresion on entities to update property instead of deleting when using BulkInsertOrUpdateOrDelete.  \n`bulkConfig.SetSynchronizeSoftDelete<SomeObject>(a => new SomeObject { IsDeleted = true });`  \n\nLast optional argument is **Action progress** (Example in *EfOperationTest.cs* *RunInsert()* with *WriteProgress()*).\n```C#\ncontext.BulkInsert(entitiesList, null, (a) => WriteProgress(a));\n```\n\nFor **parallelism**, important notes are:  \n-SqlBulk [in Parallel](https://www.adathedev.co.uk/2011/01/sqlbulkcopy-to-sql-server-in-parallel.html)  \n-Concurrent operations not run in the [same Context instance](https://learn.microsoft.com/en-us/ef/core/miscellaneous/async)  \n-Import data to a single unindexed table with [table level lock](https://learn.microsoft.com/en-us/previous-versions/sql/sql-server-2005/ms186341(v=sql.90))  \n\nLibrary supports [Global Query Filters](https://docs.microsoft.com/en-us/ef/core/querying/filters) and [Value Conversions](https://docs.microsoft.com/en-us/ef/core/modeling/value-conversions) as well.  \nAdditionally BatchUpdate and named Property works with [EnumToString Conversion](https://github.com/borisdj/EFCore.BulkExtensions/issues/397)  \nIt can map [OwnedTypes](https://docs.microsoft.com/en-us/ef/core/modeling/owned-entities), also next are links with info how to achieve \n[NestedOwnedTypes](https://github.com/borisdj/EFCore.BulkExtensions/issues/167#issuecomment-476737959) and \n[OwnedInSeparateTable](https://github.com/borisdj/EFCore.BulkExtensions/issues/114#issuecomment-803462928)  \nOn PG when Enum is in OwnedType it needs to have [Converter explicitly](https://github.com/borisdj/EFCore.BulkExtensions/issues/1108) configured in *OnModelCreating*  \n\nTable splitting is somewhat specific but could be configured in the way [Set TableSplit](https://github.com/borisdj/EFCore.BulkExtensions/issues/352#issuecomment-803674404)  \nWith [Computed](https://docs.microsoft.com/en-us/ef/core/modeling/relational/computed-columns) and [Timestamp](https://docs.microsoft.com/en-us/ef/core/modeling/concurrency) Columns, it will work in a way that they are automatically excluded from Insert. And when combined with *SetOutputIdentity* they will be Selected.  \n[Spatial](https://docs.microsoft.com/en-us/sql/relational-databases/spatial/spatial-data-types-overview?view=sql-server-ver15) types, like Geometry, are also supported and if an Entity has one, clause *EXIST ... EXCEPT* is skipped because it's not comparable.  \nPerformance for bulk ops measured with `ActivitySources` named: '*BulkExecute*' (tags: '*operationType*', '*entitiesCount*')  \nBulk Extension methods can be [Overridden](https://github.com/borisdj/EFCore.BulkExtensions/issues/56) if required, for example to set AuditInfo.  \nIf having problems with Deadlock, there is useful info in [issue/46](https://github.com/borisdj/EFCore.BulkExtensions/issues/46).\n\n**TPH** ([Table-Per-Hierarchy](https://docs.microsoft.com/en-us/aspnet/core/data/ef-mvc/inheritance)) inheritance model can be set in 2 ways.  \nFirst is automatically by Convention, in which case the Discriminator column is not directly in the Entity but is [Shadow](https://learn.microsoft.com/en-us/ef/core/modeling/shadow-properties) Property.  \nAnd second is to explicitly define Discriminator property in Entity and configure it with `.HasDiscriminator()`.  \nAn important remark regarding the first case is that since we can not directly set a Discriminator to certain value we need first to add list of entities to DbSet where it will be set and after that we can call Bulk operation. Note that SaveChanges are not called, and we could optionally turn off TrackingChanges for performance. Example:\n```C#\npublic class Student : Person { ... }\ncontext.Students.AddRange(entities); //adding to Context so Shadow property 'Discriminator' gets set\ncontext.BulkInsert(entities);\n```\n**TPT** (Table-Per-Type) way it is [supported](https://github.com/borisdj/EFCore.BulkExtensions/issues/493).\n\n## Structure of SourceCode\n- Action Flow\n```C#\n_CLASSES:                    |DbContextBulk|SqlBulk     |ISqlOperations|SqlOperations  |\nDbContextBulkExtensions:     |-Transaction:|-Operation: |-Adapter:     |-ServerAdapter:|\n_METHODS: Sync/Async========]|[===========]|[==========]|[============]|[=============]|\nC { BulkInsert --------------|             |--Insert ---|--Insert -----|--Insert       |\nU / BulkInsertOrUpdate ------|             | \\                                         |\nU | BulkInsertOrUpdateOrDel.-|             |  \\                                        |\nU \\ BulkUpdate --------------|--Execute ---|--Merge ----|--Merge ------|--Merge        |\nD { BulkDelete --------------|             | /                                         |\nR { BulkRead ----------------|             |--Read -----|--Read -------|--Read         |\n- { Truncate ----------------|             |--Truncate -|--Truncate ---|--Truncate     |\n```\n- Projects Composition:\n\n| Num | Nuget                                  | Reference | Transitive dep. | Note         | \n| --- | -------------------------------------- | --------- | --------------- | ------------ | \n| [0] | EFCore.BulkExtensions.Core             |           |                 | shared       |\n| [1] | EFCore.BulkExtensions.***SqlServer***  | [0]       |                 | per provider |\n| [2] | EFCore.BulkExtensions.***PostgreSql*** | [0]       |                 | per provider |\n| [3] | EFCore.BulkExtensions.***MySql***      | [0]       |                 | per provider |\n| [4] | EFCore.BulkExtensions.***Sqlite***     | [0]       |                 | per provider |\n| [5] | **EFCore.BulkExtensions** - main one   | [1,2,3,4] | [0]             | has all      |\n\nEFCore.BulkExtensions is main Project and Nuget that references all other nugets.  \nOther per provider projects have only Core dependency and specific adapter implementation with needed packages.\n"
        }
      ]
    }
  ]
}