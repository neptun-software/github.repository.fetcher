{
  "metadata": {
    "timestamp": 1736710944341,
    "page": 593,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "MetacoSA/NBitcoin",
      "stars": 1897,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.119140625,
          "content": "root = true\n\n[*]\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nend_of_line = crlf\n\n[*.cs]\nindent_style = tab"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.458984375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.9638671875,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\nx64/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n#NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding addin-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n*.ncrunch*\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n\n# NuGet Packages Directory\npackages/\n*.nupkg\nNBitcoin.Mono.nuspec\nNBitcoin.nuspec\n\n## TODO: If the tool you use requires repositories.config uncomment the next line\n#!packages/repositories.config\n\n# Enable \"build/\" folder in the NuGet Packages folder since NuGet packages use it for MSBuild targets\n# This line needs to be after the ignore of the build folder (and the packages folder if the line above has been uncommented)\n!packages/build/\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n/.vs/config/applicationhost.config\n/NBitcoin.Portable/NBitcoin(MonoAndroid).csproj.bak\n/NBitcoin.Portable/NBitcoin(Mono).csproj.bak\n\n# .NET Core projects\n.vs/\nproject.lock.json\n.vscode/\n/NBitcoin.Tests/CanStoreInBlockRepository-Headers/StoreLock\n/NBitcoin.Tests/addrmancache.dat\n/NBitcoin.Tests/CanStoreBlocks/StoreLock\n/NBitcoin.Tests/libbitcoinconsensus-0.dll\n*.zip\n/dotnet-tpl35/\n/dotnet-tpl35\n/NBitcoin.Bench/BenchmarkDotNet.Artifacts\n.idea\n"
        },
        {
          "name": "Build",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0712890625,
          "content": "The MIT License (MIT)\r\n\r\nCopyright (c) 2023 Metaco SA\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n"
        },
        {
          "name": "NBitcoin.Altcoins",
          "type": "tree",
          "content": null
        },
        {
          "name": "NBitcoin.Bench",
          "type": "tree",
          "content": null
        },
        {
          "name": "NBitcoin.Secp256k1",
          "type": "tree",
          "content": null
        },
        {
          "name": "NBitcoin.TestFramework",
          "type": "tree",
          "content": null
        },
        {
          "name": "NBitcoin.Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "NBitcoin.sln",
          "type": "blob",
          "size": 3.564453125,
          "content": "Microsoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio Version 16\r\nVisualStudioVersion = 16.0.29519.181\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"NBitcoin\", \"NBitcoin\\NBitcoin.csproj\", \"{7B692A4C-412A-41BA-A1F8-5DF8F7450ABC}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"NBitcoin.Tests\", \"NBitcoin.Tests\\NBitcoin.Tests.csproj\", \"{9F7C1BCF-0BCE-41D3-9DF3-D4939A98636D}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"NBitcoin.Altcoins\", \"NBitcoin.Altcoins\\NBitcoin.Altcoins.csproj\", \"{3588C2BF-783C-4DBF-ADBC-16C78B8B109A}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"NBitcoin.TestFramework\", \"NBitcoin.TestFramework\\NBitcoin.TestFramework.csproj\", \"{653C0F21-25FE-4B72-95AC-20D070A45415}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"NBitcoin.Bench\", \"NBitcoin.Bench\\NBitcoin.Bench.csproj\", \"{153FEA8A-FA98-4ADD-8570-5FD88631C489}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"NBitcoin.Secp256k1\", \"NBitcoin.Secp256k1\\NBitcoin.Secp256k1.csproj\", \"{6E105AA4-767F-4045-B858-A7C400DCBC40}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{7B692A4C-412A-41BA-A1F8-5DF8F7450ABC}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{7B692A4C-412A-41BA-A1F8-5DF8F7450ABC}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{7B692A4C-412A-41BA-A1F8-5DF8F7450ABC}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{7B692A4C-412A-41BA-A1F8-5DF8F7450ABC}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{9F7C1BCF-0BCE-41D3-9DF3-D4939A98636D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{9F7C1BCF-0BCE-41D3-9DF3-D4939A98636D}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{9F7C1BCF-0BCE-41D3-9DF3-D4939A98636D}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{9F7C1BCF-0BCE-41D3-9DF3-D4939A98636D}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{3588C2BF-783C-4DBF-ADBC-16C78B8B109A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{3588C2BF-783C-4DBF-ADBC-16C78B8B109A}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{3588C2BF-783C-4DBF-ADBC-16C78B8B109A}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{3588C2BF-783C-4DBF-ADBC-16C78B8B109A}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{653C0F21-25FE-4B72-95AC-20D070A45415}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{653C0F21-25FE-4B72-95AC-20D070A45415}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{653C0F21-25FE-4B72-95AC-20D070A45415}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{653C0F21-25FE-4B72-95AC-20D070A45415}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{153FEA8A-FA98-4ADD-8570-5FD88631C489}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{153FEA8A-FA98-4ADD-8570-5FD88631C489}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{153FEA8A-FA98-4ADD-8570-5FD88631C489}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{153FEA8A-FA98-4ADD-8570-5FD88631C489}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{6E105AA4-767F-4045-B858-A7C400DCBC40}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{6E105AA4-767F-4045-B858-A7C400DCBC40}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{6E105AA4-767F-4045-B858-A7C400DCBC40}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{6E105AA4-767F-4045-B858-A7C400DCBC40}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {A1246380-43E4-4710-99A7-F7524458155E}\r\n\tEndGlobalSection\r\nEndGlobal\r\n"
        },
        {
          "name": "NBitcoin",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.4111328125,
          "content": "# NBitcoin\n\n[![Join the chat at https://chat.btcpayserver.org/btcpayserver/channels/nbitcoin](https://img.shields.io/badge/Community%20Chat-Mattermost-%230058cc)](https://chat.btcpayserver.org/btcpayserver/channels/nbitcoin)\n[![Build status](https://github.com/MetacoSA/NBitcoin/actions/workflows/CI.yml/badge.svg?branch=master&event=push)](https://github.com/MetacoSA/NBitcoin/actions?query=branch%3Amaster)\n\nNBitcoin is the most complete Bitcoin library for the .NET platform. It implements all most relevant Bitcoin Improvement Proposals (BIPs). It also provides low level access to Bitcoin primitives so you can easily build your application on top of it. Join us in our [mattermost chat room](https://chat.btcpayserver.org/btcpayserver/channels/nbitcoin).\nIt works on Windows, Mac and Linux with Xamarin, Unity, .NET Core or CLR. (Porting to Unity should not be that hard if you need it)\n\nThe best documentation available is our [eBook](https://programmingblockchain.gitbooks.io/programmingblockchain/content/), and the excellent unit tests. There are also some more resources below.\n\nYou can also browse the API easily through [the API reference](https://metacosa.github.io/NBitcoin/api/index.html).\n\n# How to use ?\n\nIn .NET Core:\n```bash\ndotnet add package NBitcoin\n```\nIf using legacy .NET Framework in Visual Studio\n```bash\nInstall-Package NBitcoin\n```\nYou can also just use the `Manage NuGet Package` window on your project in Visual Studio.\n\nGo on the [NuGet website](https://www.nuget.org/packages/NBitcoin/) for more information.\n\nThe packages support:\n\n* With full features: Windows Desktop applications, Mono Desktop applications and platforms supported by [.NET Standard 1.3](https://docs.microsoft.com/en-us/dotnet/articles/standard/library) (.NET Core, Xamarin IOS, Xamarin Android, UWP and more).\n* With limited features: platforms supported by [.NET Standard 1.1](https://docs.microsoft.com/en-us/dotnet/articles/standard/library) (Windows Phone, Windows 8.0 apps).\n\nTo compile it by yourself, you can git clone, open the project and hit the compile button in Visual Studio.\n\n\n # How to get started? \n \n First, you need to understand Bitcoin, for this read:\n * [Programming The Blockchain in C#](https://programmingblockchain.gitbooks.io/programmingblockchain/content/)\n\n Once you get familiar with Bitcoin terminology with this book, follow up by reading:\n\n * [NBitcoin documentation](https://github.com/NicolasDorier/NBitcoin.Docs/blob/master/README.md)\n\n This will teach you how to use NBitcoin in a practical way.\n\n# How to use with Altcoins ?\n\n> **Install-Package NBitcoin.Altcoins** \n\nFind more information [here](NBitcoin.Altcoins).\n\n# How to debug in NBitcoin source code?\n\nWhen a new version of `NBitcoin`, `NBitcoin.Altcoins` or `NBitcoin.TestFramework` is released on Nuget, we also upload a separate symbol package (`snupkg`) with SourceLink enabled. This is enabled from version `4.1.1.73`.\n\nThis means that it is possible to debug into NBitcoin code, and the source will be fetched transparently from github.\n\nThis works on both Visual Studio Code and Visual Studio for Windows.\n\n## Debug inside source with Visual Studio\n\nYou need to run at least Visual Studio 15.9.\nThen, you need to:\n\n* Go in `Tools / Options / Debugging / General` and turn off `Enable Just My Code`.\n* Go in `Tools / Options / Debugging / Symbols` and add `https://symbols.nuget.org/download/symbols` to the `Symbol file (.pdb) locations`, make sure it is checked.\n\nYou should also check `Microsoft Symbol Server` or your debugging experience in visual studio will be slowed down.\n\nNow you can Debug your project and step inside any call to NBitcoin.\n\n## Debug inside source with Visual Studio Code\n\nInside your `launch.json`, add the following to `.NET Core Launch (console)` configuration:\n\n```json\n\"justMyCode\": false,\n\"symbolOptions\": {\n    \"searchPaths\": [ \"https://symbols.nuget.org/download/symbols\" ],\n    \"searchMicrosoftSymbolServer\": true\n},\n```\n\nNow you can Debug your project and step inside any call to NBitcoin.\n\n# How to use with my own blockchain?\n\n Find more information [here](NBitcoin.Altcoins).\n\n# How to use in Unity?\n\nYou should use at least `Unity 2018.2` using `Script Runtime Version` `.NET 4.x Equivalent` and `Api Compatibility Level` `.NET Standard 2.0`.\nYou can see more on [this post](https://blogs.unity3d.com/2018/07/11/scripting-runtime-improvements-in-unity-2018-2/).\n\nThen you need to compile NBitcoin:\n\n```powershell\ngit clone https://github.com/MetacoSA/NBitcoin/\ncd NBitcoin/NBitcoin\ndotnet publish -c Release -f netstandard2.0\nRemove-Item -Force -Recurse .\\bin\\Release\\netstandard2.0\\publish\\runtimes\\\n```\n\nThen put the libraries of `.\\bin\\Release\\netstandard2.0` into your asset folder.\n\nIf you need altcoins support, use the same step but with `cd NBitcoin/NBitcoin.Altcoins` instead.\n\n# How to use in .NET Core\n\nIf you want to use .NET Core, first install .NET Core [as documented here](https://www.microsoft.com/net/core#windowsvs2017).\n\nThen:\n```\nmkdir MyProject\ncd MyProject\ndotnet new console\ndotnet add package NBitcoin\ndotnet restore\n```\nThen edit your Program.cs:\n```\nusing System;\nusing NBitcoin;\n\nnamespace _125350929\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World! \" + new Key().GetWif(Network.Main));\n        }\n    }\n}\n```\nYou can then run with\n```\ndotnet run\n```\n\nWe advise you to use [Visual Studio Code](https://code.visualstudio.com/) as the editor for your project.\n\n## Description\nNBitcoin notably includes:\n\n* A [TransactionBuilder](http://www.codeproject.com/Articles/835098/NBitcoin-Build-Them-All) supporting Stealth, Open Asset, and all standard transactions\n* Full script evaluation and parsing\n* A RPC Client\n* A Rest Client\n* The parsing of standard scripts and creation of custom ones\n* The serialization of blocks, transactions and scripts\n* The signing and verification with private keys (with support for compact signatures) for proving ownership\n* Bloom filters and partial merkle trees\n* Segregated Witness ([BIP 141](https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki), [BIP 143](https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki), [BIP 144](https://github.com/bitcoin/bips/blob/master/bip-0144.mediawiki))\n* Bech32 segwit address implementation with error detection [BIP 173](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki)\n* Mnemonic code for generating deterministic keys ([BIP 39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki)), credits to [Thasshiznets](https://github.com/Thashiznets/BIP39.NET)\n* Hierarchical Deterministic Wallets ([BIP 32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki))\n* Payment URLs ([BIP 21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki))\n* Full Bitcoin P2P implementation with SOCKS5 support for connecting through Tor\n* [A C# implementation of secp256k1](NBitcoin.Secp256k1/README.md)\n\nPlease read our [ebook](https://programmingblockchain.gitbooks.io/programmingblockchain/content/) to understand the capabilities.\n\nNBitcoin is inspired by Bitcoin Core code but provides a simpler object oriented API (e.g., new Key().PubKey.Address.ToString() to generate a key and get the associated address). It relies on the BouncyCastle cryptography library instead of OpenSSL, yet replicates OpenSSL bugs to guarantee compatibility. NBitcoin also ports the integrality of Bitcoin Core unit tests with their original data in order to validate the compatibility of the two implementations.\n\nNBitcoin is licensed under the [MIT License](https://opensource.org/licenses/MIT) and we encourage you to use it to explore, learn, debug, play, share and create software for Bitcoin and with other Metaco services.\n\n## How to connect use a SOCKS5 proxy to connect to a Bitcoin node?\n\nHere an example which assume you run Tor with SOCKS5 proxy on port 9050.\n```csharp\nvar connectionParameters = new NodeConnectionParameters();\nconnectionParameters.TemplateBehaviors.Add(new SocksSettingsBehavior(Utils.ParseEndpoint(\"localhost\", 9050)));\nNode node = await Node.ConnectAsync(Network.Main, \"7xnmrhmkvptbcvpl.onion:8333\", connectionParameters);\nnode.VersionHandshake();\n```\n\n## Some OSS projects using NBitcoin\n\n* [Wasabi](http://github.com/zkSNACKs/WalletWasabi): Privacy focused, ZeroLink compliant Bitcoin wallet.\n\n* [StratisBitcoinFullNode](http://github.com/stratisproject/StratisBitcoinFullNode): Bitcoin full node in C# https://stratisplatform.com\n\n* [Breeze](http://github.com/stratisproject/Breeze): Breeze Wallet, the first full-block SPV bitcoin wallet \n\n* [BlockExplorer](http://github.com/stratisproject/BlockExplorer): A set of projects that can index and query stratis blockchains on the fullnode. \n\n* [BTCPay Server](http://github.com/btcpayserver/btcpayserver): A cross platform, self-hosted server compatible with Bitpay API \n\n* [NTumbleBit](http://github.com/NTumbleBit/NTumbleBit): TumbleBit Implementation in .NET Core \n\n* [BitPoker](http://github.com/bitcoinbrisbane/BitPoker): Decentralised peer to peer poker, using bitcoin http://www.bitpoker.io\n\n* [Zen-Wallet](http://github.com/zenprotocol/zen-wallet): Node and GUI for the Zen Protocol. https://www.zenprotocol.com\n\n* [Metaco-Trader](http://github.com/MetacoSA/Metaco-Trader): Bitcoin Wallet for advanced user based on a NBitcoin.Server \n\n* [Swarmops](http://github.com/Swarmops/Swarmops): Admin backend for any bitcoin-native or swarm organization http://sandbox.swarmops.com/\n\n* [Nako](http://github.com/CoinVault/Nako): A Bitcoin and Altcoin server api that indexes blockchain transactions and addresses \n\n* [NBXplorer](http://github.com/dgarage/NBXplorer): A minimalist UTXO tracker for HD Wallets with bitcoin based altcoin support \n\n* [UnitCurrency](http://github.com/unitcurrency/unitcurrency): UnitCoin - a hybrid scrypt PoW + PoS based cryptocurrency.\n\n* [Openchain](http://github.com/openchain/openchain): Openchain node reference implementation. https://www.openchain.org/\n\n* [BreezeProject](http://github.com/BreezeHub/BreezeProject): Breeze Masternode and Wallet with Breeze Privacy Protocol \n\n* [geewallet](https://gitlab.com/nblockchain/geewallet/): Non-custodial, minimalistic & pragmatist opensource crossplatform lightweight brainwallet to hold the most important cryptoassets in the same application with ease & peace of mind\n\n* [blockcore](https://github.com/block-core/blockcore): Modular Bitcoin fullnode implementation. https://www.blockcore.net/\n\n## Useful doc :\n\n* **Ebook** [Programming The Blockchain in C#](https://www.gitbook.com/book/programmingblockchain/programmingblockchain/details)\n\n* **NBitcoin Github** : [https://github.com/NicolasDorier/NBitcoin](https://github.com/NicolasDorier/NBitcoin \"https://github.com/NicolasDorier/NBitcoin\")\n\n* **NBitcoin Nuget** : [https://www.nuget.org/packages/NBitcoin/](https://www.nuget.org/packages/NBitcoin/ \"https://www.nuget.org/packages/NBitcoin/\")\n\n* **Intro**: [http://www.codeproject.com/Articles/768412/NBitcoin-The-most-complete-Bitcoin-port-Part-Crypt](http://www.codeproject.com/Articles/768412/NBitcoin-The-most-complete-Bitcoin-port-Part-Crypt)\n\n* **Stealth Payment**, and **BIP38** : [http://www.codeproject.com/Articles/775226/NBitcoin-Cryptography-Part](http://www.codeproject.com/Articles/775226/NBitcoin-Cryptography-Part)\n\n* **How to build transaction** : [http://www.codeproject.com/Articles/835098/NBitcoin-Build-Them-All](http://www.codeproject.com/Articles/835098/NBitcoin-Build-Them-All \"http://www.codeproject.com/Articles/835098/NBitcoin-Build-Them-All\")\n\n* **Using the NBitcoin Indexer** : [http://www.codeproject.com/Articles/819567/NBitcoin-Indexer-A-scalable-and-fault-tolerant-blo](http://www.codeproject.com/Articles/819567/NBitcoin-Indexer-A-scalable-and-fault-tolerant-blo \"http://www.codeproject.com/Articles/819567/NBitcoin-Indexer-A-scalable-and-fault-tolerant-blo\")\n\n* **How to Scan the blockchain** : [http://www.codeproject.com/Articles/784519/NBitcoin-How-to-scan-the-Blockchain](http://www.codeproject.com/Articles/784519/NBitcoin-How-to-scan-the-Blockchain \"http://www.codeproject.com/Articles/784519/NBitcoin-How-to-scan-the-Blockchain\") (You can dismiss the ScanState for that, now I concentrate on the indexer)\n\nPlease, use github issues for questions or feedback. For confidential requests or specific demands, contact us on [Metaco support](mailto:support@metaco.com \"support@metaco.com\").\n\n\n## Useful link for a free IDE :\nVisual Studio Community Edition : [https://www.visualstudio.com/products/visual-studio-community-vs](https://www.visualstudio.com/products/visual-studio-community-vs \"https://www.visualstudio.com/products/visual-studio-community-vs\")\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "icon.png",
          "type": "blob",
          "size": 5.3466796875,
          "content": null
        },
        {
          "name": "nicolasdorier.asc",
          "type": "blob",
          "size": 3.1064453125,
          "content": "-----BEGIN PGP PUBLIC KEY BLOCK-----\nComment: https://keybase.io/download\nVersion: Keybase Go 2.6.0 (linux)\n\n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\n=sNb2\n-----END PGP PUBLIC KEY BLOCK-----\n"
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}