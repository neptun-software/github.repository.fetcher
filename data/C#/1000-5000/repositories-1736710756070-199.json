{
  "metadata": {
    "timestamp": 1736710756070,
    "page": 199,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "robinrodricks/FluentFTP",
      "stars": 3175,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 3.955078125,
          "content": "# top-most EditorConfig file\nroot = true\n\n# Default settings:\n[*]\nindent_style = tab\ntrim_trailing_whitespace = true\ntrim_trailing_white_space_on_save = true\nend_of_line = crlf\n\n# Code files\n[*.{cs,vb}]\nindent_style = tab\n\n[*.cs]\n# New line preferences\ncsharp_new_line_before_open_brace = none\ncsharp_new_line_before_else                                              = true\ncsharp_new_line_before_catch                                             = true\ncsharp_new_line_before_finally                                           = true\ncsharp_new_line_before_members_in_object_initializers                    = true\ncsharp_new_line_before_members_in_anonymous_types                        = true\ncsharp_new_line_within_query_expression_clauses                          = true\n\n# Space preferences\ncsharp_space_after_cast                                                  = false\ncsharp_space_after_colon_in_inheritance_clause                           = true\ncsharp_space_after_comma                                                 = true\ncsharp_space_after_dot                                                   = false\ncsharp_space_after_keywords_in_control_flow_statements                   = true\ncsharp_space_after_semicolon_in_for_statement                            = true\ncsharp_space_around_binary_operators                                     = before_and_after\ncsharp_space_around_declaration_statements                               = do_not_ignore\ncsharp_space_before_colon_in_inheritance_clause                          = true\ncsharp_space_before_comma                                                = false\ncsharp_space_before_dot                                                  = false\ncsharp_space_before_open_square_brackets                                 = false\ncsharp_space_before_semicolon_in_for_statement                           = false\ncsharp_space_between_empty_square_brackets                               = false\ncsharp_space_between_method_call_empty_parameter_list_parentheses        = false\ncsharp_space_between_method_call_name_and_opening_parenthesis            = false\ncsharp_space_between_method_call_parameter_list_parentheses              = false\ncsharp_space_between_method_declaration_empty_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_name_and_open_parenthesis        = false\ncsharp_space_between_method_declaration_parameter_list_parentheses       = false\ncsharp_space_between_parentheses                                         = false\ncsharp_space_between_square_brackets                                     = false\n\n# Instance fields are camelCase and start with m_\ndotnet_naming_rule.camel_case_for_private_internal_fields.severity       = silent\ndotnet_naming_rule.camel_case_for_private_internal_fields.symbols        = private_internal_fields\ndotnet_naming_rule.camel_case_for_private_internal_fields.style          = camel_case_underscore_style\n\ndotnet_naming_symbols.private_internal_fields.applicable_kinds           = field\ndotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private, internal\n\ndotnet_naming_style.camel_case_underscore_style.required_prefix          = m_\ndotnet_naming_style.camel_case_underscore_style.capitalization           = camel_case\n\n# Locals and parameters are camelCase\ndotnet_naming_rule.locals_should_be_camel_case.severity = error\ndotnet_naming_rule.locals_should_be_camel_case.symbols = locals_and_parameters\ndotnet_naming_rule.locals_should_be_camel_case.style = camel_case_style\n\ndotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter, local\n\ndotnet_naming_style.camel_case_style.capitalization = camel_case\n\n# // Missing XML comment\ndotnet_diagnostic.CS1591.severity = none\n\n# // Use 'new(...)'\ndotnet_diagnostic.IDE0090.severity = none\n\n# // Make field readonly\ndotnet_diagnostic.IDE0044.severity = none\n\n# // Namespace does not match folder structure...\ndotnet_diagnostic.IDE0130.severity = none\n\n# // Method should have token as LAST parameter...\ndotnet_diagnostic.CA1068.severity = none"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.333984375,
          "content": "*/bin\r\n*/obj\r\n*/nuget\r\n\r\nAPI Reference.shfbproj_jp\r\nHelp\r\n\r\n*.sublime-workspace\r\n*.user\r\n*.suo\r\n*.nupkg\r\n.gitignore\r\nNuGetPackages\r\nReleases\r\nproject.lock.json\r\nproject.multitarget.json\r\n\r\nAPI_Reference_HTML.shfbproj_jp\r\nCHM\r\nHTML\r\nAPI_Reference_CHM.shfbproj_jp\r\n.DS_Store\r\n.vs\r\n\r\nFluentFTP.Tests/testdata\r\n*.yaml\r\n/Powershell/FluentFTP.dll\r\n"
        },
        {
          "name": "FUNDING.yml",
          "type": "blob",
          "size": 0.021484375,
          "content": "github: robinrodricks\n"
        },
        {
          "name": "FluentFTP.CSharpExamples",
          "type": "tree",
          "content": null
        },
        {
          "name": "FluentFTP.Dockers",
          "type": "tree",
          "content": null
        },
        {
          "name": "FluentFTP.Logging",
          "type": "tree",
          "content": null
        },
        {
          "name": "FluentFTP.Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "FluentFTP.VBExamples",
          "type": "tree",
          "content": null
        },
        {
          "name": "FluentFTP.Xunit",
          "type": "tree",
          "content": null
        },
        {
          "name": "FluentFTP.sln",
          "type": "blob",
          "size": 5.3134765625,
          "content": "ï»¿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.2.32616.157\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"FluentFTP\", \"FluentFTP\\FluentFTP.csproj\", \"{117F9BA2-711B-4C71-92EC-002220B157DD}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"CSharpExamples\", \"FluentFTP.CSharpExamples\\CSharpExamples.csproj\", \"{49B11591-C942-479F-A864-AB2738E50EF0}\"\nEndProject\nProject(\"{778DAE3C-4631-46EA-AA77-85C1314464D9}\") = \"VBExamples\", \"FluentFTP.VBExamples\\VBExamples.vbproj\", \"{FC62AA30-F9F0-4DC1-A9EA-51A24C624973}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"FluentFTP.Tests\", \"FluentFTP.Tests\\FluentFTP.Tests.csproj\", \"{0B17384E-6849-46D0-B880-2F97FE11A1B3}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"FluentFTP.Xunit\", \"FluentFTP.Xunit\\FluentFTP.Xunit.csproj\", \"{78BBB136-352C-4C06-A133-630C8AC57575}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"FluentFTP.Logging\", \"FluentFTP.Logging\\FluentFTP.Logging.csproj\", \"{611163CE-C9A0-45A6-9090-F7068AEF8D6B}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tDebug|x64 = Debug|x64\n\t\tRelease|Any CPU = Release|Any CPU\n\t\tRelease|x64 = Release|x64\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{117F9BA2-711B-4C71-92EC-002220B157DD}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{117F9BA2-711B-4C71-92EC-002220B157DD}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{117F9BA2-711B-4C71-92EC-002220B157DD}.Debug|x64.ActiveCfg = Debug|x64\n\t\t{117F9BA2-711B-4C71-92EC-002220B157DD}.Debug|x64.Build.0 = Debug|x64\n\t\t{117F9BA2-711B-4C71-92EC-002220B157DD}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{117F9BA2-711B-4C71-92EC-002220B157DD}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{117F9BA2-711B-4C71-92EC-002220B157DD}.Release|x64.ActiveCfg = Release|x64\n\t\t{117F9BA2-711B-4C71-92EC-002220B157DD}.Release|x64.Build.0 = Release|x64\n\t\t{49B11591-C942-479F-A864-AB2738E50EF0}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{49B11591-C942-479F-A864-AB2738E50EF0}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{49B11591-C942-479F-A864-AB2738E50EF0}.Debug|x64.ActiveCfg = Debug|x64\n\t\t{49B11591-C942-479F-A864-AB2738E50EF0}.Debug|x64.Build.0 = Debug|x64\n\t\t{49B11591-C942-479F-A864-AB2738E50EF0}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{49B11591-C942-479F-A864-AB2738E50EF0}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{49B11591-C942-479F-A864-AB2738E50EF0}.Release|x64.ActiveCfg = Release|x64\n\t\t{49B11591-C942-479F-A864-AB2738E50EF0}.Release|x64.Build.0 = Release|x64\n\t\t{FC62AA30-F9F0-4DC1-A9EA-51A24C624973}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{FC62AA30-F9F0-4DC1-A9EA-51A24C624973}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{FC62AA30-F9F0-4DC1-A9EA-51A24C624973}.Debug|x64.ActiveCfg = Debug|x64\n\t\t{FC62AA30-F9F0-4DC1-A9EA-51A24C624973}.Debug|x64.Build.0 = Debug|x64\n\t\t{FC62AA30-F9F0-4DC1-A9EA-51A24C624973}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{FC62AA30-F9F0-4DC1-A9EA-51A24C624973}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{FC62AA30-F9F0-4DC1-A9EA-51A24C624973}.Release|x64.ActiveCfg = Release|x64\n\t\t{FC62AA30-F9F0-4DC1-A9EA-51A24C624973}.Release|x64.Build.0 = Release|x64\n\t\t{0B17384E-6849-46D0-B880-2F97FE11A1B3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{0B17384E-6849-46D0-B880-2F97FE11A1B3}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{0B17384E-6849-46D0-B880-2F97FE11A1B3}.Debug|x64.ActiveCfg = Debug|x64\n\t\t{0B17384E-6849-46D0-B880-2F97FE11A1B3}.Debug|x64.Build.0 = Debug|x64\n\t\t{0B17384E-6849-46D0-B880-2F97FE11A1B3}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{0B17384E-6849-46D0-B880-2F97FE11A1B3}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{0B17384E-6849-46D0-B880-2F97FE11A1B3}.Release|x64.ActiveCfg = Release|x64\n\t\t{0B17384E-6849-46D0-B880-2F97FE11A1B3}.Release|x64.Build.0 = Release|x64\n\t\t{78BBB136-352C-4C06-A133-630C8AC57575}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{78BBB136-352C-4C06-A133-630C8AC57575}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{78BBB136-352C-4C06-A133-630C8AC57575}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{78BBB136-352C-4C06-A133-630C8AC57575}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{78BBB136-352C-4C06-A133-630C8AC57575}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{78BBB136-352C-4C06-A133-630C8AC57575}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{78BBB136-352C-4C06-A133-630C8AC57575}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{78BBB136-352C-4C06-A133-630C8AC57575}.Release|x64.Build.0 = Release|Any CPU\n\t\t{611163CE-C9A0-45A6-9090-F7068AEF8D6B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{611163CE-C9A0-45A6-9090-F7068AEF8D6B}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{611163CE-C9A0-45A6-9090-F7068AEF8D6B}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{611163CE-C9A0-45A6-9090-F7068AEF8D6B}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{611163CE-C9A0-45A6-9090-F7068AEF8D6B}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{611163CE-C9A0-45A6-9090-F7068AEF8D6B}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{611163CE-C9A0-45A6-9090-F7068AEF8D6B}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{611163CE-C9A0-45A6-9090-F7068AEF8D6B}.Release|x64.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {DE786527-BCE1-4DCA-9792-23B6E31892E6}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "FluentFTP",
          "type": "tree",
          "content": null
        },
        {
          "name": "ISSUE_TEMPLATE.md",
          "type": "blob",
          "size": 0.708984375,
          "content": "**FTP Server OS:** Unix / Windows / Embedded\n\n**FTP Server Type:** Vsftpd / glFTPd / BFTPd / ProFTPD / Pure-FTPd / IBM CS FTP (z/OS, OS/400) / Windows CE / Windows Server IIS / Vax / VMS / OpenVMS / Tandem / HP NonStop\n\n**Client Computer OS:** Windows / Ubuntu / Debian / Linux Mint / Arch Linux\n\n**FluentFTP Version:** ?\n\n**Framework:** .NET 2 / 3.5 / 4 / 5 / 6 / 7 / 8 / UWP / Xamarin / Mono\n\n<write details about your bug report / feature request here>\n\n**Logs :**\n\n<!---\nPlease generate VERBOSE logs from FluentFTP and paste them in the marked area below.\nSee this link for steps :\n\nhttps://github.com/robinrodricks/FluentFTP/wiki/Logging#how-do-i-trace-ftp-commands-for-debugging\n-->\n\n```\n\n<paste VERBOSE logs here>\n\n```\n"
        },
        {
          "name": "LICENSE.TXT",
          "type": "blob",
          "size": 1.06640625,
          "content": "Copyright (c) 2015 Robin Rodricks and FluentFTP Contributors\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n"
        },
        {
          "name": "Powershell",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.779296875,
          "content": "<p align=\"center\">\n<img src=\"https://github.com/robinrodricks/FluentFTP/raw/master/.github/logo-new.png\" alt=\"FluentFTP\" />\n</p>\n\n<p align=\"center\">\n<a href=\"https://www.nuget.org/packages/FluentFTP\"><img src=\"https://img.shields.io/nuget/vpre/FluentFTP.svg\" alt=\"Version\" /></a>\n<a href=\"https://www.nuget.org/packages/FluentFTP\"><img src=\"https://img.shields.io/nuget/dt/FluentFTP.svg\" alt=\"Downloads\" /></a>\n<a href=\"https://github.com/robinrodricks/FluentFTP/graphs/contributors\"><img src=\"https://img.shields.io/github/contributors/robinrodricks/FluentFTP.svg\" alt=\"GitHub contributors\" /></a>\n<a href=\"https://app.codacy.com/gh/robinrodricks/FluentFTP/dashboard\"><img src=\"https://app.codacy.com/project/badge/Grade/8bc33aa55cb8494da3a7a07dba5316f7\" alt=\"Codacy Badge\" /></a>\n<a href=\"https://github.com/robinrodricks/FluentFTP/blob/master/LICENSE.TXT\"><img src=\"https://img.shields.io/github/license/robinrodricks/FluentFTP.svg\" alt=\"License\" /></a>\n<a href=\"https://www.bestpractices.dev/projects/6661\"><img src=\"https://www.bestpractices.dev/badge_static/passing\" alt=\"OpenSSF Best Practices\" /></a>\n</p>\n\n<p align=\"center\">\n    <b>FluentFTP is free, but powered by</b> <a href=\"https://github.com/sponsors/robinrodricks\"><b>your donations</b></a>\n</p>\n\nFluentFTP is a fully managed FTP and FTPS client library for .NET & .NET Standard, optimized for speed. It provides extensive FTP commands, File uploads/downloads, SSL/TLS connections, Automatic directory listing parsing, File hashing/checksums, File permissions/CHMOD, FTP proxies, FXP transfers, UTF-8 support, Async/await support, Powershell support and more.\n\nIt is written entirely in C#, with no external dependency. It has an extensive automated test suite which tests all its functionality against local FTP server docker containers.\n\nFluentFTP is released under the permissive MIT License, so it can be used in both proprietary and free/open source applications. \n\n![Features](https://github.com/robinrodricks/FluentFTP/raw/master/.github/features-5.png)\n\n\n## Features\n\n  - Full support for [FTP](https://github.com/robinrodricks/FluentFTP/wiki/FTP-Support), [FXP](https://github.com/robinrodricks/FluentFTP/wiki/FXP-Server-To-Server#how-does-fxp-transfer-work), [FTPS](https://github.com/robinrodricks/FluentFTP/wiki/FTP-Connection#faq_ftps), [FTPS with TLS 1.3](https://github.com/robinrodricks/FluentFTP/wiki/FTPS-Connection-using-GnuTLS), [FTPS with client certificates](https://github.com/robinrodricks/FluentFTP/wiki/FTP-Connection#faq_certs) and [FTPS Proxies](https://github.com/robinrodricks/FluentFTP/wiki/FTPS-Proxies)\n  - Full support for over 30 [FTP server types](#server-support) with integration tests for all major servers\n  - **File management:**\n    - File and directory listing for [all major server types](https://github.com/robinrodricks/FluentFTP/wiki/Directory-Listing#faq_listings) (Unix, Windows/IIS, Azure, Pure-FTPd, ProFTPD, Vax, VMS, OpenVMS, Tandem, HP NonStop Guardian, [IBM z/OS and OS/400](https://github.com/robinrodricks/FluentFTP/wiki/IBM-zOS-and-OS-400-Support), Windows CE, Serv-U, etc)\n\t- Fully recursive directory listing and directory deletion (manual recursion and server-side recursion)\n    - Easily upload and download a file from the server with [progress tracking](https://github.com/robinrodricks/FluentFTP/wiki/File-Transfer#how-can-i-track-the-progress-of-file-transfers)\n    - Easily upload and download a directory from the server with [easy synchronization modes](https://github.com/robinrodricks/FluentFTP/wiki/Directory-Transfer#what-is-the-difference-between-the-mirror-and-update-modes)\n\t- Easily transfer a file or folder directly from [one server to another](https://github.com/robinrodricks/FluentFTP/wiki/FXP-Server-To-Server#how-does-fxp-transfer-work) using the FXP protocol\n\t- Conditionally transfer files using [rule based whitelisting and blacklisting](https://github.com/robinrodricks/FluentFTP/wiki/Rules#what-kinds-of-rules-are-supported-and-how-do-rules-work)\n    - Automatically [verify the hash](https://github.com/robinrodricks/FluentFTP/wiki/File-Hashing#faq_verifyhash) of a file & retry transfer if hash mismatches\n    - Configurable error handling (ignore/abort/throw) for multi-file transfers\n    - Easily read and write file data from the server using standard streams\n    - Create, append, read, write, rename, move and delete files and folders\n    - Recursively deletes folders and all its contents\n    - Get file/folder info (exists, size, security flags, modified date/time)\n    - Get and set [file permissions](https://github.com/robinrodricks/FluentFTP/wiki/File-Permissions) (owner, group, other)\n    - Absolute or relative paths (relative to the [\"working directory\"](https://github.com/robinrodricks/FluentFTP/wiki/File-Management))\n    - Compare a local file against a remote file using the [hash/checksum](https://github.com/robinrodricks/FluentFTP/wiki/File-Hashing#faq_comparefile) (MD5, CRC32, SHA-1, SHA-256, SHA-512)\n    - Dereference of symbolic links to calculate the linked file/folder\n\t- [Throttling](https://github.com/robinrodricks/FluentFTP/wiki/File-Transfer#faq_throttle) of uploads and downloads with configurable speed limit\n\t- FTP monitors to [monitor folders on FTP servers](https://github.com/robinrodricks/FluentFTP/wiki/FTPS-Monitor) and trigger events when files are added/changed/removed\n  - **FTP protocol:**\n    - Automatic [FTP/FTPS connection negotiation](https://github.com/robinrodricks/FluentFTP/wiki/Automatic-Connection#faq_autoconnect) and detection of [working connection settings](https://github.com/robinrodricks/FluentFTP/wiki/Automatic-Connection#faq_autodetect)\n    - Automatic detection of the [FTP server software](https://github.com/robinrodricks/FluentFTP/wiki/Server-Information#faq_servertype) and its [capabilities](https://github.com/robinrodricks/FluentFTP/wiki/Server-Information#faq_serverspecific)\n\t- Automatic [reconnection of FTP connections](https://github.com/robinrodricks/FluentFTP/wiki/Automatic-Reconnection) for broken or degraded sockets\n    - Extensive support for [FTP commands](https://github.com/robinrodricks/FluentFTP/wiki/FTP-Support), including some server-specific commands\n    - Easily send [server-specific](https://github.com/robinrodricks/FluentFTP/issues/88) FTP commands using the `Execute()` method\n    - Explicit and Implicit [SSL connections](https://github.com/robinrodricks/FluentFTP/wiki/FTP-Connection#faq_ftps) are supported for the control and data connections using .NET's `SslStream`\n    - Passive and active data connections (PASV, EPSV, PORT and EPRT)\n    - Supports Unix CHMOD, PRET, ProFTPD's SITE MKDIR and RMDIR commands, Serv-U's RMDA command\n    - Supports Realm and directory navigation for [IBM z/OS and OS/400](https://github.com/robinrodricks/FluentFTP/wiki/IBM-zOS-and-OS-400-Support)\n    - Supports all types of [FTP Proxies](https://github.com/robinrodricks/FluentFTP/wiki/FTPS-Proxies) (HTTP 1.1, SOCKS4, SOCKS4a, SOCKS5, User@Host, BlueCoat)\n    - [FTP command logging](https://github.com/robinrodricks/FluentFTP/wiki/Logging#faq_log) using `TraceListeners` (passwords omitted) to [trace](https://github.com/robinrodricks/FluentFTP/wiki/Logging#faq_trace) or [log output](https://github.com/robinrodricks/FluentFTP/wiki/Logging#faq_logfile) to a file\n    - SFTP is not supported as it is FTP over SSH, a completely different protocol (use [SSH.NET](https://github.com/sshnet/SSH.NET) for that)\n  - **Asynchronous support:**\n    - Synchronous and asynchronous methods using `async`/`await` for all operations\n    - Asynchronous support for the `IAsyncEnumerable` pattern for `GetListing` methods (see `GetListingAsyncEnumerable`)\n    - All asynchronous methods can be cancelled midway by passing a `CancellationToken`\n    - All asynchronous methods honor the `ReadTimeout` and automatically cancel themselves if timed out\n    - Asynchronous support for [progress tracking](https://github.com/robinrodricks/FluentFTP/wiki/File-Transfer#how-can-i-track-the-progress-of-file-transfers) of file transfers during data upload/download\n    - Implements its own internal locking in an effort to keep transactions synchronized\n  - **Extensible:**\n    - Easily add custom logging/tracing functionality using industry-standard [`ILogger`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.ilogger?view=dotnet-plat-ext-6.0) interface\n    - Easily add support for custom non-standard FTP servers (see the [Custom Servers](https://github.com/robinrodricks/FluentFTP/wiki/Custom-Servers) page)\n    - Easily add support for more file or directory filtering rules (simply extend [`FtpRule`](https://github.com/robinrodricks/FluentFTP/wiki/Class-FtpRule))\n    - Easily add support for more proxy types (simply extend [`FtpClientProxy`](https://github.com/robinrodricks/FluentFTP/blob/master/FluentFTP/Proxy/SyncProxy/FtpClientProxy.cs))\n    - Easily add unsupported directory listing parsers (see the [`CustomParser`](https://github.com/robinrodricks/FluentFTP/blob/master/FluentFTP.CSharpExamples/CustomParser.cs) example)\n\t- Easily add your own Powershell commands by extending the scripts in [`FluentFTP.ps1`](https://github.com/robinrodricks/FluentFTP/wiki/Powershell)\n\n\t\n## Releases\n\nStable binaries are released on NuGet, and contain everything you need to use FTP/FTPS in your .Net/CLR application.\n\n| Package      \t\t| Latest Version\t|  Downloads\t|   Docs\t| \n|---------------\t\t|-----------\t|-----------\t|-----------|\n| **[FluentFTP](https://www.nuget.org/packages/FluentFTP)**      \t|     [![Version](https://img.shields.io/nuget/vpre/FluentFTP.svg)](https://www.nuget.org/packages/FluentFTP) \t\t|  [![Downloads](https://img.shields.io/nuget/dt/FluentFTP.svg)](https://www.nuget.org/packages/FluentFTP) | [FluentFTP Docs](https://github.com/robinrodricks/FluentFTP/wiki) |\n| **[FluentFTP.Logging](https://www.nuget.org/packages/FluentFTP.Logging)**      \t|    [![Version](https://img.shields.io/nuget/vpre/FluentFTP.Logging.svg)](https://www.nuget.org/packages/FluentFTP.Logging)  \t\t| [![Downloads](https://img.shields.io/nuget/dt/FluentFTP.Logging.svg)](https://www.nuget.org/packages/FluentFTP.Logging) | [Logging Docs](https://github.com/robinrodricks/FluentFTP/wiki/Logging) |\n| **[FluentFTP.GnuTLS](https://www.nuget.org/packages/FluentFTP.GnuTLS)**      \t|    [![Version](https://img.shields.io/nuget/vpre/FluentFTP.GnuTLS.svg)](https://www.nuget.org/packages/FluentFTP.GnuTLS)  \t\t| [![Downloads](https://img.shields.io/nuget/dt/FluentFTP.GnuTLS.svg)](https://www.nuget.org/packages/FluentFTP.GnuTLS) | [GnuTLS Docs](https://github.com/robinrodricks/FluentFTP/wiki/FTPS-Connection-using-GnuTLS) |\n\nFor usage see the [Quick Start Example](https://github.com/robinrodricks/FluentFTP/wiki/Quick-Start-Example) and the [Documentation](https://github.com/robinrodricks/FluentFTP/wiki) wiki.\n\nFor features and fixes per release see [Release Notes](https://github.com/robinrodricks/FluentFTP/blob/master/RELEASES.md).\n\n\n\n## Server Support\n\nFluentFTP is a client library that can connect to these FTP servers and perform all FTP operations.\n\n| Server             | FTP/FTPS | Integration Tests | Special Features  |\n| ------------------ | --------- | ------------ |---------- |\n| Azure FTP          |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-commercial-orange) | âï¸ [Detected by Domain](https://github.com/robinrodricks/FluentFTP/wiki/Server-Information#azure), Auto Configuration |\n| Apache FTP         |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸ |  |\n| ABB IDAL           |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-commercial-orange) |  |\n| BFTPd              |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-supported-brightgreen) |  |\n| Cerberus           |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-commercial-orange) |  |\n| CrushFTP           |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-commercial-orange) |  |\n| FileZilla Server   |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-supported-brightgreen) |  |\n| FritzBox           |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-hardware%20required-red) |  |\n| FTP2S3 Gateway     |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-commercial-orange) |  |\n| glFTPd             |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-supported-brightgreen) |  |\n| GlobalScape EFT    |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-commercial-orange) |  |\n| Homegate FTP       |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-contributions%20welcome-blue) |  |\n| Huawei HG5xxx      |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-hardware%20required-red) |  |\n| HP NonStop/Tandem  |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-hardware%20required-red) | âï¸ NonStop File Listing |\n| IBM z/OS   |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸ | ![i](https://img.shields.io/badge/-privately%20performed-yellow)   | âï¸ [zOS API](https://github.com/robinrodricks/FluentFTP/wiki/IBM-zOS-and-OS-400-Support), File Listing, File Size, Paths |\n| MikroTik RouterOS  |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-hardware%20required-red) |  |\n| OpenVMS            |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-commercial-orange) | âï¸ VMS File Listing, Paths, Capability Assumption |\n| ProFTPD            |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-supported-brightgreen) | âï¸ `SITE RMDIR` and `SITE MKDIR` Commands |\n| PureFTPd           |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-supported-brightgreen) |  |\n| PyFtpdLib          |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-supported-brightgreen) |  |\n| Rumpus             |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-commercial-orange) |  |\n| Serv-U             |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-commercial-orange) | âï¸ `RMDA` Command |\n| Solaris FTP        |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-commercial-orange) |  |\n| Titan FTP          |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-commercial-orange) |  |\n| TP-LINK            |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-hardware%20required-red) |  |\n| VsFTPd             |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-supported-brightgreen) |  |\n| Windows CE         |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-commercial-orange) | âï¸ Windows File Listing |\n| Windows Server/IIS |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-commercial-orange) | âï¸ Windows File Listing |\n| WS_FTP             |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-commercial-orange) |  |\n| WuFTPd             |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-contributions%20welcome-blue) | âï¸ Capability Assumption |\n| XLight             |  ![i](https://img.shields.io/badge/-supported-brightgreen)ï¸        | ![i](https://img.shields.io/badge/-contributions%20welcome-blue) |  |\n\n\n\n\n## Platform Support\n\nFluentFTP works on .NET and .NET Standard/.NET Core.\n\n| Platform      \t\t| Binaries Folder\t| \n|---------------\t\t|-----------\t\t|\n| **.NET 4.6.2**      \t| net462     \t\t| \n| **.NET 4.7.2**      \t| net472     \t\t| \n| **.NET 5.0**      \t| net50     \t\t| \n| **.NET 6.0**      \t| net60     \t\t| \n| **.NET 7.0**      \t| net70     \t\t| \n| **.NET Standard 2.0** | netstandard2.0\t| \n| **.NET Standard 2.1** | netstandard2.1\t| \n\nFluentFTP is also supported on these platforms: (via .NET Standard)\n\n  - **Mono** 4.6\n  - **Xamarin.iOS** 10.0\n  - **Xamarin.Android** 10.0\n  - **Universal Windows Platform** 10.0\n\nBinaries for all platforms are built from a single Visual Studio Project. You will need the latset [Visual Studio](https://visualstudio.microsoft.com/downloads/) to build or contribute to FluentFTP.\n\n\n## Example Usage\n\nTo get started, check out the [Quick start example in C#](https://github.com/robinrodricks/FluentFTP/wiki/Quick-Start-Example).\n\nWe also have extensive examples for all methods in [C#](https://github.com/robinrodricks/FluentFTP/tree/master/FluentFTP.CSharpExamples) and [VB.NET](https://github.com/robinrodricks/FluentFTP/tree/master/FluentFTP.VBExamples).\n\n## Documentation and FAQs\n\nCheck the [Wiki](https://github.com/robinrodricks/FluentFTP/wiki).\n\n## Tests\n\nWe have an extensive [automated test suite](https://github.com/robinrodricks/FluentFTP/wiki/Automated-Testing) that tests FluentFTP against many servers. We use docker to orchestrate containerized FTP servers that are used for testing.\n\n\n## Sponsorship\n\nHas FluentFTP made a difference for you or your organization? If so, consider [becoming a sponsor](https://github.com/sponsors/robinrodricks) to help keep the project thriving. Even a small monthly contribution, like $20, can make a meaningful impact.\n\nAs a seasoned freelancer with over a decade of experience, your support helps me continue dedicating time to these open-source projects while also supporting my family. Your contributions directly fuel the work that makes a difference to millions of developers around the world.\n\n## Contributors\n\nSpecial thanks to these awesome people who helped create FluentFTP!\n\n<!--\nhttps://contributors-img.web.app/image?repo=robinrodricks/FluentFTP\n-->\n\n<a href=\"https://github.com/robinrodricks/FluentFTP/graphs/contributors\">\n  <img src=\"https://github.com/robinrodricks/FluentFTP/raw/master/.github/contributors-3.png\" />\n</a>\n\n\n## Reporting Vulnerabilities\n\nAny security vulnerabilities that are found can be reported to the project owner at `r o b i n r o d r i c k s 7 at g m a i l`. No other direct correspondence will be entertained.\n\n## Software Support\n\nFluentFTP has received free software from these generous organizations:\n\n<table>\n<tr>\n\t<td width=\"200px\">\n\t\t<a href=\"https://www.jetbrains.com/\">\n\t\t<img src=\"https://github.com/robinrodricks/FluentFTP/raw/master/.github/jetbrains-logo.png\" />\n\t\t</a>\n\t</td>\n\t<td width=\"200px\">\n\t\t<a href=\"https://www.balsamiq.com/\">\n\t\t<img src=\"https://github.com/robinrodricks/FluentFTP/raw/master/.github/balsamiq-logo.png\" />\n\t\t</a>\n\t</td>\n\t<td width=\"200px\">\n\t\t<a href=\"https://www.yourkit.com/\">\n\t\t<img src=\"https://github.com/robinrodricks/FluentFTP/raw/master/.github/yourkit-logo.png\" />\n\t\t</a>\n\t</td>\n</tr>\n<tr>\n\t<td width=\"200px\">\n\t\tJetBrains provides cutting-edge IDE and developer productivity tools.\n\t</td>\n\t<td width=\"200px\">\n\t\tBalsamiq provides rapid and effective wireframing and UI design tools.\n\t</td>\n\t<td width=\"200px\">\n\t\tYourKit provides a market-leading intelligent <a href=\"https://www.yourkit.com/features/\">Java Profiler</a> and <a href=\"https://www.yourkit.com/dotnet/features/\">.NET Profiler</a>.\n\t</td>\n</tr>\n</table>\n"
        },
        {
          "name": "RELEASES.md",
          "type": "blob",
          "size": 84.0263671875,
          "content": "# Release Notes\n\n#### 52.0.0\n\n - **Time Zones**\n   - New: Time Zone conversion is performed using standard .NET `TimeZoneInfo` instead of hourly offset values\n   - New: `ClientTimeZone` and `ServerTimeZone` Properties to configure Time Zone conversion\n   - New: `SetClientTimeZone` and `SetServerTimeZone` Utility methods to configure Time Zone conversion\n - **FTP Monitoring**\n   - New: FTP monitors to detect added/updated/deleted files in remote FTP folders and send events to your application accordingly (`FtpMonitor`, `AsyncFtpMonitor`, `BlockingAsyncFtpMonitor`)\n   - New: FTP monitor event with details on changed files (`FtpMonitorEventArgs`)\n   - New: Sample code for `BlockingAsyncFtpMonitor`\n - **Testing**\n   - Fix: Total rewrite of FileZilla FTP server docker for integration testing (thanks @FanDjango)\n   - Fix: Updated tests for new TimeZone API\n - **Maintainance**\n   - Change: Allow overriding of download/upload internal methods in FTP client subclasses (`DownloadFileInternal` and `UploadFileInternal`)\n   - Change: Refactor file transfer and file listing utilities into static module classes\n   - Change: Improve performance of dictionary lookups (thanks @ssg)\n   - Fix: `LogMaskModule` throwing exception when `UserName` is empty (thanks @ssg)\n   - Fix: Improve `AsyncFtpClient` dispose logic and cleanup warnings on build (thanks @FanDjango)\n\n#### 51.1.0\n\n - Fix: GUI hangs during `Dispose` of `AsyncFtpClient`\n - Fix: Improve Async & GUI cohabitation\n - Change: Rename `FtpCapability.MLSD` to `MLST` to better reflect its behaviour\n\n#### 51.0.0\n\n - **Connection**\n   - New: Accurate FTP connection status tracking with the help of `NoopDaemon` (integrated into `IsConnected` API)\n   - New: Enum `FtpConnectionState` to track FTP socket connection state\n   - Improve: IsConnected: Handle sync/async close situations and remove unwanted `Poll` calls\n   - Improve: Detailed logging of Close/Dispose failures for improved error reporting in user logs\n   - Fix: Regression where multiple sequential connects/disconnects crash the FTP Client\n - **File Listing**\n   - Fix: DrFtpd sends invalid FTP response `550` when folder exists but is empty\n - **File Transfer**\n   - Improve: Upload/Download speed calculation and improve handling of divide by zero errors\n   - Improve: Upload/Download log message format \n   - Improve: Improve file transfer performance by using the new `AsMemory` API for reading/writing data from/to the FTP socket stream in .NET 5+\n - **Core**\n   - Remove: `Config.SocketPollInterval` setting, because it is no longer used or required\n   - Improve: Dozens of log messages throughout the internal socket handling subsystem\n   - Improve: Documentation for `GetReply` core function\n   - Fix: Pass missing cancellation token in async `Execute` API\n   - Change: Disposing log messages are now Verbose instead of Warning\n   - Fix: Uncatchable exceptions after cancellation of read in `FtpSocketStream`\n   \n#### 50.1.0\n\n - **File Upload**\n   - New: `FtpRemoteExists.OverwriteInPlace` mode which overwrites files without deleting them first\n - **Connection**\n   - New: `FtpConfig.PostConnect` to enable the init sequence performed immediately after connection\n   - Fix: Undetected connect timeout in .NET 5+\n   - Fix: Remove `BufferedStream` feature and further refactoring of Dispose logic \n   - Fix: Use correct SSL stream `AuthenticateAsClient` API rather than outdated API\n   - Fix: Mask the FTP server host IP in PASV response when `Config.LogHost` is set to false\n - **File Transfer**\n   - Fix `DateTimes.ParseFtpDate` will consider provided `formats` when parsing date/time values\n - **File Listing**\n   - Improve: Improved performance for Regex parsing by utilizing Regex caching\n   - Improve: Improved performance for Stream Read/Write API for .NET Standard 2.1 and newer\n   \n\n#### 50.0.1\n\n - Fix: Correct sequencing of FTP stream disposing for .NET Framework\n - Fix: Extraneous `GetReply` call in `UploadInternal`/`DownloadInternal`\n\n#### 50.0.0\n\n - **File Verification** (thanks [DasRaschloch](/DasRaschloch) and [FanDjango](/FanDjango))\n   - New: All file transfer methods now support size/checksum/date comparison\n   - New: `DownloadDirectory`, `DownloadFile`, `DownloadFiles`, support new size/checksum/date comparison\n   - New: `UploadDirectory`, `UploadFile`, `UploadFiles` support new size/checksum/date comparison\n   - New: FXP `TransferDirectory`, `TransferFile` support new size/checksum/date comparison\n   - New: `FtpVerify` has new options: `Size/Date/Checksum/OnlyChecksum`\n - **File Transfer** (thanks [FanDjango](/FanDjango))\n   - Fix: `DownloadFile` with Progress throws `FtpException`\n   - Fix: Correctly handle internal errors in `UploadInternal`/`DownloadInternal`\n   - Fix: `GetFileSize` provides invalid file length and transfer fails\n - **FTP Proxy** (thanks [zhaohuiyingxue](/zhaohuiyingxue))\n   - Fix: `GetListing` does not use the proxy with passive FTP\n - **FTP Disconnection** (thanks [FanDjango](/FanDjango))\n   - New: Indicate creating/disposing sync/async connections in log\n   - Fix: Disconnection during Connect async needs to be awaited\n   - Fix: FTP `BaseClient` is also `IAsyncDisposable` in addition to `IDisposable`\n   - Fix: Disposing a connected `AsyncFtpClient` throws non-fatal `InvalidCastException`\n   - Fix: Cloning a `AsyncFtpClient` throws non-fatal `InvalidCastException`\n   - Change: `AsyncFtpClient` to change all `Close` usage to `await CloseAsync`\n   - Change: `FtpDataStream` now supports an async close method\n   - Change: Use `DisposeAsync` pattern for `AsyncFtpClient`\n   - Change: Call `Dispose`/`DisposeAsync` on `BufferedStream` instead of `Flush`/`FlushAsync`\n   - Fix: Restore call to `FtpSslStream` for graceful TLS termination\n - **IBM OS/400** (thanks [FanDjango](/FanDjango))\n   - Fix: Async server-specific post-connection commands was missing for OS400\n\n#### 49.0.2\n\n - **NOOP Daemon** (thanks [FanDjango](/FanDjango))\n   - Fix: Improve NOOP daemon logic\n   - Fix: More reliable termination\n   - Fix: Handle NOOP API exceptions\n   - Fix: Handle NOOP situations in `Execute` API\n   - Fix: No need for NOOP commands before a QUIT command\n   - Fix: Improve `GetReply` logging and handling for stale data and NOOP reactions\n   - Fix: If QUIT is stashed and reconnect is pending, defer it.\n   - Fix: Recognize special commands & responses in all cases\n   - Fix: Delay NOOP connectivity tests until connection fully established\n - **Connection Status** (thanks [FanDjango](/FanDjango))\n   - Fix: `IsStillConnected`: Clean up `Connect`/`DisconnectInternal` interface artifacts\n   - Fix: `IsStillConnected`: Add log messages\n - **IBM OS/400** (thanks [FanDjango](/FanDjango))\n   - Fix: Enhance detection of IBM OS/400 servers\n   - Fix: Set `SITE LISTFMT 1` and `SITE NAMEFMT 1` on connect\n - **File Transfer**\n   - Fix: `DownloadFile`: `FileCount` Progress updated even when files are skipped (thanks [J0nathan550](/J0nathan550))\n   - Fix: `DownloadFile`: `stopPosition` not working in some cases (thanks [alexgubanow](/alexgubanow))\n   - Fix: `DownloadFile`: Progress calculation not correct when using `stopPosition` (thanks [alexgubanow](/alexgubanow))\n\n#### 49.0.1\n\n - Fix: Change semaphore logic to prevent deadlock in NOOP Daemon (thanks [FanDjango](/FanDjango))\n\n#### 49.0.0\n\n - **NOOP Daemon** (thanks [FanDjango](/FanDjango))\n   - New: Revised NOOP handling with new config option `Noop` to enable NOOP daemon\n   - New: New config options `NoopInactiveCommands` and `NoopActiveCommands` to set FTP commands usable\n   - New: New config option `NoopTestConnectivity` to issue NOOP commands before every FTP command\n   - Change: `NoopInterval` now has a default of 3 minutes\n   - Change: Update `GetReply` for new NOOP handling logic\n - **Connection Status** (thanks [FanDjango](/FanDjango))\n   - New: `IsStillConnected()` API to reliably check if FTP connection is still active\n - **Auto Connection** (mostly thanks [FanDjango](/FanDjango))\n   - New: Treat timeouts during `AutoDetect` as failed detection instead of aborting (thanks [FabBadDog](/FabBadDog))\n   - Fix: Prevent Auto-Reconnect occurring before connect is complete\n   - Fix: `AutoDetect` is thread unsafe, fix `AutoDetectConfig` `IncludeImplicit` logic\n - **Multi-Threading** (thanks [FanDjango](/FanDjango))\n   - Change: Remove all internal locking in the sync `FtpClient`\n - **FTP Transfers** (thanks [FanDjango](/FanDjango))\n   - Fix: Servers with no server handler used wrong `GetListing()` command\n   - Fix: `OpenRead` retry attempt fails due to typo\n   - Fix: Missing code in async stale data handler\n   - Fix: Missing code in Async `DisableUTF8` API\n - **FTP Proxies**\n   - Fix: Correctly set supported method in SOCKS 5 proxy negotiation (thanks [rmja](/rmja))\n - **Codebase Maintainance** (mostly thanks [FanDjango](/FanDjango))\n   - Fix: Remove `NET50_OR_LATER` invalid moniker (thanks [sean-bloch](/sean-bloch))\n   - Fix: Cleanup and standardize all .NET Target framework markers (TFMs)\n   - Fix: Clean up interfaces and implementation for Connect/Disconnect\n - **Testing** (thanks [FanDjango](/FanDjango))\n   - Fix: Powershell folder was not being populated, add to GIT ignore list\n   - Fix: Docker build process was failing due to debian py image changes\n - **Logging** (thanks [FanDjango](/FanDjango))\n   - New: Log selected server handler, if any are detected\n   - New: Log improvements for `OpenAppend`, `OpenRead` and `OpenWrite` to help in debugging\n\n#### 48.0.3\n - **Utilities**\n   - New: `FtpResult.ToStatus()` API to easily compare result values of `DownloadFile`/`DownloadFiles` and `UploadFile`/`UploadFiles`\n - **File Transfer** (thanks [FanDjango](/FanDjango))\n   - Fix: Code cleanup for FTP path and directory handling\n   - Fix: `CreateDirectory` sometimes needed in `AutoNavigate` mode\n   - Fix: Optimize `CWD`/`PWD` directory navigation in `AutoNavigate` mode\n   - Fix: Prevent infinite loop on stale data read when FTP socket stalled\n   - Fix: Some FTP servers throw `450` error for empty folders\n\n#### 48.0.1\n - **Directory Navigation** (thanks [FanDjango](/FanDjango))\n   - New: Add auto-navigate support to `GetCheckSum`\n   - Fix: `UploadDirectory` with `FtpNavigate.Conditional` does not auto-navigate correctly\n   - Fix: Not all linux ftp servers support backslash as path separator character\n   - Fix: Cancellation token passing and await syntax for `DownloadFile`, `UploadFile`, `GetListing`\n\n#### 48.0.0\n - **Directory Navigation** \n   - New: `Navigate` Config setting to automatically handle FTP directory navigation\n   - New: Download and Upload API honors `Navigate` setting\n   - New: `GetListing` API honors `Navigate` setting\n - **File Transfer** (thanks [FanDjango](/FanDjango))\n   - New: `DownloadUriBytes` API method to directly connect and download a URI/URL\n   - Fix: `OpenRead`, `OpenWrite` and `OpenAppend` quirks to handle their stale data\n   - Fix: Complete redesign of FTP socket stale data handling and `CheckStaleData` implementation\n - **Auto Connection** (thanks [FanDjango](/FanDjango))\n   - New: Overloaded API `AutoDetect` with object-driven configuration using `FtpAutoDetectConfig`\n   - New: Add options `RequireEncryption` and `IncludeImplicit` to `AutoDetect` to allow for more configurability during auto-connection\n   - Fix: Improve `AutoDetect` behaviour to support various server use-cases\n   - Fix: Add `RNFM`/`RNTO` FTP commands to critical-sequence list to fix Auto-Reconnect of SSL sessions\n   - Fix: `AutoDetect` empty config is gracefully handled\n - **Logging**\n   - New: Function Logging method to support logging objects\n   - Fix: Logging strings creation conditional on it being at all in use (thanks [jnyrup](/jnyrup))\n   - Fix: Improve logging of FTP socket stale data (thanks [FanDjango](/FanDjango))\n\n#### 47.0.0\n - **Logging** (thanks [FanDjango](/FanDjango))\n   - New: Add exact .NET platform build target during the version logging\n - **File Transfer**\n   - New: Config API `LocalFileShareOption` to allow setting file sharing mode for uploads\n   - New: Connection type `PASVUSE` aka `PassiveAllowUnroutable`\n   - New: Add friendlier names for connection types `AutoActive` and `PassiveExtended`\n - **File Hashing** (thanks [FanDjango](/FanDjango))\n   - Fix: Parse non-standard FTP hashes for BrickFTP, Files.com, ExaVault.com\n - **FTP Connections** (thanks [FanDjango](/FanDjango))\n   - Fix: SSL Buffering: Improve connection logic, update comments, refactor code\n   - Fix: SSL Buffering: Cannot connect to FTPS IIS server on Windows 2019 from Azure Functions V4\n   - Fix: Disconnection: Improve conditional compiles and test for each target in `FtpSslStream`\n   - Fix: Disconnection: Use `ShutDownAsync ` for .NET 4.7 and later\n   - Fix: `InnerException` does not get caught during FTPS security exception\n   - Fix: Remove dead code in SSL permanent failure detection\n   - Fix: Custom Stream: `PolicyErrors` not being set correctly\n - **File Listing** (thanks [FanDjango](/FanDjango))\n   - Fix: Improve file name parsing logic for DOS/Windows/IIS servers\n   - Fix: Improved null checks for `InfoMessages` (thanks [jnyrup](/jnyrup))\n - **Testing** (thanks [FanDjango](/FanDjango))\n   - Fix: `GnuTlsStream` integration tests due to invalid stream detection\n\n#### 46.0.2\n - Fix: Custom stream logging tweak: Message first then close stream\n - Fix: Custom stream: Also log `InnerException` if it exists within the exception\n - Fix: Internal stream null check to avoid exception in `Execute` API methods\n\n#### 46.0.1\n - Fix: Hotfix to remove new `DowloadStream` overload that causes compile failure\n\n#### 46.0.0\n - New: Add `stopPosition` parameter to `DownloadBytes` and `DowloadStream` to allow partial downloads\n\n#### 45.2.0\n - New: Add 9 missing properties to the FTP client interfaces\n - New: Improve log message wording for EPSV & proxies (thanks [FanDjango](/FanDjango))\n - Fix: Improve GetReply to handle connection loss edge cases and timeout exceptions, possibly incurring cpu-loops (thanks [FanDjango](/FanDjango))\n - Fix: Improve NOOP behavior to correctly handle timeout exceptions (thanks [FanDjango](/FanDjango))\n\n#### 45.1.0\n - New: `DiscoverSslSessionLength` API to auto compute a working value for SSL Session length (thanks [FanDjango](/FanDjango))\n\n#### 45.0.4\n - API: Rename `ExecuteGetText` to `ExecuteDownloadText`\n - Fix: `AsyncFtpClient.CreateDirectory` fails on freshly created client instance (thanks [FanDjango](/FanDjango))\n\n#### 45.0.2\n - New: `ExecuteGetText` API to execute an FTP command and return multiline output (thanks [FanDjango](/FanDjango))\n - New: Integration with `FluentFTP.GnuTLS` NuGet package to allow for GnuTLS TLS 1.3 streams\n\n#### 44.0.1\n - **File Transfer**\n   - New: `UploadFiles` API in `AsyncFtpClient` which takes an `IEnumerable<FileInfo>`\n   - New: `UploadFiles` and `DownloadFiles` now support rules which allow filtering of uploaded/downloaded files\n   - New: `UploadFiles` and `DownloadFiles` now return a `List<FtpResult>` with per-file status rather than just a count\n   - New: `FtpMissingObjectException` thrown when trying to download a non-existant object\n   - New: Download API `DownloadDirectory`, `DownloadFile`, `DownloadBytes`, `DownloadStream` will throw `FtpMissingObjectException` rather than silently failing\n   - New: Download API `DownloadFiles` will mark non-existant files as `IsFailed` and add the `Exception` rather than silently failing\n   - Tests: New integration tests to check fail conditions of Download API\n   - Fix: Correctly detect non-existant files and folders on FileZillla server (thanks [FanDjango](/FanDjango))\n - **Connection**\n   - New: Improve reconnect logic to restore working directory and ASCII/Binary data type on automatic reconnection (thanks [FanDjango](/FanDjango))\n   - New: Improve `Execute` logic to handle working directory on automatic reconnection (thanks [FanDjango](/FanDjango))\n   - New: Do not attempt Reconnect if we have never been connected before (thanks [FanDjango](/FanDjango))\n   - Change: Reconnect logging messages elevated from `Info` to `Warn` (thanks [FanDjango](/FanDjango))\n   - Fix: Use `ConnectAsync` for `net472` platform where required (thanks [jnyrup](/jnyrup))\n - **Exceptions**\n   - Change: Move all exception types into the `FluentFTP.Exceptions` namespace\n   - New: Separate the log message from the exception in the handler (thanks [jnyrup](/jnyrup))\n   - New: Add support for printing exception messages on a newline for socket exceptions (thanks [FanDjango](/FanDjango))\n - **Logging**\n   - New: Setting `Config.LogDurations` to configure if durations are to be logged\n   - New: Add FTP command roundtrip duration to every `Response` log message (thanks [FanDjango](/FanDjango))\n   - New: Smart rendering of log message durations (hours, minutes, seconds, MS)\n   - Fix: Improve exception handling for connection/disconnection and authentication (thanks [FanDjango](/FanDjango))\n   - Fix: Simplify exception handling using `when` keyword and new conditional keywords (thanks [jnyrup](/jnyrup))\n - **Quality**\n   - Fix: Reduce library warnings by improving code patterns used (thanks [FanDjango](/FanDjango))\n   - Fix: Reduce test warnings by improving code patterns used (thanks [FanDjango](/FanDjango))\n\n#### 43.0.0\n - Please read the [Migration Guide](https://github.com/robinrodricks/FluentFTP/wiki/v40-Migration-Guide#logging) for help migrating to the new version!\n - **Packaging** (thanks [jnyrup](/jnyrup))\n   - Core FluentFTP package has removed the dependency on MELA (Microsoft.Extensions.Logging.Abstractions)\n   - New [FluentFTP.Logging](https://www.nuget.org/packages/FluentFTP.Logging) package released that integrates with MELA\n - **Logging** (thanks [jnyrup](/jnyrup))\n   - `FtpClient.Logger` is no longer a MELA `ILogger`\n   - `FtpClient.Logger` is now a custom interface called `IFtpLogger`\n\n#### 42.2.0\n - **Connection** (thanks [FanDjango](/FanDjango))\n   - New: Save bandwidth on automatic reconnection by skipping `FEAT` command\n   - Fix: Implementation of connection/disconnection internal logic\n   - Fix: Create a default `ValidateCertificate` handler if none is provided\n   - Fix: Auto-reconnect SSL streams after a set number of replies are read\n - **File Transfer** (thanks [FanDjango](/FanDjango))\n   - New: Upload: Ability to upload file streams with unknown size\n   - Fix: Upload: Timeout detection for file streams with unknown size\n - **File Listings** (thanks [FanDjango](/FanDjango))\n   - New: `SetModifiedTime` falls back to `MDTM` if `MFMT` command not available\n   - New: `GetListing`: Catch control connection loss and retry once\n   - Fix: `GetListing` silently fails and returns empty array if connection lost\n   - Fix: IBM OS/400: Correctly handle special chars on EBCDIC code page fault\n - **Tests** (thanks [FanDjango](/FanDjango))\n   - New: Docker: Add optional path to allow the user to save disk space\n   - Fix: Fix many XML compiler warnings in the testing system\n\n#### 42.1.0\n - **FTP** (thanks [FanDjango](/FanDjango))\n   - New: Detect Apache FTP Server (allows for future server-specific handling)\n   - New: Major improvements to automatic FTP reconnection on connection loss\n   - New: Special handling to prevent automatic FTP reconnection during critical FTP sequences\n   - New: `Config.SslSessionLength` setting to perform automatic reconnection to bypass SSL issues\n   - Fix: Connect closing has been removed from `ReadStaleData` and moved into `Execute`\n   - Fix: Improved NOOP handling by detecting more formats of NOOP FTP replies\n   - Fix: `IOException` edge case on FTPS connections after a certain number of FTP commands\n   - Fix: Handle early `226 Transfer complete` edge case in FTP file download\n   - Fix: Honor `FtpRemoteExists.NoCheck` mode in `MoveFile` to prevent checking for existing files\n - **Tests** (thanks [FanDjango](/FanDjango))\n   - New: Improved Docker build process using common images to speed up build times\n   - New: Rewrite all first-party Docker images to use pre-built common images\n   - New: Support for Apache FTP Server integration test server\n   \n#### 42.0.2\n - **FTP** (thanks [FanDjango](/FanDjango))\n   - New: DNS Caching to prevent DNS server rejecting name resolution for rapidly repeating requests\n   - New: Better log message for stream dispose to indicate which stream was disposed\n   - Fix: Typo in `FtpException` thrown when creating directories\n   - Fix: Do not assume the server path when `CWD` command sent\n   - Change: Refactor post-Execute operations and implement parity in sync/async API\n - **Connection** (thanks [FanDjango](/FanDjango))\n   - Fix: `AutoConnect` fails with Azure FTP servers due to profile handling\n   - Change: Improve exception throwing order for `InvalidOperationException` if unable to connect\n   - Change: Complete rewrite of `Connect` API \n   - New: Add check to ensure that the IP version is permitted when connecting to servers\n   - Fix: Implement retry logic to check all possibly server addresses before failing with an exception\n   - Fix: Implement improved logic to detect timeouts and socket failures\n   - Fix: `ConnectTimeout` is not taking effect for `ConnectAsync` API\n   - Fix: Reset `CurrentDataType` when re-connected to an FTP server\n - **File Transfer** (thanks [FanDjango](/FanDjango))\n   - Fix: Parity in resume logic for upload and download and throw `AggregateException` where required\n   - New: Implement the missing `ResumeUpload` for synchronous API\n   - New: Add a log message so that the resume operation is actually noticed by users\n\n#### 42.0.1\n - **FTP**\n   - New: TLS authentication failures will always throw `AuthenticationException` (thanks [FanDjango](/FanDjango))\n   - Fix: Improve handling of stale data on socket after `GetListing` (thanks [FanDjango](/FanDjango))\n - **Tests**\n   - New: Redesigned Pureftpd integration test server (thanks [FanDjango](/FanDjango))\n - **Proxies**\n   - Fix: Read extra bytes to fix `GetListing` for SOCKS4 and SOCKS4a proxies (thanks [FanDjango](/FanDjango))\n\n#### 42.0.0\n - Please read the [Migration Guide](https://github.com/robinrodricks/FluentFTP/wiki/v40-Migration-Guide) for help migrating to the new version!\n - **API**\n   - New: `LastReplies` property to fetch a list of the last 5 server replies (thanks [FanDjango](/FanDjango))\n   - Removed: `Config.DisconnectWithShutdown` as it was not required (thanks [FanDjango](/FanDjango))\n   - Removed: `FtpListOption.NoImage` as it was not required (thanks [FanDjango](/FanDjango))\n   - Removed: Privatize `CurrentDataType` and remove `ForceSetDataType` (thanks [FanDjango](/FanDjango))\n - **FTP**\n   - New: SslStream wrapper to send TLS close notifications for .NET and .NET Core (thanks [FanDjango](/FanDjango))\n   - Change: SSL Closure Alert is now always sent when a stream is terminated (thanks [FanDjango](/FanDjango))\n   - Change: Make SSL Shutdown independant of `Config.DisconnectWithShutdown` (thanks [FanDjango](/FanDjango))\n   - Change: `GetReply` redesign: New mode to exhaustively read all `NOOP` replies (thanks [FanDjango](/FanDjango))\n - **Logging**\n   - New: Verbose file sizes logged during file upload/download (thanks [FanDjango](/FanDjango))\n   - New: FluentFTP version logged after connection (thanks [FanDjango](/FanDjango))\n   - New: `GetReply` redesign: Verbose logging for `NOOP` commands (thanks [FanDjango](/FanDjango))\n - **Z/OS**\n   - New: IBM OS/400: Support blanks in filename and add unit test cases (thanks [FanDjango](/FanDjango))\n - **Tests**\n   - New: Support for Bftpd integration test server (thanks [FanDjango](/FanDjango))\n   - New: Support for ProFTPD integration test server (thanks [FanDjango](/FanDjango))\n   - New: Support for glFTPd integration test server (thanks [FanDjango](/FanDjango))\n   - New: Support for FileZilla integration test server (thanks [FanDjango](/FanDjango))\n   - New: Redesigned VsFTPd integration test server (thanks [FanDjango](/FanDjango))\n   - New: Ability to run test server containers as FTP or FTPS servers (thanks [FanDjango](/FanDjango))\n   - Fix: Cleanup and improve all Dockerfiles and significantly reduce image size (thanks [FanDjango](/FanDjango))\n\n#### 41.0.0\n - Please read the [Migration Guide](https://github.com/robinrodricks/FluentFTP/wiki/v40-Migration-Guide) for help migrating to the new version!\n - **API**\n   - New: `EmptyDirectory` API to delete files but leave top-level directory intact (thanks [FanDjango](/FanDjango))\n - **FTPS**\n   - Fix: Disable TLS 1.3 as it causes many complex networking issues during data transfer\n   - Fix: Unified system to handle permanent failures during `AutoConnect`\n   - Fix: Throw `FtpProtocolUnsupportedException` if the FTP server is forcing TLS 1.3 connections\n   - Fix: Disable SSL Buffering on control connection to improve `NOOP` handling (thanks [FanDjango](/FanDjango))\n   - Fix: Send an additional `NOOP` command after uploading files to resolve issues (thanks [FanDjango](/FanDjango))\n - **FTP**\n   - Fix: Log messages pertaining to stale data are improved (thanks [FanDjango](/FanDjango))\n   - New: Log the TLS protocol used after making a successful FTPS connection (thanks [FanDjango](/FanDjango))\n   - Fix: Correctly forward `CancellationToken` within `DownloadFile`, `UploadFile`, `TransferDirectory`, `DeleteFile`, `OpenRead`, `OpenAppend` (thanks [jnyrup](/jnyrup))\n   - Fix: Optimize `SIZE` command usage for `UploadFile` in `NoCheck` and `OverWrite` modes (thanks [FanDjango](/FanDjango))\n   - Fix: Allow reusing the `ActivePorts` in FTP Active connection mode (thanks [FanDjango](/FanDjango))\n - **Z/OS**\n   - New: Add `LIST` functionality for z/OS JES subsystem (thanks [FanDjango](/FanDjango))\n   - New: Switch to using `LISTLEVEL 2` in `GetListing` for more accurate filesizes (thanks [FanDjango](/FanDjango))\n   - New: Improve unit test cases for the z/OS file listing parser tests (thanks [FanDjango](/FanDjango))\n - **Proxies**\n   - New: Support multiple modes of authentication for SOCKS proxies: GSSAPI, UsernamePassword (thanks [jnyrup](/jnyrup))\n   - New: Throw `MissingMethodException` if cannot negotiate an authentication method for SOCKS proxies (thanks [jnyrup](/jnyrup))\n\n#### 40.0.0\n - Please read the [Migration Guide](https://github.com/robinrodricks/FluentFTP/wiki/v40-Migration-Guide) for help migrating to the new version!\n - Special thanks to Robin Rodricks, Michael Stiemke and Jonas Nyrup for this release!\n - **Constructor API**\n   - New: 4 new FTP client constructors that accept FTP host, credentials, config and logger\n   - Remove extraneous constructors because properties can be used instead\n - **Asynchronous API**\n   - New: Split main FTP client classes into `FtpClient` and `AsyncFtpClient`\n   - New: Split main FTP client interfaces into `IFtpClient` and `IAsyncFtpClient`\n   - New: Split common FTP functionality into `BaseFtpClient`\n   - New: Drop `Async` suffix for all async FTP methods in `AsyncFtpClient`\n - **Config API**\n   - New: Remove all config settings from FtpClient and move it into `client.Config` object\n   - New: Dedicated class to hold config settings `FtpConfig` to cleanup client API\n - **Logging API**\n   - New: Remove `client.OnLogEvent` and `FtpTrace` system\n   - New: Add logger system `client.Logger` using industry-standard `ILogger` interface\n   - New: Add Nuget dependency `Microsoft.Extensions.Logging.Abstractions` v2.1.0\n   - Renamed: Legacy logging callback `OnLogEvent` is now renamed to `LegacyLogger`\n   - Renamed: Logging settings: `LogIP` renamed to `LogHost`\n   - Remove logging setting `LogFunctions` as it is always enabled\n - **FTP Proxies**\n   - New: Split FTP proxy classes into `FtpClient*Proxy` and `AsyncFtpClient*Proxy`\n   - New: FTP proxy classes moved into `FluentFTP.Proxy.SyncProxy` and `FluentFTP.Proxy.AsyncProxy` NS\n   - New: FTP proxy classes with fully async implementations\n   - Fix: Properly override `HandshakeAsync` in async FTP proxies (thanks [jnyrup](/jnyrup))\n - **Organization**\n   - Completely redesign the FTP client code organization and structure\n   - Update all tests and examples to use the new API and `AsyncFtpClient`\n   - Hide all internally-used functions behind the interface `IInternalFtpClient`\n   - Code style standardization and use new C# language constructs (thanks [jnyrup](/jnyrup))\n   - Add styling rules to `.editorconfig` to prevent using IDE defaults (thanks [jnyrup](/jnyrup))\n - **Modernization**\n   - Drop support for .NET Standard 1.2, 1.4 and .NET 2.0, 3.5, 4.0 and 4.5\n   - Add support for .NET 4.6.2 and 4.7.2\n   - Remove conditional compilation statements for unsupported platforms\n   - Remove uncommon static methods `FtpClient.Connect` and `FtpClient.GetPublicIP`\n   - Remove uncommon method `DereferenceLink` and `DereferenceLinkAsync`\n   - Remove uncommon properties `QuickTransferLimit`, `MaximumDereferenceCount`, `EnableThreadSafeDataConnections`, `PlainTextEncryption`\n   - Remove uncommon feature `FtpListOption.DerefLinks`\n   - Remove obsolete hashing commands `GetHashAlgorithm`, `SetHashAlgorithm`, `GetHash`, etc\n   - Remove obsolete async pattern using `IAsyncResult`\n   - Fix: Forward cancellation token in UploadDirectory and Proxy HandshakeAsync (thanks [jnyrup](/jnyrup))\n   - Fix: Parity in sync/async implementations of `Authenticate` (thanks [FanDjango](/FanDjango))\n   - Fix: Improve masking out support for removing sensitive usernames from FTP logs\n   - Fix: Change all public fields to properties in classes: `FtpListParser`, `FtpClientState`, `FtpFxpSession`, `FtpFxpSessionAsync`, `FtpListItem`, `FtpProfile`, `FtpResult`\n   - Fix: Change all public fields to properties in rules: `FtpFileExtensionRule`, `FtpFileNameRegexRule`, `FtpFileNameRule`, `FtpFolderNameRegexRule`, `FtpFolderNameRule`, `FtpSizeRule`\n - **Server support**\n   - Move all IBM zOS logic into the `IBMzOSFtpServer` server handler (thanks [FanDjango](/FanDjango))\n   - Move all OpenVMS logic into the `OpenVmsServer` server handler (thanks [FanDjango](/FanDjango))\n   - Fix: z/OS: Handle z/OS `GetListing` single line outputs (thanks [FanDjango](/FanDjango))\n\n#### 39.4.0\n - New: Add `SslProtocolActive` property to retrieve the negotiated SSL/TLS protocol version\n - Fix: z/OS: Improve server handling for absolute path calculation (thanks [FanDjango](/FanDjango))\n - Fix: z/OS: Remove direct z/OS dependancy in `GetListing` (thanks [FanDjango](/FanDjango))\n - Fix: z/OS: Add some special cases to handle conversion of remote FTP paths (thanks [FanDjango](/FanDjango))\n - Fix: z/OS: Add missing parser tests for z/OS FTP server (thanks [FanDjango](/FanDjango))\n - Fix: z/OS: Fix file size calculation for non-unix z/OS files (thanks [FanDjango](/FanDjango))\n - Internal: Add integration tests for `GetListingAsyncEnumerable` (thanks [tommysor](/tommysor))\n - Internal: Remove 3 test dockers that do not work (thanks [tommysor](/tommysor))\n\n#### 39.3.0\n - New: Detect D-Link, TP-LINK, Huawei, MicroTik FTP servers (allows for future server-specific handling)\n - Fix: `AutoConnect` now correctly handles internal `AggregateException` (.NET 5.0+)\n - Fix: `AutoConnect` now correctly connects to servers requiring TLS 1.2\n - Internal: Support automated tests for VsFtpD servers (thanks [tommysor](/tommysor))\n - Internal: Add tests for custom FTP server auto connection\n\n#### 39.2.1\n - New: Add 5 missing methods into the `IFtpClient` interface\n - Fix: z/OS: Inconsistent implementations of `GetListing` absolute path conversion\n\n#### 39.2.0\n - New: `GetListingAsyncEnumerable` method to get file listing using `IAsyncEnumerable` pattern\n - New: During `AutoConnect`, throw `FtpProtocolUnsupportedException` if newer .NET required\n - Fix: Support connecting to TLS 1.3 servers using `AutoConnect` (.NET 5.0+)\n - Fix: Support automated tests for PureFTP and ProFTP servers (thanks [tommysor](/tommysor))\n\n#### 39.1.0\n - New: `Clone` method allows for cloning an `FtpClient` connection with all settings copied\n - New: `InternetProtocol` property which returns the current protocol used (IPV4/IPV6)\n - New: `Status` property which returns the current `FtpClientState` flags (advanced use only)\n - Fix: `AutoConnect`/`AutoConnectAsync` now correctly configure Azure FTP servers\n - Internal: Add integration test system using docker to test FluentFTP against many supported FTP servers\n - Internal: Refactor server specific, server strings, cloning and auto connection logic into modules\n\n#### 39.0.1\n - Fix: `ConnectAsync` correctly honors `ConnectTimeout` and `TimeoutException` is correctly thrown\n - Internal: Add unit tests for `Connect`/`ConnectAsync` to ensure `ConnectTimeout` is honored\n - Internal: Refactor internal file listing handlers & proxy implementation (API is unchanged)\n\n#### 39.0.0\n - New: Username/password authentication for SOCKS5 proxy connections\n - New: Correctly fill in `ConnectionType` for all proxy types\n - New: Improved pattern to connect to proxy servers, all details can be specified in `FtpProxyProfile`\n - New: Examples for all types of proxies (`ConnectProxyHttp11`, `ConnectProxySocks4`, `ConnectProxySocks4a`, `ConnectProxySocks5`)\n - Change: Rename class `SocksProxyException` to `FtpProxyException`\n - Change: Rename class `ProxyInfo` to `FtpProxyProfile` and rename members\n\n#### 38.0.0\n - Change: Rename enum `FtpFileSystemObjectType` to `FtpObjectType`\n - Change: Rename enum `FtpFileSystemObjectSubType` to `FtpObjectSubType`\n - Change: Rename API `Upload` to `UploadBytes` and `UploadStream` instead of overloading\n - Change: Rename API `Download` to `DownloadBytes` and `DownloadStream` instead of overloading\n - Change: Logging will always mask host IP, username and password by default (configurable)\n - New: Throw `AggregateException` when an error occuring during resuming a file upload (.NET 4.5+)\n - New: Code generation for parsed file item in order to build accurate unit tests\n - New: Unit tests for Windows, Unix, OpenVMS, NonStop, IBM, Machine listing parsers\n - New: Unit tests for Timezone conversion to UTC and to local time\n - Fix: Improvement to directory parsing for Windows, Unix, OpenVMS, NonStop, Machine listings\n - Fix: Support parsing of links and Unix-symlinks in Machine listings\n - Fix: Enable 2 FTP server specific handlers\n\n#### 37.1.2\n - Fix: Error when downloading large files through SOCKS4 or SOCKS4a proxy (thanks [fire-lizard](/fire-lizard))\n\n#### 37.1.1\n - Fix: Disable SSL Buffering in .NET 6 as it was in .NET 5\n\n#### 37.1.0\n - Major: Added support for SOCKS4 proxy servers using the `FtpClientSocks4Proxy` client class (thanks [fire-lizard](/fire-lizard))\n - Major: Added support for SOCKS4a proxy servers using the `FtpClientSocks4aProxy` client class (thanks [fire-lizard](/fire-lizard))\n\n#### 37.0.6\n - New: Detect Rumpus FTP servers for Mac (allows for future server-specific handling)\n - New: Detect ABB IDAL FTP servers (allows for future server-specific handling)\n - New: Add `DisconnectWithShutdown` property to configure shutdown signal on disconnect\n - Change: Rename `UngracefullDisconnect` to `DisconnectWithQuit`\n - Fix: Resolve long timeouts after socket stream disconnected\n\n#### 37.0.5\n - Fix: IOException in synchronous methods when AUTH TLS is rejected (thanks [yatlor](/yatlor))\n\n#### 37.0.4\n - New: Support for .NET 6.0\n - Fix: For FileZilla FTP Server, TLS socket would be incorrectly closed (thanks [michael-hoedl](/michael-hoedl))\n - Fix: For Windows Server IIS, the space at the beginning of the file name is excluded (thanks [tYoshiyuki](/tYoshiyuki))\n\n#### 37.0.3\n - Change: Remove `Obsolete` from all `OpenRead`/`OpenWrite`/`OpenAppend` API as it is not planned for deletion\n - Fix: Calculate checksum for files with whitespaces in their name (thanks [simonefil](/simonefil))\n\n#### 37.0.2\n - Fix: z/OS: `GetListing`: Handle large file sizes reported in Used column (thanks [FanDjango](/FanDjango))\n - Fix: z/OS: `IsRoot` improved to handle Unix realm as well (thanks [FanDjango](/FanDjango))\n - Fix: `DownloadFile` correctly handles connection interruptions and resumes partially downloaded files (thanks [FanDjango](/FanDjango))\n\n#### 37.0.1\n - Fix: `SetWorkingDirectoryAsync` doesn't set working directory due to missing cache invalidation (thanks [FanDjango](/FanDjango))\n - Fix:  Handle multiline `FEAT` replies to support ProFTPD capability reporting (thanks [FanDjango](/FanDjango))\n - Fix: Correctly disposes `CancellationTokenSource` created during `ConnectAsync` (thanks [jnyrup](/jnyrup))\n - Fix: Printing of error messages in some `ArgumentNullException` and `ArgumentOutOfRangeException` (thanks [jnyrup](/jnyrup))\n - Fix: Wrong file parser being selected for servers: NonStop/Tandem, OpenVMS, Windows CE, IIS (thanks [jnyrup](/jnyrup))\n - Performance: Improve performance of async methods that return constant values (thanks [jnyrup](/jnyrup))\n\n#### 37.0.0\n - New: Detect Titan FTP servers (allows for future server-specific handling)\n - Fix: Validation of short CRC checksum fails due to mismatch of hex hash format\n - Change: Remove redundant and extranous `OpenRead`/`OpenWrite`/`OpenAppend` API and keep only 2 methods each\n - Change: Mark `OpenRead`/`OpenWrite`/`OpenAppend` API as obsolete with warnings and recommend high level API\n - Change: Cleanup dependencies for netstandard2.0, netstandard2.1 and net5.0 targets (thanks [jnyrup](/jnyrup))\n\n#### 36.1.0\n - Change: Restore the older `OpenRead` API to prevent breaking older projects that depend on it (thanks [FanDjango](/FanDjango))\n\n#### 36.0.0\n - New: `GetZOSFileSize` is now removed and superceeded by `GetFileSize` which handles z/OS servers\n - New: Refactor and cleanup z/OS specific logic for: post-connect init, `IsRoot`, `GetFileSize`\n - Change: `OpenRead` API no longer supports `checkIfFileExists` argument (thanks [FanDjango](/FanDjango))\n - Fix: z/OS & ASCII transfers: Don't get filesize if filesize already known during downloading (thanks [FanDjango](/FanDjango))\n - Fix: z/OS `UploadFilesAsync`: Fixed IBM MVS File uploading path calculation (thanks [FanDjango](/FanDjango))\n - Fix: Close underlying FTP socket connection on async cancellation on .NET Core (thanks [datvm](/datvm))\n - Fix: Correctly handle FTP connection timeout on .NET Core (thanks [datvm](/datvm))\n - Fix: Enable detection of IBM OS/400 servers that were disabled during server-specific handling\n\n#### 35.2.3\n - New: Detect PyFtpdLib FTP servers (allows for future server-specific handling)\n - Fix: Pass CancellationToken to all methods that support cancellation (thanks [0xced](/0xced))\n - Fix: Error check on z/OS init commands to ensure they executed correctly (thanks [FanDjango](/FanDjango))\n - Fix: Improve `FileExists` for z/OS: better no SIZE, no MDTM on non HFS files (thanks [FanDjango](/FanDjango))\n - Fix: `DownloadFile` for z/OS: `SetDataType` directly before the `RETR` command (thanks [FanDjango](/FanDjango))\n - Fix: `IsAuthenticated` is not updated when calling `ConnectAsync` (thanks [datvm](/datvm))\n - Fix: Reduce number of times `SetDataType` is called internally to improve performance (thanks [FanDjango](/FanDjango))\n - Fix: Fail to detect z/OS server if `Unix` is also mentioned in welcome message (thanks [FanDjango](/FanDjango))\n\n#### 35.2.2\n - Fix: z/OS GetFileSize: Ignore SIZE capability even if advertised by server as pointless (thanks [FanDjango](/FanDjango))\n - Fix: z/OS DownloadFile: Read to end of stream because filesize is always inaccurate (thanks [FanDjango](/FanDjango))\n - Fix: z/OS DownloadFile: Fix check for infinity or NaN progress values (thanks [FanDjango](/FanDjango))\n\n#### 35.2.1\n - Fix: z/OS GetListing: Path can be null causing an exception (thanks [FanDjango](/FanDjango))\n - Fix: z/OS GetListing: Large files overflow on size calculation resulting in negative file sizes (thanks [FanDjango](/FanDjango))\n - Fix: z/OS GetListing: Listing fails unless users `CWD` to the correct folder of a non-`RECFM=U` PDS (thanks [FanDjango](/FanDjango))\n \n#### 35.2.0\n - New: Support for connecting to FTP/FTPS servers via a SOCKS5 proxy (thanks [bjth](/bjth))\n - New: Autoconfigure IBM z/OS FTP server using `SITE DATASETMODE` and `QUOTESOVERRIDE` (thanks [FanDjango](/FanDjango))\n - Fix: `GetListing` item `Fullname` is now correctly calculated for Unix and z/OS systems (thanks [FanDjango](/FanDjango))\n\n#### 35.1.0\n - New: `GetZOSFileSize` APIs to get file size of IBM z/OS file system objects (thanks [FanDjango](/FanDjango))\n - New: `GetZOSListRealm` APIs to get realm of IBM z/OS servers (thanks [FanDjango](/FanDjango))\n - New: Enhance the z/OS listing parser to get LRECL (via XDSS) on behalf of user (thanks [FanDjango](/FanDjango))\n - Fix: `AutoConnect` detects rejected certificates on connection and raises `FtpInvalidCertificateException` (thanks [FanDjango](/FanDjango))\n - Fix: `FtpListOption.ForceList` is not being honored by GetListing and machine listings are used instead (thanks [FanDjango](/FanDjango))\n - Fix: `GetListing` regression causing many untrue parse fail warnings (thanks [FanDjango](/FanDjango))\n - Fix: `GetObjectInfo` is overwriting Modified date of a `FtpListItem` if the consecutive MDTM command fails (thanks [Dylan-DutchAndBold](/Dylan-DutchAndBold))\n - Fix: reusing same FtpClient should reload server capabilities unless its a cloned connection (thanks [FanDjango](/FanDjango))\n - Fix: Executing `CWD` using `Execute` API does not invalidate internal CWD cache (thanks [FanDjango](/FanDjango))\n\n#### 35.0.5\n - Fix: `UploadFile` fails to upload in `FtpRemoteExists.Resume` mode even if stream is seekable\n\n#### 35.0.4\n - Fix: `AutoConnect` loads the newly detected `FtpProfile` to update properties & encryption\n - Fix: Passive connections work in `FtpEncryptionMode.Auto` mode and FTPS connection fails\n\n#### 35.0.3\n - Fix: `AutoDetect` correctly recommends `FtpEncryptionMode.None` if FTPS connection failed\n - Fix: `AutoDetect` crashes because attempting to read socket type after disconnected\n\n#### 35.0.2\n - Major: `AutoDetect` does not cycle through data connection types during connection as it is irrelevant\n - Major: `AutoDetect` calculates a data connection type after connection succeeds (EPSV or PASV)\n\n#### 35.0.1\n - Fix: `ConnectAsync` now correctly creates a FTP server-specific handler to match `Connect` behaviour\n\n#### 35.0.0\n - **Automatic connection**\n   - Major: `AutoConnect` takes far fewer connection attempts due to improvements in connection handling\n   - Major: `AutoConnect` and `AutoDetect` are much faster and smarter and only try each setting once if possible\n   - Major: `AutoDetect` only tries Explicit and Implicit FTPS once and then falls back to plaintext FTP\n   - Major: `AutoDetect` only tries UTF-8 and never ASCII because most UTF-8 servers don't advertise it\n   - New: `AutoDetect` verifies if the server supports UTF-8 and updates the `FtpProfile` accordingly\n   - New: `FtpProfile` code generation adds a warning message if the encoding mode is unverified\n   - New: `AutoConnectAsync` now uses true asynchronous connection backed by new `AutoDetectAsync`\n   - New: `AutoConnect` now auto computes an FTP port unless a non-standard port is already set\n   - New: `AutoConnect` uses the main `FtpClient` connection rather than creating one clone per attempt\n   - Fix: `AutoConnect` remains connected to the first working profile rather than connecting twice on success\n   - Fix: `AutoConnect` reuses the same connection for FTPS and FTP rather than connecting again\n   - Fix: Ensure FTP server capabilities are loaded during `AutoDetect` if original connection is blank\n   - Fix: `AutoConnect` and `AutoDetect` will now throw exceptions for permanent failures (bad host/credentials)\n   - Fix: `ConnectAsync` now correctly resets the state flags to match `Connect` behaviour\n   - Fix: `Port` now correctly calculates the default port 21 when using `FtpEncryptionMode.Auto`\n \n - **Appending and resuming uploads**\n   - Major: The setting `FtpLocalExists.Append` is now renamed to `FtpLocalExists.Resume`\n   - Major: The setting `FtpRemoteExists.Append` is now renamed to `FtpRemoteExists.Resume`\n   - Major: Split `FtpRemoteExists.Append` into two properties with distinct behaviour (`Resume` and `AddToEnd`)\n   - Major: Improvements to `UploadFile` and `UploadFileAsync` to support appending and resuming of uploads\n   - Major: `UploadFile` always sets the length of the remote file stream before uploading, appending or resuming\n   - Major: `UploadFile` skips uploading in `Resume` mode if local and remote file are equal length\n   - Fix: Implementation for resuming uploads using `UploadFile` based on fixes in `UploadFileAsync`\n \n - **Machine listings**\n   - Major: `GetListing` prefers using Machine Listings over LIST command, unless a custom list parser is set\n   - Fix: `ListingParser` property is updated according to auto-detected parser during `Connect` and `ConnectAsync`\n   - Fix: `DeleteDirectory` and `DereferenceLink` methods no longer use `ForceList` and so prefer using Machine Listings\n   \n - **File hashing**\n   - Major: All low-level hash methods are now inaccessible and `GetChecksum` is the only recommended approach\n   - Fix: `GetChecksum` now prints function call logs and sanitizes the input path\n   - New: `GetChecksum` switches to the first preferred hash algorithm for `HASH` command if no algorithm is specified\n   - New: `GetChecksum` validates if the required algorithm is unsupported and throws `FtpHashUnsupportedException`\n   - New: `GetChecksum` validates if hashing is unsupported by the server and throws `FtpHashUnsupportedException`\n   - Fix: `GetChecksumAsync` now takes the cancellation token last to follow conventions (argument reorder)\n   - Fix: Improved extraction of hash checksum when using the HASH command\n   - Fix: Improved extraction of hash checksum when using the MD5, SHA1, SHA256, SHA512 or X-series commands\n   - New: `SetHashAlgorithm` now only modifies the hash algorithm if it has changed\n \n - **Path sanitization**\n   - Fix: All high level API methods sanitize input paths to improve robustness\n   - Fix: `GetWorkingDirectory` always sanitizes the returned working path directory\n   - Fix: Correctly handle server-specific absolute FTP paths for async operations\n   - Fix: All function call logs now print the sanitized path rather than raw input path\n \n - **Path improvements**\n   - Major: `GetWorkingDirectory` is now extremely fast and caches the working dir path for subsequent calls\n   - Fix: `FileExists` supports checking name listings for Windows NT servers which use invalid slashes\n   - Fix: Root directory FTP paths no longer return `./` and instead return `/`\n \n - **Other improvements**\n   - Major: All legacy asynchronous methods using `IAsyncResult` pattern have been removed (outdated since 2012)\n   - Fix: FXP file transfers for glFTPd server always try PASV and CPSV commands to get passive port\n   - Fix: Add logging for skipped files in `UploadFile`\n   - Fix: Add file path details in skipped files logged by `UploadFile` and `DownloadFile`\n   - New: `GetNameListing` to print results of name listing as verbose logs, similar to `GetListing`\n   - New: `GetFileSize` and `GetFileSizeAsync` to support a configurable return value if the file does not exist\n   - New: `FtpFolderNameRule` now supports `startSegment` to skip checking root directory folder names\n   - New: `FtpFolderNameRegexRule` now supports `startSegment` to skip checking root directory folder names\n\n#### 34.0.2\n - New: Add support for `IsAuthenticated` property which enables detection of FTP connection and authentication\n - Fix: Improved file path calculation when uploading files to IBM zOS running MVS (thanks [arafuls](/arafuls))\n - Fix: Detection of file exists for Windows NT Servers fails due to invalid slashes\n - Fix: Ensure `CompletionCode` is always null-checked to fix edge cases and comply with existing implementation\n - Fix: Possible wrong IP when connecting to Azure FTP Server using `EPSV` command (thanks [jsantos74](/jsantos74))\n\n#### 34.0.1\n - Fix file path calculation when uploading files to IBM zOS running MVS (thanks [arafuls](/arafuls))\n - Detect fully-qualified directory when using data sets on IBM zOS running MVS (thanks [arafuls](/arafuls))\n\n#### 34.0.0\n - Major: Refactor and cleanup helpers & extension methods\n - Major: Changed namespace of `FtpTrace` to `FluentFTP.Helpers`\n - Major: Changed namespace of `FtpListParser` to `FluentFTP.Helpers`\n - Major: You need to import `FluentFTP.Helpers` to gain access to FTP extension methods\n - Major: Changed visibility of various internal FTP helpers to `internal` to prevent external access\n - New: Ability to set a local IP address to be used for FTP connections (thanks [daviddenis-stx](/daviddenis-stx))\n - New: Properties for local IP: `SocketLocalIp`, `SocketLocalEndPoint`, `SocketRemoteEndPoint` (thanks [daviddenis-stx](/daviddenis-stx))\n\n#### 33.2.0\n - New: Ability to block certain server ports from being used during passive FTP connection (PASV/EPSV)\n - New: `PassiveBlockedPorts` and `PassiveMaxAttempts` properties to configure passive blocked ports\n\n#### 33.1.8\n - Fix: Add support for another server specific string to detect if file exists\n - Fix: Prevent memory leaks with FTPS on AKS by disabling `ValidateCertificateRevocation` by default\n \n#### 33.1.7\n - Fix: `DownloadFile` should fail if directory path is passed in `localPath`\n - Fix: `LastReply` is not set when using async methods\n - Fix: Ambiguous call when using LINQ extension methods and EF core\n - Fix: Remove dependency on `System.Linq.Async` and disable `GetListingAsyncEnumerable`\n\n#### 33.1.6\n - Fix: Use .NET Core API for .NET 5 builds to fix various networking and connectivity issues\n - New: Support detection of FRITZ!Box FTP servers (allows for server specific commands)\n\n#### 33.1.5\n - Fix: Do not force users to `Connect` if capabilities are not loaded (only force if `Capabilities` are read before connecting)\n\n#### 33.1.4\n - Fix: Conditionally hard-abort `AutoConnect` only if the credentials were incorrect\n\n#### 33.1.3\n - New: `LogToFile` and `LogToConsole` are now available on .NET Framework / .NET 5.0\n - Fix: `Capabilities` & `HashAlgorithms` are returned if they are loaded regardless of connection status\n\n#### 33.1.2\n - Fix: Prevent `Capabilities` & `HashAlgorithms` from causing sync-over-async path\n - Fix: `NullReferenceException` during `UploadFile` if the error message is unknown\n - Fix: If incorrect credentials are passed to `AutoConnect`, it does not hard abort\n - Fix: Initializing TLS Authentication hangs in .NET 5 if `SslBuffering` is enabled\n\n#### 33.1.1\n - New: Support for .NET 5.0 platform\n - New: Support for `IAsyncEnumerable` pattern in .NET Standard 2.0+ and .NET 5.0 (thanks [hez2010](/hez2010))\n - New: Async variant of `GetListingAsync` introduced: `GetListingAsyncEnumerable`\n\n#### 33.0.3\n- Fix: URI ports not being respected when Uri constructor used (thanks [julian94](/julian94))\n- Fix: Respect `332 Need account for login` response during FTP client authorization (thanks [novak-as](/novak-as))\n- Fix: Set default value for `restartPosition` in `Download` method to match `FtpClient` method (thanks [AdamLewisGMSL](/AdamLewisGMSL))\n- Fix: Improved handling for resuming upload when the connection drops (thanks [pradu71](/pradu71))\n\n#### 33.0.2\n - Fix: Honor custom parsers if server-specific handler is used\n\n#### 33.0.1\n - Fix: Create server-specific handler if a custom handler has not been set (thanks [Adhara3](/Adhara3))\n\n#### 33.0.0\n - New: Reworked timezone conversion API (simply set `TimeConversion` and `TimeZone`)\n - New: Options to convert server timestamps into the format of your choice (`ServerTime`, `LocalTime` and `UTC`)\n - New: Support for conversion to local timezone in .NET core (set `LocalTimeZone`)\n - New: `GetListing` honors the time conversion settings of the active client\n - New: `GetModifiedDate` honors the time conversion settings of the active client\n - New: `SetModifiedDate` honors the time conversion settings of the active client\n - New: Reworked API for Custom file listing parsers (simply set `ListingCustomParser` on the client)\n - Fix: Drop support for legacy file listing parsing routines (`FtpParser.Legacy` will no longer work)\n - Fix: Unexpected time conversion occuring in `GetModifiedTimeAsync` \n - Change: Breaking changes to the `TimeConversion` property.\n - Change: Breaking changes to the `TimeOffset` property, which has been replaced by `TimeZone`\n\n#### 32.4.7\n - Fix: \"The connection was terminated before a greeting could be read\"\n\n#### 32.4.6\n - Platform: Add support for .NET Standard 2.1\n - Platform: Upgrade `System.Net.Security` from version 4.3.0 to 4.3.2 to fix security issues\n - Performance: Quickly abort detection if host is unavailable during `AutoDetect`/`AutoConnect`\n - Fix: `UploadDirectory` fails for some files with \"Unable to read data from the transport connection\" (thanks [manuelxmarquez](/manuelxmarquez))\n - Fix: Comment for `UploadFile`/`UploadFileAsync`/`DownloadFile`/`DownloadFileAsync` methods\n - Fix: Stack overflow during connection when server responds incorrectly to PASS command\n\n#### 32.4.5\n - Fix: Uncatchable NullReferenceException is occasionally thrown from `ConnectAsync`\n\n#### 32.4.4\n  - New: Automatic FTPS connection mode: `FtpEncryptionMode.Auto` which connects in FTP and attempts to upgrade to FTPS\n  - New: `IsEncrypted` property to check if FTPS encryption is currently active for this connection\n  - Fix: `ValidateCertificateRevocation` property was not being honored in async version (thanks [kolorotur](/kolorotur))\n\n#### 32.4.3\n  - Fix: Ensure file is retried sucessfully when first upload/download fails with an `IOException` (thanks [manuelxmarquez](/manuelxmarquez))\n  - Fix: Ensure file streams read and write correctly even when no `FtpClient` is provided (thanks [manuelxmarquez](/manuelxmarquez))\n  - Fix: Clear custom parser when removing parser or clearing all parsers (thanks [rubenhuisman](/rubenhuisman))\n\n#### 32.4.1\n  - New: `LocalFileBufferSize` property to control size of file buffer during local file I/O\n\n#### 32.4.0\n  - New: `UploadDirectoryDeleteExcluded` property to control if excluded files are deleted during Upload (thanks [philippjenni](/philippjenni))\n  - New: `DownloadDirectoryDeleteExcluded` property to control if excluded files are deleted during Download (thanks [philippjenni](/philippjenni))\n  - Fix: Dispose AsyncWaitHandles to stop handle leak in .NET Framework 4.5 (thanks [sdiaman1](/sdiaman1))\n  - Fix: Implement proper cancellation support in `UploadDirectory` (once file transfer begins it cannot be cancelled)\n  - Fix: Implement proper cancellation support in `DownloadDirectory` (once file transfer begins it cannot be cancelled)\n  - Fix: Implement proper cancellation support in FXP `TransferDirectory`\n  - Fix: Implement proper cancellation support in recursive `GetListing`\n  - Fix: Correctly resume when unexpectedEOF error received during uploading a file (thanks [mrcopperbeard](/mrcopperbeard))\n  - Fix: Hide internal properties in `FtpClient` that are not meant to be exposed\n  - Fix: Update `IFtpClient` with the latest set of public properties that are meant to be exposed\n\n#### 32.3.3\n  - Fix: Downloading or uploading a directory can generate incorrect local paths\n\n#### 32.3.2\n  - Fix: Downloading or uploading a directory can generate incorrect local paths\n  - Fix: Expose `LoadProfile` API so it can be called by the generated code from `AutoDetect`\n\n#### 32.3.1\n  - New: `ListingDataType` property to get file listings in ASCII/Binary\n  - New: `DownloadZeroByteFiles` property to control if zero-byte files should be downloaded or skipped\n  - Fix: Downloading 0-byte files crashes since no data downloaded\n\n#### 32.3.0\n  - New: All server-specific handlers moved to dedicated classes that extend `FtpBaseServer`\n  - New: Ability to handle custom non-standard FTP servers by extending `FtpBaseServer`\n  - Fix: Only overwrite local file after the first bytes downloaded of a remote file\n\n#### 32.2.2\n  - New: Tracking progress with FXP transfers is supported for all transfer modes\n  - New: Track low-level progress with new `TransferredBytes` in `FtpProgress` class (thanks [Adhara3](/Adhara3))\n  - New: `FXPProgressInterval` property to control how often FXP progress reports are sent\n  - Fix: Hide `TransferFileFXPInternal` because its an internal transfer method and not to be used directly\n\n#### 32.2.1\n  - Fix: `FtpFileExtensionRule` was failing to compare extensions unless they were prefixed with a dot\n\n#### 32.2.0\n  - New: `GetChecksum` allows you to specify a hash algorithm to be run on the server if supported\n  - New: `GetChecksum` has special support for switching the server-side algorithm for HASH command support\n  - New: FXP file transfer now validates the file using the first mutually supported algorithm\n\n#### 32.1.1\n  - Fix: Incorrectly formatted string returned by utility method `TransferSpeedToString`\n\n#### 32.1.0\n  - New: `CompareFile` and `CompareFileAsync` methods to quickly perform various equality checks on a uploaded/downloaded file\n\n#### 32.0.0\n  - Fix: When download fails and we need to retry on failed verification, ensure that file is re-downloaded\n  - Fix: When FXP transfer fails and we need to retry on failed verification, ensure that file is re-transfered\n  - Fix: When uploaded file is skipped, `FtpStatus.Failed` is returned instead of `FtpStatus.Skipped`\n  - Fix: Properly handle 4xx and 5xx series of errors and indicate failure when uploading or downloading files\n  - Fix: Correctly detect if server-side recursion is supported otherwise fallback to manual directory recursion\n  - Fix: Only resume download of files if Append mode is selected (in Overwrite mode we restart the download)\n  - Change: `Upload` and `UploadAsync` now returns `FtpStatus` to indicate skipped, success or failed\n\n#### 31.3.2\n  - Fix: Proper session handling for FXP connections and disconnection of cloned connections\n  - Performance: Reduce redundant file size check in `DownloadFile` when appending is used\n\n#### 31.3.1\n  - New: `AutoDetect` and `AutoConnect` now auto-configure for Azure FTP servers using known connection settings\n  - Improve code generation of `FtpProfile` to use LoadProfile rather than setting each property individually\n  - Add advanced Timeout and Socket settings to `FtpProfile` for Azure auto configuration\n  - Fix: All exception classes now inherit from `FtpException`\n  - All exceptions and `FtpProfile` are now serializable in .NET Framework\n\n#### 31.3.0\n  - New: `TransferFile` and `TransferDirectory` methods to transfer files from server to server (thanks [n0ix](/n0ix))\n  - New: FXP (File Transfer Protocol) implementation to support direct server-to-server transfers (thanks [n0ix](/n0ix))\n\n#### 31.2.0\n  - New: Predefined rules for filtering on file name using regular expressions (thanks [n0ix](/n0ix))\n  - New: Predefined rules for filtering on folder name using regular expressions (thanks [n0ix](/n0ix))\n  - Fix: Don't calculate ETA and percentage of `FtpProgress` if file size is zero (thanks [Adhara3](/Adhara3))\n  - Fix: `GetFilePermissions` should use `GetObjectInfo` instead of `GetListing` to prevent incorrect filepaths\n\n#### 31.1.0\n  - New: Support for MMD5 file hashing command to validate downloaded/uploaded files. (thanks [n0ix](/n0ix))\n  - Change: Disable all `Begin*` and `End*` methods for .NET 4.5 and onwards as `async`/`await` is supported.\n  - Improve: `GetHashAlgorithmAsync` and `SetHashAlgorithmAsync` implemented as true async methods with cancellation support\n  - Improve: `GetObjectInfoAsync` implemented as true async methods with cancellation support\n\n#### 31.0.0\n  - New: Download and upload file methods indicate if file was transferred, skipped or failed to transfer\n  - New: C# and VB.NET Examples for all file and folder transfer methods\n  - New: VB.NET Examples for all methods (not included in Nuget package but available on Github)\n  - Change: `DownloadFile` and `UploadFile` return `FtpStatus` instead of boolean flag for tri-state feedback\n\n#### 30.2.0\n  - New: Support for XCRC FTP Command and CRC32 hash support to validate downloaded/uploaded files (thanks [n0ix](/n0ix))\n\n#### 30.1.1\n  - Fix: Calculation of local file path during DownloadFolder sometimes ignores base directory\n\n#### 30.1.0\n  - New: Support multi-file progress tracking by indicating file index and local & remote path of the file\n  - New: `UploadDirectory` and `DownloadDirectory` now supports tracking progress of the entire task \n  - New: `UploadFiles` and `DownloadFiles` now supports tracking progress for both sync/async methods\n  - Fix: Update `IFtpClient` interface by adding new `UploadDirectory` and `DownloadDirectory` methods\n  - Fix: Correctly determine file exists on servers that don't support SIZE command and return error 550\n  - Fix: Support more strings to determine if file exists using SIZE command\n\n#### 30.0.0\n  - New: `UploadDirectory` and `UploadDirectoryAsync` methods to recursively upload or mirror a directory\n  - New: `DownloadDirectory` and `DownloadDirectoryAsync` methods to recursively download or mirror a directory\n  - New: Rule engine to filter files that should be uploaded/downloaded according to multiple user-defined rules\n  - New: Predefined rules for filtering on folder name, useful for blacklisting certain system folders\n  - New: Predefined rules for filtering on file name or file extensions, useful for transferring a subset of files\n  - New: Predefined rules for filtering on file size, useful for filtering out very large files\n  - New: Ability to determine parent/self/child directories in listing using `SubType` property of `FtpListItem`\n  - Fix: Machine listings sometimes cause infinite recursion in `GetListing` when recursing into self directory\n  - Change: `CreateDirectory` and `CreateDirectoryAsync` now return a flag indicating if it was created or skipped\n  - Change: Use public fields instead of public properties for `FtpListItem`\n  - Change: Improve performance of `CreateDirectory` by skipping the directory exists check\n\n#### 29.0.4\n  - Fix: Detect \"file size not allowed in ASCII\" string for French FTP servers\n\n#### 29.0.3\n  - Fix: TimeoutException when trying to read FTP server reply after Download/Upload\n\n#### 29.0.2\n  - New: Add `SendHost` and `SendHostDomain` to control if HOST command is sent after handshake (thanks [dansharpe83](/dansharpe83))\n\n#### 29.0.1\n  - Fix: Read stale NOOP responses after file transfer and also after `226 Transfer complete` (thanks [aliquid](/aliquid))\n  - Fix: Correct default value for `TimeConversion` property to assume UTC timestamps\n\n#### 29.0.0\n  - New: Support .NET Standard 2.0\n  - New: Keep control socket alive during long file transfers using NOOP (thanks [aliquid](/aliquid))\n  - New: Add `NoopInterval` property to control interval of NOOP commands (thanks [aliquid](/aliquid))\n  - New: Add `TimeConversion` property to control if timestamps are converted from UTC into local time\n  - Refactor: Rename `FtpExists` to `FtpRemoteExists` to make its usage clear\n  - New: Support detection of IBM z/OS and MVS FTP OS and server (allows for server specific commands)\n  - New: New constructors for `FtpClient` to support hostnames in `Uri` format\n  - Fix: Always send progress reports after file download, even for zero-length files\n  \n#### 28.0.5\n  - New: `ValidateCertificateRevocation` property to control if certificate revocation is checked.\n\n#### 28.0.4\n  - New: `ValidateAnyCertificate` property to validate any received server certificate, useful for Powershell\n  - Fix: Default SSL protocol used in .NET 4.5+ release is now TLS 1.2 (latest supported protocol)\n\n#### 28.0.3\n  - New: Override the server-specific recursive LIST detection by setting `RecursiveList`\n  - Fix typo in IP parsing regex that causes fallback to Host IP to fail (thanks Andy Whitfield)\n\n#### 28.0.2\n  - Fix: Verification of the MD5 Hash when file name contains spaces (thanks [Nimelo](/Nimelo))\n\n#### 28.0.1\n  - Fix: Safely absorb TimeoutException thrown after the file has fully uploaded/downloaded\n\n#### 28.0.0\n  - New: Progress reporting for synchronous methods `Upload`, `Download`, `UploadFile` and `DownloadFile` are now sent via delegates\n  - Fix: Correctly send progress for synchronous methods and retain `IProgress` for async methods\n\n#### 27.1.4\n  - Fix: Correctly assume Unix file listing parser for SunOS & Solaris servers\n  - Fix: Safely absorb TimeoutException thrown after the file has fully uploaded/downloaded\n\n#### 27.1.3\n  - New: Support detection of Sun OS Solaris FTP OS and server (allows for server specific commands)\n  - Fix: UploadFile fails when destination folder is empty on SunOS (550 error)\n\n#### 27.1.2\n  - Fix: Unable to upload files to OpenVMS servers if path contains numeric characters\n  - Fix: Assume FTP commands supported by OpenVMS HGFTP server if FEAT not supported\n  - FiX: Improve detection of OpenVMS absolute paths\n  - Fix: `Connect` & `ConnectAsync` throw ArgumentException when passing an incomplete `FtpProfile`\n\n#### 27.1.1\n  - New: Auto-detect the correct FTP listing parser when SYST command fails (IIS, Azure, OpenVMS)\n  - New: Assume FTP commands supported by OpenVMS HGFTP server\n  - FiX: Support edge case for OpenVMS absolute paths (directive can be alpha-numeric)\n\n#### 27.1.0\n  - New: Improved transfer rate throttling when using an upload/download speed limit (thanks [wakabayashik](/wakabayashik))\n\n#### 27.0.3\n  - New: Support detection of XLight FTP server software (allows for server specific commands)\n  - New: Partial support for getting directory listing using STAT command (`GetListing` supports new `FtpListOption.UseStat`)\n  - Fix: `GetFileSize` always returns 0 instead of correct file size (thanks [RadiatorTwo](/RadiatorTwo))\n  \n#### 27.0.2\n  - Fix: `FileExists` and `FileExistsAsync` support switching to binary mode for servers that need it\n  \n#### 27.0.1\n  - Fix: Error using BlueCoat proxy to an FTP server on a port other than port 21\n  - Fix: Error using UserAtHost proxy to an FTP server on a port other than port 21\n  \n#### 27.0.0\n  - New: Change `Capability` API to return a list instead of bitwise enum (to support more than 32 distinct capabilities)\n  - New: Change custom parsers to take capabilities as a list instead of bitwise enum (to match client implementation)\n  - New: Support detection of FTP2S3 gateway server software (allows for server specific commands)\n  - New: Support detection of server-specific capabilities of Serv-U FTP Gateway\n  - New: Support `RMDA` command to quickly and recursively delete a directory from Serv-U FTP Gateway\n  \n#### 26.0.2\n  - Fix: Improve performance of `GetFileSize` to only switch to Binary for servers that require it\n  - Fix: Ensure data type (ASCII/Binary) is correctly set during `GetFileSize` for servers that require it\n  - Fix: Ensure data type (ASCII/Binary) is correctly set for cloned connections\n  - Fix: Ensure data type (ASCII/Binary) is correctly set during `GetListing` and `GetNameListing`\n  - Fix: Reset server detection state flags whenever we connect to a server, to allow for reuse of `FtpClient`\n  - Fix: Copy server detection state flags to cloned connections to improve performance\n  - Fix: Retry `GetListing` if temporary error \"Received an unexpected EOF or 0 bytes from the transport stream\"\n\n#### 26.0.1\n  - Fix: Prefer using Passive/Active modes rather than Enhanced Active/Passive during auto-detection\n  - Fix: Some FTP servers do not open a port when listing an empty folder with `GetNameListing`\n  - Fix: Hard catch and suppress all exceptions during disposing to solve all random exceptions\n\n#### 26.0.0\n  - New: Automatic FTP connection negotiation using `AutoConnect()`\n  - New: Automatic detection of working FTP connection settings using `AutoDetect()`\n  - New: C# code generation of working connection settings using `FtpProfile.ToCode()`\n  - New: Support more capability detection commands: EPSV, CPSV, NOOP, CLNT, SSCN, SITE commands for ProFTPd\n  - New: Improve transfer performance by only attempting EPSV once and then never using it again for that connection\n  - New: Support MKDIR & RMDIR commands specially for ProFTPd to quickly create and delete a directory on the server-side\n  - New: Support PRET command before downloading or uploading files for servers like ProFTPd & DrFTPd\n  - New: Support detection of BFTPd server software (allows for server specific commands)\n  - Fix: When uploading files in `FtpExists.NoCheck` mode, file size check should not be done\n  - Fix: Some FTP servers do not open a port when listing an empty folder (thanks [Mortens4444](/Mortens4444))\n  - Fix: `OpenRead` with `EnableThreadSafeDataConnections` always transfers in ASCII (thanks [ts678](/ts678))\n  - Refactor: Delete legacy static methods: `OpenRead`, `OpenWrite`, `OpenAppend` (dynamic versions still exist)\n  - Refactor: Move `CalcChmod` from `FtpClient` to `FtpExtensions` (as part of repository cleanup task)\n\n#### 25.0.6\n  - Fix: Async methods do not work with Active FTP mode and SSL/encryption (thanks [Mortens4444](/Mortens4444))\n  - Fix: For OpenVMS absolute paths may not contain slashes but are still absolute (3rd revision)\n\n#### 25.0.5\n  - Fix: Divide-by-zero exceptions while calculating progress of file uploads/downloads\n\n#### 25.0.4\n  - Fix: Supress all exceptions when Disposing the underlying FtpSocketStream\n\n#### 25.0.3\n  - Fix: Received an unexpected EOF or 0 bytes from the transport stream (thanks [mikemeinz](/mikemeinz))\n  - Fix: `UploadFile()` progress callback is not called if the file already exists on the server\n  - (.NET core) Fix: `Connect()` method sometimes causes the thread to hang indefinitely (thanks [radiy](/radiy))\n  - Fix: Regression of #288 where upload hangs with only a few bytes left (thanks [cw-andrews](/cw-andrews))\n\n#### 25.0.1\n  - New: `FtpAuthenticationException` for authentication errors (thanks [erik-wramner](/erik-wramner))\n  - New: Added support to detect Homegate FTP Server\n\n#### 25.0.0\n  - New: SSL Buffering is now switchable via the `SslBuffering` parameter\n  - Fix: SSL Buffering is automatically disabled when using FTP proxies, and enabled in all other cases\n  - Fix: Revert PR #383 as it was causing regression issues in SSL connectivity\n  - Fix: Disable automatic IP correction to fix connectivity issues via BlueCoat proxy servers (thanks [CMIGIT](/CMIGIT))\n  - Refactor: Rename `FtpClientUserAtHostProxyBlueCoat` to `FtpClientBlueCoatProxy`\n  - Fix: For OpenVMS absolute paths may not contain slashes but are still absolute (2nd revision) (thanks [tonyhawe](/tonyhawe))\n  - Fix: Detect file existence string `\"Can't find file\"` to fix FileExists check on some servers (thanks [reureu](/reureu))\n  - Fix: Feature parity between `FileExists` and `FileExistsAsync` methods, added support for FtpReply 550 check (thanks [reureu](/reureu))\n  - Fix: Feature parity between `UploadFile` and `UploadFileAsync` methods, added support for AppendNoCheck handling (thanks [reureu](/reureu))\n\n#### 24.0.0\n  - New: Get detailed progress information for uploads/downloads via the `FtpProgress` object (thanks [n0ix](/n0ix))\n  - New: Get transfer speed and ETA (estimated time of arrival) for uploads/downloads (thanks [n0ix](/n0ix))\n  - Fix: Files were uploaded in Write mode instead of Append mode when the exists mode is `AppendNoCheck` and we couldn't read the offset position (thanks @everbalovas)\n  - Fix: Swap `SslStream` and `BufferedStream` so proxied connections with `FtpClientHttp11Proxy` are to connect (thanks @rmja)\n  \n#### 23.1.0\n  - New: Additional FTP Server software detection (HP NonStop/Tandem, GlobalScape EFT, Serv-U, Cerberus, CrushFTP, glFTPd)\n  - New: Assume capabilities for servers that don't support FEAT (wuFTPd)\n  - Fix: `FileExists` returns false if name listing is used and server lists filenames with the path\n  - Fix: For OpenVMS absolute paths may not contain slashes but are still absolute\n  - Fix: For `Download()` methods `restartPosition` should not be mandatory\n  \n#### 23.0.0\n  - New: Ability to cancel all async methods via `CancellationToken` (thanks [WolfspiritM](https://github.com/WolfspiritM))\n  - New: `ReadTimeout` is now honored by all async methods (thanks [WolfspiritM](https://github.com/WolfspiritM))\n  - New: FTP Server operating system detection (Windows, Unix, VMS, IBM/OS400)\n  - (.NET core) Fix: GetListing blocking with no timeout (thanks [WolfspiritM](https://github.com/WolfspiritM))\n  - (.NET core) Fix async methods by not using the the async read function (thanks [WolfspiritM](https://github.com/WolfspiritM))\n  \n#### 22.0.0\n  - New: Ability to resume a download via `existsMode` on `DownloadFile()` and `DownloadFiles()` (thanks [n0ix](https://github.com/n0ix))\n  - New: Ability to turn off checking for server capabilities using FEAT command (thanks [nhh-softwarehuset](https://github.com/nhh-softwarehuset))\n  - Fix: Add workaround if a server advertises a non-routeable IP in PASV Mode (thanks [n0ix](https://github.com/n0ix))\n  - Fix: Recursive directory deletion tries to delete the same file twice (because GetListing is also recursive)\n  \n#### 21.0.0\n  - New: `OnLogEvent` callback to get logs in the context of indivivdual FtpClient connections\n  - Fix: All logging is done in the context of an `FtpClient` and then passed to `FtpTrace` listeners\n  - Signature for custom list parsers has changed, `FtpClient` argument added to the end\n  \n#### 20.0.0\n  - New: FTP Server software detection (PureFTPd, VsFTPd, ProFTPD, FileZilla, OpenVMS, WindowsCE, WuFTPd)\n  - New: Detect if the FTP server supports recursive file listing (LIST -R) command using whitelist\n  - New: `GetListing` will manually recurse through directories if `FtpListOption.Recursive` is set and server does not support recursion\n  - New: Added `LastReply` property which returns the last `FtpReply` recieved from the server.\n  - New: Added new upload option `AppendNoCheck` to append to a file on the server without checking if it exists (thanks @everbalovas)\n  - Fix: During upload, respond to any error in 5xx series, not just 550 (thanks [stengnath](https://github.com/stengnath))\n  - Fix: Various fixes to `UploadFileAsync` based on fixes already implemented in `UploadFile`\n  \n#### 19.2.4\n  - Fix: `UploadFilesAsync` with `errorHandling` deletes the entire directory instead of specific files\n  - Fix: Server responds to EPSV with 425 \"Data connection failed\" but connects with PASV (thanks [ejohnsonTKTNET](https://github.com/ejohnsonTKTNET))\n  - Fix: Use proper async configuration for .NET Async methods (thanks [ejohnsonTKTNET](https://github.com/ejohnsonTKTNET))\n  - Fix: Improve implementation of upload and download resuming in Async methods (thanks [ejohnsonTKTNET](https://github.com/ejohnsonTKTNET))\n  \n#### 19.2.3\n  - Fix: `UploadFile()` or `UploadFiles()` sometimes fails to create the remote directory if it doesn't exist\n  - Fix: `DownloadDataType` Binary value ignored on ASCII-configured FTP servers\n  - Performance improvement: Added `BufferedStream` between `SslStream` and `NetworkStream` (thanks [stengnath](https://github.com/Lukazoid))\n  - Fix: When the FTP server sends 550, transfer is received but not confirmed (thanks [stengnath](https://github.com/stengnath))\n  - Fix: Make `Dispose` method of `FTPClient` virtual (thanks @martinbu)\n  - Fix: `OpenPassiveDataStream`/`Async()` uses the target FTP host instead of the configured proxy (thanks @rmja)\n  - Fix: `FileExists()` for Xlight FTP Server (thanks @oldpepper)\n  - Fix: FTPD \"550 No files found\" when folder exists but is empty, only in PASV mode (thanks [stengnath](https://github.com/olivierSOW))\n  - Fix: Many unexpected EOF for remote file `IOException` on Android (thanks @jersiovic)\n  - Fix: Race condition when `BeginInvoke` calls the callback before the `IAsyncResult` is added (thanks [stengnath](https://github.com/Lukazoid))\n  \n#### 19.2.2\n  - Fix: Prevent socket poll from hammering the server multiple times per second\n  - Fix: Allow using absolute paths that include drive letters (Windows servers)\n  - Performance improvement: Only change the FTP data type if different from required type\n  - Performance improvement: Download all files in EOF mode and skip the file size check, unless download progress is required\n  - Added all missing async versions of FTP methods to `IFtpClient`\n  - System: Certain core FTP socket handling operations have been changed to improve reliability & performance.\n  \n#### 19.1.4\n  - Fix: Fix hang in TLS activation because no timeout is set on the underlying `NetworkStream` (thanks @iamjay)\n  \n#### 19.1.3\n  - Added async versions of FTP methods to `IFtpClient` (thanks @peterfortuin)\n  - Fix: Fixes when `ActivePorts` is specified in active FTP mode (thanks @ToniMontana)\n  - Fix: Throw `OperationCanceledException` instead of `FtpException` when cancellation is requested (thanks [taoyouh](https://github.com/taoyouh))\n  \n#### 19.1.2\n  - Fix: Add support for checking if file exists on Serv-U FTP Server\n  - Fix: Make `IFtpClient` inherit from `IDisposable` (thanks @repl-andrew-ovens)\n  - (UWP) Fix: UWP does not allow `File.Exists()` to run in UI thread (thanks [taoyouh](https://github.com/taoyouh))\n  \n#### 19.1.1\n  - Fix: When downloading files in ASCII mode, file length is unreliable therefore we read until EOF\n  - Fix: When upload/download progress is indeterminate, send -1 instead of NaN or Infinity\n  - Fix: `NetStream` was not assigned in `FtpSocketStream` for .NET Standard in active FTP mode (thanks @ralftar)\n  - Fix: `CurrentDataType` was not set for ASCII transfers in `DownloadFileAsync`/`UploadFileAsync` (thanks [taoyouh](https://github.com/taoyouh))\n  - Fix: Sometimes `FtpSocketStream` and `FtpDataStream` are not disposed in `FtpSocketStream.Dispose` (thanks [taoyouh](https://github.com/taoyouh))\n  \n#### 19.1.0\n  - New Progress reporting for `UploadFile` & `DownloadFile` methods via `IProgress`\n  - Fix: `Stream.Position` should not be set in `UploadFileInternal` unless supported\n  \n#### 19.0.0\n  - New Task-based async methods for .NET Standard and .NET Fx 4.5 (thanks [taoyouh](https://github.com/taoyouh))\n  - New async methods for `UploadFile`, `DownloadFile`, `UploadFiles` & `DownloadFiles` (thanks [artiomchi](https://github.com/artiomchi))\n  - (UWP) Fix: `FileNotFoundException` with reference `System.Console` (thanks [artiomchi](https://github.com/artiomchi))\n  - (.NET core) Fix: Thread suspends when calling `UploadFile` or `DownloadFile` (thanks [artiomchi](https://github.com/artiomchi))\n  - (.NET core) Fix: File download hangs inconsistently when reading data from stream (thanks @artiomchi, [bgroenks96](https://github.com/bgroenks96))\n  - (.NET core) Fix: Stream does not dispose due to wrong handling of closing/disposing (thanks [artiomchi](https://github.com/artiomchi))\n  - Fix: File upload EOS bug when calling `Stream.Read` (thanks [bgroenks96](https://github.com/bgroenks96), @artiomchi, @taoyouh)\n  - Fix: `DownloadFileInternal` not recognizing the download data type\n  with `EnableThreadSafeConnections` (thanks [bgroenks96](https://github.com/bgroenks96))\n  - (Backend) Migrate to a single VS 2017 solution for all frameworks (thanks [artiomchi](https://github.com/artiomchi))\n  - (Backend) Continuous Integration using AppVeyor  (thanks [artiomchi](https://github.com/artiomchi))\n  \n#### 18.0.1\n  - Add `IFtpClient` interface to build unit tests upon main `FtpClient` class (thanks [Kris0](https://github.com/Kris0))\n  - Disposing `FtpDataStream` reads server reply and closes the underlying stream (thanks [Lukazoid](https://github.com/Lukazoid))\n  \n#### 18.0.0\n  - New `SetModifiedTime` API to change modified date of a server file in local timezone/UTC\n  - Add type argument to `GetModifiedTime`, allowing for getting dates in UTC/Local timezone\n  - Breaking changes to Async API of `GetModifiedTime` (addition of type argument)\n  - `GetModifiedTime` and `SetModifiedTime` now honor the `TimeOffset` property in `FtpClient`\n  - Add `checkIfFileExists` to `OpenRead`, `OpenAppend` and `OpenWrite` to skip `GetFileSize` check\n  - Fix issue where `InnerException` is null during a file transfer (upload/download)\n  - Improve performance of typical uploads/downloads by skipping the extra file exists check\n  \n#### 17.6.1\n  - Fix for `CreateDirectory` and `DirectoryExists` to allow null/blank input path values\n  - Fix for `GetFtpDirectoryName` to return correct parent folder of simple folder paths (thanks [ww898](https://github.com/ww898))\n  \n#### 17.6.0\n  - Add argument validation for missing/blank arguments in : `Upload, Download, UploadFile(s), DownloadFile(s), GetObjectInfo, DeleteFile, DeleteDirectory, FileExists, DirectoryExists, CreateDirectory, Rename, MoveFile, MoveDirectory, SetFilePermissions, Chmod, GetFilePermissions, GetChmod, GetFileSize, GetModifiedTime, VerifyTransfer, OpenRead, OpenWrite, OpenAppend`\n  - Disable all async methods on .NET core due to persistant `PlatformUnsupported` exception (if you need async you are free to contribute a non-blocking version of the methods)\n  \n#### 17.5.9\n  - Increase performance of `GetListing` by reading multiple lines at once (BulkListing property, thanks [sierrodc](https://github.com/sierrodc))\n  \n#### 17.5.8\n  - Add support for parsing AS400 listings inside a file (5 fields) (thanks [rharrisxtheta](https://github.com/rharrisxtheta))\n  - Retry interpreting file listings after encountered invalid date format (thanks [rharrisxtheta](https://github.com/rharrisxtheta))\n  - Always switch into binary mode when running SIZE command (thanks [rharrisxtheta](https://github.com/rharrisxtheta))\n  \n#### 17.5.7\n  - Honor `UploadDataType` and `DownloadDataType` in all sync/async cases (thanks [rharrisxtheta](https://github.com/rharrisxtheta))\n  - Force file transfers in BINARY mode for known 0 byte files (thanks [rharrisxtheta](https://github.com/rharrisxtheta))\n  - Allow file transfers in ASCII mode if the server doesn't support the SIZE command (thanks [rharrisxtheta](https://github.com/rharrisxtheta))\n  \n#### 17.5.6\n  - Fix `NullReferenceException` when arguments are null during `FtpTrace.WriteFunc`\n  \n#### 17.5.5\n  - Remove internal locking for .NET Standard 1.4 version since unsupported on UWP\n  \n#### 17.5.4\n  - Remove dependency on `System.Threading.Thread` for .NET Standard 1.4 version (for UWP)\n  \n#### 17.5.3\n  - Allow transferring files in ASCII/Binary mode with the high-level API (UploadDataType, DownloadDataType)\n  \n#### 17.5.2\n  - Add support for .NET 3.5 and .NET Standard 1.4 (supports Universal Windows Platform 10.0)\n  \n#### 17.5.1\n  - Add `FtpTrace.LogToConsole` and `LogToFile` to control logging in .NET core version\n  \n#### 17.5.0\n  - Add `PlainTextEncryption` API to support FTPS servers and plain-text FTP firewalls (CCC command)\n  - FluentFTP now uses unsafe code to support the CCC command (inside `FtpSslStream`)\n  - If you need a \"non unsafe\" version of the library please add an issue\n  \n#### 17.4.4\n  - Add logging for high-level function calls to improve remote debugging (`FtpTrace.LogFunctions`)\n  - Add settings to hide sensitive data from logs (`FtpTrace.LogIP`, `LogUserName`, `LogPassword`)\n  - Add `RecursiveList` to control if recursive listing should be used\n  - Auto-detect Windows CE and disable recursive listing during `DeleteDirectory()`\n  \n#### 17.4.2\n  - Add `UploadRateLimit` and `DownloadRateLimit` to control the speed of data transfer (thanks [Danie-Brink](https://github.com/Danie-Brink))\n  \n#### 17.4.1\n  - Fix parsing of `LinkTarget` during `GetListing()` on Unix FTP servers\n  - Improve logging clarity by removing \"FluentFTP\" prefix in TraceSource\n  \n#### 17.4.0\n  - Add `MoveFile()` and `MoveDirectory()` to move files and directories safely\n  \n#### 17.3.0\n  - Automatically verify checksum of a file after upload/download (thanks [jblacker](https://github.com/jblacker))\n  - Configurable error handling (abort/throw/ignore) for file transfers (thanks [jblacker](https://github.com/jblacker))\n  - Multiple log levels for tracing/logging debug output in `FtpTrace` (thanks [jblacker](https://github.com/jblacker))\n  \n#### 17.2.0\n  - Simplify `DeleteDirectory()` API - the `force` and `fastMode` args are no longer required\n  - `DeleteDirectory()` is faster since it uses one recursive file listing instead of many\n  - Remove .NET Standard 1.4 to improve nuget update reliability, since we need 1.6 anyway\n  \n#### 17.1.0\n  - Split stream API into `Upload()`/`UploadFile()` and `Download()`/`DownloadFile()`\n  \n#### 17.0.0\n  - Greatly improve performance of `FileExists()` and `GetNameListing()`\n  - Add new OS-specific directory listing parsers to `GetListing()` and `GetObjectInfo()`\n  - Support `GetObjectInfo()` even if machine listings are not supported by the server\n  - Add `existsMode` to `UploadFile()` and `UploadFiles()` allowing for skip/overwrite and append\n  - Remove all usages of string.Format to fix reliability issues caused with UTF filenames\n  - Fix issue of broken files when uploading/downloading through a proxy (thanks [Zoltan666](https://github.com/Zoltan666))\n  - `GetReply()` is now public so users of `OpenRead`/`OpenAppend`/`OpenWrite` can call it after\n  \n#### 16.5.0\n  - Add async/await support to all methods for .NET 4.5 and onwards (thanks [jblacker](https://github.com/jblacker))\n  \n#### 16.4.0\n  - Support for .NET Standard 1.4 added.\n  \n#### 16.2.5\n  - Add `UploadFiles()` and `DownloadFiles()` which is faster than single file transfers\n  - Allow disabling UTF mode using DisableUTF8 API\n  \n#### 16.2.4\n  - First .NET Core release (DNXCore5.0) using Visual Studio 2017 project and shared codebase.\n  - Support for .NET 2.0 also added with shims for LINQ commands needed.\n  \n#### 16.2.1\n  - Add `FtpListOption.IncludeSelfAndParent` to `GetListing`\n  \n#### 16.1.0\n  - Use streams during upload/download of files to improve performance with large files\n  \n#### 16.0.18\n  - Support for uploading/downloading to Streams and byte[] with `UploadFile()` and `DownloadFile()`\n  \n#### 16.0.17\n  - Added high-level `UploadFile()` and `DownloadFile()` API. Fixed some race conditions.\n  \n#### 16.0.14\n  - Added support for FTP proxies using HTTP 1.1 and User@Host modes. (thanks [L3Z4](https://github.com/L3Z4))\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.3876953125,
          "content": "version: 1.0.0.{build}\n\nimage: Visual Studio 2017\n\nconfiguration: Release\n\nbefore_build:\n- cmd: msbuild FluentFTP.sln /t:Restore\n\nbuild:\n  verbosity: minimal\n\nafter_build:\n- cmd: msbuild FluentFTP.sln /t:FluentFTP:Pack /p:Configuration=Release\n\ntest_script:\n- cmd: >-\n    dotnet test fluentftp.tests -f net452\n    \n    dotnet test fluentftp.tests -f netcoreapp1.0\n\nartifacts:\n- path: '**\\*.nupkg'\n"
        }
      ]
    }
  ]
}