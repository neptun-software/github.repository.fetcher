{
  "metadata": {
    "timestamp": 1736711126403,
    "page": 969,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tomakita/Colorful.Console",
      "stars": 1314,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.560546875,
          "content": "# Taken from https://github.com/github/gitignore\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings \n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directory\nAppPackages/\nBundleArtifacts/\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.snk\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\n\n# FAKE - F# Make\n.fake/"
        },
        {
          "name": "Colorful.Console.sln",
          "type": "blob",
          "size": 5.56640625,
          "content": "ï»¿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio 15\nVisualStudioVersion = 15.0.26730.16\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"src\", \"src\", \"{23EF115A-EF43-400D-96AC-DD7219C6ED1D}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{1A8B6A51-5D03-4AC8-B87A-AE99109A6E53}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Colorful.Console\", \"src\\Colorful.Console\\Colorful.Console.csproj\", \"{728892AA-0890-46D9-9365-5F359229230E}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Colorful.Console.Tests\", \"src\\Colorful.Console.Tests\\Colorful.Console.Tests.csproj\", \"{1ADC83F4-BC90-45C8-BAE5-0EE674C0E27B}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ExampleConsoleApplication\", \"src\\ExampleConsoleApplication\\ExampleConsoleApplication.csproj\", \"{E69FFE1E-88DF-47BA-B878-C8D737369DEF}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tDebug|ARM = Debug|ARM\n\t\tDebug|x64 = Debug|x64\n\t\tDebug|x86 = Debug|x86\n\t\tRelease|Any CPU = Release|Any CPU\n\t\tRelease|ARM = Release|ARM\n\t\tRelease|x64 = Release|x64\n\t\tRelease|x86 = Release|x86\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{728892AA-0890-46D9-9365-5F359229230E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{728892AA-0890-46D9-9365-5F359229230E}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{728892AA-0890-46D9-9365-5F359229230E}.Debug|ARM.ActiveCfg = Debug|Any CPU\n\t\t{728892AA-0890-46D9-9365-5F359229230E}.Debug|ARM.Build.0 = Debug|Any CPU\n\t\t{728892AA-0890-46D9-9365-5F359229230E}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{728892AA-0890-46D9-9365-5F359229230E}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{728892AA-0890-46D9-9365-5F359229230E}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{728892AA-0890-46D9-9365-5F359229230E}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{728892AA-0890-46D9-9365-5F359229230E}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{728892AA-0890-46D9-9365-5F359229230E}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{728892AA-0890-46D9-9365-5F359229230E}.Release|ARM.ActiveCfg = Release|Any CPU\n\t\t{728892AA-0890-46D9-9365-5F359229230E}.Release|ARM.Build.0 = Release|Any CPU\n\t\t{728892AA-0890-46D9-9365-5F359229230E}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{728892AA-0890-46D9-9365-5F359229230E}.Release|x64.Build.0 = Release|Any CPU\n\t\t{728892AA-0890-46D9-9365-5F359229230E}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{728892AA-0890-46D9-9365-5F359229230E}.Release|x86.Build.0 = Release|Any CPU\n\t\t{1ADC83F4-BC90-45C8-BAE5-0EE674C0E27B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{1ADC83F4-BC90-45C8-BAE5-0EE674C0E27B}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{1ADC83F4-BC90-45C8-BAE5-0EE674C0E27B}.Debug|ARM.ActiveCfg = Debug|Any CPU\n\t\t{1ADC83F4-BC90-45C8-BAE5-0EE674C0E27B}.Debug|ARM.Build.0 = Debug|Any CPU\n\t\t{1ADC83F4-BC90-45C8-BAE5-0EE674C0E27B}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{1ADC83F4-BC90-45C8-BAE5-0EE674C0E27B}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{1ADC83F4-BC90-45C8-BAE5-0EE674C0E27B}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{1ADC83F4-BC90-45C8-BAE5-0EE674C0E27B}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{1ADC83F4-BC90-45C8-BAE5-0EE674C0E27B}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{1ADC83F4-BC90-45C8-BAE5-0EE674C0E27B}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{1ADC83F4-BC90-45C8-BAE5-0EE674C0E27B}.Release|ARM.ActiveCfg = Release|Any CPU\n\t\t{1ADC83F4-BC90-45C8-BAE5-0EE674C0E27B}.Release|ARM.Build.0 = Release|Any CPU\n\t\t{1ADC83F4-BC90-45C8-BAE5-0EE674C0E27B}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{1ADC83F4-BC90-45C8-BAE5-0EE674C0E27B}.Release|x64.Build.0 = Release|Any CPU\n\t\t{1ADC83F4-BC90-45C8-BAE5-0EE674C0E27B}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{1ADC83F4-BC90-45C8-BAE5-0EE674C0E27B}.Release|x86.Build.0 = Release|Any CPU\n\t\t{E69FFE1E-88DF-47BA-B878-C8D737369DEF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{E69FFE1E-88DF-47BA-B878-C8D737369DEF}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{E69FFE1E-88DF-47BA-B878-C8D737369DEF}.Debug|ARM.ActiveCfg = Debug|Any CPU\n\t\t{E69FFE1E-88DF-47BA-B878-C8D737369DEF}.Debug|ARM.Build.0 = Debug|Any CPU\n\t\t{E69FFE1E-88DF-47BA-B878-C8D737369DEF}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{E69FFE1E-88DF-47BA-B878-C8D737369DEF}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{E69FFE1E-88DF-47BA-B878-C8D737369DEF}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{E69FFE1E-88DF-47BA-B878-C8D737369DEF}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{E69FFE1E-88DF-47BA-B878-C8D737369DEF}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{E69FFE1E-88DF-47BA-B878-C8D737369DEF}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{E69FFE1E-88DF-47BA-B878-C8D737369DEF}.Release|ARM.ActiveCfg = Release|Any CPU\n\t\t{E69FFE1E-88DF-47BA-B878-C8D737369DEF}.Release|ARM.Build.0 = Release|Any CPU\n\t\t{E69FFE1E-88DF-47BA-B878-C8D737369DEF}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{E69FFE1E-88DF-47BA-B878-C8D737369DEF}.Release|x64.Build.0 = Release|Any CPU\n\t\t{E69FFE1E-88DF-47BA-B878-C8D737369DEF}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{E69FFE1E-88DF-47BA-B878-C8D737369DEF}.Release|x86.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{728892AA-0890-46D9-9365-5F359229230E} = {23EF115A-EF43-400D-96AC-DD7219C6ED1D}\n\t\t{1ADC83F4-BC90-45C8-BAE5-0EE674C0E27B} = {23EF115A-EF43-400D-96AC-DD7219C6ED1D}\n\t\t{E69FFE1E-88DF-47BA-B878-C8D737369DEF} = {23EF115A-EF43-400D-96AC-DD7219C6ED1D}\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {633523E8-2BF0-4EBB-A7A7-689D6DD7D166}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.05078125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Tom Akita\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.2490234375,
          "content": "# [Colorful.Console](http://colorfulconsole.com/)\n[![Build status](https://ci.appveyor.com/api/projects/status/hf7y1un65mdfkfbx?svg=true)](https://ci.appveyor.com/project/tomakita/colorful-console)\n\n**Colorful.Console** is a C# library that wraps around the `System.Console` class, exposing enhanced styling functionality.\n\n![Colorful.Console icon](https://github.com/tomakita/Colorful.Console/blob/master/static/colorful_icon_ngsize.png)\n\n# How to Get It\n\n- Download [`Colorful.Console`](https://www.nuget.org/packages/Colorful.Console) from NuGet.\n- Perform a Git clone\n> git clone https://github.com/tomakita/Colorful.Console.git\n\n# Basic Usage\n```c#\nusing System;\nusing System.Drawing;\nusing Console = Colorful.Console;\n...\n...\nConsole.WriteLine(\"console in pink\", Color.Pink);\nConsole.WriteLine(\"console in default\");\n```\n![Basic Example](https://github.com/tomakita/Colorful.Console/blob/master/static/basic_x.png)\n\n\n# Write With Full System.Drawing.Color Support\n```c#\nint r = 225;\nint g = 255;\nint b = 250;\nfor (int i = 0; i < 10; i++)\n{\n    Console.WriteLine(storyFragments[i], Color.FromArgb(r, g, b));\n\n    r -= 18;\n    b -= 9;\n}\n```\n![Write With Full System.Drawing.Color Support](https://github.com/tomakita/Colorful.Console/blob/master/static/rgb_x.png)\n\n\n# Format Text Using Two Colors\n```c#\nstring dream = \"a dream of {0} and {1} and {2} and {3} and {4} and {5} and {6} and {7} and {8} and {9}...\";\nstring[] fruits = new string[]\n{\n    \"bananas\",\n    \"strawberries\",\n    \"mangoes\",\n    \"pineapples\",\n    \"cherries\",\n    \"oranges\",\n    \"apples\",\n    \"peaches\",\n    \"plums\",\n    \"melons\"\n};\n\nConsole.WriteLineFormatted(dream, Color.LightGoldenrodYellow, Color.Gray, fruits);\n```\n![Format Text Using Two Colors](https://github.com/tomakita/Colorful.Console/blob/master/static/formatter_x1.png)\n\n\n# Format Text Using Several Colors\n```c#\nstring dream = \"a dream of {0} and {1} and {2} and {3} and {4} and {5} and {6} and {7} and {8} and {9}...\";\nFormatter[] fruits = new Formatter[]\n{\n    new Formatter(\"bananas\", Color.LightGoldenrodYellow),\n    new Formatter(\"strawberries\", Color.Pink),\n    new Formatter(\"mangoes\", Color.PeachPuff),\n    new Formatter(\"pineapples\", Color.Yellow),\n    new Formatter(\"cherries\", Color.Red),\n    new Formatter(\"oranges\", Color.Orange),\n    new Formatter(\"apples\", Color.LawnGreen),\n    new Formatter(\"peaches\", Color.MistyRose),\n    new Formatter(\"plums\", Color.Indigo),\n    new Formatter(\"melons\", Color.LightGreen),\n};\n\nConsole.WriteLineFormatted(dream, Color.Gray, fruits);\n```\n![Format Text Using Several Colors](https://github.com/tomakita/Colorful.Console/blob/master/static/formatter_x2.png)\n\n\n# Alternate Between 2 or More Colors Based on Number of Console Writes\n```c#\nColorAlternatorFactory alternatorFactory = new ColorAlternatorFactory();\nColorAlternator alternator = alternatorFactory.GetAlternator(2, Color.Plum, Color.PaleVioletRed);\n\nfor (int i = 0; i < 15; i++)\n{\n    Console.WriteLineAlternating(\"cats\", alternator);\n}\n```\n![Alternate Between 2 or More Colors Based on Number of Console Writes](https://github.com/tomakita/Colorful.Console/blob/master/static/alternator_x2.png)\n\n\n# Alternate Between 2 or More Colors Based on 1 or More Regular Expressions\n```c#\nColorAlternatorFactory alternatorFactory = new ColorAlternatorFactory();\nColorAlternator alternator = alternatorFactory.GetAlternator(new[] { \"hiss\", \"m[a-z]+w\" }, Color.Plum, Color.PaleVioletRed);\n\nfor (int i = 0; i < 15; i++)\n{\n    string catMessage = \"cats\";\n\n    if (i % 3 == 0)\n    {\n        catMessage = meowVariant[meowCounter++];\n    }\n    else if (i % 10 == 0)\n    {\n        catMessage = \"hiss\";\n    }\n\n    Console.WriteLineAlternating(catMessage, alternator);\n}\n```\n![Alternate Between 2 or More Colors Based on 1 or More Regular Expressions](https://github.com/tomakita/Colorful.Console/blob/master/static/alternator_x1.png)\n\n\n# Style Specific Regions of Text\n```c#\nStyleSheet styleSheet = new StyleSheet(Color.White);\nstyleSheet.AddStyle(\"rain[a-z]*\", Color.MediumSlateBlue);\n\nConsole.WriteLineStyled(storyAboutRain, styleSheet);\n```\n![Alternate Between 2 or More Colors Based on 1 or More Regular Expressions](https://github.com/tomakita/Colorful.Console/blob/master/static/styler_x1.png)\n\n\n# Style Specific Regions of Text, Performing a Simple Transformation\n```c#\nStyleSheet styleSheet = new StyleSheet(Color.White);\nstyleSheet.AddStyle(\"rain[a-z]*\", Color.MediumSlateBlue, match => match.ToUpper());\n\nConsole.WriteLineStyled(storyAboutRain, styleSheet);\n```\n![Style Specific Regions of Text, Performing a Simple Transformation](https://github.com/tomakita/Colorful.Console/blob/master/static/styler_x2.png)\n\n\n# Style Specific Regions of Text, Performing a Transformation Based on Surrounding Text\n```c#\nStyleSheet styleSheet = new StyleSheet(Color.White);\nstyleSheet.AddStyle(\"rain[a-z]*\", Color.MediumSlateBlue,\n    (unstyledInput, matchLocation, match) =>\n    {\n        if (unstyledInput[matchLocation.End] == '.')\n        {\n            return \"marshmallows\";\n        }\n        else\n        {\n            return \"s'mores\";\n        }\n    });\n\nConsole.WriteLineStyled(storyAboutRain, styleSheet);\n```\n![Style Specific Regions of Text, Performing a Simple Transformation](https://github.com/tomakita/Colorful.Console/blob/master/static/styler_x3.png)\n\n\n# Convert Text to ASCII Art Using a Default Font\n```c#\nint DA = 244;\nint V = 212;\nint ID = 255;\nfor (int i = 0; i < 3; i++)\n{\n    Console.WriteAscii(\"HASSELHOFF\", Color.FromArgb(DA, V, ID));\n\n    DA -= 18;\n    V -= 36;\n}\n```\n![Convert Text to ASCII Art Using a Default Font](https://github.com/tomakita/Colorful.Console/blob/master/static/ascii_x1.png)\n\n\n# Convert Text to ASCII Art Using [FIGlet](http://www.figlet.org/) Fonts\n```c#\nFigletFont font = FigletFont.Load(\"chunky.flf\");\nFiglet figlet = new Figlet(font);\n\nConsole.WriteLine(figlet.ToAscii(\"Belvedere\"), ColorTranslator.FromHtml(\"#8AFFEF\"));\nConsole.WriteLine(figlet.ToAscii(\"ice\"), ColorTranslator.FromHtml(\"#FAD6FF\"));\nConsole.WriteLine(figlet.ToAscii(\"cream.\"), ColorTranslator.FromHtml(\"#B8DBFF\"));\n```\n![Convert Text to ASCII Art Using a Default Font](https://github.com/tomakita/Colorful.Console/blob/master/static/ascii_x2.png)\n\n\n# Style Collections With a Gradient\n```c#\nList<char> chars = new List<char>()\n{\n\t'r', 'e', 'x', 's', 'z', 'q', 'j', 'w', 't', 'a', 'b', 'c', 'l', 'm',\n\t'r', 'e', 'x', 's', 'z', 'q', 'j', 'w', 't', 'a', 'b', 'c', 'l', 'm',\n\t'r', 'e', 'x', 's', 'z', 'q', 'j', 'w', 't', 'a', 'b', 'c', 'l', 'm',\n\t'r', 'e', 'x', 's', 'z', 'q', 'j', 'w', 't', 'a', 'b', 'c', 'l', 'm'\n};\nConsole.WriteWithGradient(chars, Color.Yellow, Color.Fuchsia, 14);\n```\n![Style Collections With a Gradient](https://github.com/tomakita/Colorful.Console/blob/master/static/gradw_x.png)\n\n\n# Usage Notes\n\nConsole colors can be set back to their defaults using the `Colorful.Console.ReplaceAllColorsWithDefaults` function.\n\nIndividual colors in the console's color palette can be replaced using the `Colorful.Console.ReplaceColor` function. \n\n**Colorful.Console** can only write to the console in 16 different colors (including the black that's used as the console's background, by default!) in a single console session. This is a limitation of the Windows console itself (ref: [MSDN](https://msdn.microsoft.com/en-us/library/windows/desktop/ms682091(v=vs.85).aspx)), and it's one that we weren't able to work our way around.  If you know of a workaround, let us know!\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.2880859375,
          "content": "version: 1.2.{build}\nimage: Visual Studio 2017\ndotnet_csproj:\n  patch: true\n  file: '**\\*.csproj'\n  version: '{version}'\n  assembly_version: '{version}'\nbefore_build:\n- cmd: nuget restore\nbuild:\n  verbosity: minimal\nartifacts:\n- path: src\\Colorful.Console\\bin\\Debug\\Colorful.Console.*.*.*.nupkg\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "static",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}