{
  "metadata": {
    "timestamp": 1736711047748,
    "page": 796,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sipsorcery-org/sipsorcery",
      "stars": 1537,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.33203125,
          "content": "**/.classpath\r\n**/.dockerignore\r\n**/.env\r\n**/.git\r\n**/.gitignore\r\n**/.project\r\n**/.settings\r\n**/.toolstarget\r\n**/.vs\r\n**/.vscode\r\n**/*.*proj.user\r\n**/*.dbmdl\r\n**/*.jfm\r\n**/azds.yaml\r\n**/bin\r\n**/charts\r\n**/docker-compose*\r\n**/Dockerfile*\r\n**/node_modules\r\n**/npm-debug.log\r\n**/obj\r\n**/secrets.dev.yaml\r\n**/values.dev.yaml\r\nLICENSE\r\nREADME.md"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.5966796875,
          "content": "root = true\r\n\r\n# All files\r\n[*]\r\nindent_style = space\r\nend_of_line = crlf\r\n\r\n# Code files\r\n[*.{cs}]\r\nindent_size = 4\r\ninsert_final_newline = true\r\ncharset = utf-8-bom\r\ntrim_trailing_whitespace = true\r\n\r\n# Organize usings\r\ndotnet_sort_system_directives_first = true\r\ndotnet_separate_import_directive_groups = false\r\n\r\n# Space preferences\r\ncsharp_space_after_keywords_in_control_flow_statements = true\r\n\r\n# Wrapping preferences\r\ncsharp_preserve_single_line_statements = true\r\ncsharp_preserve_single_line_blocks = true\r\n\r\n# Don't allow single line if/else blocks without braces.\r\ncsharp_prefer_braces = true:error "
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.568359375,
          "content": "## Ignore Visual Studio temporary files, build results, and\r\n## files generated by popular Visual Studio add-ons.\r\n\r\n# User-specific files\r\n*.suo\r\n*.user\r\n*.sln.docstates\r\n\r\n# Build results\r\n\r\n[Dd]ebug/\r\n[Rr]elease/\r\n#x64/\r\n#build/\r\n[Bb]in/\r\n[Oo]bj/\r\n\r\n# Enable \"build/\" folder in the NuGet Packages folder since NuGet packages use it for MSBuild targets\r\n!packages/*/build/\r\n\r\n# MSTest test Results\r\n[Tt]est[Rr]esult*/\r\n[Bb]uild[Ll]og.*\r\n\r\n*_i.c\r\n*_p.c\r\n*.ilk\r\n*.meta\r\n*.obj\r\n*.pch\r\n*.pdb\r\n*.pgc\r\n*.pgd\r\n*.rsp\r\n*.sbr\r\n*.tlb\r\n*.tli\r\n*.tlh\r\n*.tmp\r\n*.tmp_proj\r\n*.log\r\n*.vspscc\r\n*.vssscc\r\n.builds\r\n*.pidb\r\n*.log\r\n*.scc\r\n\r\n# Visual C++ cache files\r\nipch/\r\n*.aps\r\n*.ncb\r\n*.opensdf\r\n*.sdf\r\n*.cachefile\r\n\r\n# Visual Studio profiler\r\n*.psess\r\n*.vsp\r\n*.vspx\r\n\r\n# Guidance Automation Toolkit\r\n*.gpState\r\n\r\n# ReSharper is a .NET coding add-in\r\n_ReSharper*/\r\n*.[Rr]e[Ss]harper\r\n\r\n# TeamCity is a build add-in\r\n_TeamCity*\r\n\r\n# DotCover is a Code Coverage Tool\r\n*.dotCover\r\n\r\n# NCrunch\r\n*.ncrunch*\r\n.*crunch*.local.xml\r\n\r\n# Installshield output folder\r\n[Ee]xpress/\r\n\r\n# DocProject is a documentation generator add-in\r\nDocProject/buildhelp/\r\nDocProject/Help/*.HxT\r\nDocProject/Help/*.HxC\r\nDocProject/Help/*.hhc\r\nDocProject/Help/*.hhk\r\nDocProject/Help/*.hhp\r\nDocProject/Help/Html2\r\nDocProject/Help/html\r\n\r\n# Click-Once directory\r\npublish/\r\n\r\n# Publish Web Output\r\n*.Publish.xml\r\n\r\n# NuGet Packages Directory\r\n## TODO: If you have NuGet Package Restore enabled, uncomment the next line\r\npackages/\r\n*.nupkg\r\n\r\n# Windows Azure Build Output\r\ncsx\r\n*.build.csdef\r\n\r\n# Windows Store app package directory\r\nAppPackages/\r\n\r\n# Others\r\nsql/\r\n*.Cache\r\nClientBin/\r\n[Ss]tyle[Cc]op.*\r\n~$*\r\n*~\r\n*.dbmdl\r\n*.[Pp]ublish.xml\r\n*.publishsettings\r\n\r\n# RIA/Silverlight projects\r\nGenerated_Code/\r\n\r\n# Backup & report files from converting an old project file to a newer\r\n# Visual Studio version. Backup files are not needed, because we have git ;-)\r\n_UpgradeReport_Files/\r\nBackup*/\r\nUpgradeLog*.XML\r\nUpgradeLog*.htm\r\n\r\n# SQL Server files\r\nApp_Data/*.mdf\r\nApp_Data/*.ldf\r\n\r\n\r\n#LightSwitch generated files\r\nGeneratedArtifacts/\r\n_Pvt_Extensions/\r\nModelManifest.xml\r\n\r\n# =========================\r\n# Windows detritus\r\n# =========================\r\n\r\n# Windows image file caches\r\nThumbs.db\r\nehthumbs.db\r\n\r\n# Folder config file\r\nDesktop.ini\r\n\r\n# Recycle Bin used on file shares\r\n$RECYCLE.BIN/\r\n\r\n# Mac desktop service store files\r\n.DS_Store\r\n\r\n# Node packages\r\nnode_modules\r\n\r\n# Bower packages\r\nbower_components\r\n/sipsorcery-core/Build\r\n/sipsorcery-silverlight/Build\r\n\r\n*/.vs/*\r\n/sipsorcery-servers/build\r\n/.vs\r\n*.dll\r\n*.vs\r\n\r\ndocfx/*\r\n**/.vscode*\r\n*.sdp\r\n**/.ionide\n.fake\n.ionide"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 0.1259765625,
          "content": "<Project>\n <PropertyGroup Condition=\" '$(Framework)' != 'NET461'\">\n   <LangVersion>8.0</LangVersion>\n </PropertyGroup>\n</Project>"
        },
        {
          "name": "Dockerfile-webrtccmdline",
          "type": "blob",
          "size": 0.94140625,
          "content": "# docker build -t webrtccmdline -f Dockerfile-webrtccmdline .\r\n# docker login\r\n# Either:\r\n# docker tag webrtccmdline:latest docker.io/azaclauson/webrtccmdline:latest\r\n# docker push azaclauson/webrtccmdline:latest\r\n# or:\r\n# az acr login --name sipsorcerycr\r\n# docker tag webrtccmdline:latest sipsorcerycr.azurecr.io/webrtccmdline:latest\r\n# docker push sipsorcerycr.azurecr.io/webrtccmdline:latest\r\n# To run a local container:\r\n# docker run -it --rm -p 8081:8081 -p 60042:60042/udp webrtccmdline --ws --stun stun:stun.l.google.com:19302\r\n\r\nFROM mcr.microsoft.com/dotnet/sdk:8.0 AS build\r\nWORKDIR /src\r\nCOPY . .\r\nWORKDIR /src/examples/webrtccmdline\r\nRUN dotnet publish \"webrtccmdline.csproj\" -c Release -o /app/publish\r\n\r\nFROM mcr.microsoft.com/dotnet/runtime:8.0 AS final\r\nWORKDIR /app\r\nEXPOSE 8080-8081\r\nEXPOSE 60042\r\nCOPY --from=build /app/publish .\r\nENTRYPOINT [\"dotnet\", \"webrtccmdline.dll\", \"--port\", \"60042\", \"--ws\", \"--stun\", \"stun:stun.l.google.com:19302\"]\r\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 2.3291015625,
          "content": "Copyright (c) 2006-2020, Aaron Clauson\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n* Neither the names SIP Sorcery, Aaron Clauson nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nDerivative Works:\n-----------------\n\nPortions of the DTLS/SRTP implmentation are derived from the jitsi SRTP library, see https://github.com/jitsi/jitsi-srtp.\nThe license for the derivative source code is the Apcache License, Version 2.0 with specific conditions listed immediately below.\n\n/*\n * Copyright @ 2015 - present 8x8, Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.20703125,
          "content": "![](https://github.com/sipsorcery-org/sipsorcery/actions/workflows/sipsorcery-core-win.yml/badge.svg) \r\n![](https://github.com/sipsorcery-org/sipsorcery/actions/workflows/sipsorcery-core-ubuntu.yml/badge.svg) \r\n![](https://github.com/sipsorcery-org/sipsorcery/actions/workflows/sipsorcery-core-mac.yml/badge.svg) \r\n![](https://github.com/sipsorcery-org/sipsorcery/actions/workflows/examples-core-win.yml/badge.svg)\r\n\r\n## New WebRTC Demos - Jan 2025\r\n\r\n**Connect to OpenAI's Realtime WebRTC Endpoint**\r\n\r\nThe [WebRTCOpenAI](https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCExamples/WebRTCOpenAI/Program.cs) demonstrates a dotnet only (no native libraries) applicaiton that connects to [OpenAI's new WebRTC Realtime](https://platform.openai.com/docs/guides/realtime-webrtc) endpoint. This demo lets you talk in realtime to ChatGPT and receive both a WebRTC audio stream response and a text transcript. Could video avatars be on the way?! A real Max Headroom!\r\n\r\n![ChatGPT WebRTC Transcript](./img/openai.png)\r\n\r\n**Use WebRTC + OpenGL for an Audio Scope**\r\n\r\nThe [WebRTCOpenGL](https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCExamples/WebRTCOpenGL/Program.cs) demonstrates a way to combine digital signal processing of a WebRTC audio stream and then use OpenGL to render a video stream representation of it. It looks way better than it sounds. Try it out!\r\n\r\n![AudioScope](./img/audio-scope.png)\r\n\r\n## What Is It?\r\n\r\n**This fully C# library can be used to add Real-time Communications, typically audio and video calls, to .NET applications.**\r\n\r\nThe diagram below is a high level overview of a Real-time audio and video call between Alice and Bob. It illustrates where the `SIPSorcery` and associated libraries can help.\r\n\r\n![Real-time Communications Overview](./img/sipsorcery_realtime_overview.png)\r\n\r\n**Supports both VoIP ([get started](#getting-started-voip)) and WebRTC ([get started](#getting-started-webrtc)).**\r\n\r\n**Some of the protocols supported:**\r\n\r\n - Session Initiation Protocol [(SIP)](https://tools.ietf.org/html/rfc3261),\r\n - Real-time Transport Protocol [(RTP)](https://tools.ietf.org/html/rfc3550),\r\n - Web Real-time Communications [(WebRTC)](https://www.w3.org/TR/webrtc/), **as of 26 Jan 2021 now an official IETF and W3C specification**,\r\n - Interactive Connectivity Establishment [(ICE)](https://tools.ietf.org/html/rfc8445),\r\n - SCTP, SDP, STUN and more.\r\n\r\n**Media End Points - Audio/Video Sinks and Sources:**\r\n\r\n - The main `SIPSorcery` library does not provide access to audio and video devices or native codecs. Providing cross platform access to to these features on top of .NET is a large undertaking. A number of separate demonstration libraries show some different approaches to accessing audio/video devices and wrapping codecs with .NET. \r\n   - [SIPSorceryMedia.Windows](https://github.com/sipsorcery-org/SIPSorceryMedia.Windows): An example of a Windows specific library that provides audio capture and playback. \r\n   - [SIPSorceryMedia.Encoders](https://github.com/sipsorcery-org/SIPSorceryMedia.Encoders): An example of a Windows specific wrapper for the [VP8](https://www.webmproject.org/) video codec.\r\n   - [SIPSorceryMedia.FFmpeg](https://github.com/sipsorcery-org/SIPSorceryMedia.FFmpeg): An example of a cross platform library that features audio and video codecs using PInvoke and [FFmpeg](https://ffmpeg.org/).\r\n   - Others: **Contributions welcome**. Frequently requested are Xamarin Forms on Android/iOS and Unix (Linux and/or Mac). New implementations need to implement one or more of the Audio Sink/Source and/or Video Sink/Source interfaces from [SIPSorceryMedia.Abstractions](https://github.com/sipsorcery-org/SIPSorceryMedia.Abstractions/blob/master/src/MediaEndPoints.cs).\r\n\r\n - This library provides only a small number of audio and video codecs (G711 and G722). Additional codecs, particularly video ones, require C or C++ libraries. An effort is underway to port the [VP8](https://www.webmproject.org/) video codec to C# see [VP8.Net](https://github.com/sipsorcery-org/VP8.Net).\r\n\r\n## Installation\r\n\r\nThe library is should work with .NET Framework >= 4.6.1 and all .NET Core and .NET versions. The demo applications initially targetted .NET Core 3.1 and are updated to later .NET versions as time and interest permit. The library is available via NuGet.\r\n\r\n````bash\r\ndotnet add package SIPSorcery\r\n````\r\n\r\nWith Visual Studio Package Manager Console (or search for [SIPSorcery on NuGet](https://www.nuget.org/packages/SIPSorcery/)):\r\n\r\n````ps1\r\nInstall-Package SIPSorcery\r\n````\r\n\r\n## Documentation\r\n\r\nClass reference documentation and articles explaining common usage are available at [https://sipsorcery-org.github.io/sipsorcery/](https://sipsorcery-org.github.io/sipsorcery/).\r\n\r\n## Getting Started VoIP\r\n\r\nThe simplest possible example to place an audio-only SIP call is shown below. This example relies on the Windows specific `SIPSorceryMedia.Windows` library to play the received audio and only works on Windows (due to lack of .NET audio device support on non-Windows platforms).\r\n\r\n````bash\r\ndotnet new console --name SIPGetStarted --framework net8.0 --target-framework-override net8.0-windows10.0.17763.0\r\ncd SIPGetStarted\r\ndotnet add package SIPSorcery\r\ndotnet add package SIPSorceryMedia.Windows\r\n# Paste the code below into Program.cs.\r\ndotnet run\r\n# If successful you will hear a \"Hello World\" announcement.\r\n````\r\n\r\n````csharp\r\nstring DESTINATION = \"music@iptel.org\";\r\n        \r\nConsole.WriteLine(\"SIP Get Started\");\r\n\r\nvar userAgent = new SIPSorcery.SIP.App.SIPUserAgent();\r\nvar winAudio = new SIPSorceryMedia.Windows.WindowsAudioEndPoint(new SIPSorcery.Media.AudioEncoder());\r\nvar voipMediaSession = new SIPSorcery.Media.VoIPMediaSession(winAudio.ToMediaEndPoints());\r\n\r\n// Place the call and wait for the result.\r\nbool callResult = await userAgent.Call(DESTINATION, null, null, voipMediaSession);\r\nConsole.WriteLine($\"Call result {(callResult ? \"success\" : \"failure\")}.\");\r\n\r\nConsole.WriteLine(\"Press any key to hangup and exit.\");\r\nConsole.ReadLine();\r\n````\r\n\r\nThe [GetStarted](https://github.com/sipsorcery-org/sipsorcery/tree/master/examples/SIPExamples/GetStarted) example contains the full source and project file for the example above.\r\n\r\nThe three key classes in the above example are described in dedicated articles:\r\n\r\n - [SIPTransport](https://sipsorcery-org.github.io/sipsorcery/articles/transport.html),\r\n - [SIPUserAgent](https://sipsorcery-org.github.io/sipsorcery/articles/sipuseragent.html),\r\n - [RTPSession](https://sipsorcery-org.github.io/sipsorcery/articles/rtpsession.html).\r\n\r\nThe [examples folder](https://github.com/sipsorcery-org/sipsorcery/tree/master/examples/SIPExamples) contains sample code to demonstrate other common SIP/VoIP cases.\r\n\r\n## Getting Started WebRTC\r\n\r\nThe WebRTC specifications do not include directions about how signaling should be done (for VoIP the signaling protocol is SIP; WebRTC has no equivalent). The example below uses a simple JSON message exchange over web sockets for signaling. Part of the reason the `Getting Started WebRTC` is longer than the `Getting Started VoIP` example is the need for custom signaling.\r\n\r\nThe example requires two steps:\r\n\r\n - Run the `dotnet` console application,\r\n - Open an HTML page in a browser on the same machine.\r\n\r\n The full project file and code are available at [WebRTC Get Started](https://github.com/sipsorcery-org/sipsorcery/tree/master/examples/WebRTCExamples/WebRTCGetStarted).\r\n\r\nThe example relies on the Windows specific `SIPSorceryMedia.Encoders` package, which is mainly a wrapper around [libvpx](https://chromium.googlesource.com/webm/libvpx). Hopefully in the future there will be equivalent packages for other platforms.\r\n\r\n**Step 1:**\r\n\r\n````bash\r\ndotnet new console --name WebRTCGetStarted\r\ncd WebRTCGetStarted\r\ndotnet add package SIPSorcery\r\ndotnet add package SIPSorceryMedia.Encoders\r\n# Paste the code below into Program.cs.\r\ndotnet run\r\n````\r\n\r\n````csharp\r\nusing System;\r\nusing System.Linq;\r\nusing System.Net;\r\nusing System.Threading.Tasks;\r\nusing SIPSorcery.Media;\r\nusing SIPSorcery.Net;\r\nusing SIPSorceryMedia.Encoders;\r\nusing WebSocketSharp.Server;\r\n\r\nnamespace demo\r\n{\r\n    class Program\r\n    {\r\n        private const int WEBSOCKET_PORT = 8081;\r\n\r\n        static void Main()\r\n        {\r\n            Console.WriteLine(\"WebRTC Get Started\");\r\n\r\n            // Start web socket.\r\n            Console.WriteLine(\"Starting web socket server...\");\r\n            var webSocketServer = new WebSocketServer(IPAddress.Any, WEBSOCKET_PORT);\r\n            webSocketServer.AddWebSocketService<WebRTCWebSocketPeer>(\"/\", (peer) => peer.CreatePeerConnection = () => CreatePeerConnection());\r\n            webSocketServer.Start();\r\n\r\n            Console.WriteLine($\"Waiting for web socket connections on {webSocketServer.Address}:{webSocketServer.Port}...\");\r\n            \r\n            Console.WriteLine(\"Press any key exit.\");\r\n            Console.ReadLine();\r\n        }\r\n\r\n        private static Task<RTCPeerConnection> CreatePeerConnection()\r\n        {\r\n            var pc = new RTCPeerConnection(null);\r\n\r\n            var testPatternSource = new VideoTestPatternSource(new VpxVideoEncoder());\r\n\r\n            MediaStreamTrack videoTrack = new MediaStreamTrack(testPatternSource.GetVideoSourceFormats(), MediaStreamStatusEnum.SendOnly);\r\n            pc.addTrack(videoTrack);\r\n\r\n            testPatternSource.OnVideoSourceEncodedSample += pc.SendVideo;\r\n            pc.OnVideoFormatsNegotiated += (formats) => testPatternSource.SetVideoSourceFormat(formats.First());\r\n\r\n            pc.onconnectionstatechange += async (state) =>\r\n            {\r\n                Console.WriteLine($\"Peer connection state change to {state}.\");\r\n\r\n                switch(state)\r\n                {\r\n                    case RTCPeerConnectionState.connected:\r\n                        await testPatternSource.StartVideo();\r\n                        break;\r\n                    case RTCPeerConnectionState.failed:\r\n                        pc.Close(\"ice disconnection\");\r\n                        break;\r\n                    case RTCPeerConnectionState.closed:\r\n                        await testPatternSource.CloseVideo();\r\n                        testPatternSource.Dispose();\r\n                        break;\r\n                }\r\n            };\r\n\r\n            return Task.FromResult(pc);\r\n        }\r\n    }\r\n}\r\n````\r\n\r\n**Step 2:**\r\n\r\nCreate an HTML file, paste the contents below into it, open it in a browser that supports WebRTC and finally press the `start` button.\r\n\r\n````html\r\n<!DOCTYPE html>\r\n<head>\r\n    <script type=\"text/javascript\">\r\n        const WEBSOCKET_URL = \"ws://127.0.0.1:8081/\"\r\n\r\n        var pc, ws;\r\n\r\n        async function start() {\r\n            pc = new RTCPeerConnection();\r\n\r\n            pc.ontrack = evt => document.querySelector('#videoCtl').srcObject = evt.streams[0];\r\n            pc.onicecandidate = evt => evt.candidate && ws.send(JSON.stringify(evt.candidate));\r\n\r\n            ws = new WebSocket(document.querySelector('#websockurl').value, []);\r\n            ws.onmessage = async function (evt) {\r\n                var obj = JSON.parse(evt.data);\r\n                if (obj?.candidate) {\r\n                    pc.addIceCandidate(obj);\r\n                }\r\n                else if (obj?.sdp) {\r\n                    await pc.setRemoteDescription(new RTCSessionDescription(obj));\r\n                    pc.createAnswer()\r\n                        .then((answer) => pc.setLocalDescription(answer))\r\n                        .then(() => ws.send(JSON.stringify(pc.localDescription)));\r\n                }\r\n            };\r\n        };\r\n\r\n        async function closePeer() {\r\n            await pc?.close();\r\n            await ws?.close();\r\n        };\r\n\r\n    </script>\r\n</head>\r\n<body>\r\n\r\n    <video controls autoplay=\"autoplay\" id=\"videoCtl\" width=\"640\" height=\"480\"></video>\r\n\r\n    <div>\r\n        <input type=\"text\" id=\"websockurl\" size=\"40\" />\r\n        <button type=\"button\" class=\"btn btn-success\" onclick=\"start();\">Start</button>\r\n        <button type=\"button\" class=\"btn btn-success\" onclick=\"closePeer();\">Close</button>\r\n    </div>\r\n\r\n</body>\r\n\r\n<script>\r\n    document.querySelector('#websockurl').value = WEBSOCKET_URL;\r\n</script>\r\n````\r\n\r\n**Result:**\r\n\r\nIf successful the browser should display a test pattern image.\r\n\r\nThe [examples folder](https://github.com/sipsorcery-org/sipsorcery/tree/master/examples/WebRTCExamples) contains sample code to demonstrate other common WebRTC cases.\r\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.08203125,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nPlease email admin@sipsorcery.com.\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.080078125,
          "content": "{\r\n  \"sdk\": {\r\n    \"version\": \"6.0.100\",\r\n    \"rollForward\": \"latestMajor\"\r\n  }\r\n}"
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}