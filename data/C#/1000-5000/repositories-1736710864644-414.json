{
  "metadata": {
    "timestamp": 1736710864644,
    "page": 414,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Metabolix/HackBGRT",
      "stars": 2356,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0439453125,
          "content": "boot*.efi\nsetup.exe\nsrc/GIT_DESCRIBE.cs\nhtml\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0810546875,
          "content": "[submodule \"gnu-efi\"]\n\tpath = gnu-efi\n\turl = https://github.com/rhboot/gnu-efi.git\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.19140625,
          "content": "# Change Log\n\nAll notable changes to this project will be documented in this file.\n\n## 2.5.1 - 2024-08-18\n\n### Changed\n- Update *shim* to 15.8.\n\n## 2.5.0 - 2024-06-21\n\n### Changed\n- Properly handle skip-shim with enable-overwrite.\n- Improve instructions (documentation).\n- Improve error reporting and logging.\n\n## 2.4.1 - 2024-04-11\n\n### Fixed\n- Report better if BCDEdit is unable to operate.\n- Improve support for non-BCDEdit boot entries.\n- Remove old version before copying any new files.\n\n## 2.4.0 - 2023-12-31\n\n### Fixed\n- Fix BCDEdit boot entries to avoid *shim* error messages.\n- Combine BCDEdit and own code to create boot entries more reliably.\n\n### Changed\n- Clear the screen to wipe the vendor logo as soon as possible.\n- Image paths in `config.txt` may be relative (just file names).\n\n## 2.3.1 - 2023-11-27\n\n### Fixed\n- BitLocker detection is more reliable.\n\n## 2.3.0 - 2023-11-27\n\n### Added\n- AArch64 and ARM builds, and *shim* for AArch64.\n\n### Fixed\n- Boot entry is more reliable, avoids conflicts with firmware entries.\n\n## 2.2.0 - 2023-11-17\n\n### Added\n- Support Secure Boot with *shim* boot loader.\n- Gather debug log during boot and read it with setup.exe.\n\n## 2.1.0 - 2023-10-04\n\n### Added\n- Check image size, crop if it's bigger than the screen.\n- Check BitLocker status to avoid unbootable machine.\n\n## 2.0.0 - 2023-09-10\n\n### Added\n- Log to `setup.log`.\n- Image conversion (GIF, EXIF, JPG, PNG, TIFF) to BMP during setup.\n- Quiet (batch) setup.\n- Dry run in setup.\n- EFI boot entry support in setup.\n- Orientation parameter (o=0|90|180|270) for images.\n\n### Changed\n- Configure (edit config and images) before installing.\n- Escalate privileges only when needed (after the menu).\n- Try to detect and avoid some configuration errors.\n- Wait at most 15 seconds for key presses during boot.\n- Image coordinates are now relative to the center.\n\n## 1.5.1 - 2018-08-11\n\n### Fixed\n- Clarify the default config.txt.\n- Fix an exception in some cases when trying to boot to UEFI setup.\n\n## 1.5.0 - 2017-09-30\n\n### Added\n- Support for rebooting to UEFI setup.\n\n### Changed\n- Minor enhancements to installer.\n\n## 1.4.0 - 2017-08-29\n\n### Added\n- Use UTF-8 in the configuration file.\n- Use the default boot loader path if the configured one doesn't work.\n\n## 1.3.0 - 2016-12-22\n\n### Added\n- Check Secure Boot status before installing.\n\n## 1.2.0 - 2016-06-05\n\n### Added\n- Better installer, setup.exe.\n- Support for low-end machines with 32-bit IA-32 UEFI.\n- Support for changing resolution.\n- Version information in the program.\n- Change log.\n\n### Removed\n- Removed old install scripts, install.bat and uninstall.bat.\n\n## 1.1.0 - 2016-05-14\n\n### Changed\n- Wait for input before booting if debug=1 is set.\n\n### Fixed\n- Fix handling of multiple BGRT entries.\n- Fix ACPI table checksums.\n\n## 1.0.0 - 2016-05-11\n\n### Added\n- Easy-to-use installation script.\n- Git repository for the project.\n\n## 0.2.0 - 2016-04-26\n\n### Added\n- Support for randomly alternating images.\n- Support for black background.\n- Support for the native Windows logo.\n\n### Changed\n- New configuration file format for images.\n\n## 0.1.0 - 2016-01-15\n\n### Added\n- Support for loading a bitmap and updating the BGRT.\n- Support for loading the next boot loader.\n- Support for a configuration file.\n"
        },
        {
          "name": "Doxyfile",
          "type": "blob",
          "size": 0.279296875,
          "content": "INPUT = src\nFILE_PATTERNS = *.c *.h *.cs\nJAVADOC_AUTOBRIEF = YES\nEXTRACT_ALL = YES\nEXTRACT_STATIC = YES\nEXTRACT_PRIVATE = YES\nSTRIP_CODE_COMMENTS = NO\nINLINE_SOURCES = NO\nGENERATE_HTML = YES\nHTML_OUTPUT = html\nHTML_FILE_EXTENSION = .html\nHTML_DYNAMIC_SECTIONS = YES\nGENERATE_LATEX = NO\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0546875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Lauri Kentt√§\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 4.8154296875,
          "content": "CC = clang\nCFLAGS = -target $(CLANG_TARGET) -ffreestanding -fshort-wchar\nCFLAGS += -std=c17 -Wshadow -Wall -Wunused -Werror-implicit-function-declaration\nCFLAGS += -I$(GNUEFI_INC) -I$(GNUEFI_INC)/$(GNUEFI_ARCH) -I$(GNUEFI_INC)/protocol\nCFLAGS += $(ARCH_CFLAGS)\nLDFLAGS = -target $(CLANG_TARGET) -nostdlib -Wl,-entry:efi_main -Wl,-subsystem:efi_application -fuse-ld=lld\nARCH_CFLAGS = -O2 -mno-red-zone\n\nGNUEFI_INC = gnu-efi/inc\n\nFILES_C = src/main.c src/util.c src/types.c src/config.c src/sbat.c src/efi.c\nFILES_H = $(wildcard src/*.h)\nFILES_CS = src/Setup.cs src/Esp.cs src/Efi.cs src/EfiBootEntries.cs\n\n# Generate version number from git describe.\n# In the numeric form, add the number of commits as the last part.\n# (Add .1 for uncommitted changes.)\nGIT_DESCRIBE := $(firstword $(GIT_DESCRIBE) $(shell git describe --tags --dirty=-1-dirty) unknown)\nGIT_DESCRIBE_PARTS := $(subst -, ,$(patsubst v%,%,$(GIT_DESCRIBE))) 0\nGIT_DESCRIBE_NUMERIC := $(firstword $(GIT_DESCRIBE_PARTS)).$(word 2,$(GIT_DESCRIBE_PARTS))\n\ndefine GIT_DESCRIBE_CS\npublic class GIT_DESCRIBE {\n\tpublic const string data = \"$(GIT_DESCRIBE)\";\n\tpublic const string numeric = \"$(GIT_DESCRIBE_NUMERIC)\";\n}\nendef\n\nCFLAGS += '-DGIT_DESCRIBE_W=L\"$(GIT_DESCRIBE)\"' '-DGIT_DESCRIBE=\"$(GIT_DESCRIBE)\"'\nRELEASE_NAME = HackBGRT-$(GIT_DESCRIBE:v%=%)\n\nEFI_ARCH_LIST = x64 ia32 aa64 arm\nEFI_SIGNED_FILES = $(patsubst %,efi-signed/boot%.efi,$(EFI_ARCH_LIST))\n\n.PHONY: all efi efi-signed setup release clean\n\nall: efi setup\n\t@echo \"Run 'make efi-signed' to sign the EFI executables.\"\n\t@echo \"Run 'make release' to build a release-ready ZIP archive.\"\n\t@echo \"Run 'make run-qemu-<arch>' to test the EFI executables with QEMU.\"\n\nefi: $(patsubst %,efi/boot%.efi,$(EFI_ARCH_LIST))\n\t@echo \"EFI executables are in the efi/ directory.\"\n\nefi-signed: $(patsubst %,efi-signed/boot%.efi,$(EFI_ARCH_LIST))\n\t@echo \"Signed EFI executables are in the efi-signed/ directory.\"\n\nsetup: setup.exe\n\nrelease: release/$(RELEASE_NAME).zip\n\t@echo \"Current version is packaged: $<\"\n\nrelease/$(RELEASE_NAME): $(EFI_SIGNED_FILES) certificate.cer config.txt splash.bmp setup.exe README.md CHANGELOG.md README.efilib LICENSE shim-signed/* shim.md\n\trm -rf $@\n\ttar c --transform=s,^,$@/, $^ | tar x\n\nrelease/$(RELEASE_NAME).zip: release/$(RELEASE_NAME)\n\trm -rf $@\n\t(cd release; 7z a -mx=9 \"$(RELEASE_NAME).zip\" \"$(RELEASE_NAME)\" -bd -bb1)\n\nsrc/GIT_DESCRIBE.cs: $(FILES_CS) $(FILES_C) $(FILES_H)\n\t$(file > $@,$(GIT_DESCRIBE_CS))\n\nsetup.exe: $(FILES_CS) src/GIT_DESCRIBE.cs\n\tcsc -nologo -define:GIT_DESCRIBE -out:$@ $^\n\ncertificate.cer pki:\n\t@echo\n\t@echo \"You need proper keys to sign the EFI executables.\"\n\t@echo \"Example:\"\n\t@echo \"mkdir -p pki\"\n\t@echo \"certutil --empty-password -N -d pki\"\n\t@echo \"efikeygen -d pki -n HackBGRT-signer -S -k -c 'CN=HackBGRT Secure Boot Signer,OU=HackBGRT,O=Unknown,MAIL=unknown@example.com' -u 'URL'\"\n\t@echo \"certutil -d pki -n HackBGRT-signer -Lr > certificate.cer\"\n\t@echo \"Modify and run the commands yourself.\"\n\t@echo\n\t@false\n\nefi-signed/%.efi: efi/%.efi pki\n\t@mkdir -p efi-signed\n\tpesign --force -n pki -i $< -o $@ -c HackBGRT-signer -s\n\nefi/bootx64.efi: CLANG_TARGET = x86_64-pc-windows-msvc\nefi/bootx64.efi: GNUEFI_ARCH = x86_64\n\nefi/bootia32.efi: CLANG_TARGET = i386-pc-windows-msvc\nefi/bootia32.efi: GNUEFI_ARCH = ia32\n\nefi/bootaa64.efi: CLANG_TARGET = aarch64-pc-windows-msvc\nefi/bootaa64.efi: GNUEFI_ARCH = aa64\n\nefi/boot%.efi: $(FILES_C)\n\t@mkdir -p efi\n\t$(CC) $(CFLAGS) $(LDFLAGS) $^ -o $@\n\nefi/bootarm.efi: CLANG_TARGET = armv6-pc-windows-msvc\nefi/bootarm.efi: GNUEFI_ARCH = arm\nefi/bootarm.efi: ARCH_CFLAGS = -O # skip -O2 and -mno-red-zone\nefi/bootarm.efi: $(FILES_C)\n\t@mkdir -p efi\n\t$(CC) $(CFLAGS) $(LDFLAGS) $^ -o $@\n\t@echo \"Fix $@ architecture code (IMAGE_FILE_MACHINE_ARMTHUMB_MIXED = 0x01C2)\"\n\techo -en \"\\xc2\\x01\" | dd of=$@ bs=1 seek=124 count=2 conv=notrunc status=none\n\nclean:\n\trm -rf setup.exe efi efi-signed\n\trm -f src/GIT_DESCRIBE.cs\n\trm -rf release\n\trm -rf test\n\n.PHONY: test $(patsubst %,run-qemu-%,$(EFI_ARCH_LIST))\n\ntest: run-qemu-x64\n\t@echo \"Run 'make run-qemu-<arch>' to test other architectures.\"\n\ntest/esp-%: efi/boot%.efi splash.bmp\n\trm -rf $@\n\tmkdir -p $@/EFI/HackBGRT\n\tcp efi/boot$*.efi splash.bmp $@/EFI/HackBGRT\n\techo -en \"FS0:\\n cd EFI\\n cd HackBGRT\\n boot$*.efi resolution=-1x-1 debug=1 image=path=splash.bmp\" > $@/startup.nsh\n\nQEMU_ARGS = -bios $(word 2, $^) -net none -drive media=disk,file=fat:rw:./$<,format=raw\n\nrun-qemu-x64: test/esp-x64 /usr/share/ovmf/x64/OVMF.fd\n\tqemu-system-x86_64 $(QEMU_ARGS)\n\nrun-qemu-ia32: test/esp-ia32 /usr/share/ovmf/ia32/OVMF.fd\n\tqemu-system-i386 $(QEMU_ARGS)\n\nrun-qemu-aa64: test/esp-aa64 /usr/share/ovmf/aarch64/QEMU_EFI.fd\n\t@echo \"Press Ctrl+Alt+2 to switch to QEMU console.\"\n\tqemu-system-aarch64 -machine virt -cpu max $(QEMU_ARGS)\n\nrun-qemu-arm: test/esp-arm /usr/share/ovmf/arm/QEMU_EFI.fd\n\t@echo \"Press Ctrl+Alt+2 to switch to QEMU console.\"\n\tqemu-system-arm -machine virt -cpu max $(QEMU_ARGS)\n"
        },
        {
          "name": "README.efilib",
          "type": "blob",
          "size": 1.546875,
          "content": "# vim: set fileencoding=utf-8\n\nHackBGRT uses the gnu-efi library, which in turn is using the EFI Application\nToolkit distributed by Intel at http://developer.intel.com/technology/efi\n\nThis code is covered by the following agreement:\n\nCopyright (c) 1998-2000 Intel Corporation\n\nRedistribution and use in source and binary forms, with or without modification, are permitted\nprovided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and\nthe following disclaimer.\n\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions\nand the following disclaimer in the documentation and/or other materials provided with the\ndistribution.\n\nTHIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,\nINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL INTEL BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE. THE EFI SPECIFICATION AND ALL OTHER INFORMATION\nON THIS WEB SITE ARE PROVIDED \"AS IS\" WITH NO WARRANTIES, AND ARE SUBJECT\nTO CHANGE WITHOUT NOTICE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.853515625,
          "content": "# HackBGRT\n\nHackBGRT is intended as a boot logo changer for UEFI-based Windows systems.\n\n## Summary\n\nWhen booting on a UEFI-based computer, Windows may show a vendor-defined logo which is stored on the UEFI firmware in a section called Boot Graphics Resource Table (BGRT). It's usually very difficult to change the image permanently, but a custom UEFI application may be used to overwrite it during the boot. HackBGRT does exactly that.\n\n**Note:** The original logo is often visible for a moment before HackBGRT is started. This is expected, please do not report this \"bug\". This can't be changed without modifying computer firmware, which this project will not do.\n\n## Usage\n\n**Important:** If you mess up the installation, your system may become unbootable! Create a rescue disk before use. This software comes with no warranty. Use at your own risk.\n\n* Make sure that your computer is booting with UEFI.\n* Make sure that you have read the Secure Boot instructions.\n* Make sure that BitLocker is disabled, or find your recovery key.\n\n### Secure Boot instructions\n\nHackBGRT is not approved by Microsoft. Instead, HackBGRT comes with the *shim* boot loader, which allows to manually select HackBGRT as a trusted program. After installing HackBGRT and rebooting your computer, you have to **follow the instructions in [shim.md](shim.md)** to achieve this. These steps cannot be automated, that's the whole point of Secure Boot. Although HackBGRT is self-signed with a certificate, it's not advisable to enroll foreign certificates directly into your firmware.\n\nThe *shim* boot loader is maintained by Red Hat, Inc, and the included signed copy of *shim* is extracted from Debian GNU/Linux ‚Äì many thanks to the maintainers! For copyright information, see [shim-signed/COPYRIGHT](shim-signed/COPYRIGHT).\n\n### Windows installation\n\n* Get the latest release from the Releases page.\n* Start `setup.exe` and follow the instructions.\n\t* The installer will launch Paint for editing the image, or you can edit it otherwise.\n\t* For advanced settings, edit `config.txt` before installing. No extra support provided!\n\t* Read the instructions in [shim.md](shim.md).\n\t* Check the common [troubleshooting](#troubleshooting) to be prepared.\n\t* Reboot your computer.\n* If Windows later restores the original boot loader, just reinstall.\n* If you wish to change the image or configuration later, choose the option to only install files.\n\n### Quiet (batch) installation\n\n* Edit the `config.txt` and `splash.bmp` (or any other images) to your needs.\n* Run `setup.exe batch COMMANDS` as administrator, with some of the following commands:\n\t* `install` ‚Äì copy the files but don't enable.\n\t* `enable-bcdedit` ‚Äì use `bcdedit` to create a new EFI boot entry.\n\t* `disable-bcdedit` ‚Äì use `bcdedit` to disable the EFI boot entry.\n\t* `enable-entry` ‚Äì write NVRAM to create a new EFI boot entry.\n\t* `disable-entry` ‚Äì write NVRAM to disable the EFI boot entry.\n\t* `enable-overwrite` ‚Äì overwrite the MS boot loader.\n\t* `disable-overwrite` ‚Äì restore the MS boot loader.\n\t* `skip-shim` ‚Äì skip *shim* when installing.\n\t* `allow-secure-boot` ‚Äì ignore Secure Boot in subsequent commands.\n\t* `allow-bitlocker` ‚Äì ignore BitLocker in subsequent commands.\n\t* `allow-bad-loader` ‚Äì ignore bad boot loader configuration in subsequent commands.\n\t* `disable` ‚Äì run all relevant `disable-*` commands.\n\t* `uninstall` ‚Äì disable and remove completely.\n\t* `show-boot-log` ‚Äì show the debug log collected during boot (if `log=1` is set in `config.txt`).\n* For example, run `setup.exe batch install allow-secure-boot enable-overwrite` to copy files and overwrite the MS boot loader regardless of Secure Boot status.\n\n### Multi-boot configurations\n\nIf you only need HackBGRT for Windows:\n\n* Run `setup.exe`, install files without enabling.\n* Configure your boot loader to start `\\EFI\\HackBGRT\\loader.efi`.\n\nIf you need it for other systems as well:\n\n* Configure HackBGRT to start your boot loader (such as systemd-boot): `boot=\\EFI\\systemd\\systemd-bootx64.efi`.\n* Run `setup.exe`, install as a new EFI boot entry.\n\nTo install purely on Linux, you can install with `setup.exe dry-run` and then manually copy files from `dry-run/EFI` to your `[EFI System Partition]/EFI`. For further instructions, consult the documentation of your own Linux system.\n\n## Configuration\n\nThe configuration options are described in `config.txt`, which the installer copies into `[EFI System Partition]\\EFI\\HackBGRT\\config.txt`.\n\n## Images\n\nIf you only need one image, just edit `splash.bmp` to your needs.\n\nAdvanced users may edit the `config.txt` to define multiple images, in which case one is picked at random. The installer copies and converts the images. For example, to use a file named `my.jpg`, copy it in the installer folder (same folder as `setup.exe`) and set the image path in `config.txt` to `path=my.jpg` before running the installer.\n\nIf you copy an image file to ESP manually, note that the image must be a 24-bit BMP file with a 54-byte header. That's a TrueColor BMP3 in Imagemagick, or 24-bit BMP/DIB in Microsoft Paint.\n\n## Troubleshooting\n\n### Verification failed, Security violation\n\nThis is part of the setup on first boot. Make sure you have read and understood [shim.md](shim.md).\n\n### Boot is slow, boot is stuck, just spinning\n\nSometimes the first boot is very slow (multiple minutes) for an unknown reason. Wait patiently until you get into Windows. Try to reboot at least a few times to see if it gets any better. It it does not, there's not much else to do than give up.\n\n### Image is not visible, \"nothing happens\"\n\nRun the setup again and select the option to check the boot log. Continue troubleshooting according to the log contents:\n\n#### Log is empty\n\nIf the log is empty, then HackBGRT is not in use. Many computers now have a security feature which causes this problem: the computer resets some settings on reboot and skips the newly-installed HackBGRT.\n\nYou have to fix this manually. (After all, the security feature is specifically designed to prevent automatic changes.)\n\n1. Run the setup again.\n2. Select the option \"boot to UEFI setup\".\n3. After a reboot, you should get into your computer's own setup utility (UEFI or Firmware settings, or so-called \"BIOS\").\n4. Find boot options and the list of boot entries.\n5. Select HackBGRT as the default boot entry (before Windows Boot Loader).\n\nThe setup utility is different for each computer and manufacturer, so search online for \"[computer model] UEFI setup\" or \"firmware setup\" for images and instructions.\n\nSome people report that HackBGRT is not visible in the computer settings. That's unfortunately a problem with your computer, and you should ask your computer manufacturer how to edit boot entries inside your computer settings. HackBGRT needs to boot `\\EFI\\HackBGRT\\loader.efi`.\n\nIf all else fails and you are sure about your computer skills, you can try the legacy installation method. The method bypasses this particular problem but may cause very serious problems if configured incorrectly.\n\n#### Log is not empty\n\nTry to reinstall HackBGRT with the default configuration and image.\n\nIf the default logo works, try again with your custom image. Make sure that the image has a reasonable size and position and that you haven't messed up `config.txt`.\n\nIf the default logo does not work, check the boot log again.\nYou may report an issue and attach the `setup.log` file.\n\n### Impossible to boot at all\n\nIf you used the default installation method, then your Windows boot loader is still in place and you should be able to access UEFI Setup (\"BIOS setup\") or boot loader list by some key combination right after powering on your computer. There you can choose the `Windows Boot Loader` and continue as usual to uninstall HackBGRT.\n\nIf you selected the legacy installation method which overwrites Windows boot loader, then you need to use the Windows installation disk (or recovery disk) to fix boot issues.\n\n## Building\n\n* Compiler: Clang\n* Compiler flags: see Makefile\n* Libraries: gnu-efi\n"
        },
        {
          "name": "config.txt",
          "type": "blob",
          "size": 2.07421875,
          "content": "Ôªø# vim: set fileencoding=utf-8\r\n# The same options may be given also as command line parameters in the EFI Shell, which is useful for debugging.\r\n\r\n# Boot loader path. MS = either backup or original Windows boot loader.\r\nboot=MS\r\n\r\n# The image is specified with an image line.\r\n# Multiple image lines may be present, in which case one will be picked by random.\r\n# The image line may contain the following parts:\r\n# Any of the following:\r\n#  - \"n=(number)\", a weight for this image in the randomization process. Default: n=1.\r\n#  - \"x=(number)\" or \"x=keep\", the x offset from the center. Default: x=0.\r\n#  - \"y=(number)\" or \"y=keep\", the y offset from the center. Default: y=0.\r\n#  - \"o=(0|90|180|270|keep)\", the screen orientation, degrees anticlockwise. Default: o=keep.\r\n# One of the following:\r\n#  - \"keep\" to keep the firmware logo. Also keeps coordinates by default.\r\n#  - \"remove\" to remove the BGRT. Makes x and y meaningless.\r\n#  - \"black\" to use only a black image. Makes x and y meaningless.\r\n#  - \"path=file.bmp\" to read an image file.\r\n#    * NOTE: The installer can copy and convert BMP, PNG, JPEG, GIF.\r\n# Examples:\r\n#  - image=remove\r\n#  - image=black\r\n#  - image= x=0 y=-200 path=topimage.bmp\r\n#  - image= n=1 o=90 path=sideways.bmp\r\n#  - image= n=50 y=999999 o=keep path=probable.bmp\r\n# The above examples together would produce\r\n#  - 1/54 chance for the default OS logo\r\n#  - 1/54 chance for black screen\r\n#  - 1/54 chance for topimage.bmp, 200 px above the center of the screen\r\n#  - 1/54 chance for splash.bmp, centered, orientation set to 90 degrees\r\n#  - 50/54 chance for probable.bmp, at the bottom edge, explicitly default orientation\r\n# Default: just one image.\r\nimage= y=-200 path=splash.bmp\r\n\r\n# Preferred resolution. Use 0x0 for maximum and -1x-1 for original.\r\nresolution=0x0\r\n\r\n# Logging (0 for disabled, 1 for enabled).\r\n# When logging is enabled, setup.exe can show debug information about the current boot.\r\n# The log might occupy a few kilobytes of RAM.\r\nlog=1\r\n\r\n# Debug mode (0 for disabled, 1 for enabled).\r\n# Shows debug information and prompts for keypress before booting.\r\ndebug=0\r\n"
        },
        {
          "name": "gnu-efi",
          "type": "commit",
          "content": null
        },
        {
          "name": "shim-signed",
          "type": "tree",
          "content": null
        },
        {
          "name": "shim.md",
          "type": "blob",
          "size": 5.1259765625,
          "content": "# Secure Boot and *shim*\n\nSecure Boot accepts only trusted files during boot. The *shim* boot loader is a tool which allows you to select which files to trust. HackBGRT installs *shim* for you, but you need to configure it with these instructions.\n\nOn the first boot after installing HackBGRT, you will see an error message saying \"Verification failed\". You need to press a key to enter the setup tool (MOKManager) where you can choose to trust HackBGRT. After that, use arrow keys to navigate and *Enter* to continue as described below.\n\n## 1. Verification failed\n\nThis is the start of *shim* configuration.\n\n```\nERROR\nVerification failed: (0x1A) Security Violation\n+----+\n| OK |\n+----+\n```\n\nSelect `OK`, *Enter*.\n\n```\nShim UEFI key management\nPress any key to perform MOK management\nBooting in 5 seconds\n```\n\nPress a key quickly to enter *MOK management* or the *MOKManager* program.\n\n## 2. MOK management\n\n```\nPerform MOK management\n\nContinue to boot\nEnroll key from disk\nEnroll hash from disk\n```\n\nSelect `Enroll hash from disk`, *Enter*. This is the safest option where you choose to trust only a specific version of HackBGRT.\n\nYou can also choose to `Enroll key from disk`, which means that you choose to trust anything signed with the same certificate. How do you know if it's safe? You don't ‚Äì that's why you should rather use the other option or build your own version of HackBGRT with your own certificate.\n\n## 3a. Enroll hash from disk\n\n```\nSelect Binary\n\nThe Selected Binary will have its hash Enrolled\nThis means it will subsequently Boot with no prompting\nRemember to make sure it is a genuine binary before enrolling its hash\n\n+----------------+\n| YOUR DISK NAME |\n+----------------+\n```\n\nSelect the disk, *Enter*.\n\n```\n+---------------+\n|     EFI/      |\n|    loader/    |\n| vmlinuz-linux |\n+---------------+\n```\n\nSelect `EFI/`, *Enter*.\n\n```\n+------------+\n|    ../     |\n|   Boot/    |\n| HackBGRT/  |\n| Microsoft/ |\n+------------+\n```\n\nSelect `HackBGRT/`, *Enter*.\n\n```\n+-----------------+\n|       ../       |\n|   grubx64.efi   |\n|   loader.efi    |\n|    mmx64.efi    |\n| certificate.cer |\n|   splash.bmp    |\n|   config.txt    |\n+-----------------+\n```\n\nSelect `grubx64.efi`, *Enter*.\n\n```\n[Enroll MOK]\n\n+------------+\n| View key 0 |\n|  Continue  |\n+------------+\n```\n\nTo verify the key contents, select `View key 0`, *Enter*.\n\n```\nSHA256 hash\n(some hexadecimal values)\n```\n\nPress *Enter* to continue.\n\n```\n[Enroll MOK]\n\n+------------+\n| View key 0 |\n|  Continue  |\n+------------+\n```\n\nSelect `Continue`, *Enter*.\n\n```\nEnroll the key(s)?\n\n+-----+\n| No  |\n| Yes |\n+-----+\n```\n\nSelect `Yes`, *Enter*.\n\n```\nPerform MOK management\n\n+-----------------------+\n|        Reboot         |\n| Enroll key from disk  |\n| Enroll hash from disk |\n+-----------------------+\n```\n\nSelect `Reboot`, *Enter*.\n\nYou are now ready to boot using HackBGRT.\n\n## 3b. Enroll key from disk\n\n```\nSelect Key\n\nThe selected key will be enrolled into the MOK database\nThis means any binaries signed with it will be run without prompting\nRemember to make sure it is a genuine key before Enrolling it\n\n+----------------+\n| YOUR DISK NAME |\n+----------------+\n```\n\nSelect the disk, *Enter*.\n\n```\n+---------------+\n|     EFI/      |\n|    loader/    |\n| vmlinuz-linux |\n+---------------+\n```\n\nSelect `EFI/`, *Enter*.\n\n```\n+------------+\n|    ../     |\n|   Boot/    |\n| HackBGRT/  |\n| Microsoft/ |\n+------------+\n```\n\nSelect `HackBGRT/`, *Enter*.\n\n```\n+-----------------+\n|       ../       |\n|   grubx64.efi   |\n|   loader.efi    |\n|    mmx64.efi    |\n| certificate.cer |\n|   splash.bmp    |\n|   config.txt    |\n+-----------------+\n```\n\nSelect `certificate.cer`, *Enter*.\n\n```\n[Enroll MOK]\n\n+------------+\n| View key 0 |\n|  Continue  |\n+------------+\n```\n\nTo verify the key contents, select `View key 0`, *Enter*.\n\n```\n[Extended Key Usage]\nOID: Code Signing\n\n[Serial Number]\n6B:24:52:E9:3B:84:41:73:B0:22:92:E8:BE:8E:38:85:\n\n[Issuer]\nCN=HackBGRT Secure Boot Signer, O=Metabolix\n\n[Subject]\nCN=HackBGRT Secure Boot Signer, O=Metabolix\n\n[Valid Not Before]\nNov  9 13:43:56 2023 GMT\n\n[Valid Not After]\nJan 19 03:14:07 2037 GMT\n\n[Fingerprint]\n79 8E 64 40 D1 D1 F4 53 30 8D\nA0 83 A4 77 FE 57 45 30 36 60\n```\n\nPress *Enter* to continue.\n\n```\n[Enroll MOK]\n\n+------------+\n| View key 0 |\n|  Continue  |\n+------------+\n```\n\nSelect `Continue`, *Enter*.\n\n```\nEnroll the key(s)?\n\n+-----+\n| No  |\n| Yes |\n+-----+\n```\n\nSelect `Yes`, *Enter*.\n\n```\nPerform MOK management\n\n+-----------------------+\n|        Reboot         |\n| Enroll key from disk  |\n| Enroll hash from disk |\n+-----------------------+\n```\n\nSelect `Reboot`, *Enter*.\n\nYou are now ready to boot using HackBGRT.\n\n## Tutorial: *shim* for dummies\n\nTo install *shim* manually, follow these steps (assuming x64 architecture):\n\n1. Get *shim*, preferably *shim-signed*.\n2. Rename your boot loader to `grubx64.efi`.\n3. Copy `shimx64.efi` where your loader used to be.\n4. Copy `mmx64.efi` to the same folder.\n\nThe *shim* boot process is as follows:\n\n1. Your computer starts `your-loader-name.efi`, which is now really *shim*.\n2. Next, *shim* tries to load `grubx64.efi`.\n3. If `grubx64.efi` is trusted, the boot process continues.\n4. Otherwise, *shim* offers to launch *MOKManager* `mmx64.efi`, and you can try again after that.\n"
        },
        {
          "name": "splash.bmp",
          "type": "blob",
          "size": 96.052734375,
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}