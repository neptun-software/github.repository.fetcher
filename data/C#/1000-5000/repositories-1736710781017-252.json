{
  "metadata": {
    "timestamp": 1736710781017,
    "page": 252,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bombomby/optick",
      "stars": 2971,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3671875,
          "content": "Bin/\nOptick/.vs/\nOptick/obj/\nOptickApp/obj/\nOptickApp/packages/\nOptickApp/.vs/\ngui/obj/\ngui/packages/\ngui/InteractiveDataDisplay.WPF/obj/\ngui/*/obj/\ngui/.vs/\n[Bb]uild*/\nTools/Publish/\n*.suo\n*.user\nPublish/\n*.rej\n*.orig\n.DS_Store\n/Samples/UnrealEnginePlugin/Binaries\n/.vs\n/samples/UnrealEnginePlugin/GUI/Optick.exe\nsamples/UnrealEnginePlugin/Source/ThirdParty/Optick/src\n*.bak\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.353515625,
          "content": "language: \r\n  - cpp\r\n\r\nos:\r\n  - linux\r\n  - osx\r\n\r\ncompiler:\r\n  - clang\r\n  - gcc\r\n\r\n  \r\nscript:\r\n  - if [ \"$TRAVIS_OS_NAME\" = \"linux\" ]; then ./tools/Linux/premake5 gmake && pushd build/gmake/ && make config=release_x64 && popd; fi\r\n  - if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then ./tools/MacOS/premake5 gmake && pushd build/gmake/ && make config=debug_x64 && popd; fi"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 4.662109375,
          "content": "cmake_minimum_required(VERSION 3.2)\r\nproject(Optick LANGUAGES CXX VERSION 1.3.0)\r\n\r\n\r\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\r\nset(CMAKE_CXX_STANDARD 11)\r\n\r\n\r\n# hacks for standalone builds with visual studio\r\nif(MSVC AND CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_LIST_DIR)\r\n\tmessage(STATUS \"Standalone build\")\r\n\tlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/Build\")\r\n\tset(CMAKE_CONFIGURATION_TYPES \"Debug;Release\" CACHE STRING \"\" FORCE)\r\n\tset(standalone ON)\r\nelse()\r\n\tset(standalone OFF)\r\nendif()\r\n\r\n\r\n# Sources\r\nfile(GLOB OPTICK_SRC \"src/*.*\")\r\nsource_group(\"OptickCore\" FILES ${OPTICK_SRC})\r\n\r\n\r\n# Enabled\r\noption(OPTICK_ENABLED \"Enable profiling with Optick\" ON)\r\noption(OPTICK_INSTALL_TARGETS \"Should optick be installed? Set to OFF if you use add_subdirectory to include Optick.\" ON)\r\n\r\nif(NOT OPTICK_ENABLED)\r\n\tmessage(STATUS \"Optick is disabled\")\r\n\t# add dummy target as a replacement\r\n\tadd_library(OptickCore STATIC ${OPTICK_SRC})\r\n\ttarget_include_directories(OptickCore PUBLIC \"src\")\r\n\ttarget_compile_definitions(OptickCore PUBLIC USE_OPTICK=0)\r\n\treturn()\r\nendif()\r\n\r\n\r\n# Options\r\noption(OPTICK_USE_VULKAN \"Built-in support for Vulkan\" OFF)\r\noption(OPTICK_USE_D3D12 \"Built-in support for DirectX 12\" OFF)\r\noption(OPTICK_BUILD_GUI_APP \"Build Optick gui viewer app\" OFF)\r\noption(OPTICK_BUILD_CONSOLE_SAMPLE \"Build Optick console sample app\" ${standalone})\r\n\r\n# OptickCore\r\nadd_library(OptickCore SHARED ${OPTICK_SRC})\r\ntarget_include_directories(OptickCore\r\n\tPUBLIC\r\n\t\t$<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/src>\r\n)\r\nset_target_properties(OptickCore \r\n\tPROPERTIES \r\n\t\tPUBLIC_HEADER \"${CMAKE_CURRENT_LIST_DIR}/src/optick.h;${CMAKE_CURRENT_LIST_DIR}/src/optick.config.h\"\r\n\t\tDEBUG_POSTFIX d # So that we can install debug and release side by side\r\n)\r\ntarget_compile_definitions(OptickCore PRIVATE OPTICK_EXPORTS=1)\r\nif(OPTICK_USE_VULKAN)\r\n\tmessage(STATUS \"Optick uses Vulkan\")\r\n\tfind_package(Vulkan REQUIRED)\r\n\ttarget_link_libraries(OptickCore PRIVATE Vulkan::Vulkan)\r\nelse()\r\n\ttarget_compile_definitions(OptickCore PRIVATE OPTICK_ENABLE_GPU_VULKAN=0)\r\nendif()\r\nif(OPTICK_USE_D3D12)\r\n\tmessage(STATUS \"Optick uses DirectX 12\")\r\n\ttarget_link_libraries(OptickCore PRIVATE \"d3d12.lib\" \"dxgi.lib\")\r\nelse()\r\n\ttarget_compile_definitions(OptickCore PRIVATE OPTICK_ENABLE_GPU_D3D12=0)\r\nendif()\r\nif(OPTICK_USE_D3D12 OR OPTICK_USE_VULKAN)\r\n\ttarget_compile_definitions(OptickCore PRIVATE OPTICK_ENABLE_GPU=1)\r\nelse()\r\n\ttarget_compile_definitions(OptickCore PRIVATE OPTICK_ENABLE_GPU=0)\r\nendif()\r\n\r\nif(MSVC)\r\n\t# temporary solution to unblock C++17 users\r\n\ttarget_compile_definitions(OptickCore PRIVATE _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS)\r\nendif()\r\n\r\nset(EXTRA_LIBS ${EXTRA_LIBS} OptickCore)\r\nif(NOT MSVC)\r\n\tset(EXTRA_LIBS ${EXTRA_LIBS} pthread)\r\nendif()\r\n\r\n\r\n# Gui App\r\nif(MSVC AND OPTICK_BUILD_GUI_APP)\r\n\tadd_subdirectory(gui)\r\nendif()\r\n\r\n\r\n# Console App\r\nif(OPTICK_BUILD_CONSOLE_SAMPLE)\r\n\tfile(GLOB TEST_ENGINE_SRC \"samples/Common/TestEngine/*.*\")\r\n\tsource_group(\"TestEngine\" FILES ${TEST_ENGINE_SRC})\r\n\tadd_executable(ConsoleApp \"samples/ConsoleApp/main.cpp\" ${TEST_ENGINE_SRC})\r\n\ttarget_include_directories(ConsoleApp PRIVATE \"samples/Common/TestEngine\")\r\n\ttarget_link_libraries(ConsoleApp ${EXTRA_LIBS})\r\n\tset_target_properties(ConsoleApp PROPERTIES FOLDER Samples)\r\nendif()\r\n\r\n\r\n###############\r\n## Packaging ##\r\n###############\r\nif(OPTICK_INSTALL_TARGETS)\r\n\tinclude(CMakePackageConfigHelpers)\r\n\tinclude(GNUInstallDirs)\r\n\r\n\tset(${PROJECT_NAME}_INSTALL_CMAKEDIR \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\" CACHE STRING \"Path to smartcrop cmake files\")\r\n\r\n\t# Use version checking boilerplate\r\n\twrite_basic_package_version_file(\r\n\t\t${PROJECT_NAME}ConfigVersion.cmake\r\n\t\tCOMPATIBILITY SameMajorVersion\r\n\t)\r\n\r\n\tconfigure_package_config_file(\r\n\t\t${PROJECT_SOURCE_DIR}/tools/${PROJECT_NAME}Config.cmake.in\r\n\t\t${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\r\n\t\tINSTALL_DESTINATION ${${PROJECT_NAME}_INSTALL_CMAKEDIR} \r\n\t\t# Imported targets do not require the following macros\r\n\t\tNO_SET_AND_CHECK_MACRO\r\n\t\tNO_CHECK_REQUIRED_COMPONENTS_MACRO \r\n\t)\r\n\r\n\tinstall(TARGETS OptickCore\r\n\t\tEXPORT ${PROJECT_NAME}_Targets\r\n\t\tRUNTIME  DESTINATION ${CMAKE_INSTALL_BINDIR}\r\n\t\tLIBRARY  DESTINATION ${CMAKE_INSTALL_LIBDIR}\r\n\t\tARCHIVE  DESTINATION ${CMAKE_INSTALL_LIBDIR}\r\n\t\tINCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\r\n\t\tPUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\r\n\r\n\t)\r\n\r\n\tinstall(\r\n\t\tEXPORT ${PROJECT_NAME}_Targets \r\n\t\tNAMESPACE ${PROJECT_NAME}::\r\n\t\tFILE ${PROJECT_NAME}Targets.cmake\r\n\t\tDESTINATION ${${PROJECT_NAME}_INSTALL_CMAKEDIR}\r\n\t)\r\n\r\n\r\n\tinstall(FILES \r\n\t\t${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\r\n\t\t${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\r\n\t\tDESTINATION\r\n\t\t\t${${PROJECT_NAME}_INSTALL_CMAKEDIR}\r\n\t)\r\nendif()\r\n\r\n\r\n\r\n"
        },
        {
          "name": "CMakeSettings.json",
          "type": "blob",
          "size": 1.3857421875,
          "content": "ï»¿{\r\n  \"configurations\": [\r\n    {\r\n      \"name\": \"Linux-Debug\",\r\n      \"generator\": \"Unix Makefiles\",\r\n      \"remoteMachineName\": \"${defaultRemoteMachineName}\",\r\n      \"configurationType\": \"Debug\",\r\n      \"remoteCMakeListsRoot\": \"/var/tmp/src/${workspaceHash}/${name}\",\r\n      \"cmakeExecutable\": \"/usr/bin\",\r\n      \"buildRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\build\\\\${name}\",\r\n      \"installRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\install\\\\${name}\",\r\n      \"remoteBuildRoot\": \"/var/tmp/build/${workspaceHash}/build/${name}\",\r\n      \"remoteInstallRoot\": \"/var/tmp/build/${workspaceHash}/install/${name}\",\r\n      \"remoteCopySources\": true,\r\n      \"remoteCopySourcesOutputVerbosity\": \"Normal\",\r\n      \"remoteCopySourcesConcurrentCopies\": \"10\",\r\n      \"remoteCopySourcesMethod\": \"rsync\",\r\n      \"remoteCopySourcesExclusionList\": [\r\n        \".vs\",\r\n        \".git\",\r\n        \"Bin\",\r\n        \"build\",\r\n        \"gui\",\r\n        \"stc\",\r\n        \"tools\",\r\n        \"publish\",\r\n        \"samples/DurangoUWP\",\r\n        \"samples/UnrealEnginePlugin\",\r\n        \"samples/WindowsVulkan\",\r\n        \"samples/WindowsD3D12\"\r\n      ],\r\n      \"rsyncCommandArgs\": \"-t --delete --delete-excluded\",\r\n      \"remoteCopyBuildOutput\": false,\r\n      \"cmakeCommandArgs\": \"\",\r\n      \"buildCommandArgs\": \"\",\r\n      \"ctestCommandArgs\": \"\",\r\n      \"inheritEnvironments\": [\r\n        \"linux_x64\"\r\n      ]\r\n    }\r\n  ]\r\n}"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0576171875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2019 Vadim Slyusarev\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.818359375,
          "content": "# [Optick: C++ Profiler For Games](https://optick.dev)\n![GitHub](https://img.shields.io/github/license/bombomby/optick.svg) ![GitHub release](https://img.shields.io/github/release/bombomby/optick.svg) <br/>\n![](https://optick.dev/images/screenshots/optick/Optick.png)\nOptick is a super-lightweight C++ profiler for Games.<br/>\nIt provides access for all the necessary tools required for efficient performance analysis and optimization:<br/>\ninstrumentation, switch-contexts, sampling, GPU counters.<br/>\n> Looking for 'Brofiler'? It has been renamed to 'Optick', so you are in the right place.\n## Build Status\n| Windows (x64: msvc) | Linux (x64: clang, gcc) | MacOS (x64: clang, gcc) | Static Code Analysis |\n| ------- | ----- | ----- | --------------------- |\n| [![Windows Build status](https://ci.appveyor.com/api/projects/status/bu5smbuh1d2lcsf6?svg=true)](https://ci.appveyor.com/project/bombomby/optick) | [![Linux+MacOS Build Status](https://travis-ci.org/bombomby/optick.svg)](https://travis-ci.org/bombomby/optick) | [![Linux+MacOS Build Status](https://travis-ci.org/bombomby/optick.svg)](https://travis-ci.org/bombomby/optick) | [![Total alerts](https://img.shields.io/lgtm/alerts/g/bombomby/optick.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/bombomby/optick/alerts/) [![Codacy Badge](https://api.codacy.com/project/badge/Grade/3195c1fa7d554dc1bb9d45dd30454b48)](https://www.codacy.com/app/bombomby/optick?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=bombomby/optick&amp;utm_campaign=Badge_Grade) |\n\n| Features | Windows | Linux | MacOS | XBox | PS4 | UE4 |\n| -------- | ------- | ----- | ----- | ---- | --- | --- |\n| Instrumentation | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :grey_question: | :heavy_check_mark: |\n| Switch Contexts | :heavy_check_mark: ETW | :heavy_check_mark: FTrace | :heavy_check_mark: DTrace | :heavy_check_mark: | :grey_question: | :heavy_check_mark: Win |\n| Sampling | :heavy_check_mark: ETW | | | :grey_question: | :grey_question: | :heavy_check_mark: Win |\n| GPU | :heavy_check_mark: D3D12, Vulkan | :heavy_check_mark: Vulkan | :heavy_check_mark: Vulkan | | | :hourglass_flowing_sand: |\n\n:heavy_check_mark: - works out of the box, :hourglass_flowing_sand: - in progress, :grey_question: - coming soon for the certified developers\n\n## List of Games and Studios using Optick(Brofiler)\n![Allods Team](https://optick.dev/images/studios/AllodsTeam_thumb2.png \"Allods Team\") ![4A Games](https://optick.dev/images/studios/4A_Games_thumb2.png \"4A Gaemes\") ![CryEngine](https://optick.dev/images/studios/CryEngine_thumb.png \"CryEngine\") ![Larian Studios](https://optick.dev/images/studios/Larian_png.png \"Larian Studios\")\n![Skyforge](https://optick.dev/images/studios/Skyforge_thumb.jpg \"Skyforge\") ![Metro Exodus](https://optick.dev/images/studios/Metro_thumb.jpg \"Metro Exodus\")  ![Warface](https://optick.dev/images/studios/Warface_thumb.jpg \"Metro Exodus\") ![Armored Warfare](https://optick.dev/images/studios/ArmoredWarfare_thumb.jpg \"Metro Exodus\")\n\n## Video Tutorial\n[![Optick Video Tutorial](https://github.com/bombomby/brofiler/blob/gh-pages/images/VideoThumbnail.jpg)](https://www.youtube.com/watch?v=p57TV5342fo)\n\n## Basic Integration (one line of code)\n1) Copy 'src' folder from the repository or latest release to your game project\n2) Add `OPTICK_FRAME(\"MainThread\");` macro to the main loop of your game and `#include \"optick.h\"` header\n```c++\n#include \"optick.h\"\n...\nwhile( true ) \n{\n\tOPTICK_FRAME(\"MainThread\");\n\tengine.Update();\n}\n```\n3) Use `OPTICK_EVENT();` macro to instrument a function\n```c++\nvoid SlowFunction()\n{ \n\tOPTICK_EVENT();\n\t...\n}\n```\n4) Add `OPTICK_THREAD(\"Name\");` macro to declare a new thread with Optick\n```c++\nvoid WorkerThread(...)\n{\n\tOPTICK_THREAD(\"Worker\");\n\twhile (isRunning)\n\t{\n\t\t...\n\t}\n}\n```\n5) Edit `optick.config.h` to enable/disable some of the features in specific configs or platforms.<br/>(e.g. disabling Optick in final builds)\n\n> :warning: If your Game uses **dynamic linking** and you are planning to **use Optick from multiple dlls** within the same executable - please make sure that Optick's code is added to the common **Dynamic Library** and this library is compiled with **OPTICK_EXPORT** define (Static Library won't work).<br/>\n> You could also use precompiled **OptickCore.dll** which is packaged with every release:\n> - Add `include` folder to the extra include dirs of your project\n> - Add `lib/x64/debug` and `lib/x64/release` to the extra library dirs of your project\n> - Copy `lib/x64/debug/OptickCore.dll` and `lib/x64/release/OptickCore.dll` to the debug and release output folders of your project respectively\n\n## API\nAll the available API calls are documented here:<br/>\nhttps://github.com/bombomby/optick/wiki/Optick-API\n\n## Unreal Engine\nOptick provides a special plugin for UE4. Check more detailed documentation here: <br/>\nhttps://github.com/bombomby/optick/wiki/UE4-Optick-Plugin <br/>\nhttps://github.com/bombomby/optick/wiki/UE5-Optick-Plugin <br/>\n![](https://github.com/bombomby/brofiler/blob/gh-pages/images/UE5_OpenOptick.jpg)\n\n## Samples\nRun [GenerateProjects_gpu.bat](https://github.com/bombomby/optick/blob/master/tools/GenerateProjects_gpu.bat) to generate project files. To compile the samples you'll need to install VulkanSDK. Alternatively you could use [GenerateProjects.bat](https://github.com/bombomby/optick/blob/master/tools/GenerateProjects.bat) to generate only minimal solution with ConsoleApp sample.<br/>\nOpen solution `build\\vs2017\\Optick.sln` with generated samples.\n\n| [WindowsD3D12](https://github.com/bombomby/optick/tree/master/samples/WindowsD3D12) | [WindowsVulkan](https://github.com/bombomby/optick/tree/master/samples/WindowsVulkan) | [ConsoleApp](https://github.com/bombomby/optick/tree/master/samples/ConsoleApp) |\n| ---------- | ------------ | ------------- |\n| ![WindowsD3D12](https://optick.dev/images/screenshots/optick/WindowsD3D12.png) | ![WindowsVulkan](https://optick.dev/images/screenshots/optick/WindowsVulkan.png) | ![ConsoleApp](https://optick.dev/images/screenshots/optick/ConsoleApp2.png) |\n| DirectX12 multithreading sample with Optick integration | SaschaWillems's vulkan multithreading sample with Optick integration | Basic ConsoleApp with Optick integration  (Windows, Linux, MacOS) |\n\n## Brofiler\nBrofiler has been renamed into Optick starting from v1.2.0.<br/>\nAll the future development is going under the new name.<br/>\nCheatsheet for upgrading to the new version:\n* `BROFILER_FRAME(\"MainThread\");` => `OPTICK_FRAME(\"MainThread\");`\n* `BROFILER_THREAD(\"WorkerThread\");` => `OPTICK_THREAD(\"WorkerThread\");`\n* `BROFILER_CATEGORY(\"Physics\", Brofiler::Color::Green);` => `OPTICK_CATEGORY(\"Physics\", Optick::Category::Physics);`\n* `BROFILER_EVENT(NAME);` => `OPTICK_EVENT(NAME);`\n* `PROFILE;` => `OPTICK_EVENT();`\n\n## How To Start?\nYou can find a short instruction here:<br/>\nhttps://github.com/bombomby/optick/wiki/How-to-start%3F-(Programmers-Setup)\n\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.4384765625,
          "content": "version: 2.0.{build}\r\n\r\nimage: Visual Studio 2019\r\n\r\nplatform:\r\n  - x64\r\n\r\nconfiguration:\r\n  - Debug\r\n  - Release\r\n\r\nmatrix:\r\n  fast_finish: true\r\n\r\nbefore_build:\r\n  - nuget restore gui/OptickApp_vs2022.sln\r\n  \r\nbuild_script:\r\n  - tools\\Windows\\premake5.exe vs2019\r\n  - cd build/vs2019\r\n  - MsBuild Optick.sln /t:Rebuild /p:Configuration=%CONFIGURATION%\r\n  - cd ../../gui\r\n  - MsBuild OptickApp_vs2022.sln /t:Rebuild /p:Configuration=%CONFIGURATION%"
        },
        {
          "name": "gui",
          "type": "tree",
          "content": null
        },
        {
          "name": "premake5.lua",
          "type": "blob",
          "size": 7.0390625,
          "content": "newoption {\n\ttrigger = \"UWP\",\n\tdescription = \"Generates Universal Windows Platform application type\",\n}\n\nnewoption {\n\ttrigger = \"DX12\",\n\tdescription = \"Generates a sample for DirectX12\",\n}\n\nnewoption {\n\ttrigger = \"Vulkan\",\n\tdescription = \"Generates a sample for Vulkan\",\n}\n\nnewoption {\n    trigger = \"Fibers\",\n    description = \"Enables fibers support\",\n}\n\nif not _ACTION then\n\t_ACTION=\"vs2017\"\nend\n\noutFolderRoot = \"bin/\" .. _ACTION .. \"/\";\n\nisVisualStudio = false\nisUWP = false\nisDX12 = false\nisVulkan = false\n\nif _ACTION == \"vs2010\" or _ACTION == \"vs2012\" or _ACTION == \"vs2015\" or _ACTION == \"vs2017\" then\n\tisVisualStudio = true\nend\n\nif _OPTIONS[\"UWP\"] then\n\tisUWP = true\nend\n\nif _OPTIONS[\"DX12\"] then\n\tisDX12 = true\nend\n\nif _OPTIONS[\"Vulkan\"] then\n\tisVulkan = true\nend\n\nif _OPTIONS[\"Fibers\"] then\n    isFibersEnabled = true\nend\n\nif isUWP then\n\tpremake.vstudio.toolset = \"v140\"\n\tpremake.vstudio.storeapp = \"10.0\"\nend\n\noutputFolder = \"build/\" .. _ACTION\n\nif isUWP then\n\toutputFolder = outputFolder .. \"_UWP\"\nend\n\nsolution \"Optick\"\n\tlanguage \"C++\"\nif _ACTION == \"vs2017\" then\n\tsystemversion \"latest\"\nend\n\tstartproject \"ConsoleApp\"\nif isVisualStudio then\n    \tcppdialect \"C++11\"\nelse\n\tcppdialect \"gnu++11\"\nend\n\tlocation ( outputFolder )\n\tflags { \"NoManifest\", \"FatalWarnings\" }\n\twarnings \"Extra\"\n    symbols \"On\"\n\toptimization_flags = {}\n\nif isVisualStudio then\n\tdebugdir (outFolderRoot)\n\tbuildoptions { \n\t\t\"/wd4127\", -- Conditional expression is constant\n\t\t\"/wd4091\"  -- 'typedef ': ignored on left of '' when no variable is declared\n\t}\nend\n\nif isUWP then\n\tdefines { \"OPTICK_UWP=1\" }\nend\n\n\tdefines { \"USE_OPTICK=1\"}\n\tdefines { \"OPTICK_FIBERS=1\"}\n\n\tlocal config_list = {\n\t\t\"Release\",\n\t\t\"Debug\",\n\t}\n\n\tlocal platform_list = {\n\t\t\"x64\",\n\t}\n\n\tconfigurations(config_list)\n\tplatforms(platform_list)\n\n\n-- CONFIGURATIONS\n\nif _ACTION == \"vs2010\" then\ndefines { \"_DISABLE_DEPRECATE_STATIC_CPPLIB\", \"_STATIC_CPPLIB\"}\nend\n\nconfiguration \"Release\"\n\ttargetdir(outFolderRoot .. \"/Native/Release\")\n\tdefines { \"NDEBUG\", \"MT_INSTRUMENTED_BUILD\" }\n\tflags { optimization_flags }\n    optimize \"Speed\"\n\nconfiguration \"Debug\"\n\ttargetdir(outFolderRoot .. \"/Native/Debug\")\n\tdefines { \"_DEBUG\", \"_CRTDBG_MAP_ALLOC\", \"MT_INSTRUMENTED_BUILD\" }\n\nconfiguration \"linux\"\n    links { \"pthread\" }\n\n--  give each configuration/platform a unique output directory\n\nfor _, config in ipairs(config_list) do\n\tfor _, plat in ipairs(platform_list) do\n\t\tconfiguration { config, plat }\n\t\t\tobjdir    ( outputFolder .. \"/Temp/\" )\n\t\t\ttargetdir ( outFolderRoot .. plat .. \"/\" .. config )\n\tend\nend\n\nos.mkdir(\"./\" .. outFolderRoot)\n\n\n\n\n-- SUBPROJECTS\n\nproject \"OptickCore\"\n\tuuid \"830934D9-6F6C-C37D-18F2-FB3304348F00\"\n\tdefines { \"_CRT_SECURE_NO_WARNINGS\", \"OPTICK_LIB=1\" }\nif _ACTION == \"vs2017\" then\n\tsystemversion \"10.0.15063.0\"\nend\n\n \tkind \"SharedLib\"\n \tdefines { \"OPTICK_EXPORTS\" }\n\n\tincludedirs\n\t{\n\t\t\"src\"\n\t}\n\t\n\tif isDX12 then\n\t--\tincludedirs\n\t--\t{\n\t--\t\t\"$(DXSDK_DIR)Include\",\n\t--\t}\n\t\tlinks { \n\t\t\t\"d3d12\", \n\t\t\t\"dxgi\",\n\t\t}\n\telse\n\t\tdefines { \"OPTICK_ENABLE_GPU_D3D12=0\" }\n\tend\n\t\n\tif isVulkan then\n\t\tincludedirs\n\t\t{\n\t\t\t\"$(VULKAN_SDK)/Include\",\n\t\t}\n\t\tlibdirs {\n\t\t\t\"$(VULKAN_SDK)/Lib\",\n\t\t}\n\t\tlinks { \n\t\t\t\"vulkan-1\",\n\t\t}\n\telse\n\t\tdefines { \"OPTICK_ENABLE_GPU_VULKAN=0\" }\n\tend\n\t\n\tfiles {\n\t\t\"src/**.cpp\",\n        \"src/**.h\", \n\t}\n\tvpaths {\n\t\t[\"api\"] = { \n\t\t\t\"src/optick.h\",\n\t\t\t\"src/optick.config.h\",\n\t\t},\n\t}\n\t\ngroup \"Samples\"\nif isFibersEnabled then\n\tproject \"TaskScheduler\"\n\t\texcludes { \"samples/Common/TaskScheduler/Scheduler/Source/MTDefaultAppInterop.cpp\", }\n\t\tkind \"StaticLib\"\n\t\tflags {\"NoPCH\"}\n\t\tdefines {\"USE_OPTICK=1\"}\n\t\tfiles {\n\t\t\t\"samples/Common/TaskScheduler/Scheduler/**.*\", \n\t\t}\n\n\t\tincludedirs\n\t\t{\n\t\t\t\"samples/Common/TaskScheduler/Scheduler/Include\",\n\t\t\t\"src\"\n\t\t}\n\n\t\texcludes { \"Src/Platform/Posix/**.*\" }\n\t\t\n\t\tlinks {\n\t\t\t\"OptickCore\",\n\t\t}\nend\n\nif isUWP then\n\t-- Genie can't generate proper UWP application\n\t-- It's a dummy project to match existing project file\n\tproject \"DurangoUWP\"\n\t\tlocation( \"samples/DurangoUWP\" )\n\t\tkind \"WindowedApp\"\n\t\tuuid \"5CA6AF66-C2CB-412E-B335-B34357F2FBB6\"\n\t\tfiles {\n\t\t\t\"samples/DurangoUWP/**.*\", \n\t\t}\nelse\n\tproject \"ConsoleApp\"\n\t\tflags {\"NoPCH\"}\n\t\tkind \"ConsoleApp\"\n\t\tuuid \"C50A1240-316C-EF4D-BAD9-3500263A260D\"\n\t\tfiles {\n\t\t\t\"samples/ConsoleApp/**.*\", \n\t\t\t\"samples/Common/TestEngine/**.*\",\n\t\t}\n\t\t\n\t\tincludedirs {\n\t\t\t\"src\",\n\t\t\t\"samples/Common/TestEngine\",\n\t\t\t\"samples/Common/TaskScheduler/Scheduler/Include\"\n\t\t}\n\t\t\n\t\tlinks {\n\t\t\t\"OptickCore\"\n\t\t}\n\n\t\tvpaths { \n\t\t\t[\"*\"] = \"samples/ConsoleApp\"\n\t\t}\nend\n\n\tproject \"ConsoleAppMT\"\n\t\tflags {\"NoPCH\"}\n\t\tkind \"ConsoleApp\"\n\t\tuuid \"C50A1240-316C-EF4D-BAD9-3500263A260E\"\n\t\tfiles {\n\t\t\t\"samples/ConsoleAppMT/**.*\", \n\t\t\t\"samples/Common/TestEngine/**.*\",\n\t\t}\n\t\t\n\t\tincludedirs {\n\t\t\t\"src\",\n\t\t\t\"samples/Common/TestEngine\",\n\t\t\t\"samples/Common/TaskScheduler/Scheduler/Include\"\n\t\t}\n\t\t\n\t\tlinks {\n\t\t\t\"OptickCore\"\n\t\t}\n\n\t\tvpaths { \n\t\t\t[\"*\"] = \"samples/ConsoleAppMT\"\n\t\t}\n\n\nif isDX12 then\n\tproject \"WindowsD3D12\"\n\t\tentrypoint \"WinMainCRTStartup\"\n\t\tflags {\"NoPCH\"}\n\t\tkind \"WindowedApp\"\n\t\tuuid \"D055326C-F1F3-4695-B7E2-A683077BE4DF\"\n\n\t\tbuildoptions { \n\t\t\"/wd4324\", -- structure was padded due to alignment specifier\n\t\t\"/wd4238\"  -- nonstandard extension used: class rvalue used as lvalue\n\t\t}\n\t\t\n\t\tlinks { \n\t\t\t\"d3d12\", \n\t\t\t\"dxgi\",\n\t\t\t\"d3dcompiler\"\n\t\t}\n\t\t\n\t\tfiles {\n\t\t\t\"samples/WindowsD3D12/**.h\", \n\t\t\t\"samples/WindowsD3D12/**.cpp\", \n\t\t}\n\t\t\n\t\tincludedirs {\n\t\t\t\"src\",\n\t\t}\n\t\t\n\t\tlinks {\n\t\t\t\"OptickCore\",\n\t\t}\n\t\t\n\t\tvpaths { \n\t\t\t[\"*\"] = \"samples/WindowsD3D12\" \n\t\t}\nend\n\nif isVulkan then\n\tproject \"WindowsVulkan\"\n\t\tentrypoint \"WinMainCRTStartup\"\n\t\tflags {\"NoPCH\"}\n\t\tkind \"WindowedApp\"\n\t\tuuid \"07A250C4-4432-45FE-9E63-BB7F71B7C14C\"\n\n\t\tdefines {\n\t\t\t\"VK_USE_PLATFORM_WIN32_KHR\", \n\t\t\t\"NOMINMAX\", \n\t\t\t\"_USE_MATH_DEFINES\",\n\t\t\t\"VK_EXAMPLE_DATA_DIR=\\\"\" .. os.getcwd() .. \"/Samples/WindowsVulkan/data/\\\"\",\n\t\t}\n\t\t\n\t\tbuildoptions { \n\t\t\t\"/wd4201\", -- nonstandard extension used: class rvalue used as lvalue\n\t\t\t\"/wd4458\", -- declaration of '***' hides class member\n\t\t\t\"/wd4018\", -- '<': signed/unsigned mismatch\n\t\t\t\"/wd4267\", -- 'argument': conversion from 'size_t' to 'uint32_t'\n\t\t\t\"/wd4244\", -- 'initializing': conversion from 'double' to 'float', possible loss of data\n\t\t\t\"/wd4189\", -- local variable is initialized but not referenced\n\t\t\t\"/wd4100\", -- unreferenced formal parameter\n\t\t\t\"/wd4189\", -- local variable is initialized but not referenced\n\t\t\t\"/wd4456\", -- declaration of '***' hides previous local declaration\n\t\t\t\"/wd4700\", -- uninitialized local variable '***' used\n\t\t\t\"/wd4702\", -- unreachable code\n\t\t\t\"/wd4127\", -- conditional expression is constant but don't want to bump to C++17\n\t\t}\n\t\n\t\tfiles {\n\t\t\t\"samples/WindowsVulkan/**.*\", \n\t\t}\n\t\t\n\t\tincludedirs {\n\t\t\t\"$(VULKAN_SDK)/Include\",\n\t\t\t\"Samples/WindowsVulkan\",\n\t\t\t\"Samples/WindowsVulkan/base\",\n\t\t\t\"src\",\n\t\t}\n\t\t\n\t\tlibdirs {\n\t\t\t\"$(VULKAN_SDK)/Lib\",\n\t\t\t\"samples/WindowsVulkan/libs/assimp\",\n\t\t}\n\n\t\tlinks { \n\t\t\t\"vulkan-1\",\n\t\t\t\"assimp\",\n\t\t}\n\t\t\n\t\tlinks {\n\t\t\t\"OptickCore\",\n\t\t}\n\t\t\n\t\tvpaths { \n\t\t\t[\"*\"] = \"samples/WindowsVulkan\" \n\t\t}\n\t\t\n\t\tif isVisualStudio then\n\t\t\tfullPath = os.getcwd() .. \"\\\\samples\\\\WindowsVulkan\\\\\"\n\t\t\tpostbuildcommands { \"copy \\\"\" .. fullPath .. \"dll\\\\assimp-vc140-mt.dll\\\" \\\"\" .. fullPath .. \"$(OutputPath)\\\\assimp-vc140-mt.dll\\\" /Y\" }\n\t\tend\nend\n"
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}