{
  "metadata": {
    "timestamp": 1736710667882,
    "page": 8,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pythonnet/pythonnet",
      "stars": 4861,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.8251953125,
          "content": "# EditorConfig is awesome: http://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n[*]\ncharset = utf-8\nindent_size = 4\nend_of_line = lf\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n# config files\n[*.{ini,yaml,yml}]\nindent_size = 2\n\n# Xml project files\n[*.{csproj,pyproj,config}]\nindent_size = 2\n\n# .NET formatting settings\n[*.{cs,vb}]\ndotnet_sort_system_directives_first = true\ndotnet_separate_import_directive_groups = true\n\n[*.cs]\ncsharp_new_line_before_open_brace = all\ncsharp_new_line_before_else = true\ncsharp_new_line_before_catch = true\ncsharp_new_line_before_finally = true\n\n# Solution\n[*.sln]\nindent_style = tab\n\n[*.csproj]\ncharset = utf-8\ninsert_final_newline = true\n\n# bumpversion reformats itself after every bump\n[.bumpversion.cfg]\ntrim_trailing_whitespace = false\nindent_style = tab\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.873046875,
          "content": "/src/runtime/interopNative.cs\n/src/perf_tests/baseline/\n\n# General binaries and Build results\n*.dll\n*.exe\n*.pdb\n*.deps.json\n\n### JetBrains ###\n.idea/\n\n### Python ###\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# Distribution / packaging\nbuild/\ndist/\n*.egg-info/\n.eggs/\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\ncoverage.xml\n\n### CSharp ###\n# User-specific files\n*.suo\n*.user\n*.vcxproj.filters\n*.userprefs\n*.DotSettings.user\n\n# Build results\n[Bb]in/\n[Oo]bj/\n\n# Visual Studio cache/options directory\n.vs/\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# OpenCover\n/results.xml\n\n# NuGet Packages\n**/packages/*\n\n# VS Project upgrade log files\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# Coverity\ncov-int/\n\n# Visual Studio Code\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n"
        },
        {
          "name": ".mention-bot",
          "type": "blob",
          "size": 0.794921875,
          "content": "{\n  \"maxReviewers\": 5,\n  \"numFilesToCheck\": 10,\n  \"message\": \"@pullRequester, thanks! @reviewers, please review this.\",\n  \"alwaysNotifyForPaths\": [\n    {\n      \"name\": \"ghuser\",\n      \"files\": [\"src/js/**/*.js\"],\n      \"skipTeamPrs\": false\n    }\n  ],\n  \"fallbackNotifyForPaths\": [\n    {\n      \"name\": \"ghuser\",\n      \"files\": [\"src/js/**/*.js\"],\n      \"skipTeamPrs\": false\n    }\n  ],\n  \"findPotentialReviewers\": true,\n  \"fileBlacklist\": [\"*.md\"],\n  \"userBlacklist\": [],\n  \"userBlacklistForPR\": [],\n  \"requiredOrgs\": [],\n  \"actions\": [\"opened\"],\n  \"skipAlreadyAssignedPR\": false,\n  \"skipAlreadyMentionedPR\": false,\n  \"assignToReviewer\": false,\n  \"createReviewRequest\": false,\n  \"createComment\": true,\n  \"skipTitle\": \"\",\n  \"withLabel\": \"\",\n  \"delayed\": false,\n  \"delayedUntil\": \"3d\",\n  \"skipCollaboratorPR\": false\n}\n"
        },
        {
          "name": "AUTHORS.md",
          "type": "blob",
          "size": 4.849609375,
          "content": "# Credits\n\n## Development Lead\n\n-   Benedikt Reinartz ([@filmor](https://github.com/filmor))\n-   Victor Milovanov ([@lostmsu](https://github.com/lostmsu))\n\n## Former Development Leads\n-   Barton Cline ([@BartonCline](https://github.com/BartonCline))\n-   Brian Lloyd ([@brianlloyd](https://github.com/brianlloyd))\n-   David Anthoff ([@davidanthoff](https://github.com/davidanthoff))\n-   Denis Akhiyarov ([@denfromufa](https://github.com/denfromufa))\n-   Tony Roberts ([@tonyroberts](https://github.com/tonyroberts))\n-   Victor Uriarte ([@vmuriart](https://github.com/vmuriart))\n\n## Contributors\n\n-   Alex Earl ([@slide](https://github.com/slide))\n-   Alex Helms ([@alexhelms](https://github.com/alexhelms))\n-   Alexandre Catarino([@AlexCatarino](https://github.com/AlexCatarino))\n-   Andrey Sant'Anna ([@andreydani](https://github.com/andreydani))\n-   Arvid JB ([@ArvidJB](https://github.com/ArvidJB))\n-   Avinash Maddikonda ([@SFM61319](https://github.com/SFM61319))\n-   Benoît Hudson ([@benoithudson](https://github.com/benoithudson))\n-   Bradley Friedman ([@leith-bartrich](https://github.com/leith-bartrich))\n-   Callum Noble ([@callumnoble](https://github.com/callumnoble))\n-   Christabella Irwanto([@christabella](https://github.com/christabella))\n-   Christian Heimes ([@tiran](https://github.com/tiran))\n-   Christoph Gohlke ([@cgohlke](https://github.com/cgohlke))\n-   Christopher Bremner ([@chrisjbremner](https://github.com/chrisjbremner))\n-   Christopher Pow ([@christopherpow](https://github.com/christopherpow))\n-   Daniel Abrahamsson ([@danabr](https://github.com/danabr))\n-   Daniel Fernandez ([@fdanny](https://github.com/fdanny))\n-   Daniel Santana ([@dgsantana](https://github.com/dgsantana))\n-   Dave Hirschfeld ([@dhirschfeld](https://github.com/dhirschfeld))\n-   David Lassonde ([@lassond](https://github.com/lassond))\n-   David Lechner ([@dlech](https://github.com/dlech))\n-   Dmitriy Se ([@dmitriyse](https://github.com/dmitriyse))\n-   Félix Bourbonnais ([@BadSingleton](https://github.com/BadSingleton))\n-   Florian Treurniet ([@ftreurni](https://github.com/ftreurni))\n-   Frank Witscher ([@Frawak](https://github.com/Frawak))\n-   He-chien Tsai ([@t3476](https://github.com/t3476))\n-   Inna Wiesel ([@inna-w](https://github.com/inna-w))\n-   Ivan Cronyn ([@cronan](https://github.com/cronan))\n-   Jan Krivanek ([@jakrivan](https://github.com/jakrivan))\n-   Jeff Reback ([@jreback](https://github.com/jreback))\n-   Jeff Robbins ([@jeff17robbins](https://github.com/jeff17robbins))\n-   Joe Frayne ([@jfrayne](https://github.com/jfrayne))\n-   Joe Lidbetter ([@jmlidbetter](https://github.com/jmlidbetter))\n-   Joe Savage ([@s4v4g3](https://github.com/s4v4g3))\n-   John Burnett ([@johnburnett](https://github.com/johnburnett))\n-   John Wilkes ([@jbw3](https://github.com/jbw3))\n-   Luke Stratman ([@lstratman](https://github.com/lstratman))\n-   Konstantin Posudevskiy ([@konstantin-posudevskiy](https://github.com/konstantin-posudevskiy))\n-   Matthias Dittrich ([@matthid](https://github.com/matthid))\n-   Meinrad Recheis ([@henon](https://github.com/henon))\n-   Mohamed Koubaa ([@koubaa](https://github.com/koubaa))\n-   Patrick Stewart ([@patstew](https://github.com/patstew))\n-   Peter Kese ([@pkese](https://github.com/pkese))\n-   Raphael Nestler ([@rnestler](https://github.com/rnestler))\n-   Rickard Holmberg ([@rickardraysearch](https://github.com/rickardraysearch))\n-   Sam Winstanley ([@swinstanley](https://github.com/swinstanley))\n-   Sean Freitag ([@cowboygneox](https://github.com/cowboygneox))\n-   Serge Weinstock ([@sweinst](https://github.com/sweinst))\n-   Simon Mourier ([@smourier](https://github.com/smourier))\n-   Tom Minka ([@tminka](https://github.com/tminka))\n-   Viktoria Kovescses ([@vkovec](https://github.com/vkovec))\n-   Ville M. Vainio ([@vivainio](https://github.com/vivainio))\n-   Virgil Dupras ([@hsoft](https://github.com/hsoft))\n-   Wenguang Yang ([@yagweb](https://github.com/yagweb))\n-   William Sardar ([@williamsardar](https://github.com/williamsardar))\n-   Xavier Dupré ([@sdpython](https://github.com/sdpython))\n-   Zane Purvis ([@zanedp](https://github.com/zanedp))\n-   ([@amos402](https://github.com/amos402))\n-   ([@bltribble](https://github.com/bltribble))\n-   ([@civilx64](https://github.com/civilx64))\n-   ([@GSPP](https://github.com/GSPP))\n-   ([@omnicognate](https://github.com/omnicognate))\n-   ([@OneBlue](https://github.com/OneBlue))\n-   ([@rico-chet](https://github.com/rico-chet))\n-   ([@rmadsen-ks](https://github.com/rmadsen-ks))\n-   ([@SnGmng](https://github.com/SnGmng))\n-   ([@stonebig](https://github.com/stonebig))\n-   ([@testrunner123](https://github.com/testrunner123))\n-   ([@DanBarzilian](https://github.com/DanBarzilian))\n-   ([@alxnull](https://github.com/alxnull))\n-   ([@gpetrou](https://github.com/gpetrou))\n-   Ehsan Iran-Nejad ([@eirannejad](https://github.com/eirannejad))\n-   ([@legomanww](https://github.com/legomanww))\n-   ([@gertdreyer](https://github.com/gertdreyer))\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 46.2265625,
          "content": "# Changelog\n\nAll notable changes to Python.NET will be documented in this file. This\nproject adheres to [Semantic Versioning][].\n\nThis document follows the conventions laid out in [Keep a CHANGELOG][].\n\n## Unreleased\n\n### Added\n### Changed\n### Fixed\n\n## [3.0.5](https://github.com/pythonnet/pythonnet/releases/tag/v3.0.5) - 2024-12-13\n\n### Added\n\n-  Support for Python 3.13 (#2454)\n\n\n## [3.0.4](https://github.com/pythonnet/pythonnet/releases/tag/v3.0.4) - 2024-09-19\n\n### Added\n\n-   Added `ToPythonAs<T>()` extension method to allow for explicit conversion\n    using a specific type. ([#2311][i2311])\n-   Added `IComparable` and `IEquatable` implementations to `PyInt`, `PyFloat`,\n    and `PyString` to compare with primitive .NET types like `long`.\n\n### Changed\n\n-   Added a `FormatterFactory` member in RuntimeData to create formatters with\n    parameters. For compatibility, the `FormatterType` member is still present\n    and has precedence when defining both `FormatterFactory` and `FormatterType`\n-   Added a post-serialization and a pre-deserialization step callbacks to\n    extend (de)serialization process\n-   Added an API to stash serialized data on Python capsules\n\n### Fixed\n\n-   Fixed RecursionError for reverse operators on C# operable types from python. See #2240\n-   Fixed crash when .NET event has no `AddMethod`\n-   Fixed probing for assemblies in `sys.path` failing when a path in `sys.path`\n    has invalid characters. See #2376\n-   Fixed possible access violation exception on shutdown. See ([#1977][i1977])\n\n## [3.0.3](https://github.com/pythonnet/pythonnet/releases/tag/v3.0.3) - 2023-10-11\n\n### Added\n\n-   Support for Python 3.12\n\n### Changed\n\n-   Use enum name in `repr`\n\n## [3.0.2](https://github.com/pythonnet/pythonnet/releases/tag/v3.0.2) - 2023-08-29\n\n### Fixed\n\n-   Fixed error occuring when inheriting a class containing a virtual generic method\n-   Make a second call to `pythonnet.load` a no-op, as it was intended\n-   Added support for multiple inheritance when inheriting from a class and/or multiple interfaces\n-   Fixed error occuring when calling `GetBuffer` for anything other than `PyBUF.SIMPLE`\n-   Bumped `clr_loader` dependency to incorporate patches\n\n## [3.0.1](https://github.com/pythonnet/pythonnet/releases/tag/v3.0.1) - 2022-11-03\n\n### Added\n\n-   Support for Python 3.11\n\n### Changed\n\n-   Allow decoders to override conversion of types derived from primitive types\n\n### Fixed\n\n-   Fixed objects leaking when Python attached event handlers to them even if they were later removed\n-   Fixed `PyInt` conversion to `BigInteger` and `System.String` produced incorrect result for values between 128 and 255.\n-   Fixed implementing a generic interface with a Python class\n\n\n## [3.0.0](https://github.com/pythonnet/pythonnet/releases/tag/v3.0.0) - 2022-09-29\n\n### Added\n\n-   Ability to instantiate new .NET arrays using `Array[T](dim1, dim2, ...)` syntax\n-   Python operator method will call C# operator method for supported binary and unary operators ([#1324][p1324]).\n-   Add GetPythonThreadID and Interrupt methods in PythonEngine\n-   Ability to implement delegates with `ref` and `out` parameters in Python, by returning the modified parameter values in a tuple. ([#1355][i1355])\n-   Ability to override .NET methods that have `out` or `ref` in Python by returning the modified parameter values in a tuple. ([#1481][i1481])\n-   `PyType` - a wrapper for Python type objects, that also permits creating new heap types from `TypeSpec`\n-    Improved exception handling:\n  *   exceptions can now be converted with codecs\n  *   `InnerException` and `__cause__` are propagated properly\n-   `__name__` and `__signature__` to reflected .NET methods\n-   .NET collection types now implement standard Python collection interfaces from `collections.abc`.\nSee [Mixins/collections.py](src/runtime/Mixins/collections.py).\n-   you can cast objects to generic .NET interfaces without specifying generic arguments as long as there is no ambiguity.\n-   .NET arrays implement Python buffer protocol\n-   Python integer interoperability with `System.Numerics.BigInteger`\n-   Python.NET will correctly resolve .NET methods, that accept `PyList`, `PyInt`,\nand other `PyObject` derived types when called from Python.\n-   .NET classes, that have `__call__` method are callable from Python\n-   `PyIterable` type, that wraps any iterable object in Python\n-   `PythonEngine` properties for supported Python versions: `MinSupportedVersion`, `MaxSupportedVersion`, and `IsSupportedVersion`\n-   The runtime that is loaded on `import clr` can now be configured via environment variables\n\n\n### Changed\n-   Drop support for Python 2, 3.4, 3.5, and 3.6\n-   `wchar_t` size aka `Runtime.UCS` is now determined at runtime\n-   `clr.AddReference` may now throw errors besides `FileNotFoundException`, that provide more\ndetails about the cause of the failure\n-   `clr.AddReference` no longer adds \".dll\" implicitly\n-   `PyIter(PyObject)` constructor replaced with static `PyIter.GetIter(PyObject)` method\n-   Python runtime can no longer be shut down if the Python error indicator is set, as it would have unpredictable behavior\n-   BREAKING: Return values from .NET methods that return an interface are now automatically\n     wrapped in that interface. This is a breaking change for users that rely on being\n     able to access members that are part of the implementation class, but not the\n     interface.  Use the new `__implementation__` or `__raw_implementation__` properties to\n     if you need to \"downcast\" to the implementation class.\n-   BREAKING: `==` and `!=` operators on `PyObject` instances now use Python comparison\n     (previously was equivalent to `object.ReferenceEquals(,)`)\n-   BREAKING: Parameters marked with `ParameterAttributes.Out` are no longer returned in addition\n     to the regular method return value (unless they are passed with `ref` or `out` keyword).\n-   BREAKING: Drop support for the long-deprecated CLR.* prefix.\n-   `PyObject` now implements `IEnumerable<PyObject>` in addition to `IEnumerable`\n-   floating point values passed from Python are no longer silently truncated\nwhen .NET expects an integer [#1342][i1342]\n-   More specific error messages for method argument mismatch\n-   members of `PyObject` inherited from `System.Object and `DynamicObject` now autoacquire GIL\n-   BREAKING: when inheriting from .NET types in Python if you override `__init__` you\nmust explicitly call base constructor using `super().__init__(.....)`. Not doing so will lead\nto undefined behavior.\n-   BREAKING: most `PyScope` methods will never return `null`. Instead, `PyObject` `None` will be returned.\n-   BREAKING: `PyScope` was renamed to `PyModule`\n-   BREAKING: Methods with `ref` or `out` parameters and void return type return a tuple of only the `ref` and `out` parameters.\n-   BREAKING: to call Python from .NET `Runtime.PythonDLL` property must be set to Python DLL name\nor the DLL must be loaded in advance. This must be done before calling any other Python.NET functions.\n-   BREAKING: `PyObject.Length()` now raises a `PythonException` when object does not support a concept of length.\n-   BREAKING: disabled implicit conversion from C# enums to Python `int` and back.\nOne must now either use enum members (e.g. `MyEnum.Option`), or use enum constructor\n(e.g. `MyEnum(42)` or `MyEnum(42, True)` when `MyEnum` does not have a member with value 42).\n-   BREAKING: disabled implicit conversion from Python objects implementing sequence protocol to\n.NET arrays when the target .NET type is `System.Object`. The conversion is still attempted when the\ntarget type is a `System.Array`.\n-   Sign Runtime DLL with a strong name\n-   Implement loading through `clr_loader` instead of the included `ClrModule`, enables\n    support for .NET Core\n-   BREAKING: .NET and Python exceptions are preserved when crossing Python/.NET boundary\n-   BREAKING: custom encoders are no longer called for instances of `System.Type`\n-   `PythonException.Restore` no longer clears `PythonException` instance.\n-   Replaced the old `__import__` hook hack with a PEP302-style Meta Path Loader\n-   BREAKING: Names of .NET types (e.g. `str(__class__)`) changed to better support generic types\n-   BREAKING: overload resolution will no longer prefer basic types. Instead, first matching overload will\nbe chosen.\n-   BREAKING: acquiring GIL using `Py.GIL` no longer forces `PythonEngine` to initialize\n-   BREAKING: `Exec` and `Eval` from `PythonEngine` no longer accept raw pointers.\n-   BREAKING: .NET collections and arrays are no longer automatically converted to\nPython collections. Instead, they implement standard Python\ncollection interfaces from `collections.abc`.\nSee [Mixins/collections.py](src/runtime/Mixins/collections.py).\n-   BREAKING: When trying to convert Python `int` to `System.Object`, result will\nbe of type `PyInt` instead of `System.Int32` due to possible loss of information.\nPython `float` will continue to be converted to `System.Double`.\n-   BREAKING: Python.NET will no longer implicitly convert types like `numpy.float64`, that implement `__float__` to\n`System.Single` and `System.Double`. An explicit conversion is required on Python or .NET side.\n-   BREAKING: `PyObject.GetHashCode` can fail.\n-   BREAKING: Python.NET will no longer implicitly convert any Python object to `System.Boolean`.\n-   BREAKING: `PyObject.GetAttr(name, default)` now only ignores `AttributeError` (previously ignored all exceptions).\n-   BREAKING: `PyObject` no longer implements `IEnumerable<PyObject>`.\nInstead, `PyIterable` does that.\n-   BREAKING: `IPyObjectDecoder.CanDecode` `objectType` parameter type changed from `PyObject` to `PyType`\n\n### Fixed\n\n-   Fix incorrect dereference of wrapper object in `tp_repr`, which may result in a program crash\n-   Fixed parameterless .NET constructor being silently called when a matching constructor overload is not found ([#238][i238])\n-   Fix incorrect dereference in params array handling\n-   Fixes issue with function resolution when calling overloaded function with keyword arguments from python ([#1097][i1097])\n-   Fix `object[]` parameters taking precedence when should not in overload resolution\n-   Fixed a bug where all .NET class instances were considered Iterable\n-   Fix incorrect choice of method to invoke when using keyword arguments.\n-   Fix non-delegate types incorrectly appearing as callable.\n-   Indexers can now be used with interface objects\n-   Fixed a bug where indexers could not be used if they were inherited\n-   Made it possible to use `__len__` also on `ICollection<>` interface objects\n-   Fixed issue when calling PythonException.Format where another exception would be raise for unnormalized exceptions\n-   Made it possible to call `ToString`, `GetHashCode`, and `GetType` on inteface objects\n-   Fixed objects returned by enumerating `PyObject` being disposed too soon\n-   Incorrectly using a non-generic type with type parameters now produces a helpful Python error instead of throwing NullReferenceException\n-   `import` may now raise errors with more detail than \"No module named X\"\n-   Exception stacktraces on `PythonException.StackTrace` are now properly formatted\n-   Providing an invalid type parameter to a generic type or method produces a helpful Python error\n-   Empty parameter names (as can be generated from F#) do not cause crashes\n-   Unicode strings with surrogates were truncated when converting from Python\n-   `Reload` mode now supports generic methods (previously Python would stop seeing them after reload)\n-   Temporarily fixed issue resolving method overload when method signature has `out` parameters ([#1672](i1672))\n-   Decimal default parameters are now correctly taken into account\n\n### Removed\n\n-   `ShutdownMode` has been removed. The only shutdown mode supported now is an equivalent of `ShutdownMode.Reload`.\nThere is no need to specify it.\n-   implicit assembly loading (you have to explicitly `clr.AddReference` before doing import)\n-   messages in `PythonException` no longer start with exception type\n-   `PyScopeManager`, `PyScopeException`, `PyScope` (use `PyModule` instead)\n-   support for .NET Framework 4.0-4.6; Mono before 5.4. Python.NET now requires .NET Standard 2.0\n(see [the matrix](https://docs.microsoft.com/en-us/dotnet/standard/net-standard#net-implementation-support))\n\n## [2.5.2](https://github.com/pythonnet/pythonnet/releases/tag/v2.5.2) - 2021-02-05\n\nBugfix release.\n\n### Fixed\n-   Fix `object[]` parameters taking precedence when should not in overload resolution\n-   Empty parameter names (as can be generated from F#) do not cause crashes\n\n## [2.5.1](https://github.com/pythonnet/pythonnet/releases/tag/v2.5.1) - 2020-06-18\n\nBugfix release.\n\n### Fixed\n\n-    Fix incorrect dereference of wrapper object in `tp_repr`, which may result in a program crash\n-    Fix incorrect dereference in params array handling\n\n## [2.5.0](https://github.com/pythonnet/pythonnet/releases/tag/v2.5.0) - 2020-06-14\n\nThis version improves performance on benchmarks significantly compared to 2.3.\n\n### Added\n\n-   Automatic NuGet package generation in appveyor and local builds\n-   Function that sets `Py_NoSiteFlag` to 1.\n-   Support for Jetson Nano.\n-   Support for `__len__` for .NET classes that implement ICollection\n-   `PyExport` attribute to hide .NET types from Python\n-   `PythonException.Format` method to format exceptions the same as\n    `traceback.format_exception`\n-   `Runtime.None` to be able to pass `None` as parameter into Python from .NET\n-   `PyObject.IsNone()` to check if a Python object is None in .NET.\n-   Support for Python 3.8\n-   Codecs as the designated way to handle automatic conversions between\n    .NET and Python types\n-   Added Python 3 buffer api support and PyBuffer interface for fast byte and numpy array read/write ([#980][p980])\n\n### Changed\n\n-   Added argument types information to \"No method matches given arguments\" message\n-   Moved wheel import in setup.py inside of a try/except to prevent pip collection failures\n-   Removes `PyLong_GetMax` and `PyClass_New` when targetting Python3\n-   Improved performance of calls from Python to C#\n-   Added support for converting python iterators to C# arrays\n-   Changed usage of the obsolete function\n    `GetDelegateForFunctionPointer(IntPtr, Type)` to\n    `GetDelegateForFunctionPointer<TDelegate>(IntPtr)`\n-   When calling C# from Python, enable passing argument of any type to a\n    parameter of C# type `object` by wrapping it into `PyObject` instance.\n    ([#881][i881])\n-   Added support for kwarg parameters when calling .NET methods from Python\n-   Changed method for finding MSBuild using vswhere\n-   Reworked `Finalizer`. Now objects drop into its queue upon finalization,\n    which is periodically drained when new objects are created.\n-   Marked `Runtime.OperatingSystemName` and `Runtime.MachineName` as\n    `Obsolete`, should never have been `public` in the first place. They also\n    don't necessarily return a result that matches the `platform` module's.\n-   Unconditionally depend on `pycparser` for the interop module generation\n\n### Fixed\n\n-   Fixed runtime that fails loading when using pythonnet in an environment\n    together with Nuitka\n-   Fixes bug where delegates get casts (dotnetcore)\n-   Determine size of interpreter longs at runtime\n-   Handling exceptions ocurred in ModuleObject's getattribute\n-   Fill `__classcell__` correctly for Python subclasses of .NET types\n-   Fixed issue with params methods that are not passed an array.\n-   Use UTF8 to encode strings passed to `PyRun_String` on Python 3\n\n## [2.4.0][] - 2019-05-15\n\n### Added\n\n-   Added support for embedding python into dotnet core 2.0 (NetStandard 2.0)\n-   Added new build system (pythonnet.15.sln) based on dotnetcore-sdk/xplat(crossplatform msbuild).\n    Currently there two side-by-side build systems that produces the same output (net40) from the same sources.\n    After a some transition time, current (mono/ msbuild 14.0) build system will be removed.\n-   NUnit upgraded to 3.7 (eliminates travis-ci random bug)\n-   Added C# `PythonEngine.AddShutdownHandler` to help client code clean up on shutdown.\n-   Added `clr.GetClrType` ([#432][i432])([#433][p433])\n-   Allowed passing `None` for nullable args ([#460][p460])\n-   Added keyword arguments based on C# syntax for calling CPython methods ([#461][p461])\n-   Catches exceptions thrown in C# iterators (yield returns) and rethrows them in python ([#475][i475])([#693][p693])\n-   Implemented GetDynamicMemberNames() for PyObject to allow dynamic object members to be visible in the debugger ([#443][i443])([#690][p690])\n-   Incorporated reference-style links to issues and pull requests in the CHANGELOG ([#608][i608])\n-   Added PyObject finalizer support, Python objects referred by C# can be auto collect now ([#692][p692]).\n-   Added detailed comments about aproaches and dangers to handle multi-app-domains ([#625][p625])\n-   Python 3.7 support, builds and testing added. Defaults changed from Python 3.6 to 3.7 ([#698][p698])\n-   Added support for C# types to provide `__repr__` ([#680][p680])\n\n### Changed\n\n-   PythonException included C# call stack\n-   Reattach python exception traceback information (#545)\n-   PythonEngine.Intialize will now call `Py_InitializeEx` with a default value of 0, so signals will not be configured by default on embedding. This is different from the previous behaviour, where `Py_Initialize` was called instead, which sets initSigs to 1. ([#449][i449])\n-   Refactored MethodBinder.Bind in preparation to make it extensible (#829)\n-   Look for installed Windows 10 sdk's during installation instead of relying on specific versions.\n-   Remove `LoadLibrary` call. ([#880][p880])\n\n### Fixed\n\n-   Fixed secondary PythonEngine.Initialize call, all sensitive static variables now reseted.\n    This is a hidden bug. Once python cleaning up enough memory, objects from previous engine run becomes corrupted. ([#534][p534])\n-   Fixed Visual Studio 2017 compat ([#434][i434]) for setup.py\n-   Fixed crashes when integrating pythonnet in Unity3d ([#714][i714]),\n    related to unloading the Application Domain\n-   Fixed interop methods with Py_ssize_t. NetCoreApp 2.0 is more sensitive than net40 and requires this fix. ([#531][p531])\n-   Fixed crash on exit of the Python interpreter if a python class\n    derived from a .NET class has a `__namespace__` or `__assembly__`\n    attribute ([#481][i481])\n-   Fixed conversion of 'float' and 'double' values ([#486][i486])\n-   Fixed 'clrmethod' for python 2 ([#492][i492])\n-   Fixed double calling of constructor when deriving from .NET class ([#495][i495])\n-   Fixed `clr.GetClrType` when iterating over `System` members ([#607][p607])\n-   Fixed `LockRecursionException` when loading assemblies ([#627][i627])\n-   Fixed errors breaking .NET Remoting on method invoke ([#276][i276])\n-   Fixed PyObject.GetHashCode ([#676][i676])\n-   Fix memory leaks due to spurious handle incrementation ([#691][i691])\n-   Fix spurious assembly loading exceptions from private types ([#703][i703])\n-   Fix inheritance of non-abstract base methods ([#755][i755])\n\n\n## [2.3.0][] - 2017-03-11\n\n### Added\n\n-   Added Code Coverage ([#345][p345])\n-   Added `PySys_SetArgvEx` ([#347][p347])\n-   Added XML Documentation ([#349][p349])\n-   Added `Embedded_Tests` on AppVeyor ([#224][i224])([#353][p353])\n-   Added `Embedded_Tests` on Travis ([#224][i224])([#391][p391])\n-   Added PY3 settings to solution configuration-manager ([#346][p346])\n-   Added `Slack` ([#384][p384])([#383][i383])([#386][p386])\n-   Added function of passing an arbitrary .NET object as the value\n    of an attribute of `PyObject` ([#370][i370])([#373][p373])\n-   Added `Coverity scan` ([#390][i390])\n-   Added `bumpversion` for version control ([#319][i319])([#398][p398])\n-   Added `tox` for local testing ([#345][p345])\n-   Added `requirements.txt`\n-   Added to `PythonEngine` methods `Eval` and `Exec` ([#389][p389])\n-   Added implementations of `ICustomMarshal` ([#407][p407])\n-   Added docker images ([#322][i322])\n-   Added hooks in `pyinstaller` and `cx_freeze` for `pythonnet` ([#66][i66])\n\n### Changed\n\n-   Refactored python `unittests` ([#329][p329])\n-   Refactored python `setup.py` ([#337][p337])\n-   Refactored remaining of Build Directives on `runtime.cs` ([#339][p339])\n-   Refactored `Embedded_Tests` to make easier to write tests ([#369][p369])\n-   Changed `unittests` to `pytest` ([#368][p368])\n-   Upgraded NUnit framework from `2.6.3` to `3.5.0` ([#341][p341])\n-   Downgraded NUnit framework from `3.5.0` to `2.6.4` ([#353][p353])\n-   Upgraded NUnit framework from `2.6.4` to `3.6.0` ([#371][p371])\n-   Unfroze Mono version on Travis ([#345][p345])\n-   Changed `conda.recipe` build to only pull-requests ([#345][p345])\n-   Combine `Py_DEBUG` and `PYTHON_WITH_PYDEBUG` flags ([#362][i362])\n\n### Deprecated\n\n-   Deprecated `RunString` ([#401][i401])\n\n### Fixed\n\n-   Fixed crash during Initialization ([#262][i262])([#343][p343])\n-   Fixed crash during Shutdown ([#365][p365])\n-   Fixed multiple build warnings\n-   Fixed method signature match for Object Type ([#203][i203])([#377][p377])\n-   Fixed outdated version number in AssemblyInfo ([#398][p398])\n-   Fixed wrong version number in `conda.recipe` ([#398][p398])\n-   Fixed fixture location for Python tests and `Embedded_Tests`\n-   Fixed `PythonException` crash during Shutdown ([#400][p400])\n-   Fixed `AppDomain` unload during GC ([#397][i397])([#400][p400])\n-   Fixed `Py_Main` & `PySys_SetArgvEx` `no mem error` on `UCS4/PY3` ([#399][p399])\n-   Fixed `Python.Runtime.dll.config` on macOS ([#120][i120])\n-   Fixed crash on `PythonEngine.Version` ([#413][i413])\n-   Fixed `PythonEngine.PythonPath` issues ([#179][i179])([#414][i414])([#415][p415])\n-   Fixed missing information on 'No method matches given arguments' by adding the method name\n\n### Removed\n\n-   Removed `six` dependency for `unittests` ([#329][p329])\n-   Removed `Mono.Unix` dependency for `UCS4` ([#360][p360])\n-   Removed need for `Python.Runtime.dll.config`\n-   Removed PY32 build option `PYTHON_WITH_WIDE_UNICODE` ([#417][i417])\n\n## [2.2.2][] - 2017-01-29\n\n### Fixed\n\n-   Missing files from packaging ([#336][i336])\n\n## [2.2.1][] - 2017-01-26\n\n-   `v2.2.0` had a release issue on PyPi. Bumped to `v2.2.1`\n\n### Added\n\n-   Python 3.6 support ([#310][p310])\n-   Added `__version__` to module ([#312][p312])\n-   Added `conda` recipe ([#281][p281])\n-   Nuget update on build ([#268][p268])\n-   Added `__cause__` attribute on exception ([#287][p287])\n\n### Changed\n\n-   License to MIT ([#314][p314])\n-   Project clean-up ([#320][p320])\n-   Refactor `#if` directives\n-   Rename Decref/Incref to XDecref/XIncre ([#275][p275])\n-   Remove printing if Decref is called with NULL ([#275][p275])\n\n### Removed\n\n-   Python 2.6 support ([#270][i270])\n-   Python 3.2 support ([#270][i270])\n\n### Fixed\n\n-   Fixed `isinstance` refcount_leak ([#273][p273])\n-   Comparison Operators ([#294][p294])\n-   Improved Linux support ([#300][p300])\n-   Exception pickling ([#286][p286])\n\n## [2.2.0-dev1][] - 2016-09-19\n\n### Changed\n\n-   Switch to C# 6.0 ([#219][p219])\n-   `setup.py` improvements for locating build tools ([#208][p208])\n-   unmanaged exports updated ([#206][p206])\n-   Mono update pinned to 4.2.4.4 ([#233][p233])\n\n### Fixed\n\n-   Fixed relative imports ([#219][p219])\n-   Fixed recursive types ([#250][p250])\n-   Demo fix - stream reading ([#225][p225])\n\n## [2.1.0][] - 2016-04-12\n\n### Added\n\n-   Added Python 3.2 support. ([#78][p78])\n-   Added Python 3.3 support. ([#78][p78])\n-   Added Python 3.4 support. ([#78][p78])\n-   Added Python 3.5 support. ([#163][p163])\n-   Managed types can be sub-classed in Python ([#78][p78])\n-   Uses dynamic objects for cleaner code when embedding Python ([#78][p78])\n\n### Changed\n\n-   Better Linux support (with or without --enable-shared option) ([#78][p78])\n\n### Removed\n\n-   Implicit Type Casting ([#131][i131])\n\n## [2.0.0][] - 2015-06-26\n\n-   Release\n\n## 2.0.0-alpha.2\n\n### Changed\n\n-   First work on Python 2.5 compatibility. The destination version can be\n    set by defining PYTHON24 or PYTHON25. Python 2.6 compatibility is in\n    work.\n\n-   Added VS 2005 solution and project files including a UnitTest\n    configuration which runs the unit test suite.\n\n-   Enhanced unit test suite. All test cases are combined in a single\n    test suite now.\n\n-   Fixed bugs in generics support for all Python versions.\n\n-   Fixed exception bugs for Python 2.5+. When compiled for Python 2.5+ all\n    managed exceptions are based on Python's `exceptions.Exception` class.\n\n-   Added deprecation warnings for importing from `CLR.*` and the CLR module.\n\n-   Implemented support for methods with variable arguments\n    `spam(params object[] egg)`\n\n-   Fixed Mono support by adding a custom marshaler for UCS-4 unicode,\n    fixing a some ref counter bugs and creating a new makefile.mono.\n\n-   Added a standard python extension to load the clr environment.\n    The `src/monoclr/` directory contains additional sample code like a\n    Python binary linked against `libpython2.x.so` and some example code\n    how to embed Mono and PythonNet in a C application.\n\n-   Added yet another python prompt. This time it's a C application that\n    embedds both Python and Mono. It may be useful as an example app for\n    others and I need it to debug a nasty bug.\n\n-   Implemented `ModuleFunctionAttribute` and added\n    `ForbidPythonThreadsAttribute`. The latter is required for module\n    functions which invoke Python methods.\n\n-   Added `clr.setPreload()`, `clr.getPreload()`,\n    `clr.AddReference(\"assembly name\")`, `clr.FindAssembly(\"name\")`\n    and `clr.ListAssemblies(verbose)`. Automatic preloading can be enabled\n    with clr.setPreload/True). Preloading is automatically enabled for\n    interactive Python shells and disabled in all other cases.\n\n-   New Makefile that works for Windows and Mono and autodetects the Python\n    version and UCS 2/4 setting.\n\n-   Added code for Python 2.3. PythonNet can be build for Python 2.3 again\n    but it is not fully supported.\n\n-   Changed the PythonException.Message value so it displays the name of\n    the exception class `Exception` instead of its representation\n    `<type 'exceptions.Exception'>`.\n\n-   Added `Python.Runtime.dll.config`.\n\n## 2.0.0-alpha.1\n\n### Changed\n\n-   Moved the Python for .NET project to Sourceforge and moved version\n    control to Subversion.\n\n-   Removed `CallConvCdecl` attributes and the IL hack that they supported.\n    .NET 2.x now supports `UnmanagedFunctionPointer`, which does the right\n    thing without the hackery required in 1.x. This removes a dependency\n    on ILASM to build the package and better supports Mono (in theory).\n\n-   Refactored import and assembly management machinery. The old `CLR.`\n    syntax for import is deprecated, but still supported until 3.x. The\n    recommended style now is to use `from System import xxx`, etc. We\n    also now support `from X import *` correctly.\n\n-   Implemented a (lowercase) `clr` module to match IronPython for code\n    compatibility. Methods of this module should be used to explicitly\n    load assemblies. Implicit (name-based) assembly loading will still\n    work until 3.x, but it is deprecated.\n\n-   Implemented support for generic types and generic methods using the\n    same patterns and syntax as IronPython. See the documentation for\n    usage details.\n\n-   Many small and large performance improvements, switched to generic\n    collections for some internals, better algorithms for assembly\n    scanning, etc.\n\n-   Fixed an unboxing issue in generated delegate implementation code\n    that affected delegates that return value types.\n\n## [1.0.0][] - 2006-04-08\n\n### Changed\n\n-   Backported the refactored import and assembly management from the 2.x\n    line, mainly to improve the possibility of code-compatibility with\n    IronPython.\n\n## 1.0.0-rc.2\n\n### Changed\n\n-   Changed some uses of Finalize as a static method name that confused the\n    Mono compiler and people reading the code. Note that this may be a\n    breaking change if anyone was calling `PythonEngine.Finalize()`. If so,\n    you should now use `PythonEngine.Shutdown()`.\n\n-   Tweaked assembly lookup to ensure that assemblies can be found in the\n    current working directory, even after changing directories using things\n    like `os.chdir()` from Python.\n\n-   Fixed some incorrect finalizers (thanks to Greg Chapman for the report)\n    that may have caused some threading oddities.\n\n-   Tweaked support for out and ref parameters. If a method has a return\n    type of void and a single ref or out parameter, that parameter will be\n    returned as the result of the method. This matches the current behavior\n    of IronPython and makes it more likely that code can be moved between\n    Python for .NET and IP in the future.\n\n-   Refactored part of the assembly manager to remove a potential case of\n    thread-deadlock in multi-threaded applications.\n\n-   Added a `__str__` method to managed exceptions that returns the Message\n    attribute of the exception and the StackTrace (if available).\n\n## 1.0.0-rc.1\n\n### Changed\n\n-   Implemented a workaround for the fact that exceptions cannot be new-style\n    classes in the CPython interpreter. Managed exceptions can now be raised\n    and caught naturally from Python (hooray!)\n\n-   Implemented support for invoking methods with out and ref parameters.\n    Because there is no real equivalent to these in Python, methods that\n    have out or ref parameters will return a tuple. The tuple will contain\n    the result of the method as its first item, followed by out parameter\n    values in the order of their declaration in the method signature.\n\n-   Fixed a refcount problem that caused a crash when CLR was imported in\n    an existing installed Python interpreter.\n\n-   Added an automatic conversion from Python strings to `byte[]`. This makes\n    it easier to pass `byte[]` data to managed methods (or set properties,\n    etc.) as a Python string without having to write explicit conversion\n    code. Also works for sbyte arrays. Note that `byte` and `sbyte` arrays\n    returned from managed methods or obtained from properties or fields\n    do _not_ get converted to Python strings - they remain instances of\n    `Byte[]` or `SByte[]`.\n\n-   Added conversion of generic Python sequences to object arrays when\n    appropriate (thanks to Mackenzie Straight for the patch).\n\n-   Added a bit of cautionary documentation for embedders, focused on\n    correct handling of the Python global interpreter lock from managed\n    code for code that calls into Python.\n\n-   `PyObject.FromManagedObject` now correctly returns the Python None object\n    if the input is a null reference. Also added a new `AsManagedObject`\n    method to `PyObject`, making it easier to convert a Python-wrapped managed\n    object to the real managed object.\n\n-   Created a simple installer for windows platforms.\n\n## 1.0.0-beta.5\n\n### Changed\n\n-   Refactored and fixed threading and global interpreter lock handling,\n    which was badly broken before. Also added a number of threading and\n    GIL-handling tests.\n\n-   Related to the GIL fixes, added a note to embedders in the README\n    about using the AcquireLock and ReleaseLock methods of the PythonEngine\n    class to manage the GIL.\n\n-   Fixed a problem in `Single <--> float` conversion for cultures that use\n    different decimal symbols than Python.\n\n-   Added a new `ReloadModule` method to the `PythonEngine` class that hooks\n    Python module reloading (`PyImport_ReloadModule`).\n\n-   Added a new `StringAsModule` method to the PythonEngine class that can\n    create a module from a managed string of code.\n\n-   Added a default `__str__` implementation for Python wrappers of managed\n    objects that calls the `ToString` method of the managed object.\n\n## 1.0.0-beta.4\n\n### Changed\n\n-   Fixed a problem that made it impossible to override \"special\" methods\n    like `__getitem__` in subclasses of managed classes. Now the tests all\n    pass, and there is much rejoicing.\n\n-   Managed classes reflected to Python now have an `__doc__` attribute that\n    contains a listing of the class constructor signatures.\n\n-   Fixed a problem that prevented passing null (None) for array arguments.\n\n-   Added a number of new argument conversion tests. Thanks to Laurent\n    Caumont for giving Python for .NET a good workout with managed DirectX.\n\n-   Updated the bundled C Python runtime and libraries to Python 2.4. The\n    current release is known to also run with Python 2.3. It is known\n    _not_ to work with older versions due to changes in CPython type\n    object structure.\n\n-   Mostly fixed the differences in the way that import works depending\n    on whether you are using the bundled interpreter or an existing Python\n    interpreter. The hack I used makes import work uniformly for imports\n    done in Python modules. Unfortunately, there is still a limitation\n    when using the interpreter interactively: you need to do `import CLR`\n    first before importing any sub-names when running with an existing\n    Python interpreter.\n\n    The reason is that the first import of `CLR` installs the CLR import\n    hook, but for an existing interpreter the standard importer is still\n    in control for the duration of that first import, so sub-names won't\n    be found until the next import, which will use the now-installed hook.\n\n-   Added support to directly iterate over objects that support IEnumerator\n    (as well as IEnumerable). Thanks to Greg Chapman for prodding me ;)\n\n-   Added a section to the README dealing with rebuilding Python for .NET\n    against other CPython versions.\n\n-   Fixed a problem with accessing properties when only the interface for\n    an object is known. For example, `ICollection(ob).Count` failed because\n    Python for .NET mistakenly decided that Count was abstract.\n\n-   Fixed some problems with how COM-based objects are exposed and how\n    members of inherited interfaces are exposed. Thanks to Bruce Dodson\n    for patches on this.\n\n-   Changed the Runtime class to use a const string to target the\n    appropriate CPython dll in DllImport attributes. Now you only\n    have to change one line to target a new Python version.\n\n## 1.0.0-beta.3\n\n### Changed\n\n-   A dumb bug that could cause a crash on startup on some platforms was\n    fixed. Decided to update the beta for this, as a number of people\n    were running into the problem.\n\n## 1.0.0-beta.2\n\n### Changed\n\n-   Exceptions raised as a result of getting or setting properties were\n    not very helpful (target invokation exception). This has been changed\n    to pass through the inner exception the way that methods do, which is\n    much more likely to be the real exception that caused the problem.\n\n-   Events were refactored as the implementation was based on some bad\n    assumptions. As a result, subscription and unsubscription now works\n    correctly. A change from beta 1 is that event objects are no longer\n    directly callable - this was not appropriate, since the internal\n    implementation of an event is private and cant work reliably. Instead,\n    you should the appropriate `OnSomeEvent` method published by a class\n    to fire an event.\n\n-   The distribution did not include the key file, making it a pain for\n    people to build from source. Added the key file to the distribution\n    buildout for beta 2.\n\n-   Assemblies can now be found and loaded if they are on the PYTHONPATH.\n    Previously only the appbase and the GAC were checked. The system now\n    checks PYTHONPATH first, then the appbase, then the GAC.\n\n-   Fixed a bug in constructor invokation during object instantiation.\n\n## 1.0.0-beta.1\n\n### Changed\n\n-   Added the baseline of the managed embedding API. Some of the details\n    are still subject to change based on some real-world use and feedback.\n\n    The embedding API is based on the `PyObject` class, along with a number\n    of specific `PyDict`, `PyList`, (etc.) classes that expose the respective\n    interfaces of the built-in Python types. The basic structure and usage\n    is intended be familar to anyone who has used Python / C++ wrapper\n    libraries like CXX or Boost.\n\n-   Started integrating NUnit2 to support unit tests for the embedding\n    layer - still need to add the embedding tests (many already exist,\n    but were written for an older version of NUnit).\n\n-   Added Python iteration protocol support for arrays and managed objects\n    that implement IEnumerable. This means that you can now use the Python\n    idiom `for item in object:` on any array or IEnumerable object.\n\n-   Added automatic conversion from Python sequence types to managed array\n    types. This means, for example, that you can now call a managed method\n    like AddRange that expects an array with any Python object that supports\n    the Python sequence protocol, provided the items of the sequence are\n    convertible to the item type of the managed array.\n\n-   Added new demo scripts, mostly more substantial winforms examples.\n\n-   Finished the unit tests for event support, and fixed lots of problems\n    with events and delegates as a result. This is one of the trickier\n    parts of the integration layer, and there is good coverage of these\n    in the unit tests now.\n\n-   Did a fair amount of profiling with an eval version of ANTS (which is\n    quite nice, BTW) and made a few changes as a result.\n\n-   Type management was refactored, fixing the issue that caused segfaults\n    when GC was enabled. Unit tests, stress tests and demo apps now all run\n    nicely with Python GC enabled. There are one or two things left to fix,\n    but the fixes should not have any user impact.\n\n-   Changed to base PythonNet on Python 2.3.2. This is considered the most\n    stable release, and a good 25 - 30% faster as well.\n\n-   Added a new `CLR.dll` that acts as an extension module that allows an\n    existing unmodified Python 2.3 installation to simply `import CLR` to\n    bootstrap the managed integration layer.\n\n-   A bug was causing managed methods to only expose overloads declared in\n    a particular class, hiding inherited overloads of the same name. Fixed\n    the bug and added some unit tests.\n\n-   Added a virtual `__doc__` attribute to managed methods that contains\n    the signature of the method. This also means that the Python `help`\n    function now provides signature info when used on a managed class.\n\n-   Calling managed methods and events `unbound` (passing the instance as\n    the first argument) now works. There is a caveat for methods - if a\n    class declares both static and instance methods with the same name,\n    it is not possible to call that instance method unbound (the static\n    method will always be called).\n\n-   Overload selection for overloaded methods is now much better and uses\n    a method resolution algorithm similar to that used by Jython.\n\n-   Changed the managed python.exe wrapper to run as an STA thread, which\n    seems to be more compatible with winforms apps. This needs a better\n    solution long-term. One possibility would be a command line switch\n    so that -sta or -mta could control the python.exe apartment state.\n\n-   Added support for the Python boolean type (True, False). Bool values\n    now appear as True or False to Python.\n\n## 1.0.0-alpha.2\n\n### Changed\n\n-   Added a Mono makefile. Thanks to Camilo Uribe for help in testing and\n    working out problems on Mono. Note that it not currently possible to\n    build PythonNet using mono, due to the use of some IL attributes that\n    the mono assembler / disassembler doesn't support yet.\n\n-   Preliminary tests show that PythonNet _does_ actually run under mono,\n    though the test suite bombs out before the end with an \"out of memory\"\n    error from the mono runtime. It's just a guess at this point, but I\n    suspect there may be a limited pool for allocating certain reflection\n    structures, and Python uses the reflection infrastructure quite heavily.\n\n-   Removed decoys like the non-working embedding APIs; lots of internal\n    refactoring.\n\n-   Implemented indexer support. Managed instances that implement indexers\n    can now be used naturally from Python (e.g. `someobject[0]`).\n\n-   Implemented sequence protocol support for managed arrays.\n\n-   Implemented basic thread state management; calls to managed methods\n    no longer block Python. I won't go so far as to say the thread\n    choreography is \"finished\", as I don't have a comprehensive set of\n    tests to back that up yet (and it will take some work to write a\n    sufficiently large and evil set of tests).\n\n-   Fixed a bug that caused conversions of managed strings to PyUnicode to\n    produce mangled values in certain situations.\n\n-   Fixed a number of problems related to subclassing a managed class,\n    including the fact that it didn't work :)\n\n-   Fixed all of the bugs that were causing tests to fail. This release\n    contains all new bugs and new failing tests. Progress! :)\n\n## 1.0.0-alpha.1\n\n### Added\n\n-   Initial (mostly) working experimental release.\n\n[keep a changelog]: http://keepachangelog.com/\n\n[semantic versioning]: http://semver.org/\n\n[unreleased]: ../../compare/v3.0.1...HEAD\n\n[2.3.0]: ../../compare/v2.2.2...v2.3.0\n\n[2.2.2]: ../../compare/v2.2.1...v2.2.2\n\n[2.2.1]: ../../compare/v2.2.0-dev1...v2.2.1\n\n[2.2.0-dev1]: ../../compare/v2.1.0...v2.2.0-dev1\n\n[2.1.0]: ../../compare/v2.0.0...v2.1.0\n\n[2.0.0]: ../../compare/1.0...v2.0.0\n\n[1.0.0]: https://github.com/pythonnet/pythonnet/releases/tag/1.0\n\n[i714]: https://github.com/pythonnet/pythonnet/issues/714\n[i608]: https://github.com/pythonnet/pythonnet/issues/608\n[i443]: https://github.com/pythonnet/pythonnet/issues/443\n[p690]: https://github.com/pythonnet/pythonnet/pull/690\n[i475]: https://github.com/pythonnet/pythonnet/issues/475\n[p693]: https://github.com/pythonnet/pythonnet/pull/693\n[i432]: https://github.com/pythonnet/pythonnet/issues/432\n[p433]: https://github.com/pythonnet/pythonnet/pull/433\n[p460]: https://github.com/pythonnet/pythonnet/pull/460\n[p461]: https://github.com/pythonnet/pythonnet/pull/461\n[p433]: https://github.com/pythonnet/pythonnet/pull/433\n[i434]: https://github.com/pythonnet/pythonnet/issues/434\n[i481]: https://github.com/pythonnet/pythonnet/issues/481\n[i486]: https://github.com/pythonnet/pythonnet/issues/486\n[i492]: https://github.com/pythonnet/pythonnet/issues/492\n[i495]: https://github.com/pythonnet/pythonnet/issues/495\n[p607]: https://github.com/pythonnet/pythonnet/pull/607\n[i627]: https://github.com/pythonnet/pythonnet/issues/627\n[i276]: https://github.com/pythonnet/pythonnet/issues/276\n[i676]: https://github.com/pythonnet/pythonnet/issues/676\n[p345]: https://github.com/pythonnet/pythonnet/pull/345\n[p347]: https://github.com/pythonnet/pythonnet/pull/347\n[p349]: https://github.com/pythonnet/pythonnet/pull/349\n[i224]: https://github.com/pythonnet/pythonnet/issues/224\n[p353]: https://github.com/pythonnet/pythonnet/pull/353\n[p391]: https://github.com/pythonnet/pythonnet/pull/391\n[p346]: https://github.com/pythonnet/pythonnet/pull/346\n[p384]: https://github.com/pythonnet/pythonnet/pull/384\n[i383]: https://github.com/pythonnet/pythonnet/issues/383\n[p386]: https://github.com/pythonnet/pythonnet/pull/386\n[i370]: https://github.com/pythonnet/pythonnet/issues/370\n[p373]: https://github.com/pythonnet/pythonnet/pull/373\n[i390]: https://github.com/pythonnet/pythonnet/issues/390\n[i319]: https://github.com/pythonnet/pythonnet/issues/319\n[p398]: https://github.com/pythonnet/pythonnet/pull/398\n[p345]: https://github.com/pythonnet/pythonnet/pull/345\n[p389]: https://github.com/pythonnet/pythonnet/pull/389\n[p407]: https://github.com/pythonnet/pythonnet/pull/407\n[i322]: https://github.com/pythonnet/pythonnet/issues/322\n[i66]: https://github.com/pythonnet/pythonnet/issues/66\n[p329]: https://github.com/pythonnet/pythonnet/pull/329\n[p337]: https://github.com/pythonnet/pythonnet/pull/337\n[p339]: https://github.com/pythonnet/pythonnet/pull/339\n[p369]: https://github.com/pythonnet/pythonnet/pull/369\n[p368]: https://github.com/pythonnet/pythonnet/pull/368\n[p341]: https://github.com/pythonnet/pythonnet/pull/341\n[p353]: https://github.com/pythonnet/pythonnet/pull/353\n[p371]: https://github.com/pythonnet/pythonnet/pull/371\n[p345]: https://github.com/pythonnet/pythonnet/pull/345\n[i362]: https://github.com/pythonnet/pythonnet/issues/362\n[i401]: https://github.com/pythonnet/pythonnet/issues/401\n[i262]: https://github.com/pythonnet/pythonnet/issues/262\n[p343]: https://github.com/pythonnet/pythonnet/pull/343\n[p365]: https://github.com/pythonnet/pythonnet/pull/365\n[i203]: https://github.com/pythonnet/pythonnet/issues/203\n[p377]: https://github.com/pythonnet/pythonnet/pull/377\n[p398]: https://github.com/pythonnet/pythonnet/pull/398\n[p400]: https://github.com/pythonnet/pythonnet/pull/400\n[i397]: https://github.com/pythonnet/pythonnet/issues/397\n[p399]: https://github.com/pythonnet/pythonnet/pull/399\n[i120]: https://github.com/pythonnet/pythonnet/issues/120\n[i413]: https://github.com/pythonnet/pythonnet/issues/413\n[i179]: https://github.com/pythonnet/pythonnet/issues/179\n[i414]: https://github.com/pythonnet/pythonnet/issues/414\n[p415]: https://github.com/pythonnet/pythonnet/pull/415\n[p329]: https://github.com/pythonnet/pythonnet/pull/329\n[p360]: https://github.com/pythonnet/pythonnet/pull/360\n[i417]: https://github.com/pythonnet/pythonnet/issues/417\n[i336]: https://github.com/pythonnet/pythonnet/issues/336\n[p310]: https://github.com/pythonnet/pythonnet/pull/310\n[p312]: https://github.com/pythonnet/pythonnet/pull/312\n[p281]: https://github.com/pythonnet/pythonnet/pull/281\n[p268]: https://github.com/pythonnet/pythonnet/pull/268\n[p287]: https://github.com/pythonnet/pythonnet/pull/287\n[p314]: https://github.com/pythonnet/pythonnet/pull/314\n[p320]: https://github.com/pythonnet/pythonnet/pull/320\n[p275]: https://github.com/pythonnet/pythonnet/pull/275\n[i270]: https://github.com/pythonnet/pythonnet/issues/270\n[p273]: https://github.com/pythonnet/pythonnet/pull/273\n[p294]: https://github.com/pythonnet/pythonnet/pull/294\n[p300]: https://github.com/pythonnet/pythonnet/pull/300\n[p286]: https://github.com/pythonnet/pythonnet/pull/286\n[p219]: https://github.com/pythonnet/pythonnet/pull/219\n[p208]: https://github.com/pythonnet/pythonnet/pull/208\n[p206]: https://github.com/pythonnet/pythonnet/pull/206\n[p233]: https://github.com/pythonnet/pythonnet/pull/233\n[p219]: https://github.com/pythonnet/pythonnet/pull/219\n[p250]: https://github.com/pythonnet/pythonnet/pull/250\n[p225]: https://github.com/pythonnet/pythonnet/pull/225\n[p78]: https://github.com/pythonnet/pythonnet/pull/78\n[p163]: https://github.com/pythonnet/pythonnet/pull/163\n[p625]: https://github.com/pythonnet/pythonnet/pull/625\n[i131]: https://github.com/pythonnet/pythonnet/issues/131\n[p531]: https://github.com/pythonnet/pythonnet/pull/531\n[i755]: https://github.com/pythonnet/pythonnet/pull/755\n[p534]: https://github.com/pythonnet/pythonnet/pull/534\n[i449]: https://github.com/pythonnet/pythonnet/issues/449\n[i1342]: https://github.com/pythonnet/pythonnet/issues/1342\n[i238]: https://github.com/pythonnet/pythonnet/issues/238\n[i1481]: https://github.com/pythonnet/pythonnet/issues/1481\n[i1672]: https://github.com/pythonnet/pythonnet/pull/1672\n[i2311]: https://github.com/pythonnet/pythonnet/issues/2311\n[i1977]: https://github.com/pythonnet/pythonnet/issues/1977\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.1826171875,
          "content": "# How to contribute\n\nPython.NET is developed and maintained by unpaid community members so well\nwritten, documented and tested pull requests are encouraged.\n\nBy submitting a pull request for this project, you agree to license your\ncontribution under the MIT license to this project.\n\nThis project has adopted the code of conduct defined by the Contributor\nCovenant to clarify expected behavior in our community. For more information\nsee the [.NET Foundation Code of Conduct](https://dotnetfoundation.org/code-of-conduct).\n\n## Getting Started\n\n-   Make sure you have a [GitHub account](https://github.com/signup/free)\n-   Submit a ticket for your issue, assuming one does not already exist.\n    -   Clearly describe the issue including steps to reproduce the bug.\n    -   Include what Python version and operating system you are using.\n-   Fork the repository on GitHub\n\n## Making Changes\n\n-   Create a topic branch from where you want to base your work.\n    -   This is usually the master branch.\n    -   Only target release branches if you are certain your fix must be on\n        that branch.\n    -   To quickly create a topic branch based on master;\n        `git checkout -b fix/develop/my_contribution master`.\n        Please avoid working directly on the `master` branch for anything\n        other than trivial changes.\n-   Make commits of logical units.\n-   Check for unnecessary whitespace with `git diff --check` before committing.\n-   Make sure your commit messages are in the proper format.\n-   Make sure you have added the necessary tests for your changes.\n-   Run _all_ the tests to assure nothing else was accidentally broken.\n\n## Submitting Changes\n\n-   Merge the topic branch into master and push to your fork of the repository.\n-   Submit a pull request to the repository in the pythonnet organization.\n-   After feedback has been given we expect responses within two weeks. After\n    two weeks we may close the pull request if it isn't showing any activity.\n\n# Additional Resources\n\n-   [General GitHub documentation](https://help.github.com/)\n-   [GitHub pull request documentation](https://help.github.com/send-pull-requests/)\n-   [.NET Foundation Code of Conduct](https://dotnetfoundation.org/about/code-of-conduct)\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 1.18359375,
          "content": "<?xml version=\"1.0\"?>\n<Project>\n  <PropertyGroup>\n    <AssemblyCopyright>Copyright (c) 2006-2022 The Contributors of the Python.NET Project</AssemblyCopyright>\n    <AssemblyCompany>pythonnet</AssemblyCompany>\n    <AssemblyProduct>Python.NET</AssemblyProduct>\n    <LangVersion>10.0</LangVersion>\n    <IsPackable>false</IsPackable>\n    <FullVersion>$([System.IO.File]::ReadAllText(\"$(MSBuildThisFileDirectory)version.txt\").Trim())</FullVersion>\n    <VersionPrefix>$(FullVersion.Split('-', 2)[0])</VersionPrefix>\n    <VersionSuffix Condition=\"$(FullVersion.Contains('-'))\">$(FullVersion.Split('-', 2)[1])</VersionSuffix>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.CSharp\" Version=\"4.7.0\" />\n    <PackageReference Include=\"Microsoft.Net.Compilers.Toolset\" Version=\"4.0.1\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"NonCopyableAnalyzer\" Version=\"0.7.0\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n  </ItemGroup>\n</Project>\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.078125,
          "content": "MIT License\n\nCopyright (c) 2006-2021 the contributors of the Python.NET project\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.15234375,
          "content": "graft src/runtime\nprune src/runtime/obj\nprune src/runtime/bin\ninclude src/pythonnet.snk\ninclude Directory.Build.*\ninclude pythonnet.sln\ninclude version.txt\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 5.2939453125,
          "content": "pythonnet - Python.NET\n===========================\n\n|Join the chat at https://gitter.im/pythonnet/pythonnet| |stackexchange shield|\n\n|gh shield|\n\n|license shield|\n\n|pypi package version| |conda-forge version| |python supported shield|\n\n|nuget preview shield| |nuget release shield|\n\nPython.NET is a package that gives Python programmers nearly\nseamless integration with the .NET Common Language Runtime (CLR) and\nprovides a powerful application scripting tool for .NET developers. It\nallows Python code to interact with the CLR, and may also be used to\nembed Python into a .NET application.\n\nCalling .NET code from Python\n-----------------------------\n\nPython.NET allows CLR namespaces to be treated essentially as Python packages.\n\n.. code-block:: python\n\n   import clr\n   from System import String\n   from System.Collections import *\n\nTo load an assembly, use the ``AddReference`` function in the ``clr``\nmodule:\n\n.. code-block:: python\n\n   import clr\n   clr.AddReference(\"System.Windows.Forms\")\n   from System.Windows.Forms import Form\n\nBy default, Mono will be used on Linux and macOS, .NET Framework on Windows. For\ndetails on the loading of different runtimes, please refer to the documentation.\n\n.NET Core\n~~~~~~~~~\n\nIf .NET Core is installed in a default location or the ``dotnet`` CLI tool is on\nthe ``PATH``, loading it instead of the default (Mono/.NET Framework) runtime\njust requires setting either the environment variable\n``PYTHONNET_RUNTIME=coreclr`` or calling ``pythonnet.load`` explicitly:\n\n.. code-block:: python\n\n   from pythonnet import load\n   load(\"coreclr\")\n\n   import clr\n\n\nEmbedding Python in .NET\n------------------------\n\n-  You must set ``Runtime.PythonDLL`` property or ``PYTHONNET_PYDLL`` environment variable\n   starting with version 3.0, otherwise you will receive ``BadPythonDllException``\n   (internal, derived from ``MissingMethodException``) upon calling ``Initialize``.\n   Typical values are ``python38.dll`` (Windows), ``libpython3.8.dylib`` (Mac),\n   ``libpython3.8.so`` (most other Unix-like operating systems).\n-  Then call ``PythonEngine.Initialize()``. If you plan to use Python objects from\n   multiple threads, also call ``PythonEngine.BeginAllowThreads()``.\n-  All calls to python should be inside a\n   ``using (Py.GIL()) {/* Your code here */}`` block.\n-  Import python modules using ``dynamic mod = Py.Import(\"mod\")``, then\n   you can call functions as normal, eg ``mod.func(args)``.\n-  Use ``mod.func(args, Py.kw(\"keywordargname\", keywordargvalue))`` or\n   ``mod.func(args, keywordargname: keywordargvalue)`` to apply keyword\n   arguments.\n-  All python objects should be declared as ``dynamic`` type.\n-  Mathematical operations involving python and literal/managed types\n   must have the python object first, eg. ``np.pi * 2`` works,\n   ``2 * np.pi`` doesn't.\n\nExample\n~~~~~~~\n\n.. code-block:: csharp\n\n   static void Main(string[] args)\n   {\n       PythonEngine.Initialize();\n       using (Py.GIL())\n       {\n           dynamic np = Py.Import(\"numpy\");\n           Console.WriteLine(np.cos(np.pi * 2));\n\n           dynamic sin = np.sin;\n           Console.WriteLine(sin(5));\n\n           double c = (double)(np.cos(5) + sin(5));\n           Console.WriteLine(c);\n\n           dynamic a = np.array(new List<float> { 1, 2, 3 });\n           Console.WriteLine(a.dtype);\n\n           dynamic b = np.array(new List<float> { 6, 5, 4 }, dtype: np.int32);\n           Console.WriteLine(b.dtype);\n\n           Console.WriteLine(a * b);\n           Console.ReadKey();\n       }\n   }\n\nOutput:\n\n.. code:: csharp\n\n   1.0\n   -0.958924274663\n   -0.6752620892\n   float64\n   int32\n   [  6.  10.  12.]\n\n\n\nResources\n---------\n\nInformation on installation, FAQ, troubleshooting, debugging, and\nprojects using pythonnet can be found in the Wiki:\n\nhttps://github.com/pythonnet/pythonnet/wiki\n\nMailing list\n    https://mail.python.org/mailman/listinfo/pythondotnet\nChat\n    https://gitter.im/pythonnet/pythonnet\n\n.NET Foundation\n---------------\nThis project is supported by the `.NET Foundation <https://dotnetfoundation.org>`_.\n\n.. |Join the chat at https://gitter.im/pythonnet/pythonnet| image:: https://badges.gitter.im/pythonnet/pythonnet.svg\n   :target: https://gitter.im/pythonnet/pythonnet?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n.. |license shield| image:: https://img.shields.io/badge/license-MIT-blue.svg?maxAge=3600\n   :target: ./LICENSE\n.. |pypi package version| image:: https://img.shields.io/pypi/v/pythonnet.svg\n   :target: https://pypi.python.org/pypi/pythonnet\n.. |python supported shield| image:: https://img.shields.io/pypi/pyversions/pythonnet.svg\n   :target: https://pypi.python.org/pypi/pythonnet\n.. |stackexchange shield| image:: https://img.shields.io/badge/StackOverflow-python.net-blue.svg\n   :target: http://stackoverflow.com/questions/tagged/python.net\n.. |conda-forge version| image:: https://img.shields.io/conda/vn/conda-forge/pythonnet.svg\n   :target: https://anaconda.org/conda-forge/pythonnet\n.. |nuget preview shield| image:: https://img.shields.io/nuget/vpre/pythonnet\n   :target: https://www.nuget.org/packages/pythonnet/\n.. |nuget release shield| image:: https://img.shields.io/nuget/v/pythonnet\n   :target: https://www.nuget.org/packages/pythonnet/\n.. |gh shield| image:: https://github.com/pythonnet/pythonnet/workflows/GitHub%20Actions/badge.svg\n   :target: https://github.com/pythonnet/pythonnet/actions?query=branch%3Amaster\n"
        },
        {
          "name": "clr.py",
          "type": "blob",
          "size": 0.09375,
          "content": "\"\"\"\nLegacy Python.NET loader for backwards compatibility\n\"\"\"\n\nfrom pythonnet import load\nload()\n"
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.6611328125,
          "content": "[build-system]\nrequires = [\"setuptools>=61\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"pythonnet\"\ndescription = \".NET and Mono integration for Python\"\nlicense = {text = \"MIT\"}\n\nreadme = \"README.rst\"\n\ndependencies = [\n    \"clr_loader>=0.2.7,<0.3.0\"\n]\n\nrequires-python = \">=3.7, <3.14\"\n\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Programming Language :: C#\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.7\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: 3.13\",\n    \"Operating System :: Microsoft :: Windows\",\n    \"Operating System :: POSIX :: Linux\",\n    \"Operating System :: MacOS :: MacOS X\",\n]\n\ndynamic = [\"version\"]\n\n[dependency-groups]\ndev = [\n    \"pytest >= 6\",\n    \"find_libpython >= 0.3.0\",\n    \"numpy >=2 ; python_version >= '3.10'\",\n    \"numpy <2 ; python_version < '3.10'\",\n    \"psutil\"\n]\n\n[[project.authors]]\nname = \"The Contributors of the Python.NET Project\"\nemail = \"pythonnet@python.org\"\n\n[project.urls]\nHomepage = \"https://pythonnet.github.io/\"\nSources = \"https://github.com/pythonnet/pythonnet\"\n\n[tool.setuptools]\nzip-safe = false\npy-modules = [\"clr\"]\nlicense-files = []\n\n[tool.setuptools.dynamic.version]\nfile = \"version.txt\"\n\n[tool.setuptools.packages.find]\ninclude = [\"pythonnet*\"]\nexclude = [\".gitignore\"]\n\n[tool.pytest.ini_options]\nxfail_strict = true\ntestpaths = [\n    \"tests\"\n]\n"
        },
        {
          "name": "pythonnet.sln",
          "type": "blob",
          "size": 12.986328125,
          "content": "Microsoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.0.31912.275\nMinimumVisualStudioVersion = 15.0.26124.0\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Python.Runtime\", \"src\\runtime\\Python.Runtime.csproj\", \"{4E8C8FE2-0FB8-4517-B2D9-5FB2D5FC849B}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Python.EmbeddingTest\", \"src\\embed_tests\\Python.EmbeddingTest.csproj\", \"{819E089B-4770-400E-93C6-4F7A35F0EA12}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Python.Test\", \"src\\testing\\Python.Test.csproj\", \"{14EF9518-5BB7-4F83-8686-015BD2CC788E}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Python.PerformanceTests\", \"src\\perf_tests\\Python.PerformanceTests.csproj\", \"{4F2EA4A1-7ECA-48B5-8077-7A3C366F9931}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Python.DomainReloadTests\", \"tests\\domain_tests\\Python.DomainReloadTests.csproj\", \"{F2FB6DA3-318E-4F30-9A1F-932C667E38C5}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Repo\", \"Repo\", \"{441A0123-F4C6-4EE4-9AEE-315FD79BE2D5}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.editorconfig = .editorconfig\n\t\t.gitignore = .gitignore\n\t\tCHANGELOG.md = CHANGELOG.md\n\t\tLICENSE = LICENSE\n\t\tREADME.rst = README.rst\n\t\tversion.txt = version.txt\n\tEndProjectSection\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"CI\", \"CI\", \"{D301657F-5EAF-4534-B280-B858D651B2E5}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.github\\workflows\\ARM.yml = .github\\workflows\\ARM.yml\n\t\t.github\\workflows\\main.yml = .github\\workflows\\main.yml\n\t\t.github\\workflows\\nuget-preview.yml = .github\\workflows\\nuget-preview.yml\n\tEndProjectSection\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{57F5D701-F265-4736-A5A2-07249E7A4DA3}\"\n\tProjectSection(SolutionItems) = preProject\n\t\tsetup.py = setup.py\n\tEndProjectSection\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Tools\", \"Tools\", \"{BC426F42-8494-4AA5-82C9-5109ACD97BD1}\"\n\tProjectSection(SolutionItems) = preProject\n\t\ttools\\geninterop\\geninterop.py = tools\\geninterop\\geninterop.py\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Python.PythonTestsRunner\", \"src\\python_tests_runner\\Python.PythonTestsRunner.csproj\", \"{35CBBDEB-FC07-4D04-9D3E-F88FC180110B}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Build\", \"Build\", \"{142A6752-C2C2-4F95-B982-193418001B65}\"\n\tProjectSection(SolutionItems) = preProject\n\t\tDirectory.Build.props = Directory.Build.props\n\tEndProjectSection\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tDebug|x64 = Debug|x64\n\t\tDebug|x86 = Debug|x86\n\t\tRelease|Any CPU = Release|Any CPU\n\t\tRelease|x64 = Release|x64\n\t\tRelease|x86 = Release|x86\n\t\tTraceAlloc|Any CPU = TraceAlloc|Any CPU\n\t\tTraceAlloc|x64 = TraceAlloc|x64\n\t\tTraceAlloc|x86 = TraceAlloc|x86\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{4E8C8FE2-0FB8-4517-B2D9-5FB2D5FC849B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{4E8C8FE2-0FB8-4517-B2D9-5FB2D5FC849B}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{4E8C8FE2-0FB8-4517-B2D9-5FB2D5FC849B}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{4E8C8FE2-0FB8-4517-B2D9-5FB2D5FC849B}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{4E8C8FE2-0FB8-4517-B2D9-5FB2D5FC849B}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{4E8C8FE2-0FB8-4517-B2D9-5FB2D5FC849B}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{4E8C8FE2-0FB8-4517-B2D9-5FB2D5FC849B}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{4E8C8FE2-0FB8-4517-B2D9-5FB2D5FC849B}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{4E8C8FE2-0FB8-4517-B2D9-5FB2D5FC849B}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{4E8C8FE2-0FB8-4517-B2D9-5FB2D5FC849B}.Release|x64.Build.0 = Release|Any CPU\n\t\t{4E8C8FE2-0FB8-4517-B2D9-5FB2D5FC849B}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{4E8C8FE2-0FB8-4517-B2D9-5FB2D5FC849B}.Release|x86.Build.0 = Release|Any CPU\n\t\t{4E8C8FE2-0FB8-4517-B2D9-5FB2D5FC849B}.TraceAlloc|Any CPU.ActiveCfg = TraceAlloc|Any CPU\n\t\t{4E8C8FE2-0FB8-4517-B2D9-5FB2D5FC849B}.TraceAlloc|Any CPU.Build.0 = TraceAlloc|Any CPU\n\t\t{4E8C8FE2-0FB8-4517-B2D9-5FB2D5FC849B}.TraceAlloc|x64.ActiveCfg = Debug|Any CPU\n\t\t{4E8C8FE2-0FB8-4517-B2D9-5FB2D5FC849B}.TraceAlloc|x64.Build.0 = Debug|Any CPU\n\t\t{4E8C8FE2-0FB8-4517-B2D9-5FB2D5FC849B}.TraceAlloc|x86.ActiveCfg = Debug|Any CPU\n\t\t{4E8C8FE2-0FB8-4517-B2D9-5FB2D5FC849B}.TraceAlloc|x86.Build.0 = Debug|Any CPU\n\t\t{E6B01706-00BA-4144-9029-186AC42FBE9A}.Debug|Any CPU.ActiveCfg = Debug|x64\n\t\t{E6B01706-00BA-4144-9029-186AC42FBE9A}.Debug|Any CPU.Build.0 = Debug|x64\n\t\t{E6B01706-00BA-4144-9029-186AC42FBE9A}.Debug|x64.ActiveCfg = Debug|x64\n\t\t{E6B01706-00BA-4144-9029-186AC42FBE9A}.Debug|x64.Build.0 = Debug|x64\n\t\t{E6B01706-00BA-4144-9029-186AC42FBE9A}.Debug|x86.ActiveCfg = Debug|x86\n\t\t{E6B01706-00BA-4144-9029-186AC42FBE9A}.Debug|x86.Build.0 = Debug|x86\n\t\t{E6B01706-00BA-4144-9029-186AC42FBE9A}.Release|Any CPU.ActiveCfg = Release|x64\n\t\t{E6B01706-00BA-4144-9029-186AC42FBE9A}.Release|Any CPU.Build.0 = Release|x64\n\t\t{E6B01706-00BA-4144-9029-186AC42FBE9A}.Release|x64.ActiveCfg = Release|x64\n\t\t{E6B01706-00BA-4144-9029-186AC42FBE9A}.Release|x64.Build.0 = Release|x64\n\t\t{E6B01706-00BA-4144-9029-186AC42FBE9A}.Release|x86.ActiveCfg = Release|x86\n\t\t{E6B01706-00BA-4144-9029-186AC42FBE9A}.Release|x86.Build.0 = Release|x86\n\t\t{E6B01706-00BA-4144-9029-186AC42FBE9A}.TraceAlloc|Any CPU.ActiveCfg = Debug|x64\n\t\t{E6B01706-00BA-4144-9029-186AC42FBE9A}.TraceAlloc|Any CPU.Build.0 = Debug|x64\n\t\t{E6B01706-00BA-4144-9029-186AC42FBE9A}.TraceAlloc|x64.ActiveCfg = Debug|x64\n\t\t{E6B01706-00BA-4144-9029-186AC42FBE9A}.TraceAlloc|x64.Build.0 = Debug|x64\n\t\t{E6B01706-00BA-4144-9029-186AC42FBE9A}.TraceAlloc|x86.ActiveCfg = Debug|x86\n\t\t{E6B01706-00BA-4144-9029-186AC42FBE9A}.TraceAlloc|x86.Build.0 = Debug|x86\n\t\t{819E089B-4770-400E-93C6-4F7A35F0EA12}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{819E089B-4770-400E-93C6-4F7A35F0EA12}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{819E089B-4770-400E-93C6-4F7A35F0EA12}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{819E089B-4770-400E-93C6-4F7A35F0EA12}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{819E089B-4770-400E-93C6-4F7A35F0EA12}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{819E089B-4770-400E-93C6-4F7A35F0EA12}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{819E089B-4770-400E-93C6-4F7A35F0EA12}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{819E089B-4770-400E-93C6-4F7A35F0EA12}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{819E089B-4770-400E-93C6-4F7A35F0EA12}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{819E089B-4770-400E-93C6-4F7A35F0EA12}.Release|x64.Build.0 = Release|Any CPU\n\t\t{819E089B-4770-400E-93C6-4F7A35F0EA12}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{819E089B-4770-400E-93C6-4F7A35F0EA12}.Release|x86.Build.0 = Release|Any CPU\n\t\t{819E089B-4770-400E-93C6-4F7A35F0EA12}.TraceAlloc|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{819E089B-4770-400E-93C6-4F7A35F0EA12}.TraceAlloc|Any CPU.Build.0 = Debug|Any CPU\n\t\t{819E089B-4770-400E-93C6-4F7A35F0EA12}.TraceAlloc|x64.ActiveCfg = Debug|Any CPU\n\t\t{819E089B-4770-400E-93C6-4F7A35F0EA12}.TraceAlloc|x64.Build.0 = Debug|Any CPU\n\t\t{819E089B-4770-400E-93C6-4F7A35F0EA12}.TraceAlloc|x86.ActiveCfg = Debug|Any CPU\n\t\t{819E089B-4770-400E-93C6-4F7A35F0EA12}.TraceAlloc|x86.Build.0 = Debug|Any CPU\n\t\t{14EF9518-5BB7-4F83-8686-015BD2CC788E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{14EF9518-5BB7-4F83-8686-015BD2CC788E}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{14EF9518-5BB7-4F83-8686-015BD2CC788E}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{14EF9518-5BB7-4F83-8686-015BD2CC788E}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{14EF9518-5BB7-4F83-8686-015BD2CC788E}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{14EF9518-5BB7-4F83-8686-015BD2CC788E}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{14EF9518-5BB7-4F83-8686-015BD2CC788E}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{14EF9518-5BB7-4F83-8686-015BD2CC788E}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{14EF9518-5BB7-4F83-8686-015BD2CC788E}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{14EF9518-5BB7-4F83-8686-015BD2CC788E}.Release|x64.Build.0 = Release|Any CPU\n\t\t{14EF9518-5BB7-4F83-8686-015BD2CC788E}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{14EF9518-5BB7-4F83-8686-015BD2CC788E}.Release|x86.Build.0 = Release|Any CPU\n\t\t{14EF9518-5BB7-4F83-8686-015BD2CC788E}.TraceAlloc|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{14EF9518-5BB7-4F83-8686-015BD2CC788E}.TraceAlloc|Any CPU.Build.0 = Debug|Any CPU\n\t\t{14EF9518-5BB7-4F83-8686-015BD2CC788E}.TraceAlloc|x64.ActiveCfg = Debug|Any CPU\n\t\t{14EF9518-5BB7-4F83-8686-015BD2CC788E}.TraceAlloc|x64.Build.0 = Debug|Any CPU\n\t\t{14EF9518-5BB7-4F83-8686-015BD2CC788E}.TraceAlloc|x86.ActiveCfg = Debug|Any CPU\n\t\t{14EF9518-5BB7-4F83-8686-015BD2CC788E}.TraceAlloc|x86.Build.0 = Debug|Any CPU\n\t\t{4F2EA4A1-7ECA-48B5-8077-7A3C366F9931}.Debug|Any CPU.ActiveCfg = Debug|x64\n\t\t{4F2EA4A1-7ECA-48B5-8077-7A3C366F9931}.Debug|Any CPU.Build.0 = Debug|x64\n\t\t{4F2EA4A1-7ECA-48B5-8077-7A3C366F9931}.Debug|x64.ActiveCfg = Debug|x64\n\t\t{4F2EA4A1-7ECA-48B5-8077-7A3C366F9931}.Debug|x64.Build.0 = Debug|x64\n\t\t{4F2EA4A1-7ECA-48B5-8077-7A3C366F9931}.Debug|x86.ActiveCfg = Debug|x86\n\t\t{4F2EA4A1-7ECA-48B5-8077-7A3C366F9931}.Debug|x86.Build.0 = Debug|x86\n\t\t{4F2EA4A1-7ECA-48B5-8077-7A3C366F9931}.Release|Any CPU.ActiveCfg = Release|x64\n\t\t{4F2EA4A1-7ECA-48B5-8077-7A3C366F9931}.Release|Any CPU.Build.0 = Release|x64\n\t\t{4F2EA4A1-7ECA-48B5-8077-7A3C366F9931}.Release|x64.ActiveCfg = Release|x64\n\t\t{4F2EA4A1-7ECA-48B5-8077-7A3C366F9931}.Release|x64.Build.0 = Release|x64\n\t\t{4F2EA4A1-7ECA-48B5-8077-7A3C366F9931}.Release|x86.ActiveCfg = Release|x86\n\t\t{4F2EA4A1-7ECA-48B5-8077-7A3C366F9931}.Release|x86.Build.0 = Release|x86\n\t\t{4F2EA4A1-7ECA-48B5-8077-7A3C366F9931}.TraceAlloc|Any CPU.ActiveCfg = Debug|x64\n\t\t{4F2EA4A1-7ECA-48B5-8077-7A3C366F9931}.TraceAlloc|Any CPU.Build.0 = Debug|x64\n\t\t{4F2EA4A1-7ECA-48B5-8077-7A3C366F9931}.TraceAlloc|x64.ActiveCfg = Debug|x64\n\t\t{4F2EA4A1-7ECA-48B5-8077-7A3C366F9931}.TraceAlloc|x64.Build.0 = Debug|x64\n\t\t{4F2EA4A1-7ECA-48B5-8077-7A3C366F9931}.TraceAlloc|x86.ActiveCfg = Debug|x86\n\t\t{4F2EA4A1-7ECA-48B5-8077-7A3C366F9931}.TraceAlloc|x86.Build.0 = Debug|x86\n\t\t{F2FB6DA3-318E-4F30-9A1F-932C667E38C5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{F2FB6DA3-318E-4F30-9A1F-932C667E38C5}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{F2FB6DA3-318E-4F30-9A1F-932C667E38C5}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{F2FB6DA3-318E-4F30-9A1F-932C667E38C5}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{F2FB6DA3-318E-4F30-9A1F-932C667E38C5}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{F2FB6DA3-318E-4F30-9A1F-932C667E38C5}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{F2FB6DA3-318E-4F30-9A1F-932C667E38C5}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{F2FB6DA3-318E-4F30-9A1F-932C667E38C5}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{F2FB6DA3-318E-4F30-9A1F-932C667E38C5}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{F2FB6DA3-318E-4F30-9A1F-932C667E38C5}.Release|x64.Build.0 = Release|Any CPU\n\t\t{F2FB6DA3-318E-4F30-9A1F-932C667E38C5}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{F2FB6DA3-318E-4F30-9A1F-932C667E38C5}.Release|x86.Build.0 = Release|Any CPU\n\t\t{F2FB6DA3-318E-4F30-9A1F-932C667E38C5}.TraceAlloc|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{F2FB6DA3-318E-4F30-9A1F-932C667E38C5}.TraceAlloc|Any CPU.Build.0 = Debug|Any CPU\n\t\t{F2FB6DA3-318E-4F30-9A1F-932C667E38C5}.TraceAlloc|x64.ActiveCfg = Debug|Any CPU\n\t\t{F2FB6DA3-318E-4F30-9A1F-932C667E38C5}.TraceAlloc|x64.Build.0 = Debug|Any CPU\n\t\t{F2FB6DA3-318E-4F30-9A1F-932C667E38C5}.TraceAlloc|x86.ActiveCfg = Debug|Any CPU\n\t\t{F2FB6DA3-318E-4F30-9A1F-932C667E38C5}.TraceAlloc|x86.Build.0 = Debug|Any CPU\n\t\t{35CBBDEB-FC07-4D04-9D3E-F88FC180110B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{35CBBDEB-FC07-4D04-9D3E-F88FC180110B}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{35CBBDEB-FC07-4D04-9D3E-F88FC180110B}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{35CBBDEB-FC07-4D04-9D3E-F88FC180110B}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{35CBBDEB-FC07-4D04-9D3E-F88FC180110B}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{35CBBDEB-FC07-4D04-9D3E-F88FC180110B}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{35CBBDEB-FC07-4D04-9D3E-F88FC180110B}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{35CBBDEB-FC07-4D04-9D3E-F88FC180110B}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{35CBBDEB-FC07-4D04-9D3E-F88FC180110B}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{35CBBDEB-FC07-4D04-9D3E-F88FC180110B}.Release|x64.Build.0 = Release|Any CPU\n\t\t{35CBBDEB-FC07-4D04-9D3E-F88FC180110B}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{35CBBDEB-FC07-4D04-9D3E-F88FC180110B}.Release|x86.Build.0 = Release|Any CPU\n\t\t{35CBBDEB-FC07-4D04-9D3E-F88FC180110B}.TraceAlloc|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{35CBBDEB-FC07-4D04-9D3E-F88FC180110B}.TraceAlloc|Any CPU.Build.0 = Debug|Any CPU\n\t\t{35CBBDEB-FC07-4D04-9D3E-F88FC180110B}.TraceAlloc|x64.ActiveCfg = Debug|Any CPU\n\t\t{35CBBDEB-FC07-4D04-9D3E-F88FC180110B}.TraceAlloc|x64.Build.0 = Debug|Any CPU\n\t\t{35CBBDEB-FC07-4D04-9D3E-F88FC180110B}.TraceAlloc|x86.ActiveCfg = Debug|Any CPU\n\t\t{35CBBDEB-FC07-4D04-9D3E-F88FC180110B}.TraceAlloc|x86.Build.0 = Debug|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {C8845072-C642-4858-8627-27E862AD21BB}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "pythonnet",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.1689453125,
          "content": "# Requirements for both Travis and AppVeyor\npytest\npsutil\n\n# Coverage upload\ncoverage\ncodecov\n\nwheel\npycparser\nclr-loader==0.2.*\n\n# Discover libpython\nfind_libpython==0.3.*\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.7841796875,
          "content": "#!/usr/bin/env python\n\nimport distutils\nfrom distutils.command.build import build as _build\nfrom setuptools.command.develop import develop as _develop\nfrom wheel.bdist_wheel import bdist_wheel as _bdist_wheel\nfrom setuptools import Distribution\nfrom setuptools import setup, Command\n\nimport os\n\n# Disable SourceLink during the build until it can read repo-format v1, #1613\nos.environ[\"EnableSourceControlManagerQueries\"] = \"false\"\n\n\nclass DotnetLib:\n    def __init__(self, name, path, **kwargs):\n        self.name = name\n        self.path = path\n        self.args = kwargs\n\n\nclass build_dotnet(Command):\n    \"\"\"Build command for dotnet-cli based builds\"\"\"\n\n    description = \"Build DLLs with dotnet-cli\"\n    user_options = [\n        (\"dotnet-config=\", None, \"dotnet build configuration\"),\n        (\n            \"inplace\",\n            \"i\",\n            \"ignore build-lib and put compiled extensions into the source \"\n            + \"directory alongside your pure Python modules\",\n        ),\n    ]\n\n    def initialize_options(self):\n        self.dotnet_config = None\n        self.build_lib = None\n        self.inplace = False\n\n    def finalize_options(self):\n        if self.dotnet_config is None:\n            self.dotnet_config = \"release\"\n\n        build = self.distribution.get_command_obj(\"build\")\n        build.ensure_finalized()\n        if self.inplace:\n            self.build_lib = \".\"\n        else:\n            self.build_lib = build.build_lib\n\n    def run(self):\n        dotnet_modules = self.distribution.dotnet_libs\n\n        for lib in dotnet_modules:\n            output = os.path.join(\n                os.path.abspath(self.build_lib), lib.args.pop(\"output\")\n            )\n            rename = lib.args.pop(\"rename\", {})\n\n            opts = sum(\n                [\n                    [\"--\" + name.replace(\"_\", \"-\"), value]\n                    for name, value in lib.args.items()\n                ],\n                [],\n            )\n\n            opts.extend([\"--configuration\", self.dotnet_config])\n            opts.extend([\"--output\", output])\n\n            self.announce(\"Running dotnet build...\", level=distutils.log.INFO)\n            self.spawn([\"dotnet\", \"build\", lib.path] + opts)\n\n            for k, v in rename.items():\n                source = os.path.join(output, k)\n                dest = os.path.join(output, v)\n\n                if os.path.isfile(source):\n                    try:\n                        os.remove(dest)\n                    except OSError:\n                        pass\n\n                    self.move_file(src=source, dst=dest, level=distutils.log.INFO)\n                else:\n                    self.warn(\n                        \"Can't find file to rename: {}, current dir: {}\".format(\n                            source, os.getcwd()\n                        )\n                    )\n\n\n# Add build_dotnet to the build tasks:\nclass build(_build):\n    sub_commands = _build.sub_commands + [(\"build_dotnet\", None)]\n\n\nclass develop(_develop):\n    def install_for_development(self):\n        # Build extensions in-place\n        self.reinitialize_command(\"build_dotnet\", inplace=1)\n        self.run_command(\"build_dotnet\")\n\n        return super().install_for_development()\n\n\nclass bdist_wheel(_bdist_wheel):\n    def finalize_options(self):\n        # Monkey patch bdist_wheel to think the package is pure even though we\n        # include DLLs\n        super().finalize_options()\n        self.root_is_pure = True\n\n\n# Monkey-patch Distribution s.t. it supports the dotnet_libs attribute\nDistribution.dotnet_libs = None\n\ncmdclass = {\n    \"build\": build,\n    \"build_dotnet\": build_dotnet,\n    \"develop\": develop,\n    \"bdist_wheel\": bdist_wheel,\n}\n\ndotnet_libs = [\n    DotnetLib(\n        \"python-runtime\",\n        \"src/runtime/Python.Runtime.csproj\",\n        output=\"pythonnet/runtime\",\n    )\n]\n\nsetup(\n    cmdclass=cmdclass,\n    dotnet_libs=dotnet_libs,\n)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.txt",
          "type": "blob",
          "size": 0.009765625,
          "content": "3.1.0-dev\n"
        }
      ]
    }
  ]
}