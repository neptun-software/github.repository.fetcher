{
  "metadata": {
    "timestamp": 1736711009478,
    "page": 723,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjczMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nhibernate/fluent-nhibernate",
      "stars": 1657,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".deepsource.toml",
          "type": "blob",
          "size": 0.1962890625,
          "content": "version = 1\n\ntest_patterns = [\n  \"src/FluentNHibernate.Testing/**\",\n  \"src/FluentNHibernate.Specs/**\",\n  \"src/FluentNHibernate.Specs.ExternalFixtures/**\"\n]\n\n[[analyzers]]\nname = \"csharp\"\nenabled = true"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.8818359375,
          "content": "root = true\r\n; This file is for unifying the coding style for different editors and IDEs.\r\n; More information at http://EditorConfig.org\r\n\r\n[*.ps1]\r\nindent_style = space\r\nindent_size = 2\r\n\r\n[*.cs]\r\nindent_style = space\r\nindent_size = 4\r\ninsert_final_newline = true\r\nmax_line_length = off\r\n\r\ncsharp_style_namespace_declarations = file_scoped\r\n\r\ndotnet_diagnostic.ide0161.severity = warning\r\ndotnet_diagnostic.nunit1032.severity = suggestion\r\ndotnet_diagnostic.nunit1028.severity = none\r\ndotnet_diagnostic.nunit2045.severity = none\r\n\r\n# ReSharper properties\r\nresharper_default_private_modifier = implicit\r\n\r\n# Microsoft .NET properties\r\ndotnet_style_require_accessibility_modifiers = never:suggestion\r\n\r\n[*.cake]\r\nindent_style = space\r\nindent_size = 4\r\n\r\n[*.js]\r\nindent_style = tab\r\nindent_size = 2\r\n\r\n[*.csproj]\r\nindent_style = space\r\nindent_size = 2\r\n\r\n[*.props]\r\nindent_style = space\r\nindent_size = 2\r\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.6044921875,
          "content": "# Set the default behavior, in case people don't have core.autocrlf set.\r\n* text=auto\r\n\r\n# Explicitly declare text files you want to always be normalized and converted\r\n# to native line endings on checkout.\r\n*.cs      text diff=csharp\r\n*.xaml    text\r\n*.txt     text\r\n*.tt      text\r\n*.ps1     text\r\n*.cmd     text\r\n*.msbuild text\r\n*.md      text\r\n\r\n*.sln text eol=crlf\r\n*.csproj text eol=crlf\r\n*.vbproj text eol=crlf\r\n*.fsproj text eol=crlf\r\n*.dbproj text eol=crlf\r\n\r\n# Resharper DotSettings files are in Unix format\r\n*.DotSettings text eol=lf \r\n\r\n# Binary files\r\n*.png binary\r\n*.jpg binary\r\n*.dll binary\r\n*.exe binary"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.123046875,
          "content": "# Misc folders\r\n[Bb]in/\r\n[Oo]bj/\r\n[Tt]emp/\r\n[Ll]ib/\r\n[Pp]ackages/\r\n/[Aa]rtifacts/\r\n/[Tt]ools/\r\n*.sln.ide/\r\n\r\n# .NET CLI\r\n/.dotnet/\r\ndotnet-install.sh*\r\n/.packages/\r\n\r\n# Visual Studio\r\n.vs/\r\n.vscode/\r\nlaunchSettings.json\r\nproject.lock.json\r\n\r\n# Rider\r\n.idea/\r\n\r\n# Build related\r\nbuild-results/\r\ntools/Cake/\r\ntools/xunit.runners/\r\ntools/xunit.runner.console/\r\ntools/nuget.exe\r\ntools/gitreleasemanager/\r\ntools/GitVersion.CommandLine/\r\ntools/Addins/\r\ntools/packages.config.md5sum\r\n\r\n# mstest test results\r\nTestResults\r\n\r\n## Ignore Visual Studio temporary files, build results, and\r\n## files generated by popular Visual Studio add-ons.\r\n\r\n# User-specific files\r\n*.suo\r\n*.user\r\n*.sln.docstates\r\n*.userprefs\r\n*.GhostDoc.xml\r\n*StyleCop.Cache\r\n\r\n# Build results\r\n[Dd]ebug/\r\n[Rr]elease/\r\nx64/\r\n*_i.c\r\n*_p.c\r\n*.ilk\r\n*.meta\r\n*.obj\r\n*.pch\r\n*.pdb\r\n*.pgc\r\n*.pgd\r\n*.rsp\r\n*.sbr\r\n*.tlb\r\n*.tli\r\n*.tlh\r\n*.tmp\r\n*.log\r\n*.vspscc\r\n*.vssscc\r\n.builds\r\n\r\n# Visual Studio profiler\r\n*.psess\r\n*.vsp\r\n*.vspx\r\n\r\n# ReSharper is a .NET coding add-in\r\n_ReSharper*\r\n\r\n# NCrunch\r\n*.ncrunch*\r\n.*crunch*.local.xml\r\n_NCrunch_*\r\n\r\n# NuGet Packages Directory\r\npackages\r\n\r\n# Windows\r\nThumbs.db"
        },
        {
          "name": "CODEOFCONDUCT.md",
          "type": "blob",
          "size": 2.185546875,
          "content": "# Contributor Code of Conduct\n\nAs contributors and maintainers of this project, and in the interest of fostering an open and welcoming community, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.\n\nWe are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, or nationality.\n\nExamples of unacceptable behavior by participants include:\n\n- The use of sexualized language or imagery\n- Personal attacks\n- Trolling or insulting/derogatory comments\n- Public or private harassment\n- Publishing other's private information, such as physical or electronic addresses, without explicit permission\n- Other unethical or unprofessional conduct\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\nBy adopting this Code of Conduct, project maintainers commit themselves to fairly and consistently applying these principles to every aspect of managing this project. Project maintainers who do not follow or enforce the Code of Conduct may be permanently removed from the project team.\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting a project maintainer. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Maintainers are obligated to maintain confidentiality with regard to the reporter of an incident.\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.3.0, available from http://contributor-covenant.org/version/1/3/0/"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.134765625,
          "content": "# Contribution Guidelines\n\nThe wiki has a page on contributing to FNH:\n\nhttps://github.com/nhibernate/fluent-nhibernate/wiki/Contributing\n"
        },
        {
          "name": "GitReleaseManager.yaml",
          "type": "blob",
          "size": 0.2451171875,
          "content": "issue-labels-include:\r\n- breaking change\r\n- feature\r\n- bug\r\n- improvement\r\n- documentation\r\n- technical debt\r\nissue-labels-exclude:\r\n- Build\r\nissue-labels-alias:\r\n    - name:    documentation\r\n      header:  documentation\r\n      plural:  documentation"
        },
        {
          "name": "GitVersion.yml",
          "type": "blob",
          "size": 0.064453125,
          "content": "assembly-versioning-scheme: MajorMinor\r\nmode: ContinuousDelivery\r\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4716796875,
          "content": "Copyright (c) 2008-2018, James Gregory and contributors\r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\r\n\r\n  * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\r\n  * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\r\n  * Neither the name of James Gregory nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.9140625,
          "content": "![FluentNHibernate logo](https://raw.githubusercontent.com/nhibernate/fluent-nhibernate/main/docs/logo.png)\n\n[![Build status](https://ci.appveyor.com/api/projects/status/684r2ot07i2lrcij/branch/main?svg=true)](https://ci.appveyor.com/project/nhibernate/fluent-nhibernate/branch/main)\n[![NuGet](https://img.shields.io/nuget/v/FluentNHibernate.svg)](https://www.nuget.org/packages/FluentNHibernate)\n\n## What is FluentNHibernate?\nFluent, XML-less, compile safe, automated, convention-based mappings for NHibernate. *Get your fluent on.*\n\n## Where can I get it?\n\nInstall using the [FluentNHibernate NuGet package](https://www.nuget.org/packages/FluentNHibernate):\n\n```\ndotnet add package FluentNHibernate\n```\n\n## How do I use it?\n\n* Read the [introduction](https://github.com/FluentNHibernate/fluent-nhibernate/wiki/Getting-started).\n* Get latest version from [NuGet](https://www.nuget.org/packages/FluentNHibernate)\n* Create your [first project](https://github.com/FluentNHibernate/fluent-nhibernate/wiki/Getting-started#wiki-yourfirstproject).\n\n## Further reading\n\nOnce you've followed the above, you can compare our [auto mapping](https://github.com/FluentNHibernate/fluent-nhibernate/wiki/Auto-mapping) to our [fluent interface](https://github.com/FluentNHibernate/fluent-nhibernate/wiki/Fluent-mapping) to see which suits your application, read through our [API documentation](https://github.com/FluentNHibernate/fluent-nhibernate/wiki/Fluent-configuration), or just see what's available for reading in our [wiki](https://github.com/FluentNHibernate/fluent-nhibernate/wiki).\n\nContributors\n---------------------------------------------\n\nFluent NHibernate wouldn't be possible without the time and effort of its contributors. The team comprises of [James Gregory](http://jagregory.com), [Paul Batum](http://www.paulbatum.com), Andrew Stewart, [Hudson Akridge](https://github.com/HudsonAkridge), [Gleb Chermennov](https://github.com/chester89) and [Jorge Rodríguez Galán](https://github.com/jrgcubano).\n\n**Our valued committers are:** Aaron Jensen, Alexander Gross, Andrew Stewart, Barry Dahlberg, Bobby Johnson, Brian Donahue, Cameron Harris, Chad Myers, Chris Chilvers, Craig Neuwirt, Dan Malcolm, Daniel Mirapalheta, David Archer, David Longnecker, David R. Longnecker, Derick Bailey, Erik Ojebo, Firo, Hudson Akridge, Ivan Zlatev, James Freiwirth, James Gregory, James Kovacs, Jeremy Skinner, Lee Henson, Louis DeJardin, Patric Forsgard, Paul Batum, Roelof Blom, Stuart Childs, Tom Janssens, Tuna Toksoz, U-BSOD\\pruiz, di97mni, dschilling, felixg, jeremydmiller, kevm, leebrandt, maxild, robsosno, [Jorge Rodríguez Galán](https://github.com/jrgcubano) and many more.</p>\n\nThanks goes to [Jeremy Miller](http://codebetter.com/blogs/jeremy.miller) for the original idea and implementation.\n    \nFluent NHibernate is &copy; 2008-2018 [James Gregory](http://jagregory.com) and contributors under the [BSD license](https://github.com/nhibernate/fluent-nhibernate/blob/main/LICENSE)\n\n"
        },
        {
          "name": "ReleaseNotes.md",
          "type": "blob",
          "size": 0.037109375,
          "content": "### New in 2.0.3 (Released 2015/10/06)"
        },
        {
          "name": "ReleaseProcedure.md",
          "type": "blob",
          "size": 0.4248046875,
          "content": "## How to release\n\n### Ensure tokens are current\n\nEnsure that GitHub and NuGet tokens are not expired. If they are update `GITHUB_TOKEN` and `NUGET_API_KEY` environment variables in AppVeyor.\n\n### Prepare milestone\n\n1. Create milestone\n2. Assign issues to the milestone\n3. Label issues\n4. Create release notes\n    ```ps\n    .\\build.ps1 --target Release-Notes\n    ```\n\n### Tag a release\n\n1. Tag the version and push tag to the upstream\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.57421875,
          "content": "version: '{build}'\r\nimage: Visual Studio 2022\r\n\r\ninit:\r\n  - git config --global core.autocrlf true\r\n  \r\npull_requests:\r\n  do_not_increment_build_number: true\r\n\r\nenvironment:\r\n  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true\r\n  DOTNET_CLI_TELEMETRY_OPTOUT: true\r\n  IGNORE_NORMALISATION_GIT_HEAD_MOVE: 1\r\n\r\nbranches:\r\n  only:\r\n    - refs/heads/main\r\n    - refs/tags/*\r\n    - /r/.*/\r\n    - main\r\n    - /feat/.*/\r\n    - /fix/.*/\r\n\r\n# clone_depth: 1\r\nbuild_script:\r\n  - ps: .\\build.ps1 --target AppVeyor --verbosity Diagnostic\r\n\r\ntest: off\r\n\r\ncache:\r\n- tools -> build.cake\r\n- packages -> build.cake\r\n"
        },
        {
          "name": "build.cake",
          "type": "blob",
          "size": 9.724609375,
          "content": "#addin \"nuget:?package=Cake.FileHelpers&version=7.0.0\"\r\n#tool \"dotnet:?package=GitReleaseManager.Tool&version=0.18.0\"\r\n#tool \"dotnet:?package=GitVersion.Tool&version=6.0.5\"\r\n\r\n#load \"./build/parameters.cake\"\r\n\r\nBuildParameters parameters = BuildParameters.GetParameters(Context);\r\nDotNetMSBuildSettings msBuildSettings = null;\r\nbool publishingError = false;\r\n\r\nvar SolutionPath = \"./src/FluentNHibernate.sln\";\r\nvar SrcProjects = new [] { \"FluentNHibernate\" };\r\nvar TestProjects = new [] { \"FluentNHibernate.Testing\" };\r\nvar SpecProjects = new [] { \"FluentNHibernate.Specs\" };\r\n\r\nSetup((context) =>\r\n{    \r\n    parameters.Initialize(context);\r\n\r\n    Information(\"FluentNHibernate\");\r\n    Information($\"SemVersion: {parameters.Version.SemVersion}\");\r\n    Information($\"AssemblyVersion: {parameters.Version.AssemblyVersion}\");\r\n    Information($\"Version: {parameters.Version.Version}\");\r\n    Information($\"IsLocalBuild: {parameters.IsLocalBuild}\");    \r\n    Information($\"IsTagged: {parameters.IsTagged}\");\r\n    Information($\"IsPullRequest: {parameters.IsPullRequest}\");\r\n    Information($\"Target: {parameters.Target}\");   \r\n\r\n    var releaseNotes = string.Join(\"\\n\", \r\n        parameters.ReleaseNotes.Notes.ToArray()).Replace(\"\\\"\", \"\\\"\\\"\");\r\n\r\n    msBuildSettings = new DotNetMSBuildSettings()\r\n        .WithProperty(\"Version\", parameters.Version.SemVersion)\r\n        .WithProperty(\"AssemblyVersion\", parameters.Version.AssemblyVersion)\r\n        .WithProperty(\"FileVersion\", parameters.Version.Version)\r\n        .WithProperty(\"InformationalVersion\", parameters.Version.InformationalVersion)\r\n        .WithProperty(\"PackageReleaseNotes\", string.Concat(\"\\\"\", releaseNotes, \"\\\"\"));\r\n});\r\n\r\nTeardown((context) =>\r\n{\r\n});\r\n\r\nTask(\"Clean\")\r\n  .Does(() =>\r\n    {\r\n        CleanDirectories(parameters.Paths.Directories.ToClean);\r\n        DotNetClean(SolutionPath);\r\n        EnsureDirectoryExists(parameters.Paths.Directories.Artifacts);\r\n        EnsureDirectoryExists(parameters.Paths.Directories.ArtifactsBinFullFx);\r\n        EnsureDirectoryExists(parameters.Paths.Directories.TestResults);\r\n        EnsureDirectoryExists(parameters.Paths.Directories.NugetRoot);\r\n  });\r\n\r\nTask(\"Restore\")\r\n    .IsDependentOn(\"Clean\")\r\n    .Does(() =>\r\n    {\r\n        DotNetRestore(SolutionPath, new DotNetRestoreSettings\r\n        {\r\n            Verbosity = DotNetVerbosity.Minimal,            \r\n        });\r\n    });\r\n\r\nTask(\"Build\")\r\n    .IsDependentOn(\"Restore\")\r\n    .Does(() =>\r\n    {\r\n        DotNetBuild(SolutionPath, new DotNetBuildSettings\r\n        {\r\n            Configuration = parameters.Configuration,\r\n            MSBuildSettings = msBuildSettings\r\n        });\r\n    });\r\n\r\nTask(\"Test\")\r\n    .IsDependentOn(\"Build\")\r\n    .Does(() =>\r\n    {       \r\n        var unitProjects = GetFiles(\"./src/**/*.Testing.csproj\");\r\n        var specProjects = GetFiles(\"./src/**/*.Specs.csproj\");\r\n        var testProjects = unitProjects.Union(specProjects).ToArray();\r\n\r\n        foreach(var project in testProjects) \r\n        {                      \r\n            DotNetTest(project.ToString(), new DotNetTestSettings\r\n            {\r\n                Framework = \"net48\",\r\n                NoBuild = true,\r\n                NoRestore = true,\r\n                Configuration = parameters.Configuration\r\n            });          \r\n\r\n            DotNetTest(project.ToString(), new DotNetTestSettings\r\n            {\r\n                Framework = \"net6.0\",\r\n                NoBuild = true,\r\n                NoRestore = true,\r\n                Configuration = parameters.Configuration\r\n            });          \r\n        }\r\n    });\r\n\r\nTask(\"Copy-Files\")\r\n    .IsDependentOn(\"Test\")\r\n    .Does(() =>\r\n    {            \r\n        PublishProjects(\r\n            SrcProjects, \"net461\",\r\n            parameters.Paths.Directories.ArtifactsBinFullFx.FullPath, \r\n            parameters.Version.VersionSuffix, \r\n            parameters.Configuration, \r\n            msBuildSettings\r\n        );\r\n        PublishProjects(\r\n            SrcProjects, \"netstandard2.0\",\r\n            parameters.Paths.Directories.ArtifactsBinNetStandard20.FullPath, \r\n            parameters.Version.VersionSuffix, \r\n            parameters.Configuration, \r\n            msBuildSettings\r\n        );\r\n        PublishProjects(\r\n            SrcProjects, \"netcoreapp2.0\",\r\n            parameters.Paths.Directories.ArtifactsBinNetCoreApp2.FullPath, \r\n            parameters.Version.VersionSuffix, \r\n            parameters.Configuration, \r\n            msBuildSettings\r\n        );\r\n        \r\n        CopyFileToDirectory(\"./LICENSE\", parameters.Paths.Directories.ArtifactsBinFullFx);            \r\n    });\r\n\r\nTask(\"Zip-Files\")\r\n    .IsDependentOn(\"Copy-Files\")\r\n    .Does(() =>\r\n    {            \r\n        Zip(parameters.Paths.Directories.ArtifactsBinFullFx, parameters.Paths.Files.ZipArtifactPathDesktop, \r\n            GetFiles($\"{parameters.Paths.Directories.ArtifactsBinFullFx.FullPath}/**/*\"));\r\n    });\r\n  \r\nTask(\"Create-NuGet-Packages\")\r\n    .IsDependentOn(\"Copy-Files\")\r\n    .Does(() =>\r\n    {    \r\n        PackProjects(\r\n            SrcProjects, \r\n            parameters.Configuration,\r\n            parameters.Paths.Directories.NugetRoot.FullPath);\r\n    });\r\n\r\nTask(\"Publish-Nuget\")\r\n    .IsDependentOn(\"Create-NuGet-Packages\")\r\n    .WithCriteria(() => parameters.ShouldPublish)\r\n    .Does(() =>\r\n    {        \r\n        foreach(var project in SrcProjects)\r\n        {            \r\n            var packagePath = parameters.Paths.Directories.NugetRoot\r\n                .CombineWithFilePath(string.Concat(project, \".\", parameters.Version.SemVersion, \".nupkg\"));\r\n            NuGetPush(packagePath, new NuGetPushSettings {\r\n                Source = parameters.NuGet.ApiUrl,\r\n                ApiKey = parameters.NuGet.ApiKey\r\n            });\r\n        }\r\n   });    \r\n\r\nTask(\"Generate-Docs\")   \r\n    .IsDependentOn(\"Build\")\r\n    .Does(() =>\r\n    {\r\n        // TODO  build/docu/docu.exe...  and publish to gh-pages     \r\n    });\r\n\r\nTask(\"Publish-GitHub-Release\")\r\n    .WithCriteria(() => parameters.ShouldPublish)\r\n    .Does(() =>\r\n    {\r\n        GitReleaseManagerAddAssets(\r\n            parameters.GitHub.Token, parameters.GitHub.Owner, parameters.GitHub.Repository, \r\n            parameters.Version.Milestone, \r\n            parameters.Paths.Files.ZipArtifactPathDesktop.ToString());\r\n        GitReleaseManagerClose(\r\n            parameters.GitHub.Token, parameters.GitHub.Owner, parameters.GitHub.Repository, \r\n            parameters.Version.Milestone);\r\n    })\r\n    .OnError(exception =>\r\n    {\r\n        Information(\"Publish-GitHub-Release Task failed, but continuing with next Task...\");\r\n        publishingError = true;\r\n    });\r\n\r\nTask(\"Create-Release-Notes\")\r\n    .Does(() =>\r\n    {\r\n        GitReleaseManagerCreate(\r\n            parameters.GitHub.Token, \r\n            parameters.GitHub.Owner, parameters.GitHub.Repository, \r\n            new GitReleaseManagerCreateSettings {\r\n                Milestone         = parameters.Version.Milestone,\r\n                Name              = parameters.Version.Milestone,\r\n                Prerelease        = true,\r\n                TargetCommitish   = \"main\"\r\n            }\r\n        );\r\n    });\r\n\r\nTask(\"Update-AppVeyor-BuildNumber\")\r\n    .WithCriteria(() => parameters.IsRunningOnAppVeyor)\r\n    .Does(() =>\r\n    {\r\n        // AppVeyor.UpdateBuildVersion(parameters.Version.SemVersion);\r\n    })\r\n    .ReportError(exception =>\r\n    {\r\n        // Via: See https://github.com/reactiveui/ReactiveUI/issues/1262\r\n        Warning(\"Build with version {0} already exists.\", parameters.Version.SemVersion);\r\n    });    \r\n\r\nTask(\"Upload-AppVeyor-Artifacts\")        \r\n    .WithCriteria(() => parameters.IsRunningOnAppVeyor)\r\n    .Does(() =>\r\n    {\r\n        AppVeyor.UploadArtifact(parameters.Paths.Files.ZipArtifactPathDesktop);    \r\n        foreach(var package in GetFiles(parameters.Paths.Directories.NugetRoot + \"/*\"))\r\n        {\r\n            AppVeyor.UploadArtifact(package);\r\n        }\r\n    });\r\n\t\r\nTask(\"Release-Notes\")\r\n  .IsDependentOn(\"Create-Release-Notes\");\r\n\r\nTask(\"Package\")\r\n    .IsDependentOn(\"Zip-Files\")\r\n    .IsDependentOn(\"Create-NuGet-Packages\");  \r\n\r\nTask(\"AppVeyor\")\r\n    .IsDependentOn(\"Update-AppVeyor-BuildNumber\")\r\n    .IsDependentOn(\"Package\")\r\n    .IsDependentOn(\"Upload-AppVeyor-Artifacts\")     \r\n    .IsDependentOn(\"Publish-NuGet\")\r\n    .IsDependentOn(\"Publish-GitHub-Release\")\r\n    .Finally(() =>\r\n    {\r\n        if(publishingError)\r\n        {\r\n            throw new Exception(\"An error occurred during the publishing of Cake.  All publishing tasks have been attempted.\");\r\n        }\r\n    });\r\n    \r\nTask(\"Default\")\r\n    .IsDependentOn(\"Package\");\r\n    \r\nRunTarget(parameters.Target);\r\n\r\nprivate void PublishProjects(\r\n    IEnumerable<string> projectNames,\r\n    string framework,\r\n    string artifactsBin,\r\n    string versionSuffix,\r\n    string configuration, \r\n    DotNetMSBuildSettings msBuildSettings)\r\n{\r\n    foreach(var project in projectNames)\r\n    {        \r\n        DotNetPublish($\"./src/{project}\", new DotNetPublishSettings\r\n        {\r\n            Framework = framework,\r\n            VersionSuffix = versionSuffix,\r\n            Configuration = configuration,\r\n            OutputDirectory = artifactsBin,\r\n            MSBuildSettings = msBuildSettings\r\n        });\r\n     \r\n        // Copy documentation XML (since publish does not do this anymore)\r\n        CopyFileToDirectory($\"./src/{project}/bin/{configuration}/{framework}/{project}.xml\", artifactsBin);    \r\n    }\r\n}\r\n\r\nprivate void PackProjects(\r\n    IEnumerable<string> projectNames, \r\n    string configuration,\r\n    string nugetDir)\r\n{\r\n    foreach(var project in projectNames) {\r\n        var projectPath = File($\"./src/{project}/{project}.csproj\");\r\n        DotNetPack(projectPath.ToString(), new DotNetPackSettings\r\n        {\r\n            Configuration = configuration,\r\n            MSBuildSettings = msBuildSettings,\r\n            OutputDirectory = nugetDir,\r\n            IncludeSymbols = true\r\n        });\r\n    }\r\n}\r\n"
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 0.3115234375,
          "content": "$ErrorActionPreference = 'Stop'\n\nSet-Location -LiteralPath $PSScriptRoot\n\n$env:DOTNET_SKIP_FIRST_TIME_EXPERIENCE = '1'\n$env:DOTNET_CLI_TELEMETRY_OPTOUT = '1'\n$env:DOTNET_NOLOGO = '1'\n\ndotnet tool restore\nif ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }\n\ndotnet cake @args\nif ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.09375,
          "content": "{\r\n    \"sdk\": {\r\n        \"version\": \"8.0.100\",\r\n        \"rollForward\": \"latestFeature\"\r\n    }\r\n}"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}