{
  "metadata": {
    "timestamp": 1736711108900,
    "page": 923,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "microsoft/automatic-graph-layout",
      "stars": 1373,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.15234375,
          "content": "[*.{js,cs}]\ncsharp_new_line_before_open_brace = none\nindent_style = space\n# .net code style settings:\n[*.{cs,vb}]\ndotnet_sort_system_directives_first = true"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.458984375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.330078125,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n.vs/\n\n# Build results\n\n[Dd]ebug/\n[Rr]elease/\nx64/\nbuild/\n[Bb]in/\n[Oo]bj/\n\n# Enable \"build/\" folder in the NuGet Packages folder since NuGet packages use it for MSBuild targets\n!packages/*/build/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n*_i.c\n*_p.c\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.log\n*.scc\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n*.ncrunch*\n.*crunch*.local.xml\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.Publish.xml\n\n# NuGet Packages Directory\n## TODO: If you have NuGet Package Restore enabled, uncomment the next line\n#packages/\n\n# Windows Azure Build Output\ncsx\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.[Pp]ublish.xml\n*.pfx\n*.publishsettings\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\nApp_Data/*.mdf\nApp_Data/*.ldf\n\n\n#LightSwitch generated files\nGeneratedArtifacts/\n_Pvt_Extensions/\nModelManifest.xml\n\n#LocalHistory VS plugin\n.localhistory/\n\n# NuGet Packages - these should not be in the source tree\n*.nupkg\n\n# =========================\n# Windows detritus\n# =========================\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Mac desktop service store files\n/sh.exe.stackdump\n/node_modules\n/package-lock.json\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 0.6923828125,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project>\n\n  <PropertyGroup>\n    <SignAssembly>true</SignAssembly>\n    <AssemblyOriginatorKeyFile>$(MSBuildThisFileDirectory)\\Key.snk</AssemblyOriginatorKeyFile>\n    <Deterministic>true</Deterministic>\n    <PackageProjectUrl>https://github.com/Microsoft/automatic-graph-layout</PackageProjectUrl>\n    <RepositoryUrl>https://github.com/Microsoft/automatic-graph-layout</RepositoryUrl>\n    <PackageRequireLicenseAcceptance>True</PackageRequireLicenseAcceptance>\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\n    <Authors>Microsoft</Authors>\n    <PackageTags>MSAGL Graph Layout</PackageTags>\n    <IsPackable>false</IsPackable>\n  </PropertyGroup>\n\n</Project>\n"
        },
        {
          "name": "Directory.Build.targets",
          "type": "blob",
          "size": 0.05859375,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project>\n</Project>\n"
        },
        {
          "name": "GraphLayout",
          "type": "tree",
          "content": null
        },
        {
          "name": "Key.snk",
          "type": "blob",
          "size": 0.58203125,
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.11328125,
          "content": "Microsoft Automatic Graph Layout,MSAGL \n\nCopyright (c) Microsoft Corporation\n\nAll rights reserved. \n\nMIT License \n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"\"Software\"\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.0615234375,
          "content": "# Microsoft Automatic Graph Layout\n**MSAGL** is a .NET library and tool for graph layout and viewing. \n\nMSAGL was developed in Microsoft by Lev Nachmanson, Sergey Pupyrev, Tim Dwyer, Ted Hart, and Roman Prutkin.\n\n## Getting Started\n\nThe simplest way to start with MSAGL in C# is to open GraphLayout.sln in Visual Studio and browse the Samples folder.\n\n> **Note:** This repository requires Visual Studio with the UWP (Universal Windows Platform) development workload installed, as well as the Windows 10 SDK. If these are not installed, Visual Studio will recommend installing them when you open the solution. Please ensure these components are installed to successfully build the project.\n\n## MSAGL Modules\n\n**The Core Layout engine (AutomaticGraphLayout.dll)** - [NuGet package](https://www.nuget.org/packages/Msagl/)\nThis .NET asssembly contains the core layout functionality. Use this library if you just want MSAGL to perform the layout only and afterwards you will use a separate tool to perform the rendering and visalization.\n\n**The Drawing module (AutomaticGraphLayout.Drawing.dll)** - [NuGet package](https://www.nuget.org/packages/Msagl.Drawing/)\nThe Definitions of different drawing attributes like colors, line styles, etc. It also contains definitions of a node class, an edge class, and a graph class. By using these classes a user can create a graph object and use it later for layout, and rendering.\n\n\n**A WPF control (Microsoft.Msagl.WpfGraphControl.dll)** - [NuGet package](https://www.nuget.org/packages/Msagl.WpfGraphControl/)\nThe viewer control lets you visualize graphs and has and some other rendering functionality. Key features: (1) Pan and Zoom (2) Navigate Forward and Backward (3) tooltips and highlighting on graph entities (4) Search for and focus on graph entities.\n\n**A Windows Forms  Viewer control (Microsoft.Msagl.GraphViewerGdi.dll)** - [NuGet package](https://www.nuget.org/packages/Msagl.GraphViewerGDI/)\nThe viewer control lets you visualize graphs and has and some other rendering functionality. Key features: (1) Pan and Zoom (2) Navigate Forward and Backward (3) tooltips and highlighting on graph entities (4) Search for and focus on graph entities.\n\n# Code Samples\nThe code snippets demonstrate the basic usage of the viewer. It uses the C# language.\n\n## The Viewer sample\n![Drawing of the graph from the sampleDrawing of the graph from the sample](https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/msagl-abc.jpg)\n\n*Drawing of the graph from the sampleDrawing of the graph from the sample*\n\n```csharp\nusing System;\nusing System.Collections.Generic; \nusing System.Windows.Forms; \nclass ViewerSample { \n    public static void Main() { \n    //create a form \n        System.Windows.Forms.Form form = new System.Windows.Forms.Form();\n    //create a viewer object \n        Microsoft.Msagl.GraphViewerGdi.GViewer viewer = new Microsoft.Msagl.GraphViewerGdi.GViewer();\n    //create a graph object \n        Microsoft.Msagl.Drawing.Graph graph = new Microsoft.Msagl.Drawing.Graph(\"graph\");\n    //create the graph content \n        graph.AddEdge(\"A\", \"B\");\n        graph.AddEdge(\"B\", \"C\");\n        graph.AddEdge(\"A\", \"C\").Attr.Color = Microsoft.Msagl.Drawing.Color.Green;\n        graph.FindNode(\"A\").Attr.FillColor = Microsoft.Msagl.Drawing.Color.Magenta;\n        graph.FindNode(\"B\").Attr.FillColor = Microsoft.Msagl.Drawing.Color.MistyRose;\n        Microsoft.Msagl.Drawing.Node c = graph.FindNode(\"C\");\n        c.Attr.FillColor = Microsoft.Msagl.Drawing.Color.PaleGreen;\n        c.Attr.Shape = Microsoft.Msagl.Drawing.Shape.Diamond;\n    //bind the graph to the viewer \n        viewer.Graph = graph;\n    //associate the viewer with the form \n        form.SuspendLayout();\n        viewer.Dock = System.Windows.Forms.DockStyle.Fill;\n        form.Controls.Add(viewer);\n        form.ResumeLayout();\n    //show the form \n        form.ShowDialog();\n    } \n}\n```\n\n[More code\nsamples can be found here…](https://www.microsoft.com/en-us/research/project/microsoft-automatic-graph-layout/#code-samples)\n\n# GraphMaps\n\nGraphMaps lets you view very large graphs like oneline maps - as you zoom in more detail is revealed. Watch a [video](https://youtu.be/qCUP20dQqBo) that shows how GraphMaps works, and here is the [video](http://i11www.iti.kit.edu/~rprutkin/composers.wmv) of the previous version.\n\n## Using GraphMaps\n* open GraphLayout.sln and build the solution,\n* run TestGraphMaps. \n\nNOTES:\n* The configuration Release/x64 needs to be used to load a large graph.  \n* The graph from the video can be found in GraphLayout/graphs/composers.zip. Please load composers.msagl to avoid the preprocessing step.\n* If composers.dot is loaded then composers.msagl and the tiles directory composers.msagl_tiles will be\nregenerated. \n\n## Learn More\nThe ideas, design, and the mathematics of GraphMaps are described in [this paper](http://arxiv.org/pdf/1506.06745v1.pdf).\n\n# Layouts Created by MSAGL\n![](https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/msagl-195f1b23116b4f049b6e5dc815d96c89.png)\n![](https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/msagl-195f1b23116b4f049b6e5dc815d96c89.png)\n![](https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/msagl-c34826a5e3af4cecbd8165fabc947b36.jpg)\n![](https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/msagl-44a7b11774a54cab92a3f75a9501601b.png)\n\n# MSAGL in JavaScript\n\nWebMSAGL is a version of MSAGL that was transcompiled to JavaScript with [SharpKit](https://github.com/SharpKit/SharpKit/), plus a [TypeScript](https://www.typescriptlang.org/) wrapper and rendering/interaction layer that provides a friendly TypeScript API. You can create a graph either programmatically or from a JSON object, have MSAGL create a layout for it, and then render it to an HTML Canvas or to an SVG block. All layout operations are run in a web worker, ensuring that your application remains responsive while computation is taking place. Limited interactivity is also supported.\n\n## Using WebMSAGL\n* open WebMsagl.sln and build the solution,\n* set index.html from any of the sample folders as the starting page,\n* run WebMsagl.\n\n\n# Code of Conduct\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n# Build\n\n[![Build Status](https://dev.azure.com/MSAGL/MSAGLBuild/_apis/build/status/microsoft.automatic-graph-layout?branchName=master)](https://dev.azure.com/MSAGL/MSAGLBuild/_build/latest?definitionId=1&branchName=master)\n\n## Producing a release\nA release containing the binaries of agl.exe\ncan be created automatically by a github action of\n\".github\\workflows\\agl.yaml'.\nTo invoke the action do the following. \nCreate a new tag in the form \"v*\". For example,  \"git tag -a\nv_11 -m \"some comment here\"\". Then execute git push with this\ntag: \"git push origin v_11\". These should trigger the release\ncreation. Alternatively, you can use python script \"createRelease.py\",\nas following \"python createRelease.py 1.1.1\".\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.6923828125,
          "content": "<!-- BEGIN MICROSOFT SECURITY.MD V0.0.7 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/opensource/security/definition), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/opensource/security/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/opensource/security/pgpkey).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://aka.ms/opensource/security/msrc). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/opensource/security/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/opensource/security/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n"
        },
        {
          "name": "createRelease.py",
          "type": "blob",
          "size": 0.50390625,
          "content": "from curses.panel import version\nimport os\nimport os\nimport sys\nprint (\"Creating release\")\nif len(sys.argv) == 1 :\n    print (\"Error: please provide the release number\")\n    print(\"Usage: python createRelease 1.1.1 \\\"provide an optional comment\\\"\" )\n    exit(1)\ncomment = \"default comment\"\n\nif len(sys.argv) == 3 :\n    comment = sys.argv[2]\n \nversion_tag = 'v'+ sys.argv[1] \n\ncommand = \"git tag -a \" + version_tag + \" -m \" + comment\n\ncommand +=  \" && git push origin \" + version_tag\nprint(command)\nos.system(command)"
        }
      ]
    }
  ]
}