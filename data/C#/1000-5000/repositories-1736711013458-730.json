{
  "metadata": {
    "timestamp": 1736711013458,
    "page": 730,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjczMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "richardszalay/mockhttp",
      "stars": 1645,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.5537109375,
          "content": "# Build generated files\nAssemblyVersionInfo.cs\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\nx64/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n*.nupkg\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n#NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding addin-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n*.ncrunch*\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n\n# NuGet Packages Directory\npackages/\n## TODO: If the tool you use requires repositories.config uncomment the next line\n#!packages/repositories.config\n\n# Enable \"build/\" folder in the NuGet Packages folder since NuGet packages use it for MSBuild targets\n# This line needs to be after the ignore of the build folder (and the packages folder if the line above has been uncommented)\n!packages/build/\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n.dotnetcli/ \n.vs/  \n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 2.572265625,
          "content": "7.0.0 - Change target profiles to netstandard1.1, netstandard2.0, net5.0, net6.0 (BREAKING)\n      - Change default fallback behaviour to throw an exception with a report of the match attempts\n      - Add JSON and XML matchers\n      - Add support for synchronous HttpClient.Send #104\n      - Modernize source #41 and add SourceLink support #66\n      - Fix matching of encoded URL paths #116\n      - Throw a descriptive error when matching on a mocked request with no response #87 (thanks perfectsquircle!)\n      - Fix race condition on outstanding requests exception message #96 (thanks jr01!)\n\n6.0.0 - Assemblies are now strong named (binary BREAKING) #1\n\n5.0.0 - Align with official recommendations on multi-targetting HttpClient:\n      - Add netstandard2.0 target #61\n      - Change .NET 4.5 target to use in-band System.Net.Http reference (BREAKING) #61\n      - Remove PCL profile 111 (BREAKING) #18\n\n4.0.0 - Default Fallback message now includes request method and URL (BREAKING)\n      - Deprecated FallbackMessage property removed (BREAKING)\n\n3.3.0 - Added overloads for including custom headers in the response (thanks Sascha Kiefer!)\n\n3.2.1 - XML documentation is now included in the NuGet package. Fixes #52\n\n3.2.0 - MockHttpMessageHandler now tracks successful matches. Fixes #35\n      - Added WithExactQueryString / WithExactFormData overloads. Fixes #37\n      - Added BackendDefinitionBehavior to allow matching Backend Definitions when Request Expectations exist, but don't match. Fixes #45\n      - Fixed typo in Response(HttpResponseMessage) obsolete message. Fixes #44\n\n3.1.0 - Bump major version. Fixes #50\n\n1.5.1 - Respond(HttpClient) now works as expected. Fixes #39\n      - HttpResponseMessage can be disposed without breaking future requests. Fixes #33\n\n1.5.0 - WithHeaders now also matches against Content-* headers (thanks Cory Lucas!)\n\n1.4.0 - Cancellations and HttpClient timeouts are now supported. Fixes #29\n      - Added a .ToHttpClient() convenience method to HttpClientHandler\n\n1.3.1 - Multiple requests to the same mocked handler now return unique response streams. Fixes #21\n\n1.3.0 - Added support for .NET Core via the .NET Standard Library (1.1)\n\t  - Relative URLs now match correctly on Xamarin Android\n1.2.2 - Root absolute URLs defined with no trailing flash now match those with a slash (and vice versa)\n\n1.2.1 - HttpResponseMessage.RequestMessage is now assigned correctly\n\t  - Form/Query data matching now works with both + and %20 space encodings (thanks Jozef Izso!)\n\n1.2.0 - Changed PCL profile to support WP8.1\n\n1.1.0 - Added MockHttpMessageHandler.Fallback and HttpClient passthrough support"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0546875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2023 Richard Szalay\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "Package.props",
          "type": "blob",
          "size": 1.173828125,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project>\n\n  <!-- NuGet -->\n  <PropertyGroup>\n    <PackageId>RichardSzalay.MockHttp</PackageId>\n    <Version>7.0.0</Version>\n    <Authors>Richard Szalay</Authors>\n    <Company></Company>\n    <Description>Testing layer for Microsoft's HttpClient library</Description>\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\n    <Copyright>Copyright 2023 Richard Szalay</Copyright>\n  </PropertyGroup>\n\t\n  <!-- Assembly Versions -->\n  <PropertyGroup>\n    <VersionPrefix>$(Version)</VersionPrefix>\n    <AssemblyVersion>$(Version)</AssemblyVersion>\n    <FileVersion>$(Version)</FileVersion>\n  </PropertyGroup>\n\n  <!-- SourceLink -->\n  <PropertyGroup>\n    <PublishRepositoryUrl>true</PublishRepositoryUrl>\n    <IncludeSymbols>true</IncludeSymbols>\n    <DebugType>embedded</DebugType>\n  </PropertyGroup>\n\n  <Target Name=\"PreparePackageReleaseNotesFromFile\" BeforeTargets=\"GenerateNuspec\">\n    <ReadLinesFromFile File=\"../CHANGELOG\" >\n      <Output TaskParameter=\"Lines\" ItemName=\"ReleaseNoteLines\"/>\n    </ReadLinesFromFile>\n    <PropertyGroup>\n      <PackageReleaseNotes>@(ReleaseNoteLines, '%0a')</PackageReleaseNotes>\n    </PropertyGroup>\n  </Target>\n\n</Project>"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.9912109375,
          "content": "[![NuGet](http://img.shields.io/nuget/v/RichardSzalay.MockHttp.svg?style=flat-square)](https://www.nuget.org/packages/RichardSzalay.MockHttp/)[![NuGet](https://img.shields.io/nuget/dt/RichardSzalay.MockHttp.svg?style=flat-square)](https://www.nuget.org/packages/RichardSzalay.MockHttp/)\n\nMockHttp for HttpClient\n=====================\n\nMockHttp is a testing layer for Microsoft's HttpClient library. It allows stubbed responses to be configured for matched HTTP requests and can be used to test your application's service layer.\n\n## NuGet\n\n    PM> Install-Package RichardSzalay.MockHttp\n\n## How?\n\nMockHttp defines a replacement `HttpMessageHandler`, the engine that drives HttpClient, that provides a fluent configuration API and provides a canned response. The caller (eg. your application's service layer) remains unaware of its presence.\n\n## Usage\n\n```csharp\nvar mockHttp = new MockHttpMessageHandler();\n\n// Setup a respond for the user api (including a wildcard in the URL)\nmockHttp.When(\"http://localhost/api/user/*\")\n        .Respond(\"application/json\", \"{'name' : 'Test McGee'}\"); // Respond with JSON\n\n// Inject the handler or client into your application code\nvar client = mockHttp.ToHttpClient();\n\nvar response = await client.GetAsync(\"http://localhost/api/user/1234\");\n// or without async: var response = client.GetAsync(\"http://localhost/api/user/1234\").Result;\n\nvar json = await response.Content.ReadAsStringAsync();\n\n// No network connection required\nConsole.Write(json); // {'name' : 'Test McGee'}\n```\n\n### When (Backend Definitions) vs Expect (Request Expectations)\n\n`MockHttpMessageHandler` defines both `When` and `Expect`, which can be used to define responses. They both expose the same fluent API, but each works in a slightly different way.\n\nUsing `When` specifies a \"Backend Definition\". Backend Definitions can be matched against multiple times and in any order, but they won't match if there are any outstanding Request Expectations present (unless `BackendDefinitionBehavior.Always` is specified). If no Request Expectations match, `Fallback` will be used.\n\nUsing `Expect` specifies a \"Request Expectation\". Request Expectations match only once and in the order they were added in. Only once all expectations have been satisfied will Backend Definitions be evaluated. Calling `mockHttp.VerifyNoOutstandingExpectation()` will assert that there are no expectations that have yet to be called. Calling `ResetExpectations` clears the the queue of expectations.\n\nThis pattern is heavily inspired by [AngularJS's $httpBackend](https://docs.angularjs.org/api/ngMock/service/$httpBackend)\n\n### Matchers (With*)\n\nThe `With` and `Expect` methods return a `MockedRequest`, which can have additional constraints (called matchers) placed on them before specifying a response with `Respond`.\n\nPassing an HTTP method and URL to `When` or `Expect` is equivalent to applying a Method and Url matcher respectively. The following chart breaks down additional built in matchers and their usage:\n\n| Method | Description |\n| ------ | ----------- |\n| <pre>WithQueryString(\"key\", \"value\")<br /><br />WithQueryString(\"key=value&other=value\")<br /><br />WithQueryString(new Dictionary&lt;string,string><br />{<br />  { \"key\", \"value\" },<br />  { \"other\", \"value\" }<br />}<br /></pre> | Matches on one or more querystring values, ignoring additional values |\n| <pre>WithExactQueryString(\"key=value&other=value\")<br /><br />WithExactQueryString(new Dictionary&lt;string,string><br />{<br />  { \"key\", \"value\" },<br />  { \"other\", \"value\" }<br />}<br /></pre> | Matches on one or more querystring values, rejecting additional values |\n| <pre>WithFormData(\"key\", \"value\")<br /><br />WithFormData(\"key=value&other=value\")<br /><br />WithFormData(new Dictionary&lt;string,string><br />{<br />  { \"key\", \"value\" },<br />  { \"other\", \"value\" }<br />})<br /></pre> | Matches on one or more form data values, ignoring additional values |\n| <pre>WithExactFormData(\"key=value&other=value\")<br /><br />WithExactFormData(new Dictionary&lt;string,string><br />{<br />  { \"key\", \"value\" },<br />  { \"other\", \"value\" }<br />})<br /></pre> | Matches on one or more form data values, rejecting additional values |\n| <pre>WithContent(\"{'name':'McGee'}\")</pre> | Matches on the (post) content of the request |\n| <pre>WithPartialContent(\"McGee\")</pre> | Matches on the partial (post) content of the request |\n| <pre>WithHeaders(\"Authorization\", \"Basic abcdef\")<br /><br />WithHeaders(@\"Authorization: Basic abcdef<br />Accept: application/json\")<br /><br />WithHeaders(new Dictionary&lt;string,string><br />{<br />  { \"Authorization\", \"Basic abcdef\" },<br />  { \"Accept\", \"application/json\" }<br />})<br /></pre> | Matches on one or more HTTP header values |\n| <pre>WithJsonContent&lt;T>(new MyTypedRequest() [, jsonSerializerSettings])<br /><br />WithJsonContent&lt;T>(t => t.SomeProperty == 5 [, jsonSerializerSettings])</pre> | Matches on requests that have matching JSON content |\n| <pre>With(request => request.Content.Length > 50)</pre> | Applies custom matcher logic against an HttpRequestMessage |\n\nThese methods are chainable, making complex requirements easy to descirbe.\n\n### Verifying Matches\n\nWhen using Request Expectations via `Expect`, `MockHttpMessageHandler.VerifyNoOutstandingExpectation()` can be used to assert that there are no unmatched requests.\n\nFor other use cases, `GetMatchCount` will return the number of times a mocked request (returned by When / Expect) was called. This even works with `Fallback`, so you \ncan check how many unmatched requests there were.\n\n```csharp\nvar mockHttp = new MockHttpMessageHandler();\n\nvar request = mockHttp.When(\"http://localhost/api/user/*\")\n        .Respond(\"application/json\", \"{'name' : 'Test McGee'}\");\n\nvar client = mockHttp.ToHttpClient();\n\nawait client.GetAsync(\"http://localhost/api/user/1234\");\nawait client.GetAsync(\"http://localhost/api/user/2345\");\nawait client.GetAsync(\"http://localhost/api/user/3456\");\n\nConsole.Write(mockHttp.GetMatchCount(request)); // 3\n```\n\n### Match Behavior\n\nEach request is evaluated using the following process:\n\n1. If Request Expectations exist and the request matches the next expectation in the queue, the expectation is used to process the response and is then removed from the queue\n2. If no Request Expectations exist, or the handler was constructed with `BackendDefinitionBehavior.Always`, the first matching Backend Definition processes the response\n3. `MockHttpMessageHandler.Fallback` handles the request\n\n### Fallback\n\nThe `Fallback` property handles all requests that weren't handled by the match behavior. Since it is also a mocked request, any of the `Respond` overloads can be applied.\n\n```\n// Unhandled requests should throw an exception\nmockHttp.Fallback.Throw(new InvalidOperationException(\"No matching mock handler\"));\n\n// Unhandled requests should be executed against the network\nmockHttp.Fallback.Respond(new HttpClient());\n```\n\nThe default fallback behavior is to throw an exception that summarises why reach mocked request failed to match.\n\n### Examples\n\nThis example uses Expect to test an OAuth ticket recycle process:\n\n```csharp\n// Simulate an expired token\nmockHttp.Expect(\"/users/me\")\n        .WithQueryString(\"access_token\", \"old_token\")\n        .Respond(HttpStatusCode.Unauthorized);\n    \n// Expect the request to refresh the token and supply a new one\nmockHttp.Expect(\"/tokens/refresh\")\n        .WithFormData(\"refresh_token\", \"refresh_token\")\n        .Respond(\"application/json\", \"{'access_token' : 'new_token', 'refresh_token' : 'new_refresh'}\");\n    \n// Expect the original call to be retried with the new token\nmockHttp.Expect(\"/users/me\")\n        .WithQueryString(\"access_token\", \"new_token\")\n        .Respond(\"application/json\", \"{'name' : 'Test McGee'}\");\n    \nvar httpClient = mockHttp.ToHttpClient();\n\nvar userService = new UserService(httpClient);\n\nvar user = await userService.GetUserDetails();\n\nAssert.Equals(\"Test McGee\", user.Name);\nmockHttp.VerifyNoOutstandingExpectation();\n```\n\t\n## Platform Support\n\nMockHttp 7.0.0 and later are compiled for .NET 6, .NET 5, .NET Standard 2.0, .NET Standard 1.1\n\n[MockHttp 6.0.0](https://github.com/richardszalay/mockhttp/tree/v6.0.0#platform-support) has increased legacy platform support and can still be used, but is no longer updated with new features.\n\n## Build / Release\n\nClone the repository and build `RichardSzalay.MockHttp.sln` using MSBuild. NuGet package restore must be enabled.\n\nTo release, build:\n\n```\ndotnet pack -c Release --no-build ./RichardSzalay.MockHttp/RichardSzalay.MockHttp.csproj\n```\n\nIf you fork the project, simply rename the `nuspec` file accordingly and it will be picked up by the release script.\n\n## Contributors\n\nMany thanks to all the members of the community that have contributed PRs to this project:\n\n* [jozefizso](https://github.com/jozefizso)\n* [camiller2](https://github.com/camiller2)\n* [wislon](https://github.com/wislon)\n* [coryflucas](https://github.com/coryflucas)\n* [esskar](https://github.com/esskar)\n* [jericho](https://github.com/jericho)\n* [perfectsquircle](https://github.com/perfectsquircle)\n* [jr01](https://github.com/jr01)\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2023 Richard Szalay\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Release.proj",
          "type": "blob",
          "size": 2.3134765625,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project ToolsVersion=\"15.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n\n  <!-- Appveyor variables -->\n  <PropertyGroup>\n    <PackageVersion Condition=\"'$(APPVEYOR_BUILD_VERSION)' != '' And '$(PackageVersion)' == ''\">$(APPVEYOR_BUILD_VERSION)</PackageVersion>\n    <PackageVersionSuffix Condition=\"'$(APPVEYOR)' == 'True'\">pre</PackageVersionSuffix>\n  </PropertyGroup>\n  \n\t<PropertyGroup>\n\t\t<FullPackageVersion>$(PackageVersion)</FullPackageVersion>\n\t\t<FullPackageVersion Condition=\"'$(PackageVersionSuffix)' != ''\">$(FullPackageVersion)-$(PackageVersionSuffix)</FullPackageVersion>\n\t</PropertyGroup>\n\n\t<Target Name=\"WriteAssemblyVersionInfo\">\n\t\t<Error Condition=\"'$(PackageVersion)' == ''\"\n\t\t\t\tText=\"PackageVersion must be specified $(APPVEYOR_BUILD_VERSION)\" />\n\t\n\t\t<ItemGroup>\n\t\t\t<AssemblyVersionLines \n\t\t\t\tInclude=\"[assembly: System.Reflection.AssemblyVersion(&quot;$(PackageVersion)&quot;)]\" />\n\t\t\t<AssemblyVersionLines \n\t\t\t\tInclude=\"[assembly: System.Reflection.AssemblyFileVersion(&quot;$(FullPackageVersion)&quot;)]\" />\n\t\t</ItemGroup>\n\t\t<WriteLinesToFile File=\"AssemblyVersionInfo.cs\" Lines=\"@(AssemblyVersionLines)\" Overwrite=\"true\" />\n\t</Target>\n\n  <Target Name=\"PatchNuspecVersion\">\n    <XmlPoke\n      XmlInputPath=\"RichardSzalay.MockHttp.nuspec\"\n      Query=\"/package/metadata/version\"\n      Value=\"$(FullPackageVersion)\"\n      />\n  </Target>\n\n  <Target Name=\"PatchVersion\" DependsOnTargets=\"WriteAssemblyVersionInfo;PatchNuspecVersion\">\n    \n  </Target>\n\n  <Target Name=\"Restore\">\n    <MSBuild Projects=\"RichardSzalay.MockHttp.sln\" Targets=\"Restore\" Properties=\"Configuration=Release;Platform=Any CPU\" />\n  </Target>\n\t\n  <Target Name=\"Build\" DependsOnTargets=\"PatchVersion;Restore\">\n    <MSBuild Projects=\"RichardSzalay.MockHttp.sln\" Properties=\"Configuration=Release;Platform=Any CPU\" />\n  </Target>\n\n\t<Target Name=\"Package\" DependsOnTargets=\"Build\">\n\t\t<Exec Command=\"dotnet pack --no-build -c Release -o . RichardSzalay.MockHttp.NetStandard\\RichardSzalay.MockHttp.NetStandard.csproj\" />\n\t</Target>\n\t\n\t<Target Name=\"Push\" DependsOnTargets=\"Package\">\n\t\t<ItemGroup>\n\t\t\t<NuSpecFiles Include=\"*.nuspec\" />\n\t\t</ItemGroup>\n\t\t\n\t\t<Exec Command=\"dotnet nuget push @(NuSpecFiles->'%(Filename)').$(FullPackageVersion).nupkg --source nuget.org -k $(NuGetApiKey)\" />\n\t</Target>\n\n</Project>"
        },
        {
          "name": "RichardSzalay.MockHttp.Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "RichardSzalay.MockHttp.nuspec",
          "type": "blob",
          "size": 4.4609375,
          "content": "<?xml version=\"1.0\"?>\n<package>\n  <metadata>\n    <id>RichardSzalay.MockHttp</id>\n    <version>7.0.0</version>\n    <title>MockHttp for HttpClient</title>\n    <authors>Richard Szalay</authors>\n    <owners>Richard Szalay</owners>\n    <licenseUrl>https://github.com/richardszalay/mockhttp/blob/master/LICENSE</licenseUrl>\n    <projectUrl>https://github.com/richardszalay/mockhttp</projectUrl>\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\n    <description>Testing layer for Microsoft's HttpClient library</description>\n    <releaseNotes>7.0.0 - New build system and modernise target frameworks (BREAKING)\n6.0.0 - Assemblies are now strong named (binary BREAKING) #1\n5.0.0 - Align with official recommendations on multi-targetting HttpClient:\n      - Add netstandard2.0 target #61\n      - Change .NET 4.5 target to use in-band System.Net.Http reference (BREAKING) #61\n      - Remove PCL profile 111 (BREAKING) #18\n4.0.0 - Default Fallback message now includes request method and URL (BREAKING)\n      - Deprecated FallbackMessage property removed (BREAKING)\n3.3.0 - Added overloads for including custom headers in the response (thanks Sascha Kiefer!)\n3.2.1 - XML documentation is now included in the NuGet package. Fixes #52\n3.2.0 - MockHttpMessageHandler now tracks successful matches. Fixes #35\n      - Added WithExactQueryString / WithExactFormData overloads. Fixes #37\n      - Added BackendDefinitionBehavior to allow matching Backend Definitions when Request Expectations exist, but don't match. Fixes #45\n      - Fixed typo in Response(HttpResponseMessage) obsolete message. Fixes #44\n3.1.0 - Bump major version. Fixes #50\n1.5.1 - Respond(HttpClient) now works as expected. Fixes #39\n      - HttpResponseMessage can be disposed without breaking future requests. Fixes #33\n1.5.0 - WithHeaders now also matches against Content-* headers (thanks Cory Lucas!)\n1.4.0 - Cancellations and HttpClient timeouts are now supported. Fixes #29\n      - Added a .ToHttpClient() convenience method to HttpClientHandler\n1.3.1 - Multiple requests to the same mocked handler now return unique response streams. Fixes #21\n1.3.0 - Added support for .NET Core via the .NET Standard Library (1.1)\n\t    - Relative URLs now match correctly on Xamarin Android\n1.2.2 - Root absolute URLs defined with no trailing flash now match those with a slash (and vice versa)\n1.2.1 - HttpResponseMessage.RequestMessage is now assigned correctly\n\t    - Form/Query data matching now works with both + and %20 space encodings (thanks Jozef Izso!)\n1.2.0 - Changed PCL profile to support WP8.1\n1.1.0 - Added MockHttpMessageHandler.Fallback and HttpClient passthrough support</releaseNotes>\n    <copyright>Copyright 2022 Richard Szalay</copyright>\n    <tags>httpclient test mock fake stub</tags>\n    <!--<dependencies>\n      <group targetFramework=\".NETStandard2.0\">\n      </group>\n      <group targetFramework=\".NETStandard1.1\">\n        <dependency id=\"System.Net.Http\" version=\"4.1.0\" />\n        <dependency id=\"System.Runtime.Extensions\" version=\"4.1.0\" />\n        <dependency id=\"System.Collections\" version=\"4.0.11\" />\n        <dependency id=\"System.Linq\" version=\"4.1.0\" />\n        <dependency id=\"System.Threading\" version=\"4.0.11\" />\n      </group>\n      <group targetFramework=\".NETFramework4.5\">\n      </group>\n      <group targetFramework=\".NETFramework4.0\">\n        <dependency id=\"Microsoft.Net.Http\" version=\"2.1.10\" />\n      </group>\n      <group targetFramework=\".NETPortable0.0-Profile328\">\n        <dependency id=\"Microsoft.Net.Http\" version=\"2.1.10\" />\n      </group>\n      <group targetFramework=\"MonoAndroid10\">\n      </group>\n      <group targetFramework=\"MonoTouch10\">\n      </group>\n    </dependencies>-->\n    <!--<frameworkAssemblies>\n      <frameworkAssembly assemblyName=\"System.Net.Http\" targetFramework=\".NETFramework4.5\" />\n      <frameworkAssembly assemblyName=\"System.Net\" targetFramework=\"MonoAndroid10\" />\n      <frameworkAssembly assemblyName=\"System.Net\" targetFramework=\"MonoTouch10\" />\n    </frameworkAssemblies>-->\n  </metadata>\n  <files>\n    <file src=\"RichardSzalay.MockHttp\\bin\\Release\\netstandard1.1\\RichardSzalay.MockHttp.dll\" target=\"lib\\netstandard1.1\" />\n    <file src=\"RichardSzalay.MockHttp\\bin\\Release\\netstandard1.1\\RichardSzalay.MockHttp.xml\" target=\"lib\\netstandard1.1\" />\n    <file src=\"RichardSzalay.MockHttp\\bin\\Release\\netstandard2.0\\RichardSzalay.MockHttp.dll\" target=\"lib\\netstandard2.0\" />\n    <file src=\"RichardSzalay.MockHttp\\bin\\Release\\netstandard2.0\\RichardSzalay.MockHttp.xml\" target=\"lib\\netstandard2.0\" />\n  </files>\n</package>"
        },
        {
          "name": "RichardSzalay.MockHttp.sln",
          "type": "blob",
          "size": 3.96875,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.1.32210.238\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{7DE23763-EAF5-4CDA-B937-1B8C6159104D}\"\n\tProjectSection(SolutionItems) = preProject\n\t\tCHANGELOG = CHANGELOG\n\t\t.github\\workflows\\ci.yml = .github\\workflows\\ci.yml\n\t\tLICENSE = LICENSE\n\t\tPackage.props = Package.props\n\t\tREADME.md = README.md\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"RichardSzalay.MockHttp.Tests\", \"RichardSzalay.MockHttp.Tests\\RichardSzalay.MockHttp.Tests.csproj\", \"{1E613FE0-AA8E-40D5-B310-BCD2A798CB1D}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"RichardSzalay.MockHttp\", \"RichardSzalay.MockHttp\\RichardSzalay.MockHttp.csproj\", \"{7E7DA73E-52C4-429A-931D-71D414DA8C76}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tDebug|ARM = Debug|ARM\n\t\tDebug|x64 = Debug|x64\n\t\tDebug|x86 = Debug|x86\n\t\tRelease|Any CPU = Release|Any CPU\n\t\tRelease|ARM = Release|ARM\n\t\tRelease|x64 = Release|x64\n\t\tRelease|x86 = Release|x86\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{1E613FE0-AA8E-40D5-B310-BCD2A798CB1D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{1E613FE0-AA8E-40D5-B310-BCD2A798CB1D}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{1E613FE0-AA8E-40D5-B310-BCD2A798CB1D}.Debug|ARM.ActiveCfg = Debug|Any CPU\n\t\t{1E613FE0-AA8E-40D5-B310-BCD2A798CB1D}.Debug|ARM.Build.0 = Debug|Any CPU\n\t\t{1E613FE0-AA8E-40D5-B310-BCD2A798CB1D}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{1E613FE0-AA8E-40D5-B310-BCD2A798CB1D}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{1E613FE0-AA8E-40D5-B310-BCD2A798CB1D}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{1E613FE0-AA8E-40D5-B310-BCD2A798CB1D}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{1E613FE0-AA8E-40D5-B310-BCD2A798CB1D}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{1E613FE0-AA8E-40D5-B310-BCD2A798CB1D}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{1E613FE0-AA8E-40D5-B310-BCD2A798CB1D}.Release|ARM.ActiveCfg = Release|Any CPU\n\t\t{1E613FE0-AA8E-40D5-B310-BCD2A798CB1D}.Release|ARM.Build.0 = Release|Any CPU\n\t\t{1E613FE0-AA8E-40D5-B310-BCD2A798CB1D}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{1E613FE0-AA8E-40D5-B310-BCD2A798CB1D}.Release|x64.Build.0 = Release|Any CPU\n\t\t{1E613FE0-AA8E-40D5-B310-BCD2A798CB1D}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{1E613FE0-AA8E-40D5-B310-BCD2A798CB1D}.Release|x86.Build.0 = Release|Any CPU\n\t\t{7E7DA73E-52C4-429A-931D-71D414DA8C76}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{7E7DA73E-52C4-429A-931D-71D414DA8C76}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{7E7DA73E-52C4-429A-931D-71D414DA8C76}.Debug|ARM.ActiveCfg = Debug|Any CPU\n\t\t{7E7DA73E-52C4-429A-931D-71D414DA8C76}.Debug|ARM.Build.0 = Debug|Any CPU\n\t\t{7E7DA73E-52C4-429A-931D-71D414DA8C76}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{7E7DA73E-52C4-429A-931D-71D414DA8C76}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{7E7DA73E-52C4-429A-931D-71D414DA8C76}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{7E7DA73E-52C4-429A-931D-71D414DA8C76}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{7E7DA73E-52C4-429A-931D-71D414DA8C76}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{7E7DA73E-52C4-429A-931D-71D414DA8C76}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{7E7DA73E-52C4-429A-931D-71D414DA8C76}.Release|ARM.ActiveCfg = Release|Any CPU\n\t\t{7E7DA73E-52C4-429A-931D-71D414DA8C76}.Release|ARM.Build.0 = Release|Any CPU\n\t\t{7E7DA73E-52C4-429A-931D-71D414DA8C76}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{7E7DA73E-52C4-429A-931D-71D414DA8C76}.Release|x64.Build.0 = Release|Any CPU\n\t\t{7E7DA73E-52C4-429A-931D-71D414DA8C76}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{7E7DA73E-52C4-429A-931D-71D414DA8C76}.Release|x86.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {D349BD47-EE2A-4FDF-954F-C2F511313D79}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "RichardSzalay.MockHttp",
          "type": "tree",
          "content": null
        },
        {
          "name": "mockhttp.snk",
          "type": "blob",
          "size": 0.58203125,
          "content": null
        }
      ]
    }
  ]
}