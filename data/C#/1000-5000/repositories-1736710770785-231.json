{
  "metadata": {
    "timestamp": 1736710770785,
    "page": 231,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Tyrrrz/YoutubeExplode",
      "stars": 3051,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".assets",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.099609375,
          "content": "# User-specific files\n.vs/\n.idea/\n*.suo\n*.user\n\n# Build results\nbin/\nobj/\n\n# Test results\nTestResults/"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 1.3017578125,
          "content": "<Project>\n\n  <PropertyGroup>\n    <Version>0.0.0-dev</Version>\n    <Company>Tyrrrz</Company>\n    <Copyright>Copyright (C) Oleksii Holub</Copyright>\n    <LangVersion>latest</LangVersion>\n    <Nullable>enable</Nullable>\n    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>\n    <CheckEolTargetFramework>false</CheckEolTargetFramework>\n    <SuppressTfmSupportBuildWarnings>true</SuppressTfmSupportBuildWarnings>\n    <IsPackable>false</IsPackable>\n  </PropertyGroup>\n\n  <!-- Disable nullability warnings on frameworks where BCL is not annotated -->\n  <PropertyGroup Condition=\"'$(TargetFramework)' == 'netstandard2.0' OR '$(TargetFramework)' == 'net461'\">\n    <Nullable>annotations</Nullable>\n  </PropertyGroup>\n\n  <PropertyGroup>\n    <Authors>$(Company)</Authors>\n    <Description>Abstraction layer over YouTube's internal API. Note: this package has limited availability in Russia and Belarus.</Description>\n    <PackageTags>youtube video download playlist user channel closed caption tracks subtitles parse extract metadata info net core standard</PackageTags>\n    <PackageProjectUrl>https://github.com/Tyrrrz/YoutubeExplode</PackageProjectUrl>\n    <PackageReleaseNotes>https://github.com/Tyrrrz/YoutubeExplode/releases</PackageReleaseNotes>\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\n  </PropertyGroup>\n\n</Project>"
        },
        {
          "name": "License.txt",
          "type": "blob",
          "size": 1.048828125,
          "content": "MIT License\n\nCopyright (c) 2016-2024 Oleksii Holub\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "NuGet.config",
          "type": "blob",
          "size": 0.3125,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <clear />\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\n  </packageSources>\n  <config>\n    <add key=\"defaultPushSource\" value=\"https://api.nuget.org/v3/index.json\" />\n  </config>\n</configuration>\n"
        },
        {
          "name": "Readme.md",
          "type": "blob",
          "size": 14.6708984375,
          "content": "# YoutubeExplode\n\n[![Status](https://img.shields.io/badge/status-maintenance-ffd700.svg)](https://github.com/Tyrrrz/.github/blob/master/docs/project-status.md)\n[![Made in Ukraine](https://img.shields.io/badge/made_in-ukraine-ffd700.svg?labelColor=0057b7)](https://tyrrrz.me/ukraine)\n[![Build](https://img.shields.io/github/actions/workflow/status/Tyrrrz/YoutubeExplode/main.yml?branch=master)](https://github.com/Tyrrrz/YoutubeExplode/actions)\n[![Coverage](https://img.shields.io/codecov/c/github/Tyrrrz/YoutubeExplode/master)](https://codecov.io/gh/Tyrrrz/YoutubeExplode)\n[![Version](https://img.shields.io/nuget/v/YoutubeExplode.svg)](https://nuget.org/packages/YoutubeExplode)\n[![Downloads](https://img.shields.io/nuget/dt/YoutubeExplode.svg)](https://nuget.org/packages/YoutubeExplode)\n[![Discord](https://img.shields.io/discord/869237470565392384?label=discord)](https://discord.gg/2SUWKFnHSm)\n[![Fuck Russia](https://img.shields.io/badge/fuck-russia-e4181c.svg?labelColor=000000)](https://twitter.com/tyrrrz/status/1495972128977571848)\n\n<table>\n    <tr>\n        <td width=\"99999\" align=\"center\">Development of this project is entirely funded by the community. <b><a href=\"https://tyrrrz.me/donate\">Consider donating to support!</a></b></td>\n    </tr>\n</table>\n\n<p align=\"center\">\n    <img src=\"favicon.png\" alt=\"Icon\" />\n</p>\n\n**YoutubeExplode** is a library that provides an interface to query metadata of YouTube videos, playlists and channels, as well as to resolve and download video streams and closed caption tracks.\nBehind a layer of abstraction, this library works by scraping raw page data and exploiting reverse-engineered internal endpoints.\n\n> 📝 Interested in the inner workings of this library?\n> See the [Reverse-Engineering YouTube](https://tyrrrz.me/blog/reverse-engineering-youtube-revisited) article.\n\n**Extension packages**:\n\n- [YoutubeExplode.Converter](YoutubeExplode.Converter) — provides an interface to download and convert videos using FFmpeg\n\n## Terms of use<sup>[[?]](https://github.com/Tyrrrz/.github/blob/master/docs/why-so-political.md)</sup>\n\nBy using this project or its source code, for any purpose and in any shape or form, you grant your **implicit agreement** to all the following statements:\n\n- You **condemn Russia and its military aggression against Ukraine**\n- You **recognize that Russia is an occupant that unlawfully invaded a sovereign state**\n- You **support Ukraine's territorial integrity, including its claims over temporarily occupied territories of Crimea and Donbas**\n- You **reject false narratives perpetuated by Russian state propaganda**\n\nTo learn more about the war and how you can help, [click here](https://tyrrrz.me/ukraine). Glory to Ukraine! 🇺🇦\n\n## Install\n\n- 📦 [NuGet](https://nuget.org/packages/YoutubeExplode): `dotnet add package YoutubeExplode`\n\n## Screenshots\n\n![demo](.assets/demo.png)\n\n## Usage\n\n**YoutubeExplode** exposes its functionality through a single entry point — the `YoutubeClient` class.\nCreate an instance of this class and use the provided operations on `Videos`, `Playlists`, `Channels`, and `Search` properties to send requests.\n\n### Videos\n\n#### Retrieving video metadata\n\nTo retrieve the metadata associated with a YouTube video, call `Videos.GetAsync(...)`:\n\n```csharp\nusing YoutubeExplode;\n\nvar youtube = new YoutubeClient();\n\n// You can specify either the video URL or its ID\nvar videoUrl = \"https://youtube.com/watch?v=u_yIGGhubZs\";\nvar video = await youtube.Videos.GetAsync(videoUrl);\n\nvar title = video.Title; // \"Collections - Blender 2.80 Fundamentals\"\nvar author = video.Author.ChannelTitle; // \"Blender\"\nvar duration = video.Duration; // 00:07:20\n```\n\n#### Downloading video streams\n\nEvery YouTube video has a number of streams available, differing in containers, video quality, bitrate, framerate, and other parameters.\nAdditionally, the streams are further divided into 3 categories based on their content:\n\n- ~~Muxed streams — contain both video and audio~~ (no longer provided by YouTube)\n- Audio-only streams — contain only audio\n- Video-only streams — contain only video\n\n> **Warning**:\n> Muxed streams contain both audio and video, but these streams are limited in quality (up to 720p30).\n> To download the video in the highest available quality, you will need to resolve the best audio-only and video-only streams separately and then mux them together.\n> The muxing process can be performed using FFmpeg with the help of the [**YoutubeExplode.Converter**](YoutubeExplode.Converter) package.\n\n> **Warning**:\n> Muxed streams are deprecated by YouTube and are not guaranteed to be available for every video.\n> If possible, avoid relying on them too much and instead perform muxing manually using the provided audio-only and video-only streams.\n\nYou can request the manifest that lists all available streams for a particular video by calling `Videos.Streams.GetManifestAsync(...)`:\n\n```csharp\nusing YoutubeExplode;\n\nvar youtube = new YoutubeClient();\n\nvar videoUrl = \"https://youtube.com/watch?v=u_yIGGhubZs\";\nvar streamManifest = await youtube.Videos.Streams.GetManifestAsync(videoUrl);\n```\n\nOnce the manifest is obtained, you can filter through the streams and identify the ones you're interested in:\n\n```csharp\nusing YoutubeExplode;\nusing YoutubeExplode.Videos.Streams;\n\n// ...\n\n// Get the highest bitrate audio-only stream\nvar streamInfo = streamManifest.GetAudioOnlyStreams().GetWithHighestBitrate();\n\n// ...or the highest quality MP4 video-only stream\nvar streamInfo = streamManifest\n    .GetVideoOnlyStreams()\n    .Where(s => s.Container == Container.Mp4)\n    .GetWithHighestVideoQuality()\n```\n\nFinally, you can resolve the actual stream represented by the specified metadata using `Videos.Streams.GetAsync(...)` or download it directly to a file with `Videos.Streams.DownloadAsync(...)`:\n\n```csharp\n// ...\n\n// Get the actual stream\nvar stream = await youtube.Videos.Streams.GetAsync(streamInfo);\n\n// Download the stream to a file\nawait youtube.Videos.Streams.DownloadAsync(streamInfo, $\"video.{streamInfo.Container}\");\n```\n\n> **Warning**:\n> While the `Url` property in the stream metadata can be used to access the underlying content, you need a series of carefully crafted HTTP requests in order to do so.\n> It's highly recommended to use `Videos.Streams.GetAsync(...)` or `Videos.Streams.DownloadAsync(...)` instead, as they will perform all the heavy lifting for you.\n\n#### Downloading closed captions\n\nClosed captions can be downloaded in a similar way to media streams.\nTo get the list of available closed caption tracks, call `Videos.ClosedCaptions.GetManifestAsync(...)`:\n\n```csharp\nusing YoutubeExplode;\n\nvar youtube = new YoutubeClient();\n\nvar videoUrl = \"https://youtube.com/watch?v=u_yIGGhubZs\";\nvar trackManifest = await youtube.Videos.ClosedCaptions.GetManifestAsync(videoUrl);\n```\n\nThen retrieve the metadata for a particular track:\n\n```csharp\n// ...\n\n// Find closed caption track in English\nvar trackInfo = trackManifest.GetByLanguage(\"en\");\n```\n\nFinally, use `Videos.ClosedCaptions.GetAsync(...)` to get the actual content of the track:\n\n```csharp\n// ...\n\nvar track = await youtube.Videos.ClosedCaptions.GetAsync(trackInfo);\n\n// Get the caption displayed at 0:35\nvar caption = track.GetByTime(TimeSpan.FromSeconds(35));\nvar text = caption.Text; // \"collection acts as the parent collection\"\n```\n\nYou can also download the closed caption track in the SRT file format with `Videos.ClosedCaptions.DownloadAsync(...)`:\n\n```csharp\n// ...\n\nawait youtube.Videos.ClosedCaptions.DownloadAsync(trackInfo, \"cc_track.srt\");\n```\n\n### Playlists\n\n#### Retrieving playlist metadata\n\nYou can get the metadata associated with a YouTube playlist by calling the `Playlists.GetAsync(...)` method:\n\n```csharp\nusing YoutubeExplode;\n\nvar youtube = new YoutubeClient();\n\nvar playlistUrl = \"https://youtube.com/playlist?list=PLa1F2ddGya_-UvuAqHAksYnB0qL9yWDO6\";\nvar playlist = await youtube.Playlists.GetAsync(playlistUrl);\n\nvar title = playlist.Title; // \"First Steps - Blender 2.80 Fundamentals\"\nvar author = playlist.Author.ChannelTitle; // \"Blender\"\n```\n\n#### Retrieving videos included in a playlist\n\nTo get the videos included in a playlist, call `Playlists.GetVideosAsync(...)`:\n\n```csharp\nusing YoutubeExplode;\nusing YoutubeExplode.Common;\n\nvar youtube = new YoutubeClient();\nvar playlistUrl = \"https://youtube.com/playlist?list=PLa1F2ddGya_-UvuAqHAksYnB0qL9yWDO6\";\n\n// Get all playlist videos\nvar videos = await youtube.Playlists.GetVideosAsync(playlistUrl);\n\n// Get only the first 20 playlist videos\nvar videosSubset = await youtube.Playlists.GetVideosAsync(playlistUrl).CollectAsync(20);\n```\n\nYou can also enumerate the videos iteratively without waiting for the whole list to load:\n\n```csharp\nusing YoutubeExplode;\n\nvar youtube = new YoutubeClient();\nvar playlistUrl = \"https://youtube.com/playlist?list=PLa1F2ddGya_-UvuAqHAksYnB0qL9yWDO6\";\n\nawait foreach (var video in youtube.Playlists.GetVideosAsync(playlistUrl))\n{\n    var title = video.Title;\n    var author = video.Author;\n}\n```\n\nIf you need precise control over how many requests you send to YouTube, use `Playlists.GetVideoBatchesAsync(...)` which returns videos wrapped in batches:\n\n```csharp\nusing YoutubeExplode;\n\nvar youtube = new YoutubeClient();\nvar playlistUrl = \"https://youtube.com/playlist?list=PLa1F2ddGya_-UvuAqHAksYnB0qL9yWDO6\";\n\n// Each batch corresponds to one request\nawait foreach (var batch in youtube.Playlists.GetVideoBatchesAsync(playlistUrl))\n{\n    foreach (var video in batch.Items)\n    {\n        var title = video.Title;\n        var author = video.Author;\n    }\n}\n```\n\n> **Note**:\n> You can craft playlist IDs to fetch special auto-generated playlists, such as music mixes, popular channel uploads, liked videos, and more.\n> See [this reference](https://wiki.archiveteam.org/index.php/YouTube/Technical_details#Playlists) for more information.\n\n### Channels\n\n#### Retrieving channel metadata\n\nYou can get the metadata associated with a YouTube channel by calling the `Channels.GetAsync(...)` method:\n\n```csharp\nusing YoutubeExplode;\n\nvar youtube = new YoutubeClient();\n\nvar channelUrl = \"https://youtube.com/channel/UCSMOQeBJ2RAnuFungnQOxLg\";\nvar channel = await youtube.Channels.GetAsync(channelUrl);\n\nvar title = channel.Title; // \"Blender\"\n```\n\nYou can also get the channel metadata by username or profile URL with `Channels.GetByUserAsync(...)`:\n\n```csharp\nusing YoutubeExplode;\n\nvar youtube = new YoutubeClient();\n\nvar channelUrl = \"https://youtube.com/user/BlenderFoundation\";\nvar channel = await youtube.Channels.GetByUserAsync(channelUrl);\n\nvar id = channel.Id; // \"UCSMOQeBJ2RAnuFungnQOxLg\"\n```\n\nTo get the channel metadata by slug or legacy custom URL, use `Channels.GetBySlugAsync(...)`:\n\n```csharp\nusing YoutubeExplode;\n\nvar youtube = new YoutubeClient();\n\nvar channelUrl = \"https://youtube.com/c/BlenderFoundation\";\nvar channel = await youtube.Channels.GetBySlugAsync(channelUrl);\n\nvar id = channel.Id; // \"UCSMOQeBJ2RAnuFungnQOxLg\"\n```\n\nTo get the channel metadata by handle or custom URL, use `Channels.GetByHandleAsync(...)`:\n\n```csharp\nusing YoutubeExplode;\n\nvar youtube = new YoutubeClient();\n\nvar channelUrl = \"https://youtube.com/@BeauMiles\";\nvar channel = await youtube.Channels.GetByHandleAsync(channelUrl);\n\nvar id = channel.Id; // \"UCm325cMiw9B15xl22_gr6Dw\"\n```\n\n#### Retrieving channel uploads\n\nTo get the list of videos uploaded by a channel, call `Channels.GetUploadsAsync(...)`:\n\n```csharp\nusing YoutubeExplode;\nusing YoutubeExplode.Common;\n\nvar youtube = new YoutubeClient();\nvar channelUrl = \"https://youtube.com/channel/UCSMOQeBJ2RAnuFungnQOxLg\";\n\nvar videos = await youtube.Channels.GetUploadsAsync(channelUrl);\n```\n\n### Search\n\nYou can execute a search query by calling the `Search.GetResultsAsync(...)` method.\nEach search result may represent either a video, a playlist, or a channel, so you need to apply pattern matching to handle the corresponding cases:\n\n```csharp\nusing YoutubeExplode;\n\nvar youtube = new YoutubeClient();\n\nawait foreach (var result in youtube.Search.GetResultsAsync(\"blender tutorials\"))\n{\n    // Use pattern matching to handle different results (videos, playlists, channels)\n    switch (result)\n    {\n        case VideoSearchResult video:\n        {\n            var id = video.Id;\n            var title = video.Title;\n            var duration = video.Duration;\n            break;\n        }\n        case PlaylistSearchResult playlist:\n        {\n            var id = playlist.Id;\n            var title = playlist.Title;\n            break;\n        }\n        case ChannelSearchResult channel:\n        {\n            var id = channel.Id;\n            var title = channel.Title;\n            break;\n        }\n    }\n}\n```\n\nTo limit the results to a specific type, use `Search.GetVideosAsync(...)`, `Search.GetPlaylistsAsync(...)`, or `Search.GetChannelsAsync(...)`:\n\n```csharp\nusing YoutubeExplode;\nusing YoutubeExplode.Common;\n\nvar youtube = new YoutubeClient();\n\nvar videos = await youtube.Search.GetVideosAsync(\"blender tutorials\");\nvar playlists = await youtube.Search.GetPlaylistsAsync(\"blender tutorials\");\nvar channels = await youtube.Search.GetChannelsAsync(\"blender tutorials\");\n```\n\nSimilarly to playlists, you can also enumerate results in batches by calling `Search.GetResultBatchesAsync(...)`:\n\n```csharp\nusing YoutubeExplode;\n\nvar youtube = new YoutubeClient();\n\n// Each batch corresponds to one request\nawait foreach (var batch in youtube.Search.GetResultBatchesAsync(\"blender tutorials\"))\n{\n    foreach (var result in batch.Items)\n    {\n        switch (result)\n        {\n            case VideoSearchResult videoResult:\n            {\n                // ...\n            }\n            case PlaylistSearchResult playlistResult:\n            {\n                // ...\n            }\n            case ChannelSearchResult channelResult:\n            {\n                // ...\n            }\n        }\n    }\n}\n```\n\n### Authentication\n\nYou can access private videos and playlists by providing cookies that correspond to a pre-authenticated YouTube account.\nTo do that, create an instance of `YoutubeClient` using a constructor that accepts `IReadOnlyList<Cookie>`:\n\n```csharp\nusing YoutubeExplode;\n\n// Perform authentication and extract cookies\nvar cookies = ...;\n\n// Cookie collection must be of type IReadOnlyList<System.Net.Cookie>\nvar youtube = new YoutubeClient(cookies);\n```\n\nIn order to actually perform the authentication, you can use an embedded browser such as [WebView](https://nuget.org/packages/Microsoft.Web.WebView2) to navigate the user to the [YouTube login page](https://accounts.google.com/ServiceLogin?continue=https%3A%2F%2Fwww.youtube.com), let them log in, and then extract the cookies from the browser.\n\n## Etymology\n\nThe \"Explode\" in **YoutubeExplode** comes from the name of a PHP function that splits up strings, [`explode(...)`](https://php.net/manual/en/function.explode.php). When I was starting the development of this library, most of the reference source code I read was written in PHP, hence the inspiration for the name."
        },
        {
          "name": "YoutubeExplode.Converter.Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "YoutubeExplode.Converter",
          "type": "tree",
          "content": null
        },
        {
          "name": "YoutubeExplode.Demo.Cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "YoutubeExplode.Demo.Gui",
          "type": "tree",
          "content": null
        },
        {
          "name": "YoutubeExplode.Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "YoutubeExplode.sln",
          "type": "blob",
          "size": 3.9306640625,
          "content": "﻿Microsoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 16\nVisualStudioVersion = 16.0.28803.352\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{2D3632A9-3DE4-4E64-AC3E-94810F2F55D0}\"\n\tProjectSection(SolutionItems) = preProject\n\t\tLicense.txt = License.txt\n\t\tReadme.md = Readme.md\n\t\tDirectory.Build.props = Directory.Build.props\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"YoutubeExplode.Demo.Cli\", \"YoutubeExplode.Demo.Cli\\YoutubeExplode.Demo.Cli.csproj\", \"{6983B0A4-44B0-4FAF-81C7-94CC784570F0}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"YoutubeExplode.Tests\", \"YoutubeExplode.Tests\\YoutubeExplode.Tests.csproj\", \"{5E5CDC04-EA05-46CC-8D72-970F0F0E2CD1}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"YoutubeExplode\", \"YoutubeExplode\\YoutubeExplode.csproj\", \"{2019E360-0E05-4824-9EDE-7723AF45E10C}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"YoutubeExplode.Demo.Gui\", \"YoutubeExplode.Demo.Gui\\YoutubeExplode.Demo.Gui.csproj\", \"{21F838B4-11B6-4C54-957A-9B7EFDE8F19E}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"YoutubeExplode.Converter\", \"YoutubeExplode.Converter\\YoutubeExplode.Converter.csproj\", \"{CF1CA267-32A2-4E91-8207-8FA9C697BC8B}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"YoutubeExplode.Converter.Tests\", \"YoutubeExplode.Converter.Tests\\YoutubeExplode.Converter.Tests.csproj\", \"{DF44A908-CC76-406C-AA7B-9E9C03FE97D2}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{6983B0A4-44B0-4FAF-81C7-94CC784570F0}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{6983B0A4-44B0-4FAF-81C7-94CC784570F0}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{6983B0A4-44B0-4FAF-81C7-94CC784570F0}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{6983B0A4-44B0-4FAF-81C7-94CC784570F0}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{5E5CDC04-EA05-46CC-8D72-970F0F0E2CD1}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{5E5CDC04-EA05-46CC-8D72-970F0F0E2CD1}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{5E5CDC04-EA05-46CC-8D72-970F0F0E2CD1}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{5E5CDC04-EA05-46CC-8D72-970F0F0E2CD1}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{2019E360-0E05-4824-9EDE-7723AF45E10C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{2019E360-0E05-4824-9EDE-7723AF45E10C}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{2019E360-0E05-4824-9EDE-7723AF45E10C}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{2019E360-0E05-4824-9EDE-7723AF45E10C}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{21F838B4-11B6-4C54-957A-9B7EFDE8F19E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{21F838B4-11B6-4C54-957A-9B7EFDE8F19E}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{21F838B4-11B6-4C54-957A-9B7EFDE8F19E}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{21F838B4-11B6-4C54-957A-9B7EFDE8F19E}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{CF1CA267-32A2-4E91-8207-8FA9C697BC8B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{CF1CA267-32A2-4E91-8207-8FA9C697BC8B}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{CF1CA267-32A2-4E91-8207-8FA9C697BC8B}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{CF1CA267-32A2-4E91-8207-8FA9C697BC8B}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{DF44A908-CC76-406C-AA7B-9E9C03FE97D2}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{DF44A908-CC76-406C-AA7B-9E9C03FE97D2}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{DF44A908-CC76-406C-AA7B-9E9C03FE97D2}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{DF44A908-CC76-406C-AA7B-9E9C03FE97D2}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {DEA5BDC6-C56D-4AC1-A8C6-2C64A5A75FDD}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "YoutubeExplode",
          "type": "tree",
          "content": null
        },
        {
          "name": "favicon.ico",
          "type": "blob",
          "size": 4.185546875,
          "content": null
        },
        {
          "name": "favicon.png",
          "type": "blob",
          "size": 26.166015625,
          "content": null
        }
      ]
    }
  ]
}