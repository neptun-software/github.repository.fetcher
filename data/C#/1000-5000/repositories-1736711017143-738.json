{
  "metadata": {
    "timestamp": 1736711017143,
    "page": 738,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "VitalElement/AvalonStudio",
      "stars": 1636,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.458984375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.6455078125,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\nartifacts\ntools\n.vs\ntools/\nartifacts/\n.avalon/\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Roslyn cache directories\n*.ide/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n#NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding addin-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings \n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# If using the old MSBuild-Integrated Package Restore, uncomment this:\n#!**/packages/repositories.config\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# =========================\n# Operating System Files\n# =========================\n\n# OSX\n# =========================\n\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n\n# Thumbnails\n._*\n\n# Files that might appear on external disk\n.Spotlight-V100\n.Trashes\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n# Windows\n# =========================\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msm\n*.msp\n/AvalonStudio/AvalonStudio.Languages.CPlusPlus/NativeBinaries\n/SampleLLilumProject/temp.ZeligImage\n/SampleLLilumProject/LLilum/temp.ZeligImage\n\nAvalonStudio/AvalonStudioBuild/Properties/launchSettings\\.json\n\nAvalonStudio/ToolchainUploader/Properties/launchSettings\\.json\n\nAvalonStudio/AvalonStudio\\.Windows\\.Installer/ComponentsGeneratedASB\\.wxs\n\nAvalonStudio/AvalonStudio\\.Windows\\.Installer/ComponentsGeneratedAS\\.wxs\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 0.345703125,
          "content": "image: vitalelement/avalonci:latest\nbefore_script:\n    # Create symlinks for nuget.\n  - mkdir -p /cache/.nuget\n  - ln -s /cache/.nuget ~/.nuget\n\nAvalonStudio:\n  script:     \n  # update all submodules.\n  - git submodule sync --recursive\n  - git submodule update --init --recursive\n  - dotnet --info\n  - ./build.sh\n  - cd ./packages\n  - ./package-debian.sh"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.7001953125,
          "content": "[submodule \"debugger-libs\"]\n\tpath = debugger-libs\n\turl = https://github.com/VitalElement/AvalonStudio.DebuggerLibs.git\n[submodule \"AvaloniaEdit\"]\n\tpath = AvaloniaEdit\n\turl = https://github.com/AvaloniaUI/AvaloniaEdit\n[submodule \"AvalonStudio/Avalonia.Ide\"]\n\tpath = AvalonStudio/Avalonia.Ide\n\turl = https://github.com/kekekeks/Avalonia.Ide.git\n[submodule \"templating\"]\n\tpath = templating\n\turl = https://github.com/VitalElement/templating.git\n[submodule \"AvalonStudio.Shell\"]\n\tpath = AvalonStudio.Shell\n\turl = https://github.com/VitalElement/AvalonStudio.Shell.git\n[submodule \"AvalonStudio.TerminalEmulator\"]\n\tpath = AvalonStudio.TerminalEmulator\n\turl = https://github.com/VitalElement/AvalonStudio.TerminalEmulator.git"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.4736328125,
          "content": "sudo: required\nlanguage: csharp\n\n# Use latest images for building\ngroup: travis_latest\nos:\n  - linux\n\ndotnet: 2.1.300\nscript:  \n  - ./build.sh --configuration \"Release\"  \n\nnotifications:\n  webhooks:\n    urls:\n      - https://webhooks.gitter.im/e/abf03510b7719b383e2b\n    on_success: change  # options: [always|never|change] default: always\n    on_failure: always  # options: [always|never|change] default: always\n    on_start: never     # options: [always|never|change] default: never\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "AvalonBuild",
          "type": "tree",
          "content": null
        },
        {
          "name": "AvalonStudio.Shell",
          "type": "commit",
          "content": null
        },
        {
          "name": "AvalonStudio.TerminalEmulator",
          "type": "commit",
          "content": null
        },
        {
          "name": "AvalonStudio",
          "type": "tree",
          "content": null
        },
        {
          "name": "AvaloniaEdit",
          "type": "commit",
          "content": null
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 0.095703125,
          "content": "<Project>\n\n  <PropertyGroup>\n    <LangVersion>latest</LangVersion>\n  </PropertyGroup>\n\n</Project>\n"
        },
        {
          "name": "Directory.Build.targets",
          "type": "blob",
          "size": 3.87109375,
          "content": "<Project>\n\n  <PropertyGroup>\n    <AvaloniaBehaviorsVersion>0.10.0</AvaloniaBehaviorsVersion>\n    <AvaloniaVersion>0.10.0</AvaloniaVersion>\n    <DockVersion>0.10.0</DockVersion>\n    <GitInfoVersion>2.0.20</GitInfoVersion>\n    <MicrosoftExtensionsDependencyModelVersion>2.0.4</MicrosoftExtensionsDependencyModelVersion>\n    <NewtonsoftJsonVersion>12.0.2</NewtonsoftJsonVersion>\n    <ReactiveUIVersion>12.1.1</ReactiveUIVersion>\n    <RoslynVersion>3.6.0</RoslynVersion>\n    <SystemCompositionVersion>1.0.31</SystemCompositionVersion>\n    <SystemDiagnosticsProcessVersion>4.3.0</SystemDiagnosticsProcessVersion>\n    <SystemDrawingCommonVersion>4.5.0</SystemDrawingCommonVersion>\n    <SystemNetPrimitivesVersion>4.3.1</SystemNetPrimitivesVersion>\n    <SystemRuntimeInteropServicesRuntimeInformationVersion>4.3.0</SystemRuntimeInteropServicesRuntimeInformationVersion>\n    <SystemSecurityPrincipalVersion>4.3.0</SystemSecurityPrincipalVersion>\n    <SystemXmlXmlDocumentVersion>4.3.0</SystemXmlXmlDocumentVersion>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Update=\"Avalonia\" Version=\"$(AvaloniaVersion)\" />\n    <PackageReference Update=\"Avalonia.X11\" Version=\"$(AvaloniaVersion)\" />\n    <PackageReference Update=\"Avalonia.Desktop\" Version=\"$(AvaloniaVersion)\" />\n    <PackageReference Update=\"Avalonia.ReactiveUI\" Version=\"$(AvaloniaVersion)\" />\n    <PackageReference Update=\"Avalonia.Controls.DataGrid\" Version=\"$(AvaloniaVersion)\" />\n    <PackageReference Update=\"Avalonia.Xaml.Behaviors\" Version=\"$(AvaloniaBehaviorsVersion)\" />\n    <PackageReference Update=\"Avalonia.Xaml.Interactions\" Version=\"$(AvaloniaBehaviorsVersion)\" />\n    <PackageReference Update=\"Avalonia.Xaml.Interactivity\" Version=\"$(AvaloniaBehaviorsVersion)\" />\n    <PackageReference Update=\"Avalonia.Xaml.Interactions.Custom\" Version=\"$(AvaloniaBehaviorsVersion)\" />\n    <PackageReference Update=\"GitInfo\" Version=\"$(GitInfoVersion)\" />\n    <PackageReference Update=\"Microsoft.CodeAnalysis\" Version=\"$(RoslynVersion)\" />\n    <PackageReference Update=\"Microsoft.CodeAnalysis.CSharp.Features\" Version=\"$(RoslynVersion)\" />\n    <PackageReference Update=\"Microsoft.CodeAnalysis.CSharp.Workspaces\" Version=\"$(RoslynVersion)\" />\n    <PackageReference Update=\"Microsoft.CodeAnalysis.Features\" Version=\"$(RoslynVersion)\" />\n    <PackageReference Update=\"Microsoft.CodeAnalysis.Workspaces.Common\" Version=\"$(RoslynVersion)\" />\n    <PackageReference Update=\"Microsoft.Extensions.DependencyModel\" Version=\"$(MicrosoftExtensionsDependencyModelVersion)\" />\n    <PackageReference Update=\"Newtonsoft.Json\" Version=\"$(NewtonsoftJsonVersion)\" />\n    <PackageReference Update=\"ReactiveUI\" Version=\"$(ReactiveUIVersion)\" />\n    <PackageReference Update=\"System.Composition\" Version=\"$(SystemCompositionVersion)\" />\n    <PackageReference Update=\"System.Composition.AttributedModel\" Version=\"$(SystemCompositionVersion)\" />\n    <PackageReference Update=\"System.Diagnostics.Process\" Version=\"$(SystemDiagnosticsProcessVersion)\" />\n    <PackageReference Update=\"System.Drawing.Common\" Version=\"$(SystemDrawingCommonVersion)\" />\n    <PackageReference Update=\"System.Net.Primitives\" Version=\"$(SystemNetPrimitivesVersion)\" />\n    <PackageReference Update=\"System.Runtime.InteropServices.RuntimeInformation\" Version=\"$(SystemRuntimeInteropServicesRuntimeInformationVersion)\" />\n    <PackageReference Update=\"System.Security.Principal\" Version=\"$(SystemSecurityPrincipalVersion)\" />\n    <PackageReference Update=\"System.Xml.XmlDocument\" Version=\"$(SystemXmlXmlDocumentVersion)\" />\n    <PackageReference Update=\"Dock.Avalonia\" Version=\"$(DockVersion)\" />\n    <PackageReference Update=\"Dock.Model.ReactiveUI\" Version=\"$(DockVersion)\" />\n    <PackageReference Update=\"Dock.Avalonia.Themes.Default\" Version=\"$(DockVersion)\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <Compile Update=\"**\\*.xaml.cs;**\\*.paml.cs;**\\*.axaml.cs;\" DependentUpon=\"%(Filename)\" />    \n    <Folder Include=\"Properties\\\" />\n  </ItemGroup>\n\n</Project>\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 7.47265625,
          "content": "                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.59375,
          "content": "[![Build status](https://dev.azure.com/wieslawsoltes/GitHub/_apis/build/status/Sources/Dock)](https://dev.azure.com/vitalelement/AvalonStudio/GitHub/_build/latest?definitionId=1)\n[![CodeFactor](https://www.codefactor.io/repository/github/vitalelement/avalonstudio/badge)](https://www.codefactor.io/repository/github/vitalelement/avalonstudio)\n[![Gitter](https://badges.gitter.im/VitalElement/AvalonStudio.svg)](https://gitter.im/VitalElement/AvalonStudio?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\n# AvalonStudio\n\nAn extensible, cross platform IDE written in C# for Embedded C/C++, .NET Core, Avalonia and Typescript\n\n<img src=\"https://files.gitter.im/VitalElement/AvalonStudio/3eEt/image.png\" />\n<img src=\"https://files.gitter.im/VitalElement/AvalonStudio/3yMR/image.png\" />\n<img src=\"https://files.gitter.im/VitalElement/AvalonStudio/gEyI/Screenshot-from-2017-10-09-15-43-14.png\" />\n<img src=\"https://files.gitter.im/VitalElement/AvalonStudio/gpYQ/Screenshot-from-2017-10-09-15-51-18.png\" />\n<img src=\"https://files.gitter.im/VitalElement/AvalonStudio/LUgi/image.png\" />\n<img src=\"https://files.gitter.im/VitalElement/AvalonStudio/r3QX/image.png\" />\n\n## Building from source\n\n### 1. Install Dependencies\n\n- Git: https://git-scm.com/downloads\n- .NET 5.0: https://www.microsoft.com/net/download\n\n### 2. Get the code\n\nClone the repository recursively.\n\n```sh\ngit clone https://github.com/VitalElement/AvalonStudio --recursive\n```\n\n### 3. Build the project\n\n```sh\ncd AvalonStudio/AvalonStudio/AvalonStudio\ndotnet restore\ndotnet build\n```\n\n### 4. Run locally built binaries\n\n```sh\ncd bin/Debug/net5.0\n./AvalonStudio\n```\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.2607421875,
          "content": "version: 0.4.6.{build}\nos: Visual Studio 2017\ninstall:\n  - if not exist dotnet-sdk-2.1.300-win-x64.zip appveyor DownloadFile https://download.microsoft.com/download/8/8/5/88544F33-836A-49A5-8B67-451C24709A8F/dotnet-sdk-2.1.300-win-x64.zip -FileName \"dotnet-sdk-2.1.300-win-x64.zip\"  \n  - cmd: 7z x dotnet-sdk-2.1.300-win-x64.zip -oc:\\dotnet\n\nbefore_build: \n- cmd: git submodule update --init --recursive\n- cmd: path c:\\dotnet\n- cmd: dotnet --info  \n\nbuild_script:\n- cmd: dotnet --info\n- ps: $url1='https://img.shields.io/badge/version-v0.4.6' + $env:APPVEYOR_BUILD_NUMBER  + '-blue.svg'\n- ps: .\\download.ps1 $url1 \"latest-version-badge.svg\"\n- cmd: dir \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\\"\n- cmd: dir \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Redist\\MSVC\\\"\n- ps: .\\build.ps1\n\ntest: off\n\nartifacts:\n- path: artifacts/zip/*.zip\n- path: artifacts/nuget/*.nupkg\n- path: latest-version-badge.svg\n\ndeploy:\n- provider: Environment\n  name: FastRing\n  on:\n    branch: master\n    APPVEYOR_REPO_TAG: true\n\nnotifications:\n- provider: Webhook\n  url: https://webhooks.gitter.im/e/e8ce2449e773a183903b\n  method: POST\n  on_build_success: true\n  on_build_failure: true\n  on_build_status_changed: true\n  \ncache:\n  dotnet-sdk-2.1.300-win-x64.zip"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 1.6005859375,
          "content": "jobs:\n- job: Linux\n  pool:\n    vmImage: 'ubuntu-18.04'\n  steps:\n  - task: UseDotNet@2\n    inputs:\n      version: '5.0.x'\n        \n  - script: |\n      git fetch --tags\n      export COREHOST_TRACE=0\n      export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1\n      export DOTNET_CLI_TELEMETRY_OPTOUT=1\n      which dotnet\n      dotnet --info\n      dotnet tool restore\n      dotnet cake build.cake --Configuration=\"Release\" -Target=\"Linux\"\n      cd packages\n      ./package-debian.sh\n      \n  - task: PublishBuildArtifacts@1\n    inputs:\n      pathToPublish: packages/deb-out\n     \n- job: macOS\n  pool:\n    vmImage: 'macOS-10.14'\n  steps:\n  - task: UseDotNet@2\n    inputs:\n      version: '5.0.x'\n        \n  - script: |\n      git fetch --tags\n      export COREHOST_TRACE=0\n      export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1\n      export DOTNET_CLI_TELEMETRY_OPTOUT=1\n      which dotnet\n      dotnet --info\n      dotnet tool restore\n      dotnet cake build.cake --Configuration=\"Release\" -Target=\"OSX\"\n      cd packages\n      ./package-osx.sh\n      cd ..\n  - task: PublishBuildArtifacts@1\n    inputs:\n      pathToPublish: packages/artifacts\n\n- job: Windows\n  pool:\n    vmImage: 'windows-2019'\n  steps:\n  - script: |\n      git fetch --tags\n      set COREHOST_TRACE=0\n      set DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1\n      set DOTNET_CLI_TELEMETRY_OPTOUT=1\n      where dotnet\n      dotnet --info\n      dotnet tool restore\n      dotnet cake build.cake --Configuration=\"Release\"\n\n  - task: PublishBuildArtifacts@1\n    inputs:\n      pathToPublish: artifacts/zip/\n\n  - task: PublishBuildArtifacts@1\n    inputs:\n      pathToPublish: AvalonStudio/AvalonStudioBuild/nupkg"
        },
        {
          "name": "build.cake",
          "type": "blob",
          "size": 10.5791015625,
          "content": "/////////////////////////////////////////////////////////////////////\n// ADDINS\n/////////////////////////////////////////////////////////////////////\n\n#addin \"Cake.FileHelpers\"\n\n//////////////////////////////////////////////////////////////////////\n// TOOLS\n//////////////////////////////////////////////////////////////////////\n#tool \"nuget:?package=NuGet.CommandLine&version=4.3.0\"\n\n///////////////////////////////////////////////////////////////////////////////\n// USINGS\n///////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////\n// ARGUMENTS\n//////////////////////////////////////////////////////////////////////\n\nvar target = Argument(\"target\", \"Default\");\nvar platform = Argument(\"platform\", \"AnyCPU\");\nvar configuration = Argument(\"configuration\", \"Release\");\n\n///////////////////////////////////////////////////////////////////////////////\n// CONFIGURATION\n///////////////////////////////////////////////////////////////////////////////\n\nvar MainRepo = \"VitalElement/AvalonStudio\";\nvar MasterBranch = \"master\";\nvar ReleasePlatform = \"Any CPU\";\nvar ReleaseConfiguration = \"Release\";\n\n///////////////////////////////////////////////////////////////////////////////\n// PARAMETERS\n///////////////////////////////////////////////////////////////////////////////\n\nvar isPlatformAnyCPU = StringComparer.OrdinalIgnoreCase.Equals(platform, \"Any CPU\");\nvar isPlatformX86 = StringComparer.OrdinalIgnoreCase.Equals(platform, \"x86\");\nvar isPlatformX64 = StringComparer.OrdinalIgnoreCase.Equals(platform, \"x64\");\nvar isLocalBuild = BuildSystem.IsLocalBuild;\nvar isRunningOnUnix = IsRunningOnUnix();\nvar isRunningOnWindows = IsRunningOnWindows();\nvar isRunningOnAppVeyor = BuildSystem.AppVeyor.IsRunningOnAppVeyor;\nvar isPullRequest = BuildSystem.AppVeyor.Environment.PullRequest.IsPullRequest;\nvar isMainRepo = StringComparer.OrdinalIgnoreCase.Equals(MainRepo, BuildSystem.AppVeyor.Environment.Repository.Name);\nvar isMasterBranch = StringComparer.OrdinalIgnoreCase.Equals(MasterBranch, BuildSystem.AppVeyor.Environment.Repository.Branch);\nvar isTagged = BuildSystem.AppVeyor.Environment.Repository.Tag.IsTag \n               && !string.IsNullOrWhiteSpace(BuildSystem.AppVeyor.Environment.Repository.Tag.Name);\nvar isReleasable = StringComparer.OrdinalIgnoreCase.Equals(ReleasePlatform, platform) \n                   && StringComparer.OrdinalIgnoreCase.Equals(ReleaseConfiguration, configuration);\nvar isMyGetRelease = !isTagged && isReleasable;\nvar isNuGetRelease = isTagged && isReleasable;\n\n///////////////////////////////////////////////////////////////////////////////\n// DIRECTORIES\n///////////////////////////////////////////////////////////////////////////////\n\nvar msvcp140_x86 = @\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Redist\\MSVC\\14.14.26405\\x86\\Microsoft.VC141.CRT\\msvcp140.dll\";\nvar msvcp140_x64 = @\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Redist\\MSVC\\14.14.26405\\x64\\Microsoft.VC141.CRT\\msvcp140.dll\";\nvar vcruntime140_x86 = @\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Redist\\MSVC\\14.14.26405\\x86\\Microsoft.VC141.CRT\\vcruntime140.dll\";\nvar vcruntime140_x64 = @\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Redist\\MSVC\\14.14.26405\\x64\\Microsoft.VC141.CRT\\vcruntime140.dll\";\nvar editbin = @\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.14.26428\\bin\\HostX86\\x86\\editbin.exe\";\n\nvar artifactsDir = (DirectoryPath)Directory(\"./artifacts\");\nvar zipRootDir = artifactsDir.Combine(\"zip\");\nvar nugetRoot = artifactsDir.Combine(\"nuget\");\n\nvar fileZipSuffix = \".zip\";\n\nvar buildDirs = GetDirectories(\"./AvalonStudio/AvalonStudio/**/bin/**\") + \n    GetDirectories(\"./AvalonStudio/AvalonStudio/**/obj/**\") + \n    GetDirectories(\"./AvalonStudio/AvalonStudioBuild/**/bin/**\") + \n    GetDirectories(\"./AvalonStudio/AvalonStudioBuild/**/obj/**\") +\n    GetDirectories(\"./artifacts/**/zip/**\");\n\nvar netCoreAppsRoot= \"./AvalonStudio\";\nvar netCoreApps = new string[] { \"AvalonStudio\", \"AvalonStudioBuild\" };\nvar netCoreProjects = netCoreApps.Select(name => \n    new {\n        Path = string.Format(\"{0}/{1}\", netCoreAppsRoot, name),\n        Name = name,\n        Framework = XmlPeek(string.Format(\"{0}/{1}/{1}.csproj\", netCoreAppsRoot, name), \"//*[local-name()='TargetFrameworks']/text()\").Split(';').First(),\n        Runtimes = XmlPeek(string.Format(\"{0}/{1}/{1}.csproj\", netCoreAppsRoot, name), \"//*[local-name()='RuntimeIdentifiers']/text()\").Split(';')\n    }).ToList();\n\n///////////////////////////////////////////////////////////////////////////////\n// INFORMATION\n///////////////////////////////////////////////////////////////////////////////\n\nInformation(\"Building version {0} of AvalonStudio ({1}, {2}) using version {3} of Cake.\", \n    platform,\n    configuration,\n    target,\n    typeof(ICakeContext).Assembly.GetName().Version.ToString());\n\nif (isRunningOnAppVeyor)\n{\n    Information(\"Repository Name: \" + BuildSystem.AppVeyor.Environment.Repository.Name);\n    Information(\"Repository Branch: \" + BuildSystem.AppVeyor.Environment.Repository.Branch);\n}\n\nInformation(\"Target: \" + target);\nInformation(\"Platform: \" + platform);\nInformation(\"Configuration: \" + configuration);\nInformation(\"IsLocalBuild: \" + isLocalBuild);\nInformation(\"IsRunningOnUnix: \" + isRunningOnUnix);\nInformation(\"IsRunningOnWindows: \" + isRunningOnWindows);\nInformation(\"IsRunningOnAppVeyor: \" + isRunningOnAppVeyor);\nInformation(\"IsPullRequest: \" + isPullRequest);\nInformation(\"IsMainRepo: \" + isMainRepo);\nInformation(\"IsMasterBranch: \" + isMasterBranch);\nInformation(\"IsTagged: \" + isTagged);\nInformation(\"IsReleasable: \" + isReleasable);\nInformation(\"IsMyGetRelease: \" + isMyGetRelease);\nInformation(\"IsNuGetRelease: \" + isNuGetRelease);\n\nvar avalonBuildRIDs = new List<string>\n{\n    \"win7-x64\"\n};\n\n///////////////////////////////////////////////////////////////////////////////\n// TASKS\n/////////////////////////////////////////////////////////////////////////////// \n\nTask(\"Clean\")\n.Does(()=>{\n    CleanDirectory(zipRootDir);\n    CleanDirectory(nugetRoot);\n    CleanDirectories(buildDirs);\n});\n\nTask(\"Restore-NetCore\")\n    .IsDependentOn(\"Clean\")\n    .Does(() =>\n{\n    foreach (var project in netCoreProjects)\n    {\n        DotNetCoreRestore(project.Path);\n    }\n});\n\nTask(\"Build-NetCore\")\n    .IsDependentOn(\"Restore-NetCore\")\n    .Does(() =>\n{\n    foreach (var project in netCoreProjects)\n    {\n        Information(\"Building: {0}\", project.Name);\n\n        var settings = new DotNetCoreBuildSettings {\n            Configuration = configuration,\n\n            MSBuildSettings = new DotNetCoreMSBuildSettings {\n                MaxCpuCount = 0\n            }\n        };\n\n        DotNetCoreBuild(project.Path, settings);\n    }\n});\n\nvoid RunCoreTest(string dir, bool net461Only)\n{\n    Information(\"Running tests from \" + dir);\n    DotNetCoreRestore(dir);\n    var frameworks = new List<string>(){\"net5.0\"};\n    foreach(var fw in frameworks)\n    {\n        if(fw != \"net461\" && net461Only)\n            continue;\n        Information(\"Running for \" + fw);\n        DotNetCoreTest(System.IO.Path.Combine(dir, System.IO.Path.GetFileName(dir)+\".csproj\"),\n            new DotNetCoreTestSettings{Framework = fw});\n    }\n}\n\n\nTask(\"Run-Net-Core-Unit-Tests\")\n    .IsDependentOn(\"Clean\")\n    .Does(() => {\n        RunCoreTest(\"./AvalonStudio/AvalonStudio.Extensibility.Tests\", false);\n        RunCoreTest(\"./AvalonStudio/AvalonStudio.Controls.Standard.Tests\", false);\n    });\n\n\n\nTask(\"Publish-NetCore\")\n    .Does(() =>\n{\n    foreach (var project in netCoreProjects)\n    {\n        foreach(var runtime in project.Runtimes)\n        {\n            var outputDir = zipRootDir.Combine(project.Name + \"-\" + runtime);\n\n            Information(\"Publishing: {0}, runtime: {1}\", project.Name, runtime);\n            DotNetCorePublish(project.Path, new DotNetCorePublishSettings {\n                Framework = project.Framework,\n                Configuration = configuration,\n                Runtime = runtime,\n                OutputDirectory = outputDir.FullPath\n            });\n\n            /*if (IsRunningOnWindows() && (runtime == \"win7-x86\" || runtime == \"win7-x64\"))\n            {\n                Information(\"Patching executable subsystem for: {0}, runtime: {1}\", project.Name, runtime);\n                var targetExe = outputDir.CombineWithFilePath(project.Name + \".exe\");\n                var exitCodeWithArgument = StartProcess(editbin, new ProcessSettings { \n                    Arguments = \"/subsystem:windows \" + targetExe.FullPath\n                });\n                Information(\"The editbin command exit code: {0}\", exitCodeWithArgument);\n            }*/\n        }\n    }\n});\n\nTask(\"Copy-Redist-Files-NetCore\")\n    .IsDependentOn(\"Publish-NetCore\")\n    .WithCriteria(()=>((isMainRepo && isMasterBranch && isRunningOnAppVeyor  && !isPullRequest) || isLocalBuild))\n    .Does(() =>\n{\n    foreach (var project in netCoreProjects)\n    {\n        foreach(var runtime in project.Runtimes)\n        {\n            var outputDir = zipRootDir.Combine(project.Name + \"-\" + runtime);\n            /*if (IsRunningOnWindows() && runtime == \"win7-x86\")\n            {\n                Information(\"Copying redist files for: {0}, runtime: {1}\", project.Name, runtime);\n                CopyFileToDirectory(msvcp140_x86, outputDir);\n                CopyFileToDirectory(vcruntime140_x86, outputDir);\n            }\n            if (IsRunningOnWindows() && runtime == \"win7-x64\")\n            {\n                Information(\"Copying redist files for: {0}, runtime: {1}\", project.Name, runtime);\n                CopyFileToDirectory(msvcp140_x64, outputDir);\n                CopyFileToDirectory(vcruntime140_x64, outputDir);\n            }*/\n        }\n    }\n});\n\nTask(\"Zip-NetCore\")\n    .IsDependentOn(\"Publish-NetCore\")\n    .Does(() =>\n{\n    foreach (var project in netCoreProjects)\n    {\n        foreach(var runtime in project.Runtimes)\n        {\n            var outputDir = zipRootDir.Combine(project.Name + \"-\" + runtime);\n\n            Zip(outputDir.FullPath, zipRootDir.CombineWithFilePath(project.Name + \"-\" + runtime + fileZipSuffix));\n\n            if(DirectoryExists(outputDir))\n            {\n                DeleteDirectory(outputDir, new DeleteDirectorySettings {\n                    Recursive = true,\n                    Force = true\n                });\n            }\n        }\n    }    \n});\n\nTask(\"Default\")\n    .IsDependentOn(\"Clean\")\n    .IsDependentOn(\"Run-Net-Core-Unit-Tests\")\n    .IsDependentOn(\"Build-NetCore\")\n    .IsDependentOn(\"Publish-NetCore\")\n    .IsDependentOn(\"Copy-Redist-Files-NetCore\")\n    .IsDependentOn(\"Zip-NetCore\");\n\nTask(\"OSX\")\n    .IsDependentOn(\"Run-Net-Core-Unit-Tests\");\n\nTask(\"Linux\")\n    .IsDependentOn(\"Run-Net-Core-Unit-Tests\");\n\nRunTarget(target);\n"
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 6.1015625,
          "content": "##########################################################################\n# This is the Cake bootstrapper script for PowerShell.\n# This file was downloaded from https://github.com/cake-build/resources\n# Feel free to change this file to fit your needs.\n##########################################################################\n\n<#\n\n.SYNOPSIS\nThis is a Powershell script to bootstrap a Cake build.\n\n.DESCRIPTION\nThis Powershell script will download NuGet if missing, restore NuGet tools (including Cake)\nand execute your Cake build script with the parameters you provide.\n\n.PARAMETER Script\nThe build script to execute.\n.PARAMETER Target\nThe build script target to run.\n.PARAMETER Platform\nThe build platform to use.\n.PARAMETER Configuration\nThe build configuration to use.\n.PARAMETER Verbosity\nSpecifies the amount of information to be displayed.\n.PARAMETER Experimental\nTells Cake to use the latest Roslyn release.\n.PARAMETER WhatIf\nPerforms a dry run of the build script.\nNo tasks will be executed.\n.PARAMETER Mono\nTells Cake to use the Mono scripting engine.\n.PARAMETER SkipToolPackageRestore\nSkips restoring of packages.\n.PARAMETER ScriptArgs\nRemaining arguments are added here.\n\n.LINK\nhttp://cakebuild.net\n\n#>\n\n[CmdletBinding()]\nParam(\n    [string]$Script = \"build.cake\",\n    [string]$Target = \"Default\",\n    [ValidateSet(\"AnyCPU\", \"x86\", \"x64\", \"Mono\")]\n    [string]$Platform = \"AnyCPU\",\n    [ValidateSet(\"Release\", \"Debug\")]\n    [string]$Configuration = \"Release\",\n    [ValidateSet(\"Quiet\", \"Minimal\", \"Normal\", \"Verbose\", \"Diagnostic\")]\n    [string]$Verbosity = \"Verbose\",\n    [switch]$Experimental,\n    [Alias(\"DryRun\",\"Noop\")]\n    [switch]$WhatIf,\n    [switch]$Mono,\n    [switch]$SkipToolPackageRestore,\n    [Parameter(Position=0,Mandatory=$false,ValueFromRemainingArguments=$true)]\n    [string[]]$ScriptArgs\n)\n\n[Reflection.Assembly]::LoadWithPartialName(\"System.Security\") | Out-Null\nfunction MD5HashFile([string] $filePath)\n{\n    if ([string]::IsNullOrEmpty($filePath) -or !(Test-Path $filePath -PathType Leaf))\n    {\n        return $null\n    }\n\n    [System.IO.Stream] $file = $null;\n    [System.Security.Cryptography.MD5] $md5 = $null;\n    try\n    {\n        $md5 = [System.Security.Cryptography.MD5]::Create()\n        $file = [System.IO.File]::OpenRead($filePath)\n        return [System.BitConverter]::ToString($md5.ComputeHash($file))\n    }\n    finally\n    {\n        if ($file -ne $null)\n        {\n            $file.Dispose()\n        }\n    }\n}\n\nWrite-Host \"Preparing to run build script...\"\n\nif(!$PSScriptRoot){\n    $PSScriptRoot = Split-Path $MyInvocation.MyCommand.Path -Parent\n}\n\n$TOOLS_DIR = Join-Path $PSScriptRoot \"tools\"\n$NUGET_EXE = Join-Path $TOOLS_DIR \"nuget.exe\"\n$CAKE_EXE = Join-Path $TOOLS_DIR \"Cake/Cake.exe\"\n$NUGET_URL = \"https://dist.nuget.org/win-x86-commandline/v4.0.0-rc4/nuget.exe\"\n$PACKAGES_CONFIG = Join-Path $TOOLS_DIR \"packages.config\"\n$PACKAGES_CONFIG_MD5 = Join-Path $TOOLS_DIR \"packages.config.md5sum\"\n\n# Should we use mono?\n$UseMono = \"\";\nif($Mono.IsPresent) {\n    Write-Verbose -Message \"Using the Mono based scripting engine.\"\n    $UseMono = \"-mono\"\n}\n\n# Should we use the new Roslyn?\n$UseExperimental = \"\";\nif($Experimental.IsPresent -and !($Mono.IsPresent)) {\n    Write-Verbose -Message \"Using experimental version of Roslyn.\"\n    $UseExperimental = \"-experimental\"\n}\n\n# Is this a dry run?\n$UseDryRun = \"\";\nif($WhatIf.IsPresent) {\n    $UseDryRun = \"-dryrun\"\n}\n\n# Make sure tools folder exists\nif ((Test-Path $PSScriptRoot) -and !(Test-Path $TOOLS_DIR)) {\n    Write-Verbose -Message \"Creating tools directory...\"\n    New-Item -Path $TOOLS_DIR -Type directory | out-null\n}\n\n# Make sure that packages.config exist.\nif (!(Test-Path $PACKAGES_CONFIG)) {\n    Write-Verbose -Message \"Downloading packages.config...\"\n    try { (New-Object System.Net.WebClient).DownloadFile(\"http://cakebuild.net/download/bootstrapper/packages\", $PACKAGES_CONFIG) } catch {\n        Throw \"Could not download packages.config.\"\n    }\n}\n\n# Try find NuGet.exe in path if not exists\nif (!(Test-Path $NUGET_EXE)) {\n    Write-Verbose -Message \"Trying to find nuget.exe in PATH...\"\n    $existingPaths = $Env:Path -Split ';' | Where-Object { (![string]::IsNullOrEmpty($_)) -and (Test-Path $_) }\n    $NUGET_EXE_IN_PATH = Get-ChildItem -Path $existingPaths -Filter \"nuget.exe\" | Select -First 1\n    if ($NUGET_EXE_IN_PATH -ne $null -and (Test-Path $NUGET_EXE_IN_PATH.FullName)) {\n        Write-Verbose -Message \"Found in PATH at $($NUGET_EXE_IN_PATH.FullName).\"\n        $NUGET_EXE = $NUGET_EXE_IN_PATH.FullName\n    }\n}\n\n# Try download NuGet.exe if not exists\nif (!(Test-Path $NUGET_EXE)) {\n    Write-Verbose -Message \"Downloading NuGet.exe...\"\n    try {\n        (New-Object System.Net.WebClient).DownloadFile($NUGET_URL, $NUGET_EXE)\n    } catch {\n        Throw \"Could not download NuGet.exe.\"\n    }\n}\n\n# Save nuget.exe path to environment to be available to child processed\n$ENV:NUGET_EXE = $NUGET_EXE\n\n# Restore tools from NuGet?\nif(-Not $SkipToolPackageRestore.IsPresent) {\n    Push-Location\n    Set-Location $TOOLS_DIR\n\n    # Check for changes in packages.config and remove installed tools if true.\n    [string] $md5Hash = MD5HashFile($PACKAGES_CONFIG)\n    if((!(Test-Path $PACKAGES_CONFIG_MD5)) -Or\n      ($md5Hash -ne (Get-Content $PACKAGES_CONFIG_MD5 ))) {\n        Write-Verbose -Message \"Missing or changed package.config hash...\"\n        Remove-Item * -Recurse -Exclude packages.config,nuget.exe\n    }\n\n    Write-Verbose -Message \"Restoring tools from NuGet...\"\n    $NuGetOutput = Invoke-Expression \"&`\"$NUGET_EXE`\" install -ExcludeVersion -OutputDirectory `\"$TOOLS_DIR`\"\"\n\n    if ($LASTEXITCODE -ne 0) {\n        Throw \"An error occured while restoring NuGet tools.\"\n    }\n    else\n    {\n        $md5Hash | Out-File $PACKAGES_CONFIG_MD5 -Encoding \"ASCII\"\n    }\n    Write-Verbose -Message ($NuGetOutput | out-string)\n    Pop-Location\n}\n\n# Make sure that Cake has been installed.\nif (!(Test-Path $CAKE_EXE)) {\n    Throw \"Could not find Cake.exe at $CAKE_EXE\"\n}\n\n# Start Cake\nWrite-Host \"Running build script...\"\nInvoke-Expression \"& `\"$CAKE_EXE`\" `\"$Script`\" -target=`\"$Target`\" -platform=`\"$Platform`\" -configuration=`\"$Configuration`\" -verbosity=`\"$Verbosity`\" $UseMono $UseDryRun $UseExperimental $ScriptArgs\"\nexit $LASTEXITCODE"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 3.5703125,
          "content": "#!/usr/bin/env bash\n\n##########################################################################\n# This is the Cake bootstrapper script for Linux and OS X.\n# This file was downloaded from https://github.com/cake-build/resources\n# Feel free to change this file to fit your needs.\n##########################################################################\n\n# Define directories.\nSCRIPT_DIR=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\nTOOLS_DIR=$SCRIPT_DIR/tools\nADDINS_DIR=$TOOLS_DIR/addins\nMODULES_DIR=$TOOLS_DIR/modules\nNUGET_EXE=$TOOLS_DIR/nuget.exe\nCAKE_EXE=$TOOLS_DIR/Cake/Cake.exe\nPACKAGES_CONFIG=$TOOLS_DIR/packages.config\nPACKAGES_CONFIG_MD5=$TOOLS_DIR/packages.config.md5sum\nADDINS_PACKAGES_CONFIG=$ADDINS_DIR/packages.config\nMODULES_PACKAGES_CONFIG=$MODULES_DIR/packages.config\n\n# Define md5sum or md5 depending on Linux/OSX\nMD5_EXE=\nif [[ \"$(uname -s)\" == \"Darwin\" ]]; then\n    MD5_EXE=\"md5 -r\"\nelse\n    MD5_EXE=\"md5sum\"\nfi\n\n# Define default arguments.\nSCRIPT=\"build.cake\"\nTARGET=\"Default\"\nCONFIGURATION=\"Release\"\nVERBOSITY=\"verbose\"\nDRYRUN=\nSHOW_VERSION=false\nSCRIPT_ARGUMENTS=()\n\n# Parse arguments.\nfor i in \"$@\"; do\n    case $1 in\n        -s|--script) SCRIPT=\"$2\"; shift ;;\n        -t|--target) TARGET=\"$2\"; shift ;;\n        -c|--configuration) CONFIGURATION=\"$2\"; shift ;;\n        -v|--verbosity) VERBOSITY=\"$2\"; shift ;;\n        -d|--dryrun) DRYRUN=\"-dryrun\" ;;\n        --version) SHOW_VERSION=true ;;\n        --) shift; SCRIPT_ARGUMENTS+=(\"$@\"); break ;;\n        *) SCRIPT_ARGUMENTS+=(\"$1\") ;;\n    esac\n    shift\ndone\n\n# Make sure the tools folder exist.\nif [ ! -d \"$TOOLS_DIR\" ]; then\n  mkdir \"$TOOLS_DIR\"\nfi\n\n# Make sure that packages.config exist.\nif [ ! -f \"$TOOLS_DIR/packages.config\" ]; then\n    echo \"Downloading packages.config...\"\n    curl -Lsfo \"$TOOLS_DIR/packages.config\" http://cakebuild.net/download/bootstrapper/packages\n    if [ $? -ne 0 ]; then\n        echo \"An error occured while downloading packages.config.\"\n        exit 1\n    fi\nfi\n\n# Download NuGet if it does not exist.\nif [ ! -f \"$NUGET_EXE\" ]; then\n    echo \"Downloading NuGet...\"\n    curl -Lsfo \"$NUGET_EXE\" https://dist.nuget.org/win-x86-commandline/latest/nuget.exe\n    if [ $? -ne 0 ]; then\n        echo \"An error occured while downloading nuget.exe.\"\n        exit 1\n    fi\nfi\n\n# Restore tools from NuGet.\npushd \"$TOOLS_DIR\" >/dev/null\nif [ ! -f \"$PACKAGES_CONFIG_MD5\" ] || [ \"$( cat \"$PACKAGES_CONFIG_MD5\" | sed 's/\\r$//' )\" != \"$( $MD5_EXE \"$PACKAGES_CONFIG\" | awk '{ print $1 }' )\" ]; then\n    find . -type d ! -name . | xargs rm -rf\nfi\n\nmono \"$NUGET_EXE\" install -ExcludeVersion\nif [ $? -ne 0 ]; then\n    echo \"Could not restore NuGet tools.\"\n    exit 1\nfi\n\n$MD5_EXE \"$PACKAGES_CONFIG\" | awk '{ print $1 }' >| \"$PACKAGES_CONFIG_MD5\"\n\npopd >/dev/null\n\n# Restore addins from NuGet.\nif [ -f \"$ADDINS_PACKAGES_CONFIG\" ]; then\n    pushd \"$ADDINS_DIR\" >/dev/null\n\n    mono \"$NUGET_EXE\" install -ExcludeVersion\n    if [ $? -ne 0 ]; then\n        echo \"Could not restore NuGet addins.\"\n        exit 1\n    fi\n\n    popd >/dev/null\nfi\n\n# Restore modules from NuGet.\nif [ -f \"$MODULES_PACKAGES_CONFIG\" ]; then\n    pushd \"$MODULES_DIR\" >/dev/null\n\n    mono \"$NUGET_EXE\" install -ExcludeVersion\n    if [ $? -ne 0 ]; then\n        echo \"Could not restore NuGet modules.\"\n        exit 1\n    fi\n\n    popd >/dev/null\nfi\n\n# Make sure that Cake has been installed.\nif [ ! -f \"$CAKE_EXE\" ]; then\n    echo \"Could not find Cake.exe at '$CAKE_EXE'.\"\n    exit 1\nfi\n\n# Start Cake\nif $SHOW_VERSION; then\n    exec mono \"$CAKE_EXE\" -version\nelse\n    exec mono \"$CAKE_EXE\" $SCRIPT -verbosity=$VERBOSITY -configuration=$CONFIGURATION -target=$TARGET $DRYRUN \"${SCRIPT_ARGUMENTS[@]}\"\nfi"
        },
        {
          "name": "debugger-libs",
          "type": "commit",
          "content": null
        },
        {
          "name": "dependencies.sh",
          "type": "blob",
          "size": 1.2490234375,
          "content": "#\n#! /bin/bash\n#\n\n#\n# If you do not use yaourt, but instead another AUR helper, you can specify the helper as an argument - for example,\n# ./dependencies.sh pacaur\n# would use pacaur instead of yaourt.\n#\nsource /etc/os-release\n\nif [[ $ID == \"arch\" ]]; then\n    sudo pacman -S mono clang\n    if [[ $1 == \"\" ]]; then\n        echo If this errors because yaourt is not found, specify your AUR helper as an argument\n        echo for example, ./dependancies.sh pacaur.\n        yaourt -S dotnet-bin dotnet-coreclr-git icu52\n    else\n        $1 -S dotnet-bin dotnet-coreclr-git icu52\n    fi  \nfi\n\nif [[ $ID == \"ubuntu\" ]]; then\n  sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF\n  echo \"deb http://download.mono-project.com/repo/debian wheezy main\" | sudo tee /etc/apt/sources.list.d/mono-xamarin.list \n  sudo apt-get update\n  sudo apt-get install -y libunwind8 libunwind8-dev gettext libicu-dev liblttng-ust-dev libcurl4-openssl-dev libssl-dev uuid-dev unzip mono-complete\n  wget https://dotnetcli.blob.core.windows.net/dotnet/Sdk/master/dotnet-dev-ubuntu-x64.latest.tar.gz\n  mkdir ~/dotnet\n  tar zxf dotnet-dev-ubuntu-x64.latest.tar.gz -C ~/dotnet\n  sudo ln -s ~/dotnet/dotnet /usr/bin/\n  dotnet --info\nfi\ndotnet --version"
        },
        {
          "name": "download.ps1",
          "type": "blob",
          "size": 0.71484375,
          "content": "﻿   param([string]$url, [string]$path)\r\n     \r\n    if(!(Split-Path -parent $path) -or !(Test-Path -pathType Container (Split-Path -parent $path))) {\r\n      $path = Join-Path $pwd (Split-Path -leaf $path)\r\n    }\r\n     \r\n    \"Downloading [$url]`nSaving at [$path]\"\r\n    $client = new-object System.Net.WebClient\r\n    $client.DownloadFile($url, $path)\r\n     \r\n    $path"
        },
        {
          "name": "install-latest-dotnet.sh",
          "type": "blob",
          "size": 0.4267578125,
          "content": "#!/usr/bin/env bash\n\ncurl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg\nsudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg\nsudo sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-trusty-prod trusty main\" > /etc/apt/sources.list.d/dotnetdev.list'\n\nsudo apt-get install apt-transport-https\nsudo apt-get update\nsudo apt-get install dotnet-sdk-2.1.4\n\ndotnet --info"
        },
        {
          "name": "nuget.config",
          "type": "blob",
          "size": 0.6455078125,
          "content": "﻿<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <clear/>\n    <add key=\"nuget.org\" value=\"https://www.nuget.org/api/v2/\" />\n    <add key=\"avalonia-all\" value=\"https://nuget.avaloniaui.net/repository/avalonia-all/index.json\" />\n    <add key=\"XamlBehaviors\" value=\"https://www.myget.org/F/xamlbehaviors-nightly/api/v2\" />\n    <add key=\"sharpgen\" value=\"https://www.myget.org/F/sharpgentools/api/v3/index.json\" />\n    <add key=\"cli-deps\" value=\"https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\" />\n    <add key=\"DockNightly\" value=\"https://www.myget.org/F/dock-nightly/api/v2\" />\n  </packageSources>\n</configuration>\n"
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "templating",
          "type": "commit",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}