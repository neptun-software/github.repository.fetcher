{
  "metadata": {
    "timestamp": 1736710672911,
    "page": 19,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Stability-AI/StableSwarmUI",
      "stars": 4662,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.1513671875,
          "content": "# C#\nbin/\nobj/\n.vs/\n.vscode/\n*.user\n*.suo\nProperties/\n\n# This project\nOutput/\nData/\nModels/\ntmp/\nExtensions/\ndlbackend/\n\n# Python\n__pycache__/\nvenv/\n*.pth\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0703125,
          "content": "*.sh       text eol=lf\nDockerfile text eol=lf\n.dockerignore text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.16796875,
          "content": "# C#\nbin/\nobj/\n.vs/\n.vscode/\n*.user\n*.suo\nProperties/\n.dotnet/\n\n# This project\nOutput/\nData/\nModels/\ntmp/\nExtensions/\ndlbackend/\n*.debug\n\n# Python\n__pycache__/\nvenv/\n*.pth\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.7724609375,
          "content": "# Contributing to StableSwarmUI\n\nPlease open an Issue or Discussion, or ask on Discord before opening a pull request, to make sure your work doesn't overlap with others.\n\n(TODO: More general contributing info)\n\n## Languages\n\nWant to help translate Swarm into another language?\n\n- First: you're going to have to speak English. The English text is the \"one true root\" language that all other languages are derived from, it would be problematic to translate a translation.\n- Are you just helping improve an existing language?\n    - Great! Just edit the file in `languages/(language-code).json` and improve the translations included\n- Do you want to add a new language?\n    - See example commit here: https://github.com/Stability-AI/StableSwarmUI/commit/20fd27a20127b6529a2837eb838a0cfae80c20b8\n    - In short: copy/paste `languages/en.json` to `languages/(your-code).json`, fill out the info at the top, and start translating keys.\n    - Also add `src/wwwroot/imgs/flags/(your-code).jpg` as a small icon image of a flag that represents the language.\n    - You can use https://github.com/mcmonkeyprojects/translate-tool to fill out any keys you can't be bothered filling in yourself with automatic AI-powered translation\n- Are you adding new translatable keys?\n    - I use the hidden webconsole call `debugSubmitTranslatables()` to generate `languages/en.debug` which contains a raw key list, and then use `--add-json` to add it in with the translate tool.\n\n# Legal\n\nBy submitting a contribution to this repo, you agree to grant a perpetual, worldwide, non-exclusive, royalty-free, irrevocable license to the Stability.AI organization to use, copy, modify, and distribute your contribution under the terms of the MIT License, view [LICENSE.txt](/LICENSE.txt) for details, and under any future license we may change to.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.4326171875,
          "content": "FROM mcr.microsoft.com/dotnet/sdk:8.0-bookworm-slim\n\n# Install python\nRUN apt update\nRUN apt install -y git wget build-essential python3.11 python3.11-venv python3.11-dev\n\n# Install dependencies for controlnet preprocessors\nRUN apt install -y libglib2.0-0 libgl1\n\n# Copy swarm's files into the docker container\nCOPY . .\n\n# Send the port forward\nEXPOSE 7801\n\n# Set the run file to the launch script\nENTRYPOINT [\"bash\", \"launchtools/docker.sh\"]\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0537109375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2024 Stability AI\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.5888671875,
          "content": "# StableSwarmUI\n\n**StableSwarmUI 0.6.4.1 Beta**.\n\nA Modular Stable Diffusion Web-User-Interface, with an emphasis on making powertools easily accessible, high performance, and extensibility.\n\n![ui-screenshot](.github/images/stableswarmui.jpg)\n\nJoin the [Discord](https://discord.gg/q2y38cqjNw) to discuss the project, get support, see announcements, etc.\n\nFollow the [Feature Announcements Thread](https://github.com/Stability-AI/StableSwarmUI/discussions/11) for updates on new features.\n\n# Migration Notice\n\nAs of 2024/06/21 StableSwarmUI will no longer be maintained under Stability AI.\n\nThe original developer will be maintaining an independent version of this project as [mcmonkeyprojects/SwarmUI](https://github.com/mcmonkeyprojects/SwarmUI)\n\nWindows users can migrate to the new independent repo by simply updating and then running `migrate-windows.bat`\n\nFor Linux, Mac, or manual Windows: open a terminal in your Swarm folder then run `git remote set-url origin https://github.com/mcmonkeyprojects/SwarmUI`\n\nSee full migration guide here: https://github.com/mcmonkeyprojects/SwarmUI/discussions/2\n\n----\n\n# Status\n\nThis project is in **Beta** status. This means for most tasks, Swarm has excellent tooling available to you, but there is much more planned. Swarm is recommended as an ideal UI for most users, beginners and pros alike. There are still some things to be worked out.\n\nBeginner users will love Swarm's primary Generate tab interface, making it easy to generate anything with a variety of powerful features. Advanced users may favor the Comfy Workflow tab to get the unrestricted raw graph, but will still have reason to come back to the Generate tab for convenience features (image editor, auto-workflow-generation, etc) and powertools (eg Grid Generator).\n\nThose interested in helping push Swarm from Beta to a Full ready-for-anything perfected Release status are welcome to submit PRs (read the [Contributing](/CONTRIBUTING.md) document first), and you can contact us here on GitHub or on [Discord](https://discord.gg/q2y38cqjNw). I highly recommend reaching out to ask about plans for a feature before PRing it. There may already be specific plans or even a work in progress.\n\nKey feature targets not yet implemented:\n- Better mobile browser support\n- full detail \"Current Model\" display in UI, separate from the model selector (probably as a tab within the batch sidebar?)\n    - And a way to dynamically shift tabs around between spots for convenience / layout customization\n- LLM-assisted prompting\n- convenient direct-distribution of Swarm as a program (Electron app?)\n\n# Try It On Google Colab or Runpod\n\n### Google Colab\n\n**WARNING**: Google Colab does not necessarily allow remote WebUIs, particularly for free accounts, use at your own risk.\n\nColab link if you want to try Swarm: https://colab.research.google.com/github/Stability-AI/StableSwarmUI/blob/master/colab/colab-notebook.ipynb\n\n### Runpod\n\nRunpod template (note: maintained by third party contributor [nerdylive123](https://github.com/nerdylive123)): https://runpod.io/console/deploy?template=u7mlkrmxq3&ref=c6jd6jj0\n\nNote it may take several minutes to start up the first time. Check the container logs to see setup progress. Check the template `?` info for hints on how to use.\n\n# Installing on Windows\n\nNote: if you're on Windows 10, you may need to manually install [git](https://git-scm.com/download/win) and [DotNET 8](https://dotnet.microsoft.com/en-us/download/dotnet/8.0) first. (Windows 11 this is automated).\n\n- Download [The Install-Windows.bat file](https://github.com/Stability-AI/StableSwarmUI/releases/download/0.6.1-Beta/install-windows.bat), store it somewhere you want to install at (not `Program Files`), and run it.\n    - It should open a command prompt and install itself.\n    - If it closes without going further, try running it again, it sometimes needs to run twice. (TODO: Fix that)\n    - It will place an icon on your desktop that you can use to re-launch the server at any time.\n    - When the installer completes, it will automatically launch the StableSwarmUI server, and open a browser window to the install page.\n    - Follow the install instructions on the page.\n    - After you submit, be patient, some of the install processing take a few minutes (downloading models and etc).\n\n(TODO): Even easier self-contained pre-installer, a `.msi` or `.exe` that provides a general install screen and lets you pick folder and all.\n\n# Alternate Manual Windows Install\n\n- Install git from https://git-scm.com/download/win\n- Install DotNET 8 SDK from https://dotnet.microsoft.com/en-us/download/dotnet/8.0 (Make sure to get the SDK x64 for Windows)\n- open a terminal to the folder you want swarm in and run `git clone https://github.com/Stability-AI/StableSwarmUI`\n- open the folder and run `launch-windows.bat`\n\n# Installing on Linux\n\n- Install `git`, `python3` via your OS package manager if they are not already installed (make sure to include `pip` and `venv` on distros that do not include them in python directly)\n    - For example, on recent Ubuntu versions, `sudo apt install git python3-pip python3-venv`\n- Download [the install-linux.sh file](https://github.com/Stability-AI/StableSwarmUI/releases/download/0.6.1-Beta/install-linux.sh), store it somewhere you want to install at, and run it\n    - If you like terminals, you can open a terminal to the folder and run the following commands:\n        - `wget https://github.com/Stability-AI/StableSwarmUI/releases/download/0.6.1-Beta/install-linux.sh -O install-linux.sh`\n        - `chmod +x install-linux.sh`\n- Run the `./install-linux.sh` script, it will install everything for you and eventually open the webpage in your browser.\n- Follow the install instructions on-page.\n\n- You can at any time in the future run the `launch-linux.sh` script to re-launch Swarm.\n- If the page doesn't open itself, you can manually open `http://localhost:7801`\n\n# Alternate Manual Linux Install\n\n- Install `git`, `python3` via your OS package manager if they are not already installed (make sure to include `pip` and `venv` on distros that do not include them in python directly)\n    - For example, on recent Ubuntu versions, `sudo apt install git python3-pip python3-venv`\n- Install DotNET 8 using the instructions at https://dotnet.microsoft.com/en-us/download/dotnet/8.0 (you need `dotnet-sdk-8.0`, as that includes all relevant sub-packages)\n    - Some users [have said](https://github.com/Stability-AI/StableSwarmUI/pull/6) that certain Linux distros expect `aspnet-runtime` to be installed separately\n- Open a shell terminal and `cd` to a directory you want to install into\n- Run shell commands:\n    - `git clone https://github.com/Stability-AI/StableSwarmUI`\n    - cd `StableSwarmUI`\n    - `./launch-linux.sh`\n- open `http://localhost:7801/Install` (if it doesn't launch itself)\n- Follow the install instructions on-page.\n\n(TODO): Maybe outlink a dedicated document with per-distro details and whatever. Maybe also make a one-click installer for Linux?\n\n# Installing on Mac\n\n> **Note**: You can only run StableSwarmUI on Mac computers with M1 or M2 (Mx) Apple silicon processors.\n\n- Open Terminal.\n- Ensure your `brew` packages are updated with `brew update`.\n- Verify your `brew` installation with `brew doctor`. You should not see any error in the command output.\n- Install .NET for macOS: `brew install dotnet`.\n- If you don't have Python, install it: `brew install python@3.10` and `brew install virtualenv`\n- Change the directory (`cd`) to the folder where you want to install StableSwarmUI.\n- Clone the StableSwarmUI GitHub repository: `git clone https://github.com/Stability-AI/StableSwarmUI`.\n- `cd StableSwarmUI` and run the installation script: `./launch-macos.sh`.\n\nThe installation starts now and downloads the Stable Diffusion models from the internet. Depending on your internet connection, this may take several minutes. Wait for your web browser to open the StableSwarmUI window.\n\n> During the StableSwarmUI installation, you are prompted for the type of backend you want to use. For Mac computers with M1 or M2, you can safely choose the ComfyUI backend and choose the Stable Diffusion XL Base and Refiner models in the Download Models screen.\n\n# Running with Docker\n\n- To forward an Nvidia GPU, you must have the Nvidia Container Toolkit installed: https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html\n- Open a shell terminal and `cd` to a directory you want to install into\n- Run shell commands:\n    - `git clone https://github.com/Stability-AI/StableSwarmUI`\n    - cd `StableSwarmUI`\n    - `./launch-docker.sh`\n    - Open your browser to `localhost:7801`\n- Note that it will forward the `Models` and `Output` directory, and will mount `Data` and `dlbackend` as independent persistent volumes.\n\n# Documentation\n\nSee [the documentation folder](/docs/README.md).\n\n# Motivations\n\nThe \"Swarm\" name is in reference to the original key function of the UI: enabling a 'swarm' of GPUs to all generate images for the same user at once (especially for large grid generations). This is just the feature that inspired the name and not the end all of what Swarm is.\n\nThe overall goal of StableSwarmUI is to a be full-featured one-stop-shop for all things Stable Diffusion.\n\nSee [the motivations document](/docs/Motivations.md) for motivations on technical choices.\n\n# Legal\n\nThis project:\n- embeds a copy of [7-zip](https://7-zip.org/download.html) (LGPL).\n- has the ability to auto-install [ComfyUI](https://github.com/comfyanonymous/ComfyUI) (GPL).\n- has the option to use as a backend [AUTOMATIC1111/stable-diffusion-webui](https://github.com/AUTOMATIC1111/stable-diffusion-webui) (AGPL).\n- can automatically install [christophschuhmann/improved-aesthetic-predictor](https://github.com/christophschuhmann/improved-aesthetic-predictor) (Apache2).\n- can automatically install [yuvalkirstain/PickScore](https://github.com/yuvalkirstain/PickScore) (MIT).\n- can automatically install [git-for-windows](https://git-scm.com/download/win) (GPLv2).\n- can automatically install MIT/BSD/Apache2/PythonSoftwareFoundation pip packages: [spandrel](https://pypi.org/project/spandrel/), [dill](https://pypi.org/project/dill/), [imageio-ffmpeg](https://pypi.org/project/imageio-ffmpeg/), [opencv-python-headless](https://pypi.org/project/opencv-python-headless/), [matplotlib](https://pypi.org/project/matplotlib/), [rembg](https://pypi.org/project/rembg/), [kornia](https://pypi.org/project/kornia/), [Cython](https://pypi.org/project/Cython/)\n- can automatically install [ultralytics](https://github.com/ultralytics/ultralytics) (AGPL) for `YOLOv8` face detection (ie `SwarmYoloDetection` node or `<segment:yolo-...>` syntax usage may become subject to AGPL terms),\n- can automatically install [insightface](https://github.com/deepinsight/insightface) (MIT) for `IP Adapter - Face` support\n- uses [JSON.NET](https://github.com/JamesNK/Newtonsoft.Json) (MIT), [FreneticUtilities](https://github.com/FreneticLLC/FreneticUtilities) (MIT), [LiteDB](https://github.com/mbdavid/LiteDB) (MIT), [ImageSharp](https://github.com/SixLabors/ImageSharp/) (Apache2 under open-source Split License)\n- embeds copies of web assets from [BootStrap](https://getbootstrap.com/) (MIT), [Select2](https://select2.org/) (MIT), [JQuery](https://jquery.com/) (MIT), [exifr](https://github.com/MikeKovarik/exifr) (MIT).\n- has the option to connect to remote servers to use [the Stability AI API](https://platform.stability.ai/) as a backend.\n- supports user-built extensions which may have their own licenses or legal conditions.\n\nStableSwarmUI itself is under the MIT license, however some usages may be affected by the GPL variant licenses of connected projects list above, and note that any models used have their own licenses.\n\n### License\n\nThe MIT License (MIT)\n\nCopyright (c) 2024 Stability AI\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "StableSwarmUI.sln",
          "type": "blob",
          "size": 1.083984375,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.5.33530.505\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"StableSwarmUI\", \"src\\StableSwarmUI.csproj\", \"{2A621042-196A-4F9C-88EA-10369EAEE774}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{2A621042-196A-4F9C-88EA-10369EAEE774}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{2A621042-196A-4F9C-88EA-10369EAEE774}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{2A621042-196A-4F9C-88EA-10369EAEE774}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{2A621042-196A-4F9C-88EA-10369EAEE774}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {FD662A7C-77C1-49E7-B0AC-EF986731A226}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "colab",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.642578125,
          "content": "services:\n  stableswarmui:\n    image: stableswarmui\n    build: .\n    container_name: stableswarmui\n    # uncomment `networks: host` if you want to access other services on the host network (eg a separated comfy instance)\n    # networks: host\n    volumes:\n      - swarmdata:/Data\n      - swarmbackend:/dlbackend\n      - ./Models:/Models\n      - ./Output:/Output\n    ports:\n      - \"7801:7801\"\n    deploy:\n      resources:\n        reservations:\n          devices:\n            - driver: nvidia\n              # change the count to the number of GPUs you want to use.\n              count: 1\n              capabilities: [gpu]\nvolumes:\n  swarmdata:\n  swarmbackend:\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "install-linux.sh",
          "type": "blob",
          "size": 1.013671875,
          "content": "#!/usr/bin/env bash\n\n# Ensure correct local path.\nSCRIPT_DIR=$( cd -- \"$( dirname -- \"${BASH_SOURCE[0]}\" )\" &> /dev/null && pwd )\ncd $SCRIPT_DIR\n\n# Accidental run prevention\nif [ -d \"StableSwarmUI\" ]; then\n    echo \"StableSwarmUI already exists in this directory. Please remove it before installing.\"\n    exit 1\nfi\nif [ -f \"StableSwarmUI.sln\" ]; then\n    echo \"StableSwarmUI already exists in this directory. Please remove it before installing.\"\n    exit 1\nfi\n\n# Download swarm\ngit clone https://github.com/Stability-AI/StableSwarmUI\ncd StableSwarmUI\n\n# install dotnet\ncd launchtools\nrm dotnet-install.sh\n# https://learn.microsoft.com/en-us/dotnet/core/install/linux-scripted-manual#scripted-install\nwget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh\nchmod +x dotnet-install.sh\n\n# Note: manual installers that want to avoid home dir, add to both of the below lines: --install-dir $SCRIPT_DIR/.dotnet\n./dotnet-install.sh --channel 8.0 --runtime aspnetcore\n./dotnet-install.sh --channel 8.0\ncd ..\n\n# Launch\n./launch-linux.sh $@\n"
        },
        {
          "name": "install-windows.bat",
          "type": "blob",
          "size": 0.7412109375,
          "content": "@echo off\n\ncd /d \"%~dp0\"\n\nif exist StableSwarmUI (\n    echo StableSwarmUI is already installed in this folder. If this is incorrect, delete the 'StableSwarmUI' folder and try again.\n    pause\n    exit\n)\n\nif exist StableSwarmUI.sln (\n    echo StableSwarmUI is already installed in this folder. If this is incorrect, delete 'StableSwarmUI.sln' and try again.\n    pause\n    exit\n)\n\nwinget install Microsoft.DotNet.SDK.8 --accept-source-agreements --accept-package-agreements\nwinget install --id Git.Git -e --source winget --accept-source-agreements --accept-package-agreements\n\ngit clone https://github.com/Stability-AI/StableSwarmUI\ncd StableSwarmUI\n\ncall .\\make-shortcut.bat\n\ncall .\\launch-windows.bat --launch_mode webinstall\n\nIF %ERRORLEVEL% NEQ 0 ( pause )\n"
        },
        {
          "name": "languages",
          "type": "tree",
          "content": null
        },
        {
          "name": "launch-docker.sh",
          "type": "blob",
          "size": 0.390625,
          "content": "#!/usr/bin/env bash\n\ndocker build -t stableswarmui .\n\n# add \"--network=host\" if you want to access other services on the host network (eg a separated comfy instance)\ndocker run -it \\\n    --name stableswarmui \\\n    --mount source=swarmdata,target=/Data \\\n    --mount source=swarmbackend,target=/dlbackend \\\n    -v ./Models:/Models \\\n    -v ./Output:/Output \\\n    --gpus=all -p 7801:7801 stableswarmui\n"
        },
        {
          "name": "launch-linux.sh",
          "type": "blob",
          "size": 1.6005859375,
          "content": "#!/usr/bin/env bash\n\n# Ensure correct local path.\nSCRIPT_DIR=$( cd -- \"$( dirname -- \"${BASH_SOURCE[0]}\" )\" &> /dev/null && pwd )\ncd $SCRIPT_DIR\n\n# Add dotnet non-admin-install to path\nexport PATH=\"$SCRIPT_DIR/.dotnet:~/.dotnet:$PATH\"\n\n# Server settings option\nif [ -f ./src/bin/always_pull ]; then\n    echo \"Pulling latest changes...\"\n    git pull\nfi\n\nif [ -f ./src/bin/must_rebuild ]; then\n    echo \"Rebuilding...\"\n    rm -rf ./src/bin/live_release_backup\n    mv ./src/bin/live_release ./src/bin/live_release_backup\n    rm ./src/bin/must_rebuild\nelif [ -d .git ]; then\n    cur_head=`git rev-parse HEAD`\n    built_head=`cat src/bin/last_build`\n    if [ \"$cur_head\" != \"$built_head\" ]; then\n        printf \"\\n\\nWARNING: You did a git pull without building. Will now build for you...\\n\\n\"\n        rm -rf ./src/bin/live_release_backup\n        mv ./src/bin/live_release ./src/bin/live_release_backup\n    fi\nelse\n    printf \"\\n\\nWARNING: YOU DID NOT CLONE FROM GIT. THIS WILL BREAK SOME SYSTEMS. PLEASE INSTALL PER THE README.\\n\\n\"\nfi\n\n# Build the program if it isn't already built\nif [ ! -f src/bin/live_release/StableSwarmUI.dll ]; then\n    dotnet build src/StableSwarmUI.csproj --configuration Release -o ./src/bin/live_release\n    cur_head=`git rev-parse HEAD`\n    echo $cur_head > src/bin/last_build\nfi\n\n# Default env configuration, gets overwritten by the C# code's settings handler\nexport ASPNETCORE_ENVIRONMENT=\"Production\"\nexport ASPNETCORE_URLS=\"http://*:7801\"\n# Actual runner.\ndotnet src/bin/live_release/StableSwarmUI.dll $@\n\n# Exit code 42 means restart, anything else = don't.\nif [ $? == 42 ]; then\n    . ./launch-linux.sh $@\nfi\n"
        },
        {
          "name": "launch-macos.sh",
          "type": "blob",
          "size": 0.6123046875,
          "content": "#!/usr/bin/env bash\n\n# Ensure correct local path.\nSCRIPT_DIR=$( cd -- \"$( dirname -- \"${BASH_SOURCE[0]}\" )\" &> /dev/null && pwd )\ncd $SCRIPT_DIR\n\n# Building first is more reliable than running directly from src\ndotnet build src/StableSwarmUI.csproj --configuration Release -o ./src/bin/live_release\n# Default env configuration, gets overwritten by the C# code's settings handler\nASPNETCORE_ENVIRONMENT=\"Production\"\nASPNETCORE_URLS=\"http://*:7801\"\n\n# PyTorch MPS fallback to CPU, so incompatible comfy nodes can still work.\nexport PYTORCH_ENABLE_MPS_FALLBACK=1\n\n# Actual runner.\ndotnet src/bin/live_release/StableSwarmUI.dll $@\n"
        },
        {
          "name": "launch-windows-dev.ps1",
          "type": "blob",
          "size": 0.8076171875,
          "content": "# Ensure correct local path.\n$thisPath = Split-Path $MyInvocation.MyCommand.Path -Parent\ncd $thisPath\n\n# Visual Studio likes to generate invalid files here for some reason, so autonuke it\nif (Test-Path \"src/Properties/launchSettings.json\") {\n    rm src/Properties/launchSettings.json\n}\n\n# Nuke build files to ensure our build is fresh and won't skip past errors\nRemove-Item 'src/bin/' -Recurse\nRemove-Item 'src/obj/' -Recurse\n\n# Building first is more reliable than running directly from src\ndotnet build src/StableSwarmUI.csproj --configuration Debug -o src/bin/live_release\n\n# Default env configuration, gets overwritten by the C# code's settings handler\n$Env:ASPNETCORE_ENVIRONMENT = \"Production\"\n$Env:ASPNETCORE_URLS = \"http://*:7801\"\n\n# Actual runner.\ndotnet src\\bin\\live_release\\StableSwarmUI.dll --environment dev @args\n"
        },
        {
          "name": "launch-windows.bat",
          "type": "blob",
          "size": 1.9951171875,
          "content": "@echo off\nsetlocal ENABLEDELAYEDEXPANSION\n\nrem Ensure correct local path.\ncd /D \"%~dp0\"\n\nrem Microsoft borked the dotnet installer/path handler, so force x64 to be read first\nset PATH=C:\\Program Files\\dotnet;%PATH%\n\nrem Server settings option\nif exist .\\src\\bin\\always_pull (\n    echo \"Pulling latest changes...\"\n    git pull\n)\n\nif exist .\\src\\bin\\must_rebuild (\n    echo \"Rebuilding...\"\n    rmdir /s /q .\\src\\bin\\live_release_backup\n    move .\\src\\bin\\live_release .\\src\\bin\\live_release_backup\n    del .\\src\\bin\\must_rebuild\n) else if not exist .git (\n    echo \"\" & echo \"\"\n    echo \"WARNING: YOU DID NOT CLONE FROM GIT. THIS WILL BREAK SOME SYSTEMS. PLEASE INSTALL PER THE README.\"\n    echo \"\" & echo \"\"\n) else (\n    for /f \"delims=\" %%i in ('git rev-parse HEAD') do set CUR_HEAD=%%i\n    set /p BUILT_HEAD=<src/bin/last_build\n    if not \"!CUR_HEAD!\"==\"!BUILT_HEAD!\" (\n        echo \"\" & echo \"\"\n        echo \"WARNING: You did a git pull without building. Will now build for you...\"\n        echo \"\" & echo \"\"\n        rmdir /s /q .\\src\\bin\\live_release_backup\n        move .\\src\\bin\\live_release .\\src\\bin\\live_release_backup\n    )\n)\n\nrem Build the program if it isn't already built\nif not exist src\\bin\\live_release\\StableSwarmUI.dll (\n    rem For some reason Microsoft's nonsense is missing the official nuget source? So forcibly add that to be safe.\n    dotnet nuget add source https://api.nuget.org/v3/index.json --name \"NuGet official package source\"\n\n    dotnet build src/StableSwarmUI.csproj --configuration Release -o src/bin/live_release\n    for /f \"delims=\" %%i in ('git rev-parse HEAD') do set CUR_HEAD2=%%i\n    echo !CUR_HEAD2!> src/bin/last_build\n)\n\nrem Default env configuration, gets overwritten by the C# code's settings handler\nset ASPNETCORE_ENVIRONMENT=\"Production\"\nset ASPNETCORE_URLS=\"http://*:7801\"\n\ndotnet src\\bin\\live_release\\StableSwarmUI.dll %*\n\nrem Exit code 42 means restart, anything else = don't.\nif %ERRORLEVEL% EQU 42 (\n    echo \"Restarting...\"\n    call launch-windows.bat %*\n)\n\nIF %ERRORLEVEL% NEQ 0 ( pause )\n"
        },
        {
          "name": "launchtools",
          "type": "tree",
          "content": null
        },
        {
          "name": "make-shortcut.bat",
          "type": "blob",
          "size": 0.2646484375,
          "content": "@echo off\n\nset SHORTCUTPATH=\"%userprofile%\\Desktop\\StableSwarmUI.url\"\necho [InternetShortcut] >> \"%SHORTCUTPATH%\"\necho URL=\"%CD%\\launch-windows.bat\" >> \"%SHORTCUTPATH%\"\necho IconFile=\"%CD%\\src\\wwwroot\\favicon.ico\" >> \"%SHORTCUTPATH%\"\necho IconIndex=0 >> \"%SHORTCUTPATH%\"\n"
        },
        {
          "name": "migrate-windows.bat",
          "type": "blob",
          "size": 0.1591796875,
          "content": "@echo off\n\ngit remote set-url origin https://github.com/mcmonkeyprojects/SwarmUI\n\necho Migrated to the mcmonkeyprojects SwarmUI version of this project\n\ntimeout 3\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "update-linuxmac.sh",
          "type": "blob",
          "size": 0.564453125,
          "content": "#!/usr/bin/env bash\n\n# Ensure correct local path.\nSCRIPT_DIR=$( cd -- \"$( dirname -- \"${BASH_SOURCE[0]}\" )\" &> /dev/null && pwd )\ncd $SCRIPT_DIR\n\n# Add dotnet non-admin-install to path\nexport PATH=\"$SCRIPT_DIR/.dotnet:~/.dotnet:$PATH\"\n\n# The actual update\ngit pull\n\n# Make a backup of the current live_release to be safe\nif [ -d ./src/bin/live_release ]; then\n    rm -rf ./src/bin/live_release_backup\n    mv ./src/bin/live_release ./src/bin/live_release_backup\nfi\n\n# Now build the new copy\ndotnet build src/StableSwarmUI.csproj --configuration Release -o ./src/bin/live_release\n"
        },
        {
          "name": "update-windows.bat",
          "type": "blob",
          "size": 0.7294921875,
          "content": "@echo off\n\nrem Ensure correct local path.\ncd /D \"%~dp0\"\n\nrem Microsoft borked the dotnet installer/path handler, so force x64 to be read first\nset PATH=C:\\Program Files\\dotnet;%PATH%\n\nrem For some reason Microsoft's nonsense is missing the official nuget source? So forcibly add that to be safe.\ndotnet nuget add source https://api.nuget.org/v3/index.json --name \"NuGet official package source\"\n\nrem The actual update\ngit pull\n\nrem Make a backup of the current live_release to be safe\nif exist src\\bin\\live_release\\ (\n    rmdir /s /q src\\bin\\live_release_backup\n    move src\\bin\\live_release src\\bin\\live_release_backup\n)\n\nrem Now build the new copy\ndotnet build src/StableSwarmUI.csproj --configuration Release -o src/bin/live_release\n\ntimeout 3\n"
        }
      ]
    }
  ]
}