{
  "metadata": {
    "timestamp": 1736711033879,
    "page": 766,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "keijiro/Lasp",
      "stars": 1574,
      "defaultBranch": "v2",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.162109375,
          "content": "* -text\n\n*.cs        text eol=lf diff=csharp\n*.shader    text eol=lf\n*.cginc     text eol=lf\n*.hlsl      text eol=lf\n*.compute   text eol=lf\n\n*.meta      text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1474609375,
          "content": "# Windows\nThumbs.db\nDesktop.ini\n\n# macOS\n.DS_Store\n\n# Code Editors\n/.idea\n/.vscode\n/*.csproj\n/*.sln\n*.swp\n*.vcxproj.user\n\n# Unity\n/Library\n/Logs\n/Temp\n"
        },
        {
          "name": "Assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1826171875,
          "content": "This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n"
        },
        {
          "name": "Packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "ProjectSettings",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.0244140625,
          "content": "LASP\n====\n\n**LASP** is a Unity plugin providing low-latency audio input features that are\nuseful to create audio-reactive visuals.\n\nDemos\n-----\n\n![gif](https://i.imgur.com/L98u4AI.gif)\n\n**Sphere** is the simplest example of LASP that shows an animated sphere scaled\nby the audio level. It uses the **Audio Level Tracker** component to calculate\nthe audio level and a **Property Binder** to animate the scale property of the\nsphere.\n\n![gif](https://i.imgur.com/4OVS00N.gif)\n\n**LevelMeter** is a slightly advanced example of the use of Audio Level Tracker\nthat shows low/mid/high frequency band levels. It also uses the raw waveform\nfunction to draw the waveform graph.\n\n![screenshot](https://i.imgur.com/D51PENw.png)\n\n**DeviceSelector** shows how to instantiate Audio Level Tracker and set Property\nBinders programmatically at run time.\n\n![gif](https://i.imgur.com/gVwN4qE.gif)\n\n**Lissajous** is an example that draws a Lissajous curve using the **Input\nStream** class and its interleaved waveform function.\n\n![gif](https://i.imgur.com/jT0Tj1o.gif)\n\n**Spectrum** is an example showing how to use the **Spectrum Analyzer**\ncomponent to get the audio frequency spectrum of an input stream.\n\nSystem Requirements\n-------------------\n\n- Unity 2019.4 or later\n\nAt the moment, LASP only supports desktop platforms (Windows, macOS, and Linux).\n\nHow To Install\n--------------\n\nThis package uses the [scoped registry] feature to resolve package\ndependencies. Please add the following lines to the manifest file\n(`Packages/manifest.json`).\n\n[scoped registry]: https://docs.unity3d.com/Manual/upm-scoped.html\n\n<details>\n<summary>.NET Standard 2.0 (Unity 2021.1 or earlier)</summary>\n\nTo the `scopedRegistries` section:\n\n```\n{\n  \"name\": \"Unity NuGet\",\n  \"url\": \"https://unitynuget-registry.azurewebsites.net\",\n  \"scopes\": [ \"org.nuget\" ]\n},\n{\n  \"name\": \"Keijiro\",\n  \"url\": \"https://registry.npmjs.com\",\n  \"scopes\": [ \"jp.keijiro\" ]\n}\n```\n\nTo the `dependencies` section:\n\n```\n\"org.nuget.system.memory\": \"4.5.3\",\n\"jp.keijiro.lasp\": \"2.1.6\"\n```\n\nAfter the changes, the manifest file should look like:\n\n```\n{\n  \"scopedRegistries\": [\n    {\n      \"name\": \"Unity NuGet\",\n      \"url\": \"https://unitynuget-registry.azurewebsites.net\",\n      \"scopes\": [ \"org.nuget\" ]\n    },\n    {\n      \"name\": \"Keijiro\",\n      \"url\": \"https://registry.npmjs.com\",\n      \"scopes\": [ \"jp.keijiro\" ]\n    }\n  ],\n  \"dependencies\": {\n    \"org.nuget.system.memory\": \"4.5.3\",\n    \"jp.keijiro.lasp\": \"2.1.6\",\n    ...\n```\n</details>\n\n<details>\n<summary>.NET Standard 2.1 (Unity 2021.2 or later)</summary>\n\nTo the `scopedRegistries` section:\n\n```\n{\n  \"name\": \"Keijiro\",\n  \"url\": \"https://registry.npmjs.com\",\n  \"scopes\": [ \"jp.keijiro\" ]\n}\n```\n\nTo the `dependencies` section:\n\n```\n\"jp.keijiro.lasp\": \"2.1.6\"\n```\n\nAfter the changes, the manifest file should look like:\n\n```\n{\n  \"scopedRegistries\": [\n    {\n      \"name\": \"Keijiro\",\n      \"url\": \"https://registry.npmjs.com\",\n      \"scopes\": [ \"jp.keijiro\" ]\n    }\n  ],\n  \"dependencies\": {\n    \"jp.keijiro.lasp\": \"2.1.6\",\n    ...\n```\n</details>\n\nAudio Level Tracker Component\n-----------------------------\n\n**Audio Level Tracker** is a component that receives an audio stream and\ncalculates the current audio level. It supports **Property Binders** that\nmodifies properties of external objects based on the normalized audio level.\n\n![gif](https://i.imgur.com/wBsYq64.gif)\n\nIt tracks the most recent peak level and calculates the normalized level based\non the difference between the current level and the peak level. It only outputs\nan effective value when the current level is in its dynamic range that is\nindicated by the gray band in the level meter.\n\n### Default Device / Device ID\n\nAs an audio source, you can use the **Default Device** or one of the available\naudio devices by specifying its Device ID.\n\nDevice IDs are system-generated random string like `{4786-742f-9e42}`. On\nEditor, you can use the **Select** button to find a device and get its ID. Note\nthat those ID strings are system-dependent. You have to reconfigure it when\nrunning the project on a different platform.\n\nFor runtime use, you can use `AudioSystem.InputDevices` to enumerate the\navailable devices and get those IDs. Please check the DeviceSelector example for\nfurther details.\n\n### Channel\n\nSelect a channel to use as an input, or stay 0 for monaural devices.\n\n### Filter Type\n\nFour types of filters are available: **Bypass**, **Low Pass**, **Band Pass**,\nand **High Pass**. These filters are useful to detect a specific type of\nrhythmic accents. For instance, you can use the low pass filter to create a\nbehavior reacting to kick drums or basslines.\n\n### Dynamic Range (dB)\n\nThe **Dynamic Range** specifies the range of audio level normalization. The\noutput value becomes zero when the input level is equal to or lower than\n*Peak Level - Dynamic Range*.\n\n### Auto Gain\n\nWhen enabled, it automatically tracks the peak level, as explained above. When\ndisabled, it fixes the peak level at 0 dB. In this case, you can manually\ncontrol the effective range via the **Gain** property.\n\n### Smooth Fall\n\nWhen enabled, the output value gradually falls to the current actual audio\nlevel. It's useful to make choppy animation smoother.\n\n![gif](https://i.imgur.com/VKiZx4M.gif)\n\nSpectrum Analyzer Component\n---------------------------\n\n![gif](https://i.imgur.com/sWRMSMG.gif)\n\n**Spectrum Analyzer** is a component that receives an audio stream and applies\nthe FFT (Fast Fourier Transform) to get the spectrum data.\n\nIt normalizes the spectrum values by using the same algorithm as Audio Level\nTracker. Please see the section above for details.\n\nYou can retrieve the spectrum data using the scripting API. Please see the\nSpectrumAnalyzer example for detailed usage.\n\nSpectrum To Texture Component\n-----------------------------\n\n![screenshot](https://i.imgur.com/r9kxPF3.png)\n\nSpectrum To Texture is a utility component that converts spectrum data into a\ntexture that is useful for creating visual effects using shaders.\n\nThere are two methods to use the spectrum texture.\n\n### Via Render Texture\n\nYou can bake the spectrum data into a render texture by specifying it in the\nRender Texture property. The render texture must follow the following\nrequirements:\n\n- Width: Must be the same as the spectrum resolution.\n- Height: Must be 1.\n- Format: R32_SFloat\n\n### Via Material Override\n\nYou can override a texture property of a material using the Material Override\nproperty, which is convenient when using the spectrum texture with Mesh\nRenderer.\n\nScripting Interface\n-------------------\n\nThere are several public methods/properties in LASP classes, such as\n`AudioLevelTracker`, `AudioSystem`, `InputStream`. Please check the example\nscripts for detailed usages.\n\nKnown Issue\n-----------\n\nWhen adding a property binder to an Audio Level Tracker component, the\nfollowing error message may be shown in Console.\n\n> Generating diff  of this object for undo because the type tree changed.\n\nThis error is caused by [Issue 1198546]. Please wait for a fix to arrive.\n\n[Issue 1198546]: https://issuetracker.unity3d.com/issues/serializedproperty-undo-does-not-work-properly-when-the-parent-serializedobject-is-a-script-with-managed-references\n"
        }
      ]
    }
  ]
}