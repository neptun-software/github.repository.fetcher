{
  "metadata": {
    "timestamp": 1736711120915,
    "page": 955,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "serilog/serilog-aspnetcore",
      "stars": 1332,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0654296875,
          "content": "# Auto detect text files and perform LF normalization\n\n* text=auto\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.751953125,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n**/Properties/launchSettings.json\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Typescript v1 declaration files\ntypings/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\nsamples/Sample/logs/\n\n.DS_Store\n\n"
        },
        {
          "name": "Build.ps1",
          "type": "blob",
          "size": 2.87890625,
          "content": "Write-Output \"build: Tool versions follow\"\n\ndotnet --version\ndotnet --list-sdks\n\nWrite-Output \"build: Build started\"\n\nPush-Location $PSScriptRoot\ntry {\n    if(Test-Path .\\artifacts) {\n        Write-Output \"build: Cleaning ./artifacts\"\n        Remove-Item ./artifacts -Force -Recurse\n    }\n\n    & dotnet restore --no-cache\n\n    $dbp = [Xml] (Get-Content .\\Directory.Version.props)\n    $versionPrefix = $dbp.Project.PropertyGroup.VersionPrefix\n\n    Write-Output \"build: Package version prefix is $versionPrefix\"\n\n    $branch = @{ $true = $env:CI_TARGET_BRANCH; $false = $(git symbolic-ref --short -q HEAD) }[$NULL -ne $env:CI_TARGET_BRANCH];\n    $revision = @{ $true = \"{0:00000}\" -f [convert]::ToInt32(\"0\" + $env:CI_BUILD_NUMBER, 10); $false = \"local\" }[$NULL -ne $env:CI_BUILD_NUMBER];\n    $suffix = @{ $true = \"\"; $false = \"$($branch.Substring(0, [math]::Min(10,$branch.Length)) -replace '([^a-zA-Z0-9\\-]*)', '')-$revision\"}[$branch -eq \"main\" -and $revision -ne \"local\"]\n    $commitHash = $(git rev-parse --short HEAD)\n    $buildSuffix = @{ $true = \"$($suffix)-$($commitHash)\"; $false = \"$($branch)-$($commitHash)\" }[$suffix -ne \"\"]\n\n    Write-Output \"build: Package version suffix is $suffix\"\n    Write-Output \"build: Build version suffix is $buildSuffix\"\n\n    & dotnet build -c Release --version-suffix=$buildSuffix /p:ContinuousIntegrationBuild=true\n    if($LASTEXITCODE -ne 0) { throw \"Build failed\" }\n\n    foreach ($src in Get-ChildItem src/*) {\n        Push-Location $src\n\n        Write-Output \"build: Packaging project in $src\"\n\n        if ($suffix) {\n            & dotnet pack -c Release --no-build --no-restore  -o ../../artifacts --version-suffix=$suffix\n        } else {\n            & dotnet pack -c Release --no-build --no-restore  -o ../../artifacts\n        }\n        if($LASTEXITCODE -ne 0) { throw \"Packaging failed\" }\n\n        Pop-Location\n    }\n\n    foreach ($test in Get-ChildItem test/*.Tests) {\n        Push-Location $test\n\n        Write-Output \"build: Testing project in $test\"\n\n        & dotnet test -c Release --no-build --no-restore\n        if($LASTEXITCODE -ne 0) { throw \"Testing failed\" }\n\n        Pop-Location\n    }\n\n    if ($env:NUGET_API_KEY) {\n        # GitHub Actions will only supply this to branch builds and not PRs. We publish\n        # builds from any branch this action targets (i.e. main and dev).\n\n        Write-Output \"build: Publishing NuGet packages\"\n\n        foreach ($nupkg in Get-ChildItem artifacts/*.nupkg) {\n            & dotnet nuget push -k $env:NUGET_API_KEY -s https://api.nuget.org/v3/index.json \"$nupkg\"\n            if($LASTEXITCODE -ne 0) { throw \"Publishing failed\" }\n        }\n\n        if (!($suffix)) {\n            Write-Output \"build: Creating release for version $versionPrefix\"\n\n            iex \"gh release create v$versionPrefix --title v$versionPrefix --generate-notes $(get-item ./artifacts/*.nupkg) $(get-item ./artifacts/*.snupkg)\"\n        }\n    }\n} finally {\n    Pop-Location\n}\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 1.2822265625,
          "content": "<Project>\n  <!-- Properties in this file are expected to be identical for all Serilog organization projects. If\n   a property value is project-specific, please record it in the CSPROJ file instead. -->\n  <Import Project=\"$(MSBuildThisFileDirectory)Directory.Version.props\" />\n  <PropertyGroup>\n    <LangVersion>latest</LangVersion>\n    <TreatWarningsAsErrors>True</TreatWarningsAsErrors>\n    <!-- The condition is required to support BenchmarkDotNet -->\n    <SignAssembly Condition=\"Exists('$(MSBuildThisFileDirectory)assets/Serilog.snk')\">true</SignAssembly>\n    <AssemblyOriginatorKeyFile>$(MSBuildThisFileDirectory)assets/Serilog.snk</AssemblyOriginatorKeyFile>\n    <CheckEolTargetFramework>false</CheckEolTargetFramework>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <GenerateDocumentationFile>true</GenerateDocumentationFile>\n    <PublishRepositoryUrl>true</PublishRepositoryUrl>\n    <EmbedUntrackedSources>true</EmbedUntrackedSources>\n    <IncludeSymbols>true</IncludeSymbols>\n    <SymbolPackageFormat>snupkg</SymbolPackageFormat>\n  </PropertyGroup>\n  <ItemGroup Condition=\"'$(TargetFrameworkIdentifier)' == '.NETFramework'\">\n    <Reference Include=\"System\" />\n    <Reference Include=\"System.Core\" />\n    <Reference Include=\"Microsoft.CSharp\" />\n  </ItemGroup>\n</Project>\n"
        },
        {
          "name": "Directory.Version.props",
          "type": "blob",
          "size": 0.2294921875,
          "content": "<Project>\n  <PropertyGroup>\n    <!-- This must match the major and minor components of the referenced *.Extensions.* packages (and highest supported .NET TFM). -->\n    <VersionPrefix>9.0.1</VersionPrefix>\n  </PropertyGroup>\n</Project>\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.892578125,
          "content": "# Serilog.AspNetCore&nbsp;[![Build status](https://github.com/serilog/serilog-aspnetcore/actions/workflows/ci.yml/badge.svg?branch=dev)](https://github.com/serilog/serilog-aspnetcore/actions)&nbsp;[![NuGet Version](http://img.shields.io/nuget/v/Serilog.AspNetCore.svg?style=flat)](https://www.nuget.org/packages/Serilog.AspNetCore/)\n\nSerilog logging for ASP.NET Core. This package routes ASP.NET Core log messages through Serilog, so you can get information about ASP.NET's internal operations written to the same Serilog sinks as your application events.\n\nWith _Serilog.AspNetCore_ installed and configured, you can write log messages directly through Serilog or any `ILogger` interface injected by ASP.NET. All loggers will use the same underlying implementation, levels, and destinations.\n\n**Versioning:** This package tracks the versioning and target framework support of its\n[_Microsoft.Extensions.Hosting_](https://nuget.org/packages/Microsoft.Extensions.Hosting) dependency. Most users should choose the version of _Serilog.AspNetCore_ that matches\ntheir application's target framework. I.e. if you're targeting .NET 7.x, choose a 7.x version of _Serilog.AspNetCore_. If\nyou're targeting .NET 8.x, choose an 8.x _Serilog.AspNetCore_ version, and so on.\n\n### Instructions\n\n**First**, install the _Serilog.AspNetCore_ [NuGet package](https://www.nuget.org/packages/Serilog.AspNetCore) into your app.\n\n```shell\ndotnet add package Serilog.AspNetCore\n```\n\n**Next**, in your application's _Program.cs_ file, configure Serilog first.  A `try`/`catch` block will ensure any configuration issues are appropriately logged:\n\n```csharp\nusing Serilog;\n\nLog.Logger = new LoggerConfiguration()\n    .WriteTo.Console()\n    .CreateLogger();\n\ntry\n{\n    Log.Information(\"Starting web application\");\n\n    var builder = WebApplication.CreateBuilder(args);\n    builder.Services.AddSerilog(); // <-- Add this line\n    \n    var app = builder.Build();\n    app.MapGet(\"/\", () => \"Hello World!\");\n\n    app.Run();\n}\ncatch (Exception ex)\n{\n    Log.Fatal(ex, \"Application terminated unexpectedly\");\n}\nfinally\n{\n    Log.CloseAndFlush();\n}\n```\n\nThe `builder.Services.AddSerilog()` call will redirect all log events through your Serilog pipeline.\n\n**Finally**, clean up by removing the remaining configuration for the default logger, including the `\"Logging\"` section from _appsettings.*.json_ files (this can be replaced with [Serilog configuration](https://github.com/serilog/serilog-settings-configuration) as shown in [the _Sample_ project](https://github.com/serilog/serilog-aspnetcore/blob/dev/samples/Sample/Program.cs), if required).\n\nThat's it! With the level bumped up a little you will see log output resembling:\n\n```\n[12:01:43 INF] Starting web application\n[12:01:44 INF] Now listening on: http://localhost:5000\n[12:01:44 INF] Application started. Press Ctrl+C to shut down.\n[12:01:44 INF] Hosting environment: Development\n[12:01:44 INF] Content root path: serilog-aspnetcore/samples/Sample\n[12:01:47 WRN] Failed to determine the https port for redirect.\n[12:01:47 INF] Hello, world!\n[12:01:47 INF] HTTP GET / responded 200 in 95.0581 ms\n```\n\n**Tip:** to see Serilog output in the Visual Studio output window when running under IIS, either select _ASP.NET Core Web Server_ from the _Show output from_ drop-down list, or replace `WriteTo.Console()` in the logger configuration with `WriteTo.Debug()`.\n\nA more complete example, including `appsettings.json` configuration, can be found in [the sample project here](https://github.com/serilog/serilog-aspnetcore/tree/dev/samples/Sample).\n\n### Request logging\n\nThe package includes middleware for smarter HTTP request logging. The default request logging implemented by ASP.NET Core is noisy, with multiple events emitted per request. The included middleware condenses these into a single event that carries method, path, status code, and timing information.\n\nAs text, this has a format like:\n\n```\n[16:05:54 INF] HTTP GET / responded 200 in 227.3253 ms\n```\n\nOr [as JSON](https://github.com/serilog/serilog-formatting-compact):\n\n```json\n{\n  \"@t\": \"2019-06-26T06:05:54.6881162Z\",\n  \"@mt\": \"HTTP {RequestMethod} {RequestPath} responded {StatusCode} in {Elapsed:0.0000} ms\",\n  \"@r\": [\"224.5185\"],\n  \"RequestMethod\": \"GET\",\n  \"RequestPath\": \"/\",\n  \"StatusCode\": 200,\n  \"Elapsed\": 224.5185,\n  \"RequestId\": \"0HLNPVG1HI42T:00000001\",\n  \"CorrelationId\": null,\n  \"ConnectionId\": \"0HLNPVG1HI42T\"\n}\n```\n\nTo enable the middleware, first change the minimum level for the noisy ASP.NET Core log sources to `Warning` in your logger configuration or _appsettings.json_ file:\n\n```csharp\n            .MinimumLevel.Override(\"Microsoft.AspNetCore.Hosting\", LogEventLevel.Warning)\n            .MinimumLevel.Override(\"Microsoft.AspNetCore.Mvc\", LogEventLevel.Warning)\n            .MinimumLevel.Override(\"Microsoft.AspNetCore.Routing\", LogEventLevel.Warning)\n```\n\n> **Tip:** add `{SourceContext}` to your console logger's output template to see the names of loggers; this can help track down the source of a noisy log event to suppress.\n\nThen, in your application's _Program.cs_, add the middleware with `UseSerilogRequestLogging()`:\n\n```csharp\n    var app = builder.Build();\n\n    app.UseSerilogRequestLogging(); // <-- Add this line\n\n    // Other app configuration\n```\n\nIt's important that the `UseSerilogRequestLogging()` call appears _before_ handlers such as MVC. The middleware will not time or log components that appear before it in the pipeline. (This can be utilized to exclude noisy handlers from logging, such as `UseStaticFiles()`, by placing `UseSerilogRequestLogging()` after them.)\n\nDuring request processing, additional properties can be attached to the completion event using `IDiagnosticContext.Set()`:\n\n```csharp\n    public class HomeController : Controller\n    {\n        readonly IDiagnosticContext _diagnosticContext;\n\n        public HomeController(IDiagnosticContext diagnosticContext)\n        {\n            _diagnosticContext = diagnosticContext ??\n                throw new ArgumentNullException(nameof(diagnosticContext));\n        }\n\n        public IActionResult Index()\n        {\n            // The request completion event will carry this property\n            _diagnosticContext.Set(\"CatalogLoadTime\", 1423);\n\n            return View();\n        }\n```\n\nThis pattern has the advantage of reducing the number of log events that need to be constructed, transmitted, and stored per HTTP request. Having many properties on the same event can also make correlation of request details and other data easier.\n\nThe following request information will be added as properties by default:\n\n* `RequestMethod`\n* `RequestPath`\n* `StatusCode`\n* `Elapsed`\n\nYou can modify the message template used for request completion events, add additional properties, or change the event level, using the `options` callback on `UseSerilogRequestLogging()`:\n\n```csharp\napp.UseSerilogRequestLogging(options =>\n{\n    // Customize the message template\n    options.MessageTemplate = \"Handled {RequestPath}\";\n    \n    // Emit debug-level events instead of the defaults\n    options.GetLevel = (httpContext, elapsed, ex) => LogEventLevel.Debug;\n    \n    // Attach additional properties to the request completion event\n    options.EnrichDiagnosticContext = (diagnosticContext, httpContext) =>\n    {\n        diagnosticContext.Set(\"RequestHost\", httpContext.Request.Host.Value);\n        diagnosticContext.Set(\"RequestScheme\", httpContext.Request.Scheme);\n    };\n});\n```\n\n### Two-stage initialization\n\nThe example at the top of this page shows how to configure Serilog immediately when the application starts. This has the benefit of catching and reporting exceptions thrown during set-up of the ASP.NET Core host.\n\nThe downside of initializing Serilog first is that services from the ASP.NET Core host, including the `appsettings.json` configuration and dependency injection, aren't available yet.\n\nTo address this, Serilog supports two-stage initialization. An initial \"bootstrap\" logger is configured immediately when the program starts, and this is replaced by the fully-configured logger once the host has loaded.\n\nTo use this technique, first replace the initial `CreateLogger()` call with `CreateBootstrapLogger()`:\n\n```csharp\nusing Serilog;\nusing Serilog.Events;\n\nLog.Logger = new LoggerConfiguration()\n    .MinimumLevel.Override(\"Microsoft\", LogEventLevel.Information)\n    .Enrich.FromLogContext()\n    .WriteTo.Console()\n    .CreateBootstrapLogger(); // <-- Change this line!\n```\n\nThen, pass a callback to `AddSerilog()` that creates the final logger:\n\n```csharp\nbuilder.Services.AddSerilog((services, lc) => lc\n    .ReadFrom.Configuration(builder.Configuration)\n    .ReadFrom.Services(services)\n    .Enrich.FromLogContext()\n    .WriteTo.Console());\n```\n\nIt's important to note that the final logger **completely replaces** the bootstrap logger: if you want both to log to the console, for instance, you'll need to specify `WriteTo.Console()` in both places, as the example shows.\n\n#### Consuming `appsettings.json` configuration\n\n**Using two-stage initialization**, insert the `ReadFrom.Configuration(builder.Configuration)` call shown in the example above. The JSON configuration syntax is documented in [the _Serilog.Settings.Configuration_ README](https://github.com/serilog/serilog-settings-configuration).\n\n#### Injecting services into enrichers and sinks\n\n**Using two-stage initialization**, insert the `ReadFrom.Services(services)` call shown in the example above. The `ReadFrom.Services()` call will configure the logging pipeline with any registered implementations of the following services:\n\n * `IDestructuringPolicy`\n * `ILogEventEnricher`\n * `ILogEventFilter`\n * `ILogEventSink`\n * `LoggingLevelSwitch`\n\n### JSON output\n\nThe `Console()`, `Debug()`, and `File()` sinks all support JSON-formatted output natively, via the included _Serilog.Formatting.Compact_ package.\n\nTo write newline-delimited JSON, pass a `CompactJsonFormatter` or `RenderedCompactJsonFormatter` to the sink configuration method:\n\n```csharp\n    .WriteTo.Console(new RenderedCompactJsonFormatter())\n```\n\n### Writing to the Azure Diagnostics Log Stream\n\nThe Azure Diagnostic Log Stream ships events from any files in the `D:\\home\\LogFiles\\` folder. To enable this for your app, add a file sink to your `LoggerConfiguration`, taking care to set the `shared` and `flushToDiskInterval` parameters:\n\n```csharp\nLog.Logger = new LoggerConfiguration()\n    .MinimumLevel.Debug()\n    .MinimumLevel.Override(\"Microsoft\", LogEventLevel.Information)\n    .Enrich.FromLogContext()\n    .WriteTo.Console()\n    // Add this line:\n    .WriteTo.File(\n       System.IO.Path.Combine(Environment.GetEnvironmentVariable(\"HOME\"), \"LogFiles\", \"Application\", \"diagnostics.txt\"),\n       rollingInterval: RollingInterval.Day,\n       fileSizeLimitBytes: 10 * 1024 * 1024,\n       retainedFileCountLimit: 2,\n       rollOnFileSizeLimit: true,\n       shared: true,\n       flushToDiskInterval: TimeSpan.FromSeconds(1))\n    .CreateLogger();\n```\n\n### Pushing properties to the `ILogger<T>`\n\nIf you want to add extra properties to all log events in a specific part of your code, you can add them to the **`ILogger<T>`** in **Microsoft.Extensions.Logging** with the following code. For this code to work, make sure you have added the `.Enrich.FromLogContext()` to the `.UseSerilog(...)` statement, as specified in the samples above.\n\n```csharp\n// Microsoft.Extensions.Logging ILogger<T>\n// Yes, it's required to use a dictionary. See https://nblumhardt.com/2016/11/ilogger-beginscope/\nusing (logger.BeginScope(new Dictionary<string, object>\n{\n    [\"UserId\"] = \"svrooij\",\n    [\"OperationType\"] = \"update\",\n}))\n{\n   // UserId and OperationType are set for all logging events in these brackets\n}\n```\n\nThe code above results in the same outcome as if you would push properties in the **LogContext** in Serilog. More details can be found in https://github.com/serilog/serilog/wiki/Enrichment#the-logcontext.\n\n```csharp\n// Serilog LogContext\nusing (LogContext.PushProperty(\"UserId\", \"svrooij\"))\nusing (LogContext.PushProperty(\"OperationType\", \"update\"))\n{\n    // UserId and OperationType are set for all logging events in these brackets\n}\n```\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.2236328125,
          "content": "#!/bin/bash\ndotnet --info\ndotnet restore\n\nfor path in src/**/*.csproj; do\n    dotnet build -f netstandard2.0 -c Release ${path}\ndone\n\nfor path in test/*.Tests/*.csproj; do\n    dotnet test -f netcoreapp2.0 -c Release ${path}\ndone\n"
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.107421875,
          "content": "{\n  \"sdk\": {\n    \"version\": \"9.0.100\",\n    \"allowPrerelease\": false,\n    \"rollForward\": \"latestFeature\"\n  }\n}\n"
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "serilog-aspnetcore.sln",
          "type": "blob",
          "size": 3.583984375,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 16\nVisualStudioVersion = 16.0.29209.62\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"src\", \"src\", \"{A1893BD1-333D-4DFE-A0F0-DDBB2FE526E0}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"test\", \"test\", \"{E30F638E-BBBE-4AD1-93CE-48CC69CFEFE1}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"samples\", \"samples\", \"{F2407211-6043-439C-8E06-3641634332E7}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"assets\", \"assets\", \"{9C21B9DF-AEDD-4AA6-BEA4-912DEF3E5B8E}\"\n\tProjectSection(SolutionItems) = preProject\n\t\tREADME.md = README.md\n\t\tassets\\Serilog.snk = assets\\Serilog.snk\n\t\tBuild.ps1 = Build.ps1\n\t\tglobal.json = global.json\n\t\tDirectory.Version.props = Directory.Version.props\n\t\tDirectory.Build.props = Directory.Build.props\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Serilog.AspNetCore\", \"src\\Serilog.AspNetCore\\Serilog.AspNetCore.csproj\", \"{0549D23F-986B-4FB2-BACE-16FD7A7BC9EF}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Serilog.AspNetCore.Tests\", \"test\\Serilog.AspNetCore.Tests\\Serilog.AspNetCore.Tests.csproj\", \"{AD51759B-CD58-473F-9620-0B0E56A123A1}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Sample\", \"samples\\Sample\\Sample.csproj\", \"{4FA0FE41-973E-4555-AB4A-0F400DBA9DD3}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \".github\", \".github\", \"{B867CAF4-D737-4230-AD2F-8093223A949A}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"workflows\", \"workflows\", \"{5944D1E2-BC3C-4A95-B4E2-9DDE5B0684AC}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.github\\workflows\\ci.yml = .github\\workflows\\ci.yml\n\tEndProjectSection\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{0549D23F-986B-4FB2-BACE-16FD7A7BC9EF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{0549D23F-986B-4FB2-BACE-16FD7A7BC9EF}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{0549D23F-986B-4FB2-BACE-16FD7A7BC9EF}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{0549D23F-986B-4FB2-BACE-16FD7A7BC9EF}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{AD51759B-CD58-473F-9620-0B0E56A123A1}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{AD51759B-CD58-473F-9620-0B0E56A123A1}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{AD51759B-CD58-473F-9620-0B0E56A123A1}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{AD51759B-CD58-473F-9620-0B0E56A123A1}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{4FA0FE41-973E-4555-AB4A-0F400DBA9DD3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{4FA0FE41-973E-4555-AB4A-0F400DBA9DD3}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{4FA0FE41-973E-4555-AB4A-0F400DBA9DD3}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{4FA0FE41-973E-4555-AB4A-0F400DBA9DD3}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{0549D23F-986B-4FB2-BACE-16FD7A7BC9EF} = {A1893BD1-333D-4DFE-A0F0-DDBB2FE526E0}\n\t\t{AD51759B-CD58-473F-9620-0B0E56A123A1} = {E30F638E-BBBE-4AD1-93CE-48CC69CFEFE1}\n\t\t{4FA0FE41-973E-4555-AB4A-0F400DBA9DD3} = {F2407211-6043-439C-8E06-3641634332E7}\n\t\t{5944D1E2-BC3C-4A95-B4E2-9DDE5B0684AC} = {B867CAF4-D737-4230-AD2F-8093223A949A}\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {811E61C5-3871-4633-AFAE-B35B619C8A10}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "serilog-aspnetcore.sln.DotSettings",
          "type": "blob",
          "size": 0.4873046875,
          "content": "﻿<wpf:ResourceDictionary xml:space=\"preserve\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:s=\"clr-namespace:System;assembly=mscorlib\" xmlns:ss=\"urn:shemas-jetbrains-com:settings-storage-xaml\" xmlns:wpf=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=appsettings/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Serilog/@EntryIndexedValue\">True</s:Boolean></wpf:ResourceDictionary>"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}