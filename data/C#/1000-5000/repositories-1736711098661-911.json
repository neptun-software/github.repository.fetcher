{
  "metadata": {
    "timestamp": 1736711098661,
    "page": 911,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "qmlnet/qmlnet",
      "stars": 1385,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".all-contributorsrc",
          "type": "blob",
          "size": 2.3427734375,
          "content": "{\n  \"projectName\": \"qmlnet\",\n  \"projectOwner\": \"qmlnet\",\n  \"repoType\": \"github\",\n  \"repoHost\": \"https://github.com\",\n  \"files\": [\n    \"README.md\"\n  ],\n  \"badgeTemplate\": \"[![All Contributors](https://img.shields.io/badge/all_contributors-<%= contributors.length %>-orange.svg)](#contributors)\",\n  \"imageSize\": 100,\n  \"commit\": true,\n  \"commitConvention\": \"none\",\n  \"contributors\": [\n    {\n      \"login\": \"devmil\",\n      \"name\": \"Michael Lamers\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/6693130?v=4\",\n      \"profile\": \"http://www.devmil.de\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"TripleWhy\",\n      \"name\": \"TripleWhy\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/2760830?v=4\",\n      \"profile\": \"https://ymueller.de\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"MaxMommersteeg\",\n      \"name\": \"Max\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/9657173?v=4\",\n      \"profile\": \"https://github.com/MaxMommersteeg\",\n      \"contributions\": [\n        \"code\",\n        \"doc\",\n        \"financial\"\n      ]\n    },\n    {\n      \"login\": \"geigertom\",\n      \"name\": \"geigertom\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/19152463?v=4\",\n      \"profile\": \"https://github.com/geigertom\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"jamesdavila\",\n      \"name\": \"James Davila\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/1946041?v=4\",\n      \"profile\": \"https://github.com/jamesdavila\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"afillebrown\",\n      \"name\": \"Andy Fillebrown\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/38264913?v=4\",\n      \"profile\": \"https://github.com/afillebrown\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"vadi2\",\n      \"name\": \"Vadim Peretokin\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/110988?v=4\",\n      \"profile\": \"https://linkedin.com/in/vadimperetokin\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"Juhlinus\",\n      \"name\": \"Linus Juhlin\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/12988164?v=4\",\n      \"profile\": \"https://github.com/Juhlinus\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    }\n  ],\n  \"contributorsPerLine\": 7\n}\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1171875,
          "content": "\noutput/\nsamples/PhotoFrame/\\.vscode/ \nsamples/PhotoFrame/\\.idea/ \nbuild/Qt/\nbuild/qtci/\nsrc/native/.DS_Store\n.DS_Store\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2265625,
          "content": "[submodule \"build/scripts/Buildary\"]\n\tpath = build/scripts/Buildary\n\turl = https://github.com/pauldotknopf/dotnet-buildary.git\n[submodule \"src/native/QmlNet\"]\n\tpath = src/native/QmlNet\n\turl = https://github.com/qmlnet/qmlnet-native\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.8837890625,
          "content": "language: csharp\nmono: none\nmatrix:\n  include:\n    - name: \"Linux Qt 5.15.1\"\n      dotnet: 3.1\n      os: linux\n      dist: xenial\n    - name: \"OSX Qt 5.15.1\"\n      dotnet: 3.1.300\n      os: osx\n      osx_image: xcode9.4\nif: tag IS blank\ngit:\n  depth: false\nbefore_install:\n  # to support running tests for .NET Core 2.1 LTS, install the runtime side-by-side\n  - if [ \"$TRAVIS_OS_NAME\" = \"linux\" ]; then sudo apt-get install dotnet-runtime-2.1 ; fi\n  # Copied from csharp.rb in the travis-build repo\n  - if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then wget --retry-connrefused --waitretry=1 -O /tmp/dotnet.pkg https://download.visualstudio.microsoft.com/download/pr/bc303f50-ec1d-43b4-b846-51d5fc3c1a2d/4f0abfa496fba6a387dc80b450eb65b8/dotnet-runtime-2.1.18-osx-x64.pkg; fi\n  - if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then sudo installer -package \"/tmp/dotnet.pkg\" -target \"/\" -verboseR; fi\n\nscript:\n  - ./build/travis.sh"
        },
        {
          "name": "GitVersion.yml",
          "type": "blob",
          "size": 0.0888671875,
          "content": "tag-prefix: 'v'\nmode: ContinuousDeployment\nbranches:\n  master:\n    mode: ContinuousDelivery"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0419921875,
          "content": "MIT License\n\nCopyright (c) 2017 Paul Knopf\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.0009765625,
          "content": "<p><a href=\"https://github.com/qmlnet/qmlnet\" rel=\"nofollow\"><img src=\"https://qmlnet.github.io/qmlnet.png\" width=\"150\"></a></p>\n\n\n[![Qml.Net](https://img.shields.io/nuget/v/Qml.Net.svg?style=flat&label=Qml.Net)](http://www.nuget.org/packages/Qml.Net/) [![Build status](https://travis-ci.com/qmlnet/qmlnet.svg?branch=develop)](https://travis-ci.com/qmlnet/qmlnet) [![Build status](https://ci.appveyor.com/api/projects/status/l0hh7ranqawj682y/branch/develop?svg=true)](https://ci.appveyor.com/project/pauldotknopf/qmlnet/) [![Gitter](https://img.shields.io/gitter/room/qmlnet/Lobby.svg?style=flat)](https://gitter.im/qmlnet/Lobby) [![All Contributors](https://img.shields.io/badge/all_contributors-8-orange.svg)](#contributors) [![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://paypal.me/pauldotknopf)\n\n<hr />\n\nA Qt/Qml integration with .NET\n\nSupported platforms/runtimes:\n* Runtimes:\n  * .NET Framework\n  * .NET Core\n  * Mono\n* Operating systems\n  * Linux\n  * OSX\n  * Windows\n\n# First look\n\n<img src=\"https://github.com/pauldotknopf/Qml.Net.Examples/blob/master/assets/features.gif\" alt=\"\" style=\"max-width:100%;\" width=\"200\">\n\n# Elevator pitch\n\n* Proven in production.\n* Established GUI/control framework, used in many industries, from desktop to embedded.\n* Excellent community with many open-sourced controls available.\n* Native rendering, done in native code. No expensive PInvoke calls for rendering/animations/etc. The only interop between .NET and Qt is the data models used to drive the GUI.\n\n# Documentation\n\nWIP: https://qmlnet.github.io/\n\n# Getting started\n\n```bash\ndotnet add package Qml.Net\ndotnet add package Qml.Net.WindowsBinaries\ndotnet add package Qml.Net.OSXBinaries\ndotnet add package Qml.Net.LinuxBinaries\n```  \n\n**Note for Linux users**: Package `libc6-dev` is required to be installed because it contains `libdl.so` that is needed.\n\n# Examples\nCheckout the [examples](https://github.com/qmlnet/qmlnet-examples) on how to do many things with Qml.Net.\n\n# Quick overview\n\n**Define a .NET type (POCO)**\n\n```c#\n//QmlType.cs\nusing Qml.Net;\nusing System.Threading.Tasks;\n\nnamespace QmlQuickOverview\n{\n    [Signal(\"customSignal\", NetVariantType.String)] // You can define signals that Qml can listen to.\n    public class QmlType\n    {\n        /// <summary>\n        /// Properties are exposed to Qml.\n        /// </summary>\n        [NotifySignal(\"stringPropertyChanged\")] // For Qml binding/MVVM.\n        public string StringProperty { get; set; }\n\n        /// <summary>\n        /// Methods can return .NET types.\n        /// The returned type can be invoked from Qml (properties/methods/events/etc).\n        /// </summary>\n        /// <returns></returns>\n        public QmlType CreateNetObject()\n        {\n            return new QmlType();\n        }\n\n        /// <summary>\n        /// Qml can pass .NET types to .NET methods.\n        /// </summary>\n        /// <param name=\"parameter\"></param>\n        public void TestMethod(QmlType parameter)\n        {\n        }\n        \n        /// <summary>\n        /// Async methods can be invoked with continuations happening on Qt's main thread.\n        /// </summary>\n        public async Task<string> TestAsync()\n        {\n            // On the UI thread\n            await Task.Run(() =>\n            {\n                // On the background thread\n            });\n            // On the UI thread\n            return \"async result!\";\n        }\n        \n        /// <summary>\n        /// Qml can also pass Qml/C++ objects that can be invoked from .NET\n        /// </summary>\n        /// <param name=\"qObject\"></param>\n        public void TestMethodWithQObject(dynamic o)\n        {\n            string result = o.propertyDefinedInCpp;\n            o.methodDefinedInCpp(result);\n            \n            // You can also listen to signals on QObjects.\n            var qObject = o as INetQObject;\n            var handler = qObject.AttachSignal(\"signalName\", parameters => {\n                // parameters is a list of arguements passed to the signal.\n            });\n            handler.Dispose(); // When you are done listening to signal.\n            \n            // You can also listen to when a property changes (notify signal).\n            handler = qObject.AttachNotifySignal(\"property\", parameters => {\n                // parameters is a list of arguements passed to the signal.\n            });\n            handler.Dispose(); // When you are done listening to signal.\n        }\n        \n        /// <summary>\n        /// .NET can activate signals to send notifications to Qml.\n        /// </summary>\n        public void ActivateCustomSignal(string message)\n        {\n            this.ActivateSignal(\"customSignal\", message);\n        }\n    }\n}\n\n```\n\n**Register your new type with Qml.**\n\n```c#\n//QmlExample.cs\nusing Qml.Net;\nusing Qml.Net.Runtimes;\n\nnamespace QmlQuickOverview\n{\n    class QmlExample\n    {\n        static int Main(string[] args)\n        {\n            RuntimeManager.DiscoverOrDownloadSuitableQtRuntime();\n\n            using (var app = new QGuiApplication(args))\n            {\n                using (var engine = new QQmlApplicationEngine())\n                {\n                    // Register our new type to be used in Qml\n                    Qml.Net.Qml.RegisterType<QmlType>(\"test\", 1, 1);\n                    engine.Load(\"Main.qml\");\n                    return app.Exec();\n                }\n            }\n        }\n    }\n}\n\n```\n\n**Use the .NET type in Qml**\n\n```js\n//Main.qml\nimport QtQuick 2.7\nimport QtQuick.Controls 2.0\nimport QtQuick.Layouts 1.0\nimport test 1.1\n\nApplicationWindow {\n    visible: true\n    width: 640\n    height: 480\n    title: qsTr(\"Hello World\")\n\n    QmlType {\n      id: test\n      Component.onCompleted: function() {\n          // We can read/set properties\n          console.log(test.stringProperty)\n          test.stringPropertyChanged.connect(function() {\n              console.log(\"The property was changed!\")\n          })\n          test.stringProperty = \"New value!\"\n          \n          // We can return .NET types (even ones not registered with Qml)\n          var netObject = test.createNetObject();\n          \n          // All properties/methods/signals can be invoked on \"netObject\"\n          // We can also pass the .NET object back to .NET\n          netObject.testMethod(netObject)\n          \n          // We can invoke async tasks that have continuation on the UI thread\n          var task = netObject.testAsync()\n          // And we can await the task\n          Net.await(task, function(result) {\n              // With the result!\n              console.log(result)\n          })\n          \n          // We can trigger signals from .NET\n          test.customSignal.connect(function(message) {\n              console.log(\"message: \" + message)\n          })\n          test.activateCustomSignal(\"test message!\")\n      }\n      function testHandler(message) {\n          console.log(\"Message - \" + message)\n      }\n    }\n}\n```\n\n# Currently implemented\n\n- [x] Support for all the basic Qml types and the back-and-forth between them (```DateTime```, ```string```, etc).\n- [x] Reading/setting properties on .NET objects.\n- [x] Invoking methods on .NET obejcts.\n- [x] Declaring and activating signals on .NET objects.\n- [x] ```async``` and ```await``` with support for awaiting and getting the result from Qml.\n- [x] Passing dynamic javascript objects to .NET as ```dynamic```.\n- [x] Custom V8 type that looks like an array, but wraps a .NET ```IList<T>``` instance, for modification of list in Qml, and performance.\n- [x] Dynamically compiled delegates for increased performance.\n- [x] Passing ```QObject``` types to .NET with support for interacting with signals/slots/properties on them.\n\nThere aren't really any important features missing that are needed for prime-time. This product is currently used on embedded devices in the medical industry.\n\n# Running Unit Tests\n\nThe unit tests can be found in [src/native/Qml.Net.Tests](src/net/Qml.Net.Tests).\n\nThey can be run directly from Visual Studio, or by using the `dotnet test` command line tool. \n\nSince the tests rely on the native QmlNet library, you have to ensure the library is in the `PATH` (on Windows) or otherwise discoverable. If you are trying to run tests against the native library built from the same repository, you can put the `src/native/output` folder into your `PATH` or `LD_LIBRARY_PATH` after running the `build.bat` or `build.sh` script.\n\n## Contributors ✨\n\nThanks goes to these wonderful people!\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"http://www.devmil.de\"><img src=\"https://avatars1.githubusercontent.com/u/6693130?v=4\" width=\"100px;\" alt=\"Michael Lamers\"/><br /><sub><b>Michael Lamers</b></sub></a><br /><a href=\"https://github.com/qmlnet/qmlnet/commits?author=devmil\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://ymueller.de\"><img src=\"https://avatars0.githubusercontent.com/u/2760830?v=4\" width=\"100px;\" alt=\"TripleWhy\"/><br /><sub><b>TripleWhy</b></sub></a><br /><a href=\"https://github.com/qmlnet/qmlnet/commits?author=TripleWhy\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/MaxMommersteeg\"><img src=\"https://avatars3.githubusercontent.com/u/9657173?v=4\" width=\"100px;\" alt=\"Max\"/><br /><sub><b>Max</b></sub></a><br /><a href=\"https://github.com/qmlnet/qmlnet/commits?author=MaxMommersteeg\" title=\"Code\">💻</a> <a href=\"https://github.com/qmlnet/qmlnet/commits?author=MaxMommersteeg\" title=\"Documentation\">📖</a> <a href=\"#financial-MaxMommersteeg\" title=\"Financial\">💵</a></td>\n    <td align=\"center\"><a href=\"https://github.com/geigertom\"><img src=\"https://avatars0.githubusercontent.com/u/19152463?v=4\" width=\"100px;\" alt=\"geigertom\"/><br /><sub><b>geigertom</b></sub></a><br /><a href=\"https://github.com/qmlnet/qmlnet/commits?author=geigertom\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jamesdavila\"><img src=\"https://avatars0.githubusercontent.com/u/1946041?v=4\" width=\"100px;\" alt=\"James Davila\"/><br /><sub><b>James Davila</b></sub></a><br /><a href=\"https://github.com/qmlnet/qmlnet/commits?author=jamesdavila\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/afillebrown\"><img src=\"https://avatars2.githubusercontent.com/u/38264913?v=4\" width=\"100px;\" alt=\"Andy Fillebrown\"/><br /><sub><b>Andy Fillebrown</b></sub></a><br /><a href=\"https://github.com/qmlnet/qmlnet/commits?author=afillebrown\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://linkedin.com/in/vadimperetokin\"><img src=\"https://avatars1.githubusercontent.com/u/110988?v=4\" width=\"100px;\" alt=\"Vadim Peretokin\"/><br /><sub><b>Vadim Peretokin</b></sub></a><br /><a href=\"https://github.com/qmlnet/qmlnet/commits?author=vadi2\" title=\"Documentation\">📖</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/Juhlinus\"><img src=\"https://avatars0.githubusercontent.com/u/12988164?v=4\" width=\"100px;\" alt=\"Linus Juhlin\"/><br /><sub><b>Linus Juhlin</b></sub></a><br /><a href=\"https://github.com/qmlnet/qmlnet/commits?author=Juhlinus\" title=\"Documentation\">📖</a></td>\n  </tr>\n</table>\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.603515625,
          "content": "image: Visual Studio 2019\nbefore_build:\n  - ps: Invoke-WebRequest -Uri https://github.com/qmlnet/qt-runtimes/releases/download/releases/qt-5.15.1-7fc8b10-win-x64-dev.tar.gz -OutFile C:\\qmlnet-qt.tar.gz\n  - cmd: 7z x C:\\qmlnet-qt.tar.gz -oC:\\\n  - cmd: 7z x C:\\qmlnet-qt.tar -oC:\\qmlnet-qt\n  - cmd: rm -r C:\\Tools\\GitVersion\\\n  - cmd: dotnet tool install -g GitVersion.Tool --version 5.3.4\n  - cmd: dotnet gitversion > version.json\n  - cmd: git submodule update --init\nbuild_script:\n  - cmd: build/appveyor.bat\nafter_build:\n  - ps: Get-ChildItem output\\*.nupkg | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }"
        },
        {
          "name": "build.bat",
          "type": "blob",
          "size": 0.046875,
          "content": "dotnet run -p ./build/scripts/Build.csproj -- %*"
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 0.0732421875,
          "content": "$args = $args -join ' '\ndotnet run -p ./build/scripts/Build.csproj -- $args"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.142578125,
          "content": "#!/usr/bin/env bash\n\nSCRIPT_DIR=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\ncd $SCRIPT_DIR\n\ndotnet run -p ./build/scripts/Build.csproj -- $*"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tmp",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}