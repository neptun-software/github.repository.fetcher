{
  "metadata": {
    "timestamp": 1736711101256,
    "page": 917,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "LitJSON/litjson",
      "stars": 1379,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0107421875,
          "content": "*.cs eol=lf"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1328125,
          "content": "/bin\n/src/LitJson/AssemblyInfo.cs\n/website\n[Oo]bj/\n[Bb]in/\n.vscode/\n[Tt]ools/*\n![Tt]ools/packages.config\n[Aa]rtifacts/\n.[Dd]otnet/\n.vs/*"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.4755859375,
          "content": "This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n\nThank you for reading this notice. Following the tradition of other public\ndomain projects, here's a blessing:\n\n  May you find forgiveness for yourself and forgive others.\n  May you experience and share the gift of unconditional love.\n  May you see light, wherever the illusion of darkness appears.\n"
        },
        {
          "name": "GitVersion.yml",
          "type": "blob",
          "size": 0.4609375,
          "content": "branches:\n  main:\n    mode: ContinuousDelivery\n    tag:\n    increment: Patch\n    prevent-increment-of-merged-branch-version: true\n    track-merge-target: false\n  master:\n    mode: ContinuousDelivery\n    tag:\n    increment: Patch\n    prevent-increment-of-merged-branch-version: true\n    track-merge-target: false\n  develop:\n    mode: ContinuousDeployment\n    tag: alpha\n    increment: Minor\n    prevent-increment-of-merged-branch-version: false\n    track-merge-target: true"
        },
        {
          "name": "LitJSON.sln",
          "type": "blob",
          "size": 3.82421875,
          "content": "ï»¿\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio 15\r\nVisualStudioVersion = 15.0.26124.0\r\nMinimumVisualStudioVersion = 15.0.26124.0\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"LitJSON\", \"src\\LitJson\\LitJSON.csproj\", \"{CFBC33D5-BB2D-4F22-B157-0862C4A77039}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"LitJSON.Tests\", \"test\\LitJSON.Tests.csproj\", \"{E031C1B4-CD87-475E-9283-4571435C65DB}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"LitJson.Source\", \"src\\LitJson.Source\\LitJSON.Source.csproj\", \"{F982E34E-F80C-4C9F-AF9B-0E5A34D69A35}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tDebug|x64 = Debug|x64\r\n\t\tDebug|x86 = Debug|x86\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\t\tRelease|x64 = Release|x64\r\n\t\tRelease|x86 = Release|x86\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{CFBC33D5-BB2D-4F22-B157-0862C4A77039}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{CFBC33D5-BB2D-4F22-B157-0862C4A77039}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{CFBC33D5-BB2D-4F22-B157-0862C4A77039}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{CFBC33D5-BB2D-4F22-B157-0862C4A77039}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{CFBC33D5-BB2D-4F22-B157-0862C4A77039}.Debug|x86.ActiveCfg = Debug|x86\r\n\t\t{CFBC33D5-BB2D-4F22-B157-0862C4A77039}.Debug|x86.Build.0 = Debug|x86\r\n\t\t{CFBC33D5-BB2D-4F22-B157-0862C4A77039}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{CFBC33D5-BB2D-4F22-B157-0862C4A77039}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{CFBC33D5-BB2D-4F22-B157-0862C4A77039}.Release|x64.ActiveCfg = Release|x64\r\n\t\t{CFBC33D5-BB2D-4F22-B157-0862C4A77039}.Release|x64.Build.0 = Release|x64\r\n\t\t{CFBC33D5-BB2D-4F22-B157-0862C4A77039}.Release|x86.ActiveCfg = Release|x86\r\n\t\t{CFBC33D5-BB2D-4F22-B157-0862C4A77039}.Release|x86.Build.0 = Release|x86\r\n\t\t{E031C1B4-CD87-475E-9283-4571435C65DB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{E031C1B4-CD87-475E-9283-4571435C65DB}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{E031C1B4-CD87-475E-9283-4571435C65DB}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{E031C1B4-CD87-475E-9283-4571435C65DB}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{E031C1B4-CD87-475E-9283-4571435C65DB}.Debug|x86.ActiveCfg = Debug|x86\r\n\t\t{E031C1B4-CD87-475E-9283-4571435C65DB}.Debug|x86.Build.0 = Debug|x86\r\n\t\t{E031C1B4-CD87-475E-9283-4571435C65DB}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{E031C1B4-CD87-475E-9283-4571435C65DB}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{E031C1B4-CD87-475E-9283-4571435C65DB}.Release|x64.ActiveCfg = Release|x64\r\n\t\t{E031C1B4-CD87-475E-9283-4571435C65DB}.Release|x64.Build.0 = Release|x64\r\n\t\t{E031C1B4-CD87-475E-9283-4571435C65DB}.Release|x86.ActiveCfg = Release|x86\r\n\t\t{E031C1B4-CD87-475E-9283-4571435C65DB}.Release|x86.Build.0 = Release|x86\r\n\t\t{F982E34E-F80C-4C9F-AF9B-0E5A34D69A35}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{F982E34E-F80C-4C9F-AF9B-0E5A34D69A35}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{F982E34E-F80C-4C9F-AF9B-0E5A34D69A35}.Debug|x64.ActiveCfg = Debug|Any CPU\r\n\t\t{F982E34E-F80C-4C9F-AF9B-0E5A34D69A35}.Debug|x64.Build.0 = Debug|Any CPU\r\n\t\t{F982E34E-F80C-4C9F-AF9B-0E5A34D69A35}.Debug|x86.ActiveCfg = Debug|Any CPU\r\n\t\t{F982E34E-F80C-4C9F-AF9B-0E5A34D69A35}.Debug|x86.Build.0 = Debug|Any CPU\r\n\t\t{F982E34E-F80C-4C9F-AF9B-0E5A34D69A35}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{F982E34E-F80C-4C9F-AF9B-0E5A34D69A35}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{F982E34E-F80C-4C9F-AF9B-0E5A34D69A35}.Release|x64.ActiveCfg = Release|Any CPU\r\n\t\t{F982E34E-F80C-4C9F-AF9B-0E5A34D69A35}.Release|x64.Build.0 = Release|Any CPU\r\n\t\t{F982E34E-F80C-4C9F-AF9B-0E5A34D69A35}.Release|x86.ActiveCfg = Release|Any CPU\r\n\t\t{F982E34E-F80C-4C9F-AF9B-0E5A34D69A35}.Release|x86.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\nEndGlobal\r\n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 0.04296875,
          "content": "News has moved to https://litjson.net/blog/\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.3544921875,
          "content": "LitJSON\n=======\n\n[![NuGet](https://img.shields.io/nuget/v/LitJson.svg)](https://www.nuget.org/packages/LitJson) [![MyGet](https://img.shields.io/myget/litjson/vpre/LitJson.svg?label=myget)](https://www.myget.org/gallery/litjson)\n\nA *.Net* library to handle conversions from and to JSON (JavaScript Object\nNotation) strings.\n\n> _It's quick and lean, without external dependencies.\n> Just a few classes so easily embeddable in your own code or a very small assembly to ship with your code.\n> The code is highly portable, which in general makes it easy to adapt for new platforms._\n\n\n## Continuous integration\n\n| Build server                | Platform      | Build status                                                                                                                                                   |\n|-----------------------------|---------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| AppVeyor                    | Windows       | [![AppVeyor branch](https://img.shields.io/appveyor/ci/litjson/litjson/develop.svg)](https://ci.appveyor.com/project/litjson/litjson/branch/develop)           |\n| Bitrise                     | MacOS         | [![Build Status](https://app.bitrise.io/app/5975a00ca2666fb1/status.svg?token=OZnv4YWRw71IVax38Wi50Q&branch=develop)](https://app.bitrise.io/app/5975a00ca2666fb1) |\n| Bitrise                     | Linux         | [![Build Status](https://app.bitrise.io/app/4c9ee62c6ba13630/status.svg?token=RBH8UKw-68lQYjageT8VoQ&branch=develop)](https://app.bitrise.io/app/4c9ee62c6ba13630)|\n| Azure Pipelines             | Linux / MacOS / Windows | [![Azure Pipelines Build Status](https://dev.azure.com/LitJSON/litjson/_apis/build/status/LitJSON.litjson?branchName=develop)](https://dev.azure.com/LitJSON/litjson/_build/latest?definitionId=3&branchName=develop) |\n| GitHub Actions              | Linux / MacOS / Windows  |[![Build](https://github.com/LitJSON/litjson/actions/workflows/build.yml/badge.svg?branch=develop)](https://github.com/LitJSON/litjson/actions/workflows/build.yml) |\n\n## Compiling\n\nCode can be compiled using .NET CLI or by launching the bootstrappers in the root of the repository.\n\n#### Windows\n\n```powershell\n./build.ps1\n```\n\n#### Linux / OS X\n\n```console\n./build.sh\n```\n\n#### Prerequisites\n\nThe bootstrappers will (locally in repo)\n\n  * Fetch and install .NET Core CLI / SDK version needed to compile LitJSON.\n  * Fetch and install Cake runner\n  * Execute build script with supplied target (`--target=[Target]`) or by default\n    1. Clean previous artifacts\n    1. Restore build dependencies from NuGet\n    1. Build\n    1. Run unit tests\n    1. Create NuGet package\n\n#### Testing\n\nThis library comes with a set of unit tests using the [NUnit][nunit]\nframework.\n\n## Using LitJSON from an application\n\n#### Package manager\n\n```PowerShell\nInstall-Package LitJson -Version 0.19.0\n```\n\n#### .NET CLI\n\n```PowerShell\ndotnet add package LitJson --version 0.19.0\n```\n\n#### Paket CLI\n\n```PowerShell\npaket add LitJson --version 0.19.0\n```\n\nAlternatively, just copy the whole tree of files under `src/LitJSON` to your\nown project's source tree and integrate it with your development environment.\n\n#### Requirements\n\nLitJSON currently targets and supports\n\n* .NET 8\n* .NET 6\n* .NET Standard 2.1\n* .NET Standard 2.0\n* .NET Standard 1.5\n* .NET Framework 4.8\n* .NET Framework 4.5\n* .NET Framework 4.0\n* .NET Framework 3.5 (including SQLCLR, for which [WCOMAB/SqlServerSlackAPI](https://github.com/WCOMAB/SqlServerSlackAPI) is an example of)\n* .NET Framework 2.0\n* Mono 4.4.2 and above\n\n#### Prereleases\n\nEach merge to develop is published to our NuGet feed on [MyGet](mygetgallery) and also [GitHub Packages](ghpackages).\n\n## Contributing\n\nSo youâre thinking about contributing to LitJSON? Great! Itâs **really** appreciated.\n\n* Create an issue\n* Fork the repository.\n* Create a feature branch from `develop` to work in.\n* Make your feature addition or bug fix.\n* Don't forget the unit tests.\n* Send a pull request.\n\n## License\n\n[Unlicense][unlicense] (public domain).\n\n[mygetgallery]: [https://www.myget.org/gallery/litjson]\n[litjson]: [unlicense](http://unlicense.org/\n[nunit]: http://www.nunit.org/\n[pkg-config]: http://www.freedesktop.org/wiki/Software/pkg-config\n[unlicense]: http://unlicense.org/\n[ghpackages]: https://github.com/orgs/LitJSON/packages?repo_name=litjson\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.216796875,
          "content": "# Operating system (build VM template)\nos: Visual Studio 2017\n\n# Build script\nbuild_script:\n  - ps: .\\build.ps1  --target=\"AppVeyor\" --verbosity=Verbose\n\n# Tests\ntest: off\n\ninit:\n  - git config --global core.autocrlf input"
        },
        {
          "name": "azure-pipelines.yaml",
          "type": "blob",
          "size": 0.705078125,
          "content": "strategy:\n  matrix:\n    linux:\n      imageName: 'ubuntu-latest'\n    mac:\n      imageName: 'macos-latest'\n    windows:\n      imageName: 'windows-latest'\n\npool:\n  vmImage: $(imageName)\n\nsteps:\n- task: UseDotNet@2\n  displayName: 'Use .NET SDK 6.0.x'\n  inputs:\n    packageType: sdk\n    version: '6.0.x'\n\n- task: UseDotNet@2\n  displayName: 'Use .NET Core sdk'\n  inputs:\n    useGlobalJson: true\n\n- task: Bash@3\n  displayName: 'Bash Script'\n  condition: ne( variables['Agent.OS'], 'Windows_NT' )\n  inputs:\n    targetType: filePath\n    filePath: ./build.sh\n\n- task: PowerShell@2\n  displayName: 'PowerShell Script'\n  condition: eq( variables['Agent.OS'], 'Windows_NT' )\n  inputs:\n    targetType: filePath\n    filePath: ./build.ps1\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.cake",
          "type": "blob",
          "size": 8.279296875,
          "content": "// Install tools\n#tool nuget:?package=NUnit.ConsoleRunner&version=3.16.3\n\n// Install .NET Core Global tools.\n#tool dotnet:?package=GitVersion.Tool&version=5.12.0\n\n///////////////////////////////////////////////////////////////////////////////\n// ARGUMENTS\n///////////////////////////////////////////////////////////////////////////////\n\nvar target = Argument(\"target\", \"Default\");\nvar configuration = Argument(\"configuration\", \"Release\");\n\n//////////////////////////////////////////////////////////////////////\n// PARAMETERS\n//////////////////////////////////////////////////////////////////////\n\nDotNetMSBuildSettings msBuildSettings = null;\nstring  version = null,\n        semVersion = null,\n        milestone = null;\n\nFilePath    litjsonProjectPath = \"./src/LitJson/LitJSON.csproj\",\n            litjsonSourceProjectPath = \"./src/LitJson.Source/LitJSON.Source.csproj\";\n\n///////////////////////////////////////////////////////////////////////////////\n// SETUP / TEARDOWN\n///////////////////////////////////////////////////////////////////////////////\n\nSetup(ctx =>\n{\n    Information(\"Calculating Semantic Version\");\n    if (!BuildSystem.IsLocalBuild)\n    {\n        GitVersion(new GitVersionSettings{\n            OutputType = GitVersionOutput.BuildServer\n        });\n    }\n\n    CopyFile(\"./src/LitJson/AssemblyInfo.cs.in\", \"./src/LitJson/AssemblyInfo.cs\");\n\n    GitVersion assertedVersions = GitVersion(new GitVersionSettings\n    {\n        UpdateAssemblyInfoFilePath = \"./src/LitJson/AssemblyInfo.cs\",\n        UpdateAssemblyInfo = true,\n        OutputType = GitVersionOutput.Json,\n    });\n\n    version = assertedVersions.MajorMinorPatch;\n    semVersion = assertedVersions.LegacySemVerPadded;\n    milestone = string.Concat(\"v\", version);\n\n    Information(\"Calculated Semantic Version: {0}\", semVersion);\n\n    msBuildSettings = new DotNetMSBuildSettings()\n                            .WithProperty(\"Version\", semVersion)\n                            .WithProperty(\"AssemblyVersion\", version)\n                            .WithProperty(\"FileVersion\", version)\n                            .WithProperty(\"ContinuousIntegrationBuild\", BuildSystem.IsLocalBuild ? bool.FalseString : bool.TrueString);\n\n    // Executed BEFORE the first task.\n    Information(\"Running tasks...\");\n});\n\nTeardown(ctx =>\n{\n    // Executed AFTER the last task.\n    Information(\"Finished running tasks.\");\n});\n\n///////////////////////////////////////////////////////////////////////////////\n// TASKS\n///////////////////////////////////////////////////////////////////////////////\n\nTask(\"Clean\")\n    .Does(() => {\n    CleanDirectories(\n        new[] {\n            \"./src/bin\",\n            \"./test/bin\",\n            \"./src/obj\",\n            \"./test/obj\",\n            \"./artifacts/nuget\"\n        }\n    );\n});\n\nTask(\"Restore\")\n    .IsDependentOn(\"Clean\")\n    .Does(() => {\n    DotNetRestore(\"./LitJSON.sln\",\n        new DotNetRestoreSettings { MSBuildSettings = msBuildSettings }\n    );\n});\n\nTask(\"Build\")\n    .IsDependentOn(\"Restore\")\n    .Does(() => {\n    DotNetBuild(\"./LitJSON.sln\",\n        new DotNetBuildSettings {\n            Configuration = configuration,\n            MSBuildSettings = msBuildSettings,\n            ArgumentCustomization = args => args.Append(\"--no-restore\")\n        }\n    );\n});\n\nTask(\"Test\")\n    .IsDependentOn(\"Build\")\n    .Does(() => {\n    DotNetTest(\"./test/LitJSON.Tests.csproj\",\n        new DotNetTestSettings {\n            Configuration = configuration,\n            Framework = \"net6.0\",\n            NoBuild = true,\n            ArgumentCustomization = args => args.Append(\"--no-restore\")\n        }\n    );\n\n    NUnit3(\"./test/**/bin/\" + configuration + \"/net45/*.Tests.dll\", new NUnit3Settings {\n        NoResults = true\n    });\n});\n\nTask(\"Test-SourceLink\")\n    .IsDependentOn(\"Build\")\n    .WithCriteria(IsRunningOnWindows() && AppVeyor.IsRunningOnAppVeyor)\n    .Does(() => {\n    foreach(var asssembly in GetFiles(\"./src/LitJson/bin/\" + configuration + \"/**/*.dll\"))\n    {\n        DotNetTool(litjsonProjectPath.FullPath, \"sourcelink\", $\"test {asssembly}\");\n    }\n});\n\nTask(\"Package\")\n    .IsDependentOn(\"Test\")\n    .IsDependentOn(\"Test-SourceLink\")\n    .Does(() => {\n    DotNetPack(litjsonProjectPath.FullPath,\n        new DotNetPackSettings {\n            Configuration = configuration,\n            NoRestore = true,\n            NoBuild = true,\n            IncludeSymbols = true,\n            OutputDirectory = \"./artifacts/nuget\",\n            MSBuildSettings = msBuildSettings\n        }\n    );\n    DotNetPack(litjsonSourceProjectPath.FullPath,\n        new DotNetPackSettings {\n            Configuration = configuration,\n            NoBuild = true,\n            NoRestore = true,\n            OutputDirectory = \"./artifacts/nuget\",\n            MSBuildSettings = msBuildSettings\n        }\n    );\n});\n\nTask(\"Upload-AppVeyor-Artifacts\")\n    .IsDependentOn(\"Package\")\n    .WithCriteria(AppVeyor.IsRunningOnAppVeyor)\n    .Does(() => {\n    foreach(var artifact in GetFiles(\"./artifacts/**/*.*\"))\n    {\n        AppVeyor.UploadArtifact(artifact);\n    }\n});\n\nTask(\"Publish-MyGet\")\n    .IsDependentOn(\"Package\")\n    .WithCriteria(\n        (\n            AppVeyor.IsRunningOnAppVeyor &&\n            !AppVeyor.Environment.PullRequest.IsPullRequest &&\n            (\n                !AppVeyor.Environment.Repository.Branch.Equals(\"master\", StringComparison.OrdinalIgnoreCase) ||\n                AppVeyor.Environment.Repository.Tag.IsTag\n            )\n        )\n        || StringComparer.OrdinalIgnoreCase.Equals(target, \"Publish-MyGet\"))\n    .Does(() => {\n\n      // Resolve the API key.\n    var apiKey = EnvironmentVariable(\"MYGET_API_KEY\");\n    if(string.IsNullOrEmpty(apiKey)) {\n        throw new InvalidOperationException(\"Could not resolve MyGet API key.\");\n    }\n\n    // Resolve the API url.\n    var apiUrl = EnvironmentVariable(\"MYGET_API_URL\");\n    if(string.IsNullOrEmpty(apiUrl)) {\n        throw new InvalidOperationException(\"Could not resolve MyGet API url.\");\n    }\n\n    foreach(var package in (GetFiles(\"./artifacts/nuget/*.nupkg\") - GetFiles(\"./artifacts/nuget/*.symbols.nupkg\")))\n    {\n        DotNetNuGetPush(package.FullPath,\n        new DotNetNuGetPushSettings {\n            ApiKey = apiKey,\n            Source = apiUrl\n        }\n    );\n    }\n});\n\nTask(\"Publish-NuGet\")\n    .IsDependentOn(\"Package\")\n    .WithCriteria((AppVeyor.IsRunningOnAppVeyor && AppVeyor.Environment.Repository.Tag.IsTag && !AppVeyor.Environment.PullRequest.IsPullRequest)\n        || StringComparer.OrdinalIgnoreCase.Equals(target, \"Publish-NuGet\"))\n    .Does(() => {\n\n      // Resolve the API key.\n    var apiKey = EnvironmentVariable(\"NUGET_API_KEY\");\n    if(string.IsNullOrEmpty(apiKey)) {\n        throw new InvalidOperationException(\"Could not resolve NuGet API key.\");\n    }\n\n    // Resolve the API url.\n    var apiUrl = EnvironmentVariable(\"NUGET_API_URL\");\n    if(string.IsNullOrEmpty(apiUrl)) {\n        throw new InvalidOperationException(\"Could not resolve NuGet API url.\");\n    }\n\n    foreach(var package in (GetFiles(\"./artifacts/nuget/*.nupkg\") - GetFiles(\"./artifacts/nuget/*.symbols.nupkg\")))\n    {\n        DotNetNuGetPush(package.FullPath,\n        new DotNetNuGetPushSettings {\n            ApiKey = apiKey,\n            Source = apiUrl\n        }\n    );\n    }\n});\n\nTask(\"Push-GitHub-Packages\")\n  .IsDependentOn(\"Package\")\n    .WithCriteria(\n        GitHubActions.IsRunningOnGitHubActions &&\n        !GitHubActions.Environment.PullRequest.IsPullRequest &&\n        IsRunningOnWindows())\n    .Does(() => {\n\n      // Resolve the API key.\n    var apiKey = EnvironmentVariable(\"GH_PACKAGES_NUGET_APIKEY\");\n    if(string.IsNullOrEmpty(apiKey)) {\n        throw new InvalidOperationException(\"Could not resolve GitHub API key.\");\n    }\n\n    // Resolve the API url.\n    var apiUrl = EnvironmentVariable(\"GH_PACKAGES_NUGET_SOURCE\");\n    if(string.IsNullOrEmpty(apiUrl)) {\n        throw new InvalidOperationException(\"Could not resolve GitHub API url.\");\n    }\n\n    foreach(var package in (GetFiles(\"./artifacts/nuget/*.nupkg\") - GetFiles(\"./artifacts/nuget/*.symbols.nupkg\")))\n    {\n        DotNetNuGetPush(package.FullPath,\n        new DotNetNuGetPushSettings {\n            ApiKey = apiKey,\n            Source = apiUrl\n        }\n    );\n    }\n});\n\nTask(\"AppVeyor\")\n  .IsDependentOn(\"Upload-AppVeyor-Artifacts\")\n  .IsDependentOn(\"Publish-MyGet\")\n  .IsDependentOn(\"Publish-NuGet\");\n\nTask(\"GitHub-Actions\")\n  .IsDependentOn(\"Push-GitHub-Packages\");\n\nTask(\"Default\")\n  .IsDependentOn(\"Package\");\n\nRunTarget(target);"
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 3.78125,
          "content": "#!/usr/bin/env pwsh\n$DotNetInstallerUri = 'https://dot.net/v1/dotnet-install.ps1';\n$DotNetUnixInstallerUri = 'https://dot.net/v1/dotnet-install.sh'\n$PSScriptRoot = Split-Path $MyInvocation.MyCommand.Path -Parent\n\n# Make sure tools folder exists\n$ToolPath = Join-Path $PSScriptRoot \"tools\"\nif (!(Test-Path $ToolPath)) {\n    Write-Verbose \"Creating tools directory...\"\n    New-Item -Path $ToolPath -Type Directory -Force | out-null\n}\n\n\nif ($PSVersionTable.PSEdition -ne 'Core') {\n    # Attempt to set highest encryption available for SecurityProtocol.\n    # PowerShell will not set this by default (until maybe .NET 4.6.x). This\n    # will typically produce a message for PowerShell v2 (just an info\n    # message though)\n    try {\n        # Set TLS 1.2 (3072), then TLS 1.1 (768), then TLS 1.0 (192), finally SSL 3.0 (48)\n        # Use integers because the enumeration values for TLS 1.2 and TLS 1.1 won't\n        # exist in .NET 4.0, even though they are addressable if .NET 4.5+ is\n        # installed (.NET 4.5 is an in-place upgrade).\n        [System.Net.ServicePointManager]::SecurityProtocol = 3072 -bor 768 -bor 192 -bor 48\n      } catch {\n        Write-Output 'Unable to set PowerShell to use TLS 1.2 and TLS 1.1 due to old .NET Framework installed. If you see underlying connection closed or trust errors, you may need to upgrade to .NET Framework 4.5+ and PowerShell v3'\n      }\n}\n\n###########################################################################\n# INSTALL .NET CORE CLI\n###########################################################################\n\n$env:DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1\n$env:DOTNET_CLI_TELEMETRY_OPTOUT=1\n$env:DOTNET_ROLL_FORWARD_ON_NO_CANDIDATE_FX=2\n\n\nFunction Remove-PathVariable([string]$VariableToRemove)\n{\n    $SplitChar = ';'\n    if ($IsMacOS -or $IsLinux) {\n        $SplitChar = ':'\n    }\n\n    $path = [Environment]::GetEnvironmentVariable(\"PATH\", \"User\")\n    if ($path -ne $null)\n    {\n        $newItems = $path.Split($SplitChar, [StringSplitOptions]::RemoveEmptyEntries) | Where-Object { \"$($_)\" -inotlike $VariableToRemove }\n        [Environment]::SetEnvironmentVariable(\"PATH\", [System.String]::Join($SplitChar, $newItems), \"User\")\n    }\n\n    $path = [Environment]::GetEnvironmentVariable(\"PATH\", \"Process\")\n    if ($path -ne $null)\n    {\n        $newItems = $path.Split($SplitChar, [StringSplitOptions]::RemoveEmptyEntries) | Where-Object { \"$($_)\" -inotlike $VariableToRemove }\n        [Environment]::SetEnvironmentVariable(\"PATH\", [System.String]::Join($SplitChar, $newItems), \"Process\")\n    }\n}\n\n$InstallPath = Join-Path $PSScriptRoot \".dotnet\"\n$GlobalJsonPath = Join-Path $PSScriptRoot \"global.json\"\nif (!(Test-Path $InstallPath)) {\n    New-Item -Path $InstallPath -ItemType Directory -Force | Out-Null;\n}\n\nif ($IsMacOS -or $IsLinux) {\n    $ScriptPath = Join-Path $InstallPath 'dotnet-install.sh'\n    (New-Object System.Net.WebClient).DownloadFile($DotNetUnixInstallerUri, $ScriptPath);\n    & bash $ScriptPath --jsonfile \"$GlobalJsonPath\" --install-dir \"$InstallPath\" --no-path\n\n    Remove-PathVariable \"$InstallPath\"\n    $env:PATH = \"$($InstallPath):$env:PATH\"\n}\nelse {\n    $ScriptPath = Join-Path $InstallPath 'dotnet-install.ps1'\n    (New-Object System.Net.WebClient).DownloadFile($DotNetInstallerUri, $ScriptPath);\n    & $ScriptPath -JSonFile $GlobalJsonPath -InstallDir $InstallPath;\n\n    Remove-PathVariable \"$InstallPath\"\n    $env:PATH = \"$InstallPath;$env:PATH\"\n}\n$env:DOTNET_ROOT=$InstallPath\n\n###########################################################################\n# INSTALL CAKE\n###########################################################################\n\n& dotnet tool restore\n\n###########################################################################\n# RUN BUILD SCRIPT\n###########################################################################\n& dotnet cake ./build.cake $args\n\nexit $LASTEXITCODE"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 1.2744140625,
          "content": "#!/usr/bin/env bash\n# Define varibles\nSCRIPT_DIR=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\nTOOLS_DIR=$SCRIPT_DIR/tools\n\n\n# Make sure the tools folder exist.\nif [ ! -d \"$TOOLS_DIR\" ]; then\n  mkdir \"$TOOLS_DIR\"\nfi\n\n###########################################################################\n# INSTALL .NET CORE CLI\n###########################################################################\n\nexport DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1\nexport DOTNET_CLI_TELEMETRY_OPTOUT=1\nexport DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER=0\nexport DOTNET_ROLL_FORWARD_ON_NO_CANDIDATE_FX=2\n\nif [ ! -d \"$SCRIPT_DIR/.dotnet\" ]; then\n    mkdir \"$SCRIPT_DIR/.dotnet\"\nfi\ncurl -Lsfo \"$SCRIPT_DIR/.dotnet/dotnet-install.sh\" https://dot.net/v1/dotnet-install.sh\nbash \"$SCRIPT_DIR/.dotnet/dotnet-install.sh\" --jsonfile ./global.json --install-dir .dotnet --no-path\nexport PATH=\"$SCRIPT_DIR/.dotnet\":$PATH\nexport DOTNET_ROOT=\"$SCRIPT_DIR/.dotnet\"\n\n###########################################################################\n# INSTALL CAKE\n###########################################################################\n\ndotnet tool restore\n\n###########################################################################\n# RUN BUILD SCRIPT\n###########################################################################\n\ndotnet cake \"$@\""
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.1162109375,
          "content": "{\n    \"sdk\": {\n        \"version\": \"8.0.100\",\n        \"allowPrerelease\": false,\n        \"rollForward\": \"feature\"\n    }\n}"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}