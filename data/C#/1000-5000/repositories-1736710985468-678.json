{
  "metadata": {
    "timestamp": 1736710985468,
    "page": 678,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "alastairtree/LazyCache",
      "stars": 1727,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.458984375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.0029296875,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\nx64/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n#NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding addin-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n*.ncrunch*\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n\n# NuGet Packages Directory\n## TODO: If you have NuGet Package Restore enabled, uncomment the next line\n#packages/*\n## TODO: If the tool you use requires repositories.config, also uncomment the next line\n#!packages/repositories.config\n\n# Enable \"build/\" folder in the NuGet Packages folder since NuGet packages use it for MSBuild targets\n# This line needs to be after the ignore of the build folder (and the packages folder if the line above has been uncommented)\n!packages/build/\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# =========================\n# Windows detritus\n# =========================\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\npackages/\n.vs/\n\n# Benchmark Dot Net\n**/BenchmarkDotNet.Artifacts/*\n**/project.lock.json\ntests/output/*\n.vs/restore.dg\nartifacts/*\nBDN.Generated\nBenchmarkDotNet.Samples/Properties/launchSettings.json\nsrc/BenchmarkDotNet/Disassemblers/net461/*"
        },
        {
          "name": "CacheDatabaseQueriesApiSample",
          "type": "tree",
          "content": null
        },
        {
          "name": "Console.Net461",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0537109375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 alastairtree\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "LazyCache.AspNetCore",
          "type": "tree",
          "content": null
        },
        {
          "name": "LazyCache.Benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "LazyCache.Ninject.UnitTests",
          "type": "tree",
          "content": null
        },
        {
          "name": "LazyCache.Ninject",
          "type": "tree",
          "content": null
        },
        {
          "name": "LazyCache.UnitTests",
          "type": "tree",
          "content": null
        },
        {
          "name": "LazyCache.UnitTestsCore21",
          "type": "tree",
          "content": null
        },
        {
          "name": "LazyCache.UnitTestsCore22",
          "type": "tree",
          "content": null
        },
        {
          "name": "LazyCache.UnitTestsCore30",
          "type": "tree",
          "content": null
        },
        {
          "name": "LazyCache.UnitTestsCore31",
          "type": "tree",
          "content": null
        },
        {
          "name": "LazyCache.UnitTestsNet50",
          "type": "tree",
          "content": null
        },
        {
          "name": "LazyCache.sln",
          "type": "blob",
          "size": 7.865234375,
          "content": "ï»¿\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio Version 16\r\nVisualStudioVersion = 16.0.29613.14\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"LazyCache\", \"LazyCache\\LazyCache.csproj\", \"{E6A1EF20-94AD-4A1C-9A89-3B2FA8AD8EC7}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"LazyCache.UnitTests\", \"LazyCache.UnitTests\\LazyCache.UnitTests.csproj\", \"{7F6C8799-CA9E-43BD-AE97-72C31BB4E106}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"info\", \"info\", \"{81C0E096-59B7-4129-851B-8183FDB9B02B}\"\r\n\tProjectSection(SolutionItems) = preProject\r\n\t\tappveyor.yml = appveyor.yml\r\n\t\tbuild.ps1 = build.ps1\r\n\t\tReadme.md = Readme.md\r\n\t\tReleaseNotes.md = ReleaseNotes.md\r\n\tEndProjectSection\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Samples\", \"Samples\", \"{335BA426-C839-4996-8476-F3EE4056C40E}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"CacheDatabaseQueriesApiSample\", \"CacheDatabaseQueriesApiSample\\CacheDatabaseQueriesApiSample.csproj\", \"{5D6A88DD-230C-4057-B8EB-A987FF4F29DB}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"LazyCache.AspNetCore\", \"LazyCache.AspNetCore\\LazyCache.AspNetCore.csproj\", \"{A7B07002-29F5-4463-8CA7-097C337337A1}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Console.Net461\", \"Console.Net461\\Console.Net461.csproj\", \"{32142F20-DFCE-4DF0-A263-093111E5A3FA}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"LazyCache.Ninject\", \"LazyCache.Ninject\\LazyCache.Ninject.csproj\", \"{6FF349C3-D20C-493C-87A3-5A193538FE13}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"LazyCache.Ninject.UnitTests\", \"LazyCache.Ninject.UnitTests\\LazyCache.Ninject.UnitTests.csproj\", \"{05FDA7C8-42B4-4B07-B148-EC5EFB98055B}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"LazyCache.UnitTestsCore21\", \"LazyCache.UnitTestsCore21\\LazyCache.UnitTestsCore21.csproj\", \"{A9092A92-0EA4-42DE-9522-8F86BA1E603E}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"LazyCache.UnitTestsCore22\", \"LazyCache.UnitTestsCore22\\LazyCache.UnitTestsCore22.csproj\", \"{69E47208-10AA-471D-AC26-AA95FF9EEA2D}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"LazyCache.UnitTestsCore30\", \"LazyCache.UnitTestsCore30\\LazyCache.UnitTestsCore30.csproj\", \"{8E1FEC4E-BE54-48AE-8C87-8A718BE1E3E2}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"LazyCache.UnitTestsCore31\", \"LazyCache.UnitTestsCore31\\LazyCache.UnitTestsCore31.csproj\", \"{2E025606-884D-4C48-8490-99EB1EA7B268}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"LazyCache.Benchmarks\", \"LazyCache.Benchmarks\\LazyCache.Benchmarks.csproj\", \"{CE7DF61F-03B2-493E-8BFF-6E744015DE14}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"LazyCache.UnitTestsNet50\", \"LazyCache.UnitTestsNet50\\LazyCache.UnitTestsNet50.csproj\", \"{735910E0-E533-4D8B-91AC-6CA7415DEE0A}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{E6A1EF20-94AD-4A1C-9A89-3B2FA8AD8EC7}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{E6A1EF20-94AD-4A1C-9A89-3B2FA8AD8EC7}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{E6A1EF20-94AD-4A1C-9A89-3B2FA8AD8EC7}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{E6A1EF20-94AD-4A1C-9A89-3B2FA8AD8EC7}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{7F6C8799-CA9E-43BD-AE97-72C31BB4E106}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{7F6C8799-CA9E-43BD-AE97-72C31BB4E106}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{7F6C8799-CA9E-43BD-AE97-72C31BB4E106}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{7F6C8799-CA9E-43BD-AE97-72C31BB4E106}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{5D6A88DD-230C-4057-B8EB-A987FF4F29DB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{5D6A88DD-230C-4057-B8EB-A987FF4F29DB}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{5D6A88DD-230C-4057-B8EB-A987FF4F29DB}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{5D6A88DD-230C-4057-B8EB-A987FF4F29DB}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{A7B07002-29F5-4463-8CA7-097C337337A1}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{A7B07002-29F5-4463-8CA7-097C337337A1}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{A7B07002-29F5-4463-8CA7-097C337337A1}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{A7B07002-29F5-4463-8CA7-097C337337A1}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{32142F20-DFCE-4DF0-A263-093111E5A3FA}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{32142F20-DFCE-4DF0-A263-093111E5A3FA}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{32142F20-DFCE-4DF0-A263-093111E5A3FA}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{32142F20-DFCE-4DF0-A263-093111E5A3FA}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{6FF349C3-D20C-493C-87A3-5A193538FE13}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{6FF349C3-D20C-493C-87A3-5A193538FE13}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{6FF349C3-D20C-493C-87A3-5A193538FE13}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{6FF349C3-D20C-493C-87A3-5A193538FE13}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{05FDA7C8-42B4-4B07-B148-EC5EFB98055B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{05FDA7C8-42B4-4B07-B148-EC5EFB98055B}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{05FDA7C8-42B4-4B07-B148-EC5EFB98055B}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{05FDA7C8-42B4-4B07-B148-EC5EFB98055B}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{A9092A92-0EA4-42DE-9522-8F86BA1E603E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{A9092A92-0EA4-42DE-9522-8F86BA1E603E}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{A9092A92-0EA4-42DE-9522-8F86BA1E603E}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{A9092A92-0EA4-42DE-9522-8F86BA1E603E}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{69E47208-10AA-471D-AC26-AA95FF9EEA2D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{69E47208-10AA-471D-AC26-AA95FF9EEA2D}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{69E47208-10AA-471D-AC26-AA95FF9EEA2D}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{69E47208-10AA-471D-AC26-AA95FF9EEA2D}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{8E1FEC4E-BE54-48AE-8C87-8A718BE1E3E2}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{8E1FEC4E-BE54-48AE-8C87-8A718BE1E3E2}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{8E1FEC4E-BE54-48AE-8C87-8A718BE1E3E2}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{8E1FEC4E-BE54-48AE-8C87-8A718BE1E3E2}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{2E025606-884D-4C48-8490-99EB1EA7B268}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{2E025606-884D-4C48-8490-99EB1EA7B268}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{2E025606-884D-4C48-8490-99EB1EA7B268}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{2E025606-884D-4C48-8490-99EB1EA7B268}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{CE7DF61F-03B2-493E-8BFF-6E744015DE14}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{CE7DF61F-03B2-493E-8BFF-6E744015DE14}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{CE7DF61F-03B2-493E-8BFF-6E744015DE14}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{CE7DF61F-03B2-493E-8BFF-6E744015DE14}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{735910E0-E533-4D8B-91AC-6CA7415DEE0A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{735910E0-E533-4D8B-91AC-6CA7415DEE0A}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{735910E0-E533-4D8B-91AC-6CA7415DEE0A}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{735910E0-E533-4D8B-91AC-6CA7415DEE0A}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(NestedProjects) = preSolution\r\n\t\t{5D6A88DD-230C-4057-B8EB-A987FF4F29DB} = {335BA426-C839-4996-8476-F3EE4056C40E}\r\n\t\t{32142F20-DFCE-4DF0-A263-093111E5A3FA} = {335BA426-C839-4996-8476-F3EE4056C40E}\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {5040E431-0FAA-4DC7-A678-D218CD57D542}\r\n\tEndGlobalSection\r\nEndGlobal\r\n"
        },
        {
          "name": "LazyCache",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.169921875,
          "content": "<img align=\"right\" src=\"https://raw.githubusercontent.com/alastairtree/LazyCache/master/artwork/logo-256.png?raw=true\" />\r\n\r\n# Lazy Cache #\r\n\r\n[![Build status](https://ci.appveyor.com/api/projects/status/oca98pp4safs4vj2/branch/master?svg=true)](https://ci.appveyor.com/project/alastairtree/lazycache/branch/master)\r\n![AppVeyor tests](https://img.shields.io/appveyor/tests/alastairtree/lazycache.svg)\r\n[![NuGet](https://img.shields.io/nuget/v/LazyCache.svg)](https://www.nuget.org/packages/LazyCache/)\r\n![Nuget](https://img.shields.io/nuget/dt/LazyCache.svg)\r\n\r\n\r\nLazy cache is a simple in-memory caching service. It has a developer friendly \r\ngenerics based API, and provides a thread safe cache implementation that \r\nguarantees to only execute your cachable delegates once (it's lazy!). Under \r\nthe hood it leverages Microsoft.Extensions.Caching and Lazy<T> to provide performance and \r\nreliability in heavy load scenarios.\r\n\r\n## Download ##\r\n\r\nLazyCache is available using [nuget](https://www.nuget.org/packages/LazyCache/). To install LazyCache, run the following command in the [Package Manager Console](http://docs.nuget.org/docs/start-here/using-the-package-manager-console)\r\n\r\n```Powershell\r\nPM> Install-Package LazyCache\r\n```\r\n\r\n## Quick start\r\n\r\nSee the [quick start wiki](https://github.com/alastairtree/LazyCache/wiki/Quickstart)\r\n\r\n## Sample code\r\n\r\n```csharp\r\n// Create our cache service using the defaults (Dependency injection ready).\r\n// By default it uses a single shared cache under the hood so cache is shared out of the box (but you can configure this)\r\nIAppCache cache = new CachingService();\r\n\r\n// Declare (but don't execute) a func/delegate whose result we want to cache\r\nFunc<ComplexObjects> complexObjectFactory = () => methodThatTakesTimeOrResources();\r\n\r\n// Get our ComplexObjects from the cache, or build them in the factory func \r\n// and cache the results for next time under the given key\r\nComplexObjects cachedResults = cache.GetOrAdd(\"uniqueKey\", complexObjectFactory);\r\n```\r\n\r\nAs you can see the magic happens in the `GetOrAdd()` method which gives the consumer an atomic and tidy way to add caching to your code. It leverages a factory delegate `Func` and generics to make it easy to add cached method calls to your app. \r\n\r\nIt means you avoid the usual \"Check the cache - execute the factory function - add results to the cache\" pattern, saves you writing the double locking cache pattern and means you can be a lazy developer!\r\n\r\n## What should I use it for?\r\n\r\nLazyCache suits the caching of database calls, complex object graph building routines and web service calls that should be cached for performance. \r\nAllows items to be cached for long or short periods, but defaults to 20 mins.\r\n\r\n## .Net framework and dotnet core support?\r\n\r\nThe latest version targets netstandard 2.0. See [.net standard implementation support](https://docs.microsoft.com/en-us/dotnet/standard/net-standard#net-implementation-support)\r\n\r\nFor dotnet core 2, .net framwork net461 or above, netstandard 2+, use LazyCache 2 or above.\r\n\r\nFor .net framework without netstandard 2 support such as net45 net451 net46 use LazyCache 0.7 - 1.x\r\n\r\nFor .net framework 4.0 use LazyCache 0.6\r\n\r\n\r\n## Features ##\r\n\r\n- Simple API with familiar sliding or absolute expiration\r\n- Guaranteed single evaluation of your factory delegate whose results you want to cache\r\n- Strongly typed generics based API. No need to cast your cached objects every time you retrieve them\r\n- Stops you inadvertently caching an exception by removing Lazys that evaluate to an exception\r\n- Thread safe, concurrency ready\r\n- Async compatible - lazy single evaluation of async delegates using `GetOrAddAsync()`\r\n- Interface based API and built in `MockCache` to support test driven development and dependency injection\r\n- Leverages a provider model on top of IMemoryCache under the hood and can be extended with your own implementation\r\n- Good test coverage\r\n\r\n## Documentation\r\n\r\n* [The wiki](https://github.com/alastairtree/LazyCache/wiki)\r\n* [Adding caching to a .net application and make it faster](https://alastaircrabtree.com/the-easy-way-to-add-caching-to-net-application-and-make-it-faster-is-called-lazycache/)\r\n\r\n## Sample Application\r\n\r\nSee [CacheDatabaseQueriesApiSample](/CacheDatabaseQueriesApiSample) for an example of how to use LazyCache to cache the results of an Entity framework query in\r\na web api controller. Watch how the cache saves trips to the database and results are returned to the client far quicker from the \r\nin-memory cache\r\n\r\n## Contributing\r\n\r\nIf you have an idea or want to fix an issue please open an issue on Github to discuss it and it will be considered. \r\n\r\nIf you have code to share you should submit a pull request: fork the repo, then create a branch on that repo with your changes, when you are happy create a pull Request from your branch into LazyCache master for review. See https://help.github.com/en/articles/creating-a-pull-request-from-a-fork. \r\n\r\nLazyCache is narrow in focus and well established so unlikely to accept massive changes out of nowhere but come talk about on GitHub and we can all collaborate on something that works for everyone. It is also quite extensible so you may be able to extend it in your project or add a companion library if necessary.\r\n\r\n\r\n"
        },
        {
          "name": "ReleaseNotes.md",
          "type": "blob",
          "size": 4.294921875,
          "content": "# Release notes for LazyCache #\r\n\r\n## Version 2.4.0\r\n- Bug fix for generic type - see #163. Thanks @gamblen\r\n- Bug fix for async wait and abs expiry. Thanks @allanrodriguez\r\n- (Very minor API change that is compiler compatible, but not binary compatible, so incrementing the minor.)\r\n\r\n## Version 2.1.3\r\n- Rename ExpirationMode.ImmediateExpiry => ExpirationMode.ImmediateEviction\r\n- Lovely new logo! (#133) Thanks to @doolali\r\n- Performance imporvements to reduce allocations in #134 - thanks @jnyrup\r\n\r\n## Version 2.1.2\r\n- Tweak key lock array size based on CPU count so larger for bigger machines (See PR #126 and discussion with @jjxtra)\r\n\r\n## Version 2.1.1\r\n- PR #126 (and issue #104) optimise cache key locking for faster performance under high CPU load and lots of concurrency. Thanks to @jjxtra\r\n\r\n## Version 2.1.0\r\n- Add options for expiration: \r\n    - ExpirationMode.ImmediateExpiration which uses a timer to remove items from the cache as soon as they expire (more resource intensive)\r\n    - ExpirationMode.LazyExpiration (existing default) which removes expired cache items when they are next accessed if they have expired.\r\n- Fix #96 AddExpirationToken with CancellationChangeToken is not being honored\r\n- Allow callers to pass MemoryCacheEntryOptions that is used at cache insertion time. This allows users to wire up callbacks and expiration tokens that fire at the correct time\r\n\r\n## Version 2.0.5\r\n- Fix #85 and #100 Absolute expiration not working with TimeSpan. Thank you to @Meberem and @Sinhk.\r\n- Fix #124 casing for PackageReference - by @jnyrup \r\n\r\n## Version 2.0.4\r\n- Fix #82 Make constructor resolution  specific when using aspnet core dependency injection\r\n\r\n## Version 2.0.3\r\n- Fix #46 GetOrAdd and GetOrAddAsync returning nulll if there is already an item with the same key but different type in the cache (PR #106)\r\n\r\n## Version 2.0.2\r\n- Fix #71. Downgrade framework references to core framework 2.1 (not 2.2) since that is the current LTS release (PR #105)\r\n\r\n## Version 2.0.1\r\n- Add Ninject adapter (PR #61)\r\n\r\n## Version 2.0.0\r\n- *BREAKING CHANGE* Upgrade to netstandard2.0\r\n- *BREAKING CHANGE* Change underlying cache from System.Runtime.Caching to Microsft.Extension.Caching.Memory\r\n- *BREAKING CHANGE* Removed IAppCache.ObjectCache and changed to a cache provider model. \r\n  To access the provider use IAppCache.CacheProvider. By default we use a singleton shared in-memory cache but add your own cache provider by implmenting the simple `ICacheProvider`.\r\n- *BREAKING CHANGE* changed from CacheItemPolicy to MemoryCacheEntryOptions. RemovedCallback is now PostEvictionCallbacks.\r\n- Added a new replaceable global static default cache provider \r\n    \r\n  `Func<ICacheProvider> DefaultCacheProvider { get; }`\r\n  \r\n  By default we use a shared in-memory cache but each instance can have it's underlying cache provider overridden from it's constructor.\r\n- Make methods on CachingService virtual/protected to enable \r\n- Add LazyCache.AspNetCore for dependency injection registration - ServiceCollection.AddLazyCache();\r\n- Update sample to use aspnet core and LazyCache.AspNetCore\r\n- New IAppCache.DefaultCachePolicy to replace CachingService.DefaultCacheDuration\r\n- Moved most CachingService method overloads to extension methods on IAppCache in AppCacheExtensions. API should be backwards compatible but as now extension methods this is technically an API breaking changing.\r\n- Added new methods on IAppCache to allow you to specify cache expiry options on executution of the item factory\r\n   \r\n  `GetOrAdd<T>(string key, Func<ICacheEntry, T> addItemFactory)`\r\n  \r\n  `Task<T> GetOrAddAsync<T>(string key, Func<ICacheEntry, Task<T>> addItemFactory)`\r\n\r\n\r\n## Version 0.7.1\r\n- Fix async/sync interopability bug, see https://github.com/alastairtree/LazyCache/issues/12\r\n\r\n## Version 0.7\r\n\r\n- *BREAKING CHANGE* Upgrade to .net 4.5\r\n- Added ObjectCache property to IAppCache to allow access to underlying cache for operations such as cache clearing\r\n- Support caching asynchronous tasks with GetOrAddAsync methods\r\n- Add ApiAsyncCachingSample to demonstrate the caching the results of SQL Queries in a WebApi controller\r\n- Add badges to Readme\r\n\r\n## Version 0.6\r\n\r\n- Fixed issue with RemovedCallback not unwrapping the Lazy used to thread safe the cache item.\r\n\r\n## Version 0.5\r\n\r\n- Initial release of CachingService and interface IAppCache. \r\n- Readme\r\n- Core unit tests.\r\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.3310546875,
          "content": "version: '2.0.0.{build}'\r\nimage: Visual Studio 2019\r\nconfiguration: Release\r\nenvironment:\r\n  LazyCacheVersion: 2.0.0\r\n  LazyCacheVersionSuffix: \r\n  LazyCacheAspNetCoreVersion: 2.0.0\r\n  LazyCacheAspNetCoreVersionSuffix: \r\n  LazyCacheNinjectVersion: 2.0.0\r\n  LazyCacheNinjectVersionSuffix: \r\nbuild_script:\r\n- ps: '& .\\build.ps1'\r\ndeploy: off"
        },
        {
          "name": "artwork",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 2.060546875,
          "content": "Set-StrictMode -Version latest\r\n$ErrorActionPreference = \"Stop\"\r\n\r\n\r\n# Taken from psake https://github.com/psake/psake\r\n\r\n<#\r\n.SYNOPSIS\r\n  This is a helper function that runs a scriptblock and checks the PS variable $lastexitcode\r\n  to see if an error occcured. If an error is detected then an exception is thrown.\r\n  This function allows you to run command-line programs without having to\r\n  explicitly check the $lastexitcode variable.\r\n.EXAMPLE\r\n  exec { svn info $repository_trunk } \"Error executing SVN. Please verify SVN command-line client is installed\"\r\n#>\r\nfunction Exec\r\n{\r\n    [CmdletBinding()]\r\n    param(\r\n        [Parameter(Position=0,Mandatory=1)][scriptblock]$cmd,\r\n        [Parameter(Position=1,Mandatory=0)][string]$errorMessage = (\"Error executing command {0}\" -f $cmd)\r\n    )\r\n    & $cmd\r\n    if ($lastexitcode -ne 0) {\r\n        throw (\"Exec: \" + $errorMessage)\r\n    }\r\n}\r\n\r\n$config = \"release\"\r\n\r\nTry {\r\n\r\n\t# Get dependencies from nuget and compile\r\n\tExec { dotnet restore }\r\n\tExec { nuget restore Console.Net461 -SolutionDirectory . }\r\n\tExec { dotnet build --configuration $config --no-restore }\r\n\r\n\t# Find each test project and run tests. upload results to AppVeyor\r\n\tGet-ChildItem .\\**\\*.csproj -Recurse | \r\n\t\tWhere-Object { $_.Name -match \".*Test.*\\.csproj$\"} | \r\n\t\tForEach-Object { \r\n\t\t\r\n\t\t\tExec { dotnet test $_.FullName --configuration $config --no-build --no-restore --logger:\"trx;LogFileName=..\\..\\test-result.trx\" }\r\n\t\r\n\t\t\t$testResults = (Resolve-Path .\\test-result*.trx)\r\n\t\t\t# if on build server upload results to AppVeyor\r\n\t\t\tif (\"${ENV:APPVEYOR_JOB_ID}\" -ne \"\") {\r\n\t\t\t\t$wc = New-Object 'System.Net.WebClient'\r\n\t\t\t\t$wc.UploadFile(\"https://ci.appveyor.com/api/testresults/mstest/$($env:APPVEYOR_JOB_ID)\", $testResults) \r\n\t\t\t}\r\n\r\n\t\t\tRemove-Item $testResults -ErrorAction SilentlyContinue\r\n\t}\r\n\r\n\t# Publish the nupkg artifacts\r\n\tif (Get-Command \"Push-AppveyorArtifact\" -errorAction SilentlyContinue)\r\n\t{\r\n\t\tGet-ChildItem .\\*\\bin\\$config\\*.nupkg -Recurse | ForEach-Object { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\r\n\t}\r\n\r\n} Catch {\r\n\t$host.SetShouldExit(-1)\r\n\tthrow\r\n}"
        }
      ]
    }
  ]
}