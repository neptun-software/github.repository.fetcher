{
  "metadata": {
    "timestamp": 1736710774333,
    "page": 240,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "topameng/tolua",
      "stars": 3012,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3974609375,
          "content": "[Ll]ibrary/\n[Tt]emp/\n[Oo]bj/\n[Bb]uild/\n\n# Autogenerated VS/MD solution and project files\n*.csproj\n*.unityproj\n*.sln\n*.suo\n*.tmp\n*.user\n*.userprefs\n*.pidb\n*.booproj\n\n# Unity3D generated meta files\n*.pidb.meta\n\n# Unity3D Generated File On Crash Reports\nsysinfo.txt\n/Assets/UnityVS.meta\n/Assets/UnityVS\n/UnityVS.tolua.v11.suo\n/UnityVS.tolua.CSharp.csproj\n/UnityVS.tolua.CSharp.Editor.csproj\n/UnityVS.tolua.sln\n"
        },
        {
          "name": "Assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05078125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 topameng\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "Luajit",
          "type": "tree",
          "content": null
        },
        {
          "name": "Luajit64",
          "type": "tree",
          "content": null
        },
        {
          "name": "ProjectSettings",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.2294921875,
          "content": "## tolua#\r\n\r\ntolua# is a Unity lua static binder solution. the first solution that analyzes code by reflection and generates wrapper classes.<br>\r\nIt is a Unity plugin that greatly simplifies the integration of C# code with Lua. which can automatically generate the binding code to access Unity from Lua and map c# constants, variables, functions, properties, classes, and enums to Lua.<br>\r\ntolua# grows up from cstolua. it's goal is to be a powerful development environment for Unity.<br>\r\nSupport unity4.6.x and Unity5.x all(copy /Unity5.x/Assets to /Assets) <br>\r\nIf you want to test examples(example 1 is excluded)in mobile, first click menu Lua/Copy lua files to Resources. then build it <br>\r\n如果你想在手机上测试例子(例子1除外)，首先点击菜单Lua/Copy lua files to Resources， 之后再build. <br>\r\n\r\n欢迎大家点星支持，谢谢^_^<br>\r\n有bug 可以到QQ群286510803反馈。 可以加讨论群: <br>\r\nulua&tolua技术交流群① 341746602(已满) <br>\r\nulua&tolua技术讨论群② 469941220(已满)  <br>\r\ntolua#技术讨论群④ 543826216(已满)<br>\r\ntolua#技术群 286510803<br>\r\n\r\n\r\n# Library\r\n**tolua_runtime** <br>\r\nhttps://github.com/topameng/tolua_runtime <br>\r\n**Debugger** <br>\r\nhttps://github.com/topameng/Debugger <br>\r\n**CString** <br>\r\nhttps://github.com/topameng/CString <br>\r\n**protoc-gen-lua** <br>\r\nhttps://github.com/topameng/protoc-gen-lua <br>\r\n\r\n# FrameWork and Demo\r\n**LuaFrameWork**<br>\r\nhttps://github.com/jarjin/LuaFramework_NGUI <br>\r\nhttps://github.com/jarjin/LuaFramework_UGUI <br>\r\n**XlsxToLua**<br>\r\nhttps://github.com/zhangqi-ulua/XlsxToLua<br>\r\n**UnityHello**<br>\r\nhttps://github.com/woshihuo12/UnityHello<br>\r\n**UWA-ToLua**<br>\r\nhttp://uwa-download.oss-cn-beijing.aliyuncs.com/plugins%2FiOS%2FUWA-iOS-ToLua.zip<br>\r\n\r\n# Debugger\r\n**EmmyLua**<br>\r\nhttps://github.com/tangzx/IntelliJ-EmmyLua<br>\r\n**unity_tolua-_zerobrane_api**<br>\r\nhttps://github.com/LabOfHoward/unity_tolua-_zerobrane_api<br>\r\n\r\n# Packages\r\n　**Basics**　　　　　　　　**Math**　　　　　　**Data Structures**<br>\r\n　luabitop　　　　　　　Quaternion　　　　　　　list<br>\r\n　 struct　　　　　　　 　Vector3　　　　　　　　event<br>\r\n　 int64　　　　 　　　  　Vector4　　　　　　　　slot<br>\r\n　 Time　　　　 　　　  　Vector2<br>\r\n**Networking**　　　　 　　　Ray<br>\r\n　luasocket　　　　 　　　 Color<br>\r\n　**Parsing**　　　　 　　　Bounds<br>\r\n　lpeg　　 　　 　　　 　  　Mathf<br>\r\n　**Protol**　　　　　 　 　　 Touch<br>\r\n　pblua　　　 　　 　 　RaycastHit<br>\r\n# 特性\r\n* 自动生成绑定代码文件，非反射调用 <br>\r\n* 大量内建基础类型支持，如枚举，委托，事件，Type, 数组，迭代器等 <br>\r\n* 支持多种协同形式 <br>\r\n* 支持所有unity内部类导出，支持委托类型导出 <br>\r\n* 支持导出自定义，跳过某个空的基类，修改导出名称等 <br>\r\n* 支持扩展函数自定义导出, 比如DoTween <br>\r\n* 支持值类型Nullable导出，包括Nullable&lt;Vector3&gt;等 <br>\r\n* 支持Lua中function转委托，可以区分需要不同委托的参数的重载函数 <br>\r\n* 支持c# LuaFunction对象转委托，简化调用方式。 支持无GC的多参数调用形式 <br>\r\n* 支持重载函数自动折叠, 如:Convert.ToUInt32只导出double参数的函数 <br>\r\n* 支持重载函数自动排序, 如:参数个数相同, object参数执行级最低, 不会出现错误匹配情况 <br>\r\n* 支持导出函数重命名, 可以分离导出某个重载函数(可以导出被折叠掉的函数) <br>\r\n* 支持使用编辑器类改写导出规则 <br>\r\n* 支持this数组访问，索引为int可以通过[]访问，其他可使用.get_Item或者.this:get()访问数组成员 <br>\r\n* 支持委托(事件)+-lua function。支持通过函数接口的Add和Remove委托操作 <br>\r\n* 支持静态反射操作, 形式同c# <br>\r\n* 支持peer表，可在lua端扩展导出的userdata <br>\r\n* 支持自定义struct压入和读取，做到无GC，并且结构成员无类型限制, 参考例子24 <br>\r\n* 支持preloading, 可以通过requie后绑定wrap文件 <br>\r\n* 支持int64, uint64  <br>\r\n* 大量的lua数学类型，如Quaternion, Vector3, Mathf等\r\n* 包含第三方lua扩展，包括luasocket, struct, lpeg, utf8, pb等库 <br>\r\n* 当lua出现异常，能够同时捕获c#端和lua端堆栈，便于调试 <br>\r\n* print信息，在编辑器点击日志, 能自动打开对应lua文件 <br>\r\n* 支持unity所有版本 <br>\r\n* **支持Lua hook C#相代码实现，一定程度上支持利用Lua代码修改C#端代码的bug**（[暖更新使用说明](https://zhuanlan.zhihu.com/p/35124260)） <br>\r\n\r\n# 快速入门\r\n在CustomSetting.cs中添加需要导出的类或者委托，类加入到customTypeList列表，委托加入到customDelegateList列表 <br>\r\n通过设置saveDir变量更改导出目录,默认生成在Assets/Source/Generate/下,点击菜单Lua->Generate All,生成绑定文件 <br>\r\n在LuaConst.cs中配置开发lua文件目录luaDir以及tolua lua文件目录toluaDir <br>\r\n```csharp\r\n//例子1\r\nLuaState lua = new LuaState();\r\nlua.Start();\r\nlua.DoString(\"print('hello world')\");\r\nlua.Dispose();\r\n\r\n//例子2\r\nLuaState luaState = null;\r\n\r\nvoid Awake()\r\n{\r\n    luaState = LuaClient.GetMainState();\r\n\r\n    try\r\n    {            \r\n        luaState.Call(\"UIShop.Awake\", false);\r\n    }\r\n    catch (Exception e)\r\n    {\r\n        //Awake中必须这样特殊处理异常\r\n        luaState.ThrowLuaException(e);\r\n    }\r\n}\r\n\r\nvoid Start()\r\n{\r\n    luaState.Call(\"UIShop.Start\", false);\r\n}\r\n```\r\n```lua\r\nlocal go = GameObject('go')\r\ngo:AddComponent(typeof(UnityEngine.ParticleSystem))\r\ngo.transform.position = Vector3.zero\r\ngo.transform:Rotate(Vector3(0,90,0), UnityEngine.Space.World)\r\ngo.transform:Rotate(Vector3(0, 1, 0), 0)\r\n\r\n--DoTween 需要在CustomSetting导出前定义USING_DOTWEENING宏，或者取消相关注释\r\ngo.transform:DORotate(Vector3(0,0,360), 2, DG.Tweening.RotateMode.FastBeyond360)\r\n\r\nShop = {}\r\n\r\nfunction Shop:Awake()\r\n    self.OnUpdate = UpdateBeat:CreateListener(Shop.Update, self)\r\n    UpdateBeat:AddListener(self.OnUpdate)\r\nend\r\n\r\nfunction Shop:OnDestroy()\r\n    UpdateBeat:RemoveListener(self.OnUpdate)\r\nend\r\n\r\nfunction Shop:OnClick()\r\n    print(\"OnClick\")\r\nend\r\n\r\nfunction Shop:OnToggle()\r\n    print(\"OnToggle\")\r\nend\r\n\r\nfunction Shop:Update()\r\nend\r\n\r\n--委托\r\nlocal listener = UIEventListener.Get(go)\r\nlistener.onClick = function() print(\"OnClick\") end\r\nlistener.onClick = nil\r\nlistener.onClick = UIEventListener.VoidDelegate(Shop.OnClick, Shop)\r\nlistener.onClick = listener.onClick + UIEventListener.VoidDelegate(Shop.OnClick, Shop)\r\nlistener.onClick = listener.onClick - UIEventListener.VoidDelegate(Shop.OnClick, Shop)\r\n\r\nlocal toggle = go:GetComponent(typeof(UIToggle))\r\nEventDelegate.Add(toggle.onChange, EventDelegate.Callback(Shop.OnToggle, Shop))\r\nEventDelegate.Remove(toggle.onChange, EventDelegate.Callback(Shop.OnToggle, Shop))\r\n\r\n--事件\r\nlocal Client = {}\r\n\r\nfunction Client:Log(str)\r\nend\r\n\r\nApplication.logMessageReceived = Application.logMessageReceived + Application.LogCallback(Clent.Log, Client)\r\nApplication.logMessageReceived = Application.logMessageReceived - Application.LogCallback(Clent.Log, Client)\r\n\r\n--out参数\r\nlocal _layer = 2 ^ LayerMask.NameToLayer('Default')\r\nlocal flag, hit = UnityEngine.Physics.Raycast(ray, nil, 5000, _layer)\r\n\r\nif flag then\r\n    print('pick from lua, point: '..tostring(hit.point))\r\nend\r\n```\r\n[这里](Assets/ToLua/Examples/README.md)是更多的示例。\r\n# 关于反射\r\ntolua# 不支持动态反射。动态反射对于重载函数有参数匹配问题，函数排序问题，ref,out 参数问题等等。<br>\r\ntolua#提供的替换方法是:<br>\r\n1. preloading, 把你未来可能需要的类型添加到导出列表customTypeList，同时也添加到dynamicList列表中，这样导出后该类型并不会随binder注册到lua中，你可以通过 require \"namespace.classname\" 动态注册到lua中，对于非枚举类型tolua#系统也可以在第一次push该类型时动态载入，当然也可在过场动画、资源下载、登录、场景加载或者某个的函数中require这个类型。<br>\r\n2. 静态反射，参考例子22。通过静态反射支持精确的函数参数匹配和类型检查。不会存在重载函数参数混乱匹配错误问题, 注意iOS必须配置好link.xml<br>\r\n\r\n# Performance\r\n|   平台    |   属性读写   | 重载函数  | Vector3构造 |GameObject构造|Vector3归一化|Slerp|\r\n| :-- \t\t| :-----------:|:---------:| :---------: |:-----------: |:----------: |:--: |\r\n| PC  \t\t|  0.0465:0.15 | 0.076:0.12|0.02:0.001   |0.1:0.14\t\t|0.014:0.001  |0.10:0.11|\r\n| Android   |   0.16:1.1  | 0.28:0.76 |0.17:0.00035   |0.43:0.5\t\t|0.21:0.02\t  |0.3:0.06|\r\n| iOS       |  0.04:0.145  | 0.055:0.11 |0.017:0.05   |0.074:0.08\t|0.035:0.11\t  |0.078:0.5|\r\n\r\n测试结果为C#:Lua. 环境不同会略有差异。可用数字倍率做参考<br>\r\nPC: Intel(R) Core(TM) i5-4590 CPU@3.3GHz + 8GB + 64 位win7 + Unity5.4.5p4<br>\r\nAndroid: 中兴nubia z9 max(NX512J) + Adnroid5.0.2<br>\r\niOS(il2cpp): IPhone6 Plus<br>\r\n按照1.0.7.355版本更新了测试数据, u5相对u4, 安卓上c#有了不小的提升<br>\r\n# Examples\r\n参考包内1-24例子\r\n\r\n# About Lua\r\nwin, android ios using luajit2.1-beta3. macos using luac5.1.5(for u5.x). \r\n注意iOS未编译模拟器库，请用真机测试\r\n"
        },
        {
          "name": "Unity5.x",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}