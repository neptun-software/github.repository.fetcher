{
  "metadata": {
    "timestamp": 1736711109799,
    "page": 926,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Cysharp/Ulid",
      "stars": 1369,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 5.556640625,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n**/Properties/launchSettings.json\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/*\n!.axoCover/settings.json\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/[Pp]ackages/*\n# except build/, which is used as an MSBuild target.\n!**/[Pp]ackages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/[Pp]ackages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk\n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output\nASALocalRun/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder\n.mfractor/\n\n\n# Unity\nLibrary/\nTemp/\nsrc/Ulid.Unity/*.csproj\nsrc/Ulid.Unity/Ulid.Unity.sln\nsrc/Ulid.Unity/Ulid.Unity.unitypackage\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 0.673828125,
          "content": "﻿<Project>\n  <PropertyGroup>\n    <GenerateDocumentationFile>true</GenerateDocumentationFile>\n    <LangVersion>7.3</LangVersion>\n    <NoWarn>$(NoWarn);CS1591</NoWarn>\n\n    <!-- NuGet Packaging -->\n    <PackageVersion>$(Version)</PackageVersion>\n    <Company>Cysharp</Company>\n    <Authors>Cysharp</Authors>\n    <Copyright>© Cysharp, Inc.</Copyright>\n    <PackageProjectUrl>https://github.com/Cysharp/Ulid</PackageProjectUrl>\n    <RepositoryUrl>$(PackageProjectUrl)</RepositoryUrl>\n    <RepositoryType>git</RepositoryType>\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\n    <PackageTags>guid</PackageTags>\n    <PackageIcon>Icon.png</PackageIcon>\n  </PropertyGroup>\n</Project>"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2019 Cysharp, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.9384765625,
          "content": "Ulid\n===\n[![GitHub Actions](https://github.com/Cysharp/Ulid/workflows/Build-Debug/badge.svg)](https://github.com/Cysharp/Ulid/actions) [![Releases](https://img.shields.io/github/release/Cysharp/Ulid.svg)](https://github.com/Cysharp/Ulid/releases)\n\nFast C# Implementation of [ULID](https://github.com/ulid/spec) for .NET Core and Unity. Ulid is sortable, random id generator. This project aims performance by fastest binary serializer([MessagePack-CSharp](https://github.com/neuecc/MessagePack-CSharp/)) technology. It achives faster generate than Guid.NewGuid.\n\n![image](https://user-images.githubusercontent.com/46207/55129636-266c0d00-515b-11e9-85ab-3437de539451.png)\n\nNuGet: [Ulid](https://www.nuget.org/packages/Ulid) or download .unitypackage from [Ulid/Releases](https://github.com/Cysharp/Ulid/releases) page.\n\n```\nInstall-Package Ulid\n```\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## Table of Contents\n\n- [How to use](#how-to-use)\n- [Performance](#performance)\n- [Cli](#cli)\n- [Integrate](#integrate)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\nHow to use\n---\nSimilar api to Guid.\n\n* `Ulid.NewUlid()`\n* `Ulid.Parse()`\n* `Ulid.TryParse()`\n* `new Ulid()`\n* `.ToString()`\n* `.ToByteArray()`\n* `.TryWriteBytes()`\n* `.TryWriteStringify()`\n* `.ToBase64()`\n* `.Time`\n* `.Random`\n\nAllow to convert Guid.\n\n* `.ToGuid()`\n* `(Guid)ulid`\n\nPerformance\n---\n`Guid` is standard corelib guid. `Ulid` is this library. `NUlid` is competitor [RobThree/NUlid](https://github.com/RobThree/NUlid).\n\n* New\n\n| Method |      Mean | Error | Ratio | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\n|------- |----------:|------:|------:|------------:|------------:|------------:|--------------------:|\n|  Guid_ |  73.13 ns |    NA |  1.00 |           - |           - |           - |                   - |\n|  Ulid_ |  65.41 ns |    NA |  0.89 |           - |           - |           - |                   - |\n| NUlid_ | 209.89 ns |    NA |  2.87 |      0.0162 |           - |           - |               104 B |\n\n`Ulid.NewUlid()` is faster than `Guid.NewGuid()` and zero allocation.\n\n* Parse\n\n| Method |      Mean | Error | Ratio | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\n|------- |----------:|------:|------:|------------:|------------:|------------:|--------------------:|\n|  Guid_ | 197.98 ns |    NA |  1.00 |           - |           - |           - |                   - |\n|  Ulid_ |  28.67 ns |    NA |  0.14 |           - |           - |           - |                   - |\n| NUlid_ | 161.03 ns |    NA |  0.81 |      0.0441 |           - |           - |               280 B |\n\nfrom string(Base32) to ulid, `Ulid.Parse(string)` is fastest and zero allocation.\n\n* ToString\n\n| Method |     Mean | Error | Ratio | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\n|------- |---------:|------:|------:|------------:|------------:|------------:|--------------------:|\n|  Guid_ | 57.73 ns |    NA |  1.00 |      0.0163 |           - |           - |               104 B |\n|  Ulid_ | 38.77 ns |    NA |  0.67 |      0.0126 |           - |           - |                80 B |\n| NUlid_ | 96.76 ns |    NA |  1.68 |      0.0583 |           - |           - |               368 B |\n\nto string representation(Base32), `Ulid.ToString()` is fastest and less allocation.\n\n* NewId().ToString()\n\n| Method |     Mean | Error | Ratio | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\n|------- |---------:|------:|------:|------------:|------------:|------------:|--------------------:|\n|  Guid_ | 205.7 ns |    NA |  1.00 |      0.0162 |           - |           - |               104 B |\n|  Ulid_ | 110.2 ns |    NA |  0.54 |      0.0125 |           - |           - |                80 B |\n| NUlid_ | 301.7 ns |    NA |  1.47 |      0.0744 |           - |           - |               472 B |\n\ncase of get the string representation immediately, `Ulid` is twice faster than Guid.\n\n* GetHashCode\n\n| Method |       Mean | Error | Ratio | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\n|------- |-----------:|------:|------:|------------:|------------:|------------:|--------------------:|\n|  Guid_ |  0.9706 ns |    NA |  1.00 |           - |           - |           - |                   - |\n|  Ulid_ |  1.0329 ns |    NA |  1.06 |           - |           - |           - |                   - |\n| NUlid_ | 20.6175 ns |    NA | 21.24 |      0.0063 |           - |           - |                40 B |\n\nGetHashCode is called when use dictionary's key. `Ulid` is fast and zero allocation.\n\n* Equals\n\n| Method |      Mean | Error | Ratio | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\n|------- |----------:|------:|------:|------------:|------------:|------------:|--------------------:|\n|  Guid_ |  1.819 ns |    NA |  1.00 |           - |           - |           - |                   - |\n|  Ulid_ |  2.023 ns |    NA |  1.11 |           - |           - |           - |                   - |\n| NUlid_ | 29.875 ns |    NA | 16.43 |      0.0126 |           - |           - |                80 B |\n\nEquals is called when use dictionary's key. `Ulid` is fast and zero allocation.\n\n* CompareTo\n\n| Method |      Mean | Error | Ratio | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\n|------- |----------:|------:|------:|------------:|------------:|------------:|--------------------:|\n|  Guid_ |  5.409 ns |    NA |  1.00 |           - |           - |           - |                   - |\n|  Ulid_ |  3.838 ns |    NA |  0.71 |           - |           - |           - |                   - |\n| NUlid_ | 17.126 ns |    NA |  3.17 |      0.0063 |           - |           - |                40 B |\n\nCompareTo is called when use sort. `Ulid` is fastest and zero allocation.\n\nCli\n---\nYou can install command-line to generate ulid string by  .NET Core Global Tool.\n\n`dotnet tool install --global ulid-cli`\n\nafter installed, you can call like here.\n\n```\n$ dotnet ulid\n01D7CB31YQKCJPY9FDTN2WTAFF\n\n$ dotnet ulid -t \"2019/03/25\" -min\n01D6R3EBC00000000000000000\n\n$ dotnet ulid -t \"2019/03/25\" -max\n01D6R3EBC0ZZZZZZZZZZZZZZZZ\n\n$ dotnet ulid -t \"2019/03/25\" -max -base64\nAWmwNy2A/////////////w==\n```\n\n```\nargument list:\n-t, -timestamp: [default=null]timestamp(converted to UTC, ISO8601 format recommended)\n-r, -randomness: [default=null]randomness bytes(formatted as Base32, must be 16 characters, case insensitive)\n-b, -base64: [default=False]output as base64 format, or output base32 if false\n-min, -minRandomness: [default=False]min-randomness(use 000...)\n-max, -maxRandomness: [default=False]max-randomness(use ZZZ...)\n```\n\nThis CLI tool is powered by [ConsoleAppFramework](https://github.com/Cysharp/ConsoleAppFramework/).\n\nIntegrate\n---\n**System.Text.Json**\n\nNuGet: [Ulid.SystemTextJson](https://www.nuget.org/packages/Ulid.SystemTextJson)\n\nYou can use custom Ulid converter - `Cysharp.Serialization.Json.UlidJsonConverter`.\n\n```csharp\nvar options = new JsonSerializerOptions()\n{\n    Converters =\n    {\n        new Cysharp.Serialization.Json.UlidJsonConverter()\n    }\n};\n\nJsonSerializer.Serialize(Ulid.NewUlid(), options);\n```\n\nIf application targetframework is `netcoreapp3.0`, converter is builtin, does not require to add `Ulid.SystemTextJson` package, and does not require use custom options.\n\n**MessagePack-CSharp**\n\nNuGet: [Ulid.MessagePack](https://www.nuget.org/packages/Ulid.MessagePack)\n\nYou can use custom Ulid formatter - `Cysharp.Serialization.MessagePack.UlidMessagePackFormatter` and resolver - `Cysharp.Serialization.MessagePack.UlidMessagePackResolver`.\n\n```csharp\nvar resolver = MessagePack.Resolvers.CompositeResolver.Create(\n    Cysharp.Serialization.MessagePack.UlidMessagePackResolver.Instance,\n    MessagePack.Resolvers.StandardResolver.Instance);\nvar options = MessagePackSerializerOptions.Standard.WithResolver(resolver);\n\nMessagePackSerializer.Serialize(Ulid.NewUlid(), options);\n```\n\nIf you want to use this custom formatter on Unity, download [UlidMessagePackFormatter.cs](https://github.com/Cysharp/Ulid/blob/master/src/Ulid.MessagePack/UlidMessagePackFormatter.cs).\n\n**Dapper**\n\nFor [Dapper](https://github.com/StackExchange/Dapper) or other ADO.NET database mapper, register custom converter from Ulid to binary or Ulid to string.\n\n```csharp\npublic class BinaryUlidHandler : TypeHandler<Ulid>\n{\n    public override Ulid Parse(object value)\n    {\n        return new Ulid((byte[])value);\n    }\n\n    public override void SetValue(IDbDataParameter parameter, Ulid value)\n    {\n        parameter.DbType = DbType.Binary;\n        parameter.Size = 16;\n        parameter.Value = value.ToByteArray();\n    }\n}\n\npublic class StringUlidHandler : TypeHandler<Ulid>\n{\n    public override Ulid Parse(object value)\n    {\n        return Ulid.Parse((string)value);\n    }\n\n    public override void SetValue(IDbDataParameter parameter, Ulid value)\n    {\n        parameter.DbType = DbType.StringFixedLength;\n        parameter.Size = 26;\n        parameter.Value = value.ToString();\n    }\n}\n\n// setup handler\nDapper.SqlMapper.AddTypeHandler(new BinaryUlidHandler());\n```\n\n**Entity Framework Core**\n\nto use in EF, create ValueConverter and bind it.\n\n```csharp\npublic class UlidToBytesConverter : ValueConverter<Ulid, byte[]>\n{\n    private static readonly ConverterMappingHints defaultHints = new ConverterMappingHints(size: 16);\n\n    public UlidToBytesConverter() : this(null)\n    {\n    }\n\n    public UlidToBytesConverter(ConverterMappingHints mappingHints = null)\n        : base(\n                convertToProviderExpression: x => x.ToByteArray(),\n                convertFromProviderExpression: x => new Ulid(x),\n                mappingHints: defaultHints.With(mappingHints))\n    {\n    }\n}\n\npublic class UlidToStringConverter : ValueConverter<Ulid, string>\n{\n    private static readonly ConverterMappingHints defaultHints = new ConverterMappingHints(size: 26);\n\n    public UlidToStringConverter() : this(null)\n    {\n    }\n\n    public UlidToStringConverter(ConverterMappingHints mappingHints = null)\n        : base(\n                convertToProviderExpression: x => x.ToString(),\n                convertFromProviderExpression: x => Ulid.Parse(x),\n                mappingHints: defaultHints.With(mappingHints))\n    {\n    }\n}\n```\n\nTo use those converters, you can either specify individual properties of entities in `OnModelCreating` method of your context:\n```csharp\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<MyEntity>()\n        .Property(e => e.MyProperty)\n        .HasConversion<UlidToStringConverter>()\n        .HasConversion<UlidToBytesConverter>();\n}\n```\n\nor use model bulk configuration for all properties of type `Ulid`. To do this, overload `ConfigureConventions` method of your context:\n\n```csharp\nprotected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)\n{\n    configurationBuilder\n        .Properties<Ulid>()\n        .HaveConversion<UlidToStringConverter>()\n        .HaveConversion<UlidToBytesConverter>();\n}\n```\n\nLicense\n---\nThis library is under the MIT License.\n"
        },
        {
          "name": "Ulid.sln",
          "type": "blob",
          "size": 7.7353515625,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 16\nVisualStudioVersion = 16.0.29613.14\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"src\", \"src\", \"{A0803F51-FC43-4216-B067-41B516965BA0}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"tests\", \"tests\", \"{8AB8257F-2CB1-4F78-9980-8E5A0F017F84}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Ulid\", \"src\\Ulid\\Ulid.csproj\", \"{E44C0355-5194-49EF-A54E-4EAC9A385622}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"TryUlid\", \"sandbox\\TryUlid\\TryUlid.csproj\", \"{9ED5BA79-E7F1-4247-9956-F3908F2F87A2}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"sandbox\", \"sandbox\", \"{F1B5C8EA-DCBF-4A5F-819A-5E394F279AF9}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"PerfBenchmark\", \"benchmark\\PerfBenchmark\\PerfBenchmark.csproj\", \"{3E24E35E-05A1-4A29-8DA3-EC3E9A636D75}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Ulid.Tests\", \"tests\\Ulid.Tests\\Ulid.Tests.csproj\", \"{7A21DCC2-C6C4-4E40-850F-281258856C4A}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \".circleci\", \".circleci\", \"{60DA2E6D-48CF-4EF1-AE2F-F581EF755F0D}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.circleci\\config.yml = .circleci\\config.yml\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Ulid.Cli\", \"src\\Ulid.Cli\\Ulid.Cli.csproj\", \"{CD41A6E5-9F68-472E-9992-922F567BDB87}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Ulid.Cli.Tests\", \"tests\\Ulid.Cli.Tests\\Ulid.Cli.Tests.csproj\", \"{3488CD90-AAEA-442A-8E2E-0639497E037F}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Ulid.SystemTextJson\", \"src\\Ulid.SystemTextJson\\Ulid.SystemTextJson.csproj\", \"{66E152B2-4828-4770-BB24-A6FED7578CFC}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Ulid.SystemTextJson.Tests\", \"tests\\Ulid.SystemTextJson.Tests\\Ulid.SystemTextJson.Tests.csproj\", \"{7A7716D3-2738-4C02-934B-9FFA86EFC01A}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Ulid.MessagePack\", \"src\\Ulid.MessagePack\\Ulid.MessagePack.csproj\", \"{BE35B408-0611-44C1-92B7-DF10DC178FF3}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Ulid.MessagePack.Tests\", \"tests\\Ulid.MessagePack.Tests\\Ulid.MessagePack.Tests.csproj\", \"{057D3071-FD7C-418A-8652-3A27F0E9A41E}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"docs\", \"docs\", \"{3075C489-8B76-47CE-BA7F-C856FCC56DF1}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.gitignore = .gitignore\n\t\tDirectory.Build.props = Directory.Build.props\n\t\tREADME.md = README.md\n\tEndProjectSection\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"BlazorWasm\", \"sandbox\\BlazorWasm\\BlazorWasm.csproj\", \"{B49392BF-3988-48A0-A754-99647320AD61}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{E44C0355-5194-49EF-A54E-4EAC9A385622}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{E44C0355-5194-49EF-A54E-4EAC9A385622}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{E44C0355-5194-49EF-A54E-4EAC9A385622}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{E44C0355-5194-49EF-A54E-4EAC9A385622}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{9ED5BA79-E7F1-4247-9956-F3908F2F87A2}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{9ED5BA79-E7F1-4247-9956-F3908F2F87A2}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{9ED5BA79-E7F1-4247-9956-F3908F2F87A2}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{9ED5BA79-E7F1-4247-9956-F3908F2F87A2}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{3E24E35E-05A1-4A29-8DA3-EC3E9A636D75}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{3E24E35E-05A1-4A29-8DA3-EC3E9A636D75}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{3E24E35E-05A1-4A29-8DA3-EC3E9A636D75}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{3E24E35E-05A1-4A29-8DA3-EC3E9A636D75}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{7A21DCC2-C6C4-4E40-850F-281258856C4A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{7A21DCC2-C6C4-4E40-850F-281258856C4A}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{7A21DCC2-C6C4-4E40-850F-281258856C4A}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{7A21DCC2-C6C4-4E40-850F-281258856C4A}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{CD41A6E5-9F68-472E-9992-922F567BDB87}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{CD41A6E5-9F68-472E-9992-922F567BDB87}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{CD41A6E5-9F68-472E-9992-922F567BDB87}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{CD41A6E5-9F68-472E-9992-922F567BDB87}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{3488CD90-AAEA-442A-8E2E-0639497E037F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{3488CD90-AAEA-442A-8E2E-0639497E037F}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{3488CD90-AAEA-442A-8E2E-0639497E037F}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{3488CD90-AAEA-442A-8E2E-0639497E037F}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{66E152B2-4828-4770-BB24-A6FED7578CFC}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{66E152B2-4828-4770-BB24-A6FED7578CFC}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{66E152B2-4828-4770-BB24-A6FED7578CFC}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{66E152B2-4828-4770-BB24-A6FED7578CFC}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{7A7716D3-2738-4C02-934B-9FFA86EFC01A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{7A7716D3-2738-4C02-934B-9FFA86EFC01A}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{7A7716D3-2738-4C02-934B-9FFA86EFC01A}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{7A7716D3-2738-4C02-934B-9FFA86EFC01A}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{BE35B408-0611-44C1-92B7-DF10DC178FF3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{BE35B408-0611-44C1-92B7-DF10DC178FF3}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{BE35B408-0611-44C1-92B7-DF10DC178FF3}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{BE35B408-0611-44C1-92B7-DF10DC178FF3}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{057D3071-FD7C-418A-8652-3A27F0E9A41E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{057D3071-FD7C-418A-8652-3A27F0E9A41E}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{057D3071-FD7C-418A-8652-3A27F0E9A41E}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{057D3071-FD7C-418A-8652-3A27F0E9A41E}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{B49392BF-3988-48A0-A754-99647320AD61}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{B49392BF-3988-48A0-A754-99647320AD61}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{B49392BF-3988-48A0-A754-99647320AD61}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{B49392BF-3988-48A0-A754-99647320AD61}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{E44C0355-5194-49EF-A54E-4EAC9A385622} = {A0803F51-FC43-4216-B067-41B516965BA0}\n\t\t{9ED5BA79-E7F1-4247-9956-F3908F2F87A2} = {F1B5C8EA-DCBF-4A5F-819A-5E394F279AF9}\n\t\t{3E24E35E-05A1-4A29-8DA3-EC3E9A636D75} = {F1B5C8EA-DCBF-4A5F-819A-5E394F279AF9}\n\t\t{7A21DCC2-C6C4-4E40-850F-281258856C4A} = {8AB8257F-2CB1-4F78-9980-8E5A0F017F84}\n\t\t{CD41A6E5-9F68-472E-9992-922F567BDB87} = {A0803F51-FC43-4216-B067-41B516965BA0}\n\t\t{3488CD90-AAEA-442A-8E2E-0639497E037F} = {8AB8257F-2CB1-4F78-9980-8E5A0F017F84}\n\t\t{66E152B2-4828-4770-BB24-A6FED7578CFC} = {A0803F51-FC43-4216-B067-41B516965BA0}\n\t\t{7A7716D3-2738-4C02-934B-9FFA86EFC01A} = {8AB8257F-2CB1-4F78-9980-8E5A0F017F84}\n\t\t{BE35B408-0611-44C1-92B7-DF10DC178FF3} = {A0803F51-FC43-4216-B067-41B516965BA0}\n\t\t{057D3071-FD7C-418A-8652-3A27F0E9A41E} = {8AB8257F-2CB1-4F78-9980-8E5A0F017F84}\n\t\t{B49392BF-3988-48A0-A754-99647320AD61} = {F1B5C8EA-DCBF-4A5F-819A-5E394F279AF9}\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {2E82BF37-8451-4819-BEF6-F9D9A2B48901}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "sandbox",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}