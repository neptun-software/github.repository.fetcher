{
  "metadata": {
    "timestamp": 1736711069545,
    "page": 845,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "PixiEditor/PixiEditor",
      "stars": 1472,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 5.5146484375,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n**/Properties/launchSettings.json\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n.packages\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/*\n!.axoCover/settings.json\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/[Pp]ackages/*\n# except build/, which is used as an MSBuild target.\n!**/[Pp]ackages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/[Pp]ackages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk \n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output \nASALocalRun/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder \n.mfractor/\n\n.vscode/\n\nBuilds/\nInstaller/Assets\n\nGitIgnore\n\nCache/"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2900390625,
          "content": "[submodule \"src/PixiDocks\"]\n\tpath = src/PixiDocks\n\turl = https://github.com/PixiEditor/PixiDocks.git\n[submodule \"src/PixiParser\"]\n\tpath = src/PixiParser\n\turl = https://github.com/PixiEditor/PixiParser.git\n[submodule \"src/Drawie\"]\n\tpath = src/Drawie\n\turl = https://github.com/PixiEditor/Drawie.git\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.06640625,
          "content": "# Contributing\n\nHey! Thanks for being interested in the project! It means a lot. But, before contributing please read this guide :) \n\nWhen contributing to this repository, please first discuss the change you wish to make via issue,\nemail, or any other method with the owners of this repository before making a change. \n\n## Issues\n\nIf you want to report a bug, follow the steps below, if you want to request a feature, check [this](https://github.com/flabbet/PixiEditor/blob/master/.github/ISSUE_TEMPLATE/feature_request.md)\n\n* First of all, check if the issue is on the [list](https://github.com/flabbet/PixiEditor/issues) and/or [board](https://github.com/flabbet/PixiEditor/projects), if yes, upvote it.\n\n* If not, report an issue [here](https://github.com/flabbet/PixiEditor/issues) while following these guidelines:\n 1. Keep the title short and straightforward.\n 2. Describe the issue as detailed as possible\n 3. Include screenshots if you can.\n\n ## Pull Requests\n\n Before submitting a pull request, read [this](https://github.com/flabbet/PixiEditor/blob/master/PULL_REQUEST_TEMPLATE.md)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 7.197265625,
          "content": "GNU LESSER GENERAL PUBLIC LICENSE\nVersion 3, 29 June 2007\n\nCopyright © 2007 Free Software Foundation, Inc. <https://fsf.org/>\n\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\nThis version of the GNU Lesser General Public License incorporates the terms and conditions of version 3 of the GNU General Public License, supplemented by the additional permissions listed below.\n\n0. Additional Definitions.\nAs used herein, “this License” refers to version 3 of the GNU Lesser General Public License, and the “GNU GPL” refers to version 3 of the GNU General Public License.\n\n“The Library” refers to a covered work governed by this License, other than an Application or a Combined Work as defined below.\n\nAn “Application” is any work that makes use of an interface provided by the Library, but which is not otherwise based on the Library. Defining a subclass of a class defined by the Library is deemed a mode of using an interface provided by the Library.\n\nA “Combined Work” is a work produced by combining or linking an Application with the Library. The particular version of the Library with which the Combined Work was made is also called the “Linked Version”.\n\nThe “Minimal Corresponding Source” for a Combined Work means the Corresponding Source for the Combined Work, excluding any source code for portions of the Combined Work that, considered in isolation, are based on the Application, and not on the Linked Version.\n\nThe “Corresponding Application Code” for a Combined Work means the object code and/or source code for the Application, including any data and utility programs needed for reproducing the Combined Work from the Application, but excluding the System Libraries of the Combined Work.\n\n1. Exception to Section 3 of the GNU GPL.\nYou may convey a covered work under sections 3 and 4 of this License without being bound by section 3 of the GNU GPL.\n\n2. Conveying Modified Versions.\nIf you modify a copy of the Library, and, in your modifications, a facility refers to a function or data to be supplied by an Application that uses the facility (other than as an argument passed when the facility is invoked), then you may convey a copy of the modified version:\n\na) under this License, provided that you make a good faith effort to ensure that, in the event an Application does not supply the function or data, the facility still operates, and performs whatever part of its purpose remains meaningful, or\nb) under the GNU GPL, with none of the additional permissions of this License applicable to that copy.\n3. Object Code Incorporating Material from Library Header Files.\nThe object code form of an Application may incorporate material from a header file that is part of the Library. You may convey such object code under terms of your choice, provided that, if the incorporated material is not limited to numerical parameters, data structure layouts and accessors, or small macros, inline functions and templates (ten or fewer lines in length), you do both of the following:\n\na) Give prominent notice with each copy of the object code that the Library is used in it and that the Library and its use are covered by this License.\nb) Accompany the object code with a copy of the GNU GPL and this license document.\n4. Combined Works.\nYou may convey a Combined Work under terms of your choice that, taken together, effectively do not restrict modification of the portions of the Library contained in the Combined Work and reverse engineering for debugging such modifications, if you also do each of the following:\n\na) Give prominent notice with each copy of the Combined Work that the Library is used in it and that the Library and its use are covered by this License.\nb) Accompany the Combined Work with a copy of the GNU GPL and this license document.\nc) For a Combined Work that displays copyright notices during execution, include the copyright notice for the Library among these notices, as well as a reference directing the user to the copies of the GNU GPL and this license document.\nd) Do one of the following:\n0) Convey the Minimal Corresponding Source under the terms of this License, and the Corresponding Application Code in a form suitable for, and under terms that permit, the user to recombine or relink the Application with a modified version of the Linked Version to produce a modified Combined Work, in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source.\n1) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (a) uses at run time a copy of the Library already present on the user's computer system, and (b) will operate properly with a modified version of the Library that is interface-compatible with the Linked Version.\ne) Provide Installation Information, but only if you would otherwise be required to provide such information under section 6 of the GNU GPL, and only to the extent that such information is necessary to install and execute a modified version of the Combined Work produced by recombining or relinking the Application with a modified version of the Linked Version. (If you use option 4d0, the Installation Information must accompany the Minimal Corresponding Source and Corresponding Application Code. If you use option 4d1, you must provide the Installation Information in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source.)\n5. Combined Libraries.\nYou may place library facilities that are a work based on the Library side by side in a single library together with other library facilities that are not Applications and are not covered by this License, and convey such a combined library under terms of your choice, if you do both of the following:\n\na) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities, conveyed under the terms of this License.\nb) Give prominent notice with the combined library that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.\n6. Revised Versions of the GNU Lesser General Public License.\nThe Free Software Foundation may publish revised and/or new versions of the GNU Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Library as you received it specifies that a certain numbered version of the GNU Lesser General Public License “or any later version” applies to it, you have the option of following the terms and conditions either of that published version or of any later version published by the Free Software Foundation. If the Library as you received it does not specify a version number of the GNU Lesser General Public License, you may choose any version of the GNU Lesser General Public License ever published by the Free Software Foundation.\n\nIf the Library as you received it specifies that a proxy can decide whether future versions of the GNU Lesser General Public License shall apply, that proxy's public statement of acceptance of any version is permanent authorization for you to choose that version for the Library.\n"
        },
        {
          "name": "PULL_REQUEST_TEMPLATE.md",
          "type": "blob",
          "size": 0.2705078125,
          "content": " ## Pull Requests\n\n Pull request rules:\n\n 1. Clearly describe changes, as detailed as possible\n 2. If possible, show examples of usage\n 3. Ensure any install or build dependencies are removed before the end of the layer when doing a build.\n 4. Make sure all tests are passing.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.0634765625,
          "content": "<img src=\"https://github.com/user-attachments/assets/bd08c8bd-f610-449d-b1e2-6a990e562518\">\n\n\n**PixiEditor** is a universal 2D platform that aims to provide you with tools and features for all your 2D needs. Create beautiful sprites for your games, animations, edit images, create logos. All packed in an eye-friendly dark theme.     \n\n\n[![Release](https://img.shields.io/github/v/release/flabbet/PixiEditor)](https://github.com/flabbet/PixiEditor/releases) \n[![Downloads](https://img.shields.io/github/downloads/PixiEditor/PixiEditor/total)](https://github.com/flabbet/PixiEditor/releases)\n[![Discord Server](https://badgen.net/badge/discord/join%20chat/7289DA?icon=discord)](https://discord.gg/qSRMYmq)\n[![Subreddit subscribers](https://img.shields.io/reddit/subreddit-subscribers/PixiEditor?label=%20r%2FPixiEditor&logoColor=%23e3002d)](https://reddit.com/r/PixiEditor)\n[![Forum](https://img.shields.io/badge/PixiEditor-Forum-red?link=https%3A%2F%2Fforum.pixieditor.net%2F)](https://forum.pixieditor.net/)\n\n### Check out our website [pixieditor.net](https://pixieditor.net) and [PixiEditor Forum](https://forum.pixieditor.net/)\n\n# Contributions temporarily freezed!\n\nPixiEditor is undergoing massive changes, master branch is unstable. We will not accept any contributions at the moment, until version 2.0 comes out.\n\n## About PixiEditor\n\nPixiEditor aims to be all-in-one solution for 2D image editing, we aim to achieve this by building a solid foundation with basic functionalities, and exposing complex extension system, that would customize PixiEditor for all your needs.\n\nThe project started as a pixel-art editor, but quickly evolved into something much more complex. Version 1.0 was downloaded over 100 000 times on all platforms and received 93% positive rating on Steam.\n\n### Familiar interface\n\nHave you ever used Photoshop or Gimp? Reinventing the wheel is unnecessary, we wanted users to get familiar with the tool quickly and with ease. \n\n![](https://opencollective-production.s3.us-west-1.amazonaws.com/account-long-description/d2e269a7-8ded-4e0a-a723-c014730dba1c/PixiEditor_6OoxS5PGVD.png)\n\n### Toolsets for any scenario\n\nPixiEditor 2.0 comes by default with multiple toolsets: \n- Pixel art - it contains tool suited for pixel-perfect scenarios\n- Painting - Basic painting tools, soft brushes, anti aliased shapes\n- Vector - Shapes and paths for creating vectors\n\nAll toolsets can be used on one canvas, mix vector with raster. Export to png, jpg, svg, gif, mp4 and more!\n\n![](https://github.com/user-attachments/assets/605c901a-24aa-4c91-9ef9-0fa44878b614)\n\n### Animations\n\nVersion 2.0 comes with Timeline and animation capabilities. You can create frame by frame animations or use nodes to animate your custom shaders.\nKey frame animations with vectors are planned.\n\n![PixiEditor_YdWFRnYxfb](https://github.com/user-attachments/assets/8fba0c6c-35c8-4ccb-9d69-d6beaff5d97f)\n\n### Nodes\n\nNode render system is what powers such extensive capabilities. All layers, effects, layer structure are nodes or a result of node connections. PixiEditor exposes node graph for every document, so you are free to customize your image however you want and create procedural art/animations!\n\nHere are some examples of what you can do with custom nodes https://pixieditor.net/blog/2024/08/16/devlog7#madeinpixieditor20\n\n## Installation - PixiEditor 2.0\n\nCurrently version 2.0 is in open beta, follow this guide to install it https://pixieditor.net/docs/open-beta\n\n## Installation PixiEditor 1.0 - Pixel Art Editor\n\n<a href='//www.microsoft.com/store/apps/9NDDRHS8PBRN?cid=storebadge&ocid=badge'><img src='https://developer.microsoft.com/store/badges/images/English_get-it-from-MS.png' alt='Microsoft Store badge' width=\"184\"/></a>\n\nGet it on Steam now!\n\n[![Get PixiEditor on Steam](https://user-images.githubusercontent.com/121322/228988640-32fe5bd3-9dd0-4f3b-a8f2-f744bd9b50b5.png)](https://store.steampowered.com/app/2218560/PixiEditor__Pixel_Art_Editor?utm_source=GitHub)\n\n**Or**\n\nFollow these instructions to get PixiEditor working on your machine.\n\n1. Download the zipped installer from our [official website](https://pixieditor.net/download)\n2. Extract the installer from the archive\n3. Launch it\n4. Follow the steps in the installer to finish the installation\n\n## Featured content\n\n### PixiEditor 1.0 Trailer\n\n[![Trailer](https://img.youtube.com/vi/UK8HnrAQhCo/0.jpg)](https://www.youtube.com/watch?v=UK8HnrAQhCo)\n\n### Pixel Art Timelapse - \"Bog Landscape\" | PixiEditor\n\n[![Landscape timelapse](https://img.youtube.com/vi/bzC-wy6HCB8/0.jpg)](https://www.youtube.com/watch?v=bzC-wy6HCB8)\n\n### Gallery\n\nCheck out some pixel arts made with PixiEditor [here](https://github.com/PixiEditor/PixiEditor/wiki/Gallery).\n\n\n## Support\n\nStruggling with something? You can find support in a few places:\n\n* Check out [documentation](https://pixieditor.net/docs)\n\n* Ask on [Discord](https://discord.gg/qSRMYmq)\n* Check out [Forum](https://forum.pixieditor.net)\n* Open new [Issue](https://github.com/flabbet/PixiEditor/issues)\n* [Get help](https://pixieditor.net/help)\n\n\n## Building from source\n\n### Software Requirements\n\n* .NET 8 SDK\n* [wasi-sdk](https://github.com/WebAssembly/wasi-sdk) - PixiEditor uses WASI modules for extensions\n\n### Instructions\n\n1. Clone Repository with nested submodules\n\n`git clone --recurse-submodules -j8 https://github.com/PixiEditor/PixiEditor.git`\n\nor if cloned already, init submodules with\n\n```\ncd PixiEditor\n```\n```\ngit submodule update --init --recursive\n```\n\n2. Download [Wasi-sdk](https://github.com/WebAssembly/wasi-sdk/releases) release for your system\n3. Extract downloaded sdk \n4. Set `WASI_SDK_PATH` enviroment variable to extracted directory\n5. Run \n```\ndotnet workload install wasi-experimental\n```\n\n7. Open PixiEditor/src/PixiEditor.sln in Visual Studio or other IDE of your choice\n\n8. Build solution and run PixiEditor.Desktop project\n\n## Contributing \n\nPixiEditor is undergoing massive changes, master branch is unstable. We will not accept any contributions at the moment, until version 2.0 comes out.\n\n## License\n\nThis project is licensed under the LGPLv3 License - see the [LICENSE.md](https://github.com/flabbet/PixiEditor/blob/master/LICENSE) - file for details\n"
        },
        {
          "name": "Screenshot.png",
          "type": "blob",
          "size": 114.5166015625,
          "content": null
        },
        {
          "name": "Third Party Licenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "assemblyVerReader.ps1",
          "type": "blob",
          "size": 0.259765625,
          "content": "$assemblyInfoPath = \"src\\PixiEditor\\Properties\\AssemblyInfo.cs\"\n\n$contents = [System.IO.File]::ReadAllText($assemblyInfoPath)\n\n$versionString = [RegEx]::Match($contents,\"(?:\\d+\\.\\d+\\.\\d+\\.\\d+)\")\nWrite-Host \"##vso[task.setvariable variable=TagVersion;]$versionString\""
        },
        {
          "name": "incompatible.json",
          "type": "blob",
          "size": 0.34375,
          "content": "[\"0.1.3.0\", \"0.1.3.1\", \"0.1.3.2\", \"0.1.3.3\", \"0.1.3.4\", \"0.1.3.5\", \"0.1.3.6\", \"0.1.4.0\", \"0.1.5.0\", \"0.1.6.0\", \"0.1.7.0\", \"0.1.8.0\", \"0.1.9.0\", \"0.1.9.1\", \"0.1.9.2\", \"1.0.0.0\", \"1.0.0.1\", \"1.0.1.0\", \"1.1.0.0\", \"1.1.3.0\", \"1.2.0.0\", \"1.2.1.0\", \"1.2.1.3\", \"1.2.1.4\", \"1.2.2.0\", \"1.2.2.1\", \"1.2.3.0\", \"1.2.3.1\", \"1.2.3.2\", \"1.2.4.0\", \"1.2.4.1\", \"1.2.5.0\"]"
        },
        {
          "name": "pipelines",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "windows-x64-release-dev.yml",
          "type": "blob",
          "size": 4.9990234375,
          "content": "# .NET Desktop\n# Build and run tests for .NET Desktop or Windows classic desktop solutions.\n# Add steps that publish symbols, save build artifacts, and more:\n# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net\n\ntrigger:\n- development\npr: none\n\npool:\n  vmImage: 'windows-latest'\n\nvariables:\n- group: Release Secrets\n- name: solution \n  value: '**/*.sln'\n- name: archNumber\n  value: '64'\n- name: architecture\n  value: 'x$(archNumber)'\n- name: buildPlatform \n  value: 'win-$(architecture)'\n- name: buildConfiguration\n  value: 'DevRelease'\n- name: wasiVer\n  value: 'wasi-sdk-24.0-$(wasi-arch)-windows'\n- name: wasiUrl\n  value: 'https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-24/$(wasiVer).tar.gz'\n\nsteps:\n\n- task: UseDotNet@2\n  inputs:\n    packageType: 'sdk'\n    version: '8.x'\n\n- task: CmdLine@2\n  displayName: 'Download WASI SDK'\n  inputs:\n    script: |\n      curl -L -o $(wasiVer).tar.gz $(wasiUrl)\n\n- task: CmdLine@2\n  displayName: 'Unpack WASI SDK'\n  inputs:\n    script: |\n      tar -xzf $(wasiVer).tar.gz\n      echo \"Contents of directory after extraction:\"\n      dir $(wasiVer)\n\n- task: PowerShell@2\n  displayName: 'Set Environment Path for WASI SDK'\n  inputs:\n    targetType: 'inline'\n    script: |\n      $env:WASI_SDK_PATH = \"$(Get-Location)\\$(wasiVer)\"\n      Write-Host \"##vso[task.setvariable variable=WASI_SDK_PATH]$env:WASI_SDK_PATH\"\n\n- task: PowerShell@2\n  displayName: 'Verify Environment Path'\n  inputs:\n    targetType: 'inline'\n    script: |\n      Write-Host \"Environment path set to: $env:WASI_SDK_PATH\"\n\n\n- task: NuGetToolInstaller@1\n\n- task: DotNetCoreCLI@2\n  displayName: Install wasi-wasm\n  inputs:\n    command: 'custom'\n    custom: 'workload'\n    arguments: 'install wasi-experimental'\n\n- task: DotNetCoreCLI@2\n  displayName: Install wasm-tools\n  inputs:\n    command: 'custom'\n    custom: 'workload'\n    arguments: 'install wasm-tools'\n\n- task: NuGetCommand@2\n  displayName: 'Restore solution'\n  inputs:\n    restoreSolution: '$(solution)'\n\n- task: DotNetCoreCLI@2\n  displayName: \"Build PixiEditor Solution\"\n  inputs:\n    command: 'build'\n    projects: 'src/PixiEditor'\n    arguments: '-r \"$(buildPlatform)\" -c $(buildConfiguration)'\n\n- task: DotNetCoreCLI@2\n  displayName: \"Build release PixiEditor.UpdateInstaller\"\n  inputs:\n    command: 'publish'\n    publishWebProjects: false\n    projects: '**/PixiEditor.UpdateInstaller.Exe.csproj'\n    arguments: '-o \"UpdateInstaller\" -r \"$(buildPlatform)\" --self-contained=false -p:PublishSingleFile=true -c $(buildConfiguration)'\n    zipAfterPublish: false\n\n\n- task: PowerShell@2\n  displayName: \"Set tag version\"\n  inputs:\n    filePath: 'assemblyVerReader.ps1'\n\n- task: PowerShell@2\n  displayName: Publish PixiEditor\n  inputs:\n    filePath: 'src/PixiEditor.Builder/build.ps1'\n    arguments: '--project-path \"$(System.DefaultWorkingDirectory)\\src\\PixiEditor.Desktop\" --build-configuration \"$(buildConfiguration)\" --runtime \"$(buildPlatform)\" -o \"$(System.DefaultWorkingDirectory)\\Builds\\PixiEditor-$(architecture)-light\\PixiEditor\" --analytics-url \"https://api.pixieditor.net/analytics/\" --extension-projects \"$(System.DefaultWorkingDirectory)\\src\\PixiEditor.Beta\" --crash-report-webhook-url \"$(crash-webhook-url)\"'\n    workingDirectory: 'src/PixiEditor.Builder'\n\n- task: ArchiveFiles@2\n  inputs:\n    rootFolderOrFile: 'Builds\\PixiEditor-$(architecture)-light'\n    includeRootFolder: false\n    archiveType: 'zip'\n    archiveFile: 'PixiEditor.$(TagVersion).$(architecture).zip'\n    replaceExistingArchive: true\n\n- task: PublishPipelineArtifact@1\n  displayName: \"Publish zip artifact\"\n  inputs:\n    targetPath: '$(System.DefaultWorkingDirectory)\\PixiEditor.$(TagVersion).$(architecture).zip'\n    artifact: 'PixiEditor.$(TagVersion).$(architecture).zip'\n    publishLocation: 'pipeline'\n\n- task: CopyFiles@2\n  displayName: \"Copy updater to PixiEditor target dir\"\n  inputs:\n    SourceFolder: 'UpdateInstaller'\n    Contents: '**'\n    TargetFolder: 'Builds/PixiEditor-$(architecture)-light/PixiEditor'\n    flattenFolders: true\n\n- task: PowerShell@2\n  displayName: \"Compile installer\"\n  inputs:\n    targetType: 'inline'\n    script: '& \"$env:userprofile\\.nuget\\packages\\tools.innosetup\\6.3.1\\tools\\ISCC.exe\" src\\Installer\\installer-setup-$(architecture)-light.iss'\n\n- task: PublishPipelineArtifact@1\n  displayName: \"Publish artifact\"\n  inputs:\n    targetPath: 'src/Installer/Assets/PixiEditor-$(architecture)-light/'\n    artifact: 'PixiEditor-setup-$(architecture).exe'\n    publishLocation: 'pipeline'\n\n- task: ArchiveFiles@2\n  displayName: \"Create zipped installer\"\n  inputs:\n    rootFolderOrFile: 'src/Installer/Assets/PixiEditor-$(architecture)-light'\n    includeRootFolder: false\n    archiveType: 'zip'\n    archiveFile: '$(Build.ArtifactStagingDirectory)/PixiEditor-$(TagVersion)-setup$(archNumber).zip'\n    replaceExistingArchive: true\n\n- task: PublishPipelineArtifact@1\n  displayName: \"Publish installer zip artifact\"\n  inputs:\n    targetPath: '$(Build.ArtifactStagingDirectory)/PixiEditor-$(TagVersion)-setup$(archNumber).zip'\n    artifact: 'PixiEditor-$(TagVersion)-setup$(archNumber).zip'\n    publishLocation: 'pipeline'"
        },
        {
          "name": "windows-x64-release.yml",
          "type": "blob",
          "size": 4.9169921875,
          "content": "# .NET Desktop\n# Build and run tests for .NET Desktop or Windows classic desktop solutions.\n# Add steps that publish symbols, save build artifacts, and more:\n# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net\n\ntrigger:\n- release\npr: none\n\npool:\n  vmImage: 'windows-latest'\n\nvariables:\n- group: Release Secrets\n- name: solution \n  value: '**/*.sln'\n- name: archNumber\n  value: '64'\n- name: architecture\n  value: 'x$(archNumber)'\n- name: buildPlatform \n  value: 'win-$(architecture)'\n- name: buildConfiguration\n  value: 'Release'\n- name: wasiVer\n  value: 'wasi-sdk-24.0-$(wasi-arch)-windows'\n- name: wasiUrl\n  value: 'https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-24/$(wasiVer).tar.gz'\n\nsteps:\n\n- task: UseDotNet@2\n  inputs:\n    packageType: 'sdk'\n    version: '8.x'\n\n- task: CmdLine@2\n  displayName: 'Download WASI SDK'\n  inputs:\n    script: |\n      curl -L -o $(wasiVer).tar.gz $(wasiUrl)\n\n- task: CmdLine@2\n  displayName: 'Unpack WASI SDK'\n  inputs:\n    script: |\n      tar -xzf $(wasiVer).tar.gz\n      echo \"Contents of directory after extraction:\"\n      dir $(wasiVer)\n\n- task: PowerShell@2\n  displayName: 'Set Environment Path for WASI SDK'\n  inputs:\n    targetType: 'inline'\n    script: |\n      $env:WASI_SDK_PATH = \"$(Get-Location)\\$(wasiVer)\"\n      Write-Host \"##vso[task.setvariable variable=WASI_SDK_PATH]$env:WASI_SDK_PATH\"\n\n- task: PowerShell@2\n  displayName: 'Verify Environment Path'\n  inputs:\n    targetType: 'inline'\n    script: |\n      Write-Host \"Environment path set to: $env:WASI_SDK_PATH\"\n\n\n- task: NuGetToolInstaller@1\n\n- task: DotNetCoreCLI@2\n  displayName: Install wasi-wasm\n  inputs:\n    command: 'custom'\n    custom: 'workload'\n    arguments: 'install wasi-experimental'\n\n- task: DotNetCoreCLI@2\n  displayName: Install wasm-tools\n  inputs:\n    command: 'custom'\n    custom: 'workload'\n    arguments: 'install wasm-tools'\n\n- task: NuGetCommand@2\n  displayName: 'Restore solution'\n  inputs:\n    restoreSolution: '$(solution)'\n\n- task: DotNetCoreCLI@2\n  displayName: \"Build PixiEditor Solution\"\n  inputs:\n    command: 'build'\n    projects: 'src/PixiEditor'\n    arguments: '-r \"$(buildPlatform)\" -c $(buildConfiguration)'\n\n- task: DotNetCoreCLI@2\n  displayName: \"Build release PixiEditor.UpdateInstaller\"\n  inputs:\n    command: 'publish'\n    publishWebProjects: false\n    projects: '**/PixiEditor.UpdateInstaller.Exe.csproj'\n    arguments: '-o \"UpdateInstaller\" -r \"$(buildPlatform)\" --self-contained=false -p:PublishSingleFile=true -c $(buildConfiguration)'\n    zipAfterPublish: false\n\n\n- task: PowerShell@2\n  displayName: \"Set tag version\"\n  inputs:\n    filePath: 'assemblyVerReader.ps1'\n\n- task: PowerShell@2\n  displayName: Publish PixiEditor\n  inputs:\n    filePath: 'src/PixiEditor.Builder/build.ps1'\n    arguments: '--project-path \"$(System.DefaultWorkingDirectory)\\src\\PixiEditor.Desktop\" --build-configuration \"$(buildConfiguration)\" --analytics-url \"https://api.pixieditor.net/analytics/\" --runtime \"$(buildPlatform)\" -o \"$(System.DefaultWorkingDirectory)\\Builds\\PixiEditor-$(architecture)-light\\PixiEditor\" --crash-report-webhook-url \"$(crash-webhook-url)\"'\n    workingDirectory: 'src/PixiEditor.Builder'\n\n- task: ArchiveFiles@2\n  inputs:\n    rootFolderOrFile: 'Builds\\PixiEditor-$(architecture)-light'\n    includeRootFolder: false\n    archiveType: 'zip'\n    archiveFile: 'PixiEditor.$(TagVersion).$(architecture).zip'\n    replaceExistingArchive: true\n\n- task: PublishPipelineArtifact@1\n  displayName: \"Publish zip artifact\"\n  inputs:\n    targetPath: '$(System.DefaultWorkingDirectory)\\PixiEditor.$(TagVersion).$(architecture).zip'\n    artifact: 'PixiEditor.$(TagVersion).$(architecture).zip'\n    publishLocation: 'pipeline'\n\n- task: CopyFiles@2\n  displayName: \"Copy updater to PixiEditor target dir\"\n  inputs:\n    SourceFolder: 'UpdateInstaller'\n    Contents: '**'\n    TargetFolder: 'Builds/PixiEditor-$(architecture)-light/PixiEditor'\n    flattenFolders: true\n\n- task: PowerShell@2\n  displayName: \"Compile installer\"\n  inputs:\n    targetType: 'inline'\n    script: '& \"$env:userprofile\\.nuget\\packages\\tools.innosetup\\6.3.1\\tools\\ISCC.exe\" src\\Installer\\installer-setup-$(architecture)-light.iss'\n\n- task: PublishPipelineArtifact@1\n  displayName: \"Publish artifact\"\n  inputs:\n    targetPath: 'src/Installer/Assets/PixiEditor-$(architecture)-light/'\n    artifact: 'PixiEditor-setup-$(architecture).exe'\n    publishLocation: 'pipeline'\n\n- task: ArchiveFiles@2\n  displayName: \"Create zipped installer\"\n  inputs:\n    rootFolderOrFile: 'src/Installer/Assets/PixiEditor-$(architecture)-light'\n    includeRootFolder: false\n    archiveType: 'zip'\n    archiveFile: '$(Build.ArtifactStagingDirectory)/PixiEditor-$(TagVersion)-setup$(archNumber).zip'\n    replaceExistingArchive: true\n\n- task: PublishPipelineArtifact@1\n  displayName: \"Publish installer zip artifact\"\n  inputs:\n    targetPath: '$(Build.ArtifactStagingDirectory)/PixiEditor-$(TagVersion)-setup$(archNumber).zip'\n    artifact: 'PixiEditor-$(TagVersion)-setup$(archNumber).zip'\n    publishLocation: 'pipeline'"
        }
      ]
    }
  ]
}