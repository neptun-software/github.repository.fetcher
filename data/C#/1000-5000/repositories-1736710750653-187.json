{
  "metadata": {
    "timestamp": 1736710750653,
    "page": 187,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "scriban/scriban",
      "stars": 3277,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.6728515625,
          "content": "# EditorConfig is awesome:http://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n# All Files\n[*]\ncharset = utf-8\nend_of_line = crlf\nindent_style = space\nindent_size = 4\ninsert_final_newline = false\ntrim_trailing_whitespace = true\n\n# Solution Files\n[*.sln]\nindent_style = tab\n\n# XML Project Files\n[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]\nindent_size = 2\n\n# Configuration Files\n[*.{json,xml,yml,config,props,targets,nuspec,resx,ruleset}]\nindent_size = 2\n\n# Txt/Markdown Files\n[*.{md,txt}]\ntrim_trailing_whitespace = false\n\n# Web Files\n[*.{htm,html,js,ts,css,scss,less}]\nindent_size = 2\ninsert_final_newline = true\n\n# Bash Files\n[*.sh]\nend_of_line = lf\n\n\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1689453125,
          "content": "# Set the default behavior, in case people don't have core.autocrlf set.\n* text=auto\n\n# Declare files that will always have CRLF line endings on checkout.\n*.txt text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.4453125,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\ntmp/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n.idea/\n\n# Remove artifacts produced by dotnet-releaser\nartifacts-dotnet-releaser/\n\n# ranger-turtle's notes\nnotes.txt\n"
        },
        {
          "name": "changelog.md",
          "type": "blob",
          "size": 15.6669921875,
          "content": "# Changelog\n\n> This changelog is no longer used for newer version. Please visits https://github.com/scriban/scriban/releases\n\n## 5.4.0 (6 Feb 2022)\n- Fix async when accessing variables (#382)\n- Fix doc for object.kind (#394)\n- Fix comparison between ulong and int (#395)\n- Add a notice for html.strip that it can fail/timeout in case of malformed HTML (#406)\n- Log an error instead of an exception in an invalid syntax with for/if/else (#393)\n\n## 5.3.0 (6 Feb 2022)\n- Add support for auto-indent (#398)\n\n## 5.2.0 (6 Feb 2022)\n- Add support for specifying custom format and culture for date.parse\n\n## 5.1.0 (5 Feb 2022)\n- Fix accessing null?.property when EnableRelaxedMemberAccess == False (#401)\n- Migrate tests to net6.0 (#410)\n- Add support for anykind of expressions in when clauses (#409)\n\n## 5.0.0 (20 Oct 2021)\n- Fix scope for variable (global vs local) (#385)\n\n## 4.1.0 (7 October 2021)\n- Add `IQueryable<T>` support in `for`-loops. \n    - Parameter `offset:count` will be translated to `IQueryable<T>.Skip(count)`\n    - Parameter `reversed` will be translated to `IQueryable<T>.Reverse()`\n    - Parameter `limit:count` will be translated to `IQueryable<T>.Take(count)`\n    - [Special for loop variables](https://github.com/scriban/scriban/blob/master/doc/language.md#special-loop-variables) are supported with the exception of `rindex` and `last`\n    - Optional `LoopLimitQueryable`-property on `TemplateContext` object to control looplimit in case of `IQueryable<T>` (defaults to LoopLimit)\n\n## 4.0.2 (22 September 2021)\n- Fix issue with object instance conversion between different object types\n\n## 4.0.1 (3 June 2021)\n- Fix ternary operator with binary expression (#355)\n\n## 4.0.0 (2 June 2021)\n- Remove `IItemAccessor` and merge features into `IObjectAccessor`.\n- Add support for non-string indexers for regular dictionaries (#364)\n\n## 3.9.0 (31 May 2021)\n- Improve AST to generate a function call when a pipecall is used with a parameterless function\n- Add `TemplateContext.Reset` method to allow to cleanup the state of the `TemplateContext` \n\n## 3.8.2 (27 May 2021)\n- Fix regession with new interface `IItemAccessor` not compatible with source distribution (#363)\n\n## 3.8.1 (25 May 2021)\n- Fix regression with ternary operator (#360)\n\n## 3.8.0 (25 May 2021)\n- Add special assignment operators like `x += 1` (#353)\n- Add `blank` alias to `empty` (#347)\n- Add support for .NET indexers (#346)\n- Fix parsing of function call AST in case of a no-arg function call with a pipe (#344)\n- Add support for opposite of null-coalescing operator `?!`\n- Allow to disable safe runtime checks if `TemplateContext.LoopLimit` or `RecurseLimit` are equal to `0`\n- Fix issue with `%L` date formatter to not drop 0 milliseconds (#349)  \n- Rename ScriptBinaryOperator.Substract to Subtract\n\n## 3.7.0 (1 May 2021)\n- Add `TemplateContext.ObjectRecursionLimit` to protect against recursion limits (#340)\n- Add `string.remove_last` function (#339)\n- Fix evaluation of string (#342)\n\n## 3.6.0 (20 Mar 2021)\n- Add `math.uuid` and `math.random` functions\n\n## 3.5.0 (13 Feb 2021)\n- Add EnableDisplayInnerException for ScriptRuntimeException (#329)\n- Add support for multi-line pipes\n- Fix named arguments for include\n\n## 3.4.2 (1 Feb 2021)\n- Fix evaluation when an enumeration is returned (#324) \n- Improve returned AST when an valid part of member expression (#318)\n- Implement missing Collection interface methods for ScriptArray (#326)\n\n## 3.4.1 (23 Jan 2021)\n- Fix to ensure that attempting to render object with indexed property does not cause crash (#312)\n- Fix to ensure badly formed function declarations do not break parser\n- Fix array.each/join stopping evaluation of following statements after using a function\n- Add array.filter function (#316)\n\n## 3.4.0 (21 Jan 2021)\n- Add string.whitespace and string.empty (#307)\n- `Template.Parse` is not returning a partial AST even in case of a parser error (#308)\n- Add string.literal function\n- Add array.each function\n- Change array.join to take an optional formatting function\n\n## 3.3.3 (14 Jan 2021)\n- Fix NullReferenceException with malformed input (#293)\n- Fix include operation failing when strictVariables set (#300)\n- Fix internals of Scriban.DelegateCodeGen\n\n## 3.3.2 (30 Dec 2020)\n- Fix implicit function calls which take ScriptExpression as an argument.\n\n## 3.3.1 (30 Dec 2020)\n- Fix operator precedence issue with implicit function calls in scientific language mode.\n\n## 3.3.0 (29 Dec 2020)\n- Fix regression with include that was not propagating caller variables\n- Make TemplateContext.SetLoopVariable virtual.\n\n## 3.2.2 (24 Dec 2020)\n- Add `#nullable disable` to allow embedding Scriban as sources in a project that has enabled nullable\n\n## 3.2.1 (21 Dec 2020)\n- Fix support for Scriban package bundled with sources\n\n## 3.2.0 (21 Dec 2020)\n- Add support for Scriban package bundled with sources \n\n## 3.1.0 (21 Dec 2020)\n- Fix issue with end of statement not followed by an EOS (#275)\n- Fix parent node span does not include all its children (#280)\n- Add object.kind method and fix TemplateContext.GetTypeName for enum\n\n## 3.0.7 (15 Dec 2020)\n- Fix unary minus operator missing in Liquid\n\n## 3.0.6 (6 Dec 2020)\n- Fix subtraction in scientific mode when no whitespace was involved (e.g `1-2`) reslting in an implicit multiplication (1 * -2).\n\n## 3.0.5 (1 Dec 2020)\n- Fix indentation for nested includes when using TemplateContext.IndentWithInclude\n\n## 3.0.4 (30 Nov 2020)\n- Fix formatting/ToString of char.\n- Fix issue when using a local variable inside an object initializer.\n- Fix Template.Evaluate if used with Liquid.\n- Fix argument out of the range when using TemplateContext.IndentWithInclude.\n\n## 3.0.3 (29 Nov 2020)\n- Fix parsing of comment with a code exit when parsing mode is script only.\n\n## 3.0.2 (23 Nov 2020)\n- Fix array multiply\n\n## 3.0.1 (22 Nov 2020)\n- Fix TemplateContext.CurrentNode when current node is a value\n\n## 3.0.0 (15 Nov 2020)\n- Final release of 3.0.0\n\n## 3.0.0-alpha.9 (20 Aug 2020)\n- Fix global scope variable for function with parameters\n\n## 3.0.0-alpha.8 (7 Aug 2020)\n- Add support for custom functions with optional and variable parameters (e.g `func f(x, y = 2, z...); end;`)\n- Add support for safe dot expression (e.g `target?.member1?.sub_member1`)\n\n## 3.0.0-alpha.6 (31 Jul 2020)\n- Add support for conditional ternary expression (e.g `condition ? thenValue : elseValue`)\n\n## 3.0.0-alpha.4 (25 Jul 2020)\n- Allow to pass regular arguments to function calls in-between named arguments\n\n## 3.0.0-alpha.3 (16 Jul 2020)\n- Improve TemplateContext.GetTypeName\n- Added upcase string filter to list of built-in Liquid functions\n\n## 3.0.0-alpha.2 (6 Jul 2020)\n-  Add object.eval function.\n\n## 3.0.0-alpha.1 (18 Jun 2020)\n-  First alpha version for 3.0.0, no changelog yet.\n\n## 2.1.3 (5 Jun 2020)\n- Fix comparison != with null (#189)\n- Fix flow state after a return in a template to allow to reuse the same TemplateContext (#182)\n- Fix EnableRelaxedMemberAccess for function call (#200) \n- Fix overrides when importing an object overriding base class methods (#227)\n\n## 2.1.2 (8 Mar 2020)\n- Case insensitive member lookup in ScriptObject\n\n## 2.1.1 (06 Dec 2019)\n- Fix issue with binary operator (a && b) that was still evaluating b even if a was already true (#191)\n\n## 2.1.0 (30 Jun 2019)\n- Allow assignments only in top level expression statements (#169)\n- Fix issue with parameter less wrap function (#177)\n- Make for variable only local to the loop (#172)\n\n## 2.0.1 (11 May 2019)\n- Fix accessing object property using indexer notation when this is a .NET object (#116)\n- Fix for appearance parser errors in ASP.NET Core developer exception page Continue to fix problem described in this PR https://github.com/lunet-io/scriban/pull/109\n- Fix issue with operator || evaluating right expression even if left is true (#166)\n\n## 2.0.0 (08 Mar 2019)\n- Fix Template.ParseLiquid throws NullReferenceException #120\n- Fix ArgumentOutOfRangeException when parsing invalid escape \\u \\x in strings (#121)\n- Fix InvalidCastException when an invalid conversion is occuring (#122)\n- Fix operator precedence for unary operators (#136)\n\n## 2.0.0-alpha-006 (07 Mar 2019)\n- Improve performance of for loops\n- Reduce allocations for string functions\n- Add support for rendering exceptions\n- Add base64 functions\n- Limit the supported .NET platforms to `net35`, `net40`, `net45`, `netstandard1.1`, `netstandard1.3`, `netstandard2.0`\n\n## 2.0.0-alpha-005 (15 Jan 2019)\n- Allow binary compare to work on any objects and object.Equals for non primitives (#109)\n- Fix issue with return statement not being propagated properly when used with pipe functions (#105)\n\n## 2.0.0-alpha-004 (04 Jan 2019)\n- Fix invalid handling of pipe arguments (#103)\n- Fix issue OverflowException when using a script function with a TemplateContext and object params (#104)\n\n## 2.0.0-alpha-003 (03 Jan 2019)\n- Fix issue with endraw not being parsed correctly if there is anything after (#102)\n\n## 2.0.0-alpha-002 (01 Jan 2019)\n- Fix precedence for binary operations (#100)\n\n## 2.0.0-alpha-001 (28 Dec 2018)\n- Breaking change: Add support for async/await template evaluation\n\n## 1.2.9 (21 Dec 2018)\n- Fix ret statement not returning the value when used inside a loop\n\n## 1.2.8 (17 Dec 2018)\n- Add missing datetime formatting codes (#81)\n- Add Array.Contains functionality (#76)\n- Add range operator for longs (#92)\n- Add support for relaxed indexer access (#93)\n\n## 1.2.7 (6 Oct 2018)\n- Fix numeric literals not being parsed with the invariant culture (#74)\n- Fix string to number conversion functions to use the context culture (#78)\n\n## 1.2.6 (26 Sep 2018)\n- Fix a an exception when using a decimal in a binary operation (#72)\n\n## 1.2.5 (29 Aug 2018)\n- Fix a bug with `netstandard2.0` throwing a `NullReferenceException` when using internally reflection\n\n## 1.2.4 (21 Aug 2018)\n- Add support for passing culture info directly to `math.format` and `object.format` (#68)\n- Add support for netstandard2.0\n- Add support for github sourcelink debugging\n\n## 1.2.3 (20 July 2018)\n- Add support for passing `MemberFilterDelegate` directly to `Template.Render` and `Template.Evaluate` (#64)\n\n## 1.2.2 (3 July 2018)\n\n- Fix `date.now` that was actually caching the value on initialization (#60)\n\n## 1.2.1 (1 June 2018)\n\n- Add `string.to_int` `string.to_long` `string.to_float` `string.to_double`. (#55)\n\n## 1.2.0 (10 Feb 2018)\n\n- Remove support for importing method instance as this is confusing and actually not supported. Update the documentation. (#44)\n\n## 1.1.1 (22 Jan 2018)\n\n- Take into account inheritance when accessing properties for auto-import .NET object (#43)\n\n## 1.1.0 (22 Jan 2018)\n\n- Fix `date.to_string` and `date.parse` to accept/return nullable DateTime and return null accordingly (#42)\n\n## 1.0.0 (24 Dec 2017)\n\n- Bump to 1.0.0\n\n## 1.0.0-beta-006 (12 Dec 2017)\n\n- Add member renamer parameter to the method `Template.Render(object, renamer)`\n\n## 1.0.0-beta-005 (03 Dec 2017)\n\n- Fix bug when importing an object to import also parent properties/fields/methods (#35)\n\n## 1.0.0-beta-004 (19 Nov 2017)\n\n- Add better exception with span if an error occured when getPath/Load a template include\n\n## 1.0.0-beta-003 (19 Nov 2017)\n\n- Add extension method IScripObject.SetValue\n\n## 1.0.0-beta-002 (13 Nov 2017)\n\n- Add support for decimal\n- Add support for nullable types for user functions\n\n## 1.0.0-beta-001 (12 Nov 2017)\n\n- Bump version from 0.16.0 to 1.0.0-beta-001\n\n## 0.16.0 (11 Nov 2017)\n\n- Work towards 1.0.0-beta\n- Change MemberRenamer to receive a MemberInfo instead\n- Change MemberFilter to receive a MemberInfo instead. Add support to setup a MemberFilter on a TemplateContext as a MemberRenamer\n- Rename `RenderContext`/`RenderOptions` to `TemplateRewriterContext`/`TemplateRewriterOptions`\n- Allow liquid parser to accept anykind of tags in tag sections and not only the defaults\n\n## 0.15.0 (09 Nov 2017)\n\n- Add changelog.md\n- Work towards 1.0.0-beta (#29)\n- Named arguments (#28)\n- Add documentation to all .NET builtin functions (59fa7c5, ece713d)\n- Generate markdown docs from .NET code for all builtin functions (c8350bb9181c8728ca6223a0e2e8e5de4aa712d4)\n- Add documentation for named arguments (da32cee)\n- Add documentation for `this` variable (96b31ff, fcd60ce)\n- Generate tests from builtin functions documentation directly (to verify that examples are actually compiling and correct) (1db628e)\n- Add documentation for `empty` variable (9884067)\n- Add documentation for `obj.empty?` (9884067)\n- Add documentation for .NET functions with object `params` (4755e5b)\n- Add documentation for `for` statements with limit, offset, reversed. (a433209)\n- Add documentation for `tablerow` statements with limit, offset, reversed. (5f7274e)\n- Add documentation about `for.changed` and `for.rindex` variables (ea3c5d9)\n- Add documentation for `when`/`case` (b150a5d)\n- Add documentation for liquid support (d88a931)\n\n## 0.14.0 (07 Nov 2017)\n\n- Add support for named arguments to function calls (#28)\n- Update all builtin functions to use proper argument names (for named arguments)\n- Start to add markdown documentation to functions directly into .NET code (to extract them later)\n\n## 0.13.0 (07 Nov 2017)\n\n- Change named parameters in scriban for `for`/`tablerow` statement to match liquid's behavior (no comma but separated by space)\n\n## 0.12.1 (06 Nov 2017)\n\n- Enable hyphenated variables (my-variable) only for liquid and convert it to scriban with the this indexer (`this[\"my-variable\"]`)\n\n## 0.12.0 (05 Nov 2017)\n\n- Improve API towards 1.0.0-beta (#29)\n- Improve tests coverage\n\n## 0.11.0 (04 Nov 2017)\n\n- Improve support for liquid\n- Add more tests and coverage\n\n## 0.10.0 (01 Nov 2017)\n\n- Add support for liquid compatible parser\n- Add support for Ast-to-text mode\n- Fix various parsing to improve compatibility with liquid templates\n- Update benchmarks\n- Add documentation\n\n## 0.9.1 (27 Oct 2017)\n\n- Add string.append, string.prepend, string.md5/sha1/sha256/hmac_sha1/hmac_sha256, html.escape, html.url_encode, html.url_escape, html.strip\n- Add documentation\n\n## 0.9.0 (25 Oct 2017)\n\n- Refactoring breaking changes. Change namespace Scriban.Model to Scriban.Syntax. Remove usage of interfaces for renamer and template loader and use delegates instead.\n- Fix a few internals in TemplateContext\n- Makes the IListAccessor behaves like IObjectAccessor with TemplateContext/SourceSpan\n- Change IScriptCustomFunction.Evaluate to IScriptCustomFunction.Invoke\n- Add static `Template.Evaluate ` method to evalaute an expression directly (#20)\n- Update documentation (runtime.md, language.md)\n- Add benchmark project\n\n## 0.7.0 (12 Oct 2017)\n\n- Add math.is_number and math.format (#6)\n- Propagate TemplateContext and Span to IScriptObject (#22)\n- Major refactoring of internals of TemplateContext and ScriptNode.  Replace ScriptDate by DateTime instead (fix for #23)\n- Allow bool comparison (#24)\n\n## 0.6.0 (16 May 2017)\n\n- Make array functions modifying an IList to instead return a modified copy of it\n- Add virtual to most ScriptArray methods\n- Make ScriptObject.IsReadOnly virtual\n\n## 0.5.0 (16 May 2017)\n\n- Breaking changes. Rename IScriptObject.IsReadOnly to CanWrite. Add IScriptObject.IsReadOnly for global object locking\n- Catch exceptions while evaluating an expression and rethrow them wrapped into a ScriptRuntimeExecption if it is not already the case.\n\n## 0.4.0 (08 May 2017)\n\n- Make ScriptObject methods virtual\n- Split namespace for Runtime to Model and Functions\n\n## 0.3.1 (04 Apr 2017)\n\n- Add support for binding variable/member access (#19)\n- Migrate to new csproj\n- Improve performance of raw statements\n- Add support for front matter\n\n## 0.3.0 (09 Mar 2017)\n\n- Add support for regex functions\n- Add support for verbatim strings using backsticks\n- Add support for default format date\n\n## 0.2.2 (02 Feb 2017)\n\n- Add support for accessing generic dictionary (#11, #15)\n\n## 0.2.1 (01 Feb 2017)\n\n- Fix string.capitalize bug returning an empty string when the input was already capitalized (#13)\n\n## 0.2.0 (27 Jun 2016)\n\n- Switch to .NETCore RTM\n\n## 0.1.0 (31 May 2016)\n\n- Initial version\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "license.txt",
          "type": "blob",
          "size": 1.287109375,
          "content": "Copyright (c) 2016-2024, Alexandre Mutel\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification\n, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this \n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, \n   this list of conditions and the following disclaimer in the documentation \n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL \nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR \nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 12.5439453125,
          "content": "# scriban [![Build Status](https://github.com/scriban/scriban/workflows/ci/badge.svg?branch=master)](https://github.com/scriban/scriban/actions) [![Coverage Status](https://coveralls.io/repos/github/scriban/scriban/badge.svg?branch=master)](https://coveralls.io/github/scriban/scriban?branch=master) [![NuGet](https://img.shields.io/nuget/v/Scriban.svg)](https://www.nuget.org/packages/Scriban/)\n\n<img align=\"right\" width=\"160px\" height=\"160px\" src=\"img/scriban.png\">\n\nScriban is a fast, powerful, safe and lightweight scripting language and engine for .NET, which was primarily developed for text templating with a compatibility mode for parsing `liquid` templates.\n\nToday, not only Scriban can be used in text templating scenarios, but also can be integrated as a **general scripting engine**: For example, Scriban is at the core of the scripting engine for [kalk](https://github.com/xoofx/kalk), a command line calculator application for developers.\n\n```C#\n// Parse a scriban template\nvar template = Template.Parse(\"Hello {{name}}!\");\nvar result = template.Render(new { Name = \"World\" }); // => \"Hello World!\" \n```\n\nParse a Liquid template using the Liquid language:\n\n```C#\n// Parse a liquid template\nvar template = Template.ParseLiquid(\"Hello {{name}}!\");\nvar result = template.Render(new { Name = \"World\" }); // => \"Hello World!\" \n```\n\nThe language is very versatile, easy to read and use, similar to [liquid](https://shopify.github.io/liquid/) templates:\n\n```C#\nvar template = Template.Parse(@\"\n<ul id='products'>\n  {{ for product in products }}\n    <li>\n      <h2>{{ product.name }}</h2>\n           Price: {{ product.price }}\n           {{ product.description | string.truncate 15 }}\n    </li>\n  {{ end }}\n</ul>\n\");\nvar result = template.Render(new { Products = this.ProductList });\n```\n\nScriban can also be used in pure scripting context without templating (`{{` and `}}`) and can help you to create your own small DSL.\n\n> **NOTICE**\n>\n> By default, Properties and methods of .NET objects are automatically exposed with lowercase and `_` names. It means that a property like `MyMethodIsNice` will be exposed as `my_method_is_nice`. This is the default convention, originally to match the behavior of liquid templates.\n> If you want to change this behavior, you need to use a [`MemberRenamer`](https://github.com/scriban/scriban/blob/master/doc/runtime.md#member-renamer) delegate\n\n## New in 3.0+\n\n- AST is now fully visitable with `ScriptVisitor`. You can now access `Parent` on any `ScriptNode` object and navigate the AST.\n  - Improve AST round-trip by preserving whitespaces around template enter`{{` and exit`}}` \n- Several new language features:\n  - Hexadecimal/binary numbers: `0x1ef` or `0b101010`\n  - Support for large integers\n  - [New parametric functions](https://github.com/scriban/scriban/blob/master/doc/language.md#72-parametric-functions): `func sub(x,y = 1, z...); ret x - y - z[0]; end`\n  - [New inline functions](https://github.com/scriban/scriban/blob/master/doc/language.md#73-inline-functions): `sub(x,y) = x - y`\n  - Optional member access with `?.` instead of regular `.` (e.g `a?.b?.c`)\n  - Conditional expressions: `cond ? a : b`\n- Separate language mode (via `ScriptLang` enum) from template/scripting parsing mode (`ScriptMode`).\n- New language parsing mode `Scientific`, in addition to default Scriban and Liquid language mode.\n- More fine-grained options on the `TemplateContext` to define scripting behaviors (`EnableRelaxedTargetAccess`, `EnableRelaxedMemberAccess`, `EnableRelaxedFunctionAccess`, `EnableRelaxedIndexerAccess`, `EnableNullIndexer`)\n- New `object.eval` and `object.eval_template` function to evaluate Scriban expressions/templates at runtime.\n- Better support for `IFormattable` objects.   \n  \n## Features\n\n- An **extensible sandbox execution model**: You have the full control about which Scripting objects (and so properties and methods) are accessible from Scriban templates.\n- Very **efficient**, **fast** parser and a **lightweight** runtime. CPU and Garbage Collector friendly.\n- Powered by a Lexer/Parser providing a **full Abstract Syntax Tree, fast, versatile and robust**, more efficient than regex based parsers.\n  - Precise source code location (path, column and line) for error reporting\n  - **Write an AST to a script textual representation**, with [`Template.ToText`](https://github.com/scriban/scriban/blob/master/doc/runtime.md#ast-to-text), allowing to manipulate scripts in memory and re-save them to the disk, useful for **roundtrip script update scenarios**\n- **Compatible with `liquid`** by using the `Template.ParseLiquid` method\n  - While the `liquid` language is less powerful than scriban, this mode allows to migrate from `liquid` to `scriban` language easily\n  - With the [AST to text](https://github.com/scriban/scriban/blob/master/doc/runtime.md#ast-to-text) mode, you can convert a `liquid` script to a scriban script using `Template.ToText` on a template parsed with `Template.ParseLiquid`\n  - As the liquid language is not strictly defined and there are in fact various versions of liquid syntax, there are restrictions while using liquid templates with scriban, see the document [liquid support in scriban](https://github.com/scriban/scriban/blob/master/doc/liquid-support.md) for more details.\n- **Extensible runtime** providing many extensibility points\n- Support for `async`/`await` evaluation of scripts (e.g `Template.RenderAsync`)\n- [Precise control of whitespace text output](https://github.com/scriban/scriban/blob/master/doc/language.md#14-whitespace-control)\n- [Full featured language](https://github.com/scriban/scriban/blob/master/doc/language.md) including `if`/`else`/`for`/`while`, [expressions](https://github.com/scriban/scriban/blob/master/doc/language.md#8-expressions) (`x = 1 + 2`), conditions... etc.\n- [Function calls and pipes](https://github.com/scriban/scriban/blob/master/doc/language.md#89-function-call-expression) (`myvar | string.capitalize`)\n  - [Custom functions](https://github.com/scriban/scriban/blob/master/doc/language.md#7-functions) directly into the language via `func` statement and allow **function pointers/delegates** via the `alias @ directive`\n  - Bind [.NET custom functions](https://github.com/scriban/scriban/blob/master/doc/runtime.md#imports-functions-from-a-net-class) from the runtime API with [many options](https://github.com/scriban/scriban/blob/master/doc/runtime.md#the-scriptobject) for interfacing with .NET objects.\n- [Complex objects](https://github.com/scriban/scriban/blob/master/doc/language.md#5-objects) (javascript/json like objects `x = {mymember: 1}`) and [arrays](https://github.com/scriban/scriban/blob/master/doc/language.md#6-arrays) (e.g `x = [1,2,3,4]`)\n- Allow to pass [a block of statements](https://github.com/scriban/scriban/blob/master/doc/language.md#98-wrap-function-arg1argn--end) to a function, typically used by the `wrap` statement\n- Several [built-in functions](https://github.com/scriban/scriban/blob/master/doc/builtins.md):\n  - [`arrays functions`](https://github.com/scriban/scriban/blob/master/doc/builtins.md#array-functions)\n  - [`date`](https://github.com/scriban/scriban/blob/master/doc/builtins.md#date-functions)\n  - [`html`](https://github.com/scriban/scriban/blob/master/doc/builtins.md#html-functions)\n  - [`maths functions`](https://github.com/scriban/scriban/blob/master/doc/builtins.md#math-functions)\n  - [`object`](https://github.com/scriban/scriban/blob/master/doc/builtins.md#object-functions)\n  - [`regex functions`](https://github.com/scriban/scriban/blob/master/doc/builtins.md#regex-functions)\n  - [`string functions`](https://github.com/scriban/scriban/blob/master/doc/builtins.md#string-functions)\n  - [`timespan`](https://github.com/scriban/scriban/blob/master/doc/builtins.md#timespan-functions)\n- [Multi-line statements](https://github.com/scriban/scriban/blob/master/doc/language.md#11-code-block) without having to embrace each line by `{{...}}`\n- [Safe parser](https://github.com/scriban/scriban/blob/master/doc/runtime.md#the-lexer-and-parser) and [safe runtime](https://github.com/scriban/scriban/blob/master/doc/runtime.md#safe-runtime), allowing you to control what objects and functions are exposed\n\n## Syntax Coloring\n\nYou can install the [Scriban Extension for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=xoofx.scriban) to get syntax coloring for scriban scripts (without HTML) and scriban html files.\n\n## Documentation\n\n* See the [Language](https://github.com/scriban/scriban/blob/master/doc/language.md) document for a description of the language syntax.\n* See the [Built-in functions](https://github.com/scriban/scriban/blob/master/doc/builtins.md) document for the list of the built-in functions.\n* See the [Runtime](https://github.com/scriban/scriban/blob/master/doc/runtime.md) document for a description of the .NET runtime API to compile and run templates.\n* See the [Liquid support](https://github.com/scriban/scriban/blob/master/doc/liquid-support.md) document for more details about the support of liquid templates.\n* See my blog post \"[Implementing a Text Templating Engine for .NET](https://xoofx.github.io/blog/2017/11/13/implementing-a-text-templating-language-and-engine-for-dotnet/)\" for some behind the scene details.\n\n## Binaries\n\nScriban is available as a NuGet package: [![NuGet](https://img.shields.io/nuget/v/Scriban.svg)](https://www.nuget.org/packages/Scriban/)\n\nCompatible with the following .NET Standard 2.0+ (**New in 3.0**)\n\nFor support for older framework (.NET 3.5, 4.0, 4.5, .NET Standard 1.1, 1.3, they are only provided in older Scriban 2.x, which is no longer supported. \n\nAlso the [Scriban.Signed](https://www.nuget.org/packages/Scriban.Signed/) NuGet package provides signed assemblies.\n\n## Source Embedding\n\nStarting with Scriban 3.2.1+, the package comes with source included so that you can internalize your usage of Scriban into your project. This can be useful in an environment where you can't easily consume NuGet references (e.g Roslyn Source Generators).\n\n> WARNING: Currently, the Scriban sources are not set as readonly, so you should not modify Scriban sources in that mode as it will modify the sources for other projects using Scriban on your machine. Use this feature at your own risks!\n\nIn order to activate this feature you need to:\n\n- Set the property `PackageScribanIncludeSource` to `true` in your project:\n  ```xml\n  <PropertyGroup>\n    <PackageScribanIncludeSource>true</PackageScribanIncludeSource>\n  </PropertyGroup>\n  ```\n- Add the `IncludeAssets=\"Build\"` to the NuGet PackageReference for Scriban:\n  ```xml\n  <ItemGroup>\n    <PackageReference Include=\"Scriban\" Version=\"3.2.1\" IncludeAssets=\"Build\"/>\n  </ItemGroup>\n  ```\n\nIf you are targeting `netstandard2.0` or `.NET Framework 4.7.2+`, in order to compile Scriban you will need these NuGet package references (that can come from a dependency that you already have):\n\n```xml\n<ItemGroup>\n    <PackageReference Include=\"Microsoft.CSharp\" Version=\"4.5.0\" />\n    <PackageReference Include=\"System.Threading.Tasks.Extensions\" Version=\"4.5.0\" />\n</ItemGroup>\n```\n\n> NOTE: In this mode, all Scriban types are marked as `internal`.\n> \n> You should see a Scriban folder and empty subfolders in your project. This is an issue with Visual Studio 2019 16.8.x (and before) and it will be fixed in VS 2019 16.9+\n\n## License\n\nThis software is released under the [BSD-Clause 2 license](https://opensource.org/licenses/BSD-2-Clause). \n\n## Related projects\n\n* [dotliquid](https://github.com/dotliquid/dotliquid): .NET port of the liquid templating engine\n* [Fluid](https://github.com/sebastienros/fluid/) .NET liquid templating engine\n* [Nustache](https://github.com/jdiamond/Nustache): Logic-less templates for .NET\n* [Handlebars.Net](https://github.com/rexm/Handlebars.Net): .NET port of handlebars.js\n* [Textrude](https://github.com/NeilMacMullen/Textrude): UI and CLI tools to turn CSV/JSON/YAML models into code using Scriban templates\n* [NTypewriter](https://github.com/NeVeSpl/NTypewriter): VS extension to turn C# code into documentation/TypeScript/anything using Scriban templates\n  \n## Online Demo\n\n* (https://scribanonline.azurewebsites.net/): ASP.NET Core Sample.\n\n## Sponsors\n\nSupports this project with a monthly donation and help me continue improving it. \\[[Become a sponsor](https://github.com/sponsors/xoofx)\\]\n\n[<img src=\"https://github.com/lilith.png?size=200\" width=\"64px;\" style=\"border-radius: 50%\" alt=\"lilith\"/>](https://github.com/lilith) Lilith River, author of [Imageflow Server, an easy on-demand\nimage editing, optimization, and delivery server](https://github.com/imazen/imageflow-server)\n\n## Credits\n\nAdapted logo `Puzzle` by [Andrew Doane](https://thenounproject.com/andydoane/) from the Noun Project\n\n## Author\n\nAlexandre Mutel aka [xoofx](https://xoofx.github.io).\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}