{
  "metadata": {
    "timestamp": 1736710753129,
    "page": 193,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "QianMo/X-PostProcessing-Library",
      "stars": 3228,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.44140625,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# Custom for Visual Studio\n*.cs     diff=csharp\n\n# Standard to msysgit\n*.doc\t diff=astextplain\n*.DOC\t diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot  diff=astextplain\n*.DOT  diff=astextplain\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain\n\n*.shader linguist-language=shaderlab \n*.cginc linguist-language=shaderlab"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.9970703125,
          "content": "# This .gitignore file should be placed at the root of your Unity project directory\n#\n# Get latest from https://github.com/github/gitignore/blob/master/Unity.gitignore\n#\n/[Ll]ibrary/\n/[Tt]emp/\n/[Oo]bj/\n/[Bb]uild/\n/[Bb]uilds/\n/[Ll]ogs/\n/[Mm]emoryCaptures/\n\n# Never ignore Asset meta data\n!/[Aa]ssets/**/*.meta\n\n# Uncomment this line if you wish to ignore the asset store tools plugin\n# /[Aa]ssets/AssetStoreTools*\n\n# Autogenerated Jetbrains Rider plugin\n[Aa]ssets/Plugins/Editor/JetBrains*\n\n# Visual Studio cache directory\n.vs/\n\n# Gradle cache directory\n.gradle/\n\n# Autogenerated VS/MD/Consulo solution and project files\nExportedObj/\n.consulo/\n*.csproj\n*.unityproj\n*.sln\n*.suo\n*.tmp\n*.user\n*.userprefs\n*.pidb\n*.booproj\n*.svd\n*.pdb\n*.mdb\n*.opendb\n*.VC.db\n\n# Unity3D generated meta files\n*.pidb.meta\n*.pdb.meta\n*.mdb.meta\n\n# Unity3D generated file on crash reports\nsysinfo.txt\n\n# Builds\n*.apk\n*.unitypackage\n\n# Crashlytics generated file\ncrashlytics-build.properties\n\n.vscode/settings.json\nUnityPackageManager/manifest.json\n"
        },
        {
          "name": "Assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0380859375,
          "content": "MIT License\n\nCopyright (c) 2020 浅墨\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "ProjectSettings",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.6806640625,
          "content": "\n![XPL-Title-v2.jpg](https://raw.githubusercontent.com/QianMo/X-PostProcessing-Gallery/master/Media/XPL-Title-v2.jpg)\n<p>\n<a href=\"https://github.com/QianMo/X-PostProcessing-Library/blob/master/LICENSE\">\n    <img alt=\"GitHub license\" src =\"https://img.shields.io/github/license/QianMo/X-PostProcessing-Library\" />\n</a>\n    <img alt=\"Version\" src =\"https://img.shields.io/badge/version-1.1.6-blue\" />\n<a href=\"https://github.com/QianMo/X-PostProcessing-Library/issues\">\n    <img alt=\"GitHub issues\" src=\"https://img.shields.io/github/issues/QianMo/X-PostProcessing-Library\">\n</a>\n<a href=\"https://github.com/QianMo/X-PostProcessing-Library/pulls\">\n    <img alt=\"GitHub pull requests\" src =\"https://img.shields.io/github/issues-pr/QianMo/X-PostProcessing-Library\" />\n</a>\n\n# XPL: Unity引擎的高品质后处理库\n</p>\n\nX-PostProcessing Libray，简称XPL，是针对Unity引擎的高品质开源后处理库，旨在提供业界主流的高品质后处理特效的完整解决方案。目前已完美支持Unity Post-processing Stack v2，后续也将提供对Unity引擎URP/LWRP/HDRP的兼容支持。\n\n**X-PostProcessing Library (XPL)** is a high quality post processing library for for Unity Post Processing Stack v2/LWRP/URP/HDRP\n\n\n<img src=\"https://raw.githubusercontent.com/QianMo/X-PostProcessing-Gallery/master/Media/Title/GlitchRGBSplitV5-2.gif\"  align=\"middle\" /><img src=\"https://raw.githubusercontent.com/QianMo/X-PostProcessing-Gallery/master/Media/Title/GlitchLineBlock-2.gif\" align=\"middle\" /><img src=\"https://raw.githubusercontent.com/QianMo/X-PostProcessing-Gallery/master/Media/Title/GlitchWaveJitter-2.gif\" align=\"middle\" /><img src=\"https://raw.githubusercontent.com/QianMo/X-PostProcessing-Gallery/master/Media/Title/GlitchScanLineJitter-2.gif\"  align=\"middle\" /><img src=\"https://raw.githubusercontent.com/QianMo/X-PostProcessing-Gallery/master/Media/Title/GlitchImageBlock-2.gif\"  align=\"middle\" /><img src=\"https://raw.githubusercontent.com/QianMo/X-PostProcessing-Gallery/master/Media/Title/GlitchTileJitter-2.gif\"  align=\"middle\" /><img src=\"https://raw.githubusercontent.com/QianMo/X-PostProcessing-Gallery/master/Media/Title/ColorReplace.gif\"  align=\"middle\" /><img src=\"https://raw.githubusercontent.com/QianMo/X-PostProcessing-Gallery/master/Media/Title/ColorAdjustmentContrast.gif\"  align=\"middle\" /><img src=\"https://raw.githubusercontent.com/QianMo/X-PostProcessing-Gallery/master/Media/Title/ColorAdjustmentTechnicolor.gif\"  align=\"middle\" /><img src=\"https://raw.githubusercontent.com/QianMo/X-PostProcessing-Gallery/master/Media/Title/ColorAdjustmentContrastV3.gif\"  align=\"middle\" /><img src=\"https://raw.githubusercontent.com/QianMo/X-PostProcessing-Gallery/master/Media/Title/ColorAdjustmentContrastV2.gif\"  align=\"middle\" /><img src=\"https://raw.githubusercontent.com/QianMo/X-PostProcessing-Gallery/master/Media/Title/ColorAdjustmentHue.gif\"  align=\"middle\" /><img src=\"https://raw.githubusercontent.com/QianMo/X-PostProcessing-Gallery/master/Media/Title/BokehBlur.gif\" align=\"middle\" /><img src=\"https://raw.githubusercontent.com/QianMo/X-PostProcessing-Gallery/master/Media/Title/RadialBlurV2.gif\" align=\"middle\"/><img src=\"https://raw.githubusercontent.com/QianMo/X-PostProcessing-Gallery/master/Media/Title/GaussianBlur.gif\" align=\"middle\"/><img src=\"https://raw.githubusercontent.com/QianMo/X-PostProcessing-Gallery/master/Media/Title/DirectionalBlur-3.gif\" align=\"middle\"/><img src=\"https://raw.githubusercontent.com/QianMo/X-PostProcessing-Gallery/master/Media/Title/EdgeDetectionSobel2.gif\" align=\"middle\"/><img src=\"https://raw.githubusercontent.com/QianMo/X-PostProcessing-Gallery/master/Media/Title/EdgeDetectionRoberts1.gif\" align=\"middle\"/><img src=\"https://raw.githubusercontent.com/QianMo/X-PostProcessing-Gallery/master/Media/Title/PixelizeLed.gif\" align=\"middle\"/><img src=\"https://raw.githubusercontent.com/QianMo/X-PostProcessing-Gallery/master/Media/Title/PixelizeDiamond.gif\" align=\"middle\"/><img src=\"https://raw.githubusercontent.com/QianMo/X-PostProcessing-Gallery/master/Media/Title/PixelizeLeaf.gif\" align=\"middle\"/><img src=\"https://raw.githubusercontent.com/QianMo/X-PostProcessing-Gallery/master/Media/Title/PixelizeHexagon.gif\" align=\"middle\"/><img src=\"https://raw.githubusercontent.com/QianMo/X-PostProcessing-Gallery/master/Media/Title/PixelizeQuad.gif\" align=\"middle\"/><img src=\"https://raw.githubusercontent.com/QianMo/X-PostProcessing-Gallery/master/Media/Title/PixelizeHexagonGrid.gif\" align=\"middle\"/>\n\n\n\n\n需要查看更多渲染效果图和每个特效的参数与属性，可以在下面的 [目录 ](#jump)  部分的具体后处理特效子页面中查看。\n\nFor more gallery , you can enter the specific post-processing effects sub-page in the [ Content ](#jump) section below.\n\n<br>\n\n<span id=\"jump\">\n\n # 1. 目录 | Content \n \n </span>\n\n\n- ## 1.1 图像模糊型后处理 | Blur Effects\n    - [Gaussian Blur](Assets/X-PostProcessing/Effects/GaussianBlur)\n    - [Box Blur](Assets/X-PostProcessing/Effects/BoxBlur)\n    - [Tent Blur](Assets/X-PostProcessing/Effects/TentBlur)\n    - [Kawase Blur](Assets/X-PostProcessing/Effects/KawaseBlur)\n    - [Dual Kawase Blur](Assets/X-PostProcessing/Effects/DualKawaseBlur)\n    - [Dual Gaussian Blur](Assets/X-PostProcessing/Effects/DualGaussianBlur)\n    - [Dual Box Blur](Assets/X-PostProcessing/Effects/DualBoxBlur)\n    - [Dual Tent Blur](Assets/X-PostProcessing/Effects/DualTentBlur)\n    - [Bokeh Blur](Assets/X-PostProcessing/Effects/BokehBlur)\n    - [Tilt Shift Blur](Assets/X-PostProcessing/Effects/TiltShiftBlur)\n    - [Tilt Shift Blur V2](Assets/X-PostProcessing/Effects/TiltShiftBlurV2)\n    - [Iris Blur](Assets/X-PostProcessing/Effects/IrisBlur)\n    - [Iris Blur V2](Assets/X-PostProcessing/Effects/IrisBlurV2)\n    - [Grainy Blur](Assets/X-PostProcessing/Effects/GrainyBlur)\n    - [Radial Blur](Assets/X-PostProcessing/Effects/RadialBlur)\n    - [Radial Blur V2](Assets/X-PostProcessing/Effects/RadialBlurV2)\n    - [Directional Blur](Assets/X-PostProcessing/Effects/DirectionalBlur)\n- ## 1.2 像素化型后处理 | Pixelate Effects\n    - [Pixelize Quad](Assets/X-PostProcessing/Effects/PixelizeQuad)\n    - [Pixelize Led](Assets/X-PostProcessing/Effects/PixelizeLed)\n    - [Pixelize Leaf](Assets/X-PostProcessing/Effects/PixelizeLeaf)\n    - [Pixelize Circle](Assets/X-PostProcessing/Effects/PixelizeCircle)\n    - [Pixelize Diamond](Assets/X-PostProcessing/Effects/PixelizeDiamond)\n    - [Pixelize Sector](Assets/X-PostProcessing/Effects/PixelizeSector)\n    - [Pixelize Triangle](Assets/X-PostProcessing/Effects/PixelizeTriangle)\n    - [Pixelize Hexagon](Assets/X-PostProcessing/Effects/PixelizeHexagon)\n    - [Pixelize Hexagon Grid](Assets/X-PostProcessing/Effects/PixelizeHexagonGrid)\n- ## 1.3 边缘检测型后处理 | Edge Detection Effects\n    - [Edge Detection Sobel](Assets/X-PostProcessing/Effects/EdgeDetectionSobel)\n    - [Edge Detection Sobel Neon](Assets/X-PostProcessing/Effects/EdgeDetectionSobelNeon)\n    - [Edge Detection Sobel Neon V2](Assets/X-PostProcessing/Effects/EdgeDetectionSobelNeonV2)\n    - [Edge Detection Roberts](Assets/X-PostProcessing/Effects/EdgeDetectionRoberts)\n    - [Edge Detection Roberts Neon](Assets/X-PostProcessing/Effects/EdgeDetectionRobertsNeon)\n    - [Edge Detection Roberts Neon V2](Assets/X-PostProcessing/Effects/EdgeDetectionRobertsNeonV2)\n    - [Edge Detection Scharr](Assets/X-PostProcessing/Effects/EdgeDetectionScharr)\n    - [Edge Detection Scharr Neon](Assets/X-PostProcessing/Effects/EdgeDetectionScharrNeon)\n    - [Edge Detection Scharr Neon V2](Assets/X-PostProcessing/Effects/EdgeDetectionScharrNeonV2)\n- ## 1.4 故障艺术型后处理 | Glitch Effects\n    - [Glitch Image Block](Assets/X-PostProcessing/Effects/GlitchImageBlock)\n    - [Glitch Image Block V2](Assets/X-PostProcessing/Effects/GlitchImageBlockV2)\n    - [Glitch Image Block V3](Assets/X-PostProcessing/Effects/GlitchImageBlockV3)\n    - [Glitch Image Block V4](Assets/X-PostProcessing/Effects/GlitchImageBlockV4)\n    - [Glitch Line Block](Assets/X-PostProcessing/Effects/GlitchLineBlock)\n    - [Glitch Analog Noise](Assets/X-PostProcessing/Effects/GlitchAnalogNoise)\n    - [Glitch Digital Stripe](Assets/X-PostProcessing/Effects/GlitchDigitalStripe)\n    - [Glitch RGB Split](Assets/X-PostProcessing/Effects/GlitchRGBSplit)\n    - [Glitch RGB Split V2](Assets/X-PostProcessing/Effects/GlitchRGBSplitV2)\n    - [Glitch RGB Split V3](Assets/X-PostProcessing/Effects/GlitchRGBSplitV3)\n    - [Glitch RGB Split V4](Assets/X-PostProcessing/Effects/GlitchRGBSplitV4)\n    - [Glitch RGB Split V5](Assets/X-PostProcessing/Effects/GlitchRGBSplitV5)\n    - [Glitch Scan Line Jitter](Assets/X-PostProcessing/Effects/GlitchScanLineJitter)\n    - [Glitch Screen Jump](Assets/X-PostProcessing/Effects/GlitchScreenJump)\n    - [Glitch Screen Shake](Assets/X-PostProcessing/Effects/GlitchScreenShake)\n    - [Glitch Tile Jitter](Assets/X-PostProcessing/Effects/GlitchTileJitter)\n    - [Glitch Wave Jitter](Assets/X-PostProcessing/Effects/GlitchWaveJitter)\n- ## 1.5 色彩调整型后处理 | Color Adjustment Effects\n    - [Color Adjustment Bleach Bypass](Assets/X-PostProcessing/Effects/ColorAdjustmentBleachBypass)\n    - [Color Adjustment Brightness](Assets/X-PostProcessing/Effects/ColorAdjustmentBrightness)\n    - [Color Adjustment Contrast](Assets/X-PostProcessing/Effects/ColorAdjustmentContrast)\n    - [Color Adjustment Contrast V2](Assets/X-PostProcessing/Effects/ColorAdjustmentContrastV2)\n    - [Color Adjustment Contrast V3](Assets/X-PostProcessing/Effects/ColorAdjustmentContrastV3)\n    - [Color Adjustment Hue](Assets/X-PostProcessing/Effects/ColorAdjustmentHue)\n    - [Color Adjustment Lens Filter](Assets/X-PostProcessing/Effects/ColorAdjustmentLensFilter)\n    - [Color Adjustment Saturation](Assets/X-PostProcessing/Effects/ColorAdjustmentSaturation)\n    - [Color Adjustment Technicolor](Assets/X-PostProcessing/Effects/ColorAdjustmentTechnicolor)\n    - [Color Adjustment Tint](Assets/X-PostProcessing/Effects/ColorAdjustmentTint)\n    - [Color Adjustment White Balance](Assets/X-PostProcessing/Effects/ColorAdjustmentWhiteBalance)\n    - [Color Adjustment Replace Color](Assets/X-PostProcessing/Effects/ColorReplace)\n    - [Color Adjustment Replace Color V2](Assets/X-PostProcessing/Effects/ColorReplaceV2)\n- ## 1.6 渐晕型后处理 | Vignette Effects\n    - [Aurora Vignette](Assets/X-PostProcessing/Effects/AuroraVignette)\n    - [Rapid Vignette](Assets/X-PostProcessing/Effects/RapidVignette)\n    - [Rapid Vignette V2](Assets/X-PostProcessing/Effects/RapidVignetteV2)\n    - [Rapid Old TV Vignette](Assets/X-PostProcessing/Effects/RapidOldTVVignette)\n    - [Rapid Old TV Vignette V2](Assets/X-PostProcessing/Effects/RapidOldTVVignetteV2)\n- ## 1.7 图像处理型后处理 | Image Processing Effects\n    - [Sharpen V1](Assets/X-PostProcessing/Effects/SharpenV1)\n    - [Sharpen V2](Assets/X-PostProcessing/Effects/SharpenV2)\n    - [Sharpen V3](Assets/X-PostProcessing/Effects/SharpenV3)\n\n\n- Stylized Effects\n- Painting Effects\n- ...\n\nMore effects and LWRP/URP/HDRP version will arrive soon.\n\n\n\n<br>\n\n\n# 2. 安装 | Installation\n\n有两种主要的安装X-PostProcessing Library的方法：\n\n- 【方法一】 克隆或下载此Repo，并直接使用Unity打开。建议可先从已设置好后处理的示例场景 [Assets/Example/ExampleScene.unity](Assets/Example/ExampleScene.unity) 开始。\n\n- 【方法二】 将[X-PostProcessing](Assets/X-PostProcessing) 文件夹放置在项目Assets路径下的任一位置，并确保Post Processing Stack v2也位于项目中。\n\nYou have two main ways to install X-PostProcessing Library :\n\n- **[Method 1]**   Clone or download this repository , open with Unity Engine Editor and enjoy. It is recommended to start with the example scene [Assets/Example/ExampleScene.unity](Assets/Example/ExampleScene.unity) .\n- **[Method 2]**  Place the [X-PostProcessing](Assets/X-PostProcessing) folder anywhere in your project, make sure that Post Processing Stack v2 is in the project as well, and enjoy.\n\n\n<br>\n\n\n\n# 3. 使用 | Usage\n\n\npost processing profile 有各种不同的修改和添加方式，最常规的方法是，选中一个post processing profile ，在Inspetor窗口下：\n\n- `Add effect... > X-PostProcessing > 选择一种新的后处理`\n\nThe new effect should be available for a post processing profile with different injection points，just like:\n\n- `Add effect... > X-PostProcessing > Choose an effect`\n\n<br>\n\n\n\n# 4. 环境 | Environment\n\n- 建议使用Unity 2017.2+。\n\n- 如果使用的是较旧版本的Unity（5.6 或 2017.1），则需要将[此文件夹](https://github.com/QianMo/X-PostProcessing-Library/tree/master/Assets/PostProcessing-2) 替换为 [pps v2 2.1.8](https://github.com/Unity-Technologies/PostProcessing/tree/bec8546fc498db388cedadd14021cc7006338cc4)。\n\n- Unity 2017.2+  is recommended.\n\n- if you use older versions of Unity (5.6 and 2017.1) , you need to replace [this folder](https://github.com/QianMo/X-PostProcessing-Library/tree/master/Assets/PostProcessing-2) with [pps v2 2.1.8](https://github.com/Unity-Technologies/PostProcessing/tree/bec8546fc498db388cedadd14021cc7006338cc4).\n\n\n<br>\n\n\n# 5. 文章 |  Blog Post\n\n- [高品质后处理：十种图像模糊算法的总结与实现](https://zhuanlan.zhihu.com/p/125744132) | [GitHub Version](https://github.com/QianMo/Game-Programmer-Study-Notes/blob/master/Content/%E9%AB%98%E5%93%81%E8%B4%A8%E5%90%8E%E5%A4%84%E7%90%86%EF%BC%9A%E5%8D%81%E7%A7%8D%E5%9B%BE%E5%83%8F%E6%A8%A1%E7%B3%8A%E7%AE%97%E6%B3%95%E7%9A%84%E6%80%BB%E7%BB%93%E4%B8%8E%E5%AE%9E%E7%8E%B0/README.md)\n\n- [高品质后处理：十种故障艺术(Glitch Art)算法的总结与实现](https://zhuanlan.zhihu.com/p/148256756) | [GitHub Version](https://github.com/QianMo/Game-Programmer-Study-Notes/blob/master/Content/%E9%AB%98%E5%93%81%E8%B4%A8%E5%90%8E%E5%A4%84%E7%90%86%EF%BC%9A%E5%8D%81%E7%A7%8D%E6%95%85%E9%9A%9C%E8%89%BA%E6%9C%AF%EF%BC%88Glitch%20Art%EF%BC%89%E7%AE%97%E6%B3%95%E7%9A%84%E6%80%BB%E7%BB%93%E4%B8%8E%E5%AE%9E%E7%8E%B0/README.md)\n\n<br>\n\n\n\n\n \n"
        }
      ]
    }
  ]
}