{
  "metadata": {
    "timestamp": 1736710795854,
    "page": 269,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dotnet/corert",
      "stars": 2909,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 5.7802734375,
          "content": "# editorconfig.org\n\n# top-most EditorConfig file\nroot = true\n\n# Default settings:\n# A newline ending every file\n# Use 4 spaces as indentation\n[*]\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\n\n[project.json]\nindent_size = 2\n\n# C# files\n[*.cs]\n# New line preferences\ncsharp_new_line_before_open_brace = all\ncsharp_new_line_before_else = true\ncsharp_new_line_before_catch = true\ncsharp_new_line_before_finally = true\ncsharp_new_line_before_members_in_object_initializers = true\ncsharp_new_line_before_members_in_anonymous_types = true\ncsharp_new_line_within_query_expression_clauses = true\n\n# Indentation preferences\ncsharp_indent_block_contents = true\ncsharp_indent_braces = false\ncsharp_indent_case_contents = true\ncsharp_indent_switch_labels = true\ncsharp_indent_labels = flush_left\n\n# avoid this. unless absolutely necessary\ndotnet_style_qualification_for_field = false:suggestion\ndotnet_style_qualification_for_property = false:suggestion\ndotnet_style_qualification_for_method = false:suggestion\ndotnet_style_qualification_for_event = false:suggestion\n\n# only use var when it's obvious what the variable type is\ncsharp_style_var_for_built_in_types = false:none\ncsharp_style_var_when_type_is_apparent = false:none\ncsharp_style_var_elsewhere = false:suggestion\n\n# use language keywords instead of BCL types\ndotnet_style_predefined_type_for_locals_parameters_members = true:suggestion\ndotnet_style_predefined_type_for_member_access = true:suggestion\n\n# name all constant fields using PascalCase\ndotnet_naming_rule.constant_fields_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.constant_fields_should_be_pascal_case.symbols  = constant_fields\ndotnet_naming_rule.constant_fields_should_be_pascal_case.style    = pascal_case_style\n\ndotnet_naming_symbols.constant_fields.applicable_kinds   = field\ndotnet_naming_symbols.constant_fields.required_modifiers = const\n\ndotnet_naming_style.pascal_case_style.capitalization = pascal_case\n\n# static fields should have s_ prefix\ndotnet_naming_rule.static_fields_should_have_prefix.severity = suggestion\ndotnet_naming_rule.static_fields_should_have_prefix.symbols  = static_fields\ndotnet_naming_rule.static_fields_should_have_prefix.style    = static_prefix_style\n\ndotnet_naming_symbols.static_fields.applicable_kinds   = field\ndotnet_naming_symbols.static_fields.required_modifiers = static\n\ndotnet_naming_style.static_prefix_style.required_prefix = s_\ndotnet_naming_style.static_prefix_style.capitalization = camel_case \n\n# internal and private fields should be _camelCase\ndotnet_naming_rule.camel_case_for_private_internal_fields.severity = suggestion\ndotnet_naming_rule.camel_case_for_private_internal_fields.symbols  = private_internal_fields\ndotnet_naming_rule.camel_case_for_private_internal_fields.style    = camel_case_underscore_style\n\ndotnet_naming_symbols.private_internal_fields.applicable_kinds = field\ndotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private, internal\n\ndotnet_naming_style.camel_case_underscore_style.required_prefix = _\ndotnet_naming_style.camel_case_underscore_style.capitalization = camel_case \n\n# Code style defaults\ndotnet_sort_system_directives_first = true\ncsharp_preserve_single_line_blocks = true\ncsharp_preserve_single_line_statements = false\n\n# Expression-level preferences\ndotnet_style_object_initializer = true:suggestion\ndotnet_style_collection_initializer = true:suggestion\ndotnet_style_explicit_tuple_names = true:suggestion\ndotnet_style_coalesce_expression = true:suggestion\ndotnet_style_null_propagation = true:suggestion\n\n# Expression-bodied members\ncsharp_style_expression_bodied_methods = false:none\ncsharp_style_expression_bodied_constructors = false:none\ncsharp_style_expression_bodied_operators = false:none\ncsharp_style_expression_bodied_properties = true:none\ncsharp_style_expression_bodied_indexers = true:none\ncsharp_style_expression_bodied_accessors = true:none\n\n# Pattern matching\ncsharp_style_pattern_matching_over_is_with_cast_check = true:suggestion\ncsharp_style_pattern_matching_over_as_with_null_check = true:suggestion\ncsharp_style_inlined_variable_declaration = true:suggestion\n\n# Null checking preferences\ncsharp_style_throw_expression = true:suggestion\ncsharp_style_conditional_delegate_call = true:suggestion\n\n# Space preferences\ncsharp_space_after_cast = false\ncsharp_space_after_colon_in_inheritance_clause = true\ncsharp_space_after_comma = true\ncsharp_space_after_dot = false\ncsharp_space_after_keywords_in_control_flow_statements = true\ncsharp_space_after_semicolon_in_for_statement = true\ncsharp_space_around_binary_operators = before_and_after\ncsharp_space_around_declaration_statements = do_not_ignore\ncsharp_space_before_colon_in_inheritance_clause = true\ncsharp_space_before_comma = false\ncsharp_space_before_dot = false\ncsharp_space_before_open_square_brackets = false\ncsharp_space_before_semicolon_in_for_statement = false\ncsharp_space_between_empty_square_brackets = false\ncsharp_space_between_method_call_empty_parameter_list_parentheses = false\ncsharp_space_between_method_call_name_and_opening_parenthesis = false\ncsharp_space_between_method_call_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_empty_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_name_and_open_parenthesis = false\ncsharp_space_between_method_declaration_parameter_list_parentheses = false\ncsharp_space_between_parentheses = false\ncsharp_space_between_square_brackets = false\n\n# C++ Files\n[*.{cpp,h,in}]\ncurly_bracket_next_line = true\nindent_brace_style = Allman\n\n# Xml project files\n[*.{csproj,vcxproj,vcxproj.filters,proj,nativeproj,locproj}]\nindent_size = 2\n\n# Xml build files\n[*.builds]\nindent_size = 2\n\n# Xml files\n[*.{xml,stylecop,resx,ruleset}]\nindent_size = 2\n\n# Xml config files\n[*.{props,targets,config,nuspec}]\nindent_size = 2\n\n# Shell scripts\n[*.sh]\nend_of_line = lf\n[*.{cmd, bat}]\nend_of_line = crlf\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.6357421875,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n\n# Force bash scripts to always use lf line endings so that if a repro is accessed\n# in Unix via a file share from Windows, the scripts will work.\n*.sh text eol=lf\n*.in text eol=lf\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.5712890625,
          "content": "syntax: glob\n\n# Build tools related files\n/[Tt]ools/\n\n# External tests\ntests_downloaded/\n\n### VisualStudio ###\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\nlaunchSettings.json\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\nmsbuild.log\nmsbuild.err\nmsbuild.wrn\nproject.lock.json\n\n# Visual Studio 2015\n.vs/\n\n# Visual Studio 2015 Pre-CTP6\n*.sln.ide\n*.ide/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n#NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.idb\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding addin-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n*.pubxml\n*.publishproj\n\n# NuGet Packages\n*.nuget.props\n*.nuget.targets\n*.nupkg\n**/packages/*\n/packages/*\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\n*.metaproj\n*.metaproj.tmp\n.atom-build.json\ntags\nTAGS\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n### MonoDevelop ###\n\n*.pidb\n*.userprefs\n\n### Windows ###\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msm\n*.msp\n\n# Windows shortcuts\n*.lnk\n\n# Common binary extensions on Windows\n*.exe\n*.dll\n*.lib\n\n### Linux ###\n\n*~\n\\#*\\#\n\n# KDE directory preferences\n.directory\n\n### OSX ###\n\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n# Thumbnails\n._*\n\n# Files that might appear on external disk\n.Spotlight-V100\n.Trashes\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n# vim temporary files\n[._]*.s[a-w][a-z]\n[._]s[a-w][a-z]\n*.un~\nSession.vim\n.netrwhist\n*~\n\nVagrantfile\n.vagrant\n\n# CMake files\nCMakeFiles/\ncmake_install.cmake\nCMakeCache.txt\nMakefile\n\n# Cross compilation\ncross/rootfs/*\n\n# Temporary files from ad hoc testing projects\nsrc/ILCompiler/reproNative/repro.cpp\nsrc/ILCompiler/reproNative/repro.s\nsrc/ILCompiler/reproNative/reproNative.sln\nsrc/ILCompiler/reproNative/reproNativeCpp.sln\n\n# Visual Studio Code\n.vscode/\n\n#python import files\n*.pyc\n"
        },
        {
          "name": ".gitmirrorall",
          "type": "blob",
          "size": 0.0615234375,
          "content": "This folder will be mirrored by the Git-TFS Mirror recursively."
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": ".vsconfig",
          "type": "blob",
          "size": 0.3916015625,
          "content": "{\n  \"version\": \"1.0\",\n  \"components\": [\n    \"Microsoft.VisualStudio.Component.CoreEditor\",\n    \"Microsoft.VisualStudio.Workload.CoreEditor\",\n    \"Microsoft.VisualStudio.Component.Roslyn.Compiler\",\n    \"Microsoft.Component.MSBuild\",\n    \"Microsoft.VisualStudio.Component.VC.Tools.x86.x64\",\n    \"Microsoft.VisualStudio.Component.Windows10SDK.17763\",\n    \"Microsoft.Net.Component.4.6.TargetingPack\"\n  ]\n}"
        },
        {
          "name": "BuildToolsVersion.txt",
          "type": "blob",
          "size": 0.0234375,
          "content": "3.0.0-preview1-03220-01\n"
        },
        {
          "name": "CODE-OF-CONDUCT.md",
          "type": "blob",
          "size": 0.2529296875,
          "content": "# Code of Conduct\n\nThis project has adopted the code of conduct defined by the Contributor Covenant\nto clarify expected behavior in our community.\n\nFor more information, see the [.NET Foundation Code of Conduct](https://dotnetfoundation.org/code-of-conduct).\n"
        },
        {
          "name": "Documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "DotnetCLIVersion.txt",
          "type": "blob",
          "size": 0.0078125,
          "content": "2.1.510\n"
        },
        {
          "name": "LICENSE.TXT",
          "type": "blob",
          "size": 1.068359375,
          "content": "The MIT License (MIT)\n\nCopyright (c) .NET Foundation and Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "NuGet.config",
          "type": "blob",
          "size": 1.337890625,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <clear/>\n    <add key=\"dnceng dotnet5\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet5/nuget/v3/index.json\" />\n    <add key=\"dotnetfeed dotnet-core\" value=\"https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\" />\n    <add key=\"myget.org dotnet-buildtools\" value=\"https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json\" />\n    <add key=\"myget.org dotnet-core\" value=\"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\" />\n    <add key=\"myget.org dotnet-corefxlab\" value=\"https://dotnet.myget.org/F/dotnet-corefxlab/api/v3/index.json\" />\n    <add key=\"myget.org system-commandline\" value=\"https://dotnet.myget.org/F/system-commandline/api/v3/index.json\" />\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\n  </packageSources>\n  <config>\n    <add key=\"repositoryPath\" value=\"packages\" />\n  </config>\n  <packageRestore>\n    <!-- Automated package restore in VS does not work at this time with\n         this project and it causes build failures in VS. Disable it. -->\n    <add key=\"automatic\" value=\"false\" />\n  </packageRestore>\n  <!-- Don't use any higher level config files.\n       Our builds need to be isolated from user/machine state -->\n  <fallbackPackageFolders>\n    <clear />\n  </fallbackPackageFolders>\n</configuration>\n"
        },
        {
          "name": "PATENTS.TXT",
          "type": "blob",
          "size": 2.59375,
          "content": "﻿Microsoft Patent Promise for .NET Libraries and Runtime Components \n\nMicrosoft Corporation and its affiliates (\"Microsoft\") promise not to assert \nany .NET Patents against you for making, using, selling, offering for sale, \nimporting, or distributing Covered Code, as part of either a .NET Runtime or \nas part of any application designed to run on a .NET Runtime. \n\nIf you file, maintain, or voluntarily participate in any claim in a lawsuit \nalleging direct or contributory patent infringement by any Covered Code, or \ninducement of patent infringement by any Covered Code, then your rights under \nthis promise will automatically terminate. \n\nThis promise is not an assurance that (i) any .NET Patents are valid or \nenforceable, or (ii) Covered Code does not infringe patents or other \nintellectual property rights of any third party. No rights except those \nexpressly stated in this promise are granted, waived, or received by \nMicrosoft, whether by implication, exhaustion, estoppel, or otherwise. \nThis is a personal promise directly from Microsoft to you, and you agree as a \ncondition of benefiting from it that no Microsoft rights are received from \nsuppliers, distributors, or otherwise from any other person in connection with \nthis promise. \n\nDefinitions: \n\n\"Covered Code\" means those Microsoft .NET libraries and runtime components as \nmade available by Microsoft at https://github.com/dotnet/coreclr, \nhttps://github.com/dotnet/corefx and https://github.com/dotnet/corert. \n\n\".NET Patents\" are those patent claims, both currently owned by Microsoft and \nacquired in the future, that are necessarily infringed by Covered Code. .NET \nPatents do not include any patent claims that are infringed by any Enabling \nTechnology, that are infringed only as a consequence of modification of \nCovered Code, or that are infringed only by the combination of Covered Code \nwith third party code. \n\n\".NET Runtime\" means any compliant implementation in software of (a) all of \nthe required parts of the mandatory provisions of Standard ECMA-335 – Common \nLanguage Infrastructure (CLI); and (b) if implemented, any additional \nfunctionality in Microsoft's .NET Framework, as described in Microsoft's API \ndocumentation on its MSDN website. For example, .NET Runtimes include \nMicrosoft's .NET Framework and those portions of the Mono Project compliant \nwith (a) and (b). \n\n\"Enabling Technology\" means underlying or enabling technology that may be \nused, combined, or distributed in connection with Microsoft's .NET Framework \nor other .NET Runtimes, such as hardware, operating systems, and applications \nthat run on .NET Framework or other .NET Runtimes. "
        },
        {
          "name": "Packaging.props",
          "type": "blob",
          "size": 2.748046875,
          "content": "<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <PropertyGroup>\n    <PreReleaseLabel>alpha</PreReleaseLabel>\n    <PackageProjectDirectory>$(ProjectDir)pkg/</PackageProjectDirectory>\n    <PackageSourceDirectory>$(ProjectDir)src/</PackageSourceDirectory>\n    <PackageDescriptionFile>$(PackageProjectDirectory)descriptions.json</PackageDescriptionFile>\n    <PackageLicenseFile>$(ProjectDir)LICENSE.TXT</PackageLicenseFile>\n    <PackageThirdPartyNoticesFile>$(ProjectDir)THIRD-PARTY-NOTICES.TXT</PackageThirdPartyNoticesFile>\n    <ReleaseNotes>TODO</ReleaseNotes>\n    <ProjectUrl>https://dot.net</ProjectUrl>\n    <PackagingTaskDir>$(BuildToolsTaskDir)</PackagingTaskDir>\n    <!-- defined in buildtools packaging.targets, but we need this before targets are imported -->\n    <PackagePlatform Condition=\"'$(PackagePlatform)' == ''\">$(Platform)</PackagePlatform>\n    <PackagePlatform Condition=\"'$(PackagePlatform)' == 'amd64'\">x64</PackagePlatform>\n    <!-- We're currently not building a \"live\" baseline, instead we're using .NETCore 1.0 RTM stable versions as the baseline -->\n    <SkipBaseLineCheck>true</SkipBaseLineCheck>\n    <LineupPackageId>Microsoft.DotNet.CoreRT.Targets</LineupPackageId>\n    <LineupPackageVersion Condition=\"'$(LineupPackageVersion)' == ''\">1.0.0</LineupPackageVersion>\n\n    <!-- by default all packages will use the same version which revs with respect to product version -->\n    <PackageVersion Condition=\"'$(PackageVersion)' == ''\">1.0.0</PackageVersion>\n    <SkipValidatePackageTargetFramework>true</SkipValidatePackageTargetFramework>\n    <LicenseUrl>https://github.com/dotnet/corert/blob/master/LICENSE.TXT</LicenseUrl>\n  </PropertyGroup>\n\n  <Import Condition=\"Exists('$(PackageProjectDirectory)baseline/baseline.props') AND '$(MSBuildProjectExtension)' == '.pkgproj'\" Project=\"$(PackageProjectDirectory)baseline/baseline.props\" />\n\n  <ItemGroup>\n    <PackageIndex Include=\"$(PackageProjectDirectory)packageIndex.json\" />\n  </ItemGroup>\n\n  <ItemGroup Condition=\"'$(MSBuildProjectExtension)' == '.pkgproj'\">\n    <!-- Add required legal files to packages -->\n    <File Condition=\"'$(PackageIsEmpty)' != 'true' AND Exists('$(PackageLicenseFile)')\"\n          Include=\"$(PackageLicenseFile)\" >\n        <SkipPackageFileCheck>true</SkipPackageFileCheck>\n    </File>\n    <File Condition=\"'$(PackageIsEmpty)' != 'true' AND Exists('$(PackageThirdPartyNoticesFile)')\"\n          Include=\"$(PackageThirdPartyNoticesFile)\" >\n        <SkipPackageFileCheck>true</SkipPackageFileCheck>\n    </File>\n\n    <!-- Add version file to packages -->\n    <File Condition=\"'$(PackageIsEmpty)' != 'true' AND Exists('$(SyncInfoFile)')\"\n          Include=\"$(SyncInfoFile)\" >\n        <SkipPackageFileCheck>true</SkipPackageFileCheck>\n    </File>\n  </ItemGroup>\n</Project>\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.7294921875,
          "content": "# .NET Core Runtime (CoreRT)\n\n### This project is superseded by [NativeAOT experiment in dotnet/runtimelab repo]( https://github.com/dotnet/runtimelab/tree/feature/NativeAOT).\n\nThis repo contains the .NET Core runtime optimized for ahead of time compilation. The CoreRT compiler can compile a managed .NET Core application into a native (architecture specific) single-file executable that is easy to deploy. It can also produce standalone dynamic or static libraries that can be consumed by applications written in other programming languages. To learn more about CoreRT, see the [intro document](Documentation/intro-to-corert.md).\n\n## Try Our Samples\n\nIf you would like to give CoreRT a try, we publish daily snapshots of CoreRT to a NuGet feed. Using CoreRT is as simple as adding a new package reference to your .NET Core project and publishing it. Check out one of our samples: a \"[Hello World](samples/HelloWorld)\" console app, a simple [ASP.NET Core](samples/WebApi/) app, a [MonoGame](samples/MonoGame/) game or a [native library](samples/NativeLibrary). The `README.md` file in each sample's directory will guide you through the process step by step.\n\n## Platforms\n\n- Windows, MacOS and Linux x64 w/ RyuJIT codegen is able to compile many complex apps.\n   - [ASP.NET Core](samples/WebApi/) sample\n   - [MonoGame](samples/MonoGame/) sample\n   - Avalonia [sample](https://github.com/teobugslayer/AvaloniaCoreRTDemo) and [demo video](https://www.youtube.com/watch?v=iaC67CUmEXs)\n   - [ADO.NET](https://github.com/ifew/corert-db) sample\n   - [EntityFrameworkCore.Sqlite](https://github.com/rubin55/dot-hello) sample \n   - Unsupported features: [Dynamic loading](https://github.com/dotnet/corert/issues/6949) (e.g. `Assembly.LoadFile`), [dynamic code generation](https://github.com/dotnet/corert/issues/5011) (e.g. `System.Reflection.Emit`), [Windows-specific interop](https://github.com/dotnet/corert/issues/4219) (e.g. COM, WinRT)\n- Linux ARM w/ RyuJIT codegen: ElmSharp Hello Tizen application ([detailed status](https://github.com/dotnet/corert/issues/4856))\n- CppCodeGen (targets all platforms that support C++): Simple C# programs. The big missing features are [garbage collection](https://github.com/dotnet/corert/issues/2033) and [exception handling](https://github.com/dotnet/corert/issues/910).\n- WebAssembly: Early prototype that compiles and runs very trivial programs only. Many features are [not yet implemented](https://github.com/dotnet/corert/issues?q=is%3Aissue+is%3Aopen+label%3Aarch-wasm).\n\n## How to Engage, Contribute and Provide Feedback\nSome of the best ways to contribute are to try things out, file bugs, and join in design conversations.\n\nLooking for something to work on? The [_up for grabs_](https://github.com/dotnet/corert/labels/up-for-grabs) issues are a great place to start. Take a look at our [documentation](Documentation) to find out about the architecture and learn how to build and test the repo.\n\nThis project follows the [.NET Core Contribution Guidelines](https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/contributing.md).\n\n[![Join the chat at https://gitter.im/dotnet/corert](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/dotnet/corert?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n### .NET Native for UWP Support\n\nUse https://developercommunity.visualstudio.com/ to report problems and suggestions related to [.NET Native for UWP](https://docs.microsoft.com/en-us/dotnet/framework/net-native/).\n\n### Reporting security issues and security bugs\n\nSecurity issues and bugs should be reported privately, via email, to the\nMicrosoft Security Response Center (MSRC) <secure@microsoft.com>. You should\nreceive a response within 24 hours. If for some reason you do not, please follow\nup via email to ensure we received your original message. Further information,\nincluding the MSRC PGP key, can be found in the\n[Security TechCenter](https://technet.microsoft.com/en-us/security/ff852094.aspx).\n\n## License\nThe CoreRT Repo is licensed under the [MIT license](https://github.com/dotnet/corert/blob/master/LICENSE.TXT).\n\n## .NET Foundation\nCoreRT is a [.NET Foundation](http://www.dotnetfoundation.org/projects) project.\n\nThis project has adopted the code of conduct defined by the [Contributor Covenant](http://contributor-covenant.org/) to clarify expected behavior in our community. For more information, see the [.NET Foundation Code of Conduct](http://www.dotnetfoundation.org/code-of-conduct).\n\n## Related Projects\nThere are many .NET related projects on GitHub.\n- The [.NET home repo](https://github.com/Microsoft/dotnet) links to 100s of .NET projects, from Microsoft and the community.\n- The [ASP.NET Core repo](https://github.com/aspnet/AspNetCore) is the best place to start learning about [ASP.NET Core](http://www.asp.net).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.0322265625,
          "content": "# Security Policy\r\n\r\n## Supported Versions\r\n\r\nThe .NET Core and ASP.NET Core support policy, including supported versions can be found at the [.NET Core Support Policy Page](https://dotnet.microsoft.com/platform/support/policy/dotnet-core).\r\n\r\n## Reporting a Vulnerability\r\n\r\nSecurity issues and bugs should be reported privately to the Microsoft Security Response Center (MSRC), either by emailing secure@microsoft.com or via the portal at https://msrc.microsoft.com. \r\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your \r\noriginal message. Further information, including the MSRC PGP key, can be found in the [MSRC Report an Issue FAQ](https://www.microsoft.com/en-us/msrc/faqs-report-an-issue).\r\n\r\nReports via MSRC may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\nPlease do not open issues for anything you think might have a security implication."
        },
        {
          "name": "THIRD-PARTY-NOTICES.TXT",
          "type": "blob",
          "size": 17.41015625,
          "content": ".NET Core uses third-party libraries or other resources that may be\ndistributed under licenses different than the .NET Core software.\n\nAttributions and licence notices for test cases originally authored by\nthird parties can be found in the respective test directories.\n\nIn the event that we accidentally failed to list a required notice, please\nbring it to our attention. Post an issue or email us:\n\n           dotnet@microsoft.com\n\nThe attached notices are provided for information only.\n\nLicense notice for The LLVM Project\n-----------------------------------\n==============================================================================\nThe LLVM Project is under the Apache License v2.0 with LLVM Exceptions:\n==============================================================================\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n    TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n    1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n    2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n    3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n    4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n    5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n    6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n    7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n    8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n    9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n    END OF TERMS AND CONDITIONS\n\n    APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n    Copyright [yyyy] [name of copyright owner]\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n\n---- LLVM Exceptions to the Apache 2.0 License ----\n\nAs an exception, if, as a result of your compiling your source code, portions\nof this Software are embedded into an Object form of such source code, you\nmay redistribute such embedded portions in such Object form without complying\nwith the conditions of Sections 4(a), 4(b) and 4(d) of the License.\n\nIn addition, if you combine or link compiled forms of this Software with\nsoftware that is licensed under the GPLv2 (\"Combined Software\") and if a\ncourt of competent jurisdiction determines that the patent provision (Section\n3), the indemnity provision (Section 9) or other Section of the License\nconflicts with the conditions of the GPLv2, you may retroactively and\nprospectively choose to deem waived or otherwise exclude such Section(s) of\nthe License, but only in their entirety and only with respect to the Combined\nSoftware.\n\n==============================================================================\nSoftware from third parties included in the LLVM Project:\n==============================================================================\nThe LLVM Project contains third party software which is under different license\nterms. All such code will be identified clearly using at least one of two\nmechanisms:\n1) It will be in a separate directory tree with its own `LICENSE.txt` or\n   `LICENSE` file at the top containing the specific license and restrictions\n   which apply to that software, or\n2) It will contain specific license and restriction terms at the top of every\n   file.\n\n==============================================================================\nLegacy LLVM License (https://llvm.org/docs/DeveloperPolicy.html#legacy):\n==============================================================================\n\nThe libunwind library is dual licensed under both the University of Illinois\n\"BSD-Like\" license and the MIT license.  As a user of this code you may choose\nto use it under either license.  As a contributor, you agree to allow your code\nto be used under both.\n\nFull text of the relevant licenses is included below.\n\n==============================================================================\n\nUniversity of Illinois/NCSA\nOpen Source License\n\nCopyright (c) 2009-2019 by the contributors listed in CREDITS.TXT\n\nAll rights reserved.\n\nDeveloped by:\n\n    LLVM Team\n\n    University of Illinois at Urbana-Champaign\n\n    http://llvm.org\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal with\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\n    * Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimers.\n\n    * Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimers in the\n      documentation and/or other materials provided with the distribution.\n\n    * Neither the names of the LLVM Team, University of Illinois at\n      Urbana-Champaign, nor the names of its contributors may be used to\n      endorse or promote products derived from this Software without specific\n      prior written permission.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nCONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE\nSOFTWARE.\n\n==============================================================================\n\nCopyright (c) 2009-2014 by the contributors listed in CREDITS.TXT\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\nLicense notice for Bit Twiddling Hacks\n--------------------------------------\n\nBit Twiddling Hacks\n\nBy Sean Eron Anderson\nseander@cs.stanford.edu\n\nIndividually, the code snippets here are in the public domain (unless otherwise\nnoted) — feel free to use them however you please. The aggregate collection and\ndescriptions are © 1997-2005 Sean Eron Anderson. The code and descriptions are\ndistributed in the hope that they will be useful, but WITHOUT ANY WARRANTY and\nwithout even the implied warranty of merchantability or fitness for a particular\npurpose. \n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 2.8701171875,
          "content": "# Setting batch to true, triggers one build at a time.\n# if there is a push while a build in progress, it will wait,\n# until the running build finishes, and produce a build with all the changes\n# that happened during the last build.\ntrigger:\n  batch: true\n  branches:\n    include:\n    - master\n\npr:\n- master\n\nresources:\n  containers:\n  - container: ubuntu_1604_x64_build_image\n    image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-16.04-10fcdcf-20190208200917\n\njobs:\n\n##   The following is the matrix of test runs that we have. This is\n##   duplicated for each os/arch combination in platform-matrix.yml.\n\n##\n##   Product build       Test build              Test run\n##   (Azure DevOps)      (Azure DevOps)          (Azure DevOps)\n##\n##   ###########################################################################################\n##\n##   Debug   ----------> Inner  -----------------> simple CoreRT test (single file & multimodule)\n##                             \\ ----------------> CoreCLR Top200\n##                             \\-----------------> CoreFX\n##\n##\n##           \\---------> Outer  -----------------> simple CoreRT test (single file & multimodule)\n##                             \\-----------------> CoreCLR Pri0 KnownGood (Windows only)\n##                             \\-----------------> CoreFX\n##\n##   Release ----------> Inner  -----------------> simple CoreRT test (single file & multimodule)\n##           |\n##           \\---------> Outer  -----------------> simple CoreRT test (single file & multimodule)\n##\n##\n\n##\n## Templates used to define jobs:\n## Please update this if the factoring changes.\n##\n## This file defines the set of jobs in a platform-agnostic manner,\n## using the platform-matrix.yml template. This will create one job\n## for each platform from the passed-in jobTemplate (either a build\n## job or a test job). The build-job.yml template\n## uses xplat-job.yml to handle some of the common logic for\n## abstracting over platforms. Finally, xplat-job.yml uses the arcade\n## base.yml job template, which sets up telemetry and signing support.\n\n## azure-pipelines.yml -> platform-matrix.yml -------> build-job.yml -------> xplat-job.yml -> base.yml\n##                                            |  (passed-in jobTemplate)  |                    (arcade)\n\n\n#\n# Debug build and tests\n#\n- template: eng/platform-matrix.yml\n  parameters:\n    jobTemplate: build-job.yml\n    buildConfig: debug\n    jobParameters:\n      timeoutInMinutes: 180\n      testScenarios: 'Simple, CoreCLR'\n\n#\n# Release build and tests\n#\n- template: eng/platform-matrix.yml\n  parameters:\n    jobTemplate: build-job.yml\n    buildConfig: release\n    jobParameters:\n      timeoutInMinutes: 180\n      testScenarios: 'Simple'\n\n#\n# Debug build and CoreFX tests\n#\n- template: eng/platform-matrix.yml\n  parameters:\n    jobTemplate: build-job.yml\n    buildConfig: debug\n    jobParameters:\n      timeoutInMinutes: 180\n      testScenarios: 'CoreFX'"
        },
        {
          "name": "build.cmd",
          "type": "blob",
          "size": 1.1416015625,
          "content": "@if not defined _echo @echo off\nsetlocal EnableDelayedExpansion\n\nset __ThisScriptShort=%0\n\nif /i \"%1\" == \"/?\"    goto HelpVarCall\nif /i \"%1\" == \"-?\"    goto HelpVarCall\nif /i \"%1\" == \"/h\"    goto HelpVarCall\nif /i \"%1\" == \"-h\"    goto HelpVarCall\nif /i \"%1\" == \"/help\" goto HelpVarCall\nif /i \"%1\" == \"-help\" goto HelpVarCall\n\ngoto :NormalVarCall\n\n:HelpVarCall\ncall %~dp0buildscripts\\buildvars-setup.cmd -help\nexit /b 1\n\n:NormalVarCall\ncall %~dp0buildscripts\\buildvars-setup.cmd %*\n\nIF NOT ERRORLEVEL 1 goto AfterVarSetup\necho Setting build variables failed.\nexit /b %ERRORLEVEL%\n\n:AfterVarSetup\n\necho Commencing CoreRT Repo build\necho.\n\ncall %~dp0buildscripts\\build-native.cmd %*\n\nIF NOT ERRORLEVEL 1 goto AfterNativeBuild\necho Native component build failed. Refer !__NativeBuildLog! for details.\nexit /b %ERRORLEVEL%\n\n:AfterNativeBuild\n\ncall %~dp0buildscripts\\build-managed.cmd %*\n\nIF NOT ERRORLEVEL 1 goto AfterManagedBuild\necho Managed component build failed. Refer !__BuildLog! for details.\nexit /b %ERRORLEVEL%\n\n:AfterManagedBuild\n\ncall %~dp0buildscripts\\build-tests.cmd %*\n\nIF NOT ERRORLEVEL 1 goto AfterTests\necho Tests failed.\nexit /b %ERRORLEVEL%\n\n:AfterTests\n"
        },
        {
          "name": "build.proj",
          "type": "blob",
          "size": 0.6650390625,
          "content": "<Project DefaultTargets=\"BuildAndTest\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <Import Project=\"dir.props\" />\n\n  <!-- required to build the projects in their specified order -->\n  <PropertyGroup>\n    <SerializeProjects>true</SerializeProjects>\n  </PropertyGroup>\n\n  <Import Project=\"$(ToolsDir)VersionTools.targets\" Condition=\"Exists('$(ToolsDir)VersionTools.targets')\" />\n\n  <ItemGroup>\n    <Project Include=\"src\\Common\\test-runtime\\XUnit.Runtime.depproj\" />\n    <Project Include=\"src\\dirs.proj\" />\n  </ItemGroup>\n\n  <Import Project=\"dir.targets\" />\n\n  <Import Project=\"dir.traversal.targets\" />\n\n  <Import Project=\"$(ToolsDir)clean.targets\" />\n\n</Project>\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.7158203125,
          "content": "#!/usr/bin/env bash\n\n. ./buildscripts/buildvars-setup.sh $*\n\n# If setting variables failed, exit with the status code of the vars script\nif [ $BUILDERRORLEVEL != 0 ]; then\n    exit $BUILDERRORLEVEL\nfi\n\n. ./buildscripts/build-native.sh $*\n\n# If native build failed, exit with the status code of the native build\nif [ $BUILDERRORLEVEL != 0 ]; then\n    exit $BUILDERRORLEVEL\nfi\n\n. ./buildscripts/build-managed.sh $*\n\n# If managed build failed, exit with the status code of the managed build\nif [ $BUILDERRORLEVEL != 0 ]; then\n    exit $BUILDERRORLEVEL\nfi\n\n. ./buildscripts/build-tests.sh $*\n\nif [ $TESTERRORLEVEL != 0 ]; then\n    exit $TESTERRORLEVEL\nfi\n\necho \"Product binaries are available at $__ProductBinDir\"\n\nexit $BUILDERRORLEVEL\n"
        },
        {
          "name": "buildpipeline",
          "type": "tree",
          "content": null
        },
        {
          "name": "buildscripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "cross",
          "type": "tree",
          "content": null
        },
        {
          "name": "dependencies.props",
          "type": "blob",
          "size": 1.5625,
          "content": "<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <PropertyGroup>\n    <RyuJITVersion Condition=\"'$(RyuJITVersion)' == ''\">5.0.0-preview.8.20328.6</RyuJITVersion>\n    <ObjectWriterVersion Condition=\"'$(ObjectWriterVersion)' == ''\">1.0.0-alpha-28820-01</ObjectWriterVersion>\n    <CoreDisToolsVersion Condition=\"'$(CoreDisToolsVersion)' == ''\">1.0.1-prerelease-00005</CoreDisToolsVersion>\n    <RuntimeLibrariesVersion Condition=\"'$(RuntimeLibrariesVersion)' == ''\">5.0.0-preview.5.20263.12</RuntimeLibrariesVersion>\n    <CoreFxUapVersion Condition=\"'$(CoreFxUapVersion)' == ''\">4.7.0-preview6.19265.2</CoreFxUapVersion>\n    <MicrosoftNETCoreAppPackageVersion Condition=\"'$(MicrosoftNETCoreAppPackageVersion)' == ''\">2.1.14</MicrosoftNETCoreAppPackageVersion>\n    <MicrosoftDotNetTestSdkVersion Condition=\"'$(MicrosoftDotNetTestSdkVersion)' == ''\">15.8.0</MicrosoftDotNetTestSdkVersion>\n    <XUnitPackageVersion Condition=\"'$(XUnitPackageVersion)' == ''\">2.4.1-pre.build.4059</XUnitPackageVersion>\n    <MicrosoftDotNetXUnitExtensionsVersion Condition=\"'$(MicrosoftDotNetXUnitExtensionsVersion)' == ''\">2.4.0-beta.18420.4</MicrosoftDotNetXUnitExtensionsVersion>\n    <SystemReflectionMetadataVersion Condition=\"'$(SystemReflectionMetadataVersion)' == ''\">1.4.3</SystemReflectionMetadataVersion>\n    <FeedTasksPackage Condition=\"'$(FeedTasksPackage)' == ''\">Microsoft.DotNet.Build.Tasks.Feed</FeedTasksPackage>\n    <FeedTasksPackageVersion Condition=\"'$(FeedTasksPackageVersion)' == ''\">2.1.0-rc1-03905-01</FeedTasksPackageVersion>\n  </PropertyGroup>\n</Project>\n"
        },
        {
          "name": "dir.props",
          "type": "blob",
          "size": 13.2626953125,
          "content": "<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <Import Condition=\"Exists('..\\dir.props') And '$(RepoLocalBuild)'!='true'\" Project=\"..\\dir.props\" />\n\n  <!--\n    $(OS) is set to Unix/Windows_NT. This comes from an environment variable on Windows and MSBuild on Unix.\n  -->\n  <PropertyGroup>\n    <OsEnvironment Condition=\"'$(OsEnvironment)'==''\">$(OS)</OsEnvironment>\n    <MajorVersion>5</MajorVersion>\n  </PropertyGroup>\n\n  <!-- Initialize the basic BuildOS, BuildType, BuildConfig from build script, if present -->\n  <PropertyGroup>\n    <OSGroup Condition=\"'$(OSGroup)'==''\">$(__BuildOS)</OSGroup>\n    <Platform Condition=\"'$(Platform)'==''\">$(__BuildArch)</Platform>\n    <Configuration Condition=\"'$(Configuration)'==''\">$(__BuildType)</Configuration>\n  </PropertyGroup>\n\n  <!-- \n  Projects that have no OS-specific implementations just use Debug and Release for $(Configuration).\n  Projects that do have OS-specific implementations use OS_Debug and OS_Release, for all OS's we support even\n  if the code is the same between some OS's (so if you have some project that just calls POSIX APIs, we still have\n  OSX_[Debug|Release] and Linux_[Debug|Release] configurations.  We do this so that we place all the output under\n  a single binary folder and can have a similar experience between the command line and Visual Studio.\n  \n  Since now have multiple *Debug and *Release configurations, ConfigurationGroup is set to Debug for any of the\n  debug configurations, and to Release for any of the release configurations.\n  -->\n\n  <!-- Set default Configuration and Platform -->\n  <PropertyGroup>\n    <Platform Condition=\"'$(Platform)'==''\">AnyCPU</Platform>\n\n    <Configuration Condition=\"'$(Configuration)'==''\">Debug</Configuration>\n    <ConfigurationGroup Condition=\"$(Configuration.EndsWith('Debug'))\">Debug</ConfigurationGroup>\n    <ConfigurationGroup Condition=\"$(Configuration.EndsWith('Release'))\">Release</ConfigurationGroup>\n    <ConfigurationGroup Condition=\"'$(ConfigurationGroup)'==''\">$(Configuration)</ConfigurationGroup>\n\n    <OSGroup Condition=\"'$(OSGroup)'=='' and $(Configuration.StartsWith('Windows'))\">Windows_NT</OSGroup>\n    <OSGroup Condition=\"'$(OSGroup)'=='' and $(Configuration.StartsWith('Linux'))\">Linux</OSGroup>\n    <OSGroup Condition=\"'$(OSGroup)'=='' and $(Configuration.StartsWith('OSX'))\">OSX</OSGroup>\n    <OSGroup Condition=\"'$(OSGroup)'=='' and $(Configuration.StartsWith('FreeBSD'))\">FreeBSD</OSGroup>\n    <OSGroup Condition=\"'$(OSGroup)'==''\">Windows_NT</OSGroup>\n  </PropertyGroup>\n\n  <!-- Initialize the binplace-specific BuildOS, BuildType, BuildConfig from what we have computed by now -->\n  <PropertyGroup>\n    <BinDirOSGroup Condition=\"'$(BinDirOSGroup)'==''\">$(OSGroup)</BinDirOSGroup>\n    <BinDirConfiguration Condition=\"'$(BinDirConfiguration)'==''\">$(ConfigurationGroup)</BinDirConfiguration>\n    <BinDirPlatform Condition=\"'$(BinDirPlatform)'==''\">$(Platform)</BinDirPlatform>\n    <BinDirPlatform Condition=\"'$(BinDirPlatform)'=='AnyCPU' or '$(BinDirPlatform)'=='amd64'\">x64</BinDirPlatform> \n  </PropertyGroup>\n\n  <!-- Common repo directories -->\n  <PropertyGroup>\n    <ProjectDir>$(MSBuildThisFileDirectory)</ProjectDir>\n    <SourceDir>$(ProjectDir)src/</SourceDir>\n\n    <!-- Output directories -->\n    <BinDir Condition=\"'$(BinDir)'==''\">$(ProjectDir)bin/</BinDir>\n    <ObjDir Condition=\"'$(ObjDir)'==''\">$(BinDir)obj/</ObjDir>\n    <BaseIntermediateOutputPath Condition=\"'$(BaseIntermediateOutputPath)'==''\">$(ObjDir)</BaseIntermediateOutputPath>\n    <PackageOutputRoot Condition=\"'$(PackageOutputRoot)'=='' and '$(NonShippingPackage)' == 'true'\">$(BinDir)packages_noship/</PackageOutputRoot>\n    <PackageOutputRoot Condition=\"'$(PackageOutputRoot)'==''\">$(BinDir)packages/</PackageOutputRoot>\n\n    <!-- Input Directories -->\n    <PackagesDir Condition=\"'$(PackagesDir)'==''\">$(ProjectDir)packages/</PackagesDir>\n    <RestorePackagesPath>$(PackagesDir)</RestorePackagesPath>\n    \n    <ToolsDir Condition=\"'$(ToolsDir)'==''\">$(ProjectDir)Tools/</ToolsDir>\n  </PropertyGroup>\n\n  <!-- Import Build tools common props file where repo-independent properties are found -->\n  <Import Project=\"$(ToolsDir)Build.Common.props\" Condition=\"Exists('$(ToolsDir)Build.Common.props')\" />\n\n  <!-- Provides package dependency version properties and verification/auto-upgrade configuration -->\n  <Import Project=\"$(MSBuildThisFileDirectory)dependencies.props\" />\n\n  <PropertyGroup>\n    <!-- Default any assembly not specifying a key to use the Open Key -->\n    <AssemblyKey>Open</AssemblyKey>\n  </PropertyGroup>\n\n  <!-- Import the packaging props -->\n  <Import Project=\"$(MSBuildThisFileDirectory)Packaging.props\" />\n\n  <!-- Set up Default symbol and optimization for Configuration -->\n  <PropertyGroup Condition=\"'$(ConfigurationGroup)' == 'Debug'\">\n    <DebugSymbols Condition=\"'$(DebugSymbols)' == ''\">true</DebugSymbols>\n    <Optimize Condition=\"'$(Optimize)' == ''\">false</Optimize>\n    <DebugType Condition=\"'$(DebugType)' == ''\">full</DebugType>\n    <DefineConstants>DEBUG;TRACE;$(DefineConstants)</DefineConstants>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(ConfigurationGroup)' == 'Release'\">\n    <DebugSymbols Condition=\"'$(DebugSymbols)' == ''\">true</DebugSymbols>\n    <Optimize Condition=\"'$(Optimize)' == ''\">true</Optimize>\n    <DebugType Condition=\"'$(DebugType)' == ''\">pdbonly</DebugType>\n    <DefineConstants>TRACE;$(DefineConstants)</DefineConstants>\n  </PropertyGroup>\n\n  <!-- Disable some standard properties for building our projects -->\n  <PropertyGroup>\n    <NoStdLib>true</NoStdLib>\n    <NoExplicitReferenceToStdLib>true</NoExplicitReferenceToStdLib>\n    <AddAdditionalExplicitAssemblyReferences>false</AddAdditionalExplicitAssemblyReferences>\n    <GenerateTargetFrameworkAttribute>false</GenerateTargetFrameworkAttribute>\n    <LangVersion>latest</LangVersion>\n    <LangVersion Condition=\"'$(SkipImportRoslynProps)' != 'true' or '$(IsProjectNLibrary)' == 'true'\">preview</LangVersion>\n    <UseSharedCompilation>true</UseSharedCompilation>\n    <DebugType Condition=\"'$(IsProjectNLibrary)' != 'true'\">portable</DebugType>\n  </PropertyGroup>\n\n  <!-- Set up handling of build warnings -->\n  <PropertyGroup>\n    <WarningLevel>4</WarningLevel>\n    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>\n  </PropertyGroup>\n\n  <!-- Set up some common paths -->\n  <PropertyGroup>\n    <CommonPath>$(SourceDir)Common\\src\\</CommonPath>\n    <CommonTestPath>$(SourceDir)Common\\tests</CommonTestPath>\n  </PropertyGroup>\n\n  <!-- Set up the default output and intermediate paths -->\n  <PropertyGroup>\n    <OSPlatformConfig>$(BinDirOSGroup).$(BinDirPlatform).$(BinDirConfiguration)</OSPlatformConfig>\n\n    <BaseOutputPath Condition=\"'$(BaseOutputPath)'==''\">$(BinDir)</BaseOutputPath>\n\n    <OutputPath Condition=\"'$(OutputPath)'==''\">$(BaseOutputPath)$(OSPlatformConfig)/$(MSBuildProjectName)</OutputPath>\n\n    <IntermediateOutputRootPath Condition=\"'$(IntermediateOutputRootPath)' == ''\">$(BaseIntermediateOutputPath)$(OSPlatformConfig)/</IntermediateOutputRootPath>\n    <IntermediateOutputPath Condition=\"'$(IntermediateOutputPath)' == ''\">$(IntermediateOutputRootPath)$(MSBuildProjectName)</IntermediateOutputPath>\n\n    <RuntimePath Condition=\"'$(RuntimePath)' == ''\">$(IntermediateOutputRootPath)test-runtime/</RuntimePath>\n\n    <!-- Use the shared tools host and runtime for testing -->\n    <TestHostRootPath Condition=\"'$(TestHostRootPath)' == ''\">$(DotnetCliPath)</TestHostRootPath>\n\n    <PackageOutputPath Condition=\"'$(PackageOutputPath)'==''\">$(PackageOutputRoot)$(BinDirConfiguration)/</PackageOutputPath>\n    <SymbolPackageOutputPath Condition=\"'$(SymbolPackageOutputPath)'==''\">$(PackageOutputPath)symbols/</SymbolPackageOutputPath>\n\n    <!-- Folder where we will drop the Nuget package for the toolchain -->\n    <ProductPackageDir Condition=\"'$(ProductPackageDir)'==''\">$(BaseOutputPath)$(OSPlatformConfig)/packaging/</ProductPackageDir>\n\n    <RestoreOutputPath Condition=\"'$(RestoreOutputPath)'==''\">$(IntermediateOutputPath)</RestoreOutputPath>\n\n    <FrameworkReferencePath Condition=\"'$(FrameworkReferencePath)'==''\">$(BaseOutputPath)$(OSPlatformConfig)/framework</FrameworkReferencePath>\n\n    <PackagesBasePath Condition=\"'$(PackagesBasePath)'==''\">$(BinDir)$(OSPlatformConfig)</PackagesBasePath>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <SupplementalTestData Include=\"$(RuntimePath)*\" />\n  </ItemGroup>\n\n  <!-- initialize all the targets variables to false as they should only be set below -->\n  <PropertyGroup>\n    <TargetsWindows>false</TargetsWindows>\n    <TargetsUnix>false</TargetsUnix>\n    <TargetsLinux>false</TargetsLinux>\n    <TargetsOSX>false</TargetsOSX>\n    <TargetsFreeBSD>false</TargetsFreeBSD>\n    <TargetsNetBSD>false</TargetsNetBSD>\n  </PropertyGroup>\n\n  <!-- Setup properties per OSGroup -->\n  <Choose>\n    <When Condition=\"'$(OSGroup)'=='AnyOS'\">\n      <PropertyGroup>\n      </PropertyGroup>\n    </When>\n    <When Condition=\"'$(OSGroup)'=='Windows_NT'\">\n      <PropertyGroup>\n        <TargetsWindows>true</TargetsWindows>\n        <PackageTargetRuntime>win-corert</PackageTargetRuntime>\n      </PropertyGroup>\n    </When>\n    <When Condition=\"'$(Platform)'=='wasm'\">\n      <PropertyGroup>\n        <TargetsUnix>true</TargetsUnix>\n        <TargetsWindows>false</TargetsWindows>\n        <PackageTargetRuntime>unix-corert</PackageTargetRuntime>\n      </PropertyGroup>\n    </When>\n    <When Condition=\"'$(OSGroup)'=='Unix'\">\n      <PropertyGroup>\n        <TargetsUnix>true</TargetsUnix>\n        <PackageTargetRuntime>unix-corert</PackageTargetRuntime>\n      </PropertyGroup>\n    </When>\n    <When Condition=\"'$(OSGroup)'=='Linux'\">\n      <PropertyGroup>\n        <TargetsUnix>true</TargetsUnix>\n        <TargetsLinux>true</TargetsLinux>\n        <PackageTargetRuntime>linux-corert</PackageTargetRuntime>\n      </PropertyGroup>\n    </When>\n    <When Condition=\"'$(OSGroup)'=='OSX'\">\n      <PropertyGroup>\n        <TargetsUnix>true</TargetsUnix>\n        <TargetsOSX>true</TargetsOSX>\n        <PackageTargetRuntime>osx-corert</PackageTargetRuntime>\n      </PropertyGroup>\n    </When>\n    <When Condition=\"'$(OSGroup)'=='FreeBSD'\">\n      <PropertyGroup>\n        <TargetsUnix>true</TargetsUnix>\n        <TargetsFreeBSD>true</TargetsFreeBSD>\n      </PropertyGroup>\n    </When>\n    <When Condition=\"'$(OSGroup)'=='NetBSD'\">\n      <PropertyGroup>\n        <TargetsUnix>true</TargetsUnix>\n        <TargetsNetBSD>true</TargetsNetBSD>\n      </PropertyGroup>\n    </When>\n    <Otherwise>\n      <PropertyGroup>\n        <ConfigurationErrorMsg>$(ConfigurationErrorMsg);Unknown OSGroup [$(OSGroup)] specificed in your project.</ConfigurationErrorMsg>\n      </PropertyGroup>\n    </Otherwise>\n  </Choose>\n\n  <!-- Set up various other constants -->\n  <PropertyGroup>\n    <DefineConstants>CORERT;$(DefineConstants)</DefineConstants>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(TargetsWindows)'=='true'\">\n    <DefineConstants>TARGET_WINDOWS;$(DefineConstants)</DefineConstants>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(TargetsUnix)'=='true'\">\n    <DefineConstants>TARGET_UNIX;$(DefineConstants)</DefineConstants>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(TargetsOSX)'=='true'\">\n    <DefineConstants>TARGET_OSX;$(DefineConstants)</DefineConstants>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Platform)' == 'x64'\">\n    <DefineConstants>TARGET_AMD64;TARGET_64BIT;$(DefineConstants)</DefineConstants>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Platform)' == 'x86'\">\n    <DefineConstants>TARGET_X86;TARGET_32BIT;$(DefineConstants)</DefineConstants>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Platform)' == 'arm'\">\n    <DefineConstants>TARGET_ARM;TARGET_32BIT;$(DefineConstants)</DefineConstants>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Platform)' == 'armel'\">\n    <DefineConstants>TARGET_ARM;TARGET_32BIT;$(DefineConstants)</DefineConstants>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Platform)' == 'arm64'\">\n    <DefineConstants>TARGET_ARM64;TARGET_64BIT;$(DefineConstants)</DefineConstants>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Platform)' == 'wasm'\">\n    <DefineConstants>TARGET_WASM;TARGET_32BIT;$(DefineConstants)</DefineConstants>\n  </PropertyGroup>\n\n  <PropertyGroup>\n    <PrereleaseResolveNuGetPackages>true</PrereleaseResolveNuGetPackages>\n    <NuGetTargetMoniker Condition=\"'$(NuGetTargetFramework)' == ''\">.NETCoreApp,Version=v2.1</NuGetTargetMoniker>\n    <BuildPackageLibraryReferences>false</BuildPackageLibraryReferences>\n  </PropertyGroup>\n\n  <PropertyGroup>\n    <!-- Don't run tests if we're building another platform's binaries on Windows -->\n    <SkipTests Condition=\"'$(SkipTests)'=='' and ('$(OsEnvironment)'=='Windows_NT' and '$(TargetsWindows)'!='true')\">true</SkipTests>\n  </PropertyGroup>\n\n  <PropertyGroup>\n    <!-- On Windows fallback to ILAsm from the framework for now -->\n    <IlasmToolPath Condition=\"'$(OSEnvironment)'=='Windows_NT'\">%WINDIR%\\Microsoft.NET\\Framework\\v4.0.30319\\ilasm.exe</IlasmToolPath>\n  </PropertyGroup>\n\n  <PropertyGroup>\n    <!-- Also update init-tools.cmd and init-tools.sh -->\n    <RoslynVersion>3.3.0-beta2-19367-02</RoslynVersion>\n    <RoslynPackageName>Microsoft.Net.Compilers.Toolset</RoslynPackageName>\n    <RoslynPackageDir>$(PackagesDir)/$(RoslynPackageName.ToLower())/$(RoslynVersion)/</RoslynPackageDir>\n    <RoslynPropsFile>$(RoslynPackageDir)build/$(RoslynPackageName).props</RoslynPropsFile>\n  </PropertyGroup>\n\n  <!-- Use Roslyn Compilers to build -->\n  <Import Project=\"$(RoslynPropsFile)\" Condition=\"'$(SkipImportRoslynProps)' != 'true'\" />\n</Project>\n"
        },
        {
          "name": "dir.targets",
          "type": "blob",
          "size": 3.9443359375,
          "content": "<Project InitialTargets=\"CheckForBuildTools\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n\n  <Target Name=\"CheckForBuildTools\">\n    <Error Condition=\"!Exists('$(ToolsDir)') and '$(OverrideToolsDir)'=='true'\"\n           Text=\"The tools directory [$(ToolsDir)] does not exist. Please run sync in your enlistment to ensure the tools are installed before attempting to build an individual project.\" />\n    <Error Condition=\"!Exists('$(ToolsDir)') and '$(OverrideToolsDir)'!='true'\"\n           Text=\"The tools directory [$(ToolsDir)] does not exist. Please run init-tools.cmd in your enlistment to ensure the tools are installed before attempting to build an individual project.\" />\n  </Target>\n\n  <!-- Provide default targets which can be hooked onto or overridden as necessary -->\n  <Target Name=\"BuildAndTest\" DependsOnTargets=\"Build;Test\" />\n  <Target Name=\"RebuildAndTest\" DependsOnTargets=\"Rebuild;Test\" />\n  <Target Name=\"Test\" />\n\n  <!-- CoreRT projects are not CLSCompliant by default -->\n  <PropertyGroup>\n    <CLSCompliant Condition=\"'$(CLSCompliant)'==''\">false</CLSCompliant>\n  </PropertyGroup>\n\n  <!-- Set default references for netcoreapp2.1 -->\n  <PropertyGroup Condition=\"'$(TargetFramework)' == 'netcoreapp2.1'\">\n    <!-- This tells VS that this is .NET Core app - uses .NET Core debugger, IntelliSense, etc. -->\n    <TargetFrameworkIdentifier>.NETCoreApp</TargetFrameworkIdentifier>\n    <TargetFrameworkVersion>v2.1</TargetFrameworkVersion>\n  </PropertyGroup>\n\n  <!-- Set default references for netstandard1.3 -->\n  <PropertyGroup Condition=\"'$(TargetFramework)' == 'netstandard1.3'\">\n    <NuGetTargetMoniker>.NETStandard,Version=v1.3</NuGetTargetMoniker>\n    <TargetFrameworkIdentifier>.NETStandard</TargetFrameworkIdentifier>\n    <TargetFrameworkVersion>v1.3</TargetFrameworkVersion>\n  </PropertyGroup>\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'netstandard1.3'\">\n    <PackageReference Include=\"NETStandard.Library\">\n      <Version>1.6.1</Version>\n    </PackageReference>\n  </ItemGroup>\n\n  <PropertyGroup Condition=\"'$(TargetFramework)' == 'netstandard1.6'\">\n    <NuGetTargetMoniker>.NETStandard,Version=v1.6</NuGetTargetMoniker>\n    <TargetFrameworkIdentifier>.NETStandard</TargetFrameworkIdentifier>\n    <TargetFrameworkVersion>v1.6</TargetFrameworkVersion>\n  </PropertyGroup>\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'netstandard1.6'\">\n    <PackageReference Include=\"NETStandard.Library\">\n      <Version>2.0.3</Version>\n    </PackageReference>\n  </ItemGroup>\n\n  <!-- Set default references for netstandard2.0 -->\n  <PropertyGroup Condition=\"'$(TargetFramework)' == 'netstandard2.0'\">\n    <NuGetTargetMoniker>.NETStandard,Version=v2.0</NuGetTargetMoniker>\n    <TargetFrameworkIdentifier>.NETStandard</TargetFrameworkIdentifier>\n    <TargetFrameworkVersion>v2.0</TargetFrameworkVersion>\n  </PropertyGroup>\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'netstandard2.0'\">\n    <PackageReference Include=\"NETStandard.Library\">\n      <Version>2.0.3</Version>\n    </PackageReference>\n  </ItemGroup>\n  <ImportGroup Condition=\"'$(TargetFramework)' == 'netstandard2.0'\">\n    <Import Project=\"$(PackagesDir)netstandard.library\\2.0.3\\build\\netstandard2.0\\NETStandard.Library.targets\" Condition=\"Exists('$(PackagesDir)netstandard.library\\2.0.3\\build\\netstandard2.0\\NETStandard.Library.targets')\" />\n  </ImportGroup>\n\n  <!-- Set non-empty TargetFrameworkIdentifier to avoid defaulting to .NETPortable -->\n  <PropertyGroup Condition=\"'$(TargetFrameworkIdentifier)' == ''\">\n    <TargetFrameworkIdentifier>.NETStandard</TargetFrameworkIdentifier>\n  </PropertyGroup>\n\n  <PropertyGroup>\n    <NugetRuntimeIdentifier Condition=\"'$(NugetRuntimeIdentifier)' == ''\">$(RuntimeIdentifiers)</NugetRuntimeIdentifier>\n  </PropertyGroup>\n\n  <Import Project=\"$(ToolsDir)Build.Common.targets\" Condition=\"Exists('$(ToolsDir)Build.Common.targets')\" />\n\n  <!-- Override corefx multi targeting support -->\n  <Target Name=\"ConvertCommonMetadataToAdditionalProperties\" BeforeTargets=\"AssignProjectConfiguration\" />\n\n</Project>\n"
        },
        {
          "name": "dir.traversal.targets",
          "type": "blob",
          "size": 2.4228515625,
          "content": "<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n\n  <Target Name=\"BuildAllProjects\">\n    <PropertyGroup>\n      <DefaultBuildAllTarget Condition=\"'$(DefaultBuildAllTarget)'==''\">$(MSBuildProjectDefaultTargets)</DefaultBuildAllTarget>\n    </PropertyGroup>\n\n    <!-- To Serialize we use msbuild's batching functionality '%' to force it to batch all similar projects with the same identity \n         however since the project names are unique it will essentially force each to run in its own batch -->\n    <MSBuild Targets=\"$(DefaultBuildAllTarget)\"\n             Projects=\"@(Project)\"\n             Condition=\"'$(SerializeProjects)'=='true' AND '%(Identity)' != ''\"\n             Properties=\"DefaultBuildAllTarget=$(DefaultBuildAllTarget);BuildAllProjects=true\"\n             ContinueOnError=\"ErrorAndContinue\" />\n\n    <MSBuild Targets=\"$(DefaultBuildAllTarget)\"\n             Projects=\"@(Project)\"\n             Condition=\"'$(SerializeProjects)'!='true'\"\n             Properties=\"DefaultBuildAllTarget=$(DefaultBuildAllTarget);BuildAllProjects=true\"\n             BuildInParallel=\"true\"\n             ContinueOnError=\"ErrorAndContinue\" />\n\n    <!-- Given we ErrorAndContinue we need to propagate the error if the overall task failed -->\n    <Error Condition=\"'$(MSBuildLastTaskResult)'=='false'\" />\n  </Target>\n\n  <Target Name=\"RestoreAllProjects\">\n    <Message Importance=\"High\" Text=\"Restoring project packages...\" />\n\n    <PropertyGroup>\n      <DefaultRestoreAllTarget Condition=\"'$(DefaultRestoreAllTarget)'==''\">Restore</DefaultRestoreAllTarget>\n    </PropertyGroup>\n\n    <!-- Forcing BuildInParallel=false. BuildInParallel=true clashes with nuget task parallel restore -->\n    <MSBuild Targets=\"$(DefaultRestoreAllTarget)\"\n             Projects=\"@(Project)\"\n             BuildInParallel=\"false\"\n             ContinueOnError=\"ErrorAndContinue\" />\n\n    <!-- Given we ErrorAndContinue we need to propagate the error if the overall task failed -->\n    <Error Condition=\"'$(MSBuildLastTaskResult)'=='false'\" />\n  </Target>\n\n  <PropertyGroup>\n    <TraversalBuildDependsOn>\n      BuildAllProjects;\n      $(TraversalBuildDependsOn);\n    </TraversalBuildDependsOn>\n\n    <TraversalRestoreDependsOn>\n      RestoreAllProjects;\n      $(TraversalRestoreDependsOn)\n    </TraversalRestoreDependsOn>\n  </PropertyGroup>\n\n  <Target Name=\"Build\" DependsOnTargets=\"$(TraversalBuildDependsOn)\" />\n\n  <Target Name=\"Restore\" DependsOnTargets=\"$(TraversalRestoreDependsOn)\" />\n\n</Project>\n"
        },
        {
          "name": "eng",
          "type": "tree",
          "content": null
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.2470703125,
          "content": "{\n  \"tools\": {\n    \"dotnet\": \"2.1.401\"\n  },\n  \"native-tools\": {\n    \"cmake\": \"3.14.2\",\n    \"python3\": \"3.7.1\"\n  },\n  \"msbuild-sdks\": {\n    \"Microsoft.DotNet.Arcade.Sdk\": \"1.0.0-beta.19115.1\",\n    \"Microsoft.DotNet.Helix.Sdk\": \"2.0.0-beta.19115.1\"\n  }\n}\n"
        },
        {
          "name": "init-tools.cmd",
          "type": "blob",
          "size": 6.4365234375,
          "content": "@if not defined _echo @echo off\nsetlocal\n\nset INIT_TOOLS_LOG=%~dp0init-tools.log\nif [%PACKAGES_DIR%]==[] set PACKAGES_DIR=%~dp0packages\nif [%TOOLRUNTIME_DIR%]==[] set TOOLRUNTIME_DIR=%~dp0Tools\nset DOTNET_PATH=%TOOLRUNTIME_DIR%\\dotnetcli\\\nif [%DOTNET_CMD%]==[] set DOTNET_CMD=%DOTNET_PATH%dotnet.exe\nif [%BUILDTOOLS_SOURCE%]==[] set BUILDTOOLS_SOURCE=https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json\nset /P BUILDTOOLS_VERSION=< \"%~dp0BuildToolsVersion.txt\"\nset BUILD_TOOLS_PATH=%PACKAGES_DIR%\\Microsoft.DotNet.BuildTools\\%BUILDTOOLS_VERSION%\\lib\nset INIT_TOOLS_RESTORE_PROJECT=%~dp0init-tools.msbuild\nset BUILD_TOOLS_SEMAPHORE_DIR=%TOOLRUNTIME_DIR%\\%BUILDTOOLS_VERSION%\nset BUILD_TOOLS_SEMAPHORE=%BUILD_TOOLS_SEMAPHORE_DIR%\\init-tools.completed_9\n\n:: if force option is specified then clean the tool runtime and build tools package directory to force it to get recreated\nif [%1]==[force] (\n  if exist \"%TOOLRUNTIME_DIR%\" rmdir /S /Q \"%TOOLRUNTIME_DIR%\"\n  if exist \"%PACKAGES_DIR%\\Microsoft.DotNet.BuildTools\" rmdir /S /Q \"%PACKAGES_DIR%\\Microsoft.DotNet.BuildTools\"\n)\n\n:: If semaphore exists do nothing\nif exist \"%BUILD_TOOLS_SEMAPHORE%\" (\n  echo Tools are already initialized.\n  goto :EOF\n)\n\nif exist \"%TOOLRUNTIME_DIR%\" rmdir /S /Q \"%TOOLRUNTIME_DIR%\"\n\nif exist \"%DotNetBuildToolsDir%\" (\n  echo Using tools from '%DotNetBuildToolsDir%'.\n  mklink /j \"%TOOLRUNTIME_DIR%\" \"%DotNetBuildToolsDir%\"\n\n  if not exist \"%DOTNET_CMD%\" (\n    echo ERROR: Ensure that '%DotNetBuildToolsDir%' contains the .NET Core SDK at '%DOTNET_PATH%'\n    exit /b 1\n  )\n\n  echo Done initializing tools.\n  if NOT exist \"%BUILD_TOOLS_SEMAPHORE_DIR%\" mkdir \"%BUILD_TOOLS_SEMAPHORE_DIR%\"\n  echo Using tools from '%DotNetBuildToolsDir%'. > \"%BUILD_TOOLS_SEMAPHORE%\"\n  exit /b 0\n)\n\necho Running %0 > \"%INIT_TOOLS_LOG%\"\n\nset /p DOTNET_VERSION=< \"%~dp0DotnetCLIVersion.txt\"\nif exist \"%DOTNET_CMD%\" goto :afterdotnetrestore\n\necho Installing dotnet cli...\nif NOT exist \"%DOTNET_PATH%\" mkdir \"%DOTNET_PATH%\"\nset DOTNET_ZIP_NAME=dotnet-sdk-%DOTNET_VERSION%-win-x64.zip\nset DOTNET_REMOTE_PATH=https://dotnetcli.azureedge.net/dotnet/Sdk/%DOTNET_VERSION%/%DOTNET_ZIP_NAME%\nset DOTNET_LOCAL_PATH=%DOTNET_PATH%%DOTNET_ZIP_NAME%\necho Installing '%DOTNET_REMOTE_PATH%' to '%DOTNET_LOCAL_PATH%' >> \"%INIT_TOOLS_LOG%\"\npowershell -NoProfile -ExecutionPolicy unrestricted -Command \"$retryCount = 0; $success = $false; $proxyCredentialsRequired = $false; do { try { $wc = New-Object Net.WebClient; if ($proxyCredentialsRequired) { [Net.WebRequest]::DefaultWebProxy.Credentials = [Net.CredentialCache]::DefaultNetworkCredentials; } $wc.DownloadFile('%DOTNET_REMOTE_PATH%', '%DOTNET_LOCAL_PATH%'); $success = $true; } catch { if ($retryCount -ge 6) { throw; } else { $we = $_.Exception.InnerException -as [Net.WebException]; $proxyCredentialsRequired = ($we -ne $null -and ([Net.HttpWebResponse]$we.Response).StatusCode -eq [Net.HttpStatusCode]::ProxyAuthenticationRequired); Start-Sleep -Seconds (5 * $retryCount); $retryCount++; } } } while ($success -eq $false); Add-Type -Assembly 'System.IO.Compression.FileSystem' -ErrorVariable AddTypeErrors; if ($AddTypeErrors.Count -eq 0) { [System.IO.Compression.ZipFile]::ExtractToDirectory('%DOTNET_LOCAL_PATH%', '%DOTNET_PATH%') } else { (New-Object -com shell.application).namespace('%DOTNET_PATH%').CopyHere((new-object -com shell.application).namespace('%DOTNET_LOCAL_PATH%').Items(),16) }\" >> \"%INIT_TOOLS_LOG%\"\nif NOT exist \"%DOTNET_LOCAL_PATH%\" (\n  echo ERROR: Could not install dotnet cli correctly. 1>&2\n  goto :error\n)\n\n:afterdotnetrestore\n\nif exist \"%BUILD_TOOLS_PATH%\" goto :afterbuildtoolsrestore\necho Restoring BuildTools version %BUILDTOOLS_VERSION%...\necho Running: \"%DOTNET_CMD%\" restore \"%INIT_TOOLS_RESTORE_PROJECT%\" --no-cache --packages \"%PACKAGES_DIR%\" --source \"%BUILDTOOLS_SOURCE%\" /p:BuildToolsPackageVersion=%BUILDTOOLS_VERSION% /p:ToolsDir=%TOOLRUNTIME_DIR% >> \"%INIT_TOOLS_LOG%\"\ncall \"%DOTNET_CMD%\" restore \"%INIT_TOOLS_RESTORE_PROJECT%\" --no-cache --packages \"%PACKAGES_DIR%\" --source \"%BUILDTOOLS_SOURCE%\" /p:BuildToolsPackageVersion=%BUILDTOOLS_VERSION% /p:ToolsDir=%TOOLRUNTIME_DIR% >> \"%INIT_TOOLS_LOG%\"\nif NOT exist \"%BUILD_TOOLS_PATH%\\init-tools.cmd\" (\n  echo ERROR: Could not restore build tools correctly. 1>&2\n  goto :error\n)\n\n:afterbuildtoolsrestore\n\necho Initializing BuildTools...\necho Running: \"%BUILD_TOOLS_PATH%\\init-tools.cmd\" \"%~dp0\" \"%DOTNET_CMD%\" \"%TOOLRUNTIME_DIR%\" >> \"%INIT_TOOLS_LOG%\"\ncall \"%BUILD_TOOLS_PATH%\\init-tools.cmd\" \"%~dp0\" \"%DOTNET_CMD%\" \"%TOOLRUNTIME_DIR%\" \"%PACKAGES_DIR%\" >> \"%INIT_TOOLS_LOG%\"\nset INIT_TOOLS_ERRORLEVEL=%ERRORLEVEL%\nif not [%INIT_TOOLS_ERRORLEVEL%]==[0] (\n  echo ERROR: An error occured when trying to initialize the tools. 1>&2\n  goto :error\n)\n\n:: Restore a custom RoslynToolset since we can't trivially update the BuildTools dependency in CoreRT\necho Configurating RoslynToolset...\n:: Also update BUILD_TOOLS_SEMAPHORE, init-tools.sh, and dir.props\nset ROSLYNCOMPILERS_VERSION=3.3.0-beta2-19367-02\nset DEFAULT_RESTORE_ARGS=--no-cache --packages \"%PACKAGES_DIR%\"\nset INIT_TOOLS_RESTORE_ARGS=%DEFAULT_RESTORE_ARGS% --source https://dotnet.myget.org/F/roslyn/api/v3/index.json --source https://api.nuget.org/v3/index.json %INIT_TOOLS_RESTORE_ARGS%\nset MSBUILD_PROJECT_CONTENT= ^\n ^^^<Project Sdk=^\"Microsoft.NET.Sdk^\"^^^> ^\n  ^^^<PropertyGroup^^^> ^\n    ^^^<TargetFrameworks^^^>netcoreapp1.0;net46^^^</TargetFrameworks^^^> ^\n    ^^^<DisableImplicitFrameworkReferences^^^>true^^^</DisableImplicitFrameworkReferences^^^> ^\n  ^^^</PropertyGroup^^^> ^\n  ^^^<ItemGroup^^^> ^\n    ^^^<PackageReference Include=^\"Microsoft.Net.Compilers.Toolset^\" Version=^\"%ROSLYNCOMPILERS_VERSION%^\" /^^^> ^\n  ^^^</ItemGroup^^^> ^\n ^^^</Project^^^>\nset PORTABLETARGETS_PROJECT=%TOOLRUNTIME_DIR%\\generated\\project.csproj\necho %MSBUILD_PROJECT_CONTENT% > \"%PORTABLETARGETS_PROJECT%\"\n@echo on\ncall \"%DOTNET_CMD%\" restore \"%PORTABLETARGETS_PROJECT%\" %INIT_TOOLS_RESTORE_ARGS%\nset RESTORE_PORTABLETARGETS_ERROR_LEVEL=%ERRORLEVEL%\n@echo off\nif not [%RESTORE_PORTABLETARGETS_ERROR_LEVEL%]==[0] (\n  echo ERROR: An error ocurred when running: '\"%DOTNET_CMD%\" restore \"%PORTABLETARGETS_PROJECT%\"'. Please check above for more details.\n  exit /b %RESTORE_PORTABLETARGETS_ERROR_LEVEL%\n)\n\n:: Create semaphore file\necho Done initializing tools.\nif NOT exist \"%BUILD_TOOLS_SEMAPHORE_DIR%\" mkdir \"%BUILD_TOOLS_SEMAPHORE_DIR%\"\necho Init-Tools.cmd completed for BuildTools Version: %BUILDTOOLS_VERSION% > \"%BUILD_TOOLS_SEMAPHORE%\"\nexit /b 0\n\n:error\necho Please check the detailed log that follows. 1>&2\ntype \"%INIT_TOOLS_LOG%\" 1>&2\nexit /b 1\n"
        },
        {
          "name": "init-tools.msbuild",
          "type": "blob",
          "size": 0.6669921875,
          "content": "<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>netcoreapp2.1</TargetFramework>\n    <EnableDefaultItems>false</EnableDefaultItems>\n    <DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>\n    <BaseIntermediateOutputPath>$(MSBuildThisFileDirectory)Tools/$(BuildToolsPackageVersion)</BaseIntermediateOutputPath>\n  </PropertyGroup>\n\n  <Import Project=\"$(MSBuildThisFileDirectory)dependencies.props\" />\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.DotNet.BuildTools\" Version=\"$(BuildToolsPackageVersion)\" />\n    <PackageReference Include=\"$(FeedTasksPackage)\" Version=\"$(FeedTasksPackageVersion)\" /> \n  </ItemGroup>\n</Project>"
        },
        {
          "name": "init-tools.sh",
          "type": "blob",
          "size": 8.4013671875,
          "content": "#!/usr/bin/env bash\n__scriptpath=$(cd \"$(dirname \"$0\")\"; pwd -P)\n\nif [ \"$BUILDVARS_DONE\" != 1 ]; then\n    . $__scriptpath/buildscripts/hostvars-setup.sh\nfi\n\n__init_tools_log=$__scriptpath/init-tools.log\n__PACKAGES_DIR=$__scriptpath/packages\n__TOOLRUNTIME_DIR=$__scriptpath/Tools\n__DOTNET_PATH=$__TOOLRUNTIME_DIR/dotnetcli\n__DOTNET_CMD=$__DOTNET_PATH/dotnet\nif [ -z \"$__BUILDTOOLS_SOURCE\" ]; then __BUILDTOOLS_SOURCE=https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json; fi\nexport __BUILDTOOLS_USE_CSPROJ=true\n__BUILD_TOOLS_PACKAGE_VERSION=$(cat $__scriptpath/BuildToolsVersion.txt | tr -d '\\r\\n')\n__DOTNET_TOOLS_VERSION=$(cat $__scriptpath/DotnetCLIVersion.txt | tr -d '\\r\\n')\n__BUILD_TOOLS_PATH=$__PACKAGES_DIR/microsoft.dotnet.buildtools/$__BUILD_TOOLS_PACKAGE_VERSION/lib\n__INIT_TOOLS_RESTORE_PROJECT=$__scriptpath/init-tools.msbuild\n__INIT_TOOLS_DONE_MARKER_DIR=$__TOOLRUNTIME_DIR/$__BUILD_TOOLS_PACKAGE_VERSION\n__INIT_TOOLS_DONE_MARKER=$__INIT_TOOLS_DONE_MARKER_DIR/done_9\n\nif [ -z \"$__DOTNET_PKG\" ]; then\n    OSName=$(uname -s)\n    case $OSName in\n        Darwin)\n            OS=OSX\n            __PKG_RID=osx\n            ulimit -n 2048\n            # Format x.y.z as single integer with three digits for each part\n            VERSION=`sw_vers -productVersion| sed -e 's/\\./ /g' | xargs printf \"%03d%03d%03d\"`\n            if [ \"$VERSION\" -lt 010012000 ]; then\n                echo error: macOS version `sw_vers -productVersion` is too old. 10.12 is needed as minimum.\n                exit 1\n            fi\n            ;;\n\n        Linux)\n            OS=Linux\n            __PKG_RID=linux\n\n            if [ -e /etc/os-release ]; then\n                source /etc/os-release\n                if [[ $ID == \"alpine\" ]]; then\n                    __PKG_RID=\"linux-musl\"\n                fi\n\n            elif [ -e /etc/redhat-release ]; then\n                redhatRelease=$(</etc/redhat-release)\n                if [[ $redhatRelease == \"CentOS release 6.\"* || $redhatRelease == \"Red Hat Enterprise Linux Server release 6.\"* ]]; then\n                    __PKG_RID=rhel.6\n                fi\n            fi\n\n            ;;\n\n        *)\n            echo \"Unsupported OS '$OSName' detected. Downloading linux-$__HostArch tools.\"\n            OS=Linux\n            __PKG_RID=linux\n            ;;\n  esac\n  __PKG_RID=$__PKG_RID-$__HostArch\n  __DOTNET_PKG=dotnet-sdk-${__DOTNET_TOOLS_VERSION}-$__PKG_RID\nfi\n\ndisplay_error_message()\n{\n    echo \"Please check the detailed log that follows.\" 1>&2\n    cat \"$__init_tools_log\" 1>&2\n}\n\nif [ ! -e $__INIT_TOOLS_DONE_MARKER ]; then\n    __PATCH_CLI_NUGET_FRAMEWORKS=0\n\n    if [ -e $__TOOLRUNTIME_DIR ]; then rm -rf -- $__TOOLRUNTIME_DIR; fi\n    echo \"Running: $__scriptpath/init-tools.sh\" > $__init_tools_log\n\n    if [ ! -e $__DOTNET_PATH ]; then\n\n        mkdir -p \"$__DOTNET_PATH\"\n\n        if [ -n \"$DOTNET_TOOLSET_DIR\" ] && [ -d \"$DOTNET_TOOLSET_DIR/$__DOTNET_TOOLS_VERSION\" ]; then\n            echo \"Copying $DOTNET_TOOLSET_DIR/$__DOTNET_TOOLS_VERSION to $__DOTNET_PATH\" >> $__init_tools_log\n            cp -r $DOTNET_TOOLSET_DIR/$__DOTNET_TOOLS_VERSION/* $__DOTNET_PATH\n        elif [ -n \"$DOTNET_TOOL_DIR\" ] && [ -d \"$DOTNET_TOOL_DIR\" ]; then\n            echo \"Copying $DOTNET_TOOL_DIR to $__DOTNET_PATH\" >> $__init_tools_log\n            cp -r $DOTNET_TOOL_DIR/* $__DOTNET_PATH\n        else\n            echo \"Installing dotnet cli...\"\n            __DOTNET_LOCATION=\"https://dotnetcli.azureedge.net/dotnet/Sdk/${__DOTNET_TOOLS_VERSION}/${__DOTNET_PKG}.tar.gz\"\n            # curl has HTTPS CA trust-issues less often than wget, so lets try that first.\n            echo \"Installing '${__DOTNET_LOCATION}' to '$__DOTNET_PATH/dotnet.tar'\" >> $__init_tools_log\n            if command -v curl > /dev/null; then\n                curl --retry 10 -sSL --create-dirs -o $__DOTNET_PATH/dotnet.tar ${__DOTNET_LOCATION}\n            else\n                wget -q -O $__DOTNET_PATH/dotnet.tar ${__DOTNET_LOCATION}\n            fi\n            cd $__DOTNET_PATH\n            tar -xf $__DOTNET_PATH/dotnet.tar\n            if [ \"$?\" != \"0\" ]; then\n                echo \"ERROR: Could not download dotnet cli.\" 1>&2\n                display_error_message\n                exit 1\n            fi\n\n            cd $__scriptpath\n\n            __PATCH_CLI_NUGET_FRAMEWORKS=1\n        fi\n    fi\n\n\n    if [ -n \"$BUILD_TOOLS_TOOLSET_DIR\" ] && [ -d \"$BUILD_TOOLS_TOOLSET_DIR/$__BUILD_TOOLS_PACKAGE_VERSION\" ]; then\n        echo \"Copying $BUILD_TOOLS_TOOLSET_DIR/$__BUILD_TOOLS_PACKAGE_VERSION to $__TOOLRUNTIME_DIR\" >> $__init_tools_log\n        cp -r $BUILD_TOOLS_TOOLSET_DIR/$__BUILD_TOOLS_PACKAGE_VERSION/* $__TOOLRUNTIME_DIR\n    elif [ -n \"$BUILD_TOOLS_TOOL_DIR\" ] && [ -d \"$BUILD_TOOLS_TOOL_DIR\" ]; then\n        echo \"Copying $BUILD_TOOLS_TOOL_DIR to $__TOOLRUNTIME_DIR\" >> $__init_tools_log\n        cp -r $BUILD_TOOLS_TOOL_DIR/* $__TOOLRUNTIME_DIR\n    else\n        if [ ! -e $__BUILD_TOOLS_PATH ]; then\n            echo \"Restoring BuildTools version $__BUILD_TOOLS_PACKAGE_VERSION...\"\n            echo \"Running: $__DOTNET_CMD restore \\\"$__INIT_TOOLS_RESTORE_PROJECT\\\" --no-cache --packages $__PACKAGES_DIR --source $__BUILDTOOLS_SOURCE /p:BuildToolsPackageVersion=$__BUILD_TOOLS_PACKAGE_VERSION\" >> $__init_tools_log\n            $__DOTNET_CMD restore \"$__INIT_TOOLS_RESTORE_PROJECT\" --no-cache --packages $__PACKAGES_DIR --source $__BUILDTOOLS_SOURCE /p:BuildToolsPackageVersion=$__BUILD_TOOLS_PACKAGE_VERSION >> $__init_tools_log\n            if [ ! -e \"$__BUILD_TOOLS_PATH/init-tools.sh\" ]; then\n                echo \"ERROR: Could not restore build tools correctly.\" 1>&2\n                display_error_message\n            fi\n        fi\n\n        echo \"Initializing BuildTools...\"\n        echo \"Running: $__BUILD_TOOLS_PATH/init-tools.sh $__scriptpath $__DOTNET_CMD $__TOOLRUNTIME_DIR $__PACKAGES_DIR\" >> $__init_tools_log\n\n        # Executables restored with .NET Core 2.0 do not have executable permission flags. https://github.com/NuGet/Home/issues/4424\n        chmod +x $__BUILD_TOOLS_PATH/init-tools.sh\n        $__BUILD_TOOLS_PATH/init-tools.sh $__scriptpath $__DOTNET_CMD $__TOOLRUNTIME_DIR $__PACKAGES_DIR >> $__init_tools_log\n        if [ \"$?\" != \"0\" ]; then\n            echo \"ERROR: An error occurred when trying to initialize the tools.\" 1>&2\n            display_error_message\n            exit 1\n        fi\n\n        # Restore a custom RoslynToolset since we can't trivially update the BuildTools dependency in CoreRT\n        echo \"Configuring RoslynToolset...\"\n        # Also update __INIT_TOOLS_DONE_MARKER, init-tools.cmd, and dir.props\n        __ROSLYNCOMPILER_VERSION=3.3.0-beta2-19367-02\n        __DEFAULT_RESTORE_ARGS=\"--no-cache --packages \\\"${__PACKAGES_DIR}\\\"\"\n        __INIT_TOOLS_RESTORE_ARGS=\"${__DEFAULT_RESTORE_ARGS} --source https://dotnet.myget.org/F/roslyn/api/v3/index.json --source https://api.nuget.org/v3/index.json ${__INIT_TOOLS_RESTORE_ARGS:-}\"\n        __PORTABLETARGETS_PROJECT_CONTENT=\"\n        <Project>\n          <PropertyGroup>\n            <ImportDirectoryBuildProps>false</ImportDirectoryBuildProps>\n            <ImportDirectoryBuildTargets>false</ImportDirectoryBuildTargets>\n            <TargetFrameworks>netcoreapp1.0;net46</TargetFrameworks>\n            <DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>\n          </PropertyGroup>\n          <Import Project=\\\"Sdk.props\\\" Sdk=\\\"Microsoft.NET.Sdk\\\" />\n          <ItemGroup>\n            <PackageReference Include=\\\"MicroBuild.Core\\\" Version=\\\"$__MICROBUILD_VERSION\\\" />\n            <PackageReference Include=\\\"Microsoft.Net.Compilers.Toolset\\\" Version=\\\"$__ROSLYNCOMPILER_VERSION\\\" />\n          </ItemGroup>\n          <Import Project=\\\"Sdk.targets\\\" Sdk=\\\"Microsoft.NET.Sdk\\\" />\n        </Project>\"\n        __PORTABLETARGETS_PROJECT=${__TOOLRUNTIME_DIR}/generated/project.csproj\n        echo $__PORTABLETARGETS_PROJECT_CONTENT > \"${__PORTABLETARGETS_PROJECT}\"\n        echo \"Running: \\\"$__DOTNET_CMD\\\" restore \\\"${__PORTABLETARGETS_PROJECT}\\\" $__INIT_TOOLS_RESTORE_ARGS\"\n        $__DOTNET_CMD restore \"${__PORTABLETARGETS_PROJECT}\" $__INIT_TOOLS_RESTORE_ARGS\n    fi\n\n    echo \"Making all .sh files executable under Tools.\"\n    # Executables restored with .NET Core 2.0 do not have executable permission flags. https://github.com/NuGet/Home/issues/4424\n    ls $__scriptpath/Tools/*.sh | xargs chmod +x\n    ls $__scriptpath/Tools/scripts/docker/*.sh | xargs chmod +x\n\n    Tools/crossgen.sh $__scriptpath/Tools $__PKG_RID\n\n    mkdir -p $__INIT_TOOLS_DONE_MARKER_DIR\n    touch $__INIT_TOOLS_DONE_MARKER\n\n    echo \"Done initializing tools.\"\nelse\n    echo \"Tools are already initialized\"\nfi\n"
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "publish.msbuild",
          "type": "blob",
          "size": 1.548828125,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project ToolsVersion=\"14.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <Import Project=\"$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))\\dir.props\" />\n  <Import Project=\"$(PackagesDir)/$(FeedTasksPackage)/$(FeedTasksPackageVersion)/build/$(FeedTasksPackage).targets\" />\n\n  <PropertyGroup>\n     <PublishPattern Condition=\"'$(PublishPattern)' == ''\">$(PackageOutputRoot)**\\*.nupkg</PublishPattern>\n     <SymbolsPackagesPattern>$(PackageOutputRoot)**\\*.symbols.nupkg</SymbolsPackagesPattern>\n  </PropertyGroup>\n\n  <ItemGroup>\n     <_PackagesToPublish Include=\"$(PublishPattern)\" Exclude=\"$(SymbolsPackagesPattern)\" />\n     <_SymbolsPackagesToPublish Include=\"$(SymbolsPackagesPattern)\" />\n  </ItemGroup>      \n\n  <Target Name=\"PublishToAzureBlobFeed\">\n    <Error Condition=\"'@(_PackagesToPublish)'==''\" Text=\"ItemsToPush for packages is empty.\" />\n    <PushToBlobFeed ExpectedFeedUrl=\"$(ExpectedFeedUrl)\"\n                    AccountKey=\"$(AccountKey)\"\n                    ItemsToPush=\"@(_PackagesToPublish)\"\n                    Overwrite=\"$(PublishOverwrite)\" />\n  </Target>\n\n  <Target Name=\"PublishSymbolsToAzureBlobFeed\">\n    <Error Condition=\"'@(_SymbolsPackagesToPublish)'==''\" Text=\"ItemsToPush for packages is empty.\" />\n    <PushToBlobFeed ExpectedFeedUrl=\"$(ExpectedFeedUrl)\"\n                    AccountKey=\"$(AccountKey)\"\n                    ItemsToPush=\"@(_SymbolsPackagesToPublish)\"\n                    Overwrite=\"$(PublishOverwrite)\" />\n  </Target>\n\n</Project>\n"
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}