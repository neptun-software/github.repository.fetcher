{
  "metadata": {
    "timestamp": 1736710834899,
    "page": 354,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "microsoft/playwright-dotnet",
      "stars": 2546,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".azure-pipelines",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0498046875,
          "content": "* text=auto eol=lf\n*.sh eol=lf\n*.sln text eol=crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 6.0439453125,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n.DS_Store\n\n# User-specific files\n*.rsuser\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Mono auto generated files\nmono_crash.*\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\n[Aa][Rr][Mm]/\n[Aa][Rr][Mm]64/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n[Ll]ogs/\nnpkg/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n.vscode/\n# Uncomment if you have tasks that create the project's static files in assets\n#assets/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUnit\n*.VisualState.xml\nTestResult.xml\nnunit-*.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_h.h\n*.ilk\n*.meta\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*_wpftmp.csproj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/*\n!.axoCover/settings.json\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# NuGet Symbol Packages\n*.snupkg\n# The packages folder can be ignored because of Package Restore\n**/[Pp]ackages/*\n# except build/, which is used as an MSBuild target.\n!**/[Pp]ackages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/[Pp]ackages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n*.appxbundle\n*.appxupload\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!?*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk\n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n*- [Bb]ackup.rdl\n*- [Bb]ackup ([0-9]).rdl\n*- [Bb]ackup ([0-9][0-9]).rdl\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# CodeRush personal settings\n.cr/personal\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output\nASALocalRun/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder\n.mfractor/\n\n# Local History for Visual Studio\n.localhistory/\n\n# BeatPulse healthcheck temp database\nhealthchecksdb\n\n# Backup folder for Package Reference Convert tool in Visual Studio 2017\nMigrationBackup/\n\n# Ionide (cross platform F# VS Code tools) working folder\n.ionide/\n.idea\nsrc/Playwright.sln.DotSettings\nsrc/Playwright/.drivers\nsrc/Playwright/Microsoft.Playwright.xml\n\ntestCert.cer\n\ncoverage-report/\nsrc/Playwright.Tests/coverage.*.xml\n "
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.630859375,
          "content": "# How to Contribute\n\nYou can contribute to Playwright for .NET with issues and PRs.\n\n## Contribution Bar\n\nContributions must meet a certain standard of coding. To ensure this, the Project Maintainers perform regular Code Reviews.\nAdditionally, a suite of tests runs for each PR.\n\n## DOs and DON'Ts\nPlease do:\n\n* **DO** follow our coding style (C# code-specific)\n* **DO** include tests when adding new features. When fixing bugs, start with\n  adding a test that highlights how the current behavior is broken.\n* **DO** keep the discussions focused. When a new or related topic comes up\n  it's often better to create new issue than to side track the discussion.\n* **DO** blog and tweet (or whatever) about your contributions, frequently!\n\nPlease do not:\n\n* **DON'T** make PRs for style changes.\n* **DON'T** surprise us with big pull requests. Instead, file an issue and start\n  a discussion so we can agree on a direction before you invest a large amount\n  of time.\n* **DON'T** commit code that you didn't write. If you find code that you think is a good fit to add, file an issue and start a discussion before proceeding.\n* **DON'T** submit PRs that alter licensing related files or headers. If you believe there's a problem with them, file an issue and we'll be happy to discuss it.\n* **DON'T** add API additions without filing an issue and discussing with us first.\n\n## Breaking Changes\n\nPlaywright is evergreen. Breaking Changes _should not_ happen. If they do, they follow a strict process and should come from [upstream](https://github.com/microsoft/playwright).\n\n### Commit Messages\n\nCommit messages should follow the Semantic Commit Messages format:\n\n```\nlabel(namespace): title\n\ndescription\n\nfooter\n```\n\n1. *label* is one of the following:\n    - `fix` - playwright bug fixes.\n    - `feat` - playwright features.\n    - `docs` - changes to docs, e.g. `docs(api.md): ..` to change documentation.\n    - `test` - changes to playwright tests infrastructure.\n    - `devops` - build-related work, e.g. CI related patches and general changes to the browser build infrastructure\n    - `chore` - everything that doesn't fall under previous categories\n2. *namespace* is put in parenthesis after label and is optional. Must be lowercase.\n3. *title* is a brief summary of changes.\n4. *description* is **optional**, new-line separated from title and is in present tense.\n5. *footer* is **optional**, new-line separated from *description* and contains \"fixes\" / \"references\" attribution to GitHub issues.\n\nExample:\n\n```\nfix(firefox): make sure session cookies work\n\nThis patch fixes session cookies in firefox browser.\n\nFixes #123, fixes #234\n```\n\n## PR Feedback\n\nMicrosoft team and community members will provide feedback on your change. Community feedback is highly valued. You will often see the absence of team feedback if the community has already provided good review feedback.\n\nOne or more Microsoft team members will review every PR prior to merge. They will often reply with \"LGTM, modulo comments\". That means that the PR will be merged once the feedback is resolved. \"LGTM\" == \"looks good to me\".\n\nThere are lots of thoughts and [approaches](https://github.com/antlr/antlr4-cpp/blob/master/CONTRIBUTING.md#emoji) for how to efficiently discuss changes. It is best to be clear and explicit with your feedback. Please be patient with people who might not understand the finer details about your approach to feedback.\n\n## Development Workflow\n\n### Prerequisites\n\nBefore building the solution for the first time, you will need to download the drivers. You can do this by either running commands manually, or by using the provided script.\n\n#### Initialize\n\nWhen you get the repo, you need to download the drivers, dotnet format tool, etc. To do this, you can call:\n\n```bash\n./build.sh --download-driver\n```\n\n#### Dotnet Format\n\nTo help with formatting, you can make use of `dotnet format`. All you have to do is run\n\n```bash\ndotnet format\n```\n\nThe resulting code will follow our style guides. This is also enforced in our CI.\n\n## Writing Tests\n\n* Every feature should be accompanied by a test.\n* Every public API event/method should be accompanied by a test.\n\n### Running Tests Locally\n\n#### Running tests\n\nTests can either be executed in their entirety:\n\n```bash\ndotnet test -f net8.0 ./src/Playwright.Tests/Playwright.Tests.csproj --logger:\"console;verbosity=detailed\"\n```\n\nYou can also specify a single test to run:\n\n```bash\ndotnet test -f net8.0 ./src/Playwright.Tests/Playwright.Tests.csproj --logger:\"console;verbosity=detailed\" --filter Playwright.Tests.TapTests\n```\n\nAdditionally, you can use the Test Explorer if you're using Visual Studio.\n\n### Generating the APIs & rolling the driver (upstream)\n\nWe use [this](https://github.com/microsoft/playwright/blob/master/utils/doclint/generateDotnetApi.js) generator for the API and [that](https://github.com/microsoft/playwright/blob/master/utils/generate_dotnet_channels.js) for generating the transport channels. Both are located upstream.\n\nTo generate the API, identify the upstream driver version from the GitHub Actions logs of the point in time you wish to roll to, and run:\n\n```bash\n./build.sh --roll <driver-version>\n```\n\nThis will re-generate the necessary files for the new driver version.\n\n### Collecting coverage when running tests\n\n```shell\ndotnet tool install -g dotnet-reportgenerator-globaltool\n\ndotnet test -f net8.0 ./src/Playwright.Tests/Playwright.Tests.csproj --logger:\"console;verbosity=detailed\" -p:CollectCoverage=true -p:CoverletOutputFormat=cobertura -p:CoverletOutput=\"coverage.xml\" --filter \"Playwright.Tests.Assertions.PageAssertionsTests\"\nreportgenerator -reports:src/Playwright.Tests/coverage.net8.0.xml -targetdir:coverage-report -reporttypes:HTML\nopen coverage-report/index.html\n```\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 0.46484375,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project>\n  <PropertyGroup>\n    <LangVersion>12</LangVersion>\n  </PropertyGroup>\n  <PropertyGroup>\n    <DebugSymbols>true</DebugSymbols>\n    <DebugType>embedded</DebugType>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(TF_BUILD)' == 'true'\">\n    <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>\n    <EmbedUntrackedSources>true</EmbedUntrackedSources>\n    <Deterministic>true</Deterministic>\n  </PropertyGroup>\n</Project>"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "MIT License\n\nCopyright (c) 2020 Darío Kondratiuk\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.8505859375,
          "content": "# Playwright for .NET 🎭\n[![NuGet version](https://img.shields.io/nuget/v/Microsoft.Playwright?color=%2345ba4b)](https://www.nuget.org/packages/Microsoft.Playwright) [![Join Discord](https://img.shields.io/badge/join-discord-infomational)](https://aka.ms/playwright/discord)\n\n|          | Linux | macOS | Windows |\n|   :---   | :---: | :---: | :---:   |\n| Chromium <!-- GEN:chromium-version -->131.0.6778.33<!-- GEN:stop --> | ✅ | ✅ | ✅ |\n| WebKit <!-- GEN:webkit-version -->18.2<!-- GEN:stop --> | ✅ | ✅ | ✅ |\n| Firefox <!-- GEN:firefox-version -->132.0<!-- GEN:stop --> | ✅ | ✅ | ✅ |\n\nPlaywright for .NET is the official language port of [Playwright](https://playwright.dev), the library to automate [Chromium](https://www.chromium.org/Home), [Firefox](https://www.mozilla.org/en-US/firefox/new/) and [WebKit](https://webkit.org/) with a single API. Playwright is built to enable cross-browser web automation that is **ever-green**, **capable**, **reliable** and **fast**.\n\n## Documentation\n\n[https://playwright.dev/dotnet/docs/intro](https://playwright.dev/dotnet/docs/intro) \n\n## API Reference\n[https://playwright.dev/dotnet/docs/api/class-playwright](https://playwright.dev/dotnet/docs/api/class-playwright)\n\n\n```cs\nusing System.Threading.Tasks;\nusing Microsoft.Playwright;\n\nusing var playwright = await Playwright.CreateAsync();\nawait using var browser = await playwright.Chromium.LaunchAsync(new() { Headless = false });\nvar page = await browser.NewPageAsync();\nawait page.GotoAsync(\"https://playwright.dev/dotnet\");\nawait page.ScreenshotAsync(new() { Path = \"screenshot.png\" });\n```\n\n## Other languages\n\nMore comfortable in another programming language? [Playwright](https://playwright.dev) is also available in\n- [TypeScript](https://playwright.dev/docs/intro),\n- [Python](https://playwright.dev/python/docs/intro),\n- [Java](https://playwright.dev/java/docs/intro).\n"
        },
        {
          "name": "ROLLING.md",
          "type": "blob",
          "size": 0.77734375,
          "content": "# Rolling Playwright-dotnet\n\n## Pre-requisites\n\nInstall .NET SDK 8 with installer: https://dotnet.microsoft.com/download/dotnet/8.0\n\n## Rolling\n\n1. Checkout the upstream main/release branch of the `playwright` repository.\n1. Checkout the main/release branch of the `playwright-dotnet` repository.\n3. Pick the latest driver from GitHub Action where you want to roll to. For releases, it should be `1.X.Y`. For main branch, it should be something like `1.X.Y-<timestamp>`.\n4. By default it will pick the `playwright` project from `../playwright`. You can override it by setting the `PW_SRC_DIR` environment variable.\n\n```bash\n./build.sh --roll <driver-version>\n```\n\nThis will complete the entire process (download and set the new driver, re-generate API and transport channels, update the README).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.6923828125,
          "content": "<!-- BEGIN MICROSOFT SECURITY.MD V0.0.8 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/opensource/security/definition), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/opensource/security/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/opensource/security/pgpkey).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://aka.ms/opensource/security/msrc). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/opensource/security/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/opensource/security/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n"
        },
        {
          "name": "SUPPORT.md",
          "type": "blob",
          "size": 0.8056640625,
          "content": "# Support\n\n## How to file issues and get help\n\nThis project uses GitHub issues to track bugs and feature requests. Please search the [existing issues][gh-issues] before filing new ones to avoid duplicates. For new issues, file your bug or feature request as a new issue using corresponding template.\n\nFor help and questions about using this project, please see the [docs site for Playwright for .NET][docs].\n\nJoin our community [Discord Server][discord-server] to connect with other developers using Playwright and ask questions in our 'help-playwright' forum.\n\n## Microsoft Support Policy\n\nSupport for Playwright for .NET is limited to the resources listed above.\n\n[gh-issues]: https://github.com/microsoft/playwright-dotnet/issues/\n[docs]: https://playwright.dev/dotnet/\n[discord-server]: https://aka.ms/playwright/discord\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 2.0283203125,
          "content": "#!/bin/bash\nset -e\nset +x\n\ntrap \"cd $(pwd -P)\" EXIT\ncd \"$(dirname \"$0\")\"\n\nif [[ ($1 == '--help') || ($1 == '-h') ]]; then\n  echo \"usage: build.sh <command>\"\n  echo \"commands:\"\n  echo \"  --roll <version>      - roll the .NET language binding to a specific driver version\"\n  echo \"  --download-driver     - download the driver\"\n  echo \"  --help                - show this help\"\n  echo\n  exit 0\nfi\n\nif [[ $# == 0 ]]; then\n  echo \"missing command!\"\n  echo \"try './build.sh --help' for more information\"\n  exit 1\nfi\n\nupstream_repo_path=\"../playwright\"\nif [[ -n \"$PW_SRC_DIR\" ]]; then\n  upstream_repo_path=\"$PW_SRC_DIR\"\nfi\necho \"Upstream repo path: ${upstream_repo_path}\"\n\nfunction download_driver() {\n  echo \"downloading driver...\"\n  dotnet run --project ./src/tools/Playwright.Tooling/Playwright.Tooling.csproj -- download-drivers --basepath .\n  echo \"done\"\n}\n\nfunction roll_driver() {\n  new_driver_version=\"$1\"\n  upstream_package_version=$(node -e \"console.log(require('${upstream_repo_path}/package.json').version)\")\n  echo \"Rolling .NET driver to driver ${new_driver_version} and upstream version ${upstream_package_version}...\"\n\n  xml_file_path=\"./src/Common/Version.props\"\n  xml_file_contents=$(cat \"${xml_file_path}\")\n  xml_file_contents=$(echo \"${xml_file_contents}\" | sed \"s|<DriverVersion>.*</DriverVersion>|<DriverVersion>${new_driver_version}</DriverVersion>|\")\n  echo \"${xml_file_contents}\" > \"${xml_file_path}\"\n\n  echo \"Generating API...\"\n  rm -rf src/Playwright/API/Generated/\n  node \"$upstream_repo_path/utils/doclint/generateDotnetApi.js\" \"src/Playwright\"\n  echo \"Generating transport channels...\"\n  rm -rf \"src/Playwright/Transport/Protocol/Generated/\"\n  node \"$upstream_repo_path/utils/generate_dotnet_channels.js\" \"src/Playwright\"\n  echo \"Formatting source code...\"\n  dotnet format src/Playwright\n\n  download_driver\n\n  echo \"done\"\n}\n\nCMD=\"$1\"\nif [[ (\"$CMD\" == \"--roll\") ]]; then\n  roll_driver $2\nelif [[ (\"$CMD\" == \"--download-driver\") ]]; then\n  download_driver\nelse\n  echo \"ERROR: unknown command - $CMD\"\n  echo \"Pass --help for supported commands\"\n  exit 1\nfi"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}