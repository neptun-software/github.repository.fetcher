{
  "metadata": {
    "timestamp": 1736711031587,
    "page": 760,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "xamarin/XamarinCommunityToolkit",
      "stars": 1583,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 4.1650390625,
          "content": "# Suppress: EC112\n# top-most EditorConfig file\nroot = true\n\n# Default settings:\n# A newline ending every file\n# Use 4 spaces as indentation\n[*]\ninsert_final_newline = false\nindent_style = space\nindent_size = 4\n\n# Code files\n[*.{cs,csx,vb,vbx}]\nindent_style = tab\nindent_size = 4\n\n# Code files\n[*.sln]\nindent_size = 4\n\n# Xml project files\n[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]\nindent_size = 2\n\n# Xml config files\n[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]\nindent_size = 2\n\n# JSON files\n[*.json]\nindent_size = 2\n\n# XML files\n[*.xml]\nindent_size = 2\n\n# Dotnet code style settings:\n[*.{cs,vb}]\n# Sort using and Import directives with System.* appearing first\ndotnet_sort_system_directives_first = true\n# Avoid \"this.\" and \"Me.\" if not necessary\ndotnet_style_qualification_for_field = false:suggestion\ndotnet_style_qualification_for_property = false:suggestion\ndotnet_style_qualification_for_method = false:suggestion\ndotnet_style_qualification_for_event = false:suggestion\n\n# Use language keywords instead of framework type names for type references\ndotnet_style_predefined_type_for_locals_parameters_members = true:suggestion\ndotnet_style_predefined_type_for_member_access = true:suggestion\ndotnet_style_require_accessibility_modifiers = omit_if_default:warning\n\n# Suggest more modern language features when available\ndotnet_style_object_initializer = true:suggestion\ndotnet_style_collection_initializer = true:suggestion\ndotnet_style_coalesce_expression = true:suggestion\ndotnet_style_null_propagation = true:suggestion\ndotnet_style_explicit_tuple_names = true:suggestion\n\n# Naming Conventions:\n# Pascal Casing\ndotnet_naming_symbols.method_and_property_symbols.applicable_kinds= method,property,enum\ndotnet_naming_symbols.method_and_property_symbols.applicable_accessibilities = *\ndotnet_naming_style.pascal_case_style.capitalization = pascal_case\n\ndotnet_naming_rule.methods_and_properties_must_be_pascal_case.severity = warning\ndotnet_naming_rule.methods_and_properties_must_be_pascal_case.symbols = method_and_property_symbols\ndotnet_naming_rule.methods_and_properties_must_be_pascal_case.style = pascal_case_style\n\n# Non-public members must be lower-case\ndotnet_naming_symbols.non_public_symbols.applicable_kinds = field\ndotnet_naming_symbols.non_public_symbols.applicable_accessibilities = private\ndotnet_naming_style.all_lower_case_style.capitalization = camel_case\n\ndotnet_naming_rule.non_public_members_must_be_lower_case.severity = warning\ndotnet_naming_rule.non_public_members_must_be_lower_case.symbols = non_public_symbols\ndotnet_naming_rule.non_public_members_must_be_lower_case.style = all_lower_case_style\n\n# CSharp code style settings:\n[*.cs]\n# Do not prefer \"var\" everywhere\ncsharp_style_var_for_built_in_types = true:error\ncsharp_style_var_when_type_is_apparent = true:error\ncsharp_style_var_elsewhere = true:error\n\n# Prefer method-like constructs to have a block body\ncsharp_style_expression_bodied_methods = true:suggestion\ncsharp_style_expression_bodied_constructors = true:suggestion\ncsharp_style_expression_bodied_operators = true:suggestion\n\n# Prefer property-like constructs to have an expression-body\ncsharp_style_expression_bodied_properties = true:suggestion\ncsharp_style_expression_bodied_indexers = true:suggestion\ncsharp_style_expression_bodied_accessors = true:suggestion\n\n# Suggest more modern language features when available\ncsharp_style_pattern_matching_over_is_with_cast_check = true:suggestion\ncsharp_style_pattern_matching_over_as_with_null_check = true:suggestion\ncsharp_style_inlined_variable_declaration = true:suggestion\ncsharp_style_throw_expression = true:suggestion\ncsharp_style_conditional_delegate_call = true:suggestion\n\n# Newline settings\ncsharp_new_line_before_open_brace = all\ncsharp_new_line_before_else = true\ncsharp_new_line_before_catch = true\ncsharp_new_line_before_finally = true\ncsharp_new_line_before_members_in_object_initializers = true\ncsharp_new_line_before_members_in_anonymous_types = true\n\n# SA1011: Closing square brackets should be spaced correctly\ndotnet_diagnostic.SA1011.severity = none\n\n# CS4014: Because this call is not awaited, execution of the current method continues before the call is completed\ndotnet_diagnostic.CS4014.severity = error\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.6884765625,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n\n# Force bash scripts to always use lf line endings so that if a repo is accessed\n# in Unix via a file share from Windows, the scripts will work.\n*.sh text eol=lf\n\n# Force the docs to always use lf line endings\ndocs/**/*.xml text eol=lf"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.4443359375,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# ignore Xamarin.Android Resource.Designer.cs files\n**/*.Droid/**/[Rr]esource.[Dd]esigner.cs\n**/*.Android/**/[Rr]esource.[Dd]esigner.cs\n**/Android/**/[Rr]esource.[Dd]esigner.cs\n**/Droid/**/[Rr]esource.[Dd]esigner.cs\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n**/.DS_Store\n\n# MFractors (Xamarin productivity tool) working folder\n.mfractor/\n\n# mdoc folders, just used locally for now\ndocs/en\ndocs/tmp"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 13.4443359375,
          "content": "# Contributing\n\nThank you for your interest in contributing to XamarinCommunityToolkit! In this document we'll outline what you need to know about contributing and how to get started.\n\nFirst and foremost: we're all friends here. Whether you are a first-time contributor or a core team member from one of the associated projects, we welcome any and all people to contribute to our lovely little project. I mean, it is called *community* toolkit after all.\n\nHaving that said, if you are a first-timer and you could use some help please reach out to any core member. They will be happy to help you out or find someone who can.\n\nFurthermore, for anyone, we would like you to take into consideration the following guidelines.\n\n### Make an effort to be nice\n\nIf you disagree, that's fine. We don't think about everything the same way, be respectful and at some point decide to agree to disagree. If a decision needs to be made, try to involve at least one other person without continuing an endless discussion\n\nWhen you disagree with a piece of code that is written, try to be helpful and explain why you disagree or how things can be improved (according to you). Always remember there are numerous ways to solve things, there is not one right way, but it's always good to learn about alternatives\n\nDuring a code review try to make a habit out of it to say at least one nice thing. Obviously about something you like in the code. If a change is not that big or so straight-forward that you can't comment nicely on that, find something else to compliment the person. Make an effort to look at their profile of blog and mention something you like, make that persons day a bit better! <3\n\n### Make an effort to see it from their perspective\n\nRemember English is not everyones native language. Written communication always lacks non-verbal communication. With written communication in a language that is not your native tongue it is even harder to express certain emotions.\n\nAlways assume that people mean to do right. Try to read a sentence a couple of times over and take things more literal. Try to place yourself in their shoes and see the message beyond the actual words. \n\nThings might come across different than they were intended, please keep that in mind and always check to see how someone meant it. If you're not sure, pull someone offline in a private channel on Twitter or email and chat about it for a bit. Maybe even jump on a call to collaborate. We're living in the 21st century, all the tools are there, why not use them to get to know each other and be friends?!\n\nBesides language, we understand that contributing to open-source mostly happens in your spare time. Remember that priorities might change and we can only spend our time once. This works as a two-way street: don't expect things to be solved instantly, but also please let us know if you do not have the capacity to finish work you have in progress. There is no shame in that. That wat it's clear to other people that they can step in and take over.\n\n### THANK YOU!\n\nLastly, a big thank you for spending your precious time on our project. We appreciate any effort you make to help us with this project.\n\n## Code of Conduct\n\nPlease see our [Code of Conduct](https://dotnetfoundation.org/code-of-conduct).\n\nAs should be clear by now: we assume everyone tries to do their best, everyone should be treated with respect and equally.\n\nIn the unfortunate event that doesn't happen, please feel free to report it to any of the team members or reach out to [Gerald](maillo:gerald.versluis@microsoft.com) directly.\n\nWe will take appropriate actions and measures if necessary.\n\n## Prerequisites\n\nYou will need to complete a Contribution License Agreement before any pull request can be accepted. Complete the CLA at https://cla.dotnetfoundation.org/. This will also be triggered whenever you open a PR and the link should guide you through it.\n\n## Opening a PR process\n\n### TL;DR\n* Find an issue/feature, make sure that the issue/feature has been approved and is welcomed (also see [Proposal States](#Proposal-States))\n* Fork repository\n* Create branch\n* Implement\n* Open a PR\n* We merge\n* High-fives all-around\n\n### Please consider\n\n#### Tabs vs. Spaces?!\n[Tabs](https://www.reddit.com/r/javascript/comments/c8drjo/nobody_talks_about_the_real_reason_to_use_tabs/).\n\n#### Make your changes small, don't keep adding\nWe love your enthusiasm, but small changes and small PRs are easier to digest. We're all doing this in our spare time, it is easier to review a couple of small things and merge that and iterate from there than to have a PR with 100+ files changed that will sit there forever\n\n#### Added features should have tests and a sample\nWe like quality as much as the next person, so please provide tests where possible.\n\nIn addition, we would want a new feature or change to be as clear as possible for other developers. Please add a sample to the sample app as part of your PR.\n\n## Contributing Code - Best Practices\n\n### Enums\n* Always use `Unknown` at index 0 for return types that may have a value that is not known\n* Always use `Default` at index 0 for option types that can use the system default option\n* Follow naming guidelines for tense... `SensorSpeed` not `SensorSpeeds`\n* Assign values (0,1,2,3) for all enums\n\n### Property Names\n* Include units only if one of the platforms includes it in their implementation. For instance HeadingMagneticNorth implies degrees on all platforms, but PressureInHectopascals is needed since platforms don't provide a consistent API for this.\n\n### Units\n* Use the standard units and most well accepted units when possible. For instance Hectopascals are used on UWP/Android and iOS uses Kilopascals so we have chosen Hectopascals.\n\n### Style\n* Prefer using `==` when checking for null instead of `is`\n\n<!-- ### Exceptions\n\nWe currently prefer different ways of indicating that nothing can be done:\n\n - do nothing\n - throw `FeatureNotSupportedException`\n - throw `PlatformNotSupportedException`\n - throw `FeatureNotEnabledException`\n\nOne case where we throw `FeatureNotSupportedException` is with the sensors: if there is no sensor X, then we throw.\n\nOne case (and the only case so far) where we throw `PlatformNotSupportedException` is in Android's text-to-speech API: if we try and speak, but we couldn't initialize, then we throw.\n\nSo far, I was able to determine that we throw `FeatureNotSupportedException` for:\n - the sensors on all platforms if we aren't able to access the hardware\n    - we throw in the start and the stop (this one may be overkill, we can probably first check to see if it is started, and if not then just do nothing)\n - the Android external browser if there was no browser installed\n - the email API\n    - Android: if there is no `message/rfc822` intent handler\n    - iOS: (if the mail VC can't send, or if the `mailto:` doesn't have an app, or if trying to send HTML over the `mailto:` protocol\n    - UWP: if the `EmailManager` is not available, or if trying to send HTML\n - the flashlight API on all platforms if there is no camera flash hardware\n - the phone dialler \n    - Android / iOS: if the OS can't handle the `tel:` protocol\n    - UWP: the `PhoneCallManager` is missing\n - the sms API\n    - Android: if there is no `smsto:` intent handler\n    - iOS: (if the message VC can't send\n    - UWP: if the `ChatMessageManager` is not available\n - the vibration API on UWP if the `VibrationDevice` is not available or if no hardware was found\n\nWe throw a `PlatformNotSupportedException` for:\n - Android when we aren't able to initialize the text-to-speech engine\n\nWe throw a `FeatureNotEnabledException` for:\n - Geolocation if no providers are found\n\nWe do \"nothing\":\n - the Vibration API on iOS and android never actually checks, it just starts it\n - the Map API on Android and UWP just starts the URI, assuming that something will be there\n - the Geolocation API always assumes that there is a GPS and throws a `FeatureNotEnabledException` if there was no way to get the hardware\n - the KeepScreenOn feature just assumes the window flag will be honoured (probably is, but is there an api level/hardware limit?)\n - the energy saver API on android pre-Lollipop \n\n## Documentation - mdoc\n\nThis project uses [mdoc](http://www.mono-project.com/docs/tools+libraries/tools/monodoc/generating-documentation/) to document types, members, and to add small code snippets and examples.  mdoc files are simple xml files and there is an msbuild target you can invoke to help generate the xml placeholders.\n\nRead the [Documenting your code with mdoc wiki page](https://github.com/xamarin/Essentials/wiki/Documenting-your-code-with-mdoc) for more information on this process.\n\nEvery pull request which affects public types or members should include corresponding mdoc xml file changes.-->\n\n### Bug Fixes\n\nIf you're looking for something to fix, please browse [open issues](https://github.com/xamarin/XamarinCommunityToolkit/issues). \n\nFollow the style used by the [.NET Foundation](https://github.com/dotnet/runtime/blob/master/docs/coding-guidelines/coding-style.md), with two primary exceptions:\n\n- We do not use the `private` keyword as it is the default accessibility level in C#.\n- We will **not** use `_` or `s_` as a prefix for internal or private field names\n- We will use `camelCaseFieldName` for naming internal or private fields in both instance and static implementations\n\nRead and follow our [Pull Request template](https://github.com/xamarin/XamarinCommunityToolkit/blob/main/.github/PULL_REQUEST_TEMPLATE.md)\n\n### Proposals\n\nTo propose a change or new feature, review the guidance below and then [open an issue using this template](https://github.com/xamarin/XamarinCommunityToolkit/issues/new).\n\n#### Non-Starter Topics\nThe following topics should generally not be proposed for discussion as they are non-starters:\n\n* Large renames of APIs\n* Large non-backward-compatible breaking changes\n* Platform-Specifics which can be accomplished without changing XamarinCommunityToolkit\n* Avoid clutter posts like \"+1\" which do not serve to further the conversation, please use the emoji resonses for that\n\n#### Guiding Principles for New Features\n\nAny proposals for new feature work and new APIs should follow the spirit of these principles:\n\n * APIs should be simple, direct, and generally implemented with static classes and methods whenever practical\n * New features should have native APIs available to allow implementation on a reasonable subset of the supported platforms, especially  (iOS, Android, UWP)\n * No new external dependencies should be added to support implementation of new feature work (there can be exceptions but they must be thoroughly considered for the value being added)\n\n#### Approval Process\n* Provide as much detail as possible so the team and community can have a good discussion about your proposal.\n* If the proposal is for a complex issue more detailed specifications might need to be created.\n* For especially large proposals consider how it could be broken up into multiple proposals to make it easier to review. \n* When you think your proposal is ready to be implemented ask for approval from the XamarinCommunityToolkit team.\n* One or more approvals from XamarinCommunityToolkit team are required to approve a proposal. The number of required approvers will be based on the size and complexity of the proposal.\n* Once the proposal is approved by the XamarinCommunityToolkit team you can ask to be assigned the proposal and you can start on a PR.\n\n#### Proposal States\n##### Open\nOpen proposals are still under discussion. Please leave your concrete, constructive feedback on this proposal. +1s and other clutter posts which do not add to the discussion will be removed.\n\n##### Accepted\nAccepted proposals are proposals that both the community and core XamarinCommunityToolkit team agree should be a part of this toolkit. These proposals are ready for implementation, but do not yet have a developer actively working on them. These proposals are available for anyone to work on, both community and the core XamarinCommunityToolkit team.\n\nIf you wish to start working on an accepted proposal, please reply to the thread so we can mark you as the implementor and change the title to In Progress. This helps to avoid multiple people working on the same thing. If you decide to work on this proposal publicly, feel free to post a link to the branch as well for folks to follow along.\n\n###### What \"Accepted\" does mean\n* Any community member is welcome to work on the idea.\n* The core XamarinCommunityToolkit team _may_ consider working on this idea on their own, but has not done so until it is marked \"In Progress\" with a team member assigned as the implementor.\n* Any pull request implementing the proposal will be welcomed with an API and code review.\n\n###### What \"Accepted\" does not mean\n* The proposal will ever be implemented, either by a community member or by the core XamarinCommunityToolkit team.\n* The core XamarinCommunityToolkit team is committing to implementing a proposal, even if nobody else does. Accepted proposals simply mean that the core XamarinCommunityToolkit team and the community agree that this proposal should be a part of XamarinCommunityToolkit.\n\n##### In Progress\nOnce a developer has begun work on a proposal, either from the core XamarinCommunityToolkit team or a community member, the proposal is marked as in progress with the implementors name and (possibly) a link to a development branch to follow along with progress.\n\n#### Rejected\nRejected proposals will not be implemented or merged into XamarinCommunityToolkit. Once a proposal is rejected, the thread will be closed and the conversation is considered completed, pending considerable new information or changes.\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 0.875,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n\n  <PropertyGroup Condition=\"'$(MSBuildProjectExtension)' == '.csproj'\">\n    <LangVersion>latest</LangVersion>\n    <Nullable>enable</Nullable>\n    <WarningsAsErrors>nullable</WarningsAsErrors>\n  </PropertyGroup>\n\n  <PropertyGroup>\n    <CodeAnalysisRuleSet>$(MSBuildThisFileDirectory)Xamarin.CommunityToolkit.ruleset</CodeAnalysisRuleSet>\n    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>\n  </PropertyGroup>\n\n  <PropertyGroup Condition=\" '$(Configuration)'=='Release' \">\n    <GenerateDocumentationFile>true</GenerateDocumentationFile>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"StyleCop.Analyzers\" Version=\"1.1.118\" PrivateAssets=\"All\" />\n    <AdditionalFiles Include=\"$(MSBuildThisFileDirectory)stylecop.json\" InProject=\"false\" />\n  </ItemGroup>\n\n</Project>\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0849609375,
          "content": "The MIT License (MIT)\nCopyright (c) .NET Foundation and Contributors\nAll Rights Reserved\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "MauiCompat.sh",
          "type": "blob",
          "size": 57.5888671875,
          "content": "dotnet new mauilib -o ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat -n Xamarin.CommunityToolkit.MauiCompat\ndotnet new mauilib -o ./src/Markup/Xamarin.CommunityToolkit.Markup.MauiCompat -n Xamarin.CommunityToolkit.Markup.MauiCompat\n\ndotnet new sln -o ./src/CommunityToolkit/ -n Xamarin.CommunityToolkit.MauiCompat\ndotnet sln ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat.sln add ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Xamarin.CommunityToolkit.MauiCompat.csproj\n\ndotnet new sln -o ./src/Markup/ -n Xamarin.CommunityToolkit.Markup.MauiCompat\ndotnet sln ./src/Markup/Xamarin.CommunityToolkit.Markup.MauiCompat.sln add ./src/Markup/Xamarin.CommunityToolkit.Markup.MauiCompat/Xamarin.CommunityToolkit.Markup.MauiCompat.csproj\n\nsed -i '' 's/<ImplicitUsings>enable/<ImplicitUsings>false/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/Xamarin.CommunityToolkit.MauiCompat.csproj\nsed -i '' 's/<ImplicitUsings>enable/<ImplicitUsings>false/g' ./src/Markup/Xamarin.CommunityToolkit.Markup.MauiCompat/**/Xamarin.CommunityToolkit.Markup.MauiCompat.csproj\n\nprintf > ./src/CommunityToolkit/Directory.build.props \"<Project>\n    <PropertyGroup>\n        <Nullable>enable</Nullable>\n        <PackageId>Xamarin.CommunityToolkit.MauiCompat</PackageId>\n        <Summary>A .NET MAUI Comapatible version of Xamarin.CommunityToolkit, a community-created toolkit with common Xamarin converters, effects, behaviors etc.</Summary>\n        <PackageTag>maui,net,xamarin,ios,android,uwp,xamarin.forms,effects,controls,converters,animations,toolkit,kit,communitytoolkit,xamarincommunitytoolkit,watchos,tvos,tizen,Microsoft.Toolkit.Xamarin.Forms</PackageTag>\n        <Title>Xamarin.CommunityToolkit.MauiCompat</Title>\n        <Description>Xamarin.CommunityToolkit.MauiCompat is a collection of Animations, Behaviors, Converters, and Effects for mobile development with .NET MAUI. It is the .NET MAUI Compatible version of Xamarin.CommunityToolkit.</Description>\n        <PackageIcon>icon.png</PackageIcon>\n        <PackageVersion>\\$(Version)\\$(VersionSuffix)</PackageVersion>\n        <Authors>Microsoft</Authors>\n        <Owners>microsoft</Owners>\n        <NeutralLanguage>en</NeutralLanguage>\n        <Copyright>© Microsoft Corporation. All rights reserved.</Copyright>\n        <RepositoryUrl>https://github.com/xamarin/XamarinCommunityToolkit</RepositoryUrl>\n        <PackageReleaseNotes>See: http://aka.ms/xct-release-notes</PackageReleaseNotes>\n        <DefineConstants>\\$(DefineConstants);</DefineConstants>\n        <UseFullSemVerForNuGet>false</UseFullSemVerForNuGet>\n        <PackageLicenseExpression>MIT</PackageLicenseExpression>\n        <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>\n        <PackageProjectUrl>https://github.com/xamarin/XamarinCommunityToolkit</PackageProjectUrl>\n        <EnableDefaultCompileItems>false</EnableDefaultCompileItems>\n        <Version>1.3.0-pre4</Version>\n    </PropertyGroup>    \n\n    <ItemGroup>\n        <Compile Include=\\\"**/*.shared.cs\\\" />\n        <Compile Include=\\\"**/*.shared.*.cs\\\" />    \n        <None Include=\\\"../../../LICENSE\\\" PackagePath=\\\"\\\" Pack=\\\"true\\\" />\n        <None Include=\\\"../../../assets/XamarinCommunityToolkit_128x128.png\\\" PackagePath=\\\"icon.png\\\" Pack=\\\"true\\\" />\n    </ItemGroup>\n\n    <ItemGroup Condition=\\\" \\$(TargetFramework.Contains(-android)) \\\">\n        <Compile Include=\\\"**\\*.android.cs\\\" />\n        <Compile Include=\\\"**\\*.android.*.cs\\\" />\n        <AndroidResource Include=\\\"Resources\\**\\*.axml\\\" />\n        <AndroidResource Include=\\\"Resources\\**\\*.xml\\\" />\n        <AndroidResource Include=\\\"Resources\\**\\*.png\\\" />\n    </ItemGroup>\n\n    <ItemGroup Condition=\\\" \\$(TargetFramework.Contains(-ios)) \\\">\n        <Compile Include=\\\"**\\*.ios.cs\\\" />\n        <Compile Include=\\\"**\\*.ios.*.cs\\\" />\n    </ItemGroup>\n\n    <ItemGroup Condition=\\\" \\$(TargetFramework.Contains('-windows')) \\\">\n        <Compile Include=\\\"**\\*.uwp.cs\\\" />\n        <Compile Include=\\\"**\\*.uwp.*.cs\\\" />\n        <Compile Remove=\\\"**\\MediaElementRenderer.uwp.cs\\\" />\n        <Compile Remove=\\\"**\\CameraViewRenderer.uwp.cs\\\" />\n        <Compile Remove=\\\"**\\DrawingViewRenderer.uwp.cs\\\" />\n        <Compile Remove=\\\"**\\DrawingViewService.uwp.cs\\\" />\n    </ItemGroup>\n\n    <ItemGroup Condition=\\\" \\$(TargetFramework.Contains('-maccatalyst')) \\\">\n        <Compile Include=\\\"**\\*.ios.cs\\\" />\n        <Compile Include=\\\"**\\*.ios.*.cs\\\" />\n    </ItemGroup>\n\n    <ItemGroup Condition=\\\" !\\$(TargetFramework.Contains('-')) \\\">\n        <Compile Include=\\\"**\\*.netstandard.cs\\\" />\n        <Compile Include=\\\"**\\*.netstandard.*.cs\\\" />\n    </ItemGroup>\n    <PropertyGroup Condition=\\\" !\\$(TargetFramework.Contains('-')) \\\">\n        <DefineConstants>\\$(DefineConstants);NETSTANDARD</DefineConstants>\n    </PropertyGroup>\n\n</Project>\"\n\nprintf > ./src/Markup/Directory.build.props \"<Project>\n    <PropertyGroup>\n        <Nullable>enable</Nullable>\n        <PackageId>Xamarin.CommunityToolkit.Markup.MauiCompat</PackageId>\n        <Summary>A .NET MAUI-compatible community-created toolkit with C# Markup classes and fluent helper methods</Summary>\n        <Authors>Microsoft</Authors>\n        <Owners>Microsoft</Owners>\n        <NeutralLanguage>en</NeutralLanguage>\n        <Copyright>© Microsoft Corporation. All rights reserved.</Copyright> \n        <PackageLicenseExpression>MIT</PackageLicenseExpression> \n        <PackageProjectUrl>https://github.com/xamarin/XamarinCommunityToolkit</PackageProjectUrl> \n        <RepositoryUrl>https://github.com/xamarin/XamarinCommunityToolkit</RepositoryUrl>\n        <PackageReleaseNotes>See: http://aka.ms/xct-release-notes</PackageReleaseNotes>\n        <DefineConstants>\\$(DefineConstants);</DefineConstants>\n        <UseFullSemVerForNuGet>false</UseFullSemVerForNuGet>\n        <Title>Xamarin.CommunityToolkit.Markup.MauiCompat</Title>\n        <Description>Xamarin Community Toolkit Markup MauiCompat is a set of fluent helper methods and classes to simplify building declarative .NET MAUI user interfaces in C#</Description>\n        <PackageIcon>icon.png</PackageIcon>\n        <Product>\\$(AssemblyName) (\\$(TargetFramework))</Product>\n        <PackageVersion>\\$(Version)\\$(VersionSuffix)</PackageVersion>\n        <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>\n        <Version>1.3.0-pre4</Version>\n        <PackageTags>maui,net,xamarin,xamarin.forms,toolkit,kit,communitytoolkit,xamarincommunitytoolkit,markup,csharpformarkup,csharp,csharpmarkup</PackageTags>\n    </PropertyGroup>\n    \n    <ItemGroup>\n        <None Include=\\\"../../../LICENSE\\\" PackagePath=\\\"\\\" Pack=\\\"true\\\" />\n        <None Include=\\\"../../../assets/XamarinCommunityToolkit_128x128.png\\\" PackagePath=\\\"icon.png\\\" Pack=\\\"true\\\" />\n    </ItemGroup>\n</Project>\"\n\nfind ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/ -name \"*\" ! -name \"*.csproj\" -delete\nfind ./src/Markup/Xamarin.CommunityToolkit.Markup.MauiCompat/ -name \"*\" ! -name \"*.csproj\" -delete\n\nrsync -avr --exclude='*.csproj' --exclude='bin' --exclude='obj' ./src/CommunityToolkit/Xamarin.CommunityToolkit/ ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/\nrsync -avr --exclude='*.csproj' --exclude='bin' --exclude='obj' ./src/Markup/Xamarin.CommunityToolkit.Markup/ ./src/Markup/Xamarin.CommunityToolkit.Markup.MauiCompat/ \n\n# Preserve\n\nsed -i '' 's/\\[Preserve(/\\[Microsoft.Maui.Controls.Internals.Preserve(/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\n# Internals\n\nsed -i '' 's/using Xamarin.Forms.Internals/using Microsoft.Maui.Controls.Internals/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' '/Forms.Internals.Log/d' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\n# WeakEventManager\n\nsed -i '' 's/ Forms.WeakEventManager/ Microsoft.Maui.WeakEventManager/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\n# Forms.Image\n\nsed -i '' 's/Xamarin.Forms.Image/Microsoft.Maui.Controls.Image/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/Forms.Image/Microsoft.Maui.Controls.Image/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\n# Colors\nsed -i '' 's/ Forms\\.Color\\.Default/ default(Microsoft.Maui.Graphics.Color)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/Snackbar/**/**.cs\nsed -i '' 's/ Color\\.Default\\./ new Microsoft.Maui.Graphics.Color()./g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/Snackbar/**/SnackBarAppearance*.cs\nsed -i '' 's/ Color\\.Default/ default(Microsoft.Maui.Graphics.Color)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/Snackbar/**/**.cs\nsed -i '' 's/ == Forms.Color.Default/ .Equals(new Microsoft.Maui.Graphics.Color())/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/ == XColor.Default/ .Equals(new Microsoft.Maui.Graphics.Color())/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/using Color = Xamarin.Forms.Color;/using Color = Microsoft.Maui.Graphics.Color;/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/ Color\\./ Colors./g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/\\tColor\\./\\tColors./g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/Xamarin.Forms.Color/Microsoft.Maui.Graphics.Color/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/ Forms\\.Color/ Microsoft.Maui.Graphics.Color/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/\\tForms\\.Color/\\tMicrosoft.Maui.Graphics.Color/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/Colors\\.From/Color\\.From/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/Colors.Default/new Microsoft.Maui.Graphics.Color()/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/ Color.FromRgba/ new Microsoft.Maui.Graphics.Color/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/\\tColor.FromRgba/\\tnew Microsoft.Maui.Graphics.Color/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/\\.R,/.Red,/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/\\.G,/.Green,/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/\\.B,/.Blue,/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/\\.A,/.Alpha,/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/\\.R /.Red /g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/\\.G /.Green /g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/\\.B /.Blue /g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/\\.A /.Alpha /g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/\\.R)/.Red)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/\\.G)/.Green)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/\\.B)/.Blue)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/\\.A)/.Alpha)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/\\.A:/.Alpha:/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/r.IsDefault)/r.IsDefault())/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/.MultiplyAlpha(/.MultiplyAlpha((float)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/\\.Hue/.GetHue()/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/\\.Saturation/.GetSaturation()/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/\\.Luminosity/.GetLuminosity()/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\n# Nullability\n\nsed -i '' 's/event EventHandler<VisualElementChangedEventArgs>? ElementChanged/event EventHandler<VisualElementChangedEventArgs> ElementChanged/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/\\.PropertyName\\./.PropertyName?./g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/(object sender, PropertyChangedEventArgs e)/(object? sender, PropertyChangedEventArgs e)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\n# PlatformEffect\n\nsed -i '' 's/: Xamarin.Forms.Platform.iOS.PlatformEffect/: Microsoft.Maui.Controls.Platform.PlatformEffect/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/: PlatformEffect/: Microsoft.Maui.Controls.Platform.PlatformEffect/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\n# Platforms\n\nsed -i '' 's/if MONOANDROID10_0/if ANDROID/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/if MONOANDROID/if ANDROID/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/if !MONOANDROID/if ANDROID/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/if __ANDROID_29__/if ANDROID/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/using Xamarin.Forms.Platform.Android.FastRenderers;/using Microsoft.Maui.Controls.Compatibility.Platform.Android.FastRenderers;/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/using Xamarin.Forms.Platform.Android;/using Microsoft.Maui.Controls.Compatibility.Platform.Android; using Microsoft.Maui.Controls.Platform;/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/using Xamarin.Forms.Platform.iOS/using Microsoft.Maui.Controls.Compatibility.Platform.iOS/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/using Xamarin.Forms.Platform.GTK/using Microsoft.Maui.Controls.Compatibility.Platform.GTK/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/using Xamarin.Forms.Platform.Tizen/using Microsoft.Maui.Controls.Compatibility.Platform.Tizen/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/using Xamarin.Forms.Platform.UWP/using Microsoft.Maui.Controls.Compatibility.Platform.UWP/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/using Xamarin.Forms.Platform.MacOS/using Microsoft.Maui.Controls.Compatibility.Platform.MacOS/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/Xamarin.Forms.PlatformConfiguration/Microsoft.Maui.Controls.PlatformConfiguration/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/Xamarin.Forms.Platform/Microsoft.Maui.Controls.Compatibility.Platform/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\n# IVisualElementRenderer\n\nsed -i '' '/IVisualElementRenderer.ViewGroup/d' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/event EventHandler<VisualElementChangedEventArgs>/event EventHandler<Microsoft.Maui.Controls.Platform.VisualElementChangedEventArgs>/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/new VisualElementChangedEventArgs/new Microsoft.Maui.Controls.Platform.VisualElementChangedEventArgs/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/new ElementChangedEventArgs/new Microsoft.Maui.Controls.Platform.ElementChangedEventArgs/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/(ElementChangedEventArgs/(Microsoft.Maui.Controls.Platform.ElementChangedEventArgs/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\n# TextAlignment\n\nsed -i '' 's/Xamarin.Forms.TextAlignment/Microsoft.Maui.TextAlignment/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\n# ElementChangedEventArgs\n\nsed -i '' 's/override void OnElementChanged(ElementChangedEventArgs/override void OnElementChanged(Microsoft.Maui.Controls.Platform.ElementChangedEventArgs/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\n# XAML\n\nsed -i '' 's/using Xamarin.Forms.Xaml;/using Microsoft.Maui.Controls.Xaml;/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/Forms.Xaml/Microsoft.Maui.Controls.Xaml/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\n# Effects\n\nsed -i '' 's/Xamarin.Forms.ExportEffect(/Microsoft.Maui.Controls.ExportEffect(/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\n## Font\n\nsed -i '' 's/Element.Font/Element.ToFont()/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\n## Internals\n\nsed -i '' 's/Element.Font/Element.ToFont()/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\n#Forms.Internals.Log\n\n# TypeConverter\n\nsed -i '' 's/Xamarin.Forms.TypeConverter/System.ComponentModel.TypeConverter/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/\\[TypeConverter/\\[System.ComponentModel.TypeConverter/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/\\[TypeConversion/\\[System.ComponentModel.TypeConverter/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/\\[Microsoft.Maui.Controls.Xaml.TypeConversion/\\[System.ComponentModel.TypeConverter/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/\\[Forms.TypeConverter/\\[System.ComponentModel.TypeConverter/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/ TypeConverter/ System.ComponentModel.TypeConverter/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/Xamarin.Forms.UriTypeConverter/Microsoft.Maui.Controls.UriTypeConverter/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/ConvertFromInvariantString(string value)/ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object valueObject)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/ConvertFromInvariantString(string\\? value)/ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object valueObject)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/if (value != null)/if (valueObject is not string value){throw new InvalidOperationException(\"Only typeof(string) allowed\");}if (value != null)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Helpers/SafeAreaTypeConverter.shared.cs\n\nsed -i '' 's/if (value == null)/if (valueObject is not string value){throw new InvalidOperationException(\"Only typeof(string) allowed\");}if (value == null)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Core/MediaSourceConverter.shared.cs\n\nsed -i '' 's/return/if (valueObject is not string value){throw new InvalidOperationException(\"Only typeof(string) allowed\");}return/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Core/FileMediaSourceConverter.shared.cs\n\nsed -i '' 's/return/if (valueObject is not string value){throw new InvalidOperationException(\"Only typeof(string) allowed\");}return/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Views/MediaElement/UriTypeConverter.shared.cs\n\n# Font\n\nsed -i '' '/else if (e.PropertyName == Label.FontProperty.PropertyName)/,+1d' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/Font.FontSize/Font.Size/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' '1s/^/using Font = Microsoft.Maui.Font;/' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackBarActionOptions.shared.cs\n\nsed -i '' '1s/^/using Font = Microsoft.Maui.Font;/' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackBar.android.cs\n\nsed -i '' '1s/^/using Font = Microsoft.Maui.Font;/' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackBar.ios.macos.cs\n\nsed -i '' '1s/^/using Font = Microsoft.Maui.Font;/' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/MessageOptions.shared.cs\n\n## ToUIFont\n\nsed -i '' '1s/^/using Microsoft.Maui.Controls.Platform;using Microsoft.Extensions.DependencyInjection;/' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackBarAppearance.ios.cs\n\nsed -i '' 's/Forms.Font.Default.ToUIFont();/Microsoft.Maui.Font.Default.ToUIFont(Microsoft.Maui.Controls.Application.Current?.Handler.MauiContext?.Services.GetRequiredService<IFontManager>());/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackBarAppearance.ios.cs\n\nsed -i '' '1s/^/using Microsoft.Maui.Controls.Platform;using Microsoft.Extensions.DependencyInjection;/' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackBar.ios.macos.cs\n\nsed -i '' 's/.Font.ToUIFont();/.Font.ToUIFont(sender.Handler?.MauiContext?.Services.GetRequiredService<IFontManager>());/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackBar.ios.macos.cs\n\n# Typeface\n\n## SnackBar.android\n\nsed -i '' '1s/^/using Microsoft.Maui.Controls.Platform;using Microsoft.Extensions.DependencyInjection;/' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackBar.android.cs\n\nsed -i '' 's/if (arguments.MessageOptions.Font != Font.Default)/var fontManager = sender.Handler?.MauiContext?.Services.GetRequiredService<IFontManager>();\\\n\\\n\t\t\tif (fontManager is null)\\\n\t\t\t{\\\n\t\t\t\tthrow new ArgumentException(\"Unable to get IFontManager implementation\");\\\n\t\t\t}\\\nif (arguments.MessageOptions.Font != Font.Default)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackBar.android.cs\n\nsed -i '' 's/ToTypeface()/ToTypeface(fontManager)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackBar.android.cs\n\n## TextSwitcherRenderer.android\nsed -i '' 's/var newTypeface = f.ToTypeface();/var fontManager = Element.Handler?.MauiContext?.Services.GetRequiredService<IFontManager>();\\\n\\\n\t\t\tif (fontManager is null)\\\n\t\t\t{\\\n\t\t\t\tthrow new ArgumentException(\"Unable to get IFontManager implementation\");\\\n\t\t\t}\\\nvar newTypeface = f.ToTypeface(fontManager);/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/TextSwitcherRenderer.android.cs\nsed -i '' 's/child.RecalculateSpanPositions(/Xamarin.CommunityToolkit.Extensions.Internals.TextViewExtensions.RecalculateSpanPositions(child, /g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/TextSwitcherRenderer.android.cs\n\n\n# Controls \n\nsed -i '' 's/Xamarin.Forms.Page/Microsoft.Maui.Controls.Page/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/Xamarin.Forms.View/Microsoft.Maui.Controls.View/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/Forms.View/Microsoft.Maui.Controls.View/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\n# Layouts\n\nsed -i '' 's/ Layout / Microsoft.Maui.Controls.Layout /g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/ Layout)/ Microsoft.Maui.Controls.Layout)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/using static Xamarin.Forms.AbsoluteLayout/using static Microsoft.Maui.Controls.Compatibility.AbsoluteLayout;using Microsoft.Maui.Layouts;using AbsoluteLayout = Microsoft.Maui.Controls.Compatibility.AbsoluteLayout/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/StackLayout/\\tMicrosoft.Maui.Controls.StackLayout/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/ GridLength/ Microsoft.Maui.GridLength/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/\\tGridLength/\\tMicrosoft.Maui.GridLength/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/(GridLength/(Microsoft.Maui.GridLength/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/<GridLength/<Microsoft.Maui.GridLength/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\n\nsed -i '' 's/ Grid/ Microsoft.Maui.Controls.Compatibility.Grid/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/\\tGrid/\\tMicrosoft.Maui.Controls.Compatibility.Grid/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/(Grid/(Microsoft.Maui.Controls.Compatibility.Grid/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/<Grid/<Microsoft.Maui.Controls.Compatibility.Grid/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\n# Graphics\n\nsed -i '' 's/Xamarin.Forms.Point/Microsoft.Maui.Graphics.Point/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/Xamarin.Forms.Size/Microsoft.Maui.Graphics.Size/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/Xamarin.Forms.View/Microsoft.Maui.Controls.View/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\n# ViewExtensions\n\nsed -i '' 's/\\tViewExtensions./\\tMicrosoft.Maui.Controls.ViewExtensions./g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\n# *.android.cs\n\nsed -i '' 's/ContainerView/Microsoft.Maui.Controls.Platform.Compatibility.ContainerView/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/*.android.cs\nsed -i '' 's/ContainerView(Context, basePopup.Content/ContainerView(Context, basePopup.Content, Microsoft.Maui.Controls.Application.Current?.Handler.MauiContext/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/PopupRenderer.android.cs\n\nsed -i '' 's/View.Context.ToPixels(/Microsoft.Maui.Platform.ContextExtensions.ToPixels(View.Context ?? throw new NullReferenceException(), /g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/*.android.cs\nsed -i '' 's/Context.ToPixels(/Microsoft.Maui.Platform.ContextExtensions.ToPixels(Context, /g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/*.android.cs\nsed -i '' 's/context.ToPixels(/Microsoft.Maui.Platform.ContextExtensions.ToPixels(context, /g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/*.android.cs\n\nsed -i '' 's/Resource.Id/Xamarin.CommunityToolkit.MauiCompat.Resource.Id/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/*.android.cs\nsed -i '' 's/Resource.Layout/Xamarin.CommunityToolkit.MauiCompat.Resource.Layout/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/*.android.cs\n\nsed -i '' '1s/^/using Path = Android.Graphics.Path;/' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/*.android.cs\n\nsed -i '' '1s/^/using Paint = Android.Graphics.Paint;/' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/*.android.cs\n\nsed -i '' 's/ShapeDrawable/global::Android.Graphics.Drawables.ShapeDrawable/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/*.android.cs\n\n# BarStyle.android.cs\n\nsed -i '' '1s/^/using Window = Android.Views.Window;/' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/BarStyle.android.cs\n\n# TextSwitcherRenderer.android.cs\n\nsed -i '' 's/(visualElementRenderer?.OnTouchEvent(e) ?? false) || //g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/TextSwitcherRenderer.android.cs\n\nsed -i '' 's/f.ToScaledPixel()/(float)f.Size/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/TextSwitcherRenderer.android.cs\n\nsed -i '' 's/children.ForEach(/Array.ForEach(children,/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/TextSwitcherRenderer.android.cs\n\nsed -i '' '1s/^/using Microsoft.Extensions.DependencyInjection;/' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/TextSwitcherRenderer.android.cs\n\nsed -i '' 's/ToAttributed(Element.ToFont(), Element.TextColor, nextView);/ToSpannableString(Microsoft.Maui.Controls.Application.Current?.Handler.MauiContext?.Services.GetRequiredService<IFontManager>(), defaultColor: Element.TextColor);/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/TextSwitcherRenderer.android.cs\n\n## PlatformTouchEffect.ios.cs\n\nsed -i '' 's/(isStarted ? color : control.BackgroundColor).ToCGColor()/Microsoft.Maui.Platform.ColorExtensions.ToCGColor(isStarted ? color : control.BackgroundColor)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/PlatformTouchEffect.ios.cs\n\n## DrawingViewRenderer.ios.cs\n\nsed -i '' 's/void OnLinesCollectionChanged(object sender/void OnLinesCollectionChanged(object? sender/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/DrawingViewRenderer.ios.cs\n\nsed -i '' 's/currentPoint.ToPoint()/Microsoft.Maui.Platform.CoreGraphicsExtensions.ToPoint(currentPoint)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/DrawingViewRenderer.ios.cs\n\n# DrawingViewService.ios.cs\n\nsed -i '' 's/backgroundColor.ToCGColor()/Microsoft.Maui.Platform.ColorExtensions.ToCGColor(backgroundColor)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/DrawingViewService.ios.cs\n\nsed -i '' 's/strokeColor.ToCGColor()/Microsoft.Maui.Platform.ColorExtensions.ToCGColor(strokeColor)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/DrawingViewService.ios.cs\n\nsed -i '' 's/line.LineColor.ToCGColor()/Microsoft.Maui.Platform.ColorExtensions.ToCGColor(line.LineColor)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/DrawingViewService.ios.cs\n\n# SnackbarAppearance.ios.cs\n\nsed -i '' '1s/^/using Microsoft.Maui;using Microsoft.Maui.Controls.Compatibility.Platform.iOS;using Microsoft.Maui.Graphics;/' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackbarAppearance.ios.cs\n\nsed -i '' 's/color.A /color.Alpha /g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackbarAppearance.ios.cs\n\n# Snackbar.android.cs\n\nsed -i '' 's/await GetRendererWithRetries(sender)/(await GetRendererWithRetries(sender))?.View ?? sender.ToPlatform(sender.Handler.MauiContext)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackBar.android.cs\nsed -i '' 's/renderer.View/renderer/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackBar.android.cs\nsed -i '' 's/namespace/using Microsoft.Maui.Platform;namespace/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackBar.android.cs\n\n# IconTintColorEffectRouter.android.cs\n\nsed -i '' 's/args.PropertyName?.Equals(IconTintColorEffect.TintColorProperty.PropertyName)/args.PropertyName?.Equals(IconTintColorEffect.TintColorProperty.PropertyName) is true/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/IconTintColorEffectRouter.android.cs\n\nsed -i '' 's/args.PropertyName?.Equals(Microsoft.Maui.Controls.Image.SourceProperty.PropertyName)/args.PropertyName?.Equals(Microsoft.Maui.Controls.Image.SourceProperty.PropertyName) is true/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/IconTintColorEffectRouter.android.cs\n\nsed -i '' 's/args.PropertyName?.Equals(Microsoft.Maui.Controls.ImageButton.SourceProperty.PropertyName)/args.PropertyName?.Equals(Microsoft.Maui.Controls.ImageButton.SourceProperty.PropertyName) is true/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/IconTintColorEffectRouter.android.cs\n\nsed -i '' 's/SetImageViewTintColor(ImageView image, Color color)/SetImageViewTintColor(ImageView image, Microsoft.Maui.Graphics.Color color)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/IconTintColorEffectRouter.android.cs\n\nsed -i '' 's/SetButtonTintColor(Button button, Color color)/SetButtonTintColor(Button button, Microsoft.Maui.Graphics.Color color)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/IconTintColorEffectRouter.android.cs\n\nsed -i '' '1s/^/using Button = Android.Widget.Button;/' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/IconTintColorEffectRouter.android.cs\n\n# IconTintColorEffectRouter.ios.cs\n\nsed -i '' 's/args.PropertyName?.Equals(IconTintColorEffect.TintColorProperty.PropertyName)/args.PropertyName?.Equals(IconTintColorEffect.TintColorProperty.PropertyName) is true/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/IconTintColorEffectRouter.ios.cs\n\nsed -i '' 's/args.PropertyName?.Equals(Image.SourceProperty.PropertyName)/args.PropertyName?.Equals(Microsoft.Maui.Controls.Image.SourceProperty.PropertyName) is true/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/IconTintColorEffectRouter.ios.cs\n\nsed -i '' 's/args.PropertyName?.Equals(ImageButton.SourceProperty.PropertyName)/args.PropertyName?.Equals(Microsoft.Maui.Controls.ImageButton.SourceProperty.PropertyName) is true/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/IconTintColorEffectRouter.ios.cs\n\n# SemanticEffectRouterBase.ios.cs\n\nsed -i '' 's/(T)Element.Effects.FirstOrDefault(e => e is T)/(T)Element.Effects.First(e => e is T);/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SemanticEffectRouterBase.ios.cs\n\n# CameraViewRenderer.android.cs\n\nsed -i '' 's/visualElementRenderer?.OnTouchEvent(e) is true || //g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/CameraViewRenderer.android.cs\n\nsed -i '' 's/static void MeasureExactly(AView control, VisualElement? element, Context? context)/static void MeasureExactly(AView control, VisualElement? element, Context context)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/CameraViewRenderer.android.cs\n\nsed -i '' 's/Context.GetFragmentManager();/Microsoft.Maui.Platform.ContextExtensions.GetFragmentManager(Context ?? throw new NullReferenceException()) ?? throw new InvalidOperationException();/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/CameraViewRenderer.android.cs\n\n# CameraViewRenderer.ios.cs\n\nsed -i '' 's/RequestAvAsset/RequestAVAsset/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/CameraViewRenderer.ios.cs\n\n# VisualElementExtension.shared.cs\n\nsed -i '' 's/v,/(float)v,/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/VisualElementExtension.shared.cs\nsed -i '' 's/, v/, (float)v/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/VisualElementExtension.shared.cs\nsed -i '' 's/.Descendants()/.GetVisualTreeDescendants()/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/VisualElementExtensions.uwp.cs\n\n# NativeSnackBar.ios.macos.cs\n\nsed -i '' 's/public SnackBarLayout Microsoft.Maui.Controls.Layout/public SnackBarLayout Layout/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/NativeSnackBar.ios.macos.cs\n\n# NativeSnackBarButton.ios.macos.cs\n\nsed -i '' 's/LineBreakMode =/TitleLabel.LineBreakMode =/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/NativeSnackButton.ios.macos.cs\n\n# VisualFeedbackEffect.shared.cs\n\nsed -i '' 's/nativeColor.Alpha/nativeColor.A/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/VisualFeedbackEffect.shared.cs\n\n# VisualFeedbackEffectRouter.shared.cs\n\nsed -i '' 's/nativeColor.Alpha/nativeColor.A/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/VisualFeedbackEffectRouter.android.cs\n\n# PlatformShadowEffect.ios.macos.cs\n\nsed -i '' 's/ShadowEffect.GetColor(Element).ToCGColor()/Microsoft.Maui.Platform.ColorExtensions.ToCGColor(ShadowEffect.GetColor(Element))/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/PlatformShadowEffect.ios.macos.cs\n\nsed -i '' 's/using Xamarin.CommunityToolkit.Android.Effects;/using System;using Xamarin.CommunityToolkit.Android.Effects;/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/PlatformShadowEffect.android.cs\n\n# PlatformTouchEffect.android.cs\nsed -i '' 's/ViewGroup? Group => Container ?? Control as ViewGroup;/ViewGroup? Group => (Container ?? Control) as ViewGroup;/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/PlatformTouchEffect.android.cs\nsed -i '' 's/XColor.Transparent/Microsoft.Maui.Graphics.Colors.Transparent/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/PlatformTouchEffect.android.cs\nsed -i '' 's/new Rectangle/new Rect/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/PlatformTouchEffect.android.cs\n\n# ColorExtension.shared.cs\n\nsed -i '' 's/(double)/(float)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/ColorExtension.shared.cs\nsed -i '' 's/WithRed(this Color baseColor, double newR)/WithRed(this Color baseColor, float newR)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/ColorExtension.shared.cs\nsed -i '' 's/WithGreen(this Color baseColor, double newG)/WithGreen(this Color baseColor, float newG)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/ColorExtension.shared.cs\nsed -i '' 's/WithBlue(this Color baseColor, double newB)/WithBlue(this Color baseColor, float newB)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/ColorExtension.shared.cs\nsed -i '' 's/WithAlpha(this Color baseColor, double newA)/WithAlpha(this Color baseColor, float newA)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/ColorExtension.shared.cs\nsed -i '' 's/WithCyan(this Color baseColor, double newC)/WithCyan(this Color baseColor, float newC)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/ColorExtension.shared.cs\nsed -i '' 's/WithMagenta(this Color baseColor, double newM)/WithMagenta(this Color baseColor, float newM)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/ColorExtension.shared.cs\nsed -i '' 's/WithYellow(this Color baseColor, double newY)/WithYellow(this Color baseColor, float newY)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/ColorExtension.shared.cs\nsed -i '' 's/WithBlackKey(this Color baseColor, double newK)/WithBlackKey(this Color baseColor, float newK)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/ColorExtension.shared.cs\nsed -i '' 's/double GetPercentBlackKey/float GetPercentBlackKey/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/ColorExtension.shared.cs\nsed -i '' 's/double GetPercentCyan/float GetPercentCyan/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/ColorExtension.shared.cs\nsed -i '' 's/double GetPercentMagenta/float GetPercentMagenta/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/ColorExtension.shared.cs\nsed -i '' 's/double GetPercentYellow/float GetPercentYellow/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/ColorExtension.shared.cs\n\n# TouchEffect.shared.cs\n\nsed -i '' 's/OnLayoutChildAdded(layout, new ElementEventArgs(view));/OnLayoutChildAdded(layout, new ElementEventArgs((Element)view));/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/TouchEffect.shared.cs\n\n# GravatarImageExtension.shared.cs\nsed -i '' 's/using System;/using System;using Microsoft.Extensions.DependencyInjection;/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/GravatarImageExtension.shared.cs\n\n# AvatarView.shared.cs\n\nsed -i '' 's/using System;/using System;using static Microsoft.Maui.Controls.Compatibility.AbsoluteLayout;using Microsoft.Maui.Layouts;using AbsoluteLayout = Microsoft.Maui.Controls.Compatibility.AbsoluteLayout;/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/AvatarView.shared.cs\nsed -i '' 's/uriSource\\.GetStreamAsync/((IStreamImageSource)uriSource).GetStreamAsync/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/AvatarView.shared.cs\n\n# MotionEventHelper.android.cs \n\nsed -i '' '/if (layout.CascadeInputTransparent)/,+1d' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/MotionEventHelper.android.cs\n\n# StateLayoutController.shared.cs\n\nsed -i '' 's/Microsoft.Maui.Controls.Grid/Microsoft.Maui.Controls.Compatibility.Grid/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/StateLayoutController.shared.cs\n\n# TabBadgeTemplate.shared.cs\n\nsed -i '' 's/Frame/Microsoft.Maui.Controls.Frame/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/TabBadgeTemplate.shared.cs\n\n# Device.macOS\n\nsed -i '' 's/Device.macOS/Device.MacCatalyst/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/*.shared.cs\n\n# CameraFragment.android.cs\n\nsed -i '' 's/MauiCompat.Resource.Layout.CameraFragment/MauiCompat.Resource.Layout.camerafragment/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/CameraFragment.android.cs\nsed -i '' 's/namespace/using RectF = Android.Graphics.RectF;namespace/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/CameraFragment.android.cs\n\n# RangeSlider.shared.cs\n\nsed -i '' 's/return value.Clamp(MinimumValue, MaximumValue);/return Math.Clamp(value, MinimumValue, MaximumValue);/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/RangeSlider.shared.cs\n\n# Replace Xamarin.Forms Namespace\n\nsed -i '' 's/using Xamarin.Forms;/using Microsoft.Maui; using Microsoft.Maui.Controls; using Microsoft.Maui.Graphics; using Microsoft.Maui.Controls.Compatibility;/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/using Xamarin.Forms;/using Microsoft.Maui; using Microsoft.Maui.Controls; using Microsoft.Maui.Graphics; using Microsoft.Maui.Controls.Compatibility;/g' ./src/Markup/Xamarin.CommunityToolkit.Markup.MauiCompat/**/**.cs\nsed -i '' 's/using Microsoft.Maui.Controls.Compatibility;/using Microsoft.Maui.Controls.Compatibility;using Microsoft.Maui.Layouts;using FlexLayout = Microsoft.Maui.Controls.FlexLayout;/g' ./src/Markup/Xamarin.CommunityToolkit.Markup.MauiCompat/ViewInFlexLayoutExtensions.cs\nsed -i '' 's/Xamarin.Forms/Microsoft.Maui.Controls/g' ./src/Markup/Xamarin.CommunityToolkit.Markup.MauiCompat/ElementExtensions.cs\nsed -i '' 's/Xamarin.Forms.Rectangle/Microsoft.Maui.Graphics.Rect/g' ./src/Markup/Xamarin.CommunityToolkit.Markup.MauiCompat/RelativeLayout.cs\nsed -i '' 's/Xamarin.Forms.RelativeLayout/Microsoft.Maui.Controls.Compatibility.RelativeLayout/g' ./src/Markup/Xamarin.CommunityToolkit.Markup.MauiCompat/RelativeLayout.cs\nsed -i '' 's/Xamarin.Forms.View/Microsoft.Maui.Controls.View/g' ./src/Markup/Xamarin.CommunityToolkit.Markup.MauiCompat/RelativeLayout.cs\nsed -i '' 's/Xamarin.Forms.Constraint/Microsoft.Maui.Controls.Compatibility.Constraint/g' ./src/Markup/Xamarin.CommunityToolkit.Markup.MauiCompat/RelativeLayout.cs\nsed -i '' 's/using Microsoft.Maui.Controls.Compatibility;/using Microsoft.Maui.Controls.Compatibility;using Grid = Microsoft.Maui.Controls.Grid;/g' ./src/Markup/Xamarin.CommunityToolkit.Markup.MauiCompat/ViewInGridExtensions.cs\nsed -i '' 's/using Xamarin.Forms.Shapes;/using Microsoft.Maui.Controls.Shapes;using Rect = Microsoft.Maui.Graphics.Rect;/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Effects/CornerRadius/CornerRadiusEffect.shared.cs\nsed -i '' 's/new Rectangle/new Rect/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/*.shared.cs\n\n# MauiColorExtensions\nprintf > ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Extensions/MauiColorExtensions.android.cs \"\nusing AColor = Android.Graphics.Color;\n\nnamespace Xamarin.CommunityToolkit.MauiCompat\n{\n\tpublic static partial class MauiColorExtensions\n\t{\n\t\tpublic static AColor ToAndroid(this Microsoft.Maui.Graphics.Color self)\n\t\t{\n\t\t\tvar colorToConvert = self;\n\n\t\t\tif (colorToConvert == null)\n\t\t\t{\n\t\t\t\tcolorToConvert = Microsoft.Maui.Graphics.Colors.Transparent;\n\t\t\t}\n\n\t\t\treturn Microsoft.Maui.Controls.Compatibility.Platform.Android.ColorExtensions.ToAndroid(colorToConvert);\n\t\t}\n\t}\n}\"\n\nprintf > ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Extensions/MauiColorExtensions.ios.cs \"\nusing iColor = UIKit.UIColor;\n\nnamespace Xamarin.CommunityToolkit.MauiCompat\n{\n\tpublic static partial class MauiColorExtensions\n\t{\n\t\tpublic static iColor ToUIColor(this Microsoft.Maui.Graphics.Color self)\n\t\t{\n\t\t\tvar colorToConvert = self;\n\t\t\tif (colorToConvert == null)\n\t\t\t{\n\t\t\t\tcolorToConvert = Microsoft.Maui.Graphics.Colors.Transparent;\n\t\t\t}\n\n\t\t\treturn Microsoft.Maui.Platform.ColorExtensions.ToPlatform(colorToConvert);\n\t\t}\n\t}\n}\"\n\nsed -i '' 's/public class/using Xamarin.CommunityToolkit.MauiCompat; public class/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Effects/IconTintColor/IconTintColorEffectRouter.ios.cs\nsed -i '' 's/public class/using Xamarin.CommunityToolkit.MauiCompat; public class/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Effects/StatusBar/PlatformStatusBarEffect.ios.cs\nsed -i '' 's/\\[Foundation.Preserve(AllMembers = true)/using Xamarin.CommunityToolkit.MauiCompat; \\[Foundation.Preserve(AllMembers = true)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Effects/VisualFeedback/VisualFeedbackEffectRouter.ios.cs\nsed -i '' 's/public class/using Xamarin.CommunityToolkit.MauiCompat; public class/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Views/DrawingView/Renderer/DrawingViewRenderer.ios.cs\nsed -i '' 's/public class/using Xamarin.CommunityToolkit.MauiCompat; public class/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Views/MediaElement/iOS/MediaElementRenderer.ios.cs\nsed -i '' 's/public class/using Xamarin.CommunityToolkit.MauiCompat; public class/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Views/Popup/iOS/PopupRenderer.ios.cs\nsed -i '' 's/public class/using Xamarin.CommunityToolkit.MauiCompat; public class/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Views/Snackbar/SnackBar.ios.macos.cs\nsed -i '' 's/public class/using Xamarin.CommunityToolkit.MauiCompat; public class/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Views/Snackbar/Helpers/iOS/SnackBarAppearance.ios.cs\nsed -i '' 's/UIColor.SystemGrayColor/UIColor.SystemGray/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Views/Snackbar/Helpers/iOS/SnackBarAppearance.ios.cs\n\nsed -i '' 's/public class/using Xamarin.CommunityToolkit.MauiCompat; public class/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Effects/IconTintColor/IconTintColorEffectRouter.android.cs\nsed -i '' 's/public class/using Xamarin.CommunityToolkit.MauiCompat; public class/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Effects/Shadow/PlatformShadowEffect.android.cs\nsed -i '' 's/public class/using Xamarin.CommunityToolkit.MauiCompat; public class/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Effects/StatusBar/PlatformStatusBarEffect.android.cs\nsed -i '' 's/public class/using Xamarin.CommunityToolkit.MauiCompat; public class/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Effects/Touch/PlatformTouchEffect.android.cs\nsed -i '' 's/\\[Microsoft.Maui.Controls.Internals.Preserve(AllMembers = true)/using Xamarin.CommunityToolkit.MauiCompat; \\[Microsoft.Maui.Controls.Internals.Preserve(AllMembers = true)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Effects/VisualFeedback/VisualFeedbackEffectRouter.android.cs\nsed -i '' 's/public class/using Xamarin.CommunityToolkit.MauiCompat; public class/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/PlatformConfiguration/AndroidSpecific/NavigationBar/PlatformNavigationBarEffect.android.cs\nsed -i '' 's/public class/using Xamarin.CommunityToolkit.MauiCompat; public class/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Views/CameraView/Android/CameraFragment.android.cs\nsed -i '' 's/public class/using Xamarin.CommunityToolkit.MauiCompat; public class/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Views/DrawingView/Renderer/DrawingViewRenderer.android.cs\nsed -i '' 's/public class/using Xamarin.CommunityToolkit.MauiCompat; public class/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Views/DrawingView/Service/DrawingViewService.android.cs\nsed -i '' 's/public class/using Xamarin.CommunityToolkit.MauiCompat; public class/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Views/MediaElement/Android/MediaElementRenderer.android.cs\nsed -i '' 's/public class/using Xamarin.CommunityToolkit.MauiCompat; public class/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Views/Snackbar/SnackBar.android.cs\nsed -i '' 's/public class/using Xamarin.CommunityToolkit.MauiCompat; public class/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Views/ViewSwitcher/BackgroundManager.android.cs\nsed -i '' 's/public class/using Xamarin.CommunityToolkit.MauiCompat; public class/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Views/ViewSwitcher/TextSwitcherRenderer.android.cs\n\n# StreamMediaSource\n\nsed -i '' 's/readonly object synchandle = new object();/public bool IsEmpty => Stream == null; readonly object synchandle = new object();/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Core/StreamMediaSource.shared.cs\n\n# nfloat\n\nsed -i '' 's/nfloat/System.Runtime.InteropServices.NFloat/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\n# PlatformStatusBarEffect\n\nsed -i '' 's/FormsAppCompatActivity/MauiAppCompatActivity/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/PlatformStatusBarEffect.android.cs\nsed -i '' 's/Activity.SetStatusBarColor/Activity.Window.SetStatusBarColor/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/PlatformStatusBarEffect.android.cs\n\n# AVMediaType\n\nsed -i '' 's/photoOutput.ConnectionFromMediaType(AVMediaType.Video)/photoOutput.ConnectionFromMediaType(new NSString(\"video\"))/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/AVCaptureDevice.DevicesWithMediaType(AVMediaType.Video)/AVCaptureDevice.DevicesWithMediaType(\"video\")/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/AVMediaType.Audio/AVMediaTypes.Audio/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/AVMediaType.Video/AVAuthorizationMediaType.Video/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\n# Log\n\nsed -i '' 's/using System;/using System;using Microsoft.Extensions.Logging;/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/Log\\./(Microsoft.Maui.Controls.Application.Current?.Handler.MauiContext?.Services.GetService(typeof(ILogger)) as ILogger)?.Log/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\n# WINUI\nsed -i '' 's/using Xamarin.CommunityToolkit.UI.Views;/using Xamarin.CommunityToolkit.UI.Views;using Microsoft.Maui.Controls.Compatibility;/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\nsed -i '' 's/UAP10_0/WINDOWS/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/**.cs\n\nsed -i '' 's/using Windows.UI.Xaml/using Microsoft.UI.Xaml/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/LifeCycleEffectRouter.uwp.cs\n\nsed -i '' 's/using Windows.UI.Xaml/using Microsoft.UI.Xaml/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/RemoveBorderEffect.uwp.cs\n\nsed -i '' 's/using Windows.UI.Xaml/using Microsoft.UI.Xaml/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SelectAllTextEffect.uwp.cs\n\nsed -i '' 's/using Windows.UI.Xaml/using Microsoft.UI.Xaml/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SemanticEffectRouter.uwp.cs\n\nsed -i '' 's/using Windows.UI.Xaml/using Microsoft.UI.Xaml/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SemanticEffectRouterBase.uwp.cs\nsed -i '' 's/Microsoft.Maui.Controls.Compatibility.Platform.UWP.PlatformEffect/Microsoft.Maui.Controls.Platform.PlatformEffect/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SemanticEffectRouterBase.uwp.cs\n\nsed -i '' 's/using Xamarin.CommunityToolkit.UWP.Effects;/using Xamarin.CommunityToolkit.UWP.Effects;using Microsoft.Maui.Platform;/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/PlatformStatusBarEffect.uwp.cs\n\nsed -i '' 's/using Windows.UI.Xaml/using Microsoft.UI.Xaml/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/PlatformTouchEffect.uwp.cs\n\nsed -i '' 's/using Windows.UI.Xaml/using Microsoft.UI.Xaml/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SemanticExtensions.uwp.cs\nsed -i '' 's/using Microsoft.UI.Xaml;/using Microsoft.UI.Xaml;using Window = Microsoft.UI.Xaml.Window;/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SemanticExtensions.uwp.cs\n\nsed -i '' 's/view.IsInNativeLayout = true;//g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/ViewToRendererConverter.uwp.cs\nsed -i '' 's/view.IsInNativeLayout = false;//g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/ViewToRendererConverter.uwp.cs\nsed -i '' 's/Rectangle/Rect/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/ViewToRendererConverter.uwp.cs\nsed -i '' 's/Microsoft.Maui.Controls.Layout/Layout/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/ViewToRendererConverter.uwp.cs\nsed -i '' 's/using Windows.UI.Xaml/using Microsoft.UI.Xaml/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/ViewToRendererConverter.uwp.cs\nsed -i '' 's/using Microsoft.UI.Xaml;/using Microsoft.UI.Xaml;using Microsoft.UI.Xaml.Shapes;using Layout = Microsoft.Maui.Controls.Compatibility.Layout;/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/ViewToRendererConverter.uwp.cs\n\nsed -i '' 's/using Microsoft.Maui.Controls.Compatibility.Platform.UWP;/using Microsoft.Maui.Controls.Compatibility.Platform.UWP;using Microsoft.Maui.Controls.Platform;/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/ImageSourceValidator.android.ios.macos.uwp.wpf.gtk.tizen.cs\n\nsed -i '' 's/if NETSTANDARD || __WATCHOS__ || __TVOS__/if NETSTANDARD || __WATCHOS__ || __TVOS__ || WINDOWS/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/DrawingViewService.shared.cs\n\nsed -i '' 's/Windows.UI.Xaml/Microsoft.UI.Xaml/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/GravatarImageSourceHandler.uwp.cs\nsed -i '' 's/using Microsoft.Maui.Controls.Compatibility.Platform.UWP;/using Microsoft.Maui.Controls.Compatibility.Platform.UWP;using Microsoft.Maui.Controls.Platform;/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/GravatarImageSourceHandler.uwp.cs\n\nsed -i '' 's/Windows.UI.Xaml/Microsoft.UI.Xaml/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/AspectExtensions.uwp.cs\n\nsed -i '' 's/Windows.UI.Xaml/Microsoft.UI.Xaml/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/PopupRenderer.uwp.cs\nsed -i '' 's/using Microsoft.Maui.Controls.Compatibility.Platform.UWP;/using Microsoft.Maui.Controls.Compatibility.Platform.UWP;using Microsoft.Maui.Platform;/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/PopupRenderer.uwp.cs\n\nsed -i '' 's/using Windows.UI.Xaml/using Microsoft.UI.Xaml/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SemanticOrderViewRenderer.uwp.cs\nsed -i '' 's/if (element is VisualElement ve)/if (element is FrameworkElement ve)/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SemanticOrderViewRenderer.uwp.cs\n\nsed -i '' 's/MasterDetailPage/FlyoutPage/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/NavigationExtensions.uwp.cs\n\nsed -i '' 's/Windows.UI/Microsoft.UI/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/PlatformShadowEffect.uwp.cs\nsed -i '' 's/using Microsoft.Maui.Controls.Compatibility.Grid = Xamarin.Forms.Grid;/using Microsoft.Maui.Platform;using Application = Microsoft.Maui.Controls.Application;/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/PlatformShadowEffect.uwp.cs\nsed -i '' 's/Layout<View>/Microsoft.Maui.Controls.StackLayout/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/PlatformShadowEffect.uwp.cs\nsed -i '' 's/var renderer = shadowPanel?.Children.First().GetOrCreateRenderer();/var renderer = shadowPanel?.Children.First().ToPlatform(Application.Current.MainPage.Handler?.MauiContext);/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/PlatformShadowEffect.uwp.cs\nsed -i '' 's/ElementCompositionPreview.SetElementChildVisual(renderer?.ContainerElement, spriteVisual);/ElementCompositionPreview.SetElementChildVisual(renderer, spriteVisual);/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/PlatformShadowEffect.uwp.cs\n\nsed -i '' 's/using Windows.UI/using Microsoft.UI/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackBar.uwp.cs\nsed -i '' 's/using Microsoft.Maui.Controls.Compatibility.Platform.UWP;/using Microsoft.Maui.Controls.Compatibility.Platform.UWP;using Microsoft.Maui.Controls;using Border = Microsoft.UI.Xaml.Controls.Border;using Grid = Microsoft.UI.Xaml.Controls.Grid;using RowDefinition = Microsoft.UI.Xaml.Controls.RowDefinition;/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackBar.uwp.cs\nsed -i '' 's/Microsoft.Maui.Controls.Compatibility.Grid/Grid/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackBar.uwp.cs\nsed -i '' 's/Microsoft.Maui.GridLength/GridLength/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackBar.uwp.cs\nsed -i '' 's/Forms.VisualElement/VisualElement/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackBar.uwp.cs\n\nsed -i '' 's/using Windows.UI/using Microsoft.UI/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackBarLayout.uwp.wpf.cs\nsed -i '' 's/Microsoft.Maui.Controls.Compatibility.Grid/Grid/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackBarLayout.uwp.wpf.cs\nsed -i '' 's/Microsoft.Maui.GridLength/GridLength/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackBarLayout.uwp.wpf.cs\nsed -i '' 's/ToBrush()/ToPlatform()/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackBarLayout.uwp.wpf.cs\nsed -i '' 's/Forms.//g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackBarLayout.uwp.wpf.cs\nsed -i '' 's/Font.Font/Font./g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackBarLayout.uwp.wpf.cs\nsed -i '' 's/using Microsoft.Maui.Controls.Compatibility.Platform.UWP;/using Microsoft.Maui.Controls.Compatibility.Platform.UWP;using Microsoft.Maui;using Microsoft.Maui.Controls;using Microsoft.Maui.Platform;using Microsoft.UI.Xaml.Controls;using Microsoft.UI.Xaml.Media;using Button = Microsoft.UI.Xaml.Controls.Button;using ColumnDefinition = Microsoft.UI.Xaml.Controls.ColumnDefinition;using CornerRadius = Microsoft.UI.Xaml.CornerRadius;using Grid = Microsoft.UI.Xaml.Controls.Grid;using GridLength = Microsoft.UI.Xaml.GridLength;using RowDefinition = Microsoft.UI.Xaml.Controls.RowDefinition;using Thickness = Microsoft.UI.Xaml.Thickness;/g' ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/**/SnackBarLayout.uwp.wpf.cs"
        },
        {
          "name": "MauiCompatSteps.md",
          "type": "blob",
          "size": 2.5986328125,
          "content": "# Maui Compat Steps\n\nThe following steps are used to create the MauiCompat libraries\n\n### 1. Create Xamarin.CommunityToolit.MauiCompat Branch From Latest Tag\n\n1. Create new branch from the latest tag:\n    ```bash\n    git checkout -b Xamarin.CommunityToolkit.MauiCompat-[version] [tag]\n    ```\n    > **Example:** `git checkout -b Xamarin.CommunityToolkit.MauiCompat-1.3.0-pre2 1.3.0-pre2`\n2. Push new branch to github\n\n    ```bash\n    git push --set-upstream origin Xamarin.CommunityToolkit.MauiCompat-[version]\n    ```\n    > **Example:** `git push --set-upstream origin Xamarin.CommunityToolkit.MauiCompat-1.3.0-pre2`\n\n### 2. Run MauiCompat.sh script to migrate Xamarin.CommunityToolkit and create `Xamarin.CommunityToolkit.MauiCompat` and `Xamarin.CommunityToolkit.Markup.MauiCompat` \n\n```zsh\nzsh ./MauiCompat.sh\n```\n\n### 3. Add MauiColorExtensions Classes\n\nIn .NET MAUI the `Color` object has been changed from a `struct` to an `object`. Because of that, we now need to be aware of passing `null` values on methods that have to do with colors. For instance, the `ToAndroid()` and `ToUIColor()` extension methods that take a .NET MAUI `Color` and convert it into a native platform color. There are multiple ways to solve this, but we chose to overload these extension methods with our own. This method checks if the incoming color is `null`, if it is, we replace the color with `Colors.Transparent` and pass it to the extension method and return its value.\n\nThis way we didn't need to edit all the lines with this extension method individually.\n\n#### 3.1 Add `using` Statement to Files Which Reference Original Extension Methods\nNow in each file that references the `ToAndroid()` and `ToUIColor()` methods we need to add the `using Xamarin.CommunityToolkit.MauiCompat;` line to make sure that it uses _our_ extension method. There is one catch: you have to declare this using **inside** the namespace declaration so that it will prefer _our_ extension method over the .NET MAUI one. In example:\n\n```cs\n// ... Rest omitted for brevity\nusing Microsoft.Maui.Controls.Compatibility;\nusing Microsoft.Maui.Controls.Compatibility.Platform.Android;\n// ... Rest omitted for brevity\n\n[assembly: ExportRenderer(typeof(DrawingView), typeof(DrawingViewRenderer))]\n\nnamespace Xamarin.CommunityToolkit.UI.Views\n{\n\t// Make sure this using is here!\n\tusing Xamarin.CommunityToolkit.MauiCompat;\n\n\tpublic class DrawingViewRenderer : ViewRenderer<DrawingView, View> { }\n```\n\n### 4. Build projects\n\n```zsh\ndotnet build ./src/Markup/Xamarin.CommunityToolkit.Markup.MauiCompat.sln -c Release\n\ndotnet build ./src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat.sln -c Release\n```\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.9814453125,
          "content": "## Support\n\nSupport for Xamarin Community Toolkit ended on **May 1, 2024** following the official Xamarin products and the [Xamarin Support Policy][xamarin-support-policy]:\n\n> Xamarin support ended on May 1, 2024 for all Xamarin SDKs including Xamarin.Forms.\nXamarin.Forms was succeeded by .NET MAUI (which includes Essentials), in May 2022 as part of .NET 6, and is currently supported as described on the [.NET MAUI Support Policy][maui-support-policy]. Follow the [official upgrade guidance][maui-upgrade-guidance] to bring your Xamarin applications to the latest version of .NET.\n\nAs part of the transition to .NET MAUI, there is now the [.NET MAUI Community Toolkit][dotnet-maui-toolkit-repo] that is the successor to the Xamarin Community Toolkit, this project. We have been hard at work on the .NET MAUI Community Toolkit for years alongside this Xamarin version to make sure that you have everything you need to make the switch to .NET MAUI successful.\n\nTo all our developers and contributors, thank you so much for being a part of our Xamarin community. We'll see you all over in [.NET MAUI Community Toolkit][dotnet-maui-toolkit-repo]!\n\n[maui-support-policy]: https://dotnet.microsoft.com/platform/support/policy/maui\n[maui-upgrade-guidance]: https://learn.microsoft.com/dotnet/maui/migration\n[xamarin-support-policy]: https://dotnet.microsoft.com/platform/support/policy/xamarin\n[dotnet-maui-toolkit-repo]: https://github.com/CommunityToolkit/Maui\n\n## About Xamarin Community Toolkit\n\n[<img src=\"https://raw.githubusercontent.com/dotnet-foundation/swag/master/logo/dotnetfoundation_v4.svg\" alt=\".NET Foundation\" width=100>](https://dotnetfoundation.org)\n\n<img src=\"assets/XamarinCommunityToolkit_128x128.png\" width=\"64\" /> Xamarin Community Toolkit\n===========\nThe Xamarin Community Toolkit is a collection of common elements for mobile development with Xamarin.Forms that people tend to replicate across multiple apps. It simplifies and demonstrates common developer tasks when building apps with Xamarin.Forms.\n\n## Support Timeline\n\nMore information on the support timeline for the Xamarin Community Toolkit can be found on our [wiki](https://github.com/xamarin/XamarinCommunityToolkit/wiki/FAQ#support-timeline).\n\n## Build Status\n\nIf you like to live dangerously, you can use our [nightly](https://pkgs.dev.azure.com/xamarin/public/_packaging/XamarinCommunityToolkitNightly/nuget/v3/index.json) feed to try out the latest and greatest.\n\n| Build Server | Type         | Platform | Status |\n|--------------|--------------|----------|--------|\n| Azure DevOps         | Build        | Windows & Mac  | [![Build Status](https://dev.azure.com/xamarin/public/_apis/build/status/xamarin/CommunityToolkit/xamarin.XamarinCommunityToolkit%20(Public)?branchName=main)](https://dev.azure.com/xamarin/public/_build?definitionId=55&_a=summary) |\n\n## Sample App\n\nBrowsing the [sample app](./samples) is the best place to start exploring what's available today.\n\n## Installation\n\nThe Toolkit is available via NuGet, and should be installed into all of your projects (shared and individual platforms):\n\n* NuGet Official Releases: [![NuGet](https://img.shields.io/nuget/vpre/Xamarin.CommunityToolkit.svg?label=NuGet)](https://www.nuget.org/packages/Xamarin.CommunityToolkit/)\n* NuGet Nightly Releases: [![NuGet Nightly](https://img.shields.io/badge/NuGet-Nightly-yellow)](https://pkgs.dev.azure.com/xamarin/public/_packaging/XamarinCommunityToolkitNightly/nuget/v3/index.json)\n\nBrowse with the NuGet manager in your IDE to install them or run this command:\n\n`Install-Package Xamarin.CommunityToolkit`\n\nNote that the C# Markup Extensions are in a separate package, install that with:\n\n`Install-Package Xamarin.CommunityToolkit.Markup`\n\n## Getting Started\n\nAfter installation, start using the features you're after.\n\nIf you're using XAML, you can add this namespace to your root node to get access to all the goodness the Toolkit has to offer without having to add all kinds of namespaces seperately: `xmlns:xct=\"http://xamarin.com/schemas/2020/toolkit\"`. I.e.:\n\n```xaml\n<ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" \nxmlns:xct=\"http://xamarin.com/schemas/2020/toolkit\">\n\n<xct:AvatarView />\n\n<!-- The rest of your page here -->\n\n</ContentPage>\n```\n\n## Documentation\n\nThe documentation is still under construction, but we've published the most important things over at [Microsoft Docs](https://docs.microsoft.com/xamarin/community-toolkit/).\n\nIf you want to contribute some of the missing bits you can do this over at the [official Docs repo](https://github.com/MicrosoftDocs/xamarin-communitytoolkit) as contributions are very much welcomed!\n\n## Contributions welcome!\n\nIf you have one or more of these common pieces of code that you are always replicating across apps, don't hesitate to contribute! We aim to be the first NuGet package you install when creating a new Xamarin.Forms app!\n\nPlease have a look at our [contribution guide](CONTRIBUTING.md) before you get started, as well as some information on [the wiki](https://github.com/xamarin/XamarinCommunityToolkit/wiki/Contributing-to-XamarinCommunityToolkit). Also take note of the [Code of Conduct](https://dotnetfoundation.org/code-of-conduct) we adhere to.\n\n## Project Structure\n\nTo structure our project, we have adopted a range of namespaces. You can find them below with a short description of what you will find where. For simply consuming the Toolkit in XAML you can use our simplified namespace. See the [Getting Started](#getting-started) section above.\n\n| Namespace | Description |\n|--------------|--------------|\n| Xamarin.CommunityToolkit.Core | Core objects that do not fit other namespaces and are used by multiple other components |\n| Xamarin.CommunityToolkit.Behaviors | Extended behaviors for the Xamarin.Forms components |\n| Xamarin.CommunityToolkit.Converters | XAML converters, used to converted your data binding data into something your XAML understands |\n| Xamarin.CommunityToolkit.Effects | Effects to apply light-weight renderer changes to the Xamarin.Forms renderers |\n| Xamarin.CommunityToolkit.Extensions | XAML Markup Extensions to make your XAML even more functional |\n| Xamarin.CommunityToolkit.ObjectModel | Things that have to do with your models and objects. Probably handy for your MVVM needs |\n| Xamarin.CommunityToolkit.UI.Views | Controls such as TabView, etc. |\n| Xamarin.CommunityToolkit.SampleApp | Sample App where you can find all of the above for reference. Learn how to use them and see how it all looks |\n| Xamarin.CommunityToolkit.UnitTests | This is where our unit tests live. Please keep growing them! |\n| Xamarin.CommunityToolkit.Markup | Everthing that has to do with writing your UI in C# code. Also known as C# Markup Extensions |\n\n## Code of Conduct\nAs a part of the .NET Foundation, we have adopted the [.NET Foundation Code of Conduct](https://dotnetfoundation.org/code-of-conduct). Please familiarize yourself with that before participating with this repository. Thanks!\n\n## .NET Foundation\nThis project is supported by the [.NET Foundation](https://dotnetfoundation.org).\n"
        },
        {
          "name": "SUBMITTING-ISSUES.md",
          "type": "blob",
          "size": 2.5634765625,
          "content": "If you think you've found a bug to report, before doing anything else you should check the [Issues](https://github.com/xamarin/XamarinCommunityToolkit/issues) page to see if an issue has already been filed! This can help reduce the number of duplicate reports.\n\nIf you're ready to submit a new issue, taking the following steps helps expedite the bug triage process:\n\n* Validate that the issue is not resolved with the latest stable, pre-release, or nightly builds.\n\n* If you are able and time allows, create a minimized reproduction project using only the code necessary to reproduce the issue; this helps us as we then know precisely what code is being used.\n\n* Before compressing the reproduction project, make certain to clean the solution as well as manually delete any bin/obj folders, e.g.:\n\n\t\t[ProjectRoot]/ProjectName/bin\n\t\t[ProjectRoot]/ProjectName/obj\n\t\t[ProjectRoot]/ProjectName.Android/bin\n\t\t[ProjectRoot]/ProjectName.Android/obj\n\t\t[ProjectRoot]/ProjectName.iOS/bin\n\t\t[ProjectRoot]/ProjectName.iOS/obj\n\t\t[ProjectRoot]/ProjectName.UWP/bin\n\t\t[ProjectRoot]/ProjectName.UWP/obj\n\t\t\n\tPlease make certain to remove the packages folder as well to cut down on size.\n\n* Please make note if the issue only occurs on particular platforms, so we can run reproductions on each and compare.\n\n* In the case of a regression, please confirm as such as well as the last working, pre-regression build you may be aware of, if possible. Providing a reproduction with the working package installed to begin with also helps, as we can then simply upgrade it and compare against the latest stable to confirm.\n\n* In some cases, issues may only occur on specific devices, with specific versions of the OS, or when targeting specific OS versions within the project itself. Some issues also occur on devices, but not on simulators. This information is incredibly helpful.\n\n* Please upload reproductions directly to the report as an attachment; this guarantees future access to the file.\n\n# Android Specific Concerns #\n\nPlease let us know any issues which may stem from different versions of the support library packages (e.g. Xamarin.Android.Support.v7.AppCompat), as sometimes bugs may only occur when specific versions are used.\n\n# iOS Specific Concerns #\n\nTo be added\n\n# UWP-specific Concerns #\n\nPlease make note if an issue appears hardware-specific (slower machines, multiple monitors, etc.), due to the desktop component.\n\n# Contributing #\n\nThink you may have a bug fix, or you'd like to work on fixing one yourself? We greatly welcome PRs with fixes from the community! Check out the [Contribute page](CONTRIBUTING.md) for more info.\n"
        },
        {
          "name": "SignList.xml",
          "type": "blob",
          "size": 0.3076171875,
          "content": "<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <ItemGroup>\n    <FirstParty Include=\"Xamarin.*.dll\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <!-- <ThirdParty Include=\"Newtonsoft.Json.dll\" /> -->\n  </ItemGroup>\n\n  <ItemGroup>\n    <!-- <Skip Include=\"System.*.dll\" /> -->\n  </ItemGroup>\n</Project>"
        },
        {
          "name": "ThirdPartyNotices",
          "type": "blob",
          "size": 1.1064453125,
          "content": "##Legal Notices\nMicrosoft and any contributors grant you a license to the Microsoft documentation and other content\nin this repository under the [Creative Commons Attribution 4.0 International Public License](https://creativecommons.org/licenses/by/4.0/legalcode),\nsee the [LICENSE](LICENSE) file, and grant you a license to any code in the repository under the [MIT License](https://opensource.org/licenses/MIT), see the\n[LICENSE-CODE](LICENSE-CODE) file.\n\nMicrosoft, Windows, Microsoft Azure and/or other Microsoft products and services referenced in the documentation\nmay be either trademarks or registered trademarks of Microsoft in the United States and/or other countries.\nThe licenses for this project do not grant you rights to use any Microsoft names, logos, or trademarks.\nMicrosoft's general trademark guidelines can be found at http://go.microsoft.com/fwlink/?LinkID=254653.\n\nPrivacy information can be found at https://privacy.microsoft.com/en-us/\n\nMicrosoft and any contributors reserve all others rights, whether under their respective copyrights, patents,\nor trademarks, whether by implication, estoppel or otherwise."
        },
        {
          "name": "Xamarin.CommunityToolkit.All.sln",
          "type": "blob",
          "size": 2.259765625,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.1.31903.286\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Xamarin.CommunityToolkit\", \"src\\CommunityToolkit\\Xamarin.CommunityToolkit\\Xamarin.CommunityToolkit.csproj\", \"{1B9B44A1-281F-4854-8DA9-4679A34593BB}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Xamarin.CommunityToolkit.Markup\", \"src\\Markup\\Xamarin.CommunityToolkit.Markup\\Xamarin.CommunityToolkit.Markup.csproj\", \"{ED6D1344-7A87-4DCF-BBA3-13E319108C56}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Xamarin.CommunityToolkit.SourceGenerator\", \"src\\SourceGenerator\\Xamarin.CommunityToolkit.SourceGenerator\\Xamarin.CommunityToolkit.SourceGenerator.csproj\", \"{13195939-6F8A-4991-B42A-C13DE7ED1EB6}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{1B9B44A1-281F-4854-8DA9-4679A34593BB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{1B9B44A1-281F-4854-8DA9-4679A34593BB}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{1B9B44A1-281F-4854-8DA9-4679A34593BB}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{1B9B44A1-281F-4854-8DA9-4679A34593BB}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{ED6D1344-7A87-4DCF-BBA3-13E319108C56}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{ED6D1344-7A87-4DCF-BBA3-13E319108C56}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{ED6D1344-7A87-4DCF-BBA3-13E319108C56}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{ED6D1344-7A87-4DCF-BBA3-13E319108C56}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{13195939-6F8A-4991-B42A-C13DE7ED1EB6}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{13195939-6F8A-4991-B42A-C13DE7ED1EB6}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{13195939-6F8A-4991-B42A-C13DE7ED1EB6}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{13195939-6F8A-4991-B42A-C13DE7ED1EB6}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {AE83A1F1-289A-47DB-A6EB-8D060163C67D}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "Xamarin.CommunityToolkit.Markup.sln",
          "type": "blob",
          "size": 1.7255859375,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 16\nVisualStudioVersion = 16.0.30413.136\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Xamarin.CommunityToolkit.Markup\", \"src\\Markup\\Xamarin.CommunityToolkit.Markup\\Xamarin.CommunityToolkit.Markup.csproj\", \"{AB7BC9C1-E0E5-41F0-A1B9-9AEDD3A3C91A}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Xamarin.CommunityToolkit.Markup.UnitTests\", \"src\\Markup\\Xamarin.CommunityToolkit.Markup.UnitTests\\Xamarin.CommunityToolkit.Markup.UnitTests.csproj\", \"{43798DE5-81F4-4C31-8BB2-AEF46F6732AB}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{AB7BC9C1-E0E5-41F0-A1B9-9AEDD3A3C91A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{AB7BC9C1-E0E5-41F0-A1B9-9AEDD3A3C91A}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{AB7BC9C1-E0E5-41F0-A1B9-9AEDD3A3C91A}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{AB7BC9C1-E0E5-41F0-A1B9-9AEDD3A3C91A}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{43798DE5-81F4-4C31-8BB2-AEF46F6732AB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{43798DE5-81F4-4C31-8BB2-AEF46F6732AB}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{43798DE5-81F4-4C31-8BB2-AEF46F6732AB}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{43798DE5-81F4-4C31-8BB2-AEF46F6732AB}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {3133C963-D825-40F3-BBF6-CBF4C4D2DBA5}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "Xamarin.CommunityToolkit.ruleset",
          "type": "blob",
          "size": 7.8115234375,
          "content": "﻿<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RuleSet Name=\"Rules for Xamarin.CommunityToolkit\" Description=\"Code analysis rules for Xamarin.CommunityToolkit.\" ToolsVersion=\"16.0\">\n  <IncludeAll Action=\"Warning\" />\n  <Rules AnalyzerId=\"StyleCop.Analyzers\" RuleNamespace=\"StyleCop.Analyzers\">\n    <Rule Id=\"SA0001\" Action=\"None\" />\n    <Rule Id=\"SA0002\" Action=\"Warning\" />\n    <Rule Id=\"SA1000\" Action=\"None\" />\n    <Rule Id=\"SA1001\" Action=\"Warning\" />\n    <Rule Id=\"SA1002\" Action=\"Warning\" />\n    <Rule Id=\"SA1003\" Action=\"Warning\" />\n    <Rule Id=\"SA1004\" Action=\"Warning\" />\n    <Rule Id=\"SA1005\" Action=\"Warning\" />\n    <Rule Id=\"SA1006\" Action=\"Warning\" />\n    <Rule Id=\"SA1007\" Action=\"Warning\" />\n    <Rule Id=\"SA1008\" Action=\"Warning\" />\n    <Rule Id=\"SA1009\" Action=\"None\" />\n    <Rule Id=\"SA1010\" Action=\"Warning\" />\n    <Rule Id=\"SA1011\" Action=\"None\" />\n    <Rule Id=\"SA1012\" Action=\"Warning\" />\n    <Rule Id=\"SA1013\" Action=\"Warning\" />\n    <Rule Id=\"SA1014\" Action=\"Warning\" />\n    <Rule Id=\"SA1015\" Action=\"Warning\" />\n    <Rule Id=\"SA1016\" Action=\"Warning\" />\n    <Rule Id=\"SA1017\" Action=\"Warning\" />\n    <Rule Id=\"SA1018\" Action=\"Warning\" />\n    <Rule Id=\"SA1019\" Action=\"Warning\" />\n    <Rule Id=\"SA1020\" Action=\"Warning\" />\n    <Rule Id=\"SA1021\" Action=\"Warning\" />\n    <Rule Id=\"SA1022\" Action=\"Warning\" />\n    <Rule Id=\"SA1023\" Action=\"Warning\" />\n    <Rule Id=\"SA1024\" Action=\"Warning\" />\n    <Rule Id=\"SA1025\" Action=\"Warning\" />\n    <Rule Id=\"SA1026\" Action=\"Warning\" />\n    <Rule Id=\"SA1027\" Action=\"None\" />\n    <Rule Id=\"SA1028\" Action=\"Warning\" />\n    <Rule Id=\"SA1100\" Action=\"Warning\" />\n    <Rule Id=\"SA1101\" Action=\"None\" />\n    <Rule Id=\"SA1102\" Action=\"Warning\" />\n    <Rule Id=\"SA1103\" Action=\"Warning\" />\n    <Rule Id=\"SA1104\" Action=\"Warning\" />\n    <Rule Id=\"SA1105\" Action=\"Warning\" />\n    <Rule Id=\"SA1106\" Action=\"Warning\" />\n    <Rule Id=\"SA1107\" Action=\"Warning\" />\n    <Rule Id=\"SA1108\" Action=\"Warning\" />\n    <Rule Id=\"SA1109\" Action=\"Warning\" />\n    <Rule Id=\"SA1110\" Action=\"Warning\" />\n    <Rule Id=\"SA1111\" Action=\"Warning\" />\n    <Rule Id=\"SA1112\" Action=\"Warning\" />\n    <Rule Id=\"SA1113\" Action=\"Warning\" />\n    <Rule Id=\"SA1114\" Action=\"Warning\" />\n    <Rule Id=\"SA1115\" Action=\"Warning\" />\n    <Rule Id=\"SA1116\" Action=\"None\" />\n    <Rule Id=\"SA1117\" Action=\"None\" />\n    <Rule Id=\"SA1118\" Action=\"None\" />\n    <Rule Id=\"SA1119\" Action=\"Warning\" />\n    <Rule Id=\"SA1120\" Action=\"Warning\" />\n    <Rule Id=\"SA1121\" Action=\"Warning\" />\n    <Rule Id=\"SA1122\" Action=\"Warning\" />\n    <Rule Id=\"SA1123\" Action=\"None\" />\n    <Rule Id=\"SA1124\" Action=\"None\" />\n    <Rule Id=\"SA1125\" Action=\"Warning\" />\n    <Rule Id=\"SA1126\" Action=\"Warning\" />\n    <Rule Id=\"SA1127\" Action=\"None\" />\n    <Rule Id=\"SA1128\" Action=\"Warning\" />\n    <Rule Id=\"SA1129\" Action=\"Warning\" />\n    <Rule Id=\"SA1130\" Action=\"Warning\" />\n    <Rule Id=\"SA1131\" Action=\"Warning\" />\n    <Rule Id=\"SA1132\" Action=\"None\" />\n    <Rule Id=\"SA1133\" Action=\"Warning\" />\n    <Rule Id=\"SA1134\" Action=\"Warning\" />\n    <Rule Id=\"SA1135\" Action=\"Warning\" />\n    <Rule Id=\"SA1136\" Action=\"Warning\" />\n    <Rule Id=\"SA1137\" Action=\"Warning\" />\n    <Rule Id=\"SA1139\" Action=\"Warning\" />\n    <Rule Id=\"SA1200\" Action=\"Warning\" />\n    <Rule Id=\"SA1201\" Action=\"None\" />\n    <Rule Id=\"SA1202\" Action=\"None\" />\n    <Rule Id=\"SA1203\" Action=\"Warning\" />\n    <Rule Id=\"SA1204\" Action=\"None\" />\n    <Rule Id=\"SA1205\" Action=\"Warning\" />\n    <Rule Id=\"SA1206\" Action=\"Warning\" />\n    <Rule Id=\"SA1207\" Action=\"Warning\" />\n    <Rule Id=\"SA1208\" Action=\"None\" />\n    <Rule Id=\"SA1209\" Action=\"None\" />\n    <Rule Id=\"SA1210\" Action=\"None\" />\n    <Rule Id=\"SA1211\" Action=\"None\" />\n    <Rule Id=\"SA1212\" Action=\"Warning\" />\n    <Rule Id=\"SA1213\" Action=\"Warning\" />\n    <Rule Id=\"SA1214\" Action=\"None\" />\n    <Rule Id=\"SA1215\" Action=\"Warning\" />\n    <Rule Id=\"SA1216\" Action=\"Warning\" />\n    <Rule Id=\"SA1217\" Action=\"Warning\" />\n    <Rule Id=\"SA1300\" Action=\"None\" />\n    <Rule Id=\"SA1301\" Action=\"Warning\" />\n    <Rule Id=\"SA1302\" Action=\"Warning\" />\n    <Rule Id=\"SA1303\" Action=\"None\" />\n    <Rule Id=\"SA1304\" Action=\"Warning\" />\n    <Rule Id=\"SA1306\" Action=\"Warning\" />\n    <Rule Id=\"SA1307\" Action=\"Warning\" />\n    <Rule Id=\"SA1308\" Action=\"Warning\" />\n    <Rule Id=\"SA1309\" Action=\"Warning\" />\n    <Rule Id=\"SA1310\" Action=\"Warning\" />\n    <Rule Id=\"SA1311\" Action=\"None\" />\n    <Rule Id=\"SA1312\" Action=\"Warning\" />\n    <Rule Id=\"SA1313\" Action=\"Warning\" />\n    <Rule Id=\"SA1314\" Action=\"Warning\" />\n    <Rule Id=\"SA1400\" Action=\"None\" />\n    <Rule Id=\"SA1401\" Action=\"None\" />\n    <Rule Id=\"SA1402\" Action=\"None\" />\n    <Rule Id=\"SA1403\" Action=\"Warning\" />\n    <Rule Id=\"SA1404\" Action=\"Warning\" />\n    <Rule Id=\"SA1405\" Action=\"Warning\" />\n    <Rule Id=\"SA1406\" Action=\"Warning\" />\n    <Rule Id=\"SA1407\" Action=\"Warning\" />\n    <Rule Id=\"SA1408\" Action=\"Warning\" />\n    <Rule Id=\"SA1409\" Action=\"Warning\" />\n    <Rule Id=\"SA1410\" Action=\"Warning\" />\n    <Rule Id=\"SA1411\" Action=\"Warning\" />\n    <Rule Id=\"SA1413\" Action=\"None\" />\n    <Rule Id=\"SA1500\" Action=\"Warning\" />\n    <Rule Id=\"SA1501\" Action=\"Warning\" />\n    <Rule Id=\"SA1502\" Action=\"Warning\" />\n    <Rule Id=\"SA1503\" Action=\"None\" />\n    <Rule Id=\"SA1504\" Action=\"Warning\" />\n    <Rule Id=\"SA1505\" Action=\"Warning\" />\n    <Rule Id=\"SA1506\" Action=\"Warning\" />\n    <Rule Id=\"SA1507\" Action=\"Warning\" />\n    <Rule Id=\"SA1508\" Action=\"Warning\" />\n    <Rule Id=\"SA1509\" Action=\"Warning\" />\n    <Rule Id=\"SA1510\" Action=\"Warning\" />\n    <Rule Id=\"SA1511\" Action=\"Warning\" />\n    <Rule Id=\"SA1512\" Action=\"None\" />\n    <Rule Id=\"SA1513\" Action=\"None\" />\n    <Rule Id=\"SA1514\" Action=\"Warning\" />\n    <Rule Id=\"SA1515\" Action=\"Warning\" />\n    <Rule Id=\"SA1516\" Action=\"Warning\" />\n    <Rule Id=\"SA1517\" Action=\"Warning\" />\n    <Rule Id=\"SA1518\" Action=\"None\" />\n    <Rule Id=\"SA1519\" Action=\"Warning\" />\n    <Rule Id=\"SA1520\" Action=\"None\" />\n    <Rule Id=\"SA1600\" Action=\"None\" />\n    <Rule Id=\"SA1601\" Action=\"None\" />\n    <Rule Id=\"SA1602\" Action=\"None\" />\n    <Rule Id=\"SA1603\" Action=\"None\" />\n    <Rule Id=\"SA1604\" Action=\"None\" />\n    <Rule Id=\"SA1605\" Action=\"None\" />\n    <Rule Id=\"SA1606\" Action=\"None\" />\n    <Rule Id=\"SA1607\" Action=\"None\" />\n    <Rule Id=\"SA1608\" Action=\"None\" />\n    <Rule Id=\"SA1610\" Action=\"None\" />\n    <Rule Id=\"SA1611\" Action=\"None\" />\n    <Rule Id=\"SA1612\" Action=\"None\" />\n    <Rule Id=\"SA1613\" Action=\"None\" />\n    <Rule Id=\"SA1614\" Action=\"None\" />\n    <Rule Id=\"SA1615\" Action=\"None\" />\n    <Rule Id=\"SA1616\" Action=\"None\" />\n    <Rule Id=\"SA1617\" Action=\"None\" />\n    <Rule Id=\"SA1618\" Action=\"None\" />\n    <Rule Id=\"SA1619\" Action=\"None\" />\n    <Rule Id=\"SA1620\" Action=\"None\" />\n    <Rule Id=\"SA1621\" Action=\"None\" />\n    <Rule Id=\"SA1622\" Action=\"None\" />\n    <Rule Id=\"SA1623\" Action=\"None\" />\n    <Rule Id=\"SA1624\" Action=\"None\" />\n    <Rule Id=\"SA1625\" Action=\"None\" />\n    <Rule Id=\"SA1626\" Action=\"Warning\" />\n    <Rule Id=\"SA1627\" Action=\"None\" />\n    <Rule Id=\"SA1628\" Action=\"None\" />\n    <Rule Id=\"SA1629\" Action=\"None\" />\n    <Rule Id=\"SA1630\" Action=\"None\" />\n    <Rule Id=\"SA1631\" Action=\"None\" />\n    <Rule Id=\"SA1632\" Action=\"None\" />\n    <Rule Id=\"SA1633\" Action=\"None\" />\n    <Rule Id=\"SA1634\" Action=\"None\" />\n    <Rule Id=\"SA1635\" Action=\"None\" />\n    <Rule Id=\"SA1636\" Action=\"None\" />\n    <Rule Id=\"SA1637\" Action=\"None\" />\n    <Rule Id=\"SA1638\" Action=\"None\" />\n    <Rule Id=\"SA1640\" Action=\"None\" />\n    <Rule Id=\"SA1641\" Action=\"None\" />\n    <Rule Id=\"SA1642\" Action=\"None\" />\n    <Rule Id=\"SA1643\" Action=\"None\" />\n    <Rule Id=\"SA1644\" Action=\"None\" />\n    <Rule Id=\"SA1645\" Action=\"None\" />\n    <Rule Id=\"SA1646\" Action=\"None\" />\n    <Rule Id=\"SA1647\" Action=\"None\" />\n    <Rule Id=\"SA1648\" Action=\"None\" />\n    <Rule Id=\"SA1649\" Action=\"None\" />\n    <Rule Id=\"SA1650\" Action=\"None\" />\n    <Rule Id=\"SA1651\" Action=\"None\" />\n    <Rule Id=\"SA1652\" Action=\"None\" />\n    <Rule Id=\"SX1101\" Action=\"Warning\" />\n    <Rule Id=\"xUnit1026\" Action=\"None\" />\n  </Rules>\n</RuleSet>"
        },
        {
          "name": "Xamarin.CommunityToolkit.sln",
          "type": "blob",
          "size": 1.69921875,
          "content": "Microsoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 16\nVisualStudioVersion = 16.0.30320.27\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Xamarin.CommunityToolkit\", \"src\\CommunityToolkit\\Xamarin.CommunityToolkit\\Xamarin.CommunityToolkit.csproj\", \"{ED1B3120-47D6-4F4B-AB29-A622828AF87F}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Xamarin.CommunityToolkit.UnitTests\", \"src\\CommunityToolkit\\Xamarin.CommunityToolkit.UnitTests\\Xamarin.CommunityToolkit.UnitTests.csproj\", \"{728258FF-1E23-4DFA-8393-A9A40F935CB6}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{ED1B3120-47D6-4F4B-AB29-A622828AF87F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{ED1B3120-47D6-4F4B-AB29-A622828AF87F}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{ED1B3120-47D6-4F4B-AB29-A622828AF87F}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{ED1B3120-47D6-4F4B-AB29-A622828AF87F}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{728258FF-1E23-4DFA-8393-A9A40F935CB6}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{728258FF-1E23-4DFA-8393-A9A40F935CB6}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{728258FF-1E23-4DFA-8393-A9A40F935CB6}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{728258FF-1E23-4DFA-8393-A9A40F935CB6}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {0E25B668-D1CB-4A23-9EA6-EE710C8E148A}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 15.0498046875,
          "content": "# See available software and versions on hosted agents here: https://docs.microsoft.com/azure/devops/pipelines/agents/hosted\nvariables:\n  CurrentSemanticVersionBase: '2.1.0'\n  PreviewNumber: $[counter(variables['CurrentSemanticVersionBase'], 1001)]\n  CurrentSemanticVersion: '$(CurrentSemanticVersionBase)-preview$(PreviewNumber)'\n  NugetPackageVersion: '$(CurrentSemanticVersion)'\n  #MONO_VERSION: 6_4_0\n  #XCODE_VERSION: 11.4\n  NETCORE_VERSION: '6.0.x'\n  NETCORE_TEST_VERSION_3_1: '3.1.x'\n  NETCORE_TEST_VERSION_2_1: '2.1.x'\n  RunPoliCheck: 'false'\n  PathToMarkupCsproj: 'src/Markup/Xamarin.CommunityToolkit.Markup/Xamarin.CommunityToolkit.Markup.csproj'\n  PathToCommunityToolkitCsproj: 'src/CommunityToolkit/Xamarin.CommunityToolkit/Xamarin.CommunityToolkit.csproj'\n  PathToMauiCompatMarkupCsproj: 'src/Markup/Xamarin.CommunityToolkit.Markup.MauiCompat/Xamarin.CommunityToolkit.Markup.MauiCompat.csproj'\n  PathToMauiCompatCommunityToolkitCsproj: 'src/CommunityToolkit/Xamarin.CommunityToolkit.MauiCompat/Xamarin.CommunityToolkit.MauiCompat.csproj'\n  PathToSamplesSln: 'samples/XCT.Sample.sln'\n  PathToCommunityToolkitUnitTestCsproj: 'src/CommunityToolkit/Xamarin.CommunityToolkit.UnitTests/Xamarin.CommunityToolkit.UnitTests.csproj'\n  PathToMarkupUnitTestCsproj: 'src/Markup/Xamarin.CommunityToolkit.Markup.UnitTests/Xamarin.CommunityToolkit.Markup.UnitTests.csproj'\n  Codeql.Enabled: true\n  \nresources:\n  repositories:\n    - repository: internal-templates\n      type: github\n      name: xamarin/yaml-templates\n      endpoint: xamarin\n      ref: refs/heads/main\n\ntrigger:\n  branches:\n    include:\n    - main\n    - develop\n  tags:\n    include:\n    - '*'\n  paths:\n    exclude:\n    - README.md\n\npr:\n  autoCancel: true\n  branches:\n    include:\n    - main\n    - develop\n  paths:\n    exclude:\n    - README.md\n\nschedules:\n- cron: \"0 0 * * *\"\n  displayName: Daily midnight build\n  branches:\n    include:\n    - main\n\njobs:\n  - job: build_windows_samples\n    displayName: Build Windows Samples\n    pool:\n      vmImage: windows-2019\n    steps:\n      - task: MSBuild@1\n        displayName: Build Solution\n        inputs:\n          solution: $(PathToSamplesSln)\n          configuration: Release\n          msbuildArguments: '/restore /t:Build /p:ContinuousIntegrationBuild=true /p:Deterministic=false'\n      \n  - job: build_windows\n    displayName: Build Windows Library\n    pool:\n      vmImage: windows-2019\n    steps:\n      - task: UseDotNet@2\n        displayName: 'Install .NET SDK'\n        inputs:\n          version: $(NETCORE_VERSION)\n          includePreviewVersions: false\n\n      - task: UseDotNet@2\n        displayName: 'Install .NET 3.1 Test SDK'\n        inputs:\n          version: $(NETCORE_TEST_VERSION_3_1)\n          includePreviewVersions: false\n\n      - task: UseDotNet@2\n        displayName: 'Install .NET 2.1 Test SDK'\n        inputs:\n          version: $(NETCORE_TEST_VERSION_2_1)\n          includePreviewVersions: false\n\n      # if this is a tagged build, then update the version number\n      - powershell: |\n          $buildSourceBranch = \"$(Build.SourceBranch)\"\n          $tagVersion = $buildSourceBranch.Substring($buildSourceBranch.LastIndexOf(\"/\") + 1)\n          Write-Host(\"Branch = $buildSourceBranch, Version = $tagVersion\");\n          Write-Host (\"##vso[task.setvariable variable=NugetPackageVersion;]$tagVersion\")\n        displayName: Set NuGet Version to Tag Number\n        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')\n\n      # if this is a PR build, then update the version number\n      - powershell: |\n          $prNumber = $env:System_PullRequest_PullRequestNumber\n          $commitId = \"$($env:System_PullRequest_SourceCommitId)\".Substring(0, 7)\n          $fullVersionString = \"$(CurrentSemanticVersionBase)-build-$(Build.BuildId).$prNumber+$commitId\"\n          Write-Host(\"GitHub PR = $prNumber, Commit = $commitId\");\n          Write-Host (\"##vso[task.setvariable variable=NugetPackageVersion;]$fullVersionString\")\n          Write-Host \"##vso[build.updatebuildnumber]$fullVersionString\"\n        displayName: Set NuGet Version to PR Version\n        condition: and(succeeded(), eq(variables['build.reason'], 'PullRequest'))\n\n      # restore, build and pack the packages\n      - task: MSBuild@1\n        displayName: Build Xamarin.CommunityToolkit.csproj\n        inputs:\n          solution: $(PathToCommunityToolkitCsproj)\n          configuration: Release\n          msbuildArguments: '/restore /t:Build /p:ContinuousIntegrationBuild=true /p:Deterministic=false'\n\n      - task: CopyFiles@2\n        inputs:\n          Contents: 'SignList.xml'\n          TargetFolder: '$(Build.ArtifactStagingDirectory)'\n\n      - task: MSBuild@1\n        displayName: Pack Community Toolkit NuGets\n        inputs:\n          solution: $(PathToCommunityToolkitCsproj)\n          configuration: Release\n          msbuildArguments: '/t:Pack /p:PackageVersion=$(NugetPackageVersion)'\n\n      - task: MSBuild@1\n        displayName: Build Markup Project\n        inputs:\n          solution: $(PathToMarkupCsproj)\n          configuration: Release\n          msbuildArguments: '/restore /t:Build /p:ContinuousIntegrationBuild=true /p:Deterministic=false'\n\n      - task: MSBuild@1\n        displayName: Pack Markup NuGet\n        inputs:\n          solution: $(PathToMarkupCsproj)\n          configuration: Release\n          msbuildArguments: '/t:Pack /p:PackageVersion=$(NugetPackageVersion)'\n          \n      - task: CmdLine@2\n        displayName: 'Run Markup Unit Tests'\n        inputs:\n          script: dotnet test $(PathToMarkupUnitTestCsproj) -c Release --collect \"Code coverage\" -p:BuildInParallel=false\n\n      - task: CmdLine@2\n        displayName: 'Run Community Toolkit Unit Tests'\n        inputs:\n          script: dotnet test $(PathToCommunityToolkitUnitTestCsproj) -c Release --collect \"Code coverage\" -p:BuildInParallel=false\n\n      # publish the packages\n      - task: PowerShell@2\n        displayName: 'Copy NuGet Packages to Staging Directory'\n        inputs:\n          targetType: 'inline'\n          script: |\n            $source = \".\\src\"\n            $filter = \"nupkg\"\n            Get-ChildItem -Path $source -Recurse | Where-Object { $_.Extension -match $filter } | Copy-Item -Destination \"$(Build.ArtifactStagingDirectory)\"\n          pwsh: true\n\n      - task: PublishBuildArtifacts@1\n        displayName: 'Publish Unsigned NuGets'\n        inputs:\n          artifactName: nuget\n          pathToPublish: '$(Build.ArtifactStagingDirectory)'\n\n      # make sure we are following the rules, but only on the main build\n      - ${{ if eq(variables['System.TeamProject'], 'devdiv') }}:\n        - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0\n          condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/'))\n          displayName: Component Detection - Log\n          inputs:\n            scanType: LogOnly\n        - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0\n          condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')\n          displayName: Component Detection - Report\n        - task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@1\n          condition: eq(variables['RunPoliCheck'], 'true')\n          displayName: 'PoliCheck'\n          inputs:\n            targetType: F\n\n  - job: generate_mauicompat\n    displayName: Generate MauiCompat Library    \n    pool:\n      vmImage: macos-latest\n    steps:\n      - task: UseDotNet@2\n        displayName: 'Install .NET SDK'\n        inputs:\n          version: $(NETCORE_VERSION)\n          includePreviewVersions: false\n            \n      - task: CmdLine@2\n        displayName: 'Install .NET MAUI Workload'\n        inputs:\n          script: 'dotnet workload install maui'\n\n      - task: JavaToolInstaller@0\n        displayName: 'Install Java SDK 11.0'\n        inputs:\n          versionSpec: '11'\n          jdkArchitectureOption: 'x64'\n          jdkSourceOption: 'PreInstalled'\n\n      - powershell: |\n          $mauiCompatExists = Test-Path -Path \"$(PathToMauiCompatCommunityToolkitCsproj)\"\n          Write-Output \"##vso[task.setvariable variable=MauiCompatExists]$mauiCompatExists\"\n\n      - task: CmdLine@2\n        displayName: 'Run MauiCompat Generator'\n        condition: eq (variables['MauiCompatExists'], False)\n        inputs:\n          script: 'zsh ./MauiCompat.sh'\n      \n      - task: CopyFiles@2\n        displayName: 'Copy output'\n        inputs:\n          contents: '**'\n          targetFolder: '$(Build.ArtifactStagingDirectory)'\n\n      - publish: '$(Build.ArtifactStagingDirectory)'\n        displayName: 'Publish script'\n        artifact: drop\n            \n  - job: build_mauicompat\n    dependsOn: generate_mauicompat\n    displayName: Build MauiCompat Library    \n    pool:\n      vmImage: windows-latest\n    steps:\n      - download: current\n        artifact: drop      \n\n      - task: UseDotNet@2\n        displayName: 'Install .NET SDK'\n        inputs:\n          version: $(NETCORE_VERSION)\n          includePreviewVersions: false\n\n      - task: CmdLine@2\n        displayName: 'Install .NET MAUI Workload'\n        inputs:\n          script: 'dotnet workload install maui'\n\n      - task: JavaToolInstaller@0\n        displayName: 'Install Java SDK 11.0'\n        inputs:\n          versionSpec: '11'\n          jdkArchitectureOption: 'x64'\n          jdkSourceOption: 'PreInstalled'\n\n      # if this is a tagged build, then update the version number\n      - powershell: |\n          $buildSourceBranch = \"$(Build.SourceBranch)\"\n          $tagVersion = \"$buildSourceBranch\".Substring($buildSourceBranch.LastIndexOf(\"/\") + 1)+\"-preview$(PreviewNumber)\"\n          Write-Host(\"Branch = $buildSourceBranch, Version = $tagVersion\");\n          Write-Host (\"##vso[task.setvariable variable=NugetPackageVersion;]$tagVersion\")\n        displayName: Set NuGet Version to Tag Number\n        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))\n      # restore, build and pack the packages\n      \n      - task: VSBuild@1\n        displayName: 'Pack Community Toolkit NuGets'\n        inputs:\n          solution: '$(Pipeline.Workspace)\\drop\\$(PathToMauiCompatCommunityToolkitCsproj)'\n          configuration: 'Release'\n          msbuildArgs: '/restore -t:pack -p:PackageVersion=$(NugetPackageVersion) -p:Version=$(NugetPackageVersion) -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg'\n\n      - task: VSBuild@1\n        displayName: 'Build and Pack Markup NuGet'\n        inputs:\n          solution: '$(Pipeline.Workspace)\\drop\\$(PathToMauiCompatMarkupCsproj)'\n          configuration: 'Release'\n          msbuildArgs: '/restore -t:pack -p:PackageVersion=$(NugetPackageVersion) -p:Version=$(NugetPackageVersion) -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg'\n\n      # publish the packages\n      - task: PowerShell@2\n        displayName: 'Copy NuGet Packages to Staging Directory'\n        inputs:\n          targetType: 'inline'\n          script: |\n            $source = \"$(Pipeline.Workspace)\\drop\\src\"\n            $filter = \"nupkg\"\n            Get-ChildItem -Path $source -Recurse | Where-Object { $_.Extension -match $filter } | Copy-Item -Destination \"$(Build.ArtifactStagingDirectory)\"\n          pwsh: true\n\n      - task: PublishBuildArtifacts@1\n        displayName: 'Publish Unsigned NuGets'\n        inputs:\n          artifactName: nuget\n          pathToPublish: '$(Build.ArtifactStagingDirectory)'\n\n      # make sure we are following the rules, but only on the main build\n      - ${{ if eq(variables['System.TeamProject'], 'devdiv') }}:\n        - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0\n          condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/'))\n          displayName: Component Detection - Log\n          inputs:\n            scanType: LogOnly\n        - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0\n          condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')\n          displayName: Component Detection - Report\n        - task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@1\n          condition: eq(variables['RunPoliCheck'], 'true')\n          displayName: 'PoliCheck'\n          inputs:\n            targetType: F\n\n  - job: build_macos\n    displayName: Build macOS Library\n    pool:\n      vmImage: macos-latest\n    steps:\n      # if this is a tagged build, then update the version number\n      - powershell: |\n          $buildSourceBranch = \"$(Build.SourceBranch)\"\n          $tagVersion = $buildSourceBranch.Substring($buildSourceBranch.LastIndexOf(\"/\") + 1)\n          Write-Host(\"Branch = $buildSourceBranch, Version = $tagVersion\");\n          Write-Host (\"##vso[task.setvariable variable=NugetPackageVersion;]$tagVersion\")\n        displayName: Set NuGet Version to Tag Number\n        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')\n    \n      - task: UseDotNet@2\n        displayName: 'Install .NET SDK'\n        inputs:\n          version: $(NETCORE_VERSION)\n          includePreviewVersions: false\n\n      - task: UseDotNet@2\n        displayName: 'Install .NET 3.1 Test SDK'\n        inputs:\n          version: $(NETCORE_TEST_VERSION_3_1)\n          includePreviewVersions: false\n\n      - task: UseDotNet@2\n        displayName: 'Install .NET 2.1 Test SDK'\n        inputs:\n          version: $(NETCORE_TEST_VERSION_2_1)\n          includePreviewVersions: false\n\n      # restore, build and pack the packages\n      - task: MSBuild@1\n        displayName: Build Xamarin.CommunityToolkit.csproj\n        inputs:\n          solution: $(PathToCommunityToolkitCsproj)\n          configuration: Release\n          msbuildArguments: '/restore /t:Build /p:ContinuousIntegrationBuild=true /p:Deterministic=false'\n\n      - task: MSBuild@1\n        displayName: Pack Community Toolkit NuGets\n        inputs:\n          solution: $(PathToCommunityToolkitCsproj)\n          configuration: Release\n          msbuildArguments: '/t:Pack /p:PackageVersion=$(NugetPackageVersion)'\n\n      - task: MSBuild@1\n        displayName: Build Markup Project\n        inputs:\n          solution: $(PathToMarkupCsproj)\n          configuration: Release\n          msbuildArguments: '/restore /t:Build /p:ContinuousIntegrationBuild=true /p:Deterministic=false'\n\n      - task: MSBuild@1\n        displayName: Pack Markup NuGet\n        inputs:\n          solution: $(PathToMarkupCsproj)\n          configuration: Release\n          msbuildArguments: '/t:Pack /p:PackageVersion=$(NugetPackageVersion)'\n          \n      - task: CmdLine@2\n        displayName: 'Run Markup Unit Tests'\n        inputs:\n          script: 'dotnet test $(PathToMarkupUnitTestCsproj) -c Release -p:BuildInParallel=false'\n     \n      - task: CmdLine@2\n        displayName: 'Run Community Toolkit Unit Tests'\n        inputs:\n          script: 'dotnet test $(PathToCommunityToolkitUnitTestCsproj) -c Release -p:BuildInParallel=false'\n\n  - ${{ if eq(variables['System.TeamProject'], 'devdiv') }}:\n    - template: sign-artifacts/jobs/v2.yml@internal-templates\n      parameters:\n        dependsOn: [ build_windows ]\n        condition: and(succeeded(), or(eq(variables['Sign'], 'true'), startsWith(variables['Build.SourceBranch'],'refs/tags/')))\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "stylecop.json",
          "type": "blob",
          "size": 0.3642578125,
          "content": "{\n  \"$schema\": \"https://raw.githubusercontent.com/DotNetAnalyzers/StyleCopAnalyzers/master/StyleCop.Analyzers/StyleCop.Analyzers/Settings/stylecop.schema.json\",\n\n  \"settings\": {\n    \"layoutRules\": {\n      \"newlineAtEndOfFile\": \"require\"\n    },\n    \"orderingRules\": {\n      \"systemUsingDirectivesFirst\": true,\n      \"usingDirectivesPlacement\": \"outsideNamespace\"\n    }\n  }\n}"
        }
      ]
    }
  ]
}