{
  "metadata": {
    "timestamp": 1736710902615,
    "page": 495,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Cysharp/ZString",
      "stars": 2140,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.5625,
          "content": "# Build Folders (you can keep bin if you'd like, to store dlls and pdbs)\n[Bb]in/\n[Oo]bj/\n\n# mstest test results\nTestResults\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n\n# Build results\n[Dd]ebug/\n[Rr]elease/\nx64/\n*_i.c\n*_p.c\n*.ilk\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.log\n*.vspscc\n*.vssscc\n.builds\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*\n\n# NCrunch\n*.ncrunch*\n.*crunch*.local.xml\n\n# Installshield output folder \n[Ee]xpress\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish\n\n# Publish Web Output\n*.Publish.xml\n\n# NuGet Packages Directory\npackages\n\n# Windows Azure Build Output\ncsx\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\n[Bb]in\n[Oo]bj\nsql\nTestResults\n[Tt]est[Rr]esult*\n*.Cache\nClientBin\n[Ss]tyle[Cc]op.*\n~$*\n*.dbmdl\nGenerated_Code #added for RIA/Silverlight projects\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\n.vs/config/applicationhost.config\n.vs/restore.dg\n\n# OTHER\nnuget/tools/*\n*.nupkg\n\n.vs\n\n# Unity\nLibrary/\nTemp/\nsrc/ZString.Unity/Assembly-CSharp.csproj\nsrc/ZString.Unity/Assembly-CSharp-Editor.csproj\nsrc/ZString.Unity/ZString.csproj\nsrc/ZString.Unity/ZString.Unity.sln\n\nsrc/ZString.Unity/ZString.Unity.unitypackage\n\n# Benchmark Results\n**/BenchmarkDotNet.Artifacts/*\n\nsrc/ZString.Unity/Unity.Analytics.DataPrivacy.csproj\n\nsrc/ZString.Unity/Unity.CollabProxy.Editor.csproj\n\nsrc/ZString.Unity/Unity.Rider.Editor.csproj\n\nsrc/ZString.Unity/Unity.TextMeshPro.csproj\n\nsrc/ZString.Unity/Unity.TextMeshPro.Editor.csproj\n\nsrc/ZString.Unity/Unity.Timeline.csproj\n\nsrc/ZString.Unity/Unity.Timeline.Editor.csproj\n\nsrc/ZString.Unity/Unity.VisualStudio.Editor.csproj\n\nsrc/ZString.Unity/Unity.VSCode.Editor.csproj\n\nsrc/ZString.Unity/UnityEditor.TestRunner.csproj\n\nsrc/ZString.Unity/UnityEditor.UI.csproj\n\nsrc/ZString.Unity/UnityEngine.Advertisements.csproj\n\nsrc/ZString.Unity/UnityEngine.Monetization.csproj\n\nsrc/ZString.Unity/UnityEngine.TestRunner.csproj\n\nsrc/ZString.Unity/UnityEngine.UI.csproj\n\nsrc/ZString.Unity/*.csproj\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2020 Cysharp, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.662109375,
          "content": "ZString\n===\n[![GitHub Actions](https://github.com/Cysharp/ZString/workflows/Build-Debug/badge.svg)](https://github.com/Cysharp/ZString/actions) [![Releases](https://img.shields.io/github/release/Cysharp/ZString.svg)](https://github.com/Cysharp/ZString/releases)\n\n**Z**ero Allocation **String**Builder for .NET Core and Unity.\n\n* Struct StringBuilder to avoid allocation of builder itself\n* Rent write buffer from `ThreadStatic` or `ArrayPool`\n* All append methods are generics(`Append<T>(T value)`) and write to buffer directly instead of concatenate `value.ToString`\n* `T1`~`T16` AppendFormat(`AppendFormat<T1,...,T16>(string format, T1 arg1, ..., T16 arg16)` avoids boxing of struct argument\n* Also `T1`~`T16` Concat(`Concat<T1,...,T16>(T1 arg1, ..., T16 arg16)`) avoid boxing and `value.ToString` allocation\n* Convenient `ZString.Format/Concat/Join` methods can replace instead of `String.Format/Concat/Join`\n* Can build both Utf16(`Span<char>`) and Utf8(`Span<byte>`) directly\n* Can use inner buffer to avoid allocate final string\n* Integrated with Unity TextMeshPro to avoid string allocation\n\n![image](https://user-images.githubusercontent.com/46207/74473217-9061e200-4ee6-11ea-9a77-14d740886faa.png)\n\nThis graph compares following codes.\n\n* `\"x:\" + x + \" y:\" + y + \" z:\" + z`\n* `ZString.Concat(\"x:\", x, \" y:\", y, \" z:\", z)`\n* `string.Format(\"x:{0} y:{1} z:{2}\", x, y, z)`\n* `ZString.Format(\"x:{0} y:{1} z:{2}\", x, y, z)`\n* `new StringBuilder(), Append(), .ToString()`\n* `ZString.CreateStringBuilder(), Append(), .ToString()`\n\n`\"x:\" + x + \" y:\" + y + \" z:\" + z` is converted to `String.Concat(new []{ \"x:\", x.ToString(), \" y:\", y.ToString(), \" z:\", z.ToString() })` by C# compiler. It has each `.ToString` allocation and params array allocation. `string.Format` calls `String.Format(string, object, object, object)` so each arguments causes int -> object boxing.\n\nAll `ZString` methods only allocate final string. Also, `ZString` has enabled to access inner buffer so if output target has stringless api(like Unity TextMeshPro's `SetCharArray`), you can achieve completely zero allocation.\n\nThe blog post of detailed explanation by author: [medium@neuecc/ZString](https://medium.com/@neuecc/zstring-zero-allocation-stringbuilder-for-net-core-and-unity-f3163c88c887)\n\nRelated project for loggin using with ZString, [Cysharp/ZLogger](https://github.com/Cysharp/ZLogger) - Zero Allocation Text/Strcutured Logger.\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## Table of Contents\n\n- [Getting Started](#getting-started)\n- [Reference](#reference)\n- [Unity](#unity)\n- [Advanced Tips](#advanced-tips)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\nGetting Started\n---\nFor .NET Core, use NuGet.\n\n> PM> Install-Package [ZString](https://www.nuget.org/packages/ZString)\n\nFor Unity, check the [releases](https://github.com/Cysharp/ZString/releases) page, download `ZString.Unity.unitypackage`.\n\n```csharp\nusing Cysharp.Text; // namespace\n\nasync void Example(int x, int y, int z)\n{\n    // same as x + y + z\n    _ = ZString.Concat(x, y, z);\n\n    // also can use numeric format strings\n    _ = ZString.Format(\"x:{0}, y:{1:000}, z:{2:P}\",x, y, z);\n\n    _ = ZString.Join(',', x, y, z);\n\n    // for Unity, direct write(avoid string allocation completely) to TextMeshPro\n    tmp.SetTextFormat(\"Position: {0}, {1}, {2}\", x, y, z);\n\n    // create StringBuilder\n    using(var sb = ZString.CreateStringBuilder())\n    {\n        sb.Append(\"foo\");\n        sb.AppendLine(42);\n        sb.AppendFormat(\"{0} {1:.###}\", \"bar\", 123.456789);\n\n        // and build final string\n        var str = sb.ToString();\n\n        // for Unity, direct write to TextMeshPro\n        tmp.SetText(sb);\n\n        // write to destination buffer\n        sb.TryCopyTo(dest, out var written);\n    }\n\n    // prepare format, return value should store to field(like RegexOptions.Compile)\n    var prepared = ZString.PrepareUtf16<int, int>(\"x:{0}, y:{1:000}\");\n    _ = prepared.Format(10, 20);\n\n    // C# 8.0, Using declarations\n    // create Utf8 StringBuilder that build Utf8 directly to avoid encoding\n    using var sb2 = ZString.CreateUtf8StringBuilder();\n\n    sb2.AppendFormat(\"foo:{0} bar:{1}\", x, y);\n\n    // directly write to steam or dest to avoid allocation\n    await sb2.WriteToAsync(stream);\n    sb2.CopyTo(bufferWritter);\n    sb2.TryCopyTo(dest, out var written);\n}\n```\n\nReference\n---\n**static class ZString**\n\n| method | returns | description |\n| -- | -- | -- |\n| CreateStringBuilder() | Utf16ValueStringBuilder | Create the Utf16 string StringBuilder. |\n| CreateStringBuilder(bool notNested) | Utf16ValueStringBuilder | Create the Utf16 string StringBuilder, when true uses thread-static buffer that is faster but must return immediately. |\n| CreateUtf8StringBuilder() | Utf8ValueStringBuilder | Create the Utf8(`Span<byte>`) StringBuilder. |\n| CreateUtf8StringBuilder(bool notNested) | Utf8ValueStringBuilder | Create the Utf8(`Span<byte>`) StringBuilder, when true uses thread-static buffer that is faster but must return immediately. |\n| `Join(char/string, T[]/IE<T>)` | string | Concatenates the elements of an array, using the specified seperator between each element. |\n| `PrepareUtf16<T1,..,T16>(string)` | `Utf16PreparedFormat<T1,...,T16>` | Prepare string format to avoid parse template in each operation. |\n| `PrepareUtf8<T1,..,T16>(string)` | `Utf8PreparedFormat<T1,...,T16>` | Prepare string format to avoid parse template in each operation. |\n| `Concat<T1,..,T16>(T1,..,T16)` | string | Concatenates the string representation of some specified values. |\n| `Format<T1,..,T16>(string, T1,..,T16)` | string | Replaces one or more format items in a string with the string representation of some specified values. |\n| `Utf8Format<T1,..,T16>(IBufferWriter<byte>, T1,..,T16)` | void | Replaces one or more format items in a string with the string representation of some specified values. |\n\n**struct Utf16ValueStringBuilder : `IBufferWriter<char>`, IDisposable**\n\n| method | returns | description |\n| -- | -- | -- |\n| Length | int | Length of written buffer. |\n| AsSpan() | `ReadOnlySpan<char>` | Get the written buffer data. |\n| AsMemory() | `ReadOnlyMemory<char>` | Get the written buffer data. |\n| AsArraySegment() | `ArraySegment<char>` | Get the written buffer data. |\n| Dispose() | void | Return the inner buffer to pool. |\n| `Append<T>(T value)` | void | Appends the string representation of a specified value to this instance. |\n| `Append<T>(T value, string format)` | void | Appends the string representation of a specified value to this instance with numeric format strings. |\n| `AppendJoin(char/string, T[]/IE<T>)`| void | Concatenates and appends the elements of an array, using the specified seperator between each element. |\n| `AppendLine()` | void | Appends the default line terminator to the end of this instance. |\n| `AppendLine<T>(T value)` | void | Appends the string representation of a specified value followed by the default line terminator to the end of this instance. |\n| `AppendLine<T>(T value, string format)` | void | Appends the string representation of a specified value with numeric format strings followed by the default line terminator to the end of this instance. |\n| `AppendFormat<T1,..,T16>(string, T1,..,T16)` | void | Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments. |\n| `TryCopyTo(Span<char>, out int)` | bool | Copy inner buffer to the destination span. |\n| ToString() | string | Converts the value of this instance to a System.String. |\n| GetMemory(int sizeHint) | `Memory<char>` | IBufferWriter.GetMemory. |\n| GetSpan(int sizeHint) | `Span<char>` | IBufferWriter.GetSpan. |\n| Advance(int count) | void | IBufferWriter.Advance. |\n| static `RegisterTryFormat<T>(TryFormat<T>)` | void | Register custom formatter. |\n\n**struct Utf8ValueStringBuilder : `IBufferWriter<byte>`, IDisposable**\n\n| method | returns | description |\n| -- | -- | -- |\n| Length | int | Length of written buffer. |\n| AsSpan() | `ReadOnlySpan<char>` | Get the written buffer data. |\n| AsMemory() | `ReadOnlyMemory<char>` | Get the written buffer data. |\n| AsArraySegment() | `ArraySegment<char>` | Get the written buffer data. |\n| Dispose() | void | Return the inner buffer to pool. |\n| `Append<T>(T value)` | void | Appends the string representation of a specified value to this instance. |\n| `Append<T>(T value, StandardFormat format)` | void | Appends the string representation of a specified value to this instance with numeric format strings. |\n| `AppendJoin(char/string, T[]/IE<T>)`| void | Concatenates and appends the elements of an array, using the specified seperator between each element. |\n| `AppendLine()` | void | Appends the default line terminator to the end of this instance. |\n| `AppendLine<T>(T value)` | void | Appends the string representation of a specified value followed by the default line terminator to the end of this instance. |\n| `AppendLine<T>(T value, StandardFormat format)` | void | Appends the string representation of a specified value with numeric format strings followed by the default line terminator to the end of this instance. |\n| `AppendFormat<T1,..,T16>(string, T1,..,T16)` | void | Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments. |\n| `CopyTo(IBufferWriter<byte>)` | void | Copy inner buffer to the buffer writer. |\n| `TryCopyTo(Span<byte>, out int)` | bool | Copy inner buffer to the destination span. |\n| WriteToAsync(Stream stream) | Task | Write inner buffer to stream. |\n| ToString() | string | Encode the innner utf8 buffer to a System.String. |\n| GetMemory(int sizeHint) | `Memory<char>` | IBufferWriter.GetMemory. |\n| GetSpan(int sizeHint) | `Span<char>` | IBufferWriter.GetSpan. |\n| Advance(int count) | void | IBufferWriter.Advance. |\n| static `RegisterTryFormat<T>(TryFormat<T>)` | void | Register custom formatter. |\n\n**class `Utf16PreparedFormat<T1,..,T16>`**\n\n| method | returns | description |\n| -- | -- | -- |\n| `Format` | string | Replaces one or more format items in a string with the string representation of some specified values. |\n| `FormatTo<TBufferWriter>(ref TBufferWriter, T1,..,T16)` | void | Replaces one or more format items in a string with the string representation of some specified values. |\n\n**class `Utf8PreparedFormat<T1,..,T16>`**\n\n| method | returns | description |\n| -- | -- | -- |\n| `Format` | string | Replaces one or more format items in a string with the string representation of some specified values. |\n| `FormatTo<TBufferWriter>(ref TBufferWriter, T1,..,T16)` | void | Replaces one or more format items in a string with the string representation of some specified values. |\n\n**class ZStringWriter : TextWriter**\n\nA `TextWriter` implementation that is backed with `Utf16ValueStringBuilder`  \nIt's important to make sure the writer is always properly disposed.\n\n**static class TextMeshProExtensions**(Unity only)\n\n| method | returns | description |\n| -- | -- | -- |\n| SetText(Utf16ValueStringBuilder) | void | Set inner buffer to text mesh pro directly to avoid string allocation. |\n| `SetTextFormat<T1,..,T16>(string, T1,..,T16)` | void | Set formatted string without string allocation. |\n\nUnity\n---\nInstall via UPM git URL package or asset package(ZString...*.unitypackage) available in [ZString/releases](https://github.com/Cysharp/ZString/releases) page.\n\n* `https://github.com/Cysharp/ZString.git?path=src/ZString.Unity/Assets/Scripts/ZString`\n\nIf you want to set a target version, ZString uses the `*.*.*` release tag so you can specify a version like #2.4.0. For example `https://github.com/Cysharp/ZString.git?path=src/ZString.Unity/Assets/Scripts/ZString#2.4.0`.\n\nSupporting minimum Unity version is 2021.3. The dependency managed DLL `System.Runtime.CompilerServices.Unsafe/6.0.0` is included with unitypackage. For git references, you will need to add them in another way as they are not included to avoid unnecessary dependencies; either extract the dll from unitypackage or download it from the [NuGet page](https://www.nuget.org/packages/System.Runtime.CompilerServices.Unsafe/6.0.0).\n\nTextMeshPro support is automatically enabled when importing the `com.unity.textmeshpro` package from package manager. (If you do not use the package manager, define the scripting define symbol `ZSTRING_TEXTMESHPRO_SUPPORT` to enable it.)\n\nAdvanced Tips\n---\n`ZString.CreateStringBuilder(notNested:true)` is a special optimized parameter that uses `ThreadStatic` buffer instead of rent from `ArrayPool`. It is slightly faster but can not use in nested.\n\n```csharp\nusing(var sb = ZString.CreateStringBuilder(true))\n{\n    sb.Append(\"foo\");\n\n    using var sb2 = ZString.CreateStringBuilder(true); // NG, nested stringbuilder uses conflicted same buffer\n    var str = ZString.Concat(\"x\", 100); // NG, ZString.Concat/Join/Format uses threadstatic buffer\n}\n```\n\n```csharp\n// OK, return buffer immediately.\nusing(var sb = ZString.CreateStringBuilder(true))\n{\n    sb.Append(\"foo\");\n    return sb.ToString();\n}\n```\n\n`ZString.CreateStringBuilder()` is same as `ZString.CreateStringBuilder(notNested:false)`.\n\n---\n\nIn default, `SByte`, `Int16`, `Int32`, `Int64`, `Byte`, `UInt16`, `UInt32`, `UInt64`, `Single`, `Double`, `TimeSpan`, `DateTime`, `DateTimeOffset`, `Decimal`, `Guid`, `String`, `Char` are used there own formatter to avoid `.ToString()` allocation, write directly to buffer. If not exists there list type, used `.ToString()` and copy string data.\n\nIf you want to avoid to convert string in custom type, you can register your own formatter.\n\n```csharp\nUtf16ValueStringBuilder.RegisterTryFormat((MyStruct value, Span<char> destination, out int charsWritten, ReadOnlySpan<char> format) =>\n{\n    // write value to destionation and set size to charsWritten.\n    charsWritten = 0;\n    return true;\n});\n\nUtf8ValueStringBuilder.RegisterTryFormat((MyStruct value, Span<byte> destination, out int written, StandardFormat format) =>\n{\n    written = 0;\n    return true;\n});\n```\n\n---\n\n`CreateStringBuilder` and `CreateUtf8StringBuilder` must use with `using`. Because their builder rent 64K buffer from `ArrayPool`. If not return buffer, allocate 64K buffer when string builder is created.\n\n---\n\n`Utf16ValueStringBuilder` and `Utf8ValueStringBuilder` are mutable struct, be careful to copy by passing method. Use `ref` and `try-finally`.\n\n```csharp\nvoid Build()\n{\n    var sb = ZString.CreateStringBuilder();\n    try\n    {\n        BuildHeader(ref sb);\n        BuildMessage(ref sb);\n    }\n    finally\n    {\n        // when use with `ref`, can not use `using`.\n        sb.Dispose();\n    }\n}\n\n\nvoid BuildHeader(ref Utf16ValueStringBuilder builder)\n{\n    //..\n}\n\nvoid BuildMessage(ref Utf16ValueStringBuilder builder)\n{\n    //..\n}\n```\n\n---\n\n Utf8Format, Utf8StringBuilder uses [Utf8Formatter.TryFormat](https://docs.microsoft.com/en-us/dotnet/api/system.buffers.text.utf8formatter.tryformat) and there format string is not same as standard format. It uses [StandardFormat](https://docs.microsoft.com/en-us/dotnet/api/system.buffers.standardformat), combinate of symbol char and precision. Supported format string symbol can find in Utf8Formatter.TryFormat document(For example Int32 supports `G`, `D`, `N`, `X` and Boolean supports `G`, `I`). Precision(zero padding) can pass after symbol like `D2`. For example `sb.AppendFormat(\"{0:D2}:{1:D2}:{2:D2}\", hour, minute, second)`.\n\n[TryFormat(DateTime)](https://docs.microsoft.com/en-us/dotnet/api/system.buffers.text.utf8formatter.tryformat?view=netcore-3.1#System_Buffers_Text_Utf8Formatter_TryFormat_System_DateTime_System_Span_System_Byte__System_Int32__System_Buffers_StandardFormat_) and [TryFormat(TimeSpan)](https://docs.microsoft.com/en-us/dotnet/api/system.buffers.text.utf8formatter.tryformat?view=netcore-3.1#System_Buffers_Text_Utf8Formatter_TryFormat_System_TimeSpan_System_Span_System_Byte__System_Int32__System_Buffers_StandardFormat_) symbol is too restricted than standard string format. If you want to use custom format, deconstruct there `Day`, `Hour`, etc.\n\n---\n\n`Utf8ValueStringBuilder` and `Utf16ValueStringBuilder` implements `IBufferWriter` so you can pass serializer(such as `JsonSerializer` of `System.Text.Json`). But be careful to boxing copy, `ValueStringBuilder` is mutable struct. For example,\n\n```csharp\nusing var sb = ZString.CreateUtf8StringBuilder();\nIBufferWriter<byte> boxed = sb;\nvar writer = new Utf8JsonWriter(boxed);\nJsonSerializer.Serialize(writer, ....);\n\nusing var unboxed = (Utf8ValueStringBuilder)boxed;\nvar str = unboxed.ToString();\n```\n\nLicense\n---\nThis library is licensed under the MIT License.\n\n.NET Standard 2.0 and Unity version borrows [dotnet/runtime](https://github.com/dotnet/runtime) conversion methods, there exists under `ZString/Number` directory. This third-party license follows [runtime/LICENSE.TXT](https://github.com/dotnet/runtime/blob/master/LICENSE.TXT).\n"
        },
        {
          "name": "ZString.sln",
          "type": "blob",
          "size": 3.55078125,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.3.32901.215\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"docs\", \"docs\", \"{175A1317-7622-4CC3-9553-1E9E908FF085}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.gitignore = .gitignore\n\t\t.circleci\\config.yml = .circleci\\config.yml\n\t\tLICENSE = LICENSE\n\t\tREADME.md = README.md\n\tEndProjectSection\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"src\", \"src\", \"{B385367D-2EB5-49B3-A3EF-922151EC1904}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"sandbox\", \"sandbox\", \"{A7D7AA7D-9A79-48A8-978D-0C98EBD81ED0}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"tests\", \"tests\", \"{0803618F-C4E8-4D37-831E-5D26C5574F49}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ZString\", \"src\\ZString\\ZString.csproj\", \"{7B09D422-D19A-457E-ADA0-4CDC2DC581BB}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ConsoleApp\", \"sandbox\\ConsoleApp\\ConsoleApp.csproj\", \"{9ADF67E1-1872-43D3-882E-607071726FE7}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ZString.Tests\", \"tests\\ZString.Tests\\ZString.Tests.csproj\", \"{62090C00-9727-4375-BE40-ABE2F4D41571}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"PerfBenchmark\", \"sandbox\\PerfBenchmark\\PerfBenchmark.csproj\", \"{D766AEB3-3609-4F1D-8D81-5549F748F372}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{7B09D422-D19A-457E-ADA0-4CDC2DC581BB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{7B09D422-D19A-457E-ADA0-4CDC2DC581BB}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{7B09D422-D19A-457E-ADA0-4CDC2DC581BB}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{7B09D422-D19A-457E-ADA0-4CDC2DC581BB}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{9ADF67E1-1872-43D3-882E-607071726FE7}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{9ADF67E1-1872-43D3-882E-607071726FE7}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{9ADF67E1-1872-43D3-882E-607071726FE7}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{9ADF67E1-1872-43D3-882E-607071726FE7}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{62090C00-9727-4375-BE40-ABE2F4D41571}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{62090C00-9727-4375-BE40-ABE2F4D41571}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{62090C00-9727-4375-BE40-ABE2F4D41571}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{62090C00-9727-4375-BE40-ABE2F4D41571}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{D766AEB3-3609-4F1D-8D81-5549F748F372}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{D766AEB3-3609-4F1D-8D81-5549F748F372}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{D766AEB3-3609-4F1D-8D81-5549F748F372}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{D766AEB3-3609-4F1D-8D81-5549F748F372}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{7B09D422-D19A-457E-ADA0-4CDC2DC581BB} = {B385367D-2EB5-49B3-A3EF-922151EC1904}\n\t\t{9ADF67E1-1872-43D3-882E-607071726FE7} = {A7D7AA7D-9A79-48A8-978D-0C98EBD81ED0}\n\t\t{62090C00-9727-4375-BE40-ABE2F4D41571} = {0803618F-C4E8-4D37-831E-5D26C5574F49}\n\t\t{D766AEB3-3609-4F1D-8D81-5549F748F372} = {A7D7AA7D-9A79-48A8-978D-0C98EBD81ED0}\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {DF39BF43-3E0E-4F7D-9943-7E50D301234D}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "opensource.snk",
          "type": "blob",
          "size": 0.58203125,
          "content": null
        },
        {
          "name": "sandbox",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}