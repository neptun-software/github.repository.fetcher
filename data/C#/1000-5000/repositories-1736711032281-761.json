{
  "metadata": {
    "timestamp": 1736711032281,
    "page": 761,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "NEventStore/NEventStore",
      "stars": 1583,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.6083984375,
          "content": "# Build Folders (you can keep bin if you'd like, to store dlls and pdbs)\n[Bb]in/\n[Oo]bj/\nbuild/\n\n# mstest test results\nTestResults\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n\n# Build results\n[Dd]ebug/\n[Rr]elease/\nx64/\n*_i.c\n*_p.c\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.log\n*.vspscc\n*.vssscc\n.builds\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*\n\n# NCrunch\n*.ncrunch*\n.*crunch*.local.xml\n\n# Installshield output folder \n[Ee]xpress\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish\n\n# Publish Web Output\n*.Publish.xml\n\n# NuGet Packages Directory\npackages\n\n# Windows Azure Build Output\ncsx\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\n[Bb]in\n[Oo]bj\nsql\nTestResults\n[Tt]est[Rr]esult*\n*.Cache\nClientBin\n[Ss]tyle[Cc]op.*\n~$*\n*.dbmdl\nGenerated_Code #added for RIA/Silverlight projects\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\npublish-net40/\nnunit.TestResult.*\n/output\n\n# Visual Studio options and artifacts\n.vs/\n*.lock.json\n\n# Custom\nartifacts/"
        },
        {
          "name": ".vs",
          "type": "tree",
          "content": null
        },
        {
          "name": "Changelog.md",
          "type": "blob",
          "size": 10.994140625,
          "content": "# NEventStore Versions\n\n## 9.2.0\n\n- Updated nuget packages to include symbol packages and more information.\n- Updated Newtonsoft.Bson 13.0.3\n- Added MessagePack serializer, thanks to [@pvagnozzi](https://github.com/pvagnozzi)\n- Improved comments and removed some compilation warnings.\n\n## 9.1.1\n\n- Fixed `build.ps1` script to correctly update Assembly Version number before building.\n- Updated Readme with how Versioning works.\n\n## 9.1.0\n\n- Support the following Target Frameworks only: netstandard2.0, net462.\t\n- Updated Newtonsoft.Json 13.0.3\n\n## 9.0.1 \n\n- Added documentation files to NuGet packages (improved intellisense support) [#496](https://github.com/NEventStore/NEventStore/issues/496)\n\n## 9.0.0\n\n- Added support for .net 6 [#493](https://github.com/NEventStore/NEventStore/issues/493).\n- Change / Optimization: Commit and CommitAttempt do not create internal readonly collections anymore, it can be useless given the fact we can change properties of events.\n- NEventStore.Serialization.Json: accepts a JsonSerializerSettings to configure the serializer.\n\n## 8.0.0\n\n- Added support for .net 5 [#489](https://github.com/NEventStore/NEventStore/issues/489).\n- Added support for .net framework 4.6.1.\n- Fixed InMemoryPersistenceEngine.AddSnapshot() behavior: adding multiple snapshots for the same tuple bucketId, streamId, streamRevision is not allowed; the updated snapshot will be ignored [#484](https://github.com/NEventStore/NEventStore/pull/484).\n- Logging infrastructure switched to [Microsoft.Extensions.Logging](https://docs.microsoft.com/en-us/dotnet/core/extensions/logging) [#454](https://github.com/NEventStore/NEventStore/issues/454), [#488](https://github.com/NEventStore/NEventStore/pull/488).\n- Reviewed Exception (and logging) messages: many of those that refer to a StreamId should also provide BucketId information [#480](https://github.com/NEventStore/NEventStore/issues/480)\n\n### Breaking Changes\n\n- Droppped support for .Net Framework 4.5, only .Net 4.6.1+ will be supported in 8.x. .Net Framewrok support will be dropped in a future revision.\n- Logging switched to Microsoft.Extensions.Logging, old logging code and configuration functions have been removed.\n\n## 7.0.0\n\n- The IPersistStreams interface got some major changes:\n\t- Added new GetFromTo(Int64, Int64) and GetFromTo(Strimg, Int64, Int64) methods to the IPersistStreams interface.\n\t- Extension methods PersistStreamsExtensions.GetFrom(DateTime) and PersistStreamsExtensions.GetFromTo(DateTime, DateTime) were marked obsolete and will be removed.\n\t- A new PersistStreamsExtensions.GetCommit(Int64) method was added to retrieve a single commit [#445](https://github.com/NEventStore/NEventStore/issues/445).\n- PollingClient was moved to its own NEventStore.PollingClient NuGet package [#467](https://github.com/NEventStore/NEventStore/issues/467).\n- Added more information to the DuplicateCommitException error message (StreamId and BucketId), also the information provided by the Persistence providers will be reviewed [#372](https://github.com/NEventStore/NEventStore/issues/372).\n\n### Breaking Changes\n\n- The default value of 0 has been removed from the IPersistStreams.GetFrom(Int64) method.\n- Removed the almost useless GetFromStart() extension method: use IPersistStream.GetFrom(0).\n- Bson serializer was moved from NEventStore.Serialization.Json to its own package: 'NEventStore.Serialization.Bson'. Closes: [#479](https://github.com/NEventStore/NEventStore/issues/479).\n- PollingClient was moved to its own package: add a reference to NEventStore.PollingClient NuGet package. Also the namespace was changed from NEventStore.Client to NEventStorePollingClient.\n\n## 6.1.0\n\nEnlist in ambient transaction has been removed from the mail library and added to the persistence drivers implementations, each driver has its own way to support, enable or disable the feature. As of now this change will mainly impact Microsoft SQL Server users, because all other persistence plugins didn't use transactions at all.\n\nAll the transactions (or their suppression) should be explicitly managed by the user.\n\nMinor optimizations were made if no pipeline hooks are used.\n\n### Breaking Changes\n\n- **PipelineHookBase**: changed the way the Dispose pattern was implemented to be compliant with the framework guildelines. Move all the dispose logic to the overridden Dispose(bool disposing) method of your pipeline hook class.\n- **OptimisticPipelineHook** optmization is not configured and enabled by default (if not enlisting in ambient transactions) anymore; it now must be explicitly enabled calling UseOptimisticPipelineHook() when configuring NEventStore. Do not use it if you plan to use transactions. To restore the previous behavior call .UseOptimisticPipelineHook() when configuring NEventStore.\n- **EnlistInAmbientTransaction** has been removed from the core NEventStore library. It will be added to specific persistence drivers implementations.\n\n## 6.0.0\n\n__Version 6.x is not backwards compatible with version 5.x.__ Updating to NEventStore 6.x without doing some preparation work will result in problems.\n\n### New Features\n\n- dotnet standard 2.0 , dotnet core 2.0 are now supported for the following projects: NEventStore, NEventStore.Domain, NEventStore.Persistence.Sql, NEventStore.Persistence.MongoDb\n\n### Breaking Changes\n\n- **Removed Dispatcher and dispatching mechanic, use the PollingClient**: it was marked obsolete in the version 5.x, you should dispatch events with other mechanisms, like using a PollingClient.\nMore information on this topic in the issue: [Race condition in sync and async dispatchers can result in subscribers getting commits / events out of order](https://github.com/NEventStore/NEventStore/issues/360).\n- **Removed LongCheckpoint class**: checkpoint now is a plain Int64, there is no need to keep a LongCheckpoint class anymore. \n- **PollingClient was removed because it used to depend on Rx**: you can [read more information here](src/NEventStore/Client/README.MD). The new polling client class is called PollingClient2, this however should be considered as a sample implementation you can use to derive your own.\n- **JsonSerializer and BsonSerializer were moved in a separate assembly**: if you need them, you should reference the NEventStore.Serialization.Json assembly or implement your own serializers that depend on the Json.Net version you need.\n- **EventMessage** class is now sealed.\n- **OptimistcEventStream throws exceptions if a null message or a message with null body is added to the stream**. Previously if you called Add with null event message or add with an eventmessage with null body, the add operation was ignored without any warning or error. \n\n## 6.0.0-rc-1\n\nNew features:\n\n- improved logging performances ([#468](https://github.com/NEventStore/NEventStore/issues/468)).\n\nBug fixed:\n\n- adding events in the middle of a commit should throw ConsuccencyException ([#420](https://github.com/NEventStore/NEventStore/issues/420)).\n\n## 6.0.0-rc-0\n\n__Version 6.x is not backwards compatible with version 5.x.__ Updating to NEventStore 6.x without doing some preparation work will result in problems.\n\n### New Features\n\n- dotnet standard 2.0 , dotnet core 2.0 are now supported for the following projects: NEventStore, NEventStore.Domain, NEventStore.Persistence.Sql, NEventStore.Persistence.MongoDb\n\n### Breaking changes\n\n- **Removed Dispatcher and dispatching mechanic, use the PollingClient**: it was marked obsolete in the version 5.x, you should dispatch events with other mechanisms, like using a PollingClient.\nMore information on this topic in the issue: [Race condition in sync and async dispatchers can result in subscribers getting commits / events out of order](https://github.com/NEventStore/NEventStore/issues/360).\n- **Removed LongCheckpoint class**: checkpoint now is a plain Int64, there is no need to keep a LongCheckpoint class anymore. \n- **PollingClient was removed because it used to depend on Rx**: you can [read more information here](src/NEventStore/Client/README.MD). The new polling client class is called PollingClient2, this however should be considered as a sample implementation you can use to derive your own.\n- **JsonSerializer and BsonSerializer were moved in a separate assembly**: if you need them, you should reference the NEventStore.Serialization.Json assembly or implement your own serializers that depend on the Json.Net version you need.\n- **EventMessage** class is now sealed.\n- **OptimistcEventStream throws exceptions if a null message or a message with null body is added to the stream**. Previously if you called Add with null event message or add with an eventmessage with null body, the add operation was ignored without any warning or error. \n\n### Other Notes\n\nAll persistence providers: \n\n- [MongoDb](https://github.com/NEventStore/NEventStore.Persistence.MongoDB)\n- [Sql](https://github.com/NEventStore/NEventStore.Persistence.SQL) \n- [RavenDb](https://github.com/NEventStore/NEventStore.Persistence.RavenDB) - currently not maintained anymore.\n\nare now hosted in their own project. \n\nCommon Domain is now moved in its [own repository](https://github.com/NEventStore/NEventStore.Domain).\n\n## 5.x.x\n\nNote: Version 5 is not backwards compatible with v4. Updating to v5 without doing some preparation work will result in problems.\n\n### Breaking Changes\n\n1. Underlying schema has changed for all v5 storage engines. In order to migrate a store from v4 to v5 use NEventStore.Migrations\n1.The concept of a 'Bucket' has been added as a container for streams allowing multi-tenancy, partitions, multiple-bounded contexts, sagas, etc to be stored in the one store. The API changes have been such that, using extension methods, operations will work on the default bucket, unless a bucket Id has been explicitly supplied. This should mean minimal code changes for the user.\n1.Stream Ids are now string based and are limited to 1000 characters.\nIn the SQL engines the stream Id's are limited to 40 characters and are hashed versions of the actual StreamId.\nThe hashing function can be overridden during wireup.\n\n### New Features\n\n#### Polling Client\n\nAs an alternative to the dispatcher mechanism and improved replay / catch-up story we have implemented a CheckpointNumber in the stores that guarantees ordering across the streams. This number is guaranteed to increment but not guaranteed to be sequential. This allows you to get all Commits from a specific checkpoint and observe new ones. This implementation is polling based (and thus works for all engines) so it doesn't have the same low-latency attributes of the dispatcher mechanism. You can see how to use it here: [https://gist.github.com/damianh/6370328](https://gist.github.com/damianh/6370328) .In this, instead of the store tracking what has been dispatched, the onus is on the client to track what it has seen. And upon restart, start subscribing from what it last saw.\n\nIn the future I'd like to see / implement reactive clients that leverage stores that are observable.\n\n### Other Notes\n\n1. Only SQL and MongoDB persistence engines are supported in this release. RavenDB engine will be shipped later.\n1. RavenDB and MongoDB persistence engines are now in their own repositories and will have be shipped independently.\n"
        },
        {
          "name": "GitVersion.yml",
          "type": "blob",
          "size": 0.0869140625,
          "content": "mode: ContinuousDeployment\r\nbranches: {}\r\nignore:\r\n  sha: []\r\nmerge-message-formats: {}\r\n"
        },
        {
          "name": "Readme.md",
          "type": "blob",
          "size": 2.798828125,
          "content": "NEventStore\n===\n\nNEventStore is a persistence library used to abstract different storage implementations when using event sourcing as storage mechanism. \n\nThis library is developed with a specific focus on [DDD](http://en.wikipedia.org/wiki/Domain-driven_design)/[CQRS](https://en.wikipedia.org/wiki/Command%E2%80%93query_separation#Command_query_responsibility_segregation) applications.\n\nNEventStore currently supports:\n\n- .net standard 2.0\n- .net framework 4.6.2\n\nStarting from Version 6.0.0 NEventStore will use [Semantic Versioning](https://semver.org/) to track the version numbers.\n\nBuild Status (AppVeyor)\n===\n\nBranches: \n\n- master [![Build status](https://ci.appveyor.com/api/projects/status/frg36pb2oh1j2ddi/branch/master?svg=true)](https://ci.appveyor.com/project/AGiorgetti/neventstore/branch/master)\n- develop [![Build status](https://ci.appveyor.com/api/projects/status/frg36pb2oh1j2ddi/branch/develop?svg=true)](https://ci.appveyor.com/project/AGiorgetti/neventstore/branch/develop)\n\nMain Library Packages\n===\n\n- NEventStore - the core library package.\n- NEventStore.Serialization.Json - Json serialization to be used with an IDocumentSerializer.\n- NEventStore.Serialization.Bson - BSon serialization to be used with an IDocumentSerializer.\n- NEventStore.Serialization.MsgPack - Message Pack serialization to be used with an IDocumentSerializer.\n- NEventStore.PollingClient - provides an implementation for a PollingClient.\n\nDocumentation\n===\n\nPlease see the [documentation](https://github.com/NEventStore/NEventStore/wiki) to get started and for more information.\n\nChangeLog can be [found here](https://github.com/NEventStore/NEventStore/blob/master/Changelog.md)\n\n### Developed with:\n\n[![Resharper](http://neventstore.org/images/logo_resharper_small.gif)](http://www.jetbrains.com/resharper/)\n[![TeamCity](http://neventstore.org/images/logo_teamcity_small.gif)](http://www.jetbrains.com/teamcity/)\n[![dotCover](http://neventstore.org/images/logo_dotcover_small.gif)](http://www.jetbrains.com/dotcover/)\n[![dotTrace](http://neventstore.org/images/logo_dottrace_small.gif)](http://www.jetbrains.com/dottrace/)\n\n# How to build (Windows OS)\n\nTo build the project locally on a Windows Machine:\n\n- Open a Powershell console in Administrative mode and run the build script `build.ps1` in the root of the repository.\n\n## Versioning\n\nVersioning is done automatically by the build script updating the\nAssemblyInfo.cs file (<GenerateAssemblyInfo>false</GenerateAssemblyInfo> in .csproj files) \nbefore the build starts. The version number is retrieved\nfrom the git repository tags using \"gitversion\" tool.\n\nThings are handled this way because NEventStore is used a submodule in other projects and it\nneed to have it's own version number when building other projects.\n\nYou should not update the version number manually, not commit the updated AssemblyInfo files."
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.9853515625,
          "content": "version: 1.0.{build}\r\nimage: Visual Studio 2022\r\nconfiguration: Release\r\nassembly_info:\r\n  patch: true\r\n  file: '**\\AssemblyInfo.*'\r\n  assembly_version: '{version}'\r\n  assembly_file_version: '{version}'\r\n  assembly_informational_version: '{version}'\r\ndotnet_csproj:\r\n  patch: true\r\n  file: '**\\*.csproj'\r\n  version: '{version}'\r\n  version_prefix: '{version}'\r\n  package_version: '{version}'\r\n  assembly_version: '{version}'\r\n  file_version: '{version}'\r\n  informational_version: '{version}'\r\ninstall:\r\n- ps: choco install gitversion.portable -y\r\nbefore_build:\r\n- ps: >-\r\n    # Display .NET Core version\r\n\r\n    dotnet --version\r\n\r\n    # Display minimal restore text\r\n\r\n    dotnet restore ./src/NEventStore.Core.sln --verbosity m\r\n\r\n    gitversion /l console /output buildserver /updateAssemblyInfo\r\nbuild:\r\n  project: src/NEventStore.Core.sln\r\n  verbosity: minimal\r\nafter_build:\r\n- cmd: >-\r\n    dotnet pack ./src/NEventStore/NEventStore.Core.csproj -c %CONFIGURATION% --no-build -o artifacts /p:PackageVersion=%GitVersion_SemVer%\r\n\r\n    dotnet pack ./src/NEventStore.PollingClient/NEventStore.PollingClient.csproj -c %CONFIGURATION% --no-build -o artifacts /p:PackageVersion=%GitVersion_SemVer%\r\n\r\n    dotnet pack ./src/NEventStore.Serialization.Json/NEventStore.Serialization.Json.Core.csproj -c %CONFIGURATION% --no-build -o artifacts /p:PackageVersion=%GitVersion_SemVer%\r\n\r\n    dotnet pack ./src/NEventStore.Serialization.Bson/NEventStore.Serialization.Bson.Core.csproj -c %CONFIGURATION% --no-build -o artifacts /p:PackageVersion=%GitVersion_SemVer%\r\n\r\n    dotnet pack ./src/NEventStore.Serialization.MsgPack/NEventStore.Serialization.MsgPack.Core.csproj -c %CONFIGURATION% --no-build -o artifacts /p:PackageVersion=%GitVersion_SemVer%\r\ntest:\r\n  assemblies:\r\n    except:\r\n    - NEventStore.Persistence.AcceptanceTests.dll\r\n    - NEventStore.dll\r\n    - NEventStore.Serialization.Json.dll\r\n    - NEventStore.Serialization.Bson.dll\r\n    - NEventStore.Serialization.MsgPack.dll\r\nartifacts:\r\n- path: '**\\artifacts\\**\\*.*'\r\ndeploy: off"
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 1.7001953125,
          "content": "$configurationdefault = \"Release\"\r\n$artifacts = \"../../artifacts\"\r\n\r\n$configuration = Read-Host 'Configuration to build [default: Release] ?'\r\nif ($configuration -eq '') {\r\n    $configuration = $configurationdefault\r\n}\r\n$runtests = Read-Host 'Run Tests (y / n) [default:n] ?'\r\n\r\n# Install gitversion tool\r\ndotnet tool restore\r\n\r\n# Display minimal restore information\r\ndotnet restore ./src/NEventStore.Core.sln --verbosity m\r\n\r\n# GitVersion \r\n$str = dotnet tool run dotnet-gitversion /updateAssemblyInfo | out-string\r\n$json = convertFrom-json $str\r\n$nugetversion = $json.SemVer\r\n\r\n# Build\r\nWrite-Host \"Building: \"$nugetversion\r\ndotnet build ./src/NEventStore.Core.sln -c $configuration --no-restore\r\n\r\n# Testing\r\nif ($runtests -eq \"y\") {\r\n    Write-Host \"Executing Tests\"\r\n    dotnet test ./src/NEventStore.Core.sln -c $configuration --no-build\r\n    Write-Host \"Tests Execution Complated\"\r\n}\r\n\r\n# NuGet packages\r\nWrite-Host \"NuGet Packages creation\"\r\ndotnet pack ./src/NEventStore/NEventStore.Core.csproj -c $configuration --no-build -o $artifacts /p:PackageVersion=$nugetversion\r\ndotnet pack ./src/NEventStore.PollingClient/NEventStore.PollingClient.csproj -c $configuration --no-build -o $artifacts /p:PackageVersion=$nugetversion\r\ndotnet pack ./src/NEventStore.Serialization.Json/NEventStore.Serialization.Json.Core.csproj -c $configuration --no-build -o $artifacts /p:PackageVersion=$nugetversion\r\ndotnet pack ./src/NEventStore.Serialization.Bson/NEventStore.Serialization.Bson.Core.csproj -c $configuration --no-build -o $artifacts /p:PackageVersion=$nugetversion\r\ndotnet pack ./src/NEventStore.Serialization.MsgPack/NEventStore.Serialization.MsgPack.Core.csproj -c $configuration --no-build -o $artifacts /p:PackageVersion=$nugetversion"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "icon.png",
          "type": "blob",
          "size": 5.734375,
          "content": null
        },
        {
          "name": "license.txt",
          "type": "blob",
          "size": 1.0986328125,
          "content": "The MIT License\n\nCopyright (c) 2013 Jonathan Oliver, Jonathan Matheus, Damian Hickey and contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}