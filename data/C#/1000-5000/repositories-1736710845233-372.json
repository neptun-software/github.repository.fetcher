{
  "metadata": {
    "timestamp": 1736710845233,
    "page": 372,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vkhorikov/CSharpFunctionalExtensions",
      "stars": 2490,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.09375,
          "content": "**/.git/\n**/.vs/\n**/bin/\n**/obj/\n**/*ncrunch*\n**/out/\n**/TestResults/\n\nDockerfile*\nnCrunchTemp*\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 8.951171875,
          "content": "# Remove the line below if you want to inherit .editorconfig settings from higher directories\nroot = true\n\n# C# files\n[*.cs]\n\n#### Core EditorConfig Options ####\n\n# Indentation and spacing\nindent_size = 4\nindent_style = space\ntab_width = 4\n\n# New line preferences\nend_of_line = crlf\ninsert_final_newline = true\n\n#### .NET Coding Conventions ####\n\n# Organize usings\ndotnet_separate_import_directive_groups = false\ndotnet_sort_system_directives_first = true\nfile_header_template = unset\n\n# this. and Me. preferences\ndotnet_style_qualification_for_event = false:error\ndotnet_style_qualification_for_field = false:error\ndotnet_style_qualification_for_method = false:error\ndotnet_style_qualification_for_property = false:error\n\n# Language keywords vs BCL types preferences\ndotnet_style_predefined_type_for_locals_parameters_members = true:silent\ndotnet_style_predefined_type_for_member_access = true:silent\n\n# Parentheses preferences\ndotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent\ndotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent\ndotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent\ndotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent\n\n# Modifier preferences\ndotnet_style_require_accessibility_modifiers = for_non_interface_members:silent\n\n# Expression-level preferences\ndotnet_style_coalesce_expression = true:suggestion\ndotnet_style_collection_initializer = true:suggestion\ndotnet_style_explicit_tuple_names = true:suggestion\ndotnet_style_null_propagation = true:suggestion\ndotnet_style_object_initializer = true:suggestion\ndotnet_style_operator_placement_when_wrapping = beginning_of_line\ndotnet_style_prefer_auto_properties = true:silent\ndotnet_style_prefer_compound_assignment = true:suggestion\ndotnet_style_prefer_conditional_expression_over_assignment = true:silent\ndotnet_style_prefer_conditional_expression_over_return = true:silent\ndotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion\ndotnet_style_prefer_inferred_tuple_names = true:suggestion\ndotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion\ndotnet_style_prefer_simplified_boolean_expressions = true:suggestion\ndotnet_style_prefer_simplified_interpolation = true:suggestion\n\n# Field preferences\ndotnet_style_readonly_field = true:suggestion\n\n# Parameter preferences\ndotnet_code_quality_unused_parameters = all:suggestion\n\n# Suppression preferences\ndotnet_remove_unnecessary_suppression_exclusions = none\n\n#### C# Coding Conventions ####\n\n# var preferences\ncsharp_style_var_elsewhere = false:silent\ncsharp_style_var_for_built_in_types = false:silent\ncsharp_style_var_when_type_is_apparent = false:silent\n\n# Expression-bodied members\ncsharp_style_expression_bodied_accessors = true:silent\ncsharp_style_expression_bodied_constructors = false:silent\ncsharp_style_expression_bodied_indexers = true:silent\ncsharp_style_expression_bodied_lambdas = true:silent\ncsharp_style_expression_bodied_local_functions = false:silent\ncsharp_style_expression_bodied_methods = false:silent\ncsharp_style_expression_bodied_operators = false:silent\ncsharp_style_expression_bodied_properties = true:silent\n\n# Pattern matching preferences\ncsharp_style_pattern_matching_over_as_with_null_check = true:suggestion\ncsharp_style_pattern_matching_over_is_with_cast_check = true:suggestion\ncsharp_style_prefer_not_pattern = true:suggestion\ncsharp_style_prefer_pattern_matching = true:silent\ncsharp_style_prefer_switch_expression = true:suggestion\n\n# Null-checking preferences\ncsharp_style_conditional_delegate_call = true:suggestion\n\n# Modifier preferences\ncsharp_prefer_static_local_function = true:suggestion\ncsharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:silent\n\n# Code-block preferences\ncsharp_prefer_braces = when_multiline:error\ncsharp_prefer_simple_using_statement = true:error\n\n# Expression-level preferences\ncsharp_prefer_simple_default_expression = true:suggestion\ncsharp_style_deconstructed_variable_declaration = true:suggestion\ncsharp_style_inlined_variable_declaration = true:suggestion\ncsharp_style_pattern_local_over_anonymous_function = true:suggestion\ncsharp_style_prefer_index_operator = true:suggestion\ncsharp_style_prefer_range_operator = true:suggestion\ncsharp_style_throw_expression = true:suggestion\ncsharp_style_unused_value_assignment_preference = discard_variable:suggestion\ncsharp_style_unused_value_expression_statement_preference = discard_variable:silent\n\n#### C# Formatting Rules ####\n\n# New line preferences\ncsharp_new_line_before_catch = true\ncsharp_new_line_before_else = true\ncsharp_new_line_before_finally = true\ncsharp_new_line_before_members_in_anonymous_types = true\ncsharp_new_line_before_members_in_object_initializers = true\ncsharp_new_line_before_open_brace = all\ncsharp_new_line_between_query_expression_clauses = true\n\n# Indentation preferences\ncsharp_indent_block_contents = true\ncsharp_indent_braces = false\ncsharp_indent_case_contents = true\ncsharp_indent_case_contents_when_block = true\ncsharp_indent_labels = one_less_than_current\ncsharp_indent_switch_labels = true\n\n# Space preferences\ncsharp_space_after_cast = false\ncsharp_space_after_colon_in_inheritance_clause = true\ncsharp_space_after_comma = true\ncsharp_space_after_dot = false\ncsharp_space_after_keywords_in_control_flow_statements = true\ncsharp_space_after_semicolon_in_for_statement = true\ncsharp_space_around_binary_operators = before_and_after\ncsharp_space_around_declaration_statements = false\ncsharp_space_before_colon_in_inheritance_clause = true\ncsharp_space_before_comma = false\ncsharp_space_before_dot = false\ncsharp_space_before_open_square_brackets = false\ncsharp_space_before_semicolon_in_for_statement = false\ncsharp_space_between_empty_square_brackets = false\ncsharp_space_between_method_call_empty_parameter_list_parentheses = false\ncsharp_space_between_method_call_name_and_opening_parenthesis = false\ncsharp_space_between_method_call_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_empty_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_name_and_open_parenthesis = false\ncsharp_space_between_method_declaration_parameter_list_parentheses = false\ncsharp_space_between_parentheses = false\ncsharp_space_between_square_brackets = false\n\n# Wrapping preferences\ncsharp_preserve_single_line_blocks = true\ncsharp_preserve_single_line_statements = true\n\n#### Naming styles ####\n\n# Naming rules\n\ndotnet_naming_rule.interface_should_be_begins_with_i.severity = suggestion\ndotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface\ndotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i\n\ndotnet_naming_rule.types_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.types_should_be_pascal_case.symbols = types\ndotnet_naming_rule.types_should_be_pascal_case.style = pascal_case\n\ndotnet_naming_rule.non_field_members_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members\ndotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case\n\n# Symbol specifications\n\ndotnet_naming_symbols.interface.applicable_kinds = interface\ndotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected\ndotnet_naming_symbols.interface.required_modifiers =\n\ndotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum\ndotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected\ndotnet_naming_symbols.types.required_modifiers =\n\ndotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method\ndotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected\ndotnet_naming_symbols.non_field_members.required_modifiers =\n\n# Naming styles\n\ndotnet_naming_style.pascal_case.required_prefix =\ndotnet_naming_style.pascal_case.required_suffix =\ndotnet_naming_style.pascal_case.word_separator =\ndotnet_naming_style.pascal_case.capitalization = pascal_case\n\ndotnet_naming_style.begins_with_i.required_prefix = I\ndotnet_naming_style.begins_with_i.required_suffix =\ndotnet_naming_style.begins_with_i.word_separator =\ndotnet_naming_style.begins_with_i.capitalization = pascal_case\ncsharp_using_directive_placement = outside_namespace:silent\ncsharp_style_namespace_declarations = file_scoped:silent\n\n[*.{cs,vb}]\ndotnet_style_operator_placement_when_wrapping = beginning_of_line\ntab_width = 4\nindent_size = 4\nend_of_line = crlf\ndotnet_style_coalesce_expression = true:suggestion\ndotnet_style_null_propagation = true:suggestion\ndotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion\ndotnet_style_prefer_auto_properties = true:silent\ndotnet_style_object_initializer = true:suggestion\ndotnet_style_collection_initializer = true:suggestion\ndotnet_style_prefer_simplified_boolean_expressions = true:suggestion"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3681640625,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# Custom for Visual Studio\n*.cs     diff=csharp\n\n# Standard to msysgit\n*.doc\t diff=astextplain\n*.DOC\t diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot  diff=astextplain\n*.DOT  diff=astextplain\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.265625,
          "content": "out\n.svn\nobj\nbin\n.idea\n_ReSharper*\n*.sln.GhostDoc.xml\n*.dotCover\n*.suo\n*.user\n*.Cache\n*.cache\n*.ncrunchsolution\n*.ncrunchproject\n/packages/*/*\n/Tools/*/*\nproject.lock.json\nproject.fragment.lock.json\n.vs\n/CSharpFunctionalExtensions/CSharpFunctionalExtensions.xml\n*ncrunch*\n"
        },
        {
          "name": ".markdownlint.json",
          "type": "blob",
          "size": 0.224609375,
          "content": "{\n    \"line-length\": {\n        \"line_length\": 140\n    },\n    \"code-block-style\": {\n        \"style\": \"fenced\"\n    },\n    \"code\": true,\n    \"code-fence-style\": true,\n    \"no-duplicate-header\": {\n        \"siblings_only\": true\n    }\n}"
        },
        {
          "name": "CSharpFunctionalExtensions.Examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "CSharpFunctionalExtensions.StrongName",
          "type": "tree",
          "content": null
        },
        {
          "name": "CSharpFunctionalExtensions.Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "CSharpFunctionalExtensions.sln",
          "type": "blob",
          "size": 3.1630859375,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 16\nVisualStudioVersion = 16.0.30709.64\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"CSharpFunctionalExtensions\", \"CSharpFunctionalExtensions\\CSharpFunctionalExtensions.csproj\", \"{9598EC2B-2119-4FC4-9AC0-9AD5E41CA6A0}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"CSharpFunctionalExtensions.Examples\", \"CSharpFunctionalExtensions.Examples\\CSharpFunctionalExtensions.Examples.csproj\", \"{C05C3261-447D-40F6-B516-791A01BA5052}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"CSharpFunctionalExtensions.Tests\", \"CSharpFunctionalExtensions.Tests\\CSharpFunctionalExtensions.Tests.csproj\", \"{AAC59D01-6546-4366-B990-4A765EF4D796}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{B5F7A734-F78E-405C-A173-5A8907AAC3E0}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.dockerignore = .dockerignore\n\t\t.gitignore = .gitignore\n\t\tazure-pipelines.yml = azure-pipelines.yml\n\t\tDockerfile = Dockerfile\n\t\tREADME.md = README.md\n\t\tversion.txt = version.txt\n\t\tCommon.Build.props = Common.Build.props\n\tEndProjectSection\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"CSharpFunctionalExtensions.StrongName\", \"CSharpFunctionalExtensions.StrongName\\CSharpFunctionalExtensions.StrongName.csproj\", \"{A86176EF-DCC2-44E5-8F0F-D5F58006DEBB}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{9598EC2B-2119-4FC4-9AC0-9AD5E41CA6A0}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{9598EC2B-2119-4FC4-9AC0-9AD5E41CA6A0}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{9598EC2B-2119-4FC4-9AC0-9AD5E41CA6A0}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{9598EC2B-2119-4FC4-9AC0-9AD5E41CA6A0}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{C05C3261-447D-40F6-B516-791A01BA5052}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{C05C3261-447D-40F6-B516-791A01BA5052}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{C05C3261-447D-40F6-B516-791A01BA5052}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{C05C3261-447D-40F6-B516-791A01BA5052}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{AAC59D01-6546-4366-B990-4A765EF4D796}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{AAC59D01-6546-4366-B990-4A765EF4D796}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{AAC59D01-6546-4366-B990-4A765EF4D796}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{AAC59D01-6546-4366-B990-4A765EF4D796}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{A86176EF-DCC2-44E5-8F0F-D5F58006DEBB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{A86176EF-DCC2-44E5-8F0F-D5F58006DEBB}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{A86176EF-DCC2-44E5-8F0F-D5F58006DEBB}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{A86176EF-DCC2-44E5-8F0F-D5F58006DEBB}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {24983D81-8FE6-4B71-A64C-6F86C7DFB0B8}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "CSharpFunctionalExtensions",
          "type": "tree",
          "content": null
        },
        {
          "name": "Common.Build.props",
          "type": "blob",
          "size": 1.1884765625,
          "content": "<Project>\n  <PropertyGroup>\n    <TargetFrameworks>netstandard2.0;net6.0;net8.0</TargetFrameworks>\n    <Authors>Vladimir Khorikov</Authors>\n    <Description>CSharpFunctionalExtensions - functional extensions for C#</Description>\n    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>\n    <PackageTags>C# Functional Result Maybe ValueObject</PackageTags>\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\n    <PackageProjectUrl>https://enterprisecraftsmanship.com/ps-func</PackageProjectUrl>\n    <RepositoryUrl>https://github.com/vkhorikov/CSharpFunctionalExtensions/</RepositoryUrl>\n    <NeutralLanguage>en-US</NeutralLanguage>\n    <GeneratePackageOnBuild>false</GeneratePackageOnBuild>\n    <LangVersion>9.0</LangVersion>\n    <GeneratePackageOnBuild>false</GeneratePackageOnBuild>\n    <PublishRepositoryUrl>true</PublishRepositoryUrl>\n    <EmbedUntrackedSources>true</EmbedUntrackedSources>\n    <GenerateDocumentationFile>true</GenerateDocumentationFile>\n    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>\n    <NoWarn>1591;1701;1702</NoWarn>\n  </PropertyGroup>\n</Project>"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.822265625,
          "content": "FROM mcr.microsoft.com/dotnet/sdk:8.0 as build\n\nARG Version\nWORKDIR /app\n\nCOPY ./Common.Build.props ./\nCOPY ./CSharpFunctionalExtensions/CSharpFunctionalExtensions.csproj ./CSharpFunctionalExtensions/\nCOPY ./CSharpFunctionalExtensions.StrongName/CSharpFunctionalExtensions.StrongName.csproj ./CSharpFunctionalExtensions.StrongName/\nCOPY ./CSharpFunctionalExtensions.Tests/CSharpFunctionalExtensions.Tests.csproj ./CSharpFunctionalExtensions.Tests/\nRUN dotnet restore ./CSharpFunctionalExtensions/CSharpFunctionalExtensions.csproj\nRUN dotnet restore ./CSharpFunctionalExtensions.StrongName/CSharpFunctionalExtensions.StrongName.csproj\nRUN dotnet restore ./CSharpFunctionalExtensions.Tests/CSharpFunctionalExtensions.Tests.csproj\n\nCOPY ./CSharpFunctionalExtensions ./CSharpFunctionalExtensions\nCOPY ./CSharpFunctionalExtensions.StrongName ./CSharpFunctionalExtensions.StrongName\nCOPY ./CSharpFunctionalExtensions.Tests ./CSharpFunctionalExtensions.Tests\nRUN dotnet build -c Release --no-restore \"./CSharpFunctionalExtensions/CSharpFunctionalExtensions.csproj\" /p:Version=$Version\nRUN dotnet build -c Release --no-restore \"./CSharpFunctionalExtensions.StrongName/CSharpFunctionalExtensions.StrongName.csproj\" /p:Version=$Version\nRUN dotnet build -c Release --no-restore \"./CSharpFunctionalExtensions.Tests/CSharpFunctionalExtensions.Tests.csproj\" /p:Version=$Version\n\nRUN dotnet test \"./CSharpFunctionalExtensions.Tests/CSharpFunctionalExtensions.Tests.csproj\" -c Release --no-build --no-restore --logger \"trx;LogFileName=testresults.trx\"; exit 0\n\nRUN dotnet pack \"./CSharpFunctionalExtensions/CSharpFunctionalExtensions.csproj\" -c Release --no-restore --no-build -o /app/out /p:Version=$Version\nRUN dotnet pack \"./CSharpFunctionalExtensions.StrongName/CSharpFunctionalExtensions.StrongName.csproj\" -c Release --no-restore --no-build -o /app/out-sn /p:Version=$Version\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0576171875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Vladimir Khorikov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 23.2900390625,
          "content": "﻿# Functional Extensions for C&#35;\n\n[![Build Status](https://dev.azure.com/EnterpriseCraftsmanship/CSharpFunctionalExtensions/_apis/build/status/CSharpFunctionalExtensions?branchName=master)](https://dev.azure.com/EnterpriseCraftsmanship/CSharpFunctionalExtensions/_build/latest?definitionId=1&branchName=master)\n[![NuGet downloads](https://img.shields.io/nuget/v/csharpfunctionalextensions.svg)](https://www.nuget.org/packages/CSharpFunctionalExtensions/)\n[![GitHub license](https://img.shields.io/github/license/mashape/apistatus.svg)](https://github.com/vkhorikov/CSharpFunctionalExtensions/blob/master/LICENSE)\n\nThis library helps write code in more functional way.\nTo get to know more about the principles behind it, check out the [Applying Functional Principles in C# Pluralsight course](https://enterprisecraftsmanship.com/ps-func).\n\n## Installation\n\nAvailable on [NuGet](https://www.nuget.org/packages/CSharpFunctionalExtensions/)\n\n```bash\ndotnet add package CSharpFunctionalExtensions\n```\n\nor\n\n```powershell\nPM> Install-Package CSharpFunctionalExtensions\n```\n\nAlso available as a strong named assembly (big thanks to [bothzoli](https://github.com/bothzoli) who made it possible!).\n\nOn [NuGet](https://www.nuget.org/packages/CSharpFunctionalExtensions.StrongName/)\n\n\n```bash\ndotnet add package CSharpFunctionalExtensions.StrongName\n```\n\n## Core Concepts\n\n### Get rid of primitive obsession\n\n```csharp\nResult<CustomerName> name = CustomerName.Create(model.Name);\nResult<Email> email = Email.Create(model.PrimaryEmail);\n\nResult result = Result.Combine(name, email);\nif (result.IsFailure)\n    return Error(result.Error);\n\nvar customer = new Customer(name.Value, email.Value);\n```\n\n## Make nulls explicit with the Maybe type\n\n```csharp\nMaybe<Customer> customerOrNothing = _customerRepository.GetById(id);\nif (customerOrNothing.HasNoValue)\n    return Error(\"Customer with such Id is not found: \" + id);\n```\n\n## Compose multiple operations in a single chain\n\n```csharp\nreturn _customerRepository.GetById(id)\n    .ToResult(\"Customer with such Id is not found: \" + id)\n    .Ensure(customer => customer.CanBePromoted(), \"The customer has the highest status possible\")\n    .Tap(customer => customer.Promote())\n    .Tap(customer => _emailGateway.SendPromotionNotification(customer.PrimaryEmail, customer.Status))\n    .Finally(result => result.IsSuccess ? Ok() : Error(result.Error));\n```\n\n## Wrap multiple operations in a TransactionScope\n\n```csharp\nreturn _customerRepository.GetById(id)\n    .ToResult(\"Customer with such Id is not found: \" + id)\n    .Ensure(customer => customer.CanBePromoted(), \"The customer has the highest status possible\")\n    .WithTransactionScope(customer => Result.Success(customer)\n        .Tap(customer => customer.Promote())\n        .Tap(customer => customer.ClearAppointments()))\n    .Tap(customer => _emailGateway.SendPromotionNotification(customer.PrimaryEmail, customer.Status))\n    .Finally(result => result.IsSuccess ? Ok() : Error(result.Error));\n```\n\n## API Examples\n\n### Maybe\n\n#### Explicit Construction\n\nUse case: Creating a new Maybe containing a value\n\n```csharp\nMaybe<string> apple = Maybe<string>.From(\"apple\");\n\n// or\n\nMaybe<string> apple = Maybe.From(\"apple\"); // type inference\n\n// or\n\nvar apple = Maybe.From(\"apple\");\n```\n\n#### None/No Value\n\nUse case: Replacing `null` or the\n[Null Object Pattern](https://enterprisecraftsmanship.com/2015/03/13/functional-c-non-nullable-reference-types/) for representing 'missing' data.\n\n```csharp\nint storeInventory = ...\n\nMaybe<string> fruit = storeInventory > 0\n    ? Maybe<string>.From(\"apple\")\n    : Maybe<string>.None;\n\n// or where the generic type is a reference type\n\nMaybe<string> fruit = null;\n\n// or where the generic type is a value type\n\nMaybe<int> fruit = default;\n```\n\n#### Implicit Conversion\n\nUse case: Easily creating a Maybe from a value\n\n```csharp\n// Constructing a Maybe\nMaybe<string> apple = \"apple\"; // implicit conversion\n\n// Or as a method return value\nMaybe<string> GetFruit(string fruit)\n{\n    if (string.IsNullOrWhiteSpace(fruit))\n    {\n        return Maybe<string>.None;\n    }\n\n    return fruit; // implicit conversion\n}\n```\n\n#### Equality\n\nUse case: Comparing Maybes or values without knowledge of the\ninner value of the Maybes\n\n```csharp\nMaybe<string> apple = \"apple\";\nMaybe<string> orange = \"orange\";\nstring alsoOrange = \"orange\";\nMaybe<string> noFruit = Maybe<string>.None;\n\nConsole.WriteLine(apple == orange); // false\nConsole.WriteLine(apple != orange); // true\nConsole.WriteLine(orange == alsoOrange); // true\nConsole.WriteLine(alsoOrange == noFruit); // false\n```\n\n#### ToString\n\n```csharp\nMaybe<string> apple = \"apple\";\nMaybe<string> noFruit = Maybe<string>.None;\n\nConsole.WriteLine(apple.ToString()); // \"apple\"\nConsole.WriteLine(noFruit.ToString()); // \"No value\"\n```\n\n#### GetValueOrThrow\n\nUse case: Procedurally accessing the inner value of the Maybe\n\n**Note**: Calling this will throw a `InvalidOperationException` if there is no value\n\n```csharp\nMaybe<string> apple = \"apple\";\nMaybe<string> noFruit = Maybe<string>.None;\n\nConsole.WriteLine(apple.GetValueOrThrow()); // \"apple\";\nConsole.WriteLine(noFruit.GetValueOrThrow()); // throws InvalidOperationException !!\nConsole.WriteLine(noFruit.GetValueOrThrow(new CustomException())); // throws CustomException !!\n```\n\n#### HasValue and HasNoValue\n\nUse case: Procedurally checking if the Maybe has a value,\nusually before accessing the value directly\n\n```csharp\nvoid Response(string fruit)\n{\n    Console.WriteLine($\"Yum, a {fruit} 😀\");\n}\n\nMaybe<string> apple = \"apple\";\nMaybe<string> noFruit = Maybe<string>.None;\n\nif (apple.HasValue)\n{\n    Response(apple.Value); // safe to access since we checked above\n}\n\nif (noFruit.HasNoValue)\n{\n    Response(\"We're all out of fruit 😢\");\n}\n```\n\n#### GetValueOrDefault\n\nUse case: Safely accessing the inner value, without checking if there is one, by providing a fallback\nif no value exists\n\n```csharp\nvoid Response(string fruit)\n{\n    Console.WriteLine($\"It's a {fruit}\");\n}\n\nMaybe<string> apple = \"apple\";\nMaybe<string> unknownFruit = Maybe<string>.None;\n\nstring appleValue = apple.GetValueOrDefault(\"banana\");\nstring unknownFruitValue = unknownFruit.GetValueOrDefault(\"banana\");\n\nResponse(appleValue); // It's a apple\nResponse(unknownFruitValue); // It's a banana\n```\n\n#### Where\n\nUse case: Converting a Maybe with a value to a `Maybe.None` if a condition isn't met\n\n**Note**: The predicate passed to `Where` (ex )\n\n```csharp\nbool IsMyFavorite(string fruit)\n{\n    return fruit == \"papaya\";\n}\n\nMaybe<string> apple = \"apple\";\n\nMaybe<string> favoriteFruit = apple.Where(IsMyFavorite);\n\nConsole.WriteLine(favoriteFruit.ToString()); // \"No value\"\n```\n\n#### Map\n\nUse case: Transforming the value in the Maybe, if there is one, without\nneeding to check if the value is there\n\n**Note**: the delegate (ex `CreateMessage`) passed to `Maybe.Map()` is only executed if the Maybe has an inner value\n\n```csharp\nstring CreateMessage(string fruit)\n{\n    return $\"The fruit is a {fruit}\";\n}\n\nMaybe<string> apple = \"apple\";\nMaybe<string> noFruit = Maybe<string>.None;\n\nConsole.WriteLine(apple.Map(CreateMessage).Unwrap(\"No fruit\")); // \"The fruit is a apple\"\nConsole.WriteLine(noFruit.Map(CreateMessage).Unwrap(\"No fruit\")); // \"No fruit\"\n```\n\n#### Select\n\n**Alias**: `Maybe.Select()` is an alias of `Maybe.Map()`\n\n#### Bind\n\nUse case: Transforming from one Maybe into another Maybe\n(like `Maybe.Map` but it transforms the Maybe instead of the inner value)\n\n**Note**: the delegate (ex `MakeAppleSauce`) passed to `Maybe.Bind()` is only executed if the Maybe has an inner value\n\n```csharp\nMaybe<string> MakeAppleSauce(Maybe<string> fruit)\n{\n    if (fruit == \"apple\") // we can only make applesauce from apples 🍎\n    {\n        return \"applesauce\";\n    }\n\n    return Maybe<string>.None;\n}\n\nMaybe<string> apple = \"apple\";\nMaybe<string> banana = \"banana\";\nMaybe<string> noFruit = Maybe<string>.None;\n\nConsole.WriteLine(apple.Bind(MakeAppleSauce).ToString()); // \"applesauce\"\nConsole.WriteLine(banana.Bind(MakeAppleSauce).ToString()); // \"No value\"\nConsole.WriteLine(noFruit.Bind(MakeAppleSauce).ToString()); // \"No value\"\n```\n\n#### SelectMany\n\n**Alias**: `Maybe.SelectMany()` is an alias of `Maybe.Bind()`\n\n#### Choose\n\nUse case: Filter a collection of Maybes to only the ones that have a value,\nand then return the value for each, or map that value to a new one\n\n**Note**: the delegate passed to `Maybe.Choose()` is only executed on the Maybes of the collection with an inner value\n\n```csharp\nIEnumerable<Maybe<string>> unknownFruits = new[] { \"apple\", Maybe<string>.None, \"banana\" };\n\nIEnumerable<string> knownFruits = unknownFruits.Choose();\nIEnumerable<string> fruitResponses = unknownFruits.Choose(fruit => $\"Delicious {fruit}\");\n\nConsole.WriteLine(string.Join(\", \", knownFruits)) // \"apple, banana\"\nConsole.WriteLine(string.Join(\", \", fruitResponses)) // \"Delicious apple, Delicious banana\"\n```\n\n#### Execute\n\nUse case: Safely executing a `void` (or `Task`) returning operation on the Maybe inner value\nwithout checking if there is one\n\n**Note**: the `Action` (ex `PrintFruit`) passed to `Maybe.Execute()` is only executed if the Maybe has an inner value\n\n```csharp\nvoid PrintFruit(string fruit)\n{\n    Console.WriteLine($\"This is a {fruit}\");\n}\n\nMaybe<string> apple = \"apple\";\nMaybe<string> noFruit = Maybe<string>.None;\n\napple.Execute(PrintFruit); // \"This is a apple\"\nnoFruit.Execute(PrintFruit); // no output to the console\n```\n\n#### ExecuteNoValue\n\nUse case: Executing a `void` (or `Task`) returning operation when the Maybe has no value\n\n```csharp\nvoid LogNoFruit(string fruit)\n{\n    Console.WriteLine($\"There are no {fruit}\");\n}\n\nMaybe<string> apple = \"apple\";\nMaybe<string> banana = Maybe<string>.None;\n\napple.ExecuteNoValue(() => LogNoFruit(\"apple\")); // no output to console\nbanana.ExecuteNoValue(() => LogNoFruit(\"banana\")); // \"There are no banana\"\n```\n\n#### Or\n\nUse case: Supplying a fallback value Maybe or value in the case that the Maybe has no inner value\n\n**Note**: The fallback `Func<T>` (ex `() => \"banana\"`) will only be executed\nif the Maybe has no inner value\n\n```csharp\nMaybe<string> apple = \"apple\";\nMaybe<string> banana = \"banana\";\nMaybe<string> noFruit = Maybe<string>.None;\n\nConsole.WriteLine(apple.Or(banana).ToString()); // \"apple\"\nConsole.WriteLine(noFruit.Or(() => banana)).ToString()); // \"banana\"\nConsole.WriteLine(noFruit.Or(\"banana\").ToString()); // \"banana\"\nConsole.WriteLine(noFruit.Or(() => \"banana\").ToString()); // \"banana\"\n```\n\n#### Match\n\nUse case: Defining two operations to perform on a Maybe.\nOne to be executed if there is an inner value, and the other to executed if there is not\n\n```csharp\nMaybe<string> apple = \"apple\";\nMaybe<string> noFruit = Maybe<string>.None;\n\n// Void returning Match\napple.Match(\n    fruit => Console.WriteLine($\"It's a {fruit}\"),\n    () => Console.WriteLine(\"There's no fruit\"));\n\n// Mapping Match\nstring fruitMessage = noFruit.Match(\n    fruit => $\"It's a {fruit}\",\n    () => \"There's no fruit\"));\n\nConsole.WriteLine(fruitMessage); // \"There's no fruit\"\n```\n\n#### TryFirst and TryLast\n\nUse case: Replacing `.FirstOrDefault()` and `.LastOrDefault()` so that you can return a\nMaybe instead of a `null` or value type default value (like `0`, `false`) when working with collections\n\n```csharp\nIEnumerable<string> fruits = new[] { \"apple\", \"coconut\", \"banana\" };\n\nMaybe<string> firstFruit = fruits.TryFirst();\nMaybe<string> probablyABanana = fruits.TryFirst(fruit => fruit.StartsWith(\"ba\"));\nMaybe<string> aPeachOrAPear = fruits.TryFirst(fruit => fruit.StartsWith(\"p\"));\n\nConsole.WriteLine(firstFruit.ToString()); // \"apple\"\nConsole.WriteLine(probablyABanana.ToString()); // \"banana\"\nConsole.WriteLine(aPeachOrAPear.ToString()); // \"No value\"\n\nMaybe<string> lastFruit = fruits.TryLast();\nMaybe<string> anAppleOrApricot = fruits.TryLast(fruit => fruit.StartsWith(\"a\"));\n\nConsole.WriteLine(lastFruit.ToString()); // \"banana\"\nConsole.WriteLine(anAppleOrApricot.ToString()); // \"apple\"\n```\n\n#### TryFind\n\nUse case: Safely getting a value out of a Dictionary\n\n```csharp\nDictionary<string, int> fruitInventory = new()\n{\n    { \"apple\", 10 },\n    { \"banana\", 2 }\n};\n\nMaybe<int> appleCount = fruitInventory.TryFind(\"apple\");\nMaybe<int> kiwiCount = fruitInventory.TryFind(\"kiwi\");\n\nConsole.WriteLine(appleCount.ToString()); // \"10\"\nConsole.WriteLine(kiwiCount.ToString()); // \"No value\"\n```\n\n#### ToResult\n\nUse case: Representing the lack of an inner value in a Maybe as a failed operation\n\n**Note**: See `Result` section below\n\n```csharp\nMaybe<string> fruit = \"banana\";\nMaybe<string> noFruit = Maybe<string>.None;\n\nstring errorMessage = \"There was no fruit to give\";\n\nResult<string> weGotAFruit = fruit.ToResult(errorMessage);\nResult<string> failedToGetAFruit = noFruit.ToResult(errorMessage);\n\nConsole.WriteLine(weGotAFruit.Value); // \"banana\"\nConsole.WriteLine(failedToGetAFruit.Error); // \"There was no fruit to give\"\n```\n\n#### ToUnitResult\n\nUse case: Representing the lack of an inner value in a Maybe as a failed operation, if an Error is provided\n\nUse case: Representing the presence of an inner value in a Maybe as a failed operation\n\n**Note**: See `UnitResult` section below\n\n```csharp\nMaybe<Error> error = new Error();\nMaybe<string> noFruit = Maybe<string>.None;\n\nUnitResult<Error> weGotAnError = error.ToUnitResult();\nUnitResult<Error> failedToGetAFruit = noFruit.ToUnitResult(new Error());\n\nConsole.WriteLine(weGotAnError.IsFailure); // true\nConsole.WriteLine(failedToGetAFruit.IsFailure); // true\n```\n\n### Result\n\n#### Explicit Construction: Success and Failure\n\nUse case: Creating a new Result in a Success or Failure state\n\n```csharp\nrecord FruitInventory(string Name, int Count);\n\nResult<FruitInventory> appleInventory = Result.Success(new FruitInventory(\"apple\", 4));\nResult<FruitInventory> failedOperation = Result.Failure<FruitInventory>(\"Could not find inventory\");\nResult successInventoryUpdate = Result.Success();\n```\n\nTo create a success result of a value you can also use the `Of` method which has overloads for `Func<T>` and `Task<T>`.\n\n```csharp\nResult<Something> something = Result.Of(_service.CreateSomething());\nResult<Something> something = await Result.Of(_service.CreateSomethingAsync());\nResult<Something> something = Result.Of(() => _service.CreateSomething());\nResult<Something> something = await Result.Of(() => _service.CreateSomethingAsync());\n```\n\n#### Conditional Construction: SuccessIf and FailureIf\n\nUse case: Creating successful or failed Results based on expressions or delegates instead of if/else statements or ternary expressions\n\n```csharp\nbool onTropicalIsland = true;\n\nResult foundCoconut = Result.SuccessIf(onTropicalIsland, \"These trees seem bare 🥥\");\nResult foundGrapes = Result.FailureIf(() => onTropicalIsland, \"No grapes 🍇 here\");\n\n// or\n\nbool isNewShipmentDay = true;\n\nResult<FruitInventory> appleInventory = Result.SuccessIf(isNewShipmentDay, new FruitInventory(\"apple\", 4), \"No 🍎 today\");\nResult<FruitInventory> bananaInventory = Result.SuccessIf(() => isNewShipmentDay, new FruitInventory(\"banana\", 2), \"All out of 🍌\");\n\n// or\n\nbool afterBreakfast = true;\n\nResult<FruitInventory> orangeInventory = Result.FailureIf(afterBreakfast, new FruitInventory(\"orange\", 10), \"No 🍊 today\");\nResult<FruitInventory> grapefruitInventory = Result.FailureIf(() => afterBreakfast, new FruitInventory(\"grapefruit\", 5), \"No grapefruit 😢\");\n```\n\n#### Implicit Conversion\n\nUse case: Easily creating a successful result from a value\n\n```csharp\nResult<FruitInventory> appleInventory = new FruitInventory(\"apple\", 4);\nResult failedInventoryUpdate = \"Could not update inventory\";\n```\n\n#### ToString\n\nUse case: Printing out the state of a Result and its inner value or error\n\n```csharp\nResult<FruitInventory> appleInventory = new FruitInventory(\"apple\", 4);\nResult<FruitInventory> bananaInventory = Result.Failure<FruitInventory>(\"Could not find any bananas\");\nResult failedInventoryUpdate = \"Could not update inventory\";\nResult successfulInventoryUpdate = Result.Success();\n\nConsole.WriteLine(appleInventory.ToString()); // \"Success(FruitInventory { Name = apple, Count = 4 })\"\nConsole.WriteLine(bananaInventory.ToString()); // \"Failure(Could not find any bananas)\"\nConsole.WriteLine(failedInventoryUpdate.ToString()); // \"Failure(Could not update inventory)\"\nConsole.WriteLine(successfulInventoryUpdate.ToString()); // \"Success\"\n```\n\n#### Map\n\nUse case: Transforming the inner value of a successful Result, without needing to check on\nthe success/failure state of the Result\n\n**Note**: the delegate (ex `CreateMessage`) passed to `Result.Map()` is only executed if the Result was successful\n\n```csharp\nstring CreateMessage(FruitInventory inventory)\n{\n    return $\"There are {inventory.Count} {inventory.Name}(s)\";\n}\n\nResult<FruitInventory> appleInventory = new FruitInventory(\"apple\", 4);\nResult<FruitInventory> bananaInventory = Result.Failure<FruitInventory>(\"Could not find any bananas\");\n\nConsole.WriteLine(appleInventory.Map(CreateMessage).ToString()); // \"Success(There are 4 apple(s))\"\nConsole.WriteLine(bananaInventory.Map(CreateMessage).ToString()); // \"Failure(Could not find any bananas)\"\n```\n\n#### MapError\n\nUse case: Transforming the inner error of a failed Result, without needing to check on\nthe success/failure state of the Result\n\n**Note**: the delegate (ex `ErrorEnhancer`) passed to `Result.MapError()` is only executed if the Result failed\n\n```csharp\nstring ErrorEnhancer(string errorMessage)\n{\n    return $\"Failed operation: {errorMessage}\";\n}\n\nConsole.WriteLine(appleInventory.MapError(ErrorEnhancer).ToString()); // \"Success(FruitInventory { Name = apple, Count = 4 })\"\nConsole.WriteLine(bananaInventory.MapError(ErrorEnhancer).ToString()); // \"Failed operation: Could not find any bananas\"\n```\n\n## Testing\n\n### CSharpFunctionalExtensions.FluentAssertions\n\nA small set of extensions to make test assertions more fluent when using CSharpFunctionalExtensions! Check out the [repo for this library](https://github.com/NitroDevs/CSharpFunctionalExtensions.FluentAssertions) more information!\n\nIncludes custom assertions for\n- Maybe\n- Result\n- Result<T>\n- Result<T, E>\n- UnitResult\n\n#### Example\n\n```csharp\nvar result = Result.Success(420);\n\nresult.Should().Succeed(); // passes\nresult.Should().SucceedWith(420); // passes\nresult.Should().SucceedWith(69); // throws\nresult.Should().Fail(); // throws\n```\n\n## Analyzers\n\n### [CSharpFunctionalExtensions.Analyzers](https://github.com/AlmarAubel/CSharpFunctionalExtensions.Analyzers)\nA Roslyn analyzer package that provides warnings and recommendations to prevent misuse of `Result` objects in `CSharpFunctionalExtensions`. Ensures more robust implementation when working with Result types.\n\nAvailable on [NuGet](https://www.nuget.org/packages/CSharpFunctionalExtensions.Analyzers)\n```bash\ndotnet add package CSharpFunctionalExtensions.Analyzers\n```\n\n## Read or Watch more about these ideas\n\n- [Functional C#: Primitive obsession](https://enterprisecraftsmanship.com/2015/03/07/functional-c-primitive-obsession/)\n- [Functional C#: Non-nullable reference types](https://enterprisecraftsmanship.com/2015/03/13/functional-c-non-nullable-reference-types/)\n- [Functional C#: Handling failures, input errors](https://enterprisecraftsmanship.com/2015/03/20/functional-c-handling-failures-input-errors/)\n- [Applying Functional Principles in C# Pluralsight course](https://enterprisecraftsmanship.com/ps-func)\n\n## Related Projects\n\n- [Typescript Functional Extensions](https://github.com/seangwright/typescript-functional-extensions)\n- [UniTask extensions for Unity](https://github.com/Razenpok/CSharpFunctionalExtensions.UniTask)\n\n## Contributors\n\nA big thanks to the project contributors!\n\n- [Chris C](https://github.com/ToInvertedResult)\n- [Marcin Jahn](https://github.com/marcinjahn)\n- [Jannes Kaspar-Müller](https://github.com/JKamue)\n- [dbuckin1](https://github.com/dbuckin1)\n- [bothzoli](https://github.com/bothzoli)\n- [Pavel Zemlianikin](https://github.com/PNZeml)\n- [Simon Lang](https://github.com/redx177)\n- [Nils Vreman](https://github.com/NilsVreman)\n- [Scheichsbeutel](https://github.com/Scheichsbeutel)\n- [Alexey Malinin](https://github.com/TechnoBerry)\n- [Robert Larkins](https://github.com/robertlarkins)\n- [tinytownsoftware](https://github.com/tinytownsoftware)\n- [piotr121993](https://github.com/piotr121993)\n- [Dmitry Korotin](https://github.com/teheran)\n- [michalsznajder](https://github.com/michalsznajder)\n- [Xavier](https://github.com/xavierjohn)\n- [Julien Aspirot](https://github.com/julienasp)\n- [Kyle McMaster](https://github.com/KyleMcMaster)\n- [Vinícius Beloni Cubas](https://github.com/vinibeloni)\n- [rutkowskit](https://github.com/rutkowskit)\n- [Giovanni Costagliola](https://github.com/MrBogomips)\n- [Mark Wainwright](https://github.com/wainwrightmark)\n- [ProphetLamb](https://github.com/ProphetLamb)\n- [Paul Williams](https://github.com/Paul-Williams)\n- [alexmurari](https://github.com/alexmurari)\n- [ruud](https://github.com/ruudhe)\n- [Tomasz Malinowski](https://github.com/Yaevh)\n- [Staffan Wingren](https://github.com/staffanwingren)\n- [Tim Schneider](https://github.com/DerStimmler)\n- [Piotr Karasiński](https://github.com/Caleb9)\n- [Marcel Roozekrans](https://github.com/MarcelRoozekrans)\n- [guythetechie](https://github.com/guythetechie)\n- [Logan Kahler](https://github.com/lqkahler)\n- [Ali Khalili](https://github.com/AliKhalili)\n- [Andrei Andreev](https://github.com/Razenpok)\n- [YudApps](https://github.com/YudApps)\n- [dataphysix](https://github.com/dataphysix)\n- [Laszlo Lueck](https://github.com/LaszloLueck)\n- [Sean G. Wright](https://github.com/seangwright)\n- [Samuel Viesselman](https://github.com/SamuelViesselman)\n- [Stian Kroknes](https://github.com/stiankroknes)\n- [dataneo](https://github.com/dataneodev)\n- [michaeldileo](https://github.com/michaeldileo)\n- [Renato Ramos Nascimento](https://github.com/renato04)\n- [Patrick Drechsler](https://github.com/draptik)\n- [Vadim Mingazhev](https://github.com/mingazhev)\n- [Darick Carpenter](https://github.com/darickc)\n- [Stéphane Mitermite](https://github.com/kakone)\n- [Markus Nißl](https://github.com/mnissl)\n- [Adrian Frielinghaus](https://github.com/freever)\n- [svroonland](https://github.com/svroonland)\n- [JvSSD](https://github.com/JvSSD)\n- [Vladimir Makaev](https://github.com/VladimirMakaev)\n- [Ben Smith](https://github.com/benprime)\n- [pedromtcosta](https://github.com/pedromtcosta)\n- [Michał Bator](https://github.com/MikelThief)\n- [mukmyash](https://github.com/mukmyash)\n- [azm102](https://github.com/azm102)\n- [ThomasDC](https://github.com/thomasdc)\n- [bopazyn](https://github.com/bopazyn)\n- [Joris Goovaerts](https://github.com/CommCody)\n- [Ivan Deev](https://github.com/BillyFromAHill)\n- [Damian Płaza](https://github.com/dpraimeyuu)\n- [ergwun](https://github.com/ergwun)\n- [Michael DiLeo](https://github.com/pilotMike)\n- [Jean-Claude](https://github.com/jcsonder)\n- [Matt Jenkins](https://github.com/space-alien)\n- [Michael Altmann](https://github.com/altmann)\n- [Steven Giesel](https://github.com/linkdotnet)\n- [Anton Hryshchanka](https://github.com/ahryshchanka)\n- [Mikhail Bashurov](https://github.com/saitonakamura)\n- [kostekk88](https://github.com/kostekk88)\n- [Carl Abrahams](https://github.com/CarlHA)\n- [golavr](https://github.com/golavr)\n- [Sviataslau Hankovich](https://github.com/hankovich)\n- [Chad Gilbert](https://github.com/freakingawesome)\n- [Robert Sęk](https://github.com/robosek)\n- [Sergey Solomentsev](https://github.com/SergAtGitHub)\n- [Malcolm J Harwood](https://github.com/mjharwood)\n- [Dragan Stepanovic](https://github.com/dragan-stepanovic)\n- [Ivan Novikov](https://github.com/jonny-novikov)\n- [Denis Molokanov](https://github.com/dmolokanov)\n- [Gerald Wiltse](https://github.com/solvingJ)\n- [yakimovim](https://github.com/yakimovim)\n- [Alex Erygin](https://github.com/alex-erygin)\n- [Omar Aloraini](https://github.com/omaraloraini)\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 5.6083984375,
          "content": "trigger:\n- master\n\npool:\n  vmImage: 'ubuntu-latest'\n\nresources:\n- repo: self\n\nvariables:\n  versionFileName: 'version.txt'\n\nstages:\n- stage: Build_and_publish\n  jobs:\n  - job: Version\n    displayName: Read versions\n    steps:\n    - powershell: |\n        $newVersion = Get-Content \"$(Build.SourcesDirectory)/$(versionFileName)\" -First 1\n        $releaseInfo = (Get-Content \"$(Build.SourcesDirectory)/$(versionFileName)\" | Select-Object -Skip 1).Replace('\\r\\n', '\\n')\n        echo \"##vso[task.setvariable variable=newVersion;isOutput=true]$($newVersion)\"\n        echo \"##vso[task.setvariable variable=releaseInfo;isOutput=true]$($releaseInfo)\"\n      name: readNewVersionStep\n      displayName: Read new version\n\n    - powershell: |\n        $json = Invoke-RestMethod -Method 'GET' -Uri \"https://api.github.com/repos/vkhorikov/CSharpFunctionalExtensions/releases\"\n        $currentVersion = $json[0].tag_name.Substring(1)\n        echo \"##vso[task.setvariable variable=currentVersion;isOutput=true]$($currentVersion)\"\n      name: readCurrentVersionStep\n      displayName: Read current version\n  \n  - job: BuildAndTest\n    displayName: Build and test\n    dependsOn: Version\n    condition: succeeded('Version')\n    variables:\n      newVersion: $[ dependencies.Version.outputs['readNewVersionStep.newVersion'] ]\n    steps:\n    - script: docker build . -t build-image -f Dockerfile --build-arg Version=$(newVersion)\n      displayName: Build image\n\n    - script: |\n        docker create --name build-container build-image\n        docker cp build-container:./app/CSharpFunctionalExtensions.Tests/TestResults ./testresults\n\n        # This will make sure that the pipeline fails if the tests were not executed for any reason\n        if [ ./testresults/testresults.trx ] && [ $(grep -E \"<UnitTestResult\" ./testresults/testresults.trx -c) -gt 0 ]; then\n          echo \"Test results results found\"\n        else\n          echo \"No test results found\"\n          exit 1\n        fi\n      displayName: Extract test results\n\n    - task: PublishTestResults@2\n      inputs:\n        testRunner: VSTest\n        testResultsFiles: '**/*.trx'\n        searchFolder: '$(System.DefaultWorkingDirectory)/testresults'\n        failTaskOnFailedTests: true\n      displayName: Publish test results\n\n    - script: |\n        docker create --name build-container build-image\n        docker cp build-container:./app/out ./out\n        docker cp build-container:./app/out-sn ./out-sn\n      displayName: Copy artifacts\n\n    - publish: ./out\n      artifact: NuGetPackage\n\n    - publish: ./out-sn\n      artifact: NuGetPackageStrongName\n\n  - job: Publish\n    dependsOn:\n    - Version\n    - BuildAndTest\n    variables:\n      releaseInfo: $[ dependencies.Version.outputs['readNewVersionStep.releaseInfo'] ]\n      newVersion: $[ dependencies.Version.outputs['readNewVersionStep.newVersion'] ]\n      currentVersion: $[ dependencies.Version.outputs['readCurrentVersionStep.currentVersion'] ]\n      acceptHeader: 'Accept: application/vnd.github+json'\n      apiVersionHeader: 'X-GitHub-Api-Version: 2022-11-28'\n      contentTypeHeader1: 'Content-Type: application/json'\n      contentTypeHeader2: 'Content-Type: application/octet-stream'\n      authHeader: 'Authorization: Bearer $(gitHubToken)'\n      createReleaseRequest: '{ \"tag_name\": \"v$(newVersion)\", \"target_commitish\": \"master\", \"name\": \"v$(newVersion)\", \"body\": \"$(releaseInfo)\", \"draft\": false, \"prerelease\": false }'\n    condition: and(succeeded('Version'), succeeded('BuildAndTest'), ne(dependencies.Version.outputs['readNewVersionStep.newVersion'], dependencies.Version.outputs['readCurrentVersionStep.currentVersion']))\n    steps:\n    - script: |\n        echo $(newVersion)\n        echo $(currentVersion)\n        echo $(releaseInfo)\n      displayName: Echo versions\n\n    - download: current\n      artifact: NuGetPackage\n\n    - download: current\n      artifact: NuGetPackageStrongName\n\n    - script: |\n        curl -X POST -s -H '$(contentTypeHeader1)' -H '$(authHeader)' https://api.github.com/repos/vkhorikov/CSharpFunctionalExtensions/releases -d '$(createReleaseRequest)'\n        releaseId=$(curl -s https://api.github.com/repos/vkhorikov/CSharpFunctionalExtensions/releases/latest | grep -o '\"id\": [0-9]*' | head -n 1 | sed 's/\"id\": //')\n        curl -X POST -s -H '$(acceptHeader)' -H '$(apiVersionHeader)' -H '$(contentTypeHeader2)' -H '$(authHeader)' --data-binary '@$(Pipeline.Workspace)/NuGetPackage/CSharpFunctionalExtensions.$(newVersion).nupkg' \"https://uploads.github.com/repos/vkhorikov/CSharpFunctionalExtensions/releases/$releaseId/assets?name=CSharpFunctionalExtensions.$(newVersion).nupkg\"\n        curl -X POST -s -H '$(acceptHeader)' -H '$(apiVersionHeader)' -H '$(contentTypeHeader2)' -H '$(authHeader)' --data-binary '@$(Pipeline.Workspace)/NuGetPackageStrongName/CSharpFunctionalExtensions.StrongName.$(newVersion).nupkg' \"https://uploads.github.com/repos/vkhorikov/CSharpFunctionalExtensions/releases/$releaseId/assets?name=CSharpFunctionalExtensions.StrongName.$(newVersion).nupkg\"\n      displayName: Publish to GitHub\n      condition: and(succeeded(), ne(variables.gitHubToken, ''))\n\n    - script: |\n        dotnet nuget push $(Pipeline.Workspace)/NuGetPackage/CSharpFunctionalExtensions.$(newVersion).nupkg --source https://api.nuget.org/v3/index.json --api-key $(nugetToken)\n      displayName: Publish to NuGet\n      condition: and(succeeded(), ne(variables.nugetToken, ''))\n\n    - script: |\n        dotnet nuget push $(Pipeline.Workspace)/NuGetPackageStrongName/CSharpFunctionalExtensions.StrongName.$(newVersion).nupkg --source https://api.nuget.org/v3/index.json --api-key $(nugetToken)\n      displayName: Publish strong named package to NuGet\n      condition: and(succeeded(), ne(variables.nugetToken, ''))\n"
        },
        {
          "name": "version.txt",
          "type": "blob",
          "size": 0.0302734375,
          "content": "3.4.3\nUpdates:\n* One more test\n"
        }
      ]
    }
  ]
}