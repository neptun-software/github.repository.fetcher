{
  "metadata": {
    "timestamp": 1736710868970,
    "page": 424,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "statianzo/Fleck",
      "stars": 2340,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.458984375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.380859375,
          "content": "## Ignore Visual Studio temporary files, build results, and\r\n## files generated by popular Visual Studio add-ons.\r\n\r\n# User-specific files\r\n*.suo\r\n*.user\r\n*.userosscache\r\n*.sln.docstates\r\n\r\n# User-specific files (MonoDevelop/Xamarin Studio)\r\n*.userprefs\r\n\r\n# Build results\r\n[Dd]ebug/\r\n[Dd]ebugPublic/\r\n[Rr]elease/\r\n[Rr]eleases/\r\nx64/\r\nx86/\r\nbuild/\r\nbld/\r\n[Bb]in/\r\n[Oo]bj/\r\n\r\n# Visual Studio 2015 cache/options directory\r\n.vs/\r\n\r\n# MSTest test Results\r\n[Tt]est[Rr]esult*/\r\n[Bb]uild[Ll]og.*\r\n\r\n# NUNIT\r\n*.VisualState.xml\r\nTestResult.xml\r\n\r\n# Build Results of an ATL Project\r\n[Dd]ebugPS/\r\n[Rr]eleasePS/\r\ndlldata.c\r\n\r\n# DNX\r\nproject.lock.json\r\nartifacts/\r\n\r\n*_i.c\r\n*_p.c\r\n*_i.h\r\n*.ilk\r\n*.meta\r\n*.obj\r\n*.pch\r\n*.pdb\r\n*.pgc\r\n*.pgd\r\n*.rsp\r\n*.sbr\r\n*.tlb\r\n*.tli\r\n*.tlh\r\n*.tmp\r\n*.tmp_proj\r\n*.log\r\n*.vspscc\r\n*.vssscc\r\n.builds\r\n*.pidb\r\n*.svclog\r\n*.scc\r\n\r\n# Chutzpah Test files\r\n_Chutzpah*\r\n\r\n# Visual C++ cache files\r\nipch/\r\n*.aps\r\n*.ncb\r\n*.opensdf\r\n*.sdf\r\n*.cachefile\r\n\r\n# Visual Studio profiler\r\n*.psess\r\n*.vsp\r\n*.vspx\r\n\r\n# TFS 2012 Local Workspace\r\n$tf/\r\n\r\n# Guidance Automation Toolkit\r\n*.gpState\r\n\r\n# ReSharper is a .NET coding add-in\r\n_ReSharper*/\r\n*.[Rr]e[Ss]harper\r\n*.DotSettings.user\r\n\r\n# JustCode is a .NET coding add-in\r\n.JustCode\r\n\r\n# TeamCity is a build add-in\r\n_TeamCity*\r\n\r\n# DotCover is a Code Coverage Tool\r\n*.dotCover\r\n\r\n# NCrunch\r\n_NCrunch_*\r\n.*crunch*.local.xml\r\n\r\n# MightyMoose\r\n*.mm.*\r\nAutoTest.Net/\r\n\r\n# Web workbench (sass)\r\n.sass-cache/\r\n\r\n# Installshield output folder\r\n[Ee]xpress/\r\n\r\n# DocProject is a documentation generator add-in\r\nDocProject/buildhelp/\r\nDocProject/Help/*.HxT\r\nDocProject/Help/*.HxC\r\nDocProject/Help/*.hhc\r\nDocProject/Help/*.hhk\r\nDocProject/Help/*.hhp\r\nDocProject/Help/Html2\r\nDocProject/Help/html\r\n\r\n# Click-Once directory\r\npublish/\r\n\r\n# Publish Web Output\r\n*.[Pp]ublish.xml\r\n*.azurePubxml\r\n## TODO: Comment the next line if you want to checkin your\r\n## web deploy settings but do note that will include unencrypted\r\n## passwords\r\n#*.pubxml\r\n\r\n*.publishproj\r\n\r\n# NuGet Packages\r\n*.nupkg\r\n# The packages folder can be ignored because of Package Restore\r\n**/packages/*\r\n# except build/, which is used as an MSBuild target.\r\n!**/packages/build/\r\n# Uncomment if necessary however generally it will be regenerated when needed\r\n#!**/packages/repositories.config\r\n\r\n# Windows Azure Build Output\r\ncsx/\r\n*.build.csdef\r\n\r\n# Windows Store app package directory\r\nAppPackages/\r\n\r\n# Visual Studio cache files\r\n# files ending in .cache can be ignored\r\n*.[Cc]ache\r\n# but keep track of directories ending in .cache\r\n!*.[Cc]ache/\r\n\r\n# Others\r\nClientBin/\r\n[Ss]tyle[Cc]op.*\r\n~$*\r\n*~\r\n*.dbmdl\r\n*.dbproj.schemaview\r\n*.pfx\r\n*.publishsettings\r\nnode_modules/\r\norleans.codegen.cs\r\n\r\n# RIA/Silverlight projects\r\nGenerated_Code/\r\n\r\n# Backup & report files from converting an old project file\r\n# to a newer Visual Studio version. Backup files are not needed,\r\n# because we have git ;-)\r\n_UpgradeReport_Files/\r\nBackup*/\r\nUpgradeLog*.XML\r\nUpgradeLog*.htm\r\n\r\n# SQL Server files\r\n*.mdf\r\n*.ldf\r\n\r\n# Business Intelligence projects\r\n*.rdl.data\r\n*.bim.layout\r\n*.bim_*.settings\r\n\r\n# Microsoft Fakes\r\nFakesAssemblies/\r\n\r\n# Node.js Tools for Visual Studio\r\n.ntvs_analysis.dat\r\n\r\n# Visual Studio 6 build log\r\n*.plg\r\n\r\n# Visual Studio 6 workspace options file\r\n*.opt\r\n\r\n# LightSwitch generated files\r\nGeneratedArtifacts/\r\n_Pvt_Extensions/\r\nModelManifest.xml\r\n\r\nbuild\r\ntest-results\r\n*.pidb\r\nTestResult.xml\r\nartifacts\r\nsrc/CommonAssemblyInfo.cs\r\n*.dotCover\r\n*mm_cache.bin\r\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0478515625,
          "content": "MIT License\n\nCopyright (c) 2010-2018 Jason Staten\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.759765625,
          "content": "version: 0.0.{build}-ci\nimage: Visual Studio 2017\nconfiguration: Release\ninit:\n- ps: >-\n    if ($env:appveyor_repo_tag -eq 'true') {\n        $tag = $env:appveyor_repo_tag_name\n        Update-AppveyorBuild -Version \"$tag\"\n    }\n\ndotnet_csproj:\n  patch: true\n  file: src\\Fleck\\Fleck.csproj\n  version: '{version}'\n  package_version: '{version}'\n  assembly_version: '{version}'\n  file_version: '{version}'\n  informational_version: '{version}'\n\nbuild_script:\n- ps: >-\n    cd .\\src\\\n\n    dotnet build -c Release\n\n    dotnet pack Fleck -c Release\nartifacts:\n- path: .\\src\\Fleck\\bin\\Release\\*.nupkg\n\nnuget:\n  project_feed: true\n  disable_publish_on_pr: true\n\nnotifications:\n- provider: GitHubPullRequest\n  on_build_success: true\n  on_build_failure: true\n  on_build_status_changed: true\n"
        },
        {
          "name": "readme.markdown",
          "type": "blob",
          "size": 3.7294921875,
          "content": "Fleck\r\n===\r\n\r\n[![Build status](https://ci.appveyor.com/api/projects/status/k0s8hq5y4emak5j3/branch/master?svg=true)](https://ci.appveyor.com/project/statianzo/fleck/branch/master) [![NuGet](https://img.shields.io/nuget/v/Fleck.svg)](https://www.nuget.org/packages/Fleck/)\r\n\r\nFleck is a WebSocket server implementation in C#. Branched from the\r\n[Nugget][nugget] project, Fleck requires no inheritance, container, or\r\nadditional references.\r\n\r\nFleck has no dependency on `HttpListener` or `HTTP.sys` meaning that it\r\nwill work on Windows 7 and Server 2008 hosts. [WebSocket Remarks - Microsoft Docs](https://docs.microsoft.com/en-us/dotnet/api/system.net.websockets.websocket?redirectedfrom=MSDN&view=netframework-4.5#remarks)\r\n\r\nExample\r\n---\r\n\r\nThe following is an example that will echo to a client.\r\n\r\n```c#\r\n\r\nvar server = new WebSocketServer(\"ws://0.0.0.0:8181\");\r\nserver.Start(socket =>\r\n{\r\n  socket.OnOpen = () => Console.WriteLine(\"Open!\");\r\n  socket.OnClose = () => Console.WriteLine(\"Close!\");\r\n  socket.OnMessage = message => socket.Send(message);\r\n});\r\n        \r\n```\r\n\r\nSupported WebSocket Versions\r\n---\r\n\r\nFleck supports several WebSocket versions of modern web browsers\r\n\r\n- Hixie-Draft-76/Hybi-00 (Safari 5, Chrome < 14, Firefox 4 (when enabled))\r\n- Hybi-07 (Firefox 6)\r\n- Hybi-10 (Chrome 14-16, Firefox 7)\r\n- Hybi-13 (Chrome 17+, Firefox 11+, Safari 6+, Edge 13+(?))\r\n\r\nSecure WebSockets (wss://)\r\n---\r\n\r\nEnabling secure connections requires two things: using the scheme `wss` instead\r\nof `ws`, and pointing Fleck to an x509 certificate containing a public and\r\nprivate key\r\n\r\n```cs\r\nvar server = new WebSocketServer(\"wss://0.0.0.0:8431\");\r\nserver.Certificate = new X509Certificate2(\"MyCert.pfx\");\r\nserver.Start(socket =>\r\n{\r\n  //...use as normal\r\n});\r\n```\r\n\r\nHaving issues making a certificate? See this\r\n[guide to creating an x509](https://github.com/statianzo/Fleck/issues/214#issuecomment-364413879)\r\nby [@AdrianBathurst](https://github.com/AdrianBathurst)\r\n\r\nSubProtocol Negotiation\r\n---\r\n\r\nTo enable negotiation of subprotocols, specify the supported protocols on\r\nthe `WebSocketServer.SupportedSubProtocols` property. The negotiated\r\nsubprotocol will be available on the socket's `ConnectionInfo.NegotiatedSubProtocol`.\r\n\r\nIf no supported subprotocols are found on the client request (the\r\nSec-WebSocket-Protocol header), the connection will be closed.\r\n\r\n```cs\r\nvar server = new WebSocketServer(\"ws://0.0.0.0:8181\");\r\nserver.SupportedSubProtocols = new []{ \"superchat\", \"chat\" };\r\nserver.Start(socket =>\r\n{\r\n  //socket.ConnectionInfo.NegotiatedSubProtocol is populated\r\n});\r\n```\r\n\r\nCustom Logging\r\n---\r\n\r\nFleck can log into Log4Net or any other third party logging system. Just override the `FleckLog.LogAction` property with the desired behavior.\r\n\r\n```cs\r\nILog logger = LogManager.GetLogger(typeof(FleckLog));\r\n\r\nFleckLog.LogAction = (level, message, ex) => {\r\n  switch(level) {\r\n    case LogLevel.Debug:\r\n      logger.Debug(message, ex);\r\n      break;\r\n    case LogLevel.Error:\r\n      logger.Error(message, ex);\r\n      break;\r\n    case LogLevel.Warn:\r\n      logger.Warn(message, ex);\r\n      break;\r\n    default:\r\n      logger.Info(message, ex);\r\n      break;\r\n  }\r\n};\r\n\r\n```\r\n\r\nDisable Nagle's Algorithm\r\n---\r\n\r\nSet `NoDelay` to `true` on the `WebSocketConnection.ListenerSocket`\r\n\r\n```cs\r\nvar server = new WebSocketServer(\"ws://0.0.0.0:8181\");\r\nserver.ListenerSocket.NoDelay = true;\r\nserver.Start(socket =>\r\n{\r\n  //Child connections will not use Nagle's Algorithm\r\n});\r\n```\r\n\r\nAuto Restart After Listen Error\r\n---\r\n\r\nSet `RestartAfterListenError` to `true` on the `WebSocketConnection`\r\n\r\n```cs\r\nvar server = new WebSocketServer(\"ws://0.0.0.0:8181\");\r\nserver.RestartAfterListenError = true;\r\nserver.Start(socket =>\r\n{\r\n  //...use as normal\r\n});\r\n```\r\n\r\n[nugget]: http://nugget.codeplex.com/ \r\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}