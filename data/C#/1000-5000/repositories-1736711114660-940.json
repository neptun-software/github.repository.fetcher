{
  "metadata": {
    "timestamp": 1736711114660,
    "page": 940,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "emoose/DLSSTweaks",
      "stars": 1345,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2626953125,
          "content": "# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\nbuild/*\n.vscode/*\nout/*\n.vs/*\nrel/*"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2958984375,
          "content": "[submodule \"external/spdlog\"]\n\tpath = external/spdlog\n\turl = https://github.com/gabime/spdlog\n[submodule \"external/ModUtils\"]\n\tpath = external/ModUtils\n\turl = https://github.com/CookiePLMonster/ModUtils\n[submodule \"external/ini-cpp\"]\n\tpath = external/ini-cpp\n\turl = https://github.com/SSARCandy/ini-cpp\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 4.267578125,
          "content": "# This file is automatically generated from cmake.toml - DO NOT EDIT\n# See https://github.com/build-cpp/cmkr for more information\n\ncmake_minimum_required(VERSION 3.15)\n\nif(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)\n\tmessage(FATAL_ERROR \"In-tree builds are not supported. Run CMake from a separate directory: cmake -B build\")\nendif()\n\nset(CMKR_ROOT_PROJECT OFF)\nif(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)\n\tset(CMKR_ROOT_PROJECT ON)\n\n\t# Bootstrap cmkr and automatically regenerate CMakeLists.txt\n\tinclude(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)\n\tif(CMKR_INCLUDE_RESULT)\n\t\tcmkr()\n\tendif()\n\n\t# Enable folder support\n\tset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\n\t# Create a configure-time dependency on cmake.toml to improve IDE support\n\tconfigure_file(cmake.toml cmake.toml COPYONLY)\nendif()\n\nproject(dlsstweaks-proj)\n\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /MP\")\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /MP\")\n\nset(ASMJIT_STATIC ON CACHE BOOL \"\" FORCE)\n\noption(ZYDIS_BUILD_TOOLS \"\" OFF)\noption(ZYDIS_BUILD_EXAMPLES \"\" OFF)\n\nif (\"${CMAKE_BUILD_TYPE}\" MATCHES \"Release\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /MT\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /MT\")\n\n    # Statically compile runtime\n    string(REGEX REPLACE \"/MD\" \"/MT\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n    string(REGEX REPLACE \"/MD\" \"/MT\" CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n    string(REGEX REPLACE \"/MD\" \"/MT\" CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n    string(REGEX REPLACE \"/MD\" \"/MT\" CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE}\")\n\n    set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded\")\n    message(NOTICE \"Building in Release mode\")\nendif()\n\ninclude(FetchContent)\n\nmessage(STATUS \"Fetching zydis (v4.0.0)...\")\nFetchContent_Declare(zydis\n\tGIT_REPOSITORY\n\t\t\"https://github.com/zyantific/zydis\"\n\tGIT_TAG\n\t\tv4.0.0\n)\nFetchContent_MakeAvailable(zydis)\n\nmessage(STATUS \"Fetching safetyhook (2c134ea8f642d184f422ad5069145147ac085113)...\")\nFetchContent_Declare(safetyhook\n\tGIT_REPOSITORY\n\t\t\"https://github.com/cursey/safetyhook\"\n\tGIT_TAG\n\t\t2c134ea8f642d184f422ad5069145147ac085113\n)\nFetchContent_MakeAvailable(safetyhook)\n\n# Target: spdlog\nset(spdlog_SOURCES\n\t\"external/spdlog/src/async.cpp\"\n\t\"external/spdlog/src/bundled_fmtlib_format.cpp\"\n\t\"external/spdlog/src/cfg.cpp\"\n\t\"external/spdlog/src/color_sinks.cpp\"\n\t\"external/spdlog/src/file_sinks.cpp\"\n\t\"external/spdlog/src/spdlog.cpp\"\n\t\"external/spdlog/src/stdout_sinks.cpp\"\n\tcmake.toml\n)\n\nadd_library(spdlog STATIC)\n\ntarget_sources(spdlog PRIVATE ${spdlog_SOURCES})\nsource_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${spdlog_SOURCES})\n\ntarget_compile_definitions(spdlog PUBLIC\n\tSPDLOG_COMPILED_LIB\n)\n\ntarget_include_directories(spdlog PUBLIC\n\t\"external/spdlog/include\"\n)\n\n# Target: dlsstweaks\nset(dlsstweaks_SOURCES\n\t\"src/DllMain.cpp\"\n\t\"src/Proxy.cpp\"\n\t\"src/ProxyNvngx.cpp\"\n\t\"src/UserSettings.cpp\"\n\t\"src/Utility.cpp\"\n\t\"src/module_hooks/nvngx.cpp\"\n\t\"src/module_hooks/nvngx_dlss.cpp\"\n\t\"src/module_hooks/nvngx_dlssg.cpp\"\n\t\"src/Proxy.def\"\n\t\"src/Resource.rc\"\n\t\"external/ModUtils/Patterns.cpp\"\n\t\"src/DLSSTweaks.hpp\"\n\t\"src/Proxy.hpp\"\n\t\"src/Utility.hpp\"\n\t\"src/resource.h\"\n\t\"external/ModUtils/Patterns.h\"\n\tcmake.toml\n)\n\nadd_library(dlsstweaks SHARED)\n\ntarget_sources(dlsstweaks PRIVATE ${dlsstweaks_SOURCES})\nsource_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${dlsstweaks_SOURCES})\n\ntarget_compile_definitions(dlsstweaks PUBLIC\n)\n\ntarget_compile_features(dlsstweaks PUBLIC\n\tcxx_std_20\n)\n\ntarget_compile_options(dlsstweaks PUBLIC\n\t\"/GS-\"\n\t\"/bigobj\"\n\t\"/EHa\"\n\t\"/MP\"\n)\n\ntarget_include_directories(dlsstweaks PUBLIC\n\t\"shared/\"\n\t\"src/\"\n\t\"include/\"\n\t\"external/ModUtils/\"\n\t\"external/ini-cpp/ini/\"\n\t\"external/DLSS/include/\"\n)\n\ntarget_link_libraries(dlsstweaks PUBLIC\n\tspdlog\n\tsafetyhook\n\tversion.lib\n)\n\ntarget_link_options(dlsstweaks PUBLIC\n\t\"/DEBUG\"\n\t\"/OPT:REF\"\n\t\"/OPT:ICF\"\n)\n\nset_target_properties(dlsstweaks PROPERTIES\n\tOUTPUT_NAME\n\t\tnvngx\n\tRUNTIME_OUTPUT_DIRECTORY_RELEASE\n\t\t\"${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}\"\n\tRUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO\n\t\t\"${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}\"\n\tLIBRARY_OUTPUT_DIRECTORY_RELEASE\n\t\t\"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\n\tLIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO\n\t\t\"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\n\tARCHIVE_OUTPUT_DIRECTORY_RELEASE\n\t\t\"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\n\tARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO\n\t\t\"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\n)\n\n"
        },
        {
          "name": "ConfigTool",
          "type": "tree",
          "content": null
        },
        {
          "name": "DisableNvidiaSigOverride.reg",
          "type": "blob",
          "size": 0.482421875,
          "content": "﻿Windows Registry Editor Version 5.00\r\n\r\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\NVIDIA Corporation\\Global]\r\n\"{41FCC608-8496-4DEF-B43E-7D9BD675A6FF}\"=-\r\n\r\n[HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\nvlddmkm]\r\n\"{41FCC608-8496-4DEF-B43E-7D9BD675A6FF}\"=-"
        },
        {
          "name": "EnableNvidiaSigOverride.reg",
          "type": "blob",
          "size": 0.501953125,
          "content": "﻿Windows Registry Editor Version 5.00\r\n\r\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\NVIDIA Corporation\\Global]\r\n\"{41FCC608-8496-4DEF-B43E-7D9BD675A6FF}\"=hex:01\r\n\r\n[HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\nvlddmkm]\r\n\"{41FCC608-8496-4DEF-B43E-7D9BD675A6FF}\"=hex:01"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0380859375,
          "content": "MIT License\n\nCopyright (c) 2023 emoose\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.7626953125,
          "content": "# DLSSTweaks\n\nThis repo is now frozen at version 0.200.8.0, due to repeated cases of groups taking my code and rebranding it with 0 changes, other than changed donation links.\n\nNewer DLSSTweaks versions are now released at [NexusMods](https://www.nexusmods.com/site/mods/550)\n\n---\n### Thanks\nDLSSTweaks is built on top of several open-source projects, many thanks to the following:\n\n- praydog for the project template (https://github.com/praydog/AutomataMP)\n- cursey for safetyhook (https://github.com/cursey/safetyhook)\n- Silent for ModUtils (https://github.com/CookiePLMonster/ModUtils)\n- PotatoOfDoom for CyberFSR2 & the nvngx.dll loading method/signature override (https://github.com/PotatoOfDoom/CyberFSR2)\n- This software contains source code provided by NVIDIA Corporation.\n"
        },
        {
          "name": "build_vs2022.bat",
          "type": "blob",
          "size": 0.1630859375,
          "content": "git pull --recurse-submodules\ngit submodule update --init --recursive\nmkdir build\ncd build\ncmake .. -G \"Visual Studio 17 2022\" -A x64\ncmake --build . --config Release\n"
        },
        {
          "name": "cmake.toml",
          "type": "blob",
          "size": 2.41015625,
          "content": "# Reference: https://build-cpp.github.io/cmkr/cmake-toml\n# to build:\n# > cmake -B build\n# > cmake --build build --config Release\n[project]\nname = \"dlsstweaks-proj\"\ncmake-after = \"\"\"\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /MP\")\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /MP\")\n\nset(ASMJIT_STATIC ON CACHE BOOL \"\" FORCE)\n\noption(ZYDIS_BUILD_TOOLS \"\" OFF)\noption(ZYDIS_BUILD_EXAMPLES \"\" OFF)\n\nif (\"${CMAKE_BUILD_TYPE}\" MATCHES \"Release\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /MT\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /MT\")\n\n    # Statically compile runtime\n    string(REGEX REPLACE \"/MD\" \"/MT\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n    string(REGEX REPLACE \"/MD\" \"/MT\" CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n    string(REGEX REPLACE \"/MD\" \"/MT\" CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n    string(REGEX REPLACE \"/MD\" \"/MT\" CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE}\")\n\n    set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded\")\n    message(NOTICE \"Building in Release mode\")\nendif()\n\"\"\"\n\n[target.spdlog]\ntype = \"static\"\nsources = [\"external/spdlog/src/*.cpp\"]\ninclude-directories = [\"external/spdlog/include\"]\ncompile-definitions = [\"SPDLOG_COMPILED_LIB\"]\n\n[fetch-content]\nzydis = { git = \"https://github.com/zyantific/zydis\", tag = \"v4.0.0\" }\nsafetyhook = { git = \"https://github.com/cursey/safetyhook\", tag = \"2c134ea8f642d184f422ad5069145147ac085113\" }\n\n[target.dlsstweaks]\ntype = \"shared\"\nsources = [\"src/**.cpp\", \"src/**.c\", \"src/**.def\", \"src/Resource.rc\", \"external/ModUtils/Patterns.cpp\"]\nheaders = [\"src/**.hpp\", \"src/**.h\", \"external/ModUtils/Patterns.h\"]\ninclude-directories = [\"shared/\", \"src/\", \"include/\", \"external/ModUtils/\", \"external/ini-cpp/ini/\", \"external/DLSS/include/\"]\ncompile-options = [\"/GS-\", \"/bigobj\", \"/EHa\", \"/MP\"]\nlink-options = [\"/DEBUG\", \"/OPT:REF\", \"/OPT:ICF\"]\ncompile-features = [\"cxx_std_20\"]\ncompile-definitions = [\"\"]\nlink-libraries = [\n    \"spdlog\",\n    \"safetyhook\",\n    \"version.lib\"\n]\n\n[target.dlsstweaks.properties]\nOUTPUT_NAME = \"nvngx\"\nRUNTIME_OUTPUT_DIRECTORY_RELEASE = \"${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}\"\nRUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO = \"${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}\"\nLIBRARY_OUTPUT_DIRECTORY_RELEASE = \"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\nLIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO = \"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\nARCHIVE_OUTPUT_DIRECTORY_RELEASE = \"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\nARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO = \"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}\"\n\n"
        },
        {
          "name": "cmkr.cmake",
          "type": "blob",
          "size": 10.0849609375,
          "content": "include_guard()\n\n# Change these defaults to point to your infrastructure if desired\nset(CMKR_REPO \"https://github.com/build-cpp/cmkr\" CACHE STRING \"cmkr git repository\" FORCE)\nset(CMKR_TAG \"v0.2.18\" CACHE STRING \"cmkr git tag (this needs to be available forever)\" FORCE)\nset(CMKR_COMMIT_HASH \"\" CACHE STRING \"cmkr git commit hash (optional)\" FORCE)\n\n# To bootstrap/generate a cmkr project: cmake -P cmkr.cmake\nif(CMAKE_SCRIPT_MODE_FILE)\n    set(CMAKE_BINARY_DIR \"${CMAKE_BINARY_DIR}/build\")\n    set(CMAKE_CURRENT_BINARY_DIR \"${CMAKE_BINARY_DIR}\")\n    file(MAKE_DIRECTORY \"${CMAKE_BINARY_DIR}\")\nendif()\n\n# Set these from the command line to customize for development/debugging purposes\nset(CMKR_EXECUTABLE \"\" CACHE FILEPATH \"cmkr executable\")\nset(CMKR_SKIP_GENERATION OFF CACHE BOOL \"skip automatic cmkr generation\")\nset(CMKR_BUILD_TYPE \"Debug\" CACHE STRING \"cmkr build configuration\")\nmark_as_advanced(CMKR_REPO CMKR_TAG CMKR_COMMIT_HASH CMKR_EXECUTABLE CMKR_SKIP_GENERATION CMKR_BUILD_TYPE)\n\n# Disable cmkr if generation is disabled\nif(DEFINED ENV{CI} OR CMKR_SKIP_GENERATION OR CMKR_BUILD_SKIP_GENERATION)\n    message(STATUS \"[cmkr] Skipping automatic cmkr generation\")\n    unset(CMKR_BUILD_SKIP_GENERATION CACHE)\n    macro(cmkr)\n    endmacro()\n    return()\nendif()\n\n# Disable cmkr if no cmake.toml file is found\nif(NOT CMAKE_SCRIPT_MODE_FILE AND NOT EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/cmake.toml\")\n    message(AUTHOR_WARNING \"[cmkr] Not found: ${CMAKE_CURRENT_SOURCE_DIR}/cmake.toml\")\n    macro(cmkr)\n    endmacro()\n    return()\nendif()\n\n# Convert a Windows native path to CMake path\nif(CMKR_EXECUTABLE MATCHES \"\\\\\\\\\")\n    string(REPLACE \"\\\\\" \"/\" CMKR_EXECUTABLE_CMAKE \"${CMKR_EXECUTABLE}\")\n    set(CMKR_EXECUTABLE \"${CMKR_EXECUTABLE_CMAKE}\" CACHE FILEPATH \"\" FORCE)\n    unset(CMKR_EXECUTABLE_CMAKE)\nendif()\n\n# Helper macro to execute a process (COMMAND_ERROR_IS_FATAL ANY is 3.19 and higher)\nfunction(cmkr_exec)\n    execute_process(COMMAND ${ARGV} RESULT_VARIABLE CMKR_EXEC_RESULT)\n    if(NOT CMKR_EXEC_RESULT EQUAL 0)\n        message(FATAL_ERROR \"cmkr_exec(${ARGV}) failed (exit code ${CMKR_EXEC_RESULT})\")\n    endif()\nendfunction()\n\n# Windows-specific hack (CMAKE_EXECUTABLE_PREFIX is not set at the moment)\nif(WIN32)\n    set(CMKR_EXECUTABLE_NAME \"cmkr.exe\")\nelse()\n    set(CMKR_EXECUTABLE_NAME \"cmkr\")\nendif()\n\n# Use cached cmkr if found\nif(DEFINED ENV{CMKR_CACHE})\n    set(CMKR_DIRECTORY_PREFIX \"$ENV{CMKR_CACHE}\")\n    string(REPLACE \"\\\\\" \"/\" CMKR_DIRECTORY_PREFIX \"${CMKR_DIRECTORY_PREFIX}\")\n    if(NOT CMKR_DIRECTORY_PREFIX MATCHES \"\\\\/$\")\n        set(CMKR_DIRECTORY_PREFIX \"${CMKR_DIRECTORY_PREFIX}/\")\n    endif()\n    # Build in release mode for the cache\n    set(CMKR_BUILD_TYPE \"Release\")\nelse()\n    set(CMKR_DIRECTORY_PREFIX \"${CMAKE_CURRENT_BINARY_DIR}/_cmkr_\")\nendif()\nset(CMKR_DIRECTORY \"${CMKR_DIRECTORY_PREFIX}${CMKR_TAG}\")\nset(CMKR_CACHED_EXECUTABLE \"${CMKR_DIRECTORY}/bin/${CMKR_EXECUTABLE_NAME}\")\n\n# Helper function to check if a string starts with a prefix\n# Cannot use MATCHES, see: https://github.com/build-cpp/cmkr/issues/61\nfunction(cmkr_startswith str prefix result)\n    string(LENGTH \"${prefix}\" prefix_length)\n    string(LENGTH \"${str}\" str_length)\n    if(prefix_length LESS_EQUAL str_length)\n        string(SUBSTRING \"${str}\" 0 ${prefix_length} str_prefix)\n        if(prefix STREQUAL str_prefix)\n            set(\"${result}\" ON PARENT_SCOPE)\n            return()\n        endif()\n    endif()\n    set(\"${result}\" OFF PARENT_SCOPE)\nendfunction()\n\n# Handle upgrading logic\nif(CMKR_EXECUTABLE AND NOT CMKR_CACHED_EXECUTABLE STREQUAL CMKR_EXECUTABLE)\n    cmkr_startswith(\"${CMKR_EXECUTABLE}\" \"${CMAKE_CURRENT_BINARY_DIR}/_cmkr\" CMKR_STARTSWITH_BUILD)\n    cmkr_startswith(\"${CMKR_EXECUTABLE}\" \"${CMKR_DIRECTORY_PREFIX}\" CMKR_STARTSWITH_CACHE)\n    if(CMKR_STARTSWITH_BUILD)\n        if(DEFINED ENV{CMKR_CACHE})\n            message(AUTHOR_WARNING \"[cmkr] Switching to cached cmkr: '${CMKR_CACHED_EXECUTABLE}'\")\n            if(EXISTS \"${CMKR_CACHED_EXECUTABLE}\")\n                set(CMKR_EXECUTABLE \"${CMKR_CACHED_EXECUTABLE}\" CACHE FILEPATH \"Full path to cmkr executable\" FORCE)\n            else()\n                unset(CMKR_EXECUTABLE CACHE)\n            endif()\n        else()\n            message(AUTHOR_WARNING \"[cmkr] Upgrading '${CMKR_EXECUTABLE}' to '${CMKR_CACHED_EXECUTABLE}'\")\n            unset(CMKR_EXECUTABLE CACHE)\n        endif()\n    elseif(DEFINED ENV{CMKR_CACHE} AND CMKR_STARTSWITH_CACHE)\n        message(AUTHOR_WARNING \"[cmkr] Upgrading cached '${CMKR_EXECUTABLE}' to '${CMKR_CACHED_EXECUTABLE}'\")\n        unset(CMKR_EXECUTABLE CACHE)\n    endif()\nendif()\n\nif(CMKR_EXECUTABLE AND EXISTS \"${CMKR_EXECUTABLE}\")\n    message(VERBOSE \"[cmkr] Found cmkr: '${CMKR_EXECUTABLE}'\")\nelseif(CMKR_EXECUTABLE AND NOT CMKR_EXECUTABLE STREQUAL CMKR_CACHED_EXECUTABLE)\n    message(FATAL_ERROR \"[cmkr] '${CMKR_EXECUTABLE}' not found\")\nelseif(NOT CMKR_EXECUTABLE AND EXISTS \"${CMKR_CACHED_EXECUTABLE}\")\n    set(CMKR_EXECUTABLE \"${CMKR_CACHED_EXECUTABLE}\" CACHE FILEPATH \"Full path to cmkr executable\" FORCE)\n    message(STATUS \"[cmkr] Found cached cmkr: '${CMKR_EXECUTABLE}'\")\nelse()\n    set(CMKR_EXECUTABLE \"${CMKR_CACHED_EXECUTABLE}\" CACHE FILEPATH \"Full path to cmkr executable\" FORCE)\n    message(VERBOSE \"[cmkr] Bootstrapping '${CMKR_EXECUTABLE}'\")\n\n    message(STATUS \"[cmkr] Fetching cmkr...\")\n    if(EXISTS \"${CMKR_DIRECTORY}\")\n        cmkr_exec(\"${CMAKE_COMMAND}\" -E rm -rf \"${CMKR_DIRECTORY}\")\n    endif()\n    find_package(Git QUIET REQUIRED)\n    cmkr_exec(\"${GIT_EXECUTABLE}\"\n        clone\n        --config advice.detachedHead=false\n        --branch ${CMKR_TAG}\n        --depth 1\n        ${CMKR_REPO}\n        \"${CMKR_DIRECTORY}\"\n    )\n    if(CMKR_COMMIT_HASH)\n        execute_process(\n            COMMAND \"${GIT_EXECUTABLE}\" checkout -q \"${CMKR_COMMIT_HASH}\"\n            RESULT_VARIABLE CMKR_EXEC_RESULT\n            WORKING_DIRECTORY \"${CMKR_DIRECTORY}\"\n        )\n        if(NOT CMKR_EXEC_RESULT EQUAL 0)\n            message(FATAL_ERROR \"Tag '${CMKR_TAG}' hash is not '${CMKR_COMMIT_HASH}'\")\n        endif()\n    endif()\n    message(STATUS \"[cmkr] Building cmkr (using system compiler)...\")\n    cmkr_exec(\"${CMAKE_COMMAND}\"\n        --no-warn-unused-cli\n        \"${CMKR_DIRECTORY}\"\n        \"-B${CMKR_DIRECTORY}/build\"\n        \"-DCMAKE_BUILD_TYPE=${CMKR_BUILD_TYPE}\"\n        \"-DCMAKE_UNITY_BUILD=ON\"\n        \"-DCMAKE_INSTALL_PREFIX=${CMKR_DIRECTORY}\"\n        \"-DCMKR_GENERATE_DOCUMENTATION=OFF\"\n    )\n    cmkr_exec(\"${CMAKE_COMMAND}\"\n        --build \"${CMKR_DIRECTORY}/build\"\n        --config \"${CMKR_BUILD_TYPE}\"\n        --parallel\n    )\n    cmkr_exec(\"${CMAKE_COMMAND}\"\n        --install \"${CMKR_DIRECTORY}/build\"\n        --config \"${CMKR_BUILD_TYPE}\"\n        --prefix \"${CMKR_DIRECTORY}\"\n        --component cmkr\n    )\n    if(NOT EXISTS ${CMKR_EXECUTABLE})\n        message(FATAL_ERROR \"[cmkr] Failed to bootstrap '${CMKR_EXECUTABLE}'\")\n    endif()\n    cmkr_exec(\"${CMKR_EXECUTABLE}\" version)\n    message(STATUS \"[cmkr] Bootstrapped ${CMKR_EXECUTABLE}\")\nendif()\nexecute_process(COMMAND \"${CMKR_EXECUTABLE}\" version\n    RESULT_VARIABLE CMKR_EXEC_RESULT\n)\nif(NOT CMKR_EXEC_RESULT EQUAL 0)\n    message(FATAL_ERROR \"[cmkr] Failed to get version, try clearing the cache and rebuilding\")\nendif()\n\n# Use cmkr.cmake as a script\nif(CMAKE_SCRIPT_MODE_FILE)\n    if(NOT EXISTS \"${CMAKE_SOURCE_DIR}/cmake.toml\")\n        execute_process(COMMAND \"${CMKR_EXECUTABLE}\" init\n            RESULT_VARIABLE CMKR_EXEC_RESULT\n        )\n        if(NOT CMKR_EXEC_RESULT EQUAL 0)\n            message(FATAL_ERROR \"[cmkr] Failed to bootstrap cmkr project. Please report an issue: https://github.com/build-cpp/cmkr/issues/new\")\n        else()\n            message(STATUS \"[cmkr] Modify cmake.toml and then configure using: cmake -B build\")\n        endif()\n    else()\n        execute_process(COMMAND \"${CMKR_EXECUTABLE}\" gen\n            RESULT_VARIABLE CMKR_EXEC_RESULT\n        )\n        if(NOT CMKR_EXEC_RESULT EQUAL 0)\n            message(FATAL_ERROR \"[cmkr] Failed to generate project.\")\n        else()\n            message(STATUS \"[cmkr] Configure using: cmake -B build\")\n        endif()\n    endif()\nendif()\n\n# This is the macro that contains black magic\nmacro(cmkr)\n    # When this macro is called from the generated file, fake some internal CMake variables\n    get_source_file_property(CMKR_CURRENT_LIST_FILE \"${CMAKE_CURRENT_LIST_FILE}\" CMKR_CURRENT_LIST_FILE)\n    if(CMKR_CURRENT_LIST_FILE)\n        set(CMAKE_CURRENT_LIST_FILE \"${CMKR_CURRENT_LIST_FILE}\")\n        get_filename_component(CMAKE_CURRENT_LIST_DIR \"${CMAKE_CURRENT_LIST_FILE}\" DIRECTORY)\n    endif()\n\n    # File-based include guard (include_guard is not documented to work)\n    get_source_file_property(CMKR_INCLUDE_GUARD \"${CMAKE_CURRENT_LIST_FILE}\" CMKR_INCLUDE_GUARD)\n    if(NOT CMKR_INCLUDE_GUARD)\n        set_source_files_properties(\"${CMAKE_CURRENT_LIST_FILE}\" PROPERTIES CMKR_INCLUDE_GUARD TRUE)\n\n        file(SHA256 \"${CMAKE_CURRENT_LIST_FILE}\" CMKR_LIST_FILE_SHA256_PRE)\n\n        # Generate CMakeLists.txt\n        cmkr_exec(\"${CMKR_EXECUTABLE}\" gen\n            WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\"\n        )\n\n        file(SHA256 \"${CMAKE_CURRENT_LIST_FILE}\" CMKR_LIST_FILE_SHA256_POST)\n\n        # Delete the temporary file if it was left for some reason\n        set(CMKR_TEMP_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/CMakerLists.txt\")\n        if(EXISTS \"${CMKR_TEMP_FILE}\")\n            file(REMOVE \"${CMKR_TEMP_FILE}\")\n        endif()\n\n        if(NOT CMKR_LIST_FILE_SHA256_PRE STREQUAL CMKR_LIST_FILE_SHA256_POST)\n            # Copy the now-generated CMakeLists.txt to CMakerLists.txt\n            # This is done because you cannot include() a file you are currently in\n            configure_file(CMakeLists.txt \"${CMKR_TEMP_FILE}\" COPYONLY)\n\n            # Add the macro required for the hack at the start of the cmkr macro\n            set_source_files_properties(\"${CMKR_TEMP_FILE}\" PROPERTIES\n                CMKR_CURRENT_LIST_FILE \"${CMAKE_CURRENT_LIST_FILE}\"\n            )\n\n            # 'Execute' the newly-generated CMakeLists.txt\n            include(\"${CMKR_TEMP_FILE}\")\n\n            # Delete the generated file\n            file(REMOVE \"${CMKR_TEMP_FILE}\")\n\n            # Do not execute the rest of the original CMakeLists.txt\n            return()\n        endif()\n        # Resume executing the unmodified CMakeLists.txt\n    endif()\nendmacro()\n"
        },
        {
          "name": "dlsstweaks.ini",
          "type": "blob",
          "size": 12.2919921875,
          "content": "; DLSSTweaks by emoose - https://github.com/emoose/DLSSTweaks\n; Wrapper DLL that can force DLAA onto DLSS-supported games, along with tweaking the scaling ratios & presets used by them\n;\n; DLSSTweaks now offers two ways of loading itself in, to help with systems that had issues with the older method:\n;\n; - Leaving the DLL filename as \"nvngx.dll\" will let it wrap the nvngx.dll DLSS module, usually has the best chance of working since it requires less code hooks to be installed.\n;   However this method does need a registry change to be applied first to stop DLSS from checking the nvngx.dll signature.\n;   The included \"EnableNvidiaSigOverride.reg\" file can handle this for you, just double-click -> Run -> Yes to all prompts\n;   (This only affects Nvidia specific signature checks, not anything to do with Windows)\n;   In case it wasn't included, reg file can also be found at https://github.com/emoose/DLSSTweaks/blob/master/EnableNvidiaSigOverride.reg\n;\n; - Alternatively, a legacy method can be used by renaming the DLSSTweaks \"nvngx.dll\" to one of the following names instead, without any signature override needed.\n;   (different games may require certain filenames to load in properly, and some games may have issues with this method altogether, the nvngx.dll method above is recommended)\n;   - XInput1_3.dll\n;   - XInput1_4.dll\n;   - XInput9_1_0.dll\n;   - dxgi.dll\n;   - XAPOFX1_5.dll\n;   - X3DAudio1_7.dll\n;   - winmm.dll\n;\n; If you find a DLSS2/DLSS3-supported game that doesn't work with either of these methods please let me know at https://github.com/emoose/DLSSTweaks!\n\n[DLSS]\n; ForceDLAA: forces all DLSS quality modes to act as DLAA instead, making the game render in full-res while DLAA anti-aliasing is applied over it\n;  To use this just enable any DLSS quality in the game, with this tweak enabled they'll all render at full resolution instead\n;  The game might change mip biasing depending on the quality level however, so feel free to experiment with them!\n;\n;  Notes:\n;  - if DLSSQualityLevels section is enabled then ForceDLAA won't be applied, and ratios will be used from that section instead\n;  - you can check if DLAA is active using the OverrideDlssHud tweak below, overlay text should mention both render resolution & upscaled resolution, if they match then DLAA is active\n;  - if game has problems running with full-res DLAA it could be worth tweaking the ResolutionOffset setting in Compatibility section below\n;  - DLSS Preset F is recommended for use with DLAA by Nvidia, but usually won't be set by default, instead you can set that in the DLSSPresets section below\nForceDLAA = false\n\n; OverrideAutoExposure: allows forcing DLSS auto-exposure to be enabled/disabled/left at default\n;  Certain DLSS2 titles may have an \"AutoExposure\" option in-game, which might fail to activate with DLSS3.1\n;  In that case you can force it to enable here\n;  Some early titles released before auto-exposure might also benefit from having it forced (reducing ghosting issues in certain titles)\n;  More info about auto-exposure at https://github.com/emoose/DLSSTweaks/issues/53\n;  Set to 0 to leave it at default, 1 to force enable, or -1 to force disable\nOverrideAutoExposure = 0\n\n; OverrideAlphaUpscaling: allows forcing DLSS 3.6+ alpha-upscaling to be enabled/disabled/left at default\n;  DLSS documentation describes this as:\n;   By default, DLSS is intended for 3-channel RGB images, only. Experimental support for upscaling 4-\n;   channel RGBA images can be enabled by setting the NVSDK_NGX_DLSS_Feature_Flags_AlphaUpscaling\n;   flag at creation time. For best results, the RGB color should be premultiplied by alpha in the color input.\n;   Note: performance will be impacted by enabling this feature. Expect the overall execution time of DLSS\n;   to increase by 15-25% when alpha blending is enabled.\n;  It'll likely depend on the game whether alpha upscaling will work properly or not.\n;  Set to 0 to leave it at default, 1 to force enable, or -1 to force disable\nOverrideAlphaUpscaling = 0\n\n; OverrideSharpening: allows overriding the DLSS sharpening applied to the image\n;  This only affects pre-2.5.1 DLSS versions, v2.5.1 and later versions removed sharpening from DLSS (use sharpening available in NV control panel instead)\n;\n;  Value can be from -1.0 to 1.0, negative numbers will apply a softening filter, while positive ones will sharpen\n;  (eg. setting to 0.64 will apply 64% sharpening filter)\n;  Can usually be changed during gameplay fine, by simply editing the INI file\n;    (you may need to set a value to this first before starting game though, in order for the DLSS sharpening flag to be set)\n;\n;  Usage:\n;  - Set to a value from -1.0 to 1.0 to apply softening or sharpening\n;  - Set to 0 to disable softening/sharpening (will leave any DoSharpening DLSS flag in place though, which may still affect image)\n;  - Set to \"disable\" to completely force the sharpening flag to be disabled (this will prevent changing OverrideSharpening during gameplay)\n;  - Set to \"default\" (or comment out the line) to prevent this override from applying, leaving the value at whatever game sets for it\nOverrideSharpening = Default\n\n; OverrideDlssHud: allows force enabling/disabling the DLSS debug display HUD overlay\n;  The HUD will display on bottom left of screen in-game when enabled, though some titles may draw effects on top of it\n;  For those it's recommended to try disabling any post-process effects\n;  Should work with both release & dev DLSS DLL types\n;  Set to 0 to leave it at default, 1 to force enable, or -1 to force disable\n;  (if overlay doesn't seem to draw try setting this to 2 instead to make it use a slightly different method)\nOverrideDlssHud = 0\n\n; DisableDevWatermark: removes the on-screen watermark shown when using dev DLL\n;  Can also remove watermark on certain versions of DLSSG/FrameGeneration\n;  Only useful if you're using a dev version of DLSS, most won't need this\nDisableDevWatermark = false\n\n; VerboseLogging: increases DLSSTweaks log level & prints extra log entries into dlsstweaks.log file\nVerboseLogging = false\n\n[DLLPathOverrides]\n; DLLPathOverrides: allows overriding the path that a DLL will be loaded from based on the filename of it\n;  This can be useful if you're prevented somehow from changing any of the game files, stopping you from changing DLSS DLLs easily\n;  (eg. RGL launcher which always overwrites DLSS with an older version)\n;  Can also be useful if you use a global injector setup & want every game to use a single DLSS DLL\n;\n;  Format of this section is the following:\n;  (\";\" indicates the line is a comment, remove it for DLSSTweaks to use that line)\n;[DLL name] = [path to load from]\n;  For example:\n;nvngx_dlss = nvngx_dlss_new.dll\n;\n;  Full paths can also be specified too, including spaces (no need to use double-quotes around it):\n;nvngx_dlss = C:\\Users\\Username\\Desktop\\DLSS Releases\\3.1.11\\rel\\nvngx_dlss.dll\n;\n;  Other DLLs such as DLSS FrameGen (nvngx_dlssg) can also be overridden using this too:\n;nvngx_dlssg = C:\\Users\\Username\\Desktop\\DLSS Releases\\DLSS FrameGen\\3.1.10\\nvngx_dlssg.dll\n\n[DLSSQualityLevels]\n; DLSSQualityLevels: allows overriding the ratios that DLSS uses for each quality level\n;  Note that enabling this section will disable the ForceDLAA setting above\nEnable = false\n\n; Ratios/multipliers applied to each axis of screen resolution\n;  Set to 1.0 to force this quality level to use full resolution (ie. DLAA)\n;  Values are limited to range 0.0 - 1.0\n;  Alternatively you can specify a resolution directly in the form \"WIDTHxHEIGHT\", eg. \"Quality = 1920x1080\"\nUltraPerformance = 0.33333334\nPerformance = 0.5\nBalanced = 0.58\nQuality = 0.66666667\n\n; UltraQuality: certain games may allow this level to be picked if uncommented (remove the \";\" at the start) and set to non-zero value\n;  Very few titles actually allow using this though, but a small few may show an option for it once enabled, giving you an extra DLSS level to choose from\n;UltraQuality = 0.77\n\n[DLSSPresets]\n; DLSS preset overrides for each quality level: set to Default to leave the preset set to whatever game/DLSS decided for it\n;  Or set to A / B / C / D / E / F to try forcing that preset instead.\n;  Presets were added in DLSS 3.1, these are essentially the different kinds of DLSS 2.x DLL versions, all merged into 3.1 as these presets\n;  For descriptions of each preset see https://www.reddit.com/r/nvidia/comments/10z2ra9/nvidia_publishes_dlss_super_resolution_sdk_31/j81f9te/\n;  (in case the presets here aren't being applied for you the OverrideAppId tweak in Compatibility section below might help)\n\nDLAA = Default\nUltraPerformance = Default\nPerformance = Default\nBalanced = Default\nQuality = Default\nUltraQuality = Default\n\n[Compatibility]\n; ResolutionOffset: offsets both resolution axes by this value when DLAA is being applied\n;  Some games might not function well with full-resolution DLAA for whatever reason\n;  Subtracting a tiny amount from the resolution first may help with them though\n;  This offset is only applied to DLAA modes (either from ForceDLAA, DLSSQualityLevels 1.00, or the game setting DLAA itself)\n;  Titles known to require this for DLAA to work:\n; - RE Engine titles (set to -1)\n; - Crysis 3 Remastered (set to -1)\nResolutionOffset = 0\n\n; DynamicResolutionOverride: if DLSS scales are customized, we'll also override the dynamic resolution min/max range that DLSS returns to the game\n;  Very few games actually make use of this dynamic resolution min/max, but the ones that do previously could ignore our custom resolution & use the dynamic res range DLSS would return instead.\n;  This just overrides the dynamic res to the same as the customized res\n;\n;  Recommend leaving this enabled unless game seems to have issues\nDynamicResolutionOverride = true\n\n; DynamicResolutionMinOffset: some games seem to check the returned dynamic res min/max and make sure they're different\n;  (eg. Assetto Corsa Competizione will forcibly disable DLSS if dynamic res min/max are equal to each other)\n;  This setting will just apply a small offset to the dynamic-res minimum that we return to the game\n;\n;  However, certain games like Forspoken might make use of dynamic res but don't actually require min/max to be different\n;  In those cases you could try setting this to 0, to make sure dynamic res uses the full DLSS scale value instead.\nDynamicResolutionMinOffset = -1\n\n; DisableIniMonitoring: if set to true, prevents DLSSTweaks from checking for updated INI during gameplay\n;  By default DLSSTweaks will ask Windows to be notified whenever the INI file is updated, and will then try applying any updated settings to the game during runtime\n;  Not every setting can be applied during gameplay though, most will require game to be relaunched, depends on the game which settings can be changed\n;  (DLSSPresets should work on almost every title though - you can use OverrideDlssHud to confirm)\n;\n;  In case game fails to launch with DLSSTweaks in place, try disabling the INI update code here\nDisableIniMonitoring = false\n\n; OverrideAppId: previously this was required to be set in order to override DLSS3.1 presets on certain games\n;  However in newer DLSSTweaks a different solution has been found, which can now let presets be overridden without needing any app ID changes\n;  That method could stop working on future titles/DLSS versions though\n;  So in case game doesn't seem to apply DLSSPresets section for you at all, you can try seeing if OverrideAppId can still help\n;  (in majority of cases this likely won't be needed however)\nOverrideAppId = false\n\n[DLSSTweaks]\n; BaseINI: if set, DLSSTweaks will try reading INI settings from the specified file path before processing any settings from this INI\n;  In effect this allows the use of a \"global configuration\" file, you can populate this central INI file with your desired settings, update all your game INI files to reference it, and any changes made to the central INI will then get applied to all your games\n;  (for best results it's recommended to comment/remove all settings from the game INI file except for BaseINI setting, then selectively add back settings you wish to override)\n;\n;  Notes:\n;  - ConfigTool likely won't work that well with game INIs which make use of BaseINI, but the tool should work fine on the actual BaseINI itself\n;  - INI monitoring during gameplay only monitors the main game INI, changes to BaseINI won't be detected, as a workaround you can make a small edit to the game INI for monitoring to notice & reload settings, which will then reload BaseINI too\n;BaseINI = C:\\DLSS\\DLSSTweaks.ini\n"
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}