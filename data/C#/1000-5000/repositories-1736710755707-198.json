{
  "metadata": {
    "timestamp": 1736710755707,
    "page": 198,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "wolfgarbe/SymSpell",
      "stars": 3185,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 10.0068359375,
          "content": "\n# Created by https://www.gitignore.io/api/osx,code,csharp,dotnetcore,visualstudio\n# Edit at https://www.gitignore.io/?templates=osx,code,csharp,dotnetcore,visualstudio\n\n### Code ###\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n\n### Csharp ###\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.rsuser\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Mono auto generated files\nmono_crash.*\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\n[Aa][Rr][Mm]/\n[Aa][Rr][Mm]64/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUnit\n*.VisualState.xml\nTestResult.xml\nnunit-*.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_h.h\n*.ilk\n*.meta\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*_wpftmp.csproj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/*\n!.axoCover/settings.json\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# NuGet Symbol Packages\n*.snupkg\n# The packages folder can be ignored because of Package Restore\n**/[Pp]ackages/*\n# except build/, which is used as an MSBuild target.\n!**/[Pp]ackages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/[Pp]ackages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n*.appxbundle\n*.appxupload\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!?*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk\n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n*- [Bb]ackup.rdl\n*- [Bb]ackup ([0-9]).rdl\n*- [Bb]ackup ([0-9][0-9]).rdl\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# CodeRush personal settings\n.cr/personal\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output\nASALocalRun/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder\n.mfractor/\n\n# Local History for Visual Studio\n.localhistory/\n\n# BeatPulse healthcheck temp database\nhealthchecksdb\n\n# Backup folder for Package Reference Convert tool in Visual Studio 2017\nMigrationBackup/\n\n### DotnetCore ###\n# .NET Core build folders\n/bin\n/obj\n\n# Common node modules locations\n/node_modules\n/wwwroot/node_modules\n\n\n### OSX ###\n# General\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n### VisualStudio ###\n\n# User-specific files\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n\n# Mono auto generated files\n\n# Build results\n\n# Visual Studio 2015/2017 cache/options directory\n# Uncomment if you have tasks that create the project's static files in wwwroot\n\n# Visual Studio 2017 auto generated files\n\n# MSTest test Results\n\n# NUnit\n\n# Build Results of an ATL Project\n\n# Benchmark Results\n\n# .NET Core\n\n# StyleCop\n\n# Files built by Visual Studio\n\n# Chutzpah Test files\n\n# Visual C++ cache files\n\n# Visual Studio profiler\n\n# Visual Studio Trace Files\n\n# TFS 2012 Local Workspace\n\n# Guidance Automation Toolkit\n\n# ReSharper is a .NET coding add-in\n\n# JustCode is a .NET coding add-in\n\n# TeamCity is a build add-in\n\n# DotCover is a Code Coverage Tool\n\n# AxoCover is a Code Coverage Tool\n\n# Visual Studio code coverage results\n\n# NCrunch\n\n# MightyMoose\n\n# Web workbench (sass)\n\n# Installshield output folder\n\n# DocProject is a documentation generator add-in\n\n# Click-Once directory\n\n# Publish Web Output\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\n\n# NuGet Packages\n# NuGet Symbol Packages\n# The packages folder can be ignored because of Package Restore\n# except build/, which is used as an MSBuild target.\n# Uncomment if necessary however generally it will be regenerated when needed\n# NuGet v3's project.json files produces more ignorable files\n\n# Microsoft Azure Build Output\n\n# Microsoft Azure Emulator\n\n# Windows Store app package directories and files\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n# but keep track of directories ending in .cache\n\n# Others\n\n# Including strong name files can present a security risk\n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n\n# RIA/Silverlight projects\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n\n# SQL Server files\n\n# Business Intelligence projects\n\n# Microsoft Fakes\n\n# GhostDoc plugin setting file\n\n# Node.js Tools for Visual Studio\n\n# Visual Studio 6 build log\n\n# Visual Studio 6 workspace options file\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n\n# Visual Studio LightSwitch build output\n\n# Paket dependency manager\n\n# FAKE - F# Make\n\n# CodeRush personal settings\n\n# Python Tools for Visual Studio (PTVS)\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Tabs Studio\n\n# Telerik's JustMock configuration file\n\n# BizTalk build output\n\n# OpenCover UI analysis results\n\n# Azure Stream Analytics local run output\n\n# MSBuild Binary and Structured Log\n\n# NVidia Nsight GPU debugger configuration file\n\n# MFractors (Xamarin productivity tool) working folder\n\n# Local History for Visual Studio\n\n# BeatPulse healthcheck temp database\n\n# Backup folder for Package Reference Convert tool in Visual Studio 2017\n\n# End of https://www.gitignore.io/api/osx,code,csharp,dotnetcore,visualstudio"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.4345703125,
          "content": "# YAML 1.2\n---\nabstract: \"Spelling correction & Fuzzy search: 1 million times faster through Symmetric Delete spelling correction algorithm\"\nauthors: \n  -\n    affiliation: \"SeekStorm.com\"\n    family-names: Garbe\n    given-names: Wolf\ncff-version: \"1.1.0\"\ndate-released: 2012-06-07\nlicense: MIT\nmessage: \"If you use this software, please cite it using these metadata.\"\nrepository-code: \"hhttps://github.com/wolfgarbe/SymSpell\"\ntitle: SymSpell\n..."
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 0.3564453125,
          "content": "<Project>\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.Net.Compilers.Toolset\" Version=\"3.3.1\">\n      <PrivateAssets>all</PrivateAssets>\n    </PackageReference>\n    <PackageReference Include=\"Microsoft.NETFramework.ReferenceAssemblies\" Version=\"1.0.0-preview.2\">\n      <PrivateAssets>all</PrivateAssets>\n    </PackageReference>\n    </ItemGroup>\n</Project>\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.041015625,
          "content": "MIT License\n\nCopyright (c) 2018 Wolf Garbe\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 34.4765625,
          "content": "SymSpell<br>\n[![NuGet version](https://badge.fury.io/nu/symspell.svg)](https://badge.fury.io/nu/symspell)\n[![MIT License](https://img.shields.io/github/license/wolfgarbe/symspell.svg)](https://github.com/wolfgarbe/SymSpell/blob/master/LICENSE)\n========\n\nSpelling correction & Fuzzy search: **1 million times faster** through Symmetric Delete spelling correction algorithm\n \nThe Symmetric Delete spelling correction algorithm reduces the complexity of edit candidate generation and dictionary lookup for a given Damerau-Levenshtein distance. It is six orders of magnitude faster ([than the standard approach with deletes + transposes + replaces + inserts](http://norvig.com/spell-correct.html)) and language independent.\n\nOpposite to other algorithms only deletes are required, no transposes + replaces + inserts.\nTransposes + replaces + inserts of the input term are transformed into deletes of the dictionary term.\nReplaces and inserts are expensive and language dependent: e.g. Chinese has 70,000 Unicode Han characters!\n\nThe speed comes from the inexpensive **delete-only edit candidate generation** and the **pre-calculation**.<br>\nAn average 5 letter word has about **3 million possible spelling errors** within a maximum edit distance of 3,<br>\nbut SymSpell needs to generate **only 25 deletes** to cover them all, both at pre-calculation and at lookup time. Magic!\n\nIf you like SymSpell, try [**SeekStorm**](https://github.com/SeekStorm/SeekStorm) - a sub-millisecond full-text search library & multi-tenancy server in Rust (Open Source).\n\n<br>\n\n```\nCopyright (c) 2025 Wolf Garbe\nVersion: 6.7.3\nAuthor: Wolf Garbe <wolf.garbe@seekstorm.com>\nMaintainer: Wolf Garbe <wolf.garbe@seekstorm.com>\nURL: https://github.com/wolfgarbe/symspell\nDescription: https://seekstorm.com/blog/1000x-spelling-correction/\n\nMIT License\n\nCopyright (c) 2025 Wolf Garbe\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated \ndocumentation files (the \"Software\"), to deal in the Software without restriction, including without limitation \nthe rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, \nand to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nhttps://opensource.org/licenses/MIT\n```\n\n---\n\n## Single word spelling correction\n\n**Lookup** provides a very fast spelling correction of single words.\n* A **Verbosity parameter** allows to control the number of returned results:<br>\nTop: Top suggestion with the highest term frequency of the suggestions of smallest edit distance found.<br>\nClosest: All suggestions of smallest edit distance found, suggestions ordered by term frequency.<br>\nAll: All suggestions within maxEditDistance, suggestions ordered by edit distance, then by term frequency.\n* The **Maximum edit distance parameter** controls up to which edit distance words from the dictionary should be treated as suggestions.\n* The required **Word frequency dictionary** can either be directly loaded from text files (**LoadDictionary**) or generated from a large text corpus (**CreateDictionary**).\n\n#### Applications\n\n* Spelling correction,\n* Query correction (10–15% of queries contain misspelled terms),\n* Chatbots,\n* OCR post-processing,\n* Automated proofreading.\n* Fuzzy search & approximate string matching\n\n#### Performance (single term)\n\n0.033 milliseconds/word (edit distance 2) and 0.180 milliseconds/word (edit distance 3) (single core on 2012 Macbook Pro)<br>\n\n![Benchmark](https://cdn-images-1.medium.com/max/800/1*1l_5pOYU3AhoijKfVD-Qag.png \"Benchmark\")\n<br><br>\n**1,870 times faster than [BK-tree](https://en.wikipedia.org/wiki/BK-tree)** (see [Benchmark 1](https://seekstorm.com/blog/symspell-vs-bk-tree/): dictionary size=500,000, maximum edit distance=3, query terms with random edit distance = 0...maximum edit distance, verbose=0)<br><br>\n**1 million times faster than [Norvig's algorithm](http://norvig.com/spell-correct.html)** (see [Benchmark 2](http://blog.faroo.com/2015/03/24/fast-approximate-string-matching-with-large-edit-distances/): dictionary size=29,157, maximum edit distance=3, query terms with fixed edit distance = maximum edit distance, verbose=0)<br>\n\n#### Blog Posts: Algorithm, Benchmarks, Applications\n[1000x Faster Spelling Correction algorithm](https://seekstorm.com/blog/1000x-spelling-correction/)<br>\n[Fast approximate string matching with large edit distances in Big Data](https://seekstorm.com/blog/fast-approximate-string-matching/)<br> \n[Very fast Data cleaning of product names, company names & street names](https://seekstorm.com/blog/very-data-cleaning-of-product-names-company-names-street-names/)<br>\n[Sub-millisecond compound aware automatic spelling correction](https://seekstorm.com/blog/sub-millisecond-compound-aware-automatic.spelling-correction/)<br>\n[SymSpell vs. BK-tree: 100x faster fuzzy string search & spell checking](https://seekstorm.com/blog/symspell-vs-bk-tree/)<br>\n[Fast Word Segmentation for noisy text](https://seekstorm.com/blog/fast-word-segmentation-noisy-text/)<br>\n[The Pruning Radix Trie — a Radix trie on steroids](https://seekstorm.com/blog/pruning-radix-trie/)<br>\n\n---\n\n## Compound aware multi-word spelling correction\n\n**LookupCompound** supports __compound__ aware __automatic__ spelling correction of __multi-word input__ strings. \n\n__1. Compound splitting & decompounding__\n\nLookup() assumes every input string as _single term_. LookupCompound also supports _compound splitting / decompounding_ with three cases:\n1. mistakenly __inserted space within a correct word__ led to two incorrect terms \n2. mistakenly __omitted space between two correct words__ led to one incorrect combined term\n3. __multiple input terms__ with/without spelling errors\n\nSplitting errors, concatenation errors, substitution errors, transposition errors, deletion errors and insertion errors can by mixed within the same word.\n\n__2. Automatic spelling correction__\n\n* Large document collections make manual correction infeasible and require unsupervised, fully-automatic spelling correction. \n* In conventional spelling correction of a single token, the user is presented with multiple spelling correction suggestions. <br>For automatic spelling correction of long multi-word text the algorithm itself has to make an educated choice.\n\n__Examples:__\n\n```diff\n- whereis th elove hehad dated forImuch of thepast who couqdn'tread in sixthgrade and ins pired him\n+ where is the love he had dated for much of the past who couldn't read in sixth grade and inspired him  (9 edits)\n\n- in te dhird qarter oflast jear he hadlearned ofca sekretplan\n+ in the third quarter of last year he had learned of a secret plan  (9 edits)\n\n- the bigjest playrs in te strogsommer film slatew ith plety of funn\n+ the biggest players in the strong summer film slate with plenty of fun  (9 edits)\n\n- Can yu readthis messa ge despite thehorible sppelingmsitakes\n+ can you read this message despite the horrible spelling mistakes  (9 edits)\n```\n#### Performance (compounds)\n\n0.2 milliseconds / word (edit distance 2)\n5000 words / second (single core on 2012 Macbook Pro)\n\n---\n\n## Word Segmentation of noisy text\n\n**WordSegmentation** divides a string into words by inserting missing spaces at appropriate positions.<br>\n* Misspelled words are corrected and do not prevent segmentation.<br>\n* Existing spaces are allowed and considered for optimum segmentation.<br>\n* SymSpell.WordSegmentation uses a [**Triangular Matrix approach**](https://seekstorm.com/blog/fast-word-segmentation-noisy-text/) instead of the conventional Dynamic Programming: It uses an array instead of a dictionary for memoization, loops instead of recursion and incrementally optimizes prefix strings instead of remainder strings.<br>\n* The Triangular Matrix approach is faster than the Dynamic Programming approach. It has a lower memory consumption, better scaling (constant O(1) memory consumption vs. linear O(n)) and is GC friendly.\n* While each string of length n can be segmented into **2^n−1** possible [compositions](https://en.wikipedia.org/wiki/Composition_(combinatorics)),<br> \n   SymSpell.WordSegmentation has a **linear runtime O(n)** to find the optimum composition.\n\n__Examples:__\n\n```diff\n- thequickbrownfoxjumpsoverthelazydog\n+ the quick brown fox jumps over the lazy dog\n\n- itwasabrightcolddayinaprilandtheclockswerestrikingthirteen\n+ it was a bright cold day in april and the clocks were striking thirteen\n\n- itwasthebestoftimesitwastheworstoftimesitwastheageofwisdomitwastheageoffoolishness\n+ it was the best of times it was the worst of times it was the age of wisdom it was the age of foolishness \n```\n\n__Applications:__\n\n* Word Segmentation for CJK languages for Indexing Spelling correction, Machine translation, Language understanding, Sentiment analysis\n* Normalizing English compound nouns for search & indexing (e.g. ice box = ice-box = icebox; pig sty = pig-sty = pigsty) \n* Word segmentation for compounds if both original word and split word parts should be indexed.\n* Correction of missing spaces caused by Typing errors.\n* Correction of Conversion errors: spaces between word may get lost e.g. when removing line breaks.\n* Correction of OCR errors: inferior quality of original documents or handwritten text may prevent that all spaces are recognized.\n* Correction of Transmission errors: during the transmission over noisy channels spaces can get lost or spelling errors introduced.\n* Keyword extraction from URL addresses, domain names, #hashtags, table column descriptions or programming variables written without spaces.\n* For password analysis, the extraction of terms from passwords can be required.\n* For Speech recognition, if spaces between words are not properly recognized in spoken language.\n* Automatic CamelCasing of programming variables.\n* Applications beyond Natural Language processing, e.g. segmenting DNA sequence into words\n\n__Performance:__\n\n4 milliseconds for segmenting an 185 char string into 53 words (single core on 2012 Macbook Pro)\n<br>\n\n---\n\n#### Usage SymSpell Demo\nsingle word + Enter:  Display spelling suggestions<br>\nEnter without input:  Terminate the program\n\n#### Usage SymSpellCompound Demo\nmultiple words + Enter: Display spelling suggestions<br>\nEnter without input: Terminate the program\n\n#### Usage Segmentation Demo\nstring without spaces + Enter: Display word segmented text<br>\nEnter without input: Terminate the program\n\n*Demo, DemoCompound and SegmentationDemo projects can be built with the free [Visual Studio Code](https://code.visualstudio.com/), which runs on Windows, MacOS and Linux.*\n\n#### Usage SymSpell Library\n```csharp\n//create object\nint initialCapacity = 82765;\nint maxEditDistanceDictionary = 2; //maximum edit distance per dictionary precalculation\nvar symSpell = new SymSpell(initialCapacity, maxEditDistanceDictionary);\n      \n//load dictionary\nstring baseDirectory = AppDomain.CurrentDomain.BaseDirectory;\nstring dictionaryPath= baseDirectory + \"../../../../SymSpell/frequency_dictionary_en_82_765.txt\";\nint termIndex = 0; //column of the term in the dictionary text file\nint countIndex = 1; //column of the term frequency in the dictionary text file\nif (!symSpell.LoadDictionary(dictionaryPath, termIndex, countIndex))\n{\n  Console.WriteLine(\"File not found!\");\n  //press any key to exit program\n  Console.ReadKey();\n  return;\n}\n\n//lookup suggestions for single-word input strings\nstring inputTerm=\"house\";\nint maxEditDistanceLookup = 1; //max edit distance per lookup (maxEditDistanceLookup<=maxEditDistanceDictionary)\nvar suggestionVerbosity = SymSpell.Verbosity.Closest; //Top, Closest, All\nvar suggestions = symSpell.Lookup(inputTerm, suggestionVerbosity, maxEditDistanceLookup);\n\n//display suggestions, edit distance and term frequency\nforeach (var suggestion in suggestions)\n{ \n  Console.WriteLine(suggestion.term +\" \"+ suggestion.distance.ToString() +\" \"+ suggestion.count.ToString(\"N0\"));\n}\n\n\n//load bigram dictionary\nstring dictionaryPath= baseDirectory + \"../../../../SymSpell/frequency_bigramdictionary_en_243_342.txt\";\nint termIndex = 0; //column of the term in the dictionary text file\nint countIndex = 2; //column of the term frequency in the dictionary text file\nif (!symSpell.LoadBigramDictionary(dictionaryPath, termIndex, countIndex))\n{\n  Console.WriteLine(\"File not found!\");\n  //press any key to exit program\n  Console.ReadKey();\n  return;\n}\n\n//lookup suggestions for multi-word input strings (supports compound splitting & merging)\ninputTerm=\"whereis th elove hehad dated forImuch of thepast who couqdn'tread in sixtgrade and ins pired him\";\nmaxEditDistanceLookup = 2; //max edit distance per lookup (per single word, not per whole input string)\nsuggestions = symSpell.LookupCompound(inputTerm, maxEditDistanceLookup);\n\n//display suggestions, edit distance and term frequency\nforeach (var suggestion in suggestions)\n{ \n  Console.WriteLine(suggestion.term +\" \"+ suggestion.distance.ToString() +\" \"+ suggestion.count.ToString(\"N0\"));\n}\n\n\n//word segmentation and correction for multi-word input strings with/without spaces\ninputTerm=\"thequickbrownfoxjumpsoverthelazydog\";\nmaxEditDistance = 0;\nsuggestion = symSpell.WordSegmentation(input);\n\n//display term and edit distance\nConsole.WriteLine(suggestion.correctedString + \" \" + suggestion.distanceSum.ToString(\"N0\"));\n\n\n//press any key to exit program\nConsole.ReadKey();\n```\n#### Three ways to add SymSpell to your project:\n1. Add **[SymSpell.cs](https://github.com/wolfgarbe/SymSpell/blob/master/SymSpell/SymSpell.cs), [EditDistance.cs](https://github.com/wolfgarbe/SymSpell/blob/master/SymSpell/EditDistance.cs) and [frequency_dictionary_en_82_765.txt](https://github.com/wolfgarbe/SymSpell/blob/master/SymSpell/frequency_dictionary_en_82_765.txt)** to your project. All three files are located in the [SymSpell folder](https://github.com/wolfgarbe/SymSpell/tree/master/SymSpell). Enabling the compiler option **\"Prefer 32-bit\"** will significantly **reduce the memory consumption** of the precalculated dictionary.\n2. Add **[SymSpell NuGet](https://www.nuget.org/packages/symspell)** to your **Net Framework** project: Visual Studio / Tools / NuGet Packager / Manage Nuget packages for solution / Select \"Browse tab\"/ Search for SymSpell / Select SymSpell / Check your project on the right hand windows / Click install button. The [frequency_dictionary_en_82_765.txt](https://github.com/wolfgarbe/SymSpell/blob/master/SymSpell/frequency_dictionary_en_82_765.txt) is **automatically installed**. \n3. Add **[SymSpell NuGet](https://www.nuget.org/packages/symspell)** to your **Net Core** project: Visual Studio / Tools / NuGet Packager / Manage Nuget packages for solution / Select \"Browse tab\"/ Search for SymSpell / Select SymSpell / Check your project on the right hand windows / Click install button. The [frequency_dictionary_en_82_765.txt](https://github.com/wolfgarbe/SymSpell/blob/master/SymSpell/frequency_dictionary_en_82_765.txt) must be **copied manually** to your project.\n\nSymSpell targets [.NET Standard v2.0](https://blogs.msdn.microsoft.com/dotnet/2016/09/26/introducing-net-standard/) and can be used  in:\n1. NET Framework (**Windows** Forms, WPF, ASP.NET), \n2. NET Core (UWP, ASP.NET Core, **Windows**, **OS X**, **Linux**),\n3. XAMARIN (**iOS**, **OS X**, **Android**) projects.\n\n*The SymSpell, Demo,  DemoCompound and Benchmark projects can be built with the free [Visual Studio Code](https://code.visualstudio.com/), which runs on Windows, MacOS and Linux.*\n\n---\n\n#### Frequency dictionary\nDictionary quality is paramount for correction quality. In order to achieve this two data sources were combined by intersection: Google Books Ngram data which provides representative word frequencies (but contains many entries with spelling errors) and SCOWL — Spell Checker Oriented Word Lists which ensures genuine English vocabulary (but contained no word frequencies required for ranking of suggestions within the same edit distance).\n\nThe [frequency_dictionary_en_82_765.txt](https://github.com/wolfgarbe/SymSpell/blob/master/SymSpell/frequency_dictionary_en_82_765.txt) was created by intersecting the two lists mentioned below. By reciprocally filtering only those words which appear in both lists are used. Additional filters were applied and the resulting list truncated to &#8776; 80,000 most frequent words.\n* [Google Books Ngram data](http://storage.googleapis.com/books/ngrams/books/datasetsv2.html)   [(License)](https://creativecommons.org/licenses/by/3.0/) : Provides representative word frequencies\n* [SCOWL - Spell Checker Oriented Word Lists](http://wordlist.aspell.net/)   [(License)](http://wordlist.aspell.net/scowl-readme/) : Ensures genuine English vocabulary    \n\n#### Dictionary file format\n* Plain text file in UTF-8 encoding.\n* Word and Word Frequency are separated by space or tab. Per default, the word is expected in the first column and the frequency in the second column. But with the termIndex and countIndex parameters in LoadDictionary() the position and order of the values can be changed and selected from a row with more than two values. This allows to augment the dictionary with additional information or to adapt to existing dictionaries without reformatting.\n* Every word-frequency-pair in a separate line. A line is defined as a sequence of characters followed by a line feed (\"\\n\"), a carriage return (\"\\r\"), or a carriage return immediately followed by a line feed (\"\\r\\n\").\n* Both dictionary terms and input term are expected to be in **lower case**.\n\nYou can build your own frequency dictionary for your language or your specialized technical domain.\nThe SymSpell spelling correction algorithm supports languages with non-latin characters, e.g Cyrillic, Chinese or [Georgian](https://github.com/irakli97/Frequency_Dictionary_GE_363_202).\n\n#### Frequency dictionaries in other languages\n\nSymSpell includes an [English frequency dictionary](https://github.com/wolfgarbe/SymSpell/blob/master/SymSpell/frequency_dictionary_en_82_765.txt) \n\nDictionaries for Chinese, English, French, German, Hebrew, Italian, Russian and Spanish are located here:<br>\n[SymSpell.FrequencyDictionary](SymSpell.FrequencyDictionary)  \n\nFrequency dictionaries in many other languages can be found here:<br>\n[FrequencyWords repository](https://github.com/hermitdave/FrequencyWords)<br>\n[Frequency dictionaries](https://github.com/dataiku/dss-plugin-nlp-preparation/tree/master/resource/dictionaries)<br>\n[Frequency dictionaries](https://github.com/LuminosoInsight/wordfreq/tree/master/wordfreq/data)\n\n---\n\n**C#** (original source code)<br>\nhttps://github.com/wolfgarbe/symspell\n\n**.NET** (NuGet package)<br>\nhttps://www.nuget.org/packages/symspell\n\n### Ports\n\nThe following third party ports or reimplementations to other programming languages have not been tested by myself whether they are an exact port, error free, provide identical results or are as fast as the original algorithm. \n\nMost ports target SymSpell **version 3.0**. But **version 6.1.** provides **much higher speed & lower memory consumption!**\n\n**WebAssembly**<br>\nhttps://github.com/justinwilaby/spellchecker-wasm<br>\n\n**WEB API (Docker)**<br>\nhttps://github.com/LeonErath/SymSpellAPI (Version 6.3)<br>\n\n**C++**<br>\nhttps://github.com/AtheS21/SymspellCPP (Version 6.5)<br>\nhttps://github.com/erhanbaris/SymSpellPlusPlus (Version 6.1)\n\n**Crystal**<br>\nhttps://github.com/chenkovsky/aha/blob/master/src/aha/sym_spell.cr\n\n**Go**<br>\nhttps://github.com/sajari/fuzzy<br>\nhttps://github.com/eskriett/spell\n\n**Haskell**<br>\nhttps://github.com/cbeav/symspell\n\n**Java**<br>\nhttps://github.com/MighTguY/customized-symspell (Version 6.6)<br>\nhttps://github.com/rxp90/jsymspell (Version 6.6)<br>\nhttps://github.com/Lundez/JavaSymSpell (Version 6.4)<br>\nhttps://github.com/rxp90/jsymspell<br>\nhttps://github.com/gpranav88/symspell<br>\nhttps://github.com/searchhub/preDict<br>\nhttps://github.com/jpsingarayar/SpellBlaze\n\n**Javascript**<br>\nhttps://github.com/MathieuLoutre/node-symspell (Version 6.6, needs Node.js)<br>\nhttps://github.com/itslenny/SymSpell.js<br>\nhttps://github.com/dongyuwei/SymSpell<br>\nhttps://github.com/IceCreamYou/SymSpell<br>\nhttps://github.com/Yomguithereal/mnemonist/blob/master/symspell.js\n\n**Julia**<br>\nhttps://github.com/Arkoniak/SymSpell.jl\n\n**Kotlin**<br>\nhttps://github.com/Wavesonics/SymSpellKt\n\n**Objective-C**<br>\nhttps://github.com/AmitBhavsarIphone/SymSpell (Version 6.3)\n\n**Python**<br>\nhttps://github.com/mammothb/symspellpy  (Version 6.7)<br>\nhttps://github.com/viig99/SymSpellCppPy  (Version 6.5)<br>\nhttps://github.com/zoho-labs/symspell (Python bindings of Rust version)<br>\nhttps://github.com/ne3x7/pysymspell/ (Version 6.1)<br>\nhttps://github.com/Ayyuriss/SymSpell<br>\nhttps://github.com/ppgmg/github_public/blob/master/spell/symspell_python.py<br>\nhttps://github.com/rcourivaud/symspellcompound<br>\nhttps://github.com/Esukhia/sympound-python<br>\nhttps://www.kaggle.com/yk1598/symspell-spell-corrector\n\n**Ruby**<br>\nhttps://github.com/PhilT/symspell\n\n**Rust**<br>\nhttps://github.com/reneklacan/symspell (Version 6.6, compiles to WebAssembly)<br>\nhttps://github.com/luketpeterson/fuzzy_rocks (persistent datastore backed by RocksDB)\n\n**Scala**<br>\nhttps://github.com/semkath/symspell\n\n**Swift**<br>\nhttps://github.com/gdetari/SymSpellSwift\n\n---\n\n### Citations\n\nContextual Multilingual Spellchecker for User Queries<br>\nSanat Sharma, Josep Valls-Vargas, Tracy Holloway King, Francois Guerin, Chirag Arora (Adobe)<br>\nhttps://arxiv.org/abs/2305.01082\n\nA context sensitive real-time Spell Checker with language adaptability<br>\nPrabhakar Gupta (Amazon)<br>\nhttps://arxiv.org/abs/1910.11242\n\nSpeakGer: A meta-data enriched speech corpus of German state and federal parliaments<br>\nKai-Robin Lange and Carsten Jentsch<br>\nhttps://arxiv.org/pdf/2410.17886\n\nAn Extended Sequence Tagging Vocabulary for Grammatical Error Correction<br>\nStuart Mesham, Christopher Bryant, Marek Rei, Zheng Yuan<br>\nhttps://arxiv.org/abs/2302.05913\n\nGerman Parliamentary Corpus (GERPARCOR)<br>\nGiuseppe Abrami, Mevlüt Bagci, Leon Hammerla, Alexander Mehler<br>\nhttps://arxiv.org/abs/2204.10422\n\niOCR: Informed Optical Character Recognition for Election Ballot Tallies<br>\nKenneth U. Oyibo, Jean D. Louis, Juan E. Gilbert<br>\nhttps://arxiv.org/abs/2208.00865\n\nAmazigh spell checker using Damerau-Levenshtein algorithm and N-gram<br>\nYouness Chaabi, Fadoua Ataa Allah<br>\nhttps://www.sciencedirect.com/science/article/pii/S1319157821001828\n\nSurvey of Query correction for Thai business-oriented information retrieval<br>\nPhongsathorn Kittiworapanya, Nuttapong Saelek, Anuruth Lertpiya, Tawunrat Chalothorn<br>\nhttps://ieeexplore.ieee.org/document/9376809\n\nSymSpell and LSTM based Spell- Checkers for Tamil<br>\nSelvakumar MuruganTamil Arasan BakthavatchalamTamil Arasan BakthavatchalamMalaikannan Sankarasubbu<br>\nhttps://www.researchgate.net/publication/349924975_SymSpell_and_LSTM_based_Spell-_Checkers_for_Tamil\n\nSymSpell4Burmese: Symmetric Delete Spelling Correction Algorithm (SymSpell) for Burmese Spelling Checking<br>\nEi Phyu Phyu Mon; Ye Kyaw Thu; Than Than Yu; Aye Wai Oo<br>\nhttps://ieeexplore.ieee.org/document/9678171\n\nSpell Check Indonesia menggunakan Norvig dan SymSpell<br>\nYasir Abdur Rohman<br>\nhttps://medium.com/@yasirabd/spell-check-indonesia-menggunakan-norvig-dan-symspell-4fa583d62c24\n\nAnalisis Perbandingan Metode Burkhard Keller Tree dan SymSpell dalam Spell Correction Bahasa Indonesia<br>\nMuhammad Hafizh Ferdiansyah, I Kadek Dwi Nuryana<br>\nhttps://ejournal.unesa.ac.id/index.php/jinacs/article/download/50989/41739\n\nImproving Document Retrieval with Spelling Correction for Weak and Fabricated Indonesian-Translated Hadith<br>\nMuhammad zaky ramadhanKemas M LhaksmanaKemas M Lhaksmana<br>\nhttps://www.researchgate.net/publication/342390145_Improving_Document_Retrieval_with_Spelling_Correction_for_Weak_and_Fabricated_Indonesian-Translated_Hadith\n\nSymspell을 이용한 한글 맞춤법 교정<br>\n김희규<br>\nhttps://heegyukim.medium.com/symspell%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%95%9C%EA%B8%80-%EB%A7%9E%EC%B6%A4%EB%B2%95-%EA%B5%90%EC%A0%95-3def9ca00805\n\nMending Fractured Texts. A heuristic procedure for correcting OCR data<br>\nJens Bjerring-Hansen, Ross Deans Kristensen-McLachla2, Philip Diderichsen and Dorte Haltrup Hansen<br>\nhttps://ceur-ws.org/Vol-3232/paper14.pdf\n\nTowards the Natural Language Processing as Spelling Correction for Offline Handwritten Text Recognition Systems<br>\nArthur Flor de Sousa Neto; Byron Leite Dantas Bezerra; and Alejandro Héctor Toselli<br>\nhttps://www.mdpi.com/2076-3417/10/21/7711\n\nWhen to Use OCR Post-correction for Named Entity Recognition?<br>\nVinh-Nam Huynh, Ahmed Hamdi, Antoine Doucet<br>\nhttps://hal.science/hal-03034484v1/\n\nAutomatic error Correction: Evaluating Performance of Spell Checker Tools<br>\nA. Tolegenova<br>\nhttps://journals.sdu.edu.kz/index.php/nts/article/view/690\n\nZHAW-CAI: Ensemble Method for Swiss German Speech to Standard German Text<br>\nMalgorzata Anna Ulasik, Manuela Hurlimann, Bogumila Dubel, Yves Kaufmann,<br>\nSilas Rudolf, Jan Deriu, Katsiaryna Mlynchyk, Hans-Peter Hutter, and Mark Cieliebak<br>\nhttps://ceur-ws.org/Vol-2957/sg_paper3.pdf\n\nCyrillic Word Error Program Based on Machine Learning<br>\nBattumur, K., Dulamragchaa, U., Enkhbat, S., Altanhuyag, L., & Tumurbaatar, P.<br>\nhttps://mongoliajol.info/index.php/JIMDT/article/view/2661\n\nFast Approximate String Search for Wikification<br>\nSzymon Olewniczak, Julian Szymanski<br>\nhttps://www.iccs-meeting.org/archive/iccs2021/papers/127440334.pdf\n\nRuMedSpellchecker: Correcting Spelling Errors for Natural Russian Language in Electronic Health Records Using Machine Learning Techniques<br>\nDmitrii Pogrebnoi, Anastasia Funkner, Sergey Kovalchuk<br>\nhttps://link.springer.com/chapter/10.1007/978-3-031-36024-4_16\n\nAn Extended Sequence Tagging Vocabulary for Grammatical Error Correction<br>\nStuart Mesham, Christopher Bryant, Marek Rei, Zheng Yuan<br>\nhttps://aclanthology.org/2023.findings-eacl.119.pdf\n\nLightning-fast adaptive immune receptor similarity search by symmetric deletion lookup<br>\nTouchchai Chotisorayuth, Andreas Tiffeau-Mayer<br>\nhttps://arxiv.org/html/2403.09010v1\n\nUnveiling Disguised Toxicity: A Novel Pre-processing Module for Enhanced Content Moderation<br>\nJohnny Chan, Yuming Li<br>\nhttps://www.sciencedirect.com/science/article/pii/S2215016124001225\n\n---\n\n### Upcoming changes\n\n1. Utilizing the [pigeonhole principle](https://en.wikipedia.org/wiki/Pigeonhole_principle) by partitioning both query and dictionary terms will result in 5x less memory consumption and 3x faster precalculation time. \n2. Option to preserve case (upper/lower case) of input term.\n3. Open source the code for creating custom frequency dictionaries in any language and size as intersection between Google Books Ngram data (Provides representative word frequencies) and SCOWL Spell Checker Oriented Word Lists (Ensures genuine English vocabulary).\n\n#### Changes in v6.7.3\n\n- TargetFrameworks changed from `netstandard2.0;net461;net47;netcoreapp3.0` to `netstandard2.0;net9.0`.\n- PackageReferences updated.\n- In SymSpell.Test all Assert.AreEqual changed to Assert.That\n- Incorporates PR #126 that fixes null reference exception in CommitStaged (#139).\n\n#### Changes in v6.7.2\n\n1. Exception fixed in WordSegmentation\n2. Platform changed from netcore 2.1 to netcore 3.0\n\n#### Changes in v6.7.1\n\n1. Framework target changed from net472 to net47<br>\n2. Framework target added netcoreapp3.0<br>\n3. More common contractions added to frequency_dictionary_en_82_765.txt<br>\n\n#### Changes in v6.7\n\n1. WordSegmentation did not work correctly if input string contained words in uppercase.<br>\n2. WordSegmentation now retains/preserves case.<br>\n3. WordSegmentation now keeps punctuation or apostrophe adjacent to previous word.<br>\n4. WordSegmentation now normalizes ligatures: \"scientiﬁc\" -> \"scientific\".<br>\n5. WordSegmentation now removes hyphens prior to word segmentation (as they might be caused by syllabification).<br>\n6. American English word forms added to dictionary in addition to British English e.g. favourable -> favorable.<br>\n\n#### Changes in v6.6\n\n1. IMPROVEMENT: LoadDictionary and LoadBigramDictionary now have an optional separator parameter, which defines the separator characters (e.g. '\\t') between term(s) and count. Default is defaultSeparatorChars=null for white space.<br>\nThis allows the dictionaries to contain space separated phrases.<br>\nIf in LoadBigramDictionary no separator parameter is stated or defaultSeparatorChars (whitespace) is stated as separator parameter, then take two term parts, otherwise take only one (which then itself is a space separated bigram).\n\n#### Changes in v6.5\n\n1. IMPROVEMENT: Better SymSpell.LookupCompound correction quality with existing single term dictionary by using Naive Bayes probability for selecting best word splitting.<br>\n`bycycle` -> `bicycle` (instead of  `by cycle` )<br>\n`inconvient` -> `inconvenient` (instead of `i convent`)<br>\n2. IMPROVEMENT: Even better SymSpell.LookupCompound correction quality, when using the optional bigram dictionary in order to use sentence level context information for selecting best spelling correction.<br>\n3. IMPROVEMENT: English bigram frequency dictionary included\n\n#### Changes in v6.4\n\n1.\tLoadDictioary(Stream, ...) and CreateDictionary(Stream) methods added (contibution by [ccady](https://github.com/ccady))<br>\n\tAllows to get dictionaries from network streams, memory streams, and resource streams in addition to previously supported files.\n\n#### Changes in v6.3\n\n1. IMPROVEMENT: WordSegmentation added:<br>\n   WordSegmentation divides a string into words by inserting missing spaces at appropriate positions.<br>\n   Misspelled words are corrected and do not prevent segmentation.<br>\n   Existing spaces are allowed and considered for optimum segmentation.<br>\n   SymSpell.WordSegmentation uses a [novel approach to word segmentation **without** recursion](https://seekstorm.com/blog/fast-word-segmentation-noisy-text/).<br>\n   While each string of length n can be segmented into **2^n−1** possible [compositions](https://en.wikipedia.org/wiki/Composition_(combinatorics)),<br> \n   SymSpell.WordSegmentation has a **linear runtime O(n)** to find the optimum composition.\n2. IMPROVEMENT: New CommandLine parameters:<br>\n   LookupType: lookup, lookupcompound, wordsegment.<br>\n   OutputStats: switch to show only corrected string or corrected string, edit distance, word frequency/probability.\n3. IMPROVEMENT: Lookup with maxEditDistance=0 faster.\n\n#### Changes in v6.2\n\n1. IMPROVEMENT: SymSpell.CommandLine project added. Allows pipes and redirects for Input & Output.\n   Dictionary/Copus file, MaxEditDistance, Verbosity, PrefixLength can be specified via Command Line. \n   No programming required.\n2. IMPROVEMENT: DamerauOSA edit distance updated, Levenshtein edit distance added (in SoftWx.Match by [Steve Hatchett](https://github.com/softwx))\n3. CHANGE: Other projects in the SymSpell solution now use references to SymSpell instead of links to the source files.\n\n#### Changes in v6.1\n\n1. IMPROVEMENT: [SymSpellCompound](https://github.com/wolfgarbe/SymSpellCompound) has been refactored from static to instantiated class and integrated into [SymSpell](https://github.com/wolfgarbe/SymSpell)\n   Therefore SymSpellCompound is now also based on the latest SymSpell version with all fixes and performance improvements\n2. IMPROVEMENT: symspell.demo.csproj, symspell.demoCompound.csproj, symspell.Benchmark.csproj have been recreated from scratch \n   and target now .Net Core instead of .Net Framework for improved compatibility with other platforms like MacOS and Linux\n3. CHANGE: The testdata directory has been moved from the demo folder into the benchmark folder\n4. CHANGE: License changed from LGPL 3.0 to the more permissive MIT license to allow frictionless commercial usage.\n\n#### Changes in v6.0\n\n1. IMPROVEMENT: SymSpell internal dictionary has been refactored by [Steve Hatchett](https://github.com/softwx).<br>\n   2x faster dictionary precalculation and 2x lower memory consumption.\n\n#### Changes in v5.1\n\n1. IMPROVEMENT: SymSpell has been refactored from static to instantiated class by [Steve Hatchett](https://github.com/softwx).\n2. IMPROVEMENT: Added benchmarking project. \n3. IMPROVEMENT: Added unit test project.\n4. IMPROVEMENT:\tDifferent maxEditDistance for dictionary precalculation and for Lookup. \n5. CHANGE: Removed language feature (use separate SymSpell instances instead).\n6. CHANGE: Verbosity parameter changed from Int to Enum\n7. FIX: Incomplete lookup results, if maxEditDistance=1 AND input.Length>prefixLength.\n8. FIX: count overflow protection fixed.\n\n#### Changes in v5.0\n1. FIX: Suggestions were not always complete for input.Length <= editDistanceMax.\n2. FIX: Suggestions were not always complete/best for verbose < 2.\n3. IMPROVEMENT: Prefix indexing implemented: more than 90% memory reduction, depending on prefix length and edit distance.\n   The discriminatory power of additional chars is decreasing with word length. \n   By restricting the delete candidate generation to the prefix, we can save space, without sacrificing filter efficiency too much. \n   Longer prefix length means higher search speed at the cost of higher index size.\n4. IMPROVEMENT: Algorithm for DamerauLevenshteinDistance() changed for a faster one.\n5. ParseWords() without LINQ\n6. CreateDictionaryEntry simplified, AddLowestDistance() removed.\n7. Lookup() improved.\n8. Benchmark() added: Lookup of 1000 terms with random spelling errors.\n\n#### Changes in v4.1\n1. symspell.csproj Generates a [SymSpell NuGet package](https://www.nuget.org/packages/symspell) (which can be added to your project)\n2. symspelldemo.csproj Shows how SymSpell can be used in your project (by using symspell.cs directly or by adding the [SymSpell NuGet package](https://www.nuget.org/packages/symspell) )\n\n#### Changes in v4.0\n1. Fix: previously not always all suggestions within edit distance (verbose=1) or the best suggestion (verbose=0) were returned : e.g. \"elove\" did not return \"love\"\n2. Regex will not anymore split words at apostrophes\n3. Dictionary<string, object> dictionary   changed to   Dictionary<string, Int32> dictionary\n4. LoadDictionary() added to load a frequency dictionary. CreateDictionary remains and can be used alternatively to create a dictionary from a large text corpus.\n5. English word frequency dictionary added (wordfrequency_en.txt). Dictionary quality is paramount for correction quality. In order to achieve this two data sources were combined by intersection:\n   Google Books Ngram data which provides representative word frequencies (but contains many entries with spelling errors) and SCOWL — Spell Checker Oriented Word Lists which ensures genuine English vocabulary (but contained no word frequencies required for ranking of suggestions within the same edit distance).\n6. dictionaryItem.count was changed from Int32 to Int64 for compatibility with dictionaries derived from Google Ngram data.\n\n---\n\n**SymSpell** is contributed by [**SeekStorm** - the high performance Search as a Service & search API](https://seekstorm.com)\n"
        },
        {
          "name": "RunThisFirst_dotnetrestore.bat",
          "type": "blob",
          "size": 0.1328125,
          "content": "REM execute this .bat-file or type \"dotnet restore\" in the terminal window of Visual Studio Code before first build\ndotnet restore\npause"
        },
        {
          "name": "SymSpell.Benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "SymSpell.CommandLine",
          "type": "tree",
          "content": null
        },
        {
          "name": "SymSpell.CompoundDemo",
          "type": "tree",
          "content": null
        },
        {
          "name": "SymSpell.Demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "SymSpell.FrequencyDictionary",
          "type": "tree",
          "content": null
        },
        {
          "name": "SymSpell.SegmentationDemo",
          "type": "tree",
          "content": null
        },
        {
          "name": "SymSpell.Test",
          "type": "tree",
          "content": null
        },
        {
          "name": "SymSpell.sln",
          "type": "blob",
          "size": 4.42578125,
          "content": "Microsoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio 15\r\nVisualStudioVersion = 15.0.27130.2027\r\nMinimumVisualStudioVersion = 15.0.26124.0\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SymSpell.Demo\", \"SymSpell.Demo\\SymSpell.Demo.csproj\", \"{06186930-69C1-4E8F-87BC-97439F08AD6D}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SymSpell.CompoundDemo\", \"SymSpell.CompoundDemo\\SymSpell.CompoundDemo.csproj\", \"{1B5E6BB3-B453-455B-B61C-AFD8A244B274}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SymSpell.SegmentationDemo\", \"SymSpell.SegmentationDemo\\SymSpell.SegmentationDemo.csproj\", \"{9ACB3CBD-2B6B-4F12-ADBA-1CFBC7B56C91}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SymSpell\", \"SymSpell\\SymSpell.csproj\", \"{E3DBEA24-5CBC-46B3-8931-9505145C9809}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SymSpell.Test\", \"SymSpell.Test\\SymSpell.Test.csproj\", \"{8C183129-D6FF-49E3-AC91-0ABDB378449A}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SymSpell.Benchmark\", \"SymSpell.Benchmark\\SymSpell.Benchmark.csproj\", \"{E84E8BF9-0032-4227-89FD-AB9D76F917FD}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SymSpell.CommandLine\", \"SymSpell.CommandLine\\SymSpell.CommandLine.csproj\", \"{9C78B67B-6782-4F28-B5F7-14C94E2CE017}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"miscs\", \"miscs\", \"{B96EF85F-BE30-4AA6-A7A4-50F4725E8D7A}\"\r\n\tProjectSection(SolutionItems) = preProject\r\n\t\t.gitignore = .gitignore\r\n\t\tappveyor.yml = appveyor.yml\r\n\t\tLICENSE = LICENSE\r\n\t\tREADME.md = README.md\r\n\t\tRunThisFirst_dotnetrestore.bat = RunThisFirst_dotnetrestore.bat\r\n\tEndProjectSection\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{06186930-69C1-4E8F-87BC-97439F08AD6D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{06186930-69C1-4E8F-87BC-97439F08AD6D}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{06186930-69C1-4E8F-87BC-97439F08AD6D}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{06186930-69C1-4E8F-87BC-97439F08AD6D}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{1B5E6BB3-B453-455B-B61C-AFD8A244B274}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{1B5E6BB3-B453-455B-B61C-AFD8A244B274}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{1B5E6BB3-B453-455B-B61C-AFD8A244B274}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{1B5E6BB3-B453-455B-B61C-AFD8A244B274}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{9ACB3CBD-2B6B-4F12-ADBA-1CFBC7B56C91}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{9ACB3CBD-2B6B-4F12-ADBA-1CFBC7B56C91}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{9ACB3CBD-2B6B-4F12-ADBA-1CFBC7B56C91}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{9ACB3CBD-2B6B-4F12-ADBA-1CFBC7B56C91}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{E3DBEA24-5CBC-46B3-8931-9505145C9809}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{E3DBEA24-5CBC-46B3-8931-9505145C9809}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{E3DBEA24-5CBC-46B3-8931-9505145C9809}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{E3DBEA24-5CBC-46B3-8931-9505145C9809}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{8C183129-D6FF-49E3-AC91-0ABDB378449A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{8C183129-D6FF-49E3-AC91-0ABDB378449A}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{8C183129-D6FF-49E3-AC91-0ABDB378449A}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{8C183129-D6FF-49E3-AC91-0ABDB378449A}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{E84E8BF9-0032-4227-89FD-AB9D76F917FD}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{E84E8BF9-0032-4227-89FD-AB9D76F917FD}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{E84E8BF9-0032-4227-89FD-AB9D76F917FD}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{E84E8BF9-0032-4227-89FD-AB9D76F917FD}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{9C78B67B-6782-4F28-B5F7-14C94E2CE017}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{9C78B67B-6782-4F28-B5F7-14C94E2CE017}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{9C78B67B-6782-4F28-B5F7-14C94E2CE017}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{9C78B67B-6782-4F28-B5F7-14C94E2CE017}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {AF21179C-E9C6-4938-A691-6D913E04C903}\r\n\tEndGlobalSection\r\nEndGlobal\r\n"
        },
        {
          "name": "SymSpell",
          "type": "tree",
          "content": null
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.5751953125,
          "content": "version: 6.3.{build}\nimage:\n  - Ubuntu\n  - Visual Studio 2019\nconfiguration: Release\nbuild_script:\n  - dotnet build -c Release\nmatrix:\n  fast_finish: true\nfor:\n  - matrix:\n      only:\n        - image: Visual Studio 2019\n    after_test:\n      - choco install opencover.portable\n      - choco install codecov\n      - OpenCover.Console.exe -register:user -target:\"C:\\Program Files\\dotnet\\dotnet.exe\" -targetargs:\"test --framework net461 --verbosity q\"\n      - codecov -f \"results.xml\"\n  - matrix:\n      only:\n        - image: Ubuntu\n    test_script:\n      - dotnet test -c Release --no-build\n"
        }
      ]
    }
  ]
}