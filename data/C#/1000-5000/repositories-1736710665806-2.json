{
  "metadata": {
    "timestamp": 1736710665806,
    "page": 2,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Unity-Technologies/FPSSample",
      "stars": 4922,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.095703125,
          "content": "*    text=auto\n# Text files\n*.cs diff=csharp text\n*.txt text\n*.mat text\n*.shader text\n*.meta text\n*.md5 text\n*.compute text\n*.md text\n*.prefab text\n*.mixer text\n*.ShaderGraph text\n*.anim text\n*.asmdef text\n*.json text\n*.overrideController text\n*.cginc text\n*.hlsl text\n*.giparams text\n*.controller text\n*.mask text\n*.playable text\nProjectSettings/*.asset text\n# Binaries\n**/Assets/**/*.png filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.tif filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.TIF filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.tiff filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.tga filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.fbx filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.FBX filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.ttf filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.dll filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.bundle filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.so filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.zip filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.exr filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.hdr filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.ma filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.mp3 filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.ogg filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.obj filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.OBJ filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.TGA filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.mdb filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.pdf filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.asset filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.bytes filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.aif filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.bmp filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.pdt filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.psd filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.sbsar filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.unity filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.entities filter=lfs diff=lfs merge=lfs -text\n**/Assets/**/*.wav filter=lfs diff=lfs merge=lfs -text\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.17578125,
          "content": "/[Ll]ibrary/\n/[Tt]emp/\n/[Oo]bj/\n/[Bb]uild/\n/[Bb]uilds/\n/[Aa]uto[Bb]uild/\n\n.vscode/\n.vs/\n\n*.csproj\n*.sln\n*.suo\n*.tmp\n*.userprefs\n*.app\n.idea/\n*.VC.*\n.DS_Store\n*~\n*.swp\n\n*.log\n*.pyc\n"
        },
        {
          "name": "Assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 9.8271484375,
          "content": "# Changelog\n\nThis file contains a summary of the changes that went into each release.\n\n## [0.3.1] - 2019-03-11\n\n- Fixed changelog not being properly updated (missing entries under 0.3.0 heading)\n- Updated to Unity 2018.3.8f1\n- Updated to latest Matchmaker example code\n\n## [0.3.0] - 2019-02-28\n\n- Updated HDRP to version 4.6\n- `net.stats 4` now show breakdown of incoming update packets\n- Updated to Unity 2018.3f2\n- Fix for too agressive framenting of network packets (would fragment before packet was full)\n- Improved compression of Schemas (sent out the clients the first time a new entity type is spawned)\n- Fixed network tests that were broken at last release\n- Added `server.disconnecttimeout` to allow tuning disconnect time\n- New type of headless client, \"thinclient\", to enable stresstesting of server. Start e.g. using `-batchmode -nographics +thinclient +debugmove 1 +connect localhost +thinclient.requested 16` to get 16 client connections.\n- Changed `client.updatesendrate` (number of updates from server per second) to `client.updateinterval` (time in simticks between updates from server). Old default was 20 updates/sec and new default is 3; with tickrate of 60 default is thus unchanged.\n- The oddly named `owner` to `server` in ServerConnection\n- Tweaks to Linux build steps to align with needs of Multiplay (naming etc.)\n- Game now looks for `-port` and `-query_port` for port numbers for game resp server query port.\n- Lots of optimizations to delta compression and snapshot generation on server\n- Redid all the old particles in with cool new Visual Effect Graph\n- Fix for crashes in netcode when client had very long stalls\n- Converted all of the UI to use Text Mesh Pro\n- Server Query Protocol now defaults to the port offset (+10) used by Multiplay\n- Fix and from (thanks: carlself) removing hang when joining an 'old' server\n- Fix for some elements of menu sometimes becoming unresponsive\n- UNITY_DISABLE_AUTOMATIC_SYSTEM_BOOTSTRAP no longer set in project settings. This means ECS systems automatically starts and runs in edit mode (Unless [DisableAutoCreation] attribute is set, which it is for most of our game systems)\n- HitCollision no longer uses Unity collision system for queries against moving colliders. For lag compensation server needs to do queries using different historical data and moving Unity physics colliders multiple times per frame is very inefficient. Now queries are handled using custom collision primitives and burst jobs. The structure of the collider and history data is still WIP.\n- Unified how ECS components are serialized. Serialized components should now implement either IReplicatedComponent, IPredictedComponent or IInterpolatedComponent and will automatically be serialized appropriately (if attached to entity with replicatedentity component). IMPORTANT: It is currently also required to define a static methods _CreateSerializerFactory_ that returns a serializer factory for the component type. This is something we are working on getting rid of.\n- Removed support for replicated monobehavior. All serialization is now performed by ECS component.\n- Config var debugmove 2  now also makes character shoot secondary weapon\n- UserCommand buttons now uses single int property together with enum to defined pressed buttons. \n- Removed sprint button from UserCommand. This is now handled by button Ability1.\n- Removed DebugPrimitive module from project. Not used and needed cleanup.\n- Added VFXSystem that manages VFX assets. Currently has interface for starting spatial and hitscan effects. \n- SpatialEffect and HitscanEffect now uses VFX system. Pools of effect prefabs are no longer created as effects can be triggered without gameobject instantiation (Yay!)\n- SpatialEffect and HitscanEffect registries removed.\n- Character properties that should be replicated to all clients have been moved to to new ECS component CharacterRepAll\n- Replicated MonoBehavior components converted to ECS components. Including GameEntityType, ReplicatedEntity, RagdollState, SpectatorCam, DamageHistory, HealthState, UserCommand, HitCollisionOwner , TeleporterPresentation, Moveable.\n- GameMode, PlayerState and CapturePoint are now replicated through an ECS component (they need to stay MonoBehavior as they contain strings properties and we don’t have good solution for storing strings on data components atm)\n- All abilities now have a request phase that is executed before movement update. This allows for multiple different movement abilities (before Ability_Movement was always active)\n- Renamed DefaultBehaviorController to AbilityCollection. AbilityCollection now has a general way to handle all abilities (before there where hardcoded handling of e.g. movement and death). All abilities are registered in one list and what abilities are active are determined by their requests (acquired in the request phase) and rules for what other abilities an ability can run together with and what it can interrupt (This is setup on AbilityCollection) \n- Setup of buttons that should trigger an ability is now setup on each individual ability scriptable object.\n- Item registry removed (Items are not currently being replicated - they will probably be when weapon switching is implemented. All abilities are owned and replicated by AbilityCollection)\n- Added new module called Presentation. This is responsible for creating and attaching presentation geometry and logic to replicated entities. Entities can have different presentation depending on platform (e.g. Server, Client) and other properties. Only grenades use this atm. \n- Grenades are now replicated as pure ECS entity. Client presentation handled by Presentation module.\n- Fixed error spam from BuildWindow after deleting scene. Build window now regenerates level list when it finds invalid level info.\n- Registries are now automatically generated before bundled are build (Manual generation can be triggered from _FPS Sample->Registries->Prepare Registries_). Manual fix-up of registries no longer needed after deleting registered objects.\n- ReplicatedEntityFactories are now stored in bundles. The goal is to generalize creation of entities (from prefabs or ReplicatedEntityFactory). Note: ReplicatedEntityFactory is currently used to create pure entities, but a prefab like workflow might be used in the future.   \n- WeakAssetReference are now blitable (struct and guid saved as ints) and can be stored on pure ECS components.\n\n\n## [0.2.0] - 2018-11-29\n- Removed “Update Registries” button from Project Tools. Prefabs and scriptable objects that should be referenced by a registry now each have custom inspector that is used to register them.\n- Removed support for client and server specific versions of the same replicated prefab. \n- Characters now all use the same replicated character prefab (character.prefab). Different non-replicated presentation entities (with CharPresentation component) are created on server and client depending on hero type and view mode (1P or 3P). Characters require at least one CharPresentation that is used to update the animation state. Item presentation (skeleton, mesh and effects) are also setup as character presentation.\n- Character behaviours (or abilities - naming is quite a mess atm) are now instantiated as a separate replicated entity (DefaultCharBehaviourController). This creates various sub behaviors, but all replication is handled by DefaultCharBehaviourController.\n- Items are now created as replicated entities. They only contains two behaviours that are attached (in a currently hacky way) to the characters DefaultCharBehaviourController.\n- All character behaviour data are now IComponentData attached to “pure” ECS entities.\n- ReplicatedEntity property predictingPlayerId is now replicated. This is used to define what client should predict a given replicated entity. Clients add ServerEntity component to replicated entities it receives where predictingPlayerId is its on playerid (before this was done by client using controlled entity reference)\n- Various editor tools have been moved to separate tools folder\n- Updated Entities package to 0.0.12-preview.18 and package is no longer internalized.\n- Melee can now be triggered from sprint\n- Added simple emote framework. Emotes can be triggered by buttons J and K. Still work in progress\n- Removed all the old UNet stuff\n- Made `server.maxclients` actually work.\n- Added a serverlist to the main menu. List uses Unity Server Query Protocol (USQP) to check servers for game mode, number of players etc.\n- Switched to Unity2018.3b12 allowing enabling late sync for a good speedup on some configs.\n- Added GDRP compliance button (only works if built with a valid project id)\n- Fixed bugs where a failed join would leave client in bad state (unable to connect again)\n- Fix for `disconnect` console command not working. Added leave game option to ingame menu.\n- Some efforts to make movement more calm in 3P.\n- 3P movement: Re-works squash node, especially on direction change\n- 3P movement: Softens transition speeds and adds central animation in move blend space\n- 3P movement: Adds delay to to animation state (vs. game state) when transitioning from loco to standing\n- 3P movement: Turns down the characters acceleration (capsule)\n- FPS Projection of weapons is now done in a shader graph shader.\n\n## [0.1.1] - 2018-10-22\n- Fix for headless build not running on some machines (Mominon)\n- Changed boot behaviour. Now always read boot.cfg (previously named game.cfg) unless -noboot passed.\n- Added documentation about small tools in editor\n- Fix for exec command giving scary sounding warnings\n- Fix for project using Perforce by default\n- Tweak to animation for slightly smoother 3rd person\n- Fixes to SourceCode doc (Badger0101)\n- Changed Tick error message to just be info\n- Type fixes (jfmc)\n- Updated matchmaker code \n- Added information about contribution\n- Improved documentation about animation\n- Fix for linux version of headless server not working with redict of in-/output\n\n## [0.1] - 2018-10-22\n- First public release, Unite L.A. 2018\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.82421875,
          "content": "# Contributing\n\n## If you are interested in contributing, here are some ground rules:\n\nAs the projects matures this will change, but currently it is like this:\n\n* We are not ready to take new features or bigger changes so don't make big PRs yet. Bring up your thoughts in the forum.\n* We are happy to get fixes to bugs and improvements to the out-of-box experience of the project.\n\n## All contributions are subject to the [Unity Contribution Agreement(UCA)](https://unity3d.com/legal/licenses/Unity_Contribution_Agreement)\nBy making a pull request, you are confirming agreement to the terms and conditions of the UCA, including that your Contributions are your original creation and that you have complete right and authority to make your Contributions.\n\n## Once you have a change ready following these ground rules. Simply make a pull request\n"
        },
        {
          "name": "Documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 0.44921875,
          "content": "Copyright (c) 2018 Unity Technologies ApS\n\nLicensed under the Unity Companion License for Unity-dependent projects--see [Unity Companion License](http://www.unity3d.com/legal/licenses/Unity_Companion_License). \n\nUnless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
        },
        {
          "name": "Packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "ProjectSettings",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.5400390625,
          "content": "![](Documentation/Images/Banner.png)\n\n# FPS Sample\n\n**Update about the state of the project:**\nThis project is based on Unity 2018.3 and no longer being actively maintained.\nFeel free to continue to use it as a learning resource or simply for\ninspiration. As always, you should upgrade to latest version of Unity\nand packages if you intend to start a project.\n\nThanks for checking out this sample!\n\nThis is a fully functional, first person multiplayer shooter game made in\nUnity and with full source and assets. It was developed by a small\nteam from Unity Technologies. Our goals are to test and showcase new\nfeatures in Unity and to be of use for teams who can bootstrap on top of\nthis, extract useful bits and tools or simply learn from and get inspired by\nwhat is in the project.\n\nVisit our [landing page](https://unity.com/fps-sample) for more high\nlevel information about the project. Or reach out [in the forum](https://forum.unity.com/forums/fps-sample-game.184).\n\nThe project is using a number of new technologies: We use the new [HD Render\nPipeline](https://github.com/Unity-Technologies/ScriptableRenderPipeline), meaning \nall content has been authored for HDRP. We are also using the new\n[network transport layer](https://github.com/Unity-Technologies/multiplayer) as well as the [Entity-Component System](https://unity3d.com/unity/features/job-system-ECS). \nIn the case of ECS, we have primarily adopted the \"ECS-pattern\" and use it in\nhybrid mode with a lot of regular components. As more and more features of\nUnity become available in ECS-aware versions, we will migrate to them.\n\n## Status and prerequisites\n\nCurrent status at a glance:\n```\nUnity version: 2018.3.8f1\nPlatforms    : Windows (client and server) and Linux (server only)\n```\n\n## Getting the project\n\nTo get the project folder you need to clone the project.\nNote, that \n\n> __IMPORTANT__: \n> This project uses Git Large Files Support (LFS). Downloading a zip file using the green button on Github\n> **will not work**. You must clone the project with a version of git that has LFS.\n> You can download Git LFS here: https://git-lfs.github.com/.\n\nThe project size is about 18GB (size of Assets folder). Your cloned repository\nwill be almost double of that due to git state. If it is much smaller,\nyou most likely did not have LFS when you cloned.\n\n## Getting the right version of Unity\n\nOnce you have cloned the repository, you should install\nthe version of Unity that is listed above in the prerequisites section. Make\nsure you include windows standalone support in your installation (and Linux support\nif you want to build the Linux headless server).\n\n## Opening the project for the first time\n\nThe following guide should take you to the point where\nyou can hit play in the editor and run around the levels and also build a\nstandalone version of the game and use it to spin up a server and connect a\nfew clients to it.\n\nThe first time you open the project you need patience! It takes a while\nto import all the assets.\n\n> __NOTE__: Due to a bug in Unity 2018.3, you have to take the following step right after the initial import:\n> 1 Search for `Firstperson_Projection` in the Project search field. Select the 4 shaders, right click and reimport them.\n> 2 If you have script compile errors related to entities, you need to remove and re-install the entities package.\n>\n> One day soon we will remove this note and there will be cake.\n\nOnce the editor is ready, open the _Project Tools Window_ by\nnavigating to ___FPS Sample > Windows > Project tools___.\n\nIt should look like this:\n\n![](Documentation/Images/ProjectTools.png)\n\nKeep this window docked as you will use it a lot. From here you can open the\nlevels, build assetbundles and build standalone players. Because this is a\nmultiplayer game you will need to work with standalone players a lot.\n\n### Trying out preview mode\n\nFrom the Project Tools window click __Open__ next to Level_00. Our levels are\nsplit into multiple scenes but using these buttons will ensure you open all the scenes\nthat make up a level.\n\nOnce opened, try entering playmode in the editor. You should now\nbe able to run around in the level. This is what we call 'preview mode'. Here\nyou can move around and test your level, player traversal and weapons.\n\n### Building bundles and standalone\n\nLeave playmode again and in the Project Tools window, verify that\nit says \"Building for: StandaloneWindows64...\" under the Game headline.\nIf it does not, change your platform in the usual way, using File > Build\nsettings window.\n\nNow, in the Project Tools window in the bundles section, press __All \\[force\\]__.\n\nThis will build the levels and other assets into assetbundles. The first time\naround this will take a significant amount of time as all shaders have to be\ncompiled.\n\nOnce you have built the bundles, hit __Build game__ in the game section.\nThis builds the standalone player. Again, first time will be slow.\n\n> __NOTE__: Due to a limitation in Unity 2018.3, you have to look out for errors like this `Maximum number (256) of shader keywords exceeded, keyword <KEYWORD_NAME> will be ignored.` and similar. If you get these, you can close and open Unity and then try and build again. The errors are relatively harmless but can lead to graphical artifacts as some shaders will have wrong keywords.\n\n### Using the quick start launcher\n\nWhen this is done, locate the \"Quick start\" section at the bottom of the\nProject Tools window. Fill out the settings like this:\n\n> Mode: __Multiplayer__\\\n> Level: __Level_00__\\\n> Clients: __1__\\\n> Headless: __Checked__\\\n> Use editor: __Unused__\n\nNow hit the green __Start__ button. This should launch two processes: one is\na standalone, headless server, the other is a client that will attempt to\nconnect to the server.\n\nCongratulations! If you made it this far you should celebrate a bit!\n\n## Development of FPS Sample, Contributions etc.\n\nAs of today, internally development of the project happens on Perforce. We\npush versions of the project to github from there. As we do that we will update\nthe [CHANGELOG](CHANGELOG.md) with highlights but the full history is not\ncarried over.\n\nFor practical reasons we are not able to take larger contributions\njust now. But bugfixes are very welcome! Read the guidelines for\ncontributing in [CONTRIBUTING](CONTRIBUTING.md).\n\n## More information\n\nCheck out the [Documentation](Documentation/) folder for more information. In particular, the [Getting Started Guide](Documentation/GettingStarted.md) is a good place to, well, start.\n\n## License\n\nOur intention is that you can use everything in this project as a starting\npoint or as bits and pieces in your own Unity games. For the legal words, see\n[LICENSE.md](LICENSE.md)."
        }
      ]
    }
  ]
}