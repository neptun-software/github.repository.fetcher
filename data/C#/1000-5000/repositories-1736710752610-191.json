{
  "metadata": {
    "timestamp": 1736710752610,
    "page": 191,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "libgit2/libgit2sharp",
      "stars": 3241,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3798828125,
          "content": "; Check http://editorconfig.org/ for more informations\n; Top-most EditorConfig file\nroot = true\n\n; 4-column space indentation\n[*]\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n; Not change VS generated files\n[*.{sln,csproj}]\ntrim_trailing_whitespace = false\ninsert_final_newline = false\n\n[*.{props,targets,csproj,config}]\nindent_size = 2"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1123046875,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# Custom for Visual Studio\n*.cs     diff=csharp\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.41015625,
          "content": "\n#ignore thumbnails created by windows\nThumbs.db\n#Ignore files build by Visual Studio\n*.obj\n*.exe\n*.pdb\n*.user\n*.aps\n*.pch\n*.vspscc\n*_i.c\n*_p.c\n*.ncb\n*.suo\n.vs/\n*.sln.ide/\n*.tlb\n*.tlh\n*.bak\n*.cache\n*.ilk\n*.log\n[Bb]in\n[Dd]ebug*/\n*.lib\n*.sbr\nobj/\n[Rr]elease*/\n_ReSharper*/\n*.ReSharper\n*.ReSharper.user\n[Tt]est[Rr]esult*\n[bB]uild/\n*.pidb\n*.userprefs\n*.swp\n*.DotSettings\n\n_NCrunch_LibGit2Sharp/\nartifacts/\nworktree.playlist\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.4140625,
          "content": "Keith Dahlby <dahlbyk@gmail.com> <kdahlby@jpcycles.com>\nJameson Miller <jamill@microsoft.com> <jameson.miller@live.com>\nBen Straub <bs@github.com> <bstraub@github.com>\nSaaman <romain.magny@gmail.com>\nnulltoken <emeric.fermas@gmail.com>\nMartin Woodward <martin.woodward@microsoft.com> <martinwo@microsoft.com>\nCarlos Mart√≠n Nieto <cmn@dwim.me> <carlos@cmartin.tk>\nsomeoneigna <someoneigna@gmail.com> <someoneigna@gmail.com>\n"
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 35.1748046875,
          "content": "# LibGit2Sharp Changes\n\n## v0.31 - ([diff](https://github.com/libgit2/libgit2sharp/compare/0.30.0..0.31.0))\n\n### Changes\n- This release includes [libgit2 v1.8.4](https://github.com/libgit2/libgit2/releases/tag/v1.8.4).\n  - SSH is now supported through [libgit2's support for OpenSSH](https://github.com/libgit2/libgit2/pull/6617).\n- The ppc64le architecture is now supported on Linux.\n- .NET 6 has reached end of support, so LibGit2Sharp now targets `net472` and `net8.0`.\n\n### Additions\n- Adds Depth to FetchOptions allowing for shallow cloning [#2070](https://github.com/libgit2/libgit2sharp/pull/2070)\n- Make owner validation configurable [#2093](https://github.com/libgit2/libgit2sharp/pull/2093)\n- Add a CloneOptions constructor that takes a FetchOptions [#2132](https://github.com/libgit2/libgit2sharp/pull/2132)\n\n### Fixes\n- TreeDefinition.Remove fails to remove unwrapped trees [#1869](https://github.com/libgit2/libgit2sharp/issues/1869) \n- ObjectDatabase.Write<T>(Stream stream...) overload does not respect T [#2071](https://github.com/libgit2/libgit2sharp/issues/2071)\n- Repository.Worktrees.Add leaves now worktree empty [#2037](https://github.com/libgit2/libgit2sharp/issues/2037)\n\n## v0.30 - ([diff](https://github.com/libgit2/libgit2sharp/compare/0.29.0..0.30.0))\n\n### Changes\n- This release includes [libgit2 v1.7.2](https://github.com/libgit2/libgit2/releases/tag/v1.7.2).\n- Updates for trimming compatibility [#2084](https://github.com/libgit2/libgit2sharp/pull/2084)\n- Updates for .NET 8 [#2085](https://github.com/libgit2/libgit2sharp/pull/2085)\n\n## v0.29 - ([diff](https://github.com/libgit2/libgit2sharp/compare/0.28.0..0.29.0))\n\n### Changes\n- This release includes [libgit2 v1.7.1](https://github.com/libgit2/libgit2/releases/tag/v1.7.1).\n  - CI changes for the native binaries has removed support for CentOS 7. See [#2066](https://github.com/libgit2/libgit2sharp/pull/2066) for details.\n\n### Additions\n- Add proxy options [#2065](https://github.com/libgit2/libgit2sharp/pull/2065)\n  - See PR for details, including some breaking changes to `CloneOptions` and `SubmoduleUpdateOptions`\n\n## v0.28 - ([diff](https://github.com/libgit2/libgit2sharp/compare/0.27.2..0.28.0))\n\n### Additions\n- Add CustomHeaders to PushOptions [#2052](https://github.com/libgit2/libgit2sharp/pull/2052)\n\n## v0.27.2 - ([diff](https://github.com/libgit2/libgit2sharp/compare/0.27.1..0.27.2))\n\n### Changes\n- This release includes [libgit2 v1.6.4](https://github.com/libgit2/libgit2/releases/tag/v1.6.4).\n\n### Fixes\n- Can't access GIT config (Repository.Config) since v0.27.0 [#2031](https://github.com/libgit2/libgit2sharp/issues/2031)\n\n## v0.27.1 - ([diff](https://github.com/libgit2/libgit2sharp/compare/0.27.0..0.27.1))\n\n### Fixes\n- AssemblyVersion of v0.27.0 is `0.0.0.0`, which is lower than the AssemblyVersion of the v0.26.x releases. [#2030](https://github.com/libgit2/libgit2sharp/pull/2030)\n\n## v0.27 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.26..0.27.0))\n\n### Changes\n- LibGit2Sharp now targets .NET Framework 4.7.2 and .NET 6.\n- This release includes [libgit2 v1.6.3](https://github.com/libgit2/libgit2/releases/tag/v1.6.3).\n- Changes to the native binaries let LibGit2Sharp work on all [.NET 6 supported OS versions and architectures](https://github.com/dotnet/core/blob/main/release-notes/6.0/supported-os.md).\n- `GlobalSetings.NativeLibraryPath` used to automatically append architecture to the path when running on .NET Framework. This behavior has been removed to make it consistent. [#1918](https://github.com/libgit2/libgit2sharp/pull/1918)\n\n### Additions\n- Add support for adding and clearing multi-valued configuration [#1720](https://github.com/libgit2/libgit2sharp/pull/1720)\n- added lines and deleted lines in content changes [#1790](https://github.com/libgit2/libgit2sharp/pull/1790)\n- Set / get supported extensions [#1908](https://github.com/libgit2/libgit2sharp/pull/1908)\n- Simplify dealing with missing git objects [#1909](https://github.com/libgit2/libgit2sharp/pull/1909)\n- Throw NotFoundException if trees are missing when computing diff [#1936](https://github.com/libgit2/libgit2sharp/pull/1936)\n\n### Fixes\n- Adjust GitStatusOptions to match structure of native libgit2 [#1884](https://github.com/libgit2/libgit2sharp/pull/1884)\n- Update git_worktree_add_options struct to include ref pointer [#1890](https://github.com/libgit2/libgit2sharp/pull/1890)\n- Fix git_remote_connect not throwing on non-zero result [#1913](https://github.com/libgit2/libgit2sharp/pull/1913)\n- Fix incorrect information in exceptions [#1919](https://github.com/libgit2/libgit2sharp/pull/1919)\n- Checkout branch looks to remote tracking branches as fallback [#1820](https://github.com/libgit2/libgit2sharp/pull/1820)\n- Fixed calling into native libgit2 on osx-arm64 [#1955](https://github.com/libgit2/libgit2sharp/pull/1955)\n\n## v0.26 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.25..v0.26))\n\n### Additions\n\n* Add `CherryPickCommitIntoIndex` to `ObjectDatabase`\n* The underlying native library (libgit2) now no longer relies on libcurl\n* The underlying native library now no longer relies on zlib\n* Add `IndentHeuristic` option to `CompareOptions`\n\n## v0.25 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.24..v0.25))\n\nLibGit2Sharp is now .NET Core 2.0+ and .NET Framework compatible.\n\n### Additions\n\n - `GitObject` now has a `Peel` method that will let you peel (for example)\n    a `Tag` to a `Tree`.\n - `MergeOptions` now includes an option to `IgnoreWhitespaceChanges`.\n - `TreeDefinition` can now `Add` an object with only the ID, which allows\n   users of large files to add entries without realizing a `Blob`.\n - `ObjectDatabase` can now `Write` a `Stream`, which allows users of\n   large files to stream an object into storage without loading it into\n   memory.\n - `ObjectDatabase` can now `MergeCommitsIntoIndex` allowing users to perform\n   an in-memory merge that produces an `Index` structure with conflicts.\n - Users can enable or disable dependent object existence checks when\n   creating new objects with `GlobalSettings.SetEnableStrictObjectCreation`\n - Users can enable or disable `ofs_delta` support with\n   `GlobalSettings.SetEnableOfsDelta`\n\n### Changes\n\n - Status now does not show untracked files by default.  To retrieve\n   untracked files, included the `StatusOptions.IncludeUntracked` and/or\n   the `StatusOptions.RecurseUntrackedDirs` options.\n - Status now does not show the ignored files by default.  To retrieve\n   ignored files, include the `StatusOptions.IncludeIgnored` option.\n - `Commands.Pull` can now provide a `null` value for `PullOptions`,\n   which indicates that default values should be used.\n\n### Fixes\n\n - The exception thrown when the native library cannot be loaded is now\n   able to be caught and will no longer crash the process.\n - Getting the `Notes` collection from a `Repository` no longer throws an\n   exception when the repository has no notes.\n\n## v0.24 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.23..v0.24))\n\nThis is the last release before a moving to .NET Core compatible library.\n\nIt will be the last supported release with the prior architecture; as a\nresult, this release is primarily bugfixes and does not include major new\nAPIs.\n\n## v0.23 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.22..v0.23))\n\n### Additions\n\n - Add `CherryPickCommit` and `RevertCommit` to `ObjectDatabase`.\n - Add `IncludeIgnored` field to `SatusOptions`.\n - Add `Commit.CreateBuffer` to write a commit object to a buffer and\n   `ObjectDatabase.CreateCommitWithSignature` to create commits which include a\n   signature.\n - Add `Commit.ExtractSignature` to get a commit's signature.\n - Add `ObjectDatabase.Write<T>` to write arbitrary objects to the object db.\n - Add `Commit.PrettifyMessage`\n\n\n### Changes\n\n - The native libraries are now expected to be in the `lib` directory,\n   instead of `NativeBinaries` for improved mono compatibility.  In\n   addition, the names of platform architectures now better reflect\n   the vendor naming (eg, `x86_64` instead of `amd64` on Linux).\n - Deprecate the config paths in RepositoryOptions\n - Deprecate the `QueryBy` overload with `FollowFilter`.\n - Deprecate `Branch.Remote` in favour of `Branch.RemoteName`\n - `Remote` no longer implement the equality operator.\n - `Remote.Update` takes a remote name instead of an instance.\n - `Fetch`, `Pull`, `Move`, `Remove`, `Stage` are now in a commands namespace to\n   indicate what they represent.\n\n## v0.22 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.21.1...v0.22))\n\n### Additions\n\n - Add CustomHeaders in the push options (#1217)\n - Expose the minimal diff algorithm (#1229)\n - Expose Reset() with checkout options (#1219)\n - Add a prettify option to history rewrite options (#1185)\n - Add option to describe to only follow the first parent (#1190)\n - Allow setting the config search path (#1123)\n - Provide access to the remote's host HTTPS certificate (#1134)\n - Add support for rebase (#964)\n - ListReferences() now accepts a credentials provider (#1099)\n - Introduce FileStatus.Conflicted and introduce staging of conflicts (#1062)\n - Support streaming filters written in C# (#1030)\n - Add support for the pre-push callback (#1061)\n - Add support for listing remote references without a Repository instance (#1065)\n - Add StashCollection.Apply() and .Pop() (#1068)\n - Support retrieving a configuration for a repository without instantiating it (#1042)\n - Implement 'log --follow'-like functionality (#963)\n - Introduce in-memory merging via Repository.MergeCommits() (#990)\n - Allow setting whether to prune during a fetch (#1258)\n\n### Changes\n\n - Deprecate MergeConflictException in a backwards-compatible way (#1243)\n - Improve type safety in the generic type for Diff.Compare() (#1180)\n - Obsolete Repository.Commit(), NoteCollection.Add() and\n   NoteCollection.Remove() overloads which do not require a signature (#1173)\n - BuildSignature() no longer tries to build a signature from the\n   environment if there is none configured (#1171)\n - Rename the commit walker's Since to IncludeReachableFrom and Until to ExcludeReachableFrom (#1069)\n - Rename MergeConflictException to CheckoutConflictException to more\n   accurately reflect what it means (#1059)\n - Specify the diff algorithm instead of setting a boolean to use patience (#1043)\n - Remove optional parameters (#1031)\n - Move Repository.Reset(paths) into Index (#959)\n - Move FindMergeBase() overloads to ObjectDatabase (#957)\n\n### Fixes\n\n - ListReferences() is now able to handle symbolic references (#1132)\n - Repository.IsValid() returns false on empty paths (#1156)\n - The included version of libgit2 includes racy-git support\n - Fix a racy NRE in the filters (#1113)\n\n## v0.21.1 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.21...v0.21.1))\n\n### Changes\n\n- Fix Fetch() related tests to cope with recent GitHub policy change regarding include-tag handling (#995, #1001)\n\n## v0.21 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.20.2...v0.21))\n\n### Additions\n\n - Introduce repo.Index.Add() and repo.Index.Remove() (#907)\n - Introduce repo.Describe() (#848)\n - Teach Repository.Clone to accept a specific branch to checkout (#650, #882)\n - Expose IndexEntry.AssumeUnchanged (#928, #929)\n - Introduce GlobalSettings.Version.InformationalVersion (#921)\n\n### Changes\n\n - Deprecate Branch.Checkout() (#937)\n - Deprecate GlobalSettings.Version.MajorMinorPatch (#921)\n - Change Blob.Size output to a long (#892)\n - Update libgit2 binaries to libgit2/libgit2@e0902fb\n\n### Fixes\n\n - Fix Network.Fetch() tags retrieval (#927)\n - Fix repo.Stage(\"*\") behavior (#907)\n - Plug some memory leaks (#883, #910)\n - Protect Repository.Clone() from null parameters (#891)\n\n## v0.20.2 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.20.1...v0.20.2))\n\n### Fixes\n\n - Update libgit2 to prevent issues around symbolic links to \".git\" folders in trees on Mac\n\n## v0.20.1 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.20...v0.20.1))\n\n### Fixes\n\n - Update libgit2 to prevent issues around \".git\" folders in trees on Windows and Mac\n\n## v0.20 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.19...v0.20))\n\n### Additions\n\n - Teach RemoteUpdater to update the remote url (#803)\n - Introduce ObjectDatabase.CreateTree(Index) and Index.Reset(Tree) (#788, #799)\n - Add process wide logging feature (#832)\n - Add process wide SmartSubtransport registration/unregistration (#528)\n - Expose Index.Clear() (#814)\n\n### Changes\n\n - Require Mono 3.6+ on non Windows platform (#800)\n - Require NuGet 2.7+ to install the package (#836)\n - Throw MergeFetchHeadNotFoundException when Pull cannot find ref to merge (#841)\n - Drop Remote.IsSupportedUrl() (#857)\n - Deprecate repo.Version in favor of GlobalSettings.Version (#726, #820)\n - Remove optional parameters from IRepository (#779, #815)\n - Move higher level Index operations to IRepository (#822, #851)\n - Deprecate repo.Refs.Move() in favor of repo.Refs.Rename() (#752, #819)\n - Update libgit2 binaries to libgit2/libgit2@3f8d005\n\n### Fixes\n\n - Fix compareOptions handling in Diff.Compare<T> (#827, #828)\n - Honor MSBuild Publish mechanism (#597, #821)\n - Make Configuration.BuildSignature() throw a more descriptive message (#831, #858)\n - Prevent Branch.Remote property from throwing when the remote is unresolvable (#823)\n - Teach Revert() to clean up repository state when there is nothing to revert (#816)\n\n## v0.19 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.18.1...v0.19))\n\n### Additions\n\n - Introduce repo.Network.Remotes.Rename() (#730, #741)\n - Introduce repo.ObjectDatabase.ShortenObjectId() (#677)\n - Introduce Remote.IsSupportedUrl() (#754)\n - Introduce repo.CherryPick() (#755, #756)\n - Expose advanced conflict data (REUC, renames) (#748)\n\n### Changes\n\n - Make Patch expose a richer PatchEntryChanges type (#686, #702)\n - Make network operations accept Credentials through a callback (#759, #761, #767)\n - Make repo.Index.Stage() respect ignored files by default (#777)\n - Make OdbBackend IDisposable (#713)\n - Update libgit2 binaries to libgit2/libgit2@d28b2b7\n\n### Fixes\n\n - Don't require specific rights to the parent hierarchy of a repository (#795)\n - Prevent Clone() from choking on empty packets (#794)\n - Ensure Tags can be created in detached Head state (#791)\n - Properly determine object size when calculating its CRC (#783)\n - Prevent blind fast forwards merges when there are checkout conflicts (#781)\n - Make repo.Reset() and repo.Index.Unstage() cope with renamed entries (#777)\n - Do not throw when parsing annotated tags without a Signature (#775, #776)\n - Remove conflicts upon repo.Index.Remove() call (#768)\n - Honor the merge.ff configuration entry (#709)\n - Make Clone() properly throws when passed an invalid url (#701)\n\n## v0.18.1 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.18.0...v0.18.1))\n\n### Additions\n\n - Make CommitOptions expose additional properties to control how the message should be prettified (#744, #745)\n\n### Changes\n\n - Update libgit2 binaries to libgit2/libgit2@90befde\n\n### Fixes\n\n - Fix issue when cloning from a different local volume (#742, #743)\n\n## v0.18.0 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.17.0...v0.18.0))\n\n### Additions\n\n - Introduce repo.Revert() (#706)\n - Enhanced control over Merge behavior through MergeOptions (#685)\n - Introduce repo.Network.Remotes.Remove() (#729, #731)\n - Teach repo.Network.ListReferences() to accept a Credentials (#647, #704)\n - Introduce Reference.IsValidName() (#680, #691)\n - Introduce Remote.IsValidName() (#679, #690)\n - Expose StatusOptions.RecurseIgnoredDirs (#728)\n - Introduce GlobalSettings.Features() (#717)\n - Make Repository.Version output the libgit2 built-in features (#676, #694)\n\n### Changes\n\n - LibGit2Sharp now requires .Net 4.0 (#654, #678)\n - Repository.Checkout() and Branch.Checkout() overloads now accept a CheckoutOptions parameter (#685)\n - Deprecate repo.Refs.IsValidName() (#680, #691)\n - Deprecate repo.Network.Remotes.IsValidName() (#679, #690)\n - Deprecate repo.Branches.Move() in favor of repo.Branches.Rename() (#737, #738)\n - Update libgit2 binaries to libgit2/libgit2@2f6f6eb\n\n### Fixes\n\n - Do not fail enumerating the ObjectDatabase content when an unexpected file is found under .git/objects (#704)\n - Fix update of HEAD when committing against a bare repository with a temporary working directory (#692)\n\n## v0.17.0 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.16.0...v0.17.0))\n\n### Additions\n\n - Introduce Network.Pull() (#643 and #65)\n - Introduce DefaultCredentials for NTLM/Negotiate authentication (#660)\n - Make repo.Merge() accept a Branch (#643)\n - Introduce MergeOptions type, to specify the type of merge and whether to commit or not (#643, #662, #663)\n - Teach reference altering methods to let the caller control how the reflog is valued (#612, #505 and #389)\n - Teach repo.Commits.FindMergeBase to leverage either Standard or Octopus strategy (#634 and #629)\n - Make ObjectDatabase.CreateCommit() accept an option controlling the prettifying of the message (#619)\n - Allow notes retrieval by namespace and ObjectId (#653)\n\n### Changes\n\n - Deprecate repo.Commits.FindCommonAncestor() in favor of repo.Commits.FindMergeBase() (#634)\n - Deprecate Network.FetchHeads and Repository.MergeHeads (#643)\n - Repository.Commit() overloads now accept a CommitOptions parameter (#668)\n - Repository.Clone() now accepts a CloneOptions parameter\n - Ease testability by making all GetEnumerator() methods fakeable (#646 and #644)\n - Update libgit2 binaries to libgit2/libgit2@bcc6229\n\n### Fixes\n\n - Make Branch.Add() and Branch.Move() use the correct indentity to feed the reflog (#612 and #616)\n - Fix NullReferenceException occuring in Repository.Clone (#659 and #635)\n\n## v0.16.0 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.15.0...v0.16.0))\n\n### Additions\n\n - Introduce Repository.Merge() (#608 and #620)\n - Teach Diff.Compare<>() to return a PatchStats (#610)\n\n### Changes\n\n - Speed up NuGet post build copy of the native binaries (#613)\n\n### Fixes\n\n - Fix Remotes.Add(name, url, refspec) to prevent the creation of a default fetch refspec beside the passed in one (#614)\n - Make LibGit2SharpException.Data expose the correct libgit2 error categories (#601)\n\n## v0.15.0 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.14.1...v0.15.0))\n\n### Additions\n\n - Introduce ObjectDatabase.Archive()\n - Introduce Repository.Blame()\n - Introduce ObjectDatabase.CalculateHistoryDivergence()\n - Add Configuration.Find(regexp)\n - Add CommitFilter.FirstParentOnly\n - Expose Configuration.BuildSignature()\n - Add TreeDefinition.Add(string, TreeEntry)\n - Make Remote expose its refspecs\n\n### Changes\n\n - Make Network.Fetch() accepts optional refspec\n - Extend Network.Fetch() and ListReferences() to allow downloading from a url\n - Allow Network.Push() to control packbuilder parallelism\n - Expose Network.Push() progress reporting\n - Extend RemoteUpdater to allow updation of refspecs\n - Teach Index.RetrieveStatus to detect renames in index and workdir\n - Teach NoteCollection to optionally build a Signature from configuration\n - Add RewriteHistoryOptions.OnSucceeding and OnError\n - Introduce Blob FilteringOptions\n - Rename Blob.ContentAsText() as Blob.GetContentText()\n - Rename Blob.ContentStream() as Blob.GetContentStream()\n - Deprecate Blob.Content\n - Teach Diff.Compare<> to detect renames and copies\n - Split Patch and TreeChanges generation\n - Deprecate ResetOptions in favor of ResetMode.\n - Simplify OdbBackend.ReadPrefix() implementation\n - Deprecate ObjectId.StartsWith(byte[], int) in favor of ObjectId.StartsWith(string)\n - Update libgit2 binaries to libgit2/libgit2@96fb6a6\n\n### Fixes\n\n - Fix building with Mono on OS X (#557)\n - Make RetrieveStatus() reload on-disk index beforehand (#322 and #519)\n\n## v0.14.1 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.14.0...v0.14.1))\n\n### Changes\n\n - Rename OrphanedHeadException into UnbornBranchException\n\n### Fixes\n\n - Fix handling of http->https redirects\n - Make probing for libgit2 binaries work from within the NuGet packages folder\n - Accept submodule paths with native directory separators\n\n## v0.14.0 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.13.0...v0.14.0))\n\n### Additions\n\n - Introduce Blob.ContentAsText()\n - Teach repo.Refs.RewriteHistory() to prune empty commits\n - Teach repo.Refs.RewriteHistory() to rewrite symbolic references\n - Teach repo.ObjectDatabase to enumerate GitObjects\n - Teach Branches.Add() and Move() to append to the reflog\n - Honor core.logAllRefUpdates configuration setting\n - Add strongly-typed LockedFileException\n - Add TreeDefinition.Remove(IEnumerable<string>)\n - Introduce ObjectId.StartsWith()\n - Introduce repo.Config.GetValueOrDefault()\n\n### Changes\n\n - Introduce RewriteHistoryOptions type and make repo.Refs.RewriteHistory() leverage it\n - Introduce CheckoutOptions type and make repo.CheckoutPaths() leverage it\n - Obsolete Blob.ContentAsUnicode and Blob.ContentAsUf8\n - Make OdbBackend interface ObjectId based\n - Update libgit2 binaries to libgit2/libgit2@32e4992\n\n### Fixes\n\n - Ensure repo.Network.Push() overloads pass the Credentials down the call chain\n - Make SymbolicReference.Target cope with chained symbolic references\n - Do not throw when parsing a Remote with no url\n - Prevent files or directories starting with ! from being ignored\n - Teach Index.Stage to stage files in ignored dirs\n\n## v0.13.0 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.12.0...v0.13.0))\n\n### Additions\n\n - Teach Repository to Checkout paths\n - Teach Checkout() to cope with revparse extended syntax leading to references\n - Make Stash expose Base, Index and Untracked commits\n - Teach Repository.Init() to set up a separate git directory\n - Teach checkout to report notifications\n - Create a new repo.Checkout() overload which accepts a Commit object\n - Allow ObjectDatabase.CreateBlob() to limit the number of bytes to consume\n - Make ObjectDatabase.CreateBlob() accept a Stream\n - Introduce repo.Refs.RewriteHistory()\n - Introduce repo.Refs.ReachableFrom()\n - Introduce TreeDefinition.From(Commit)\n - Expose TagFetchMode property on Remote type\n - Add CopyNativeDependencies.targets\n\n### Changes\n\n - Rename CheckoutOptions into CheckoutModifiers\n - Rename DiffOptions into DiffModifiers\n - Rename StashOptions into StashModifiers\n - Rename GitSortOptions into CommitSortStrategies\n - Rename Filter into CommitFilter\n - Rename ObjectDatabase.CreateTag into ObjectDatabase.CreateTagAnnotation\n - Obsolete repo.Clone() overload which returns a Repository\n - Obsolete repo.Init() overload which returns a Repository\n - Obsolete ObjectDatabase.CreateBlob(BinaryReader, string)\n - Update libgit2 binaries to libgit2/libgit2@7940036\n\n### Fixes\n\n - Fetch should respect the remote's configured tagopt setting unless explicitly specified\n\n## v0.12.0 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.11.0...v0.12.0))\n\n### Additions\n\n - Introduce repo.Info.IsShallow\n - Teach repo.Reset to append to the Reflog\n - Introduce repo.ObjectDatabase.CreateTag()\n - Make repo.Diff.Compare() able to define the expected number of context and interhunk lines (#423)\n\n### Changes\n\n - Obsolete TreeEntryTargetType.Tag\n - Update libgit2 binaries to libgit2/libgit2@9d9fff3\n\n### Fixes\n\n - Change probing mechanism to rely on specifically named versions of libgit2 binaries (#241)\n - Ensure that two versions of LibGit2Sharp can run side by side (#241)\n\n## v0.11.0 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.10.0...v0.11.0))\n\n### Additions\n\n - Introduce Repository.Refs.Log()\n - Teach Checkout() and Commit() to append to the reflog\n - Teach Refs.Add(), Refs.UpdateTarget() to optionally append to the reflog\n - Add Repository.Submodules namespace\n - Add submodule support to Index.Stage()\n - Add TreeDefinition.Add(Submodule) and TreeDefinition.AddGitLink()\n - Introduce ExplicitPathsOptions type to control handling of unmatched pathspecs\n - Make Index.Remove(), Index.Unstage()/Stage(), Diff.Compare() and Reset() accept ExplicitPathsOptions\n - Add an indexer to the StashCollection\n - Add the UpstreamBranchCanonicalName property to Branch\n - Make Push accept Branch instances\n - Introduce Reference.IsTag, Reference.IsLocalBranch and Reference.IsRemoteTrackingBranch\n - Add Repository.IsValid()\n - Refine build resilience on Linux\n\n### Changes\n\n - Obsolete Tree.Trees and Tree.Blobs properties\n - Replace GitObjectType with ObjectType and TreeEntryTargetType\n - Rename TreeEntry.Type and TreeEntryDefinition.Type to *.TargetType\n - Move Repository.Conflicts to Index.Conflicts\n - Move Remote.Fetch() in Repository.Network\n - Modify StashCollection.Remove() to accept an integer param rather than a revparse expression\n - Rename BranchUpdater.Upstream to TrackedBranch\n - Rename BranchUpdater.UpstreamMergeBranch to UpstreamBranch\n - Rename BranchUpdater.UpstreamRemote to Remote\n\n### Fixes\n\n - Make Commit() append to the reflog (#371)\n - Make Index.Remove() able to only remove from index (#270)\n - Teach Index.Remove() to clear the associated conflicts (#325)\n - Make Index.Remove() able to remove folders (#327)\n - Fix repo.Checkout() when working against repo.Head\n - Fix update of the target of repo.Refs.Head\n - Teach Checkout() to cope with revparse syntax\n - Support TreeEntry.Target for GitLink entries\n\n## v0.10.0 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.9.5...v0.10.0))\n\n### Additions\n\n - Update working directory on checkout\n - New network related features: clone, fetch, push, list remote references\n - Expose the heads that have been updated during the last fetch in Repository.Network.FetchHeads\n - Introduce Repository.Network.Remotes.IsValidName()\n - New .gitignore related features: temporary rules, path checking\n - Add support for custom, managed ODB backends\n - Add revparse support in Repository.Lookup()\n - Improve Repository.Commit(): add merged branches as parents, cleanup merge data\n - Introduce Blob.IsBinary\n - Add strongly-typed exceptions (NonFastForwardException, UnmergedIndexEntriesException, ...)\n - Add basic stashing support: add, retrieve, list and remove\n - Add git clean support in Repository.RemoveUntrackedFiles()\n - Add shortcut to HEAD in Repository.Refs.Head\n - Introduce Repository.Refs.IsValidName()\n - Add Repository.Refs.FromGlob() to enumerate references matching a specified glob\n - Add support for XDG configuration store\n - Make Config.Get() and Config.Delete() able to target a specific store\n - Diff.Compare() enhancements: work against workdir and index, consider untracked changes, expose typechanges\n - Allow retrieval of the remote of a non-local branch through Branch.Remote\n - Allow modification of the branch properties through Repository.Branches.Update()\n - Expose merge related information: Repository.Index.IsFullyMerged, Repository.Conflicts, IndexEntry.StageLevel\n - Expose the heads being merged in Repository.MergeHeads\n - Introduce IndexEntry.Mode\n - Add more repository information: Repository.Info.CurrentOperation, Repository.Info.Message, Repository.Info.IsHeadOrphaned\n - Allow passing an optional RepositoryOptions to Repository.Init()\n - Allow reset filtering by passing a list of paths to consider\n\n### Changes\n\n - Make TreeChanges and TreeEntryChanges expose native paths\n - Make Repository.Reset accept a Commit instead of a string\n - Stop sorting collections (references, remotes, notes ...)\n - Move AheadBy/BehindBy into new Branch.TrackingDetails\n - Move Repository.Remotes to Repository.Network.Remotes\n - Move Configuration.HasXXXConfig() to Configuration.HasConfig()\n - Rename CommitCollection to CommitLog\n - Rename LibGit2Exception to LibGit2SharpException\n - Rename Delete() to Unset() in Configuration\n - Rename Delete() to Remove() in TagCollection, ReferenceCollection, NoteCollection, BranchCollection\n - Rename Create() to Add() in TagCollection, BranchCollection, ReferenceCollection, RemoteCollection, NoteCollection\n - Obsolete RepositoryInformation.IsEmpty, DiffTarget, IndexEntry.State, Commit.ParentsCount\n\n### Fixes\n\n - Allow abstracting LibGit2Sharp in testing context (#138)\n - Ease the detection of a specific key in a specific store (#162)\n - Expose libgit2 error information through the LibGit2SharpException.Data property(#137)\n - Preserve non-ASCII characters in commit messages (#191)\n - Fix retrieval of the author of a commit (#242)\n - Prevent duplicated tree entries in commits (#243)\n - Fix Repository.Discover behaviour with UNC paths (#256)\n - Make Index.Unstage work against an orphaned head (#257)\n - Make IsTracking & TrackedBranch property not throw for a detached head (#266, #268)\n\n## v0.9.5 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.9.0...v0.9.5))\n\n### Additions\n\n - Add support to create, retrieve, list and remove object notes (#140)\n - Make Repository able to rely on specified global and system config files (#157)\n\n### Changes\n\n - Remove repo.Branches.Checkout()\n - Remove Tree.Files\n - Update libgit2 binaries to libgit2/libgit2@4c977a6\n\n### Fixes\n\n - Allow initialization of a repository located on a network path (#153)\n\n## v0.9 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.8.0...v0.9.0))\n\n### Additions\n\n - Support local tracking branches (#113)\n - Add an Ignored collection to the RepositoryStatus type (#120)\n - Expose the relative path of TreeEntries (#122)\n - Make Repository able to work against specified index and workdir (#132)\n - Direct creation or Blobs, Trees and Commits without the workdir nor index involvement (#135)\n - New Diff namespace: supports tree-to-tree, tree-to-index and blob-to-blob comparisons (#136)\n - Add Commits.FindCommonAncestor() (#149)\n\n### Changes\n\n - Deprecate repo.Branches.Checkout() in favor of repo.Checkout()\n - Deprecate Tree.Files in favor of Tree.Blobs\n - Update libgit2 binaries to libgit2/libgit2@7a361e9\n\n### Fixes\n\n - Embed both x86 and amd64 compiled versions of libgit2 binaries (#55, #70)\n - Honor symbolically linked global .gitconfig (#84)\n - Ease the creation of a remote (#114)\n - Prevent memory issues when revwalking a large repository (#115)\n - Cleanup commit and tag messages (#117)\n - Make RetrieveStatus() return correct results (#123)\n - Allow staging on a network shared repository (#125)\n\n## v0.8 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.7.0...v0.8.0))\n\n### Additions\n\n - Add Repository.Reset() and support of Soft and Mixed modes\n - Make Repository.Commit() able to amend the current tip of the Head\n - Make the constructor of Repository able to open a repository from a working directory path\n - Make Repository.Index.RetriveStatus honor the .gitgnore files\n\n### Changes\n\n - Remove Repository.HasObject()\n - Change Repository.Init() to make it return an instance of the Repository type, instead of a string containing the path of the repository\n - Update libgit2 binaries to libgit2/libgit2@6d39c0d\n\n### Fixes\n\n - Reinit a repository doesn't throw anymore (#54)\n - Embedded libgit2 binaries are now compiled with THREADSAFE=ON flag (#64)\n - Prevent Repository.Head.IsCurrentRepositoryHead from throwing when the Repository is empty (#105)\n\n## v0.7 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.6.2...v0.7.0))\n\n### Additions\n\n - Allow access to System and Global configuration outside the context of a repo\n - Add overloads to index methods that accept collection of paths\n\n### Changes\n\n - Make Index.RetrieveStatus() return native file paths\n - Make IndexEntry able to cope with native file paths\n - Update libgit2 binaries to libgit2/libgit2@be00b00\n - Deprecate Repository.HasObject()\n\n### Fixes\n\n - Fix the build script to be fully XBuild compatible on Linux/Mono 2.10\n - Fix Index.Remove() to correctly handle files which have been deleted and modified in the working directory\n\n## v0.6.2 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.6.1...v0.6.2))\n\n### Fixes\n\n - Make Index methods (Stage, Unstage, Move... ) able to cope with native Windows directory separator char\n\n## v0.6.1 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.6.0...v0.6.1))\n\n### Changes\n\n - Update libgit2 binaries to libgit2/libgit2@e3baa3c\n\n### Fixes\n\n - Prevent segfault when determining the status a of repository\n - Fix retrieval of buggy status in some (not that rare) cases\n\n## v0.6 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.5.0...v0.6.0))\n\n### Additions\n\n - Add Configuration.Get() overload that takes key in parts\n - Add tracking branch details (#75)\n - Allow creation of commit using signature from configuration files\n - Add Index.Remove() (#78)\n - Add a string indexer to the Commit and Tree types in order to ease retrieval of TreeEntries\n\n### Changes\n\n - Provide default value for non existent configuration setting (#67)\n - Change the tree structure into which libgit2 binaries are located (#70)\n - Update libgit2 binaries to libgit2/libgit2@28c1451\n\n### Fixes\n\n - Prevent enumeration of branches from throwing when the repository contains remote branches (#69)\n - Fix Index.Stage(), Index.Unstage() (#78)\n\n## v0.5 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.4.0...v0.5.0))\n\n### Additions\n\n - Add Repository.Index.RetrieveStatus() (#49)\n - Add handling of configuration settings of the repository and retrieval of Remotes (#60)\n\n### Changes\n\n - Can now enumerate from multiple starting points\n - While enumerating commits, automatically dereference objects to a commit object id\n - Defer resolving of Branch.Tip, Tag.Target and Tag.Annotation\n - Replace usage of ApplicationException with LibGit2Exception\n - Update libgit2 binaries to libgit2/libgit2@35e9407\n\n### Fixes\n\n - Prevent enumeration of commits from throwing when starting from a tag which points at a blob or a tree (#62)\n - Prevent a branch from being removed if it's the current HEAD\n - References are now being enumerated in a ordered way\n - Fix Repository.Discover() implementation when no .git folder exists\n\n## v0.4 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.3.0...v0.4.0))\n\n### Additions\n\n - Add Repository.Index.Move()\n - Add handling of abbreviated identifiers\n - Add Repository.Discover() (#25)\n - Add TreeEntry.Type\n\n### Changes\n\n - Propagate libgit2 error messages upward\n - Update libgit2 binaries to libgit2/libgit2@33afca4\n\n### Fixes\n\n - Prevents GitSharp from throwing when browsing a repository initialized with LibGit2Sharp (#56)\n - Hide the .git directory when initializing a new standard repository (#53)\n - Fix Repository.IsEmpty implementation when HEAD is in detached state (#52)\n - Relaxed handling of bogus signatures (#51)\n - Improve Mono compatibility (#46 and #47)\n - Remove dependency to msvcr100.dll\n\n## v0.3 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.2.0...v0.3.0))\n\n### Additions\n\n - Add basic Commit feature (#32)\n - Add Repository.Index.Unstage()\n - Add branch renaming feature\n - Add symbolsource.org support (#37)\n\n### Changes\n\n - Make Repository.Head return a Branch instead of a Reference\n - Defer resolving of Repository.Info\n - Update libgit2 binaries to libgit2/libgit2@a5aa5bd\n - Improved Mono compatibility (#34)\n\n### Fixes\n\n - Add required msvcr100.dll dependency (#43)\n - Fix index updating issue\n - Fix branch creation issue\n\n## v0.2.0 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.1.1...v0.2.0))\n\n### Changes\n\n - Update CommitCollection API to query commits\n - Update libgit2 binaries to libgit2/libgit2@4191d52\n\n### Fixes\n\n - Fix Repository.Info.IsEmpty\n - Fix default CommitCollection sorting behavior\n - Fix creation of reference to prevent it from choking on corrupted ones\n - Fix interop issue in a IIS hosted application\n\n## v0.1.1 - ([diff](https://github.com/libgit2/libgit2sharp/compare/v0.1.0...v0.1.1))\n\n### Additions\n\n  - Update staging mechanism to authorize full paths to be used (#23)\n\n### Fixes\n\n - Fix NuGet packaging\n\n## v0.1.0\n\n - Initial release\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.955078125,
          "content": "# How to Contribute\n\nWe love Pull Requests! Your contributions help make LibGit2Sharp great.\n\n## Getting Started\n\nSo you want to contribute to LibGit2Sharp. Great! Contributions take many forms from\nsubmitting issues, writing documentation, to making code changes. We welcome it all.\n\nBut first things first...\n\n* Make sure you have a [GitHub account](https://github.com/signup/free)\n* Submit a ticket for your issue, assuming one does not already exist.\n  * Clearly describe the issue including steps to reproduce when it is a bug.\n  * Make sure you fill in the earliest version that you know has the issue.\n* Fork the repository on GitHub, then clone it using your favorite Git client.\n* Make sure the project builds and all tests pass on your machine by running\n  the `buildandtest.cmd` script on Windows or `buildandtest.sh` on Linux/Mac.\n\n## LibGit2\n\nLibGit2Sharp brings all the might and speed of libgit2, a native Git implementation, to the managed world of .Net and Mono.\nLibGit2 is a git submodule referencing the [libgit2 project](https://github.com/libgit2/libgit2). To learn more about\nsubmodules read [here](http://git-scm.com/book/en/v2/Git-Tools-Submodules).\nTo build libgit2 see [here](https://github.com/libgit2/libgit2sharp/wiki/How-to-build-x64-libgit2-and-LibGit2Sharp).\n\n## Making Changes\n\nMake sure you have the required .NET Core SDK and runtimes installed.\nThe easiest way to do this is run our `tools\\Install-DotNetSdk.ps1` script.\nUsing the `-InstallLocality Machine` switch requires elevation but ensures\nthat Visual Studio will be able to load the solution even when launched from a shortcut.\n\nThen proceed to:\n\n* Create a topic branch off master (don't work directly on master).\n* Implement your feature or fix your bug. Please following existing coding styles and do not introduce new ones.\n* Make atomic, focused commits with good commit messages.\n* Make sure you have added the necessary tests for your changes.\n* Run _all_ the tests to assure nothing else was accidentally broken.\n\n## Submitting Changes\n\n* Push your changes to a topic branch in your fork of the repository.\n* Send a Pull Request targeting the master branch. Note what issue/issues your patch fixes.\n\nSome things that will increase the chance that your pull request is accepted.\n\n* Following existing code conventions.\n* Including unit tests that would otherwise fail without the patch, but pass after applying it.\n* Updating the documentation and tests that are affected by the contribution.\n* If code from elsewhere is used, proper credit and a link to the source should exist in the code comments.\n  Then licensing issues can be checked against LibGit2Sharp's very permissive MIT based open source license.\n* Having a configured git client that converts line endings to LF. [See here.](https://help.github.com/articles/dealing-with-line-endings/).\n# Additional Resources\n\n* [General GitHub documentation](http://help.github.com/)\n* [GitHub pull request documentation](https://help.github.com/articles/using-pull-requests/)\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 0.4375,
          "content": "<Project>\n\n  <PropertyGroup>\n    <EnableNETAnalyzers>true</EnableNETAnalyzers>\n    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>\n    <UseArtifactsOutput>true</UseArtifactsOutput>\n    <DefineConstants Condition=\" '$(ExtraDefine)' != '' \">$(DefineConstants);$(ExtraDefine)</DefineConstants>\n  </PropertyGroup>\n\n  <PropertyGroup Condition=\"'$(CI)' != ''\">\n    <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>\n  </PropertyGroup>\n\n</Project>\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0556640625,
          "content": "The MIT License\n\nCopyright (c) LibGit2Sharp contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "LibGit2Sharp.Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "LibGit2Sharp.sln",
          "type": "blob",
          "size": 3.056640625,
          "content": "Microsoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.5.33516.290\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"LibGit2Sharp\", \"LibGit2Sharp\\LibGit2Sharp.csproj\", \"{EE6ED99F-CB12-4683-B055-D28FC7357A34}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"LibGit2Sharp.Tests\", \"LibGit2Sharp.Tests\\LibGit2Sharp.Tests.csproj\", \"{286E63EB-04DD-4ADE-88D6-041B57800761}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{0CA739FD-DA4D-4F64-9834-DA14A3ECD04B}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.gitignore = .gitignore\n\t\tTargets\\CodeGenerator.targets = Targets\\CodeGenerator.targets\n\t\tDirectory.Build.props = Directory.Build.props\n\t\tTargets\\GenerateNativeDllName.targets = Targets\\GenerateNativeDllName.targets\n\t\tnuget.config = nuget.config\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"NativeLibraryLoadTestApp.x86\", \"NativeLibraryLoadTestApp\\x86\\NativeLibraryLoadTestApp.x86.csproj\", \"{86453D2C-4953-4DF4-B12A-ADE579608BAA}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"NativeLibraryLoadTestApp.x64\", \"NativeLibraryLoadTestApp\\x64\\NativeLibraryLoadTestApp.x64.csproj\", \"{5C55175D-6A1F-4C51-B791-BF7DD00124EE}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{EE6ED99F-CB12-4683-B055-D28FC7357A34}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{EE6ED99F-CB12-4683-B055-D28FC7357A34}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{EE6ED99F-CB12-4683-B055-D28FC7357A34}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{EE6ED99F-CB12-4683-B055-D28FC7357A34}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{286E63EB-04DD-4ADE-88D6-041B57800761}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{286E63EB-04DD-4ADE-88D6-041B57800761}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{286E63EB-04DD-4ADE-88D6-041B57800761}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{286E63EB-04DD-4ADE-88D6-041B57800761}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{86453D2C-4953-4DF4-B12A-ADE579608BAA}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{86453D2C-4953-4DF4-B12A-ADE579608BAA}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{86453D2C-4953-4DF4-B12A-ADE579608BAA}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{86453D2C-4953-4DF4-B12A-ADE579608BAA}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{5C55175D-6A1F-4C51-B791-BF7DD00124EE}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{5C55175D-6A1F-4C51-B791-BF7DD00124EE}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{5C55175D-6A1F-4C51-B791-BF7DD00124EE}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{5C55175D-6A1F-4C51-B791-BF7DD00124EE}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {9BD5F77D-E47D-4621-9AA0-8598766902B9}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "LibGit2Sharp",
          "type": "tree",
          "content": null
        },
        {
          "name": "NativeLibraryLoadTestApp",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.5693359375,
          "content": "# LibGit2Sharp\n\n[![CI](https://github.com/libgit2/libgit2sharp/actions/workflows/ci.yml/badge.svg)](https://github.com/libgit2/libgit2sharp/actions/workflows/ci.yml) \n[![NuGet version (LibGit2Sharp)](https://img.shields.io/nuget/v/LibGit2Sharp.svg)](https://www.nuget.org/packages/LibGit2Sharp/)\n\n**LibGit2Sharp brings all the might and speed of [libgit2](http://libgit2.github.com/), a native Git implementation, to the managed world of .NET**\n\n## Online resources\n\n- [NuGet package](http://nuget.org/List/Packages/LibGit2Sharp)\n- [Source code](https://github.com/libgit2/libgit2sharp/)\n\n## Troubleshooting and support\n\n- Usage or programming related question? Post it on [StackOverflow](http://stackoverflow.com/questions/tagged/libgit2sharp) using the tag *libgit2sharp*\n- Found a bug or missing a feature? Feed the [issue tracker](https://github.com/libgit2/libgit2sharp/issues)\n- Announcements and related miscellanea through Twitter ([@libgit2sharp](http://twitter.com/libgit2sharp))\n\n## Quick contributing guide\n\n- Fork and clone locally\n- Create a topic specific branch. Add some nice feature. Do not forget the tests ;-)\n- Send a Pull Request to spread the fun!\n\nMore thorough information is available in the [wiki](https://github.com/libgit2/libgit2sharp/wiki).\n\n## Optimizing unit testing\n\nLibGit2Sharp strives to have a comprehensive and robust unit test suite to ensure the quality of the software and to assist new contributors and users, who can use the tests as examples to jump start development. There are over one thousand unit tests for LibGit2Sharp, and this number will only grow as functionality is added.\n\nYou can do a few things to optimize running unit tests on Windows:\n\n1. Set the `LibGit2TestPath` environment variable to a path in your development environment.\n    * If the unit test framework cannot find the specified folder at runtime, it will fall back to the default location.\n2. Configure your anti-virus software to ignore the `LibGit2TestPath` path.\n3. Install a RAM disk like [IMDisk](http://www.ltr-data.se/opencode.html/#ImDisk) and set `LibGit2TestPath` to use it.\n    * Use `imdisk.exe -a -s 512M -m X: -p \"/fs:fat /q /v:ramdisk /y\"` to create a RAM disk. This command requires elevated privileges and can be placed into a scheduled task or run manually before you begin unit-testing.\n\n## Authors\n\n- **Code:** The LibGit2Sharp [contributors](https://github.com/libgit2/libgit2sharp/contributors)\n- **Logo:** [Jason \"blackant\" Long](https://github.com/jasonlong)\n\n## License\n\nThe MIT license (Refer to the [LICENSE.md](https://github.com/libgit2/libgit2sharp/blob/master/LICENSE.md) file)\n"
        },
        {
          "name": "Targets",
          "type": "tree",
          "content": null
        },
        {
          "name": "TrimmingTestApp",
          "type": "tree",
          "content": null
        },
        {
          "name": "acknowledgments.md",
          "type": "blob",
          "size": 0.224609375,
          "content": "LibGit2Sharp is making use of the following OSS projects:\n- [tar-cs](http://code.google.com/p/tar-cs/) project by Vladimir Vasiltsov and is used under the [BSD license](http://code.google.com/p/tar-cs/source/browse/trunk/COPYING)\n"
        },
        {
          "name": "libgit2sharp.snk",
          "type": "blob",
          "size": 0.58203125,
          "content": null
        },
        {
          "name": "nuget.config",
          "type": "blob",
          "size": 0.181640625,
          "content": "Ôªø<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\n  </packageSources>\n</configuration>\n"
        },
        {
          "name": "square-logo.png",
          "type": "blob",
          "size": 12.6552734375,
          "content": null
        }
      ]
    }
  ]
}