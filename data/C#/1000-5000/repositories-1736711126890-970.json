{
  "metadata": {
    "timestamp": 1736711126890,
    "page": 970,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "googlesamples/unity-jar-resolver",
      "stars": 1312,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".allstar",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5224609375,
          "content": "/automation/\n/build/\n/download_artifacts_test_output/\n/test_output/\n/gradle.properties\n/.vscode/\n\n.gradle/\n\n/plugin/Assembly-CSharp-Editor.csproj\n/plugin/Assets/PlayServicesResolver/Editor/JarResolverLib.dll\n/plugin/Assets/Plugins/\n/plugin/Assets/Plugins.meta\n/plugin/Assets/StyleCop.Cache\n/plugin/Assets/StyleCop.Cache.meta\n/plugin/Library/\n/plugin/ProjectSettings/\n/plugin/Temp/\n/plugin/obj/\n/plugin/plugin.sln\n/plugin/plugin.userprefs\n/source/ExportUnityPackage/__pycache__/\n\n/source/.idea/\n/unity_dlls/\n\n.DS_Store\n\nexternal_tools/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 55.3935546875,
          "content": "# Upcoming\n* Android Resolver - Update and resolve `packaging` keyword in maintemplate based on android gradle plugin version. Fixes #715\n\n# Version 1.2.183 - Sep 18, 2024\n* Android Resolver - Handle package paths that don't include a version hash,\n  which is no longer present with Unity 6. Fixes #697\n* Android Resolver - Handle packages referenced using local file paths.\n  Fixes #701\n\n# Version 1.2.182 - Aug 2, 2024\n* General - Check for gradle version instead of Unity version when determining\n  the template files to modify.\n\n# Version 1.2.181 - Jun 26, 2024\n* General - Disable `EditorMeasurement` reporting that relied on the\n  Measurement Protocol for Universal Analytics.\n\n# Version 1.2.180 - Jun 4, 2024\n* General - Fix project settings resetting on domain reload.\n  Fixes #524\n\n# Version 1.2.179 - Feb 12, 2024\n* Android Resolver - Added logic to automatically turn on `mainTemplate.gradle`\n  for new projects, and prompt users to enable it on projects that have previously\n  had the resolver run.\n\n# Version 1.2.178 - Dec 20, 2023\n* Added [OpenUPM support](https://openupm.com/packages/com.google.external-dependency-manager/).\n\n# Version 1.2.177 - Aug 14, 2023\n* iOS Resolver - Added `/opt/homebrew/bin` to Cocoapod executable search path.\n  Fixes #627\n\n# Version 1.2.176 - Apr 27, 2023\n* Android Resolver - Added two Android Resolver settings to determine whether\n  EDM4U injects custom local Maven repo path as a relative path or full path.\n  Fixes #537\n* Android Resolver - Inject Maven Repo to `settingTemplate.gradle` from\n  Unity 2022.2+\n  Fixes #594\n* Android Resolver - Jetifier option is enabled by default now.\n* Android Resolver - `Explode Aar` option applies to all cases, whether the\n  project will be exported or not.\n  Fixes #584\n  Fixes #287\n\n# Version 1.2.175 - Nov 16, 2022\n* General - Added tvOS podfile support to the iOS resolver.\n\n# Version 1.2.174 - Oct 06, 2022\n* General - Added tvOS support to the iOS resolver.\n* General - Fixed #484 - Changed `EditorMeasurement` to use secure connection.\n* Android Resolver - Fixed Android Resolver unable to resolve\n  `mainTemplate.gradle` in Unity `2022.2+` or `2023.1+`.\n\n# Version 1.2.173 - Sep 28, 2022\n* General - Added tvOS library support to the export unity package scripts.\n\n# Version 1.2.172 - Jun 23, 2022\n* iOS Resolver - Stop forcing `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES` to `YES`,\n  which seems to cause problem for some when submitting apps. See #526 for more\n  information.\n\n# Version 1.2.171 - May 11, 2022\n* iOS Resolver - Change `Enable Swift Framework Support Workaround` setting to\n  be `ON` by default since more pods are using Swift Framework now.\n\n# Version 1.2.170 - Apr 4, 2022\n* Android Resolver - Fixes #498 - Fix the path separator of the Maven repo\n  injected to `mainTemplate.gradle`.\n* iOS Resolver - Fixes #470 - Switch default Cocoapods master repo from Github\n  to CDN.\n* iOS Resolver - `Link Framework Statically` setting is now default to `true`.\n  That is, `use_frameworks! :linkage => static` will be added to `Podfile` by\n  default instead of `use_frameworks!`. This can be changed in iOS Resolver\n  settings. This fixes odd behaviors when pods include static libraries, ex.\n  Firebase Analytics.\n* iOS Resolver - Added a workaround when app crashes on launch due to\n  `Library not loaded: @rpath/libswiftCore.dylib` when some pods includes Swift\n  framework. This is turned `OFF` by default and can be changed in iOS Resolver\n  settings.\n\n# Version 1.2.169 - Jan 20, 2022\n* General - Fixes #425 - Change to save `GvhProjectSettings.xml` without\n  Unicode byte order mark (BoM).\n* Android Resolver - Remove reference to `jcenter()`\n* iOS Resolver - Force setting `LANG` when executing Cocoapods in shell mode on\n  Mac.\n\n# Version 1.2.168 - Dec 9, 2021\n* All - Fixes #472 by removing the use of `System.Diagnostics.Debug.Assert`\n* All - Fixed #477 by properly enabling EDM4U libraries for Unity 2021.2+ when\n  the package is installed through `.tgz`\n\n# Version 1.2.167 - Oct 6, 2021\n* All - Moved versioned `.dll` in EDM4U to a versioned folder and remove their\n  version postfix in their filename. For instance, `IOSResolver.dll` will be\n  placed at `ExternalDependencyManager/Editor/1.2.167/Google.IOSResolver.dll`.\n* Android Resolver - Fixed #243 by only using the highest version in\n  `mainTemplate.gradle` when duplicated dependencies are presented.\n* Android Resolver - Added supports to x86_64 to ABI list for Android apps on\n  Chrome OS.\n\n# Version 1.2.166 - Jun 30, 2021\n* All - Fixed #440 and fixed #447 by specifying the parameter type while calling\n  `GetApplicationIdentifier()` Unity API using reflection, due to a new\n  overloaded method introduced in Unity 2021.2.\n* Android Resolver - Fixed #442 by patching `Dependency.IsGreater()` when the\n  version strings end '+'.\n\n# Version 1.2.165 - Apr 28, 2021\n## Bug Fixes\n* Version Handler - Fixed #431 by replacing the use of `HttpUtility.UrlEncode()`\n  which causes NullReferenceException in certain version of Unity.\n* Android Resolver - Check that androidSdkRootPath directory exists before using\n  as sdkPath.\n* Android Resolver - Fixed Android Resolver integration tests with Unity\n  2019.3+.\n\n# Version 1.2.164 - Feb 4, 2021\n## New Features\n* Android Resolver - Added support for Android packages with classifier in their\n  namespaces.\n* iOS Resolver - Added new settings in iOS Resolver to configure generated\n  Podfile.\n* iOS Resolver - Added a new attribute `addToAllTargets` in Dependencies.xml.\n\n## Bug Fixes\n* iOS Resolver - Fixed XML parsing for `bitcodeEnabled` attribute in\n  Dependencies.xml.\n\n# Version 1.2.163 - Dec 15, 2020\n## Bug Fixes\n* Version Handler - Fixed measurement reporting\n\n# Version 1.2.162 - Nov 19, 2020\n## Bug Fixes\n* Version Handler - Improved #413 by preventing Version Handler from running\n  from static constructor when it is disabled.\n* Package Manager Resolver - Remove GPR\n\n# Version 1.2.161 - Oct 12, 2020\n## Bug Fixes\n* Android Resolver - Fixed the issue that Android Resolver does not resolve\n  again before build in Unity 2020 if it failed to resolve previously.\n\n# Version 1.2.160 - Sep 30, 2020\n## Bug Fixes\n* Android Resolver - Fixed a regression that gradleResolver can be null until\n  Initialize() is called.\n* Android Resolver - Fixed a regression that Android Resolver failed in Unity\n  2019.3+ due to `gradleTemplate.properties` not enabled when\n  `mainTemplate.gradle` is not enabled at all.\n\n# Version 1.2.159 - Sep 11, 2020\n## Bug Fixes\n* Android Resolver - Fixed #322 where the Unity editor will lose its target SDK\n  setting between Unity restarts if `>28` is selected in 2019.  This is due to\n  Unity AndroidSdkVersions enum does not contain values above 28.\n* Android Resolver - Fixed #360 where building Android app with Untiy 2019.3+\n  may fail due to Jetifier and AndroidX not enabled properly in generated\n  Gradle project. This fix requires the user to enable\n  `Custom Gradle Properties Template` found under\n  `Player Settings > Settings for Android > Publishing Settings`.\n\n# Version 1.2.158 - Sep 3, 2020\n## Bug Fixes\n* Version Handler: Fixed editor freeze when `-executeMethod` is used in\n  non-batch mode.\n* Android Resolver: Normalized file paths when generating local Maven repo\n  since the path may contains a mix of forward and backward slash on Windows.\n* Export Unity Package: Fixed generation of .unitypackage with tarfile on\n  Windows.\n\n# Version 1.2.157 - Aug 6, 2020\n## Bug Fixes\n* Android Resolver: Delay initialization until active build target is Android\n  and the editor is not in play mode.\n* iOS Resolver: Delay initialization until active build target is iOS\n  and the editor is not in play mode.\n* Export Unity Package: Workaround directory creation racy if multiple export\n  operations are spawned at the same time.\n\n# Version 1.2.156 - June 10, 2020\n## Bug Fixes\n* Android Resolver: Fixed that the generated local repo assets contains\n  redundent labels which are causing Version Handler to failed while\n  uninstalling packages.\n* Android Resolver: Fixed that the repo url injected into mainTemplate.gradle\n  is incorrect when Unity is configured to export gradle project.\n* Android Resolver: Limited to only create local Maven repo when the source\n  repo contains \".srcaar\" file.\n\n## Changes\n* All: Described EDM4U analytics data usage in readme.\n\n# Version 1.2.155 - May 14, 2020\n## Bug Fixes\n* All: Fixed compiler error when build with Unity 5.4 or below due to the\n  usage of Rect.zero.\n* All: Ignore cases when checking command line arguments.\n\n# Version 1.2.154 - May 14, 2020\n## Bug Fixes\n* All: Make each MultiSelectWindow for different purposes to have its own\n  unique window.\n\n## Changes\n* All: Replace all dialog with DialogWindow which is implemented from\n  EditorWindow.\n* Package Manager Resolver: Clarify how manifest.json will be changed in Package\n  Manager Resolver window.\n\n# Version 1.2.153 - Apr 24, 2020\n## Bug Fixes\n* Android Resolver: Fixed an exception when repainting the Android resolution\n  window in Unity 2019.3.x.\n\n# Version 1.2.152 - Apr 17, 2020\n## Bug Fixes\n* Version Handler: Fixed exception when waiting for enabled editor DLLs to\n  load.\n* Android Resolver: Fixed regression when using a Custom Gradle Template\n  on Windows.\n\n# Version 1.2.151 - Apr 16, 2020\n## Bug Fixes\n* Version Handler: When waiting for newly enabled editor DLLs to load, ignore\n  all DLLs that do not have a file-system location.\n* Android Resolver: Fixed resolution when using a Custom Gradle Template with\n  libraries stored in a local maven repository distributed with a plugin\n  installed with the Unity Package Manager.\n\n# Version 1.2.150 - Apr 9, 2020\n## Bug Fixes\n* All: The new packaging script when run on MacOS was generating a\n  .unitypackage archive that could not be read by Unity on Windows.\n  This release simply repackages the plugin with tar/gzip to fix the problem.\n\n# Version 1.2.149 - Apr 8, 2020\n## Bug Fixes\n* Package Manager Resolver: Fixed spurious error message when resuming\n  migration after installing a UPM package.\n\n# Version 1.2.148 - Apr 8, 2020\n## Bug Fixes\n* Package Manager Resolver: Fixed an exception when resuming migration\n  after installing a UPM package.\n\n# Version 1.2.147 - Apr 8, 2020\n## Bug Fixes\n* Version Handler: Fixed alias traversal bug which caused problems when\n  migrating from installed .unitypackage files to UPM packages.\n\n# Version 1.2.146 - Apr 8, 2020\n## Bug Fixes\n* Version Handler: Fixed exception in manifest parsing when a manifest is\n  detected with no aliases.\n\n# Version 1.2.145 - Apr 2, 2020\n## New Features\n* Package Manager Resolver: Added a method to migrate Version Handler\n  managed packages installed via `.unitypackage` to Unity Package Manager\n  packages. This is initially used to migrate the External Dependency Manager\n  to UPM.\n\n## Changes\n* All: Verbose logging is now no longer automatically enabled in batch mode\n  across all components. Instead logging can be configured using each\n  component's verbose logging setting or by using the `-gvh_log_debug` command\n  line flag when starting Unity.\n* Version Handler: Sped up version handler updates when the app domain isn't\n  reloaded.\n\n## Bug Fixes\n* Version Handler: Fixed the display of the obsolete files clean up dialog\n  when the asset database refreshes.\n* Version Handler: Improved reliability of callback from\n  the VersionHandler.UpdateCompleteMethods event when an asset database\n  refresh occurs.\n* Version Handler: Fixed duplicate exportPath labels when 'Assets/' is the\n  root of paths assigned to files.\n* Version Handler: Handle empty lines in manifest files.\n\n# Version 1.2.144 - Mar 23, 2020\n## Changed\n* iOS Resolver: Removed the ability to configure the Xcode target a Cocoapod\n  is added to.\n\n## Bug Fixes\n* iOS Resolver: Reverted support for adding Cocoapods to multiple targets as\n  it caused a regression (exception thrown during post-build step) in some\n  versions of Unity.\n\n# Version 1.2.143 - Mar 20, 2020\n## Bug Fixes\n* Android Resolver: Fixed caching of resolution state which was causing\n  the resolver to always run when no dependencies had changed.\n\n# Version 1.2.142 - Mar 19, 2020\n## Changes\n* Package Manager Resolver: Enabled auto-add by default.\n\n# Version 1.2.141 - Mar 19, 2020\n## Bug Fixes\n* Fixed a bug when retrieving project settings. If a plugin was configured\n  to fetch project settings, if a setting was fetched (e.g \"foo\") and this\n  setting existed in the system settings but not the project settings the\n  system value would override the default value leading to unexpected\n  behavior.\n* Fixed a warning when caching web request classes in Unity 5.6.\n\n# Version 1.2.140 - Mar 19, 2020\n## Bug Fixes\n* Fixed measurement reporting in Unity 5.x.\n* Version Handler: Fixed NullReferenceException when an asset doesn't have\n  an AssetImporter.\n\n# Version 1.2.139 - Mar 18, 2020\n## Changed\n* Added documentation to the built plugin.\n\n# Version 1.2.138 - Mar 17, 2020\n## New Features\n* Package Manager Resolver: Added the Package Manager Resolver\n  component that allows developers to easily boostrap Unity Package Manager\n  (UPM) registry addition using unitypackage plugins.\n* Version Handler: Added a window that allows plugins to managed by the\n  Version Handler to be uninstalled.\n* Version Handler: Added support for displaying installed plugins.\n* Version Handler: Added support for moving files in plugins to their install\n  locations (if the plugin has been configured to support this).\n* iOS Resolver: Added the ability to configure the Xcode target a Cocoapod is\n  added to.\n\n## Bug Fixes\n* Fixed upgrade from version 1.2.137 and below after the plugin rename to\n  EDM4U broke the upgrade process.\n* Android Resolver: Worked around PlayerSettings.Android.targetSdkVersion\n  returning empty names for some values in 2019.x.\n* Version Handler: Fixed the display of the obsolete files clean up window.\n* Version Handler: Fixed managed file check when assets are modified in the\n  project after plugin import.\n\n# Version 1.2.137 - Mar 6, 2020\n## Changed\n* Renamed package to External Package Manager for Unity (EDM4U).\n  We changed this to reflect what this plugin is doing today which is far more\n  than the original scope which just consisted of importing jar files from the\n  Android SDK maven repository.\n  Scripts that used to pull `play-services-resolver*.unitypackage` will now have\n  to request `external-dependency-manager*.unitypackage` instead.\n  We'll still be shipping a `play-services-resolver*_manifest.txt` file to\n  handle upgrading from older versions of the plugin.\n\n## New Features\n* All Components: Added reporting of usage so that we can remotely detect\n  errors and target improvements.\n* Android Resolver: Added support for *Dependencies.xml files in Unity Package\n  Manager packages.\n* iOS Resolver: Added support for *Dependencies.xml files in Unity Package\n  Manager packages.\n\n## Bug Fixes\n* Version Handler: Disabled attempts to disable asset metadata modification\n  when assets are in a Unity Package Manager managed package.\n\n# Version 1.2.136 - Feb 19, 2019\n## Bug Fixes\n* Android Resolver: Fixed OpenJDK path discovery in Unity 2019.3.1.\n\n# Version 1.2.135 - Dec 5, 2019\n## Bug Fixes\n* All Components: Fixed stack overflow when loading project settings.\n\n# Version 1.2.134 - Dec 4, 2019\n## Bug Fixes\n* All Components: Fixed an issue which caused project settings to be cleared\n  when running in batch mode.\n\n# Version 1.2.133 - Nov 18, 2019\n## Bug Fixes\n* All Components: Failure to save project settings will now report an error\n  to the log rather than throwing an exception.\n\n# Version 1.2.132 - Nov 11, 2019\n## Bug Fixes\n* Android Resolver: Worked around expansion of DIR_UNITYPROJECT on Windows\n  breaking Gradle builds when used as part of a file URI.\n* Android Resolver: mainTemplate.gradle is only written if it needs to be\n  modified.\n\n# Version 1.2.131 - Oct 29, 2019\n## Bug Fixes\n* Version Handler: Improved execution of events on the main thread in batch\n  mode.\n* Version Handler: Improved log level configuration at startup.\n* Version Handler: Improved performance of class lookup in deferred method\n  calls.\n* Version Handler: Fixed rename to enable / disable for editor assets.\n* iOS Resolver: Improved log level configuration at startup.\n* Android Resolver: Improved local maven repo path reference in\n  mainTemplate.gradle using DIR_UNITYPROJECT.  DIR_UNITYPROJECT by Unity\n  to point to the local filesystem path of the Unity project when Unity\n  generates the Gradle project.\n\n# Version 1.2.130 - Oct 23, 2019\n## New Features\n* iOS Resolver: Added support for modifying the Podfile before `pod install`\n  is executed.\n\n## Bug Fixes\n* Version Handler: Fixed invalid classname error when calling\n  `VersionHandler.UpdateVersionedAssets()`.\n\n# Version 1.2.129 - Oct 2, 2019\n## Bug Fixes\n* iOS Resolver: Changed Cocoapod integration in Unity 2019.3+ to\n  only add Pods to the UnityFramework target.\n\n# Version 1.2.128 - Oct 1, 2019\n## Bug Fixes\n* iOS Resolver: Fixed Cocoapod project integration mode with Unity\n  2019.3+.\n\n# Version 1.2.127 - Sep 30, 2019\n## Changes\n* Android Resolver: All Android Resolver settings File paths are now\n  serialized with POSIX directory separators.\n\n# Version 1.2.126 - Sep 27, 2019\n## Changes\n* Android Resolver: File paths are now serialized with POSIX directory\n  separators.\n## Bug Fixes\n* Android Resolver: Fixed resolution when the parent directory of a Unity\n  project contains a Gradle project (i.e `settings.gradle` file).\n\n# Version 1.2.125 - Sep 23, 2019\n## Bug Fixes\n* All components: Silenced a warning about not being able to set the console\n  encoding to UTF8.\n* Android Resolver: Worked around broken AndroidSDKTools class in some\n  versions of Unity.\n* iOS Resolver: Fixed iOS target SDK version check\n* Version Handler: Changed clean up obsolete files window so that it doesn't\n  exceed the screen size.\n\n# Version 1.2.124 - Jul 28, 2019\n## Bug Fixes\n* All components: Fixed regression with source control integration when using\n  Unity 2019.1+.\n\n# Version 1.2.123 - Jul 23, 2019\n## New Features\n* All components: Source control integration for project settings.\n## Changes\n* Android Resolver: Removed AAR cache as it now makes little difference to\n  incremental resolution performance.\n* Android Resolver: Improved embedded resource management so that embedded\n  resources should upgrade when the plugin is updated without restarting\n  the Unity editor.\n## Bug Fixes\n* Version Handler: Fixed InvokeMethod() and InvokeStaticMethod() when calling\n  methods that have interface typed arguments.\n\n# Version 1.2.122 - Jul 2, 2019\n## Bug Fixes\n* iOS Resolver: Worked around Unity not loading the iOS Resolver DLL as it\n  referenced the Xcode extension in a public interface.  The iOS Resolver\n  DLL still references the Xcode extension internally and just handles\n  missing type exceptions dynamically.\n\n# Version 1.2.121 - Jun 27, 2019\n## Bug Fixes\n* Android Resolver: Fixed warning about missing Packages folder when loading\n  XML dependencies files in versions of Unity without the package manager.\n* Android Resolver: Fixed resolution window progress bar exceeding 100%.\n* Android Resolver: If AndroidX is detected in the set of resolved libraries,\n  the user will be prompted to enable the Jetifier.\n* Android Resolver: Improved text splitting in text area windows.\n* iOS Resolver: Added support for Unity's breaking changes to the Xcode API\n  in 2019.3.+. Cocoapods are now added to build targets, Unity-iPhone and\n  UnityFramework in Unity 2019.3+.\n\n# Version 1.2.120 - Jun 26, 2019\n## New Features\n* Android Resolver: Added support for loading *Dependencies.xml files from\n  Unity Package Manager packages.\n* Android Resolver: Resolution window is now closed if resolution runs as\n  a pre-build step.\n* iOS Resolver: Added support for loading *Dependencies.xml files from\n  Unity Package Manager packages.\n## Bug Fixes\n* Android Resolver: Fixed generation of relative repo paths when using\n  mainTemplate.gradle resolver.\n* Android Resolver: Fixed copy of .srcaar to .aar files in repos embedded in a\n  project when a project path has characters (e.g whitespace) that are escaped\n  during conversion to URIs.\n* Android Resolver: Fixed auto-resolution always running if the Android SDK\n  is managed by Unity Hub.\n\n# Version 1.2.119 - Jun 19, 2019\n## Bug Fixes\n* Android Resolver: Fixed error reported when using Jetifier integration\n  in Unity 2018+ if the target SDK is set to \"highest installed\".\n\n# Version 1.2.118 - Jun 18, 2019\n## New Features\n* Android Resolver: Added initial\n  [Jetifier](https://developer.android.com/studio/command-line/jetifier)\n  integration which simplifies\n  [migration](ttps://developer.android.com/jetpack/androidx/migrate)\n  to Jetpack ([AndroidX](https://developer.android.com/jetpack/androidx))\n  libraries in cases where all dependencies are managed by the Android\n  Resolver.\n  This can be enabled via the `Use Jetifier` option in the\n  `Assets > Play Services Resolver > Android Resolver > Settings` menu.\n  Caveats:\n  - If your project contains legacy Android Support Library .jar and .aar\n    files, these files will need to be removed and replaced with references to\n    artifacts on Maven via `*Dependencies.xml` files so that the Jetifier\n    can map them to Jetpack (AndroidX) libraries.\n    For example, remove the file `support-v4-27.0.2.jar` and replace it with\n    `<androidPackage spec=\"com.android.support:support-v4:27.0.2\"/>` in a\n    `*Dependencies.xml` file.\n  - If your project contains .jar or .aar files that use the legacy Android\n    Support Libraries, these will need to be moved into a local Maven repo\n    [See this guide](https://maven.apache.org/guides/mini/guide-3rd-party-jars-local.html)\n    and then these files should be removed from your Unity project and instead\n    referenced via `*Dependencies.xml` files so that the Jetifier can\n    patch them to reference the Jetpack lirbaries.\n\n## Bug Fixes\n* Android Resolver: Disabled version locking of com.android.support:multidex\n  does not use the same versioning scheme as other legacy Android support\n  libraries.\n* Version Handler: Made Google.VersionHandler.dll's asset GUID stable across\n  releases.  This faciliates error-free import into projects where\n  Google.VersionHandler.dll is moved from the default install location.\n\n# Version 1.2.117 - Jun 12, 2019\n## Bug Fixes\n* Android Resolver: Fix copying of .srcaar to .aar files for\n  mainTemplate.gradle resolution.  PluginImporter configuration was previously\n  not being applied to .aar files unless the Unity project was saved.\n\n# Version 1.2.116 - Jun 7, 2019\n## Bug Fixes\n* Android Resolver: Fixed resolution of Android dependencies without version\n  specifiers.\n* Android Resolver: Fixed Maven repo not found warning in Android Resolver.\n* Android Resolver: Fixed Android Player directory not found exception in\n  Unity 2019.x when the Android Player isn't installed.\n\n# Version 1.2.115 - May 28, 2019\n## Bug Fixes\n* Android Resolver: Fixed exception due to Unity 2019.3.0a4 removing\n  x86 from the set of supported ABIs.\n\n# Version 1.2.114 - May 27, 2019\n## New Features\n* Android Resolver: Added support for ABI stripping when using\n  mainTemplate.gradle. This only works with AARs stored in repos\n  on the local filesystem.\n\n# Version 1.2.113 - May 24, 2019\n## New Features\n* Android Resolver: If local repos are moved, the plugin will search the\n  project for matching directories in an attempt to correct the error.\n* Version Handler: Files can be now targeted to multiple build targets\n  using multiple \"gvh_\" asset labels.\n## Bug Fixes\n* Android Resolver: \"implementation\" or \"compile\" are now added correctly\n  to mainTemplate.gradle in Unity versions prior to 2019.\n\n# Version 1.2.112 - May 22, 2019\n## New Features\n* Android Resolver: Added option to disable addition of dependencies to\n  mainTemplate.gradle.\n  See `Assets > Play Services Resolver > Android Resolver > Settings`.\n* Android Resolver: Made paths to local maven repositories in\n  mainTemplate.gradle relative to the Unity project when a project is not\n  being exported.\n## Bug Fixes\n* Android Resolver: Fixed builds with mainTemplate.gradle integration in\n  Unity 2019.\n* Android Resolver: Changed dependency inclusion in mainTemplate.gradle to\n  use \"implementation\" or \"compile\" depending upon the version of Gradle\n  included with Unity.\n* Android Resolver: Gracefully handled exceptions if the console encoding\n  can't be modified.\n* Android Resolver: Now gracefully fails if the AndroidPlayer directory\n  can't be found.\n\n# Version 1.2.111 - May 9, 2019\n## Bug Fixes\n* Version Handler: Fixed invocation of methods with named arguments.\n* Version Handler: Fixed occasional hang when the editor is compiling\n  while activating plugins.\n\n# Version 1.2.110 - May 7, 2019\n## Bug Fixes\n* Android Resolver: Fixed inclusion of some srcaar artifacts in builds with\n  Gradle builds when using mainTemplate.gradle.\n\n# Version 1.2.109 - May 6, 2019\n## New Features:\n* Added links to documentation from menu.\n* Android Resolver: Added option to auto-resolve Android libraries on build.\n* Android Resolver: Added support for packaging specs of Android libraries.\n* Android Resolver: Pop up a window when displaying Android dependencies.\n\n## Bug Fixes\n* Android Resolver: Support for Unity 2019 Android SDK and JDK install locations\n* Android Resolver: e-enable AAR explosion if internal builds are enabled.\n* Android Resolver: Gracefully handle exceptions on file deletion.\n* Android Resolver: Fixed Android Resolver log spam on load.\n* Android Resolver: Fixed save of Android Resolver PromptBeforeAutoResolution\n  setting.\n* Android Resolver: Fixed AAR processing failure when an AAR without\n  classes.jar is found.\n* Android Resolver: Removed use of EditorUtility.DisplayProgressBar which\n  was occasionally left displayed when resolution had completed.\n* Version Handler: Fixed asset rename to disable when a disabled file exists.\n\n# Version 1.2.108 - May 3, 2019\n## Bug Fixes:\n* Version Handler: Fixed occasional hang on startup.\n\n# Version 1.2.107 - May 3, 2019\n## New Features:\n* Version Handler: Added support for enabling / disabling assets that do not\n  support the PluginImporter, based upon build target selection.\n* Android Resolver: Added support for the global specification of maven repos.\n* iOS Resolver: Added support for the global specification of Cocoapod sources.\n\n# Version 1.2.106 - May 1, 2019\n## New Features\n* iOS Resolver: Added support for development pods in Xcode project integration\n  mode.\n* iOS Resolver: Added support for source pods with resources in Xcode project\n  integration mode.\n\n# Version 1.2.105 - Apr 30, 2019\n## Bug fixes\n* Android Resolver: Fixed reference to Java tool path in logs.\n* Android and iOS Resolvers: Changed command line execution to emit a warning\n  rather than throwing an exception and failing, when it is not possible to\n  change the console input and output encoding to UTF-8.\n* Android Resolver: Added menu option and API to delete resolved libraries.\n* Android Resolver: Added menu option and API to log the repos and libraries\n  currently included in the project.\n* Android Resolver: If Plugins/Android/mainTemplate.gradle file is present and\n  Gradle is selected as the build type, resolution will simply patch the file\n  with Android dependencies specified by plugins in the project.\n\n# Version 1.2.104 - Apr 10, 2019\n## Bug Fixes\n* Android Resolver: Changed Android ABI selection method from using whitelisted\n  Unity versions to type availability.  This fixes an exception on resolution\n  in some versions of Unity 2017.4.\n\n# Version 1.2.103 - Apr 2, 2019\n## Bug Fixes\n* Android Resolver: Whitelisted Unity 2017.4 and above with ARM64 support.\n* Android Resolver: Fixed Java version check to work with Java SE 12 and above.\n\n# Version 1.2.102 - Feb 13, 2019\n## Bug Fixes\n* Android Resolver: Fixed the text overflow on the Android Resolver\n  prompt before initial run to fit inside the buttons for\n  smaller screens.\n\n# Version 1.2.101 - Feb 12, 2019\n## New Features\n* Android Resolver: Prompt the user before the resolver runs for the\n  first time and allow the user to elect to disable from the prompt.\n* Android Resolver: Change popup warning when resolver is disabled\n  to be a console warning.\n\n# Version 1.2.100 - Jan 25, 2019\n## Bug Fixes\n* Android Resolver: Fixed AAR processing sometimes failing on Windows\n  due to file permissions.\n\n# Version 1.2.99 - Jan 23, 2019\n## Bug Fixes\n* Android Resolver: Improved performance of project property polling.\n* Version Handler: Fixed callback of VersionHandler.UpdateCompleteMethods\n  when the update process is complete.\n\n# Version 1.2.98 - Jan 9, 2019\n## New Features\n* iOS Resolver: Pod declaration properties can now be set via XML pod\n  references.  For example, this can enable pods for a subset of build\n  configurations.\n## Bug Fixes\n* iOS Resolver: Fixed incremental builds after local pods support caused\n  regression in 1.2.96.\n\n# Version 1.2.97 - Dec 17, 2018\n## Bug Fixes\n* Android Resolver: Reduced memory allocation for logic that monitors build\n  settings when auto-resolution is enabled.  If auto-resolution is disabled,\n  almost all build settings are no longer polled for changes.\n\n# Version 1.2.96 - Dec 17, 2018\n## Bug Fixes\n* Android Resolver: Fixed repacking of AARs to exclude .meta files.\n* Android Resolver: Only perform auto-resolution on the first scene while\n  building.\n* Android Resolver: Fixed parsing of version ranges that include whitespace.\n* iOS Resolver: Added support for local development pods.\n* Version Handler: Fixed Version Handler failing to rename some files.\n\n# Version 1.2.95 - Oct 23, 2018\n## Bug Fixes:\n* Android Resolver: Fixed auto-resolution running in a loop in some scenarios.\n\n# Version 1.2.94 - Oct 22, 2018\n## Bug Fixes\n* iOS Resolver: Added support for PODS_TARGET_SRCROOT in source Cocoapods.\n\n# Version 1.2.93 - Oct 22, 2018\n## Bug Fixes\n* Android Resolver: Fixed removal of Android libraries on auto-resolution when\n  `*Dependencies.xml` files are deleted.\n\n# Version 1.2.92 - Oct 2, 2018\n## Bug Fixes\n* Android Resolver: Worked around auto-resolution hang on Windows if\n  resolution starts before compilation is finished.\n\n# Version 1.2.91 - Sep 27, 2018\n## Bug Fixes\n* Android Resolver: Fixed Android Resolution when the selected build target\n  isn't Android.\n* Added C# assembly symbols the plugin to simplify debugging bug reports.\n\n# Version 1.2.90 - Sep 21, 2018\n## Bug Fixes\n* Android Resolver: Fixed transitive dependency selection of version locked\n  packages.\n\n# Version 1.2.89 - Aug 31, 2018\n## Bug Fixes\n* Fixed FileLoadException in ResolveUnityEditoriOSXcodeExtension an assembly\n  can't be loaded.\n\n# Version 1.2.88 - Aug 29, 2018\n## Changed\n* Improved reporting of resolution attempts and conflicts found in the Android\n  Resolver.\n## Bug Fixes\n* iOS Resolver now correctly handles sample code in CocoaPods.  Previously it\n  would add all sample code to the project when using project level\n  integration.\n* Android Resolver now correctly handles Gradle conflict resolution when the\n  resolution results in a package that is compatible with all requested\n  dependencies.\n\n# Version 1.2.87 - Aug 23, 2018\n## Bug Fixes\n* Fixed Android Resolver \"Processing AARs\" dialog getting stuck in Unity 5.6.\n\n# Version 1.2.86 - Aug 22, 2018\n## Bug Fixes\n* Fixed Android Resolver exception in OnPostProcessScene() when the Android\n  platform isn't selected.\n\n# Version 1.2.85 - Aug 17, 2018\n## Changes\n* Added support for synchronous resolution in the Android Resolver.\n  PlayServicesResolver.ResolveSync() now performs resolution synchronously.\n* Auto-resolution in the Android Resolver now results in synchronous resolution\n  of Android dependencies before the Android application build starts via\n  UnityEditor.Callbacks.PostProcessSceneAttribute.\n\n# Version 1.2.84 - Aug 16, 2018\n## Bug Fixes\n* Fixed Android Resolver crash when the AndroidResolverDependencies.xml\n  file can't be written.\n* Reduced log spam when a conflicting Android library is pinned to a\n  specific version.\n\n# Version 1.2.83 - Aug 15, 2018\n## Bug Fixes\n* Fixed Android Resolver failures due to an in-accessible AAR / JAR explode\n  cache file.  If the cache can't be read / written the resolver now continues\n  with reduced performance following recompilation / DLL reloads.\n* Fixed incorrect version number in plugin manifest on install.\n  This was a minor issue since the version handler rewrote the metadata\n  after installation.\n\n# Version 1.2.82 - Aug 14, 2018\n## Changed\n* Added support for alphanumeric versions in the Android Resolver.\n\n## Bug Fixes\n* Fixed Android Resolver selection of latest duplicated library.\n* Fixed Android Resolver conflict resolution when version locked and non-version\n  locked dependencies are specified.\n* Fixed Android Resolver conflict resolution when non-existent artifacts are\n  referenced.\n\n# Version 1.2.81 - Aug 9, 2018\n## Bug Fixes\n* Fixed editor error that would occur when when\n  `PlayerSettings.Android.targetArchitectures` was set to\n  `AndroidArchitecture.All`.\n\n# Version 1.2.80 - Jul 24, 2018\n## Bug Fixes\n* Fixed project level settings incorrectly falling back to system wide settings\n  when default property values were set.\n\n# Version 1.2.79 - Jul 23, 2018\n## Bug Fixes\n* Fixed AndroidManifest.xml patching on Android Resolver load in Unity 2018.x.\n\n# Version 1.2.78 - Jul 19, 2018\n## Changed\n* Added support for overriding conflicting dependencies.\n\n# Version 1.2.77 - Jul 19, 2018\n## Changed\n* Android Resolver now supports Unity's 2018 ABI filter (i.e arm64-v8a).\n* Reduced Android Resolver build option polling frequency.\n* Disabled Android Resolver auto-resolution in batch mode.  Users now need\n  to explicitly kick off resolution through the API.\n* All Android Resolver and Version Handler dialogs are now disabled in batch\n  mode.\n* Verbose logging for all plugins is now enabled by default in batch mode.\n* Version Handler bootstrapper has been improved to no longer call\n  UpdateComplete multiple times.  However, since Unity can still reload the\n  app domain after plugins have been enabled, users still need to store their\n  plugin state to persistent storage to handle reloads.\n\n## Bug Fixes\n* Android Resolver no longer incorrectly adds MANIFEST.MF files to AARs.\n* Android Resolver auto-resolution jobs are now unscheduled when an explicit\n  resolve job is started.\n\n# Version 1.2.76 - Jul 16, 2018\n## Bug Fixes\n* Fixed variable replacement in AndroidManifest.xml files in the Android\n  Resolver.\n  Version 1.2.75 introduced a regression which caused all variable replacement\n  to replace the *entire* property value rather than the component of the\n  property that referenced a variable.  For example,\n  given \"applicationId = com.my.app\", \"${applicationId}.foo\" would be\n  incorrectly expanded as \"com.my.app\" rather than \"com.my.app.foo\".  This\n  resulted in numerous issues for Android builds where content provider\n  initialization would fail and services may not start.\n\n## Changed\n* Gradle prebuild experimental feature has been removed from the Android\n  Resolver.  The feature has been broken for some time and added around 8MB\n  to the plugin size.\n* Added better support for execution of plugin components in batch mode.\n  In batch mode UnityEditor.update is sometimes never called - like when a\n  single method is executed - so the new job scheduler will execute all jobs\n  synchronously from the main thread.\n\n# Version 1.2.75 - Jun 20, 2018\n## New Features\n* Android Resolver now monitors the Android SDK path when\n  auto-resolution is enabled and triggers resolution when the path is\n  modified.\n\n## Changed\n* Android auto-resolution is now delayed by 3 seconds when the following build\n  settings are changed:\n  - Target ABI.\n  - Gradle build vs. internal build.\n  - Project export.\n* Added a progress bar display when AARs are being processed during Android\n  resolution.\n\n## Bug Fixes\n* Fixed incorrect Android package version selection when a mix of\n  version-locked and non-version-locked packages are specified.\n* Fixed non-deterministic Android package version selection to select\n  the highest version of a specified package rather than the last\n  package specification passed to the Gradle resolution script.\n\n# Version 1.2.74 - Jun 19, 2018\n## New Features\n* Added workaround for broken AndroidManifest.xml variable replacement in\n  Unity 2018.x.  By default ${applicationId} variables will be replaced by\n  the bundle ID in the Plugins/Android/AndroidManifest.xml file.  The\n  behavior can be disabled via the Android Resolver settings menu.\n\n# Version 1.2.73 - May 30, 2018\n## Bug Fixes\n* Fixed spurious warning message about missing Android plugins directory on\n  Windows.\n\n# Version 1.2.72 - May 23, 2018\n## Bug Fixes\n* Fixed spurious warning message about missing Android plugins directory.\n\n# Version 1.2.71 - May 10, 2018\n## Bug Fixes\n* Fixed resolution of Android dependencies when the `Assets/Plugins/Android`\n  directory is named in a different case e.g `Assets/plugins/Android`.\n\n# Version 1.2.70 - May 7, 2018\n## Bug Fixes\n* Fixed bitcode flag being ignored for iOS pods.\n\n# Version 1.2.69 - May 7, 2018\n## Bug Fixes\n* Fixed escaping of local repository paths in Android Resolver.\n\n# Version 1.2.68 - May 3, 2018\n## Changes\n* Added support for granular builds of Google Play Services.\n\n# Version 1.2.67 - May 1, 2018\n## Changes\n* Improved support for iOS source-only pods in Unity 5.5 and below.\n\n# Version 1.2.66 - April 27, 2018\n## Bug Fixes\n* Fixed Version Handler renaming of Linux libraries with hyphens in filenames.\n  Previously, libraries named Foo-1.2.3.so were not being renamed to\n  libFoo-1.2.3.so on Linux which could break native library loading on some\n  versions of Unity.\n\n# Version 1.2.65 - April 26, 2018\n## Bug Fixes\n* Fix CocoaPods casing in logs and comments.\n\n# Version 1.2.64 - Mar 16, 2018\n## Bug Fixes\n* Fixed bug in download_artifacts.gradle (used by Android Resolver) which\n  reported a failure if required artifacts already exist.\n\n# Version 1.2.63 - Mar 15, 2018\n## Bug Fixes\n* Fixed iOS Resolver include search paths taking precedence over system headers\n  when using project level resolution.\n* Fixed iOS Resolver includes relative to library root, when using project level\n  resolution.\n\n# Version 1.2.62 - Mar 12, 2018\n## Changes\n* Improved error reporting when a file can't be moved to trash by the\n  Version Handler.\n## Bug Fixes\n* Fixed Android Resolver throwing NullReferenceException when the Android SDK\n  path isn't set.\n* Fixed Version Handler renaming files with underscores if the\n  \"Rename to Canonical Filenames\" setting is enabled.\n\n# Version 1.2.61 - Jan 22, 2018\n## Bug Fixes\n* Fixed Android Resolver reporting non-existent conflicting dependencies when\n  Gradle build system is enabled.\n\n# Version 1.2.60 - Jan 12, 2018\n## Changes\n* Added support for Maven / Ivy version specifications for Android packages.\n* Added support for Android SNAPSHOT packages.\n\n## Bug Fixes\n* Fixed Openjdk version check.\n* Fixed non-deterministic Android package resolution when two packages contain\n  an artifact with the same name.\n\n# Version 1.2.59 - Oct 19, 2017\n## Bug Fixes\n* Fixed execution of Android Gradle resolution script when it's located\n  in a path with whitespace.\n\n# Version 1.2.58 - Oct 19, 2017\n## Changes\n* Removed legacy resolution method from Android Resolver.\n  It is now only possible to use the Gradle or Gradle prebuild resolution\n  methods.\n\n# Version 1.2.57 - Oct 18, 2017\n## Bug Fixes\n* Updated Gradle wrapper to 4.2.1 to fix issues using Gradle with the\n  latest Openjdk.\n* Android Gradle resolution now also uses gradle.properties to pass\n  parameters to Gradle in an attempt to workaround problems with\n  command line argument parsing on Windows 10.\n\n# Version 1.2.56 - Oct 12, 2017\n## Bug Fixes\n* Fixed Gradle artifact download with non-version locked artifacts.\n* Changed iOS resolver to only load dependencies at build time.\n\n# Version 1.2.55 - Oct 4, 2017\n## Bug Fixes\n* Force Android Resolution when the \"Install Android Packages\" setting changes.\n\n# Version 1.2.54 - Oct 4, 2017\n## Bug Fixes\n* Fixed execution of command line tools on Windows when the path to the tool\n  contains a single quote (apostrophe).  In this case we fallback to executing\n  the tool via the system shell.\n\n# Version 1.2.53 - Oct 2, 2017\n## New Features\n* Changed Android Resolver \"resolution complete\" dialog so that it now displays\n  failures.\n* Android Resolver now detects conflicting libraries that it does not manage\n  warning the user if they're newer than the managed libraries and prompting\n  the user to clean them up if they're older or at the same version.\n\n## Bug Fixes\n* Improved Android Resolver auto-resolution speed.\n* Fixed bug in the Gradle Android Resolver which would result in resolution\n  succeeding when some dependencies are not found.\n\n# Version 1.2.52 - Sep 25, 2017\n## New Features\n* Changed Android Resolver's Gradle resolution to resolve conflicting\n  dependencies across Google Play services and Android Support library packages.\n\n# Version 1.2.51 - Sep 20, 2017\n## Changes\n* Changed iOS Resolver to execute the CocoaPods \"pod\" command via the shell\n  by default.  Some developers customize their shell environment to use\n  custom ssh certs to access internal git repositories that host pods so\n  executing \"pod\" via the shell will work for these scenarios.\n  The drawback of executing \"pod\" via the shell could potentially cause\n  users problems if they break their shell environment.  Though users who\n  customize their shell environments will be able to resolve these issues.\n\n# Version 1.2.50 - Sep 18, 2017\n## New Features\n* Added option to disable the Gradle daemon in the Android Resolver.\n  This daemon is now disabled by default as some users are getting into a state\n  where multiple daemon instances are being spawned when changing dependencies\n  which eventually results in Android resolution failing until all daemon\n  processes are manually killed.\n\n## Bug Fixes\n* Android resolution is now always executed if the user declines the update\n  of their Android SDK.  This ensure users can continue to use out of date\n  Android SDK packages if they desire.\n\n# Version 1.2.49 - Sep 18, 2017\n## Bug Fixes\n* Removed modulemap parsing in iOS Resolver.\n  The framework *.modulemap did not need to be parsed by the iOS Resolver\n  when injecting Cocoapods into a Xcode project.  Simply adding a modular\n  framework to a Xcode project results in Xcode's Clang parsing the associated\n  modulemap and injecting any compile and link flags into the build process.\n\n# Version 1.2.48 - Sep 12, 2017\n## New Features\n* Changed settings to be per-project by default.\n\n## Bug Fixes\n* Added Google maven repository to fix GradlePrebuild resolution with Google\n  components.\n* Fixed Android Resolution failure with spaces in paths.\n\n# Version 1.2.47 - Aug 29, 2017\n## New Features\n* Android and iOS dependencies can now be specified using *Dependencies.xml\n  files.  This is now the preferred method for registering dependencies,\n  we may remove the API for dependency addition in future.\n* Added \"Reset to Defaults\" button to each settings dialog to restore default\n  settings.\n* Android Resolver now validates the configured JDK is new enough to build\n  recently released Android libraries.\n## Bug Fixes\n* Fixed a bug that caused dependencies with the \"LATEST\" version specification\n  to be ignored when using the Gradle mode of the Android Resolver.\n* Fixed a race condition when running Android Resolution.\n* Fixed Android Resolver logging if a PlayServicesSupport instance is created\n  with no logging enabled before the Android Resolver is initialized.\n* Fixed iOS resolver dialog in Unity 4.\n* Fixed iOS Cocoapod Xcode project integration in Unity 4.\n\n# Version 1.2.46 - Aug 22, 2017\n## Bug Fixes\n* GradlePrebuild Android resolver on Windows now correctly locates dependent\n  data files.\n\n# Version 1.2.45 - Aug 22, 2017\n## Bug Fixes\n* Improved Android package auto-resolution and fixed clean up of stale\n  dependencies when using Gradle dependency resolution.\n\n# Version 1.2.44 - Aug 21, 2017\n## Bug Fixes\n* Enabled autoresolution for Gradle Prebuild.\n* Made the command line dialog windows have selectable text.\n* Fixed incorrect \"Android Settings\" dialog disabled groups.\n* Updated PlayServicesResolver android platform detection to use the package\n  manager instead of the 'android' tool.\n* UnityCompat reflection methods 'GetAndroidPlatform' and\n  'GetAndroidBuildToolsVersion' are now Obsolete due to dependence on the\n  obsolete 'android' build tool.\n\n# Version 1.2.43 - Aug 18, 2017\n## Bug Fixes\n* Fixed Gradle resolution in the Android Resolver when running\n  PlayServicesResolver.Resolve() in parallel or spawning multiple\n  resolutions before the previous resolve completed.\n\n# Version 1.2.42 - Aug 17, 2017\n## Bug Fixes\n* Fixed Xcode project level settings not being applied by IOS Resolver when\n  Xcode project pod integration is enabled.\n\n# Version 1.2.41 - Aug 15, 2017\n## Bug Fixes\n* IOS Resolver's Xcode workspace pod integration is now disabled when Unity\n  Cloud Build is detected.  Unity Cloud Build does not follow the same build\n  process as the Unity editor and fails to open the generated xcworkspace at\n  this time.\n\n# Version 1.2.40 - Aug 15, 2017\n## Bug Fixes\n* Moved Android Resolver Gradle Prebuild scripts into Google.JarResolver.dll.\n  They are now extracted from the DLL when required.\n* AARs / JARs are now cleaned up when switching the Android resolution\n  strategy.\n\n# Version 1.2.39 - Aug 10, 2017\n## New Features\n* Android Resolver now supports resolution with Gradle.  This enables support\n  for non-local artifacts.\n## Bug Fixes\n* Android Resolver's Gradle Prebuild now uses Android build tools to determine\n  the Android platform tools version rather than relying upon internal Unity\n  APIs.\n* Android Resolver's Gradle Prebuild now correctly strips binaries that are\n  not required for the target ABI.\n\n# Version 1.2.38 - Aug 7, 2017\n## Bug Fixes\n* Fixed an issue in VersionHandler where disabled targets are ignored if\n  the \"Any Platform\" flag is set on a plugin DLL.\n\n# Version 1.2.37 - Aug 3, 2017\n## New Features\n* Exposed GooglePlayServices.PlayServicesResolver.Resolve() so that it's\n  possible for a script to be notified when AAR / Jar resolution is complete.\n  This makes it easier to setup a project to build from the command line.\n\n# Version 1.2.36 - Aug 3, 2017\n## New Features\n* VersionHandler.UpdateCompleteMethods allows a user to provide a list of\n  methods to be called when VersionHandlerImpl has completed an update.\n  This makes it easier to import a plugin and wait for VersionHandler to\n  execute prior executing a build.\n\n# Version 1.2.35 - Jul 28, 2017\n## New Features\n* VersionHandler will now rename Linux libraries so they can target Unity\n  versions that require different file naming.  Libraries need to be labelled\n  gvh_linuxlibname-${basename} in order to be considered for renaming.\n  e.g gvh\\_linuxlibname-MyLib will be named MyLib.so in Unity 5.5 and below and\n  libMyLib.so in Unity 5.6 and above.\n\n# Version 1.2.34 - Jul 28, 2017\n## Bug Fixes\n* Made VersionHandler bootstrap module more robust when calling static\n  methods before the implementation DLL is loaded.\n\n# Version 1.2.33 - Jul 27, 2017\n## New Features\n* Added a bootstrap module for VersionHandler so the implementation\n  of the VersionHandler module can be versioned without resulting in\n  a compile error when imported at different versions across multiple\n  plugins.\n\n# Version 1.2.32 - Jul 20, 2017\n## New Features\n* Added support for build target selection based upon .NET framework\n  version in the VersionHandler.\n  When applying either gvh\\_dotnet-3.5 or gvh\\_dotnet-4.5 labels to\n  assets, the VersionHandler will only enable the asset for the\n  specified set of build targets when the matching .NET framework version\n  is selected in Unity 2017's project settings.  This allows assets\n  to be provided in a plugin that need to differ based upon .NET version.\n\n# Version 1.2.31 - Jul 5, 2017\n## Bug Fixes\n* Force expansion of AARs with native components when using Unity 2017\n  with the internal build system.  In contrast to Unity 5.x, Unity 2017's\n  internal build system does not include native libraries included in AARs.\n  Forcing expansion of AARs with native components generates an\n  Ant / Eclipse project for each AAR which is correctly included by Unity\n  2017's internal build system.\n\n# Version 1.2.30 - Jul 5, 2017\n## Bug Fixes\n* Fixed Cocoapods being installed when the build target isn't iOS.\n* Added support for malformed AARs with missing classes.jar.\n\n# Version 1.2.29 - Jun 16, 2017\n## New Features\n* Added support for the Android sdkmanager tool.\n\n# Version 1.2.28 - Jun 8, 2017\n## Bug Fixes\n* Fixed non-shell command line execution (regression from\n  Cocoapod installation patch).\n\n# Version 1.2.27 - Jun 7, 2017\n## Bug Fixes\n* Added support for stdout / stderr redirection when executing\n  commands in shell mode.\n  This fixes CocoaPod tool installation when shell mode is\n  enabled.\n* Fixed incremental builds when additional sources are specified\n  in the Podfile.\n\n# Version 1.2.26 - Jun 7, 2017\n## Bug Fixes\n* Fixed a crash when importing Version Handler into Unity 4.7.x.\n\n# Version 1.2.25 - Jun 7, 2017\n## Bug Fixes\n* Fixed an issue in the Jar Resolver which incorrectly notified\n  event handlers of bundle ID changes when the currently selected\n  (not active) build target changed in Unity 5.6 and above.\n\n# Version 1.2.24 - Jun 6, 2017\n## New Features\n* Added option to control file renaming in Version Handler settings.\n  Disabling file renaming (default option) significantly increases\n  the speed of file version management operations with the downside\n  that any files that are referenced directly by canonical filename\n  rather than asset ID will no longer be valid.\n* Improved logging in the Version Handler.\n## Bug Fixes\n* Fixed an issue in the Version Handler which caused it to not\n  re-enable plugins when re-importing a custom package with disabled\n  version managed files.\n\n# Version 1.2.23 - May 26, 2017\n## Bug Fixes\n* Fixed a bug with gradle prebuild resolver on windows.\n\n# Version 1.2.22 - May 19, 2017\n## Bug Fixes\n* Fixed a bug in the iOS resolver with incremental builds.\n* Fixed misdetection of Cocoapods support with Unity beta 5.6.\n\n# Version 1.2.21 - May 8, 2017\n## Bug Fixes\n* Fix for https://github.com/googlesamples/unity-jar-resolver/issues/48\n  Android dependency version number parsing when \"-alpha\" (etc.) are\n  included in dependency (AAR / JAR) versions.\n\n# Version 1.2.20 - May 8, 2017\n## Bug Fixes\n* Attempted to fix\n  https://github.com/googlesamples/unity-jar-resolver/issues/48\n  where a NullReferenceException could occur if a target file does not\n  have a valid version string.\n\n# Version 1.2.19 - May 4, 2017\n## Bug Fixes\n* Fixed Jar Resolver exploding and deleting AAR files it isn't managing.\n\n# Version 1.2.18 - May 4, 2017\n## New Features\n* Added support for preserving Unity pods such as when GVR is enabled.\n\n# Version 1.2.17 - Apr 20, 2017\n## Bug Fixes\n* Fixed auto-resolution when an Android application ID is modified.\n\n# Version 1.2.16 - Apr 17, 2017\n## Bug Fixes\n* Fixed Unity version number parsing on machines with a locale that uses\n  \",\" for decimal points.\n* Fixed null reference exception if JDK path isn't set.\n\n# Version 1.2.15 - Mar 17, 2017\n## New Features\n* Added warning when the Jar Resolver's background resolution is disabled.\n## Bug Fixes\n* Fixed support of AARs with native libraries when using Gradle.\n* Fixed extra repository paths when resolving dependencies.\n\n# Version 1.2.14 - Mar 7, 2017\n## New Features\n* Added experimental Android resolution using Gradle.\n  This alternative resolver supports proguard stripping with Unity's\n  internal build system.\n* Added Android support for single ABI builds when using AARs include\n  native libraries.\n* Disabled Android resolution on changes to all .cs and .js files.\n  File patterns that are monitored for auto-resolution can be added\n  using PlayServicesResolver.AddAutoResolutionFilePatterns().\n* Added tracking of resolved AARs and JARs so they can be cleaned up\n  if they're no longer referenced by a project.\n* Added persistence of AAR / JAR version replacement for each Unity\n  session.\n* Added settings dialog to the iOS resolver.\n* Integrated Cocoapod tool installation in the iOS resolver.\n* Added option to run pod tool via the shell.\n## Bug Fixes\n* Fixed build of some source Cocoapods (e.g Protobuf).\n* VersionHandler no longer prompts to delete obsolete manifests.\n* iOS resolver handles Cocoapod installation when using Ruby < 2.2.2.\n* Added workaround for package version selection when including\n  Google Play Services on Android.\n* Fixed support for pods that reference static libraries.\n* Fixed support for resource-only pods.\n\n# Version 1.2.12 - Feb 14, 2017\n## Bug Fixes\n* Fixed re-explosion of AARs when the bundle ID is modified.\n\n# Version 1.2.11 - Jan 30, 2017\n## New Features\n* Added support for Android Studio builds.\n* Added support for native (C/C++) shared libraries in AARs.\n\n# Version 1.2.10 - Jan 11, 2017\n## Bug Fixes\n* Fixed SDK manager path retrieval.\n* Also, report stderr when it's not possible to run the \"pod\" tool.\n* Handle exceptions thrown by Unity.Cecil on asset rename\n* Fixed IOSResolver to handle PlayerSettings.iOS.targetOSVersionString\n\n# Version 1.2.9 - Dec 7, 2016\n## Bug Fixes\n* Improved error reporting when \"pod repo update\" fails.\n* Added detection of xml format xcode projects generated by old Cocoapods\n  installations.\n\n# Version 1.2.8 - Dec 6, 2016\n## Bug Fixes\n* Increased speed of JarResolver resolution.\n* Fixed JarResolver caches getting out of sync with requested dependencies\n  by removing the caches.\n* Fixed JarResolver explode cache always being rewritten even when no\n  dependencies change.\n\n# Version 1.2.7 - Dec 2, 2016\n## Bug Fixes\n* Fixed VersionHandler build errors with Unity 5.5, due to the constantly\n  changing BuildTarget enum.\n* Added support for Unity configured JDK Path rather than requiring\n  JAVA_HOME to be set in the Jar Resolver.\n\n# Version 1.2.6 - Nov 15, 2016\n## Bug Fixes\n* Fixed IOSResolver errors when iOS support is not installed.\n* Added fallback to \"pod\" executable search which queries the Ruby Gems\n  package manager for the binary install location.\n\n# Version 1.2.5 - Nov 3, 2016\n## Bug Fixes\n* Added crude support for source only Cocoapods to the IOSResolver.\n\n# Version 1.2.4 - Oct 27, 2016\n## Bug Fixes\n* Automated resolution of out of date pod repositories.\n\n# Version 1.2.3 - Oct 25, 2016\n## Bug Fixes\n* Fixed exception when reporting conflicting dependencies.\n\n# Version 1.2.2 - Oct 17, 2016\n## Bug Fixes\n* Fixed issue working with Unity 5.5\n* Fixed issue with PlayServicesResolver corrupting other iOS dependencies.\n* Updated build script to use Unity distributed tools for building.\n\n# Version 1.2.1 - Jul 25, 2016\n## Bug Fixes\n* Removed 1.2 Resolver and hardcoded whitelist of AARs to expand.\n* Improved error reporting when the \"jar\" executable can't be found.\n* Removed the need to set JAVA_HOME if \"jar\" is in the user's path.\n* Fixed spurious copying of partially matching AARs.\n* Changed resolver to only copy / expand when source AARs change.\n* Auto-resolution of dependencies is now performed when the Android\n  build target is selected.\n\n## New Features\n* Expand AARs that contain manifests with variable expansion like\n  ${applicationId}.\n* Added optional logging in the JarResolverLib module.\n* Integration with the Android SDK manager for dependencies that\n  declare required Android SDK packages.\n\n# Version 1.2.0 - May 11 2016\n## Bug Fixes\n* Handles resolving dependencies when the artifacts are split across 2 repos.\n* #4 Misdetecting version for versions like 1.2-alpha.  These are now string\n  compared if alphanumeric\n* Removed resolver creation via reflection since it did not work all the time.\n  Now a resolver needs to be loaded externally (which is existing behavior).\n\n## New Features\n* Expose PlayServicesResolver properties to allow for script access.\n* Explodes firebase-common and firebase-measurement aar files to support\n  ${applicationId} substitution.\n\n# Version 1.1.1 - 25 Feb 2016\n## Bug Fixes\n* #1 Spaces in project path not handled when exploding Aar file.\n* #2 Script compilation error: TypeLoadException.\n\n# Version 1.1.0 - 5 Feb 2016\n## New Features\n* Adds friendly alert when JAVA_HOME is not set on Windows platforms.\n* Adds flag for disabling background resolution.\n* Expands play-services-measurement and replaces ${applicationId} with the\n  bundle Id.\n\n ## Bug Fixes\n* Fixes infinite loop of resolution triggered by resolution.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.36328125,
          "content": "Want to contribute? Great! First, read this page (including the small print at the end).\n\n### Before you contribute\nBefore we can use your code, you must sign the\n[Google Individual Contributor License Agreement](https://developers.google.com/open-source/cla/individual?csw=1)\n(CLA), which you can do online. The CLA is necessary mainly because you own the\ncopyright to your changes, even after your contribution becomes part of our\ncodebase, so we need your permission to use and distribute your code. We also\nneed to be sure of various other things — for instance that you'll tell us if you\nknow that your code infringes on other people's patents. You don't have to sign\nthe CLA until after you've submitted your code for review and a member has\napproved it, but you must do it before we can put your code into our codebase.\nBefore you start working on a larger contribution, you should get in touch with\nus first through the issue tracker with your idea so that we can help out and\npossibly guide you. Coordinating up front makes it much easier to avoid\nfrustration later on.\n\n### Code reviews\nAll submissions, including submissions by project members, require review. We\nuse Github pull requests for this purpose.\n\n### The small print\nContributions made by corporations are covered by a different agreement than\nthe one above, the Software Grant and Corporate Contributor License Agreement."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 13.0810546875,
          "content": "Copyright (C) 2014 Google Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n====================================================================================================\nThis package uses MiniJSON\n\nCopyright (c) 2013 Calvin Rien\n\nBased on the JSON parser by Patrick van Bergen\nhttp://techblog.procurios.nl/k/618/news/view/14605/14863/How-do-I-write-my-own-parser-for-JSON.html\n\nSimplified it so that it doesn't throw exceptions\nand can be used in Unity iPhone with maximum code stripping.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 38.91796875,
          "content": "# External Dependency Manager for Unity\n\n[![openupm](https://img.shields.io/npm/v/com.google.external-dependency-manager?label=openupm&registry_uri=https://package.openupm.com)](https://openupm.com/packages/com.google.external-dependency-manager/)\n[![openupm](https://img.shields.io/badge/dynamic/json?color=brightgreen&label=downloads&query=%24.downloads&suffix=%2Fmonth&url=https%3A%2F%2Fpackage.openupm.com%2Fdownloads%2Fpoint%2Flast-month%2Fcom.google.external-dependency-manager)](https://openupm.com/packages/com.google.external-dependency-manager/)\n\n## Overview\n\nThe External Dependency Manager for Unity (EDM4U) (formerly Play Services\nResolver/Jar Resolver) is intended to be used by any Unity package or user that\nrequires:\n\n*   Android specific libraries (e.g\n    [AARs](https://developer.android.com/studio/projects/android-library.html))\n\n*   iOS [CocoaPods](https://cocoapods.org/)\n\n*   Version management of transitive dependencies\n\n*   Management of Package Manager (PM) Registries\n\nIf you want to add and use iOS/Android dependencies directly in your project,\nthen you should to install EDM4U in your project.\n\nIf you are a package user and the plugin you are using depends on EDM4U, *and*\nthe package does not include EDM4U as a package dependency already, then you\nshould to install EDM4U in your project.\n\nIf you are a UPM package maintainer and your package requires EDM4U, then you\nshould add EDM4U as a\n[package dependency](https://docs.unity3d.com/2019.3/Documentation/Manual/upm-dependencies.html)\nin your package manifest (`package.json`):\n\n```json\n{\n  \"dependencies\": {\n    \"com.google.external-dependency-manager\": \"1.2.178\"\n  }\n}\n```\n\nYou should still install EDM4U to test out the package during development.\n\nIf you are a legacy `.unitypackage` package maintainer and your package requires\nEDM4U, please ask the user to install EDM4U separately. You should install EDM4U\nto test out the package during development.\n\nUpdated releases are available on\n[GitHub](https://github.com/googlesamples/unity-jar-resolver)\n\n## Requirements\n\nThe *Android Resolver* and *iOS Resolver* components of the plugin only work\nwith Unity version 4.6.8 or higher.\n\nThe *Version Handler* component only works with Unity 5.x or higher as it\ndepends upon the `PluginImporter` UnityEditor API.\n\nThe *Package Manager Resolver* component only works with Unity 2018.4 or above,\nwhen [scoped registry](https://docs.unity3d.com/Manual/upm-scoped.html) support\nwas added to the Package Manager.\n\n## Getting Started\n\nCheck out [troubleshooting](troubleshooting-faq.md) if you need help.\n\n### Install via OpenUPM\n\nEDM4U is available on\n[OpenUPM](https://openupm.com/packages/com.google.external-dependency-manager/):\n\n```shell\nopenupm add com.google.external-dependency-manager\n```\n\n### Install via git URL\n1. Open Package Manager\n2. Click on the + icon on the top left corner of the \"Package Manager\" screen\n3. Click on \"Install package from git url...\"\n4. Paste: https://github.com/googlesamples/unity-jar-resolver.git?path=upm\n\n### Install via Google APIs for Unity\n\nEDM4U is available both in UPM and legacy `.unitypackage` formats on\n[Google APIs for Unity](https://developers.google.com/unity/archive#external_dependency_manager_for_unity).\n\nYou may install the UPM version (.tgz) as a\n[local UPM package](https://docs.unity3d.com/Manual/upm-ui-local.html).\n\nYou can also install EDM4U in your project as a `.unitypackage`. This is not\nrecommended due to potential conflicts.\n\n### Conflict Resolution\n\nFor historical reasons, a package maintainer may choose to embed EDM4U in their\npackage for ease of installation. This will create a conflict when you try to\ninstall EDM4U with the steps above, or with another package with embedded EDM4U.\nIf your project imported a `.unitypackage` that has a copy of EDM4U embedded in\nit, you may safely delete it from your Assets folder. If your project depends on\nanother UPM package with EDM4U, please reach out to the package maintainer and\nask them to replace it with a dependency to this package. In the meantime, you\ncan workaround the issue by copying the package to your Packages folder (to\ncreate an\n[embedded package](https://docs.unity3d.com/Manual/upm-concepts.html#Embedded))\nand perform the steps yourself to avoid a dependency conflict.\n\n### Config file\n\nTo start adding dependencies to your project, copy and rename the\n[SampleDependencies.xml](https://github.com/googlesamples/unity-jar-resolver/blob/master/sample/Assets/ExternalDependencyManager/Editor/SampleDependencies.xml)\nfile into your plugin and add the dependencies your project requires.\n\nThe XML file needs to be under an `Editor` directory and match the name\n`*Dependencies.xml`. For example, `MyPlugin/Editor/MyPluginDependencies.xml`.\n\n## Usages\n\n### Android Resolver\n\nThe Android Resolver copies specified dependencies from local or remote Maven\nrepositories into the Unity project when a user selects Android as the build\ntarget in the Unity editor.\n\nFor example, to add the Google Play Games library\n(`com.google.android.gms:play-services-games` package) at version `9.8.0` to the\nset of a plugin's Android dependencies:\n\n```xml\n<dependencies>\n  <androidPackages>\n    <androidPackage spec=\"com.google.android.gms:play-services-games:9.8.0\">\n      <androidSdkPackageIds>\n        <androidSdkPackageId>extra-google-m2repository</androidSdkPackageId>\n      </androidSdkPackageIds>\n    </androidPackage>\n  </androidPackages>\n</dependencies>\n```\n\nThe version specification (last component) supports:\n\n*   Specific versions e.g `9.8.0`\n\n*   Partial matches e.g `9.8.+` would match 9.8.0, 9.8.1 etc. choosing the most\n    recent version\n\n*   Latest version using `LATEST` or `+`. We do *not* recommend using this\n    unless you're 100% sure the library you depend upon will not break your\n    Unity plugin in future\n\nThe above example specifies the dependency as a component of the Android SDK\nmanager such that the Android SDK manager will be executed to install the\npackage if it's not found. If your Android dependency is located on Maven\ncentral it's possible to specify the package simply using the `androidPackage`\nelement:\n\n```xml\n<dependencies>\n  <androidPackages>\n    <androidPackage spec=\"com.google.api-client:google-api-client-android:1.22.0\" />\n  </androidPackages>\n</dependencies>\n```\n\n#### Auto-resolution\n\nBy default the Android Resolver automatically monitors the dependencies you have\nspecified and the `Plugins/Android` folder of your Unity project. The resolution\nprocess runs when the specified dependencies are not present in your project.\n\nThe *auto-resolution* process can be disabled via the `Assets > External\nDependency Manager > Android Resolver > Settings` menu.\n\nManual resolution can be performed using the following menu options:\n\n*   `Assets > External Dependency Manager > Android Resolver > Resolve`\n\n*   `Assets > External Dependency Manager > Android Resolver > Force Resolve`\n\n#### Deleting libraries\n\nResolved packages are tracked via asset labels by the Android Resolver. They can\neasily be deleted using the `Assets > External Dependency Manager > Android\nResolver > Delete Resolved Libraries` menu item.\n\n#### Android Manifest Variable Processing\n\nSome AAR files (for example play-services-measurement) contain variables that\nare processed by the Android Gradle plugin. Unfortunately, Unity does not\nperform the same processing when using Unity's Internal Build System, so the\nAndroid Resolver plugin handles known cases of this variable substitution by\nexploding the AAR into a folder and replacing `${applicationId}` with the\n`bundleID`.\n\nDisabling AAR explosion and therefore Android manifest processing can be done\nvia the `Assets > External Dependency Manager > Android Resolver > Settings`\nmenu. You may want to disable explosion of AARs if you're exporting a project to\nbe built with Gradle/Android Studio.\n\n#### ABI Stripping\n\nSome AAR files contain native libraries (.so files) for each ABI supported by\nAndroid. Unfortunately, when targeting a single ABI (e.g x86), Unity does not\nstrip native libraries for unused ABIs. To strip unused ABIs, the Android\nResolver plugin explodes an AAR into a folder and removes unused ABIs to reduce\nthe built APK size. Furthermore, if native libraries are not stripped from an\nAPK (e.g you have a mix of Unity's x86 library and some armeabi-v7a libraries)\nAndroid may attempt to load the wrong library for the current runtime ABI\ncompletely breaking your plugin when targeting some architectures.\n\nAAR explosion and therefore ABI stripping can be disabled via the `Assets >\nExternal Dependency Manager > Android Resolver > Settings` menu. You may want to\ndisable explosion of AARs if you're exporting a project to be built with\nGradle/Android Studio.\n\n#### Resolution Strategies\n\nBy default the Android Resolver will use Gradle to download dependencies prior\nto integrating them into a Unity project. This works with Unity's internal build\nsystem and Gradle/Android Studio project export.\n\nIt's possible to change the resolution strategy via the `Assets > External\nDependency Manager > Android Resolver > Settings` menu.\n\n##### Download Artifacts with Gradle\n\nUsing the default resolution strategy, the Android resolver executes the\nfollowing operations:\n\n-   Remove the result of previous Android resolutions. E.g Delete all files and\n    directories labeled with \"gpsr\" under `Plugins/Android` from the project.\n\n-   Collect the set of Android dependencies (libraries) specified by a project's\n    `*Dependencies.xml` files.\n\n-   Run `download_artifacts.gradle` with Gradle to resolve conflicts and, if\n    successful, download the set of resolved Android libraries (AARs, JARs).\n\n-   Process each AAR/JAR so that it can be used with the currently selected\n    Unity build system (e.g Internal vs. Gradle, Export vs. No Export). This\n    involves patching each reference to `applicationId` in the\n    `AndroidManifest.xml` with the project's bundle ID. This means resolution\n    must be run again if the bundle ID has changed.\n\n-   Move the processed AARs to `Plugins/Android` so they will be included when\n    Unity invokes the Android build.\n\n##### Integrate into mainTemplate.gradle\n\nUnity 5.6 introduced support for customizing the `build.gradle` used to build\nUnity projects with Gradle. When the *Patch mainTemplate.gradle* setting is\nenabled, rather than downloading artifacts before the build, Android resolution\nresults in the execution of the following operations:\n\n-   Remove the result of previous Android resolutions. E.g Delete all files and\n    directories labeled with \"gpsr\" under `Plugins/Android` from the project and\n    remove sections delimited with `// Android Resolver * Start` and `// Android\n    Resolver * End` lines.\n\n-   Collect the set of Android dependencies (libraries) specified by a project's\n    `*Dependencies.xml` files.\n\n-   Rename any `.srcaar` files in the build to `.aar` and exclude them from\n    being included directly by Unity in the Android build as\n    `mainTemplate.gradle` will be patched to include them instead from their\n    local maven repositories.\n\n-   Inject the required Gradle repositories into `mainTemplate.gradle` at the\n    line matching the pattern `.*apply plugin:\n    'com\\.android\\.(application|library)'.*` or the section starting at the line\n    `// Android Resolver Repos Start`. If you want to control the injection\n    point in the file, the section delimited by the lines `// Android Resolver\n    Repos Start` and `// Android Resolver Repos End` should be placed in the\n    global scope before the `dependencies` section.\n\n-   Inject the required Android dependencies (libraries) into\n    `mainTemplate.gradle` at the line matching the pattern `***DEPS***` or the\n    section starting at the line `// Android Resolver Dependencies Start`. If\n    you want to control the injection point in the file, the section delimited\n    by the lines `// Android Resolver Dependencies Start` and `// Android\n    Resolver Dependencies End` should be placed in the `dependencies` section.\n\n-   Inject the packaging options logic, which excludes architecture specific\n    libraries based upon the selected build target, into `mainTemplate.gradle`\n    at the line matching the pattern `android +{` or the section starting at the\n    line `// Android Resolver Exclusions Start`. If you want to control the\n    injection point in the file, the section delimited by the lines `// Android\n    Resolver Exclusions Start` and `// Android Resolver Exclusions End` should\n    be placed in the global scope before the `android` section.\n\n#### Dependency Tracking\n\nThe Android Resolver creates the\n`ProjectSettings/AndroidResolverDependencies.xml` to quickly determine the set\nof resolved dependencies in a project. This is used by the auto-resolution\nprocess to only run the expensive resolution process when necessary.\n\n#### Displaying Dependencies\n\nIt's possible to display the set of dependencies the Android Resolver would\ndownload and process in your project via the `Assets > External Dependency\nManager > Android Resolver > Display Libraries` menu item.\n\n### iOS Resolver\n\nThe iOS resolver component of this plugin manages\n[CocoaPods](https://cocoapods.org/). A CocoaPods `Podfile` is generated and the\n`pod` tool is executed as a post build process step to add dependencies to the\nXcode project exported by Unity.\n\nDependencies for iOS are added by referring to CocoaPods.\n\nFor example, to add the AdMob pod, version 7.0 or greater with bitcode enabled:\n\n```xml\n<dependencies>\n  <iosPods>\n    <iosPod name=\"Google-Mobile-Ads-SDK\" version=\"~> 7.0\" bitcodeEnabled=\"true\"\n            minTargetSdk=\"6.0\" addToAllTargets=\"false\" />\n  </iosPods>\n</dependencies>\n```\n\n#### Integration Strategies\n\nThe `CocoaPods` are either:\n\n*   Downloaded and injected into the Xcode project file directly, rather than\n    creating a separate xcworkspace. We call this `Xcode project` integration.\n\n*   If the Unity version supports opening a xcworkspace file, the `pod` tool is\n    used as intended to generate a xcworkspace which references the CocoaPods.\n    We call this `Xcode workspace` integration.\n\nThe resolution strategy can be changed via the `Assets > External Dependency\nManager > iOS Resolver > Settings` menu.\n\n##### Appending text to generated Podfile\n\nIn order to modify the generated Podfile you can create a script like this:\n\n```csharp\nusing System.IO;\n\nusing UnityEditor;\nusing UnityEditor.Callbacks;\nusing UnityEngine;\n\npublic class PostProcessIOS : MonoBehaviour\n{\n    // Must be between 40 and 50 to ensure that it's not overriden by Podfile generation (40) and\n    // that it's added before \"pod install\" (50).\n    [PostProcessBuildAttribute(45)]\n    private static void PostProcessBuild_iOS(BuildTarget target, string buildPath)\n    {\n        if (target == BuildTarget.iOS)\n        {\n            using (StreamWriter sw = File.AppendText(buildPath + \"/Podfile\"))\n            {\n                // E.g. add an app extension\n                sw.WriteLine(\"\\ntarget 'NSExtension' do\\n  pod 'Firebase/Messaging', '6.6.0'\\nend\");\n            }\n        }\n    }\n}\n```\n\n### Package Manager Resolver\n\nAdding registries to the\n[Package Manager](https://docs.unity3d.com/Manual/Packages.html) (PM) is a\nmanual process. The Package Manager Resolver (PMR) component of this plugin\nmakes it easy for plugin maintainers to distribute new PM registry servers and\neasy for plugin users to manage PM registry servers.\n\n#### Adding Registries\n\nFor example, to add a registry for plugins in the scope `com.coolstuff`:\n\n```xml\n<registries>\n  <registry name=\"Cool Stuff\"\n            url=\"https://unityregistry.coolstuff.com\"\n            termsOfService=\"https://coolstuff.com/unityregistry/terms\"\n            privacyPolicy=\"https://coolstuff.com/unityregistry/privacy\">\n    <scopes>\n      <scope>com.coolstuff</scope>\n    </scopes>\n  </registry>\n</registries>\n```\n\nWhen PMR is loaded it will prompt the developer to add the registry to their\nproject if it isn't already present in the `Packages/manifest.json` file.\n\nFor more information, see Unity's documentation on\n[scoped package registries](https://docs.unity3d.com/Manual/upm-scoped.html).\n\n#### Managing Registries\n\nIt's possible to add and remove registries that are specified via PMR XML\nconfiguration files via the following menu options:\n\n*   `Assets > External Dependency Manager > Package Manager Resolver > Add\n    Registries` will prompt the user with a window which allows them to add\n    registries discovered in the project to the Package Manager.\n\n*   `Assets > External Dependency Manager > Package Manager Resolver > Remove\n    Registries` will prompt the user with a window which allows them to remove\n    registries discovered in the project from the Package Manager.\n\n*   `Assets > External Dependency Manager > Package Manager Resolver > Modify\n    Registries` will prompt the user with a window which allows them to add or\n    remove registries discovered in the project.\n\n#### Migration\n\nPMR can migrate Version Handler packages installed in the `Assets` folder to PM\npackages. This requires the plugins to implement the following:\n\n*   `.unitypackage` must include a Version Handler manifests that describes the\n    components of the plugin. If the plugin has no dependencies the manifest\n    would just include the files in the plugin.\n\n*   The PM package JSON provided by the registry must include a keyword (in the\n    `versions.VERSION.keyword` list) that maps the PM package to a Version\n    Handler package using the format `vh-name:VERSION_HANDLER_MANIFEST_NAME`\n    where `VERSION_HANDLER_MANIFEST_NAME` is the name of the manifest defined in\n    the `.unitypackage`. For more information see the description of the\n    `gvhp_manifestname` asset label in the [Version Handler](#version-handler)\n    section.\n\nWhen using the `Assets > External Dependency Manager > Package Manager\nResolver > Migrate Packages` menu option, PMR then will:\n\n*   List all Version Handler manager packages in the project.\n\n*   Search all available packages in the PM registries and fetch keywords\n    associated with each package parsing the Version Handler manifest names for\n    each package.\n\n*   Map each installed Version Handler package to a PM package.\n\n*   Prompt the user to migrate the discovered packages.\n\n*   Perform package migration for all selected packages if the user clicks the\n    `Apply` button.\n\n#### Configuration\n\nPMR can be configured via the `Assets > External Dependency Manager > Package\nManager Resolver > Settings` menu option:\n\n*   `Add package registries` when enabled, when the plugin loads or registry\n    configuration files change, this will prompt the user to add registries that\n    are not present in the Package Manager.\n\n*   `Prompt to add package registries` will cause a developer to be prompted\n    with a window that will ask for confirmation before adding registries. When\n    this is disabled registries are added silently to the project.\n\n*   `Prompt to migrate packages` will cause a developer to be prompted with a\n    window that will ask for confirmation before migrating packages installed in\n    the `Assets` directory to PM packages.\n\n*   `Enable Analytics Reporting` when enabled, reports the use of the plugin to\n    the developers so they can make imrpovements.\n\n*   `Verbose logging` when enabled prints debug information to the console which\n    can be useful when filing bug reports.\n\n### Version Handler\n\nThe Version Handler component of this plugin manages:\n\n*   Shared Unity plugin dependencies.\n\n*   Upgrading Unity plugins by cleaning up old files from previous versions.\n\n*   Uninstallation of plugins that are distributed with manifest files.\n\n*   Restoration of plugin assets to their original install locations if assets\n    are tagged with the `exportpath` label.\n\nSince the Version Handler needs to modify Unity asset metadata (`.meta` files),\nto enable/disable components, rename and delete asset files it does not work\nwith Package Manager installed packages. It's still possible to include EDM4U in\nPackage Manager packages, the Version Handler component simply won't do anything\nto PM plugins in this case.\n\n#### Using Version Handler Managed Plugins\n\nIf a plugin is imported at multiple different versions into a project, if the\nVersion Handler is enabled, it will automatically check all managed assets to\ndetermine the set of assets that are out of date and assets that should be\nremoved. To disable automatic checking managed assets disable the `Enable\nversion management` option in the `Assets > External Dependency Manager >\nVersion Handler > Settings` menu.\n\nIf version management is disabled, it's possible to check managed assets\nmanually using the `Assets > External Dependency Manager > Version Handler >\nUpdate` menu option.\n\n##### Listing Managed Plugins\n\nPlugins managed by the Version Handler, those that ship with manifest files, can\ndisplayed using the `Assets > External Dependency Manager > Version Handler >\nDisplay Managed Packages` menu option. The list of plugins are written to the\nconsole window along with the set of files used by each plugin.\n\n##### Uninstalling Managed Plugins\n\nPlugins managed by the Version Handler, those that ship with manifest files, can\nbe removed using the `Assets > External Dependency Manager > Version Handler >\nUninstall Managed Packages` menu option. This operation will display a window\nthat allows a developer to select a set of plugins to remove which will remove\nall files owned by each plugin excluding those that are in use by other\ninstalled plugins.\n\nFiles managed by the Version Handler, those labeled with the `gvh` asset label,\ncan be checked to see whether anything needs to be upgraded, disabled or removed\nusing the `Assets > External Dependency Manager > Version Handler > Update` menu\noption.\n\n##### Restore Install Paths\n\nSome developers move assets around in their project which can make it harder for\nplugin maintainers to debug issues if this breaks Unity's\n[special folders](https://docs.unity3d.com/Manual/SpecialFolders.html) rules. If\nassets are labeled with their original install/export path (see\n`gvhp_exportpath` below), Version Handler can restore assets to their original\nlocations when using the `Assets > External Dependency Manager > Version\nHandler > Move Files To Install Locations` menu option.\n\n##### Settings\n\nSome behavior of the Version Handler can be configured via the `Assets >\nExternal Dependency Manager > Version Handler > Settings` menu option.\n\n*   `Enable version management` controls whether the plugin should automatically\n    check asset versions and apply changes. If this is disabled the process\n    should be run manually when installing or upgrading managed plugins using\n    `Assets > External Dependency Manager > Version Handler > Update`.\n\n*   `Rename to canonical filenames` is a legacy option that will rename files to\n    remove version numbers and other labels from filenames.\n\n*   `Prompt for obsolete file deletion` enables the display of a window when\n    obsolete files are deleted allowing the developer to select which files to\n    delete and those to keep.\n\n*   `Allow disabling files via renaming` controls whether obsolete or disabled\n    files should be disabled by renaming them to `myfilename_DISABLED`. Renaming\n    to disable files is required in some scenarios where Unity doesn't support\n    removing files from the build via the PluginImporter.\n\n*   `Enable Analytics Reporting` enables/disables usage reporting to plugin\n    developers to improve the product.\n\n*   `Verbose logging` enables *very* noisy log output that is useful for\n    debugging while filing a bug report or building a new managed plugin.\n\n*   `Use project settings` saves settings for the plugin in the project rather\n    than system-wide.\n\n#### Redistributing a Managed Plugin\n\nThe Version Handler employs a couple of methods for managing version selection,\nupgrade and removal of plugins.\n\n*   Each plugin can ship with a manifest file that lists the files it includes.\n    This makes it possible for Version Handler to calculate the difference in\n    assets between the most recent release of a plugin and the previous release\n    installed in a project. If a files are removed the Version Handler will\n    prompt the user to clean up obsolete files.\n\n*   Plugins can ship using assets with unique names, unique GUIDs and version\n    number labels. Version numbers can be attached to assets using labels or\n    added to the filename (e.g `myfile.txt` would be `myfile_version-x.y.z.txt).\n    This allows the Version Handler to determine which set of files are the same\n    file at different versions, select the most recent version and prompt the\n    developer to clean up old versions.\n\nUnity plugins can be managed by the Version Handler using the following steps:\n\n1.  Add the `gvh` asset label to each asset (file) you want Version Handler to\n    manage.\n\n1.  Add the `gvh_version-VERSION` label to each asset where `VERSION` is the\n    version of the plugin you're releasing (e.g 1.2.3).\n\n1.  Add the `gvhp_exportpath-PATH` label to each asset where `PATH` is the\n    export path of the file when the `.unitypackage` is created. This is used to\n    track files if they're moved around in a project by developers.\n\n1.  Optional: Add `gvh_targets-editor` label to each editor DLL in your plugin\n    and disable `editor` as a target platform for the DLL. The Version Handler\n    will enable the most recent version of this DLL when the plugin is imported.\n\n1.  Optional: If your plugin is included in other Unity plugins, you should add\n    the version number to each filename and change the GUID of each asset. This\n    allows multiple versions of your plugin to be imported into a Unity project,\n    with the Version Handler component activating only the most recent version.\n\n1.  Create a manifest text file named `MY_UNIQUE_PLUGIN_NAME_VERSION.txt` that\n    lists all the files in your plugin relative to the project root. Then add\n    the `gvh_manifest` label to the asset to indicate this file is a plugin\n    manifest.\n\n1.  Optional: Add a `gvhp_manifestname-NAME` label to your manifest file to\n    provide a human readable name for your package. If this isn't provided the\n    name of the manifest file will be used as the package name. NAME can match\n    the pattern `[0-9]+[a-zA-Z -]` where a leading integer will set the priority\n    of the name where `0` is the highest priority and preferably used as the\n    display name. The lowest value (i.e highest priority name) will be used as\n    the display name and all other specified names will be aliases of the\n    display name. Aliases can refer to previous names of the package allowing\n    renaming across published versions.\n\n1.  Redistribute EDM4U Unity plugin with your plugin. See the\n    [Plugin Redistribution](#plugin-redistribution) section for details.\n\nIf you follow these steps:\n\n*   When users import a newer version of your plugin, files referenced by the\n    older version's manifest are cleaned up.\n\n*   The latest version of the plugin will be selected when users import multiple\n    packages that include your plugin, assuming the steps in\n    [Plugin Redistribution](#plugin-redistribution) are followed.\n\n## Background\n\nMany Unity plugins have dependencies upon Android specific libraries, iOS\nCocoaPods, and sometimes have transitive dependencies upon other Unity plugins.\nThis causes the following problems:\n\n*   Integrating platform specific (e.g Android and iOS) libraries within a Unity\n    project can be complex and a burden on a Unity plugin maintainer.\n*   The process of resolving conflicting dependencies on platform specific\n    libraries is pushed to the developer attempting to use a Unity plugin. The\n    developer trying to use your plugin is very likely to give up when faced\n    with Android or iOS specific build errors.\n*   The process of resolving conflicting Unity plugins (due to shared Unity\n    plugin components) is pushed to the developer attempting to use your Unity\n    plugin. In an effort to resolve conflicts, the developer will very likely\n    attempt to resolve problems by deleting random files in your plugin, report\n    bugs when that doesn't work and finally give up.\n\nEDM4U provides solutions for each of these problems.\n\n### Android Dependency Management\n\nThe *Android Resolver* component of this plugin will download and integrate\nAndroid library dependencies and handle any conflicts between plugins that share\nthe same dependencies.\n\nWithout the Android Resolver, typically Unity plugins bundle their AAR and JAR\ndependencies, e.g. a Unity plugin `SomePlugin` that requires the Google Play\nGames Android library would redistribute the library and its transitive\ndependencies in the folder `SomePlugin/Android/`. When a user imports\n`SomeOtherPlugin` that includes the same libraries (potentially at different\nversions) in `SomeOtherPlugin/Android/`, the developer using `SomePlugin` and\n`SomeOtherPlugin` will see an error when building for Android that can be hard\nto interpret.\n\nUsing the Android Resolver to manage Android library dependencies:\n\n*   Solves Android library conflicts between plugins.\n*   Handles all of the various processing steps required to use Android\n    libraries (AARs, JARs) in Unity 4.x and above projects. Almost all versions\n    of Unity have - at best - partial support for AARs.\n*   (Experimental) Supports minification of included Java components without\n    exporting a project.\n\n### iOS Dependency Management\n\nThe *iOS Resolver* component of this plugin integrates with\n[CocoaPods](https://cocoapods.org/) to download and integrate iOS libraries and\nframeworks into the Xcode project Unity generates when building for iOS. Using\nCocoaPods allows multiple plugins to utilize shared components without forcing\ndevelopers to fix either duplicate or incompatible versions of libraries\nincluded through multiple Unity plugins in their project.\n\n### Package Manager Registry Setup\n\nThe [Package Manager](https://docs.unity3d.com/Manual/Packages.html) (PM) makes\nuse of [NPM](https://www.npmjs.com/) registry servers for package hosting and\nprovides ways to discover, install, upgrade and uninstall packages. This makes\nit easier for developers to manage plugins within their projects.\n\nHowever, installing additional package registries requires a few manual steps\nthat can potentially be error prone. The *Package Manager Resolver* component of\nthis plugin integrates with [PM](https://docs.unity3d.com/Manual/Packages.html)\nto provide a way to auto-install PM package registries when a `.unitypackage` is\ninstalled which allows plugin maintainers to ship a `.unitypackage` that can\nprovide access to their own PM registry server to make it easier for developers\nto manage their plugins.\n\n### Unity Plugin Version Management\n\nFinally, the *Version Handler* component of this plugin simplifies the process\nof managing transitive dependencies of Unity plugins and each plugin's upgrade\nprocess.\n\nFor example, without the Version Handler plugin, if:\n\n*   Unity plugin `SomePlugin` includes `EDM4U` plugin at version 1.1.\n*   Unity plugin `SomeOtherPlugin` includes `EDM4U` plugin at version 1.2.\n\nThe version of `EDM4U` included in the developer's project depends upon the\norder the developer imports `SomePlugin` or `SomeOtherPlugin`.\n\nThis results in:\n\n*   `EDM4U` at version 1.2, if `SomePlugin` is imported then `SomeOtherPlugin`\n    is imported.\n*   `EDM4U` at version 1.1, if `SomeOtherPlugin` is imported then `SomePlugin`\n    is imported.\n\nThe Version Handler solves the problem of managing transitive dependencies by:\n\n*   Specifying a set of packaging requirements that enable a plugin at different\n    versions to be imported into a Unity project.\n*   Providing activation logic that selects the latest version of a plugin\n    within a project.\n\nWhen using the Version Handler to manage `EDM4U` included in `SomePlugin` and\n`SomeOtherPlugin`, from the prior example, version 1.2 will always be the\nversion activated in a developer's Unity project.\n\nPlugin creators are encouraged to adopt this library to ease integration for\ntheir customers. For more information about integrating EDM4U into your own\nplugin, see the [Plugin Redistribution](#plugin-redistribution) section of this\ndocument.\n\n## Analytics\n\nThe External Dependency Manager for Unity plugin by default logs usage to Google\nAnalytics. The purpose of the logging is to quantitatively measure the usage of\nfunctionality, to gather reports on integration failures and to inform future\nimprovements to the developer experience of the External Dependency Manager\nplugin. Note that the analytics collected are limited to the scope of the EDM4U\nplugin’s usage.\n\nFor details of what is logged, please refer to the usage of\n`EditorMeasurement.Report()` in the source code.\n\n## Plugin Redistribution\n\nIf you are a package maintainer and your package depends on EDM4U, it is highly\nrecommended to use the UPM format and add EDM4U as a dependency. If you must\ninclude it in your `.unitypackage`, redistributing `EDM4U` inside your own\nplugin might ease the integration process for your users.\n\nIf you wish to redistribute `EDM4U` inside your plugin, you **must** follow\nthese steps when importing the `external-dependency-manager-*.unitypackage`, and\nwhen exporting your own plugin package:\n\n1.  Import the `external-dependency-manager-*.unitypackage` into your plugin\n    project by\n    [running Unity from the command line](https://docs.unity3d.com/Manual/CommandLineArguments.html),\n    ensuring that you add the `-gvh_disable` option.\n1.  Export your plugin by\n    [running Unity from the command line](https://docs.unity3d.com/Manual/CommandLineArguments.html),\n    ensuring that you:\n    -   Include the contents of the `Assets/PlayServicesResolver` and\n        `Assets/ExternalDependencyManager` directory.\n    -   Add the `-gvh_disable` option.\n\nYou **must** specify the `-gvh_disable` option in order for the Version Handler\nto work correctly!\n\nFor example, the following command will import the\n`external-dependency-manager-1.2.46.0.unitypackage` into the project\n`MyPluginProject` and export the entire Assets folder to\n`MyPlugin.unitypackage`:\n\n```shell\nUnity -gvh_disable \\\n      -batchmode \\\n      -importPackage external-dependency-manager-1.2.46.0.unitypackage \\\n      -projectPath MyPluginProject \\\n      -exportPackage Assets MyPlugin.unitypackage \\\n      -quit\n```\n\n### Background\n\nThe *Version Handler* component relies upon deferring the load of editor DLLs so\nthat it can run first and determine the latest version of a plugin component to\nactivate. The build of `EDM4U` plugin has Unity asset metadata that is\nconfigured so that the editor components are not initially enabled when it's\nimported into a Unity project. To maintain this configuration when importing the\n`external-dependency-manager.unitypackage` into a Unity plugin project, you\n*must* specify the command line option `-gvh_disable` which will prevent the\nVersion Handler component from running and changing the Unity asset metadata.\n\n## Building from Source\n\nTo build this plugin from source you need the following tools installed: * Unity\n2021 and below (with iOS and Android modules installed) * Java 11\n\nYou can build the plugin by running the following from your shell (Linux / OSX):\n\n```shell\n./gradlew build\n\n```\n\nor Windows:\n\n```shell\n./gradlew.bat build\n```\n\nIf Java 11 is not your default Java command, add\n`-Dorg.gradle.java.home=<PATH_TO_JAVA_HOME>` to the command above.\n\n## Testing\n\nYou can run the tests by running the following from your shell (Linux / OSX):\n\n```shell\n./gradlew test\n```\n\nor Windows:\n\n```shell\n./gradlew.bat test\n```\n\nThe following properties can be set to narrow down the tests to run or change\nthe test run behavior.\n\n*   `INTERACTIVE_MODE_TESTS_ENABLED` - Default to `1`. Set to `1` to enable\n    interactive mode tests, which requires GPU on the machine. Otherwise, only\n    run tests in the batch mode.\n*   `INCLUDE_TEST_TYPES` - Default to empty string, which means to include every\n    type of the test. To narrow down the types of test to run, set this\n    properties with a list of case-insensitive type strings separated by comma.\n    For instance, `-PINCLUDE_TEST_TYPES=\"Python,NUnit\"` means to include only\n    Python tests and NUnit tests. See `TestTypeEnum` in `build.gradle` for\n    available options.\n*   `EXCLUDE_TEST_TYPES` - Default to empty string, which means to exclude none.\n    To add types of tests to exclude, set this properties with a list of\n    case-insensitive type strings separated by comma. For instance,\n    `-PEXCLUDE_TEST_TYPES=\"Python,NUnit\"` means to exclude Python tests and\n    NUnit tests. See `TestTypeEnum` in `build.gradle` for available options.\n*   `INCLUDE_TEST_MODULES` - Default to empty string, which means to include the\n    tests for every modules. To narrow down modules to test, set this properties\n    with a list of case-insensitive module strings separated by comma. For\n    instance, `-PINCLUDE_TEST_MODULES=\"Tool,AndroidResolver\"` means to run tests\n    for tools and Android Resolver only. See `TestModuleEnum` in `build.gradle`\n    for available options.\n*   `EXCLUDE_TEST_MODULES` - Default to empty string, which means to exclude\n    none. To add modules to exclude, set this properties with a list of\n    case-insensitive module strings separated by comma. For instance,\n    `-PEXCLUDE_TEST_MODULES=\"Tool,AndroidResolver\"` means to run tests for any\n    modules other than tools and Android Resolver. See `TestModuleEnum` in\n    `build.gradle` for available options.\n*   `EXCLUDE_TESTS` - Default to empty string, which means to exclude none. To\n    add tests to exclude, set this properties with a list of case-insensitive\n    test names separated by comma. For instance,\n    `-PEXCLUDE_TESTS=\"testGenGuids,testDownloadArtifacts\"` means to run tests\n    except the tests with name of `testGenGuids` and `testDownloadArtifacts`.\n*   `CONTINUE_ON_FAIL_FOR_TESTS_ENABLED` - Default to `1`. Set to `1` to\n    continue running the next test when the current one fails. Otherwise, the\n    build script stops whenever any test fails.\n\nFor instance, by running the following command, it only runs the Unity\nintegration tests that does not requires GPU, but exclude tests for Android\nResolver module and iOS Resolver module.\n\n```shell\n./gradlew test \\\n  -PINTERACTIVE_MODE_TESTS_ENABLED=0 \\\n  -PINCLUDE_TEST_TYPES=\"Integration\" \\\n  -PEXCLUDE_TEST_MODULES=\"AndroidResolver,iOSResolver\"\n```\n\n## Releasing\n\nEach time a new build of this plugin is checked into the source tree you need to\ndo the following:\n\n*   Bump the plugin version variable `pluginVersion` in `build.gradle`\n*   Update `CHANGELOG.md` with the new version number and changes included in\n    the release.\n*   Build the release using `./gradlew release` which performs the following:\n    *   Updates `external-dependency-manager-*.unitypackage`\n    *   Copies the unpacked plugin to the `exploded` directory.\n    *   Updates template metadata files in the `plugin` directory. The GUIDs of\n        all asset metadata is modified due to the version number change. Each\n        file within the plugin is versioned to allow multiple versions of the\n        plugin to be imported into a Unity project which allows the most recent\n        version to be activated by the Version Handler component.\n*   Create release commit using `./gradlew gitCreateReleaseCommit` which\n    performs `git commit -a -m \"description from CHANGELOG.md\"`\n*   Once the release commit is merge, tag the release using `./gradlew\n    gitTagRelease` which performs the following:\n    *   `git tag -a pluginVersion -m \"version RELEASE\"` to tag the release.\n*   Update tags on remote branch using `git push --tag REMOTE HEAD:master`\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 87.43359375,
          "content": "/*\n * Gradle file to build the Jar Resolver Unity plugin.\n */\nbuildscript {\n  repositories {\n    mavenCentral()\n    mavenLocal()\n  }\n}\n\nplugins {\n  id \"com.jetbrains.python.envs\" version \"0.0.30\"\n}\n\n/*\n * Project level variables\n */\nproject.ext {\n  // Set of properties to cache in the project.properties file.\n  Properties cacheProperties = new Properties()\n\n  // Set of directories to *not* search under the Unity root directory when\n  // searching for components of Unity.\n  String unitySearchDirExcludesString = findProperty(\"UNITY_EXCLUDES\")\n  String[] unitySearchDirExcludes =\n    unitySearchDirExcludesString ?\n      unitySearchDirExcludesString.tokenize(\";\") : []\n\n  // Save the current OS.\n  operatingSystem = OperatingSystem.getOperatingSystem()\n\n  // Default installation path for Unity based upon the host operating system.\n  List<String> defaultUnityPaths =\n    [(OperatingSystem.UNKNOWN): [\"Unity\"],\n     (OperatingSystem.MAC_OSX):\n     [\"/Applications/Unity/Unity.app/Contents/MacOS/Unity\"] +\n     (new FileNameFinder()).getFileNames(\n       \"/\", \"Applications/Unity/Hub/Editor/*/Unity.app/Contents/MacOS/Unity\"),\n     (OperatingSystem.WINDOWS):\n     [\"\\\\Program Files\\\\Unity\\\\Editor\\\\Unity.exe\"] +\n     (new FileNameFinder()).getFileNames(\n       \"\\\\\", \"Program Files\\\\Unity\\\\Hub\\\\Editor\\\\*\\\\Editor\\\\Unity.exe\"),\n     (OperatingSystem.LINUX): [\"/opt/Unity/Editor/Unity\"]][operatingSystem]\n\n  // Search for the Unity editor executable.\n  // The Unity editor is required to package the plug-in.\n  for (defaultUnityPath in defaultUnityPaths) {\n    unityExe = findFileProperty(\"UNITY_EXE\", new File(defaultUnityPath), false)\n    if (unityExe != null && unityExe.exists()) break;\n  }\n  if (unityExe == null || !unityExe.exists()) {\n    unityExe = findFileInPath(unityExe.name)\n  }\n  if (unityExe == null) {\n    throw new StopActionException(\"Unity editor executable (UNITY_EXE) not \" +\n                                  \"found\")\n  }\n  saveProperty(\"UNITY_EXE\", unityExe, cacheProperties)\n\n  // Path fragment that is the parent of the unity executable install location.\n  // This is used to find the unity root directory from the editor executable.\n  String unityExeParentPath =\n    [(OperatingSystem.UNKNOWN): \"Editor\",\n     (OperatingSystem.MAC_OSX): \"Unity.app/Contents/MacOS\",\n     (OperatingSystem.WINDOWS): \"Editor\",\n     (OperatingSystem.LINUX): \"Editor\"][operatingSystem]\n  File unityRootDir = findFileProperty(\n    \"UNITY_DIR\", new File(unityExe.parentFile.absolutePath -\n                          unityExeParentPath), true)\n  if (unityRootDir == null) {\n    throw new StopActionException(\"Unity root directory (UNITY_DIR) not found.\")\n  }\n  saveProperty(\"UNITY_DIR\", unityRootDir, cacheProperties)\n\n  FileTree unityRootDirTree = fileTree(dir: unityRootDir)\n\n  // Find unity engine dll under the root directory.\n  unityDllPath = getFileFromPropertyOrFileTree(\n    \"UNITY_DLL_PATH\", true, {\n      unityRootDirTree.matching {\n        include \"**/Managed/UnityEngine.dll\"\n        exclude unitySearchDirExcludes\n      }\n    })\n  if (unityDllPath == null) {\n    throw new StopActionException(\n      \"UnityEngine.dll and UnityEditor.dll directory (UNITY_DLL_PATH) \" +\n      \"not found.\")\n  }\n  saveProperty(\"UNITY_DLL_PATH\", unityDllPath, cacheProperties)\n\n  // iOS runtime dll.  This is with the playback engine, so the\n  // structure is different for MacOS and the others.\n  unityIosPath = getFileFromPropertyOrFileTree(\n    \"UNITY_IOS_PLAYBACK_PATH\", true, {\n      unityRootDirTree.matching {\n        include \"**/PlaybackEngines/iOSSupport/UnityEditor.iOS.Extensions.dll\",\n        \"**/PlaybackEngines/iossupport/UnityEditor.iOS.Extensions.dll\"\n        exclude unitySearchDirExcludes\n      }\n    })\n  if (unityIosPath == null) {\n    // iOS support is *required* to build the iOS resolver.\n    throw new StopActionException(\n      \"UnityEditor.iOS.Extensions.dll directory (UNITY_IOS_PLAYBACK_PATH) \" +\n      \"not found.\")\n  }\n  saveProperty(\"UNITY_IOS_PLAYBACK_PATH\", unityIosPath, cacheProperties)\n\n  // Find xbuild to build the dlls.\n  xbuildExe = getFileFromPropertyOrFileTree(\n    \"XBUILD_EXE\", false, {\n      unityRootDirTree.matching {\n        include (operatingSystem == OperatingSystem.WINDOWS ?\n                 \"**/bin/xbuild.bat\" : \"**/xbuild\")\n        exclude unitySearchDirExcludes\n      }\n    })\n  if (xbuildExe == null) {\n    throw new StopActionException(\"xbuild not found (XBUILD_EXE)\")\n  }\n  saveProperty(\"XBUILD_EXE\", xbuildExe, cacheProperties)\n\n  // Find mono to determine the distribution being used.\n  monoExe = getFileFromPropertyOrFileTree(\n    \"MONO_EXE\", false, {\n      unityRootDirTree.matching {\n        include (operatingSystem == OperatingSystem.WINDOWS ?\n          \"**/bin/mono.bat\" : \"**/bin/mono\")\n        exclude unitySearchDirExcludes\n      }\n    })\n  saveProperty(\"MONO_EXE\", monoExe, cacheProperties)\n\n  // Get the mono distribution version.\n  def versionRegEx = /^.* version ([^ ]+) .*/\n  def stdout = new ByteArrayOutputStream()\n  exec {\n    commandLine monoExe, \"-V\"\n    ignoreExitValue true\n    standardOutput = stdout\n  }\n  def monoVersionList =\n    stdout.toString().replace(\"\\r\\n\", \"\\n\").tokenize(\"\\n\").findResults {\n      def versionMatch = it =~ versionRegEx\n      if (versionMatch.matches()) {\n        return versionMatch.group(1)\n      }\n      return null\n    }\n  if (!monoVersionList) {\n    throw new StopActionException(\n      sprintf(\"Unable to determine mono version from %s\", monoExe))\n  }\n  monoVersion = monoVersionList[0]\n\n  // Mono 5.x and above generate .pdb files that are compatible with visual\n  // studio as opposed to the mono-specific .pdb files.\n  pdbSupported = monoVersion.tokenize(\".\")[0].toInteger() >= 5\n\n  if (pdbSupported) {\n    logger.warn(\n      sprintf(\"Mono %s detected which will generate .pdb files \" +\n              \"that are not compatible with older versions of Unity. \" +\n              \"This can be fixed by compiling with Unity 5.6.\",\n              monoVersion))\n  }\n\n  // Get the directory that contains this script.\n  scriptDirectory = buildscript.sourceFile.getParentFile()\n\n  // It can take a while to search for build tools, so cache paths in the project\n  // properties.\n  File projectPropertiesFile = new File(scriptDirectory,\"gradle.properties\")\n  if (!projectPropertiesFile.exists()) {\n    logger.info(sprintf(\"Saving %s to %s\",\n                        cacheProperties.stringPropertyNames(),\n                        projectPropertiesFile))\n    cacheProperties.store(projectPropertiesFile.newWriter(), null)\n  }\n\n  // UnityAssetUploader required environment variables.\n  unityUsername = findProperty(\"UNITY_USERNAME\")\n  unityPassword = findProperty(\"UNITY_PASSWORD\")\n  unityPackageId = findProperty(\"UNITY_PACKAGE_ID\")\n  unityPackagePath = findFileProperty(\"UNITY_PACKAGE_PATH\", null)\n\n  // Whether debug symbols should be included.\n  debugEnabled = true\n\n  // Whether interactive mode tests are enabled.\n  interactiveModeTestsEnabled =\n    findProperty(\"INTERACTIVE_MODE_TESTS_ENABLED\", \"1\") == \"1\"\n\n  // Whether to continue to the next test if one fails.\n  continueOnFailForTestsEnabled =\n    findProperty(\"CONTINUE_ON_FAIL_FOR_TESTS_ENABLED\", \"1\") == \"1\"\n\n  // List of test sessions\n  testSessions = []\n\n  // List of test types that should be included. Controlled by\n  // \"INCLUDE_TEST_TYPES\" property. Includes every tests if the property is\n  // empty.\n  // DO NOT USE THIS FOR FILTER, Use `actualIncludeTestTypes` instead.\n  includeTestTypesParam =\n    TestTypeEnum.toSet(\n      findProperty(\"INCLUDE_TEST_TYPES\", \"\").split('\\\\s+|\\\\s*,\\\\s*').toList(),\n      true)\n\n  // List of test types that should be excluded. Controlled by\n  // \"EXCLUDE_TEST_TYPES\" property. Excludes none if the property is\n  // empty.\n  // DO NOT USE THIS FOR FILTER, Use `actualIncludeTestTypes` instead.\n  excludeTestTypesParam =\n    TestTypeEnum.toSet(\n      findProperty(\"EXCLUDE_TEST_TYPES\", \"\").split('\\\\s+|\\\\s*,\\\\s*').toList(),\n      false)\n\n  // The actual list of test types to run.\n  actualIncludeTestTypes = includeTestTypesParam.clone()\n  actualIncludeTestTypes.removeAll(excludeTestTypesParam)\n\n  // List of test modules that should be included. Controlled by\n  // \"INCLUDE_TEST_MODULES\" property. Includes every tests if the property is\n  // empty.\n  // DO NOT USE THIS FOR FILTER, Use `actualIncludeTestModules` instead.\n  includeTestModulesParam =\n    TestModuleEnum.toSet(\n      findProperty(\"INCLUDE_TEST_MODULES\", \"\").split('\\\\s+|\\\\s*,\\\\s*').toList(),\n      true)\n\n  // List of test modules that should be excluded. Controlled by\n  // \"EXCLUDE_TEST_MODULES\" property. Excludes none if the property is\n  // empty.\n  // DO NOT USE THIS FOR FILTER, Use `actualIncludeTestModules` instead.\n  excludeTestModulesParam =\n    TestModuleEnum.toSet(\n      findProperty(\"EXCLUDE_TEST_MODULES\", \"\").split('\\\\s+|\\\\s*,\\\\s*').toList(),\n      false)\n\n  // The actual list of test module to run.\n  actualIncludeTestModules = includeTestModulesParam.clone()\n  actualIncludeTestModules.removeAll(excludeTestModulesParam)\n\n  // List of tests to exclude. Controlled by \"EXCLUDE_TESTS\" property. Excludes\n  // none if the property is empty.\n  excludeTestsParam =\n    new HashSet(findProperty(\"EXCLUDE_TESTS\", \"\").toLowerCase().split('\\\\s+|\\\\s*,\\\\s*').toList())\n\n  // Directory for intermediate and final build outputs.\n  buildDir = new File(scriptDirectory, \"build\")\n  // Directory for external tools.\n  externalToolsDir = new File(scriptDirectory, \"external_tools\")\n  // Directory for testing.\n  testDir = new File(scriptDirectory, \"test_output\")\n  // Version of the plugin (update this with CHANGELOG.md on each release).\n  pluginVersion = \"1.2.183\"\n  // Directory that contains the template plugin.\n  // Files under this directory are copied into the staging area for the\n  // plugin.\n  pluginTemplateDir = new File(scriptDirectory, \"plugin\")\n  // Directory where the plugin is staged to be exported as a Unity package.\n  pluginStagingAreaDir = new File(buildDir, \"staging\")\n  // Directory where the build plugin is unpacked to.\n  pluginExplodedDir = new File(scriptDirectory, \"exploded\")\n  // Directory where the UPM package is unpacked to.\n  pluginUpmDir = new File(scriptDirectory, \"upm\")\n  // Base filename of the released plugin.\n  currentPluginBasename = \"external-dependency-manager\"\n  // Base UPM package name of the released plugin.\n  currentPluginUpmPackageName = \"com.google.external-dependency-manager\"\n  // Where the exported plugin file is built before it's copied to the release\n  // location.\n  pluginExportFile = new File(buildDir, currentPluginBasename + \".unitypackage\")\n  // Where the exported UPM plugin file is built.\n  pluginUpmExportFile = new File(buildDir,\n                                 currentPluginUpmPackageName + \"-\" + pluginVersion + \".tgz\")\n  // Directory within the plugin staging area that just contains the plugin.\n  pluginAssetsDir = new File(\"Assets\", \"ExternalDependencyManager\")\n  // Directories within the staging area to export.\n  pluginExportDirs = [pluginAssetsDir, new File(\"Assets\", \"PlayServicesResolver\")]\n  // Directory within the plugin directory that contains the managed DLLs.\n  pluginEditorDllDir = new File(pluginAssetsDir, \"Editor\")\n  // Directory which contains the solution for all C# projects with a project in\n  // each subdirectory.\n  pluginSourceDir = new File(scriptDirectory, \"source\")\n  // Solution which references all projects used by the plugin.\n  pluginSolutionFile = new File(pluginSourceDir, \"ExternalDependencyManager.sln\")\n  // Versioned release plugin file.\n  pluginReleaseFile = new File(scriptDirectory,\n                               sprintf(\"%s-%s.unitypackage\",\n                                       currentPluginBasename,\n                                       pluginVersion))\n  // Unversioned release plugin file.\n  pluginReleaseFileUnversioned = new File(scriptDirectory,\n                                          sprintf(\"%s-latest.unitypackage\",\n                                                  currentPluginBasename))\n\n  // Location of the Unity asset uploader application.\n  unityAssetUploaderDir = new File(pluginSourceDir, \"UnityAssetUploader\")\n\n  // Location of the export_unity_package application.\n  exportUnityPackageDir = new File(pluginSourceDir, \"ExportUnityPackage\")\n  // Location of the import_unity_package application.\n  importUnityPackageDir = new File(pluginSourceDir, \"ImportUnityPackage\")\n\n  // Common arguments used to execute Unity in batch mode.\n  unityBatchModeArguments = [\"-batchmode\", \"-nographics\"]\n  // Common arguments used to execute Unity in interactive mode.\n  unityInteractiveModeArguments = [\"-gvh_noninteractive\"]\n  // Extension for Unity asset metadata files.\n  unityMetadataExtension = \".meta\"\n  // Extensions for debug files.\n  symbolDatabaseExtension = pdbSupported ? \".pdb\" : \".dll.mdb\"\n  // Changelog file.\n  changelog = new File(scriptDirectory, \"CHANGELOG.md\")\n  pythonBootstrapDir = new File(externalToolsDir, \"python_bootstrap\")\n  pythonBinDir = new File(new File(pythonBootstrapDir, \"python\"), \"bin\")\n  // Python binary after it has been bootstrapped.\n  pythonExe = new File(pythonBinDir, \"python3\")\n  // Pip binary after it has been bootstrapped.\n  pipExe = new File(pythonBinDir, \"pip3\")\n  // Python packages required by export_unity_package.py\n  exportUnityPackageRequirements = [\"absl-py\", \"PyYAML\", \"packaging\"]\n  // Python packages required by gen_guids.py\n  genGuidRequirements = [\"absl-py\"]\n}\n\n// Configure com.jetbrains.python.envs to bootstrap a Python install.\nenvs {\n  bootstrapDirectory = project.ext.pythonBootstrapDir\n  envsDirectory = new File(project.ext.buildDir, \"python_envs\")\n  python \"python\", \"3.9.5\"\n}\n\n/*\n * Host operating system.\n */\npublic enum OperatingSystem {\n  UNKNOWN, MAC_OSX, WINDOWS, LINUX\n\n  /*\n   * Get the current operating system.\n   *\n   * @returns Current host operating system.\n   */\n  public static OperatingSystem getOperatingSystem() {\n    String os_name = System.getProperty(\"os.name\").toLowerCase()\n    if (os_name.contains(\"mac os x\")) {\n      return OperatingSystem.MAC_OSX\n    } else if (os_name.contains(\"windows\")) {\n      return OperatingSystem.WINDOWS\n    } else if (os_name.contains(\"linux\")) {\n      return OperatingSystem.LINUX\n    }\n    return OperatingSystem.UNKNOWN\n  }\n}\n\n/*\n * Test Types\n */\npublic enum TestTypeEnum {\n  INTEGRATION,    // Unity Integration Tests using IntegrationTester framework.\n  NUNIT,          // Tests using NUnit framework\n  PYTHON,         // Tests implemented in Python\n  GRADLE          // Tests implemented in Gradle scripts\n\n  // A complete set of all enums\n  private static HashSet<TestTypeEnum> completeSet;\n\n  /*\n   * Get a complete set of all enums\n   *\n   * @returns A complete set of all enums\n   */\n  private static HashSet<TestTypeEnum> getCompleteSet() {\n    if (completeSet == null) {\n      completeSet = new HashSet<TestTypeEnum>()\n      for (TestTypeEnum type : TestTypeEnum.values()) {\n        completeSet.add(type);\n      }\n    }\n    return completeSet.clone()\n  }\n\n  /*\n   * Convert a list of strings to a set of enums\n   *\n   * @param values A list of case-insensitive strings to convert to enum.\n   * @param completeSetWhenEmpty Whether to return a complete set if the list\n   *        is empty.\n   *\n   * @returns A set of enums\n   */\n  public static HashSet<TestTypeEnum> toSet(\n      Collection<String> values, Boolean completeSetWhenEmpty) {\n    def result = new HashSet<TestTypeEnum>()\n    if ( values == null) {\n      return completeSetWhenEmpty ? getCompleteSet() : result;\n    }\n    for (String value : values) {\n      def trimmed = value.trim().toUpperCase()\n      if (!trimmed.isEmpty()) {\n        result.add(TestTypeEnum.valueOf(trimmed))\n      }\n    }\n    if (result.size() == 0) {\n      result = completeSetWhenEmpty ? getCompleteSet() : result;\n    }\n    return result\n  }\n}\n\n/*\n * Test Modules\n */\npublic enum TestModuleEnum {\n  ANDROIDRESOLVER,    // Tests for Android Resolver\n  VERSIONHANDLER,     // Tests for Version Handler\n  IOSRESOLVER,        // Tests for iOS Resolver\n  PACKAGEMANAGER,     // Tests for Package Manager\n  CORE,               // Tests for reusable C# libraries\n  TOOL                // Tests for build/packaging/release tools\n\n  // A complete set of all enums\n  private static HashSet<TestModuleEnum> completeSet;\n\n  /*\n   * Get a complete set of all enums\n   *\n   * @returns A complete set of all enums\n   */\n  private static HashSet<TestModuleEnum> getCompleteSet() {\n    if (completeSet == null) {\n      completeSet = new HashSet<TestModuleEnum>()\n      for (TestModuleEnum type : TestModuleEnum.values()) {\n        completeSet.add(type);\n      }\n    }\n    return completeSet.clone()\n  }\n\n  /*\n   * Convert a list of strings to a set of enums\n   *\n   * @param values A list of case-insensitive strings to convert to enum.\n   * @param completeSetWhenEmpty Whether to return a complete set if the list\n   *        is empty.\n   *\n   * @returns A set of enums\n   */\n  public static HashSet<TestModuleEnum> toSet(\n      Collection<String> values, Boolean completeSetWhenEmpty) {\n    def result = new HashSet<TestModuleEnum>()\n    if ( values == null) {\n      return completeSetWhenEmpty ? getCompleteSet() : result;\n    }\n    for (String value : values) {\n      def trimmed = value.trim().toUpperCase()\n      if (!trimmed.isEmpty()) {\n        result.add(TestModuleEnum.valueOf(trimmed))\n      }\n    }\n    if (result.size() == 0) {\n      result = completeSetWhenEmpty ? getCompleteSet() : result;\n    }\n    return result\n  }\n}\n\n/*\n * Determine whether the test should be run given the filter parameters,\n * the current test type and the current test module\n *\n * @param type Type of the test.\n * @param module Module of the test.\n *\n * @returns True if the test should be run by the given the filters.\n */\nboolean shouldTestRunWithFilters(TestTypeEnum type, TestModuleEnum module) {\n  project.ext.actualIncludeTestTypes.contains(type) &&\n  project.ext.actualIncludeTestModules.contains(module)\n}\n\n/*\n * Set the test type and module to the given task.\n *\n * @param task The task to set the properties to.\n * @param type Type of the test.\n * @param module Module of the test.\n */\nvoid setTestProperties(Task task, TestTypeEnum type, TestModuleEnum module) {\n  task.ext.testType = type\n  task.ext.testModule = module\n}\n\n/*\n * Unit test for TestTypeEnum\n */\ntask(testTestTypeEnum) { task ->\n  setTestProperties(task, TestTypeEnum.GRADLE, TestModuleEnum.TOOL)\n  doFirst {\n    ReportTestStarted(task)\n  }\n  doLast {\n    def expectedTestTypeEnumCompleteSet =\n      new HashSet([\n        TestTypeEnum.INTEGRATION,\n        TestTypeEnum.NUNIT,\n        TestTypeEnum.PYTHON,\n        TestTypeEnum.GRADLE])\n    def expectedEmptySet = new HashSet()\n    def expectedPythonOnlySet = new HashSet([TestTypeEnum.PYTHON])\n    def expectedPythonAndIntegrationSet = new HashSet([\n      TestTypeEnum.PYTHON,\n      TestTypeEnum.INTEGRATION])\n\n    assert TestTypeEnum.getCompleteSet().equals(\n           expectedTestTypeEnumCompleteSet)\n    assert TestTypeEnum.toSet([], false).equals(\n           expectedEmptySet)\n    assert TestTypeEnum.toSet([], true).equals(\n           expectedTestTypeEnumCompleteSet)\n    assert TestTypeEnum.toSet([\"python\"], false).equals(\n           expectedPythonOnlySet)\n    assert TestTypeEnum.toSet([\"python\"], true).equals(\n           expectedPythonOnlySet)\n    assert TestTypeEnum.toSet([\"PYTHON\"], false).equals(\n           expectedPythonOnlySet)\n    assert TestTypeEnum.toSet([\"PyThOn\"], false).equals(\n           expectedPythonOnlySet)\n    assert TestTypeEnum.toSet([\"Python\", \"Integration\"], false).equals(\n           expectedPythonAndIntegrationSet)\n    assert TestTypeEnum.toSet([\"Integration\", \"Python\"], false).equals(\n           expectedPythonAndIntegrationSet)\n    assert TestTypeEnum.toSet(\n           [\"Integration\", \"Python\", \"Gradle\", \"NUnit\"], false).equals(\n           expectedTestTypeEnumCompleteSet)\n\n    EvaluateTestResult(task)\n  }\n}\n\n/*\n * Unit test for TestModuleEnum\n */\ntask(testTestModuleEnum) { task ->\n  setTestProperties(task, TestTypeEnum.GRADLE, TestModuleEnum.TOOL)\n  doFirst {\n    ReportTestStarted(task)\n  }\n  doLast {\n    def expectedTestModuleEnumCompleteSet =\n      new HashSet([\n        TestModuleEnum.ANDROIDRESOLVER,\n        TestModuleEnum.VERSIONHANDLER,\n        TestModuleEnum.IOSRESOLVER,\n        TestModuleEnum.PACKAGEMANAGER,\n        TestModuleEnum.CORE,\n        TestModuleEnum.TOOL])\n    def expectedEmptySet = new HashSet()\n    def expectedToolOnlySet = new HashSet([TestModuleEnum.TOOL])\n    def expectedToolAndAndroidResolverSet = new HashSet([\n      TestModuleEnum.TOOL,\n      TestModuleEnum.ANDROIDRESOLVER])\n\n    assert TestModuleEnum.getCompleteSet().equals(\n           expectedTestModuleEnumCompleteSet)\n    assert TestModuleEnum.toSet([], false).equals(\n           expectedEmptySet)\n    assert TestModuleEnum.toSet([], true).equals(\n           expectedTestModuleEnumCompleteSet)\n    assert TestModuleEnum.toSet([\"tool\"], false).equals(\n           expectedToolOnlySet)\n    assert TestModuleEnum.toSet([\"tool\"], true).equals(\n           expectedToolOnlySet)\n    assert TestModuleEnum.toSet([\"TOOL\"], false).equals(\n           expectedToolOnlySet)\n    assert TestModuleEnum.toSet([\"TooL\"], false).equals(\n           expectedToolOnlySet)\n    assert TestModuleEnum.toSet([\"Tool\", \"AndroidResolver\"], false).equals(\n           expectedToolAndAndroidResolverSet)\n    assert TestModuleEnum.toSet([\"AndroidResolver\", \"Tool\"], false).equals(\n           expectedToolAndAndroidResolverSet)\n    assert TestModuleEnum.toSet([\n             \"AndroidResolver\",\n             \"VersionHandler\",\n             \"iOSResolver\",\n             \"PackageManager\",\n             \"Core\",\n             \"Tool\"], false).equals(\n           expectedTestModuleEnumCompleteSet)\n    EvaluateTestResult(task)\n  }\n}\n\n/*\n * Test session\n */\npublic class TestSession {\n  public String name;\n  public TestTypeEnum type;\n  public TestModuleEnum module;\n  public Boolean isPassed;\n}\n\n/*\n * Search the path variable for an executable file.\n *\n * @param filename Name of the file to search for.\n *\n * @return If found, the File object that references the file, null otherwise.\n */\nFile findFileInPath(String filename) {\n  def stdout = new ByteArrayOutputStream()\n  exec {\n    executable OperatingSystem.getOperatingSystem() == OperatingSystem.WINDOWS ?\n      \"where\" : \"which\"\n    args filename\n    ignoreExitValue true\n    standardOutput = stdout\n  }\n  String resultString = stdout.toString()\n  return resultString.isEmpty() ? null : new File(resultString)\n}\n\n/*\n * Get a property value by name searching project properties, system properties\n * and environment variables.\n *\n * @param propertyName Name of the property to search for.\n * @param defaultValue Value of the property if it's not found.\n *\n * @returns Property value as string if found and not empty, null otherwise.\n */\nString findProperty(String propertyName, String defaultValue = null) {\n  Closure valueIsSet = {\n    valueString -> valueString != null && !valueString.isEmpty()\n  }\n  String value = null\n  for (def queryObject in [project, System]) {\n    if (queryObject.hasProperty(propertyName)) {\n      value = queryObject.getProperty(propertyName)\n      if (valueIsSet(value)) {\n        return value\n      }\n    }\n  }\n  value = System.getenv(propertyName)\n  return valueIsSet(value) ? value : defaultValue\n}\n\n/*\n * Get a property value by name as a file, searching project properties,\n * system properties and environment variables.\n *\n * @param propertyName Name of the property to search for.\n * @param defaultValue Value of the property if it's not found.\n * @param mustExist Whether the file must exist.\n *\n * @returns Property value as a File if found and exists (if mustExist is true),\n *  null otherwise.\n */\nFile findFileProperty(String propertyName, File defaultValue = null,\n                      Boolean mustExist = false) {\n  String foundFilePath = findProperty(\n    propertyName, defaultValue != null ? defaultValue.absolutePath : null)\n  File foundFile = foundFilePath != null ? new File(foundFilePath) : null\n  return foundFile != null && (!mustExist || foundFile.exists()) ?\n    foundFile : null\n}\n\n/*\n * Get a File from the specified property or the shortest path in the specified\n * FileTree object.\n *\n * @param propertyName Property name to lookup prior to searching the tree\n *   for a matching file.\n * @param useParentDirectory If set to true, this returns a File object pointing\n *   at the parent directory of the file that is found.\n * @param fileTreeClosure Closure which returns a FileTree object to search.\n *\n * @return File if it's found and exists, null otherwise.\n */\nFile getFileFromPropertyOrFileTree(String propertyName,\n                                   Boolean useParentDirectory,\n                                   fileTreeClosure) {\n  File fileValue = findFileProperty(propertyName, null, true)\n  if (fileValue == null) {\n    // Search for the shortest path to the require file.\n    fileTreeClosure().files.each { currentFile ->\n      if (fileValue == null ||\n          fileValue.absolutePath.length() > currentFile.absolutePath.length()) {\n        fileValue = currentFile\n      }\n    }\n    if (useParentDirectory && fileValue != null) {\n      fileValue = fileValue.parentFile\n    }\n  }\n  return fileValue\n}\n\n/*\n * Set a project property and log it.\n *\n * @param name Name of the property.\n * @param value Value of the property.\n * @param properties Map of properties to save to.\n */\nvoid saveProperty(String name, value, Properties properties) {\n  if (value != null) properties.setProperty(name.toString(), value.toString())\n  logger.info(sprintf(\"%s: %s\", name, value))\n}\n\n/*\n * Removes the extension from a filename.\n *\n * @param fileObj File object to split into a basename and extension.\n *\n * @returns (basename, extension) tuple where basename is the filename without\n * an extension and extension is the extension.\n */\nList<String> splitFilenameExtension(File fileObj) {\n  String filename = fileObj.name\n  String trimmedFilename = filename\n  if (trimmedFilename.endsWith(project.ext.unityMetadataExtension)) {\n    trimmedFilename -= project.ext.unityMetadataExtension\n  }\n  if (trimmedFilename.endsWith(\".dll.mdb\")) {\n    trimmedFilename -= \".mdb\"\n  }\n  int extensionIndex = trimmedFilename.lastIndexOf(\".\")\n  if (extensionIndex < 0) return [filename, \"\"]\n  String basename = filename.substring(0, extensionIndex)\n  String extension = filename.substring(extensionIndex)\n  return [basename, extension]\n}\n\n/*\n * Construct the name of a versioned asset from the source filename and version\n * string.  If fullVersionPrefix is true, the encoded string takes the form\n * ${filename}_version-${version}.${extension}\n * if fullVersionPrefix is false, the string takes the form\n * ${filename}_v${version}.${extension}\n * where extension is derived from the specified filename.\n *\n * @param fileObj File to add version to.\n * @param fullVersionPrefix if true uses the \"_version-\" otherwise uses \"_v-\".\n * @param postfix Optional string to add before the extensioon.\n * @param useVersionDir If true, place the file to be under a folder named after\n *        the version number, instead of changing the filename.\n *\n * @returns File which includes an encoded version.\n */\nFile versionedAssetFile(File fileObj, Boolean fullVersionPrefix,\n                        String postfix, Boolean useVersionDir) {\n  String basename\n  String extension\n  (basename, extension) = splitFilenameExtension(fileObj)\n  // Encode the DLL version and target names into the DLL in the form...\n  // ${dllname}_version-${version}.dll\n  String targetName = basename\n  String version = project.ext.pluginVersion\n  File dllDir = fileObj.parent != null ? new File(fileObj.parent) :\n        new File()\n  if (!(version == null || version.isEmpty())) {\n    if (useVersionDir) {\n      dllDir = new File(dllDir, version)\n    } else {\n      targetName += (fullVersionPrefix ? \"_version-\" : \"_v\") + version\n    }\n  }\n  String filename = targetName + postfix + extension\n  return new File(dllDir, filename)\n}\n\n/*\n * Remove the version component from a path. (Both its filename and its parent\n * folder)\n *\n * @param fileObj File to remove version from.\n *\n * @returns File with removed version string.\n */\nFile unversionedAssetFile(File fileObj) {\n  // Remove the version postfix. Ex.\n  // \"ExternalDependencyManager/Editor/Google.IOSResolver_v1.2.166.dll\" ->\n  // \"ExternalDependencyManager/Editor/Google.IOSResolver.dll\"\n  String basename\n  String extension\n  (basename, extension) = splitFilenameExtension(fileObj)\n  def versionRegExFull = /^(.*)_(version-[^-]+)$/\n  def versionRegExShort = /^(.*)_(v[^v]+)$/\n  def versionMatch = basename =~ versionRegExShort\n  if (versionMatch.matches()) {\n    basename = versionMatch.group(1)\n  } else {\n    versionMatch = basename =~ versionRegExFull\n    if (versionMatch.matches()) {\n      basename = versionMatch.group(1)\n    }\n  }\n  String filename = basename + extension\n\n  // Remove the version folder as well. Ex.\n  // \"ExternalDependencyManager/Editor/1.2.166/Google.IOSResolver.dll\" ->\n  // \"ExternalDependencyManager/Editor/Google.IOSResolver.dll\"\n  def versionFolderRegEx = /^[0-9]+\\.[0-9]+\\.[0-9]+$/\n  File parent = fileObj.parent != null ? new File(fileObj.parent) : null\n  if (parent != null) {\n      String parentFolder = parent.name\n      def folderMatch = parentFolder =~ versionFolderRegEx\n      if (folderMatch.matches()) {\n          parent = parent.parent != null ? new File(parent.parent) : null\n      }\n  }\n  return parent != null ? new File(parent, filename) : new File(filename)\n}\n\n/*\n * Copy a file.\n *\n * @param sourceFile File to copy.\n * @param targetFile File to write to.\n *\n * @returns targetFile.\n */\nFile copyFile(File sourceFile, File targetFile) {\n  targetFile.parentFile.mkdirs()\n  logger.info(sprintf(\"Copy %s -> %s\", sourceFile.path, targetFile.path))\n  targetFile.newOutputStream() << sourceFile.newInputStream()\n  return targetFile\n}\n\n/*\n * Copy a list of files from one directory into another.\n *\n * @param taskName Name of the task.\n * @param taskDescription Description of the task.\n * @param filesToCopy List of files to copy with paths relative to the source\n * directory.\n * @param sourceDir Directory to copy files from.\n * @param targetDir Directory to copy files into preserving the relative path of\n * each file.\n * @param dependsOn List of dependencies for the task.\n * @param copyFileClosure Closure which takes (sourceFile, targetFile) to copy a\n * file.\n *\n * @returns Task which copies the specified files.  The ext.sourceTargetFileMap\n * property of the task contains the mapping of source to target files to be\n * copied by the task.\n */\nTask createCopyFilesTask(String taskName, String taskDescription,\n                         Iterable<File> filesToCopy, File sourceDir,\n                         File targetDir, Iterable<Task> dependsOn,\n                         Closure copyFileClosure) {\n  Map<File, File> sourceTargetFileMap = filesToCopy.collectEntries {\n    [(new File(sourceDir, it.path)), (new File(targetDir, it.path))]\n  }\n  if (!copyFileClosure) {\n    copyFileClosure = {\n      sourceFile, targetFile -> copyFile(sourceFile, targetFile)\n    }\n  }\n  Task copyTask = tasks.create(name: taskName,\n                               description: taskDescription,\n                               type: Task,\n                               dependsOn: dependsOn).with {\n    inputs.files sourceTargetFileMap.keySet()\n    outputs.files sourceTargetFileMap.values()\n    doLast {\n      sourceTargetFileMap.each { sourceFile, targetFile ->\n        copyFileClosure(sourceFile, targetFile)\n      }\n    }\n  }\n  copyTask.ext.sourceTargetFileMap = sourceTargetFileMap\n  return copyTask\n}\n\n/*\n * Copy a file, injecting release information if it's a Unity asset metadata\n * file.\n *\n * @param sourceFile File to copy from.\n * @param targetFile File to copy to.\n *\n * @return targetFile.\n */\nFile copyAssetMetadataFile(File sourceFile, File targetFile) {\n  if (!sourceFile.name.endsWith(project.ext.unityMetadataExtension)) {\n    return copyFile(sourceFile, targetFile)\n  }\n  String[] lines = sourceFile.text.tokenize(\"\\n\")\n\n  // Parse the existing version from the asset metadata.\n  def folderAssetRegEx = /^folderAsset:\\s+yes\\s*$/\n  def versionRegEx = /^(-\\s+gvh_version-)([a-zA-Z0-9.]+)\\s*$/\n  def exportPathRegEx = /^(-\\s+gvhp_exportpath-)(.*)$/\n  Boolean isFolder = false\n  String currentVersion = \"\"\n  lines.each { String line ->\n    def versionMatch = line =~ versionRegEx\n    def folderMatch = line =~ folderAssetRegEx\n    if (versionMatch.matches()) {\n      currentVersion = versionMatch.group(2)\n    } else if (folderMatch.matches()) {\n      isFolder = true\n    }\n  }\n  Boolean isNotVersioned = (isFolder ||\n                            targetFile.name.startsWith(\n                                \"play-services-resolver\"))\n  // Ignore folder assets, they don't need to be versioned.\n  if (isNotVersioned) return copyFile(sourceFile, targetFile)\n  Boolean versionChanged = currentVersion != project.ext.pluginVersion\n\n  List<String> outputLines = []\n  lines.each { line ->\n    if (versionChanged) {\n      def guidMatch = (line =~ /^(guid:)\\s+(.*)/)\n      def versionLabelMatch = (line =~ versionRegEx)\n      def exportPathMatch = (line =~ exportPathRegEx)\n      if (guidMatch.matches() && (sourceFile.name != targetFile.name ||\n            sourceFile.parent != targetFile.parent ) ) {\n        // Update the metadata's GUID.\n        // If a file is renamed we want to make sure Unity imports it as a new\n        // asset with the new filename.\n        line = sprintf(\n          \"%s %s\",\n          guidMatch.group(1),\n          java.util.UUID.randomUUID().toString().replace(\"-\", \"\"))\n      } else if (versionLabelMatch.matches()) {\n        // Update the version metadata for the asset.\n        line = sprintf(\"%s%s\", versionLabelMatch.group(1),\n                       project.ext.pluginVersion)\n      } else if (exportPathMatch.matches()) {\n        // Update the export path of the asset.\n        line = sprintf(\"%s%s\", exportPathMatch.group(1),\n                       targetFile.path.replaceFirst(/.*\\/Assets\\//, \"\"))\n        line = line.substring(0, line.length() -\n                              project.ext.unityMetadataExtension.length())\n      }\n    }\n    outputLines.add(line)\n    // If the metadata file does not contain a version label, inject it.\n    if (currentVersion.isEmpty() && line.startsWith(\"labels:\")) {\n      outputLines.add(sprintf(\"- gvh_version-%s\", project.ext.pluginVersion))\n    }\n  }\n  targetFile.write(outputLines.join(\"\\n\") + \"\\n\")\n\n  return targetFile\n}\n\n/*\n * Build a project with xbuild.\n *\n * @param taskName Name of the task.\n * @param taskDescription Description of the task.\n * @param projectToBuild Path to the project to build.\n * @param target Target to build in the project.\n * @param inputFiles Input files for the project.\n * @param outputDir Output directory.\n * @param outputFiles List of output file paths relative to the output\n * directory.\n * @param dependsOn List of dependencies for the task.\n *\n * @returns Task which builds the specified target.\n */\nTask createXbuildTask(String taskName, String taskDescription,\n                      File projectToBuild, String target,\n                      Iterable<File> inputFiles, File outputDir,\n                      Iterable<File> outputFiles, Iterable<Task> dependsOn) {\n  File intermediatesDir = new File(outputDir, \"obj\")\n  File binaryOutputDir = new File(outputDir, \"bin\")\n  Iterable<File> outputFilesInBinaryOutputDir = outputFiles.collect {\n    return new File(binaryOutputDir, it.path)\n  }\n\n  if (project.ext.debugEnabled) {\n    outputFilesInBinaryOutputDir += outputFilesInBinaryOutputDir.findResults {\n      return it.name.endsWith(\".dll\") ?\n        new File(it.parentFile.path,\n                 splitFilenameExtension(it)[0] +\n                 project.ext.symbolDatabaseExtension) : null\n    }\n  }\n\n  Iterable<Task> dependsOnTasks = dependsOn ? dependsOn : []\n  Iterable<Task> compileTaskDependencies = dependsOnTasks.clone()\n  Iterable<Task> patchVersionFilesTasks = inputFiles.findResults {\n    if (it.name == \"VersionNumber.cs\") {\n      File versionFile = it\n      Task patchVersionTask = tasks.create(\n        name: taskName + \"AddVersionTo\" + it.name,\n        description: \"Add version to \" + it.path,\n        type: Task,\n        dependsOn: dependsOnTasks)\n      patchVersionTask.with {\n        inputs.files files([versionFile])\n        outputs.files files([versionFile])\n        doLast {\n          String[] lines = versionFile.text.split(\"\\n\")\n          List<String> outputLines = lines.collect {\n            it.replaceAll(\n              /(^.*VERSION_STRING[ ]*=[ ]*\\\")([^\\\"]+)(\\\".*)/,\n              '$1' + project.ext.pluginVersion + '$3')\n          }\n          String patchedFileString = (outputLines.join(\"\\n\") + \"\\n\")\n          if (versionFile.text != patchedFileString) {\n            print(\"Patch \" + versionFile.name)\n            versionFile.write(patchedFileString)\n          }\n        }\n      }\n      return patchVersionTask\n    }\n  }\n  if (patchVersionFilesTasks) {\n    compileTaskDependencies += patchVersionFilesTasks\n  }\n\n  Task task = tasks.create(name: taskName,\n                           description: taskDescription,\n                           type: Task,\n                           dependsOn: compileTaskDependencies).with {\n    inputs.files inputFiles\n    outputs.files files(outputFilesInBinaryOutputDir)\n    doLast {\n      exec {\n        executable project.ext.xbuildExe\n        workingDir projectToBuild.parentFile.absolutePath\n        args ([sprintf(\"/target:%s\", target),\n               sprintf(\"/property:UnityHintPath=%s\",\n                       project.ext.unityDllPath.absolutePath),\n               sprintf(\"/property:UnityIosPath=%s\",\n                       project.ext.unityIosPath.absolutePath),\n               sprintf(\"/property:BaseIntermediateOutputPath=%s%s\",\n                       intermediatesDir.absolutePath,\n                       File.separator),\n               sprintf(\"/property:OutputPath=%s%s\",\n                       binaryOutputDir.absolutePath,\n                       File.separator),\n               \"/verbosity:quiet\",\n               projectToBuild.absolutePath])\n      }\n    }\n  }\n  task.ext.buildDir = outputDir\n  return task\n}\n\n/*\n * Generates tasks to compile a plugin DLL and copy it to plugin staging\n * area directory.\n *\n * @param componentName Basename of the generated tasks.\n * @param projectName Name of the project under\n * source/${projectName}/${projectName}.csproj to build.\n * @param assemblyDllBasename Basename of the output DLL generated from the\n * specified project.\n * @param versionDll Whether the output DLL filename should contain the plugin\n * version.\n * @param dependsOn List of tasks that should be completed before this plugin\n * task is executed.\n *\n * @returns Task that builds the DLL to the build output folder.\n */\nTask createBuildPluginDllTask(String componentName,\n                              String projectName,\n                              String assemblyDllBasename,\n                              Boolean versionDll,\n                              Iterable<Task> dependsOn = null) {\n  File projectDir = new File(project.ext.pluginSourceDir, projectName)\n  File projectBuildDir = new File(project.ext.buildDir, projectName)\n\n  // Compile the C# project.\n  Task compileTask = createXbuildTask(\n    sprintf(\"compile%s\", componentName), sprintf(\"Compile %s\", projectName),\n    project.ext.pluginSolutionFile, projectName,\n    fileTree(new File(projectDir, \"src\")), projectBuildDir,\n    [new File(assemblyDllBasename)], dependsOn)\n  compileTask.ext.componentName = componentName\n\n  // Template metadata for the built DLL.\n  Iterable<File> assemblyDllMetaFiles =\n    compileTask.outputs.files.collect {\n      new File(new File(project.ext.pluginTemplateDir,\n                        project.ext.pluginEditorDllDir.path),\n               it.name + project.ext.unityMetadataExtension)\n    }\n  // Optionally map unversioned to versioned filenames.\n  Iterable<File> unversionedFiles = files(compileTask.outputs.files,\n                                          assemblyDllMetaFiles)\n\n  File stagingDir = new File(new File(projectBuildDir,\n                                      project.ext.pluginStagingAreaDir.name),\n                             project.ext.pluginEditorDllDir.path)\n  Map<String, File> stagingFileMap =\n    unversionedFiles.collectEntries { File unversionedFile ->\n      File unversionedOutputFile = new File(stagingDir.path,\n                                            unversionedFile.name)\n      return [\n        unversionedFile.path,\n        versionDll ?\n          versionedAssetFile(unversionedOutputFile, false, \"\", true) :\n          unversionedOutputFile]\n    }\n\n  // Copy files to the staging directory for this project.\n  Task copyTask = tasks.create(\n      name: sprintf(\"copy%sStaging\", componentName),\n      type: Task,\n      description: sprintf(\"Copy %s DLLs to the plugin staging dir.\",\n                         projectName),\n      dependsOn: [compileTask]).with {\n    inputs.files unversionedFiles\n    outputs.files stagingFileMap.values()\n    doLast {\n      inputs.files.each {\n        File inputFile ->\n          copyAssetMetadataFile(inputFile, stagingFileMap[inputFile.path])\n      }\n    }\n  }\n  copyTask.ext.stagingDir = stagingDir\n  copyTask.ext.componentName = componentName\n\n  // Generate a clean target for this project.\n  Task cleanTask = tasks.create(name: sprintf(\"clean%s\", componentName),\n               description: sprintf(\"Clean %s plugin DLL\", projectName),\n               type: Delete).with {\n    delete (files(compileTask.outputs.files,\n                  copyTask.outputs.files,\n                  projectBuildDir))\n  }\n  cleanTask.ext.componentName = componentName\n\n  // Return the build target for this project.\n  Task buildTask =\n    tasks.create(name: sprintf(\"build%s\", componentName),\n                 description: sprintf(\"Build %s plugin DLL\",\n                                      projectName),\n                 dependsOn: [copyTask])\n  buildTask.ext.componentName = componentName\n  return buildTask\n}\n\n/*\n * Creates a task which compiles and run an NUnit test.\n *\n * @param taskName Name of the test.\n * @param description Description of the task.\n * @param dependsOn Dependencies of the new task.\n * @param unityProjectDir Directory containing a assets to copy into the\n *   integration test project.\n * @param arguments Additional arguments for Unity when running the integration\n *   test.\n * @param testType Type of the test\n * @param testModule Module of the test\n */\nTask createUnityNUnitTest(String taskName,\n                          String description,\n                          Iterable<Task> dependsOn,\n                          File unityProjectDir,\n                          Iterable<String> arguments,\n                          TestTypeEnum testType,\n                          TestModuleEnum testModule) {\n  createUnityTestBatchAndNonBatch(\n    taskName,\n    description,\n    [\"buildPlugin\"],\n    unityProjectDir,\n    [],\n    arguments + [\n      \"-runTests\",\n      \"-batchmode\",\n      \"-testResults\", \"results.xml\",\n      \"-testPlatform\", \"EditMode\"\n    ], null, testType, testModule,\n    true,\n    new File(new File(new File(\n        project.ext.scriptDirectory,\n        \"test_resources\"),\n        \"nunit_upm\"),\n        \"manifest.json\"))\n}\n\n/*\n * Create a task to run an executable.\n *\n * @param name Name of the task.\n * @param description Description of the task.\n * @param dependsOn Tasks this depends upon.\n * @param executable Executable to run.\n * @param arguments Arguments for the executable.\n * @param continueOnFail Whether to ignore non-zero return code and continue.\n *\n * @returns Task which runs the specified executable.\n */\nTask createExecTask(String name, String description,\n                    Iterable<Task> dependsOn, File executableToRun,\n                    Iterable<String> arguments, Boolean continueOnFail = false) {\n  Task execTask = tasks.create(name: name,\n                               description: description,\n                               type: Exec,\n                               dependsOn: dependsOn)\n  execTask.with {\n    executable executableToRun\n    args arguments\n    ignoreExitValue continueOnFail\n  }\n  return execTask\n}\n\n/*\n * Create a task that does nothing.\n *\n * @param taskName Name of the task to create.\n * @param summary Description of the task.\n * @param dependsOn Dependencies of the new task.\n *\n * @returns Task that does nothing.\n */\nTask createEmptyTask(String taskName, String summary,\n                     Iterable<Task> dependsOn) {\n  Task emptyTask = tasks.create(name: taskName,\n                                description: sprintf(\"(disabled) %s\", summary),\n                                dependsOn: dependsOn)\n  emptyTask.with {\n    doLast {\n      logger.info(sprintf(\"%s disabled\", taskName))\n    }\n  }\n  return emptyTask\n}\n\n/*\n * Create a task to execute Unity.\n *\n * @param taskName Name of the task to create.\n * @param summary Description of the operation being performed with Unity.\n * \"create\" is a reserved operation that creates a project.  This is used to\n * generate the log file name so should be unique for the project and ideally\n * not contain whitespace.\n * @param dependsOn Dependencies of the new task.\n * @param projectName Name of the project directory to use.\n * @param projectContainerDir Directory that contains the project directory.\n * @param arguments Command line arguments to pass to Unity.\n * @param batchMode Whether to run Unity in batch mode.\n * @param createTaskClosure Optional task used to start Unity, this must\n *   conform to createExecTask()\n * @param continueOnFail Whether to ignore non-zero return code and continue.\n *\n * @returns Task which executes Unity.\n * The following extended properties are set on the task:\n * - ext.projectDir: Directory of the created Unity project.\n * - ext.containerDir: Directory which contains the Unity project and the logs.\n *   This is the same as projectContainerDir.\n * - ext.logFile: Unity log file from the operation.\n */\nTask createUnityTask(String taskName, String summary,\n                     Iterable<Task> dependsOn, String projectName,\n                     File projectContainerDir, Iterable<String> arguments,\n                     Boolean batchMode, createTaskClosure,\n                     Boolean continueOnFail = false) {\n  Boolean createProject = summary == \"create\"\n  File logFile = new File(projectContainerDir,\n                          sprintf(\"%s_%s.log\", projectName, summary))\n  File projectDir = new File(projectContainerDir, projectName)\n  List<String> executeArguments = []\n\n  if (batchMode) {\n    executeArguments += project.ext.unityBatchModeArguments\n  } else {\n    executeArguments += project.ext.unityInteractiveModeArguments\n  }\n  executeArguments += [\n    \"-logFile\", logFile.absolutePath,\n    createProject ? \"-createProject\" : \"-projectPath\", projectDir.absolutePath]\n  if (createProject) executeArguments += [\"-quit\"]\n  executeArguments += arguments\n\n  if (!createTaskClosure) {\n    createTaskClosure = {\n      String name, String description, Iterable<Task> depends,\n      File executable, Iterable<String> args, Boolean contOnFail->\n        return createExecTask(name,\n                              description,\n                              depends,\n                              executable,\n                              args,\n                              contOnFail)\n    }\n  }\n\n  Task unityTask\n  if (!batchMode && !project.ext.interactiveModeTestsEnabled) {\n    unityTask = createEmptyTask(taskName, summary, dependsOn)\n  } else {\n    unityTask = createTaskClosure(taskName,\n                                  sprintf(\n                                    \"Run Unity to %s (project: %s)\",\n                                    summary, projectName),\n                                  dependsOn,\n                                  project.ext.unityExe,\n                                  executeArguments,\n                                  continueOnFail)\n  }\n  unityTask.with {\n    outputs.files files(logFile)\n  }\n  unityTask.ext.projectDir = projectDir\n  unityTask.ext.containerDir = projectContainerDir\n  unityTask.ext.logFile = logFile\n  return unityTask\n}\n\n/*\n * Create a task that generates a Unity project.\n *\n * @param taskName Name of the task.\n * @param dependsOn Dependencies of the new task.\n * @param projectName Name of the project directory to create.\n * @param projectContainerDir Directory to create the project directory in.\n *\n * @returns Task which executes Unity.\n * The following extended properties are set on the task:\n * - ext.projectDir: Directory of the created Unity project.\n * - ext.containerDir: Directory which contains the Unity project and the logs.\n *   This is the same as projectContainerDir.\n * - ext.logFile: Unity log file from the operation.\n */\nTask createUnityProjectTask(String taskName, Iterable<Task> dependsOn,\n                            String projectName, File projectContainerDir) {\n  return createUnityTask(taskName, \"create\", dependsOn, projectName,\n                         projectContainerDir, [], true, null).with {\n    doFirst {\n      // Clean / create the output directory.\n      delete ext.containerDir\n      ext.containerDir.mkdirs()\n    }\n  }\n}\n\n/*\n * Creates a task which runs a test with the Unity plugin.\n *\n * @param taskName Name of the test.\n * @param description Description of the task.\n * @param dependsOn Dependencies of the new task.\n * @param testScriptsDir Directory containing scripts to copy into the test\n *   project and execute for testing.\n * @param additionalArguments Additional arguments to pass to Unity when\n *   executing the test.\n * @param batchMode Whether to execute Unity in batch mode.\n * @param editorAssets Files to copy into the Assets/Editor folder in the\n *   project.\n * @param createTaskClosure Optional task used to start Unity, this must\n *   conform to tasks.create(name, description, type, dependsOn).\n * @param testType Type of the test\n * @param testModule Module of the test\n * @param enableDlls Whether to enable dlls through Version Handlers before tests.\n * @param upm_package_manifest Specify UPM package manifest (manifest.json)\n *\n * @returns Test task.\n */\nTask createUnityTestTask(String taskName, String description,\n                         Iterable<Task> dependsOn, File testScriptsDir,\n                         Iterable<File> editorAssets,\n                         Iterable<String> additionalArguments,\n                         Boolean batchMode, createTaskClosure,\n                         TestTypeEnum testType, TestModuleEnum testModule,\n                         Boolean enableDlls = false,\n                         File upm_package_manifest = null) {\n  List<File> testScripts = []\n  if (testScriptsDir) {\n    testScripts = fileTree(testScriptsDir).collect {\n      new File(it.absolutePath.substring(\n                 testScriptsDir.absolutePath.length() + 1))\n    }\n  }\n\n  // Setup the Unity project.\n  List<Task> setupTasks = []\n  File testOutputDir = new File(project.ext.testDir, taskName)\n  Task createProject = createUnityProjectTask(\n      sprintf(\"createsetup%s\", taskName), dependsOn, taskName, testOutputDir)\n  createProject.with { task ->\n    inputs.files files(project.ext.pluginExportFile)\n    setTestProperties(task, testType, testModule)\n  }\n  setupTasks += [createProject]\n\n  Task setupTestProject = createUnityTask(\n      sprintf(\"setup%s\", taskName), \"import_plugin\", [createProject], taskName,\n      testOutputDir, [\"-importPackage\", project.ext.pluginExportFile.absolutePath,\n       \"-quit\"], batchMode, null)\n  setupTestProject.with { task ->\n    inputs.files (testScripts + editorAssets)\n    setTestProperties(task, testType, testModule)\n  }\n  setupTasks += [setupTestProject]\n\n  Task versionHandlerUpdate;\n  if (enableDlls) {\n    File updaterScriptDir = new File(new File(new File(\n        setupTestProject.ext.projectDir,\n        \"Assets\"),\n        \"Editor\"),\n        \"VersionHandlerUpdater\")\n    versionHandlerUpdate = createUnityTask(\n        sprintf(\"enableDlls%s\", taskName), \"enable_dlls\", [setupTestProject], taskName,\n        testOutputDir, [], batchMode, null)\n    versionHandlerUpdate.with { task ->\n      setTestProperties(task, testType, testModule)\n      doFirst {\n        copy {\n          from new File(new File(new File(\n              project.ext.scriptDirectory,\n              \"test_resources\"),\n              \"version_handler_update\"),\n              \"VersionHandlerUpdater.cs\")\n          into updaterScriptDir\n        }\n      }\n      doLast {\n        delete updaterScriptDir\n      }\n    }\n    setupTasks += [versionHandlerUpdate]\n  }\n\n  List<Task> copyTasks = []\n\n  // Task which copies test scripts into the project.\n  if (testScriptsDir) {\n    Task copyTestScripts = createCopyFilesTask(\n      sprintf(\"copyScriptsFor%s\", taskName),\n      sprintf(\"Copy the test scripts into the %s Unity project.\", taskName),\n      testScripts, testScriptsDir, setupTestProject.ext.projectDir,\n      setupTasks, null)\n    copyTestScripts.with { task ->\n        setTestProperties(task, testType, testModule)\n    }\n    copyTasks += [copyTestScripts]\n  }\n\n  if (upm_package_manifest != null) {\n    Task copyPackageManifest = tasks.create(\n      name: sprintf(\"copyPackageManifestFor%s\", taskName),\n      description: sprintf(\"Copy the package manifest into the %s Unity project.\",\n                          taskName),\n      type: Copy,\n      dependsOn: setupTasks)\n    copyPackageManifest.with { task ->\n      from upm_package_manifest\n      into new File(setupTestProject.ext.projectDir, \"Packages\")\n      setTestProperties(task, testType, testModule)\n    }\n    copyTasks += [copyPackageManifest]\n  }\n\n  // Task which copies editor scripts into the project.\n  Task copyEditorAssets = tasks.create(\n    name: sprintf(\"copyEditorAssetsFor%s\", taskName),\n    description: sprintf(\"Copy the editor assets into the %s Unity project.\",\n                         taskName),\n    type: Copy,\n    dependsOn: setupTasks)\n  copyEditorAssets.with { task ->\n    from editorAssets\n    into new File(new File(setupTestProject.ext.projectDir, \"Assets\"),\n                  \"Editor\")\n    setTestProperties(task, testType, testModule)\n  }\n  copyTasks += [copyEditorAssets]\n\n  // Create the test task.\n  Task testTask = createUnityTask(taskName, \"test\",\n                                  copyTasks,\n                                  setupTestProject.ext.projectDir.name,\n                                  setupTestProject.ext.containerDir,\n                                  additionalArguments, batchMode,\n                                  createTaskClosure,\n                                  true)\n  testTask.description = description\n  testTask.with { task ->\n    finalizedBy \"reportAllTestsResult\"\n    doLast {\n      EvaluateTestResult(task)\n    }\n    doFirst {\n      ReportTestStarted(task)\n    }\n    setTestProperties(task, testType, testModule)\n  }\n\n  // Create a clean task\n  Task cleanTestTask = tasks.create(name: sprintf(\"clean%s\", taskName),\n                                    description: sprintf(\"Clean %s\", taskName),\n                                    type: Delete).with {\n    delete setupTestProject.ext.containerDir\n  }\n\n  return testTask\n}\n\n/*\n * Creates a task which runs tests with the Unity plugin in batch and\n * non-batch modes.\n *\n * @param taskName Name of the test.\n * @param description Description of the task.\n * @param dependsOn Dependencies of the new task.\n * @param testScriptsDir Directory containing scripts to copy into the test\n *   project and execute for testing.\n * @param editorAssets Files to copy into the Assets/Editor folder in the\n *   project.\n * @param additionalArguments Additional arguments to pass to Unity.\n * @param createTaskClosure Optional task used to start Unity, this must\n *   conform to tasks.create(name, description, type, dependsOn).\n * @param testType Type of the test\n * @param testModule Module of the test\n * @param enableDlls Whether to enable dlls through Version Handlers before tests.\n * @param upm_package_manifest Specify UPM package manifest (manifest.json)\n *\n * @returns Test task.\n */\nTask createUnityTestBatchAndNonBatch(String taskName, String description,\n                                     Iterable<Task> dependsOn,\n                                     File testScriptsDir,\n                                     Iterable<File> editorAssets,\n                                     Iterable<String> additionalArguments,\n                                     createTaskClosure,\n                                     TestTypeEnum testType,\n                                     TestModuleEnum testModule,\n                                     Boolean enableDlls = false,\n                                     File upm_package_manifest = null) {\n  return tasks.create(name: taskName,\n                      description: description,\n                      dependsOn: [\n                        createUnityTestTask(\n                          sprintf(\"%sBatchMode\", taskName),\n                          sprintf(\"%s (Batch Mode)\", description),\n                          dependsOn, testScriptsDir, editorAssets,\n                          additionalArguments, true, createTaskClosure,\n                          testType, testModule,\n                          enableDlls, upm_package_manifest),\n                        createUnityTestTask(\n                          sprintf(\"%sInteractiveMode\", taskName),\n                          sprintf(\"%s (Interactive Mode)\", description),\n                          dependsOn, testScriptsDir, editorAssets,\n                          additionalArguments, false, createTaskClosure,\n                          testType, testModule,\n                          enableDlls, upm_package_manifest)])\n}\n\n/*\n * Install Python packages.\n *\n * @param taskName Name of the task to create.\n * @param description Description of the task.\n * @param dependsOn Dependencies of the new task.\n * @param packages Packages to install.\n *\n * @returns Task which executes pip to install packages\n */\nTask createInstallPythonPackageTask(String taskName, String description,\n                                    Iterable<Task> dependsOn,\n                                    Iterable<String> packages) {\n  Task installPythonPackageTask = tasks.create(\n      name: taskName,\n      description: sprintf(\"Run Pip to %s\", description),\n      type: Exec,\n      dependsOn: dependsOn + [\"build_envs\"]).with {\n    executable project.ext.pipExe\n    args ([\"-q\", \"install\"] + packages)\n  }\n}\n\n/*\n * Create a task to execute Python.\n *\n * @param taskName Name of the task to create.\n * @param description Description of the task.\n * @param dependsOn Dependencies of the new task.\n * @param script Python script to run.\n * @param arguments Command line arguments to pass to the Python script.\n * @param packages Optional Python packages to install.\n * @param continueOnFail Whether to ignore non-zero return code and continue.\n *\n * @returns Task which executes Python.\n */\nTask createPythonTask(String taskName, String description,\n                      Iterable<Task> dependsOn,\n                      File script, Iterable<String> arguments,\n                      Iterable<String> packages,\n                      Boolean continueOnFail = false) {\n  List<Task> installPackagesTask = []\n  if (packages) {\n    installPackagesTask = [\n      createInstallPythonPackageTask(\n        taskName + \"InstallPipPackages\",\n        sprintf(\"install packages %s for %s\", packages.toString(), taskName),\n        [],\n        packages)\n    ]\n  }\n  Task pythonTask = tasks.create(\n      name: taskName,\n      description: sprintf(\"Run Python to %s\", description),\n      type: Exec,\n      dependsOn: (dependsOn + installPackagesTask + [\"build_envs\"])).with {\n    ignoreExitValue continueOnFail\n    executable project.ext.pythonExe\n    args ([script.absolutePath] + arguments)\n  }\n  return pythonTask\n}\n\n/*\n * Creates a task that packages a Unity plugin with export_unity_package.py.\n *\n * @param taskName Name of the task to create.\n * @param description Description of the task.\n * @param dependsOn Dependencies of the new task.\n * @param configFile Configuration file which specifies input files.\n * @param guidsFile Optional GUIDs database file.\n * @param assetsDir Input directory for assets referenced by the configFile.\n * @param generateUnitypackage Whether to create a .unitypackage.\n * @param generateUpmTarball Whether to create a UPM tarball.\n * @param pluginsVersion Version to apply to exported plugins.\n * @param outputDir Directory to write the the exported archives.\n * @param arguments Additional arguments for export_unity_package.py\n */\nTask createExportUnityPackageTask(String taskName,\n                                  String description,\n                                  Iterable<Task> dependsOn,\n                                  File configFile,\n                                  File guidsFile,\n                                  File assetsDir,\n                                  Boolean generateUnityPackage,\n                                  Boolean generateUpmTarball,\n                                  String pluginVersion,\n                                  File outputDir,\n                                  Iterable<String> arguments) {\n  File exportScript = new File(project.ext.exportUnityPackageDir,\n                               \"export_unity_package.py\")\n  Task exportUnityPackageTask = createPythonTask(\n    taskName,\n    description,\n    dependsOn,\n    exportScript,\n    [\"--config_file\", configFile,\n     \"--assets_dir\", assetsDir,\n     \"--plugins_version\", pluginVersion,\n     \"--output_dir\", outputDir] +\n    [generateUnityPackage ?\n      \"--output_unitypackage\" : \"--nooutput_unitypackage\"] +\n    [generateUpmTarball ? \"--output_upm\" : \"--nooutput_upm\"] +\n    (guidsFile ? [\"--guids_file\", guidsFile] : []) +\n    [\"-v\", \"-1\"] + // Only display warnings.\n    arguments,\n    exportUnityPackageRequirements)\n  exportUnityPackageTask.with {\n    inputs.files ([configFile] +\n                  (guidsFile ? [guidsFile] : []) +\n                  fileTree(assetsDir) +\n                  [exportScript])\n  }\n  return exportUnityPackageTask\n}\n\nTask createGenGuidTask(String taskName,\n                       String description,\n                       File guidsFile,\n                       String pluginVersion,\n                       Iterable<String> guidPath) {\n  File genGuidScript = new File(project.ext.exportUnityPackageDir,\n                               \"gen_guids.py\")\n  Task genGuidTask = createPythonTask(\n    taskName,\n    description,\n    [],\n    genGuidScript,\n    [\"--version\", pluginVersion,\n     \"--guids_file\", guidsFile] +\n    guidPath,\n    genGuidRequirements)\n  genGuidTask.with {\n    inputs.files ([guidsFile] +\n                  [genGuidScript])\n  }\n  return genGuidTask\n}\n\n\ncreateUnityNUnitTest(\n  \"testAndroidResolverNUnitTests\",\n  \"Runs NUnit tests for the Android Resolver module.\",\n  [],\n  new File(project.ext.scriptDirectory,\n           \"source/AndroidResolver/unit_tests\"), [],\n           TestTypeEnum.NUNIT, TestModuleEnum.ANDROIDRESOLVER\n)\n\ntask testDownloadArtifacts(type: GradleBuild) { task ->\n  description \"Run tests for the download_artifacts.gradle script.\"\n  dir \"source/AndroidResolver/scripts\"\n  setTestProperties(task, TestTypeEnum.GRADLE, TestModuleEnum.ANDROIDRESOLVER)\n  doLast {\n    EvaluateTestResult(task)\n  }\n  doFirst {\n    ReportTestStarted(task)\n  }\n  finalizedBy \"reportAllTestsResult\"\n}\n\n\n/*\n * Report when a test starts to run\n *\n * @param testTask Task for test to start.\n */\nvoid ReportTestStarted(Task testTask) {\n  println sprintf(\"Test %s STARTED\", testTask.name)\n}\n\n/*\n * Evaluate previously-ran test result\n *\n * @param testTask Task for previously-ran test\n */\nvoid EvaluateTestResult(Task testTask) {\n  Boolean succeeded = false\n  if (testTask.class.simpleName.startsWith(\"Exec\")) {\n    if (testTask.execResult.exitValue == 0) {\n      succeeded = true\n    }\n  } else if (testTask.class.simpleName.startsWith(\"DefaultTask\") ||\n             testTask.class.simpleName.startsWith(\"GradleBuild\")) {\n    if (testTask.state.didWork && testTask.state.failure == null) {\n      succeeded = true\n    }\n  } else {\n    throw new GradleException(\n        sprintf(\"Unsupported test class %s\", testTask.class.simpleName))\n  }\n\n  if (succeeded) {\n    println sprintf(\"Test %s PASSED\", testTask.name)\n    project.ext.testSessions.add(new TestSession(\n      name: testTask.name,\n      type: testTask.ext.testType,\n      module: testTask.ext.testModule,\n      isPassed: true))\n  } else {\n    String errorMsg = sprintf(\"Test %s FAILED\", testTask.name)\n    println sprintf(\"::error::%s\", errorMsg)\n    project.ext.testSessions.add(new TestSession(\n      name: testTask.name,\n      type: testTask.ext.testType,\n      module: testTask.ext.testModule,\n      isPassed: false))\n    if (!project.ext.continueOnFailForTestsEnabled) {\n      throw new GradleException(errorMsg)\n    }\n  }\n}\n\nTask reportAllTestsResult = tasks.create (\n  name: \"reportAllTestsResult\",\n  description: \"Report the result all every test that has been run\",\n  type: Task\n).with {\n  doLast {\n    if (project.ext.testSessions.isEmpty()) {\n      return\n    }\n\n    println \"\\n\\n[Test Summary]\"\n    int failedCount = 0\n    int totalCount = 0\n    project.ext.testSessions.each { session ->\n      String resultStr\n      ++totalCount\n      String logType = \"\"\n      if (session.isPassed) {\n        resultStr = \"PASSED\"\n      } else {\n        resultStr = \"FAILED\"\n        logType = \"::error::\"\n        ++failedCount\n      }\n      println sprintf(\"%sTest %s %s [%s/%s]\",\n          logType,\n          session.name,\n          resultStr,\n          session.type,\n          session.module)\n    }\n    println \"--------------------------------------\"\n    println sprintf(\"::notice::%s out of %d test(s) passed\", totalCount - failedCount, totalCount)\n    if (failedCount > 0) {\n      throw new GradleException(\n        sprintf(\"%d out of %d test(s) failed\", failedCount, totalCount))\n    }\n  }\n}\n\nTask testPackageUploader = createPythonTask(\n  \"testPackageUploader\",\n  \"Test the unity_asset_uploader.py application.\",\n  [],\n  new File(project.ext.unityAssetUploaderDir, \"unity_asset_uploader_test.py\"),\n  [],\n  [],\n  true).with { task ->\n    finalizedBy reportAllTestsResult\n    doLast {\n      EvaluateTestResult(task)\n    }\n    doFirst {\n      ReportTestStarted(task)\n    }\n    setTestProperties(task, TestTypeEnum.PYTHON, TestModuleEnum.TOOL)\n  }\n\ncreatePythonTask(\n  \"testExportUnityPackage\",\n  \"Test the export_unity_package.py application\",\n  [],\n  new File(project.ext.exportUnityPackageDir, \"export_unity_package_test.py\"),\n  [],\n  exportUnityPackageRequirements,\n  true).with { task ->\n    setTestProperties(task, TestTypeEnum.PYTHON, TestModuleEnum.TOOL)\n    finalizedBy reportAllTestsResult\n    doLast {\n      EvaluateTestResult(task)\n    }\n    doFirst {\n      ReportTestStarted(task)\n    }\n}\n\ncreatePythonTask(\n  \"testGenGuids\",\n  \"Test the gen_guids.py application\",\n  [],\n  new File(project.ext.exportUnityPackageDir, \"gen_guids_test.py\"),\n  [],\n  [\"absl-py\"],\n  true).with { task ->\n    setTestProperties(task, TestTypeEnum.PYTHON, TestModuleEnum.TOOL)\n    finalizedBy reportAllTestsResult\n    doLast {\n      EvaluateTestResult(task)\n    }\n    doFirst {\n      ReportTestStarted(task)\n    }\n  }\n\ncreatePythonTask(\n  \"testImportUnityPackage\",\n  \"Test the import_unity_package.py application\",\n  [],\n  new File(project.ext.importUnityPackageDir, \"import_unity_package_test.py\"),\n  [],\n  [\"absl-py\"],\n  true).with { task ->\n    setTestProperties(task, TestTypeEnum.PYTHON, TestModuleEnum.TOOL)\n    finalizedBy reportAllTestsResult\n    doLast {\n      EvaluateTestResult(task)\n    }\n    doFirst {\n      ReportTestStarted(task)\n    }\n  }\n\ntask updateEmbeddedGradleWrapper(type: Zip) {\n  description \"Update the gradle wrapper in gradle-template.zip\"\n  from project.ext.scriptDirectory\n  include \"gradlew\"\n  include \"gradlew.bat\"\n  include \"gradle/**\"\n  archiveName \"gradle-template.zip\"\n  destinationDir (new File(project.ext.scriptDirectory,\n                           \"source/AndroidResolver/scripts\"))\n}\n\nTask buildVersionHandler = createBuildPluginDllTask(\n  \"VersionHandler\", \"VersionHandler\", \"Google.VersionHandler.dll\", false)\nTask buildVersionHandlerImpl = createBuildPluginDllTask(\n  \"VersionHandlerImpl\", \"VersionHandlerImpl\", \"Google.VersionHandlerImpl.dll\",\n  true, [buildVersionHandler])\nTask buildAndroidResolver = createBuildPluginDllTask(\n  \"AndroidResolver\", \"AndroidResolver\", \"Google.JarResolver.dll\", true,\n  [updateEmbeddedGradleWrapper, buildVersionHandlerImpl])\nTask buildIosResolver = createBuildPluginDllTask(\n  \"IosResolver\", \"IOSResolver\", \"Google.IOSResolver.dll\", true,\n  [buildAndroidResolver])\nTask buildPackageManagerResolver = createBuildPluginDllTask(\n  \"PackageManagerResolver\", \"PackageManagerResolver\",\n  \"Google.PackageManagerResolver.dll\", true,\n  [buildVersionHandlerImpl])\n\ntask preparePluginStagingAreaDir(type: Task) {\n  description \"Delete all files that should not be present in staging area.\"\n  doLast {\n    Set<String> excludePaths = (\n      files(\n        copyPluginTemplateToStagingArea.outputs.files,\n        copyPluginComponentsToStagingArea.outputs.files,\n        generatePluginManifest.outputs.files).files.collect {\n        it.absolutePath\n      }).toSet()\n    fileTree(project.ext.pluginStagingAreaDir).each { fileObj ->\n      if (!excludePaths.contains(fileObj.absolutePath)) {\n        delete fileObj\n      }\n    }\n  }\n}\n\nTask copyPluginTemplateToStagingArea = createCopyFilesTask(\n  \"copyPluginTemplateToStagingArea\",\n  \"Copy the template project into the Unity plugin packaging dir.\",\n  [new File(\"Assets\", \"ExternalDependencyManager.meta\"),\n   new File(new File(\"Assets\", \"ExternalDependencyManager\"), \"Editor.meta\"),\n   new File(new File(new File(\"Assets\", \"ExternalDependencyManager\"), \"Editor\"),\n            \"CHANGELOG.md.meta\"),\n   new File(new File(new File(\"Assets\", \"ExternalDependencyManager\"), \"Editor\"),\n            \"LICENSE.meta\"),\n   new File(new File(new File(\"Assets\", \"ExternalDependencyManager\"), \"Editor\"),\n            \"README.md.meta\"),\n   new File(\"Assets\", \"PlayServicesResolver.meta\"),\n   new File(new File(\"Assets\", \"PlayServicesResolver\"), \"Editor.meta\"),\n   new File(new File(new File(\"Assets\", \"PlayServicesResolver\"), \"Editor\"),\n            \"play-services-resolver_v1.2.137.0.txt\"),\n   new File(new File(new File(\"Assets\", \"PlayServicesResolver\"), \"Editor\"),\n            \"play-services-resolver_v1.2.137.0.txt.meta\")],\n  project.ext.pluginTemplateDir, project.ext.pluginStagingAreaDir,\n  [preparePluginStagingAreaDir],\n  { sourceFile, targetFile -> copyAssetMetadataFile(sourceFile, targetFile) })\n\nTask copyDocumentationToStagingArea = createCopyFilesTask(\n  \"copyDocumentationToStagingArea\",\n  \"Copy documentation into the Unity plugin packaging dir.\",\n  [new File(\"CHANGELOG.md\"),\n   new File(\"LICENSE\"),\n   new File(\"README.md\")],\n  project.ext.scriptDirectory,\n  new File(new File(new File(project.ext.pluginStagingAreaDir, \"Assets\"),\n                    \"ExternalDependencyManager\"), \"Editor\"),\n  [preparePluginStagingAreaDir],\n  { sourceFile, targetFile -> copyAssetMetadataFile(sourceFile, targetFile) })\n\nIterable<Task> copyComponentsToStagingAreaTasks = [\n    copyAndroidResolverStaging,\n    copyVersionHandlerStaging,\n    copyVersionHandlerImplStaging,\n    copyIosResolverStaging,\n    copyPackageManagerResolverStaging].collect {\n  task ->\n    createCopyFilesTask(\n      sprintf(\"copy%sToStagingArea\", task.ext.componentName),\n      sprintf(\"Copy %s into the Unity plugin packaging dir.\",\n              task.ext.componentName),\n      task.outputs.files.collect {\n        new File(it.absolutePath - task.ext.stagingDir.absolutePath)\n      },\n      task.ext.stagingDir,\n      new File(project.ext.pluginStagingAreaDir,\n               project.ext.pluginEditorDllDir.path),\n      [task], null)\n}\n\ntask copyPluginComponentsToStagingArea(\n  dependsOn: copyComponentsToStagingAreaTasks) {\n  description \"Copy plugin components into the Unity plugin packaging dir.\"\n  outputs.files files(copyComponentsToStagingAreaTasks.collect {\n                        task -> task.outputs.files\n                      })\n}\n\ntask generatePluginManifest(dependsOn: [preparePluginStagingAreaDir,\n                                        copyPluginTemplateToStagingArea,\n                                        copyDocumentationToStagingArea,\n                                        copyPluginComponentsToStagingArea]) {\n  String unversionedManifestName = currentPluginBasename + \".txt\"\n  File outputDir = new File(project.ext.pluginStagingAreaDir,\n                            project.ext.pluginEditorDllDir.path)\n  File manifestMetadataTemplateFile =\n    new File(new File(project.ext.pluginTemplateDir,\n                      project.ext.pluginEditorDllDir.path),\n             unversionedManifestName + project.ext.unityMetadataExtension)\n  File manifestFile = versionedAssetFile(\n    new File(outputDir, unversionedManifestName),\n    true,\n    \"_manifest\",\n    false)\n  File manifestMetadataFile = versionedAssetFile(\n    new File(outputDir, manifestMetadataTemplateFile.name),\n    true,\n    \"_manifest\",\n    false)\n\n  description \"Generate a manifest for the files in the plug-in.\"\n  inputs.files files(manifestMetadataTemplateFile)\n  outputs.files files(manifestFile, manifestMetadataFile)\n\n  doLast {\n    List<String> filenameList = []\n    (new File(project.ext.pluginStagingAreaDir, \"Assets\")).eachFileRecurse(\n        groovy.io.FileType.FILES) { File fileObj ->\n      String absolutePath = fileObj.absolutePath\n      String absolutePathLowerCase = absolutePath.toLowerCase()\n      if (!(absolutePathLowerCase.endsWith(\n              project.ext.unityMetadataExtension) ||\n            absolutePathLowerCase.endsWith(\".txt\"))) {\n        filenameList.add(\n          absolutePath.replace(\n            project.ext.pluginStagingAreaDir.absolutePath + File.separator, \"\"))\n      }\n    }\n    manifestFile.write(filenameList.toSorted().join(\"\\n\") + \"\\n\")\n    copyAssetMetadataFile(manifestMetadataTemplateFile, manifestMetadataFile)\n  }\n}\n\n// Deprecated target for packaging the plugin.\nTask buildPluginWithUnity = createUnityTask(\n    \"buildPluginWithUnity\", \"build_plugin\", [generatePluginManifest],\n    project.ext.pluginStagingAreaDir.name,\n    project.ext.buildDir,\n    [\"-g.building\",\n     \"-buildTarget\", \"android\",\n     \"-exportPackage\"] + (project.ext.pluginExportDirs.collect { it.path }) +\n    [project.ext.pluginExportFile.absolutePath,\n     \"-gvh_disable\",\n     \"-quit\"], true, null)\nbuildPluginWithUnity.with {\n  description (\"(Deprecated) Exports the plugin staging area directory as \" +\n               \"a Unity package.\")\n  inputs.files files(copyPluginTemplateToStagingArea.outputs.files,\n                     copyPluginComponentsToStagingArea.outputs.files)\n  outputs.files files(project.ext.pluginExportFile)\n}\n\nTask buildPlugin = createExportUnityPackageTask(\n  \"buildPlugin\",\n  \"Package the .unitypackage with export_unity_package.py.\",\n  [generatePluginManifest],\n  new File(project.ext.scriptDirectory, \"export_unity_package_config.json\"),\n  new File(project.ext.scriptDirectory, \"export_unity_package_guids.json\"),\n  new File(project.ext.pluginStagingAreaDir, \"Assets\"),\n  true,  // Enable .unitypackage export.\n  false, // Disable UPM export.\n  project.ext.pluginVersion,\n  project.ext.pluginExportFile.parentFile,\n  [\"--enabled_sections\", \"unitypackage documentation\"])\nbuildPlugin.with {\n  outputs.files project.ext.pluginExportFile.absolutePath\n}\n\n// Guid paths for UPM package.\nFile upmPluginPackageDir = new File(currentPluginUpmPackageName, \"ExternalDependencyManager\")\nFile upmPluginEditorDir = new File(upmPluginPackageDir, \"Editor\")\nFile upmPluginDllDir = new File(upmPluginEditorDir, project.ext.pluginVersion)\n\nTask genGuidUpm = createGenGuidTask(\n  \"genGuidUpm\",\n  \"Generate GUID for .tgz packaging.\",\n  new File(project.ext.scriptDirectory, \"export_unity_package_guids.json\"),\n  project.ext.pluginVersion,\n  [upmPluginDllDir.path]\n)\n\nTask buildUpmPlugin = createExportUnityPackageTask(\n  \"buildUpmPlugin\",\n  \"Package the .tgz with export_unity_package.py.\",\n  [generatePluginManifest, genGuidUpm],\n  new File(project.ext.scriptDirectory, \"export_unity_package_config.json\"),\n  new File(project.ext.scriptDirectory, \"export_unity_package_guids.json\"),\n  new File(project.ext.pluginStagingAreaDir, \"Assets\"),\n  false, // Disable .unitypackage export.\n  true,  // Enable UPM export.\n  project.ext.pluginVersion,\n  project.ext.pluginUpmExportFile.parentFile,\n  [])\nbuildUpmPlugin.with {\n  outputs.files project.ext.pluginUpmExportFile.absolutePath\n}\n\ntask releasePlugin(dependsOn: [buildPlugin, buildUpmPlugin]) {\n  Map<File, File> pluginTemplateFilesMap = files(\n      copyPluginTemplateToStagingArea.outputs.files,\n      copyPluginComponentsToStagingArea.outputs.files).collectEntries {\n    File inputFile ->\n      return (\n        inputFile.name.endsWith(project.ext.unityMetadataExtension) ?\n        [inputFile,\n         new File(\n           project.ext.pluginTemplateDir,\n           unversionedAssetFile(\n             new File(inputFile.absolutePath -\n                      project.ext.pluginStagingAreaDir.absolutePath)).path)] :\n        [:])\n  }\n\n  description \"Copy the plugin to release locations.\"\n  inputs.files files(project.ext.pluginExportFile,\n                     pluginTemplateFilesMap.keySet())\n  outputs.files files(project.ext.pluginReleaseFile,\n                      fileTree(dir: project.ext.pluginExplodedDir),\n                      pluginTemplateFilesMap.values())\n  doLast {\n    // Delete and regenerate built .unitypackage in the repo.\n    delete fileTree(\n      dir: project.ext.pluginReleaseFile.parentFile,\n      includes: [project.ext.currentPluginBasename + \"-*.unitypackage\"])\n    copy {\n      from project.ext.pluginExportFile\n      into project.ext.pluginReleaseFile.parentFile\n      rename { src_filename -> project.ext.pluginReleaseFile.name }\n    }\n    copy {\n      from project.ext.pluginExportFile\n      into project.ext.pluginReleaseFileUnversioned.parentFile\n      rename { src_filename -> project.ext.pluginReleaseFileUnversioned.name }\n    }\n    // Delete and regenerate the exploded plugin folder in the repo.\n    delete fileTree(dir: project.ext.pluginExplodedDir)\n    copy {\n      from project.ext.pluginStagingAreaDir\n      into project.ext.pluginExplodedDir\n      include project.ext.pluginExportDirs.collect {\n        it.path + \"/**/*\"\n      }\n    }\n    // Delete and regenerate the UPM package in the repo.\n    delete fileTree(dir: project.ext.pluginUpmDir) \n    copy {\n      // Rename the top-level package folder to upm.\n      eachFile {\n        path = path.replaceFirst(/^.+?\\//, \"upm/\")\n      }  \n      from tarTree(project.ext.pluginUpmExportFile)\n      into project.ext.scriptDirectory\n    }\n    pluginTemplateFilesMap.each {\n      sourceFile, targetFile -> copyFile(sourceFile, targetFile)\n    }\n    println sprintf(\"Packaged to %s\", project.ext.pluginReleaseFile)\n  }\n}\n\ntask gitAddReleaseFilesToStaging(type: Exec, dependsOn: releasePlugin) {\n  description \"Run git to add release to the staging area.\"\n  commandLine \"git\", \"add\", \"-A\"\n}\n\n/*\n * Read the changes applied to the current version from the changelog.\n *\n * @returns Version summary in a multiline string.\n */\nString readVersionSummaryFromChangelog() {\n  String versionSummary = \"\"\n  Boolean foundVersion = false\n  for (String line in project.ext.changelog.text.tokenize(\"\\n\")) {\n    String trimmedLine = line.trim()\n    if (line =~ /^# Version/) {\n      if (foundVersion) break\n      foundVersion = true\n    }\n    versionSummary += line.replace(\"#\", \"-\") + \"\\n\"\n  }\n  return versionSummary\n}\n\n/*\n * Create a commit message for a release commit.\n *\n * @returns Commit message string.\n */\nString createCommitMessage() {\n  return sprintf(\"Version %s\\n\\n%s\",\n                 project.ext.pluginVersion,\n                 readVersionSummaryFromChangelog())\n}\n\ntask gitCreateReleaseCommit(dependsOn: gitAddReleaseFilesToStaging) {\n  description \"Run git to create a release commit.\"\n\n  doLast {\n    def stdout = new ByteArrayOutputStream()\n    exec {\n      commandLine \"git\", \"status\", \"-s\"\n      ignoreExitValue true\n      standardOutput = stdout\n    }\n    if (!stdout.toString().isEmpty()) {\n      exec {\n        commandLine \"git\", \"commit\", \"-a\", \"-m\", createCommitMessage()\n      }\n    }\n  }\n}\n\ntask gitTagRelease(type: Exec) {\n  description (\"Run git to tag a release.  This should be performed \" +\n               \"*after* a release commit has been be created.\")\n  commandLine \"git\", \"tag\", \"-a\",\n              sprintf(\"v%s\", pluginVersion), \"-m\",\n              sprintf(\"%s\\n\\nDownload [here](%s)\",\n                      createCommitMessage(),\n                      sprintf(\"https://github.com/googlesamples/\" +\n                              \"unity-jar-resolver/raw/v%s/\" +\n                              \"external-dependency-manager-%s.unitypackage\",\n                              project.ext.pluginVersion,\n                              project.ext.pluginVersion))\n}\n\n// TODO: Version Handler tests\n// - Per platform targeting (iOS, Android, Editor, desktop)\n// - Version enablement, import newer plugin on top of older plugin and validate\n//   new plugin is enabled, old plugin is removed.\n// - Linux library renaming (need to override LibraryPrefix to test)\n// - Canonical filename renaming for versioned filenames\n// - Change settings, restore default settings.\n// - Import plugin into a project and wait for asset processor to enable it.\n// - Switch .NET version, validate DLLs are enabled / disabled as expected.\n\n// TODO: Android Resolver tests\n// - Resolve with:\n//   - Conflicting dependencies\n//   - FAT ABI vs. single ABI selection\n\n// TODO: iOS Resolver tests (on OSX only)\n// - Import plugin test Cocoapods bootstrap\n// - Pod specification, with reflection & XML, validate both are present in the\n//   set.\n// - Workspace export (Unity 5.6 and above)\n// - Project export\n// - Add a pod which changes the target SDK\n\ncreateUnityNUnitTest(\n  \"testVersionHandlerImplNUnitTests\",\n  \"Runs NUnit tests for the VersionHandlerImpl module.\",\n  [],\n  new File(project.ext.scriptDirectory,\n           \"source/VersionHandlerImpl/unit_tests\"), [],\n           TestTypeEnum.NUNIT, TestModuleEnum.VERSIONHANDLER\n)\n\ncreateUnityNUnitTest(\n  \"testPackageManagerResolverNUnitTests\",\n  \"Runs NUnit tests for the PackageManagerResolver module.\",\n  [],\n  new File(project.ext.scriptDirectory,\n           \"source/PackageManagerResolver/unit_tests\"), [],\n           TestTypeEnum.NUNIT, TestModuleEnum.PACKAGEMANAGER\n)\n\ncreateUnityTestBatchAndNonBatch(\n  \"testVersionHandlerActivation\",\n  (\"Imports the plugin into a Unity project and verifies all \" +\n   \"components can be activated by the Version Handler.\"),\n  [buildPlugin],\n  new File(project.ext.scriptDirectory,\n           \"source/VersionHandlerImpl/test/activation\"),\n  [], [], null, TestTypeEnum.INTEGRATION, TestModuleEnum.VERSIONHANDLER)\n\n// Launch the test via a script that runs a local web server.\ncreateUnityTestBatchAndNonBatch(\n  \"testVersionHandlerWebRequest\",\n  (\"Imports the plugin into a Unity project tests the PortableWebRequest \" +\n   \"class.\"),\n  [buildPlugin],\n  new File(project.ext.scriptDirectory,\n           \"source/VersionHandlerImpl/test/webrequest\"),\n  [], [],\n  { String name, String description, Iterable<Task> depends,\n    File executable, Iterable<String> args, Boolean continueOnFail ->\n      Iterable<String> runnerArgs = [executable.absolutePath] + args\n      return createPythonTask(\n        name, description, depends,\n        new File(\n          new File(\n            new File(project.ext.pluginSourceDir,\n                     \"VersionHandlerImpl\"),\n            \"test\"),\n          \"webrequest_launcher.py\"),\n        runnerArgs,\n        [], continueOnFail)\n  }, TestTypeEnum.INTEGRATION, TestModuleEnum.CORE)\n\ncreateUnityTestBatchAndNonBatch(\n  \"testVersionHandlerReflection\",\n  (\"Imports the plugin into a Unity project and tests reflection \" +\n   \"methods.\"),\n  [buildPlugin],\n  new File(project.ext.scriptDirectory,\n           \"source/VersionHandler/test/reflection\"),\n  [],\n  [],\n  null,\n  TestTypeEnum.INTEGRATION, TestModuleEnum.CORE)\n\nTask compileIntegrationTester = createXbuildTask(\n  \"compileIntegrationTester\",\n  \"Compile Integration Tester module.\",\n  project.ext.pluginSolutionFile,\n  \"IntegrationTester\",\n  fileTree(new File(project.ext.pluginSourceDir,\n                    \"IntegrationTester\")),\n  new File(project.ext.buildDir, \"IntegrationTester\"),\n  [new File(\"Google.IntegrationTester.dll\")],\n  [compileVersionHandler])\n\n/*\n * Creates a task which compiles and run a Unity integration test.\n *\n * @param taskName Name of the test.\n * @param description Description of the task.\n * @param dependsOn Dependencies of the new task.\n * @param integrationTestProject Project within\n *   project.ext.pluginSolutionFile that contains the integration test.\n * @param integrationTestProjectSources Source files integrationTestProject\n *  requires.\n * @param integrationTestProjectOutputs Assemblies generated by the\n *   integrationTestProject.\n * @param unityProjectDir Directory containing a assets to copy into the\n *   integration test project.\n * @param arguments Additional arguments for Unity when running the integration\n *   test.\n * @param testType Type of the test\n * @param testModule Module of the test\n */\nTask createUnityIntegrationTest(String taskName,\n                                String description,\n                                Iterable<Task> dependsOn,\n                                String integrationTestProject,\n                                Iterable<File> integrationTestProjectSources,\n                                Iterable<File> integrationTestProjectOutputs,\n                                File unityProjectDir,\n                                Iterable<String> arguments,\n                                TestTypeEnum testType,\n                                TestModuleEnum testModule) {\n  Task compileIntegrationTest = createXbuildTask(\n    sprintf(\"compile%s\", integrationTestProject),\n    sprintf(\"Compile %s for %s\", integrationTestProject, taskName),\n    project.ext.pluginSolutionFile,\n    integrationTestProject,\n    integrationTestProjectSources,\n    new File(project.ext.buildDir, integrationTestProject),\n    integrationTestProjectOutputs,\n    [compileIntegrationTester] + dependsOn)\n  compileIntegrationTest.with { task ->\n    setTestProperties(task, testType, testModule)\n  }\n\n  createUnityTestBatchAndNonBatch(\n    taskName,\n    description,\n    [buildPlugin],\n    unityProjectDir,\n    compileIntegrationTest.outputs.files +\n    compileIntegrationTester.outputs.files,\n    arguments, null, testType, testModule)\n}\n\ncreateUnityIntegrationTest(\n  \"testAndroidResolverIntegrationTests\",\n  (\"Imports the plugin into a Unity project, runs Android resolution with \" +\n   \"a combination of dependencies added via the programmatic API and via \" +\n   \"XML files, verifying all dependencies resolve successfully.\"),\n  [compileAndroidResolver],\n  \"AndroidResolverIntegrationTests\",\n  fileTree(new File(new File(project.ext.pluginSourceDir, \"AndroidResolver\"),\n                    \"test\")),\n  [new File(\"Google.AndroidResolverIntegrationTests.dll\")],\n  new File(\n    project.ext.scriptDirectory,\n    \"source/AndroidResolver/test/AndroidResolverIntegrationTestsUnityProject\"),\n  [\"-buildTarget\", \"android\"],\n  TestTypeEnum.INTEGRATION,\n  TestModuleEnum.ANDROIDRESOLVER)\n\ncreateUnityIntegrationTest(\n  \"testPackageManagerClientIntegrationTests\",\n  (\"Imports the plugin into a Unity project and uses the Unity Package \" +\n   \"Manager client to list, search, install and remove packages. \"),\n  [compilePackageManagerResolver],\n  \"PackageManagerClientIntegrationTests\",\n  fileTree(new File(new File(new File(project.ext.pluginSourceDir,\n                             \"PackageManagerResolver\"), \"test\"),\n                    \"PackageManagerClientIntegrationTests\")),\n  [new File(\"Google.PackageManagerClientIntegrationTests.dll\"),\n   new File(\"Google.PackageManagerClientIntegrationTests.dll.mdb\")],\n  null, [],\n  TestTypeEnum.INTEGRATION,\n  TestModuleEnum.PACKAGEMANAGER)\n\ntask cleanTests(type: Delete) {\n  description \"Clean test directories.\"\n  delete project.ext.testDir\n}\n\ntask cleanAll(type: Delete) {\n  description \"Clean the build directory.\"\n  delete project.ext.buildDir\n}\n\nproject.defaultTasks = [\"build\", \"test\", \"release\", \"clean\"].collect {\n  topLevelTaskName ->\n    tasks.create(name: topLevelTaskName,\n                 description: sprintf(\"Run all %s tasks\",\n                                      topLevelTaskName),\n                 type: Task,\n                 dependsOn: project.tasks.findAll {\n                   task -> task.name.startsWith(topLevelTaskName)\n                 })\n}\n\n// Disable tests by filters.\nproject.tasks.findAll { task ->\n  if (task.hasProperty(\"testType\") && task.testType != null &&\n     task.hasProperty(\"testModule\") && task.testModule != null) {\n    if (!shouldTestRunWithFilters(task.testType, task.testModule)) {\n      println sprintf(\"DISABLED :%s\", task.name)\n      task.enabled = false\n    }\n    if (project.ext.excludeTestsParam.contains(task.name.toLowerCase())) {\n      println sprintf(\"DISABLED :%s\", task.name)\n      task.enabled = false\n    }\n  }\n}\n"
        },
        {
          "name": "exploded",
          "type": "tree",
          "content": null
        },
        {
          "name": "export_unity_package_config.json",
          "type": "blob",
          "size": 3.0732421875,
          "content": "{\n  \"packages\": [\n    {\n      \"name\": \"external-dependency-manager.unitypackage\",\n      \"imports\": [\n        {\n          \"importer\": \"PluginImporter\",\n          \"platforms\": [\"Editor\"],\n          \"paths\": [\n            \"ExternalDependencyManager/Editor/Google.VersionHandler.*\"\n          ]\n        },\n        {\n          \"importer\": \"PluginImporter\",\n          \"platforms\": [],\n          \"labels\": [\"gvhp_targets-editor\"],\n          \"paths\": [\n            \"ExternalDependencyManager/Editor/*/Google.IOSResolver.*\",\n            \"ExternalDependencyManager/Editor/*/Google.JarResolver.*\",\n            \"ExternalDependencyManager/Editor/*/Google.VersionHandlerImpl.*\",\n            \"ExternalDependencyManager/Editor/*/Google.PackageManagerResolver.*\"\n          ],\n          \"override_metadata_upm\": {\n            \"PluginImporter\": {\n              \"platformData\": [ {\n                  \"first\" : {\n                      \"Editor\": \"Editor\"\n                  },\n                  \"second\": {\n                      \"enabled\": 1\n                  }\n                }\n              ]\n            }\n          }\n        },\n        {\n          \"sections\": [\"documentation\"],\n          \"importer\": \"DefaultImporter\",\n          \"paths\": [\n            \"ExternalDependencyManager/Editor/README.md\",\n            \"ExternalDependencyManager/Editor/CHANGELOG.md\",\n            \"ExternalDependencyManager/Editor/LICENSE\"\n          ]\n        },\n        {\n          \"importer\": \"DefaultImporter\",\n          \"paths\": [\n            \"ExternalDependencyManager/Editor/external-dependency-manager*_manifest.txt\"\n          ]\n        },\n        {\n          \"sections\": [\"unitypackage\"],\n          \"importer\": \"DefaultImporter\",\n          \"paths\": [\n              \"PlayServicesResolver/Editor/play-services-resolver_v1.2.137.0.txt\"\n          ]\n        }\n      ],\n      \"manifest_path\": \"ExternalDependencyManager/Editor\",\n\n      \"readme\": \"ExternalDependencyManager/Editor/README.md\",\n      \"license\": \"ExternalDependencyManager/Editor/LICENSE\",\n      \"changelog\": \"ExternalDependencyManager/Editor/CHANGELOG.md\",\n      \"documentation\": \"ExternalDependencyManager/Editor/README.md\",\n\n      \"common_manifest\" : {\n        \"name\": \"com.google.external-dependency-manager\",\n        \"display_name\": \"External Dependency Manager for Unity\",\n        \"description\": [\n          \"External Dependency Manager for Unity (EDM4U) can be used by any \",\n          \"Unity plugin that requires Android specific libraries (e.g. AARs), \",\n          \"iOS CocoaPods, version management of transitive dependencies, \",\n          \"and/or management of Unity Package Manager registries.\"\n        ],\n        \"keywords\": [\n          \"Google\", \"Android\", \"Gradle\", \"Cocoapods\", \"Dependency\",\n          \"Unity Package Manager\", \"Unity\",\n          \"vh-name:play-services-resolver\",\n          \"vh-name:unity-jar-resolver\"\n        ],\n        \"author\": {\n          \"name\" : \"Google LLC\",\n          \"url\": \"https://github.com/googlesamples/unity-jar-resolver\"\n        }\n      },\n\n      \"export_upm\" : 1,\n      \"upm_package_config\" : {\n        \"manifest\" : {\n          \"unity\": \"2019.1\"\n        }\n      }\n    }\n  ]\n}\n"
        },
        {
          "name": "export_unity_package_guids.json",
          "type": "blob",
          "size": 3.26953125,
          "content": "{\n    \"1.2.137\": {\n        \"com.google.external-dependency-manager/CHANGELOG.md\": \"dd6a29a412594aadb37d9698db325eca\",\n        \"com.google.external-dependency-manager/ExternalDependencyManager\": \"46f5870ddbde4a6091f50656dcd5573e\",\n        \"com.google.external-dependency-manager/ExternalDependencyManager/Editor\": \"1f23cd25474841f6ad7555705b4807e9\",\n        \"com.google.external-dependency-manager/LICENSE.md\": \"f61a1c8e753b496bb696e77d7eedfb95\",\n        \"com.google.external-dependency-manager/README.md\": \"cbbebcaa6ecb4b9582dce440a386de75\",\n        \"com.google.external-dependency-manager/package.json\": \"9bed450d5c03481d87e61b61431cf00a\"\n    },\n    \"1.2.166\": {\n        \"com.google.external-dependency-manager/ExternalDependencyManager/Editor/1.2.166\": \"9dfec94683154487ab08de0c50179674\"\n    },\n    \"1.2.167\": {\n        \"com.google.external-dependency-manager/ExternalDependencyManager/Editor/1.2.167\": \"75c93e39c49442c9a6c4aea09cc5b982\"\n    },\n    \"1.2.168\": {\n        \"com.google.external-dependency-manager/ExternalDependencyManager/Editor/1.2.168\": \"224d14327d134b0ea5ba8ce2deaa6768\"\n    },\n    \"1.2.169\": {\n        \"com.google.external-dependency-manager/ExternalDependencyManager/Editor/1.2.169\": \"02ea964fdc804b098a302e49a57d8cd3\"\n    },\n    \"1.2.170\": {\n        \"com.google.external-dependency-manager/ExternalDependencyManager/Editor/1.2.170\": \"cd46d4272b824509b5b5544ec9b34870\"\n    },\n    \"1.2.171\": {\n        \"com.google.external-dependency-manager/ExternalDependencyManager/Editor/1.2.171\": \"8281940745814cc5b50954561f0e2582\"\n    },\n    \"1.2.172\": {\n        \"com.google.external-dependency-manager/ExternalDependencyManager/Editor/1.2.172\": \"3f9604d812054a74a5726176ad683fb3\"\n    },\n    \"1.2.173\": {\n        \"com.google.external-dependency-manager/ExternalDependencyManager/Editor/1.2.173\": \"fdeeb5a9eafe4d2bbd8a94a41eb5302e\"\n    },\n    \"1.2.174\": {\n        \"com.google.external-dependency-manager/ExternalDependencyManager/Editor/1.2.174\": \"2a82085e2b06441b96c360b7fe97f98c\"\n    },\n    \"1.2.175\": {\n        \"com.google.external-dependency-manager/ExternalDependencyManager/Editor/1.2.175\": \"ba0c697ad191428fac6b53f4ca8f8d4a\"\n    },\n    \"1.2.176\": {\n        \"com.google.external-dependency-manager/ExternalDependencyManager/Editor/1.2.176\": \"864a72f7c7cf4153a532cc1277dbfbdb\"\n    },\n    \"1.2.177\": {\n        \"com.google.external-dependency-manager/ExternalDependencyManager/Editor/1.2.177\": \"a768f4126d3b41ac900586e5a3b2d4a1\"\n    },\n    \"1.2.178\": {\n        \"com.google.external-dependency-manager/ExternalDependencyManager/Editor/1.2.178\": \"3d894de101f34a4b9a7f42e13c7aa3a3\"\n    },\n    \"1.2.179\": {\n        \"com.google.external-dependency-manager/ExternalDependencyManager/Editor/1.2.179\": \"e4b2f028f2e949cfac3ba5bbb128d139\"\n    },\n    \"1.2.180\": {\n        \"com.google.external-dependency-manager/ExternalDependencyManager/Editor/1.2.180\": \"e8f303eb74064b86b1308e81afd52ce1\"\n    },\n    \"1.2.181\": {\n        \"com.google.external-dependency-manager/ExternalDependencyManager/Editor/1.2.181\": \"d27fe564f10147d1bfded8244b25b494\"\n    },\n    \"1.2.182\": {\n        \"com.google.external-dependency-manager/ExternalDependencyManager/Editor/1.2.182\": \"60e9ce1be3474de5bdded37d1462e09b\"\n    },\n    \"1.2.183\": {\n        \"com.google.external-dependency-manager/ExternalDependencyManager/Editor/1.2.183\": \"5c127f68af44472d8099a80364a25718\"\n    }\n}\n"
        },
        {
          "name": "external-dependency-manager-1.2.183.unitypackage",
          "type": "blob",
          "size": 400.5390625,
          "content": null
        },
        {
          "name": "external-dependency-manager-latest.unitypackage",
          "type": "blob",
          "size": 400.5390625,
          "content": null
        },
        {
          "name": "gha",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.927734375,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.34765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windows variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\ngoto execute\r\n\r\n:4NT_args\r\n@rem Get arguments from the 4NT Shell from JP Software\r\nset CMD_LINE_ARGS=%$\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "maven-indexes",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.6435546875,
          "content": "/*\n * Copyright 2019 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nrootProject.name = \"playServicesResolver\"\n"
        },
        {
          "name": "source",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "troubleshooting-faq.md",
          "type": "blob",
          "size": 11.107421875,
          "content": "\n# EDM4U Usage Troubleshooting Guide\n\n---\n## Table of contents\n1.  [Resolver and Target Platform Build Debug Process](#introduction)\n2.  [General Tips](#general_tips)\n    1. [Enable Verbose Logging](#verbose_loggin)\n    2. [Turn off auto-resolution on Android](#android_auto_resolution)\n3. [Android](#android)\n    1. [Fixing \"Resolution Failed\" errors](#resolution_failed)\n    2. [Use Force Resolve if having issues with resolution](#force_resolve)\n    3. [JDK, SDK, NDK, Gradle Issues (including locating)](#jdk_sdk_ndk)\n    4. [Enable Custom Main Gradle Template, a.k.a. mainTemplate.gradle](#custom_main_gradle_template)\n    5. [Enable Jetifier if you can](#jetifier)\n4.  [iOS](#ios)\n    1. [Investigate Cocoapods if iOS resolution fails](#cocoapods)\n    2. [Prefer opening Xcode Workspace files in Xcode to opening Xcode Project Files](#xcode_workspace_files)\n    3. [Win32 Errors when building Xcode Workspace/Project on Mac](#win32_errors)\n    4. [Runtime Swift Issues](#swift)\n---\n\n# Resolver and Target Platform Build Debug Process<a id=\"introduction\"></a>\n\n\nThe following is a roughly chronological process for debugging and exploring the use of EDM4U when building your game/app for a particular platform. The first section (\"General Tips'') applies regardless of your target, while the remaining two have to do with which target you are building for (Android or or iOS).\n\nConsider each step within a section in order: If you do not have an issue with the step, move on to the next; If you do have an issue, attempt the listed steps and proceed once the issue is cleared.\n\nThroughout the process, additionally address and explore both warnings and error messages displayed in the Unity Editor console and/or device logs. Oftentimes, seemingly unrelated errors can cause issues and, even when they don't, they can hide bigger issues.\n\n<div class=\"warning\" style='padding:0.1em; background-color:#b6d7a8; color:#000000'>\n<span>\n<p><strong>Note:</strong> This guide assumes you have already tested and verified the expected functionality of your Unity game/app in the Editor when compiling for the  <a href=\"https://docs.unity3d.com/Manual/BuildSettings.html#:%7E:text=Select-,Switch%20Platforms,-.%0AIf%20Unity\">target platform</a>.</p>\n<p>If you have not done so yet, perform your tests and resolve any issues you find before returning to this process.</p>\n</span>\n</div>\n<p><p><p>\n\n\n# **General Tips**<a id=\"general_tips\"></a>\n\nIf at any point you want or need more resolver or build information, consider enabling verbose logging and reading the log after trying to build again\n\n### **Enable Verbose Logging**<a id=\"verbose_loggin\"></a>\n\n#### <ins>Android</ins>\n\nEnable **Verbose Logging** in **Assets &gt; External Dependency Manager &gt; Android Resolver &gt; Settings**\n\n#### <ins>iOS</ins>\n\nEnable **Verbose Logging** in **Assets &gt; External Dependency Manager &gt; iOS Resolver &gt; Settings**\n\n### **Turn off auto-resolution on Android**<a id=\"android_auto_resolution\"></a>\n\nWhen the auto-resolution feature is enabled, the Android resolver can trigger when assets are changed or when AppDomain is reloaded, which happens every time you press the Play button in the editor. Dependency resolution can be slow when the Unity project is big or when the resolver needs to download and patch many Android libraries. You can improve iteration time by disabling most of the auto-resolution features and manually triggering resolution instead.\n\n* Manual resolution is available through  **Assets &gt; External Dependency Manager &gt; Android Resolver &gt; Resolve** and  **Assets &gt; External Dependency Manager &gt; Android Resolver &gt; Force Resolve** menu items.\n* Turn off \"Enable Auto-Resolution\" in the settings menu to prevent resolution triggered by assets changes and AppDomain reloads.\n* Turn off \"Enable Resolution on Build\" in the settings menu to speed up build time.\n\n# **Android**<a id=\"android\"></a>\n\n### **Fixing \"Resolution Failed\" errors**<a id=\"resolution_failed\"></a>\n\nIf EDM4U fails resolution, try the following sequentially, making sure to check whether resolution succeeded between each. If a section heading includes \"if you can\", perform the step unless you *know* you cannot or that there are issues with doing so in your project.\n\n### **Use Force Resolve if having issues with resolution**<a id=\"force_resolve\"></a>\n\n* When trying to build, if you receive errors, try to resolve dependencies by clicking **Assets &gt; External Dependency Manager &gt; Android Resolver &gt; Resolve**\n* If this fails, try **Assets &gt; External Dependency Manager &gt; Android Resolver &gt; Force Resolve.** While this is slower, it is more dependendable as it clears old intermediate data.\n\n### **JDK, SDK, NDK, Gradle Issues (including locating)**<a id=\"jdk_sdk_ndk\"></a>\n\n* Reasons to do this:\n    * If **Force Resolve** is failing and you have not done this yet, try this.\n    * If you receive error logs about Unity being unable to locate the `JDK`, `Android SDK Tools` or `NDK`\n    * This issue is mostly observed in Unity 2019 and 2020.\n* What it does:\n    * Toggling the external tool settings forces Unity to acknowledge them as it may not have loaded them properly.\n* What to do:\n    * Enter **Unity &gt; Preferences&gt; External Tools**\n    * Toggle the `JDK`, `Android SDK`, `Android NDK` and `Gradle` **checkboxes** such that they have the opposite value of what they started with\n    * Toggle them back to their original values\n    * Try **Force Resolve** and/or building again\n\n### **Enable Custom Main Gradle Template, a.k.a. mainTemplate.gradle**<a id=\"custom_main_gradle_template\"></a>\n\n* By default, EDM4U used [a custom Gradle script](https://github.com/googlesamples/unity-jar-resolver/blob/master/source/AndroidResolver/scripts/download_artifacts.gradle) to download Android libraries to the \"Assets/Plugins/Android/\" folder. This can be problematic in several cases:\n    * When Unity adds some common Android libraries with specific versions to the Gradle by default, play-core or game-activity. This would very likely cause duplicate class errors during build time.\n    * When multiple Unity plugins depend on the same Android libraries with a very different range of versions. The Gradle project generated by Unity can handle resolution far better than the custom script in EDM4U.\n    * Downloading large amounts of Android libraries can be slow.\n* If you do this and are on Unity 2019.3+ you *must* enable  [**Custom Gradle Properties Template**](https://docs.unity3d.com/Manual/class-PlayerSettingsAndroid.html#Publishing) to enable AndroidX and Jetifier, which are described in the next step.\n\n### **Enable Jetifier if you can**<a id=\"jetifier\"></a>\n\n* Android 9 introduced a new set of support libraries (AndroidX) which use the same class name but under a different package name. If your project has dependencies (including transitive dependencies) on both AndroidX and the older Android Support Libraries, duplicated class errors in `com.google.android.support.*` and `com.google.androidx.*` will occur during build time.  [Jetifier](https://developer.android.com/tools/jetifier) is a tool to resolve such cases. In general, you should *enable Jetifier if your target Android version is 9+, or API level 28+*. \n* Android Resolver can configure Unity projects to enable Jetifier. This feature can be enabled by the **Use Jetifier** option in Android Resolver settings. When enabled,\n    * Android Resolver uses Jetifier to patch every Android library it downloaded to the \"Assets/Plugins/Android\" folder.\n    * When **Custom Main Gradle Template** is enabled, it injects scripts to enable AndroidX and Jetifier to this template, prior to Unity 2019.3. After Unity 2019.3, AndroidX and Jetifier can only be enabled in **Custom Gradle Properties Template**.\n* When using Unity 2019.3 or above, it is recommended to enable **Custom Gradle Properties Template**, regardless if you are using **Custom Main Gradle Template** or not. \n\n# **iOS**<a id=\"ios\"></a>\n\nIf EDM4U fails resolution, try the following sequentially, making sure to check whether resolution succeeded between each. \n\n### **Investigate Cocoapods if iOS resolution fails**<a id=\"cocoapods\"></a>\n\n* First of all make sure it's  [properly installed](https://guides.cocoapods.org/using/getting-started.html)\n    * Verify that  [`pod install` and `pod update` run without errors](https://guides.cocoapods.org/using/pod-install-vs-update.html) in the folder where the Podfile is (usually the root folder of the Xcode project).\n* Cocoapods text encoding issues  when building from Mac\n    * Do this if you are building on a Mac and see the following in the cocoapods log\n    `WARNING: CocoaPods requires your terminal to be using UTF-8 encoding.`\n    * When building for iOS, Cocoapod installation may fail with an error about the language locale, or UTF-8 encoding. There are currently several different ways to work around the issue.\n        * From the terminal, run `pod install` directly, and open the resulting `xcworkspace` file.\n        * Downgrade the version of Cocoapods to 1.10.2. The issue exists only in version 1.11 and newer.\n        * In your `~/.bash_profile` or equivalent, add `export LANG=en_US.UTF-8`\n\n### **Prefer opening Xcode Workspace files in Xcode to opening Xcode Project Files**<a id=\"xcode_workspace_files\"></a>\n\nTry to  [build iOS builds from Xcode Workspaces](https://developer.apple.com/library/archive/featuredarticles/XcodeConcepts/Concept-Workspace.html) generated by Cocoapods rather than Xcode projects:\n\n* Rationale:\n    * Unity by default only generates `.xcodeproject` files. If EDM4U is in the project, it first generates Podfiles from all iOS dependencies specified in files named \"Dependencies.xml\" with a prefix (ex. \"AppDependencies.xml\") , then runs Cocoapods, which generates an `.xcworkspace` file\n    * In this case, it is recommended to open the generated project by double-clicking on `.xcworkspace` instead of `.xcodeproject` since the former contains references to pods.\n* If you are building in an environment you cannot open Xcode workspaces from (such as unity cloud build) then go into the **iOS resolver settings**, enter the dropdown **Cocoapods Integration** and select **Xcode project**\n\n### **Win32 Errors when building Xcode Workspace/Project on Mac**<a id=\"win32_errors\"></a>\n\nIf the Unity Editor's console displays  [build output that mentions win32 errors](https://issuetracker.unity3d.com/issues/webgl-builderror-constant-il2cpp-build-error-after-osx-12-dot-3-upgrade), upgrade to a more recent LTS version of Unity after 2020.3.40f1.\n\n* While workarounds exist, upgrading is the fastest, most convenient and most reliable way to handle it.\n\n### **Runtime Swift Issues**<a id=\"swift\"></a>\n\nIf you run into an issue when trying to run the game with error logs that mention Swift, try the following:\n\n* Turn on `Enable Swift Framework Support Workaround` in **Assets &gt; External Dependency Manager &gt; iOS Resolver &gt; Settings**.\n    * Read  the description in the settings menu.\n    * Make sure those changes are made to the generated Xcode project.\n\nIf you are still experiencing issues at this point, investigate whether troubleshooting the product that utilizes EDM4U works differently or better now. Consider filing an issue here or with the product you are employing that utilizes EDM4U."
        },
        {
          "name": "upm",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}