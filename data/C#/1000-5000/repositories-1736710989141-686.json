{
  "metadata": {
    "timestamp": 1736710989141,
    "page": 686,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Cysharp/ConsoleAppFramework",
      "stars": 1718,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0966796875,
          "content": ".dockerignore\n.env\n.git\n.gitignore\n.vs\n.vscode\ndocker-compose.yml\ndocker-compose.*.yml\n*/bin\n*/obj\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.4658203125,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Unity\n\nsrc/MessagePack.UnityClient/bin/*\nsrc/MessagePack.UnityClient/Library/*\nsrc/MessagePack.UnityClient/obj/*\nsrc/MessagePack.UnityClient/Temp/*\n\n# Project Specified\n\nnuget/mpc.exe\nnuget/mpc.exe.config\n\nnuget/tools/*\nnuget/unity/tools/*\nnuget/unity*\n/nuget/*.unitypackage\n\n# VSCode\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\nsandbox/**/Properties/launchSettings.json\ncircleci.exe\n"
        },
        {
          "name": "ConsoleAppFramework.sln",
          "type": "blob",
          "size": 5.5107421875,
          "content": "ï»¿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.0.31903.59\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"src\", \"src\", \"{1F399F98-7439-4F05-847B-CC1267B4B7F2}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"sandbox\", \"sandbox\", \"{A2CF2984-E8E2-48FC-B5A1-58D74A2467E6}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"tests\", \"tests\", \"{AAD2D900-C305-4449-A9FC-6C7696FFEDFA}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{6DF6534A-0F9D-44A4-BF89-AE1F3B243914}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.dockerignore = .dockerignore\n\t\t.gitignore = .gitignore\n\t\t.circleci\\config.yml = .circleci\\config.yml\n\t\tDirectory.Build.props = Directory.Build.props\n\t\tReadMe.md = ReadMe.md\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ConsoleAppFramework\", \"src\\ConsoleAppFramework\\ConsoleAppFramework.csproj\", \"{09BEEA7B-B6D3-4011-BCAB-6DF976713695}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"GeneratorSandbox\", \"sandbox\\GeneratorSandbox\\GeneratorSandbox.csproj\", \"{ACDA48BA-0BFE-4917-B335-7836DAA5929A}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"CliFrameworkBenchmark\", \"sandbox\\CliFrameworkBenchmark\\CliFrameworkBenchmark.csproj\", \"{F558E4F2-1AB0-4634-B613-69DFE79894AF}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ConsoleAppFramework.GeneratorTests\", \"tests\\ConsoleAppFramework.GeneratorTests\\ConsoleAppFramework.GeneratorTests.csproj\", \"{C54F7FE8-650A-4DC7-877F-0DE929351800}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"NativeAot\", \"sandbox\\NativeAot\\NativeAot.csproj\", \"{EC1A3299-6597-4AD2-92DE-EDF309875A97}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ConsoleAppFramework.Abstractions\", \"src\\ConsoleAppFramework.Abstractions\\ConsoleAppFramework.Abstractions.csproj\", \"{855B0D28-DC69-470B-B3D9-481EE52737AA}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"FilterShareProject\", \"sandbox\\FilterShareProject\\FilterShareProject.csproj\", \"{2A1E8ED1-CEB9-47CB-8497-A0C4F5A8F025}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{09BEEA7B-B6D3-4011-BCAB-6DF976713695}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{09BEEA7B-B6D3-4011-BCAB-6DF976713695}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{09BEEA7B-B6D3-4011-BCAB-6DF976713695}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{09BEEA7B-B6D3-4011-BCAB-6DF976713695}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{ACDA48BA-0BFE-4917-B335-7836DAA5929A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{ACDA48BA-0BFE-4917-B335-7836DAA5929A}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{ACDA48BA-0BFE-4917-B335-7836DAA5929A}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{ACDA48BA-0BFE-4917-B335-7836DAA5929A}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{F558E4F2-1AB0-4634-B613-69DFE79894AF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{F558E4F2-1AB0-4634-B613-69DFE79894AF}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{F558E4F2-1AB0-4634-B613-69DFE79894AF}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{F558E4F2-1AB0-4634-B613-69DFE79894AF}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{C54F7FE8-650A-4DC7-877F-0DE929351800}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{C54F7FE8-650A-4DC7-877F-0DE929351800}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{C54F7FE8-650A-4DC7-877F-0DE929351800}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{C54F7FE8-650A-4DC7-877F-0DE929351800}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{EC1A3299-6597-4AD2-92DE-EDF309875A97}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{EC1A3299-6597-4AD2-92DE-EDF309875A97}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{EC1A3299-6597-4AD2-92DE-EDF309875A97}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{EC1A3299-6597-4AD2-92DE-EDF309875A97}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{855B0D28-DC69-470B-B3D9-481EE52737AA}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{855B0D28-DC69-470B-B3D9-481EE52737AA}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{855B0D28-DC69-470B-B3D9-481EE52737AA}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{855B0D28-DC69-470B-B3D9-481EE52737AA}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{2A1E8ED1-CEB9-47CB-8497-A0C4F5A8F025}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{2A1E8ED1-CEB9-47CB-8497-A0C4F5A8F025}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{2A1E8ED1-CEB9-47CB-8497-A0C4F5A8F025}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{2A1E8ED1-CEB9-47CB-8497-A0C4F5A8F025}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{09BEEA7B-B6D3-4011-BCAB-6DF976713695} = {1F399F98-7439-4F05-847B-CC1267B4B7F2}\n\t\t{ACDA48BA-0BFE-4917-B335-7836DAA5929A} = {A2CF2984-E8E2-48FC-B5A1-58D74A2467E6}\n\t\t{F558E4F2-1AB0-4634-B613-69DFE79894AF} = {A2CF2984-E8E2-48FC-B5A1-58D74A2467E6}\n\t\t{C54F7FE8-650A-4DC7-877F-0DE929351800} = {AAD2D900-C305-4449-A9FC-6C7696FFEDFA}\n\t\t{EC1A3299-6597-4AD2-92DE-EDF309875A97} = {A2CF2984-E8E2-48FC-B5A1-58D74A2467E6}\n\t\t{855B0D28-DC69-470B-B3D9-481EE52737AA} = {1F399F98-7439-4F05-847B-CC1267B4B7F2}\n\t\t{2A1E8ED1-CEB9-47CB-8497-A0C4F5A8F025} = {A2CF2984-E8E2-48FC-B5A1-58D74A2467E6}\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {7F3E353A-C125-4020-8481-11DC6496358C}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "ConsoleAppFramework.sln.DotSettings",
          "type": "blob",
          "size": 0.486328125,
          "content": "ï»¿<wpf:ResourceDictionary xml:space=\"preserve\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:s=\"clr-namespace:System;assembly=mscorlib\" xmlns:ss=\"urn:shemas-jetbrains-com:settings-storage-xaml\" xmlns:wpf=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Cysharp/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/UserDictionary/Words/=Konnichiwa/@EntryIndexedValue\">True</s:Boolean></wpf:ResourceDictionary>"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 0.583984375,
          "content": "<Project>\n  <PropertyGroup>\n    <!-- NuGet Packaging -->\n    <PackageVersion>$(Version)</PackageVersion>\n    <Authors>Cysharp</Authors>\n    <Company>Cysharp</Company>\n    <Copyright>Â© Cysharp, Inc.</Copyright>\n    <PackageProjectUrl>https://github.com/Cysharp/ConsoleAppFramework</PackageProjectUrl>\n    <RepositoryUrl>$(PackageProjectUrl)</RepositoryUrl>\n    <RepositoryType>git</RepositoryType>\n    <PackageTags>batch,console,cli,consoleappframework</PackageTags>\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\n    <PackageIcon>Icon.png</PackageIcon>\n  </PropertyGroup>\n</Project>\n"
        },
        {
          "name": "Icon.png",
          "type": "blob",
          "size": 3.1103515625,
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2020 Cysharp, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "ReadMe.md",
          "type": "blob",
          "size": 47.9091796875,
          "content": "ConsoleAppFramework\n===\n[![GitHub Actions](https://github.com/Cysharp/ConsoleAppFramework/workflows/Build-Debug/badge.svg)](https://github.com/Cysharp/ConsoleAppFramework/actions) [![Releases](https://img.shields.io/github/release/Cysharp/ConsoleAppFramework.svg)](https://github.com/Cysharp/ConsoleAppFramework/releases)\n\nConsoleAppFramework v5 is Zero Dependency, Zero Overhead, Zero Reflection, Zero Allocation, AOT Safe CLI Framework powered by C# Source Generator; achieves exceptionally high performance, fastest start-up time(with NativeAOT) and minimal binary size. Leveraging the latest features of .NET 8 and C# 12 ([IncrementalGenerator](https://github.com/dotnet/roslyn/blob/main/docs/features/incremental-generators.md), [managed function pointer](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-9.0/function-pointers#function-pointers-1), [params arrays and default values lambda expression](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions#input-parameters-of-a-lambda-expression), [`ISpanParsable<T>`](https://learn.microsoft.com/en-us/dotnet/api/system.ispanparsable-1), [`PosixSignalRegistration`](https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.posixsignalregistration), etc.), this library ensures maximum performance while maintaining flexibility and extensibility.\n\n![image](https://github.com/Cysharp/ConsoleAppFramework/assets/46207/db4bf599-9fe0-4ce4-801f-0003f44d5628)\n> Set `RunStrategy=ColdStart WarmupCount=0` to calculate the cold start benchmark, which is suitable for CLI application.\n\nThe magical performance is achieved by statically generating everything and parsing inline. Let's take a look at a minimal example:\n\n```csharp\nusing ConsoleAppFramework;\n\n// args: ./cmd --foo 10 --bar 20\nConsoleApp.Run(args, (int foo, int bar) => Console.WriteLine($\"Sum: {foo + bar}\"));\n```\n\nUnlike typical Source Generators that use attributes as keys for generation, ConsoleAppFramework analyzes the provided lambda expressions or method references and generates the actual code body of the Run method.\n\n```csharp\ninternal static partial class ConsoleApp\n{\n    // Generate the Run method itself with arguments and body to match the lambda expression\n    public static void Run(string[] args, Action<int, int> command)\n    {\n        // code body\n    }\n}\n```\n\n<details><summary>Full generated source code</summary>\n\n```csharp\nnamespace ConsoleAppFramework;\n\ninternal static partial class ConsoleApp\n{\n    public static void Run(string[] args, Action<int, int> command)\n    {\n        if (TryShowHelpOrVersion(args, 2, -1)) return;\n\n        var arg0 = default(int);\n        var arg0Parsed = false;\n        var arg1 = default(int);\n        var arg1Parsed = false;\n\n        try\n        {\n            for (int i = 0; i < args.Length; i++)\n            {\n                var name = args[i];\n\n                switch (name)\n                {\n                    case \"--foo\":\n                    {\n                        if (!TryIncrementIndex(ref i, args.Length) || !int.TryParse(args[i], out arg0)) { ThrowArgumentParseFailed(\"foo\", args[i]); }\n                        arg0Parsed = true;\n                        break;\n                    }\n                    case \"--bar\":\n                    {\n                        if (!TryIncrementIndex(ref i, args.Length) || !int.TryParse(args[i], out arg1)) { ThrowArgumentParseFailed(\"bar\", args[i]); }\n                        arg1Parsed = true;\n                        break;\n                    }\n                    default:\n                        if (string.Equals(name, \"--foo\", StringComparison.OrdinalIgnoreCase))\n                        {\n                            if (!TryIncrementIndex(ref i, args.Length) || !int.TryParse(args[i], out arg0)) { ThrowArgumentParseFailed(\"foo\", args[i]); }\n                            arg0Parsed = true;\n                            break;\n                        }\n                        if (string.Equals(name, \"--bar\", StringComparison.OrdinalIgnoreCase))\n                        {\n                            if (!TryIncrementIndex(ref i, args.Length) || !int.TryParse(args[i], out arg1)) { ThrowArgumentParseFailed(\"bar\", args[i]); }\n                            arg1Parsed = true;\n                            break;\n                        }\n                        ThrowArgumentNameNotFound(name);\n                        break;\n                }\n            }\n            if (!arg0Parsed) ThrowRequiredArgumentNotParsed(\"foo\");\n            if (!arg1Parsed) ThrowRequiredArgumentNotParsed(\"bar\");\n\n            command(arg0!, arg1!);\n        }\n        catch (Exception ex)\n        {\n            Environment.ExitCode = 1;\n            if (ex is ValidationException or ArgumentParseFailedException)\n            {\n                LogError(ex.Message);\n            }\n            else\n            {\n                LogError(ex.ToString());\n            }\n        }\n    }\n\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n    static bool TryIncrementIndex(ref int index, int length)\n    {\n        if (index < length)\n        {\n            index++;\n            return true;\n        }\n        return false;\n    }\n\n    static partial void ShowHelp(int helpId)\n    {\n        Log(\"\"\"\nUsage: [options...] [-h|--help] [--version]\n\nOptions:\n  --foo <int>     (Required)\n  --bar <int>     (Required)\n\"\"\");\n    }\n}\n```\n</details>\n\nAs you can see, the code is straightforward and simple, making it easy to imagine the execution cost of the framework portion. That's right, it's zero. This technique was influenced by Rust's macros. Rust has [Attribute-like macros and Function-like macros](https://doc.rust-lang.org/book/ch19-06-macros.html), and ConsoleAppFramework's generation can be considered as Function-like macros.\n\nThe `ConsoleApp` class, along with everything else, is generated entirely by the Source Generator, resulting in no dependencies, including ConsoleAppFramework itself. This characteristic should contribute to the small assembly size and ease of handling, including support for Native AOT.\n\nMoreover, CLI applications typically involve single-shot execution from a cold start. As a result, common optimization techniques such as dynamic code generation (IL Emit, ExpressionTree.Compile) and caching (ArrayPool) do not work effectively. ConsoleAppFramework generates everything statically in advance, achieving performance equivalent to optimized hand-written code without reflection or boxing.\n\nConsoleAppFramework offers a rich set of features as a framework. The Source Generator analyzes which modules are being used and generates the minimal code necessary to implement the desired functionality.\n\n* SIGINT/SIGTERM(Ctrl+C) handling with gracefully shutdown via `CancellationToken`\n* Filter(middleware) pipeline to intercept before/after execution\n* Exit code management\n* Support for async commands\n* Registration of multiple commands\n* Registration of nested commands\n* Setting option aliases and descriptions from code document comment\n* `System.ComponentModel.DataAnnotations` attribute-based Validation\n* Dependency Injection for command registration by type and public methods\n* `Microsoft.Extensions`(Logging, Configuration, etc...) integration\n* High performance value parsing via `ISpanParsable<T>`\n* Parsing of params arrays\n* Parsing of JSON arguments\n* Help(`-h|--help`) option builder\n* Default show version(`--version`) option\n\nAs you can see from the generated output, the help display is also fast. In typical frameworks, the help string is constructed after the help invocation. However, in ConsoleAppFramework, the help is embedded as string constants, achieving the absolute maximum performance that cannot be surpassed!\n\nGetting Started\n--\nThis library is distributed via NuGet, minimal requirement is .NET 8 and C# 12.\n\n> dotnet add package [ConsoleAppFramework](https://www.nuget.org/packages/ConsoleAppFramework)\n\nConsoleAppFramework is an analyzer (Source Generator) and does not have any dll references. When referenced, the entry point class `ConsoleAppFramework.ConsoleApp` is generated internally.\n\nThe first argument of `Run` or `RunAsync` can be `string[] args`, and the second argument can be any lambda expression, method, or function reference. Based on the content of the second argument, the corresponding function is automatically generated.\n\n```csharp\nusing ConsoleAppFramework;\n\nConsoleApp.Run(args, (string name) => Console.WriteLine($\"Hello {name}\"));\n```\n\n> The latest Visual Studio changed the execution timing of Source Generators to either during save or at compile time. If you encounter unexpected behavior, try compiling once or change the option to \"Automatic\" under TextEditor -> C# -> Advanced -> Source Generators.\n\nYou can execute command like `sampletool --name \"foo\"`.\n\n* The return value can be `void`, `int`, `Task`, or `Task<int>`\n    * If an `int` is returned, that value will be set to `Environment.ExitCode`\n* By default, option argument names are converted to `--lower-kebab-case`\n    * For example, `jsonValue` becomes `--json-value`\n    * Option argument names are case-insensitive, but lower-case matches faster\n\nWhen passing a method, you can write it as follows:\n\n```csharp\nConsoleApp.Run(args, Sum);\n\nvoid Sum(int x, int y) => Console.Write(x + y);\n```\n\nAdditionally, for static functions, you can pass them as function pointers. In that case, the managed function pointer arguments will be generated, resulting in maximum performance.\n\n```csharp\nunsafe\n{\n    ConsoleApp.Run(args, &Sum);\n}\n\nstatic void Sum(int x, int y) => Console.Write(x + y);\n```\n\n```csharp\npublic static unsafe void Run(string[] args, delegate* managed<int, int, void> command)\n```\n\nUnfortunately, currently [static lambdas cannot be assigned to function pointers](https://github.com/dotnet/csharplang/discussions/6746), so defining a named function is necessary.\n\nWhen defining an asynchronous method using a lambda expression, the `async` keyword is required.\n\n```csharp\n// --foo, --bar\nawait ConsoleApp.RunAsync(args, async (int foo, int bar, CancellationToken cancellationToken) =>\n{\n    await Task.Delay(TimeSpan.FromSeconds(5), cancellationToken);\n    Console.WriteLine($\"Sum: {foo + bar}\");\n});\n```\n\nYou can use either the `Run` or `RunAsync` method for invocation. It is optional to use `CancellationToken` as an argument. This becomes a special parameter and is excluded from the command options. Internally, it uses [`PosixSignalRegistration`](https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.posixsignalregistration) to handle `SIGINT`, `SIGTERM`, and `SIGKILL`. When these signals are invoked (e.g., Ctrl+C), the CancellationToken is set to CancellationRequested. If `CancellationToken` is not used as an argument, these signals will not be handled, and the program will terminate immediately. For more details, refer to the [CancellationToken and Gracefully Shutdown](#cancellationtokengracefully-shutdown-and-timeout) section.\n\nOption aliases and Help, Version\n---\nBy default, if `-h` or `--help` is provided, or if no arguments are passed, the help display will be invoked.\n\n```csharp\nConsoleApp.Run(args, (string message) => Console.Write($\"Hello, {message}\"));\n```\n\n```txt\nUsage: [options...] [-h|--help] [--version]\n\nOptions:\n  --message <string>     (Required)\n```\n\nIn ConsoleAppFramework, instead of using attributes, you can provide descriptions and aliases for functions by writing Document Comments. This avoids the common issue in frameworks where arguments become cluttered with attributes, making the code difficult to read. With this approach, a natural writing style is achieved.\n\n```csharp\nConsoleApp.Run(args, Commands.Hello);\n\nstatic class Commands\n{\n    /// <summary>\n    /// Display Hello.\n    /// </summary>\n    /// <param name=\"message\">-m, Message to show.</param>\n    public static void Hello(string message) => Console.Write($\"Hello, {message}\");\n}\n```\n\n```txt\nUsage: [options...] [-h|--help] [--version]\n\nDisplay Hello.\n\nOptions:\n  -m|--message <string>    Message to show. (Required)\n```\n\nTo add aliases to parameters, list the aliases separated by `|` before the comma in the comment. For example, if you write a comment like `-a|-b|--abcde, Description.`, then `-a`, `-b`, and `--abcde` will be treated as aliases, and `Description.` will be the description.\n\nUnfortunately, due to current C# specifications, lambda expressions and [local functions do not support document comments](https://github.com/dotnet/csharplang/issues/2110), so a class is required.\n\nIn addition to `-h|--help`, there is another special built-in option: `--version`. In default, it displays the `AssemblyInformationalVersion` without source revision or `AssemblyVersion`. You can configure version string by `ConsoleApp.Version`, for example `ConsoleApp.Version = \"2001.9.3f14-preview2\";`.\n\nCommand\n---\nIf you want to register multiple commands or perform complex operations (such as adding filters), instead of using `Run/RunAsync`, obtain the `ConsoleAppBuilder` using `ConsoleApp.Create()`. Call `Add`, `Add<T>`, or `UseFilter<T>` multiple times on the `ConsoleAppBuilder` to register commands and filters, and finally execute the application using `Run` or `RunAsync`.\n\n```csharp\nvar app = ConsoleApp.Create();\n\napp.Add(\"\", (string msg) => Console.WriteLine(msg));\napp.Add(\"echo\", (string msg) => Console.WriteLine(msg));\napp.Add(\"sum\", (int x, int y) => Console.WriteLine(x + y));\n\n// --msg\n// echo --msg\n// sum --x --y\napp.Run(args);\n```\n\nThe first argument of `Add` is the command name. If you specify an empty string `\"\"`, it becomes the root command. Unlike parameters, command names are case-sensitive and cannot have multiple names.\n\nWith `Add<T>`, you can add multiple commands at once using a class-based approach, where public methods are treated as commands. If you want to write document comments for multiple commands, this approach allows for cleaner code, so it is recommended. Additionally, as mentioned later, you can also write clean code for Dependency Injection (DI) using constructor injection.\n\n```csharp\nvar app = ConsoleApp.Create();\napp.Add<MyCommands>();\napp.Run(args);\n\npublic class MyCommands\n{\n    /// <summary>Root command test.</summary>\n    /// <param name=\"msg\">-m, Message to show.</param>\n    [Command(\"\")]\n    public void Root(string msg) => Console.WriteLine(msg);\n\n    /// <summary>Display message.</summary>\n    /// <param name=\"msg\">Message to show.</param>\n    public void Echo(string msg) => Console.WriteLine(msg);\n\n    /// <summary>Sum parameters.</summary>\n    /// <param name=\"x\">left value.</param>\n    /// <param name=\"y\">right value.</param>\n    public void Sum(int x, int y) => Console.WriteLine(x + y);\n}\n```\n\nWhen you check the registered commands with `--help`, it will look like this. Note that you can register multiple `Add<T>` and also add commands using `Add`.\n\n```txt\nUsage: [command] [options...] [-h|--help] [--version]\n\nRoot command test.\n\nOptions:\n  -m|--msg <string>    Message to show. (Required)\n\nCommands:\n  echo    Display message.\n  sum     Sum parameters.\n```\n\nBy default, the command name is derived from the method name converted to `lower-kebab-case`. However, you can change the name to any desired value using the `[Command(string commandName)]` attribute.\n\nIf the class implements `IDisposable` or `IAsyncDisposable`, the Dispose or DisposeAsync method will be called after the command execution.\n\n### Nested command\n\nYou can create a deep command hierarchy by adding commands with paths separated by space(` `) when registering them. This allows you to add commands at nested levels.\n\n```csharp\nvar app = ConsoleApp.Create();\n\napp.Add(\"foo\", () => { });\napp.Add(\"foo bar\", () => { });\napp.Add(\"foo bar barbaz\", () => { });\napp.Add(\"foo baz\", () => { });\n\n// Commands:\n//   foo\n//   foo bar\n//   foo bar barbaz\n//   foo baz\napp.Run(args);\n```\n\n`Add<T>` can also add commands to a hierarchy by passing a `string commandPath` argument.\n\n```csharp\nvar app = ConsoleApp.Create();\napp.Add<MyCommands>(\"foo\");\n\n// Commands:\n//  foo         Root command test.\n//  foo echo    Display message.\n//  foo sum     Sum parameters.\napp.Run(args);\n```\n\n### Register from attribute\n\nInstead of using `Add<T>`, you can automatically add commands by applying the `[RegisterCommands]` attribute to a class.\n\n```csharp\n[RegisterCommands]\npublic class Foo\n{\n    public void Baz(int x)\n    {\n        Console.Write(x);\n    }\n}\n\n[RegisterCommands(\"bar\")]\npublic class Bar\n{\n    public void Baz(int x)\n    {\n        Console.Write(x);\n    }\n}\n```\n\nThese are automatically added when using `ConsoleApp.Create()`.\n\n```csharp\nvar app = ConsoleApp.Create();\n\n// Commands:\n//   baz\n//   bar baz\napp.Run(args);\n```\n\nYou can also combine this with `Add` or `Add<T>` to add more commands.\n\n### Performance of Commands\n\nIn `ConsoleAppFramework`, the number and types of registered commands are statically determined at compile time. For example, let's register the following four commands:\n\n```csharp\napp.Add(\"foo\", () => { });\napp.Add(\"foo bar\", (int x, int y) => { });\napp.Add(\"foo bar barbaz\", (DateTime dateTime) => { });\napp.Add(\"foo baz\", async (string foo = \"test\", CancellationToken cancellationToken = default) => { });\n```\n\nThe Source Generator generates four fields and holds them with specific types.\n\n```csharp\npartial class ConsoleAppBuilder\n{\n    Action command0 = default!;\n    Action<int, int> command1 = default!;\n    Action<global::System.DateTime> command2 = default!;\n    Func<string, global::System.Threading.CancellationToken, Task> command3 = default!;\n\n    partial void AddCore(string commandName, Delegate command)\n    {\n        switch (commandName)\n        {\n            case \"foo\":\n                this.command0 = Unsafe.As<Action>(command);\n                break;\n            case \"foo bar\":\n                this.command1 = Unsafe.As<Action<int, int>>(command);\n                break;\n            case \"foo bar barbaz\":\n                this.command2 = Unsafe.As<Action<global::System.DateTime>>(command);\n                break;\n            case \"foo baz\":\n                this.command3 = Unsafe.As<Func<string, global::System.Threading.CancellationToken, Task>>(command);\n                break;\n            default:\n                break;\n        }\n    }\n}\n```\n\nThis ensures the fastest execution speed without any additional unnecessary allocations such as arrays and without any boxing since it holds static delegate types.\n\nCommand routing also generates a switch of nested string constants.\n\n```csharp\npartial void RunCore(string[] args)\n{\n    if (args.Length == 0)\n    {\n        ShowHelp(-1);\n        return;\n    }\n    switch (args[0])\n    {\n        case \"foo\":\n            if (args.Length == 1)\n            {\n                RunCommand0(args, args.AsSpan(1), command0);\n                return;\n            }\n            switch (args[1])\n            {\n                case \"bar\":\n                    if (args.Length == 2)\n                    {\n                        RunCommand1(args, args.AsSpan(2), command1);\n                        return;\n                    }\n                    switch (args[2])\n                    {\n                        case \"barbaz\":\n                            RunCommand2(args, args.AsSpan(3), command2);\n                            break;\n                        default:\n                            RunCommand1(args, args.AsSpan(2), command1);\n                            break;\n                    }\n                    break;\n                case \"baz\":\n                    RunCommand3(args, args.AsSpan(2), command3);\n                    break;\n                default:\n                    RunCommand0(args, args.AsSpan(1), command0);\n                    break;\n            }\n            break;\n        default:\n            ShowHelp(-1);\n            break;\n    }\n}\n```\n\nThe C# compiler performs complex generation for string constant switches, making them extremely fast, and it would be difficult to achieve faster routing than this.\n\nDisable Naming Conversion\n---\nCommand names and option names are automatically converted to kebab-case by default. While this follows standard command-line tool naming conventions, you might find this conversion inconvenient when creating batch files for internal applications. Therefore, it's possible to disable this conversion at the assembly level.\n\n```csharp\nusing ConsoleAppFramework;\n\n[assembly: ConsoleAppFrameworkGeneratorOptions(DisableNamingConversion = true)]\n\nvar app = ConsoleApp.Create();\napp.Add<MyProjectCommand>();\napp.Run(args);\n\npublic class MyProjectCommand\n{\n    public void ExecuteCommand(string fooBarBaz)\n    {\n        Console.WriteLine(fooBarBaz);\n    }\n}\n```\n\nYou can disable automatic conversion by using `[assembly: ConsoleAppFrameworkGeneratorOptions(DisableNamingConversion = true)]`. In this case, the command would be `ExecuteCommand --fooBarBaz`.\n\nParse and Value Binding\n---\nThe method parameter names and types determine how to parse and bind values from the command-line arguments. When using lambda expressions, optional values and `params` arrays supported from C# 12 are also supported.\n\n```csharp\nConsoleApp.Run(args, (\n    [Argument]DateTime dateTime,  // Argument\n    [Argument]Guid guidvalue,     // \n    int intVar,                   // required\n    bool boolFlag,                // flag\n    MyEnum enumValue,             // enum\n    int[] array,                  // array\n    MyClass obj,                  // object\n    string optional = \"abcde\",    // optional\n    double? nullableValue = null, // nullable\n    params string[] paramsArray   // params\n    ) => { });\n```    \n\nWhen using `ConsoleApp.Run`, you can check the syntax of the command line in the tooltip to see how it is generated.\n\n![image](https://github.com/Cysharp/ConsoleAppFramework/assets/46207/af480566-adac-4767-bd5e-af89ab6d71f1)\n\nFor the rules on converting parameter names to option names, aliases, and how to set documentation, refer to the [Option aliases](#option-aliases-and-help-version) section.\n\nParameters marked with the `[Argument]` attribute receive values in order without parameter names. This attribute can only be set on sequential parameters from the beginning.\n\nTo convert from string arguments to various types, basic primitive types (`string`, `char`, `sbyte`, `byte`, `short`, `int`, `long`, `uint`, `ushort`, `ulong`, `decimal`, `float`, `double`) use `TryParse`. For types that implement `ISpanParsable<T>` (`DateTime`, `DateTimeOffset`, `Guid`, `BigInteger`, `Complex`, `Half`, `Int128`, etc.), [IParsable<TSelf>.TryParse](https://learn.microsoft.com/en-us/dotnet/api/system.iparsable-1.tryparse?view=net-8.0#system-ispanparsable-1-tryparse(system-readonlyspan((system-char))-system-iformatprovider-0@)) or [ISpanParsable<TSelf>.TryParse](https://learn.microsoft.com/en-us/dotnet/api/system.ispanparsable-1.tryparse?view=net-8.0#system-ispanparsable-1-tryparse(system-readonlyspan((system-char))-system-iformatprovider-0@)) is used.\n\nFor `enum`, it is parsed using `Enum.TryParse(ignoreCase: true)`.\n\n`bool` is treated as a flag and is always optional. It becomes `true` when the parameter name is passed.\n\n### Array\n\nArray parsing has three special patterns.\n\nFor a regular `T[]`, if the value starts with `[`, it is parsed using `JsonSerializer.Deserialize`. Otherwise, it is parsed as comma-separated values. For example, `[1,2,3]` or `1,2,3` are allowed as values. To set an empty array, pass `[]`.\n\nFor `params T[]`, all subsequent arguments become the values of the array. For example, if there is an input like `--paramsArray foo bar baz`, it will be bound to a value like `[\"foo\", \"bar\", \"baz\"]`.\n\n### Object\n\nIf none of the above cases apply, `JsonSerializer.Deserialize<T>` is used to perform binding as JSON. However, `CancellationToken` and `ConsoleAppContext` are treated as special types and excluded from binding. Also, parameters with the `[FromServices]` attribute are not subject to binding.\n\nIf you want to change the deserialization options, you can set `JsonSerializerOptions` to `ConsoleApp.JsonSerializerOptions`.\n\n> NOTE: If they are not set when NativeAOT is used, a runtime exception may occur. If they are included in the parsing process, be sure to set source generated options.\n\n### Custom Value Converter\n\nTo perform custom binding to existing types that do not support `ISpanParsable<T>`, you can create and set up a custom parser. For example, if you want to pass `System.Numerics.Vector3` as a comma-separated string like `1.3,4.12,5.947` and parse it, you can create an `Attribute` with `AttributeTargets.Parameter` that implements `IArgumentParser<T>`'s `static bool TryParse(ReadOnlySpan<char> s, out Vector3 result)` as follows:\n\n```csharp\n[AttributeUsage(AttributeTargets.Parameter)]\npublic class Vector3ParserAttribute : Attribute, IArgumentParser<Vector3>\n{\n    public static bool TryParse(ReadOnlySpan<char> s, out Vector3 result)\n    {\n        Span<Range> ranges = stackalloc Range[3];\n        var splitCount = s.Split(ranges, ',');\n        if (splitCount != 3)\n        {\n            result = default;\n            return false;\n        }\n\n        float x;\n        float y;\n        float z;\n        if (float.TryParse(s[ranges[0]], out x) && float.TryParse(s[ranges[1]], out y) && float.TryParse(s[ranges[2]], out z))\n        {\n            result = new Vector3(x, y, z);\n            return true;\n        }\n\n        result = default;\n        return false;\n    }\n}\n```\n\nBy setting this attribute on a parameter, the custom parser will be called when parsing the args.\n\n```csharp\nConsoleApp.Run(args, ([Vector3Parser] Vector3 position) => Console.WriteLine(position));\n```\n\n### Syntax Parsing Policy and Performance\n\nWhile there are some standards for command-line arguments, such as UNIX tools and POSIX, there is no absolute specification. The [Command-line syntax overview for System.CommandLine](https://learn.microsoft.com/en-us/dotnet/standard/commandline/syntax) provides an explanation of the specifications adopted by System.CommandLine. However, ConsoleAppFramework, while referring to these specifications to some extent, does not necessarily aim to fully comply with them.\n\nFor example, specifications that change behavior based on `-x` and `-X` or allow bundling `-f -d -x` as `-fdx` are not easy to understand and also take time to parse. The poor performance of System.CommandLine may be influenced by its adherence to complex grammar. Therefore, ConsoleAppFramework prioritizes performance and clear rules. It uses lower-kebab-case as the basis while allowing case-insensitive matching. It does not support ambiguous grammar that cannot be processed in a single pass or takes time to parse.\n\n[System.CommandLine seems to be aiming for a new direction in .NET 9 and .NET 10](https://github.com/dotnet/command-line-api/issues/2338), but from a performance perspective, it will never surpass ConsoleAppFramework.\n\nCancellationToken(Gracefully Shutdown) and Timeout\n---\nIn ConsoleAppFramework, when you pass a `CancellationToken` as an argument, it can be used to check for interruption commands (SIGINT/SIGTERM/SIGKILL - Ctrl+C) rather than being treated as a parameter. For handling this, ConsoleAppFramework performs special code generation when a `CancellationToken` is included in the parameters.\n\n```csharp\nusing var posixSignalHandler = PosixSignalHandler.Register(ConsoleApp.Timeout);\nvar arg0 = posixSignalHandler.Token;\n\nawait Task.Run(() => command(arg0!)).WaitAsync(posixSignalHandler.TimeoutToken);\n```\n\nIf a CancellationToken is not passed, the application is immediately forced to terminate when an interruption command (Ctrl+C) is received. However, if a CancellationToken is present, it internally uses [`PosixSignalRegistration`](https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.posixsignalregistration) to hook SIGINT/SIGTERM/SIGKILL and sets the CancellationToken to a canceled state. Additionally, it prevents forced termination to allow for a graceful shutdown.\n\nIf the CancellationToken is handled correctly, the application can perform proper termination processing based on the application's handling. However, if the CancellationToken is mishandled, the application may not terminate even when an interruption command is received. To avoid this, a timeout timer starts after the interruption command, and the application is forcibly terminated again after the specified time.\n\nThe default timeout is 5 seconds, but it can be changed using `ConsoleApp.Timeout`. For example, setting it to `ConsoleApp.Timeout = Timeout.InfiniteTimeSpan;` disables the forced termination caused by the timeout.\n\nThe hooking behavior using `PosixSignalRegistration` is determined by the presence of a `CancellationToken` (or always takes effect if a filter is set). Therefore, even for synchronous methods, it is possible to change the behavior by including a `CancellationToken` as an argument.\n\nExit Code\n---\nIf the method returns `int` or `Task<int>`, `ConsoleAppFramework` will set the return value to the exit code. Due to the nature of code generation, when writing lambda expressions, you need to explicitly specify either `int` or `Task<int>`.\n\n```csharp\n// return Random ExitCode...\nConsoleApp.Run(args, int () => Random.Shared.Next());\n```\n\n```csharp\n// return StatusCode\nawait ConsoleApp.RunAsync(args, async Task<int> (string url, CancellationToken cancellationToken) =>\n{\n    using var client = new HttpClient();\n    var response = await client.GetAsync(url, cancellationToken);\n    return (int)response.StatusCode;\n});\n```\n\nIf the method throws an unhandled exception, ConsoleAppFramework always set `1` to the exit code. Also, in that case, output `Exception.ToString` to `ConsoleApp.LogError` (the default is `Console.WriteLine`). If you want to modify this code, please create a custom filter. For more details, refer to the [Filter](#filtermiddleware-pipline--consoleappcontext) section. \n\nAttribute based parameters validation\n---\n`ConsoleAppFramework` performs validation when the parameters are marked with attributes for validation from `System.ComponentModel.DataAnnotations` (more precisely, attributes that implement `ValidationAttribute`). The validation occurs after parameter binding and before command execution. If the validation fails, it throws a `ValidationException`.\n\n```csharp\nConsoleApp.Run(args, ([EmailAddress] string firstArg, [Range(0, 2)] int secondArg) => { });\n```\n\nFor example, if you pass arguments like `args = \"--first-arg invalid.email --second-arg 10\".Split(' ');`, you will see validation failure messages such as:\n\n```txt\nThe firstArg field is not a valid e-mail address.\nThe field secondArg must be between 0 and 2.\n```\n\nBy default, the ExitCode is set to 1 in this case.\n\nFilter(Middleware) Pipline / ConsoleAppContext\n---\nFilters are provided as a mechanism to hook into the execution before and after. To use filters, define an `internal class` that implements `ConsoleAppFilter`.\n\n```csharp\ninternal class NopFilter(ConsoleAppFilter next) : ConsoleAppFilter(next) // ctor needs `ConsoleAppFilter next` and call base(next)\n{\n    // implement InvokeAsync as filter body\n    public override async Task InvokeAsync(ConsoleAppContext context, CancellationToken cancellationToken)\n    {\n        try\n        {\n            /* on before */\n            await Next.InvokeAsync(context, cancellationToken); // invoke next filter or command body\n            /* on after */\n        }\n        catch\n        {\n            /* on error */\n            throw;\n        }\n        finally\n        {\n            /* on finally */\n        }\n    }\n}\n```\n\nFilters can be attached multiple times to \"global\", \"class\", or \"method\" using `UseFilter<T>` or `[ConsoleAppFilter<T>]`. The order of filters is global â class â method, and the execution order is determined by the definition order from top to bottom.\n\n```csharp\nvar app = ConsoleApp.Create();\n\n// global filters\napp.UseFilter<NopFilter>(); //order 1\napp.UseFilter<NopFilter>(); //order 2\n\napp.Add<MyCommand>();\napp.Run(args);\n\n// per class filters\n[ConsoleAppFilter<NopFilter>] // order 3\n[ConsoleAppFilter<NopFilter>] // order 4\npublic class MyCommand\n{\n    // per method filters\n    [ConsoleAppFilter<NopFilter>] // order 5\n    [ConsoleAppFilter<NopFilter>] // order 6\n    public void Echo(string msg) => Console.WriteLine(msg);\n}\n```\n\nFilters allow various processes to be shared. For example, the process of measuring execution time can be written as follows:\n\n```csharp\ninternal class LogRunningTimeFilter(ConsoleAppFilter next) : ConsoleAppFilter(next)\n{\n    public override async Task InvokeAsync(ConsoleAppContext context, CancellationToken cancellationToken)\n    {\n        var startTime = Stopwatch.GetTimestamp();\n        ConsoleApp.Log($\"Execute command at {DateTime.UtcNow.ToLocalTime()}\"); // LocalTime for human readable time\n        try\n        {\n            await Next.InvokeAsync(context, cancellationToken);\n            ConsoleApp.Log($\"Command execute successfully at {DateTime.UtcNow.ToLocalTime()}, Elapsed: \" + (Stopwatch.GetElapsedTime(startTime)));\n        }\n        catch\n        {\n            ConsoleApp.Log($\"Command execute failed at {DateTime.UtcNow.ToLocalTime()}, Elapsed: \" + (Stopwatch.GetElapsedTime(startTime)));\n            throw;\n        }\n    }\n}\n```\n\nIn case of an exception, the `ExitCode` is usually `1`, and the stack trace is also displayed. However, by applying an exception handling filter, the behavior can be changed.\n\n```csharp\ninternal class ChangeExitCodeFilter(ConsoleAppFilter next) : ConsoleAppFilter(next)\n{\n    public override async Task InvokeAsync(ConsoleAppContext context, CancellationToken cancellationToken)\n    {\n        try\n        {\n            await Next.InvokeAsync(context, cancellationToken);\n        }\n        catch (Exception ex)\n        {\n            if (ex is OperationCanceledException) return;\n\n            Environment.ExitCode = 9999; // change custom exit code\n            ConsoleApp.LogError(ex.Message); // .ToString() shows stacktrace, .Message can avoid showing stacktrace to user.\n        }\n    }\n}\n```\n\nFilters are executed after the command name routing is completed. If you want to prohibit multiple executions for each command name, you can use `ConsoleAppContext.CommandName` as the key.\n\n```csharp\ninternal class PreventMultipleSameCommandInvokeFilter(ConsoleAppFilter next) : ConsoleAppFilter(next)\n{\n    public override async Task InvokeAsync(ConsoleAppContext context, CancellationToken cancellationToken)\n    {\n        var basePath = Assembly.GetEntryAssembly()?.Location.Replace(Path.DirectorySeparatorChar, '_');\n        var mutexKey = $\"{basePath}$$${context.CommandName}\"; // lock per command-name\n\n        using var mutex = new Mutex(true, mutexKey, out var createdNew);\n        if (!createdNew)\n        {\n            throw new Exception($\"already running command:{context.CommandName} in another process.\");\n        }\n\n        await Next.InvokeAsync(context, cancellationToken);\n    }\n}\n```\n\nIf you want to pass values between filters or to commands, you can use `ConsoleAppContext.State`. For example, if you want to perform authentication processing and pass around the ID, you can write code like the following. Since `ConsoleAppContext` is an immutable record, you need to pass the rewritten context to Next using the `with` syntax.\n\n```csharp\ninternal class AuthenticationFilter(ConsoleAppFilter next) : ConsoleAppFilter(next)\n{\n    public override async Task InvokeAsync(ConsoleAppContext context, CancellationToken cancellationToken)\n    {\n        var requestId = Guid.NewGuid();\n        var userId = await GetUserIdAsync();\n\n        // setup new state to context\n        var authedContext = context with { State = new ApplicationContext(requestId, userId) };\n        await Next.InvokeAsync(authedContext, cancellationToken);\n    }\n\n    // get user-id from DB/auth saas/others\n    async Task<int> GetUserIdAsync()\n    {\n        await Task.Delay(TimeSpan.FromSeconds(1));\n        return 1999;\n    }\n}\n\nrecord class ApplicationContext(Guid RequiestId, int UserId);\n```\n\nCommands can accept `ConsoleAppContext` as an argument. This allows using the values processed by filters.\n\n```csharp\nvar app = ConsoleApp.Create();\n\napp.UseFilter<AuthenticationFilter>();\n\napp.Add(\"\", (int x, int y, ConsoleAppContext context) =>\n{\n    var appContext = (ApplicationContext)context.State!;\n    var requestId = appContext.RequiestId;\n    var userId = appContext.UserId;\n\n    Console.WriteLine($\"Request:{requestId} User:{userId} Sum:{x + y}\");\n});\n\napp.Run(args);\n```\n\n`ConsoleAppContext` also has a `ConsoleAppContext.Arguments` property that allows you to obtain the (`string[] args`) passed to Run/RunAsync.\n\n### Sharing Filters Between Projects\n\n`ConsoleAppFilter` is defined as `internal` for each project by the Source Generator. Therefore, an additional library is provided for referencing common filter definitions across projects.\n\n> PM> Install-Package [ConsoleAppFramework.Abstractions](https://www.nuget.org/packages/ConsoleAppFramework.Abstractions)\n\nThis library includes the following classes:\n\n* `IArgumentParser<T>`\n* `ConsoleAppContext`\n* `ConsoleAppFilter`\n* `ConsoleAppFilterAttribute<T>`\n\nInternally, when referencing `ConsoleAppFramework.Abstractions`, the `USE_EXTERNAL_CONSOLEAPP_ABSTRACTIONS` compilation symbol is added. This disables the above classes generated by the Source Generator, and prioritizes using the classes within the library.\n\n### Performance of filter\n\nIn general frameworks, filters are dynamically added at runtime, resulting in a variable number of filters. Therefore, they need to be allocated using a dynamic array. In ConsoleAppFramework, the number of filters is statically determined at compile time, eliminating the need for any additional allocations such as arrays or lambda expression captures. The allocation amount is equal to the number of filter classes being used plus 1 (for wrapping the command method), resulting in the shortest execution path.\n\n```csharp\napp.UseFilter<NopFilter>();\napp.UseFilter<NopFilter>();\napp.UseFilter<NopFilter>();\napp.UseFilter<NopFilter>();\napp.UseFilter<NopFilter>();\n\n// The above code will generate the following code:\n\nsealed class Command0Invoker(string[] args, Action command) : ConsoleAppFilter(null!)\n{\n    public ConsoleAppFilter BuildFilter()\n    {\n        var filter0 = new NopFilter(this);\n        var filter1 = new NopFilter(filter0);\n        var filter2 = new NopFilter(filter1);\n        var filter3 = new NopFilter(filter2);\n        var filter4 = new NopFilter(filter3);\n        return filter4;\n    }\n\n    public override Task InvokeAsync(ConsoleAppContext context, CancellationToken cancellationToken)\n    {\n        return RunCommand0Async(context.Arguments, args, command, context, cancellationToken);\n    }\n}\n```\n\nWhen an `async Task` completes synchronously, it returns the equivalent of `Task.CompletedTask`, so `ValueTask` is not necessary.\n\nDependency Injection(Logging, Configuration, etc...)\n---\nThe execution processing of `ConsoleAppFramework` fully supports `DI`. When you want to use a logger, read a configuration, or share processing with an ASP.NET project, using `Microsoft.Extensions.DependencyInjection` or other DI libraries can make processing convenient.\n\nIf you are referencing `Microsoft.Extensions.DependencyInjection`, you can call the `ConfigureServices` method from `ConsoleApp.ConsoleAppBuilder` (ConsoleAppFramework adds methods based on your project's reference status).\n\n```csharp\nvar app = ConsoleApp.Create()\n    .ConfigureServices(service =>\n    {\n        service.AddTransient<MyService>();\n    });\n\napp.Add(\"\", ([FromServices] MyService service, int x, int y) => Console.WriteLine(x + y));\n\napp.Run(args);\n```\n\nWhen passing to a lambda expression or method, the `[FromServices]` attribute is used to distinguish it from command parameters. When passing a class, Constructor Injection can be used, resulting in a simpler appearance.\n\nLet's try injecting a logger and enabling output to a file. The libraries used are Microsoft.Extensions.Logging and [Cysharp/ZLogger](https://github.com/Cysharp/ZLogger/) (a high-performance logger built on top of MS.E.Logging). If you are referencing `Microsoft.Extensions.Logging`, you can call `ConfigureLogging` from `ConsoleAppBuilder`.\n\n```csharp\n// Package Import: ZLogger\nvar app = ConsoleApp.Create()\n    .ConfigureLogging(x =>\n    {\n        x.ClearProviders();\n        x.SetMinimumLevel(LogLevel.Trace);\n        x.AddZLoggerConsole();\n        x.AddZLoggerFile(\"log.txt\");\n    });\n\napp.Add<MyCommand>();\napp.Run(args);\n\n// inject logger to constructor\npublic class MyCommand(ILogger<MyCommand> logger)\n{\n    public void Echo(string msg)\n    {\n        logger.ZLogInformation($\"Message is {msg}\");\n    }\n}\n```\n\nFor building an `IServiceProvider`, `ConfigureServices/ConfigureLogging` uses `Microsoft.Extensions.DependencyInjection.ServiceCollection`. If you want to set a custom ServiceProvider or a ServiceProvider built from Host, or if you want to execute DI with `ConsoleApp.Run`, set it to `ConsoleApp.ServiceProvider`.\n\n```csharp\n// Microsoft.Extensions.DependencyInjection\nvar services = new ServiceCollection();\nservices.AddTransient<MyService>();\n\nusing var serviceProvider = services.BuildServiceProvider();\n\n// Any DI library can be used as long as it can create an IServiceProvider\nConsoleApp.ServiceProvider = serviceProvider;\n\n// When passing to a lambda expression/method, using [FromServices] indicates that it is passed via DI, not as a parameter\nConsoleApp.Run(args, ([FromServices]MyService service, int x, int y) => Console.WriteLine(x + y));\n```\n\n`ConsoleApp` has replaceable default logging methods `ConsoleApp.Log` and `ConsoleApp.LogError` used for Help display and exception handling. If using `ILogger<T>`, it's better to replace these as well.\n\n```csharp\napp.UseFilter<ReplaceLogFilter>();\n\n// inject logger to filter\ninternal sealed class ReplaceLogFilter(ConsoleAppFilter next, ILogger<Program> logger)\n    : ConsoleAppFilter(next)\n{\n    public override Task InvokeAsync(ConsoleAppContext context, CancellationToken cancellationToken)\n    {\n        ConsoleApp.Log = msg => logger.LogInformation(msg);\n        ConsoleApp.LogError = msg => logger.LogError(msg);\n\n        return Next.InvokeAsync(context, cancellationToken);\n    }\n}\n```\n\nDI can also be effectively used when reading application configuration from `appsettings.json`. For example, suppose you have the following JSON file.\n\n```json\n{\n  \"Position\": {\n    \"Title\": \"Editor\",\n    \"Name\": \"Joe Smith\"\n  },\n  \"MyKey\": \"My appsettings.json Value\",\n  \"AllowedHosts\": \"*\"\n}\n```\n\n```xml\n<ItemGroup>\n    <None Update=\"appsettings.json\">\n        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n</ItemGroup>\n```\n\nUsing `Microsoft.Extensions.Configuration.Json`, reading, binding, and registering with DI can be done as follows.\n\n```csharp\n// Package Import: Microsoft.Extensions.Configuration.Json\nvar app = ConsoleApp.Create()\n    .ConfigureDefaultConfiguration()\n    .ConfigureServices((configuration, services) =>\n    {\n        // Package Import: Microsoft.Extensions.Options.ConfigurationExtensions\n        services.Configure<PositionOptions>(configuration.GetSection(\"Position\"));\n    });\n\napp.Add<MyCommand>();\napp.Run(args);\n\n// inject options\npublic class MyCommand(IOptions<PositionOptions> options)\n{\n    public void Echo(string msg)\n    {\n        ConsoleApp.Log($\"Binded Option: {options.Value.Title} {options.Value.Name}\");\n    }\n}\n\npublic class PositionOptions\n{\n    public string Title { get; set; } = \"\";\n    public string Name { get; set; } = \"\";\n}\n```\n\nWhen `Microsoft.Extensions.Configuration` is imported, `ConfigureEmptyConfiguration` becomes available to call. Additionally, when `Microsoft.Extensions.Configuration.Json` is imported, `ConfigureDefaultConfiguration` becomes available to call. In DefaultConfiguration, `SetBasePath(System.IO.Directory.GetCurrentDirectory())` and `AddJsonFile(\"appsettings.json\", optional: true)` are executed before calling `Action<IConfigurationBuilder> configure`.\n\nFurthermore, overloads of `Action<IConfiguration, IServiceCollection> configure` and `Action<IConfiguration, ILoggingBuilder> configure` are added to `ConfigureServices` and `ConfigureLogging`, allowing you to retrieve the Configuration when executing the delegate.\n\nwithout Hosting dependency, I've prefere these import packages.\n\n```xml\n<ItemGroup>\n\t<PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"9.0.0\" />\n\t<PackageReference Include=\"Microsoft.Extensions.Options.ConfigurationExtensions\" Version=\"9.0.0\" />\n\t<PackageReference Include=\"ZLogger\" Version=\"2.5.9\" />\n</ItemGroup>\n```\n\nAs it is, the DI scope is not set, but by using a global filter, you can add a scope for each command execution. `ConsoleAppFilter` can also inject services via constructor injection, so let's get the `IServiceProvider`.\n\n```csharp\napp.UseFilter<ServiceProviderScopeFilter>();\n\ninternal class ServiceProviderScopeFilter(IServiceProvider serviceProvider, ConsoleAppFilter next) : ConsoleAppFilter(next)\n{\n    public override async Task InvokeAsync(ConsoleAppContext context, CancellationToken cancellationToken)\n    {\n        // create Microsoft.Extensions.DependencyInjection scope\n        await using var scope = serviceProvider.CreateAsyncScope();\n\n        var originalServiceProvider = ConsoleApp.ServiceProvider;\n        ConsoleApp.ServiceProvider = scope.ServiceProvider;\n        try\n        {\n            await Next.InvokeAsync(context, cancellationToken);\n        }\n        finally\n        {\n            ConsoleApp.ServiceProvider = originalServiceProvider;\n        }\n    }\n}\n```\n\nHowever, since the construction of the filters is performed before execution, automatic injection using scopes is only effective for the command body itself.\n\nIf you have other applications such as ASP.NET in the entire project and want to use common DI and configuration set up using `Microsoft.Extensions.Hosting`, you can call `ToConsoleAppBuilder` from `IHostBuilder` or `HostApplicationBuilder`.\n\n```csharp\n// Package Import: Microsoft.Extensions.Hosting\nvar app = Host.CreateApplicationBuilder()\n    .ToConsoleAppBuilder();\n```\n\nIn this case, it builds the HostBuilder, creates a Scope for the ServiceProvider, and disposes of all of them after execution.\n\nConsoleAppFramework has its own lifetime management (see the [CancellationToken(Gracefully Shutdown) and Timeout](#cancellationtokengracefully-shutdown-and-timeout) section), so Host's Start/Stop is not necessary.\n\nColorize\n---\nThe framework doesn't support colorization directly; however, utilities like [Cysharp/Kokuban](https://github.com/Cysharp/Kokuban) make console colorization easy.\n\nPublish to executable file\n---\nThere are multiple ways to run a CLI application in .NET:\n\n* [dotnet run](https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-run)\n* [dotnet build](https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-build)\n* [dotnet publish](https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-publish)\n\n`run` is convenient when you want to execute the `csproj` directly, such as for starting command tools in CI. `build` and `publish` are quite similar, so it's possible to discuss them in general terms, but it's a bit difficult to talk about the precise differences. For more details, it's a good idea to check out [`build` vs `publish` -- can they be friends? Â· Issue #26247 Â· dotnet/sdk](https://github.com/dotnet/sdk/issues/26247).\n\nAlso, to run with Native AOT, please refer to the [Native AOT deployment overview](https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/). In any case, ConsoleAppFramework thoroughly implements a dependency-free and reflection-free approach, so it shouldn't be an obstacle to execution.\n\nv4 -> v5 Migration Guide\n---\nv4 was running on top of `Microsoft.Extensions.Hosting`, so build a Host in the same way and set up a ServiceProvider.\n\n```csharp\nusing var host = Host.CreateDefaultBuilder().Build(); // use using for host lifetime\nusing var scope = host.Services.CreateScope(); // create execution scope\nConsoleApp.ServiceProvider = scope.ServiceProvider;\n```\n\n* `var app = ConsoleApp.Create(args); app.Run();` -> `var app = ConsoleApp.Create(); app.Run(args);`\n* `app.AddCommand/AddSubCommand` -> `app.Add(string commandName)`\n* `app.AddRootCommand` -> `app.Add(\"\")`\n* `app.AddCommands<T>` -> `app.Add<T>`\n* `app.AddSubCommands<T>` -> `app.Add<T>(string commandPath)`\n* `app.AddAllCommandType` -> `NotSupported`(use `Add<T>` manually)\n* `[Option(int index)]` -> `[Argument]`\n* `[Option(string shortName, string description)]` -> `Xml Document Comment`\n* `ConsoleAppFilter.Order` -> `NotSupported`(global -> class -> method declrative order)\n* `ConsoleAppOptions.GlobalFilters` -> `app.UseFilter<T>`\n* `ConsoleAppBase` -> inject `ConsoleAppContext`, `CancellationToken` to method\n\nLicense\n---\nThis library is under the MIT License.\n"
        },
        {
          "name": "sandbox",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}