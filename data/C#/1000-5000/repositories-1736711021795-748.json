{
  "metadata": {
    "timestamp": 1736711021795,
    "page": 748,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "icsharpcode/AvaloniaILSpy",
      "stars": 1611,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.458984375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.1201171875,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\ntools/\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# Mac\n.DS_Store\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 0.2509765625,
          "content": "<Project>\n\n    <PropertyGroup>\n        <LangVersion>7.2</LangVersion>\n    </PropertyGroup>\n\n    <PropertyGroup>\n        <AvaloniaVersion>0.10.13</AvaloniaVersion>\n        <AvaloniaEditVersion>0.10.12.2</AvaloniaEditVersion>\n    </PropertyGroup>\n\n</Project>\n"
        },
        {
          "name": "Directory.Build.targets",
          "type": "blob",
          "size": 0.302734375,
          "content": "<Project>\n\n    <ItemGroup>\n        <PackageReference Update=\"Avalonia\" Version=\"$(AvaloniaVersion)\" />\n        <PackageReference Update=\"Avalonia.Controls.DataGrid\" Version=\"$(AvaloniaVersion)\" />\n        <PackageReference Update=\"Avalonia.Desktop\" Version=\"$(AvaloniaVersion)\" />\n    </ItemGroup>\n\n</Project>\n"
        },
        {
          "name": "ICSharpCode.Decompiler.PdbProvider.Cecil",
          "type": "tree",
          "content": null
        },
        {
          "name": "ICSharpCode.Decompiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "ILSpy.Core",
          "type": "tree",
          "content": null
        },
        {
          "name": "ILSpy.sln",
          "type": "blob",
          "size": 3.6259765625,
          "content": "ï»¿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio 15\nVisualStudioVersion = 15.0.27130.2026\nMinimumVisualStudioVersion = 15.0\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"doc\", \"doc\", \"{F45DB999-7E72-4000-B5AD-3A7B485A0896}\"\n\tProjectSection(SolutionItems) = preProject\n\t\tdoc\\Command Line.txt = doc\\Command Line.txt\n\t\tdoc\\ILAst.txt = doc\\ILAst.txt\n\t\tdoc\\IntPtr.txt = doc\\IntPtr.txt\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"SharpTreeView\", \"SharpTreeView\\SharpTreeView.csproj\", \"{0A3DA152-0729-4540-973C-11583009520F}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ILSpy.Core\", \"ILSpy.Core\\ILSpy.Core.csproj\", \"{7BB39313-8FC6-40A4-A06F-FD2A10817256}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"TestPlugin\", \"TestPlugin\\TestPlugin.csproj\", \"{5C561A81-4427-418A-B773-3840D2B32C4D}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ILSpy\", \"ILSpy\\ILSpy.csproj\", \"{3AAA340D-7BED-4B26-BDD3-992D8B6D7779}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ICSharpCode.Decompiler.PdbProvider.Cecil\", \"ICSharpCode.Decompiler.PdbProvider.Cecil\\ICSharpCode.Decompiler.PdbProvider.Cecil.csproj\", \"{1B68749F-8434-4788-B5E5-781A1AF75595}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{0A3DA152-0729-4540-973C-11583009520F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{0A3DA152-0729-4540-973C-11583009520F}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{0A3DA152-0729-4540-973C-11583009520F}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{0A3DA152-0729-4540-973C-11583009520F}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{7BB39313-8FC6-40A4-A06F-FD2A10817256}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{7BB39313-8FC6-40A4-A06F-FD2A10817256}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{7BB39313-8FC6-40A4-A06F-FD2A10817256}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{7BB39313-8FC6-40A4-A06F-FD2A10817256}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{CC3151F6-C080-4E17-9F50-58C3FED64F28}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{CC3151F6-C080-4E17-9F50-58C3FED64F28}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{CC3151F6-C080-4E17-9F50-58C3FED64F28}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{CC3151F6-C080-4E17-9F50-58C3FED64F28}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{5C561A81-4427-418A-B773-3840D2B32C4D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{5C561A81-4427-418A-B773-3840D2B32C4D}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{5C561A81-4427-418A-B773-3840D2B32C4D}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{5C561A81-4427-418A-B773-3840D2B32C4D}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{3AAA340D-7BED-4B26-BDD3-992D8B6D7779}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{3AAA340D-7BED-4B26-BDD3-992D8B6D7779}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{3AAA340D-7BED-4B26-BDD3-992D8B6D7779}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{3AAA340D-7BED-4B26-BDD3-992D8B6D7779}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{1B68749F-8434-4788-B5E5-781A1AF75595}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{1B68749F-8434-4788-B5E5-781A1AF75595}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{1B68749F-8434-4788-B5E5-781A1AF75595}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{1B68749F-8434-4788-B5E5-781A1AF75595}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {C764218F-7633-4412-923D-558CE7EE0560}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "ILSpy",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.9697265625,
          "content": "# AvaloniaILSpy ![Build AvaloniaILSpy](https://github.com/icsharpcode/AvaloniaILSpy/workflows/Build%20AvaloniaILSpy/badge.svg?branch=master)\n\nThis is cross-platform version of [ILSpy](https://github.com/icsharpcode/ILSpy) built with [Avalonia](https://github.com/AvaloniaUI/Avalonia).\n\n![](https://github.com/icsharpcode/AvaloniaILSpy/raw/master/preview.png)\n\nSupported Features \n-------\n * Decompilation\n * Analyze Window\n * Search for types/methods/properties (substring)\n * Hyperlink-based type/method/property navigation\n * Extensible via MEF Extensibility (Check out TestPlugin folder). Note: This is not compatible with ILSpy Plugins.\n * Check out [feature support status](https://github.com/icsharpcode/AvaloniaILSpy/issues/1)\n\n# Download\n\n## Stable Release\n\nhttps://github.com/icsharpcode/AvaloniaILSpy/releases\n\n## Bleeding-edge Builds\nGrab artifacts from the [latest master CI build](https://github.com/icsharpcode/AvaloniaILSpy/actions?query=workflow%3A%22Build+AvaloniaILSpy%22+branch%3Amaster+is%3Asuccess).\nThis includes Linux, Mac and Windows.\n\nHow to run on Linux: \n- just open it\n- if you have trouble, please try to grant it the rights to execute `chmod a+x ILSpy`\n- you could also run it in command line by `./ILSpy`\n\nHow to run on Mac:\n- just move the app into `/Applications` folder and open it\n- run `xattr -rd com.apple.quarantine /Applications/ILSpy.app`\n- if you see `âILSpyâ cannot be opened because the developer cannot be verified.`, please open up `System Preferences` -> `Security & Privacy` -> `General` -> `Open Anyway` \n- if you see the error `The application ILSpy can't be opened' error on launch`, you could `chmod +x \"/Applications/ILSpy.app/Contents/MacOS/ILSpy\"`\n\n# Build from sources\n\n1. Install dotnet 6 or above from https://dotnet.microsoft.com/en-us/download/dotnet\n2. Clone repository : `git clone https://github.com/icsharpcode/AvaloniaILSpy.git`.\n3. Run build script: `dotnet tool restore` and `dotnet cake`\n4. Artifacts will be located in subdirectory `artifacts`.\n"
        },
        {
          "name": "SharpTreeView",
          "type": "tree",
          "content": null
        },
        {
          "name": "TestPlugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.cake",
          "type": "blob",
          "size": 3.5615234375,
          "content": "var target = Argument(\"target\", \"Default\");\nvar platform = Argument(\"platform\", \"AnyCPU\");\nvar configuration = Argument(\"configuration\", \"Release\");\n\nvar artifactsDir = (DirectoryPath)Directory(\"./artifacts\");\nvar zipRootDir = artifactsDir.Combine(\"zips\");\n\nvar fileZipSuffix = \".zip\";\n\nvar netCoreAppsRoot= \".\";\nvar netCoreApp = \"ILSpy\";\n\nvar buildDirs = \n    GetDirectories($\"{netCoreAppsRoot}/**/bin/**\") + \n    GetDirectories($\"{netCoreAppsRoot}/**/obj/**\") + \n    GetDirectories($\"{netCoreAppsRoot}/artifacts/*\");\n\nvar netCoreProject = new {\n        Path = $\"{netCoreAppsRoot}/{netCoreApp}\",\n        Name = netCoreApp,\n        Framework = XmlPeek($\"{netCoreAppsRoot}/{netCoreApp}/{netCoreApp}.csproj\", \"//*[local-name()='TargetFramework']/text()\"),\n        Runtimes = XmlPeek($\"{netCoreAppsRoot}/{netCoreApp}/{netCoreApp}.csproj\", \"//*[local-name()='RuntimeIdentifiers']/text()\").Split(';')\n    };\n\n\n Task(\"Clean\")\n .Does(()=>{\n     CleanDirectories(buildDirs);\n });\n\n Task(\"Restore-NetCore\")\n     .IsDependentOn(\"Clean\")\n     .Does(() =>\n {\n    DotNetRestore(netCoreProject.Path);\n });\n\n Task(\"Build-NetCore\")\n     .IsDependentOn(\"Restore-NetCore\")\n     .Does(() =>\n {\n    Information(\"Building: {0}\", netCoreProject.Name);\n    DotNetBuild(netCoreProject.Path, new DotNetBuildSettings {\n        Configuration = configuration\n    });\n });\n\n Task(\"Publish-NetCore\")\n     .IsDependentOn(\"Restore-NetCore\")\n     .Does(() =>\n {\n    foreach(var runtime in netCoreProject.Runtimes)\n    {\n        var outputDir = artifactsDir.Combine(runtime);\n\n        Information(\"Publishing: {0}, runtime: {1}\", netCoreProject.Name, runtime);\n        DotNetPublish(netCoreProject.Path, new DotNetPublishSettings {\n            Framework = netCoreProject.Framework,\n            Configuration = configuration,\n            Runtime = runtime,\n            SelfContained = true,\n            OutputDirectory = outputDir.FullPath\n        });\n    }\n });\n\n\n Task(\"Package-Mac\")\n     .IsDependentOn(\"Publish-NetCore\")\n     .Does(() =>\n {\n    var runtimeIdentifiers = netCoreProject.Runtimes.Where(r => r.StartsWith(\"osx\"));\n    foreach(var runtime in runtimeIdentifiers)\n    {\n        var workingDir = artifactsDir.Combine(runtime);\n        var tempDir = artifactsDir.Combine(\"app\");\n\n        Information(\"Copying Info.plist\");\n        EnsureDirectoryExists(tempDir.Combine(\"Contents\"));\n        MoveFiles(workingDir.Combine(\"Info.plist\").FullPath, tempDir.Combine(\"Contents\"));\n\n        Information(\"Copying App Icons\");\n        EnsureDirectoryExists(tempDir.Combine(\"Contents/Resources\"));\n        MoveFiles(workingDir.Combine(\"ILSpy.icns\").FullPath, tempDir.Combine(\"Contents/Resources\"));\n\n        Information(\"Copying executables\");\n        MoveDirectory(workingDir, tempDir.Combine(\"Contents/MacOS\"));\n\n        Information(\"Finish packaging\");\n        EnsureDirectoryExists(workingDir);\n        MoveDirectory(tempDir, workingDir.Combine($\"{netCoreProject.Name}.app\"));\n    }\n });\n\n /* Task(\"Zip-NetCore\")\n     .IsDependentOn(\"Publish-NetCore\")\n     .IsDependentOn(\"Package-Mac\")\n     .Does(() =>\n {\n    EnsureDirectoryExists(zipRootDir);\n    foreach(var runtime in netCoreProject.Runtimes)\n    {\n        var workingDir = artifactsDir.Combine(runtime);\n        Information(\"Zipping {0} artifacts to {1}\", runtime, zipRootDir);\n        Zip(workingDir.FullPath, zipRootDir.CombineWithFilePath(netCoreProject.Name + \"-\" + runtime + \"-\" + configuration + fileZipSuffix));\n    }\n }); */\n\n Task(\"Default\")\n     .IsDependentOn(\"Restore-NetCore\")\n     .IsDependentOn(\"Publish-NetCore\")\n\t .IsDependentOn(\"Package-Mac\")\n     /*.IsDependentOn(\"Zip-NetCore\")*/;\n\n RunTarget(target);"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.09765625,
          "content": "{\n  \"sdk\": {\n    \"version\": \"6.0.200\",\n    \"rollForward\": \"major\",\n    \"allowPrerelease\": true\n  }\n}"
        },
        {
          "name": "nuget.config",
          "type": "blob",
          "size": 0.3349609375,
          "content": "ï»¿<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <clear/>\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\n    <add key=\"dotnet-tools\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json\" />\n  </packageSources>\n</configuration>\n"
        },
        {
          "name": "preview.png",
          "type": "blob",
          "size": 728.015625,
          "content": null
        },
        {
          "name": "updates.xml",
          "type": "blob",
          "size": 0.2470703125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<updateInfo>\n    <band id=\"alpha\">\n        <latestVersion>4.0.0.1</latestVersion>\n        <downloadUrl>\n        https://github.com/icsharpcode/AvaloniaILSpy/releases\n        </downloadUrl>\n    </band>\n</updateInfo>"
        }
      ]
    }
  ]
}