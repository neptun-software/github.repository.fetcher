{
  "metadata": {
    "timestamp": 1736710870475,
    "page": 426,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "FlaUI/FlaUI",
      "stars": 2330,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1171875,
          "content": "[*.cs]\n# CS1591: Missing XML comment for publicly visible type or member\ndotnet_diagnostic.CS1591.severity = suggestion\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.9853515625,
          "content": "# Logs\nBuildLog.txt\nBuildLogSigned.txt\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Visual Studio cache/options directory\n.vs/\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\nUIA2TestResult.xml\nUnitTestResult.xml\nUIA3TestResult.xml\nInternalTrace.*.log\nnunit-agent_*.log\n\n# Artifacts\nartifacts/\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n\n# Windows Store app package directory\nAppPackages/\nBundleArtifacts/\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Cake\n.cake/*\n\n.nugetapikey\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 13.5322265625,
          "content": "# Changelog\n\n## 5.0.0 (2024-12-08)\n### Breaking changes\n  * Removed support for .NET Standard, .NET Core 3.1, .NET 5\n\n### Enhancements\n  * Added support for .NET 8\n  * Updated Dependencies\n  * Add screenshot to testresult for XML report (thanks @igorrecioh)\n  * Add delay after pressing keyboard modifiers (thanks @louislefevre)\n  * Added new flag to define usage of screenshots (thanks Igor Recio)\n  * Added nullable annotations (thanks @jonasdoerr)\n\n### Bug fixes\n  * Fixed very large combo boxes (thanks @tomersalem)\n\n\n## 4.0.0 (2022-09-24)\n### Breaking changes\n  * Removed support for .NET Framework below 4.8\n\n### Enhancements\n  * Added Support for .NET 5.0 and 6.0\n  * Allow to skip logging missing frames info\n  * Added support for some more properties in XPath\n  * Added MixedAttributeValue\n  * Made TryGetClickablePoint more resilend and added a Fallback to BoundingRectangle.Center\n  * Extended ConditionFactory (thanks @bence-nagy)\n\n### Bug fixes\n  * Fix mistype in RightDoubleClick mouse method (thanks @kungfux)\n  * Fixed Bug Alt+Tab in OverlayForm (thanks @erimeurer)\n\n## 3.2.0 (2020-07-16)\n### Breaking changes\n  * None\n\n### Enhancements\n  * Add params on Process.Start (thanks @brunofmeurer)\n  * Added .NET Core 3.1 Target Framework (thanks @torepaulsson)\n\n### Bug fixes\n  * Fixed GID Handle leak (thanks @ChrisZhang95)\n  * Fixed .NET Core issue were the MainWindowHandle is not refreshed (thanks @torepaulsson)\n\n## 3.1.0 (2020-05-19)\n### Breaking changes\n  * None\n\n### Enhancements\n  * Added ByFrameworkType condition\n  * Allow xpath to find unknown types by mapping them to custom\n  * Added support for Qt framework type\n  * Added support for WinForms spinner (thanks @ddeltasolutions)\n  * Added Capture.ScreensWithElement\n  * Added customization of InfoOverlay font (thanks @petrsapak)\n  * Added calendar support (thanks @ddeltasolutions)\n  * Added date time picker support (thanks @ddeltasolutions)\n  * Added support for large lists (thanks @ddeltasolutions)\n  * Added application CloseTimeout and killIfCloseFails flag\n  * Made the mouse movement speeds settable\n\n### Bug fixes\n  * Fixed null error in FrameworkId\n  * Fix moving the mouse by 0 distance\n  * Fixed search by AccessibilityRole\n\n## 3.0.0 (2019-12-09)\n### Introduction\nThis release combines all changes from the 2.x pre-release versions and also new features.\nThe main feature is the .NET Core/.NET Standard compatibility for FlaUI.Core and FlaUI.UIA3.\n\n### Breaking changes\n  * Renamed BasicAutomationElementBase to FrameworkAutomationElementBase\n  * Consistent naming for the *Id interfaces/classes (eg. IDockPatternProperties to IDockPatternPropertyIds)\n  * Reworked events\n  * The `Find...` methods not do not use Retry anymore, the developer himself needs to decide if he wants to use a retry or not.\n  * Moved DrawHighlight to extension methods so that they are fluent and can be made null-safe.\n  * Reworked Retry\n    * New flag: throwOnTimeout - Defines if Retry should throw when the timeout is reached.\n    * New flag: ignoreException - Defines if Retry should continue in case of an exception.\n    * New flag: lastValueOnTimeout - Defines if Retry should return the last successful value when it gets to a timeout.\n    * New flag: defaultOnTimeout - Defines if Retry should return the default value on a timeout.\n    * New Property: timeoutMessage - Allows adding a custom message when a timeout occurs when retrying.\n    * Renamed Retry.While to Retry.WhileTrue\n    * Added new Retry methods: WhileNull, WhileNotNull, WhileEmpty, Retry.WhileFalse\n    * Added a `RetryResult` object that is returned on the `Retry` methods which contains information about the execution of the current `Retry`\n    * Added tests\n  * Moved AutomationElement one up in the namespace tree\n  * Made the `As` methods extension methods again\n  * Removed custom Point/Rectangle and use the one from System.Drawing\n  * Moved `Capture` into the `Capturing` namespace\n  * All `FindIndexed` are consistently renamed to `FindAt`\n  * Renamed `Retry.Interval` to `Retry.DefaultInterval`\n  * Renamed `Retry.Timeout` to `Retry.DefaultTimeout`\n\n### Enhancements\n  * .NET Core and Standard compatibility\n  * Added capture overlays (mouse and info bar)\n  * Added a video recorder (see [Capturing](https://github.com/Roemer/FlaUI/wiki/Capturing))\n  * Updated the interop dlls\n  * Added missing features from .NET 4.7.1 in UIA2\n  * Added missing features from newer interop in UIA3\n    * Transaction- and ConnectionTimeout\n    * Selection2 pattern\n    * New text attributes\n    * New automation properties (CenterPoint, FillColor, ... see f2b444ef7d422344b63a187151112b77ca3299f5 for more)\n    * FindWithOptions\n    * New events\n    * UIA3TextRange3\n    * ConnectionRecoveryBehaviorOptions and CoalesceEventsOptions\n    * MatchSubstring for property searching\n  * Code cleanups\n  * Added generic `AsType`\n  * Use `UtcNow` instead of `Now` for `Retry`\n  * `Wait.UntilInputIsProcessed` now has an optional timespan parameter\n  * Reworked `OperationSystems` a bit\n  * Retry, WaitWhileBusy, WaitWhilemainHandleIsMissing return a bool now to indicate success or failure\n  * Capture does not focus the element anymore before capturing as this could have side effects\n  * Added missing events\n  * Added TextRange3\n  * Made log levels configurable, added a logger where you can notify for logging events, added an NUnitProgressLogger which logs in real time to the nunit console\n  * Added WaitUntilClickable and WaitUntilEnabled\n  * Default value for ControlType (thanks to @lukasvogel)\n  * Implemented mouse drag from point to point\n  * Added a condition to search by a Framework Id (thanks to @SSHenninger)\n  * Added `AnimationDuration` to `ComboBox`\n  * Added a timeout message to `Retry`\n  * Added `TextAttributeLibrary`\n  * Added `Retry.Search` methods\n  * Added `IsAvailable` property\n  * Added `.As<T>` method\n  * Enhanced `DataGrid` support for WPF (thanks @sparerd)\n  * More documentation\n  * Added various fallbacks to Win32 methods when UIA fails (thanks @ddeltasolutions)\n  * Added Touch input support\n  * Exposed MovePixelsPerMillisecond and MovePixelsPerStep in Mouse\n  * Added IsChecked property for menu item (thanks @ddeltasolutions)\n\n### Bug fixes\n  * Added some sleeps to the mouse drag\n  * Made xpath searching more robust (thanks to @lukasvogel)\n  * Correctly use collapse in the expand pattern\n  * Fixed `LabeledBy` property\n  * Fixed null exception when getting the mouse cursor\n  * Fixed an issue that the mouse cursor was not set correctly on multi-monitor environments\n\n## 1.3.1 (2017-10-19)\n\n### Bug fixes\n  * Re-added install.ps1 to UIA3 NuGet package\n\n## 1.3.0 (2017-10-19)\n\n### Breaking changes\n  * Renamed Helpers.WaitXXX to Wait.XXX\n  * Project now only compiles on VS2017.3 or higher\n  * Renamed scrollbars (VScrollBar -> VerticalScrollBar, HScrollBar -> HorizontalScrollBar)\n  * Renamed ScreenCapture to Capture\n  * Renamed ComCallWrapper to Com\n  * Changed child collections from various namings to \".Items\" (eg. in Menus)\n  * Renamed State to ToggleState\n\n### Enhancements\n  * Switched build system to cake build\n  * Various code cleanups and documentation improvements\n  * Added signed versions (as separate nuget packages)\n  * Added some convenience properties to the AutomationElement (IsEnabled, IsOffscreen, ...)\n  * Added HasExited and ExitCode to Application.\n  * Cleaned SystemProductNameFetcher and added support for Server 2016\n  * Added IsSupported to AutomationProperty\n  * Added Parent property\n  * Added BoundingRectangle,ActualWidth,ActualHeight,ItemStatus and HelpText to AutomationElement\n  * Implemented FindAt / FindIndexed\n  * Added ByValue condition\n  * Added IsReadOnly to ComboBox\n  * Implemented ToggleButton\n  * Implemented ListBox and ListBoxItem\n  *  Added IsToggled to ToggleAutomationElement, added IsChecked to ChechBox\n  * Added DataGridView\n  * Reworked the Capture class\n\n### Bug fixes\n  * Correctly handle manually pressed modifiers when using Keyboard.Type\n  * Added missing property in RegisterPropertyChangedEvent\n  * Fixed finding the ScrollBars\n  * Fixed typo in IPropertyLibrary\n\n## 1.2.0 (2017-05-24)\n\n### Breaking changes\n  * Moved FlaUInspect to its own repository (see https://github.com/FlauTech/FlaUInspect)\n\n### Enhancements\n  * [Core] Added ENTER synonym for RETURN and ESC for ESCAPE\n  * [Core] Made IsWin32Menu property on menu public\n\n## 1.1.0 (2017-04-28)\n\n### Enhancements\n  * [Core] Added Select (index and string) for ComboBox\n  * [Core] Added SelectedItem(s) and Select by cell value to Grid\n  * [Core] Added a FindCellByText to GridRow\n  * [Core] Implemented MenuItems with a string indexer\n  * [Core] Added AutomationElement constructor which is based on another AutomationElement\n  * [Core] Changed loglevel of \"Closing application\" to debug\n  * [Core] Added overload for FindFirstChild and FindFirstDescendant with a string (AutomationId) parameter\n\n### Bug fixes\n  * [Core] Fix for WinForms where ComboBox does not support the SelectionPattern\n  * [Core]Fix when directly setting the text in the combobox in uia2/winforms\n\n## 1.0.0 (2017-04-13)\n\n### Enhancements\n  * [Core] Reworked the keyboard class a bit (e.g. allow simultaneous presses)\n  * [All] More code documentation\n\n### Bug fixes\n  * [All] Fixed almost all ReSharper warnings\n\n## 1.0.0-rc1 (2017-03-23)\n\n### Breaking changes\n  * [UIA3] Used Client interop instead of Core for UIA3\n\n### Enhancements\n  * [Core] Various code cleanups\n  * [UIA3] Wrapped some more calls in ComCallWrapper\n\n### Bug fixes\n  * [Core] Fixed null exception on Window.Close without TitleBar.CloseButton\n  * [All] Fixed .net 4.5 libraries in the packages\n\n## 1.0.0-beta3 (2017-03-14)\n\n### Breaking changes\n  * [Core] Moved As... methods into the AutomationElement\n\n### Enhancements\n  * [Core] Added XMLDoc (also to nuget packages)\n  * [Core] Return true/false if the application closed normally / forcefully\n  * [Core] Reworked timeouts on Application.Wait methods (default to infinite)\n  * [Core] Implemented ComboBoxItem (to correctly get the text for default WPF comboboxes)\n  * [Core] Added AsHScrollBar and AsVScrollBar\n\n## 1.0.0-beta2 (2017-03-13)\n\n### Breaking changes\n  * [Core] WaitWhileBusy and WaitWhileMainHandleIsMissing are now public and to not block endlessly\n\n### Enhancements\n  * [Core] Cleaned the Retry a bit\n  * [Core] Refactored logging (thanks to [jmaxxz](https://github.com/jmaxxz))\n\n### Bug fixes\n  * [Core] Fallback to property for clickable point if GetClickablePoint fails\n  * [Core] Fixed XPath when getting it for an element (eg. in FlaUInspect)\n\n## 1.0.0-beta1 (2017-03-02)\n\n### Breaking changes\n  * [Core] Merged Table into Grid\n  * [All] Properties are now wrapped in an AutomationProperty object which provides Value, ValorOrDefault and TryGetValue\n  * [Al] Patterns are now wrapped in an IAutomationPattern object which provides Pattern, PatternOrDefault, TryGetPattern and IsSupported\n  * [Core] Properties in the PropertyLibrary now do not contain the name \"Property\" anymore\n  * [Core] Renamed .Information to .Properties\n\n### Enhancements\n  * [Inspect] Added Table Patterns support\n  * [Code] Various code cleanups\n  * [Core] Added search by XPath\n  * [All] Implemented caching\n\n## 0.6.2 (2017-02-10)\n\n### Enhancements\n  * [Core] Set move mouse to false by default\n  * [Core] Added NoScroll ScrollPatternConstant for SetScrollPercent\n  * [Inspect] Made supported patterns bold, added more pattern details\n  * [Core] Added GetAllTopLevelWindows to Application\n  \n### Bug fixes\n  * [Core] Fixed AndCondition.ToString\n\n## 0.6.1 (2016-12-15)\n\n### Breaking changes\n  * Made ModalWindows a property\n\n### Enhancements\n  * Walk the parents to get a FrameworkType if no FrameWorkType was found\n  * Added XAML FrameworkType (UWP apps)\n  * Implemented WPF Popup\n  * Fixed single items added multiple times (FlaUInspect)\n  * Added some more pattern information (FlaUInspect)\n\n### Bug fixes\n  * Fixed UIA2 tree walker\n  * Fixed role and state of LegacyIAccessiblePattern\n\n## 0.6.0 (2016-11-11)\n\n### Enhancements\n  * Added .NET 3.5 and 4.0 versions of FlaUI\n\n## 0.5.2 (2016-11-11)\n\n### Enhancements\n  * Added more convenience methods to chain the searching\n  * Added search methods without conditions\n  * Theoretical support for Win32 scrollbars\n\n## 0.5.1 (2016-11-03)\n\n### Enhancements\n  * Added more convenience methods to chain the searching\n\n## 0.5.0 (2016-11-03)\n\n### Breaking changes\n  * Removed made mouse and keyboard static, removed their interfaces\n  * Renamed ListView to Grid\n  * Renamed the retry methods\n\n### Enhancements\n  * Implemented Table\n  * Added caching to TreeWalkers\n\n### Bug fixes\n  * Further reduced the amount of classes created\n\n## 0.4.1 (2016-10-31)\n\n### Enhancements\n  * Implemented all text patterns\n  * Exposed all property, event and textAttrbute ids\n  * Implemented ScrollBars\n  * Changed the OverlayManager to WinForms (faster and needs less memory than the WPF one)\n\n### Bug fixes\n  * Reduced the amount of classes created\n\n## 0.4.0 (2016-10-20)\n\n### Enhancements\n  * Exposed AddToSelection and RemoveFromSelection\n  * Improved the logic for ContextMenu finding (you can manually pass the desired logic)\n  * Implemented ComboBox\n  * Implemented TreeWalkers\n\n### Bug fixes\n  * Fixed a bug with the retry to speed things up quite a bit\n\n## 0.3.4 (2016-10-18)\n\n### Enhancements\n  * Added some convenience methods for searching\n\n### Bug fixes\n  * Tests now run on German Windows\n  * ControlType is now properly reported for UIA2\n  * DoubleClick now does a real double click\n\n## 0.3.3 (2016-10-14)\n\n### Enhancements\n  * Added many more patterns\n  * Implemented ContextMenu on Window\n  * Implemented ListView\n  * Added True-/FalseCondition\n\n### Bug fixes\n  * Fixed UIA3 package to correctly install the interop assembly\n\n## 0.3.2 (2016-10-07)\n\n### Bug fixes\n\n  * Fixed UIA3 package to correctly install the interop assembly\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.6494140625,
          "content": "# How to contribute\nThank you for your interest in improving FlaUI.\n\n## Getting Started\nFlaUI uses the latest version of Visual Studio to build. As build system, cake build is used. To make a full build, the best is to run the cake `Package` task.\n\n## Contributions\nContributions should be made in the form of GitHub pull requests.\nEach pull request will be reviewed by a core contributor and either be merged in the\nmain tree or given feedback for changes that would be required.\n\n## Pull Request Checklist\n- Branch from the master branch and keep your branch updated (by rebasing NOT merging).\n- Keep your commit history clean and squash them together as needed.\n"
        },
        {
          "name": "FlaUI.png",
          "type": "blob",
          "size": 2.349609375,
          "content": null
        },
        {
          "name": "FlaUI.snk",
          "type": "blob",
          "size": 0.58203125,
          "content": null
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0458984375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016-2024\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.0517578125,
          "content": "![Alt text](/FlaUI.png?raw=true \"FlaUI\")\n\n\n### Badges\n| What | Badge |\n| ---- | ----- |\n| *Chat* | [![Join the chat at https://gitter.im/FlaUI/Lobby](https://badges.gitter.im/FlaUI/Lobby.svg)](https://gitter.im/FlaUI/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) |\n| *Build* | [![Build status](https://ci.appveyor.com/api/projects/status/mwd2o329cma50sxe?svg=true)](https://ci.appveyor.com/project/RomanBaeriswyl/flaui) |\n| *Tests* | ![AppVeyor tests](https://img.shields.io/appveyor/tests/RomanBaeriswyl/flaui) |\n| *Libraries (NuGet)* | [![Nuget](https://img.shields.io/nuget/v/FlaUI.Core?label=FlaUI.Core)](https://www.nuget.org/packages/FlaUI.Core) [![Nuget](https://img.shields.io/nuget/v/FlaUI.UIA3?label=FlaUI.UIA3)](https://www.nuget.org/packages/FlaUI.UIA3) [![Nuget](https://img.shields.io/nuget/v/FlaUI.UIA2?label=FlaUI.UIA2)](https://www.nuget.org/packages/FlaUI.UIA2) |\n| *CI Artefacts* | [FlaUI CI](https://ci.appveyor.com/project/RomanBaeriswyl/flaui/build/artifacts) |\n\n### Introduction\nFlaUI is a .NET library which helps with automated UI testing of Windows applications (Win32, WinForms, WPF, Store Apps, ...).<br />\nIt is based on native UI Automation libraries from Microsoft and therefore kind of a wrapper around them.<br />\nFlaUI wraps almost everything from the UI Automation libraries but also provides the native objects in case someone has a special need which is not covered (yet) by FlaUI.<br />\nSome ideas are copied from the UIAComWrapper project or TestStack.White but rewritten from scratch to have a clean codebase.\n\n### Sponsoring\nIf you appreciate my work, feel free to support me by [sponsoring on github](https://github.com/sponsors/Roemer) or with a one-time payment [over at PayPal](https://paypal.me/rbaeriswyl).\n\n### Why another library?\nThere are quite some automation solutions out there. Commercial ones like TestComplete, Ranorex, CodedUI just to name a few. And also free ones which are mainly TestStack.White.<br />\nAll of them are based on what Microsoft provides. These are the UI Automation libraries. There are three versions of it:\n- MSAA\n  - MSAA is very obsolete and we'll skip this here (some like CodedUI still use it)\n- UIA2: Managed Library for native UI Automation API\n  - UIA2 is managed only, which would be good for C# but it does not support newer features (like touch) and it also does not work well with WPF or even worse with Windows Store Apps.\n- UIA3: Com Library for native UI Automation API\n  - UIA3 is the newest of them all and works great for WPF / Windows Store Apps but unfortunately, it can have some bugs with WinForms applications (see [FAQ](https://github.com/FlaUI/FlaUI/wiki/FAQ)) which are not existent in UIA2.\n\nSo, the commercial solutions are mostly based on multiple of those and/or implement a lot of workaround code to fix those issues.\nTestStack.White has two versions, one for UIA2 and one for UIA3 but because of the old codebase, it's fairly hard to bring UIA3 to work. For this, it also uses an additional library, the UIAComWrapper which uses the same naming as the managed UIA2 and wraps the UIA3 com interop with them (one more source for errors).\nFlaUI now tries to provide an interface for UIA2 and UIA3 where the developer can choose, which version he wants to use. It should also provide a very clean and modern codebase so that collaboration and further development is as easy as possible.\n\n### Usage\n##### Installation\nTo use FlaUI, you need to reference the appropriate assemblies. So you should decide, if you want to use UIA2 or UIA3 and install the appropriate library from NuGet. You can of course always download the source and compile it yourself.\n##### Usage in Code\nThe entry point is usually an application or the desktop so you get an automation element (like a the main window of the application).\nOn this, you can then search sub-elements and interact with them.\nThere is a helper class to launch, attach or close applications.\nSince the application is not related to any UIA library, you need to create the automation you want and use it to get your first element, which then is your entry point.\n```csharp\nusing FlaUI.UIA3;\n\nvar app = FlaUI.Core.Application.Launch(\"notepad.exe\");\nusing (var automation = new UIA3Automation())\n{\n\tvar window = app.GetMainWindow(automation);\n\tConsole.WriteLine(window.Title);\n\t...\n}\n```\n```csharp\nusing FlaUI.Core.AutomationElements;\nusing FlaUI.UIA3;\n\n// Note: Works only pre-Windows 8 with the legacy calculator\nvar app = FlaUI.Core.Application.Launch(\"calc.exe\");\nusing (var automation = new UIA3Automation())\n{\n\tvar window = app.GetMainWindow(automation);\n\tvar button1 = window.FindFirstDescendant(cf => cf.ByText(\"1\"))?.AsButton();\n\tbutton1?.Invoke();\n\t...\n}\n```\n\n### Further Resources\n#### YouTube Tutorials\nHave a look at [H Y R Tutorials](https://www.youtube.com/playlist?list=PLacgMXFs7kl_fuSSe6lp6YRaeAp6vqra9). This channel provides some videos to get you started with FlaUI.\n#### FlaUI UITests\nFlaUI itself contains quite some UI tests itself. Browse to the code of them [here](https://github.com/FlaUI/FlaUI/tree/master/src/FlaUI.Core.UITests) and look how they work.\n#### Chat\nHead over to the [chat](https://gitter.im/FlaUI/Lobby) to ask your specific questions.\n\n### Contribution\nFeel free to fork FlaUI and send pull requests of your modifications.<br />\nYou can also create issues if you find problems or have ideas on how to further improve FlaUI.\n\n### Donors and Sponsors\n- Thank you Gehtsoft USA LLC for the generous donation\n\n### Acknowledgements\n#### JetBrains\nThanks to [JetBrains](https://www.jetbrains.com) for providing a free license of [ReSharper](https://www.jetbrains.com/resharper/).\n#### AppVeyor\nThanks to [AppVeyor](https://www.appveyor.com) for providing a free CI [build system for FlaUI](https://ci.appveyor.com/project/RomanBaeriswyl/flaui).\n#### TestStack.White\nThanks to the creators and maintainers (especially to [@JakeGinnivan](https://github.com/JakeGinnivan) and [@petmongrels](https://github.com/petmongrels)) for their work and inspiration for this project.\n#### Microsoft\nThanks to Microsoft for providing great tools which made developing this project possible.\n"
        },
        {
          "name": "VERIFICATION.txt",
          "type": "blob",
          "size": 0.2734375,
          "content": "﻿VERIFICATION\nVerification is intended to assist the Chocolatey moderators and community\nin verifying that this package's contents are trustworthy.\n \nThe binaries can be downloaded from https://github.com/FlaUI/FlaUI/releases and compared with the ones included in this package."
        },
        {
          "name": "build.cake",
          "type": "blob",
          "size": 6.4599609375,
          "content": "#tool nuget:?package=NuGet.CommandLine&version=6.11.1\n#tool nuget:?package=NUnit.ConsoleRunner&version=3.18.3\n\n//////////////////////////////////////////////////////////////////////\n// ARGUMENTS\n//////////////////////////////////////////////////////////////////////\n\nvar target = Argument(\"target\", \"Default\");\nvar configuration = Argument(\"configuration\", \"Release\");\n\n//////////////////////////////////////////////////////////////////////\n// PREPARATION\n//////////////////////////////////////////////////////////////////////\n\nvar slnFile = @\"src\\FlaUI.sln\";\nvar artifactDir = new DirectoryPath(\"artifacts\");\n\n//////////////////////////////////////////////////////////////////////\n// TASKS\n//////////////////////////////////////////////////////////////////////\n\nTask(\"Clean\")\n    .Does(() =>\n{\n    CleanDirectory(artifactDir);\n});\n\nTask(\"Restore-NuGet-Packages\")\n    .IsDependentOn(\"Clean\")\n    .Does(() =>\n{\n    NuGetRestore(slnFile);\n});\n\nTask(\"Build\")\n    .IsDependentOn(\"Restore-NuGet-Packages\")\n    .Does(() =>\n{\n    var buildLogFile = artifactDir.CombineWithFilePath(\"BuildLog.txt\");\n    var buildSettings = new MSBuildSettings {\n        Verbosity = Verbosity.Minimal,\n        ToolVersion = MSBuildToolVersion.VS2022,\n        Configuration = configuration,\n        PlatformTarget = PlatformTarget.MSIL,\n    }.AddFileLogger(new MSBuildFileLogger {\n        LogFile = buildLogFile.ToString(),\n        MSBuildFileLoggerOutput = MSBuildFileLoggerOutput.All\n    });\n    // Hide informational warnings for now\n    buildSettings.Properties.Add(\"WarningLevel\", new[] { \"3\" });\n    // Force restoring\n    buildSettings.Properties.Add(\"RestoreForce\", new[] { \"true\" });\n\n    // First build with default settings\n    buildSettings.Targets.Clear();\n    buildSettings.WithTarget(\"Restore\");\n    MSBuild(slnFile, buildSettings);\n    buildSettings.Targets.Clear();\n    buildSettings.WithTarget(\"Build\");\n    MSBuild(slnFile, buildSettings);\n\n    // Second build with signing enabled\n    var buildLogSignedFile = artifactDir.CombineWithFilePath(\"BuildLogSigned.txt\");\n    buildSettings.FileLoggers.First().LogFile = buildLogSignedFile.ToString();\n    buildSettings.Properties.Add(\"EnableSigning\", new[] { \"true\" });\n    buildSettings.Targets.Clear();\n    buildSettings.WithTarget(\"Restore\");\n    MSBuild(slnFile, buildSettings);\n    buildSettings.Targets.Clear();\n    buildSettings.WithTarget(\"Build\");\n    MSBuild(slnFile, buildSettings);\n\n    // Zip the logs\n    Zip(artifactDir, artifactDir.CombineWithFilePath(\"BuildLog.zip\"), new [] { buildLogFile, buildLogSignedFile });\n});\n\nTask(\"Run-Unit-Tests\")\n    .IsDependentOn(\"Build\")\n    .Does(() =>\n{\n    var resultFile = artifactDir.CombineWithFilePath(\"UnitTestResult.xml\");\n    NUnit3(@\"src\\FlaUI.Core.UnitTests\\bin\\FlaUI.Core.UnitTests.dll\", new NUnit3Settings {\n        Results = new[] {\n            new NUnit3Result { FileName = resultFile, Format = \"nunit3\" }\n        }\n    });\n    if (AppVeyor.IsRunningOnAppVeyor) {\n        AppVeyor.UploadTestResults(resultFile, AppVeyorTestResultsType.NUnit3);\n    }\n});\n\nTask(\"Run-UI-Tests\")\n    .IsDependentOn(\"Build\")\n    .Does(() =>\n{\n    var resultFile = artifactDir.CombineWithFilePath(\"UIA2TestResult.xml\");\n    var uia2ExitCode = 0;\n    NUnit3(@\"src\\FlaUI.Core.UITests\\bin\\FlaUI.Core.UITests.dll\", new NUnit3Settings {\n        Results = new[] {\n            new NUnit3Result { FileName = resultFile, Format = \"nunit3\" }\n        },\n        ArgumentCustomization = args => args.Append(\"--testparam:uia=2\"),\n        HandleExitCode = exitCode => { uia2ExitCode = exitCode; return true; }\n    });\n    Information(\"Finished UIA2 Tests\");\n    if (AppVeyor.IsRunningOnAppVeyor) {\n        AppVeyor.UploadTestResults(resultFile, AppVeyorTestResultsType.NUnit3);\n    }\n\n    resultFile = artifactDir.CombineWithFilePath(\"UIA3TestResult.xml\");\n    var uia3ExitCode = 0;\n    NUnit3(@\"src\\FlaUI.Core.UITests\\bin\\FlaUI.Core.UITests.dll\", new NUnit3Settings {\n        Results = new[] {\n            new NUnit3Result { FileName = resultFile, Format = \"nunit3\" }\n        },\n        ArgumentCustomization = args => args.Append(\"--testparam:uia=3\"),\n        HandleExitCode = exitCode => { uia3ExitCode = exitCode; return true; }\n    });\n    Information(\"Finished UIA3 Tests\");\n    if (AppVeyor.IsRunningOnAppVeyor) {\n        AppVeyor.UploadTestResults(resultFile, AppVeyorTestResultsType.NUnit3);\n    }\n\n    // Error if any tests failed\n    if (uia2ExitCode != 0 || uia3ExitCode != 0) {\n        throw new Exception(\"Some tests failed, aborting\");\n    }\n});\n\nTask(\"Run-Tests\")\n    .IsDependentOn(\"Run-Unit-Tests\")\n    .IsDependentOn(\"Run-UI-Tests\")\n    .Does(() =>\n{\n});\n\nTask(\"Package\")\n    .IsDependentOn(\"Run-Tests\")\n    .Does(() =>\n{\n    // Upload the artifacts to appveyor\n    if (AppVeyor.IsRunningOnAppVeyor) {\n        // Add the nuget packages\n        foreach(var file in GetFiles(artifactDir.ToString() + \"/*.nupkg\"))\n        {\n            AppVeyor.UploadArtifact(file);\n        }\n        // Add the test xml files\n        foreach(var file in GetFiles(artifactDir.ToString() + \"/*.xml\"))\n        {\n            AppVeyor.UploadArtifact(file);\n        }\n        // Add zip files\n        foreach(var file in GetFiles(artifactDir.ToString() + \"/*.zip\"))\n        {\n            AppVeyor.UploadArtifact(file);\n        }\n    }\n});\n\nTask(\"Push-To-Nuget\")\n    .Does(() =>\n{\n    var apiKey = System.IO.File.ReadAllText(\".nugetapikey\");\n\n    // Get the paths to the packages\n    var packages = GetFiles($\"{artifactDir}/*.nupkg\");\n\n    // Push the packages\n    foreach (var package in packages) {\n        Information($\"Pushing {package}\");\n        NuGetPush(package, new NuGetPushSettings {\n            Source = \"https://nuget.org/api/v2/package\",\n            ApiKey = apiKey\n        });\n    }\n});\n\n Task(\"Push-To-SymbolSource\")\n    .Does(() =>\n{\n    var apiKey = System.IO.File.ReadAllText(\".nugetapikey\");\n\n    // Get the paths to the packages\n    var packages = GetFiles($\"{artifactDir}/*.snupkg\");\n\n    // Push the packages\n    foreach (var package in packages) {\n        Information($\"Pushing {package}\");\n        NuGetPush(package, new NuGetPushSettings {\n            Source = \"https://nuget.smbsrc.net\",\n            ApiKey = apiKey\n        });\n    }\n });\n\n//////////////////////////////////////////////////////////////////////\n// TASK TARGETS\n//////////////////////////////////////////////////////////////////////\n\nTask(\"Default\")\n    .IsDependentOn(\"Run-Unit-Tests\");\n\n//////////////////////////////////////////////////////////////////////\n// EXECUTION\n//////////////////////////////////////////////////////////////////////\n\nRunTarget(target);\n"
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 0.3115234375,
          "content": "$ErrorActionPreference = 'Stop'\n\nSet-Location -LiteralPath $PSScriptRoot\n\n$env:DOTNET_SKIP_FIRST_TIME_EXPERIENCE = '1'\n$env:DOTNET_CLI_TELEMETRY_OPTOUT = '1'\n$env:DOTNET_NOLOGO = '1'\n\ndotnet tool restore\nif ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }\n\ndotnet cake @args\nif ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }\n"
        },
        {
          "name": "cake.config",
          "type": "blob",
          "size": 0.318359375,
          "content": "; This is the default configuration file for Cake.\n; This file was downloaded from https://github.com/cake-build/resources\n\n[Nuget]\nSource=https://api.nuget.org/v3/index.json\nUseInProcessClient=true\nLoadDependencies=false\n\n[Paths]\nTools=./.cake\nAddins=./.cake/Addins\nModules=./.cake/Modules\n\n[Settings]\nSkipVerification=false\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}