{
  "metadata": {
    "timestamp": 1736710732144,
    "page": 143,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mcintyre321/OneOf",
      "stars": 3583,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2138671875,
          "content": "bin/debug*.dll\nbin/release*.dll\nobj\nbin/\ndeploy\ndeploy/*\n_ReSharper.*\n*.csproj.user\n*.resharper.user\n*.ReSharper.user\n*.resharper\n*.suo\n*.cache\n~$*\n*.suo\npackages/*\n/packages\n/*.user\n.vs\n*.user\nproject.lock.json\n.idea/\n"
        },
        {
          "name": "Generator",
          "type": "tree",
          "content": null
        },
        {
          "name": "OneOf.Extended",
          "type": "tree",
          "content": null
        },
        {
          "name": "OneOf.FSharp",
          "type": "tree",
          "content": null
        },
        {
          "name": "OneOf.SourceGenerator.AnalyzerTests",
          "type": "tree",
          "content": null
        },
        {
          "name": "OneOf.SourceGenerator.Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "OneOf.SourceGenerator",
          "type": "tree",
          "content": null
        },
        {
          "name": "OneOf.Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "OneOf.sln",
          "type": "blob",
          "size": 4.6572265625,
          "content": "ï»¿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.3.32611.2\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"OneOf.Tests\", \"OneOf.Tests\\OneOf.Tests.csproj\", \"{82023ED0-3E20-43CF-ACA1-1EA547E70903}\"\n\tProjectSection(ProjectDependencies) = postProject\n\t\t{21D0DD1E-D38A-4A76-B2B3-4CEF11B2C6CB} = {21D0DD1E-D38A-4A76-B2B3-4CEF11B2C6CB}\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"OneOf\", \"OneOf\\OneOf.csproj\", \"{21D0DD1E-D38A-4A76-B2B3-4CEF11B2C6CB}\"\nEndProject\nProject(\"{6EC3EE1D-3C4E-46DD-8F32-0CC8E7565705}\") = \"OneOf.FSharp\", \"OneOf.FSharp\\OneOf.FSharp.fsproj\", \"{26D54D37-8692-4E2A-9043-D2FFCBF5A816}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"OneOf.Extended\", \"OneOf.Extended\\OneOf.Extended.csproj\", \"{FB8845F4-51F1-407A-8E10-2A0B892E17FB}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Generator\", \"Generator\\Generator.csproj\", \"{508CDAF6-E780-459E-BD8F-776A5EE2C2FF}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"OneOf.SourceGenerator\", \"OneOf.SourceGenerator\\OneOf.SourceGenerator.csproj\", \"{AC54E93D-1DB2-4143-A1AF-3CE2492EAC83}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"OneOf.SourceGenerator.Tests\", \"OneOf.SourceGenerator.Tests\\OneOf.SourceGenerator.Tests.csproj\", \"{A7D18F0E-8966-4685-8146-34F507356F5D}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"OneOf.SourceGenerator.AnalyzerTests\", \"OneOf.SourceGenerator.AnalyzerTests\\OneOf.SourceGenerator.AnalyzerTests.csproj\", \"{C08F270E-157A-48B9-A7B6-C948FCFC5494}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{82023ED0-3E20-43CF-ACA1-1EA547E70903}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{82023ED0-3E20-43CF-ACA1-1EA547E70903}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{82023ED0-3E20-43CF-ACA1-1EA547E70903}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{82023ED0-3E20-43CF-ACA1-1EA547E70903}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{21D0DD1E-D38A-4A76-B2B3-4CEF11B2C6CB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{21D0DD1E-D38A-4A76-B2B3-4CEF11B2C6CB}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{21D0DD1E-D38A-4A76-B2B3-4CEF11B2C6CB}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{21D0DD1E-D38A-4A76-B2B3-4CEF11B2C6CB}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{26D54D37-8692-4E2A-9043-D2FFCBF5A816}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{26D54D37-8692-4E2A-9043-D2FFCBF5A816}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{26D54D37-8692-4E2A-9043-D2FFCBF5A816}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{26D54D37-8692-4E2A-9043-D2FFCBF5A816}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{FB8845F4-51F1-407A-8E10-2A0B892E17FB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{FB8845F4-51F1-407A-8E10-2A0B892E17FB}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{FB8845F4-51F1-407A-8E10-2A0B892E17FB}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{FB8845F4-51F1-407A-8E10-2A0B892E17FB}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{508CDAF6-E780-459E-BD8F-776A5EE2C2FF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{508CDAF6-E780-459E-BD8F-776A5EE2C2FF}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{508CDAF6-E780-459E-BD8F-776A5EE2C2FF}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{508CDAF6-E780-459E-BD8F-776A5EE2C2FF}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{AC54E93D-1DB2-4143-A1AF-3CE2492EAC83}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{AC54E93D-1DB2-4143-A1AF-3CE2492EAC83}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{AC54E93D-1DB2-4143-A1AF-3CE2492EAC83}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{AC54E93D-1DB2-4143-A1AF-3CE2492EAC83}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{A7D18F0E-8966-4685-8146-34F507356F5D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{A7D18F0E-8966-4685-8146-34F507356F5D}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{A7D18F0E-8966-4685-8146-34F507356F5D}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{A7D18F0E-8966-4685-8146-34F507356F5D}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{C08F270E-157A-48B9-A7B6-C948FCFC5494}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{C08F270E-157A-48B9-A7B6-C948FCFC5494}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{C08F270E-157A-48B9-A7B6-C948FCFC5494}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{C08F270E-157A-48B9-A7B6-C948FCFC5494}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {10E10950-5AD9-4F2C-8174-E0F810680317}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "OneOf",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.607421875,
          "content": "# OneOf [![NuGet](https://img.shields.io/nuget/v/OneOf?logo=nuget)](https://www.nuget.org/packages/OneOf/) [![GitHub](https://img.shields.io/github/license/mcintyre321/OneOf)](licence.md)\n\n> \"Ah! It's like a compile time checked switch statement!\" - Mike Giorgaras\n\n## Getting Started\n\n> `install-package OneOf`\n\nThis library provides F# style ~discriminated~ unions for C#, using a custom type `OneOf<T0, ... Tn>`. An instance of this type holds a single value, which is one of the types in its generic argument list.\n\nI can't encourage you enough to give it a try! Due to exhaustive matching DUs provide an alternative to polymorphism when you want to have a method with guaranteed behaviour-per-type (i.e. adding an abstract method on a base type, and then implementing that method in each type). It's a really powerful tool, ask any f#/Scala dev! :)\n\nPS If you like OneOf, you might want to check out [ValueOf](https://github.com/mcintyre321/valueof), for one-line Value Object Type definitions.\n\n## Use cases\n\n### As a method return value\n\nThe most frequent use case is as a return value, when you need to return different results from a method. Here's how you might use it in an MVC controller action:\n\n```csharp\npublic OneOf<User, InvalidName, NameTaken> CreateUser(string username)\n{\n    if (!IsValid(username)) return new InvalidName();\n    var user = _repo.FindByUsername(username);\n    if(user != null) return new NameTaken();\n    var user = new User(username);\n    _repo.Save(user);\n    return user;\n}\n\n[HttpPost]\npublic IActionResult Register(string username)\n{\n    OneOf<User, InvalidName, NameTaken> createUserResult = CreateUser(username);\n    return createUserResult.Match(\n        user => new RedirectResult(\"/dashboard\"),\n        invalidName => {\n            ModelState.AddModelError(nameof(username), $\"Sorry, that is not a valid username.\");\n            return View(\"Register\");\n        },\n        nameTaken => {\n            ModelState.AddModelError(nameof(username), \"Sorry, that name is already in use.\");\n            return View(\"Register\");\n        }\n    );\n}\n```\n\n#### As an 'Option' Type\n\nIt's simple to use OneOf as an `Option` type - just declare a `OneOf<Something, None>`. OneOf comes with a variety of useful Types in the `OneOf.Types` namespace, including  `Yes`, `No`, `Maybe`, `Unknown`, `True`, `False`, `All`, `Some`, and `None`.\n\n#### Benefits\n\n- True strongly typed method signature\n  - No need to return a custom result base type e.g `IActionResult`, or even worse, a non-descriptive type (e.g. object)\n  - The method signature accurately describes all the potential outcomes, making it easier for consumers to understand the code\n  - Method consumer HAS to handle all cases (see 'Matching', below)\n- You can avoid using [\"Exceptions for control flow\"](http://softwareengineering.stackexchange.com/questions/189222/are-exceptions-as-control-flow-considered-a-serious-antipattern-if-so-why) antipattern by returning custom Typed error objects\n  \n### As a method parameter value\n\nYou can use also use `OneOf` as a parameter type, allowing a caller to pass different types without requiring additional overloads. This might not seem that useful for a single parameter, but if you have multiple parameters, the number of overloads required increases rapidly.\n\n```csharp\npublic void SetBackground(OneOf<string, ColorName, Color> backgroundColor) { ... }\n\n//The method above can be called with either a string, a ColorName enum value or a Color instance.\n```\n\n## Matching\n\nYou use the `TOut Match(Func<T0, TOut> f0, ... Func<Tn,TOut> fn)` method to get a value out. Note how the number of handlers matches the number of generic arguments.\n\n### Advantages over `switch` or `if` or `exception` based control flow:\n\nThis has a major advantage over a switch statement, as it\n\n- requires every parameter to be handled\n- No fallback - if you add another generic parameter, you HAVE to update all the calling code to handle your changes.\n\n    In brown-field code-bases this is incredibly useful, as the default handler is often a runtime `throw NotImplementedException`, or behaviour that wouldn't suit the new result type.\n\nE.g.\n\n```csharp\nOneOf<string, ColorName, Color> backgroundColor = ...;\nColor c = backgroundColor.Match(\n    str => CssHelper.GetColorFromString(str),\n    name => new Color(name),\n    col => col\n);\n_window.BackgroundColor = c;\n```\n\nThere is also a .Switch method, for when you aren't returning a value:\n\n```csharp\nOneOf<string, DateTime> dateValue = ...;\ndateValue.Switch(\n    str => AddEntry(DateTime.Parse(str), foo),\n    int => AddEntry(int, foo)\n);\n```\n\n### TryPickð¥ method\n\nAs an alternative to `.Switch` or `.Match` you can use the `.TryPickð¥` methods.\n\n```csharp\n//TryPickð¥ methods for OneOf<T0, T1, T2>\npublic bool TryPickT0(out T0 value, out OneOf<T1, T2> remainder) { ... }\npublic bool TryPickT1(out T1 value, out OneOf<T0, T2> remainder) { ... }\npublic bool TryPickT2(out T2 value, out OneOf<T0, T1> remainder) { ... }\n```\n\nThe return value indicates if the OneOf contains a Tð¥ or not. If so, then `value` will be set to the inner value from the OneOf. If not, then the remainder will be a OneOf of the remaining generic types. You can use them like this:\n\n```csharp\nIActionResult Get(string id)\n{\n    OneOf<Thing, NotFound, Error> thingOrNotFoundOrError = GetThingFromDb(string id);\n\n    if (thingOrNotFoundOrError.TryPickT1(out NotFound notFound, out var thingOrError)) //thingOrError is a OneOf<Thing, Error>\n      return StatusCode(404);\n\n    if (thingOrError.TryPickT1(out var error, out var thing)) //note that thing is a Thing rather than a OneOf<Thing>\n    {\n      _logger.LogError(error.Message);\n      return StatusCode(500);\n    }\n\n    return Ok(thing);\n}\n```\n\n### Reusable OneOf Types using OneOfBase\n\nYou can declare a OneOf as a type, either for reuse of the type, or to provide additional members, by inheriting from `OneOfBase`. The derived class will inherit the `.Match`, `.Switch`, and `.TryPickð¥` methods.\n\n```csharp\npublic class StringOrNumber : OneOfBase<string, int>\n{\n    StringOrNumber(OneOf<string, int> _) : base(_) { }\n\n    // optionally, define implicit conversions\n    // you could also make the constructor public\n    public static implicit operator StringOrNumber(string _) => new StringOrNumber(_);\n    public static implicit operator StringOrNumber(int _) => new StringOrNumber(_);\n\n    public (bool isNumber, int number) TryGetNumber() =>\n        Match(\n            s => (int.TryParse(s, out var n), n),\n            i => (true, i)\n        );\n}\n\nStringOrNumber x = 5;\nConsole.WriteLine(x.TryGetNumber().number);\n// prints 5\n\nx = \"5\";\nConsole.WriteLine(x.TryGetNumber().number);\n// prints 5\n\nx = \"abcd\";\nConsole.WriteLine(x.TryGetNumber().isNumber);\n// prints False\n```\n\n### OneOfBase Source Generation \n\nYou can automatically generate `OneOfBase` hierarchies using `GenerateOneOfAttribute` and partial class that extends `OneOfBase` using\na Source Generator (thanks to @romfir for the contribution :D). Install it via\n\n> Install-Package OneOf.SourceGenerator\n\nand then define a stub like so:\n\n```csharp\n[GenerateOneOf]\npublic partial class StringOrNumber : OneOfBase<string, int> { }\n```\n\nDuring compilation the source generator will produce a class implementing the OneOfBase boiler plate code for you. e.g.\n\n```csharp\npublic partial class StringOrNumber\n{\n\tpublic StringOrNumber(OneOf.OneOf<System.String, System.Int32> _) : base(_) { }\n\n\tpublic static implicit operator StringOrNumber(System.String _) => new StringOrNumber(_);\n\tpublic static explicit operator System.String(StringOrNumber _) => _.AsT0;\n\n\tpublic static implicit operator StringOrNumber(System.Int32 _) => new StringOrNumber(_);\n\tpublic static explicit operator System.Int32(StringOrNumber _) => _.AsT1;\n}\n```\n"
        },
        {
          "name": "licence.md",
          "type": "blob",
          "size": 1.033203125,
          "content": "Copyright (c) 2016 Harry McIntyre\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        }
      ]
    }
  ]
}