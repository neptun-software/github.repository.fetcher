{
  "metadata": {
    "timestamp": 1736710795077,
    "page": 268,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "EasyNetQ/EasyNetQ",
      "stars": 2916,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 10.2626953125,
          "content": "# Create portable, custom editor settings with EditorConfig\n# https://docs.microsoft.com/en-us/visualstudio/ide/create-portable-custom-editor-options\n\n# .NET coding convention settings for EditorConfig\n# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference?view=vs-2019\n\n# Language conventions\n# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions?view=vs-2019\n\n# Formatting conventions\n# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-formatting-conventions?view=vs-2019\n\n# .NET naming conventions for EditorConfig\n# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-naming-conventions?view=vs-2019\n\n# Top-most EditorConfig file\nroot = true\n\n# Editor defaults for every file\n[*]\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\ncharset = utf-8\n\n# Do not insert newline for API approval tests\n[*.txt]\ninsert_final_newline = false\n\n[*.{csproj,json,config,yml}]\nindent_size = 2\n\n[*.sh]\nend_of_line = lf\n\n[*.{cmd, bat}]\nend_of_line = crlf\n\n# .NET code style settings - \"This.\" and \"Me.\" qualifiers\n# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions?view=vs-2019#this-and-me\ndotnet_style_qualification_for_field = false:warning\ndotnet_style_qualification_for_property = false:warning\ndotnet_style_qualification_for_method = false:warning\ndotnet_style_qualification_for_event = false:warning\n\n# .NET code style settings - Language keywords instead of framework type names for type references\n# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions?view=vs-2019#language-keywords\ndotnet_style_predefined_type_for_locals_parameters_members = true:warning\ndotnet_style_predefined_type_for_member_access = true:warning\n\n# .NET code style settings - Modifier preferences\n# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions?view=vs-2019#normalize-modifiers\ndotnet_style_require_accessibility_modifiers = always:warning\ncsharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:warning\ndotnet_style_readonly_field = true:warning\n\n# .NET code style settings - Parentheses preferences\n# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions?view=vs-2019#parentheses-preferences\ndotnet_style_parentheses_in_arithmetic_binary_operators = never_if_unnecessary:suggestion\ndotnet_style_parentheses_in_relational_binary_operators = never_if_unnecessary:suggestion\ndotnet_style_parentheses_in_other_binary_operators = never_if_unnecessary:suggestion\ndotnet_style_parentheses_in_other_operators = never_if_unnecessary:suggestion\n\n# .NET code style settings - Expression-level preferences\n# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions?view=vs-2019#expression-level-preferences\ndotnet_style_object_initializer = true:warning\ndotnet_style_collection_initializer = true:warning\ndotnet_style_explicit_tuple_names = true:warning\ndotnet_style_prefer_inferred_tuple_names = true:suggestion\ndotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion\ndotnet_style_prefer_auto_properties = true:warning\ndotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning\ndotnet_style_prefer_conditional_expression_over_assignment = true:suggestion\ndotnet_style_prefer_conditional_expression_over_return = true:suggestion\ndotnet_style_prefer_compound_assignment = true:warning\n\n# .NET code style settings - Null-checking preferences\n# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions?view=vs-2019#null-checking-preferences\ndotnet_style_coalesce_expression = true:warning\ndotnet_style_null_propagation = true:warning\n\n# .NET code quality settings - Parameter preferences\n# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions?view=vs-2019#parameter-preferences\ndotnet_code_quality_unused_parameters = all:warning\n\n# C# code style settings - Implicit and explicit types\n# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions?view=vs-2019#implicit-and-explicit-types\ncsharp_style_var_for_built_in_types = false:suggestion\ncsharp_style_var_when_type_is_apparent = true:warning\ncsharp_style_var_elsewhere = true:suggestion\n\n# C# code style settings - Expression-bodied members\n# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions?view=vs-2019#expression-bodied-members\ncsharp_style_expression_bodied_methods = when_on_single_line:suggestion\ncsharp_style_expression_bodied_constructors = false:suggestion\ncsharp_style_expression_bodied_operators = when_on_single_line:suggestion\ncsharp_style_expression_bodied_properties = when_on_single_line:suggestion\ncsharp_style_expression_bodied_indexers = when_on_single_line:suggestion\ncsharp_style_expression_bodied_accessors = when_on_single_line:suggestion\ncsharp_style_expression_bodied_lambdas = when_on_single_line:suggestion\ncsharp_style_expression_bodied_local_functions = when_on_single_line:suggestion\n\n# C# code style settings - Pattern matching\n# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions?view=vs-2019#pattern-matching\ncsharp_style_pattern_matching_over_is_with_cast_check = true:warning\ncsharp_style_pattern_matching_over_as_with_null_check = true:warning\n\n# C# code style settings - Inlined variable declaration\n# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions?view=vs-2019#inlined-variable-declarations\ncsharp_style_inlined_variable_declaration = true:warning\n\n# C# code style settings - C# expression-level preferences\n# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions?view=vs-2019#c-expression-level-preferences\ncsharp_prefer_simple_default_expression = true:suggestion\n\n# C# code style settings - C# null-checking preferences\n# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions?view=vs-2019#c-null-checking-preferences\ncsharp_style_throw_expression = true:warning\ncsharp_style_conditional_delegate_call = true:warning\n\n# C# code style settings - Code block preferences\n# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions?view=vs-2019#code-block-preferences\ncsharp_prefer_braces = when_multiline:suggestion\n\n# C# code style - Unused value preferences\n# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions?view=vs-2019#unused-value-preferences\ncsharp_style_unused_value_expression_statement_preference = discard_variable:suggestion\ncsharp_style_unused_value_assignment_preference = discard_variable:suggestion\n\n# C# code style - Index and range preferences\n# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions?view=vs-2019#index-and-range-preferences\ncsharp_style_prefer_index_operator = true:suggestion\ncsharp_style_prefer_range_operator = true:suggestion\n\n# C# code style - Miscellaneous preferences\n# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions?view=vs-2019#miscellaneous-preferences\ncsharp_style_deconstructed_variable_declaration = true:suggestion\ncsharp_style_pattern_local_over_anonymous_function = true:suggestion\ncsharp_using_directive_placement = outside_namespace:warning\ncsharp_prefer_static_local_function = true:suggestion\ncsharp_prefer_simple_using_statement = false:suggestion\ncsharp_style_prefer_switch_expression = true:suggestion\n\n# .NET formatting settings - Organize using directives\n# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-formatting-conventions?view=vs-2019#organize-using-directives\ndotnet_sort_system_directives_first = false\ndotnet_separate_import_directive_groups = false\n\n# C# formatting settings - New-line options\n# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-formatting-conventions?view=vs-2019#new-line-options\ncsharp_new_line_before_open_brace = all\ncsharp_new_line_before_else = true\ncsharp_new_line_before_catch = true\ncsharp_new_line_before_finally = true\ncsharp_new_line_before_members_in_object_initializers = true\ncsharp_new_line_before_members_in_anonymous_types = true\ncsharp_new_line_between_query_expression_clauses = true\n\n# C# formatting settings - Indentation options\n# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-formatting-conventions?view=vs-2019#indentation-options\ncsharp_indent_case_contents = true\ncsharp_indent_switch_labels = true\ncsharp_indent_labels = one_less_than_current\ncsharp_indent_block_contents = true\ncsharp_indent_braces = false\ncsharp_indent_case_contents_when_block = false\n\n# C# formatting settings - Spacing options\ncsharp_space_after_cast = false\ncsharp_space_after_keywords_in_control_flow_statements = true\ncsharp_space_between_parentheses = false\ncsharp_space_before_colon_in_inheritance_clause = true\ncsharp_space_after_colon_in_inheritance_clause = true\ncsharp_space_around_binary_operators = before_and_after\ncsharp_space_between_method_declaration_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_empty_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_name_and_open_parenthesis = false\ncsharp_space_between_method_call_parameter_list_parentheses = false\ncsharp_space_between_method_call_empty_parameter_list_parentheses = false\ncsharp_space_between_method_call_name_and_opening_parenthesis = false\ncsharp_space_after_comma = true\ncsharp_space_before_comma = false\ncsharp_space_after_dot = false\ncsharp_space_before_dot = false\ncsharp_space_after_semicolon_in_for_statement = true\ncsharp_space_before_semicolon_in_for_statement = false\ncsharp_space_around_declaration_statements = false\ncsharp_space_before_open_square_brackets = false\ncsharp_space_between_empty_square_brackets = false\ncsharp_space_between_square_brackets = false\n\n# C# formatting settings - Wrap options\n# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-formatting-conventions?view=vs-2019#wrap-options\ncsharp_preserve_single_line_blocks = true\ncsharp_preserve_single_line_statements = false\n\n# C# formatting settings - Namespace options\ncsharp_style_namespace_declarations = file_scoped:warning\n\n[*.{cs,vb}]\n# Sealed classes https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1852\ndotnet_diagnostic.CA1852.severity = warning\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4716796875,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# Custom for Visual Studio\n*.cs     diff=csharp\n*.sln    merge=union\n*.csproj merge=union\n*.vbproj merge=union\n*.fsproj merge=union\n*.dbproj merge=union\n\n# Standard to msysgit\n*.doc\t diff=astextplain\n*.DOC\t diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot  diff=astextplain\n*.DOT  diff=astextplain\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 5.24609375,
          "content": "[Oo]bj\n[Bb]in\n*.user\n*.suo\n*.[Cc]ache\n*.bak\n*.ncb\n*.log\n*.DS_Store\n[Tt]humbs.db\n_ReSharper.*\n*.orig\n*.dll\n.vscode\n\n# Ignore NCrunch cache files.\n*.crunchproject.local.xml\n*.crunchsolution.local.xml\n*.ncrunchproject\n*.ncrunchsolution\n\n# Ignore test output\nTestResult.xml\n\n# Ignore NuGet package files.\n*.nupkg\nPackage/EasyNetQ/lib\nPackage/EasyNetQ.Management.Client/lib\nPackage\n\n*.userprefs\ntest-results\n\n# NuGet Packages Directory\npackages\n\n# Ignore NuGet binary\nSource/.nuget/NuGet.exe\n\n#.NET core\n*.dg\n*.lock.json\n\n# VS2015\n.vs/\n\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n**/Properties/launchSettings.json\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Typescript v1 declaration files\ntypings/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# API approval files\n*.received.txt\n"
        },
        {
          "name": "Assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.935546875,
          "content": "[![Build status](https://github.com/EasyNetQ/EasyNetQ/workflows/CI/badge.svg)](https://github.com/EasyNetQ/EasyNetQ/actions?query=workflow%3ACI)\n\n[![NuGet Status](https://img.shields.io/nuget/v/EasyNetQ)](https://www.nuget.org/packages/EasyNetQ)\n[![Nuget Status](https://img.shields.io/nuget/vpre/EasyNetQ)](https://www.nuget.org/packages/EasyNetQ/absoluteLatest)\n[![Nuget Status](https://img.shields.io/nuget/dt/EasyNetQ)](https://www.nuget.org/packages/EasyNetQ)\n\n![Activity](https://img.shields.io/github/commit-activity/w/EasyNetQ/easynetq)\n![Activity](https://img.shields.io/github/commit-activity/m/EasyNetQ/easynetq)\n![Activity](https://img.shields.io/github/commit-activity/y/EasyNetQ/easynetq)\n--\n\n![EasyNetQ Logo](https://github.com/EasyNetQ/EasyNetQ/wiki/images/logo_design_150.png)\n\nA Nice .NET API for RabbitMQ\n\nInitial development was sponsored by travel industry experts [15below](http://15below.com/)\n\n* **[Homepage](http://easynetq.com)**\n* **[Documentation](https://github.com/EasyNetQ/EasyNetQ/wiki/Introduction)**\n* **[NuGet](http://www.nuget.org/packages/EasyNetQ)**\n* **[Discussions](https://github.com/EasyNetQ/EasyNetQ/discussions)**\n* **[~Old Discussion Group~](https://groups.google.com/group/easynetq)**\n\nGoals:\n\n### Important Update\n\nWith the release of EasyNetQ v8, the method for connecting to a RabbitMQ broker has changed. The rest of the API remains unchanged.\n\nTo make working with RabbitMQ on .NET as easy as possible.\n\nTo connect to a RabbitMQ broker in v7...\n```c#\n    var bus = RabbitHutch.CreateBus(\"host=localhost\");\n```\n\nTo connect to a RabbitMQ broker in v8...\n```c#\n    var serviceCollection = new ServiceCollection();\n    serviceCollection.AddEasyNetQ(\"host=localhost\").UseSystemTextJson();\n\n    using var provider = serviceCollection.BuildServiceProvider();\n    var bus = provider.GetRequiredService<IBus>();\n```\n\nTo publish a message...\n```c#\n    await bus.PubSub.PublishAsync(message);\n```\n\nTo publish a message with a 5s delay...\n```c#\n    await bus.Scheduler.FuturePublishAsync(message, TimeSpan.FromSeconds(5));\n```\n\nTo subscribe to a message...\n```c#\n    await bus.PubSub.SubscribeAsync<MyMessage>(\n        \"my_subscription_id\", msg => Console.WriteLine(msg.Text)\n    );\n\n```\nRemote procedure call...\n```c#\n    var request = new TestRequestMessage {Text = \"Hello from the client! \"};\n    await bus.Rpc.RequestAsync<TestRequestMessage, TestResponseMessage>(request);\n```\n\nRPC server...\n```c#\n    await bus.Rpc.RespondAsync<TestRequestMessage, TestResponseMessage>(request =>\n        new TestResponseMessage{ Text = request.Text + \" all done!\" }\n    );\n```\n\n## Getting started\n\nJust open EasyNetQ.sln in your preferred IDE or code editor and build. All the required dependencies for the solution file to build the software are included.\n\n## Contributors\n\nThanks to all the people who already contributed!\n\n<a href=\"https://github.com/EasyNetQ/EasyNetQ/graphs/contributors\">\n  <img src=\"https://contributors-img.web.app/image?repo=EasyNetQ/EasyNetQ\" />\n</a>\n"
        },
        {
          "name": "Source",
          "type": "tree",
          "content": null
        },
        {
          "name": "hall_of_fame.md",
          "type": "blob",
          "size": 1.1826171875,
          "content": "#The EasyNetQ Hall Of Fame\n\nA list of all the people who contributed code to the project. Generated from Git logs:\n\n    git shortlog -s -n\n\nNo particular order. Don't forget to add your name with your pull request.\n\n* James Crowley\n* Eric Rolnicki\n* Fawad Halim\n* Wiebe Tijsma\n* Jeff Doolittle\n* Stefan Sedich\n* chrisedebo\n* Sren Truds Mahon\n* Daniel Wertheim\n* Chris Edwards\n* jonnii\n* Daniel Bryars\n* John-Mark Newton\n* Yury Pliner\n* Andrew Browne\n* e.bartkus\n* Jos van der Til\n* Bressain Dinkelman\n* Daniel White\n* Egidijus Bartkus\n* Etienne Tremblay\n* Eugene Sergueev\n* m.denny\n* philip hoy\n* tardal\n* Sekhar Panja\n* Svein Erik\n* John Efford\n* owen_thomson\n* Gediminas Guoba\n* Garry Shutler\n* ahazelwood\n* ccellar\n* chedegaard\n* Fydon\n* Christoph Keller\n* egidijus.bartkus\n* Bryan Clark\n* taylorwood\n* mark.harrison\n* mhanney\n* mwissman\n* Nick Van Eeckhout\n* Richard Green\n* Sebastien Lambla\n* Karl Nilsson\n* Mike Hadlow\n* Andrey Katamanov\n* Jeff Huntsman\n* Mathieu Leenhardt\n* Steven Bone\n* Matt Davey\n* Dan Barua\n* Alex Wiese\n* Georg Pfeiffer\n* Thomas T\n* Brett Janer\n* Alina Popa\n* Connie Yau\n* Marcus Hellsten\n* Thomas Mutton\n* Ivan Maximov\n* Jens Willmer\n* Pierre Malatre\n* Piotr Zięzio\n* Fabio Stein\n"
        },
        {
          "name": "licence.txt",
          "type": "blob",
          "size": 1.0458984375,
          "content": "The MIT License\n\nCopyright (c) 2015 Mike Hadlow\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
        }
      ]
    }
  ]
}