{
  "metadata": {
    "timestamp": 1736710962806,
    "page": 628,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "stryker-mutator/stryker-net",
      "stars": 1819,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 12.7734375,
          "content": "# top-most EditorConfig file\nroot = true\n\n# Generic\n[*]\ncharset = utf-8\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\n\n# Scripts files\n[*.{cmd,csproj,ps1,psm1,sh}]\nindent_size = 2\n\n# Solution files\n[*.sln]\nend_of_line = crlf\nindent_style = tab\n\n# Config files\n[*.{yml,yaml,json,config,props,targets,nuspec,resx}]\nindent_size = 2\n\n[*.{md,markdown}]\ntrim_trailing_whitespace = false\n\n\n# CSharp coding styles\n\n[*.cs]\n# Indentation options\n# @see: https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#indentation-options\ncsharp_indent_block_contents = true\ncsharp_indent_braces = false\ncsharp_indent_case_contents = true\ncsharp_indent_case_contents_when_block = false\ncsharp_indent_labels = one_less_than_current\ncsharp_indent_switch_labels = true\n\n# Spacing options\n# @see: https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#spacing-options\ncsharp_space_after_cast = false\ncsharp_space_after_colon_in_inheritance_clause = true\ncsharp_space_after_comma = true\ncsharp_space_after_dot = false\ncsharp_space_after_keywords_in_control_flow_statements = true\ncsharp_space_after_semicolon_in_for_statement = true\n\ncsharp_space_around_binary_operators = before_and_after\ncsharp_space_around_declaration_statements = do_not_ignore\n\ncsharp_space_before_colon_in_inheritance_clause = true\ncsharp_space_before_comma = false\ncsharp_space_before_dot = false\ncsharp_space_before_open_square_brackets = false\ncsharp_space_before_semicolon_in_for_statement = false\n\ncsharp_space_between_empty_square_brackets = false\ncsharp_space_between_method_call_empty_parameter_list_parentheses = false\ncsharp_space_between_method_call_name_and_opening_parenthesis = false\ncsharp_space_between_method_call_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_empty_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_name_and_open_parenthesis = false\ncsharp_space_between_method_declaration_parameter_list_parentheses = false\ncsharp_space_between_parentheses = false\ncsharp_space_between_square_brackets = false\n\n# Wrap options\n# @see: https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#wrap-options\ncsharp_preserve_single_line_blocks = true\ncsharp_preserve_single_line_statements = false\n\n# CSharp styling options\n# @see: https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules#c-style-rules\ncsharp_prefer_braces = true:suggestion\ncsharp_prefer_simple_default_expression = true:suggestion\ncsharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion\n\ncsharp_style_conditional_delegate_call = true:suggestion\ncsharp_style_deconstructed_variable_declaration = true:suggestion\n\ncsharp_style_expression_bodied_accessors = true:suggestion\ncsharp_style_expression_bodied_constructors = true:suggestion\ncsharp_style_expression_bodied_indexers = true:suggestion\ncsharp_style_expression_bodied_lambdas = true:suggestion\ncsharp_style_expression_bodied_methods = true:suggestion\ncsharp_style_expression_bodied_operators = true:suggestion\ncsharp_style_expression_bodied_properties = true:suggestion\n\ncsharp_style_inlined_variable_declaration = true:suggestion\n\ncsharp_style_pattern_local_over_anonymous_function = true:suggestion\ncsharp_style_pattern_matching_over_as_with_null_check = true:suggestion\ncsharp_style_pattern_matching_over_is_with_cast_check = true:suggestion\n\ncsharp_style_throw_expression = true:suggestion\n\n# csharp_style_unused_value_expression_statement_preference = discard_variable:suggestion\n# Disable IDE0058: Not relevant to fluent api\ndotnet_diagnostic.IDE0058.severity = none\ncsharp_style_unused_value_assignment_preference = discard_variable:suggestion\n\ncsharp_style_var_for_built_in_types = true:suggestion\ncsharp_style_var_when_type_is_apparent = true:suggestion\ncsharp_style_var_elsewhere = true:suggestion\n\ncsharp_style_namespace_declarations = file_scoped:suggestion\n\ncsharp_using_directive_placement = outside_namespace:silent\ncsharp_prefer_simple_using_statement = true:suggestion\ncsharp_style_prefer_method_group_conversion = true:suggestion\ncsharp_style_prefer_top_level_statements = true:suggestion\ncsharp_style_prefer_primary_constructors = true:suggestion\ncsharp_style_expression_bodied_local_functions = false:suggestion\ncsharp_style_prefer_null_check_over_type_check = true:suggestion\ncsharp_style_prefer_index_operator = true:suggestion\ncsharp_style_prefer_local_over_anonymous_function = true:suggestion\ncsharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion\ncsharp_style_prefer_range_operator = true:suggestion\ncsharp_style_prefer_tuple_swap = true:suggestion\ncsharp_style_prefer_utf8_string_literals = true:suggestion\ncsharp_style_prefer_readonly_struct_member = true:suggestion\ncsharp_style_prefer_readonly_struct = true:suggestion\ncsharp_prefer_static_anonymous_function = true:suggestion\ncsharp_prefer_static_local_function = true:suggestion\ncsharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = true:silent\ncsharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = true:silent\ncsharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true:silent\ncsharp_style_allow_blank_lines_between_consecutive_braces_experimental = true:silent\ncsharp_style_allow_embedded_statements_on_same_line_experimental = true:silent\ncsharp_style_prefer_pattern_matching = true:suggestion\ncsharp_style_prefer_switch_expression = true:suggestion\ncsharp_style_prefer_extended_property_pattern = true:suggestion\ncsharp_style_prefer_not_pattern = true:suggestion\ncsharp_new_line_before_open_brace = all\ncsharp_new_line_before_else = true\ncsharp_new_line_before_catch = true\ncsharp_new_line_before_finally = true\ncsharp_new_line_before_members_in_object_initializers = true\ncsharp_new_line_before_members_in_anonymous_types = true\ncsharp_new_line_between_query_expression_clauses = true\n\n# Default naming styles\ndotnet_naming_rule.async_members_should_be_pascal_case_suffixed_with_async.severity = suggestion\ndotnet_naming_rule.async_members_should_be_pascal_case_suffixed_with_async.style = pascal_case_suffixed_with_async\ndotnet_naming_rule.async_members_should_be_pascal_case_suffixed_with_async.symbols = async_members\n\ndotnet_naming_rule.const_declarations_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.const_declarations_should_be_pascal_case.style = pascal_case\ndotnet_naming_rule.const_declarations_should_be_pascal_case.symbols = const_declarations\n\ndotnet_naming_rule.interfaces_should_be_pascal_case_prefixed_with_i.severity = suggestion\ndotnet_naming_rule.interfaces_should_be_pascal_case_prefixed_with_i.style = pascal_case_prefixed_with_i\ndotnet_naming_rule.interfaces_should_be_pascal_case_prefixed_with_i.symbols = interfaces\n\ndotnet_naming_rule.parameters_should_be_camel_case.severity = suggestion\ndotnet_naming_rule.parameters_should_be_camel_case.style = camel_case\ndotnet_naming_rule.parameters_should_be_camel_case.symbols = parameters\n\ndotnet_naming_rule.private_and_internal_static_fields_should_be_camel_case.severity = suggestion\ndotnet_naming_rule.private_and_internal_static_fields_should_be_camel_case.style = prefix_underscore\ndotnet_naming_rule.private_and_internal_static_fields_should_be_camel_case.symbols = private_and_internal_static_fields\n\ndotnet_naming_rule.private_and_internal_fields_should_be_camel_case.severity = suggestion\ndotnet_naming_rule.private_and_internal_fields_should_be_camel_case.style = prefix_underscore\ndotnet_naming_rule.private_and_internal_fields_should_be_camel_case.symbols = private_and_internal_fields\n\ndotnet_naming_rule.public_and_protected_declarations_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.public_and_protected_declarations_should_be_pascal_case.style = pascal_case\ndotnet_naming_rule.public_and_protected_declarations_should_be_pascal_case.symbols = public_and_protected_declarations\n\ndotnet_naming_rule.static_readonly_declarations_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.static_readonly_declarations_should_be_pascal_case.style = pascal_case\ndotnet_naming_rule.static_readonly_declarations_should_be_pascal_case.symbols = static_readonly_declarations\n\ndotnet_naming_rule.type_parameters_should_be_pascal_case_prefixed_with_t.severity = suggestion\ndotnet_naming_rule.type_parameters_should_be_pascal_case_prefixed_with_t.style = pascal_case_prefixed_with_t\ndotnet_naming_rule.type_parameters_should_be_pascal_case_prefixed_with_t.symbols = type_parameters\n\n# Naming symbols\ndotnet_naming_style.camel_case.capitalization = camel_case\n\ndotnet_naming_style.pascal_case.capitalization = pascal_case\n\ndotnet_naming_style.pascal_case_suffixed_with_async.capitalization = pascal_case\ndotnet_naming_style.pascal_case_suffixed_with_async.required_suffix = Async\n\ndotnet_naming_style.pascal_case_prefixed_with_i.capitalization = pascal_case\ndotnet_naming_style.pascal_case_prefixed_with_i.required_prefix = I\n\ndotnet_naming_style.pascal_case_prefixed_with_t.capitalization = pascal_case\ndotnet_naming_style.pascal_case_prefixed_with_t.required_prefix = T\n\ndotnet_naming_symbols.async_members.required_modifiers = async\n\ndotnet_naming_symbols.const_declarations.required_modifiers = const\n\ndotnet_naming_symbols.interfaces.applicable_kinds = interface\n\ndotnet_naming_symbols.parameters.applicable_kinds = parameter\n\ndotnet_naming_symbols.public_and_protected_declarations.applicable_accessibilities = public, protected\ndotnet_naming_symbols.public_and_protected_declarations.applicable_kinds = method, field, event, property\n\ndotnet_naming_symbols.private_and_internal_fields.applicable_accessibilities = private, internal\ndotnet_naming_symbols.private_and_internal_fields.applicable_kinds = field\n\ndotnet_naming_symbols.private_and_internal_static_fields.applicable_accessibilities = private, internal\ndotnet_naming_symbols.private_and_internal_static_fields.applicable_kinds = field\ndotnet_naming_symbols.private_and_internal_static_fields.required_modifiers = static\n\n\ndotnet_naming_symbols.static_readonly_declarations.required_modifiers = static, readonly\n\ndotnet_naming_symbols.type_parameters.applicable_kinds = type_parameter\n\n# Private members are camelCase and start with _\ndotnet_naming_rule.private_members_with_underscore.symbols  = private_members\ndotnet_naming_rule.private_members_with_underscore.style = prefix_underscore\ndotnet_naming_rule.private_members_with_underscore.severity = suggestion\n\ndotnet_naming_symbols.private_members.applicable_kinds           = field\ndotnet_naming_symbols.private_members.applicable_accessibilities = private\n\ndotnet_naming_style.prefix_underscore.capitalization = camel_case\ndotnet_naming_style.prefix_underscore.required_prefix = _\n\n# Include directives sort options\ndotnet_separate_import_directive_groups = false\ndotnet_sort_system_directives_first = true\n\n# Dotnet suggestion options\ndotnet_style_coalesce_expression = true:suggestion\ndotnet_style_collection_initializer = true:suggestion\ndotnet_style_explicit_tuple_names = true:suggestion\ndotnet_style_null_propagation = true:suggestion\ndotnet_style_object_initializer = true:suggestion\n\ndotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:suggestion\ndotnet_style_parentheses_in_other_binary_operators = always_for_clarity:suggestion\ndotnet_style_parentheses_in_other_operators = never_if_unnecessary:suggestion\ndotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:suggestion\n\ndotnet_style_predefined_type_for_locals_parameters_members = true:warning\ndotnet_style_predefined_type_for_member_access = true:suggestion\n\ndotnet_style_prefer_simplified_interpolation = true:suggestion\ndotnet_style_prefer_auto_properties = true:suggestion\ndotnet_style_prefer_compound_assignment = true:suggestion\ndotnet_style_prefer_simplified_boolean_expressions = true:suggestion\ndotnet_style_prefer_conditional_expression_over_assignment = false:suggestion\ndotnet_style_prefer_conditional_expression_over_return = false:suggestion\ndotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion\ndotnet_style_prefer_inferred_tuple_names = true:suggestion\ndotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion\n\ndotnet_style_qualification_for_event = false:suggestion\ndotnet_style_qualification_for_field = false:suggestion\ndotnet_style_qualification_for_method = false:suggestion\ndotnet_style_qualification_for_property = false:suggestion\n\ndotnet_style_readonly_field = true:suggestion\ndotnet_style_require_accessibility_modifiers = for_non_interface_members:suggestion\n\ndotnet_code_quality_unused_parameters = all:suggestion\n\ndotnet_style_operator_placement_when_wrapping = beginning_of_line\n\ndotnet_style_namespace_match_folder = true:suggestion\ndotnet_style_prefer_collection_expression = when_types_loosely_match:suggestion\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.4580078125,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.73046875,
          "content": "\n# Created by https://www.gitignore.io/api/aspnetcore\n\n### ASPNETCore ###\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/\n\n# launchSettings\nlaunchSettings.json\n\nmutations/\nStrykerLogs/\n\n#Visual studio code config\n.vscode/\n\n**/*.ncrunchsolution\n**/*.ncrunchproject\n*.orig\n/src/Stryker.Core/Stryker.Core/Reporters/Html/Files/\n/src/Stryker.Core/Stryker.Core/ToolHelpers/.vstest/\n*.buildlog\n*.DotSettings\n/src/Stryker.CLI/TestStatisticsAnalyzer/test-stats-report.json\n.DS_Store\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.2265625,
          "content": "# Change Log\n\nAll notable changes to this project will be documented in a package specific changelog file:\n\n* [Change log for stryker](/src/Stryker.Core/CHANGELOG.md)\n* [Change log for dotnet-stryker](/src/Stryker.CLI/CHANGELOG.md)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.3642578125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual\nidentity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall\n  community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or advances of\n  any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email address,\n  without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at strykermutator.npa@gmail.com.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of\nactions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or permanent\nban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the\ncommunity.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.1, available at\n[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n\nCommunity Impact Guidelines were inspired by\n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at\n[https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.556640625,
          "content": "# Contributing to Stryker.NET\nThis is the contribution guide for Stryker.NET. Great to have you here! Here are a few ways you can help make this project better.\n\n## Creating issues\nDo you have an idea for a feature or have you found a bug? Please create an issue so we can talk about it!\nIf you found a bug, please run ```dotnet stryker --verbosity debug``` and add the output of the Stryker run to the issue.\n\n## Adding new features\nNew features are welcome! Either as requests or proposals.\n\n1.\tPlease create an issue first, so we know what to expect from you.\n1.\tCreate a fork on your github account.\n1.\tWhen writing your code, please conform to the [Microsoft coding guidelines](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions).\n1.\tPlease create or edit unit tests or integration tests.\n1.\tRun the tests and verify they pass.\n1. Update documentation.\n\n## Adding a new mutator\nPlease read the [dedicated document](adding_a_mutator.md).\n\n## Setup Stryker.NET locally\nWhile developing on Stryker.NET we advise to work in [the latest Visual Studio](https://www.visualstudio.com/downloads/) and to set Stryker up to run on a UnitTest project on your local disk.\n\n### Example: Steps to run Stryker.NET on a local project\n*\tClone the repository `https://github.com/stryker-mutator/stryker-net.git`\n*\tOpen `Stryker.sln`\n*\tOn `Stryker.CLI` open `properties > Debug`\n*\tCreate a new Debug profile\n*\tSet `Launch` as `Project`\n*\tSet `WorkingDirectory` as your local installation dir, pointing to a UnitTest project `example: (C:\\Repos\\MyProject\\src\\MyProject\\MyProject.UnitTest)`. You can use the ready made projects in `.\\integrationtest\\TargetProjects` for this.\n*\tRun the program with `Stryker.CLI` as the startup project with the newly created Debug profile\n\n\\* Running Stryker on itself doesn't work as the assemblies will be in use by Visual Studio. You can clone Stryker another time to use as a test project.\n\n#### Compiler Platform SDK\nWe advise to use the `.NET Compiler Platform SDK` during development. The `Syntax Visualizer` can help to understand Abstract Syntax Trees and find out types of `SyntaxNodes` you need to target for certain mutators. The `.NET Compiler Platform SDK` is available as a component in the Visual Studio Installer.\n![installer example](./docs/images/visual-studio-installer-sdk-tools.png)\n\n#### Other helpful resources\n- [Roslyn Quoter](http://roslynquoter.azurewebsites.net/), for determining SyntaxFactory AST builder methods required to construct a syntax tree for the any C# input.\n- [Sharplab](https://sharplab.io/), for visualising different compilation steps of C# (AST, IL etc.) \n\n## Maintainers\nWhen merging pull requests or creating commits, please conform to [the angular commit message style](https://docs.google.com/document/d/1rk04jEuGfk9kYzfqCuOlPTSJw3hEDZJTBN5E5f1SALo), so our changelog will be updated.\n   Namely in the form `<type>(<scope>): <subject>\\n\\n[body]`\n   * Type: feat, fix, docs, style, refactor, test, chore.\n   * Scope: the file or group of files (not a strict right or wrong)\n   * Subject and body: present tense (~changed~*change*, ~added~*add*) and include motivation and contrasts with previous behavior\n\n## Community\nDo you want to help? Great! These are a few things you can do:\n\n* Evangelize mutation testing. Mutation testing is still relatively new, especially in .NET Core. Please help us get the word out there!\n* Share your stories in blog posts an on social media. Please inform us about it! Did you use Stryker? Your feedback is very valuable to us. Good and bad! Please contact us and let us know what you think\n"
        },
        {
          "name": "ExampleProjects",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.935546875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "MAINTAINERS.md",
          "type": "blob",
          "size": 9.64453125,
          "content": "# Stryker-net maintainer handbook\n\n## Introduction\nWe've written this document for:\n\n1. Active maintainers of Stryker.NET\n1. Prospective maintainers of Stryker.NET\n1. Anyone curious about how Stryker.NET's maintainers maintain Stryker.NET\n\nThe purpose of this document is to _describe our processes_. We want to avoid conflicts and confusion around \"unwritten rules\". In our opinion, the most straightforward way to address this is to _write them down_. This _also_ happens to be the most straightforward way to change them!\n\n## Contributor\nThis is the most important thing:\n**You don't have to write code to be a contributor!**\n\nA \"contributor\" is any individual who has given back in some way to the project and its community. Contributions include (but are not limited to):\n1. Reporting bugs which follow the reporting guidelines\n1. Suggesting and debating enhancements that have wide applicability\n1. Helping others with Stryker-related questions on [Slack](https://join.slack.com/t/stryker-mutator/shared_invite/enQtOTUyMTYyNTg1NDQ0LTU4ODNmZDlmN2I3MmEyMTVhYjZlYmJkOThlNTY3NTM1M2QxYmM5YTM3ODQxYmJjY2YyYzllM2RkMmM1NjNjZjM), or other sites.\n1. Sending pull requests which fix bugs, improve documentation, improve developer experience, improve code quality, and/or implement requested enhancements\n1. Reviewing code on pull requests\n1. Providing design assets\n1. Posting a tutorial on a personal blog or blogging site\n1. Organizing a \"Stryker\" event or workshop\n1. Spreading the love for mutation testing and test quality in general.\n1. Recruiting more contributors! Don't spam.\n1. Researching the user base, getting feedback, etc. Don't spam.\n\nA contributor is usually a user as well, but this isn't a hard-and-fast rule. A contributor is also expected to adhere to the [Code of conduct](https://github.com/stryker-mutator/stryker-net/blob/master/CODE_OF_CONDUCT.md) as a user would.\n\n## Maintainer \nA maintainer has certain \"rights\" (or \"permissions\") to the Stryker.NET project and other projects under the stryker-mutator organization. These rights come with increased responsibilities.\n\nHowever, **there is no expectation of a standard of technical ability** to be a maintainer of Stryker.NET. This doesn't imply a lack of technical oversight--every pull request will eventually be reviewed.\n\n**If you think you aren't experienced enough to maintain a project like Stryker.NET, you are incorrect.** The only requirements are the above responsibilities and a desire to help the project. It bears repeating:\n\n**You don't have to write code to be a maintainer!**\n\n> A maintainer is synonymous with \"Collaborator\" in GitHub parlance.\n\n### The Responsibilities of a Maintainer\nAs a maintainer, you are expected to not just \"follow\" the code of conduct, but embody its values. Your public behavior, whether in the physical or virtual world, reflects upon the project and other maintainers.\n\n> If you don't understand the code of conduct, or why it exists, it is your responsibility to educate yourself. This does not imply the CoC is immutable.\n\nFurthermore, a maintainer is a contributor who contributes regularly, or expresses a desire to do so. That could be every day--but it might be once a week, or even once a month. Your boss doesn't work here; contribute as often as you wish. We are all people with Real Lives, and for many of us, contributing to OSS is just a hobby!\n\nFinally, a maintainer must help define what makes Stryker \"Stryker\". At a minimum, a maintainer must understand the current definition (if a maintainer is not interested in decision-making). Some of these questions include:\n* What's the scope of Stryker.NET?\n* Where should we focus our efforts?\n* What's urgent, what can wait?\n* What can we break? What's off-limits?\n* What user feedback is valuable? What isn't?\n\nAs maintainers, _we work together_ to learn about the nature of these questions. If we try hard enough, we even come to some answers!\n\nA maintainer _must_ also have 2FA enabled on their GitHub account.\n\n### The Rights of a Maintainer\nYou may choose to do zero or more of these at their discretion:\n1. Merge pull requests\n1. Modify issues (closing, adding labels, assigning them to other maintainers, etc.)\n1. Cancel builds, restart jobs, or otherwise interact with our CI server(s)\n1. CRUD operations on GitHub integrations\n1. Participate in the decision-making process\n\n### About \"Owners\"\nSome maintainers will have full admin rights to the stryker-mutator organization and/or will have access to publish to nuget.\n\n1. Those with publishing access are expected to use nuget's 2FA.\n1. This level of access will be granted by the current owners to those maintainers who have earned the project's trust.\n1. Add new maintainers to the team.\n\n## Reaching decisions \nStryker.NET follows a [consensus-seeking decision-making](https://en.wikipedia.org/wiki/Consensus-seeking_decision-making) process. In other words, all maintainers attempt to come to an agreement. If that fails, owners will decide.\n\nActive maintainers will make an effort to solicit feedback from others before making important or potentially controversial decisions. Given the varying geographical distribution and availability of the maintenance team, we resolve to do the best we can to solicit feedback.\n\nIn other words, to have your opinion heard, participate regularly. The rest of the team won't wait on feedback that isn't necessarily forthcoming!\n\n### Communication\nMaintainers will mainly gather in [the stryker-net channel on slack]([Slack](https://join.slack.com/t/stryker-mutator/shared_invite/enQtOTUyMTYyNTg1NDQ0LTU4ODNmZDlmN2I3MmEyMTVhYjZlYmJkOThlNTY3NTM1M2QxYmM5YTM3ODQxYmJjY2YyYzllM2RkMmM1NjNjZjM)). This is a _public_ channel, and _anyone_ can join.\n\n### Working with Issues & Pull Requests\nAll new issues will need to be triaged, and pull requests must be examined. Maintainers must understand [Semantic Versioning](http://semver.org) (\"SemVer\"), as Stryker.NET follows it semi-strictly.\n\nWe’re also using [conventional commits](https://www.conventionalcommits.org/en/v1.0.0/) (or see [summary here](https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716)). This means that the **commit message decides the next release version number** as well as the **annotation in the changelog**. This why it is important to always _squash merge_ PR’s and decide on a good commit message.\n\nSome examples:\n\n✅ A feature without breaking change.\n> feat(Regex mutations): Add regex mutations. Not enabled by default.\n\n✅ Fix something in the docs (won’t appear in changelog)\n> docs(plugins): fix dead link\n\n✅ A feature with a breaking change\n> feat(options): Standardize stryker CLI options\n> \n> BREAKING CHANGE: All options have been reworked. Your existing commandline and json config will most likely no longer work.   \n\n❌ Comment message has to be present tense\n> ~~ feat(vstest): fixed cleanup of vstest from temp ~~\n\n❌ Format issues:\n> ~~ feat(Html reporter) Add html reporter ~~ // missing :\n> ~~ feat: Add html reporter (#2622) ~~ // missing subject\n\n❌ Scope too vague\n> ~~feat(stryker): changed option~~\n\n\nIt is important to note that these message are **not necessary when contributing a PR**, only when **squash merging them** (we only care about commit messages on the master branch).\n\nOnce more: **Only use squash merge to the master branch**.\n\n### Commenting on Issues and Reviewing Pull Requests\n**All maintainers should be courteous and kind.** Thank the external contributor for the pull request, even if it is not merged. If the pull request has been opened (and subsequently closed) without discussion in a corresponding issue, let them know that by creating an issue first, they could have saved wasted effort. _Clearly and objectively_ explain the reasoning for rejecting any PR.\n\nIf you need more information on an issue, nicely ask the user to provide it. Remind them to use the issue/PR templates if they have not.\n\n#### Reviewing Code\nUse GitHub's code review features. Requesting a review from another maintainer _may or may not_ actually result in a review; don't wait on it. If the PR cannot move forward without input from a certain maintainer, _assign them to the PR_. If you’re waiting on someone, send them a direct message on Slack.\n\n#### The Part About Jerks\nThere will be jerks.\n\n#### Rude or Entitled People\nThese are users who feel the Stryker.NET project and its maintainers _owe them_ time or support. This is incorrect.\n\nHowever, this behavior is often indicative of someone who is \"new\" to open source. Many just don't know better. It is not your _responsibility_ to educate them (again, you owe them nothing).\n\nHere are some suggestions:\n1. If u mad, wait 20 minutes before writing a comment.\n1. \"Kill them with kindness\". Explain how they are presenting themselves; maybe link to a good article or two about it.\n1. Don't make it about \"users vs. maintainers\". Treat them like a potential future maintainer.\n1. Avoid adding to the drama. You could try to reach out privately; email may be in their GitHub profile. You will likely never hear from that individual again (problem solved)\n1. If an issue is getting out of control, lock it.\n1. If someone is _repeatedly_ rude and does not correct their mistakes, you may ban them from participating in the `stryker-mutator` org. If you do not have permission to do so, contact someone who does (an \"owner\").\n\n### When do we release?\nWe release when we feel like it. However, we don’t want to overwhelm users with new versions. We might decide to group features together, in order to not release multiple minor versions in a short period of time.\n\n## Scope of Stryker\nThe Stryker Mutator initiative consists of 3 main mutation testing frameworks:\n* StrykerJS (for JavaScript and friends)\n* Stryker.NET (for C# and maybe other .NET languages)\n* Stryker4s (for scala and maybe other JVM languages)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.2607421875,
          "content": "[![Nuget](https://img.shields.io/nuget/v/dotnet-stryker.svg?color=blue&label=dotnet-stryker&style=flat-square)](https://www.nuget.org/packages/dotnet-stryker/)\n[![Nuget](https://img.shields.io/nuget/dt/dotnet-stryker.svg?style=flat-square)](https://www.nuget.org/packages/dotnet-stryker/)\n[![Azure DevOps build](https://img.shields.io/azure-devops/build/stryker-mutator/Stryker/4/master.svg?label=Azure%20Pipelines&style=flat-square)](https://dev.azure.com/stryker-mutator/Stryker/_build/latest?definitionId=4)\n[![Azure DevOps tests](https://img.shields.io/azure-devops/tests/stryker-mutator/506a1f46-900e-434e-805f-ff8d36fc81af/4/master.svg?compact_message&style=flat-square)](https://dev.azure.com/stryker-mutator/Stryker/_build/latest?definitionId=4)\n[![Mutation testing badge](https://img.shields.io/endpoint?style=flat&url=https%3A%2F%2Fbadge-api.stryker-mutator.io%2Fgithub.com%2Fstryker-mutator%2Fstryker-net%2Fmaster)](https://dashboard.stryker-mutator.io/reports/github.com/stryker-mutator/stryker-net/master)\n[![Slack](https://img.shields.io/badge/chat-on%20slack-blueviolet?style=flat-square)](https://join.slack.com/t/stryker-mutator/shared_invite/enQtOTUyMTYyNTg1NDQ0LTU4ODNmZDlmN2I3MmEyMTVhYjZlYmJkOThlNTY3NTM1M2QxYmM5YTM3ODQxYmJjY2YyYzllM2RkMmM1NjNjZjM)\n# ![S](https://raw.githubusercontent.com/stryker-mutator/stryker-mutator.github.io/6026230eaa82a130950a859e523a703d7f30f291/static/images/stryker-80x80.png)tryker.NET\n\n*Professor X: For someone who hates mutants... you certainly keep some strange company.*\n*William Stryker: Oh, they serve their purpose... as long as they can be controlled.*\n\n## Introduction\n\nStryker offers mutation testing for your .NET Core and .NET Framework projects. It allows you to test your tests by temporarily inserting bugs in your source code.\n\nFor an introduction to mutation testing and Stryker's features, see [stryker-mutator.io](https://stryker-mutator.io/). Looking for mutation testing in [JavaScript & Typescript](https://stryker-mutator.github.io/stryker) or [Scala](https://stryker-mutator.github.io/stryker4s)?\n\n## Compatibility\n\nMinimum target version:\n\n- dotnet core 1.1\n- dotnet framework 4.5\n- dotnet standard 1.3\n\n Tested against:\n\n- dotnet core 3.1\n- dotnet framework 4.8\n\n## Getting started\n\n```bash\ndotnet tool install -g dotnet-stryker\ncd /my/unit/test/project/folder\ndotnet stryker\n```\n\nFor more information read our [getting started](https://stryker-mutator.io/docs/stryker-net/getting-started).\n\n## Documentation\n\nFor the full documentation on how to use Stryker.NET, see our [configuration docs](https://stryker-mutator.io/docs/stryker-net/configuration).\n\n## Migrating\n\nComing from a previous version of Stryker.NET? Take a look at our [migration guide](https://stryker-mutator.io/docs/stryker-net/migration-guide).\n\n## Supported Mutations\n\nFor the full list of all available mutations, see the [mutations docs](https://stryker-mutator.io/docs/stryker-net/mutations).\n\n## Supported Reporters\n\nFor the full list of all available reporters, see the [reporter docs](https://stryker-mutator.io/docs/stryker-net/reporters).\n\n## Contributing\n\nWant to help develop Stryker.NET? Check out our [contribution guide](/CONTRIBUTING.md).\n\nIssues for the HTML report should be issued at [mutation-testing-elements](https://github.com/stryker-mutator/mutation-testing-elements).\n"
        },
        {
          "name": "RELEASING.md",
          "type": "blob",
          "size": 0.955078125,
          "content": "# Release procedure\nReleasing a new version of the Stryker.NET packages can be done by following these steps:\n1. Clone the repo or checkout (and pull) the master branch.\n2. Look at the commits since the last release and determine the next version number. If we are on 0.11.0 and there are only bugfixes and refactorings: we go to 0.11.1. If there are also new features or breaking changes, we go to 0.12.0.\n3. Run `npm run prepare-release` from the root of the repo and enter the new version number.\n4. Verify that the commit is on GitHub and the releases in GitHub have been made.\n5. Wait for build on master to complete on Azure Pipelines and then start the Production environment on Azure Pipelines.\n6. Approve the Production environment on Azure Pipelines (this approval prevents accidental releases).\n\nIt may take about 15 minutes for the new packages to show up on NuGet.org and in clients. New packages first have to be verified and then indexed before they can be used.\n"
        },
        {
          "name": "adding_a_mutator.md",
          "type": "blob",
          "size": 7.408203125,
          "content": "# Adding a new mutation strategy to Stryker\n## An overview of the mutation process\nAfter the initialization phase, during which Stryker.Net gathers information about the project, the mutation phase starts. The project’s source file are mutated separately using the [Roslyn API][1]. Each file’s **syntax tree** is recursively traversed and each discovered syntax node is submitted to the compatible mutators for them to generate mutations. Generated mutations are then buffered before being injected at the proper location (expression, statement, or block level) with the appropriate mutation switching logic (conditional operator or if statement).\n\nWhen every file has been mutated, Stryker tries to build the mutated project, using a trial and error logic. When a compilation error happens on a mutation, this mutation is removed, if an error happens outside any mutations, Stryker preemptively removes all mutations from the current method (a.k.a. safe mode). Once compilation is successful, Stryker tests those mutations and generates one or more report.\n\n## Key facts\nThese are the important information to bear in mind when designing a new mutator or working on improving an existing one:\n\n1. Stryker.Net mutates the **syntax tree** and not the **raw source file**.\n\t1. This greatly simplifies the design and implementation of mutators\n\t2. On the other hand, one must not design a mutator based on text transformation logic.\n> The syntax tree is an object representation of the source files where each syntax element (for example a statement) is described through object instances which classes match the syntax type.\n2. Stryker.Net visits every syntax element; for example, a method invocation is first visited as a whole (e.g., `client.ChangeName(firstName, lastName)`), then  each element:object (`client`), method name (`ChangeName`) then each parameter(`firstname'` and `lastname`). _Note that if parameters are expressions, those are visited in a similar (and recursive) fashion._ \n3. Each file is mutated separately.\n\t1. One cannot design a mutator exploiting multiple files at once.\n4. Stryker.Net takes care of roll backing in case of compilation errors\n\t1. Hence, mutators do not need to ensure mutation properly compiles\n\t2. On the other hand, mutator should avoid triggering ambiguous errors, as those lead to rolling back many mutations.\n\n## Attributes of a good mutator\nThese are the attributes the Stryker’s project team will check before agreeing to a new mutator.\nA mutator:\n\n1. **Must generate mutations looking like possible errors**: the objective is not to generate as many mutants as possible, but to try **to reproduce potential human mistakes**.\n2. **Should be fast**: Stryker visits every syntax elements recursively, meaning that each syntax item is visited several times. A slow mutator can seriously slow down the mutation process.\n3. **Should generate buildable mutations**.: generated mutations should result in **compilable code in the majority of situations**.\n4. **Should  generate survivors**: mutators **should avoid** generating **mutations that often raise exceptions** (e.g., changing the sign of an index, such as `array\\[i\\]` to `array\\[-i\\]`) are those will be killed by any test that execute these lines.\n5. **Should generate killable mutations**: users must be able to devise a test that can kill the mutation. The main risk here is getting _semantically equivalent_ mutations, i.e., mutations that do change the behavior of the code and simply result in an alternate, but correct, implementation.\n6. **Should be general**: mutators should be able to generate mutations for all projects, i.e., should not be specific to some rarely used constructions 5or type of projects. **Note**: in the future, Stryker.Net may support extra mutators via a plug-in like mechanism; those could be framework specific.\n\n## How to code a mutator?\n### Prerequisites\n- You must have at least cursory knowledge of Roslyn APIs dedicated to syntax handling.\n- You should verify your mutator will respect the previous list of attributes.\n- You should have a look at unit test for existing mutators as it will help you write yours.\n- You should as well examine the code for mutator(s) which is/are similar to the one you plan to write.\n### General\nEvery mutator must implements the `IMutator`interface, with a single method `IEnumerable<Mutation> Mutate(SyntaxNode node, StrykerOptions options)`. The _Mutate_ method is called on every syntax element and the implementation must return an enumeration of generated mutations (or empty list if the mutator is not able to mutate the given _node_.\n\nAdding your mutator means:\n- adding a class that will implementation the mutator. It must implement `IMutator` and should inherit from `MutatorBase` (see below)\n- adding an entry in the `Mutator enum`as an identifier for your mutations\n- creating an instance of it in the `CsharpMutantOrchestrator`constructor.\nYou can create a mutator without inhering from `MutatorBase`, but there is little benefit doing so.\n\n### MutatorBase\\<T\\>\nThe `MutatorBase<T>`provides you with:\n\n- Automatic filtering of `SyntaxNode`. I.e. your mutator will only be presented `SyntaxNode`class(es) it can handle\n- Typed mutation: your mutator will be submitted typed syntax elements and not `SyntaxNode`which type you need to discover.\n- simplified configuration for the user: you can specify a `MutationLevel`value for your mutator so that mutation can be skipped if the configuration level is insufficient\n\n### Implementing the mutation\nYou need to:\n\n- add a new class that inherits from `MutatorBase<T>`and implements `IMutator`. Note that MutatorBase already implements the needed method so no need to actually implement anything.\n- specify the expected class of node (above`T`) you are able to mutate (ex. `StatementSyntax`for full statement). If your mutator handles several classes, you can either pick the common ancestor to those classes (up to `SyntaxNode` if needs be), implement several classes, design a generic class or a combination of these.\n- override the `MutationLevel` property and have it return the appropriate level. You should probably start with `Complete` or `Advanced`. This choice will have to be discussed with the project team, but it should happen when the mutator is stable\n- override the `ApplyMutation<T>` method (where `T`is the type you choose as per the first item) and make it returns the one or mutations you are able to generate from the `T` syntax element you received as a parameter. You should look at existing implementation for further guidance\n\n\n## Final words\n- Do not hesitate to reach for help and assistance via GitHub discussions or the project Slack.\n- Writing mutator is trivial for simple constructs but difficulty increases exponentially as syntax elements grow in size\n- Invest in unit tests early. You need to be able to reproduce many situation\n- Bear in mind that syntax constructs changed across C# versions, so make sure your mutator is compatible with various variants (e.g. expression body or block statement body). \n- It is ok to mutate new constructs (such as arrow expression) and leave the old constructs as is. The reverse is not true.\n- Your mutator must return an empty list (or `yield break`) if it cannot generate any mutation.\n- Mutator must not throw.\n- Make sure to update the [mutations documentation](./docs/mutations.md).\n\n[Back to main contributing document](./CONTRIBUTING.md).\n\n[1]:\thttps://docs.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/get-started/syntax-analysis \"Get started with syntax analysis\"\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 10.984375,
          "content": "name: $(PackageVersion).$(VersionBuildNumber)\n\nschedules:\n- cron: \"0 1 * * *\"\n  displayName: Nightly\n  branches:\n    include:\n    - master\n  always: true\n\ntrigger:\n  batch: true\n  branches:\n    include:\n    - master\npr:\n  branches:\n    include:\n    - '*'\n  paths:\n    exclude:\n    - 'docs/*'\n    - '.github/*'\n\nvariables:\n  PackageVersion: '4.5.0'\n  VersionBuildNumber: $[counter('4.5.0', 1)]\n  IntegrationTestVersion: $(PackageVersion)-alpha.$(VersionBuildNumber)\n  ProjectsToPack: src/Stryker.CLI/Stryker.CLI/Stryker.CLI.csproj\n  ForkIntegrationNugetFeedUri: https://f.feedz.io/stryker/stryker-net/nuget/index.json\n  MainIntegrationNugetFeedUri: https://pkgs.dev.azure.com/stryker-mutator/Stryker/_packaging/stryker-net/nuget/v3/index.json\n  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages\n  LibManCacheWindows: $(USERPROFILE)/.librarymanager/cache\n  LibManCacheMacLinux: $(HOME)/.librarymanager/cache\n  RestoreLockedMode: true\n\npool:\n  vmImage: 'windows-latest'\n\nstages:\n- template: pipeline-templates/update-package-lock-files-stage.yml\n\n- stage: Analysis\n  dependsOn: UpdatePackageLockFiles\n  condition: and(and(not(failed()), not(canceled())), eq(variables['System.PullRequest.IsFork'], 'False'))\n  jobs:\n  - job:\n    displayName: Run Sonar Analysis\n    dependsOn: []\n    steps:\n    - task: UseDotNet@2\n      displayName: 'Use dotnet'\n      inputs:\n        version: 8.x\n    - task: UseDotNet@2\n      displayName: 'Use dotnet'\n      inputs:\n        version: 9.x\n    - template: pipeline-templates/populate-cache-steps.yml\n    - task: SonarCloudPrepare@3\n      inputs:\n        SonarCloud: 'SonarCloud stryker-net'\n        organization: 'stryker-net'\n        scannerMode: 'dotnet'\n        projectKey: 'stryker-net'\n        projectName: 'Stryker .NET'\n        projectVersion: '$(PackageVersion)'\n    - task: DotNetCoreCLI@2\n      displayName: 'Run unit tests'\n      inputs:\n        command: test\n        projects: 'src/Stryker.Core/Stryker.Core.UnitTest/Stryker.Core.UnitTest.csproj'\n        arguments: '--collect \"Code coverage\"'\n    - task: SonarCloudAnalyze@3\n    - task: SonarCloudPublish@3\n      inputs:\n        pollingTimeoutSec: '300'\n  - job: RunStrykerCLI\n    displayName: Run stryker on Stryker.CLI\n    condition: and(succeeded(), eq(variables['Build.Reason'], 'Schedule'))\n    dependsOn: []\n    timeoutInMinutes: 240\n    steps:\n    - task: UseDotNet@2\n      displayName: 'Use dotnet'\n      inputs:\n        version: 8.x\n    - task: UseDotNet@2\n      displayName: 'Use dotnet'\n      inputs:\n        version: 9.x\n    - task: DotNetCoreCLI@2\n      displayName: 'Install dotnet-stryker'\n      inputs:\n        command: custom\n        custom: tool\n        arguments: install dotnet-stryker --tool-path $(Agent.BuildDirectory)/tools\n        includeNuGetOrg: true\n    - script: $(Agent.BuildDirectory)/tools/dotnet-stryker --reporter dashboard --reporter dots --reporter html --version master --dashboard-api-key $(Stryker.Dashboard.Api.Key)\n      displayName: Run Stryker on Stryker.CLI\n      workingDirectory: 'src\\Stryker.CLI\\Stryker.CLI.UnitTest'\n  - job: RunStrykerCore\n    displayName: Run stryker on Stryker.Core\n    condition: and(succeeded(), eq(variables['Build.Reason'], 'Schedule'))\n    dependsOn: []\n    timeoutInMinutes: 240\n    steps:\n    - task: UseDotNet@2\n      displayName: 'Use dotnet'\n      inputs:\n        version: 8.x\n    - task: UseDotNet@2\n      displayName: 'Use dotnet'\n      inputs:\n        version: 9.x\n    - task: DotNetCoreCLI@2\n      displayName: 'Install dotnet-stryker'\n      inputs:\n        command: custom\n        custom: tool\n        arguments: install dotnet-stryker --tool-path $(Agent.BuildDirectory)/tools\n        includeNuGetOrg: true\n    - script: $(Agent.BuildDirectory)/tools/dotnet-stryker --reporter dashboard --reporter dots --reporter html --version master --dashboard-api-key $(Stryker.Dashboard.Api.Key)\n      displayName: Run Stryker on Stryker.Core\n      workingDirectory: 'src\\Stryker.Core\\Stryker.Core.UnitTest'\n    - task: PublishMutationReport@1\n      inputs:\n        reportPattern: 'src/Stryker.Core/Stryker.Core.UnitTest/**/mutation-report.html'\n\n- stage: PublishIntegrationtestPackage\n  displayName: Publish Integrationtest Package\n  dependsOn: UpdatePackageLockFiles\n  condition: and(not(failed()), not(canceled()))\n  jobs:\n  - deployment: PublishIntegrationTestPackage\n    displayName: Prepare integrationtest package\n    environment: 'integrationtest'\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - checkout: self\n          - template: pipeline-templates/populate-cache-steps.yml\n          - task: UseDotNet@2\n            displayName: 'Use dotnet'\n            inputs:\n              version: 8.x\n          - task: UseDotNet@2\n            displayName: 'Use dotnet'\n            inputs:\n              version: 9.x\n          - task: DotNetCoreCLI@2\n            displayName: 'Pack integrationtest packages'\n            inputs:\n              command: pack\n              versioningScheme: byEnvVar\n              versionEnvVar: IntegrationTestVersion\n              packagesToPack: $(ProjectsToPack)\n              packDirectory: $(Build.ArtifactStagingDirectory)/integrationtest\n              includesymbols: true\n          - task: DotNetCoreCLI@2\n            displayName: 'Publish integrationtest packages'\n            condition: and(succeeded(), eq(variables['System.PullRequest.IsFork'], 'True'))\n            inputs:\n              command: custom\n              custom: 'nuget'\n              arguments: 'push *dotnet-stryker*$(IntegrationTestVersion).nupkg -s $(ForkIntegrationNugetFeedUri) -k $(IntegrationTestFeedKey)'\n              workingDirectory: '$(Build.ArtifactStagingDirectory)/integrationtest'\n          - task: DotNetCoreCLI@2\n            displayName: 'Publish integrationtest packages'\n            condition:  and(succeeded(), eq(variables['System.PullRequest.IsFork'], 'False'))\n            inputs:\n              command: 'push'\n              packagesToPush: '$(Build.ArtifactStagingDirectory)/integrationtest/*$(IntegrationTestVersion).nupkg'\n              nuGetFeedType: 'internal'\n              publishVstsFeed: '506a1f46-900e-434e-805f-ff8d36fc81af/cc8fa47b-395f-417d-8b3d-72618b95ddb8'\n  - job: WaitOnIntegrationFeedProcessing\n    displayName: Wait on pre-release packages to be processed on Integration Feed\n    dependsOn: 'PublishIntegrationTestPackage'\n    pool: server\n    steps:\n    - task: Delay@1\n      inputs:\n        delayForMinutes: '1'\n\n- stage: IntegrationTests\n  dependsOn:\n    - Analysis\n    - PublishIntegrationtestPackage\n  condition: and(not(failed()), not(canceled()))\n  jobs:\n  - job: WindowsTests\n    displayName: Run tests on Windows\n    steps:\n    - task: NuGetToolInstaller@1\n      displayName: 'Install nuget for stryker full framework'\n    - template: pipeline-templates/prepare-integration-test-steps.yml\n    - template: pipeline-templates/run-integration-test-steps.yml\n      parameters:\n        testName: 'windows-netcore'\n        workingDirectory: 'integrationtest/TargetProjects/NetCore/NetCoreTestProject.XUnit'\n    - template: pipeline-templates/run-integration-test-steps.yml\n      parameters:\n        testName: 'windows-netframework'\n        workingDirectory: 'integrationtest/TargetProjects/NetFramework/FullFrameworkApp.Test'\n    - template: pipeline-templates/run-integration-test-steps.yml\n      parameters:\n        testName: 'windows-initcommand'\n        workingDirectory: 'integrationtest/TargetProjects'\n        strykerCommands: init --config-file \"InitCommand/test-config.json\" -p \"TestProject.csproj\"\n\n    - task: DotNetCoreCLI@2\n      displayName: 'Assert integration test results'\n      inputs:\n        command: test\n        projects: '**/Validation.csproj'\n        arguments: --filter Category=SingleTestProject\n        \n  - job: LinuxTests\n    displayName: Run tests on Linux\n    pool:\n      vmImage: ubuntu-latest\n    steps:\n    - template: pipeline-templates/prepare-integration-test-steps.yml\n    - template: pipeline-templates/run-integration-test-steps.yml\n      parameters:\n        testName: 'linux-netcore'\n        workingDirectory: 'integrationtest/TargetProjects/NetCore'\n        strykerCommands: --solution '$(Agent.BuildDirectory)/s/integrationtest/TargetProjects/NetCore/IntegrationTestApp.sln'\n    - task: DotNetCoreCLI@2\n      displayName: 'Assert integration test results'\n      inputs:\n        command: test\n        projects: '**/Validation.csproj'\n        arguments: --filter Category=Solution\n    - script: $(Agent.BuildDirectory)/tools/dotnet-stryker\n      workingDirectory: 'integrationtest/TargetProjects/NetCore/EmptyTestProject'\n      failOnStderr: false\n      continueOnError: true\n\n  - job: MacOsTests\n    displayName: Run tests on Mac OS\n    pool:\n      vmImage: macOS-latest\n    steps:\n    - template: pipeline-templates/prepare-integration-test-steps.yml\n    - template: pipeline-templates/run-integration-test-steps.yml\n      parameters:\n        testName: 'macos-netcore'\n        workingDirectory: 'integrationtest/TargetProjects/NetCore/NetCoreTestProject.XUnit'\n    - template: pipeline-templates/run-integration-test-steps.yml\n      parameters:\n        testName: 'macos-init-command'\n        workingDirectory: 'integrationtest/TargetProjects'\n        strykerCommands: init --config-file \"InitCommand/test-config.json\" -p \"TestProject.csproj\"\n    - task: DotNetCoreCLI@2\n      displayName: 'Assert integration test results'\n      inputs:\n        command: test\n        projects: '**/Validation.csproj'\n        arguments: --filter Category=SingleTestProject\n    - template: pipeline-templates/run-integration-test-steps.yml\n      parameters:\n        testName: 'macos-netcore-multi-test-project'\n        workingDirectory: 'integrationtest/TargetProjects/NetCore/TargetProject'\n    - task: DotNetCoreCLI@2\n      displayName: 'Assert integration test results'\n      inputs:\n        command: test\n        projects: '**/Validation.csproj'\n        arguments: --filter Category=MultipleTestProjects\n\n- stage: PublishMasterReleaseArtifact\n  displayName: Publish Release Artifact\n  dependsOn:\n    - Analysis\n    - IntegrationTests\n  condition: and(and(not(failed()), not(canceled())), eq(variables['Build.SourceBranch'], 'refs/heads/master'))\n  jobs:\n  - job: PublishRelease\n    displayName: Publish Release Artifacts\n    steps:\n    - template: pipeline-templates/populate-cache-steps.yml\n    - task: UseDotNet@2\n      displayName: 'Use dotnet'\n      inputs:\n        version: 8.x\n    - task: UseDotNet@2\n      displayName: 'Use dotnet'\n      inputs:\n        version: 9.x\n    - task: DotNetCoreCLI@2\n      displayName: 'Pack Stryker.CLI'\n      inputs:\n        command: custom\n        custom: pack\n        arguments: --output $(Build.ArtifactStagingDirectory)/release\n        workingDirectory: 'src/Stryker.CLI/Stryker.CLI'\n    - task: DotNetCoreCLI@2\n      displayName: 'Pack Stryker.Core'\n      inputs:\n        command: custom\n        custom: pack\n        arguments: --output $(Build.ArtifactStagingDirectory)/release\n        workingDirectory: 'src/Stryker.Core/Stryker.Core'\n    - task: PublishBuildArtifacts@1\n      displayName: 'Publish Artifact: release'\n      inputs:\n        PathtoPublish: '$(Build.ArtifactStagingDirectory)/release'\n        ArtifactName: release\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "integrationtest",
          "type": "tree",
          "content": null
        },
        {
          "name": "package-lock.json",
          "type": "blob",
          "size": 0.0283203125,
          "content": "{\n    \"lockfileVersion\": 1\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.17578125,
          "content": "{\n    \"private\": true,\n    \"version\": \"4.5.0\",\n    \"versionPrefix\": \"4.5.0\",\n    \"versionSuffix\": \"\",\n    \"scripts\": {\n        \"prepare-release\": \"node prepare-release.js\"\n    }\n}\n"
        },
        {
          "name": "pipeline-templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "prepare-release.js",
          "type": "blob",
          "size": 3.6982421875,
          "content": "const { execSync } = require('child_process');\nconst readline = require('readline');\nconst fs = require('fs');\nconst packagejson = require('./package.json');\n\nconst exec = (command) => execSync(command, { stdio: [0, 1, 2] });\nconst replaceVersionNumber = (path, oldString, newString) => {\n    const fileContent = fs.readFileSync(path, { encoding: 'UTF-8' });\n    if (!fileContent.includes(oldString)) {\n        throw new Error(`The file at ${path} did not contain ${oldString}!`);\n    }\n    const oldStringStart = fileContent.indexOf(oldString);\n    const oldStringEnd = oldStringStart + oldString.length;\n    const updatedFileContent = fileContent.substr(0, oldStringStart) + newString + fileContent.substr(oldStringEnd);\n    fs.writeFileSync(path, updatedFileContent, { encoding: 'UTF-8' });\n};\n\nconst packages = [\n    { name: 'stryker', path: './src/Stryker.Core', csproj: './src/Stryker.Core/Stryker.Core/Stryker.Core.csproj' },\n    { name: 'dotnet-stryker', path: './src/Stryker.CLI', csproj: './src/Stryker.CLI/Stryker.CLI/Stryker.CLI.csproj' }\n];\n\nconst oldVersionPrefix = packagejson.versionPrefix;\nconst oldVersionSuffix = packagejson.versionSuffix;\nconst oldVersion = oldVersionPrefix + (oldVersionSuffix ?'-':'') + oldVersionSuffix;\nconsole.log(`Current package version is ${oldVersionPrefix}${oldVersionSuffix?'-':''}${oldVersionSuffix}`);\nconst rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\nrl.question('What should the new package version be? ', (newVersionNumber) => {\n    let commitMessageLines = ['Publish', '', ''];\n    let versionPrefix = newVersionNumber;\n    let versionSuffix = '';\n\n    if (newVersionNumber.indexOf('-')) {\n        versionPrefix = newVersionNumber.split('-')[0];\n        versionSuffix = newVersionNumber.split('-')[1] ?? '';\n    }\n\n    console.log('Updating package.json');\n    replaceVersionNumber('./package.json', `\"version\": \"${packagejson.version}\",`, `\"version\": \"${newVersionNumber}\",`);\n    replaceVersionNumber('./package.json', `\"versionPrefix\": \"${oldVersionPrefix}\",`, `\"versionPrefix\": \"${versionPrefix}\",`);\n    replaceVersionNumber('./package.json', `\"versionSuffix\": \"${oldVersionSuffix}\",`, `\"versionSuffix\": \"${versionSuffix}\",`);\n\n    packages.forEach(pckg => {\n        console.log(`Updating version numbers in ${pckg.csproj}`);\n        replaceVersionNumber(pckg.csproj, `<VersionPrefix>${oldVersionPrefix}</VersionPrefix>`, `<VersionPrefix>${versionPrefix}</VersionPrefix>`);\n        replaceVersionNumber(pckg.csproj, `<VersionSuffix>${oldVersionSuffix}</VersionSuffix>`, `<VersionSuffix>${versionSuffix}</VersionSuffix>`);\n\n        if (!versionSuffix) {\n            console.log(`Updating changelog for ${pckg.name}`);\n            commitMessageLines.push(`- ${pckg.name}@${newVersionNumber}`);\n            exec(`npx conventional-changelog-cli -p angular --infile \"${pckg.path}/CHANGELOG.md\" --same-file --commit-path ${pckg.path} --tag-prefix \"${pckg.name}@\"`);\n        }\n    });\n\n    console.log('Updating azure-pipelines.yml');\n    replaceVersionNumber('./azure-pipelines.yml', `VersionBuildNumber: $[counter('${oldVersion}', 1)]`, `VersionBuildNumber: $[counter('${versionPrefix}', 1)]`);\n    replaceVersionNumber('./azure-pipelines.yml', `PackageVersion: '${oldVersion}'`, `PackageVersion: '${versionPrefix}'`);\n\n    if (!versionSuffix) {\n        console.log('Tagging commit');\n        packages.forEach(pckg => exec(`git tag -a ${pckg.name}@${newVersionNumber} -m \"${pckg.name}@${newVersionNumber}\"`));\n    }\n\n    console.log(`Creating commit`);\n    exec('git add .');\n    exec(`git commit ${commitMessageLines.map(entry => `-m \"${entry}\"`).join(' ')}`);\n\n    console.log(`Pushing commit ${versionSuffix?'':' and tags'}`);\n    exec('git push --follow-tags');\n    rl.close();\n});\n\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}