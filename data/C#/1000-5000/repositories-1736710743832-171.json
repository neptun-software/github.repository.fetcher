{
  "metadata": {
    "timestamp": 1736710743832,
    "page": 171,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "GlitchEnzo/NuGetForUnity",
      "stars": 3367,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 6.46875,
          "content": "root=true\n\n[*]\nend_of_line=crlf\ninsert_final_newline=true\nindent_size=4\nindent_style=space\nmax_line_length=150\n\n[*.cs]\ncharset=utf-8-bom\ntrim_trailing_whitespace=true\n# Ignore Unnecessary suppression as we don't have ReShaprer installed\ndotnet_remove_unnecessary_suppression_exclusions=category: ReSharper\n# New line preferences\ncsharp_new_line_before_open_brace=all\ncsharp_new_line_before_else=true\ncsharp_new_line_before_catch=true\ncsharp_new_line_before_finally=true\ncsharp_new_line_before_members_in_object_initializers=true\ncsharp_new_line_before_members_in_anonymous_types=true\ncsharp_new_line_between_query_expression_clauses=true\n# Indentation preferences\ncsharp_indent_block_contents=true\ncsharp_indent_braces=false\ncsharp_indent_case_contents=true\ncsharp_indent_case_contents_when_block=true\ncsharp_indent_switch_labels=true\ncsharp_indent_labels=one_less_than_current\n# Modifier preferences\ncsharp_preferred_modifier_order=public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion\n# Coding style\ncsharp_namespace_body=block_scoped\ntrailing_comma_in_multiline_lists=true\ntrailing_comma_in_singleline_lists=false\nforce_attribute_style=seperate\nbraces_for_ifelse=required\nbraces_for_for=required\nbraces_for_foreach=required\nbraces_for_lock=required\nbraces_for_using=required\nbraces_for_while=required\nbraces_redundant=false\nobject_creation_when_type_evident=explicitly_typed # target_typed is only available on C# 9\nobject_creation_when_type_not_evident=explicitly_typed\n# Blank Lines formating. see: https://www.jetbrains.com/help/resharper/EditorConfig_CSHARP_BlankLinesPageScheme.html\nblank_lines_before_single_line_comment=1\nkeep_blank_lines_in_declarations=1\nblank_lines_after_start_comment=1\nblank_lines_after_using_list=1\nblank_lines_inside_namespace=0\nblank_lines_after_file_scoped_namespace_directive=1\nblank_lines_around_type=1\nblank_lines_around_single_line_type=1\nblank_lines_inside_type=0\nblank_lines_around_field=1\nblank_lines_around_single_line_field=1\nblank_lines_around_property=1\nblank_lines_around_single_line_property=1\nblank_lines_around_auto_property=1\nblank_lines_around_single_line_auto_property=1\nblank_lines_around_accessor=1\nblank_lines_around_single_line_accessor=0\nblank_lines_around_invocable=1\nblank_lines_around_single_line_invocable=1\nkeep_blank_lines_in_code=1\nremove_blank_lines_near_braces=true\nremove_blank_lines_near_braces_in_code=true\nblank_lines_around_local_method=1\nblank_lines_after_control_transfer_statements=1\nblank_lines_after_block_statements=1\n# Line Breaks. see: https://www.jetbrains.com/help/resharper/EditorConfig_CSHARP_LineBreaksPageSchema.html\nkeep_user_linebreaks=false\nwrap_before_comma=false\nspecial_else_if_treatment=true\nkeep_existing_arrangement=false\nplace_attribute_on_same_line=never\nwrap_parameters_style=chop_if_long\nwrap_before_declaration_lpar=false\nwrap_after_declaration_lpar=false\nwrap_before_declaration_rpar=false\nplace_constructor_initializer_on_same_line=false\nplace_type_constraints_on_same_line=false\nwrap_before_first_type_parameter_constraint=true\nwrap_multiple_type_parameter_constraints_style=chop_always\nwrap_before_type_parameter_langle=false\nwrap_extends_list_style=chop_if_long\nplace_simple_declaration_blocks_on_single_line=false\nplace_abstract_accessorholder_on_single_line=true\nplace_simple_blocks_on_single_line=true\nplace_simple_method_on_single_line=false\nmax_enum_members_on_line=0\nplace_simple_enum_on_single_line=false\nwrap_enum_declaration=chop_always\nnew_line_before_else=false\nnew_line_before_while=true\nnew_line_before_catch=true\nnew_line_before_finally=true\nwrap_for_stmt_header_style=chop_if_long\nplace_simple_case_statement_on_same_line=never\nplace_simple_embedded_block_on_same_line=false\nplace_simple_switch_expression_on_single_line=false\nwrap_switch_expression=chop_always\nplace_simple_property_pattern_on_single_line=true\nwrap_property_pattern=chop_if_long\nplace_simple_list_pattern_on_single_line=true\nwrap_list_pattern=chop_if_long\nplace_simple_initializer_on_single_line=true\nwrap_object_and_collection_initializer_style=chop_if_long\nwrap_array_initializer_style=chop_if_long\nwrap_arguments_style=chop_if_long\nwrap_before_invocation_lpar=false\nwrap_after_invocation_lpar=true\nwrap_before_invocation_rpar=false\nwrap_after_dot_in_method_calls=false\nwrap_chained_method_calls=chop_if_long\nwrap_before_binary_opsign=false\nwrap_chained_binary_expressions=chop_if_long\nwrap_before_binary_pattern_op=false\nwrap_chained_binary_patterns=chop_if_long\nforce_chop_compound_if_expression=false\nforce_chop_compound_while_expression=false\nforce_chop_compound_do_expression=false\nwrap_before_ternary_opsigns=false\nwrap_ternary_expr_style=chop_if_long\nnested_ternary_style=compact\nwrap_linq_expressions=chop_if_long\nwrap_before_linq_expression=false\nplace_linq_into_on_new_line=false\nwrap_verbatim_interpolated_strings=no_wrap # not supported by unity c# version\n# xml documentation code style. see: https://www.jetbrains.com/help/resharper/EditorConfig_XMLDOC_XmlDocCodeStylePageSchema.html\nxmldoc_linebreaks_inside_tags_for_multiline_elements=true\nxmldoc_wrap_text=true\nxmldoc_wrap_around_elements=false\nxmldoc_indent_text=one_indent\nxmldoc_keep_user_linebreaks=true\n# analyzer warings\ndotnet_code_quality.ca1051.api_surface=all\ndotnet_diagnostic.sa1633.severity=none\ndotnet_diagnostic.sa1200.severity=none\ndotnet_diagnostic.sa1101.severity=none\ndotnet_diagnostic.SA1408.severity=none\ndotnet_diagnostic.SA1407.severity=none\ndotnet_diagnostic.SA1118.severity=none\ndotnet_diagnostic.CA1002.severity=none\ndotnet_diagnostic.CA1031.severity=none\ndotnet_diagnostic.CA1062.severity=none\ndotnet_diagnostic.CA2234.severity=none\ndotnet_diagnostic.CA2007.severity=none\ndotnet_diagnostic.CA1056.severity=none # URI-like properties should not be strings\ndotnet_diagnostic.CA1054.severity=none # URI parameters should not be strings\ndotnet_diagnostic.CA2249.severity=none # Cant use String.Contains as it doesn't support StringComparison type on .net framework\ndotnet_diagnostic.CA1307.severity=none # Cant use String.Replace with StringComparison type on .net framework\ndotnet_diagnostic.CA1865.severity=none # Cant use String.StartsWith with char on .net framework\n# ReSharper properties\nresharper_wrap_after_declaration_lpar=true\n\n[{*.yaml,*.yml}]\nindent_size=2\ncharset=utf-8-bom\ntrim_trailing_whitespace=true\n\n[*.DotSettings]\nmax_line_length=off\n\n[{*.xml,*.csproj,*.xlf,*.DotSettings,*.js,*.xaml,*.config,*.pubxml}]\ncharset=utf-8-bom\ntrim_trailing_whitespace=true\n\n[{manifest.json,packages-lock.json,packages.config}]\nindent_size=2\ntrim_trailing_whitespace=true\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.369140625,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# Custom for Visual Studio\n*.cs     diff=csharp\n\n# Standard to msysgit\n*.doc\t diff=astextplain\n*.DOC\t diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot  diff=astextplain\n*.DOT  diff=astextplain\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0712890625,
          "content": "/[Bb]in/\n\n*.log\n**/.idea\n\nsrc/NuGetForUnity/Editor/NuGetForUnity.csproj*\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.5302734375,
          "content": "# See https://pre-commit.com for more information\n# See https://pre-commit.com/hooks.html for more hooks\nexclude: \"^.git$\"\nrepos:\n  - repo: https://github.com/JoC0de/pre-commit-prettier\n    rev: \"v3.4.2\"\n    hooks:\n      - id: prettier\n        additional_dependencies:\n          - prettier@3.4.2\n          - \"@prettier/plugin-xml@3.4.1\"\n          - \"prettier-plugin-ini@1.3.0\"\n        args:\n          - --plugin=prettier-plugin-ini\n        files: Directory\\.Build\\.props$|(\\.(json|xml|html|config|csproj|xlf|DotSettings|yaml|yml|js|md|xrml|xaml|css|editorconfig)$)\n        exclude: NuGetForUnity\\.PluginAPI\\.xml$\n  - repo: local\n    hooks:\n      - id: resharper-cleanupcode-all\n        name: ReSharper Code Cleanup (all files)\n        entry: python ./tools/resharper-cleanupcode.py\n        language: system\n        pass_filenames: false\n        require_serial: true\n        stages: [manual]\n      - id: resharper-cleanupcode-changed\n        name: ReSharper Code Cleanup (only changed)\n        entry: python ./tools/resharper-cleanupcode.py\n        language: system\n        files: \\.cs$\n        pass_filenames: true\n        require_serial: true\n        stages: [pre-commit, pre-merge-commit]\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: trailing-whitespace\n        exclude: \\.(pdf|meta|prefab|shader|controller|asset|cginc|mat|unity|anim|shadergraph)$\n      - id: end-of-file-fixer\n        exclude: \\.(asmdef|pdf|meta|prefab|shader|controller|asset|cginc|mat|unity|anim|shadergraph)$\n      - id: check-merge-conflict\n"
        },
        {
          "name": ".prettierrc.yaml",
          "type": "blob",
          "size": 1.2197265625,
          "content": "# see https://prettier.io/docs/en/options.html\n\n# Specify the line length that the printer will wrap on.\nprintWidth: 150\n\n# Specify the number of spaces per indentation-level.\ntabWidth: 4\n\nendOfLine: \"crlf\"\n\n# Whitespaces are considered insensitive.\nhtmlWhitespaceSensitivity: \"ignore\"\nxmlWhitespaceSensitivity: \"ignore\"\n\n# Overrides for some file types\noverrides:\n  # .config files are xml style e.g. package.config\n  - files: \"*.config\"\n    options:\n      parser: \"xml\"\n\n  # comply with the same formatting used by NuGetForUnity\n  - files:\n      - \"packages.config\"\n      - \"NuGet.config\"\n    options:\n      tabWidth: 2\n\n  - files:\n      - \"*.csproj\"\n      - \"Directory.Build.props\"\n    options:\n      parser: \"xml\"\n\n  - files: \"*.xlf\"\n    options:\n      parser: \"xml\"\n\n  - files: \"*.DotSettings\"\n    options:\n      parser: \"xml\"\n      printWidth: 300000\n      xmlWhitespaceSensitivity: \"strict\"\n\n  - files: \"*.inputactions\"\n    options:\n      parser: \"json\"\n\n  - files:\n      - \"*.yml\"\n      - \"*.yaml\"\n      - \"*.meta\"\n    options:\n      parser: \"yaml\"\n      tabWidth: 2\n\n  - files:\n      - manifest.json\n      - packages-lock.json\n    options:\n      parser: \"json\"\n      tabWidth: 2\n\n  - files: \".editorconfig\"\n    options:\n      parser: \"ini\"\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 9.5712890625,
          "content": "<!-- omit in toc -->\n\n# Contributing to NuGetForUnity\n\nFirst off, thanks for taking the time to contribute! ❤️\n\nAll types of contributions are encouraged and valued. See the [Table of Contents](#table-of-contents) for different ways to help and details about how this project handles them. Please make sure to read the relevant section before making your contribution. It will make it a lot easier for us maintainers and smooth out the experience for all involved. The community looks forward to your contributions. 🎉\n\n> And if you like the project, but just don't have time to contribute, that's fine. There are other easy ways to support the project and show your appreciation, which we would also be very happy about:\n>\n> - Star the project\n> - Tweet about it\n> - Refer this project in your project's readme\n> - Mention the project at local meetups and tell your friends/colleagues\n\n<!-- omit in toc -->\n\n## Table of Contents\n\n- [I Have a Question](#i-have-a-question)\n- [I Want To Contribute](#i-want-to-contribute)\n- [Reporting Bugs](#reporting-bugs)\n- [Suggesting Enhancements](#suggesting-enhancements)\n- [Pull Requests](#pull-requests)\n- [Development Environment Setup](#development-environment-setup)\n- [Running Unit Tests](#running-unit-tests)\n- [Code Style](#code-style)\n- [Auto Formatter](#auto-formatter)\n\n## I Have a Question\n\n> If you want to ask a question, we assume that you have read the available [Documentation (README.md)](https://github.com/GlitchEnzo/NuGetForUnity#readme).\n\nBefore you ask a question, it is best to search for existing [Issues](https://github.com/GlitchEnzo/NuGetForUnity/issues) that might help you. In case you have found a suitable issue and still need clarification, you can write your question in this issue. It is also advisable to search the internet for answers first.\n\nIf you then still feel the need to ask a question and need clarification, we recommend the following:\n\n- Open an [Issue](https://github.com/GlitchEnzo/NuGetForUnity/issues/new).\n- Provide as much context as you can about what you're running into.\n- Provide project, Unity and package versions.\n\nWe will then take care of the issue as soon as possible.\n\n## I Want To Contribute\n\n> ### Legal Notice <!-- omit in toc -->\n>\n> When contributing to this project, you must agree that you have authored 100% of the content, that you have the necessary rights to the content and that the content you contribute may be provided under the project license.\n\n### Reporting Bugs\n\n<!-- omit in toc -->\n\n#### Before Submitting a Bug Report\n\nA good bug report shouldn't leave others needing to chase you up for more information. Therefore, we ask you to investigate carefully, collect information and describe the issue in detail in your report. Please complete the following steps in advance to help us fix any potential bug as fast as possible.\n\n- Make sure that you are using the latest version.\n- Determine if your bug is related to on of the issues mentioned under [Common issues when installing NuGet packages](https://github.com/GlitchEnzo/NuGetForUnity#common-issues-when-installing-nuget-packages).\n- To see if other users have experienced (and potentially already solved) the same issue you are having, check if there is not already a bug report existing for your bug or error in the [Issues](https://github.com/GlitchEnzo/NuGetForUnity/issues).\n- Also make sure to search the internet (including Stack Overflow) to see if users outside of the GitHub community have discussed the issue.\n- Collect information about the bug:\n- Get logs produced by enabling verbose logging in the [NuGetForUnity settings](docs/screenshots/preferences.png)\n- Can you reliably reproduce the issue? And can you also reproduce it with older versions?\n\n<!-- omit in toc -->\n\n#### How Do I Submit a Good Bug Report?\n\nWe use GitHub issues to track bugs and errors. If you run into an issue with the project:\n\n- Open an [Issue](https://github.com/GlitchEnzo/NuGetForUnity/issues/new).\n- Explain the behavior you would expect and the actual behavior.\n- Please provide as much context as possible and describe the _reproduction steps_ that someone else can follow to recreate the issue on their own.\n- Provide the information you collected in the previous section.\n\nWe will then take care of the issue as soon as possible.\n\n### Suggesting Enhancements\n\nThis section guides you through submitting an enhancement suggestion for NuGetForUnity, **including completely new features and minor improvements to existing functionality**. Following these guidelines will help maintainers and the community to understand your suggestion and find related suggestions.\n\n<!-- omit in toc -->\n\n#### Before Submitting an Enhancement\n\n- Make sure that you are using the latest version.\n- Read the [Documentation (README.md)](https://github.com/GlitchEnzo/NuGetForUnity#readme) carefully and find out if the functionality is already covered, maybe by an individual configuration.\n- Perform a [search](https://github.com/GlitchEnzo/NuGetForUnity/issues) to see if the enhancement has already been suggested. If it has, add a comment to the existing issue instead of opening a new one.\n- Find out whether your idea fits with the scope and aims of the project. It's up to you to make a strong case to convince the project's developers of the merits of this feature.\n\n<!-- omit in toc -->\n\n#### How Do I Submit a Good Enhancement Suggestion?\n\nEnhancement suggestions are tracked as [GitHub issues](https://github.com/GlitchEnzo/NuGetForUnity/issues).\n\n- Use a **clear and descriptive title** for the issue to identify the suggestion.\n- Provide a **step-by-step description of the suggested enhancement** in as many details as possible.\n- **Describe the current behavior** and **explain which behavior you expected to see instead** and why. At this point you can also tell which alternatives do not work for you.\n- **Explain why this enhancement would be useful** to most NuGetForUnity users. You may also want to point out the other projects that solved it better and which could serve as inspiration.\n\n### Pull Requests\n\nWe are using pull requests to add new features, no direct commits to master. To develop a new feature:\n\n- First create a branch on your own fork.\n- When you finish the development create a [Pull Request](https://github.com/GlitchEnzo/NuGetForUnity/pulls).\n- We will then review the changes.\n- The [GitHub Action](.github/workflows/main.yml) will enure everything builds, the unit tests are running successfully and some [test projects](src/TestProjects) that include NuGet packages imported using NuGetForUnity build successfully.\n- The [GitHub Action](.github/workflows/main.yml) also creates a pre-release `.unitypackage` from the build to be able to import it in any Unity project without needing to wait for a new official release.\n- If everything is working and fits our [Code Style](#code-style) we will merge the pull request. When merging please use the `Squash and merge` merge strategy to keep the commit history clean.\n\n### Steps to release a new version\n\n1. Update Version Information:\n\n    - Edit `src/NuGetForUnity/package.json` to update the `\"version\"` field.\n    - Edit `src/NuGetForUnity/Editor/Ui/NugetPreferences.cs` to update the `NuGetForUnityVersion` constant.\n\n2. Create a Release (after merging the version changes):\n\n    - Go to the GitHub Releases page.\n    - Click \"Draft a new release\" and use the auto-generated release notes.\n\n3. Upload Unity Package:\n\n    - Download the generated `unitypackage` from the GitHub Action.\n    - Manually upload it to the release page.\n\n### Development Environment Setup\n\nYou can use any version of Unity to develop NuGetForUnity but you should only use features available in Unity version 2018.3+. The easiest way to edit and test code using a newer Unity version is by installing NuGetForUnity as a local package like in [TestProjects/ImportAndUseNuGetPackages](src/TestProjects/ImportAndUseNuGetPackages).\n\n### Running Unit Tests\n\nTo run Unit-Tests you need Unity version 2018.4.30f1 as we support Unity version 2018.3+. Then open the [NuGetForUnity.Tests](src/NuGetForUnity.Tests) project and run the tests using Unity Test Runner. Unit Tests are also run for each pull request using a [GitHub Action](.github/workflows/main.yml).\n\n### Code Style\n\nThe code style of NuGetForUnity is based on the [Microsoft C# Coding Conventions](https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions), but with some slight adjustments so we don't use prefixes for naming fields `private IWorkerQueue workerQueue;` instead of `private IWorkerQueue _workerQueue;`. The naming convention and some other coding conventions are checked using code analyzers (e.g. [StyleCop](https://www.nuget.org/packages/StyleCop.Analyzers)) or the IDE. The configuration for them are in the [.editorconfig](.editorconfig) and some are inside [Directory.Build.props](src/Directory.Build.props).\n\n#### Auto Formatter\n\nTo ensue a consistent code style we use [pre-commit](https://pre-commit.com/). It includes running [ReSharper Command Line Tools (JetBrains.ReSharper.GlobalTools)](https://www.jetbrains.com/resharper/features/command-line.html) to format C# code and ensures file-layout (e.g. places fields at the top of the file). To install the pre-commit hook just use the following commands or follow the documentation at [pre-commit](https://pre-commit.com/).\n\n```PowerShell\n# Install the pre-commit tool, needs python including pip.\npip install pre-commit\n\n# Enable the pre-commit hook so the auto-formatter runes on every commit. Need to be run inside the repository root.\npre-commit install\n```\n\nThe auto-formatter can also be run manually using [format-staged.ps1](tools/format-staged.ps1) or [format-all.ps1](tools/format-all.ps1).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0478515625,
          "content": "MIT License\n\nCopyright (c) 2018 Patrick McCarthy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.8642578125,
          "content": "[![openupm](https://img.shields.io/npm/v/com.github-glitchenzo.nugetforunity?label=openupm&registry_uri=https://package.openupm.com)](https://openupm.com/packages/com.github-glitchenzo.nugetforunity/) ![main github action workflow](https://github.com/GlitchEnzo/NuGetForUnity/actions/workflows/main.yml/badge.svg) [![MIT license](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE) [![GitHub Release](https://img.shields.io/github/v/release/GlitchEnzo/NuGetForUnity.svg)](https://github.com/GlitchEnzo/NuGetForUnity/releases/latest)\n\n# What is NuGetForUnity?\n\nNuGetForUnity is a NuGet client built from scratch to run inside the Unity Editor. NuGet is a package management system which makes it easy to create packages that are distributed on a server and consumed by users. NuGet supports [semantic versioning](http://semver.org/) for packages as well as dependencies on other packages.\n\nYou can learn more about NuGet here: [nuget.org](https://www.nuget.org/)\n\nNuGetForUnity provides a visual editor window to see available packages on the server, see installed packages, and see available package updates. A visual interface is also provided to create and edit _.nuspec_ files in order to define and publish your own NuGet packages from within Unity.\n\n<img alt=\"Online Packages Tap\" src=\"docs/screenshots/online.png\" height=\"500px\" />\n\n# How do I install NuGetForUnity?\n\n<details>\n<summary>Install via OpenUPM</summary>\nThe package is available on the <a href=\"https://openupm.com/packages/com.github-glitchenzo.nugetforunity/\">openupm</a> registry. So you can install it via openupm-cli or manually using a scoped registry see documentation at <a href=\"https://openupm.com/packages/com.github-glitchenzo.nugetforunity/\">openupm</a>.\n\n```\nopenupm add com.github-glitchenzo.nugetforunity\n```\n\n</details>\n\n<details>\n<summary>Install as GIT dependency via Package Manager</summary>\n\n#### Unity 2019.3 or newer\n\n1. Open Package Manager window (Window | Package Manager)\n1. Click `+` button on the upper-left of a window, and select \"Add package from git URL...\"\n1. Enter the following URL and click `Add` button\n\n```\nhttps://github.com/GlitchEnzo/NuGetForUnity.git?path=/src/NuGetForUnity\n```\n\n> **_NOTE:_** To install a concrete version you can specify the version by prepending #v{version} e.g. `#v2.0.0`. For more see [Unity UPM Documentation](https://docs.unity3d.com/Manual/upm-git.html).\n\n#### Unity 2019.2 or earlier\n\n1. Close Unity Editor\n1. Open Packages/manifest.json by any Text editor\n1. Insert the following line after `\"dependencies\": {`, and save the file.\n\n    ```json\n    \"com.glitchenzo.nugetforunity\": \"https://github.com/GlitchEnzo/NuGetForUnity.git?path=/src/NuGetForUnity\",\n    ```\n\n1. Reopen Unity project in Unity Editor\n\n</details>\n\n<details>\n<summary>Install via .unitypackage file</summary>\n\nInstall the provided Unity package into your Unity project. Located [here](https://github.com/GlitchEnzo/NuGetForUnity/releases).\n\nDownload the `*.unitypackage` file. Right-click on it in File Explorer and choose \"Open in Unity.\"\n\n</details>\n\n# How do I use NuGetForUnity?\n\nTo launch, select **NuGet → Manage NuGet Packages**\n\n<img alt=\"Menu Items\" src=\"docs/screenshots/menu_item.png\" height=\"170px\" />\n\nAfter several seconds (it can take some time to query the server for packages), you should see a window like this:\n\n<img alt=\"Online Packages Tap\" src=\"docs/screenshots/online.png\" height=\"500px\" />\n\nThe **Online** tab shows the packages available on the NuGet server.\n\nEnable **Show Prerelease** to list prerelease versions of packages (alpha, beta, release candidate, etc).\nDisable **Show Prerelease** to only show stable releases.\n\nType a search term in the **Search** box to filter what is displayed.\n\nPress the **Refresh** button to refresh the window with the latest query settings. (Useful after pushing a new package to the server and wanting to see it without closing and reopening the window.)\n\nThe name of the package, publisher, number of downloads and description are displayed.\n\nClick the **View License** after expanding **Details** to open the license in a web browser.\n\nClick the **Install** to install the package version specified in the dropdown list next to the button.\nNote: If the package is already installed, the currently installed version will be displayed in the upper right corner instead.\nIf the **Install** button is disabled, it means the package is already imported by Unity.\n\nYou can also select multiple packages for installation and install them all at once.\n\nIn addition to manual selection you can also copy a list of packageIds that you need to install, separated by new line or comma, and simply click the \"Select all from clipboard\" button at the top right to add them all to the selection.\nNote that if the package is already installed or available in Unity it will not show up in the selected list.\n\nThe **Installed** tabs shows the packages already installed in the current Unity project.\n\n<img alt=\"Installed Packages Tap\" src=\"docs/screenshots/installed.png\" height=\"500px\" />\n\nThe **Installed packages** part of the list shows packages directly installed as project dependencies.\n\nThe **Implicitly installed packages** part shows packages that are installed as transitive dependencies.\n\nClick the **Uninstall** button to uninstall the package.\nWhen uninstalling an **explicitly** installed package, all of its dependencies that are not a dependency of any other package or the project itself will also be uninstalled.\n\nIf **Add as explicit** is clicked on an **implicitly** installed package, it will be moved to the first part of the list and will **not** be automatically uninstalled in a scenario described above.\n\nThe **Updates** tab shows the packages currently installed, and offers options to update to available higher versions or downgrade to lower versions.\n\nIf **Show Downgrades** is not checked, all packages that have available versions that are higher than the currently installed version will be shown, and there will be a dropdown list next to **Update** button with available versions for update.\n\n<img alt=\"Updates Packages Tab Update\" src=\"docs/screenshots/updates.png\" height=\"500px\" />\n\nThe **Update All** button is shown only if **Show Downgrades** is not checked, and it will update all packages with versions currently selected in their respective dropdown lists.\n\nSimilarly, if **Show Downgrades** is checked, all packages that have available versions that are lower than the currently installed version will be shown, and there will be a dropdown list next to **Downgrade** button with available versions for downgrade.\n\n<img alt=\"Updates Packages Tab Downgrades\" src=\"docs/screenshots/updates_showdowngrades.png\" height=\"500px\" />\n\nBy default, the selected version in the dropdown list is the **highest newer** or **highest lower** version, depending on the **Show Downgrades** checkbox.\n\nClick the **Update** (or **Downgrade**) button to uninstall the current package and install the new package.\n\n# How does NuGetForUnity work?\n\nNuGetForUnity loads the _NuGet.config_ file in the Unity project (automatically created if there isn't already one) in order to determine the server it should pull packages down from and push packages up to. By default, this server is set to the `nuget.org` package source.\n\n<details>\n<summary>The default NuGet.config file:</summary>\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n    <packageSources>\n        <clear />\n        <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\n    </packageSources>\n    <activePackageSource>\n        <add key=\"All\" value=\"(Aggregate source)\" />\n    </activePackageSource>\n    <config>\n        <add key=\"repositoryPath\" value=\"./Packages\" />\n    </config>\n</configuration>\n```\n\n</details></br>\n\nYou can change this to any other NuGet server (such as NuGet.Server or ProGet - see below). The **NuGet → Restore Packages** menu item is useful if you edited the _NuGet.config_ file. See more information about _NuGet.config_ files here: [https://docs.nuget.org/consume/nuget-config-settings](https://docs.nuget.org/consume/nuget-config-settings)\n\n## Directory structure (placement of configuration files and installed packages)\n\nNuGetForUnity supports two different folder structures for defining where the configuration files _NuGet.config_, _packages.config_, and the downloaded `*.dll` files of the NuGet packages are stored. The placement can be changed in the `NuGet For Unity` settings UI.\n\n### Custom within Assets\n\nThe _NuGet.config_ file will be placed in `<Unity Project Location>/Assets`, and the placement of the _packages.config_ file and the installed packages can be changed using configuration variables inside the _NuGet.config_ file. The path where NuGetForUnity installs packages, the local repository path, is defined in the _NuGet.config_ file (`repositoryPath`). By default, this is set to the `Assets/Packages` folder. The configured path can either be a full path or a relative path based on the project's Assets folder. Note: You'll probably want your Packages folder to be ignored by your version control software to prevent NuGet packages from being versioned in your repository.\n\n<details>\n<summary>Example directory structure:</summary>\n\n```plaintext\n<Unity Project Location>\n├── Assets\n│   ├── NuGet.config\n│   ├── packages.config\n│   └── Packages\n│       └── Serilog.2.12.0\n│           ├── icon.png\n│           └── lib\n│               └── netstandard2.1\n│                   └── Serilog.dll\n```\n\n</details>\n\n### In Packages folder\n\nAll configuration files and the installed packages are placed inside `<Unity Project Location>/Packages/nuget-packages`. This way, the `Assets` directory will not contain any files. In this placement method, the path to the _packages.config_ file and the installed packages directory cannot be changed.\n\n<details>\n<summary>Example directory structure:</summary>\n\n```plaintext\n<Unity Project Location>\n├── Packages\n│   └── nuget-packages\n│       ├── NuGet.config\n│       ├── packages.config\n│       └── InstalledPackages\n│           └── Serilog.2.12.0\n│               ├── icon.png\n│               └── lib\n│                   └── netstandard2.1\n│                       └── Serilog.dll\n```\n\n</details>\n\n## Content of _packages.config_ file\n\nWhen a package is installed, the _packages.config_ file in the project is automatically updated with the specific package information, as well as all of the dependencies that are also installed. This allows for the packages to be restored from scratch at any point. The `Restore` operation is automatically run every time the project is opened or the code is recompiled in the project. It can be run manually by selecting the **NuGet → Restore Packages** menu item.\n\n<img alt=\"Menu Items\" src=\"docs/screenshots/menu_item.png\" height=\"170px\" />\n\nNote: Depending on the size and number of packages you need to install, the `Restore` operation could take a _long_ time, so please be patient. If it appears the Unity isn't launching or responding, wait a few more minutes before attempting to kill the process.\n\n## Verbose Logging\n\nIf you are interested in the process NuGetForUnity follows or you are trying to debug an issue, you can force NuGetForUnity to use verbose logging to output an increased amount of data to the Unity console. Either check the `Use Verbose Logging` checkbox in the `NuGet For Unity` settings window or add the line `<add key=\"verbose\" value=\"true\" />` to the `<config>` element in the _NuGet.config_ file. You can disable verbose logging by either setting the value to false or completely deleting the line.\n\n## Caching\n\nThe _.nupkg_ files downloaded from the NuGet server are cached locally in the current user's Application Data folder `%localappdata%\\NuGet\\Cache` (Windows: `C:\\Users\\[username]\\AppData\\Local\\NuGet\\Cache`, Mac/Linux: `~/.local/share/NuGet/Cache`). The cache location can be overwritten by setting the `NuGetCachePath` environment variable. Packages previously installed are installed via the cache folder instead of downloading it from the server again.\n\n# Advanced settings\n\n## Use custom NuGet server\n\nThe default configuration uses `nuget.org` but package sources hosted on other servers should also work. Some need some special settings. The setting can be either set using configuration UI **NuGet → Preferences** or in the _NuGet.config_. Some examples:\n\n### Azure Artifacts / GitHub Packages\n\nThey require the `supportsPackageIdSearchFilter` set to `false` e.g.:\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n    <packageSources>\n        <add key=\"github\" value=\"https://nuget.pkg.github.com/NAMESPACE/index.json\" supportsPackageIdSearchFilter=\"false\" />\n    </packageSources>\n    <packageSourceCredentials>\n        <github>\n            <add key=\"userName\" value=\"USERNAME\" />\n            <add key=\"clearTextPassword\" value=\"TOKEN\" />\n        </github>\n    </packageSourceCredentials>\n    ...\n</configuration>\n```\n\n### JFrog Artifactory\n\nRequires `protocolVersion` set to `3` the other required settings like `packageDownloadUrlTemplateOverwrite` should be automatically detected / configured.\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n    <packageSources>\n        <add\n            key=\"Artifactory\"\n            value=\"https://company.com/artifactory/api/nuget/v3/PROJECT\"\n            protocolVersion=\"3\"\n            packageDownloadUrlTemplateOverwrite=\"https://company.com/artifactory/api/nuget/v3/PROJECT/registration-semver2/Download/{0}/{1}\"\n            updateSearchBatchSize=\"1\"\n        />\n    </packageSources>\n    <packageSourceCredentials>\n        <Artifactory>\n            <add key=\"userName\" value=\"USERNAME\" />\n            <add key=\"clearTextPassword\" value=\"Password\" />\n        </Artifactory>\n    </packageSourceCredentials>\n</configuration>\n```\n\n### Storing credentials outside of the project `NuGet.config` file\n\nWhen using a custom NuGet server that requires a `UserName` and a `Password`, you probably wouldn't store it in the `NuGet.config` file that is stored in the Unity Project as it will be committed to source control. Therefore, we support loading the `packageSourceCredentials` section from the system or user-specific `nuget.config` file. The storage location of the system or user-specific `nuget.config` files are documented at [Microsoft's NuGet Configuration](https://learn.microsoft.com/en-us/nuget/consume-packages/configuring-nuget-behavior) (e.g., on Windows `%AppData%\\NuGet\\NuGet.Config`).\n\n## Disable automatic referencing of assemblies\n\nTo disable the automatic referencing of assemblies of a NuGet package you can set the `autoReferenced` attribute of a package inside the `packages.config` to `false`. _Currently this setting is not available from UI._\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<packages>\n    <package id=\"Serilog\" version=\"2.12.0\" autoReferenced=\"false\" />\n</packages>\n```\n\nWhen this setting is set to `false` the assemblies of the NuGet package are only referenced by Unity projects that explicitly list them inside there `*.asmdef` file.\n\n# How do I create my own NuGet packages from within Unity?\n\nFirst, you'll need to create a _.nuspec_ file that defines your package. In your Project window, right click where you want the _.nuspec_ file to go and select **NuGet → Create Nuspec File**.\n\n<img alt=\"Create Nuspec Menu\" src=\"docs/screenshots/nuspec_menu.png\" height=\"400px\" />\n\nSelect the new _.nuspec_ file and you should see something like this:\n\n<img alt=\"Nuspec editor\" src=\"docs/screenshots/nuspec_editor.png\" height=\"500px\" />\n\nInput the appropriate information for your package (ID, Version, Author, Description, etc). Be sure to include whatever dependencies are required by your package.\n\nPress the **Pack** button to pack your package into a _.nupkg_ file that is saved in the `C:\\Users\\[username]\\AppData\\Local\\NuGet\\Cache` folder.\n\nPress the **Push** button to push your package up to the server. Be sure to set the correct API Key that give you permission to push to the server (if you server is configured to use one).\n\n# How do I create my own NuGet server to host NuGet packages?\n\nYou can use [NuGet.Server](http://nugetserver.net/), [NuGet Gallery](https://github.com/NuGet/NuGetGallery), [ProGet](http://inedo.com/proget), etc to create your own NuGet server.\n\n> **Note:** NuGetForUnity doesn't use the official NuGet Client implementation form Microsoft, so authenticating against a third-party NuGet server is currently not supported for every case. If you ran into authentication issues please create a issue so we can try to implement it.\n\nAlternatively, you can use a \"local feed\" which is just a folder on your hard-drive or a network share. [Local NuGet feeds](https://learn.microsoft.com/en-us/nuget/hosting-packages/local-feeds) can have two different structures:\n\n- flat: &lt;local feed path&gt;/&lt;package id&gt;.&lt;package version&gt;.nupkg\n- hierarchical: &lt;local feed path&gt;/&lt;package id&gt;/&lt;package version&gt;/&lt;package id&gt;.&lt;package version&gt;.nupkg\n\nBe sure to set the proper URL/path in the _NuGet.config_ file and you should be good to go!\n\nRead more information here: [http://docs.nuget.org/create/hosting-your-own-nuget-feeds](http://docs.nuget.org/create/hosting-your-own-nuget-feeds)\n\n# Restoring NuGet Packages over the Command Line\n\nFor those with projects using automated build solutions like [continuous integration](https://en.wikipedia.org/wiki/Continuous_integration), NuGetForUnity provides the ability to restore your NuGet packages directly from the command line without starting Unity. This is achieved using a separate [NuGetForUnity.Cli](https://www.nuget.org/packages/NuGetForUnity.Cli) NuGet package containing a [.Net Tool](https://learn.microsoft.com/en-us/dotnet/core/tools/global-tools).\n\n## Installation\n\n- System-wide as a global tool using: `dotnet tool install --global NuGetForUnity.Cli`.\n- Project / folder wide as a local tool using: A tool manifest (local tool installation context) can be created with: `dotnet new tool-manifest`. Than install NuGetForUnity.Cli using: `dotnet tool install NuGetForUnity.Cli`. Than add the tool manifest `.config/dotnet-tools.json` to your version control system.\n\nFor more information see [.Net Tool Documentation](https://learn.microsoft.com/en-us/dotnet/core/tools/global-tools).\n\n## Usage\n\nRestore nuget packages of a single Unity Project: `dotnet nugetforunity restore <PROJECT_PATH>`. If installed as a global tool it can be called without the `dotnet` prefix: `nugetforunity restore <PROJECT_PATH>`.\n\n# Plugin support\n\nNugetForUnity has plugin support. If you open the NugetForUnity section in Unity preferences it will list the plugins you have installed in your project and you can enable them from there.\n\nPlugins are any dlls which contain NugetForUnityPlugin in their name and have a class inside them that implements the `INugetPlugin` interface. They can be placed anywhere inside the project (inside the `Assets` directory).\n\nIf you are interested in implementing a plugin read the [plugin development documentation](plugin-dev-readme.md).\n\n# Common issues when installing NuGet packages\n\nIn the .Net ecosystem Unity is relatively special as it doesn't use the standard .Net runtime from Microsoft instead, it uses a fork of the [Mono](https://docs.unity3d.com/Manual/Mono.html) runtime. For some platforms Unity even uses [IL2CPP](https://docs.unity3d.com/Manual/IL2CPP.html) that compiles all C# code to C++ code. So Unity also uses a different build-system. This can lead to some issues with NuGet packages that heavily depend on the standard .Net build-system. NuGetForUnity tries to handle most of the changes needed to allow using NuGet packages inside Unity but it is not able to resolve all issues. This section contains some common issues and potential solutions.\n\n## Version Conflicts\n\nIf two NuGet packages depend on the same package but reference different versions of it, Unity shows an error like:\n\n```\nAssembly 'Assets/Packages/System.Diagnostics.EventLog.4.7.0/lib/netstandard2.0/System.Diagnostics.EventLog.dll' will not be loaded due to errors:\nSystem.Diagnostics.EventLog references strong named System.Security.Principal.Windows Assembly references: 4.1.1.0 Found in project: 4.1.3.0.\nAssembly Version Validation can be disabled in Player Settings \"Assembly Version Validation\"\n```\n\nAs mentioned in the message this error can be suppressed by changing a setting. Just go to Edit -> Project Settings -> Player -> Scroll down and expand \"Other Settings\" than uncheck \"Assembly Version Validation\" under the \"Configuration\" section.\n\n<details>\n<summary>Screenshot of Player Settings</summary>\n<img als=\"Assembly Version Validation settings page\" src=\"docs/screenshots/assembly-version-validation-setting.png\" height=\"550px\" />\n</details>\n\n## Missing System libraries\n\nWhen targeting .Net Framework, the 'Api Compatibility Level' setting under _Edit_ -> _Project Settings_ -> _Player_ -> _Other Settings_ is set to .NET Framework, Unity doesn't include some System libraries by default. See also [Unity documentation about system libraries](https://docs.unity3d.com/Manual/dotnetProfileAssemblies.html) and [Unity documentation about .Net Profiles](https://docs.unity3d.com/Manual/dotnetProfileSupport.html). Libraries that are not imported by default are e.g. `System.Drawing`, `System.IO.Compression`, `System.IO.Compression.FileSystem` and `System.Net.Http`. If you try to use one of this libraries you get an error like:\n\n```\nThe type `HttpClient` is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\n```\n\nTo import one of the System libraries and resolve the error you need to create a `csc.rsp` file with the content e.g. to import `System.Net.Http`\n\n```\n-r:System.Net.Http.dll\n```\n\nand place it inside the containing project that requires the library (e.g. the `Assets` folder). It can also be placed in a folder that contains a `.asmdef` to only add the reference to the sub-project. For example NuGetForUnity also uses a `csc.rsp` file see [csc.rsp](src/NuGetForUnity/Editor/csc.rsp).\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugin-dev-readme.md",
          "type": "blob",
          "size": 7.7109375,
          "content": "# Plugin Development\n\n## Introduction\n\nIn order to develop a NuGetForUnity Plugin you need to start with these steps:\n\n1. Decide on your plugin name. It could just be your company's name for example.\n2. You plugin project name should be <PluginName>.NugetForUnityPlugin since the plugin loader will look for dlls which contain NugetForUnityPlugin in its name.\n3. If you are targeting Unity older than 2021.3 create a `.netstandard2.0` C# library project.\n4. If you are targeting Unity 2021.3 or newer create a `.netstandard2.1` C# library project.\n5. Add a reference to [NuGetForUnity.PluginAPI](https://www.nuget.org/packages/NuGetForUnity.PluginAPI) nuget package in your project. This package contains the interfaces that you will need to implement.\n6. Depending on the needs of your plugin you might also need to add references to `UnityEngine.dll` and `UnityEditor.dll` from your Unity installation.\n7. Write a class that implements `INugetPlugin` interface. In the `Register` method you will get a `INugetPluginRegistry` that has methods you can use to register your classes that implement custom handling of certain functionalities like installing and uninstalling the packages.\n\nNote that `INugetPluginRegistry` provides you a few things you can use in your plugin:\n\n- `IsRunningInUnity` property will be true if the plugin is being run from Unity and false if it is run from command line.\n- `PluginService` property that you can pass to your custom handlers if they need to use any of these:\n    - `ProjectAssetsDir` property that gives you the absolute path to the project's Assets directory.\n    - `LogError`, `LogErrorFormat` and `LogVerbose` methods that you can use for logging. You should not use `UnityEngine.Debug.Log` methods since they will not work if plugin is used from command line.\n\n## Extension points\n\nNuGetForUnity implements a certain extension points that your plugin can register to in order to provide custom processing. It can add new extension points in the future without breaking backward compatibility with existing ones.\n\n### Custom action buttons in Nuget window\n\nIf you want to provide a custom action button next to some packages in NuGetForUnity Manage Packages window you can write a class that implements `IPackageButtonsHandler` interface. It will give you a method bellow that you need to implement:\n\n```cs\nvoid DrawButtons(INugetPackage package, INugetPackage? installedPackage, bool existsInUnity);\n```\n\nInside this method you will get info about an online `package` that is being rendered. The `installedPackage` is that same info about the version of that package that is installed if it is installed. It will be null if the package is not currently installed in the project. The third parameter tells you if this package is actually included in Unity itself which means installing it should be disabled.\n\nInside the method you can use `GUILayout.Button` Unity method to render additional buttons that will be rendered to the left of current Install/Uninstall/Update and similar buttons.\n\nSince code here will use UnityEditor functionality which is not available when NuGetForUnity is run from command line you should only register this class in plugin registry if it running from Unity. You can do so in your `INugetPlugin.Register` implementation like this:\n\n```cs\nif (registry.IsRunningInUnity)\n{\n    var myButtonHandler = new MyButtonHandler(registry.PluginService);\n    registry.RegisterPackageButtonDrawer(linkUnlinkSourceButton);\n}\n```\n\n### Custom package installation\n\nIf you want to customize how packages are installed or just how certain files from packages are extracted and handled you can write a class that implements `IPackageInstallFileHandler` interface. It declares this method:\n\n```cs\nbool HandleFileExtraction(INugetPackage package, ZipArchiveEntry entry, string extractDirectory);`\n```\n\nWhen you implement that method you can choose if you want to handle each specific entry from `nupkg` file and how. If you handle the entry your self and you do not want the default installation of that file to occur you should return true from this method indicating that you have done all the processing you need for this entry. If you still want default installation logic to handle this entry just return false from this method.\n\n### Custom handling of package uninstall\n\nIf you implement custom handling of installation you will often also need to implement custom handling of uninstall. For that you need to write a class that implements `IPackageUninstallHandler` interface. It declares two methods:\n\n```cs\nvoid HandleUninstall(INugetPackage package, PackageUninstallReason uninstallReason);\nvoid HandleUninstalledAll();\n```\n\nThe first method is called for each package that is being uninstalled. The `uninstallReason` can be:\n\n- `IndividualUninstall` when individual package uninstall has be requested by the user.\n- `UninstallAll` when user requested all packages from the project to be uninstalled.\n- `IndividualUpdate` when user requested a package to be updated so we are uninstalling the current version.\n- `UpdateAll` when user requested all packages to be updated so we are uninstalling old versions.\n\nThe second method, `HandleUninstalledAll()` will only be called if user requested all packages to be uninstalled after all the default uninstall processing has been done. If you don't need to do anything special in this case you can leave this method empty.\n\n## New extension points\n\nIn case you have an idea for a plugin that requires some new extension points please open an issue requesting it with a description of how are you planing to use it. Pull requests implementing new extension points are also welcome as long as a clear description for their need is given.\n\n# Plugin support implementation details\n\nThis section explains how plugin support is implemented in NugetForUnity which should also explain how new extension points can be added.\n\nUnder src/NugetForUnity.CreateDll there is a NuGetForUnity.CreateDll.sln solution. That solution contains two projects: NugetForUnity.CreateDll itself and NugetForUnity.PluginAPI project. PluginAPI project defines all the interfaces that should be visible to plugin implementations. NugetForUnity project references this one since it also implements and extends some of these interfaces.\n\nPluginAPI project is setup so that it copies the built NugetForUnity.PluginAPI.dll to src/NuGetForUnity/Editor/ folder where the rest of actual source files of NugetForUnity reside. This is needed because src/NugetForUnity folder contains package.json file identifying that folder as a Unity package that can be locally referenced from the file system.\n\nCreateDll project has two classes under PluginSupport folder:\n\n- `NugetPluginSupport` which implements the `INugetPluginService`\n- `PluginRegistry` that implements `INugetPluginRegistry` and also has `InitPlugins` method that is called after Nuget.config is loaded and a list of enabled plugins is read from it.\n\n    Note that `AssemblyLoader` class it uses to load the plugins has a different implementation in `NuGetForUnity.Cli` project which is for running from command line. It also has a different implementation of `SessionStorage` class that will return \"false\" for `IsRunningInUnity` key.\n\n`NugetPreferences` constructor has code that looks for all plugins installed in the project by checking all assemblies whose name contains \"NugetForUnityPlugin\" in its name. It will list these plugins in the preferences window so each can be enables or disabled.\n\nIn order to find where are extension points executed in the code you can just search for `PluginRegistry.Instance` through the entire solution. For example you will find that `PluginRegistry.Instance.HandleFileExtraction(...)` is called in `NugetPackageInstaller.Install()` method within the loop that handles the entries for `nupkg` file that is being installed.\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}