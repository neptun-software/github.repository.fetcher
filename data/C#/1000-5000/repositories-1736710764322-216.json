{
  "metadata": {
    "timestamp": 1736710764322,
    "page": 216,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ravibpatel/AutoUpdater.NET",
      "stars": 3114,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.4521484375,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n*.snk\n\n# AutoUpdater.NET\n/AutoUpdater.NET/build/lib/\n/AutoUpdater.NET/Resources/ZipExtractor.exe\n/AutoUpdater.NET/Resources/ZipExtractor.exe.config\n/AutoUpdater.NET/Resources/ZipExtractor.runtimeconfig.json\n/AutoUpdater.NET/Resources/ZipExtractor.runtimeconfig.dev.json\n/AutoUpdater.NET/Resources/ZipExtractor.dll\n/AutoUpdater.NET/Resources/ZipExtractor.deps.json\n"
        },
        {
          "name": "AutoUpdater.NET.sln",
          "type": "blob",
          "size": 2.7119140625,
          "content": "ï»¿\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio Version 16\r\nVisualStudioVersion = 16.0.29215.179\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"AutoUpdater.NET\", \"AutoUpdater.NET\\AutoUpdater.NET.csproj\", \"{FB9E7E6B-B19F-4F37-A708-2996190CEF13}\"\r\n\tProjectSection(ProjectDependencies) = postProject\r\n\t\t{91DE558C-6DB8-429B-A069-C0491DCFF15B} = {91DE558C-6DB8-429B-A069-C0491DCFF15B}\r\n\tEndProjectSection\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{1DBD2EE1-6C31-4B24-9212-E221404F4ADE}\"\r\n\tProjectSection(SolutionItems) = preProject\r\n\t\t.gitignore = .gitignore\r\n\t\tappveyor.yml = appveyor.yml\r\n\t\tLICENSE = LICENSE\r\n\t\tREADME.md = README.md\r\n\t\tbuild.bat = build.bat\r\n\tEndProjectSection\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"ZipExtractor\", \"ZipExtractor\\ZipExtractor.csproj\", \"{EDB311FC-50D3-468B-AC36-4CDFE04D29A3}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"AutoUpdaterTest\", \"AutoUpdaterTest\\AutoUpdaterTest.csproj\", \"{5C1E186E-2622-425D-8E90-2CC6C25EDE29}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{FB9E7E6B-B19F-4F37-A708-2996190CEF13}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{FB9E7E6B-B19F-4F37-A708-2996190CEF13}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{FB9E7E6B-B19F-4F37-A708-2996190CEF13}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{FB9E7E6B-B19F-4F37-A708-2996190CEF13}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{EDB311FC-50D3-468B-AC36-4CDFE04D29A3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{EDB311FC-50D3-468B-AC36-4CDFE04D29A3}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{EDB311FC-50D3-468B-AC36-4CDFE04D29A3}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{EDB311FC-50D3-468B-AC36-4CDFE04D29A3}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{5C1E186E-2622-425D-8E90-2CC6C25EDE29}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{5C1E186E-2622-425D-8E90-2CC6C25EDE29}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{5C1E186E-2622-425D-8E90-2CC6C25EDE29}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{5C1E186E-2622-425D-8E90-2CC6C25EDE29}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {75C1F7DD-ECF1-4859-8379-89B62DF2516C}\r\n\tEndGlobalSection\r\n\tGlobalSection(SubversionScc) = preSolution\r\n\t\tSvn-Managed = True\r\n\t\tManager = AnkhSVN - Subversion Support for Visual Studio\r\n\tEndGlobalSection\r\nEndGlobal\r\n"
        },
        {
          "name": "AutoUpdater.NET",
          "type": "tree",
          "content": null
        },
        {
          "name": "AutoUpdaterTest",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) 2012-2024 RBSoft\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Logo",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.775390625,
          "content": "# ![AutoUpdater.NET](https://raw.githubusercontent.com/ravibpatel/AutoUpdater.NET/b15a8fbf5863902ec28a2adfb04829dd75dba226/Logo/Horizontal.png)\n\n[![Build status](https://ci.appveyor.com/api/projects/status/yng987o7dauk9gqc?svg=true)](https://ci.appveyor.com/project/ravibpatel/autoupdater-net)\n\nAutoUpdater.NET is a class library that allows .NET developers to easily add auto update functionality to their classic\ndesktop application projects.\n\n## The NuGet Package  [![NuGet](https://img.shields.io/nuget/v/Autoupdater.NET.Official.svg)](https://www.nuget.org/packages/Autoupdater.NET.Official/) [![NuGet](https://img.shields.io/nuget/dt/Autoupdater.NET.Official.svg)](https://www.nuget.org/packages/Autoupdater.NET.Official/)\n\n````powershell\nPM> Install-Package Autoupdater.NET.Official\n````\n\n## Supported .NET versions\n\n* .NET Framework 4.6.2 or above\n* .NET Core 3.1\n* .NET 5.0 or above\n\n## Supported Windows versions\n\n* Windows 8 or above\n* Windows version lower than 8 requires .NET Framework 4.5 or above installed for ZipExtractor to work. You can use\n  installer instead of zip file as an update file to avoid this issue.\n\nThis library only works for WinForms or WPF application projects.\n\n## How it works\n\nAutoUpdater.NET downloads the XML file containing update information from your server. It uses this XML file to get the\ninformation about the latest version of the software. If the latest version of the software is greater than the current\nversion of the software installed on User's PC then AutoUpdater.NET shows update dialog to the user. If user press the\nupdate button to update the software then It downloads the update file (Installer) from URL provided in XML file and\nexecutes the installer file it just downloaded. It is a job of installer after this point to carry out the update. If\nyou provide zip file URL instead of installer then AutoUpdater.NET will extract the contents of zip file to application\ndirectory.\n\n## Using the code\n\n### XML file\n\nAutoUpdater.NET uses XML file located on a server to get the release information about the latest version of the\nsoftware. You need to create XML file like below and then you need to upload it to your server.\n\n````xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<item>\n  <version>2.0.0.0</version>\n  <url>https://rbsoft.org/downloads/AutoUpdaterTest.zip</url>\n  <changelog>https://github.com/ravibpatel/AutoUpdater.NET/releases</changelog>\n  <mandatory>false</mandatory>\n</item>\n````\n\nThere are two things you need to provide in XML file as you can see above.\n\n* version (Required) : You need to provide latest version of the application between version tags. Version should be in\n  X.X.X.X format.\n* url (Required): You need to provide URL of the latest version installer file or zip file between url tags.\n  AutoUpdater.NET downloads the file provided here and install it when user press the Update button.\n* changelog (Optional): You need to provide URL of the change log of your application between changelog tags. If you\n  don't provide the URL of the changelog then update dialog won't show the change log.\n* mandatory (Optional): You can set this to true if you don't want user to skip this version. This will ignore Remind\n  Later and Skip options and hide both Skip and Remind Later button on update dialog.\n    * mode (Attribute, Optional): You can provide mode attribute on mandatory element to change the behaviour of the\n      mandatory flag. If you provide \"1\" as the value of mode attribute then it will also hide the Close button on\n      update dialog. If you provide \"2\" as the value of mode attribute then it will skip the update dialog and start\n      downloading and updating application automatically.\n\n   ````xml\n   <mandatory mode=\"2\">true</mandatory>\n   ````\n\n    * minVersion (Attribute, Optional): You can also provide minVersion attribute on mandatory element. When you provide\n      it, Mandatory option will be triggered only if the installed version of the app is less than the minimum version\n      you specified here.\n\n   ````xml\n   <mandatory minVersion=\"1.2.0.0\">true</mandatory>\n   ````\n\n* executable (Optional): You can provide the path of the executable if it was changed in the update. It should be\n  relative to the installation directory of the application. For example, if the new executable is located inside the\n  bin folder of the installation directory, then you should provide it as shown below.\n\n````xml\n<executable>bin\\AutoUpdaterTest.exe</executable>\n````\n\n* args (Optional): You can provide command line arguments for Installer between this tag. You can include %path% with\n  your command line arguments, it will be replaced by path of the directory where currently executing application\n  resides.\n* checksum (Optional): You can provide the checksum for the update file between this tag. If you do this AutoUpdater.NET\n  will compare the checksum of the downloaded file before executing the update process to check the integrity of the\n  file. You can provide algorithm attribute in the checksum tag to specify which algorithm should be used to generate\n  the checksum of the downloaded file. Currently, MD5, SHA1, SHA256, SHA384, and SHA512 are supported.\n\n````xml\n<checksum algorithm=\"MD5\">Update file Checksum</checksum>\n````\n\nYou can also use the XML creator tool created by one of the user to create the XML file. You can download it\nfrom [here](https://github.com/DwainSnickles/AutoUpdater.NET.XML-Creator-master/blob/master/AutoUpdaterXML.zip).\n\n### Adding one line to make it work\n\nAfter you done creating and uploading XML file, It is very easy to add a auto update functionality to your application.\nFirst you need to add following line at the top of your form.\n\n````csharp\nusing AutoUpdaterDotNET;\n````\n\nNow you just need to add following line to your main form constructor or in Form_Load event. You can add this line\nanywhere you like. If you don't like to check for update when application starts then you can create a Check for update\nbutton and add this line to Button_Click event.\n\n````csharp\nAutoUpdater.Start(\"https://rbsoft.org/updates/AutoUpdaterTest.xml\");\n````\n\nStart method of AutoUpdater class takes URL of the XML file you uploaded to server as a parameter.\n\n> AutoUpdater.Start should be called from UI thread.\n\n### Current version detection\n\nAutoUpdater.NET uses Assembly version to determine the current version of the application. You can update it by going to\nProperties of the project as shown in following screenshot.\n\n![How to change assembly version of your .NET application?](https://rbsoft.org/images/assembly-version.png)\n\nVersion specified in XML file should be higher than Assembly version to trigger the update.\n\nIf you want to provide your own Assembly then you can do it by providing second argument of Start method as shown below.\n\n````csharp\nAutoUpdater.Start(\"https://rbsoft.org/updates/AutoUpdaterTest.xml\", myAssembly);\n````\n\n## Configuration Options\n\n### Provide installed version manually\n\nIf you don't want AutoUpdater.NET to determine the installed version from assembly then you can provide your own version\nby assigning it to InstalledVersion field as shown below.\n\n````csharp\nAutoUpdater.InstalledVersion = new Version(\"1.2\");\n````\n\n### Download Update file and XML using FTP\n\nIf you like to use ftp XML URL to check for updates or download the update file then you can provide you FTP credentials\nin alternative Start method as shown below.\n\n````csharp\nAutoUpdater.Start(\"ftp://rbsoft.org/updates/AutoUpdaterTest.xml\", new NetworkCredential(\"FtpUserName\", \"FtpPassword\"));\n````\n\nIf you are using FTP download URL in the XML file then credentials provided here will be used to authenticate the\nrequest.\n\n### Check for updates synchronously\n\nIf you want to check for updates synchronously then set Synchronous to true before starting the update as shown below.\n\n````csharp\nAutoUpdater.Synchronous = true;\n````\n\n### Disable Skip Button\n\nIf you don't want to show Skip button on Update form then just add following line with above code.\n\n````csharp\nAutoUpdater.ShowSkipButton = false;\n````\n\n### Disable Remind Later Button\n\nIf you don't want to show Remind Later button on Update form then just add following line with above code.\n\n````csharp\nAutoUpdater.ShowRemindLaterButton = false;\n````\n\n### Ignore previous Remind Later or Skip settings\n\nIf you want to ignore previously set Remind Later and Skip settings then you can set Mandatory property to true. It will\nalso hide Skip and Remind Later button. If you set Mandatory to true in code then value of Mandatory in your XML file\nwill be ignored.\n\n````csharp\nAutoUpdater.Mandatory = true;\n````\n\n### Forced updates\n\nYou can enable forced updates by setting Mandatory property to true and setting UpdateMode to value of `Mode.Forced`\nor `Mode.ForcedDownload`. `Mode.Forced` option will hide Remind Later, Skip and Close buttons on the standard update\ndialog. `Mode.ForcedDownload` option will skip the standard update dialog and start downloading and updating the\napplication without user interaction. `Mode.ForceDownload` option will also ignore value of OpenDownloadPage flag.\n\n````csharp\nAutoUpdater.Mandatory = true;\nAutoUpdater.UpdateMode = Mode.Forced;\n````\n\n### Basic Authentication\n\nYou can provide Basic Authentication for XML, Update file and Change Log as shown in below code.\n\n````csharp\nBasicAuthentication basicAuthentication = new BasicAuthentication(\"myUserName\", \"myPassword\");\nAutoUpdater.BasicAuthXML = AutoUpdater.BasicAuthDownload = AutoUpdater.BasicAuthChangeLog = basicAuthentication;\n````\n\n### Set User-Agent for http web requests\n\nSet the User-Agent string to be used for HTTP web requests so you can differentiate them in your web server request\nlogs.\n\n````csharp\nAutoUpdater.HttpUserAgent = \"AutoUpdater\";\n````\n\n### Enable Error Reporting\n\nYou can turn on error reporting by adding below code. If you do this AutoUpdater.NET will show error message, if there\nis no update available or if it can't get to the XML file from web server.\n\n````csharp\nAutoUpdater.ReportErrors = true;\n````\n\n### Run update process without Administrator privileges\n\nIf your application doesn't need administrator privileges to replace old version then you can set RunUpdateAsAdmin to\nfalse.\n\n````csharp\nAutoUpdater.RunUpdateAsAdmin = false;\n````\n\n### Open Download Page\n\nIf you don't want to download the latest version of the application and just want to open the URL between url tags of\nyour XML file then you need to add following line with above code.\n\n````csharp\nAutoUpdater.OpenDownloadPage = true;\n````\n\nThis kind of scenario is useful if you want to show some information to users before they download the latest version of\nan application.\n\n### Remind Later\n\nIf you don't want users to select Remind Later time when they press the Remind Later button of update dialog then you\nneed to add following lines with above code.\n\n````csharp\nAutoUpdater.LetUserSelectRemindLater = false;\nAutoUpdater.RemindLaterTimeSpan = RemindLaterFormat.Days;\nAutoUpdater.RemindLaterAt = 2;\n````\n\nIn above example when user press Remind Later button of update dialog, It will remind user for update after 2 days.\n\n### Proxy Server\n\nIf your XML and Update file can only be used from certain Proxy Server then you can use following settings to tell\nAutoUpdater.NET to use that proxy. Currently, if your Changelog URL is also restricted to Proxy server then you should\nomit changelog tag from XML file cause it is not supported using Proxy Server.\n\n````csharp\nvar proxy = new WebProxy(\"ProxyIP:ProxyPort\", true)\n{\n    Credentials = new NetworkCredential(\"ProxyUserName\", \"ProxyPassword\")\n};\nAutoUpdater.Proxy = proxy;\n````\n\n### Specify where to download the update file\n\nYou can specify where you want to download the update file by assigning DownloadPath field as shown below. It will be\nused for ZipExtractor too.\n\n````csharp\nAutoUpdater.DownloadPath = Application.StartupPath;\n````\n\n### Specify where to extract zip file containing updated files\n\nIf you are using a zip file as an update file then you can set the \"InstallationPath\" equal to the path where your app\nis installed. This is only necessary when your installation directory differs from your executable path.\n\n````csharp\nvar currentDirectory = new DirectoryInfo(Application.StartupPath);\nif (currentDirectory.Parent != null)\n{\n    AutoUpdater.InstallationPath = currentDirectory.Parent.FullName;\n}\n````\n\n### Specify relative path to executable you want to execute after update\n\nIf you are using a zip file as an update file, then you can set \"ExecutablePath\" equal to a new executable path relative\nto the installation directory. This is only necessary if your new executable path differs from current executable path.\nThe \"executable\" value defined in XML takes precedence over this value.\n\n````csharp\nAutoUpdater.ExecutablePath = \"bin/AutoUpdater.exe\";\n````\n\n### Clear application directory before extracting update file\n\nSometimes it is necessary to clear previous version files before doing an update. In this case, you can specify whether\nto clear the application directory before extracting the update file using the below code.\n\n````csharp\nAutoUpdater.ClearAppDirectory = true;\n````\n\n### Specify size of the UpdateForm\n\nYou can specify the size of the update form by using below code.\n\n````csharp\nAutoUpdater.UpdateFormSize = new System.Drawing.Size(800, 600);\n````\n\n### Change Icon of the UpdateForm\n\nYou can change the icon of the update form by using below code. It assumes that you have an image resource named Icon in\nyour project. Size of icon file should be 64x64.\n\n````csharp\nAutoUpdater.Icon = Resources.Icon;\n````\n\n### Set the owner Form / Window\n\nTo ensure the dialogs showed by the auto updater are visible and always focussed correctly related to an application\nForm or Window, it may be necessary to set an owner. You can assign a Form or WPF Window as the owner by following the\nexample below.\n\n````csharp\nAutoUpdater.SetOwner(yourMainFormOrWpfWindow);\n````\n\n### Set the TopMost property of all updater dialogs\n\nTo ensure that the dialogs displayed by the auto updater are always on top, you can set the \"TopMost\" to true, as\ndemonstrated in the code snippet below.\n\n````csharp\nAutoUpdater.TopMost = true;\n````\n\n### Change storage method of Remind Later and Skip options\n\nYou can change how AutoUpdater.NET saves the Remind Later and Skip values by assigning the PersistenceProvider. If you\ndon't provide a PersistenceProvider then it will save the values in Windows registry.\n\nIf you are using .NET 4.0 or above then you can use JsonFilePersistenceProvider instead of default\nRegistryPersistenceProvider as shown below.\n\n````csharp\nstring jsonPath = Path.Combine(Environment.CurrentDirectory, \"settings.json\");\nAutoUpdater.PersistenceProvider = new JsonFilePersistenceProvider(jsonPath);\n````\n\nYou can create your own PersistenceProvider by\nimplementing [IPersistenceProvider](https://github.com/ravibpatel/AutoUpdater.NET/blob/master/AutoUpdater.NET/IPersistenceProvider.cs)\ninterface.\n\n## Check updates frequently\n\nYou can call Start method inside Timer to check for updates frequently.\n\n### WinForms\n\n````csharp\nSystem.Timers.Timer timer = new System.Timers.Timer\n{\n    Interval = 2 * 60 * 1000,\n    SynchronizingObject = this\n};\ntimer.Elapsed += delegate\n{\n    AutoUpdater.Start(\"https://rbsoft.org/updates/AutoUpdaterTest.xml\");\n};\ntimer.Start();\n````\n\n### WPF\n\n````csharp\nDispatcherTimer timer = new DispatcherTimer {Interval = TimeSpan.FromMinutes(2)};\ntimer.Tick += delegate\n{\n    AutoUpdater.Start(\"https://rbsoft.org/updates/AutoUpdaterTestWPF.xml\");\n};\ntimer.Start();\n````\n\n## Handling Application exit logic manually\n\nIf you like to handle Application exit logic yourself then you can use ApplicationExitEvent like below. This is very\nuseful if you like to do something before closing the application.\n\n````csharp\nAutoUpdater.ApplicationExitEvent += AutoUpdater_ApplicationExitEvent;\n\nprivate void AutoUpdater_ApplicationExitEvent()\n{\n    Text = @\"Closing application...\";\n    Thread.Sleep(5000);\n    Application.Exit();\n}\n````\n\n## Handling updates manually\n\nSometimes as a developer you need to maintain look and feel for the entire application similarly or you just need to do\nsomething before update. In this type of scenarios you can handle the updates manually by subscribing to an event. You\ncan do it by adding following line with above code.\n\n````csharp\nAutoUpdater.CheckForUpdateEvent += AutoUpdaterOnCheckForUpdateEvent;\n\nprivate void AutoUpdaterOnCheckForUpdateEvent(UpdateInfoEventArgs args)\n{\n    if (args.Error == null)\n    {\n        if (args.IsUpdateAvailable)\n        {\n            DialogResult dialogResult;\n            if (args.Mandatory.Value)\n            {\n                dialogResult =\n                    MessageBox.Show(\n                        $@\"There is new version {args.CurrentVersion} available. You are using version {args.InstalledVersion}. This is required update. Press Ok to begin updating the application.\", @\"Update Available\",\n                        MessageBoxButtons.OK,\n                        MessageBoxIcon.Information);\n            }\n            else\n            {\n                dialogResult =\n                    MessageBox.Show(\n                        $@\"There is new version {args.CurrentVersion} available. You are using version {\n                                args.InstalledVersion\n                            }. Do you want to update the application now?\", @\"Update Available\",\n                        MessageBoxButtons.YesNo,\n                        MessageBoxIcon.Information);\n            }\n    \n            // Uncomment the following line if you want to show standard update dialog instead.\n            // AutoUpdater.ShowUpdateForm(args);\n    \n            if (dialogResult.Equals(DialogResult.Yes) || dialogResult.Equals(DialogResult.OK))\n            {\n                try\n                {\n                    if (AutoUpdater.DownloadUpdate(args))\n                    {\n                        Application.Exit();\n                    }\n                }\n                catch (Exception exception)\n                {\n                    MessageBox.Show(exception.Message, exception.GetType().ToString(), MessageBoxButtons.OK,\n                        MessageBoxIcon.Error);\n                }\n            }\n        }\n        else\n        {\n            MessageBox.Show(@\"There is no update available please try again later.\", @\"No update available\",\n                MessageBoxButtons.OK, MessageBoxIcon.Information);\n        }\n    }\n    else\n    {\n        if (args.Error is WebException)\n        {\n            MessageBox.Show(\n                @\"There is a problem reaching update server. Please check your internet connection and try again later.\",\n                @\"Update Check Failed\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n        }\n        else\n        {\n            MessageBox.Show(args.Error.Message,\n                args.Error.GetType().ToString(), MessageBoxButtons.OK,\n                MessageBoxIcon.Error);\n        }\n    }\n}\n````\n\nWhen you do this it will execute the code in above event when AutoUpdater.Start method is called instead of showing the\nupdate dialog.\n\n* IsUpdateAvailable (bool) :  If update is available then returns true otherwise false.\n* DownloadURL (string) : Download URL of the update file..\n* ChangelogURL (string) : URL of the webpage specifying changes in the new update.\n* CurrentVersion (Version) : Newest version of the application available to download.\n* InstalledVersion (Version) : Version of the application currently installed on the user's PC.\n* Mandatory (Mandatory) : Shows if the update is required or optional.\n\n## Handling parsing logic manually\n\nIf you want to use other format instead of XML as an AppCast file then you need to handle the parsing logic by\nsubscribing to ParseUpdateInfoEvent. You can do it as follows.\n\n````csharp\nAutoUpdater.ParseUpdateInfoEvent += AutoUpdaterOnParseUpdateInfoEvent;\nAutoUpdater.Start(\"https://rbsoft.org/updates/AutoUpdaterTest.json\");\n\nprivate void AutoUpdaterOnParseUpdateInfoEvent(ParseUpdateInfoEventArgs args)\n{\n    dynamic json = JsonConvert.DeserializeObject(args.RemoteData);\n    args.UpdateInfo = new UpdateInfoEventArgs\n    {\n        CurrentVersion = json.version,\n        ChangelogURL = json.changelog,\n        DownloadURL = json.url,\n        Mandatory = new Mandatory\n        {\n            Value = json.mandatory.value,\n            UpdateMode = json.mandatory.mode,\n            MinimumVersion = json.mandatory.minVersion\n        },\n        CheckSum = new CheckSum\n        {\n            Value = json.checksum.value,\n            HashingAlgorithm = json.checksum.hashingAlgorithm\n        }\n    };\n}\n````\n\n### JSON file used in the Example above\n\n````json\n{\n   \"version\":\"2.0.0.0\",\n   \"url\":\"https://rbsoft.org/downloads/AutoUpdaterTest.zip\",\n   \"changelog\":\"https://github.com/ravibpatel/AutoUpdater.NET/releases\",\n   \"mandatory\":{\n      \"value\":true,\n      \"minVersion\": \"2.0.0.0\",\n      \"mode\":1\n   },\n   \"checksum\":{\n      \"value\":\"E5F59E50FC91A9E52634FFCB11F32BD37FE0E2F1\",\n      \"hashingAlgorithm\":\"SHA1\"\n   }\n}\n````\n\n## Steps to build it for further development\n\nYou can follow below steps to build the project on your local development environment.\n\n* Disable signing from project properties of both AutoUpdater.NET and ZipExtractor.\n* Edit both .csproj file of AutoUpdater.NET and ZipExtractor and change following line. Use .NET version you prefer.\n\n  Before\n\n  ```xml\n  <TargetFrameworks>net462;netcoreapp3.1;net5.0-windows</TargetFrameworks>\n  ```\n\n  After\n\n  ```xml\n  <TargetFramework>net5.0-windows</TargetFramework>\n  ```\n\n* Build ZipExtractor project in \"Release\" configuration to create the executable in Resources folder. While compiling it\n  for .NET Core 3.1 or above, you have to use publish command instead of build as\n  shown [here](https://learn.microsoft.com/en-us/dotnet/core/tutorials/publishing-with-visual-studio?pivots=dotnet-7-0)\n  and copy the resulting executable to \"AutoUpdater.NET/Resources\" folder.\n* Visual Studio 2022 doesn't allow building .NET Framework 4.5 by default, so if you are using Visual Studio 2022 then\n  you can just change it to any supported .NET version, or you have to follow steps\n  from [here](https://stackoverflow.com/a/70109092/1273550) to use .NET Framework 4.5.\n"
        },
        {
          "name": "ZipExtractor",
          "type": "tree",
          "content": null
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 3.2998046875,
          "content": "version: 1.9.3.{build}\nenvironment:\n  my_version: 1.9.3\n  my_secret:\n    secure: vbPRaZLQYpGPr4BrZZ4p6TofpSZMud+FKtlpqjgO8aA=\nskip_branch_with_pr: true\nimage: Visual Studio 2022\nclone_folder: c:\\projects\\AutoUpdater.NET\nbuild: off\ninstall:\n  - nuget install secure-file -ExcludeVersion\n  - cmd: nuget restore\n  - secure-file\\tools\\secure-file -decrypt \"c:\\projects\\AutoUpdater.NET\\ZipExtractor\\ZipExtractor.snk.enc\" -secret %my_secret%\n  - secure-file\\tools\\secure-file -decrypt \"c:\\projects\\AutoUpdater.NET\\AutoUpdater.NET\\AutoUpdater.NET.snk.enc\" -secret %my_secret%\n  - msbuild \"c:\\projects\\AutoUpdater.NET\\ZipExtractor\\ZipExtractor.csproj\" /p:Configuration=Release /verbosity:minimal /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\"\n  - msbuild \"c:\\projects\\AutoUpdater.NET\\AutoUpdater.NET\\AutoUpdater.NET.csproj\" /p:OutputPath=build\\lib\\net462;TargetFramework=net462;Configuration=Release /verbosity:minimal /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\"\n  - dotnet publish --configuration Release --framework netcoreapp3.1 \"c:\\projects\\AutoUpdater.NET\\AutoUpdater.NET\\AutoUpdater.NET.csproj\" --output \"c:\\projects\\AutoUpdater.NET\\AutoUpdater.NET\\build\\lib\\netcoreapp3.1\"\n  - dotnet publish --configuration Release --framework net5.0-windows \"c:\\projects\\AutoUpdater.NET\\AutoUpdater.NET\\AutoUpdater.NET.csproj\" --output \"c:\\projects\\AutoUpdater.NET\\AutoUpdater.NET\\build\\lib\\net5.0-windows7.0\"\n  - dotnet publish --configuration Release --framework net6.0-windows \"c:\\projects\\AutoUpdater.NET\\AutoUpdater.NET\\AutoUpdater.NET.csproj\" --output \"c:\\projects\\AutoUpdater.NET\\AutoUpdater.NET\\build\\lib\\net6.0-windows7.0\"\n  - dotnet publish --configuration Release --framework net7.0-windows \"c:\\projects\\AutoUpdater.NET\\AutoUpdater.NET\\AutoUpdater.NET.csproj\" --output \"c:\\projects\\AutoUpdater.NET\\AutoUpdater.NET\\build\\lib\\net7.0-windows7.0\"\n  - dotnet publish --configuration Release --framework net8.0-windows \"c:\\projects\\AutoUpdater.NET\\AutoUpdater.NET\\AutoUpdater.NET.csproj\" --output \"c:\\projects\\AutoUpdater.NET\\AutoUpdater.NET\\build\\lib\\net8.0-windows7.0\"\n  - cmd: 7z a AutoUpdater.NET-%my_version%.zip %APPVEYOR_BUILD_FOLDER%\\AutoUpdater.NET\\build\\lib\\*\n  - ps: Remove-Item -path c:\\projects\\AutoUpdater.NET\\AutoUpdater.NET\\build\\lib\\* -include runtimes,Microsoft.Web.WebView2*,AutoUpdater.NET.deps.json -Recurse\n  - nuget pack \"c:\\projects\\AutoUpdater.NET\\AutoUpdater.NET\\build\\Autoupdater.NET.Official.nuspec\" -Verbosity detailed\n\nartifacts:\n  - path: AutoUpdater.NET-%my_version%.zip\n  - path: Autoupdater.NET.Official.%my_version%.nupkg\n\ndeploy:\n  - provider: GitHub\n    release: $(APPVEYOR_REPO_TAG_NAME)\n    description: '// TODO: Write Release Notes'\n    artifact: AutoUpdater.NET-%my_version%.zip\n    auth_token:\n      secure: 7mWsHdYoJjOZChmTq6NVAycMaurs/tAoHZUG6nBmdNKHLtqJ4c58mItRuSKUMJua\n    draft: false\n    prerelease: false\n    on:\n      branch: master                 # release from master branch only\n      appveyor_repo_tag: true        # deploy on tag push only\n\n  - provider: NuGet\n    api_key:\n      secure: nkE/u7bLXRlBGJEKORohjPizTbDTdypw5jeTfJyzNd4scE6W9c6wFfT8f4UXdNKx\n    skip_symbols: false\n    artifact: Autoupdater.NET.Official.%my_version%.nupkg\n    on:\n      branch: master                 # release from master branch only\n      appveyor_repo_tag: true        # deploy on tag push only"
        },
        {
          "name": "build.bat",
          "type": "blob",
          "size": 1.4931640625,
          "content": ":: Build ZipExtractor\nmsbuild \"ZipExtractor\\ZipExtractor.csproj\" /p:Configuration=Release /verbosity:minimal\n\n:: .NET Framework 4.6.2\nmsbuild \"AutoUpdater.NET\\AutoUpdater.NET.csproj\" /p:OutputPath=build\\lib\\net462;TargetFramework=net462;Configuration=Release /verbosity:minimal\n\n:: .NET Core 3.1\ndotnet publish --configuration Release --framework netcoreapp3.1 \"AutoUpdater.NET\\AutoUpdater.NET.csproj\" --output \"AutoUpdater.NET\\build\\lib\\netcoreapp3.1\"\n\n:: .NET 5.0\ndotnet publish --configuration Release --framework net5.0-windows \"AutoUpdater.NET\\AutoUpdater.NET.csproj\" --output \"AutoUpdater.NET\\build\\lib\\net5.0-windows7.0\"\n\n:: .NET 6.0\ndotnet publish --configuration Release --framework net6.0-windows \"AutoUpdater.NET\\AutoUpdater.NET.csproj\" --output \"AutoUpdater.NET\\build\\lib\\net6.0-windows7.0\"\n\n:: .NET 7.0\ndotnet publish --configuration Release --framework net7.0-windows \"AutoUpdater.NET\\AutoUpdater.NET.csproj\" --output \"AutoUpdater.NET\\build\\lib\\net7.0-windows7.0\"\n\n:: .NET 8.0\ndotnet publish --configuration Release --framework net8.0-windows \"AutoUpdater.NET\\AutoUpdater.NET.csproj\" --output \"AutoUpdater.NET\\build\\lib\\net8.0-windows7.0\"\n\n:: Remove unnecessary files\nPowershell.exe -ExecutionPolicy Bypass -NoLogo -NoProfile -Command \"Remove-Item -path AutoUpdater.NET\\build\\lib\\* -include runtimes,Microsoft.Web.WebView2*,AutoUpdater.NET.deps.json -Recurse\"\n\n:: Create NuGet package\nnuget pack AutoUpdater.NET\\build\\Autoupdater.NET.Official.nuspec -Verbosity detailed -OutputDirectory AutoUpdater.NET\\build\n\npause"
        }
      ]
    }
  ]
}