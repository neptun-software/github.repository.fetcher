{
  "metadata": {
    "timestamp": 1736710708884,
    "page": 92,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jamesmh/coravel",
      "stars": 3977,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 5.4794921875,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n**/Properties/launchSettings.json\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/*\n!.axoCover/settings.json\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/[Pp]ackages/*\n# except build/, which is used as an MSBuild target.\n!**/[Pp]ackages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/[Pp]ackages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk \n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output \nASALocalRun/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder \n.mfractor/\n\n/DocsV2/docs/.vuepress/dist/"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.1494140625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at jamesmichaelhickey@gmail.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.5859375,
          "content": "# Contributing\n\nWhen contributing to the Coravel repo, please first discuss the change you wish to make via issue,\nemail, or any other method with the owners of this repository before making a change. \n\nPlease note the code of conduct, please follow it in all your interactions with the project.\n\n## Pull Request Process\n\n1. Create an issue.\n2. Reference the issue in the PR (by commenting with \"hashtag+Issue#\")\n3. Expect requested changes - as outlined in the PR template\n4. Once completed, an admin will merge the PR for you.\n\nThat's the important stuff! Don't forget to be nice and curteous 😉\n"
        },
        {
          "name": "Demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "DocsV2",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2018 James Hickey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "PULL_REQUEST_TEMPLATE.md",
          "type": "blob",
          "size": 0.2900390625,
          "content": "Thank you for your contribution!\nBefore submitting this PR, please consider:\n\n- If you are fixing something **other than a typo, please always create an issue first**. Otherwise, your PR will probably be rejected.\n- You have added unit tests which (a) pass and (b) sufficiently cover your changes\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.736328125,
          "content": "[![Netlify Status](https://api.netlify.com/api/v1/badges/5f511f8d-d256-4e4f-a21f-b7a444b4d4f9/deploy-status)](https://app.netlify.com/sites/coravel-docs/deploys)\n\n[![Nuget](https://img.shields.io/nuget/v/Coravel.svg)](https://www.nuget.org/packages/Coravel)\n[![NuGet](https://img.shields.io/nuget/dt/Coravel.svg)](https://www.nuget.org/packages/Coravel)\n\n\n<div align=\"center\">\n  <img src=\"./img/logo.png\" style=\"max-width:200px\" />\n</div>\n\n# Coravel\n\nCoravel helps developers get their .NET applications up and running fast by making advanced application features like _task/job scheduling, queuing, caching, mailing (and more!)_ accessible and easy to use. Comes with simple, expressive and straightforward syntax.\n\n**[You can view the official docs here.](https://docs.coravel.net/Installation/)**\n\n![Coravel Scheduler](./img/scheduledailyreport.png)\n\n## Features:\n\n### Task/Job Scheduling\n\nUsually, you have to configure a cron job or a task via Windows Task Scheduler to get a single or multiple re-occurring tasks to run.\n\nWith Coravel, you can setup all your scheduled tasks in one place using a simple, elegant, fluent syntax - in code!\n\n### Queuing\n\nCoravel gives you a zero-configuration queue that runs in-memory to offload long-winded tasks to the background instead of making your users wait for their HTTP request to finish!\n\n### Caching\n\nCoravel provides you with an easy to use API for caching in your .NET Core applications.\n\nBy default, it uses an in-memory cache, but also has database drivers for more robust scenarios!\n\n### Event Broadcasting\n\nCoravel's event broadcasting helps you to build maintainable applications who's parts are loosely coupled!\n\n### Mailing\n\nE-mails are not as easy as they should be. Luckily for you, Coravel solves this by offering:\n\n- Built-in e-mail friendly razor templates\n- Simple and flexible mailing API\n- Render your e-mails for visual testing\n- Drivers supporting SMTP, local log file or BYOM (\"bring your own mailer\") driver\n- Quick and simple configuration via `appsettings.json`\n- And more!\n\n## Samples\n\n- [Using Coravel With EF Core](https://github.com/jamesmh/coravel/tree/master/Samples/EFCoreSample)\n- [.NET Worker Service using Coravel's Task Scheduling](https://github.com/jamesmh/coravel/tree/master/Samples/WorkerServiceScheduler)\n\n## Support Me\n\nYou can support my ongoing open-source work on [BuyMeACoffee](https://www.buymeacoffee.com/gIPOyBD5N).\n\n## Quick-Start\n\nHere's how quickly you can use Coravel to begin building a basic worker service process that can issue actions at scheduled intervals:\n\n1. In terminal: `dotnet new worker -n [NameOfYourApp] -o ./[NameOfYourApp]`\n2. In terminal: `dotnet add package coravel`\n3. Replace `Program.cs` with the following:\n\n```csharp\nusing Coravel;\n\nConsole.OutputEncoding = System.Text.Encoding.UTF8;\n\nvar builder = Host.CreateApplicationBuilder(args);\nbuilder.Services.AddScheduler();\n\nvar host = builder.Build();\n\nhost.Services.UseScheduler(s =>\n{\n    s.Schedule(() => Console.WriteLine(\"It's alive! 🧟\")).EverySecond();\n});\n\nhost.Run();\n```\n4. In terminal: `dotnet run`\n\nThat's it - happy coding!\n\n## Coravel Pro\n\nIf you are building a .NET application with Entity Framework then you might want to look into [Coravel Pro](https://www.pro.coravel.net/). It is an admin panel & tools to make maintaining and managing your .NET app a breeze!\n\n- Visual job scheduling & management\n- Scaffold a CRUD UI for managing your EF entities\n- Easily configure a dashboard to show health metrics (or whatever you want)\n- Build custom tabular reports of your data\n- And more!\n\n## FAQ\n\n### How is Coravel different from Hangfire?\n\nHangfire has been around for a while - before modern .NET (Core). It's a fantastic tool that has tons of features that Coravel doesn't. Notably: persistent queues, retry mechanisms, support for many storage drivers, etc.\n\nHowever, Hangfire still (as of March 2023) does not natively support true `async/await` ([here](https://github.com/HangfireIO/Hangfire/issues/1658) and [here](https://github.com/HangfireIO/Hangfire/issues/401)). This means that using Hangfire within a web application, for example, won't be as efficient as it could be when using threads that perform I/O operations.\n\nCoravel was created with modern C# and .NET primitives in mind - such as `async/await` and .NET's built-in dependency injection utilities. This means that Coravel can be easier to configure and will be very efficient with / won't hog threads that your web application needs to respond to incoming HTTP requests.\n\n### How is Coravel different from Quartz?\n\nQuartz is an older Java library ported to .NET. It still doesn't hook into the modern .NET dependency injection tooling well. Some think that Coravel's APIs are much more succinct and understandable.\n\nFor example, compare [this sample](https://www.quartz-scheduler.net/documentation/quartz-3.x/quick-start.html#starting-a-sample-application) from their documentation with how working with Coravel is (e.g. you don't need to understand how to \"start\" and \"stop\" Coravel's scheduler, but you do have to manually work with the Quartz scheduler).\n\n### Does Coravel support persisting queued jobs to storage in case my application goes down?\n\nNo. At least, not yet. \n\nCoravel processes queued items in-memory. When your application goes down it won't allow the application to shutdown until all items are processed.\n\n### Does Coravel support retry mechanisms?\n\nCoravel's philosophy has been to work well with other .NET primitives - which means that using other libraries is easy. \n\nCoravel doesn't support retry mechanisms internally because I am very careful not to bloat Coravel with things that aren't necessary. I want to keep Coravel focused on what it does best (e.g. \"I need job scheduling, queuing, etc. without requiring extra infrastructure and complicated configuration\").\n\nFor example, you can use [Polly](https://github.com/App-vNext/Polly) within your invocables to do retries. Some people will configure a base class that inherits from `IInvocable` that has retries built-in. \n\n### Does Coravel support distributed locking?\n\nNo. However, this can again be achieved by using a battle-tested distributed locking library like [DistributedLock](https://github.com/madelson/DistributedLock). You might create an invocable's `Invoke()` like this:\n\n```csharp\npublic class TestInvocable : IInvocable\n{\n  private ApplicationDbContext _context;\n  private IDistributedLockProvider _distributedlock;\n\n  public TestInvocable(ApplicationDbContext context, IDistributedLockProvider distributedlock)\n  {\n    this._context = context;\n    this._distributedlock = distributedlock;\n  }\n\n  public async Task Invoke()\n  {\n    await using (await this._distributedlock.AcquireAsync())\n    {\n      await this._context.Test.AddAsync(new TestModel() { Name = \"test name\" });\n      await this._context.SaveChangesAsync();\n    }\n  }\n}\n```\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.1103515625,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nIf you want to report a vulnerability please open an issue ☺.\n"
        },
        {
          "name": "Samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "Src",
          "type": "tree",
          "content": null
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.025390625,
          "content": "theme: jekyll-theme-cayman"
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}