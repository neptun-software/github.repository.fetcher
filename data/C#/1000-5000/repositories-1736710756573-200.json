{
  "metadata": {
    "timestamp": 1736710756573,
    "page": 200,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mono/CppSharp",
      "stars": 3173,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2626953125,
          "content": "# Explicitly declare text files you want to always be normalized and converted\n# to native line endings on checkout.\n*.c\ttext\n*.h\ttext\n*.cpp\ttext\n*.cs\ttext diff=csharp\n*.lua\ttext\n\n# Declare files that will always have CRLF line endings on checkout.\n*.sln\ttext eol=crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.8017578125,
          "content": "*.pidb\nconfigure\ninstall-sh\naclocal.m4\nconfig.status\nconfig.log\nautom4te.cache\nmissing\n*Makefile\n*Makefile.in\n*.exe\nbin/\n*.userprefs\ntests/output\nsrc/generator/generator\n*.pc\n.DS_Store\n*.user\n*.suo\n*.DotSettings\n*.sdf\n*.opensdf\n*.pdb\n*.config\n!nuget.config\n*.vcxproj\n*.filters\n*.sln\n*.metagen\n*.ilk\n*.manifest\n*.tmp\n*.cache\n*.force\n*DesignTime*\n*TemporaryGeneratedFile*\n*FileListAbsolute*\n/build/llvm/llvm-*\n/build/llvm/*.tar.gz\n/build/scripts/.vagrant\n/build/*.zip\n/build/*.pkg\n/build/vs20*\n/build/gmake\n/build/headers\n/build/config.props\n/build/premake/premake5*\n/build/gen\n/artifacts\n/deps/llvm\n/external\n/extra\n/.idea/\n/include/include\n/include/libc\n/include/libcxx\n/include/libunwind\n/include/linux\n/site\n/wip\n/.vs\n/.vscode\n\n# Nuget: do not include produced packages\n/build/nuget/*.nupkg\n/build/nuget/tools/*\n\n**/obj"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 56.443359375,
          "content": "## [1.0.1] - 2021-12-30\n\n- Generate valid C# for independent specialisations with nested fields\n\n- Don't revisit parameters when checking to ignore\n\n- Generate valid C# for templates with external specializations only\n\n- Drop CI with windows 32-bit because of premake\n\n- Generate valid C# for nested in external specializations\n\n- Generate valid C# for independent external specializations\n\n- Generate valid C# for nested external specializations\n\n- Generate valid C# for unresolvable base templates\n\n- Generate valid C# for classes with dependent fields nested in templates with independent fields\n\n- Generate valid C++ for redeclaration of friends\n\n- Generate valid C++ for specialisations with void\n\n- Generate valid C# for pure functions returning or taking dependent pointers\n\n- Fix a crash when processing templates with variable arguments (#1641)\n\n- Report errors when linking of generated C++ fails\n\n- Ensure complete classes in class templates\n\n- Print C++ for some kinds of non-type template parameters\n\n- Always ignore functions returning unsupported specializations\n\n- Generate valid C# for unions in templates with non-type args\n\n- Fix a test for the new msvc in vs 2022\n\n- Match names of parameters in templates to their specializations\n\n- Work around adding an STD name-space to a custom header\n\n- Generate valid C# for fields with types system template specializations\n\n- Generate valid C# for variables which use float\n\n- Generate valid C# for variables with > 1 arg\n\n- Generate valid C++ for variadic functions\n\n- Fix C# layouts for classes with nameless unions\n\n- Generate valid C# for copy ctors with extra args\n\n- Generate valid C# for destructors of templates with dependent fields\n\n- Don't generate or move ignored specializations\n\n- Rename templates only used through aliases\n\n- Generate valid C# for internal fields of type external specialization\n\n- Generate valid C# for static object-typed fields\n\n- Trim specializations only used in ignored types\n\n- Instantiate specialized classes nested in templates\n\n- Generate valid C++ for protected inline functions\n\n- Generate valid C++ for parameters by value\n\n- Generate valid C++ for conversion operators in name-spaced classes\n\n\n## [1.0.0] - 2021-10-12\n\n- Add built-in compilation of extra symbols\n\n- Fix naming for function pointers with strings\n\n- Ignore external (no module) translation units\n\n- Fix instantiation of specializations not to crash\n\n- Generate valid C# for default args: typedefed refs to enums assigned empty ctors\n\n- Extend finding of functions to also get overloads\n\n- Ensure valid C# for default args assigned secondary bases\n\n- Generate valid C++ for protected ctors of pure classes\n\n- Generate valid C# for constants in namespaceless modules\n\n- Generate valid C# for types nested in external typedef-ed specializations\n\n- Generate valid C# with explicit external specializations\n\n- Fix templated indexers returning objects\n\n- Generate valid C# for specializations in default args\n\n- Generate valid C++ for pure implemented dtors\n\n- Free returned by value instances, not object ones\n\n- Generate valid C# for forwarded specializations\n\n- Bind default constructors with dependent pointers\n\n- Generate valid C# for setters returning Booleans\n\n- Place returns as needed without an extra block\n\n- Generate valid C# for default params in specialisations\n\n- Resolve overloads with typedef-ed mapped params\n\n- Generate C++ deconflicted with system functions (#1626)\n\n- Don't print tags for nameless and typedef classes\n\n- Fix C4099 (class as struct) in generated C++/CLI\n\n- Bind the tag kind (struct, class, enum) of a type\n\n- Regenerate the parser bindings\n\n- Delete the C++ copy when returning by value (#1623)\n\n- Delete the longer needed patching of msvc headers\n\n- Don't evaluate dependent variables\n\n- Delete the longer needed patching of msvc headers\n\n- Update LLVM to the latest version\n\n- Fix for \"vector subscript out of range\" exception (#1621)\n\n- Fix incorrect dtor call for non-owned instances (#1615)\n\n- Fix regressed marshalling of lists in C++/CLI\n\n- Fix for Visual Studio 2019 16.10 (#1614)\n\n- Generate valid C# for public fields of typedef-ed primitive pointer\n\n- Resolve names matching those of system functions\n\n- Add a mechanism to selectively initialize allocated unmanaged memory in the default constructor.\n\n- Much improved support for marshaling const char* to string\n\n- Enhanced ExpressionEvaluator to return implicitly typed uint, long, and ulong values from EvaluateNumber when there is no literal type suffix applied to a numeric expression string.\n\n- Attempt to resolve a GitHub CI Actions isue: CI is currently failing because restore can't find NUnit and friends. The error message and google search indicate that GitHub Actions is only looking in the \"Microsoft Visual Studio Offline Packages\" cache. Add a nuget.config file to in an attempt to tell GitHub Actions to query nuget.org in addition to the offline cache.\n\n- bug fix: When generating the get accessor for a field composed of an embedded array of structs use __GetOrCreateInstance to initialize the managed array wrapper rather than __CreateInstance so that __Instance holds a pointer to the memory allocated for the array in the outer struct rather than an independent copy of that memory.\n\n- Repaired broken alignment padding generation for structs with embedded arrays of structs\n\n- Generate comments for field\n\n- Fix the regressed generation of C++ for variables\n\n- Add work-in-progress TypeScript interface bindings generator.\n\n- Add MarkEventsWithUniqueIdPass pass for global event handling.\n\n- Maintain DeclarationsList integrity by clearing item offsets.\n\n- Add CppSharp VS Code workspace.\n\n- Implement two-step initialization for QuickJS.\n\n- Add QuickJS runtime project and initial features.\n\n- Improve support for default arguments in NAPI generator.\n\n- Add support for generation of default argument expressions in C generator.\n\n- Add experimental GenerateExternalDataFields option and supporting code.\n\n- Add C code generator GenerateClassEvents for common event handling.\n\n- Introduce a scope kind stack for type printers.\n\n- Rework C enum generation for more accurate handling.\n\n- Add convenience constructor to ArrayType.\n\n- Create target directory when generating files.\n\n- Add new pass to convert C++ FastDelegate types into CppSharp delegates.\n\n\n## [0.11.1] - 2021-2-3\n\n- Restore backwards compatibility with .NET Framework\n\n- Remove looking MSVC headers up with COM\n\n- Look for the Clang headers along the main entry (#1573)\n\n\n## [0.11.0] - 2021-1-29\n\n- The NuGet package now supports Linux and macOS as well\n\n- Upgrade to .NET Core 3.1 and improve build system\n\n- Make auto-compiling of C# work with .NET Core\n\n- Adding extract interface pass\n\n- Add a log for changes per release\n\n- Fixed alias of signed char cannot be marshaled\n\n- Add missing quotes to support paths with spaces in build scripts\n\n- Ignore the still unsupported dependent type names\n\n- Rewrite GenerateEnumFromMacros helper to also look into enum items.\n\n- Fix generation of overloads in NAPI by re-ordering final calculated states.\n\n- Update expression evaluator code from latest upstream.\n\n- Improve visiting options implementation in CodeGenerator.\n\n- Clean multiline function signatures in the AST converter.\n\n- Fix generation of text blocks using NewLineKind.IfNotEmpty.\n\n- Git ignore IDEA project folders.\n\n- Change XML comments to be tested at run-time\n\n- Generate valid C++ for pointers in template args\n\n- Better detect invalid specialized functions\n\n- Simplify the marking of invalid functions\n\n- Generate valid C++ for protected constructors\n\n- Generate valid C++ for protected destructors\n\n- Only implement abstract classes in C++ for ctors/dtors\n\n- Fix test generation for QuickJS generator.\n\n- Remove unused code in QuickJS module generator.\n\n- Add enum support to QuickJS generator.\n\n- Marshaling correctness fix for enum and primitive types in NAPI.\n\n- Abstract marshaler into overridable method in NAPI sources.\n\n- Extract NAPI VarPrefix and ArgumentPrefix to base class.\n\n- Add missing clang headers\n\n- Create a single nuget package that supports windows / linux / macos\n\n- Refactor QuickJS generator structure to follow NAPI patterns.\n\n- Add initial QuickJS primitive type support and test suite.\n\n- Ensure a tested specialization is really generated\n\n- Place all output of tests in their own directories\n\n- Use C++17 in all native projects\n\n- Disable getter/setter to property pass by default in non-managed backends.\n\n- Fix forward include collector to consider value class semantics in function returns.\n\n- Factor VarPrefix and ArgumentPrefix helpers into base marshaler.\n\n- Implement basic visiting behavior in some CodeGenerator overloads.\n\n- Normalize visiting overloads to be virtual.\n\n- Flush `Module.ExternalClassTemplateSpecializations` to avoid emitting the same specialization in multiple files\n\n- Add initial Node and N-API testing infrastructure and tests.\n\n- Big update to NAPI generator with initial support for basic examples.\n\n- Add DFA/NFA state machine utility code.\n\n- Replace outdated Clang compiler flags such as `std=c++1z` and replace it with `std=c++17`\n\n- Change `GenerateSequentialLayout` default value to `true`\n\n- Simplify TU.FileRelativeDirectory by using Path.GetDirectoryName.\n\n- Update driver to only generate system modules for C# generators.\n\n- Add ILibrary.GenerateCode as a custom code generation callback.\n\n- Upgrade .NET projects to C# 8.0.\n\n- Improve generation of type printing declaration names for C language.\n\n- Rework constructor generation in C++ code generator.\n\n- Setup include dirs on the module instead of parser options in the CLI.\n\n- Improve error handling in CLI and avoid defaulting to a generator on unknown option..\n\n- Add N-API generator support to the CLI.\n\n- Extract and re-use GetIncludePath across multiple generators.\n\n- Fix TU.FileRelativeDirectory to be more robust against some paths.\n\n- Fully resolve include dirs paths in driver option validation.\n\n- Fix ShouldGenerateClassNativeField to use NeedsBase instead of HasBase.\n\n- Update Class.HasNonIgnoredBase to use the actual base class.\n\n- Fix rename pass not handling some declarations due to early return.\n\n- Manage package versions centrally\n\n- Add `LanguageVersion.CPP20` support\n\n- Only upload artifacts from master branch\n\n- Make unit tests independent of the generator\n\n- Simplify code that regenerates test bindings\n\n- Only use premake for native projects and improve c# projects.\n\n- Move GeneratorTestFixture type to its own file.\n\n- Fix typo and move alignment offsets to cpp file\n\n- Export or implement accessible functions in tests\n\n- Export symbols for indirectly accessible constructors\n\n- Publish artifacts for CI builds (#1533)\n\n- Fix importing/exporting redeclaration in symbols\n\n- CI: Add `Restore` step to make it easier to analyze build times\n\n- Don't warn repeatedly about an existing LLVM dir\n\n- Don't download LLVM if its destination exists\n\n- Fix the expression-generator after changed paths\n\n- Fix a regressive crash when generating parser bindings\n\n- Remove redundant overrides from the generated C++/CLI\n\n- Disable the msvc warning about unexported template specializations\n\n- Fix naive version comparison\n\n- Fix GCC version detection\n\n- Move all LLVM files to /build/llvm\n\n- Ignore premake5 binaries\n\n- Remove secondary Zstandard compression from LLVM packages\n\n- Show a message explaining how to build LLVM when a pre-built package is unavailable.\n\n- Fix wrong LLVM package name when GCC version is >= 10\n\n- Add LLVM commands to build.sh\n\n- Test using a specialization from a dependent module\n\n- Add install_tools target to build.sh and fix LLVM CI.\n\n- Deprecate GCC 7 and add GCC 10 build for LLVM CI.\n\n- Move generated .vcxproj files back to their original place\n\n- Add missing `-configuration` option to build.sh script\n\n- Replace Generate*.bat files with a single generate.sh which uses VS2019 by default\n\n- Remove DownloadDeps.bat file\n\n- Add build.sh and test.sh with execute permissions\n\n- Only search for MSVC toolchain in Windows\n\n- Generate correct LLVM package name regardless of the current operating system\n\n- Avoid using \"action:vs* filter because there are better ones that are more specific (#1523)\n\n- Convert the visiting options to an enum\n\n- Update CanCheckCodeGenInfo to check function types as well.\n\n- Check for a dependent expression before walking variable initializer.\n\n- Some Premake robustness fixes for Clang toolchain.\n\n- Use explicit native type printer kind in CLI headers code.\n\n- Ignore testing the incorrect marshalling of parameters typed const& to primitives\n\n- Don't check the unsupported operator= for symbols\n\n- Add initial NAPI and JS generator.\n\n- Add initial QuickJS generator.\n\n- Add C++ generator support to the CLI.\n\n- Remove artificial limitations for cross-generation in CLI.\n\n- Simplify target-specific message output code in CLI.\n\n- Add a new option to set a prefix for generated files in CLI.\n\n- Improve module naming heuristics and add an option for setting it explicitly.\n\n- Implement C support as generator kind in CLI.\n\n- Refactor string.Format calls in CLI.\n\n- Implement Method.HasSameSignature for signature comparison.\n\n- Implement Method.ToString() to help with debugging.\n\n- A temporary hack to deal with a bug in MSVC v142 - VS 2019 build tools\n\n- Don't wrap trivial constructors and destructors\n\n- Ensure bindings are regenerated as needed without using DisableFastUpToDateCheck (#1511)\n\n- Continue implementation of C++ generator.\n\n- Add pass to fix up pure C++ methods to C++ generator.\n\n- More robust C++ type printing of incomplete class declarations.\n\n- Save existing parameter when doing C++ parameter type printing.\n\n- Add initial C base generator.\n\n- Check if module exists before using it in C code generator.\n\n- More robust enum generation for C family languages in C code generator.\n\n- Fix C generator GenerateMethodSpecifier to support pure and const specifiers.\n\n- Add set of generated declarations to CLITypeReferences.\n\n- Add initial block visitor to GeneratorOutputPass.\n\n- Only add files to module if module is not null.\n\n- Add per-declaration support for decl maps.\n\n- Add BlockGenerator.NeedsNewLine helper property.\n\n- Fix class nested enums to be handled by the rename pass.\n\n- Document recently added GenerationOutputMode option.\n\n- Add TypeQualifiersMode to Type and implement in C++ type printer.\n\n- Add new VisitQualifiedType overload to visitors.\n\n- Set include path as weell as file path when creating a new TU.\n\n- Fix IsGeneratedOverride to take virtual methods into account.\n\n- Add some helper class hierarchy methods.\n\n- Fix CppMarshal WriteClassInstance to deal with incomplete classes.\n\n- Rework Generator interface and add GenerationOutputMode option.\n\n- Improve IsTypeComplete to be more robust.\n\n- Improve ignored check for decls with explicit generation kinds.\n\n- Generate acessor methods for C targets in field to property pass..\n\n- Set the correct enum integer type in GenerateEnumFromMacros.\n\n- Fix ignored base checking in CheckIgnoredDecls.\n\n- Be more strict when constructing a regex for parsing macros.\n\n- Handle enum items in rename pass.\n\n- Fix code to use BaseClass property instead of first base.\n\n- Add initial implementation of declaration maps.\n\n- Remove unsupported Visual Studio versions from generate options\n\n- Rename GenerateProjects.bat to Generate.bat\n\n- Add GenerateVS2019.bat shortcut similar to GenerateMake.bat\n\n- Prevent projects from picking up obj files that are generated sometimes (#1508)\n\n- Fix all of our warnings in the parser\n\n- Fix error in Tests.lua by requiring gmake2 module.\n\n- Add a GCC 9 build to the LLVM CI build matrix.\n\n- Fix minor issue when invoking Premake without an action.\n\n- Compress LLVM archives using zstd.\n\n- Call MSBuild in x86 build with Win32 platform.\n\n- Pass the target architecture when building LLVM.\n\n- Publish artifacts after building LLVM.\n\n- Fix VS environment paths by setting global env variables.\n\n- Do not use LLD when building LLVM under macOS.\n\n- Generate C++ for constructors of abstract types\n\n- Use NUnit3TestAdapter package (#1504)\n\n- Add a build for LLVM to the CI\n\n- Use correct C# parser bindings for windows x64 (#1501)\n\n- Avoid installing NUnit if its already installed. (#1500)\n\n- Generate code from tests where libraries appear\n\n- Fix generation of SequentialLayout structures (#1499)\n\n- Update parser bindings. (#1497)\n\n- Fix CS0162 warning about unreachable code (#1492)\n\n- Fix CS0109 warnings about new keyword not being required. (#1493)\n\n- Enable Multi-processor Compilation (MSVC)\n\n- Fix C4273 warnings about inconsistent dll linkage (#1491)\n\n- Fix warnings about unnecessary using directives. (#1489)\n\n- Fix C4251 warnings (#1487)\n\n- Avoid generating an interface with a Dispose method if we already inherit from IDisposable. (#1486)\n\n- Fix finding of symbols for members of templates\n\n- Always ignore warnings about missing PDB files\n\n- Reduce number of \"download progress\" messages. (#1482)\n\n- Mark variables with constant expressions as found\n\n- Make the CPP ABI visible only to the STD symbols\n\n- Generate valid C++ for destructors of nested types\n\n- Always use the mangled names as reported by Clang\n\n- Switch CI to GitHub Actions\n\n- Call the destructor instead of deleting the object in the generated symbols\n\n- Regenerate the parser bindings with sequential layouts (#1479)\n\n- Remove dummy variable and use discards instead available since C# 7.0 (#1478)\n\n- Fallback to LayoutKind.Explicit when a custom alignment is specified. (#1476)\n\n- Remove `Layout.GetSize()` method as it's no longer relevant (#1474)\n\n- Fix `String.CSharpSignatureType` returning incorrect type when the given type is a pointer or a reference. (#1473)\n\n- Expose if a variable is a constant expression\n\n- Fix the generation of sequential layouts\n\n- Create projects which always build generated code\n\n- Simplify the marshalling of returned pointers (#1470)\n\n- VTable: improve codegen & make it thread safe (#1469)\n\n- Create VTables class to cache delegates pointing to native virtual methods (#1468)\n\n- Improve UTF32Marshaller performance (#1467)\n\n- Improve generation of C# (#1466)\n\n- Reduce calls to ConcurrentDictionary to improve performance (#1464)\n\n- Ensure expression is a valid float constant before trying to append `f` suffix (#1465)\n\n- Fix passing of CMake options to LLVM on Windows\n\n- Update the kind of completed specializations (#1460)\n\n- Fix ambiguous conversion functions (#1458)\n\n- Prevent string destructor from being called twice when its passed by value (#1455)\n\n- Remove unsupported calling convention usage (#1454)\n\n- Fix PInvokeStackImbalance when calling C++ methods (#1453)\n\n- Load symbols at startup to avoid very expensive ResolveSymbol calls everywhere (#1447)\n\n- Fix IntPtr array marshalling bug and move hard to read code to CppSharp.Runtime (#1446)\n\n- Fix string marshalling bug and move hard to read code to CppSharp.Runtime (#1445)\n\n- Add support for const char32_t* and fix const wchar_t* in linux / osx (#1444)\n\n- Copy arrays of primitive values using System.Buffers.MemoryCopy (#1440)\n\n- Fix marshalling for bool arrays (#1439)\n\n- Fix wrong [MarshalAs(UnmanagedType)] for strings (#1438)\n\n- Remove call argument to fix broken build (#1436)\n\n- Basic support for static constexpr variables (#1435)\n\n- Add support for C++ character literals (u, U, L) (#1434)\n\n- Upgrade premake in preparation for .NET Core (#1298)\n\n- Use C# 'default literal' to avoid using a type's name that may be renamed (#1432)\n\n- Add missing `Variable.Type` null check. (#1430)\n\n- Fix generated constructor cant use `placement new` when class overloads `operator new` (#1431)\n\n- Fix generation of VS projects under non-Windows platforms.\n\n- Fix wrong marshalling for static member arrays (#1428)\n\n- Fix wrong generated destructor\n\n- Ignore non-const data() method for std types like basic_string [c++17] (#1427)\n\n- Fix crash when trying to read a CXXRecordDecl that doesn't have a definition (#1426)\n\n- RemovePass is now generic.\n\n- Added the ability to remove a built-in pass.\n\n- Fix anonymous member name colliding with enclosing type name (#1425)\n\n- Allow the users to overwrite CppSharp type maps.\n\n- Find libraries even when given with no extensions\n\n- Add an option for building with Visual Studio 2019\n\n- Fix GCC path detection for Ubuntu 20.\n\n- Move libraries to a new class for linking options\n\n- Fix memory leaks when using the driver\n\n- Simplify ClangParser by making it static\n\n- Pack the lld headers as well\n\n- Import native DLL-s (tests and parser) with MSVC\n\n- Implement and export all methods in tests\n\n\n## [0.10.5] - 2020-6-27\n\n- Don't add ABI-specific parameters when wrapping C\n\n- Prioritize public non-field properties when resolving naming conflicts\n\n- Fix patching of virtual tables for MSVC with RTTI\n\n- Free the memory of the patched v-tables\n\n- Fix parsing of member pointers with MSVC\n\n- Generate valid C# for constructors taking const&\n\n- Generate valid C# for returned function pointers\n\n- Expose returned values of non-void setters\n\n- Ensure enumerations lack conflicts when renamed\n\n- Fix generation for fields of type const reference\n\n\n## [0.10.4] - 2020-5-23\n\n- Simplify the required headers for macOS bindings\n\n- Option to allow caller to specify it does not want unchanged output files to be modified. This supports incremental build in VS. (#1373) - Ali Alamiri <ali.alamiri@sage.com>\n\n- CreateInstance factory overload to pass flag informing wrapper if it should own the native pointer passed to it. - Ali Alamiri <ali.alamiri@sage.com>\n\n- force bash use to avoid `./premake5-linux: 3: ./premake5-linux: Bad substitution` error if other default shell in the system - Lorenzo Delana <lorenzo.delana@gmail.com>\n\n- Made the original virtual tables static too\n\n- Pass native pointers to bases in the generated C#\n\n- Check type maps when printing C++ for pointers\n\n- Do not add type alias templates twice to the AST\n\n- Fix all leaks of memory in the old expressions\n\n- Add template functions to their context\n\n- Fix leaking memory by removing a useless assignment\n\n- Fix leaking the memory of an entire Clang AST\n\n- Ignore type maps when printing C++ for symbols\n\n- Implement more accurate managed type printing in C++ type printer.\n\n- Use a native type printer context when looking for type maps in CSharpSourcesExtensions.DisableTypeMap.\n\n- Use explicit type printer when printing types in C# GenerateMethodSpecifier.\n\n- Refactor CodeGenerator.GenerateMethodSpecifier to allow explicit specifier kind.\n\n- Do not check declaration access for explicitly generated declarations.\n\n- Fix TranslationUnit.FileRelativeDirectory to be more robust against null include paths.\n\n- Fix formatting to of Declaration.GenerationKind to ease debugging.\n\n- Ignore implicitly deleted copy constructor methods.\n\n- Correctly marshal constant arrays in C++/CLI (#1346)\n\n- Marshal pointer to primitive typedefs in C++/CLI (#1355) - Ali Alamiri <ali.alamiri@sage.com>\n\n- Fix a regression when renaming classes\n\n- Fix naming conflicts with nested types and members\n\n- publish the clang lib folder - Ali Alamiri <ali.alamiri@sage.com>\n\n- Implement basic support for parsing function-like macros.\n\n- Implement TranslationUnit.ToString() to help with debugging.\n\n- Add debug option and flags to the Premake build and compile scripts.\n\n- Generate valid C# for parameters typedef-ed to mapped types\n\n- Update the version of Mono used for builds (CI)\n\n- Fix the regressed C# marshalling of char*\n\n- Handle pointer to pointer param (#1343) - Ali Alamiri <ali.alamiri@sage.com>\n\n- Handle returned pointers to std::vector in C++/CLI - Ali Alamiri <ali.alamiri@sage.com>\n\n- Implement abstract templates to call virtuals\n\n- Correctly align printed information for debugging\n\n- Set the render kind of inline command comments\n\n- Fix all memory leaks in tests\n\n- Generate by ref parameters of type a pointer to enum\n\n- Use UnsupportedType description for type name instead of empty string (#1339) - Ali Alamiri <ali.alamiri@sage.com>\n\n\n## [0.10.3] - 2020-4-9\n\n- Ensure complete template specializations in AST\n\n- Add an option and checking for generation of deprecated declarations\n\n- Implement parsing and AST processing of C++ deprecated attributes\n\n- Make sure we use a native type printer for symbols code generation\n\n- Git ignore new include folders for cross generation\n\n- Fix marshaling for wchar_t in C++ generator mode\n\n- Fix includes setup for parser bindings generation in macOS host platform\n\n- Fix generation of field property setters in C++ generator\n\n- Fix FieldToProperty pass to ignore non-public properties in C++ generator\n\n- Fix declaration access for generated fields flattened from anonymous types\n\n- Change standard type maps to be more specific about its supported generators\n\n- Generate forward ref header for enum defined inside a class in C++/CLI (#1322) - Ali Alamiri\n\n- Move the GenerateInclude logic to GetTypeReference (#1319) - Ali Alamiri\n\n- By reference enum param fixes (#1321) - Ali Alamiri\n\n- Add declaration context as object to function class block - Ali Alamiri\n\n- Add blocks for ctor, dtor, and finalizer bodies. Add constructor that takes a bool from the caller to indicate if the callee should own the pointer passed to it or not - Ali Alamiri\n\n- Add generic type map handling methods for later refactoring of generators\n\n- Fix type printing of typedef qualifiers in C++ type printer\n\n- Fix C++ parser ambiguity in generation of C++ method identifiers by wrapping them in parens\n\n- Fix generation of C++ constructor for abstract classes\n\n- Fix generation of native instance constructors in C++ generator\n\n- Fix marshaling of C++ references in C++ marshaler\n\n- Minor refactoring to allow better IDE inspection and debugging\n\n- Rewrite GenerateEnumFromMacros to search through multiple translation units\n\n- Fix CppTypePrinter to check for typemaps for tag types and keep track of them\n\n- Implement a few overloads in CppTypePrinter that trigger the type maps checking code\n\n- Fix ignore type checking to take type maps into account\n\n- Fix ignored declaration checking to properties desugar field types\n\n- Fix GetterSetterToProperty pass heuristic to also detect “on” as a verb\n\n- CppTypePrinter now takes a BindingContext for further usage in type maps handling\n\n- Only generate “override” in header files for C++ generator\n\n- Guard MoveFunctionToClassPass pass registration against CLI and C# generators\n\n- Ignore generated field method acessors when processing properties in GetterSetterToProperty\n\n- Add cli namespace to header to ensure the array type does not conflict with other types called array - Ali Alamiri\n\n- Marshal non primitive fixed arrays (#1311) - Ali Alamiri\n\n- Ensure typedefs of std::vector are mapped - Ali Alamiri\n\n- Simplify the structure of the LLVM package\n\n- Always keep default constructors in the AST\n\n- Keep copy/move constructors and assignment in AST\n\n- Move the body of a template function to its header\n\n- Implement proper array printing with C array name suffix notation\n\n- Fix CLITypeReferences so it generates regular C++ code in C++ generator mode\n\n- Add CXXOperatorArityZero enum item for further usage in subsequent code\n\n- Initial C++ generator backend\n\n\n## [0.10.2] - 2020-3-28\n\n- Associate getter/setter methods with their associated property in GetterSetterToProperty pass\n\n- Added optional getter/setter pair creation for fields in FieldToProperty pass\n\n- Refactor CLI handling of enums to be based on generic C generator\n\n- Default to .h file extension in C code generator\n\n- Add helper methods to ignore and generate specific translation units\n\n- Guard a few more language-specific passes in the driver\n\n- Fix generation of multiple interfaces in C# for some edge cases\n\n- Fix templates to be abstract if any specialization is abstract\n\n- Fix TranslationUnit.FileRelativePath for invalid units\n\n- Re-use common C++ declaration type printing code in CLITypePrinter\n\n- Allow changing the default TypePrinterContextKind when creating a type printer\n\n- Remove needless pointer offsets from generated C#\n\n- Fix a crash for secondary bases with secondary bases\n\n- Fix bug related to processing of potential property methods\n\n- Ensure generated symbols can use placement new\n\n- Fix Mono not being found on the PATH on recent macOS versions\n\n- Instantiate exception specifications before reading\n\n- Update LLVM to the latest version\n\n- Fix a syntax error in CMake listing Clang modules\n\n- Enable building lld as part of LLVM\n\n- Restore modules needed for compiling with Clang\n\n- Support Visual Studio 2019 for building Clang\n\n- Update Travis to Ubuntu Xenial 18.04\n\n- Simplify and optimize the printing of pointers in C++\n\n- Fix printing of function pointers in C++\n\n- Don't export symbols for explicit specializations\n\n- Avoid invalid template specializations in tests\n\n- Update the printing of comments to the new Clang\n\n- Work around MSVC 32 crashing reading of exported symbols in Mach-O\n\n- Improve Xcode toolchain lookup to be more robust\n\n- Implement logic for -fgnuc-version= argument required by LLVM\n\n- Update LLVM to the latest version\n\n- Refactor Clang builtins directory logic and move it to the managed side\n\n- Escape C# strings correctly\n\n- Improve CS_INTERNAL so it now applies to all declarations\n\n- Print the parser target triple in verbose mode\n\n- Always re-create the Clang resource directory when building\n\n- Cleanup Clang resource directory lookup logic\n\n- Remove old workaround for testing issue that does not seem necessary anymore\n\n- Git ignore .vscode directory\n\n- Workaround Premake issue when copying the resource include directories at build time\n\n- Fix warning about #pragma once in source file\n\n- Update bootstrap tool to run against latest LLVM\n\n- Update bootstrap tool to find LLVM build directory\n\n- Add options to disable tests and examples from the build\n\n- Improve the ignoring of dependent name types\n\n- Implement UnresolvedUsingType and UnresolvedUsingTypename\n\n- Fix the tests for exception types\n\n- Switch to Xcode 11 in Travis CI\n\n- Extend printing and reading of exception types\n\n- Fix the check to ignore dependent name types\n\n- Ignore unused destructors when generating symbols\n\n- Fix the printing of \"noexcept\" in C++\n\n- Make destructors virtual in abstract classes for tests\n\n- Avoid generating abstract implementations for template classes\n\n- Fix template type checking in CovariantTypeComparer\n\n- Git ignore nested temporary obj folders\n\n- Workaround System.TypeLoad exception when running test-suite on macOS\n\n- Fix enum with zeros for hex literals\n\n- Fix the moving of free functions to classes to match by module too\n\n- Generate valid C# when an external module has an unsupported operator\n\n- Fix a possible overflown stack when ignoring\n\n- Force compilation of all functions of specializations\n\n- Fill in missed values when cloning functions\n\n- Optimize the moving of functions to classes\n\n- Delete a custom pass added as standard\n\n- Fix the C++ printing of function pointers in parameters\n\n- Eliminate generated symbols for ignored functions\n\n- Fix printing of type defs in C++\n\n- Remove the internal C# functions for virtual destructors\n\n- Give unique names to exported inlined functions\n\n- Generate symbols for methods of specializations\n\n- Optimize all passes which visited useless items\n\n- Make the pass for properties more extendable\n\n- Simplify overrides of overrides of secondary bases\n\n- Optimize calls to base getters in properties\n\n- Fix comparison of char and const char* in overloading\n\n- Optimize the pass for properties\n\n- Clarify limitations around exceptions and RTTI\n\n- Destroy returned by value std::strings\n\n- Upgrade ANSI marshalling to UTF-8 marshalling\n\n- Generate valid C# when a renamed override causes conflicts\n\n- Ensure protected nested types are accessible with multiple inheritance\n\n- Fix the regressed indentation of printed comments\n\n- Generate projects for .NET 4.7 to use new features\n\n- Simplify the generated C# for marshalling strings\n\n\n## [0.10.1] - 2019-7-4\n\n- Fix the getting of references to pointers in C#\n\n- Fix the passing of references to pointers in C#\n\n- Prefer non-mapped types when resolving ambiguous overloads\n\n- Make indexers use non-trivial copy ctors if any\n\n- Fix a memory leak when passing an indirect std::string\n\n- Build the generator before test bindings for easy testing\n\n- Fix memory leaks in the map for std::string\n\n- Fix the passing of std::string by value\n\n- Guard against null for objects passed by value\n\n- Generate valid C# for implicit conversion to const char*\n\n\n## [0.10.0] - 2019-6-25\n\n- Generate valid C# when passing a const ref to char\n\n- Generate valid C# when a secondary base has a public anonymous field\n\n- Generate valid C# when a method from a secondary base has no native symbol\n\n- Generate valid C# for typedef-ed type parameters\n\n- Ensure found type maps always contain the type sought after\n\n- Flatten anonymous types to avoid empty names\n\n- Generate valid C# for template parameters with a default value\n\n- Fix returned objects by value attributed with inalloca\n\n- Fix default arguments to only map to null if pointers\n\n- Generate valid C# for returned const void pointers\n\n- Fix regressions with void pointers and references\n\n- Generate valid C# for r-values to void pointers\n\n- Make the default build for Windows 64-bit\n\n- Sped the LLVM build on Windows up by parallelizing\n\n- Generate valid C# when a field with an anon type starts with '$'\n\n- Generate valid C# when a function is named \"get<number>\"\n\n- Enable Clang-based look-up for system includes by default\n\n\n## [0.9.2] - 2019-5-8\n\n- Fix the Windows build by not storing Unicode in std::string\n\n- Fixed type map support for typedef types\n\n- Name anonymous types after the fields which use them\n\n- Generate valid C# when std::string is only used for variables\n\n- Generate valid C# when std::string is only used for non-private fields\n\n- Support indirect parameters\n\n- Add a test for passing by value of structs with copy ctors\n\n- Add parsing and AST support for RecordArgABI information in class records.\n\n- Fix the generated C++ for Xcode 10.2\n\n- Optimize renaming of declarations named after keywords\n\n- Optimize the cleaning of invalid names\n\n- Fix a crash when a function pointer takes a function pointer\n\n- Generate valid C# for returned const char*&\n\n- Generate valid C# for overloads with types nested in templates\n\n- Fix the naming of anonymous types when 2+ types are nested 2+ levels\n\n- Remove ParserOptions.Abi since its misleading as it serves no purpose\n\n- Improved robustness when parsing C++ ABI kind\n\n\n## [0.9.1] - 2019-4-13\n\n- Generate valid C# for template indexers taking const char*\n\n- Restore removed specializations\n\n- Add a generic pointer to resolve ambiguity\n\n- Fix a crash when a function pointer is a template arg\n\n- Expose public anonymous types\n\n- Fix the generated C# for fields of type function pointer\n\n- Fix the generated C# for const char*&\n\n- Fix the pass for duplicate names not to compare return parameters\n\n- Fix the generated C# when type arguments are mapped the same\n\n- Fix typo in options: chsarp -> csharp\n\n- Fix #1191 CppSharp.CLI.exe --rtti sets -fno-rtti to clang\n\n- Fix the generated C# for a case with 2 template args\n\n- Fix the generation of properties for locations in expressions\n\n- Added statement visiting to IAstVisitor\n\n- Fix the generated C# when a dependent param has a default value\n\n- Fix ambiguous code when a nested type and a property-like method with overloads have the same name\n\n\n## [0.9.0] - 2019-3-1\n\n- Extended the AST with C++ statements and expressions.\n\n- Made public the finding of enabled type maps by strings.\n\n- Fixed the renaming of properties with the same name as their owners.\n\n- Simplified the pass for properties.\n\n- Skip ignored bases in `ClassExtensions.GetBaseProperty`.\n\n- Fixed missing options copy in ParserOptions copy constructor.\n\n- Use MSBuild when building LLVM on Windows due to PDB issues with Ninja.\n\n- Improve robustness when parsing types and decls.\n\n- Fixed indentation regressions.\n\n- Deleted useless output.\n\n- Fixed naming edge case in `GenerateProperties.GetReadWritePropertyName`.\n\n- Added `PrintModuleOutputNamespace` option to `CSharpTypePrinter`.\n\n- Fixed extraneous new lines when generating multi-line comments.\n\n- Obsoleted all hand-written types for expressions.\n\n- Use `takeError()` when handling errors in parsing libraries.\n\n- Fixed a crash with `TranslationUnit.FileName` property.\n\n- Added `ForceClangToolchainLookup` option to force to use Clang's toolchain lookup code.\n\n- Extract `ParserOptions` cloning code into a copy constructor.\n\n- Improve `ParserOptions.Verbose` to print compiler arguments.\n\n- Fixed `Options.DryRun` to not generate any binding code.\n\n- Added some helper methods in `Enumeration` to work with scoped enumerations.\n\n- Added a parsing option to skip gathering of native layout info.\n\n- Fixed the generated C# when an instance method has a parameter named \"instance\".\n\n- Fixed the generated C# for const/non-const overloads with > 1 param.\n\n- Fixed the generated C# when a ref parameter is named after a keyword.\n\n- Fixed the generation for parameters of type void**.\n\n- Fixed the generated C# for indexers in templates specialized with void*.\n\n- Fixed the generated C# for template specializations of pointers.\n\n- Fixed the generated C# for const void*& in parameters.\n\n- Fixed the generated C# when returning a non-const char*.\n\n- Fixed the generated C# for parameters initialized with {}.\n\n- Fixed the generated C# when a template is specialized with T and const T.\n\n- Fixed the generated C# when an unsigned enum is assigned a negative value.\n\n\n## [0.8.23] - 2019-1-31\n\n- Keep Clang libTooling libs when packaging LLVM.\n\n- Improve error handling in build scripts `UseClang()`.\n\n- Added .NET Core build folder to Git Ignore .\n\n- Initial integration of Clang AST viewer GUI tool.\n\n- Made an exception serializable and removed another.\n\n- Fixed the warnings in the test C++ for C# only.\n\n- Fixed a crash when parsing libraries on macOS.\n\n- Fixed error handling when parsing non-existent libraries.\n\n- Added support for building with Clang and LLD.\n\n- Switched to use csc.exe Roslyn compiler under Mono\n\n- Disable most of the support for explicit pre-C++11 ABI since we do not need it anymore\n\n- Fixed warnings in native test code.\n\n- Fixed the generation of dependent virtual methods.\n\n- Fixed overloading of operators with parameters mapped to the same type.\n\n- Extended the type maps for primitive strings to C++/CLI.\n\n- Handled int and long in maps to help resolve ambiguity.\n\n- Simplified type maps by unlinking them from declarations.\n\n- Properly hashed types to optimize their storage in maps.\n\n- Fixed right-value references creating ambiguous overloads.\n\n- Fixed the generated code in a case of ambiguous overloads.\n\n- Added type maps for primitive strings (pointers to char).\n\n- Added an option for skipping private declarations.\n\n- Tested indirect calls from native code of overrides in the target language.\n\n- Initial support for building under .NET Core.\n\n- Updated the CI on Linux to use GCC 7.\n\n- Exported all additional symbols on macOS.\n\n- Fixed error handling and message when parsing non-existent files.\n\n- Added a test for passing an std::string by value.\n\n- Fixed the marshalling of std::string with GCC 6+ on Linux.\n\n- Added a type map for char.\n\n- Make Windows10SDK detection more robust\n\n- Cached found type maps for faster look-ups.\n\n- Deleted unused and slow code.\n\n- Fixed the parsing of functions with integral template args.\n\n- Decreased the build time on the Linux CI.\n\n- Fixed a crash when parsing type aliases.\n\n- Fixed the build of the parser when its path has spaces.\n\n- Changed type maps to only return types - no strings.\n\n- Simplified type maps by using static objects to disable as needed.\n\n- Optimized the walking of the managed AST.\n\n- Optimized the generation of C# by not splitting any strings.\n\n- Optimized the walking of the AST by simplifying its search.\n\n- Fixed the late parsing of templates.\n\n- Fixed LLVM/Clang tar.gz archive extraction using 7-Zip on Windows.\n\n- Fixed Windows SDK version detection in build scripts.\n\n- Resolved ambiguity between char-like types in the generated C#.\n\n- Fixed the generated C# for templates with > 1 ctor taking a pointer to a class.\n\n- Fixed the generated C# for pure virtual functions with default arguments.\n\n- Fixed the generated C# for default arguments of type pointer to a function.\n\n- Fixed the generated C# for a certain case of two default parameters.\n\n- Fixed the generated C# for arguments with default values of \"nullptr\".\n\n- Fixed the generated C# for setters with default parameters.\n\n- Fixed the generated C# for public fields with types mapped to primitive.\n\n- Fixed the generated C# for constant references to primitives.\n\n- Upgraded the CI script to use Ubuntu 16.04.\n\n- Fixed ambiguity when the type of a parameter is mapped to a type in an overload.\n\n\n## [0.8.22] - 2018-9-15\n\n- Fixed renaming when items of an enum only differ by case.\n\n- Fixed the generated C# for destructors of abstract classes.\n\n- Stopped using methods deprecated in recent Clang.\n\n- Excluded many unused modules when building LLVM and Clang.\n\n- Worked around a missing symbol from a template specialization on macOS.\n\n- Updated to LLVM/Clang revisions 339502/339494 respectively.\n\n- Fixed the generation when a secondary base is used in more than one unit.\n\n- Fixed debugger display variable reference in Block class.\n\n\n## [0.8.21] - 2018-8-1\n\n- Only generated the system module in C# generators.\n\n- Fixed missing save of generated module template to outputs.\n\n- Fixed code generator to generate the system module even in single file per unit mode.\n\n- Silenced verbose duplicate constructor and operator warnings.\n\n- Improved the defaults of necessary generation options to improve accessibility.\n\n- Called the parser setup code in CLI.\n\n- Only included header files when scanning directories in CLI.\n\n\n## [0.8.20] - 2018-5-22\n\n- Fixed generation support for pointers to enums in C#.\n\n- Fixed a case of functions converted to methods.\n\n- Improve error handling in case of exceptions in CLI tool driver.\n\n- Added an option to the CLI tool for enabling RTTI.\n\n- Improved the  messages for errors in the CLI tool.\n\n- Added parameter index to managed marshal variables.\n\n- Changed the generated C# for const references to primitives as just primitives.\n\n- Error messages are now written to stderr.\n\n\n## [0.8.19] - 2018-1-30\n\n- Added getting of the path to Xcode based on xcode-select.\n\n\n## [0.8.18] - 2018-1-28\n\n- Do not generate wrappers for template specializations if original method in template class is ignored.\n\n- Add one more include path which Linux usually expects.\n\n- Evaluate expressions for enums generated using GenerateEnumFromMacros\n\n- Evaluate expressions when generating enum from macros - ExpressionEvaluator taken from https://github.com/codingseb/ExpressionEvaluator\n\n- Set the name-space for enums generated from macros.\n\n- Preliminary script for building 32-bit Nuget package\n\n- Field property getter returns non-value types by reference instead of by copy.\n\n- Update VS check when downloading pre-compiled LLVM packages.\n\n- Add `IgnoreConversionToProperty(pattern)` and `ForceConversionToProperty(pattern)`.\n\n- Add `UsePropertyDetectionHeuristics` option to `DriverOptions`.\n\n- Add \"run\" to verbs.txt\n\n- Added support for 16-bit wide characters (char16_t).\n\n- Fixed the generated C++ for symbols when protected classes need them.\n\n- Removed the possibility for conflicts between overloads when generating C++ for symbols.\n\n\n## [0.8.17] - 2017-12-25\n\n- Collected extra symbols in the order of their compilation.\n\n- Fixed the generated C# when a specialisation of a template used as a secondary base has an invalid function.\n\n- Fixed the generated C# when a template interface specialised with another specialisation returns a template parameter.\n\n- Fixed the generated C# when a default arg is assigned a specialisation also used as a secondary base.\n\n- Fixed a crash when a constructor takes a template or specialisation.\n\n- Fixed the generated C# for public fields with type a dependent pointer.\n\n- Enabled classes having specializations for secondary bases to call their extensions.\n\n- Fixed the generated C# for subclasses of specialisations used as secondary bases.\n\n- Fixed the generated C# when a template specialization with extensions is used for a secondary base.\n\n- Extended the multiple inheritance to work for templates.\n\n- Fixed a regression causing public fields of type specialization to be ignored.\n\n- Fixed the generated C# for templates with optional arguments.\n\n- Represented \"void\" with \"object\" for template arguments in the generated C#.\n\n- Fixed the generated C# for public fields with type a dependent function pointer.\n\n- Fixed the generated C# when a constructor has a default parameter with type an external specialisation.\n\n- Set an index when marshalling the value in setters of properties.\n\n- Fixed the generated C# when a function uses an external specialisation.\n\n- Fixed the generated C# when a base class is an external specialisation.\n\n- Fixed the generated C# for indexers with dependent keys.\n\n- Fixed the generated C# for templated indexers specialised with enums.\n\n- Add compiler/abi information to LLVM package names on linux.\n\n- Exported entire specialisations when they only have valid functions.\n\n- Considered dependent fields when generating internals for types nested in templates.\n\n- Removed extensions for non-generated template specialisations.\n\n- Fixed the generated C# when a template returns a specialisation with itself as a type arg.\n\n- Fixed the generated C# for members of types nested in templates.\n\n- Fixed the generated C# when a template is nested in another.\n\n- Add ability for managed module wrapper to reference extra assemblies.\n\n- Re-added linux include path that was removed by mistake.\n\n- Enable debug information generation for all tests.\n\n- Fix debug output not being generated when AST element had no comment.\n\n- Explicitly link to libstdc++ on linux.\n\n- All arguments passed to `build/Compile.sh` are passed to premake. Allows more fine-grained build customization when using this shell script for compiling.\n\n- Tweak linux include dirs, previous change broke GCC7 include dirs on archlinux.\n\n- Consistent class/struct keywords fixed for cases where wrapper class would contain members from several different translation units.\n\n- Fix debug output breaking generated binding code.\n\n- Completely remove `GenerateUnformatted()` method.\n\n- CI: x64 builds on msvc and sudo requirement for travis\n\n- Always generate formatted code.\n\n- Fix `Delegates` name-space being not generated. In some cases `Delegates` name-space could be attached to a name-space which is not wrapped and as a result of that `Delegates` name-space was also not generated in wrapper code resulting in a wrapper build errors. Change adds extra logic which tries to find the correct library name-space if more than one name-space is present.\n\n- Consistently declare classes/structs. Fixes issue where compilation error is produced due to file name containing constants matching class marked as value type.\n\n- Fix linking to LLVM libs on linux, when system has llvm/clang installed.\n\n- Enable cxx11 abi for GCC 4.9+ on linux.\n\n- Worked around a bug in the Mono C# compiler when casting generics.\n\n- Fixed a crash when the body of a templated function contains references to non-functions.\n\n- Use correct LLVM build dir for includes from unpackaged LLVM builds\n\n- get_llvm_build_dir() returns \"build\" subdir if it exists, if not - subdir with package name.\n\n- Fix linked libs for linux\n\n- Use correct LLVM build dir for includes from unpackaged LLVM builds.\n\n- Removed a duplicate explicit instantiation from the tests.\n\n- Cloning llvm from git replaced with downloading archives of exact commits from github. This is much faster.\n\n- Worked around duplication of types nested in templates and forwarded.\n\n- Fixed a crash when passing null as an std::string on Unix.\n\n- Force-set platform type to managed targets.\n\n- Fix linux include paths in ParserGen and CLI generator.\n\n- Fix build errors in CppSharp.Parser.Bootstrap target.\n\n- Fixed a crash when there are parsing errors.\n\n- Fixed the collection of additional symbols to ignore warnings.\n\n- Fixed the generated C# when a constructor takes a specialisation.\n\n- Fixed a possible crash when instantiating template functions in the parser.\n\n- Fixed the generated C# for templates with fields other templates not used anywhere else.\n\n- Fixed the generated C# when using std::map.\n\n- Fixed the generated C# for specialisations with an ignored specialisation as an arg.\n\n- Fixed the generated C# for specialisations only used as type arguments.\n\n- Removed extensions for internal template specialisations.\n\n- Fixed the parsing of an undeclared template specialisation with an extension method.\n\n- Validated bodies of instantiated template functions.\n\n- Added a new field accessor synth kind.\n\n- Improved IsSynthetized check to handle property setters.\n\n- Improve get base method and property methods to work with generalized declarations.\n\n- Added AssociatedDeclaration to Declaration copy constructor.\n\n- Included template specialisations only used as returned types.\n\n- Included the destructor of std::allocator to the C++ symbols.\n\n- Prevented C++ generation for invalid specialised functions.\n\n- Fixed the generated C# for fixed arrays of Booleans\n\n- Updated to LLVM/Clang revisions 318543/318538 respectively.\n\n- Fixed the script for LLVM to handle paths with spaces.\n\n- Generalized method fields to declaration associations.\n\n- Improved debugging display for declarations.\n\n- Added optional visiting of property accessors.\n\n- CodeGenerator is now an IAstVisitor.\n\n- Cleaned up the additional parser options after parsing headers.\n\n- Fixed the generated C++ for symbols to be compatible with Clang.\n\n- Fixed the generated C# when a type nested in a template is forwarded.\n\n\n## [0.8.16] - 2017-11-10\n\n- Fixed a crash when parsing unnamed declarations in name-spaces.\n\n\n## [0.8.15] - 2017-11-7\n\n- Handled any level of nesting when generating internals for specialisations in C#.\n\n- Fixed the generation of internals for template specialisations.\n\n- Ensured symbols for nested template specialisations.\n\n- Fixed the generated C++ for external template specialisations.\n\n- Completed just class template specialisations used in functions.\n\n- Fixed a regression of generating templates in C# with the option off.\n\n- Optimised the parser by skipping the system translation units.\n\n- Reused parameters between functions and their types (as Clang does).\n\n- Added an option for specifying STD types to bind.\n\n- Reduced time and memory during generation by skipping methods of most STD classes.\n\n- Improved the check for a layout on a record.\n\n- Fixed a crash when trying to get a source location for an implicit declaration.\n\n- Fixed the generated C# for a fixed array of pointers.\n\n- Removed unused STD enumerations from generation.\n\n- Fixed a crash when a comment contains regular text wrapped in <>.\n\n- Made only really used classes internal.\n\n- Fixed a typing error in the name of a function.\n\n- Ignored return parameters when fixing default arguments of overrides.\n\n- Ensured no overflown stack in the AST converter.\n\n- Fixed code generation for using template types.\n\n- Improved debugging display for Type type.\n\n- Fixed incorrectly generated bindings for class with non-type template arguments.\n\n- Fixed the generated C# for templates derived from regular dynamic classes.\n\n- Ensured all non-system template specialisations are complete.\n\n- Fixed a problem when walking the managed AST because friend templated classes were seen as declared multiple times and resulted into a crash.\n\n- Improved type notation in the manual.\n\n- Documented string marshaling behavior.\n\n- Fixed implicit class record walking in the parser.\n\n- Added a new verbose flag to the CLI tool and improved verbose handling.\n\n- Fixed duplicate generation of forward declared class.\n\n- Small cleanup and minor optimizations in ResolveIncompleteDeclsPass.\n\n- Improved the fix for handling non-type params in template specialisation types.\n\n- Fixed template parsing issue with processing of type locs.\n\n- Fixed a parser bug when dealing with DependentTemplateSpecializationTypeLoc.\n\n- Fixed an erroneous usage of LLVM cast with a regular C++ type. Only found with debug-mode LLVM build.\n\n- Fixed VS2017 system includes search error #957 (#958)\n\n\n## [0.8.14] - 2017-9-17\n\n- Added experimental support for templates.\n\n- Fixed the generated C# when a virtual function takes a fixed array.\n\n- Fixed the generated C# for fixed arrays in types of parameters.\n\n- Fixed the generated C# for virtuals taking arrays of objects.\n\n- Lookup Mono SDK path on Windows registry.\n\n- Fixed the generated C# when a virtual function takes an array.\n\n- Fixed the generated C# with 4+ modules and repetitive delegates.\n\n- Added C# marshalling of parameters of type array of const char* const.\n\n- Added C# marshalling of parameters of type array of const char*.\n\n- Fixed null arrays in C# to be passed as such to C/C++.\n\n- Added C# marshalling of parameters of type array of objects.\n\n- Added C# marshalling of parameters of type array of primitives.\n\n- Added marshalling of parameters of type array of pointers.\n\n- Fixed the generated C# for two anonymous types nested in another anonymous type.\n\n- Removed unused internals from the generated C#.\n\n- Added an example for the parser API-s.\n\n- Add C++17 to the parser options\n\n- Compile.sh script now has improved error handling.\n\n- Linux toolchain can be supplied in the same spirit in path probing on Mac.\n\n- Enabled empty arrays of non-primitives only when not using MSVC.\n\n- Ignore zero-sized constant C array types.\n\n- The compilation platform is now nullable by default and validated by the host platforms.\n\n- Added LLVM target initialization and supporting libraries for parsing inline assembly.\n\n- Fixed a crash when trying to use a VS version missing from the system.\n\n- Fixed the binding of multiple identical function pointers with a calling convention.\n\n- Got rid of anonymous names for delegates.\n\n- Fixed the calling conventions of delegates.\n\n- Ensures that if a delegate is used for a virtual as well as something else, it finally ends up as public.\n\n- Fixed the code generation when the return type of a method is a function pointer that has been used somewhere else as well.\n\n- Added Access and Calling convention to the delegate definition.\n\n- Generated properties from setters returning Booleans.\n\n- Added some aliases to options in the CLI tool.\n\n- [generator] Improved processing for C++ inline namespaces.\n\n- Fixed initial output messages in the CLI.\n\n- Generated properties from <type> get()/void get(<type>) pairs.\n\n- Restored the option for generating one C# file per unit.\n\n- Fixed the sorting of modules to also work with manually added dependencies.\n\n- Do not generated unformatted code if debug mode is enabled.\n\n- Added an option to the CLI for enabling debug mode for generated output.\n\n- Improved the directory setup in the CLI in case the path is not a file path.\n\n- Adds a new option to the CLI for automatic compilation of generated code.\n\n- Adds a new dedicated \"-exceptions\" flag to enable C++ exceptions in the CLI.\n\n- Added a new -A option to the CLI to pass compiler arguments to Clang parser.\n\n- Fixed the name of an option in the CLI.\n\n- Removed the showing of help for the CLI if we have output an error previously.\n\n- Improved error messages in the CLI.\n\n- Improve platform detection in the CLI so the current platform is set by default.\n\n- Fixed a directory check in the CLI that was throwing exceptions in Mono.\n\n- Fixed the generated C# indexers for specialisations of pointers.\n\n- Fixed the generated C# for increment and decrement operators.\n\n- Removed leftovers in the comments from unsupported custom xml tags.\n\n- Fixed the generation of symbols to check all base classes up the chain.\n\n- Printed the text from unsupported comment tags.\n\n- Fixed the generated C# for a case of a typedef of a function pointer.\n\n    Typedefs of function pointers can be written in two ways:\n\n      typedef void (*typedefedFuncPtr)();\n\n      int f(typedefedFuncPtr fptr);\n\n      typedef void (typedefedFuncPtr)();\n\n      int f(typedefedFuncPtr* fptr);\n\n      Up until now we only supported the former.\n\n- Fixed the C# generation for functions with typedefed function pointers as params\n\n- Set the name-space of a parameter to its function.\n\n- Included the comments plain text to the remarks block.\n\n- Fix the typo in LLVM.lua\n\n- Prevented projects from being generated using GenerateProjects.bat\n\n- Fixed the generated C# for setters with a reference to a primitive type.\n\n- Ensured a single element for remarks in the generated XML documentation comments.\n\n- Fixed the renaming of methods in forwarded types from secondary bases in dependencies.\n\n- Added to a method a list of its overridden methods.\n\n- Generated internals of external specialisations only if the template has template fields.\n\n- Equalised the access of overrides and their base methods.\n\n- Fixed the code generation for indexers returning a void pointer.\n\n- Fixed the generated C# when a protected constructor has a parameter with a protected type.\n\n- Fixed the generated C# when an external specialisation with a dependent field is used as a field.\n\n- Made Function a DeclarationContext to match the Clang AST.\n\n- Made the C/C++ language switches adjustable in managed code.\n\n- Added an option to enable or disable RTTI.\n\n- Fixed the generation of inlines to handle types in classes in name-spaces."
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.740234375,
          "content": "The most common form of contribution to any open source project are bug reports.\nWe always welcome them because we want to be aware of any shortcomings in our code in order to make the product better.\nHowever, as much as we would love to fix all reported issues in a timely manner, unfortunately we do not always have the resources to do so.\nTherefore we would like to ask you to help by either of:\n\n1. Fixing the problem and sending us a pull request instead of working around issues with your own custom passes or in other ways.\nIn most cases the former is no more difficult and takes just as much time. Besides, we are always here to help;\n2. Using our support options at https://github.com/mono/CppSharp#support which guarantees a much faster resolution."
        },
        {
          "name": "CppSharp.code-workspace",
          "type": "blob",
          "size": 3.12109375,
          "content": "{\n    \"folders\": [\n        {\n            \"path\": \".\"\n        }\n    ],\n    \"settings\": {\n        \"omnisharp.defaultLaunchSolution\": \"build/vs2019/CppSharp.sln\",\n        \"vssolution.altSolutionFolders\": [\n            \"build/vs2019\"\n        ],\n        \"files.associations\": {\n            \"algorithm\": \"cpp\",\n            \"typeinfo\": \"cpp\",\n            \"cmath\": \"cpp\",\n            \"complex\": \"cpp\",\n            \"cstdlib\": \"cpp\",\n            \"limits\": \"cpp\",\n            \"type_traits\": \"cpp\",\n            \"vector\": \"cpp\",\n            \"__bit_reference\": \"cpp\",\n            \"__config\": \"cpp\",\n            \"__debug\": \"cpp\",\n            \"__errc\": \"cpp\",\n            \"__functional_base\": \"cpp\",\n            \"__hash_table\": \"cpp\",\n            \"__locale\": \"cpp\",\n            \"__mutex_base\": \"cpp\",\n            \"__node_handle\": \"cpp\",\n            \"__nullptr\": \"cpp\",\n            \"__split_buffer\": \"cpp\",\n            \"__string\": \"cpp\",\n            \"__threading_support\": \"cpp\",\n            \"__tree\": \"cpp\",\n            \"__tuple\": \"cpp\",\n            \"array\": \"cpp\",\n            \"atomic\": \"cpp\",\n            \"bit\": \"cpp\",\n            \"bitset\": \"cpp\",\n            \"cctype\": \"cpp\",\n            \"cfenv\": \"cpp\",\n            \"chrono\": \"cpp\",\n            \"cinttypes\": \"cpp\",\n            \"clocale\": \"cpp\",\n            \"codecvt\": \"cpp\",\n            \"compare\": \"cpp\",\n            \"condition_variable\": \"cpp\",\n            \"csignal\": \"cpp\",\n            \"cstdarg\": \"cpp\",\n            \"cstddef\": \"cpp\",\n            \"cstdint\": \"cpp\",\n            \"cstdio\": \"cpp\",\n            \"cstring\": \"cpp\",\n            \"ctime\": \"cpp\",\n            \"cwchar\": \"cpp\",\n            \"cwctype\": \"cpp\",\n            \"deque\": \"cpp\",\n            \"exception\": \"cpp\",\n            \"forward_list\": \"cpp\",\n            \"fstream\": \"cpp\",\n            \"functional\": \"cpp\",\n            \"future\": \"cpp\",\n            \"initializer_list\": \"cpp\",\n            \"iomanip\": \"cpp\",\n            \"ios\": \"cpp\",\n            \"iosfwd\": \"cpp\",\n            \"iostream\": \"cpp\",\n            \"istream\": \"cpp\",\n            \"iterator\": \"cpp\",\n            \"list\": \"cpp\",\n            \"locale\": \"cpp\",\n            \"map\": \"cpp\",\n            \"memory\": \"cpp\",\n            \"mutex\": \"cpp\",\n            \"new\": \"cpp\",\n            \"numeric\": \"cpp\",\n            \"optional\": \"cpp\",\n            \"ostream\": \"cpp\",\n            \"queue\": \"cpp\",\n            \"random\": \"cpp\",\n            \"ratio\": \"cpp\",\n            \"regex\": \"cpp\",\n            \"set\": \"cpp\",\n            \"shared_mutex\": \"cpp\",\n            \"sstream\": \"cpp\",\n            \"stack\": \"cpp\",\n            \"stdexcept\": \"cpp\",\n            \"streambuf\": \"cpp\",\n            \"string\": \"cpp\",\n            \"string_view\": \"cpp\",\n            \"system_error\": \"cpp\",\n            \"thread\": \"cpp\",\n            \"tuple\": \"cpp\",\n            \"unordered_map\": \"cpp\",\n            \"unordered_set\": \"cpp\",\n            \"utility\": \"cpp\",\n            \"variant\": \"cpp\",\n            \"hash_map\": \"cpp\",\n            \"hash_set\": \"cpp\",\n            \"*.tcc\": \"cpp\",\n            \"memory_resource\": \"cpp\",\n            \"*.inc\": \"cpp\",\n            \"*.def\": \"cpp\",\n            \"scoped_allocator\": \"cpp\",\n            \"filesystem\": \"cpp\",\n            \"__memory\": \"cpp\"\n        },\n    },\n}"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 3.05859375,
          "content": "<Project>\r\n  <Import Project=\"build/config.props\" />\r\n\r\n  <PropertyGroup>\r\n    <RootDir>$(MSBuildThisFileDirectory)</RootDir>\r\n    <Platforms>x86;x64</Platforms>\r\n    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>\r\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>    \r\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\r\n    <RepositoryUrl>https://github.com/mono/CppSharp</RepositoryUrl>\r\n    <RepositoryCommit>$(GITHUB_SHA)</RepositoryCommit>\r\n    <Authors>João Matos, Dimitar Dobrev, Jose Torres</Authors>\r\n    <Copyright>João Matos, Dimitar Dobrev</Copyright>\r\n    <Version>$(NBGV_Version)</Version>\r\n    <AssemblyVersion>$(NBGV_AssemblyVersion)</AssemblyVersion>\r\n    <AssemblyFileVersion>$(NBGV_AssemblyFileVersion)</AssemblyFileVersion>\r\n    <AssemblyInformationalVersion>$(NBGV_AssemblyInformationalVersion)</AssemblyInformationalVersion>\r\n    <IsPackable>false</IsPackable>\r\n    <BuildDir>$(RootDir)build\\</BuildDir>\r\n    <ObjDir>$(BuildDir)obj\\</ObjDir>\r\n    <GenDir>$(BuildDir)gen\\</GenDir>\r\n    <SrcDir>$(RootDir)src\\</SrcDir>\r\n    <GlobalTargetFramework>$(TargetFramework)</GlobalTargetFramework>\r\n    <BaseIntermediateOutputPath>$(ObjDir)$(MSBuildProjectName)\\</BaseIntermediateOutputPath>\r\n    <BaseOutputPath>$(RootDir)bin\\</BaseOutputPath>\r\n    <OutputPath>$(BaseOutputPath)$(Configuration)\\</OutputPath>\r\n    <ActionDir>$(BuildDir)$(PremakeAction)\\</ActionDir>\r\n    <NativeProjectsDir>$(ActionDir)projects\\</NativeProjectsDir>\r\n    <PackageDir>$(RootDir)artifacts\\package\\</PackageDir>\r\n    <TargetDir>$(OutputPath)</TargetDir>\r\n    <LangVersion>10.0</LangVersion>\r\n    <WarningLevel>4</WarningLevel>\r\n    <DotNetCmd>dotnet</DotNetCmd>\r\n    <GeneratorFileExtension>dll</GeneratorFileExtension>\r\n    <DotNetCmd Condition=\"'$(PlatformTarget)' == 'x86' AND Exists('$(MSBuildProgramFiles32)\\dotnet\\dotnet.exe')\">\"$(MSBuildProgramFiles32)\\dotnet\\dotnet.exe\"</DotNetCmd>\r\n    <DotNetCmd Condition=\"'$(PlatformTarget)' == 'x64' AND Exists('$(ProgramW6432)\\dotnet\\dotnet.exe')\">\"$(ProgramW6432)\\dotnet\\dotnet.exe\"</DotNetCmd>\r\n    <RID Condition=\"$(IsWindows)\">win</RID>\r\n    <RID Condition=\"$(IsLinux)\">linux</RID>\r\n    <RID Condition=\"$(IsMacOSX)\">osx</RID>\r\n    <RID>$(RID)-$(PlatformTarget)</RID>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(CPPSHARP_RELEASE)' != 'true'\">\r\n    <DebugSymbols>true</DebugSymbols>\r\n    <DebugType>full</DebugType>\r\n    <Optimize>false</Optimize>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(DotNetCmd)' == 'dotnet' AND $(IsWindows)\">\r\n    <GeneratorFileExtension>exe</GeneratorFileExtension>\r\n    <DotNetCmd></DotNetCmd>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"prepack\" DependsOnTargets=\"Build\" Condition=\"'$(IsPackable)' == 'true' AND '$(Platform)' == 'x64'\">\r\n    <Copy SourceFiles=\"$(TargetDir)$(TargetFileName)\" DestinationFolder=\"$(PackageDir)ref\\$(GlobalTargetFramework)\" Condition=\"'$(ProduceReferenceAssembly)' == 'true' AND '$(RID)' == 'win-x64'\" />\r\n    <Copy SourceFiles=\"$(TargetPath)\" DestinationFolder=\"$(PackageDir)runtimes\\$(RID)\\lib\\$(GlobalTargetFramework)\" />\r\n  </Target>\r\n</Project>"
        },
        {
          "name": "Directory.Packages.props",
          "type": "blob",
          "size": 0.3701171875,
          "content": "<Project>\n  <ItemGroup>\n    <PackageVersion Include=\"Microsoft.Win32.Registry\" Version=\"5.0.0\" />\n    <PackageVersion Include=\"Microsoft.NET.Test.Sdk\" Version=\"16.11.0\" />\n    <PackageVersion Include=\"NUnit\" Version=\"3.13.2\" />\n    <PackageVersion Include=\"NUnit3TestAdapter\" Version=\"4.0.0\" />\n    <PackageVersion Include=\"MoonSharp\" Version=\"2.0.0\" />\n  </ItemGroup>\n</Project>"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.068359375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 João Matos, Dimitar Dobrev\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.43359375,
          "content": "<img src=\"docs/logo.svg\" width=\"128\">\n\nCppSharp is a tool and set of libraries which facilitates the usage of native C/C++ code\nwith the .NET ecosystem.\n\nIt consumes C/C++ header and library files and generates the \nnecessary glue code to surface the native API as a managed API. Such an API can be\nused to consume an existing native library in your managed code or add\nmanaged scripting support to a native codebase.\n\nThe supported target languages at present are C# and C++/CLI.\n\nIt can also be used as a library to parse native code into a syntax tree with a\nrich declaration and type information model.\n\n## Releases/Build Status\n\n| NuGet Packages            | Continuous Integration    |\n|---------------------------|---------------------------|\n| [![NuGet](https://img.shields.io/nuget/v/CppSharp.svg)](https://www.nuget.org/packages/CppSharp/) | [![GitHub-actions](https://github.com/mono/CppSharp/workflows/CI/badge.svg)](https://github.com/mono/CppSharp/actions?query=workflow%3ACI) \n\n1. [Libraries](#libraries)\n2. [Documentation](#documentation)\n3. [Community](#community)\n4. [Support](#support)\n5. [Users](#users)\n\n## Libraries\n\n### AST \n\nMirrors the Clang's C/C++ AST and type system classes in C# APIs.\n\nCheck out [_Clang's AST introduction docs_](http://clang.llvm.org/docs/IntroductionToTheClangAST.html) for more details about its architecture.\n \n * C++ declarations\n * C++ statements / expressions\n * C++ types\n * Class object layout\n * Declaration visitors\n * Type visitors\n\n### Parser\n\nProvides APIs for parsing of C/C++ source code into a syntax tree.\n\n* Parsing of C/C++ source code\n* Parsing of libraries archives symbols\n* Parsing of shared libraries symbols \n* Based on the very accurate Clang C++ parser.\n\n### Generator\n\nGenerates the glue binding code from a syntax tree of the native code.\n \n * Multiple backends: C++/CLI and C# (P/Invoke)\n * Multiple ABIs: Itanium, MS, ARM, iOS\n * Multiple platforms: Windows, OS X and Linux\n * Multiple runtimes: .NET and Mono\n * C++ virtual methods overriding from managed code\n * C++ multiple inheritance by translating to C# interfaces\n * C++ std::string\n * C++ default parameter values\n * C/C++ semantic comments (Doxygen) to C# comments\n * Extensible bindings semantics via user passes and type mapping \n\n## Documentation\n\nPlease see the following resources for more information:\n\n[Getting Started](docs/GettingStarted.md)\n\n[User's Manual](docs/UsersManual.md)\n\n[Developer's Manual](docs/DevManual.md)\n\n## Community\n\nFeel free to open up issues on GitHub for any problems you find.\n\n## Support\n\nIf you need commercial support feel free to open a discussion or issue for discussion.\n\n## Users\n\nCppSharp is used by the following projects:\n\n[Kythera AI](https://kythera.ai)\n\n[QtSharp](https://gitlab.com/ddobrev/QtSharp)\n\n[MonoGame](https://github.com/mono/MonoGame)\n\n[LLDBSharp](https://github.com/tritao/LLDBSharp)\n\n[Xamarin](http://xamarin.com/)\n\n[FFMPEG.net](https://github.com/crazyender/FFMPEG.net)\n\n[FFmpeg bindings](https://github.com/InitialForce/FFmpeg_bindings)\n\n[Tizen bindings](https://github.com/kitsilanosoftware/CppSharpTizen)\n\n[libgd bindings](https://github.com/imazen/deprecated-gd-bindings-generator-old)\n\n[ChakraSharp](https://github.com/baristalabs/ChakraSharp)\n\n[FFmpeg.AutoGen](https://github.com/Ruslan-B/FFmpeg.AutoGen)\n\n[GLFW3.NET](https://github.com/realvictorprm/GLFW3.NET)\n\n[DearImguiSharp](https://github.com/Sewer56/DearImguiSharp)\n\nPlease feel free to send us a pull request adding your own projects to the list above.\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "nuget.config",
          "type": "blob",
          "size": 0.197265625,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\n  </packageSources>\n</configuration>"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.json",
          "type": "blob",
          "size": 0.240234375,
          "content": "{\n  \"$schema\": \"https://raw.githubusercontent.com/dotnet/Nerdbank.GitVersioning/master/src/NerdBank.GitVersioning/version.schema.json\",\n  \"version\": \"1.1\",\n  \"publicReleaseRefSpec\": [\n    \"^refs/heads/master$\", \n    \"^refs/tags/v\\\\d\\\\.\\\\d\"\n  ]\n}\n"
        }
      ]
    }
  ]
}