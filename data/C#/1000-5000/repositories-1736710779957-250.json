{
  "metadata": {
    "timestamp": 1736710779957,
    "page": 250,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "VerifyTests/Verify",
      "stars": 2985,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.572265625,
          "content": "* text\n*.snk binary\n*.png binary\n*.bmp binary\n*.tif binary\n*.zip binary\n\nsrc/Verify/EmptyFiles/* binary\n\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.md text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n*.verified.props text eol=lf working-tree-encoding=UTF-8\n*.verified.nuspec text eol=lf working-tree-encoding=UTF-8\n\nsrc/.editorconfig text eol=lf working-tree-encoding=UTF-8\n*.sln.DotSettings text eol=lf working-tree-encoding=UTF-8\n\n*NonStandardEncoding* binary"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.646484375,
          "content": "*.suo\n*.user\nbin/\nobj/\n.vs/\n*.DotSettings.user\n.idea/\n*.received.*\n\n*.received/\nnugets/\nsrc/Verify.Tests/Tests.StreamNegative.verified.bin\nsrc/Verify.Tests/Tests.StreamMultipleNegative.00.verified.bin\nsrc/Verify.Tests/Tests.StreamMultipleNegative.01.verified.bin\nsrc/Verify.Tests/Tests.TextNegative.verified.tmp\n*.ncrunchproject\n*nCrunchTemp*\n*.cache\nsrc/Verify.Tests/NewLineTests.StringWithDifferingNewline.verified.txt\nsrc/Verify.MSTest.Tests/Tests.AutoVerifyHasAttachment.verified.txt\nsrc/Verify.NUnit.Tests/Tests.AutoVerifyHasAttachment.verified.txt\nsrc/Verify.TUnit.Tests/Tests.AutoVerifyHasAttachment.verified.txt\n/src/Benchmarks/BenchmarkDotNet.Artifacts\n"
        },
        {
          "name": "code_of_conduct.md",
          "type": "blob",
          "size": 0.2578125,
          "content": "# Code of Conduct\n\nThis project has adopted the code of conduct defined by the Contributor Covenant\nto clarify expected behavior in our community.\nFor more information, see the [.NET Foundation Code of Conduct](https://dotnetfoundation.org/about/code-of-conduct).\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "license.txt",
          "type": "blob",
          "size": 1.05859375,
          "content": "MIT License\n\nCopyright (c) .NET Foundation and Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 40.4765625,
          "content": "<!--\nGENERATED FILE - DO NOT EDIT\nThis file was generated by [MarkdownSnippets](https://github.com/SimonCropp/MarkdownSnippets).\nSource File: /readme.source.md\nTo change this file edit the source file and then run MarkdownSnippets.\n-->\n\n# <img src='/src/icon.png' height='30px'> Verify\n\n[![Discussions](https://img.shields.io/badge/Verify-Discussions-yellow?svg=true&label=)](https://github.com/orgs/VerifyTests/discussions)\n[![Build status](https://ci.appveyor.com/api/projects/status/dpqylic0be7s9vnm/branch/main?svg=true)](https://ci.appveyor.com/project/SimonCropp/Verify)\n[![NuGet Status](https://img.shields.io/nuget/v/Verify.NUnit.svg?label=Verify.NUnit)](https://www.nuget.org/packages/Verify.NUnit/)\n[![NuGet Status](https://img.shields.io/nuget/v/Verify.Xunit.svg?label=Verify.Xunit)](https://www.nuget.org/packages/Verify.Xunit/)\n[![NuGet Status](https://img.shields.io/nuget/v/Verify.XunitV3.svg?label=Verify.XunitV3)](https://www.nuget.org/packages/Verify.XunitV3/)\n[![NuGet Status](https://img.shields.io/nuget/v/Verify.Fixie.svg?label=Verify.Fixie)](https://www.nuget.org/packages/Verify.Fixie/)\n[![NuGet Status](https://img.shields.io/nuget/v/Verify.Expecto.svg?label=Verify.Expecto)](https://www.nuget.org/packages/Verify.Expecto/)\n[![NuGet Status](https://img.shields.io/nuget/v/Verify.MSTest.svg?label=Verify.MSTest)](https://www.nuget.org/packages/Verify.MSTest/)\n[![NuGet Status](https://img.shields.io/nuget/v/Verify.TUnit.svg?label=Verify.TUnit)](https://www.nuget.org/packages/Verify.TUnit/)\n[![NuGet Status](https://img.shields.io/nuget/v/Verify.ClipboardAccept.svg?label=Verify.ClipboardAccept)](https://www.nuget.org/packages/Verify.ClipboardAccept/)\n\nVerify is a snapshot tool that simplifies the assertion of complex data models and documents.\n\nVerify is called on the test result during the assertion phase. It serializes that result and stores it in a file that\nmatches the test name. On the next test execution, the result is again serialized and compared to the existing file. The\ntest will fail if the two snapshots do not match: either the change is unexpected, or the reference snapshot needs to be\nupdated to the new result.\n\n**See [Milestones](../../milestones?state=closed) for release notes.**\n\n\n## Requirements\n\n * Supported runtimes: net472, net48, net481, net6, net8, and net9.\n * Supported SDK: 8.0.300 and up\n\n\n## [Getting started wizard](/docs/wiz/readme.md)\n\nGet customized instructions for the specific combination of Operating System, IDE, Test Framework, and Build Server.\n\n[Start wizard](/docs/wiz/readme.md).\n\n\n## NuGet packages\n\n* https://nuget.org/packages/Verify.NUnit/\n* https://nuget.org/packages/Verify.Xunit/\n* https://nuget.org/packages/Verify.XunitV3/\n* https://nuget.org/packages/Verify.Fixie/\n* https://nuget.org/packages/Verify.Expecto/\n* https://nuget.org/packages/Verify.MSTest/\n* https://nuget.org/packages/Verify.TUnit/\n\n\n## Snapshot management\n\nAccepting or declining a snapshot file is part of the core workflow of Verify. There are several ways to do this and the\napproach(s) selected is a personal preference.\n\n* In the Windows Tray via [DiffEngineTray](https://github.com/VerifyTests/DiffEngine/blob/main/docs/tray.md)\n* [ReSharper test runner plugin](https://plugins.jetbrains.com/plugin/17241-verify-support) ([Source](https://github.com/matkoch/resharper-verify))\n* [Rider test runner plugin](https://plugins.jetbrains.com/plugin/17240-verify-support) ([Source](https://github.com/matkoch/resharper-verify))\n* [Via the clipboard](/docs/clipboard.md).\n* Manually making the change in the [launched diff tool](https://github.com/VerifyTests/DiffEngine#supported-tools).\n  Either with a copy paste, or some tools have commands to automate this via a shortcut or a button.\n* Manually on the file system, by renaming the `.received.` file to `.verified.`. This can be automated via scripts\n  to bulk accept all `.received.` files by matching a pattern.\n* Using the dotnet tool [Verify.Terminal](https://github.com/VerifyTests/Verify.Terminal).\n\n\n## Usage\n\n\n### ImplicitUsings\n\n**All examples use [Implicit Usings](https://docs.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#implicitusings). Ensure `<ImplicitUsings>` is set to `enable` to ensure examples compile correctly.**<!-- include: implicit-usings. path: /docs/mdsource/implicit-usings.include.md -->\n\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\nIf `ImplicitUsings` are not enabled, substitute usages of `Verify()` with `Verifier.Verify()`.<!-- endInclude -->\n\n\n### Class being tested\n\nGiven a class to be tested:\n\n<!-- snippet: ClassBeingTested -->\n<a id='snippet-ClassBeingTested'></a>\n```cs\npublic static class ClassBeingTested\n{\n    public static Person FindPerson() =>\n        new()\n        {\n            Id = new(\"ebced679-45d3-4653-8791-3d969c4a986c\"),\n            Title = Title.Mr,\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Children =\n            [\n                \"Sam\",\n                \"Mary\"\n            ],\n            Address = new()\n            {\n                Street = \"4 Puddle Lane\",\n                Country = \"USA\"\n            }\n        };\n}\n```\n<sup><a href='/src/TargetLibrary/ClassBeingTested.cs#L1-L26' title='Snippet source file'>snippet source</a> | <a href='#snippet-ClassBeingTested' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\n\n### NUnit\n\nSupport for [NUnit](https://nunit.org/)\n\n<!-- snippet: SampleTestNUnit -->\n<a id='snippet-SampleTestNUnit'></a>\n```cs\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n<sup><a href='/src/Verify.NUnit.Tests/Snippets/Sample.cs#L1-L14' title='Snippet source file'>snippet source</a> | <a href='#snippet-SampleTestNUnit' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\n\n### xUnit\n\nSupport for [xUnit](https://xunit.net/)\n\n<!-- snippet: SampleTestXunit -->\n<a id='snippet-SampleTestXunit'></a>\n```cs\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n<sup><a href='/src/Verify.Xunit.Tests/Snippets/Sample.cs#L1-L13' title='Snippet source file'>snippet source</a> | <a href='#snippet-SampleTestXunit' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\n\n### xUnitV3\n\nSupport for [xUnitV3](https://xunit.net/)\n\n<!-- snippet: SampleTestXunitV3 -->\n<a id='snippet-SampleTestXunitV3'></a>\n```cs\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n<sup><a href='/src/Verify.XunitV3.Tests/Snippets/Sample.cs#L1-L13' title='Snippet source file'>snippet source</a> | <a href='#snippet-SampleTestXunitV3' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\n\n### Fixie\n\nSupport for [Fixie](http://fixie.github.io/)\n\n<!-- snippet: SampleTestFixie -->\n<a id='snippet-SampleTestFixie'></a>\n```cs\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n<sup><a href='/src/Verify.Fixie.Tests/Snippets/Sample.cs#L1-L12' title='Snippet source file'>snippet source</a> | <a href='#snippet-SampleTestFixie' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\nFixie is less opinionated than other test frameworks. As such it leaves up to the consumer how to configure test execution.<!-- include: fixie-convention. path: /docs/mdsource/fixie-convention.include.md -->\n\nTo enable Verify  the [ITestProject and IExecution interfaces](https://github.com/fixie/fixie/wiki/Customizing-the-Test-Project-Lifecycle#the-default-convention) need to be used.\n\nRequirements:\n\n * Assign the target assembly in `ITestProject.Configure` using `VerifierSettings.AssignTargetAssembly`\n * Wrap test executions in `IExecution.Run` using `ExecutionState.Set`\n\nAn example implementation of the above:\n\n<!-- snippet: TestProject.cs -->\n<a id='snippet-TestProject.cs'></a>\n```cs\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n<sup><a href='/src/Verify.Fixie.Tests/FixieSetup/TestProject.cs#L1-L39' title='Snippet source file'>snippet source</a> | <a href='#snippet-TestProject.cs' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n<!-- endInclude -->\n\n\n### Expecto\n\nSupport for [Expecto](https://github.com/haf/expecto)\n\n<!-- snippet: SampleTestExpecto -->\n<a id='snippet-SampleTestExpecto'></a>\n```fs\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n<sup><a href='/src/Verify.Expecto.FSharpTests/Tests.fs#L2-L13' title='Snippet source file'>snippet source</a> | <a href='#snippet-SampleTestExpecto' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\n\n#### Caveats\n\nDue to the nature of the Expecto implementation, the following APIs in Verify are not supported.\n\n* `settings.UseParameters()`\n* `settings.UseTextForParameters()`\n\n\n### TUnit\n\nSupport for [TUnit](https://github.com/thomhurst/TUnit)\n\n<!-- snippet: SampleTestTUnit -->\n<a id='snippet-SampleTestTUnit'></a>\n```cs\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n<sup><a href='/src/Verify.TUnit.Tests/Snippets/Sample.cs#L1-L13' title='Snippet source file'>snippet source</a> | <a href='#snippet-SampleTestTUnit' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\n\n### MSTest\n\nSupport for [MSTest](https://github.com/Microsoft/testfx-docs)\n\n<!-- snippet: SampleTestMSTest -->\n<a id='snippet-SampleTestMSTest'></a>\n```cs\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n<sup><a href='/src/Verify.MSTest.Tests/Snippets/Sample.cs#L1-L14' title='Snippet source file'>snippet source</a> | <a href='#snippet-SampleTestMSTest' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\n\n#### Marking tests as 'Using Verify'\n\nThe MSTest implementation leverages a [Source Generator](https://learn.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview) and requires test classes to opt in to being processed by the Source Generator.<!-- include: mstest-marker. path: /docs/mdsource/mstest-marker.include.md -->\n\nAdd the `UsesVerifyAttribute`.\n\nFor all test classes in an assembly:\n\n```\n[assembly: UsesVerify]\n```\n\nFor a specific a test class:\n\n```\n[UsesVerify]\n```\n\nOr inherit from `VerifyBase`:\n\n<!-- snippet: VerifyBaseUsage.cs -->\n<a id='snippet-VerifyBaseUsage.cs'></a>\n```cs\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n<sup><a href='/src/Verify.MSTest.Tests/VerifyBaseUsage.cs#L1-L8' title='Snippet source file'>snippet source</a> | <a href='#snippet-VerifyBaseUsage.cs' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n<!-- endInclude -->\n\n\n### Initial Verification\n\nNo existing `.verified.` file.\n\n```mermaid\ngraph TD\nrun(Run test and<br/>create Received file)\nfailTest(Fail Test<br/>and show Diff)\ncloseDiff(Close Diff)\nrun-->failTest\nshouldAccept{Accept ?}\nfailTest-->shouldAccept\naccept(Move Received<br/>to Verified)\nshouldAccept-- Yes -->accept\ndiscard(Discard<br/>Received)\nshouldAccept-- No -->discard\naccept-->closeDiff\ndiscard-->closeDiff\n```\n\nWhen the test is initially run it will fail. If a [Diff Tool](https://github.com/VerifyTests/DiffEngine) is detected it\nwill be used to display the diff.\n\n![InitialDiff](/docs/InitialDiff.png)\n\nTo verify the result:\n\n* Execute the command from the [Clipboard](/docs/clipboard.md), or\n* Accept with [DiffEngineTray tool](https://github.com/VerifyTests/DiffEngine/blob/master/docs/tray.md),\n* Accept with [ReSharper Addin](https://plugins.jetbrains.com/plugin/17241-verify-support)\n  or [Rider Addin](https://plugins.jetbrains.com/plugin/17240-verify-support)\n* Use the diff tool to accept the changes, or\n* Manually copy the text to the new file\n\n\n#### Verified result\n\nThis will result in the `Sample.Test.verified.txt` being created:\n\n<!-- snippet: Verify.Xunit.Tests/Snippets/Sample.Test.verified.txt -->\n<a id='snippet-Verify.Xunit.Tests/Snippets/Sample.Test.verified.txt'></a>\n```txt\n{\n  GivenNames: John,\n  FamilyName: Smith,\n  Spouse: Jill,\n  Address: {\n    Street: 4 Puddle Lane,\n    Country: USA\n  },\n  Children: [\n    Sam,\n    Mary\n  ],\n  Id: Guid_1\n}\n```\n<sup><a href='/src/Verify.Xunit.Tests/Snippets/Sample.Test.verified.txt#L1-L14' title='Snippet source file'>snippet source</a> | <a href='#snippet-Verify.Xunit.Tests/Snippets/Sample.Test.verified.txt' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\n\n### Subsequent Verification\n\nExisting `.verified.` file.\n\n```mermaid\ngraph TD\nrun(Run test and<br/>create Received file)\ncloseDiff(Close Diff)\nfailTest(Fail Test<br/>and show Diff)\nrun-->isSame\nshouldAccept{Accept ?}\nfailTest-->shouldAccept\naccept(Move Received<br/>to Verified)\nshouldAccept-- Yes -->accept\ndiscard(Discard<br/>Received)\nshouldAccept-- No -->discard\n\nisSame{Compare<br/>Verified +<br/>Received}\npassTest(Pass Test and<br/>discard Received)\nisSame-- Same --> passTest\nisSame-- Different --> failTest\naccept-->closeDiff\ndiscard-->closeDiff\n```\n\nIf the implementation of `ClassBeingTested` changes:\n\n<!-- snippet: ClassBeingTestedChanged -->\n<a id='snippet-ClassBeingTestedChanged'></a>\n```cs\npublic static class ClassBeingTested\n{\n    public static Person FindPerson() =>\n        new()\n        {\n            Id = new(\"ebced679-45d3-4653-8791-3d969c4a986c\"),\n            Title = Title.Mr,\n            // Middle name added\n            GivenNames = \"John James\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Children =\n            [\n                \"Sam\",\n                \"Mary\"\n            ],\n            Address = new()\n            {\n                // Address changed\n                Street = \"64 Barnett Street\",\n                Country = \"USA\"\n            }\n        };\n}\n```\n<sup><a href='/src/TargetLibrary/ClassBeingTestedChanged.cs#L3-L30' title='Snippet source file'>snippet source</a> | <a href='#snippet-ClassBeingTestedChanged' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\nAnd the test is re-run it will fail.\n\n\n#### The [Diff Tool](https://github.com/VerifyTests/DiffEngine) will display the diff:\n\n![SecondDiff](/docs/SecondDiff.png)\n\nThe same approach can be used to verify the results and the change to `Sample.Test.verified.txt` is committed to source\ncontrol along with the change to `ClassBeingTested`.\n\n\n### Async\n\n`Verify()` has overloads that accept `Task<T>`, `ValueTask<T>`, and `IAsyncEnumerable<T>`. These are `await`ed before\nverification.\n\nThere is also an overload that accepts `Func<Task<T>>`, which works well with `async` lambda expressions:\n\n<!-- snippet: VerifyFuncOfTaskOfT -->\n<a id='snippet-VerifyFuncOfTaskOfT'></a>\n```cs\nawait Verify(\n    async () => new\n    {\n        Foo = await repo.GetFoo(id),\n        Bars = await repo.GetBars(id)\n    });\n```\n<sup><a href='/src/Verify.Tests/Snippets/Snippets.cs#L157-L166' title='Snippet source file'>snippet source</a> | <a href='#snippet-VerifyFuncOfTaskOfT' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\n\n### VerifyJson\n\n`VerifyJson` performs the following actions\n\n* Convert to `JToken` (if necessary).\n* Apply [ignore member by name](/docs/serializer-settings.md#ignore-member-by-name) for keys.\n* PrettyPrint the resulting text.\n\n<!-- snippet: VerifyJson -->\n<a id='snippet-VerifyJson'></a>\n```cs\n[Fact]\npublic Task VerifyJsonString()\n{\n    var json = \"{'key': {'msg': 'No action taken'}}\";\n    return VerifyJson(json);\n}\n\n[Fact]\npublic Task VerifyJsonStream()\n{\n    var json = \"{'key': {'msg': 'No action taken'}}\";\n    var stream = new MemoryStream(Encoding.UTF8.GetBytes(json));\n    return VerifyJson(stream);\n}\n\n[Fact]\npublic Task VerifyJsonJToken()\n{\n    var json = \"{'key': {'msg': 'No action taken'}}\";\n    var target = JToken.Parse(json);\n    return Verify(target);\n}\n```\n<sup><a href='/src/Verify.Tests/JsonTests.cs#L183-L208' title='Snippet source file'>snippet source</a> | <a href='#snippet-VerifyJson' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\nResults in a .txt file:\n\n<!-- snippet: JsonTests.VerifyJsonString.verified.txt -->\n<a id='snippet-JsonTests.VerifyJsonString.verified.txt'></a>\n```txt\n{\n  key: {\n    msg: No action taken\n  }\n}\n```\n<sup><a href='/src/Verify.Tests/JsonTests.VerifyJsonString.verified.txt#L1-L5' title='Snippet source file'>snippet source</a> | <a href='#snippet-JsonTests.VerifyJsonString.verified.txt' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\n\n## Conventions\n\n\n### Source control Includes/Excludes\n\n * **All `*.received.*` files should be excluded from source control.**<!-- include: include-exclude. path: /docs/mdsource/include-exclude.include.md -->\n\neg. add the following to `.gitignore`\n\n```\n*.received.*\n```\n\nIf using [UseSplitModeForUniqueDirectory](/docs/naming.md#usesplitmodeforuniquedirectory) also include:\n\n`*.received/`\n\n\nAll `*.verified.*` files should be committed to source control.<!-- endInclude -->\n\n\n### Text file settings\n\nText variants of verified and received have the following characteristics:<!-- include: text-file-settings. path: /docs/mdsource/text-file-settings.include.md -->\n\n * UTF8 with a [Byte order mark (BOM)](https://en.wikipedia.org/wiki/Byte_order_mark)\n * Newlines as line-feed (lf)\n * No trailing newline\n\nThis manifests in several ways:\n\n\n#### Source control settings\n\nAll text extensions of `*.verified.*` should have:\n\n * `eol` set to `lf`\n * `working-tree-encoding` set to `UTF-8`\n\neg add the following to `.gitattributes`\n\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n\n#### EditorConfig settings\n\nIf modifying text verified/received files in an editor, it is desirable for the editor to respect the above conventions. For [EditorConfig](https://editorconfig.org/) enabled the following can be used:\n\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n**Note that the above are suggested for subset of text extension. Add others as required based on the text file types being verified.**<!-- endInclude -->\n\n\n### Conventions check\n\nThe above conventions can be checked by calling `VerifyChecks.Run()` in a test\n\n\n#### MSTest\n\n<!-- snippet: VerifyChecksMSTest -->\n<a id='snippet-VerifyChecksMSTest'></a>\n```cs\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n<sup><a href='/src/Verify.MSTest.Tests/VerifyChecksTests.cs#L2-L10' title='Snippet source file'>snippet source</a> | <a href='#snippet-VerifyChecksMSTest' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\n\n#### Expecto\n\n<!-- snippet: VerifyChecksExpecto -->\n<a id='snippet-VerifyChecksExpecto'></a>\n```cs\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n<sup><a href='/src/Verify.Expecto.Tests/VerifyChecksTests.cs#L1-L9' title='Snippet source file'>snippet source</a> | <a href='#snippet-VerifyChecksExpecto' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\n\n#### Fixie\n\n<!-- snippet: VerifyChecksFixie -->\n<a id='snippet-VerifyChecksFixie'></a>\n```cs\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n<sup><a href='/src/Verify.Fixie.Tests/VerifyChecksTests.cs#L2-L8' title='Snippet source file'>snippet source</a> | <a href='#snippet-VerifyChecksFixie' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\n\n#### Xunit\n\n<!-- snippet: VerifyChecksXunit -->\n<a id='snippet-VerifyChecksXunit'></a>\n```cs\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n<sup><a href='/src/Verify.Xunit.Tests/VerifyChecksTests.cs#L2-L9' title='Snippet source file'>snippet source</a> | <a href='#snippet-VerifyChecksXunit' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\n\n#### XunitV3\n\n<!-- snippet: VerifyChecksXunitV3 -->\n<a id='snippet-VerifyChecksXunitV3'></a>\n```cs\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n<sup><a href='/src/Verify.XunitV3.Tests/VerifyChecksTests.cs#L2-L9' title='Snippet source file'>snippet source</a> | <a href='#snippet-VerifyChecksXunitV3' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\n\n#### NUnit\n\n<!-- snippet: VerifyChecksNUnit -->\n<a id='snippet-VerifyChecksNUnit'></a>\n```cs\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n<sup><a href='/src/Verify.NUnit.Tests/VerifyChecksTests.cs#L2-L10' title='Snippet source file'>snippet source</a> | <a href='#snippet-VerifyChecksNUnit' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\n\n#### TUnit\n\n<!-- snippet: VerifyChecksTUnit -->\n<a id='snippet-VerifyChecksTUnit'></a>\n```cs\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n<sup><a href='/src/Verify.TUnit.Tests/VerifyChecksTests.cs#L2-L9' title='Snippet source file'>snippet source</a> | <a href='#snippet-VerifyChecksTUnit' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\n\n## Static settings\n\nMost settings are available at the both global level and at the instance level.\n\nWhen modifying settings at the both global level it should be done using a Module Initializer:\n\n<!-- snippet: StaticSettings.cs -->\n<a id='snippet-StaticSettings.cs'></a>\n```cs\npublic class StaticSettings\n{\n    [Fact]\n    public Task Test() =>\n        Verify(\"String to verify\");\n}\n\npublic static class StaticSettingsUsage\n{\n    [ModuleInitializer]\n    public static void Initialize() =>\n        VerifierSettings.AddScrubber(_ => _.Replace(\"String to verify\", \"new value\"));\n}\n```\n<sup><a href='/src/Verify.Tests/StaticSettings.cs#L1-L13' title='Snippet source file'>snippet source</a> | <a href='#snippet-StaticSettings.cs' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\n\n## VerifyResult\n\nIn some scenarios it can be helpful to get access to the resulting `*.verified.*` files after a successful run. For\nexample to do an explicit check for contains or not-contains in the resulting text. To allow this all Verify methods\nreturn a `VerifyResult`.\n\n<!-- snippet: VerifyResult -->\n<a id='snippet-VerifyResult'></a>\n```cs\nvar result = await Verify(\n    new\n    {\n        Property = \"Value To Check\"\n    });\nAssert.Contains(\"Value To Check\", result.Text);\n```\n<sup><a href='/src/Verify.Tests/Tests.cs#L429-L438' title='Snippet source file'>snippet source</a> | <a href='#snippet-VerifyResult' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\nIf using `Verifier.Throws`, the resulting `Exception` will also be accessible\n\n<!-- snippet: ExceptionResult -->\n<a id='snippet-ExceptionResult'></a>\n```cs\nvar result = await Throws(MethodThatThrows);\nAssert.NotNull(result.Exception);\n```\n<sup><a href='/src/Verify.Tests/ThrowsTests.cs#L172-L177' title='Snippet source file'>snippet source</a> | <a href='#snippet-ExceptionResult' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\n\n## CurrentFile\n\nUtility for finding paths based on the current file.\n\n<!-- snippet: CurrentFile.cs -->\n<a id='snippet-CurrentFile.cs'></a>\n```cs\nusing IOPath = System.IO.Path;\n\nnamespace VerifyTests;\n\npublic static class CurrentFile\n{\n    public static string Path([CallerFilePath] string file = \"\") =>\n        file;\n\n    public static string Directory([CallerFilePath] string file = \"\") =>\n        IOPath.GetDirectoryName(file)!;\n\n    public static string Relative(string relative, [CallerFilePath] string file = \"\")\n    {\n        var directory = IOPath.GetDirectoryName(file)!;\n        return IOPath.Combine(directory, relative);\n    }\n}\n```\n<sup><a href='/src/Verify/CurrentFile.cs#L1-L18' title='Snippet source file'>snippet source</a> | <a href='#snippet-CurrentFile.cs' title='Start of snippet'>anchor</a></sup>\n<!-- endSnippet -->\n\n\n## Versioning\n\nVerify follows [Semantic Versioning](https://semver.org/). The same applies for [extensions to Verify](#extensions).\nSmall changes in the resulting snapshot files may be deployed in a minor version. As such nuget updates to `Verify.*`\nshould be done as follows:\n\n* Update all `Verify.*`packages in isolation\n* Re-run all tests.\n* If there are changes, ensure they look correct given the release notes. If the changes do not look correct, raise an\n  issue.\n* Accept the changes.\n\nSnapshot changes do not trigger a major version change to avoid\ncausing [Diamond dependency](https://en.wikipedia.org/wiki/Dependency_hell#Problems) issues for downstream extensions.\n\n\n## Unit testing inside virtualized environment\n\nUnit tests referencing `Verify` (including unit tests within this repository as well as any other code\nreferencing `Verify`) can be run and debugged on a local virtualized environment supported\nby [Visual Studio Remote Testing](https://learn.microsoft.com/en-us/visualstudio/test/remote-testing?view=vs-2022).\nInitial configurations have been added for `WSL` and net 7.0 linux docker via `testenvironments.json` (for third party\ncode, the file needs to be copied or recreated next to the `.sln` solution file for solution to leverage the\nfunctionality).\n\nUpon opening the Tests Explorer the advanced environments are available in the GUI:\n\n![TestExplorerEnvironments](/docs/TestExplorerEnvironments.png)\n\nThis readme will not discuss definitive list of details for proper setup of the environments instead refer the following\ninformation sources and warn about particular gotchas:\n\n* WSL runs\n    * Install [WSL](https://learn.microsoft.com/en-us/windows/wsl/about).\n    * Install a [distribution](https://aka.ms/wslstore).\n    * [Install .NET Runtime](https://learn.microsoft.com/en-us/dotnet/core/install/linux-ubuntu)\n* Docker runs\n    * Install [Docker Desktop](https://www.docker.com/products/docker-desktop/)\n    * First run of docker scenario might need elevation ([Test project does not reference any .NET NuGet adapter](https://developercommunity.visualstudio.com/t/test-project-does-not-reference-any-net-nuget-adap/1311698) error)\n* Third party test runners might not support this feature.\n  Use [Visual Studio Test Explorer](https://learn.microsoft.com/en-us/visualstudio/test/run-unit-tests-with-test-explorer).\n\n\n## Media\n\n\n### Blogs\n\n* [Snapshot Testing in .NET with Verify - Khalid Abuhakmeh (12 July 2024)](https://blog.jetbrains.com/dotnet/2024/07/11/snapshot-testing-in-net-with-verify/)\n* [Snapshot testing in C# with Verify - Tim Deschryver (21 Feb 2024)](https://timdeschryver.dev/bits/snapshot-testing-in-c-with-verify)\n* [Snapshot Testing in C# - William Rees (13 Feb 2024)](https://wil-rees.medium.com/snapshot-testing-with-verify-xunit-f1ae5127b800)\n* [I want to do a snapshot test with C# (26 Dec 2023)](https://zzzkan.me/blog/verify-tests/)\n* [I REGRET Not Telling Dave Farley THIS about Approval Testing - Emily Bache (27 Sep 2023)](https://www.youtube.com/watch?v=jOuqE_o9rmg)\n* [Today's random F# code: Using Verify to prevent breaking changes in stored data - Urs Enzler (31 Mar 2023)](https://www.planetgeek.ch/2023/03/31/todays-random-f-code-using-verify-to-prevent-breaking-changes-in-stored-data/)\n* [Compare object values in xUnit C# with Verify - Pierre Belin (18 Nov 2022)](https://pierrebelin.medium.com/compare-object-values-in-xunit-c-with-verify-215d02b4ed39/)\n* [Unit testing assertions are now easier than ever with Verify Snapshot tool - Rana Krishnrajsinh (5 Nov 2022)](https://www.youtube.com/watch?v=T1ZPGi_dHFM)\n* [The easiest way to Unit Test with Verify in C# - Tomasz Juszczak (6 Sep 2022)](https://prographers.com/blog/the-easiest-way-to-unit-test-with-verify-in-c)\n* [Testing an incremental generator with snapshot testing (14 Dec 2021)](https://andrewlock.net/creating-a-source-generator-part-2-testing-an-incremental-generator-with-snapshot-testing/)\n* [5 helpful Nuget package for Unit Testing in .NET (16 Oct 2021)](https://medium.com/@niteshsinghal85/5-helpful-nuget-package-for-unit-testing-in-net-87c2e087c6d)\n* [Snapshot Testing with Verify: Carl Franklin's Blazor Train (3 Apr 2020)](https://rowell.heria.uk/blog/2020/11/23/verify-snapshot-testing-for-c)\n* [Verify: Snapshot Testing for C# (23 Nov 2020)](https://rowell.heria.uk/blog/2020/11/23/verify-snapshot-testing-for-c)\n\n\n### Podcasts\n\n* [Unhandled Exception podcast: Snapshot Testing (26 Nov 2021)](https://unhandledexceptionpodcast.com/posts/0029-snapshottesting/)\n* [Snapshot Testing with Verify - Dan Clarke (10 Dec 2021)](https://www.danclarke.com/snapshot-testing-with-verify)\n\n\n### Videos\n\n* [The Only Type of Testing U Need - Nick Chapsas (12 Nov 2024)](https://www.youtube.com/watch?v=JG4zt9CnIl4)\n* [Introduction to Snapshot testing and using Verify.Xunit - Betatalks (11 Oct 2023)](https://www.youtube.com/watch?v=RVmz3FZFIBU)\n* [The Way to Test Legacy Code in C# - Gui Ferreira (19 Sep 2023)](https://www.youtube.com/watch?v=UC-AUnuTh0I)\n* [Snapshot Testing in .NET with Verify - Dan Clarke (21 Jul 2022)](https://www.youtube.com/watch?v=wA7oJDyvn4c&t=1s)\n* [Testing C# code reliably by freezing it in time - Nick Chapsas (1 Aug 2022)](https://www.youtube.com/watch?v=Q1_YkcPwpqY)\n* [5 open source .NET projects that deserve more attention (9 Sep 2021)](https://www.youtube.com/watch?v=mwHWPoKEmyY&t=515s)\n* [OSS Power-Ups: Verify (14 Jul 2021)](https://www.youtube.com/watch?v=ZD5-51iCmU0)\n* [Verify Xunit Intro (26 Apr 2020)](https://www.youtube.com/watch?v=uGVogEltSkY)\n\n\n## Extensions\n\n* [Verify.AngleSharp](https://github.com/VerifyTests/Verify.AngleSharp): Html verification utilities via [AngleSharp](https://github.com/AngleSharp/AngleSharp).\n* [Verify.AspNetCore](https://github.com/VerifyTests/Verify.AspNetCore): Verification of AspNetCore bits.\n* [Verify.Aspose](https://github.com/VerifyTests/Verify.Aspose): Verification of documents (pdf, docx, xlsx, and pptx) via Aspose.\n* [Verify.Assertions](https://github.com/VerifyTests/Verify.Assertions): Extends Verify to allow an assertion callback. This enables using assertion libraries to interrogate during serialization.\n* [Verify.AustralianProtectiveMarkings](https://github.com/pmcau/AustralianProtectiveMarkings): Verification of AustralianProtectiveMarkings.\n* [Verify.Avalonia](https://github.com/VerifyTests/Verify.Avalonia): Verification of [Avalonia UIs](https://avaloniaui.net/).\n* [Verify.Blazor](https://github.com/VerifyTests/Verify.Blazor): Verification of [Blazor Component](https://docs.microsoft.com/en-us/aspnet/core/blazor/#components) Blazor rendering.\n* [Verify.Bunit](https://github.com/VerifyTests/Verify.Bunit): Verification of [Blazor Component](https://docs.microsoft.com/en-us/aspnet/core/blazor/#components) via [bunit](https://bunit.egilhansen.com).\n* [Verify.Brighter](https://github.com/VerifyTests/Verify.Brighter): Verification of [Brighter](https://www.goparamore.io/) bits.\n* [Verify.CommunityToolkit.Mvvm](https://github.com/VerifyTests/Verify.CommunityToolkit.Mvvm): Verification of [CommunityToolkit.Mvvm](https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/).\n* [Verify.Cosmos](https://github.com/VerifyTests/Verify.Cosmos): Verification of [Azure CosmosDB](https://docs.microsoft.com/en-us/azure/cosmos-db/).\n* [Verify.DiffPlex](https://github.com/VerifyTests/Verify.DiffPlex): Comparison of text via [DiffPlex](https://github.com/mmanela/diffplex).\n* [Verify.DocNet](https://github.com/VerifyTests/Verify.DocNet): Verification of pdfs via [DocNet](https://github.com/GowenGit/docnet).\n* [Verify.EntityFramework](https://github.com/VerifyTests/Verify.EntityFramework): Verification of EntityFramework bits.\n* [Verify.FakeItEasy](https://github.com/VerifyTests/Verify.FakeItEasy): Verification of [FakeItEasy](https://fakeiteasy.github.io/) bits.\n* [Verify.Flurl](https://github.com/VerifyTests/Verify.Flurl): Verification of [Flurl](https://flurl.dev/) bits.\n* [Verify.HeadlessBrowsers](https://github.com/VerifyTests/Verify.HeadlessBrowsers): Verification of Web UIs using [Playwright](https://github.com/microsoft/playwright-sharp), [Puppeteer Sharp](https://github.com/hardkoded/puppeteer-sharp), or [Selenium](https://www.selenium.dev).\n* [Verify.Http](https://github.com/VerifyTests/Verify.Http): Verification of Http bits.\n* [Verify.ICSharpCode.Decompiler](https://github.com/VerifyTests/Verify.ICSharpCode.Decompiler): Comparison of assemblies and types via [ICSharpCode.Decompiler](https://github.com/icsharpcode/ILSpy/wiki/Getting-Started-With-ICSharpCode.Decompiler).\n* [Verify.ImageHash](https://github.com/VerifyTests/Verify.ImageHash): Comparison of images via [ImageHash](https://github.com/coenm/ImageHash).\n* [Verify.ImageSharp.Compare](https://github.com/VerifyTests/Verify.ImageSharp.Compare): Verification and comparison of images via [Codeuctivity.ImageSharp.Compare](https://github.com/Codeuctivity/ImageSharp.Compare).\n* [Verify.ImageMagick](https://github.com/VerifyTests/Verify.ImageMagick): Verification and comparison of images via [Magick.NET](https://github.com/dlemstra/Magick.NET).\n* [Verify.ImageSharp](https://github.com/VerifyTests/Verify.ImageSharp): Verification of images via [ImageSharp](https://github.com/SixLabors/ImageSharp).\n* [Verify.MailMessage](https://github.com/VerifyTests/Verify.MailMessage): Verification\n  of [MailMessage](https://learn.microsoft.com/en-us/dotnet/api/system.net.mail.mailmessage) and related types.\n* [Verify.MassTransit](https://github.com/VerifyTests/Verify.MassTransit): Support for MassTransit test helpers.\n* [Verify.MicrosoftLogging](https://github.com/VerifyTests/Verify.MicrosoftLogging): Verify MicrosoftLogging.\n* [Verify.MongoDB](https://github.com/flcdrg/Verify.MongoDB): Verification of [MongoDB](https://www.mongodb.com/) bits.\n* [Verify.Moq](https://github.com/VerifyTests/Verify.Moq): Verification of [Moq](https://github.com/moq/moq4) bits.\n* [Verify.NodaTime](https://github.com/VerifyTests/Verify.NodaTime): Support for [NodaTime](https://nodatime.org/).\n* [Verify.NewtonsoftJson](https://github.com/VerifyTests/Verify.NewtonsoftJson): Support for converting [Newtonsoft.Json](https://github.com/JamesNK/Newtonsoft.Json) types (JObject and JArray).\n* [Verify.NServiceBus](https://github.com/VerifyTests/Verify.NServiceBus): Verify NServiceBus Test Contexts.\n* [Verify.NSubstitute](https://github.com/VerifyTests/Verify.NSubstitute): Support for [NSubstitute](https://nsubstitute.github.io/) types.\n* [Verify.Nupkg](https://github.com/MattKotsenas/Verify.Nupkg/): Verification of [NuGet .nupkg](https://learn.microsoft.com/en-us/nuget/what-is-nuget) files.\n* [Verify.PdfPig](https://github.com/VerifyTests/Verify.PdfPig): Verification of pdfs via [PdfPig](https://github.com/UglyToad/PdfPig).\n* [Verify.Phash](https://github.com/VerifyTests/Verify.Phash): Comparison of images via [Phash](https://github.com/pgrho/phash).\n* [Verify.Quibble](https://github.com/VerifyTests/Verify.Quibble): Comparison of objects via [Quibble](https://github.com/nrkno/Quibble).\n* [Verify.QuestPDF](https://github.com/VerifyTests/Verify.QuestPDF): Verification of pdf documents\n  via [QuestPDF](https://www.questpdf.com/).\n* [Verify.RavenDb](https://github.com/VerifyTests/Verify.RavenDb): Verification of [RavenDb](https://ravendb.net) bits.\n* [Verify.SendGrid](https://github.com/VerifyTests/Verify.SendGrid): Verification of [SendGrid](https://github.com/sendgrid/sendgrid-csharp).\n* [Verify.Serilog](https://github.com/VerifyTests/Verify.Serilog): Verification of [Serilog](https://serilog.net/) bits.\n* [Verify.SqlServer](https://github.com/VerifyTests/Verify.SqlServer): Verification of SqlServer bits.\n* [Verify.SourceGenerators](https://github.com/VerifyTests/Verify.SourceGenerators): Verification of C# Source Generators.\n* [Verify.SystemJson](https://github.com/VerifyTests/Verify.SystemJson): Support for converting System.Text.Json types.\n* [Verify.Terminal](https://github.com/VerifyTests/Verify.Terminal): A dotnet tool for managing Verify snapshots.\n* [Verify.Ulid](https://github.com/VerifyTests/Verify.Ulid): Enable scrubbing of Universally Unique Lexicographically Sortable Identifiers via the [Ulid](https://github.com/Cysharp/Ulid) package.\n* [Verify.NUlid](https://github.com/VerifyTests/Verify.NUlid): Enable scrubbing of Universally Unique Lexicographically Sortable Identifiers via [NUlid](https://github.com/RobThree/NUlid) package.\n* [Verify.WinForms](https://github.com/VerifyTests/Verify.WinForms): Verification of WinForms UIs.\n* [Verify.Xamarin](https://github.com/VerifyTests/Verify.Xamarin): Verification of Xamarin UIs.\n* [Verify.Xaml](https://github.com/VerifyTests/Verify.Xaml): Verification of Xaml UIs.\n* [Spectre.Verify.Extensions](https://github.com/spectresystems/spectre.verify.extensions): Add an attribute driven file naming convention to Verify.\n* [Verify.Syncfusion](https://github.com/VerifyTests/Verify.Syncfusion): Verification of documents (pdf, docx, xlsx, and pptx) via [Syncfusion File Formats](https://help.syncfusion.com/file-formats/introduction).\n* [Verify.Wolverine](https://github.com/VerifyTests/Verify.Wolverine): Verifiable test context for [Wolverine](https://github.com/JasperFx/wolverine).\n* [Verify.ZeroLog](https://github.com/VerifyTests/Verify.ZeroLog): Verifiable test context for [ZeroLog](https://github.com/Abc-Arbitrage/ZeroLog).\n\n\n## More Documentation\n\n  * [Clipboard](/docs/clipboard.md)<!-- include: doc-index. path: /docs/mdsource/doc-index.include.md -->\n  * [Compared to assertions](/docs/compared-to-assertion.md)\n  * [Verify options](/docs/verify-options.md)\n  * [VerifyDirectory](/docs/verify-directory.md)\n  * [VerifyZip](/docs/verify-zip.md)\n  * [VerifyFile](/docs/verify-file.md)\n  * [VerifyXml](/docs/verify-xml.md)\n  * [Serializer Settings](/docs/serializer-settings.md)\n    * [Obsolete members](/docs/obsolete-members.md)\n    * [Guids](/docs/guids.md)\n    * [Dates](/docs/dates.md)\n    * [Scrubbing](/docs/scrubbers.md)\n    * [Members that throw](/docs/members-throw.md)\n    * [Ordering](/docs/ordering.md)\n    * [Encoding](/docs/encoding.md)\n    * [JsonAppender](/docs/jsonappender.md)\n  * [File naming](/docs/naming.md)\n  * [AppendFile](/docs/append-file.md)\n  * [Parameterised tests](/docs/parameterised.md)\n    * [NUnit](/docs/parameterised-nunit.md)\n    * [Xunit V2](/docs/parameterised-xunitv2.md)\n    * [Xunit V3](/docs/parameterised-xunitv3.md)\n    * [MSTest](/docs/parameterised-mstest.md)\n    * [TUnit](/docs/parameterised-tunit.md)\n    * [Fixie](/docs/parameterised-fixie.md)\n    * [Expecto](/docs/parameterised-expecto.md)\n  * [Combinations](/docs/combinations.md)\n  * [Named Tuples](/docs/named-tuples.md)\n  * [Diff Engine](https://github.com/VerifyTests/DiffEngine)\n  * [Diff Tools](https://github.com/VerifyTests/DiffEngine/blob/master/docs/diff-tool.md)\n  * [Diff Tool Order](https://github.com/VerifyTests/DiffEngine/blob/master/docs/diff-tool.order.md)\n  * [Custom Diff Tool](https://github.com/VerifyTests/DiffEngine/blob/master/docs/diff-tool.custom.md)\n  * [Using anonymous types](/docs/anonymous-types.md)\n  * [Verifying binary data](/docs/binary.md)\n  * [Build server](/docs/build-server.md)\n  * [Comparers](/docs/comparer.md)\n  * [Converters](/docs/converter.md)\n  * [Recording](/docs/recording.md)\n  * [Explicit Targets](/docs/explicit-targets.md)\n  * [FSharp Usage](/docs/fsharp.md)\n  * [Compared to ApprovalTests](/docs/compared-to-approvaltests.md)<!-- endInclude -->\n\n\n## Icon\n\n[Helmet](https://thenounproject.com/term/helmet/9554/) designed by [Leonidas Ikonomou](https://thenounproject.com/alterego) from [The Noun Project](https://thenounproject.com).\n"
        },
        {
          "name": "readme.source.md",
          "type": "blob",
          "size": 21.9296875,
          "content": "# <img src='/src/icon.png' height='30px'> Verify\n\n[![Discussions](https://img.shields.io/badge/Verify-Discussions-yellow?svg=true&label=)](https://github.com/orgs/VerifyTests/discussions)\n[![Build status](https://ci.appveyor.com/api/projects/status/dpqylic0be7s9vnm/branch/main?svg=true)](https://ci.appveyor.com/project/SimonCropp/Verify)\n[![NuGet Status](https://img.shields.io/nuget/v/Verify.NUnit.svg?label=Verify.NUnit)](https://www.nuget.org/packages/Verify.NUnit/)\n[![NuGet Status](https://img.shields.io/nuget/v/Verify.Xunit.svg?label=Verify.Xunit)](https://www.nuget.org/packages/Verify.Xunit/)\n[![NuGet Status](https://img.shields.io/nuget/v/Verify.XunitV3.svg?label=Verify.XunitV3)](https://www.nuget.org/packages/Verify.XunitV3/)\n[![NuGet Status](https://img.shields.io/nuget/v/Verify.Fixie.svg?label=Verify.Fixie)](https://www.nuget.org/packages/Verify.Fixie/)\n[![NuGet Status](https://img.shields.io/nuget/v/Verify.Expecto.svg?label=Verify.Expecto)](https://www.nuget.org/packages/Verify.Expecto/)\n[![NuGet Status](https://img.shields.io/nuget/v/Verify.MSTest.svg?label=Verify.MSTest)](https://www.nuget.org/packages/Verify.MSTest/)\n[![NuGet Status](https://img.shields.io/nuget/v/Verify.TUnit.svg?label=Verify.TUnit)](https://www.nuget.org/packages/Verify.TUnit/)\n[![NuGet Status](https://img.shields.io/nuget/v/Verify.ClipboardAccept.svg?label=Verify.ClipboardAccept)](https://www.nuget.org/packages/Verify.ClipboardAccept/)\n\nVerify is a snapshot tool that simplifies the assertion of complex data models and documents.\n\nVerify is called on the test result during the assertion phase. It serializes that result and stores it in a file that\nmatches the test name. On the next test execution, the result is again serialized and compared to the existing file. The\ntest will fail if the two snapshots do not match: either the change is unexpected, or the reference snapshot needs to be\nupdated to the new result.\n\n**See [Milestones](../../milestones?state=closed) for release notes.**\n\n\n## Requirements\n\n * Supported runtimes: net472, net48, net481, net6, net8, and net9.\n * Supported SDK: 8.0.300 and up\n\n\n## [Getting started wizard](/docs/wiz/readme.md)\n\nGet customized instructions for the specific combination of Operating System, IDE, Test Framework, and Build Server.\n\n[Start wizard](/docs/wiz/readme.md).\n\n\n## NuGet packages\n\n* https://nuget.org/packages/Verify.NUnit/\n* https://nuget.org/packages/Verify.Xunit/\n* https://nuget.org/packages/Verify.XunitV3/\n* https://nuget.org/packages/Verify.Fixie/\n* https://nuget.org/packages/Verify.Expecto/\n* https://nuget.org/packages/Verify.MSTest/\n* https://nuget.org/packages/Verify.TUnit/\n\n\n## Snapshot management\n\nAccepting or declining a snapshot file is part of the core workflow of Verify. There are several ways to do this and the\napproach(s) selected is a personal preference.\n\n* In the Windows Tray via [DiffEngineTray](https://github.com/VerifyTests/DiffEngine/blob/main/docs/tray.md)\n* [ReSharper test runner plugin](https://plugins.jetbrains.com/plugin/17241-verify-support) ([Source](https://github.com/matkoch/resharper-verify))\n* [Rider test runner plugin](https://plugins.jetbrains.com/plugin/17240-verify-support) ([Source](https://github.com/matkoch/resharper-verify))\n* [Via the clipboard](/docs/clipboard.md).\n* Manually making the change in the [launched diff tool](https://github.com/VerifyTests/DiffEngine#supported-tools).\n  Either with a copy paste, or some tools have commands to automate this via a shortcut or a button.\n* Manually on the file system, by renaming the `.received.` file to `.verified.`. This can be automated via scripts\n  to bulk accept all `.received.` files by matching a pattern.\n* Using the dotnet tool [Verify.Terminal](https://github.com/VerifyTests/Verify.Terminal).\n\n\n## Usage\n\n\n### ImplicitUsings\n\ninclude: implicit-usings\n\n\n### Class being tested\n\nGiven a class to be tested:\n\nsnippet: ClassBeingTested\n\n\n### NUnit\n\nSupport for [NUnit](https://nunit.org/)\n\nsnippet: SampleTestNUnit\n\n\n### xUnit\n\nSupport for [xUnit](https://xunit.net/)\n\nsnippet: SampleTestXunit\n\n\n### xUnitV3\n\nSupport for [xUnitV3](https://xunit.net/)\n\nsnippet: SampleTestXunitV3\n\n\n### Fixie\n\nSupport for [Fixie](http://fixie.github.io/)\n\nsnippet: SampleTestFixie\n\ninclude: fixie-convention\n\n\n### Expecto\n\nSupport for [Expecto](https://github.com/haf/expecto)\n\nsnippet: SampleTestExpecto\n\n\n#### Caveats\n\nDue to the nature of the Expecto implementation, the following APIs in Verify are not supported.\n\n* `settings.UseParameters()`\n* `settings.UseTextForParameters()`\n\n\n### TUnit\n\nSupport for [TUnit](https://github.com/thomhurst/TUnit)\n\nsnippet: SampleTestTUnit\n\n\n### MSTest\n\nSupport for [MSTest](https://github.com/Microsoft/testfx-docs)\n\nsnippet: SampleTestMSTest\n\n\n#### Marking tests as 'Using Verify'\n\ninclude: mstest-marker\n\n\n### Initial Verification\n\nNo existing `.verified.` file.\n\n```mermaid\ngraph TD\nrun(Run test and<br/>create Received file)\nfailTest(Fail Test<br/>and show Diff)\ncloseDiff(Close Diff)\nrun-->failTest\nshouldAccept{Accept ?}\nfailTest-->shouldAccept\naccept(Move Received<br/>to Verified)\nshouldAccept-- Yes -->accept\ndiscard(Discard<br/>Received)\nshouldAccept-- No -->discard\naccept-->closeDiff\ndiscard-->closeDiff\n```\n\nWhen the test is initially run it will fail. If a [Diff Tool](https://github.com/VerifyTests/DiffEngine) is detected it\nwill be used to display the diff.\n\n![InitialDiff](/docs/InitialDiff.png)\n\nTo verify the result:\n\n* Execute the command from the [Clipboard](/docs/clipboard.md), or\n* Accept with [DiffEngineTray tool](https://github.com/VerifyTests/DiffEngine/blob/master/docs/tray.md),\n* Accept with [ReSharper Addin](https://plugins.jetbrains.com/plugin/17241-verify-support)\n  or [Rider Addin](https://plugins.jetbrains.com/plugin/17240-verify-support)\n* Use the diff tool to accept the changes, or\n* Manually copy the text to the new file\n\n\n#### Verified result\n\nThis will result in the `Sample.Test.verified.txt` being created:\n\nsnippet: Verify.Xunit.Tests/Snippets/Sample.Test.verified.txt\n\n\n### Subsequent Verification\n\nExisting `.verified.` file.\n\n```mermaid\ngraph TD\nrun(Run test and<br/>create Received file)\ncloseDiff(Close Diff)\nfailTest(Fail Test<br/>and show Diff)\nrun-->isSame\nshouldAccept{Accept ?}\nfailTest-->shouldAccept\naccept(Move Received<br/>to Verified)\nshouldAccept-- Yes -->accept\ndiscard(Discard<br/>Received)\nshouldAccept-- No -->discard\n\nisSame{Compare<br/>Verified +<br/>Received}\npassTest(Pass Test and<br/>discard Received)\nisSame-- Same --> passTest\nisSame-- Different --> failTest\naccept-->closeDiff\ndiscard-->closeDiff\n```\n\nIf the implementation of `ClassBeingTested` changes:\n\nsnippet: ClassBeingTestedChanged\n\nAnd the test is re-run it will fail.\n\n\n#### The [Diff Tool](https://github.com/VerifyTests/DiffEngine) will display the diff:\n\n![SecondDiff](/docs/SecondDiff.png)\n\nThe same approach can be used to verify the results and the change to `Sample.Test.verified.txt` is committed to source\ncontrol along with the change to `ClassBeingTested`.\n\n\n### Async\n\n`Verify()` has overloads that accept `Task<T>`, `ValueTask<T>`, and `IAsyncEnumerable<T>`. These are `await`ed before\nverification.\n\nThere is also an overload that accepts `Func<Task<T>>`, which works well with `async` lambda expressions:\n\nsnippet: VerifyFuncOfTaskOfT\n\n\n### VerifyJson\n\n`VerifyJson` performs the following actions\n\n* Convert to `JToken` (if necessary).\n* Apply [ignore member by name](/docs/serializer-settings.md#ignore-member-by-name) for keys.\n* PrettyPrint the resulting text.\n\nsnippet: VerifyJson\n\nResults in a .txt file:\n\nsnippet: JsonTests.VerifyJsonString.verified.txt\n\n\n## Conventions\n\n\n### Source control Includes/Excludes\n\ninclude: include-exclude\n\n\n### Text file settings\n\ninclude: text-file-settings\n\n\n### Conventions check\n\nThe above conventions can be checked by calling `VerifyChecks.Run()` in a test\n\n\n#### MSTest\n\nsnippet: VerifyChecksMSTest\n\n\n#### Expecto\n\nsnippet: VerifyChecksExpecto\n\n\n#### Fixie\n\nsnippet: VerifyChecksFixie\n\n\n#### Xunit\n\nsnippet: VerifyChecksXunit\n\n\n#### XunitV3\n\nsnippet: VerifyChecksXunitV3\n\n\n#### NUnit\n\nsnippet: VerifyChecksNUnit\n\n\n#### TUnit\n\nsnippet: VerifyChecksTUnit\n\n\n## Static settings\n\nMost settings are available at the both global level and at the instance level.\n\nWhen modifying settings at the both global level it should be done using a Module Initializer:\n\nsnippet: StaticSettings.cs\n\n\n## VerifyResult\n\nIn some scenarios it can be helpful to get access to the resulting `*.verified.*` files after a successful run. For\nexample to do an explicit check for contains or not-contains in the resulting text. To allow this all Verify methods\nreturn a `VerifyResult`.\n\nsnippet: VerifyResult\n\nIf using `Verifier.Throws`, the resulting `Exception` will also be accessible\n\nsnippet: ExceptionResult\n\n\n## CurrentFile\n\nUtility for finding paths based on the current file.\n\nsnippet: CurrentFile.cs\n\n\n## Versioning\n\nVerify follows [Semantic Versioning](https://semver.org/). The same applies for [extensions to Verify](#extensions).\nSmall changes in the resulting snapshot files may be deployed in a minor version. As such nuget updates to `Verify.*`\nshould be done as follows:\n\n* Update all `Verify.*`packages in isolation\n* Re-run all tests.\n* If there are changes, ensure they look correct given the release notes. If the changes do not look correct, raise an\n  issue.\n* Accept the changes.\n\nSnapshot changes do not trigger a major version change to avoid\ncausing [Diamond dependency](https://en.wikipedia.org/wiki/Dependency_hell#Problems) issues for downstream extensions.\n\n\n## Unit testing inside virtualized environment\n\nUnit tests referencing `Verify` (including unit tests within this repository as well as any other code\nreferencing `Verify`) can be run and debugged on a local virtualized environment supported\nby [Visual Studio Remote Testing](https://learn.microsoft.com/en-us/visualstudio/test/remote-testing?view=vs-2022).\nInitial configurations have been added for `WSL` and net 7.0 linux docker via `testenvironments.json` (for third party\ncode, the file needs to be copied or recreated next to the `.sln` solution file for solution to leverage the\nfunctionality).\n\nUpon opening the Tests Explorer the advanced environments are available in the GUI:\n\n![TestExplorerEnvironments](/docs/TestExplorerEnvironments.png)\n\nThis readme will not discuss definitive list of details for proper setup of the environments instead refer the following\ninformation sources and warn about particular gotchas:\n\n* WSL runs\n    * Install [WSL](https://learn.microsoft.com/en-us/windows/wsl/about).\n    * Install a [distribution](https://aka.ms/wslstore).\n    * [Install .NET Runtime](https://learn.microsoft.com/en-us/dotnet/core/install/linux-ubuntu)\n* Docker runs\n    * Install [Docker Desktop](https://www.docker.com/products/docker-desktop/)\n    * First run of docker scenario might need elevation ([Test project does not reference any .NET NuGet adapter](https://developercommunity.visualstudio.com/t/test-project-does-not-reference-any-net-nuget-adap/1311698) error)\n* Third party test runners might not support this feature.\n  Use [Visual Studio Test Explorer](https://learn.microsoft.com/en-us/visualstudio/test/run-unit-tests-with-test-explorer).\n\n\n## Media\n\n\n### Blogs\n\n* [Snapshot Testing in .NET with Verify - Khalid Abuhakmeh (12 July 2024)](https://blog.jetbrains.com/dotnet/2024/07/11/snapshot-testing-in-net-with-verify/)\n* [Snapshot testing in C# with Verify - Tim Deschryver (21 Feb 2024)](https://timdeschryver.dev/bits/snapshot-testing-in-c-with-verify)\n* [Snapshot Testing in C# - William Rees (13 Feb 2024)](https://wil-rees.medium.com/snapshot-testing-with-verify-xunit-f1ae5127b800)\n* [I want to do a snapshot test with C# (26 Dec 2023)](https://zzzkan.me/blog/verify-tests/)\n* [I REGRET Not Telling Dave Farley THIS about Approval Testing - Emily Bache (27 Sep 2023)](https://www.youtube.com/watch?v=jOuqE_o9rmg)\n* [Today's random F# code: Using Verify to prevent breaking changes in stored data - Urs Enzler (31 Mar 2023)](https://www.planetgeek.ch/2023/03/31/todays-random-f-code-using-verify-to-prevent-breaking-changes-in-stored-data/)\n* [Compare object values in xUnit C# with Verify - Pierre Belin (18 Nov 2022)](https://pierrebelin.medium.com/compare-object-values-in-xunit-c-with-verify-215d02b4ed39/)\n* [Unit testing assertions are now easier than ever with Verify Snapshot tool - Rana Krishnrajsinh (5 Nov 2022)](https://www.youtube.com/watch?v=T1ZPGi_dHFM)\n* [The easiest way to Unit Test with Verify in C# - Tomasz Juszczak (6 Sep 2022)](https://prographers.com/blog/the-easiest-way-to-unit-test-with-verify-in-c)\n* [Testing an incremental generator with snapshot testing (14 Dec 2021)](https://andrewlock.net/creating-a-source-generator-part-2-testing-an-incremental-generator-with-snapshot-testing/)\n* [5 helpful Nuget package for Unit Testing in .NET (16 Oct 2021)](https://medium.com/@niteshsinghal85/5-helpful-nuget-package-for-unit-testing-in-net-87c2e087c6d)\n* [Snapshot Testing with Verify: Carl Franklin's Blazor Train (3 Apr 2020)](https://rowell.heria.uk/blog/2020/11/23/verify-snapshot-testing-for-c)\n* [Verify: Snapshot Testing for C# (23 Nov 2020)](https://rowell.heria.uk/blog/2020/11/23/verify-snapshot-testing-for-c)\n\n\n### Podcasts\n\n* [Unhandled Exception podcast: Snapshot Testing (26 Nov 2021)](https://unhandledexceptionpodcast.com/posts/0029-snapshottesting/)\n* [Snapshot Testing with Verify - Dan Clarke (10 Dec 2021)](https://www.danclarke.com/snapshot-testing-with-verify)\n\n\n### Videos\n\n* [The Only Type of Testing U Need - Nick Chapsas (12 Nov 2024)](https://www.youtube.com/watch?v=JG4zt9CnIl4)\n* [Introduction to Snapshot testing and using Verify.Xunit - Betatalks (11 Oct 2023)](https://www.youtube.com/watch?v=RVmz3FZFIBU)\n* [The Way to Test Legacy Code in C# - Gui Ferreira (19 Sep 2023)](https://www.youtube.com/watch?v=UC-AUnuTh0I)\n* [Snapshot Testing in .NET with Verify - Dan Clarke (21 Jul 2022)](https://www.youtube.com/watch?v=wA7oJDyvn4c&t=1s)\n* [Testing C# code reliably by freezing it in time - Nick Chapsas (1 Aug 2022)](https://www.youtube.com/watch?v=Q1_YkcPwpqY)\n* [5 open source .NET projects that deserve more attention (9 Sep 2021)](https://www.youtube.com/watch?v=mwHWPoKEmyY&t=515s)\n* [OSS Power-Ups: Verify (14 Jul 2021)](https://www.youtube.com/watch?v=ZD5-51iCmU0)\n* [Verify Xunit Intro (26 Apr 2020)](https://www.youtube.com/watch?v=uGVogEltSkY)\n\n\n## Extensions\n\n* [Verify.AngleSharp](https://github.com/VerifyTests/Verify.AngleSharp): Html verification utilities via [AngleSharp](https://github.com/AngleSharp/AngleSharp).\n* [Verify.AspNetCore](https://github.com/VerifyTests/Verify.AspNetCore): Verification of AspNetCore bits.\n* [Verify.Aspose](https://github.com/VerifyTests/Verify.Aspose): Verification of documents (pdf, docx, xlsx, and pptx) via Aspose.\n* [Verify.Assertions](https://github.com/VerifyTests/Verify.Assertions): Extends Verify to allow an assertion callback. This enables using assertion libraries to interrogate during serialization.\n* [Verify.AustralianProtectiveMarkings](https://github.com/pmcau/AustralianProtectiveMarkings): Verification of AustralianProtectiveMarkings.\n* [Verify.Avalonia](https://github.com/VerifyTests/Verify.Avalonia): Verification of [Avalonia UIs](https://avaloniaui.net/).\n* [Verify.Blazor](https://github.com/VerifyTests/Verify.Blazor): Verification of [Blazor Component](https://docs.microsoft.com/en-us/aspnet/core/blazor/#components) Blazor rendering.\n* [Verify.Bunit](https://github.com/VerifyTests/Verify.Bunit): Verification of [Blazor Component](https://docs.microsoft.com/en-us/aspnet/core/blazor/#components) via [bunit](https://bunit.egilhansen.com).\n* [Verify.Brighter](https://github.com/VerifyTests/Verify.Brighter): Verification of [Brighter](https://www.goparamore.io/) bits.\n* [Verify.CommunityToolkit.Mvvm](https://github.com/VerifyTests/Verify.CommunityToolkit.Mvvm): Verification of [CommunityToolkit.Mvvm](https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/).\n* [Verify.Cosmos](https://github.com/VerifyTests/Verify.Cosmos): Verification of [Azure CosmosDB](https://docs.microsoft.com/en-us/azure/cosmos-db/).\n* [Verify.DiffPlex](https://github.com/VerifyTests/Verify.DiffPlex): Comparison of text via [DiffPlex](https://github.com/mmanela/diffplex).\n* [Verify.DocNet](https://github.com/VerifyTests/Verify.DocNet): Verification of pdfs via [DocNet](https://github.com/GowenGit/docnet).\n* [Verify.EntityFramework](https://github.com/VerifyTests/Verify.EntityFramework): Verification of EntityFramework bits.\n* [Verify.FakeItEasy](https://github.com/VerifyTests/Verify.FakeItEasy): Verification of [FakeItEasy](https://fakeiteasy.github.io/) bits.\n* [Verify.Flurl](https://github.com/VerifyTests/Verify.Flurl): Verification of [Flurl](https://flurl.dev/) bits.\n* [Verify.HeadlessBrowsers](https://github.com/VerifyTests/Verify.HeadlessBrowsers): Verification of Web UIs using [Playwright](https://github.com/microsoft/playwright-sharp), [Puppeteer Sharp](https://github.com/hardkoded/puppeteer-sharp), or [Selenium](https://www.selenium.dev).\n* [Verify.Http](https://github.com/VerifyTests/Verify.Http): Verification of Http bits.\n* [Verify.ICSharpCode.Decompiler](https://github.com/VerifyTests/Verify.ICSharpCode.Decompiler): Comparison of assemblies and types via [ICSharpCode.Decompiler](https://github.com/icsharpcode/ILSpy/wiki/Getting-Started-With-ICSharpCode.Decompiler).\n* [Verify.ImageHash](https://github.com/VerifyTests/Verify.ImageHash): Comparison of images via [ImageHash](https://github.com/coenm/ImageHash).\n* [Verify.ImageSharp.Compare](https://github.com/VerifyTests/Verify.ImageSharp.Compare): Verification and comparison of images via [Codeuctivity.ImageSharp.Compare](https://github.com/Codeuctivity/ImageSharp.Compare).\n* [Verify.ImageMagick](https://github.com/VerifyTests/Verify.ImageMagick): Verification and comparison of images via [Magick.NET](https://github.com/dlemstra/Magick.NET).\n* [Verify.ImageSharp](https://github.com/VerifyTests/Verify.ImageSharp): Verification of images via [ImageSharp](https://github.com/SixLabors/ImageSharp).\n* [Verify.MailMessage](https://github.com/VerifyTests/Verify.MailMessage): Verification\n  of [MailMessage](https://learn.microsoft.com/en-us/dotnet/api/system.net.mail.mailmessage) and related types.\n* [Verify.MassTransit](https://github.com/VerifyTests/Verify.MassTransit): Support for MassTransit test helpers.\n* [Verify.MicrosoftLogging](https://github.com/VerifyTests/Verify.MicrosoftLogging): Verify MicrosoftLogging.\n* [Verify.MongoDB](https://github.com/flcdrg/Verify.MongoDB): Verification of [MongoDB](https://www.mongodb.com/) bits.\n* [Verify.Moq](https://github.com/VerifyTests/Verify.Moq): Verification of [Moq](https://github.com/moq/moq4) bits.\n* [Verify.NodaTime](https://github.com/VerifyTests/Verify.NodaTime): Support for [NodaTime](https://nodatime.org/).\n* [Verify.NewtonsoftJson](https://github.com/VerifyTests/Verify.NewtonsoftJson): Support for converting [Newtonsoft.Json](https://github.com/JamesNK/Newtonsoft.Json) types (JObject and JArray).\n* [Verify.NServiceBus](https://github.com/VerifyTests/Verify.NServiceBus): Verify NServiceBus Test Contexts.\n* [Verify.NSubstitute](https://github.com/VerifyTests/Verify.NSubstitute): Support for [NSubstitute](https://nsubstitute.github.io/) types.\n* [Verify.Nupkg](https://github.com/MattKotsenas/Verify.Nupkg/): Verification of [NuGet .nupkg](https://learn.microsoft.com/en-us/nuget/what-is-nuget) files.\n* [Verify.PdfPig](https://github.com/VerifyTests/Verify.PdfPig): Verification of pdfs via [PdfPig](https://github.com/UglyToad/PdfPig).\n* [Verify.Phash](https://github.com/VerifyTests/Verify.Phash): Comparison of images via [Phash](https://github.com/pgrho/phash).\n* [Verify.Quibble](https://github.com/VerifyTests/Verify.Quibble): Comparison of objects via [Quibble](https://github.com/nrkno/Quibble).\n* [Verify.QuestPDF](https://github.com/VerifyTests/Verify.QuestPDF): Verification of pdf documents\n  via [QuestPDF](https://www.questpdf.com/).\n* [Verify.RavenDb](https://github.com/VerifyTests/Verify.RavenDb): Verification of [RavenDb](https://ravendb.net) bits.\n* [Verify.SendGrid](https://github.com/VerifyTests/Verify.SendGrid): Verification of [SendGrid](https://github.com/sendgrid/sendgrid-csharp).\n* [Verify.Serilog](https://github.com/VerifyTests/Verify.Serilog): Verification of [Serilog](https://serilog.net/) bits.\n* [Verify.SqlServer](https://github.com/VerifyTests/Verify.SqlServer): Verification of SqlServer bits.\n* [Verify.SourceGenerators](https://github.com/VerifyTests/Verify.SourceGenerators): Verification of C# Source Generators.\n* [Verify.SystemJson](https://github.com/VerifyTests/Verify.SystemJson): Support for converting System.Text.Json types.\n* [Verify.Terminal](https://github.com/VerifyTests/Verify.Terminal): A dotnet tool for managing Verify snapshots.\n* [Verify.Ulid](https://github.com/VerifyTests/Verify.Ulid): Enable scrubbing of Universally Unique Lexicographically Sortable Identifiers via the [Ulid](https://github.com/Cysharp/Ulid) package.\n* [Verify.NUlid](https://github.com/VerifyTests/Verify.NUlid): Enable scrubbing of Universally Unique Lexicographically Sortable Identifiers via [NUlid](https://github.com/RobThree/NUlid) package.\n* [Verify.WinForms](https://github.com/VerifyTests/Verify.WinForms): Verification of WinForms UIs.\n* [Verify.Xamarin](https://github.com/VerifyTests/Verify.Xamarin): Verification of Xamarin UIs.\n* [Verify.Xaml](https://github.com/VerifyTests/Verify.Xaml): Verification of Xaml UIs.\n* [Spectre.Verify.Extensions](https://github.com/spectresystems/spectre.verify.extensions): Add an attribute driven file naming convention to Verify.\n* [Verify.Syncfusion](https://github.com/VerifyTests/Verify.Syncfusion): Verification of documents (pdf, docx, xlsx, and pptx) via [Syncfusion File Formats](https://help.syncfusion.com/file-formats/introduction).\n* [Verify.Wolverine](https://github.com/VerifyTests/Verify.Wolverine): Verifiable test context for [Wolverine](https://github.com/JasperFx/wolverine).\n* [Verify.ZeroLog](https://github.com/VerifyTests/Verify.ZeroLog): Verifiable test context for [ZeroLog](https://github.com/Abc-Arbitrage/ZeroLog).\n\n\n## More Documentation\n\ninclude: doc-index\n\n\n## Icon\n\n[Helmet](https://thenounproject.com/term/helmet/9554/) designed by [Leonidas Ikonomou](https://thenounproject.com/alterego) from [The Noun Project](https://thenounproject.com).\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "usages",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}