{
  "metadata": {
    "timestamp": 1736710685791,
    "page": 46,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Redth/PushSharp",
      "stars": 4381,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4716796875,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# Custom for Visual Studio\n*.cs     diff=csharp\n*.sln    merge=union\n*.csproj merge=union\n*.vbproj merge=union\n*.fsproj merge=union\n*.dbproj merge=union\n\n# Standard to msysgit\n*.doc\t diff=astextplain\n*.DOC\t diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot  diff=astextplain\n*.DOT  diff=astextplain\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.373046875,
          "content": "# Build Folders (you can keep bin if you'd like, to store dlls and pdbs)\nbin\n[Bb]in\nobj\n[Oo]bj\n[Dd]ebug*/\n[Rr]elease*/\n\n*.unsuccessfulbuild\n*.pidb\n*.userprefs\n*.suo\n*.resharper\n*.svn\n*.sln.DotSettings.user\n*.crx\n*.pem\n*.csproj.user\n\n\n# mstest test results\nTestResults\ntest-results\n\n#NuGet\npackages/\n\nXamarin/\nPushSharp.Sample.LocalTesting/\n\nnode_modules/\n.idea/\n.vs/\n\nsettings.json\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.076171875,
          "content": "[submodule \"HttpTwo\"]\n\tpath = HttpTwo\n\turl = git@github.com:Redth/HttpTwo.git\n"
        },
        {
          "name": "HttpTwo",
          "type": "commit",
          "content": null
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 0.56640625,
          "content": "## PushSharp License\n\nCopyright 2012-2015 Jonathan Dick\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
        },
        {
          "name": "PushSharp-Signing.snk",
          "type": "blob",
          "size": 0.58203125,
          "content": null
        },
        {
          "name": "PushSharp.Amazon",
          "type": "tree",
          "content": null
        },
        {
          "name": "PushSharp.Apple",
          "type": "tree",
          "content": null
        },
        {
          "name": "PushSharp.Blackberry",
          "type": "tree",
          "content": null
        },
        {
          "name": "PushSharp.Core",
          "type": "tree",
          "content": null
        },
        {
          "name": "PushSharp.Firefox",
          "type": "tree",
          "content": null
        },
        {
          "name": "PushSharp.Google",
          "type": "tree",
          "content": null
        },
        {
          "name": "PushSharp.Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "PushSharp.Windows",
          "type": "tree",
          "content": null
        },
        {
          "name": "PushSharp.nuspec",
          "type": "blob",
          "size": 2.5673828125,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<package xmlns=\"http://schemas.microsoft.com/packaging/2011/10/nuspec.xsd\">\n    <metadata>\n        <id>PushSharp</id>\n        <version>$version$</version>\n        <title>PushSharp</title>\n        <authors>Redth</authors>\n        <owners>Redth</owners>\n        <licenseUrl>http://www.apache.org/licenses/LICENSE-2.0.txt</licenseUrl>\n        <projectUrl>https://github.com/Redth/PushSharp/</projectUrl>\n        <iconUrl>https://github.com/Redth/PushSharp/raw/master/Resources/PushSharp-Icon-NuGet-Small.png</iconUrl>\n        <requireLicenseAcceptance>false</requireLicenseAcceptance>\n        <description>A server-side library for sending Push Notifications to iOS/OSX (APNS), Android/Chrome (GCM), Windows Phone/Windows (WNS), Amazon (ADM), Blackberry and Firefox OS</description>\n        <summary>A server-side library for sending Push Notifications to many platforms (APNS, GCM, WNS, ADM)</summary>\n        <releaseNotes>\n            3.0.0 - Complete Rewrite, New API, see project site for more info\n        </releaseNotes>\n        <copyright>2012-2016 Redth</copyright>\n        <language>en-US</language>\n        <tags>APN, APNS, GCM, XMPP, ADM, GCMXMPP, C2DM, PAP, BIS, BEM, Blackberry, iOS, Android, iPad, iPhone, PushSharp, MDM, UWP, WNS, Windows Notification, Amazon, Amazon Device, Push, Push Notifications, Google Cloud, Cloud Messaging, Google Cloud Messaging, OSX, Mac, WindowsPhone, PassKit</tags>\n        <dependencies>\n            <dependency id=\"Newtonsoft.Json\" version=\"7.0.1\" />\n        </dependencies>\n    </metadata>\n    <files>\n        <file src=\"PushSharp.Core\\bin\\Release\\PushSharp.Core.dll\" target=\"lib\\net45\\PushSharp.Core.dll\" />\n\n        <file src=\"PushSharp.Amazon\\bin\\Release\\PushSharp.Amazon.dll\" target=\"lib\\net45\\PushSharp.Amazon.dll\" />\n        <file src=\"PushSharp.Apple\\bin\\Release\\PushSharp.Apple.dll\" target=\"lib\\net45\\PushSharp.Apple.dll\" />\n        <!-- <file src=\"PushSharp.Apple\\bin\\Release\\HttpTwo.dll\" target=\"lib\\net45\\HttpTwo.dll\" /> -->\n        <!-- <file src=\"PushSharp.Apple\\bin\\Release\\HttpTwo.HPack.dll\" target=\"lib\\net45\\HttpTwo.HPack.dll\" /> -->\n        <file src=\"PushSharp.Firefox\\bin\\Release\\PushSharp.Firefox.dll\" target=\"lib\\net45\\PushSharp.Firefox.dll\" />\n        <file src=\"PushSharp.Windows\\bin\\Release\\PushSharp.Windows.dll\" target=\"lib\\net45\\PushSharp.Windows.dll\" />\n        <file src=\"PushSharp.Google\\bin\\Release\\PushSharp.Google.dll\" target=\"lib\\net45\\PushSharp.Google.dll\" />\n        <file src=\"PushSharp.Blackberry\\bin\\Release\\PushSharp.Blackberry.dll\" target=\"lib\\net45\\PushSharp.Blackberry.dll\" />\n    </files>\n</package>"
        },
        {
          "name": "PushSharp.sln",
          "type": "blob",
          "size": 5.0126953125,
          "content": "ï»¿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio 2012\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"PushSharp.Core\", \"PushSharp.Core\\PushSharp.Core.csproj\", \"{2B44A8DA-60BC-4577-A2D7-D9D53F164B2E}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"PushSharp.Tests\", \"PushSharp.Tests\\PushSharp.Tests.csproj\", \"{989B7357-800E-46B9-91AF-A4CE8A55F389}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Platforms\", \"Platforms\", \"{2B7243CB-60A5-4682-802B-B7EC3DEBCF9A}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"PushSharp.Apple\", \"PushSharp.Apple\\PushSharp.Apple.csproj\", \"{A9D99F80-FEEB-4E74-96C5-66F17103C773}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"PushSharp.Windows\", \"PushSharp.Windows\\PushSharp.Windows.csproj\", \"{DC80552B-6730-44AA-9B74-1E036BD909C3}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"PushSharp.Firefox\", \"PushSharp.Firefox\\PushSharp.Firefox.csproj\", \"{54A4C1F9-6571-4086-BB4B-EC202138AF00}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"PushSharp.Amazon\", \"PushSharp.Amazon\\PushSharp.Amazon.csproj\", \"{2468C63B-C964-4FC3-9B16-13DC17CF7D11}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"PushSharp.Google\", \"PushSharp.Google\\PushSharp.Google.csproj\", \"{94F16497-471F-433F-A99E-C455FB2D7724}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"PushSharp.Blackberry\", \"PushSharp.Blackberry\\PushSharp.Blackberry.csproj\", \"{9F972AE9-DE47-4C26-AEE0-97E8A14F2E12}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Support Libraries\", \"Support Libraries\", \"{6449DAB1-E76A-4354-B633-CC6AC53BB757}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{2468C63B-C964-4FC3-9B16-13DC17CF7D11}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{2468C63B-C964-4FC3-9B16-13DC17CF7D11}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{2468C63B-C964-4FC3-9B16-13DC17CF7D11}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{2468C63B-C964-4FC3-9B16-13DC17CF7D11}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{2B44A8DA-60BC-4577-A2D7-D9D53F164B2E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{2B44A8DA-60BC-4577-A2D7-D9D53F164B2E}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{2B44A8DA-60BC-4577-A2D7-D9D53F164B2E}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{2B44A8DA-60BC-4577-A2D7-D9D53F164B2E}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{54A4C1F9-6571-4086-BB4B-EC202138AF00}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{54A4C1F9-6571-4086-BB4B-EC202138AF00}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{54A4C1F9-6571-4086-BB4B-EC202138AF00}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{54A4C1F9-6571-4086-BB4B-EC202138AF00}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{94F16497-471F-433F-A99E-C455FB2D7724}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{94F16497-471F-433F-A99E-C455FB2D7724}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{94F16497-471F-433F-A99E-C455FB2D7724}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{94F16497-471F-433F-A99E-C455FB2D7724}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{989B7357-800E-46B9-91AF-A4CE8A55F389}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{989B7357-800E-46B9-91AF-A4CE8A55F389}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{989B7357-800E-46B9-91AF-A4CE8A55F389}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{989B7357-800E-46B9-91AF-A4CE8A55F389}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{9F972AE9-DE47-4C26-AEE0-97E8A14F2E12}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{9F972AE9-DE47-4C26-AEE0-97E8A14F2E12}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{9F972AE9-DE47-4C26-AEE0-97E8A14F2E12}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{9F972AE9-DE47-4C26-AEE0-97E8A14F2E12}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{A9D99F80-FEEB-4E74-96C5-66F17103C773}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{A9D99F80-FEEB-4E74-96C5-66F17103C773}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{A9D99F80-FEEB-4E74-96C5-66F17103C773}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{A9D99F80-FEEB-4E74-96C5-66F17103C773}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{DC80552B-6730-44AA-9B74-1E036BD909C3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{DC80552B-6730-44AA-9B74-1E036BD909C3}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{DC80552B-6730-44AA-9B74-1E036BD909C3}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{DC80552B-6730-44AA-9B74-1E036BD909C3}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{A9D99F80-FEEB-4E74-96C5-66F17103C773} = {2B7243CB-60A5-4682-802B-B7EC3DEBCF9A}\n\t\t{DC80552B-6730-44AA-9B74-1E036BD909C3} = {2B7243CB-60A5-4682-802B-B7EC3DEBCF9A}\n\t\t{54A4C1F9-6571-4086-BB4B-EC202138AF00} = {2B7243CB-60A5-4682-802B-B7EC3DEBCF9A}\n\t\t{2468C63B-C964-4FC3-9B16-13DC17CF7D11} = {2B7243CB-60A5-4682-802B-B7EC3DEBCF9A}\n\t\t{94F16497-471F-433F-A99E-C455FB2D7724} = {2B7243CB-60A5-4682-802B-B7EC3DEBCF9A}\n\t\t{9F972AE9-DE47-4C26-AEE0-97E8A14F2E12} = {2B7243CB-60A5-4682-802B-B7EC3DEBCF9A}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.583984375,
          "content": "PushSharp v4.0\n==============\n\nPushSharp is a server-side library for sending Push Notifications to iOS/OSX (APNS), Android/Chrome (GCM/FCM), Windows/Windows Phone, Amazon (ADM) and Blackberry devices!\n\nPushSharp v3.0+ is a complete rewrite of the original library, aimed at taking advantage of things like async/await, HttpClient, and generally a better infrastructure using lessons learned from the old code.\n\nPushSharp will now follow [semver](http://semver.org/) versioning, so major version numbers will go up as there are any breaking api changes. \n\n[![Join the chat at https://gitter.im/Redth/PushSharp](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/Redth/PushSharp?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![AppVeyor CI Status](https://ci.appveyor.com/api/projects/status/github/Redth/PushSharp?branch=master&svg=true)](https://ci.appveyor.com/project/Redth/pushsharp)\n\n[![NuGet Version](https://badge.fury.io/nu/PushSharp.svg)](https://badge.fury.io/nu/PushSharp)\n\n - Read more on my blog http://redth.codes/pushsharp-3-0-the-push-awakens/\n - Join the [Gitter.im channel](https://gitter.im/Redth/PushSharp) with questions/feedback\n\n---\n\n## Sample Usage\n\nThe API in v3.x+ series is quite different from 2.x.  The goal is to simplify things and focus on the core functionality of the library, leaving things like constructing valid payloads up to the developer.\n\n### APNS Sample Usage\nHere is an example of how you would send an APNS notification:\n\n```csharp\n// Configuration (NOTE: .pfx can also be used here)\nvar config = new ApnsConfiguration (ApnsConfiguration.ApnsServerEnvironment.Sandbox, \n    \"push-cert.p12\", \"push-cert-pwd\");\n\n// Create a new broker\nvar apnsBroker = new ApnsServiceBroker (config);\n    \n// Wire up events\napnsBroker.OnNotificationFailed += (notification, aggregateEx) => {\n\n\taggregateEx.Handle (ex => {\n\t\n\t\t// See what kind of exception it was to further diagnose\n\t\tif (ex is ApnsNotificationException notificationException) {\n\t\t\t\n\t\t\t// Deal with the failed notification\n\t\t\tvar apnsNotification = notificationException.Notification;\n\t\t\tvar statusCode = notificationException.ErrorStatusCode;\n\n\t\t\tConsole.WriteLine ($\"Apple Notification Failed: ID={apnsNotification.Identifier}, Code={statusCode}\");\n\t\n\t\t} else {\n\t\t\t// Inner exception might hold more useful information like an ApnsConnectionException\t\t\t\n\t\t\tConsole.WriteLine ($\"Apple Notification Failed for some unknown reason : {ex.InnerException}\");\n\t\t}\n\n\t\t// Mark it as handled\n\t\treturn true;\n\t});\n};\n\napnsBroker.OnNotificationSucceeded += (notification) => {\n\tConsole.WriteLine (\"Apple Notification Sent!\");\n};\n\n// Start the broker\napnsBroker.Start ();\n\nforeach (var deviceToken in MY_DEVICE_TOKENS) {\n\t// Queue a notification to send\n\tapnsBroker.QueueNotification (new ApnsNotification {\n\t\tDeviceToken = deviceToken,\n\t\tPayload = JObject.Parse (\"{\\\"aps\\\":{\\\"badge\\\":7}}\")\n\t});\n}\n   \n// Stop the broker, wait for it to finish   \n// This isn't done after every message, but after you're\n// done with the broker\napnsBroker.Stop ();\n```\n\n#### Apple Notification Payload\n\nMore information about the payload sent in the ApnsNotification object can be found [here](https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/TheNotificationPayload.html).\n\n\n#### Apple APNS Feedback Service\n\nFor APNS you will also need to occasionally check with the feedback service to see if there are any expired device tokens you should no longer send notifications to.  Here's an example of how you would do that:\n\n```csharp\nvar config = new ApnsConfiguration (\n    ApnsConfiguration.ApnsServerEnvironment.Sandbox, \n    Settings.Instance.ApnsCertificateFile, \n    Settings.Instance.ApnsCertificatePassword);\n\nvar fbs = new FeedbackService (config);\nfbs.FeedbackReceived += (string deviceToken, DateTime timestamp) => {\n    // Remove the deviceToken from your database\n    // timestamp is the time the token was reported as expired\n};\nfbs.Check ();\n```\n\n\n### GCM/FCM Sample Usage\n\nHere is how you would send a GCM/FCM Notification:\n\n```csharp\n// Configuration GCM (use this section for GCM)\nvar config = new GcmConfiguration (\"GCM-SENDER-ID\", \"AUTH-TOKEN\", null);\nvar provider = \"GCM\";\n\n// Configuration FCM (use this section for FCM)\n// var config = new GcmConfiguration(\"APIKEY\");\n// config.GcmUrl = \"https://fcm.googleapis.com/fcm/send\";\n// var provider = \"FCM\";\n\n// Create a new broker\nvar gcmBroker = new GcmServiceBroker (config);\n    \n// Wire up events\ngcmBroker.OnNotificationFailed += (notification, aggregateEx) => {\n\n\taggregateEx.Handle (ex => {\n\t\n\t\t// See what kind of exception it was to further diagnose\n\t\tif (ex is GcmNotificationException notificationException) {\n\t\t\t\n\t\t\t// Deal with the failed notification\n\t\t\tvar gcmNotification = notificationException.Notification;\n\t\t\tvar description = notificationException.Description;\n\n\t\t\tConsole.WriteLine ($\"{provider} Notification Failed: ID={gcmNotification.MessageId}, Desc={description}\");\n\t\t} else if (ex is GcmMulticastResultException multicastException) {\n\n\t\t\tforeach (var succeededNotification in multicastException.Succeeded) {\n\t\t\t\tConsole.WriteLine ($\"{provider} Notification Succeeded: ID={succeededNotification.MessageId}\");\n\t\t\t}\n\n\t\t\tforeach (var failedKvp in multicastException.Failed) {\n\t\t\t\tvar n = failedKvp.Key;\n\t\t\t\tvar e = failedKvp.Value;\n\n\t\t\t\tConsole.WriteLine ($\"{provider} Notification Failed: ID={n.MessageId}, Desc={e.Description}\");\n\t\t\t}\n\n\t\t} else if (ex is DeviceSubscriptionExpiredException expiredException) {\n\t\t\t\n\t\t\tvar oldId = expiredException.OldSubscriptionId;\n\t\t\tvar newId = expiredException.NewSubscriptionId;\n\n\t\t\tConsole.WriteLine ($\"Device RegistrationId Expired: {oldId}\");\n\n\t\t\tif (!string.IsNullOrWhiteSpace (newId)) {\n\t\t\t\t// If this value isn't null, our subscription changed and we should update our database\n\t\t\t\tConsole.WriteLine ($\"Device RegistrationId Changed To: {newId}\");\n\t\t\t}\n\t\t} else if (ex is RetryAfterException retryException) {\n\t\t\t\n\t\t\t// If you get rate limited, you should stop sending messages until after the RetryAfterUtc date\n\t\t\tConsole.WriteLine ($\"{provider} Rate Limited, don't send more until after {retryException.RetryAfterUtc}\");\n\t\t} else {\n\t\t\tConsole.WriteLine (\"{provider} Notification Failed for some unknown reason\");\n\t\t}\n\n\t\t// Mark it as handled\n\t\treturn true;\n\t});\n};\n\ngcmBroker.OnNotificationSucceeded += (notification) => {\n\tConsole.WriteLine (\"{provider} Notification Sent!\");\n};\n\n// Start the broker\ngcmBroker.Start ();\n\nforeach (var regId in MY_REGISTRATION_IDS) {\n\t// Queue a notification to send\n\tgcmBroker.QueueNotification (new GcmNotification {\n\t\tRegistrationIds = new List<string> { \n\t\t\tregId\n\t\t},\n\t\tData = JObject.Parse (\"{ \\\"somekey\\\" : \\\"somevalue\\\" }\")\n\t});\n}\n   \n// Stop the broker, wait for it to finish   \n// This isn't done after every message, but after you're\n// done with the broker\ngcmBroker.Stop ();\n```\n\n#### Components of a GCM/FCM Notification\n\nGCM notifications are much more customizable than Apple Push Notifications. More information about the messaging concepts and options can be found [here](https://developers.google.com/cloud-messaging/concept-options#components-of-a-message).\n\n\n### WNS Sample Usage\n\nHere's how to send WNS Notifications:\n\n```csharp\n// Configuration\nvar config = new WnsConfiguration (\"WNS_PACKAGE_NAME\", \"WNS_PACKAGE_SID\", \"WNS_CLIENT_SECRET\");\n\n// Create a new broker\nvar wnsBroker = new WnsServiceBroker (config);\n\n// Wire up events\nwnsBroker.OnNotificationFailed += (notification, aggregateEx) => {\n\n\taggregateEx.Handle (ex => {\n\t\n\t\t// See what kind of exception it was to further diagnose\n\t\tif (ex is WnsNotificationException notificationException) {\n\t\t\tConsole.WriteLine ($\"WNS Notification Failed: {notificationException.Message}\");\n\t\t} else {\n\t\t\tConsole.WriteLine (\"WNS Notification Failed for some (Unknown Reason)\");\n\t\t}\n\n\t\t// Mark it as handled\n\t\treturn true;\n\t});\n};\n\nwnsBroker.OnNotificationSucceeded += (notification) => {\n\tConsole.WriteLine (\"WNS Notification Sent!\");\n};\n\n// Start the broker\nwnsBroker.Start ();\n\nforeach (var uri in MY_DEVICE_CHANNEL_URIS) {\n\t// Queue a notification to send\n\twnsBroker.QueueNotification (new WnsToastNotification {\n\t\tChannelUri = uri,\n\t\tPayload = XElement.Parse (@\"\n\t\t\t<toast>\n\t\t\t\t<visual>\n\t\t\t\t\t<binding template=\"\"ToastText01\"\">\n\t\t\t\t\t\t<text id=\"\"1\"\">WNS_Send_Single</text>\n\t\t\t\t\t</binding>  \n\t\t\t\t</visual>\n\t\t\t</toast>\")\n\t});\n}\n\n// Stop the broker, wait for it to finish   \n// This isn't done after every message, but after you're\n// done with the broker\nwnsBroker.Stop ();\n```\n\n\n## How to Migrate from PushSharp 2.x to 3.x and higher\n\nPlease see this Wiki page for more information: https://github.com/Redth/PushSharp/wiki/Migrating-from-PushSharp-2.x-to-3.x\n\n\n## Roadmap\n\n - **APNS - Apple Push Notification Service** \n   - Finish HTTP/2 support (currently in another branch)\n - **GCM - Google Cloud Messaging** \n   - XMPP transport still under development\n - **Other**\n   - More NUnit tests to be written, with a test GCM Server, and eventually Test servers for other platforms\n   - New Xamarin Client samples (how to setup each platform as a push client) will be built and live in a separate repository to be less confusing\n   \n\nLicense\n-------\nCopyright 2012-2016 Jonathan Dick\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "Resources",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}