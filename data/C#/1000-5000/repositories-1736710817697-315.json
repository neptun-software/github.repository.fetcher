{
  "metadata": {
    "timestamp": 1736710817697,
    "page": 315,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vrm-c/UniVRM",
      "stars": 2716,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.05859375,
          "content": "*.cs    text eol=lf\n*.md    text eol=lf\n*.text  text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.8134765625,
          "content": "#\n# https://github.com/github/gitignore/blob/master/Unity.gitignore\n#\n[Ll]ibrary/\n[Tt]emp/\n[Oo]bj/\n[Bb]uild/\n[Bb]uilds/\n[Ll]ogs/\nAssets/AssetStoreTools*\n\n# Visual Studio cache directory\n.vs/\n\n# Gradle cache directory\n.gradle/\n\n# Autogenerated VS/MD/Consulo solution and project files\nExportedObj/\n.consulo/\n/*.csproj\n*.unityproj\n/*.sln\n*.suo\n*.tmp\n*.user\n*.userprefs\n*.pidb\n*.booproj\n*.svd\n*.pdb\n*.opendb\n*.VC.db\n\n# Unity3D generated meta files\n*.pidb.meta\n*.pdb.meta\n\n# Unity3D generated file on crash reports\nsysinfo.txt\n\n# Builds\n*.apk\n*.unitypackage\n\n# Crashlytics generated file\nAssets/StreamingAssets/crashlytics-build.properties\n\n#\n# Manually appended\n#\n\n# Personal\n.idea/\nAssets/_Private/\nAssets/_Private.meta\nUserSettings/\n\n# Unity\n/ProjectSettings/BurstAotSettings_StandaloneWindows.json\n\n# sphinx build\npublic\n*.pyc\n.venv\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.400390625,
          "content": "[submodule \"MToon\"]\n\tpath = Assets/VRMShaders/MToon\n\turl = https://github.com/Santarh/MToon.git\n[submodule \"vrm-specification\"]\n\tpath = vrm-specification\n\turl = https://github.com/vrm-c/vrm-specification.git\n[submodule \"glTF\"]\n\tpath = glTF\n\turl = https://github.com/KhronosGroup/glTF.git\n[submodule \"Assets/VRMShaders/VRM/MToon\"]\n\tpath = Assets/VRMShaders/VRM/MToon\n\turl = https://github.com/Santarh/MToon.git\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "Assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.107421875,
          "content": "MIT License\r\n\r\nCopyright (c) 2020 VRM Consortium\r\nCopyright (c) 2018 Masataka SUMI for MToon\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE."
        },
        {
          "name": "NUnit3To2FormatConverter.py",
          "type": "blob",
          "size": 9.673828125,
          "content": "#! /usr/bin/env python\r\n# https://answers.unity.com/questions/1355795/can-unity-56s-test-runner-optionally-output-nunit.html\r\n\r\nimport argparse\r\nimport os\r\nimport sys\r\nimport xml.dom.minidom\r\n\r\n\r\ndef convert(input_path, output_path):\r\n    ''' Converts the input file from the NUnit 3 format to NUnit 2 format\r\n        and writes the result into output_path.\r\n    '''\r\n    \r\n    def read_input(input_path):\r\n        dom_tree = xml.dom.minidom.parse(input_path)\r\n        collection = dom_tree.documentElement\r\n\r\n        tests = collection.getElementsByTagName('test-case')\r\n\r\n        results = {}\r\n        results['name'] = collection.getAttribute('name')\r\n        results['time'] = collection.getAttribute('duration')\r\n\r\n        test_results = []\r\n        results['test_results'] = test_results\r\n\r\n        num_tests = 0\r\n        num_passed_tests = 0\r\n        num_failed_tests = 0\r\n        num_ignored_tests = 0\r\n        num_skipped_tests = 0\r\n\r\n        for test in tests:\r\n            num_tests = num_tests + 1\r\n            curr_test_results = {}\r\n            curr_test_results['name'] = test.getAttribute('fullname')\r\n            test_new_result = test.getAttribute('result')\r\n            test_new_runstate = test.getAttribute('runstate')\r\n\r\n            if (test_new_result == 'Passed'):\r\n                # Test Passed...\r\n                num_passed_tests = num_passed_tests + 1\r\n                curr_test_results['state'] = 'Success'\r\n                curr_test_results['result'] = 'Success'\r\n                curr_test_results['executed'] = 'True'\r\n                curr_test_results['state'] = 'Success'\r\n                curr_test_results['success'] = 'True'\r\n                curr_test_results['time'] = test.getAttribute('duration')\r\n            elif (test_new_result == 'Failed'):\r\n                if (test_new_runstate == 'Runnable'):\r\n                    # Test Failed...\r\n                    num_failed_tests = num_failed_tests + 1\r\n                    curr_test_results['state'] = 'Failed'\r\n                    curr_test_results['result'] = 'Failure'\r\n                    curr_test_results['executed'] = 'True'\r\n                    curr_test_results['success'] = 'False'\r\n                    curr_test_results['time'] = test.getAttribute('duration')\r\n\r\n                    failure_elem = test.getElementsByTagName('failure')[0]\r\n\r\n                    curr_test_results['failure_message'] = failure_elem.getElementsByTagName('message')[0].firstChild.wholeText\r\n                    curr_test_results['failure_stacktrace'] = failure_elem.getElementsByTagName('stack-trace')[0].firstChild.wholeText\r\n                else:\r\n                    # Test could not be run...\r\n                    num_skipped_tests = num_skipped_tests + 1\r\n                    assert(test_new_runstate == 'NotRunnable')\r\n                    curr_test_results['state'] = 'NotRunnable'\r\n                    curr_test_results['result'] = 'NotRunnable'\r\n                    curr_test_results['executed'] = 'False'\r\n                    curr_test_results['success'] = 'False'\r\n                    curr_test_results['time'] = test.getAttribute('duration')\r\n\r\n                    curr_test_results['reason_message'] = test.getElementsByTagName('failure')[0].getElementsByTagName('message')[0].firstChild.wholeText\r\n            elif (test_new_result == 'Skipped'):\r\n                # Test was Ignored...\r\n                num_ignored_tests = num_ignored_tests + 1\r\n                curr_test_results['state'] = 'Ignored'\r\n                curr_test_results['result'] = 'Ignored'\r\n                curr_test_results['executed'] = 'False'\r\n                curr_test_results['reason_message'] = test.getElementsByTagName('reason')[0].getElementsByTagName('message')[0].firstChild.wholeText\r\n            else:\r\n                assert(False) #Unknown test result type?\r\n            test_results.append(curr_test_results)\r\n\r\n        results['num_tests'] = num_tests\r\n        results['num_passed_tests'] = num_passed_tests\r\n        results['num_failed_tests'] = num_failed_tests\r\n        results['num_ignored_tests'] = num_ignored_tests\r\n        results['num_skipped_tests'] = num_skipped_tests\r\n\r\n        date_time = collection.getAttribute('start-time').split(' ')\r\n        results['date'] = date_time[0]\r\n        results['time'] = date_time[1]\r\n\r\n        return results\r\n\r\n    def write_output(results, output_path):\r\n        # Write XML File (minidom)\r\n\r\n        doc = xml.dom.minidom.Document()\r\n\r\n        num_tests = results['num_tests']\r\n        num_skipped_tests = results['num_skipped_tests']\r\n        num_ignored_tests = results['num_ignored_tests']\r\n        num_not_run_tests = num_skipped_tests + num_ignored_tests\r\n        num_failed_tests = results['num_failed_tests']\r\n\r\n        suite_executed = (num_tests - num_not_run_tests) > 0\r\n        suite_success = num_skipped_tests + num_failed_tests == 0\r\n\r\n        root = doc.createElement('test-results')\r\n        root.setAttribute('name', 'Unity Tests')\r\n        root.setAttribute('total', str(num_tests - num_not_run_tests))\r\n        root.setAttribute('errors', str(0))\r\n        root.setAttribute('failures', str(num_failed_tests))\r\n        root.setAttribute('not-run', str(num_not_run_tests))\r\n        root.setAttribute('inconclusive', str(0))\r\n        root.setAttribute('ignored', str(num_ignored_tests))\r\n        root.setAttribute('skipped', str(num_skipped_tests))\r\n        root.setAttribute('invalid', str(0))\r\n        root.setAttribute('date', str(results['date']))\r\n        root.setAttribute('time', str(results['time']))\r\n        doc.appendChild(root)\r\n\r\n        test_suite = doc.createElement('test-suite')\r\n        test_suite.setAttribute('name', results['name'])\r\n        test_suite.setAttribute('type', 'Assembly')\r\n        test_suite.setAttribute('executed', 'True' if suite_executed else 'False')\r\n        test_suite.setAttribute('result', 'Success' if suite_success else 'Failure')\r\n        test_suite.setAttribute('success', 'True' if suite_success else 'False')\r\n        test_suite.setAttribute('time', results['time'])\r\n        root.appendChild(test_suite)\r\n\r\n        results_elem = doc.createElement('results')\r\n        test_suite.appendChild(results_elem)\r\n        \r\n\r\n        test_results = results['test_results']\r\n        for curr_test_results in test_results:\r\n\r\n            test_case = doc.createElement('test-case')\r\n            results_elem.appendChild(test_case)\r\n\r\n            test_case.setAttribute('name', curr_test_results['name'])\r\n            test_case.setAttribute('executed', curr_test_results['executed'])\r\n            test_case.setAttribute('result', curr_test_results['result'])\r\n\r\n            run_state = curr_test_results['state']\r\n            if (run_state == 'Success'):\r\n                # Success...\r\n                test_case.setAttribute('success', curr_test_results['success'])\r\n                test_case.setAttribute('time', curr_test_results['time'])\r\n\r\n            elif (run_state == 'Failed'):\r\n                # Failed...\r\n                test_case.setAttribute('success', curr_test_results['success'])\r\n                test_case.setAttribute('time', curr_test_results['time'])\r\n\r\n                failure = doc.createElement('failure')\r\n                test_case.appendChild(failure)\r\n\r\n                message = doc.createElement('message')\r\n                message_cdata = doc.createCDATASection(curr_test_results['failure_message'])\r\n                message.appendChild(message_cdata)\r\n                failure.appendChild(message)\r\n\r\n                stack_trace = doc.createElement('stack-trace')\r\n                stack_trace_cdata = doc.createCDATASection(curr_test_results['failure_stacktrace'])\r\n                stack_trace.appendChild(stack_trace_cdata)\r\n                failure.appendChild(stack_trace)\r\n\r\n            elif (run_state == 'NotRunnable'):\r\n                # Not Runnable...\r\n                test_case.setAttribute('success', curr_test_results['success'])\r\n                test_case.setAttribute('time', curr_test_results['time'])\r\n                \r\n                reason = doc.createElement('reason')\r\n                test_case.appendChild(reason)\r\n\r\n                message = doc.createElement('message')\r\n                message_cdata = doc.createCDATASection(curr_test_results['reason_message'])\r\n                message.appendChild(message_cdata)\r\n                reason.appendChild(message)\r\n\r\n            elif(run_state == 'Ignored'):\r\n\r\n                reason = doc.createElement('reason')\r\n                test_case.appendChild(reason)\r\n\r\n                message = doc.createElement('message')\r\n                message_cdata = doc.createCDATASection(curr_test_results['reason_message'])\r\n                message.appendChild(message_cdata)\r\n                reason.appendChild(message)\r\n\r\n            else:\r\n                print (\"Unknown run state: \" + run_state)\r\n\r\n        doc.writexml( open(output_path, 'w'),\r\n                      indent=\"    \",\r\n                      addindent=\"    \",\r\n                      newl='\\n')\r\n\r\n        doc.unlink()\r\n\r\n    results = read_input(input_path)\r\n    write_output(results, output_path)\r\n\r\n\r\ndef main():\r\n    parser = argparse.ArgumentParser(description='Convert an NUnit 3 file to an NUnit 2 file')\r\n    required_named = parser.add_argument_group('Required named arguments')\r\n    required_named.add_argument('-i', '--input', dest='input', help='Input file name', required=True)\r\n    required_named.add_argument('-o', '--output', dest='output', help='Output file name', required=True)\r\n    args = parser.parse_args()\r\n\r\n    input_path = args.input\r\n    output_path = args.output\r\n\r\n    if (not os.path.isfile(input_path)):\r\n        print (\"Input file does not exist\")\r\n        return 1\r\n\r\n    print (\"Converting \" + input_path + \" to \" + output_path)\r\n    convert(input_path, output_path)\r\n    return 0\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    sys.exit(main())\r\n"
        },
        {
          "name": "Packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "ProjectSettings",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.93359375,
          "content": "# UniVRM\n\n[![GitHub latest release](https://img.shields.io/github/v/release/vrm-c/UniVRM?color=green)](https://github.com/vrm-c/UniVRM/releases/latest)\n[![GitHub license](https://img.shields.io/github/license/vrm-c/UniVRM)](https://github.com/vrm-c/UniVRM/blob/master/LICENSE.txt)\n\nThe standard implementation of 3D Avatar file format [VRM](https://vrm-consortium.org/en/) for [Unity](https://unity.com/).\n\nVRM is an extension of [glTF 2.0](https://www.khronos.org/gltf/), so this library also support glTF 2.0 files.\n\n## Features\n\nUniVRM supports the [VRM 1.0 specification](https://github.com/vrm-c/vrm-specification) and the [glTF 2.0 specification](https://registry.khronos.org/glTF/).\n\nUniVRM can import/export following supported file types at both runtime and editor.\n\n### Supported file types\n\n- VRM 1.0 (.vrm)\n- VRM 0.x (.vrm)\n- glTF 2.0 (.glb | .gltf | .zip)\n- VRM-Animation (.vrma)\n\n### Import features\n\n- You can import supported file types at both runtime and editor.\n- Support for async/await importing at runtime.\n- Support for Migration VRM 0.x files into VRM 1.0 files.\n- Support for ScriptedImporter for VRM 1.0 and glTF 2.0.\n- You can import glTF's PBR materials into Unity Built-in RP's Standard materials.\n\n### Export features\n\n- You can export supported file types at both runtime and editor.\n- You can export Unity Built-in RP's Standard materials into glTF's PBR materials.\n\n## Supported Environments\n\nThe latest UniVRM supports Unity 2021.3 LTS or later.\n\nUniVRM supports scripting backends both .NET and IL2CPP.\n\nUniVRM supports the following building target platforms:\n\n- Standalone (Windows/Mac/Linux)\n- iOS\n- Android\n- WebGL\n\nThe other platforms maybe work but they are not tested.\n\n## Installation\n\n### Latest Release\n\n[Download here](https://github.com/vrm-c/UniVRM/releases/latest)\n\n<details><summary>Previous Releases</summary>\n<p>\n\nYou can use an previous version of UniVRM if you use an older version of Unity.\nThese are **not supported**.\n\n| Unity Version | UniVRM Release                                                    | VRM 1.0 support |\n| ------------- | ----------------------------------------------------------------- | --------------- |\n| 2021.3        | [v0.112.0](https://github.com/vrm-c/UniVRM/releases/tag/v0.112.0) | Yes             |\n| 2020.3        | [v0.100.0](https://github.com/vrm-c/UniVRM/releases/tag/v0.100.0) | Yes             |\n| 2019.3        | [v0.99.1](https://github.com/vrm-c/UniVRM/releases/tag/v0.99.1)   | No              |\n| 2018.4        | [v0.79.0](https://github.com/vrm-c/UniVRM/releases/tag/v0.79.0)   | No              |\n\n</p>\n</details>\n\nYou can install UniVRM using the UnityPackage or the UPM Package.\n\n### UnityPackage\n\nFrom the [latest release](https://github.com/vrm-c/UniVRM/releases/latest), you can download the `.unitypackage` files.\n\n- For import/export VRM 1.0\n  - You can download **VRM-0.XXX.X-YYYY.unitypackage**.\n  - You can also download sample projects as **VRM_Samples-0.XXX.X-YYYY.unitypackage**.\n- For import/export VRM 0.x\n  - You can download **UniVRM-0.XXX.X-YYYY.unitypackage**.\n  - You can also download sample projects as **UniVRM_Samples-0.XXX.X-YYYY.unitypackage**.\n- For import/export glTF 2.0\n  - You can download **VRM-0.XXX.X-YYYY.unitypackage**.\n\n### UPM Package\n\nFrom the [latest release](https://github.com/vrm-c/UniVRM/releases/latest), you can find UPM package urls.\n\n- For import/export VRM 1.0\n  - You have to install all of the following UPM packages:\n    - `com.vrmc.gltf`\n    - `com.vrmc.vrm`\n- For import/export VRM 0.x\n  - You have to install all of the following UPM packages:\n    - `com.vrmc.gltf`\n    - `com.vrmc.univrm`\n- For import/export glTF 2.0\n  - You have to install all of the following UPM packages:\n    - `com.vrmc.gltf`\n\nYou can install these UPM packages via `Package Manager` -> `+` -> `Add package from git URL...` in UnityEditor.\n\n## Documentation\n\n- https://vrm.dev/en/vrm/index.html\n\n### For developers\n\n- https://vrm.dev/en/api/index.html\n\n## License\n\n- [MIT License](./LICENSE.txt)\n"
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "glTF",
          "type": "commit",
          "content": null
        },
        {
          "name": "right_latest.jpg",
          "type": "blob",
          "size": 25.5849609375,
          "content": null
        },
        {
          "name": "vrm-specification",
          "type": "commit",
          "content": null
        }
      ]
    }
  ]
}