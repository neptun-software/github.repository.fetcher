{
  "metadata": {
    "timestamp": 1736557705503,
    "page": 826,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fish-shell/fish-shell",
      "stars": 27494,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".builds",
          "type": "tree",
          "content": null
        },
        {
          "name": ".cargo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 3.79,
          "content": "env:\n    CIRRUS_CLONE_DEPTH: 100\n    CI: 1\n\nlinux_task:\n    matrix:\n        - name: alpine\n          container: &step\n              image: ghcr.io/krobelus/fish-ci/alpine:latest\n              memory: 4GB\n        - name: jammy\n          container:\n              <<: *step\n              image: ghcr.io/krobelus/fish-ci/jammy:latest\n        # - name: jammy-asan\n        #   container:\n        #       <<: *step\n        #       image: ghcr.io/krobelus/fish-ci/jammy-asan:latest\n        # - name: focal-32bit\n        #   container:\n        #       <<: *step\n        #       image: ghcr.io/krobelus/fish-ci/focal-32bit:latest\n    tests_script:\n        # cirrus at times gives us 32 procs and 2 GB of RAM\n        # Unrestriced parallelism results in OOM\n        - lscpu || true\n        - (cat /proc/meminfo | grep MemTotal) || true\n        - mkdir build && cd build\n        - cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCTEST_PARALLEL_LEVEL=6 ..\n        - ninja -j 6 fish\n        - ninja fish_run_tests\n    only_if: $CIRRUS_REPO_OWNER == 'fish-shell'\n\nlinux_arm_task:\n    matrix:\n        - name: focal-arm64\n          arm_container:\n              image: ghcr.io/fish-shell/fish-ci/focal-arm64\n        - name: jammy-armv7-32bit\n          arm_container:\n              image: ghcr.io/fish-shell/fish-ci/jammy-armv7-32bit\n    tests_script:\n        # cirrus at times gives us 32 procs and 2 GB of RAM\n        # Unrestriced parallelism results in OOM\n        - lscpu || true\n        - (cat /proc/meminfo | grep MemTotal) || true\n        - mkdir build && cd build\n        - cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCTEST_PARALLEL_LEVEL=6 ..\n        - ninja -j 6 fish\n        - file ./fish\n        - ninja fish_run_tests\n    # CI task disabled during RIIR transition\n    only_if: false && $CIRRUS_REPO_OWNER == 'fish-shell'\n\nfreebsd_task:\n    matrix:\n        # - name: FreeBSD 14\n        #   freebsd_instance:\n        #       image_family: freebsd-14-0-snap\n        - name: FreeBSD 13\n          freebsd_instance:\n              image: freebsd-13-2-release-amd64\n        # - name: FreeBSD 12.3\n        #   freebsd_instance:\n        #       image: freebsd-12-3-release-amd64\n    tests_script:\n        - pkg install -y cmake-core devel/pcre2 devel/ninja misc/py-pexpect git-lite terminfo-db\n        # libclang.so is a required build dependency for rust-c++ ffi bridge\n        - pkg install -y llvm\n        # BSDs have the following behavior: root may open or access files even if\n        # the mode bits would otherwise disallow it. For example root may open()\n        # a file with write privileges even if the file has mode 400. This breaks\n        # our tests for e.g. cd and path. So create a new unprivileged user to run tests.\n        - pw user add -n fish-user -s /bin/csh -d /home/fish-user\n        - mkdir -p /home/fish-user\n        - chown -R fish-user /home/fish-user\n        - mkdir build && cd build\n        - chown -R fish-user ..\n        - sudo -u fish-user -s whoami\n        # FreeBSD's pkg currently has rust 1.66.0 while we need rust 1.70.0+. Use rustup to install\n        # the latest, but note that it only installs rust per-user.\n        - sudo -u fish-user -s fetch -qo - https://sh.rustup.rs > rustup.sh\n        - sudo -u fish-user -s sh ./rustup.sh -y --profile=minimal\n        # `sudo -s ...` does not invoke a login shell so we need a workaround to make sure the\n        # rustup environment is configured for subsequent `sudo -s ...` commands.\n        # For some reason, this doesn't do the job:\n        # - sudo -u fish-user sh -c 'echo source \\$HOME/.cargo/env >> $HOME/.cshrc'\n        - sudo -u fish-user -s cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCTEST_PARALLEL_LEVEL=1 ..\n        - sudo -u fish-user sh -c '. $HOME/.cargo/env; ninja -j 6 fish'\n        - sudo -u fish-user sh -c '. $HOME/.cargo/env; ninja fish_run_tests'\n    only_if: $CIRRUS_REPO_OWNER == 'fish-shell'\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.21,
          "content": "# Use the Google style with these modifications:\n#\n# 1) lines can be up to 100 chars long rather than 80, and\n# 2) use a four space indent rather than two spaces.\n#\nBasedOnStyle: Google\nColumnLimit: 100\nIndentWidth: 4\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.42,
          "content": "root = true\n\n[*]\nindent_size = 4\nindent_style = space\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nmax_line_length = 100\n\n[{Makefile,*.in}]\nindent_style = tab\n\n[*.{md,rst}]\ntrim_trailing_whitespace = false\n\n[*.{sh,ac}]\nindent_size = 2\n\n[Dockerfile]\nindent_size = 2\n\n[share/{completions,functions}/**.fish]\nmax_line_length = unset\n\n[{COMMIT_EDITMSG,git-revise-todo}]\nmax_line_length = 80\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.83,
          "content": "# normalize newlines\n* text=auto\n*.fish text\n*.bat eol=crlf\n\n# let git show off diff hunk headers, help git diff -L:\n# https://git-scm.com/docs/gitattributes\n*.cpp diff=cpp\n*.h diff=cpp\n*.py diff=py\n# add a [diff \"fish\"] to git config with pattern\n*.fish diff=fish\n\n# omit from git archive\n.gitattributes export-ignore\n.gitignore export-ignore\n/build_tools/make_tarball.sh export-ignore\n/debian export-ignore\n/debian/* export-ignore\n/.github export-ignore\n/.github/* export-ignore\n/.builds export-ignore\n/.builds/* export-ignore\n\n# for linguist; let github identify our project as C++ instead of C due to pcre2\npcre2/** linguist-vendored\nalpine.js linguist-vendored\ndoc_src/** linguist-documentation\n*.fish linguist-language=fish\nsrc/*.h linguist-language=c++\nsrc/builtins/*.h linguist-language=c++\nshare/completions/*.fish linguist-documentation\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.6,
          "content": "# Note that some of the patterns below should be in an individual's\n# ~/.config/git/ignore file. For example, \".DS_Store\" from people working on\n# MacOS.\n\n# File extensions that should never be checked in regardless of which project\n# directory they reside in.\n*.DS_Store\n*.a\n*.app\n*.d\n*.dll\n*.dylib\n*.exe\n*.gch\n*.la\n*.lai\n*.lib\n*.lo\n*.log\n*.new\n*.o\n*.obj\n*.orig\n!tests/*.out\n*.out\n*.pch\n*.slo\n*.so\n*.xccheckout\n*bak\n*~\n*~HEAD\n.AppleDouble\n.LSOverride\n.Trash-*\n._*\nDesktop.ini\nThumbs.db\nehthumbs.db\n\nmessages.pot\n.directory\n.fuse_hidden*\n\n\n# Directories that only contain transitory files from building and testing.\n/doc/\n/share/man/\n/share/doc/\n/test/\n/user_doc/\n\n# File names that can appear in the project root that represent artifacts from\n# building and testing.\n/FISH-BUILD-VERSION-FILE\n/command_list.txt\n/command_list_toc.txt\n/compile_commands.json\n/doc.h\n/fish\n/fish.pc\n/fish_indent\n/fish_key_reader\n/fish_tests\n/lexicon.txt\n/lexicon_filter\n/toc.txt\n/version\nfish-build-version-witness.txt\n__pycache__\n\n# File names that can appear below the project root that represent artifacts\n# from building and testing.\n/doc_src/commands.hdr\n/doc_src/index.hdr\n/po/*.gmo\n/share/__fish_build_paths.fish\n/share/pkgconfig\n/tests/*.tmp.*\n\n# xcode\n## Build generated\n*.moved-aside\n*.xccheckout\n*.xcscmblueprin\n.vscode\n/DerivedData/\n/build/\n/tags\nxcuserdata/\n\n# Generated by Cargo\n# will have compiled files and executables\ndebug/\ntarget/\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n\n# MSVC Windows builds of rustc generate these, which store debugging information\n*.pdb\n\n# Generated by clangd\n/.cache\n\n# JetBrains editors.\n.idea/\n"
        },
        {
          "name": "BSDmakefile",
          "type": "blob",
          "size": 1.56,
          "content": "# This is a very basic `make` wrapper around the CMake build toolchain.\n#\n# Supported arguments:\n#   PREFIX: sets the installation prefix\n#   GENERATOR: explicitly specifies the CMake generator to use\n\n# By default, bmake will try to cd into ./obj before anything else. Don't do that.\n.OBJDIR: ./\n\nCMAKE?=cmake\n\n# Before anything else, test for CMake, which is the only requirement to be able to run\n# this Makefile CMake will perform the remaining dependency tests on its own.\n.BEGIN:\n\t@which $(CMAKE) >/dev/null 2>/dev/null || \\\n\t\t(echo 'Please install CMake and then re-run the `make` command!' 1>&2 && false)\n\n# Prefer to use ninja, if it is installed\n_GENERATOR!=which ninja 2>/dev/null >/dev/null && echo Ninja || echo \"Unix Makefiles\"\nGENERATOR?=$(_GENERATOR)\n\n.if $(GENERATOR) == \"Ninja\"\nBUILDFILE=build.ninja\n.else\nBUILDFILE=Makefile\n.endif\n\nPREFIX?=/usr/local\n\n.PHONY: build/fish\nbuild/fish: build/$(BUILDFILE)\n\t$(CMAKE) --build build\n\n# Don't split the mkdir into its own rule because that would cause CMake to regenerate the build \n# files after each build (because it adds the mdate of the build directory into the out-of-date\n# calculation tree). GNUmake supports order-only dependencies, BSDmake does not seem to.\nbuild/$(BUILDFILE):\n\tmkdir -p build\n\tcd build; $(CMAKE) .. -G \"$(GENERATOR)\" -DCMAKE_INSTALL_PREFIX=\"$(PREFIX)\" -DCMAKE_EXPORT_COMPILE_COMMANDS=1\n\n.PHONY: install\ninstall: build/fish\n\t$(CMAKE) --build build --target install\n\n.PHONY: clean\nclean:\n\trm -rf build\n\n.PHONY: test\ntest: build/fish\n\t$(CMAKE) --build build --target test\n\n.PHONY: run\nrun: build/fish\n\tbuild/fish\n"
        },
        {
          "name": "CHANGELOG.rst",
          "type": "blob",
          "size": 243.63,
          "content": "fish 4.1.0 (released ???)\n=========================\n\nNotable improvements and fixes\n------------------------------\n\nDeprecations and removed features\n---------------------------------\n\nScripting improvements\n----------------------\n\nInteractive improvements\n------------------------\n- Autosuggestions are now also provided in  multi-line command lines. Like `ctrl-r`, autosuggestions operate only on the current line.\n- New feature flag ``buffered-enter-noexec`` with the following effect:\n  when typing a command and :kbd:`enter` while the previous one is still running, the new one will no longer execute immediately. Similarly, keys that are bound to shell commands will be ignored.\n  This mitigates a security issue where a command like ``cat malicious-file.txt`` could write terminal escape codes prompting the terminal to write arbitrary text to fish's standard input.\n  Such a malicious file can still potentially insert arbitrary text into the command line but can no longer execute it directly (:issue:`10987`).\n\nNew or improved bindings\n^^^^^^^^^^^^^^^^^^^^^^^^\n- :kbd:`ctrl-z` (undo) after executing a command will restore the previous cursor position instead of placing the cursor at the end of the command line.\n- The OSC 133 prompt marking feature has learned about kitty's ``click_events=1`` flag, which allows moving fish's cursor by clicking.\n- :kbd:`ctrl-l` no longer clears the screen but only pushes to the terminal's scrollback all text above the prompt (via a new special input function ``scrollback-push``).\n  This feature depends on the terminal advertising via XTGETTCAP support for the ``indn`` and ``cuu`` terminfo capabilities,\n  and on the terminal supporting Synchronized Output (which is used by fish to detect features).\n  If any is missing, the binding falls back to ``clear-screen``.\n\nCompletions\n^^^^^^^^^^^\n\nImproved terminal support\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nOther improvements\n------------------\n- ``fish_indent`` and ``fish_key_reader`` are now available as builtins, and if fish is called with that name it will act like the given tool (as a multi-call binary).\n  This allows truly distributing fish as a single file. (:issue:`10876`)\n\nFor distributors\n----------------\n- ``fish_indent`` and ``fish_key_reader`` are still built as separate binaries for now, but can also be replaced with a symlink if you want to save disk space.\n\nfish 4.0b1 (released December 17, 2024)\n=======================================\n\nThese are the draft release notes for fish 4.0.0. Like this release of fish itself, they are in beta and are not complete. Please report any issues you find.\n\n.. ignore: 751 2037 2037 3017 3018 3162 3299 4770 4865 5284 5991 6981 6996 7172 9332 9439 9440 9442 9452 9469 9480 9482 9520 9536 9541 9542 9544 9554 9556 9559 9561 9563 9566 9567 9568 9573 9575 9576 9579 9585 9586 9588 9589 9591 9592 9593 9594 9599 9600 9603 9607 9608 9612 9613 9615 9616 9619 9621 9625 9626 9630 9636 9637 9638 9641 9642 9643 9653 9654 9658 9661 9666 9671 9673 9688 9725 9726 9729 9735 9739 9745 9746 9751 9754 9765 9767 9768 9771 9777 9778 9786 9816 9818 9821 9839 9845 9856 9859 9861 9863 9864 9867 9869 9873 9874 9879 9881 9893 9894 9896 9902 9916 9923 9925 9927 9928 9930 9947 9948 9950 9952 9962 9963 9966 9968 9980 9981 9984 9990 9991 10040 10061 10090 10101 10102 10108 10114 10115 10121 10128 10129 10143 10145 10146 10161 10173 10174 10175 10179 10180 10181 10182 10184 10185 10186 10188 10195 10198 10200 10201 10204 10210 10214 10219 10220 10222 10223 10227 10228 10232 10235 10237 10241 10243 10244 10245 10246 10251 10254 10260 10263 10267 10268 10270 10272 10276 10277 10278 10279 10281 10288 10290 10291 10293 10305 10306 10307 10308 10309 10316 10317 10321 10327 10328 10329 10330 10336 10338 10340 10342 10345 10346 10347 10348 10349 10353 10354 10355 10356 10357 10358 10360 10366 10368 10370 10371 10372 10373 10377 10379 10381 10388 10389 10390 10395 10398 10400 10403 10404 10407 10408 10409 10411 10412 10415 10417 10418 10427 10429 10434 10438 10439 10440 10441 10442 10443 10445 10446 10448 10450 10451 10452 10456 10457 10462 10463 10464 10466 10467 10471 10473 10474 10479 10481 10485 10486 10487 10490 10491 10492 10494 10499 10500 10503 10505 10507 10508 10509 10510 10511 10512 10513 10518 10519 10520 10524 10528 10529 10530 10538 10541 10542 10547 10548 10549 10555 10560 10562 10564 10565 10568 10569 10572 10573 10574 10575 10578 10580 10582 10583 10588 10591 10594 10595 10596 10609 10622 10623 10627 10628 10634 10635 10636 10637 10640 10646 10647 10649 10650 10652 10653 10654 10655 10657 10659 10662 10664 10667 10669 10670 10674 10679 10681 10685 10686 10687 10688 10689 10697 10698 10702 10707 10708 10712 10713 10716 10718 10719 10721 10726 10727 10728 10731 10760 10762 10763 10767 10770 10775 10776 10778 10779 10782 10784 10789 10792 10795 10796 10801 10812 10817 10825 10836 10839 10844 10845 10847 10851 10858 10863 10864 10873 10874 10880 10885 10891 10894 10907\n\nfish's core code has been ported from C++ to Rust (:issue:`9512`).\nThis means a large change in dependencies and how to build fish.\nPackagers should see the :ref:`For Distributors <rust-packaging>` section at the end.\n\nNotable backwards-incompatible changes\n--------------------------------------\n\n- As part of a larger binding rework, ``bind`` gained a new key notation.\n  In most cases the old notation should keep working, but in rare cases you may have to change a ``bind`` invocation to use the new notation.\n  See :ref:`below <changelog-new-bindings>` for details.\n- Terminals that fail to ignore unrecognized OSC or CSI sequences may display garbage. We know cool-retro-term and emacs' ansi-term are affected,\n  most mainstream terminals are not.\n- :kbd:`alt-left` and :kbd:`alt-right` will now move by one argument (which may contain quoted spaces), not just one word like :kbd:`ctrl-left` and :kbd:`ctrl-right` do.\n- :kbd:`alt-backspace` will delete an entire argument, not just one word. The old word behavior has been moved to :kbd:`ctrl-backspace`. If your terminal doesn't support `ctrl-backspace`, consider using :kbd:`ctrl-w`, or :kbd:`alt-b` + :kbd:`alt-d`.\n- ``random`` will produce different values from previous versions of fish when used with the same seed, and will work more sensibly with small seed numbers.\n  The seed was never guaranteed to give the same result across systems,\n  so we do not expect this to have a large impact (:issue:`9593`).\n- Variables in command position that expand to a subcommand keyword are now forbidden to fix a likely user error.\n  For example, ``set editor command emacs; $editor`` is no longer allowed (:issue:`10249`).\n- ``functions --handlers`` will now list handlers in a different order.\n  Now it is definition order, first to last, where before it was last to first.\n  This was never specifically defined, and we recommend not relying on a specific order (:issue:`9944`).\n- The ``qmark-noglob`` feature, introduced in fish 3.0, is enabled by default. That means ``?`` will no longer act as a single-character glob.\n  You can, for the time being, turn it back on by adding ``no-qmark-noglob`` to :envvar:`fish_features` and restarting fish::\n\n    set -Ua fish_features no-qmark-noglob\n\n  The flag will eventually be made read-only, making it impossible to turn off.\n- fish no longer searches directories from the Windows system/user ``$PATH`` environment variable for Linux executables. To execute Linux binaries by name (i.e. not with a relative or absolute path) from a Windows folder, make sure the ``/mnt/c/...`` path is explicitly added to ``$fish_user_paths`` and not just automatically appended to ``$PATH`` by ``wsl.exe`` (:issue:`10506`).\n- Under Microsoft Windows Subsystem for Linux 1 (not WSL 2) , backgrounded jobs that have not been disowned and do not terminate on their own after a ``SIGHUP`` + ``SIGCONT`` sequence will be explicitly killed by fish on exit (after the usual prompt to close or disown them) to work around a WSL 1 deficiency that sees backgrounded processes that run into ``SIGTTOU`` remain in a suspended state indefinitely (:issue:`5263`). The workaround is to explicitly ``disown`` processes you wish to outlive the shell session.\n\nNotable improvements and fixes\n------------------------------\n.. _changelog-new-bindings:\n\n-  fish now requests XTerm's ``modifyOtherKeys`` keyboard encoding and `kitty keyboard protocol's <https://sw.kovidgoyal.net/kitty/keyboard-protocol/>`_ progressive enhancements (:issue:`10359`).\n   Depending on terminal support, this allows to binding more key combinations, including arbitrary combinations of modifiers :kbd:`ctrl`, :kbd:`alt` and :kbd:`shift`, and distinguishing (for example) :kbd:`ctrl-i` from :kbd:`tab`.\n\n   Additionally, ``bind`` now supports a human-readable syntax in addition to byte sequences.\n   This includes modifier names, and names for keys like :kbd:`enter` and :kbd:`backspace`.\n   For example\n\n   - ``bind up 'do something'`` binds the up-arrow key instead of a two-key sequence (\"u\" and then \"p\")\n   - ``bind ctrl-x,alt-c 'do something'`` binds a sequence of two keys.\n\n   Any key argument that starts with an ASCII control character (like ``\\e`` or ``\\cX``) or is up to 3 characters long, not a named key, and does not contain ``,`` or ``-`` will be interpreted in the old syntax to keep compatibility for the majority of bindings.\n- fish can now be built as a self-installing binary (:issue:`10367`). That means it can be easily built on one system and copied to another, where it can extract supporting files.\n  To do this, run::\n\n    cargo install --path . # in a clone of the fish repository\n    # or `cargo build --release` and copy target/release/fish{,_indent,_key_reader} wherever you want\n\n  The first time it runs interactively, it will extract all the data files to  ``~/.local/share/fish/install/``. To uninstall, remove the fish binaries and that directory.\n\n  This build system is experimental; the main build system, using ``cmake``, remains the recommended approach for packaging and installation to a prefix.\n- A new function ``fish_should_add_to_history`` can be overridden to decide whether a command should be added to the history (:issue:`10302`).\n- :kbd:`ctrl-c` during command input no longer prints ``^C`` and a new prompt, but merely clears the command line. This restores the behavior from version 2.2. To revert to the old behavior, use ``for mode in (bind --list-modes); bind -M $mode ctrl-c cancel-commandline-traditional; end`` (:issue:`10213`).\n- Bindings can now mix special input functions and shell commands, so ``bind ctrl-g expand-abbr \"commandline -i \\n\"`` works as expected (:issue:`8186`).\n- Special input functions run from bindings via ``commandline -f`` are now applied immediately, instead of after the currently executing binding (:issue:`3031`).\n  For example, ``commandline -i foo; commandline | grep foo`` succeeds now.\n- Undo history is no longer truncated after every command, but kept for the lifetime of the shell process.\n- The :kbd:`ctrl-r` history search now uses glob syntax (:issue:`10131`).\n- The :kbd:`ctrl-r` history search now operates only on the line or command substitution at cursor, making it easier to combine commands from history.\n- Abbreviations can now be restricted to specific commands. For instance::\n\n    abbr --add --command git back 'reset --hard HEAD^'\n\n  will expand \"back\" to ``reset --hard HEAD^``, but only when the command is ``git`` (:issue:`9411`).\n\nDeprecations and removed features\n---------------------------------\n\n- ``commandline --tokenize`` (short option ``-o``) has been deprecated in favor of ``commandline --tokens-expanded`` (short option ``-x``) which expands variables and other shell syntax, removing the need to use :doc:`eval <cmds/eval>` in completion scripts (:issue:`10212`).\n- Two new feature flags:\n\n  - ``remove-percent-self`` (see ``status features``) disables PID expansion of ``%self``, which has been supplanted by ``$fish_pid`` (:issue:`10262`).\n  - ``test-require-arg`` disables ``test``'s one-argument mode. That means ``test -n`` without an additional argument will return false, ``test -z`` will keep returning true. Any other option without an argument, anything that is not an option and no argument will be an error. This also goes for ``[``, test's alternate name.\n    This is a frequent source of confusion and so we are breaking with POSIX explicitly in this regard.\n    In addition to the feature flag, there is a debug category \"deprecated-test\". Running fish with ``fish -d deprecated-test`` will show warnings whenever a ``test`` invocation that would change is used. (:issue:`10365`).\n\n  These can be enabled with::\n\n    set -Ua fish_features remove-percent-self test-require-arg\n\n  We intend to enable them by default in future, and after that eventually make them read-only.\n- Specifying key names as terminfo names (using the ``bind -k`` syntax) is deprecated and may be removed in a future version.\n- When a terminal pastes text into fish using bracketed paste, fish used to switch to a special ``paste`` bind mode.\n  This bind mode has been removed. The behavior on paste is no longer configurable.\n- When an interactive fish is stopped or terminated by a signal that cannot be caught (SIGSTOP or SIGKILL), it may leave the terminal in a state where keypresses with modifiers are sent as CSI u sequences, instead of traditional control characters or escape sequences that are recognized by Readline and compatible programs, such as bash and python.\n  If this happens, you can use the ``reset`` command from ``ncurses`` to restore the terminal state.\n- ``fish_key_reader --verbose`` no longer shows timing information.\n- Terminal information is no longer read from hashed terminfo databases, or termcap databases (:issue:`10269`). The vast majority of systems use a non-hashed terminfo database, which is still supported.\n\nScripting improvements\n----------------------\n- ``for`` loops will no longer remember local variables from the previous iteration (:issue:`10525`).\n- A new ``history append`` subcommand appends a command to the history, without executing it (:issue:`4506`).\n- A new redirection: ``<? /path/to/file`` will try opening the file as input, and if it doesn't succeed silently uses ``/dev/null`` instead.\n  This can help with checks like ``test -f /path/to/file; and string replace foo bar < /path/to/file``. (:issue:`10387`)\n- A new option ``commandline --tokens-raw`` prints a list of tokens without any unescaping (:issue:`10212`).\n- A new option ``commandline --showing-suggestion`` tests whether an autosuggestion is currently displayed (:issue:`10586`).\n- ``functions`` and ``type`` now show that a function was copied and its source, rather than solely ``Defined interactively`` (:issue:`6575`).\n- Stack trace now shows line numbers for copied functions (:issue:`6575`).\n- ``foo & && bar`` is now a syntax error, like in other shells (:issue:`9911`).\n- ``if -e foo; end`` now prints a more accurate error (:issue:`10000`).\n- ``cd`` into a directory that is not readable but accessible (permissions ``--x``) is now possible (:issue:`10432`).\n- An integer overflow in ``string repeat`` leading to a near-infinite loop has been fixed (:issue:`9899`).\n- ``string shorten`` behaves better in the presence of non-printable characters, including fixing an integer overflow that shortened strings more than intended (:issue:`9854`).\n- ``string pad`` no longer allows non-printable characters as padding (:issue:`9854`).\n- ``string repeat`` now allows omission of ``-n`` when the first argument is an integer (:issue:`10282`).\n- ``string match`` and ``replace`` have a new ``--max-matches`` option to return as soon as the specified number of matches have been identified, which can improve performance in scripts (:issue:`10587`).\n- ``functions --handlers-type caller-exit`` once again lists functions defined as ``function --on-job-exit caller``, rather than them being listed by ``functions --handlers-type process-exit``.\n- A new ``set --no-event`` option sets or erases variables without triggering a variable event. This can be useful to change a variable in an event handler (:issue:`10480`).\n- Commas in command substitution output are no longer used as separators in brace expansion, preventing a surprising expansion in some cases (:issue:`5048`).\n- Universal variables can now store strings containing invalid UTF-8 (:issue:`10313`).\n- A new ``path basename -E`` option that causes it to return the basename (\"filename\" with the directory prefix removed) with the final extension (if any) also removed. This is a shorter version of ``path change-extension \"\" (path basename $foo)`` (:issue:`10521`).\n- A new ``math --scale-mode`` option to select ``truncate``, ``round``, ``floor``, ``ceiling`` as you wish; the default value is ``truncate``. (:issue:`9117`).\n- ``random`` is now less strict about its arguments, allowing a start larger or equal to the end. (:issue:`10879`)\n\nInteractive improvements\n------------------------\n- Autosuggestions were sometimes not shown after recalling a line from history, which has been fixed (:issue:`10287`).\n- Up-arrow search matches -- which are highlighted in reverse colors -- are no longer syntax-highlighted, to fix bad contrast with the search match highlighting.\n- Command abbreviations (those with ``--position command`` or without a ``--position``) now also expand after decorators like ``command`` (:issue:`10396`).\n- Abbreviations now expand after process separators like ``;`` and ``|``. This fixes a regression in version 3.6 (:issue:`9730`).\n- When exporting interactively defined functions (using ``type``, ``functions`` or ``funcsave``) the function body is now indented, to match the interactive command line editor (:issue:`8603`).\n- :kbd:`ctrl-x` (``fish_clipboard_copy``) on multiline commands now includes indentation (:issue:`10437`).\n- :kbd:`ctrl-v` (``fish_clipboard_paste``) now strips ASCII control characters from the pasted text.\n  This is consistent with normal keyboard input (:issue:`5274`).\n- When a command like ``fg %2`` fails to find the given job, it no longer behaves as if no job spec was given (:issue:`9835`).\n- Redirection in command position like ``>echo`` is now highlighted as error (:issue:`8877`).\n- ``fish_vi_cursor`` now works properly inside the prompt created by builtin ``read`` (:issue:`10088`).\n- fish no longer fails to open a FIFO if interrupted by a terminal resize signal (:issue:`10250`).\n- ``read --help`` and friends no longer ignore redirections. This fixes a regression in version 3.1 (:issue:`10274`).\n- Measuring a command with ``time`` now considers the time taken for command substitution (:issue:`9100`).\n- ``fish_add_path`` now automatically enables verbose mode when used interactively (in the command line), in an effort to be clearer about what it does (:issue:`10532`).\n- fish no longer adopts TTY modes of failed commands (:issue:`10603`).\n- `complete -e cmd` now prevents autoloading completions for `cmd` (:issue:`6716`).\n- fish's default color scheme no longer uses the color \"blue\", as it has bad contrast against the background in a few terminal's default palettes (:issue:`10758`, :issue:`10786`)\n  The color scheme will not be upgraded for existing installs. If you want, you should select it again via ``fish_config``.\n- Command lines which are larger than the terminal are now displayed correctly, instead of multiple blank lines being displayed (:issue:`7296`).\n- Prompts that use external commands will no longer produce an infinite loop if the command crashes (:issue:`9796`).\n\nNew or improved bindings\n^^^^^^^^^^^^^^^^^^^^^^^^\n- When the cursor is on a command that resolves to an executable script, :kbd:`alt-o` will now open that script in your editor (:issue:`10266`).\n- During up-arrow history search, :kbd:`shift-delete` will delete the current search item and move to the next older item. Previously this was only supported in the history pager. \n- :kbd:`shift-delete` will also remove the currently-displayed autosuggestion from history, and remove it as a suggestion.\n- :kbd:`ctrl-Z` (also known as :kbd:`ctrl-shift-z`) is now bound to redo.\n- :kbd:`alt-delete` now deletes the argument (which may contain quoted spaces) right of the cursor.\n- Some improvements to the :kbd:`alt-e` binding which edits the command line in an external editor:\n  - The editor's cursor position is copied back to fish. This is currently supported for Vim and Kakoune.\n  - Cursor position synchronization is only supported for a set of known editors, which are now also detected in aliases which use ``complete --wraps``. For example, use ``complete --wraps my-vim vim`` to synchronize cursors when ``EDITOR=my-vim``.\n  - Multiline commands are indented before being sent to the editor, which matches how they are displayed in fish.\n- The ``...-path-component`` bindings, like ``backward-kill-path-component``, now treat ``#`` as part of a path component (:issue:`10271`).\n- Bindings like :kbd:`alt-l` that print output in between prompts now work correctly with multiline commandlines.\n- :kbd:`alt-d` on an empty command line lists the directory history again. This restores the behavior of version 2.1.\n- ``history-prefix-search-backward`` and ``-forward`` now maintain the cursor position, instead of moving the cursor to the end of the command line (:issue:`10430`).\n- The following keys have refined behavior if the terminal supports :ref:`the new keyboard encodings <changelog-new-bindings>`:\n  - :kbd:`shift-enter` now inserts a newline instead of executing the command line.\n  - :kbd:`ctrl-backspace` now deletes the last word instead of only one character (:issue:`10741`).\n  - :kbd:`ctrl-delete` deletes the next word (same as :kbd:`alt-d`).\n- New special input functions:\n  - ``forward-char-passive`` and ``backward-char-passive`` are like their non-passive variants but do not accept autosuggestions or move focus in the completion pager (:issue:`10398`).\n  - ``forward-token``, ``backward-token``, ``kill-token``, and ``backward-kill-token`` are similar to the ``*-bigword`` variants but for the whole argument token which includes escaped spaces (:issue:`2014`).\n- The ``accept-autosuggestion`` special input function now returns false when there was nothing to accept (:issue:`10608`).\n- Vi mode has seen some improvements but continues to suffer from the lack of people working on it.\n  - New default cursor shapes for insert and replace mode.\n  - Insert-mode :kbd:`ctrl-n` accepts autosuggestions (:issue:`10339`).\n  - Outside insert mode, the cursor will no longer be placed beyond the last character on the commandline.\n  - When the cursor is at the end of the commandline, a single :kbd:`l` will accept an autosuggestion (:issue:`10286`).\n  - The cursor position after pasting (:kbd:`p`) has been corrected.\n  - When the cursor is at the start of a line, escaping from insert mode no longer moves the cursor to the previous line.\n  - Added bindings for clipboard interaction, like :kbd:`\",+,p` and :kbd:`\",+,y,y`.\n  - Deleting in visual mode now moves the cursor back, matching vi (:issue:`10394`).\n  - Support :kbd:`%` motion (:issue:`10593`).\n  - Support `ab` and `ib` vi text objects. New input functions are introduced ``jump-{to,till}-matching-bracket`` (:issue:`1842`).\n  - The :kbd:`E` binding now correctly handles the last character of the word, by jumping to the next word (:issue:`9700`).\n\nCompletions\n^^^^^^^^^^^\n- Command-specific tab completions may now offer results whose first character is a period. For example, it is now possible to tab-complete ``git add`` for files with leading periods. The default file completions hide these files, unless the token itself has a leading period (:issue:`3707`).\n- Option completion now uses fuzzy subsequence filtering, just like non-option completion (:issue:`830`).\n  This means that ``--fb`` may be completed to ``--foobar`` if there is no better match.\n- Completions that insert an entire token now use quotes instead of backslashes to escape special characters (:issue:`5433`).\n- Historically, file name completions are provided after the last ``:``  or ``=`` within a token.\n  This helps commands like ``rsync --files-from=``.\n  If the ``=`` or ``:`` is actually part of the filename, it will be escaped as ``\\:`` and ``\\=``,\n  and no longer get this special treatment.\n  This matches Bash's behavior.\n- Various new completion scripts and numerous updates to existing ones.\n- Generated completions are now stored in ``$XDG_CACHE_HOME/fish`` or ``~/.cache/fish`` by default (:issue:`10369`)\n\nImproved terminal support\n^^^^^^^^^^^^^^^^^^^^^^^^^\n- fish now marks the prompt and command-output regions (via OSC 133) to enable terminal shell integration (:issue:`10352`).\n  Shell integration shortcuts can scroll to the next/previous prompt or show the last command output in a pager.\n- fish now reports the working directory (via OSC 7) unconditionally instead of only for some terminals (:issue:`9955`).\n- fish now sets the terminal window title (via OSC 0) unconditionally instead of only for some terminals (:issue:`10037`).\n- Focus reporting in tmux is no longer disabled on the first prompt.\n- Focus reporting is now disabled during commands run inside key bindings (:issue:`6942`).\n- Cursor changes are applied to all terminals that support them, and the list of specifically-supported terminals has been removed (:issue:`10693`).\n- If it cannot find the terminfo entry given by :envvar:`TERM` environment variable, fish will now use an included ``xterm-256color`` definition to match the vast majority of current terminal emulators (:issue:`10905`). If you need to have a specific terminfo profile for your terminal's ``TERM`` variable, install it into the terminfo database.\n- Further improvements to the correct display of prompts which fill the width of the terminal (:issue:`8164`).\n\nOther improvements\n------------------\n- ``fish_indent`` will now collapse multiple empty lines into one (:issue:`10325`).\n- ``fish_indent`` now preserves the modification time of files if there were no changes (:issue:`10624`).\n- Performance and interactivity under Windows Subsystem for Linux has been improved, with a workaround for Windows-specific locations being appended to ``$PATH`` by default (:issue:`10506`).\n- Additional filesystems such as AFS are properly detected as remote, which avoids certain hangs due to expensive filesystem locks (:issue:`10818`).\n\n.. _rust-packaging:\n\nFor distributors\n----------------\n\nfish has been ported to Rust. This means a significant change in dependencies, which are listed in the README. In short, Rust 1.70 or greater is required, and a C++ compiler is no longer needed (although a C compiler is still required, for some C glue code and the tests).\n\nCMake remains the recommended build system, because of cargo's limited support for installing support files. Version 3.5 remains the minimum supported version. The Xcode generator for CMake is not supported any longer (:issue:`9924`)\n\nfish no longer depends on the ncurses library, but still uses a terminfo database. When packaging fish, please add a dependency on the package containing your terminfo database instead of curses.\n\n--------------\n\nfish 3.7.1 (released March 19, 2024)\n====================================\n\nThis release of fish fixes the following problems identified in fish 3.7.0:\n\n- Deleting the last history entry via ``history delete`` works again (:issue:`10190`).\n- Wildcards (``*``) will no longer sometimes generate paths that did not exist (:issue:`10205`).\n\nThis release also contains some improvements:\n\n- A crash when trying to run an ELF program with a missing interpreter has been fixed. This crashed in the process after fork, so did not affect the fish process that tried to start the program (:issue:`10199`).\n- ``funced`` will now always ``source`` the file after it has written it, even if the contents did not change. This prevents issues if the file was otherwise modified (:issue:`10318`).\n- The warning for when a builtin returns a negative exit code was improved, now mentioning the original status (:issue:`10187`).\n- Added completions for\n\n  - ``cobra-cli`` (:issue:`10293`)\n  - ``dmidecode`` (:issue:`10368`)\n  - ``mycli`` (:issue:`10309`)\n  - ``ollama`` (:issue:`10327`)\n  - ``pstree`` (:issue:`10317`)\n\n- Some improvements to documentation and completions.\n\n--------------\n\nfish 3.7.0 (released January 1, 2024)\n=====================================\n\nThis release of fish includes a number of improvements over fish 3.6.4, detailed below. Although work continues on the porting of fish internals to the Rust programming language, that work is not included in this release. fish 3.7.0 and any future releases in the 3.7 series remain C++ programs.\n\nNotable improvements and fixes\n------------------------------\n- Improvements to the history pager, including:\n\n  - The history pager will now also attempt subsequence matches (:issue:`9476`), so you can find a command line like ``git log 3.6.1..Integration_3.7.0`` by searching for ``gitInt``.\n  - Opening the history pager will now fill the search field with a search string if you're already in a search (:issue:`10005`). This makes it nicer to search something with :kbd:`up` and then later decide to switch to the full pager.\n  - Closing the history pager with enter will now copy the search text to the commandline if there was no match, so you can continue editing the command you tried to find right away (:issue:`9934`).\n\n- Performance improvements for command completions and globbing, where supported by the operating system, especially on slow filesystems such as NFS (:issue:`9891`, :issue:`9931`, :issue:`10032`, :issue:`10052`).\n- fish can now be configured to wait a specified amount of time for a multi-key sequence to be completed,  instead of waiting indefinitely. For example, this makes binding ``kj`` to switching modes in vi mode possible.\n  The timeout can be set via the new :envvar:`fish_sequence_key_delay_ms` variable (:issue:`7401`), and may be set by default in future versions.\n\nDeprecations and removed features\n---------------------------------\n- ``LS_COLORS`` is no longer set automatically by the ``ls`` function (:issue:`10080`). Users\n  that set ``.dircolors`` should manually import it using other means. Typically this would be ``set -gx LS_COLORS (dircolors -c .dircolors | string split ' ')[3]``\n\nScripting improvements\n----------------------\n- Running ``exit`` with a negative number no longer crashes fish (:issue:`9659`).\n- ``fish --command`` will now return a non-zero status if parsing failed (:issue:`9888`).\n- The ``jobs`` builtin will now escape the commands it prints (:issue:`9808`).\n- ``string repeat`` no longer overflows if the count is a multiple of the chunk size (:issue:`9900`).\n- The ``builtin`` builtin will now properly error out with invalid arguments instead of doing nothing and returning true (:issue:`9942`).\n- ``command time`` in a pipeline is allowed again, as is ``command and`` and ``command or`` (:issue:`9985`).\n- ``exec`` will now also apply variable overrides, so ``FOO=bar exec`` will now set ``$FOO`` correctly (:issue:`9995`).\n- ``umask`` will now handle empty symbolic modes correctly, like ``umask u=,g=rwx,o=`` (:issue:`10177`).\n- Improved error messages for errors occurring in command substitutions (:issue:`10054`).\n\nInteractive improvements\n------------------------\n- ``read`` no longer enables bracketed paste so it doesn't stay enabled in combined commandlines like ``mysql -p(read --silent)`` (:issue:`8285`).\n- Vi mode now uses :envvar:`fish_cursor_external` to set the cursor shape for external commands (:issue:`4656`).\n- Opening the history search in vi mode switches to insert mode correctly (:issue:`10141`).\n- Vi mode cursor shaping is now enabled in iTerm2 (:issue:`9698`).\n- Completing commands as root includes commands not owned by root, fixing a regression introduced in fish 3.2.0 (:issue:`9699`).\n- Selection uses ``fish_color_selection`` for the foreground and background colors, as intended, rather than just the background (:issue:`9717`).\n- The completion pager will no longer sometimes skip the last entry when moving through a long list (:issue:`9833`).\n- The interactive ``history delete`` interface now allows specifying index ranges like \"1..5\" (:issue:`9736`), and ``history delete --exact`` now properly saves the history (:issue:`10066`).\n- Command completion will now call the stock ``manpath`` on macOS, instead of a potential Homebrew version. This prevents awkward error messages (:issue:`9817`).\n- the ``redo`` special input function restores the pre-undo cursor position.\n- A new bind function ``history-pager-delete``, bound to :kbd:`shift-delete` by default, will delete the currently-selected history pager item from history (:issue:`9454`).\n- ``fish_key_reader`` will now use printable characters as-is, so pressing \"ö\" no longer leads to it telling you to bind ``\\u00F6`` (:issue:`9986`).\n- ``open`` can be used to launch terminal programs again, as an ``xdg-open`` bug has been fixed and a workaround has been removed  (:issue:`10045`).\n- The ``repaint-mode`` binding will now only move the cursor if there is repainting to be done. This fixes :kbd:`alt` combination bindings in vi mode (:issue:`7910`).\n- A new ``clear-screen`` bind function is used for :kbd:`ctrl-l` by default. This clears the screen and repaints the existing prompt at first,\n  so it eliminates visible flicker unless the terminal is very slow (:issue:`10044`).\n- The ``alias`` convenience function has better support for commands with unusual characters, like ``+`` (:issue:`8720`).\n- A longstanding issue where items in the pager would sometimes display without proper formatting has been fixed (:issue:`9617`).\n- The :kbd:`alt-l` binding, which lists the directory of the token under the cursor, correctly expands tilde (``~``) to the home directory (:issue:`9954`).\n- Various fish utilities that use an external pager will now try a selection of common pagers if the :envvar:`PAGER` environment variable is not set, or write the output to the screen without a pager if there is not one available (:issue:`10074`).\n- Command-specific tab completions may now offer results whose first character is a period. For example, it is now possible to tab-complete ``git add`` for files with leading periods. The default file completions hide these files, unless the token itself has a leading period (:issue:`3707`).\n\nImproved prompts\n^^^^^^^^^^^^^^^^\n- The default theme now only uses named colors, so it will track the terminal's palette (:issue:`9913`).\n- The Dracula theme has now been synced with upstream (:issue:`9807`); use ``fish_config`` to re-apply it to pick up the changes.\n- ``fish_vcs_prompt`` now also supports fossil (:issue:`9497`).\n- Prompts which display the working directory using the ``prompt_pwd`` function correctly display directories beginning with dashes (:issue:`10169`).\n\nCompletions\n^^^^^^^^^^^\n- Added completions for:\n\n  - ``age`` and ``age-keygen`` (:issue:`9813`)\n  - ``airmon-ng`` (:issue:`10116`)\n  - ``ar`` (:issue:`9720`)\n  - ``blender`` (:issue:`9905`)\n  - ``bws`` (:issue:`10165`)\n  - ``calendar`` (:issue:`10138`)\n  - ``checkinstall`` (:issue:`10106`)\n  - ``crc`` (:issue:`10034`)\n  - ``doctl``\n  - ``gimp`` (:issue:`9904`)\n  - ``gojq`` (:issue:`9740`)\n  - ``horcrux`` (:issue:`9922`)\n  - ``ibmcloud`` (:issue:`10004`)\n  - ``iwctl`` (:issue:`6884`)\n  - ``java_home`` (:issue:`9998`)\n  - ``krita`` (:issue:`9903`)\n  - ``oc`` (:issue:`10034`)\n  - ``qjs`` (:issue:`9723`)\n  - ``qjsc`` (:issue:`9731`)\n  - ``rename`` (:issue:`10136`)\n  - ``rpm-ostool`` (:issue:`9669`)\n  - ``smerge`` (:issue:`10135`)\n  - ``userdel`` (:issue:`10056`)\n  - ``watchexec`` (:issue:`10027`)\n  - ``wpctl`` (:issue:`10043`)\n  - ``xxd`` (:issue:`10137`)\n  - ``zabbix`` (:issue:`9647`)\n\n- The ``zfs`` completions no longer print errors about setting a read-only variable (:issue:`9705`).\n- The ``kitty`` completions have been removed in favor of keeping them upstream (:issue:`9750`).\n- ``git`` completions now support aliases that reference other aliases (:issue:`9992`).\n- The ``gw`` and ``gradlew`` completions are loaded properly (:issue:`10127`).\n- Improvements to many other completions.\n- Improvements to the manual page completion generator (:issue:`9787`, :issue:`9814`, :issue:`9961`).\n\nOther improvements\n------------------\n- Improvements and corrections to the documentation.\n- The Web-based configuration now uses a more readable style when printed, such as for a keybinding reference (:issue:`9828`).\n- Updates to the German translations (:issue:`9824`).\n- The colors of the Nord theme better match their official style (:issue:`10168`).\n\nFor distributors\n----------------\n- The licensing information for some of the derived code distributed with fish was incomplete. Though the license information was present in the source distribution, it was not present in the documentation. This has been corrected (:issue:`10162`).\n- The CMake configure step will now also look for libterminfo as an alternative name for libtinfo, as used in NetBSD curses (:issue:`9794`).\n\n----\n\nfish 3.6.4 (released December 5, 2023)\n======================================\n\nThis release contains a complete fix for the test suite failure in fish 3.6.2 and 3.6.3.\n\n--------------\n\nfish 3.6.3 (released December 4, 2023)\n======================================\n\nThis release contains a fix for a test suite failure in fish 3.6.2.\n\n--------------\n\nfish 3.6.2 (released December 4, 2023)\n======================================\n\nThis release of fish contains a security fix for CVE-2023-49284, a minor security problem identified\nin fish 3.6.1 and previous versions (thought to affect all released versions of fish).\n\nfish uses certain Unicode non-characters internally for marking wildcards and expansions. It\nincorrectly allowed these markers to be read on command substitution output, rather than\ntransforming them into a safe internal representation.\n\nFor example, ``echo \\UFDD2HOME`` has the same output as ``echo $HOME``.\n\nWhile this may cause unexpected behavior with direct input, this may become a minor security problem\nif the output is being fed from an external program into a command substitution where this output\nmay not be expected.\n\n--------------\n\nfish 3.6.1 (released March 25, 2023)\n====================================\n\nThis release of fish contains a number of fixes for problems identified in fish 3.6.1, as well as some enhancements.\n\nNotable improvements and fixes\n------------------------------\n- ``abbr --erase`` now also erases the universal variables used by the old abbr function. That means::\n\n    abbr --erase (abbr --list)\n\n  can now be used to clean out all old abbreviations (:issue:`9468`).\n- ``abbr --add --universal`` now warns about ``--universal`` being non-functional, to make it easier to detect old-style ``abbr`` calls (:issue:`9475`).\n\nDeprecations and removed features\n---------------------------------\n- The Web-based configuration for abbreviations has been removed, as it was not functional with the changes abbreviations introduced in 3.6.0 (:issue:`9460`).\n\nScripting improvements\n----------------------\n- ``abbr --list`` no longer escapes the abbr name, which is necessary to be able to pass it to ``abbr --erase`` (:issue:`9470`).\n- ``read`` will now print an error if told to set a read-only variable, instead of silently doing nothing (:issue:`9346`).\n- ``set_color -v`` no longer crashes fish (:issue:`9640`).\n\nInteractive improvements\n------------------------\n- Using ``fish_vi_key_bindings`` in combination with fish's ``--no-config`` mode works without locking up the shell (:issue:`9443`).\n- The history pager now uses more screen space, usually half the screen (:issue:`9458`)\n- Variables that were set while the locale was C (the default ASCII-only locale) will now properly be encoded if the locale is switched (:issue:`2613`, :issue:`9473`).\n- Escape during history search restores the original command line again (fixing a regression in 3.6.0).\n- Using ``--help`` on builtins now respects the ``$MANPAGER`` variable, in preference to ``$PAGER`` (:issue:`9488`).\n- :kbd:`ctrl-g` closes the history pager, like other shells (:issue:`9484`).\n- The documentation for the ``:``, ``[`` and ``.`` builtin commands can now be looked up with ``man`` (:issue:`9552`).\n- fish no longer crashes when searching history for non-ASCII codepoints case-insensitively (:issue:`9628`).\n- The :kbd:`alt-s` binding will now also use ``please`` if available (:issue:`9635`).\n- Themes that don't specify every color option can be installed correctly in the Web-based configuration (:issue:`9590`).\n- Compatibility with Midnight Commander's prompt integration has been improved (:issue:`9540`).\n- A spurious error, noted when using fish in Google Drive directories under WSL 2, has been silenced (:issue:`9550`).\n- Using ``read`` in ``fish_greeting`` or similar functions will not trigger an infinite loop (:issue:`9564`).\n- Compatibility when upgrading from old versions of fish (before 3.4.0) has been improved (:issue:`9569`).\n\nImproved prompts\n^^^^^^^^^^^^^^^^\n- The git prompt will compute the stash count to be used independently of the informative status (:issue:`9572`).\n\nCompletions\n^^^^^^^^^^^\n- Added completions for:\n\n  - ``apkanalyzer`` (:issue:`9558`)\n  - ``neovim`` (:issue:`9543`)\n  - ``otool``\n  - ``pre-commit`` (:issue:`9521`)\n  - ``proxychains`` (:issue:`9486`)\n  - ``scrypt`` (:issue:`9583`)\n  - ``stow`` (:issue:`9571`)\n  - ``trash`` and helper utilities ``trash-empty``, ``trash-list``, ``trash-put``, ``trash-restore`` (:issue:`9560`)\n  - ``ssh-copy-id`` (:issue:`9675`)\n\n- Improvements to many completions, including the speed of completing directories in WSL 2 (:issue:`9574`).\n- Completions using ``__fish_complete_suffix`` are now offered in the correct order, fixing a regression in 3.6.0 (:issue:`8924`).\n- ``git`` completions for ``git-foo``-style commands was restored, fixing a regression in 3.6.0 (:issue:`9457`).\n- File completion now offers ``../`` and ``./`` again, fixing a regression in 3.6.0 (:issue:`9477`).\n- The behaviour of completions using ``__fish_complete_path`` matches standard path completions (:issue:`9285`).\n\nOther improvements\n------------------\n- Improvements and corrections to the documentation.\n\nFor distributors\n----------------\n- fish 3.6.1 builds correctly on Cygwin (:issue:`9502`).\n\n--------------\n\nfish 3.6.0 (released January 7, 2023)\n=====================================\n\nNotable improvements and fixes\n------------------------------\n- By default, :kbd:`ctrl-r` now opens the command history in the pager (:issue:`602`). This is fully searchable and syntax-highlighted, as an alternative to the incremental search seen in other shells. The new special input function ``history-pager`` has been added for custom bindings.\n- Abbrevations are more flexible (:issue:`9313`, :issue:`5003`, :issue:`2287`):\n\n  - They may optionally replace tokens anywhere on the command line, instead of only commands\n  - Matching tokens may be described using a regular expression instead of a literal word\n  - The replacement text may be produced by a fish function, instead of a literal word\n  - They may position the cursor anywhere in the expansion, instead of at the end\n\n  For example::\n\n    function multicd\n        echo cd (string repeat -n (math (string length -- $argv[1]) - 1) ../)\n    end\n\n    abbr --add dotdot --regex '^\\.\\.+$' --function multicd\n\n  This expands ``..`` to ``cd ../``, ``...`` to ``cd ../../`` and ``....`` to ``cd ../../../`` and so on.\n\n  Or::\n\n    function last_history_item; echo $history[1]; end\n    abbr -a !! --position anywhere --function last_history_item\n\n  which expands ``!!`` to the last history item, anywhere on the command line, mimicking other shells' history expansion.\n\n  See :ref:`the documentation <cmd-abbr>` for more.\n- ``path`` gained a new ``mtime`` subcommand to print the modification time stamp for files. For example, this can be used to handle cache file ages (:issue:`9057`)::\n\n    > touch foo\n    > sleep 10\n    > path mtime --relative foo\n    10\n\n- ``string`` gained a new ``shorten`` subcommand to shorten strings to a given visible width (:issue:`9156`)::\n\n    > string shorten --max 10 \"Hello this is a long string\"\n    Hello thi…\n\n- ``test`` (aka ``[``) gained ``-ot`` (older than) and ``-nt`` (newer than) operators to compare file modification times, and ``-ef`` to compare whether the arguments are the same file (:issue:`3589`).\n- fish will now mark the extent of many errors with a squiggly line, instead of just a caret (``^``) at the beginning (:issue:`9130`). For example::\n\n    checks/set.fish (line 471): for: a,b: invalid variable name. See `help identifiers`\n    for a,b in y 1 z 3\n        ^~^\n- A new function, ``fish_delta``, shows changes that have been made in fish's configuration from the defaults (:issue:`9255`).\n- ``set --erase`` can now be used with multiple scopes at once, like ``set -efglU foo`` (:issue:`7711`, :issue:`9280`).\n- ``status`` gained a new subcommand, ``current-commandline``, which retrieves the entirety of the currently-executing command line when called from a function during execution. This allows easier job introspection (:issue:`8905`, :issue:`9296`).\n\nDeprecations and removed features\n---------------------------------\n- The ``\\x`` and ``\\X`` escape syntax is now equivalent. ``\\xAB`` previously behaved the same as ``\\XAB``, except that it would error if the value \"AB\" was larger than \"7f\" (127 in decimal, the highest ASCII value) (:issue:`9247`, :issue:`9245`, :issue:`1352`).\n- The ``fish_git_prompt`` will now only turn on features if the appropriate variable has been set to a true value (of \"1\", \"yes\" or \"true\") instead of just checking if it is defined. This allows specifically turning features *off* without having to erase variables, such as via universal variables. If you have defined a variable to a different value and expect it to count as true, you need to change it (:issue:`9274`).\n  For example, ``set -g __fish_git_prompt_show_informative_status 0`` previously would have enabled informative status (because any value would have done so), but now it turns it off.\n- Abbreviations are no longer stored in universal variables. Existing universal abbreviations are still imported, but new abbreviations should be added to ``config.fish``.\n- The short option ``-r`` for abbreviations has changed from ``rename`` to ``regex``, for consistency with ``string``.\n\nScripting improvements\n----------------------\n- ``argparse`` can now be used without option specifications, to allow using ``--min-args``, ``--max-args`` or for commands that take no options (but might in future) (:issue:`9006`)::\n\n    function my_copy\n        argparse --min-args 2 -- $argv\n        or return\n\n        cp $argv\n    end\n\n- ``set --show`` now shows when a variable was inherited from fish's parent process, which should help with debugging (:issue:`9029`)::\n\n    > set --show XDG_DATA_DIRS\n    $XDG_DATA_DIRS: set in global scope, exported, a path variable with 4 elements\n    $XDG_DATA_DIRS[1]: |/home/alfa/.local/share/flatpak/exports/share|\n    $XDG_DATA_DIRS[2]: |/var/lib/flatpak/exports/share|\n    $XDG_DATA_DIRS[3]: |/usr/local/share|\n    $XDG_DATA_DIRS[4]: |/usr/share|\n    $XDG_DATA_DIRS: originally inherited as |/home/alfa/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share/:/usr/share/|\n\n- The read limit is now restored to the default when :envvar:`fish_read_limit` is unset (:issue:`9129`).\n- ``math`` produces an error for division-by-zero, as well as augmenting some errors with their extent (:issue:`9190`). This changes behavior in some limited cases, such as::\n\n    math min 1 / 0, 5\n\n  which would previously print \"5\" (because in floating point division \"1 / 0\" yields infinite, and 5 is smaller than infinite) but will now return an error.\n- ``fish_clipboard_copy`` and ``fish_clipboard_paste`` can now be used in pipes (:issue:`9271`)::\n\n    git rev-list 3.5.1 | fish_clipboard_copy\n\n    fish_clipboard_paste | string join + | math\n\n- ``status fish-path`` returns a fully-normalised path, particularly noticeable on NetBSD (:issue:`9085`).\n\nInteractive improvements\n------------------------\n- If the terminal definition for :envvar:`TERM` can't be found, fish now tries using the \"xterm-256color\" and \"xterm\" definitions before \"ansi\" and \"dumb\". As the majority of terminal emulators in common use are now more or less xterm-compatible (often even explicitly claiming the xterm-256color entry), this should often result in a fully or almost fully usable terminal (:issue:`9026`).\n- A new variable, :envvar:`fish_cursor_selection_mode`, can be used to configure whether the command line selection includes the character under the cursor (``inclusive``) or not (``exclusive``). The new default is ``exclusive``; use ``set fish_cursor_selection_mode inclusive`` to get the previous behavior back (:issue:`7762`).\n- fish's completion pager now fills half the terminal on first tab press instead of only 4 rows, which should make results visible more often and save key presses, without constantly snapping fish to the top of the terminal (:issue:`9105`, :issue:`2698`).\n- The ``complete-and-search`` binding, used with :kbd:`shift-tab` by default, selects the first item in the results immediately (:issue:`9080`).\n- ``bind`` output is now syntax-highlighted when used interacively.\n- :kbd:`alt-h` (the default ``__fish_man_page`` binding) does a better job of showing the manual page of the command under cursor (:issue:`9020`).\n- If :envvar:`fish_color_valid_path` contains an actual color instead of just modifiers, those will be used for valid paths even if the underlying color isn't \"normal\" (:issue:`9159`).\n- The key combination for the QUIT terminal sequence, often :kbd:`ctrl-\\\\` (``\\x1c``), can now be used as a binding (:issue:`9234`).\n- fish's vi mode uses normal xterm-style sequences to signal cursor change, instead of using the iTerm's proprietary escape sequences. This allows for a blinking cursor and makes it work in complicated scenarios with nested terminals. (:issue:`3741`, :issue:`9172`)\n- When running fish on a remote system (such as inside SSH or a container), :kbd:`ctrl-x` now copies to the local client system's clipboard if the terminal supports OSC 52.\n- ``commandline`` gained two new options, ``--selection-start`` and ``--selection-end``, to set the start/end of the current selection (:issue:`9197`, :issue:`9215`).\n- fish's builtins now handle keyboard interrupts (:kbd:`ctrl-c`) correctly (:issue:`9266`).\n\nCompletions\n^^^^^^^^^^^\n- Added completions for:\n\n  - ``ark``\n  - ``asciinema`` (:issue:`9257`)\n  - ``clojure`` (:issue:`9272`)\n  - ``csh``\n  - ``direnv`` (:issue:`9268`)\n  - ``dive`` (:issue:`9082`)\n  - ``dolphin``\n  - ``dua`` (:issue:`9277`)\n  - ``efivar`` (:issue:`9318`)\n  - ``eg``\n  - ``es`` (:issue:`9388`)\n  - ``firefox-developer-edition`` and ``firefox`` (:issue:`9090`)\n  - ``fortune`` (:issue:`9177`)\n  - ``kb``\n  - ``kind`` (:issue:`9110`)\n  - ``konsole``\n  - ``ksh``\n  - ``loadkeys`` (:issue:`9312`)\n  - ``okular``\n  - ``op`` (:issue:`9300`)\n  - ``ouch`` (:issue:`9405`)\n  - ``pix``\n  - ``readelf`` (:issue:`8746`, :issue:`9386`)\n  - ``qshell``\n  - ``rc``\n  - ``sad`` (:issue:`9145`)\n  - ``tcsh``\n  - ``toot``\n  - ``tox`` (:issue:`9078`)\n  - ``wish``\n  - ``xed``\n  - ``xonsh`` (:issue:`9389`)\n  - ``xplayer``\n  - ``xreader``\n  - ``xviewer``\n  - ``yash`` (:issue:`9391`)\n  - ``zig`` (:issue:`9083`)\n\n- Improvements to many completions, including making ``cd`` completion much faster (:issue:`9220`).\n- Completion of tilde (``~``) works properly even when the file name contains an escaped character (:issue:`9073`).\n- fish no longer loads completions if the command is used via a relative path and is not in :envvar:`PATH` (:issue:`9133`).\n- fish no longer completes inside of comments (:issue:`9320`).\n\nImproved terminal support\n^^^^^^^^^^^^^^^^^^^^^^^^^\n- Opening ``help`` on WSL now uses PowerShell to open the browser if available, removing some awkward UNC path errors (:issue:`9119`).\n\nOther improvements\n------------------\n- The Web-based configuration tool now works on systems with IPv6 disabled (:issue:`3857`).\n- Aliases can ignore arguments by ending them with ``#`` (:issue:`9199`).\n-  ``string`` is now faster when reading large strings from stdin (:issue:`9139`).\n- ``string repeat`` uses less memory and is faster. (:issue:`9124`)\n- Builtins are much faster when writing to a pipe or file. (:issue:`9229`).\n- Performance improvements to highlighting (:issue:`9180`) should make using fish more pleasant on slow systems.\n- On 32-bit systems, globs like ``*`` will no longer fail to return some files, as large file support has been enabled.\n\nFixed bugs\n----------\n- The history search text for a token search is now highlighted correctly if the line contains multiple instances of that text (:issue:`9066`).\n- ``process-exit`` and ``job-exit`` events are now generated for all background jobs, including those launched from event handlers (:issue:`9096`).\n- A crash when completing a token that contained both a potential glob and a quoted variable expansion was fixed (:issue:`9137`).\n- ``prompt_pwd`` no longer accidentally overwrites a global or universal ``$fish_prompt_pwd_full_dirs`` when called with the ``-d`` or ``--full-length-dirs`` option (:issue:`9123`).\n- A bug which caused fish to freeze or exit after running a command which does not preserve the foreground process group was fixed (:issue:`9181`).\n- The \"Disco\" sample prompt no longer prints an error in some working directories (:issue:`9164`). If you saved this prompt, you should run ``fish_config prompt save disco`` again.\n- fish launches external commands via the given path again, rather than always using an absolute path. This behaviour was inadvertently changed in 3.5.0 and is visible, for example, when launching a bash script which checks ``$0`` (:issue:`9143`).\n- ``printf`` no longer tries to interpret the first argument as an option (:issue:`9132`).\n- Interactive ``read`` in scripts will now have the correct keybindings again (:issue:`9227`).\n- A possible stack overflow when recursively evaluating substitutions has been fixed (:issue:`9302`).\n- A crash with relative $CDPATH has been fixed (:issue:`9407`).\n- ``printf`` now properly fills extra ``%d`` specifiers with 0 even on macOS and BSD (:issue:`9321`).\n- ``fish_key_reader`` now correctly exits when receiving a SIGHUP (like after closing the terminal) (:issue:`9309`).\n- ``fish_config theme save`` now works as documented instead of erroring out (:issue:`9088`, :issue:`9273`).\n- fish no longer triggers prompts to install command line tools when first run on macOS (:issue:`9343`).\n- ``fish_git_prompt`` now quietly fails on macOS if the xcrun cache is not yet populated (:issue:`6625`), working around a potential hang.\n\nFor distributors\n----------------\n- The vendored PCRE2 sources have been removed. It is recommended to declare PCRE2 as a dependency when packaging fish. If the CMake variable FISH_USE_SYSTEM_PCRE2 is false, fish will now download and build PCRE2 from the official repo (:issue:`8355`, :issue:`8363`). Note this variable defaults to true if PCRE2 is found installed on the system.\n\n--------------\n\nfish 3.5.1 (released July 20, 2022)\n===================================\n\nThis release of fish introduces the following small enhancements:\n\n- Cursor shaping for Vi mode is enabled by default in tmux, and will be used if the outer terminal is capable (:issue:`8981`).\n- ``printf`` returns a better error when used with arguments interpreted as octal numbers (:issue:`9035`).\n- ``history merge`` when in private mode is now an error, rather than wiping out other sessions' history (:issue:`9050`).\n- The error message when launching a command that is built for the wrong architecture on macOS is more helpful (:issue:`9052`).\n- Added completions for:\n\n  - ``choose`` (:issue:`9065`)\n  - ``expect`` (:issue:`9060`)\n  - ``navi`` (:issue:`9064`)\n  - ``qdbus`` (:issue:`9031`)\n  - ``reflector`` (:issue:`9027`)\n\n- Improvements to some completions.\n\nThis release also fixes a number of problems identified in fish 3.5.0.\n\n- Completing ``git blame`` or ``git -C`` works correctly (:issue:`9053`).\n- On terminals that emit a ``CSI u`` sequence for :kbd:`shift-space`, fish inserts a space instead of printing an error. (:issue:`9054`).\n- ``status fish-path`` on Linux-based platforms could print the path with a \" (deleted)\" suffix (such as ``/usr/bin/fish (deleted)``), which is now removed (:issue:`9019`).\n- Cancelling an initial command (from fish's ``--init-command`` option) with :kbd:`ctrl-c` no longer prevents configuration scripts from running (:issue:`9024`).\n- The job summary contained extra blank lines if the prompt used multiple lines, which is now fixed (:issue:`9044`).\n- Using special input functions in bindings, in combination with ``and``/``or`` conditionals, no longer crashes (:issue:`9051`).\n\n--------------\n\nfish 3.5.0 (released June 16, 2022)\n===================================\n\nNotable improvements and fixes\n------------------------------\n- A new ``path`` builtin command to filter and transform paths (:issue:`7659`, :issue:`8958`). For example, to list all the separate extensions used on files in /usr/share/man (after removing one extension, commonly a \".gz\")::\n\n    path filter -f /usr/share/man/** | path change-extension '' | path extension | path sort -u\n- Tab (or any key bound to ``complete``) now expands wildcards instead of invoking completions, if there is a wildcard in the path component under the cursor (:issue:`954`, :issue:`8593`).\n- Scripts can now catch and handle the SIGINT and SIGTERM signals, either via ``function --on-signal`` or with ``trap`` (:issue:`6649`).\n\nDeprecations and removed features\n---------------------------------\n- The ``stderr-nocaret`` feature flag, introduced in fish 3.0 and enabled by default in fish 3.1, has been made read-only.\n  That means it is no longer possible to disable it, and code supporting the ``^`` redirection has been removed (:issue:`8857`, :issue:`8865`).\n\n  To recap: fish used to support ``^`` to redirect stderr, so you could use commands like::\n\n    test \"$foo\" -gt 8 ^/dev/null\n\n  to ignore error messages. This made the ``^`` symbol require escaping and quoting, and was a bit of a weird shortcut considering ``2>`` already worked, which is only one character longer.\n\n  So the above can simply become::\n\n    test \"$foo\" -gt 8 2>/dev/null\n\n- The following feature flags have been enabled by default:\n\n  - ``regex-easyesc``, which makes ``string replace -r`` not do a superfluous round of unescaping in the replacement expression.\n    That means e.g. to escape any \"a\" or \"b\" in an argument you can use ``string replace -ra '([ab])' '\\\\\\\\$1' foobar`` instead of needing 8 backslashes.\n\n    This only affects the *replacement* expression, not the *match* expression (the ``'([ab])'`` part in the example).\n    A survey of plugins on GitHub did not turn up any affected code, so we do not expect this to affect many users.\n\n    This flag was introduced in fish 3.1.\n  - ``ampersand-nobg-in-token``, which means that ``&`` will not create a background job if it occurs in the middle of a word. For example, ``echo foo&bar`` will print \"foo&bar\" instead of running ``echo foo`` in the background and then starting ``bar`` as a second job.\n\n    Reformatting with ``fish_indent`` would already introduce spaces, turning ``echo foo&bar`` into ``echo foo & bar``.\n\n    This flag was introduced in fish 3.4.\n\n  To turn off these flags, add ``no-regex-easyesc`` or ``no-ampersand-nobg-in-token`` to :envvar:`fish_features` and restart fish::\n\n    set -Ua fish_features no-regex-easyesc\n\n  Like ``stderr-nocaret``, they will eventually be made read-only.\n- Most ``string`` subcommands no longer append a newline to their input if the input didn't have one (:issue:`8473`, :issue:`3847`)\n- Fish's escape sequence removal (like for ``string length --visible`` or to figure out how wide the prompt is) no longer has special support for non-standard color sequences like from Data General terminals, e.g. the Data General Dasher D220 from 1984. This removes a bunch of work in the common case, allowing ``string length --visible`` to be much faster with unknown escape sequences. We don't expect anyone to have ever used fish with such a terminal (:issue:`8769`).\n- Code to upgrade universal variables from fish before 3.0 has been removed. Users who upgrade directly from fish versions 2.7.1 or before will have to set their universal variables & abbreviations again. (:issue:`8781`)\n- The meaning of an empty color variable has changed (:issue:`8793`). Previously, when a variable was set but empty, it would be interpreted as the \"normal\" color. Now, empty color variables cause the same effect as unset variables - the general highlighting variable for that type is used instead. For example::\n\n    set -g fish_color_command blue\n    set -g fish_color_keyword\n\n  would previously make keywords \"normal\" (usually white in a dark terminal). Now it'll make them blue. To achieve the previous behavior, use the normal color explicitly: ``set -g fish_color_keyword normal``.\n\n  This makes it easier to make self-contained color schemes that don't accidentally use color that was set before.\n  ``fish_config`` has been adjusted to set known color variables that a theme doesn't explicitly set to empty.\n- ``eval`` is now a reserved keyword, so it can't be used as a function name. This follows ``set`` and ``read``, and is necessary because it can't be cleanly shadowed by a function - at the very least ``eval set -l argv foo`` breaks. Fish will ignore autoload files for it, so left over ``eval.fish`` from previous fish versions won't be loaded.\n- The git prompt in informative mode now defaults to skipping counting untracked files, as this was extremely slow. To turn it on, set :envvar:`__fish_git_prompt_showuntrackedfiles` or set the git config value \"bash.showuntrackedfiles\" to ``true`` explicitly (which can be done for individual repositories). The \"informative+vcs\" sample prompt already skipped display of untracked files, but didn't do so in a way that skipped the computation, so it should be quite a bit faster in many cases (:issue:`8980`).\n- The ``__terlar_git_prompt`` function, used by the \"Terlar\" sample prompt, has been rebuilt as a configuration of the normal ``fish_git_prompt`` to ease maintenance, improve performance and add features (like reading per-repo git configuration). Some slight changes remain; users who absolutely must have the same behavior are encouraged to copy the old function (:issue:`9011`, :issue:`7918`, :issue:`8979`).\n\nScripting improvements\n----------------------\n- Quoted command substitution that directly follow a variable expansion (like ``echo \"$var$(echo x)\"``) no longer affect the variable expansion (:issue:`8849`).\n- Fish now correctly expands command substitutions that are preceded by an escaped dollar (like ``echo \\$(echo)``). This regressed in version 3.4.0.\n- ``math`` can now handle underscores (``_``) as visual separators in numbers (:issue:`8611`, :issue:`8496`)::\n\n    math 5 + 2_123_252\n\n- ``math``'s ``min`` and ``max`` functions now take a variable number of arguments instead of always requiring 2 (:issue:`8644`, :issue:`8646`)::\n\n    > math min 8,2,4\n    2\n\n- ``read`` is now faster as the last process in a pipeline (:issue:`8552`).\n- ``string join`` gained a new ``--no-empty`` flag to skip empty arguments (:issue:`8774`, :issue:`8351`).\n- ``read`` now only triggers the ``fish_read`` event, not the ``fish_prompt`` event (:issue:`8797`). It was supposed to work this way in fish 3.2.0 and later, but both events were emitted.\n- The TTY modes are no longer restored when non-interactive shells exit. This fixes wrong tty modes in pipelines with interactive commands. (:issue:`8705`).\n- Some functions shipped with fish printed error messages to standard output, but they now they rightly go to standard error (:issue:`8855`).\n- ``jobs`` now correctly reports CPU usage as a percentage, instead of as a number of clock ticks (:issue:`8919`).\n- ``process-exit`` events now fire when the process exits even if the job has not yet exited, fixing a regression in 3.4.1 (:issue:`8914`).\n\nInteractive improvements\n------------------------\n- Fish now reports a special error if a command wasn't found and there is a non-executable file by that name in :envvar:`PATH` (:issue:`8804`).\n- ``less`` and other interactive commands would occasionally be stopped when run in a pipeline with fish functions; this has been fixed (:issue:`8699`).\n- Case-changing autosuggestions generated mid-token now correctly append only the suffix, instead of duplicating the token (:issue:`8820`).\n- ``ulimit`` learned a number of new options for the resource limits available on Linux, FreeBSD ande NetBSD, and returns a specific warning if the limit specified is not available on the active operating system (:issue:`8823`, :issue:`8786`).\n- The ``vared`` command can now successfully edit variables named \"tmp\" or \"prompt\" (:issue:`8836`, :issue:`8837`).\n- ``time`` now emits an error if used after the first command in a pipeline (:issue:`8841`).\n- ``fish_add_path`` now prints a message for skipped non-existent paths when using the ``-v`` flag (:issue:`8884`).\n- Since fish 3.2.0, pressing :kbd:`ctrl-d` while a command is running would end up inserting a space into the next commandline, which has been fixed (:issue:`8871`).\n- A bug that caused multi-line prompts to be moved down a line when pasting or switching modes has been fixed (:issue:`3481`).\n- The Web-based configuration system no longer strips too many quotes in the abbreviation display (:issue:`8917`, :issue:`8918`).\n- Fish started with ``--no-config`` will now use the default keybindings (:issue:`8493`)\n- When fish inherits a :envvar:`USER` environment variable value that doesn't correspond to the current effective user ID, it will now correct it in all cases (:issue:`8879`, :issue:`8583`).\n- Fish sets a new :envvar:`EUID` variable containing the current effective user id (:issue:`8866`).\n- ``history search`` no longer interprets the search term as an option (:issue:`8853`)\n- The status message when a job terminates should no longer be erased by a multiline prompt (:issue:`8817`)\n\nNew or improved bindings\n^^^^^^^^^^^^^^^^^^^^^^^^\n- The :kbd:`alt-s` binding will now insert ``doas`` instead of ``sudo`` if necessary (:issue:`8942`).\n- The ``kill-whole-line`` special input function now kills the newline preceeding the last line. This makes ``dd`` in vi-mode clear the last line properly.\n- The new ``kill-inner-line`` special input function kills the line without any newlines, allowing ``cc`` in vi-mode to clear the line while preserving newlines (:issue:`8983`).\n- On terminals that emit special sequences for these combinations, :kbd:`shift-space` is bound like :kbd:`space`, and :kbd:`ctrl-enter` is bound like :kbd:`return` (:issue:`8874`).\n\nImproved prompts\n^^^^^^^^^^^^^^^^\n- A new ``Astronaut`` prompt (:issue:`8775`), a multi-line prompt using plain text reminiscent of the Starship.rs prompt.\n\nCompletions\n^^^^^^^^^^^\n- Added completions for:\n\n  - ``archlinux-java`` (:issue:`8911`)\n  - ``apk`` (:issue:`8951`)\n  - ``brightnessctl`` (:issue:`8758`)\n  - ``efibootmgr`` (:issue:`9010`)\n  - ``fastboot`` (:issue:`8904`)\n  - ``optimus-manager`` (:issue:`8913`)\n  - ``rclone`` (:issue:`8819`)\n  - ``sops`` (:issue:`8821`)\n  - ``tuned-adm`` (:issue:`8760`)\n  - ``wg-quick`` (:issue:`8687`)\n\n- ``complete`` can now be given multiple ``--condition`` options. They will be attempted in the order they were given, and only if all succeed will the completion be made available (as if they were connected with ``&&``). This helps with caching - fish's complete system stores the return value of each condition as long as the commandline doesn't change, so this can reduce the number of conditions that need to be evaluated (:issue:`8536`, :issue:`8967`).\n\nImproved terminal support\n^^^^^^^^^^^^^^^^^^^^^^^^^\n- Working directory reporting is enabled for kitty (:issue:`8806`).\n- Changing the cursor shape is now enabled by default in iTerm2 (:issue:`3696`).\n\nFor distributors\n----------------\n- libatomic is now correctly detected as necessary when building on RISC-V (:issue:`8850`, :issue:`8851`).\n- In some cases, the build process found the wrong libintl on macOS. This has been corrected (:issue:`5244`).\n- The paths for completions, functions, and configuration snippets now include\n  subdirectories ``fish/vendor_completions.d``, ``fish/vendor_functions.d``, and\n  ``fish/vendor_conf.d`` (respectively) within ``XDG_DATA_HOME`` (or ``~/.local/share``\n  if not defined) (:issue:`8887`, :issue:`7816`).\n\n--------------\n\nfish 3.4.1 (released March 25, 2022)\n====================================\n\nThis release of fish fixes the following problems identified in fish 3.4.0:\n\n- An error printed after upgrading, where old instances could pick up a newer version of the ``fish_title`` function, has been fixed (:issue:`8778`)\n- fish builds correctly on NetBSD (:issue:`8788`) and OpenIndiana (:issue:`8780`).\n- ``nextd-or-forward-word``, bound to :kbd:`alt-right` by default, was inadvertently changed to move like ``forward-bigword``. This has been corrected (:issue:`8790`).\n- ``funcsave -q`` and ``funcsave --quiet`` now work correctly (:issue:`8830`).\n- Issues with the ``csharp`` and ``nmcli`` completions were corrected.\n\nIf you are upgrading from version 3.3.1 or before, please also review the release notes for 3.4.0 (included below).\n\n--------------\n\nfish 3.4.0 (released March 12, 2022)\n====================================\n\nNotable improvements and fixes\n------------------------------\n- fish's command substitution syntax has been extended: ``$(cmd)`` now has the same meaning as ``(cmd)`` but it can be used inside double quotes, to prevent line splitting of the results (:issue:`159`)::\n\n    foo (bar | string collect)\n    # can now be written as\n    foo \"$(bar)\"\n\n    # and\n\n    foo (bar)\n    # can now be written as\n    foo $(bar)\n    # this will still split on newlines only.\n\n- Complementing the ``prompt`` command in 3.3.0, ``fish_config`` gained a ``theme`` subcommand to show and pick from the sample themes (meaning color schemes) directly in the terminal, instead of having to open a Web browser. For example ``fish_config theme choose Nord`` loads the Nord theme in the current session (:issue:`8132`). The current theme can be saved with ``fish_config theme dump``, and custom themes can be added by saving them in ``~/.config/fish/themes/``.\n- ``set`` and ``read`` learned a new option, ``--function``, to set a variable in the function's top scope. This should be a more familiar way of scoping variables and avoids issues with ``--local``, which is actually block-scoped (:issue:`565`, :issue:`8145`)::\n\n    function demonstration\n        if true\n            set --function foo bar\n            set --local baz banana\n        end\n        echo $foo # prints \"bar\" because $foo is still valid\n        echo $baz # prints nothing because $baz went out of scope\n    end\n\n- ``string pad`` now excludes escape sequences like colors that fish knows about, and a new ``--visible`` flag to ``string length`` makes it use that kind of visible width. This is useful to get the number of terminal cells an already colored string would occupy, like in a prompt. (:issue:`8182`, :issue:`7784`, :issue:`4012`)::\n\n    > string length --visible (set_color red)foo\n    3\n\n- Performance improvements to globbing, especially on systems using glibc. In some cases (large directories with files with many numbers in the names) this almost halves the time taken to expand the glob.\n- Autosuggestions can now be turned off by setting ``$fish_autosuggestion_enabled`` to 0, and (almost) all highlighting can be turned off by choosing the new \"None\" theme. The exception is necessary colors, like those which distinguish autosuggestions from the actual command line. (:issue:`8376`)\n- The ``fish_git_prompt`` function, which is included in the default prompts, now overrides ``git`` to avoid running  commands set by per-repository configuration. This avoids a potential security issue in some circumstances, and has been assigned CVE-2022-20001 (:issue:`8589`).\n\nDeprecations and removed features\n---------------------------------\n- A new feature flag, ``ampersand-nobg-in-token`` makes ``&`` only act as background operator if followed by a separator. In combination with ``qmark-noglob``, this allows entering most URLs at the command line without quoting or escaping (:issue:`7991`). For example::\n\n    > echo foo&bar # will print \"foo&bar\", instead of running \"echo foo\" in the background and executing \"bar\"\n    > echo foo & bar # will still run \"echo foo\" in the background and then run \"bar\"\n    # with both ampersand-nobg-in-token and qmark-noglob, this argument has no special characters anymore\n    > open https://www.youtube.com/watch?v=dQw4w9WgXcQ&feature=youtu.be\n\n  As a reminder, feature flags can be set on startup with ``fish --features ampersand-nobg-in-token,qmark-noglob`` or with a universal variable called ``fish_features``::\n\n    > set -Ua fish_features ampersand-nobg-in-token\n\n- ``$status`` is now forbidden as a command, to prevent a surprisingly common error among new users: Running ``if $status`` (:issue:`8171`). This applies *only* to ``$status``, other variables are still allowed.\n- ``set --query`` now returns an exit status of 255 if given no variable names. This means ``if set -q $foo`` will not enter the if-block if ``$foo`` is empty or unset. To restore the previous behavior, use ``if not set -q foo; or set -q $foo`` - but this is unlikely to be desireable (:issue:`8214`).\n- ``_`` is now a reserved keyword (:issue:`8342`).\n- The special input functions ``delete-or-exit``, ``nextd-or-forward-word`` and ``prevd-or-backward-word`` replace fish functions of the same names (:issue:`8538`).\n- Mac OS X 10.9 is no longer supported. The minimum Mac version is now 10.10 \"Yosemite.\"\n\nScripting improvements\n----------------------\n- ``string collect`` supports a new ``--allow-empty`` option, which will output one empty argument in a command substitution that has no output (:issue:`8054`). This allows commands like ``test -n (echo -n | string collect --allow-empty)`` to work more reliably. Note this can also be written as ``test -n \"$(echo -n)\"`` (see above).\n- ``string match`` gained a ``--groups-only`` option, which makes it only output capturing groups, excluding the full match. This allows ``string match`` to do simple transformations (:issue:`6056`)::\n\n    > string match -r --groups-only '(.*)fish' 'catfish' 'twofish' 'blue fish' | string escape\n    cat\n    two\n    'blue '\n\n- ``$fish_user_paths`` is now automatically deduplicated to fix a common user error of appending to it in config.fish when it is universal (:issue:`8117`). :ref:`fish_add_path <cmd-fish_add_path>` remains the recommended way to add to $PATH.\n- ``return`` can now be used outside functions. In scripts, it does the same thing as ``exit``. In interactive mode,it sets ``$status`` without exiting (:issue:`8148`).\n- An oversight prevented all syntax checks from running on commands given to ``fish -c`` (:issue:`8171`). This includes checks such as ``exec`` not being allowed in a pipeline, and ``$$`` not being a valid variable. Generally, another error was generated anyway.\n- ``fish_indent`` now correctly reformats tokens that end with a backslash followed by a newline (:issue:`8197`).\n- ``commandline`` gained an ``--is-valid`` option to check if the command line is syntactically valid and complete. This allows basic implementation of transient prompts (:issue:`8142`).\n- ``commandline`` gained a ``--paging-full-mode`` option to check if the pager is showing all the possible lines (no \"7 more rows\" message) (:issue:`8485`).\n- List expansion correctly reports an error when used with all zero indexes (:issue:`8213`).\n- Running ``fish`` with a directory instead of a script as argument (eg ``fish .``) no longer leads to an infinite loop. Instead it errors out immediately (:issue:`8258`)\n- Some error messages occuring after fork, like \"text file busy\" have been replaced by bespoke error messages for fish (like \"File is currently open for writing\"). This also restores error messages with current glibc versions that removed sys_errlist (:issue:`8234`, :issue:`4183`).\n- The ``realpath`` builtin now also squashes leading slashes with the ``--no-symlinks`` option (:issue:`8281`).\n- When trying to ``cd`` to a dangling (broken) symbolic link, fish will print an error noting that the target is a broken link (:issue:`8264`).\n- On MacOS terminals that are not granted permissions to access a folder, ``cd`` would print a spurious \"rotten symlink\" error, which has been corrected to \"permission denied\" (:issue:`8264`).\n- Since fish 3.0, ``for`` loops would trigger a variable handler function before the loop was entered. As the variable had not actually changed or been set, this was a spurious event and has been removed (:issue:`8384`).\n- ``math`` now correctly prints negative values and values larger than ``2**31`` when in hex or octal bases (:issue:`8417`).\n- ``dirs`` always produces an exit status of 0, instead of sometimes returning 1 (:issue:`8211`).\n- ``cd \"\"`` no longer crashes fish (:issue:`8147`).\n- ``set --query`` can now query whether a variable is a path variable via ``--path`` or ``--unpath`` (:issue:`8494`).\n- Tilde characters (``~``) produced by custom completions are no longer escaped when applied to the command line, making it easier to use the output of a recursive ``complete -C`` in completion scripts (:issue:`4570`).\n- ``set --show`` reports when a variable is read-only (:issue:`8179`).\n- Erasing ``$fish_emoji_width`` will reset fish to the default guessed emoji width (:issue:`8274`).\n- The ``la`` function no longer lists entries for \".\" and \"..\", matching other systems defaults (:issue:`8519`).\n- ``abbr -q`` returns the correct exit status when given multiple abbreviation names as arguments (:issue:`8431`).\n- ``command -v`` returns an exit status of 127 instead of 1 if no command was found (:issue:`8547`).\n- ``argparse`` with ``--ignore-unknown`` no longer breaks with multiple unknown options in a short option group (:issue:`8637`).\n- Comments inside command substitutions or brackets now correctly ignore parentheses, quotes, and brackets (:issue:`7866`, :issue:`8022`, :issue:`8695`).\n- ``complete -C`` supports a new ``--escape`` option, which turns on escaping in returned completion strings (:issue:`3469`).\n- Invalid byte or unicode escapes like ``\\Utest`` or ``\\xNotHex`` are now a tokenizer error instead of causing the token to be truncated (:issue:`8545`).\n\nInteractive improvements\n------------------------\n- Vi mode cursors are now set properly after :kbd:`ctrl-c` (:issue:`8125`).\n- ``funced`` will try to edit the whole file containing a function definition, if there is one (:issue:`391`).\n- Running a command line consisting of just spaces now deletes an ephemeral (starting with space) history item again (:issue:`8232`).\n- Command substitutions no longer respect job control, instead running inside fish's own process group (:issue:`8172`). This more closely matches other shells, and improves :kbd:`ctrl-c` reliability inside a command substitution.\n- ``history`` and ``__fish_print_help`` now properly support ``less`` before version 530, including the version that ships with macOS. (:issue:`8157`).\n- ``help`` now knows which section is in which document again (:issue:`8245`).\n- fish's highlighter will now color options (starting with ``-`` or ``--``) with the color given in the new $fish_color_option, up to the first ``--``. It falls back on $fish_color_param, so nothing changes for existing setups (:issue:`8292`).\n- When executing a command, abbreviations are no longer expanded when the cursor is separated from the command by spaces, making it easier to suppress abbreviation expansion of commands without arguments. (:issue:`8423`).\n- ``fish_key_reader``'s output was simplified. By default, it now only prints a bind statement. The previous per-character timing information can be seen with a new ``--verbose`` switch (:issue:`8467`).\n- Custom completions are now also loaded for commands that contain tildes or variables like ``~/bin/fish`` or ``$PWD/fish`` (:issue:`8442`).\n- Command lines spanning multiple lines will not be overwritten by the completion pager when it fills the entire terminal (:issue:`8509`, :issue:`8405`).\n- When redrawing a multiline prompt, the old prompt is now properly cleared (:issue:`8163`).\n- Interactive completion would occasionally ignore the last word on the command line due to a race condition. This has been fixed (:issue:`8175`).\n- Propagation of universal variables from a fish process that is closing is faster (:issue:`8209`).\n- The command line is drawn in the correct place if the prompt ends with a newline (:issue:`8298`).\n- ``history`` learned a new subcommand ``clear-session`` to erase all history from the current session (:issue:`5791`).\n- Pressing :kbd:`ctrl-c` in ``fish_key_reader`` will no longer print the incorrect \"Press [ctrl-C] again to exit\" message (:issue:`8510`).\n- The default command-not-found handler for Fedora/PackageKit now passes the whole command line, allowing for functionality such as running the suggested command directly (:issue:`8579`).\n- When looking for locale information, the Debian configuration is now used when available (:issue:`8557`).\n- Pasting text containing quotes from the clipboard trims spaces more appropriately (:issue:`8550`).\n- The clipboard bindings ignore X-based clipboard programs if the ``DISPLAY`` environment variable is not set, which helps prefer the Windows clipboard when it is available (such as on WSL).\n- ``funcsave`` will remove a saved copy of a function that has been erased with ``functions --erase``.\n- The Web-based configuration tool gained a number of improvements, including the ability to set pager colors.\n- The default ``fish_title`` prints a shorter title with shortened $PWD and no more redundant \"fish\" (:issue:`8641`).\n- Holding down an arrow key won't freeze the terminal with long periods of flashing (:issue:`8610`).\n- Multi-char bindings are no longer interrupted if a signal handler enqueues an event. (:issue:`8628`).\n\nNew or improved bindings\n^^^^^^^^^^^^^^^^^^^^^^^^\n- :kbd:`escape` can now bound without breaking arrow key bindings (:issue:`8428`).\n- The :kbd:`alt-h` binding (to open a command’s manual page) now also ignores ``command`` (:issue:`8447`).\n\nImproved prompts\n^^^^^^^^^^^^^^^^\n- The ``fish_status_to_signal`` helper function returns the correct signal names for the current platform, rather than Linux (:issue:`8530`).\n- The ``prompt_pwd`` helper function learned a ``--full-length-dirs N`` option to keep the last N directory components unshortened. In addition the number of characters to shorten each component should be shortened to can now be given as ``-d N`` or ``--dir-length N``. (:issue:`8208`)::\n\n    > prompt_pwd --full-length-dirs 2 -d 1 ~/dev/fish-shell/share/tools/web_config\n    ~/d/f/s/tools/web_config\n\nCompletions\n^^^^^^^^^^^\n- Added completions for:\n\n  - Apple's ``shortcuts``\n  - ``argparse`` (:issue:`8434`)\n  - ``asd`` (:issue:`8759`)\n  - ``az`` (:issue:`8141`)\n  - ``black`` (:issue:`8123`)\n  - ``clasp`` (:issue:`8373`)\n  - ``cpupower`` (:issue:`8302`)\n  - ``dart`` (:issue:`8315`)\n  - ``dscacheutil``\n  - ``elvish`` (:issue:`8416`)\n  - ``ethtool`` (:issue:`8283`)\n  - ``exif`` (:issue:`8246`)\n  - ``findstr`` (:issue:`8481`)\n  - ``git-sizer`` (:issue:`8156`)\n  - ``gnome-extensions`` (:issue:`8732`)\n  - ``gping`` (:issue:`8181`)\n  - ``isatty`` (:issue:`8609`)\n  - ``istioctl`` (:issue:`8343`)\n  - ``kmutil``\n  - ``kubectl`` (:issue:`8734`)\n  - ``matlab`` (:issue:`8505`)\n  - ``mono`` (:issue:`8415`) and related tools ``csharp``, ``gacutil``, ``gendarme``, ``ikdasm``, ``ilasm``, ``mkbundle``, ``monodis``, ``monop``, ``sqlsharp`` and ``xsp`` (:issue:`8452`)\n  -  Angular's ``ng`` (:issue:`8111`)\n  - ``nodeenv`` (:issue:`8533`)\n  - ``octave`` (:issue:`8505`)\n  - ``pabcnet_clear`` (:issue:`8421`)\n  - ``qmk`` (:issue:`8180`)\n  - ``rakudo`` (:issue:`8113`)\n  - ``rc-status`` (:issue:`8757`)\n  - ``roswell`` (:issue:`8330`)\n  - ``sbcl`` (:issue:`8330`)\n  - ``starship`` (:issue:`8520`)\n  - ``topgrade`` (:issue:`8651`)\n  -  ``wine``, ``wineboot`` and ``winemaker`` (:issue:`8411`)\n  -  Windows Subsystem for Linux (WSL)'s ``wslpath`` (:issue:`8364`)\n  -  Windows' ``color`` (:issue:`8483`), ``attrib``, ``attributes``, ``choice``, ``clean``, ``cleanmgr``, ``cmd``, ``cmdkey``, ``comp``, ``forfiles``, ``powershell``, ``reg``, ``schtasks``, ``setx`` (:issue:`8486`)\n  - ``zef`` (:issue:`8114`)\n\n- Improvements to many completions, especially for ``git`` aliases (:issue:`8129`), subcommands (:issue:`8134`) and submodules (:issue:`8716`).\n- Many adjustments to complete correct options for system utilities on BSD and macOS.\n- When evaluating custom completions, the command line state no longer includes variable overrides (``var=val``). This unbreaks completions that read ``commandline -op``.\n\nImproved terminal support\n^^^^^^^^^^^^^^^^^^^^^^^^^\n- Dynamic terminal titles are enabled on WezTerm (:issue:`8121`).\n- Directory history navigation works out of the box with Apple Terminal's default key settings (:issue:`2330`).\n- fish now assumes Unicode 9+ widths for emoji under iTerm 2 (:issue:`8200`).\n- Skin-tone emoji modifiers (U+1F3FB through U+1F3FF) are now measured as width 0 (:issue:`8275`).\n- fish's escape sequence removal now also knows Tmux's wrapped escapes.\n- Vi mode cursors are enabled in Apple Terminal.app (:issue:`8167`).\n- Vi cursor shaping and $PWD reporting is now also enabled on foot (:issue:`8422`).\n- ``ls`` will use colors also on newer versions of Apple Terminal.app (:issue:`8309`).\n- The :kbd:`delete` and :kbd:`shift-tab` keys work more reliably under ``st`` (:issue:`8352`, :issue:`8354`).\n\nOther improvements\n------------------\n- Fish's test suite now uses ``ctest``, and has become much faster to run. It is now also possible to run only specific tests with targets named ``test_$filename`` - ``make test_set.fish`` only runs the set.fish test. (:issue:`7851`)\n- The HTML version of the documentation now includes copy buttons for code examples (:issue:`8218`).\n- The HTML version of the documentation and the web-based configuration tool now pick more modern system fonts instead of falling back to Arial and something like Courier New most of the time (:issue:`8632`).\n- The Debian & Ubuntu package linked from fishshell.com is now a single package, rather than split into ``fish`` and ``fish-common`` (:issue:`7845`).\n- The macOS installer does not assert that Rosetta is required to install fish on machines with Apple Silicon (:issue:`8566`).\n- The macOS installer now cleans up previous .pkg installations when upgrading. (:issue:`2963`).\n\nFor distributors\n----------------\n- The minimum version of CMake required to build fish is now 3.5.0.\n- The CMake installation supports absolute paths for ``CMAKE_INSTALL_DATADIR`` (:issue:`8150`).\n- Building using NetBSD curses works on any platform (:issue:`8087`).\n- The build system now uses the default linker instead of forcing use of the gold or lld linker (:issue:`8152`).\n\n--------------\n\nfish 3.3.1 (released July 6, 2021)\n==================================\n\nThis release of fish fixes the following problems identified in fish 3.3.0:\n\n- The prompt and command line are redrawn correctly in response to universal variable changes (:issue:`8088`).\n- A superfluous error that was produced when setting the ``PATH`` or ``CDPATH`` environment variables to include colon-delimited components that do not exist was removed (:issue:`8095`).\n- The Vi mode indicator in the prompt is repainted correctly after :kbd:`ctrl-c` cancels the current command (:issue:`8103`).\n- fish builds correctly on platforms that do not have a ``spawn.h`` header, such as old versions of OS X (:issue:`8097`).\n\nA number of improvements to the documentation, and fixes for completions, are included as well.\n\nIf you are upgrading from version 3.2.2 or before, please also review the release notes for 3.3.0 (included below).\n\n--------------\n\nfish 3.3.0 (released June 28, 2021)\n===================================\n\n\nNotable improvements and fixes\n------------------------------\n- ``fish_config`` gained a ``prompt`` subcommand to show and pick from the sample prompts directly in the terminal, instead of having to open a webbrowser. For example ``fish_config prompt choose default`` loads the default prompt in the current session (:issue:`7958`).\n- The documentation has been reorganized to be easier to understand (:issue:`7773`).\n\nDeprecations and removed features\n---------------------------------\n- The ``$fish_history`` value \"default\" is no longer special. It used to be treated the same as \"fish\" (:issue:`7650`).\n- Redirection to standard error with the ``^`` character has been disabled by default. It can be turned back on using the ``stderr-nocaret`` feature flag, but will eventually be disabled completely (:issue:`7105`).\n- Specifying an initial tab to ``fish_config`` now only works with ``fish_config browse`` (eg ``fish_config browse variables``), otherwise it would interfere with the new ``prompt`` subcommand (see below) (:issue:`7958`).\n\nScripting improvements\n----------------------\n- ``math`` gained new functions ``log2`` (like the documentation claimed), ``max`` and ``min`` (:issue:`7856`). ``math`` functions can be used without the parentheses (eg ``math sin 2 + 6``), and functions have the lowest precedence in the order of operations (:issue:`7877`).\n- Shebang (``#!``) lines are no longer required within shell scripts, improving support for scripts with concatenated binary contents. If a file fails to execute and passes a (rudimentary) binary safety check, fish will re-invoke it using ``/bin/sh`` (:issue:`7802`).\n- Exit codes are better aligned with bash. A failed execution now reports ``$status`` of 127 if the file is not found, and 126 if it is not executable.\n- ``echo`` no longer writes its output one byte at a time, improving performance and allowing use with Linux's special API files (``/proc``, ``/sys`` and such) (:issue:`7836`).\n- fish should now better handle ``cd`` on filesystems with broken ``stat(3)`` responses (:issue:`7577`).\n- Builtins now properly report a ``$status`` of 1 upon unsuccessful writes (:issue:`7857`).\n- ``string match`` with unmatched capture groups and without the ``--all`` flag now sets an empty variable instead of a variable containing the empty string. It also correctly imports the first match if multiple arguments are provided, matching the documentation. (:issue:`7938`).\n- fish produces more specific errors when a command in a command substitution wasn't found or is not allowed. This now prints something like \"Unknown command\" instead of \"Unknown error while evaluating command substitution\".\n- ``fish_indent`` allows inline variable assignments (``FOO=BAR command``) to use line continuation, instead of joining them into one line (:issue:`7955`).\n- fish gained a ``--no-config`` option to disable configuration files. This applies to user-specific and the systemwide ``config.fish`` (typically in ``/etc/fish/config.fish``), and configuration snippets (typically in ``conf.d`` directories). It also disables universal variables, history, and loading of functions from system or user configuration directories (:issue:`7921`, :issue:`1256`).\n- When universal variables are unavailable for some reason, setting a universal variable now sets a global variable instead (:issue:`7921`).\n- ``$last_pid`` now contains the process ID of the last process in the pipeline, allowing it to be used in scripts (:issue:`5036`, :issue:`5832`, :issue:`7721`). Previously, this value contained the process group ID, but in scripts this was the same as the running fish's process ID.\n- ``process-exit`` event handlers now receive the same value as ``$status`` in all cases, instead of receiving -1 when the exit was due to a signal.\n- ``process-exit`` event handlers for PID 0 also received ``JOB_EXIT`` events; this has been fixed.\n- ``job-exit`` event handlers may now be created with any of the PIDs from the job. The handler is passed the last PID in the job as its second argument, instead of the process group.\n- Trying to set an empty variable name with ``set`` no longer works (these variables could not be used in expansions anyway).\n- ``fish_add_path`` handles an undefined ``PATH`` environment variable correctly (:issue:`8082`).\n\nInteractive improvements\n-------------------------\n- Commands entered before the previous command finishes will now be properly syntax highlighted.\n- fish now automatically creates ``config.fish`` and the configuration directories in ``$XDG_CONFIG_HOME/fish`` (by default ``~/.config/fish``) if they do not already exist (:issue:`7402`).\n- ``$SHLVL`` is no longer incremented in non-interactive shells. This means it won't be set to values larger than 1 just because your environment happens to run some scripts in $SHELL in its startup path (:issue:`7864`).\n- fish no longer rings the bell when flashing the command line. The flashing should already be enough notification and the bell can be annoying (:issue:`7875`).\n- ``fish --help`` is more helpful if the documentation isn't installed (:issue:`7824`).\n- ``funced`` won't include an entry on where a function is defined, thanks to the new ``functions --no-details`` option (:issue:`7879`).\n- A new variable, ``fish_killring``, containing entries from the killring, is now available (:issue:`7445`).\n- ``fish --private`` prints a note on private mode on startup even if ``$fish_greeting`` is an empty list (:issue:`7974`).\n- fish no longer attempts to lock history or universal variable files on remote filesystems, including NFS and Samba mounts. In rare cases, updates to these files may be dropped if separate fish instances modify them simultaneously. (:issue:`7968`).\n- ``wait`` and ``on-process-exit`` work correctly with jobs that have already exited (:issue:`7210`).\n- ``__fish_print_help`` (used for ``--help`` output for fish's builtins) now respects the ``LESS`` environment variable, and if not set, uses better default pager settings (:issue:`7997`).\n- Errors from ``alias`` are now printed to standard error, matching other builtins and functions (:issue:`7925`).\n- ``ls`` output is colorized on OpenBSD if colorls utility is installed (:issue:`8035`)\n- The default pager color looks better in terminals with light backgrounds (:issue:`3412`).\n- Further robustness improvements to the bash history import (:issue:`7874`).\n- fish now tries to find a Unicode-aware locale for encoding (``LC_CTYPE``) if started without any locale information, improving the display of emoji and other non-ASCII text on misconfigured systems (:issue:`8031`). To allow a C locale, set the variable ``fish_allow_singlebyte_locale`` to 1.\n- The Web-based configuration and documentation now feature a dark mode if the browser requests it (:issue:`8043`).\n- Color variables can now also be given like ``--background red`` and ``-b red``, not just ``--background=red`` (:issue:`8053`).\n- ``exit`` run within ``fish_prompt`` now exits properly (:issue:`8033`).\n- When attempting to execute the unsupported POSIX-style brace command group (``{ ... }``) fish will suggest its equivalent ``begin; ...; end`` commands (:issue:`6415`).\n\nNew or improved bindings\n^^^^^^^^^^^^^^^^^^^^^^^^\n- Pasting in Vi mode puts text in the right place in normal mode (:issue:`7847`).\n- Vi mode's :kbd:`u` is bound to ``undo`` instead of ``history-search-backward``, following GNU readline's behavior. Similarly, :kbd:`ctrl-r` is bound to ``redo`` instead of ``history-search-backward``, following Vim (:issue:`7908`).\n- :kbd:`s` in Vi visual mode now does the same thing as :kbd:`c` (:issue:`8039`).\n- The binding for :kbd:`\",*,y` now uses ``fish_clipboard_copy``, allowing it to support more than just ``xsel``.\n- The :kbd:`ctrl-space` binding can be correctly customised (:issue:`7922`).\n- ``exit`` works correctly in bindings (:issue:`7967`).\n- The :kbd:`f1` binding, which opens the manual page for the current command, now works around a bug in certain ``less`` versions that fail to clear the screen (:issue:`7863`).\n- The binding for :kbd:`alt-s` now toggles whether ``sudo`` is prepended, even when it took the commandline from history instead of only adding it.\n- The new functions ``fish_commandline_prepend`` and ``fish_commandline_append`` allow toggling the presence of a prefix/suffix on the current commandline. (:issue:`7905`).\n- ``backward-kill-path-component`` :kbd:`ctrl-w`) no longer erases parts of two tokens when the cursor is positioned immediately after ``/``. (:issue:`6258`).\n\nImproved prompts\n^^^^^^^^^^^^^^^^\n- The default Vi mode prompt now uses foreground instead of background colors, making it less obtrusive (:issue:`7880`).\n- Performance of the \"informative\" git prompt is improved somewhat (:issue:`7871`). This is still slower than the non-informative version by its very nature. In particular it is IO-bound, so it will be very slow on slow disks or network mounts.\n- The sample prompts were updated. Some duplicated prompts, like the various classic variants, or less useful ones, like the \"justadollar\" prompt were removed, some prompts were cleaned up, and in some cases renamed. A new \"simple\" and \"disco\" prompt were added (:issue:`7884`, :issue:`7897`, :issue:`7930`). The new prompts will only take effect when selected and existing installed prompts will remain unchanged.\n- A new ``prompt_login`` helper function to describe the kind of \"login\" (user, host and chroot status) for use in prompts. This replaces the old \"debian chroot\" prompt and has been added to the default and terlar prompts (:issue:`7932`).\n- The Web-based configuration's prompt picker now shows and installs right prompts (:issue:`7930`).\n- The git prompt now has the same symbol order in normal and \"informative\" mode, and it's customizable via ``$__fish_git_prompt_status_order`` (:issue:`7926`).\n\nCompletions\n^^^^^^^^^^^\n- Added completions for:\n\n  - ``firewall-cmd`` (:issue:`7900`)\n  - ``sv`` (:issue:`8069`)\n\n- Improvements to plenty of completions!\n- Commands that wrap ``cd`` (using ``complete --wraps cd``) get the same completions as ``cd`` (:issue:`4693`).\n- The ``--force-files`` option to ``complete`` works for bare arguments, not just options (:issue:`7920`).\n- Completion descriptions for functions don't include the function definition, making them more concise (:issue:`7911`).\n- The ``kill`` completions no longer error on MSYS2 (:issue:`8046`).\n- Completion scripts are now loaded when calling a command via a relative path (like ``./git``) (:issue:`6001`, :issue:`7992`).\n- When there are multiple completion candidates, fish inserts their shared prefix. This prefix was computed in a case-insensitive way, resulting in wrong case in the completion pager. This was fixed by only inserting prefixes with matching case (:issue:`7744`).\n\nImproved terminal support\n^^^^^^^^^^^^^^^^^^^^^^^^^\n- fish no longer tries to detect a missing new line during startup, preventing an erroneous ``⏎`` from appearing if the terminal is resized at the wrong time, which can happen in tiling window managers (:issue:`7893`).\n- fish behaves better when it disagrees with the terminal on the width of characters. In particular, staircase effects with right prompts should be gone in most cases (:issue:`8011`).\n- If the prompt takes up the entire line, the last character should no longer be chopped off in certain terminals (:issue:`8002`).\n- fish's reflow handling has been disabled by default for kitty (:issue:`7961`).\n- The default prompt no longer produces errors when used with a dumb terminal (:issue:`7904`).\n- Terminal size variables are updated for window size change signal handlers (``SIGWINCH``).\n- Pasting within a multi-line command using a terminal that supports bracketed paste works correctly, instead of producing an error (:issue:`7782`).\n- ``set_color`` produces an error when used with invalid arguments, rather than empty output which interacts badly with Cartesian product expansion.\n\nFor distributors\n----------------\n- fish runs correctly on platforms without the ``O_CLOEXEC`` flag for ``open(2)`` (:issue:`8023`).\n\n--------------\n\nfish 3.2.2 (released April 7, 2021)\n====================================\n\nThis release of fish fixes a number of additional issues identified in the fish 3.2 series:\n\n- The command-not-found handler used suggestions from ``pacman`` on Arch Linux, but this caused major slowdowns on some systems and has been disabled (:issue:`7841`).\n- fish will no longer hang on exit if another process is in the foreground on macOS (:issue:`7901`).\n- Certain programs (such as ``lazygit``) could create situations where fish would not receive keystrokes correctly, but it is now more robust in these situations (:issue:`7853`).\n- Arguments longer than 1024 characters no longer trigger excessive CPU usage on macOS (:issue:`7837`).\n- fish builds correctly on macOS when using new versions of Xcode (:issue:`7838`).\n- Completions for ``aura`` (:issue:`7865`) and ``tshark`` (:issue:`7858`) should no longer produce errors.\n- Background jobs no longer interfere with syntax highlighting (a regression introduced in fish 3.2.1, :issue:`7842`).\n\nIf you are upgrading from version 3.1.2 or before, please also review the release notes for 3.2.1 and 3.2.0 (included below).\n\n--------------\n\nfish 3.2.1 (released March 18, 2021)\n====================================\n\nThis release of fish fixes the following problems identified in fish 3.2.0:\n\n-  Commands in key bindings are run with fish's internal terminal modes, instead of the terminal modes typically used for commands. This fixes a bug introduced in 3.2.0, where text would unexpectedly appear on the terminal, especially when pasting (:issue:`7770`).\n-  Prompts which use the internal ``__fish_print_pipestatus`` function will display correctly rather than carrying certain modifiers (such as bold) further than intended (:issue:`7771`).\n-  Redirections to internal file descriptors is allowed again, reversing the changes in 3.2.0. This fixes a problem with Midnight Commander (:issue:`7769`).\n-  Universal variables should be fully reliable regardless of operating system again (:issue:`7774`).\n-  ``fish_git_prompt`` no longer causes screen flickering in certain terminals (:issue:`7775`).\n-  ``fish_add_path`` manipulates the ``fish_user_paths`` variable correctly when moving multiple paths (:issue:`7776`).\n-  Pasting with a multi-line command no longer causes a ``__fish_tokenizer_state`` error (:issue:`7782`).\n-  ``psub`` inside event handlers cleans up temporary files properly (:issue:`7792`).\n-  Event handlers declared with ``--on-job-exit $fish_pid`` no longer run constantly (:issue:`7721`), although these functions should use ``--on-event fish_exit`` instead.\n-  Changing terminal modes inside ``config.fish`` works (:issue:`7783`).\n-  ``set_color --print-colors`` no longer prints all colors in bold (:issue:`7805`)\n-  Completing commands starting with a ``-`` no longer prints an error (:issue:`7809`).\n-  Running ``fish_command_not_found`` directly no longer produces an error on macOS or other OSes which do not have a handler available (:issue:`7777`).\n-  The new ``type`` builtin now has the (deprecated) ``--quiet`` long form of ``-q`` (:issue:`7766`).\n\nIt also includes some small enhancements:\n\n-  ``help`` and ``fish_config`` work correctly when fish is running in a Chrome OS Crostini Linux VM (:issue:`7789`).\n-  The history file can be made a symbolic link without it being overwritten (:issue:`7754`), matching a similar improvement for the universal variable file in 3.2.0.\n-  An unhelpful error (\"access: No error\"), seen on Cygwin, is no longer produced (:issue:`7785`).\n-  Improvements to the ``rsync`` completions (:issue:`7763`), some completion descriptions (:issue:`7788`), and completions that use IP address (:issue:`7787`).\n-  Improvements to the appearance of ``fish_config`` (:issue:`7811`).\n\nIf you are upgrading from version 3.1.2 or before, please also review\nthe release notes for 3.2.0 (included below).\n\n--------------\n\nfish 3.2.0 (released March 1, 2021)\n===================================\n\nNotable improvements and fixes\n------------------------------\n\n-  **Undo and redo support** for the command-line editor and pager search (:issue:`1367`). By default, undo is bound to Control+Z, and redo to Alt+/.\n-  **Builtins can now output before all data is read**. For example, ``string replace`` no longer has to read all of stdin before it can begin to output.\n   This makes it usable also for pipes where the previous command hasn't finished yet, like::\n\n    # Show all dmesg lines related to \"usb\"\n    dmesg -w | string match '*usb*'\n\n-  **Prompts will now be truncated** instead of replaced with ``\"> \"`` if they are wider than the terminal (:issue:`904`).\n   For example::\n\n     ~/dev/build/fish-shell-git/src/fish-shell/build (makepkg)>\n\n   will turn into::\n\n     …h-shell/build (makepkg)>\n\n   It is still possible to react to the ``COLUMNS`` variable inside the prompt to implement smarter behavior.\n-  **fish completes ambiguous completions** after pressing :kbd:`tab` even when they\n   have a common prefix, without the user having to press :kbd:`tab` again\n   (:issue:`6924`).\n-  fish is less aggressive about resetting terminal modes, such as flow control, after every command.\n   Although flow control remains off by default, enterprising users can now enable it with\n   ``stty`` (:issue:`2315`, :issue:`7704`).\n-  A new **\"fish_add_path\" helper function to add paths to $PATH** without producing duplicates,\n   to be used interactively or in ``config.fish`` (:issue:`6960`, :issue:`7028`).\n   For example::\n\n     fish_add_path /opt/mycoolthing/bin\n\n   will add /opt/mycoolthing/bin to the beginning of $fish_user_path without creating duplicates,\n   so it can be called safely from config.fish or interactively, and the path will just be there, once.\n-  **Better errors with \"test\"** (:issue:`6030`)::\n\n    > test 1 = 2 and echo true or false\n    test: Expected a combining operator like '-a' at index 4\n    1 = 2 and echo true or echo false\n          ^\n\n   This includes numbering the index from 1 instead of 0, like fish lists.\n-  **A new theme for the documentation and Web-based configuration** (:issue:`6500`, :issue:`7371`, :issue:`7523`), matching the design on fishshell.com.\n-  ``fish --no-execute`` **will no longer complain about unknown commands**\n   or non-matching wildcards, as these could be defined differently at\n   runtime (especially for functions). This makes it usable as a static syntax checker (:issue:`977`).\n-  ``string match --regex`` now integrates **named PCRE2 capture groups as fish variables**, allowing variables to be set directly from ``string match`` (:issue:`7459`). To support this functionality, ``string`` is now a reserved word and can no longer be wrapped in a function.\n-  Globs and other **expansions are limited to 512,288 results** (:issue:`7226`). Because operating systems limit the number of arguments to commands, larger values are unlikely to work anyway, and this helps to avoid hangs.\n-  A new **\"fish for bash users\" documentation page** gives a quick overview of the scripting differences between bash and fish (:issue:`2382`), and the completion tutorial has also been moved out into its own document (:issue:`6709`).\n\nSyntax changes and new commands\n-------------------------------\n\n-  Range limits in index range expansions like ``$x[$start..$end]`` may be omitted: ``$start`` and ``$end`` default to 1 and -1 (the last item) respectively (:issue:`6574`)::\n\n     echo $var[1..]\n     echo $var[..-1]\n     echo $var[..]\n\n   All print the full list ``$var``.\n-  When globbing, a segment which is exactly ``**`` may now match zero directories. For example ``**/foo`` may match ``foo`` in the current directory (:issue:`7222`).\n\nScripting improvements\n----------------------\n\n-  The ``type``, ``_`` (gettext), ``.`` (source) and ``:`` (no-op) functions\n   are now implemented builtins for performance purposes (:issue:`7342`, :issue:`7036`, :issue:`6854`).\n-  ``set`` and backgrounded jobs no longer overwrite ``$pipestatus`` (:issue:`6820`), improving its use in command substitutions (:issue:`6998`).\n-  Computed (\"electric\") variables such as ``status`` are now only global in scope, so ``set -Uq status`` returns false (:issue:`7032`).\n-  The output for ``set --show`` has been shortened, only mentioning the scopes in which a variable exists (:issue:`6944`).\n   In addition, it now shows if a variable is a path variable.\n-  A new variable, ``fish_kill_signal``, is set to the signal that terminated the last foreground job, or ``0`` if the job exited normally (:issue:`6824`, :issue:`6822`).\n-  A new subcommand, ``string pad``, allows extending strings to a given width (:issue:`7340`, :issue:`7102`).\n-  ``string sub`` has a new ``--end`` option to specify the end index of\n   a substring (:issue:`6765`, :issue:`5974`).\n-  ``string split`` has a new ``--fields`` option to specify fields to\n   output, similar to ``cut -f`` (:issue:`6770`).\n-  ``string trim`` now also trims vertical tabs by default (:issue:`6795`).\n-  ``string replace`` no longer prints an error if a capturing group wasn't matched, instead treating it as empty (:issue:`7343`).\n-  ``string`` subcommands now quit early when used with ``--quiet`` (:issue:`7495`).\n-  ``string repeat`` now handles multiple arguments, repeating each one (:issue:`5988`).\n-  ``printf`` no longer prints an error if not given an argument (not\n   even a format string).\n-  The ``true`` and ``false`` builtins ignore any arguments, like other shells (:issue:`7030`).\n-  ``fish_indent`` now removes unnecessary quotes in simple cases (:issue:`6722`)\n   and gained a ``--check`` option to just check if a file is indented correctly (:issue:`7251`).\n-  ``fish_indent`` indents continuation lines that follow a line ending in a backslash, ``|``, ``&&`` or ``||``.\n-  ``pushd`` only adds a directory to the stack if changing to it was successful (:issue:`6947`).\n-  A new ``fish_job_summary`` function is called whenever a\n   background job stops or ends, or any job terminates from a signal (:issue:`6959`, :issue:`2727`, :issue:`4319`).\n   The default behaviour can now be customized by redefining it.\n-  ``status`` gained new ``dirname`` and ``basename`` convenience subcommands\n   to get just the directory to the running script or the name of it,\n   to simplify common tasks such as running ``(dirname (status filename))`` (:issue:`7076`, :issue:`1818`).\n-  Broken pipelines are now handled more smoothly; in particular, bad redirection mid-pipeline\n   results in the job continuing to run but with the broken file descriptor replaced with a closed\n   file descriptor. This allows better error recovery and is more in line with other shells'\n   behaviour (:issue:`7038`).\n-  ``jobs --quiet PID`` no longer prints \"no suitable job\" if the job for PID does not exist (eg because it has finished) (:issue:`6809`, :issue:`6812`).\n-  ``jobs`` now shows continued child processes correctly (:issue:`6818`)\n-  ``disown`` should no longer create zombie processes when job control is off, such as in ``config.fish`` (:issue:`7183`).\n-  ``command``, ``jobs`` and ``type`` builtins support ``--query`` as the long form of ``-q``, matching other builtins.\n   The long form ``--quiet`` is deprecated (:issue:`7276`).\n-  ``argparse`` no longer requires a short flag letter for long-only options (:issue:`7585`)\n   and only prints a backtrace with invalid options to argparse itself (:issue:`6703`).\n-  ``argparse`` now passes the validation variables (e.g. ``$_flag_value``) as local-exported variables,\n   avoiding the need for ``--no-scope-shadowing`` in validation functions.\n-  ``complete`` takes the first argument as the name of the command if the ``--command``/``-c`` option is not used,\n   so ``complete git`` is treated like ``complete --command git``,\n   and it can show the loaded completions for specific commands with ``complete COMMANDNAME`` (:issue:`7321`).\n-  ``set_color -b`` (without an argument) no longer prints an error message, matching other invalid invocations of this command (:issue:`7154`).\n-  ``exec`` no longer produces a syntax error when the command cannot be found (:issue:`6098`).\n-  ``set --erase`` and ``abbr --erase`` can now erase multiple things in one go, matching ``functions --erase`` (:issue:`7377`).\n-  ``abbr --erase`` no longer prints errors when used with no arguments or on an unset abbreviation (:issue:`7376`, :issue:`7732`).\n-  ``test -t``, for testing whether file descriptors are connected to a terminal, works for file descriptors 0, 1, and 2 (:issue:`4766`).\n   It can still return incorrect results in other cases (:issue:`1228`).\n-  Trying to execute scripts with Windows line endings (CRLF) produces a sensible error (:issue:`2783`).\n-  Trying to execute commands with arguments that exceed the operating system limit now produces a specific error (:issue:`6800`).\n-  An ``alias`` that delegates to a command with the same name no longer triggers an error about recursive completion (:issue:`7389`).\n-  ``math`` now has a ``--base`` option to output the result in hexadecimal or octal (:issue:`7496`) and produces more specific error messages (:issue:`7508`).\n-  ``math`` learned bitwise functions ``bitand``, ``bitor`` and ``bitxor``, used like ``math \"bitand(0xFE, 5)\"`` (:issue:`7281`).\n-  ``math`` learned tau for those who don't like typing \"2 * pi\".\n-  Failed redirections will now set ``$status`` (:issue:`7540`).\n-  fish sets exit status in a more consistent manner after errors, including invalid expansions like ``$foo[``.\n-  Using ``read --silent`` while fish is in private mode was adding these potentially-sensitive entries to the history; this has been fixed (:issue:`7230`).\n-  ``read`` can now read interactively from other files, and can be used to read from the terminal via ``read </dev/tty`` (if the operating system provides ``/dev/tty``) (:issue:`7358`).\n-  A new ``fish_status_to_signal`` function for transforming exit statuses to signal names has been added (:issue:`7597`, :issue:`7595`).\n-  The fallback ``realpath`` builtin supports the ``-s``/``--no-symlinks`` option, like GNU realpath (:issue:`7574`).\n-  ``functions`` and ``type`` now explain when a function was defined via ``source`` instead of just saying ``Defined in -``.\n-  Significant performance improvements when globbing, appending to variables or in ``math``.\n-  ``echo`` no longer interprets options at the beginning of an argument (eg ``echo \"-n foo\"``) (:issue:`7614`).\n-  fish now finds user configuration even if the ``HOME`` environment variable is not set (:issue:`7620`).\n-  fish no longer crashes when started from a Windows-style working directory (eg ``F:\\path``) (:issue:`7636`).\n-  ``fish -c`` now reads the remaining arguments into ``$argv`` (:issue:`2314`).\n-  The ``pwd`` command supports the long options ``--logical`` and ``--physical``, matching other implementations (:issue:`6787`).\n-  ``fish --profile`` now only starts profiling after fish is ready to execute commands (all configuration is completed). There is a new ``--profile-startup`` option that only profiles the startup and configuration process (:issue:`7648`).\n-  Builtins return a maximum exit status of 255, rather than potentially overflowing. In particular, this affects ``exit``, ``return``, ``functions --query``, and ``set --query`` (:issue:`7698`, :issue:`7702`).\n- It is no longer an error to run builtin with closed stdin. For example ``count <&-`` now prints 0, instead of failing.\n- Blocks, functions, and builtins no longer permit redirecting to file descriptors other than 0 (standard input), 1 (standard output) and 2 (standard error). For example, ``echo hello >&5`` is now an error. This prevents corruption of internal state (:issue:`3303`).\n\nInteractive improvements\n------------------------\n\n-  fish will now always attempt to become process group leader in interactive mode (:issue:`7060`). This helps avoid hangs in certain circumstances, and allows tmux's current directory introspection to work (:issue:`5699`).\n-  The interactive reader now allows ending a line in a logical operators (``&&`` and ``||``) instead of complaining about a missing command. (This was already syntactically valid, but interactive sessions didn't know about it yet).\n-  The prompt is reprinted after a background job exits (:issue:`1018`).\n-  fish no longer inserts a space after a completion ending in ``.``, ``,`` or ``-`` is accepted, improving completions for tools that provide dynamic completions (:issue:`6928`).\n-  If a filename is invalid when first pressing :kbd:`tab`, but becomes valid, it will be completed properly on the next attempt (:issue:`6863`).\n- ``help string match/replace/<subcommand>`` will show the help for string subcommands (:issue:`6786`).\n-  ``fish_key_reader`` sets the exit status to 0 when used with ``--help`` or ``--version`` (:issue:`6964`).\n-  ``fish_key_reader`` and ``fish_indent`` send output from ``--version`` to standard output, matching other fish binaries (:issue:`6964`).\n-  A new variable ``$status_generation`` is incremented only when the previous command produces an exit status (:issue:`6815`). This can be used, for example, to check whether a failure status is a holdover due to a background job, or actually produced by the last run command.\n-  ``fish_greeting`` is now a function that reads a variable of the same name, and defaults to setting it globally.\n   This removes a universal variable by default and helps with updating the greeting.\n   However, to disable the greeting it is now necessary to explicitly specify universal scope (``set -U fish_greeting``) or to disable it in config.fish (:issue:`7265`).\n-  Events are properly emitted after a job is cancelled (:issue:`2356`).\n-  ``fish_preexec`` and ``fish_postexec`` events are no longer triggered for empty commands (:issue:`4829`, :issue:`7085`).\n-  Functions triggered by the ``fish_exit`` event are correctly run when the terminal is closed or the shell receives SIGHUP (:issue:`7014`).\n-  The ``fish_prompt`` event no longer fires when ``read`` is used. If\n   you need a function to run any time ``read`` is invoked by a script,\n   use the new ``fish_read`` event instead (:issue:`7039`).\n-  A new ``fish_posterror`` event is emitted when attempting to execute a command with syntax errors (:issue:`6880`, :issue:`6816`).\n-  The debugging system has now fully switched from the old numbered level to the new named category system introduced in 3.1. A number of new debugging categories have been added, including ``config``, ``path``, ``reader`` and ``screen`` (:issue:`6511`). See the output of ``fish --print-debug-categories`` for the full list.\n-  The warning about read-only filesystems has been moved to a new \"warning-path\" debug category\n   and can be disabled by setting a debug category of ``-warning-path`` (:issue:`6630`)::\n\n     fish --debug=-warning-path\n\n-  The enabled debug categories are now printed on shell startup (:issue:`7007`).\n-  The ``-o`` short option to fish, for ``--debug-output``, works correctly instead of producing an\n   invalid option error (:issue:`7254`).\n-  fish's debugging can now also be enabled via ``FISH_DEBUG`` and ``FISH_DEBUG_OUTPUT`` environment variables.\n   This helps with debugging when no commandline options can be passed, like when fish is called in a shebang (:issue:`7359`).\n-  Abbreviations are now expanded after all command terminators (eg ``;`` or ``|``), not just space,\n   as in fish 2.7.1 and before (:issue:`6970`), and after closing a command substitution (:issue:`6658`).\n-  The history file is now created with user-private permissions,\n   matching other shells (:issue:`6926`). The directory containing the history\n   file was already private, so there should not have been any private data\n   revealed.\n-  The output of ``time`` is now properly aligned in all cases (:issue:`6726`, :issue:`6714`) and no longer depends on locale (:issue:`6757`).\n-  The command-not-found handling has been simplified.\n   When it can't find a command, fish now just executes a function called ``fish_command_not_found``\n   instead of firing an event, making it easier to replace and reason about.\n   Previously-defined ``__fish_command_not_found_handler`` functions with an appropriate event listener will still work (:issue:`7293`).\n-  :kbd:`ctrl-c` handling has been reimplemented in C++ and is therefore quicker (:issue:`5259`), no longer occasionally prints an \"unknown command\" error (:issue:`7145`) or overwrites multiline prompts (:issue:`3537`).\n-  :kbd:`ctrl-c` no longer kills background jobs for which job control is\n   disabled, matching POSIX semantics (:issue:`6828`, :issue:`6861`).\n-  Autosuggestions work properly after :kbd:`ctrl-c` cancels the current commmand line (:issue:`6937`).\n-  History search is now case-insensitive unless the search string contains an uppercase character (:issue:`7273`).\n-  ``fish_update_completions`` gained a new ``--keep`` option, which improves speed by skipping completions that already exist (:issue:`6775`, :issue:`6796`).\n-  Aliases containing an embedded backslash appear properly in the output of ``alias`` (:issue:`6910`).\n-  ``open`` no longer hangs indefinitely on certain systems, as a bug in ``xdg-open`` has been worked around (:issue:`7215`).\n-  Long command lines no longer add a blank line after execution (:issue:`6826`) and behave better with :kbd:`backspace` (:issue:`6951`).\n-  ``functions -t`` works like the long option ``--handlers-type``, as documented, instead of producing an error (:issue:`6985`).\n-  History search now flashes when it found no more results (:issue:`7362`)\n-  fish now creates the path in the environment variable ``XDG_RUNTIME_DIR`` if it does not exist, before using it for runtime data storage (:issue:`7335`).\n-  ``set_color --print-colors`` now also respects the bold, dim, underline, reverse, italic and background modifiers, to better show their effect (:issue:`7314`).\n-  The fish Web configuration tool (``fish_config``) shows prompts correctly on Termux for Android (:issue:`7298`) and detects Windows Services for Linux 2 properly (:issue:`7027`). It no longer shows the ``history`` variable as it may be too large (one can use the History tab instead). It also starts the browser in another thread, avoiding hangs in some circumstances, especially with Firefox's Developer Edition (:issue:`7158`). Finally, a bug in the Source Code Pro font may cause browsers to hang, so this font is no longer chosen by default (:issue:`7714`).\n-  ``funcsave`` gained a new ``--directory`` option to specify the location of the saved function (:issue:`7041`).\n-  ``help`` works properly on MSYS2 (:issue:`7113`) and only uses ``cmd.exe`` if running on WSL (:issue:`6797`).\n-  Resuming a piped job by its number, like ``fg %1``, works correctly (:issue:`7406`). Resumed jobs show the correct title in the terminal emulator (:issue:`7444`).\n-  Commands run from key bindings now use the same TTY modes as normal commands (:issue:`7483`).\n-  Autosuggestions from history are now case-sensitive (:issue:`3978`).\n-  ``$status`` from completion scripts is no longer passed outside the completion, which keeps the status display in the prompt as the last command's status (:issue:`7555`).\n-  Updated localisations for pt_BR (:issue:`7480`).\n-  ``fish_trace`` output now starts with ``->`` (like ``fish --profile``), making the depth more visible (:issue:`7538`).\n-  Resizing the terminal window no longer produces a corrupted prompt (:issue:`6532`, :issue:`7404`).\n-  ``functions`` produces an error rather than crashing on certain invalid arguments (:issue:`7515`).\n-  A crash in completions with inline variable assignment (eg ``A= b``) has been fixed (:issue:`7344`).\n-  ``fish_private_mode`` may now be changed dynamically using ``set`` (:issue:`7589`), and history is kept in memory in private mode (but not stored permanently) (:issue:`7590`).\n-  Commands with leading spaces may be retrieved from history with up-arrow until a new command is run, matching zsh's ``HIST_IGNORE_SPACE`` (:issue:`1383`).\n-  Importing bash history or reporting errors with recursive globs (``**``) no longer hangs (:issue:`7407`, :issue:`7497`).\n-  ``bind`` now shows ``\\x7f`` for the del key instead of a literal DEL character (:issue:`7631`)\n-  Paths containing variables or tilde expansion are only suggested when they are still valid (:issue:`7582`).\n-  Syntax highlighting can now color a command as invalid even if executed quickly (:issue:`5912`).\n-  Redirection targets are no longer highlighted as error if they contain variables which will likely be defined by the current commandline (:issue:`6654`).\n-  fish is now more resilient against broken terminal modes (:issue:`7133`, :issue:`4873`).\n-  fish handles being in control of the TTY without owning its own process group better, avoiding some hangs in special configurations (:issue:`7388`).\n-  Keywords can now be colored differently by setting the ``fish_color_keyword`` variable (``fish_color_command`` is used as a fallback) (:issue:`7678`).\n-  Just like ``fish_indent``, the interactive reader will indent continuation lines that follow a line ending in a backslash, ``|``, ``&&`` or ``||`` (:issue:`7694`).\n-  Commands with a trailing escaped space are saved in history correctly (:issue:`7661`).\n-  ``fish_prompt`` no longer mangles Unicode characters in the private-use range U+F600-U+F700. (:issue:`7723`).\n-  The universal variable file, ``fish_variables``, can be made a symbolic link without it being overwritten (:issue:`7466`).\n-  fish is now more resilient against ``mktemp`` failing (:issue:`7482`).\n\n\nNew or improved bindings\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  As mentioned above, new special input functions ``undo`` (:kbd:`ctrl-_` or :kbd:`ctrl-z`) and ``redo`` (:kbd:`alt-/`) can be used to revert changes to the command line or the pager search field (:issue:`6570`).\n-  :kbd:`ctrl-z` is now available for binding (:issue:`7152`).\n-  Additionally, using the ``cancel`` special input function (bound to :kbd:`escape` by default) right after fish picked an unambiguous completion will undo that (:issue:`7433`).\n- ``fish_clipboard_paste`` (:kbd:`ctrl-v`) trims indentation from multiline commands, because fish already indents (:issue:`7662`).\n-  Vi mode bindings now support ``dh``, ``dl``, ``c0``, ``cf``, ``ct``, ``cF``, ``cT``, ``ch``, ``cl``, ``y0``, ``ci``, ``ca``, ``yi``, ``ya``, ``di``, ``da``, ``d;``, ``d,``, ``o``, ``O`` and Control+left/right keys to navigate by word (:issue:`6648`, :issue:`6755`, :issue:`6769`, :issue:`7442`, :issue:`7516`).\n-  Vi mode bindings support :kbd:`~` (tilde) to toggle the case of the selected character (:issue:`6908`).\n-  Functions ``up-or-search`` and ``down-or-search`` (:kbd:`up` and :kbd:`down`) can cross empty lines, and don't activate search mode if the search fails, which makes them easier to use to move between lines in some situations.\n-  If history search fails to find a match, the cursor is no longer moved. This is useful when accidentally starting a history search on a multi-line commandline.\n-  The special input function ``beginning-of-history`` (:kbd:`pageup`) now moves to the oldest search instead of the youngest - that's ``end-of-history`` (:kbd:`pagedown`).\n-  A new special input function ``forward-single-char`` moves one character to the right, and if an autosuggestion is available, only take a single character from it (:issue:`7217`, :issue:`4984`).\n-  Special input functions can now be joined with ``or`` as a modifier (adding to ``and``), though only some commands set an exit status (:issue:`7217`). This includes ``suppress-autosuggestion`` to reflect whether an autosuggestion was suppressed (:issue:`1419`)\n-  A new function ``__fish_preview_current_file``, bound to :kbd:`alt-o`, opens the\n   current file at the cursor in a pager (:issue:`6838`, :issue:`6855`).\n-  ``edit_command_buffer`` (:kbd:`alt-e` and :kbd:`alt-v`) passes the cursor position\n   to the external editor if the editor is recognized (:issue:`6138`, :issue:`6954`).\n-  ``__fish_prepend_sudo`` (:kbd:`alt-s`) now toggles a ``sudo`` prefix (:issue:`7012`) and avoids shifting the cursor (:issue:`6542`).\n-  ``__fish_prepend_sudo`` (:kbd:`alt-s`) now uses the previous commandline if the current one is empty,\n   to simplify rerunning the previous command with ``sudo`` (:issue:`7079`).\n-  ``__fish_toggle_comment_commandline`` (:kbd:`alt-#`) now uncomments and presents the last comment\n   from history if the commandline is empty (:issue:`7137`).\n-  ``__fish_whatis_current_token`` (:kbd:`alt-w`) prints descriptions for functions and builtins (:issue:`7191`, :issue:`2083`).\n-  The definition of \"word\" and \"bigword\" for movements was refined, fixing (eg) vi mode's behavior with :kbd:`e` on the second-to-last char, and bigword's behavior with single-character words and non-blank non-graphical characters (:issue:`7353`, :issue:`7354`, :issue:`4025`, :issue:`7328`, :issue:`7325`)\n-  fish's clipboard bindings now also support Windows Subsystem for Linux via PowerShell and clip.exe (:issue:`7455`, :issue:`7458`) and will properly copy newlines in multi-line commands.\n-  Using the ``*-jump`` special input functions before typing anything else no longer crashes fish.\n-  Completing variable overrides (``foo=bar``) could replace the entire thing with just the completion in some circumstances. This has been fixed (:issue:`7398`).\n\nImproved prompts\n^^^^^^^^^^^^^^^^\n\n-  The default and example prompts print the correct exit status for\n   commands prefixed with ``not`` (:issue:`6566`).\n-  git prompts include all untracked files in the repository, not just those in the current\n   directory (:issue:`6086`).\n-  The git prompts correctly show stash states (:issue:`6876`, :issue:`7136`) and clean states (:issue:`7471`).\n-  The Mercurial prompt correctly shows untracked status (:issue:`6906`), and by default only shows the branch for performance reasons.\n   A new variable ``$fish_prompt_hg_show_informative_status`` can be set to enable more information.\n-  The ``fish_vcs_prompt`` passes its arguments to the various VCS prompts that it calls (:issue:`7033`).\n-  The Subversion prompt was broken in a number of ways in 3.1.0 and has been restored (:issue:`6715`, :issue:`7278`).\n-  A new helper function ``fish_is_root_user`` simplifies checking for superuser privilege (:issue:`7031`, :issue:`7123`).\n-  New colorschemes - ``ayu Light``, ``ayu Dark`` and ``ayu Mirage`` (:issue:`7596`).\n-  Bugs related to multiline prompts, including repainting (:issue:`5860`) or navigating directory history (:issue:`3550`) leading to graphical glitches have been fixed.\n-  The ``nim`` prompt now handles vi mode better (:issue:`6802`)\n\nImproved terminal support\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  A new variable, ``fish_vi_force_cursor``, can be set to force ``fish_vi_cursor`` to attempt changing the cursor\n   shape in vi mode, regardless of terminal (:issue:`6968`). The ``fish_vi_cursor`` option ``--force-iterm`` has been deprecated.\n-  ``diff`` will now colourize output, if supported (:issue:`7308`).\n-  Autosuggestions appear when the cursor passes the right prompt (:issue:`6948`) or wraps to the next line (:issue:`7213`).\n-  The cursor shape in Vi mode changes properly in Windows Terminal (:issue:`6999`, :issue:`6478`).\n-  The spurious warning about terminal size in small terminals has been removed (:issue:`6980`).\n-  Dynamic titles are now enabled in Alacritty (:issue:`7073`) and emacs' vterm (:issue:`7122`).\n-  Current working directory updates are enabled in foot (:issue:`7099`) and WezTerm (:issue:`7649`).\n-  The width computation for certain emoji agrees better with terminals (especially flags). (:issue:`7237`).\n-  Long command lines are wrapped in all cases, instead of sometimes being put on a new line (:issue:`5118`).\n-  The pager is properly rendered with long command lines selected (:issue:`2557`).\n-  Sessions with right prompts can be resized correctly in terminals that handle reflow, like GNOME Terminal (and other VTE-based terminals), upcoming Konsole releases and Alacritty. This detection can be overridden with the new ``fish_handle_reflow`` variable (:issue:`7491`).\n-  fish now sets terminal modes sooner, which stops output from appearing before the greeting and prompt are ready (:issue:`7489`).\n-  Better detection of new Konsole versions for true color support and cursor shape changing.\n-  fish no longer attempts to modify the terminal size via ``TIOCSWINSZ``, improving compatibility with Kitty (:issue:`6994`).\n\nCompletions\n^^^^^^^^^^^\n\n-  Added completions for\n\n   -  ``7z``, ``7za`` and ``7zr`` (:issue:`7220`)\n   -  ``alias`` (:issue:`7035`)\n   -  ``alternatives`` (:issue:`7616`)\n   -  ``apk`` (:issue:`7108`)\n   -  ``asciidoctor`` (:issue:`7000`)\n   -  ``avifdec`` and ``avifenc`` (:issue:`7674`)\n   -  ``bluetoothctl`` (:issue:`7438`)\n   -  ``cjxl`` and ``djxl`` (:issue:`7673`)\n   -  ``cmark`` (:issue:`7000`)\n   -  ``create_ap`` (:issue:`7096`)\n   -  ``deno`` (:issue:`7138`)\n   -  ``dhclient`` (:issue:`6684`)\n   -  Postgres-related commands ``dropdb``, ``createdb``, ``pg_restore``, ``pg_dump`` and\n      ``pg_dumpall`` (:issue:`6620`)\n   -  ``dotnet`` (:issue:`7558`)\n   -  ``downgrade`` (:issue:`6751`)\n   -  ``gapplication``, ``gdbus``, ``gio`` and ``gresource`` (:issue:`7300`)\n   -  ``gh`` (:issue:`7112`)\n   -  ``gitk``\n   -  ``groups`` (:issue:`6889`)\n   -  ``hashcat`` (:issue:`7746`)\n   -  ``hikari`` (:issue:`7083`)\n   -  ``icdiff`` (:issue:`7503`)\n   -  ``imv`` (:issue:`6675`)\n   -  ``john`` (:issue:`7746`)\n   -  ``julia`` (:issue:`7468`)\n   -  ``k3d`` (:issue:`7202`)\n   -  ``ldapsearch`` (:issue:`7578`)\n   -  ``lightdm`` and ``dm-tool`` (:issue:`7624`)\n   -  ``losetup`` (:issue:`7621`)\n   -  ``micro`` (:issue:`7339`)\n   -  ``mpc`` (:issue:`7169`)\n   -  Metasploit's ``msfconsole``, ``msfdb`` and ``msfvenom`` (:issue:`6930`)\n   -  ``mtr`` (:issue:`7638`)\n   -  ``mysql`` (:issue:`6819`)\n   -  ``ncat``, ``nc.openbsd``, ``nc.traditional`` and ``nmap`` (:issue:`6873`)\n   -  ``openssl`` (:issue:`6845`)\n   -  ``prime-run`` (:issue:`7241`)\n   -  ``ps2pdf{12,13,14,wr}`` (:issue:`6673`)\n   -  ``pyenv`` (:issue:`6551`)\n   -  ``rst2html``, ``rst2html4``, ``rst2html5``, ``rst2latex``,\n      ``rst2man``, ``rst2odt``, ``rst2pseudoxml``, ``rst2s5``,\n      ``rst2xetex``, ``rst2xml`` and ``rstpep2html`` (:issue:`7019`)\n   -  ``spago`` (:issue:`7381`)\n   -  ``sphinx-apidoc``, ``sphinx-autogen``, ``sphinx-build`` and\n      ``sphinx-quickstart`` (:issue:`7000`)\n   -  ``strace`` (:issue:`6656`)\n   -  systemd's ``bootctl``, ``coredumpctl``, ``hostnamectl`` (:issue:`7428`), ``homectl`` (:issue:`7435`), ``networkctl`` (:issue:`7668`) and ``userdbctl`` (:issue:`7667`)\n   -  ``tcpdump`` (:issue:`6690`)\n   -  ``tig``\n   -  ``traceroute`` and ``tracepath`` (:issue:`6803`)\n   -  ``windscribe`` (:issue:`6788`)\n   -  ``wireshark``, ``tshark``, and ``dumpcap``\n   -  ``xbps-*`` (:issue:`7239`)\n   -  ``xxhsum``, ``xxh32sum``, ``xxh64sum`` and ``xxh128sum`` (:issue:`7103`)\n   -  ``yadm`` (:issue:`7100`)\n   -  ``zopfli`` and ``zopflipng`` (:issue:`6872`)\n\n-  Lots of improvements to completions, including:\n\n   -  ``git`` completions can complete the right and left parts of a commit range like ``from..to`` or ``left...right``.\n   -  Completion scripts for custom Git subcommands like ``git-xyz`` are now loaded with Git completions. The completions can now be defined directly on the subcommand (using ``complete git-xyz``), and completion for ``git xyz`` will work. (:issue:`7075`, :issue:`7652`, :issue:`4358`)\n   -  ``make`` completions no longer second-guess make's file detection, fixing target completion in some cases (:issue:`7535`).\n   -  Command completions now correctly print the description even if the command was fully matched (like in ``ls<TAB>``).\n   -  ``set`` completions no longer hide variables starting with ``__``, they are sorted last instead.\n\n-  Improvements to the manual page completion generator (:issue:`7086`, :issue:`6879`, :issue:`7187`).\n-  Significant performance improvements to completion of the available commands (:issue:`7153`), especially on macOS Big Sur where there was a significant regression (:issue:`7365`, :issue:`7511`).\n-  Suffix completion using ``__fish_complete_suffix`` uses the same fuzzy matching logic as normal file completion, and completes any file but sorts files with matching suffix first (:issue:`7040`, :issue:`7547`). Previously, it only completed files with matching suffix.\n\nFor distributors\n----------------\n\n-  fish has a new interactive test driver based on pexpect, removing the optional dependency on expect (and adding an optional dependency on pexpect) (:issue:`5451`, :issue:`6825`).\n-  The CHANGELOG was moved to restructured text, allowing it to be included in the documentation (:issue:`7057`).\n-  fish handles ncurses installed in a non-standard prefix better (:issue:`6600`, :issue:`7219`), and uses variadic tparm on NetBSD curses (:issue:`6626`).\n-  The Web-based configuration tool no longer uses an obsolete Angular version (:issue:`7147`).\n-  The fish project has adopted the Contributor Covenant code of conduct (:issue:`7151`).\n\nDeprecations and removed features\n---------------------------------\n\n-  The ``fish_color_match`` variable is no longer used. (Previously this controlled the color of matching quotes and parens when using ``read``).\n-  fish 3.2.0 will be the last release in which the redirection to standard error with the ``^`` character is enabled.\n   The ``stderr-nocaret`` feature flag will be changed to \"on\" in future releases.\n-  ``string`` is now a reserved word and cannot be used for function names (see above).\n-  ``fish_vi_cursor``'s option ``--force-iterm`` has been deprecated (see above).\n-  ``command``, ``jobs`` and ``type`` long-form option ``--quiet`` is deprecated in favor of ``--query`` (see above).\n-  The ``fish_command_not_found`` event is no longer emitted, instead there is a function of that name.\n   By default it will call a previously-defined ``__fish_command_not_found_handler``. To emit the event manually use ``emit fish_command_not_found``.\n-  The ``fish_prompt`` event no longer fires when ``read`` is used. If\n   you need a function to run any time ``read`` is invoked by a script,\n   use the new ``fish_read`` event instead (:issue:`7039`).\n-  To disable the greeting message permanently it is no longer enough to just run ``set fish_greeting`` interactively as it is\n   no longer implicitly a universal variable. Use ``set -U fish_greeting`` or disable it in config.fish with ``set -g fish_greeting``.\n-  The long-deprecated and non-functional ``-m``/``--read-mode`` options to ``read`` were removed in 3.1b1. Using the short form, or a never-implemented ``-B`` option, no longer crashes fish (:issue:`7659`).\n-  With the addition of new categories for debug options, the old numbered debugging levels have been removed.\n\nFor distributors and developers\n-------------------------------\n\n-  fish source tarballs are now distributed using the XZ compression\n   method (:issue:`5460`).\n-  The fish source tarball contains an example FreeDesktop entry and icon.\n-  The CMake variable ``MAC_CODESIGN_ID`` can now be set to \"off\" to disable code-signing (:issue:`6952`, :issue:`6792`).\n-  Building on on macOS earlier than 10.13.6 succeeds, instead of failing on code-signing (:issue:`6791`).\n-  The pkg-config file now uses variables to ensure paths used are portable across prefixes.\n-  The default values for the ``extra_completionsdir``, ``extra_functionsdir``\n   and ``extra_confdir`` options now use the installation prefix rather than ``/usr/local`` (:issue:`6778`).\n-  A new CMake variable ``FISH_USE_SYSTEM_PCRE2`` controls whether fish\n   builds with the system-installed PCRE2, or the version it bundles. By\n   default it prefers the system library if available, unless Mac\n   codesigning is enabled (:issue:`6952`).\n-  Running the full interactive test suite now requires Python 3.5+ and the pexpect package (:issue:`6825`); the expect package is no longer required.\n-  Support for Python 2 in fish's tools (``fish_config`` and the manual page completion generator) is no longer guaranteed. Please use Python 3.5 or later (:issue:`6537`).\n-  The Web-based configuration tool is compatible with Python 3.10  (:issue:`7600`) and no longer requires Python's distutils package (:issue:`7514`).\n-  fish 3.2 is the last release to support Red Hat Enterprise Linux & CentOS version 6.\n\n--------------\n\nfish 3.1.2 (released April 29, 2020)\n====================================\n\nThis release of fish fixes a major issue discovered in fish 3.1.1:\n\n-  Commands such as ``fzf`` and ``enhancd``, when used with ``eval``,\n   would hang. ``eval`` buffered output too aggressively, which has been\n   fixed (:issue:`6955`).\n\nIf you are upgrading from version 3.0.0 or before, please also review\nthe release notes for 3.1.1, 3.1.0 and 3.1b1 (included below).\n\n--------------\n\nfish 3.1.1 (released April 27, 2020)\n====================================\n\nThis release of fish fixes a number of major issues discovered in fish\n3.1.0.\n\n-  Commands which involve ``. ( ... | psub)`` now work correctly, as a\n   bug in the ``function --on-job-exit`` option has been fixed (:issue:`6613`).\n-  Conflicts between upstream packages for ripgrep and bat, and the fish\n   packages, have been resolved (:issue:`5822`).\n-  Starting fish in a directory without read access, such as via ``su``,\n   no longer crashes (:issue:`6597`).\n-  Glob ordering changes which were introduced in 3.1.0 have been\n   reverted, returning the order of globs to the previous state (:issue:`6593`).\n-  Redirections using the deprecated caret syntax to a file descriptor\n   (eg ``^&2``) work correctly (:issue:`6591`).\n-  Redirections that append to a file descriptor (eg ``2>>&1``) work\n   correctly (:issue:`6614`).\n-  Building fish on macOS (:issue:`6602`) or with new versions of GCC (:issue:`6604`,\n   :issue:`6609`) is now successful.\n-  ``time`` is now correctly listed in the output of ``builtin -n``, and\n   ``time --help`` works correctly (:issue:`6598`).\n-  Exported universal variables now update properly (:issue:`6612`).\n-  ``status current-command`` gives the expected output when used with\n   an environment override - that is, ``F=B status current-command``\n   returns ``status`` instead of ``F=B`` (:issue:`6635`).\n-  ``test`` no longer crashes when used with “``nan``” or “``inf``”\n   arguments, erroring out instead (:issue:`6655`).\n-  Copying from the end of the command line no longer crashes fish\n   (:issue:`6680`).\n-  ``read`` no longer removes multiple separators when splitting a\n   variable into a list, restoring the previous behaviour from fish 3.0\n   and before (:issue:`6650`).\n-  Functions using ``--on-job-exit`` and ``--on-process-exit`` work\n   reliably again (:issue:`6679`).\n-  Functions using ``--on-signal INT`` work reliably in interactive\n   sessions, as they did in fish 2.7 and before (:issue:`6649`). These handlers\n   have never worked in non-interactive sessions, and making them work\n   is an ongoing process.\n-  Functions using ``--on-variable`` work reliably with variables which\n   are set implicitly (rather than with ``set``), such as\n   “``fish_bind_mode``” and “``PWD``” (:issue:`6653`).\n-  256 colors are properly enabled under certain conditions that were\n   incorrectly detected in fish 3.1.0 (``$TERM`` begins with xterm, does\n   not include “``256color``”, and ``$TERM_PROGRAM`` is not set)\n   (:issue:`6701`).\n-  The Mercurial (``hg``) prompt no longer produces an error when the\n   current working directory is removed (:issue:`6699`). Also, for performance\n   reasons it shows only basic information by default; to restore the\n   detailed status, set ``$fish_prompt_hg_show_informative_status``.\n-  The VCS prompt, ``fish_vcs_prompt``, no longer displays Subversion\n   (``svn``) status by default, due to the potential slowness of this\n   operation (:issue:`6681`).\n-  Pasting of commands has been sped up (:issue:`6713`).\n-  Using extended Unicode characters, such as emoji, in a non-Unicode\n   capable locale (such as the ``C`` or ``POSIX`` locale) no longer\n   renders all output blank (:issue:`6736`).\n-  ``help`` prefers to use ``xdg-open``, avoiding the use of ``open`` on\n   Debian systems where this command is actually ``openvt`` (:issue:`6739`).\n-  Command lines starting with a space, which are not saved in history,\n   now do not get autosuggestions. This fixes an issue with Midnight\n   Commander integration (:issue:`6763`), but may be changed in a future\n   version.\n-  Copying to the clipboard no longer inserts a newline at the end of\n   the content, matching fish 2.7 and earlier (:issue:`6927`).\n-  ``fzf`` in complex pipes no longer hangs. More generally, code run as\n   part of command substitutions or ``eval`` will no longer have\n   separate process groups. (:issue:`6624`, :issue:`6806`).\n\nThis release also includes:\n\n-  several changes to improve macOS compatibility with code signing\n   and notarization;\n-  several improvements to completions; and\n-  several content and formatting improvements to the documentation.\n\nIf you are upgrading from version 3.0.0 or before, please also review\nthe release notes for 3.1.0 and 3.1b1 (included below).\n\nErrata for fish 3.1\n-------------------\n\nA new builtin, ``time``, was introduced in the fish 3.1 releases. This\nbuiltin is a reserved word (like ``test``, ``function``, and others)\nbecause of the way it is implemented, and functions can no longer be\nnamed ``time``. This was not clear in the fish 3.1b1 changelog.\n\n--------------\n\nfish 3.1.0 (released February 12, 2020)\n=======================================\n\nCompared to the beta release of fish 3.1b1, fish version 3.1.0:\n\n-  Fixes a regression where spaces after a brace were removed despite\n   brace expansion not occurring (:issue:`6564`).\n-  Fixes a number of problems in compiling and testing on Cygwin\n   (:issue:`6549`) and Solaris-derived systems such as Illumos (:issue:`6553`, :issue:`6554`,\n   :issue:`6555`, :issue:`6556`, and :issue:`6558`).\n-  Fixes the process for building macOS packages.\n-  Fixes a regression where excessive error messages are printed if\n   Unicode characters are emitted in non-Unicode-capable locales\n   (:issue:`6584`).\n-  Contains some improvements to the documentation and a small number\n   of completions.\n\nIf you are upgrading from version 3.0.0 or before, please also review\nthe release notes for 3.1b1 (included below).\n\n--------------\n\nfish 3.1b1 (released January 26, 2020)\n======================================\n\n.. _notable-improvements-and-fixes-1:\n\nNotable improvements and fixes\n------------------------------\n\n-  A new ``$pipestatus`` variable contains a list of exit statuses of\n   the previous job, for each of the separate commands in a pipeline\n   (:issue:`5632`).\n-  fish no longer buffers pipes to the last function in a pipeline,\n   improving many cases where pipes appeared to block or hang (:issue:`1396`).\n-  An overhaul of error messages for builtin commands, including a\n   removal of the overwhelming usage summary, more readable stack traces\n   (:issue:`3404`, :issue:`5434`), and stack traces for ``test`` (aka ``[``) (:issue:`5771`).\n-  fish’s debugging arguments have been significantly improved. The\n   ``--debug-level`` option has been removed, and a new ``--debug``\n   option replaces it. This option accepts various categories, which may\n   be listed via ``fish --print-debug-categories`` (:issue:`5879`). A new\n   ``--debug-output`` option allows for redirection of debug output.\n-  ``string`` has a new ``collect`` subcommand for use in command\n   substitutions, producing a single output instead of splitting on new\n   lines (similar to ``\"$(cmd)\"`` in other shells) (:issue:`159`).\n-  The fish manual, tutorial and FAQ are now available in ``man`` format\n   as ``fish-doc``, ``fish-tutorial`` and ``fish-faq`` respectively\n   (:issue:`5521`).\n-  Like other shells, ``cd`` now always looks for its argument in the\n   current directory as a last resort, even if the ``CDPATH`` variable\n   does not include it or “.” (:issue:`4484`).\n-  fish now correctly handles ``CDPATH`` entries that start with ``..``\n   (:issue:`6220`) or contain ``./`` (:issue:`5887`).\n-  The ``fish_trace`` variable may be set to trace execution (:issue:`3427`).\n   This performs a similar role as ``set -x`` in other shells.\n-  fish uses the temporary directory determined by the system, rather\n   than relying on ``/tmp`` (:issue:`3845`).\n-  The fish Web configuration tool (``fish_config``) prints a list of\n   commands it is executing, to help understanding and debugging\n   (:issue:`5584`).\n-  Major performance improvements when pasting (:issue:`5866`), executing lots\n   of commands (:issue:`5905`), importing history from bash (:issue:`6295`), and when\n   completing variables that might match ``$history`` (:issue:`6288`).\n\n.. _syntax-changes-and-new-commands-1:\n\nSyntax changes and new commands\n-------------------------------\n\n-  A new builtin command, ``time``, which allows timing of fish\n   functions and builtins as well as external commands (:issue:`117`).\n-  Brace expansion now only takes place if the braces include a “,” or a\n   variable expansion, meaning common commands such as\n   ``git reset HEAD@{0}`` do not require escaping (:issue:`5869`).\n-  New redirections ``&>`` and ``&|`` may be used to redirect or pipe\n   stdout, and also redirect stderr to stdout (:issue:`6192`).\n-  ``switch`` now allows arguments that expand to nothing, like empty\n   variables (:issue:`5677`).\n-  The ``VAR=val cmd`` syntax can now be used to run a command in a\n   modified environment (:issue:`6287`).\n-  ``and`` is no longer recognised as a command, so that nonsensical\n   constructs like ``and and and`` produce a syntax error (:issue:`6089`).\n-  ``math``\\ ‘s exponent operator,’\\ ``^``\\ ‘, was previously\n   left-associative, but now uses the more commonly-used\n   right-associative behaviour (:issue:`6280`). This means that\n   ``math '3^0.5^2'`` was previously calculated as’(3\\ :sup:`0.5)`\\ 2’,\n   but is now calculated as ‘3\\ :sup:`(0.5`\\ 2)’.\n-  In fish 3.0, the variable used with ``for`` loops inside command\n   substitutions could leak into enclosing scopes; this was an\n   inadvertent behaviour change and has been reverted (:issue:`6480`).\n\n.. _scripting-improvements-1:\n\nScripting improvements\n----------------------\n\n-  ``string split0`` now returns 0 if it split something (:issue:`5701`).\n-  In the interest of consistency, ``builtin -q`` and ``command -q`` can\n   now be used to query if a builtin or command exists (:issue:`5631`).\n-  ``math`` now accepts ``--scale=max`` for the maximum scale (:issue:`5579`).\n-  ``builtin $var`` now works correctly, allowing a variable as the\n   builtin name (:issue:`5639`).\n-  ``cd`` understands the ``--`` argument to make it possible to change\n   to directories starting with a hyphen (:issue:`6071`).\n-  ``complete --do-complete`` now also does fuzzy matches (:issue:`5467`).\n-  ``complete --do-complete`` can be used inside completions, allowing\n   limited recursion (:issue:`3474`).\n-  ``count`` now also counts lines fed on standard input (:issue:`5744`).\n-  ``eval`` produces an exit status of 0 when given no arguments, like\n   other shells (:issue:`5692`).\n-  ``printf`` prints what it can when input hasn’t been fully converted\n   to a number, but still prints an error (:issue:`5532`).\n-  ``complete -C foo`` now works as expected, rather than requiring\n   ``complete -Cfoo``.\n-  ``complete`` has a new ``--force-files`` option, to re-enable file\n   completions. This allows ``sudo -E`` and ``pacman -Qo`` to complete\n   correctly (:issue:`5646`).\n-  ``argparse`` now defaults to showing the current function name\n   (instead of ``argparse``) in its errors, making ``--name`` often\n   superfluous (:issue:`5835`).\n-  ``argparse`` has a new ``--ignore-unknown`` option to keep\n   unrecognized options, allowing multiple argparse passes to parse\n   options (:issue:`5367`).\n-  ``argparse`` correctly handles flag value validation of options that\n   only have short names (:issue:`5864`).\n-  ``read -S`` (short option of ``--shell``) is recognised correctly\n   (:issue:`5660`).\n-  ``read`` understands ``--list``, which acts like ``--array`` in\n   reading all arguments into a list inside a single variable, but is\n   better named (:issue:`5846`).\n-  ``read`` has a new option, ``--tokenize``, which splits a string into\n   variables according to the shell’s tokenization rules, considering\n   quoting, escaping, and so on (:issue:`3823`).\n-  ``read`` interacts more correctly with the deprecated ``$IFS``\n   variable, in particular removing multiple separators when splitting a\n   variable into a list (:issue:`6406`), matching other shells.\n-  ``fish_indent`` now handles semicolons better, including leaving them\n   in place for ``; and`` and ``; or`` instead of breaking the line\n   (:issue:`5859`).\n-  ``fish_indent --write`` now supports multiple file arguments,\n   indenting them in turn.\n-  The default read limit has been increased to 100MiB (:issue:`5267`).\n-  ``math`` now also understands ``x`` for multiplication, provided it\n   is followed by whitespace (:issue:`5906`).\n-  ``math`` reports the right error when incorrect syntax is used inside\n   parentheses (:issue:`6063`), and warns when unsupported logical operations\n   are used (:issue:`6096`).\n-  ``functions --erase`` now also prevents fish from autoloading a\n   function for the first time (:issue:`5951`).\n-  ``jobs --last`` returns 0 to indicate success when a job is found\n   (:issue:`6104`).\n-  ``commandline -p`` and ``commandline -j`` now split on ``&&`` and\n   ``||`` in addition to ``;`` and ``&`` (:issue:`6214`).\n-  A bug where ``string split`` would drop empty strings if the output\n   was only empty strings has been fixed (:issue:`5987`).\n-  ``eval`` no long creates a new local variable scope, but affects\n   variables in the scope it is called from (:issue:`4443`). ``source`` still\n   creates a new local scope.\n-  ``abbr`` has a new ``--query`` option to check for the existence of\n   an abbreviation.\n-  Local values for ``fish_complete_path`` and ``fish_function_path``\n   are now ignored; only their global values are respected.\n-  Syntax error reports now display a marker in the correct position\n   (:issue:`5812`).\n-  Empty universal variables may now be exported (:issue:`5992`).\n-  Exported universal variables are no longer imported into the global\n   scope, preventing shadowing. This makes it easier to change such\n   variables for all fish sessions and avoids breakage when the value is\n   a list of multiple elements (:issue:`5258`).\n-  A bug where ``for`` could use invalid variable names has been fixed\n   (:issue:`5800`).\n-  A bug where local variables would not be exported to functions has\n   been fixed (:issue:`6153`).\n-  The null command (``:``) now always exits successfully, rather than\n   passing through the previous exit status (:issue:`6022`).\n-  The output of ``functions FUNCTION`` matches the declaration of the\n   function, correctly including comments or blank lines (:issue:`5285`), and\n   correctly includes any ``--wraps`` flags (:issue:`1625`).\n-  ``type`` supports a new option, ``--short``, which suppress function\n   expansion (:issue:`6403`).\n-  ``type --path`` with a function argument will now output the path to\n   the file containing the definition of that function, if it exists.\n-  ``type --force-path`` with an argument that cannot be found now\n   correctly outputs nothing, as documented (:issue:`6411`).\n-  The ``$hostname`` variable is no longer truncated to 32 characters\n   (:issue:`5758`).\n-  Line numbers in function backtraces are calculated correctly (:issue:`6350`).\n-  A new ``fish_cancel`` event is emitted when the command line is\n   cancelled, which is useful for terminal integration (:issue:`5973`).\n\n.. _interactive-improvements-1:\n\nInteractive improvements\n------------------------\n\n-  New Base16 color options are available through the Web-based\n   configuration (:issue:`6504`).\n-  fish only parses ``/etc/paths`` on macOS in login shells, matching\n   the bash implementation (:issue:`5637`) and avoiding changes to path ordering\n   in child shells (:issue:`5456`). It now ignores blank lines like the bash\n   implementation (:issue:`5809`).\n-  The locale is now reloaded when the ``LOCPATH`` variable is changed\n   (:issue:`5815`).\n-  ``read`` no longer keeps a history, making it suitable for operations\n   that shouldn’t end up there, like password entry (:issue:`5904`).\n-  ``dirh`` outputs its stack in the correct order (:issue:`5477`), and behaves\n   as documented when universal variables are used for its stack\n   (:issue:`5797`).\n-  ``funced`` and the edit-commandline-in-buffer bindings did not work\n   in fish 3.0 when the ``$EDITOR`` variable contained spaces; this has\n   been corrected (:issue:`5625`).\n-  Builtins now pipe their help output to a pager automatically (:issue:`6227`).\n-  ``set_color`` now colors the ``--print-colors`` output in the\n   matching colors if it is going to a terminal.\n-  fish now underlines every valid entered path instead of just the last\n   one (:issue:`5872`).\n-  When syntax highlighting a string with an unclosed quote, only the\n   quote itself will be shown as an error, instead of the whole\n   argument.\n-  Syntax highlighting works correctly with variables as commands\n   (:issue:`5658`) and redirections to close file descriptors (:issue:`6092`).\n-  ``help`` works properly on Windows Subsytem for Linux (:issue:`5759`, :issue:`6338`).\n-  A bug where ``disown`` could crash the shell has been fixed (:issue:`5720`).\n-  fish will not autosuggest files ending with ``~`` unless there are no\n   other candidates, as these are generally backup files (:issue:`985`).\n-  Escape in the pager works correctly (:issue:`5818`).\n-  Key bindings that call ``fg`` no longer leave the terminal in a\n   broken state (:issue:`2114`).\n-  Brackets (:issue:`5831`) and filenames containing ``$`` (:issue:`6060`) are completed\n   with appropriate escaping.\n-  The output of ``complete`` and ``functions`` is now colorized in\n   interactive terminals.\n-  The Web-based configuration handles aliases that include single\n   quotes correctly (:issue:`6120`), and launches correctly under Termux (:issue:`6248`)\n   and OpenBSD (:issue:`6522`).\n-  ``function`` now correctly validates parameters for\n   ``--argument-names`` as valid variable names (:issue:`6147`) and correctly\n   parses options following ``--argument-names``, as in\n   “``--argument-names foo --description bar``” (:issue:`6186`).\n-  History newly imported from bash includes command lines using ``&&``\n   or ``||``.\n-  The automatic generation of completions from manual pages is better\n   described in job and process listings, and no longer produces a\n   warning when exiting fish (:issue:`6269`).\n-  In private mode, setting ``$fish_greeting`` to an empty string before\n   starting the private session will prevent the warning about history\n   not being saved from being printed (:issue:`6299`).\n-  In the interactive editor, a line break (Enter) inside unclosed\n   brackets will insert a new line, rather than executing the command\n   and producing an error (:issue:`6316`).\n-  Ctrl-C always repaints the prompt (:issue:`6394`).\n-  When run interactively from another program (such as Python), fish\n   will correctly start a new process group, like other shells (:issue:`5909`).\n-  Job identifiers (for example, for background jobs) are assigned more\n   logically (:issue:`6053`).\n-  A bug where history would appear truncated if an empty command was\n   executed was fixed (:issue:`6032`).\n\n.. _new-or-improved-bindings-1:\n\nNew or improved bindings\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  Pasting strips leading spaces to avoid pasted commands being omitted\n   from the history (:issue:`4327`).\n-  Shift-Left and Shift-Right now default to moving backwards and\n   forwards by one bigword (words separated by whitespace) (:issue:`1505`).\n-  The default escape delay (to differentiate between the escape key and\n   an alt-combination) has been reduced to 30ms, down from 300ms for the\n   default mode and 100ms for Vi mode (:issue:`3904`).\n-  The ``forward-bigword`` binding now interacts correctly with\n   autosuggestions (:issue:`5336`).\n-  The ``fish_clipboard_*`` functions support Wayland by using\n   `wl-clipboard <https://github.com/bugaevc/wl-clipboard>`_\n   (:issue:`5450`).\n-  The ``nextd`` and ``prevd`` functions no longer print “Hit end of\n   history”, instead using a bell. They correctly store working\n   directories containing symbolic links (:issue:`6395`).\n-  If a ``fish_mode_prompt`` function exists, Vi mode will only execute\n   it on mode-switch instead of the entire prompt. This should make it\n   much more responsive with slow prompts (:issue:`5783`).\n-  The path-component bindings (like Ctrl-w) now also stop at “:” and\n   “@”, because those are used to denote user and host in commands such\n   as ``ssh`` (:issue:`5841`).\n-  The NULL character can now be bound via ``bind -k nul``. Terminals\n   often generate this character via control-space. (:issue:`3189`).\n-  A new readline command ``expand-abbr`` can be used to trigger\n   abbreviation expansion (:issue:`5762`).\n-  A new readline command, ``delete-or-exit``, removes a character to\n   the right of the cursor or exits the shell if the command line is\n   empty (moving this functionality out of the ``delete-or-exit``\n   function).\n-  The ``self-insert`` readline command will now insert the binding\n   sequence, if not empty.\n-  A new binding to prepend ``sudo``, bound to Alt-S by default (:issue:`6140`).\n-  The Alt-W binding to describe a command should now work better with\n   multiline prompts (:issue:`6110`)\n-  The Alt-H binding to open a command’s man page now tries to ignore\n   ``sudo`` (:issue:`6122`).\n-  A new pair of bind functions, ``history-prefix-search-backward`` (and\n   ``forward``), was introduced (:issue:`6143`).\n-  Vi mode now supports R to enter replace mode (:issue:`6342`), and ``d0`` to\n   delete the current line (:issue:`6292`).\n-  In Vi mode, hitting Enter in replace-one mode no longer erases the\n   prompt (:issue:`6298`).\n-  Selections in Vi mode are inclusive, matching the actual behaviour of\n   Vi (:issue:`5770`).\n\n.. _improved-prompts-1:\n\nImproved prompts\n^^^^^^^^^^^^^^^^\n\n-  The Git prompt in informative mode now shows the number of stashes if\n   enabled.\n-  The Git prompt now has an option\n   (``$__fish_git_prompt_use_informative_chars``) to use the (more\n   modern) informative characters without enabling informative mode.\n-  The default prompt now also features VCS integration and will color\n   the host if running via SSH (:issue:`6375`).\n-  The default and example prompts print the pipe status if an earlier\n   command in the pipe fails.\n-  The default and example prompts try to resolve exit statuses to\n   signal names when appropriate.\n\n.. _improved-terminal-output-1:\n\nImproved terminal output\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  New ``fish_pager_color_`` options have been added to control more\n   elements of the pager’s colors (:issue:`5524`).\n-  Better detection and support for using fish from various system\n   consoles, where limited colors and special characters are supported\n   (:issue:`5552`).\n-  fish now tries to guess if the system supports Unicode 9 (and\n   displays emoji as wide), eliminating the need to set\n   ``$fish_emoji_width`` in most cases (:issue:`5722`).\n-  Improvements to the display of wide characters, particularly Korean\n   characters and emoji (:issue:`5583`, :issue:`5729`).\n-  The Vi mode cursor is correctly redrawn when regaining focus under\n   terminals that report focus (eg tmux) (:issue:`4788`).\n-  Variables that control background colors (such as\n   ``fish_pager_color_search_match``) can now use ``--reverse``.\n\n.. _completions-1:\n\nCompletions\n^^^^^^^^^^^\n\n-  Added completions for\n\n   -  ``aws``\n   -  ``bat`` (:issue:`6052`)\n   -  ``bosh`` (:issue:`5700`)\n   -  ``btrfs``\n   -  ``camcontrol``\n   -  ``cf`` (:issue:`5700`)\n   -  ``chronyc`` (:issue:`6496`)\n   -  ``code`` (:issue:`6205`)\n   -  ``cryptsetup`` (:issue:`6488`)\n   -  ``csc`` and ``csi`` (:issue:`6016`)\n   -  ``cwebp`` (:issue:`6034`)\n   -  ``cygpath`` and ``cygstart`` (:issue:`6239`)\n   -  ``epkginfo`` (:issue:`5829`)\n   -  ``ffmpeg``, ``ffplay``, and ``ffprobe`` (:issue:`5922`)\n   -  ``fsharpc`` and ``fsharpi`` (:issue:`6016`)\n   -  ``fzf`` (:issue:`6178`)\n   -  ``g++`` (:issue:`6217`)\n   -  ``gpg1`` (:issue:`6139`)\n   -  ``gpg2`` (:issue:`6062`)\n   -  ``grub-mkrescue`` (:issue:`6182`)\n   -  ``hledger`` (:issue:`6043`)\n   -  ``hwinfo`` (:issue:`6496`)\n   -  ``irb`` (:issue:`6260`)\n   -  ``iw`` (:issue:`6232`)\n   -  ``kak``\n   -  ``keepassxc-cli`` (:issue:`6505`)\n   -  ``keybase`` (:issue:`6410`)\n   -  ``loginctl`` (:issue:`6501`)\n   -  ``lz4``, ``lz4c`` and ``lz4cat`` (:issue:`6364`)\n   -  ``mariner`` (:issue:`5718`)\n   -  ``nethack`` (:issue:`6240`)\n   -  ``patool`` (:issue:`6083`)\n   -  ``phpunit`` (:issue:`6197`)\n   -  ``plutil`` (:issue:`6301`)\n   -  ``pzstd`` (:issue:`6364`)\n   -  ``qubes-gpg-client`` (:issue:`6067`)\n   -  ``resolvectl`` (:issue:`6501`)\n   -  ``rg``\n   -  ``rustup``\n   -  ``sfdx`` (:issue:`6149`)\n   -  ``speedtest`` and ``speedtest-cli`` (:issue:`5840`)\n   -  ``src`` (:issue:`6026`)\n   -  ``tokei`` (:issue:`6085`)\n   -  ``tsc`` (:issue:`6016`)\n   -  ``unlz4`` (:issue:`6364`)\n   -  ``unzstd`` (:issue:`6364`)\n   -  ``vbc`` (:issue:`6016`)\n   -  ``zpaq`` (:issue:`6245`)\n   -  ``zstd``, ``zstdcat``, ``zstdgrep``, ``zstdless`` and ``zstdmt``\n      (:issue:`6364`)\n\n-  Lots of improvements to completions.\n-  Selecting short options which also have a long name from the\n   completion pager is possible (:issue:`5634`).\n-  Tab completion will no longer add trailing spaces if they already\n   exist (:issue:`6107`).\n-  Completion of subcommands to builtins like ``and`` or ``not`` now\n   works correctly (:issue:`6249`).\n-  Completion of arguments to short options works correctly when\n   multiple short options are used together (:issue:`332`).\n-  Activating completion in the middle of an invalid completion does not\n   move the cursor any more, making it easier to fix a mistake (:issue:`4124`).\n-  Completion in empty commandlines now lists all available commands.\n-  Functions listed as completions could previously leak parts of the\n   function as other completions; this has been fixed.\n\n.. _deprecations-and-removed-features-1:\n\nDeprecations and removed features\n---------------------------------\n\n-  The vcs-prompt functions have been promoted to names without\n   double-underscore, so \\__fish_git_prompt is now fish_git_prompt,\n   \\__fish_vcs_prompt is now fish_vcs_prompt, \\__fish_hg_prompt is now\n   fish_hg_prompt and \\__fish_svn_prompt is now fish_svn_prompt. Shims\n   at the old names have been added, and the variables have kept their\n   old names (:issue:`5586`).\n-  ``string replace`` has an additional round of escaping in the\n   replacement expression, so escaping backslashes requires many escapes\n   (eg ``string replace -ra '([ab])' '\\\\\\\\\\\\\\$1' a``). The new feature\n   flag ``regex-easyesc`` can be used to disable this, so that the same\n   effect can be achieved with\n   ``string replace -ra '([ab])' '\\\\\\\\$1' a`` (:issue:`5556`). As a reminder,\n   the intention behind feature flags is that this will eventually\n   become the default and then only option, so scripts should be\n   updated.\n-  The ``fish_vi_mode`` function, deprecated in fish 2.3, has been\n   removed. Use ``fish_vi_key_bindings`` instead (:issue:`6372`).\n\n.. _for-distributors-and-developers-1:\n\nFor distributors and developers\n-------------------------------\n\n-  fish 3.0 introduced a CMake-based build system. In fish 3.1, both the\n   Autotools-based build and legacy Xcode build system have been\n   removed, leaving only the CMake build system. All distributors and\n   developers must install CMake.\n-  fish now depends on the common ``tee`` external command, for the\n   ``psub`` process substitution function.\n-  The documentation is now built with Sphinx. The old Doxygen-based\n   documentation system has been removed. Developers, and distributors\n   who wish to rebuild the documentation, must install Sphinx.\n-  The ``INTERNAL_WCWIDTH`` build option has been removed, as fish now\n   always uses an internal ``wcwidth`` function. It has a number of\n   configuration options that make it more suitable for general use\n   (:issue:`5777`).\n-  mandoc can now be used to format the output from ``--help`` if\n   ``nroff`` is not installed, reducing the number of external\n   dependencies on systems with ``mandoc`` installed (:issue:`5489`).\n-  Some bugs preventing building on Solaris-derived systems such as\n   Illumos were fixed (:issue:`5458`, :issue:`5461`, :issue:`5611`).\n-  Completions for ``npm``, ``bower`` and ``yarn`` no longer require the\n   ``jq`` utility for full functionality, but will use Python instead if\n   it is available.\n-  The paths for completions, functions and configuration snippets have\n   been extended. On systems that define ``XDG_DATA_DIRS``, each of the\n   directories in this variable are searched in the subdirectories\n   ``fish/vendor_completions.d``, ``fish/vendor_functions.d``, and\n   ``fish/vendor_conf.d`` respectively. On systems that do not define\n   this variable in the environment, the vendor directories are searched\n   for in both the installation prefix and the default “extra”\n   directory, which now defaults to ``/usr/local`` (:issue:`5029`).\n\n--------------\n\nfish 3.0.2 (released February 19, 2019)\n=======================================\n\nThis release of fish fixes an issue discovered in fish 3.0.1.\n\nFixes and improvements\n----------------------\n\n-  The PWD environment variable is now ignored if it does not resolve to\n   the true working directory, fixing strange behaviour in terminals\n   started by editors and IDEs (:issue:`5647`).\n\nIf you are upgrading from version 2.7.1 or before, please also review\nthe release notes for 3.0.1, 3.0.0 and 3.0b1 (included below).\n\n\nfish 3.0.1 (released February 11, 2019)\n=======================================\n\nThis release of fish fixes a number of major issues discovered in fish\n3.0.0.\n\n.. _fixes-and-improvements-1:\n\nFixes and improvements\n----------------------\n\n-  ``exec`` does not complain about running foreground jobs when called\n   (:issue:`5449`).\n-  while loops now evaluate to the last executed command in the loop\n   body (or zero if the body was empty), matching POSIX semantics\n   (:issue:`4982`).\n-  ``read --silent`` no longer echoes to the tty when run from a\n   non-interactive script (:issue:`5519`).\n-  On macOS, path entries with spaces in ``/etc/paths`` and\n   ``/etc/paths.d`` now correctly set path entries with spaces.\n   Likewise, ``MANPATH`` is correctly set from ``/etc/manpaths`` and\n   ``/etc/manpaths.d`` (:issue:`5481`).\n-  fish starts correctly under Cygwin/MSYS2 (:issue:`5426`).\n-  The ``pager-toggle-search`` binding (Ctrl-S by default) will now\n   activate the search field, even when the pager is not focused.\n-  The error when a command is not found is now printed a single time,\n   instead of once per argument (:issue:`5588`).\n-  Fixes and improvements to the git completions, including printing\n   correct paths with older git versions, fuzzy matching again, reducing\n   unnecessary offers of root paths (starting with ``:/``) (:issue:`5578`,\n   :issue:`5574`, :issue:`5476`), and ignoring shell aliases, so enterprising users can\n   set up the wrapping command (via\n   ``set -g __fish_git_alias_$command $whatitwraps``) (:issue:`5412`).\n-  Significant performance improvements to core shell functions (:issue:`5447`)\n   and to the ``kill`` completions (:issue:`5541`).\n-  Starting in symbolically-linked working directories works correctly\n   (:issue:`5525`).\n-  The default ``fish_title`` function no longer contains extra spaces\n   (:issue:`5517`).\n-  The ``nim`` prompt now works correctly when chosen in the Web-based\n   configuration (:issue:`5490`).\n-  ``string`` now prints help to stdout, like other builtins (:issue:`5495`).\n-  Killing the terminal while fish is in vi normal mode will no longer\n   send it spinning and eating CPU. (:issue:`5528`)\n-  A number of crashes have been fixed (:issue:`5550`, :issue:`5548`, :issue:`5479`, :issue:`5453`).\n-  Improvements to the documentation and certain completions.\n\nKnown issues\n------------\n\nThere is one significant known issue that was not corrected before the\nrelease:\n\n-  fish does not run correctly under Windows Services for Linux before\n   Windows 10 version 1809/17763, and the message warning of this may\n   not be displayed (:issue:`5619`).\n\nIf you are upgrading from version 2.7.1 or before, please also review\nthe release notes for 3.0.0 and 3.0b1 (included below).\n\n--------------\n\nfish 3.0.0 (released December 28, 2018)\n=======================================\n\nfish 3 is a major release, which introduces some breaking changes\nalongside improved functionality. Although most existing scripts will\ncontinue to work, they should be reviewed against the list contained in\nthe 3.0b1 release notes below.\n\nCompared to the beta release of fish 3.0b1, fish version 3.0.0:\n\n-  builds correctly against musl libc (:issue:`5407`)\n-  handles huge numeric arguments to ``test`` correctly (:issue:`5414`)\n-  removes the history colouring introduced in 3.0b1, which did not\n   always work correctly\n\nThere is one significant known issue which was not able to be corrected\nbefore the release:\n\n-  fish 3.0.0 builds on Cygwin (:issue:`5423`), but does not run correctly\n   (:issue:`5426`) and will result in a hanging terminal when started. Cygwin\n   users are encouraged to continue using 2.7.1 until a release which\n   corrects this is available.\n\nIf you are upgrading from version 2.7.1 or before, please also review\nthe release notes for 3.0b1 (included below).\n\n--------------\n\nfish 3.0b1 (released December 11, 2018)\n=======================================\n\nfish 3 is a major release, which introduces some breaking changes\nalongside improved functionality. Although most existing scripts will\ncontinue to work, they should be reviewed against the list below.\n\nNotable non-backward compatible changes\n---------------------------------------\n\n-  Process and job expansion has largely been removed. ``%`` will no\n   longer perform these expansions, except for ``%self`` for the PID of\n   the current shell. Additionally, job management commands (``disown``,\n   ``wait``, ``bg``, ``fg`` and ``kill``) will expand job specifiers\n   starting with ``%`` (:issue:`4230`, :issue:`1202`).\n-  ``set x[1] x[2] a b``, to set multiple elements of an array at once,\n   is no longer valid syntax (:issue:`4236`).\n-  A literal ``{}`` now expands to itself, rather than nothing. This\n   makes working with ``find -exec`` easier (:issue:`1109`, :issue:`4632`).\n-  Literally accessing a zero-index is now illegal syntax and is caught\n   by the parser (:issue:`4862`). (fish indices start at 1)\n-  Successive commas in brace expansions are handled in less surprising\n   manner. For example, ``{,,,}`` expands to four empty strings rather\n   than an empty string, a comma and an empty string again (:issue:`3002`,\n   :issue:`4632`).\n-  ``for`` loop control variables are no longer local to the ``for``\n   block (:issue:`1935`).\n-  Variables set in ``if`` and ``while`` conditions are available\n   outside the block (:issue:`4820`).\n-  Local exported (``set -lx``) vars are now visible to functions\n   (:issue:`1091`).\n-  The new ``math`` builtin (see below) does not support logical\n   expressions; ``test`` should be used instead (:issue:`4777`).\n-  Range expansion will now behave sensibly when given a single positive\n   and negative index (``$foo[5..-1]`` or ``$foo[-1..5]``), clamping to\n   the last valid index without changing direction if the list has fewer\n   elements than expected.\n-  ``read`` now uses ``-s`` as short for ``--silent`` (à la ``bash``);\n   ``--shell``\\ ’s abbreviation (formerly ``-s``) is now ``-S`` instead\n   (:issue:`4490`).\n-  ``cd`` no longer resolves symlinks. fish now maintains a virtual\n   path, matching other shells (:issue:`3350`).\n-  ``source`` now requires an explicit ``-`` as the filename to read\n   from the terminal (:issue:`2633`).\n-  Arguments to ``end`` are now errors, instead of being silently\n   ignored.\n-  The names ``argparse``, ``read``, ``set``, ``status``, ``test`` and\n   ``[`` are now reserved and not allowed as function names. This\n   prevents users unintentionally breaking stuff (:issue:`3000`).\n-  The ``fish_user_abbreviations`` variable is no longer used;\n   abbreviations will be migrated to the new storage format\n   automatically.\n-  The ``FISH_READ_BYTE_LIMIT`` variable is now called\n   ``fish_byte_limit`` (:issue:`4414`).\n-  Environment variables are no longer split into arrays based on the\n   record separator character on startup. Instead, variables are not\n   split, unless their name ends in PATH, in which case they are split\n   on colons (:issue:`436`).\n-  The ``history`` builtin’s ``--with-time`` option has been removed;\n   this has been deprecated in favor of ``--show-time`` since 2.7.0\n   (:issue:`4403`).\n-  The internal variables ``__fish_datadir`` and ``__fish_sysconfdir``\n   are now known as ``__fish_data_dir`` and ``__fish_sysconf_dir``\n   respectively.\n\nDeprecations\n------------\n\nWith the release of fish 3, a number of features have been marked for\nremoval in the future. All users are encouraged to explore alternatives.\nA small number of these features are currently behind feature flags,\nwhich are turned on at present but may be turned off by default in the\nfuture.\n\nA new feature flags mechanism is added for staging deprecations and\nbreaking changes. Feature flags may be specified at launch with\n``fish --features ...`` or by setting the universal ``fish_features``\nvariable. (:issue:`4940`)\n\n-  The use of the ``IFS`` variable for ``read`` is deprecated; ``IFS``\n   will be ignored in the future (:issue:`4156`). Use the ``read --delimiter``\n   option instead.\n-  The ``function --on-process-exit`` switch will be removed in future\n   (:issue:`4700`). Use the ``fish_exit`` event instead:\n   ``function --on-event fish_exit``.\n-  ``$_`` is deprecated and will removed in the future (:issue:`813`). Use\n   ``status current-command`` in a command substitution instead.\n-  ``^`` as a redirection deprecated and will be removed in the future.\n   (:issue:`4394`). Use ``2>`` to redirect stderr. This is controlled by the\n   ``stderr-nocaret`` feature flag.\n-  ``?`` as a glob (wildcard) is deprecated and will be removed in the\n   future (:issue:`4520`). This is controlled by the ``qmark-noglob`` feature\n   flag.\n\nNotable fixes and improvements\n------------------------------\n\n.. _syntax-changes-and-new-commands-2:\n\nSyntax changes and new commands\n-------------------------------\n\n-  fish now supports ``&&`` (like ``and``), ``||`` (like ``or``), and\n   ``!`` (like ``not``), for better migration from POSIX-compliant\n   shells (:issue:`4620`).\n-  Variables may be used as commands (:issue:`154`).\n-  fish may be started in private mode via ``fish --private``. Private\n   mode fish sessions do not have access to the history file and any\n   commands evaluated in private mode are not persisted for future\n   sessions. A session variable ``$fish_private_mode`` can be queried to\n   detect private mode and adjust the behavior of scripts accordingly to\n   respect the user’s wish for privacy.\n-  A new ``wait`` command for waiting on backgrounded processes (:issue:`4498`).\n-  ``math`` is now a builtin rather than a wrapper around ``bc``\n   (:issue:`3157`). Floating point computations is now used by default, and can\n   be controlled with the new ``--scale`` option (:issue:`4478`).\n-  Setting ``$PATH`` no longer warns on non-existent directories,\n   allowing for a single $PATH to be shared across machines (eg via\n   dotfiles) (:issue:`2969`).\n-  ``while`` sets ``$status`` to a non-zero value if the loop is not\n   executed (:issue:`4982`).\n-  Command substitution output is now limited to 10 MB by default,\n   controlled by the ``fish_read_limit`` variable (:issue:`3822`). Notably, this\n   is larger than most operating systems’ argument size limit, so trying\n   to pass argument lists this size to external commands has never\n   worked.\n-  The machine hostname, where available, is now exposed as the\n   ``$hostname`` reserved variable. This removes the dependency on the\n   ``hostname`` executable (:issue:`4422`).\n-  Bare ``bind`` invocations in config.fish now work. The\n   ``fish_user_key_bindings`` function is no longer necessary, but will\n   still be executed if it exists (:issue:`5191`).\n-  ``$fish_pid`` and ``$last_pid`` are available as replacements for\n   ``%self`` and ``%last``.\n\nNew features in commands\n------------------------\n\n-  ``alias`` has a new ``--save`` option to save the generated function\n   immediately (:issue:`4878`).\n-  ``bind`` has a new ``--silent`` option to ignore bind requests for\n   named keys not available under the current terminal (:issue:`4188`, :issue:`4431`).\n-  ``complete`` has a new ``--keep-order`` option to show the provided\n   or dynamically-generated argument list in the same order as\n   specified, rather than alphabetically (:issue:`361`).\n-  ``exec`` prompts for confirmation if background jobs are running.\n-  ``funced`` has a new ``--save`` option to automatically save the\n   edited function after successfully editing (:issue:`4668`).\n-  ``functions`` has a new ``--handlers`` option to show functions\n   registered as event handlers (:issue:`4694`).\n-  ``history search`` supports globs for wildcard searching (:issue:`3136`) and\n   has a new ``--reverse`` option to show entries from oldest to newest\n   (:issue:`4375`).\n-  ``jobs`` has a new ``--quiet`` option to silence the output.\n-  ``read`` has a new ``--delimiter`` option for splitting input into\n   arrays (:issue:`4256`).\n-  ``read`` writes directly to stdout if called without arguments\n   (:issue:`4407`).\n-  ``read`` can now read individual lines into separate variables\n   without consuming the input in its entirety via the new ``/--line``\n   option.\n-  ``set`` has new ``--append`` and ``--prepend`` options (:issue:`1326`).\n-  ``string match`` with an empty pattern and ``--entire`` in glob mode\n   now matches everything instead of nothing (:issue:`4971`).\n-  ``string split`` supports a new ``--no-empty`` option to exclude\n   empty strings from the result (:issue:`4779`).\n-  ``string`` has new subcommands ``split0`` and ``join0`` for working\n   with NUL-delimited output.\n-  ``string`` no longer stops processing text after NUL characters\n   (:issue:`4605`)\n-  ``string escape`` has a new ``--style regex`` option for escaping\n   strings to be matched literally in ``string`` regex operations.\n-  ``test`` now supports floating point values in numeric comparisons.\n\n.. _interactive-improvements-2:\n\nInteractive improvements\n------------------------\n\n-  A pipe at the end of a line now allows the job to continue on the\n   next line (:issue:`1285`).\n-  Italics and dim support out of the box on macOS for Terminal.app and\n   iTerm (:issue:`4436`).\n-  ``cd`` tab completions no longer descend into the deepest unambiguous\n   path (:issue:`4649`).\n-  Pager navigation has been improved. Most notably, moving down now\n   wraps around, moving up from the commandline now jumps to the last\n   element and moving right and left now reverse each other even when\n   wrapping around (:issue:`4680`).\n-  Typing normal characters while the completion pager is active no\n   longer shows the search field. Instead it enters them into the\n   command line, and ends paging (:issue:`2249`).\n-  A new input binding ``pager-toggle-search`` toggles the search field\n   in the completions pager on and off. By default, this is bound to\n   Ctrl-S.\n-  Searching in the pager now does a full fuzzy search (:issue:`5213`).\n-  The pager will now show the full command instead of just its last\n   line if the number of completions is large (:issue:`4702`).\n-  Abbreviations can be tab-completed (:issue:`3233`).\n-  Tildes in file names are now properly escaped in completions (:issue:`2274`).\n-  Wrapping completions (from ``complete --wraps`` or\n   ``function --wraps``) can now inject arguments. For example,\n   ``complete gco --wraps 'git checkout'`` now works properly (:issue:`1976`).\n   The ``alias`` function has been updated to respect this behavior.\n-  Path completions now support expansions, meaning expressions like\n   ``python ~/<TAB>`` now provides file suggestions just like any other\n   relative or absolute path. (This includes support for other\n   expansions, too.)\n-  Autosuggestions try to avoid arguments that are already present in\n   the command line.\n-  Notifications about crashed processes are now always shown, even in\n   command substitutions (:issue:`4962`).\n-  The screen is no longer reset after a BEL, fixing graphical glitches\n   (:issue:`3693`).\n-  vi-mode now supports ‘;’ and ‘,’ motions. This introduces new\n   {forward,backward}-jump-till and repeat-jump{,-reverse} bind\n   functions (:issue:`5140`).\n-  The ``*y`` vi-mode binding now works (:issue:`5100`).\n-  True color is now enabled in neovim by default (:issue:`2792`).\n-  Terminal size variables (``$COLUMNS``/``$LINES``) are now updated\n   before ``fish_prompt`` is called, allowing the prompt to react\n   (:issue:`904`).\n-  Multi-line prompts no longer repeat when the terminal is resized\n   (:issue:`2320`).\n-  ``xclip`` support has been added to the clipboard integration\n   (:issue:`5020`).\n-  The Alt-P keybinding paginates the last command if the command line\n   is empty.\n-  ``$cmd_duration`` is no longer reset when no command is executed\n   (:issue:`5011`).\n-  Deleting a one-character word no longer erases the next word as well\n   (:issue:`4747`).\n-  Token history search (Alt-Up) omits duplicate entries (:issue:`4795`).\n-  The ``fish_escape_delay_ms`` timeout, allowing the use of the escape\n   key both on its own and as part of a control sequence, was applied to\n   all control characters; this has been reduced to just the escape key.\n-  Completing a function shows the description properly (:issue:`5206`).\n-  ``commandline`` can now be used to set the commandline for the next command, restoring a behavior in 3.4.1 (:issue:`8807`).\n-  Added completions for\n\n   -  ``ansible``, including ``ansible-galaxy``, ``ansible-playbook``\n      and ``ansible-vault`` (:issue:`4697`)\n   -  ``bb-power`` (:issue:`4800`)\n   -  ``bd`` (:issue:`4472`)\n   -  ``bower``\n   -  ``clang`` and ``clang++`` (:issue:`4174`)\n   -  ``conda`` (:issue:`4837`)\n   -  ``configure`` (for autoconf-generated files only)\n   -  ``curl``\n   -  ``doas`` (:issue:`5196`)\n   -  ``ebuild`` (:issue:`4911`)\n   -  ``emaint`` (:issue:`4758`)\n   -  ``eopkg`` (:issue:`4600`)\n   -  ``exercism`` (:issue:`4495`)\n   -  ``hjson``\n   -  ``hugo`` (:issue:`4529`)\n   -  ``j`` (from autojump :issue:`4344`)\n   -  ``jbake`` (:issue:`4814`)\n   -  ``jhipster`` (:issue:`4472`)\n   -  ``kitty``\n   -  ``kldload``\n   -  ``kldunload``\n   -  ``makensis`` (:issue:`5242`)\n   -  ``meson``\n   -  ``mkdocs`` (:issue:`4906`)\n   -  ``ngrok`` (:issue:`4642`)\n   -  OpenBSD’s ``pkg_add``, ``pkg_delete``, ``pkg_info``, ``pfctl``,\n      ``rcctl``, ``signify``, and ``vmctl`` (:issue:`4584`)\n   -  ``openocd``\n   -  ``optipng``\n   -  ``opkg`` (:issue:`5168`)\n   -  ``pandoc`` (:issue:`2937`)\n   -  ``port`` (:issue:`4737`)\n   -  ``powerpill`` (:issue:`4800`)\n   -  ``pstack`` (:issue:`5135`)\n   -  ``serve`` (:issue:`5026`)\n   -  ``ttx``\n   -  ``unzip``\n   -  ``virsh`` (:issue:`5113`)\n   -  ``xclip`` (:issue:`5126`)\n   -  ``xsv``\n   -  ``zfs`` and ``zpool`` (:issue:`4608`)\n\n-  Lots of improvements to completions (especially ``darcs`` (:issue:`5112`),\n   ``git``, ``hg`` and ``sudo``).\n-  Completions for ``yarn`` and ``npm`` now require the\n   ``all-the-package-names`` NPM package for full functionality.\n-  Completions for ``bower`` and ``yarn`` now require the ``jq`` utility\n   for full functionality.\n-  Improved French translations.\n\nOther fixes and improvements\n----------------------------\n\n-  Significant performance improvements to ``abbr`` (:issue:`4048`), setting\n   variables (:issue:`4200`, :issue:`4341`), executing functions, globs (:issue:`4579`),\n   ``string`` reading from standard input (:issue:`4610`), and slicing history\n   (in particular, ``$history[1]`` for the last executed command).\n-  Fish’s internal wcwidth function has been updated to deal with newer\n   Unicode, and the width of some characters can be configured via the\n   ``fish_ambiguous_width`` (:issue:`5149`) and ``fish_emoji_width`` (:issue:`2652`)\n   variables. Alternatively, a new build-time option INTERNAL_WCWIDTH\n   can be used to use the system’s wcwidth instead (:issue:`4816`).\n-  ``functions`` correctly supports ``-d`` as the short form of\n   ``--description``. (:issue:`5105`)\n-  ``/etc/paths`` is now parsed like macOS’ bash ``path_helper``, fixing\n   $PATH order (:issue:`4336`, :issue:`4852`) on macOS.\n-  Using a read-only variable in a ``for`` loop produces an error,\n   rather than silently producing incorrect results (:issue:`4342`).\n-  The universal variables filename no longer contains the hostname or\n   MAC address. It is now at the fixed location\n   ``.config/fish/fish_variables`` (:issue:`1912`).\n-  Exported variables in the global or universal scope no longer have\n   their exported status affected by local variables (:issue:`2611`).\n-  Major rework of terminal and job handling to eliminate bugs (:issue:`3805`,\n   :issue:`3952`, :issue:`4178`, :issue:`4235`, :issue:`4238`, :issue:`4540`, :issue:`4929`, :issue:`5210`).\n-  Improvements to the manual page completion generator (:issue:`2937`, :issue:`4313`).\n-  ``suspend --force`` now works correctly (:issue:`4672`).\n-  Pressing Ctrl-C while running a script now reliably terminates fish\n   (:issue:`5253`).\n\n.. _for-distributors-and-developers-2:\n\nFor distributors and developers\n-------------------------------\n\n-  fish ships with a new build system based on CMake. CMake 3.2 is the\n   minimum required version. Although the autotools-based Makefile and\n   the Xcode project are still shipped with this release, they will be\n   removed in the near future. All distributors and developers are\n   encouraged to migrate to the CMake build.\n-  Build scripts for most platforms no longer require bash, using the\n   standard sh instead.\n-  The ``hostname`` command is no longer required for fish to operate.\n\n–\n\nfish 2.7.1 (released December 23, 2017)\n=======================================\n\nThis release of fish fixes an issue where iTerm 2 on macOS would display\na warning about paste bracketing being left on when starting a new fish\nsession (:issue:`4521`).\n\nIf you are upgrading from version 2.6.0 or before, please also review\nthe release notes for 2.7.0 and 2.7b1 (included below).\n\n–\n\nfish 2.7.0 (released November 23, 2017)\n=======================================\n\nThere are no major changes between 2.7b1 and 2.7.0. If you are upgrading\nfrom version 2.6.0 or before, please also review the release notes for\n2.7b1 (included below).\n\nXcode builds and macOS packages could not be produced with 2.7b1, but\nthis is fixed in 2.7.0.\n\n–\n\nfish 2.7b1 (released October 31, 2017)\n======================================\n\nNotable improvements\n--------------------\n\n-  A new ``cdh`` (change directory using recent history) command\n   provides a more friendly alternative to prevd/nextd and pushd/popd\n   (:issue:`2847`).\n-  A new ``argparse`` command is available to allow fish script to parse\n   arguments with the same behavior as builtin commands. This also\n   includes the ``fish_opt`` helper command. (:issue:`4190`).\n-  Invalid array indexes are now silently ignored (:issue:`826`, :issue:`4127`).\n-  Improvements to the debugging facility, including a prompt specific\n   to the debugger (``fish_breakpoint_prompt``) and a\n   ``status is-breakpoint`` subcommand (:issue:`1310`).\n-  ``string`` supports new ``lower`` and ``upper`` subcommands, for\n   altering the case of strings (:issue:`4080`). The case changing is not\n   locale-aware yet.- ``string escape`` has a new ``--style=xxx`` flag\n   where ``xxx`` can be ``script``, ``var``, or ``url`` (:issue:`4150`), and can\n   be reversed with ``string unescape`` (:issue:`3543`).\n-  History can now be split into sessions with the ``fish_history``\n   variable, or not saved to disk at all (:issue:`102`).\n-  Read history is now controlled by the ``fish_history`` variable\n   rather than the ``--mode-name`` flag (:issue:`1504`).\n-  ``command`` now supports an ``--all`` flag to report all directories\n   with the command. ``which`` is no longer a runtime dependency\n   (:issue:`2778`).\n-  fish can run commands before starting an interactive session using\n   the new ``--init-command``/``-C`` options (:issue:`4164`).\n-  ``set`` has a new ``--show`` option to show lots of information about\n   variables (:issue:`4265`).\n\nOther significant changes\n-------------------------\n\n-  The ``COLUMNS`` and ``LINES`` environment variables are now correctly\n   set the first time ``fish_prompt`` is run (:issue:`4141`).\n\n-  ``complete``\\ ’s ``--no-files`` option works as intended (:issue:`112`).\n\n-  ``echo -h`` now correctly echoes ``-h`` in line with other shells\n   (:issue:`4120`).\n\n-  The ``export`` compatibility function now returns zero on success,\n   rather than always returning 1 (:issue:`4435`).\n\n-  Stop converting empty elements in MANPATH to “.” (:issue:`4158`). The\n   behavior being changed was introduced in fish 2.6.0.\n\n-  ``count -h`` and ``count --help`` now return 1 rather than produce\n   command help output (:issue:`4189`).\n\n-  An attempt to ``read`` which stops because too much data is available\n   still defines the variables given as parameters (:issue:`4180`).\n\n-  A regression in fish 2.4.0 which prevented ``pushd +1`` from working\n   has been fixed (:issue:`4091`).\n\n-  A regression in fish 2.6.0 where multiple ``read`` commands in\n   non-interactive scripts were broken has been fixed (:issue:`4206`).\n\n-  A regression in fish 2.6.0 involving universal variables with\n   side-effects at startup such as ``set -U fish_escape_delay_ms 10``\n   has been fixed (:issue:`4196`).\n\n-  Added completions for:\n\n   -  ``as`` (:issue:`4130`)\n   -  ``cdh`` (:issue:`2847`)\n   -  ``dhcpd`` (:issue:`4115`)\n   -  ``ezjail-admin`` (:issue:`4324`)\n   -  Fabric’s ``fab`` (:issue:`4153`)\n   -  ``grub-file`` (:issue:`4119`)\n   -  ``grub-install`` (:issue:`4119`)\n   -  ``jest`` (:issue:`4142`)\n   -  ``kdeconnect-cli``\n   -  ``magneto`` (:issue:`4043`, :issue:`4108`)\n   -  ``mdadm`` (:issue:`4198`)\n   -  ``passwd`` (:issue:`4209`)\n   -  ``pip`` and ``pipenv`` (:issue:`4448`)\n   -  ``s3cmd`` (:issue:`4332`)\n   -  ``sbt`` (:issue:`4347`)\n   -  ``snap`` (:issue:`4215`)\n   -  Sublime Text 3’s ``subl`` (:issue:`4277`)\n\n-  Lots of improvements to completions.\n\n-  Updated Chinese and French translations.\n\n-  Improved completions for:\n\n   -  ``apt``\n\n   -  ``cd`` (:issue:`4061`)\n\n   -  ``composer`` (:issue:`4295`)\n\n   -  ``eopkg``\n\n   -  ``flatpak`` (:issue:`4456`)\n\n   -  ``git`` (:issue:`4117`, :issue:`4147`, :issue:`4329`, :issue:`4368`)\n\n   -  ``gphoto2``\n\n   -  ``killall`` (:issue:`4052`)\n\n   -  ``ln``\n\n   -  ``npm`` (:issue:`4241`)\n\n   -  ``ssh`` (:issue:`4377`)\n\n   -  ``tail``\n\n   -  ``xdg-mime`` (:issue:`4333`)\n\n   -  ``zypper`` (:issue:`4325`)\n\nfish 2.6.0 (released June 3, 2017)\n==================================\n\nSince the beta release of fish 2.6b1, fish version 2.6.0 contains a\nnumber of minor fixes, new completions for ``magneto`` (:issue:`4043`), and\nimprovements to the documentation.\n\n.. _known-issues-1:\n\nKnown issues\n------------\n\n-  Apple macOS Sierra 10.12.5 introduced a problem with launching web\n   browsers from other programs using AppleScript. This affects the fish\n   Web configuration (``fish_config``); users on these platforms will\n   need to manually open the address displayed in the terminal, such as\n   by copying and pasting it into a browser. This problem will be fixed\n   with macOS 10.12.6.\n\nIf you are upgrading from version 2.5.0 or before, please also review\nthe release notes for 2.6b1 (included below).\n\n--------------\n\nfish 2.6b1 (released May 14, 2017)\n==================================\n\n.. _notable-fixes-and-improvements-1:\n\nNotable fixes and improvements\n------------------------------\n\n-  Jobs running in the background can now be removed from the list of\n   jobs with the new ``disown`` builtin, which behaves like the same\n   command in other shells (:issue:`2810`).\n-  Command substitutions now have access to the terminal, like in other\n   shells. This allows tools like ``fzf`` to work properly (:issue:`1362`,\n   :issue:`3922`).\n-  In cases where the operating system does not report the size of the\n   terminal, the ``COLUMNS`` and ``LINES`` environment variables are\n   used; if they are unset, a default of 80x24 is assumed.\n-  New French (:issue:`3772` & :issue:`3788`) and improved German (:issue:`3834`) translations.\n-  fish no longer depends on the ``which`` external command.\n\n.. _other-significant-changes-1:\n\nOther significant changes\n-------------------------\n\n-  Performance improvements in launching processes, including major\n   reductions in signal blocking. Although this has been heavily tested,\n   it may cause problems in some circumstances; set the\n   ``FISH_NO_SIGNAL_BLOCK`` variable to 0 in your fish configuration\n   file to return to the old behaviour (:issue:`2007`).\n-  Performance improvements in prompts and functions that set lots of\n   colours (:issue:`3793`).\n-  The Delete key no longer deletes backwards (a regression in 2.5.0).\n-  ``functions`` supports a new ``--details`` option, which identifies\n   where the function was loaded from (:issue:`3295`), and a\n   ``--details --verbose`` option which includes the function\n   description (:issue:`597`).\n-  ``read`` will read up to 10 MiB by default, leaving the target\n   variable empty and exiting with status 122 if the line is too long.\n   You can set a different limit with the ``FISH_READ_BYTE_LIMIT``\n   variable.\n-  ``read`` supports a new ``--silent`` option to hide the characters\n   typed (:issue:`838`), for when reading sensitive data from the terminal.\n   ``read`` also now accepts simple strings for the prompt (rather than\n   scripts) with the new ``-P`` and ``--prompt-str`` options (:issue:`802`).\n-  ``export`` and ``setenv`` now understand colon-separated ``PATH``,\n   ``CDPATH`` and ``MANPATH`` variables.\n-  ``setenv`` is no longer a simple alias for ``set -gx`` and will\n   complain, just like the csh version, if given more than one value\n   (:issue:`4103`).\n-  ``bind`` supports a new ``--list-modes`` option (:issue:`3872`).\n-  ``bg`` will check all of its arguments before backgrounding any jobs;\n   any invalid arguments will cause a failure, but non-existent (eg\n   recently exited) jobs are ignored (:issue:`3909`).\n-  ``funced`` warns if the function being edited has not been modified\n   (:issue:`3961`).\n-  ``printf`` correctly outputs “long long” integers (:issue:`3352`).\n-  ``status`` supports a new ``current-function`` subcommand to print\n   the current function name (:issue:`1743`).\n-  ``string`` supports a new ``repeat`` subcommand (:issue:`3864`).\n   ``string match`` supports a new ``--entire`` option to emit the\n   entire line matched by a pattern (:issue:`3957`). ``string replace`` supports\n   a new ``--filter`` option to only emit lines which underwent a\n   replacement (:issue:`3348`).\n-  ``test`` supports the ``-k`` option to test for sticky bits (:issue:`733`).\n-  ``umask`` understands symbolic modes (:issue:`738`).\n-  Empty components in the ``CDPATH``, ``MANPATH`` and ``PATH``\n   variables are now converted to “.” (:issue:`2106`, :issue:`3914`).\n-  New versions of ncurses (6.0 and up) wipe terminal scrollback buffers\n   with certain commands; the ``C-l`` binding tries to avoid this\n   (:issue:`2855`).\n-  Some systems’ ``su`` implementations do not set the ``USER``\n   environment variable; it is now reset for root users (:issue:`3916`).\n-  Under terminals which support it, bracketed paste is enabled,\n   escaping problematic characters for security and convience (:issue:`3871`).\n   Inside single quotes (``'``), single quotes and backslashes in pasted\n   text are escaped (:issue:`967`). The ``fish_clipboard_paste`` function (bound\n   to ``C-v`` by default) is still the recommended pasting method where\n   possible as it includes this functionality and more.\n-  Processes in pipelines are no longer signalled as soon as one command\n   in the pipeline has completed (:issue:`1926`). This behaviour matches other\n   shells mre closely.\n-  All functions requiring Python work with whichever version of Python\n   is installed (:issue:`3970`). Python 3 is preferred, but Python 2.6 remains\n   the minimum version required.\n-  The color of the cancellation character can be controlled by the\n   ``fish_color_cancel`` variable (:issue:`3963`).\n-  Added completions for:\n-  ``caddy`` (:issue:`4008`)\n-  ``castnow`` (:issue:`3744`)\n-  ``climate`` (:issue:`3760`)\n-  ``flatpak``\n-  ``gradle`` (:issue:`3859`)\n-  ``gsettings`` (:issue:`4001`)\n-  ``helm`` (:issue:`3829`)\n-  ``i3-msg`` (:issue:`3787`)\n-  ``ipset`` (:issue:`3924`)\n-  ``jq`` (:issue:`3804`)\n-  ``light`` (:issue:`3752`)\n-  ``minikube`` (:issue:`3778`)\n-  ``mocha`` (:issue:`3828`)\n-  ``mkdosfs`` (:issue:`4017`)\n-  ``pv`` (:issue:`3773`)\n-  ``setsid`` (:issue:`3791`)\n-  ``terraform`` (:issue:`3960`)\n-  ``usermod`` (:issue:`3775`)\n-  ``xinput``\n-  ``yarn`` (:issue:`3816`)\n-  Improved completions for ``adb`` (:issue:`3853`), ``apt`` (:issue:`3771`), ``bzr``\n   (:issue:`3769`), ``dconf``, ``git`` (including :issue:`3743`), ``grep`` (:issue:`3789`),\n   ``go`` (:issue:`3789`), ``help`` (:issue:`3789`), ``hg`` (:issue:`3975`), ``htop`` (:issue:`3789`),\n   ``killall`` (:issue:`3996`), ``lua``, ``man`` (:issue:`3762`), ``mount`` (:issue:`3764` &\n   :issue:`3841`), ``obnam`` (:issue:`3924`), ``perl`` (:issue:`3856`), ``portmaster`` (:issue:`3950`),\n   ``python`` (:issue:`3840`), ``ssh`` (:issue:`3781`), ``scp`` (:issue:`3781`), ``systemctl``\n   (:issue:`3757`) and ``udisks`` (:issue:`3764`).\n\n--------------\n\nfish 2.5.0 (released February 3, 2017)\n======================================\n\nThere are no major changes between 2.5b1 and 2.5.0. If you are upgrading\nfrom version 2.4.0 or before, please also review the release notes for\n2.5b1 (included below).\n\n.. _notable-fixes-and-improvements-2:\n\nNotable fixes and improvements\n------------------------------\n\n-  The Home, End, Insert, Delete, Page Up and Page Down keys work in\n   Vi-style key bindings (:issue:`3731`).\n\n--------------\n\nfish 2.5b1 (released January 14, 2017)\n======================================\n\nPlatform Changes\n----------------\n\nStarting with version 2.5, fish requires a more up-to-date version of\nC++, specifically C++11 (from 2011). This affects some older platforms:\n\nLinux\n^^^^^\n\nFor users building from source, GCC’s g++ 4.8 or later, or LLVM’s clang\n3.3 or later, are known to work. Older platforms may require a newer\ncompiler installed.\n\nUnfortunately, because of the complexity of the toolchain, binary\npackages are no longer published by the fish-shell developers for the\nfollowing platforms:\n\n-  Red Hat Enterprise Linux and CentOS 5 & 6 for 64-bit builds\n-  Ubuntu 12.04 (EoLTS April 2017)\n-  Debian 7 (EoLTS May 2018)\n\nInstalling newer version of fish on these systems will require building\nfrom source.\n\nOS X SnowLeopard\n^^^^^^^^^^^^^^^^\n\nStarting with version 2.5, fish requires a C++11 standard library on OS\nX 10.6 (“SnowLeopard”). If this library is not installed, you will see\nthis error: ``dyld: Library not loaded: /usr/lib/libc++.1.dylib``\n\nMacPorts is the easiest way to obtain this library. After installing the\nSnowLeopard MacPorts release from the install page, run:\n\n::\n\n   sudo port -v install libcxx\n\nNow fish should launch successfully. (Please open an issue if it does\nnot.)\n\nThis is only necessary on 10.6. OS X 10.7 and later include the required\nlibrary by default.\n\n.. _other-significant-changes-2:\n\nOther significant changes\n-------------------------\n\n-  Attempting to exit with running processes in the background produces\n   a warning, then signals them to terminate if a second attempt to exit\n   is made. This brings the behaviour for running background processes\n   into line with stopped processes. (:issue:`3497`)\n-  ``random`` can now have start, stop and step values specified, or the\n   new ``choice`` subcommand can be used to pick an argument from a list\n   (:issue:`3619`).\n-  A new key bindings preset, ``fish_hybrid_key_bindings``, including\n   all the Emacs-style and Vi-style bindings, which behaves like\n   ``fish_vi_key_bindings`` in fish 2.3.0 (:issue:`3556`).\n-  ``function`` now returns an error when called with invalid options,\n   rather than defining the function anyway (:issue:`3574`). This was a\n   regression present in fish 2.3 and 2.4.0.\n-  fish no longer prints a warning when it identifies a running instance\n   of an old version (2.1.0 and earlier). Changes to universal variables\n   may not propagate between these old versions and 2.5b1.\n-  Improved compatiblity with Android (:issue:`3585`), MSYS/mingw (:issue:`2360`), and\n   Solaris (:issue:`3456`, :issue:`3340`).\n-  Like other shells, the ``test`` builting now returns an error for\n   numeric operations on invalid integers (:issue:`3346`, :issue:`3581`).\n-  ``complete`` no longer recognises ``--authoritative`` and\n   ``--unauthoritative`` options, and they are marked as obsolete.\n-  ``status`` accepts subcommands, and should be used like\n   ``status is-interactive``. The old options continue to be supported\n   for the foreseeable future (:issue:`3526`), although only one subcommand or\n   option can be specified at a time.\n-  Selection mode (used with “begin-selection”) no longer selects a\n   character the cursor does not move over (:issue:`3684`).\n-  List indexes are handled better, and a bit more liberally in some\n   cases (``echo $PATH[1 .. 3]`` is now valid) (:issue:`3579`).\n-  The ``fish_mode_prompt`` function is now simply a stub around\n   ``fish_default_mode_prompt``, which allows the mode prompt to be\n   included more easily in customised prompt functions (:issue:`3641`).\n\n.. _notable-fixes-and-improvements-3:\n\nNotable fixes and improvements\n------------------------------\n\n-  ``alias``, run without options or arguments, lists all defined\n   aliases, and aliases now include a description in the function\n   signature that identifies them.\n-  ``complete`` accepts empty strings as descriptions (:issue:`3557`).\n-  ``command`` accepts ``-q``/``--quiet`` in combination with\n   ``--search`` (:issue:`3591`), providing a simple way of checking whether a\n   command exists in scripts.\n-  Abbreviations can now be renamed with\n   ``abbr --rename OLD_KEY NEW_KEY`` (:issue:`3610`).\n-  The command synopses printed by ``--help`` options work better with\n   copying and pasting (:issue:`2673`).\n-  ``help`` launches the browser specified by the\n   ``$fish_help_browser variable`` if it is set (:issue:`3131`).\n-  History merging could lose items under certain circumstances and is\n   now fixed (:issue:`3496`).\n-  The ``$status`` variable is now set to 123 when a syntactically\n   invalid command is entered (:issue:`3616`).\n-  Exiting fish now signals all background processes to terminate, not\n   just stopped jobs (:issue:`3497`).\n-  A new ``prompt_hostname`` function which prints a hostname suitable\n   for use in prompts (:issue:`3482`).\n-  The ``__fish_man_page`` function (bound to Alt-h by default) now\n   tries to recognize subcommands (e.g. ``git add`` will now open the\n   “git-add” man page) (:issue:`3678`).\n-  A new function ``edit_command_buffer`` (bound to Alt-e & Alt-v by\n   default) to edit the command buffer in an external editor (:issue:`1215`,\n   :issue:`3627`).\n-  ``set_color`` now supports italics (``--italics``), dim (``--dim``)\n   and reverse (``--reverse``) modes (:issue:`3650`).\n-  Filesystems with very slow locking (eg incorrectly-configured NFS)\n   will no longer slow fish down (:issue:`685`).\n-  Improved completions for ``apt`` (:issue:`3695`), ``fusermount`` (:issue:`3642`),\n   ``make`` (:issue:`3628`), ``netctl-auto`` (:issue:`3378`), ``nmcli`` (:issue:`3648`),\n   ``pygmentize`` (:issue:`3378`), and ``tar`` (:issue:`3719`).\n-  Added completions for:\n-  ``VBoxHeadless`` (:issue:`3378`)\n-  ``VBoxSDL`` (:issue:`3378`)\n-  ``base64`` (:issue:`3378`)\n-  ``caffeinate`` (:issue:`3524`)\n-  ``dconf`` (:issue:`3638`)\n-  ``dig`` (:issue:`3495`)\n-  ``dpkg-reconfigure`` (:issue:`3521` & :issue:`3522`)\n-  ``feh`` (:issue:`3378`)\n-  ``launchctl`` (:issue:`3682`)\n-  ``lxc`` (:issue:`3554` & :issue:`3564`),\n-  ``mddiagnose`` (:issue:`3524`)\n-  ``mdfind`` (:issue:`3524`)\n-  ``mdimport`` (:issue:`3524`)\n-  ``mdls`` (:issue:`3524`)\n-  ``mdutil`` (:issue:`3524`)\n-  ``mkvextract`` (:issue:`3492`)\n-  ``nvram`` (:issue:`3524`)\n-  ``objdump`` (:issue:`3378`)\n-  ``sysbench`` (:issue:`3491`)\n-  ``tmutil`` (:issue:`3524`)\n\n--------------\n\nfish 2.4.0 (released November 8, 2016)\n======================================\n\nThere are no major changes between 2.4b1 and 2.4.0.\n\n.. _notable-fixes-and-improvements-4:\n\nNotable fixes and improvements\n------------------------------\n\n-  The documentation is now generated properly and with the correct\n   version identifier.\n-  Automatic cursor changes are now only enabled on the subset of XTerm\n   versions known to support them, resolving a problem where older\n   versions printed garbage to the terminal before and after every\n   prompt (:issue:`3499`).\n-  Improved the title set in Apple Terminal.app.\n-  Added completions for ``defaults`` and improved completions for\n   ``diskutil`` (:issue:`3478`).\n\n--------------\n\nfish 2.4b1 (released October 18, 2016)\n======================================\n\nSignificant changes\n-------------------\n\n-  The clipboard integration has been revamped with explicit bindings.\n   The killring commands no longer copy from, or paste to, the X11\n   clipboard - use the new copy (``C-x``) and paste (``C-v``) bindings\n   instead. The clipboard is now available on OS X as well as systems\n   using X11 (e.g. Linux). (:issue:`3061`)\n-  ``history`` uses subcommands (``history delete``) rather than options\n   (``history --delete``) for its actions (:issue:`3367`). You can no longer\n   specify multiple actions via flags (e.g.,\n   ``history --delete --save something``).\n-  New ``history`` options have been added, including ``--max=n`` to\n   limit the number of history entries, ``--show-time`` option to show\n   timestamps (:issue:`3175`, :issue:`3244`), and ``--null`` to null terminate history\n   entries in the search output.\n-  ``history search`` is now case-insensitive by default (which also\n   affects ``history delete``) (:issue:`3236`).\n-  ``history delete`` now correctly handles multiline commands (:issue:`31`).\n-  Vi-style bindings no longer include all of the default emacs-style\n   bindings; instead, they share some definitions (:issue:`3068`).\n-  If there is no locale set in the environment, various known system\n   configuration files will be checked for a default. If no locale can\n   be found, ``en_US-UTF.8`` will be used (:issue:`277`).\n-  A number followed by a caret (e.g. ``5^``) is no longer treated as a\n   redirection (:issue:`1873`).\n-  The ``$version`` special variable can be overwritten, so that it can\n   be used for other purposes if required.\n\n.. _notable-fixes-and-improvements-5:\n\nNotable fixes and improvements\n------------------------------\n\n-  The ``fish_realpath`` builtin has been renamed to ``realpath`` and\n   made compatible with GNU ``realpath`` when run without arguments\n   (:issue:`3400`). It is used only for systems without a ``realpath`` or\n   ``grealpath`` utility (:issue:`3374`).\n-  Improved color handling on terminals/consoles with 8-16 colors,\n   particularly the use of bright named color (:issue:`3176`, :issue:`3260`).\n-  ``fish_indent`` can now read from files given as arguments, rather\n   than just standard input (:issue:`3037`).\n-  Fuzzy tab completions behave in a less surprising manner (:issue:`3090`,\n   :issue:`3211`).\n-  ``jobs`` should only print its header line once (:issue:`3127`).\n-  Wildcards in redirections are highlighted appropriately (:issue:`2789`).\n-  Suggestions will be offered more often, like after removing\n   characters (:issue:`3069`).\n-  ``history --merge`` now correctly interleaves items in chronological\n   order (:issue:`2312`).\n-  Options for ``fish_indent`` have been aligned with the other binaries\n   - in particular, ``-d`` now means ``--debug``. The ``--dump`` option\n   has been renamed to ``--dump-parse-tree`` (:issue:`3191`).\n-  The display of bindings in the Web-based configuration has been\n   greatly improved (:issue:`3325`), as has the rendering of prompts (:issue:`2924`).\n-  fish should no longer hang using 100% CPU in the C locale (:issue:`3214`).\n-  A bug in FreeBSD 11 & 12, Dragonfly BSD & illumos prevented fish from\n   working correctly on these platforms under UTF-8 locales; fish now\n   avoids the buggy behaviour (:issue:`3050`).\n-  Prompts which show git repository information (via\n   ``__fish_git_prompt``) are faster in large repositories (:issue:`3294`) and\n   slow filesystems (:issue:`3083`).\n-  fish 2.3.0 reintroduced a problem where the greeting was printed even\n   when using ``read``; this has been corrected again (:issue:`3261`).\n-  Vi mode changes the cursor depending on the current mode (:issue:`3215`).\n-  Command lines with escaped space characters at the end tab-complete\n   correctly (:issue:`2447`).\n-  Added completions for:\n\n   -  ``arcanist`` (:issue:`3256`)\n   -  ``connmanctl`` (:issue:`3419`)\n   -  ``figlet`` (:issue:`3378`)\n   -  ``mdbook`` (:issue:`3378`)\n   -  ``ninja`` (:issue:`3415`)\n   -  ``p4``, the Perforce client (:issue:`3314`)\n   -  ``pygmentize`` (:issue:`3378`)\n   -  ``ranger`` (:issue:`3378`)\n\n-  Improved completions for ``aura`` (:issue:`3297`), ``abbr`` (:issue:`3267`), ``brew``\n   (:issue:`3309`), ``chown`` (:issue:`3380`, :issue:`3383`),\\ ``cygport`` (:issue:`3392`), ``git``\n   (:issue:`3274`, :issue:`3226`, :issue:`3225`, :issue:`3094`, :issue:`3087`, :issue:`3035`, :issue:`3021`, :issue:`2982`, :issue:`3230`),\n   ``kill`` & ``pkill`` (:issue:`3200`), ``screen`` (:issue:`3271`), ``wget`` (:issue:`3470`),\n   and ``xz`` (:issue:`3378`).\n-  Distributors, packagers and developers will notice that the build\n   process produces more succinct output by default; use ``make V=1`` to\n   get verbose output (:issue:`3248`).\n-  Improved compatibility with minor platforms including musl (:issue:`2988`),\n   Cygwin (:issue:`2993`), Android (:issue:`3441`, :issue:`3442`), Haiku (:issue:`3322`) and Solaris .\n\n--------------\n\nfish 2.3.1 (released July 3, 2016)\n==================================\n\nThis is a functionality and bugfix release. This release does not\ncontain all the changes to fish since the last release, but fixes a\nnumber of issues directly affecting users at present and includes a\nsmall number of new features.\n\n.. _significant-changes-1:\n\nSignificant changes\n-------------------\n\n-  A new ``fish_key_reader`` binary for decoding interactive keypresses\n   (:issue:`2991`).\n-  ``fish_mode_prompt`` has been updated to reflect the changes in the\n   way the Vi input mode is set up (:issue:`3067`), making this more reliable.\n-  ``fish_config`` can now properly be launched from the OS X app bundle\n   (:issue:`3140`).\n\n.. _notable-fixes-and-improvements-6:\n\nNotable fixes and improvements\n------------------------------\n\n-  Extra lines were sometimes inserted into the output under Windows\n   (Cygwin and Microsoft Windows Subsystem for Linux) due to TTY\n   timestamps not being updated (:issue:`2859`).\n-  The ``string`` builtin’s ``match`` mode now handles the combination\n   of ``-rnv`` (match, invert and count) correctly (:issue:`3098`).\n-  Improvements to TTY special character handling (:issue:`3064`), locale\n   handling (:issue:`3124`) and terminal environment variable handling (:issue:`3060`).\n-  Work towards handling the terminal modes for external commands\n   launched from initialisation files (:issue:`2980`).\n-  Ease the upgrade path from fish 2.2.0 and before by warning users to\n   restart fish if the ``string`` builtin is not available (:issue:`3057`).\n-  ``type -a`` now syntax-colorizes function source output.\n-  Added completions for ``alsamixer``, ``godoc``, ``gofmt``,\n   ``goimports``, ``gorename``, ``lscpu``, ``mkdir``, ``modinfo``,\n   ``netctl-auto``, ``poweroff``, ``termite``, ``udisksctl`` and ``xz``\n   (:issue:`3123`).\n-  Improved completions for ``apt`` (:issue:`3097`), ``aura`` (:issue:`3102`),\\ ``git``\n   (:issue:`3114`), ``npm`` (:issue:`3158`), ``string`` and ``suspend`` (:issue:`3154`).\n\n--------------\n\nfish 2.3.0 (released May 20, 2016)\n==================================\n\nThere are no significant changes between 2.3.0 and 2.3b2.\n\nOther notable fixes and improvements\n------------------------------------\n\n-  ``abbr`` now allows non-letter keys (:issue:`2996`).\n-  Define a few extra colours on first start (:issue:`2987`).\n-  Multiple documentation updates.\n-  Added completions for rmmod (:issue:`3007`).\n-  Improved completions for git (:issue:`2998`).\n\n.. _known-issues-2:\n\nKnown issues\n------------\n\n-  Interactive commands started from fish configuration files or from\n   the ``-c`` option may, under certain circumstances, be started with\n   incorrect terminal modes and fail to behave as expected. A fix is\n   planned but requires further testing (:issue:`2619`).\n\n--------------\n\nfish 2.3b2 (released May 5, 2016)\n=================================\n\n.. _significant-changes-2:\n\nSignificant changes\n-------------------\n\n-  A new ``fish_realpath`` builtin and associated function to allow the\n   use of ``realpath`` even on those platforms that don’t ship an\n   appropriate command (:issue:`2932`).\n-  Alt-# toggles the current command line between commented and\n   uncommented states, making it easy to save a command in history\n   without executing it.\n-  The ``fish_vi_mode`` function is now deprecated in favour of\n   ``fish_vi_key_bindings``.\n\n.. _other-notable-fixes-and-improvements-1:\n\nOther notable fixes and improvements\n------------------------------------\n\n-  Fix the build on Cygwin (:issue:`2952`) and RedHat Enterprise Linux/CentOS 5\n   (:issue:`2955`).\n-  Avoid confusing the terminal line driver with non-printing characters\n   in ``fish_title`` (:issue:`2453`).\n-  Improved completions for busctl, git (:issue:`2585`, :issue:`2879`, :issue:`2984`), and\n   netctl.\n\n--------------\n\nfish 2.3b1 (released April 19, 2016)\n====================================\n\n.. _significant-changes-3:\n\nSignificant Changes\n-------------------\n\n-  A new ``string`` builtin to handle… strings! This builtin will\n   measure, split, search and replace text strings, including using\n   regular expressions. It can also be used to turn lists into plain\n   strings using ``join``. ``string`` can be used in place of ``sed``,\n   ``grep``, ``tr``, ``cut``, and ``awk`` in many situations. (:issue:`2296`)\n-  Allow using escape as the Meta modifier key, by waiting after seeing\n   an escape character wait up to 300ms for an additional character.\n   This is consistent with readline (e.g. bash) and can be configured\n   via the ``fish_escape_delay_ms variable``. This allows using escape\n   as the Meta modifier. (:issue:`1356`)\n-  Add new directories for vendor functions and configuration snippets\n   (:issue:`2500`)\n-  A new ``fish_realpath`` builtin and associated ``realpath`` function\n   should allow scripts to resolve path names via ``realpath``\n   regardless of whether there is an external command of that name;\n   albeit with some limitations. See the associated documentation.\n\nBackward-incompatible changes\n-----------------------------\n\n-  Unmatched globs will now cause an error, except when used with\n   ``for``, ``set`` or ``count`` (:issue:`2719`)\n-  ``and`` and ``or`` will now bind to the closest ``if`` or ``while``,\n   allowing compound conditions without ``begin`` and ``end`` (:issue:`1428`)\n-  ``set -ql`` now searches up to function scope for variables (:issue:`2502`)\n-  ``status -f`` will now behave the same when run as the main script or\n   using ``source`` (:issue:`2643`)\n-  ``source`` no longer puts the file name in ``$argv`` if no arguments\n   are given (:issue:`139`)\n-  History files are stored under the ``XDG_DATA_HOME`` hierarchy (by\n   default, in ``~/.local/share``), and existing history will be moved\n   on first use (:issue:`744`)\n\n.. _other-notable-fixes-and-improvements-2:\n\nOther notable fixes and improvements\n------------------------------------\n\n-  Fish no longer silences errors in config.fish (:issue:`2702`)\n-  Directory autosuggestions will now descend as far as possible if\n   there is only one child directory (:issue:`2531`)\n-  Add support for bright colors (:issue:`1464`)\n-  Allow Ctrl-J (``\\cj``) to be bound separately from Ctrl-M\n   (``\\cm``) (:issue:`217`)\n-  psub now has a “-s”/“–suffix” option to name the temporary file with\n   that suffix\n-  Enable 24-bit colors on select terminals (:issue:`2495`)\n-  Support for SVN status in the prompt (:issue:`2582`)\n-  Mercurial and SVN support have been added to the Classic + Git (now\n   Classic + VCS) prompt (via the new \\__fish_vcs_prompt function)\n   (:issue:`2592`)\n-  export now handles variables with a “=” in the value (:issue:`2403`)\n-  New completions for:\n\n   -  alsactl\n   -  Archlinux’s asp, makepkg\n   -  Atom’s apm (:issue:`2390`)\n   -  entr - the “Event Notify Test Runner” (:issue:`2265`)\n   -  Fedora’s dnf (:issue:`2638`)\n   -  OSX diskutil (:issue:`2738`)\n   -  pkgng (:issue:`2395`)\n   -  pulseaudio’s pacmd and pactl\n   -  rust’s rustc and cargo (:issue:`2409`)\n   -  sysctl (:issue:`2214`)\n   -  systemd’s machinectl (:issue:`2158`), busctl (:issue:`2144`), systemd-nspawn,\n      systemd-analyze, localectl, timedatectl\n   -  and more\n\n-  Fish no longer has a function called sgrep, freeing it for user\n   customization (:issue:`2245`)\n-  A rewrite of the completions for cd, fixing a few bugs (:issue:`2299`, :issue:`2300`,\n   :issue:`562`)\n-  Linux VTs now run in a simplified mode to avoid issues (:issue:`2311`)\n-  The vi-bindings now inherit from the emacs bindings\n-  Fish will also execute ``fish_user_key_bindings`` when in vi-mode\n-  ``funced`` will now also check $VISUAL (:issue:`2268`)\n-  A new ``suspend`` function (:issue:`2269`)\n-  Subcommand completion now works better with split /usr (:issue:`2141`)\n-  The command-not-found-handler can now be overridden by defining a\n   function called ``__fish_command_not_found_handler`` in config.fish\n   (:issue:`2332`)\n-  A few fixes to the Sorin theme\n-  PWD shortening in the prompt can now be configured via the\n   ``fish_prompt_pwd_dir_length`` variable, set to the length per path\n   component (:issue:`2473`)\n-  fish no longer requires ``/etc/fish/config.fish`` to correctly start,\n   and now ships a skeleton file that only contains some documentation\n   (:issue:`2799`)\n\n--------------\n\nfish 2.2.0 (released July 12, 2015)\n===================================\n\n.. _significant-changes-4:\n\nSignificant changes\n-------------------\n\n-  Abbreviations: the new ``abbr`` command allows for\n   interactively-expanded abbreviations, allowing quick access to\n   frequently-used commands (:issue:`731`).\n-  Vi mode: run ``fish_vi_mode`` to switch fish into the key bindings\n   and prompt familiar to users of the Vi editor (:issue:`65`).\n-  New inline and interactive pager, which will be familiar to users of\n   zsh (:issue:`291`).\n-  Underlying architectural changes: the ``fishd`` universal variable\n   server has been removed as it was a source of many bugs and security\n   problems. Notably, old fish sessions will not be able to communicate\n   universal variable changes with new fish sessions. For best results,\n   restart all running instances of ``fish``.\n-  The web-based configuration tool has been redesigned, featuring a\n   prompt theme chooser and other improvements.\n-  New German, Brazilian Portuguese, and Chinese translations.\n\n.. _backward-incompatible-changes-1:\n\nBackward-incompatible changes\n-----------------------------\n\nThese are kept to a minimum, but either change undocumented features or\nare too hard to use in their existing forms. These changes may break\nexisting scripts.\n\n-  ``commandline`` no longer interprets functions “in reverse”, instead\n   behaving as expected (:issue:`1567`).\n-  The previously-undocumented ``CMD_DURATION`` variable is now set for\n   all commands and contains the execution time of the last command in\n   milliseconds (:issue:`1585`). It is no longer exported to other commands\n   (:issue:`1896`).\n-  ``if`` / ``else`` conditional statements now return values consistent\n   with the Single Unix Specification, like other shells (:issue:`1443`).\n-  A new “top-level” local scope has been added, allowing local\n   variables declared on the commandline to be visible to subsequent\n   commands. (:issue:`1908`)\n\n.. _other-notable-fixes-and-improvements-3:\n\nOther notable fixes and improvements\n------------------------------------\n\n-  New documentation design (:issue:`1662`), which requires a Doxygen version\n   1.8.7 or newer to build.\n-  Fish now defines a default directory for other packages to provide\n   completions. By default this is\n   ``/usr/share/fish/vendor-completions.d``; on systems with\n   ``pkgconfig`` installed this path is discoverable with\n   ``pkg-config --variable completionsdir fish``.\n-  A new parser removes many bugs; all existing syntax should keep\n   working.\n-  New ``fish_preexec`` and ``fish_postexec`` events are fired before\n   and after job execution respectively (:issue:`1549`).\n-  Unmatched wildcards no longer prevent a job from running. Wildcards\n   used interactively will still print an error, but the job will\n   proceed and the wildcard will expand to zero arguments (:issue:`1482`).\n-  The ``.`` command is deprecated and the ``source`` command is\n   preferred (:issue:`310`).\n-  ``bind`` supports “bind modes”, which allows bindings to be set for a\n   particular named mode, to support the implementation of Vi mode.\n-  A new ``export`` alias, which behaves like other shells (:issue:`1833`).\n-  ``command`` has a new ``--search`` option to print the name of the\n   disk file that would be executed, like other shells’ ``command -v``\n   (:issue:`1540`).\n-  ``commandline`` has a new ``--paging-mode`` option to support the new\n   pager.\n-  ``complete`` has a new ``--wraps`` option, which allows a command to\n   (recursively) inherit the completions of a wrapped command (:issue:`393`),\n   and ``complete -e`` now correctly erases completions (:issue:`380`).\n-  Completions are now generated from manual pages by default on the\n   first run of fish (:issue:`997`).\n-  ``fish_indent`` can now produce colorized (``--ansi``) and HTML\n   (``--html``) output (:issue:`1827`).\n-  ``functions --erase`` now prevents autoloaded functions from being\n   reloaded in the current session.\n-  ``history`` has a new ``--merge`` option, to incorporate history from\n   other sessions into the current session (:issue:`825`).\n-  ``jobs`` returns 1 if there are no active jobs (:issue:`1484`).\n-  ``read`` has several new options:\n-  ``--array`` to break input into an array (:issue:`1540`)\n-  ``--null`` to break lines on NUL characters rather than newlines\n   (:issue:`1694`)\n-  ``--nchars`` to read a specific number of characters (:issue:`1616`)\n-  ``--right-prompt`` to display a right-hand-side prompt during\n   interactive read (:issue:`1698`).\n-  ``type`` has a new ``-q`` option to suppress output (:issue:`1540` and, like\n   other shells, ``type -a`` now prints all matches for a command\n   (:issue:`261`).\n-  Pressing :kbd:`f1` now shows the manual page for the current command\n   (:issue:`1063`).\n-  ``fish_title`` functions have access to the arguments of the\n   currently running argument as ``$argv[1]`` (:issue:`1542`).\n-  The OS command-not-found handler is used on Arch Linux (:issue:`1925`), nixOS\n   (:issue:`1852`), openSUSE and Fedora (:issue:`1280`).\n-  ``Alt``\\ +\\ ``.`` searches backwards in the token history, mapping to\n   the same behavior as inserting the last argument of the previous\n   command, like other shells (:issue:`89`).\n-  The ``SHLVL`` environment variable is incremented correctly (:issue:`1634` &\n   :issue:`1693`).\n-  Added completions for ``adb`` (:issue:`1165` & :issue:`1211`), ``apt`` (:issue:`2018`),\n   ``aura`` (:issue:`1292`), ``composer`` (:issue:`1607`), ``cygport`` (:issue:`1841`),\n   ``dropbox`` (:issue:`1533`), ``elixir`` (:issue:`1167`), ``fossil``, ``heroku``\n   (:issue:`1790`), ``iex`` (:issue:`1167`), ``kitchen`` (:issue:`2000`), ``nix`` (:issue:`1167`),\n   ``node``/``npm`` (:issue:`1566`), ``opam`` (:issue:`1615`), ``setfacl`` (:issue:`1752`),\n   ``tmuxinator`` (:issue:`1863`), and ``yast2`` (:issue:`1739`).\n-  Improved completions for ``brew`` (:issue:`1090` & :issue:`1810`), ``bundler``\n   (:issue:`1779`), ``cd`` (:issue:`1135`), ``emerge`` (:issue:`1840`),\\ ``git`` (:issue:`1680`, :issue:`1834` &\n   :issue:`1951`), ``man`` (:issue:`960`), ``modprobe`` (:issue:`1124`), ``pacman`` (:issue:`1292`),\n   ``rpm`` (:issue:`1236`), ``rsync`` (:issue:`1872`), ``scp`` (:issue:`1145`), ``ssh`` (:issue:`1234`),\n   ``sshfs`` (:issue:`1268`), ``systemctl`` (:issue:`1462`, :issue:`1950` & :issue:`1972`), ``tmux``\n   (:issue:`1853`), ``vagrant`` (:issue:`1748`), ``yum`` (:issue:`1269`), and ``zypper``\n   (:issue:`1787`).\n\n--------------\n\nfish 2.1.2 (released Feb 24, 2015)\n==================================\n\nfish 2.1.2 contains a workaround for a filesystem bug in Mac OS X\nYosemite. :issue:`1859`\n\nSpecifically, after installing fish 2.1.1 and then rebooting, “Verify\nDisk” in Disk Utility will report “Invalid number of hard links.” We\ndon’t have any reports of data loss or other adverse consequences. fish\n2.1.2 avoids triggering the bug, but does not repair an already affected\nfilesystem. To repair the filesystem, you can boot into Recovery Mode\nand use Repair Disk from Disk Utility. Linux and versions of OS X prior\nto Yosemite are believed to be unaffected.\n\nThere are no other changes in this release.\n\n--------------\n\nfish 2.1.1 (released September 26, 2014)\n========================================\n\n**Important:** if you are upgrading, stop all running instances of\n``fishd`` as soon as possible after installing this release; it will be\nrestarted automatically. On most systems, there will be no further\naction required. Note that some environments (where ``XDG_RUNTIME_DIR``\nis set), such as Fedora 20, will require a restart of all running fish\nprocesses before universal variables work as intended.\n\nDistributors are highly encouraged to call ``killall fishd``,\n``pkill fishd`` or similar in installation scripts, or to warn their\nusers to do so.\n\nSecurity fixes\n--------------\n\n-  The fish_config web interface now uses an authentication token to\n   protect requests and only responds to requests from the local machine\n   with this token, preventing a remote code execution attack. (closing\n   CVE-2014-2914). :issue:`1438`\n-  ``psub`` and ``funced`` are no longer vulnerable to attacks which\n   allow local privilege escalation and data tampering (closing\n   CVE-2014-2906 and CVE-2014-3856). :issue:`1437`\n-  ``fishd`` uses a secure path for its socket, preventing a local\n   privilege escalation attack (closing CVE-2014-2905). :issue:`1436`\n-  ``__fish_print_packages`` is no longer vulnerable to attacks which\n   would allow local privilege escalation and data tampering (closing\n   CVE-2014-3219). :issue:`1440`\n\nOther fixes\n-----------\n\n-  ``fishd`` now ignores SIGPIPE, fixing crashes using tools like GNU\n   Parallel and which occurred more often as a result of the other\n   ``fishd`` changes. :issue:`1084` & :issue:`1690`\n\n--------------\n\nfish 2.1.0\n==========\n\n.. _significant-changes-5:\n\nSignificant Changes\n-------------------\n\n-  **Tab completions will fuzzy-match files.** :issue:`568`\n\n   When tab-completing a file, fish will first attempt prefix matches\n   (``foo`` matches ``foobar``), then substring matches (``ooba``\n   matches ``foobar``), and lastly subsequence matches (``fbr`` matches\n   ``foobar``). For example, in a directory with files foo1.txt,\n   foo2.txt, foo3.txt…, you can type only the numeric part and hit tab\n   to fill in the rest.\n\n   This feature is implemented for files and executables. It is not yet\n   implemented for options (like ``--foobar``), and not yet implemented\n   across path components (like ``/u/l/b`` to match ``/usr/local/bin``).\n\n-  **Redirections now work better across pipelines.** :issue:`110`, :issue:`877`\n\n   In particular, you can pipe stderr and stdout together, for example,\n   with ``cmd ^&1 | tee log.txt``, or the more familiar\n   ``cmd 2>&1 | tee log.txt``.\n\n-  **A single ``%`` now expands to the last job backgrounded.** :issue:`1008`\n\n   Previously, a single ``%`` would pid-expand to either all\n   backgrounded jobs, or all jobs owned by your user. Now it expands to\n   the last job backgrounded. If no job is in the background, it will\n   fail to expand. In particular, ``fg %`` can be used to put the most\n   recent background job in the foreground.\n\nOther Notable Fixes\n-------------------\n\n-  alt-U and alt+C now uppercase and capitalize words, respectively.\n   :issue:`995`\n\n-  VTE based terminals should now know the working directory. :issue:`906`\n\n-  The autotools build now works on Mavericks. :issue:`968`\n\n-  The end-of-line binding (ctrl+E) now accepts autosuggestions. :issue:`932`\n\n-  Directories in ``/etc/paths`` (used on OS X) are now prepended\n   instead of appended, similar to other shells. :issue:`927`\n\n-  Option-right-arrow (used for partial autosuggestion completion) now\n   works on iTerm2. :issue:`920`\n\n-  Tab completions now work properly within nested subcommands. :issue:`913`\n\n-  ``printf`` supports ``\\e``, the escape character. :issue:`910`\n\n-  ``fish_config history`` no longer shows duplicate items. :issue:`900`\n\n-  ``$fish_user_paths`` is now prepended to $PATH instead of appended.\n   :issue:`888`\n\n-  Jobs complete when all processes complete. :issue:`876`\n\n   For example, in previous versions of fish, ``sleep 10 | echo Done``\n   returns control immediately, because echo does not read from stdin.\n   Now it does not complete until sleep exits (presumably after 10\n   seconds).\n\n-  Better error reporting for square brackets. :issue:`875`\n\n-  fish no longer tries to add ``/bin`` to ``$PATH`` unless PATH is\n   totally empty. :issue:`852`\n\n-  History token substitution (alt-up) now works correctly inside\n   subshells. :issue:`833`\n\n-  Flow control is now disabled, freeing up ctrl-S and ctrl-Q for other\n   uses. :issue:`814`\n\n-  sh-style variable setting like ``foo=bar`` now produces better error\n   messages. :issue:`809`\n\n-  Commands with wildcards no longer produce autosuggestions. :issue:`785`\n\n-  funced no longer freaks out when supplied with no arguments. :issue:`780`\n\n-  fish.app now works correctly in a directory containing spaces. :issue:`774`\n\n-  Tab completion cycling no longer occasionally fails to repaint. :issue:`765`\n\n-  Comments now work in eval’d strings. :issue:`684`\n\n-  History search (up-arrow) now shows the item matching the\n   autosuggestion, if that autosuggestion was truncated. :issue:`650`\n\n-  Ctrl-T now transposes characters, as in other shells. :issue:`128`\n\n--------------\n\nfish 2.0.0\n==========\n\n.. _significant-changes-6:\n\nSignificant Changes\n-------------------\n\n-  **Command substitutions now modify ``$status`` :issue:`547`.** Previously the\n   exit status of command substitutions (like ``(pwd)``) was ignored;\n   however now it modifies $status. Furthermore, the ``set`` command now\n   only sets $status on failure; it is untouched on success. This allows\n   for the following pattern:\n\n   .. code:: sh\n\n      if set python_path (which python)\n         ...\n      end\n\n   Because set does not modify $status on success, the if branch\n   effectively tests whether ``which`` succeeded, and if so, whether the\n   ``set`` also succeeded.\n\n-  Improvements to PATH handling. There is a new variable, fish_user_paths,\n   which can be set universally, and whose contents are appended to\n   $PATH :issue:`527`\n\n   -  /etc/paths and /etc/paths.d are now respected on OS X\n   -  fish no longer modifies $PATH to find its own binaries\n\n-  **Long lines no longer use ellipsis for line breaks**, and copy and\n   paste should no longer include a newline even if the line was broken\n   :issue:`300`\n\n-  **New syntax for index ranges** (sometimes known as “slices”) :issue:`212`\n\n-  **fish now supports an ``else if`` statement** :issue:`134`\n\n-  **Process and pid completion now works on OS X** :issue:`129`\n\n-  **fish is now relocatable**, and no longer depends on compiled-in\n   paths :issue:`125`\n\n-  **fish now supports a right prompt (RPROMPT)** through the\n   fish_right_prompt function :issue:`80`\n\n-  **fish now uses posix_spawn instead of fork when possible**, which is\n   much faster on BSD and OS X :issue:`11`\n\n.. _other-notable-fixes-1:\n\nOther Notable Fixes\n-------------------\n\n-  Updated VCS completions (darcs, cvs, svn, etc.)\n-  Avoid calling getcwd on the main thread, as it can hang :issue:`696`\n-  Control-D (forward delete) no longer stops at a period :issue:`667`\n-  Completions for many new commands\n-  fish now respects rxvt’s unique keybindings :issue:`657`\n-  xsel is no longer built as part of fish. It will still be invoked if\n   installed separately :issue:`633`\n-  \\__fish_filter_mime no longer spews :issue:`628`\n-  The –no-execute option to fish no longer falls over when reaching the\n   end of a block :issue:`624`\n-  fish_config knows how to find fish even if it’s not in the $PATH :issue:`621`\n-  A leading space now prevents writing to history, as is done in bash\n   and zsh :issue:`615`\n-  Hitting enter after a backslash only goes to a new line if it is\n   followed by whitespace or the end of the line :issue:`613`\n-  printf is now a builtin :issue:`611`\n-  Event handlers should no longer fire if signals are blocked :issue:`608`\n-  set_color is now a builtin :issue:`578`\n-  man page completions are now located in a new generated_completions\n   directory, instead of your completions directory :issue:`576`\n-  tab now clears autosuggestions :issue:`561`\n-  tab completion from within a pair of quotes now attempts to\n   “appropriate” the closing quote :issue:`552`\n-  $EDITOR can now be a list: for example, ``set EDITOR gvim -f``) :issue:`541`\n-  ``case`` bodies are now indented :issue:`530`\n-  The profile switch ``-p`` no longer crashes :issue:`517`\n-  You can now control-C out of ``read`` :issue:`516`\n-  ``umask`` is now functional on OS X :issue:`515`\n-  Avoid calling getpwnam on the main thread, as it can hang :issue:`512`\n-  Alt-F or Alt-right-arrow (Option-F or option-right-arrow) now accepts\n   one word of an autosuggestion :issue:`435`\n-  Setting fish as your login shell no longer kills OpenSUSE :issue:`367`\n-  Backslashes now join lines, instead of creating multiple commands\n   :issue:`347`\n-  echo now implements the -e flag to interpret escapes :issue:`337`\n-  When the last token in the user’s input contains capital letters, use\n   its case in preference to that of the autosuggestion :issue:`335`\n-  Descriptions now have their own muted color :issue:`279`\n-  Wildcards beginning with a . (for example, ``ls .*``) no longer match\n   . and .. :issue:`270`\n-  Recursive wildcards now handle symlink loops :issue:`268`\n-  You can now delete history items from the fish_config web interface\n   :issue:`250`\n-  The OS X build now weak links ``wcsdup`` and ``wcscasecmp`` :issue:`240`\n-  fish now saves and restores the process group, which prevents certain\n   processes from being erroneously reported as stopped :issue:`197`\n-  funced now takes an editor option :issue:`187`\n-  Alternating row colors are available in fish pager through\n   ``fish_pager_color_secondary`` :issue:`186`\n-  Universal variable values are now stored based on your MAC address,\n   not your hostname :issue:`183`\n-  The caret ^ now only does a stderr redirection if it is the first\n   character of a token, making git users happy :issue:`168`\n-  Autosuggestions will no longer cause line wrapping :issue:`167`\n-  Better handling of Unicode combining characters :issue:`155`\n-  fish SIGHUPs processes more often :issue:`138`\n-  fish no longer causes ``sudo`` to ask for a password every time\n-  fish behaves better under Midnight Commander :issue:`121`\n-  ``set -e`` no longer crashes :issue:`100`\n-  fish now will automatically import history from bash, if there is no\n   fish history :issue:`66`\n-  Backslashed-newlines inside quoted strings now behave more\n   intuitively :issue:`52`\n-  Tab titles should be shown correctly in iTerm2 :issue:`47`\n-  scp remote path completion now sometimes works :issue:`42`\n-  The ``read`` builtin no longer shows autosuggestions :issue:`29`\n-  Custom key bindings can now be set via the ``fish_user_key_bindings``\n   function :issue:`21`\n-  All Python scripts now run correctly under both Python 2 and Python 3\n   :issue:`14`\n-  The “accept autosuggestion” key can now be configured :issue:`19`\n-  Autosuggestions will no longer suggest invalid commands :issue:`6`\n\n--------------\n\nfishfish Beta r2\n================\n\nBug Fixes\n---------\n\n-  **Implicit cd** is back, for paths that start with one or two dots, a\n   slash, or a tilde.\n-  **Overrides of default functions should be fixed.** The “internalized\n   scripts” feature is disabled for now.\n-  **Disabled delayed suspend.** This is a strange job-control feature\n   of BSD systems, including OS X. Disabling it frees up Control Y for\n   other purposes; in particular, for yank, which now works on OS X.\n-  **fish_indent is fixed.** In particular, the ``funced`` and\n   ``funcsave`` functions work again.\n-  A SIGTERM now ends the whole execution stack again (resolving :issue:`13`).\n-  Bumped the \\__fish_config_interactive version number so the default\n   fish_color_autosuggestion kicks in.\n-  fish_config better handles combined term256 and classic colors like\n   “555 yellow”.\n\nNew Features\n------------\n\n-  **A history builtin**, and associated interactive function that\n   enables deleting history items. Example usage: \\* Print all history\n   items beginning with echo: ``history --prefix echo`` \\* Print all\n   history items containing foo: ``history --contains foo`` \\*\n   Interactively delete some items containing foo:\n   ``history --delete --contains foo``\n\nCredit to @siteshwar for implementation. Thanks @siteshwar!\n\n--------------\n\nfishfish Beta r1\n================\n\nScripting\n---------\n\n-  No changes! All existing fish scripts, config files, completions,\n   etc. from trunk should continue to work.\n\n.. _new-features-1:\n\nNew Features\n------------\n\n-  **Autosuggestions**. Think URL fields in browsers. When you type a\n   command, fish will suggest the rest of the command after the cursor,\n   in a muted gray when possible. You can accept the suggestion with the\n   right arrow key or Ctrl-F. Suggestions come from command history,\n   completions, and some custom code for cd; there’s a lot of potential\n   for improvement here. The suggestions are computed on a background\n   pthread, so they never slow down your typing. The autosuggestion\n   feature is incredible. I miss it dearly every time I use anything\n   else.\n\n-  **term256 support** where available, specifically modern xterms and\n   OS X Lion. You can specify colors the old way (‘set_color cyan’) or\n   by specifying RGB hex values (‘set_color FF3333’); fish will pick the\n   closest supported color. Some xterms do not advertise term256 support\n   either in the $TERM or terminfo max_colors field, but nevertheless\n   support it. For that reason, fish will default into using it on any\n   xterm (but it can be disabled with an environment variable).\n\n-  **Web-based configuration** page. There is a new function\n   ‘fish_config’. This spins up a simple Python web server and opens a\n   browser window to it. From this web page, you can set your shell\n   colors and view your functions, variables, and history; all changes\n   apply immediately to all running shells. Eventually all configuration\n   ought to be supported via this mechanism (but in addition to, not\n   instead of, command line mechanisms).\n\n-  **Man page completions**. There is a new function\n   ‘fish_update_completions’. This function reads all the man1 files\n   from your manpath, removes the roff formatting, parses them to find\n   the commands and options, and outputs fish completions into\n   ~/.config/fish/completions. It won’t overwrite existing completion\n   files (except ones that it generated itself).\n\nProgrammatic Changes\n--------------------\n\n-  fish is now entirely in C++. I have no particular love for C++, but\n   it provides a ready memory-model to replace halloc. We’ve made an\n   effort to keep it to a sane and portable subset (no C++11, no boost,\n   no going crazy with templates or smart pointers), but we do use the\n   STL and a little tr1.\n-  halloc is entirely gone, replaced by normal C++ ownership semantics.\n   If you don’t know what halloc is, well, now you have two reasons to\n   be happy.\n-  All the crufty C data structures are entirely gone. array_list_t,\n   priority_queue_t, hash_table_t, string_buffer_t have been removed and\n   replaced by STL equivalents like std::vector, std::map, and\n   std::wstring. A lot of the string handling now uses std::wstring\n   instead of wchar_t \\*\n-  fish now spawns pthreads for tasks like syntax highlighting that\n   require blocking I/O.\n-  History has been completely rewritten. History files now use an\n   extensible YAML-style syntax. History “merging” (multiple shells\n   writing to the same history file) now works better. There is now a\n   maximum history length of about 250k items (256 \\* 1024).\n-  The parser has been “instanced,” so you can now create more than one.\n-  Total #LoC has shrunk slightly even with the new features.\n\nPerformance\n-----------\n\n-  fish now runs syntax highlighting in a background thread, so typing\n   commands is always responsive even on slow filesystems.\n-  echo, test, and pwd are now builtins, which eliminates many forks.\n-  The files in share/functions and share/completions now get\n   ‘internalized’ into C strings that get compiled in with fish. This\n   substantially reduces the number of files touched at startup. A\n   consequence is that you cannot change these functions without\n   recompiling, but often other functions depend on these “standard”\n   functions, so changing them is perhaps not a good idea anyways.\n\nHere are some system call counts for launching and then exiting fish\nwith the default configuration, on OS X. The first column is fish trunk,\nthe next column is with our changes, and the last column is bash for\ncomparison. This data was collected via dtrace.\n\n.. raw:: html\n\n   <table>\n\n.. raw:: html\n\n   <tr>\n\n.. raw:: html\n\n   <th>\n\n.. raw:: html\n\n   <th>\n\nbefore\n\n.. raw:: html\n\n   <th>\n\nafter\n\n.. raw:: html\n\n   <th>\n\nbash\n\n.. raw:: html\n\n   <tr>\n\n.. raw:: html\n\n   <th>\n\nopen\n\n.. raw:: html\n\n   <td>\n\n9\n\n.. raw:: html\n\n   <td>\n\n4\n\n.. raw:: html\n\n   <td>\n\n5\n\n.. raw:: html\n\n   <tr>\n\n.. raw:: html\n\n   <th>\n\nfork\n\n.. raw:: html\n\n   <td>\n\n28\n\n.. raw:: html\n\n   <td>\n\n14\n\n.. raw:: html\n\n   <td>\n\n0\n\n.. raw:: html\n\n   <tr>\n\n.. raw:: html\n\n   <th>\n\nstat\n\n.. raw:: html\n\n   <td>\n\n131\n\n.. raw:: html\n\n   <td>\n\n85\n\n.. raw:: html\n\n   <td>\n\n11\n\n.. raw:: html\n\n   <tr>\n\n.. raw:: html\n\n   <th>\n\nlstat\n\n.. raw:: html\n\n   <td>\n\n670\n\n.. raw:: html\n\n   <td>\n\n0\n\n.. raw:: html\n\n   <td>\n\n0\n\n.. raw:: html\n\n   <tr>\n\n.. raw:: html\n\n   <th>\n\nread\n\n.. raw:: html\n\n   <td>\n\n332\n\n.. raw:: html\n\n   <td>\n\n80\n\n.. raw:: html\n\n   <td>\n\n4\n\n.. raw:: html\n\n   <tr>\n\n.. raw:: html\n\n   <th>\n\nwrite\n\n.. raw:: html\n\n   <td>\n\n172\n\n.. raw:: html\n\n   <td>\n\n149\n\n.. raw:: html\n\n   <td>\n\n0\n\n.. raw:: html\n\n   </table>\n\nThe large number of forks relative to bash are due to fish’s insanely\nexpensive default prompt, which is unchanged in my version. If we switch\nto a prompt comparable to bash’s (lame) default, the forks drop to 16\nwith trunk, 4 after our changes.\n\nThe large reduction in lstat() numbers is due to fish no longer needing\nto call ttyname() on OS X.\n\nWe’ve got some work to do to be as lean as bash, but we’re on the right\ntrack.\n\n.. vim: ft=rst : tw=0 :\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 2.59,
          "content": "cmake_minimum_required(VERSION 3.15)\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/cmake\")\n\nproject(fish LANGUAGES C)\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nset(DEFAULT_BUILD_TYPE \"RelWithDebInfo\")\n\n# Generate Xcode schemas (but not for tests).\nset(CMAKE_XCODE_GENERATE_SCHEME 1)\n\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    message(STATUS \"Setting build type to default '${DEFAULT_BUILD_TYPE}'\")\n    set(CMAKE_BUILD_TYPE \"${DEFAULT_BUILD_TYPE}\")\nendif()\n\n# Set up standard directories.\ninclude(GNUInstallDirs)\nadd_definitions(-D_UNICODE=1)\n\ninclude(cmake/gettext.cmake)\n\n# Set up PCRE2\n# This sets an environment variable that needs to be available before the Rust stanzas\ninclude(cmake/PCRE2.cmake)\n\ninclude(cmake/Rust.cmake)\n\n# Work around issue where archive-built libs go in the wrong place.\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})\n\nif(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_CURRENT_BINARY_DIR)\n  set(FISH_IN_TREE_BUILD TRUE)\nelse()\n  set(FISH_IN_TREE_BUILD FALSE)\nendif()\n\n# Set up the machinery around FISH-BUILD-VERSION-FILE\n# This defines the FBVF variable.\ninclude(Version)\n\n# Let fish pick up when we're running out of the build directory without installing\nget_filename_component(REAL_CMAKE_BINARY_DIR \"${CMAKE_BINARY_DIR}\" REALPATH)\nget_filename_component(REAL_CMAKE_SOURCE_DIR \"${CMAKE_SOURCE_DIR}\" REALPATH)\nadd_definitions(-DCMAKE_BINARY_DIR=\"${REAL_CMAKE_BINARY_DIR}\")\nadd_definitions(-DCMAKE_SOURCE_DIR=\"${REAL_CMAKE_SOURCE_DIR}\")\n\n# Define a function to build and link dependencies.\nfunction(CREATE_TARGET target)\n  add_custom_target(\n    ${target} ALL\n    COMMAND\n      \"${CMAKE_COMMAND}\" -E\n        env ${VARS_FOR_CARGO}\n          ${Rust_CARGO}\n            build --bin ${target}\n            $<$<CONFIG:Release>:--release>\n            $<$<CONFIG:RelWithDebInfo>:--profile=release-with-debug>\n            --target ${Rust_CARGO_TARGET}\n            --no-default-features\n            ${CARGO_FLAGS}\n            ${FEATURES_ARG}\n      &&\n      \"${CMAKE_COMMAND}\" -E\n        copy \"${rust_target_dir}/${rust_profile}/${target}\" \"${CMAKE_CURRENT_BINARY_DIR}\"\n    WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\"\n    USES_TERMINAL\n  )\nendfunction(CREATE_TARGET)\n\n# Define fish.\ncreate_target(fish)\n\n# Define fish_indent.\ncreate_target(fish_indent)\n\n# Define fish_key_reader.\ncreate_target(fish_key_reader)\n\n# Set up the docs.\ninclude(cmake/Docs.cmake)\n\n# Set up tests.\ninclude(cmake/Tests.cmake)\n\n# Benchmarking support.\ninclude(cmake/Benchmark.cmake)\n\n# Set up install.\ninclude(cmake/Install.cmake)\n\n# Mac app.\ninclude(cmake/MacApp.cmake)\n\ninclude(FeatureSummary)\nfeature_summary(WHAT ALL)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.05,
          "content": "\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 14.6,
          "content": "####################\nContributing To Fish\n####################\n\nThis document tells you how you can contribute to fish.\n\nFish is free and open source software, distributed under the terms of the GPLv2.\n\nContributions are welcome, and there are many ways to contribute!\n\nWhether you want to change some of the core Rust source, enhance or add a completion script or function,\nimprove the documentation or translate something, this document will tell you how.\n\nGetting Set Up\n==============\n\nFish is developed on Github, at https://github.com/fish-shell/fish-shell.\n\nFirst, you'll need an account there, and you'll need a git clone of fish.\nFork it on Github and then run::\n\n  git clone https://github.com/<USERNAME>/fish-shell.git\n\nThis will create a copy of the fish repository in the directory fish-shell in your current working directory.\n\nAlso, for most changes you want to run the tests and so you'd get a setup to compile fish.\nFor that, you'll require:\n\n-  Rust - when in doubt, try rustup\n-  CMake\n-  PCRE2 (headers and libraries) - optional, this will be downloaded if missing\n-  gettext (headers and libraries) - optional, for translation support\n-  Sphinx - optional, to build the documentation\n\nOf course not everything is required always - if you just want to contribute something to the documentation you'll just need Sphinx,\nand if the change is very simple and obvious you can just send it in. Use your judgement!\n\nOnce you have your changes, open a pull request on https://github.com/fish-shell/fish-shell/pulls.\n\nGuidelines\n==========\n\nIn short:\n\n- Be conservative in what you need (keep to the agreed minimum supported Rust version, limit new dependencies)\n- Use automated tools to help you (including ``make test`` and ``build_tools/style.fish``)\n\nContributing completions\n========================\n\nCompletion scripts are the most common contribution to fish, and they are very welcome.\n\nIn general, we'll take all well-written completion scripts for a command that is publically available.\nThis means no private tools or personal scripts, and we do reserve the right to reject for other reasons.\n\nBefore you try to contribute them to fish, consider if the authors of the tool you are completing want to maintain the script instead.\nOften that makes more sense, specifically because they can add new options to the script immediately once they add them,\nand don't have to maintain one completion script for multiple versions. If the authors no longer wish to maintain the script,\nthey can of course always contact the fish maintainers to hand it over, preferably by opening a PR.\nThis isn't a requirement - if the authors don't want to maintain it, or you simply don't want to contact them,\nyou can contribute your script to fish.\n\nCompletion scripts should\n\n1. Use as few dependencies as possible - try to use fish's builtins like ``string`` instead of ``grep`` and ``awk``,\n   use ``python`` to read json instead of ``jq`` (because it's already a soft dependency for fish's tools)\n2. If it uses a common unix tool, use posix-compatible invocations - ideally it would work on GNU/Linux, macOS, the BSDs and other systems\n3. Option and argument descriptions should be kept short.\n   The shorter the description, the more likely it is that fish can use more columns.\n4. Function names should start with ``__fish``, and functions should be kept in the completion file unless they're used elsewhere.\n5. Run ``fish_indent`` on your script.\n6. Try not to use minor convenience features right after they are available in fish - we do try to keep completion scripts backportable.\n   If something has a real impact on the correctness or performance, feel free to use it,\n   but if it is just a shortcut, please leave it.\n\nPut your completion script into share/completions/name-of-command.fish. If you have multiple commands, you need multiple files.\n\nIf you want to add tests, you probably want to add a littlecheck test. See below for details.\n\nContributing documentation\n==========================\n\nThe documentation is stored in ``doc_src/``, and written in ReStructured Text and built with Sphinx.\n\nTo build it locally, run from the main fish-shell directory::\n\n    sphinx-build -j 8 -b html -n doc_src/ /tmp/fish-doc/\n\nwhich will build the docs as html in /tmp/fish-doc. You can open it in a browser and see that it looks okay.\n\nThe builtins and various functions shipped with fish are documented in doc_src/cmds/.\n\nCode Style\n==========\n\nTo ensure your changes conform to the style rules run\n\n::\n\n   build_tools/style.fish\n\nbefore committing your change. That will run our autoformatters:\n\n- ``rustfmt`` for Rust\n- ``fish_indent`` (shipped with fish) for fish script\n- ``black`` for python\n\nIf you’ve already committed your changes that’s okay since it will then\ncheck the files in the most recent commit. This can be useful after\nyou’ve merged another person’s change and want to check that it’s style\nis acceptable. However, in that case it will run ``clang-format`` to\nensure the entire file, not just the lines modified by the commit,\nconform to the style.\n\nIf you want to check the style of the entire code base run\n\n::\n\n   build_tools/style.fish --all\n\nThat command will refuse to restyle any files if you have uncommitted\nchanges.\n\nFish Script Style Guide\n-----------------------\n\n1. All fish scripts, such as those in the *share/functions* and *tests*\n   directories, should be formatted using the ``fish_indent`` command.\n\n2. Function names should be in all lowercase with words separated by\n   underscores. Private functions should begin with an underscore. The\n   first word should be ``fish`` if the function is unique to fish.\n\n3. The first word of global variable names should generally be ``fish``\n   for public vars or ``_fish`` for private vars to minimize the\n   possibility of name clashes with user defined vars.\n\nConfiguring Your Editor for Fish Scripts\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you use Vim: Install `vim-fish <https://github.com/dag/vim-fish>`__,\nmake sure you have syntax and filetype functionality in ``~/.vimrc``:\n\n::\n\n   syntax enable\n   filetype plugin indent on\n\nThen turn on some options for nicer display of fish scripts in\n``~/.vim/ftplugin/fish.vim``:\n\n::\n\n   \" Set up :make to use fish for syntax checking.\n   compiler fish\n\n   \" Set this to have long lines wrap inside comments.\n   setlocal textwidth=79\n\n   \" Enable folding of block structures in fish.\n   setlocal foldmethod=expr\n\nIf you use Emacs: Install\n`fish-mode <https://github.com/wwwjfy/emacs-fish>`__ (also available in\nmelpa and melpa-stable) and ``(setq-default indent-tabs-mode nil)`` for\nit (via a hook or in ``use-package``\\ s “:init” block). It can also be\nmade to run fish_indent via e.g.\n\n.. code:: elisp\n\n   (add-hook 'fish-mode-hook (lambda ()\n       (add-hook 'before-save-hook 'fish_indent-before-save)))\n\nRust Style Guide\n----------------\n\nUse ``cargo fmt`` and ``cargo clippy``. Clippy warnings can be turned off if there's a good reason to.\n\nTesting\n=======\n\nThe source code for fish includes a large collection of tests. If you\nare making any changes to fish, running these tests is a good way to make\nsure the behaviour remains consistent and regressions are not\nintroduced. Even if you don’t run the tests on your machine, they will\nstill be run via Github Actions.\n\nYou are strongly encouraged to add tests when changing the functionality\nof fish, especially if you are fixing a bug to help ensure there are no\nregressions in the future (i.e., we don’t reintroduce the bug).\n\nThe tests can be found in three places:\n\n- src/tests for unit tests.\n- tests/checks for script tests, run by `littlecheck <https://github.com/ridiculousfish/littlecheck>`__\n- tests/pexpects for interactive tests using `pexpect <https://pexpect.readthedocs.io/en/stable/>`__\n\nWhen in doubt, the bulk of the tests should be added as a littlecheck test in tests/checks, as they are the easiest to modify and run, and much faster and more dependable than pexpect tests. The syntax is fairly self-explanatory. It's a fish script with the expected output in ``# CHECK:`` or ``# CHECKERR:`` (for stderr) comments.\nIf your littlecheck test has a specific dependency, use ``# REQUIRE: ...`` with a posix sh script.\n\nTests are run in a temporary $HOME, but that is shared among the tests by default. If you need a temporary directory for your test, you should create one (e.g. with ``mktemp``).\n\nThe pexpects are written in python and can simulate input and output to/from a terminal, so they are needed for anything that needs actual interactivity. The runner is in tests/pexpect_helper.py, in case you need to modify something there.\n\nIf you need a command to do something weird to test something, maybe add it to the ``fish_test_helper`` binary (in tests/fish_test_helper.c), or see if it can already do it.\n\nLocal testing\n-------------\n\nThe tests can be run on your local computer on all operating systems.\n\n::\n\n   cmake path/to/fish-shell\n   make test\n\nOr you can run them on a fish, without involving cmake::\n\n  cargo build\n  FISHDIR=target/debug tests/test_driver.sh tests/test.fish # script tests, the checks\n  FISHDIR=target/debug tests/test_driver.sh tests/interactive.fish # interactive tests, the pexpects\n\nHere, ``FISHDIR`` refers to a directory with ``fish``, ``fish_indent`` and ``fish_key_reader`` in it.\nIn this example we're in the root of the git repo and have run ``cargo build`` without ``--release``, so it's a debug build.\n\nGit hooks\n---------\n\nSince developers sometimes forget to run the tests, it can be helpful to\nuse git hooks (see githooks(5)) to automate it.\n\nOne possibility is a pre-push hook script like this one:\n\n.. code:: sh\n\n   #!/bin/sh\n   #### A pre-push hook for the fish-shell project\n   # This will run the tests when a push to master is detected, and will stop that if the tests fail\n   # Save this as .git/hooks/pre-push and make it executable\n\n   protected_branch='master'\n\n   # Git gives us lines like \"refs/heads/frombranch SOMESHA1 refs/heads/tobranch SOMESHA1\"\n   # We're only interested in the branches\n   while read from _ to _; do\n       if [ \"x$to\" = \"xrefs/heads/$protected_branch\" ]; then\n           isprotected=1\n       fi\n   done\n   if [ \"x$isprotected\" = x1 ]; then\n       echo \"Running tests before push to master\"\n       make test\n       RESULT=$?\n       if [ $RESULT -ne 0 ]; then\n           echo \"Tests failed for a push to master, we can't let you do that\" >&2\n           exit 1\n       fi\n   fi\n   exit 0\n\nThis will check if the push is to the master branch and, if it is, only\nallow the push if running ``make test`` succeeds. In some circumstances\nit may be advisable to circumvent this check with\n``git push --no-verify``, but usually that isn’t necessary.\n\nTo install the hook, place the code in a new file\n``.git/hooks/pre-push`` and make it executable.\n\nCoverity Scan\n-------------\n\nWe use Coverity’s static analysis tool which offers free access to open\nsource projects. While access to the tool itself is restricted,\nfish-shell organization members should know that they can login\n`here <https://scan.coverity.com/projects/fish-shell-fish-shell?tab=overview>`__\nwith their GitHub account. Currently, tests are triggered upon merging\nthe ``master`` branch into ``coverity_scan_master``. Even if you are not\na fish developer, you can keep an eye on our statistics there.\n\nContributing Translations\n=========================\n\nFish uses the GNU gettext library to translate messages from English to\nother languages.\n\nCreating and updating translations requires the Gettext tools, including\n``xgettext``, ``msgfmt`` and ``msgmerge``. Translation sources are\nstored in the ``po`` directory, named ``LANG.po``, where ``LANG`` is the\ntwo letter ISO 639-1 language code of the target language (eg ``de`` for\nGerman).\n\nTo create a new translation:\n\n* generate a ``messages.pot`` file by running ``build_tools/fish_xgettext.fish`` from\n  the source tree\n* copy ``messages.pot`` to ``po/LANG.po``\n\nTo update a translation:\n\n* generate a ``messages.pot`` file by running\n  ``build_tools/fish_xgettext.fish`` from the source tree\n\n* update the existing translation by running\n  ``msgmerge --update --no-fuzzy-matching po/LANG.po messages.pot``\n\nThe ``--no-fuzzy-matching`` is important as we have had terrible experiences with gettext's \"fuzzy\" translations in the past.\n\nMany tools are available for editing translation files, including\ncommand-line and graphical user interface programs. For simple use, you can just use your text editor.\n\nOpen up the po file, for example ``po/sv.po``, and you'll see something like::\n\n  msgid \"%ls: No suitable job\\n\"\n  msgstr \"\" \n\nThe ``msgid`` here is the \"name\" of the string to translate, typically the english string to translate. The second line (``msgstr``) is where your translation goes.\n\nFor example::\n\n  msgid \"%ls: No suitable job\\n\"\n  msgstr \"%ls: Inget passande jobb\\n\"\n\nAny ``%s`` / ``%ls`` or ``%d`` are placeholders that fish will use for formatting at runtime. It is important that they match - the translated string should have the same placeholders in the same order.\n\nAlso any escaped characters, like that ``\\n`` newline at the end, should be kept so the translation has the same behavior.\n\nOur tests run ``msgfmt --check-format /path/to/file``, so they would catch mismatched placeholders - otherwise fish would crash at runtime when the string is about to be used.\n\nBe cautious about blindly updating an existing translation file. Trivial\nchanges to an existing message (eg changing the punctuation) will cause\nexisting translations to be removed, since the tools do literal string\nmatching. Therefore, in general, you need to carefully review any\nrecommended deletions.\n\nSetting Code Up For Translations\n--------------------------------\n\nAll non-debug messages output for user consumption should be marked for\ntranslation. In Rust, this requires the use of the ``wgettext!`` or ``wgettext_fmt!``\nmacros:\n\n::\n\n   streams.out.append(wgettext_fmt!(\"%ls: There are no jobs\\n\", argv[0]));\n\nAll messages in fish script must be enclosed in single or double quote\ncharacters for our message extraction script to find them.\nThey must also be translated via a command substitution. This means\nthat the following are **not** valid:\n\n::\n\n   echo (_ hello)\n   _ \"goodbye\"\n\nAbove should be written like this instead:\n\n::\n\n   echo (_ \"hello\")\n   echo (_ \"goodbye\")\n\nYou can use either single or double quotes to enclose the\nmessage to be translated. You can also optionally include spaces after\nthe opening parentheses or before the closing parentheses.\n\nVersioning\n==========\n\nThe fish version is constructed by the *build_tools/git_version_gen.sh*\nscript. For developers the version is the branch name plus the output of\n``git describe --always --dirty``. Normally the main part of the version\nwill be the closest annotated tag. Which itself is usually the most\nrecent release number (e.g., ``2.6.0``).\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 0.81,
          "content": "Fish is a smart and user-friendly command line shell.\n\nCopyright (C) 2005-2009 Axel Liljencrantz\nCopyright (C) 2009- fish-shell contributors\n\nfish is free software.\n\nMost of fish is licensed under the GNU General Public License version 2, and\nyou can redistribute it and/or modify it under the terms of the GNU GPL as\npublished by the Free Software Foundation.\n\nfish also includes software licensed under the Python Software Foundation License version 2, the MIT\nlicense, and the GNU Library General Public License version 2.\n\nFull licensing information is contained in doc_src/license.rst.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT\nANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\nFITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\nmore details.\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 16.53,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"allocator-api2\"\nversion = \"0.2.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"683d7910e743518b0e34f1186f92494becacb047c7b6bf616c96772180fef923\"\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ace50bade8e6234aa140d9a2f552bbee1db4d353f69b8217bc503490fc1a9f26\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b048fb63fd8b5923fc5aa7b340d8e156aec7ec02f0c78fa8a6ddc2613f6f71de\"\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.2.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a012a0df96dd6d06ba9a1b29d6402d1a5d77c6befd2566afdc26e10603dc93d7\"\ndependencies = [\n \"jobserver\",\n \"libc\",\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"cfg_aliases\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"613afe47fcd5fac7ccf1db93babcb082c5994d996f20b8b159f2ad1658eb5724\"\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"16b80225097f2e5ae4e7179dd2266824648f3e2f49d9134d584b76389d31c4c3\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"typenum\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"crypto-common\",\n]\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"errno\"\nversion = \"0.3.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33d852cb9b869c2a9b3df2f71a3074817f01e1844f839a144f5fcef059a4eb5d\"\ndependencies = [\n \"libc\",\n \"windows-sys\",\n]\n\n[[package]]\nname = \"fish\"\nversion = \"4.0.0-beta.1\"\ndependencies = [\n \"bitflags\",\n \"cc\",\n \"errno\",\n \"fish-printf\",\n \"libc\",\n \"lru\",\n \"nix\",\n \"num-traits\",\n \"once_cell\",\n \"pcre2\",\n \"portable-atomic\",\n \"rand\",\n \"rsconf\",\n \"rust-embed\",\n \"serial_test\",\n \"terminfo\",\n \"widestring\",\n]\n\n[[package]]\nname = \"fish-printf\"\nversion = \"0.2.1\"\ndependencies = [\n \"libc\",\n \"widestring\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"foldhash\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a0d2fde1f7b3d48b8395d5f2de76c18a528bd6a9cdde438df747bfcba3e05d6f\"\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.15.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289\"\ndependencies = [\n \"allocator-api2\",\n \"equivalent\",\n \"foldhash\",\n]\n\n[[package]]\nname = \"jobserver\"\nversion = \"0.1.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"48d1dbcbbeb6a7fec7e059840aa538bd62aaccf972c7346c4d9d2059312853d0\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.169\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5aba8db14291edd000dfcc4d620c7ebfb122c613afb886ca8803fa4e128a20a\"\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17\"\ndependencies = [\n \"autocfg\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24\"\n\n[[package]]\nname = \"lru\"\nversion = \"0.12.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"234cf4f4a04dc1f57e24b96cc0cd600cf2af460d4161ac5ecdd0af8e1f3b2a38\"\ndependencies = [\n \"hashbrown\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"minimal-lexical\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a\"\n\n[[package]]\nname = \"nix\"\nversion = \"0.29.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"71e2746dc3a24dd78b3cfcb7be93368c6de9963d30f43a6a73998a9cf4b17b46\"\ndependencies = [\n \"bitflags\",\n \"cfg-if\",\n \"cfg_aliases\",\n \"libc\",\n]\n\n[[package]]\nname = \"nom\"\nversion = \"7.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a\"\ndependencies = [\n \"memchr\",\n \"minimal-lexical\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.20.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1261fe7e33c73b354eab43b1273a57c8f967d0391e80353e51f764ac02cf6775\"\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1bf18183cf54e8d6059647fc3063646a1801cf30896933ec2311622cc4b9a27\"\ndependencies = [\n \"lock_api\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.9.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"redox_syscall\",\n \"smallvec\",\n \"windows-targets\",\n]\n\n[[package]]\nname = \"pcre2\"\nversion = \"0.2.9\"\nsource = \"git+https://github.com/fish-shell/rust-pcre2?tag=0.2.9-utf32#85b7afba1a9d9bd445779800e5bcafeb732e4421\"\ndependencies = [\n \"libc\",\n \"log\",\n \"pcre2-sys\",\n]\n\n[[package]]\nname = \"pcre2-sys\"\nversion = \"0.2.9\"\nsource = \"git+https://github.com/fish-shell/rust-pcre2?tag=0.2.9-utf32#85b7afba1a9d9bd445779800e5bcafeb732e4421\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"phf\"\nversion = \"0.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd6780a80ae0c52cc120a26a1a42c1ae51b247a253e4e06113d23d2c2edd078\"\ndependencies = [\n \"phf_shared\",\n]\n\n[[package]]\nname = \"phf_codegen\"\nversion = \"0.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aef8048c789fa5e851558d709946d6d79a8ff88c0440c587967f8e94bfb1216a\"\ndependencies = [\n \"phf_generator\",\n \"phf_shared\",\n]\n\n[[package]]\nname = \"phf_generator\"\nversion = \"0.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c80231409c20246a13fddb31776fb942c38553c51e871f8cbd687a4cfb5843d\"\ndependencies = [\n \"phf_shared\",\n \"rand\",\n]\n\n[[package]]\nname = \"phf_shared\"\nversion = \"0.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"67eabc2ef2a60eb7faa00097bd1ffdb5bd28e62bf39990626a582201b7a754e5\"\ndependencies = [\n \"siphasher\",\n]\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"953ec861398dccce10c670dfeaf3ec4911ca479e9c02154b3a215178c5f566f2\"\n\n[[package]]\nname = \"portable-atomic\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"280dc24453071f1b63954171985a0b0d30058d287960968b9b2aca264c8d4ee6\"\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37d3544b3f2748c54e147655edb5025752e2303145b5aefb3c3ea2c78b973bb0\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.38\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e4dccaaaf89514f546c693ddc140f729f958c247918a13380cccc6078391acc\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.5.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"03a862b389f93e68874fbf580b9de08dd02facb9a788ebadaf4a3fd33cf58834\"\ndependencies = [\n \"bitflags\",\n]\n\n[[package]]\nname = \"rsconf\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd2af859f1af0401e7fc7577739c87b0d239d8a5da400d717183bca92336bcdc\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"rust-embed\"\nversion = \"8.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa66af4a4fdd5e7ebc276f115e895611a34739a9c1c01028383d612d550953c0\"\ndependencies = [\n \"rust-embed-impl\",\n \"rust-embed-utils\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"rust-embed-impl\"\nversion = \"8.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6125dbc8867951125eec87294137f4e9c2c96566e61bf72c45095a7c77761478\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"rust-embed-utils\",\n \"syn\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"rust-embed-utils\"\nversion = \"8.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2e5347777e9aacb56039b0e1f28785929a8a3b709e87482e7442c72e7c12529d\"\ndependencies = [\n \"sha2\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"scc\"\nversion = \"2.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"28e1c91382686d21b5ac7959341fcb9780fa7c03773646995a87c950fa7be640\"\ndependencies = [\n \"sdd\",\n]\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49\"\n\n[[package]]\nname = \"sdd\"\nversion = \"3.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"478f121bb72bbf63c52c93011ea1791dca40140dfe13f8336c4c5ac952c33aa9\"\n\n[[package]]\nname = \"serial_test\"\nversion = \"3.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b258109f244e1d6891bf1053a55d63a5cd4f8f4c30cf9a1280989f80e7a1fa9\"\ndependencies = [\n \"once_cell\",\n \"parking_lot\",\n \"scc\",\n \"serial_test_derive\",\n]\n\n[[package]]\nname = \"serial_test_derive\"\nversion = \"3.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5d69265a08751de7844521fd15003ae0a888e035773ba05695c5c759a6f89eef\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"siphasher\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56199f7ddabf13fe5074ce809e7d3f42b42ae711800501b5b16ea82ad029c39d\"\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46f71c0377baf4ef1cc3e3402ded576dccc315800fbc62dfc7fe04b009773b4a\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"terminfo\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4ea810f0692f9f51b382fff5893887bb4580f5fa246fde546e0b13e7fcee662\"\ndependencies = [\n \"fnv\",\n \"nom\",\n \"phf\",\n \"phf_codegen\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adb9e6ca4f869e1180728b7950e35922a7fc6397f7b641499e8f3ef06e50dc83\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"walkdir\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29790946404f91d9c5d06f9874efddea1dc06c5efe94541a7d6863108e3a5e4b\"\ndependencies = [\n \"same-file\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"widestring\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7219d36b6eac893fa81e84ebe06485e7dcbb616177469b142df14f1f4deb1311\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf221c93e13a30d793f7645a0e7762c55d169dbb0a49671918a2319d289b10bb\"\ndependencies = [\n \"windows-sys\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.59.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973\"\ndependencies = [\n \"windows_aarch64_gnullvm\",\n \"windows_aarch64_msvc\",\n \"windows_i686_gnu\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc\",\n \"windows_x86_64_gnu\",\n \"windows_x86_64_gnullvm\",\n \"windows_x86_64_msvc\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec\"\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.74,
          "content": "[workspace]\nresolver = \"2\"\nmembers = [\"printf\"]\n\n[workspace.package]\n# To build revisions that use Corrosion (those before 2024-01), CMake 3.19 and Rustc 1.78 seem to work.\nrust-version = \"1.70\"\nedition = \"2021\"\n\n[profile.release]\noverflow-checks = true\nlto = true\n\n[profile.release-with-debug]\ninherits = \"release\"\ndebug = true\n\n[package]\nname = \"fish\"\nversion = \"4.0.0-beta.1\"\nedition.workspace = true\nrust-version.workspace = true\ndefault-run = \"fish\"\n# see doc_src/license.rst for details\n# don't forget to update COPYING and debian/copyright too\nlicense = \"GPL-2.0-only AND LGPL-2.0-or-later AND MIT AND PSF-2.0\"\nrepository = \"https://github.com/fish-shell/fish-shell\"\nhomepage = \"https://fishshell.com\"\nreadme = \"README.rst\"\n\n[dependencies]\npcre2 = { git = \"https://github.com/fish-shell/rust-pcre2\", tag = \"0.2.9-utf32\", default-features = false, features = [\n    \"utf32\",\n] }\n\nbitflags = \"2.5.0\"\nerrno = \"0.3.0\"\nlibc = \"0.2\"\n# lru pulls in hashbrown by default, which uses a faster (though less DoS resistant) hashing algo.\n# disabling default features uses the stdlib instead, but it doubles the time to rewrite the history\n# files as of 22 April 2024.\nlru = \"0.12.3\"\nnix = { version = \"0.29.0\", default-features = false, features = [\n    \"event\",\n    \"inotify\",\n    \"resource\",\n    \"fs\",\n] }\nnum-traits = \"0.2.19\"\nonce_cell = \"1.19.0\"\nfish-printf = { path = \"./printf\", features = [\"widestring\"] }\n\n# Don't use the \"getrandom\" feature as it requires \"getentropy\" which was not\n# available on macOS < 10.12. We can enable \"getrandom\" when we raise the\n# minimum supported version to 10.12.\nrand = { version = \"0.8.5\", default-features = false, features = [\"small_rng\"] }\nwidestring = \"1.1.0\"\n# We need 0.9.0 specifically for some crash fixes.\nterminfo = \"0.9.0\"\nrust-embed = { version = \"8.2.0\", optional = true }\n\n[target.'cfg(not(target_has_atomic = \"64\"))'.dependencies]\nportable-atomic = { version = \"1\", default-features = false, features = [\n    \"fallback\",\n] }\n\n[dev-dependencies]\nserial_test = { version = \"3\", default-features = false }\n\n[build-dependencies]\ncc = \"1.0.94\"\nrsconf = \"0.2.2\"\n\n[lib]\ncrate-type = [\"rlib\"]\npath = \"src/lib.rs\"\n\n[[bin]]\nname = \"fish\"\npath = \"src/bin/fish.rs\"\n\n[[bin]]\nname = \"fish_indent\"\npath = \"src/bin/fish_indent.rs\"\n\n[[bin]]\nname = \"fish_key_reader\"\npath = \"src/bin/fish_key_reader.rs\"\n\n[features]\ndefault = [\"installable\"]\nbenchmark = []\ninstallable = [\"dep:rust-embed\"]\n\n# The following features are auto-detected by the build-script and should not be enabled manually.\nasan = []\ntsan = []\n\n[lints]\nrust.non_camel_case_types = \"allow\"\nrust.non_upper_case_globals = \"allow\"\nrust.unknown_lints = \"allow\"\nrust.unstable_name_collisions = \"allow\"\nclippy.manual_range_contains = \"allow\"\nclippy.needless_return = \"allow\"\nclippy.needless_lifetimes = \"allow\"\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.29,
          "content": "FROM centos:latest\n\n# Build dependency\nRUN yum update -y &&\\\n  yum install -y epel-release &&\\\n  yum install -y clang cmake3 gcc-c++ make &&\\\n  yum clean all\n\n# Test dependency\nRUN yum install -y expect vim-common\n\nADD . /src\nWORKDIR /src\n\n# Build fish\nRUN cmake3 . &&\\\n  make &&\\\n  make install\n"
        },
        {
          "name": "GNUmakefile",
          "type": "blob",
          "size": 1.7,
          "content": "# This is a very basic `make` wrapper around the CMake build toolchain.\n#\n# Supported arguments:\n#   PREFIX: sets the installation prefix\n#   GENERATOR: explicitly specifies the CMake generator to use\n\nCMAKE ?= cmake\n\nGENERATOR ?= $(shell (which ninja > /dev/null 2> /dev/null && echo Ninja) || \\\n\t\t\t echo 'Unix Makefiles')\nprefix ?= /usr/local\nPREFIX ?= $(prefix)\n\nifeq ($(GENERATOR), Ninja)\nBUILDFILE = build.ninja\nelse\nBUILDFILE = Makefile\nendif\n\n\n# If CMake has generated an in-tree Makefile, use that instead (issue #6264)\nMAKE_DIR:=$(shell dirname $(realpath $(firstword $(MAKEFILE_LIST))))\nifeq ($(shell test -f $(MAKE_DIR)/Makefile && echo 1), 1)\n\nall:\n\t@+$(MAKE) -f $(MAKE_DIR)/Makefile $(MAKECMDGOALS) --no-print-directory\n%:\n\t@+$(MAKE) -f $(MAKE_DIR)/Makefile $(MAKECMDGOALS) --no-print-directory\n\nelse\n\nall: .begin build/fish\n\n.PHONY: .begin\n.begin:\n\t@which $(CMAKE) > /dev/null 2> /dev/null || \\\n\t\t (echo 'Please install CMake and then re-run the `make` command!' 1>&2 && false)\n\n.PHONY: build/fish\nbuild/fish: build/$(BUILDFILE)\n\t$(CMAKE) --build build\n\n# Use build as an order-only dependency. This prevents the target from always being outdated\n# after a make run, and more importantly, doesn't clobber manually specified CMake options.\nbuild/$(BUILDFILE): | build\n\tcd build; $(CMAKE) .. -G \"$(GENERATOR)\" \\\n\t\t-DCMAKE_INSTALL_PREFIX=\"$(PREFIX)\" -DCMAKE_EXPORT_COMPILE_COMMANDS=1\n\nbuild:\n\tmkdir -p build\n\n.PHONY: clean\nclean:\n\trm -rf build\n\n.PHONY: test\ntest: build/fish\n\t$(CMAKE) --build build --target test\n\n.PHONY: install\ninstall: build/fish\n\t$(CMAKE) --build build --target install\n\n.PHONY: run\nrun: build/fish\n\t./build/fish || true\n\n.PHONY: exec\nexec: build/fish\n\texec ./build/fish\n\nendif # CMake in-tree build check\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 8.65,
          "content": ".. |Cirrus CI| image:: https://api.cirrus-ci.com/github/fish-shell/fish-shell.svg?branch=master\n      :target: https://cirrus-ci.com/github/fish-shell/fish-shell\n      :alt: Cirrus CI Build Status\n\n`fish <https://fishshell.com/>`__ - the friendly interactive shell |Build Status| |Cirrus CI|\n=============================================================================================\n\nfish is a smart and user-friendly command line shell for macOS, Linux,\nand the rest of the family. fish includes features like syntax\nhighlighting, autosuggest-as-you-type, and fancy tab completions that\njust work, with no configuration required.\n\nFor downloads, screenshots and more, go to https://fishshell.com/.\n\nQuick Start\n-----------\n\nfish generally works like other shells, like bash or zsh. A few\nimportant differences can be found at\nhttps://fishshell.com/docs/current/tutorial.html by searching for the\nmagic phrase “unlike other shells”.\n\nDetailed user documentation is available by running ``help`` within\nfish, and also at https://fishshell.com/docs/current/index.html\n\nGetting fish\n------------\n\nmacOS\n~~~~~\n\nfish can be installed:\n\n-  using `Homebrew <http://brew.sh/>`__: ``brew install fish``\n-  using `MacPorts <https://www.macports.org/>`__:\n   ``sudo port install fish``\n-  using the `installer from fishshell.com <https://fishshell.com/>`__\n-  as a `standalone app from fishshell.com <https://fishshell.com/>`__\n\nNote: The minimum supported macOS version is 10.10 \"Yosemite\".\n\nPackages for Linux\n~~~~~~~~~~~~~~~~~~\n\nPackages for Debian, Fedora, openSUSE, and Red Hat Enterprise\nLinux/CentOS are available from the `openSUSE Build\nService <https://software.opensuse.org/download.html?project=shells%3Afish&package=fish>`__.\n\nPackages for Ubuntu are available from the `fish\nPPA <https://launchpad.net/~fish-shell/+archive/ubuntu/release-3>`__,\nand can be installed using the following commands:\n\n::\n\n   sudo apt-add-repository ppa:fish-shell/release-3\n   sudo apt update\n   sudo apt install fish\n\nInstructions for other distributions may be found at\n`fishshell.com <https://fishshell.com>`__.\n\nWindows\n~~~~~~~\n\n-  On Windows 10/11, fish can be installed under the WSL Windows Subsystem\n   for Linux with the instructions for the appropriate distribution\n   listed above under “Packages for Linux”, or from source with the\n   instructions below.\n-  fish (4.0 on and onwards) cannot be installed in Cygwin, due to a lack of Rust support.\n\nBuilding from source\n~~~~~~~~~~~~~~~~~~~~\n\nIf packages are not available for your platform, GPG-signed tarballs are\navailable from `fishshell.com <https://fishshell.com/>`__ and\n`fish-shell on\nGitHub <https://github.com/fish-shell/fish-shell/releases>`__. See the\n`Building <#building>`__ section for instructions.\n\nRunning fish\n------------\n\nOnce installed, run ``fish`` from your current shell to try fish out!\n\nDependencies\n~~~~~~~~~~~~\n\nRunning fish requires:\n\n-  A terminfo database, typically from curses or ncurses (preinstalled on most \\*nix systems) - this needs to be the directory tree format, not the \"hashed\" database.\n   If this is unavailable, fish uses an included xterm-256color definition.\n-  some common \\*nix system utilities (currently ``mktemp``), in\n   addition to the basic POSIX utilities (``cat``, ``cut``, ``dirname``,\n   ``file``, ``ls``, ``mkdir``, ``mkfifo``, ``rm``, ``sort``, ``tee``, ``tr``,\n   ``uname`` and ``sed`` at least, but the full coreutils plus ``find`` and\n   ``awk`` is preferred)\n-  The gettext library, if compiled with\n   translation support\n\nThe following optional features also have specific requirements:\n\n-  builtin commands that have the ``--help`` option or print usage\n   messages require ``nroff`` or ``mandoc`` for\n   display\n-  automated completion generation from manual pages requires Python 3.5+\n-  the ``fish_config`` web configuration tool requires Python 3.5+ and a web browser\n-  system clipboard integration (with the default Ctrl-V and Ctrl-X\n   bindings) require either the ``xsel``, ``xclip``,\n   ``wl-copy``/``wl-paste`` or ``pbcopy``/``pbpaste`` utilities\n-  full completions for ``yarn`` and ``npm`` require the\n   ``all-the-package-names`` NPM module\n-  ``colorls`` is used, if installed, to add color when running ``ls`` on platforms\n   that do not have color support (such as OpenBSD)\n\nBuilding\n--------\n\n.. _dependencies-1:\n\nDependencies\n~~~~~~~~~~~~\n\nCompiling fish requires:\n\n-  Rust (version 1.70 or later)\n-  CMake (version 3.15 or later)\n-  a C compiler (for system feature detection and the test helper binary)\n-  PCRE2 (headers and libraries) - optional, this will be downloaded if missing\n-  gettext (headers and libraries) - optional, for translation support\n-  an Internet connection, as other dependencies will be downloaded automatically\n\nSphinx is also optionally required to build the documentation from a\ncloned git repository.\n\nAdditionally, running the full test suite requires Python 3, tmux, and the pexpect package.\n\nBuilding from source with CMake\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRather than building from source, consider using a packaged build for your platform. Using the\nsteps below makes fish difficult to uninstall or upgrade. Release packages are available from the\nlinks above, and up-to-date `development builds of fish are available for many platforms\n<https://github.com/fish-shell/fish-shell/wiki/Development-builds>`__\n\nTo install into ``/usr/local``, run:\n\n.. code:: bash\n\n   mkdir build; cd build\n   cmake ..\n   cmake --build .\n   sudo cmake --install .\n\nThe install directory can be changed using the\n``-DCMAKE_INSTALL_PREFIX`` parameter for ``cmake``.\n\nCMake Build options\n~~~~~~~~~~~~~~~~~~~\n\nIn addition to the normal CMake build options (like ``CMAKE_INSTALL_PREFIX``), fish's CMake build has some other options available to customize it.\n\n- BUILD_DOCS=ON|OFF - whether to build the documentation. This is automatically set to OFF when Sphinx isn't installed.\n- INSTALL_DOCS=ON|OFF - whether to install the docs. This is automatically set to on when BUILD_DOCS is or prebuilt documentation is available (like when building in-tree from a tarball).\n- FISH_USE_SYSTEM_PCRE2=ON|OFF - whether to use an installed pcre2. This is normally autodetected.\n- MAC_CODESIGN_ID=String|OFF - the codesign ID to use on Mac, or \"OFF\" to disable codesigning.\n- WITH_GETTEXT=ON|OFF - whether to build with gettext support for translations.\n- extra_functionsdir, extra_completionsdir and extra_confdir - to compile in an additional directory to be searched for functions, completions and configuration snippets\n\nBuilding fish as self-installable (experimental)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can also build fish as a self-installing binary.\n\nThis will include all the datafiles like the included functions or web configuration tool in the main ``fish`` binary.\n\nOn the first interactive run, and whenever it notices they are out of date, it will extract the datafiles to ~/.local/share/fish/install/ (currently, subject to change). You can do this manually by running ``fish --install``.\n\nTo install fish as self-installable, just use ``cargo``, like::\n\n   cargo install --path /path/to/fish # if you have a git clone\n   cargo install --git https://github.com/fish-shell/fish-shell --tag 4.0 # to build from git once 4.0 is released\n   cargo install --git https://github.com/fish-shell/fish-shell # to build the current development snapshot without cloning\n\nThis will place the binaries in ``~/.cargo/bin/``, but you can place them wherever you want.\n\nThis build won't have the HTML docs (``help`` will open the online version) or translations.\n\nIt will try to build the man pages with sphinx-build. If that is not available and you would like to include man pages, you need to install it and retrigger the build script, e.g. by setting FISH_BUILD_DOCS=1::\n\n  FISH_BUILD_DOCS=1 cargo install --path .\n\nSetting it to \"0\" disables the inclusion of man pages.\n\nYou can also link this build statically (but not against glibc) and move it to other computers.\n\nContributing Changes to the Code\n--------------------------------\n\nSee the `Guide for Developers <CONTRIBUTING.rst>`__.\n\nContact Us\n----------\n\nQuestions, comments, rants and raves can be posted to the official fish\nmailing list at https://lists.sourceforge.net/lists/listinfo/fish-users\nor join us on our `matrix\nchannel <https://matrix.to/#/#fish-shell:matrix.org>`__. Or use the `fish tag\non Unix & Linux Stackexchange <https://unix.stackexchange.com/questions/tagged/fish>`__.\nThere is also a fish tag on Stackoverflow, but it is typically a poor fit.\n\nFound a bug? Have an awesome idea? Please `open an\nissue <https://github.com/fish-shell/fish-shell/issues/new>`__.\n\n.. |Build Status| image:: https://github.com/fish-shell/fish-shell/workflows/make%20test/badge.svg\n   :target: https://github.com/fish-shell/fish-shell/actions\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 16.7,
          "content": "#![allow(clippy::uninlined_format_args)]\n\nuse rsconf::{LinkType, Target};\nuse std::env;\nuse std::error::Error;\nuse std::path::{Path, PathBuf};\n\nfn main() {\n    setup_paths();\n\n    // Add our default to enable tools that don't go through CMake, like \"cargo test\" and the\n    // language server.\n\n    // FISH_BUILD_DIR is set by CMake, if we are using it.\n    // OUT_DIR is set by Cargo when the build script is running (not compiling)\n    let default_build_dir = env::var(\"OUT_DIR\").unwrap();\n    let build_dir = option_env!(\"FISH_BUILD_DIR\").unwrap_or(&default_build_dir);\n    let build_dir = std::fs::canonicalize(build_dir).unwrap();\n    let build_dir = build_dir.to_str().unwrap();\n    rsconf::set_env_value(\"FISH_BUILD_DIR\", build_dir);\n    // We need to canonicalize (i.e. realpath) the manifest dir because we want to be able to\n    // compare it directly as a string at runtime.\n    rsconf::set_env_value(\n        \"CARGO_MANIFEST_DIR\",\n        std::fs::canonicalize(env!(\"CARGO_MANIFEST_DIR\"))\n            .unwrap()\n            .as_path()\n            .to_str()\n            .unwrap(),\n    );\n\n    // Some build info\n    rsconf::set_env_value(\"BUILD_TARGET_TRIPLE\", &env::var(\"TARGET\").unwrap());\n    rsconf::set_env_value(\"BUILD_HOST_TRIPLE\", &env::var(\"HOST\").unwrap());\n    rsconf::set_env_value(\"BUILD_PROFILE\", &env::var(\"PROFILE\").unwrap());\n\n    let version = &get_version(&env::current_dir().unwrap());\n    // Per https://doc.rust-lang.org/cargo/reference/build-scripts.html#inputs-to-the-build-script,\n    // the source directory is the current working directory of the build script\n    rsconf::set_env_value(\"FISH_BUILD_VERSION\", version);\n\n    std::env::set_var(\"FISH_BUILD_VERSION\", version);\n\n    #[cfg(feature = \"installable\")]\n    #[cfg(not(clippy))]\n    {\n        let cman = std::fs::canonicalize(env!(\"CARGO_MANIFEST_DIR\")).unwrap();\n        let targetman = cman.as_path().join(\"target\").join(\"man\");\n        build_man(&targetman);\n    }\n    rsconf::rebuild_if_path_changed(\"src/libc.c\");\n    cc::Build::new()\n        .file(\"src/libc.c\")\n        .include(build_dir)\n        .compile(\"flibc.a\");\n\n    let mut build = cc::Build::new();\n    // Add to the default library search path\n    build.flag_if_supported(\"-L/usr/local/lib/\");\n    rsconf::add_library_search_path(\"/usr/local/lib\");\n    let mut target = Target::new_from(build).unwrap();\n    // Keep verbose mode on until we've ironed out rust build script stuff\n    target.set_verbose(true);\n    detect_cfgs(&mut target);\n\n    #[cfg(all(target_env = \"gnu\", target_feature = \"crt-static\"))]\n    compile_error!(\"Statically linking against glibc has unavoidable crashes and is unsupported. Use dynamic linking or link statically against musl.\");\n}\n\n/// Check target system support for certain functionality dynamically when the build is invoked,\n/// without their having to be explicitly enabled in the `cargo build --features xxx` invocation.\n///\n/// We are using [`rsconf::enable_cfg()`] instead of [`rsconf::enable_feature()`] as rust features\n/// should be used for things that a user can/would reasonably enable or disable to tweak or coerce\n/// behavior, but here we are testing for whether or not things are supported altogether.\n///\n/// This can be used to enable features that we check for and conditionally compile according to in\n/// our own codebase, but [can't be used to pull in dependencies](0) even if they're gated (in\n/// `Cargo.toml`) behind a feature we just enabled.\n///\n/// [0]: https://github.com/rust-lang/cargo/issues/5499\n#[rustfmt::skip]\nfn detect_cfgs(target: &mut Target) {\n    for (name, handler) in [\n        // Ignore the first entry, it just sets up the type inference. Model new entries after the\n        // second line.\n        (\n            \"\",\n            &(|_: &Target| Ok(false)) as &dyn Fn(&Target) -> Result<bool, Box<dyn Error>>,\n        ),\n        (\"bsd\", &detect_bsd),\n        (\"gettext\", &have_gettext),\n        (\"small_main_stack\", &has_small_stack),\n        // See if libc supports the thread-safe localeconv_l(3) alternative to localeconv(3).\n        (\"localeconv_l\", &|target| {\n            Ok(target.has_symbol(\"localeconv_l\"))\n        }),\n        (\"FISH_USE_POSIX_SPAWN\", &|target| {\n            Ok(target.has_header(\"spawn.h\"))\n        }),\n        (\"HAVE_PIPE2\", &|target| {\n            Ok(target.has_symbol(\"pipe2\"))\n        }),\n        (\"HAVE_EVENTFD\", &|target| {\n            // FIXME: NetBSD 10 has eventfd, but the libc crate does not expose it.\n            if cfg!(target_os = \"netbsd\") {\n                 Ok(false)\n             } else {\n                 Ok(target.has_header(\"sys/eventfd.h\"))\n            }\n        }),\n        (\"HAVE_WAITSTATUS_SIGNAL_RET\", &|target| {\n            Ok(target.r#if(\"WEXITSTATUS(0x007f) == 0x7f\", &[\"sys/wait.h\"]))\n        }),\n    ] {\n        match handler(target) {\n            Err(e) => {\n                rsconf::warn!(\"{}: {}\", name, e);\n                rsconf::declare_cfg(name, false);\n            },\n            Ok(enabled) => rsconf::declare_cfg(name, enabled),\n        }\n    }\n}\n\n/// Detect if we're being compiled for a BSD-derived OS, allowing targeting code conditionally with\n/// `#[cfg(bsd)]`.\n///\n/// Rust offers fine-grained conditional compilation per-os for the popular operating systems, but\n/// doesn't necessarily include less-popular forks nor does it group them into families more\n/// specific than \"windows\" vs \"unix\" so we can conditionally compile code for BSD systems.\nfn detect_bsd(_: &Target) -> Result<bool, Box<dyn Error>> {\n    // Instead of using `uname`, we can inspect the TARGET env variable set by Cargo. This lets us\n    // support cross-compilation scenarios.\n    let mut target = std::env::var(\"TARGET\").unwrap();\n    if !target.chars().all(|c| c.is_ascii_lowercase()) {\n        target = target.to_ascii_lowercase();\n    }\n    let is_bsd = target.ends_with(\"bsd\") || target.ends_with(\"dragonfly\");\n    #[cfg(any(\n        target_os = \"dragonfly\",\n        target_os = \"freebsd\",\n        target_os = \"netbsd\",\n        target_os = \"openbsd\",\n    ))]\n    assert!(is_bsd, \"Target incorrectly detected as not BSD!\");\n    Ok(is_bsd)\n}\n\n/// Detect libintl/gettext and its needed symbols to enable internationalization/localization\n/// support.\nfn have_gettext(target: &Target) -> Result<bool, Box<dyn Error>> {\n    // The following script correctly detects and links against gettext, but so long as we are using\n    // C++ and generate a static library linked into the C++ binary via CMake, we need to account\n    // for the CMake option WITH_GETTEXT being explicitly disabled.\n    rsconf::rebuild_if_env_changed(\"CMAKE_WITH_GETTEXT\");\n    if let Some(with_gettext) = std::env::var_os(\"CMAKE_WITH_GETTEXT\") {\n        if with_gettext.eq_ignore_ascii_case(\"0\") {\n            return Ok(false);\n        }\n    }\n\n    // In order for fish to correctly operate, we need some way of notifying libintl to invalidate\n    // its localizations when the locale environment variables are modified. Without the libintl\n    // symbol _nl_msg_cat_cntr, we cannot use gettext even if we find it.\n    let mut libraries = Vec::new();\n    let mut found = 0;\n    let symbols = [\"gettext\", \"_nl_msg_cat_cntr\"];\n    for symbol in &symbols {\n        // Historically, libintl was required in order to use gettext() and co, but that\n        // functionality was subsumed by some versions of libc.\n        if target.has_symbol(symbol) {\n            // No need to link anything special for this symbol\n            found += 1;\n            continue;\n        }\n        for library in [\"intl\", \"gettextlib\"] {\n            if target.has_symbol_in(symbol, &[library]) {\n                libraries.push(library);\n                found += 1;\n                continue;\n            }\n        }\n    }\n    match found {\n        0 => Ok(false),\n        1 => Err(format!(\"gettext found but cannot be used without {}\", symbols[1]).into()),\n        _ => {\n            rsconf::link_libraries(&libraries, LinkType::Default);\n            Ok(true)\n        }\n    }\n}\n\n/// Rust sets the stack size of newly created threads to a sane value, but is at at the mercy of the\n/// OS when it comes to the size of the main stack. Some platforms we support default to a tiny\n/// 0.5 MiB main stack, which is insufficient for fish's MAX_EVAL_DEPTH/MAX_STACK_DEPTH values.\n///\n/// 0.5 MiB is small enough that we'd have to drastically reduce MAX_STACK_DEPTH to less than 10, so\n/// we instead use a workaround to increase the main thread size.\nfn has_small_stack(_: &Target) -> Result<bool, Box<dyn Error>> {\n    #[cfg(not(any(target_os = \"macos\", target_os = \"netbsd\")))]\n    return Ok(false);\n\n    // NetBSD 10 also needs this but can't find pthread_get_stacksize_np.\n    #[cfg(target_os = \"netbsd\")]\n    return Ok(true);\n\n    #[cfg(target_os = \"macos\")]\n    {\n        use core::ffi;\n\n        extern \"C\" {\n            fn pthread_get_stacksize_np(thread: *const ffi::c_void) -> usize;\n            fn pthread_self() -> *const ffi::c_void;\n        }\n\n        // build.rs is executed on the main thread, so we are getting the main thread's stack size.\n        // Modern macOS versions default to an 8 MiB main stack but legacy OS X have a 0.5 MiB one.\n        let stack_size = unsafe { pthread_get_stacksize_np(pthread_self()) };\n        const TWO_MIB: usize = 2 * 1024 * 1024 - 1;\n        match stack_size {\n            0..=TWO_MIB => Ok(true),\n            _ => Ok(false),\n        }\n    }\n}\n\nfn setup_paths() {\n    fn get_path(name: &str, default: &str, onvar: &Path) -> PathBuf {\n        let mut var = PathBuf::from(env::var(name).unwrap_or(default.to_string()));\n        if var.is_relative() {\n            var = onvar.join(var);\n        }\n        var\n    }\n\n    let (prefix_from_home, prefix) = if let Ok(pre) = env::var(\"PREFIX\") {\n        (false, PathBuf::from(pre))\n    } else {\n        (true, PathBuf::from(\".local/\"))\n    };\n\n    // If someone gives us a $PREFIX, we need it to be absolute.\n    // Otherwise we would try to get it from $HOME and that won't really work.\n    if !prefix_from_home && prefix.is_relative() {\n        panic!(\"Can't have relative prefix\");\n    }\n\n    rsconf::rebuild_if_env_changed(\"PREFIX\");\n    rsconf::set_env_value(\"PREFIX\", prefix.to_str().unwrap());\n\n    let datadir = get_path(\"DATADIR\", \"share/\", &prefix);\n    rsconf::set_env_value(\"DATADIR\", datadir.to_str().unwrap());\n    rsconf::rebuild_if_env_changed(\"DATADIR\");\n\n    let datadir_subdir = if prefix_from_home {\n        \"fish/install\"\n    } else {\n        \"fish\"\n    };\n    rsconf::set_env_value(\"DATADIR_SUBDIR\", datadir_subdir);\n\n    let bindir = get_path(\"BINDIR\", \"bin/\", &prefix);\n    rsconf::set_env_value(\"BINDIR\", bindir.to_str().unwrap());\n    rsconf::rebuild_if_env_changed(\"BINDIR\");\n\n    let sysconfdir = get_path(\n        \"SYSCONFDIR\",\n        // If we get our prefix from $HOME, we should use the system's /etc/\n        // ~/.local/share/etc/ makes no sense\n        if prefix_from_home { \"/etc/\" } else { \"etc/\" },\n        &datadir,\n    );\n    rsconf::set_env_value(\"SYSCONFDIR\", sysconfdir.to_str().unwrap());\n    rsconf::rebuild_if_env_changed(\"SYSCONFDIR\");\n\n    let localedir = get_path(\"LOCALEDIR\", \"locale/\", &datadir);\n    rsconf::set_env_value(\"LOCALEDIR\", localedir.to_str().unwrap());\n    rsconf::rebuild_if_env_changed(\"LOCALEDIR\");\n\n    let docdir = get_path(\"DOCDIR\", \"doc/fish\", &datadir);\n    rsconf::set_env_value(\"DOCDIR\", docdir.to_str().unwrap());\n    rsconf::rebuild_if_env_changed(\"DOCDIR\");\n}\n\nfn get_version(src_dir: &Path) -> String {\n    use std::fs::read_to_string;\n    use std::process::Command;\n\n    if let Ok(var) = std::env::var(\"FISH_BUILD_VERSION\") {\n        return var;\n    }\n\n    let path = src_dir.join(\"version\");\n    if let Ok(strver) = read_to_string(path) {\n        return strver.to_string();\n    }\n\n    let args = &[\"describe\", \"--always\", \"--dirty=-dirty\"];\n    if let Ok(output) = Command::new(\"git\").args(args).output() {\n        let rev = String::from_utf8_lossy(&output.stdout).trim().to_string();\n        if !rev.is_empty() {\n            // If it contains a \".\", we have a proper version like \"3.7\",\n            // or \"23.2.1-1234-gfab1234\"\n            if rev.contains('.') {\n                return rev;\n            }\n            // If it doesn't, we probably got *just* the commit SHA,\n            // like \"f1242abcdef\".\n            // So we prepend the crate version so it at least looks like\n            // \"3.8-gf1242abcdef\"\n            // This lacks the commit *distance*, but that can't be helped without\n            // tags.\n            let version = env!(\"CARGO_PKG_VERSION\").to_owned();\n            return version + \"-g\" + &rev;\n        }\n    }\n\n    // git did not tell us a SHA either because it isn't installed,\n    // or because it refused (safe.directory applies to `git describe`!)\n    // So we read the SHA ourselves.\n    fn get_git_hash() -> Result<String, Box<dyn std::error::Error>> {\n        let gitdir = Path::new(env!(\"CARGO_MANIFEST_DIR\")).join(\".git\");\n        let jjdir = Path::new(env!(\"CARGO_MANIFEST_DIR\")).join(\".jj\");\n        let commit_id = if gitdir.exists() {\n            // .git/HEAD contains ref: refs/heads/branch\n            let headpath = gitdir.join(\"HEAD\");\n            let headstr = read_to_string(headpath)?;\n            let headref = headstr.split(' ').collect::<Vec<_>>()[1].trim();\n\n            // .git/refs/heads/branch contains the SHA\n            let refpath = gitdir.join(headref);\n            // Shorten to 9 characters (what git describe does currently)\n            read_to_string(refpath)?\n        } else if jjdir.exists() {\n            let output = Command::new(\"jj\")\n                .args([\n                    \"log\",\n                    \"--revisions\",\n                    \"@\",\n                    \"--no-graph\",\n                    \"--ignore-working-copy\",\n                    \"--template\",\n                    \"commit_id\",\n                ])\n                .output()\n                .unwrap();\n            String::from_utf8_lossy(&output.stdout).to_string()\n        } else {\n            return Err(\"did not find either of .git or .jj\".into());\n        };\n        let refstr = &commit_id[0..9];\n        let refstr = refstr.trim();\n\n        let version = env!(\"CARGO_PKG_VERSION\").to_owned();\n        Ok(version + \"-g\" + refstr)\n    }\n\n    get_git_hash().expect(\"Could not get a version. Either set $FISH_BUILD_VERSION or install git.\")\n}\n\n#[cfg(feature = \"installable\")]\n// disable clippy because otherwise it would panic without sphinx\n#[cfg(not(clippy))]\nfn build_man(build_dir: &Path) {\n    use std::process::Command;\n    let mandir = build_dir;\n    let sec1dir = mandir.join(\"man1\");\n    let docsrc_path = std::fs::canonicalize(env!(\"CARGO_MANIFEST_DIR\"))\n        .unwrap()\n        .as_path()\n        .join(\"doc_src\");\n    let docsrc = docsrc_path.to_str().unwrap();\n    let args = &[\n        \"-j\",\n        \"auto\",\n        \"-q\",\n        \"-b\",\n        \"man\",\n        \"-c\",\n        docsrc,\n        // doctree path - put this *above* the man1 dir to exclude it.\n        // this is ~6M\n        \"-d\",\n        mandir.to_str().unwrap(),\n        docsrc,\n        sec1dir.to_str().unwrap(),\n    ];\n    let _ = std::fs::create_dir_all(sec1dir.to_str().unwrap());\n\n    rsconf::rebuild_if_env_changed(\"FISH_BUILD_DOCS\");\n    if env::var(\"FISH_BUILD_DOCS\") == Ok(\"0\".to_string()) {\n        println!(\"cargo:warning=Skipping man pages because $FISH_BUILD_DOCS is set to 0\");\n        return;\n    }\n\n    // We run sphinx to build the man pages.\n    // Every error here is fatal so cargo doesn't cache the result\n    // - if we skipped the docs with sphinx not installed, installing it would not then build the docs.\n    // That means you need to explicitly set $FISH_BUILD_DOCS=0 (`FISH_BUILD_DOCS=0 cargo install --path .`),\n    // which is unfortunate - but the docs are pretty important because they're also used for --help.\n    match Command::new(\"sphinx-build\").args(args).spawn() {\n        Err(x) if x.kind() == std::io::ErrorKind::NotFound => {\n            if env::var(\"FISH_BUILD_DOCS\") == Ok(\"1\".to_string()) {\n                panic!(\"Could not find sphinx-build to build man pages.\\nInstall sphinx or disable building the docs by setting $FISH_BUILD_DOCS=0.\");\n            }\n            println!(\"cargo:warning=Cannot find sphinx-build to build man pages.\");\n            println!(\"cargo:warning=If you install it now you need to run `cargo clean` and rebuild, or set $FISH_BUILD_DOCS=1 explicitly.\");\n        }\n        Err(x) => {\n            // Another error - permissions wrong etc\n            panic!(\"Error starting sphinx-build to build man pages: {:?}\", x);\n        }\n        Ok(mut x) => match x.wait() {\n            Err(err) => {\n                panic!(\n                    \"Error waiting for sphinx-build to build man pages: {:?}\",\n                    err\n                );\n            }\n            Ok(out) => {\n                if out.success() {\n                    // Success!\n                    return;\n                } else {\n                    panic!(\"sphinx-build failed to build the man pages.\");\n                }\n            }\n        },\n    }\n}\n"
        },
        {
          "name": "build_tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "deny.toml",
          "type": "blob",
          "size": 0.48,
          "content": "[licenses]\n# We want really high confidence when inferring licenses from text\nconfidence-threshold = 0.93\nunused-allowed-license = \"allow\" # don't warn for unused licenses in this list\nallow = [\n    \"BSD-2-Clause\",\n    \"BSD-3-Clause\",\n    \"BSL-1.0\",\n    \"GPL-2.0\",\n    \"ISC\",\n    \"LGPL-2.0\",\n    \"MIT\",\n    \"MPL-2.0\",\n    \"PSF-2.0\",\n    \"Unicode-DFS-2016\",\n    \"WTFPL\",\n    \"Zlib\",\n]\n\n[sources.allow-org]\n# 1 or more github.com organizations to allow git sources for\ngithub = [\"fish-shell\"]\n"
        },
        {
          "name": "doc_internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc_src",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "fish.desktop",
          "type": "blob",
          "size": 0.36,
          "content": "[Desktop Entry]\nVersion=1.0\nType=Application\nTerminal=true\n# This file is for use in appimages, which rewrite the path.\n# Other uses would have to replace these with the correct path.\nExec=fish\nName=fish\nComment=The user-friendly command line shell\nIcon=fish\n# \"Shell\" would be the proper category, but it's reserved so we can't use it.\nCategories=ConsoleOnly;System;\n"
        },
        {
          "name": "fish.pc.in",
          "type": "blob",
          "size": 0.28,
          "content": "prefix=@prefix@\ndatadir=${prefix}/@rel_datadir@\ncompletionsdir=${datadir}/@rel_completionsdir@\nfunctionsdir=${datadir}/@rel_functionsdir@\nconfdir=${datadir}/@rel_confdir@\n\nName: fish\nDescription: fish, the friendly interactive shell\nURL: https://fishshell.com/\nVersion: @fish_build_version@\n"
        },
        {
          "name": "fish.png",
          "type": "blob",
          "size": 0.04,
          "content": "./doc_src/python_docs_theme/static/fish.png"
        },
        {
          "name": "fish.spec.in",
          "type": "blob",
          "size": 3.46,
          "content": "Summary:                Friendly interactive shell\nName:                   fish\n\nVersion:                @RPMVERSION@\nRelease:                0.%{?dist}\n\nLicense:                GPL-2.0-only AND GPL-2.0-or-later AND BSD-2-Clause AND PSF-2.0 AND ISC AND MIT\nGroup:                  System/Shells\nURL:                    https://fishshell.com/\n\nSource0:                %{name}_@VERSION@.orig.tar.xz\nSource1:                %{name}_@VERSION@.orig-cargo-vendor.tar.xz\nBuildRequires:          cargo gettext gcc xz pcre2-devel\nBuildRequires:          rust >= 1.70\n# Packaging guidelines say to use a BuildRequires: rust-packaging, but it adds no value for our package\n\nBuildRequires: cmake >= 3.15\n\n%if 0%{?suse_version}\nBuildRequires: update-desktop-files\n# for tests\nBuildRequires: groff\n%else\nBuildRequires: groff-base\n%endif\n\n# for tests\n%if 0%{?fedora}\n# Need the en_US.utf-8 locale at a minimum\nBuildRequires: glibc-langpack-en\n%endif\nBuildRequires: python3 procps\n\n%if 0%{?suse_version}\nRequires:      terminfo-base\n%else\nRequires:      ncurses-base\n%endif\nRequires:      file\nRequires:      python3\nRequires:      man\nRequires:      procps\n\n# Although the build scripts mangle the version number to be RPM compatible\n# for continuous builds (transforming the output of `git describe`), Fedora 32+\n# also validates the version inside the pkgconfig file. There's no impetus for this\n# with fish.\n%define _wrong_version_format_terminate_build 0\n\n%description\n\nfish is a shell geared towards interactive use. Its features are\nfocused on user friendliness and discoverability. The language syntax\nis simple but incompatible with other shell languages.\n\n%prep\n# Unpack the source tarball and overlay the vendor tarball\n%setup -q -n %{name}-@VERSION@ -a 1\n# Should use cargo_prep here, it overrides our vendor config changes though\n\n%build\nexport CARGO_NET_OFFLINE=true\n# CMake macros define the wrong sysconfdir arguments\nEXTRA_CMAKE_FLAGS=\"$EXTRA_CMAKE_FLAGS -DCMAKE_INSTALL_SYSCONFDIR=%{_sysconfdir} -DCMAKE_INSTALL_DOCDIR=%{_docdir}/fish\"\n%cmake $EXTRA_CMAKE_FLAGS\n%if 0%{?cmake_build:1}\n%cmake_build\n%else\nmake %{?_smp_mflags}\n%endif\n\n%install\n%if 0%{?cmake_install:1}\n%cmake_install\n%else\n%make_install\n%endif\n%find_lang %{name}\n# OpenSUSE has strong opinions about categories which do not apply to other systems\n%if 0%{?suse_version}\n%suse_update_desktop_file fish \"System;TerminalEmulator\"\n%endif\n\n%check\n# OpenSUSE does out-of-tree builds and defines __builddir\n%if 0%{?__builddir:1}\ncd %__builddir\n%endif\n# Fedora uses __cmake_builddir\n%if 0%{?__cmake_builddir:1}\ncd %__cmake_builddir\n%endif\nmake fish_run_tests\n\n%clean\nrm -rf $RPM_BUILD_ROOT\n\n%post\n# Add fish to the list of allowed shells in /etc/shells\nif ! grep %{_bindir}/fish %{_sysconfdir}/shells >/dev/null; then\n    echo %{_bindir}/fish >>%{_sysconfdir}/shells\nfi\n\n%postun\n# Remove fish from the list of allowed shells in /etc/shells\nif [ \"$1\" = 0 ]; then\n    grep -v %{_bindir}/fish %{_sysconfdir}/shells >%{_sysconfdir}/fish.tmp\n    mv %{_sysconfdir}/fish.tmp %{_sysconfdir}/shells\nfi\n\n%files -f %{name}.lang\n%defattr(-,root,root,-)\n\n# The documentation directory\n%doc %{_docdir}/fish\n%doc CONTRIBUTING.rst README.rst\n\n# man files\n%{_mandir}/man1/*\n\n# The program binaries\n%attr(0755,root,root) %{_bindir}/*\n\n# Configuration files\n%dir %{_sysconfdir}/fish/\n%config(noreplace) %{_sysconfdir}/fish/config.fish\n\n# Support files\n%{_datadir}/fish/\n\n# pkgconfig\n%{_datadir}/pkgconfig/fish.pc\n\n# FreeDesktop entry\n%{_datadir}/applications/fish.desktop\n%{_datadir}/pixmaps/fish.png\n"
        },
        {
          "name": "osx",
          "type": "tree",
          "content": null
        },
        {
          "name": "po",
          "type": "tree",
          "content": null
        },
        {
          "name": "printf",
          "type": "tree",
          "content": null
        },
        {
          "name": "share",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}