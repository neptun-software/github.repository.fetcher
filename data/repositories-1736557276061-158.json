{
  "metadata": {
    "timestamp": 1736557276061,
    "page": 158,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tesseract-ocr/tesseract",
      "stars": 63703,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.47,
          "content": "BasedOnStyle: Google\n\n# Modifications for Tesseract.\n\n# Only merge empty functions.\nAllowShortFunctionsOnASingleLine: Empty\n# Do not allow short if statements.\nAllowShortIfStatementsOnASingleLine: false\nIndentPPDirectives: AfterHash\n\n# Default style for some settings.\n\nAccessModifierOffset: -2\nAllowShortLoopsOnASingleLine: false\n# Enforce always the same pointer alignment.\nDerivePointerAlignment: false\nIncludeBlocks: Preserve\nPointerAlignment: Right\nSpacesBeforeTrailingComments: 1\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.01,
          "content": "* text=auto\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.48,
          "content": "*~\n# Windows\n*.user.*\n*.idea*\n*.log\n*.tlog\n*.cache\n*.obj\n*.sdf\n*.opensdf\n*.lastbuildstate\n*.unsuccessfulbuild\n*.suo\n*.res\n*.ipch\n*.manifest\n\n# Linux\n# ignore local configuration\nconfig.*\nconfig/*\nMakefile\nMakefile.in\n*.m4\n\n# ignore help scripts/files\nconfigure\nlibtool\nstamp-h1\ntesseract.pc\nconfig_auto.h\n/doc/html/*\n/doc/*.1\n/doc/*.5\n/doc/*.html\n/doc/*.xml\n\n# generated version file\n/include/tesseract/version.h\n\n# executables\n/tesseract\n/src/training/ambiguous_words\n/src/training/classifier_tester\n/src/training/cntraining\n/src/training/combine_tessdata\n/src/training/dawg2wordlist\n/src/training/merge_unicharsets\n/src/training/mftraining\n/src/training/set_unicharset_properties\n/src/training/shapeclustering\n/src/training/text2image\n/src/training/unicharset_extractor\n/src/training/wordlist2dawg\n\n*.patch\n\n# files generated by libtool\n/src/training/combine_lang_model\n/src/training/lstmeval\n/src/training/lstmtraining\n\n# ignore compilation files\nbuild/*\n/bin\n/cmake-*\n.deps\n.dirstamp\n/.libs\n*/.libs/*\n*/*/.deps/*\n*/*/.libs/*\n*.lo\n*.la\n*.o\n*.Plo\n*.a\n*.class\n*.jar\n__pycache__\n\n# tessdata\n*.traineddata\ntessdata_*\n\n# build dirs\n/build*\n/*.dll\n/*.lib\n/*.exe\n/*.lnk\n/win*\n.vs*\n.s*\n\n# files generated by \"make check\"\n/tests/.dirstamp\n/unittest/*.trs\n/unittest/tmp/*\n\n# test programs\n/unittest/*_test\n/unittest/primesbitvector\n/unittest/primesmap\n\n# generated files from unlvtests\ntimes.txt\n/unlvtests/results*\n\n# snap packaging specific rules\n/parts/\n/stage/\n/prime/\n/snap/.snapcraft/\n\n/*.snap\n/*_source.tar.bz2\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.19,
          "content": "[submodule \"googletest\"]\n\tpath = unittest/third_party/googletest\n\turl = https://github.com/google/googletest.git\n[submodule \"test\"]\n\tpath = test\n\turl = https://github.com/tesseract-ocr/test.git\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 1.54,
          "content": "Amit Dovev <amitdev2222@gmail.com>\n\nEgor Pugin <egor.pugin@gmail.com>\n\nJeff Breidenbach <breidenbach@gmail.com>\nJeff Breidenbach <breidenbach@gmail.com> <jbreiden@google.com>\n\nJim O'Regan <joregan@gmail.com>\nJim O'Regan <joregan@gmail.com> <joregan@gmail.com@d0cd1f9f-072b-0410-8dd7-cf729c803f20>\nJim O'Regan <joregan@gmail.com> <joregan@d0cd1f9f-072b-0410-8dd7-cf729c803f20>\n\nRay Smith <rays@google.com>\nRay Smith <rays@google.com> <theraysmith@gmail.com>\nRay Smith <rays@google.com> <rays@rays.lon.corp.google.com>\nRay Smith <rays@google.com> <rays@rays-glaptop.roam.corp.google.com>\nRay Smith <rays@google.com> <theraysmith@gmail.com@d0cd1f9f-072b-0410-8dd7-cf729c803f20>\nRay Smith <rays@google.com> <theraysmith@d0cd1f9f-072b-0410-8dd7-cf729c803f20>\n\nShree Devi Kumar <5095331+Shreeshrii@users.noreply.github.com>\nShree Devi Kumar <5095331+Shreeshrii@users.noreply.github.com> <5095331+Shreeshrii@users.noreply.github.com5095331+Shreeshrii@users.noreply.github.com>\n\nStefan Weil <sw@weilnetz.de>\nStefan Weil <sw@weilnetz.de> <sw@weil.de>\nStefan Weil <sw@weilnetz.de> <stefan@v2201612906741603.powersrv.de>\nStefan Weil <sw@weilnetz.de> <stefan.weil@bib.uni-mannheim.de>\nStefan Weil <sw@weilnetz.de> <stweil@ub-backup.bib.uni-mannheim.de>\nStefan Weil <sw@weilnetz.de> <stweil@ub-blade-02.bib.uni-mannheim.de>\n\nZdenko Podobný <zdenop@gmail.com>\nZdenko Podobný <zdenop@gmail.com> <zdenko.podobny@nbazp1.SPS>\nZdenko Podobný <zdenop@gmail.com> <zdenop@gmail.com@d0cd1f9f-072b-0410-8dd7-cf729c803f20>\nZdenko Podobný <zdenop@gmail.com> <zdenop@d0cd1f9f-072b-0410-8dd7-cf729c803f20>\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.77,
          "content": "Ray Smith (lead developer) <theraysmith@gmail.com>\nAhmad Abdulkader\nRika Antonova\nNicholas Beato\nJeff Breidenbach\nSamuel Charron\nPhil Cheatle\nSimon Crouch\nDavid Eger\nSheelagh Huddleston\nDan Johnson\nRajesh Katikam\nThomas Kielbus\nDar-Shyang Lee\nZongyi (Joe) Liu\nRobert Moss\nChris Newton\nMichael Reimer\nMarius Renn\nRaquel Romano\nChristy Russon\nShobhit Saxena\nMark Seaman\nFaisal Shafait\nHiroshi Takenaka\nRanjith Unnikrishnan\nJoern Wanke\nPing Ping Xiu\nAndrew Ziem\nOscar Zuniga\n\nCommunity Contributors:\nZdenko Podobný (Maintainer)\nJim Regan (Maintainer)\nJames R Barlow\nStefan Brechtken\nThomas Breuel\nAmit Dovev\nMartin Ettl\nShree Devi Kumar\nNoah Metzger\nTom Morris\nTobias Müller\nEgor Pugin\nRobert Sachunsky\nRaf Schietekat\nSundar M. Vaidya\nRobin Watts\nStefan Weil\nNick White\nAlexander Zaitsev\n"
        },
        {
          "name": "CITATIONS.bib",
          "type": "blob",
          "size": 2.78,
          "content": "@inproceedings{TableDetect,\n  author = {Faisal Shafait and Ray Smith},\n  booktitle = {Document Analysis Systems},\n  editor = {David S. Doermann and Venu Govindaraju and Daniel P. Lopresti and Premkumar Natarajan},\n  pages = {65--72},\n  publisher = {ACM},\n  series = {ACM International Conference Proceeding Series},\n  title = {Table detection in heterogeneous documents.},\n  url = {http://dblp.uni-trier.de/db/conf/das/das2010.html#ShafaitS10},\n  year = 2010,\n  isbn = {978-1-60558-773-8},\n  date = {2010-07-07}\n}\n\n@inproceedings{Multilingual,\n  author = {Ray Smith and Daria Antonova and Dar-Shyang Lee},\n  booktitle = {MOCR '09: Proceedings of the International Workshop on Multilingual OCR},\n  editor = {Venu Govindaraju and Premkumar Natarajan and Santanu Chaudhury and Daniel P. Lopresti},\n  pages = {1--8},\n  publisher = {ACM},\n  series = {ACM International Conference Proceeding Series},\n  title = {Adapting the Tesseract Open Source OCR Engine for Multilingual OCR.},\n  url = {https://storage.googleapis.com/pub-tools-public-publication-data/pdf/35248.pdf},\n  year = 2009,\n  isbn = {978-1-60558-698-4},\n  date = {2009-07-25},\n  doi = {http://doi.acm.org/10/1145/1577802.1577804},\n  location = {Barcelona, Spain},\n}\n\n@inproceedings{ScriptDetect,\n  author = {Ranjith Unnikrishnan and Ray Smith},\n  title = {Combined Orientation and Script Detection using the Tesseract OCR Engine},\n  booktitle = {MOCR '09: Proceedings of the International Workshop on Multilingual OCR},\n  editor = {Venu Govindaraju and Premkumar Natarajan and Santanu Chaudhury and Daniel P. Lopresti},\n  url = {https://storage.googleapis.com/pub-tools-public-publication-data/pdf/35506.pdf},\n  year = {2009},\n  isbn = {978-1-60558-698-4},\n  pages = {1--7},\n  location = {Barcelona, Spain},\n  doi = {http://doi.acm.org/10.1145/1577802.1577809},\n  publisher = {ACM},\n  address = {New York, NY, USA},\n}\n\n@inproceedings{PageLayout,\n  author = {Ray Smith},\n  title = {Hybrid Page Layout Analysis via Tab-Stop Detection},\n  booktitle = {ICDAR '09: Proceedings of the 2009 10th International Conference on Document Analysis and Recognition},\n  url = {https://storage.googleapis.com/pub-tools-public-publication-data/pdf/35094.pdf},\n  year = {2009},\n  isbn = {978-0-7695-3725-2},\n  pages = {241--245},\n  doi = {http://dx.doi.org/10.1109/ICDAR.2009.257},\n  publisher = {IEEE Computer Society},\n  address = {Washington, DC, USA},\n}\n\n@inproceedings{TessOverview,\n  author = {Ray Smith},\n  title = {An Overview of the Tesseract OCR Engine},\n  booktitle = {ICDAR '07: Proceedings of the Ninth International Conference on Document Analysis and Recognition},\n  url = {https://storage.googleapis.com/pub-tools-public-publication-data/pdf/33418.pdf},\n  year = {2007},\n  isbn = {0-7695-2822-8},\n  pages = {629--633},\n  publisher = {IEEE Computer Society},\n  address = {Washington, DC, USA},\n}\n\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 32.44,
          "content": "#\n# tesseract\n#\n\n# ##############################################################################\n#\n# cmake settings\n#\n# ##############################################################################\n\ncmake_minimum_required(VERSION 3.10 FATAL_ERROR)\n\n# In-source builds are disabled.\nif(\"${CMAKE_CURRENT_SOURCE_DIR}\" STREQUAL \"${CMAKE_CURRENT_BINARY_DIR}\")\n  message(\n    FATAL_ERROR\n      \"CMake generation is not possible within the source directory!\"\n      \"\\n Remove the CMakeCache.txt file and try again from another folder, \"\n      \"e.g.:\\n \"\n      \"\\n rm CMakeCache.txt\"\n      \"\\n mkdir build\"\n      \"\\n cd build\"\n      \"\\n cmake ..\")\nendif()\n\nset(CMAKE_MODULE_PATH \"${CMAKE_MODULE_PATH};${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n\nset(EXECUTABLE_OUTPUT_PATH \"${CMAKE_BINARY_DIR}/bin\")\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${EXECUTABLE_OUTPUT_PATH}\")\n\n# Use solution folders.\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\nset_property(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER \"CMake Targets\")\n\nif(NOT ${CMAKE_VERSION} VERSION_LESS \"3.15.0\")\n  if(WIN32)\n    cmake_policy(SET CMP0091 NEW)\n    message(STATUS \"Setting policy CMP0091 to NEW\")\n  endif()\nendif()\n\n# ##############################################################################\n#\n# project settings\n#\n# ##############################################################################\n\nproject(tesseract C CXX)\n\n# Get version with components from VERSION file.\nfile(STRINGS \"VERSION\" VERSION_PLAIN)\nstring(REGEX REPLACE \"^([^.]*)\\\\..*\" \"\\\\1\" VERSION_MAJOR ${VERSION_PLAIN})\nstring(REGEX REPLACE \"^[^.]*\\\\.([^.]*)\\\\..*\" \"\\\\1\" VERSION_MINOR\n                     ${VERSION_PLAIN})\nstring(REGEX REPLACE \"^[^.]*\\\\.[^.]*\\\\.([0-9]*).*\" \"\\\\1\" VERSION_PATCH\n                     ${VERSION_PLAIN})\nif(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/.git)\n  execute_process(COMMAND git --git-dir ${CMAKE_CURRENT_SOURCE_DIR}/.git\n                          describe --abbrev=4 OUTPUT_VARIABLE GIT_REV)\n  string(REGEX REPLACE \"\\n$\" \"\" PACKAGE_VERSION \"${GIT_REV}\")\nendif()\nif(NOT PACKAGE_VERSION)\n  set(PACKAGE_VERSION ${VERSION_PLAIN})\nendif()\n\n# Provide also same macro names as autoconf (see configure.ac).\nset(GENERIC_MAJOR_VERSION ${VERSION_MAJOR})\nset(GENERIC_MINOR_VERSION ${VERSION_MINOR})\nset(GENERIC_MICRO_VERSION ${VERSION_PATCH})\n\nset(MINIMUM_LEPTONICA_VERSION 1.74)\n\n# ##############################################################################\n#\n# options\n#\n# ##############################################################################\n\nmessage(STATUS \"Configuring tesseract version ${PACKAGE_VERSION}...\")\n\nif(WIN32)\n  option(SW_BUILD \"Build with sw\" ON)\nelse()\n  option(SW_BUILD \"Build with sw\" OFF)\nendif()\noption(OPENMP_BUILD \"Build with openmp support\" OFF) # see issue #1662\noption(GRAPHICS_DISABLED \"Disable disable graphics (ScrollView)\" OFF)\noption(DISABLED_LEGACY_ENGINE \"Disable the legacy OCR engine\" OFF)\noption(ENABLE_LTO \"Enable link-time optimization\" OFF)\noption(FAST_FLOAT \"Enable float for LSTM\" ON)\noption(ENABLE_NATIVE\n       \"Enable optimization for host CPU (could break HW compatibility)\" OFF)\n# see\n# https://stackoverflow.com/questions/52653025/why-is-march-native-used-so-rarely\noption(BUILD_TRAINING_TOOLS \"Build training tools\" ON)\noption(BUILD_TESTS \"Build tests\" OFF)\noption(USE_SYSTEM_ICU \"Use system ICU\" OFF)\noption(DISABLE_TIFF \"Disable build with libtiff (if available)\" OFF)\noption(DISABLE_ARCHIVE \"Disable build with libarchive (if available)\" OFF)\noption(DISABLE_CURL \"Disable build with libcurl (if available)\" OFF)\noption(INSTALL_CONFIGS \"Install tesseract configs\" ON)\n\nif(NOT ${CMAKE_VERSION} VERSION_LESS \"3.15.0\")\n  if(WIN32 AND MSVC)\n    option(WIN32_MT_BUILD \"Build with MT flag for MSVC\" OFF)\n  endif()\nendif()\n\n# ##############################################################################\n#\n# compiler and linker\n#\n# ##############################################################################\n\nif(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  set(CLANG 1)\nendif()\n\nif(NOT CMAKE_BUILD_TYPE)\n  message(STATUS \"Setting build type to 'Release' as none was specified.\")\n  set(CMAKE_BUILD_TYPE\n      Release\n      CACHE STRING \"Choose the type of build.\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Debug\" \"Release\")\nendif()\n\ninclude(CheckCXXCompilerFlag)\n\nset(CMAKE_CXX_STANDARD 17)\nif(\"cxx_std_20\" IN_LIST CMAKE_CXX_COMPILE_FEATURES)\n  set(CMAKE_CXX_STANDARD 20)\nendif()\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nif(NOT CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n  # cygwin gnu c++ needs to use -std=gnu++17 instead of -std=c++17\n  set(CMAKE_CXX_EXTENSIONS OFF)\nendif()\n\nif(BUILD_SHARED_LIBS)\n  set(CMAKE_CXX_VISIBILITY_PRESET hidden)\nendif()\n\n# LTO\ncmake_policy(SET CMP0069 NEW)\ninclude(CheckIPOSupported)\ncheck_ipo_supported(RESULT LTO_SUPPORTED OUTPUT error)\nif(LTO_SUPPORTED)\n  message(STATUS \"IPO / LTO supported\")\nelse()\n  message(STATUS \"IPO / LTO not supported: <${error}>\")\nendif()\n\nset(MARCH_NATIVE_OPT OFF)\nif(ENABLE_NATIVE)\n  check_cxx_compiler_flag(\"-march=native\" COMPILER_SUPPORTS_MARCH_NATIVE)\n  if(COMPILER_SUPPORTS_MARCH_NATIVE)\n    set(DOTPRODUCT_FLAGS \"${DOTPRODUCT_FLAGS} -march=native\")\n    if(NOT CLANG AND MSVC)\n      # clang-cl does not know this argument\n      set(DOTPRODUCT_FLAGS \"${DOTPRODUCT_FLAGS} -mtune=native\")\n    endif()\n    set(MARCH_NATIVE_OPT ON)\n  endif(COMPILER_SUPPORTS_MARCH_NATIVE)\nendif(ENABLE_NATIVE)\n\nmessage(STATUS \"CMAKE_SYSTEM_PROCESSOR=<${CMAKE_SYSTEM_PROCESSOR}>\")\n\nif(CMAKE_SYSTEM_PROCESSOR MATCHES \"x86|x86_64|AMD64|amd64|i386|i686\")\n\n  set(HAVE_NEON FALSE)\n  if(MSVC)\n    set(HAVE_AVX ON)\n    set(AVX_COMPILE_FLAGS \"/arch:AVX\")\n    add_definitions(\"-DHAVE_AVX\")\n\n    set(HAVE_AVX2 ON)\n    set(AVX2_COMPILE_FLAGS \"/arch:AVX2\")\n    add_definitions(\"-DHAVE_AVX2\")\n\n    set(HAVE_AVX512F ON)\n    set(AVX512F_COMPILE_FLAGS \"/arch:AVX512\")\n    add_definitions(\"-DHAVE_AVX512F\")\n\n    set(HAVE_FMA ON)\n    set(FMA_COMPILE_FLAGS \"-D__FMA__\")\n    add_definitions(\"-DHAVE_FMA\")\n\n    set(HAVE_SSE4_1 ON)\n    set(SSE4_1_COMPILE_FLAGS \"-D__SSE4_1__\")\n    add_definitions(\"-DHAVE_SSE4_1\")\n\n    set(DOTPRODUCT_FLAGS \"${DOTPRODUCT_FLAGS} -openmp:experimental\")\n    add_definitions(\"-DOPENMP_SIMD\")\n\n    # clang with MSVC compatibility\n    if(CLANG)\n      set(CMAKE_CXX_FLAGS\n          \"${CMAKE_CXX_FLAGS} -Wno-microsoft-unqualified-friend\")\n      if(HAVE_FMA)\n        set(FMA_COMPILE_FLAGS \"-mfma ${FMA_COMPILE_FLAGS}\")\n      endif(HAVE_FMA)\n      if(HAVE_SSE4_1)\n        set(SSE4_1_COMPILE_FLAGS \"-msse4.1 ${SSE4_1_COMPILE_FLAGS}\")\n      endif(HAVE_SSE4_1)\n    endif(CLANG)\n  else() # if not MSVC\n    check_cxx_compiler_flag(\"-mavx\" HAVE_AVX)\n    if(HAVE_AVX)\n      set(AVX_COMPILE_FLAGS \"-mavx\")\n      add_definitions(\"-DHAVE_AVX\")\n    endif(HAVE_AVX)\n\n    check_cxx_compiler_flag(\"-mavx2\" HAVE_AVX2)\n    if(HAVE_AVX2)\n      set(AVX2_COMPILE_FLAGS \"-mavx2\")\n      add_definitions(\"-DHAVE_AVX2\")\n    endif()\n\n    check_cxx_compiler_flag(\"-mavx512f\" HAVE_AVX512F)\n    if(HAVE_AVX512F)\n      set(AVX512F_COMPILE_FLAGS \"-mavx512f\")\n      add_definitions(\"-DHAVE_AVX512F\")\n    endif()\n\n    check_cxx_compiler_flag(\"-mfma\" HAVE_FMA)\n    if(HAVE_FMA)\n      set(FMA_COMPILE_FLAGS \"-mfma\")\n      add_definitions(\"-DHAVE_FMA\")\n    endif()\n\n    check_cxx_compiler_flag(\"-msse4.1\" HAVE_SSE4_1)\n    if(HAVE_SSE4_1)\n      set(SSE4_1_COMPILE_FLAGS \"-msse4.1\")\n      add_definitions(\"-DHAVE_SSE4_1\")\n    endif()\n\n    check_cxx_compiler_flag(\"-fopenmp-simd\" OPENMP_SIMD)\n    if(OPENMP_SIMD)\n      set(DOTPRODUCT_FLAGS \"${DOTPRODUCT_FLAGS} -fopenmp-simd\")\n      add_definitions(\"-DOPENMP_SIMD\")\n    endif(OPENMP_SIMD)\n  endif(MSVC)\n\nelseif(CMAKE_SYSTEM_PROCESSOR MATCHES \"arm64|aarch64.*|AARCH64.*\")\n\n  set(HAVE_AVX FALSE)\n  set(HAVE_AVX2 FALSE)\n  set(HAVE_AVX512F FALSE)\n  set(HAVE_FMA FALSE)\n  set(HAVE_SSE4_1 FALSE)\n  set(HAVE_NEON TRUE)\n\nelseif(CMAKE_SYSTEM_PROCESSOR MATCHES \"arm.*\")\n\n  set(HAVE_AVX FALSE)\n  set(HAVE_AVX2 FALSE)\n  set(HAVE_AVX512F FALSE)\n  set(HAVE_FMA FALSE)\n  set(HAVE_SSE4_1 FALSE)\n\n  check_cxx_compiler_flag(\"-mfpu=neon\" HAVE_NEON)\n  if(HAVE_NEON)\n    set(NEON_COMPILE_FLAGS \"-mfpu=neon\")\n  endif(HAVE_NEON)\n\nelse()\n\n  set(HAVE_AVX FALSE)\n  set(HAVE_AVX2 FALSE)\n  set(HAVE_AVX512F FALSE)\n  set(HAVE_FMA FALSE)\n  set(HAVE_NEON FALSE)\n  set(HAVE_SSE4_1 FALSE)\n\nendif(CMAKE_SYSTEM_PROCESSOR MATCHES \"x86|x86_64|AMD64|amd64|i386|i686\")\n\nif(HAVE_NEON)\n  message(STATUS \"LTO build is not supported on arm/RBPi.\")\n  set(ENABLE_LTO FALSE)  # enable LTO cause fatal error on arm/RBPi\nendif()\n\n# Compiler specific environment\nif(CMAKE_COMPILER_IS_GNUCXX OR MINGW)\n  set(CMAKE_CXX_FLAGS_DEBUG\n      \"${CMAKE_CXX_FLAGS_DEBUG} -Wall -DDEBUG -pedantic -Og -Wno-unknown-pragmas\")\nelseif(MSVC)\n  add_definitions(-D_CRT_SECURE_NO_WARNINGS)\n  add_definitions(-D_CRT_NONSTDC_NO_DEPRECATE) # strdup\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /utf-8\")\n  if(NOT CLANG)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /MP\")\n  endif()\n  # Hide some warnings for release target wd4244 'argument': conversion from\n  # 'uint64_t' to 'unsigned int', possible loss of data wd4251 needs to have\n  # dll-interface wd4267 return': conversion from 'size_t' to 'int', possible\n  # loss of data wd4275 non dll-interface class wd4305 ...truncation from\n  # 'double' to 'float'\n  set(CMAKE_CXX_FLAGS_RELEASE\n      \"${CMAKE_CXX_FLAGS_RELEASE} /wd4244 /wd4305 /wd4267 /wd4251 /wd4275 /wd4005\"\n  )\n  set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /wd4068\")\n  # Don't use /Wall because it generates too many warnings.\n  set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /W0 /bigobj\")\n  # MT flag\n  if(WIN32_MT_BUILD)\n    set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\n    message(STATUS \"Building with static CRT.\")\n  endif()\n  # Workaround: When building on VS 2022 17.10 or newer, but using an older runtime,\n  # mutexes can crash\n  # https://stackoverflow.com/questions/78598141/first-stdmutexlock-crashes-in-application-built-with-latest-visual-studio\n  add_definitions(-D_DISABLE_CONSTEXPR_MUTEX_CONSTRUCTOR)\nendif()\nif(CLANG) # clang all platforms\n  set(CMAKE_CXX_FLAGS_RELEASE\n      \"${CMAKE_CXX_FLAGS_RELEASE} -Wno-unused-command-line-argument\")\n  set(CMAKE_CXX_FLAGS_DEBUG\n      \"${CMAKE_CXX_FLAGS_DEBUG} -Wall -DDEBUG -pedantic -O0\")\nendif()\n\nif(OPENMP_BUILD\n   AND MSVC\n   AND \"${MSVC_VERSION}\" LESS 1929)\n  set(OPENMP_BUILD OFF)\nendif()\nif(OPENMP_BUILD)\n  if(MSVC)  # supported from cmake 3.30\n    set(OpenMP_RUNTIME_MSVC \"llvm\")\n  endif(MSVC)\n  find_package(OpenMP)\n  # https://stackoverflow.com/questions/12399422\n  # how-to-set-linker-flags-for-openmp-in-cmakes-try-compile-function\n  if(NOT OpenMP_FOUND\n     AND CLANG\n     AND WIN32)\n    # workaround because find_package(OpenMP) does not work for clang-cl\n    # https://gitlab.kitware.com/cmake/cmake/issues/19404\n    check_include_file_cxx(omp.h HAVE_OMP_H_INCLUDE)\n    find_library(OpenMP_LIBRARY NAMES omp libomp.lib)\n    message(\">> OpenMP_LIBRARY: ${OpenMP_LIBRARY}\")\n    if(MSVC)\n      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /openmp\")\n    else()\n      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fopenmp\")\n    endif()\n    set(OpenMP_FOUND 1)\n    # OpenMP 3.1 is fully supported from Clang 3.8.0\n    add_definitions(-D_OPENMP=201107)\n  endif()\n  if(MSVC)\n    # Note: -openmp:llvm is available for X64 from MSVC 16.9 from MSVC 16.10\n    # Preview 2 there is support also for x86 and arm64\n    # https://devblogs.microsoft.com/cppblog/openmp-updates-and-fixes-for-cpp-in-visual-studio-2019-16-10/\n    if(\"${OpenMP_CXX_FLAGS}\" STREQUAL \"-openmp\")\n      set(OpenMP_CXX_FLAGS \"-openmp:llvm\")\n    endif()\n  endif()\n  if(OpenMP_FOUND)\n    message(\">> OpenMP_FOUND ${OpenMP_FOUND} version: ${OpenMP_CXX_VERSION}\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}\")\n    if(NOT TARGET OpenMP::OpenMP_CXX)\n      add_library(OpenMP::OpenMP_CXX IMPORTED INTERFACE)\n    endif()\n  endif()\nendif()\n\nif(CYGWIN)\n  add_definitions(-D__CYGWIN__)\nelseif(UNIX)\n  if(NOT ANDROID)\n    set(LIB_pthread pthread)\n  endif()\nelseif(WIN32)\n  set(LIB_Ws2_32 Ws2_32)\nendif()\n\nadd_definitions(\"-DCMAKE_BUILD\")\n\n# ##############################################################################\n#\n# packages\n#\n# ##############################################################################\ninclude(CheckFunctions)\n\nif(SW_BUILD)\n  find_package(SW REQUIRED)\n  if(BUILD_SHARED_LIBS)\n    set(SW_BUILD_SHARED_LIBS 1)\n  else()\n    set(SW_BUILD_SHARED_LIBS 0)\n  endif()\n  sw_add_package(org.sw.demo.danbloomberg.leptonica\n                 org.sw.demo.libarchive.libarchive)\n  if(BUILD_TRAINING_TOOLS)\n    sw_add_package(org.sw.demo.gnome.pango.pangocairo\n                   org.sw.demo.unicode.icu.i18n)\n  endif()\n  sw_execute()\nelse()\n  find_package(PkgConfig)\n  # Check for required library. option -DLeptonica_DIR=path => cmake hint where\n  # to find leptonica\n  find_package(Leptonica ${MINIMUM_LEPTONICA_VERSION} CONFIG)\n  if(NOT Leptonica_FOUND AND PKG_CONFIG_EXECUTABLE)\n    pkg_check_modules(Leptonica lept>=${MINIMUM_LEPTONICA_VERSION})\n    link_directories(${Leptonica_LIBRARY_DIRS})\n  endif()\n  if(NOT Leptonica_FOUND)\n    message(FATAL_ERROR \"Cannot find required library Leptonica. Quitting!\")\n  else()\n    message(STATUS \"Found leptonica version: ${Leptonica_VERSION}\")\n  endif(NOT Leptonica_FOUND)\n  include_directories(${Leptonica_INCLUDE_DIRS})\n\n  check_leptonica_tiff_support()\n  if ((NOT LEPT_TIFF_RESULT EQUAL 0) AND LEPT_TIFF_COMPILE_SUCCESS)\n    message(NOTICE \"Leptonica was build without TIFF support! Disabling TIFF support...\")\n    set(DISABLE_TIFF ON)\n  elseif(NOT ${CMAKE_VERSION} VERSION_LESS \"3.25\")\n    message(STATUS \"Leptonica was build with TIFF support.\")\n  endif()\n\n  # Check for optional libraries.\n  if(DISABLE_TIFF)\n    set(HAVE_TIFFIO_H OFF)\n    message(STATUS \"TIFF support disabled.\")\n  else(DISABLE_TIFF)\n    find_package(TIFF) # for tesseract\n    if(NOT TIFF_FOUND AND PKG_CONFIG_EXECUTABLE)\n      # try PKG_CONFIG to find libtiff if cmake failed\n      pkg_check_modules(TIFF libtiff-4)\n    endif()\n    if(TIFF_FOUND)\n      set(HAVE_TIFFIO_H ON)\n      include_directories(${TIFF_INCLUDE_DIRS})\n    endif(TIFF_FOUND)\n  endif(DISABLE_TIFF)\n  if(DISABLE_ARCHIVE)\n    set(HAVE_LIBARCHIVE OFF)\n    message(STATUS \"LibArchive support disabled.\")\n  else(DISABLE_ARCHIVE)\n    find_package(LibArchive)\n    if(NOT LibArchive_FOUND AND PKG_CONFIG_EXECUTABLE)\n      # try PKG_CONFIG to find libarchive if cmake failed\n      pkg_check_modules(LibArchive libarchive)\n    endif()\n    if(LibArchive_FOUND)\n      set(HAVE_LIBARCHIVE ON)\n      include_directories(${LibArchive_INCLUDE_DIRS})\n    endif(LibArchive_FOUND)\n  endif(DISABLE_ARCHIVE)\n  if(DISABLE_CURL)\n    set(HAVE_LIBCURL OFF)\n    message(STATUS \"CURL support disabled.\")\n  else(DISABLE_CURL)\n    find_package(CURL)\n    if(NOT CURL_FOUND AND PKG_CONFIG_EXECUTABLE)\n      # try PKG_CONFIG to find libcurl if cmake failed\n      pkg_check_modules(CURL libcurl)\n    endif()\n    if(CURL_FOUND)\n      set(HAVE_LIBCURL ON)\n      include_directories(${CURL_INCLUDE_DIRS})\n    endif(CURL_FOUND)\n  endif(DISABLE_CURL)\nendif()\n\n# ##############################################################################\n#\n# configure\n#\n# ##############################################################################\n\nif(MSVC)\n  set(DOTPRODUCT_FLAGS \"${DOTPRODUCT_FLAGS} /fp:fast\")\nelse()\n  set(DOTPRODUCT_FLAGS \"${DOTPRODUCT_FLAGS} -O3 -ffast-math\")\nendif()\n\ninclude (GNUInstallDirs)\n\nset(AUTOCONFIG_SRC ${CMAKE_CURRENT_BINARY_DIR}/config_auto.h.in)\nset(AUTOCONFIG ${CMAKE_CURRENT_BINARY_DIR}/config_auto.h)\nadd_definitions(-DHAVE_CONFIG_H)\n\nif(GRAPHICS_DISABLED)\n  message(\"ScrollView debugging disabled.\")\nendif()\nset(CMAKE_REQUIRED_INCLUDES\n    ${CMAKE_REQUIRED_INCLUDES} \"${CMAKE_PREFIX_PATH}/include\"\n    ${CMAKE_INSTALL_INCLUDEDIR})\ninclude(Configure)\n\nconfigure_file(${AUTOCONFIG_SRC} ${AUTOCONFIG} @ONLY)\n\nset(INCLUDE_DIR ${CMAKE_INSTALL_INCLUDEDIR})\nset(LIBRARY_DIRS ${CMAKE_INSTALL_LIBDIR})\n\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/tesseract/version.h.in\n               ${CMAKE_CURRENT_BINARY_DIR}/include/tesseract/version.h @ONLY)\n\ninclude(CMakePackageConfigHelpers)\ninclude(GenerateExportHeader)\n\n# show summary of configuration\nif(${CMAKE_BUILD_TYPE} MATCHES Debug)\n  set(COMPILER_FLAGS \"${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG}\")\nelseif(${CMAKE_BUILD_TYPE} MATCHES Release)\n  set(COMPILER_FLAGS \"${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE}\")\n  if(LTO_SUPPORTED AND ENABLE_LTO)\n    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)\n  else()\n    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION FALSE)\n  endif() # LTO_SUPPORTED\nendif()\n\nif(CMAKE_SIZEOF_VOID_P EQUAL 8)\n  set(BUILD_ARCH \"64 bits\")\nelseif(CMAKE_SIZEOF_VOID_P EQUAL 4)\n  set(BUILD_ARCH \"32 bits\")\nendif()\n\nmessage(STATUS)\nmessage(STATUS \"General configuration for Tesseract ${PACKAGE_VERSION}\")\nmessage(STATUS \"--------------------------------------------------------\")\nmessage(STATUS \"Build type: ${CMAKE_BUILD_TYPE} ${BUILD_ARCH}\")\nmessage(STATUS \"Compiler: ${CMAKE_CXX_COMPILER_ID}\")\nmessage(STATUS \"Compiler version: ${CMAKE_CXX_COMPILER_VERSION}\")\nmessage(STATUS \"Used standard: C++${CMAKE_CXX_STANDARD}\")\nmessage(STATUS \"CXX compiler options: ${COMPILER_FLAGS}\")\nget_directory_property(DirCompDefs COMPILE_DEFINITIONS)\nmessage(STATUS \"Compile definitions = ${DirCompDefs}\")\nmessage(STATUS \"Linker options: ${CMAKE_EXE_LINKER_FLAGS} \"\n               \"${CMAKE_EXE_LINKER_FLAGS_${CMAKE_BUILD_TYPE_UP}}\")\nmessage(STATUS \"Install directory: ${CMAKE_INSTALL_PREFIX}\")\nmessage(STATUS \"HAVE_AVX: ${HAVE_AVX}\")\nmessage(STATUS \"HAVE_AVX2: ${HAVE_AVX2}\")\nmessage(STATUS \"HAVE_AVX512F: ${HAVE_AVX512F}\")\nmessage(STATUS \"HAVE_FMA: ${HAVE_FMA}\")\nmessage(STATUS \"HAVE_SSE4_1: ${HAVE_SSE4_1}\")\nmessage(STATUS \"MARCH_NATIVE_OPT: ${MARCH_NATIVE_OPT}\")\nmessage(STATUS \"HAVE_NEON: ${HAVE_NEON}\")\nmessage(STATUS \"Link-time optimization: ${CMAKE_INTERPROCEDURAL_OPTIMIZATION}\")\nmessage(STATUS \"--------------------------------------------------------\")\nmessage(STATUS \"Build with sw [SW_BUILD]: ${SW_BUILD}\")\nmessage(STATUS \"Build with openmp support [OPENMP_BUILD]: ${OPENMP_BUILD}\")\nmessage(STATUS \"Build with libarchive support [HAVE_LIBARCHIVE]: \"\n               \"${HAVE_LIBARCHIVE}\")\nmessage(STATUS \"Build with libcurl support [HAVE_LIBCURL]: ${HAVE_LIBCURL}\")\nmessage(STATUS \"Enable float for LSTM [FAST_FLOAT]: ${FAST_FLOAT}\")\nmessage(STATUS \"Enable optimization for host CPU (could break HW compatibility)\"\n               \" [ENABLE_NATIVE]: ${ENABLE_NATIVE}\")\nmessage(STATUS \"Disable disable graphics (ScrollView) [GRAPHICS_DISABLED]: \"\n               \"${GRAPHICS_DISABLED}\")\nmessage(STATUS \"Disable the legacy OCR engine [DISABLED_LEGACY_ENGINE]: \"\n               \"${DISABLED_LEGACY_ENGINE}\")\nmessage(STATUS \"Build training tools [BUILD_TRAINING_TOOLS]: \"\n               \"${BUILD_TRAINING_TOOLS}\")\nmessage(STATUS \"Build tests [BUILD_TESTS]: ${BUILD_TESTS}\")\nmessage(STATUS \"Use system ICU Library [USE_SYSTEM_ICU]: ${USE_SYSTEM_ICU}\")\nmessage(\n  STATUS \"Install tesseract configs [INSTALL_CONFIGS]: ${INSTALL_CONFIGS}\")\nmessage(STATUS \"--------------------------------------------------------\")\nmessage(STATUS)\n\n# ##############################################################################\n#\n# build\n#\n# ##############################################################################\n\ninclude(BuildFunctions)\ninclude(SourceGroups)\n\nadd_definitions(-D_SILENCE_STDEXT_HASH_DEPRECATION_WARNINGS=1)\n\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR}/include)\nif(ANDROID_TOOLCHAIN)\n  include_directories(${ANDROID_TOOLCHAIN}/sysroot/usr/include)\n  add_compile_definitions(__ANDROID_API_FUTURE__)\nendif()\n\n# ##############################################################################\n# LIBRARY tesseract\n# ##############################################################################\n\nfile(\n  GLOB\n  TESSERACT_SRC\n  src/ccmain/*.cpp\n  src/ccstruct/*.cpp\n  src/ccutil/*.cpp\n  src/classify/*.cpp\n  src/cutil/*.cpp\n  src/dict/*.cpp\n  src/lstm/*.cpp\n  src/textord/*.cpp\n  src/viewer/*.cpp\n  src/wordrec/*.cpp)\n\nif(DISABLED_LEGACY_ENGINE)\n  # prepend path to list of source files\n  function(prepend_path srcs path)\n    set(tmp, \"\")\n    foreach(src IN LISTS ${srcs})\n      list(APPEND tmp ${path}/${src})\n    endforeach(src ${srcs})\n    set(${srcs}\n        ${tmp}\n        PARENT_SCOPE)\n  endfunction()\n\n  set(TESSERACT_SRC_LEGACY\n      src/ccmain/adaptions.cpp\n      src/ccmain/docqual.cpp\n      src/ccmain/equationdetect.cpp\n      src/ccmain/fixspace.cpp\n      src/ccmain/fixxht.cpp\n      src/ccmain/osdetect.cpp\n      src/ccmain/par_control.cpp\n      src/ccmain/recogtraining.cpp\n      src/ccmain/superscript.cpp\n      src/ccmain/tessbox.cpp\n      src/ccmain/tfacepp.cpp\n      src/ccstruct/fontinfo.cpp\n      src/ccstruct/params_training_featdef.cpp\n      src/ccutil/ambigs.cpp\n      src/ccutil/bitvector.cpp\n      src/ccutil/indexmapbidi.cpp\n      src/classify/adaptive.cpp\n      src/classify/adaptmatch.cpp\n      src/classify/blobclass.cpp\n      src/classify/cluster.cpp\n      src/classify/clusttool.cpp\n      src/classify/cutoffs.cpp\n      src/classify/featdefs.cpp\n      src/classify/float2int.cpp\n      src/classify/fpoint.cpp\n      src/classify/intfeaturespace.cpp\n      src/classify/intfx.cpp\n      src/classify/intmatcher.cpp\n      src/classify/intproto.cpp\n      src/classify/kdtree.cpp\n      src/classify/mf.cpp\n      src/classify/mfoutline.cpp\n      src/classify/mfx.cpp\n      src/classify/normfeat.cpp\n      src/classify/normmatch.cpp\n      src/classify/ocrfeatures.cpp\n      src/classify/outfeat.cpp\n      src/classify/picofeat.cpp\n      src/classify/protos.cpp\n      src/classify/shapeclassifier.cpp\n      src/classify/shapetable.cpp\n      src/classify/tessclassifier.cpp\n      src/classify/trainingsample.cpp\n      src/dict/permdawg.cpp\n      src/dict/hyphen.cpp\n      src/wordrec/associate.cpp\n      src/wordrec/chop.cpp\n      src/wordrec/chopper.cpp\n      src/wordrec/drawfx.cpp\n      src/wordrec/findseam.cpp\n      src/wordrec/gradechop.cpp\n      src/wordrec/language_model.cpp\n      src/wordrec/lm_consistency.cpp\n      src/wordrec/lm_pain_points.cpp\n      src/wordrec/lm_state.cpp\n      src/wordrec/outlines.cpp\n      src/wordrec/params_model.cpp\n      src/wordrec/pieces.cpp\n      src/wordrec/plotedges.cpp\n      src/wordrec/render.cpp\n      src/wordrec/segsearch.cpp\n      src/wordrec/wordclass.cpp)\n  prepend_path(TESSERACT_SRC_LEGACY \"${CMAKE_CURRENT_SOURCE_DIR}\")\n  list(REMOVE_ITEM TESSERACT_SRC ${TESSERACT_SRC_LEGACY})\nendif(DISABLED_LEGACY_ENGINE)\n\nlist(APPEND arch_files src/arch/dotproduct.cpp src/arch/simddetect.cpp\n     src/arch/intsimdmatrix.cpp)\n\nif(DOTPRODUCT_FLAGS)\n  set_source_files_properties(src/arch/dotproduct.cpp\n                              PROPERTIES COMPILE_FLAGS ${DOTPRODUCT_FLAGS})\nendif(DOTPRODUCT_FLAGS)\nif(HAVE_AVX)\n  list(APPEND arch_files_opt src/arch/dotproductavx.cpp)\n  set_source_files_properties(src/arch/dotproductavx.cpp\n                              PROPERTIES COMPILE_FLAGS ${AVX_COMPILE_FLAGS})\nendif(HAVE_AVX)\nif(HAVE_AVX2)\n  list(APPEND arch_files_opt src/arch/intsimdmatrixavx2.cpp\n       src/arch/dotproductavx.cpp)\n  set_source_files_properties(src/arch/intsimdmatrixavx2.cpp\n                              PROPERTIES COMPILE_FLAGS ${AVX2_COMPILE_FLAGS})\nendif(HAVE_AVX2)\nif(HAVE_AVX512F)\n  list(APPEND arch_files_opt src/arch/dotproductavx512.cpp)\n  set_source_files_properties(src/arch/dotproductavx512.cpp\n                              PROPERTIES COMPILE_FLAGS ${AVX512F_COMPILE_FLAGS})\nendif(HAVE_AVX512F)\nif(HAVE_FMA)\n  list(APPEND arch_files_opt src/arch/dotproductfma.cpp)\n  set_source_files_properties(src/arch/dotproductfma.cpp\n                              PROPERTIES COMPILE_FLAGS ${FMA_COMPILE_FLAGS})\nendif(HAVE_FMA)\nif(HAVE_SSE4_1)\n  list(APPEND arch_files_opt src/arch/dotproductsse.cpp\n       src/arch/intsimdmatrixsse.cpp)\n  set_source_files_properties(\n    src/arch/dotproductsse.cpp src/arch/intsimdmatrixsse.cpp\n    PROPERTIES COMPILE_FLAGS ${SSE4_1_COMPILE_FLAGS})\nendif(HAVE_SSE4_1)\nif(HAVE_NEON)\n  list(APPEND arch_files_opt src/arch/dotproductneon.cpp\n       src/arch/intsimdmatrixneon.cpp)\n  if(NEON_COMPILE_FLAGS)\n    set_source_files_properties(\n      src/arch/dotproductneon.cpp src/arch/intsimdmatrixneon.cpp\n      PROPERTIES COMPILE_FLAGS ${NEON_COMPILE_FLAGS})\n  endif()\nendif(HAVE_NEON)\n\nfile(\n  GLOB_RECURSE\n  TESSERACT_HDR\n  include/*\n  src/arch/*.h\n  src/ccmain/*.h\n  src/ccstruct/*.h\n  src/ccutil/*.h\n  src/classify/*.h\n  src/cutil/*.h\n  src/dict/*.h\n  src/lstm/*.h\n  src/textord/*.h\n  src/viewer/*.h\n  src/wordrec/*.h)\n\nset(TESSERACT_SRC\n    ${TESSERACT_SRC}\n    src/api/baseapi.cpp\n    src/api/capi.cpp\n    src/api/renderer.cpp\n    src/api/altorenderer.cpp\n    src/api/pagerenderer.cpp\n    src/api/hocrrenderer.cpp\n    src/api/lstmboxrenderer.cpp\n    src/api/pdfrenderer.cpp\n    src/api/wordstrboxrenderer.cpp)\n\nset(TESSERACT_CONFIGS\n    tessdata/configs/alto\n    tessdata/configs/ambigs.train\n    tessdata/configs/api_config\n    tessdata/configs/bazaar\n    tessdata/configs/bigram\n    tessdata/configs/box.train\n    tessdata/configs/box.train.stderr\n    tessdata/configs/digits\n    tessdata/configs/get.images\n    tessdata/configs/hocr\n    tessdata/configs/inter\n    tessdata/configs/kannada\n    tessdata/configs/linebox\n    tessdata/configs/logfile\n    tessdata/configs/lstm.train\n    tessdata/configs/lstmbox\n    tessdata/configs/lstmdebug\n    tessdata/configs/makebox\n    tessdata/configs/page\n    tessdata/configs/pdf\n    tessdata/configs/quiet\n    tessdata/configs/rebox\n    tessdata/configs/strokewidth\n    tessdata/configs/tsv\n    tessdata/configs/txt\n    tessdata/configs/unlv\n    tessdata/configs/wordstrbox)\n\nset(TESSERACT_TESSCONFIGS\n    tessdata/tessconfigs/batch tessdata/tessconfigs/batch.nochop\n    tessdata/tessconfigs/matdemo tessdata/tessconfigs/msdemo\n    tessdata/tessconfigs/nobatch tessdata/tessconfigs/segdemo)\n\nset(LIBTESSFILES ${TESSERACT_SRC} ${arch_files} ${arch_files_opt}\n                 ${TESSERACT_HDR})\n\nsource_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${LIBTESSFILES})\n\nadd_library(libtesseract ${LIBTESSFILES})\ntarget_include_directories(\n  libtesseract BEFORE\n  PRIVATE src\n  PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/arch>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/ccmain>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/ccstruct>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/ccutil>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/classify>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/cutil>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/dict>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/lstm>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/textord>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/viewer>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/wordrec>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/training>)\nif(BUILD_SHARED_LIBS)\n  target_compile_definitions(\n    libtesseract\n    PRIVATE -DTESS_EXPORTS\n    INTERFACE -DTESS_IMPORTS)\n  # generate_export_header          (libtesseract EXPORT_MACRO_NAME TESS_API)\nendif()\ntarget_link_libraries(libtesseract PRIVATE ${LIB_Ws2_32} ${LIB_pthread})\nif(OpenMP_CXX_FOUND)\n  target_link_libraries(libtesseract PUBLIC OpenMP::OpenMP_CXX)\nendif()\nif(LibArchive_FOUND)\n  target_link_libraries(libtesseract PUBLIC ${LibArchive_LIBRARIES})\nendif(LibArchive_FOUND)\nif(CURL_FOUND)\n  if(NOT CURL_LIBRARIES)\n    target_link_libraries(libtesseract PUBLIC CURL::libcurl)\n  else()\n    target_link_libraries(libtesseract PUBLIC ${CURL_LIBRARIES})\n  endif()\nendif(CURL_FOUND)\n\nset_target_properties(\n  libtesseract PROPERTIES VERSION\n                          ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})\nset_target_properties(\n  libtesseract PROPERTIES SOVERSION\n                          ${VERSION_MAJOR}.${VERSION_MINOR})\n\nset_target_properties(\n  libtesseract\n  PROPERTIES\n    OUTPUT_NAME\n    tesseract$<$<BOOL:${WIN32}>:${VERSION_MAJOR}${VERSION_MINOR}$<$<CONFIG:DEBUG>:d>>\n)\n\nif(SW_BUILD)\n  target_link_libraries(libtesseract PUBLIC org.sw.demo.danbloomberg.leptonica\n                                            org.sw.demo.libarchive.libarchive)\n  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/TesseractTargets.cmake\n       \"include(${CMAKE_CURRENT_BINARY_DIR}/cppan.cmake)\\n\")\n  export(\n    TARGETS libtesseract\n    APPEND\n    FILE ${CMAKE_CURRENT_BINARY_DIR}/TesseractTargets.cmake\n    NAMESPACE Tesseract::)\nelse()\n  target_link_libraries(libtesseract PUBLIC ${Leptonica_LIBRARIES})\n  export(\n    TARGETS libtesseract\n    FILE ${CMAKE_CURRENT_BINARY_DIR}/TesseractTargets.cmake\n    NAMESPACE Tesseract::)\nendif()\n\nif(WIN32\n   AND CLANG\n   AND OPENMP_BUILD)\n  # Workaround for \"libomp.lib is not automatically added on Windows\" see:\n  # http://lists.llvm.org/pipermail/openmp-dev/2015-August/000857.html\n  target_link_libraries(libtesseract PRIVATE ${OpenMP_LIBRARY})\nendif()\n\nif(ANDROID)\n  add_definitions(-DANDROID)\n  find_package(CpuFeaturesNdkCompat REQUIRED)\n  target_include_directories(\n    libtesseract\n    PRIVATE \"${CpuFeaturesNdkCompat_DIR}/../../../include/ndk_compat\")\n  target_link_libraries(libtesseract PRIVATE CpuFeatures::ndk_compat)\nendif()\n\n# ##############################################################################\n# EXECUTABLE tesseract\n# ##############################################################################\n\nadd_executable(tesseract src/tesseract.cpp)\ntarget_link_libraries(tesseract libtesseract)\nif(HAVE_TIFFIO_H AND WIN32)\n  target_link_libraries(tesseract ${TIFF_LIBRARIES})\nendif()\n\nif(OPENMP_BUILD AND UNIX)\n  target_link_libraries(tesseract pthread)\nendif()\n\n# ##############################################################################\n\nif(BUILD_TESTS\n   AND EXISTS\n       ${CMAKE_CURRENT_SOURCE_DIR}/unittest/third_party/googletest/CMakeLists.txt\n)\n  enable_testing()\n  add_subdirectory(unittest/third_party/googletest)\n  add_subdirectory(unittest)\nendif()\n\nif(BUILD_TRAINING_TOOLS)\n  add_subdirectory(src/training)\nendif()\n\nget_target_property(tesseract_NAME libtesseract NAME)\nget_target_property(tesseract_VERSION libtesseract VERSION)\nget_target_property(tesseract_OUTPUT_NAME libtesseract OUTPUT_NAME)\n\nconfigure_file(tesseract.pc.cmake ${CMAKE_CURRENT_BINARY_DIR}/tesseract.pc.in\n               @ONLY)\n# to resolve generator expression in OUTPUT_NAME\nfile(\n  GENERATE\n  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/tesseract_$<CONFIG>.pc\n  INPUT ${CMAKE_CURRENT_BINARY_DIR}/tesseract.pc.in)\n\nconfigure_package_config_file(\n  cmake/templates/TesseractConfig.cmake.in\n  ${CMAKE_CURRENT_BINARY_DIR}/cmake/tesseract/TesseractConfig.cmake\n  INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/tesseract\n  PATH_VARS INCLUDE_DIR LIBRARY_DIRS)\nwrite_basic_package_version_file(\n  ${CMAKE_CURRENT_BINARY_DIR}/cmake/tesseract/TesseractConfigVersion.cmake\n  VERSION ${PACKAGE_VERSION}\n  COMPATIBILITY SameMajorVersion)\n\ninstall(\n  FILES ${CMAKE_CURRENT_BINARY_DIR}/tesseract_$<CONFIG>.pc\n  DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig\n  RENAME tesseract.pc)\ninstall(TARGETS tesseract DESTINATION bin)\nif (MSVC)\n  install(FILES $<TARGET_PDB_FILE:${PROJECT_NAME}> DESTINATION bin OPTIONAL)\nendif()\ninstall(\n  TARGETS libtesseract\n  EXPORT TesseractTargets\n  RUNTIME DESTINATION bin\n  RUNTIME DESTINATION bin\n  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})\nif (MSVC AND BUILD_SHARED_LIBS)\n  install(FILES $<TARGET_PDB_FILE:libtesseract> DESTINATION bin OPTIONAL)\nendif()\ninstall(\n  EXPORT TesseractTargets\n  NAMESPACE Tesseract::\n  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/tesseract)\ninstall(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/cmake\n        DESTINATION ${CMAKE_INSTALL_LIBDIR})\n\ninstall(\n  FILES include/tesseract/baseapi.h\n        include/tesseract/capi.h\n        include/tesseract/renderer.h\n        ${CMAKE_CURRENT_BINARY_DIR}/include/tesseract/version.h\n        include/tesseract/ltrresultiterator.h\n        include/tesseract/pageiterator.h\n        include/tesseract/resultiterator.h\n        include/tesseract/osdetect.h\n        include/tesseract/publictypes.h\n        include/tesseract/ocrclass.h\n        include/tesseract/export.h\n        include/tesseract/unichar.h\n        # ${CMAKE_CURRENT_BINARY_DIR}/src/endianness.h\n  DESTINATION include/tesseract)\n\nif(INSTALL_CONFIGS)\n  install(FILES ${TESSERACT_CONFIGS}\n          DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/tessdata/configs)\n  install(FILES ${TESSERACT_TESSCONFIGS}\n          DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/tessdata/tessconfigs)\nendif()\n\n# ##############################################################################\n# uninstall target\n# ##############################################################################\nif(NOT TARGET uninstall)\n  configure_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/templates/cmake_uninstall.cmake.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\" IMMEDIATE @ONLY)\n\n  add_custom_target(\n    uninstall\n    COMMENT \"Uninstall installed files\"\n    COMMAND ${CMAKE_COMMAND} -P\n            ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)\nendif()\n\n# ##############################################################################\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.97,
          "content": "# Contributing\n\n**Please follow these rules and advice**.\n\n## Creating an Issue or Using the Forum\n\nIf you think you found a bug in Tesseract, please create an issue.\n\nUse the [user forum](https://groups.google.com/g/tesseract-ocr) instead of creating an issue if ...\n\n* You have problems using Tesseract and need some help.\n* You have problems installing the software.\n* You are not satisfied with the accuracy of the OCR, and want to ask how you can improve it. Note: You should first read the [ImproveQuality](https://tesseract-ocr.github.io/tessdoc/ImproveQuality.html) documentation.\n* You are trying to train Tesseract and you have a problem and/or want to ask a question about the training process. Note: You should first read the **official** guides [[1]](https://tesseract-ocr.github.io/tessdoc/) or [[2]](https://tesseract-ocr.github.io/tessdoc/tess5/TrainingTesseract-5.html) found in the project documentation.\n* You have a general question.\n\nAn issue should only be reported if the platform you are using is one of these:\n\n* Linux (but not a version that is more than 4 years old)\n* Windows (Windows 7 or newer version)\n* macOS (last 3 releases)\n\nFor older versions or other operating systems, use the Tesseract forum.\n\nWhen creating an issue, please report your operating system, including its specific version: \"Ubuntu 16.04\", \"Windows 10\", \"Mac OS X 10.11\" etc.\n\nSearch through open and closed issues to see if similar issue has been reported already (and sometimes also has been solved).\n\nSimilarly, before you post your question in the forum, search through past threads to see if similar question has been asked already.\n\nRead the [documentation](https://tesseract-ocr.github.io/tessdoc/) before you report your issue or ask a question in the forum.\n\nOnly report an issue in the latest official release. Optionally, try to check if the issue is not already solved in the latest snapshot in the git repository.\n\nMake sure you are able to replicate the problem with Tesseract command line program. For external programs that use Tesseract (including wrappers and your own program, if you are developer), report the issue to the developers of that software if it's possible. You can also try to find help in the Tesseract forum.\n\nEach version of Tesseract has its own language data you need to obtain. You **must** obtain and install trained data for English (eng) and osd. Verify that Tesseract knows about these two files (and other trained data you installed) with this command:\n`tesseract --list-langs`.\n\nPost example files to demonstrate the problem.\nBUT don't post files with private info (about yourself or others).\n\nWhen attaching a file to the issue report / forum ...\n\n* Do not post a file larger than 20 MB.\n* GitHub supports only few file name extensions like `.png` or `.txt`. If GitHub rejects your files, you can compress them using a program that can produce a zip archive and then load this zip file to GitHub.\n\nDo not attach programs or libraries to your issues/posts.\n\nFor large files or for programs, add a link to a location where they can be downloaded (your site, Git repo, Google Drive, Dropbox etc.)\n\nAttaching a multi-page TIFF image is useful only if you have problem with multi-page functionality, otherwise attach only one or a few single page images.\n\nCopy the error message from the console instead of sending a screenshot of it.\n\nUse the toolbar above the comment edit area to format your comment.\n\nAdd three backticks before and after a code sample or output of a command to format it (The `Insert code` button can help you doing it).\n\nIf your comment includes a code sample or output of a command that exceeds ~25 lines, post it as attached text file (`filename.txt`).\n\nUse `Preview` before you send your issue. Read it again before sending.\n\nNote that most of the people that respond to issues and answer questions are either other 'regular' users or **volunteers** developers. Please be nice to them :-)\n\nThe [tesseract developers](https://groups.google.com/g/tesseract-dev) forum should be used to discuss Tesseract development: bug fixes, enhancements, add-ons for Tesseract.\n\nSometimes you will not get a respond to your issue or question. We apologize in advance! Please don't take it personally. There can be many reasons for this, including: time limits, no one knows the answer (at least not the ones that are available at that time) or just that\nyour question has been asked (and has been answered) many times before...\n\n## For Developers: Creating a Pull Request\n\nYou should always make sure your changes build and run successfully.\n\nFor that, your clone needs to have all submodules (`googletest`, `test`) included. To do so, either specify `--recurse-submodules` during the initial clone, or run `git submodule update --init --recursive NAME` for each `NAME` later. If `configure` already created those directories (blocking the clone), remove them first (or `make distclean`), then clone and reconfigure.\n\nHave a look at [the README](./README.md) and [testing README](https://github.com/tesseract-ocr/test/blob/main/README.md) and the [documentation](https://tesseract-ocr.github.io/tessdoc/Compiling-%E2%80%93-GitInstallation.html#unit-test-builds) on installation.\n\nIn short, after running `configure` from the build directory of your choice, to build the library and CLI, run `make`. To test it, run `make check`. To build the training tools, run `make training`.\n\nAs soon as your changes are building and tests are succeeding, you can publish them. If you have not already, please [fork](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) tesseract (somewhere) on GitHub, and push your changes to that fork (in a new branch). Then [submit as PR](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork).\n\nPlease also keep track of reports from CI (automated build status) and Coverity/CodeQL (quality scan). When the indicators show deterioration after your changes, further action may be required to improve them.\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 22.5,
          "content": "2024-11-10 - V5.5.0\n* Set hOCR capabilities ocrp_dir and ocrp_lang unconditionally.\n* Calculate row bounding box in single-word mode per (issue #4304).\n* Reduce clock syscalls (#4303).\n* Several small performance and other code fixes.\n* Modernized code.\n* Print time for tessedit_timing_debug in milliseconds.\n* Print time for ErrorCounter::ComputeErrorRate in milliseconds.\n* cmake: Correctly set the soversion based on SemVer properties.\n* Do not export PDBs for static libraries (issue #4279).\n* Several other small fixes and improvements for builds and CI.\n* Modernize code for renderers and remove filename conversion for Windows (#4330).\n* Add build rule for Windows installer.\n* Support symbolic values for --oem and --psm options.\n* Remove Tensorflow support.\n* Add RISC-V V support (#4346).\n* Remove broken GitHub action msys2-4.1.1.\n\n2024-06-11 - V5.4.1\n* Avoid FP overflow in NormEvidenceOf (fixes issue #4257) (#4259)\n* Small build fixes and code improvements (#4262, #4263, #4266, #4267)\n\n2024-06-06 - V5.4.0\n* Small build fixes and code improvements\n  (#4241, #4243, #4244, #4245, #4246, #4248, #4249, #4250, #4253)\n\n2024-05-19 - V5.4.0-rc2\n* Fix setup of datadir on installations with Conda (issue #4230) (#4240)\n* Fix FP exception in Wordrec::angle_change (issue #4242) (#4243)\n\n2024-05-12 - V5.4.0-rc1\n* Build fixes, code refactoring and other smaller changes.\n* Fix grey result of indexed PNG in pdfrenderer.\n* Rename frk -> deu_latf (ISO 639-3, ISO 15924).\n* Remove broken Dockerfile.\n* Fixes for several issues reported by Coverity Scan.\n* Remove unsupported OpenCL code and related API functions (#4220).\n* Facilitate vectorization for generic build (#4223).\n* Add PAGE XML renderer / export (#4214).\n* Support training without lstmf files.\n* Improve CCUtil::main_setup (fixes issue #4230 related to Coda).\n* Allow for text angle/gradient to be retrieved (#4070).\n\n2024-01-18 - V5.3.4\n* Fixes for scrollview\n* Fixes for autoconf, clang and sw builds\n* Improve OCR for an image URL\n  * Fail on curl download errors\n  * New parameter curl_cookiefile\n  * Set User-Agent: header field in HTTP request for curl downloads\n* Output directory list from \"combine_tessdata -d\" to stdout\n* Other small improvements for code and documentation.\n\n2023-10-05 - V5.3.3\n* Small code fixes and improvements to fix Coverity Scan issues.\n* Disable -mfpu=neon for aarch64.\n* Fix build without git clone in cloned directory (required for FreeBSD).\n* Other build fixes for autotools, cmake and sw.\n* Fix regression in layout detection which was introduced in release 5.0.0.\n* Fix regression which prevented loading of submodels, introduced in release 5.0.0-rc2.\n* Other small improvements for code and documentation.\n\n2023-07-11 - V5.3.2\n* Updates for snap package building.\n* Support for Sgaw and W Pwo Karen languages in the Myanmar validator (#4065).\n* Improve format of logging from lstmtraining.\n* Use less digits in filenames of checkpoints written by lstmtraining.\n* Replace deprecated sprintf.\n* Remove unused code in function fix_rep_char.\n* Avoid 32 bit overflow in multiplication (fixes 3 CodeQL CI alerts).\n* Avoid conversions from std::string to char* to std::string.\n* Abort with error message if OSD is requested with LSTM-only model.\n* cmake: allow to disable tiff (-DDISABLE_TIFF=ON).\n* cmake: provide info about disabled LibArchive and CURL.\n* cmake: check if leptonica was build with tiff support.\n* Remove old broken GitHub action vcpkg-4.1.1 (fixes issue #4078).\n* Create config.yml.\n* Fix typos.\n\n2023-04-01 - V5.3.1\n * Bug fixes for some special scenarios:\n   * Fix issue #4010.\n   * textord: Catch empty rows in block iterator (fixes #4039).\n   * Fix FP division by zero (issue #3995).\n * Improve documentation and log messages.\n * Build fixes and improvements (mainly for cmake).\n\n2022-12-22 - V5.3.0\n * Minor updates for documentation and cmake builds.\n\n2022-12-13 - V5.3.0-rc1\n * Fix the training tools for the legacy OCR engine (fix issue #3925).\n * PDF renderer: Ignore non-text blocks (fix issue #3957).\n * Remove colormap before thresholding (fix issue #3940).\n * Fix a number of performance issues reported by Coverity Scan.\n * Training tools: Replace call of exit function by return statement in main function.\n * Fix double free in function vigorous_noise_removal (fix issue #3876).\n * Create to_win if needed in Textord::make_spline_rows (fix issue #3875).\n * Bug fixes for ScrollView viewer:\n   * Fix memory issues in ScrollView::MessageReceiver.\n   * Catch potential nullptr in SVNetwork::SVNetwork.\n   * Move svpaint.cpp from src/viewer to src/.\n   * Add rule for svpaint executable in Autotools.\n * Bug fixes and improvements for build tools:\n   * Fix AMD64 detection with autobuild on FreeBSD (fix issue #3964).\n   * Fix tesseract.pc generated from CMake to match Autotools.\n   * Detect availability of AVX512-VNNI.\n   * configure.ac: fix build on aarch64_be.\n * Drop CI for old versions of macOS and Ubuntu.\n\n2022-07-06 - V5.2.0\n  * Improvements and fixes for continuous integration,\n    autoconf and cmake builds.\n  * Set /Os for some 32 bit MS compilers (fixes #3769).\n  * Improve comments and other documentation.\n  * Add initial support for Intel AVX512F.\n  * Fix for very large PDF files on 32 bit hosts (fixes #3805).\n  * Fix NEON detection on FreeBSD.\n  * Fix regression with UZN files (fixes #3837).\n  * Fix calling delete[] for memory allocated by malloc in C API.\n  * Add an API function to init tesseract with traineddata from memory\n    (fixes #3691).\n  * Replace direct access to Leptonica internal data structures by\n    function calls and support latest releases of Leptonica.\n  * Replace std::regex by std::string functions (fixes issue #3830).\n  * Use compiled-in TESSDATA_PREFIX also on Windows (fixes #3767).\n  * Add new parameter 'invert_threshold', change the default threshold\n    from 0.5 to 0.7 and mark parameter 'tessedit_do_invert' as deprecated.\n\n2022-03-01 - V5.1.0\n  * Handle image and line regions in output formats ALTO, hOCR and text.\n  * New parameter curl_timeout for curl_easy_setop.\n  * Build fixes and improvements.\n  * Catch nullptr in PageIterator::Orientation to improve robustness.\n  * Remove unused code.\n\n2022-01-06 - V5.0.1\n  * Add SPDX-License-Identifier to public include files.\n  * Support redirections when running OCR on a URL.\n  * Lots of fixes and improvements for cmake builds.\n    Distributions should use the autoconf build.\n  * Fix broken msys2 build with gcc 11.\n  * Fix parameter certainty_scale (was duplicated).\n  * Fix some compiler warnings and clean code.\n  * Correctly detect amd64 and i386 on FreeBSD.\n  * Add libarchive and libcurl in continuous integration actions.\n  * Update submodule googletest to release v1.11.0.\n\n2021-11-22 - V5.0.0\n  * Faster training and recognition by default (float instead of\n    double calculations)\n  * More options for binarization\n  * Improved support for ARM NEON\n  * Modernized code\n  * Removed proprietary data types like GenericVector and STRING\n    from public API\n  * pdf.ttf no longer needed, now integrated into the code\n  * Faster flat build with automake\n  * New options for combine_tessdata to show details of traineddata files\n  * Improved training messages\n  * Improved unit tests and fuzzing tests\n  * Lots of bug fixes\n\n2021-11-15 - V4.1.3\n  * Fix build regression for autoconf build\n\n2021-11-14 - V4.1.2\n  * Add RowAttributes getter to PageIterator\n  * Allow line images with larger width for training\n  * Fix memory leaks\n  * Improve build process\n  * Don't output empty ALTO sourceImageInformation (issue #2700)\n  * Extend URI support for Tesseract with libcurl\n  * Abort LSTM training with integer model (fixes issue #1573)\n  * Update documentation\n  * Make automake builds less noisy by default\n  * Don't use -march=native in automake builds\n\n2019-12-26 - V4.1.1\n  * Implemented sw build (cppan is depreciated)\n  * Improved cmake build\n  * Code cleanup and optimization\n  * A lot of bug fixes...\n\n2019-07-07 - V4.1.0\n  * Added new renders Alto, LSTMBox, WordStrBox.\n  * Added character boxes in hOCR output.\n  * Added python training scripts (experimental) as alternative shell scripts.\n  * Better support AVX / AVX2 / SSE.\n  * Disable OpenMP support by default (see e.g. #1171, #1081).\n  * Fix for bounding box problem.\n  * Implemented support for whitelist/blacklist in LSTM engine.\n  * Improved cmake configuration.\n  * Code modernization and improvements.\n  * A lot of bug fixes...\n\n2018-10-29 - V4.0.0\n  * Added new neural network system based on LSTMs, with major accuracy gains.\n  * Improvements to PDF rendering.\n  * Fixes to trainingdata rendering.\n  * Added LSTM models+lang models to 101 languages. (tessdata repository)\n  * Improved multi-page TIFF handling.\n  * Fixed damage to binary images when processing PDFs.\n  * Fixes to training process to allow incremental training from a recognition model.\n  * Made LSTM the default engine, pushed cube out.\n  * Deleted cube code.\n  * Changed OEModes --oem 0 for legacy tesseract engine, --oem 1 for LSTM, --oem 2 for both, --oem 3 for default.\n  * Avoid use of Leptonica debug parameters or functions.\n  * Fixed multi-language mode.\n  * Removed support for VS2010.\n  * Added Support for VS2015 and VS2017 with CPPAN.\n  * Implemented invisible text only for PDF.\n  * Added AVX / SSE support for Windows.\n  * Enabled OpenMP support.\n  * Parameter unlv_tilde_crunching change to false.\n  * Miscellaneous Fixes.\n  * Detailed Changelog can be found at https://tesseract-ocr.github.io/tessdoc/4.0x-Changelog.html and https://tesseract-ocr.github.io/tessdoc/ReleaseNotes.html#tesseract-release-notes-oct-29-2018---v400\n\n2017-02-16 - V3.05.00\n  * Made some fine tuning to the hOCR output.\n  * Added TSV as another optional output format.\n  * Fixed ABI break introduced in 3.04.00 with the AnalyseLayout() method.\n  * text2image tool - Enable all OpenType ligatures available in a font. This feature requires Pango 1.38 or newer.\n  * Training tools - Replaced asserts with tprintf() and exit(1).\n  * Fixed Cygwin compatibility.\n  * Improved multipage tiff processing.\n  * Improved the embedded pdf font (pdf.ttf).\n  * Enable selection of OCR engine mode from command line.\n  * Changed tesseract command line parameter '-psm' to '--psm'.\n  * Write output of tesseract --help, --version and --list-langs to stdout instead of stderr.\n  * Added new C API for orientation and script detection, removed the old one.\n  * Increased minimum autoconf version to 2.59.\n  * Removed dead code.\n  * Require Leptonica 1.74 or higher.\n  * Fixed many compiler warning.\n  * Fixed memory and resource leaks.\n  * Fixed some issues with the 'Cube' OCR engine.\n  * Fixed some openCL issues.\n  * Added option to build Tesseract with CMake build system.\n  * Implemented CPPAN support for easy Windows building.\n\n2016-02-17 - V3.04.01\n  * Added OSD renderer for psm 0. Works for single page and multi-page images.\n  * Improve tesstrain.sh script.\n  * Simplify build and run of ScrollView.\n  * Improved PDF output for OS X Preview utility.\n  * INCOMPATIBLE fix to hOCR line height information - commit 134ebc3.\n  * Added option to build Tesseract without Cube OCR engine (-DNO_CUBE_BUILD).\n  * Enable OpenMP support.\n  * Many bug fixes.\n\n2015-07-11 - V3.04.00\n  * Tesseract development is now done with Git and hosted at github.com (Previously we used Subversion as a VCS and code.google.com for hosting).\n  * Tesseract now requires leptonica 1.71 or a higher version.\n  * Removed official support for VS 2008.\n  * Added support for 39 additional scripts/languages, including: amh, asm, aze_cyrl, bod, bos, ceb, cym, dzo, fas, gle, guj, hat, iku, jav, kat, kat_old, kaz, khm, kir, kur, lao, lat, mar, mya, nep, ori, pan, pus, san, sin, srp_latn, syr, tgk, tir, uig, urd, uzb, uzb_cyrl, yid\n  * Major updates to training system as a result of extensive testing on 100 languages.\n  * New training data for over 100 languages\n  * Improved performance with PIC compilation option.\n  * Significant change to invisible font system in pdf output to improve correctness and compatibility with external programs, particularly ghostscript.\n  * Improved font identification.\n  * Major change to improve layout analysis for heavily diacritic languages: Thai, Vietnamese, Kannada, Telugu etc.\n  * Fixed problems with shifted baselines so recognition can recover from layout analysis errors.\n  * Major refactor to improve speed on difficult images, especially when running a heap checker.\n  * Moved params from global in page layout to tesseractclass.\n  * Improved single column layout analysis.\n  * Allow ocr output to multiple formats using tesseract command line executable.\n  * Fixed issues with mixed eng+ara scripts.\n  * Improved script consistency in numbers.\n  * Major refactor of control.cpp to enable line recognition.\n  * Added tesstrain.sh - a master training script.\n  * Added ability to text2image training tool to just list available fonts.\n  * Added ability to text2image to underline words.\n  * Improved efficiency of image processing for PDF output.\n  * Added parameter description for each parameter listed with 'print-parameters' command line option.\n  * Added font info to hOCR output.\n  * Enabled streaming input and output of multi-page documents.\n  * Many bug fixes.\n\n2014-02-04 - V3.03(rc1)\n  * Added new training tool text2image to generate box/tif file pairs from\n    text and truetype fonts.\n  * Added support for PDF output with searchable text.\n  * Removed entire IMAGE class and all code in image directory.\n  * Tesseract executable: support for output to stdout; limited support for one\n    page images from stdin  (especially on Windows)\n  * Added Renderer to API to allow document-level processing and output\n    of document formats, like hOCR, PDF.\n  * Major refactor of word-level recognition, beam search, eliminating dead code.\n  * Refactored classifier to make it easier to add new ones.\n  * Generalized feature extractor to allow feature extraction from greyscale.\n  * Improved sub/superscript treatment.\n  * Improved baseline fit.\n  * Added set_unicharset_properties to training tools.\n  * Many bug fixes.\n  * More training source data included.\n\n2012-02-01 - V3.02\n  * Moved ResultIterator/PageIterator to ccmain.\n  * Added Right-to-left/Bidi capability in the output iterators for Hebrew/Arabic.\n  * Added paragraph detection in layout analysis/post OCR.\n  * Fixed inconsistent xheight during training and over-chopping.\n  * Added simultaneous multi-language capability.\n  * Refactored top-level word recognition module.\n  * Added experimental equation detector.\n  * Improved handling of resolution from input images.\n  * Blamer module added for error analysis.\n  * Cleaned up externally used namespace by removing includes from baseapi.h.\n  * Removed dead memory mangagement code.\n  * Tidied up constraints on control parameters.\n  * Added support for ShapeTable in classifier and training.\n  * Refactored class pruner.\n  * Fixed training leaks and randomness.\n  * Major improvements to layout analysis for better image detection, diacritic detection, better textline finding, better tabstop finding.\n  * Improved line detection and removal.\n  * Added fixed pitch chopper for CJK.\n  * Added UNICHARSET to WERD_CHOICE to make mult-language handling easier.\n  * Fixed problems with internally scaled images.\n  * Added page and bbox to string in tr files to identify source of training data better.\n  * Fixes to Hindi Shiroreka splitter.\n  * Added word bigram correction.\n  * Reduced stack memory consumption and eliminated some ugly typedefs.\n  * Added new uniform classifier API.\n  * Added new training error counter.\n  * Fixed endian bug in dawg reader.\n  * Many other fixes, including the way in which the chopper finds chops and messes with the outline while it does so.\n\n2010-11-29 - V3.01\n  * Removed old/dead serialise/deserialize methods on *LISTIZED classes.\n  * Total rewrite of DENORM to better encapsulate operation and make\n    for potential to extract features from images.\n  * Thread-safety! Moved all critical global and static variables to members of the appropriate class. Tesseract is now thread-safe (multiple instances can be used in parallel in multiple threads.) with the minor exception that some control parameters are still global and affect all threads.\n  * Added Cube, a new recognizer for Arabic. Cube can also be used in combination with normal Tesseract for other languages with an improvement in accuracy at the cost of (much) lower speed. *There is no training module for Cube yet.*\n  * `OcrEngineMode` in `Init` replaces `AccuracyVSpeed` to control cube.\n  * Greatly improved segmentation search with consequent accuracy and speed improvements, especially for Chinese.\n  * Added `PageIterator` and `ResultIterator` as cleaner ways to get the full results out of Tesseract, that are not currently provided by any of the `TessBaseAPI::Get*` methods. All other methods, such as the `ETEXT_STRUCT` in particular are deprecated and will be deleted in the future.\n  * ApplyBoxes totally rewritten to make training easier. It can now cope with touching/overlapping training characters, and a new boxfile format allows word boxes instead of character boxes, BUT to use that you have to have already bootstrapped the language with character boxes. \"Cyclic dependency\" on traineddata.\n  * Auto orientation and script detection added to page layout analysis.\n  * Deleted *lots* of dead code.\n  * Fixxht module replaced with scalable data-driven module.\n  * Output font characteristics accuracy improved.\n  * Removed the double conversion at each classification.\n  * Upgraded oldest structs to be classes and deprecated PBLOB.\n  * Removed non-deterministic baseline fit.\n  * Added fixed length dawgs for Chinese.\n  * Handling of vertical text improved.\n  * Handling of leader dots improved.\n  * Table detection greatly improved.\n  * Fixed a couple of memory leaks.\n  * Fixed font labels on output text. (Not perfect, but a lot better than before.)\n  * Cleanup and more bug fixes\n  * Special treatments for Hindi.\n  * Support for build in VS2010 with Microsoft Windows SDK for Windows 7 (thanks to Michael Lutz)\n\n2010-09-21 - V3.00\n  * Preparations for thread safety:\n     * Changed TessBaseAPI methods to be non-static\n     * Created a class hierarchy for the directories to hold instance data,\n       and began moving code into the classes.\n     * Moved thresholding code to a separate class.\n  * Added major new page layout analysis module.\n  * Added HOCR output (issues 221, 263: thanks to amkryukov).\n  * Added Leptonica as main image I/O and handling. Currently optional,\n    but in future releases linking with Leptonica will be mandatory.\n  * Ambiguity table rewritten to allow definite replacements in place\n    of fix_quotes.\n  * Added TessdataManager to combine data files into a single file.\n  * Some dead code deleted.\n  * VC++6 no longer supported. It can't cope with the use of templates.\n  * Many more languages added.\n  * Doxygenation of most of the function header comments.\n  * Added man pages.\n  * Added bash completion script (issue 247: thanks to neskiem)\n  * Fix integer overview in thresholding (issue 366: thanks to Cyanide.Drake)\n  * Add Danish Fraktur support (issues 300, 360: thanks to\n    dsl602230@vip.cybercity.dk)\n  * Fix file pointer leak (issue 359, thanks to yukihiro.nakadaira)\n  * Fix an error using user-words (Issue 345: thanks to max.markin)\n  * Fix a memory leak in tablefind.cpp (Issue 342, thanks to zdravco)\n  * Fix a segfault due to double fclose (Issue 320, thanks to souther)\n  * Fix an automake error (Issue 318, thanks to ichanjz)\n  * Fix a Win32 crash on fileFormatIsTiff() (Issues 304, 316, 317, 330, 347,\n    349, 352: thanks to nguyenq87, max.markin, zdenop)\n  * Fixed a number of errors in newer (stricter) versions of VC++ (Issues\n    301, among others)\n\n2009-06-30 - V2.04\n  * Integrated bug fixes and patches and misc changes for portability.\n  * Integrated a patch to remove some of the \"access\" macros.\n  * Removed dependence on lua from the viewer, speeding it up\n    dramatically.\n  * Fixed the viewer so it compiles and runs properly!\n  * Specifically fixing issues: 1, 63, 67, 71, 76, 81, 82, 106, 111,\n   112, 128, 129, 130, 133, 135, 142, 143, 145, 147, 153, 154, 160,\n   165, 170, 175, 177, 187, 192, 195, 199, 201, 205, 209, 108, 169\n\n2008-04-22 - V2.03\n  * Fixed crash introduced in 2.02.\n  * Fixed lack of tessembedded.cpp in distribution.\n  * Added test for leptonica header files and conditional test for lib.\n\n2008-04-21 - V2.02 (again)\n  * Fixed namespace collisions with jpeg library (INT32).\n  * Portability fixes for Windows for new code.\n  * Updates to autoconf system for new code.\n\n2008-01-23 - V2.02\n  * Improvements to clustering, training and classifier.\n  * Major internationalization improvements for large-character-set\n  * languages, eg Kannada.\n  * Removed some compiler warnings.\n  * Added multipage tiff support for training and running.\n  * Updated graphics output to talk to new java-based viewer.\n  * Added ability to save n-best lists.\n  * Added leptonica support for more file types.\n  * Improved Init/End to make them safe.\n  * Reduced memory use of dictionaries.\n  * Added some new APIs to TessBaseAPI.\n\n2007-08-27 - V2.01\n  * Fixed UTF8 input problems with box file reader.\n  * Fixed various infinite loops and crashes in dawg code.\n  * Removed include of config_auto.h from host.h.\n  * Added automatic wctype encoding to unicharset_extractor.\n  * Fixed dawg table too full error.\n  * Removed svn files from tarball.\n  * Added new functions to tessdll.\n  * Increased maximum utf8 string in a classification result to 8.\n\n2007-07-02 - V2.00\n  * Converted internal character handling to UTF8.\n  * Trained with 6 languages.\n  * Added unicharset_extractor, wordlist2dawg.\n  * Added boxfile creation mode.\n  * Added UNLV regression test capability.\n  * Fixed problems with copyright and registered symbols.\n  * Fixed extern \"C\" declarations problem.\n\n2007-05-15 - V1.04\n  * Added dll exports for Windows.\n  * Fixed name collisions with stl etc.\n  * Made some preliminary changes ready for unicodeization.\n  * Several bug fixes discovered during unicodeization.\n\n2007-02-02 - V1.03\n  * Added mftraining and cntraining.\n  * Added baseapi with adaptive thresholding for grey and color.\n  * Fixed many memory leaks.\n  * Fixed several bugs including lack of use of adaptive classifier.\n  * Added ifdefs to eliminate graphics code and add embedded platform support.\n  * Incorporated several patches, including 64-bit builds, Mac builds.\n  * Minor accuracy improvements.\n\n2006-10-04 - V1.02\n  * Removed dependency on Aspirin.\n  * Fixed a few missing Apache license headers.\n  * Removed $log.\n\n2006-09-07 - V1.01.\n  * Added mfcpch.cpp and getopt.cpp for VC++.\n  * Fixed problem with greyscale images and no libtiff.\n  * Stopped debug window from being used for the usage output.\n  * Fixed load of inttemp for big-endian architectures.\n  * Fixed some Mac compilation issues.\n\n2006-06-16 - V1.0 of open source Tesseract checked-in.\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 9.09,
          "content": "Copyright 1994, 1995, 1996, 1999, 2000, 2001, 2002 Free Software\nFoundation, Inc.\n\n   This file is free documentation; the Free Software Foundation gives\nunlimited permission to copy, distribute and modify it.\n\nBasic Installation\n==================\n\n   These are generic installation instructions. First you need to run\n`./autogen.sh', that creates `configure' script.\n\n   The `configure' shell script attempts to guess correct values for\nvarious system-dependent variables used during compilation.  It uses\nthose values to create a `Makefile' in each directory of the package.\nIt may also create one or more `.h' files containing system-dependent\ndefinitions.  Finally, it creates a shell script `config.status' that\nyou can run in the future to recreate the current configuration, and a\nfile `config.log' containing compiler output (useful mainly for\ndebugging `configure').\n\n   It can also use an optional file (typically called `config.cache'\nand enabled with `--cache-file=config.cache' or simply `-C') that saves\nthe results of its tests to speed up reconfiguring.  (Caching is\ndisabled by default to prevent problems with accidental use of stale\ncache files.)\n\n   If you need to do unusual things to compile the package, please try\nto figure out how `configure' could check whether to do them, and mail\ndiffs or instructions to the address given in the `README' so they can\nbe considered for the next release.  If you are using the cache, and at\nsome point `config.cache' contains results you don't want to keep, you\nmay remove or edit it.\n\n   The file `configure.ac' (or `configure.in') is used to create\n`configure' by a program called `autoconf'.  You only need\n`configure.ac' if you want to change it or regenerate `configure' using\na newer version of `autoconf'.\n\nThe simplest way to compile this package is:\n\n  1. `cd' to the directory containing the package's source code and type\n     `./configure' to configure the package for your system.  If you're\n     using `csh' on an old version of System V, you might need to type\n     `sh ./configure' instead to prevent `csh' from trying to execute\n     `configure' itself.\n\n     Running `configure' takes a while.  While running, it prints some\n     messages telling which features it is checking for.\n\n  2. Type `make' to compile the package.\n\n  3. Optionally, type `make check' to run any self-tests that come with\n     the package.\n\n  4. Type `make install' to install the programs and any data files and\n     documentation.\n\n  5. You can remove the program binaries and object files from the\n     source code directory by typing `make clean'.  To also remove the\n     files that `configure' created (so you can compile the package for\n     a different kind of computer), type `make distclean'.  There is\n     also a `make maintainer-clean' target, but that is intended mainly\n     for the package's developers.  If you use it, you may have to get\n     all sorts of other programs in order to regenerate files that came\n     with the distribution.\n\nCompilers and Options\n=====================\n\n   Some systems require unusual options for compilation or linking that\nthe `configure' script does not know about.  Run `./configure --help'\nfor details on some of the pertinent environment variables.\n\n   You can give `configure' initial values for configuration parameters\nby setting variables in the command line or in the environment.  Here\nis an example:\n\n     ./configure CC=c89 CFLAGS=-O2 LIBS=-lposix\n\n   *Note Defining Variables::, for more details.\n\nCompiling For Multiple Architectures\n====================================\n\n   You can compile the package for more than one kind of computer at the\nsame time, by placing the object files for each architecture in their\nown directory.  To do this, you must use a version of `make' that\nsupports the `VPATH' variable, such as GNU `make'.  `cd' to the\ndirectory where you want the object files and executables to go and run\nthe `configure' script.  `configure' automatically checks for the\nsource code in the directory that `configure' is in and in `..'.\n\n   If you have to use a `make' that does not support the `VPATH'\nvariable, you have to compile the package for one architecture at a\ntime in the source code directory.  After you have installed the\npackage for one architecture, use `make distclean' before reconfiguring\nfor another architecture.\n\nInstallation Names\n==================\n\n   By default, `make install' will install the package's files in\n`/usr/local/bin', `/usr/local/man', etc.  You can specify an\ninstallation prefix other than `/usr/local' by giving `configure' the\noption `--prefix=PATH'.\n\n   You can specify separate installation prefixes for\narchitecture-specific files and architecture-independent files.  If you\ngive `configure' the option `--exec-prefix=PATH', the package will use\nPATH as the prefix for installing programs and libraries.\nDocumentation and other data files will still use the regular prefix.\n\n   In addition, if you use an unusual directory layout you can give\noptions like `--bindir=PATH' to specify different values for particular\nkinds of files.  Run `configure --help' for a list of the directories\nyou can set and what kinds of files go in them.\n\n   If the package supports it, you can cause programs to be installed\nwith an extra prefix or suffix on their names by giving `configure' the\noption `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.\n\nOptional Features\n=================\n\n   Some packages pay attention to `--enable-FEATURE' options to\n`configure', where FEATURE indicates an optional part of the package.\nThey may also pay attention to `--with-PACKAGE' options, where PACKAGE\nis something like `gnu-as' or `x' (for the X Window System).  The\n`README' should mention any `--enable-' and `--with-' options that the\npackage recognizes.\n\n   For packages that use the X Window System, `configure' can usually\nfind the X include and library files automatically, but if it doesn't,\nyou can use the `configure' options `--x-includes=DIR' and\n`--x-libraries=DIR' to specify their locations.\n\nSpecifying the System Type\n==========================\n\n   There may be some features `configure' cannot figure out\nautomatically, but needs to determine by the type of machine the package\nwill run on.  Usually, assuming the package is built to be run on the\n_same_ architectures, `configure' can figure that out, but if it prints\na message saying it cannot guess the machine type, give it the\n`--build=TYPE' option.  TYPE can either be a short name for the system\ntype, such as `sun4', or a canonical name which has the form:\n\n     CPU-COMPANY-SYSTEM\n\nwhere SYSTEM can have one of these forms:\n\n     OS KERNEL-OS\n\n   See the file `config.sub' for the possible values of each field.  If\n`config.sub' isn't included in this package, then this package doesn't\nneed to know the machine type.\n\n   If you are _building_ compiler tools for cross-compiling, you should\nuse the `--target=TYPE' option to select the type of system they will\nproduce code for.\n\n   If you want to _use_ a cross compiler, that generates code for a\nplatform different from the build platform, you should specify the\n\"host\" platform (i.e., that on which the generated programs will\neventually be run) with `--host=TYPE'.\n\nSharing Defaults\n================\n\n   If you want to set default values for `configure' scripts to share,\nyou can create a site shell script called `config.site' that gives\ndefault values for variables like `CC', `cache_file', and `prefix'.\n`configure' looks for `PREFIX/share/config.site' if it exists, then\n`PREFIX/etc/config.site' if it exists.  Or, you can set the\n`CONFIG_SITE' environment variable to the location of the site script.\nA warning: not all `configure' scripts look for a site script.\n\nDefining Variables\n==================\n\n   Variables not defined in a site shell script can be set in the\nenvironment passed to `configure'.  However, some packages may run\nconfigure again during the build, and the customized values of these\nvariables may be lost.  In order to avoid this problem, you should set\nthem in the `configure' command line, using `VAR=value'.  For example:\n\n     ./configure CC=/usr/local2/bin/gcc\n\nwill cause the specified gcc to be used as the C compiler (unless it is\noverridden in the site shell script).\n\n`configure' Invocation\n======================\n\n   `configure' recognizes the following options to control how it\noperates.\n\n`--help'\n`-h'\n     Print a summary of the options to `configure', and exit.\n\n`--version'\n`-V'\n     Print the version of Autoconf used to generate the `configure'\n     script, and exit.\n\n`--cache-file=FILE'\n     Enable the cache: use and save the results of the tests in FILE,\n     traditionally `config.cache'.  FILE defaults to `/dev/null' to\n     disable caching.\n\n`--config-cache'\n`-C'\n     Alias for `--cache-file=config.cache'.\n\n`--quiet'\n`--silent'\n`-q'\n     Do not print messages saying which checks are being made.  To\n     suppress all normal output, redirect it to `/dev/null' (any error\n     messages will still be shown).\n\n`--srcdir=DIR'\n     Look for the package's source code in directory DIR.  Usually\n     `configure' can determine that directory automatically.\n\n`configure' also accepts some other, not widely useful, options.  Run\n`configure --help' for more details.\n"
        },
        {
          "name": "INSTALL.GIT.md",
          "type": "blob",
          "size": 2.15,
          "content": "## autotools (LINUX/UNIX , msys...)\n\nIf you have cloned Tesseract from GitHub, you must generate\nthe configure script.\n\nIf you have tesseract 4.0x installation in your system, please remove it\nbefore new build.\n\nYou need Leptonica 1.74.2 (minimum) for Tesseract 4.0x.\n\nKnown dependencies for training tools (excluding leptonica):\n\n* compiler with c++17 support\n* automake\n* pkg-config\n* pango-devel\n* cairo-devel\n* icu-devel\n\nSo, the steps for making Tesseract are:\n\n    ./autogen.sh\n    ./configure\n    make\n    sudo make install\n    sudo ldconfig\n    make training\n    sudo make training-install\n\nYou need to install at least English language and OSD traineddata files to\n`TESSDATA_PREFIX` directory.\n\nYou can retrieve single file with tools like [wget](https://www.gnu.org/software/wget/), [curl](https://curl.haxx.se/), [GithubDownloader](https://github.com/intezer/GithubDownloader) or browser.\n\nAll language data files can be retrieved from git repository (useful only for packagers!).\n(Repository is huge - more that 1.2 GB. You do NOT need to download traineddata files for\nall languages).\n\n    git clone https://github.com/tesseract-ocr/tessdata.git tesseract-ocr.tessdata\n\nYou need an Internet connection and [curl](https://curl.haxx.se/) to compile `ScrollView.jar`\nbecause the build will automatically download\n[piccolo2d-core-3.0.1.jar](https://search.maven.org/remotecontent?filepath=org/piccolo2d/piccolo2d-core/3.0.1/piccolo2d-core-3.0.1.jar) and\n[piccolo2d-extras-3.0.1.jar](https://search.maven.org/remotecontent?filepath=org/piccolo2d/piccolo2d-extras/3.0.1/piccolo2d-extras-3.0.1.jar) and\n[jaxb-api-2.3.1.jar](http://search.maven.org/remotecontent?filepath=javax/xml/bind/jaxb-api/2.3.1/jaxb-api-2.3.1.jar) and place them to `tesseract/java`.\n\nJust run:\n\n    make ScrollView.jar\n\nand follow the instruction on [Viewer Debugging](https://tesseract-ocr.github.io/tessdoc/ViewerDebugging.html).\n\n## cmake\n\nThere is alternative build system based on multiplatform [cmake](https://cmake.org/)\n\n### LINUX\n\n    mkdir build\n    cd build && cmake .. && make\n    sudo make install\n\n### WINDOWS\n\nSee the [documentation](https://tesseract-ocr.github.io/tessdoc/) for more information on this.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.09,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 60.91,
          "content": "## run autogen.sh to create Makefile.in from this file\nACLOCAL_AMFLAGS = -I m4\n\n.PHONY: doc html install-langs ScrollView.jar install-jars pdf training\n\nCLEANFILES =\n\nSUBDIRS = . tessdata\nif MINGW\nSUBDIRS += nsis\nendif\n\nEXTRA_DIST = README.md LICENSE\nEXTRA_DIST += aclocal.m4 config configure.ac autogen.sh\nEXTRA_DIST += tesseract.pc.in doc\nif !GRAPHICS_DISABLED\nEXTRA_DIST += java\nendif\nEXTRA_DIST += CMakeLists.txt tesseract.pc.cmake cmake VERSION\n\nDIST_SUBDIRS = $(SUBDIRS)\n\nEXTRA_PROGRAMS =\n\nuninstall-hook:\n\trm -rf $(DESTDIR)$(pkgincludedir)\n\ndist-hook:\n# added using EXTRA_DIST. $(distdir)/tessdata would in\n# theory suffice.\n\trm -rf `find $(distdir) -name .deps -type d`\n\t-rm -f $(distdir)/*/Makefile $(distdir)/*/*/Makefile\n\trm -f `find $(distdir) -name '*~'`\n\trm -rf $(distdir)/doc/html/* $(distdir)/doc/*.log\n\nif !GRAPHICS_DISABLED\nScrollView.jar:\n\t@cd \"$(top_builddir)/java\" && $(MAKE) $@\n\ninstall-jars:\n\t@cd \"$(top_builddir)/java\" && $(MAKE) $@\nendif\n\ndoc:\n\t-srcdir=\"$(top_srcdir)\" builddir=\"$(top_builddir)\" \\\n\tversion=\"@PACKAGE_VERSION@\" name=\"@PACKAGE_NAME@\" \\\n\tdoxygen $(top_srcdir)/doc/Doxyfile\n\ndoc-pack: doc\n\t-chmod a+r $(top_builddir)/doc/html/*\n\t @tar --create --directory=$(top_builddir)/doc/html --verbose --file=- . | gzip -c -9 > $(top_builddir)/@PACKAGE_NAME@-@PACKAGE_VERSION@-doc-html.tar.gz;\n\ndoc-clean:\n\trm -rf $(top_builddir)/doc/html/*\n\nif MINGW\nwinsetup: training ScrollView.jar\n\t@cd \"$(top_builddir)/nsis\" && $(MAKE) winsetup\nendif\n\npkgconfigdir = $(libdir)/pkgconfig\npkgconfig_DATA = tesseract.pc\n\npkginclude_HEADERS = $(top_builddir)/include/tesseract/version.h\npkginclude_HEADERS += include/tesseract/baseapi.h\npkginclude_HEADERS += include/tesseract/capi.h\npkginclude_HEADERS += include/tesseract/export.h\npkginclude_HEADERS += include/tesseract/ltrresultiterator.h\npkginclude_HEADERS += include/tesseract/ocrclass.h\npkginclude_HEADERS += include/tesseract/osdetect.h\npkginclude_HEADERS += include/tesseract/pageiterator.h\npkginclude_HEADERS += include/tesseract/publictypes.h\npkginclude_HEADERS += include/tesseract/renderer.h\npkginclude_HEADERS += include/tesseract/resultiterator.h\npkginclude_HEADERS += include/tesseract/unichar.h\n\n# Rules for all subdirectories.\n\nnoinst_HEADERS =\nnoinst_LTLIBRARIES =\n\nAM_CPPFLAGS += -I$(top_srcdir)/include\nAM_CPPFLAGS += -I$(top_builddir)/include\nif VISIBILITY\nAM_CPPFLAGS += -DTESS_EXPORTS\nAM_CPPFLAGS += -fvisibility=hidden -fvisibility-inlines-hidden -fPIC\nendif\n\nAM_CXXFLAGS = $(OPENMP_CXXFLAGS)\n\n# Rules for src/api.\n\nlibtesseract_la_CPPFLAGS = $(AM_CPPFLAGS)\nlibtesseract_la_CPPFLAGS += -DTESS_COMMON_TRAINING_API=\nlibtesseract_la_CPPFLAGS += -I$(top_srcdir)/src/arch\nlibtesseract_la_CPPFLAGS += -I$(top_srcdir)/src/ccmain\nlibtesseract_la_CPPFLAGS += -I$(top_srcdir)/src/ccstruct\nlibtesseract_la_CPPFLAGS += -I$(top_srcdir)/src/ccutil\nlibtesseract_la_CPPFLAGS += -I$(top_srcdir)/src/classify\nlibtesseract_la_CPPFLAGS += -I$(top_srcdir)/src/cutil\nlibtesseract_la_CPPFLAGS += -I$(top_srcdir)/src/dict\nlibtesseract_la_CPPFLAGS += -I$(top_srcdir)/src/lstm\nlibtesseract_la_CPPFLAGS += -I$(top_srcdir)/src/textord\nlibtesseract_la_CPPFLAGS += -I$(top_srcdir)/src/training/common\nlibtesseract_la_CPPFLAGS += -I$(top_srcdir)/src/viewer\nlibtesseract_la_CPPFLAGS += -I$(top_srcdir)/src/wordrec\nlibtesseract_la_CPPFLAGS += $(libcurl_CFLAGS)\n\nlib_LTLIBRARIES = libtesseract.la\nlibtesseract_la_LDFLAGS = $(LEPTONICA_LIBS)\nlibtesseract_la_LDFLAGS += $(libarchive_LIBS)\nlibtesseract_la_LDFLAGS += $(libcurl_LIBS)\nif T_WIN\nlibtesseract_la_LDFLAGS += -no-undefined -lws2_32\nelse\nlibtesseract_la_LDFLAGS += $(NOUNDEFINED)\nendif\nlibtesseract_la_LDFLAGS += -version-info $(GENERIC_LIBRARY_VERSION)\n\nlibtesseract_la_SOURCES = src/api/baseapi.cpp\nlibtesseract_la_SOURCES += src/api/altorenderer.cpp\nlibtesseract_la_SOURCES += src/api/pagerenderer.cpp\nlibtesseract_la_SOURCES += src/api/capi.cpp\nlibtesseract_la_SOURCES += src/api/hocrrenderer.cpp\nlibtesseract_la_SOURCES += src/api/lstmboxrenderer.cpp\nlibtesseract_la_SOURCES += src/api/pdfrenderer.cpp\nlibtesseract_la_SOURCES += src/api/renderer.cpp\nlibtesseract_la_SOURCES += src/api/wordstrboxrenderer.cpp\n\nlibtesseract_la_LIBADD = libtesseract_ccutil.la\nlibtesseract_la_LIBADD += libtesseract_lstm.la\nlibtesseract_la_LIBADD += libtesseract_native.la\n\n# Rules for src/arch.\n\nnoinst_HEADERS += src/arch/dotproduct.h\nnoinst_HEADERS += src/arch/intsimdmatrix.h\nnoinst_HEADERS += src/arch/simddetect.h\n\nnoinst_LTLIBRARIES += libtesseract_native.la\n\nlibtesseract_native_la_CXXFLAGS = -O3 -ffast-math\nif OPENMP_SIMD\nlibtesseract_native_la_CXXFLAGS += -fopenmp-simd -DOPENMP_SIMD\nendif\nlibtesseract_native_la_CXXFLAGS += -I$(top_srcdir)/src/ccutil\nlibtesseract_native_la_SOURCES = src/arch/dotproduct.cpp\n\nif HAVE_AVX\nlibtesseract_avx_la_CXXFLAGS = -mavx\nlibtesseract_avx_la_CXXFLAGS += -I$(top_srcdir)/src/ccutil\nlibtesseract_avx_la_SOURCES = src/arch/dotproductavx.cpp\nlibtesseract_la_LIBADD += libtesseract_avx.la\nnoinst_LTLIBRARIES += libtesseract_avx.la\nendif\n\nif HAVE_AVX2\nlibtesseract_avx2_la_CXXFLAGS = -mavx2\nlibtesseract_avx2_la_CXXFLAGS += -I$(top_srcdir)/src/ccutil\nlibtesseract_avx2_la_SOURCES = src/arch/intsimdmatrixavx2.cpp\nlibtesseract_la_LIBADD += libtesseract_avx2.la\nnoinst_LTLIBRARIES += libtesseract_avx2.la\nendif\n\nif HAVE_AVX512F\nlibtesseract_avx512_la_CXXFLAGS = -mavx512f\nlibtesseract_avx512_la_CXXFLAGS += -I$(top_srcdir)/src/ccutil\nlibtesseract_avx512_la_SOURCES = src/arch/dotproductavx512.cpp\nlibtesseract_la_LIBADD += libtesseract_avx512.la\nnoinst_LTLIBRARIES += libtesseract_avx512.la\nendif\n\nif HAVE_FMA\nlibtesseract_fma_la_CXXFLAGS = -mfma\nlibtesseract_fma_la_CXXFLAGS += -I$(top_srcdir)/src/ccutil\nlibtesseract_fma_la_SOURCES = src/arch/dotproductfma.cpp\nlibtesseract_la_LIBADD += libtesseract_fma.la\nnoinst_LTLIBRARIES += libtesseract_fma.la\nendif\n\nif HAVE_SSE4_1\nlibtesseract_sse_la_CXXFLAGS = -msse4.1\nlibtesseract_sse_la_CXXFLAGS += -I$(top_srcdir)/src/ccutil\nlibtesseract_sse_la_SOURCES = src/arch/dotproductsse.cpp src/arch/intsimdmatrixsse.cpp\nlibtesseract_la_LIBADD += libtesseract_sse.la\nnoinst_LTLIBRARIES += libtesseract_sse.la\nendif\n\nif HAVE_NEON\nlibtesseract_neon_la_CXXFLAGS = $(NEON_CXXFLAGS)\nlibtesseract_neon_la_CXXFLAGS += -O3\nif OPENMP_SIMD\nlibtesseract_neon_la_CXXFLAGS += -fopenmp-simd -DOPENMP_SIMD\nendif\nlibtesseract_neon_la_CXXFLAGS += -I$(top_srcdir)/src/ccutil\nlibtesseract_neon_la_SOURCES = src/arch/intsimdmatrixneon.cpp\nlibtesseract_neon_la_SOURCES += src/arch/dotproductneon.cpp\nlibtesseract_la_LIBADD += libtesseract_neon.la\nnoinst_LTLIBRARIES += libtesseract_neon.la\nendif\n\nif HAVE_RVV\nlibtesseract_rvv_la_CXXFLAGS = $(RVV_CXXFLAGS)\nlibtesseract_rvv_la_CXXFLAGS += -O3\nlibtesseract_rvv_la_CXXFLAGS += -I$(top_srcdir)/src/ccutil\nlibtesseract_rvv_la_SOURCES = src/arch/intsimdmatrixrvv.cpp\nlibtesseract_la_LIBADD += libtesseract_rvv.la\nnoinst_LTLIBRARIES += libtesseract_rvv.la\nendif\n\nlibtesseract_la_SOURCES += src/arch/intsimdmatrix.cpp\nlibtesseract_la_SOURCES += src/arch/simddetect.cpp\n\n# Rules for src/ccmain.\n\nnoinst_HEADERS += src/ccmain/control.h\nnoinst_HEADERS += src/ccmain/mutableiterator.h\nnoinst_HEADERS += src/ccmain/output.h\nnoinst_HEADERS += src/ccmain/paragraphs.h\nnoinst_HEADERS += src/ccmain/paragraphs_internal.h\nnoinst_HEADERS += src/ccmain/paramsd.h\nnoinst_HEADERS += src/ccmain/pgedit.h\nnoinst_HEADERS += src/ccmain/tesseractclass.h\nnoinst_HEADERS += src/ccmain/tessvars.h\nnoinst_HEADERS += src/ccmain/thresholder.h\nnoinst_HEADERS += src/ccmain/werdit.h\nif !DISABLED_LEGACY_ENGINE\nnoinst_HEADERS += src/ccmain/docqual.h\nnoinst_HEADERS += src/ccmain/equationdetect.h\nnoinst_HEADERS += src/ccmain/fixspace.h\nnoinst_HEADERS += src/ccmain/reject.h\nendif\n\nlibtesseract_la_SOURCES += src/ccmain/applybox.cpp\nlibtesseract_la_SOURCES += src/ccmain/control.cpp\nlibtesseract_la_SOURCES += src/ccmain/linerec.cpp\nlibtesseract_la_SOURCES += src/ccmain/ltrresultiterator.cpp\nlibtesseract_la_SOURCES += src/ccmain/mutableiterator.cpp\nlibtesseract_la_SOURCES += src/ccmain/output.cpp\nlibtesseract_la_SOURCES += src/ccmain/pageiterator.cpp\nlibtesseract_la_SOURCES += src/ccmain/pagesegmain.cpp\nlibtesseract_la_SOURCES += src/ccmain/pagewalk.cpp\nlibtesseract_la_SOURCES += src/ccmain/paragraphs.cpp\nif !GRAPHICS_DISABLED\nlibtesseract_la_SOURCES += src/ccmain/paramsd.cpp\nlibtesseract_la_SOURCES += src/ccmain/pgedit.cpp\nendif\nlibtesseract_la_SOURCES += src/ccmain/reject.cpp\nlibtesseract_la_SOURCES += src/ccmain/resultiterator.cpp\nlibtesseract_la_SOURCES += src/ccmain/tessedit.cpp\nlibtesseract_la_SOURCES += src/ccmain/tesseractclass.cpp\nlibtesseract_la_SOURCES += src/ccmain/tessvars.cpp\nlibtesseract_la_SOURCES += src/ccmain/thresholder.cpp\nlibtesseract_la_SOURCES += src/ccmain/werdit.cpp\nif !DISABLED_LEGACY_ENGINE\nlibtesseract_la_SOURCES += src/ccmain/adaptions.cpp\nlibtesseract_la_SOURCES += src/ccmain/docqual.cpp\nlibtesseract_la_SOURCES += src/ccmain/equationdetect.cpp\nlibtesseract_la_SOURCES += src/ccmain/fixspace.cpp\nlibtesseract_la_SOURCES += src/ccmain/fixxht.cpp\nlibtesseract_la_SOURCES += src/ccmain/osdetect.cpp\nlibtesseract_la_SOURCES += src/ccmain/par_control.cpp\nlibtesseract_la_SOURCES += src/ccmain/recogtraining.cpp\nlibtesseract_la_SOURCES += src/ccmain/superscript.cpp\nlibtesseract_la_SOURCES += src/ccmain/tessbox.cpp\nlibtesseract_la_SOURCES += src/ccmain/tfacepp.cpp\nendif\n\n# Rules for src/ccstruct.\n\nnoinst_HEADERS += src/ccstruct/blamer.h\nnoinst_HEADERS += src/ccstruct/blobbox.h\nnoinst_HEADERS += src/ccstruct/blobs.h\nnoinst_HEADERS += src/ccstruct/blread.h\nnoinst_HEADERS += src/ccstruct/boxread.h\nnoinst_HEADERS += src/ccstruct/boxword.h\nnoinst_HEADERS += src/ccstruct/ccstruct.h\nnoinst_HEADERS += src/ccstruct/coutln.h\nnoinst_HEADERS += src/ccstruct/crakedge.h\nnoinst_HEADERS += src/ccstruct/debugpixa.h\nnoinst_HEADERS += src/ccstruct/detlinefit.h\nnoinst_HEADERS += src/ccstruct/dppoint.h\nnoinst_HEADERS += src/ccstruct/image.h\nnoinst_HEADERS += src/ccstruct/imagedata.h\nnoinst_HEADERS += src/ccstruct/linlsq.h\nnoinst_HEADERS += src/ccstruct/matrix.h\nnoinst_HEADERS += src/ccstruct/mod128.h\nnoinst_HEADERS += src/ccstruct/normalis.h\nnoinst_HEADERS += src/ccstruct/ocrblock.h\nnoinst_HEADERS += src/ccstruct/ocrpara.h\nnoinst_HEADERS += src/ccstruct/ocrrow.h\nnoinst_HEADERS += src/ccstruct/otsuthr.h\nnoinst_HEADERS += src/ccstruct/pageres.h\nnoinst_HEADERS += src/ccstruct/pdblock.h\nnoinst_HEADERS += src/ccstruct/points.h\nnoinst_HEADERS += src/ccstruct/polyaprx.h\nnoinst_HEADERS += src/ccstruct/polyblk.h\nnoinst_HEADERS += src/ccstruct/quadlsq.h\nnoinst_HEADERS += src/ccstruct/quadratc.h\nnoinst_HEADERS += src/ccstruct/quspline.h\nnoinst_HEADERS += src/ccstruct/ratngs.h\nnoinst_HEADERS += src/ccstruct/rect.h\nnoinst_HEADERS += src/ccstruct/rejctmap.h\nnoinst_HEADERS += src/ccstruct/seam.h\nnoinst_HEADERS += src/ccstruct/split.h\nnoinst_HEADERS += src/ccstruct/statistc.h\nnoinst_HEADERS += src/ccstruct/stepblob.h\nnoinst_HEADERS += src/ccstruct/werd.h\nif !DISABLED_LEGACY_ENGINE\nnoinst_HEADERS += src/ccstruct/fontinfo.h\nnoinst_HEADERS += src/ccstruct/params_training_featdef.h\nendif\n\nlibtesseract_la_SOURCES += src/ccstruct/blamer.cpp\nlibtesseract_la_SOURCES += src/ccstruct/blobbox.cpp\nlibtesseract_la_SOURCES += src/ccstruct/blobs.cpp\nlibtesseract_la_SOURCES += src/ccstruct/blread.cpp\nlibtesseract_la_SOURCES += src/ccstruct/boxread.cpp\nlibtesseract_la_SOURCES += src/ccstruct/boxword.cpp\nlibtesseract_la_SOURCES += src/ccstruct/ccstruct.cpp\nlibtesseract_la_SOURCES += src/ccstruct/coutln.cpp\nlibtesseract_la_SOURCES += src/ccstruct/detlinefit.cpp\nlibtesseract_la_SOURCES += src/ccstruct/dppoint.cpp\nlibtesseract_la_SOURCES += src/ccstruct/image.cpp\nlibtesseract_la_SOURCES += src/ccstruct/imagedata.cpp\nlibtesseract_la_SOURCES += src/ccstruct/linlsq.cpp\nlibtesseract_la_SOURCES += src/ccstruct/matrix.cpp\nlibtesseract_la_SOURCES += src/ccstruct/mod128.cpp\nlibtesseract_la_SOURCES += src/ccstruct/normalis.cpp\nlibtesseract_la_SOURCES += src/ccstruct/ocrblock.cpp\nlibtesseract_la_SOURCES += src/ccstruct/ocrpara.cpp\nlibtesseract_la_SOURCES += src/ccstruct/ocrrow.cpp\nlibtesseract_la_SOURCES += src/ccstruct/otsuthr.cpp\nlibtesseract_la_SOURCES += src/ccstruct/pageres.cpp\nlibtesseract_la_SOURCES += src/ccstruct/pdblock.cpp\nlibtesseract_la_SOURCES += src/ccstruct/points.cpp\nlibtesseract_la_SOURCES += src/ccstruct/polyaprx.cpp\nlibtesseract_la_SOURCES += src/ccstruct/polyblk.cpp\nlibtesseract_la_SOURCES += src/ccstruct/quadlsq.cpp\nlibtesseract_la_SOURCES += src/ccstruct/quspline.cpp\nlibtesseract_la_SOURCES += src/ccstruct/ratngs.cpp\nlibtesseract_la_SOURCES += src/ccstruct/rect.cpp\nlibtesseract_la_SOURCES += src/ccstruct/rejctmap.cpp\nlibtesseract_la_SOURCES += src/ccstruct/seam.cpp\nlibtesseract_la_SOURCES += src/ccstruct/split.cpp\nlibtesseract_la_SOURCES += src/ccstruct/statistc.cpp\nlibtesseract_la_SOURCES += src/ccstruct/stepblob.cpp\nlibtesseract_la_SOURCES += src/ccstruct/werd.cpp\n\nif !DISABLED_LEGACY_ENGINE\nlibtesseract_la_SOURCES += src/ccstruct/fontinfo.cpp\nlibtesseract_la_SOURCES += src/ccstruct/params_training_featdef.cpp\nendif\n\n# Rules for src/ccutil\n\nlibtesseract_ccutil_la_CPPFLAGS = $(AM_CPPFLAGS)\nlibtesseract_ccutil_la_CPPFLAGS += $(libarchive_CFLAGS)\nif !NO_TESSDATA_PREFIX\nlibtesseract_ccutil_la_CPPFLAGS += -DTESSDATA_PREFIX='\"@datadir@\"'\nendif\n\nnoinst_HEADERS += src/ccutil/ccutil.h\nnoinst_HEADERS += src/ccutil/clst.h\nnoinst_HEADERS += src/ccutil/elst2.h\nnoinst_HEADERS += src/ccutil/elst.h\nnoinst_HEADERS += src/ccutil/errcode.h\nnoinst_HEADERS += src/ccutil/fileerr.h\nnoinst_HEADERS += src/ccutil/genericheap.h\nnoinst_HEADERS += src/ccutil/genericvector.h\nnoinst_HEADERS += src/ccutil/helpers.h\nnoinst_HEADERS += src/ccutil/host.h\nnoinst_HEADERS += src/ccutil/kdpair.h\nnoinst_HEADERS += src/ccutil/lsterr.h\nnoinst_HEADERS += src/ccutil/object_cache.h\nnoinst_HEADERS += src/ccutil/params.h\nnoinst_HEADERS += src/ccutil/qrsequence.h\nnoinst_HEADERS += src/ccutil/sorthelper.h\nnoinst_HEADERS += src/ccutil/scanutils.h\nnoinst_HEADERS += src/ccutil/serialis.h\nnoinst_HEADERS += src/ccutil/tessdatamanager.h\nnoinst_HEADERS += src/ccutil/tprintf.h\nnoinst_HEADERS += src/ccutil/unicharcompress.h\nnoinst_HEADERS += src/ccutil/unicharmap.h\nnoinst_HEADERS += src/ccutil/unicharset.h\nnoinst_HEADERS += src/ccutil/unicity_table.h\nif !DISABLED_LEGACY_ENGINE\nnoinst_HEADERS += src/ccutil/ambigs.h\nnoinst_HEADERS += src/ccutil/bitvector.h\nnoinst_HEADERS += src/ccutil/indexmapbidi.h\nnoinst_HEADERS += src/ccutil/universalambigs.h\nendif\n\nnoinst_LTLIBRARIES += libtesseract_ccutil.la\n\nlibtesseract_ccutil_la_SOURCES = src/ccutil/ccutil.cpp\nlibtesseract_ccutil_la_SOURCES += src/ccutil/errcode.cpp\nlibtesseract_ccutil_la_SOURCES += src/ccutil/serialis.cpp\nlibtesseract_ccutil_la_SOURCES += src/ccutil/scanutils.cpp\nlibtesseract_ccutil_la_SOURCES += src/ccutil/tessdatamanager.cpp\nlibtesseract_ccutil_la_SOURCES += src/ccutil/tprintf.cpp\nlibtesseract_ccutil_la_SOURCES += src/ccutil/unichar.cpp\nlibtesseract_ccutil_la_SOURCES += src/ccutil/unicharcompress.cpp\nlibtesseract_ccutil_la_SOURCES += src/ccutil/unicharmap.cpp\nlibtesseract_ccutil_la_SOURCES += src/ccutil/unicharset.cpp\nlibtesseract_ccutil_la_SOURCES += src/ccutil/params.cpp\nif !DISABLED_LEGACY_ENGINE\nlibtesseract_ccutil_la_SOURCES += src/ccutil/ambigs.cpp\nlibtesseract_ccutil_la_SOURCES += src/ccutil/bitvector.cpp\nlibtesseract_ccutil_la_SOURCES += src/ccutil/indexmapbidi.cpp\nendif\n\n# Rules for src/classify.\n\nnoinst_HEADERS += src/classify/classify.h\nif !DISABLED_LEGACY_ENGINE\nnoinst_HEADERS += src/classify/adaptive.h\nnoinst_HEADERS += src/classify/cluster.h\nnoinst_HEADERS += src/classify/clusttool.h\nnoinst_HEADERS += src/classify/featdefs.h\nnoinst_HEADERS += src/classify/float2int.h\nnoinst_HEADERS += src/classify/fpoint.h\nnoinst_HEADERS += src/classify/intfeaturespace.h\nnoinst_HEADERS += src/classify/intfx.h\nnoinst_HEADERS += src/classify/intmatcher.h\nnoinst_HEADERS += src/classify/intproto.h\nnoinst_HEADERS += src/classify/kdtree.h\nnoinst_HEADERS += src/classify/mf.h\nnoinst_HEADERS += src/classify/mfdefs.h\nnoinst_HEADERS += src/classify/mfoutline.h\nnoinst_HEADERS += src/classify/mfx.h\nnoinst_HEADERS += src/classify/normfeat.h\nnoinst_HEADERS += src/classify/normmatch.h\nnoinst_HEADERS += src/classify/ocrfeatures.h\nnoinst_HEADERS += src/classify/outfeat.h\nnoinst_HEADERS += src/classify/picofeat.h\nnoinst_HEADERS += src/classify/protos.h\nnoinst_HEADERS += src/classify/shapeclassifier.h\nnoinst_HEADERS += src/classify/shapetable.h\nnoinst_HEADERS += src/classify/tessclassifier.h\nnoinst_HEADERS += src/classify/trainingsample.h\nendif\n\nlibtesseract_la_SOURCES += src/classify/classify.cpp\nif !DISABLED_LEGACY_ENGINE\nlibtesseract_la_SOURCES += src/classify/adaptive.cpp\nlibtesseract_la_SOURCES += src/classify/adaptmatch.cpp\nlibtesseract_la_SOURCES += src/classify/blobclass.cpp\nlibtesseract_la_SOURCES += src/classify/cluster.cpp\nlibtesseract_la_SOURCES += src/classify/clusttool.cpp\nlibtesseract_la_SOURCES += src/classify/cutoffs.cpp\nlibtesseract_la_SOURCES += src/classify/featdefs.cpp\nlibtesseract_la_SOURCES += src/classify/float2int.cpp\nlibtesseract_la_SOURCES += src/classify/fpoint.cpp\nlibtesseract_la_SOURCES += src/classify/intfeaturespace.cpp\nlibtesseract_la_SOURCES += src/classify/intfx.cpp\nlibtesseract_la_SOURCES += src/classify/intmatcher.cpp\nlibtesseract_la_SOURCES += src/classify/intproto.cpp\nlibtesseract_la_SOURCES += src/classify/kdtree.cpp\nlibtesseract_la_SOURCES += src/classify/mf.cpp\nlibtesseract_la_SOURCES += src/classify/mfoutline.cpp\nlibtesseract_la_SOURCES += src/classify/mfx.cpp\nlibtesseract_la_SOURCES += src/classify/normfeat.cpp\nlibtesseract_la_SOURCES += src/classify/normmatch.cpp\nlibtesseract_la_SOURCES += src/classify/ocrfeatures.cpp\nlibtesseract_la_SOURCES += src/classify/outfeat.cpp\nlibtesseract_la_SOURCES += src/classify/picofeat.cpp\nlibtesseract_la_SOURCES += src/classify/protos.cpp\nlibtesseract_la_SOURCES += src/classify/shapeclassifier.cpp\nlibtesseract_la_SOURCES += src/classify/shapetable.cpp\nlibtesseract_la_SOURCES += src/classify/tessclassifier.cpp\nlibtesseract_la_SOURCES += src/classify/trainingsample.cpp\nendif\n\n# Rules for src/cutil.\n\nif !DISABLED_LEGACY_ENGINE\nnoinst_HEADERS += src/cutil/bitvec.h\nnoinst_HEADERS += src/cutil/oldlist.h\nendif\n\nif !DISABLED_LEGACY_ENGINE\nlibtesseract_la_SOURCES += src/cutil/oldlist.cpp\nendif\n\n# Rules for src/dict.\n\nnoinst_HEADERS += src/dict/dawg.h\nnoinst_HEADERS += src/dict/dawg_cache.h\nnoinst_HEADERS += src/dict/dict.h\nnoinst_HEADERS += src/dict/matchdefs.h\nnoinst_HEADERS += src/dict/stopper.h\nnoinst_HEADERS += src/dict/trie.h\n\nlibtesseract_la_SOURCES += src/dict/context.cpp\nlibtesseract_la_SOURCES += src/dict/dawg.cpp\nlibtesseract_la_SOURCES += src/dict/dawg_cache.cpp\nlibtesseract_la_SOURCES += src/dict/dict.cpp\nlibtesseract_la_SOURCES += src/dict/stopper.cpp\nlibtesseract_la_SOURCES += src/dict/trie.cpp\nif !DISABLED_LEGACY_ENGINE\nlibtesseract_la_SOURCES += src/dict/hyphen.cpp\nlibtesseract_la_SOURCES += src/dict/permdawg.cpp\nendif\n\n# Rules for src/lstm.\n\nlibtesseract_lstm_la_CPPFLAGS = $(AM_CPPFLAGS)\nlibtesseract_lstm_la_CPPFLAGS += -I$(top_srcdir)/src/arch\nlibtesseract_lstm_la_CPPFLAGS += -I$(top_srcdir)/src/ccstruct\nlibtesseract_lstm_la_CPPFLAGS += -I$(top_srcdir)/src/ccutil\nlibtesseract_lstm_la_CPPFLAGS += -I$(top_srcdir)/src/classify\nlibtesseract_lstm_la_CPPFLAGS += -I$(top_srcdir)/src/cutil\nlibtesseract_lstm_la_CPPFLAGS += -I$(top_srcdir)/src/dict\nlibtesseract_lstm_la_CPPFLAGS += -I$(top_srcdir)/src/lstm\nlibtesseract_lstm_la_CPPFLAGS += -I$(top_srcdir)/src/viewer\nif !NO_TESSDATA_PREFIX\nlibtesseract_lstm_la_CPPFLAGS += -DTESSDATA_PREFIX='\"@datadir@\"'\nendif\n\nnoinst_HEADERS += src/lstm/convolve.h\nnoinst_HEADERS += src/lstm/fullyconnected.h\nnoinst_HEADERS += src/lstm/functions.h\nnoinst_HEADERS += src/lstm/input.h\nnoinst_HEADERS += src/lstm/lstm.h\nnoinst_HEADERS += src/lstm/lstmrecognizer.h\nnoinst_HEADERS += src/lstm/maxpool.h\nnoinst_HEADERS += src/lstm/network.h\nnoinst_HEADERS += src/lstm/networkio.h\nnoinst_HEADERS += src/lstm/networkscratch.h\nnoinst_HEADERS += src/lstm/parallel.h\nnoinst_HEADERS += src/lstm/plumbing.h\nnoinst_HEADERS += src/lstm/recodebeam.h\nnoinst_HEADERS += src/lstm/reconfig.h\nnoinst_HEADERS += src/lstm/reversed.h\nnoinst_HEADERS += src/lstm/series.h\nnoinst_HEADERS += src/lstm/static_shape.h\nnoinst_HEADERS += src/lstm/stridemap.h\nnoinst_HEADERS += src/lstm/weightmatrix.h\n\nnoinst_LTLIBRARIES += libtesseract_lstm.la\n\nlibtesseract_lstm_la_SOURCES = src/lstm/convolve.cpp\nlibtesseract_lstm_la_SOURCES += src/lstm/fullyconnected.cpp\nlibtesseract_lstm_la_SOURCES += src/lstm/functions.cpp\nlibtesseract_lstm_la_SOURCES += src/lstm/input.cpp\nlibtesseract_lstm_la_SOURCES += src/lstm/lstm.cpp\nlibtesseract_lstm_la_SOURCES += src/lstm/lstmrecognizer.cpp\nlibtesseract_lstm_la_SOURCES += src/lstm/maxpool.cpp\nlibtesseract_lstm_la_SOURCES += src/lstm/network.cpp\nlibtesseract_lstm_la_SOURCES += src/lstm/networkio.cpp\nlibtesseract_lstm_la_SOURCES += src/lstm/parallel.cpp\nlibtesseract_lstm_la_SOURCES += src/lstm/plumbing.cpp\nlibtesseract_lstm_la_SOURCES += src/lstm/recodebeam.cpp\nlibtesseract_lstm_la_SOURCES += src/lstm/reconfig.cpp\nlibtesseract_lstm_la_SOURCES += src/lstm/reversed.cpp\nlibtesseract_lstm_la_SOURCES += src/lstm/series.cpp\nlibtesseract_lstm_la_SOURCES += src/lstm/stridemap.cpp\nlibtesseract_lstm_la_SOURCES += src/lstm/weightmatrix.cpp\n\n# Rules for src/textord.\n\nnoinst_HEADERS += src/textord/alignedblob.h\nnoinst_HEADERS += src/textord/baselinedetect.h\nnoinst_HEADERS += src/textord/bbgrid.h\nnoinst_HEADERS += src/textord/blkocc.h\nnoinst_HEADERS += src/textord/blobgrid.h\nnoinst_HEADERS += src/textord/ccnontextdetect.h\nnoinst_HEADERS += src/textord/cjkpitch.h\nnoinst_HEADERS += src/textord/colfind.h\nnoinst_HEADERS += src/textord/colpartition.h\nnoinst_HEADERS += src/textord/colpartitionset.h\nnoinst_HEADERS += src/textord/colpartitiongrid.h\nnoinst_HEADERS += src/textord/devanagari_processing.h\nnoinst_HEADERS += src/textord/drawtord.h\nnoinst_HEADERS += src/textord/edgblob.h\nnoinst_HEADERS += src/textord/edgloop.h\nnoinst_HEADERS += src/textord/fpchop.h\nnoinst_HEADERS += src/textord/gap_map.h\nnoinst_HEADERS += src/textord/imagefind.h\nnoinst_HEADERS += src/textord/linefind.h\nnoinst_HEADERS += src/textord/makerow.h\nnoinst_HEADERS += src/textord/oldbasel.h\nnoinst_HEADERS += src/textord/pithsync.h\nnoinst_HEADERS += src/textord/pitsync1.h\nnoinst_HEADERS += src/textord/scanedg.h\nnoinst_HEADERS += src/textord/sortflts.h\nnoinst_HEADERS += src/textord/strokewidth.h\nnoinst_HEADERS += src/textord/tabfind.h\nnoinst_HEADERS += src/textord/tablefind.h\nnoinst_HEADERS += src/textord/tabvector.h\nnoinst_HEADERS += src/textord/tablerecog.h\nnoinst_HEADERS += src/textord/textlineprojection.h\nnoinst_HEADERS += src/textord/textord.h\nnoinst_HEADERS += src/textord/topitch.h\nnoinst_HEADERS += src/textord/tordmain.h\nnoinst_HEADERS += src/textord/tovars.h\nnoinst_HEADERS += src/textord/underlin.h\nnoinst_HEADERS += src/textord/wordseg.h\nnoinst_HEADERS += src/textord/workingpartset.h\nif !DISABLED_LEGACY_ENGINE\nnoinst_HEADERS += src/textord/equationdetectbase.h\nendif\n\nlibtesseract_la_SOURCES += src/textord/alignedblob.cpp\nlibtesseract_la_SOURCES += src/textord/baselinedetect.cpp\nlibtesseract_la_SOURCES += src/textord/bbgrid.cpp\nlibtesseract_la_SOURCES += src/textord/blkocc.cpp\nlibtesseract_la_SOURCES += src/textord/blobgrid.cpp\nlibtesseract_la_SOURCES += src/textord/ccnontextdetect.cpp\nlibtesseract_la_SOURCES += src/textord/cjkpitch.cpp\nlibtesseract_la_SOURCES += src/textord/colfind.cpp\nlibtesseract_la_SOURCES += src/textord/colpartition.cpp\nlibtesseract_la_SOURCES += src/textord/colpartitionset.cpp\nlibtesseract_la_SOURCES += src/textord/colpartitiongrid.cpp\nlibtesseract_la_SOURCES += src/textord/devanagari_processing.cpp\nlibtesseract_la_SOURCES += src/textord/drawtord.cpp\nlibtesseract_la_SOURCES += src/textord/edgblob.cpp\nlibtesseract_la_SOURCES += src/textord/edgloop.cpp\nlibtesseract_la_SOURCES += src/textord/fpchop.cpp\nlibtesseract_la_SOURCES += src/textord/gap_map.cpp\nlibtesseract_la_SOURCES += src/textord/imagefind.cpp\nlibtesseract_la_SOURCES += src/textord/linefind.cpp\nlibtesseract_la_SOURCES += src/textord/makerow.cpp\nlibtesseract_la_SOURCES += src/textord/oldbasel.cpp\nlibtesseract_la_SOURCES += src/textord/pithsync.cpp\nlibtesseract_la_SOURCES += src/textord/pitsync1.cpp\nlibtesseract_la_SOURCES += src/textord/scanedg.cpp\nlibtesseract_la_SOURCES += src/textord/sortflts.cpp\nlibtesseract_la_SOURCES += src/textord/strokewidth.cpp\nlibtesseract_la_SOURCES += src/textord/tabfind.cpp\nlibtesseract_la_SOURCES += src/textord/tablefind.cpp\nlibtesseract_la_SOURCES += src/textord/tabvector.cpp\nlibtesseract_la_SOURCES += src/textord/tablerecog.cpp\nlibtesseract_la_SOURCES += src/textord/textlineprojection.cpp\nlibtesseract_la_SOURCES += src/textord/textord.cpp\nlibtesseract_la_SOURCES += src/textord/topitch.cpp\nlibtesseract_la_SOURCES += src/textord/tordmain.cpp\nlibtesseract_la_SOURCES += src/textord/tospace.cpp\nlibtesseract_la_SOURCES += src/textord/tovars.cpp\nlibtesseract_la_SOURCES += src/textord/underlin.cpp\nlibtesseract_la_SOURCES += src/textord/wordseg.cpp\nlibtesseract_la_SOURCES += src/textord/workingpartset.cpp\nif !DISABLED_LEGACY_ENGINE\nlibtesseract_la_SOURCES += src/textord/equationdetectbase.cpp\nendif\n\n# Rules for src/viewer.\n\nif !GRAPHICS_DISABLED\nnoinst_HEADERS += src/viewer/scrollview.h\nnoinst_HEADERS += src/viewer/svmnode.h\nnoinst_HEADERS += src/viewer/svutil.h\n\nlibtesseract_la_SOURCES += src/viewer/scrollview.cpp\nlibtesseract_la_SOURCES += src/viewer/svmnode.cpp\nlibtesseract_la_SOURCES += src/viewer/svutil.cpp\n\nEXTRA_PROGRAMS += svpaint\nsvpaint_CPPFLAGS = $(AM_CPPFLAGS)\nsvpaint_CPPFLAGS += -I$(top_srcdir)/src/ccstruct\nsvpaint_CPPFLAGS += -I$(top_srcdir)/src/viewer\nsvpaint_SOURCES = src/svpaint.cpp\nsvpaint_LDADD = libtesseract.la\nendif\n\n# Rules for src/wordrec.\n\nnoinst_HEADERS += src/wordrec/wordrec.h\nif !DISABLED_LEGACY_ENGINE\nnoinst_HEADERS += src/wordrec/associate.h\nnoinst_HEADERS += src/wordrec/chop.h\nnoinst_HEADERS += src/wordrec/drawfx.h\nnoinst_HEADERS += src/wordrec/findseam.h\nnoinst_HEADERS += src/wordrec/language_model.h\nnoinst_HEADERS += src/wordrec/lm_consistency.h\nnoinst_HEADERS += src/wordrec/lm_pain_points.h\nnoinst_HEADERS += src/wordrec/lm_state.h\nnoinst_HEADERS += src/wordrec/outlines.h\nnoinst_HEADERS += src/wordrec/params_model.h\nnoinst_HEADERS += src/wordrec/plotedges.h\nnoinst_HEADERS += src/wordrec/render.h\nendif\n\nlibtesseract_la_SOURCES += src/wordrec/tface.cpp\nlibtesseract_la_SOURCES += src/wordrec/wordrec.cpp\nif !DISABLED_LEGACY_ENGINE\nlibtesseract_la_SOURCES += src/wordrec/associate.cpp\nlibtesseract_la_SOURCES += src/wordrec/chop.cpp\nlibtesseract_la_SOURCES += src/wordrec/chopper.cpp\nlibtesseract_la_SOURCES += src/wordrec/drawfx.cpp\nlibtesseract_la_SOURCES += src/wordrec/findseam.cpp\nlibtesseract_la_SOURCES += src/wordrec/gradechop.cpp\nlibtesseract_la_SOURCES += src/wordrec/language_model.cpp\nlibtesseract_la_SOURCES += src/wordrec/lm_consistency.cpp\nlibtesseract_la_SOURCES += src/wordrec/lm_pain_points.cpp\nlibtesseract_la_SOURCES += src/wordrec/lm_state.cpp\nlibtesseract_la_SOURCES += src/wordrec/outlines.cpp\nlibtesseract_la_SOURCES += src/wordrec/params_model.cpp\nlibtesseract_la_SOURCES += src/wordrec/pieces.cpp\nif !GRAPHICS_DISABLED\nlibtesseract_la_SOURCES += src/wordrec/plotedges.cpp\nendif\nlibtesseract_la_SOURCES += src/wordrec/render.cpp\nlibtesseract_la_SOURCES += src/wordrec/segsearch.cpp\nlibtesseract_la_SOURCES += src/wordrec/wordclass.cpp\nendif\n\n# Rules for tesseract executable.\n\nbin_PROGRAMS = tesseract\ntesseract_SOURCES = src/tesseract.cpp\ntesseract_CPPFLAGS = $(AM_CPPFLAGS)\ntesseract_CPPFLAGS += -I$(top_srcdir)/src/arch\ntesseract_CPPFLAGS += -I$(top_srcdir)/src/ccmain\ntesseract_CPPFLAGS += -I$(top_srcdir)/src/ccstruct\ntesseract_CPPFLAGS += -I$(top_srcdir)/src/ccutil\ntesseract_CPPFLAGS += -I$(top_srcdir)/src/classify\ntesseract_CPPFLAGS += -I$(top_srcdir)/src/cutil\ntesseract_CPPFLAGS += -I$(top_srcdir)/src/dict\ntesseract_CPPFLAGS += -I$(top_srcdir)/src/textord\ntesseract_CPPFLAGS += -I$(top_srcdir)/src/viewer\ntesseract_CPPFLAGS += -I$(top_srcdir)/src/wordrec\n\ntesseract_LDFLAGS = $(OPENMP_CXXFLAGS)\n\ntesseract_LDADD = libtesseract.la\ntesseract_LDADD += $(LEPTONICA_LIBS)\ntesseract_LDADD += $(libarchive_LIBS)\ntesseract_LDADD += $(libcurl_LIBS)\n\nif T_WIN\ntesseract_LDADD += -ltiff\ntesseract_LDADD += -lws2_32\nendif\nif ADD_RT\ntesseract_LDADD += -lrt\nendif\n\n# Rules for training tools.\n\nif ENABLE_TRAINING\n\ntraining: $(trainingtools) | $(PROGRAMS)\n\ntraining-install: $(trainingtools)\n\tmkdir -p $(DESTDIR)$(bindir)\n\t$(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install \\\n\t$(INSTALL) $(INSTALL_STRIP_FLAG) $(trainingtools) $(DESTDIR)$(bindir)\n\ntraining-uninstall:\n\n# Some unit tests use code from training.\ncheck: libtesseract_training.la\n\n# dawg_test runs dawg2wordlist and wordlist2dawg.\ncheck: dawg2wordlist wordlist2dawg\n\nelse\n\ntraining:\n\t@echo \"Need to reconfigure project, so there are no errors\"\n\nendif\n\nCLEANFILES += $(EXTRA_PROGRAMS)\n\ntraining_CPPFLAGS = $(AM_CPPFLAGS)\ntraining_CPPFLAGS += -DPANGO_ENABLE_ENGINE\ntraining_CPPFLAGS += -DTESS_COMMON_TRAINING_API=\ntraining_CPPFLAGS += -DTESS_PANGO_TRAINING_API=\ntraining_CPPFLAGS += -DTESS_UNICHARSET_TRAINING_API=\ntraining_CPPFLAGS += -I$(top_srcdir)/src/training\ntraining_CPPFLAGS += -I$(top_srcdir)/src/training/common\ntraining_CPPFLAGS += -I$(top_srcdir)/src/training/pango\ntraining_CPPFLAGS += -I$(top_srcdir)/src/training/unicharset\ntraining_CPPFLAGS += -I$(top_srcdir)/src/api\ntraining_CPPFLAGS += -I$(top_srcdir)/src/ccmain\ntraining_CPPFLAGS += -I$(top_srcdir)/src/ccutil\ntraining_CPPFLAGS += -I$(top_srcdir)/src/ccstruct\ntraining_CPPFLAGS += -I$(top_srcdir)/src/lstm\ntraining_CPPFLAGS += -I$(top_srcdir)/src/arch\ntraining_CPPFLAGS += -I$(top_srcdir)/src/viewer\ntraining_CPPFLAGS += -I$(top_srcdir)/src/textord\ntraining_CPPFLAGS += -I$(top_srcdir)/src/dict\ntraining_CPPFLAGS += -I$(top_srcdir)/src/classify\ntraining_CPPFLAGS += -I$(top_srcdir)/src/wordrec\ntraining_CPPFLAGS += -I$(top_srcdir)/src/cutil\ntraining_CPPFLAGS += $(ICU_UC_CFLAGS) $(ICU_I18N_CFLAGS)\ntraining_CPPFLAGS += $(pango_CFLAGS)\ntraining_CPPFLAGS += $(cairo_CFLAGS)\n\nif DISABLED_LEGACY_ENGINE\ntraining_CPPFLAGS += -DDISABLED_LEGACY_ENGINE\nendif\n\n# TODO: training programs cannot be linked to shared library created\n# with -fvisibility\nif VISIBILITY\nAM_LDFLAGS += -all-static\nendif\n\nnoinst_HEADERS += src/training/pango/boxchar.h\nnoinst_HEADERS += src/training/common/commandlineflags.h\nnoinst_HEADERS += src/training/common/commontraining.h\nnoinst_HEADERS += src/training/common/ctc.h\nnoinst_HEADERS += src/training/common/networkbuilder.h\nnoinst_HEADERS += src/training/degradeimage.h\nnoinst_HEADERS += src/training/pango/ligature_table.h\nnoinst_HEADERS += src/training/pango/pango_font_info.h\nnoinst_HEADERS += src/training/pango/stringrenderer.h\nnoinst_HEADERS += src/training/pango/tlog.h\nnoinst_HEADERS += src/training/unicharset/icuerrorcode.h\nnoinst_HEADERS += src/training/unicharset/fileio.h\nnoinst_HEADERS += src/training/unicharset/lang_model_helpers.h\nnoinst_HEADERS += src/training/unicharset/lstmtester.h\nnoinst_HEADERS += src/training/unicharset/lstmtrainer.h\nnoinst_HEADERS += src/training/unicharset/normstrngs.h\nnoinst_HEADERS += src/training/unicharset/unicharset_training_utils.h\nnoinst_HEADERS += src/training/unicharset/validate_grapheme.h\nnoinst_HEADERS += src/training/unicharset/validate_indic.h\nnoinst_HEADERS += src/training/unicharset/validate_javanese.h\nnoinst_HEADERS += src/training/unicharset/validate_khmer.h\nnoinst_HEADERS += src/training/unicharset/validate_myanmar.h\nnoinst_HEADERS += src/training/unicharset/validator.h\nif !DISABLED_LEGACY_ENGINE\nnoinst_HEADERS += src/training/common/errorcounter.h\nnoinst_HEADERS += src/training/common/intfeaturedist.h\nnoinst_HEADERS += src/training/common/intfeaturemap.h\nnoinst_HEADERS += src/training/common/mastertrainer.h\nnoinst_HEADERS += src/training/common/sampleiterator.h\nnoinst_HEADERS += src/training/common/trainingsampleset.h\nnoinst_HEADERS += src/training/mergenf.h\nendif\n\nCLEANFILES += libtesseract_training.la\n\nEXTRA_LTLIBRARIES = libtesseract_training.la\n\nlibtesseract_training_la_CPPFLAGS = $(training_CPPFLAGS)\nlibtesseract_training_la_SOURCES = src/training/pango/boxchar.cpp\nlibtesseract_training_la_SOURCES += src/training/common/commandlineflags.cpp\nlibtesseract_training_la_SOURCES += src/training/common/commontraining.cpp\nlibtesseract_training_la_SOURCES += src/training/common/ctc.cpp\nlibtesseract_training_la_SOURCES += src/training/common/networkbuilder.cpp\nlibtesseract_training_la_SOURCES += src/training/degradeimage.cpp\nlibtesseract_training_la_SOURCES += src/training/pango/ligature_table.cpp\nlibtesseract_training_la_SOURCES += src/training/pango/pango_font_info.cpp\nlibtesseract_training_la_SOURCES += src/training/pango/stringrenderer.cpp\nlibtesseract_training_la_SOURCES += src/training/pango/tlog.cpp\nlibtesseract_training_la_SOURCES += src/training/unicharset/icuerrorcode.cpp\nlibtesseract_training_la_SOURCES += src/training/unicharset/fileio.cpp\nlibtesseract_training_la_SOURCES += src/training/unicharset/lang_model_helpers.cpp\nlibtesseract_training_la_SOURCES += src/training/unicharset/lstmtester.cpp\nlibtesseract_training_la_SOURCES += src/training/unicharset/lstmtrainer.cpp\nlibtesseract_training_la_SOURCES += src/training/unicharset/normstrngs.cpp\nlibtesseract_training_la_SOURCES += src/training/unicharset/unicharset_training_utils.cpp\nlibtesseract_training_la_SOURCES += src/training/unicharset/validate_grapheme.cpp\nlibtesseract_training_la_SOURCES += src/training/unicharset/validate_indic.cpp\nlibtesseract_training_la_SOURCES += src/training/unicharset/validate_javanese.cpp\nlibtesseract_training_la_SOURCES += src/training/unicharset/validate_khmer.cpp\nlibtesseract_training_la_SOURCES += src/training/unicharset/validate_myanmar.cpp\nlibtesseract_training_la_SOURCES += src/training/unicharset/validator.cpp\nif !DISABLED_LEGACY_ENGINE\nlibtesseract_training_la_SOURCES += src/training/common/errorcounter.cpp\nlibtesseract_training_la_SOURCES += src/training/common/intfeaturedist.cpp\nlibtesseract_training_la_SOURCES += src/training/common/intfeaturemap.cpp\nlibtesseract_training_la_SOURCES += src/training/common/mastertrainer.cpp\nlibtesseract_training_la_SOURCES += src/training/common/sampleiterator.cpp\nlibtesseract_training_la_SOURCES += src/training/common/trainingsampleset.cpp\nendif\n\ntrainingtools = combine_lang_model$(EXEEXT)\ntrainingtools += combine_tessdata$(EXEEXT)\ntrainingtools += dawg2wordlist$(EXEEXT)\ntrainingtools += lstmeval$(EXEEXT)\ntrainingtools += lstmtraining$(EXEEXT)\ntrainingtools += merge_unicharsets$(EXEEXT)\ntrainingtools += set_unicharset_properties$(EXEEXT)\ntrainingtools += text2image$(EXEEXT)\ntrainingtools += unicharset_extractor$(EXEEXT)\ntrainingtools += wordlist2dawg$(EXEEXT)\nif !DISABLED_LEGACY_ENGINE\ntrainingtools += ambiguous_words$(EXEEXT)\ntrainingtools += classifier_tester$(EXEEXT)\ntrainingtools += cntraining$(EXEEXT)\ntrainingtools += mftraining$(EXEEXT)\ntrainingtools += shapeclustering$(EXEEXT)\nendif\n\n$(trainingtools): libtesseract.la\n\nEXTRA_PROGRAMS += $(trainingtools)\n\nextralib = libtesseract.la\nextralib += $(libarchive_LIBS)\nextralib += $(LEPTONICA_LIBS)\nif T_WIN\nextralib += -lws2_32\nendif\n\nif !DISABLED_LEGACY_ENGINE\nambiguous_words_CPPFLAGS = $(training_CPPFLAGS)\nambiguous_words_SOURCES = src/training/ambiguous_words.cpp\nambiguous_words_LDADD = libtesseract_training.la\nambiguous_words_LDADD += $(extralib)\n\nclassifier_tester_CPPFLAGS = $(training_CPPFLAGS)\nclassifier_tester_SOURCES = src/training/classifier_tester.cpp\nclassifier_tester_LDADD = libtesseract_training.la\nclassifier_tester_LDADD += $(extralib)\n\ncntraining_CPPFLAGS = $(training_CPPFLAGS)\ncntraining_SOURCES = src/training/cntraining.cpp\ncntraining_LDADD = libtesseract_training.la\ncntraining_LDADD += $(extralib)\n\nmftraining_CPPFLAGS = $(training_CPPFLAGS)\nmftraining_SOURCES = src/training/mftraining.cpp src/training/mergenf.cpp\nmftraining_LDADD = libtesseract_training.la\nmftraining_LDADD += $(ICU_UC_LIBS)\nmftraining_LDADD += $(extralib)\n\nshapeclustering_CPPFLAGS = $(training_CPPFLAGS)\nshapeclustering_SOURCES = src/training/shapeclustering.cpp\nshapeclustering_LDADD = libtesseract_training.la\nshapeclustering_LDADD += $(extralib)\nendif\n\ncombine_lang_model_CPPFLAGS = $(training_CPPFLAGS)\ncombine_lang_model_SOURCES = src/training/combine_lang_model.cpp\ncombine_lang_model_LDADD = libtesseract_training.la\ncombine_lang_model_LDADD += $(ICU_I18N_LIBS) $(ICU_UC_LIBS)\ncombine_lang_model_LDADD += $(extralib)\n\ncombine_tessdata_CPPFLAGS = $(training_CPPFLAGS)\ncombine_tessdata_SOURCES = src/training/combine_tessdata.cpp\ncombine_tessdata_LDADD = $(extralib)\n\ndawg2wordlist_CPPFLAGS = $(training_CPPFLAGS)\ndawg2wordlist_SOURCES = src/training/dawg2wordlist.cpp\ndawg2wordlist_LDADD = $(extralib)\n\nlstmeval_CPPFLAGS = $(training_CPPFLAGS)\nlstmeval_SOURCES = src/training/lstmeval.cpp\nlstmeval_LDADD = libtesseract_training.la\nlstmeval_LDADD += $(ICU_UC_LIBS)\nlstmeval_LDADD += $(extralib)\n\nlstmtraining_CPPFLAGS = $(training_CPPFLAGS)\nlstmtraining_SOURCES = src/training/lstmtraining.cpp\nlstmtraining_LDADD = libtesseract_training.la\nlstmtraining_LDADD += $(ICU_I18N_LIBS) $(ICU_UC_LIBS)\nlstmtraining_LDADD += $(extralib)\n\nmerge_unicharsets_CPPFLAGS = $(training_CPPFLAGS)\nmerge_unicharsets_SOURCES = src/training/merge_unicharsets.cpp\nmerge_unicharsets_LDADD = $(extralib)\n\nset_unicharset_properties_CPPFLAGS = $(training_CPPFLAGS)\nset_unicharset_properties_SOURCES = src/training/set_unicharset_properties.cpp\nset_unicharset_properties_LDADD = libtesseract_training.la\nset_unicharset_properties_LDADD += $(ICU_I18N_LIBS) $(ICU_UC_LIBS)\nset_unicharset_properties_LDADD += $(extralib)\n\ntext2image_CPPFLAGS = $(training_CPPFLAGS)\ntext2image_SOURCES = src/training/text2image.cpp\ntext2image_LDADD = libtesseract_training.la\ntext2image_LDADD += $(ICU_I18N_LIBS) $(ICU_UC_LIBS)\ntext2image_LDADD += $(extralib)\ntext2image_LDADD += $(ICU_UC_LIBS) $(cairo_LIBS)\ntext2image_LDADD += $(pango_LIBS) $(pangocairo_LIBS) $(pangoft2_LIBS)\n\nunicharset_extractor_CPPFLAGS = $(training_CPPFLAGS)\nunicharset_extractor_SOURCES = src/training/unicharset_extractor.cpp\nunicharset_extractor_LDADD = libtesseract_training.la\nunicharset_extractor_LDADD += $(ICU_I18N_LIBS) $(ICU_UC_LIBS)\nunicharset_extractor_LDADD += $(extralib)\n\nwordlist2dawg_CPPFLAGS = $(training_CPPFLAGS)\nwordlist2dawg_SOURCES = src/training/wordlist2dawg.cpp\nwordlist2dawg_LDADD = $(extralib)\n\n# fuzzer-api is used for fuzzing tests.\n# They are run by OSS-Fuzz https://oss-fuzz.com/, but can also be run locally.\n# Note: -fsanitize=fuzzer currently requires the clang++ compiler.\n\n# LIB_FUZZING_ENGINE can be overridden by the caller.\n# This is used by OSS-Fuzz.\nLIB_FUZZING_ENGINE ?= -fsanitize=fuzzer\n\nfuzzer-api: libtesseract.la\nfuzzer-api: unittest/fuzzers/fuzzer-api.cpp\n\t$(CXX) $(CXXFLAGS) -g $(LIB_FUZZING_ENGINE) \\\n          -I $(top_srcdir)/include \\\n          -I $(builddir)/include \\\n          -I $(top_srcdir)/src/ccmain \\\n          -I $(top_srcdir)/src/ccstruct \\\n          -I $(top_srcdir)/src/ccutil \\\n          $(LEPTONICA_CFLAGS) \\\n          $(OPENMP_CXXFLAGS) \\\n          $< \\\n          $(builddir)/.libs/libtesseract.a \\\n          $(LEPTONICA_LIBS) \\\n          $(libarchive_LIBS) \\\n          $(libcurl_LIBS) \\\n          -o $@\n\nfuzzer-api-512x256: libtesseract.la\nfuzzer-api-512x256: unittest/fuzzers/fuzzer-api.cpp\n\t$(CXX) $(CXXFLAGS) -g $(LIB_FUZZING_ENGINE) \\\n          -DTESSERACT_FUZZER_WIDTH=512 \\\n          -DTESSERACT_FUZZER_HEIGHT=256 \\\n          -I $(top_srcdir)/include \\\n          -I $(builddir)/include \\\n          -I $(top_srcdir)/src/ccmain \\\n          -I $(top_srcdir)/src/ccstruct \\\n          -I $(top_srcdir)/src/ccutil \\\n          $(LEPTONICA_CFLAGS) \\\n          $(OPENMP_CXXFLAGS) \\\n          $< \\\n          $(builddir)/.libs/libtesseract.a \\\n          $(LEPTONICA_LIBS) \\\n          $(libarchive_LIBS) \\\n          $(libcurl_LIBS) \\\n          -o $@\n\nCLEANFILES += fuzzer-api fuzzer-api-512x256\n\nif ASCIIDOC\n\nman_MANS = doc/combine_lang_model.1\nman_MANS += doc/combine_tessdata.1\nman_MANS += doc/dawg2wordlist.1\nman_MANS += doc/lstmeval.1\nman_MANS += doc/lstmtraining.1\nman_MANS += doc/merge_unicharsets.1\nman_MANS += doc/set_unicharset_properties.1\nman_MANS += doc/tesseract.1\nman_MANS += doc/text2image.1\nman_MANS += doc/unicharset.5\nman_MANS += doc/unicharset_extractor.1\nman_MANS += doc/wordlist2dawg.1\n\nif !DISABLED_LEGACY_ENGINE\nman_MANS += doc/ambiguous_words.1\nman_MANS += doc/classifier_tester.1\nman_MANS += doc/cntraining.1\nman_MANS += doc/mftraining.1\nman_MANS += doc/shapeclustering.1\nman_MANS += doc/unicharambigs.5\nendif\n\nman_xslt = http://docbook.sourceforge.net/release/xsl/current/manpages/docbook.xsl\n\nEXTRA_DIST += $(man_MANS) doc/Doxyfile\n\nhtml: ${man_MANS:%=%.html}\npdf: ${man_MANS:%=%.pdf}\n\nSUFFIXES = .asc .html .pdf\n\n.asc:\nif HAVE_XML_CATALOG_FILES\n\tasciidoc -b docbook -d manpage -o - $< | \\\n\tXML_CATALOG_FILES=$(XML_CATALOG_FILES) xsltproc --nonet -o $@ $(man_xslt) -\nelse\n\tasciidoc -b docbook -d manpage -o - $< | \\\n\txsltproc --nonet -o $@ $(man_xslt) -\nendif\n\n.asc.html:\n\tasciidoc -b html5 -o $@ $<\n\n.asc.pdf:\n\tasciidoc -b docbook -d manpage -o $*.dbk $<\n\tdocbook2pdf -o doc $*.dbk\n\nMAINTAINERCLEANFILES = $(man_MANS) Doxyfile\n\nendif\n\n# Absolute path of directory 'langdata'.\nLANGDATA_DIR=$(shell cd $(top_srcdir) && cd .. && pwd)/langdata_lstm\n\n# Absolute path of directory 'tessdata' with traineddata files\n# (must be on same level as top source directory).\nTESSDATA_DIR=$(shell cd $(top_srcdir) && cd .. && pwd)/tessdata\n\n# Absolute path of directory 'testing' with test images and ground truth texts\n# (using submodule test).\nTESTING_DIR=$(shell cd $(top_srcdir) && pwd)/test/testing\n# Absolute path of directory 'testdata' with test unicharset etc.\n# (using submodule test).\nTESTDATA_DIR=$(shell cd $(top_srcdir) && pwd)/test/testdata\n\n# Suppress some memory leaks reported by LeakSanitizer.\nexport LSAN_OPTIONS=suppressions=$(top_srcdir)/unittest/tesseract_leaksanitizer.supp\n\nunittest_CPPFLAGS = $(AM_CPPFLAGS)\nunittest_CPPFLAGS += -DTESSBIN_DIR=\"\\\"$(abs_top_builddir)\\\"\"\nunittest_CPPFLAGS += -DLANGDATA_DIR=\"\\\"$(LANGDATA_DIR)\\\"\"\nunittest_CPPFLAGS += -DTESSDATA_DIR=\"\\\"$(TESSDATA_DIR)\\\"\"\nunittest_CPPFLAGS += -DTESTING_DIR=\"\\\"$(TESTING_DIR)\\\"\"\nunittest_CPPFLAGS += -DTESTDATA_DIR=\"\\\"$(TESTDATA_DIR)\\\"\"\nunittest_CPPFLAGS += -DPANGO_ENABLE_ENGINE\nif DISABLED_LEGACY_ENGINE\nunittest_CPPFLAGS += -DDISABLED_LEGACY_ENGINE\nendif # DISABLED_LEGACY_ENGINE\nunittest_CPPFLAGS += -DTESS_COMMON_TRAINING_API=\nunittest_CPPFLAGS += -DTESS_PANGO_TRAINING_API=\nunittest_CPPFLAGS += -DTESS_UNICHARSET_TRAINING_API=\nunittest_CPPFLAGS += -I$(top_srcdir)/src/arch\nunittest_CPPFLAGS += -I$(top_srcdir)/src/ccmain\nunittest_CPPFLAGS += -I$(top_srcdir)/src/ccstruct\nunittest_CPPFLAGS += -I$(top_srcdir)/src/ccutil\nunittest_CPPFLAGS += -I$(top_srcdir)/src/classify\nunittest_CPPFLAGS += -I$(top_srcdir)/src/cutil\nunittest_CPPFLAGS += -I$(top_srcdir)/src/dict\nunittest_CPPFLAGS += -I$(top_srcdir)/src/display\nunittest_CPPFLAGS += -I$(top_srcdir)/src/lstm\nunittest_CPPFLAGS += -I$(top_srcdir)/src/textord\nunittest_CPPFLAGS += -I$(top_srcdir)/unittest/base\nunittest_CPPFLAGS += -I$(top_srcdir)/unittest/util\nunittest_CPPFLAGS += $(LEPTONICA_CFLAGS)\nif ENABLE_TRAINING\nunittest_CPPFLAGS += -I$(top_srcdir)/src/training\nunittest_CPPFLAGS += -I$(top_srcdir)/src/training/common\nunittest_CPPFLAGS += -I$(top_srcdir)/src/training/pango\nunittest_CPPFLAGS += -I$(top_srcdir)/src/training/unicharset\nunittest_CPPFLAGS += $(pangocairo_CFLAGS)\nendif # ENABLE_TRAINING\nunittest_CPPFLAGS += -I$(top_srcdir)/src/viewer\nunittest_CPPFLAGS += -I$(top_srcdir)/src/wordrec\nunittest_CPPFLAGS += -I$(top_srcdir)/unittest\n\n# Build googletest:\ncheck_LTLIBRARIES = libgtest.la libgtest_main.la libgmock.la libgmock_main.la\nlibgtest_la_SOURCES = unittest/third_party/googletest/googletest/src/gtest-all.cc\nlibgtest_la_CPPFLAGS = -I$(top_srcdir)/unittest/third_party/googletest/googletest/include\nlibgtest_la_CPPFLAGS += -I$(top_srcdir)/unittest/third_party/googletest/googletest\nlibgtest_la_CPPFLAGS += -pthread\nlibgtest_main_la_SOURCES = unittest/third_party/googletest/googletest/src/gtest_main.cc\nlibgtest_main_la_CPPFLAGS = $(libgtest_la_CPPFLAGS)\n\nGMOCK_INCLUDES = -I$(top_srcdir)/unittest/third_party/googletest/googlemock/include \\\n                 -I$(top_srcdir)/unittest/third_party/googletest/googlemock \\\n                 -I$(top_srcdir)/unittest/third_party/googletest/googletest/include \\\n                 -I$(top_srcdir)/unittest/third_party/googletest/googletest\n\nlibgmock_la_SOURCES = unittest/third_party/googletest/googlemock/src/gmock-all.cc\nlibgmock_la_CPPFLAGS = $(GMOCK_INCLUDES) \\\n                       -pthread\nlibgmock_main_la_SOURCES = unittest/third_party/googletest/googlemock/src/gmock_main.cc\nlibgmock_main_la_CPPFLAGS = $(GMOCK_INCLUDES) \\\n                            -pthread\n\n# Build unittests\nGTEST_LIBS =  libgtest.la libgtest_main.la -lpthread\nGMOCK_LIBS =  libgmock.la libgmock_main.la\nTESS_LIBS = $(GTEST_LIBS)\nTESS_LIBS += libtesseract.la $(libarchive_LIBS)\nTRAINING_LIBS = libtesseract_training.la\nTRAINING_LIBS += $(TESS_LIBS)\nunittest_CPPFLAGS += -isystem $(top_srcdir)/unittest/third_party/googletest/googletest/include\nunittest_CPPFLAGS += -isystem $(top_srcdir)/unittest/third_party/googletest/googlemock/include\n\ncheck_PROGRAMS = apiexample_test\nif ENABLE_TRAINING\nif !DISABLED_LEGACY_ENGINE\ncheck_PROGRAMS += applybox_test\nendif # !DISABLED_LEGACY_ENGINE\ncheck_PROGRAMS += baseapi_test\ncheck_PROGRAMS += baseapi_thread_test\nif !DISABLED_LEGACY_ENGINE\ncheck_PROGRAMS += bitvector_test\nendif # !DISABLED_LEGACY_ENGINE\nendif # ENABLE_TRAINING\ncheck_PROGRAMS += cleanapi_test\ncheck_PROGRAMS += colpartition_test\nif ENABLE_TRAINING\ncheck_PROGRAMS += commandlineflags_test\ncheck_PROGRAMS += dawg_test\nendif # ENABLE_TRAINING\ncheck_PROGRAMS += denorm_test\nif !DISABLED_LEGACY_ENGINE\ncheck_PROGRAMS += equationdetect_test\nendif # !DISABLED_LEGACY_ENGINE\ncheck_PROGRAMS += fileio_test\ncheck_PROGRAMS += heap_test\ncheck_PROGRAMS += imagedata_test\nif !DISABLED_LEGACY_ENGINE\ncheck_PROGRAMS += indexmapbidi_test\ncheck_PROGRAMS += intfeaturemap_test\nendif # !DISABLED_LEGACY_ENGINE\ncheck_PROGRAMS += intsimdmatrix_test\ncheck_PROGRAMS += lang_model_test\ncheck_PROGRAMS += layout_test\ncheck_PROGRAMS += ligature_table_test\ncheck_PROGRAMS += linlsq_test\ncheck_PROGRAMS += list_test\nif ENABLE_TRAINING\ncheck_PROGRAMS += lstm_recode_test\ncheck_PROGRAMS += lstm_squashed_test\ncheck_PROGRAMS += lstm_test\ncheck_PROGRAMS += lstmtrainer_test\nendif # ENABLE_TRAINING\ncheck_PROGRAMS += loadlang_test\nif !DISABLED_LEGACY_ENGINE\ncheck_PROGRAMS += mastertrainer_test\nendif # !DISABLED_LEGACY_ENGINE\ncheck_PROGRAMS += matrix_test\ncheck_PROGRAMS += networkio_test\nif ENABLE_TRAINING\ncheck_PROGRAMS += normstrngs_test\nendif # ENABLE_TRAINING\ncheck_PROGRAMS += nthitem_test\nif !DISABLED_LEGACY_ENGINE\ncheck_PROGRAMS += osd_test\nendif # !DISABLED_LEGACY_ENGINE\ncheck_PROGRAMS += pagesegmode_test\nif ENABLE_TRAINING\ncheck_PROGRAMS += pango_font_info_test\nendif # ENABLE_TRAINING\ncheck_PROGRAMS += paragraphs_test\nif !DISABLED_LEGACY_ENGINE\ncheck_PROGRAMS += params_model_test\nendif # !DISABLED_LEGACY_ENGINE\ncheck_PROGRAMS += progress_test\ncheck_PROGRAMS += qrsequence_test\ncheck_PROGRAMS += recodebeam_test\ncheck_PROGRAMS += rect_test\ncheck_PROGRAMS += resultiterator_test\ncheck_PROGRAMS += scanutils_test\nif !DISABLED_LEGACY_ENGINE\ncheck_PROGRAMS += shapetable_test\nendif # !DISABLED_LEGACY_ENGINE\ncheck_PROGRAMS += stats_test\ncheck_PROGRAMS += stridemap_test\ncheck_PROGRAMS += stringrenderer_test\ncheck_PROGRAMS += tablefind_test\ncheck_PROGRAMS += tablerecog_test\ncheck_PROGRAMS += tabvector_test\ncheck_PROGRAMS += tatweel_test\nif !DISABLED_LEGACY_ENGINE\ncheck_PROGRAMS += textlineprojection_test\nendif # !DISABLED_LEGACY_ENGINE\ncheck_PROGRAMS += tfile_test\nif ENABLE_TRAINING\ncheck_PROGRAMS += unichar_test\ncheck_PROGRAMS += unicharcompress_test\ncheck_PROGRAMS += unicharset_test\ncheck_PROGRAMS += validate_grapheme_test\ncheck_PROGRAMS += validate_indic_test\ncheck_PROGRAMS += validate_khmer_test\ncheck_PROGRAMS += validate_myanmar_test\ncheck_PROGRAMS += validator_test\nendif # ENABLE_TRAINING\n\ncheck_PROGRAMS: libtesseract.la libtesseract_training.la\n\nTESTS = $(check_PROGRAMS)\n\n# List of source files needed to build the executable:\n\napiexample_test_SOURCES = unittest/apiexample_test.cc\napiexample_test_CPPFLAGS = $(unittest_CPPFLAGS)\napiexample_test_LDFLAGS = $(LEPTONICA_LIBS)\napiexample_test_LDADD = $(TESS_LIBS) $(LEPTONICA_LIBS)\n\nif !DISABLED_LEGACY_ENGINE\napplybox_test_SOURCES = unittest/applybox_test.cc\napplybox_test_CPPFLAGS = $(unittest_CPPFLAGS)\napplybox_test_LDADD = $(TRAINING_LIBS) $(LEPTONICA_LIBS)\nendif # !DISABLED_LEGACY_ENGINE\n\nbaseapi_test_SOURCES = unittest/baseapi_test.cc\nbaseapi_test_CPPFLAGS = $(unittest_CPPFLAGS)\nbaseapi_test_LDADD = $(TRAINING_LIBS) $(LEPTONICA_LIBS)\n\nbaseapi_thread_test_SOURCES = unittest/baseapi_thread_test.cc\nbaseapi_thread_test_CPPFLAGS = $(unittest_CPPFLAGS)\nbaseapi_thread_test_LDADD = $(TESS_LIBS) $(LEPTONICA_LIBS)\n\nif !DISABLED_LEGACY_ENGINE\nbitvector_test_SOURCES = unittest/bitvector_test.cc\nbitvector_test_CPPFLAGS = $(unittest_CPPFLAGS)\nbitvector_test_LDADD = $(TRAINING_LIBS)\nendif # !DISABLED_LEGACY_ENGINE\n\ncleanapi_test_SOURCES = unittest/cleanapi_test.cc\ncleanapi_test_CPPFLAGS = $(unittest_CPPFLAGS)\ncleanapi_test_LDADD = $(TESS_LIBS)\n\ncolpartition_test_SOURCES = unittest/colpartition_test.cc\ncolpartition_test_CPPFLAGS = $(unittest_CPPFLAGS)\ncolpartition_test_LDADD = $(TESS_LIBS)\n\ncommandlineflags_test_SOURCES = unittest/commandlineflags_test.cc\ncommandlineflags_test_CPPFLAGS = $(unittest_CPPFLAGS)\ncommandlineflags_test_LDADD = $(TRAINING_LIBS) $(ICU_UC_LIBS)\n\ndawg_test_SOURCES = unittest/dawg_test.cc\ndawg_test_CPPFLAGS = $(unittest_CPPFLAGS)\ndawg_test_LDADD = $(TRAINING_LIBS)\n\ndenorm_test_SOURCES = unittest/denorm_test.cc\ndenorm_test_CPPFLAGS = $(unittest_CPPFLAGS)\ndenorm_test_LDADD = $(TESS_LIBS)\n\nif !DISABLED_LEGACY_ENGINE\nequationdetect_test_SOURCES = unittest/equationdetect_test.cc\nequationdetect_test_CPPFLAGS = $(unittest_CPPFLAGS)\nequationdetect_test_LDADD = $(TESS_LIBS) $(LEPTONICA_LIBS)\nendif # !DISABLED_LEGACY_ENGINE\n\nfileio_test_SOURCES = unittest/fileio_test.cc\nfileio_test_CPPFLAGS = $(unittest_CPPFLAGS)\nfileio_test_LDADD = $(TRAINING_LIBS)\n\nheap_test_SOURCES = unittest/heap_test.cc\nheap_test_CPPFLAGS = $(unittest_CPPFLAGS)\nheap_test_LDADD = $(TESS_LIBS)\n\nimagedata_test_SOURCES = unittest/imagedata_test.cc\nimagedata_test_CPPFLAGS = $(unittest_CPPFLAGS)\nimagedata_test_LDADD = $(TRAINING_LIBS)\n\nif !DISABLED_LEGACY_ENGINE\nindexmapbidi_test_SOURCES = unittest/indexmapbidi_test.cc\nindexmapbidi_test_CPPFLAGS = $(unittest_CPPFLAGS)\nindexmapbidi_test_LDADD = $(TRAINING_LIBS)\nendif # !DISABLED_LEGACY_ENGINE\n\nif !DISABLED_LEGACY_ENGINE\nintfeaturemap_test_SOURCES = unittest/intfeaturemap_test.cc\nintfeaturemap_test_CPPFLAGS = $(unittest_CPPFLAGS)\nintfeaturemap_test_LDADD = $(TRAINING_LIBS)\nendif # !DISABLED_LEGACY_ENGINE\n\nintsimdmatrix_test_SOURCES = unittest/intsimdmatrix_test.cc\nintsimdmatrix_test_CPPFLAGS = $(unittest_CPPFLAGS)\nif HAVE_AVX2\nintsimdmatrix_test_CPPFLAGS += -DHAVE_AVX2\nendif\nif HAVE_SSE4_1\nintsimdmatrix_test_CPPFLAGS += -DHAVE_SSE4_1\nendif\nintsimdmatrix_test_LDADD = $(TESS_LIBS)\n\nlang_model_test_SOURCES = unittest/lang_model_test.cc\nlang_model_test_CPPFLAGS = $(unittest_CPPFLAGS)\nlang_model_test_LDADD = $(TRAINING_LIBS) $(ICU_I18N_LIBS) $(ICU_UC_LIBS)\n\nlayout_test_SOURCES = unittest/layout_test.cc\nlayout_test_CPPFLAGS = $(unittest_CPPFLAGS)\nlayout_test_LDADD = $(TRAINING_LIBS) $(LEPTONICA_LIBS)\n\nligature_table_test_SOURCES = unittest/ligature_table_test.cc\nligature_table_test_CPPFLAGS = $(unittest_CPPFLAGS)\nligature_table_test_LDADD = $(TRAINING_LIBS) $(LEPTONICA_LIBS)\nligature_table_test_LDADD += $(ICU_I18N_LIBS) $(ICU_UC_LIBS)\nligature_table_test_LDADD += $(pangocairo_LIBS) $(pangoft2_LIBS)\nligature_table_test_LDADD += $(cairo_LIBS) $(pango_LIBS)\n\nlinlsq_test_SOURCES = unittest/linlsq_test.cc\nlinlsq_test_CPPFLAGS = $(unittest_CPPFLAGS)\nlinlsq_test_LDADD = $(TESS_LIBS)\n\nlist_test_SOURCES = unittest/list_test.cc\nlist_test_CPPFLAGS = $(unittest_CPPFLAGS)\nlist_test_LDADD = $(TESS_LIBS)\n\nloadlang_test_SOURCES = unittest/loadlang_test.cc\nloadlang_test_CPPFLAGS = $(unittest_CPPFLAGS)\nloadlang_test_LDADD = $(TESS_LIBS) $(LEPTONICA_LIBS)\n\nlstm_recode_test_SOURCES = unittest/lstm_recode_test.cc\nlstm_recode_test_CPPFLAGS = $(unittest_CPPFLAGS)\nlstm_recode_test_LDADD = $(TRAINING_LIBS)\n\nlstm_squashed_test_SOURCES = unittest/lstm_squashed_test.cc\nlstm_squashed_test_CPPFLAGS = $(unittest_CPPFLAGS)\nlstm_squashed_test_LDADD = $(TRAINING_LIBS)\n\nlstm_test_SOURCES = unittest/lstm_test.cc\nlstm_test_CPPFLAGS = $(unittest_CPPFLAGS)\nlstm_test_LDADD = $(TRAINING_LIBS)\n\nlstmtrainer_test_SOURCES = unittest/lstmtrainer_test.cc\nlstmtrainer_test_CPPFLAGS = $(unittest_CPPFLAGS)\nlstmtrainer_test_LDADD = $(TRAINING_LIBS) $(LEPTONICA_LIBS)\n\nif !DISABLED_LEGACY_ENGINE\nmastertrainer_test_SOURCES = unittest/mastertrainer_test.cc\nmastertrainer_test_CPPFLAGS = $(unittest_CPPFLAGS)\nmastertrainer_test_LDADD = $(TRAINING_LIBS) $(LEPTONICA_LIBS)\nendif # !DISABLED_LEGACY_ENGINE\n\nmatrix_test_SOURCES = unittest/matrix_test.cc\nmatrix_test_CPPFLAGS = $(unittest_CPPFLAGS)\nmatrix_test_LDADD = $(TESS_LIBS)\n\nnetworkio_test_SOURCES = unittest/networkio_test.cc\nnetworkio_test_CPPFLAGS = $(unittest_CPPFLAGS)\nnetworkio_test_LDADD = $(TESS_LIBS)\n\nnormstrngs_test_SOURCES = unittest/normstrngs_test.cc\nnormstrngs_test_CPPFLAGS = $(unittest_CPPFLAGS)\nnormstrngs_test_LDADD = $(TRAINING_LIBS) $(ICU_I18N_LIBS) $(ICU_UC_LIBS)\n\nnthitem_test_SOURCES = unittest/nthitem_test.cc\nnthitem_test_CPPFLAGS = $(unittest_CPPFLAGS)\nnthitem_test_LDADD = $(TESS_LIBS)\n\nif !DISABLED_LEGACY_ENGINE\nosd_test_SOURCES = unittest/osd_test.cc\nosd_test_CPPFLAGS = $(unittest_CPPFLAGS)\nosd_test_LDADD = $(TESS_LIBS) $(LEPTONICA_LIBS)\nendif # !DISABLED_LEGACY_ENGINE\n\npagesegmode_test_SOURCES = unittest/pagesegmode_test.cc\npagesegmode_test_CPPFLAGS = $(unittest_CPPFLAGS)\npagesegmode_test_LDADD = $(TRAINING_LIBS) $(LEPTONICA_LIBS)\n\npango_font_info_test_SOURCES = unittest/pango_font_info_test.cc\npango_font_info_test_CPPFLAGS = $(unittest_CPPFLAGS)\npango_font_info_test_LDADD = $(TRAINING_LIBS) $(LEPTONICA_LIBS)\npango_font_info_test_LDADD += $(ICU_I18N_LIBS) $(ICU_UC_LIBS)\npango_font_info_test_LDADD += $(pangocairo_LIBS)\npango_font_info_test_LDADD += $(pangoft2_LIBS)\n\nparagraphs_test_SOURCES = unittest/paragraphs_test.cc\nparagraphs_test_CPPFLAGS = $(unittest_CPPFLAGS)\nparagraphs_test_LDADD = $(TESS_LIBS)\n\nif !DISABLED_LEGACY_ENGINE\nparams_model_test_SOURCES = unittest/params_model_test.cc\nparams_model_test_CPPFLAGS = $(unittest_CPPFLAGS)\nparams_model_test_LDADD = $(TRAINING_LIBS)\nendif # !DISABLED_LEGACY_ENGINE\n\nprogress_test_SOURCES = unittest/progress_test.cc\nprogress_test_CPPFLAGS = $(unittest_CPPFLAGS)\nprogress_test_LDFLAGS = $(LEPTONICA_LIBS)\nprogress_test_LDADD = $(GTEST_LIBS) $(GMOCK_LIBS) $(TESS_LIBS) $(LEPTONICA_LIBS)\n\nqrsequence_test_SOURCES = unittest/qrsequence_test.cc\nqrsequence_test_CPPFLAGS = $(unittest_CPPFLAGS)\nqrsequence_test_LDADD = $(TESS_LIBS)\n\nrecodebeam_test_SOURCES = unittest/recodebeam_test.cc\nrecodebeam_test_CPPFLAGS = $(unittest_CPPFLAGS)\nrecodebeam_test_LDADD = $(TRAINING_LIBS) $(ICU_I18N_LIBS) $(ICU_UC_LIBS)\n\nrect_test_SOURCES = unittest/rect_test.cc\nrect_test_CPPFLAGS = $(unittest_CPPFLAGS)\nrect_test_LDADD = $(TESS_LIBS)\n\nresultiterator_test_SOURCES = unittest/resultiterator_test.cc\nresultiterator_test_CPPFLAGS = $(unittest_CPPFLAGS)\nresultiterator_test_LDADD = $(TRAINING_LIBS)\nresultiterator_test_LDADD += $(LEPTONICA_LIBS) $(ICU_I18N_LIBS) $(ICU_UC_LIBS)\n\nscanutils_test_SOURCES = unittest/scanutils_test.cc\nscanutils_test_CPPFLAGS = $(unittest_CPPFLAGS)\nscanutils_test_LDADD = $(TRAINING_LIBS)\n\nif !DISABLED_LEGACY_ENGINE\nshapetable_test_SOURCES = unittest/shapetable_test.cc\nshapetable_test_CPPFLAGS = $(unittest_CPPFLAGS)\nshapetable_test_LDADD = $(TRAINING_LIBS)\nendif # !DISABLED_LEGACY_ENGINE\n\nstats_test_SOURCES = unittest/stats_test.cc\nstats_test_CPPFLAGS = $(unittest_CPPFLAGS)\nstats_test_LDADD = $(TESS_LIBS)\n\nstridemap_test_SOURCES = unittest/stridemap_test.cc\nstridemap_test_CPPFLAGS = $(unittest_CPPFLAGS)\nstridemap_test_LDADD = $(TESS_LIBS)\n\nstringrenderer_test_SOURCES = unittest/stringrenderer_test.cc\nstringrenderer_test_CPPFLAGS = $(unittest_CPPFLAGS)\nstringrenderer_test_LDADD = $(TRAINING_LIBS) $(LEPTONICA_LIBS)\nstringrenderer_test_LDADD += $(ICU_I18N_LIBS) $(ICU_UC_LIBS)\nstringrenderer_test_LDADD += $(pangocairo_LIBS) $(pangoft2_LIBS)\nstringrenderer_test_LDADD += $(cairo_LIBS) $(pango_LIBS)\n\ntablefind_test_SOURCES = unittest/tablefind_test.cc\ntablefind_test_CPPFLAGS = $(unittest_CPPFLAGS)\ntablefind_test_LDADD = $(TESS_LIBS)\n\ntablerecog_test_SOURCES = unittest/tablerecog_test.cc\ntablerecog_test_CPPFLAGS = $(unittest_CPPFLAGS)\ntablerecog_test_LDADD = $(TESS_LIBS)\n\ntabvector_test_SOURCES = unittest/tabvector_test.cc\ntabvector_test_CPPFLAGS = $(unittest_CPPFLAGS)\ntabvector_test_LDADD = $(TESS_LIBS)\n\ntatweel_test_SOURCES = unittest/tatweel_test.cc\ntatweel_test_SOURCES += unittest/third_party/utf/rune.c\ntatweel_test_SOURCES += unittest/util/utf8/unicodetext.cc\ntatweel_test_SOURCES += unittest/util/utf8/unilib.cc\ntatweel_test_CPPFLAGS = $(unittest_CPPFLAGS)\ntatweel_test_LDADD = $(TRAINING_LIBS)\n\ntextlineprojection_test_SOURCES = unittest/textlineprojection_test.cc\ntextlineprojection_test_CPPFLAGS = $(unittest_CPPFLAGS)\ntextlineprojection_test_LDADD = $(TRAINING_LIBS) $(LEPTONICA_LIBS)\n\ntfile_test_SOURCES = unittest/tfile_test.cc\ntfile_test_CPPFLAGS = $(unittest_CPPFLAGS)\ntfile_test_LDADD = $(TESS_LIBS)\n\nunichar_test_SOURCES = unittest/unichar_test.cc\nunichar_test_CPPFLAGS = $(unittest_CPPFLAGS)\nunichar_test_LDADD = $(TRAINING_LIBS) $(ICU_UC_LIBS)\n\nunicharcompress_test_SOURCES = unittest/unicharcompress_test.cc\nunicharcompress_test_CPPFLAGS = $(unittest_CPPFLAGS)\nunicharcompress_test_LDADD = $(TRAINING_LIBS) $(ICU_UC_LIBS)\n\nunicharset_test_SOURCES = unittest/unicharset_test.cc\nunicharset_test_CPPFLAGS = $(unittest_CPPFLAGS)\nunicharset_test_LDADD = $(TRAINING_LIBS) $(ICU_UC_LIBS)\n\nvalidate_grapheme_test_SOURCES = unittest/validate_grapheme_test.cc\nvalidate_grapheme_test_CPPFLAGS = $(unittest_CPPFLAGS)\nvalidate_grapheme_test_LDADD = $(TRAINING_LIBS) $(ICU_I18N_LIBS) $(ICU_UC_LIBS)\n\nvalidate_indic_test_SOURCES = unittest/validate_indic_test.cc\nvalidate_indic_test_CPPFLAGS = $(unittest_CPPFLAGS)\nvalidate_indic_test_LDADD = $(TRAINING_LIBS) $(ICU_I18N_LIBS) $(ICU_UC_LIBS)\n\nvalidate_khmer_test_SOURCES = unittest/validate_khmer_test.cc\nvalidate_khmer_test_CPPFLAGS = $(unittest_CPPFLAGS)\nvalidate_khmer_test_LDADD = $(TRAINING_LIBS) $(ICU_I18N_LIBS) $(ICU_UC_LIBS)\n\nvalidate_myanmar_test_SOURCES = unittest/validate_myanmar_test.cc\nvalidate_myanmar_test_CPPFLAGS = $(unittest_CPPFLAGS)\nvalidate_myanmar_test_LDADD = $(TRAINING_LIBS) $(ICU_I18N_LIBS) $(ICU_UC_LIBS)\n\nvalidator_test_SOURCES = unittest/validator_test.cc\nvalidator_test_CPPFLAGS = $(unittest_CPPFLAGS)\nvalidator_test_LDADD = $(TRAINING_LIBS) $(ICU_UC_LIBS)\n\n# for windows\nif T_WIN\napiexample_test_LDADD += -lws2_32\nintsimdmatrix_test_LDADD += -lws2_32\nmatrix_test_LDADD += -lws2_32\nif !DISABLED_LEGACY_ENGINE\nosd_test_LDADD += -lws2_32\nendif # !DISABLED_LEGACY_ENGINE\nloadlang_test_LDADD += -lws2_32\nendif\n\nEXTRA_apiexample_test_DEPENDENCIES = $(abs_top_builddir)/test/testing/phototest.tif\nEXTRA_apiexample_test_DEPENDENCIES += $(abs_top_builddir)/test/testing/phototest.txt\n\n$(abs_top_builddir)/test/testing/phototest.tif:\n\tmkdir -p $(top_builddir)/test/testing\n\tln -s $(TESTING_DIR)/phototest.tif $(top_builddir)/test/testing/phototest.tif\n\n$(abs_top_builddir)/test/testing/phototest.txt:\n\tmkdir -p $(top_builddir)/test/testing\n\tln -s $(TESTING_DIR)/phototest.txt $(top_builddir)/test/testing/phototest.txt\n\n# Some tests require a local tmp directory.\n\n$(check_PROGRAMS): | tmp\n\ntmp:\n\tmkdir -p tmp\n\n# Some tests require a well defined set of the following font files.\n\nfonts = ae_Arab.ttf\nfonts += Arial_Bold_Italic.ttf\nfonts += DejaVuSans-ExtraLight.ttf\nfonts += Lohit-Hindi.ttf\nfonts += Times_New_Roman.ttf\nfonts += UnBatang.ttf\nfonts += Verdana.ttf\n\n# These tests depend on installed model files and fonts:\n#\n# apiexample_test baseapi_test lang_model_test layout_test\n# ligature_table_test loadlang_test lstm_recode_test lstm_squashed_test\n# lstm_test lstmtrainer_test mastertrainer_test osd_test\n# pagesegmode_test pango_font_info_test progress_test\n# recodebeam_test resultiterator_test stringrenderer_test\n# textlineprojection_test unicharcompress_test\n#\n# Instead of fine-tuned dependencies the following lines\n# simply require those dependencies for all tests.\n# That can be improved if necessary.\n\n$(check_PROGRAMS): | $(LANGDATA_DIR)\n$(check_PROGRAMS): | $(TESSDATA_DIR)\n$(check_PROGRAMS): | $(TESSDATA_BEST_DIR)\n$(check_PROGRAMS): | $(TESSDATA_FAST_DIR)\n$(check_PROGRAMS): | $(fonts:%=$(TESTING_DIR)/%)\n\n$(LANGDATA_DIR) $(TESSDATA_DIR) $(TESSDATA_BEST_DIR) $(TESSDATA_FAST_DIR):\n\t@echo \"Some unit tests require $@.\"\n\t@echo \"It can be installed manually by running this command:\"\n\t@echo \"  git clone https://github.com/tesseract-ocr/$$(basename $@).git $@\"\n\t@exit 1\n\n$(TESTING_DIR)/Arial_Bold_Italic.ttf:\n\tcurl -sSL -o Arial.exe https://sourceforge.net/projects/corefonts/files/the%20fonts/final/arial32.exe/download\n\tcabextract -F Arialbi.TTF -q Arial.exe\n\trm Arial.exe\n\tmv Arialbi.TTF $@\n\n$(TESTING_DIR)/DejaVuSans-ExtraLight.ttf:\n\tcurl -sSL http://sourceforge.net/projects/dejavu/files/dejavu/2.37/dejavu-fonts-ttf-2.37.tar.bz2 | \\\n\ttar -xjO dejavu-fonts-ttf-2.37/ttf/DejaVuSans-ExtraLight.ttf >$@\n\n$(TESTING_DIR)/Lohit-Hindi.ttf:\n\tcurl -sSL https://releases.pagure.org/lohit/lohit-hindi-ttf-2.4.3.tar.gz | \\\n\ttar -xzO lohit-hindi-ttf-2.4.3/Lohit-Hindi.ttf >$@\n\n$(TESTING_DIR)/Times_New_Roman.ttf:\n\tcurl -sSL -o Times.exe https://sourceforge.net/projects/corefonts/files/the%20fonts/final/times32.exe/download\n\tcabextract -F Times.TTF -q Times.exe\n\trm Times.exe\n\tmv Times.TTF $@\n\n$(TESTING_DIR)/UnBatang.ttf:\n\tcurl -sSL -o $@ https://salsa.debian.org/fonts-team/fonts-unfonts-core/-/raw/master/UnBatang.ttf\n\n$(TESTING_DIR)/Verdana.ttf:\n\tcurl -sSL -o Verdana.exe https://sourceforge.net/projects/corefonts/files/the%20fonts/final/verdan32.exe/download\n\tcabextract -F Verdana.TTF -q Verdana.exe\n\trm Verdana.exe\n\tmv Verdana.TTF $@\n\n$(TESTING_DIR)/ae_Arab.ttf:\n\tcurl -sSL -o $@ https://salsa.debian.org/fonts-team/fonts-arabeyes/-/raw/master/ae_Arab.ttf\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.95,
          "content": "# Tesseract OCR\n\n[![Coverity Scan Build Status](https://scan.coverity.com/projects/tesseract-ocr/badge.svg)](https://scan.coverity.com/projects/tesseract-ocr)\n[![CodeQL](https://github.com/tesseract-ocr/tesseract/workflows/CodeQL/badge.svg)](https://github.com/tesseract-ocr/tesseract/security/code-scanning)\n[![OSS-Fuzz](https://img.shields.io/badge/oss--fuzz-fuzzing-brightgreen)](https://issues.oss-fuzz.com/issues?q=is:open%20title:tesseract-ocr)\n\\\n[![GitHub license](https://img.shields.io/badge/license-Apache--2.0-blue.svg)](https://raw.githubusercontent.com/tesseract-ocr/tesseract/main/LICENSE)\n[![Downloads](https://img.shields.io/badge/download-all%20releases-brightgreen.svg)](https://github.com/tesseract-ocr/tesseract/releases/)\n\n## Table of Contents\n\n* [Tesseract OCR](#tesseract-ocr)\n  * [About](#about)\n  * [Brief history](#brief-history)\n  * [Installing Tesseract](#installing-tesseract)\n  * [Running Tesseract](#running-tesseract)\n  * [For developers](#for-developers)\n  * [Support](#support)\n  * [License](#license)\n  * [Dependencies](#dependencies)\n  * [Latest Version of README](#latest-version-of-readme)\n\n## About\n\nThis package contains an **OCR engine** - `libtesseract` and a **command line program** - `tesseract`.\n\nTesseract 4 adds a new neural net (LSTM) based [OCR engine](https://en.wikipedia.org/wiki/Optical_character_recognition) which is focused on line recognition, but also still supports the legacy Tesseract OCR engine of Tesseract 3 which works by recognizing character patterns. Compatibility with Tesseract 3 is enabled by using the Legacy OCR Engine mode (--oem 0).\nIt also needs [traineddata](https://tesseract-ocr.github.io/tessdoc/Data-Files.html) files which support the legacy engine, for example those from the [tessdata](https://github.com/tesseract-ocr/tessdata) repository.\n\nStefan Weil is the current lead developer. Ray Smith was the lead developer until 2018. The maintainer is Zdenko Podobny. For a list of contributors see [AUTHORS](https://github.com/tesseract-ocr/tesseract/blob/main/AUTHORS)\nand GitHub's log of [contributors](https://github.com/tesseract-ocr/tesseract/graphs/contributors).\n\nTesseract has **unicode (UTF-8) support**, and can **recognize [more than 100 languages](https://tesseract-ocr.github.io/tessdoc/Data-Files-in-different-versions.html)** \"out of the box\".\n\nTesseract supports **[various image formats](https://tesseract-ocr.github.io/tessdoc/InputFormats)** including PNG, JPEG and TIFF.\n\nTesseract supports **various output formats**: plain text, hOCR (HTML), PDF, invisible-text-only PDF, TSV, ALTO and PAGE.\n\nYou should note that in many cases, in order to get better OCR results, you'll need to **[improve the quality](https://tesseract-ocr.github.io/tessdoc/ImproveQuality.html) of the image** you are giving Tesseract.\n\nThis project **does not include a GUI application**. If you need one, please see the [3rdParty](https://tesseract-ocr.github.io/tessdoc/User-Projects-%E2%80%93-3rdParty.html) documentation.\n\nTesseract **can be trained to recognize other languages**.\nSee [Tesseract Training](https://tesseract-ocr.github.io/tessdoc/Training-Tesseract.html) for more information.\n\n## Brief history\n\nTesseract was originally developed at Hewlett-Packard Laboratories Bristol UK and at Hewlett-Packard Co, Greeley Colorado USA between 1985 and 1994, with some more changes made in 1996 to port to Windows, and some C++izing in 1998. In 2005 Tesseract was open sourced by HP. From 2006 until November 2018 it was developed by Google.\n\nMajor version 5 is the current stable version and started with release\n[5.0.0](https://github.com/tesseract-ocr/tesseract/releases/tag/5.0.0) on November 30, 2021. Newer minor versions and bugfix versions are available from\n[GitHub](https://github.com/tesseract-ocr/tesseract/releases/).\n\nLatest source code is available from [main branch on GitHub](https://github.com/tesseract-ocr/tesseract/tree/main).\nOpen issues can be found in [issue tracker](https://github.com/tesseract-ocr/tesseract/issues),\nand [planning documentation](https://tesseract-ocr.github.io/tessdoc/Planning.html).\n\nSee **[Release Notes](https://tesseract-ocr.github.io/tessdoc/ReleaseNotes.html)**\nand **[Change Log](https://github.com/tesseract-ocr/tesseract/blob/main/ChangeLog)** for more details of the releases.\n\n## Installing Tesseract\n\nYou can either [Install Tesseract via pre-built binary package](https://tesseract-ocr.github.io/tessdoc/Installation.html)\nor [build it from source](https://tesseract-ocr.github.io/tessdoc/Compiling.html).\n\nBefore building Tesseract from source, please check that your system has a compiler which is one of the [supported compilers](https://tesseract-ocr.github.io/tessdoc/supported-compilers.html).\n\n## Running Tesseract\n\nBasic **[command line usage](https://tesseract-ocr.github.io/tessdoc/Command-Line-Usage.html)**:\n\n    tesseract imagename outputbase [-l lang] [--oem ocrenginemode] [--psm pagesegmode] [configfiles...]\n\nFor more information about the various command line options use `tesseract --help` or `man tesseract`.\n\nExamples can be found in the [documentation](https://tesseract-ocr.github.io/tessdoc/Command-Line-Usage.html#simplest-invocation-to-ocr-an-image).\n\n## For developers\n\nDevelopers can use `libtesseract` [C](https://github.com/tesseract-ocr/tesseract/blob/main/include/tesseract/capi.h) or\n[C++](https://github.com/tesseract-ocr/tesseract/blob/main/include/tesseract/baseapi.h) API to build their own application. If you need bindings to `libtesseract` for other programming languages, please see the\n[wrapper](https://tesseract-ocr.github.io/tessdoc/AddOns.html#tesseract-wrappers) section in the AddOns documentation.\n\nDocumentation of Tesseract generated from source code by doxygen can be found on [tesseract-ocr.github.io](https://tesseract-ocr.github.io/).\n\n## Support\n\nBefore you submit an issue, please review **[the guidelines for this repository](https://github.com/tesseract-ocr/tesseract/blob/main/CONTRIBUTING.md)**.\n\nFor support, first read the [documentation](https://tesseract-ocr.github.io/tessdoc/),\nparticularly the [FAQ](https://tesseract-ocr.github.io/tessdoc/FAQ.html) to see if your problem is addressed there.\nIf not, search the [Tesseract user forum](https://groups.google.com/g/tesseract-ocr), the [Tesseract developer forum](https://groups.google.com/g/tesseract-dev) and [past issues](https://github.com/tesseract-ocr/tesseract/issues), and if you still can't find what you need, ask for support in the mailing-lists.\n\nMailing-lists:\n\n* [tesseract-ocr](https://groups.google.com/g/tesseract-ocr) - For tesseract users.\n* [tesseract-dev](https://groups.google.com/g/tesseract-dev) - For tesseract developers.\n\nPlease report an issue only for a **bug**, not for asking questions.\n\n## License\n\n    The code in this repository is licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n**NOTE**: This software depends on other packages that may be licensed under different open source licenses.\n\nTesseract uses [Leptonica library](http://leptonica.com/) which essentially\nuses a [BSD 2-clause license](http://leptonica.com/about-the-license.html).\n\n## Dependencies\n\nTesseract uses [Leptonica library](https://github.com/DanBloomberg/leptonica)\nfor opening input images (e.g. not documents like pdf).\nIt is suggested to use leptonica with built-in support for [zlib](https://zlib.net),\n[png](https://sourceforge.net/projects/libpng) and\n[tiff](http://www.simplesystems.org/libtiff) (for multipage tiff).\n\n## Latest Version of README\n\nFor the latest online version of the README.md see:\n\n<https://github.com/tesseract-ocr/tesseract/blob/main/README.md>\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.01,
          "content": "5.5.0\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.47,
          "content": "environment:\n  matrix:\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022\n      platform: Win64\n\nconfiguration:\n  - Release\n\ncache:\n  - c:/Users/appveyor/.sw -> appveyor.yml\n\nonly_commits:\n  files:\n    - appveyor.yml\n    - '**.cpp'\n    - '**.h'\n    - 'unittest/**.c'\n    - 'unittest/**.cc'\n\nbefore_build:\n  - git submodule update --init --recursive\n  - curl -fsS -L -o dl.zip https://software-network.org/client/sw-master-windows_x86_64-client.zip\n  - 7z x dl.zip\n  - set PATH=%PATH%;%cd%\n\nbuild_script:\n  - sw -version\n  # -show-output - show command output\n  # debug build causes long builds (> 1h), appveyor drops them\n  - sw -platform %platform% -config r build -Dwith-tests=1\n  # test\n  - git clone https://github.com/egorpugin/tessdata tessdata_unittest\n  - ps: Copy-Item -Path \"tessdata_unittest\\fonts\\*\" -Destination \"test\\testing\" -Recurse\n  - sw -platform %platform% -config r test -Dwith-tests=1 -Dskip-tests=lstm,lstm_recode\n\nafter_build:\n  - 7z a tesseract.zip %APPVEYOR_BUILD_FOLDER%\\.sw\\out\\**\\*.exe %APPVEYOR_BUILD_FOLDER%\\.sw\\out\\**\\*.dll\n  #- 7z a tesseract.zip %APPVEYOR_BUILD_FOLDER%\\.sw\\Windows_*_Shared_Release_MSVC_*\\*.exe %APPVEYOR_BUILD_FOLDER%\\.sw\\Windows_*_Shared_Release_MSVC_*\\*.dll\n\non_finish:\n  # gather tests\n  - ps: $wc = New-Object 'System.Net.WebClient'\n  - ps: $wc.UploadFile(\"https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)\", (Resolve-Path .\\.sw\\test\\results.xml))\n\nartifacts:\n  - path: tesseract.zip\n    name: tesseract-$(APPVEYOR_BUILD_VERSION)\n\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 3.93,
          "content": "#!/bin/sh\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n# http://www.apache.org/licenses/LICENSE-2.0\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# This is a simple script which is meant to help developers\n# better deal with the GNU autotools, specifically:\n#\n#   aclocal\n#   libtoolize\n#   autoconf\n#   autoheader\n#   automake\n#\n# The whole thing is quite complex...\n#\n# The idea is to run this collection of tools on a single platform,\n# typically the main development platform, running a recent version of\n# autoconf. In theory, if we had these tools on each platform where we\n# ever expected to port the software, we would never need to checkin\n# more than a few autotools configuration files. However, the whole\n# idea is to generate a configure script and associated files in a way\n# that is portable across platforms, so we *have* to check in a whole\n# bunch of files generated by all these tools.\n\n# The real source files are:\n#\n# acinclude.m4 (used by aclocal)\n# configure.ac (main autoconf file)\n# Makefile.am, */Makefile.am (automake config files)\n#\n# All the rest is auto-generated.\n\nif [ \"$1\" = \"clean\" ]; then\n    echo \"Cleaning...\"\n    rm configure aclocal.m4\n    rm m4/l*\n    rm config/*\n    rmdir config\n    find . -iname \"Makefile.in\" -type f -exec rm '{}' +\nfi\n\nbail_out()\n{\n    echo\n    echo \"  Something went wrong, bailing out!\"\n    echo\n    exit 1\n}\n\n# Prevent any errors that might result from failing to properly invoke\n# `libtoolize` or `glibtoolize,` whichever is present on your system,\n# from occurring by testing for its existence and capturing the absolute path to\n# its location for caching purposes prior to using it later on in 'Step 2:'\nif command -v libtoolize >/dev/null 2>&1; then\n  LIBTOOLIZE=\"$(command -v libtoolize)\"\nelif command -v glibtoolize >/dev/null 2>&1; then\n  LIBTOOLIZE=\"$(command -v glibtoolize)\"\nelse\n  echo \"Unable to find a valid copy of libtoolize or glibtoolize in your PATH!\"\n  bail_out\nfi\n\n# --- Step 1: Generate aclocal.m4 from:\n#             . acinclude.m4\n#             . config/*.m4 (these files are referenced in acinclude.m4)\n\nmkdir -p config\n\necho \"Running aclocal\"\naclocal -I config || bail_out\n\n# --- Step 2:\n\necho \"Running $LIBTOOLIZE\"\n$LIBTOOLIZE -f -c || bail_out\n$LIBTOOLIZE --automake || bail_out\n\n# Run aclocal a 2nd time because glibtoolize created additional m4 files.\necho \"Running aclocal\"\naclocal -I config || bail_out\n\n# --- Step 3: Generate configure and include/miaconfig.h from:\n#             . configure.ac\n#\n\necho \"Running autoconf\"\nautoconf || bail_out\n\nif grep -q PKG_CHECK_MODULES configure; then\n  # The generated configure is invalid because pkg-config is unavailable.\n  rm configure\n  echo \"Missing pkg-config. Check the build requirements.\"\n  bail_out\nfi\n\n# --- Step 4: Generate config.h.in from:\n#             . configure.ac (look for AM_CONFIG_HEADER tag or AC_CONFIG_HEADER tag)\n\necho \"Running autoheader\"\nautoheader -f || bail_out\n\n# --- Step 5: Generate Makefile.in, src/Makefile.in, and a whole bunch of\n#             files in config (config.guess, config.sub, depcomp,\n#             install-sh, missing, mkinstalldirs) plus COPYING and\n#             INSTALL from:\n#             . Makefile.am\n#             . src/Makefile.am\n#\n# Using --add-missing --copy makes sure that, if these files are missing,\n# they are copied from the system so they can be used in a distribution.\n\necho \"Running automake --add-missing --copy\"\nautomake --add-missing --copy --warnings=all || bail_out\n\necho \"\"\necho \"All done.\"\necho \"To build the software now, do something like:\"\necho \"\"\necho \"$ ./configure [--enable-debug] [...other options]\"\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 19.52,
          "content": "# -*-Shell-script-*-\n#\n# Copyright (c) Luc Vincent\n\n# ----------------------------------------\n# Initialization\n# ----------------------------------------\nAC_PREREQ([2.69])\nAC_INIT([tesseract],\n        [m4_esyscmd_s([test -d .git && git describe --abbrev=4 2>/dev/null || cat VERSION])],\n        [https://github.com/tesseract-ocr/tesseract/issues],,\n        [https://github.com/tesseract-ocr/tesseract/])\n\n# Store command like options for CXXFLAGS\nOLD_CXXFLAGS=$CXXFLAGS\nAC_PROG_CXX([g++ clang++])\n# reset compiler flags to initial flags\nAC_LANG([C++])\nAC_LANG_COMPILER_REQUIRE\nCXXFLAGS=${CXXFLAGS:-\"\"}\nAC_CONFIG_MACRO_DIR([m4])\nAC_CONFIG_AUX_DIR([config])\nAC_CONFIG_SRCDIR([src/tesseract.cpp])\nAC_PREFIX_DEFAULT([/usr/local])\n\n# Automake configuration. Do not require README file (we use README.md).\nAM_INIT_AUTOMAKE([foreign subdir-objects nostdinc])\n\n# Define date of package, etc. Could be useful in auto-generated\n# documentation.\nPACKAGE_YEAR=2024\nPACKAGE_DATE=\"11/10\"\n\nabs_top_srcdir=`AS_DIRNAME([$0])`\n\nAC_DEFINE_UNQUOTED([PACKAGE_NAME], [\"${PACKAGE_NAME}\"], [Name of package])\nAC_DEFINE_UNQUOTED([PACKAGE_VERSION], [\"${PACKAGE_VERSION}\"], [Version number])\nAC_DEFINE_UNQUOTED([PACKAGE_YEAR], [\"$PACKAGE_YEAR\"], [Official year for this release])\nAC_DEFINE_UNQUOTED([PACKAGE_DATE], [\"$PACKAGE_DATE\"], [Official date of release])\n\nAC_SUBST([PACKAGE_NAME])\nAC_SUBST([PACKAGE_VERSION])\nAC_SUBST([PACKAGE_YEAR])\nAC_SUBST([PACKAGE_DATE])\n\nGENERIC_LIBRARY_NAME=tesseract\n\n# Release versioning. Get versions from PACKAGE_VERSION.\nAX_SPLIT_VERSION\nGENERIC_MAJOR_VERSION=$(echo \"$AX_MAJOR_VERSION\" | $SED 's/^[[^0-9]]*//')\nGENERIC_MINOR_VERSION=$AX_MINOR_VERSION\nGENERIC_MICRO_VERSION=`echo \"$AX_POINT_VERSION\" | $SED 's/^\\([[0-9]][[0-9]]*\\).*/\\1/'`\n\n# API version (often = GENERIC_MAJOR_VERSION.GENERIC_MINOR_VERSION)\nGENERIC_API_VERSION=$GENERIC_MAJOR_VERSION.$GENERIC_MINOR_VERSION\nGENERIC_LIBRARY_VERSION=$GENERIC_MAJOR_VERSION:$GENERIC_MINOR_VERSION\nAC_SUBST([GENERIC_API_VERSION])\nAC_SUBST([GENERIC_MAJOR_VERSION])\nAC_SUBST([GENERIC_MINOR_VERSION])\nAC_SUBST([GENERIC_MICRO_VERSION])\n\nAC_SUBST([GENERIC_LIBRARY_VERSION])\nPACKAGE=$GENERIC_LIBRARY_NAME\nAC_SUBST([GENERIC_LIBRARY_NAME])\n\nGENERIC_VERSION=$GENERIC_MAJOR_VERSION.$GENERIC_MINOR_VERSION.$GENERIC_MICRO_VERSION\nGENERIC_RELEASE=$GENERIC_MAJOR_VERSION.$GENERIC_MINOR_VERSION\nAC_SUBST([GENERIC_RELEASE])\nAC_SUBST([GENERIC_VERSION])\n\nAC_CONFIG_HEADERS([include/config_auto.h:config/config.h.in])\n\n# default conditional\nAM_CONDITIONAL([T_WIN], false)\nAM_CONDITIONAL([MINGW], false)\nAM_CONDITIONAL([GRAPHICS_DISABLED], false)\nAC_SUBST([AM_CPPFLAGS])\n\n# Be less noisy by default.\n# Can be overridden with `configure --disable-silent-rules` or with `make V=1`.\nAM_SILENT_RULES([yes])\n\n#############################\n#\n# Platform specific setup\n#\n#############################\nAC_CANONICAL_HOST\ncase \"${host_os}\" in\n    mingw*)\n        AC_DEFINE_UNQUOTED([MINGW], 1, [This is a MinGW system])\n        AM_CONDITIONAL([T_WIN], true)\n        AM_CONDITIONAL([MINGW], true)\n        AM_CONDITIONAL([ADD_RT], false)\n        AC_SUBST([AM_LDFLAGS], ['-no-undefined'])\n        ;;\n    cygwin*)\n        AM_CONDITIONAL([ADD_RT], false)\n        AC_SUBST([NOUNDEFINED], ['-no-undefined'])\n        ;;\n    solaris*)\n        LIBS=\"$LIBS -lsocket -lnsl -lrt -lxnet\"\n        AM_CONDITIONAL([ADD_RT], true)\n        ;;\n    *darwin*)\n        AM_CONDITIONAL([ADD_RT], false)\n        ;;\n    *android*|openbsd*)\n        AM_CONDITIONAL([ADD_RT], false)\n        ;;\n    powerpc-*-darwin*)\n        ;;\n    *)\n        # default\n        AM_CONDITIONAL([ADD_RT], true)\n        ;;\nesac\n\nWERROR=-Werror\n# The test code used by AX_CHECK_COMPILE_FLAG uses an empty statement\n# and unused macros which must not raise a compiler error, but it must\n# be an error if flags like -avx are ignored on ARM and other\n# architectures because they are unsupported.\nAX_CHECK_COMPILE_FLAG([-Werror=unused-command-line-argument], [WERROR=-Werror=unused-command-line-argument])\n\n## Checks for supported compiler options.\n\nAM_CONDITIONAL([HAVE_AVX], false)\nAM_CONDITIONAL([HAVE_AVX2], false)\nAM_CONDITIONAL([HAVE_AVX512F], false)\nAM_CONDITIONAL([HAVE_FMA], false)\nAM_CONDITIONAL([HAVE_SSE4_1], false)\nAM_CONDITIONAL([HAVE_NEON], false)\nAM_CONDITIONAL([HAVE_RVV], false)\n\ncase \"${host_cpu}\" in\n\n  amd64|*86*)\n\n    AX_CHECK_COMPILE_FLAG([-mavx], [avx=true], [avx=false], [$WERROR])\n    AM_CONDITIONAL([HAVE_AVX], ${avx})\n    if $avx; then\n      AC_DEFINE([HAVE_AVX], [1], [Enable AVX instructions])\n    fi\n\n    AX_CHECK_COMPILE_FLAG([-mavx2], [avx2=true], [avx2=false], [$WERROR])\n    AM_CONDITIONAL([HAVE_AVX2], $avx2)\n    if $avx2; then\n      AC_DEFINE([HAVE_AVX2], [1], [Enable AVX2 instructions])\n    fi\n\n    AX_CHECK_COMPILE_FLAG([-mavx512f], [avx512f=true], [avx512f=false], [$WERROR])\n    AM_CONDITIONAL([HAVE_AVX512F], $avx512f)\n    if $avx512f; then\n      AC_DEFINE([HAVE_AVX512F], [1], [Enable AVX512F instructions])\n    fi\n\n    AX_CHECK_COMPILE_FLAG([-mfma], [fma=true], [fma=false], [$WERROR])\n    AM_CONDITIONAL([HAVE_FMA], $fma)\n    if $fma; then\n      AC_DEFINE([HAVE_FMA], [1], [Enable FMA instructions])\n    fi\n\n    AX_CHECK_COMPILE_FLAG([-msse4.1], [sse41=true], [sse41=false], [$WERROR])\n    AM_CONDITIONAL([HAVE_SSE4_1], $sse41)\n    if $sse41; then\n      AC_DEFINE([HAVE_SSE4_1], [1], [Enable SSE 4.1 instructions])\n    fi\n\n    ;;\n\n  aarch64*|arm64)\n\n    # ARMv8 always has NEON and does not need special compiler flags.\n    AM_CONDITIONAL([HAVE_NEON], true)\n    AC_DEFINE([HAVE_NEON], [1], [Enable NEON instructions])\n    ;;\n\n  arm*)\n\n    AX_CHECK_COMPILE_FLAG([-mfpu=neon], [neon=true], [neon=false], [$WERROR])\n    AM_CONDITIONAL([HAVE_NEON], $neon)\n    if $neon; then\n      AC_DEFINE([HAVE_NEON], [1], [Enable NEON instructions])\n      NEON_CXXFLAGS=\"-mfpu=neon\"\n      AC_SUBST([NEON_CXXFLAGS])\n      check_for_neon=1\n    fi\n\n    ;;\n\n  riscv*)\n\n    AX_CHECK_COMPILE_FLAG([-march=rv64gcv], [rvv=true], [rvv=false], [$WERROR])\n    AM_CONDITIONAL([HAVE_RVV], [$rvv])\n    if $rvv; then\n      AC_DEFINE([HAVE_RVV], [1], [Enable RVV instructions])\n      check_for_rvv=1\n    fi\n    ;;\n\n  *)\n\n    AC_MSG_WARN([No compiler options for $host_cpu])\n\nesac\n\n# check whether feenableexcept is supported. some C libraries (e.g. uclibc) don't.\nAC_CHECK_FUNCS([feenableexcept])\n\n# additional checks for NEON targets\nif test x$check_for_neon = x1; then\n  AC_MSG_NOTICE([checking how to detect NEON availability])\n  AC_CHECK_FUNCS([getauxval elf_aux_info android_getCpuFamily])\n\n  if test $ac_cv_func_getauxval = no && test $ac_cv_func_elf_aux_info = no && test $ac_cv_func_android_getCpuFamily = no; then\n      AC_MSG_WARN([NEON is available, but we don't know how to check for it.  Will not be able to use NEON.])\n  fi\nfi\n\n# additional checks for RVV targets\nif test x$check_for_rvv = x1; then\n  AC_MSG_NOTICE([checking how to detect RVV availability])\n  AC_CHECK_FUNCS([getauxval])\n\n  if test $ac_cv_func_getauxval = no; then\n      AC_MSG_WARN([RVV is available, but we don't know how to check for it.  Will not be able to use RVV.])\n  fi\nfi\n\nAX_CHECK_COMPILE_FLAG([-fopenmp-simd], [openmp_simd=true], [openmp_simd=false], [$WERROR])\nAM_CONDITIONAL([OPENMP_SIMD], $openmp_simd)\n\nAC_ARG_WITH([extra-includes],\n            [AS_HELP_STRING([--with-extra-includes=DIR],\n                       [Define an additional directory for include files])],\n            [if test -d \"$withval\" ; then\n               CFLAGS=\"$CFLAGS -I$withval\"\n             else\n               AC_MSG_ERROR([Cannot stat directory $withval])\n             fi])\n\nAC_ARG_WITH([extra-libraries],\n            [AS_HELP_STRING([--with-extra-libraries=DIR],\n                       [Define an additional directory for library files])],\n            [if test -d \"$withval\" ; then\n              LDFLAGS=\"$LDFLAGS -L$withval\"\n             else\n               AC_MSG_ERROR([Cannot stat directory $withval])\n             fi])\n\nAC_MSG_CHECKING([--enable-float32 argument])\nAC_ARG_ENABLE([float32],\n\t      AS_HELP_STRING([--disable-float32], [disable float and enable double for LSTM]))\nAC_MSG_RESULT([$enable_float32])\nif test \"$enable_float32\" != \"no\"; then\n  AC_DEFINE([FAST_FLOAT], [1], [Enable float for LSTM])\nfi\n\nAC_MSG_CHECKING([--enable-graphics argument])\nAC_ARG_ENABLE([graphics],\n  AS_HELP_STRING([--disable-graphics], [disable graphics (ScrollView)]))\nAC_MSG_RESULT([$enable_graphics])\nif test \"$enable_graphics\" = \"no\"; then\n  AC_DEFINE([GRAPHICS_DISABLED], [], [Disable graphics])\n  AM_CONDITIONAL([GRAPHICS_DISABLED], true)\nfi\n\nAC_MSG_CHECKING([--enable-legacy argument])\nAC_ARG_ENABLE([legacy],\n  AS_HELP_STRING([--disable-legacy], [disable the legacy OCR engine]))\nAC_MSG_RESULT([$enable_legacy])\nAM_CONDITIONAL([DISABLED_LEGACY_ENGINE], test \"$enable_legacy\" = \"no\")\nif test \"$enable_legacy\" = \"no\"; then\n  AC_DEFINE([DISABLED_LEGACY_ENGINE], [1], [Disable legacy OCR engine])\nfi\n\n# check whether to build OpenMP support\nAC_OPENMP\n\nhave_tiff=false\n# Note that the first usage of AC_CHECK_HEADERS must be unconditional.\nAC_CHECK_HEADERS([tiffio.h], [have_tiff=true], [have_tiff=false])\n\n# Configure arguments which allow disabling some optional libraries.\nAC_ARG_WITH([archive],\n            AS_HELP_STRING([--with-archive],\n                           [Build with libarchive which supports compressed model files @<:@default=check@:>@]),\n            [], [with_archive=check])\nAC_ARG_WITH([curl],\n            AS_HELP_STRING([--with-curl],\n                           [Build with libcurl which supports processing an image URL @<:@default=check@:>@]),\n            [], [with_curl=check])\n\n# https://lists.apple.com/archives/unix-porting/2009/Jan/msg00026.html\nm4_define([MY_CHECK_FRAMEWORK],\n  [AC_CACHE_CHECK([if -framework $1 works],[my_cv_framework_$1],\n     [save_LIBS=\"$LIBS\"\n     LIBS=\"$LIBS -framework $1\"\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n             [my_cv_framework_$1=yes],\n            [my_cv_framework_$1=no])\n     LIBS=\"$save_LIBS\"\n    ])\n   if test \"$my_cv_framework_$1\"=\"yes\"; then\n     AC_DEFINE(AS_TR_CPP([HAVE_FRAMEWORK_$1]), 1,\n            [Define if you have the $1 framework])\n     AS_TR_CPP([FRAMEWORK_$1])=\"-framework $1\"\n     AC_SUBST(AS_TR_CPP([FRAMEWORK_$1]))\n   fi]\n)\n\ncase \"${host_os}\" in\n  *darwin* | *-macos10*)\n    MY_CHECK_FRAMEWORK([Accelerate])\n    if test $my_cv_framework_Accelerate = yes; then\n      AM_CPPFLAGS=\"-DHAVE_FRAMEWORK_ACCELERATE $AM_CPPFLAGS\"\n      AM_LDFLAGS=\"$AM_LDFLAGS -framework Accelerate\"\n    fi\n    ;;\n  *)\n    # default\n    ;;\nesac\n\n# check whether to build tesseract with -fvisibility=hidden -fvisibility-inlines-hidden\n# http://gcc.gnu.org/wiki/Visibility\n# https://groups.google.com/g/tesseract-dev/c/l2ZFrpgYkSc/m/_cdYSRDSXuUJ\nAC_MSG_CHECKING([--enable-visibility argument])\nAC_ARG_ENABLE([visibility],\n  AS_HELP_STRING([--enable-visibility],\n                 [enable experimental build with -fvisibility [default=no]]))\nAC_MSG_RESULT([$enable_visibility])\nAM_CONDITIONAL([VISIBILITY], [test \"$enable_visibility\" = \"yes\"])\n\n# Check if tessdata-prefix is disabled\nAC_MSG_CHECKING([whether to use tessdata-prefix])\nAC_ARG_ENABLE([tessdata-prefix],\n    [AS_HELP_STRING([--disable-tessdata-prefix],\n            [don't set TESSDATA-PREFIX during compile])],\n    [tessdata_prefix=\"no\"], [tessdata_prefix=\"yes\"])\nAC_MSG_RESULT([$tessdata_prefix])\nAM_CONDITIONAL([NO_TESSDATA_PREFIX], [test \"$tessdata_prefix\" = \"no\"])\n\n\n# Detect Clang compiler\nAC_MSG_CHECKING([if compiling with clang])\nAC_COMPILE_IFELSE(\n[AC_LANG_PROGRAM([], [[\n#ifndef __clang__\n       not clang\n#endif\n]])],\n[CLANG=yes], [CLANG=no])\nAC_MSG_RESULT([$CLANG])\n\n# Check whether to enable debugging\nAC_MSG_CHECKING([whether to enable debugging])\nAC_ARG_ENABLE([debug],\n  AS_HELP_STRING([--enable-debug], [turn on debugging [default=no]]))\nAC_MSG_RESULT([$enable_debug])\nif test x\"$enable_debug\" = x\"yes\"; then\n    CXXFLAGS=${CXXFLAGS:-\"-O2\"}\n    AM_CPPFLAGS=\"$AM_CPPFLAGS -g -Wall -DDEBUG -pedantic\"\n    AM_CXXFLAGS=\"$AM_CXXFLAGS -g -Wall -DDEBUG -pedantic\"\n    if test \"x$CLANG\" = \"xyes\"; then\n        # https://clang.llvm.org/docs/CommandGuide/clang.html\n        # clang treats -Og as -O1\n        AM_CPPFLAGS=\"$AM_CPPFLAGS -O0\"\n        AM_CXXFLAGS=\"$AM_CXXFLAGS -O0\"\n    else\n        AM_CPPFLAGS=\"$AM_CPPFLAGS -Og\"\n        AM_CXXFLAGS=\"$AM_CXXFLAGS -Og\"\n    fi\nelse\n    AM_CXXFLAGS=\"$AM_CXXFLAGS -O2 -DNDEBUG\"\n    AM_CPPFLAGS=\"$AM_CPPFLAGS -O2 -DNDEBUG\"\nfi\n\n# ----------------------------------------\n# Init libtool\n# ----------------------------------------\n\nLT_INIT\n\n\n# ----------------------------------------\n# C++ related options\n# ----------------------------------------\ndnl **********************\ndnl Turn on C++17 or newer\ndnl **********************\n\nCPLUSPLUS=\nAX_CHECK_COMPILE_FLAG([-std=c++17], [CPLUSPLUS=17], [], [$WERROR])\nAX_CHECK_COMPILE_FLAG([-std=c++20], [CPLUSPLUS=20], [], [$WERROR])\n\nif test -z \"$CPLUSPLUS\"; then\n  AC_MSG_ERROR([Your compiler does not have the necessary C++17 support! Cannot proceed.])\nfi\n\n# Set C++17 or newer support based on platform/compiler\ncase \"${host_os}\" in\n  cygwin*)\n    CXXFLAGS=\"$CXXFLAGS -std=gnu++$CPLUSPLUS\"\n    ;;\n  *-darwin* | *-macos10*)\n    CXXFLAGS=\"$CXXFLAGS -std=c++$CPLUSPLUS\"\n    if test \"x$CLANG\" = \"xyes\"; then\n      LDFLAGS=\"$LDFLAGS -stdlib=libc++\"\n    fi\n    ;;\n  *)\n    # default\n    CXXFLAGS=\"$CXXFLAGS -std=c++$CPLUSPLUS\"\n    ;;\nesac\n\n\n# ----------------------------------------\n# Check for libraries\n# ----------------------------------------\n\nAC_SEARCH_LIBS([pthread_create], [pthread])\n\n# Set PKG_CONFIG_PATH for macOS with Homebrew unless it is already set.\nAC_CHECK_PROG([have_brew], brew, true, false)\nif $have_brew; then\n  brew_prefix=$(brew --prefix)\n  if test -z \"$PKG_CONFIG_PATH\"; then\n    PKG_CONFIG_PATH=$brew_prefix/opt/icu4c/lib/pkgconfig:$brew_prefix/opt/libarchive/lib/pkgconfig\n    export PKG_CONFIG_PATH\n  fi\nfi\n\n# ----------------------------------------\n# Check for programs needed to build documentation.\n# ----------------------------------------\n\nAM_CONDITIONAL([ASCIIDOC], false)\nAM_CONDITIONAL([HAVE_XML_CATALOG_FILES], false)\nAC_ARG_ENABLE([doc],\n              AS_HELP_STRING([--disable-doc], [disable build of documentation])\n              [],\n              [: m4_divert_text([DEFAULTS], [enable_doc=check])])\nAS_IF([test \"$enable_doc\" != \"no\"], [\n  AC_CHECK_PROG([have_asciidoc], asciidoc, true, false)\n  AC_CHECK_PROG([have_xsltproc], xsltproc, true, false)\n  # macOS with Homebrew requires the environment variable\n  # XML_CATALOG_FILES for xsltproc.\n  if $have_asciidoc && $have_xsltproc; then\n    AM_CONDITIONAL([ASCIIDOC], true)\n    XML_CATALOG_FILES=\n    if $have_brew; then\n      catalog_file=$brew_prefix/etc/xml/catalog\n      if test -f $catalog_file; then\n        AM_CONDITIONAL([HAVE_XML_CATALOG_FILES], true)\n        XML_CATALOG_FILES=file:$catalog_file\n      else\n        AC_MSG_WARN([Missing file $catalog_file.])\n      fi\n    fi\n    AC_SUBST([XML_CATALOG_FILES])\n  else\n    AS_IF([test \"x$enable_doc\" != xcheck], [\n      AC_MSG_FAILURE(\n        [--enable-doc was given, but test for asciidoc and xsltproc failed])\n    ])\n  fi\n])\n\n# ----------------------------------------\n# Checks for typedefs, structures, and compiler characteristics.\n# ----------------------------------------\n\nAC_CHECK_TYPES([wchar_t],,, [#include \"wchar.h\"])\nAC_CHECK_TYPES([long long int])\n\n# ----------------------------------------\n# Test auxiliary packages\n# ----------------------------------------\n\nAM_CONDITIONAL([HAVE_LIBCURL], false)\nAS_IF([test \"x$with_curl\" != xno], [\n  PKG_CHECK_MODULES([libcurl], [libcurl], [have_libcurl=true], [have_libcurl=false])\n  AM_CONDITIONAL([HAVE_LIBCURL], $have_libcurl)\n  if $have_libcurl; then\n    AC_DEFINE([HAVE_LIBCURL], [1], [Enable libcurl])\n  else\n    AS_IF([test \"x$with_curl\" != xcheck], [\n      AC_MSG_FAILURE(\n        [--with-curl was given, but test for libcurl failed])\n    ])\n  fi\n])\n\nPKG_CHECK_MODULES([LEPTONICA], [lept >= 1.74], [have_lept=true], [have_lept=false])\nif $have_lept; then\n  CPPFLAGS=\"$CPPFLAGS $LEPTONICA_CFLAGS\"\nelse\n  AC_MSG_ERROR([Leptonica 1.74 or higher is required. Try to install libleptonica-dev package.])\nfi\n\nAM_CONDITIONAL([HAVE_LIBARCHIVE], false)\nAS_IF([test \"x$with_archive\" != xno], [\n  PKG_CHECK_MODULES([libarchive], [libarchive], [have_libarchive=true], [have_libarchive=false])\n  AM_CONDITIONAL([HAVE_LIBARCHIVE], [$have_libarchive])\n  if $have_libarchive; then\n    AC_DEFINE([HAVE_LIBARCHIVE], [1], [Enable libarchive])\n    CPPFLAGS=\"$CPPFLAGS $libarchive_CFLAGS\"\n  else\n    AS_IF([test \"x$with_archive\" != xcheck], [\n      AC_MSG_FAILURE(\n        [--with-archive was given, but test for libarchive failed])\n    ])\n  fi\n])\n\nAM_CONDITIONAL([ENABLE_TRAINING], true)\n\n# Check availability of ICU packages.\nPKG_CHECK_MODULES([ICU_UC], [icu-uc >= 52.1], [have_icu_uc=true], [have_icu_uc=false])\nPKG_CHECK_MODULES([ICU_I18N], [icu-i18n >= 52.1], [have_icu_i18n=true], [have_icu_i18n=false])\nif !($have_icu_uc && $have_icu_i18n); then\n  AC_MSG_WARN([icu 52.1 or higher is required, but was not found.])\n  AC_MSG_WARN([Training tools WILL NOT be built.])\n  AC_MSG_WARN([Try to install libicu-dev package.])\n  AM_CONDITIONAL([ENABLE_TRAINING], false)\nfi\n\n# Check location of pango headers\nPKG_CHECK_MODULES([pango], [pango >= 1.38.0], [have_pango=true], [have_pango=false])\nif !($have_pango); then\n        AC_MSG_WARN([pango 1.38.0 or higher is required, but was not found.])\n        AC_MSG_WARN([Training tools WILL NOT be built.])\n        AC_MSG_WARN([Try to install libpango1.0-dev package.])\n        AM_CONDITIONAL([ENABLE_TRAINING], false)\nfi\n\n# Check location of cairo headers\nPKG_CHECK_MODULES([cairo], [cairo], [have_cairo=true], [have_cairo=false])\nif !($have_cairo); then\n        AC_MSG_WARN([Training tools WILL NOT be built because of missing cairo library.])\n        AC_MSG_WARN([Try to install libcairo-dev?? package.])\n        AM_CONDITIONAL([ENABLE_TRAINING], false)\nfi\n\nPKG_CHECK_MODULES([pangocairo], [pangocairo], [], [false])\nPKG_CHECK_MODULES([pangoft2], [pangoft2], [], [false])\n\n# ----------------------------------------\n# Final Tasks and Output\n# ----------------------------------------\n\n# Output files\nAC_CONFIG_FILES([include/tesseract/version.h])\nAC_CONFIG_FILES([Makefile tesseract.pc])\nAC_CONFIG_FILES([tessdata/Makefile])\nAC_CONFIG_FILES([tessdata/configs/Makefile])\nAC_CONFIG_FILES([tessdata/tessconfigs/Makefile])\nAC_CONFIG_FILES([java/Makefile])\nAC_CONFIG_FILES([java/com/Makefile])\nAC_CONFIG_FILES([java/com/google/Makefile])\nAC_CONFIG_FILES([java/com/google/scrollview/Makefile])\nAC_CONFIG_FILES([java/com/google/scrollview/events/Makefile])\nAC_CONFIG_FILES([java/com/google/scrollview/ui/Makefile])\nAC_CONFIG_FILES([nsis/Makefile])\nAC_OUTPUT\n\n# Final message\necho \"\"\necho \"Configuration is done.\"\necho \"You can now build and install $PACKAGE_NAME by running:\"\necho \"\"\necho \"$ make\"\necho \"$ sudo make install\"\necho \"$ sudo ldconfig\"\necho \"\"\n\nAM_COND_IF([ASCIIDOC], [\n  echo \"This will also build the documentation.\"\n], [\n  AS_IF([test \"$enable_doc\" = \"no\"], [\n    echo \"Documentation will not be built because it was disabled.\"\n  ], [\n    echo \"Documentation will not be built because asciidoc or xsltproc is missing.\"\n  ])\n])\n\n# echo \"$ sudo make install LANGS=\\\"eng ara deu\\\"\"\n# echo \"  Or:\"\n# echo \"$ sudo make install-langs\"\necho \"\"\n\nAM_COND_IF([ENABLE_TRAINING],\n  [\n   echo \"Training tools can be built and installed with:\"\n   echo \"\"\n   echo \"$ make training\"\n   echo \"$ sudo make training-install\"\n   echo \"\"],\n  [\n   echo \"You cannot build training tools because of missing dependency.\"\n   echo \"Check configure output for details.\"\n   echo \"\"]\n)\n\n# ----------------------------------------\n# CONFIG Template\n# ----------------------------------------\n\n# Fence added in configuration file\nAH_TOP([\n#ifndef CONFIG_AUTO_H\n#define CONFIG_AUTO_H\n/* config_auto.h: begin */\n])\n\n# Stuff added at bottom of file\nAH_BOTTOM([\n\n/* Miscellaneous defines */\n#define AUTOCONF 1\n\n/* Not used yet\n#ifndef NO_GETTEXT\n#define USING_GETTEXT\n#endif\n*/\n\n/* config_auto.h: end */\n#endif\n])\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.02,
          "content": "tesseract:\n  build: .\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "java",
          "type": "tree",
          "content": null
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "nsis",
          "type": "tree",
          "content": null
        },
        {
          "name": "snap",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "sw.cpp",
          "type": "blob",
          "size": 12.66,
          "content": "void build(Solution &s)\n{\n    auto &tess = s.addProject(\"google.tesseract\", \"main\");\n    tess += Git(\"https://github.com/tesseract-ocr/tesseract\", \"\", \"{v}\");\n\n    auto cppstd = cpp17;\n\n    auto &libtesseract = tess.addTarget<LibraryTarget>(\"libtesseract\");\n    {\n        libtesseract.setChecks(\"libtesseract\");\n\n        libtesseract.PackageDefinitions = true;\n\n        libtesseract += cppstd;\n\n        libtesseract += \"TESS_API\"_api;\n        libtesseract += \"include/.*\"_rr;\n        libtesseract += \"src/.+/.*\"_rr;\n        libtesseract -= \"src/training/.*\"_rr;\n\n        libtesseract.Public += \"include\"_idir;\n        libtesseract.Protected +=\n            \"src/ccmain\"_id,\n            \"src/api\"_id,\n            \"src/dict\"_id,\n            \"src/viewer\"_id,\n            \"src/wordrec\"_id,\n            \"src/ccstruct\"_id,\n            \"src/cutil\"_id,\n            \"src/textord\"_id,\n            \"src/ccutil\"_id,\n            \"src/lstm\"_id,\n            \"src/classify\"_id,\n            \"src/arch\"_id,\n            \"src/training\"_id;\n\n        if (libtesseract.getCompilerType() == CompilerType::MSVC ||\n            libtesseract.getCompilerType() == CompilerType::ClangCl)\n        {\n            libtesseract += \"__SSE4_1__\"_def;\n            libtesseract.CompileOptions.push_back(\"-arch:AVX2\");\n\n            // openmp\n            //if (libtesseract.getOptions()[\"openmp\"] == \"true\")\n            if (0)\n            {\n                if (libtesseract.getCompilerType() == CompilerType::MSVC)\n                    libtesseract.CompileOptions.push_back(\"-openmp\");\n                else\n                    libtesseract.CompileOptions.push_back(\"-fopenmp\");\n                libtesseract += \"_OPENMP=201107\"_def;\n                if (libtesseract.getBuildSettings().Native.ConfigurationType == ConfigurationType::Debug)\n                    libtesseract += \"vcompd.lib\"_slib;\n                else\n                    libtesseract += \"vcomp.lib\"_slib;\n            }\n        }\n\n        auto win_or_mingw =\n            libtesseract.getBuildSettings().TargetOS.Type == OSType::Windows ||\n            libtesseract.getBuildSettings().TargetOS.Type == OSType::Mingw\n            ;\n\n        // check fma flags\n        libtesseract -= \"src/arch/dotproductfma.cpp\";\n        // check arch (arm)\n        libtesseract -= \"src/arch/dotproductneon.cpp\";\n\n        if (libtesseract.getBuildSettings().TargetOS.Type != OSType::Windows &&\n            libtesseract.getBuildSettings().TargetOS.Arch != ArchType::aarch64)\n        {\n            libtesseract[\"src/arch/dotproductavx.cpp\"].args.push_back(\"-mavx\");\n            libtesseract[\"src/arch/dotproductavx512.cpp\"].args.push_back(\"-mavx512f\");\n            libtesseract[\"src/arch/dotproductsse.cpp\"].args.push_back(\"-msse4.1\");\n            libtesseract[\"src/arch/intsimdmatrixsse.cpp\"].args.push_back(\"-msse4.1\");\n            libtesseract[\"src/arch/intsimdmatrixavx2.cpp\"].args.push_back(\"-mavx2\");\n        }\n        if (!win_or_mingw)\n        {\n#if SW_MODULE_ABI_VERSION > 29\n            if (!libtesseract.getBuildSettings().TargetOS.Android)\n#endif\n                libtesseract += \"pthread\"_slib;\n        }\n        if (libtesseract.getBuildSettings().TargetOS.Arch == ArchType::aarch64)\n        {\n            libtesseract += \"src/arch/dotproductneon.cpp\";\n        }\n\n        libtesseract.Public += \"HAVE_CONFIG_H\"_d;\n        libtesseract.Public += \"_SILENCE_STDEXT_HASH_DEPRECATION_WARNINGS=1\"_d;\n        libtesseract.Public += \"HAVE_LIBARCHIVE\"_d;\n\n        libtesseract.Public += \"org.sw.demo.danbloomberg.leptonica\"_dep;\n        libtesseract.Public += \"org.sw.demo.libarchive.libarchive\"_dep;\n\n        if (win_or_mingw)\n        {\n            libtesseract.Public += \"ws2_32.lib\"_slib;\n            libtesseract.Protected += \"NOMINMAX\"_def;\n        }\n\n        if (libtesseract.getCompilerType() == CompilerType::MSVC)\n            libtesseract.Protected.CompileOptions.push_back(\"-utf-8\");\n\n        libtesseract.Variables[\"TESSERACT_MAJOR_VERSION\"] = libtesseract.Variables[\"PACKAGE_MAJOR_VERSION\"];\n        libtesseract.Variables[\"TESSERACT_MINOR_VERSION\"] = libtesseract.Variables[\"PACKAGE_MINOR_VERSION\"];\n        libtesseract.Variables[\"TESSERACT_MICRO_VERSION\"] = libtesseract.Variables[\"PACKAGE_PATCH_VERSION\"];\n        libtesseract.Variables[\"TESSERACT_VERSION_STR\"] = \"master\";\n        libtesseract.configureFile(\"include/tesseract/version.h.in\", \"tesseract/version.h\");\n    }\n\n    //\n    auto &tesseract = tess.addExecutable(\"tesseract\");\n    {\n        tesseract += cppstd;\n        tesseract += \"src/tesseract.cpp\";\n        tesseract += libtesseract;\n    }\n\n    auto &svpaint = tess.addExecutable(\"svpaint\");\n    {\n        svpaint += cppstd;\n        svpaint += \"src/svpaint.cpp\";\n        svpaint += libtesseract;\n    }\n\n    auto &training = tess.addDirectory(\"training\");\n\n    //\n    auto &common_training = training.addLibrary(\"common_training\");\n    {\n        common_training += \"TESS_COMMON_TRAINING_API\"_api;\n        common_training += cppstd;\n        common_training += \"src/training/common/.*\"_rr;\n        common_training.Public += \"src/training/common\"_idir;\n        common_training.Public += libtesseract;\n    }\n\n    //\n    auto &unicharset_training = training.addLibrary(\"unicharset_training\");\n    {\n        unicharset_training += \"TESS_UNICHARSET_TRAINING_API\"_api;\n        unicharset_training += cppstd;\n        unicharset_training += \"src/training/unicharset/.*\"_rr;\n        unicharset_training.Public += \"src/training/unicharset\"_idir;\n        unicharset_training.Public += common_training;\n        unicharset_training.Public += \"org.sw.demo.unicode.icu.i18n\"_dep;\n\n        auto win_or_mingw =\n          unicharset_training.getBuildSettings().TargetOS.Type == OSType::Windows ||\n          unicharset_training.getBuildSettings().TargetOS.Type == OSType::Mingw\n          ;\n        if (!win_or_mingw)\n          unicharset_training += \"pthread\"_slib;\n    }\n\n    //\n#define ADD_EXE(n, ...)                     \\\n    auto &n = training.addExecutable(#n);   \\\n    n += cppstd;                            \\\n    n += \"src/training/\" #n \".*\"_rr;        \\\n    n.Public += __VA_ARGS__;                \\\n    n\n\n    ADD_EXE(ambiguous_words, common_training);\n    ADD_EXE(classifier_tester, common_training);\n    ADD_EXE(combine_lang_model, unicharset_training);\n    ADD_EXE(combine_tessdata, common_training);\n    ADD_EXE(cntraining, common_training);\n    ADD_EXE(dawg2wordlist, common_training);\n    ADD_EXE(mftraining, common_training) += \"src/training/mergenf.*\"_rr;\n    ADD_EXE(shapeclustering, common_training);\n    ADD_EXE(unicharset_extractor, unicharset_training);\n    ADD_EXE(wordlist2dawg, common_training);\n    ADD_EXE(lstmeval, unicharset_training);\n    ADD_EXE(lstmtraining, unicharset_training);\n    ADD_EXE(set_unicharset_properties, unicharset_training);\n    ADD_EXE(merge_unicharsets, common_training);\n\n    //\n    auto &pango_training = training.addLibrary(\"pango_training\");\n    {\n        pango_training += \"TESS_PANGO_TRAINING_API\"_api;\n        pango_training += cppstd;\n        pango_training += \"src/training/pango/.*\"_rr;\n        pango_training.Public += \"src/training/pango\"_idir;\n        pango_training.Public += unicharset_training;\n        pango_training.Public += \"org.sw.demo.gnome.pango.pangocairo\"_dep;\n    }\n\n    ADD_EXE(text2image, pango_training);\n    {\n        text2image += cppstd;\n        text2image +=\n            \"src/training/degradeimage.cpp\",\n            \"src/training/degradeimage.h\",\n            \"src/training/text2image.cpp\"\n            ;\n    }\n\n    if (!s.getExternalVariables()[\"with-tests\"])\n        return;\n\n    // tests\n    {\n        auto &test = tess.addDirectory(\"test\");\n        test.Scope = TargetScope::Test;\n\n        String skipped_tests_str;\n        if (s.getExternalVariables()[\"skip-tests\"])\n            skipped_tests_str = s.getExternalVariables()[\"skip-tests\"].getValue();\n        auto skipped_tests = split_string(skipped_tests_str, \",\");\n\n        auto add_test = [&test, &s, &cppstd, &libtesseract, &pango_training, &skipped_tests](const String &name) -> decltype(auto)\n        {\n            auto &t = test.addTarget<ExecutableTarget>(name);\n            t += cppstd;\n            t += FileRegex(\"unittest\", name + \"_test.*\", false);\n            t += \"unittest\"_idir;\n\n            t += \"SW_TESTING\"_def;\n\n            auto datadir = test.SourceDir / \"tessdata_unittest\";\n            if (s.getExternalVariables()[\"test-data-dir\"])\n                datadir = fs::current_path() / s.getExternalVariables()[\"test-data-dir\"].getValue();\n            t += Definition(\"TESSBIN_DIR=\\\"\" + \"\"s + \"\\\"\");\n\n            t += Definition(\"TESTING_DIR=\\\"\" + to_printable_string(normalize_path(test.SourceDir / \"test/testing\")) + \"\\\"\");\n            t += Definition(\"TESTDATA_DIR=\\\"\" + to_printable_string(normalize_path(test.SourceDir / \"test/testdata\")) + \"\\\"\");\n\n            t += Definition(\"LANGDATA_DIR=\\\"\" + to_printable_string(normalize_path(datadir / \"langdata_lstm\")) + \"\\\"\");\n            t += Definition(\"TESSDATA_DIR=\\\"\" + to_printable_string(normalize_path(datadir / \"tessdata\")) + \"\\\"\");\n            t += Definition(\"TESSDATA_BEST_DIR=\\\"\" + to_printable_string(normalize_path(datadir / \"tessdata_best\")) + \"\\\"\");\n\n            // we push all deps to all tests simplify things\n            t += pango_training;\n            t += \"org.sw.demo.google.googletest.gmock.main\"_dep;\n            t += \"org.sw.demo.google.googletest.gtest.main\"_dep;\n\n            if (t.getCompilerType() == CompilerType::MSVC)\n                t.CompileOptions.push_back(\"-utf-8\");\n\n            auto win_or_mingw =\n              t.getBuildSettings().TargetOS.Type == OSType::Windows ||\n              t.getBuildSettings().TargetOS.Type == OSType::Mingw\n              ;\n            if (!win_or_mingw)\n              t += \"pthread\"_slib;\n\n            auto tst = libtesseract.addTest(t, name);\n            for (auto &st : skipped_tests)\n            {\n                std::regex r(st);\n                if (std::regex_match(name, r))\n                {\n                    tst.skip(true);\n                    break;\n                }\n            }\n\n            return t;\n        };\n\n        Strings tests\n        {\n            \"apiexample\",\n            \"applybox\",\n            \"baseapi\",\n            \"baseapi_thread\",\n            \"bitvector\",\n            \"capiexample\",\n            \"capiexample_c\",\n            \"cleanapi\",\n            \"colpartition\",\n            \"commandlineflags\",\n            \"denorm\",\n            \"equationdetect\",\n            \"fileio\",\n            \"heap\",\n            \"imagedata\",\n            \"indexmapbidi\",\n            \"intfeaturemap\",\n            \"intsimdmatrix\",\n            \"lang_model\",\n            \"layout\",\n            \"ligature_table\",\n            \"linlsq\",\n            \"list\",\n            \"lstm_recode\",\n            \"lstm_squashed\",\n            \"lstm\",\n            \"lstmtrainer\",\n            \"loadlang\",\n            \"mastertrainer\",\n            \"matrix\",\n            \"networkio\",\n            \"normstrngs\",\n            \"nthitem\",\n            \"osd\",\n            \"pagesegmode\",\n            \"pango_font_info\",\n            \"paragraphs\",\n            \"params_model\",\n            \"progress\",\n            \"qrsequence\",\n            \"recodebeam\",\n            \"rect\",\n            \"resultiterator\",\n            \"scanutils\",\n            \"shapetable\",\n            \"stats\",\n            \"stringrenderer\",\n            \"stridemap\",\n            \"tablefind\",\n            \"tablerecog\",\n            \"tabvector\",\n            \"textlineprojection\",\n            \"tfile\",\n            \"unichar\",\n            \"unicharcompress\",\n            \"unicharset\",\n            \"validate_grapheme\",\n            \"validate_indic\",\n            \"validate_khmer\",\n            \"validate_myanmar\",\n            \"validator\",\n        };\n        for (auto t : tests)\n            add_test(t);\n        auto &dt = add_test(\"dawg\");\n        dt += Definition(\"wordlist2dawg_prog=\\\"\" + to_printable_string(normalize_path(wordlist2dawg.getOutputFile())) + \"\\\"\");\n        dt += Definition(\"dawg2wordlist_prog=\\\"\" + to_printable_string(normalize_path(dawg2wordlist.getOutputFile())) + \"\\\"\");\n\n        auto &tw = add_test(\"tatweel\");\n        tw += \"unittest/util/.*\"_rr;\n        tw += \"unittest/third_party/utf/.*\"_rr;\n    }\n}\n\nvoid check(Checker &c)\n{\n    auto &s = c.addSet(\"libtesseract\");\n    s.checkFunctionExists(\"getline\");\n    s.checkIncludeExists(\"dlfcn.h\");\n    s.checkIncludeExists(\"inttypes.h\");\n    s.checkIncludeExists(\"memory.h\");\n    s.checkIncludeExists(\"stdint.h\");\n    s.checkIncludeExists(\"stdlib.h\");\n    s.checkIncludeExists(\"string.h\");\n    s.checkIncludeExists(\"sys/stat.h\");\n    s.checkIncludeExists(\"sys/types.h\");\n    s.checkIncludeExists(\"tiffio.h\");\n    s.checkIncludeExists(\"unistd.h\");\n    s.checkTypeSize(\"long long int\");\n    s.checkTypeSize(\"size_t\");\n    s.checkTypeSize(\"void *\");\n    s.checkTypeSize(\"wchar_t\");\n    {\n        auto &c = s.checkSymbolExists(\"snprintf\");\n        c.Parameters.Includes.push_back(\"stdio.h\");\n    }\n}\n\n"
        },
        {
          "name": "tessdata",
          "type": "tree",
          "content": null
        },
        {
          "name": "tesseract.pc.cmake",
          "type": "blob",
          "size": 0.46,
          "content": "prefix=@CMAKE_INSTALL_PREFIX@\nexec_prefix=@CMAKE_INSTALL_PREFIX@\nlibdir=@CMAKE_INSTALL_FULL_LIBDIR@\nincludedir=@CMAKE_INSTALL_FULL_INCLUDEDIR@\n\nName: @tesseract_NAME@\nDescription: An OCR Engine that was developed at HP Labs (1985-1995) and Google (2006-2018).\nURL: https://github.com/tesseract-ocr/tesseract\nVersion: @tesseract_VERSION@\nRequires.private: lept\nLibs: -L${libdir} -l@tesseract_OUTPUT_NAME@ @libarchive_LIBS@ @libcurl_LIBS@\nLibs.private:\nCflags: -I${includedir}\n"
        },
        {
          "name": "tesseract.pc.in",
          "type": "blob",
          "size": 0.45,
          "content": "prefix=@prefix@\nexec_prefix=@exec_prefix@\nbindir=@bindir@\ndatarootdir = @datarootdir@\ndatadir=@datadir@\nlibdir=@libdir@\nincludedir=@includedir@\n\nName: @PACKAGE_NAME@\nDescription: An OCR Engine that was developed at HP Labs (1985-1995) and Google (2006-2018).\nURL: https://github.com/tesseract-ocr/tesseract\nVersion: @VERSION@\nRequires.private: lept\nLibs: -L${libdir} -ltesseract @libarchive_LIBS@ @libcurl_LIBS@\nLibs.private: -lpthread\nCflags: -I${includedir}\n"
        },
        {
          "name": "test",
          "type": "commit",
          "content": null
        },
        {
          "name": "unittest",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}