{
  "metadata": {
    "timestamp": 1736554962126,
    "page": 22,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ossu/computer-science",
      "stars": 174006,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.03,
          "content": ".idea\n*.swp\n*.swo\n.direnv/\n.envrc\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 10.66,
          "content": "# Change Log\n\n**Note**: The curriculum is currently undergoing review for v9. This consists largely of checking our recommendations against our [curricular guidelines](CURRICULAR_GUIDELINES.md), adding missing topics and cutting redundant or out of scope courses. As Requests for Comment in this effort are completed, changes are made immediately to the curriculum. When the overall review is complete we will notate the version bump to v9.\n\nAll notable changes to this project will be documented in this file.\nThis project adheres *in spirit* to [Semantic Versioning](http://semver.org/):\n- \"MAJOR\" updates correspond to changing the topics studied within a subject\n- \"MINOR\" updates correspond to changing courses without changing the topics\n- \"PATCH\" updates correspond to aesthetic and non-essential additions/removals or changing order of classes for better progression\n\n## [8.0.0] 2017-11-01\n### Added\n- extras/readings: \"The System Design Primer\"\n- extras/readings: \"Category Theory for Programmers: The Preface\"\n- extras/readings: \"Programming Languages: Application and Interpretation\"\n- extras/readings: \"Programming and Programming Languages\"\n- CONTRIBUTING: \"Learning Git\" section to the contributor guidelines page\n- Core Math: Added \"Essence of Linear Algebra\" as pre-requisite to \"Linear Algebra: Foundations to Frontiers\"\n\n### Updated\n- Moved \"Introduction to Mathematical Thinking\" to extras/courses\n- Moved \"Hack the Kernel\" (ops-class) from Advanced Systems to Core Systems\n- Core Systems: \"Operating Systems: Three Easy Pieces\" is no longer required, but is recommended as companion text to \"Hack the Kernel\"\n- Core Theory: Replaced Coursera with Lagunita as the host for Stanford Algorithms, since Coursera uses dark patterns to trick users into paying\n\n## [7.2.2] 2017-07-02\n### Added\n- \"Haskell Programming from First Principles\" book as a paid alternative to learn Haskell\n- \"Think Python\" to extras/readings\n- FAQ entries and links under relevant courses\n- \"Category Theory: A Gentle Introduction\" to extras/readings\n\n## [7.2.1] 2017-05-14\n### Updated\n- Networking course should take 8 weeks to complete\n- Fixed spelling error\n\n### Added\n- Introduction to Haskell course to [extras/courses](extras/courses.md)\n\n## [7.2.0] 2017-04-28\n### Added\n- Software Testing course\n- Link to Stanford Lagunita's Algorithms: Design and Analysis\n- Added link to the section on parametric equations and polar coordinates from MIT's Single Variable Calculus course in order to properly prepare students for Multivariable Calculus\n\n## [7.1.2] 2017-04-22\n### Updated\n- Add link to Mega Project List in the introduction of the Projects section\n\n## [7.1.1] 2017-04-11\n### Updated\n- Final touch to release\n\n## [7.1.0] 2017-04-10\n### Updated\n- Reverted reformat of programming languages course\n\n### Added\n- Reliable Distributed Algorithms courses\n- New Introduction to CS course\n\n## [7.0.2] 2017-03-30\n### Updated\n- Moved optional online learning courses to extras/courses in a new section\n- Moved alternate computer architecture course to extras/courses\n\n### Added\n- Scala specialization under Advanced applications\n\n### Removed\n- Removed all but one choice for required readings to make the curriculum simpler\n\n## [7.0.1] 2017-03-11\n### Updated\n- Fixed link to Bradfield's DIY computer science page\n\n### Added\n- Note under Calculus One with links to errata and course progression recommendations\n- Optional courses under extras:\n  - Strang's course on linear algebra\n  - Berkeley's Structure and Interpretation of Computer Programs\n- Optional readings under extras:\n  - Van Roy's advanced programming book\n  - P&H's computer architecture book\n  - Skiena's algorithms book\n  - Strang's linear algebra book\n  - Database Management Systems book\n  - Tarr's book on creating your own Domain-specific language\n  - Readings from various authors on distributed systems\n\n## [7.0] 2017-03-09\nComplete overhaul of program structure\n\n### Updated\n- Clarified contributor guidelines and moved them to separated file\n- Switched from many subjects to just four subjects with many topics\n- Consolidated free-books.md and paid-books.md into readings.md\n- Consolidated free-courses.md and paid-courses.md into courses.md\n- Replace old \"How to Code\" with new \"How to Code\" (Software Development MicroMasters)\n- Replace Princeton Algorithms (moved to [alternative courses](#extras/courses.md)) with Stanford Algorithms\n\n### Added\n- Indicate prerequisites for all courses\n- Requirements: subject/topic requirements and project requirements\n- Required readings on Haskell, Prolog, Operating Systems\n- Courses: Dan Grossman's Programming Languages\n- Courses: From Nand to Tetris\n- Elective course: Intro to Parallel Programming\n- Elective course: LAFF: Programming for Correctness\n- Elective course: Introduction to Mathematical Thinking\n- Elective courses: Electricity and Magnetism\n- Elective courses: MIT's Computation Structures\n- Elective course: Multivariable Calculus\n- Elective course: ops-class.org\n- Elective course: Automata Theory\n- Elective course: Introduction to Logic\n- Elective course: Computational Geometry\n- Elective course: Formal Concept Analysis\n- Elective course: Game Theory\n- Elective specializations:\n  - Robotics\n  - Data Mining\n  - Big Data\n  - Internet of Things\n  - Cloud Computing\n  - Full Stack Web Development\n  - Data Science\n- Pro specializations:\n  - Mastering Software Development in R\n  - Artificial Intelligence Engineer\n  - Machine Learning Engineer\n  - Cybersecurity\n  - Android Developer\n\n### Removed\n- Removed many dead links and obsolete courses\n- Removed per-course project requirement\n- Course: Object-Oriented Programming in Java\n- Course: Functional Programming in Scala\n- Course: Computer Architecture (but left as a footnote)\n- Course: Intro to Theoretical Computer Science\n- Course: Software Processes and Agile Practices\n- Course: Operating Systems & System Programming\n- Course: Introduction to Cyber Security\n- Course: Parallel Computer Architecture and Programming\n- Course: UX Design for Mobile Developers\n\n## [6.0] 2016-10-09\n### Updated\n- Put Calculus One before and together with Mathematics for Computer Science\n- Improve text in \"Order of the classes\"\n\n### Added\n- Create public Trello board with the new curriculum version\n- Create the section \"How to track and show your progress\" in \"How to use this guide\"\n- Add PROJECTS.md file\n- Copy all sections of curriculum to PROJECTS.md\n\n### Removed\n- Remove \"Next Goals\" section\n- Remove reference to OSSU web app\n\n## [5.1.0] 2016-08-20\nUpdate to latest version of Math for Computer Science:\n\n### Updated\n- Section: **Math (Discrete Math)**\n  - Mathematics for Computer Science\n\n## [5.0.0] 2016-08-20\nDue to removed course, we had the following updates:\n\n### Removed\n- Section: **Natural Language Processing**\n  - Natural Language Processing\n\n### Added\n- Section: **Natural Language Processing**\n  - Introduction to Natural Language Processing\n\n## [4.1.0] 2016-08-05\nDue to Coursera's platform changes, we had the following updates:\n### Fixed\n- Section: **Big Data**\n  - Introduction to Big Data\n\n## [4.0.0] 2016-07-30\nDue to Coursera's platform changes, we had the following updates:\n\n### Removed\n- Section: **Theory**\n  - Automata\n- Section: **Math (Linear Algebra)**\n  - Coding the Matrix: Linear Algebra through Computer Science Applications\n- Section: **Parallel Computing**\n  - Heterogeneous Parallel Programming\n- Section: **Natural Language Processing**\n  - Natural Language Processing\n\n### Fixed\n- Section: **Computer Networks**\n  - Computer Networks\n- Section: **Compilers**\n  - Compilers\n\n### Added\n- Section: **Theory**\n  - Intro to Theoretical Computer Science\n- Section: **Math (Linear Algebra)**\n  - Linear Algebra - Foundations to Frontiers\n- Section: **Parallel Computing**\n  - Parallel Computer Architecture and Programming\n- Section: **Natural Language Processing**\n  - Natural Language Processing\n\n## [3.0.0] 2016-05-04\n### Removed\n- Section: **Introduction to Computer Science**:\n\t- Introduction to Computer Science and Programming Using Python\n\t- From Nand to Tetris (Part 1)\n\n### Added\n- Section: **Introduction to Computer Science**:\n\t- Introduction to Computer Science - CS50\n\n## [2.0.1] 2016-04-04\n### Fixed\n- Now students should enroll through our [web app](https://ossu.firebaseapp.com).\n\n## [2.0.0] 2016-03-17\n### Fixed\n- Program Design section course's names and links\n\n### Removed\n- **Introduction to Computer Science**:\n\t- Introduction to Computer Science\n\t- Introduction to Computational Thinking and Data Science\n- **Algorithms**\n\t- Analysis of Algorithms\n- **Programming Paradigms**\n\t- Principles of Reactive Programming\n- **Math (Calculus)**\n\t- Multivariable Calculus\n- **Software Architecture**:\n\t- Web Application Architectures\n- **Software Engineering**:\n\t- Agile Development Using Ruby on Rails - Basics\n\t- Agile Development Using Ruby on Rails - Advanced\n\t- Startup Engineering\n- **Computer Architecture**:\n\t- The Hardware/Software Interface\n- **Operating Systems**:\n\t- Operating System Engineering\n- **Computer Networks**:\n\t- Introduction to Computer Networking\n- **Cryptography**:\n\t- Applied Cryptography\n\n**ps**: These removed courses are now in the [extras](https://github.com/ossu/computer-science/tree/master/extras) section.\n\n## [1.3.12] 2016-03-17\n### Added\n- How to collaborate: send new links to the extras section\n\n## [1.3.11] 2016-03-06\n### Fixed\n- Nand to Tetris: change name and url\n- UC Berkeley Agile development: change name and url\n- Direct links to specializations\n\n## [1.3.10] 2016-03-06\n### Fixed\n- Link from Systematic Program Design Part 2 course\n\n## [1.3.9] 2015-11-09\n### Fixed\n- Link for the correct Natural Language Processing course\n\n## [1.3.8] 2015-11-07\n### Added\n- Add \"Project Suggestions\" section with more references\n\n## [1.3.7] 2015-11-01\n### Removed\n- Removed project.md file, moved to **help** repo\n\n## [1.3.6] 2015-10-22\n### Added\n- Latest version of CS 162, Operating Systems and System Programming\n\n## [1.2.6] 2015-10-19\n### Added\n- Badge/Link to the Awesome list\n\n## [1.2.5] 2015-10-16\n### Fixed\n- Fix name of the section and add a hyperlink to it.\n\n## [1.2.4] 2015-10-14\n### Removed\n- Removed citation about public commitment\n\n## [1.2.3] 2015-10-12\n### Changed\n- Updated the prerequisite section for more clarity\n\n## [1.2.2] 2015-10-12\n### Fixed\n- New link to issue intended for students' enrollment\n\n## [1.2.1] 2015-10-11\n### Added\n- Article Git - the simple guide to the prerequisite section\n\n##[1.1.1] 2015-10-11\n### Fixed\n- Fix typos\n  - As MOOC is a \"Massive Open Online Course\" MOOC course is redundant\n  - Elaborated on \"real problem\"\n  - Fixed a few small grammatical and wording errors\n\n## [1.1.0] 2015-10-08\n### Added\n- Motivation & Preparation section (optional resources)\n  - Article: MIT Challenge\n  - Course: Learning How to Learn\n\n## [1.0.0] 2015-10-08\n\nRelease of the first **complete** version of the Computer Science curriculum\n"
        },
        {
          "name": "CNAME",
          "type": "blob",
          "size": 0.01,
          "content": "cs.ossu.dev"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.25,
          "content": "# Changing the curriculum\nOSSU thrives because of the changes made by our many contributors. Read on for details on how to help every student that follows you.\n## Non-substantive changes\nIf you have non-substantive updates to make to the curriculum, such as a course's URL having been moved, spelling/syntax errors, etc., please send a [pull request](https://www.freecodecamp.org/news/how-to-make-your-first-pull-request-on-github-3/) to fix any mistakes that you have found.\n## Substantive changes\nIf you have specific and substantive criticisms of the curriculum, i.e. problems related to the progression/content of courses it would be appropriate to [open an issue](https://help.github.com/articles/creating-an-issue/). While it is acceptable to point out problems, all successful changes naturally require a plan for fixing the problem.\nOSSU’s curricular guidelines are [here](https://github.com/ossu/computer-science/blob/master/CURRICULAR_GUIDELINES.md). Successful critiques of the curriculum will point out ways that OSSU is failing to uphold these guidelines. Examples are:\n\n* OSSU lists a course as required when the course topics are elective in the curricular guide.\n* OSSU not having a course to cover required topics from the curricular guide.\n* OSSU lists multiple courses that cover the same topics when fewer courses could suffice.\n* OSSU recommends a course to teach a topic, but there exists a higher quality course that covers the same material.\n## Other ways to contribute\n### Responding to Issues\nIssues require more than just users to suggest them. Issues require active community members to read and respond to proposals. Even adding simple [emoji reactions](https://github.blog/2016-03-10-add-reactions-to-pull-requests-issues-and-comments/) can help the community.\n### Engaging with other students\nLearning is enhanced by engaged peers. You can be that peer for someone new to OSSU. When you see a new person posting in Gitter, ask them a question about themselves. When you see a cohort starting at _almost_ the right time, join in. Doing so will make OSSU a stronger program for everyone, including you.\n# Personal Customization\nIf you want to customize the curriculum for yourself, you are encouraged to [fork this project](https://help.github.com/articles/fork-a-repo/)!\n"
        },
        {
          "name": "CURRICULAR_GUIDELINES.md",
          "type": "blob",
          "size": 1.75,
          "content": "# Curricular Guidelines\n\n[Curriculum Guidelines for Undergraduate Programs in Computer Science](https://www.acm.org/binaries/content/assets/education/cs2013_web_final.pdf)\n\nOur curricular guidelines are from the 2013 report of the Association for Computing Machinery and the Institute of Electrical and Electronics Engineers. This report is the most recent in a series of such reports outlining the expectations of undergraduate degrees in Computer Science. The report outlines critical Knowledge Areas and topics within them. It drills down further to outline specific learning goals, going so far as to outline what concepts a student must be able to explain vs concepts a student must be able to demonstrate using in practice.\n\nThe CS2023 is currently under development. Track its progress to release [here](https://csed.acm.org/).\n\n## Organizations publishing:\n\n### The Association for Computing Machinery\n\nThe Association for Computing Machinery (ACM) is an international learned society for computing. It was founded in 1947, and is the world's largest scientific and educational computing society. The ACM is a non-profit professional membership group, with more than 100,000 members as of 2011.\n\n### Institute of Electrical and Electronics Engineers\n\nThe Institute of Electrical and Electronics Engineers (IEEE) is a professional association formed in 1963 from the amalgamation of the American Institute of Electrical Engineers and the Institute of Radio Engineers. As of 2018, it is the world's largest association of technical professionals with more than 423,000 members in over 160 countries around the world. Its objectives are the educational and technical advancement of electrical and electronic engineering, telecommunications, computer engineering and allied disciplines.\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 9.85,
          "content": "# Frequently Asked Questions\n\nThis page answers some questions that we frequently receive about the curriculum.\nIf you have questions that aren't answered here, try asking through one of our [community channels](README.md#community).\nIf it seems important enough or we get asked that question a lot, we will probably add it here.\n\nAlternatively, you could [contribute](#CONTRIBUTING.md) an answer yourself.\n\n## Contents\n\n- [Does OSSU offer a degree?](#does-ossu-offer-a-degree)\n- [How can I review the math prerequisites?](#how-can-i-review-the-math-prerequisites)\n- [What is a good course to learn a language (C++, Rust, Java, etc)?](#what-is-a-good-course-to-learn-a-particular-language)\n- [Why is the Firebase OSSU app different/broken?](#why-is-the-firebase-ossu-app-different-or-broken)\n- [In what order should I take the courses?](#in-what-order-should-i-take-the-courses)\n- [Does every resource in the main curriculum have to be free?](#does-every-resource-in-the-main-curriculum-have-to-be-free)\n- [Are Coursera courses free to access?](#are-coursera-courses-free-to-access)\n- [Is it necessary to purchase the Verified Upgrade for edX courses?](#is-it-necessary-to-purchase-the-verified-upgrade-for-edx-courses)\n- [What are the alt links?](#what-are-the-alt-links)\n- [Why doesn't the curriculum cover/ignore topic X?](#why-doesnt-the-curriculum-coverignore-topic-x)\n- [Why is the curriculum missing some pre-requisites?](#why-is-the-curriculum-missing-some-pre-requisites)\n- [Why require experience with a sizable project before the Software Engineering courses?](#why-require-experience-with-a-sizable-project-before-the-Software-Engineering-courses)\n- [How can I find a course on a particular subject?](#how-can-I-find-a-course-on-a-particular-subject)\n\n## Questions\n\n### Does OSSU offer a degree?\nNo. OSSU creates guides to resources that will empower you to learn the curriculum of an undergraduate degree. Individuals who used to be involved in OSSU may be working with other organizations to offer degrees, but Open Source Society University is not involved in those efforts.\n\n### How can I review the math prerequisites?\nMany OSSU students choose to review math topics that they have not studied recently.\nOSSU recommends students use Khan Academy for such a review.\nBelow are links to topic assessments.\nAfter taking an assessment, you should have a clear idea what topics to study, and resources on Khan Academy to use.\n\n- [Arithmetics](https://www.khanacademy.org/math/arithmetic#arithmetic-subject-challenge)\n- [Basic Geometry](https://www.khanacademy.org/math/basic-geo#basic-geo-subject-challenge)\n- [Pre-algebra](https://www.khanacademy.org/math/pre-algebra#pre-algebra-subject-challenge)\n- [Integrated Math 1](https://www.khanacademy.org/math/math1#math1-subject-challenge)\n- [Integrated Math 2](https://www.khanacademy.org/math/math2#math2-subject-challenge)\n- [Integrated Math 3](https://www.khanacademy.org/math/math3#math3-subject-challenge)\n\n(Math 1, 2, 3 covers all of algebra, pre-calculus, high school geometry, trig, stats. It interleaves the order of these topics.)\n\n### What is a good course to learn a particular language?\nOSSU focuses on finding the best courses to learn computer science topics, and isn’t focused on finding language specific courses. If you are looking to learn a particular language or framework there are two great resources to check.\n1. [Hackr.io](https://hackr.io/) allows users to submit and upvote learning resources for topics such as Python or the Java Spring Framework.\n2. Most languages have a community on reddit. When you find the community’s page, check to see if there is a wiki or sidebar with resources. For example, see [/r/python](https://old.reddit.com/r/Python). Note that the sidebar content can be different depending on whether you use www.reddit.com or old.reddit.com.\n\n### Why is the Firebase OSSU app different or broken?\n\nThe OSSU curriculum and ecosystem have been collaboratively built by many individuals. The Firebase app was one such contribution. When it was written, it was with the intention of helping future OSSU students.\n\nUnfortunately, the app has not been updated in many years. It does not reflect updates to the curriculum, it contains links to courses that no longer exist, and it has known bugs that prevent students from logging in.\n\nIt is our hope that the creators of the Firebase app can bring the app up to date. Until that time, the firebase app should be considered a deprecated product that is no longer supported.\n\n### In what order should I take the courses?\n\nYou have a few different options:\n- You can progress linearly from top to bottom of the page.\n- You can progress linearly through each individual section, but studying different sections in parallel.\n- You can design your own custom progression using the pre-requisites to guide you.\n\nWe have designed the curriculum to work for any of the above three styles.\n\n### Does every resource in the main curriculum have to be free?\n\nYes, that is a core goal of OSSU.\n\nAt the same time, we recognize that education is a resource that requires payment to instructors to make it sustainable in the long term.\nTherefore, we respect the business model of websites like edX, which make their materials free but with some paid add-ons, like official certificates or extra interaction with course instructors.\n\nSo we only require that the *learning materials* of a resource be free to access, not that every possible add-on be free.\nIt would be ideal if graded assignments were always free. In the event that free assessments are not available OSSU looks for alternate assessments to pair with a course.\n\n### Are Coursera courses free to access?\n\nSome courses that require payment to access probably do exist on Coursera, but we don't put those on our curriculum.\nAll Coursera courses that we put on the curriculum must, at minimum, be **free to audit**.\nFor some courses, all course features are available for free;\nfor others (especially those that are part of a specialization), you may only be able to access the lecture videos.\n(If you find the policies have changed for any courses on our curriculum, please tell us!)\n\nUnfortunately, for some courses, Coursera's interface is [very aggressive](https://darkpatterns.org/) about convincing you that you have to pay.\n\nYou may see something like this on the course page:\n\n<img src=\"http://i.imgur.com/MxOcYZv.png\" alt=\"Free Trial\" style=\"width: 400px;\"/>\n\nWhen attempting to enroll in such a course:\n- Click the blue \"Enroll\" or \"Enroll Now\" button.\n- A pop-up will appear.\n- **Do not click** \"Start Free Trial\", unless you do want to pay.\n- Find the text that says \"Audit this course\" at the bottom.\n- Click **Audit**.\n\n![Audit this course](https://user-images.githubusercontent.com/3349406/27321369-95ca12e6-55cc-11e7-9b5c-f8fedd8fd643.png)\n\n### Is it necessary to purchase the Verified Upgrade for edX courses?\n\nIf you just want to watch the videos, it is never necessary for any edX course on our curriculum. Note that a number of edX courses only allow students to audit a course for the estimated number of weeks it takes to complete. Students should not begin a course until they are prepared to focus and complete the course.\n\n### What are the alt links?\n\nSometimes a course is on multiple platforms that are reasonably similar in quality so we have an alt or two linked in case the main one isn't being offered at the time or you prefer the other one. Both are just as good, go with whichever you prefer or whichever is available when you want to take the course.\n\n### Why doesn't the curriculum cover/ignore topic X?\n\nYou can read more about our curricular guidelines and the qualifications of the guidelines' authors [here](CURRICULAR_GUIDELINES.md). If you find a topic that is required by our guidelines and is not included in the curriculum, we should make a change! Read more about [contributing to a change](CONTRIBUTING.md).\n\n### Why is the curriculum missing some pre-requisites?\n\nThe curriculum assumes two things:\n- You are reasonably fluent in English.\n- You have gotten through a standard high school curriculum that included physics and pre-calculus.\n\nWithout these assumptions, the curriculum would be out of control with trying to fill in your knowledge gaps.\nFor those who want to study math pre-requisites, read more [here](#how-can-i-review-the-math-prerequisites)\n\nOf course, if you find that the curriculum is missing a pre-requisite for a course that isn't part of a normal high school curriculum, please let us know!\n\n### Why require experience with a sizable project before the Software Engineering courses?\nSoftware engineering tries to solve the problem of dealing with large programs. Building a sizable program before taking the SE courses will help you understand what SE is trying to solve. We recommend the Jack-to-VM-code compiler project from the nand2tetris course because it's the first project in the curriculum that is complex enough to see value in a SE course. That said, any sizable project will do and can come from outside of the OSSU curriculum. The idea is that you've done some large enough project where the pieces started to feel unmanageable. This experience will expose pain points and lead to a better understanding of SE.\n\n### How can I find a course on a particular subject?\nAfter completing Core CS, learners are ready to pursue computer science\ntopics of their own interest. How can one find a course on a given topic?\nFor MOOCs an excellent resource is [Class Central](https://www.classcentral.com/).\nFor materials from university courses that are online (but not organized)\ninto a MOOC, [awesome-courses](https://github.com/prakhar1989/awesome-courses) and\n[cs-video-courses](https://github.com/Developer-Y/cs-video-courses)\nare good resources. For textbooks, [Goodreads](https://www.goodreads.com/genres/computer-science)\nis a great platform for reader ratings and reviews.\nFor learning a particular programming language or framework,\n[see this question](#what-is-a-good-course-to-learn-a-particular-language).\n"
        },
        {
          "name": "HELP.md",
          "type": "blob",
          "size": 1.2,
          "content": "# Getting help\n## Check the FAQ!\nPlease check our [Frequently Asked Questions](FAQ.md) to see if your question has been addressed.\n## Ask in the chat room\n[![Discord](https://img.shields.io/discord/744385009028431943.svg?label=&logo=discord&logoColor=ffffff&color=7389D8&labelColor=6A7EC2)](https://discord.gg/5pUhfpX) Join the OSSU [Discord server](https://discord.gg/5pUhfpX)! Discord is an online chat service, similar to Slack or IRC where you can chat with other students and get help.\n### Specific problems\nIf you need help successfully completing the content of a course or are having general technical difficulties, first reach out to the resources provided by the course (e.g. the course forum on Coursera, edX, etc). If you need additional help after that, post in Discord. **In your post, mention what steps you have already taken to try and solve the problem**.\n### General problems\nIf you have general problems with the program not specific to any course, such as preferring textbook-style learning over MOOCs, Discord is a good place to reach out to people who may have great suggestions. You might form a working group that makes the next improvement to OSSU CS! Read more about contributing [here](CONTRIBUTING.md).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.08,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015-2023 Open Source Society University\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 29.26,
          "content": "<div align=\"center\" style=\"text-align: center\">\n<img src=\"http://i.imgur.com/kYYCXtC.png\" alt=\"Open Source Society logo\"/>\n<h3>Open Source Society University</h3>\n<p>\n  Path to a free self-taught education in Computer Science!\n</p>\n<p>\n  <a href=\"https://github.com/sindresorhus/awesome\">\n    <img alt=\"Awesome\" src=\"https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg\"\n  ></a>\n  <a href=\"https://github.com/ossu/computer-science\">\n    <img alt=\"Open Source Society University - Computer Science\" src=\"https://img.shields.io/badge/OSSU-computer--science-blue.svg\"\n  ></a>\n</p>\n</div>\n\n# Contents\n\n- [Summary](#summary)\n- [Community](#community)\n- [Curriculum](#curriculum)\n- [Code of conduct](#code-of-conduct)\n- [Team](#team)\n\n# Summary\n\nThe OSSU curriculum is a **complete education in computer science** using online materials.\nIt's not merely for career training or professional development.\nIt's for those who want a proper, *well-rounded* grounding in concepts fundamental to all computing disciplines,\nand for those who have the discipline, will, and (most importantly!) good habits to obtain this education largely on their own,\nbut with support from a worldwide community of fellow learners.\n\nIt is designed according to the degree requirements of undergraduate computer science majors, minus general education (non-CS) requirements,\nas it is assumed most of the people following this curriculum are already educated outside the field of CS.\nThe courses themselves are among the very best in the world, often coming from Harvard, Princeton, MIT, etc.,\nbut specifically chosen to meet the following criteria.\n\n**Courses must**:\n- Be open for enrollment\n- Run regularly (ideally in self-paced format, otherwise running multiple times per year)\n- Be of generally high quality in teaching materials and pedagogical principles\n- Match the curricular standards of the [CS 2013](CURRICULAR_GUIDELINES.md): Curriculum Guidelines for Undergraduate Degree Programs in Computer Science\n\nWhen no course meets the above criteria, the coursework is supplemented with a book.\nWhen there are courses or books that don't fit into the curriculum but are otherwise of high quality,\nthey belong in [extras/courses](extras/courses.md) or [extras/readings](extras/readings.md).\n\n**Organization**. The curriculum is designed as follows:\n- *Intro CS*: for students to try out CS and see if it's right for them\n- *Core CS*: corresponds roughly to the first three years of a computer science curriculum, taking classes that all majors would be required to take\n- *Advanced CS*: corresponds roughly to the final year of a computer science curriculum, taking electives according to the student's interests\n- *Final Project*: a project for students to validate, consolidate, and display their knowledge, to be evaluated by their peers worldwide\n\n**Duration**. It is possible to finish within about 2 years if you plan carefully and devote roughly 20 hours/week to your studies. Learners can use [this spreadsheet\n](https://docs.google.com/spreadsheets/d/1bkUU90y4rKYQHwY5AR2iX6iiPTrPEsYs75GkCAkrgm4/copy) to estimate their end date. Make a copy and input your start date and expected hours per week in the `Timeline` sheet. As you work through courses you can enter your actual course completion dates in the `Curriculum Data` sheet and get updated completion estimates.\n  \n> **Warning:** While the spreadsheet is a useful tool to estimate the time you need to complete this curriculum, it may not be up-to-date with the curriculum. Use the spreadsheet just to estimate the time you need. Use the [OSSU CS website](https://cs.ossu.dev) or [the repo](https://github.com/ossu/computer-science) to see what courses to do.\n\n**Cost**. All or nearly all course material is available for free. However, some courses may charge money for assignments/tests/projects to be graded.\nNote that both [Coursera](https://www.coursera.support/s/article/209819033-Apply-for-Financial-Aid-or-a-Scholarship?language=en_US) and [edX](https://courses.edx.org/financial-assistance/) offer financial aid.\n\nDecide how much or how little to spend based on your own time and budget;\njust remember that you can't purchase success!\n\n**Process**. Students can work through the curriculum alone or in groups, in order or out of order.\n- We recommend doing all courses in Core CS, only skipping a course when you are certain that you've already learned the material previously.\n- For simplicity, we recommend working through courses (especially Core CS) in order from top to bottom. Some students choose to study multiple courses at a time in order to vary the material they are working on is a day/week. A popular option is to take the math courses in parallel with the introductory courses. Course prerequisites are listed to help you determine if you are prepared for a given course.\n- Courses in Advanced CS are electives. Choose one subject (e.g. Advanced programming) you want to become an expert in and take all the courses under that heading. You can also create your own custom subject; the Discord community may provide feedback on your planned subject.\n\n**Content policy**. If you plan on showing off some of your coursework publicly, you must share only files that you are allowed to.\n*Respect the code of conduct* that you signed in the beginning of each course!\n\n**[How to contribute](CONTRIBUTING.md)**\n\n**[Getting help](HELP.md)** (Details about our FAQ and chatroom)\n\n# Community\n\n- We have a Discord server! [![Discord](https://img.shields.io/discord/744385009028431943.svg?label=&logo=discord&logoColor=ffffff&color=7389D8&labelColor=6A7EC2)](https://discord.gg/wuytwK5s9h) This should be your first stop to talk with other OSSU students. Why don't you introduce yourself right now? [Join the OSSU Discord](https://discord.gg/wuytwK5s9h)\n- You can also interact through GitHub issues. If there is a problem with a course, or a change needs to be made to the curriculum, this is the place to start the conversation. Read more [here](CONTRIBUTING.md).\n- Add **Open Source Society University** to your [Linkedin](https://www.linkedin.com/school/11272443/) profile!\n\n> **Warning:** There are a few third-party/deprecated/outdated material that you might find when searching for OSSU. We recommend you to ignore them, and only use the [OSSU CS website](https://cs.ossu.dev) or [OSSU CS Github Repo](https://github.com/ossu/computer-science). Some known outdated materials are:\n>  - An unmaintained and deprecated firebase app. Read more in the [FAQ](./FAQ.md#why-is-the-firebase-ossu-app-different-or-broken).\n>  - An unmaintained and deprecated trello board\n>  - Third-party notion templates\n\n# Curriculum\n\n**Curriculum version**: `8.0.0` (see [CHANGELOG](CHANGELOG.md))\n\n- [Prerequisites](#prerequisites)\n- [Intro CS](#intro-cs)\n- [Core CS](#core-cs)\n  - [Core programming](#core-programming)\n  - [Core math](#core-math)\n  - [CS Tools](#cs-tools)\n  - [Core systems](#core-systems)\n  - [Core theory](#core-theory)\n  - [Core security](#core-security)\n  - [Core applications](#core-applications)\n  - [Core ethics](#core-ethics)\n- [Advanced CS](#advanced-cs)\n  - [Advanced programming](#advanced-programming)\n  - [Advanced systems](#advanced-systems)\n  - [Advanced theory](#advanced-theory)\n  - [Advanced information security](#advanced-information-security)\n  - [Advanced math](#advanced-math)\n- [Final project](#final-project)\n\n---\n\n## Prerequisites\n\n- [Core CS](#core-cs) assumes the student has already taken [high school math](https://github.com/ossu/computer-science/blob/master/FAQ.md#how-can-i-review-the-math-prerequisites), including algebra, geometry, and pre-calculus.\n- [Advanced CS](#advanced-cs) assumes the student has already taken the entirety of Core CS\nand is knowledgeable enough now to decide which electives to take.\n- Note that [Advanced systems](#advanced-systems) assumes the student has taken a basic physics course (e.g. AP Physics in high school).\n\n## Intro CS\n\nThis course will introduce you to the world of computer science and programming. This course gives you a flavor of the material to come. If you finish the course wanting more, Computer Science is likely for you!\n\n**Topics covered**:\n`computation`\n`imperative programming`\n`basic data structures and algorithms`\n`and more`\n\nCourses | Duration | Effort | Prerequisites | Discussion\n:-- | :--: | :--: | :--: | :--:\n[Introduction to Computer Science and Programming using Python](coursepages/intro-cs/README.md) | 14 weeks | 6-10 hours/week | [high school algebra](https://www.khanacademy.org/math/algebra-home) | [chat](https://discord.gg/jvchSm9)\n\n## Core CS\n\nAll coursework under Core CS is **required**, unless otherwise indicated.\n\n### Core programming\n**Topics covered**:\n`functional programming`\n`design for testing`\n`program requirements`\n`common design patterns`\n`unit testing`\n`object-oriented design`\n`static typing`\n`dynamic typing`\n`ML-family languages (via Standard ML)`\n`Lisp-family languages (via Racket)`\n`Ruby`\n`and more`\n\nCourses | Duration | Effort | Prerequisites | Discussion\n:-- | :--: | :--: | :--: | :--:\n[Systematic Program Design](coursepages/spd/README.md) | 13 weeks | 8-10 hours/week | none | chat: [part 1](https://discord.gg/RfqAmGJ) / [part 2](https://discord.gg/kczJzpm)\n[Class-based Program Design](https://course.ccs.neu.edu/cs2510sp22/index.html) | 13 weeks | 5-10 hours/week | Systematic Program Design, High School Math | [chat](https://discord.com/channels/744385009028431943/891411727294562314)\n[Programming Languages, Part A](https://www.coursera.org/learn/programming-languages) | 5 weeks | 4-8 hours/week | Systematic Program Design ([Hear instructor](https://www.coursera.org/lecture/programming-languages/recommended-background-k1yuh)) | [chat](https://discord.gg/8BkJtXN)\n[Programming Languages, Part B](https://www.coursera.org/learn/programming-languages-part-b) | 3 weeks | 4-8 hours/week | Programming Languages, Part A | [chat](https://discord.gg/EeA7VR9)\n[Programming Languages, Part C](https://www.coursera.org/learn/programming-languages-part-c) | 3 weeks | 4-8 hours/week | Programming Languages, Part B | [chat](https://discord.gg/8EZUVbA)\n[Object-Oriented Design](https://course.ccs.neu.edu/cs3500f19/) | 13 weeks | 5-10 hours/week | Class Based Program Design | [chat](https://discord.com/channels/744385009028431943/891412022120579103)\n[Software Architecture](https://www.coursera.org/learn/software-architecture) | 4 weeks | 2-5 hours/week | Object Oriented Design | [chat](https://discord.com/channels/744385009028431943/891412169638432788)\n\n### Core math\nDiscrete math (Math for CS) is a prerequisite and closely related to the study of algorithms and data structures. Calculus both prepares students for discrete math and helps students develop mathematical maturity.\n\n**Topics covered**:\n`discrete mathematics`\n`mathematical proofs`\n`basic statistics`\n`O-notation`\n`discrete probability`\n`and more`\n\nCourses | Duration | Effort | Notes | Prerequisites | Discussion\n:-- | :--: | :--: | :--: | :--: | :--:\n[Calculus 1A: Differentiation](https://openlearninglibrary.mit.edu/courses/course-v1:MITx+18.01.1x+2T2019/about) ([alternative](https://ocw.mit.edu/courses/mathematics/18-01sc-single-variable-calculus-fall-2010/index.htm)) | 13 weeks | 6-10 hours/week | The alternate covers this and the following 2 courses | [high school math](FAQ.md#how-can-i-review-the-math-prerequisites) | [chat](https://discord.gg/mPCt45F)\n[Calculus 1B: Integration](https://openlearninglibrary.mit.edu/courses/course-v1:MITx+18.01.2x+3T2019/about) | 13 weeks | 5-10 hours/week | - | Calculus 1A | [chat](https://discord.gg/sddAsZg)\n[Calculus 1C: Coordinate Systems & Infinite Series](https://openlearninglibrary.mit.edu/courses/course-v1:MITx+18.01.3x+1T2020/about) | 6 weeks | 5-10 hours/week | - | Calculus 1B | [chat](https://discord.gg/FNEcNNq)\n[Mathematics for Computer Science](https://openlearninglibrary.mit.edu/courses/course-v1:OCW+6.042J+2T2019/about) ([alternative](https://ocw.mit.edu/courses/6-042j-mathematics-for-computer-science-fall-2010/)) | 13 weeks | 5 hours/week | [2015/2019 solutions](https://github.com/spamegg1/Math-for-CS-solutions) [2010 solutions](https://github.com/frevib/mit-cs-math-6042-fall-2010-problems) [2005 solutions](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-042j-mathematics-for-computer-science-fall-2005/assignments/). | Calculus 1C | [chat](https://discord.gg/EuTzNbF)\n\n\n### CS Tools\nUnderstanding theory is important, but you will also be expected to create programs. There are a number of tools that are widely used to make that process easier. Learn them now to ease your future work writing programs.\n\n**Topics covered**:\n`terminals and shell scripting`\n`vim`\n`command line environments`\n`version control`\n`and more`\n\nCourses | Duration | Effort | Prerequisites | Discussion\n:-- | :--: | :--: | :--: | :--:\n[The Missing Semester of Your CS Education](https://missing.csail.mit.edu/) | 2 weeks | 12 hours/week | - | [chat](https://discord.gg/5FvKycS)\n\n### Core systems\n\n**Topics covered**:\n`procedural programming`\n`manual memory management`\n`boolean algebra`\n`gate logic`\n`memory`\n`computer architecture`\n`assembly`\n`machine language`\n`virtual machines`\n`high-level languages`\n`compilers`\n`operating systems`\n`network protocols`\n`and more`\n\nCourses | Duration | Effort | Additional Text / Assignments| Prerequisites | Discussion\n:-- | :--: | :--: | :--: | :--: | :--:\n[Build a Modern Computer from First Principles: From Nand to Tetris](https://www.coursera.org/learn/build-a-computer) ([alternative](https://www.nand2tetris.org/)) | 6 weeks | 7-13 hours/week | - | C-like programming language | [chat](https://discord.gg/vxB2DRV)\n[Build a Modern Computer from First Principles: Nand to Tetris Part II ](https://www.coursera.org/learn/nand2tetris2) | 6 weeks | 12-18 hours/week | - | one of [these programming languages](https://user-images.githubusercontent.com/2046800/35426340-f6ce6358-026a-11e8-8bbb-4e95ac36b1d7.png), From Nand to Tetris Part I | [chat](https://discord.gg/AsUXcPu)\n[Operating Systems: Three Easy Pieces](coursepages/ostep/README.md) | 10-12 weeks | 6-10 hours/week | - | Nand to Tetris Part II | [chat](https://discord.gg/wZNgpep)\n[Computer Networking: a Top-Down Approach](http://gaia.cs.umass.edu/kurose_ross/online_lectures.htm)| 8 weeks | 4–12 hours/week | [Wireshark Labs](http://gaia.cs.umass.edu/kurose_ross/wireshark.php) | algebra, probability, basic CS | [chat](https://discord.gg/MJ9YXyV)\n\n### Core theory\n\n**Topics covered**:\n`divide and conquer`\n`sorting and searching`\n`randomized algorithms`\n`graph search`\n`shortest paths`\n`data structures`\n`greedy algorithms`\n`minimum spanning trees`\n`dynamic programming`\n`NP-completeness`\n`and more`\n\nCourses | Duration | Effort | Prerequisites | Discussion\n:-- | :--: | :--: | :--: | :--:\n[Divide and Conquer, Sorting and Searching, and Randomized Algorithms](https://www.coursera.org/learn/algorithms-divide-conquer) | 4 weeks | 4-8 hours/week | any programming language, Mathematics for Computer Science | [chat](https://discord.gg/mKRS7tY)\n[Graph Search, Shortest Paths, and Data Structures](https://www.coursera.org/learn/algorithms-graphs-data-structures) | 4 weeks | 4-8 hours/week | Divide and Conquer, Sorting and Searching, and Randomized Algorithms | [chat](https://discord.gg/Qstqe4t)\n[Greedy Algorithms, Minimum Spanning Trees, and Dynamic Programming](https://www.coursera.org/learn/algorithms-greedy) | 4 weeks | 4-8 hours/week | Graph Search, Shortest Paths, and Data Structures | [chat](https://discord.gg/dWVvjuz)\n[Shortest Paths Revisited, NP-Complete Problems and What To Do About Them](https://www.coursera.org/learn/algorithms-npcomplete) | 4 weeks | 4-8 hours/week | Greedy Algorithms, Minimum Spanning Trees, and Dynamic Programming | [chat](https://discord.gg/dYuY78u)\n\n### Core security\n**Topics covered**\n`Confidentiality, Integrity, Availability`\n`Secure Design`\n`Defensive Programming`\n`Threats and Attacks`\n`Network Security`\n`Cryptography`\n`and more`\n\nCourses | Duration | Effort | Prerequisites | Discussion\n:-- | :--: | :--: | :--: | :--:\n[Cybersecurity Fundamentals](https://www.edx.org/course/cybersecurity-fundamentals) | 8 weeks | 10-12 hours/week | - | [chat](https://discord.gg/XdY3AwTFK4)\n[Principles of Secure Coding](https://www.coursera.org/learn/secure-coding-principles)| 4 weeks | 4 hours/week | - | [chat](https://discord.gg/5gMdeSK)\n[Identifying Security Vulnerabilities](https://www.coursera.org/learn/identifying-security-vulnerabilities) | 4 weeks | 4 hours/week | - | [chat](https://discord.gg/V78MjUS)\n\nChoose **one** of the following:\n\nCourses | Duration | Effort | Prerequisites | Discussion\n:-- | :--: | :--: | :--: | :--:\n[Identifying Security Vulnerabilities in C/C++Programming](https://www.coursera.org/learn/identifying-security-vulnerabilities-c-programming) | 4 weeks | 5 hours/week | - | [chat](https://discord.gg/Vbxce7A)\n[Exploiting and Securing Vulnerabilities in Java Applications](https://www.coursera.org/learn/exploiting-securing-vulnerabilities-java-applications) | 4 weeks | 5 hours/week | - | [chat](https://discord.gg/QxC22rR)\n\n### Core applications\n\n**Topics covered**:\n`Agile methodology`\n`REST`\n`software specifications`\n`refactoring`\n`relational databases`\n`transaction processing`\n`data modeling`\n`neural networks`\n`supervised learning`\n`unsupervised learning`\n`OpenGL`\n`ray tracing`\n`and more`\n\nCourses | Duration | Effort | Prerequisites | Discussion\n:-- | :--: | :--: | :--: | :--:\n[Databases: Modeling and Theory](https://www.edx.org/course/modeling-and-theory)| 2 weeks | 10 hours/week | core programming | [chat](https://discord.gg/pMFqNf4)\n[Databases: Relational Databases and SQL](https://www.edx.org/course/databases-5-sql)| 2 weeks | 10 hours/week | core programming | [chat](https://discord.gg/P8SPPyF)\n[Databases: Semistructured Data](https://www.edx.org/course/semistructured-data)| 2 weeks | 10 hours/week | core programming | [chat](https://discord.gg/duCJ3GN)\n[Machine Learning](https://www.coursera.org/specializations/machine-learning-introduction)| 11 weeks | 9 hours/week | Basic coding | [chat](https://discord.gg/NcXHDjy)\n[Computer Graphics](https://www.edx.org/course/computer-graphics-2) ([alternative](https://cseweb.ucsd.edu/~viscomp/classes/cse167/wi22/schedule.html))| 6 weeks | 12 hours/week | C++ or Java, linear algebra | [chat](https://discord.gg/68WqMNV)\n[Software Engineering: Introduction](https://www.edx.org/learn/software-engineering/university-of-british-columbia-software-engineering-introduction) ([alternative](https://github.com/ubccpsc/310/blob/main/resources/README.md)) | 6 weeks | 8-10 hours/week | Core Programming, and a [sizable project](FAQ.md#why-require-experience-with-a-sizable-project-before-the-Software-Engineering-courses) | [chat](https://discord.gg/5Qtcwtz)\n\n### Core ethics\n\n**Topics covered**:\n`Social Context`\n`Analytical Tools`\n`Professional Ethics`\n`Intellectual Property`\n`Privacy and Civil Liberties`\n`and more`\n\nCourses | Duration | Effort | Prerequisites | Discussion\n:-- | :--: | :--: | :--: | :--:\n[Ethics, Technology and Engineering](https://www.coursera.org/learn/ethics-technology-engineering)| 9 weeks | 2 hours/week | none | [chat](https://discord.gg/6ttjPmzZbe)\n[Introduction to  Intellectual Property](https://www.coursera.org/learn/introduction-intellectual-property)| 4 weeks | 2 hours/week | none | [chat](https://discord.gg/YbuERswpAK)\n[Data Privacy Fundamentals](https://www.coursera.org/learn/northeastern-data-privacy)| 3 weeks | 3 hours/week | none | [chat](https://discord.gg/64J34ajNBd)\n\n## Advanced CS\n\nAfter completing **every required course** in Core CS, students should choose a subset of courses from Advanced CS based on interest.\nNot every course from a subcategory needs to be taken.\nBut students should take *every* course that is relevant to the field they intend to go into.\n\n### Advanced programming\n\n**Topics covered**:\n`debugging theory and practice`\n`goal-oriented programming`\n`parallel computing`\n`object-oriented analysis and design`\n`UML`\n`large-scale software architecture and design`\n`and more`\n\nCourses | Duration | Effort | Prerequisites\n:-- | :--: | :--: | :--:\n[Parallel Programming](https://www.coursera.org/learn/scala-parallel-programming)| 4 weeks | 6-8 hours/week | Scala programming\n[Compilers](https://www.edx.org/course/compilers) | 9 weeks | 6-8 hours/week | none\n[Introduction to Haskell](https://www.seas.upenn.edu/~cis194/fall16/)| 14 weeks | - | -\n[Learn Prolog Now!](https://www.let.rug.nl/bos/lpn//lpnpage.php?pageid=online) ([alternative](https://github.com/ossu/computer-science/files/6085884/lpn.pdf))*| 12 weeks | - | -\n[Software Debugging](https://www.youtube.com/playlist?list=PLAwxTw4SYaPkxK63TiT88oEe-AIBhr96A)| 8 weeks | 6 hours/week | Python, object-oriented programming\n[Software Testing](https://www.youtube.com/playlist?list=PLAwxTw4SYaPkWVHeC_8aSIbSxE_NXI76g) | 4 weeks | 6 hours/week | Python, programming experience\n\n(*) book by Blackburn, Bos, Striegnitz (compiled from [source](https://github.com/LearnPrologNow/lpn), redistributed under [CC license](https://creativecommons.org/licenses/by-sa/4.0/))\n\n### Advanced systems\n\n**Topics covered**:\n`digital signaling`\n`combinational logic`\n`CMOS technologies`\n`sequential logic`\n`finite state machines`\n`processor instruction sets`\n`caches`\n`pipelining`\n`virtualization`\n`parallel processing`\n`virtual memory`\n`synchronization primitives`\n`system call interface`\n`and more`\n\nCourses | Duration | Effort | Prerequisites | Notes\n:-- | :--: | :--: | :--: | :--:\n[Computation Structures 1: Digital Circuits](https://learning.edx.org/course/course-v1:MITx+6.004.1x_3+3T2016) [alternative 1](https://ocw.mit.edu/courses/6-004-computation-structures-spring-2017/) [alternative 2](https://ocw.mit.edu/courses/6-004-computation-structures-spring-2009/) | 10 weeks | 6 hours/week | [Nand2Tetris II](https://www.coursera.org/learn/nand2tetris2) | Alternate links contain all 3 courses.\n[Computation Structures 2: Computer Architecture](https://learning.edx.org/course/course-v1:MITx+6.004.2x+3T2015) | 10 weeks | 6 hours/week | Computation Structures 1 |\n[Computation Structures 3: Computer Organization](https://learning.edx.org/course/course-v1:MITx+6.004.3x_2+1T2017) | 10 weeks | 6 hours/week | Computation Structures 2 |\n\n### Advanced theory\n\n**Topics covered**:\n`formal languages`\n`Turing machines`\n`computability`\n`event-driven concurrency`\n`automata`\n`distributed shared memory`\n`consensus algorithms`\n`state machine replication`\n`computational geometry theory`\n`propositional logic`\n`relational logic`\n`Herbrand logic`\n`game trees`\n`and more`\n\nCourses | Duration | Effort | Prerequisites\n:-- | :--: | :--: | :--:\n[Theory of Computation](https://ocw.mit.edu/courses/18-404j-theory-of-computation-fall-2020/) ([alternative](https://www.youtube.com/playlist?list=PLEE7DF8F5E0203A56)) | 13 weeks | 10 hours/week | [Mathematics for Computer Science](https://openlearninglibrary.mit.edu/courses/course-v1:OCW+6.042J+2T2019/about), logic, algorithms\n[Computational Geometry](https://www.edx.org/course/computational-geometry) | 16 weeks | 8 hours/week | algorithms, C++\n[Game Theory](https://www.coursera.org/learn/game-theory-1) | 8 weeks | 3 hours/week | mathematical thinking, probability, calculus\n\n### Advanced Information Security\n\nCourses | Duration | Effort | Prerequisites\n:-- | :--: | :--: | :--:\n[Web Security Fundamentals](https://www.edx.org/course/web-security-fundamentals) | 5 weeks | 4-6 hours/week | understanding basic web technologies\n[Security Governance & Compliance](https://www.coursera.org/learn/security-governance-compliance) | 3 weeks | 3 hours/week | -\n[Digital Forensics Concepts](https://www.coursera.org/learn/digital-forensics-concepts) | 3 weeks | 2-3 hours/week | Core Security\n[Secure Software Development: Requirements, Design, and Reuse](https://www.edx.org/course/secure-software-development-requirements-design-and-reuse) | 7 weeks | 1-2 hours/week | Core Programming and Core Security\n[Secure Software Development: Implementation](https://www.edx.org/course/secure-software-development-implementation) | 7 weeks | 1-2 hours/week | Secure Software Development: Requirements, Design, and Reuse\n[Secure Software Development: Verification and More Specialized Topics](https://www.edx.org/course/secure-software-development-verification-and-more-specialized-topics) | 7 weeks | 1-2 hours/week | Secure Software Development: Implementation\n\n### Advanced math\n\nCourses | Duration | Effort | Prerequisites | Discussion\n:-- | :--: | :--: | :--: | :--:\n[Essence of Linear Algebra](https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab) | - | - | [high school math](FAQ.md#how-can-i-review-the-math-prerequisites) | [chat](https://discord.gg/m6wHbP6)\n[Linear Algebra](https://ocw.mit.edu/courses/mathematics/18-06sc-linear-algebra-fall-2011/) | 14 weeks | 12 hours/week | corequisite: Essence of Linear Algebra | [chat](https://discord.gg/k7nSWJH)\n[Introduction to Numerical Methods](https://ocw.mit.edu/courses/mathematics/18-335j-introduction-to-numerical-methods-spring-2019/index.htm)| 14 weeks | 12 hours/week | [Linear Algebra](https://ocw.mit.edu/courses/mathematics/18-06sc-linear-algebra-fall-2011/) | [chat](https://discord.gg/FNEcNNq)\n[Introduction to Formal Logic](https://forallx.openlogicproject.org/) | 10 weeks | 4-8 hours/week | [Set Theory](https://www.youtube.com/playlist?list=PL5KkMZvBpo5AH_5GpxMiryJT6Dkj32H6N) | [chat](https://discord.gg/MbM2Gg5)\n[Probability](https://projects.iq.harvard.edu/stat110/home) | 15 weeks | 5-10 hours/week | [Differentiation and Integration](https://www.edx.org/course/calculus-1b-integration) | [chat](https://discord.gg/UVjs9BU)\n\n## Final project\n\nPart of learning is doing.\nThe assignments and exams for each course are to prepare you to use your knowledge to solve real-world problems.\n\nAfter you've completed Core CS and the parts of Advanced CS relevant to you,\nyou should identify a problem that you can solve using the knowledge you've acquired.\nYou can create something entirely new, or you can improve some tool/program that you use and wish were better.\n\nStudents who would like more guidance in creating a project may choose to use a series of project oriented courses.\nHere is a sample of options\n(many more are available, at this point you should be capable of identifying a series that is interesting and relevant to you):\n\nCourses | Duration | Effort | Prerequisites\n:-- | :--: | :--: | :--:\n[Fullstack Open](https://fullstackopen.com/en/) | 12 weeks | 15 hours/week | programming\n[Modern Robotics (Specialization)](https://www.coursera.org/specializations/modernrobotics) | 26 weeks | 2-5 hours/week | freshman-level physics, linear algebra, calculus, [linear ordinary differential equations](https://www.khanacademy.org/math/differential-equations)\n[Data Mining (Specialization)](https://www.coursera.org/specializations/data-mining) | 30 weeks | 2-5 hours/week | machine learning\n[Big Data (Specialization)](https://www.coursera.org/specializations/big-data) | 30 weeks | 3-5 hours/week | none\n[Internet of Things (Specialization)](https://www.coursera.org/specializations/internet-of-things) | 30 weeks | 1-5 hours/week | strong programming\n[Cloud Computing (Specialization)](https://www.coursera.org/specializations/cloud-computing) | 30 weeks | 2-6 hours/week | C++ programming\n[Data Science (Specialization)](https://www.coursera.org/specializations/jhu-data-science) | 43 weeks | 1-6 hours/week | none\n[Functional Programming in Scala (Specialization)](https://www.coursera.org/specializations/scala) | 29 weeks | 4-5 hours/week | One year programming experience\n[Game Design and Development with Unity 2020 (Specialization)](https://www.coursera.org/specializations/game-design-and-development) | 6 months | 5 hours/week | programming, interactive design\n\n## Congratulations\n\nAfter completing the requirements of the curriculum above,\nyou will have completed the equivalent of a full bachelor's degree in Computer Science.\nCongratulations!\n\nWhat is next for you? The possibilities are boundless and overlapping:\n\n- Look for a job as a developer!\n- Check out the [readings](extras/readings.md) for classic books you can read that will sharpen your skills and expand your knowledge.\n- Join a local developer meetup (e.g. via [meetup.com](https://www.meetup.com/)).\n- Pay attention to emerging technologies in the world of software development:\n  + Explore the **actor model** through [Elixir](https://elixir-lang.org/), a new functional programming language for the web based on the battle-tested Erlang Virtual Machine!\n  + Explore **borrowing and lifetimes** through [Rust](https://www.rust-lang.org/), a systems language which achieves memory- and thread-safety without a garbage collector!\n  + Explore **dependent type systems** through [Idris](https://www.idris-lang.org/), a new Haskell-inspired language with unprecedented support for type-driven development.\n\n![keep learning](https://i.imgur.com/REQK0VU.jpg)\n\n# Code of conduct\n[OSSU's code of conduct](https://github.com/ossu/code-of-conduct).\n\n## How to show your progress\n\n[Fork](https://www.freecodecamp.org/news/how-to-fork-a-github-repository/) the [GitHub repo](https://github.com/ossu/computer-science) into your own GitHub account and put ✅ next to the stuff you've completed as you complete it. This can serve as your [kanban board](https://en.wikipedia.org/wiki/Kanban_board) and will be faster to implement than any other solution (giving you time to spend on the courses).\n\n# Team\n\n* **[Eric Douglas](https://github.com/ericdouglas)**: founder of OSSU\n* **[Josh Hanson](https://github.com/joshmhanson)**: lead technical maintainer\n* **[Waciuma Wanjohi](https://github.com/waciumawanjohi)**: lead academic maintainer\n* **[Contributors](https://github.com/ossu/computer-science/graphs/contributors)**\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.02,
          "content": "title: Computer Science\n"
        },
        {
          "name": "coursepages",
          "type": "tree",
          "content": null
        },
        {
          "name": "extras",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}