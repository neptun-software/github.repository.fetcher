{
  "metadata": {
    "timestamp": 1736557718155,
    "page": 851,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mindsdb/mindsdb",
      "stars": 27065,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.27,
          "content": ".dockerignore\n.devcontainer\n.git\n.gitignore\n.github\n.mypy_cache\n.pytest_cache\n.deployment\n.venv\n\nMindsDB.egg-info\ngithub-actions\nassets\n\ndocker/db_images\ndocker/docker-bake.hcl\ndocker/*.Dockerfile\ndocker/docker-compose*\ndocker/README.md\n\nbuild\ndist\ndocs\nhelm\nvar\n**/__pycache__\n"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 6.7,
          "content": "[flake8]\nmin_python_version = 3.9.0\nmax-line-length = 120\nignore =\n  # E402\n  # Line too long\n  E501,\n  # Line break occurred before a binary operator\n  W503,\n  # Function is too complex\n  C901,\n  # https://www.flake8rules.com/rules/E721.html\n  E721\nper-file-ignores =\n  mindsdb/__main__.py: E402\n  mindsdb/api/mysql/mysql_proxy/libs/constants/mysql.py: E241\nexclude =\n  __init__.py,\n  build/*\n  # TODO: clean up this code\n  mindsdb/integrations/handlers/druid_handler/druid_handler.py\n  mindsdb/integrations/handlers/firebird_handler\n  mindsdb/integrations/handlers/firebird_handler/firebird_handler.py\n  mindsdb/integrations/handlers/hive_handler/tests/test_hive_handler.py\n  mindsdb/integrations/handlers/informix_handler/informix_handler.py\n  mindsdb/integrations/handlers/informix_handler/tests/test_informix_handler.py\n  mindsdb/integrations/handlers/lightwood_handler/*\n  mindsdb/integrations/handlers/ludwig_handler/test_ludwig.py\n  mindsdb/integrations/handlers/matrixone_handler/*\n  mindsdb/integrations/handlers/mlflow_handler/*\n  mindsdb/integrations/handlers/monetdb_handler/*\n  mindsdb/integrations/handlers/mysql_handler/tests/test_mysql_handler.py\n  mindsdb/integrations/handlers/pinot_handler/pinot_handler.py\n  mindsdb/integrations/handlers/postgres_handler/tests/test_postgres_handler.py\n  mindsdb/integrations/handlers/questdb_handler/*\n  mindsdb/integrations/handlers/singlestore_handler/*\n  mindsdb/integrations/handlers/sqlite_handler/sqlite_handler.py\n  mindsdb/integrations/handlers/supabase_handler/tests/test_supabase_handler.py\n  mindsdb/integrations/handlers/tidb_handler/*\n  mindsdb/integrations/handlers/timescaledb_handler/*\n  mindsdb/integrations/handlers/trino_handler/trino_handler.py\n  mindsdb/integrations/handlers/vertica_handler/*\n  mindsdb/integrations/handlers/view_handler/view_handler.py\n  mindsdb/integrations/handlers/yugabyte_handler/*\n  mindsdb/integrations/handlers/opengauss_handler/*\n  mindsdb/integrations/handlers/dockerhub_handler/*\n  mindsdb/integrations/libs/response.py\n  mindsdb/integrations/utilities/utils.py\n  mindsdb/migrations/env.py\n  tests/prediction_latency_test/*\n  tests/unit/test_mongodb_handler.py\n  tests/unit/test_mongodb_server.py\n  tests/unit/ml_handlers/test_huggingface.py\n  tests/unit/ml_handlers/test_mlflow.py\n  tests/unit/ml_handlers/test_huggingface.py\n  tests/unit/ml_handlers/test_ludwig.py\n  tests/unit/ml_handlers/test_lightwood.py\n  tests/unit/test_predictor_params.py\n  tests/unit/test_merlion_handler.py\n  mindsdb/integrations/handlers/plaid_handler/*\n  mindsdb/integrations/handlers/cohere_handler/*\n  mindsdb/integrations/handlers/google_calendar_handler/*\n  mindsdb/integrations/handlers/orioledb_handler/*\n  mindsdb/integrations/handlers/youtube_handler/*\n  mindsdb/integrations/handlers/sentence_transformer_handler/*\n  mindsdb/integrations/handlers/influxdb_handler/*\n  mindsdb/integrations/handlers/nuo_jdbc_handler/*\n  mindsdb/integrations/handlers/sendinblue_handler/*\n  mindsdb/integrations/handlers/merlion_handler/*\n  mindsdb/integrations/handlers/confluence_handler/*\n  mindsdb/integrations/handlers/frappe_handler/*\n  mindsdb/integrations/handlers/cloud_sql_handler/*\n  mindsdb/integrations/handlers/flaml_handler/*\n  mindsdb/integrations/handlers/huggingface_handler/*\n  mindsdb/integrations/handlers/email_handler/*\n  mindsdb/integrations/handlers/reddit_handler/*\n  mindsdb/integrations/handlers/timegpt_handler/*\n  mindsdb/integrations/handlers/quickbooks_handler/*\n  mindsdb/integrations/handlers/strava_handler/*\n  mindsdb/integrations/handlers/strava_handler/*\n  mindsdb/integrations/handlers/strava_handler/*\n  mindsdb/integrations/handlers/github_handler/*\n  mindsdb/integrations/handlers/vitess_handler/*\n  mindsdb/integrations/handlers/impala_handler/*\n  mindsdb/integrations/handlers/tdengine_handler/*\n  mindsdb/integrations/handlers/huggingface_api_handler/*\n  mindsdb/integrations/handlers/unify_handler/*\n  mindsdb/integrations/handlers/ignite_handler/*\n  mindsdb/integrations/handlers/google_books_handler/*\n  mindsdb/integrations/handlers/edgelessdb_handler/*\n  mindsdb/integrations/handlers/google_fit_handler/*\n  mindsdb/integrations/handlers/altibase_handler/*\n  mindsdb/integrations/handlers/ms_teams_handler/*\n  mindsdb/integrations/handlers/discord_handler/*\n  mindsdb/integrations/handlers/sheets_handler/*\n  mindsdb/integrations/handlers/autosklearn_handler/*\n  mindsdb/integrations/handlers/twitter_handler/*\n  mindsdb/integrations/handlers/statsforecast_handler/*\n  mindsdb/integrations/handlers/jira_handler/*\n  mindsdb/integrations/handlers/stripe_handler/*\n  mindsdb/integrations/handlers/writer_handler/*\n  mindsdb/integrations/handlers/llama_index_handler/*\n  mindsdb/integrations/handlers/rocket_chat_handler/*\n  mindsdb/integrations/handlers/utilities/*\n  mindsdb/integrations/handlers/sqlany_handler/*\n  mindsdb/integrations/handlers/google_content_shopping_handler/*\n  mindsdb/integrations/handlers/oceanbase_handler/*\n  mindsdb/integrations/handlers/hackernews_handler/*\n  mindsdb/integrations/handlers/langchain_handler/*\n  mindsdb/integrations/handlers/sqreamdb_handler/*\n  mindsdb/integrations/handlers/gitlab_handler/*\n  mindsdb/integrations/handlers/maxdb_handler/*\n  mindsdb/integrations/handlers/paypal_handler/*\n  mindsdb/integrations/handlers/eventstoredb_handler/*\n  mindsdb/integrations/handlers/rockset_handler/*\n  mindsdb/integrations/handlers/solr_handler/*\n  mindsdb/integrations/handlers/shopify_handler/*\n  mindsdb/integrations/handlers/anthropic_handler/*\n  mindsdb/integrations/handlers/tpot_handler/*\n  mindsdb/integrations/handlers/derby_handler/*\n  mindsdb/integrations/handlers/scylla_handler/*\n  mindsdb/integrations/handlers/phoenix_handler/*\n  mindsdb/integrations/handlers/replicate_handler/*\n  mindsdb/integrations/handlers/pgvector_handler/*\n  mindsdb/integrations/handlers/materialize_handler/*\n  mindsdb/integrations/handlers/planetscale_handler/*\n  mindsdb/integrations/handlers/starrocks_handler/*\n  mindsdb/integrations/handlers/ingres_handler/*\n  mindsdb/integrations/handlers/palm_handler/*\n  mindsdb/integrations/handlers/binance_handler/*\n  mindsdb/integrations/handlers/mediawiki_handler/*\n  mindsdb/integrations/handlers/mendeley_handler/*\n  mindsdb/integrations/handlers/databend_handler/*\n  mindsdb/integrations/handlers/cloud_spanner_handler/*\n  mindsdb/integrations/handlers/gmail_handler/*\n  mindsdb/integrations/handlers/hsqldb_handler/*\n  mindsdb/integrations/handlers/newsapi_handler/*\n  mindsdb/integrations/handlers/monkeylearn_handler/*\n  mindsdb/integrations/handlers/google_search_handler/*\n  mindsdb/integrations/handlers/ollama_handler/*\n  mindsdb/integrations/handlers/aurora_handler/*\n  mindsdb/integrations/handlers/surrealdb_handler/*\n  mindsdb/integrations/handlers/neuralforecast_handler/*\n  mindsdb/integrations/handlers/rag_handler/*\nmax-complexity = 18\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.83,
          "content": "**/*.pyc\n*__pycache__*\nvar\netc\n.idea\nmindsdb/logs\nmindsdb/logs\nlogs\ntests/temp\n/integration_tests/flows/config/*\nmy_model.zip\nmodel.py\ntests/integration_tests/flows/model.py\ntests/integration_tests/flows/my_model.zip\ndistributions/docker-compose/*/storage\nvenv/*\nenv/*\nmindsdb-venv/*\nroot\nstatic\ntmp\n.pytest_cache\ntests/prediction_latency_test/*.csv\nstorage_dir\ndocker/dist/*\n.directory\nMindsDB.egg-info/*\n/build\n\n# Autokeras generated files\nauto_model\nautokeras\nstructured_data_classifier\nstructured_data_regressor\nmindsdb/integrations/handlers/autokeras_handler/structured_data_classifier\n\n# AutoGluon generated files\nAutogluonModels\n\n# VisualStudioCode\n.vscode\n.vscode/*\n.history\ndoc/lib/\nrun.csh\n\n# Virtualenv\nmindsdb/bin\nmindsdb/lib\nmindsdb/lib64\npyvenv.cfg\n.python-version\n.DS_Store\nmindsdb/Scripts\nmindsdb/Include\nxgboost\n\n# Docs\nnode_modules"
        },
        {
          "name": ".gitpod.Dockerfile",
          "type": "blob",
          "size": 0.34,
          "content": "FROM gitpod/workspace-postgres\n\nENV NODE_VERSION=18\nENV PYTHON_VERSION=3.8\n\nRUN pyenv install $PYTHON_VERSION -s \\\n    && pyenv global $PYTHON_VERSION\n\nRUN bash -c 'source $HOME/.nvm/nvm.sh && nvm install $NODE_VERSION \\\n    && nvm use $NODE_VERSION && nvm alias default $NODE_VERSION'\n\nRUN echo \"nvm use default &>/dev/null\" >> ~/.bashrc.d/51-nvm-fix\n"
        },
        {
          "name": ".gitpod.yml",
          "type": "blob",
          "size": 0.29,
          "content": "image:\n  file: .gitpod.Dockerfile\n\nports:\n  # Mindsdb GUI\n  - port: 47334\n    onOpen: open-preview\n\n  # PostgreSQL server\n  - port: 5432\n    onOpen: ignore\n\ntasks:\n  - name: mindsdb\n    init: |\n      pip install -U pip\n      pip install -r requirements.txt\n    command: |\n      python -m mindsdb\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.48,
          "content": "exclude: \"^databricks_src|^data_engineering/\"\nrepos:\n  - repo: https://github.com/pycqa/flake8\n    rev: 4.0.1\n    hooks:\n      - id: flake8\n        additional_dependencies: [flake8-typing-imports==1.10.0]\n        args: ['--config', '.flake8']\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.3.0\n    hooks:\n      - id: check-added-large-files\n      - id: check-toml\n      - id: check-yaml\n        exclude: \"^helm/\"\n        args: [--unsafe]\n      - id: check-merge-conflict\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.28,
          "content": "\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our community include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at admin@mindsdb.com. All complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident.\n\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 2.0,\navailable at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct enforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.92,
          "content": "# Contributing to Mindsdb\n\nBeing part of the core MindsDB team is accessible to anyone who is motivated and wants to be part of that journey!\n\nPlease see below how to contribute to the project, also refer to the contributing documentation.\n\n## How can you help us?\n\n* Report a bug\n* Improve documentation\n* Discuss the code implementation\n* Submit a bug fix\n* Propose new features\n* Test Mindsdb\n\n## Code contributions\n\nIn general, we follow the \"fork-and-pull\" Git workflow.\n1. Fork the Mindsdb repository\n2. Clone the repository\n3. Make changes and commit them\n4. Push your local branch to your fork\n5. Submit a Pull request so that we can review your changes\n6. Write a commit message\n7. Make sure that the CI tests are GREEN\n\n> NOTE: Be sure to merge the latest from \"upstream\" before making a pull request! Also, make the PR to the `main` branch.\n\n## Feature and Bug reports\nWe use GitHub issues to track bugs and features. Report them by opening a [new issue](https://github.com/mindsdb/mindsdb/issues/new/choose) and fill out all of the required inputs.\n\n## Code review process\n\nThe Pull Request reviews are done on a regular basis. Please, make sure you respond to our feedback/questions.\n\n## Community\n\nIf you have additional questions or you want to chat with the MindsDB core team, please join our [Slack community](https://mindsdb.com/joincommunity) or post at [Github Discussions](https://github.com/mindsdb/mindsdb/discussions).\n \nTo get updates on MindsDB’s latest announcements, releases, and events, sign up for our [Monthly Community Newsletter](https://mindsdb.com/newsletter/?utm_medium=community&utm_source=github&utm_campaign=mindsdb%20repo).\n\nJoin our mission of democratizing machine learning!\n\n## Contributor Code of Conduct\nPlease note that this project is released with a [Contributor Code of Conduct](https://github.com/mindsdb/mindsdb/blob/main/CODE_OF_CONDUCT.md). By participating in this project, you agree to abide by its terms.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 5.67,
          "content": "# Understanding the Diverse Licensing Structure of MindsDB's Repo\n\n1. MindsDB Core: The MindsDB Core component specifically uses the Elastic License 2.0. This is a distinct license that applies to this particular part of the project.\n\n2. License File in Work's Directory: If there is a LICENSE file located in the same directory as the work, that license will apply to the work:\n *  `/mindsdb/integraions` directory that contains all integrations is Licensed under MIT License.\n\n3. Default to Elastic License 2.0: If no specific LICENSE file is found following the above rules, the work defaults to being licensed under the Elastic License 2.0.\n\nFor any questions or clarifications regarding licensing, please contact us at  (admin@mindsdb.com). \n\n------------------------------------------------------------------------------------\n## MIT License\n\nCopyright (c) 2019 MindsDB, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n------------------------------------------------------------------------------------\n\n# Elastic License 2.0 (ELv2)\n\n### Acceptance\n\nBy using the software, you agree to all of the terms and conditions below.\n\n### Copyright License\n\nThe licensor grants you a non-exclusive, royalty-free, worldwide, non-sublicensable, non-transferable license to use, copy, distribute, make available, and prepare derivative works of the software, in each case subject to the limitations and conditions below.\n\n### Limitations\n\nYou may not provide the software to third parties as a hosted or managed service, where the service provides users with access to any substantial set of the features or functionality of the software.\nYou may not move, change, disable, or circumvent the license key functionality in the software, and you may not remove or obscure any functionality in the software that is protected by the license key.\nYou may not alter, remove, or obscure any licensing, copyright, or other notices of the licensor in the software. Any use of the licensor’s trademarks is subject to applicable law.\n\n### Patents\nThe licensor grants you a license, under any patent claims the licensor can license, or becomes able to license, to make, have made, use, sell, offer for sale, import and have imported the software, in each case subject to the limitations and conditions in this license. This license does not cover any patent claims that you cause to be infringed by modifications or additions to the software. If you or your company make any written claim that the software infringes or contributes to infringement of any patent, your patent license for the software granted under these terms ends immediately. If your company makes such a claim, your patent license ends immediately for work on behalf of your company.\n\n### Notices\n\nYou must ensure that anyone who gets a copy of any part of the software from you also gets a copy of these terms.\nIf you modify the software, you must include in any modified copies of the software prominent notices stating that you have modified the software.\n\n### No Other Rights\n\nThese terms do not imply any licenses other than those expressly granted in these terms.\n\n### Termination\n\nIf you use the software in violation of these terms, such use is not licensed, and your licenses will automatically terminate. If the licensor provides you with a notice of your violation, and you cease all violation of this license no later than 30 days after you receive that notice, your licenses will be reinstated retroactively. However, if you violate these terms after such reinstatement, any additional violation of these terms will cause your licenses to terminate automatically and permanently.\n\n### No Liability\n\nAs far as the law allows, the software comes as is, without any warranty or condition, and the licensor will not be liable to you for any damages arising out of these terms or the use or nature of the software, under any kind of legal claim. \t\n\n### Definitions\n\nThe licensor is the entity offering these terms, and the software is the software the licensor makes available under these terms, including any portion of it.\n\n**you** refers to the individual or entity agreeing to these terms.\n\n**your company**  is any legal entity, sole proprietorship, or other kind of organization that you work for, plus all organizations that have control over, are under the control of, or are under common control with that organization. control means ownership of substantially all the assets of an entity, or the power to direct its management and policies by vote, contract, or otherwise. Control can be direct or indirect.\n\n**your licenses**  are all the licenses granted to you for the software under these terms.\n\n**use**  means anything you do with the software requiring one of your licenses.\n\n**trademark**  means trademarks, service marks, and similar rights.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.28,
          "content": "include requirements/requirements.txt\ninclude requirements/requirements-telemetry.txt\ninclude mindsdb/migrations/alembic.ini\nrecursive-include mindsdb/integrations/utilities/datasets *.csv\nrecursive-include mindsdb/integrations/handlers *.txt *.png *.svg *.jpg\ninclude default_handlers.txt"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.75,
          "content": "install_mindsdb:\n\tpip install -e .\n\tpip install -r requirements/requirements-dev.txt\n\tpre-commit install\n\ninstall_handler:\n\t@if [[ -n \"$(HANDLER_NAME)\" ]]; then\\\n\t\tpip install -e .[$(HANDLER_NAME)];\\\n\telse\\\n\t\techo 'Please set $$HANDLER_NAME to the handler to install.';\\\n\tfi\t\nprecommit:\n\tpre-commit install\n\tpre-commit run --files $$(git diff --cached --name-only)\n\nrun_mindsdb:\n\tpython -m mindsdb\n\ncheck:\n\tpython tests/scripts/check_requirements.py\n\tpython tests/scripts/check_version.py\n\tpython tests/scripts/check_print_statements.py\n\nbuild_docker:\n\tdocker buildx build -t mdb --load -f docker/mindsdb.Dockerfile .\n\nrun_docker: build_docker\n\tdocker run -it -p 47334:47334 mdb\n\n.PHONY: install_mindsdb install_handler precommit run_mindsdb check build_docker run_docker\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.49,
          "content": "\n\n<a name=\"readme-top\"></a>\n\n<div align=\"center\">\n\t<a href=\"https://pypi.org/project/MindsDB/\" target=\"_blank\"><img src=\"https://badge.fury.io/py/MindsDB.svg\" alt=\"MindsDB Release\"></a>\n\t<a href=\"https://www.python.org/downloads/\" target=\"_blank\"><img src=\"https://img.shields.io/badge/python-3.9.x%7C%203.10.x%7C%203.11.x-brightgreen.svg\" alt=\"Python supported\"></a>\n\t<a href=\"https://ossrank.com/p/630\"><img src=\"https://shields.io/endpoint?url=https://ossrank.com/shield/630\"></a>\n\t<img alt=\"PyPI - Downloads\" src=\"https://img.shields.io/pypi/dm/Mindsdb\">\n\t<a href=\"https://hub.docker.com/u/mindsdb\" target=\"_blank\"><img src=\"https://img.shields.io/docker/pulls/mindsdb/mindsdb\" alt=\"Docker pulls\"></a>\n\n  <br />\n  <br />\n\n  <a href=\"https://github.com/mindsdb/mindsdb\">\n    <img src=\"/docs/assets/mindsdb_logo.jpg\" alt=\"MindsDB\" width=\"300\">\n  </a>\n\n  <p align=\"center\">\n    <br />\n    <a href=\"https://www.mindsdb.com?utm_medium=community&utm_source=github&utm_campaign=mindsdb%20repo\">Website</a>\n    ·\n    <a href=\"https://docs.mindsdb.com?utm_medium=community&utm_source=github&utm_campaign=mindsdb%20repo\">Docs</a>\n    ·\n    <a href=\"https://mindsdb.com/joincommunity?utm_medium=community&utm_source=github&utm_campaign=mindsdb%20repo\">Community Slack</a>\n  </p>\n</div>\n\n----------------------------------------\n\n\nMindsDB is the world's most effective solution for building AI applications that talk to messy enterprise data sources. Think of it as a librarian Marie Kondo.\n\n<p align=\"center\">\n  <img src=\"/docs/assets/cloud/main_mdb.png\"/>\n</p>\n\nA federated query engine that tidies up your data-sprawl chaos while meticulously answering every single question you throw at it. From structured to unstructured data, whether it's scattered across SaaS applications, databases, or... hibernating in data warehouses like that $100 bill in your tuxedo pocket from prom night, lost, waiting to be discovered.\n\n## Install MindsDB Server \n\nMindsDB is an open-source server that can be deployed anywhere - from your laptop to the cloud, and everywhere in between. And yes, you can customize it to your heart's content.\n\n  * [Using Docker Desktop](https://docs.mindsdb.com/setup/self-hosted/docker-desktop). This is the fastest and recommended way to get started and have it all running.\n  * [Using Docker](https://docs.mindsdb.com/setup/self-hosted/docker). This is also simple, but gives you more flexibility on how to further customize your server.\n  * [Using PyPI](https://docs.mindsdb.com/contribute/install). This option enables you to contribute to MindsDB.\n\n## Connect Your Data\n\nYou can connect to hundreds of [data sources (learn more)](https://docs.mindsdb.com/integrations/data-overview). This is just an example of a Postgres database.\n\n```sql\n-- Connect to demo postgres DB\nCREATE DATABASE demo_postgres_db\nWITH ENGINE = \"postgres\",\nPARAMETERS = {\n  \"user\": \"demo_user\",\n  \"password\": \"demo_password\",\n  \"host\": \"samples.mindsdb.com\",\n  \"port\": \"5432\",\n  \"database\": \"demo\",\n  \"schema\": \"demo_data\"\n};\n```\n\nOnce you've connected your data sources, you can [combine](https://docs.mindsdb.com/mindsdb_sql/sql/api/join-on), [slice it, dice it](https://docs.mindsdb.com/mindsdb_sql/sql/api/select), and [transform](https://docs.mindsdb.com/use-cases/data_enrichment/overview) it however your heart desires using good ol' standard SQL [(learn more)](https://docs.mindsdb.com/mindsdb_sql/overview). \n\nAfter you've whipped your data into shape, it's time to build AI that actually learns!\n\n## Build AI Knowledge\n\nOur Knowledge Bases are state-of-the-art autonomous RAG systems that can digest data from any source MindsDB supports. Whether your data is structured and neater than a Swiss watch factory or unstructured and messy as a teenager's bedroom, our Knowledge Base engine will figure out how to find the relevant information. \n\n**In this example** we will create a knowledge base that knows everything about amazon reviews. \n\n```sql\n-- first create a knowledge base\nCREATE KNOWLEDGE_BASE mindsdb.reviews_kb;\n\n-- now insert everything from the amazon reviews table into it, so it can learn it\nINSERT INTO mindsdb.reviews_kb (\n  SELECT review as content FROM demo_pg_db.amazon_reviews\n);\n\n-- check the status of your loads here\nSELECT * FROM information_schema.knowledge_bases;\n\n-- query the content of the knowledge base\nSELECT * FROM mindsdb.reviews_kb;\n```\n\nFor the tinkerers and optimization enthusiasts out there, you can dive as deep as you want. [(Learn more about knowledge Bases)](https://docs.mindsdb.com/mindsdb_sql/agents/knowledge-bases)\n\n+ Want to [hand-pick your embedding model? Go for it](https://docs.mindsdb.com/mindsdb_sql/agents/knowledge-bases#knowledge-base-with-openai-embedding-model)! \n+ Have strong [opinions about vector databases? We're here for it!](https://docs.mindsdb.com/mindsdb_sql/agents/knowledge-bases#knowledge-base-with-custom-vector-store). \n\nBut if you'd rather spend your time on other things (like finally building that billion-dollar AI App), that's perfectly fine too. By default, it's all handled automatically - you don't need to worry about the nitty-gritty details like data embedding, chunking, vector optimization, etc.\n\n## Search \n\nNow that your knowledge base is loaded and ready. Let's hunt for some juicy info!\n\n#### Via SQL\n\n```sql\n-- Find the reviews that about Iphone in beast of lights\nSELECT *  FROM mindsdb.reviews_kb\nWHERE content LIKE 'what are the best kindle reviews'\nLIMIT 10;\n```\n\n#### Via Python SDK\n\nInstall MindsDB SDK\n\n```shell\npip install mindsdb_sdk\n```\n\nYou can call this AI knowledge base from your app with the following code:\n\n```python\nimport mindsdb_sdk\n\n\n# connects to the specified host and port\nserver = mindsdb_sdk.connect('http://127.0.0.1:47334')\n\nwiki_kb = server.knowledge_bases.get('mindsdb.reviews_kb');\ndf = my_kb.find('what are the best kindle reviews').fetch()\n\n```\n\n## 🤝 Contribute\n\nInterested in contributing to MindsDB? Follow our [installation guide for development](https://docs.mindsdb.com/contribute/install?utm_medium=community&utm_source=github&utm_campaign=mindsdb%20repo).\n\nYou can find our [contribution guide here](https://docs.mindsdb.com/contribute/contribute?utm_medium=community&utm_source=github&utm_campaign=mindsdb%20repo).\n\nWe welcome suggestions! Feel free to open new issues with your ideas, and we’ll guide you.\n\nThis project adheres to a [Contributor Code of Conduct](https://github.com/mindsdb/mindsdb/blob/main/CODE_OF_CONDUCT.md). By participating, you agree to follow its terms.\n\nAlso, check out our [community rewards and programs](https://mindsdb.com/community?utm_medium=community&utm_source=github&utm_campaign=mindsdb%20repo).\n\n## 🤍 Support\n\nIf you find a bug, please submit an [issue on GitHub](https://github.com/mindsdb/mindsdb/issues/new/choose).\n\nHere’s how you can get community support:\n\n* Ask a question in our [Slack Community](https://mindsdb.com/joincommunity?utm_medium=community&utm_source=github&utm_campaign=mindsdb%20repo).\n* Join our [GitHub Discussions](https://github.com/mindsdb/mindsdb/discussions).\n* Post on [Stack Overflow](https://stackoverflow.com/questions/tagged/mindsdb) with the MindsDB tag.\n\nFor commercial support, please [contact the MindsDB team](https://mindsdb.com/contact?utm_medium=community&utm_source=github&utm_campaign=mindsdb%20repo).\n\n## 💚 Current Contributors\n\n<a href=\"https://github.com/mindsdb/mindsdb/graphs/contributors\">\n  <img src=\"https://contributors-img.web.app/image?repo=mindsdb/mindsdb\" />\n</a>\n\nGenerated with [contributors-img](https://contributors-img.web.app).\n\n## 🔔 Subscribe for Updates\n\nJoin our [Slack community](https://mindsdb.com/joincommunity)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.44,
          "content": "# MindsDB Security Policy\n\nAt MindsDB, we consider the security of our systems a top priority. However, no matter how much effort we put into system security, there can still be vulnerabilities present.\nSupported Versions\n\nMindsDB only offers security patches for the following versions\n\n| Version | Supported          |\n| ------- | ------------------ |\n| >=23.6.1.1  | :white_check_mark: |\n\n### Reporting a Vulnerability\n\nIf you discover a security vulnerability, we appreciate your efforts to responsibly disclose your findings by sending an email to hello@mindsdb.com, providing as much detail as you can. Please do not publicly disclose these details without express consent from us.\n\nUpon receiving your email, our security team will assess and respond to your report. We strive to keep all communication channels open with you to address your report effectively.\nDisclosure Policy\n\nOnce we have received and evaluated your vulnerability report, MindsDB commits to:\n\n* Confirm the receipt of your report\n* Assess the vulnerability report to confirm its validity\n* Work on a fix and update the impacted versions\n* Publicly disclose the vulnerability after it has been addressed, giving credit to the reporter if they wish\n\n### Comments on this Policy\n\nIf you have any suggestions to improve this policy, please let us know. We are committed to ensuring that our policy works effectively for everyone involved.\n\nThank you for helping to make MindsDB safer for everyone.\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "default_handlers.txt",
          "type": "blob",
          "size": 0.25,
          "content": "file                 # Required by the core codebase\npostgres\nmysql\nmariadb\nscylla\ncassandra\nclickhouse\n# snowflake\nslack\nsqlite\nmongodb\nopenai\nbyom\nstatsforecast\ntimegpt\nbinance\ntwitter\nminds_endpoint\nweb\nlangchain            # For agents & completions\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 5.05,
          "content": "services:\n\n  # Auto-restarts containers that are unhealthy\n  autoheal:\n    container_name: autoheal\n    image: willfarrell/autoheal\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    <<: &autoRestartOnFailure\n      deploy:\n        restart_policy:\n          condition: on-failure\n          max_attempts: 10\n\n  mindsdb:\n    <<: *autoRestartOnFailure\n    image: mindsdb/mindsdb:devel\n   \n    depends_on:\n      postgres:\n        condition: service_healthy\n    # Uncomment the following lines if you want to use the local version of jaeger and langfuse\n    #   jaeger:\n    #     condition: service_started\n    #   langfuse:\n    #     condition: service_started\n    # If you want to build the image instead:\n    # build:\n    #   context: .\n    #   dockerfile: docker/mindsdb.Dockerfile\n    #   target: dev  # Makes sure dev dependencies are installed\n    restart: always\n    ports:\n      - '47334:47334'\n      - '47335:47335'\n      - '47336:47336'\n    # watchfiles will reload the app when python files are changed\n    entrypoint: bash -c \"watchfiles --filter python 'python -m mindsdb' .\"\n    environment:\n      MINDSDB_DB_CON: \"postgresql://postgres:postgres@postgres/mindsdb\"\n      MINDSDB_DOCKER_ENV: \"True\"\n      MINDSDB_STORAGE_DIR: \"/mindsdb/var\"\n      FLASK_DEBUG: 1  # This will make sure http requests are logged regardless of log level\n      SENTRY_IO_DSN: \"\"\n      SENTRY_IO_ENVIRONMENT: \"local\"\n      # SENTRY_IO_FORCE_RUN: \"true\" # Uncomment me to force-start sentry on local development. Good for profiling, but may annoy other devs on sentry.io with the \"noise\"\n      # MINDSDB_LOG_LEVEL: \"DEBUG\"\n      # OPENAI_API_KEY: \"...\"\n      LANGFUSE_HOST: \"http://langfuse:3000\" # Define the host for langfuse\n      LANGFUSE_PUBLIC_KEY: \"pk-lf-1234567890\" # Define the public key for langfuse\n      LANGFUSE_SECRET_KEY: \"sk-lf-1234567890\" # Define the secret key for langfuse\n      LANGFUSE_RELEASE: \"local\"\n      # LANGFUSE_DEBUG: \"True\"\n      LANGFUSE_TIMEOUT: \"10\"\n      LANGFUSE_SAMPLE_RATE: \"1.0\"\n      OTEL_EXPORTER_TYPE: \"console\" # or \"console\" # Define the exporter type (console/otlp)\n      # OTEL_OTLP_ENDPOINT: \"http://jaeger:4317\" # Define the endpoint for the otlp exporter. Uncomment this line if you want to use jaeger.\n      OTEL_SERVICE_NAME: \"mindsdb\" # Define the service name\n      OTEL_SERVICE_ENVIRONMENT: \"local\" # Define the service environment\n      # OTEL_SDK_FORCE_RUN: \"true\" # Uncomment me to force-start opentelemetry on local development.\n\n    volumes:\n      - type: bind\n        source: .\n        target: /mindsdb\n    healthcheck:\n      test:  [\"CMD\", \"curl\", \"-f\", \"http://localhost:47334/api/util/ping\"]\n      interval: 30s\n      timeout: 4s\n      retries: 100\n\n  jaeger:\n    <<: *autoRestartOnFailure\n    image: jaegertracing/all-in-one:1.62.0\n    ports:\n      - \"16686:16686\"\n      - \"4317:4317\"\n      - \"4318:4318\"\n    environment:\n      COLLECTOR_ZIPKIN_HOST_PORT: \":9411\"\n    healthcheck:\n      test: [\"CMD-SHELL\", \"/go/bin/all-in-one-linux status\"]\n      interval: 3s\n      timeout: 3s\n      retries: 10\n      \n\n  langfuse:\n    <<: *autoRestartOnFailure\n    image: langfuse/langfuse:2.87.0\n    restart: always\n    depends_on:\n      postgres:\n        condition: service_healthy\n    ports:\n      - \"3000:3000\"\n    healthcheck:\n      test: [\"CMD-SHELL\", \"curl -f http://localhost:3000/api/public/health\"]\n      interval: 3s\n      timeout: 3s\n      retries: 10\n    environment:\n      - DATABASE_URL=postgresql://postgres:postgres@postgres/langfuse\n      - NEXTAUTH_SECRET=secret # generate secret with at least 256 entropy using `openssl rand -base64 32`.\n      - SALT=salt # generate secret with at least 256 entropy using `openssl rand -base64 32`.\n      - ENCRYPTION_KEY=0000000000000000000000000000000000000000000000000000000000000000 # generate secret with at least 256 bits and 64 characters in hex format using `openssl rand -hex 32`.\n      - NEXTAUTH_URL=http://localhost:3000 # URL of the frontend\n      - LANGFUSE_INIT_ORG_ID=mindsdb # Organization ID\n      - LANGFUSE_INIT_ORG_NAME=MindsDB # Organization name\n      - LANGFUSE_INIT_PROJECT_ID=23152f1d-9604-4629-a69d-27790d47b7fa # Project ID (UUID)\n      - LANGFUSE_INIT_PROJECT_NAME=MindsDB # Project name\n      - LANGFUSE_INIT_PROJECT_PUBLIC_KEY=pk-lf-1234567890 # Project public key\n      - LANGFUSE_INIT_PROJECT_SECRET_KEY=sk-lf-1234567890 # Project secret key\n      - LANGFUSE_INIT_USER_EMAIL=admin@langfuse.com # User email\n      - LANGFUSE_INIT_USER_NAME=User # User name\n      - LANGFUSE_INIT_USER_PASSWORD=password # User password\n\n  postgres:\n    <<: *autoRestartOnFailure\n    image: postgres:16.4\n    restart: always\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n      interval: 3s\n      timeout: 3s\n      retries: 10\n    environment:\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n      - POSTGRES_DB=postgres\n    ports:\n      - \"15432:5432\" # Expose the port to the host. Use 15432 to avoid conflicts with local postgres installations\n    volumes:\n      - db_data:/var/lib/postgresql/data\n      - ./scripts/init-dbs.sh:/docker-entrypoint-initdb.d/init-dbs.sh\n\nvolumes:\n  db_data:\n    driver: local\n\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "mindsdb",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.12,
          "content": "[build-system]\n\n# @TODO: We should figure out version limitations for these\nrequires = [\n    \"setuptools\",\n    \"wheel\",\n]\n"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 5.86,
          "content": "import os\nimport glob\n\nfrom setuptools import find_packages, setup\n\n# A special env var that allows us to disable the installation of the default extras for advanced users / containers / etc\nMINDSDB_PIP_INSTALL_DEFAULT_EXTRAS = (\n    True\n    if os.getenv(\"MINDSDB_PIP_INSTALL_DEFAULT_EXTRAS\", \"true\").lower() == \"true\"\n    else False\n)\nDEFAULT_PIP_EXTRAS = [\n    line.split(\"#\")[0].rstrip()\n    for line in open(\"default_handlers.txt\").read().splitlines()\n    if not line.strip().startswith(\"#\")\n]\n\n\nclass Deps:\n    pkgs = []\n    pkgs_exclude = [\"tests\", \"tests.*\"]\n    new_links = []\n    extras = {}\n\n\nabout = {}\nwith open(\"mindsdb/__about__.py\") as fp:\n    exec(fp.read(), about)\n\n\nwith open(\"README.md\", \"r\", encoding=\"utf8\") as fh:\n    long_description = fh.read()\n\n\ndef expand_requirements_links(requirements: list) -> list:\n    \"\"\"Expand requirements that contain links to other requirement files\"\"\"\n    to_add = []\n    to_remove = []\n\n    for requirement in requirements:\n        if requirement.startswith(\"-r \"):\n            if os.path.exists(requirement.split()[1]):\n                with open(requirement.split()[1]) as fh:\n                    to_add += expand_requirements_links(\n                        [req.strip() for req in fh.read().splitlines()]\n                    )\n            to_remove.append(requirement)\n\n    for req in to_remove:\n        requirements.remove(req)\n    for req in to_add:\n        requirements.append(req)\n\n    return list(set(requirements))  # Remove duplicates\n\n\ndef define_deps():\n    \"\"\"Reads requirements.txt requirements-extra.txt files and preprocess it\n    to be feed into setuptools.\n\n    This is the only possible way (we found)\n    how requirements.txt can be reused in setup.py\n    using dependencies from private github repositories.\n\n    Links must be appendend by `-{StringWithAtLeastOneNumber}`\n    or something like that, so e.g. `-9231` works as well as\n    `1.1.0`. This is ignored by the setuptools, but has to be there.\n\n    Warnings:\n        to make pip respect the links, you have to use\n        `--process-dependency-links` switch. So e.g.:\n        `pip install --process-dependency-links {git-url}`\n\n    Returns:\n         list of packages, extras and dependency links.\n    \"\"\"\n    with open(os.path.normpath('requirements/requirements.txt')) as req_file:\n        defaults = [req.strip() for req in req_file.read().splitlines()]\n\n    links = []\n    requirements = []\n    for r in defaults:\n        if 'git+https' in r:\n            pkg = r.split('#')[-1]\n            links.append(r + '-9876543210')\n            requirements.append(pkg.replace('egg=', ''))\n        else:\n            requirements.append(r.strip())\n\n    extra_requirements = {}\n    full_requirements = []\n    for fn in os.listdir(os.path.normpath('./requirements')):\n        extra = []\n        if fn.startswith('requirements-') and fn.endswith('.txt'):\n            extra_name = fn.replace('requirements-', '').replace('.txt', '')\n            with open(os.path.normpath(f\"./requirements/{fn}\")) as fp:\n                extra = [req.strip() for req in fp.read().splitlines()]\n            extra_requirements[extra_name] = extra\n            full_requirements += extra\n\n    extra_requirements['all_extras'] = list(set(full_requirements))\n\n    full_handlers_requirements = []\n    handlers_dir_path = os.path.normpath('./mindsdb/integrations/handlers')\n    for fn in os.listdir(handlers_dir_path):\n        if os.path.isdir(os.path.join(handlers_dir_path, fn)) and fn.endswith(\n            \"_handler\"\n        ):\n            extra = []\n            for req_file_path in glob.glob(\n                os.path.join(handlers_dir_path, fn, \"requirements*.txt\")\n            ):\n                extra_name = fn.replace(\"_handler\", \"\")\n                file_name = os.path.basename(req_file_path)\n                if file_name != \"requirements.txt\":\n                    extra_name += \"-\" + file_name.replace(\"requirements_\", \"\").replace(\n                        \".txt\", \"\"\n                    )\n\n                # If requirements.txt in our handler folder, import them as our extra's requirements\n                if os.path.exists(req_file_path):\n                    with open(req_file_path) as fp:\n                        extra = expand_requirements_links(\n                            [req.strip() for req in fp.read().splitlines()]\n                        )\n\n                    extra_requirements[extra_name] = extra\n                    full_handlers_requirements += extra\n\n                # Even with no requirements in our handler, list the handler as an extra (with no reqs)\n                else:\n                    extra_requirements[extra_name] = []\n\n                # If this is a default extra and if we want to install defaults (enabled by default)\n                #   then add it to the default requirements needing to install\n                if (\n                    MINDSDB_PIP_INSTALL_DEFAULT_EXTRAS\n                    and extra_name in DEFAULT_PIP_EXTRAS\n                    and extra\n                ):\n                    requirements += extra\n\n    extra_requirements['all_handlers_extras'] = list(set(full_handlers_requirements))\n\n    Deps.pkgs = requirements\n    Deps.extras = extra_requirements\n    Deps.new_links = links\n\n    return Deps\n\n\ndeps = define_deps()\n\nsetup(\n    name=about['__title__'],\n    version=about['__version__'],\n    url=about['__github__'],\n    download_url=about['__pypi__'],\n    license=about['__license__'],\n    author=about['__author__'],\n    author_email=about['__email__'],\n    description=about['__description__'],\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    packages=find_packages(exclude=deps.pkgs_exclude),\n    install_requires=deps.pkgs,\n    dependency_links=deps.new_links,\n    extras_require=deps.extras,\n    include_package_data=True,\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: OS Independent\",\n    ],\n    python_requires=\">=3.9,<3.12\",\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}