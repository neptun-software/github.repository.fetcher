{
  "metadata": {
    "timestamp": 1736557277998,
    "page": 161,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "comfyanonymous/ComfyUI",
      "stars": 63057,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".ci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.06,
          "content": "/web/assets/** linguist-generated\n/web/** linguist-vendored\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.33,
          "content": "__pycache__/\n*.py[cod]\n/output/\n/input/\n!/input/example.png\n/models/\n/temp/\n/custom_nodes/\n!custom_nodes/example_node.py.example\nextra_model_paths.yaml\n/.vs\n.vscode/\n.idea/\nvenv/\n.venv/\n/web/extensions/*\n!/web/extensions/logging.js.example\n!/web/extensions/core/\n/tests-ui/data/object_info.json\n/user/\n*.log\nweb_custom_versions/\n.DS_Store\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 1.09,
          "content": "# Admins\n* @comfyanonymous\n\n# Note: Github teams syntax cannot be used here as the repo is not owned by Comfy-Org.\n# Inlined the team members for now.\n\n# Maintainers\n*.md @yoland68 @robinjhuang @huchenlei @webfiltered @pythongosssss @ltdrdata @Kosinkadink\n/tests/ @yoland68 @robinjhuang @huchenlei @webfiltered @pythongosssss @ltdrdata @Kosinkadink\n/tests-unit/ @yoland68 @robinjhuang @huchenlei @webfiltered @pythongosssss @ltdrdata @Kosinkadink\n/notebooks/ @yoland68 @robinjhuang @huchenlei @webfiltered @pythongosssss @ltdrdata @Kosinkadink\n/script_examples/ @yoland68 @robinjhuang @huchenlei @webfiltered @pythongosssss @ltdrdata @Kosinkadink\n/.github/ @yoland68 @robinjhuang @huchenlei @webfiltered @pythongosssss @ltdrdata @Kosinkadink\n\n# Python web server\n/api_server/ @yoland68 @robinjhuang @huchenlei @webfiltered @pythongosssss @ltdrdata\n/app/ @yoland68 @robinjhuang @huchenlei @webfiltered @pythongosssss @ltdrdata\n\n# Frontend assets\n/web/ @huchenlei @webfiltered @pythongosssss @yoland68 @robinjhuang\n\n# Extra nodes\n/comfy_extras/ @yoland68 @robinjhuang @huchenlei @pythongosssss @ltdrdata @Kosinkadink\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.84,
          "content": "# Contributing to ComfyUI\n\nWelcome, and thank you for your interest in contributing to ComfyUI!\n\nThere are several ways in which you can contribute, beyond writing code. The goal of this document is to provide a high-level overview of how you can get involved.\n\n## Asking Questions\n\nHave a question? Instead of opening an issue, please ask on [Discord](https://comfy.org/discord) or [Matrix](https://app.element.io/#/room/%23comfyui_space%3Amatrix.org) channels. Our team and the community will help you.\n\n## Providing Feedback\n\nYour comments and feedback are welcome, and the development team is available via a handful of different channels.\n\nSee the `#bug-report`, `#feature-request` and `#feedback` channels on Discord.\n\n## Reporting Issues\n\nHave you identified a reproducible problem in ComfyUI? Do you have a feature request? We want to hear about it! Here's how you can report your issue as effectively as possible.\n\n\n### Look For an Existing Issue\n\nBefore you create a new issue, please do a search in [open issues](https://github.com/comfyanonymous/ComfyUI/issues) to see if the issue or feature request has already been filed.\n\nIf you find your issue already exists, make relevant comments and add your [reaction](https://github.com/blog/2119-add-reactions-to-pull-requests-issues-and-comments). Use a reaction in place of a \"+1\" comment:\n\n* üëç - upvote\n* üëé - downvote\n\nIf you cannot find an existing issue that describes your bug or feature, create a new issue. We have an issue template in place to organize new issues.\n\n\n### Creating Pull Requests\n\n* Please refer to the article on [creating pull requests](https://github.com/comfyanonymous/ComfyUI/wiki/How-to-Contribute-Code) and contributing to this project.\n\n\n## Thank You\n\nYour contributions to open source, large or small, make great projects like this possible. Thank you for taking the time to contribute.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.33,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.86,
          "content": "<div align=\"center\">\n\n# ComfyUI\n**The most powerful and modular diffusion model GUI and backend.**\n\n\n[![Website][website-shield]][website-url]\n[![Dynamic JSON Badge][discord-shield]][discord-url]\n[![Matrix][matrix-shield]][matrix-url]\n<br>\n[![][github-release-shield]][github-release-link]\n[![][github-release-date-shield]][github-release-link]\n[![][github-downloads-shield]][github-downloads-link]\n[![][github-downloads-latest-shield]][github-downloads-link]\n\n[matrix-shield]: https://img.shields.io/badge/Matrix-000000?style=flat&logo=matrix&logoColor=white\n[matrix-url]: https://app.element.io/#/room/%23comfyui_space%3Amatrix.org\n[website-shield]: https://img.shields.io/badge/ComfyOrg-4285F4?style=flat\n[website-url]: https://www.comfy.org/\n<!-- Workaround to display total user from https://github.com/badges/shields/issues/4500#issuecomment-2060079995 -->\n[discord-shield]: https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fdiscord.com%2Fapi%2Finvites%2Fcomfyorg%3Fwith_counts%3Dtrue&query=%24.approximate_member_count&logo=discord&logoColor=white&label=Discord&color=green&suffix=%20total\n[discord-url]: https://www.comfy.org/discord\n\n[github-release-shield]: https://img.shields.io/github/v/release/comfyanonymous/ComfyUI?style=flat&sort=semver\n[github-release-link]: https://github.com/comfyanonymous/ComfyUI/releases\n[github-release-date-shield]: https://img.shields.io/github/release-date/comfyanonymous/ComfyUI?style=flat\n[github-downloads-shield]: https://img.shields.io/github/downloads/comfyanonymous/ComfyUI/total?style=flat\n[github-downloads-latest-shield]: https://img.shields.io/github/downloads/comfyanonymous/ComfyUI/latest/total?style=flat&label=downloads%40latest\n[github-downloads-link]: https://github.com/comfyanonymous/ComfyUI/releases\n\n![ComfyUI Screenshot](https://github.com/user-attachments/assets/7ccaf2c1-9b72-41ae-9a89-5688c94b7abe)\n</div>\n\nThis ui will let you design and execute advanced stable diffusion pipelines using a graph/nodes/flowchart based interface. For some workflow examples and see what ComfyUI can do you can check out:\n### [ComfyUI Examples](https://comfyanonymous.github.io/ComfyUI_examples/)\n\n### [Installing ComfyUI](#installing)\n\n## Features\n- Nodes/graph/flowchart interface to experiment and create complex Stable Diffusion workflows without needing to code anything.\n- Image Models\n   - SD1.x, SD2.x,\n   - [SDXL](https://comfyanonymous.github.io/ComfyUI_examples/sdxl/), [SDXL Turbo](https://comfyanonymous.github.io/ComfyUI_examples/sdturbo/)\n   - [Stable Cascade](https://comfyanonymous.github.io/ComfyUI_examples/stable_cascade/)\n   - [SD3 and SD3.5](https://comfyanonymous.github.io/ComfyUI_examples/sd3/)\n   - Pixart Alpha and Sigma\n   - [AuraFlow](https://comfyanonymous.github.io/ComfyUI_examples/aura_flow/)\n   - [HunyuanDiT](https://comfyanonymous.github.io/ComfyUI_examples/hunyuan_dit/)\n   - [Flux](https://comfyanonymous.github.io/ComfyUI_examples/flux/)\n- Video Models\n   - [Stable Video Diffusion](https://comfyanonymous.github.io/ComfyUI_examples/video/)\n   - [Mochi](https://comfyanonymous.github.io/ComfyUI_examples/mochi/)\n   - [LTX-Video](https://comfyanonymous.github.io/ComfyUI_examples/ltxv/)\n   - [Hunyuan Video](https://comfyanonymous.github.io/ComfyUI_examples/hunyuan_video/)\n- [Stable Audio](https://comfyanonymous.github.io/ComfyUI_examples/audio/)\n- Asynchronous Queue system\n- Many optimizations: Only re-executes the parts of the workflow that changes between executions.\n- Smart memory management: can automatically run models on GPUs with as low as 1GB vram.\n- Works even if you don't have a GPU with: ```--cpu``` (slow)\n- Can load ckpt, safetensors and diffusers models/checkpoints. Standalone VAEs and CLIP models.\n- Embeddings/Textual inversion\n- [Loras (regular, locon and loha)](https://comfyanonymous.github.io/ComfyUI_examples/lora/)\n- [Hypernetworks](https://comfyanonymous.github.io/ComfyUI_examples/hypernetworks/)\n- Loading full workflows (with seeds) from generated PNG, WebP and FLAC files.\n- Saving/Loading workflows as Json files.\n- Nodes interface can be used to create complex workflows like one for [Hires fix](https://comfyanonymous.github.io/ComfyUI_examples/2_pass_txt2img/) or much more advanced ones.\n- [Area Composition](https://comfyanonymous.github.io/ComfyUI_examples/area_composition/)\n- [Inpainting](https://comfyanonymous.github.io/ComfyUI_examples/inpaint/) with both regular and inpainting models.\n- [ControlNet and T2I-Adapter](https://comfyanonymous.github.io/ComfyUI_examples/controlnet/)\n- [Upscale Models (ESRGAN, ESRGAN variants, SwinIR, Swin2SR, etc...)](https://comfyanonymous.github.io/ComfyUI_examples/upscale_models/)\n- [unCLIP Models](https://comfyanonymous.github.io/ComfyUI_examples/unclip/)\n- [GLIGEN](https://comfyanonymous.github.io/ComfyUI_examples/gligen/)\n- [Model Merging](https://comfyanonymous.github.io/ComfyUI_examples/model_merging/)\n- [LCM models and Loras](https://comfyanonymous.github.io/ComfyUI_examples/lcm/)\n- Latent previews with [TAESD](#how-to-show-high-quality-previews)\n- Starts up very fast.\n- Works fully offline: will never download anything.\n- [Config file](extra_model_paths.yaml.example) to set the search paths for models.\n\nWorkflow examples can be found on the [Examples page](https://comfyanonymous.github.io/ComfyUI_examples/)\n\n## Shortcuts\n\n| Keybind                            | Explanation                                                                                                        |\n|------------------------------------|--------------------------------------------------------------------------------------------------------------------|\n| `Ctrl` + `Enter`                      | Queue up current graph for generation                                                                              |\n| `Ctrl` + `Shift` + `Enter`              | Queue up current graph as first for generation                                                                     |\n| `Ctrl` + `Alt` + `Enter`                | Cancel current generation                                                                                          |\n| `Ctrl` + `Z`/`Ctrl` + `Y`                 | Undo/Redo                                                                                                          |\n| `Ctrl` + `S`                          | Save workflow                                                                                                      |\n| `Ctrl` + `O`                          | Load workflow                                                                                                      |\n| `Ctrl` + `A`                          | Select all nodes                                                                                                   |\n| `Alt `+ `C`                           | Collapse/uncollapse selected nodes                                                                                 |\n| `Ctrl` + `M`                          | Mute/unmute selected nodes                                                                                         |\n| `Ctrl` + `B`                           | Bypass selected nodes (acts like the node was removed from the graph and the wires reconnected through)            |\n| `Delete`/`Backspace`                   | Delete selected nodes                                                                                              |\n| `Ctrl` + `Backspace`                   | Delete the current graph                                                                                           |\n| `Space`                              | Move the canvas around when held and moving the cursor                                                             |\n| `Ctrl`/`Shift` + `Click`                 | Add clicked node to selection                                                                                      |\n| `Ctrl` + `C`/`Ctrl` + `V`                  | Copy and paste selected nodes (without maintaining connections to outputs of unselected nodes)                     |\n| `Ctrl` + `C`/`Ctrl` + `Shift` + `V`          | Copy and paste selected nodes (maintaining connections from outputs of unselected nodes to inputs of pasted nodes) |\n| `Shift` + `Drag`                       | Move multiple selected nodes at the same time                                                                      |\n| `Ctrl` + `D`                           | Load default graph                                                                                                 |\n| `Alt` + `+`                          | Canvas Zoom in                                                                                                     |\n| `Alt` + `-`                          | Canvas Zoom out                                                                                                    |\n| `Ctrl` + `Shift` + LMB + Vertical drag | Canvas Zoom in/out                                                                                                 |\n| `P`                                  | Pin/Unpin selected nodes                                                                                           |\n| `Ctrl` + `G`                           | Group selected nodes                                                                                               |\n| `Q`                                 | Toggle visibility of the queue                                                                                     |\n| `H`                                  | Toggle visibility of history                                                                                       |\n| `R`                                  | Refresh graph                                                                                                      |\n| `F`                                  | Show/Hide menu                                                                                                      |\n| `.`                                  | Fit view to selection (Whole graph when nothing is selected)                                                        |\n| Double-Click LMB                   | Open node quick search palette                                                                                     |\n| `Shift` + Drag                       | Move multiple wires at once                                                                                        |\n| `Ctrl` + `Alt` + LMB                   | Disconnect all wires from clicked slot                                                                             |\n\n`Ctrl` can also be replaced with `Cmd` instead for macOS users\n\n# Installing\n\n## Windows\n\nThere is a portable standalone build for Windows that should work for running on Nvidia GPUs or for running on your CPU only on the [releases page](https://github.com/comfyanonymous/ComfyUI/releases).\n\n### [Direct link to download](https://github.com/comfyanonymous/ComfyUI/releases/latest/download/ComfyUI_windows_portable_nvidia.7z)\n\nSimply download, extract with [7-Zip](https://7-zip.org) and run. Make sure you put your Stable Diffusion checkpoints/models (the huge ckpt/safetensors files) in: ComfyUI\\models\\checkpoints\n\nIf you have trouble extracting it, right click the file -> properties -> unblock\n\n#### How do I share models between another UI and ComfyUI?\n\nSee the [Config file](extra_model_paths.yaml.example) to set the search paths for models. In the standalone windows build you can find this file in the ComfyUI directory. Rename this file to extra_model_paths.yaml and edit it with your favorite text editor.\n\n## Jupyter Notebook\n\nTo run it on services like paperspace, kaggle or colab you can use my [Jupyter Notebook](notebooks/comfyui_colab.ipynb)\n\n## Manual Install (Windows, Linux)\n\nNote that some dependencies do not yet support python 3.13 so using 3.12 is recommended.\n\nGit clone this repo.\n\nPut your SD checkpoints (the huge ckpt/safetensors files) in: models/checkpoints\n\nPut your VAE in: models/vae\n\n\n### AMD GPUs (Linux only)\nAMD users can install rocm and pytorch with pip if you don't have it already installed, this is the command to install the stable version:\n\n```pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/rocm6.2```\n\nThis is the command to install the nightly with ROCm 6.2 which might have some performance improvements:\n\n```pip install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/rocm6.2.4```\n\n### Intel GPUs (Windows and Linux)\n\n(Option 1) Intel Arc GPU users can install native PyTorch with torch.xpu support using pip (currently available in PyTorch nightly builds). More information can be found [here](https://pytorch.org/docs/main/notes/get_start_xpu.html)\n  \n1. To install PyTorch nightly, use the following command:\n\n```pip install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/xpu```\n\n2. Launch ComfyUI by running `python main.py`\n\n\n(Option 2) Alternatively, Intel GPUs supported by Intel Extension for PyTorch (IPEX) can leverage IPEX for improved performance.\n\n1. For Intel¬Æ Arc‚Ñ¢ A-Series Graphics utilizing IPEX, create a conda environment and use the commands below:\n\n```\nconda install libuv\npip install torch==2.3.1.post0+cxx11.abi torchvision==0.18.1.post0+cxx11.abi torchaudio==2.3.1.post0+cxx11.abi intel-extension-for-pytorch==2.3.110.post0+xpu --extra-index-url https://pytorch-extension.intel.com/release-whl/stable/xpu/us/ --extra-index-url https://pytorch-extension.intel.com/release-whl/stable/xpu/cn/\n```\n\nFor other supported Intel GPUs with IPEX, visit [Installation](https://intel.github.io/intel-extension-for-pytorch/index.html#installation?platform=gpu) for more information.\n\nAdditional discussion and help can be found [here](https://github.com/comfyanonymous/ComfyUI/discussions/476).\n\n### NVIDIA\n\nNvidia users should install stable pytorch using this command:\n\n```pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu124```\n\nThis is the command to install pytorch nightly instead which might have performance improvements:\n\n```pip install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cu126```\n\n#### Troubleshooting\n\nIf you get the \"Torch not compiled with CUDA enabled\" error, uninstall torch with:\n\n```pip uninstall torch```\n\nAnd install it again with the command above.\n\n### Dependencies\n\nInstall the dependencies by opening your terminal inside the ComfyUI folder and:\n\n```pip install -r requirements.txt```\n\nAfter this you should have everything installed and can proceed to running ComfyUI.\n\n### Others:\n\n#### Apple Mac silicon\n\nYou can install ComfyUI in Apple Mac silicon (M1 or M2) with any recent macOS version.\n\n1. Install pytorch nightly. For instructions, read the [Accelerated PyTorch training on Mac](https://developer.apple.com/metal/pytorch/) Apple Developer guide (make sure to install the latest pytorch nightly).\n1. Follow the [ComfyUI manual installation](#manual-install-windows-linux) instructions for Windows and Linux.\n1. Install the ComfyUI [dependencies](#dependencies). If you have another Stable Diffusion UI [you might be able to reuse the dependencies](#i-already-have-another-ui-for-stable-diffusion-installed-do-i-really-have-to-install-all-of-these-dependencies).\n1. Launch ComfyUI by running `python main.py`\n\n> **Note**: Remember to add your models, VAE, LoRAs etc. to the corresponding Comfy folders, as discussed in [ComfyUI manual installation](#manual-install-windows-linux).\n\n#### DirectML (AMD Cards on Windows)\n\n```pip install torch-directml``` Then you can launch ComfyUI with: ```python main.py --directml```\n\n#### Ascend NPUs\n\nFor models compatible with Ascend Extension for PyTorch (torch_npu). To get started, ensure your environment meets the prerequisites outlined on the [installation](https://ascend.github.io/docs/sources/ascend/quick_install.html) page. Here's a step-by-step guide tailored to your platform and installation method:\n\n1. Begin by installing the recommended or newer kernel version for Linux as specified in the Installation page of torch-npu, if necessary.\n2. Proceed with the installation of Ascend Basekit, which includes the driver, firmware, and CANN, following the instructions provided for your specific platform.\n3. Next, install the necessary packages for torch-npu by adhering to the platform-specific instructions on the [Installation](https://ascend.github.io/docs/sources/pytorch/install.html#pytorch) page.\n4. Finally, adhere to the [ComfyUI manual installation](#manual-install-windows-linux) guide for Linux. Once all components are installed, you can run ComfyUI as described earlier.\n\n\n# Running\n\n```python main.py```\n\n### For AMD cards not officially supported by ROCm\n\nTry running it with this command if you have issues:\n\nFor 6700, 6600 and maybe other RDNA2 or older: ```HSA_OVERRIDE_GFX_VERSION=10.3.0 python main.py```\n\nFor AMD 7600 and maybe other RDNA3 cards: ```HSA_OVERRIDE_GFX_VERSION=11.0.0 python main.py```\n\n### AMD ROCm Tips\n\nYou can enable experimental memory efficient attention on pytorch 2.5 in ComfyUI on RDNA3 and potentially other AMD GPUs using this command:\n\n```TORCH_ROCM_AOTRITON_ENABLE_EXPERIMENTAL=1 python main.py --use-pytorch-cross-attention```\n\nYou can also try setting this env variable `PYTORCH_TUNABLEOP_ENABLED=1` which might speed things up at the cost of a very slow initial run.\n\n# Notes\n\nOnly parts of the graph that have an output with all the correct inputs will be executed.\n\nOnly parts of the graph that change from each execution to the next will be executed, if you submit the same graph twice only the first will be executed. If you change the last part of the graph only the part you changed and the part that depends on it will be executed.\n\nDragging a generated png on the webpage or loading one will give you the full workflow including seeds that were used to create it.\n\nYou can use () to change emphasis of a word or phrase like: (good code:1.2) or (bad code:0.8). The default emphasis for () is 1.1. To use () characters in your actual prompt escape them like \\\\( or \\\\).\n\nYou can use {day|night}, for wildcard/dynamic prompts. With this syntax \"{wild|card|test}\" will be randomly replaced by either \"wild\", \"card\" or \"test\" by the frontend every time you queue the prompt. To use {} characters in your actual prompt escape them like: \\\\{ or \\\\}.\n\nDynamic prompts also support C-style comments, like `// comment` or `/* comment */`.\n\nTo use a textual inversion concepts/embeddings in a text prompt put them in the models/embeddings directory and use them in the CLIPTextEncode node like this (you can omit the .pt extension):\n\n```embedding:embedding_filename.pt```\n\n\n## How to show high-quality previews?\n\nUse ```--preview-method auto``` to enable previews.\n\nThe default installation includes a fast latent preview method that's low-resolution. To enable higher-quality previews with [TAESD](https://github.com/madebyollin/taesd), download the [taesd_decoder.pth, taesdxl_decoder.pth, taesd3_decoder.pth and taef1_decoder.pth](https://github.com/madebyollin/taesd/) and place them in the `models/vae_approx` folder. Once they're installed, restart ComfyUI and launch it with `--preview-method taesd` to enable high-quality previews.\n\n## How to use TLS/SSL?\nGenerate a self-signed certificate (not appropriate for shared/production use) and key by running the command: `openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -sha256 -days 3650 -nodes -subj \"/C=XX/ST=StateName/L=CityName/O=CompanyName/OU=CompanySectionName/CN=CommonNameOrHostname\"`\n\nUse `--tls-keyfile key.pem --tls-certfile cert.pem` to enable TLS/SSL, the app will now be accessible with `https://...` instead of `http://...`.\n\n> Note: Windows users can use [alexisrolland/docker-openssl](https://github.com/alexisrolland/docker-openssl) or one of the [3rd party binary distributions](https://wiki.openssl.org/index.php/Binaries) to run the command example above. \n<br/><br/>If you use a container, note that the volume mount `-v` can be a relative path so `... -v \".\\:/openssl-certs\" ...` would create the key & cert files in the current directory of your command prompt or powershell terminal.\n\n## Support and dev channel\n\n[Matrix space: #comfyui_space:matrix.org](https://app.element.io/#/room/%23comfyui_space%3Amatrix.org) (it's like discord but open source).\n\nSee also: [https://www.comfy.org/](https://www.comfy.org/)\n\n## Frontend Development\n\nAs of August 15, 2024, we have transitioned to a new frontend, which is now hosted in a separate repository: [ComfyUI Frontend](https://github.com/Comfy-Org/ComfyUI_frontend). This repository now hosts the compiled JS (from TS/Vue) under the `web/` directory.\n\n### Reporting Issues and Requesting Features\n\nFor any bugs, issues, or feature requests related to the frontend, please use the [ComfyUI Frontend repository](https://github.com/Comfy-Org/ComfyUI_frontend). This will help us manage and address frontend-specific concerns more efficiently.\n\n### Using the Latest Frontend\n\nThe new frontend is now the default for ComfyUI. However, please note:\n\n1. The frontend in the main ComfyUI repository is updated weekly.\n2. Daily releases are available in the separate frontend repository.\n\nTo use the most up-to-date frontend version:\n\n1. For the latest daily release, launch ComfyUI with this command line argument:\n\n   ```\n   --front-end-version Comfy-Org/ComfyUI_frontend@latest\n   ```\n\n2. For a specific version, replace `latest` with the desired version number:\n\n   ```\n   --front-end-version Comfy-Org/ComfyUI_frontend@1.2.2\n   ```\n\nThis approach allows you to easily switch between the stable weekly release and the cutting-edge daily updates, or even specific versions for testing purposes.\n\n### Accessing the Legacy Frontend\n\nIf you need to use the legacy frontend for any reason, you can access it using the following command line argument:\n\n```\n--front-end-version Comfy-Org/ComfyUI_legacy_frontend@latest\n```\n\nThis will use a snapshot of the legacy frontend preserved in the [ComfyUI Legacy Frontend repository](https://github.com/Comfy-Org/ComfyUI_legacy_frontend).\n\n# QA\n\n### Which GPU should I buy for this?\n\n[See this page for some recommendations](https://github.com/comfyanonymous/ComfyUI/wiki/Which-GPU-should-I-buy-for-ComfyUI)\n"
        },
        {
          "name": "api_server",
          "type": "tree",
          "content": null
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "comfy",
          "type": "tree",
          "content": null
        },
        {
          "name": "comfy_execution",
          "type": "tree",
          "content": null
        },
        {
          "name": "comfy_extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "cuda_malloc.py",
          "type": "blob",
          "size": 3.45,
          "content": "import os\nimport importlib.util\nfrom comfy.cli_args import args\nimport subprocess\n\n#Can't use pytorch to get the GPU names because the cuda malloc has to be set before the first import.\ndef get_gpu_names():\n    if os.name == 'nt':\n        import ctypes\n\n        # Define necessary C structures and types\n        class DISPLAY_DEVICEA(ctypes.Structure):\n            _fields_ = [\n                ('cb', ctypes.c_ulong),\n                ('DeviceName', ctypes.c_char * 32),\n                ('DeviceString', ctypes.c_char * 128),\n                ('StateFlags', ctypes.c_ulong),\n                ('DeviceID', ctypes.c_char * 128),\n                ('DeviceKey', ctypes.c_char * 128)\n            ]\n\n        # Load user32.dll\n        user32 = ctypes.windll.user32\n\n        # Call EnumDisplayDevicesA\n        def enum_display_devices():\n            device_info = DISPLAY_DEVICEA()\n            device_info.cb = ctypes.sizeof(device_info)\n            device_index = 0\n            gpu_names = set()\n\n            while user32.EnumDisplayDevicesA(None, device_index, ctypes.byref(device_info), 0):\n                device_index += 1\n                gpu_names.add(device_info.DeviceString.decode('utf-8'))\n            return gpu_names\n        return enum_display_devices()\n    else:\n        gpu_names = set()\n        out = subprocess.check_output(['nvidia-smi', '-L'])\n        for l in out.split(b'\\n'):\n            if len(l) > 0:\n                gpu_names.add(l.decode('utf-8').split(' (UUID')[0])\n        return gpu_names\n\nblacklist = {\"GeForce GTX TITAN X\", \"GeForce GTX 980\", \"GeForce GTX 970\", \"GeForce GTX 960\", \"GeForce GTX 950\", \"GeForce 945M\",\n                \"GeForce 940M\", \"GeForce 930M\", \"GeForce 920M\", \"GeForce 910M\", \"GeForce GTX 750\", \"GeForce GTX 745\", \"Quadro K620\",\n                \"Quadro K1200\", \"Quadro K2200\", \"Quadro M500\", \"Quadro M520\", \"Quadro M600\", \"Quadro M620\", \"Quadro M1000\",\n                \"Quadro M1200\", \"Quadro M2000\", \"Quadro M2200\", \"Quadro M3000\", \"Quadro M4000\", \"Quadro M5000\", \"Quadro M5500\", \"Quadro M6000\",\n                \"GeForce MX110\", \"GeForce MX130\", \"GeForce 830M\", \"GeForce 840M\", \"GeForce GTX 850M\", \"GeForce GTX 860M\",\n                \"GeForce GTX 1650\", \"GeForce GTX 1630\", \"Tesla M4\", \"Tesla M6\", \"Tesla M10\", \"Tesla M40\", \"Tesla M60\"\n                }\n\ndef cuda_malloc_supported():\n    try:\n        names = get_gpu_names()\n    except:\n        names = set()\n    for x in names:\n        if \"NVIDIA\" in x:\n            for b in blacklist:\n                if b in x:\n                    return False\n    return True\n\n\nif not args.cuda_malloc:\n    try:\n        version = \"\"\n        torch_spec = importlib.util.find_spec(\"torch\")\n        for folder in torch_spec.submodule_search_locations:\n            ver_file = os.path.join(folder, \"version.py\")\n            if os.path.isfile(ver_file):\n                spec = importlib.util.spec_from_file_location(\"torch_version_import\", ver_file)\n                module = importlib.util.module_from_spec(spec)\n                spec.loader.exec_module(module)\n                version = module.__version__\n        if int(version[0]) >= 2: #enable by default for torch version 2.0 and up\n            args.cuda_malloc = cuda_malloc_supported()\n    except:\n        pass\n\n\nif args.cuda_malloc and not args.disable_cuda_malloc:\n    env_var = os.environ.get('PYTORCH_CUDA_ALLOC_CONF', None)\n    if env_var is None:\n        env_var = \"backend:cudaMallocAsync\"\n    else:\n        env_var += \",backend:cudaMallocAsync\"\n\n    os.environ['PYTORCH_CUDA_ALLOC_CONF'] = env_var\n"
        },
        {
          "name": "custom_nodes",
          "type": "tree",
          "content": null
        },
        {
          "name": "execution.py",
          "type": "blob",
          "size": 38.98,
          "content": "import sys\nimport copy\nimport logging\nimport threading\nimport heapq\nimport time\nimport traceback\nfrom enum import Enum\nimport inspect\nfrom typing import List, Literal, NamedTuple, Optional\n\nimport torch\nimport nodes\n\nimport comfy.model_management\nfrom comfy_execution.graph import get_input_info, ExecutionList, DynamicPrompt, ExecutionBlocker\nfrom comfy_execution.graph_utils import is_link, GraphBuilder\nfrom comfy_execution.caching import HierarchicalCache, LRUCache, CacheKeySetInputSignature, CacheKeySetID\nfrom comfy_execution.validation import validate_node_input\n\nclass ExecutionResult(Enum):\n    SUCCESS = 0\n    FAILURE = 1\n    PENDING = 2\n\nclass DuplicateNodeError(Exception):\n    pass\n\nclass IsChangedCache:\n    def __init__(self, dynprompt, outputs_cache):\n        self.dynprompt = dynprompt\n        self.outputs_cache = outputs_cache\n        self.is_changed = {}\n\n    def get(self, node_id):\n        if node_id in self.is_changed:\n            return self.is_changed[node_id]\n\n        node = self.dynprompt.get_node(node_id)\n        class_type = node[\"class_type\"]\n        class_def = nodes.NODE_CLASS_MAPPINGS[class_type]\n        if not hasattr(class_def, \"IS_CHANGED\"):\n            self.is_changed[node_id] = False\n            return self.is_changed[node_id]\n\n        if \"is_changed\" in node:\n            self.is_changed[node_id] = node[\"is_changed\"]\n            return self.is_changed[node_id]\n\n        # Intentionally do not use cached outputs here. We only want constants in IS_CHANGED\n        input_data_all, _ = get_input_data(node[\"inputs\"], class_def, node_id, None)\n        try:\n            is_changed = _map_node_over_list(class_def, input_data_all, \"IS_CHANGED\")\n            node[\"is_changed\"] = [None if isinstance(x, ExecutionBlocker) else x for x in is_changed]\n        except Exception as e:\n            logging.warning(\"WARNING: {}\".format(e))\n            node[\"is_changed\"] = float(\"NaN\")\n        finally:\n            self.is_changed[node_id] = node[\"is_changed\"]\n        return self.is_changed[node_id]\n\nclass CacheSet:\n    def __init__(self, lru_size=None):\n        if lru_size is None or lru_size == 0:\n            self.init_classic_cache()\n        else:\n            self.init_lru_cache(lru_size)\n        self.all = [self.outputs, self.ui, self.objects]\n\n    # Useful for those with ample RAM/VRAM -- allows experimenting without\n    # blowing away the cache every time\n    def init_lru_cache(self, cache_size):\n        self.outputs = LRUCache(CacheKeySetInputSignature, max_size=cache_size)\n        self.ui = LRUCache(CacheKeySetInputSignature, max_size=cache_size)\n        self.objects = HierarchicalCache(CacheKeySetID)\n\n    # Performs like the old cache -- dump data ASAP\n    def init_classic_cache(self):\n        self.outputs = HierarchicalCache(CacheKeySetInputSignature)\n        self.ui = HierarchicalCache(CacheKeySetInputSignature)\n        self.objects = HierarchicalCache(CacheKeySetID)\n\n    def recursive_debug_dump(self):\n        result = {\n            \"outputs\": self.outputs.recursive_debug_dump(),\n            \"ui\": self.ui.recursive_debug_dump(),\n        }\n        return result\n\ndef get_input_data(inputs, class_def, unique_id, outputs=None, dynprompt=None, extra_data={}):\n    valid_inputs = class_def.INPUT_TYPES()\n    input_data_all = {}\n    missing_keys = {}\n    for x in inputs:\n        input_data = inputs[x]\n        input_type, input_category, input_info = get_input_info(class_def, x, valid_inputs)\n        def mark_missing():\n            missing_keys[x] = True\n            input_data_all[x] = (None,)\n        if is_link(input_data) and (not input_info or not input_info.get(\"rawLink\", False)):\n            input_unique_id = input_data[0]\n            output_index = input_data[1]\n            if outputs is None:\n                mark_missing()\n                continue # This might be a lazily-evaluated input\n            cached_output = outputs.get(input_unique_id)\n            if cached_output is None:\n                mark_missing()\n                continue\n            if output_index >= len(cached_output):\n                mark_missing()\n                continue\n            obj = cached_output[output_index]\n            input_data_all[x] = obj\n        elif input_category is not None:\n            input_data_all[x] = [input_data]\n\n    if \"hidden\" in valid_inputs:\n        h = valid_inputs[\"hidden\"]\n        for x in h:\n            if h[x] == \"PROMPT\":\n                input_data_all[x] = [dynprompt.get_original_prompt() if dynprompt is not None else {}]\n            if h[x] == \"DYNPROMPT\":\n                input_data_all[x] = [dynprompt]\n            if h[x] == \"EXTRA_PNGINFO\":\n                input_data_all[x] = [extra_data.get('extra_pnginfo', None)]\n            if h[x] == \"UNIQUE_ID\":\n                input_data_all[x] = [unique_id]\n    return input_data_all, missing_keys\n\nmap_node_over_list = None #Don't hook this please\n\ndef _map_node_over_list(obj, input_data_all, func, allow_interrupt=False, execution_block_cb=None, pre_execute_cb=None):\n    # check if node wants the lists\n    input_is_list = getattr(obj, \"INPUT_IS_LIST\", False)\n\n    if len(input_data_all) == 0:\n        max_len_input = 0\n    else:\n        max_len_input = max(len(x) for x in input_data_all.values())\n\n    # get a slice of inputs, repeat last input when list isn't long enough\n    def slice_dict(d, i):\n        return {k: v[i if len(v) > i else -1] for k, v in d.items()}\n\n    results = []\n    def process_inputs(inputs, index=None, input_is_list=False):\n        if allow_interrupt:\n            nodes.before_node_execution()\n        execution_block = None\n        for k, v in inputs.items():\n            if input_is_list:\n                for e in v:\n                    if isinstance(e, ExecutionBlocker):\n                        v = e\n                        break\n            if isinstance(v, ExecutionBlocker):\n                execution_block = execution_block_cb(v) if execution_block_cb else v\n                break\n        if execution_block is None:\n            if pre_execute_cb is not None and index is not None:\n                pre_execute_cb(index)\n            results.append(getattr(obj, func)(**inputs))\n        else:\n            results.append(execution_block)\n\n    if input_is_list:\n        process_inputs(input_data_all, 0, input_is_list=input_is_list)\n    elif max_len_input == 0:\n        process_inputs({})\n    else:\n        for i in range(max_len_input):\n            input_dict = slice_dict(input_data_all, i)\n            process_inputs(input_dict, i)\n    return results\n\ndef merge_result_data(results, obj):\n    # check which outputs need concatenating\n    output = []\n    output_is_list = [False] * len(results[0])\n    if hasattr(obj, \"OUTPUT_IS_LIST\"):\n        output_is_list = obj.OUTPUT_IS_LIST\n\n    # merge node execution results\n    for i, is_list in zip(range(len(results[0])), output_is_list):\n        if is_list:\n            value = []\n            for o in results:\n                if isinstance(o[i], ExecutionBlocker):\n                    value.append(o[i])\n                else:\n                    value.extend(o[i])\n            output.append(value)\n        else:\n            output.append([o[i] for o in results])\n    return output\n\ndef get_output_data(obj, input_data_all, execution_block_cb=None, pre_execute_cb=None):\n    results = []\n    uis = []\n    subgraph_results = []\n    return_values = _map_node_over_list(obj, input_data_all, obj.FUNCTION, allow_interrupt=True, execution_block_cb=execution_block_cb, pre_execute_cb=pre_execute_cb)\n    has_subgraph = False\n    for i in range(len(return_values)):\n        r = return_values[i]\n        if isinstance(r, dict):\n            if 'ui' in r:\n                uis.append(r['ui'])\n            if 'expand' in r:\n                # Perform an expansion, but do not append results\n                has_subgraph = True\n                new_graph = r['expand']\n                result = r.get(\"result\", None)\n                if isinstance(result, ExecutionBlocker):\n                    result = tuple([result] * len(obj.RETURN_TYPES))\n                subgraph_results.append((new_graph, result))\n            elif 'result' in r:\n                result = r.get(\"result\", None)\n                if isinstance(result, ExecutionBlocker):\n                    result = tuple([result] * len(obj.RETURN_TYPES))\n                results.append(result)\n                subgraph_results.append((None, result))\n        else:\n            if isinstance(r, ExecutionBlocker):\n                r = tuple([r] * len(obj.RETURN_TYPES))\n            results.append(r)\n            subgraph_results.append((None, r))\n\n    if has_subgraph:\n        output = subgraph_results\n    elif len(results) > 0:\n        output = merge_result_data(results, obj)\n    else:\n        output = []\n    ui = dict()\n    if len(uis) > 0:\n        ui = {k: [y for x in uis for y in x[k]] for k in uis[0].keys()}\n    return output, ui, has_subgraph\n\ndef format_value(x):\n    if x is None:\n        return None\n    elif isinstance(x, (int, float, bool, str)):\n        return x\n    else:\n        return str(x)\n\ndef execute(server, dynprompt, caches, current_item, extra_data, executed, prompt_id, execution_list, pending_subgraph_results):\n    unique_id = current_item\n    real_node_id = dynprompt.get_real_node_id(unique_id)\n    display_node_id = dynprompt.get_display_node_id(unique_id)\n    parent_node_id = dynprompt.get_parent_node_id(unique_id)\n    inputs = dynprompt.get_node(unique_id)['inputs']\n    class_type = dynprompt.get_node(unique_id)['class_type']\n    class_def = nodes.NODE_CLASS_MAPPINGS[class_type]\n    if caches.outputs.get(unique_id) is not None:\n        if server.client_id is not None:\n            cached_output = caches.ui.get(unique_id) or {}\n            server.send_sync(\"executed\", { \"node\": unique_id, \"display_node\": display_node_id, \"output\": cached_output.get(\"output\",None), \"prompt_id\": prompt_id }, server.client_id)\n        return (ExecutionResult.SUCCESS, None, None)\n\n    input_data_all = None\n    try:\n        if unique_id in pending_subgraph_results:\n            cached_results = pending_subgraph_results[unique_id]\n            resolved_outputs = []\n            for is_subgraph, result in cached_results:\n                if not is_subgraph:\n                    resolved_outputs.append(result)\n                else:\n                    resolved_output = []\n                    for r in result:\n                        if is_link(r):\n                            source_node, source_output = r[0], r[1]\n                            node_output = caches.outputs.get(source_node)[source_output]\n                            for o in node_output:\n                                resolved_output.append(o)\n\n                        else:\n                            resolved_output.append(r)\n                    resolved_outputs.append(tuple(resolved_output))\n            output_data = merge_result_data(resolved_outputs, class_def)\n            output_ui = []\n            has_subgraph = False\n        else:\n            input_data_all, missing_keys = get_input_data(inputs, class_def, unique_id, caches.outputs, dynprompt, extra_data)\n            if server.client_id is not None:\n                server.last_node_id = display_node_id\n                server.send_sync(\"executing\", { \"node\": unique_id, \"display_node\": display_node_id, \"prompt_id\": prompt_id }, server.client_id)\n\n            obj = caches.objects.get(unique_id)\n            if obj is None:\n                obj = class_def()\n                caches.objects.set(unique_id, obj)\n\n            if hasattr(obj, \"check_lazy_status\"):\n                required_inputs = _map_node_over_list(obj, input_data_all, \"check_lazy_status\", allow_interrupt=True)\n                required_inputs = set(sum([r for r in required_inputs if isinstance(r,list)], []))\n                required_inputs = [x for x in required_inputs if isinstance(x,str) and (\n                    x not in input_data_all or x in missing_keys\n                )]\n                if len(required_inputs) > 0:\n                    for i in required_inputs:\n                        execution_list.make_input_strong_link(unique_id, i)\n                    return (ExecutionResult.PENDING, None, None)\n\n            def execution_block_cb(block):\n                if block.message is not None:\n                    mes = {\n                        \"prompt_id\": prompt_id,\n                        \"node_id\": unique_id,\n                        \"node_type\": class_type,\n                        \"executed\": list(executed),\n\n                        \"exception_message\": f\"Execution Blocked: {block.message}\",\n                        \"exception_type\": \"ExecutionBlocked\",\n                        \"traceback\": [],\n                        \"current_inputs\": [],\n                        \"current_outputs\": [],\n                    }\n                    server.send_sync(\"execution_error\", mes, server.client_id)\n                    return ExecutionBlocker(None)\n                else:\n                    return block\n            def pre_execute_cb(call_index):\n                GraphBuilder.set_default_prefix(unique_id, call_index, 0)\n            output_data, output_ui, has_subgraph = get_output_data(obj, input_data_all, execution_block_cb=execution_block_cb, pre_execute_cb=pre_execute_cb)\n        if len(output_ui) > 0:\n            caches.ui.set(unique_id, {\n                \"meta\": {\n                    \"node_id\": unique_id,\n                    \"display_node\": display_node_id,\n                    \"parent_node\": parent_node_id,\n                    \"real_node_id\": real_node_id,\n                },\n                \"output\": output_ui\n            })\n            if server.client_id is not None:\n                server.send_sync(\"executed\", { \"node\": unique_id, \"display_node\": display_node_id, \"output\": output_ui, \"prompt_id\": prompt_id }, server.client_id)\n        if has_subgraph:\n            cached_outputs = []\n            new_node_ids = []\n            new_output_ids = []\n            new_output_links = []\n            for i in range(len(output_data)):\n                new_graph, node_outputs = output_data[i]\n                if new_graph is None:\n                    cached_outputs.append((False, node_outputs))\n                else:\n                    # Check for conflicts\n                    for node_id in new_graph.keys():\n                        if dynprompt.has_node(node_id):\n                            raise DuplicateNodeError(f\"Attempt to add duplicate node {node_id}. Ensure node ids are unique and deterministic or use graph_utils.GraphBuilder.\")\n                    for node_id, node_info in new_graph.items():\n                        new_node_ids.append(node_id)\n                        display_id = node_info.get(\"override_display_id\", unique_id)\n                        dynprompt.add_ephemeral_node(node_id, node_info, unique_id, display_id)\n                        # Figure out if the newly created node is an output node\n                        class_type = node_info[\"class_type\"]\n                        class_def = nodes.NODE_CLASS_MAPPINGS[class_type]\n                        if hasattr(class_def, 'OUTPUT_NODE') and class_def.OUTPUT_NODE == True:\n                            new_output_ids.append(node_id)\n                    for i in range(len(node_outputs)):\n                        if is_link(node_outputs[i]):\n                            from_node_id, from_socket = node_outputs[i][0], node_outputs[i][1]\n                            new_output_links.append((from_node_id, from_socket))\n                    cached_outputs.append((True, node_outputs))\n            new_node_ids = set(new_node_ids)\n            for cache in caches.all:\n                cache.ensure_subcache_for(unique_id, new_node_ids).clean_unused()\n            for node_id in new_output_ids:\n                execution_list.add_node(node_id)\n            for link in new_output_links:\n                execution_list.add_strong_link(link[0], link[1], unique_id)\n            pending_subgraph_results[unique_id] = cached_outputs\n            return (ExecutionResult.PENDING, None, None)\n        caches.outputs.set(unique_id, output_data)\n    except comfy.model_management.InterruptProcessingException as iex:\n        logging.info(\"Processing interrupted\")\n\n        # skip formatting inputs/outputs\n        error_details = {\n            \"node_id\": real_node_id,\n        }\n\n        return (ExecutionResult.FAILURE, error_details, iex)\n    except Exception as ex:\n        typ, _, tb = sys.exc_info()\n        exception_type = full_type_name(typ)\n        input_data_formatted = {}\n        if input_data_all is not None:\n            input_data_formatted = {}\n            for name, inputs in input_data_all.items():\n                input_data_formatted[name] = [format_value(x) for x in inputs]\n\n        logging.error(f\"!!! Exception during processing !!! {ex}\")\n        logging.error(traceback.format_exc())\n\n        error_details = {\n            \"node_id\": real_node_id,\n            \"exception_message\": str(ex),\n            \"exception_type\": exception_type,\n            \"traceback\": traceback.format_tb(tb),\n            \"current_inputs\": input_data_formatted\n        }\n        if isinstance(ex, comfy.model_management.OOM_EXCEPTION):\n            logging.error(\"Got an OOM, unloading all loaded models.\")\n            comfy.model_management.unload_all_models()\n\n        return (ExecutionResult.FAILURE, error_details, ex)\n\n    executed.add(unique_id)\n\n    return (ExecutionResult.SUCCESS, None, None)\n\nclass PromptExecutor:\n    def __init__(self, server, lru_size=None):\n        self.lru_size = lru_size\n        self.server = server\n        self.reset()\n\n    def reset(self):\n        self.caches = CacheSet(self.lru_size)\n        self.status_messages = []\n        self.success = True\n\n    def add_message(self, event, data: dict, broadcast: bool):\n        data = {\n            **data,\n            \"timestamp\": int(time.time() * 1000),\n        }\n        self.status_messages.append((event, data))\n        if self.server.client_id is not None or broadcast:\n            self.server.send_sync(event, data, self.server.client_id)\n\n    def handle_execution_error(self, prompt_id, prompt, current_outputs, executed, error, ex):\n        node_id = error[\"node_id\"]\n        class_type = prompt[node_id][\"class_type\"]\n\n        # First, send back the status to the frontend depending\n        # on the exception type\n        if isinstance(ex, comfy.model_management.InterruptProcessingException):\n            mes = {\n                \"prompt_id\": prompt_id,\n                \"node_id\": node_id,\n                \"node_type\": class_type,\n                \"executed\": list(executed),\n            }\n            self.add_message(\"execution_interrupted\", mes, broadcast=True)\n        else:\n            mes = {\n                \"prompt_id\": prompt_id,\n                \"node_id\": node_id,\n                \"node_type\": class_type,\n                \"executed\": list(executed),\n                \"exception_message\": error[\"exception_message\"],\n                \"exception_type\": error[\"exception_type\"],\n                \"traceback\": error[\"traceback\"],\n                \"current_inputs\": error[\"current_inputs\"],\n                \"current_outputs\": list(current_outputs),\n            }\n            self.add_message(\"execution_error\", mes, broadcast=False)\n\n    def execute(self, prompt, prompt_id, extra_data={}, execute_outputs=[]):\n        nodes.interrupt_processing(False)\n\n        if \"client_id\" in extra_data:\n            self.server.client_id = extra_data[\"client_id\"]\n        else:\n            self.server.client_id = None\n\n        self.status_messages = []\n        self.add_message(\"execution_start\", { \"prompt_id\": prompt_id}, broadcast=False)\n\n        with torch.inference_mode():\n            dynamic_prompt = DynamicPrompt(prompt)\n            is_changed_cache = IsChangedCache(dynamic_prompt, self.caches.outputs)\n            for cache in self.caches.all:\n                cache.set_prompt(dynamic_prompt, prompt.keys(), is_changed_cache)\n                cache.clean_unused()\n\n            cached_nodes = []\n            for node_id in prompt:\n                if self.caches.outputs.get(node_id) is not None:\n                    cached_nodes.append(node_id)\n\n            comfy.model_management.cleanup_models_gc()\n            self.add_message(\"execution_cached\",\n                          { \"nodes\": cached_nodes, \"prompt_id\": prompt_id},\n                          broadcast=False)\n            pending_subgraph_results = {}\n            executed = set()\n            execution_list = ExecutionList(dynamic_prompt, self.caches.outputs)\n            current_outputs = self.caches.outputs.all_node_ids()\n            for node_id in list(execute_outputs):\n                execution_list.add_node(node_id)\n\n            while not execution_list.is_empty():\n                node_id, error, ex = execution_list.stage_node_execution()\n                if error is not None:\n                    self.handle_execution_error(prompt_id, dynamic_prompt.original_prompt, current_outputs, executed, error, ex)\n                    break\n\n                result, error, ex = execute(self.server, dynamic_prompt, self.caches, node_id, extra_data, executed, prompt_id, execution_list, pending_subgraph_results)\n                self.success = result != ExecutionResult.FAILURE\n                if result == ExecutionResult.FAILURE:\n                    self.handle_execution_error(prompt_id, dynamic_prompt.original_prompt, current_outputs, executed, error, ex)\n                    break\n                elif result == ExecutionResult.PENDING:\n                    execution_list.unstage_node_execution()\n                else: # result == ExecutionResult.SUCCESS:\n                    execution_list.complete_node_execution()\n            else:\n                # Only execute when the while-loop ends without break\n                self.add_message(\"execution_success\", { \"prompt_id\": prompt_id }, broadcast=False)\n\n            ui_outputs = {}\n            meta_outputs = {}\n            all_node_ids = self.caches.ui.all_node_ids()\n            for node_id in all_node_ids:\n                ui_info = self.caches.ui.get(node_id)\n                if ui_info is not None:\n                    ui_outputs[node_id] = ui_info[\"output\"]\n                    meta_outputs[node_id] = ui_info[\"meta\"]\n            self.history_result = {\n                \"outputs\": ui_outputs,\n                \"meta\": meta_outputs,\n            }\n            self.server.last_node_id = None\n            if comfy.model_management.DISABLE_SMART_MEMORY:\n                comfy.model_management.unload_all_models()\n\n\ndef validate_inputs(prompt, item, validated):\n    unique_id = item\n    if unique_id in validated:\n        return validated[unique_id]\n\n    inputs = prompt[unique_id]['inputs']\n    class_type = prompt[unique_id]['class_type']\n    obj_class = nodes.NODE_CLASS_MAPPINGS[class_type]\n\n    class_inputs = obj_class.INPUT_TYPES()\n    valid_inputs = set(class_inputs.get('required',{})).union(set(class_inputs.get('optional',{})))\n\n    errors = []\n    valid = True\n\n    validate_function_inputs = []\n    validate_has_kwargs = False\n    if hasattr(obj_class, \"VALIDATE_INPUTS\"):\n        argspec = inspect.getfullargspec(obj_class.VALIDATE_INPUTS)\n        validate_function_inputs = argspec.args\n        validate_has_kwargs = argspec.varkw is not None\n    received_types = {}\n\n    for x in valid_inputs:\n        type_input, input_category, extra_info = get_input_info(obj_class, x, class_inputs)\n        assert extra_info is not None\n        if x not in inputs:\n            if input_category == \"required\":\n                error = {\n                    \"type\": \"required_input_missing\",\n                    \"message\": \"Required input is missing\",\n                    \"details\": f\"{x}\",\n                    \"extra_info\": {\n                        \"input_name\": x\n                    }\n                }\n                errors.append(error)\n            continue\n\n        val = inputs[x]\n        info = (type_input, extra_info)\n        if isinstance(val, list):\n            if len(val) != 2:\n                error = {\n                    \"type\": \"bad_linked_input\",\n                    \"message\": \"Bad linked input, must be a length-2 list of [node_id, slot_index]\",\n                    \"details\": f\"{x}\",\n                    \"extra_info\": {\n                        \"input_name\": x,\n                        \"input_config\": info,\n                        \"received_value\": val\n                    }\n                }\n                errors.append(error)\n                continue\n\n            o_id = val[0]\n            o_class_type = prompt[o_id]['class_type']\n            r = nodes.NODE_CLASS_MAPPINGS[o_class_type].RETURN_TYPES\n            received_type = r[val[1]]\n            received_types[x] = received_type\n            if 'input_types' not in validate_function_inputs and not validate_node_input(received_type, type_input):\n                details = f\"{x}, received_type({received_type}) mismatch input_type({type_input})\"\n                error = {\n                    \"type\": \"return_type_mismatch\",\n                    \"message\": \"Return type mismatch between linked nodes\",\n                    \"details\": details,\n                    \"extra_info\": {\n                        \"input_name\": x,\n                        \"input_config\": info,\n                        \"received_type\": received_type,\n                        \"linked_node\": val\n                    }\n                }\n                errors.append(error)\n                continue\n            try:\n                r = validate_inputs(prompt, o_id, validated)\n                if r[0] is False:\n                    # `r` will be set in `validated[o_id]` already\n                    valid = False\n                    continue\n            except Exception as ex:\n                typ, _, tb = sys.exc_info()\n                valid = False\n                exception_type = full_type_name(typ)\n                reasons = [{\n                    \"type\": \"exception_during_inner_validation\",\n                    \"message\": \"Exception when validating inner node\",\n                    \"details\": str(ex),\n                    \"extra_info\": {\n                        \"input_name\": x,\n                        \"input_config\": info,\n                        \"exception_message\": str(ex),\n                        \"exception_type\": exception_type,\n                        \"traceback\": traceback.format_tb(tb),\n                        \"linked_node\": val\n                    }\n                }]\n                validated[o_id] = (False, reasons, o_id)\n                continue\n        else:\n            try:\n                if type_input == \"INT\":\n                    val = int(val)\n                    inputs[x] = val\n                if type_input == \"FLOAT\":\n                    val = float(val)\n                    inputs[x] = val\n                if type_input == \"STRING\":\n                    val = str(val)\n                    inputs[x] = val\n                if type_input == \"BOOLEAN\":\n                    val = bool(val)\n                    inputs[x] = val\n            except Exception as ex:\n                error = {\n                    \"type\": \"invalid_input_type\",\n                    \"message\": f\"Failed to convert an input value to a {type_input} value\",\n                    \"details\": f\"{x}, {val}, {ex}\",\n                    \"extra_info\": {\n                        \"input_name\": x,\n                        \"input_config\": info,\n                        \"received_value\": val,\n                        \"exception_message\": str(ex)\n                    }\n                }\n                errors.append(error)\n                continue\n\n            if x not in validate_function_inputs and not validate_has_kwargs:\n                if \"min\" in extra_info and val < extra_info[\"min\"]:\n                    error = {\n                        \"type\": \"value_smaller_than_min\",\n                        \"message\": \"Value {} smaller than min of {}\".format(val, extra_info[\"min\"]),\n                        \"details\": f\"{x}\",\n                        \"extra_info\": {\n                            \"input_name\": x,\n                            \"input_config\": info,\n                            \"received_value\": val,\n                        }\n                    }\n                    errors.append(error)\n                    continue\n                if \"max\" in extra_info and val > extra_info[\"max\"]:\n                    error = {\n                        \"type\": \"value_bigger_than_max\",\n                        \"message\": \"Value {} bigger than max of {}\".format(val, extra_info[\"max\"]),\n                        \"details\": f\"{x}\",\n                        \"extra_info\": {\n                            \"input_name\": x,\n                            \"input_config\": info,\n                            \"received_value\": val,\n                        }\n                    }\n                    errors.append(error)\n                    continue\n\n                if isinstance(type_input, list):\n                    if val not in type_input:\n                        input_config = info\n                        list_info = \"\"\n\n                        # Don't send back gigantic lists like if they're lots of\n                        # scanned model filepaths\n                        if len(type_input) > 20:\n                            list_info = f\"(list of length {len(type_input)})\"\n                            input_config = None\n                        else:\n                            list_info = str(type_input)\n\n                        error = {\n                            \"type\": \"value_not_in_list\",\n                            \"message\": \"Value not in list\",\n                            \"details\": f\"{x}: '{val}' not in {list_info}\",\n                            \"extra_info\": {\n                                \"input_name\": x,\n                                \"input_config\": input_config,\n                                \"received_value\": val,\n                            }\n                        }\n                        errors.append(error)\n                        continue\n\n    if len(validate_function_inputs) > 0 or validate_has_kwargs:\n        input_data_all, _ = get_input_data(inputs, obj_class, unique_id)\n        input_filtered = {}\n        for x in input_data_all:\n            if x in validate_function_inputs or validate_has_kwargs:\n                input_filtered[x] = input_data_all[x]\n        if 'input_types' in validate_function_inputs:\n            input_filtered['input_types'] = [received_types]\n\n        #ret = obj_class.VALIDATE_INPUTS(**input_filtered)\n        ret = _map_node_over_list(obj_class, input_filtered, \"VALIDATE_INPUTS\")\n        for x in input_filtered:\n            for i, r in enumerate(ret):\n                if r is not True and not isinstance(r, ExecutionBlocker):\n                    details = f\"{x}\"\n                    if r is not False:\n                        details += f\" - {str(r)}\"\n\n                    error = {\n                        \"type\": \"custom_validation_failed\",\n                        \"message\": \"Custom validation failed for node\",\n                        \"details\": details,\n                        \"extra_info\": {\n                            \"input_name\": x,\n                        }\n                    }\n                    errors.append(error)\n                    continue\n\n    if len(errors) > 0 or valid is not True:\n        ret = (False, errors, unique_id)\n    else:\n        ret = (True, [], unique_id)\n\n    validated[unique_id] = ret\n    return ret\n\ndef full_type_name(klass):\n    module = klass.__module__\n    if module == 'builtins':\n        return klass.__qualname__\n    return module + '.' + klass.__qualname__\n\ndef validate_prompt(prompt):\n    outputs = set()\n    for x in prompt:\n        if 'class_type' not in prompt[x]:\n            error = {\n                \"type\": \"invalid_prompt\",\n                \"message\": \"Cannot execute because a node is missing the class_type property.\",\n                \"details\": f\"Node ID '#{x}'\",\n                \"extra_info\": {}\n            }\n            return (False, error, [], [])\n\n        class_type = prompt[x]['class_type']\n        class_ = nodes.NODE_CLASS_MAPPINGS.get(class_type, None)\n        if class_ is None:\n            error = {\n                \"type\": \"invalid_prompt\",\n                \"message\": f\"Cannot execute because node {class_type} does not exist.\",\n                \"details\": f\"Node ID '#{x}'\",\n                \"extra_info\": {}\n            }\n            return (False, error, [], [])\n\n        if hasattr(class_, 'OUTPUT_NODE') and class_.OUTPUT_NODE is True:\n            outputs.add(x)\n\n    if len(outputs) == 0:\n        error = {\n            \"type\": \"prompt_no_outputs\",\n            \"message\": \"Prompt has no outputs\",\n            \"details\": \"\",\n            \"extra_info\": {}\n        }\n        return (False, error, [], [])\n\n    good_outputs = set()\n    errors = []\n    node_errors = {}\n    validated = {}\n    for o in outputs:\n        valid = False\n        reasons = []\n        try:\n            m = validate_inputs(prompt, o, validated)\n            valid = m[0]\n            reasons = m[1]\n        except Exception as ex:\n            typ, _, tb = sys.exc_info()\n            valid = False\n            exception_type = full_type_name(typ)\n            reasons = [{\n                \"type\": \"exception_during_validation\",\n                \"message\": \"Exception when validating node\",\n                \"details\": str(ex),\n                \"extra_info\": {\n                    \"exception_type\": exception_type,\n                    \"traceback\": traceback.format_tb(tb)\n                }\n            }]\n            validated[o] = (False, reasons, o)\n\n        if valid is True:\n            good_outputs.add(o)\n        else:\n            logging.error(f\"Failed to validate prompt for output {o}:\")\n            if len(reasons) > 0:\n                logging.error(\"* (prompt):\")\n                for reason in reasons:\n                    logging.error(f\"  - {reason['message']}: {reason['details']}\")\n            errors += [(o, reasons)]\n            for node_id, result in validated.items():\n                valid = result[0]\n                reasons = result[1]\n                # If a node upstream has errors, the nodes downstream will also\n                # be reported as invalid, but there will be no errors attached.\n                # So don't return those nodes as having errors in the response.\n                if valid is not True and len(reasons) > 0:\n                    if node_id not in node_errors:\n                        class_type = prompt[node_id]['class_type']\n                        node_errors[node_id] = {\n                            \"errors\": reasons,\n                            \"dependent_outputs\": [],\n                            \"class_type\": class_type\n                        }\n                        logging.error(f\"* {class_type} {node_id}:\")\n                        for reason in reasons:\n                            logging.error(f\"  - {reason['message']}: {reason['details']}\")\n                    node_errors[node_id][\"dependent_outputs\"].append(o)\n            logging.error(\"Output will be ignored\")\n\n    if len(good_outputs) == 0:\n        errors_list = []\n        for o, errors in errors:\n            for error in errors:\n                errors_list.append(f\"{error['message']}: {error['details']}\")\n        errors_list = \"\\n\".join(errors_list)\n\n        error = {\n            \"type\": \"prompt_outputs_failed_validation\",\n            \"message\": \"Prompt outputs failed validation\",\n            \"details\": errors_list,\n            \"extra_info\": {}\n        }\n\n        return (False, error, list(good_outputs), node_errors)\n\n    return (True, None, list(good_outputs), node_errors)\n\nMAXIMUM_HISTORY_SIZE = 10000\n\nclass PromptQueue:\n    def __init__(self, server):\n        self.server = server\n        self.mutex = threading.RLock()\n        self.not_empty = threading.Condition(self.mutex)\n        self.task_counter = 0\n        self.queue = []\n        self.currently_running = {}\n        self.history = {}\n        self.flags = {}\n        server.prompt_queue = self\n\n    def put(self, item):\n        with self.mutex:\n            heapq.heappush(self.queue, item)\n            self.server.queue_updated()\n            self.not_empty.notify()\n\n    def get(self, timeout=None):\n        with self.not_empty:\n            while len(self.queue) == 0:\n                self.not_empty.wait(timeout=timeout)\n                if timeout is not None and len(self.queue) == 0:\n                    return None\n            item = heapq.heappop(self.queue)\n            i = self.task_counter\n            self.currently_running[i] = copy.deepcopy(item)\n            self.task_counter += 1\n            self.server.queue_updated()\n            return (item, i)\n\n    class ExecutionStatus(NamedTuple):\n        status_str: Literal['success', 'error']\n        completed: bool\n        messages: List[str]\n\n    def task_done(self, item_id, history_result,\n                  status: Optional['PromptQueue.ExecutionStatus']):\n        with self.mutex:\n            prompt = self.currently_running.pop(item_id)\n            if len(self.history) > MAXIMUM_HISTORY_SIZE:\n                self.history.pop(next(iter(self.history)))\n\n            status_dict: Optional[dict] = None\n            if status is not None:\n                status_dict = copy.deepcopy(status._asdict())\n\n            self.history[prompt[1]] = {\n                \"prompt\": prompt,\n                \"outputs\": {},\n                'status': status_dict,\n            }\n            self.history[prompt[1]].update(history_result)\n            self.server.queue_updated()\n\n    def get_current_queue(self):\n        with self.mutex:\n            out = []\n            for x in self.currently_running.values():\n                out += [x]\n            return (out, copy.deepcopy(self.queue))\n\n    def get_tasks_remaining(self):\n        with self.mutex:\n            return len(self.queue) + len(self.currently_running)\n\n    def wipe_queue(self):\n        with self.mutex:\n            self.queue = []\n            self.server.queue_updated()\n\n    def delete_queue_item(self, function):\n        with self.mutex:\n            for x in range(len(self.queue)):\n                if function(self.queue[x]):\n                    if len(self.queue) == 1:\n                        self.wipe_queue()\n                    else:\n                        self.queue.pop(x)\n                        heapq.heapify(self.queue)\n                    self.server.queue_updated()\n                    return True\n        return False\n\n    def get_history(self, prompt_id=None, max_items=None, offset=-1):\n        with self.mutex:\n            if prompt_id is None:\n                out = {}\n                i = 0\n                if offset < 0 and max_items is not None:\n                    offset = len(self.history) - max_items\n                for k in self.history:\n                    if i >= offset:\n                        out[k] = self.history[k]\n                        if max_items is not None and len(out) >= max_items:\n                            break\n                    i += 1\n                return out\n            elif prompt_id in self.history:\n                return {prompt_id: copy.deepcopy(self.history[prompt_id])}\n            else:\n                return {}\n\n    def wipe_history(self):\n        with self.mutex:\n            self.history = {}\n\n    def delete_history_item(self, id_to_delete):\n        with self.mutex:\n            self.history.pop(id_to_delete, None)\n\n    def set_flag(self, name, data):\n        with self.mutex:\n            self.flags[name] = data\n            self.not_empty.notify()\n\n    def get_flags(self, reset=True):\n        with self.mutex:\n            if reset:\n                ret = self.flags\n                self.flags = {}\n                return ret\n            else:\n                return self.flags.copy()\n"
        },
        {
          "name": "extra_model_paths.yaml.example",
          "type": "blob",
          "size": 1.45,
          "content": "#Rename this to extra_model_paths.yaml and ComfyUI will load it\n\n\n#config for a1111 ui\n#all you have to do is change the base_path to where yours is installed\na111:\n    base_path: path/to/stable-diffusion-webui/\n\n    checkpoints: models/Stable-diffusion\n    configs: models/Stable-diffusion\n    vae: models/VAE\n    loras: |\n         models/Lora\n         models/LyCORIS\n    upscale_models: |\n                  models/ESRGAN\n                  models/RealESRGAN\n                  models/SwinIR\n    embeddings: embeddings\n    hypernetworks: models/hypernetworks\n    controlnet: models/ControlNet\n\n#config for comfyui\n#your base path should be either an existing comfy install or a central folder where you store all of your models, loras, etc.\n\n#comfyui:\n#     base_path: path/to/comfyui/\n#     # You can use is_default to mark that these folders should be listed first, and used as the default dirs for eg downloads\n#     #is_default: true\n#     checkpoints: models/checkpoints/\n#     clip: models/clip/\n#     clip_vision: models/clip_vision/\n#     configs: models/configs/\n#     controlnet: models/controlnet/\n#     diffusion_models: |\n#                  models/diffusion_models\n#                  models/unet\n#     embeddings: models/embeddings/\n#     loras: models/loras/\n#     upscale_models: models/upscale_models/\n#     vae: models/vae/\n\n#other_ui:\n#    base_path: path/to/ui\n#    checkpoints: models/checkpoints\n#    gligen: models/gligen\n#    custom_nodes: path/custom_nodes\n"
        },
        {
          "name": "fix_torch.py",
          "type": "blob",
          "size": 0.92,
          "content": "import importlib.util\nimport shutil\nimport os\nimport ctypes\nimport logging\n\n\ndef fix_pytorch_libomp():\n    \"\"\"\n    Fix PyTorch libomp DLL issue on Windows by copying the correct DLL file if needed.\n    \"\"\"\n    torch_spec = importlib.util.find_spec(\"torch\")\n    for folder in torch_spec.submodule_search_locations:\n        lib_folder = os.path.join(folder, \"lib\")\n        test_file = os.path.join(lib_folder, \"fbgemm.dll\")\n        dest = os.path.join(lib_folder, \"libomp140.x86_64.dll\")\n        if os.path.exists(dest):\n            break\n\n        with open(test_file, \"rb\") as f:\n            contents = f.read()\n            if b\"libomp140.x86_64.dll\" not in contents:\n                break\n        try:\n            ctypes.cdll.LoadLibrary(test_file)\n        except FileNotFoundError:\n            logging.warning(\"Detected pytorch version with libomp issue, patching.\")\n            shutil.copyfile(os.path.join(lib_folder, \"libiomp5md.dll\"), dest)\n"
        },
        {
          "name": "folder_paths.py",
          "type": "blob",
          "size": 14.42,
          "content": "from __future__ import annotations\n\nimport os\nimport time\nimport mimetypes\nimport logging\nfrom typing import Literal\nfrom collections.abc import Collection\n\nsupported_pt_extensions: set[str] = {'.ckpt', '.pt', '.bin', '.pth', '.safetensors', '.pkl', '.sft'}\n\nfolder_names_and_paths: dict[str, tuple[list[str], set[str]]] = {}\n\nbase_path = os.path.dirname(os.path.realpath(__file__))\nmodels_dir = os.path.join(base_path, \"models\")\nfolder_names_and_paths[\"checkpoints\"] = ([os.path.join(models_dir, \"checkpoints\")], supported_pt_extensions)\nfolder_names_and_paths[\"configs\"] = ([os.path.join(models_dir, \"configs\")], [\".yaml\"])\n\nfolder_names_and_paths[\"loras\"] = ([os.path.join(models_dir, \"loras\")], supported_pt_extensions)\nfolder_names_and_paths[\"vae\"] = ([os.path.join(models_dir, \"vae\")], supported_pt_extensions)\nfolder_names_and_paths[\"text_encoders\"] = ([os.path.join(models_dir, \"text_encoders\"), os.path.join(models_dir, \"clip\")], supported_pt_extensions)\nfolder_names_and_paths[\"diffusion_models\"] = ([os.path.join(models_dir, \"unet\"), os.path.join(models_dir, \"diffusion_models\")], supported_pt_extensions)\nfolder_names_and_paths[\"clip_vision\"] = ([os.path.join(models_dir, \"clip_vision\")], supported_pt_extensions)\nfolder_names_and_paths[\"style_models\"] = ([os.path.join(models_dir, \"style_models\")], supported_pt_extensions)\nfolder_names_and_paths[\"embeddings\"] = ([os.path.join(models_dir, \"embeddings\")], supported_pt_extensions)\nfolder_names_and_paths[\"diffusers\"] = ([os.path.join(models_dir, \"diffusers\")], [\"folder\"])\nfolder_names_and_paths[\"vae_approx\"] = ([os.path.join(models_dir, \"vae_approx\")], supported_pt_extensions)\n\nfolder_names_and_paths[\"controlnet\"] = ([os.path.join(models_dir, \"controlnet\"), os.path.join(models_dir, \"t2i_adapter\")], supported_pt_extensions)\nfolder_names_and_paths[\"gligen\"] = ([os.path.join(models_dir, \"gligen\")], supported_pt_extensions)\n\nfolder_names_and_paths[\"upscale_models\"] = ([os.path.join(models_dir, \"upscale_models\")], supported_pt_extensions)\n\nfolder_names_and_paths[\"custom_nodes\"] = ([os.path.join(base_path, \"custom_nodes\")], set())\n\nfolder_names_and_paths[\"hypernetworks\"] = ([os.path.join(models_dir, \"hypernetworks\")], supported_pt_extensions)\n\nfolder_names_and_paths[\"photomaker\"] = ([os.path.join(models_dir, \"photomaker\")], supported_pt_extensions)\n\nfolder_names_and_paths[\"classifiers\"] = ([os.path.join(models_dir, \"classifiers\")], {\"\"})\n\noutput_directory = os.path.join(os.path.dirname(os.path.realpath(__file__)), \"output\")\ntemp_directory = os.path.join(os.path.dirname(os.path.realpath(__file__)), \"temp\")\ninput_directory = os.path.join(os.path.dirname(os.path.realpath(__file__)), \"input\")\nuser_directory = os.path.join(os.path.dirname(os.path.realpath(__file__)), \"user\")\n\nfilename_list_cache: dict[str, tuple[list[str], dict[str, float], float]] = {}\n\nclass CacheHelper:\n    \"\"\"\n    Helper class for managing file list cache data.\n    \"\"\"\n    def __init__(self):\n        self.cache: dict[str, tuple[list[str], dict[str, float], float]] = {}\n        self.active = False\n\n    def get(self, key: str, default=None) -> tuple[list[str], dict[str, float], float]:\n        if not self.active:\n            return default\n        return self.cache.get(key, default)\n\n    def set(self, key: str, value: tuple[list[str], dict[str, float], float]) -> None:\n        if self.active:\n            self.cache[key] = value\n\n    def clear(self):\n        self.cache.clear()\n\n    def __enter__(self):\n        self.active = True\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.active = False\n        self.clear()\n\ncache_helper = CacheHelper()\n\nextension_mimetypes_cache = {\n    \"webp\" : \"image\",\n}\n\ndef map_legacy(folder_name: str) -> str:\n    legacy = {\"unet\": \"diffusion_models\",\n              \"clip\": \"text_encoders\"}\n    return legacy.get(folder_name, folder_name)\n\nif not os.path.exists(input_directory):\n    try:\n        os.makedirs(input_directory)\n    except:\n        logging.error(\"Failed to create input directory\")\n\ndef set_output_directory(output_dir: str) -> None:\n    global output_directory\n    output_directory = output_dir\n\ndef set_temp_directory(temp_dir: str) -> None:\n    global temp_directory\n    temp_directory = temp_dir\n\ndef set_input_directory(input_dir: str) -> None:\n    global input_directory\n    input_directory = input_dir\n\ndef get_output_directory() -> str:\n    global output_directory\n    return output_directory\n\ndef get_temp_directory() -> str:\n    global temp_directory\n    return temp_directory\n\ndef get_input_directory() -> str:\n    global input_directory\n    return input_directory\n\ndef get_user_directory() -> str:\n    return user_directory\n\ndef set_user_directory(user_dir: str) -> None:\n    global user_directory\n    user_directory = user_dir\n\n\n#NOTE: used in http server so don't put folders that should not be accessed remotely\ndef get_directory_by_type(type_name: str) -> str | None:\n    if type_name == \"output\":\n        return get_output_directory()\n    if type_name == \"temp\":\n        return get_temp_directory()\n    if type_name == \"input\":\n        return get_input_directory()\n    return None\n\ndef filter_files_content_types(files: list[str], content_types: Literal[\"image\", \"video\", \"audio\"]) -> list[str]:\n    \"\"\"\n    Example:\n        files = os.listdir(folder_paths.get_input_directory())\n        filter_files_content_types(files, [\"image\", \"audio\", \"video\"])\n    \"\"\"\n    global extension_mimetypes_cache\n    result = []\n    for file in files:\n        extension = file.split('.')[-1]\n        if extension not in extension_mimetypes_cache:\n            mime_type, _ = mimetypes.guess_type(file, strict=False)\n            if not mime_type:\n                continue\n            content_type = mime_type.split('/')[0]\n            extension_mimetypes_cache[extension] = content_type\n        else:\n            content_type = extension_mimetypes_cache[extension]\n\n        if content_type in content_types:\n            result.append(file)\n    return result\n\n# determine base_dir rely on annotation if name is 'filename.ext [annotation]' format\n# otherwise use default_path as base_dir\ndef annotated_filepath(name: str) -> tuple[str, str | None]:\n    if name.endswith(\"[output]\"):\n        base_dir = get_output_directory()\n        name = name[:-9]\n    elif name.endswith(\"[input]\"):\n        base_dir = get_input_directory()\n        name = name[:-8]\n    elif name.endswith(\"[temp]\"):\n        base_dir = get_temp_directory()\n        name = name[:-7]\n    else:\n        return name, None\n\n    return name, base_dir\n\n\ndef get_annotated_filepath(name: str, default_dir: str | None=None) -> str:\n    name, base_dir = annotated_filepath(name)\n\n    if base_dir is None:\n        if default_dir is not None:\n            base_dir = default_dir\n        else:\n            base_dir = get_input_directory()  # fallback path\n\n    return os.path.join(base_dir, name)\n\n\ndef exists_annotated_filepath(name) -> bool:\n    name, base_dir = annotated_filepath(name)\n\n    if base_dir is None:\n        base_dir = get_input_directory()  # fallback path\n\n    filepath = os.path.join(base_dir, name)\n    return os.path.exists(filepath)\n\n\ndef add_model_folder_path(folder_name: str, full_folder_path: str, is_default: bool = False) -> None:\n    global folder_names_and_paths\n    folder_name = map_legacy(folder_name)\n    if folder_name in folder_names_and_paths:\n        paths, _exts = folder_names_and_paths[folder_name]\n        if full_folder_path in paths:\n            if is_default and paths[0] != full_folder_path:\n                # If the path to the folder is not the first in the list, move it to the beginning.\n                paths.remove(full_folder_path)\n                paths.insert(0, full_folder_path)\n        else:\n            if is_default:\n                paths.insert(0, full_folder_path)\n            else:\n                paths.append(full_folder_path)\n    else:\n        folder_names_and_paths[folder_name] = ([full_folder_path], set())\n\ndef get_folder_paths(folder_name: str) -> list[str]:\n    folder_name = map_legacy(folder_name)\n    return folder_names_and_paths[folder_name][0][:]\n\ndef recursive_search(directory: str, excluded_dir_names: list[str] | None=None) -> tuple[list[str], dict[str, float]]:\n    if not os.path.isdir(directory):\n        return [], {}\n\n    if excluded_dir_names is None:\n        excluded_dir_names = []\n\n    result = []\n    dirs = {}\n\n    # Attempt to add the initial directory to dirs with error handling\n    try:\n        dirs[directory] = os.path.getmtime(directory)\n    except FileNotFoundError:\n        logging.warning(f\"Warning: Unable to access {directory}. Skipping this path.\")\n\n    logging.debug(\"recursive file list on directory {}\".format(directory))\n    dirpath: str\n    subdirs: list[str]\n    filenames: list[str]\n\n    for dirpath, subdirs, filenames in os.walk(directory, followlinks=True, topdown=True):\n        subdirs[:] = [d for d in subdirs if d not in excluded_dir_names]\n        for file_name in filenames:\n            try:\n                relative_path = os.path.relpath(os.path.join(dirpath, file_name), directory)\n                result.append(relative_path)\n            except:\n                logging.warning(f\"Warning: Unable to access {file_name}. Skipping this file.\")\n                continue\n\n        for d in subdirs:\n            path: str = os.path.join(dirpath, d)\n            try:\n                dirs[path] = os.path.getmtime(path)\n            except FileNotFoundError:\n                logging.warning(f\"Warning: Unable to access {path}. Skipping this path.\")\n                continue\n    logging.debug(\"found {} files\".format(len(result)))\n    return result, dirs\n\ndef filter_files_extensions(files: Collection[str], extensions: Collection[str]) -> list[str]:\n    return sorted(list(filter(lambda a: os.path.splitext(a)[-1].lower() in extensions or len(extensions) == 0, files)))\n\n\n\ndef get_full_path(folder_name: str, filename: str) -> str | None:\n    global folder_names_and_paths\n    folder_name = map_legacy(folder_name)\n    if folder_name not in folder_names_and_paths:\n        return None\n    folders = folder_names_and_paths[folder_name]\n    filename = os.path.relpath(os.path.join(\"/\", filename), \"/\")\n    for x in folders[0]:\n        full_path = os.path.join(x, filename)\n        if os.path.isfile(full_path):\n            return full_path\n        elif os.path.islink(full_path):\n            logging.warning(\"WARNING path {} exists but doesn't link anywhere, skipping.\".format(full_path))\n\n    return None\n\n\ndef get_full_path_or_raise(folder_name: str, filename: str) -> str:\n    full_path = get_full_path(folder_name, filename)\n    if full_path is None:\n        raise FileNotFoundError(f\"Model in folder '{folder_name}' with filename '{filename}' not found.\")\n    return full_path\n\n\ndef get_filename_list_(folder_name: str) -> tuple[list[str], dict[str, float], float]:\n    folder_name = map_legacy(folder_name)\n    global folder_names_and_paths\n    output_list = set()\n    folders = folder_names_and_paths[folder_name]\n    output_folders = {}\n    for x in folders[0]:\n        files, folders_all = recursive_search(x, excluded_dir_names=[\".git\"])\n        output_list.update(filter_files_extensions(files, folders[1]))\n        output_folders = {**output_folders, **folders_all}\n\n    return sorted(list(output_list)), output_folders, time.perf_counter()\n\ndef cached_filename_list_(folder_name: str) -> tuple[list[str], dict[str, float], float] | None:\n    strong_cache = cache_helper.get(folder_name)\n    if strong_cache is not None:\n        return strong_cache\n\n    global filename_list_cache\n    global folder_names_and_paths\n    folder_name = map_legacy(folder_name)\n    if folder_name not in filename_list_cache:\n        return None\n    out = filename_list_cache[folder_name]\n\n    for x in out[1]:\n        time_modified = out[1][x]\n        folder = x\n        if os.path.getmtime(folder) != time_modified:\n            return None\n\n    folders = folder_names_and_paths[folder_name]\n    for x in folders[0]:\n        if os.path.isdir(x):\n            if x not in out[1]:\n                return None\n\n    return out\n\ndef get_filename_list(folder_name: str) -> list[str]:\n    folder_name = map_legacy(folder_name)\n    out = cached_filename_list_(folder_name)\n    if out is None:\n        out = get_filename_list_(folder_name)\n        global filename_list_cache\n        filename_list_cache[folder_name] = out\n    cache_helper.set(folder_name, out)\n    return list(out[0])\n\ndef get_save_image_path(filename_prefix: str, output_dir: str, image_width=0, image_height=0) -> tuple[str, str, int, str, str]:\n    def map_filename(filename: str) -> tuple[int, str]:\n        prefix_len = len(os.path.basename(filename_prefix))\n        prefix = filename[:prefix_len + 1]\n        try:\n            digits = int(filename[prefix_len + 1:].split('_')[0])\n        except:\n            digits = 0\n        return digits, prefix\n\n    def compute_vars(input: str, image_width: int, image_height: int) -> str:\n        input = input.replace(\"%width%\", str(image_width))\n        input = input.replace(\"%height%\", str(image_height))\n        now = time.localtime()\n        input = input.replace(\"%year%\", str(now.tm_year))\n        input = input.replace(\"%month%\", str(now.tm_mon).zfill(2))\n        input = input.replace(\"%day%\", str(now.tm_mday).zfill(2))\n        input = input.replace(\"%hour%\", str(now.tm_hour).zfill(2))\n        input = input.replace(\"%minute%\", str(now.tm_min).zfill(2))\n        input = input.replace(\"%second%\", str(now.tm_sec).zfill(2))\n        return input\n\n    if \"%\" in filename_prefix:\n        filename_prefix = compute_vars(filename_prefix, image_width, image_height)\n\n    subfolder = os.path.dirname(os.path.normpath(filename_prefix))\n    filename = os.path.basename(os.path.normpath(filename_prefix))\n\n    full_output_folder = os.path.join(output_dir, subfolder)\n\n    if os.path.commonpath((output_dir, os.path.abspath(full_output_folder))) != output_dir:\n        err = \"**** ERROR: Saving image outside the output folder is not allowed.\" + \\\n              \"\\n full_output_folder: \" + os.path.abspath(full_output_folder) + \\\n              \"\\n         output_dir: \" + output_dir + \\\n              \"\\n         commonpath: \" + os.path.commonpath((output_dir, os.path.abspath(full_output_folder)))\n        logging.error(err)\n        raise Exception(err)\n\n    try:\n        counter = max(filter(lambda a: os.path.normcase(a[1][:-1]) == os.path.normcase(filename) and a[1][-1] == \"_\", map(map_filename, os.listdir(full_output_folder))))[0] + 1\n    except ValueError:\n        counter = 1\n    except FileNotFoundError:\n        os.makedirs(full_output_folder, exist_ok=True)\n        counter = 1\n    return full_output_folder, filename, counter, subfolder, filename_prefix\n"
        },
        {
          "name": "input",
          "type": "tree",
          "content": null
        },
        {
          "name": "latent_preview.py",
          "type": "blob",
          "size": 4.09,
          "content": "import torch\nfrom PIL import Image\nfrom comfy.cli_args import args, LatentPreviewMethod\nfrom comfy.taesd.taesd import TAESD\nimport comfy.model_management\nimport folder_paths\nimport comfy.utils\nimport logging\n\nMAX_PREVIEW_RESOLUTION = args.preview_size\n\ndef preview_to_image(latent_image):\n        latents_ubyte = (((latent_image + 1.0) / 2.0).clamp(0, 1)  # change scale from -1..1 to 0..1\n                            .mul(0xFF)  # to 0..255\n                            ).to(device=\"cpu\", dtype=torch.uint8, non_blocking=comfy.model_management.device_supports_non_blocking(latent_image.device))\n\n        return Image.fromarray(latents_ubyte.numpy())\n\nclass LatentPreviewer:\n    def decode_latent_to_preview(self, x0):\n        pass\n\n    def decode_latent_to_preview_image(self, preview_format, x0):\n        preview_image = self.decode_latent_to_preview(x0)\n        return (\"JPEG\", preview_image, MAX_PREVIEW_RESOLUTION)\n\nclass TAESDPreviewerImpl(LatentPreviewer):\n    def __init__(self, taesd):\n        self.taesd = taesd\n\n    def decode_latent_to_preview(self, x0):\n        x_sample = self.taesd.decode(x0[:1])[0].movedim(0, 2)\n        return preview_to_image(x_sample)\n\n\nclass Latent2RGBPreviewer(LatentPreviewer):\n    def __init__(self, latent_rgb_factors, latent_rgb_factors_bias=None):\n        self.latent_rgb_factors = torch.tensor(latent_rgb_factors, device=\"cpu\").transpose(0, 1)\n        self.latent_rgb_factors_bias = None\n        if latent_rgb_factors_bias is not None:\n            self.latent_rgb_factors_bias = torch.tensor(latent_rgb_factors_bias, device=\"cpu\")\n\n    def decode_latent_to_preview(self, x0):\n        self.latent_rgb_factors = self.latent_rgb_factors.to(dtype=x0.dtype, device=x0.device)\n        if self.latent_rgb_factors_bias is not None:\n            self.latent_rgb_factors_bias = self.latent_rgb_factors_bias.to(dtype=x0.dtype, device=x0.device)\n\n        if x0.ndim == 5:\n            x0 = x0[0, :, 0]\n        else:\n            x0 = x0[0]\n\n        latent_image = torch.nn.functional.linear(x0.movedim(0, -1), self.latent_rgb_factors, bias=self.latent_rgb_factors_bias)\n        # latent_image = x0[0].permute(1, 2, 0) @ self.latent_rgb_factors\n\n        return preview_to_image(latent_image)\n\n\ndef get_previewer(device, latent_format):\n    previewer = None\n    method = args.preview_method\n    if method != LatentPreviewMethod.NoPreviews:\n        # TODO previewer methods\n        taesd_decoder_path = None\n        if latent_format.taesd_decoder_name is not None:\n            taesd_decoder_path = next(\n                (fn for fn in folder_paths.get_filename_list(\"vae_approx\")\n                    if fn.startswith(latent_format.taesd_decoder_name)),\n                \"\"\n            )\n            taesd_decoder_path = folder_paths.get_full_path(\"vae_approx\", taesd_decoder_path)\n\n        if method == LatentPreviewMethod.Auto:\n            method = LatentPreviewMethod.Latent2RGB\n\n        if method == LatentPreviewMethod.TAESD:\n            if taesd_decoder_path:\n                taesd = TAESD(None, taesd_decoder_path, latent_channels=latent_format.latent_channels).to(device)\n                previewer = TAESDPreviewerImpl(taesd)\n            else:\n                logging.warning(\"Warning: TAESD previews enabled, but could not find models/vae_approx/{}\".format(latent_format.taesd_decoder_name))\n\n        if previewer is None:\n            if latent_format.latent_rgb_factors is not None:\n                previewer = Latent2RGBPreviewer(latent_format.latent_rgb_factors, latent_format.latent_rgb_factors_bias)\n    return previewer\n\ndef prepare_callback(model, steps, x0_output_dict=None):\n    preview_format = \"JPEG\"\n    if preview_format not in [\"JPEG\", \"PNG\"]:\n        preview_format = \"JPEG\"\n\n    previewer = get_previewer(model.load_device, model.model.latent_format)\n\n    pbar = comfy.utils.ProgressBar(steps)\n    def callback(step, x0, x, total_steps):\n        if x0_output_dict is not None:\n            x0_output_dict[\"x0\"] = x0\n\n        preview_bytes = None\n        if previewer:\n            preview_bytes = previewer.decode_latent_to_preview_image(preview_format, x0)\n        pbar.update_absolute(step + 1, total_steps, preview_bytes)\n    return callback\n\n"
        },
        {
          "name": "main.py",
          "type": "blob",
          "size": 11.09,
          "content": "import comfy.options\ncomfy.options.enable_args_parsing()\n\nimport os\nimport importlib.util\nimport folder_paths\nimport time\nfrom comfy.cli_args import args\nfrom app.logger import setup_logger\nimport itertools\nimport utils.extra_config\nimport logging\n\nif __name__ == \"__main__\":\n    #NOTE: These do not do anything on core ComfyUI which should already have no communication with the internet, they are for custom nodes.\n    os.environ['HF_HUB_DISABLE_TELEMETRY'] = '1'\n    os.environ['DO_NOT_TRACK'] = '1'\n\n\nsetup_logger(log_level=args.verbose, use_stdout=args.log_stdout)\n\ndef apply_custom_paths():\n    # extra model paths\n    extra_model_paths_config_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), \"extra_model_paths.yaml\")\n    if os.path.isfile(extra_model_paths_config_path):\n        utils.extra_config.load_extra_path_config(extra_model_paths_config_path)\n\n    if args.extra_model_paths_config:\n        for config_path in itertools.chain(*args.extra_model_paths_config):\n            utils.extra_config.load_extra_path_config(config_path)\n\n    # --output-directory, --input-directory, --user-directory\n    if args.output_directory:\n        output_dir = os.path.abspath(args.output_directory)\n        logging.info(f\"Setting output directory to: {output_dir}\")\n        folder_paths.set_output_directory(output_dir)\n\n    # These are the default folders that checkpoints, clip and vae models will be saved to when using CheckpointSave, etc.. nodes\n    folder_paths.add_model_folder_path(\"checkpoints\", os.path.join(folder_paths.get_output_directory(), \"checkpoints\"))\n    folder_paths.add_model_folder_path(\"clip\", os.path.join(folder_paths.get_output_directory(), \"clip\"))\n    folder_paths.add_model_folder_path(\"vae\", os.path.join(folder_paths.get_output_directory(), \"vae\"))\n    folder_paths.add_model_folder_path(\"diffusion_models\",\n                                       os.path.join(folder_paths.get_output_directory(), \"diffusion_models\"))\n    folder_paths.add_model_folder_path(\"loras\", os.path.join(folder_paths.get_output_directory(), \"loras\"))\n\n    if args.input_directory:\n        input_dir = os.path.abspath(args.input_directory)\n        logging.info(f\"Setting input directory to: {input_dir}\")\n        folder_paths.set_input_directory(input_dir)\n\n    if args.user_directory:\n        user_dir = os.path.abspath(args.user_directory)\n        logging.info(f\"Setting user directory to: {user_dir}\")\n        folder_paths.set_user_directory(user_dir)\n\n\ndef execute_prestartup_script():\n    def execute_script(script_path):\n        module_name = os.path.splitext(script_path)[0]\n        try:\n            spec = importlib.util.spec_from_file_location(module_name, script_path)\n            module = importlib.util.module_from_spec(spec)\n            spec.loader.exec_module(module)\n            return True\n        except Exception as e:\n            logging.error(f\"Failed to execute startup-script: {script_path} / {e}\")\n        return False\n\n    if args.disable_all_custom_nodes:\n        return\n\n    node_paths = folder_paths.get_folder_paths(\"custom_nodes\")\n    for custom_node_path in node_paths:\n        possible_modules = os.listdir(custom_node_path)\n        node_prestartup_times = []\n\n        for possible_module in possible_modules:\n            module_path = os.path.join(custom_node_path, possible_module)\n            if os.path.isfile(module_path) or module_path.endswith(\".disabled\") or module_path == \"__pycache__\":\n                continue\n\n            script_path = os.path.join(module_path, \"prestartup_script.py\")\n            if os.path.exists(script_path):\n                time_before = time.perf_counter()\n                success = execute_script(script_path)\n                node_prestartup_times.append((time.perf_counter() - time_before, module_path, success))\n    if len(node_prestartup_times) > 0:\n        logging.info(\"\\nPrestartup times for custom nodes:\")\n        for n in sorted(node_prestartup_times):\n            if n[2]:\n                import_message = \"\"\n            else:\n                import_message = \" (PRESTARTUP FAILED)\"\n            logging.info(\"{:6.1f} seconds{}: {}\".format(n[0], import_message, n[1]))\n        logging.info(\"\")\n\napply_custom_paths()\nexecute_prestartup_script()\n\n\n# Main code\nimport asyncio\nimport shutil\nimport threading\nimport gc\n\n\nif os.name == \"nt\":\n    logging.getLogger(\"xformers\").addFilter(lambda record: 'A matching Triton is not available' not in record.getMessage())\n\nif __name__ == \"__main__\":\n    if args.cuda_device is not None:\n        os.environ['CUDA_VISIBLE_DEVICES'] = str(args.cuda_device)\n        os.environ['HIP_VISIBLE_DEVICES'] = str(args.cuda_device)\n        logging.info(\"Set cuda device to: {}\".format(args.cuda_device))\n\n    if args.oneapi_device_selector is not None:\n        os.environ['ONEAPI_DEVICE_SELECTOR'] = args.oneapi_device_selector\n        logging.info(\"Set oneapi device selector to: {}\".format(args.oneapi_device_selector))\n\n    if args.deterministic:\n        if 'CUBLAS_WORKSPACE_CONFIG' not in os.environ:\n            os.environ['CUBLAS_WORKSPACE_CONFIG'] = \":4096:8\"\n\n    import cuda_malloc\n\nif args.windows_standalone_build:\n    try:\n        from fix_torch import fix_pytorch_libomp\n        fix_pytorch_libomp()\n    except:\n        pass\n\nimport comfy.utils\n\nimport execution\nimport server\nfrom server import BinaryEventTypes\nimport nodes\nimport comfy.model_management\n\ndef cuda_malloc_warning():\n    device = comfy.model_management.get_torch_device()\n    device_name = comfy.model_management.get_torch_device_name(device)\n    cuda_malloc_warning = False\n    if \"cudaMallocAsync\" in device_name:\n        for b in cuda_malloc.blacklist:\n            if b in device_name:\n                cuda_malloc_warning = True\n        if cuda_malloc_warning:\n            logging.warning(\"\\nWARNING: this card most likely does not support cuda-malloc, if you get \\\"CUDA error\\\" please run ComfyUI with: --disable-cuda-malloc\\n\")\n\n\ndef prompt_worker(q, server_instance):\n    current_time: float = 0.0\n    e = execution.PromptExecutor(server_instance, lru_size=args.cache_lru)\n    last_gc_collect = 0\n    need_gc = False\n    gc_collect_interval = 10.0\n\n    while True:\n        timeout = 1000.0\n        if need_gc:\n            timeout = max(gc_collect_interval - (current_time - last_gc_collect), 0.0)\n\n        queue_item = q.get(timeout=timeout)\n        if queue_item is not None:\n            item, item_id = queue_item\n            execution_start_time = time.perf_counter()\n            prompt_id = item[1]\n            server_instance.last_prompt_id = prompt_id\n\n            e.execute(item[2], prompt_id, item[3], item[4])\n            need_gc = True\n            q.task_done(item_id,\n                        e.history_result,\n                        status=execution.PromptQueue.ExecutionStatus(\n                            status_str='success' if e.success else 'error',\n                            completed=e.success,\n                            messages=e.status_messages))\n            if server_instance.client_id is not None:\n                server_instance.send_sync(\"executing\", {\"node\": None, \"prompt_id\": prompt_id}, server_instance.client_id)\n\n            current_time = time.perf_counter()\n            execution_time = current_time - execution_start_time\n            logging.info(\"Prompt executed in {:.2f} seconds\".format(execution_time))\n\n        flags = q.get_flags()\n        free_memory = flags.get(\"free_memory\", False)\n\n        if flags.get(\"unload_models\", free_memory):\n            comfy.model_management.unload_all_models()\n            need_gc = True\n            last_gc_collect = 0\n\n        if free_memory:\n            e.reset()\n            need_gc = True\n            last_gc_collect = 0\n\n        if need_gc:\n            current_time = time.perf_counter()\n            if (current_time - last_gc_collect) > gc_collect_interval:\n                gc.collect()\n                comfy.model_management.soft_empty_cache()\n                last_gc_collect = current_time\n                need_gc = False\n\n\nasync def run(server_instance, address='', port=8188, verbose=True, call_on_start=None):\n    addresses = []\n    for addr in address.split(\",\"):\n        addresses.append((addr, port))\n    await asyncio.gather(\n        server_instance.start_multi_address(addresses, call_on_start, verbose), server_instance.publish_loop()\n    )\n\n\ndef hijack_progress(server_instance):\n    def hook(value, total, preview_image):\n        comfy.model_management.throw_exception_if_processing_interrupted()\n        progress = {\"value\": value, \"max\": total, \"prompt_id\": server_instance.last_prompt_id, \"node\": server_instance.last_node_id}\n\n        server_instance.send_sync(\"progress\", progress, server_instance.client_id)\n        if preview_image is not None:\n            server_instance.send_sync(BinaryEventTypes.UNENCODED_PREVIEW_IMAGE, preview_image, server_instance.client_id)\n\n    comfy.utils.set_progress_bar_global_hook(hook)\n\n\ndef cleanup_temp():\n    temp_dir = folder_paths.get_temp_directory()\n    if os.path.exists(temp_dir):\n        shutil.rmtree(temp_dir, ignore_errors=True)\n\n\ndef start_comfyui(asyncio_loop=None):\n    \"\"\"\n    Starts the ComfyUI server using the provided asyncio event loop or creates a new one.\n    Returns the event loop, server instance, and a function to start the server asynchronously.\n    \"\"\"\n    if args.temp_directory:\n        temp_dir = os.path.join(os.path.abspath(args.temp_directory), \"temp\")\n        logging.info(f\"Setting temp directory to: {temp_dir}\")\n        folder_paths.set_temp_directory(temp_dir)\n    cleanup_temp()\n\n    if args.windows_standalone_build:\n        try:\n            import new_updater\n            new_updater.update_windows_updater()\n        except:\n            pass\n\n    if not asyncio_loop:\n        asyncio_loop = asyncio.new_event_loop()\n        asyncio.set_event_loop(asyncio_loop)\n    prompt_server = server.PromptServer(asyncio_loop)\n    q = execution.PromptQueue(prompt_server)\n\n    nodes.init_extra_nodes(init_custom_nodes=not args.disable_all_custom_nodes)\n\n    cuda_malloc_warning()\n\n    prompt_server.add_routes()\n    hijack_progress(prompt_server)\n\n    threading.Thread(target=prompt_worker, daemon=True, args=(q, prompt_server,)).start()\n\n    if args.quick_test_for_ci:\n        exit(0)\n\n    os.makedirs(folder_paths.get_temp_directory(), exist_ok=True)\n    call_on_start = None\n    if args.auto_launch:\n        def startup_server(scheme, address, port):\n            import webbrowser\n            if os.name == 'nt' and address == '0.0.0.0':\n                address = '127.0.0.1'\n            if ':' in address:\n                address = \"[{}]\".format(address)\n            webbrowser.open(f\"{scheme}://{address}:{port}\")\n        call_on_start = startup_server\n\n    async def start_all():\n        await prompt_server.setup()\n        await run(prompt_server, address=args.listen, port=args.port, verbose=not args.dont_print_server, call_on_start=call_on_start)\n\n    # Returning these so that other code can integrate with the ComfyUI loop and server\n    return asyncio_loop, prompt_server, start_all\n\n\nif __name__ == \"__main__\":\n    # Running directly, just start ComfyUI.\n    event_loop, _, start_all_func = start_comfyui()\n    try:\n        event_loop.run_until_complete(start_all_func())\n    except KeyboardInterrupt:\n        logging.info(\"\\nStopped server\")\n\n    cleanup_temp()\n"
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "new_updater.py",
          "type": "blob",
          "size": 1.23,
          "content": "import os\nimport shutil\n\nbase_path = os.path.dirname(os.path.realpath(__file__))\n\n\ndef update_windows_updater():\n    top_path = os.path.dirname(base_path)\n    updater_path = os.path.join(base_path, \".ci/update_windows/update.py\")\n    bat_path = os.path.join(base_path, \".ci/update_windows/update_comfyui.bat\")\n\n    dest_updater_path = os.path.join(top_path, \"update/update.py\")\n    dest_bat_path = os.path.join(top_path, \"update/update_comfyui.bat\")\n    dest_bat_deps_path = os.path.join(top_path, \"update/update_comfyui_and_python_dependencies.bat\")\n\n    try:\n        with open(dest_bat_path, 'rb') as f:\n            contents = f.read()\n    except:\n        return\n\n    if not contents.startswith(b\"..\\\\python_embeded\\\\python.exe .\\\\update.py\"):\n        return\n\n    shutil.copy(updater_path, dest_updater_path)\n    try:\n        with open(dest_bat_deps_path, 'rb') as f:\n            contents = f.read()\n            contents = contents.replace(b'..\\\\python_embeded\\\\python.exe .\\\\update.py ..\\\\ComfyUI\\\\', b'call update_comfyui.bat nopause')\n        with open(dest_bat_deps_path, 'wb') as f:\n            f.write(contents)\n    except:\n        pass\n    shutil.copy(bat_path, dest_bat_path)\n    print(\"Updated the windows standalone package updater.\")  # noqa: T201\n"
        },
        {
          "name": "node_helpers.py",
          "type": "blob",
          "size": 0.94,
          "content": "import hashlib\n\nfrom comfy.cli_args import args\n\nfrom PIL import ImageFile, UnidentifiedImageError\n\ndef conditioning_set_values(conditioning, values={}):\n    c = []\n    for t in conditioning:\n        n = [t[0], t[1].copy()]\n        for k in values:\n            n[1][k] = values[k]\n        c.append(n)\n\n    return c\n\ndef pillow(fn, arg):\n    prev_value = None\n    try:\n        x = fn(arg)\n    except (OSError, UnidentifiedImageError, ValueError): #PIL issues #4472 and #2445, also fixes ComfyUI issue #3416\n        prev_value = ImageFile.LOAD_TRUNCATED_IMAGES\n        ImageFile.LOAD_TRUNCATED_IMAGES = True\n        x = fn(arg)\n    finally:\n        if prev_value is not None:\n            ImageFile.LOAD_TRUNCATED_IMAGES = prev_value\n    return x\n\ndef hasher():\n    hashfuncs = {\n        \"md5\": hashlib.md5,\n        \"sha1\": hashlib.sha1,\n        \"sha256\": hashlib.sha256,\n        \"sha512\": hashlib.sha512\n    }\n    return hashfuncs[args.default_hashing_function]\n"
        },
        {
          "name": "nodes.py",
          "type": "blob",
          "size": 88.85,
          "content": "from __future__ import annotations\nimport torch\n\nimport os\nimport sys\nimport json\nimport hashlib\nimport traceback\nimport math\nimport time\nimport random\nimport logging\n\nfrom PIL import Image, ImageOps, ImageSequence\nfrom PIL.PngImagePlugin import PngInfo\n\nimport numpy as np\nimport safetensors.torch\n\nsys.path.insert(0, os.path.join(os.path.dirname(os.path.realpath(__file__)), \"comfy\"))\n\nimport comfy.diffusers_load\nimport comfy.samplers\nimport comfy.sample\nimport comfy.sd\nimport comfy.utils\nimport comfy.controlnet\nfrom comfy.comfy_types import IO, ComfyNodeABC, InputTypeDict\n\nimport comfy.clip_vision\n\nimport comfy.model_management\nfrom comfy.cli_args import args\n\nimport importlib\n\nimport folder_paths\nimport latent_preview\nimport node_helpers\n\ndef before_node_execution():\n    comfy.model_management.throw_exception_if_processing_interrupted()\n\ndef interrupt_processing(value=True):\n    comfy.model_management.interrupt_current_processing(value)\n\nMAX_RESOLUTION=16384\n\nclass CLIPTextEncode(ComfyNodeABC):\n    @classmethod\n    def INPUT_TYPES(s) -> InputTypeDict:\n        return {\n            \"required\": {\n                \"text\": (IO.STRING, {\"multiline\": True, \"dynamicPrompts\": True, \"tooltip\": \"The text to be encoded.\"}),\n                \"clip\": (IO.CLIP, {\"tooltip\": \"The CLIP model used for encoding the text.\"})\n            }\n        }\n    RETURN_TYPES = (IO.CONDITIONING,)\n    OUTPUT_TOOLTIPS = (\"A conditioning containing the embedded text used to guide the diffusion model.\",)\n    FUNCTION = \"encode\"\n\n    CATEGORY = \"conditioning\"\n    DESCRIPTION = \"Encodes a text prompt using a CLIP model into an embedding that can be used to guide the diffusion model towards generating specific images.\"\n\n    def encode(self, clip, text):\n        tokens = clip.tokenize(text)\n        return (clip.encode_from_tokens_scheduled(tokens), )\n\n\nclass ConditioningCombine:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\"conditioning_1\": (\"CONDITIONING\", ), \"conditioning_2\": (\"CONDITIONING\", )}}\n    RETURN_TYPES = (\"CONDITIONING\",)\n    FUNCTION = \"combine\"\n\n    CATEGORY = \"conditioning\"\n\n    def combine(self, conditioning_1, conditioning_2):\n        return (conditioning_1 + conditioning_2, )\n\nclass ConditioningAverage :\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\"conditioning_to\": (\"CONDITIONING\", ), \"conditioning_from\": (\"CONDITIONING\", ),\n                              \"conditioning_to_strength\": (\"FLOAT\", {\"default\": 1.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.01})\n                             }}\n    RETURN_TYPES = (\"CONDITIONING\",)\n    FUNCTION = \"addWeighted\"\n\n    CATEGORY = \"conditioning\"\n\n    def addWeighted(self, conditioning_to, conditioning_from, conditioning_to_strength):\n        out = []\n\n        if len(conditioning_from) > 1:\n            logging.warning(\"Warning: ConditioningAverage conditioning_from contains more than 1 cond, only the first one will actually be applied to conditioning_to.\")\n\n        cond_from = conditioning_from[0][0]\n        pooled_output_from = conditioning_from[0][1].get(\"pooled_output\", None)\n\n        for i in range(len(conditioning_to)):\n            t1 = conditioning_to[i][0]\n            pooled_output_to = conditioning_to[i][1].get(\"pooled_output\", pooled_output_from)\n            t0 = cond_from[:,:t1.shape[1]]\n            if t0.shape[1] < t1.shape[1]:\n                t0 = torch.cat([t0] + [torch.zeros((1, (t1.shape[1] - t0.shape[1]), t1.shape[2]))], dim=1)\n\n            tw = torch.mul(t1, conditioning_to_strength) + torch.mul(t0, (1.0 - conditioning_to_strength))\n            t_to = conditioning_to[i][1].copy()\n            if pooled_output_from is not None and pooled_output_to is not None:\n                t_to[\"pooled_output\"] = torch.mul(pooled_output_to, conditioning_to_strength) + torch.mul(pooled_output_from, (1.0 - conditioning_to_strength))\n            elif pooled_output_from is not None:\n                t_to[\"pooled_output\"] = pooled_output_from\n\n            n = [tw, t_to]\n            out.append(n)\n        return (out, )\n\nclass ConditioningConcat:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\n            \"conditioning_to\": (\"CONDITIONING\",),\n            \"conditioning_from\": (\"CONDITIONING\",),\n            }}\n    RETURN_TYPES = (\"CONDITIONING\",)\n    FUNCTION = \"concat\"\n\n    CATEGORY = \"conditioning\"\n\n    def concat(self, conditioning_to, conditioning_from):\n        out = []\n\n        if len(conditioning_from) > 1:\n            logging.warning(\"Warning: ConditioningConcat conditioning_from contains more than 1 cond, only the first one will actually be applied to conditioning_to.\")\n\n        cond_from = conditioning_from[0][0]\n\n        for i in range(len(conditioning_to)):\n            t1 = conditioning_to[i][0]\n            tw = torch.cat((t1, cond_from),1)\n            n = [tw, conditioning_to[i][1].copy()]\n            out.append(n)\n\n        return (out, )\n\nclass ConditioningSetArea:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\"conditioning\": (\"CONDITIONING\", ),\n                              \"width\": (\"INT\", {\"default\": 64, \"min\": 64, \"max\": MAX_RESOLUTION, \"step\": 8}),\n                              \"height\": (\"INT\", {\"default\": 64, \"min\": 64, \"max\": MAX_RESOLUTION, \"step\": 8}),\n                              \"x\": (\"INT\", {\"default\": 0, \"min\": 0, \"max\": MAX_RESOLUTION, \"step\": 8}),\n                              \"y\": (\"INT\", {\"default\": 0, \"min\": 0, \"max\": MAX_RESOLUTION, \"step\": 8}),\n                              \"strength\": (\"FLOAT\", {\"default\": 1.0, \"min\": 0.0, \"max\": 10.0, \"step\": 0.01}),\n                             }}\n    RETURN_TYPES = (\"CONDITIONING\",)\n    FUNCTION = \"append\"\n\n    CATEGORY = \"conditioning\"\n\n    def append(self, conditioning, width, height, x, y, strength):\n        c = node_helpers.conditioning_set_values(conditioning, {\"area\": (height // 8, width // 8, y // 8, x // 8),\n                                                                \"strength\": strength,\n                                                                \"set_area_to_bounds\": False})\n        return (c, )\n\nclass ConditioningSetAreaPercentage:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\"conditioning\": (\"CONDITIONING\", ),\n                              \"width\": (\"FLOAT\", {\"default\": 1.0, \"min\": 0, \"max\": 1.0, \"step\": 0.01}),\n                              \"height\": (\"FLOAT\", {\"default\": 1.0, \"min\": 0, \"max\": 1.0, \"step\": 0.01}),\n                              \"x\": (\"FLOAT\", {\"default\": 0, \"min\": 0, \"max\": 1.0, \"step\": 0.01}),\n                              \"y\": (\"FLOAT\", {\"default\": 0, \"min\": 0, \"max\": 1.0, \"step\": 0.01}),\n                              \"strength\": (\"FLOAT\", {\"default\": 1.0, \"min\": 0.0, \"max\": 10.0, \"step\": 0.01}),\n                             }}\n    RETURN_TYPES = (\"CONDITIONING\",)\n    FUNCTION = \"append\"\n\n    CATEGORY = \"conditioning\"\n\n    def append(self, conditioning, width, height, x, y, strength):\n        c = node_helpers.conditioning_set_values(conditioning, {\"area\": (\"percentage\", height, width, y, x),\n                                                                \"strength\": strength,\n                                                                \"set_area_to_bounds\": False})\n        return (c, )\n\nclass ConditioningSetAreaStrength:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\"conditioning\": (\"CONDITIONING\", ),\n                              \"strength\": (\"FLOAT\", {\"default\": 1.0, \"min\": 0.0, \"max\": 10.0, \"step\": 0.01}),\n                             }}\n    RETURN_TYPES = (\"CONDITIONING\",)\n    FUNCTION = \"append\"\n\n    CATEGORY = \"conditioning\"\n\n    def append(self, conditioning, strength):\n        c = node_helpers.conditioning_set_values(conditioning, {\"strength\": strength})\n        return (c, )\n\n\nclass ConditioningSetMask:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\"conditioning\": (\"CONDITIONING\", ),\n                              \"mask\": (\"MASK\", ),\n                              \"strength\": (\"FLOAT\", {\"default\": 1.0, \"min\": 0.0, \"max\": 10.0, \"step\": 0.01}),\n                              \"set_cond_area\": ([\"default\", \"mask bounds\"],),\n                             }}\n    RETURN_TYPES = (\"CONDITIONING\",)\n    FUNCTION = \"append\"\n\n    CATEGORY = \"conditioning\"\n\n    def append(self, conditioning, mask, set_cond_area, strength):\n        set_area_to_bounds = False\n        if set_cond_area != \"default\":\n            set_area_to_bounds = True\n        if len(mask.shape) < 3:\n            mask = mask.unsqueeze(0)\n\n        c = node_helpers.conditioning_set_values(conditioning, {\"mask\": mask,\n                                                                \"set_area_to_bounds\": set_area_to_bounds,\n                                                                \"mask_strength\": strength})\n        return (c, )\n\nclass ConditioningZeroOut:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\"conditioning\": (\"CONDITIONING\", )}}\n    RETURN_TYPES = (\"CONDITIONING\",)\n    FUNCTION = \"zero_out\"\n\n    CATEGORY = \"advanced/conditioning\"\n\n    def zero_out(self, conditioning):\n        c = []\n        for t in conditioning:\n            d = t[1].copy()\n            pooled_output = d.get(\"pooled_output\", None)\n            if pooled_output is not None:\n                d[\"pooled_output\"] = torch.zeros_like(pooled_output)\n            n = [torch.zeros_like(t[0]), d]\n            c.append(n)\n        return (c, )\n\nclass ConditioningSetTimestepRange:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\"conditioning\": (\"CONDITIONING\", ),\n                             \"start\": (\"FLOAT\", {\"default\": 0.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001}),\n                             \"end\": (\"FLOAT\", {\"default\": 1.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001})\n                             }}\n    RETURN_TYPES = (\"CONDITIONING\",)\n    FUNCTION = \"set_range\"\n\n    CATEGORY = \"advanced/conditioning\"\n\n    def set_range(self, conditioning, start, end):\n        c = node_helpers.conditioning_set_values(conditioning, {\"start_percent\": start,\n                                                                \"end_percent\": end})\n        return (c, )\n\nclass VAEDecode:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"samples\": (\"LATENT\", {\"tooltip\": \"The latent to be decoded.\"}),\n                \"vae\": (\"VAE\", {\"tooltip\": \"The VAE model used for decoding the latent.\"})\n            }\n        }\n    RETURN_TYPES = (\"IMAGE\",)\n    OUTPUT_TOOLTIPS = (\"The decoded image.\",)\n    FUNCTION = \"decode\"\n\n    CATEGORY = \"latent\"\n    DESCRIPTION = \"Decodes latent images back into pixel space images.\"\n\n    def decode(self, vae, samples):\n        images = vae.decode(samples[\"samples\"])\n        if len(images.shape) == 5: #Combine batches\n            images = images.reshape(-1, images.shape[-3], images.shape[-2], images.shape[-1])\n        return (images, )\n\nclass VAEDecodeTiled:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\"samples\": (\"LATENT\", ), \"vae\": (\"VAE\", ),\n                             \"tile_size\": (\"INT\", {\"default\": 512, \"min\": 64, \"max\": 4096, \"step\": 32}),\n                             \"overlap\": (\"INT\", {\"default\": 64, \"min\": 0, \"max\": 4096, \"step\": 32}),\n                             \"temporal_size\": (\"INT\", {\"default\": 64, \"min\": 8, \"max\": 4096, \"step\": 4, \"tooltip\": \"Only used for video VAEs: Amount of frames to decode at a time.\"}),\n                             \"temporal_overlap\": (\"INT\", {\"default\": 8, \"min\": 4, \"max\": 4096, \"step\": 4, \"tooltip\": \"Only used for video VAEs: Amount of frames to overlap.\"}),\n                            }}\n    RETURN_TYPES = (\"IMAGE\",)\n    FUNCTION = \"decode\"\n\n    CATEGORY = \"_for_testing\"\n\n    def decode(self, vae, samples, tile_size, overlap=64, temporal_size=64, temporal_overlap=8):\n        if tile_size < overlap * 4:\n            overlap = tile_size // 4\n        if temporal_size < temporal_overlap * 2:\n            temporal_overlap = temporal_overlap // 2\n        temporal_compression = vae.temporal_compression_decode()\n        if temporal_compression is not None:\n            temporal_size = max(2, temporal_size // temporal_compression)\n            temporal_overlap = max(1, min(temporal_size // 2, temporal_overlap // temporal_compression))\n        else:\n            temporal_size = None\n            temporal_overlap = None\n\n        compression = vae.spacial_compression_decode()\n        images = vae.decode_tiled(samples[\"samples\"], tile_x=tile_size // compression, tile_y=tile_size // compression, overlap=overlap // compression, tile_t=temporal_size, overlap_t=temporal_overlap)\n        if len(images.shape) == 5: #Combine batches\n            images = images.reshape(-1, images.shape[-3], images.shape[-2], images.shape[-1])\n        return (images, )\n\nclass VAEEncode:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"pixels\": (\"IMAGE\", ), \"vae\": (\"VAE\", )}}\n    RETURN_TYPES = (\"LATENT\",)\n    FUNCTION = \"encode\"\n\n    CATEGORY = \"latent\"\n\n    def encode(self, vae, pixels):\n        t = vae.encode(pixels[:,:,:,:3])\n        return ({\"samples\":t}, )\n\nclass VAEEncodeTiled:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\"pixels\": (\"IMAGE\", ), \"vae\": (\"VAE\", ),\n                             \"tile_size\": (\"INT\", {\"default\": 512, \"min\": 64, \"max\": 4096, \"step\": 64}),\n                             \"overlap\": (\"INT\", {\"default\": 64, \"min\": 0, \"max\": 4096, \"step\": 32}),\n                             \"temporal_size\": (\"INT\", {\"default\": 64, \"min\": 8, \"max\": 4096, \"step\": 4, \"tooltip\": \"Only used for video VAEs: Amount of frames to encode at a time.\"}),\n                             \"temporal_overlap\": (\"INT\", {\"default\": 8, \"min\": 4, \"max\": 4096, \"step\": 4, \"tooltip\": \"Only used for video VAEs: Amount of frames to overlap.\"}),\n                            }}\n    RETURN_TYPES = (\"LATENT\",)\n    FUNCTION = \"encode\"\n\n    CATEGORY = \"_for_testing\"\n\n    def encode(self, vae, pixels, tile_size, overlap, temporal_size=64, temporal_overlap=8):\n        t = vae.encode_tiled(pixels[:,:,:,:3], tile_x=tile_size, tile_y=tile_size, overlap=overlap, tile_t=temporal_size, overlap_t=temporal_overlap)\n        return ({\"samples\": t}, )\n\nclass VAEEncodeForInpaint:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"pixels\": (\"IMAGE\", ), \"vae\": (\"VAE\", ), \"mask\": (\"MASK\", ), \"grow_mask_by\": (\"INT\", {\"default\": 6, \"min\": 0, \"max\": 64, \"step\": 1}),}}\n    RETURN_TYPES = (\"LATENT\",)\n    FUNCTION = \"encode\"\n\n    CATEGORY = \"latent/inpaint\"\n\n    def encode(self, vae, pixels, mask, grow_mask_by=6):\n        x = (pixels.shape[1] // vae.downscale_ratio) * vae.downscale_ratio\n        y = (pixels.shape[2] // vae.downscale_ratio) * vae.downscale_ratio\n        mask = torch.nn.functional.interpolate(mask.reshape((-1, 1, mask.shape[-2], mask.shape[-1])), size=(pixels.shape[1], pixels.shape[2]), mode=\"bilinear\")\n\n        pixels = pixels.clone()\n        if pixels.shape[1] != x or pixels.shape[2] != y:\n            x_offset = (pixels.shape[1] % vae.downscale_ratio) // 2\n            y_offset = (pixels.shape[2] % vae.downscale_ratio) // 2\n            pixels = pixels[:,x_offset:x + x_offset, y_offset:y + y_offset,:]\n            mask = mask[:,:,x_offset:x + x_offset, y_offset:y + y_offset]\n\n        #grow mask by a few pixels to keep things seamless in latent space\n        if grow_mask_by == 0:\n            mask_erosion = mask\n        else:\n            kernel_tensor = torch.ones((1, 1, grow_mask_by, grow_mask_by))\n            padding = math.ceil((grow_mask_by - 1) / 2)\n\n            mask_erosion = torch.clamp(torch.nn.functional.conv2d(mask.round(), kernel_tensor, padding=padding), 0, 1)\n\n        m = (1.0 - mask.round()).squeeze(1)\n        for i in range(3):\n            pixels[:,:,:,i] -= 0.5\n            pixels[:,:,:,i] *= m\n            pixels[:,:,:,i] += 0.5\n        t = vae.encode(pixels)\n\n        return ({\"samples\":t, \"noise_mask\": (mask_erosion[:,:,:x,:y].round())}, )\n\n\nclass InpaintModelConditioning:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\"positive\": (\"CONDITIONING\", ),\n                             \"negative\": (\"CONDITIONING\", ),\n                             \"vae\": (\"VAE\", ),\n                             \"pixels\": (\"IMAGE\", ),\n                             \"mask\": (\"MASK\", ),\n                             \"noise_mask\": (\"BOOLEAN\", {\"default\": True, \"tooltip\": \"Add a noise mask to the latent so sampling will only happen within the mask. Might improve results or completely break things depending on the model.\"}),\n                             }}\n\n    RETURN_TYPES = (\"CONDITIONING\",\"CONDITIONING\",\"LATENT\")\n    RETURN_NAMES = (\"positive\", \"negative\", \"latent\")\n    FUNCTION = \"encode\"\n\n    CATEGORY = \"conditioning/inpaint\"\n\n    def encode(self, positive, negative, pixels, vae, mask, noise_mask=True):\n        x = (pixels.shape[1] // 8) * 8\n        y = (pixels.shape[2] // 8) * 8\n        mask = torch.nn.functional.interpolate(mask.reshape((-1, 1, mask.shape[-2], mask.shape[-1])), size=(pixels.shape[1], pixels.shape[2]), mode=\"bilinear\")\n\n        orig_pixels = pixels\n        pixels = orig_pixels.clone()\n        if pixels.shape[1] != x or pixels.shape[2] != y:\n            x_offset = (pixels.shape[1] % 8) // 2\n            y_offset = (pixels.shape[2] % 8) // 2\n            pixels = pixels[:,x_offset:x + x_offset, y_offset:y + y_offset,:]\n            mask = mask[:,:,x_offset:x + x_offset, y_offset:y + y_offset]\n\n        m = (1.0 - mask.round()).squeeze(1)\n        for i in range(3):\n            pixels[:,:,:,i] -= 0.5\n            pixels[:,:,:,i] *= m\n            pixels[:,:,:,i] += 0.5\n        concat_latent = vae.encode(pixels)\n        orig_latent = vae.encode(orig_pixels)\n\n        out_latent = {}\n\n        out_latent[\"samples\"] = orig_latent\n        if noise_mask:\n            out_latent[\"noise_mask\"] = mask\n\n        out = []\n        for conditioning in [positive, negative]:\n            c = node_helpers.conditioning_set_values(conditioning, {\"concat_latent_image\": concat_latent,\n                                                                    \"concat_mask\": mask})\n            out.append(c)\n        return (out[0], out[1], out_latent)\n\n\nclass SaveLatent:\n    def __init__(self):\n        self.output_dir = folder_paths.get_output_directory()\n\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"samples\": (\"LATENT\", ),\n                              \"filename_prefix\": (\"STRING\", {\"default\": \"latents/ComfyUI\"})},\n                \"hidden\": {\"prompt\": \"PROMPT\", \"extra_pnginfo\": \"EXTRA_PNGINFO\"},\n                }\n    RETURN_TYPES = ()\n    FUNCTION = \"save\"\n\n    OUTPUT_NODE = True\n\n    CATEGORY = \"_for_testing\"\n\n    def save(self, samples, filename_prefix=\"ComfyUI\", prompt=None, extra_pnginfo=None):\n        full_output_folder, filename, counter, subfolder, filename_prefix = folder_paths.get_save_image_path(filename_prefix, self.output_dir)\n\n        # support save metadata for latent sharing\n        prompt_info = \"\"\n        if prompt is not None:\n            prompt_info = json.dumps(prompt)\n\n        metadata = None\n        if not args.disable_metadata:\n            metadata = {\"prompt\": prompt_info}\n            if extra_pnginfo is not None:\n                for x in extra_pnginfo:\n                    metadata[x] = json.dumps(extra_pnginfo[x])\n\n        file = f\"{filename}_{counter:05}_.latent\"\n\n        results = list()\n        results.append({\n            \"filename\": file,\n            \"subfolder\": subfolder,\n            \"type\": \"output\"\n        })\n\n        file = os.path.join(full_output_folder, file)\n\n        output = {}\n        output[\"latent_tensor\"] = samples[\"samples\"]\n        output[\"latent_format_version_0\"] = torch.tensor([])\n\n        comfy.utils.save_torch_file(output, file, metadata=metadata)\n        return { \"ui\": { \"latents\": results } }\n\n\nclass LoadLatent:\n    @classmethod\n    def INPUT_TYPES(s):\n        input_dir = folder_paths.get_input_directory()\n        files = [f for f in os.listdir(input_dir) if os.path.isfile(os.path.join(input_dir, f)) and f.endswith(\".latent\")]\n        return {\"required\": {\"latent\": [sorted(files), ]}, }\n\n    CATEGORY = \"_for_testing\"\n\n    RETURN_TYPES = (\"LATENT\", )\n    FUNCTION = \"load\"\n\n    def load(self, latent):\n        latent_path = folder_paths.get_annotated_filepath(latent)\n        latent = safetensors.torch.load_file(latent_path, device=\"cpu\")\n        multiplier = 1.0\n        if \"latent_format_version_0\" not in latent:\n            multiplier = 1.0 / 0.18215\n        samples = {\"samples\": latent[\"latent_tensor\"].float() * multiplier}\n        return (samples, )\n\n    @classmethod\n    def IS_CHANGED(s, latent):\n        image_path = folder_paths.get_annotated_filepath(latent)\n        m = hashlib.sha256()\n        with open(image_path, 'rb') as f:\n            m.update(f.read())\n        return m.digest().hex()\n\n    @classmethod\n    def VALIDATE_INPUTS(s, latent):\n        if not folder_paths.exists_annotated_filepath(latent):\n            return \"Invalid latent file: {}\".format(latent)\n        return True\n\n\nclass CheckpointLoader:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"config_name\": (folder_paths.get_filename_list(\"configs\"), ),\n                              \"ckpt_name\": (folder_paths.get_filename_list(\"checkpoints\"), )}}\n    RETURN_TYPES = (\"MODEL\", \"CLIP\", \"VAE\")\n    FUNCTION = \"load_checkpoint\"\n\n    CATEGORY = \"advanced/loaders\"\n    DEPRECATED = True\n\n    def load_checkpoint(self, config_name, ckpt_name):\n        config_path = folder_paths.get_full_path(\"configs\", config_name)\n        ckpt_path = folder_paths.get_full_path_or_raise(\"checkpoints\", ckpt_name)\n        return comfy.sd.load_checkpoint(config_path, ckpt_path, output_vae=True, output_clip=True, embedding_directory=folder_paths.get_folder_paths(\"embeddings\"))\n\nclass CheckpointLoaderSimple:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"ckpt_name\": (folder_paths.get_filename_list(\"checkpoints\"), {\"tooltip\": \"The name of the checkpoint (model) to load.\"}),\n            }\n        }\n    RETURN_TYPES = (\"MODEL\", \"CLIP\", \"VAE\")\n    OUTPUT_TOOLTIPS = (\"The model used for denoising latents.\",\n                       \"The CLIP model used for encoding text prompts.\",\n                       \"The VAE model used for encoding and decoding images to and from latent space.\")\n    FUNCTION = \"load_checkpoint\"\n\n    CATEGORY = \"loaders\"\n    DESCRIPTION = \"Loads a diffusion model checkpoint, diffusion models are used to denoise latents.\"\n\n    def load_checkpoint(self, ckpt_name):\n        ckpt_path = folder_paths.get_full_path_or_raise(\"checkpoints\", ckpt_name)\n        out = comfy.sd.load_checkpoint_guess_config(ckpt_path, output_vae=True, output_clip=True, embedding_directory=folder_paths.get_folder_paths(\"embeddings\"))\n        return out[:3]\n\nclass DiffusersLoader:\n    @classmethod\n    def INPUT_TYPES(cls):\n        paths = []\n        for search_path in folder_paths.get_folder_paths(\"diffusers\"):\n            if os.path.exists(search_path):\n                for root, subdir, files in os.walk(search_path, followlinks=True):\n                    if \"model_index.json\" in files:\n                        paths.append(os.path.relpath(root, start=search_path))\n\n        return {\"required\": {\"model_path\": (paths,), }}\n    RETURN_TYPES = (\"MODEL\", \"CLIP\", \"VAE\")\n    FUNCTION = \"load_checkpoint\"\n\n    CATEGORY = \"advanced/loaders/deprecated\"\n\n    def load_checkpoint(self, model_path, output_vae=True, output_clip=True):\n        for search_path in folder_paths.get_folder_paths(\"diffusers\"):\n            if os.path.exists(search_path):\n                path = os.path.join(search_path, model_path)\n                if os.path.exists(path):\n                    model_path = path\n                    break\n\n        return comfy.diffusers_load.load_diffusers(model_path, output_vae=output_vae, output_clip=output_clip, embedding_directory=folder_paths.get_folder_paths(\"embeddings\"))\n\n\nclass unCLIPCheckpointLoader:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"ckpt_name\": (folder_paths.get_filename_list(\"checkpoints\"), ),\n                             }}\n    RETURN_TYPES = (\"MODEL\", \"CLIP\", \"VAE\", \"CLIP_VISION\")\n    FUNCTION = \"load_checkpoint\"\n\n    CATEGORY = \"loaders\"\n\n    def load_checkpoint(self, ckpt_name, output_vae=True, output_clip=True):\n        ckpt_path = folder_paths.get_full_path_or_raise(\"checkpoints\", ckpt_name)\n        out = comfy.sd.load_checkpoint_guess_config(ckpt_path, output_vae=True, output_clip=True, output_clipvision=True, embedding_directory=folder_paths.get_folder_paths(\"embeddings\"))\n        return out\n\nclass CLIPSetLastLayer:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"clip\": (\"CLIP\", ),\n                              \"stop_at_clip_layer\": (\"INT\", {\"default\": -1, \"min\": -24, \"max\": -1, \"step\": 1}),\n                              }}\n    RETURN_TYPES = (\"CLIP\",)\n    FUNCTION = \"set_last_layer\"\n\n    CATEGORY = \"conditioning\"\n\n    def set_last_layer(self, clip, stop_at_clip_layer):\n        clip = clip.clone()\n        clip.clip_layer(stop_at_clip_layer)\n        return (clip,)\n\nclass LoraLoader:\n    def __init__(self):\n        self.loaded_lora = None\n\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"model\": (\"MODEL\", {\"tooltip\": \"The diffusion model the LoRA will be applied to.\"}),\n                \"clip\": (\"CLIP\", {\"tooltip\": \"The CLIP model the LoRA will be applied to.\"}),\n                \"lora_name\": (folder_paths.get_filename_list(\"loras\"), {\"tooltip\": \"The name of the LoRA.\"}),\n                \"strength_model\": (\"FLOAT\", {\"default\": 1.0, \"min\": -100.0, \"max\": 100.0, \"step\": 0.01, \"tooltip\": \"How strongly to modify the diffusion model. This value can be negative.\"}),\n                \"strength_clip\": (\"FLOAT\", {\"default\": 1.0, \"min\": -100.0, \"max\": 100.0, \"step\": 0.01, \"tooltip\": \"How strongly to modify the CLIP model. This value can be negative.\"}),\n            }\n        }\n\n    RETURN_TYPES = (\"MODEL\", \"CLIP\")\n    OUTPUT_TOOLTIPS = (\"The modified diffusion model.\", \"The modified CLIP model.\")\n    FUNCTION = \"load_lora\"\n\n    CATEGORY = \"loaders\"\n    DESCRIPTION = \"LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together.\"\n\n    def load_lora(self, model, clip, lora_name, strength_model, strength_clip):\n        if strength_model == 0 and strength_clip == 0:\n            return (model, clip)\n\n        lora_path = folder_paths.get_full_path_or_raise(\"loras\", lora_name)\n        lora = None\n        if self.loaded_lora is not None:\n            if self.loaded_lora[0] == lora_path:\n                lora = self.loaded_lora[1]\n            else:\n                self.loaded_lora = None\n\n        if lora is None:\n            lora = comfy.utils.load_torch_file(lora_path, safe_load=True)\n            self.loaded_lora = (lora_path, lora)\n\n        model_lora, clip_lora = comfy.sd.load_lora_for_models(model, clip, lora, strength_model, strength_clip)\n        return (model_lora, clip_lora)\n\nclass LoraLoaderModelOnly(LoraLoader):\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"model\": (\"MODEL\",),\n                              \"lora_name\": (folder_paths.get_filename_list(\"loras\"), ),\n                              \"strength_model\": (\"FLOAT\", {\"default\": 1.0, \"min\": -100.0, \"max\": 100.0, \"step\": 0.01}),\n                              }}\n    RETURN_TYPES = (\"MODEL\",)\n    FUNCTION = \"load_lora_model_only\"\n\n    def load_lora_model_only(self, model, lora_name, strength_model):\n        return (self.load_lora(model, None, lora_name, strength_model, 0)[0],)\n\nclass VAELoader:\n    @staticmethod\n    def vae_list():\n        vaes = folder_paths.get_filename_list(\"vae\")\n        approx_vaes = folder_paths.get_filename_list(\"vae_approx\")\n        sdxl_taesd_enc = False\n        sdxl_taesd_dec = False\n        sd1_taesd_enc = False\n        sd1_taesd_dec = False\n        sd3_taesd_enc = False\n        sd3_taesd_dec = False\n        f1_taesd_enc = False\n        f1_taesd_dec = False\n\n        for v in approx_vaes:\n            if v.startswith(\"taesd_decoder.\"):\n                sd1_taesd_dec = True\n            elif v.startswith(\"taesd_encoder.\"):\n                sd1_taesd_enc = True\n            elif v.startswith(\"taesdxl_decoder.\"):\n                sdxl_taesd_dec = True\n            elif v.startswith(\"taesdxl_encoder.\"):\n                sdxl_taesd_enc = True\n            elif v.startswith(\"taesd3_decoder.\"):\n                sd3_taesd_dec = True\n            elif v.startswith(\"taesd3_encoder.\"):\n                sd3_taesd_enc = True\n            elif v.startswith(\"taef1_encoder.\"):\n                f1_taesd_dec = True\n            elif v.startswith(\"taef1_decoder.\"):\n                f1_taesd_enc = True\n        if sd1_taesd_dec and sd1_taesd_enc:\n            vaes.append(\"taesd\")\n        if sdxl_taesd_dec and sdxl_taesd_enc:\n            vaes.append(\"taesdxl\")\n        if sd3_taesd_dec and sd3_taesd_enc:\n            vaes.append(\"taesd3\")\n        if f1_taesd_dec and f1_taesd_enc:\n            vaes.append(\"taef1\")\n        return vaes\n\n    @staticmethod\n    def load_taesd(name):\n        sd = {}\n        approx_vaes = folder_paths.get_filename_list(\"vae_approx\")\n\n        encoder = next(filter(lambda a: a.startswith(\"{}_encoder.\".format(name)), approx_vaes))\n        decoder = next(filter(lambda a: a.startswith(\"{}_decoder.\".format(name)), approx_vaes))\n\n        enc = comfy.utils.load_torch_file(folder_paths.get_full_path_or_raise(\"vae_approx\", encoder))\n        for k in enc:\n            sd[\"taesd_encoder.{}\".format(k)] = enc[k]\n\n        dec = comfy.utils.load_torch_file(folder_paths.get_full_path_or_raise(\"vae_approx\", decoder))\n        for k in dec:\n            sd[\"taesd_decoder.{}\".format(k)] = dec[k]\n\n        if name == \"taesd\":\n            sd[\"vae_scale\"] = torch.tensor(0.18215)\n            sd[\"vae_shift\"] = torch.tensor(0.0)\n        elif name == \"taesdxl\":\n            sd[\"vae_scale\"] = torch.tensor(0.13025)\n            sd[\"vae_shift\"] = torch.tensor(0.0)\n        elif name == \"taesd3\":\n            sd[\"vae_scale\"] = torch.tensor(1.5305)\n            sd[\"vae_shift\"] = torch.tensor(0.0609)\n        elif name == \"taef1\":\n            sd[\"vae_scale\"] = torch.tensor(0.3611)\n            sd[\"vae_shift\"] = torch.tensor(0.1159)\n        return sd\n\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"vae_name\": (s.vae_list(), )}}\n    RETURN_TYPES = (\"VAE\",)\n    FUNCTION = \"load_vae\"\n\n    CATEGORY = \"loaders\"\n\n    #TODO: scale factor?\n    def load_vae(self, vae_name):\n        if vae_name in [\"taesd\", \"taesdxl\", \"taesd3\", \"taef1\"]:\n            sd = self.load_taesd(vae_name)\n        else:\n            vae_path = folder_paths.get_full_path_or_raise(\"vae\", vae_name)\n            sd = comfy.utils.load_torch_file(vae_path)\n        vae = comfy.sd.VAE(sd=sd)\n        return (vae,)\n\nclass ControlNetLoader:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"control_net_name\": (folder_paths.get_filename_list(\"controlnet\"), )}}\n\n    RETURN_TYPES = (\"CONTROL_NET\",)\n    FUNCTION = \"load_controlnet\"\n\n    CATEGORY = \"loaders\"\n\n    def load_controlnet(self, control_net_name):\n        controlnet_path = folder_paths.get_full_path_or_raise(\"controlnet\", control_net_name)\n        controlnet = comfy.controlnet.load_controlnet(controlnet_path)\n        return (controlnet,)\n\nclass DiffControlNetLoader:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"model\": (\"MODEL\",),\n                              \"control_net_name\": (folder_paths.get_filename_list(\"controlnet\"), )}}\n\n    RETURN_TYPES = (\"CONTROL_NET\",)\n    FUNCTION = \"load_controlnet\"\n\n    CATEGORY = \"loaders\"\n\n    def load_controlnet(self, model, control_net_name):\n        controlnet_path = folder_paths.get_full_path_or_raise(\"controlnet\", control_net_name)\n        controlnet = comfy.controlnet.load_controlnet(controlnet_path, model)\n        return (controlnet,)\n\n\nclass ControlNetApply:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\"conditioning\": (\"CONDITIONING\", ),\n                             \"control_net\": (\"CONTROL_NET\", ),\n                             \"image\": (\"IMAGE\", ),\n                             \"strength\": (\"FLOAT\", {\"default\": 1.0, \"min\": 0.0, \"max\": 10.0, \"step\": 0.01})\n                             }}\n    RETURN_TYPES = (\"CONDITIONING\",)\n    FUNCTION = \"apply_controlnet\"\n\n    DEPRECATED = True\n    CATEGORY = \"conditioning/controlnet\"\n\n    def apply_controlnet(self, conditioning, control_net, image, strength):\n        if strength == 0:\n            return (conditioning, )\n\n        c = []\n        control_hint = image.movedim(-1,1)\n        for t in conditioning:\n            n = [t[0], t[1].copy()]\n            c_net = control_net.copy().set_cond_hint(control_hint, strength)\n            if 'control' in t[1]:\n                c_net.set_previous_controlnet(t[1]['control'])\n            n[1]['control'] = c_net\n            n[1]['control_apply_to_uncond'] = True\n            c.append(n)\n        return (c, )\n\n\nclass ControlNetApplyAdvanced:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\"positive\": (\"CONDITIONING\", ),\n                             \"negative\": (\"CONDITIONING\", ),\n                             \"control_net\": (\"CONTROL_NET\", ),\n                             \"image\": (\"IMAGE\", ),\n                             \"strength\": (\"FLOAT\", {\"default\": 1.0, \"min\": 0.0, \"max\": 10.0, \"step\": 0.01}),\n                             \"start_percent\": (\"FLOAT\", {\"default\": 0.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001}),\n                             \"end_percent\": (\"FLOAT\", {\"default\": 1.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001})\n                             },\n                \"optional\": {\"vae\": (\"VAE\", ),\n                             }\n    }\n\n    RETURN_TYPES = (\"CONDITIONING\",\"CONDITIONING\")\n    RETURN_NAMES = (\"positive\", \"negative\")\n    FUNCTION = \"apply_controlnet\"\n\n    CATEGORY = \"conditioning/controlnet\"\n\n    def apply_controlnet(self, positive, negative, control_net, image, strength, start_percent, end_percent, vae=None, extra_concat=[]):\n        if strength == 0:\n            return (positive, negative)\n\n        control_hint = image.movedim(-1,1)\n        cnets = {}\n\n        out = []\n        for conditioning in [positive, negative]:\n            c = []\n            for t in conditioning:\n                d = t[1].copy()\n\n                prev_cnet = d.get('control', None)\n                if prev_cnet in cnets:\n                    c_net = cnets[prev_cnet]\n                else:\n                    c_net = control_net.copy().set_cond_hint(control_hint, strength, (start_percent, end_percent), vae=vae, extra_concat=extra_concat)\n                    c_net.set_previous_controlnet(prev_cnet)\n                    cnets[prev_cnet] = c_net\n\n                d['control'] = c_net\n                d['control_apply_to_uncond'] = False\n                n = [t[0], d]\n                c.append(n)\n            out.append(c)\n        return (out[0], out[1])\n\n\nclass UNETLoader:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"unet_name\": (folder_paths.get_filename_list(\"diffusion_models\"), ),\n                              \"weight_dtype\": ([\"default\", \"fp8_e4m3fn\", \"fp8_e4m3fn_fast\", \"fp8_e5m2\"],)\n                             }}\n    RETURN_TYPES = (\"MODEL\",)\n    FUNCTION = \"load_unet\"\n\n    CATEGORY = \"advanced/loaders\"\n\n    def load_unet(self, unet_name, weight_dtype):\n        model_options = {}\n        if weight_dtype == \"fp8_e4m3fn\":\n            model_options[\"dtype\"] = torch.float8_e4m3fn\n        elif weight_dtype == \"fp8_e4m3fn_fast\":\n            model_options[\"dtype\"] = torch.float8_e4m3fn\n            model_options[\"fp8_optimizations\"] = True\n        elif weight_dtype == \"fp8_e5m2\":\n            model_options[\"dtype\"] = torch.float8_e5m2\n\n        unet_path = folder_paths.get_full_path_or_raise(\"diffusion_models\", unet_name)\n        model = comfy.sd.load_diffusion_model(unet_path, model_options=model_options)\n        return (model,)\n\nclass CLIPLoader:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"clip_name\": (folder_paths.get_filename_list(\"text_encoders\"), ),\n                              \"type\": ([\"stable_diffusion\", \"stable_cascade\", \"sd3\", \"stable_audio\", \"mochi\", \"ltxv\", \"pixart\", \"cosmos\"], ),\n                              },\n                \"optional\": {\n                              \"device\": ([\"default\", \"cpu\"], {\"advanced\": True}),\n                             }}\n    RETURN_TYPES = (\"CLIP\",)\n    FUNCTION = \"load_clip\"\n\n    CATEGORY = \"advanced/loaders\"\n\n    DESCRIPTION = \"[Recipes]\\n\\nstable_diffusion: clip-l\\nstable_cascade: clip-g\\nsd3: t5 / clip-g / clip-l\\nstable_audio: t5\\nmochi: t5\\ncosmos: old t5 xxl\"\n\n    def load_clip(self, clip_name, type=\"stable_diffusion\", device=\"default\"):\n        if type == \"stable_cascade\":\n            clip_type = comfy.sd.CLIPType.STABLE_CASCADE\n        elif type == \"sd3\":\n            clip_type = comfy.sd.CLIPType.SD3\n        elif type == \"stable_audio\":\n            clip_type = comfy.sd.CLIPType.STABLE_AUDIO\n        elif type == \"mochi\":\n            clip_type = comfy.sd.CLIPType.MOCHI\n        elif type == \"ltxv\":\n            clip_type = comfy.sd.CLIPType.LTXV\n        elif type == \"pixart\":\n            clip_type = comfy.sd.CLIPType.PIXART\n        else:\n            clip_type = comfy.sd.CLIPType.STABLE_DIFFUSION\n\n        model_options = {}\n        if device == \"cpu\":\n            model_options[\"load_device\"] = model_options[\"offload_device\"] = torch.device(\"cpu\")\n\n        clip_path = folder_paths.get_full_path_or_raise(\"text_encoders\", clip_name)\n        clip = comfy.sd.load_clip(ckpt_paths=[clip_path], embedding_directory=folder_paths.get_folder_paths(\"embeddings\"), clip_type=clip_type, model_options=model_options)\n        return (clip,)\n\nclass DualCLIPLoader:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"clip_name1\": (folder_paths.get_filename_list(\"text_encoders\"), ),\n                              \"clip_name2\": (folder_paths.get_filename_list(\"text_encoders\"), ),\n                              \"type\": ([\"sdxl\", \"sd3\", \"flux\", \"hunyuan_video\"], ),\n                              },\n                \"optional\": {\n                              \"device\": ([\"default\", \"cpu\"], {\"advanced\": True}),\n                             }}\n    RETURN_TYPES = (\"CLIP\",)\n    FUNCTION = \"load_clip\"\n\n    CATEGORY = \"advanced/loaders\"\n\n    DESCRIPTION = \"[Recipes]\\n\\nsdxl: clip-l, clip-g\\nsd3: clip-l, clip-g / clip-l, t5 / clip-g, t5\\nflux: clip-l, t5\"\n\n    def load_clip(self, clip_name1, clip_name2, type, device=\"default\"):\n        clip_path1 = folder_paths.get_full_path_or_raise(\"text_encoders\", clip_name1)\n        clip_path2 = folder_paths.get_full_path_or_raise(\"text_encoders\", clip_name2)\n        if type == \"sdxl\":\n            clip_type = comfy.sd.CLIPType.STABLE_DIFFUSION\n        elif type == \"sd3\":\n            clip_type = comfy.sd.CLIPType.SD3\n        elif type == \"flux\":\n            clip_type = comfy.sd.CLIPType.FLUX\n        elif type == \"hunyuan_video\":\n            clip_type = comfy.sd.CLIPType.HUNYUAN_VIDEO\n\n        model_options = {}\n        if device == \"cpu\":\n            model_options[\"load_device\"] = model_options[\"offload_device\"] = torch.device(\"cpu\")\n\n        clip = comfy.sd.load_clip(ckpt_paths=[clip_path1, clip_path2], embedding_directory=folder_paths.get_folder_paths(\"embeddings\"), clip_type=clip_type, model_options=model_options)\n        return (clip,)\n\nclass CLIPVisionLoader:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"clip_name\": (folder_paths.get_filename_list(\"clip_vision\"), ),\n                             }}\n    RETURN_TYPES = (\"CLIP_VISION\",)\n    FUNCTION = \"load_clip\"\n\n    CATEGORY = \"loaders\"\n\n    def load_clip(self, clip_name):\n        clip_path = folder_paths.get_full_path_or_raise(\"clip_vision\", clip_name)\n        clip_vision = comfy.clip_vision.load(clip_path)\n        return (clip_vision,)\n\nclass CLIPVisionEncode:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"clip_vision\": (\"CLIP_VISION\",),\n                              \"image\": (\"IMAGE\",),\n                              \"crop\": ([\"center\", \"none\"],)\n                             }}\n    RETURN_TYPES = (\"CLIP_VISION_OUTPUT\",)\n    FUNCTION = \"encode\"\n\n    CATEGORY = \"conditioning\"\n\n    def encode(self, clip_vision, image, crop):\n        crop_image = True\n        if crop != \"center\":\n            crop_image = False\n        output = clip_vision.encode_image(image, crop=crop_image)\n        return (output,)\n\nclass StyleModelLoader:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"style_model_name\": (folder_paths.get_filename_list(\"style_models\"), )}}\n\n    RETURN_TYPES = (\"STYLE_MODEL\",)\n    FUNCTION = \"load_style_model\"\n\n    CATEGORY = \"loaders\"\n\n    def load_style_model(self, style_model_name):\n        style_model_path = folder_paths.get_full_path_or_raise(\"style_models\", style_model_name)\n        style_model = comfy.sd.load_style_model(style_model_path)\n        return (style_model,)\n\n\nclass StyleModelApply:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\"conditioning\": (\"CONDITIONING\", ),\n                             \"style_model\": (\"STYLE_MODEL\", ),\n                             \"clip_vision_output\": (\"CLIP_VISION_OUTPUT\", ),\n                             \"strength\": (\"FLOAT\", {\"default\": 1.0, \"min\": 0.0, \"max\": 10.0, \"step\": 0.001}),\n                             \"strength_type\": ([\"multiply\", \"attn_bias\"], ),\n                             }}\n    RETURN_TYPES = (\"CONDITIONING\",)\n    FUNCTION = \"apply_stylemodel\"\n\n    CATEGORY = \"conditioning/style_model\"\n\n    def apply_stylemodel(self, conditioning, style_model, clip_vision_output, strength, strength_type):\n        cond = style_model.get_cond(clip_vision_output).flatten(start_dim=0, end_dim=1).unsqueeze(dim=0)\n        if strength_type == \"multiply\":\n            cond *= strength\n\n        n = cond.shape[1]\n        c_out = []\n        for t in conditioning:\n            (txt, keys) = t\n            keys = keys.copy()\n            if strength_type == \"attn_bias\" and strength != 1.0:\n                # math.log raises an error if the argument is zero\n                # torch.log returns -inf, which is what we want\n                attn_bias = torch.log(torch.Tensor([strength]))\n                # get the size of the mask image\n                mask_ref_size = keys.get(\"attention_mask_img_shape\", (1, 1))\n                n_ref = mask_ref_size[0] * mask_ref_size[1]\n                n_txt = txt.shape[1]\n                # grab the existing mask\n                mask = keys.get(\"attention_mask\", None)\n                # create a default mask if it doesn't exist\n                if mask is None:\n                    mask = torch.zeros((txt.shape[0], n_txt + n_ref, n_txt + n_ref), dtype=torch.float16)\n                # convert the mask dtype, because it might be boolean\n                # we want it to be interpreted as a bias\n                if mask.dtype == torch.bool:\n                    # log(True) = log(1) = 0\n                    # log(False) = log(0) = -inf\n                    mask = torch.log(mask.to(dtype=torch.float16))\n                # now we make the mask bigger to add space for our new tokens\n                new_mask = torch.zeros((txt.shape[0], n_txt + n + n_ref, n_txt + n + n_ref), dtype=torch.float16)\n                # copy over the old mask, in quandrants\n                new_mask[:, :n_txt, :n_txt] = mask[:, :n_txt, :n_txt]\n                new_mask[:, :n_txt, n_txt+n:] = mask[:, :n_txt, n_txt:]\n                new_mask[:, n_txt+n:, :n_txt] = mask[:, n_txt:, :n_txt]\n                new_mask[:, n_txt+n:, n_txt+n:] = mask[:, n_txt:, n_txt:]\n                # now fill in the attention bias to our redux tokens\n                new_mask[:, :n_txt, n_txt:n_txt+n] = attn_bias\n                new_mask[:, n_txt+n:, n_txt:n_txt+n] = attn_bias\n                keys[\"attention_mask\"] = new_mask.to(txt.device)\n                keys[\"attention_mask_img_shape\"] = mask_ref_size\n\n            c_out.append([torch.cat((txt, cond), dim=1), keys])\n\n        return (c_out,)\n\nclass unCLIPConditioning:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\"conditioning\": (\"CONDITIONING\", ),\n                             \"clip_vision_output\": (\"CLIP_VISION_OUTPUT\", ),\n                             \"strength\": (\"FLOAT\", {\"default\": 1.0, \"min\": -10.0, \"max\": 10.0, \"step\": 0.01}),\n                             \"noise_augmentation\": (\"FLOAT\", {\"default\": 0.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.01}),\n                             }}\n    RETURN_TYPES = (\"CONDITIONING\",)\n    FUNCTION = \"apply_adm\"\n\n    CATEGORY = \"conditioning\"\n\n    def apply_adm(self, conditioning, clip_vision_output, strength, noise_augmentation):\n        if strength == 0:\n            return (conditioning, )\n\n        c = []\n        for t in conditioning:\n            o = t[1].copy()\n            x = {\"clip_vision_output\": clip_vision_output, \"strength\": strength, \"noise_augmentation\": noise_augmentation}\n            if \"unclip_conditioning\" in o:\n                o[\"unclip_conditioning\"] = o[\"unclip_conditioning\"][:] + [x]\n            else:\n                o[\"unclip_conditioning\"] = [x]\n            n = [t[0], o]\n            c.append(n)\n        return (c, )\n\nclass GLIGENLoader:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"gligen_name\": (folder_paths.get_filename_list(\"gligen\"), )}}\n\n    RETURN_TYPES = (\"GLIGEN\",)\n    FUNCTION = \"load_gligen\"\n\n    CATEGORY = \"loaders\"\n\n    def load_gligen(self, gligen_name):\n        gligen_path = folder_paths.get_full_path_or_raise(\"gligen\", gligen_name)\n        gligen = comfy.sd.load_gligen(gligen_path)\n        return (gligen,)\n\nclass GLIGENTextBoxApply:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\"conditioning_to\": (\"CONDITIONING\", ),\n                              \"clip\": (\"CLIP\", ),\n                              \"gligen_textbox_model\": (\"GLIGEN\", ),\n                              \"text\": (\"STRING\", {\"multiline\": True, \"dynamicPrompts\": True}),\n                              \"width\": (\"INT\", {\"default\": 64, \"min\": 8, \"max\": MAX_RESOLUTION, \"step\": 8}),\n                              \"height\": (\"INT\", {\"default\": 64, \"min\": 8, \"max\": MAX_RESOLUTION, \"step\": 8}),\n                              \"x\": (\"INT\", {\"default\": 0, \"min\": 0, \"max\": MAX_RESOLUTION, \"step\": 8}),\n                              \"y\": (\"INT\", {\"default\": 0, \"min\": 0, \"max\": MAX_RESOLUTION, \"step\": 8}),\n                             }}\n    RETURN_TYPES = (\"CONDITIONING\",)\n    FUNCTION = \"append\"\n\n    CATEGORY = \"conditioning/gligen\"\n\n    def append(self, conditioning_to, clip, gligen_textbox_model, text, width, height, x, y):\n        c = []\n        cond, cond_pooled = clip.encode_from_tokens(clip.tokenize(text), return_pooled=\"unprojected\")\n        for t in conditioning_to:\n            n = [t[0], t[1].copy()]\n            position_params = [(cond_pooled, height // 8, width // 8, y // 8, x // 8)]\n            prev = []\n            if \"gligen\" in n[1]:\n                prev = n[1]['gligen'][2]\n\n            n[1]['gligen'] = (\"position\", gligen_textbox_model, prev + position_params)\n            c.append(n)\n        return (c, )\n\nclass EmptyLatentImage:\n    def __init__(self):\n        self.device = comfy.model_management.intermediate_device()\n\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"width\": (\"INT\", {\"default\": 512, \"min\": 16, \"max\": MAX_RESOLUTION, \"step\": 8, \"tooltip\": \"The width of the latent images in pixels.\"}),\n                \"height\": (\"INT\", {\"default\": 512, \"min\": 16, \"max\": MAX_RESOLUTION, \"step\": 8, \"tooltip\": \"The height of the latent images in pixels.\"}),\n                \"batch_size\": (\"INT\", {\"default\": 1, \"min\": 1, \"max\": 4096, \"tooltip\": \"The number of latent images in the batch.\"})\n            }\n        }\n    RETURN_TYPES = (\"LATENT\",)\n    OUTPUT_TOOLTIPS = (\"The empty latent image batch.\",)\n    FUNCTION = \"generate\"\n\n    CATEGORY = \"latent\"\n    DESCRIPTION = \"Create a new batch of empty latent images to be denoised via sampling.\"\n\n    def generate(self, width, height, batch_size=1):\n        latent = torch.zeros([batch_size, 4, height // 8, width // 8], device=self.device)\n        return ({\"samples\":latent}, )\n\n\nclass LatentFromBatch:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"samples\": (\"LATENT\",),\n                              \"batch_index\": (\"INT\", {\"default\": 0, \"min\": 0, \"max\": 63}),\n                              \"length\": (\"INT\", {\"default\": 1, \"min\": 1, \"max\": 64}),\n                              }}\n    RETURN_TYPES = (\"LATENT\",)\n    FUNCTION = \"frombatch\"\n\n    CATEGORY = \"latent/batch\"\n\n    def frombatch(self, samples, batch_index, length):\n        s = samples.copy()\n        s_in = samples[\"samples\"]\n        batch_index = min(s_in.shape[0] - 1, batch_index)\n        length = min(s_in.shape[0] - batch_index, length)\n        s[\"samples\"] = s_in[batch_index:batch_index + length].clone()\n        if \"noise_mask\" in samples:\n            masks = samples[\"noise_mask\"]\n            if masks.shape[0] == 1:\n                s[\"noise_mask\"] = masks.clone()\n            else:\n                if masks.shape[0] < s_in.shape[0]:\n                    masks = masks.repeat(math.ceil(s_in.shape[0] / masks.shape[0]), 1, 1, 1)[:s_in.shape[0]]\n                s[\"noise_mask\"] = masks[batch_index:batch_index + length].clone()\n        if \"batch_index\" not in s:\n            s[\"batch_index\"] = [x for x in range(batch_index, batch_index+length)]\n        else:\n            s[\"batch_index\"] = samples[\"batch_index\"][batch_index:batch_index + length]\n        return (s,)\n\nclass RepeatLatentBatch:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"samples\": (\"LATENT\",),\n                              \"amount\": (\"INT\", {\"default\": 1, \"min\": 1, \"max\": 64}),\n                              }}\n    RETURN_TYPES = (\"LATENT\",)\n    FUNCTION = \"repeat\"\n\n    CATEGORY = \"latent/batch\"\n\n    def repeat(self, samples, amount):\n        s = samples.copy()\n        s_in = samples[\"samples\"]\n\n        s[\"samples\"] = s_in.repeat((amount, 1,1,1))\n        if \"noise_mask\" in samples and samples[\"noise_mask\"].shape[0] > 1:\n            masks = samples[\"noise_mask\"]\n            if masks.shape[0] < s_in.shape[0]:\n                masks = masks.repeat(math.ceil(s_in.shape[0] / masks.shape[0]), 1, 1, 1)[:s_in.shape[0]]\n            s[\"noise_mask\"] = samples[\"noise_mask\"].repeat((amount, 1,1,1))\n        if \"batch_index\" in s:\n            offset = max(s[\"batch_index\"]) - min(s[\"batch_index\"]) + 1\n            s[\"batch_index\"] = s[\"batch_index\"] + [x + (i * offset) for i in range(1, amount) for x in s[\"batch_index\"]]\n        return (s,)\n\nclass LatentUpscale:\n    upscale_methods = [\"nearest-exact\", \"bilinear\", \"area\", \"bicubic\", \"bislerp\"]\n    crop_methods = [\"disabled\", \"center\"]\n\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"samples\": (\"LATENT\",), \"upscale_method\": (s.upscale_methods,),\n                              \"width\": (\"INT\", {\"default\": 512, \"min\": 0, \"max\": MAX_RESOLUTION, \"step\": 8}),\n                              \"height\": (\"INT\", {\"default\": 512, \"min\": 0, \"max\": MAX_RESOLUTION, \"step\": 8}),\n                              \"crop\": (s.crop_methods,)}}\n    RETURN_TYPES = (\"LATENT\",)\n    FUNCTION = \"upscale\"\n\n    CATEGORY = \"latent\"\n\n    def upscale(self, samples, upscale_method, width, height, crop):\n        if width == 0 and height == 0:\n            s = samples\n        else:\n            s = samples.copy()\n\n            if width == 0:\n                height = max(64, height)\n                width = max(64, round(samples[\"samples\"].shape[-1] * height / samples[\"samples\"].shape[-2]))\n            elif height == 0:\n                width = max(64, width)\n                height = max(64, round(samples[\"samples\"].shape[-2] * width / samples[\"samples\"].shape[-1]))\n            else:\n                width = max(64, width)\n                height = max(64, height)\n\n            s[\"samples\"] = comfy.utils.common_upscale(samples[\"samples\"], width // 8, height // 8, upscale_method, crop)\n        return (s,)\n\nclass LatentUpscaleBy:\n    upscale_methods = [\"nearest-exact\", \"bilinear\", \"area\", \"bicubic\", \"bislerp\"]\n\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"samples\": (\"LATENT\",), \"upscale_method\": (s.upscale_methods,),\n                              \"scale_by\": (\"FLOAT\", {\"default\": 1.5, \"min\": 0.01, \"max\": 8.0, \"step\": 0.01}),}}\n    RETURN_TYPES = (\"LATENT\",)\n    FUNCTION = \"upscale\"\n\n    CATEGORY = \"latent\"\n\n    def upscale(self, samples, upscale_method, scale_by):\n        s = samples.copy()\n        width = round(samples[\"samples\"].shape[-1] * scale_by)\n        height = round(samples[\"samples\"].shape[-2] * scale_by)\n        s[\"samples\"] = comfy.utils.common_upscale(samples[\"samples\"], width, height, upscale_method, \"disabled\")\n        return (s,)\n\nclass LatentRotate:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"samples\": (\"LATENT\",),\n                              \"rotation\": ([\"none\", \"90 degrees\", \"180 degrees\", \"270 degrees\"],),\n                              }}\n    RETURN_TYPES = (\"LATENT\",)\n    FUNCTION = \"rotate\"\n\n    CATEGORY = \"latent/transform\"\n\n    def rotate(self, samples, rotation):\n        s = samples.copy()\n        rotate_by = 0\n        if rotation.startswith(\"90\"):\n            rotate_by = 1\n        elif rotation.startswith(\"180\"):\n            rotate_by = 2\n        elif rotation.startswith(\"270\"):\n            rotate_by = 3\n\n        s[\"samples\"] = torch.rot90(samples[\"samples\"], k=rotate_by, dims=[3, 2])\n        return (s,)\n\nclass LatentFlip:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"samples\": (\"LATENT\",),\n                              \"flip_method\": ([\"x-axis: vertically\", \"y-axis: horizontally\"],),\n                              }}\n    RETURN_TYPES = (\"LATENT\",)\n    FUNCTION = \"flip\"\n\n    CATEGORY = \"latent/transform\"\n\n    def flip(self, samples, flip_method):\n        s = samples.copy()\n        if flip_method.startswith(\"x\"):\n            s[\"samples\"] = torch.flip(samples[\"samples\"], dims=[2])\n        elif flip_method.startswith(\"y\"):\n            s[\"samples\"] = torch.flip(samples[\"samples\"], dims=[3])\n\n        return (s,)\n\nclass LatentComposite:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"samples_to\": (\"LATENT\",),\n                              \"samples_from\": (\"LATENT\",),\n                              \"x\": (\"INT\", {\"default\": 0, \"min\": 0, \"max\": MAX_RESOLUTION, \"step\": 8}),\n                              \"y\": (\"INT\", {\"default\": 0, \"min\": 0, \"max\": MAX_RESOLUTION, \"step\": 8}),\n                              \"feather\": (\"INT\", {\"default\": 0, \"min\": 0, \"max\": MAX_RESOLUTION, \"step\": 8}),\n                              }}\n    RETURN_TYPES = (\"LATENT\",)\n    FUNCTION = \"composite\"\n\n    CATEGORY = \"latent\"\n\n    def composite(self, samples_to, samples_from, x, y, composite_method=\"normal\", feather=0):\n        x =  x // 8\n        y = y // 8\n        feather = feather // 8\n        samples_out = samples_to.copy()\n        s = samples_to[\"samples\"].clone()\n        samples_to = samples_to[\"samples\"]\n        samples_from = samples_from[\"samples\"]\n        if feather == 0:\n            s[:,:,y:y+samples_from.shape[2],x:x+samples_from.shape[3]] = samples_from[:,:,:samples_to.shape[2] - y, :samples_to.shape[3] - x]\n        else:\n            samples_from = samples_from[:,:,:samples_to.shape[2] - y, :samples_to.shape[3] - x]\n            mask = torch.ones_like(samples_from)\n            for t in range(feather):\n                if y != 0:\n                    mask[:,:,t:1+t,:] *= ((1.0/feather) * (t + 1))\n\n                if y + samples_from.shape[2] < samples_to.shape[2]:\n                    mask[:,:,mask.shape[2] -1 -t: mask.shape[2]-t,:] *= ((1.0/feather) * (t + 1))\n                if x != 0:\n                    mask[:,:,:,t:1+t] *= ((1.0/feather) * (t + 1))\n                if x + samples_from.shape[3] < samples_to.shape[3]:\n                    mask[:,:,:,mask.shape[3]- 1 - t: mask.shape[3]- t] *= ((1.0/feather) * (t + 1))\n            rev_mask = torch.ones_like(mask) - mask\n            s[:,:,y:y+samples_from.shape[2],x:x+samples_from.shape[3]] = samples_from[:,:,:samples_to.shape[2] - y, :samples_to.shape[3] - x] * mask + s[:,:,y:y+samples_from.shape[2],x:x+samples_from.shape[3]] * rev_mask\n        samples_out[\"samples\"] = s\n        return (samples_out,)\n\nclass LatentBlend:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\n            \"samples1\": (\"LATENT\",),\n            \"samples2\": (\"LATENT\",),\n            \"blend_factor\": (\"FLOAT\", {\n                \"default\": 0.5,\n                \"min\": 0,\n                \"max\": 1,\n                \"step\": 0.01\n            }),\n        }}\n\n    RETURN_TYPES = (\"LATENT\",)\n    FUNCTION = \"blend\"\n\n    CATEGORY = \"_for_testing\"\n\n    def blend(self, samples1, samples2, blend_factor:float, blend_mode: str=\"normal\"):\n\n        samples_out = samples1.copy()\n        samples1 = samples1[\"samples\"]\n        samples2 = samples2[\"samples\"]\n\n        if samples1.shape != samples2.shape:\n            samples2.permute(0, 3, 1, 2)\n            samples2 = comfy.utils.common_upscale(samples2, samples1.shape[3], samples1.shape[2], 'bicubic', crop='center')\n            samples2.permute(0, 2, 3, 1)\n\n        samples_blended = self.blend_mode(samples1, samples2, blend_mode)\n        samples_blended = samples1 * blend_factor + samples_blended * (1 - blend_factor)\n        samples_out[\"samples\"] = samples_blended\n        return (samples_out,)\n\n    def blend_mode(self, img1, img2, mode):\n        if mode == \"normal\":\n            return img2\n        else:\n            raise ValueError(f\"Unsupported blend mode: {mode}\")\n\nclass LatentCrop:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"samples\": (\"LATENT\",),\n                              \"width\": (\"INT\", {\"default\": 512, \"min\": 64, \"max\": MAX_RESOLUTION, \"step\": 8}),\n                              \"height\": (\"INT\", {\"default\": 512, \"min\": 64, \"max\": MAX_RESOLUTION, \"step\": 8}),\n                              \"x\": (\"INT\", {\"default\": 0, \"min\": 0, \"max\": MAX_RESOLUTION, \"step\": 8}),\n                              \"y\": (\"INT\", {\"default\": 0, \"min\": 0, \"max\": MAX_RESOLUTION, \"step\": 8}),\n                              }}\n    RETURN_TYPES = (\"LATENT\",)\n    FUNCTION = \"crop\"\n\n    CATEGORY = \"latent/transform\"\n\n    def crop(self, samples, width, height, x, y):\n        s = samples.copy()\n        samples = samples['samples']\n        x =  x // 8\n        y = y // 8\n\n        #enfonce minimum size of 64\n        if x > (samples.shape[3] - 8):\n            x = samples.shape[3] - 8\n        if y > (samples.shape[2] - 8):\n            y = samples.shape[2] - 8\n\n        new_height = height // 8\n        new_width = width // 8\n        to_x = new_width + x\n        to_y = new_height + y\n        s['samples'] = samples[:,:,y:to_y, x:to_x]\n        return (s,)\n\nclass SetLatentNoiseMask:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"samples\": (\"LATENT\",),\n                              \"mask\": (\"MASK\",),\n                              }}\n    RETURN_TYPES = (\"LATENT\",)\n    FUNCTION = \"set_mask\"\n\n    CATEGORY = \"latent/inpaint\"\n\n    def set_mask(self, samples, mask):\n        s = samples.copy()\n        s[\"noise_mask\"] = mask.reshape((-1, 1, mask.shape[-2], mask.shape[-1]))\n        return (s,)\n\ndef common_ksampler(model, seed, steps, cfg, sampler_name, scheduler, positive, negative, latent, denoise=1.0, disable_noise=False, start_step=None, last_step=None, force_full_denoise=False):\n    latent_image = latent[\"samples\"]\n    latent_image = comfy.sample.fix_empty_latent_channels(model, latent_image)\n\n    if disable_noise:\n        noise = torch.zeros(latent_image.size(), dtype=latent_image.dtype, layout=latent_image.layout, device=\"cpu\")\n    else:\n        batch_inds = latent[\"batch_index\"] if \"batch_index\" in latent else None\n        noise = comfy.sample.prepare_noise(latent_image, seed, batch_inds)\n\n    noise_mask = None\n    if \"noise_mask\" in latent:\n        noise_mask = latent[\"noise_mask\"]\n\n    callback = latent_preview.prepare_callback(model, steps)\n    disable_pbar = not comfy.utils.PROGRESS_BAR_ENABLED\n    samples = comfy.sample.sample(model, noise, steps, cfg, sampler_name, scheduler, positive, negative, latent_image,\n                                  denoise=denoise, disable_noise=disable_noise, start_step=start_step, last_step=last_step,\n                                  force_full_denoise=force_full_denoise, noise_mask=noise_mask, callback=callback, disable_pbar=disable_pbar, seed=seed)\n    out = latent.copy()\n    out[\"samples\"] = samples\n    return (out, )\n\nclass KSampler:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"model\": (\"MODEL\", {\"tooltip\": \"The model used for denoising the input latent.\"}),\n                \"seed\": (\"INT\", {\"default\": 0, \"min\": 0, \"max\": 0xffffffffffffffff, \"tooltip\": \"The random seed used for creating the noise.\"}),\n                \"steps\": (\"INT\", {\"default\": 20, \"min\": 1, \"max\": 10000, \"tooltip\": \"The number of steps used in the denoising process.\"}),\n                \"cfg\": (\"FLOAT\", {\"default\": 8.0, \"min\": 0.0, \"max\": 100.0, \"step\":0.1, \"round\": 0.01, \"tooltip\": \"The Classifier-Free Guidance scale balances creativity and adherence to the prompt. Higher values result in images more closely matching the prompt however too high values will negatively impact quality.\"}),\n                \"sampler_name\": (comfy.samplers.KSampler.SAMPLERS, {\"tooltip\": \"The algorithm used when sampling, this can affect the quality, speed, and style of the generated output.\"}),\n                \"scheduler\": (comfy.samplers.KSampler.SCHEDULERS, {\"tooltip\": \"The scheduler controls how noise is gradually removed to form the image.\"}),\n                \"positive\": (\"CONDITIONING\", {\"tooltip\": \"The conditioning describing the attributes you want to include in the image.\"}),\n                \"negative\": (\"CONDITIONING\", {\"tooltip\": \"The conditioning describing the attributes you want to exclude from the image.\"}),\n                \"latent_image\": (\"LATENT\", {\"tooltip\": \"The latent image to denoise.\"}),\n                \"denoise\": (\"FLOAT\", {\"default\": 1.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.01, \"tooltip\": \"The amount of denoising applied, lower values will maintain the structure of the initial image allowing for image to image sampling.\"}),\n            }\n        }\n\n    RETURN_TYPES = (\"LATENT\",)\n    OUTPUT_TOOLTIPS = (\"The denoised latent.\",)\n    FUNCTION = \"sample\"\n\n    CATEGORY = \"sampling\"\n    DESCRIPTION = \"Uses the provided model, positive and negative conditioning to denoise the latent image.\"\n\n    def sample(self, model, seed, steps, cfg, sampler_name, scheduler, positive, negative, latent_image, denoise=1.0):\n        return common_ksampler(model, seed, steps, cfg, sampler_name, scheduler, positive, negative, latent_image, denoise=denoise)\n\nclass KSamplerAdvanced:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\":\n                    {\"model\": (\"MODEL\",),\n                    \"add_noise\": ([\"enable\", \"disable\"], ),\n                    \"noise_seed\": (\"INT\", {\"default\": 0, \"min\": 0, \"max\": 0xffffffffffffffff}),\n                    \"steps\": (\"INT\", {\"default\": 20, \"min\": 1, \"max\": 10000}),\n                    \"cfg\": (\"FLOAT\", {\"default\": 8.0, \"min\": 0.0, \"max\": 100.0, \"step\":0.1, \"round\": 0.01}),\n                    \"sampler_name\": (comfy.samplers.KSampler.SAMPLERS, ),\n                    \"scheduler\": (comfy.samplers.KSampler.SCHEDULERS, ),\n                    \"positive\": (\"CONDITIONING\", ),\n                    \"negative\": (\"CONDITIONING\", ),\n                    \"latent_image\": (\"LATENT\", ),\n                    \"start_at_step\": (\"INT\", {\"default\": 0, \"min\": 0, \"max\": 10000}),\n                    \"end_at_step\": (\"INT\", {\"default\": 10000, \"min\": 0, \"max\": 10000}),\n                    \"return_with_leftover_noise\": ([\"disable\", \"enable\"], ),\n                     }\n                }\n\n    RETURN_TYPES = (\"LATENT\",)\n    FUNCTION = \"sample\"\n\n    CATEGORY = \"sampling\"\n\n    def sample(self, model, add_noise, noise_seed, steps, cfg, sampler_name, scheduler, positive, negative, latent_image, start_at_step, end_at_step, return_with_leftover_noise, denoise=1.0):\n        force_full_denoise = True\n        if return_with_leftover_noise == \"enable\":\n            force_full_denoise = False\n        disable_noise = False\n        if add_noise == \"disable\":\n            disable_noise = True\n        return common_ksampler(model, noise_seed, steps, cfg, sampler_name, scheduler, positive, negative, latent_image, denoise=denoise, disable_noise=disable_noise, start_step=start_at_step, last_step=end_at_step, force_full_denoise=force_full_denoise)\n\nclass SaveImage:\n    def __init__(self):\n        self.output_dir = folder_paths.get_output_directory()\n        self.type = \"output\"\n        self.prefix_append = \"\"\n        self.compress_level = 4\n\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"images\": (\"IMAGE\", {\"tooltip\": \"The images to save.\"}),\n                \"filename_prefix\": (\"STRING\", {\"default\": \"ComfyUI\", \"tooltip\": \"The prefix for the file to save. This may include formatting information such as %date:yyyy-MM-dd% or %Empty Latent Image.width% to include values from nodes.\"})\n            },\n            \"hidden\": {\n                \"prompt\": \"PROMPT\", \"extra_pnginfo\": \"EXTRA_PNGINFO\"\n            },\n        }\n\n    RETURN_TYPES = ()\n    FUNCTION = \"save_images\"\n\n    OUTPUT_NODE = True\n\n    CATEGORY = \"image\"\n    DESCRIPTION = \"Saves the input images to your ComfyUI output directory.\"\n\n    def save_images(self, images, filename_prefix=\"ComfyUI\", prompt=None, extra_pnginfo=None):\n        filename_prefix += self.prefix_append\n        full_output_folder, filename, counter, subfolder, filename_prefix = folder_paths.get_save_image_path(filename_prefix, self.output_dir, images[0].shape[1], images[0].shape[0])\n        results = list()\n        for (batch_number, image) in enumerate(images):\n            i = 255. * image.cpu().numpy()\n            img = Image.fromarray(np.clip(i, 0, 255).astype(np.uint8))\n            metadata = None\n            if not args.disable_metadata:\n                metadata = PngInfo()\n                if prompt is not None:\n                    metadata.add_text(\"prompt\", json.dumps(prompt))\n                if extra_pnginfo is not None:\n                    for x in extra_pnginfo:\n                        metadata.add_text(x, json.dumps(extra_pnginfo[x]))\n\n            filename_with_batch_num = filename.replace(\"%batch_num%\", str(batch_number))\n            file = f\"{filename_with_batch_num}_{counter:05}_.png\"\n            img.save(os.path.join(full_output_folder, file), pnginfo=metadata, compress_level=self.compress_level)\n            results.append({\n                \"filename\": file,\n                \"subfolder\": subfolder,\n                \"type\": self.type\n            })\n            counter += 1\n\n        return { \"ui\": { \"images\": results } }\n\nclass PreviewImage(SaveImage):\n    def __init__(self):\n        self.output_dir = folder_paths.get_temp_directory()\n        self.type = \"temp\"\n        self.prefix_append = \"_temp_\" + ''.join(random.choice(\"abcdefghijklmnopqrstupvxyz\") for x in range(5))\n        self.compress_level = 1\n\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\":\n                    {\"images\": (\"IMAGE\", ), },\n                \"hidden\": {\"prompt\": \"PROMPT\", \"extra_pnginfo\": \"EXTRA_PNGINFO\"},\n                }\n\nclass LoadImage:\n    @classmethod\n    def INPUT_TYPES(s):\n        input_dir = folder_paths.get_input_directory()\n        files = [f for f in os.listdir(input_dir) if os.path.isfile(os.path.join(input_dir, f))]\n        return {\"required\":\n                    {\"image\": (sorted(files), {\"image_upload\": True})},\n                }\n\n    CATEGORY = \"image\"\n\n    RETURN_TYPES = (\"IMAGE\", \"MASK\")\n    FUNCTION = \"load_image\"\n    def load_image(self, image):\n        image_path = folder_paths.get_annotated_filepath(image)\n\n        img = node_helpers.pillow(Image.open, image_path)\n\n        output_images = []\n        output_masks = []\n        w, h = None, None\n\n        excluded_formats = ['MPO']\n\n        for i in ImageSequence.Iterator(img):\n            i = node_helpers.pillow(ImageOps.exif_transpose, i)\n\n            if i.mode == 'I':\n                i = i.point(lambda i: i * (1 / 255))\n            image = i.convert(\"RGB\")\n\n            if len(output_images) == 0:\n                w = image.size[0]\n                h = image.size[1]\n\n            if image.size[0] != w or image.size[1] != h:\n                continue\n\n            image = np.array(image).astype(np.float32) / 255.0\n            image = torch.from_numpy(image)[None,]\n            if 'A' in i.getbands():\n                mask = np.array(i.getchannel('A')).astype(np.float32) / 255.0\n                mask = 1. - torch.from_numpy(mask)\n            else:\n                mask = torch.zeros((64,64), dtype=torch.float32, device=\"cpu\")\n            output_images.append(image)\n            output_masks.append(mask.unsqueeze(0))\n\n        if len(output_images) > 1 and img.format not in excluded_formats:\n            output_image = torch.cat(output_images, dim=0)\n            output_mask = torch.cat(output_masks, dim=0)\n        else:\n            output_image = output_images[0]\n            output_mask = output_masks[0]\n\n        return (output_image, output_mask)\n\n    @classmethod\n    def IS_CHANGED(s, image):\n        image_path = folder_paths.get_annotated_filepath(image)\n        m = hashlib.sha256()\n        with open(image_path, 'rb') as f:\n            m.update(f.read())\n        return m.digest().hex()\n\n    @classmethod\n    def VALIDATE_INPUTS(s, image):\n        if not folder_paths.exists_annotated_filepath(image):\n            return \"Invalid image file: {}\".format(image)\n\n        return True\n\nclass LoadImageMask:\n    _color_channels = [\"alpha\", \"red\", \"green\", \"blue\"]\n    @classmethod\n    def INPUT_TYPES(s):\n        input_dir = folder_paths.get_input_directory()\n        files = [f for f in os.listdir(input_dir) if os.path.isfile(os.path.join(input_dir, f))]\n        return {\"required\":\n                    {\"image\": (sorted(files), {\"image_upload\": True}),\n                     \"channel\": (s._color_channels, ), }\n                }\n\n    CATEGORY = \"mask\"\n\n    RETURN_TYPES = (\"MASK\",)\n    FUNCTION = \"load_image\"\n    def load_image(self, image, channel):\n        image_path = folder_paths.get_annotated_filepath(image)\n        i = node_helpers.pillow(Image.open, image_path)\n        i = node_helpers.pillow(ImageOps.exif_transpose, i)\n        if i.getbands() != (\"R\", \"G\", \"B\", \"A\"):\n            if i.mode == 'I':\n                i = i.point(lambda i: i * (1 / 255))\n            i = i.convert(\"RGBA\")\n        mask = None\n        c = channel[0].upper()\n        if c in i.getbands():\n            mask = np.array(i.getchannel(c)).astype(np.float32) / 255.0\n            mask = torch.from_numpy(mask)\n            if c == 'A':\n                mask = 1. - mask\n        else:\n            mask = torch.zeros((64,64), dtype=torch.float32, device=\"cpu\")\n        return (mask.unsqueeze(0),)\n\n    @classmethod\n    def IS_CHANGED(s, image, channel):\n        image_path = folder_paths.get_annotated_filepath(image)\n        m = hashlib.sha256()\n        with open(image_path, 'rb') as f:\n            m.update(f.read())\n        return m.digest().hex()\n\n    @classmethod\n    def VALIDATE_INPUTS(s, image):\n        if not folder_paths.exists_annotated_filepath(image):\n            return \"Invalid image file: {}\".format(image)\n\n        return True\n\nclass ImageScale:\n    upscale_methods = [\"nearest-exact\", \"bilinear\", \"area\", \"bicubic\", \"lanczos\"]\n    crop_methods = [\"disabled\", \"center\"]\n\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"image\": (\"IMAGE\",), \"upscale_method\": (s.upscale_methods,),\n                              \"width\": (\"INT\", {\"default\": 512, \"min\": 0, \"max\": MAX_RESOLUTION, \"step\": 1}),\n                              \"height\": (\"INT\", {\"default\": 512, \"min\": 0, \"max\": MAX_RESOLUTION, \"step\": 1}),\n                              \"crop\": (s.crop_methods,)}}\n    RETURN_TYPES = (\"IMAGE\",)\n    FUNCTION = \"upscale\"\n\n    CATEGORY = \"image/upscaling\"\n\n    def upscale(self, image, upscale_method, width, height, crop):\n        if width == 0 and height == 0:\n            s = image\n        else:\n            samples = image.movedim(-1,1)\n\n            if width == 0:\n                width = max(1, round(samples.shape[3] * height / samples.shape[2]))\n            elif height == 0:\n                height = max(1, round(samples.shape[2] * width / samples.shape[3]))\n\n            s = comfy.utils.common_upscale(samples, width, height, upscale_method, crop)\n            s = s.movedim(1,-1)\n        return (s,)\n\nclass ImageScaleBy:\n    upscale_methods = [\"nearest-exact\", \"bilinear\", \"area\", \"bicubic\", \"lanczos\"]\n\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"image\": (\"IMAGE\",), \"upscale_method\": (s.upscale_methods,),\n                              \"scale_by\": (\"FLOAT\", {\"default\": 1.0, \"min\": 0.01, \"max\": 8.0, \"step\": 0.01}),}}\n    RETURN_TYPES = (\"IMAGE\",)\n    FUNCTION = \"upscale\"\n\n    CATEGORY = \"image/upscaling\"\n\n    def upscale(self, image, upscale_method, scale_by):\n        samples = image.movedim(-1,1)\n        width = round(samples.shape[3] * scale_by)\n        height = round(samples.shape[2] * scale_by)\n        s = comfy.utils.common_upscale(samples, width, height, upscale_method, \"disabled\")\n        s = s.movedim(1,-1)\n        return (s,)\n\nclass ImageInvert:\n\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"image\": (\"IMAGE\",)}}\n\n    RETURN_TYPES = (\"IMAGE\",)\n    FUNCTION = \"invert\"\n\n    CATEGORY = \"image\"\n\n    def invert(self, image):\n        s = 1.0 - image\n        return (s,)\n\nclass ImageBatch:\n\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"image1\": (\"IMAGE\",), \"image2\": (\"IMAGE\",)}}\n\n    RETURN_TYPES = (\"IMAGE\",)\n    FUNCTION = \"batch\"\n\n    CATEGORY = \"image\"\n\n    def batch(self, image1, image2):\n        if image1.shape[1:] != image2.shape[1:]:\n            image2 = comfy.utils.common_upscale(image2.movedim(-1,1), image1.shape[2], image1.shape[1], \"bilinear\", \"center\").movedim(1,-1)\n        s = torch.cat((image1, image2), dim=0)\n        return (s,)\n\nclass EmptyImage:\n    def __init__(self, device=\"cpu\"):\n        self.device = device\n\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"width\": (\"INT\", {\"default\": 512, \"min\": 1, \"max\": MAX_RESOLUTION, \"step\": 1}),\n                              \"height\": (\"INT\", {\"default\": 512, \"min\": 1, \"max\": MAX_RESOLUTION, \"step\": 1}),\n                              \"batch_size\": (\"INT\", {\"default\": 1, \"min\": 1, \"max\": 4096}),\n                              \"color\": (\"INT\", {\"default\": 0, \"min\": 0, \"max\": 0xFFFFFF, \"step\": 1, \"display\": \"color\"}),\n                              }}\n    RETURN_TYPES = (\"IMAGE\",)\n    FUNCTION = \"generate\"\n\n    CATEGORY = \"image\"\n\n    def generate(self, width, height, batch_size=1, color=0):\n        r = torch.full([batch_size, height, width, 1], ((color >> 16) & 0xFF) / 0xFF)\n        g = torch.full([batch_size, height, width, 1], ((color >> 8) & 0xFF) / 0xFF)\n        b = torch.full([batch_size, height, width, 1], ((color) & 0xFF) / 0xFF)\n        return (torch.cat((r, g, b), dim=-1), )\n\nclass ImagePadForOutpaint:\n\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"image\": (\"IMAGE\",),\n                \"left\": (\"INT\", {\"default\": 0, \"min\": 0, \"max\": MAX_RESOLUTION, \"step\": 8}),\n                \"top\": (\"INT\", {\"default\": 0, \"min\": 0, \"max\": MAX_RESOLUTION, \"step\": 8}),\n                \"right\": (\"INT\", {\"default\": 0, \"min\": 0, \"max\": MAX_RESOLUTION, \"step\": 8}),\n                \"bottom\": (\"INT\", {\"default\": 0, \"min\": 0, \"max\": MAX_RESOLUTION, \"step\": 8}),\n                \"feathering\": (\"INT\", {\"default\": 40, \"min\": 0, \"max\": MAX_RESOLUTION, \"step\": 1}),\n            }\n        }\n\n    RETURN_TYPES = (\"IMAGE\", \"MASK\")\n    FUNCTION = \"expand_image\"\n\n    CATEGORY = \"image\"\n\n    def expand_image(self, image, left, top, right, bottom, feathering):\n        d1, d2, d3, d4 = image.size()\n\n        new_image = torch.ones(\n            (d1, d2 + top + bottom, d3 + left + right, d4),\n            dtype=torch.float32,\n        ) * 0.5\n\n        new_image[:, top:top + d2, left:left + d3, :] = image\n\n        mask = torch.ones(\n            (d2 + top + bottom, d3 + left + right),\n            dtype=torch.float32,\n        )\n\n        t = torch.zeros(\n            (d2, d3),\n            dtype=torch.float32\n        )\n\n        if feathering > 0 and feathering * 2 < d2 and feathering * 2 < d3:\n\n            for i in range(d2):\n                for j in range(d3):\n                    dt = i if top != 0 else d2\n                    db = d2 - i if bottom != 0 else d2\n\n                    dl = j if left != 0 else d3\n                    dr = d3 - j if right != 0 else d3\n\n                    d = min(dt, db, dl, dr)\n\n                    if d >= feathering:\n                        continue\n\n                    v = (feathering - d) / feathering\n\n                    t[i, j] = v * v\n\n        mask[top:top + d2, left:left + d3] = t\n\n        return (new_image, mask)\n\n\nNODE_CLASS_MAPPINGS = {\n    \"KSampler\": KSampler,\n    \"CheckpointLoaderSimple\": CheckpointLoaderSimple,\n    \"CLIPTextEncode\": CLIPTextEncode,\n    \"CLIPSetLastLayer\": CLIPSetLastLayer,\n    \"VAEDecode\": VAEDecode,\n    \"VAEEncode\": VAEEncode,\n    \"VAEEncodeForInpaint\": VAEEncodeForInpaint,\n    \"VAELoader\": VAELoader,\n    \"EmptyLatentImage\": EmptyLatentImage,\n    \"LatentUpscale\": LatentUpscale,\n    \"LatentUpscaleBy\": LatentUpscaleBy,\n    \"LatentFromBatch\": LatentFromBatch,\n    \"RepeatLatentBatch\": RepeatLatentBatch,\n    \"SaveImage\": SaveImage,\n    \"PreviewImage\": PreviewImage,\n    \"LoadImage\": LoadImage,\n    \"LoadImageMask\": LoadImageMask,\n    \"ImageScale\": ImageScale,\n    \"ImageScaleBy\": ImageScaleBy,\n    \"ImageInvert\": ImageInvert,\n    \"ImageBatch\": ImageBatch,\n    \"ImagePadForOutpaint\": ImagePadForOutpaint,\n    \"EmptyImage\": EmptyImage,\n    \"ConditioningAverage\": ConditioningAverage ,\n    \"ConditioningCombine\": ConditioningCombine,\n    \"ConditioningConcat\": ConditioningConcat,\n    \"ConditioningSetArea\": ConditioningSetArea,\n    \"ConditioningSetAreaPercentage\": ConditioningSetAreaPercentage,\n    \"ConditioningSetAreaStrength\": ConditioningSetAreaStrength,\n    \"ConditioningSetMask\": ConditioningSetMask,\n    \"KSamplerAdvanced\": KSamplerAdvanced,\n    \"SetLatentNoiseMask\": SetLatentNoiseMask,\n    \"LatentComposite\": LatentComposite,\n    \"LatentBlend\": LatentBlend,\n    \"LatentRotate\": LatentRotate,\n    \"LatentFlip\": LatentFlip,\n    \"LatentCrop\": LatentCrop,\n    \"LoraLoader\": LoraLoader,\n    \"CLIPLoader\": CLIPLoader,\n    \"UNETLoader\": UNETLoader,\n    \"DualCLIPLoader\": DualCLIPLoader,\n    \"CLIPVisionEncode\": CLIPVisionEncode,\n    \"StyleModelApply\": StyleModelApply,\n    \"unCLIPConditioning\": unCLIPConditioning,\n    \"ControlNetApply\": ControlNetApply,\n    \"ControlNetApplyAdvanced\": ControlNetApplyAdvanced,\n    \"ControlNetLoader\": ControlNetLoader,\n    \"DiffControlNetLoader\": DiffControlNetLoader,\n    \"StyleModelLoader\": StyleModelLoader,\n    \"CLIPVisionLoader\": CLIPVisionLoader,\n    \"VAEDecodeTiled\": VAEDecodeTiled,\n    \"VAEEncodeTiled\": VAEEncodeTiled,\n    \"unCLIPCheckpointLoader\": unCLIPCheckpointLoader,\n    \"GLIGENLoader\": GLIGENLoader,\n    \"GLIGENTextBoxApply\": GLIGENTextBoxApply,\n    \"InpaintModelConditioning\": InpaintModelConditioning,\n\n    \"CheckpointLoader\": CheckpointLoader,\n    \"DiffusersLoader\": DiffusersLoader,\n\n    \"LoadLatent\": LoadLatent,\n    \"SaveLatent\": SaveLatent,\n\n    \"ConditioningZeroOut\": ConditioningZeroOut,\n    \"ConditioningSetTimestepRange\": ConditioningSetTimestepRange,\n    \"LoraLoaderModelOnly\": LoraLoaderModelOnly,\n}\n\nNODE_DISPLAY_NAME_MAPPINGS = {\n    # Sampling\n    \"KSampler\": \"KSampler\",\n    \"KSamplerAdvanced\": \"KSampler (Advanced)\",\n    # Loaders\n    \"CheckpointLoader\": \"Load Checkpoint With Config (DEPRECATED)\",\n    \"CheckpointLoaderSimple\": \"Load Checkpoint\",\n    \"VAELoader\": \"Load VAE\",\n    \"LoraLoader\": \"Load LoRA\",\n    \"CLIPLoader\": \"Load CLIP\",\n    \"ControlNetLoader\": \"Load ControlNet Model\",\n    \"DiffControlNetLoader\": \"Load ControlNet Model (diff)\",\n    \"StyleModelLoader\": \"Load Style Model\",\n    \"CLIPVisionLoader\": \"Load CLIP Vision\",\n    \"UpscaleModelLoader\": \"Load Upscale Model\",\n    \"UNETLoader\": \"Load Diffusion Model\",\n    # Conditioning\n    \"CLIPVisionEncode\": \"CLIP Vision Encode\",\n    \"StyleModelApply\": \"Apply Style Model\",\n    \"CLIPTextEncode\": \"CLIP Text Encode (Prompt)\",\n    \"CLIPSetLastLayer\": \"CLIP Set Last Layer\",\n    \"ConditioningCombine\": \"Conditioning (Combine)\",\n    \"ConditioningAverage \": \"Conditioning (Average)\",\n    \"ConditioningConcat\": \"Conditioning (Concat)\",\n    \"ConditioningSetArea\": \"Conditioning (Set Area)\",\n    \"ConditioningSetAreaPercentage\": \"Conditioning (Set Area with Percentage)\",\n    \"ConditioningSetMask\": \"Conditioning (Set Mask)\",\n    \"ControlNetApply\": \"Apply ControlNet (OLD)\",\n    \"ControlNetApplyAdvanced\": \"Apply ControlNet\",\n    # Latent\n    \"VAEEncodeForInpaint\": \"VAE Encode (for Inpainting)\",\n    \"SetLatentNoiseMask\": \"Set Latent Noise Mask\",\n    \"VAEDecode\": \"VAE Decode\",\n    \"VAEEncode\": \"VAE Encode\",\n    \"LatentRotate\": \"Rotate Latent\",\n    \"LatentFlip\": \"Flip Latent\",\n    \"LatentCrop\": \"Crop Latent\",\n    \"EmptyLatentImage\": \"Empty Latent Image\",\n    \"LatentUpscale\": \"Upscale Latent\",\n    \"LatentUpscaleBy\": \"Upscale Latent By\",\n    \"LatentComposite\": \"Latent Composite\",\n    \"LatentBlend\": \"Latent Blend\",\n    \"LatentFromBatch\" : \"Latent From Batch\",\n    \"RepeatLatentBatch\": \"Repeat Latent Batch\",\n    # Image\n    \"SaveImage\": \"Save Image\",\n    \"PreviewImage\": \"Preview Image\",\n    \"LoadImage\": \"Load Image\",\n    \"LoadImageMask\": \"Load Image (as Mask)\",\n    \"ImageScale\": \"Upscale Image\",\n    \"ImageScaleBy\": \"Upscale Image By\",\n    \"ImageUpscaleWithModel\": \"Upscale Image (using Model)\",\n    \"ImageInvert\": \"Invert Image\",\n    \"ImagePadForOutpaint\": \"Pad Image for Outpainting\",\n    \"ImageBatch\": \"Batch Images\",\n    \"ImageCrop\": \"Image Crop\",\n    \"ImageBlend\": \"Image Blend\",\n    \"ImageBlur\": \"Image Blur\",\n    \"ImageQuantize\": \"Image Quantize\",\n    \"ImageSharpen\": \"Image Sharpen\",\n    \"ImageScaleToTotalPixels\": \"Scale Image to Total Pixels\",\n    # _for_testing\n    \"VAEDecodeTiled\": \"VAE Decode (Tiled)\",\n    \"VAEEncodeTiled\": \"VAE Encode (Tiled)\",\n}\n\nEXTENSION_WEB_DIRS = {}\n\n# Dictionary of successfully loaded module names and associated directories.\nLOADED_MODULE_DIRS = {}\n\n\ndef get_module_name(module_path: str) -> str:\n    \"\"\"\n    Returns the module name based on the given module path.\n    Examples:\n        get_module_name(\"C:/Users/username/ComfyUI/custom_nodes/my_custom_node.py\") -> \"my_custom_node\"\n        get_module_name(\"C:/Users/username/ComfyUI/custom_nodes/my_custom_node\") -> \"my_custom_node\"\n        get_module_name(\"C:/Users/username/ComfyUI/custom_nodes/my_custom_node/\") -> \"my_custom_node\"\n        get_module_name(\"C:/Users/username/ComfyUI/custom_nodes/my_custom_node/__init__.py\") -> \"my_custom_node\"\n        get_module_name(\"C:/Users/username/ComfyUI/custom_nodes/my_custom_node/__init__\") -> \"my_custom_node\"\n        get_module_name(\"C:/Users/username/ComfyUI/custom_nodes/my_custom_node/__init__/\") -> \"my_custom_node\"\n        get_module_name(\"C:/Users/username/ComfyUI/custom_nodes/my_custom_node.disabled\") -> \"custom_nodes\n    Args:\n        module_path (str): The path of the module.\n    Returns:\n        str: The module name.\n    \"\"\"\n    base_path = os.path.basename(module_path)\n    if os.path.isfile(module_path):\n        base_path = os.path.splitext(base_path)[0]\n    return base_path\n\n\ndef load_custom_node(module_path: str, ignore=set(), module_parent=\"custom_nodes\") -> bool:\n    module_name = os.path.basename(module_path)\n    if os.path.isfile(module_path):\n        sp = os.path.splitext(module_path)\n        module_name = sp[0]\n    try:\n        logging.debug(\"Trying to load custom node {}\".format(module_path))\n        if os.path.isfile(module_path):\n            module_spec = importlib.util.spec_from_file_location(module_name, module_path)\n            module_dir = os.path.split(module_path)[0]\n        else:\n            module_spec = importlib.util.spec_from_file_location(module_name, os.path.join(module_path, \"__init__.py\"))\n            module_dir = module_path\n\n        module = importlib.util.module_from_spec(module_spec)\n        sys.modules[module_name] = module\n        module_spec.loader.exec_module(module)\n\n        LOADED_MODULE_DIRS[module_name] = os.path.abspath(module_dir)\n\n        if hasattr(module, \"WEB_DIRECTORY\") and getattr(module, \"WEB_DIRECTORY\") is not None:\n            web_dir = os.path.abspath(os.path.join(module_dir, getattr(module, \"WEB_DIRECTORY\")))\n            if os.path.isdir(web_dir):\n                EXTENSION_WEB_DIRS[module_name] = web_dir\n\n        if hasattr(module, \"NODE_CLASS_MAPPINGS\") and getattr(module, \"NODE_CLASS_MAPPINGS\") is not None:\n            for name, node_cls in module.NODE_CLASS_MAPPINGS.items():\n                if name not in ignore:\n                    NODE_CLASS_MAPPINGS[name] = node_cls\n                    node_cls.RELATIVE_PYTHON_MODULE = \"{}.{}\".format(module_parent, get_module_name(module_path))\n            if hasattr(module, \"NODE_DISPLAY_NAME_MAPPINGS\") and getattr(module, \"NODE_DISPLAY_NAME_MAPPINGS\") is not None:\n                NODE_DISPLAY_NAME_MAPPINGS.update(module.NODE_DISPLAY_NAME_MAPPINGS)\n            return True\n        else:\n            logging.warning(f\"Skip {module_path} module for custom nodes due to the lack of NODE_CLASS_MAPPINGS.\")\n            return False\n    except Exception as e:\n        logging.warning(traceback.format_exc())\n        logging.warning(f\"Cannot import {module_path} module for custom nodes: {e}\")\n        return False\n\ndef init_external_custom_nodes():\n    \"\"\"\n    Initializes the external custom nodes.\n\n    This function loads custom nodes from the specified folder paths and imports them into the application.\n    It measures the import times for each custom node and logs the results.\n\n    Returns:\n        None\n    \"\"\"\n    base_node_names = set(NODE_CLASS_MAPPINGS.keys())\n    node_paths = folder_paths.get_folder_paths(\"custom_nodes\")\n    node_import_times = []\n    for custom_node_path in node_paths:\n        possible_modules = os.listdir(os.path.realpath(custom_node_path))\n        if \"__pycache__\" in possible_modules:\n            possible_modules.remove(\"__pycache__\")\n\n        for possible_module in possible_modules:\n            module_path = os.path.join(custom_node_path, possible_module)\n            if os.path.isfile(module_path) and os.path.splitext(module_path)[1] != \".py\": continue\n            if module_path.endswith(\".disabled\"): continue\n            time_before = time.perf_counter()\n            success = load_custom_node(module_path, base_node_names, module_parent=\"custom_nodes\")\n            node_import_times.append((time.perf_counter() - time_before, module_path, success))\n\n    if len(node_import_times) > 0:\n        logging.info(\"\\nImport times for custom nodes:\")\n        for n in sorted(node_import_times):\n            if n[2]:\n                import_message = \"\"\n            else:\n                import_message = \" (IMPORT FAILED)\"\n            logging.info(\"{:6.1f} seconds{}: {}\".format(n[0], import_message, n[1]))\n        logging.info(\"\")\n\ndef init_builtin_extra_nodes():\n    \"\"\"\n    Initializes the built-in extra nodes in ComfyUI.\n\n    This function loads the extra node files located in the \"comfy_extras\" directory and imports them into ComfyUI.\n    If any of the extra node files fail to import, a warning message is logged.\n\n    Returns:\n        None\n    \"\"\"\n    extras_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)), \"comfy_extras\")\n    extras_files = [\n        \"nodes_latent.py\",\n        \"nodes_hypernetwork.py\",\n        \"nodes_upscale_model.py\",\n        \"nodes_post_processing.py\",\n        \"nodes_mask.py\",\n        \"nodes_compositing.py\",\n        \"nodes_rebatch.py\",\n        \"nodes_model_merging.py\",\n        \"nodes_tomesd.py\",\n        \"nodes_clip_sdxl.py\",\n        \"nodes_canny.py\",\n        \"nodes_freelunch.py\",\n        \"nodes_custom_sampler.py\",\n        \"nodes_hypertile.py\",\n        \"nodes_model_advanced.py\",\n        \"nodes_model_downscale.py\",\n        \"nodes_images.py\",\n        \"nodes_video_model.py\",\n        \"nodes_sag.py\",\n        \"nodes_perpneg.py\",\n        \"nodes_stable3d.py\",\n        \"nodes_sdupscale.py\",\n        \"nodes_photomaker.py\",\n        \"nodes_pixart.py\",\n        \"nodes_cond.py\",\n        \"nodes_morphology.py\",\n        \"nodes_stable_cascade.py\",\n        \"nodes_differential_diffusion.py\",\n        \"nodes_ip2p.py\",\n        \"nodes_model_merging_model_specific.py\",\n        \"nodes_pag.py\",\n        \"nodes_align_your_steps.py\",\n        \"nodes_attention_multiply.py\",\n        \"nodes_advanced_samplers.py\",\n        \"nodes_webcam.py\",\n        \"nodes_audio.py\",\n        \"nodes_sd3.py\",\n        \"nodes_gits.py\",\n        \"nodes_controlnet.py\",\n        \"nodes_hunyuan.py\",\n        \"nodes_flux.py\",\n        \"nodes_lora_extract.py\",\n        \"nodes_torch_compile.py\",\n        \"nodes_mochi.py\",\n        \"nodes_slg.py\",\n        \"nodes_mahiro.py\",\n        \"nodes_lt.py\",\n        \"nodes_hooks.py\",\n        \"nodes_load_3d.py\",\n        \"nodes_cosmos.py\",\n    ]\n\n    import_failed = []\n    for node_file in extras_files:\n        if not load_custom_node(os.path.join(extras_dir, node_file), module_parent=\"comfy_extras\"):\n            import_failed.append(node_file)\n\n    return import_failed\n\n\ndef init_extra_nodes(init_custom_nodes=True):\n    import_failed = init_builtin_extra_nodes()\n\n    if init_custom_nodes:\n        init_external_custom_nodes()\n    else:\n        logging.info(\"Skipping loading of custom nodes\")\n\n    if len(import_failed) > 0:\n        logging.warning(\"WARNING: some comfy_extras/ nodes did not import correctly. This may be because they are missing some dependencies.\\n\")\n        for node in import_failed:\n            logging.warning(\"IMPORT FAILED: {}\".format(node))\n        logging.warning(\"\\nThis issue might be caused by new missing dependencies added the last time you updated ComfyUI.\")\n        if args.windows_standalone_build:\n            logging.warning(\"Please run the update script: update/update_comfyui.bat\")\n        else:\n            logging.warning(\"Please do a: pip install -r requirements.txt\")\n        logging.warning(\"\")\n\n    return import_failed\n"
        },
        {
          "name": "notebooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "output",
          "type": "tree",
          "content": null
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.22,
          "content": "[pytest]\nmarkers = \n  inference: mark as inference test (deselect with '-m \"not inference\"')\n  execution: mark as execution test (deselect with '-m \"not execution\"')\ntestpaths =\n  tests\n  tests-unit\naddopts = -s\npythonpath = .\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.22,
          "content": "torch\ntorchsde\ntorchvision\ntorchaudio\neinops\ntransformers>=4.28.1\ntokenizers>=0.13.3\nsentencepiece\nsafetensors>=0.4.2\naiohttp\npyyaml\nPillow\nscipy\ntqdm\npsutil\n\n#non essential dependencies:\nkornia>=0.7.1\nspandrel\nsoundfile\n"
        },
        {
          "name": "ruff.toml",
          "type": "blob",
          "size": 0.4,
          "content": "# Disable all rules by default\nlint.ignore = [\"ALL\"]\n\n# Enable specific rules\nlint.select = [\n    \"S307\",  # suspicious-eval-usage\n    \"S102\", # exec\n    \"T\",  # print-usage\n    \"W\",\n    # The \"F\" series in Ruff stands for \"Pyflakes\" rules, which catch various Python syntax errors and undefined names.\n    # See all rules here: https://docs.astral.sh/ruff/rules/#pyflakes-f\n    \"F\",\n]\n\nexclude = [\"*.ipynb\"]\n"
        },
        {
          "name": "script_examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "server.py",
          "type": "blob",
          "size": 35.24,
          "content": "import os\nimport sys\nimport asyncio\nimport traceback\n\nimport nodes\nimport folder_paths\nimport execution\nimport uuid\nimport urllib\nimport json\nimport glob\nimport struct\nimport ssl\nimport socket\nimport ipaddress\nfrom PIL import Image, ImageOps\nfrom PIL.PngImagePlugin import PngInfo\nfrom io import BytesIO\n\nimport aiohttp\nfrom aiohttp import web\nimport logging\n\nimport mimetypes\nfrom comfy.cli_args import args\nimport comfy.utils\nimport comfy.model_management\nimport node_helpers\nfrom app.frontend_management import FrontendManager\nfrom app.user_manager import UserManager\nfrom app.model_manager import ModelFileManager\nfrom app.custom_node_manager import CustomNodeManager\nfrom typing import Optional\nfrom api_server.routes.internal.internal_routes import InternalRoutes\n\nclass BinaryEventTypes:\n    PREVIEW_IMAGE = 1\n    UNENCODED_PREVIEW_IMAGE = 2\n\nasync def send_socket_catch_exception(function, message):\n    try:\n        await function(message)\n    except (aiohttp.ClientError, aiohttp.ClientPayloadError, ConnectionResetError, BrokenPipeError, ConnectionError) as err:\n        logging.warning(\"send error: {}\".format(err))\n\ndef get_comfyui_version():\n    comfyui_version = \"unknown\"\n    repo_path = os.path.dirname(os.path.realpath(__file__))\n    try:\n        import pygit2\n        repo = pygit2.Repository(repo_path)\n        comfyui_version = repo.describe(describe_strategy=pygit2.GIT_DESCRIBE_TAGS)\n    except Exception:\n        try:\n            import subprocess\n            comfyui_version = subprocess.check_output([\"git\", \"describe\", \"--tags\"], cwd=repo_path).decode('utf-8')\n        except Exception as e:\n            logging.warning(f\"Failed to get ComfyUI version: {e}\")\n    return comfyui_version.strip()\n\n@web.middleware\nasync def cache_control(request: web.Request, handler):\n    response: web.Response = await handler(request)\n    if request.path.endswith('.js') or request.path.endswith('.css'):\n        response.headers.setdefault('Cache-Control', 'no-cache')\n    return response\n\ndef create_cors_middleware(allowed_origin: str):\n    @web.middleware\n    async def cors_middleware(request: web.Request, handler):\n        if request.method == \"OPTIONS\":\n            # Pre-flight request. Reply successfully:\n            response = web.Response()\n        else:\n            response = await handler(request)\n\n        response.headers['Access-Control-Allow-Origin'] = allowed_origin\n        response.headers['Access-Control-Allow-Methods'] = 'POST, GET, DELETE, PUT, OPTIONS'\n        response.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization'\n        response.headers['Access-Control-Allow-Credentials'] = 'true'\n        return response\n\n    return cors_middleware\n\ndef is_loopback(host):\n    if host is None:\n        return False\n    try:\n        if ipaddress.ip_address(host).is_loopback:\n            return True\n        else:\n            return False\n    except:\n        pass\n\n    loopback = False\n    for family in (socket.AF_INET, socket.AF_INET6):\n        try:\n            r = socket.getaddrinfo(host, None, family, socket.SOCK_STREAM)\n            for family, _, _, _, sockaddr in r:\n                if not ipaddress.ip_address(sockaddr[0]).is_loopback:\n                    return loopback\n                else:\n                    loopback = True\n        except socket.gaierror:\n            pass\n\n    return loopback\n\n\ndef create_origin_only_middleware():\n    @web.middleware\n    async def origin_only_middleware(request: web.Request, handler):\n        #this code is used to prevent the case where a random website can queue comfy workflows by making a POST to 127.0.0.1 which browsers don't prevent for some dumb reason.\n        #in that case the Host and Origin hostnames won't match\n        #I know the proper fix would be to add a cookie but this should take care of the problem in the meantime\n        if 'Host' in request.headers and 'Origin' in request.headers:\n            host = request.headers['Host']\n            origin = request.headers['Origin']\n            host_domain = host.lower()\n            parsed = urllib.parse.urlparse(origin)\n            origin_domain = parsed.netloc.lower()\n            host_domain_parsed = urllib.parse.urlsplit('//' + host_domain)\n\n            #limit the check to when the host domain is localhost, this makes it slightly less safe but should still prevent the exploit\n            loopback = is_loopback(host_domain_parsed.hostname)\n\n            if parsed.port is None: #if origin doesn't have a port strip it from the host to handle weird browsers, same for host\n                host_domain = host_domain_parsed.hostname\n            if host_domain_parsed.port is None:\n                origin_domain = parsed.hostname\n\n            if loopback and host_domain is not None and origin_domain is not None and len(host_domain) > 0 and len(origin_domain) > 0:\n                if host_domain != origin_domain:\n                    logging.warning(\"WARNING: request with non matching host and origin {} != {}, returning 403\".format(host_domain, origin_domain))\n                    return web.Response(status=403)\n\n        if request.method == \"OPTIONS\":\n            response = web.Response()\n        else:\n            response = await handler(request)\n\n        return response\n\n    return origin_only_middleware\n\nclass PromptServer():\n    def __init__(self, loop):\n        PromptServer.instance = self\n\n        mimetypes.init()\n        mimetypes.types_map['.js'] = 'application/javascript; charset=utf-8'\n\n        self.user_manager = UserManager()\n        self.model_file_manager = ModelFileManager()\n        self.custom_node_manager = CustomNodeManager()\n        self.internal_routes = InternalRoutes(self)\n        self.supports = [\"custom_nodes_from_web\"]\n        self.prompt_queue = None\n        self.loop = loop\n        self.messages = asyncio.Queue()\n        self.client_session:Optional[aiohttp.ClientSession] = None\n        self.number = 0\n\n        middlewares = [cache_control]\n        if args.enable_cors_header:\n            middlewares.append(create_cors_middleware(args.enable_cors_header))\n        else:\n            middlewares.append(create_origin_only_middleware())\n\n        max_upload_size = round(args.max_upload_size * 1024 * 1024)\n        self.app = web.Application(client_max_size=max_upload_size, middlewares=middlewares)\n        self.sockets = dict()\n        self.web_root = (\n            FrontendManager.init_frontend(args.front_end_version)\n            if args.front_end_root is None\n            else args.front_end_root\n        )\n        logging.info(f\"[Prompt Server] web root: {self.web_root}\")\n        routes = web.RouteTableDef()\n        self.routes = routes\n        self.last_node_id = None\n        self.client_id = None\n\n        self.on_prompt_handlers = []\n\n        @routes.get('/ws')\n        async def websocket_handler(request):\n            ws = web.WebSocketResponse()\n            await ws.prepare(request)\n            sid = request.rel_url.query.get('clientId', '')\n            if sid:\n                # Reusing existing session, remove old\n                self.sockets.pop(sid, None)\n            else:\n                sid = uuid.uuid4().hex\n\n            self.sockets[sid] = ws\n\n            try:\n                # Send initial state to the new client\n                await self.send(\"status\", { \"status\": self.get_queue_info(), 'sid': sid }, sid)\n                # On reconnect if we are the currently executing client send the current node\n                if self.client_id == sid and self.last_node_id is not None:\n                    await self.send(\"executing\", { \"node\": self.last_node_id }, sid)\n\n                async for msg in ws:\n                    if msg.type == aiohttp.WSMsgType.ERROR:\n                        logging.warning('ws connection closed with exception %s' % ws.exception())\n            finally:\n                self.sockets.pop(sid, None)\n            return ws\n\n        @routes.get(\"/\")\n        async def get_root(request):\n            response = web.FileResponse(os.path.join(self.web_root, \"index.html\"))\n            response.headers['Cache-Control'] = 'no-cache'\n            response.headers[\"Pragma\"] = \"no-cache\"\n            response.headers[\"Expires\"] = \"0\"\n            return response\n\n        @routes.get(\"/embeddings\")\n        def get_embeddings(self):\n            embeddings = folder_paths.get_filename_list(\"embeddings\")\n            return web.json_response(list(map(lambda a: os.path.splitext(a)[0], embeddings)))\n\n        @routes.get(\"/models\")\n        def list_model_types(request):\n            model_types = list(folder_paths.folder_names_and_paths.keys())\n\n            return web.json_response(model_types)\n\n        @routes.get(\"/models/{folder}\")\n        async def get_models(request):\n            folder = request.match_info.get(\"folder\", None)\n            if not folder in folder_paths.folder_names_and_paths:\n                return web.Response(status=404)\n            files = folder_paths.get_filename_list(folder)\n            return web.json_response(files)\n\n        @routes.get(\"/extensions\")\n        async def get_extensions(request):\n            files = glob.glob(os.path.join(\n                glob.escape(self.web_root), 'extensions/**/*.js'), recursive=True)\n\n            extensions = list(map(lambda f: \"/\" + os.path.relpath(f, self.web_root).replace(\"\\\\\", \"/\"), files))\n\n            for name, dir in nodes.EXTENSION_WEB_DIRS.items():\n                files = glob.glob(os.path.join(glob.escape(dir), '**/*.js'), recursive=True)\n                extensions.extend(list(map(lambda f: \"/extensions/\" + urllib.parse.quote(\n                    name) + \"/\" + os.path.relpath(f, dir).replace(\"\\\\\", \"/\"), files)))\n\n            return web.json_response(extensions)\n\n        def get_dir_by_type(dir_type):\n            if dir_type is None:\n                dir_type = \"input\"\n\n            if dir_type == \"input\":\n                type_dir = folder_paths.get_input_directory()\n            elif dir_type == \"temp\":\n                type_dir = folder_paths.get_temp_directory()\n            elif dir_type == \"output\":\n                type_dir = folder_paths.get_output_directory()\n\n            return type_dir, dir_type\n\n        def compare_image_hash(filepath, image):\n            hasher = node_helpers.hasher()\n\n            # function to compare hashes of two images to see if it already exists, fix to #3465\n            if os.path.exists(filepath):\n                a = hasher()\n                b = hasher()\n                with open(filepath, \"rb\") as f:\n                    a.update(f.read())\n                    b.update(image.file.read())\n                    image.file.seek(0)\n                    f.close()\n                return a.hexdigest() == b.hexdigest()\n            return False\n\n        def image_upload(post, image_save_function=None):\n            image = post.get(\"image\")\n            overwrite = post.get(\"overwrite\")\n            image_is_duplicate = False\n\n            image_upload_type = post.get(\"type\")\n            upload_dir, image_upload_type = get_dir_by_type(image_upload_type)\n\n            if image and image.file:\n                filename = image.filename\n                if not filename:\n                    return web.Response(status=400)\n\n                subfolder = post.get(\"subfolder\", \"\")\n                full_output_folder = os.path.join(upload_dir, os.path.normpath(subfolder))\n                filepath = os.path.abspath(os.path.join(full_output_folder, filename))\n\n                if os.path.commonpath((upload_dir, filepath)) != upload_dir:\n                    return web.Response(status=400)\n\n                if not os.path.exists(full_output_folder):\n                    os.makedirs(full_output_folder)\n\n                split = os.path.splitext(filename)\n\n                if overwrite is not None and (overwrite == \"true\" or overwrite == \"1\"):\n                    pass\n                else:\n                    i = 1\n                    while os.path.exists(filepath):\n                        if compare_image_hash(filepath, image): #compare hash to prevent saving of duplicates with same name, fix for #3465\n                            image_is_duplicate = True\n                            break\n                        filename = f\"{split[0]} ({i}){split[1]}\"\n                        filepath = os.path.join(full_output_folder, filename)\n                        i += 1\n\n                if not image_is_duplicate:\n                    if image_save_function is not None:\n                        image_save_function(image, post, filepath)\n                    else:\n                        with open(filepath, \"wb\") as f:\n                            f.write(image.file.read())\n\n                return web.json_response({\"name\" : filename, \"subfolder\": subfolder, \"type\": image_upload_type})\n            else:\n                return web.Response(status=400)\n\n        @routes.post(\"/upload/image\")\n        async def upload_image(request):\n            post = await request.post()\n            return image_upload(post)\n\n\n        @routes.post(\"/upload/mask\")\n        async def upload_mask(request):\n            post = await request.post()\n\n            def image_save_function(image, post, filepath):\n                original_ref = json.loads(post.get(\"original_ref\"))\n                filename, output_dir = folder_paths.annotated_filepath(original_ref['filename'])\n\n                # validation for security: prevent accessing arbitrary path\n                if filename[0] == '/' or '..' in filename:\n                    return web.Response(status=400)\n\n                if output_dir is None:\n                    type = original_ref.get(\"type\", \"output\")\n                    output_dir = folder_paths.get_directory_by_type(type)\n\n                if output_dir is None:\n                    return web.Response(status=400)\n\n                if original_ref.get(\"subfolder\", \"\") != \"\":\n                    full_output_dir = os.path.join(output_dir, original_ref[\"subfolder\"])\n                    if os.path.commonpath((os.path.abspath(full_output_dir), output_dir)) != output_dir:\n                        return web.Response(status=403)\n                    output_dir = full_output_dir\n\n                file = os.path.join(output_dir, filename)\n\n                if os.path.isfile(file):\n                    with Image.open(file) as original_pil:\n                        metadata = PngInfo()\n                        if hasattr(original_pil,'text'):\n                            for key in original_pil.text:\n                                metadata.add_text(key, original_pil.text[key])\n                        original_pil = original_pil.convert('RGBA')\n                        mask_pil = Image.open(image.file).convert('RGBA')\n\n                        # alpha copy\n                        new_alpha = mask_pil.getchannel('A')\n                        original_pil.putalpha(new_alpha)\n                        original_pil.save(filepath, compress_level=4, pnginfo=metadata)\n\n            return image_upload(post, image_save_function)\n\n        @routes.get(\"/view\")\n        async def view_image(request):\n            if \"filename\" in request.rel_url.query:\n                filename = request.rel_url.query[\"filename\"]\n                filename,output_dir = folder_paths.annotated_filepath(filename)\n\n                # validation for security: prevent accessing arbitrary path\n                if filename[0] == '/' or '..' in filename:\n                    return web.Response(status=400)\n\n                if output_dir is None:\n                    type = request.rel_url.query.get(\"type\", \"output\")\n                    output_dir = folder_paths.get_directory_by_type(type)\n\n                if output_dir is None:\n                    return web.Response(status=400)\n\n                if \"subfolder\" in request.rel_url.query:\n                    full_output_dir = os.path.join(output_dir, request.rel_url.query[\"subfolder\"])\n                    if os.path.commonpath((os.path.abspath(full_output_dir), output_dir)) != output_dir:\n                        return web.Response(status=403)\n                    output_dir = full_output_dir\n\n                filename = os.path.basename(filename)\n                file = os.path.join(output_dir, filename)\n\n                if os.path.isfile(file):\n                    if 'preview' in request.rel_url.query:\n                        with Image.open(file) as img:\n                            preview_info = request.rel_url.query['preview'].split(';')\n                            image_format = preview_info[0]\n                            if image_format not in ['webp', 'jpeg'] or 'a' in request.rel_url.query.get('channel', ''):\n                                image_format = 'webp'\n\n                            quality = 90\n                            if preview_info[-1].isdigit():\n                                quality = int(preview_info[-1])\n\n                            buffer = BytesIO()\n                            if image_format in ['jpeg'] or request.rel_url.query.get('channel', '') == 'rgb':\n                                img = img.convert(\"RGB\")\n                            img.save(buffer, format=image_format, quality=quality)\n                            buffer.seek(0)\n\n                            return web.Response(body=buffer.read(), content_type=f'image/{image_format}',\n                                                headers={\"Content-Disposition\": f\"filename=\\\"{filename}\\\"\"})\n\n                    if 'channel' not in request.rel_url.query:\n                        channel = 'rgba'\n                    else:\n                        channel = request.rel_url.query[\"channel\"]\n\n                    if channel == 'rgb':\n                        with Image.open(file) as img:\n                            if img.mode == \"RGBA\":\n                                r, g, b, a = img.split()\n                                new_img = Image.merge('RGB', (r, g, b))\n                            else:\n                                new_img = img.convert(\"RGB\")\n\n                            buffer = BytesIO()\n                            new_img.save(buffer, format='PNG')\n                            buffer.seek(0)\n\n                            return web.Response(body=buffer.read(), content_type='image/png',\n                                                headers={\"Content-Disposition\": f\"filename=\\\"{filename}\\\"\"})\n\n                    elif channel == 'a':\n                        with Image.open(file) as img:\n                            if img.mode == \"RGBA\":\n                                _, _, _, a = img.split()\n                            else:\n                                a = Image.new('L', img.size, 255)\n\n                            # alpha img\n                            alpha_img = Image.new('RGBA', img.size)\n                            alpha_img.putalpha(a)\n                            alpha_buffer = BytesIO()\n                            alpha_img.save(alpha_buffer, format='PNG')\n                            alpha_buffer.seek(0)\n\n                            return web.Response(body=alpha_buffer.read(), content_type='image/png',\n                                                headers={\"Content-Disposition\": f\"filename=\\\"{filename}\\\"\"})\n                    else:\n                        # Get content type from mimetype, defaulting to 'application/octet-stream'\n                        content_type = mimetypes.guess_type(filename)[0] or 'application/octet-stream'\n\n                        # For security, force certain extensions to download instead of display\n                        file_extension = os.path.splitext(filename)[1].lower()\n                        if file_extension in {'.html', '.htm', '.js', '.css'}:\n                            content_type = 'application/octet-stream'  # Forces download\n\n                        return web.FileResponse(\n                            file,\n                            headers={\n                                \"Content-Disposition\": f\"filename=\\\"{filename}\\\"\",\n                                \"Content-Type\": content_type\n                            }\n                        )\n\n            return web.Response(status=404)\n\n        @routes.get(\"/view_metadata/{folder_name}\")\n        async def view_metadata(request):\n            folder_name = request.match_info.get(\"folder_name\", None)\n            if folder_name is None:\n                return web.Response(status=404)\n            if not \"filename\" in request.rel_url.query:\n                return web.Response(status=404)\n\n            filename = request.rel_url.query[\"filename\"]\n            if not filename.endswith(\".safetensors\"):\n                return web.Response(status=404)\n\n            safetensors_path = folder_paths.get_full_path(folder_name, filename)\n            if safetensors_path is None:\n                return web.Response(status=404)\n            out = comfy.utils.safetensors_header(safetensors_path, max_size=1024*1024)\n            if out is None:\n                return web.Response(status=404)\n            dt = json.loads(out)\n            if not \"__metadata__\" in dt:\n                return web.Response(status=404)\n            return web.json_response(dt[\"__metadata__\"])\n\n        @routes.get(\"/system_stats\")\n        async def system_stats(request):\n            device = comfy.model_management.get_torch_device()\n            device_name = comfy.model_management.get_torch_device_name(device)\n            cpu_device = comfy.model_management.torch.device(\"cpu\")\n            ram_total = comfy.model_management.get_total_memory(cpu_device)\n            ram_free = comfy.model_management.get_free_memory(cpu_device)\n            vram_total, torch_vram_total = comfy.model_management.get_total_memory(device, torch_total_too=True)\n            vram_free, torch_vram_free = comfy.model_management.get_free_memory(device, torch_free_too=True)\n\n            system_stats = {\n                \"system\": {\n                    \"os\": os.name,\n                    \"ram_total\": ram_total,\n                    \"ram_free\": ram_free,\n                    \"comfyui_version\": get_comfyui_version(),\n                    \"python_version\": sys.version,\n                    \"pytorch_version\": comfy.model_management.torch_version,\n                    \"embedded_python\": os.path.split(os.path.split(sys.executable)[0])[1] == \"python_embeded\",\n                    \"argv\": sys.argv\n                },\n                \"devices\": [\n                    {\n                        \"name\": device_name,\n                        \"type\": device.type,\n                        \"index\": device.index,\n                        \"vram_total\": vram_total,\n                        \"vram_free\": vram_free,\n                        \"torch_vram_total\": torch_vram_total,\n                        \"torch_vram_free\": torch_vram_free,\n                    }\n                ]\n            }\n            return web.json_response(system_stats)\n\n        @routes.get(\"/prompt\")\n        async def get_prompt(request):\n            return web.json_response(self.get_queue_info())\n\n        def node_info(node_class):\n            obj_class = nodes.NODE_CLASS_MAPPINGS[node_class]\n            info = {}\n            info['input'] = obj_class.INPUT_TYPES()\n            info['input_order'] = {key: list(value.keys()) for (key, value) in obj_class.INPUT_TYPES().items()}\n            info['output'] = obj_class.RETURN_TYPES\n            info['output_is_list'] = obj_class.OUTPUT_IS_LIST if hasattr(obj_class, 'OUTPUT_IS_LIST') else [False] * len(obj_class.RETURN_TYPES)\n            info['output_name'] = obj_class.RETURN_NAMES if hasattr(obj_class, 'RETURN_NAMES') else info['output']\n            info['name'] = node_class\n            info['display_name'] = nodes.NODE_DISPLAY_NAME_MAPPINGS[node_class] if node_class in nodes.NODE_DISPLAY_NAME_MAPPINGS.keys() else node_class\n            info['description'] = obj_class.DESCRIPTION if hasattr(obj_class,'DESCRIPTION') else ''\n            info['python_module'] = getattr(obj_class, \"RELATIVE_PYTHON_MODULE\", \"nodes\")\n            info['category'] = 'sd'\n            if hasattr(obj_class, 'OUTPUT_NODE') and obj_class.OUTPUT_NODE == True:\n                info['output_node'] = True\n            else:\n                info['output_node'] = False\n\n            if hasattr(obj_class, 'CATEGORY'):\n                info['category'] = obj_class.CATEGORY\n\n            if hasattr(obj_class, 'OUTPUT_TOOLTIPS'):\n                info['output_tooltips'] = obj_class.OUTPUT_TOOLTIPS\n\n            if getattr(obj_class, \"DEPRECATED\", False):\n                info['deprecated'] = True\n            if getattr(obj_class, \"EXPERIMENTAL\", False):\n                info['experimental'] = True\n            return info\n\n        @routes.get(\"/object_info\")\n        async def get_object_info(request):\n            with folder_paths.cache_helper:\n                out = {}\n                for x in nodes.NODE_CLASS_MAPPINGS:\n                    try:\n                        out[x] = node_info(x)\n                    except Exception:\n                        logging.error(f\"[ERROR] An error occurred while retrieving information for the '{x}' node.\")\n                        logging.error(traceback.format_exc())\n                return web.json_response(out)\n\n        @routes.get(\"/object_info/{node_class}\")\n        async def get_object_info_node(request):\n            node_class = request.match_info.get(\"node_class\", None)\n            out = {}\n            if (node_class is not None) and (node_class in nodes.NODE_CLASS_MAPPINGS):\n                out[node_class] = node_info(node_class)\n            return web.json_response(out)\n\n        @routes.get(\"/history\")\n        async def get_history(request):\n            max_items = request.rel_url.query.get(\"max_items\", None)\n            if max_items is not None:\n                max_items = int(max_items)\n            return web.json_response(self.prompt_queue.get_history(max_items=max_items))\n\n        @routes.get(\"/history/{prompt_id}\")\n        async def get_history_prompt_id(request):\n            prompt_id = request.match_info.get(\"prompt_id\", None)\n            return web.json_response(self.prompt_queue.get_history(prompt_id=prompt_id))\n\n        @routes.get(\"/queue\")\n        async def get_queue(request):\n            queue_info = {}\n            current_queue = self.prompt_queue.get_current_queue()\n            queue_info['queue_running'] = current_queue[0]\n            queue_info['queue_pending'] = current_queue[1]\n            return web.json_response(queue_info)\n\n        @routes.post(\"/prompt\")\n        async def post_prompt(request):\n            logging.info(\"got prompt\")\n            json_data =  await request.json()\n            json_data = self.trigger_on_prompt(json_data)\n\n            if \"number\" in json_data:\n                number = float(json_data['number'])\n            else:\n                number = self.number\n                if \"front\" in json_data:\n                    if json_data['front']:\n                        number = -number\n\n                self.number += 1\n\n            if \"prompt\" in json_data:\n                prompt = json_data[\"prompt\"]\n                valid = execution.validate_prompt(prompt)\n                extra_data = {}\n                if \"extra_data\" in json_data:\n                    extra_data = json_data[\"extra_data\"]\n\n                if \"client_id\" in json_data:\n                    extra_data[\"client_id\"] = json_data[\"client_id\"]\n                if valid[0]:\n                    prompt_id = str(uuid.uuid4())\n                    outputs_to_execute = valid[2]\n                    self.prompt_queue.put((number, prompt_id, prompt, extra_data, outputs_to_execute))\n                    response = {\"prompt_id\": prompt_id, \"number\": number, \"node_errors\": valid[3]}\n                    return web.json_response(response)\n                else:\n                    logging.warning(\"invalid prompt: {}\".format(valid[1]))\n                    return web.json_response({\"error\": valid[1], \"node_errors\": valid[3]}, status=400)\n            else:\n                return web.json_response({\"error\": \"no prompt\", \"node_errors\": []}, status=400)\n\n        @routes.post(\"/queue\")\n        async def post_queue(request):\n            json_data =  await request.json()\n            if \"clear\" in json_data:\n                if json_data[\"clear\"]:\n                    self.prompt_queue.wipe_queue()\n            if \"delete\" in json_data:\n                to_delete = json_data['delete']\n                for id_to_delete in to_delete:\n                    delete_func = lambda a: a[1] == id_to_delete\n                    self.prompt_queue.delete_queue_item(delete_func)\n\n            return web.Response(status=200)\n\n        @routes.post(\"/interrupt\")\n        async def post_interrupt(request):\n            nodes.interrupt_processing()\n            return web.Response(status=200)\n\n        @routes.post(\"/free\")\n        async def post_free(request):\n            json_data = await request.json()\n            unload_models = json_data.get(\"unload_models\", False)\n            free_memory = json_data.get(\"free_memory\", False)\n            if unload_models:\n                self.prompt_queue.set_flag(\"unload_models\", unload_models)\n            if free_memory:\n                self.prompt_queue.set_flag(\"free_memory\", free_memory)\n            return web.Response(status=200)\n\n        @routes.post(\"/history\")\n        async def post_history(request):\n            json_data =  await request.json()\n            if \"clear\" in json_data:\n                if json_data[\"clear\"]:\n                    self.prompt_queue.wipe_history()\n            if \"delete\" in json_data:\n                to_delete = json_data['delete']\n                for id_to_delete in to_delete:\n                    self.prompt_queue.delete_history_item(id_to_delete)\n\n            return web.Response(status=200)\n\n    async def setup(self):\n        timeout = aiohttp.ClientTimeout(total=None) # no timeout\n        self.client_session = aiohttp.ClientSession(timeout=timeout)\n\n    def add_routes(self):\n        self.user_manager.add_routes(self.routes)\n        self.model_file_manager.add_routes(self.routes)\n        self.custom_node_manager.add_routes(self.routes, self.app, nodes.LOADED_MODULE_DIRS.items())\n        self.app.add_subapp('/internal', self.internal_routes.get_app())\n\n        # Prefix every route with /api for easier matching for delegation.\n        # This is very useful for frontend dev server, which need to forward\n        # everything except serving of static files.\n        # Currently both the old endpoints without prefix and new endpoints with\n        # prefix are supported.\n        api_routes = web.RouteTableDef()\n        for route in self.routes:\n            # Custom nodes might add extra static routes. Only process non-static\n            # routes to add /api prefix.\n            if isinstance(route, web.RouteDef):\n                api_routes.route(route.method, \"/api\" + route.path)(route.handler, **route.kwargs)\n        self.app.add_routes(api_routes)\n        self.app.add_routes(self.routes)\n\n        # Add routes from web extensions.\n        for name, dir in nodes.EXTENSION_WEB_DIRS.items():\n            self.app.add_routes([web.static('/extensions/' + name, dir)])\n\n        self.app.add_routes([\n            web.static('/', self.web_root),\n        ])\n\n    def get_queue_info(self):\n        prompt_info = {}\n        exec_info = {}\n        exec_info['queue_remaining'] = self.prompt_queue.get_tasks_remaining()\n        prompt_info['exec_info'] = exec_info\n        return prompt_info\n\n    async def send(self, event, data, sid=None):\n        if event == BinaryEventTypes.UNENCODED_PREVIEW_IMAGE:\n            await self.send_image(data, sid=sid)\n        elif isinstance(data, (bytes, bytearray)):\n            await self.send_bytes(event, data, sid)\n        else:\n            await self.send_json(event, data, sid)\n\n    def encode_bytes(self, event, data):\n        if not isinstance(event, int):\n            raise RuntimeError(f\"Binary event types must be integers, got {event}\")\n\n        packed = struct.pack(\">I\", event)\n        message = bytearray(packed)\n        message.extend(data)\n        return message\n\n    async def send_image(self, image_data, sid=None):\n        image_type = image_data[0]\n        image = image_data[1]\n        max_size = image_data[2]\n        if max_size is not None:\n            if hasattr(Image, 'Resampling'):\n                resampling = Image.Resampling.BILINEAR\n            else:\n                resampling = Image.ANTIALIAS\n\n            image = ImageOps.contain(image, (max_size, max_size), resampling)\n        type_num = 1\n        if image_type == \"JPEG\":\n            type_num = 1\n        elif image_type == \"PNG\":\n            type_num = 2\n\n        bytesIO = BytesIO()\n        header = struct.pack(\">I\", type_num)\n        bytesIO.write(header)\n        image.save(bytesIO, format=image_type, quality=95, compress_level=1)\n        preview_bytes = bytesIO.getvalue()\n        await self.send_bytes(BinaryEventTypes.PREVIEW_IMAGE, preview_bytes, sid=sid)\n\n    async def send_bytes(self, event, data, sid=None):\n        message = self.encode_bytes(event, data)\n\n        if sid is None:\n            sockets = list(self.sockets.values())\n            for ws in sockets:\n                await send_socket_catch_exception(ws.send_bytes, message)\n        elif sid in self.sockets:\n            await send_socket_catch_exception(self.sockets[sid].send_bytes, message)\n\n    async def send_json(self, event, data, sid=None):\n        message = {\"type\": event, \"data\": data}\n\n        if sid is None:\n            sockets = list(self.sockets.values())\n            for ws in sockets:\n                await send_socket_catch_exception(ws.send_json, message)\n        elif sid in self.sockets:\n            await send_socket_catch_exception(self.sockets[sid].send_json, message)\n\n    def send_sync(self, event, data, sid=None):\n        self.loop.call_soon_threadsafe(\n            self.messages.put_nowait, (event, data, sid))\n\n    def queue_updated(self):\n        self.send_sync(\"status\", { \"status\": self.get_queue_info() })\n\n    async def publish_loop(self):\n        while True:\n            msg = await self.messages.get()\n            await self.send(*msg)\n\n    async def start(self, address, port, verbose=True, call_on_start=None):\n        await self.start_multi_address([(address, port)], call_on_start=call_on_start)\n\n    async def start_multi_address(self, addresses, call_on_start=None, verbose=True):\n        runner = web.AppRunner(self.app, access_log=None)\n        await runner.setup()\n        ssl_ctx = None\n        scheme = \"http\"\n        if args.tls_keyfile and args.tls_certfile:\n                ssl_ctx = ssl.SSLContext(protocol=ssl.PROTOCOL_TLS_SERVER, verify_mode=ssl.CERT_NONE)\n                ssl_ctx.load_cert_chain(certfile=args.tls_certfile,\n                                keyfile=args.tls_keyfile)\n                scheme = \"https\"\n\n        if verbose:\n            logging.info(\"Starting server\\n\")\n        for addr in addresses:\n            address = addr[0]\n            port = addr[1]\n            site = web.TCPSite(runner, address, port, ssl_context=ssl_ctx)\n            await site.start()\n\n            if not hasattr(self, 'address'):\n                self.address = address #TODO: remove this\n                self.port = port\n\n            if ':' in address:\n                address_print = \"[{}]\".format(address)\n            else:\n                address_print = address\n\n            if verbose:\n                logging.info(\"To see the GUI go to: {}://{}:{}\".format(scheme, address_print, port))\n\n        if call_on_start is not None:\n            call_on_start(scheme, self.address, self.port)\n\n    def add_on_prompt_handler(self, handler):\n        self.on_prompt_handlers.append(handler)\n\n    def trigger_on_prompt(self, json_data):\n        for handler in self.on_prompt_handlers:\n            try:\n                json_data = handler(json_data)\n            except Exception:\n                logging.warning(\"[ERROR] An error occurred during the on_prompt_handler processing\")\n                logging.warning(traceback.format_exc())\n\n        return json_data\n"
        },
        {
          "name": "tests-unit",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}