{
  "metadata": {
    "timestamp": 1736557793470,
    "page": 975,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjEwMDA=",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "kataras/iris",
      "stars": 25318,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".deepsource.toml",
          "type": "blob",
          "size": 0.23,
          "content": "version = 1\n\ntest_patterns = [\"**/*_test.go\"]\n\nexclude_patterns = [\n    \"_examples/**\",\n    \"_benchmarks/**\",\n    \".github/**\"\n]\n\n[[analyzers]]\nname = \"go\"\nenabled = true\n\n  [analyzers.meta]\n  import_paths = [\"github.com/kataras/iris/v12\"]\n"
        },
        {
          "name": ".fossa.yml",
          "type": "blob",
          "size": 0.21,
          "content": "version: 3\ncli:\n  server: https://app.fossa.com\n  fetcher: git\n  package: github.com/kataras/iris\n  project: github.com/kataras/iris\nanalyze:\n  modules:\n    - name: iris\n      type: go\n      target: .\n      path: ."
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.45,
          "content": "*.go linguist-language=Go\n_examples/* linguist-documentation\n_benchmarks/* linguist-documentation\ngo.sum linguist-generated\n# Set the default behavior, in case people don't have core.autocrlf set.\n# if from windows: \n# git config --global core.autocrlf true\n# if from unix:\n# git config --global core.autocrlf input\n# https://help.github.com/articles/dealing-with-line-endings/#per-repository-settings\n* text=auto\n# ignore perms\n# git config core.filemode false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.17,
          "content": ".idea\n.vscode\n.directory\ncoverage.out\npackage-lock.json\naccess.log\nnode_modules\nissue-*/\ninternalcode-*/\n/_examples/feature-*/\n_examples/**/uploads/*\n_issues/**\n.DS_STORE\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.12,
          "content": "# This is the official list of Iris authors for copyright\r\n# purposes.\r\n\r\nGerasimos Maropoulos <kataras2006@hotmail.com>\r\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.23,
          "content": "# Contributor Covenant Code of Conduct\r\n\r\n## Our Pledge\r\n\r\nIn the interest of fostering an open and welcoming environment, we as\r\ncontributors and maintainers pledge to making participation in our project and\r\nour community a harassment-free experience for everyone, regardless of age, body\r\nsize, disability, ethnicity, gender identity and expression, level of experience,\r\nnationality, personal appearance, race, religion, or sexual identity and\r\norientation.\r\n\r\n## Our Standards\r\n\r\nExamples of behavior that contributes to creating a positive environment\r\ninclude:\r\n\r\n* Using welcoming and inclusive language\r\n* Being respectful of differing viewpoints and experiences\r\n* Gracefully accepting constructive criticism\r\n* Focusing on what is best for the community\r\n* Showing empathy towards other community members\r\n\r\nExamples of unacceptable behavior by participants include:\r\n\r\n* The use of sexualized language or imagery and unwelcome sexual attention or\r\nadvances\r\n* Trolling, insulting/derogatory comments, and personal or political attacks\r\n* Public or private harassment\r\n* Publishing others' private information, such as a physical or electronic\r\n  address, without explicit permission\r\n* Other conduct which could reasonably be considered inappropriate in a\r\n  professional setting\r\n\r\n## Our Responsibilities\r\n\r\nProject maintainers are responsible for clarifying the standards of acceptable\r\nbehavior and are expected to take appropriate and fair corrective action in\r\nresponse to any instances of unacceptable behavior.\r\n\r\nProject maintainers have the right and responsibility to remove, edit, or\r\nreject comments, commits, code, wiki edits, issues, and other contributions\r\nthat are not aligned to this Code of Conduct, or to ban temporarily or\r\npermanently any contributor for other behaviors that they deem inappropriate,\r\nthreatening, offensive, or harmful.\r\n\r\n## Scope\r\n\r\nThis Code of Conduct applies both within project spaces and in public spaces\r\nwhen an individual is representing the project or its community. Examples of\r\nrepresenting a project or community include using an official project e-mail\r\naddress, posting via an official social media account, or acting as an appointed\r\nrepresentative at an online or offline event. Representation of a project may be\r\nfurther defined and clarified by project maintainers.\r\n\r\n## Enforcement\r\n\r\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\r\nreported by contacting the project team at kataras2006@hotmail.com. All\r\ncomplaints will be reviewed and investigated and will result in a response that\r\nis deemed necessary and appropriate to the circumstances. The project team is\r\nobligated to maintain confidentiality with regard to the reporter of an incident.\r\nFurther details of specific enforcement policies may be posted separately.\r\n\r\nProject maintainers who do not follow or enforce the Code of Conduct in good\r\nfaith may face temporary or permanent repercussions as determined by other\r\nmembers of the project's leadership.\r\n\r\n## Attribution\r\n\r\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\r\navailable at [http://contributor-covenant.org/version/1/4][version]\r\n\r\n[homepage]: http://contributor-covenant.org\r\n[version]: http://contributor-covenant.org/version/1/4/"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.51,
          "content": "# Contributing\r\n\r\nFirst of all read our [Code of Conduct](https://github.com/kataras/iris/blob/main/CODE_OF_CONDUCT.md).\r\n\r\n## PR\r\n\r\n1. Open a new [issue](https://github.com/kataras/iris/issues/new)\r\n    * Write version of your local Iris.\r\n    * Write version of your local Go programming language.\r\n    * Describe your problem, what did you expect to see and what you see instead.\r\n        * If it's a feature request, describe your idea as better as you can\r\n          * optionally, navigate to the [chat](https://chat.iris-go.com) to push other members to participate and share their thoughts about your brilliant idea.\r\n2. Fork the [repository](https://github.com/kataras/iris).\r\n3. Make your changes.\r\n4. Compare & Push the PR from [here](https://github.com/kataras/iris/compare).\r\n\r\n## Translate\r\n\r\nWe need your help with translations into your native language.\r\n\r\nIris needs your help, please think about contributing to the translation of the [README](README.md) and https://iris-go.com, you will be rewarded.\r\n\r\nInstructions can be found at: https://github.com/kataras/iris/issues/796\r\n\r\n## Share\r\n\r\n### Writing\r\n\r\nWrite an article about Iris in https://medium.com, https://dev.to or if you're being a hackathon at https://hackernoon.com and send us the link on iris-go@outlook.com.\r\n\r\n### Social networks\r\n\r\nIf you're part of any social network, do a post(or tweet if twitter) about Iris and what you love about it, many examples can be found, the most recent one is [that](https://twitter.com/DorMoshe/status/1154486477247508480).\r\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 2.36,
          "content": "# FAQ\n\n## [![iris](https://img.shields.io/badge/iris-powered-2196f3.svg?style=for-the-badge)](https://github.com/kataras/iris)\n\nAdd a `badge` to your open-source projects powered by [Iris](https://iris-go.com) by pasting the below code snippet to the project repo's README.md:\n\n```md\n[![iris](https://img.shields.io/badge/iris-powered-2196f3.svg?style=for-the-badge)](https://github.com/kataras/iris)\n```\n\n## Editors & IDEs Extensions\n\n### Visual Studio Code <a href=\"https://marketplace.visualstudio.com/items?itemName=kataras2006.iris\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2d/Visual_Studio_Code_1.18_icon.svg/2000px-Visual_Studio_Code_1.18_icon.svg.png\" height=\"20px\" width=\"20px\" /></a>\n\n<https://marketplace.visualstudio.com/items?itemName=kataras2006.iris>\n\n> Please feel free to list your own Iris extension(s) here by [PR](https://github.com/kataras/iris/pulls)\n\n## How to upgrade\n\n```sh\ngo get github.com/kataras/iris/v12@latest\n```\n\nGo version 1.20 and above is required.\n\n## Learning\n\nMore than 280 practical examples, tutorials and articles at:\n\n- https://www.iris-go.com/docs\n- https://www.iris-go.com/#ebookDonateForm\n<!-- - https://github.com/kataras/iris/wiki/Starter-kits -->\n- https://github.com/kataras/iris/tree/main/_examples\n- https://pkg.go.dev/github.com/kataras/iris/v12@main\n\n## Active development mode\n\nIris may have reached version 12, but we're not stopping there. We have many feature ideas on our board that we're anxious to add and other innovative web development solutions that we're planning to build into Iris.\n\n## Can I find a job if I learn how to use Iris?\n\nYes, not only because you will learn Golang in the same time, but there are some positions\nopen for Iris-specific developers the time we speak.\n\nGo to our facebook page, like it and receive notifications about new job offers, we already have couple of them stay at the top of the page: https://www.facebook.com/iris.framework\n\n## Do we have a Community chat?\n\nYes, https://chat.iris-go.com\n\n## How is the development of Iris economically supported?\n\nBy people like you, who help us by donating small or large amounts of money.\n\nHelp this project deliver awesome and unique features with the highest possible code quality by donating any amount via [PayPal or Stripe](https://iris-go.com/donate). Your name will be published [here](https://www.iris-go.com/#review) after your approval via e-mail.\n"
        },
        {
          "name": "HISTORY.md",
          "type": "blob",
          "size": 80.78,
          "content": "# Changelog\r\n\r\n### Looking for free and real-time support?\r\n\r\n    https://github.com/kataras/iris/issues\r\n    https://chat.iris-go.com\r\n\r\n### Looking for previous versions?\r\n\r\n    https://github.com/kataras/iris/releases\r\n\r\n### Want to be hired?\r\n\r\n    https://facebook.com/iris.framework\r\n\r\n### Should I upgrade my Iris?\r\n\r\nDevelopers are not forced to upgrade if they don't really need it. Upgrade whenever you feel ready.\r\n\r\n**How to upgrade**: Open your command-line and execute this command: `go get github.com/kataras/iris/v12@latest` and `go mod tidy -compat=1.21`.\r\n\r\n# Next\r\n\r\nChanges apply to `main` branch.\r\n\r\n# Thu, 25 April 2024 | v12.2.11\r\n\r\nDear Iris Community,\r\n\r\nYou might have noticed a recent lull in activity on the Iris repository. I want to assure you that this silence is not without reason. For the past **3-4 months**, I've been diligently working on the next major release of Iris.\r\n\r\nThis upcoming version is poised to be a significant leap forward, fully embracing the **Generics** feature introduced in Go. We're not just stopping at Generics, though. Expect a suite of **new features**, **enhancements**, and **optimizations** that will elevate your development experience to new heights.\r\n\r\nMy journey with Go spans over **8 years**, and with each year, my expertise and understanding of the language deepen. This accumulated knowledge is being poured into Iris, ensuring that the framework not only evolves with the language but also with the community's growing needs.\r\n\r\nStay tuned for more updates, and thank you for your continued support and patience. The wait will be worth it.\r\n\r\nWarm regards,<br/>\r\nGerasimos (Makis) Maropoulos\r\n\r\n### This is the last release for the version 12 family.\r\n\r\n- Security improvements and dependencies upgrade.\r\n\r\n- New `Application/Party.MiddlewareExists(handlerNameOrHandler)` method added, example:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\r\n\t\"github.com/kataras/iris/v12\"\r\n\t\"github.com/kataras/iris/v12/x/errors\"\r\n)\r\n\r\nfunc main() {\r\n\tapp := iris.New()\r\n\r\n\tapp.UseRouter(errors.RecoveryHandler)\r\n\r\n\tif app.MiddlewareExists(errors.RecoveryHandler) { // <- HERE.\r\n\t\tfmt.Println(\"errors.RecoveryHandler exists\")\r\n\t}\r\n\t// OR:\r\n\t// if app.MiddlewareExists(\"iris.errors.recover\") {\r\n\t// \tfmt.Println(\"Iris.Errors.Recovery exists\")\r\n\t// }\r\n\r\n\tapp.Get(\"/\", indexHandler)\r\n\r\n\tapp.Listen(\":8080\")\r\n}\r\n\r\nfunc indexHandler(ctx iris.Context) {\r\n\tpanic(\"an error here\")\r\n\tctx.HTML(\"<h1>Index</h1>\")\r\n}\r\n\r\n```\r\n- New `x/errors.Intercept(func(ctx iris.Context, req *CreateRequest, resp *CreateResponse) error{ ... })` package-level function.\r\n\r\n```go\r\nfunc main() {\r\n    app := iris.New()\r\n\r\n    // Create a new service and pass it to the handlers.\r\n    service := new(myService)\r\n\r\n    app.Post(\"/\", errors.Intercept(responseHandler), errors.CreateHandler(service.Create))\r\n\r\n    // [...]\r\n}\r\n\r\nfunc responseHandler(ctx iris.Context, req *CreateRequest, resp *CreateResponse) error {\r\n    fmt.Printf(\"intercept: request got: %+v\\nresponse sent: %#+v\\n\", req, resp)\r\n    return nil\r\n}\r\n```\r\n\r\n- Rename `x/errors/ContextValidator.ValidateContext(iris.Context) error` to `x/errors/RequestHandler.HandleRequest(iris.Context) error`.\r\n\r\n# Thu, 18 Jan 2024 | v12.2.10\r\n\r\n- Simplify the `/core/host` subpackage and remove its `DeferFlow` and `RestoreFlow` methods. These methods are replaced with: `Supervisor.Configure(host.NonBlocking())` before `Serve` and ` Supervisor.Wait(context.Context) error` after `Serve`.\r\n- Fix internal `trimHandlerName` and other minor stuff.\r\n- New `iris.NonBlocking()` configuration option to run the server without blocking the main routine, `Application.Wait(context.Context) error` method can be used to block and wait for the server to be up and running. Example:\r\n\r\n```go\r\nfunc main() {\r\n    app := iris.New()\r\n    app.Get(\"/\", func(ctx iris.Context) {\r\n        ctx.Writef(\"Hello, %s!\", \"World\")\r\n    })\r\n\r\n    app.Listen(\":8080\", iris.NonBlocking(), iris.WithoutServerError(iris.ErrServerClosed))\r\n\r\n    ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)\r\n    defer cancel()\r\n\r\n    if err := app.Wait(ctx); err != nil {\r\n        log.Fatal(err)\r\n    }\r\n\r\n    // [Server is up and running now, you may continue with other functions below].\r\n}\r\n```\r\n\r\n- Add `x/mathx.RoundToInteger` math helper function.\r\n\r\n# Wed, 10 Jan 2024 | v12.2.9\r\n\r\n- Add `x/errors.RecoveryHandler` package-level function.\r\n- Add `x/errors.Validation` package-level function to add one or more validations for the request payload before a service call of the below methods.\r\n- Add `x/errors.Handler`, `CreateHandler`, `NoContentHandler`, `NoContentOrNotModifiedHandler` and `ListHandler` ready-to-use handlers for service method calls to Iris Handler.\r\n- Add `x/errors.List` package-level function to support `ListObjects(ctx context.Context, opts pagination.ListOptions, f Filter) ([]Object, int64, error)` type of service calls.\r\n- Simplify how validation errors on `/x/errors` package works. A new `x/errors/validation` sub-package added to make your life easier (using the powerful Generics feature).\r\n- Add `x/errors.OK`, `Create`, `NoContent` and `NoContentOrNotModified` package-level generic functions as custom service method caller helpers. Example can be found [here](_examples/routing/http-wire-errors/service/main.go).\r\n- Add `x/errors.ReadPayload`, `ReadQuery`, `ReadPaginationOptions`, `Handle`, `HandleCreate`, `HandleCreateResponse`, `HandleUpdate` and `HandleDelete` package-level functions as helpers for common actions.\r\n- Add `x/jsonx.GetSimpleDateRange(date, jsonx.WeekRange, time.Monday, time.Sunday)` which returns all dates between the given range and start/end weekday values for WeekRange.\r\n- Add `x/timex.GetMonthDays` and `x/timex.GetMonthEnd` functions.\r\n- Add `iris.CookieDomain` and `iris.CookieOverride` cookie options to handle [#2309](https://github.com/kataras/iris/issues/2309).\r\n- New `x/errors.ErrorCodeName.MapErrorFunc`, `MapErrors`, `Wrap` methods and `x/errors.HandleError` package-level function.\r\n\r\n# Sun, 05 Nov 2023 | v12.2.8\r\n\r\n- A new way to customize the handler's parameter among with the `hero` and `mvc` packages. New `iris.NewContextWrapper` and\r\n `iris.NewContextPool` methods were added to wrap a handler (`.Handler`, `.Handlers`, `.HandlerReturnError`, `HandlerReturnDuration`, `Filter` and `FallbackViewFunc` methods) and use a custom context instead of the iris.Context directly. Example at: https://github.com/kataras/iris/tree/main/_examples/routing/custom-context.\r\n\r\n- The `cache` sub-package has an update, 4 years after:\r\n\r\n    - Add support for custom storage on `cache` package, through the `Handler#Store` method.\r\n    - Add support for custom expiration duration on `cache` package, trough the `Handler#MaxAge` method.\r\n    - Improve the overral performance of the `cache` package.\r\n    - The `cache.Handler` input and output arguments remain as it is.\r\n    - The `cache.Cache` input argument changed from `time.Duration` to `func(iris.Context) time.Duration`.\r\n\r\n# Mon, 25 Sep 2023 | v12.2.7\r\n\r\nMinor bug fixes and support of multiple `block` and `define` directives in multiple layouts and templates in the `Blocks` view engine.\r\n\r\n# Mon, 21 Aug 2023 | v12.2.5\r\n\r\n- Add optional `Singleton() bool` method to controllers to mark them as singleton, will panic with a specific error if a controller expects dynamic dependencies. This behavior is idendical to the app-driven `app.EnsureStaticBindings()`.\r\n\r\n- Non-zero fields of a controller that are marked as ignored, with `ignore:\"true\"` field tag, they are not included in the dependencies at all now.\r\n\r\n- Re-add error log on context rich write (e.g. JSON) failures when the application is running under debug mode (with `app.Logger().SetLevel(\"debug\")`) and there is no a registered context error handler at place.\r\n\r\n- `master` branch finally renamed to `main`. Don't worry GitHub will still navigate any `master` request to `main` automatically. Examples, Documentation and other Pages are refactored too.\r\n\r\n# Sat, 12 Aug 2023 | v12.2.4\r\n\r\n- Add new `iris.WithDynamicHandler` option (`EnableDynamicHandler` setting) to work with `iris.Application.RefreshRouter` method. It allows to change the entire router while your server is up and running. Handles [issue #2167](https://github.com/kataras/iris/issues/2167). Example at [_examples/routing/route-state/main.go](_examples/routing/route-state/main.go).\r\n\r\n> We jumped v12.2.2 and v12.2.3.\r\n\r\n# Mon, 17 July 2023 | v12.2.1\r\n\r\n- Add `mvc.Application.EnableStructDependents()` method to handle [#2158](https://github.com/kataras/iris/issues/2158).\r\n\r\n- Fix [iris-premium#17](https://github.com/kataras/iris-premium/issues/17).\r\n\r\n- Replace [russross/blackfriday](github.com/russross/blackfriday/v2) with [gomarkdown](https://github.com/gomarkdown/markdown) as requested at [#2098](https://github.com/kataras/iris/issues/2098).\r\n\r\n- Add `mvc.IgnoreEmbedded` option to handle [#2103](https://github.com/kataras/iris/issues/2103). Example Code:\r\n\r\n```go\r\nfunc configure(m *mvc.Application) {\r\n\tm.Router.Use(cacheHandler)\r\n\tm.Handle(&exampleController{\r\n\t\ttimeFormat: \"Mon, Jan 02 2006 15:04:05\",\r\n\t}, mvc.IgnoreEmbedded /* BaseController.GetDoSomething will not be parsed at all */)\r\n}\r\n\r\ntype BaseController struct {\r\n\tCtx iris.Context\r\n}\r\n\r\nfunc (c *BaseController) GetDoSomething(i interface{}) error {\r\n\treturn nil\r\n}\r\n\r\ntype exampleController struct {\r\n\tBaseController\r\n\r\n\ttimeFormat string\r\n}\r\n\r\nfunc (c *exampleController) Get() string {\r\n\tnow := time.Now().Format(c.timeFormat)\r\n\treturn \"last time executed without cache: \" + now\r\n}\r\n```\r\n\r\n- Add `LoadKV` method on `Iris.Application.I18N` instance. It should be used when no locale files are available. It loads locales via pure Go Map (or database decoded values).\r\n\r\n- Remove [ace](https://github.com/eknkc/amber) template parser support, as it was discontinued by its author more than five years ago.\r\n\r\n# Sa, 11 March 2023 | v12.2.0\r\n\r\nThis release introduces new features and some breaking changes.\r\nThe codebase for Dependency Injection, Internationalization and localization and more have been simplified a lot (fewer LOCs and easier to read and follow up).\r\n\r\n## 24 Dec 2022\r\n\r\nAll new features have been tested in production and seem to work fine. Fixed all reported and reproducible bugs. The `v12.2.0-beta7` is the latest beta release of v12.2.0. Expect the final public and stable release of v12.2.0 shortly after February 2023.\r\n\r\n## Fixes and Improvements\r\n \r\n- Add `iris.TrimParamFilePart` to handle cases like [#2024](https://github.com/kataras/iris/issues/2024) and improve the [_examples/routing/dynamic-path/main.go](_examples/routing/dynamic-path/main.go#L356) example to include that case as well.\r\n\r\n- **Breaking-change**: HTML template functions `yield`, `part`, `partial`, `partial_r` and `render` now accept (and require for some cases) a second argument of the binding data context too. Convert: `{{ yield }}` to `{{ yield . }}`, `{{ render \"templates/mytemplate.html\" }}` to `{{ render \"templates/mytemplate.html\" . }}`, `{{ partial \"partials/mypartial.html\" }}` to `{{ partial \"partials/mypartial.html\" . }}` and so on.\r\n\r\n- Add new `URLParamSeparator` to the configuration. Defaults to \",\" but can be set to an empty string to disable splitting query values on `Context.URLParamSlice` method.\r\n\r\n- [PR #1992](https://github.com/kataras/iris/pull/1992): Added support for third party packages on [httptest](https://github.com/kataras/iris/tree/main/httptest). An example using 3rd-party module named [Ginkgo](github.com/onsi/ginkgo) can be found [here](https://github.com/kataras/iris/blob/main/_examples/testing/ginkgotest). \r\n\r\n- Add `Context.Render` method for compatibility.\r\n\r\n- Support of embedded [locale files](https://github.com/kataras/iris/blob/main/_examples/i18n/template-embedded/main.go) using standard `embed.FS` with the new `LoadFS` function.\r\n- Support of direct embedded view engines (`HTML, Blocks, Django, Handlebars, Pug, Jet` and `Ace`) with `embed.FS` or `fs.FS` (in addition to `string` and `http.FileSystem` types).\r\n- Add support for `embed.FS` and `fs.FS` on `app.HandleDir`.\r\n\r\n- Add `iris.Patches()` package-level function to customize Iris Request Context REST (and more to come) behavior.\r\n- Minor fixes.\r\n\r\n- Enable setting a custom \"go-redis\" client through `SetClient` go redis driver method or `Client` struct field on sessions/database/redis driver as requested at [chat](https://chat.iris-go.com).\r\n- Ignore `\"csrf.token\"` form data key when missing on `ctx.ReadForm` by default as requested at [#1941](https://github.com/kataras/iris/issues/1941).\r\n\r\n- Fix [CVE-2020-5398](https://github.com/advisories/GHSA-8wx2-9q48-vm9r).\r\n\r\n- New `{x:weekday}` path parameter type, example code:\r\n\r\n```go\r\n// 0 to 7 (leading zeros don't matter) or \"Sunday\" to \"Monday\" or \"sunday\" to \"monday\".\r\n// http://localhost:8080/schedule/monday or http://localhost:8080/schedule/Monday or\r\n// http://localhost:8080/schedule/1 or http://localhost:8080/schedule/0001.\r\napp.Get(\"/schedule/{day:weekday}\", func(ctx iris.Context) {\r\n    day, _ := ctx.Params().GetWeekday(\"day\")\r\n    ctx.Writef(\"Weekday requested was: %v\\n\", day)\r\n})\r\n```\r\n\r\n- Make the `Context.JSON` method customizable by modifying the `context.WriteJSON` package-level function.\r\n- Add new `iris.NewGuide` which helps you build a simple and nice JSON API with services as dependencies and better design pattern.\r\n- Make `Context.Domain()` customizable by letting developers to modify the `Context.GetDomain` package-level function.\r\n- Remove Request Context-based Transaction feature as its usage can be replaced with just the Iris Context (as of go1.7+) and better [project](_examples/project) structure.\r\n- Fix [#1882](https://github.com/kataras/iris/issues/1882)\r\n- Fix [#1877](https://github.com/kataras/iris/issues/1877)\r\n- Fix [#1876](https://github.com/kataras/iris/issues/1876)\r\n\r\n- New `date` dynamic path parameter type. E.g. `/blog/{param:date}` matches to `\"/blog/2022/04/21\"`.\r\n\r\n- Add `iris.AllowQuerySemicolons` and `iris.WithoutServerError(iris.ErrURLQuerySemicolon)` to handle golang.org/issue/25192 as reported at: https://github.com/kataras/iris/issues/1875. \r\n- Add new `Application.SetContextErrorHandler` to globally customize the default behavior (status code 500 without body) on `JSON`, `JSONP`, `Protobuf`, `MsgPack`, `XML`, `YAML` and `Markdown` method call write errors instead of catching the error on each handler.\r\n- Add new [x/pagination](x/pagination/pagination.go) sub-package which supports generics code (go 1.18+).\r\n- Add new [middleware/modrevision](middleware/modrevision) middleware (example at [_examples/project/api/router.go]_examples/project/api/router.go).\r\n- Add `iris.BuildRevision` and `iris.BuildTime` to embrace the new go's 1.18 debug build information.\r\n\r\n- ~Add `Context.SetJSONOptions` to customize on a higher level the JSON options on `Context.JSON` calls.~ update: remains as it's, per JSON call.\r\n- Add new [auth](auth) sub-package which helps on any user type auth using JWT (access & refresh tokens) and a cookie (optional).\r\n\r\n- Add `Party.EnsureStaticBindings` which, if called, the MVC binder panics if a struct's input binding depends on the HTTP request data instead of a static dependency. This is useful to make sure your API crafted through `Party.PartyConfigure` depends only on struct values you already defined at `Party.RegisterDependency` == will never use reflection at serve-time (maximum performance).\r\n\r\n- Add a new [x/sqlx](/x/sqlx/) sub-package ([example](_examples/database/sqlx/main.go)).\r\n\r\n- Add a new [x/reflex](/x/reflex) sub-package. \r\n\r\n- Add `Context.ReadMultipartRelated` as requested at: [issues/#1787](https://github.com/kataras/iris/issues/1787).\r\n\r\n- Add `Container.DependencyMatcher` and `Dependency.Match` to implement the feature requested at [issues/#1842](https://github.com/kataras/iris/issues/1842).\r\n\r\n- Register [CORS middleware](middleware/cors) to the Application by default when `iris.Default()` is used instead of `iris.New()`.\r\n\r\n- Add [x/jsonx: DayTime](/x/jsonx/day_time.go) for JSON marshal and unmarshal of \"15:04:05\" (hour, minute, second).\r\n\r\n- Fix a bug of `WithoutBodyConsumptionOnUnmarshal` configurator and a minor dependency injection issue caused by the previous alpha version between 20 and 26 February of 2022.\r\n\r\n- New basic [cors middleware](middleware/cors).\r\n- New `httptest.NewServer` helper.\r\n- New [x/errors](x/errors) sub-package, helps with HTTP Wire Errors. Example can be found [here](_examples/routing/http-wire-errors/main.go).\r\n\r\n- New [x/timex](x/timex) sub-package, helps working with weekdays.\r\n\r\n- Minor improvements to the [JSON Kitchen Time](x/jsonx/kitchen_time.go).\r\n- A session database can now implement the `EndRequest(ctx *context.Context, session *Session)` method which will be fired at the end of the request-response lifecycle. \r\n- Improvements on JSON and ReadJSON when `Iris.Configuration.EnableOptimizations` is true. The request's Context is used whenever is necessary.\r\n- New [monitor](_examples/monitor/monitor-middleware/main.go) middleware.\r\n\r\n- New `RegisterRequestHandler` package-level and client methods to the new `x/client` package. Control or log the request-response lifecycle.\r\n- New `RateLimit` and `Debug` HTTP Client options to the new `x/client` package.\r\n\r\n- Push a security fix reported by [Kirill Efimov](https://github.com/kirill89) for older go runtimes.\r\n\r\n- New `Configuration.Timeout` and `Configuration.TimeoutMessage` fields. Use it to set HTTP timeouts. Note that your http server's (`Application.ConfigureHost`) Read/Write timeouts should be a bit higher than the `Configuration.Timeout` in order to give some time to http timeout handler to kick in and be able to send the `Configuration.TimeoutMessage` properly.\r\n\r\n- New `apps.OnApplicationRegistered` method which listens on new Iris applications hosted under the same binary. Use it on your `init` functions to configure Iris applications by any spot in your project's files.\r\n\r\n- `Context.JSON` respects any object implements the `easyjson.Marshaler` interface and renders the result using the [easyjon](https://github.com/mailru/easyjson)'s writer. **Set** the `Configuration.EnableProtoJSON` and `Configuration.EnableEasyJSON` to true in order to enable this feature.\r\n\r\n- minor: `Context` structure implements the standard go Context interface now (includes: Deadline, Done, Err and Value methods). Handlers can now just pass the `ctx iris.Context` as a shortcut of `ctx.Request().Context()` when needed.\r\n\r\n- New [x/jsonx](x/jsonx) sub-package for JSON type helpers.\r\n\r\n- New [x/mathx](x/mathx) sub-package for math related functions.\r\n\r\n- New [/x/client](x/client) HTTP Client sub-package.\r\n\r\n- New `email` builtin path parameter type. Example:\r\n\r\n```go\r\n// +------------------------+\r\n// | {param:email}           |\r\n// +------------------------+\r\n// Email + mx look up path parameter validation. Use it on production.\r\n\r\n// http://localhost:8080/user/kataras2006@hotmail.com -> OK\r\n// http://localhost:8080/user/b-c@invalid_domain      -> NOT FOUND\r\napp.Get(\"/user/{user_email:email}\", func(ctx iris.Context) {\r\n    email := ctx.Params().Get(\"user_email\")\r\n    ctx.WriteString(email)\r\n})\r\n\r\n// +------------------------+\r\n// | {param:mail}           |\r\n// +------------------------+\r\n// Simple email path parameter validation.\r\n\r\n// http://localhost:8080/user/kataras2006@hotmail.com    -> OK\r\n// http://localhost:8080/user/b-c@invalid_domainxxx1.com -> NOT FOUND\r\napp.Get(\"/user/{local_email:mail}\", func(ctx iris.Context) {\r\n    email := ctx.Params().Get(\"local_email\")\r\n    ctx.WriteString(email)\r\n})\r\n```\r\n\r\n- New `iris.IsErrEmptyJSON(err) bool` which reports whether the given \"err\" is caused by a\r\n`Context.ReadJSON` call when the request body didn't start with { (or it was totally empty). \r\n\r\nExample Code:\r\n\r\n```go\r\nfunc handler(ctx iris.Context) {\r\n    var opts SearchOptions\r\n    if err := ctx.ReadJSON(&opts); err != nil && !iris.IsErrEmptyJSON(err) {\r\n        ctx.StopWithJSON(iris.StatusBadRequest, iris.Map{\"message\": \"unable to parse body\"})\r\n        return\r\n    }\r\n\r\n    // [...continue with default values of \"opts\" struct if the client didn't provide some]\r\n}\r\n```\r\n\r\nThat means that the client can optionally set a JSON body.\r\n\t\r\n- New `APIContainer.EnableStrictMode(bool)` to disable automatic payload binding and panic on missing dependencies for exported struct'sfields or function's input parameters on MVC controller or hero function or PartyConfigurator.\r\n\r\n- New `Party.PartyConfigure(relativePath string, partyReg ...PartyConfigurator) Party` helper, registers a children Party like `Party` and `PartyFunc` but instead it accepts a structure value which may contain one or more of the dependencies registered by `RegisterDependency` or `ConfigureContainer().RegisterDependency` methods and fills the unset/zero exported struct's fields respectfully (useful when the api's dependencies amount are too much to pass on a function).\r\n\r\n- **New feature:** add the ability to set custom error handlers on path type parameters errors (existing or custom ones). Example Code:\r\n\r\n```go\r\napp.Macros().Get(\"uuid\").HandleError(func(ctx iris.Context, paramIndex int, err error) {\r\n    ctx.StatusCode(iris.StatusBadRequest)\r\n\r\n    param := ctx.Params().GetEntryAt(paramIndex)\r\n    ctx.JSON(iris.Map{\r\n        \"error\":     err.Error(),\r\n        \"message\":   \"invalid path parameter\",\r\n        \"parameter\": param.Key,\r\n        \"value\":     param.ValueRaw,\r\n    })\r\n})\r\n\r\napp.Get(\"/users/{id:uuid}\", getUser)\r\n```\r\n\r\n- Improve the performance and fix `:int, :int8, :int16, :int32, :int64, :uint, :uint8, :uint16, :uint32, :uint64` path type parameters couldn't accept a positive number written with the plus symbol or with a leading zeroes, e.g. `+42` and `021`.\r\n\r\n- The `iris.WithEmptyFormError` option is respected on `context.ReadQuery` method too, as requested at [#1727](https://github.com/kataras/iris/issues/1727). [Example comments](https://github.com/kataras/iris/blob/main/_examples/request-body/read-query/main.go) were updated.\r\n\r\n- New `httptest.Strict` option setter to enable the `httpexpect.RequireReporter` instead of the default `httpexpect.AssetReporter. Use that to enable complete test failure on the first error. As requested at: [#1722](https://github.com/kataras/iris/issues/1722).\r\n\r\n- New `uuid` builtin path parameter type. Example:\r\n\r\n```go\r\n// +------------------------+\r\n// | {param:uuid}           |\r\n// +------------------------+\r\n// UUIDv4 (and v1) path parameter validation.\r\n\r\n// http://localhost:8080/user/bb4f33e4-dc08-40d8-9f2b-e8b2bb615c0e -> OK\r\n// http://localhost:8080/user/dsadsa-invalid-uuid                  -> NOT FOUND\r\napp.Get(\"/user/{id:uuid}\", func(ctx iris.Context) {\r\n    id := ctx.Params().Get(\"id\")\r\n    ctx.WriteString(id)\r\n})\r\n```\r\n\r\n- New `Configuration.KeepAlive` and `iris.WithKeepAlive(time.Duration) Configurator` added as helpers to start the server using a tcp listener featured with keep-alive.\r\n\r\n- New `DirOptions.ShowHidden bool` is added by [@tuhao1020](https://github.com/tuhao1020) at [PR #1717](https://github.com/kataras/iris/pull/1717) to show or hide the hidden files when `ShowList` is set to true.\r\n\r\n- New `Context.ReadJSONStream` method and `JSONReader` options for `Context.ReadJSON` and `Context.ReadJSONStream`, see the [example](_examples/request-body/read-json-stream/main.go).\r\n\r\n- New `FallbackView` feature, per-party or per handler chain. Example can be found at: [_examples/view/fallback](_examples/view/fallback).\r\n\r\n```go\r\n    app.FallbackView(iris.FallbackViewFunc(func(ctx iris.Context, err iris.ErrViewNotExist) error {\r\n        // err.Name is the previous template name.\r\n        // err.IsLayout reports whether the failure came from the layout template.\r\n        // err.Data is the template data provided to the previous View call.\r\n        // [...custom logic e.g. ctx.View(\"fallback.html\", err.Data)]\r\n        return err\r\n    }))\r\n```\r\n\r\n- New `versioning.Aliases` middleware and up to 80% faster version resolve. Example Code:\r\n\r\n```go\r\napp := iris.New()\r\n\r\napi := app.Party(\"/api\")\r\napi.Use(Aliases(map[string]string{\r\n    versioning.Empty: \"1\", // when no version was provided by the client.\r\n    \"beta\": \"4.0.0\",\r\n    \"stage\": \"5.0.0-alpha\"\r\n}))\r\n\r\nv1 := NewGroup(api, \">=1.0.0 <2.0.0\")\r\nv1.Get/Post...\r\n\r\nv4 := NewGroup(api, \">=4.0.0 <5.0.0\")\r\nv4.Get/Post...\r\n\r\nstage := NewGroup(api, \"5.0.0-alpha\")\r\nstage.Get/Post...\r\n```\r\n\r\n- New [Basic Authentication](https://github.com/kataras/iris/tree/main/middleware/basicauth) middleware. Its `Default` function has not changed, however, the rest, e.g. `New` contains breaking changes as the new middleware features new functionalities.\r\n- Add `iris.DirOptions.SPA bool` field to allow [Single Page Applications](https://github.com/kataras/iris/tree/main/_examples/file-server/single-page-application/basic/main.go) under a file server.\r\n- A generic User interface, see the `Context.SetUser/User` methods in the New Context Methods section for more. In-short, the basicauth middleware's stored user can now be retrieved through `Context.User()` which provides more information than the native `ctx.Request().BasicAuth()` method one. Third-party authentication middleware creators can benefit of these two methods, plus the Logout below. \r\n- A `Context.Logout` method is added, can be used to invalidate [basicauth](https://github.com/kataras/iris/blob/main/_examples/auth/basicauth/basic/main.go) or [jwt](https://github.com/kataras/iris/blob/main/_examples/auth/jwt/blocklist/main.go) client credentials.\r\n- Add the ability to [share functions](https://github.com/kataras/iris/tree/main/_examples/routing/writing-a-middleware/share-funcs) between handlers chain and add an [example](https://github.com/kataras/iris/tree/main/_examples/routing/writing-a-middleware/share-services) on sharing Go structures (aka services).\r\n\r\n- Add the new `Party.UseOnce` method to the `*Route`\r\n- Add a new `*Route.RemoveHandler(...interface{}) int` and `Party.RemoveHandler(...interface{}) Party` methods, delete a handler based on its name or the handler pc function.\r\n\r\n```go\r\nfunc middleware(ctx iris.Context) {\r\n    // [...]\r\n}\r\n\r\nfunc main() {\r\n    app := iris.New()\r\n\r\n    // Register the middleware to all matched routes.\r\n    app.Use(middleware)\r\n\r\n    // Handlers = middleware, other\r\n    app.Get(\"/\", index)\r\n\r\n    // Handlers = other\r\n    app.Get(\"/other\", other).RemoveHandler(middleware)\r\n}\r\n```\r\n\r\n- Redis Driver is now based on the [go-redis](https://github.com/go-redis/redis/) module. Radix and redigo removed entirely. Sessions are now stored in hashes which fixes [issue #1610](https://github.com/kataras/iris/issues/1610). The only breaking change on default configuration is that the `redis.Config.Delim` option was removed. The redis sessions database driver is now defaults to the `&redis.GoRedisDriver{}`. End-developers can implement their own implementations too. The `Database#Close` is now automatically called on interrupt signals, no need to register it by yourself.\r\n\r\n- Add builtin support for **[i18n pluralization](https://github.com/kataras/iris/tree/main/_examples/i18n/plurals)**. Please check out the [following yaml locale example](https://github.com/kataras/iris/tree/main/_examples/i18n/plurals/locales/en-US/welcome.yml) to see an overview of the supported formats.\r\n- Fix [#1650](https://github.com/kataras/iris/issues/1650)\r\n- Fix [#1649](https://github.com/kataras/iris/issues/1649)\r\n- Fix [#1648](https://github.com/kataras/iris/issues/1648)\r\n- Fix [#1641](https://github.com/kataras/iris/issues/1641)\r\n\r\n- Add `Party.SetRoutesNoLog(disable bool) Party` to disable (the new) verbose logging of next routes.\r\n- Add `mvc.Application.SetControllersNoLog(disable bool) *mvc.Application` to disable (the new) verbose logging of next controllers. As requested at [#1630](https://github.com/kataras/iris/issues/1630).\r\n\r\n- Fix [#1621](https://github.com/kataras/iris/issues/1621) and add a new `cache.WithKey` to customize the cached entry key.\r\n\r\n- Add a `Response() *http.Response` to the Response Recorder.\r\n- Fix Response Recorder `Flush` when transfer-encoding is `chunked`.\r\n- Fix Response Recorder `Clone` concurrent access afterwards.\r\n\r\n- Add a `ParseTemplate` method on view engines to manually parse and add a template from a text as [requested](https://github.com/kataras/iris/issues/1617). [Examples](https://github.com/kataras/iris/tree/main/_examples/view/parse-template).\r\n- Full `http.FileSystem` interface support for all **view** engines as [requested](https://github.com/kataras/iris/issues/1575). The first argument of the functions(`HTML`, `Blocks`, `Pug`, `Ace`, `Jet`, `Django`, `Handlebars`) can now be either a directory of `string` type (like before) or a value which completes the `http.FileSystem` interface. The `.Binary` method of all view engines was removed: pass the go-bindata's latest version `AssetFile()` exported function as the first argument instead of string.\r\n\r\n- Add `Route.ExcludeSitemap() *Route` to exclude a route from sitemap as requested in [chat](https://chat.iris-go.com), also offline routes are excluded automatically now.\r\n\r\n- Improved tracing (with `app.Logger().SetLevel(\"debug\")`) for routes. Screens:\r\n\r\n#### DBUG Routes (1)\r\n\r\n![DBUG routes 1](https://iris-go.com/images/v12.2.0-dbug.png?v=0)\r\n\r\n#### DBUG Routes (2)\r\n\r\n![DBUG routes 2](https://iris-go.com/images/v12.2.0-dbug2.png?v=0)\r\n\r\n#### DBUG Routes (3)\r\n\r\n![DBUG routes with Controllers](https://iris-go.com/images/v12.2.0-dbug3.png?v=0)\r\n\r\n- Update the [pprof middleware](https://github.com/kataras/iris/tree/main/middleware/pprof).\r\n\r\n- New `Controller.HandleHTTPError(mvc.Code) <T>` optional Controller method to handle http errors as requested at: [MVC - More Elegent OnErrorCode registration?](https://github.com/kataras/iris/issues/1595). Example can be found [here](https://github.com/kataras/iris/tree/main/_examples/mvc/error-handler-http/main.go).\r\n\r\n![MVC: HTTP Error Handler Method](https://user-images.githubusercontent.com/22900943/90948989-e04cd300-e44c-11ea-8c97-54d90fb0cbb6.png)\r\n\r\n- New [Rewrite Engine Middleware](https://github.com/kataras/iris/tree/main/middleware/rewrite). Set up redirection rules for path patterns using the syntax we all know. [Example Code](https://github.com/kataras/iris/tree/main/_examples/routing/rewrite).\r\n\r\n```yml\r\nRedirectMatch: # REDIRECT_CODE_DIGITS | PATTERN_REGEX | TARGET_REPL\r\n  # Redirects /seo/* to /*\r\n  - 301 /seo/(.*) /$1\r\n\r\n  # Redirects /docs/v12* to /docs\r\n  - 301 /docs/v12(.*) /docs\r\n\r\n  # Redirects /old(.*) to /\r\n  - 301 /old(.*) /\r\n\r\n  # Redirects http or https://test.* to http or https://newtest.*\r\n  - 301 ^(http|https)://test.(.*) $1://newtest.$2\r\n\r\n  # Handles /*.json or .xml as *?format=json or xml,\r\n  # without redirect. See /users route.\r\n  # When Code is 0 then it does not redirect the request,\r\n  # instead it changes the request URL\r\n  # and leaves a route handle the request.\r\n  - 0 /(.*).(json|xml) /$1?format=$2\r\n\r\n# Redirects root domain to www.\r\n# Creation of a www subdomain inside the Application is unnecessary,\r\n# all requests are handled by the root Application itself.\r\nPrimarySubdomain: www\r\n```\r\n\r\n- New `TraceRoute bool` on [middleware/logger](https://github.com/kataras/iris/tree/main/middleware/logger) middleware. Displays information about the executed route. Also marks the handlers executed. Screenshot:\r\n\r\n![logger middleware: TraceRoute screenshot](https://iris-go.com/images/github/logger-trace-route.png)\r\n\r\n- Implement feature request [Log when I18n Translation Fails?](https://github.com/kataras/iris/issues/1593) by using the new `Application.I18n.DefaultMessageFunc` field **before** `I18n.Load`. [Example of usage](https://github.com/kataras/iris/blob/main/_examples/i18n/basic/main.go#L28-L50).\r\n\r\n- Fix [#1594](https://github.com/kataras/iris/issues/1594) and add a new `PathAfterHandler` which can be set to true to enable the old behavior (not recommended though).\r\n\r\n- New [apps](https://github.com/kataras/iris/tree/main/apps) subpackage. [Example of usage](https://github.com/kataras/iris/tree/main/_examples/routing/subdomains/redirect/multi-instances).\r\n\r\n![apps image example](https://user-images.githubusercontent.com/22900943/90459288-8a54f400-e109-11ea-8dea-20631975c9fc.png)\r\n\r\n- Fix `AutoTLS` when used with `iris.TLSNoRedirect` [*](https://github.com/kataras/iris/issues/1577). The `AutoTLS` runner can be customized through the new `iris.AutoTLSNoRedirect` instead, read its go documentation. Example of having both TLS and non-TLS versions of the same application without conflicts with letsencrypt `./well-known` path:\r\n\r\n![](https://iris-go.com/images/github/autotls-1.png)\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"net/http\"\r\n\t\"time\"\r\n\r\n\t\"github.com/kataras/iris/v12\"\r\n)\r\n\r\nfunc main() {\r\n\tapp := iris.New()\r\n\tapp.Logger().SetLevel(\"debug\")\r\n\r\n\tapp.Get(\"/\", func(ctx iris.Context) {\r\n\t\tctx.JSON(iris.Map{\r\n\t\t\t\"time\": time.Now().Unix(),\r\n\t\t\t\"tls\":  ctx.Request().TLS != nil,\r\n\t\t})\r\n\t})\r\n\r\n\tvar fallbackServer = func(acme func(http.Handler) http.Handler) *http.Server {\r\n\t\tsrv := &http.Server{Handler: acme(app)}\r\n\t\tgo srv.ListenAndServe()\r\n\t\treturn srv\r\n\t}\r\n\r\n\tapp.Run(iris.AutoTLS(\":443\", \"example.com\", \"mail@example.com\",\r\n\t\tiris.AutoTLSNoRedirect(fallbackServer)))\r\n}\r\n```\r\n\r\n- `iris.Minify` middleware to minify responses based on their media/content-type.\r\n\r\n- `Context.OnCloseErr` and `Context.OnConnectionCloseErr` - to call a function of `func() error`  instead of an `iris.Handler` when request is closed or manually canceled.\r\n\r\n- `Party.UseError(...Handler)` - to register handlers to run before any http errors (e.g. before `OnErrorCode/OnAnyErrorCode` or default error codes when no handler is responsible to handle a specific http status code).\r\n\r\n- `Party.UseRouter(...Handler) and Party.ResetRouterFilters()` - to register handlers before the main router, useful on handlers that should control whether the router itself should ran or not. Independently of the incoming request's method and path values. These handlers will be executed ALWAYS against ALL incoming matched requests. Example of use-case: CORS.\r\n\r\n- `*versioning.Group` type is a full `Party` now.\r\n\r\n- `Party.UseOnce` - either inserts a middleware, or on the basis of the middleware already existing, replace that existing middleware instead.\r\n\r\n- Ability to register a view engine per group of routes or for the current chain of handlers through `Party.RegisterView` and `Context.ViewEngine` respectfully.\r\n\r\n- Add [Blocks](_examples/view/template_blocks_0) template engine. <!-- Reminder for @kataras: follow https://github.com/flosch/pongo2/pull/236#issuecomment-668950566 discussion so we can get back on using the original pongo2 repository as they fixed the issue about an incompatible 3rd party package (although they need more fixes, that's why I commented there) -->\r\n\r\n- Add [Ace](_examples/view/template_ace_0) template parser to the view engine and other minor improvements.\r\n\r\n- Fix huge repo size of 55.7MB, which slows down the overall Iris installation experience. Now, go-get performs ~3 times faster. I 've managed it using the [bfg-repo-cleaner](https://github.com/rtyley/bfg-repo-cleaner) tool - an alternative to  git-filter-branch command. Watch the small gif below to learn how:\r\n\r\n[![](https://media.giphy.com/media/U8560aiWTurW4iAOLn/giphy.gif)](https://media.giphy.com/media/U8560aiWTurW4iAOLn/giphy.gif)\r\n\r\n- [gRPC](https://grpc.io/) features:\r\n    - New Router [Wrapper](middleware/grpc).\r\n    - New MVC `.Handle(ctrl, mvc.GRPC{...})` option which allows to register gRPC services per-party (without the requirement of a full wrapper) and optionally strict access to gRPC clients only, see the [example here](_examples/mvc/grpc-compatible).\r\n\r\n- Add `Configuration.RemoteAddrHeadersForce bool` to force `Context.RemoteAddr() string` to return the first entry of request headers as a fallback instead of the `Request.RemoteAddr` one, as requested at: [1567#issuecomment-663972620](https://github.com/kataras/iris/issues/1567#issuecomment-663972620).\r\n\r\n- Fix [#1569#issuecomment-663739177](https://github.com/kataras/iris/issues/1569#issuecomment-663739177).\r\n\r\n- Fix [#1564](https://github.com/kataras/iris/issues/1564).\r\n\r\n- Fix [#1553](https://github.com/kataras/iris/issues/1553).\r\n\r\n- New `DirOptions.Cache` to cache assets in-memory among with their compressed contents (in order to be ready to served if client ask). Learn more about this feature by reading [all #1556 comments](https://github.com/kataras/iris/issues/1556#issuecomment-661057446). Usage:\r\n\r\n```go\r\nvar dirOpts = DirOptions{\r\n    // [...other options]\r\n    Cache: DirCacheOptions{\r\n        Enable: true,\r\n        // Don't compress files smaller than 300 bytes.\r\n        CompressMinSize: 300,\r\n        // Ignore compress already compressed file types\r\n        // (some images and pdf).\r\n        CompressIgnore: iris.MatchImagesAssets,\r\n        // Gzip, deflate, br(brotli), snappy.\r\n        Encodings: []string{\"gzip\", \"deflate\", \"br\", \"snappy\"},\r\n        // Log to the stdout the total reduced file size.\r\n        Verbose: 1,\r\n    },\r\n}\r\n```\r\n\r\n- New `DirOptions.PushTargets` and `PushTargetsRegexp` to push index' assets to the client without additional requests. Inspirated by issue [#1562](https://github.com/kataras/iris/issues/1562). Example matching all `.js, .css and .ico` files (recursively):\r\n\r\n```go\r\nvar dirOpts = iris.DirOptions{\r\n    // [...other options]\r\n    IndexName: \"/index.html\",\r\n    PushTargetsRegexp: map[string]*regexp.Regexp{\r\n        \"/\": regexp.MustCompile(\"((.*).js|(.*).css|(.*).ico)$\"),\r\n        // OR:\r\n        // \"/\": iris.MatchCommonAssets,\r\n    },\r\n    Compress: true,\r\n}\r\n```\r\n\r\n- Update jet parser to v5.0.2, closes [#1551](https://github.com/kataras/iris/issues/1551). It contains two breaking changes by its author:\r\n    - Relative paths on `extends, import, include...` tmpl functions, e.g. `{{extends \"../layouts/application.jet\"}}` instead of `layouts/application.jet`\r\n    - the new [jet.Ranger](https://github.com/CloudyKit/jet/pull/165) interface now requires a `ProvidesIndex() bool` method too\r\n    - Example has been [updated](https://github.com/kataras/iris/tree/main/_examples/view/template_jet_0)\r\n\r\n- Fix [#1552](https://github.com/kataras/iris/issues/1552).\r\n\r\n- Proper listing of root directories on `Party.HandleDir` when its `DirOptions.ShowList` was set to true.\r\n    - Customize the file/directory listing page through views, see [example](https://github.com/kataras/iris/tree/main/_examples/file-server/file-server).\r\n\r\n- Socket Sharding as requested at [#1544](https://github.com/kataras/iris/issues/1544). New `iris.WithSocketSharding` Configurator and `SocketSharding bool` setting.\r\n\r\n- Versioned Controllers feature through the new `mvc.Version` option. See [_examples/mvc/versioned-controller](https://github.com/kataras/iris/blob/main/_examples/mvc/versioned-controller/main.go).\r\n\r\n- Fix [#1539](https://github.com/kataras/iris/issues/1539).\r\n\r\n- New [rollbar example](https://github.com/kataras/iris/blob/main/_examples/logging/rollbar/main.go).\r\n\r\n- New builtin [requestid](https://github.com/kataras/iris/tree/main/middleware/requestid) middleware.\r\n\r\n- New builtin [JWT](https://github.com/kataras/iris/tree/main/middleware/jwt) middleware based on the fastest JWT implementation; [kataras/jwt](https://github.com/kataras/jwt) featured with optional wire encryption to set claims with sensitive data when necessary.\r\n\r\n- New `iris.RouteOverlap` route registration rule. `Party.SetRegisterRule(iris.RouteOverlap)` to allow overlapping across multiple routes for the same request subdomain, method, path. See [1536#issuecomment-643719922](https://github.com/kataras/iris/issues/1536#issuecomment-643719922). This allows two or more **MVC Controllers** to listen on the same path based on one or more registered dependencies (see [_examples/mvc/authenticated-controller](https://github.com/kataras/iris/tree/main/_examples/mvc/authenticated-controller)).\r\n\r\n- `Context.ReadForm` now can return an `iris.ErrEmptyForm` instead of `nil` when the new `Configuration.FireEmptyFormError` is true  (when `iris.WithEmptyFormError` is set) on missing form body to read from.\r\n\r\n- `Configuration.EnablePathIntelligence | iris.WithPathIntelligence` to enable path intelligence automatic path redirection on the most closest path (if any), [example]((https://github.com/kataras/iris/blob/main/_examples/routing/intelligence/main.go)\r\n\r\n- Enhanced cookie security and management through new `Context.AddCookieOptions` method and new cookie options (look on New Package-level functions section below), [securecookie](https://github.com/kataras/iris/tree/main/_examples/cookies/securecookie) example has been updated.\r\n- `Context.RemoveCookie` removes also the Request's specific cookie of the same request lifecycle when `iris.CookieAllowReclaim` is set to cookie options, [example](https://github.com/kataras/iris/tree/main/_examples/cookies/options).\r\n\r\n- `iris.TLS` can now accept certificates in form of raw `[]byte` contents too.\r\n- `iris.TLS` registers a secondary http server which redirects \"http://\" to their \"https://\" equivalent requests, unless the new `iris.TLSNoRedirect` host Configurator is provided on `iris.TLS`, e.g. `app.Run(iris.TLS(\"127.0.0.1:443\", \"mycert.cert\", \"mykey.key\", iris.TLSNoRedirect))`. There is `iris.AutoTLSNoRedirect` option for `AutoTLS` too.\r\n\r\n- Fix an [issue](https://github.com/kataras/i18n/issues/1) about i18n loading from path which contains potential language code.\r\n\r\n- Server will not return neither log the `ErrServerClosed` error if `app.Shutdown` was called manually via interrupt signal(CTRL/CMD+C), note that if the server closed by any other reason the error will be fired as previously (unless `iris.WithoutServerError(iris.ErrServerClosed)`).\r\n\r\n- Finally, Log level's and Route debug information colorization is respected across outputs. Previously if the application used more than one output destination (e.g. a file through `app.Logger().AddOutput`) the color support was automatically disabled from all, including the terminal one, this problem is fixed now. Developers can now see colors in their terminals while log files are kept with clear text.\r\n\r\n- New `iris.WithLowercaseRouting` option which forces all routes' paths to be lowercase and converts request paths to their lowercase for matching.\r\n\r\n- New `app.Validator { Struct(interface{}) error }` field and `app.Validate` method were added. The `app.Validator = ` can be used to integrate a 3rd-party package such as [go-playground/validator](https://github.com/go-playground/validator). If set-ed then Iris `Context`'s `ReadJSON`, `ReadXML`, `ReadMsgPack`, `ReadYAML`, `ReadForm`, `ReadQuery`, `ReadBody` methods will return the validation error on data validation failures. The [read-json-struct-validation](_examples/request-body/read-json-struct-validation) example was updated.\r\n\r\n- A result of <T> can implement the new `hero.PreflightResult` interface which contains a single method of `Preflight(iris.Context) error`. If this method exists on a custom struct value which is returned from a handler then it will fire that `Preflight` first and if not errored then it will cotninue by sending the struct value as JSON(by-default) response body.\r\n\r\n- `ctx.JSON, JSONP, XML`: if `iris.WithOptimizations` is NOT passed on `app.Run/Listen` then the indentation defaults to `\"    \"` (four spaces) and `\"  \"` respectfully otherwise it is empty or the provided value.\r\n\r\n- Hero Handlers (and `app.ConfigureContainer().Handle`) do not have to require `iris.Context` just to call `ctx.Next()` anymore, this is done automatically now.\r\n\r\n- Improve Remote Address parsing as requested at: [#1453](https://github.com/kataras/iris/issues/1453). Add `Configuration.RemoteAddrPrivateSubnets` to exclude those addresses when fetched by `Configuration.RemoteAddrHeaders` through `context.RemoteAddr() string`.\r\n\r\n- Fix [#1487](https://github.com/kataras/iris/issues/1487).\r\n\r\n- Fix [#1473](https://github.com/kataras/iris/issues/1473).\r\n\r\n## New Package-level Variables\r\n\r\n- `iris.DirListRichOptions` to pass on `iris.DirListRich` method.\r\n- `iris.DirListRich` to override the default look and feel if the `DirOptions.ShowList` was set to true, can be passed to `DirOptions.DirList` field.\r\n- `DirOptions.PushTargets` for http/2 push on index [*](https://github.com/kataras/iris/tree/main/_examples/file-server/http2push/main.go).\r\n- `iris.Compression` middleware to compress responses and decode compressed request data respectfully.\r\n- `iris.B, KB, MB, GB, TB, PB, EB` for byte units.\r\n- `TLSNoRedirect` to disable automatic \"http://\" to \"https://\" redirections (see below)\r\n- `CookieAllowReclaim`, `CookieAllowSubdomains`, `CookieSameSite`, `CookieSecure` and `CookieEncoding` to bring previously sessions-only features to all cookies in the request.\r\n\r\n## New Context Methods\r\n\r\n- `Context.FormFiles(key string, before ...func(*Context, *multipart.FileHeader) bool) (files []multipart.File, headers []*multipart.FileHeader, err error)` method.\r\n- `Context.ReadURL(ptr interface{}) error` shortcut of `ReadParams` and `ReadQuery`. Binds URL dynamic path parameters and URL query parameters to the given \"ptr\" pointer of a struct value.\r\n- `Context.SetUser(User)` and `Context.User() User` to store and retrieve an authenticated client. Read more [here](https://github.com/iris-contrib/middleware/issues/63).\r\n- `Context.SetLogoutFunc(fn interface{}, persistenceArgs ...interface{})` and `Logout(args ...interface{}) error` methods to allow different kind of auth middlewares to be able to set a \"logout\" a user/client feature with a single function, the route handler may not be aware of the implementation of the authentication used.\r\n- `Context.SetFunc(name string, fn interface{}, persistenceArgs ...interface{})` and `Context.CallFunc(name string, args ...interface{}) ([]reflect.Value, error)` to allow middlewares to share functions dynamically when the type of the function is not predictable, see the [example](https://github.com/kataras/iris/tree/main/_examples/routing/writing-a-middleware/share-funcs) for more.\r\n- `Context.TextYAML(interface{}) error` same as `Context.YAML` but with set the Content-Type to `text/yaml` instead (Google Chrome renders it as text). \r\n- `Context.IsDebug() bool` reports whether the application is running under debug/development mode. It is a shortcut of Application.Logger().Level >= golog.DebugLevel.\r\n- `Context.IsRecovered() bool` reports whether the current request was recovered from the [recover middleware](https://github.com/kataras/iris/tree/main/middleware/recover). Also the `Context.GetErrPublic() (bool, error)`, `Context.SetErrPrivate(err error)` methods and `iris.ErrPrivate` interface have been introduced. \r\n- `Context.RecordRequestBody(bool)` same as the Application's `DisableBodyConsumptionOnUnmarshal` configuration field but registers per chain of handlers. It makes the request body readable more than once.\r\n- `Context.IsRecordingBody() bool` reports whether the request body can be readen multiple times.\r\n- `Context.ReadHeaders(ptr interface{}) error` binds request headers to \"ptr\". [Example](https://github.com/kataras/iris/blob/main/_examples/request-body/read-headers/main.go).\r\n- `Context.ReadParams(ptr interface{}) error` binds dynamic path parameters to \"ptr\". [Example](https://github.com/kataras/iris/blob/main/_examples/request-body/read-params/main.go).\r\n- `Context.SaveFormFile(fh *multipart.FileHeader, dest string) (int64, error)` previously unexported. Accepts a result file of `Context.FormFile` and saves it to the disk.\r\n- `Context.URLParamSlice(name string) []string` is a a shortcut of `ctx.Request().URL.Query()[name]`. Like `URLParam` but it returns all values as a string slice instead of a single string separated by commas. Note that it skips any empty values (e.g. https://iris-go.com?values=).\r\n- `Context.PostValueMany(name string) (string, error)` returns the post data of a given key. The returned value is a single string separated by commas on multiple values. It also reports whether the form was empty or when the \"name\" does not exist or whether the available values are empty. It strips any empty key-values from the slice before return. See `ErrEmptyForm`, `ErrNotFound` and `ErrEmptyFormField` respectfully. The `PostValueInt`, `PostValueInt64`, `PostValueFloat64` and `PostValueBool` now respect the above errors too (the `PostValues` method now returns a second output argument of `error` too, see breaking changes below). \r\n- `Context.URLParamsSorted() []memstore.StringEntry` returns a sorted (by key) slice of key-value entries of the URL Query parameters.\r\n- `Context.ViewEngine(ViewEngine)` to set a view engine on-fly for the current chain of handlers, responsible to render templates through `ctx.View`. [Example](_examples/view/context-view-engine).\r\n- `Context.SetErr(error)` and `Context.GetErr() error` helpers.\r\n- `Context.CompressWriter(bool) error` and `Context.CompressReader(bool) error`.\r\n- `Context.Clone() Context` returns a copy of the Context safe for concurrent access.\r\n- `Context.IsCanceled() bool` reports whether the request has been canceled by the client.\r\n- `Context.IsSSL() bool` reports whether the request is under HTTPS SSL (New `Configuration.SSLProxyHeaders` and `HostProxyHeaders` fields too).\r\n- `Context.CompressReader(enable bool)` method and `iris.CompressReader` middleware to enable future request read body calls to decompress data, [example](_examples/compression/main.go).\r\n- `Context.RegisterDependency(v interface{})` and `Context.UnregisterDependency(typ reflect.Type)` to register/remove struct dependencies on serve-time through a middleware.\r\n- `Context.SetID(id interface{})` and `Context.GetID() interface{}` added to register a custom unique indetifier to the Context, if necessary.\r\n- `Context.Scheme() string` returns the full scheme of the request URL.\r\n- `Context.SubdomainFull() string` returns the full subdomain(s) part of the host (`host[0:rootLevelDomain]`).\r\n- `Context.Domain() string` returns the root level domain.\r\n- `Context.AddCookieOptions(...CookieOption)` adds options for `SetCookie`, `SetCookieKV, UpsertCookie` and `RemoveCookie` methods for the current request.\r\n- `Context.ClearCookieOptions()` clears any cookie options registered through `AddCookieOptions`.\r\n- `Context.SetLanguage(langCode string)` force-sets a language code from inside a middleare, similar to the `app.I18n.ExtractFunc`\r\n- `Context.ServeContentWithRate`, `ServeFileWithRate` and `SendFileWithRate` methods to throttle the \"download\" speed of the client\r\n- `Context.IsHTTP2() bool` reports whether the protocol version for incoming request was HTTP/2\r\n- `Context.IsGRPC() bool` reports whether the request came from a gRPC client\r\n- `Context.UpsertCookie(*http.Cookie, cookieOptions ...context.CookieOption)` upserts a cookie, fixes [#1485](https://github.com/kataras/iris/issues/1485) too\r\n- `Context.StopWithStatus(int)` stops the handlers chain and writes the status code\r\n- `StopWithText(statusCode int, format string, args ...interface{})` stops the handlers chain, writes thre status code and a plain text message\r\n- `Context.StopWithError(int, error)` stops the handlers chain, writes thre status code and the error's message\r\n- `Context.StopWithJSON(int, interface{})` stops the handlers chain, writes the status code and sends a JSON response\r\n- `Context.StopWithProblem(int, iris.Problem)` stops the handlers, writes the status code and sends an `application/problem+json` response\r\n- `Context.Protobuf(proto.Message)` sends protobuf to the client (note that the `Context.JSON` is able to send protobuf as JSON)\r\n- `Context.MsgPack(interface{})` sends msgpack format data to the client\r\n- `Context.ReadProtobuf(ptr)` binds request body to a proto message\r\n- `Context.ReadJSONProtobuf(ptr, ...options)` binds JSON request body to a proto message\r\n- `Context.ReadMsgPack(ptr)` binds request body of a msgpack format to a struct\r\n- `Context.ReadBody(ptr)` binds the request body to the \"ptr\" depending on the request's Method and Content-Type\r\n- `Context.ReflectValue() []reflect.Value` stores and returns the `[]reflect.ValueOf(ctx)`\r\n- `Context.Controller() reflect.Value` returns the current MVC Controller value.\r\n\r\n## MVC & Dependency Injection\r\n\r\nThe new release contains a fresh new and awesome feature....**a function dependency can accept previous registered dependencies and update or return a new value of any type**.\r\n\r\nThe new implementation is **faster** on both design and serve-time.\r\n\r\nThe most common scenario from a route to handle is to:\r\n- accept one or more path parameters and request data, a payload\r\n- send back a response, a payload (JSON, XML,...)\r\n\r\nThe new Iris Dependency Injection feature is about **33.2% faster** than its predecessor on the above case. This drops down even more the performance cost between native handlers and dynamic handlers with dependencies. This reason itself brings us, with safety and performance-wise, to the new `Party.ConfigureContainer(builder ...func(*iris.APIContainer)) *APIContainer` method which returns methods such as `Handle(method, relativePath string, handlersFn ...interface{}) *Route` and `RegisterDependency`.\r\n\r\nLook how clean your codebase can be when using Iris':\r\n\r\n```go\r\npackage main\r\n\r\nimport \"github.com/kataras/iris/v12\"\r\n\r\ntype (\r\n    testInput struct {\r\n        Email string `json:\"email\"`\r\n    }\r\n\r\n    testOutput struct {\r\n        ID   int    `json:\"id\"`\r\n        Name string `json:\"name\"`\r\n    }\r\n)\r\n\r\nfunc handler(id int, in testInput) testOutput {\r\n    return testOutput{\r\n        ID:   id,\r\n        Name: in.Email,\r\n    }\r\n}\r\n\r\nfunc main() {\r\n    app := iris.New()\r\n    app.ConfigureContainer(func(api *iris.APIContainer) {\r\n        api.Post(\"/{id:int}\", handler)\r\n    })\r\n    app.Listen(\":5000\", iris.WithOptimizations)\r\n}\r\n```\r\n\r\nYour eyes don't lie you. You read well, no `ctx.ReadJSON(&v)` and `ctx.JSON(send)` neither `error` handling are presented. It is a huge relief but if you ever need, you still have the control over those, even errors from dependencies. Here is a quick list of the new Party.ConfigureContainer()'s fields and methods:\r\n\r\n```go\r\n// Container holds the DI Container of this Party featured Dependency Injection.\r\n// Use it to manually convert functions or structs(controllers) to a Handler.\r\nContainer *hero.Container\r\n```\r\n\r\n```go\r\n// OnError adds an error handler for this Party's DI Hero Container and its handlers (or controllers).\r\n// The \"errorHandler\" handles any error may occurred and returned\r\n// during dependencies injection of the Party's hero handlers or from the handlers themselves.\r\nOnError(errorHandler func(iris.Context, error))\r\n```\r\n\r\n```go\r\n// RegisterDependency adds a dependency.\r\n// The value can be a single struct value or a function.\r\n// Follow the rules:\r\n// * <T> {structValue}\r\n// * func(accepts <T>)                                 returns <D> or (<D>, error)\r\n// * func(accepts iris.Context)                        returns <D> or (<D>, error)\r\n//\r\n// A Dependency can accept a previous registered dependency and return a new one or the same updated.\r\n// * func(accepts1 <D>, accepts2 <T>)                  returns <E> or (<E>, error) or error\r\n// * func(acceptsPathParameter1 string, id uint64)     returns <T> or (<T>, error)\r\n//\r\n// Usage:\r\n//\r\n// - RegisterDependency(loggerService{prefix: \"dev\"})\r\n// - RegisterDependency(func(ctx iris.Context) User {...})\r\n// - RegisterDependency(func(User) OtherResponse {...})\r\nRegisterDependency(dependency interface{})\r\n\r\n// UseResultHandler adds a result handler to the Container.\r\n// A result handler can be used to inject the returned struct value\r\n// from a request handler or to replace the default renderer.\r\nUseResultHandler(handler func(next iris.ResultHandler) iris.ResultHandler)\r\n```\r\n\r\n<details><summary>ResultHandler</summary>\r\n\r\n```go\r\ntype ResultHandler func(ctx iris.Context, v interface{}) error\r\n```\r\n</details>\r\n\r\n```go\r\n// Use same as a common Party's \"Use\" but it accepts dynamic functions as its \"handlersFn\" input.\r\nUse(handlersFn ...interface{})\r\n// Done same as a common Party's but it accepts dynamic functions as its \"handlersFn\" input.\r\nDone(handlersFn ...interface{})\r\n```\r\n\r\n```go\r\n// Handle same as a common Party's `Handle` but it accepts one or more \"handlersFn\" functions which each one of them\r\n// can accept any input arguments that match with the Party's registered Container's `Dependencies` and\r\n// any output result; like custom structs <T>, string, []byte, int, error,\r\n// a combination of the above, hero.Result(hero.View | hero.Response) and more.\r\n//\r\n// It's common from a hero handler to not even need to accept a `Context`, for that reason,\r\n// the \"handlersFn\" will call `ctx.Next()` automatically when not called manually.\r\n// To stop the execution and not continue to the next \"handlersFn\"\r\n// the end-developer should output an error and return `iris.ErrStopExecution`.\r\nHandle(method, relativePath string, handlersFn ...interface{}) *Route\r\n\r\n// Get registers a GET route, same as `Handle(\"GET\", relativePath, handlersFn....)`.\r\nGet(relativePath string, handlersFn ...interface{}) *Route\r\n// and so on...\r\n```\r\n\r\nPrior to this version the `iris.Context` was the only one dependency that has been automatically binded to the handler's input or a controller's fields and methods, read below to see what types are automatically binded:\r\n\r\n| Type | Maps To |\r\n|------|:---------|\r\n| [*mvc.Application](https://pkg.go.dev/github.com/kataras/iris/v12/mvc?tab=doc#Application) | Current MVC Application |\r\n| [iris.Context](https://pkg.go.dev/github.com/kataras/iris/v12/context?tab=doc#Context) | Current Iris Context |\r\n| [*sessions.Session](https://pkg.go.dev/github.com/kataras/iris/v12/sessions?tab=doc#Session) | Current Iris Session |\r\n| [context.Context](https://golang.org/pkg/context/#Context) | [ctx.Request().Context()](https://golang.org/pkg/net/http/#Request.Context) |\r\n| [*http.Request](https://golang.org/pkg/net/http/#Request) | `ctx.Request()` |\r\n| [http.ResponseWriter](https://golang.org/pkg/net/http/#ResponseWriter) | `ctx.ResponseWriter()` |\r\n| [http.Header](https://golang.org/pkg/net/http/#Header) | `ctx.Request().Header` |\r\n| [time.Time](https://golang.org/pkg/time/#Time) | `time.Now()` |\r\n| [*golog.Logger](https://pkg.go.dev/github.com/kataras/golog) | Iris Logger |\r\n| [net.IP](https://golang.org/pkg/net/#IP) | `net.ParseIP(ctx.RemoteAddr())` |\r\n| [mvc.Code](https://pkg.go.dev/github.com/kataras/iris/v12/mvc?tab=doc#Code) | `ctx.GetStatusCode() int` |\r\n| [mvc.Err](https://pkg.go.dev/github.com/kataras/iris/v12/mvc?tab=doc#Err) | `ctx.GetErr() error` |\r\n| [iris/context.User](https://pkg.go.dev/github.com/kataras/iris/v12/context?tab=doc#User) | `ctx.User()` |\r\n| `string`, | |\r\n| `int, int8, int16, int32, int64`, | |\r\n| `uint, uint8, uint16, uint32, uint64`, | |\r\n| `float, float32, float64`, | |\r\n| `bool`, | |\r\n| `slice` | [Path Parameter](https://github.com/kataras/iris/blob/main/_examples/routing/dynamic-path/main.go#L20) |\r\n| Struct | [Request Body](https://github.com/kataras/iris/tree/main/_examples/request-body) of `JSON`, `XML`, `YAML`, `Form`, `URL Query`, `Protobuf`, `MsgPack` |\r\n\r\nHere is a preview of what the new Hero handlers look like:\r\n\r\n### Request & Response & Path Parameters\r\n\r\n**1.** Declare Go types for client's request body and a server's response.\r\n\r\n```go\r\ntype (\r\n\trequest struct {\r\n\t\tFirstname string `json:\"firstname\"`\r\n\t\tLastname  string `json:\"lastname\"`\r\n\t}\r\n\r\n\tresponse struct {\r\n\t\tID      uint64 `json:\"id\"`\r\n\t\tMessage string `json:\"message\"`\r\n\t}\r\n)\r\n```\r\n\r\n**2.** Create the route handler.\r\n\r\nPath parameters and request body are binded automatically.\r\n- **id uint64** binds to \"id:uint64\"\r\n- **input request** binds to client request data such as JSON\r\n\r\n```go\r\nfunc updateUser(id uint64, input request) response {\r\n\treturn response{\r\n\t\tID:      id,\r\n\t\tMessage: \"User updated successfully\",\r\n\t}\r\n}\r\n```\r\n\r\n**3.** Configure the container per group and register the route.\r\n\r\n```go\r\napp.Party(\"/user\").ConfigureContainer(container)\r\n\r\nfunc container(api *iris.APIContainer) {\r\n    api.Put(\"/{id:uint64}\", updateUser)\r\n}\r\n```\r\n\r\n**4.** Simulate a [client](https://curl.haxx.se/download.html) request which sends data to the server and displays the response.\r\n\r\n```sh\r\ncurl --request PUT -d '{\"firstanme\":\"John\",\"lastname\":\"Doe\"}' http://localhost:8080/user/42\r\n```\r\n\r\n```json\r\n{\r\n    \"id\": 42,\r\n    \"message\": \"User updated successfully\"\r\n}\r\n```\r\n\r\n### Custom Preflight\r\n\r\nBefore we continue to the next section, register dependencies, you may want to learn how a response can be customized through the `iris.Context` right before sent to the client.\r\n\r\nThe server will automatically execute the `Preflight(iris.Context) error` method of a function's output struct value right before send the response to the client.\r\n\r\nTake for example that you want to fire different HTTP status codes depending on the custom logic inside your handler and also modify the value(response body) itself before sent to the client. Your response type should contain a `Preflight` method like below.\r\n\r\n```go\r\ntype response struct {\r\n    ID      uint64 `json:\"id,omitempty\"`\r\n    Message string `json:\"message\"`\r\n    Code    int    `json:\"code\"`\r\n    Timestamp int64 `json:\"timestamp,omitempty\"`\r\n}\r\n\r\nfunc (r *response) Preflight(ctx iris.Context) error {\r\n    if r.ID > 0 {\r\n        r.Timestamp = time.Now().Unix()\r\n    }\r\n\r\n    if r.Code > 0 {\r\n        ctx.StatusCode(r.Code)\r\n    }\r\n\r\n    return nil\r\n}\r\n```\r\n\r\nNow, each handler that returns a `*response` value will call the `response.Preflight` method automatically.\r\n\r\n```go\r\nfunc deleteUser(db *sql.DB, id uint64) *response {\r\n    // [...custom logic]\r\n\r\n    return &response{\r\n        Message: \"User has been marked for deletion\",\r\n        Code: iris.StatusAccepted,\r\n    }\r\n}\r\n```\r\n\r\nIf you register the route and fire a request you should see an output like this, the timestamp is filled and the HTTP status code of the response that the client will receive is 202 (Status Accepted).\r\n\r\n```json\r\n{\r\n  \"message\": \"User has been marked for deletion\",\r\n  \"code\": 202,\r\n  \"timestamp\": 1583313026\r\n}\r\n```\r\n\r\n### Register Dependencies\r\n\r\n**1.** Import packages to interact with a database.\r\nThe go-sqlite3 package is a database driver for [SQLite](https://www.sqlite.org/index.html).\r\n\r\n```go\r\nimport \"database/sql\"\r\nimport _ \"github.com/mattn/go-sqlite3\"\r\n```\r\n\r\n**2.** Configure the container ([see above](#request--response--path-parameters)), register your dependencies. Handler expects an *sql.DB instance.\r\n\r\n```go\r\nlocalDB, _ := sql.Open(\"sqlite3\", \"./foo.db\")\r\napi.RegisterDependency(localDB)\r\n```\r\n\r\n**3.** Register a route to create a user.\r\n\r\n```go\r\napi.Post(\"/{id:uint64}\", createUser)\r\n```\r\n\r\n**4.** The create user Handler.\r\n\r\nThe handler accepts a database and some client request data such as JSON, Protobuf, Form, URL Query and e.t.c. It Returns a response.\r\n\r\n```go\r\nfunc createUser(db *sql.DB, user request) *response {\r\n    // [custom logic using the db]\r\n    userID, err := db.CreateUser(user)\r\n    if err != nil {\r\n        return &response{\r\n            Message: err.Error(),\r\n            Code: iris.StatusInternalServerError,\r\n        }\r\n    }\r\n\r\n\treturn &response{\r\n\t\tID:      userID,\r\n\t\tMessage: \"User created\",\r\n\t\tCode:    iris.StatusCreated,\r\n\t}\r\n}\r\n```\r\n\r\n**5.** Simulate a [client](https://curl.haxx.se/download.html) to create a user.\r\n\r\n```sh\r\n# JSON\r\ncurl --request POST -d '{\"firstname\":\"John\",\"lastname\":\"Doe\"}' \\\r\n--header 'Content-Type: application/json' \\\r\nhttp://localhost:8080/user\r\n```\r\n\r\n```sh\r\n# Form (multipart)\r\ncurl --request POST 'http://localhost:8080/users' \\\r\n--header 'Content-Type: multipart/form-data' \\\r\n--form 'firstname=John' \\\r\n--form 'lastname=Doe'\r\n```\r\n\r\n```sh\r\n# Form (URL-encoded)\r\ncurl --request POST 'http://localhost:8080/users' \\\r\n--header 'Content-Type: application/x-www-form-urlencoded' \\\r\n--data-urlencode 'firstname=John' \\\r\n--data-urlencode 'lastname=Doe'\r\n```\r\n\r\n```sh\r\n# URL Query\r\ncurl --request POST 'http://localhost:8080/users?firstname=John&lastname=Doe'\r\n```\r\n\r\nResponse: \r\n\r\n```json\r\n{\r\n    \"id\": 42,\r\n    \"message\": \"User created\",\r\n    \"code\": 201,\r\n    \"timestamp\": 1583313026\r\n}\r\n```\r\n\r\n## Breaking Changes\r\n\r\n- The `versioning.NewMatcher` has been removed entirely in favor of `NewGroup`. Strict versions format on `versioning.NewGroup` is required. E.g. `\"1\"` is not valid anymore, you have to specify `\"1.0.0\"`. Example: `NewGroup(api, \">=1.0.0 <2.0.0\")`. The [routing/versioning](_examples/routing/versioning) examples have been updated.\r\n- Now that `RegisterView` can be used to register different view engines per-Party, there is no need to support registering multiple engines under the same Party. The `app.RegisterView` now upserts the given Engine instead of append. You can now render templates **without file extension**, e.g. `index` instead of `index.ace`, both forms are valid now.\r\n- The `Context.ContentType` does not accept filenames to resolve the mime type anymore (caused issues with  vendor-specific(vnd) MIME types).\r\n- The `Configuration.RemoteAddrPrivateSubnets.IPRange.Start and End` are now type of `string` instead of `net.IP`. The `WithRemoteAddrPrivateSubnet` option remains as it is, already accepts `string`s.\r\n- The `i18n#LoaderConfig.FuncMap template.FuncMap` field was replaced with `Funcs func(iris.Locale) template.FuncMap` in order to give current locale access to the template functions. A new `app.I18n.Loader` was introduced too, in order to make it easier for end-developers to customize the translation key values.\r\n- Request Logger's `Columns bool` field has been removed. Use the new [accesslog](https://github.com/kataras/iris/tree/main/_examples/logging/request-logger/accesslog/main.go) middleware instead.\r\n- The `.Binary` method of all view engines was removed: pass the go-bindata's latest version `AssetFile()` exported function as the first argument instead of string. All examples updated.\r\n- `ContextUploadFormFiles(destDirectory string, before ...func(*Context, *multipart.FileHeader) bool) (uploaded []*multipart.FileHeader, n int64, err error)` now returns the total files uploaded too (as its first parameter) and the \"before\" variadic option should return a boolean, if false then the specific file is skipped.\r\n- `Context.PostValues(name string) ([]string, error)` now returns a second output argument of `error` type too, which reports `ErrEmptyForm` or `ErrNotFound` or `ErrEmptyFormField`. The single post value getters now returns the **last value** if multiple was given instead of the first one (this allows clients to append values on flow updates).\r\n- `Party.GetReporter()` **removed**. The `Application.Build` returns the first error now and the API's errors are logged, this allows the server to run even if some of the routes are invalid but not fatal to the entire application (it was a request from a company).\r\n- `versioning.NewGroup(string)` now accepts a `Party` as its first input argument: `NewGroup(Party, string)`.\r\n- `versioning.RegisterGroups` is **removed** as it is no longer necessary.\r\n- `Configuration.RemoteAddrHeaders` from `map[string]bool` to `[]string`. If you used `With(out)RemoteAddrHeader` then you are ready to proceed without any code changes for that one.\r\n- `ctx.Gzip(boolean)` replaced with `ctx.CompressWriter(boolean) error`.\r\n- `ctx.GzipReader(boolean) error` replaced with `ctx.CompressReader(boolean) error`.\r\n- `iris.Gzip` and `iris.GzipReader` replaced with `iris.Compression` (middleware).\r\n- `ctx.ClientSupportsGzip() bool` replaced with `ctx.ClientSupportsEncoding(\"gzip\", \"br\" ...) bool`.\r\n- `ctx.GzipResponseWriter()` is **removed**.\r\n- `Party.HandleDir/iris.FileServer` now accepts both `http.FileSystem` and `string` and returns a list of `[]*Route` (GET and HEAD) instead of GET only. You can write: both `app.HandleDir(\"/\", iris.Dir(\"./assets\"))` and `app.HandleDir(\"/\", \"./assets\")` and `DirOptions.Asset, AssetNames, AssetInfo` removed, use `go-bindata -fs [..]` and `app.HandleDir(\"/\", AssetFile())` instead.\r\n- `Context.OnClose` and `Context.OnCloseConnection` now both accept an `iris.Handler` instead of a simple `func()` as their callback.\r\n- `Context.StreamWriter(writer func(w io.Writer) bool)` changed to `StreamWriter(writer func(w io.Writer) error) error` and it's now the `Context.Request().Context().Done()` channel that is used to receive any close connection/manual cancel signals, instead of the deprecated `ResponseWriter().CloseNotify()` one. Same for the `Context.OnClose` and `Context.OnCloseConnection` methods.\r\n- Fixed handler's error response not be respected when response recorder was used instead of the common writer. Fixes [#1531](https://github.com/kataras/iris/issues/1531). It contains a **BREAKING CHANGE** of: the new `Configuration.ResetOnFireErrorCode` field should be set **to true** in order to behave as it used before this update (to reset the contents on recorder).\r\n- `Context.String()` (rarely used by end-developers) it does not return a unique string anymore, to achieve the old representation you must call the new `Context.SetID` method first.\r\n- `iris.CookieEncode` and `CookieDecode` are replaced with the `iris.CookieEncoding`.\r\n- `sessions#Config.Encode` and `Decode` are removed in favor of (the existing) `Encoding` field.\r\n- `versioning.GetVersion` now returns an empty string if version wasn't found.\r\n- Change the MIME type of `Javascript .js` and `JSONP` as the HTML specification now recommends to `\"text/javascript\"` instead of the obselete `\"application/javascript\"`. This change was pushed to the `Go` language itself as well. See <https://go-review.googlesource.com/c/go/+/186927/>.\r\n- Remove the last input argument of `enableGzipCompression` in `Context.ServeContent`, `ServeFile` methods. This was deprecated a few versions ago. A middleware (`app.Use(iris.CompressWriter)`) or a prior call to `Context.CompressWriter(true)` will enable compression. Also these two methods and `Context.SendFile` one now support `Content-Range` and `Accept-Ranges` correctly out of the box (`net/http` had a bug, which is now fixed).\r\n- `Context.ServeContent` no longer returns an error, see `ServeContentWithRate`, `ServeFileWithRate` and `SendFileWithRate` new methods too.\r\n- `route.Trace() string` changed to `route.Trace(w io.Writer)`, to achieve the same result just pass a `bytes.Buffer`\r\n- `var mvc.AutoBinding` removed as the default behavior now resolves such dependencies automatically (see [[FEATURE REQUEST] MVC serving gRPC-compatible controller](https://github.com/kataras/iris/issues/1449)).\r\n- `mvc#Application.SortByNumMethods()` removed as the default behavior now binds the \"thinnest\"  empty `interface{}` automatically (see [MVC: service injecting fails](https://github.com/kataras/iris/issues/1343)).\r\n- `mvc#BeforeActivation.Dependencies().Add` should be replaced with `mvc#BeforeActivation.Dependencies().Register` instead\r\n- **REMOVE** the `kataras/iris/v12/typescript` package in favor of the new [iris-cli](https://github.com/kataras/iris-cli). Also, the alm typescript online editor was removed as it is deprecated by its author, please consider using the [designtsx](https://designtsx.com/) instead.\r\n\r\n# Su, 16 February 2020 | v12.1.8\r\n\r\nNew Features:\r\n\r\n-  [[FEATURE REQUEST] MVC serving gRPC-compatible controller](https://github.com/kataras/iris/issues/1449)\r\n\r\nFixes:\r\n\r\n- [App can't find embedded pug template files by go-bindata](https://github.com/kataras/iris/issues/1450)\r\n\r\nNew Examples:\r\n\r\n- [_examples/mvc/grpc-compatible](_examples/mvc/grpc-compatible)\r\n\r\n# Mo, 10 February 2020 | v12.1.7\r\n\r\nImplement **new** `SetRegisterRule(iris.RouteOverride, RouteSkip, RouteError)` to resolve: https://github.com/kataras/iris/issues/1448\r\n\r\nNew Examples:\r\n\r\n- [_examples/routing/route-register-rule](_examples/routing/route-register-rule)\r\n\r\n# We, 05 February 2020 | v12.1.6\r\n\r\nFixes:\r\n\r\n- [jet.View - urlpath error](https://github.com/kataras/iris/issues/1438)\r\n- [Context.ServeFile send 'application/wasm' with a wrong extra field](https://github.com/kataras/iris/issues/1440)\r\n\r\n# Su, 02 February 2020 | v12.1.5\r\n\r\nVarious improvements and linting.\r\n\r\n# Su, 29 December 2019 | v12.1.4\r\n\r\nMinor fix on serving embedded files.\r\n\r\n# We, 25 December 2019 | v12.1.3\r\n\r\nFix [[BUG] [iris.Default] RegisterView](https://github.com/kataras/iris/issues/1410)\r\n\r\n# Th, 19 December 2019 | v12.1.2\r\n\r\nFix [[BUG]Session works incorrectly when meets the multi-level TLDs](https://github.com/kataras/iris/issues/1407).\r\n\r\n# Mo, 16 December 2019 | v12.1.1\r\n\r\nAdd [Context.FindClosest(n int) []string](https://github.com/kataras/iris/blob/main/_examples/routing/intelligence/manual/main.go#L22)\r\n\r\n```go\r\napp := iris.New()\r\napp.OnErrorCode(iris.StatusNotFound, notFound)\r\n```\r\n\r\n```go\r\nfunc notFound(ctx iris.Context) {\r\n    suggestPaths := ctx.FindClosest(3)\r\n    if len(suggestPaths) == 0 {\r\n        ctx.WriteString(\"404 not found\")\r\n        return\r\n    }\r\n\r\n    ctx.HTML(\"Did you mean?<ul>\")\r\n    for _, s := range suggestPaths {\r\n        ctx.HTML(`<li><a href=\"%s\">%s</a></li>`, s, s)\r\n    }\r\n    ctx.HTML(\"</ul>\")\r\n}\r\n```\r\n\r\n![](https://iris-go.com/images/iris-not-found-suggests.png)\r\n\r\n# Fr, 13 December 2019 | v12.1.0\r\n\r\n## Breaking Changes\r\n\r\nMinor as many of you don't even use them but, indeed, they need to be covered here.\r\n\r\n- Old i18n middleware(iris/middleware/i18n) was replaced by the [i18n](i18n) sub-package which lives as field at your application: `app.I18n.Load(globPathPattern string, languages ...string)` (see below)\r\n- Community-driven i18n middleware(iris-contrib/middleware/go-i18n) has a `NewLoader` function which returns a loader which can be passed at `app.I18n.Reset(loader i18n.Loader, languages ...string)` to change the locales parser\r\n- The Configuration's `TranslateFunctionContextKey` was replaced by `LocaleContextKey` which Context store's value (if i18n is used) returns the current Locale which contains the translate function, the language code, the language tag and the index position of it\r\n- The `context.Translate` method was replaced by `context.Tr` as a shortcut for the new `context.GetLocale().GetMessage(format, args...)` method and it matches the view's function `{{tr format args}}` too\r\n- If you used [Iris Django](https://github.com/kataras/iris/tree/main/_examples/view/template_django_0) view engine with `import _ github.com/flosch/pongo2-addons` you **must change** the import path to `_ github.com/iris-contrib/pongo2-addons` or add a [go mod replace](https://github.com/golang/go/wiki/Modules#when-should-i-use-the-replace-directive) to your `go.mod` file, e.g. `replace github.com/flosch/pongo2-addons => github.com/iris-contrib/pongo2-addons v0.0.1`.\r\n\r\n## Fixes\r\n\r\nAll known issues.\r\n\r\n1. [#1395](https://github.com/kataras/iris/issues/1395) \r\n2. [#1369](https://github.com/kataras/iris/issues/1369)\r\n3. [#1399](https://github.com/kataras/iris/issues/1399) with PR [#1400](https://github.com/kataras/iris/pull/1400)\r\n4. [#1401](https://github.com/kataras/iris/issues/1401) \r\n5. [#1406](https://github.com/kataras/iris/issues/1406)\r\n6. [neffos/#20](https://github.com/kataras/neffos/issues/20)\r\n7. [pio/#5](https://github.com/kataras/pio/issues/5)\r\n\r\n## New Features\r\n\r\n### Internationalization and localization\r\n\r\nSupport for i18n is now a **builtin feature** and is being respected across your entire application, per say [sitemap](https://github.com/kataras/iris/blob/main/_examples/routing/sitemap/main.go) and [views](https://github.com/kataras/iris/blob/main/_examples/i18n/basic/main.go#L50).\r\n\r\n### Sitemaps\r\n\r\nIris generates and serves one or more [sitemap.xml](https://www.sitemaps.org/protocol.html) for your static routes.\r\n\r\nNavigate through: https://github.com/kataras/iris/blob/main/_examples/routing/sitemap/main.go for more.\r\n\r\n## New Examples\r\n\r\n2. [_examples/i18n](_examples/i18n)\r\n1. [_examples/sitemap](_examples/routing/sitemap)\r\n3. [_examples/desktop/blink](_examples/desktop/blink)\r\n4. [_examples/desktop/lorca](_examples/desktop/lorca)\r\n5. [_examples/desktop/webview](_examples/desktop/webview)\r\n\r\n# Sa, 26 October 2019 | v12.0.0\r\n\r\n- Add version suffix of the **import path**, learn why and see what people voted at [issue #1370](https://github.com/kataras/iris/issues/1370)\r\n\r\n![](https://iris-go.com/images/vote-v12-version-suffix_26_oct_2019.png)\r\n\r\n- All errors are now compatible with go1.13 `errors.Is`, `errors.As` and `fmt.Errorf` and a new `core/errgroup` package created\r\n- Fix [#1383](https://github.com/kataras/iris/issues/1383)\r\n- Report whether system couldn't find the directory of view templates\r\n- Remove the `Party#GetReport` method, keep `Party#GetReporter` which is an `error` and an `errgroup.Group`.\r\n- Remove the router's deprecated methods such as StaticWeb and StaticEmbedded_XXX\r\n- The `Context#CheckIfModifiedSince` now returns an `context.ErrPreconditionFailed` type of error when client conditions are not met. Usage: `if errors.Is(err, context.ErrPreconditionFailed) { ... }`\r\n- Add `SourceFileName` and `SourceLineNumber` to the `Route`, reports the exact position of its registration inside your project's source code.\r\n- Fix a bug about the MVC package route binding, see [PR #1364](https://github.com/kataras/iris/pull/1364)\r\n- Add `mvc/Application#SortByNumMethods` as requested at [#1343](https://github.com/kataras/iris/issues/1343#issuecomment-524868164)\r\n- Add status code `103 Early Hints`\r\n- Fix performance of session.UpdateExpiration on 200 thousands+ keys with new radix as reported at [issue #1328](https://github.com/kataras/iris/issues/1328)\r\n- New redis session database configuration field: `Driver: redis.Redigo()` or `redis.Radix()`, see [updated examples](_examples/sessions/database/redis/)\r\n- Add Clusters support for redis:radix session database (`Driver: redis:Radix()`) as requested at [issue #1339](https://github.com/kataras/iris/issues/1339)\r\n- Create Iranian [README_FA](README_FA.md) translation with [PR #1360](https://github.com/kataras/iris/pull/1360) \r\n- Create Korean [README_KO](README_KO.md) translation with [PR #1356](https://github.com/kataras/iris/pull/1356)\r\n- Create Spanish [README_ES](README_ES.md) and [HISTORY_ES](HISTORY_ES.md) translations with [PR #1344](https://github.com/kataras/iris/pull/1344).\r\n\r\nThe iris-contrib/middleare and examples are updated to use the new `github.com/kataras/iris/v12` import path.\r\n\r\n# Fr, 16 August 2019 | v11.2.8\r\n\r\n- Set `Cookie.SameSite` to `Lax` when subdomains sessions share is enabled[*](https://github.com/kataras/iris/commit/6bbdd3db9139f9038641ce6f00f7b4bab6e62550)\r\n- Add and update all [experimental handlers](https://github.com/iris-contrib/middleware) \r\n- New `XMLMap` function which wraps a `map[string]interface{}` and converts it to a valid xml content to render through `Context.XML` method\r\n- Add new `ProblemOptions.XML` and `RenderXML` fields to render the `Problem` as XML(application/problem+xml) instead of JSON(\"application/problem+json) and enrich the `Negotiate` to easily accept the `application/problem+xml` mime.\r\n\r\nCommit log: https://github.com/kataras/iris/compare/v11.2.7...v11.2.8\r\n\r\n# Th, 15 August 2019 | v11.2.7\r\n\r\nThis minor version contains improvements on the Problem Details for HTTP APIs implemented on [v11.2.5](#mo-12-august-2019--v1125).\r\n\r\n- Fix https://github.com/kataras/iris/issues/1335#issuecomment-521319721\r\n- Add `ProblemOptions` with `RetryAfter` as requested at: https://github.com/kataras/iris/issues/1335#issuecomment-521330994.\r\n- Add `iris.JSON` alias for `context#JSON` options type.\r\n\r\n[Example](https://github.com/kataras/iris/blob/45d7c6fedb5adaef22b9730592255f7bb375e809/_examples/routing/http-errors/main.go#L85) updated. \r\n\r\nReferences:\r\n\r\n- https://tools.ietf.org/html/rfc7231#section-7.1.3\r\n- https://tools.ietf.org/html/rfc7807\r\n\r\nCommit log: https://github.com/kataras/iris/compare/v11.2.6...v11.2.7\r\n\r\n# We, 14 August 2019 | v11.2.6\r\n\r\nAllow [handle more than one route with the same paths and parameter types but different macro validation functions](https://github.com/kataras/iris/issues/1058#issuecomment-521110639).\r\n\r\n```go\r\napp.Get(\"/{alias:string regexp(^[a-z0-9]{1,10}\\\\.xml$)}\", PanoXML)\r\napp.Get(\"/{alias:string regexp(^[a-z0-9]{1,10}$)}\", Tour)\r\n```\r\n\r\nCommit log: https://github.com/kataras/iris/compare/v11.2.5...v11.2.6\r\n\r\n# Mo, 12 August 2019 | v11.2.5\r\n\r\n- [New Feature: Problem Details for HTTP APIs](https://github.com/kataras/iris/pull/1336)\r\n- [Add Context.AbsoluteURI](https://github.com/kataras/iris/pull/1336/files#diff-15cce7299aae8810bcab9b0bf9a2fdb1R2368)\r\n\r\nCommit log: https://github.com/kataras/iris/compare/v11.2.4...v11.2.5\r\n\r\n# Fr, 09 August 2019 | v11.2.4\r\n\r\n- Fixes [iris.Jet: no view engine found for '.jet' or '.html'](https://github.com/kataras/iris/issues/1327)\r\n- Fixes [ctx.ViewData not work with JetEngine](https://github.com/kataras/iris/issues/1330)\r\n- **New Feature**: [HTTP Method Override](https://github.com/kataras/iris/issues/1325)\r\n- Fixes [Poor performance of session.UpdateExpiration on 200 thousands+ keys with new radix lib](https://github.com/kataras/iris/issues/1328) by introducing the `sessions.Config.Driver` configuration field which defaults to `Redigo()` but can be set to `Radix()` too, future additions are welcomed.\r\n\r\nCommit log: https://github.com/kataras/iris/compare/v11.2.3...v11.2.4\r\n\r\n# Tu, 30 July 2019 | v11.2.3\r\n\r\n- [New Feature: Handle different parameter types in the same path](https://github.com/kataras/iris/issues/1315)\r\n- [New Feature: Content Negotiation](https://github.com/kataras/iris/issues/1319)\r\n- [Context.ReadYAML](https://github.com/kataras/iris/tree/main/_examples/request-body/read-yaml)\r\n- Fixes https://github.com/kataras/neffos/issues/1#issuecomment-515698536\r\n\r\n# We, 24 July 2019 | v11.2.2\r\n\r\nSessions as middleware:\r\n\r\n```go\r\nimport \"github.com/kataras/iris/v12/sessions\"\r\n// [...]\r\n\r\napp := iris.New()\r\nsess := sessions.New(sessions.Config{...})\r\n\r\napp.Get(\"/path\", func(ctx iris.Context){\r\n    session := sessions.Get(ctx)\r\n    // [work with session...]\r\n})\r\n```\r\n\r\n- Add `Session.Len() int` to return the total number of stored values/entries.\r\n- Make `Context.HTML` and `Context.Text` to accept an optional, variadic, `args ...interface{}` input arg(s) too.\r\n\r\n## v11.1.1\r\n\r\n- https://github.com/kataras/iris/issues/1298\r\n- https://github.com/kataras/iris/issues/1207\r\n\r\n# Tu, 23 July 2019 | v11.2.0\r\n\r\nRead about the new release at: https://www.facebook.com/iris.framework/posts/3276606095684693\r\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.53,
          "content": "BSD 3-Clause License\r\n\r\nCopyright (c) 2016-2024, Gerasimos (Makis) Maropoulos\r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, are permitted provided that the following conditions are met:\r\n\r\n1. Redistributions of source code must retain the above copyright notice, this\r\n   list of conditions and the following disclaimer.\r\n\r\n2. Redistributions in binary form must reproduce the above copyright notice,\r\n   this list of conditions and the following disclaimer in the documentation\r\n   and/or other materials provided with the distribution.\r\n\r\n3. Neither the name of the copyright holder nor the names of its\r\n   contributors may be used to endorse or promote products derived from\r\n   this software without specific prior written permission.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\r\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 8.62,
          "content": "================================================================================\n\n                         Third-Party Software for iris\n\n================================================================================\n\nThe following 3rd-party software packages may be used by or distributed with iris. This document was automatically generated by FOSSA on 4 Oct 2020; any information relevant to third-party vendors listed below are collected using common, reasonable means.\n\nRevision ID: 5fc50a00491616d5cd0cbce3abd8b699838e25ca\n\n-----------------   -----------------   ------------------------------------------\n Package             Version             Website                                  \n-----------------   -----------------   ------------------------------------------       \n ace                 ea038f4770b6746     https://github.com/yosssi/ace       \n                     c3f8f84f14fa60d                                              \n                     9fe1205b56                                   \n badger              536fed1846d0f4d     https://github.com/dgraph-io/badger      \n                     b9579bcff679761                                              \n                     4e134eadfa                                                   \n bbolt               a8af23b57f672fe     https://github.com/etcd-io/bbolt         \n                     f05637de531bba5                                              \n                     aa00013364                                          \n markdown            2ced44d5b58482a     https://github.com/gomarkdown/markdown        \n                     9b77d1abad4c3d3                              \n                     4b190880fe                                                 \n bluemonday          0a75d7616912ab9     https://github.com/microcosm-cc/bluemonday         \n                     beb9cc6f7283ec1                                    \n                     917c61b135\n blocks              2782010d7127295     https://github.com/kataras/blocks         \n                     d72dc16632c7c0c                                    \n                     01dfbf6ceb   \n brotli              c3da72aa01ed78f     https://github.com/andybalholm/brotli       \n                     164593b9624fd91                                              \n                     d25082d2d2                                                    \n closestmatch        1fbe626be92eb4c     https://github.com/schollz/closestmatch  \n                     347d182cae9f8f0                                              \n                     0a046bf2f4                                                                                                      \n compress            4a2d40e4b07e5b3     https://github.com/klauspost/compress    \n                     d333bc0569facd0                                              \n                     f2dbf4ef39                                                   \n crypto              4b2356b1ed79e6b     https://go.googlesource.com/crypto       \n                     e3deca3737a3db3                                              \n                     d132d2847a                                                                                                   \n easyjson            8ab5ff9cd8e4e43     https://github.com/mailru/easyjson\n                     2e8b79f6c47d324\n                     a31dd803cf\n\n securecookie        e59506cc896acb7    https://github.com/gorilla/securecookie\n                     f7bf732d4fdf5e2\n                     5f7ccd8983\n semver              4487282d78122a2     https://github.com/blang/semver \n                     45e413d7515e7c5                                              \n                     16b70c33fd                                                                                                        \n golog               f7561df84e64ab9     https://github.com/kataras/golog         \n                     212f021923ce4ff                                              \n                     db5df5594d                                                           \n goreferrer          ec9c9a553398739     https://github.com/Shopify/goreferrer    \n                     f0dcf817e0ad5e0                                              \n                     1c4e7dcd08                                                   \n httpexpect          bfc40287c2c3ad4     https://github.com/iris-contrib/         \n                     cdf8c4f40e7908a     httpexpect                               \n                     b137f9227d                                                   \n ini.v1              39bc4ddcb8b9d01     https://gopkg.in/ini.v1                  \n                     00f7a040816380c                                              \n                     cda878b94a                                                   \n jade                92f294662063510     https://github.com/iris-contrib/jade     \n                     cac723decad0fba                                              \n                     2ebc878560                                                   \n jet                 305ebcf60d48fce     https://github.com/CloudyKit/jet         \n                     5905bdf00159a0e                                              \n                     1029f1d962                                                   \n msgpack             911bfe50493ebbc     https://github.com/vmihailenco/msgpack   \n                     b6e0af9e6f36451                                              \n                     255746ff46       \n minify              119ab8b676c60a6     https://github.com/tdewolff/minify   \n                     12b9cc824e6a84a                                              \n                     865191aabb                                                      \n neffos              2221a9afc8392b9     https://github.com/kataras/neffos        \n                     a3e984473dd34f8                                              \n                     380ce80840                                                     \n pio                 2e3d576cc65913a     https://github.com/kataras/pio           \n                     dd6106f1ce02837                                              \n                     2c7e6d943c                                                   \n pongo2              f946812ec8d53b7     https://github.com/flosch/pongo2   \n                     24e4daeb888c95a                                              \n                     b63c98b3c0                               \n protobuf            6c66de79d66478d     https://github.com/golang/protobuf       \n                     166c7ea05f5d2cc                                              \n                     af016fbd6b                                                                                                    \n raymond             cd18a09da5ea49b     https://github.com/mailgun/raymond      \n                     b9a8cbec107a22a                                               \n                     9c0e792c21      \n                                                                 \n go-redis            7125bf611e5d7d9     https://github.com/go-redis/redis\n                     bb4487dd6cb80d8\n                     88bad92d23                                                            \n schema              1f5dc3fa1ac5179     https://github.com/iris-contrib/schema   \n                     78c014cb1df9954                                              \n                     0fa5b17f7e                                                   \n sitemap             f223711fe0c7a64     https://github.com/kataras/sitemap       \n                     2bb2d8f2645f0ed                                              \n                     386ba577bc                                                   \n structs             878a968ab225483     https://github.com/fatih/structs         \n                     62a09bdb3322f98                                              \n                     b00f470d46                                                                                                  \n toml                3012a1dbe2e4bd1     https://github.com/BurntSushi/toml       \n                     391d42b32f0577c                                              \n                     b7bbc7f005                                                   \n jwt                 933b4a74659b074     https://github.com/kataras/jwt      \n                     00070920d0700b9                                              \n                     63fa545d6c                                                                                                                            \n uuid                cb32006e483f2a2     https://github.com/google/uuid       \n                     3230e24209cf185                                              \n                     c65b477dbf\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 96.79,
          "content": "# Happy New Year 🎅\n\nDear Iris Community,\n\nYou might have noticed a recent lull in activity on the Iris repository, but this silence has a purpose. For the past **6-7 months**, I've been working diligently on the next major release of Iris, fully embracing **Generics** and introducing a suite of **new features**, **enhancements**, and **optimizations**. My **8 years** of Go experience guide this evolution, ensuring Iris grows with your needs.\n\nAs we welcome **2025**, let's unite in peace, celebrate good health, and look forward to brighter horizons. Thank you for your continued support and patience. May this year bring new beginnings for us all.\n\nWarm regards,<br/>\nGerasimos (Makis) Maropoulos\n\n<!--<h1><img width=\"24\" height=\"25\" src =\"https://www.iris-go.com/images/logo-new-lq-45.png\"/> News</h1>\n\n Iris version **12.2.0** has been [released](HISTORY.md#sa-11-march-2023--v1220)! As always, the latest version of Iris comes with the promise of lifetime active maintenance.\n\nTry the official [Iris Command Line Interface](https://github.com/kataras/iris-cli) today! -->\n\n# <a href=\"https://iris-go.com\"><img src=\"https://iris-go.com/images/logo-new-lq-45.png\"></a> Iris Web Framework <a href=\"README_GR.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-greece.svg\" /> <a href=\"README_JA.md\"><img width=\"20px\" height=\"20px\" src=\"https://iris-go.com/images/flag-japan.svg\" /></a> </a> <a href=\"README_FR.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-france.svg\" /></a> <a href=\"README_ZH_HANT.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-taiwan.svg\" /></a> <a href=\"README_ZH_HANS.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-china.svg\" /></a> <a href=\"README_ES.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-spain.png\" /></a> <a href=\"README_FA.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-iran.svg\" /></a> <a href=\"README_RU.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-russia.svg\" /></a> <a href=\"README_KO.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-south-korea.svg?v=12\" /></a> <a href=\"README_PT_BR.md\"><img width=\"20px\" height=\"20px\" src=\"https://iris-go.com/images/flag-brazil.svg\" /></a> <a href=\"README_VN.md\"><img width=\"20px\" height=\"20px\" src=\"https://iris-go.com/images/flag-vietnam.svg\" /></a>\n\n[![build status](https://img.shields.io/github/actions/workflow/status/kataras/iris/ci.yml?branch=main&style=for-the-badge)](https://github.com/kataras/iris/actions/workflows/ci.yml) [![view examples](https://img.shields.io/badge/examples%20-285-a83adf.svg?style=for-the-badge&logo=go)](https://github.com/kataras/iris/tree/main/_examples) [![chat](https://img.shields.io/gitter/room/iris_go/community.svg?color=cc2b5e&logo=gitter&style=for-the-badge)](https://gitter.im/iris_go/community) <!--[![FOSSA Status](https://img.shields.io/badge/LICENSE%20SCAN-PASSING❤️-CD2956?style=for-the-badge&logo=fossa)](https://app.fossa.io/projects/git%2Bgithub.com%2Fkataras%2Firis?ref=badge_shield)--> [![donate](https://img.shields.io/badge/support-Iris-blue.svg?style=for-the-badge&logo=paypal)](https://iris-go.com/donate) <!--[![report card](https://img.shields.io/badge/report%20card-a%2B-ff3333.svg?style=for-the-badge)](https://goreportcard.com/report/github.com/kataras/iris)--><!--[![godocs](https://img.shields.io/badge/go-%20docs-488AC7.svg?style=for-the-badge)](https://pkg.go.dev/github.com/kataras/iris/v12@v12.2.11)--> <!-- [![release](https://img.shields.io/badge/release%20-v12.0-0077b3.svg?style=for-the-badge)](https://github.com/kataras/iris/releases) -->\n\nIris is a fast, simple yet fully featured and very efficient web framework for Go.\n\nIt provides a beautifully expressive and easy to use foundation for your next website or API.\n\nLearn what [others saying about Iris](https://www.iris-go.com/#review) and **[star](https://github.com/kataras/iris/stargazers)** this open-source project to support its potentials.\n\n[![](https://iris-go.com/images/reviews.gif)](https://iris-go.com/testimonials/)\n\n[![Benchmarks: Jul 18, 2020 at 10:46am (UTC)](https://iris-go.com/images/benchmarks.svg)](https://github.com/kataras/server-benchmarks)\n\n```go\npackage main\n\nimport \"github.com/kataras/iris/v12\"\n\nfunc main() {\n  app := iris.New()\n  app.Use(iris.Compression)\n\n  app.Get(\"/\", func(ctx iris.Context) {\n    ctx.HTML(\"Hello <strong>%s</strong>!\", \"World\")\n  })\n\n  app.Listen(\":8080\")\n}\n```\n\n<!-- <details><summary>More with simple Handler</summary>\n\n```go\npackage main\n\nimport \"github.com/kataras/iris/v12\"\n\ntype (\n  request struct {\n    Firstname string `json:\"firstname\"`\n    Lastname  string `json:\"lastname\"`\n  }\n\n  response struct {\n    ID      string `json:\"id\"`\n    Message string `json:\"message\"`\n  }\n)\n\nfunc main() {\n  app := iris.New()\n  app.Handle(\"PUT\", \"/users/{id:uuid}\", updateUser)\n  app.Listen(\":8080\")\n}\n\nfunc updateUser(ctx iris.Context) {\n  id := ctx.Params().Get(\"id\")\n\n  var req request\n  if err := ctx.ReadJSON(&req); err != nil {\n    ctx.StopWithError(iris.StatusBadRequest, err)\n    return\n  }\n\n  resp := response{\n    ID:      id,\n    Message: req.Firstname + \" updated successfully\",\n  }\n  ctx.JSON(resp)\n}\n```\n\n> Read the [routing examples](https://github.com/kataras/iris/blob/main/_examples/routing) for more!\n\n</details>\n\n<details><summary>Handler with custom input and output arguments</summary>\n\n[![https://github.com/kataras/iris/blob/main/_examples/dependency-injection/basic/main.go](https://user-images.githubusercontent.com/22900943/105253731-b8db6d00-5b88-11eb-90c1-0c92a5581c86.png)](https://twitter.com/iris_framework/status/1234783655408668672)\n\n> Interesting? Read the [examples](https://github.com/kataras/iris/blob/main/_examples/dependency-injection).\n\n</details>\n\n<details><summary>Party Controller (NEW)</summary>\n\n> Head over to the [full running example](https://github.com/kataras/iris/blob/main/_examples/routing/party-controller)!\n\n</details>\n\n<details><summary>MVC</summary>\n\n```go\npackage main\n\nimport (\n  \"github.com/kataras/iris/v12\"\n  \"github.com/kataras/iris/v12/mvc\"\n)\n\ntype (\n  request struct {\n    Firstname string `json:\"firstname\"`\n    Lastname  string `json:\"lastname\"`\n  }\n\n  response struct {\n    ID      uint64 `json:\"id\"`\n    Message string `json:\"message\"`\n  }\n)\n\nfunc main() {\n  app := iris.New()\n  mvc.Configure(app.Party(\"/users\"), configureMVC)\n  app.Listen(\":8080\")\n}\n\nfunc configureMVC(app *mvc.Application) {\n  app.Handle(new(userController))\n}\n\ntype userController struct {\n  // [...dependencies]\n}\n\nfunc (c *userController) PutBy(id uint64, req request) response {\n  return response{\n    ID:      id,\n    Message: req.Firstname + \" updated successfully\",\n  }\n}\n```\n\nWant to see more? Navigate through [mvc examples](_examples/mvc)!\n</details>\n\n\n<details><summary>API Guide <strong>HOT</strong></summary>\n\n```go\npackage main\n\nimport (\n  // [other packages...]\n\n  \"github.com/kataras/iris/v12\"\n)\n\nfunc main() {\n  iris.NewGuide().\n    AllowOrigin(\"*\").\n    Compression(true).\n    Health(true, \"development\", \"kataras\").\n    Timeout(0, 20*time.Second, 20*time.Second).\n    Middlewares(basicauth.New(...)).\n    Services(\n        // NewDatabase(),\n        // NewPostgresRepositoryRegistry,\n        // NewUserService,\n    ).\n    API(\"/users\", new(UsersAPI)).\n    Listen(\":80\")\n}\n```\n\n</details>\n\n<br/>\n\n-->\n\nAs one [Go developer](https://twitter.com/dkuye/status/1532087942696554497) once said, **Iris got you covered all-round and standing strong over the years**.\n\nSome of the features Iris offers:\n\n* HTTP/2 (Push, even Embedded data)\n* Middleware (Accesslog, Basicauth, CORS, gRPC, Anti-Bot hCaptcha, JWT, MethodOverride, ModRevision, Monitor, PPROF, Ratelimit, Anti-Bot reCaptcha, Recovery, RequestID, Rewrite)\n* API Versioning\n* Model-View-Controller\n* Websockets\n* gRPC\n* Auto-HTTPS\n* Builtin support for ngrok to put your app on the internet, the fastest way\n* Unique Router with dynamic path as parameter with standard types like :uuid, :string, :int... and the ability to create your own\n* Compression\n* View Engines (HTML, Django, Handlebars, Pug/Jade and more)\n* Create your own File Server and host your own WebDAV server\n* Cache\n* Localization (i18n, sitemap)\n* Sessions\n* Rich Responses (HTML, Text, Markdown, XML, YAML, Binary, JSON, JSONP, Protocol Buffers, MessagePack, Content Negotiation, Streaming, Server-Sent Events and more)\n* Response Compression (gzip, deflate, brotli, snappy, s2)\n* Rich Requests (Bind URL Query, Headers, Form, Text, XML, YAML, Binary, JSON, Validation, Protocol Buffers, MessagePack and more)\n* Dependency Injection (MVC, Handlers, API Routers)\n* Testing Suite\n* And the most important... you get fast answers and support from the 1st day until now - that's six full years!\n\n## 👑 <a href=\"https://iris-go.com/donate\">Supporters</a>\n\nWith your help, we can improve Open Source web development for everyone!\n\n<p>\n  <a href=\"https://github.com/getsentry\"><img src=\"https://avatars1.githubusercontent.com/u/1396951?v=4\" alt=\"getsentry\" title=\"getsentry\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/github\"><img src=\"https://avatars1.githubusercontent.com/u/9919?v=4\" alt=\"github\" title=\"github\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/lensesio\"><img src=\"https://avatars1.githubusercontent.com/u/11728472?v=4\" alt=\"lensesio\" title=\"lensesio\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/thepunterbot\"><img src=\"https://avatars1.githubusercontent.com/u/111136029?v=4\" alt=\"thepunterbot\" title=\"thepunterbot\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/h4rdc0m\"><img src=\"https://avatars1.githubusercontent.com/u/682256?v=4\" alt=\"h4rdc0m\" title=\"h4rdc0m\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/draFWM\"><img src=\"https://avatars1.githubusercontent.com/u/5765340?v=4\" alt=\"draFWM\" title=\"draFWM\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/gf3\"><img src=\"https://avatars1.githubusercontent.com/u/18397?v=4\" alt=\"gf3\" title=\"gf3\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/trading-peter\"><img src=\"https://avatars1.githubusercontent.com/u/11567985?v=4\" alt=\"trading-peter\" title=\"trading-peter\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/AlbinoGeek\"><img src=\"https://avatars1.githubusercontent.com/u/1910461?v=4\" alt=\"AlbinoGeek\" title=\"AlbinoGeek\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/basilarchia\"><img src=\"https://avatars1.githubusercontent.com/u/926033?v=4\" alt=\"basilarchia\" title=\"basilarchia\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/sumjoe\"><img src=\"https://avatars1.githubusercontent.com/u/32655210?v=4\" alt=\"sumjoe\" title=\"sumjoe\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/simpleittools\"><img src=\"https://avatars1.githubusercontent.com/u/42871067?v=4\" alt=\"simpleittools\" title=\"simpleittools\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/xiaozhuai\"><img src=\"https://avatars1.githubusercontent.com/u/4773701?v=4\" alt=\"xiaozhuai\" title=\"xiaozhuai\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Remydeme\"><img src=\"https://avatars1.githubusercontent.com/u/22757039?v=4\" alt=\"Remydeme\" title=\"Remydeme\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/celsosz\"><img src=\"https://avatars1.githubusercontent.com/u/3466493?v=4\" alt=\"celsosz\" title=\"celsosz\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/linxcoder\"><img src=\"https://avatars1.githubusercontent.com/u/1050802?v=4\" alt=\"linxcoder\" title=\"linxcoder\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/jnelle\"><img src=\"https://avatars1.githubusercontent.com/u/36324542?v=4\" alt=\"jnelle\" title=\"jnelle\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/TechMaster\"><img src=\"https://avatars1.githubusercontent.com/u/1491686?v=4\" alt=\"TechMaster\" title=\"TechMaster\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/janwebdev\"><img src=\"https://avatars1.githubusercontent.com/u/6725905?v=4\" alt=\"janwebdev\" title=\"janwebdev\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/altafino\"><img src=\"https://avatars1.githubusercontent.com/u/24539467?v=4\" alt=\"altafino\" title=\"altafino\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/jakoubek\"><img src=\"https://avatars1.githubusercontent.com/u/179566?v=4\" alt=\"jakoubek\" title=\"jakoubek\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/alekperos\"><img src=\"https://avatars1.githubusercontent.com/u/683938?v=4\" alt=\"alekperos\" title=\"alekperos\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/day0ng\"><img src=\"https://avatars1.githubusercontent.com/u/15760418?v=4\" alt=\"day0ng\" title=\"day0ng\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/hengestone\"><img src=\"https://avatars1.githubusercontent.com/u/362587?v=4\" alt=\"hengestone\" title=\"hengestone\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/thomasfr\"><img src=\"https://avatars1.githubusercontent.com/u/287432?v=4\" alt=\"thomasfr\" title=\"thomasfr\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/code-chimp\"><img src=\"https://avatars1.githubusercontent.com/u/50490?v=4\" alt=\"code-chimp\" title=\"code-chimp\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/CetinBasoz\"><img src=\"https://avatars1.githubusercontent.com/u/3152637?v=4\" alt=\"CetinBasoz\" title=\"CetinBasoz\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/International\"><img src=\"https://avatars1.githubusercontent.com/u/1022918?v=4\" alt=\"International\" title=\"International\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Juanses\"><img src=\"https://avatars1.githubusercontent.com/u/6137970?v=4\" alt=\"Juanses\" title=\"Juanses\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/SometimesMage\"><img src=\"https://avatars1.githubusercontent.com/u/1435257?v=4\" alt=\"SometimesMage\" title=\"SometimesMage\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/ansrivas\"><img src=\"https://avatars1.githubusercontent.com/u/1695056?v=4\" alt=\"ansrivas\" title=\"ansrivas\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/boreevyuri\"><img src=\"https://avatars1.githubusercontent.com/u/10973128?v=4\" alt=\"boreevyuri\" title=\"boreevyuri\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/brentwilson\"><img src=\"https://avatars1.githubusercontent.com/u/11813757?v=4\" alt=\"brentwilson\" title=\"brentwilson\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/camilbinas\"><img src=\"https://avatars1.githubusercontent.com/u/42443219?v=4\" alt=\"camilbinas\" title=\"camilbinas\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/ekobayong\"><img src=\"https://avatars1.githubusercontent.com/u/878170?v=4\" alt=\"ekobayong\" title=\"ekobayong\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/lexrus\"><img src=\"https://avatars1.githubusercontent.com/u/219689?v=4\" alt=\"lexrus\" title=\"lexrus\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/li3p\"><img src=\"https://avatars1.githubusercontent.com/u/55519?v=4\" alt=\"li3p\" title=\"li3p\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/madhu72\"><img src=\"https://avatars1.githubusercontent.com/u/10324127?v=4\" alt=\"madhu72\" title=\"madhu72\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/mosorize\"><img src=\"https://avatars1.githubusercontent.com/u/107021151?v=4\" alt=\"mosorize\" title=\"mosorize\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/se77en\"><img src=\"https://avatars1.githubusercontent.com/u/1468284?v=4\" alt=\"se77en\" title=\"se77en\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/tstangenberg\"><img src=\"https://avatars1.githubusercontent.com/u/736160?v=4\" alt=\"tstangenberg\" title=\"tstangenberg\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/vincent-li\"><img src=\"https://avatars1.githubusercontent.com/u/765470?v=4\" alt=\"vincent-li\" title=\"vincent-li\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/DavidShaw\"><img src=\"https://avatars1.githubusercontent.com/u/356970?v=4\" alt=\"DavidShaw\" title=\"DavidShaw\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/sascha11110\"><img src=\"https://avatars1.githubusercontent.com/u/15168372?v=4\" alt=\"sascha11110\" title=\"sascha11110\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/clichi2002\"><img src=\"https://avatars1.githubusercontent.com/u/5856121?v=4\" alt=\"clichi2002\" title=\"clichi2002\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/derReineke\"><img src=\"https://avatars1.githubusercontent.com/u/35681013?v=4\" alt=\"derReineke\" title=\"derReineke\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Sirisap22\"><img src=\"https://avatars1.githubusercontent.com/u/58851659?v=4\" alt=\"Sirisap22\" title=\"Sirisap22\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/primadi\"><img src=\"https://avatars1.githubusercontent.com/u/7625413?v=4\" alt=\"primadi\" title=\"primadi\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/agoncecelia\"><img src=\"https://avatars1.githubusercontent.com/u/10442924?v=4\" alt=\"agoncecelia\" title=\"agoncecelia\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/chrisliang12\"><img src=\"https://avatars1.githubusercontent.com/u/97201988?v=4\" alt=\"chrisliang12\" title=\"chrisliang12\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/zyu\"><img src=\"https://avatars1.githubusercontent.com/u/807397?v=4\" alt=\"zyu\" title=\"zyu\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/hobysmith\"><img src=\"https://avatars1.githubusercontent.com/u/6063391?v=4\" alt=\"hobysmith\" title=\"hobysmith\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/pluja\"><img src=\"https://avatars1.githubusercontent.com/u/64632615?v=4\" alt=\"pluja\" title=\"pluja\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/antonio-pedrazzini\"><img src=\"https://avatars1.githubusercontent.com/u/83503326?v=4\" alt=\"antonio-pedrazzini\" title=\"antonio-pedrazzini\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/clacroix\"><img src=\"https://avatars1.githubusercontent.com/u/611064?v=4\" alt=\"clacroix\" title=\"clacroix\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/njeff3\"><img src=\"https://avatars1.githubusercontent.com/u/9838120?v=4\" alt=\"njeff3\" title=\"njeff3\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/ixalender\"><img src=\"https://avatars1.githubusercontent.com/u/877376?v=4\" alt=\"ixalender\" title=\"ixalender\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/mubariz-ahmed\"><img src=\"https://avatars1.githubusercontent.com/u/18215455?v=4\" alt=\"mubariz-ahmed\" title=\"mubariz-ahmed\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Cesar\"><img src=\"https://avatars1.githubusercontent.com/u/1581870?v=4\" alt=\"Cesar\" title=\"Cesar\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/th31nitiate\"><img src=\"https://avatars1.githubusercontent.com/u/14749635?v=4\" alt=\"th31nitiate\" title=\"th31nitiate\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/stgrosshh\"><img src=\"https://avatars1.githubusercontent.com/u/8356082?v=4\" alt=\"stgrosshh\" title=\"stgrosshh\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Didainius\"><img src=\"https://avatars1.githubusercontent.com/u/15804230?v=4\" alt=\"Didainius\" title=\"Didainius\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/DmarshalTU\"><img src=\"https://avatars1.githubusercontent.com/u/59089266?v=4\" alt=\"DmarshalTU\" title=\"DmarshalTU\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/IwateKyle\"><img src=\"https://avatars1.githubusercontent.com/u/658799?v=4\" alt=\"IwateKyle\" title=\"IwateKyle\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Little-YangYang\"><img src=\"https://avatars1.githubusercontent.com/u/10755202?v=4\" alt=\"Little-YangYang\" title=\"Little-YangYang\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Major2828\"><img src=\"https://avatars1.githubusercontent.com/u/19783402?v=4\" alt=\"Major2828\" title=\"Major2828\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/MatejLach\"><img src=\"https://avatars1.githubusercontent.com/u/531930?v=4\" alt=\"MatejLach\" title=\"MatejLach\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/amritpal042\"><img src=\"https://avatars1.githubusercontent.com/u/60704162?v=4\" alt=\"amritpal042\" title=\"amritpal042\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/andrefiorot\"><img src=\"https://avatars1.githubusercontent.com/u/13743098?v=4\" alt=\"andrefiorot\" title=\"andrefiorot\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/boomhut\"><img src=\"https://avatars1.githubusercontent.com/u/56619040?v=4\" alt=\"boomhut\" title=\"boomhut\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/cshum\"><img src=\"https://avatars1.githubusercontent.com/u/293790?v=4\" alt=\"cshum\" title=\"cshum\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/dtrifonov\"><img src=\"https://avatars1.githubusercontent.com/u/1520118?v=4\" alt=\"dtrifonov\" title=\"dtrifonov\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/gadokrisztian\"><img src=\"https://avatars1.githubusercontent.com/u/85160134?v=4\" alt=\"gadokrisztian\" title=\"gadokrisztian\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/geordee\"><img src=\"https://avatars1.githubusercontent.com/u/83303?v=4\" alt=\"geordee\" title=\"geordee\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/guanting112\"><img src=\"https://avatars1.githubusercontent.com/u/11306350?v=4\" alt=\"guanting112\" title=\"guanting112\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/iantuan\"><img src=\"https://avatars1.githubusercontent.com/u/4869968?v=4\" alt=\"iantuan\" title=\"iantuan\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/ichenhe\"><img src=\"https://avatars1.githubusercontent.com/u/10266066?v=4\" alt=\"ichenhe\" title=\"ichenhe\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/rodrigoghm\"><img src=\"https://avatars1.githubusercontent.com/u/66917643?v=4\" alt=\"rodrigoghm\" title=\"rodrigoghm\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/icibiri\"><img src=\"https://avatars1.githubusercontent.com/u/32684966?v=4\" alt=\"icibiri\" title=\"icibiri\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/jewe11er\"><img src=\"https://avatars1.githubusercontent.com/u/47153959?v=4\" alt=\"jewe11er\" title=\"jewe11er\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/jfloresremar\"><img src=\"https://avatars1.githubusercontent.com/u/10441071?v=4\" alt=\"jfloresremar\" title=\"jfloresremar\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/jingtianfeng\"><img src=\"https://avatars1.githubusercontent.com/u/19503202?v=4\" alt=\"jingtianfeng\" title=\"jingtianfeng\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/kilarusravankumar\"><img src=\"https://avatars1.githubusercontent.com/u/13055113?v=4\" alt=\"kilarusravankumar\" title=\"kilarusravankumar\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/leandrobraga\"><img src=\"https://avatars1.githubusercontent.com/u/506699?v=4\" alt=\"leandrobraga\" title=\"leandrobraga\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/lfbos\"><img src=\"https://avatars1.githubusercontent.com/u/5703286?v=4\" alt=\"lfbos\" title=\"lfbos\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/lpintes\"><img src=\"https://avatars1.githubusercontent.com/u/2546783?v=4\" alt=\"lpintes\" title=\"lpintes\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/macropas\"><img src=\"https://avatars1.githubusercontent.com/u/7488502?v=4\" alt=\"macropas\" title=\"macropas\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/marcmmx\"><img src=\"https://avatars1.githubusercontent.com/u/7670546?v=4\" alt=\"marcmmx\" title=\"marcmmx\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/mark2b\"><img src=\"https://avatars1.githubusercontent.com/u/539063?v=4\" alt=\"mark2b\" title=\"mark2b\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/miguel-devs\"><img src=\"https://avatars1.githubusercontent.com/u/89543510?v=4\" alt=\"miguel-devs\" title=\"miguel-devs\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/mihado\"><img src=\"https://avatars1.githubusercontent.com/u/940981?v=4\" alt=\"mihado\" title=\"mihado\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/mmckeen75\"><img src=\"https://avatars1.githubusercontent.com/u/49529489?v=4\" alt=\"mmckeen75\" title=\"mmckeen75\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/narven\"><img src=\"https://avatars1.githubusercontent.com/u/123594?v=4\" alt=\"narven\" title=\"narven\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/odas0r\"><img src=\"https://avatars1.githubusercontent.com/u/32167770?v=4\" alt=\"odas0r\" title=\"odas0r\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/olaf-lexemo\"><img src=\"https://avatars1.githubusercontent.com/u/51406599?v=4\" alt=\"olaf-lexemo\" title=\"olaf-lexemo\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/pitexplore\"><img src=\"https://avatars1.githubusercontent.com/u/11956562?v=4\" alt=\"pitexplore\" title=\"pitexplore\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/pr123\"><img src=\"https://avatars1.githubusercontent.com/u/23333176?v=4\" alt=\"pr123\" title=\"pr123\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/rsousacode\"><img src=\"https://avatars1.githubusercontent.com/u/34067397?v=4\" alt=\"rsousacode\" title=\"rsousacode\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/sankethpb\"><img src=\"https://avatars1.githubusercontent.com/u/16034868?v=4\" alt=\"sankethpb\" title=\"sankethpb\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/wixregiga\"><img src=\"https://avatars1.githubusercontent.com/u/30182903?v=4\" alt=\"wixregiga\" title=\"wixregiga\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/GeorgeFourikis\"><img src=\"https://avatars1.githubusercontent.com/u/17906313?v=4\" alt=\"GeorgeFourikis\" title=\"GeorgeFourikis\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/saz59\"><img src=\"https://avatars1.githubusercontent.com/u/9706793?v=4\" alt=\"saz59\" title=\"saz59\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/shadowfiga\"><img src=\"https://avatars1.githubusercontent.com/u/42721390?v=4\" alt=\"shadowfiga\" title=\"shadowfiga\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/siriushaha\"><img src=\"https://avatars1.githubusercontent.com/u/7924311?v=4\" alt=\"siriushaha\" title=\"siriushaha\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/skurtz97\"><img src=\"https://avatars1.githubusercontent.com/u/71720714?v=4\" alt=\"skurtz97\" title=\"skurtz97\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/srinivasganti\"><img src=\"https://avatars1.githubusercontent.com/u/2057165?v=4\" alt=\"srinivasganti\" title=\"srinivasganti\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/syrm\"><img src=\"https://avatars1.githubusercontent.com/u/155406?v=4\" alt=\"syrm\" title=\"syrm\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/tuhao1020\"><img src=\"https://avatars1.githubusercontent.com/u/26807520?v=4\" alt=\"tuhao1020\" title=\"tuhao1020\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/BlackHole1\"><img src=\"https://avatars1.githubusercontent.com/u/8198408?v=4\" alt=\"BlackHole1\" title=\"BlackHole1\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/L-M-Sherlock\"><img src=\"https://avatars1.githubusercontent.com/u/32575846?v=4\" alt=\"L-M-Sherlock\" title=\"L-M-Sherlock\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/claudemuller\"><img src=\"https://avatars1.githubusercontent.com/u/8104894?v=4\" alt=\"claudemuller\" title=\"claudemuller\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/keymanye\"><img src=\"https://avatars1.githubusercontent.com/u/9495010?v=4\" alt=\"keymanye\" title=\"keymanye\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/wahyuief\"><img src=\"https://avatars1.githubusercontent.com/u/20138856?v=4\" alt=\"wahyuief\" title=\"wahyuief\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/xuyan2018\"><img src=\"https://avatars1.githubusercontent.com/u/38712502?v=4\" alt=\"xuyan2018\" title=\"xuyan2018\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/xvalen\"><img src=\"https://avatars1.githubusercontent.com/u/2307513?v=4\" alt=\"xvalen\" title=\"xvalen\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/xytis\"><img src=\"https://avatars1.githubusercontent.com/u/78025?v=4\" alt=\"xytis\" title=\"xytis\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/ElNovi\"><img src=\"https://avatars1.githubusercontent.com/u/14199592?v=4\" alt=\"ElNovi\" title=\"ElNovi\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/IpastorSan\"><img src=\"https://avatars1.githubusercontent.com/u/54788305?v=4\" alt=\"IpastorSan\" title=\"IpastorSan\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/KKP4\"><img src=\"https://avatars1.githubusercontent.com/u/24271790?v=4\" alt=\"KKP4\" title=\"KKP4\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Lernakow\"><img src=\"https://avatars1.githubusercontent.com/u/46821665?v=4\" alt=\"Lernakow\" title=\"Lernakow\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/ernestocolombo\"><img src=\"https://avatars1.githubusercontent.com/u/485538?v=4\" alt=\"ernestocolombo\" title=\"ernestocolombo\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/francisstephan\"><img src=\"https://avatars1.githubusercontent.com/u/15109897?v=4\" alt=\"francisstephan\" title=\"francisstephan\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/pixelheresy\"><img src=\"https://avatars1.githubusercontent.com/u/2491944?v=4\" alt=\"pixelheresy\" title=\"pixelheresy\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/rcapraro\"><img src=\"https://avatars1.githubusercontent.com/u/245490?v=4\" alt=\"rcapraro\" title=\"rcapraro\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/soiestad\"><img src=\"https://avatars1.githubusercontent.com/u/9642036?v=4\" alt=\"soiestad\" title=\"soiestad\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/spkarason\"><img src=\"https://avatars1.githubusercontent.com/u/100413497?v=4\" alt=\"spkarason\" title=\"spkarason\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/thanasolykos\"><img src=\"https://avatars1.githubusercontent.com/u/35801329?v=4\" alt=\"thanasolykos\" title=\"thanasolykos\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/ukitzmann\"><img src=\"https://avatars1.githubusercontent.com/u/153834?v=4\" alt=\"ukitzmann\" title=\"ukitzmann\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/DanielKirkwood\"><img src=\"https://avatars1.githubusercontent.com/u/22101308?v=4\" alt=\"DanielKirkwood\" title=\"DanielKirkwood\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/colinf\"><img src=\"https://avatars1.githubusercontent.com/u/530815?v=4\" alt=\"colinf\" title=\"colinf\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/simonproctor\"><img src=\"https://avatars1.githubusercontent.com/u/203916?v=4\" alt=\"simonproctor\" title=\"simonproctor\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/FernandoLangOFC\"><img src=\"https://avatars1.githubusercontent.com/u/84889316?v=4\" alt=\"FernandoLangOFC\" title=\"FernandoLangOFC\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Firdavs9512\"><img src=\"https://avatars1.githubusercontent.com/u/102187486?v=4\" alt=\"Firdavs9512\" title=\"Firdavs9512\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Flammable-Duck\"><img src=\"https://avatars1.githubusercontent.com/u/59183206?v=4\" alt=\"Flammable-Duck\" title=\"Flammable-Duck\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Gepetdo\"><img src=\"https://avatars1.githubusercontent.com/u/5978138?v=4\" alt=\"Gepetdo\" title=\"Gepetdo\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Hongjian0619\"><img src=\"https://avatars1.githubusercontent.com/u/25712119?v=4\" alt=\"Hongjian0619\" title=\"Hongjian0619\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/JoeD\"><img src=\"https://avatars1.githubusercontent.com/u/247821?v=4\" alt=\"JoeD\" title=\"JoeD\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Jude-X\"><img src=\"https://avatars1.githubusercontent.com/u/66228813?v=4\" alt=\"Jude-X\" title=\"Jude-X\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Kartoffelbot\"><img src=\"https://avatars1.githubusercontent.com/u/130631591?v=4\" alt=\"Kartoffelbot\" title=\"Kartoffelbot\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/KevinZhouRafael\"><img src=\"https://avatars1.githubusercontent.com/u/16298046?v=4\" alt=\"KevinZhouRafael\" title=\"KevinZhouRafael\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/KrishManohar\"><img src=\"https://avatars1.githubusercontent.com/u/1992857?v=4\" alt=\"KrishManohar\" title=\"KrishManohar\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Laotanling\"><img src=\"https://avatars1.githubusercontent.com/u/28570289?v=4\" alt=\"Laotanling\" title=\"Laotanling\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Longf99999\"><img src=\"https://avatars1.githubusercontent.com/u/21210800?v=4\" alt=\"Longf99999\" title=\"Longf99999\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Lyansun\"><img src=\"https://avatars1.githubusercontent.com/u/17959642?v=4\" alt=\"Lyansun\" title=\"Lyansun\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/MihaiPopescu1985\"><img src=\"https://avatars1.githubusercontent.com/u/34679869?v=4\" alt=\"MihaiPopescu1985\" title=\"MihaiPopescu1985\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/TBNilles\"><img src=\"https://avatars1.githubusercontent.com/u/88231081?v=4\" alt=\"TBNilles\" title=\"TBNilles\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/ajanicij\"><img src=\"https://avatars1.githubusercontent.com/u/1755297?v=4\" alt=\"ajanicij\" title=\"ajanicij\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/aprinslo1\"><img src=\"https://avatars1.githubusercontent.com/u/711650?v=4\" alt=\"aprinslo1\" title=\"aprinslo1\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Mohammed8960\"><img src=\"https://avatars1.githubusercontent.com/u/5219371?v=4\" alt=\"Mohammed8960\" title=\"Mohammed8960\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/NA\"><img src=\"https://avatars1.githubusercontent.com/u/1600?v=4\" alt=\"NA\" title=\"NA\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Neulhan\"><img src=\"https://avatars1.githubusercontent.com/u/52434903?v=4\" alt=\"Neulhan\" title=\"Neulhan\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/kyoukhana\"><img src=\"https://avatars1.githubusercontent.com/u/756849?v=4\" alt=\"kyoukhana\" title=\"kyoukhana\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/spazzymoto\"><img src=\"https://avatars1.githubusercontent.com/u/2951012?v=4\" alt=\"spazzymoto\" title=\"spazzymoto\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/victorgrey\"><img src=\"https://avatars1.githubusercontent.com/u/207128?v=4\" alt=\"victorgrey\" title=\"victorgrey\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/ArishSultan\"><img src=\"https://avatars1.githubusercontent.com/u/31086233?v=4\" alt=\"ArishSultan\" title=\"ArishSultan\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/ehayun\"><img src=\"https://avatars1.githubusercontent.com/u/39870648?v=4\" alt=\"ehayun\" title=\"ehayun\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/kukaki\"><img src=\"https://avatars1.githubusercontent.com/u/4849535?v=4\" alt=\"kukaki\" title=\"kukaki\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/oshirokazuhide\"><img src=\"https://avatars1.githubusercontent.com/u/89958891?v=4\" alt=\"oshirokazuhide\" title=\"oshirokazuhide\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/t6tg\"><img src=\"https://avatars1.githubusercontent.com/u/33445861?v=4\" alt=\"t6tg\" title=\"t6tg\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/15189573255\"><img src=\"https://avatars1.githubusercontent.com/u/18551476?v=4\" alt=\"15189573255\" title=\"15189573255\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/AGPDev\"><img src=\"https://avatars1.githubusercontent.com/u/5721341?v=4\" alt=\"AGPDev\" title=\"AGPDev\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/AnatolyUA\"><img src=\"https://avatars1.githubusercontent.com/u/1446703?v=4\" alt=\"AnatolyUA\" title=\"AnatolyUA\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/AwsIT\"><img src=\"https://avatars1.githubusercontent.com/u/40926862?v=4\" alt=\"AwsIT\" title=\"AwsIT\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/NguyenPhuoc\"><img src=\"https://avatars1.githubusercontent.com/u/11747677?v=4\" alt=\"NguyenPhuoc\" title=\"NguyenPhuoc\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Oka00\"><img src=\"https://avatars1.githubusercontent.com/u/72302007?v=4\" alt=\"Oka00\" title=\"Oka00\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/PaddyFrenchman\"><img src=\"https://avatars1.githubusercontent.com/u/55139902?v=4\" alt=\"PaddyFrenchman\" title=\"PaddyFrenchman\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/RainerGevers\"><img src=\"https://avatars1.githubusercontent.com/u/32453861?v=4\" alt=\"RainerGevers\" title=\"RainerGevers\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Ramblestsad\"><img src=\"https://avatars1.githubusercontent.com/u/45003009?v=4\" alt=\"Ramblestsad\" title=\"Ramblestsad\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/SamuelNeves\"><img src=\"https://avatars1.githubusercontent.com/u/10797137?v=4\" alt=\"SamuelNeves\" title=\"SamuelNeves\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Scorpio69t\"><img src=\"https://avatars1.githubusercontent.com/u/24680141?v=4\" alt=\"Scorpio69t\" title=\"Scorpio69t\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Serissa4000\"><img src=\"https://avatars1.githubusercontent.com/u/122253262?v=4\" alt=\"Serissa4000\" title=\"Serissa4000\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/TianJIANG\"><img src=\"https://avatars1.githubusercontent.com/u/158459?v=4\" alt=\"TianJIANG\" title=\"TianJIANG\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Ubun1\"><img src=\"https://avatars1.githubusercontent.com/u/13261595?v=4\" alt=\"Ubun1\" title=\"Ubun1\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/WangYajun39\"><img src=\"https://avatars1.githubusercontent.com/u/27052258?v=4\" alt=\"WangYajun39\" title=\"WangYajun39\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/XinYoungCN\"><img src=\"https://avatars1.githubusercontent.com/u/18415580?v=4\" alt=\"XinYoungCN\" title=\"XinYoungCN\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/YukinaMochizuki\"><img src=\"https://avatars1.githubusercontent.com/u/26710554?v=4\" alt=\"YukinaMochizuki\" title=\"YukinaMochizuki\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/a112121788\"><img src=\"https://avatars1.githubusercontent.com/u/1457920?v=4\" alt=\"a112121788\" title=\"a112121788\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/acdias\"><img src=\"https://avatars1.githubusercontent.com/u/11966653?v=4\" alt=\"acdias\" title=\"acdias\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/aeonsthorn\"><img src=\"https://avatars1.githubusercontent.com/u/53945065?v=4\" alt=\"aeonsthorn\" title=\"aeonsthorn\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/agent3bood\"><img src=\"https://avatars1.githubusercontent.com/u/771902?v=4\" alt=\"agent3bood\" title=\"agent3bood\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/ajb-neodynamics-io\"><img src=\"https://avatars1.githubusercontent.com/u/115384296?v=4\" alt=\"ajb-neodynamics-io\" title=\"ajb-neodynamics-io\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/alessandromarotta\"><img src=\"https://avatars1.githubusercontent.com/u/17084152?v=4\" alt=\"alessandromarotta\" title=\"alessandromarotta\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/algobot76\"><img src=\"https://avatars1.githubusercontent.com/u/20016835?v=4\" alt=\"algobot76\" title=\"algobot76\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/algoflows\"><img src=\"https://avatars1.githubusercontent.com/u/65465380?v=4\" alt=\"algoflows\" title=\"algoflows\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/angelaahhu\"><img src=\"https://avatars1.githubusercontent.com/u/128401549?v=4\" alt=\"angelaahhu\" title=\"angelaahhu\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/anhxuanpham\"><img src=\"https://avatars1.githubusercontent.com/u/101174797?v=4\" alt=\"anhxuanpham\" title=\"anhxuanpham\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/annieruci\"><img src=\"https://avatars1.githubusercontent.com/u/49377699?v=4\" alt=\"annieruci\" title=\"annieruci\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/antoniejiao\"><img src=\"https://avatars1.githubusercontent.com/u/17450960?v=4\" alt=\"antoniejiao\" title=\"antoniejiao\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/artman328\"><img src=\"https://avatars1.githubusercontent.com/u/5415792?v=4\" alt=\"artman328\" title=\"artman328\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/b2cbd\"><img src=\"https://avatars1.githubusercontent.com/u/6870050?v=4\" alt=\"b2cbd\" title=\"b2cbd\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/baoch254\"><img src=\"https://avatars1.githubusercontent.com/u/74555344?v=4\" alt=\"baoch254\" title=\"baoch254\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/bastengao\"><img src=\"https://avatars1.githubusercontent.com/u/785335?v=4\" alt=\"bastengao\" title=\"bastengao\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/beytullahakyuz\"><img src=\"https://avatars1.githubusercontent.com/u/10866179?v=4\" alt=\"beytullahakyuz\" title=\"beytullahakyuz\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/bjoroen\"><img src=\"https://avatars1.githubusercontent.com/u/31513139?v=4\" alt=\"bjoroen\" title=\"bjoroen\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/blackHoleNgc1277\"><img src=\"https://avatars1.githubusercontent.com/u/41342763?v=4\" alt=\"blackHoleNgc1277\" title=\"blackHoleNgc1277\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/bunnycodego\"><img src=\"https://avatars1.githubusercontent.com/u/81451316?v=4\" alt=\"bunnycodego\" title=\"bunnycodego\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/carlos-enginner\"><img src=\"https://avatars1.githubusercontent.com/u/59775876?v=4\" alt=\"carlos-enginner\" title=\"carlos-enginner\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/centratelemedia\"><img src=\"https://avatars1.githubusercontent.com/u/99481333?v=4\" alt=\"centratelemedia\" title=\"centratelemedia\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/chrismalek\"><img src=\"https://avatars1.githubusercontent.com/u/9403?v=4\" alt=\"chrismalek\" title=\"chrismalek\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/civicwar\"><img src=\"https://avatars1.githubusercontent.com/u/1858104?v=4\" alt=\"civicwar\" title=\"civicwar\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/cnzhangquan\"><img src=\"https://avatars1.githubusercontent.com/u/5462876?v=4\" alt=\"cnzhangquan\" title=\"cnzhangquan\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/cuong48d\"><img src=\"https://avatars1.githubusercontent.com/u/456049?v=4\" alt=\"cuong48d\" title=\"cuong48d\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/damiensy\"><img src=\"https://avatars1.githubusercontent.com/u/147525?v=4\" alt=\"damiensy\" title=\"damiensy\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/danlanxiaohei\"><img src=\"https://avatars1.githubusercontent.com/u/3272530?v=4\" alt=\"danlanxiaohei\" title=\"danlanxiaohei\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/dextercai\"><img src=\"https://avatars1.githubusercontent.com/u/12377850?v=4\" alt=\"dextercai\" title=\"dextercai\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/dfaugusto\"><img src=\"https://avatars1.githubusercontent.com/u/1554920?v=4\" alt=\"dfaugusto\" title=\"dfaugusto\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/dkzhang\"><img src=\"https://avatars1.githubusercontent.com/u/1091431?v=4\" alt=\"dkzhang\" title=\"dkzhang\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/dloprodu\"><img src=\"https://avatars1.githubusercontent.com/u/664947?v=4\" alt=\"dloprodu\" title=\"dloprodu\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/donam-givita\"><img src=\"https://avatars1.githubusercontent.com/u/107529604?v=4\" alt=\"donam-givita\" title=\"donam-givita\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/dph0899\"><img src=\"https://avatars1.githubusercontent.com/u/124650663?v=4\" alt=\"dph0899\" title=\"dph0899\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/dvitale\"><img src=\"https://avatars1.githubusercontent.com/u/17982034?v=4\" alt=\"dvitale\" title=\"dvitale\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/ec0629\"><img src=\"https://avatars1.githubusercontent.com/u/7861125?v=4\" alt=\"ec0629\" title=\"ec0629\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/edwindna2\"><img src=\"https://avatars1.githubusercontent.com/u/5441354?v=4\" alt=\"edwindna2\" title=\"edwindna2\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/ekiyooka\"><img src=\"https://avatars1.githubusercontent.com/u/44221187?v=4\" alt=\"ekiyooka\" title=\"ekiyooka\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/ekofedriyanto\"><img src=\"https://avatars1.githubusercontent.com/u/1669439?v=4\" alt=\"ekofedriyanto\" title=\"ekofedriyanto\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/eli-yip\"><img src=\"https://avatars1.githubusercontent.com/u/40079533?v=4\" alt=\"eli-yip\" title=\"eli-yip\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/eljefedelrodeodeljefe\"><img src=\"https://avatars1.githubusercontent.com/u/3899684?v=4\" alt=\"eljefedelrodeodeljefe\" title=\"eljefedelrodeodeljefe\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/fenriz07\"><img src=\"https://avatars1.githubusercontent.com/u/9199380?v=4\" alt=\"fenriz07\" title=\"fenriz07\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/ffelipelimao\"><img src=\"https://avatars1.githubusercontent.com/u/28612817?v=4\" alt=\"ffelipelimao\" title=\"ffelipelimao\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/frenchmajesty\"><img src=\"https://avatars1.githubusercontent.com/u/24761660?v=4\" alt=\"frenchmajesty\" title=\"frenchmajesty\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/gastropulgite\"><img src=\"https://avatars1.githubusercontent.com/u/85067528?v=4\" alt=\"gastropulgite\" title=\"gastropulgite\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/geGao123\"><img src=\"https://avatars1.githubusercontent.com/u/6398228?v=4\" alt=\"geGao123\" title=\"geGao123\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/globalflea\"><img src=\"https://avatars1.githubusercontent.com/u/127675?v=4\" alt=\"globalflea\" title=\"globalflea\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/gloudx\"><img src=\"https://avatars1.githubusercontent.com/u/6920756?v=4\" alt=\"gloudx\" title=\"gloudx\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/gnosthi\"><img src=\"https://avatars1.githubusercontent.com/u/17650528?v=4\" alt=\"gnosthi\" title=\"gnosthi\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/gogoswift\"><img src=\"https://avatars1.githubusercontent.com/u/14092975?v=4\" alt=\"gogoswift\" title=\"gogoswift\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/goten002\"><img src=\"https://avatars1.githubusercontent.com/u/5025060?v=4\" alt=\"goten002\" title=\"goten002\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/guanzi008\"><img src=\"https://avatars1.githubusercontent.com/u/20619190?v=4\" alt=\"guanzi008\" title=\"guanzi008\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/hdezoscar93\"><img src=\"https://avatars1.githubusercontent.com/u/21270107?v=4\" alt=\"hdezoscar93\" title=\"hdezoscar93\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/hieungm\"><img src=\"https://avatars1.githubusercontent.com/u/85067528?v=4\" alt=\"hieungm\" title=\"hieungm\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/hieunmg\"><img src=\"https://avatars1.githubusercontent.com/u/85067528?v=4\" alt=\"hieunmg\" title=\"hieunmg\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/homerious\"><img src=\"https://avatars1.githubusercontent.com/u/22523525?v=4\" alt=\"homerious\" title=\"homerious\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/hzxd\"><img src=\"https://avatars1.githubusercontent.com/u/3376231?v=4\" alt=\"hzxd\" title=\"hzxd\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/inyellowbus\"><img src=\"https://avatars1.githubusercontent.com/u/8218128?v=4\" alt=\"inyellowbus\" title=\"inyellowbus\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/iuliancarnaru\"><img src=\"https://avatars1.githubusercontent.com/u/35683015?v=4\" alt=\"iuliancarnaru\" title=\"iuliancarnaru\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/iysaleh\"><img src=\"https://avatars1.githubusercontent.com/u/13583253?v=4\" alt=\"iysaleh\" title=\"iysaleh\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/jackptoke\"><img src=\"https://avatars1.githubusercontent.com/u/54049012?v=4\" alt=\"jackptoke\" title=\"jackptoke\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/jackysywk\"><img src=\"https://avatars1.githubusercontent.com/u/61909173?v=4\" alt=\"jackysywk\" title=\"jackysywk\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/jeff2go\"><img src=\"https://avatars1.githubusercontent.com/u/6629280?v=4\" alt=\"jeff2go\" title=\"jeff2go\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/jeremiahyan\"><img src=\"https://avatars1.githubusercontent.com/u/2705359?v=4\" alt=\"jeremiahyan\" title=\"jeremiahyan\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/joelywz\"><img src=\"https://avatars1.githubusercontent.com/u/43310636?v=4\" alt=\"joelywz\" title=\"joelywz\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/kamolcu\"><img src=\"https://avatars1.githubusercontent.com/u/5095235?v=4\" alt=\"kamolcu\" title=\"kamolcu\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/kana99\"><img src=\"https://avatars1.githubusercontent.com/u/3714069?v=4\" alt=\"kana99\" title=\"kana99\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/edsongley\"><img src=\"https://avatars1.githubusercontent.com/u/35545454?v=4\" alt=\"edsongley\" title=\"edsongley\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/katsubushiken\"><img src=\"https://avatars1.githubusercontent.com/u/43208445?v=4\" alt=\"katsubushiken\" title=\"katsubushiken\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/kattaprasanth\"><img src=\"https://avatars1.githubusercontent.com/u/13375911?v=4\" alt=\"kattaprasanth\" title=\"kattaprasanth\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/keeio\"><img src=\"https://avatars1.githubusercontent.com/u/147525?v=4\" alt=\"keeio\" title=\"keeio\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/keval6706\"><img src=\"https://avatars1.githubusercontent.com/u/36534030?v=4\" alt=\"keval6706\" title=\"keval6706\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/khasanovrs\"><img src=\"https://avatars1.githubusercontent.com/u/6076966?v=4\" alt=\"khasanovrs\" title=\"khasanovrs\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/kkdaypenny\"><img src=\"https://avatars1.githubusercontent.com/u/47559431?v=4\" alt=\"kkdaypenny\" title=\"kkdaypenny\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/knavels\"><img src=\"https://avatars1.githubusercontent.com/u/57287952?v=4\" alt=\"knavels\" title=\"knavels\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/kohakuhubo\"><img src=\"https://avatars1.githubusercontent.com/u/32786755?v=4\" alt=\"kohakuhubo\" title=\"kohakuhubo\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/korowiov\"><img src=\"https://avatars1.githubusercontent.com/u/5020824?v=4\" alt=\"korowiov\" title=\"korowiov\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/kostasvk\"><img src=\"https://avatars1.githubusercontent.com/u/8888490?v=4\" alt=\"kostasvk\" title=\"kostasvk\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/lafayetteDan\"><img src=\"https://avatars1.githubusercontent.com/u/26064396?v=4\" alt=\"lafayetteDan\" title=\"lafayetteDan\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/lbsubash\"><img src=\"https://avatars1.githubusercontent.com/u/101740735?v=4\" alt=\"lbsubash\" title=\"lbsubash\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/leki75\"><img src=\"https://avatars1.githubusercontent.com/u/9675379?v=4\" alt=\"leki75\" title=\"leki75\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/lemuelroberto\"><img src=\"https://avatars1.githubusercontent.com/u/322159?v=4\" alt=\"lemuelroberto\" title=\"lemuelroberto\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/liheyuan\"><img src=\"https://avatars1.githubusercontent.com/u/776423?v=4\" alt=\"liheyuan\" title=\"liheyuan\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/lingyingtan\"><img src=\"https://avatars1.githubusercontent.com/u/15610136?v=4\" alt=\"lingyingtan\" title=\"lingyingtan\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/linuxluigi\"><img src=\"https://avatars1.githubusercontent.com/u/8136842?v=4\" alt=\"linuxluigi\" title=\"linuxluigi\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/lipatti\"><img src=\"https://avatars1.githubusercontent.com/u/38935867?v=4\" alt=\"lipatti\" title=\"lipatti\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/maikelcoke\"><img src=\"https://avatars1.githubusercontent.com/u/51384?v=4\" alt=\"maikelcoke\" title=\"maikelcoke\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/marek-kuticka\"><img src=\"https://avatars1.githubusercontent.com/u/1578756?v=4\" alt=\"marek-kuticka\" title=\"marek-kuticka\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/marman-hp\"><img src=\"https://avatars1.githubusercontent.com/u/2398413?v=4\" alt=\"marman-hp\" title=\"marman-hp\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/mattbowen\"><img src=\"https://avatars1.githubusercontent.com/u/46803?v=4\" alt=\"mattbowen\" title=\"mattbowen\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/maxgozou\"><img src=\"https://avatars1.githubusercontent.com/u/54620900?v=4\" alt=\"maxgozou\" title=\"maxgozou\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/maxgozzz\"><img src=\"https://avatars1.githubusercontent.com/u/54620900?v=4\" alt=\"maxgozzz\" title=\"maxgozzz\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/mitas\"><img src=\"https://avatars1.githubusercontent.com/u/954460?v=4\" alt=\"mitas\" title=\"mitas\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/mizzlespot\"><img src=\"https://avatars1.githubusercontent.com/u/2654538?v=4\" alt=\"mizzlespot\" title=\"mizzlespot\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/mkell43\"><img src=\"https://avatars1.githubusercontent.com/u/362697?v=4\" alt=\"mkell43\" title=\"mkell43\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/mnievesco\"><img src=\"https://avatars1.githubusercontent.com/u/78430169?v=4\" alt=\"mnievesco\" title=\"mnievesco\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/mo3lyana\"><img src=\"https://avatars1.githubusercontent.com/u/4528809?v=4\" alt=\"mo3lyana\" title=\"mo3lyana\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/motogo\"><img src=\"https://avatars1.githubusercontent.com/u/1704958?v=4\" alt=\"motogo\" title=\"motogo\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/mtrense\"><img src=\"https://avatars1.githubusercontent.com/u/1008285?v=4\" alt=\"mtrense\" title=\"mtrense\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/mukunhao\"><img src=\"https://avatars1.githubusercontent.com/u/45845255?v=4\" alt=\"mukunhao\" title=\"mukunhao\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/mulyawansentosa\"><img src=\"https://avatars1.githubusercontent.com/u/29946673?v=4\" alt=\"mulyawansentosa\" title=\"mulyawansentosa\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/nasoma\"><img src=\"https://avatars1.githubusercontent.com/u/19878418?v=4\" alt=\"nasoma\" title=\"nasoma\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/ngseiyu\"><img src=\"https://avatars1.githubusercontent.com/u/44496936?v=4\" alt=\"ngseiyu\" title=\"ngseiyu\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/nikharsaxena\"><img src=\"https://avatars1.githubusercontent.com/u/8684362?v=4\" alt=\"nikharsaxena\" title=\"nikharsaxena\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/nronzel\"><img src=\"https://avatars1.githubusercontent.com/u/86695181?v=4\" alt=\"nronzel\" title=\"nronzel\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/odelanno\"><img src=\"https://avatars1.githubusercontent.com/u/63109824?v=4\" alt=\"odelanno\" title=\"odelanno\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/onlysumitg\"><img src=\"https://avatars1.githubusercontent.com/u/1676132?v=4\" alt=\"onlysumitg\" title=\"onlysumitg\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/xPoppa\"><img src=\"https://avatars1.githubusercontent.com/u/119574198?v=4\" alt=\"xPoppa\" title=\"xPoppa\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/yesudeep\"><img src=\"https://avatars1.githubusercontent.com/u/3874?v=4\" alt=\"yesudeep\" title=\"yesudeep\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/ymonk\"><img src=\"https://avatars1.githubusercontent.com/u/13493968?v=4\" alt=\"ymonk\" title=\"ymonk\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/yonson2\"><img src=\"https://avatars1.githubusercontent.com/u/1192599?v=4\" alt=\"yonson2\" title=\"yonson2\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/yshengliao\"><img src=\"https://avatars1.githubusercontent.com/u/13849858?v=4\" alt=\"yshengliao\" title=\"yshengliao\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/ytxmobile98\"><img src=\"https://avatars1.githubusercontent.com/u/5900105?v=4\" alt=\"ytxmobile98\" title=\"ytxmobile98\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/yusong-offx\"><img src=\"https://avatars1.githubusercontent.com/u/75306828?v=4\" alt=\"yusong-offx\" title=\"yusong-offx\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/zhenggangpku\"><img src=\"https://avatars1.githubusercontent.com/u/18161030?v=4\" alt=\"zhenggangpku\" title=\"zhenggangpku\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/zou8944\"><img src=\"https://avatars1.githubusercontent.com/u/18495995?v=4\" alt=\"zou8944\" title=\"zou8944\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/SergeShin\"><img src=\"https://avatars1.githubusercontent.com/u/402395?v=4\" alt=\"SergeShin\" title=\"SergeShin\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/-\"><img src=\"https://avatars1.githubusercontent.com/u/75544?v=4\" alt=\"-\" title=\"-\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/BelmonduS\"><img src=\"https://avatars1.githubusercontent.com/u/159350?v=4\" alt=\"BelmonduS\" title=\"BelmonduS\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Diewald\"><img src=\"https://avatars1.githubusercontent.com/u/6187336?v=4\" alt=\"Diewald\" title=\"Diewald\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/cty4ka\"><img src=\"https://avatars1.githubusercontent.com/u/29261879?v=4\" alt=\"cty4ka\" title=\"cty4ka\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/martinjanda\"><img src=\"https://avatars1.githubusercontent.com/u/122393?v=4\" alt=\"martinjanda\" title=\"martinjanda\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/evan\"><img src=\"https://avatars1.githubusercontent.com/u/210?v=4\" alt=\"evan\" title=\"evan\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/hazmi-e205\"><img src=\"https://avatars1.githubusercontent.com/u/12555465?v=4\" alt=\"hazmi-e205\" title=\"hazmi-e205\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/jtgoral\"><img src=\"https://avatars1.githubusercontent.com/u/19780595?v=4\" alt=\"jtgoral\" title=\"jtgoral\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/ky2s\"><img src=\"https://avatars1.githubusercontent.com/u/19502125?v=4\" alt=\"ky2s\" title=\"ky2s\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/lauweliam\"><img src=\"https://avatars1.githubusercontent.com/u/4064517?v=4\" alt=\"lauweliam\" title=\"lauweliam\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/ozfive\"><img src=\"https://avatars1.githubusercontent.com/u/4494266?v=4\" alt=\"ozfive\" title=\"ozfive\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/paulcockrell\"><img src=\"https://avatars1.githubusercontent.com/u/260514?v=4\" alt=\"paulcockrell\" title=\"paulcockrell\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/paulxu21\"><img src=\"https://avatars1.githubusercontent.com/u/6261758?v=4\" alt=\"paulxu21\" title=\"paulxu21\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/pesquive\"><img src=\"https://avatars1.githubusercontent.com/u/6610140?v=4\" alt=\"pesquive\" title=\"pesquive\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/petros9282\"><img src=\"https://avatars1.githubusercontent.com/u/3861890?v=4\" alt=\"petros9282\" title=\"petros9282\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/phil535\"><img src=\"https://avatars1.githubusercontent.com/u/7596830?v=4\" alt=\"phil535\" title=\"phil535\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/pitt134\"><img src=\"https://avatars1.githubusercontent.com/u/13091629?v=4\" alt=\"pitt134\" title=\"pitt134\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/poscard\"><img src=\"https://avatars1.githubusercontent.com/u/3023318?v=4\" alt=\"poscard\" title=\"poscard\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/qiepeipei\"><img src=\"https://avatars1.githubusercontent.com/u/16110628?v=4\" alt=\"qiepeipei\" title=\"qiepeipei\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/qiuzhanghua\"><img src=\"https://avatars1.githubusercontent.com/u/478393?v=4\" alt=\"qiuzhanghua\" title=\"qiuzhanghua\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/rapita\"><img src=\"https://avatars1.githubusercontent.com/u/22305375?v=4\" alt=\"rapita\" title=\"rapita\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/rbondi\"><img src=\"https://avatars1.githubusercontent.com/u/81764?v=4\" alt=\"rbondi\" title=\"rbondi\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/relaera\"><img src=\"https://avatars1.githubusercontent.com/u/26012106?v=4\" alt=\"relaera\" title=\"relaera\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/remopavithran\"><img src=\"https://avatars1.githubusercontent.com/u/50388068?v=4\" alt=\"remopavithran\" title=\"remopavithran\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/rfunix\"><img src=\"https://avatars1.githubusercontent.com/u/6026357?v=4\" alt=\"rfunix\" title=\"rfunix\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/rhernandez-itemsoft\"><img src=\"https://avatars1.githubusercontent.com/u/4327356?v=4\" alt=\"rhernandez-itemsoft\" title=\"rhernandez-itemsoft\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/rikoriswandha\"><img src=\"https://avatars1.githubusercontent.com/u/2549929?v=4\" alt=\"rikoriswandha\" title=\"rikoriswandha\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/risallaw\"><img src=\"https://avatars1.githubusercontent.com/u/15353146?v=4\" alt=\"risallaw\" title=\"risallaw\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/robivictor\"><img src=\"https://avatars1.githubusercontent.com/u/761041?v=4\" alt=\"robivictor\" title=\"robivictor\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/rubiagatra\"><img src=\"https://avatars1.githubusercontent.com/u/7299491?v=4\" alt=\"rubiagatra\" title=\"rubiagatra\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/rubyangxg\"><img src=\"https://avatars1.githubusercontent.com/u/3069914?v=4\" alt=\"rubyangxg\" title=\"rubyangxg\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/rxrw\"><img src=\"https://avatars1.githubusercontent.com/u/9566402?v=4\" alt=\"rxrw\" title=\"rxrw\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/saleebm\"><img src=\"https://avatars1.githubusercontent.com/u/34875122?v=4\" alt=\"saleebm\" title=\"saleebm\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/sbenimeli\"><img src=\"https://avatars1.githubusercontent.com/u/46652122?v=4\" alt=\"sbenimeli\" title=\"sbenimeli\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/sebyno\"><img src=\"https://avatars1.githubusercontent.com/u/15988169?v=4\" alt=\"sebyno\" title=\"sebyno\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/seun-otosho\"><img src=\"https://avatars1.githubusercontent.com/u/74518370?v=4\" alt=\"seun-otosho\" title=\"seun-otosho\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/shobhitsinghal77\"><img src=\"https://avatars1.githubusercontent.com/u/26848221?v=4\" alt=\"shobhitsinghal77\" title=\"shobhitsinghal77\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/solohiroshi\"><img src=\"https://avatars1.githubusercontent.com/u/96872274?v=4\" alt=\"solohiroshi\" title=\"solohiroshi\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/su1gen\"><img src=\"https://avatars1.githubusercontent.com/u/86298730?v=4\" alt=\"su1gen\" title=\"su1gen\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/sukiejosh\"><img src=\"https://avatars1.githubusercontent.com/u/44656210?v=4\" alt=\"sukiejosh\" title=\"sukiejosh\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/suresh16671\"><img src=\"https://avatars1.githubusercontent.com/u/57644510?v=4\" alt=\"suresh16671\" title=\"suresh16671\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/svirmi\"><img src=\"https://avatars1.githubusercontent.com/u/52601346?v=4\" alt=\"svirmi\" title=\"svirmi\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/terjelafton\"><img src=\"https://avatars1.githubusercontent.com/u/12574755?v=4\" alt=\"terjelafton\" title=\"terjelafton\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/thiennguyen93\"><img src=\"https://avatars1.githubusercontent.com/u/60094052?v=4\" alt=\"thiennguyen93\" title=\"thiennguyen93\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/unixedia\"><img src=\"https://avatars1.githubusercontent.com/u/70646128?v=4\" alt=\"unixedia\" title=\"unixedia\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/vadgun\"><img src=\"https://avatars1.githubusercontent.com/u/22282464?v=4\" alt=\"vadgun\" title=\"vadgun\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/valsorym\"><img src=\"https://avatars1.githubusercontent.com/u/4440262?v=4\" alt=\"valsorym\" title=\"valsorym\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/vguhesan\"><img src=\"https://avatars1.githubusercontent.com/u/193960?v=4\" alt=\"vguhesan\" title=\"vguhesan\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/vpiduri\"><img src=\"https://avatars1.githubusercontent.com/u/19339398?v=4\" alt=\"vpiduri\" title=\"vpiduri\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/vrocadev\"><img src=\"https://avatars1.githubusercontent.com/u/50081969?v=4\" alt=\"vrocadev\" title=\"vrocadev\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/vuhoanglam\"><img src=\"https://avatars1.githubusercontent.com/u/59502855?v=4\" alt=\"vuhoanglam\" title=\"vuhoanglam\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/walter-wang\"><img src=\"https://avatars1.githubusercontent.com/u/7950295?v=4\" alt=\"walter-wang\" title=\"walter-wang\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/martinlindhe\"><img src=\"https://avatars1.githubusercontent.com/u/181531?v=4\" alt=\"martinlindhe\" title=\"martinlindhe\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/mdamschen\"><img src=\"https://avatars1.githubusercontent.com/u/40914728?v=4\" alt=\"mdamschen\" title=\"mdamschen\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/letmestudy\"><img src=\"https://avatars1.githubusercontent.com/u/31943708?v=4\" alt=\"letmestudy\" title=\"letmestudy\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/michaelsmanley\"><img src=\"https://avatars1.githubusercontent.com/u/93241?v=4\" alt=\"michaelsmanley\" title=\"michaelsmanley\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/Curtman\"><img src=\"https://avatars1.githubusercontent.com/u/543481?v=4\" alt=\"Curtman\" title=\"Curtman\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/SridarDhandapani\"><img src=\"https://avatars1.githubusercontent.com/u/18103118?v=4\" alt=\"SridarDhandapani\" title=\"SridarDhandapani\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/madrigaltenor\"><img src=\"https://avatars1.githubusercontent.com/u/168838315?v=4\" alt=\"madrigaltenor\" title=\"madrigaltenor\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/opusmagna\"><img src=\"https://avatars1.githubusercontent.com/u/33766678?v=4\" alt=\"opusmagna\" title=\"opusmagna\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/ShahramMebashar\"><img src=\"https://avatars1.githubusercontent.com/u/25268287?v=4\" alt=\"ShahramMebashar\" title=\"ShahramMebashar\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/b4zz4r\"><img src=\"https://avatars1.githubusercontent.com/u/7438782?v=4\" alt=\"b4zz4r\" title=\"b4zz4r\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/bobmcallan\"><img src=\"https://avatars1.githubusercontent.com/u/8773580?v=4\" alt=\"bobmcallan\" title=\"bobmcallan\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/fangli\"><img src=\"https://avatars1.githubusercontent.com/u/3032639?v=4\" alt=\"fangli\" title=\"fangli\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/galois-tnp\"><img src=\"https://avatars1.githubusercontent.com/u/41128011?v=4\" alt=\"galois-tnp\" title=\"galois-tnp\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/mblandr\"><img src=\"https://avatars1.githubusercontent.com/u/42862020?v=4\" alt=\"mblandr\" title=\"mblandr\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/midhubalan\"><img src=\"https://avatars1.githubusercontent.com/u/13059634?v=4\" alt=\"midhubalan\" title=\"midhubalan\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/netbaalzovf\"><img src=\"https://avatars1.githubusercontent.com/u/98529711?v=4\" alt=\"netbaalzovf\" title=\"netbaalzovf\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/oliverjosefzimmer\"><img src=\"https://avatars1.githubusercontent.com/u/24566297?v=4\" alt=\"oliverjosefzimmer\" title=\"oliverjosefzimmer\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/peacememories\"><img src=\"https://avatars1.githubusercontent.com/u/1326334?v=4\" alt=\"peacememories\" title=\"peacememories\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/talebisinan\"><img src=\"https://avatars1.githubusercontent.com/u/42139005?v=4\" alt=\"talebisinan\" title=\"talebisinan\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/valkuere\"><img src=\"https://avatars1.githubusercontent.com/u/7230144?v=4\" alt=\"valkuere\" title=\"valkuere\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/lfaynman\"><img src=\"https://avatars1.githubusercontent.com/u/16815068?v=4\" alt=\"lfaynman\" title=\"lfaynman\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/ArturWierzbicki\"><img src=\"https://avatars1.githubusercontent.com/u/23451458?v=4\" alt=\"ArturWierzbicki\" title=\"ArturWierzbicki\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/aaxx\"><img src=\"https://avatars1.githubusercontent.com/u/476416?v=4\" alt=\"aaxx\" title=\"aaxx\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/crashCoder\"><img src=\"https://avatars1.githubusercontent.com/u/1144298?v=4\" alt=\"crashCoder\" title=\"crashCoder\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/derekslenk\"><img src=\"https://avatars1.githubusercontent.com/u/42957?v=4\" alt=\"derekslenk\" title=\"derekslenk\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/dochoaj\"><img src=\"https://avatars1.githubusercontent.com/u/1789678?v=4\" alt=\"dochoaj\" title=\"dochoaj\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/evillgenius75\"><img src=\"https://avatars1.githubusercontent.com/u/22817701?v=4\" alt=\"evillgenius75\" title=\"evillgenius75\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/gog200921\"><img src=\"https://avatars1.githubusercontent.com/u/101519620?v=4\" alt=\"gog200921\" title=\"gog200921\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/mauricedcastro\"><img src=\"https://avatars1.githubusercontent.com/u/6446532?v=4\" alt=\"mauricedcastro\" title=\"mauricedcastro\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/mwiater\"><img src=\"https://avatars1.githubusercontent.com/u/5323591?v=4\" alt=\"mwiater\" title=\"mwiater\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/sj671\"><img src=\"https://avatars1.githubusercontent.com/u/7363652?v=4\" alt=\"sj671\" title=\"sj671\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/statik\"><img src=\"https://avatars1.githubusercontent.com/u/983?v=4\" alt=\"statik\" title=\"statik\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/supersherm5\"><img src=\"https://avatars1.githubusercontent.com/u/7953550?v=4\" alt=\"supersherm5\" title=\"supersherm5\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/thejones\"><img src=\"https://avatars1.githubusercontent.com/u/682850?v=4\" alt=\"thejones\" title=\"thejones\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/CSRaghunandan\"><img src=\"https://avatars1.githubusercontent.com/u/5226809?v=4\" alt=\"CSRaghunandan\" title=\"CSRaghunandan\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/ndimorle\"><img src=\"https://avatars1.githubusercontent.com/u/76732415?v=4\" alt=\"ndimorle\" title=\"ndimorle\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/rosales-stephanie\"><img src=\"https://avatars1.githubusercontent.com/u/43592017?v=4\" alt=\"rosales-stephanie\" title=\"rosales-stephanie\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/shyyawn\"><img src=\"https://avatars1.githubusercontent.com/u/6064438?v=4\" alt=\"shyyawn\" title=\"shyyawn\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/vcruzato\"><img src=\"https://avatars1.githubusercontent.com/u/3864151?v=4\" alt=\"vcruzato\" title=\"vcruzato\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/wangbl11\"><img src=\"https://avatars1.githubusercontent.com/u/14358532?v=4\" alt=\"wangbl11\" title=\"wangbl11\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/wofka72\"><img src=\"https://avatars1.githubusercontent.com/u/10855340?v=4\" alt=\"wofka72\" title=\"wofka72\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/geoshan\"><img src=\"https://avatars1.githubusercontent.com/u/10161131?v=4\" alt=\"geoshan\" title=\"geoshan\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/juanxme\"><img src=\"https://avatars1.githubusercontent.com/u/661043?v=4\" alt=\"juanxme\" title=\"juanxme\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/nguyentamvinhlong\"><img src=\"https://avatars1.githubusercontent.com/u/1875916?v=4\" alt=\"nguyentamvinhlong\" title=\"nguyentamvinhlong\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/yoru74\"><img src=\"https://avatars1.githubusercontent.com/u/7745866?v=4\" alt=\"yoru74\" title=\"yoru74\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/xsokev\"><img src=\"https://avatars1.githubusercontent.com/u/28113?v=4\" alt=\"xsokev\" title=\"xsokev\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/oleang\"><img src=\"https://avatars1.githubusercontent.com/u/142615?v=4\" alt=\"oleang\" title=\"oleang\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/michalsz\"><img src=\"https://avatars1.githubusercontent.com/u/187477?v=4\" alt=\"michalsz\" title=\"michalsz\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/pomland-94\"><img src=\"https://avatars1.githubusercontent.com/u/96850116?v=4\" alt=\"pomland-94\" title=\"pomland-94\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/tejzpr\"><img src=\"https://avatars1.githubusercontent.com/u/2813811?v=4\" alt=\"tejzpr\" title=\"tejzpr\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/theantichris\"><img src=\"https://avatars1.githubusercontent.com/u/1486502?v=4\" alt=\"theantichris\" title=\"theantichris\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/tuxaanand\"><img src=\"https://avatars1.githubusercontent.com/u/9750371?v=4\" alt=\"tuxaanand\" title=\"tuxaanand\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/raphael-brand\"><img src=\"https://avatars1.githubusercontent.com/u/4279168?v=4\" alt=\"raphael-brand\" title=\"raphael-brand\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/willypuzzle\"><img src=\"https://avatars1.githubusercontent.com/u/18305386?v=4\" alt=\"willypuzzle\" title=\"willypuzzle\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/dmcbane\"><img src=\"https://avatars1.githubusercontent.com/u/5453862?v=4\" alt=\"dmcbane\" title=\"dmcbane\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/malcolm-white-dti\"><img src=\"https://avatars1.githubusercontent.com/u/109724322?v=4\" alt=\"malcolm-white-dti\" title=\"malcolm-white-dti\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/HieuLsw\"><img src=\"https://avatars1.githubusercontent.com/u/1675478?v=4\" alt=\"HieuLsw\" title=\"HieuLsw\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/carlosmoran092\"><img src=\"https://avatars1.githubusercontent.com/u/10361754?v=4\" alt=\"carlosmoran092\" title=\"carlosmoran092\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n  <a href=\"https://github.com/yangxianglong\"><img src=\"https://avatars1.githubusercontent.com/u/55280276?v=4\" alt=\"yangxianglong\" title=\"yangxianglong\" width=\"75\" height=\"75\" style=\"width:75px;max-width:75px;height:75px\" /></a>\n</p>\n\n## 📖 Learning Iris\n\n### Installation\n\nThe only requirement is the [Go Programming Language](https://go.dev/dl/).\n\n#### Create a new project\n\n```sh\n$ mkdir myapp\n$ cd myapp\n$ go mod init myapp\n$ go get github.com/kataras/iris/v12@latest # or @v12.2.11\n```\n\n<details><summary>Install on existing project</summary>\n\n```sh\n$ cd myapp\n$ go get github.com/kataras/iris/v12@latest\n```\n\n**Run**\n\n```sh\n$ go mod tidy -compat=1.23 # -compat=\"1.23\" for windows.\n$ go run .\n```\n\n</details>\n\n![](https://www.iris-go.com/images/gifs/install-create-iris.gif)\n\nIris contains extensive and thorough **[documentation](https://www.iris-go.com/docs)** making it easy to get started with the framework.\n\n<!-- Iris contains extensive and thorough **[wiki](https://github.com/kataras/iris/wiki)** making it easy to get started with the framework. -->\n\n<!-- ![](https://media.giphy.com/media/Ur8iqy9FQfmPuyQpgy/giphy.gif) -->\n\nFor a more detailed technical documentation you can head over to our [godocs](https://pkg.go.dev/github.com/kataras/iris/v12@v12.2.11). And for executable code you can always visit the [./_examples](_examples) repository's subdirectory.\n\n### Do you like to read while traveling?\n\n<a href=\"https://iris-go.com/#book\"> <img alt=\"Book cover\" src=\"https://iris-go.com/images/iris-book-cover-sm.jpg?v=12\" /> </a>\n\n[![follow author on twitter](https://img.shields.io/twitter/follow/makismaropoulos?color=3D8AA3&logoColor=3D8AA3&style=for-the-badge&logo=twitter)](https://twitter.com/intent/follow?screen_name=makismaropoulos)\n\n[![follow Iris web framework on twitter](https://img.shields.io/twitter/follow/iris_framework?color=ee7506&logoColor=ee7506&style=for-the-badge&logo=twitter)](https://twitter.com/intent/follow?screen_name=iris_framework)\n\n[![follow Iris web framework on facebook](https://img.shields.io/badge/Follow%20%40Iris.framework-569-2D88FF.svg?style=for-the-badge&logo=facebook)](https://www.facebook.com/iris.framework)\n\nYou can [request](https://www.iris-go.com/#ebookDonateForm) a PDF and online access of the **Iris E-Book** (New Edition, **future v12.2.0+**) today and be participated in the development of Iris.\n\n## 🙌 Contributing\n\nWe'd love to see your contribution to the Iris Web Framework! For more information about contributing to the Iris project please check the [CONTRIBUTING.md](CONTRIBUTING.md) file.\n\n[List of all Contributors](https://github.com/kataras/iris/graphs/contributors)\n\n## 🛡 Security Vulnerabilities\n\nIf you discover a security vulnerability within Iris, please send an e-mail to [iris-go@outlook.com](mailto:iris-go@outlook.com). All security vulnerabilities will be promptly addressed.\n\n## 📝 License\n\nThis project is licensed under the [BSD 3-clause license](LICENSE), just like the Go project itself.\n\nThe project name \"Iris\" was inspired by the Greek mythology.\n<!-- ## Stargazers over time\n\n[![Stargazers over time](https://starchart.cc/kataras/iris.svg)](https://starchart.cc/kataras/iris) -->\n"
        },
        {
          "name": "README_ES.md",
          "type": "blob",
          "size": 4.03,
          "content": "# Iris Web Framework\n\n[![build status](https://img.shields.io/github/actions/workflow/status/kataras/iris/ci.yml?branch=main&style=for-the-badge)](https://github.com/kataras/iris/actions/workflows/ci.yml) [![FOSSA Status](https://img.shields.io/badge/LICENSE%20SCAN-PASSING❤️-CD2956?style=for-the-badge&logo=fossa)](https://app.fossa.io/projects/git%2Bgithub.com%2Fkataras%2Firis?ref=badge_shield)<!--[![report card](https://img.shields.io/badge/report%20card-a%2B-ff3333.svg?style=for-the-badge)](https://goreportcard.com/report/github.com/kataras/iris)--><!--[![godocs](https://img.shields.io/badge/go-%20docs-488AC7.svg?style=for-the-badge)](https://pkg.go.dev/github.com/kataras/iris/v12@v12.2.11)--> [![view examples](https://img.shields.io/badge/learn%20by-examples-0C8EC5.svg?style=for-the-badge&logo=go)](https://github.com/kataras/iris/tree/main/_examples) [![chat](https://img.shields.io/gitter/room/iris_go/community.svg?color=7E18DD&logo=gitter&style=for-the-badge)](https://gitter.im/iris_go/community)<!--[![donate on PayPal](https://img.shields.io/badge/support-PayPal-blue.svg?style=for-the-badge)](https://iris-go.com/donate)--><!-- [![release](https://img.shields.io/badge/release%20-v12.0-0077b3.svg?style=for-the-badge)](https://github.com/kataras/iris/releases) -->\n\nIris es un framework web rápido, simple pero con muchas funcionalidades y muy eficiente para Go. Proporciona una base bellamente expresiva y fácil de usar para su próximo sitio web o API.\n\nDescubra lo que [otros dicen sobre Iris](https://iris-go.com/testimonials/) y **siga** :star: este repositorio github.\n\n[![](https://media.giphy.com/media/j5WLmtvwn98VPrm7li/giphy.gif)](https://iris-go.com/testimonials/)\n\n[![Benchmarks: Apr 2, 2020 at 12:13pm (UTC)](https://iris-go.com/images/benchmarks.svg)](https://github.com/kataras/server-benchmarks)\n\n## Aprende Iris\n\n<details>\n<summary>Inicio rapido</summary>\n\n```sh\n# agrega el siguiente código en el archivo ejemplo.go\n$ cat ejemplo.go\n```\n\n```go\npackage main\n\nimport \"github.com/kataras/iris/v12\"\n\nfunc main() {\n    app := iris.Default()\n    app.Get(\"/ping\", func(ctx iris.Context) {\n        ctx.JSON(iris.Map{\n            \"message\": \"pong\",\n        })\n    })\n\n    app.Listen(\":8080\")\n}\n```\n\n```sh\n# ejecuta ejemplo.go y\n# visita http://localhost:8080/ping en el navegador\n$ go run ejemplo.go\n```\n\n> El enrutamiento es impulsado por [muxie](https://github.com/kataras/muxie), el software basado en trie más potente y rápido escrito en Go.\n\n</details>\n\nIris contiene un extenso y completo **[wiki](https://www.iris-go.com/#ebookDonateForm)** que facilita comenzar con el framework.\n\nPara obtener una documentación técnica más detallada, puede dirigirse a nuestros [godocs](https://pkg.go.dev/github.com/kataras/iris/v12@v12.2.11). Y para código ejecutable siempre puede visitar el subdirectorio del repositorio [\\_examples](_examples/).\n\n### ¿Te gusta leer mientras viajas?\n\n<a href=\"https://iris-go.com/#book\"> <img alt=\"Book cover\" src=\"https://iris-go.com/images/iris-book-cover-sm.jpg?v=12\" /> </a>\n\n[![follow author](https://img.shields.io/twitter/follow/makismaropoulos.svg?style=for-the-badge)](https://twitter.com/intent/follow?screen_name=makismaropoulos)\n\nPuedes [solicitar](https://www.iris-go.com/#ebookDonateForm) una versión en PDF y acceso en línea del **E-Book** hoy y participar en el desarrollo de Iris.\n\n## Contribuir\n\n¡Nos encantaría ver su contribución al Framework Web Iris! Para obtener más información sobre cómo contribuir al proyecto Iris, consulte el archivo [CONTRIBUTING.md](CONTRIBUTING).\n\n[Lista de todos los contribuyentes](https://github.com/kataras/iris/graphs/contributors)\n\n## Vulnerabilidades de seguridad\n\nSi descubres una vulnerabilidad de seguridad dentro de Iris, envíe un correo electrónico a [iris-go@outlook.com](mailto:iris-go@outlook.com). Todas las vulnerabilidades de seguridad serán tratadas de inmediato.\n\n## Licencia\n\nEl nombre del proyecto \"Iris\" se inspiró en la mitología griega.\n\nEl Web Framework Iris es un software gratuito y de código abierto con licencia bajo la [Licencia BSD 3 cláusulas](LICENSE).\n"
        },
        {
          "name": "README_FA.md",
          "type": "blob",
          "size": 8.2,
          "content": "<div dir=\"rtl\">\n\n## خبرها\n    \n> این شاخه تحت توسعه است. برای رفتن به شاخه نسخه بعدی [v12.2.0](HISTORY.md#Next) یا اگر به دنبال یک انتشار پایدار هستید, به جای آن به شاخه [v12.1.8 branch](https://github.com/kataras/iris/tree/v12.1.8) مراجعه کنید.\n    \n> ![](https://iris-go.com/images/cli.png) همین امروز برنامه رسمی [Iris Command Line Interface](https://github.com/kataras/iris-cli) را امتحان کنید.\n\n> با توجه به بالا بودن حجم کار، ممکن است در پاسخ به [سوالات](https://github.com/kataras/iris/issues) شما تاخیری وجود داشته باشد.\n\n# Iris Web Framework\n    \n[![build status](https://img.shields.io/github/actions/workflow/status/kataras/iris/ci.yml?branch=main&style=for-the-badge)](https://github.com/kataras/iris/actions/workflows/ci.yml) [![FOSSA Status](https://img.shields.io/badge/LICENSE%20SCAN-PASSING❤️-CD2956?style=for-the-badge&logo=fossa)](https://app.fossa.io/projects/git%2Bgithub.com%2Fkataras%2Firis?ref=badge_shield)<!--[![report card](https://img.shields.io/badge/report%20card-a%2B-ff3333.svg?style=for-the-badge)](https://goreportcard.com/report/github.com/kataras/iris)--><!--[![godocs](https://img.shields.io/badge/go-%20docs-488AC7.svg?style=for-the-badge)](https://pkg.go.dev/github.com/kataras/iris/v12@v12.2.11)--> [![view examples](https://img.shields.io/badge/learn%20by-examples-0C8EC5.svg?style=for-the-badge&logo=go)](https://github.com/kataras/iris/tree/main/_examples) [![chat](https://img.shields.io/gitter/room/iris_go/community.svg?color=7E18DD&logo=gitter&style=for-the-badge)](https://gitter.im/iris_go/community)<!--[![donate on PayPal](https://img.shields.io/badge/support-PayPal-blue.svg?style=for-the-badge)](https://iris-go.com/donate)--><!-- [![release](https://img.shields.io/badge/release%20-v12.0-0077b3.svg?style=for-the-badge)](https://github.com/kataras/iris/releases) -->\n    \nآیریس یک چارچوب وب پر سرعت ، ساده و در عین حال کاملاً برجسته و بسیار کارآمد برای Go است.\n</div>\n\n<details><summary>Simple Handler</summary>\n\n```go\npackage main\n\nimport \"github.com/kataras/iris/v12\"\n\ntype (\n  request struct {\n    Firstname string `json:\"firstname\"`\n    Lastname  string `json:\"lastname\"`\n  }\n\n  response struct {\n    ID      uint64 `json:\"id\"`\n    Message string `json:\"message\"`\n  }\n)\n\nfunc main() {\n  app := iris.New()\n  app.Handle(\"PUT\", \"/users/{id:uint64}\", updateUser)\n  app.Listen(\":8080\")\n}\n\nfunc updateUser(ctx iris.Context) {\n  id, _ := ctx.Params().GetUint64(\"id\")\n\n  var req request\n  if err := ctx.ReadJSON(&req); err != nil {\n    ctx.StopWithError(iris.StatusBadRequest, err)\n    return\n  }\n\n  resp := response{\n    ID:      id,\n    Message: req.Firstname + \" updated successfully\",\n  }\n  ctx.JSON(resp)\n}\n```\n> !برای اطلاعات بیشتر ، [مثال های مسیریابی](https://github.com/kataras/iris/blob/main/_examples/routing) را بخوانید\n\n</details>\n\n<details><summary>Handler with custom input and output arguments</summary>\n\n[![https://github.com/kataras/iris/blob/main/_examples/dependency-injection/basic/main.go](https://user-images.githubusercontent.com/22900943/105253731-b8db6d00-5b88-11eb-90c1-0c92a5581c86.png)](https://twitter.com/iris_framework/status/1234783655408668672)\n\n> اگر برایتان جالب بود [مثال های دیگری](https://github.com/kataras/iris/blob/main/_examples/dependency-injection) را مطالعه کنید\n\n</details>\n\n<details><summary>MVC</summary>\n\n```go\npackage main\n\nimport (\n  \"github.com/kataras/iris/v12\"\n  \"github.com/kataras/iris/v12/mvc\"\n)\n\ntype (\n  request struct {\n    Firstname string `json:\"firstname\"`\n    Lastname  string `json:\"lastname\"`\n  }\n\n  response struct {\n    ID      uint64 `json:\"id\"`\n    Message string `json:\"message\"`\n  }\n)\n\nfunc main() {\n  app := iris.New()\n  mvc.Configure(app.Party(\"/users\"), configureMVC)\n  app.Listen(\":8080\")\n}\n\nfunc configureMVC(app *mvc.Application) {\n  app.Handle(new(userController))\n}\n\ntype userController struct {\n  // [...dependencies]\n}\n\nfunc (c *userController) PutBy(id uint64, req request) response {\n  return response{\n    ID:      id,\n    Message: req.Firstname + \" updated successfully\",\n  }\n}\n```\nاگر به دنبال مثال‌های بیشتری هستید می‌توانید در [اینجا](_examples/mvc) مطالعه کنید\n</details>\n<div dir=\"rtl\">\n    \n> دیگران درباره آیریس چه می گویند و برای پشتیبانی از پتانسیل‌های  این پروژه متن باز  می‌توانید از آن حمایت کنید\n\n[![](https://iris-go.com/images/reviews.gif)](https://iris-go.com/testimonials/)\n\n[![Benchmarks: Jul 18, 2020 at 10:46am (UTC)](https://iris-go.com/images/benchmarks.svg)](https://github.com/kataras/server-benchmarks)\n\n## 👑 <a href=\"https://iris-go.com/donate\">حامیان</a>\n    \nبا کمک شما, ما می‌توانیم توسعه وب متن باز را برای همه بهبود ببخشیم !\n\n> کمک هایی که تا حالا دریافت شده است !\n \n## اموزش آیریس\n    \n### ساخت یک پروژه جدید\n\n</div>\n    \n```sh\n$ mkdir myapp\n$ cd myapp\n$ go mod init myapp\n$ go get github.com/kataras/iris/v12@latest # or @v12.2.11\n```\n\n<div dir=\"rtl\">\n<summary>نصب بر روی پروژه موجود</summary>\n</div>\n\n```sh\n$ cd myapp\n$ go get github.com/kataras/iris/v12@latest\n```\n\n<div dir=\"rtl\">\n<summary>نصب با پرونده go.mod</summary>\n</div>\n\n```txt\nmodule myapp\n\ngo 1.20\n\nrequire github.com/kataras/iris/v12 v12.2.0-beta4.0.20220920072528-ff81f370625a\n```\n![](https://www.iris-go.com/images/gifs/install-create-iris.gif)\n\n<div dir=\"rtl\">\nآیریس شامل مستندات گسترده و کاملی است که کار با چارچوب را آسان می کند.\n\n> [مستندات](https://www.iris-go.com/docs)\n    \nبرای اطلاعات بیشتر در مورد اسناد فنی می توانید به مستندات اصلی ما مراجعه کنید. \n\n> [مستندات اصلی](https://pkg.go.dev/github.com/kataras/iris/v12@main)\n    \n## دوست دارید در حین مسافرت کتاب بخوانید ?\n    \n <a href=\"https://iris-go.com/#book\"> <img alt=\"Book cover\" src=\"https://iris-go.com/images/iris-book-cover-sm.jpg?v=12\" /> </a>\n\n[![follow author on twitter](https://img.shields.io/twitter/follow/makismaropoulos?color=3D8AA3&logoColor=3D8AA3&style=for-the-badge&logo=twitter)](https://twitter.com/intent/follow?screen_name=makismaropoulos)\n\n[![follow Iris web framework on twitter](https://img.shields.io/twitter/follow/iris_framework?color=ee7506&logoColor=ee7506&style=for-the-badge&logo=twitter)](https://twitter.com/intent/follow?screen_name=iris_framework)\n\n[![follow Iris web framework on facebook](https://img.shields.io/badge/Follow%20%40Iris.framework-522-2D88FF.svg?style=for-the-badge&logo=facebook)](https://www.facebook.com/iris.framework)\n    \n امروز می توانید از طریق کتاب الکترونیکی آیریس (نسخه جدید ، آینده v12.2.0 +) دسترسی PDF و دسترسی آنلاین داشته باشید و در توسعه آیریس شرکت کنید.\n    \n ## 🙌 مشارکت\n    \n ما خیلی دوست داریم شما سهمی در توسعه چارچوب آیریس داشته باشید! برای دریافت اطلاعات بیشتر در مورد مشارکت در پروژه آیریس لطفاً پرونده [CONTRIBUTING.md](CONTRIBUTING.md) را مطالعه کنید.  \n    \n[لیست همه شرکت کنندگان](https://github.com/kataras/iris/graphs/contributors)\n    \n## 🛡 آسیب‌پذیری‌های امنیتی\n    \nاگر آسیب‌پذیری امنیتی در درون آیریس مشاهده کردید, لطفاً ایمیلی به [iris-go@outlook.com](mailto:iris-go@outlook.com) بفرستید. کلیه ضعف‌های امنیتی بلافاصله مورد توجه قرار خواهند گرفت.\n    \n## 📝 مجوز\n    \nاین پروژه تحت پروانه [BSD 3-clause license](LICENSE) مجوز دارد ، دقیقاً مانند پروژه Go.    \n    \nنام پروژه \"آیریس\" از اساطیر یونانی الهام‌گرفته شده است.\n\n</div>\n  \n"
        },
        {
          "name": "README_FR.md",
          "type": "blob",
          "size": 4.49,
          "content": "# Iris Web Framework\n\n[![build status](https://img.shields.io/github/actions/workflow/status/kataras/iris/ci.yml?branch=main&style=for-the-badge)](https://github.com/kataras/iris/actions/workflows/ci.yml) [![FOSSA Status](https://img.shields.io/badge/LICENSE%20SCAN-PASSING❤️-CD2956?style=for-the-badge&logo=fossa)](https://app.fossa.io/projects/git%2Bgithub.com%2Fkataras%2Firis?ref=badge_shield)<!--[![report card](https://img.shields.io/badge/report%20card-a%2B-ff3333.svg?style=for-the-badge)](https://goreportcard.com/report/github.com/kataras/iris)--><!--[![godocs](https://img.shields.io/badge/go-%20docs-488AC7.svg?style=for-the-badge)](https://pkg.go.dev/github.com/kataras/iris/v12@v12.2.11)--> [![view examples](https://img.shields.io/badge/learn%20by-examples-0C8EC5.svg?style=for-the-badge&logo=go)](https://github.com/kataras/iris/tree/main/_examples) [![chat](https://img.shields.io/gitter/room/iris_go/community.svg?color=7E18DD&logo=gitter&style=for-the-badge)](https://gitter.im/iris_go/community)<!--[![donate on PayPal](https://img.shields.io/badge/support-PayPal-blue.svg?style=for-the-badge)](https://iris-go.com/donate)--><!-- [![release](https://img.shields.io/badge/release%20-v12.0-0077b3.svg?style=for-the-badge)](https://github.com/kataras/iris/releases) -->\n\n<a href=\"https://iris-go.com\"> <img align=\"right\" src=\"https://iris-go.com/images/logo-w169.png\"></a>\n\nIris est un framework open-source pour Go à la fois simple, rapide et pourvu de nombreuses fonctionnalités.\n\nIl fournit des moyens simples et élégants de construire les bases et fonctionnalités de votre site, application backend ou API Rest.\n\nLisez [ce que les développeurs pensent d'Iris](https://iris-go.com/testimonials/) et si l'envie vous prend **[étoilez](https://github.com/kataras/iris/stargazers)** le projet pour faire monter son potentiel.\n\n[![](https://media.giphy.com/media/j5WLmtvwn98VPrm7li/giphy.gif)](https://iris-go.com/testimonials/)\n\n[![Benchmarks: Apr 2, 2020 at 12:13pm (UTC)](https://iris-go.com/images/benchmarks.svg)](https://github.com/kataras/server-benchmarks)\n\n## 📖 Démarrer avec Iris\n\n<details>\n<summary>Un simple Hello World</summary>\n\n```sh\n# https://www.iris-go.com/#ebookDonateForm\n$ go get github.com/kataras/iris/v12@latest\n# assume the following code in example.go file\n$ cat example.go\n```\n\n```go\npackage main\n\nimport \"github.com/kataras/iris/v12\"\n\nfunc main() {\n    app := iris.New()\n    app.Get(\"/ping\", func(ctx iris.Context) {\n        ctx.JSON(iris.Map{\n            \"message\": \"pong\",\n        })\n    })\n\n    app.Listen(\":8080\")  // port d'écoute\n}\n```\n\n```sh\n# compile et execute example.go\n$ go run example.go\n# maintenant visitez http://localhost:8080/ping\n```\n\n> Le routing est géré par [muxie](https://github.com/kataras/muxie), la librairie Go la plus rapide et complète.\n\n</details>\n\nIris possède un **[wiki](https://www.iris-go.com/#ebookDonateForm)** complet et précis qui vous permettra d'implémenter ses fonctionnalités rapidement et facilement.\n\n<!-- ![](https://media.giphy.com/media/Ur8iqy9FQfmPuyQpgy/giphy.gif) -->\n\nPour une documentation encore plus complète vous pouvez visiter notre [godocs](https://pkg.go.dev/github.com/kataras/iris/v12@v12.2.11) (en Anglais). Et vous trouverez du code executable dans le dossier [\\_examples](_examples/).\n\n### Vous préférez une version PDF?\n\n<a href=\"https://iris-go.com/#book\"> <img alt=\"Book cover\" src=\"https://iris-go.com/images/iris-book-cover-sm.jpg?v=12\"/> </a>\n\n[![follow author](https://img.shields.io/twitter/follow/makismaropoulos.svg?style=for-the-badge)](https://twitter.com/intent/follow?screen_name=makismaropoulos)\n\nVous pouvez [demander](https://www.iris-go.com/#ebookDonateForm) une version **E-Book** (en Anglais) de la documentation et contribuer au développement d'Iris.\n\n## 🙌 Contribuer\n\nToute contribution à Iris est la bienvenue ! Pour plus d'informations sur la contribution au projet référez-vous au fichier [CONTRIBUTING.md](CONTRIBUTING.md).\n\n[Liste des contributeurs](https://github.com/kataras/iris/graphs/contributors)\n\n## 🛡 Sécurité et vulnérabilités\n\nSi vous trouvez une vulnérabilité dans Iris, envoyez un e-mail à [iris-go@outlook.com](mailto:iris-go@outlook.com). Toute vulnérabilité sera corrigée aussi rapidement que possible.\n\n## 📝 Licence\n\nLe projet est sous licence [licence BSD 3](LICENSE), tout comme le langage Go lui même.\n\nLe nom \"Iris\" est inspiré de la mythologie Grecque.\n<!-- ## Stargazers over time\n\n[![Stargazers over time](https://starchart.cc/kataras/iris.svg)](https://starchart.cc/kataras/iris) -->\n"
        },
        {
          "name": "README_GR.md",
          "type": "blob",
          "size": 5.29,
          "content": "# Iris Web Framework\n\n[![build status](https://img.shields.io/github/actions/workflow/status/kataras/iris/ci.yml?branch=main&style=for-the-badge)](https://github.com/kataras/iris/actions/workflows/ci.yml) [![FOSSA Status](https://img.shields.io/badge/LICENSE%20SCAN-PASSING❤️-CD2956?style=for-the-badge&logo=fossa)](https://app.fossa.io/projects/git%2Bgithub.com%2Fkataras%2Firis?ref=badge_shield)<!--[![report card](https://img.shields.io/badge/report%20card-a%2B-ff3333.svg?style=for-the-badge)](https://goreportcard.com/report/github.com/kataras/iris)--><!--[![godocs](https://img.shields.io/badge/go-%20docs-488AC7.svg?style=for-the-badge)](https://pkg.go.dev/github.com/kataras/iris/v12@v12.2.11)--> [![view examples](https://img.shields.io/badge/learn%20by-examples-0C8EC5.svg?style=for-the-badge&logo=go)](https://github.com/kataras/iris/tree/main/_examples) [![chat](https://img.shields.io/gitter/room/iris_go/community.svg?color=7E18DD&logo=gitter&style=for-the-badge)](https://gitter.im/iris_go/community)<!--[![donate on PayPal](https://img.shields.io/badge/support-PayPal-blue.svg?style=for-the-badge)](https://iris-go.com/donate)--><!-- [![release](https://img.shields.io/badge/release%20-v12.0-0077b3.svg?style=for-the-badge)](https://github.com/kataras/iris/releases) -->\n\nΤο Iris είναι ένα γρήγορο, απλό αλλά και πλήρως λειτουργικό και πολύ αποδοτικό web framework για τη Go γλώσσα προγραμματισμού. Παρέχει ένα εκφραστικό και εύχρηστο υπόβαθρο για την επόμενη ιστοσελίδα σας.\n\nΜάθετε τι [λένε οι άλλοι για το Iris](https://iris-go.com/testimonials/) και δώστε ένα **αστεράκι** στο GitHub.\n\n[![](https://media.giphy.com/media/j5WLmtvwn98VPrm7li/giphy.gif)](https://iris-go.com/testimonials/)\n\n[![Benchmarks: Apr 2, 2020 at 12:13pm (UTC)](https://iris-go.com/images/benchmarks.svg)](https://github.com/kataras/server-benchmarks)\n\n## Μαθαίνοντας το Iris\n\n<details>\n<summary>Γρήγορο ξεκίνημα</summary>\n\n```sh\n# υποθέτοντας ότι ο παρακάτω κώδικας\n# βρίσκεται στο example.go αρχείο\n#\n$ cat example.go\n```\n\n```go\npackage main\n\nimport \"github.com/kataras/iris/v12\"\n\nfunc main() {\n    app := iris.Default()\n    app.Get(\"/ping\", func(ctx iris.Context) {\n        ctx.JSON(iris.Map{\n            \"message\": \"pong\",\n        })\n    })\n\n    app.Listen(\":8080\")\n}\n```\n\n```sh\n# τρέξτε το example.go και\n# επισκεφτείτε την σελίδα http://localhost:8080/ping\n# στο πρόγραμμα περιήγησης σας\n#\n$ go run example.go\n```\n\n> Η δρομολόγηση τροφοδοτείται από το [muxie](https://github.com/kataras/muxie), το πιο ισχυρό και ταχύτερο λογισμικό βασισμένο σε trie αλγόριθμο που γράφτηκε σε Go.\n\n</details>\n\nΤο Iris περιέχει εκτενείς και λεπτομερείς **[book](https://www.iris-go.com/#ebookDonateForm)** καθιστώντας το εύκολο στην εκμάθηση.\n\nΓια λεπτομερέστερη τεχνική τεκμηρίωση μπορείτε να κατευθυνθείτε προς τα [godocs](https://pkg.go.dev/github.com/kataras/iris/v12@v12.2.11) μας. Και για εκτελέσιμο κώδικα μπορείτε πάντα να επισκέπτεστε τα [παραδείγματα](_examples/).\n\n### Σας αρέσει να διαβάζετε ενώ ταξιδεύετε;\n\nΜπορείτε να [ζητήσετε](https://www.iris-go.com/#ebookDonateForm) σήμερα την PDF έκδοση και την online πρόσβαση στο Ηλεκτρονικό μας **Βιβλίο(E-Book)** και να συμμετάσχετε στην ανάπτυξη του Iris.\n\n[![https://iris-go.com/images/iris-book-cover-sm.jpg](https://iris-go.com/images/iris-book-cover-sm.jpg)](https://www.iris-go.com/#ebookDonateForm)\n\n[![follow author](https://img.shields.io/twitter/follow/makismaropoulos.svg?style=for-the-badge)](https://twitter.com/intent/follow?screen_name=makismaropoulos)\n\n## Συνεισφορά\n\nΘα θέλαμε να δούμε τη συμβολή σας στο Iris Web Framework! Για περισσότερες πληροφορίες σχετικά με το πως μπορείτε να συμβάλετε, δείτε το [CONTRIBUTING.md](CONTRIBUTING.md) αρχείο.\n\n[Κατάλογος όλων των συνεισφορών](https://github.com/kataras/iris/graphs/contributors).\n\n## Αδυναμίες Ασφάλειας\n\nΕάν εντοπίσετε κάποια αδυναμία ασφαλείας του Iris, στείλτε ένα μήνυμα ηλεκτρονικού ταχυδρομείου στο [iris-go@outlook.com](mailto:iris-go@outlook.com). Όλες οι τυχών αδυναμίες ασφαλείας θα αντιμετωπιστούν άμεσα.\n\n## Άδεια Χρήσης\n\nΤο όνομα \"Iris\" εμπνεύστηκε από την ελληνική μυθολογία, συγκεκριμένα από την θεά Ίριδα.\n\nΤο Iris Web Framework είναι δωρεάν λογισμικό ανοιχτού λογισμικού με άδεια χρήσης [3-Clause BSD](LICENSE).\n"
        },
        {
          "name": "README_JA.md",
          "type": "blob",
          "size": 11.51,
          "content": "<!--<h1><img width=\"24\" height=\"25\" src =\"https://www.iris-go.com/images/logo-new-lq-45.png\"/> News</h1>\n\n Iris version **12.2.0** has been [released](HISTORY.md#sa-11-march-2023--v1220)! As always, the latest version of Iris comes with the promise of lifetime active maintenance.\n\nTry the official [Iris Command Line Interface](https://github.com/kataras/iris-cli) today! -->\n\n# <a href=\"https://iris-go.com\"><img src=\"https://iris-go.com/images/logo-new-lq-45.png\"></a> Iris Web Framework <a href=\"README_GR.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-greece.svg\" /></a> <a href=\"README_FR.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-france.svg\" /></a> <a href=\"README_ZH_HANT.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-taiwan.svg\" /></a> <a href=\"README_ZH_HANS.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-china.svg\" /></a> <a href=\"README_ES.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-spain.png\" /></a> <a href=\"README_FA.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-iran.svg\" /></a> <a href=\"README_RU.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-russia.svg\" /></a> <a href=\"README_KO.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-south-korea.svg?v=12\" /></a> <a href=\"README_PT_BR.md\"><img width=\"20px\" height=\"20px\" src=\"https://iris-go.com/images/flag-brazil.svg\" /></a> <a href=\"README_JA.md\"><img width=\"20px\" height=\"20px\" src=\"https://iris-go.com/images/flag-japan.svg\" /></a>\n\n[![build status](https://img.shields.io/github/actions/workflow/status/kataras/iris/ci.yml?branch=main&style=for-the-badge)](https://github.com/kataras/iris/actions/workflows/ci.yml) [![view examples](https://img.shields.io/badge/examples%20-285-a83adf.svg?style=for-the-badge&logo=go)](https://github.com/kataras/iris/tree/main/_examples) [![chat](https://img.shields.io/gitter/room/iris_go/community.svg?color=cc2b5e&logo=gitter&style=for-the-badge)](https://gitter.im/iris_go/community) <!--[![FOSSA Status](https://img.shields.io/badge/LICENSE%20SCAN-PASSING❤️-CD2956?style=for-the-badge&logo=fossa)](https://app.fossa.io/projects/git%2Bgithub.com%2Fkataras%2Firis?ref=badge_shield)--> [![donate](https://img.shields.io/badge/support-Iris-blue.svg?style=for-the-badge&logo=paypal)](https://iris-go.com/donate) <!--[![report card](https://img.shields.io/badge/report%20card-a%2B-ff3333.svg?style=for-the-badge)](https://goreportcard.com/report/github.com/kataras/iris)--><!--[![godocs](https://img.shields.io/badge/go-%20docs-488AC7.svg?style=for-the-badge)](https://pkg.go.dev/github.com/kataras/iris/v12@v12.2.11)--> <!-- [![release](https://img.shields.io/badge/release%20-v12.0-0077b3.svg?style=for-the-badge)](https://github.com/kataras/iris/releases) -->\n\nIrisは、高速でシンプルでありながら、十分な機能を備えた、非常に効率的なGo用Webフレームワークです。\n\nあなたの次のウェブサイトやAPIのために、美しく表現力豊かで使いやすい基盤を提供します。\n\n[Irisについての他の人々の意見](https://www.iris-go.com/#review)を学び、このオープンソースプロジェクトに **[スターをつけて](https://github.com/kataras/iris/stargazers)** 、その可能性を応援しましょう。\n\n[![](https://iris-go.com/images/reviews.gif)](https://iris-go.com/testimonials/)\n\n[![Benchmarks: Jul 18, 2020 at 10:46am (UTC)](https://iris-go.com/images/benchmarks.svg)](https://github.com/kataras/server-benchmarks)\n\n```go\npackage main\n\nimport \"github.com/kataras/iris/v12\"\n\nfunc main() {\n  app := iris.New()\n  app.Use(iris.Compression)\n\n  app.Get(\"/\", func(ctx iris.Context) {\n    ctx.HTML(\"Hello <strong>%s</strong>!\", \"World\")\n  })\n\n  app.Listen(\":8080\")\n}\n```\n\n<!-- <details><summary>More with simple Handler</summary>\n\n```go\npackage main\n\nimport \"github.com/kataras/iris/v12\"\n\ntype (\n  request struct {\n    Firstname string `json:\"firstname\"`\n    Lastname  string `json:\"lastname\"`\n  }\n\n  response struct {\n    ID      string `json:\"id\"`\n    Message string `json:\"message\"`\n  }\n)\n\nfunc main() {\n  app := iris.New()\n  app.Handle(\"PUT\", \"/users/{id:uuid}\", updateUser)\n  app.Listen(\":8080\")\n}\n\nfunc updateUser(ctx iris.Context) {\n  id := ctx.Params().Get(\"id\")\n\n  var req request\n  if err := ctx.ReadJSON(&req); err != nil {\n    ctx.StopWithError(iris.StatusBadRequest, err)\n    return\n  }\n\n  resp := response{\n    ID:      id,\n    Message: req.Firstname + \" updated successfully\",\n  }\n  ctx.JSON(resp)\n}\n```\n\n> Read the [routing examples](https://github.com/kataras/iris/blob/main/_examples/routing) for more!\n\n</details>\n\n<details><summary>Handler with custom input and output arguments</summary>\n\n[![https://github.com/kataras/iris/blob/main/_examples/dependency-injection/basic/main.go](https://user-images.githubusercontent.com/22900943/105253731-b8db6d00-5b88-11eb-90c1-0c92a5581c86.png)](https://twitter.com/iris_framework/status/1234783655408668672)\n\n> Interesting? Read the [examples](https://github.com/kataras/iris/blob/main/_examples/dependency-injection).\n\n</details>\n\n<details><summary>Party Controller (NEW)</summary>\n\n> Head over to the [full running example](https://github.com/kataras/iris/blob/main/_examples/routing/party-controller)!\n\n</details>\n\n<details><summary>MVC</summary>\n\n```go\npackage main\n\nimport (\n  \"github.com/kataras/iris/v12\"\n  \"github.com/kataras/iris/v12/mvc\"\n)\n\ntype (\n  request struct {\n    Firstname string `json:\"firstname\"`\n    Lastname  string `json:\"lastname\"`\n  }\n\n  response struct {\n    ID      uint64 `json:\"id\"`\n    Message string `json:\"message\"`\n  }\n)\n\nfunc main() {\n  app := iris.New()\n  mvc.Configure(app.Party(\"/users\"), configureMVC)\n  app.Listen(\":8080\")\n}\n\nfunc configureMVC(app *mvc.Application) {\n  app.Handle(new(userController))\n}\n\ntype userController struct {\n  // [...dependencies]\n}\n\nfunc (c *userController) PutBy(id uint64, req request) response {\n  return response{\n    ID:      id,\n    Message: req.Firstname + \" updated successfully\",\n  }\n}\n```\n\nWant to see more? Navigate through [mvc examples](_examples/mvc)!\n</details>\n\n\n<details><summary>API Guide <strong>HOT</strong></summary>\n\n```go\npackage main\n\nimport (\n  // [other packages...]\n\n  \"github.com/kataras/iris/v12\"\n)\n\nfunc main() {\n  iris.NewGuide().\n    AllowOrigin(\"*\").\n    Compression(true).\n    Health(true, \"development\", \"kataras\").\n    Timeout(0, 20*time.Second, 20*time.Second).\n    Middlewares(basicauth.New(...)).\n    Services(\n        // NewDatabase(),\n        // NewPostgresRepositoryRegistry,\n        // NewUserService,\n    ).\n    API(\"/users\", new(UsersAPI)).\n    Listen(\":80\")\n}\n```\n\n</details>\n\n<br/>\n\n-->\n\nある[Go開発者](https://twitter.com/dkuye/status/1532087942696554497)が言ったように、 **Irisはあなたをあらゆる面でサポートし、長年にわたって力強さを保ち続けています** 。\n\nIrisが提供する機能の一部:\n\n* HTTP/2 (Push, Embedded data)\n* Middleware (Accesslog, Basicauth, CORS, gRPC, Anti-Bot hCaptcha, JWT, MethodOverride, ModRevision, Monitor, PPROF, Ratelimit, Anti-Bot reCaptcha, Recovery, RequestID, Rewrite)\n* API バージョニング\n* Model-View-Controller\n* Websockets\n* gRPC\n* Auto-HTTPS\n* ngrokの組み込みサポートにより、最速の方法でアプリをインターネットに公開できる\n* :uuid、:string、:int のような標準的な型を持つダイナミック・パスをパラメータとするユニークなルーター\n* Compression\n* View Engines (HTML, Django, Handlebars, Pug/Jade and more)\n* 独自のファイルサーバーを作成し、WebDAVサーバーをホストする\n* Cache\n* Localization (i18n, sitemap)\n* Sessions\n* 豊富な Response (HTML, Text, Markdown, XML, YAML, Binary, JSON, JSONP, Protocol Buffers, MessagePack, Content Negotiation, Streaming, Server-Sent Events など)\n* Response Compression (gzip, deflate, brotli, snappy, s2)\n* 豊富な Requests (Bind URL Query, Headers, Form, Text, XML, YAML, Binary, JSON, Validation, Protocol Buffers, MessagePack など)\n* Dependency Injection (MVC, Handlers, API Routers)\n* Testing Suite\n* そして最も重要なのは、初日から現在に至るまで、つまり丸6年間、迅速な回答とサポートを受けられることです！\n\n## 👑 <a href=\"https://iris-go.com/donate\">サポーター</a>\n\n皆様のご協力により、オープンソース・ウェブ開発をより良いものにすることができます！\n\n## 📖 Irisを学ぶ\n\n### インストール\n\n必要なのは [Goプログラミング言語](https://go.dev/dl/) だけです。\n\n#### 新規プロジェクトの作成\n\n```sh\n$ mkdir myapp\n$ cd myapp\n$ go mod init myapp\n$ go get github.com/kataras/iris/v12@latest # or @v12.2.11\n```\n\n<details><summary>既存のプロジェクトにインストールする場合</summary>\n\n```sh\n$ cd myapp\n$ go get github.com/kataras/iris/v12@latest\n```\n\n**実行**\n\n```sh\n$ go mod tidy -compat=1.20 # -compat=\"1.20\" for windows.\n$ go run .\n```\n\n</details>\n\n![](https://www.iris-go.com/images/gifs/install-create-iris.gif)\n\nIris には広範で詳細な **[ドキュメント](https://www.iris-go.com/docs)** が含まれているので、フレームワークを簡単に使い始めることができます。\n\n<!-- Iris contains extensive and thorough **[wiki](https://github.com/kataras/iris/wiki)** making it easy to get started with the framework. -->\n\n<!-- ![](https://media.giphy.com/media/Ur8iqy9FQfmPuyQpgy/giphy.gif) -->\n\nより詳細な技術文書については [godocs](https://pkg.go.dev/github.com/kataras/iris/v12@main) をご覧ください。また、実行可能なコードについては、いつでもリポジトリのサブディレクトリ  [./_examples](_examples)  にアクセスできます。\n\n### 旅行中に本を読むのは好きですか？\n\n<a href=\"https://iris-go.com/#book\"> <img alt=\"Book cover\" src=\"https://iris-go.com/images/iris-book-cover-sm.jpg?v=12\" /> </a>\n\n[![follow author on twitter](https://img.shields.io/twitter/follow/makismaropoulos?color=3D8AA3&logoColor=3D8AA3&style=for-the-badge&logo=twitter)](https://twitter.com/intent/follow?screen_name=makismaropoulos)\n\n[![follow Iris web framework on twitter](https://img.shields.io/twitter/follow/iris_framework?color=ee7506&logoColor=ee7506&style=for-the-badge&logo=twitter)](https://twitter.com/intent/follow?screen_name=iris_framework)\n\n[![follow Iris web framework on facebook](https://img.shields.io/badge/Follow%20%40Iris.framework-569-2D88FF.svg?style=for-the-badge&logo=facebook)](https://www.facebook.com/iris.framework)\n\n**Iris E-Book**（新版、**将来のv12.2.0+**）のPDFとオンライン・アクセスを今すぐ [リクエスト](https://www.iris-go.com/#ebookDonateForm) して、Irisの開発に参加してください。\n\n## 🙌 貢献する\n\nIrisウェブ・フレームワークへの貢献をお待ちしています！Iris プロジェクトへの貢献についての詳細は、 [CONTRIBUTING.md](CONTRIBUTING.md) ファイルをご覧ください。\n\n[全貢献者のリスト](https://github.com/kataras/iris/graphs/contributors)\n\n## 🛡 セキュリティの脆弱性\n\nIris にセキュリティ上の脆弱性を発見した場合は、 [iris-go@outlook.com](mailto:iris-go@outlook.com) にメールを送ってください。すべてのセキュリティ脆弱性は、速やかに対処されます。\n\n## 📝 ライセンス\n\nこのプロジェクトのライセンスは、Goプロジェクトと同様、 [BSD 3-clause license](LICENSE) です。\n\nプロジェクト名の \"Iris\" はギリシャ神話からインスピレーションを得たものです。\n\n<!-- ## Stargazers over time\n\n[![Stargazers over time](https://starchart.cc/kataras/iris.svg)](https://starchart.cc/kataras/iris) -->\n"
        },
        {
          "name": "README_KO.md",
          "type": "blob",
          "size": 4.14,
          "content": "# Iris Web Framework\n\n[![build status](https://img.shields.io/github/actions/workflow/status/kataras/iris/ci.yml?branch=main&style=for-the-badge)](https://github.com/kataras/iris/actions/workflows/ci.yml) [![FOSSA Status](https://img.shields.io/badge/LICENSE%20SCAN-PASSING❤️-CD2956?style=for-the-badge&logo=fossa)](https://app.fossa.io/projects/git%2Bgithub.com%2Fkataras%2Firis?ref=badge_shield)<!--[![report card](https://img.shields.io/badge/report%20card-a%2B-ff3333.svg?style=for-the-badge)](https://goreportcard.com/report/github.com/kataras/iris)--><!--[![godocs](https://img.shields.io/badge/go-%20docs-488AC7.svg?style=for-the-badge)](https://pkg.go.dev/github.com/kataras/iris/v12@v12.2.11)--> [![view examples](https://img.shields.io/badge/learn%20by-examples-0C8EC5.svg?style=for-the-badge&logo=go)](https://github.com/kataras/iris/tree/main/_examples) [![chat](https://img.shields.io/gitter/room/iris_go/community.svg?color=7E18DD&logo=gitter&style=for-the-badge)](https://gitter.im/iris_go/community)<!--[![donate on PayPal](https://img.shields.io/badge/support-PayPal-blue.svg?style=for-the-badge)](https://iris-go.com/donate)--><!-- [![release](https://img.shields.io/badge/release%20-v12.0-0077b3.svg?style=for-the-badge)](https://github.com/kataras/iris/releases) -->\n\nIris는 단순하고 빠르며 좋은 성능과 모든 기능을 갖춘 Go언어용 웹 프레임워크입니다. 당신의 웹사이트나 API를 위해서 아름답고 사용하기 쉬운 기반을 제공합니다.\n\n[여러 사람들의 의견](https://iris-go.com/testimonials/)을 둘러보세요. 그리고 이 github repository을 **star**하세요.\n\n[![](https://media.giphy.com/media/j5WLmtvwn98VPrm7li/giphy.gif)](https://iris-go.com/testimonials/)\n\n[![Benchmarks: Apr 2, 2020 at 12:13pm (UTC)](https://iris-go.com/images/benchmarks.svg)](https://github.com/kataras/server-benchmarks)\n\n## Iris 배우기\n\n<details>\n<summary>일단 해보기</summary>\n\n```sh\n# 다음 코드를 example.go 화일에 입력하세요.\n$ cat example.go\n```\n\n```go\npackage main\n\nimport \"github.com/kataras/iris/v12\"\n\nfunc main() {\n    app := iris.Default()\n    app.Get(\"/ping\", func(ctx iris.Context) {\n        ctx.JSON(iris.Map{\n            \"message\": \"pong\",\n        })\n    })\n\n    app.Listen(\":8080\")\n}\n```\n\n```sh\n# example.go 를 실행하고,\n# 웹브라우저에서 http://localhost:8080/ping 를 열어보세요.\n$ go run example.go\n```\n\n> 라우팅은 Go로 작성한 가장 강력하고 빠른 trie기반의 소프트웨어인 [muxie](https://github.com/kataras/muxie)로 처리합니다.\n\n</details>\n\nIris는 광범위하고 꼼꼼한 **[wiki](https://www.iris-go.com/#ebookDonateForm)** 를 가지고 있기 때문에 쉽게 프레임워크를 시작할 수 있습니다.\n\n더 자세한 기술문서를 보시려면 [godocs](https://pkg.go.dev/github.com/kataras/iris/v12@v12.2.11)를 방문하세요. 그리고 실행가능한 예제코드는 [\\_examples](_examples/) 하위 디렉토리에 있습니다.\n\n### 여행하면서 독서를 즐기세요?\n\n<a href=\"https://iris-go.com/#book\"> <img alt=\"Book cover\" src=\"https://iris-go.com/images/iris-book-cover-sm.jpg?v=12\"/> </a>\n\n[![follow author](https://img.shields.io/twitter/follow/makismaropoulos.svg?style=for-the-badge)](https://twitter.com/intent/follow?screen_name=makismaropoulos)\n\nPDF 버전과 **E-Book** 에 대한 온라인 접근을 [요청](https://www.iris-go.com/#ebookDonateForm)하시고 Iris의 개발에 참가하실 수 있습니다.\n\n## 기여하기\n\nIris 웹 프레임워크에 대한 여러분의 기여를 환영합니다! Iris 프로젝트에 기여하는 방법에 대한 자세한 내용은 [CONTRIBUTING.md](CONTRIBUTING.md) 파일을 참조하십시오.\n\n[기여자 리스트](https://github.com/kataras/iris/graphs/contributors)\n\n## 보안 취약점\n\n만약 Iris에서 보안 취약점을 발견하시면 [iris-go@outlook.com](mailto:iris-go@outlook.com) 로 메일을 보내주세요. 모든 보안 취약점은 즉 해결할 것입니다.\n\n## 라이센스\n\n이 프로젝트의 이름 \"Iris\"는 그리스 신화에서 영감을 받았습니다.\n\nIris 웹 프레임워크는 [3-Clause BSD License](LICENSE)를 가지는 무료 오픈소스 소프트웨어입니다.\n"
        },
        {
          "name": "README_PT_BR.md",
          "type": "blob",
          "size": 11.17,
          "content": "<!-- [![Black Lives Matter](https://iris-go.com/images/blacklivesmatter_banner.png)](https://support.eji.org/give/153413/#!/donation/checkout)-->\n\n# Iris Web Framework <a href=\"README_GR.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-greece.svg\" /></a> <a href=\"README_FR.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-france.svg\" /></a> <a href=\"README_ZH.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-china.svg\" /></a> <a href=\"README_ES.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-spain.png\" /></a> <a href=\"README_FA.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-iran.svg\" /></a> <a href=\"README_RU.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-russia.svg\" /></a> <a href=\"README_KO.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-south-korea.svg?v=12\" /></a> <a href=\"README_PT_BR.md\"><img width=\"20px\" align=\"center\" src=\"https://www.iris-go.com/images/flag-brazil.svg\" /></a> <a href=\"README_JA.md\"><img width=\"20px\" height=\"20px\" src=\"https://iris-go.com/images/flag-japan.svg\" /></a>\n\n[![build status](https://img.shields.io/github/actions/workflow/status/kataras/iris/ci.yml?branch=main&style=for-the-badge)](https://github.com/kataras/iris/actions/workflows/ci.yml) [![view examples](https://img.shields.io/badge/examples%20-270-a83adf.svg?style=for-the-badge&logo=go)](https://github.com/kataras/iris/tree/main/_examples) [![chat](https://img.shields.io/gitter/room/iris_go/community.svg?color=cc2b5e&logo=gitter&style=for-the-badge)](https://gitter.im/iris_go/community) <!--[![FOSSA Status](https://img.shields.io/badge/LICENSE%20SCAN-PASSING❤️-CD2956?style=for-the-badge&logo=fossa)](https://app.fossa.io/projects/git%2Bgithub.com%2Fkataras%2Firis?ref=badge_shield)--> [![donate](https://img.shields.io/badge/support-Iris-blue.svg?style=for-the-badge&logo=paypal)](https://iris-go.com/donate) <!--[![report card](https://img.shields.io/badge/report%20card-a%2B-ff3333.svg?style=for-the-badge)](https://goreportcard.com/report/github.com/kataras/iris)--><!--[![godocs](https://img.shields.io/badge/go-%20docs-488AC7.svg?style=for-the-badge)](https://pkg.go.dev/github.com/kataras/iris/v12@v12.2.11)--> <!-- [![release](https://img.shields.io/badge/release%20-v12.0-0077b3.svg?style=for-the-badge)](https://github.com/kataras/iris/releases) -->\n\n<!-- <a href=\"https://iris-go.com\"> <img align=\"right\" src=\"https://iris-go.com/images/logo-w169.png\"></a> -->\n\nIris é um framework web rápido, simples, mas completo e muito eficiente para Go.\n\nEle fornece uma base lindamente expressiva e fácil de usar para seu próximo site ou API.\n\n\n```go\npackage main\n\nimport \"github.com/kataras/iris/v12\"\n\nfunc main() {\n  app := iris.New()\n  app.Use(iris.Compression)\n\n  app.Get(\"/\", func(ctx iris.Context) {\n    ctx.HTML(\"Hello <strong>%s</strong>!\", \"World\")\n  })\n\n  app.Listen(\":8080\")\n}\n```\n\n<!-- <details><summary>More with simple Handler</summary>\n\n```go\npackage main\n\nimport \"github.com/kataras/iris/v12\"\n\ntype (\n  request struct {\n    Firstname string `json:\"firstname\"`\n    Lastname  string `json:\"lastname\"`\n  }\n\n  response struct {\n    ID      string `json:\"id\"`\n    Message string `json:\"message\"`\n  }\n)\n\nfunc main() {\n  app := iris.New()\n  app.Handle(\"PUT\", \"/users/{id:uuid}\", updateUser)\n  app.Listen(\":8080\")\n}\n\nfunc updateUser(ctx iris.Context) {\n  id := ctx.Params().Get(\"id\")\n\n  var req request\n  if err := ctx.ReadJSON(&req); err != nil {\n    ctx.StopWithError(iris.StatusBadRequest, err)\n    return\n  }\n\n  resp := response{\n    ID:      id,\n    Message: req.Firstname + \" updated successfully\",\n  }\n  ctx.JSON(resp)\n}\n```\n\n> Read the [routing examples](https://github.com/kataras/iris/blob/main/_examples/routing) for more!\n\n</details>\n\n<details><summary>Handler with custom input and output arguments</summary>\n\n[![https://github.com/kataras/iris/blob/main/_examples/dependency-injection/basic/main.go](https://user-images.githubusercontent.com/22900943/105253731-b8db6d00-5b88-11eb-90c1-0c92a5581c86.png)](https://twitter.com/iris_framework/status/1234783655408668672)\n\n> Interesting? Read the [examples](https://github.com/kataras/iris/blob/main/_examples/dependency-injection).\n\n</details>\n\n<details><summary>Party Controller (NEW)</summary>\n\n> Head over to the [full running example](https://github.com/kataras/iris/blob/main/_examples/routing/party-controller)!\n\n</details>\n\n<details><summary>MVC</summary>\n\n```go\npackage main\n\nimport (\n  \"github.com/kataras/iris/v12\"\n  \"github.com/kataras/iris/v12/mvc\"\n)\n\ntype (\n  request struct {\n    Firstname string `json:\"firstname\"`\n    Lastname  string `json:\"lastname\"`\n  }\n\n  response struct {\n    ID      uint64 `json:\"id\"`\n    Message string `json:\"message\"`\n  }\n)\n\nfunc main() {\n  app := iris.New()\n  mvc.Configure(app.Party(\"/users\"), configureMVC)\n  app.Listen(\":8080\")\n}\n\nfunc configureMVC(app *mvc.Application) {\n  app.Handle(new(userController))\n}\n\ntype userController struct {\n  // [...dependencies]\n}\n\nfunc (c *userController) PutBy(id uint64, req request) response {\n  return response{\n    ID:      id,\n    Message: req.Firstname + \" updated successfully\",\n  }\n}\n```\n\nWant to see more? Navigate through [mvc examples](_examples/mvc)!\n</details>\n\n\n<details><summary>API Guide <strong>HOT</strong></summary>\n\n```go\npackage main\n\nimport (\n  // [other packages...]\n\n  \"github.com/kataras/iris/v12\"\n)\n\nfunc main() {\n  iris.NewGuide().\n    AllowOrigin(\"*\").\n    Compression(true).\n    Health(true, \"development\", \"kataras\").\n    Timeout(0, 20*time.Second, 20*time.Second).\n    Middlewares(basicauth.New(...)).\n    Services(\n        // NewDatabase(),\n        // NewPostgresRepositoryRegistry,\n        // NewUserService,\n    ).\n    API(\"/users\", new(UsersAPI)).\n    Listen(\":80\")\n}\n```\n\n</details>\n\n<br/>\n\n-->\n\nComo um [Desenvolvedor Go](https://twitter.com/dkuye/status/1532087942696554497) disse uma vez, **Iris abrangeu tudo e se manteve forte ao longo dos anos**.\n\nAlguns dos recursos que o Iris Web Framework oferece:\n\n* HTTP/2 (Push, mesmo para dados incorporados)\n* Middleware (Accesslog, Basicauth, CORS, gRPC, Anti-Bot hCaptcha, JWT, MethodOverride, ModRevision, Monitor, PPROF, Ratelimit, Anti-Bot reCaptcha, Recovery, RequestID, Rewrite)\n* Versionamento de API\n* Model-View-Controller\n* Websockets\n* gRPC\n* Auto-HTTPS\n* Suporte integrado para ngrok para colocar seu aplicativo na internet da maneira mais rápida\n* Router único com caminho dinâmico como parametro com tipos padrões como :uuid, :string, :int... e a habilidade de criar o seu próprio router\n* Compressão\n* View Engines (HTML, Django, Handlebars, Pug/Jade e mais)\n* Cria seu próprio Servidor de Arquivo e hospeda seu próprio servidor WebDAV\n* Cache\n* Localização (i18n, sitemap)\n* Sessões\n* Respostas Ricas (HTML, Text, Markdown, XML, YAML, Binary, JSON, JSONP, Protocol Buffers, MessagePack, Content Negotiation, Streaming, Server-Sent Events e mais)\n* Compressão de resposta (gzip, deflate, brotli, snappy, s2)\n* Requisições Ricas (Bind URL Query, Headers, Form, Text, XML, YAML, Binary, JSON, Validation, Protocol Buffers, MessagePack e mais)\n* Injeção de dependência (MVC, Handlers, API Routers)\n* Suite de testes\n* E o mais importante... você obtém respostas rápidas e suporte desde o 1º dia até agora - são seis anos completos!\n\nAprenda com [o que os outros falam sobre Iris](https://www.iris-go.com/#review) e **[marque com uma estrela](https://github.com/kataras/iris/stargazers)** esse projeto de código aberto para apoiar o seu potencial.\n\n[![](https://iris-go.com/images/reviews.gif)](https://iris-go.com/testimonials/)\n\n[![Benchmarks: Jul 18, 2020 at 10:46am (UTC)](https://iris-go.com/images/benchmarks.svg)](https://github.com/kataras/server-benchmarks)\n\n## 👑 <a href=\"https://iris-go.com/donate\">Apoiadores</a>\n\nCom a sua ajuda, nós podemos melhorar o desenvolvimento web de Código Aberto para todos !\n\n> [@github](https://github.com/github) agora está patrocinando você por $550,00 uma vez.\n>\n> Uma nota do seu novo patrocinador: \n>\n> Para comemorar o Mês do Mantenedor, queremos agradecer por tudo que você faz pela comunidade de código aberto. Confira nossa postagem no blog para saber mais sobre como o GitHub está investindo em mantenedores\n\n> Doações direto da [China](https://github.com/kataras/iris/issues/1870#issuecomment-1101418349) agora são aceitas!\n\n## 📖 Aprenda sobre o Iris Web Framework\n\n### Instalação\n\nO único requisito é a [Linguagem de programação Go](https://go.dev/dl/).\n\n#### Criar um novo projeto\n\n```sh\n$ mkdir myapp\n$ cd myapp\n$ go mod init myapp\n$ go get github.com/kataras/iris/v12@latest # or @v12.2.11\n```\n\n<details><summary>Instalar num projeto existente</summary>\n\n```sh\n$ cd myapp\n$ go get github.com/kataras/iris/v12@latest\n```\n\n**Run**\n\n```sh\n$ go mod tidy -compat=1.20 # -compat=\"1.20\" for windows.\n$ go run .\n```\n\n</details>\n\n![](https://www.iris-go.com/images/gifs/install-create-iris.gif)\n\nIris contém extensa e completa **[documentação](https://www.iris-go.com/docs)**, o que torna fácil o começo com o framework.\n\n<!-- Iris contains extensive and thorough **[wiki](https://github.com/kataras/iris/wiki)** making it easy to get started with the framework. -->\n\n<!-- ![](https://media.giphy.com/media/Ur8iqy9FQfmPuyQpgy/giphy.gif) -->\n\nPara obter uma documentação técnica mais detalhada, você pode acessar nosso [godocs](https://pkg.go.dev/github.com/kataras/iris/v12@main). E para executar o código você sempre pode visitar os subdiretórios do diretório [./_examples](_examples).\n\n### Você gosta de ler enquanto viaja ?\n\n<a href=\"https://iris-go.com/#book\"> <img alt=\"Book cover\" src=\"https://iris-go.com/images/iris-book-cover-sm.jpg?v=12\" /> </a>\n\n[![follow author on twitter](https://img.shields.io/twitter/follow/makismaropoulos?color=3D8AA3&logoColor=3D8AA3&style=for-the-badge&logo=twitter)](https://twitter.com/intent/follow?screen_name=makismaropoulos)\n\n[![follow Iris web framework on twitter](https://img.shields.io/twitter/follow/iris_framework?color=ee7506&logoColor=ee7506&style=for-the-badge&logo=twitter)](https://twitter.com/intent/follow?screen_name=iris_framework)\n\n[![follow Iris web framework on facebook](https://img.shields.io/badge/Follow%20%40Iris.framework-569-2D88FF.svg?style=for-the-badge&logo=facebook)](https://www.facebook.com/iris.framework)\n\nVocê pode [solicitar](https://www.iris-go.com/#ebookDonateForm) o acesso ao **Iris E-Book** de forma online e também no formato PDF (Nova edição, **future v12.2.0+**) hoje today e se antecipar no desenvolvimento do Iris.\n\n## 🙌 Contribuidores\n\nAdoraríamos ver sua contribuição para o Iris Web Framework! Para mais informações sobre como contribuir com o projeto Iris, consulte o arquivo [CONTRIBUTING.md](CONTRIBUTING.md).\n\n[Lista de todos os Contribuidores](https://github.com/kataras/iris/graphs/contributors)\n\n## 🛡Vulnerabilidades de segurança\n\nSe você descobrir alguma vulnerabilidade de segurança dentro do Iris, por favor, envie um email para [iris-go@outlook.com](mailto:iris-go@outlook.com). Todas as vulnerabilidades de segurança serão prontamente tratadas.\n\n## 📝 Licença\nEste projeto está licenciado sob a [Licença BSD 3-clause](LICENSE), assim como o próprio projeto Go.\n\nO nome do projeto \"Iris\" foi inspirado pela mitologia Grega.\n<!-- ## Stargazers over time\n\n[![Stargazers over time](https://starchart.cc/kataras/iris.svg)](https://starchart.cc/kataras/iris) -->\n"
        },
        {
          "name": "README_RU.md",
          "type": "blob",
          "size": 5.45,
          "content": "# Iris Web Framework\n\n[![build status](https://img.shields.io/github/actions/workflow/status/kataras/iris/ci.yml?branch=main&style=for-the-badge)](https://github.com/kataras/iris/actions/workflows/ci.yml) [![FOSSA Status](https://img.shields.io/badge/LICENSE%20SCAN-PASSING❤️-CD2956?style=for-the-badge&logo=fossa)](https://app.fossa.io/projects/git%2Bgithub.com%2Fkataras%2Firis?ref=badge_shield)<!--[![report card](https://img.shields.io/badge/report%20card-a%2B-ff3333.svg?style=for-the-badge)](https://goreportcard.com/report/github.com/kataras/iris)--><!--[![godocs](https://img.shields.io/badge/go-%20docs-488AC7.svg?style=for-the-badge)](https://pkg.go.dev/github.com/kataras/iris/v12@v12.2.11)--> [![view examples](https://img.shields.io/badge/learn%20by-examples-0C8EC5.svg?style=for-the-badge&logo=go)](https://github.com/kataras/iris/tree/main/_examples) [![chat](https://img.shields.io/gitter/room/iris_go/community.svg?color=7E18DD&logo=gitter&style=for-the-badge)](https://gitter.im/iris_go/community)<!--[![donate on PayPal](https://img.shields.io/badge/support-PayPal-blue.svg?style=for-the-badge)](https://iris-go.com/donate)--><!-- [![release](https://img.shields.io/badge/release%20-v12.0-0077b3.svg?style=for-the-badge)](https://github.com/kataras/iris/releases) -->\nIris — это быстрый, простой, но полнофункциональный и эффективный веб-фреймворк для Go. Он обеспечивает красивую, выразительную и простую в использовании основу для вашего следующего веб-сайта или API.\n\nУзнайте, что [говорят другие люди об Iris](https://iris-go.com/testimonials/) и поставьте **[звёздочку](https://github.com/kataras/iris/stargazers)** этому проекту с открытым исходным кодом, чтобы поддержать его потенциал.\n\n[![](https://media.giphy.com/media/j5WLmtvwn98VPrm7li/giphy.gif)](https://iris-go.com/testimonials/)\n\n[![Benchmarks: Apr 2, 2020 at 12:13pm (UTC)](https://iris-go.com/images/benchmarks.svg)](https://github.com/kataras/server-benchmarks)\n\n## Изучение Iris\n\n<details>\n<summary>Быстрый старт</summary>\n\n```sh\n# например, код в файле example.go будет таким:\n$ cat example.go\n```\n\n```go\npackage main\n\nimport \"github.com/kataras/iris/v12\"\n\nfunc main() {\n    app := iris.Default()\n    app.Get(\"/ping\", func(ctx iris.Context) {\n        ctx.JSON(iris.Map{\n            \"message\": \"pong\",\n        })\n    })\n\n    app.Listen(\":8080\")\n}\n```\n\n```sh\n# запустите example.go и перейдите в браузер\n# по адресу http://localhost:8080/ping\n$ go run example.go\n```\n\n> Система роутинга запросов работает на [muxie](https://github.com/kataras/muxie), мощное и быстрое trie-based ПО, написанное на Go.\n\n</details>\n\nУ Iris есть исчерпывающий и тщательный **[wiki](https://www.iris-go.com/#ebookDonateForm)**, который позволит вам быстрее начать работу с фреймворком.\n\n<!-- ![](https://media.giphy.com/media/Ur8iqy9FQfmPuyQpgy/giphy.gif) -->\n\nДля получения более подробной технической документации вы можете обратиться к нашему [godoc](https://pkg.go.dev/github.com/kataras/iris/v12@v12.2.11). А для живых примеров кода — вы всегда можете посетить [\\_examples](_examples/) в поддиректории этого репозитория.\n\n### Вы любите читать во время путешествий?\n\n<a href=\"https://iris-go.com/#book\"> <img alt=\"Book cover\" src=\"https://iris-go.com/images/iris-book-cover-sm.jpg?v=12\" /> </a>\n\n<!-- [![follow author](https://img.shields.io/twitter/follow/makismaropoulos.svg?style=for-the-badge)](https://twitter.com/intent/follow?screen_name=makismaropoulos) -->\n\nВы можете [запросить](https://www.iris-go.com/#ebookDonateForm) PDF версию и онлайн-доступ к **E-Book** сегодня и принять участие в разработке Iris.\n\n## Содействие\n\nМы будем рады видеть ваш вклад в веб-фреймворк Iris! Для получения дополнительной информации о содействии проекту Iris, пожалуйста, проверьте файл [CONTRIBUTING.md](CONTRIBUTING.md).\n\n[Список всех участников](https://github.com/kataras/iris/graphs/contributors)\n\n## Уязвимость безопасности\n\nЕсли вы обнаружите уязвимость безопасности в Iris, отправьте электронное письмо по адресу [iris-go@outlook.com](mailto:iris-go@outlook.com). Все уязвимости безопасности будут оперативно устранены.\n\n## Лицензия\n\nНазвание проекта «Iris» было вдохновлено греческой мифологией.\n\nВеб-фреймворк Iris — это ПО с открытым исходным кодом под лицензией [3-Clause BSD License](LICENSE).\n\n## Накопление звёзд со временем\n\n[![Stargazers over time](https://starchart.cc/kataras/iris.svg)](https://starchart.cc/kataras/iris)\n"
        },
        {
          "name": "README_VN.md",
          "type": "blob",
          "size": 11.26,
          "content": "<!--<h1><img width=\"24\" height=\"25\" src =\"https://www.iris-go.com/images/logo-new-lq-45.png\"/> News</h1>\n\n Iris version **12.2.0** has been [released](HISTORY.md#sa-11-march-2023--v1220)! As always, the latest version of Iris comes with the promise of lifetime active maintenance.\n\nTry the official [Iris Command Line Interface](https://github.com/kataras/iris-cli) today! -->\n\n# <a href=\"https://iris-go.com\"><img src=\"https://iris-go.com/images/logo-new-lq-45.png\"></a> Iris Web Framework <a href=\"README_GR.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-greece.svg\" /></a> <a href=\"README_FR.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-france.svg\" /></a> <a href=\"README_ZH_HANT.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-taiwan.svg\" /></a> <a href=\"README_ZH_HANS.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-china.svg\" /></a> <a href=\"README_ES.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-spain.png\" /></a> <a href=\"README_FA.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-iran.svg\" /></a> <a href=\"README_RU.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-russia.svg\" /></a> <a href=\"README_KO.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-south-korea.svg?v=12\" /></a> <a href=\"README_PT_BR.md\"><img width=\"20px\" height=\"20px\" src=\"https://iris-go.com/images/flag-brazil.svg\" /></a>\n\n[![build status](https://img.shields.io/github/actions/workflow/status/kataras/iris/ci.yml?branch=main&style=for-the-badge)](https://github.com/kataras/iris/actions/workflows/ci.yml) [![view examples](https://img.shields.io/badge/examples%20-285-a83adf.svg?style=for-the-badge&logo=go)](https://github.com/kataras/iris/tree/main/_examples) [![chat](https://img.shields.io/gitter/room/iris_go/community.svg?color=cc2b5e&logo=gitter&style=for-the-badge)](https://gitter.im/iris_go/community) <!--[![FOSSA Status](https://img.shields.io/badge/LICENSE%20SCAN-PASSING❤️-CD2956?style=for-the-badge&logo=fossa)](https://app.fossa.io/projects/git%2Bgithub.com%2Fkataras%2Firis?ref=badge_shield)--> [![donate](https://img.shields.io/badge/support-Iris-blue.svg?style=for-the-badge&logo=paypal)](https://iris-go.com/donate) <!--[![report card](https://img.shields.io/badge/report%20card-a%2B-ff3333.svg?style=for-the-badge)](https://goreportcard.com/report/github.com/kataras/iris)--><!--[![godocs](https://img.shields.io/badge/go-%20docs-488AC7.svg?style=for-the-badge)](https://pkg.go.dev/github.com/kataras/iris/v12@v12.2.11)--> <!-- [![release](https://img.shields.io/badge/release%20-v12.0-0077b3.svg?style=for-the-badge)](https://github.com/kataras/iris/releases) -->\n\nIris là một khung web nhanh, đơn giản nhưng đầy đủ tính năng và rất hiệu quả dành cho Go.\n\nNó cung cấp một nền tảng đẹp mắt và dễ sử dụng cho trang web hoặc API tiếp theo của bạn.\n\n\nTìm hiểu xem [những người khác nói gì về Iris](https://www.iris-go.com/#review) và **[gắn sao](https://github.com/kataras/iris/stargazers)** dự án mã nguồn mở này để phát huy tiềm năng của nó.\n\n[![](https://iris-go.com/images/reviews.gif)](https://iris-go.com/testimonials/)\n\n[![Benchmarks: Jul 18, 2020 at 10:46am (UTC)](https://iris-go.com/images/benchmarks.svg)](https://github.com/kataras/server-benchmarks)\n\n```go\npackage main\n\nimport \"github.com/kataras/iris/v12\"\n\nfunc main() {\n  app := iris.New()\n  app.Use(iris.Compression)\n\n  app.Get(\"/\", func(ctx iris.Context) {\n    ctx.HTML(\"Xin chào <strong>%s</strong>!\", \"Thế Giới\")\n  })\n\n  app.Listen(\":8080\")\n}\n```\n\n<!-- <details><summary>More with simple Handler</summary>\n\n```go\npackage main\n\nimport \"github.com/kataras/iris/v12\"\n\ntype (\n  request struct {\n    Firstname string `json:\"firstname\"`\n    Lastname  string `json:\"lastname\"`\n  }\n\n  response struct {\n    ID      string `json:\"id\"`\n    Message string `json:\"message\"`\n  }\n)\n\nfunc main() {\n  app := iris.New()\n  app.Handle(\"PUT\", \"/users/{id:uuid}\", updateUser)\n  app.Listen(\":8080\")\n}\n\nfunc updateUser(ctx iris.Context) {\n  id := ctx.Params().Get(\"id\")\n\n  var req request\n  if err := ctx.ReadJSON(&req); err != nil {\n    ctx.StopWithError(iris.StatusBadRequest, err)\n    return\n  }\n\n  resp := response{\n    ID:      id,\n    Message: req.Firstname + \" updated successfully\",\n  }\n  ctx.JSON(resp)\n}\n```\n\n> Read the [routing examples](https://github.com/kataras/iris/blob/main/_examples/routing) for more!\n\n</details>\n\n<details><summary>Handler with custom input and output arguments</summary>\n\n[![https://github.com/kataras/iris/blob/main/_examples/dependency-injection/basic/main.go](https://user-images.githubusercontent.com/22900943/105253731-b8db6d00-5b88-11eb-90c1-0c92a5581c86.png)](https://twitter.com/iris_framework/status/1234783655408668672)\n\n> Interesting? Read the [examples](https://github.com/kataras/iris/blob/main/_examples/dependency-injection).\n\n</details>\n\n<details><summary>Party Controller (NEW)</summary>\n\n> Head over to the [full running example](https://github.com/kataras/iris/blob/main/_examples/routing/party-controller)!\n\n</details>\n\n<details><summary>MVC</summary>\n\n```go\npackage main\n\nimport (\n  \"github.com/kataras/iris/v12\"\n  \"github.com/kataras/iris/v12/mvc\"\n)\n\ntype (\n  request struct {\n    Firstname string `json:\"firstname\"`\n    Lastname  string `json:\"lastname\"`\n  }\n\n  response struct {\n    ID      uint64 `json:\"id\"`\n    Message string `json:\"message\"`\n  }\n)\n\nfunc main() {\n  app := iris.New()\n  mvc.Configure(app.Party(\"/users\"), configureMVC)\n  app.Listen(\":8080\")\n}\n\nfunc configureMVC(app *mvc.Application) {\n  app.Handle(new(userController))\n}\n\ntype userController struct {\n  // [...dependencies]\n}\n\nfunc (c *userController) PutBy(id uint64, req request) response {\n  return response{\n    ID:      id,\n    Message: req.Firstname + \" updated successfully\",\n  }\n}\n```\n\nWant to see more? Navigate through [mvc examples](_examples/mvc)!\n</details>\n\n\n<details><summary>API Guide <strong>HOT</strong></summary>\n\n```go\npackage main\n\nimport (\n  // [other packages...]\n\n  \"github.com/kataras/iris/v12\"\n)\n\nfunc main() {\n  iris.NewGuide().\n    AllowOrigin(\"*\").\n    Compression(true).\n    Health(true, \"development\", \"kataras\").\n    Timeout(0, 20*time.Second, 20*time.Second).\n    Middlewares(basicauth.New(...)).\n    Services(\n        // NewDatabase(),\n        // NewPostgresRepositoryRegistry,\n        // NewUserService,\n    ).\n    API(\"/users\", new(UsersAPI)).\n    Listen(\":80\")\n}\n```\n\n</details>\n\n<br/>\n\n-->\n\nNhư một [nhà phát triển Go](https://twitter.com/dkuye/status/1532087942696554497) đã từng nói, **Iris giúp bạn bảo vệ toàn diện và đứng vững qua nhiều năm**.\n\nMột số tính năng Iris cung cấp:\n\n* HTTP/2 (Push, cả những Embedded data)\n* Middleware (Accesslog, Basicauth, CORS, gRPC, Anti-Bot hCaptcha, JWT, MethodOverride, ModRevision, Monitor, PPROF, Ratelimit, Anti-Bot reCaptcha, Recovery, RequestID, Rewrite)\n* API Versioning\n* Model-View-Controller\n* Websockets\n* gRPC\n* Auto-HTTPS\n* Tích hợp hỗ trợ ngrok để đưa ứng dụng của bạn lên internet một cách nhanh nhất\n* Unique Router với đường dẫn động làm tham số với các loại tiêu chuẩn như :uuid, :string, :int... và khả năng tạo của riêng bạn\n* Compression\n* View Engines (HTML, Django, Handlebars, Pug/Jade and more)\n* Tạo Máy chủ tệp của riêng bạn và lưu trữ máy chủ WebDAV của riêng bạn\n* Cache\n* Localization (i18n, sitemap)\n* Sessions\n* Rich Responses (HTML, Text, Markdown, XML, YAML, Binary, JSON, JSONP, Protocol Buffers, MessagePack, Content Negotiation, Streaming, Server-Sent Events and more)\n* Response Compression (gzip, deflate, brotli, snappy, s2)\n* Rich Requests (Bind URL Query, Headers, Form, Text, XML, YAML, Binary, JSON, Validation, Protocol Buffers, MessagePack and more)\n* Dependency Injection (MVC, Handlers, API Routers)\n* Testing Suite\n* Và điều quan trọng nhất... bạn nhận được câu trả lời và hỗ trợ nhanh chóng từ ngày đầu tiên cho đến bây giờ - đó là sáu năm đầy đủ!\n\n## 👑 <a href=\"https://iris-go.com/donate\">Người ủng hộ</a>\n\nVới sự giúp đỡ của bạn, chúng tôi có thể cải thiện việc phát triển web Nguồn mở cho mọi người!\n\n## 📖 Học Iris\n\n### Cài đặt\n\nYêu cầu duy nhất là [Ngôn ngữ lập trình Go](https://go.dev/dl/).\n\n#### Tạo một dự án mới\n\n```sh\n$ mkdir myapp\n$ cd myapp\n$ go mod init myapp\n$ go get github.com/kataras/iris/v12@latest # or @v12.2.11\n```\n\n<details><summary>Cài đặt trên dự án hiện có</summary>\n\n```sh\n$ cd myapp\n$ go get github.com/kataras/iris/v12@latest\n```\n\n**Run**\n\n```sh\n$ go mod tidy -compat=1.20 # -compat=\"1.20\" for windows.\n$ go run .\n```\n\n</details>\n\n![](https://www.iris-go.com/images/gifs/install-create-iris.gif)\n\nIris chứa **[tài liệu](https://www.iris-go.com/docs)** phong phú và kỹ lưỡng giúp bạn dễ dàng bắt đầu với khung.\n\n<!-- Iris contains extensive and thorough **[wiki](https://github.com/kataras/iris/wiki)** making it easy to get started with the framework. -->\n\n<!-- ![](https://media.giphy.com/media/Ur8iqy9FQfmPuyQpgy/giphy.gif) -->\n\nĐể có tài liệu kỹ thuật chi tiết hơn, bạn có thể truy cập [godocs](https://pkg.go.dev/github.com/kataras/iris/v12@main) của chúng tôi. Và đối với mã thực thi, bạn luôn có thể truy cập thư mục con của kho lưu trữ [./_examples](_examples).\n\n### Bạn có thích đọc khi đi du lịch không?\n\n<a href=\"https://iris-go.com/#book\"> <img alt=\"Book cover\" src=\"https://iris-go.com/images/iris-book-cover-sm.jpg?v=12\" /> </a>\n\n[![follow author on twitter](https://img.shields.io/twitter/follow/makismaropoulos?color=3D8AA3&logoColor=3D8AA3&style=for-the-badge&logo=twitter)](https://twitter.com/intent/follow?screen_name=makismaropoulos)\n\n[![follow Iris web framework on twitter](https://img.shields.io/twitter/follow/iris_framework?color=ee7506&logoColor=ee7506&style=for-the-badge&logo=twitter)](https://twitter.com/intent/follow?screen_name=iris_framework)\n\n[![follow Iris web framework on facebook](https://img.shields.io/badge/Follow%20%40Iris.framework-569-2D88FF.svg?style=for-the-badge&logo=facebook)](https://www.facebook.com/iris.framework)\n\nBạn có thể [yêu cầu](https://www.iris-go.com/#ebookDonateForm) PDF và truy cập trực tuyến **Sách điện tử Iris** (Phiên bản mới, **tương lai v12.2.0+**) hôm nay và được tham gia vào sự phát triển của Iris.\n\n## 🙌 Đóng góp\n\nChúng tôi muốn thấy sự đóng góp của bạn cho Iris Web Framework! Để biết thêm thông tin về việc đóng góp cho dự án Iris, vui lòng kiểm tra tệp [CONTRIBUTING.md](CONTRIBUTING.md).\n\n[Danh sách những người đóng góp](https://github.com/kataras/iris/graphs/contributors)\n\n## 🛡 Lỗ hổng bảo mật\n\nNếu bạn phát hiện ra lỗ hổng bảo mật trong Iris, vui lòng gửi e-mail tới [iris-go@outlook.com](mailto:iris-go@outlook.com). Tất cả các lỗ hổng bảo mật sẽ được giải quyết kịp thời.\n\n## 📝 Giấy phép\n\nDự án này được cấp phép theo [BSD 3-clause license](LICENSE), giống như chính dự án Go.\n\nTên dự án \"Iris\" được lấy cảm hứng từ thần thoại Hy Lạp.\n<!-- ## Stargazers over time\n\n[![Stargazers over time](https://starchart.cc/kataras/iris.svg)](https://starchart.cc/kataras/iris) -->\n"
        },
        {
          "name": "README_ZH.md",
          "type": "blob",
          "size": 1.27,
          "content": "# Iris Web Framework <a href=\"README_GR.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-greece.svg\" /></a> <a href=\"README_FR.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-france.svg\" /></a> <a href=\"README_ZH_HANT.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-taiwan.svg\" /></a> <a href=\"README_ZH_HANS.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-china.svg\" /></a> <a href=\"README_ES.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-spain.png\" /></a> <a href=\"README_FA.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-iran.svg\" /></a> <a href=\"README_RU.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-russia.svg\" /></a> <a href=\"README_KO.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-south-korea.svg?v=12\" /></a> <a href=\"README_PT_BR.md\"><img width=\"20px\" height=\"20px\" src=\"https://iris-go.com/images/flag-brazil.svg\" /></a> <a href=\"README_JA.md\"><img width=\"20px\" height=\"20px\" src=\"https://iris-go.com/images/flag-japan.svg\" /></a>\n\n<img width=\"16px\" src=\"https://iris-go.com/images/flag-chinese-zht.png\" /> [Traditional Chinese (zht / zh-Hant)](README_ZH_HANT.md)\n\n<img width=\"16px\" src=\"https://iris-go.com/images/flag-chinese-zhs.png\" /> [Simplified Chinese (zhs / zh-Hans)](README_ZH_HANS.md)\n"
        },
        {
          "name": "README_ZH_HANS.md",
          "type": "blob",
          "size": 7.95,
          "content": "[![黑人的命也是命](https://iris-go.com/images/blacklivesmatter_banner.png)](https://support.eji.org/give/153413/#!/donation/checkout)\n\n<!-- # News -->\n\n> 这是一个**开发中的版本**。敬请关注即将发布的版本 [v12.2.0](HISTORY.md#Next)。如果想使用稳定版本，请查看 [v12.1.8 分支](https://github.com/kataras/iris/tree/v12.1.8) 。\n>\n> ![](https://iris-go.com/images/cli.png) 立即尝试官方的[Iris命令行工具](https://github.com/kataras/iris-cli)！\n\n<!-- ![](https://iris-go.com/images/release.png) Iris version **12.1.8** has been [released](HISTORY.md#su-16-february-2020--v1218)! -->\n\n# Iris Web Framework <a href=\"README_GR.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-greece.svg\" /></a> <a href=\"README_FR.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-france.svg\" /></a> <a href=\"README_ZH.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-china.svg\" /></a> <a href=\"README_ES.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-spain.png\" /></a> <a href=\"README_FA.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-iran.svg\" /></a> <a href=\"README_RU.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-russia.svg\" /></a> <a href=\"README_KO.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-south-korea.svg?v=12\" /></a> <a href=\"README_JA.md\"><img width=\"20px\" height=\"20px\" src=\"https://iris-go.com/images/flag-japan.svg\" /></a>\n\n[![build status](https://img.shields.io/github/actions/workflow/status/kataras/iris/ci.yml?branch=main&style=for-the-badge)](https://github.com/kataras/iris/actions/workflows/ci.yml) [![view examples](https://img.shields.io/badge/examples%20-253-a83adf.svg?style=for-the-badge&logo=go)](https://github.com/kataras/iris/tree/main/_examples) [![chat](https://img.shields.io/gitter/room/iris_go/community.svg?color=cc2b5e&logo=gitter&style=for-the-badge)](https://gitter.im/iris_go/community) <!--[![FOSSA Status](https://img.shields.io/badge/LICENSE%20SCAN-PASSING❤️-CD2956?style=for-the-badge&logo=fossa)](https://app.fossa.io/projects/git%2Bgithub.com%2Fkataras%2Firis?ref=badge_shield)--> [![donate](https://img.shields.io/badge/support-Iris-blue.svg?style=for-the-badge&logo=paypal)](https://iris-go.com/donate) <!--[![report card](https://img.shields.io/badge/report%20card-a%2B-ff3333.svg?style=for-the-badge)](https://goreportcard.com/report/github.com/kataras/iris)--><!--[![godocs](https://img.shields.io/badge/go-%20docs-488AC7.svg?style=for-the-badge)](https://pkg.go.dev/github.com/kataras/iris/v12@v12.2.11)--> <!-- [![release](https://img.shields.io/badge/release%20-v12.0-0077b3.svg?style=for-the-badge)](https://github.com/kataras/iris/releases) -->\n\n<!-- <a href=\"https://iris-go.com\"> <img align=\"right\" src=\"https://iris-go.com/images/logo-w169.png\"></a> -->\n\nIris 是基于 Go 编写的一个快速，简单但功能齐全且非常高效的 Web 框架。 \n\n它为您的下一个网站或 API 提供了一个非常富有表现力且易于使用的基础。\n\n看看 [其他人如何评价 Iris](https://iris-go.com/testimonials/)，同时欢迎各位为此开源项目点亮 **[star](https://github.com/kataras/iris/stargazers)**。\n\n[![](https://iris-go.com/images/reviews.gif)](https://iris-go.com/testimonials/)\n\n[![Benchmarks: Jul 18, 2020 at 10:46am (UTC)](https://iris-go.com/images/benchmarks.svg)](https://github.com/kataras/server-benchmarks)\n\n## 📖 开始学习 Iris\n\n```sh\n# 安装Iris：https://www.iris-go.com/#ebookDonateForm\n$ go get github.com/kataras/iris/v12@latest\n# 假设main.go文件中已存在以下代码\n$ cat main.go\n```\n\n```go\npackage main\n\nimport \"github.com/kataras/iris/v12\"\n\nfunc main() {\n\tapp := iris.New()\n\n\tbooksAPI := app.Party(\"/books\")\n\t{\n\t\tbooksAPI.Use(iris.Compression)\n\n\t\t// GET: http://localhost:8080/books\n\t\tbooksAPI.Get(\"/\", list)\n\t\t// POST: http://localhost:8080/books\n\t\tbooksAPI.Post(\"/\", create)\n\t}\n\n\tapp.Listen(\":8080\")\n}\n\n// Book example.\ntype Book struct {\n\tTitle string `json:\"title\"`\n}\n\nfunc list(ctx iris.Context) {\n\tbooks := []Book{\n\t\t{\"Mastering Concurrency in Go\"},\n\t\t{\"Go Design Patterns\"},\n\t\t{\"Black Hat Go\"},\n\t}\n\n\tctx.JSON(books)\n\t// 提示: 在服务器优先级和客户端请求中进行响应协商，\n\t// 以此来代替 ctx.JSON:\n\t// ctx.Negotiation().JSON().MsgPack().Protobuf()\n\t// ctx.Negotiate(books)\n}\n\nfunc create(ctx iris.Context) {\n\tvar b Book\n\terr := ctx.ReadJSON(&b)\n\t// 提示: 使用 ctx.ReadBody(&b) 代替，来绑定所有类型的入参\n\tif err != nil {\n\t\tctx.StopWithProblem(iris.StatusBadRequest, iris.NewProblem().\n\t\t\tTitle(\"Book creation failure\").DetailErr(err))\n\t\t// 提示: 如果仅有纯文本（plain text）错误响应，\n        // 可使用 ctx.StopWithError(code, err) \n\t\treturn\n\t}\n\n\tprintln(\"Received Book: \" + b.Title)\n\n\tctx.StatusCode(iris.StatusCreated)\n}\n```\n\n同样地，在**MVC**中 :\n\n```go\nimport \"github.com/kataras/iris/v12/mvc\"\n```\n\n```go\nm := mvc.New(booksAPI)\nm.Handle(new(BookController))\n```\n\n```go\ntype BookController struct {\n\t/* dependencies */\n}\n\n// GET: http://localhost:8080/books\nfunc (c *BookController) Get() []Book {\n\treturn []Book{\n\t\t{\"Mastering Concurrency in Go\"},\n\t\t{\"Go Design Patterns\"},\n\t\t{\"Black Hat Go\"},\n\t}\n}\n\n// POST: http://localhost:8080/books\nfunc (c *BookController) Post(b Book) int {\n\tprintln(\"Received Book: \" + b.Title)\n\n\treturn iris.StatusCreated\n}\n```\n\n**启动** 您的 Iris web 服务:\n\n```sh\n$ go run main.go\n> Now listening on: http://localhost:8080\n> Application started. Press CTRL+C to shut down.\n```\n\nBooks **列表查询** :\n\n```sh\n$ curl --header 'Accept-Encoding:gzip' http://localhost:8080/books\n\n[\n  {\n    \"title\": \"Mastering Concurrency in Go\"\n  },\n  {\n    \"title\": \"Go Design Patterns\"\n  },\n  {\n    \"title\": \"Black Hat Go\"\n  }\n]\n```\n\n**创建** 新的Book:\n\n```sh\n$ curl -i -X POST \\\n--header 'Content-Encoding:gzip' \\\n--header 'Content-Type:application/json' \\\n--data \"{\\\"title\\\":\\\"Writing An Interpreter In Go\\\"}\" \\\nhttp://localhost:8080/books\n\n> HTTP/1.1 201 Created\n```\n\n这是**错误**响应所展示的样子：\n\n```sh\n$ curl -X POST --data \"{\\\"title\\\" \\\"not valid one\\\"}\" \\\nhttp://localhost:8080/books\n\n> HTTP/1.1 400 Bad Request\n\n{\n  \"status\": 400,\n  \"title\": \"Book creation failure\"\n  \"detail\": \"invalid character '\\\"' after object key\",\n}\n```\n\n</details>\n\n[![run in the browser](https://img.shields.io/badge/Run-in%20the%20Browser-348798.svg?style=for-the-badge&logo=repl.it)](https://replit.com/@kataras/Iris-Hello-World-v1220?v=1)\n\nIris 有完整且详尽的 **[使用文档](https://www.iris-go.com/#ebookDonateForm)** ，让您可以轻松地使用此框架。\n\n<!-- ![](https://media.giphy.com/media/Ur8iqy9FQfmPuyQpgy/giphy.gif) -->\n\n要了解更详细的技术文档，请访问我们的 [godocs](https://pkg.go.dev/github.com/kataras/iris/v12@main)。如果想要寻找代码示例，您可以到仓库的 [./_examples](_examples) 子目录下获取。\n\n### 你喜欢在旅行时阅读吗？\n\n<a href=\"https://iris-go.com/#book\"> <img alt=\"Book cover\" src=\"https://iris-go.com/images/iris-book-cover-sm.jpg?v=12\" /> </a>\n\n[![follow Iris web framework on twitter](https://img.shields.io/twitter/follow/iris_framework?color=ee7506&logoColor=ee7506&style=for-the-badge)](https://twitter.com/intent/follow?screen_name=iris_framework)\n\n您可以[获取](https://www.iris-go.com/#ebookDonateForm)PDF版本或在线访问**电子图书**，并参与到Iris的开发中。\n\n## 🙌 贡献\n\n我们欢迎您为Iris框架做出贡献！想要知道如何为Iris项目做贡献，请查看[CONTRIBUTING.md](CONTRIBUTING.md)。\n\n[贡献者名单](https://github.com/kataras/iris/graphs/contributors)\n\n## 🛡 安全漏洞\n\n如果您发现在 Iris 存在安全漏洞，请发送电子邮件至 [iris-go@outlook.com](mailto:iris-go@outlook.com)。所有安全漏洞将会得到及时解决。\n\n## 📝 开源协议（License）\n\n就像Go语言的协议一样，此项目也采用 [BSD 3-clause license](LICENSE)。\n\n项目名称 \"Iris\" 的灵感来自于希腊神话。\n\n<!-- ## Stargazers over time\n\n[![Stargazers over time](https://starchart.cc/kataras/iris.svg)](https://starchart.cc/kataras/iris) -->\n"
        },
        {
          "name": "README_ZH_HANT.md",
          "type": "blob",
          "size": 11.95,
          "content": "<!-- [![黑人的命也是命](https://iris-go.com/images/blacklivesmatter_banner.png)](https://support.eji.org/give/153413/#!/donation/checkout)\n\n# 新聞\n\n> 此為 **開發中** 分支——功能不僅最新，而且最好。敬請期待接下來的發行版本 [v12.2.0](HISTORY.md#Next)。若需比較穩定的分支，請改前往 [v12.1.8 分支](https://github.com/kataras/iris/tree/v12.1.8)。\n>\n> ![](https://iris-go.com/images/cli.png) 立刻試試看官方的 [Iris 命令列介面 (CLI)](https://github.com/kataras/iris-cli)！\n\n> 因為工作量過大，[問題](https://github.com/kataras/iris/issues) 解答的速度可能會有所延宕。 -->\n\n<!-- ![](https://iris-go.com/images/release.png) Iris 的 **12.1.8** 版本已經 [釋出](HISTORY.md#su-16-february-2020--v1218)! -->\n\n# Iris Web 框架 <a href=\"README_GR.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-greece.svg\" /></a> <a href=\"README_FR.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-france.svg\" /></a> <a href=\"README_ZH.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-china.svg\" /></a> <a href=\"README_ES.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-spain.png\" /></a> <a href=\"README_FA.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-iran.svg\" /></a> <a href=\"README_RU.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-russia.svg\" /></a> <a href=\"README_KO.md\"><img width=\"20px\" src=\"https://iris-go.com/images/flag-south-korea.svg?v=12\" /></a> <a href=\"README_PT_BR.md\"><img width=\"20px\" height=\"20px\" src=\"https://iris-go.com/images/flag-brazil.svg\" /></a> <a href=\"README_JA.md\"><img width=\"20px\" height=\"20px\" src=\"https://iris-go.com/images/flag-japan.svg\" /></a>\n\n[![組建狀態](https://img.shields.io/github/actions/workflow/status/kataras/iris/ci.yml?branch=main&style=for-the-badge)](https://github.com/kataras/iris/actions/workflows/ci.yml) [![查看範例](https://img.shields.io/badge/examples%20-285-a83adf.svg?style=for-the-badge&logo=go)](https://github.com/kataras/iris/tree/main/_examples) [![聊天室](https://img.shields.io/gitter/room/iris_go/community.svg?color=cc2b5e&logo=gitter&style=for-the-badge)](https://gitter.im/iris_go/community) <!--[![FOSSA Status](https://img.shields.io/badge/LICENSE%20SCAN-PASSING❤️-CD2956?style=for-the-badge&logo=fossa)](https://app.fossa.io/projects/git%2Bgithub.com%2Fkataras%2Firis?ref=badge_shield)--> [![捐助](https://img.shields.io/badge/support-Iris-blue.svg?style=for-the-badge&logo=paypal)](https://iris-go.com/donate) <!--[![report card](https://img.shields.io/badge/report%20card-a%2B-ff3333.svg?style=for-the-badge)](https://goreportcard.com/report/github.com/kataras/iris)--><!--[![godocs](https://img.shields.io/badge/go-%20docs-488AC7.svg?style=for-the-badge)](https://pkg.go.dev/github.com/kataras/iris/v12@v12.2.11)--> <!-- [![release](https://img.shields.io/badge/release%20-v12.0-0077b3.svg?style=for-the-badge)](https://github.com/kataras/iris/releases) -->\n\n<!-- <a href=\"https://iris-go.com\"> <img align=\"right\" src=\"https://iris-go.com/images/logo-w169.png\"></a> -->\n\nIris 是款不僅迅速、簡捷，並且功能完善、高效率的 Go 語言 Web 框架。**與 Go 生態系統中其它人提供的免費軟體套件不同，這個軟體保證終身主動維護。**\n\n> 想要取得接下來 **v12.2.0** 穩定版本（正在逐步推進 (2023🎅)）的新消息，請收藏 🌟 並關注 👀 這個儲存庫！\n\nIris 能為你的下一個網站或 API，立下漂亮、富有表達性，且易於使用的基礎。\n\n```go\npackage main\n\nimport \"github.com/kataras/iris/v12\"\n\nfunc main() {\n  app := iris.New()\n  app.Use(iris.Compression)\n\n  app.Get(\"/\", func(ctx iris.Context) {\n    ctx.HTML(\"哈囉，<strong>%s</strong>！\", \"世界\")\n  })\n\n  app.Listen(\":8080\")\n}\n```\n\n<!-- <details><summary>More with simple Handler</summary>\n\n```go\npackage main\n\nimport \"github.com/kataras/iris/v12\"\n\ntype (\n  request struct {\n    Firstname string `json:\"firstname\"`\n    Lastname  string `json:\"lastname\"`\n  }\n\n  response struct {\n    ID      string `json:\"id\"`\n    Message string `json:\"message\"`\n  }\n)\n\nfunc main() {\n  app := iris.New()\n  app.Handle(\"PUT\", \"/users/{id:uuid}\", updateUser)\n  app.Listen(\":8080\")\n}\n\nfunc updateUser(ctx iris.Context) {\n  id := ctx.Params().Get(\"id\")\n\n  var req request\n  if err := ctx.ReadJSON(&req); err != nil {\n    ctx.StopWithError(iris.StatusBadRequest, err)\n    return\n  }\n\n  resp := response{\n    ID:      id,\n    Message: req.Firstname + \" updated successfully\",\n  }\n  ctx.JSON(resp)\n}\n```\n\n> Read the [routing examples](https://github.com/kataras/iris/blob/main/_examples/routing) for more!\n\n</details>\n\n<details><summary>Handler with custom input and output arguments</summary>\n\n[![https://github.com/kataras/iris/blob/main/_examples/dependency-injection/basic/main.go](https://user-images.githubusercontent.com/22900943/105253731-b8db6d00-5b88-11eb-90c1-0c92a5581c86.png)](https://twitter.com/iris_framework/status/1234783655408668672)\n\n> Interesting? Read the [examples](https://github.com/kataras/iris/blob/main/_examples/dependency-injection).\n\n</details>\n\n<details><summary>Party Controller (NEW)</summary>\n\n> Head over to the [full running example](https://github.com/kataras/iris/blob/main/_examples/routing/party-controller)!\n\n</details>\n\n<details><summary>MVC</summary>\n\n```go\npackage main\n\nimport (\n  \"github.com/kataras/iris/v12\"\n  \"github.com/kataras/iris/v12/mvc\"\n)\n\ntype (\n  request struct {\n    Firstname string `json:\"firstname\"`\n    Lastname  string `json:\"lastname\"`\n  }\n\n  response struct {\n    ID      uint64 `json:\"id\"`\n    Message string `json:\"message\"`\n  }\n)\n\nfunc main() {\n  app := iris.New()\n  mvc.Configure(app.Party(\"/users\"), configureMVC)\n  app.Listen(\":8080\")\n}\n\nfunc configureMVC(app *mvc.Application) {\n  app.Handle(new(userController))\n}\n\ntype userController struct {\n  // [...dependencies]\n}\n\nfunc (c *userController) PutBy(id uint64, req request) response {\n  return response{\n    ID:      id,\n    Message: req.Firstname + \" updated successfully\",\n  }\n}\n```\n\nWant to see more? Navigate through [mvc examples](_examples/mvc)!\n</details>\n\n\n<details><summary>API Guide <strong>HOT</strong></summary>\n\n```go\npackage main\n\nimport (\n  // [other packages...]\n\n  \"github.com/kataras/iris/v12\"\n)\n\nfunc main() {\n  iris.NewGuide().\n    AllowOrigin(\"*\").\n    Compression(true).\n    Health(true, \"development\", \"kataras\").\n    Timeout(0, 20*time.Second, 20*time.Second).\n    Middlewares(basicauth.New(...)).\n    Services(\n        // NewDatabase(),\n        // NewPostgresRepositoryRegistry,\n        // NewUserService,\n    ).\n    API(\"/users\", new(UsersAPI)).\n    Listen(\":80\")\n}\n```\n\n</details>\n\n<br/>\n\n-->\n\n據一位 [Go 開發者](https://twitter.com/dkuye/status/1532087942696554497) 所言，**Iris 能向您提供全方位的服務，並地位多年來屹立不搖**。\n\nIris 提供了至少這些功能：\n\n- HTTP/2 (Push, 甚至是 Embedded 資料)\n- 中介模組（存取日誌、基礎認證、CORS、gRPC、防機器人 hCaptcha、JWT、方法覆寫、模組版本顯示、監控、PPROF、速率限制、防機器人 reCaptcha、panic 救援、請求識別碼、重寫請求）\n- API 分版 (versioning)\n- MVC (Model-View-Controller) 模式\n- Websocket\n- gRPC\n- 自動啟用 HTTPS\n- 內建 ngrok 支援，讓您可以把 app 以最快速的方式推上網際網路\n- 包含動態路徑、具唯一性的路由，支援如 :uuid、:string、:int 等等的標準類型，並且可以自己建立\n- 壓縮功能\n- 檢視 (View) 算繪引擎 (HTML、Django、Handlebars、Pug/Jade 等等）\n- 建立自己的檔案伺服器，並寄存您自己的 WebDAV 伺服器\n- 快取\n- 本地化 (i18n、sitemap）\n- 連線階段管理\n- 豐富的回應格式（HTML、純文字、Markdown、XML、YAML、二進位、JSON、JSONP、Protocol Buffers、MessagePack、(HTTP) 內容協商、串流、Server-Sent Events 等）\n- 回應壓縮功能（gzip、deflate、brotli、snappy、s2）\n- 豐富的請求方式（綁定 URL 查詢、標頭、文字、XML、YAML、二進位、JSON、資料驗證、Protocol Buffers、MessagePack 等）\n- 依賴注入（MVC、處理常式 (handler)、API 路由）\n- 測試套件\n- 最重要的是…… 從發行第一天到現在（已經整整六年），解答與支援一直都十分迅速！\n\n看看別人 [是如何評價 Iris 的](https://www.iris-go.com/#review)，並且 **[給這個開放原始碼專案一顆小星星](https://github.com/kataras/iris/stargazers)**，支持專案的潛力。\n\n[![](https://iris-go.com/images/reviews.gif)](https://iris-go.com/testimonials/)\n\n[![Benchmarks: Jul 18, 2020 at 10:46am (UTC)](https://iris-go.com/images/benchmarks.svg)](https://github.com/kataras/server-benchmarks)\n\n## 👑 <a href=\"https://iris-go.com/donate\">支援者</a>\n\n你的一臂之力，能夠為大家帶來更好的開放原始碼 Web 開發體驗！\n\n> [@github](https://github.com/github) is now sponsoring you for $550.00 one time.\n>\n> A note from your new sponsor:\n>\n> To celebrate Maintainer Month we want to thank you for all you do for the open source community. Check out our blog post to learn more about how GitHub is investing in maintainers. https://github.blog/2022-06-24-thank-you-to-our-maintainers/\n\n> 現已支援來自 [中國](https://github.com/kataras/iris/issues/1870#issuecomment-1101418349) 的捐款！\n\n## 📖 學習 Iris\n\n### 安裝\n\n只要先安裝好 [Go 程式語言](https://go.dev/dl/) 即可。\n\n#### 建立新專案\n\n```sh\n$ mkdir myapp\n$ cd myapp\n$ go mod init myapp\n$ go get github.com/kataras/iris/v12@latest # 或 @v12.2.11\n```\n\n<details><summary>在現有專案安裝</summary>\n\n```sh\n$ cd myapp\n$ go get github.com/kataras/iris/v12@latest\n```\n\n**執行**\n\n```sh\n$ go mod tidy -compat=1.20 # Windows 的話，請試試 -compat=\"1.20\"\n$ go run .\n```\n\n</details>\n\n![](https://www.iris-go.com/images/gifs/install-create-iris.gif)\n\nIris 包含極其豐富且透徹的 **[文件](https://www.iris-go.com/docs)**，讓框架的入門觸手可及。\n\n<!-- Iris contains extensive and thorough **[wiki](https://github.com/kataras/iris/wiki)** making it easy to get started with the framework. -->\n\n<!-- ![](https://media.giphy.com/media/Ur8iqy9FQfmPuyQpgy/giphy.gif) -->\n\n如需更為詳細的技術性文件，您可以前往我們的 [godocs](https://pkg.go.dev/github.com/kataras/iris/v12@main)。如果要可以直接執行的程式碼，可以到 [./\\_examples](_examples) 儲存庫的子目錄參閱。\n\n### 想一邊旅行、一邊閱讀嗎？\n\n<a href=\"https://iris-go.com/#book\"> <img alt=\"Book cover\" src=\"https://iris-go.com/images/iris-book-cover-sm.jpg?v=12\" /> </a>\n\n[![在 Twitter 上追蹤作者](https://img.shields.io/twitter/follow/makismaropoulos?color=3D8AA3&logoColor=3D8AA3&style=for-the-badge&logo=twitter)](https://twitter.com/intent/follow?screen_name=makismaropoulos)\n\n[![在 Twitter 上追蹤 Iris Web 框架](https://img.shields.io/twitter/follow/iris_framework?color=ee7506&logoColor=ee7506&style=for-the-badge&logo=twitter)](https://twitter.com/intent/follow?screen_name=iris_framework)\n\n[![在 Facebook 上追蹤 Iris Web 框架](https://img.shields.io/badge/Follow%20%40Iris.framework-569-2D88FF.svg?style=for-the-badge&logo=facebook)](https://www.facebook.com/iris.framework)\n\n您現在可以 [請求索取](https://www.iris-go.com/#ebookDonateForm) **Iris 電子書**（新版，**針對未來版本 v12.2.0+**) 的 PDF 和線上閱讀存取權限，並共同參與 Iris 的開發。\n\n## 🙌 貢獻\n\n我們殷切期盼你對 Iris Web 框架的貢獻！有關貢獻 Iris 專案的更多資訊，請參閱 [CONTRIBUTING.md](CONTRIBUTING.md) 檔案。\n\n[所有貢獻者名單](https://github.com/kataras/iris/graphs/contributors)\n\n## 🛡 安全性漏洞\n\n如果你發現 Iris 中有安全性漏洞，請寄一封電子郵件至 [iris-go@outlook.com](mailto:iris-go@outlook.com)。我們會儘速解決所有安全性漏洞。\n\n## 📝 授權條款\n\n本專案和 Go 語言相同，皆採 [BSD 3-clause 授權條款](LICENSE) 授權。\n\n專案的名稱「Iris」取材自希臘神話。\n\n<!-- ## Stargazers over time\n\n[![Stargazers over time](https://starchart.cc/kataras/iris.svg)](https://starchart.cc/kataras/iris) -->\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.7,
          "content": "# Security Policy\n\n## Supported Versions\n\nWe are focusing on fixing issues and security vulnerabilities to the latest and greatest version of Iris.\nIris users SHOULD always update their backend code to the latest version of Iris API, there is a complete [HISTORY](https://github.com/kataras/iris/blob/main/HISTORY.md) file\nwhich acts as a code migration assistant.\n\n## Reporting a Vulnerability\n\nPlease report (suspected) security vulnerabilities to\n**[iris-go@outlook.com](mailto:iris-go@outlook.com)**. You will receive a response from\nus within 3-4 working days. If the issue is confirmed, we will release a new minor version as soon\nas possible depending on complexity but historically within a few hours or days.\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.05,
          "content": "v12.2.0:https://github.com/kataras/iris/tree/v12.2.0"
        },
        {
          "name": "_benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "_examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "_proposals",
          "type": "tree",
          "content": null
        },
        {
          "name": "aliases.go",
          "type": "blob",
          "size": 38.72,
          "content": "package iris\n\nimport (\n\t\"io/fs\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"path\"\n\t\"regexp\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/kataras/iris/v12/cache\"\n\t\"github.com/kataras/iris/v12/context\"\n\t\"github.com/kataras/iris/v12/core/handlerconv\"\n\t\"github.com/kataras/iris/v12/core/host\"\n\t\"github.com/kataras/iris/v12/core/router\"\n\t\"github.com/kataras/iris/v12/hero\"\n\t\"github.com/kataras/iris/v12/view\"\n)\n\nvar (\n\t// BuildRevision holds the vcs commit id information of the program's build.\n\t// To display the Iris' version please use the iris.Version constant instead.\n\t// Available at go version 1.18+\n\tBuildRevision = context.BuildRevision\n\t// BuildTime holds the vcs commit time information of the program's build.\n\t// Available at go version 1.18+\n\tBuildTime = context.BuildTime\n)\n\n// SameSite attributes.\nconst (\n\tSameSiteDefaultMode = http.SameSiteDefaultMode\n\tSameSiteLaxMode     = http.SameSiteLaxMode\n\tSameSiteStrictMode  = http.SameSiteStrictMode\n\tSameSiteNoneMode    = http.SameSiteNoneMode\n)\n\ntype (\n\t// Context is the middle-man server's \"object\" for the clients.\n\t//\n\t// A New context is being acquired from a sync.Pool on each connection.\n\t// The Context is the most important thing on the iris's http flow.\n\t//\n\t// Developers send responses to the client's request through a Context.\n\t// Developers get request information from the client's request by a Context.\n\tContext = *context.Context\n\t// ViewEngine is an alias of `context.ViewEngine`.\n\t// See HTML, Blocks, Django, Jet, Pug, Ace, Handlebars and e.t.c.\n\tViewEngine = context.ViewEngine\n\t// UnmarshalerFunc a shortcut, an alias for the `context#UnmarshalerFunc` type\n\t// which implements the `context#Unmarshaler` interface for reading request's body\n\t// via custom decoders, most of them already implement the `context#UnmarshalerFunc`\n\t// like the json.Unmarshal, xml.Unmarshal, yaml.Unmarshal and every library which\n\t// follows the best practises and is aligned with the Go standards.\n\t//\n\t// See 'context#UnmarshalBody` for more.\n\t//\n\t// Example: https://github.com/kataras/iris/blob/main/_examples/request-body/read-custom-via-unmarshaler/main.go\n\tUnmarshalerFunc = context.UnmarshalerFunc\n\t// DecodeFunc is a generic type of decoder function.\n\t// When the returned error is not nil the decode operation\n\t// is terminated and the error is received by the ReadJSONStream method,\n\t// otherwise it continues to read the next available object.\n\t// Look the `Context.ReadJSONStream` method.\n\t//\n\t// Example: https://github.com/kataras/iris/blob/main/_examples/request-body/read-json-stream.\n\tDecodeFunc = context.DecodeFunc\n\t// A Handler responds to an HTTP request.\n\t// It writes reply headers and data to the Context.ResponseWriter() and then return.\n\t// Returning signals that the request is finished;\n\t// it is not valid to use the Context after or concurrently with the completion of the Handler call.\n\t//\n\t// Depending on the HTTP client software, HTTP protocol version,\n\t// and any intermediaries between the client and the iris server,\n\t// it may not be possible to read from the Context.Request().Body after writing to the context.ResponseWriter().\n\t// Cautious handlers should read the Context.Request().Body first, and then reply.\n\t//\n\t// Except for reading the body, handlers should not modify the provided Context.\n\t//\n\t// If Handler panics, the server (the caller of Handler) assumes that the effect of the panic was isolated to the active request.\n\t// It recovers the panic, logs a stack trace to the server error log, and hangs up the connection.\n\tHandler = context.Handler\n\t// Filter is just a type of func(Context) bool which reports whether an action must be performed\n\t// based on the incoming request.\n\t//\n\t// See `NewConditionalHandler` for more.\n\t// An alias for the `context/Filter`.\n\tFilter = context.Filter\n\t// A Map is an alias of map[string]interface{}.\n\tMap = context.Map\n\t// User is a generic view of an authorized client.\n\t// See `Context.User` and `SetUser` methods for more.\n\t// An alias for the `context/User` type.\n\tUser = context.User\n\t// SimpleUser is a simple implementation of the User interface.\n\tSimpleUser = context.SimpleUser\n\t// Problem Details for HTTP APIs.\n\t// Pass a Problem value to `context.Problem` to\n\t// write an \"application/problem+json\" response.\n\t//\n\t// Read more at: https://github.com/kataras/iris/blob/main/_examples/routing/http-errors.\n\t//\n\t// It is an alias of the `context#Problem` type.\n\tProblem = context.Problem\n\t// ProblemOptions the optional settings when server replies with a Problem.\n\t// See `Context.Problem` method and `Problem` type for more details.\n\t//\n\t// It is an alias of the `context#ProblemOptions` type.\n\tProblemOptions = context.ProblemOptions\n\t// JSON the optional settings for JSON renderer.\n\t//\n\t// It is an alias of the `context#JSON` type.\n\tJSON = context.JSON\n\t// JSONReader holds the JSON decode options of the `Context.ReadJSON, ReadBody` methods.\n\t//\n\t// It is an alias of the `context#JSONReader` type.\n\tJSONReader = context.JSONReader\n\t// JSONP the optional settings for JSONP renderer.\n\t//\n\t// It is an alias of the `context#JSONP` type.\n\tJSONP = context.JSONP\n\t// ProtoMarshalOptions is a type alias for protojson.MarshalOptions.\n\tProtoMarshalOptions = context.ProtoMarshalOptions\n\t// ProtoUnmarshalOptions is a type alias for protojson.UnmarshalOptions.\n\tProtoUnmarshalOptions = context.ProtoUnmarshalOptions\n\t// XML the optional settings for XML renderer.\n\t//\n\t// It is an alias of the `context#XML` type.\n\tXML = context.XML\n\t// Markdown the optional settings for Markdown renderer.\n\t// See `Context.Markdown` for more.\n\t//\n\t// It is an alias of the `context#Markdown` type.\n\tMarkdown = context.Markdown\n\t// Supervisor is a shortcut of the `host#Supervisor`.\n\t// Used to add supervisor configurators on common Runners\n\t// without the need of importing the `core/host` package.\n\tSupervisor = host.Supervisor\n\n\t// Party is just a group joiner of routes which have the same prefix and share same middleware(s) also.\n\t// Party could also be named as 'Join' or 'Node' or 'Group' , Party chosen because it is fun.\n\t//\n\t// Look the `core/router#APIBuilder` for its implementation.\n\t//\n\t// A shortcut for the `core/router#Party`, useful when `PartyFunc` is being used.\n\tParty = router.Party\n\t// APIContainer is a wrapper of a common `Party` featured by Dependency Injection.\n\t// See `Party.ConfigureContainer` for more.\n\t//\n\t// A shortcut for the `core/router#APIContainer`.\n\tAPIContainer = router.APIContainer\n\t// ResultHandler describes the function type which should serve the \"v\" struct value.\n\t// See `APIContainer.UseResultHandler`.\n\tResultHandler = hero.ResultHandler\n\n\t// DirOptions contains the optional settings that\n\t// `FileServer` and `Party#HandleDir` can use to serve files and assets.\n\t// A shortcut for the `router.DirOptions`, useful when `FileServer` or `HandleDir` is being used.\n\tDirOptions = router.DirOptions\n\t// DirCacheOptions holds the options for the cached file system.\n\t// See `DirOptions`.\n\tDirCacheOptions = router.DirCacheOptions\n\t// DirListRichOptions the options for the `DirListRich` helper function.\n\t// A shortcut for the `router.DirListRichOptions`.\n\t// Useful when `DirListRich` function is passed to `DirOptions.DirList` field.\n\tDirListRichOptions = router.DirListRichOptions\n\t// Attachments options for files to be downloaded and saved locally by the client.\n\t// See `DirOptions`.\n\tAttachments = router.Attachments\n\t// Dir implements FileSystem using the native file system restricted to a\n\t// specific directory tree, can be passed to the `FileServer` function\n\t// and `HandleDir` method. It's an alias of `http.Dir`.\n\tDir = http.Dir\n\n\t// ExecutionRules gives control to the execution of the route handlers outside of the handlers themselves.\n\t// Usage:\n\t// Party#SetExecutionRules(ExecutionRules {\n\t//   Done: ExecutionOptions{Force: true},\n\t// })\n\t//\n\t// See `core/router/Party#SetExecutionRules` for more.\n\t// Example: https://github.com/kataras/iris/tree/main/_examples/mvc/middleware/without-ctx-next\n\tExecutionRules = router.ExecutionRules\n\t// ExecutionOptions is a set of default behaviors that can be changed in order to customize the execution flow of the routes' handlers with ease.\n\t//\n\t// See `ExecutionRules` and `core/router/Party#SetExecutionRules` for more.\n\tExecutionOptions = router.ExecutionOptions\n\n\t// CookieOption is the type of function that is accepted on\n\t// context's methods like `SetCookieKV`, `RemoveCookie` and `SetCookie`\n\t// as their (last) variadic input argument to amend the end cookie's form.\n\t//\n\t// Any custom or builtin `CookieOption` is valid,\n\t// see `CookiePath`, `CookieCleanPath`, `CookieExpires` and `CookieHTTPOnly` for more.\n\t//\n\t// An alias for the `context.CookieOption`.\n\tCookieOption = context.CookieOption\n\t// Cookie is a type alias for the standard net/http Cookie struct type.\n\t// See `Context.SetCookie`.\n\tCookie = http.Cookie\n\t// N is a struct which can be passed on the `Context.Negotiate` method.\n\t// It contains fields which should be filled based on the `Context.Negotiation()`\n\t// server side values. If no matched mime then its \"Other\" field will be sent,\n\t// which should be a string or []byte.\n\t// It completes the `context/context.ContentSelector` interface.\n\t//\n\t// An alias for the `context.N`.\n\tN = context.N\n\t// Locale describes the i18n locale.\n\t// An alias for the `context.Locale`.\n\tLocale = context.Locale\n\t// ErrPrivate if provided then the error saved in context\n\t// should NOT be visible to the client no matter what.\n\t// An alias for the `context.ErrPrivate`.\n\tErrPrivate = context.ErrPrivate\n)\n\n// Constants for input argument at `router.RouteRegisterRule`.\n// See `Party#SetRegisterRule`.\nconst (\n\t// RouteOverride replaces an existing route with the new one, the default rule.\n\tRouteOverride = router.RouteOverride\n\t// RouteSkip keeps the original route and skips the new one.\n\tRouteSkip = router.RouteSkip\n\t// RouteError log when a route already exists, shown after the `Build` state,\n\t// server never starts.\n\tRouteError = router.RouteError\n\t// RouteOverlap will overlap the new route to the previous one.\n\t// If the route stopped and its response can be reset then the new route will be execute.\n\tRouteOverlap = router.RouteOverlap\n)\n\n// Contains the enum values of the `Context.GetReferrer()` method,\n// shortcuts of the context subpackage.\nconst (\n\tReferrerInvalid  = context.ReferrerInvalid\n\tReferrerIndirect = context.ReferrerIndirect\n\tReferrerDirect   = context.ReferrerDirect\n\tReferrerEmail    = context.ReferrerEmail\n\tReferrerSearch   = context.ReferrerSearch\n\tReferrerSocial   = context.ReferrerSocial\n\n\tReferrerNotGoogleSearch     = context.ReferrerNotGoogleSearch\n\tReferrerGoogleOrganicSearch = context.ReferrerGoogleOrganicSearch\n\tReferrerGoogleAdwords       = context.ReferrerGoogleAdwords\n)\n\n// NoLayout to disable layout for a particular template file\n// A shortcut for the `view#NoLayout`.\nconst NoLayout = view.NoLayout\n\nvar (\n\t// HTML view engine.\n\t// Shortcut of the view.HTML.\n\tHTML = view.HTML\n\t// Blocks view engine.\n\t// Can be used as a faster alternative of the HTML engine.\n\t// Shortcut of the view.Blocks.\n\tBlocks = view.Blocks\n\t// Django view engine.\n\t// Shortcut of the view.Django.\n\tDjango = view.Django\n\t// Handlebars view engine.\n\t// Shortcut of the view.Handlebars.\n\tHandlebars = view.Handlebars\n\t// Pug view engine.\n\t// Shortcut of the view.Pug.\n\tPug = view.Pug\n\t// Jet view engine.\n\t// Shortcut of the view.Jet.\n\tJet = view.Jet\n\t// Ace view engine.\n\t// Shortcut of the view.Ace.\n\tAce = view.Ace\n)\n\ntype (\n\t// ErrViewNotExist reports whether a template was not found in the parsed templates tree.\n\tErrViewNotExist = context.ErrViewNotExist\n\t// FallbackViewFunc is a function that can be registered\n\t// to handle view fallbacks. It accepts the Context and\n\t// a special error which contains information about the previous template error.\n\t// It implements the FallbackViewProvider interface.\n\t//\n\t// See `Context.View` method.\n\tFallbackViewFunc = context.FallbackViewFunc\n\t// FallbackView is a helper to register a single template filename as a fallback\n\t// when the provided tempate filename was not found.\n\tFallbackView = context.FallbackView\n\t// FallbackViewLayout is a helper to register a single template filename as a fallback\n\t// layout when the provided layout filename was not found.\n\tFallbackViewLayout = context.FallbackViewLayout\n)\n\n// Component returns a new Handler which can be registered as a main handler for a route.\n// It's a shortcut handler that renders the given component as HTML through Context.RenderComponent.\nfunc Component(component context.Component) Handler {\n\treturn func(ctx Context) {\n\t\tctx.RenderComponent(component)\n\t}\n}\n\n// PrefixDir returns a new FileSystem that opens files\n// by adding the given \"prefix\" to the directory tree of \"fs\".\n//\n// Useful when having templates and static files in the same\n// bindata AssetFile method. This way you can select\n// which one to serve as static files and what for templates.\n// All view engines have a `RootDir` method for that reason too\n// but alternatively, you can wrap the given file system with this `PrefixDir`.\n//\n// Example: https://github.com/kataras/iris/blob/main/_examples/file-server/single-page-application/embedded-single-page-application/main.go\nfunc PrefixDir(prefix string, fs http.FileSystem) http.FileSystem {\n\treturn &prefixedDir{prefix, fs}\n}\n\n// PrefixFS same as \"PrefixDir\" but for `fs.FS` type.\nfunc PrefixFS(fileSystem fs.FS, dir string) (fs.FS, error) {\n\treturn fs.Sub(fileSystem, dir)\n}\n\ntype prefixedDir struct {\n\tprefix string\n\tfs     http.FileSystem\n}\n\nfunc (p *prefixedDir) Open(name string) (http.File, error) {\n\t// Don't do this: as this is responsibility of the underline fs.\n\t// _, filename, ok, err := context.SafeFilename(\"\", name)\n\n\tdestPath := path.Join(p.prefix, name)\n\treturn p.fs.Open(destPath)\n}\n\ntype partyConfiguratorMiddleware struct {\n\thandlers []Handler\n}\n\nfunc (p *partyConfiguratorMiddleware) Configure(r Party) {\n\tr.Use(p.handlers...)\n}\n\n// ConfigureMiddleware is a PartyConfigurator which can be used\n// as a shortcut to add middlewares on Party.PartyConfigure(\"/path\", WithMiddleware(handler), new(example.API)).\nfunc ConfigureMiddleware(handlers ...Handler) router.PartyConfigurator {\n\treturn &partyConfiguratorMiddleware{handlers: handlers}\n}\n\n// Compression is a middleware which enables\n// writing and reading using the best offered compression.\n// Usage:\n// app.Use (for matched routes)\n// app.UseRouter (for both matched and 404s or other HTTP errors).\nfunc Compression(ctx Context) {\n\tctx.CompressWriter(true)\n\tctx.CompressReader(true)\n\tctx.Next()\n}\n\nvar (\n\t// AllowQuerySemicolons returns a middleware that serves requests by converting any\n\t// unescaped semicolons(;) in the URL query to ampersands(&).\n\t//\n\t// This restores the pre-Go 1.17 behavior of splitting query parameters on both\n\t// semicolons and ampersands.\n\t// (See golang.org/issue/25192 and https://github.com/kataras/iris/issues/1875).\n\t// Note that this behavior doesn't match that of many proxies,\n\t// and the mismatch can lead to security issues.\n\t//\n\t// AllowQuerySemicolons should be invoked before any Context read query or\n\t// form methods are called.\n\t//\n\t// To skip HTTP Server logging for this type of warning:\n\t// app.Listen/Run(..., iris.WithoutServerError(iris.ErrURLQuerySemicolon)).\n\tAllowQuerySemicolons = func(ctx Context) {\n\t\t// clopy of net/http.AllowQuerySemicolons.\n\t\tr := ctx.Request()\n\t\tif s := r.URL.RawQuery; strings.Contains(s, \";\") {\n\t\t\tr2 := new(http.Request)\n\t\t\t*r2 = *r\n\t\t\tr2.URL = new(url.URL)\n\t\t\t*r2.URL = *r.URL\n\t\t\tr2.URL.RawQuery = strings.ReplaceAll(s, \";\", \"&\")\n\t\t\tctx.ResetRequest(r2)\n\t\t}\n\n\t\tctx.Next()\n\t}\n\n\t// MatchImagesAssets is a simple regex expression\n\t// that can be passed to the DirOptions.Cache.CompressIgnore field\n\t// in order to skip compression on already-compressed file types\n\t// such as images and pdf.\n\tMatchImagesAssets = regexp.MustCompile(\"((.*).pdf|(.*).jpg|(.*).jpeg|(.*).gif|(.*).tif|(.*).tiff)$\")\n\t// MatchCommonAssets is a simple regex expression which\n\t// can be used on `DirOptions.PushTargetsRegexp`.\n\t// It will match and Push\n\t// all available js, css, font and media files.\n\t// Ideal for Single Page Applications.\n\tMatchCommonAssets = regexp.MustCompile(\"((.*).js|(.*).css|(.*).ico|(.*).png|(.*).ttf|(.*).svg|(.*).webp|(.*).gif)$\")\n)\n\nvar (\n\t// RegisterOnInterrupt registers a global function to call when CTRL+C/CMD+C pressed or a unix kill command received.\n\t//\n\t// A shortcut for the `host#RegisterOnInterrupt`.\n\tRegisterOnInterrupt = host.RegisterOnInterrupt\n\n\t// LimitRequestBodySize is a middleware which sets a request body size limit\n\t// for all next handlers in the chain.\n\t//\n\t// A shortcut for the `context#LimitRequestBodySize`.\n\tLimitRequestBodySize = context.LimitRequestBodySize\n\t// NewConditionalHandler returns a single Handler which can be registered\n\t// as a middleware.\n\t// Filter is just a type of Handler which returns a boolean.\n\t// Handlers here should act like middleware, they should contain `ctx.Next` to proceed\n\t// to the next handler of the chain. Those \"handlers\" are registered to the per-request context.\n\t//\n\t//\n\t// It checks the \"filter\" and if passed then\n\t// it, correctly, executes the \"handlers\".\n\t//\n\t// If passed, this function makes sure that the Context's information\n\t// about its per-request handler chain based on the new \"handlers\" is always updated.\n\t//\n\t// If not passed, then simply the Next handler(if any) is executed and \"handlers\" are ignored.\n\t// Example can be found at: _examples/routing/conditional-chain.\n\t//\n\t// A shortcut for the `context#NewConditionalHandler`.\n\tNewConditionalHandler = context.NewConditionalHandler\n\t// FileServer returns a Handler which serves files from a specific system, phyisical, directory\n\t// or an embedded one.\n\t// The first parameter is the directory, relative to the executable program.\n\t// The second optional parameter is any optional settings that the caller can use.\n\t//\n\t// See `Party#HandleDir` too.\n\t// Examples can be found at: https://github.com/kataras/iris/tree/main/_examples/file-server\n\t// A shortcut for the `router.FileServer`.\n\tFileServer = router.FileServer\n\t// DirList is the default `DirOptions.DirList` field.\n\t// Read more at: `core/router.DirList`.\n\tDirList = router.DirList\n\t// DirListRich can be passed to `DirOptions.DirList` field\n\t// to override the default file listing appearance.\n\t// Read more at: `core/router.DirListRich`.\n\tDirListRich = router.DirListRich\n\t// StripPrefix returns a handler that serves HTTP requests\n\t// by removing the given prefix from the request URL's Path\n\t// and invoking the handler h. StripPrefix handles a\n\t// request for a path that doesn't begin with prefix by\n\t// replying with an HTTP 404 not found error.\n\t//\n\t// Usage:\n\t// fileserver := iris.FileServer(\"./static_files\", DirOptions {...})\n\t// h := iris.StripPrefix(\"/static\", fileserver)\n\t// app.Get(\"/static/{file:path}\", h)\n\t// app.Head(\"/static/{file:path}\", h)\n\tStripPrefix = router.StripPrefix\n\t// FromStd converts native http.Handler, http.HandlerFunc & func(w, r, next) to context.Handler.\n\t//\n\t// Supported form types:\n\t// \t\t .FromStd(h http.Handler)\n\t// \t\t .FromStd(func(w http.ResponseWriter, r *http.Request))\n\t// \t\t .FromStd(func(w http.ResponseWriter, r *http.Request, next http.HandlerFunc))\n\t//\n\t// A shortcut for the `handlerconv#FromStd`.\n\tFromStd = handlerconv.FromStd\n\t// Cache is a middleware providing server-side cache functionalities\n\t// to the next handlers, can be used as: `app.Get(\"/\", iris.Cache, aboutHandler)`.\n\t// It should be used after Static methods.\n\t// See `iris#Cache304` for an alternative, faster way.\n\t//\n\t// Examples can be found at: https://github.com/kataras/iris/tree/main/_examples/#caching\n\tCache = cache.Handler\n\t// NoCache is a middleware which overrides the Cache-Control, Pragma and Expires headers\n\t// in order to disable the cache during the browser's back and forward feature.\n\t//\n\t// A good use of this middleware is on HTML routes; to refresh the page even on \"back\" and \"forward\" browser's arrow buttons.\n\t//\n\t// See `iris#StaticCache` for the opposite behavior.\n\t//\n\t// A shortcut of the `cache#NoCache`\n\tNoCache = cache.NoCache\n\t// StaticCache middleware for caching static files by sending the \"Cache-Control\" and \"Expires\" headers to the client.\n\t// It accepts a single input parameter, the \"cacheDur\", a time.Duration that it's used to calculate the expiration.\n\t//\n\t// If \"cacheDur\" <=0 then it returns the `NoCache` middleware instaed to disable the caching between browser's \"back\" and \"forward\" actions.\n\t//\n\t// Usage: `app.Use(iris.StaticCache(24 * time.Hour))` or `app.Use(iris.StaticCache(-1))`.\n\t// A middleware, which is a simple Handler can be called inside another handler as well, example:\n\t// cacheMiddleware := iris.StaticCache(...)\n\t// func(ctx iris.Context){\n\t//  cacheMiddleware(ctx)\n\t//  [...]\n\t// }\n\t//\n\t// A shortcut of the `cache#StaticCache`\n\tStaticCache = cache.StaticCache\n\t// Cache304 sends a `StatusNotModified` (304) whenever\n\t// the \"If-Modified-Since\" request header (time) is before the\n\t// time.Now() + expiresEvery (always compared to their UTC values).\n\t// Use this, which is a shortcut of the, `chache#Cache304` instead of the \"github.com/kataras/iris/v12/cache\" or iris.Cache\n\t// for better performance.\n\t// Clients that are compatible with the http RCF (all browsers are and tools like postman)\n\t// will handle the caching.\n\t// The only disadvantage of using that instead of server-side caching\n\t// is that this method will send a 304 status code instead of 200,\n\t// So, if you use it side by side with other micro services\n\t// you have to check for that status code as well for a valid response.\n\t//\n\t// Developers are free to extend this method's behavior\n\t// by watching system directories changes manually and use of the `ctx.WriteWithExpiration`\n\t// with a \"modtime\" based on the file modified date,\n\t// similar to the `HandleDir`(which sends status OK(200) and browser disk caching instead of 304).\n\t//\n\t// A shortcut of the `cache#Cache304`.\n\tCache304 = cache.Cache304\n\n\t// CookieOverride is a CookieOption which overrides the cookie explicitly to the given \"cookie\".\n\t//\n\t// A shortcut for the `context#CookieOverride`.\n\tCookieOverride = context.CookieOverride\n\t// CookieDomain is a CookieOption which sets the cookie's Domain field.\n\t// If empty then the current domain is used.\n\t//\n\t// A shortcut for the `context#CookieDomain`.\n\tCookieDomain = context.CookieDomain\n\t// CookieAllowReclaim accepts the Context itself.\n\t// If set it will add the cookie to (on `CookieSet`, `CookieSetKV`, `CookieUpsert`)\n\t// or remove the cookie from (on `CookieRemove`) the Request object too.\n\t//\n\t// A shortcut for the `context#CookieAllowReclaim`.\n\tCookieAllowReclaim = context.CookieAllowReclaim\n\t// CookieAllowSubdomains set to the Cookie Options\n\t// in order to allow subdomains to have access to the cookies.\n\t// It sets the cookie's Domain field (if was empty) and\n\t// it also sets the cookie's SameSite to lax mode too.\n\t//\n\t// A shortcut for the `context#CookieAllowSubdomains`.\n\tCookieAllowSubdomains = context.CookieAllowSubdomains\n\t// CookieSameSite sets a same-site rule for cookies to set.\n\t// SameSite allows a server to define a cookie attribute making it impossible for\n\t// the browser to send this cookie along with cross-site requests. The main\n\t// goal is to mitigate the risk of cross-origin information leakage, and provide\n\t// some protection against cross-site request forgery attacks.\n\t//\n\t// See https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00 for details.\n\t//\n\t// A shortcut for the `context#CookieSameSite`.\n\tCookieSameSite = context.CookieSameSite\n\t// CookieSecure sets the cookie's Secure option if the current request's\n\t// connection is using TLS. See `CookieHTTPOnly` too.\n\t//\n\t// A shortcut for the `context#CookieSecure`.\n\tCookieSecure = context.CookieSecure\n\t// CookieHTTPOnly is a `CookieOption`.\n\t// Use it to set the cookie's HttpOnly field to false or true.\n\t// HttpOnly field defaults to true for `RemoveCookie` and `SetCookieKV`.\n\t//\n\t// A shortcut for the `context#CookieHTTPOnly`.\n\tCookieHTTPOnly = context.CookieHTTPOnly\n\t// CookiePath is a `CookieOption`.\n\t// Use it to change the cookie's Path field.\n\t//\n\t// A shortcut for the `context#CookiePath`.\n\tCookiePath = context.CookiePath\n\t// CookieCleanPath is a `CookieOption`.\n\t// Use it to clear the cookie's Path field, exactly the same as `CookiePath(\"\")`.\n\t//\n\t// A shortcut for the `context#CookieCleanPath`.\n\tCookieCleanPath = context.CookieCleanPath\n\t// CookieExpires is a `CookieOption`.\n\t// Use it to change the cookie's Expires and MaxAge fields by passing the lifetime of the cookie.\n\t//\n\t// A shortcut for the `context#CookieExpires`.\n\tCookieExpires = context.CookieExpires\n\t// CookieEncoding accepts a value which implements `Encode` and `Decode` methods.\n\t// It calls its `Encode` on `Context.SetCookie, UpsertCookie, and SetCookieKV` methods.\n\t// And on `Context.GetCookie` method it calls its `Decode`.\n\t//\n\t// A shortcut for the `context#CookieEncoding`.\n\tCookieEncoding = context.CookieEncoding\n\n\t// IsErrEmptyJSON reports whether the given \"err\" is caused by a\n\t// Context.ReadJSON call when the request body\n\t// didn't start with { or it was totally empty.\n\tIsErrEmptyJSON = context.IsErrEmptyJSON\n\t// IsErrPath can be used at `context#ReadForm` and `context#ReadQuery`.\n\t// It reports whether the incoming error is type of `schema.ErrPath`,\n\t// which can be ignored when server allows unknown post values to be sent by the client.\n\t//\n\t// A shortcut for the `context#IsErrPath`.\n\tIsErrPath = context.IsErrPath\n\t// IsErrCanceled reports whether the \"err\" is caused by a cancellation or timeout.\n\t//\n\t// A shortcut for the `context#IsErrCanceled`.\n\tIsErrCanceled = context.IsErrCanceled\n\t// ErrEmptyForm is the type error which API users can make use of\n\t// to check if a form was empty on `Context.ReadForm`.\n\t//\n\t// A shortcut for the `context#ErrEmptyForm`.\n\tErrEmptyForm = context.ErrEmptyForm\n\t// ErrEmptyFormField reports whether if form value is empty.\n\t// An alias of `context.ErrEmptyFormField`.\n\tErrEmptyFormField = context.ErrEmptyFormField\n\t// ErrNotFound reports whether a key was not found, useful\n\t// on post data, versioning feature and others.\n\t// An alias of `context.ErrNotFound`.\n\tErrNotFound = context.ErrNotFound\n\t// NewProblem returns a new Problem.\n\t// Head over to the `Problem` type godoc for more.\n\t//\n\t// A shortcut for the `context#NewProblem`.\n\tNewProblem = context.NewProblem\n\t// XMLMap wraps a map[string]interface{} to compatible xml marshaler,\n\t// in order to be able to render maps as XML on the `Context.XML` method.\n\t//\n\t// Example: `Context.XML(XMLMap(\"Root\", map[string]interface{}{...})`.\n\t//\n\t// A shortcut for the `context#XMLMap`.\n\tXMLMap = context.XMLMap\n\t// ErrStopExecution if returned from a hero middleware or a request-scope dependency\n\t// stops the handler's execution, see _examples/dependency-injection/basic/middleware.\n\tErrStopExecution = hero.ErrStopExecution\n\t// ErrHijackNotSupported is returned by the Hijack method to\n\t// indicate that Hijack feature is not available.\n\t//\n\t// A shortcut for the `context#ErrHijackNotSupported`.\n\tErrHijackNotSupported = context.ErrHijackNotSupported\n\t// ErrPushNotSupported is returned by the Push method to\n\t// indicate that HTTP/2 Push support is not available.\n\t//\n\t// A shortcut for the `context#ErrPushNotSupported`.\n\tErrPushNotSupported = context.ErrPushNotSupported\n\t// PrivateError accepts an error and returns a wrapped private one.\n\t// A shortcut for the `context#PrivateError` function.\n\tPrivateError = context.PrivateError\n\n\t// TrimParamFilePart is a middleware which trims any last part after a dot (.) character\n\t// of the current route's dynamic path parameters.\n\t// A shortcut for the `context#TrimParamFilePart` function.\n\tTrimParamFilePart Handler = context.TrimParamFilePart\n)\n\n// HTTP Methods copied from `net/http`.\nconst (\n\tMethodGet     = http.MethodGet\n\tMethodPost    = http.MethodPost\n\tMethodPut     = http.MethodPut\n\tMethodDelete  = http.MethodDelete\n\tMethodConnect = http.MethodConnect\n\tMethodHead    = http.MethodHead\n\tMethodPatch   = http.MethodPatch\n\tMethodOptions = http.MethodOptions\n\tMethodTrace   = http.MethodTrace\n\t// MethodNone is an iris-specific \"virtual\" method\n\t// to store the \"offline\" routes.\n\tMethodNone = router.MethodNone\n)\n\n// HTTP status codes as registered with IANA.\n// See: http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml.\n// Raw Copy from the future(tip) net/http std package in order to recude the import path of \"net/http\" for the users.\nconst (\n\tStatusContinue           = http.StatusContinue           // RFC 7231, 6.2.1\n\tStatusSwitchingProtocols = http.StatusSwitchingProtocols // RFC 7231, 6.2.2\n\tStatusProcessing         = http.StatusProcessing         // RFC 2518, 10.1\n\tStatusEarlyHints         = http.StatusEarlyHints         // RFC 8297\n\n\tStatusOK                   = http.StatusOK                   // RFC 7231, 6.3.1\n\tStatusCreated              = http.StatusCreated              // RFC 7231, 6.3.2\n\tStatusAccepted             = http.StatusAccepted             // RFC 7231, 6.3.3\n\tStatusNonAuthoritativeInfo = http.StatusNonAuthoritativeInfo // RFC 7231, 6.3.4\n\tStatusNoContent            = http.StatusNoContent            // RFC 7231, 6.3.5\n\tStatusResetContent         = http.StatusResetContent         // RFC 7231, 6.3.6\n\tStatusPartialContent       = http.StatusPartialContent       // RFC 7233, 4.1\n\tStatusMultiStatus          = http.StatusMultiStatus          // RFC 4918, 11.1\n\tStatusAlreadyReported      = http.StatusAlreadyReported      // RFC 5842, 7.1\n\tStatusIMUsed               = http.StatusIMUsed               // RFC 3229, 10.4.1\n\n\tStatusMultipleChoices   = http.StatusMultipleChoices   // RFC 7231, 6.4.1\n\tStatusMovedPermanently  = http.StatusMovedPermanently  // RFC 7231, 6.4.2\n\tStatusFound             = http.StatusFound             // RFC 7231, 6.4.3\n\tStatusSeeOther          = http.StatusSeeOther          // RFC 7231, 6.4.4\n\tStatusNotModified       = http.StatusNotModified       // RFC 7232, 4.1\n\tStatusUseProxy          = http.StatusUseProxy          // RFC 7231, 6.4.5\n\t_                       = 306                          // RFC 7231, 6.4.6 (Unused)\n\tStatusTemporaryRedirect = http.StatusTemporaryRedirect // RFC 7231, 6.4.7\n\tStatusPermanentRedirect = http.StatusPermanentRedirect // RFC 7538, 3\n\n\tStatusBadRequest                   = http.StatusBadRequest                   // RFC 7231, 6.5.1\n\tStatusUnauthorized                 = http.StatusUnauthorized                 // RFC 7235, 3.1\n\tStatusPaymentRequired              = http.StatusPaymentRequired              // RFC 7231, 6.5.2\n\tStatusForbidden                    = http.StatusForbidden                    // RFC 7231, 6.5.3\n\tStatusNotFound                     = http.StatusNotFound                     // RFC 7231, 6.5.4\n\tStatusMethodNotAllowed             = http.StatusMethodNotAllowed             // RFC 7231, 6.5.5\n\tStatusNotAcceptable                = http.StatusNotAcceptable                // RFC 7231, 6.5.6\n\tStatusProxyAuthRequired            = http.StatusProxyAuthRequired            // RFC 7235, 3.2\n\tStatusRequestTimeout               = http.StatusRequestTimeout               // RFC 7231, 6.5.7\n\tStatusConflict                     = http.StatusConflict                     // RFC 7231, 6.5.8\n\tStatusGone                         = http.StatusGone                         // RFC 7231, 6.5.9\n\tStatusLengthRequired               = http.StatusLengthRequired               // RFC 7231, 6.5.10\n\tStatusPreconditionFailed           = http.StatusPreconditionFailed           // RFC 7232, 4.2\n\tStatusRequestEntityTooLarge        = http.StatusRequestEntityTooLarge        // RFC 7231, 6.5.11\n\tStatusRequestURITooLong            = http.StatusRequestURITooLong            // RFC 7231, 6.5.12\n\tStatusUnsupportedMediaType         = http.StatusUnsupportedMediaType         // RFC 7231, 6.5.13\n\tStatusRequestedRangeNotSatisfiable = http.StatusRequestedRangeNotSatisfiable // RFC 7233, 4.4\n\tStatusExpectationFailed            = http.StatusExpectationFailed            // RFC 7231, 6.5.14\n\tStatusTeapot                       = http.StatusTeapot                       // RFC 7168, 2.3.3\n\tStatusMisdirectedRequest           = http.StatusMisdirectedRequest           // RFC 7540, 9.1.2\n\tStatusUnprocessableEntity          = http.StatusUnprocessableEntity          // RFC 4918, 11.2\n\tStatusLocked                       = http.StatusLocked                       // RFC 4918, 11.3\n\tStatusFailedDependency             = http.StatusFailedDependency             // RFC 4918, 11.4\n\tStatusTooEarly                     = http.StatusTooEarly                     // RFC 8470, 5.2.\n\tStatusUpgradeRequired              = http.StatusUpgradeRequired              // RFC 7231, 6.5.15\n\tStatusPreconditionRequired         = http.StatusPreconditionRequired         // RFC 6585, 3\n\tStatusTooManyRequests              = http.StatusTooManyRequests              // RFC 6585, 4\n\tStatusRequestHeaderFieldsTooLarge  = http.StatusRequestHeaderFieldsTooLarge  // RFC 6585, 5\n\tStatusUnavailableForLegalReasons   = http.StatusUnavailableForLegalReasons   // RFC 7725, 3\n\t// Unofficial Client Errors.\n\tStatusPageExpired                      = context.StatusPageExpired\n\tStatusBlockedByWindowsParentalControls = context.StatusBlockedByWindowsParentalControls\n\tStatusInvalidToken                     = context.StatusInvalidToken\n\tStatusTokenRequired                    = context.StatusTokenRequired\n\t//\n\tStatusInternalServerError           = http.StatusInternalServerError           // RFC 7231, 6.6.1\n\tStatusNotImplemented                = http.StatusNotImplemented                // RFC 7231, 6.6.2\n\tStatusBadGateway                    = http.StatusBadGateway                    // RFC 7231, 6.6.3\n\tStatusServiceUnavailable            = http.StatusServiceUnavailable            // RFC 7231, 6.6.4\n\tStatusGatewayTimeout                = http.StatusGatewayTimeout                // RFC 7231, 6.6.5\n\tStatusHTTPVersionNotSupported       = http.StatusHTTPVersionNotSupported       // RFC 7231, 6.6.6\n\tStatusVariantAlsoNegotiates         = http.StatusVariantAlsoNegotiates         // RFC 2295, 8.1\n\tStatusInsufficientStorage           = http.StatusInsufficientStorage           // RFC 4918, 11.5\n\tStatusLoopDetected                  = http.StatusLoopDetected                  // RFC 5842, 7.2\n\tStatusNotExtended                   = http.StatusNotExtended                   // RFC 2774, 7\n\tStatusNetworkAuthenticationRequired = http.StatusNetworkAuthenticationRequired // RFC 6585, 6\n\t// Unofficial Server Errors.\n\tStatusBandwidthLimitExceeded = context.StatusBandwidthLimitExceeded\n\tStatusInvalidSSLCertificate  = context.StatusInvalidSSLCertificate\n\tStatusSiteOverloaded         = context.StatusSiteOverloaded\n\tStatusSiteFrozen             = context.StatusSiteFrozen\n\tStatusNetworkReadTimeout     = context.StatusNetworkReadTimeout\n)\n\nvar (\n\t// StatusText returns a text for the HTTP status code. It returns the empty\n\t// string if the code is unknown.\n\t//\n\t// Shortcut for core/router#StatusText.\n\tStatusText = context.StatusText\n\t// RegisterMethods adds custom http methods to the \"AllMethods\" list.\n\t// Use it on initialization of your program.\n\t//\n\t// Shortcut for core/router#RegisterMethods.\n\tRegisterMethods = router.RegisterMethods\n\n\t// WebDAVMethods contains a list of WebDAV HTTP Verbs.\n\t// Register using RegiterMethods package-level function or\n\t// through HandleMany party-level method.\n\tWebDAVMethods = []string{\n\t\tMethodGet,\n\t\tMethodHead,\n\t\tMethodPatch,\n\t\tMethodPut,\n\t\tMethodPost,\n\t\tMethodDelete,\n\t\tMethodOptions,\n\t\tMethodConnect,\n\t\tMethodTrace,\n\t\t\"MKCOL\",\n\t\t\"COPY\",\n\t\t\"MOVE\",\n\t\t\"LOCK\",\n\t\t\"UNLOCK\",\n\t\t\"PROPFIND\",\n\t\t\"PROPPATCH\",\n\t\t\"LINK\",\n\t\t\"UNLINK\",\n\t\t\"PURGE\",\n\t\t\"VIEW\",\n\t}\n)\n\nvar globalPatches = &GlobalPatches{\n\tcontextPatches: &ContextPatches{\n\t\twriters: &ContextWriterPatches{},\n\t},\n}\n\n// GlobalPatches is a singleton features a uniform way to apply global/package-level modifications.\n//\n// See the `Patches` package-level function.\ntype GlobalPatches struct {\n\tcontextPatches *ContextPatches\n}\n\n// Patches returns the singleton of GlobalPatches, an easy way to modify\n// global(package-level) configuration for Iris applications.\n//\n// See its `Context` method.\n//\n// Example: https://github.com/kataras/iris/blob/main/_examples/response-writer/json-third-party/main.go\nfunc Patches() *GlobalPatches { // singleton.\n\treturn globalPatches\n}\n\n// Context returns the available context patches.\nfunc (p *GlobalPatches) Context() *ContextPatches {\n\treturn p.contextPatches\n}\n\n// ContextPatches contains the available global Iris context modifications.\ntype ContextPatches struct {\n\twriters *ContextWriterPatches\n}\n\n// Writers returns the available global Iris context modifications for REST writers.\nfunc (cp *ContextPatches) Writers() *ContextWriterPatches {\n\treturn cp.writers\n}\n\n// GetDomain modifies the way a domain is fetched from `Context#Domain` method,\n// which is used on subdomain redirect feature, i18n's language cookie for subdomain sharing\n// and the rewrite middleware.\nfunc (cp *ContextPatches) GetDomain(patchFunc func(hostport string) string) {\n\tcontext.GetDomain = patchFunc\n}\n\n// SetCookieKVExpiration modifies the default cookie expiration time on `Context#SetCookieKV` method.\nfunc (cp *ContextPatches) SetCookieKVExpiration(patch time.Duration) {\n\tcontext.SetCookieKVExpiration = patch\n}\n\n// ResolveHTTPFS modifies the default way to resolve a filesystem by any type of value.\n// It affects the Application's API Builder's `HandleDir` method.\nfunc (cp *ContextPatches) ResolveHTTPFS(patchFunc func(fsOrDir interface{}) http.FileSystem) {\n\tcontext.ResolveHTTPFS = patchFunc\n}\n\n// ResolveHTTPFS modifies the default way to resolve a filesystem by any type of value.\n// It affects the view engine's filesystem resolver.\nfunc (cp *ContextPatches) ResolveFS(patchFunc func(fsOrDir interface{}) fs.FS) {\n\tcontext.ResolveFS = patchFunc\n}\n\n// ContextWriterPatches features the context's writers patches.\ntype ContextWriterPatches struct{}\n\n// JSON sets a custom function which runs and overrides the default behavior of the `Context#JSON` method.\nfunc (cwp *ContextWriterPatches) JSON(patchFunc func(ctx Context, v interface{}, options *JSON) error) {\n\tcontext.WriteJSON = patchFunc\n}\n\n// JSONP sets a custom function which runs and overrides the default behavior of the `Context#JSONP` method.\nfunc (cwp *ContextWriterPatches) JSONP(patchFunc func(ctx Context, v interface{}, options *JSONP) error) {\n\tcontext.WriteJSONP = patchFunc\n}\n\n// XML sets a custom function which runs and overrides the default behavior of the `Context#XML` method.\nfunc (cwp *ContextWriterPatches) XML(patchFunc func(ctx Context, v interface{}, options *XML) error) {\n\tcontext.WriteXML = patchFunc\n}\n\n// Markdown sets a custom function which runs and overrides the default behavior of the `Context#Markdown` method.\nfunc (cwp *ContextWriterPatches) Markdown(patchFunc func(ctx Context, v []byte, options *Markdown) error) {\n\tcontext.WriteMarkdown = patchFunc\n}\n\n// YAML sets a custom function which runs and overrides the default behavior of the `Context#YAML` method.\nfunc (cwp *ContextWriterPatches) YAML(patchFunc func(ctx Context, v interface{}, indentSpace int) error) {\n\tcontext.WriteYAML = patchFunc\n}\n\n// Singleton is a structure which can be used as an embedded field on\n// struct/controllers that should be marked as singletons on `PartyConfigure` or `MVC` Applications.\ntype Singleton struct{}\n\n// Singleton returns true as this controller is a singleton.\nfunc (c Singleton) Singleton() bool { return true }\n"
        },
        {
          "name": "apps",
          "type": "tree",
          "content": null
        },
        {
          "name": "auth",
          "type": "tree",
          "content": null
        },
        {
          "name": "cache",
          "type": "tree",
          "content": null
        },
        {
          "name": "cli.go",
          "type": "blob",
          "size": 3.33,
          "content": "package iris\n\n//  +------------------------------------------------------------+\n//  | Bridge code between iris-cli and iris web application      |\n//  | https://github.com/kataras/iris-cli                        |\n//  +------------------------------------------------------------+\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n\n\t\"github.com/kataras/iris/v12/context\"\n\n\t\"gopkg.in/yaml.v3\"\n)\n\n// injectLiveReload tries to check if this application\n// runs under https://github.com/kataras/iris-cli and if so\n// then it checks if the livereload is enabled and then injects\n// the watch listener (js script) on every HTML response.\n// It has a slight performance cost but\n// this (iris-cli with watch and livereload enabled)\n// is meant to be used only in development mode.\n// It does a full reload at the moment and if the port changed\n// at runtime it will fire 404 instead of redirecting to the correct port (that's a TODO).\n//\n// tryInjectLiveReload runs right before Build -> BuildRouter.\nfunc injectLiveReload(r Party) (bool, error) {\n\tconf := struct {\n\t\tRunning    bool `yaml:\"Running,omitempty\"`\n\t\tLiveReload struct {\n\t\t\tDisable bool `yaml:\"Disable\"`\n\t\t\tPort    int  `yaml:\"Port\"`\n\t\t} `yaml:\"LiveReload\"`\n\t}{}\n\t// defaults to disabled here.\n\tconf.LiveReload.Disable = true\n\n\twd, err := os.Getwd()\n\tif err != nil {\n\t\treturn false, err\n\t}\n\n\tfor _, path := range []string{\".iris.yml\" /*, \"../.iris.yml\", \"../../.iris.yml\" */} {\n\t\tpath = filepath.Join(wd, path)\n\n\t\tif _, err := os.Stat(path); err == nil {\n\t\t\tinFile, err := os.OpenFile(path, os.O_RDONLY, 0600)\n\t\t\tif err != nil {\n\t\t\t\treturn false, err\n\t\t\t}\n\n\t\t\tdec := yaml.NewDecoder(inFile)\n\t\t\terr = dec.Decode(&conf)\n\t\t\tinFile.Close()\n\t\t\tif err != nil {\n\t\t\t\treturn false, err\n\t\t\t}\n\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !conf.Running || conf.LiveReload.Disable {\n\t\treturn false, nil\n\t}\n\n\tscriptReloadJS := []byte(fmt.Sprintf(`<script>(function () {\n    const scheme = document.location.protocol == \"https:\" ? \"wss\" : \"ws\";\n    const endpoint = scheme + \"://\" + document.location.hostname + \":%d/livereload\";\n\n    w = new WebSocket(endpoint);\n    w.onopen = function () {\n        console.info(\"LiveReload: initialization\");\n    };\n    w.onclose = function () {\n        console.info(\"LiveReload: terminated\");\n    };\n    w.onmessage = function (message) {\n        // NOTE: full-reload, at least for the moment. Also if backend changed its port then we will get 404 here. \n        window.location.reload();\n    };\n}());</script>`, conf.LiveReload.Port))\n\n\tbodyCloseTag := []byte(\"</body>\")\n\n\tr.UseRouter(func(ctx Context) {\n\t\trec := ctx.Recorder() // Record everything and write all in once at the Context release.\n\t\tctx.Next()            // call the next, so this is a 'done' handler.\n\t\tif strings.HasPrefix(ctx.GetContentType(), \"text/html\") {\n\t\t\t// delete(rec.Header(), context.ContentLengthHeaderKey)\n\n\t\t\tbody := rec.Body()\n\n\t\t\tif idx := bytes.LastIndex(body, bodyCloseTag); idx > 0 {\n\t\t\t\t// add the script right before last </body>.\n\t\t\t\tbody = append(body[:idx], bytes.Replace(body[idx:], bodyCloseTag, append(scriptReloadJS, bodyCloseTag...), 1)...)\n\t\t\t\trec.SetBody(body)\n\t\t\t} else {\n\t\t\t\t// Just append it.\n\t\t\t\trec.Write(scriptReloadJS) // nolint:errcheck\n\t\t\t}\n\n\t\t\tif _, has := rec.Header()[context.ContentLengthHeaderKey]; has {\n\t\t\t\trec.Header().Set(context.ContentLengthHeaderKey, fmt.Sprintf(\"%d\", len(rec.Body())))\n\t\t\t}\n\t\t}\n\t})\n\treturn true, nil\n}\n"
        },
        {
          "name": "configuration.go",
          "type": "blob",
          "size": 51.29,
          "content": "package iris\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/user\"\n\t\"path/filepath\"\n\t\"runtime\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/kataras/iris/v12/context\"\n\t\"github.com/kataras/iris/v12/core/netutil\"\n\n\t\"github.com/BurntSushi/toml\"\n\t\"github.com/kataras/golog\"\n\t\"github.com/kataras/sitemap\"\n\t\"github.com/kataras/tunnel\"\n\t\"gopkg.in/yaml.v3\"\n)\n\nconst globalConfigurationKeyword = \"~\"\n\n// homeConfigurationFilename returns the physical location of the global configuration(yaml or toml) file.\n// This is useful when we run multiple iris servers that share the same\n// configuration, even with custom values at its \"Other\" field.\n// It will return a file location\n// which targets to $HOME or %HOMEDRIVE%+%HOMEPATH% + \"iris\" + the given \"ext\".\nfunc homeConfigurationFilename(ext string) string {\n\treturn filepath.Join(homeDir(), \"iris\"+ext)\n}\n\nfunc homeDir() (home string) {\n\tu, err := user.Current()\n\tif u != nil && err == nil {\n\t\thome = u.HomeDir\n\t}\n\n\tif home == \"\" {\n\t\thome = os.Getenv(\"HOME\")\n\t}\n\n\tif home == \"\" {\n\t\tif runtime.GOOS == \"plan9\" {\n\t\t\thome = os.Getenv(\"home\")\n\t\t} else if runtime.GOOS == \"windows\" {\n\t\t\thome = os.Getenv(\"HOMEDRIVE\") + os.Getenv(\"HOMEPATH\")\n\t\t\tif home == \"\" {\n\t\t\t\thome = os.Getenv(\"USERPROFILE\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn\n}\n\nfunc parseYAML(filename string) (Configuration, error) {\n\tc := DefaultConfiguration()\n\t// get the abs\n\t// which will try to find the 'filename' from current workind dir too.\n\tyamlAbsPath, err := filepath.Abs(filename)\n\tif err != nil {\n\t\treturn c, fmt.Errorf(\"parse yaml: %w\", err)\n\t}\n\n\t// read the raw contents of the file\n\tdata, err := os.ReadFile(yamlAbsPath)\n\tif err != nil {\n\t\treturn c, fmt.Errorf(\"parse yaml: %w\", err)\n\t}\n\n\t// put the file's contents as yaml to the default configuration(c)\n\tif err := yaml.Unmarshal(data, &c); err != nil {\n\t\treturn c, fmt.Errorf(\"parse yaml: %w\", err)\n\t}\n\treturn c, nil\n}\n\n// YAML reads Configuration from a configuration.yml file.\n//\n// Accepts the absolute path of the cfg.yml.\n// An error will be shown to the user via panic with the error message.\n// Error may occur when the cfg.yml does not exist or is not formatted correctly.\n//\n// Note: if the char '~' passed as \"filename\" then it tries to load and return\n// the configuration from the $home_directory + iris.yml,\n// see `WithGlobalConfiguration` for more information.\n//\n// Usage:\n// app.Configure(iris.WithConfiguration(iris.YAML(\"myconfig.yml\"))) or\n// app.Run([iris.Runner], iris.WithConfiguration(iris.YAML(\"myconfig.yml\"))).\nfunc YAML(filename string) Configuration {\n\t// check for globe configuration file and use that, otherwise\n\t// return the default configuration if file doesn't exist.\n\tif filename == globalConfigurationKeyword {\n\t\tfilename = homeConfigurationFilename(\".yml\")\n\t\tif _, err := os.Stat(filename); os.IsNotExist(err) {\n\t\t\tpanic(\"default configuration file '\" + filename + \"' does not exist\")\n\t\t}\n\t}\n\n\tc, err := parseYAML(filename)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn c\n}\n\n// TOML reads Configuration from a toml-compatible document file.\n// Read more about toml's implementation at:\n// https://github.com/toml-lang/toml\n//\n// Accepts the absolute path of the configuration file.\n// An error will be shown to the user via panic with the error message.\n// Error may occur when the file does not exist or is not formatted correctly.\n//\n// Note: if the char '~' passed as \"filename\" then it tries to load and return\n// the configuration from the $home_directory + iris.tml,\n// see `WithGlobalConfiguration` for more information.\n//\n// Usage:\n// app.Configure(iris.WithConfiguration(iris.TOML(\"myconfig.tml\"))) or\n// app.Run([iris.Runner], iris.WithConfiguration(iris.TOML(\"myconfig.tml\"))).\nfunc TOML(filename string) Configuration {\n\tc := DefaultConfiguration()\n\n\t// check for globe configuration file and use that, otherwise\n\t// return the default configuration if file doesn't exist.\n\tif filename == globalConfigurationKeyword {\n\t\tfilename = homeConfigurationFilename(\".tml\")\n\t\tif _, err := os.Stat(filename); os.IsNotExist(err) {\n\t\t\tpanic(\"default configuration file '\" + filename + \"' does not exist\")\n\t\t}\n\t}\n\n\t// get the abs\n\t// which will try to find the 'filename' from current workind dir too.\n\ttomlAbsPath, err := filepath.Abs(filename)\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"toml: %w\", err))\n\t}\n\n\t// read the raw contents of the file\n\tdata, err := os.ReadFile(tomlAbsPath)\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"toml :%w\", err))\n\t}\n\n\t// put the file's contents as toml to the default configuration(c)\n\tif _, err := toml.Decode(string(data), &c); err != nil {\n\t\tpanic(fmt.Errorf(\"toml :%w\", err))\n\t}\n\t// Author's notes:\n\t// The toml's 'usual thing' for key naming is: the_config_key instead of TheConfigKey\n\t// but I am always prefer to use the specific programming language's syntax\n\t// and the original configuration name fields for external configuration files\n\t// so we do 'toml: \"TheConfigKeySameAsTheConfigField\" instead.\n\treturn c\n}\n\n// Configurator is just an interface which accepts the framework instance.\n//\n// It can be used to register a custom configuration with `Configure` in order\n// to modify the framework instance.\n//\n// Currently Configurator is being used to describe the configuration's fields values.\ntype Configurator func(*Application)\n\n// WithGlobalConfiguration will load the global yaml configuration file\n// from the home directory and it will set/override the whole app's configuration\n// to that file's contents. The global configuration file can be modified by user\n// and be used by multiple iris instances.\n//\n// This is useful when we run multiple iris servers that share the same\n// configuration, even with custom values at its \"Other\" field.\n//\n// Usage: `app.Configure(iris.WithGlobalConfiguration)` or `app.Run([iris.Runner], iris.WithGlobalConfiguration)`.\nvar WithGlobalConfiguration = func(app *Application) {\n\tapp.Configure(WithConfiguration(YAML(globalConfigurationKeyword)))\n}\n\n// WithLogLevel sets the `Configuration.LogLevel` field.\nfunc WithLogLevel(level string) Configurator {\n\treturn func(app *Application) {\n\t\tif app.logger == nil {\n\t\t\tapp.logger = golog.Default\n\t\t}\n\t\tapp.logger.SetLevel(level) // can be fired through app.Configure.\n\n\t\tapp.config.LogLevel = level\n\t}\n}\n\n// WithSocketSharding sets the `Configuration.SocketSharding` field to true.\nfunc WithSocketSharding(app *Application) {\n\t// Note(@kataras): It could be a host Configurator but it's an application setting in order\n\t// to configure it through yaml/toml files as well.\n\tapp.config.SocketSharding = true\n}\n\n// WithKeepAlive sets the `Configuration.KeepAlive` field to the given duration.\nfunc WithKeepAlive(keepAliveDur time.Duration) Configurator {\n\treturn func(app *Application) {\n\t\tapp.config.KeepAlive = keepAliveDur\n\t}\n}\n\n// WithTimeout sets the `Configuration.Timeout` field to the given duration.\nfunc WithTimeout(timeoutDur time.Duration, htmlBody ...string) Configurator {\n\treturn func(app *Application) {\n\t\tapp.config.Timeout = timeoutDur\n\t\tif len(htmlBody) > 0 {\n\t\t\tapp.config.TimeoutMessage = htmlBody[0]\n\t\t}\n\t}\n}\n\n// NonBlocking sets the `Configuration.NonBlocking` field to true.\nfunc NonBlocking() Configurator {\n\treturn func(app *Application) {\n\t\tapp.config.NonBlocking = true\n\t}\n}\n\n// WithoutServerError will cause to ignore the matched \"errors\"\n// from the main application's `Run/Listen` function.\n//\n// Usage:\n// err := app.Listen(\":8080\", iris.WithoutServerError(iris.ErrServerClosed))\n// will return `nil` if the server's error was `http/iris#ErrServerClosed`.\n//\n// See `Configuration#IgnoreServerErrors []string` too.\n//\n// Example: https://github.com/kataras/iris/tree/main/_examples/http-server/listen-addr/omit-server-errors\nfunc WithoutServerError(errors ...error) Configurator {\n\treturn func(app *Application) {\n\t\tif len(errors) == 0 {\n\t\t\treturn\n\t\t}\n\n\t\terrorsAsString := make([]string, len(errors))\n\t\tfor i, e := range errors {\n\t\t\terrorsAsString[i] = e.Error()\n\t\t}\n\n\t\tapp.config.IgnoreServerErrors = append(app.config.IgnoreServerErrors, errorsAsString...)\n\t}\n}\n\n// WithoutStartupLog turns off the information send, once, to the terminal when the main server is open.\nvar WithoutStartupLog = func(app *Application) {\n\tapp.config.DisableStartupLog = true\n}\n\n// WithoutBanner is a conversion for the `WithoutStartupLog` option.\n//\n// Turns off the information send, once, to the terminal when the main server is open.\nvar WithoutBanner = WithoutStartupLog\n\n// WithoutInterruptHandler disables the automatic graceful server shutdown\n// when control/cmd+C pressed.\nvar WithoutInterruptHandler = func(app *Application) {\n\tapp.config.DisableInterruptHandler = true\n}\n\n// WithoutPathCorrection disables the PathCorrection setting.\n//\n// See `Configuration`.\nvar WithoutPathCorrection = func(app *Application) {\n\tapp.config.DisablePathCorrection = true\n}\n\n// WithPathIntelligence enables the EnablePathIntelligence setting.\n//\n// See `Configuration`.\nvar WithPathIntelligence = func(app *Application) {\n\tapp.config.EnablePathIntelligence = true\n}\n\n// WithoutPathCorrectionRedirection disables the PathCorrectionRedirection setting.\n//\n// See `Configuration`.\nvar WithoutPathCorrectionRedirection = func(app *Application) {\n\tapp.config.DisablePathCorrection = false\n\tapp.config.DisablePathCorrectionRedirection = true\n}\n\n// WithoutBodyConsumptionOnUnmarshal disables BodyConsumptionOnUnmarshal setting.\n//\n// See `Configuration`.\nvar WithoutBodyConsumptionOnUnmarshal = func(app *Application) {\n\tapp.config.DisableBodyConsumptionOnUnmarshal = true\n}\n\n// WithEmptyFormError enables the setting `FireEmptyFormError`.\n//\n// See `Configuration`.\nvar WithEmptyFormError = func(app *Application) {\n\tapp.config.FireEmptyFormError = true\n}\n\n// WithPathEscape sets the EnablePathEscape setting to true.\n//\n// See `Configuration`.\nvar WithPathEscape = func(app *Application) {\n\tapp.config.EnablePathEscape = true\n}\n\n// WithLowercaseRouting enables for lowercase routing by\n// setting the `ForceLowercaseRoutes` to true.\n//\n// See `Configuration`.\nvar WithLowercaseRouting = func(app *Application) {\n\tapp.config.ForceLowercaseRouting = true\n}\n\n// WithDynamicHandler enables for dynamic routing by\n// setting the `EnableDynamicHandler` to true.\n//\n// See `Configuration`.\nvar WithDynamicHandler = func(app *Application) {\n\tapp.config.EnableDynamicHandler = true\n}\n\n// WithOptimizations can force the application to optimize for the best performance where is possible.\n//\n// See `Configuration`.\nvar WithOptimizations = func(app *Application) {\n\tapp.config.EnableOptimizations = true\n}\n\n// WithProtoJSON enables the proto marshaler on Context.JSON method.\n//\n// See `Configuration` for more.\nvar WithProtoJSON = func(app *Application) {\n\tapp.config.EnableProtoJSON = true\n}\n\n// WithEasyJSON enables the fast easy json marshaler on Context.JSON method.\n//\n// See `Configuration` for more.\nvar WithEasyJSON = func(app *Application) {\n\tapp.config.EnableEasyJSON = true\n}\n\n// WithFireMethodNotAllowed enables the FireMethodNotAllowed setting.\n//\n// See `Configuration`.\nvar WithFireMethodNotAllowed = func(app *Application) {\n\tapp.config.FireMethodNotAllowed = true\n}\n\n// WithoutAutoFireStatusCode sets the DisableAutoFireStatusCode setting to true.\n//\n// See `Configuration`.\nvar WithoutAutoFireStatusCode = func(app *Application) {\n\tapp.config.DisableAutoFireStatusCode = true\n}\n\n// WithResetOnFireErrorCode sets the ResetOnFireErrorCode setting to true.\n//\n// See `Configuration`.\nvar WithResetOnFireErrorCode = func(app *Application) {\n\tapp.config.ResetOnFireErrorCode = true\n}\n\n// WithURLParamSeparator sets the URLParamSeparator setting to \"sep\".\n//\n// See `Configuration`.\nvar WithURLParamSeparator = func(sep string) Configurator {\n\treturn func(app *Application) {\n\t\tapp.config.URLParamSeparator = &sep\n\t}\n}\n\n// WithTimeFormat sets the TimeFormat setting.\n//\n// See `Configuration`.\nfunc WithTimeFormat(timeformat string) Configurator {\n\treturn func(app *Application) {\n\t\tapp.config.TimeFormat = timeformat\n\t}\n}\n\n// WithCharset sets the Charset setting.\n//\n// See `Configuration`.\nfunc WithCharset(charset string) Configurator {\n\treturn func(app *Application) {\n\t\tapp.config.Charset = charset\n\t}\n}\n\n// WithPostMaxMemory sets the maximum post data size\n// that a client can send to the server, this differs\n// from the overall request body size which can be modified\n// by the `context#SetMaxRequestBodySize` or `iris#LimitRequestBodySize`.\n//\n// Defaults to 32MB or 32 << 20 or 32*iris.MB if you prefer.\nfunc WithPostMaxMemory(limit int64) Configurator {\n\treturn func(app *Application) {\n\t\tapp.config.PostMaxMemory = limit\n\t}\n}\n\n// WithRemoteAddrHeader adds a new request header name\n// that can be used to validate the client's real IP.\nfunc WithRemoteAddrHeader(header ...string) Configurator {\n\treturn func(app *Application) {\n\t\tfor _, h := range header {\n\t\t\texists := false\n\t\t\tfor _, v := range app.config.RemoteAddrHeaders {\n\t\t\t\tif v == h {\n\t\t\t\t\texists = true\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif !exists {\n\t\t\t\tapp.config.RemoteAddrHeaders = append(app.config.RemoteAddrHeaders, h)\n\t\t\t}\n\t\t}\n\t}\n}\n\n// WithoutRemoteAddrHeader removes an existing request header name\n// that can be used to validate and parse the client's real IP.\n//\n// Look `context.RemoteAddr()` for more.\nfunc WithoutRemoteAddrHeader(headerName string) Configurator {\n\treturn func(app *Application) {\n\t\ttmp := app.config.RemoteAddrHeaders[:0]\n\t\tfor _, v := range app.config.RemoteAddrHeaders {\n\t\t\tif v != headerName {\n\t\t\t\ttmp = append(tmp, v)\n\t\t\t}\n\t\t}\n\t\tapp.config.RemoteAddrHeaders = tmp\n\t}\n}\n\n// WithRemoteAddrPrivateSubnet adds a new private sub-net to be excluded from `context.RemoteAddr`.\n// See `WithRemoteAddrHeader` too.\nfunc WithRemoteAddrPrivateSubnet(startIP, endIP string) Configurator {\n\treturn func(app *Application) {\n\t\tapp.config.RemoteAddrPrivateSubnets = append(app.config.RemoteAddrPrivateSubnets, netutil.IPRange{\n\t\t\tStart: startIP,\n\t\t\tEnd:   endIP,\n\t\t})\n\t}\n}\n\n// WithSSLProxyHeader sets a SSLProxyHeaders key value pair.\n// Example: WithSSLProxyHeader(\"X-Forwarded-Proto\", \"https\").\n// See `Context.IsSSL` for more.\nfunc WithSSLProxyHeader(headerKey, headerValue string) Configurator {\n\treturn func(app *Application) {\n\t\tif app.config.SSLProxyHeaders == nil {\n\t\t\tapp.config.SSLProxyHeaders = make(map[string]string)\n\t\t}\n\n\t\tapp.config.SSLProxyHeaders[headerKey] = headerValue\n\t}\n}\n\n// WithHostProxyHeader sets a HostProxyHeaders key value pair.\n// Example: WithHostProxyHeader(\"X-Host\").\n// See `Context.Host` for more.\nfunc WithHostProxyHeader(headers ...string) Configurator {\n\treturn func(app *Application) {\n\t\tif app.config.HostProxyHeaders == nil {\n\t\t\tapp.config.HostProxyHeaders = make(map[string]bool)\n\t\t}\n\t\tfor _, k := range headers {\n\t\t\tapp.config.HostProxyHeaders[k] = true\n\t\t}\n\t}\n}\n\n// WithOtherValue adds a value based on a key to the Other setting.\n//\n// See `Configuration.Other`.\nfunc WithOtherValue(key string, val interface{}) Configurator {\n\treturn func(app *Application) {\n\t\tif app.config.Other == nil {\n\t\t\tapp.config.Other = make(map[string]interface{})\n\t\t}\n\t\tapp.config.Other[key] = val\n\t}\n}\n\n// WithSitemap enables the sitemap generator.\n// Use the Route's `SetLastMod`, `SetChangeFreq` and `SetPriority` to modify\n// the sitemap's URL child element properties.\n// Excluded routes:\n// - dynamic\n// - subdomain\n// - offline\n// - ExcludeSitemap method called\n//\n// It accepts a \"startURL\" input argument which\n// is the prefix for the registered routes that will be included in the sitemap.\n//\n// If more than 50,000 static routes are registered then sitemaps will be splitted and a sitemap index will be served in\n// /sitemap.xml.\n//\n// If `Application.I18n.Load/LoadAssets` is called then the sitemap will contain translated links for each static route.\n//\n// If the result does not complete your needs you can take control\n// and use the github.com/kataras/sitemap package to generate a customized one instead.\n//\n// Example: https://github.com/kataras/iris/tree/main/_examples/sitemap.\nfunc WithSitemap(startURL string) Configurator {\n\tsitemaps := sitemap.New(startURL)\n\treturn func(app *Application) {\n\t\tvar defaultLang string\n\t\tif tags := app.I18n.Tags(); len(tags) > 0 {\n\t\t\tdefaultLang = tags[0].String()\n\t\t\tsitemaps.DefaultLang(defaultLang)\n\t\t}\n\n\t\tfor _, r := range app.GetRoutes() {\n\t\t\tif !r.IsStatic() || r.Subdomain != \"\" || !r.IsOnline() || r.NoSitemap {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tloc := r.StaticPath()\n\t\t\tvar translatedLinks []sitemap.Link\n\n\t\t\tfor _, tag := range app.I18n.Tags() {\n\t\t\t\tlang := tag.String()\n\t\t\t\tlangPath := lang\n\t\t\t\thref := \"\"\n\t\t\t\tif lang == defaultLang {\n\t\t\t\t\t// http://domain.com/en-US/path to just http://domain.com/path if en-US is the default language.\n\t\t\t\t\tlangPath = \"\"\n\t\t\t\t}\n\n\t\t\t\tif app.I18n.PathRedirect {\n\t\t\t\t\t// then use the path prefix.\n\t\t\t\t\t// e.g. http://domain.com/el-GR/path\n\t\t\t\t\tif langPath == \"\" { // fix double slashes http://domain.com// when self-included default language.\n\t\t\t\t\t\thref = loc\n\t\t\t\t\t} else {\n\t\t\t\t\t\thref = \"/\" + langPath + loc\n\t\t\t\t\t}\n\t\t\t\t} else if app.I18n.Subdomain {\n\t\t\t\t\t// then use the subdomain.\n\t\t\t\t\t// e.g. http://el.domain.com/path\n\t\t\t\t\tscheme := netutil.ResolveSchemeFromVHost(startURL)\n\t\t\t\t\thost := strings.TrimLeft(startURL, scheme)\n\t\t\t\t\tif langPath != \"\" {\n\t\t\t\t\t\thref = scheme + strings.Split(langPath, \"-\")[0] + \".\" + host + loc\n\t\t\t\t\t} else {\n\t\t\t\t\t\thref = loc\n\t\t\t\t\t}\n\n\t\t\t\t} else if p := app.I18n.URLParameter; p != \"\" {\n\t\t\t\t\t// then use the URL parameter.\n\t\t\t\t\t// e.g. http://domain.com/path?lang=el-GR\n\t\t\t\t\thref = loc + \"?\" + p + \"=\" + lang\n\t\t\t\t} else {\n\t\t\t\t\t// then skip it, we can't generate the link at this state.\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\ttranslatedLinks = append(translatedLinks, sitemap.Link{\n\t\t\t\t\tRel:      \"alternate\",\n\t\t\t\t\tHreflang: lang,\n\t\t\t\t\tHref:     href,\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tsitemaps.URL(sitemap.URL{\n\t\t\t\tLoc:        loc,\n\t\t\t\tLastMod:    r.LastMod,\n\t\t\t\tChangeFreq: r.ChangeFreq,\n\t\t\t\tPriority:   r.Priority,\n\t\t\t\tLinks:      translatedLinks,\n\t\t\t})\n\t\t}\n\n\t\tfor _, s := range sitemaps.Build() {\n\t\t\tcontentCopy := make([]byte, len(s.Content))\n\t\t\tcopy(contentCopy, s.Content)\n\n\t\t\thandler := func(ctx Context) {\n\t\t\t\tctx.ContentType(context.ContentXMLHeaderValue)\n\t\t\t\tctx.Write(contentCopy) // nolint:errcheck\n\t\t\t}\n\t\t\tif app.builded {\n\t\t\t\troutes := app.CreateRoutes([]string{MethodGet, MethodHead, MethodOptions}, s.Path, handler)\n\n\t\t\t\tfor _, r := range routes {\n\t\t\t\t\tif err := app.Router.AddRouteUnsafe(r); err != nil {\n\t\t\t\t\t\tapp.Logger().Errorf(\"sitemap route: %v\", err)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tapp.HandleMany(\"GET HEAD OPTIONS\", s.Path, handler)\n\t\t\t}\n\n\t\t}\n\t}\n}\n\n// WithTunneling is the `iris.Configurator` for the `iris.Configuration.Tunneling` field.\n// It's used to enable http tunneling for an Iris Application, per registered host\n//\n// Alternatively use the `iris.WithConfiguration(iris.Configuration{Tunneling: iris.TunnelingConfiguration{ ...}}}`.\nvar WithTunneling = func(app *Application) {\n\tconf := TunnelingConfiguration{\n\t\tTunnels: []Tunnel{{}}, // create empty tunnel, its addr and name are set right before host serve.\n\t}\n\n\tapp.config.Tunneling = conf\n}\n\ntype (\n\t// TunnelingConfiguration contains configuration\n\t// for the optional tunneling through ngrok feature.\n\t// Note that the ngrok should be already installed at the host machine.\n\tTunnelingConfiguration = tunnel.Configuration\n\t// Tunnel is the Tunnels field of the TunnelingConfiguration structure.\n\tTunnel = tunnel.Tunnel\n)\n\n// Configuration holds the necessary settings for an Iris Application instance.\n// All fields are optionally, the default values will work for a common web application.\n//\n// A Configuration value can be passed through `WithConfiguration` Configurator.\n// Usage:\n// conf := iris.Configuration{ ... }\n// app := iris.New()\n// app.Configure(iris.WithConfiguration(conf)) OR\n// app.Run/Listen(..., iris.WithConfiguration(conf)).\ntype Configuration struct {\n\t// VHost lets you customize the trusted domain this server should run on.\n\t// Its value will be used as the return value of Context.Domain() too.\n\t// It can be retrieved by the context if needed (i.e router for subdomains)\n\tVHost string `ini:\"v_host\" json:\"vHost\" yaml:\"VHost\" toml:\"VHost\" env:\"V_HOST\"`\n\n\t// LogLevel is the log level the application should use to output messages.\n\t// Logger, by default, is mostly used on Build state but it is also possible\n\t// that debug error messages could be thrown when the app is running, e.g.\n\t// when malformed data structures try to be sent on Client (i.e Context.JSON/JSONP/XML...).\n\t//\n\t// Defaults to \"info\". Possible values are:\n\t// * \"disable\"\n\t// * \"fatal\"\n\t// * \"error\"\n\t// * \"warn\"\n\t// * \"info\"\n\t// * \"debug\"\n\tLogLevel string `ini:\"log_level\" json:\"logLevel\" yaml:\"LogLevel\" toml:\"LogLevel\" env:\"LOG_LEVEL\"`\n\n\t// SocketSharding enables SO_REUSEPORT (or SO_REUSEADDR for windows)\n\t// on all registered Hosts.\n\t// This option allows linear scaling server performance on multi-CPU servers.\n\t//\n\t// Please read the following:\n\t// 1. https://stackoverflow.com/a/14388707\n\t// 2. https://stackoverflow.com/a/59692868\n\t// 3. https://www.nginx.com/blog/socket-sharding-nginx-release-1-9-1/\n\t// 4. (BOOK) Learning HTTP/2: A Practical Guide for Beginners:\n\t//\t  Page 37, To Shard or Not to Shard?\n\t//\n\t// Defaults to false.\n\tSocketSharding bool `ini:\"socket_sharding\" json:\"socketSharding\" yaml:\"SocketSharding\" toml:\"SocketSharding\" env:\"SOCKET_SHARDING\"`\n\t// KeepAlive sets the TCP connection's keep-alive duration.\n\t// If set to greater than zero then a tcp listener featured keep alive\n\t// will be used instead of the simple tcp one.\n\t//\n\t// Defaults to 0.\n\tKeepAlive time.Duration `ini:\"keepalive\" json:\"keepAlive\" yaml:\"KeepAlive\" toml:\"KeepAlive\" env:\"KEEP_ALIVE\"`\n\t// Timeout wraps the application's router with an http timeout handler\n\t// if the value is greater than zero.\n\t//\n\t// The underline response writer supports the Pusher interface but does not support\n\t// the Hijacker or Flusher interfaces when Timeout handler is registered.\n\t//\n\t// Read more at: https://pkg.go.dev/net/http#TimeoutHandler.\n\tTimeout time.Duration `ini:\"timeout\" json:\"timeout\" yaml:\"Timeout\" toml:\"Timeout\"`\n\t// TimeoutMessage specifies the HTML body when a handler hits its life time based\n\t// on the Timeout configuration field.\n\tTimeoutMessage string `ini:\"timeout_message\" json:\"timeoutMessage\" yaml:\"TimeoutMessage\" toml:\"TimeoutMessage\"`\n\t// NonBlocking, if set to true then the server will start listening for incoming connections\n\t// without blocking the main goroutine. Use the Application.Wait method to block and wait for the server to be up and running.\n\tNonBlocking bool `ini:\"non_blocking\" json:\"nonBlocking\" yaml:\"NonBlocking\" toml:\"NonBlocking\"`\n\n\t// Tunneling can be optionally set to enable ngrok http(s) tunneling for this Iris app instance.\n\t// See the `WithTunneling` Configurator too.\n\tTunneling TunnelingConfiguration `ini:\"tunneling\" json:\"tunneling,omitempty\" yaml:\"Tunneling\" toml:\"Tunneling\"`\n\t// IgnoreServerErrors will cause to ignore the matched \"errors\"\n\t// from the main application's `Run` function.\n\t// This is a slice of string, not a slice of error\n\t// users can register these errors using yaml or toml configuration file\n\t// like the rest of the configuration fields.\n\t//\n\t// See `WithoutServerError(...)` function too.\n\t//\n\t// Example: https://github.com/kataras/iris/tree/main/_examples/http-server/listen-addr/omit-server-errors\n\t//\n\t// Defaults to an empty slice.\n\tIgnoreServerErrors []string `ini:\"ignore_server_errors\" json:\"ignoreServerErrors,omitempty\" yaml:\"IgnoreServerErrors\" toml:\"IgnoreServerErrors\"`\n\n\t// DisableStartupLog if set to true then it turns off the write banner on server startup.\n\t//\n\t// Defaults to false.\n\tDisableStartupLog bool `ini:\"disable_startup_log\" json:\"disableStartupLog,omitempty\" yaml:\"DisableStartupLog\" toml:\"DisableStartupLog\"`\n\t// DisableInterruptHandler if set to true then it disables the automatic graceful server shutdown\n\t// when control/cmd+C pressed.\n\t// Turn this to true if you're planning to handle this by your own via a custom host.Task.\n\t//\n\t// Defaults to false.\n\tDisableInterruptHandler bool `ini:\"disable_interrupt_handler\" json:\"disableInterruptHandler,omitempty\" yaml:\"DisableInterruptHandler\" toml:\"DisableInterruptHandler\"`\n\n\t// DisablePathCorrection disables the correcting\n\t// and redirecting or executing directly the handler of\n\t// the requested path to the registered path\n\t// for example, if /home/ path is requested but no handler for this Route found,\n\t// then the Router checks if /home handler exists, if yes,\n\t// (permanent)redirects the client to the correct path /home.\n\t//\n\t// See `DisablePathCorrectionRedirection` to enable direct handler execution instead of redirection.\n\t//\n\t// Defaults to false.\n\tDisablePathCorrection bool `ini:\"disable_path_correction\" json:\"disablePathCorrection,omitempty\" yaml:\"DisablePathCorrection\" toml:\"DisablePathCorrection\"`\n\t// DisablePathCorrectionRedirection works whenever configuration.DisablePathCorrection is set to false\n\t// and if DisablePathCorrectionRedirection set to true then it will fire the handler of the matching route without\n\t// the trailing slash (\"/\") instead of send a redirection status.\n\t//\n\t// Defaults to false.\n\tDisablePathCorrectionRedirection bool `ini:\"disable_path_correction_redirection\" json:\"disablePathCorrectionRedirection,omitempty\" yaml:\"DisablePathCorrectionRedirection\" toml:\"DisablePathCorrectionRedirection\"`\n\t// EnablePathIntelligence if set to true,\n\t// the router will redirect HTTP \"GET\" not found pages to the most closest one path(if any). For example\n\t// you register a route at \"/contact\" path -\n\t// a client tries to reach it by \"/cont\", the path will be automatic fixed\n\t// and the client will be redirected to the \"/contact\" path\n\t// instead of getting a 404 not found response back.\n\t//\n\t// Defaults to false.\n\tEnablePathIntelligence bool `ini:\"enable_path_intelligence\" json:\"enablePathIntelligence,omitempty\" yaml:\"EnablePathIntelligence\" toml:\"EnablePathIntelligence\"`\n\t// EnablePathEscape when is true then its escapes the path and the named parameters (if any).\n\t// When do you need to Disable(false) it:\n\t// accepts parameters with slash '/'\n\t// Request: http://localhost:8080/details/Project%2FDelta\n\t// ctx.Param(\"project\") returns the raw named parameter: Project%2FDelta\n\t// which you can escape it manually with net/url:\n\t// projectName, _ := url.QueryUnescape(c.Param(\"project\").\n\t//\n\t// Defaults to false.\n\tEnablePathEscape bool `ini:\"enable_path_escape\" json:\"enablePathEscape,omitempty\" yaml:\"EnablePathEscape\" toml:\"EnablePathEscape\"`\n\t// ForceLowercaseRouting if enabled, converts all registered routes paths to lowercase\n\t// and it does lowercase the request path too for matching.\n\t//\n\t// Defaults to false.\n\tForceLowercaseRouting bool `ini:\"force_lowercase_routing\" json:\"forceLowercaseRouting,omitempty\" yaml:\"ForceLowercaseRouting\" toml:\"ForceLowercaseRouting\"`\n\t// EnableOptimizations enables dynamic request handler.\n\t// It gives the router the feature to add routes while in serve-time,\n\t// when `RefreshRouter` is called.\n\t// If this setting is set to true, the request handler will use a mutex for data(trie routing) protection,\n\t// hence the performance cost.\n\t//\n\t// Defaults to false.\n\tEnableDynamicHandler bool `ini:\"enable_dynamic_handler\" json:\"enableDynamicHandler,omitempty\" yaml:\"EnableDynamicHandler\" toml:\"EnableDynamicHandler\"`\n\t// FireMethodNotAllowed if it's true router checks for StatusMethodNotAllowed(405) and\n\t//  fires the 405 error instead of 404\n\t// Defaults to false.\n\tFireMethodNotAllowed bool `ini:\"fire_method_not_allowed\" json:\"fireMethodNotAllowed,omitempty\" yaml:\"FireMethodNotAllowed\" toml:\"FireMethodNotAllowed\"`\n\t// DisableAutoFireStatusCode if true then it turns off the http error status code\n\t// handler automatic execution on error code from a `Context.StatusCode` call.\n\t// By-default a custom http error handler will be fired when \"Context.StatusCode(errorCode)\" called.\n\t//\n\t// Defaults to false.\n\tDisableAutoFireStatusCode bool `ini:\"disable_auto_fire_status_code\" json:\"disableAutoFireStatusCode,omitempty\" yaml:\"DisableAutoFireStatusCode\" toml:\"DisableAutoFireStatusCode\"`\n\t// ResetOnFireErrorCode if true then any previously response body or headers through\n\t// response recorder will be ignored and the router\n\t// will fire the registered (or default) HTTP error handler instead.\n\t// See `core/router/handler#FireErrorCode` and `Context.EndRequest` for more details.\n\t//\n\t// Read more at: https://github.com/kataras/iris/issues/1531\n\t//\n\t// Defaults to false.\n\tResetOnFireErrorCode bool `ini:\"reset_on_fire_error_code\" json:\"resetOnFireErrorCode,omitempty\" yaml:\"ResetOnFireErrorCode\" toml:\"ResetOnFireErrorCode\"`\n\n\t// URLParamSeparator defines the character(s) separator for Context.URLParamSlice.\n\t// If empty or null then request url parameters with comma separated values will be retrieved as one.\n\t//\n\t// Defaults to comma \",\".\n\tURLParamSeparator *string `ini:\"url_param_separator\" json:\"urlParamSeparator,omitempty\" yaml:\"URLParamSeparator\" toml:\"URLParamSeparator\"`\n\t// EnableOptimization when this field is true\n\t// then the application tries to optimize for the best performance where is possible.\n\t//\n\t// Defaults to false.\n\t// Deprecated. As of version 12.2.x this field does nothing.\n\tEnableOptimizations bool `ini:\"enable_optimizations\" json:\"enableOptimizations,omitempty\" yaml:\"EnableOptimizations\" toml:\"EnableOptimizations\"`\n\t// EnableProtoJSON when this field is true\n\t// enables the proto marshaler on given proto messages when calling the Context.JSON method.\n\t//\n\t// Defaults to false.\n\tEnableProtoJSON bool `ini:\"enable_proto_json\" json:\"enableProtoJSON,omitempty\" yaml:\"EnableProtoJSON\" toml:\"EnableProtoJSON\"`\n\t// EnableEasyJSON when this field is true\n\t// enables the fast easy json marshaler on compatible struct values when calling the Context.JSON method.\n\t//\n\t// Defaults to false.\n\tEnableEasyJSON bool `ini:\"enable_easy_json\" json:\"enableEasyJSON,omitempty\" yaml:\"EnableEasyJSON\" toml:\"EnableEasyJSON\"`\n\n\t// DisableBodyConsumptionOnUnmarshal manages the reading behavior of the context's body readers/binders.\n\t// If set to true then it\n\t// disables the body consumption by the `context.UnmarshalBody/ReadJSON/ReadXML`.\n\t//\n\t// By-default io.ReadAll` is used to read the body from the `context.Request.Body which is an `io.ReadCloser`,\n\t// if this field set to true then a new buffer will be created to read from and the request body.\n\t// The body will not be changed and existing data before the\n\t// context.UnmarshalBody/ReadJSON/ReadXML will be not consumed.\n\t//\n\t// See `Context.RecordRequestBody` method for the same feature, per-request.\n\tDisableBodyConsumptionOnUnmarshal bool `ini:\"disable_body_consumption\" json:\"disableBodyConsumptionOnUnmarshal,omitempty\" yaml:\"DisableBodyConsumptionOnUnmarshal\" toml:\"DisableBodyConsumptionOnUnmarshal\"`\n\t// FireEmptyFormError returns if set to tue true then the `context.ReadForm/ReadQuery/ReadBody`\n\t// will return an `iris.ErrEmptyForm` on empty request form data.\n\tFireEmptyFormError bool `ini:\"fire_empty_form_error\" json:\"fireEmptyFormError,omitempty\" yaml:\"FireEmptyFormError\" toml:\"FireEmptyFormError\"`\n\n\t// TimeFormat time format for any kind of datetime parsing\n\t// Defaults to  \"Mon, 02 Jan 2006 15:04:05 GMT\".\n\tTimeFormat string `ini:\"time_format\" json:\"timeFormat,omitempty\" yaml:\"TimeFormat\" toml:\"TimeFormat\"`\n\n\t// Charset character encoding for various rendering\n\t// used for templates and the rest of the responses\n\t// Defaults to \"utf-8\".\n\tCharset string `ini:\"charset\" json:\"charset,omitempty\" yaml:\"Charset\" toml:\"Charset\"`\n\n\t// PostMaxMemory sets the maximum post data size\n\t// that a client can send to the server, this differs\n\t// from the overall request body size which can be modified\n\t// by the `context#SetMaxRequestBodySize` or `iris#LimitRequestBodySize`.\n\t//\n\t// Defaults to 32MB or 32 << 20 if you prefer.\n\tPostMaxMemory int64 `ini:\"post_max_memory\" json:\"postMaxMemory\" yaml:\"PostMaxMemory\" toml:\"PostMaxMemory\"`\n\t//  +----------------------------------------------------+\n\t//  | Context's keys for values used on various featuers |\n\t//  +----------------------------------------------------+\n\n\t// Context values' keys for various features.\n\t//\n\t// LocaleContextKey is used by i18n to get the current request's locale, which contains a translate function too.\n\t//\n\t// Defaults to \"iris.locale\".\n\tLocaleContextKey string `ini:\"locale_context_key\" json:\"localeContextKey,omitempty\" yaml:\"LocaleContextKey\" toml:\"LocaleContextKey\"`\n\t// LanguageContextKey is the context key which a language can be modified by a middleware.\n\t// It has the highest priority over the rest and if it is empty then it is ignored,\n\t// if it set to a static string of \"default\" or to the default language's code\n\t// then the rest of the language extractors will not be called at all and\n\t// the default language will be set instead.\n\t//\n\t// Use with `Context.SetLanguage(\"el-GR\")`.\n\t//\n\t// See `i18n.ExtractFunc` for a more organised way of the same feature.\n\t// Defaults to \"iris.locale.language\".\n\tLanguageContextKey string `ini:\"language_context_key\" json:\"languageContextKey,omitempty\" yaml:\"LanguageContextKey\" toml:\"LanguageContextKey\"`\n\t// LanguageInputContextKey is the context key of a language that is given by the end-user.\n\t// It's the real user input of the language string, matched or not.\n\t//\n\t// Defaults to \"iris.locale.language.input\".\n\tLanguageInputContextKey string `ini:\"language_input_context_key\" json:\"languageInputContextKey,omitempty\" yaml:\"LanguageInputContextKey\" toml:\"LanguageInputContextKey\"`\n\t// VersionContextKey is the context key which an API Version can be modified\n\t// via a middleware through `SetVersion` method, e.g. `versioning.SetVersion(ctx, \">=1.0.0 <2.0.0\")`.\n\t// Defaults to \"iris.api.version\".\n\tVersionContextKey string `ini:\"version_context_key\" json:\"versionContextKey\" yaml:\"VersionContextKey\" toml:\"VersionContextKey\"`\n\t// VersionAliasesContextKey is the context key which the versioning feature\n\t// can look up for alternative values of a version and fallback to that.\n\t// Head over to the versioning package for more.\n\t// Defaults to \"iris.api.version.aliases\"\n\tVersionAliasesContextKey string `ini:\"version_aliases_context_key\" json:\"versionAliasesContextKey\" yaml:\"VersionAliasesContextKey\" toml:\"VersionAliasesContextKey\"`\n\t// ViewEngineContextKey is the context's values key\n\t// responsible to store and retrieve(view.Engine) the current view engine.\n\t// A middleware or a Party can modify its associated value to change\n\t// a view engine that `ctx.View` will render through.\n\t// If not an engine is registered by the end-developer\n\t// then its associated value is always nil,\n\t// meaning that the default value is nil.\n\t// See `Party.RegisterView` and `Context.ViewEngine` methods as well.\n\t//\n\t// Defaults to \"iris.view.engine\".\n\tViewEngineContextKey string `ini:\"view_engine_context_key\" json:\"viewEngineContextKey,omitempty\" yaml:\"ViewEngineContextKey\" toml:\"ViewEngineContextKey\"`\n\t// ViewLayoutContextKey is the context's values key\n\t// responsible to store and retrieve(string) the current view layout.\n\t// A middleware can modify its associated value to change\n\t// the layout that `ctx.View` will use to render a template.\n\t//\n\t// Defaults to \"iris.view.layout\".\n\tViewLayoutContextKey string `ini:\"view_layout_context_key\" json:\"viewLayoutContextKey,omitempty\" yaml:\"ViewLayoutContextKey\" toml:\"ViewLayoutContextKey\"`\n\t// ViewDataContextKey is the context's values key\n\t// responsible to store and retrieve(interface{}) the current view binding data.\n\t// A middleware can modify its associated value to change\n\t// the template's data on-fly.\n\t//\n\t// Defaults to \"iris.view.data\".\n\tViewDataContextKey string `ini:\"view_data_context_key\" json:\"viewDataContextKey,omitempty\" yaml:\"ViewDataContextKey\" toml:\"ViewDataContextKey\"`\n\t// FallbackViewContextKey is the context's values key\n\t// responsible to store the view fallback information.\n\t//\n\t// Defaults to \"iris.view.fallback\".\n\tFallbackViewContextKey string `ini:\"fallback_view_context_key\" json:\"fallbackViewContextKey,omitempty\" yaml:\"FallbackViewContextKey\" toml:\"FallbackViewContextKey\"`\n\t// RemoteAddrHeaders are the allowed request headers names\n\t// that can be valid to parse the client's IP based on.\n\t// By-default no \"X-\" header is consired safe to be used for retrieving the\n\t// client's IP address, because those headers can manually change by\n\t// the client. But sometimes are useful e.g. when behind a proxy\n\t// you want to enable the \"X-Forwarded-For\" or when cloudflare\n\t// you want to enable the \"CF-Connecting-IP\", indeed you\n\t// can allow the `ctx.RemoteAddr()` to use any header\n\t// that the client may sent.\n\t//\n\t// Defaults to an empty slice but an example usage is:\n\t// RemoteAddrHeaders {\n\t//    \"X-Real-Ip\",\n\t//    \"X-Forwarded-For\",\n\t//    \"CF-Connecting-IP\",\n\t//    \"True-Client-Ip\",\n\t//    \"X-Appengine-Remote-Addr\",\n\t//\t}\n\t//\n\t// Look `context.RemoteAddr()` for more.\n\tRemoteAddrHeaders []string `ini:\"remote_addr_headers\" json:\"remoteAddrHeaders,omitempty\" yaml:\"RemoteAddrHeaders\" toml:\"RemoteAddrHeaders\"`\n\t// RemoteAddrHeadersForce forces the `Context.RemoteAddr()` method\n\t// to return the first entry of a request header as a fallback,\n\t// even if that IP is a part of the `RemoteAddrPrivateSubnets` list.\n\t// The default behavior, if a remote address is part of the `RemoteAddrPrivateSubnets`,\n\t// is to retrieve the IP from the `Request.RemoteAddr` field instead.\n\tRemoteAddrHeadersForce bool `ini:\"remote_addr_headers_force\" json:\"remoteAddrHeadersForce,omitempty\" yaml:\"RemoteAddrHeadersForce\" toml:\"RemoteAddrHeadersForce\"`\n\t// RemoteAddrPrivateSubnets defines the private sub-networks.\n\t// They are used to be compared against\n\t// IP Addresses fetched through `RemoteAddrHeaders` or `Context.Request.RemoteAddr`.\n\t// For details please navigate through: https://github.com/kataras/iris/issues/1453\n\t// Defaults to:\n\t// {\n\t// \tStart: \"10.0.0.0\",\n\t// \tEnd:   \"10.255.255.255\",\n\t// },\n\t// {\n\t// \tStart: \"100.64.0.0\",\n\t// \tEnd:   \"100.127.255.255\",\n\t// },\n\t// {\n\t// \tStart: \"172.16.0.0\",\n\t// \tEnd:   \"172.31.255.255\",\n\t// },\n\t// {\n\t// \tStart: \"192.0.0.0\",\n\t// \tEnd:   \"192.0.0.255\",\n\t// },\n\t// {\n\t// \tStart: \"192.168.0.0\",\n\t// \tEnd:   \"192.168.255.255\",\n\t// },\n\t// {\n\t// \tStart: \"198.18.0.0\",\n\t// \tEnd:   \"198.19.255.255\",\n\t// }\n\t//\n\t// Look `Context.RemoteAddr()` for more.\n\tRemoteAddrPrivateSubnets []netutil.IPRange `ini:\"remote_addr_private_subnets\" json:\"remoteAddrPrivateSubnets\" yaml:\"RemoteAddrPrivateSubnets\" toml:\"RemoteAddrPrivateSubnets\"`\n\t// SSLProxyHeaders defines the set of header key values\n\t// that would indicate a valid https Request (look `Context.IsSSL()`).\n\t// Example: `map[string]string{\"X-Forwarded-Proto\": \"https\"}`.\n\t//\n\t// Defaults to empty map.\n\tSSLProxyHeaders map[string]string `ini:\"ssl_proxy_headers\" json:\"sslProxyHeaders\" yaml:\"SSLProxyHeaders\" toml:\"SSLProxyHeaders\"`\n\t// HostProxyHeaders defines the set of headers that may hold a proxied hostname value for the clients.\n\t// Look `Context.Host()` for more.\n\t// Defaults to empty map.\n\tHostProxyHeaders map[string]bool `ini:\"host_proxy_headers\" json:\"hostProxyHeaders\" yaml:\"HostProxyHeaders\" toml:\"HostProxyHeaders\"`\n\t// Other are the custom, dynamic options, can be empty.\n\t// This field used only by you to set any app's options you want.\n\t//\n\t// Defaults to empty map.\n\tOther map[string]interface{} `ini:\"other\" json:\"other,omitempty\" yaml:\"Other\" toml:\"Other\"`\n}\n\nvar _ context.ConfigurationReadOnly = (*Configuration)(nil)\n\n// GetVHost returns the VHost config field.\nfunc (c *Configuration) GetVHost() string {\n\tvhost := c.VHost\n\treturn vhost\n}\n\n// SetVHost sets the VHost config field.\nfunc (c *Configuration) SetVHost(s string) {\n\tc.VHost = s\n}\n\n// GetLogLevel returns the LogLevel field.\nfunc (c *Configuration) GetLogLevel() string {\n\treturn c.LogLevel\n}\n\n// GetSocketSharding returns the SocketSharding field.\nfunc (c *Configuration) GetSocketSharding() bool {\n\treturn c.SocketSharding\n}\n\n// GetKeepAlive returns the KeepAlive field.\nfunc (c *Configuration) GetKeepAlive() time.Duration {\n\treturn c.KeepAlive\n}\n\n// GetTimeout returns the Timeout field.\nfunc (c *Configuration) GetTimeout() time.Duration {\n\treturn c.Timeout\n}\n\n// GetNonBlocking returns the NonBlocking field.\nfunc (c *Configuration) GetNonBlocking() bool {\n\treturn c.NonBlocking\n}\n\n// GetTimeoutMessage returns the TimeoutMessage field.\nfunc (c *Configuration) GetTimeoutMessage() string {\n\treturn c.TimeoutMessage\n}\n\n// GetDisablePathCorrection returns the DisablePathCorrection field.\nfunc (c *Configuration) GetDisablePathCorrection() bool {\n\treturn c.DisablePathCorrection\n}\n\n// GetDisablePathCorrectionRedirection returns the DisablePathCorrectionRedirection field.\nfunc (c *Configuration) GetDisablePathCorrectionRedirection() bool {\n\treturn c.DisablePathCorrectionRedirection\n}\n\n// GetEnablePathIntelligence returns the EnablePathIntelligence field.\nfunc (c *Configuration) GetEnablePathIntelligence() bool {\n\treturn c.EnablePathIntelligence\n}\n\n// GetEnablePathEscape returns the EnablePathEscape field.\nfunc (c *Configuration) GetEnablePathEscape() bool {\n\treturn c.EnablePathEscape\n}\n\n// GetForceLowercaseRouting returns the ForceLowercaseRouting field.\nfunc (c *Configuration) GetForceLowercaseRouting() bool {\n\treturn c.ForceLowercaseRouting\n}\n\n// GetEnableDynamicHandler returns the EnableDynamicHandler field.\nfunc (c *Configuration) GetEnableDynamicHandler() bool {\n\treturn c.EnableDynamicHandler\n}\n\n// GetFireMethodNotAllowed returns the FireMethodNotAllowed field.\nfunc (c *Configuration) GetFireMethodNotAllowed() bool {\n\treturn c.FireMethodNotAllowed\n}\n\n// GetEnableOptimizations returns the EnableOptimizations.\nfunc (c *Configuration) GetEnableOptimizations() bool {\n\treturn c.EnableOptimizations\n}\n\n// GetEnableProtoJSON returns the EnableProtoJSON field.\nfunc (c *Configuration) GetEnableProtoJSON() bool {\n\treturn c.EnableProtoJSON\n}\n\n// GetEnableEasyJSON returns the EnableEasyJSON field.\nfunc (c *Configuration) GetEnableEasyJSON() bool {\n\treturn c.EnableEasyJSON\n}\n\n// GetDisableBodyConsumptionOnUnmarshal returns the DisableBodyConsumptionOnUnmarshal field.\nfunc (c *Configuration) GetDisableBodyConsumptionOnUnmarshal() bool {\n\treturn c.DisableBodyConsumptionOnUnmarshal\n}\n\n// GetFireEmptyFormError returns the DisableBodyConsumptionOnUnmarshal field.\nfunc (c *Configuration) GetFireEmptyFormError() bool {\n\treturn c.FireEmptyFormError\n}\n\n// GetDisableAutoFireStatusCode returns the DisableAutoFireStatusCode field.\nfunc (c *Configuration) GetDisableAutoFireStatusCode() bool {\n\treturn c.DisableAutoFireStatusCode\n}\n\n// GetResetOnFireErrorCode returns ResetOnFireErrorCode field.\nfunc (c *Configuration) GetResetOnFireErrorCode() bool {\n\treturn c.ResetOnFireErrorCode\n}\n\n// GetURLParamSeparator returns URLParamSeparator field.\nfunc (c *Configuration) GetURLParamSeparator() *string {\n\treturn c.URLParamSeparator\n}\n\n// GetTimeFormat returns the TimeFormat field.\nfunc (c *Configuration) GetTimeFormat() string {\n\treturn c.TimeFormat\n}\n\n// GetCharset returns the Charset field.\nfunc (c *Configuration) GetCharset() string {\n\treturn c.Charset\n}\n\n// GetPostMaxMemory returns the PostMaxMemory field.\nfunc (c *Configuration) GetPostMaxMemory() int64 {\n\treturn c.PostMaxMemory\n}\n\n// GetLocaleContextKey returns the LocaleContextKey field.\nfunc (c *Configuration) GetLocaleContextKey() string {\n\treturn c.LocaleContextKey\n}\n\n// GetLanguageContextKey returns the LanguageContextKey field.\nfunc (c *Configuration) GetLanguageContextKey() string {\n\treturn c.LanguageContextKey\n}\n\n// GetLanguageInputContextKey returns the LanguageInputContextKey field.\nfunc (c *Configuration) GetLanguageInputContextKey() string {\n\treturn c.LanguageInputContextKey\n}\n\n// GetVersionContextKey returns the VersionContextKey field.\nfunc (c *Configuration) GetVersionContextKey() string {\n\treturn c.VersionContextKey\n}\n\n// GetVersionAliasesContextKey returns the VersionAliasesContextKey field.\nfunc (c *Configuration) GetVersionAliasesContextKey() string {\n\treturn c.VersionAliasesContextKey\n}\n\n// GetViewEngineContextKey returns the ViewEngineContextKey field.\nfunc (c *Configuration) GetViewEngineContextKey() string {\n\treturn c.ViewEngineContextKey\n}\n\n// GetViewLayoutContextKey returns the ViewLayoutContextKey field.\nfunc (c *Configuration) GetViewLayoutContextKey() string {\n\treturn c.ViewLayoutContextKey\n}\n\n// GetViewDataContextKey returns the ViewDataContextKey field.\nfunc (c *Configuration) GetViewDataContextKey() string {\n\treturn c.ViewDataContextKey\n}\n\n// GetFallbackViewContextKey returns the FallbackViewContextKey field.\nfunc (c *Configuration) GetFallbackViewContextKey() string {\n\treturn c.FallbackViewContextKey\n}\n\n// GetRemoteAddrHeaders returns the RemoteAddrHeaders field.\nfunc (c *Configuration) GetRemoteAddrHeaders() []string {\n\treturn c.RemoteAddrHeaders\n}\n\n// GetRemoteAddrHeadersForce returns RemoteAddrHeadersForce field.\nfunc (c *Configuration) GetRemoteAddrHeadersForce() bool {\n\treturn c.RemoteAddrHeadersForce\n}\n\n// GetSSLProxyHeaders returns the SSLProxyHeaders field.\nfunc (c *Configuration) GetSSLProxyHeaders() map[string]string {\n\treturn c.SSLProxyHeaders\n}\n\n// GetRemoteAddrPrivateSubnets returns the RemoteAddrPrivateSubnets field.\nfunc (c *Configuration) GetRemoteAddrPrivateSubnets() []netutil.IPRange {\n\treturn c.RemoteAddrPrivateSubnets\n}\n\n// GetHostProxyHeaders returns the HostProxyHeaders field.\nfunc (c *Configuration) GetHostProxyHeaders() map[string]bool {\n\treturn c.HostProxyHeaders\n}\n\n// GetOther returns the Other field.\nfunc (c *Configuration) GetOther() map[string]interface{} {\n\treturn c.Other\n}\n\n// WithConfiguration sets the \"c\" values to the framework's configurations.\n//\n// Usage:\n// app.Listen(\":8080\", iris.WithConfiguration(iris.Configuration{/* fields here */ }))\n// or\n// iris.WithConfiguration(iris.YAML(\"./cfg/iris.yml\"))\n// or\n// iris.WithConfiguration(iris.TOML(\"./cfg/iris.tml\"))\nfunc WithConfiguration(c Configuration) Configurator {\n\treturn func(app *Application) {\n\t\tmain := app.config\n\n\t\tif main == nil {\n\t\t\tapp.config = &c\n\t\t\treturn\n\t\t}\n\n\t\tif v := c.LogLevel; v != \"\" {\n\t\t\tmain.LogLevel = v\n\t\t}\n\n\t\tif v := c.SocketSharding; v {\n\t\t\tmain.SocketSharding = v\n\t\t}\n\n\t\tif v := c.KeepAlive; v > 0 {\n\t\t\tmain.KeepAlive = v\n\t\t}\n\n\t\tif v := c.Timeout; v > 0 {\n\t\t\tmain.Timeout = v\n\t\t}\n\n\t\tif v := c.TimeoutMessage; v != \"\" {\n\t\t\tmain.TimeoutMessage = v\n\t\t}\n\n\t\tif v := c.NonBlocking; v {\n\t\t\tmain.NonBlocking = v\n\t\t}\n\n\t\tif len(c.Tunneling.Tunnels) > 0 {\n\t\t\tmain.Tunneling = c.Tunneling\n\t\t}\n\n\t\tif v := c.IgnoreServerErrors; len(v) > 0 {\n\t\t\tmain.IgnoreServerErrors = append(main.IgnoreServerErrors, v...)\n\t\t}\n\n\t\tif v := c.DisableStartupLog; v {\n\t\t\tmain.DisableStartupLog = v\n\t\t}\n\n\t\tif v := c.DisableInterruptHandler; v {\n\t\t\tmain.DisableInterruptHandler = v\n\t\t}\n\n\t\tif v := c.DisablePathCorrection; v {\n\t\t\tmain.DisablePathCorrection = v\n\t\t}\n\n\t\tif v := c.DisablePathCorrectionRedirection; v {\n\t\t\tmain.DisablePathCorrectionRedirection = v\n\t\t}\n\n\t\tif v := c.EnablePathIntelligence; v {\n\t\t\tmain.EnablePathIntelligence = v\n\t\t}\n\n\t\tif v := c.EnablePathEscape; v {\n\t\t\tmain.EnablePathEscape = v\n\t\t}\n\n\t\tif v := c.ForceLowercaseRouting; v {\n\t\t\tmain.ForceLowercaseRouting = v\n\t\t}\n\n\t\tif v := c.EnableOptimizations; v {\n\t\t\tmain.EnableOptimizations = v\n\t\t}\n\n\t\tif v := c.EnableProtoJSON; v {\n\t\t\tmain.EnableProtoJSON = v\n\t\t}\n\n\t\tif v := c.EnableEasyJSON; v {\n\t\t\tmain.EnableEasyJSON = v\n\t\t}\n\n\t\tif v := c.FireMethodNotAllowed; v {\n\t\t\tmain.FireMethodNotAllowed = v\n\t\t}\n\n\t\tif v := c.DisableAutoFireStatusCode; v {\n\t\t\tmain.DisableAutoFireStatusCode = v\n\t\t}\n\n\t\tif v := c.ResetOnFireErrorCode; v {\n\t\t\tmain.ResetOnFireErrorCode = v\n\t\t}\n\n\t\tif v := c.URLParamSeparator; v != nil {\n\t\t\tmain.URLParamSeparator = v\n\t\t}\n\n\t\tif v := c.DisableBodyConsumptionOnUnmarshal; v {\n\t\t\tmain.DisableBodyConsumptionOnUnmarshal = v\n\t\t}\n\n\t\tif v := c.FireEmptyFormError; v {\n\t\t\tmain.FireEmptyFormError = v\n\t\t}\n\n\t\tif v := c.TimeFormat; v != \"\" {\n\t\t\tmain.TimeFormat = v\n\t\t}\n\n\t\tif v := c.Charset; v != \"\" {\n\t\t\tmain.Charset = v\n\t\t}\n\n\t\tif v := c.PostMaxMemory; v > 0 {\n\t\t\tmain.PostMaxMemory = v\n\t\t}\n\n\t\tif v := c.LocaleContextKey; v != \"\" {\n\t\t\tmain.LocaleContextKey = v\n\t\t}\n\n\t\tif v := c.LanguageContextKey; v != \"\" {\n\t\t\tmain.LanguageContextKey = v\n\t\t}\n\n\t\tif v := c.LanguageInputContextKey; v != \"\" {\n\t\t\tmain.LanguageInputContextKey = v\n\t\t}\n\n\t\tif v := c.VersionContextKey; v != \"\" {\n\t\t\tmain.VersionContextKey = v\n\t\t}\n\n\t\tif v := c.VersionAliasesContextKey; v != \"\" {\n\t\t\tmain.VersionAliasesContextKey = v\n\t\t}\n\n\t\tif v := c.ViewEngineContextKey; v != \"\" {\n\t\t\tmain.ViewEngineContextKey = v\n\t\t}\n\t\tif v := c.ViewLayoutContextKey; v != \"\" {\n\t\t\tmain.ViewLayoutContextKey = v\n\t\t}\n\t\tif v := c.ViewDataContextKey; v != \"\" {\n\t\t\tmain.ViewDataContextKey = v\n\t\t}\n\t\tif v := c.FallbackViewContextKey; v != \"\" {\n\t\t\tmain.FallbackViewContextKey = v\n\t\t}\n\n\t\tif v := c.RemoteAddrHeaders; len(v) > 0 {\n\t\t\tmain.RemoteAddrHeaders = v\n\t\t}\n\n\t\tif v := c.RemoteAddrHeadersForce; v {\n\t\t\tmain.RemoteAddrHeadersForce = v\n\t\t}\n\n\t\tif v := c.RemoteAddrPrivateSubnets; len(v) > 0 {\n\t\t\tmain.RemoteAddrPrivateSubnets = v\n\t\t}\n\n\t\tif v := c.SSLProxyHeaders; len(v) > 0 {\n\t\t\tif main.SSLProxyHeaders == nil {\n\t\t\t\tmain.SSLProxyHeaders = make(map[string]string, len(v))\n\t\t\t}\n\t\t\tfor key, value := range v {\n\t\t\t\tmain.SSLProxyHeaders[key] = value\n\t\t\t}\n\t\t}\n\n\t\tif v := c.HostProxyHeaders; len(v) > 0 {\n\t\t\tif main.HostProxyHeaders == nil {\n\t\t\t\tmain.HostProxyHeaders = make(map[string]bool, len(v))\n\t\t\t}\n\t\t\tfor key, value := range v {\n\t\t\t\tmain.HostProxyHeaders[key] = value\n\t\t\t}\n\t\t}\n\n\t\tif v := c.Other; len(v) > 0 {\n\t\t\tif main.Other == nil {\n\t\t\t\tmain.Other = make(map[string]interface{}, len(v))\n\t\t\t}\n\t\t\tfor key, value := range v {\n\t\t\t\tmain.Other[key] = value\n\t\t\t}\n\t\t}\n\t}\n}\n\n// DefaultTimeoutMessage is the default timeout message which is rendered\n// on expired handlers when timeout handler is registered (see Timeout configuration field).\nvar DefaultTimeoutMessage = `<html><head><title>Timeout</title></head><body><h1>Timeout</h1>Looks like the server is taking too long to respond, this can be caused by either poor connectivity or an error with our servers. Please try again in a while.</body></html>`\n\nfunc toStringPtr(s string) *string {\n\treturn &s\n}\n\n// DefaultConfiguration returns the default configuration for an iris station, fills the main Configuration\nfunc DefaultConfiguration() Configuration {\n\treturn Configuration{\n\t\tLogLevel:                          \"info\",\n\t\tSocketSharding:                    false,\n\t\tKeepAlive:                         0,\n\t\tTimeout:                           0,\n\t\tTimeoutMessage:                    DefaultTimeoutMessage,\n\t\tNonBlocking:                       false,\n\t\tDisableStartupLog:                 false,\n\t\tDisableInterruptHandler:           false,\n\t\tDisablePathCorrection:             false,\n\t\tEnablePathEscape:                  false,\n\t\tForceLowercaseRouting:             false,\n\t\tFireMethodNotAllowed:              false,\n\t\tDisableBodyConsumptionOnUnmarshal: false,\n\t\tFireEmptyFormError:                false,\n\t\tDisableAutoFireStatusCode:         false,\n\t\tResetOnFireErrorCode:              false,\n\t\tURLParamSeparator:                 toStringPtr(\",\"),\n\t\tTimeFormat:                        \"Mon, 02 Jan 2006 15:04:05 GMT\",\n\t\tCharset:                           \"utf-8\",\n\n\t\t// PostMaxMemory is for post body max memory.\n\t\t//\n\t\t// The request body the size limit\n\t\t// can be set by the middleware `LimitRequestBodySize`\n\t\t// or `context#SetMaxRequestBodySize`.\n\t\tPostMaxMemory:            32 << 20, // 32MB\n\t\tLocaleContextKey:         \"iris.locale\",\n\t\tLanguageContextKey:       \"iris.locale.language\",\n\t\tLanguageInputContextKey:  \"iris.locale.language.input\",\n\t\tVersionContextKey:        \"iris.api.version\",\n\t\tVersionAliasesContextKey: \"iris.api.version.aliases\",\n\t\tViewEngineContextKey:     \"iris.view.engine\",\n\t\tViewLayoutContextKey:     \"iris.view.layout\",\n\t\tViewDataContextKey:       \"iris.view.data\",\n\t\tFallbackViewContextKey:   \"iris.view.fallback\",\n\t\tRemoteAddrHeaders:        nil,\n\t\tRemoteAddrHeadersForce:   false,\n\t\tRemoteAddrPrivateSubnets: []netutil.IPRange{\n\t\t\t{\n\t\t\t\tStart: \"10.0.0.0\",\n\t\t\t\tEnd:   \"10.255.255.255\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tStart: \"100.64.0.0\",\n\t\t\t\tEnd:   \"100.127.255.255\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tStart: \"172.16.0.0\",\n\t\t\t\tEnd:   \"172.31.255.255\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tStart: \"192.0.0.0\",\n\t\t\t\tEnd:   \"192.0.0.255\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tStart: \"192.168.0.0\",\n\t\t\t\tEnd:   \"192.168.255.255\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tStart: \"198.18.0.0\",\n\t\t\t\tEnd:   \"198.19.255.255\",\n\t\t\t},\n\t\t},\n\t\tSSLProxyHeaders:     make(map[string]string),\n\t\tHostProxyHeaders:    make(map[string]bool),\n\t\tEnableOptimizations: false,\n\t\tEnableProtoJSON:     false,\n\t\tEnableEasyJSON:      false,\n\t\tOther:               make(map[string]interface{}),\n\t}\n}\n"
        },
        {
          "name": "configuration_test.go",
          "type": "blob",
          "size": 11.88,
          "content": "package iris\n\nimport (\n\t\"os\"\n\t\"reflect\"\n\t\"testing\"\n\t\"time\"\n\n\t\"gopkg.in/yaml.v3\"\n)\n\n// $ go test -v -run TestConfiguration*\n\nfunc TestConfigurationStatic(t *testing.T) {\n\tdef := DefaultConfiguration()\n\n\tapp := New()\n\tafterNew := *app.config\n\n\tif !reflect.DeepEqual(def, afterNew) {\n\t\tt.Fatalf(\"Default configuration is not the same after New expected:\\n %#v \\ngot:\\n %#v\", def, afterNew)\n\t}\n\n\tafterNew.Charset = \"changed\"\n\n\tif reflect.DeepEqual(def, afterNew) {\n\t\tt.Fatalf(\"Configuration should be not equal, got: %#v\", afterNew)\n\t}\n\n\tapp = New().Configure(WithConfiguration(Configuration{DisableBodyConsumptionOnUnmarshal: true}))\n\n\tafterNew = *app.config\n\n\tif !app.config.DisableBodyConsumptionOnUnmarshal {\n\t\tt.Fatalf(\"Passing a Configuration field as Option fails, expected DisableBodyConsumptionOnUnmarshal to be true but was false\")\n\t}\n\n\tapp = New() // empty , means defaults so\n\tif !reflect.DeepEqual(def, *app.config) {\n\t\tt.Fatalf(\"Default configuration is not the same after New expected:\\n %#v \\ngot:\\n %#v\", def, *app.config)\n\t}\n}\n\nfunc TestConfigurationOptions(t *testing.T) {\n\tcharset := \"MYCHARSET\"\n\tdisableBodyConsumptionOnUnmarshal := true\n\tdisableBanner := true\n\n\tapp := New().Configure(WithCharset(charset), WithoutBodyConsumptionOnUnmarshal, WithoutBanner)\n\n\tif got := app.config.Charset; got != charset {\n\t\tt.Fatalf(\"Expected configuration Charset to be: %s but got: %s\", charset, got)\n\t}\n\n\tif got := app.config.DisableBodyConsumptionOnUnmarshal; got != disableBodyConsumptionOnUnmarshal {\n\t\tt.Fatalf(\"Expected configuration DisableBodyConsumptionOnUnmarshal to be: %#v but got: %#v\", disableBodyConsumptionOnUnmarshal, got)\n\t}\n\n\tif got := app.config.DisableStartupLog; got != disableBanner {\n\t\tt.Fatalf(\"Expected configuration DisableStartupLog to be: %#v but got: %#v\", disableBanner, got)\n\t}\n\n\t// now check if other default values are set (should be set automatically)\n\n\texpected := DefaultConfiguration()\n\texpected.Charset = charset\n\texpected.DisableBodyConsumptionOnUnmarshal = disableBodyConsumptionOnUnmarshal\n\texpected.DisableStartupLog = disableBanner\n\n\thas := *app.config\n\tif !reflect.DeepEqual(has, expected) {\n\t\tt.Fatalf(\"Default configuration is not the same after New expected:\\n %#v \\ngot:\\n %#v\", expected, has)\n\t}\n}\n\nfunc TestConfigurationOptionsDeep(t *testing.T) {\n\tcharset := \"MYCHARSET\"\n\n\tapp := New().Configure(WithCharset(charset), WithoutBodyConsumptionOnUnmarshal, WithoutBanner)\n\n\texpected := DefaultConfiguration()\n\texpected.Charset = charset\n\texpected.DisableBodyConsumptionOnUnmarshal = true\n\texpected.DisableStartupLog = true\n\n\thas := *app.config\n\n\tif !reflect.DeepEqual(has, expected) {\n\t\tt.Fatalf(\"DEEP configuration is not the same after New expected:\\n %#v \\ngot:\\n %#v\", expected, has)\n\t}\n}\n\nfunc createGlobalConfiguration(t *testing.T) {\n\tfilename := homeConfigurationFilename(\".yml\")\n\tc, err := parseYAML(filename)\n\tif err != nil {\n\t\t// this error will be occurred the first time that the configuration\n\t\t// file doesn't exist.\n\t\t// Create the YAML-ONLY global configuration file now using the default configuration 'c'.\n\t\t// This is useful when we run multiple iris servers that share the same\n\t\t// configuration, even with custom values at its \"Other\" field.\n\t\tout, err := yaml.Marshal(&c)\n\n\t\tif err == nil {\n\t\t\terr = os.WriteFile(filename, out, os.FileMode(0666))\n\t\t}\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"error while writing the global configuration field at: %s. Trace: %v\\n\", filename, err)\n\t\t}\n\t}\n}\n\nfunc TestConfigurationGlobal(t *testing.T) {\n\tt.Cleanup(func() {\n\t\tos.Remove(homeConfigurationFilename(\".yml\"))\n\t})\n\n\tcreateGlobalConfiguration(t)\n\n\ttestConfigurationGlobal(t, WithGlobalConfiguration)\n\ttestConfigurationGlobal(t, WithConfiguration(YAML(globalConfigurationKeyword)))\n}\n\nfunc testConfigurationGlobal(t *testing.T, c Configurator) {\n\tapp := New().Configure(c)\n\n\tif has, expected := *app.config, DefaultConfiguration(); !reflect.DeepEqual(has, expected) {\n\t\tt.Fatalf(\"global configuration (which should be defaulted) is not the same with the default one:\\n %#v \\ngot:\\n %#v\", has, expected)\n\t}\n}\n\nfunc TestConfigurationYAML(t *testing.T) {\n\tyamlFile, ferr := os.CreateTemp(\"\", \"configuration.yml\")\n\n\tif ferr != nil {\n\t\tt.Fatal(ferr)\n\t}\n\n\tdefer func() {\n\t\tyamlFile.Close()\n\t\ttime.Sleep(50 * time.Millisecond)\n\t\tos.Remove(yamlFile.Name())\n\t}()\n\n\tyamlConfigurationContents := `\nDisablePathCorrection: false\nDisablePathCorrectionRedirection: true\nEnablePathIntelligence: true\nEnablePathEscape: false\nFireMethodNotAllowed: true\nEnableOptimizations: true\nDisableBodyConsumptionOnUnmarshal: true\nTimeFormat: \"Mon, 02 Jan 2006 15:04:05 GMT\"\nCharset: \"utf-8\"\nRemoteAddrHeaders:\n  - X-Real-Ip\n  - X-Forwarded-For\n  - CF-Connecting-IP\nHostProxyHeaders:\n  X-Host: true\nSSLProxyHeaders:\n  X-Forwarded-Proto: https\nOther:\n  MyServerName: \"Iris: https://github.com/kataras/iris\"\n`\n\tyamlFile.WriteString(yamlConfigurationContents)\n\tfilename := yamlFile.Name()\n\tapp := New().Configure(WithConfiguration(YAML(filename)))\n\n\tc := app.config\n\n\tif expected := false; c.DisablePathCorrection != expected {\n\t\tt.Fatalf(\"error on TestConfigurationYAML: Expected DisablePathCorrection %v but got %v\", expected, c.DisablePathCorrection)\n\t}\n\n\tif expected := true; c.DisablePathCorrectionRedirection != expected {\n\t\tt.Fatalf(\"error on TestConfigurationYAML: Expected DisablePathCorrectionRedirection %v but got %v\", expected, c.DisablePathCorrectionRedirection)\n\t}\n\n\tif expected := true; c.EnablePathIntelligence != expected {\n\t\tt.Fatalf(\"error on TestConfigurationYAML: Expected EnablePathIntelligence %v but got %v\", expected, c.EnablePathIntelligence)\n\t}\n\n\tif expected := false; c.EnablePathEscape != expected {\n\t\tt.Fatalf(\"error on TestConfigurationYAML: Expected EnablePathEscape %v but got %v\", expected, c.EnablePathEscape)\n\t}\n\n\tif expected := true; c.EnableOptimizations != expected {\n\t\tt.Fatalf(\"error on TestConfigurationYAML: Expected EnableOptimizations %v but got %v\", expected, c.EnablePathEscape)\n\t}\n\n\tif expected := true; c.FireMethodNotAllowed != expected {\n\t\tt.Fatalf(\"error on TestConfigurationYAML: Expected FireMethodNotAllowed %v but got %v\", expected, c.FireMethodNotAllowed)\n\t}\n\n\tif expected := true; c.DisableBodyConsumptionOnUnmarshal != expected {\n\t\tt.Fatalf(\"error on TestConfigurationYAML: Expected DisableBodyConsumptionOnUnmarshal %v but got %v\", expected, c.DisableBodyConsumptionOnUnmarshal)\n\t}\n\n\tif expected := \"Mon, 02 Jan 2006 15:04:05 GMT\"; c.TimeFormat != expected {\n\t\tt.Fatalf(\"error on TestConfigurationYAML: Expected TimeFormat %s but got %s\", expected, c.TimeFormat)\n\t}\n\n\tif expected := \"utf-8\"; c.Charset != expected {\n\t\tt.Fatalf(\"error on TestConfigurationYAML: Expected Charset %s but got %s\", expected, c.Charset)\n\t}\n\n\tif len(c.RemoteAddrHeaders) == 0 {\n\t\tt.Fatalf(\"error on TestConfigurationYAML: Expected RemoteAddrHeaders to be filled\")\n\t}\n\n\texpectedRemoteAddrHeaders := []string{\n\t\t\"X-Real-Ip\",\n\t\t\"X-Forwarded-For\",\n\t\t\"CF-Connecting-IP\",\n\t}\n\n\tif expected, got := len(c.RemoteAddrHeaders), len(expectedRemoteAddrHeaders); expected != got {\n\t\tt.Fatalf(\"error on TestConfigurationYAML: Expected RemoteAddrHeaders' len(%d) and got(%d), len is not the same\", expected, got)\n\t}\n\n\tfor i, v := range c.RemoteAddrHeaders {\n\t\tif expected, got := expectedRemoteAddrHeaders[i], v; expected != got {\n\t\t\tt.Fatalf(\"error on TestConfigurationYAML: Expected RemoteAddrHeaders[%d] = %s but got %s\", i, expected, got)\n\t\t}\n\t}\n\n\texpectedHostProxyHeaders := map[string]bool{\n\t\t\"X-Host\": true,\n\t}\n\n\tif expected, got := len(c.HostProxyHeaders), len(expectedHostProxyHeaders); expected != got {\n\t\tt.Fatalf(\"error on TestConfigurationYAML: Expected HostProxyHeaders' len(%d) and got(%d), len is not the same\", expected, got)\n\t}\n\n\tfor k, v := range c.HostProxyHeaders {\n\t\tif expected, got := expectedHostProxyHeaders[k], v; expected != got {\n\t\t\tt.Fatalf(\"error on TestConfigurationYAML: Expected HostProxyHeaders[%s] = %t but got %t\", k, expected, got)\n\t\t}\n\t}\n\n\texpectedSSLProxyHeaders := map[string]string{\n\t\t\"X-Forwarded-Proto\": \"https\",\n\t}\n\n\tif expected, got := len(c.SSLProxyHeaders), len(c.SSLProxyHeaders); expected != got {\n\t\tt.Fatalf(\"error on TestConfigurationYAML: Expected SSLProxyHeaders' len(%d) and got(%d), len is not the same\", expected, got)\n\t}\n\n\tfor k, v := range c.SSLProxyHeaders {\n\t\tif expected, got := expectedSSLProxyHeaders[k], v; expected != got {\n\t\t\tt.Fatalf(\"error on TestConfigurationYAML: Expected SSLProxyHeaders[%s] = %s but got %s\", k, expected, got)\n\t\t}\n\t}\n\n\tif len(c.Other) == 0 {\n\t\tt.Fatalf(\"error on TestConfigurationYAML: Expected Other to be filled\")\n\t}\n\n\tif expected, got := \"Iris: https://github.com/kataras/iris\", c.Other[\"MyServerName\"]; expected != got {\n\t\tt.Fatalf(\"error on TestConfigurationYAML: Expected Other['MyServerName'] %s but got %s\", expected, got)\n\t}\n}\n\nfunc TestConfigurationTOML(t *testing.T) {\n\ttomlFile, ferr := os.CreateTemp(\"\", \"configuration.toml\")\n\n\tif ferr != nil {\n\t\tt.Fatal(ferr)\n\t}\n\n\tdefer func() {\n\t\ttomlFile.Close()\n\t\ttime.Sleep(50 * time.Millisecond)\n\t\tos.Remove(tomlFile.Name())\n\t}()\n\n\ttomlConfigurationContents := `\nDisablePathCorrectionRedirection = true\nEnablePathEscape = false\nFireMethodNotAllowed = true\nEnableOptimizations = true\nDisableBodyConsumptionOnUnmarshal = true\nTimeFormat = \"Mon, 02 Jan 2006 15:04:05 GMT\"\nCharset = \"utf-8\"\n\nRemoteAddrHeaders = [\"X-Real-Ip\", \"X-Forwarded-For\", \"CF-Connecting-IP\"]\n\n[Other]\n\t# Indentation (tabs and/or spaces) is allowed but not required\n\tMyServerName = \"Iris: https://github.com/kataras/iris\"\n\n`\n\ttomlFile.WriteString(tomlConfigurationContents)\n\tfilename := tomlFile.Name()\n\tapp := New().Configure(WithConfiguration(TOML(filename)))\n\n\tc := app.config\n\n\tif expected := false; c.DisablePathCorrection != expected {\n\t\tt.Fatalf(\"error on TestConfigurationTOML: Expected DisablePathCorrection %v but got %v\", expected, c.DisablePathCorrection)\n\t}\n\n\tif expected := true; c.DisablePathCorrectionRedirection != expected {\n\t\tt.Fatalf(\"error on TestConfigurationTOML: Expected DisablePathCorrectionRedirection %v but got %v\", expected, c.DisablePathCorrectionRedirection)\n\t}\n\n\tif expected := false; c.EnablePathEscape != expected {\n\t\tt.Fatalf(\"error on TestConfigurationTOML: Expected EnablePathEscape %v but got %v\", expected, c.EnablePathEscape)\n\t}\n\n\tif expected := true; c.EnableOptimizations != expected {\n\t\tt.Fatalf(\"error on TestConfigurationTOML: Expected EnableOptimizations %v but got %v\", expected, c.EnablePathEscape)\n\t}\n\n\tif expected := true; c.FireMethodNotAllowed != expected {\n\t\tt.Fatalf(\"error on TestConfigurationTOML: Expected FireMethodNotAllowed %v but got %v\", expected, c.FireMethodNotAllowed)\n\t}\n\n\tif expected := true; c.DisableBodyConsumptionOnUnmarshal != expected {\n\t\tt.Fatalf(\"error on TestConfigurationTOML: Expected DisableBodyConsumptionOnUnmarshal %v but got %v\", expected, c.DisableBodyConsumptionOnUnmarshal)\n\t}\n\n\tif expected := \"Mon, 02 Jan 2006 15:04:05 GMT\"; c.TimeFormat != expected {\n\t\tt.Fatalf(\"error on TestConfigurationTOML: Expected TimeFormat %s but got %s\", expected, c.TimeFormat)\n\t}\n\n\tif expected := \"utf-8\"; c.Charset != expected {\n\t\tt.Fatalf(\"error on TestConfigurationTOML: Expected Charset %s but got %s\", expected, c.Charset)\n\t}\n\n\tif len(c.RemoteAddrHeaders) == 0 {\n\t\tt.Fatalf(\"error on TestConfigurationTOML: Expected RemoteAddrHeaders to be filled\")\n\t}\n\n\texpectedRemoteAddrHeaders := []string{\n\t\t\"X-Real-Ip\",\n\t\t\"X-Forwarded-For\",\n\t\t\"CF-Connecting-IP\",\n\t}\n\n\tif expected, got := len(c.RemoteAddrHeaders), len(expectedRemoteAddrHeaders); expected != got {\n\t\tt.Fatalf(\"error on TestConfigurationTOML: Expected RemoteAddrHeaders' len(%d) and got(%d), len is not the same\", expected, got)\n\t}\n\n\tfor i, got := range c.RemoteAddrHeaders {\n\t\tif expected := expectedRemoteAddrHeaders[i]; expected != got {\n\t\t\tt.Fatalf(\"error on TestConfigurationTOML: Expected RemoteAddrHeaders[%d] = %s but got %s\", i, expected, got)\n\t\t}\n\t}\n\n\tif len(c.Other) == 0 {\n\t\tt.Fatalf(\"error on TestConfigurationTOML: Expected Other to be filled\")\n\t}\n\n\tif expected, got := \"Iris: https://github.com/kataras/iris\", c.Other[\"MyServerName\"]; expected != got {\n\t\tt.Fatalf(\"error on TestConfigurationTOML: Expected Other['MyServerName'] %s but got %s\", expected, got)\n\t}\n}\n"
        },
        {
          "name": "context",
          "type": "tree",
          "content": null
        },
        {
          "name": "context_wrapper.go",
          "type": "blob",
          "size": 6.33,
          "content": "package iris\n\nimport (\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/kataras/iris/v12/context\"\n)\n\ntype (\n\t// ContextSetter is an interface which can be implemented by a struct\n\t// to set the iris.Context to the struct.\n\t// The receiver must be a pointer of the struct.\n\tContextSetter interface {\n\t\t// SetContext sets the iris.Context to the struct.\n\t\tSetContext(Context)\n\t}\n\n\t// ContextSetterPtr is a pointer of T which implements the `ContextSetter` interface.\n\t// The T must be a struct.\n\tContextSetterPtr[T any] interface {\n\t\t*T\n\t\tContextSetter\n\t}\n\n\t// emptyContextSetter is an empty struct which implements the `ContextSetter` interface.\n\temptyContextSetter struct{}\n)\n\n// SetContext method implements `ContextSetter` interface.\nfunc (*emptyContextSetter) SetContext(Context) {}\n\n// ContextPool is a pool of T. It's used to acquire and release custom context.\n// Use of custom implementation or `NewContextPool`.\n//\n// See `NewContextWrapper` and `NewContextPool` for more.\ntype (\n\tContextPool[T any] interface {\n\t\t// Acquire must return a new T from a pool.\n\t\tAcquire(ctx Context) T\n\t\t// Release must put the T back to the pool.\n\t\tRelease(T)\n\t}\n\n\t// syncContextPool is a sync pool implementation of T.\n\t// It's used to acquire and release T.\n\t// The contextPtr is acquired from the sync pool and released back to the sync pool after the handler's execution.\n\t// The contextPtr is passed to the handler as an argument.\n\t// ThecontextPtr is not shared between requests.\n\t// The contextPtr must implement the `ContextSetter` interface.\n\t// The T must be a struct.\n\t// The contextPtr must be a pointer of T.\n\tsyncContextPool[T any, contextPtr ContextSetterPtr[T]] struct {\n\t\tpool *sync.Pool\n\t}\n)\n\n// Ensure that syncContextPool implements ContextPool.\nvar _ ContextPool[*emptyContextSetter] = (*syncContextPool[emptyContextSetter, *emptyContextSetter])(nil)\n\n// NewContextPool returns a new ContextPool default implementation which\n// uses sync.Pool to implement its Acquire and Release methods.\n// The contextPtr is acquired from the sync pool and released back to the sync pool after the handler's execution.\n// The contextPtr is passed to the handler as an argument.\n// ThecontextPtr is not shared between requests.\n// The contextPtr must implement the `ContextSetter` interface.\n// The T must be a struct.\n// The contextPtr must be a pointer of T.\n//\n// Example:\n// w := iris.NewContextWrapper(iris.NewContextPool[myCustomContext, *myCustomContext]())\nfunc NewContextPool[T any, contextPtr ContextSetterPtr[T]]() ContextPool[contextPtr] {\n\treturn &syncContextPool[T, contextPtr]{\n\t\tpool: &sync.Pool{\n\t\t\tNew: func() interface{} {\n\t\t\t\tvar t contextPtr = new(T)\n\t\t\t\treturn t\n\t\t\t},\n\t\t},\n\t}\n}\n\n// Acquire returns a new T from the sync pool.\nfunc (p *syncContextPool[T, contextPtr]) Acquire(ctx Context) contextPtr {\n\t// var t contextPtr\n\t// if v := p.pool.Get(); v == nil {\n\t// \tt = new(T)\n\t// } else {\n\t// \tt = v.(contextPtr)\n\t// }\n\n\tt := p.pool.Get().(contextPtr)\n\tt.SetContext(ctx)\n\treturn t\n}\n\n// Release puts the T back to the sync pool.\nfunc (p *syncContextPool[T, contextPtr]) Release(t contextPtr) {\n\tp.pool.Put(t)\n}\n\n// ContextWrapper is a wrapper for handlers which expect a T instead of iris.Context.\n//\n// See the `NewContextWrapper` function for more.\ntype ContextWrapper[T any] struct {\n\tpool ContextPool[T]\n}\n\n// NewContextWrapper returns a new ContextWrapper.\n// If pool is nil, a default pool is used.\n// The default pool's AcquireFunc returns a zero value of T.\n// The default pool's ReleaseFunc does nothing.\n// The default pool is used when the pool is nil.\n// Use the `iris.NewContextPool[T, *T]()` to pass a simple context pool.\n// Then, use the `Handler` method to wrap custom handlers to iris ones.\n//\n// Example: https://github.com/kataras/iris/tree/main/_examples/routing/custom-context\nfunc NewContextWrapper[T any](pool ContextPool[T]) *ContextWrapper[T] {\n\tif pool == nil {\n\t\tpanic(\"pool cannot be nil\")\n\t}\n\n\treturn &ContextWrapper[T]{\n\t\tpool: pool,\n\t}\n}\n\n// Pool returns the pool, useful when manually Acquire and Release of custom context is required.\nfunc (w *ContextWrapper[T]) Pool() ContextPool[T] {\n\treturn w.pool\n}\n\n// Handler wraps the handler with the pool's Acquire and Release methods.\n// It returns a new handler which expects a T instead of iris.Context.\n// The T is the type of the pool.\n// The T is acquired from the pool and released back to the pool after the handler's execution.\n// The T is passed to the handler as an argument.\n// The T is not shared between requests.\nfunc (w *ContextWrapper[T]) Handler(handler func(T)) Handler {\n\tif handler == nil {\n\t\treturn nil\n\t}\n\n\treturn func(ctx Context) {\n\t\tnewT := w.pool.Acquire(ctx)\n\t\thandler(newT)\n\t\tw.pool.Release(newT)\n\t}\n}\n\n// Handlers wraps the handlers with the pool's Acquire and Release methods.\nfunc (w *ContextWrapper[T]) Handlers(handlers ...func(T)) context.Handlers {\n\tnewHandlers := make(context.Handlers, len(handlers))\n\tfor i, handler := range handlers {\n\t\tnewHandlers[i] = w.Handler(handler)\n\t}\n\n\treturn newHandlers\n}\n\n// HandlerReturnError same as `Handler` but it converts a handler which returns an error.\nfunc (w *ContextWrapper[T]) HandlerReturnError(handler func(T) error) func(Context) error {\n\tif handler == nil {\n\t\treturn nil\n\t}\n\n\treturn func(ctx Context) error {\n\t\tnewT := w.pool.Acquire(ctx)\n\t\terr := handler(newT)\n\t\tw.pool.Release(newT)\n\t\treturn err\n\t}\n}\n\n// HandlerReturnDuration same as `Handler` but it converts a handler which returns a time.Duration.\nfunc (w *ContextWrapper[T]) HandlerReturnDuration(handler func(T) time.Duration) func(Context) time.Duration {\n\tif handler == nil {\n\t\treturn nil\n\t}\n\n\treturn func(ctx Context) time.Duration {\n\t\tnewT := w.pool.Acquire(ctx)\n\t\tduration := handler(newT)\n\t\tw.pool.Release(newT)\n\t\treturn duration\n\t}\n}\n\n// Filter same as `Handler` but it converts a handler to Filter.\nfunc (w *ContextWrapper[T]) Filter(handler func(T) bool) Filter {\n\tif handler == nil {\n\t\treturn nil\n\t}\n\n\treturn func(ctx Context) bool {\n\t\tnewT := w.pool.Acquire(ctx)\n\t\tshouldContinue := handler(newT)\n\t\tw.pool.Release(newT)\n\t\treturn shouldContinue\n\t}\n}\n\n// FallbackViewFunc same as `Handler` but it converts a handler to FallbackViewFunc.\nfunc (w *ContextWrapper[T]) FallbackViewFunc(handler func(ctx T, err ErrViewNotExist) error) FallbackViewFunc {\n\tif handler == nil {\n\t\treturn nil\n\t}\n\n\treturn func(ctx Context, err ErrViewNotExist) error {\n\t\tnewT := w.pool.Acquire(ctx)\n\t\treturningErr := handler(newT, err)\n\t\tw.pool.Release(newT)\n\t\treturn returningErr\n\t}\n}\n"
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc.go",
          "type": "blob",
          "size": 0.96,
          "content": "/*\nPackage iris implements the highest realistic performance, easy to learn Go web framework.\nIris provides a beautifully expressive and easy to use foundation for your next website, API, or distributed app.\nLow-level handlers compatible with `net/http` and high-level fastest MVC implementation and handlers dependency injection.\nEasy to learn for new gophers and advanced features for experienced, it goes as far as you dive into it!\n\nSource code and other details for the project are available at GitHub:\n\n\thttps://github.com/kataras/iris\n\n# Current Version\n\n12.2.11\n\n# Installation\n\nThe only requirement is the Go Programming Language, at least version 1.23.\n\n\t$ go get github.com/kataras/iris/v12@latest\n\nWiki:\n\n\thttps://www.iris-go.com/#ebookDonateForm\n\nExamples:\n\n\thttps://github.com/kataras/iris/tree/main/_examples\n\nMiddleware:\n\n\thttps://github.com/kataras/iris/tree/main/middleware\n\thttps://github.com/iris-contrib/middleware\n\nHome Page:\n\n\thttps://iris-go.com\n*/\npackage iris\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 4.73,
          "content": "module github.com/kataras/iris/v12\n\ngo 1.23\n\nretract [v12.0.0, v12.1.8] // Retract older versions as only latest is to be depended upon. Please update to @latest\n\nrequire (\n\tgithub.com/BurntSushi/toml v1.4.0\n\tgithub.com/CloudyKit/jet/v6 v6.2.0\n\tgithub.com/Joker/jade v1.1.3\n\tgithub.com/Shopify/goreferrer v0.0.0-20240724165105-aceaa0259138\n\tgithub.com/andybalholm/brotli v1.1.1\n\tgithub.com/blang/semver/v4 v4.0.0\n\tgithub.com/dgraph-io/badger/v4 v4.5.0\n\tgithub.com/fatih/structs v1.1.0\n\tgithub.com/flosch/pongo2/v4 v4.0.2\n\tgithub.com/golang/snappy v0.0.4\n\tgithub.com/gomarkdown/markdown v0.0.0-20241205020045-f7e15b2f3e62\n\tgithub.com/google/uuid v1.6.0\n\tgithub.com/gorilla/securecookie v1.1.2\n\tgithub.com/iris-contrib/httpexpect/v2 v2.15.2\n\tgithub.com/iris-contrib/schema v0.0.6\n\tgithub.com/json-iterator/go v1.1.12\n\tgithub.com/kataras/blocks v0.0.8\n\tgithub.com/kataras/golog v0.1.12\n\tgithub.com/kataras/jwt v0.1.12\n\tgithub.com/kataras/neffos v0.0.24-0.20241114125147-07c1e09b1919\n\tgithub.com/kataras/pio v0.0.14-0.20240707171706-2005199e2703\n\tgithub.com/kataras/sitemap v0.0.6\n\tgithub.com/kataras/tunnel v0.0.4\n\tgithub.com/klauspost/compress v1.17.11\n\tgithub.com/mailgun/raymond/v2 v2.0.48\n\tgithub.com/mailru/easyjson v0.9.0\n\tgithub.com/microcosm-cc/bluemonday v1.0.27\n\tgithub.com/redis/go-redis/v9 v9.7.0\n\tgithub.com/schollz/closestmatch v2.1.0+incompatible\n\tgithub.com/shirou/gopsutil/v3 v3.24.5\n\tgithub.com/tdewolff/minify/v2 v2.21.2\n\tgithub.com/vmihailenco/msgpack/v5 v5.4.1\n\tgithub.com/yosssi/ace v0.0.5\n\tgo.etcd.io/bbolt v1.3.11\n\tgolang.org/x/crypto v0.31.0\n\tgolang.org/x/exp v0.0.0-20241217172543-b2144cdd0a67\n\tgolang.org/x/net v0.33.0\n\tgolang.org/x/sys v0.28.0\n\tgolang.org/x/text v0.21.0\n\tgolang.org/x/time v0.8.0\n\tgoogle.golang.org/protobuf v1.36.1\n\tgopkg.in/ini.v1 v1.67.0\n\tgopkg.in/yaml.v3 v3.0.1\n)\n\nrequire (\n\tgithub.com/CloudyKit/fastprinter v0.0.0-20200109182630-33d98a066a53 // indirect\n\tgithub.com/ajg/form v1.5.1 // indirect\n\tgithub.com/aymerick/douceur v0.2.0 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.3.0 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/dgraph-io/ristretto/v2 v2.0.1 // indirect\n\tgithub.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f // indirect\n\tgithub.com/dustin/go-humanize v1.0.1 // indirect\n\tgithub.com/fatih/color v1.18.0 // indirect\n\tgithub.com/go-ole/go-ole v1.3.0 // indirect\n\tgithub.com/gobwas/glob v0.2.3 // indirect\n\tgithub.com/gobwas/httphead v0.1.0 // indirect\n\tgithub.com/gobwas/pool v0.2.1 // indirect\n\tgithub.com/gobwas/ws v1.4.0 // indirect\n\tgithub.com/golang/groupcache v0.0.0-20241129210726-2c02b8208cf8 // indirect\n\tgithub.com/google/flatbuffers v24.12.23+incompatible // indirect\n\tgithub.com/google/go-querystring v1.1.0 // indirect\n\tgithub.com/gorilla/css v1.0.1 // indirect\n\tgithub.com/gorilla/websocket v1.5.3 // indirect\n\tgithub.com/imkira/go-interpol v1.1.0 // indirect\n\tgithub.com/josharian/intern v1.0.0 // indirect\n\tgithub.com/lufia/plan9stats v0.0.0-20240909124753-873cd0166683 // indirect\n\tgithub.com/mattn/go-colorable v0.1.13 // indirect\n\tgithub.com/mattn/go-isatty v0.0.20 // indirect\n\tgithub.com/mediocregopher/radix/v3 v3.8.1 // indirect\n\tgithub.com/mitchellh/go-wordwrap v1.0.1 // indirect\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\n\tgithub.com/nats-io/nats.go v1.38.0 // indirect\n\tgithub.com/nats-io/nkeys v0.4.9 // indirect\n\tgithub.com/nats-io/nuid v1.0.1 // indirect\n\tgithub.com/nxadm/tail v1.4.11 // indirect\n\tgithub.com/pkg/errors v0.9.1 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/power-devops/perfstat v0.0.0-20240221224432-82ca36839d55 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.1.0 // indirect\n\tgithub.com/sanity-io/litter v1.5.5 // indirect\n\tgithub.com/sergi/go-diff v1.3.1 // indirect\n\tgithub.com/shoenig/go-m1cpu v0.1.6 // indirect\n\tgithub.com/sirupsen/logrus v1.9.3 // indirect\n\tgithub.com/stretchr/testify v1.10.0 // indirect\n\tgithub.com/tdewolff/parse/v2 v2.7.19 // indirect\n\tgithub.com/tklauser/go-sysconf v0.3.14 // indirect\n\tgithub.com/tklauser/numcpus v0.9.0 // indirect\n\tgithub.com/valyala/bytebufferpool v1.0.0 // indirect\n\tgithub.com/vmihailenco/tagparser/v2 v2.0.0 // indirect\n\tgithub.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb // indirect\n\tgithub.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415 // indirect\n\tgithub.com/xeipuuv/gojsonschema v1.2.0 // indirect\n\tgithub.com/yalp/jsonpath v0.0.0-20180802001716-5cc68e5049a0 // indirect\n\tgithub.com/yudai/gojsondiff v1.0.0 // indirect\n\tgithub.com/yudai/golcs v0.0.0-20170316035057-ecda9a501e82 // indirect\n\tgithub.com/yusufpapurcu/wmi v1.2.4 // indirect\n\tgo.opencensus.io v0.24.0 // indirect\n\tgolang.org/x/xerrors v0.0.0-20240903120638-7835f813f4da // indirect\n\tmoul.io/http2curl/v2 v2.3.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 34.81,
          "content": "cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ngithub.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/BurntSushi/toml v1.4.0 h1:kuoIxZQy2WRRk1pttg9asf+WVv6tWQuBNVmK8+nqPr0=\ngithub.com/BurntSushi/toml v1.4.0/go.mod h1:ukJfTF/6rtPPRCnwkur4qwRxa8vTRFBF0uk2lLoLwho=\ngithub.com/CloudyKit/fastprinter v0.0.0-20200109182630-33d98a066a53 h1:sR+/8Yb4slttB4vD+b9btVEnWgL3Q00OBTzVT8B9C0c=\ngithub.com/CloudyKit/fastprinter v0.0.0-20200109182630-33d98a066a53/go.mod h1:+3IMCy2vIlbG1XG/0ggNQv0SvxCAIpPM5b1nCz56Xno=\ngithub.com/CloudyKit/jet/v6 v6.2.0 h1:EpcZ6SR9n28BUGtNJSvlBqf90IpjeFr36Tizxhn/oME=\ngithub.com/CloudyKit/jet/v6 v6.2.0/go.mod h1:d3ypHeIRNo2+XyqnGA8s+aphtcVpjP5hPwP/Lzo7Ro4=\ngithub.com/Joker/hpp v1.0.0 h1:65+iuJYdRXv/XyN62C1uEmmOx3432rNG/rKlX6V7Kkc=\ngithub.com/Joker/hpp v1.0.0/go.mod h1:8x5n+M1Hp5hC0g8okX3sR3vFQwynaX/UgSOM9MeBKzY=\ngithub.com/Joker/jade v1.1.3 h1:Qbeh12Vq6BxURXT1qZBRHsDxeURB8ztcL6f3EXSGeHk=\ngithub.com/Joker/jade v1.1.3/go.mod h1:T+2WLyt7VH6Lp0TRxQrUYEs64nRc83wkMQrfeIQKduM=\ngithub.com/Shopify/goreferrer v0.0.0-20240724165105-aceaa0259138 h1:gjbp60h8IZQbN/TpDaYJedWbbD1h1aDPEwWnYWaDaUY=\ngithub.com/Shopify/goreferrer v0.0.0-20240724165105-aceaa0259138/go.mod h1:NYezi6wtnJtBm5btoprXc5SvAdqH0XTXWnUup0MptAI=\ngithub.com/ajg/form v1.5.1 h1:t9c7v8JUKu/XxOGBU0yjNpaMloxGEJhUkqFRq0ibGeU=\ngithub.com/ajg/form v1.5.1/go.mod h1:uL1WgH+h2mgNtvBq0339dVnzXdBETtL2LeUXaIv25UY=\ngithub.com/andybalholm/brotli v1.1.1 h1:PR2pgnyFznKEugtsUo0xLdDop5SKXd5Qf5ysW+7XdTA=\ngithub.com/andybalholm/brotli v1.1.1/go.mod h1:05ib4cKhjx3OQYUY22hTVd34Bc8upXjOLL2rKwwZBoA=\ngithub.com/aymerick/douceur v0.2.0 h1:Mv+mAeH1Q+n9Fr+oyamOlAkUNPWPlA8PPGR0QAaYuPk=\ngithub.com/aymerick/douceur v0.2.0/go.mod h1:wlT5vV2O3h55X9m7iVYN0TBM0NH/MmbLnd30/FjWUq4=\ngithub.com/blang/semver/v4 v4.0.0 h1:1PFHFE6yCCTv8C1TeyNNarDzntLi7wMI5i/pzqYIsAM=\ngithub.com/blang/semver/v4 v4.0.0/go.mod h1:IbckMUScFkM3pff0VJDNKRiT6TG/YpiHIM2yvyW5YoQ=\ngithub.com/bsm/ginkgo/v2 v2.12.0 h1:Ny8MWAHyOepLGlLKYmXG4IEkioBysk6GpaRTLC8zwWs=\ngithub.com/bsm/ginkgo/v2 v2.12.0/go.mod h1:SwYbGRRDovPVboqFv0tPTcG1sN61LM1Z4ARdbAV9g4c=\ngithub.com/bsm/gomega v1.27.10 h1:yeMWxP2pV2fG3FgAODIY8EiRE3dy0aeFYt4l7wh6yKA=\ngithub.com/bsm/gomega v1.27.10/go.mod h1:JyEr/xRbxbtgWNi8tIEVPUYZ5Dzef52k01W3YH0H+O0=\ngithub.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=\ngithub.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=\ngithub.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=\ngithub.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=\ngithub.com/davecgh/go-spew v0.0.0-20161028175848-04cdfd42973b/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dgraph-io/badger/v4 v4.5.0 h1:TeJE3I1pIWLBjYhIYCA1+uxrjWEoJXImFBMEBVSm16g=\ngithub.com/dgraph-io/badger/v4 v4.5.0/go.mod h1:ysgYmIeG8dS/E8kwxT7xHyc7MkmwNYLRoYnFbr7387A=\ngithub.com/dgraph-io/ristretto/v2 v2.0.1 h1:7W0LfEP+USCmtrUjJsk+Jv2jbhJmb72N4yRI7GrLdMI=\ngithub.com/dgraph-io/ristretto/v2 v2.0.1/go.mod h1:K7caLeufSdxm+ITp1n/73U+VbFVAHrexfLbz4n14hpo=\ngithub.com/dgryski/go-farm v0.0.0-20200201041132-a6ae2369ad13 h1:fAjc9m62+UWV/WAFKLNi6ZS0675eEUC9y3AlwSbQu1Y=\ngithub.com/dgryski/go-farm v0.0.0-20200201041132-a6ae2369ad13/go.mod h1:SqUrOPUnsFjfmXRMNPybcSiG0BgUW2AuFH8PAnS2iTw=\ngithub.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f h1:lO4WD4F/rVNCu3HqELle0jiPLLBs70cWOduZpkS1E78=\ngithub.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f/go.mod h1:cuUVRXasLTGF7a8hSLbxyZXjz+1KgoB3wDUb6vlszIc=\ngithub.com/dustin/go-humanize v1.0.1 h1:GzkhY7T5VNhEkwH0PVJgjz+fX1rhBrR7pRT3mDkpeCY=\ngithub.com/dustin/go-humanize v1.0.1/go.mod h1:Mu1zIs6XwVuF/gI1OepvI0qD18qycQx+mFykh5fBlto=\ngithub.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=\ngithub.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=\ngithub.com/fatih/color v1.18.0 h1:S8gINlzdQ840/4pfAwic/ZE0djQEH3wM94VfqLTZcOM=\ngithub.com/fatih/color v1.18.0/go.mod h1:4FelSpRwEGDpQ12mAdzqdOukCy4u8WUtOY6lkT/6HfU=\ngithub.com/fatih/structs v1.1.0 h1:Q7juDM0QtcnhCpeyLGQKyg4TOIghuNXrkL32pHAUMxo=\ngithub.com/fatih/structs v1.1.0/go.mod h1:9NiDSp5zOcgEDl+j00MP/WkGVPOlPRLejGD8Ga6PJ7M=\ngithub.com/flosch/pongo2/v4 v4.0.2 h1:gv+5Pe3vaSVmiJvh/BZa82b7/00YUGm0PIyVVLop0Hw=\ngithub.com/flosch/pongo2/v4 v4.0.2/go.mod h1:B5ObFANs/36VwxxlgKpdchIJHMvHB562PW+BWPhwZD8=\ngithub.com/fsnotify/fsnotify v1.6.0/go.mod h1:sl3t1tCWJFWoRz9R8WJCbQihKKwmorjAbSClcnxKAGw=\ngithub.com/fsnotify/fsnotify v1.7.0 h1:8JEhPFa5W2WU7YfeZzPNqzMP6Lwt7L2715Ggo0nosvA=\ngithub.com/fsnotify/fsnotify v1.7.0/go.mod h1:40Bi/Hjc2AVfZrqy+aj+yEI+/bRxZnMJyTJwOpGvigM=\ngithub.com/go-ole/go-ole v1.2.6/go.mod h1:pprOEPIfldk/42T2oK7lQ4v4JSDwmV0As9GaiUsvbm0=\ngithub.com/go-ole/go-ole v1.3.0 h1:Dt6ye7+vXGIKZ7Xtk4s6/xVdGDQynvom7xCFEdWr6uE=\ngithub.com/go-ole/go-ole v1.3.0/go.mod h1:5LS6F96DhAwUc7C+1HLexzMXY1xGRSryjyPPKW6zv78=\ngithub.com/gobwas/glob v0.2.3 h1:A4xDbljILXROh+kObIiy5kIaPYD8e96x1tgBhUI5J+Y=\ngithub.com/gobwas/glob v0.2.3/go.mod h1:d3Ez4x06l9bZtSvzIay5+Yzi0fmZzPgnTbPcKjJAkT8=\ngithub.com/gobwas/httphead v0.1.0 h1:exrUm0f4YX0L7EBwZHuCF4GDp8aJfVeBrlLQrs6NqWU=\ngithub.com/gobwas/httphead v0.1.0/go.mod h1:O/RXo79gxV8G+RqlR/otEwx4Q36zl9rqC5u12GKvMCM=\ngithub.com/gobwas/pool v0.2.1 h1:xfeeEhW7pwmX8nuLVlqbzVc7udMDrwetjEv+TZIz1og=\ngithub.com/gobwas/pool v0.2.1/go.mod h1:q8bcK0KcYlCgd9e7WYLm9LpyS+YeLd8JVDW6WezmKEw=\ngithub.com/gobwas/ws v1.4.0 h1:CTaoG1tojrh4ucGPcoJFiAQUAsEWekEWvLy7GsVNqGs=\ngithub.com/gobwas/ws v1.4.0/go.mod h1:G3gNqMNtPppf5XUz7O4shetPpcZ1VJ7zt18dlUeakrc=\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=\ngithub.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/groupcache v0.0.0-20241129210726-2c02b8208cf8 h1:f+oWsMOmNPc8JmEHVZIycC7hBoQxHH9pNKQORJNozsQ=\ngithub.com/golang/groupcache v0.0.0-20241129210726-2c02b8208cf8/go.mod h1:wcDNUvekVysuuOpQKo3191zZyTpiI6se1N1ULghS0sw=\ngithub.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=\ngithub.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=\ngithub.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrUpVNzEA03Pprs=\ngithub.com/golang/protobuf v1.4.0-rc.4.0.20200313231945-b860323f09d0/go.mod h1:WU3c8KckQ9AFe+yFwt9sWVRKCVIyN9cPHBJSNnbL67w=\ngithub.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvqG2KuDX0=\ngithub.com/golang/protobuf v1.4.1/go.mod h1:U8fpvMrcmy5pZrNK1lt4xCsGvpyWQ/VVv6QDs8UjoX8=\ngithub.com/golang/protobuf v1.4.3/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\ngithub.com/golang/snappy v0.0.4 h1:yAGX7huGHXlcLOEtBnF4w7FQwA26wojNCwOYAEhLjQM=\ngithub.com/golang/snappy v0.0.4/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=\ngithub.com/gomarkdown/markdown v0.0.0-20241205020045-f7e15b2f3e62 h1:pbAFUZisjG4s6sxvRJvf2N7vhpCvx2Oxb3PmS6pDO1g=\ngithub.com/gomarkdown/markdown v0.0.0-20241205020045-f7e15b2f3e62/go.mod h1:JDGcbDT52eL4fju3sZ4TeHGsQwhG9nbDV21aMyhwPoA=\ngithub.com/google/flatbuffers v24.12.23+incompatible h1:ubBKR94NR4pXUCY/MUsRVzd9umNW7ht7EG9hHfS9FX8=\ngithub.com/google/flatbuffers v24.12.23+incompatible/go.mod h1:1AeVuKshWv4vARoZatz6mlQ0JxURH0Kv5+zNeJKJCa8=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.2/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.3/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/go-querystring v1.1.0 h1:AnCroh3fv4ZBgVIf1Iwtovgjaw/GiKJo8M8yD/fhyJ8=\ngithub.com/google/go-querystring v1.1.0/go.mod h1:Kcdr2DB4koayq7X8pmAG4sNG59So17icRSOU623lUBU=\ngithub.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/google/gofuzz v1.2.0 h1:xRy4A+RhZaiKjJ1bPfwQ8sedCA+YS2YcCHW6ec7JMi0=\ngithub.com/google/gofuzz v1.2.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/gorilla/css v1.0.1 h1:ntNaBIghp6JmvWnxbZKANoLyuXTPZ4cAMlo6RyhlbO8=\ngithub.com/gorilla/css v1.0.1/go.mod h1:BvnYkspnSzMmwRK+b8/xgNPLiIuNZr6vbZBTPQ2A3b0=\ngithub.com/gorilla/securecookie v1.1.2 h1:YCIWL56dvtr73r6715mJs5ZvhtnY73hBvEF8kXD8ePA=\ngithub.com/gorilla/securecookie v1.1.2/go.mod h1:NfCASbcHqRSY+3a8tlWJwsQap2VX5pwzwo4h3eOamfo=\ngithub.com/gorilla/websocket v1.5.3 h1:saDtZ6Pbx/0u+bgYQ3q96pZgCzfhKXGPqt7kZ72aNNg=\ngithub.com/gorilla/websocket v1.5.3/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\ngithub.com/imkira/go-interpol v1.1.0 h1:KIiKr0VSG2CUW1hl1jpiyuzuJeKUUpC8iM1AIE7N1Vk=\ngithub.com/imkira/go-interpol v1.1.0/go.mod h1:z0h2/2T3XF8kyEPpRgJ3kmNv+C43p+I/CoI+jC3w2iA=\ngithub.com/iris-contrib/httpexpect/v2 v2.15.2 h1:T9THsdP1woyAqKHwjkEsbCnMefsAFvk8iJJKokcJ3Go=\ngithub.com/iris-contrib/httpexpect/v2 v2.15.2/go.mod h1:JLDgIqnFy5loDSUv1OA2j0mb6p/rDhiCqigP22Uq9xE=\ngithub.com/iris-contrib/schema v0.0.6 h1:CPSBLyx2e91H2yJzPuhGuifVRnZBBJ3pCOMbOvPZaTw=\ngithub.com/iris-contrib/schema v0.0.6/go.mod h1:iYszG0IOsuIsfzjymw1kMzTL8YQcCWlm65f3wX8J5iA=\ngithub.com/josharian/intern v1.0.0 h1:vlS4z54oSdjm0bgjRigI+G1HpF+tI+9rE5LLzOg8HmY=\ngithub.com/josharian/intern v1.0.0/go.mod h1:5DoeVV0s6jJacbCEi61lwdGj/aVlrQvzHFFd8Hwg//Y=\ngithub.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=\ngithub.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=\ngithub.com/kataras/blocks v0.0.8 h1:MrpVhoFTCR2v1iOOfGng5VJSILKeZZI+7NGfxEh3SUM=\ngithub.com/kataras/blocks v0.0.8/go.mod h1:9Jm5zx6BB+06NwA+OhTbHW1xkMOYxahnqTN5DveZ2Yg=\ngithub.com/kataras/golog v0.1.12 h1:Bu7I/G4ilJlbfzjmU39O9N+2uO1pBcMK045fzZ4ytNg=\ngithub.com/kataras/golog v0.1.12/go.mod h1:wrGSbOiBqbQSQznleVNX4epWM8rl9SJ/rmEacl0yqy4=\ngithub.com/kataras/jwt v0.1.12 h1:FHPgTTj5UqjlBye4PA4/oxknCY+kQ9K34XAi8d37glA=\ngithub.com/kataras/jwt v0.1.12/go.mod h1:xkimAtDhU/aGlQqjwvgtg+VyuPwMiyZHaY8LJRh0mYo=\ngithub.com/kataras/neffos v0.0.24-0.20241114125147-07c1e09b1919 h1:zIFQc8IRpZzpIUNlCkYScHOi5GqyekvNfbyZXibbbWg=\ngithub.com/kataras/neffos v0.0.24-0.20241114125147-07c1e09b1919/go.mod h1:xb2WYp2SKc2UBL5x3tGYkr5xyEOoHNaZ9XbVATOa330=\ngithub.com/kataras/pio v0.0.14-0.20240707171706-2005199e2703 h1:RzWeszUyNUlyKH+3Nz1tfAj5FWn5UZBG5QP9LIhJZzI=\ngithub.com/kataras/pio v0.0.14-0.20240707171706-2005199e2703/go.mod h1:WNpzgFvXTQ11zsIKHxpQhaoVIxQGTSowpnElAbVOeN8=\ngithub.com/kataras/sitemap v0.0.6 h1:w71CRMMKYMJh6LR2wTgnk5hSgjVNB9KL60n5e2KHvLY=\ngithub.com/kataras/sitemap v0.0.6/go.mod h1:dW4dOCNs896OR1HmG+dMLdT7JjDk7mYBzoIRwuj5jA4=\ngithub.com/kataras/tunnel v0.0.4 h1:sCAqWuJV7nPzGrlb0os3j49lk2JhILT0rID38NHNLpA=\ngithub.com/kataras/tunnel v0.0.4/go.mod h1:9FkU4LaeifdMWqZu7o20ojmW4B7hdhv2CMLwfnHGpYw=\ngithub.com/klauspost/compress v1.17.11 h1:In6xLpyWOi1+C7tXUUWv2ot1QvBjxevKAaI6IXrJmUc=\ngithub.com/klauspost/compress v1.17.11/go.mod h1:pMDklpSncoRMuLFrf1W9Ss9KT+0rH90U12bZKk7uwG0=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/lufia/plan9stats v0.0.0-20240909124753-873cd0166683 h1:7UMa6KCCMjZEMDtTVdcGu0B1GmmC7QJKiCCjyTAWQy0=\ngithub.com/lufia/plan9stats v0.0.0-20240909124753-873cd0166683/go.mod h1:ilwx/Dta8jXAgpFYFvSWEMwxmbWXyiUHkd5FwyKhb5k=\ngithub.com/mailgun/raymond/v2 v2.0.48 h1:5dmlB680ZkFG2RN/0lvTAghrSxIESeu9/2aeDqACtjw=\ngithub.com/mailgun/raymond/v2 v2.0.48/go.mod h1:lsgvL50kgt1ylcFJYZiULi5fjPBkkhNfj4KA0W54Z18=\ngithub.com/mailru/easyjson v0.9.0 h1:PrnmzHw7262yW8sTBwxi1PdJA3Iw/EKBa8psRf7d9a4=\ngithub.com/mailru/easyjson v0.9.0/go.mod h1:1+xMtQp2MRNVL/V1bOzuP3aP8VNwRW55fQUto+XFtTU=\ngithub.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=\ngithub.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mediocregopher/radix/v3 v3.8.1 h1:rOkHflVuulFKlwsLY01/M2cM2tWCjDoETcMqKbAWu1M=\ngithub.com/mediocregopher/radix/v3 v3.8.1/go.mod h1:8FL3F6UQRXHXIBSPUs5h0RybMF8i4n7wVopoX3x7Bv8=\ngithub.com/microcosm-cc/bluemonday v1.0.27 h1:MpEUotklkwCSLeH+Qdx1VJgNqLlpY2KXwXFM08ygZfk=\ngithub.com/microcosm-cc/bluemonday v1.0.27/go.mod h1:jFi9vgW+H7c3V0lb6nR74Ib/DIB5OBs92Dimizgw2cA=\ngithub.com/mitchellh/go-wordwrap v1.0.1 h1:TLuKupo69TCn6TQSyGxwI1EblZZEsQ0vMlAFQflz0v0=\ngithub.com/mitchellh/go-wordwrap v1.0.1/go.mod h1:R62XHJLzvMFRBbcrT7m7WgmE1eOyTSsCt+hzestvNj0=\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=\ngithub.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=\ngithub.com/nats-io/nats.go v1.38.0 h1:A7P+g7Wjp4/NWqDOOP/K6hfhr54DvdDQUznt5JFg9XA=\ngithub.com/nats-io/nats.go v1.38.0/go.mod h1:IGUM++TwokGnXPs82/wCuiHS02/aKrdYUQkU8If6yjw=\ngithub.com/nats-io/nkeys v0.4.9 h1:qe9Faq2Gxwi6RZnZMXfmGMZkg3afLLOtrU+gDZJ35b0=\ngithub.com/nats-io/nkeys v0.4.9/go.mod h1:jcMqs+FLG+W5YO36OX6wFIFcmpdAns+w1Wm6D3I/evE=\ngithub.com/nats-io/nuid v1.0.1 h1:5iA8DT8V7q8WK2EScv2padNa/rTESc1KdnPw4TC2paw=\ngithub.com/nats-io/nuid v1.0.1/go.mod h1:19wcPz3Ph3q0Jbyiqsd0kePYG7A95tJPxeL+1OSON2c=\ngithub.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e h1:fD57ERR4JtEqsWbfPhv4DMiApHyliiK5xCTNVSPiaAs=\ngithub.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e/go.mod h1:zD1mROLANZcx1PVRCS0qkT7pwLkGfwJo4zjcN/Tysno=\ngithub.com/nxadm/tail v1.4.11 h1:8feyoE3OzPrcshW5/MJ4sGESc5cqmGkGCWlco4l0bqY=\ngithub.com/nxadm/tail v1.4.11/go.mod h1:OTaG3NK980DZzxbRq6lEuzgU+mug70nY11sMd4JXXHc=\ngithub.com/onsi/ginkgo v1.16.5 h1:8xi0RTUf59SOSfEtZMvwTvXYMzG4gV23XVHOZiXNtnE=\ngithub.com/onsi/ginkgo v1.16.5/go.mod h1:+E8gABHa3K6zRBolWtd+ROzc/U5bkGt0FwiG042wbpU=\ngithub.com/onsi/gomega v1.27.10 h1:naR28SdDFlqrG6kScpT8VWpu1xWY5nJRCF3XaYyBjhI=\ngithub.com/onsi/gomega v1.27.10/go.mod h1:RsS8tutOdbdgzbPtzzATp12yT7kM5I5aElG3evPbQ0M=\ngithub.com/pkg/diff v0.0.0-20200914180035-5b29258ca4f7/go.mod h1:zO8QMzTeZd5cpnIkz/Gn6iK0jDfGicM1nynOkkPIl28=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v0.0.0-20151028094244-d8ed2627bdf0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/power-devops/perfstat v0.0.0-20240221224432-82ca36839d55 h1:o4JXh1EVt9k/+g42oCprj/FisM4qX9L3sZB3upGN2ZU=\ngithub.com/power-devops/perfstat v0.0.0-20240221224432-82ca36839d55/go.mod h1:OmDBASR4679mdNQnz2pUhc2G8CO2JrUAVFDRBDP/hJE=\ngithub.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/redis/go-redis/v9 v9.7.0 h1:HhLSs+B6O021gwzl+locl0zEDnyNkxMtf/Z3NNBMa9E=\ngithub.com/redis/go-redis/v9 v9.7.0/go.mod h1:f6zhXITC7JUJIlPEiBOTXxJgPLdZcA93GewI7inzyWw=\ngithub.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/sanity-io/litter v1.5.5 h1:iE+sBxPBzoK6uaEP5Lt3fHNgpKcHXc/A2HGETy0uJQo=\ngithub.com/sanity-io/litter v1.5.5/go.mod h1:9gzJgR2i4ZpjZHsKvUXIRQVk7P+yM3e+jAF7bU2UI5U=\ngithub.com/schollz/closestmatch v2.1.0+incompatible h1:Uel2GXEpJqOWBrlyI+oY9LTiyyjYS17cCYRqP13/SHk=\ngithub.com/schollz/closestmatch v2.1.0+incompatible/go.mod h1:RtP1ddjLong6gTkbtmuhtR2uUrrJOpYzYRvbcPAid+g=\ngithub.com/sergi/go-diff v1.0.0/go.mod h1:0CfEIISq7TuYL3j771MWULgwwjU+GofnZX9QAmXWZgo=\ngithub.com/sergi/go-diff v1.3.1 h1:xkr+Oxo4BOQKmkn/B9eMK0g5Kg/983T9DqqPHwYqD+8=\ngithub.com/sergi/go-diff v1.3.1/go.mod h1:aMJSSKb2lpPvRNec0+w3fl7LP9IOFzdc9Pa4NFbPK1I=\ngithub.com/shirou/gopsutil/v3 v3.24.5 h1:i0t8kL+kQTvpAYToeuiVk3TgDeKOFioZO3Ztz/iZ9pI=\ngithub.com/shirou/gopsutil/v3 v3.24.5/go.mod h1:bsoOS1aStSs9ErQ1WWfxllSeS1K5D+U30r2NfcubMVk=\ngithub.com/shoenig/go-m1cpu v0.1.6 h1:nxdKQNcEB6vzgA2E2bvzKIYRuNj7XNJ4S/aRSwKzFtM=\ngithub.com/shoenig/go-m1cpu v0.1.6/go.mod h1:1JJMcUBvfNwpq05QDQVAnx3gUHr9IYF7GNg9SUEw2VQ=\ngithub.com/shoenig/test v0.6.4 h1:kVTaSd7WLz5WZ2IaoM0RSzRsUD+m8wRR+5qvntpn4LU=\ngithub.com/shoenig/test v0.6.4/go.mod h1:byHiCGXqrVaflBLAMq/srcZIHynQPQgeyvkvXnjqq0k=\ngithub.com/sirupsen/logrus v1.8.1/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=\ngithub.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=\ngithub.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/testify v0.0.0-20161117074351-18a02ba4a312/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=\ngithub.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/tailscale/depaware v0.0.0-20210622194025-720c4b409502/go.mod h1:p9lPsd+cx33L3H9nNoecRRxPssFKUwwI50I3pZ0yT+8=\ngithub.com/tdewolff/minify/v2 v2.21.2 h1:VfTvmGVtBYhMTlUAeHtXM7XOsW0JT/6uMwUPPqgUs9k=\ngithub.com/tdewolff/minify/v2 v2.21.2/go.mod h1:Olje3eHdBnrMjINKffDsil/3NV98Iv7MhWf7556WQVg=\ngithub.com/tdewolff/parse/v2 v2.7.19 h1:7Ljh26yj+gdLFEq/7q9LT4SYyKtwQX4ocNrj45UCePg=\ngithub.com/tdewolff/parse/v2 v2.7.19/go.mod h1:3FbJWZp3XT9OWVN3Hmfp0p/a08v4h8J9W1aghka0soA=\ngithub.com/tdewolff/test v1.0.11-0.20231101010635-f1265d231d52/go.mod h1:6DAvZliBAAnD7rhVgwaM7DE5/d9NMOAJ09SqYqeK4QE=\ngithub.com/tdewolff/test v1.0.11-0.20240106005702-7de5f7df4739 h1:IkjBCtQOOjIn03u/dMQK9g+Iw9ewps4mCl1nB8Sscbo=\ngithub.com/tdewolff/test v1.0.11-0.20240106005702-7de5f7df4739/go.mod h1:XPuWBzvdUzhCuxWO1ojpXsyzsA5bFoS3tO/Q3kFuTG8=\ngithub.com/tklauser/go-sysconf v0.3.14 h1:g5vzr9iPFFz24v2KZXs/pvpvh8/V9Fw6vQK5ZZb78yU=\ngithub.com/tklauser/go-sysconf v0.3.14/go.mod h1:1ym4lWMLUOhuBOPGtRcJm7tEGX4SCYNEEEtghGG/8uY=\ngithub.com/tklauser/numcpus v0.9.0 h1:lmyCHtANi8aRUgkckBgoDk1nHCux3n2cgkJLXdQGPDo=\ngithub.com/tklauser/numcpus v0.9.0/go.mod h1:SN6Nq1O3VychhC1npsWostA+oW+VOQTxZrS604NSRyI=\ngithub.com/valyala/bytebufferpool v1.0.0 h1:GqA5TC/0021Y/b9FG4Oi9Mr3q7XYx6KllzawFIhcdPw=\ngithub.com/valyala/bytebufferpool v1.0.0/go.mod h1:6bBcMArwyJ5K/AmCkWv1jt77kVWyCJ6HpOuEn7z0Csc=\ngithub.com/vmihailenco/msgpack/v5 v5.4.1 h1:cQriyiUvjTwOHg8QZaPihLWeRAAVoCpE00IUPn0Bjt8=\ngithub.com/vmihailenco/msgpack/v5 v5.4.1/go.mod h1:GaZTsDaehaPpQVyxrf5mtQlH+pc21PIudVV/E3rRQok=\ngithub.com/vmihailenco/tagparser/v2 v2.0.0 h1:y09buUbR+b5aycVFQs/g70pqKVZNBmxwAhO7/IwNM9g=\ngithub.com/vmihailenco/tagparser/v2 v2.0.0/go.mod h1:Wri+At7QHww0WTrCBeu4J6bNtoV6mEfg5OIWRZA9qds=\ngithub.com/xeipuuv/gojsonpointer v0.0.0-20180127040702-4e3ac2762d5f/go.mod h1:N2zxlSyiKSe5eX1tZViRH5QA0qijqEDrYZiPEAiq3wU=\ngithub.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb h1:zGWFAtiMcyryUHoUjUJX0/lt1H2+i2Ka2n+D3DImSNo=\ngithub.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb/go.mod h1:N2zxlSyiKSe5eX1tZViRH5QA0qijqEDrYZiPEAiq3wU=\ngithub.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415 h1:EzJWgHovont7NscjpAxXsDA8S8BMYve8Y5+7cuRE7R0=\ngithub.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415/go.mod h1:GwrjFmJcFw6At/Gs6z4yjiIwzuJ1/+UwLxMQDVQXShQ=\ngithub.com/xeipuuv/gojsonschema v1.2.0 h1:LhYJRs+L4fBtjZUfuSZIKGeVu0QRy8e5Xi7D17UxZ74=\ngithub.com/xeipuuv/gojsonschema v1.2.0/go.mod h1:anYRn/JVcOK2ZgGU+IjEV4nwlhoK5sQluxsYJ78Id3Y=\ngithub.com/xyproto/randomstring v1.0.5 h1:YtlWPoRdgMu3NZtP45drfy1GKoojuR7hmRcnhZqKjWU=\ngithub.com/xyproto/randomstring v1.0.5/go.mod h1:rgmS5DeNXLivK7YprL0pY+lTuhNQW3iGxZ18UQApw/E=\ngithub.com/yalp/jsonpath v0.0.0-20180802001716-5cc68e5049a0 h1:6fRhSjgLCkTD3JnJxvaJ4Sj+TYblw757bqYgZaOq5ZY=\ngithub.com/yalp/jsonpath v0.0.0-20180802001716-5cc68e5049a0/go.mod h1:/LWChgwKmvncFJFHJ7Gvn9wZArjbV5/FppcK2fKk/tI=\ngithub.com/yosssi/ace v0.0.5 h1:tUkIP/BLdKqrlrPwcmH0shwEEhTRHoGnc1wFIWmaBUA=\ngithub.com/yosssi/ace v0.0.5/go.mod h1:ALfIzm2vT7t5ZE7uoIZqF3TQ7SAOyupFZnkrF5id+K0=\ngithub.com/yudai/gojsondiff v1.0.0 h1:27cbfqXLVEJ1o8I6v3y9lg8Ydm53EKqHXAOMxEGlCOA=\ngithub.com/yudai/gojsondiff v1.0.0/go.mod h1:AY32+k2cwILAkW1fbgxQ5mUmMiZFgLIV+FBNExI05xg=\ngithub.com/yudai/golcs v0.0.0-20170316035057-ecda9a501e82 h1:BHyfKlQyqbsFN5p3IfnEUduWvb9is428/nNb5L3U01M=\ngithub.com/yudai/golcs v0.0.0-20170316035057-ecda9a501e82/go.mod h1:lgjkn3NuSvDfVJdfcVVdX+jpBxNmX4rDAzaS45IcYoM=\ngithub.com/yudai/pp v2.0.1+incompatible h1:Q4//iY4pNF6yPLZIigmvcl7k/bPgrcTPIFIcmawg5bI=\ngithub.com/yudai/pp v2.0.1+incompatible/go.mod h1:PuxR/8QJ7cyCkFp/aUDS+JY727OFEZkTdatxwunjIkc=\ngithub.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.4.1/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1Zlc8k=\ngithub.com/yusufpapurcu/wmi v1.2.4 h1:zFUKzehAFReQwLys1b/iSMl+JQGSCSjtVqQn9bBrPo0=\ngithub.com/yusufpapurcu/wmi v1.2.4/go.mod h1:SBZ9tNy3G9/m5Oi98Zks0QjeHVDvuK0qfxQmPyzfmi0=\ngo.etcd.io/bbolt v1.3.11 h1:yGEzV1wPz2yVCLsD8ZAiGHhHVlczyC9d1rP43/VCRJ0=\ngo.etcd.io/bbolt v1.3.11/go.mod h1:dksAq7YMXoljX0xu6VF5DMZGbhYYoLUalEiSySYAS4I=\ngo.opencensus.io v0.24.0 h1:y73uSU6J157QMP2kn2r30vwW1A2W2WFwSCGnAVxeaD0=\ngo.opencensus.io v0.24.0/go.mod h1:vNK8G9p7aAivkbmorf4v+7Hgx+Zs0yY+0fOtgBfjQKo=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=\ngolang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=\ngolang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20241217172543-b2144cdd0a67 h1:1UoZQm6f0P/ZO0w1Ri+f+ifG/gXhegadRdwBIXEFWDo=\ngolang.org/x/exp v0.0.0-20241217172543-b2144cdd0a67/go.mod h1:qj5a5QZpwLU2NLQudwIN5koi3beDhSAlJwa67PuM98c=\ngolang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=\ngolang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.4.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.5.1/go.mod h1:5OXOZSfqPIIbmVBIIKWRFfZjPR0E5r58TLhUjH0a2Ro=\ngolang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190327091125-710a502c58a2/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20201110031124-69a78807bb2b/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20211015210444-4f30a5c0130f/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.33.0 h1:74SYHlV8BIgHIFC/LrYkOGIwL19eTYXQ5wc6TBuO36I=\ngolang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=\ngolang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\ngolang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190916202348-b4ddaad3f8a3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201204225414-ed752295db88/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20211019181941-9d821ace8654/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220908164124-27713097b956/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.1.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngolang.org/x/time v0.8.0 h1:9i3RxcPv3PZnitoVGMPDKZSq1xW1gK1Xy3ArNOGZfEg=\ngolang.org/x/time v0.8.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20201211185031-d93e913c1a58/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.1.9/go.mod h1:nABZi5QlRsZVlzPpHl034qft6wpY4eDcsTt5AaioBiU=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20240903120638-7835f813f4da h1:noIWHXmPHxILtqtCOPIhSt0ABwskkZKjD3bXGnZGpNY=\ngolang.org/x/xerrors v0.0.0-20240903120638-7835f813f4da/go.mod h1:NDW/Ps6MPRej6fsCIbMTohpP40sJ/P/vI1MoTEGwX90=\ngoogle.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=\ngoogle.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=\ngoogle.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=\ngoogle.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=\ngoogle.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=\ngoogle.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.33.2/go.mod h1:JMHMWHQWaTccqQQlmk3MJZS+GWXOdAesneDmEnv2fbc=\ngoogle.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=\ngoogle.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=\ngoogle.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=\ngoogle.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=\ngoogle.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=\ngoogle.golang.org/protobuf v1.22.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=\ngoogle.golang.org/protobuf v1.36.1 h1:yBPeRvTftaleIgM3PZ/WBIZ7XM/eEYAaEyCwvyjq/gk=\ngoogle.golang.org/protobuf v1.36.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20200902074654-038fdea0a05b h1:QRR6H1YWRnHb4Y/HeNFCTJLFVxaq6wH4YuVdsUOr75U=\ngopkg.in/check.v1 v1.0.0-20200902074654-038fdea0a05b/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/ini.v1 v1.67.0 h1:Dgnx+6+nfE+IfzjUEISNeydPJh9AXNNsWbGP9KzCsOA=\ngopkg.in/ini.v1 v1.67.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=\ngopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7 h1:uRGJdciOHaEIrze2W8Q3AKkepLTh2hOroT7a+7czfdQ=\ngopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\nhonnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nmoul.io/http2curl/v2 v2.3.0 h1:9r3JfDzWPcbIklMOs2TnIFzDYvfAZvjeavG6EzP7jYs=\nmoul.io/http2curl/v2 v2.3.0/go.mod h1:RW4hyBjTWSYDOxapodpNEtX0g5Eb16sxklBqmd2RHcE=\n"
        },
        {
          "name": "hero",
          "type": "tree",
          "content": null
        },
        {
          "name": "httptest",
          "type": "tree",
          "content": null
        },
        {
          "name": "i18n",
          "type": "tree",
          "content": null
        },
        {
          "name": "iris.go",
          "type": "blob",
          "size": 39.78,
          "content": "package iris\n\nimport (\n\t\"bytes\"\n\tstdContext \"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"math\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"regexp\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/kataras/iris/v12/context\"\n\t\"github.com/kataras/iris/v12/core/host\"\n\t\"github.com/kataras/iris/v12/core/netutil\"\n\t\"github.com/kataras/iris/v12/core/router\"\n\t\"github.com/kataras/iris/v12/i18n\"\n\t\"github.com/kataras/iris/v12/middleware/cors\"\n\t\"github.com/kataras/iris/v12/middleware/recover\"\n\t\"github.com/kataras/iris/v12/middleware/requestid\"\n\t\"github.com/kataras/iris/v12/view\"\n\n\t\"github.com/kataras/golog\"\n\t\"github.com/kataras/tunnel\"\n\n\t\"github.com/tdewolff/minify/v2\"\n\t\"github.com/tdewolff/minify/v2/css\"\n\t\"github.com/tdewolff/minify/v2/html\"\n\t\"github.com/tdewolff/minify/v2/js\"\n\t\"github.com/tdewolff/minify/v2/json\"\n\t\"github.com/tdewolff/minify/v2/svg\"\n\t\"github.com/tdewolff/minify/v2/xml\"\n)\n\n// Version is the current version of the Iris Web Framework.\nconst Version = \"12.2.11\"\n\n// Byte unit helpers.\nconst (\n\tB = 1 << (10 * iota)\n\tKB\n\tMB\n\tGB\n\tTB\n\tPB\n\tEB\n)\n\n// Application is responsible to manage the state of the application.\n// It contains and handles all the necessary parts to create a fast web server.\ntype Application struct {\n\t// routing embedded | exposing APIBuilder's and Router's public API.\n\t*router.APIBuilder\n\t*router.Router\n\trouter.HTTPErrorHandler // if Router is Downgraded this is nil.\n\tContextPool             *context.Pool\n\t// See SetContextErrorHandler, defaults to nil.\n\tcontextErrorHandler context.ErrorHandler\n\n\t// config contains the configuration fields\n\t// all fields defaults to something that is working, developers don't have to set it.\n\tconfig *Configuration\n\n\t// the golog logger instance, defaults to \"Info\" level messages (all except \"Debug\")\n\tlogger *golog.Logger\n\n\t// I18n contains localization and internationalization support.\n\t// Use the `Load` or `LoadAssets` to locale language files.\n\t//\n\t// See `Context#Tr` method for request-based translations.\n\tI18n *i18n.I18n\n\n\t// Validator is the request body validator, defaults to nil.\n\tValidator context.Validator\n\t// Minifier to minify responses.\n\tminifier *minify.M\n\n\t// view engine\n\tview *view.View\n\t// used for build\n\tbuilded     bool\n\tdefaultMode bool\n\t// OnBuild is a single function which\n\t// is fired on the first `Build` method call.\n\t// If reports an error then the execution\n\t// is stopped and the error is logged.\n\t// It's nil by default except when `Switch` instead of `New` or `Default`\n\t// is used to initialize the Application.\n\t// Users can wrap it to accept more events.\n\tOnBuild func() error\n\n\tmu sync.RWMutex\n\t// name is the application name and the log prefix for\n\t// that Application instance's Logger. See `SetName` and `String`.\n\t// Defaults to IRIS_APP_NAME envrinoment variable otherwise empty.\n\tname string\n\t// Hosts contains a list of all servers (Host Supervisors) that this app is running on.\n\t//\n\t// Hosts may be empty only if application ran(`app.Run`) with `iris.Raw` option runner,\n\t// otherwise it contains a single host (`app.Hosts[0]`).\n\t//\n\t// Additional Host Supervisors can be added to that list by calling the `app.NewHost` manually.\n\t//\n\t// Hosts field is available after `Run` or `NewHost`.\n\tHosts             []*host.Supervisor\n\thostConfigurators []host.Configurator\n\trunError          error\n\trunErrorMu        sync.RWMutex\n}\n\n// New creates and returns a fresh empty iris *Application instance.\nfunc New() *Application {\n\tconfig := DefaultConfiguration()\n\tapp := &Application{\n\t\tconfig:   &config,\n\t\tRouter:   router.NewRouter(),\n\t\tI18n:     i18n.New(),\n\t\tminifier: newMinifier(),\n\t\tview:     new(view.View),\n\t}\n\n\tlogger := newLogger(app)\n\tapp.logger = logger\n\tapp.APIBuilder = router.NewAPIBuilder(logger)\n\tapp.ContextPool = context.New(func() interface{} {\n\t\treturn context.NewContext(app)\n\t})\n\n\tcontext.RegisterApplication(app)\n\treturn app\n}\n\n// Default returns a new Application.\n// Default with \"debug\" Logger Level.\n// Localization enabled on \"./locales\" directory\n// and HTML templates on \"./views\" or \"./templates\" directory.\n// CORS (allow all), Recovery and\n// Request ID middleware already registered.\nfunc Default() *Application {\n\tapp := New()\n\t// Set default log level.\n\tapp.logger.SetLevel(\"debug\")\n\tapp.logger.Debugf(`Log level set to \"debug\"`)\n\n\t/* #2046.\n\t// Register the accesslog middleware.\n\tlogFile, err := os.OpenFile(\"./access.log\", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0o600)\n\tif err == nil {\n\t\t// Close the file on shutdown.\n\t\tapp.ConfigureHost(func(su *Supervisor) {\n\t\t\tsu.RegisterOnShutdown(func() {\n\t\t\t\tlogFile.Close()\n\t\t\t})\n\t\t})\n\n\t\tac := accesslog.New(logFile)\n\t\tac.AddOutput(app.logger.Printer)\n\t\tapp.UseRouter(ac.Handler)\n\t\tapp.logger.Debugf(\"Using <%s> to log requests\", logFile.Name())\n\t}\n\t*/\n\n\t// Register the requestid middleware\n\t// before recover so current Context.GetID() contains the info on panic logs.\n\tapp.UseRouter(requestid.New())\n\tapp.logger.Debugf(\"Using <UUID4> to identify requests\")\n\n\t// Register the recovery, after accesslog and recover,\n\t// before end-developer's middleware.\n\tapp.UseRouter(recover.New())\n\n\t// Register CORS (allow any origin to pass through) middleware.\n\tapp.UseRouter(cors.New().\n\t\tExtractOriginFunc(cors.DefaultOriginExtractor).\n\t\tReferrerPolicy(cors.NoReferrerWhenDowngrade).\n\t\tAllowOriginFunc(cors.AllowAnyOrigin).\n\t\tHandler())\n\n\tapp.defaultMode = true\n\n\treturn app\n}\n\nfunc newLogger(app *Application) *golog.Logger {\n\tlogger := golog.Default.Child(app)\n\tif name := os.Getenv(\"IRIS_APP_NAME\"); name != \"\" {\n\t\tapp.name = name\n\t\tlogger.SetChildPrefix(name)\n\t}\n\n\treturn logger\n}\n\n// SetName sets a unique name to this Iris Application.\n// It sets a child prefix for the current Application's Logger.\n// Look `String` method too.\n//\n// It returns this Application.\nfunc (app *Application) SetName(appName string) *Application {\n\tapp.mu.Lock()\n\tdefer app.mu.Unlock()\n\n\tif app.name == \"\" {\n\t\tapp.logger.SetChildPrefix(appName)\n\t}\n\tapp.name = appName\n\n\treturn app\n}\n\n// String completes the fmt.Stringer interface and it returns\n// the application's name.\n// If name was not set by `SetName` or `IRIS_APP_NAME` environment variable\n// then this will return an empty string.\nfunc (app *Application) String() string {\n\treturn app.name\n}\n\n// WWW creates and returns a \"www.\" subdomain.\n// The difference from `app.Subdomain(\"www\")` or `app.Party(\"www.\")` is that the `app.WWW()` method\n// wraps the router so all http(s)://mydomain.com will be redirect to http(s)://www.mydomain.com.\n// Other subdomains can be registered using the app: `sub := app.Subdomain(\"mysubdomain\")`,\n// child subdomains can be registered using the www := app.WWW(); www.Subdomain(\"wwwchildSubdomain\").\nfunc (app *Application) WWW() router.Party {\n\treturn app.SubdomainRedirect(app, app.Subdomain(\"www\"))\n}\n\n// SubdomainRedirect registers a router wrapper which\n// redirects(StatusMovedPermanently) a (sub)domain to another subdomain or to the root domain as fast as possible,\n// before the router's try to execute route's handler(s).\n//\n// It receives two arguments, they are the from and to/target locations,\n// 'from' can be a wildcard subdomain as well (app.WildcardSubdomain())\n// 'to' is not allowed to be a wildcard for obvious reasons,\n// 'from' can be the root domain(app) when the 'to' is not the root domain and visa-versa.\n//\n// Usage:\n// www := app.Subdomain(\"www\") <- same as app.Party(\"www.\")\n// app.SubdomainRedirect(app, www)\n// This will redirect all http(s)://mydomain.com/%anypath% to http(s)://www.mydomain.com/%anypath%.\n//\n// One or more subdomain redirects can be used to the same app instance.\n//\n// If you need more information about this implementation then you have to navigate through\n// the `core/router#NewSubdomainRedirectWrapper` function instead.\n//\n// Example: https://github.com/kataras/iris/tree/main/_examples/routing/subdomains/redirect\nfunc (app *Application) SubdomainRedirect(from, to router.Party) router.Party {\n\tsd := router.NewSubdomainRedirectWrapper(app.ConfigurationReadOnly().GetVHost, from.GetRelPath(), to.GetRelPath())\n\tapp.Router.AddRouterWrapper(sd)\n\treturn to\n}\n\n// Configure can called when modifications to the framework instance needed.\n// It accepts the framework instance\n// and returns an error which if it's not nil it's printed to the logger.\n// See configuration.go for more.\n//\n// Returns itself in order to be used like `app:= New().Configure(...)`\nfunc (app *Application) Configure(configurators ...Configurator) *Application {\n\tfor _, cfg := range configurators {\n\t\tif cfg != nil {\n\t\t\tcfg(app)\n\t\t}\n\t}\n\n\treturn app\n}\n\n// ConfigurationReadOnly returns an object which doesn't allow field writing.\nfunc (app *Application) ConfigurationReadOnly() context.ConfigurationReadOnly {\n\treturn app.config\n}\n\n// Logger returns the golog logger instance(pointer) that is being used inside the \"app\".\n//\n// Available levels:\n// - \"disable\"\n// - \"fatal\"\n// - \"error\"\n// - \"warn\"\n// - \"info\"\n// - \"debug\"\n// Usage: app.Logger().SetLevel(\"error\")\n// Or set the level through Configurartion's LogLevel or WithLogLevel functional option.\n// Defaults to \"info\" level.\n//\n// Callers can use the application's logger which is\n// the same `golog.Default.LastChild()` logger,\n// to print custom logs too.\n// Usage:\n// app.Logger().Error/Errorf(\"...\")\n// app.Logger().Warn/Warnf(\"...\")\n// app.Logger().Info/Infof(\"...\")\n// app.Logger().Debug/Debugf(\"...\")\n//\n// Setting one or more outputs: app.Logger().SetOutput(io.Writer...)\n// Adding one or more outputs : app.Logger().AddOutput(io.Writer...)\n//\n// Adding custom levels requires import of the `github.com/kataras/golog` package:\n//\n//\tFirst we create our level to a golog.Level\n//\tin order to be used in the Log functions.\n//\tvar SuccessLevel golog.Level = 6\n//\tRegister our level, just three fields.\n//\tgolog.Levels[SuccessLevel] = &golog.LevelMetadata{\n//\t\tName:    \"success\",\n//\t\tRawText: \"[SUCC]\",\n//\t\t// ColorfulText (Green Color[SUCC])\n//\t\tColorfulText: \"\\x1b[32m[SUCC]\\x1b[0m\",\n//\t}\n//\n// Usage:\n// app.Logger().SetLevel(\"success\")\n// app.Logger().Logf(SuccessLevel, \"a custom leveled log message\")\nfunc (app *Application) Logger() *golog.Logger {\n\treturn app.logger\n}\n\n// IsDebug reports whether the application is running\n// under debug/development mode.\n// It's just a shortcut of Logger().Level >= golog.DebugLevel.\n// The same method existss as Context.IsDebug() too.\nfunc (app *Application) IsDebug() bool {\n\treturn app.logger.Level >= golog.DebugLevel\n}\n\n// I18nReadOnly returns the i18n's read-only features.\n// See `I18n` method for more.\nfunc (app *Application) I18nReadOnly() context.I18nReadOnly {\n\treturn app.I18n\n}\n\n// Validate validates a value and returns nil if passed or\n// the failure reason if does not.\nfunc (app *Application) Validate(v interface{}) error {\n\tif app.Validator == nil {\n\t\treturn nil\n\t}\n\n\t// val := reflect.ValueOf(v)\n\t// if val.Kind() == reflect.Ptr && !val.IsNil() {\n\t// \tval = val.Elem()\n\t// }\n\n\t// if val.Kind() == reflect.Struct && val.Type() != timeType {\n\t// \treturn app.Validator.Struct(v)\n\t// }\n\n\t// no need to check the kind, underline lib does it but in the future this may change (look above).\n\terr := app.Validator.Struct(v)\n\tif err != nil {\n\t\tif !strings.HasPrefix(err.Error(), \"validator: \") {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc newMinifier() *minify.M {\n\tm := minify.New()\n\tm.AddFunc(\"text/css\", css.Minify)\n\tm.AddFunc(\"text/html\", html.Minify)\n\tm.AddFunc(\"image/svg+xml\", svg.Minify)\n\tm.AddFuncRegexp(regexp.MustCompile(\"^(application|text)/(x-)?(java|ecma)script$\"), js.Minify)\n\tm.AddFuncRegexp(regexp.MustCompile(\"[/+]json$\"), json.Minify)\n\tm.AddFuncRegexp(regexp.MustCompile(\"[/+]xml$\"), xml.Minify)\n\treturn m\n}\n\n// Minify is a middleware which minifies the responses\n// based on the response content type.\n// Note that minification might be slower, caching is advised.\n// Customize the minifier through `Application.Minifier()`.\n// Usage:\n// app.Use(iris.Minify)\nfunc Minify(ctx Context) {\n\tw := ctx.Application().Minifier().ResponseWriter(ctx.ResponseWriter().Naive(), ctx.Request())\n\t// Note(@kataras):\n\t// We don't use defer w.Close()\n\t// because this response writer holds a sync.WaitGroup under the hoods\n\t// and we MUST be sure that its wg.Wait is called on request cancelation\n\t// and not in the end of handlers chain execution\n\t// (which if running a time-consuming task it will delay its resource release).\n\tctx.OnCloseErr(w.Close)\n\tctx.ResponseWriter().SetWriter(w)\n\tctx.Next()\n}\n\n// Minifier returns the minifier instance.\n// By default it can minifies:\n// - text/html\n// - text/css\n// - image/svg+xml\n// - application/text(javascript, ecmascript, json, xml).\n// Use that instance to add custom Minifiers before server ran.\nfunc (app *Application) Minifier() *minify.M {\n\treturn app.minifier\n}\n\n// RegisterView registers a view engine for the application.\n// Children can register their own too. If no Party view Engine is registered\n// then this one will be used to render the templates instead.\nfunc (app *Application) RegisterView(viewEngine view.Engine) {\n\tapp.view.Register(viewEngine)\n}\n\n// View executes and writes the result of a template file to the writer.\n//\n// First parameter is the writer to write the parsed template.\n// Second parameter is the relative, to templates directory, template filename, including extension.\n// Third parameter is the layout, can be empty string.\n// Forth parameter is the bindable data to the template, can be nil.\n//\n// Use context.View to render templates to the client instead.\n// Returns an error on failure, otherwise nil.\nfunc (app *Application) View(writer io.Writer, filename string, layout string, bindingData interface{}) error {\n\tif !app.view.Registered() {\n\t\terr := errors.New(\"view engine is missing, use `RegisterView`\")\n\t\tapp.logger.Error(err)\n\t\treturn err\n\t}\n\n\treturn app.view.ExecuteWriter(writer, filename, layout, bindingData)\n}\n\n// GetContextPool returns the Iris sync.Pool which holds the contexts values.\n// Iris automatically releases the request context, so you don't have to use it.\n// It's only useful to manually release the context on cases that connection\n// is hijacked by a third-party middleware and the http handler return too fast.\nfunc (app *Application) GetContextPool() *context.Pool {\n\treturn app.ContextPool\n}\n\n// SetContextErrorHandler can optionally register a handler to handle\n// and fire a customized error body to the client on JSON write failures.\n//\n// ExampleCode:\n//\n//\t type contextErrorHandler struct{}\n//\t func (e *contextErrorHandler) HandleContextError(ctx iris.Context, err error) {\n//\t\t errors.HandleError(ctx, err)\n//\t }\n//\t ...\n//\t app.SetContextErrorHandler(new(contextErrorHandler))\nfunc (app *Application) SetContextErrorHandler(errHandler context.ErrorHandler) *Application {\n\tapp.contextErrorHandler = errHandler\n\treturn app\n}\n\n// GetContextErrorHandler returns the handler which handles errors\n// on JSON write failures.\nfunc (app *Application) GetContextErrorHandler() context.ErrorHandler {\n\treturn app.contextErrorHandler\n}\n\n// ConfigureHost accepts one or more `host#Configuration`, these configurators functions\n// can access the host created by `app.Run` or `app.Listen`,\n// they're being executed when application is ready to being served to the public.\n//\n// It's an alternative way to interact with a host that is automatically created by\n// `app.Run`.\n//\n// These \"configurators\" can work side-by-side with the `iris#Addr, iris#Server, iris#TLS, iris#AutoTLS, iris#Listener`\n// final arguments(\"hostConfigs\") too.\n//\n// Note that these application's host \"configurators\" will be shared with the rest of\n// the hosts that this app will may create (using `app.NewHost`), meaning that\n// `app.NewHost` will execute these \"configurators\" everytime that is being called as well.\n//\n// These \"configurators\" should be registered before the `app.Run` or `host.Serve/Listen` functions.\nfunc (app *Application) ConfigureHost(configurators ...host.Configurator) *Application {\n\tapp.mu.Lock()\n\tapp.hostConfigurators = append(app.hostConfigurators, configurators...)\n\tapp.mu.Unlock()\n\treturn app\n}\n\nconst serverLoggerPrefix = \"[HTTP Server] \"\n\ntype customHostServerLogger struct { // see #1875\n\tparent     io.Writer\n\tignoreLogs [][]byte\n}\n\nvar newLineBytes = []byte(\"\\n\")\n\nfunc newCustomHostServerLogger(w io.Writer, ignoreLogs []string) *customHostServerLogger {\n\tprefixAsByteSlice := []byte(serverLoggerPrefix)\n\n\t// build the ignore lines.\n\tignoreLogsAsByteSlice := make([][]byte, 0, len(ignoreLogs))\n\tfor _, s := range ignoreLogs {\n\t\tignoreLogsAsByteSlice = append(ignoreLogsAsByteSlice, append(prefixAsByteSlice, []byte(s)...)) // append([]byte(s), newLineBytes...)\n\t}\n\n\treturn &customHostServerLogger{\n\t\tparent:     w,\n\t\tignoreLogs: ignoreLogsAsByteSlice,\n\t}\n}\n\nfunc (l *customHostServerLogger) Write(p []byte) (int, error) {\n\tfor _, ignoredLogBytes := range l.ignoreLogs {\n\t\tif bytes.Equal(bytes.TrimSuffix(p, newLineBytes), ignoredLogBytes) {\n\t\t\treturn 0, nil\n\t\t}\n\t}\n\n\treturn l.parent.Write(p)\n}\n\n// this may change during parallel jobs (see Application.NonBlocking & Wait).\nfunc (app *Application) getVHost() string {\n\tapp.mu.RLock()\n\tvhost := app.config.VHost\n\tapp.mu.RUnlock()\n\treturn vhost\n}\n\nfunc (app *Application) setVHost(vhost string) {\n\tapp.mu.Lock()\n\tapp.config.VHost = vhost\n\tapp.mu.Unlock()\n}\n\n// NewHost accepts a standard *http.Server object,\n// completes the necessary missing parts of that \"srv\"\n// and returns a new, ready-to-use, host (supervisor).\nfunc (app *Application) NewHost(srv *http.Server) *host.Supervisor {\n\tif app.getVHost() == \"\" { // vhost now is useful for router subdomain on wildcard subdomains,\n\t\t// in order to correct decide what to do on:\n\t\t// mydomain.com -> invalid\n\t\t// localhost -> invalid\n\t\t// sub.mydomain.com -> valid\n\t\t// sub.localhost -> valid\n\t\t// we need the host (without port if 80 or 443) in order to validate these, so:\n\t\tapp.setVHost(netutil.ResolveVHost(srv.Addr))\n\t} else {\n\t\tcontext.GetDomain = func(_ string) string { // #1886\n\t\t\treturn app.config.VHost // GetVHost: here we don't need mutex protection as it's request-time and all modifications are already made.\n\t\t}\n\t} // before lock.\n\n\tapp.mu.Lock()\n\tdefer app.mu.Unlock()\n\n\t// set the server's handler to the framework's router\n\tif srv.Handler == nil {\n\t\tsrv.Handler = app.Router\n\t}\n\n\t// check if different ErrorLog provided, if not bind it with the framework's logger.\n\tif srv.ErrorLog == nil {\n\t\tserverLogger := newCustomHostServerLogger(app.logger.Printer.Output, app.config.IgnoreServerErrors)\n\t\tsrv.ErrorLog = log.New(serverLogger, serverLoggerPrefix, 0)\n\t}\n\n\tif addr := srv.Addr; addr == \"\" {\n\t\taddr = \":8080\"\n\t\tif len(app.Hosts) > 0 {\n\t\t\tif v := app.Hosts[0].Server.Addr; v != \"\" {\n\t\t\t\taddr = v\n\t\t\t}\n\t\t}\n\n\t\tsrv.Addr = addr\n\t}\n\n\t// app.logger.Debugf(\"Host: addr is %s\", srv.Addr)\n\n\t// create the new host supervisor\n\t// bind the constructed server and return it\n\tsu := host.New(srv)\n\t// app.logger.Debugf(\"Host: virtual host is %s\", app.config.VHost)\n\n\t// the below schedules some tasks that will run among the server\n\n\tif !app.config.DisableStartupLog {\n\t\tprinter := app.logger.Printer.Output\n\t\thostPrinter := host.WriteStartupLogOnServe(printer)\n\t\tif len(app.Hosts) == 0 { // print the version info on the first running host.\n\t\t\tsu.RegisterOnServe(func(h host.TaskHost) {\n\t\t\t\thasBuildInfo := BuildTime != \"\" && BuildRevision != \"\"\n\t\t\t\ttab := \" \"\n\t\t\t\tif hasBuildInfo {\n\t\t\t\t\ttab = \"   \"\n\t\t\t\t}\n\t\t\t\tfmt.Fprintf(printer, \"Iris Version:%s%s\\n\", tab, Version)\n\n\t\t\t\tif hasBuildInfo {\n\t\t\t\t\tfmt.Fprintf(printer, \"Build Time:     %s\\nBuild Revision: %s\\n\", BuildTime, BuildRevision)\n\t\t\t\t}\n\t\t\t\tfmt.Fprintln(printer)\n\n\t\t\t\thostPrinter(h)\n\t\t\t})\n\t\t} else {\n\t\t\tsu.RegisterOnServe(hostPrinter)\n\t\t}\n\n\t\t// app.logger.Debugf(\"Host: register startup notifier\")\n\t}\n\n\tif !app.config.DisableInterruptHandler {\n\t\t// when CTRL/CMD+C pressed.\n\t\tshutdownTimeout := 10 * time.Second\n\t\tRegisterOnInterrupt(host.ShutdownOnInterrupt(su, shutdownTimeout))\n\t\t// app.logger.Debugf(\"Host: register server shutdown on interrupt(CTRL+C/CMD+C)\")\n\t}\n\n\tsu.IgnoredErrors = append(su.IgnoredErrors, app.config.IgnoreServerErrors...)\n\tif len(su.IgnoredErrors) > 0 {\n\t\tapp.logger.Debugf(\"Host: server will ignore the following errors: %s\", su.IgnoredErrors)\n\t}\n\n\tsu.Configure(app.hostConfigurators...)\n\n\tapp.Hosts = append(app.Hosts, su)\n\n\treturn su\n}\n\n// func (app *Application) OnShutdown(closers ...func()) {\n// \tfor _,cb := range closers {\n// \t\tif cb == nil {\n// \t\t\tcontinue\n// \t\t}\n// \t\tRegisterOnInterrupt(cb)\n// \t}\n// }\n\n// Shutdown gracefully terminates all the application's server hosts and any tunnels.\n// Returns an error on the first failure, otherwise nil.\nfunc (app *Application) Shutdown(ctx stdContext.Context) error {\n\tapp.mu.Lock()\n\tdefer app.mu.Unlock()\n\tdefer app.setRunError(ErrServerClosed) // make sure to set the error so any .Wait calls return.\n\n\tfor i, su := range app.Hosts {\n\t\tapp.logger.Debugf(\"Host[%d]: Shutdown now\", i)\n\t\tif err := su.Shutdown(ctx); err != nil {\n\t\t\tapp.logger.Debugf(\"Host[%d]: Error while trying to shutdown\", i)\n\t\t\treturn err\n\t\t}\n\t}\n\n\tfor _, t := range app.config.Tunneling.Tunnels {\n\t\tif t.Name == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tif err := app.config.Tunneling.StopTunnel(t); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// Build sets up, once, the framework.\n// It builds the default router with its default macros\n// and the template functions that are very-closed to iris.\n//\n// If error occurred while building the Application, the returns type of error will be an *errgroup.Group\n// which let the callers to inspect the errors and cause, usage:\n//\n// import \"github.com/kataras/iris/v12/core/errgroup\"\n//\n//\terrgroup.Walk(app.Build(), func(typ interface{}, err error) {\n//\t\tapp.Logger().Errorf(\"%s: %s\", typ, err)\n//\t})\nfunc (app *Application) Build() error {\n\tif app.builded {\n\t\treturn nil\n\t}\n\n\tif cb := app.OnBuild; cb != nil {\n\t\tif err := cb(); err != nil {\n\t\t\treturn fmt.Errorf(\"build: %w\", err)\n\t\t}\n\t}\n\n\t// start := time.Now()\n\tapp.builded = true // even if fails.\n\n\t// check if a prior app.Logger().SetLevel called and if not\n\t// then set the defined configuration's log level.\n\tif app.logger.Level == golog.InfoLevel /* the default level */ {\n\t\tapp.logger.SetLevel(app.config.LogLevel)\n\t}\n\n\tif app.defaultMode { // the app.I18n and app.View will be not available until Build.\n\t\tif !app.I18n.Loaded() {\n\t\t\tfor _, s := range []string{\"./locales/*/*\", \"./locales/*\", \"./translations\"} {\n\t\t\t\tif _, err := os.Stat(s); err != nil {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tif err := app.I18n.Load(s); err != nil {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tapp.I18n.SetDefault(\"en-US\")\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tif !app.view.Registered() {\n\t\t\tfor _, s := range []string{\"./views\", \"./templates\", \"./web/views\"} {\n\t\t\t\tif _, err := os.Stat(s); err != nil {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tapp.RegisterView(HTML(s, \".html\"))\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\tif app.I18n.Loaded() {\n\t\t// {{ tr \"lang\" \"key\" arg1 arg2 }}\n\t\tapp.view.AddFunc(\"tr\", app.I18n.Tr)\n\t\tapp.Router.PrependRouterWrapper(app.I18n.Wrapper())\n\t}\n\n\tif app.view.Registered() {\n\t\tapp.logger.Debugf(\"Application: view engine %q is registered\", app.view.Name())\n\t\t// view engine\n\t\t// here is where we declare the closed-relative framework functions.\n\t\t// Each engine has their defaults, i.e yield,render,render_r,partial, params...\n\t\trv := router.NewRoutePathReverser(app.APIBuilder)\n\t\tapp.view.AddFunc(\"urlpath\", rv.Path)\n\t\t// app.view.AddFunc(\"url\", rv.URL)\n\t\tif err := app.view.Load(); err != nil {\n\t\t\treturn fmt.Errorf(\"build: view engine: %v\", err)\n\t\t}\n\t}\n\n\tif !app.Router.Downgraded() {\n\t\t// router\n\t\tif _, err := injectLiveReload(app); err != nil {\n\t\t\treturn fmt.Errorf(\"build: inject live reload: failed: %v\", err)\n\t\t}\n\n\t\tif app.config.ForceLowercaseRouting {\n\t\t\t// This should always be executed first.\n\t\t\tapp.Router.PrependRouterWrapper(func(w http.ResponseWriter, r *http.Request, next http.HandlerFunc) {\n\t\t\t\tr.Host = strings.ToLower(r.Host)\n\t\t\t\tr.URL.Host = strings.ToLower(r.URL.Host)\n\t\t\t\tr.URL.Path = strings.ToLower(r.URL.Path)\n\t\t\t\tnext(w, r)\n\t\t\t})\n\t\t}\n\n\t\t// create the request handler, the default routing handler\n\t\trouterHandler := router.NewDefaultHandler(app.config, app.logger)\n\t\terr := app.Router.BuildRouter(app.ContextPool, routerHandler, app.APIBuilder, false)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"build: router: %w\", err)\n\t\t}\n\t\tapp.HTTPErrorHandler = routerHandler\n\n\t\tif app.config.Timeout > 0 {\n\t\t\tapp.Router.SetTimeoutHandler(app.config.Timeout, app.config.TimeoutMessage)\n\n\t\t\tapp.ConfigureHost(func(su *Supervisor) {\n\t\t\t\tif su.Server.ReadHeaderTimeout == 0 {\n\t\t\t\t\tsu.Server.ReadHeaderTimeout = app.config.Timeout + 5*time.Second\n\t\t\t\t}\n\n\t\t\t\tif su.Server.ReadTimeout == 0 {\n\t\t\t\t\tsu.Server.ReadTimeout = app.config.Timeout + 10*time.Second\n\t\t\t\t}\n\n\t\t\t\tif su.Server.WriteTimeout == 0 {\n\t\t\t\t\tsu.Server.WriteTimeout = app.config.Timeout + 15*time.Second\n\t\t\t\t}\n\n\t\t\t\tif su.Server.IdleTimeout == 0 {\n\t\t\t\t\tsu.Server.IdleTimeout = app.config.Timeout + 25*time.Second\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\t// re-build of the router from outside can be done with\n\t\t// app.RefreshRouter()\n\t}\n\n\t// if end := time.Since(start); end.Seconds() > 5 {\n\t// app.logger.Debugf(\"Application: build took %s\", time.Since(start))\n\n\treturn nil\n}\n\n// Runner is just an interface which accepts the framework instance\n// and returns an error.\n//\n// It can be used to register a custom runner with `Run` in order\n// to set the framework's server listen action.\n//\n// Currently `Runner` is being used to declare the builtin server listeners.\n//\n// See `Run` for more.\ntype Runner func(*Application) error\n\n// Listener can be used as an argument for the `Run` method.\n// It can start a server with a custom net.Listener via server's `Serve`.\n//\n// Second argument is optional, it accepts one or more\n// `func(*host.Configurator)` that are being executed\n// on that specific host that this function will create to start the server.\n// Via host configurators you can configure the back-end host supervisor,\n// i.e to add events for shutdown, serve or error.\n// An example of this use case can be found at:\n// https://github.com/kataras/iris/blob/main/_examples/http-server/notify-on-shutdown/main.go\n// Look at the `ConfigureHost` too.\n//\n// See `Run` for more.\nfunc Listener(l net.Listener, hostConfigs ...host.Configurator) Runner {\n\treturn func(app *Application) error {\n\t\tapp.config.SetVHost(netutil.ResolveVHost(l.Addr().String()))\n\t\treturn app.NewHost(&http.Server{Addr: l.Addr().String()}).\n\t\t\tConfigure(hostConfigs...).\n\t\t\tServe(l)\n\t}\n}\n\n// Server can be used as an argument for the `Run` method.\n// It can start a server with a *http.Server.\n//\n// Second argument is optional, it accepts one or more\n// `func(*host.Configurator)` that are being executed\n// on that specific host that this function will create to start the server.\n// Via host configurators you can configure the back-end host supervisor,\n// i.e to add events for shutdown, serve or error.\n// An example of this use case can be found at:\n// https://github.com/kataras/iris/blob/main/_examples/http-server/notify-on-shutdown/main.go\n// Look at the `ConfigureHost` too.\n//\n// See `Run` for more.\nfunc Server(srv *http.Server, hostConfigs ...host.Configurator) Runner {\n\treturn func(app *Application) error {\n\t\treturn app.NewHost(srv).\n\t\t\tConfigure(hostConfigs...).\n\t\t\tListenAndServe()\n\t}\n}\n\n// Addr can be used as an argument for the `Run` method.\n// It accepts a host address which is used to build a server\n// and a listener which listens on that host and port.\n//\n// Addr should have the form of [host]:port, i.e localhost:8080 or :8080.\n//\n// Second argument is optional, it accepts one or more\n// `func(*host.Configurator)` that are being executed\n// on that specific host that this function will create to start the server.\n// Via host configurators you can configure the back-end host supervisor,\n// i.e to add events for shutdown, serve or error.\n// An example of this use case can be found at:\n// https://github.com/kataras/iris/blob/main/_examples/http-server/notify-on-shutdown/main.go\n// Look at the `ConfigureHost` too.\n//\n// See `Run` for more.\nfunc Addr(addr string, hostConfigs ...host.Configurator) Runner {\n\treturn func(app *Application) error {\n\t\treturn app.NewHost(&http.Server{Addr: addr}).\n\t\t\tConfigure(hostConfigs...).\n\t\t\tListenAndServe()\n\t}\n}\n\nvar (\n\t// TLSNoRedirect is a `host.Configurator` which can be passed as last argument\n\t// to the `TLS` runner function. It disables the automatic\n\t// registration of redirection from \"http://\" to \"https://\" requests.\n\t// Applies only to the `TLS` runner.\n\t// See `AutoTLSNoRedirect` to register a custom fallback server for `AutoTLS` runner.\n\tTLSNoRedirect = func(su *host.Supervisor) { su.NoRedirect() }\n\t// AutoTLSNoRedirect is a `host.Configurator`.\n\t// It registers a fallback HTTP/1.1 server for the `AutoTLS` one.\n\t// The function accepts the letsencrypt wrapper and it\n\t// should return a valid instance of http.Server which its handler should be the result\n\t// of the \"acmeHandler\" wrapper.\n\t// Usage:\n\t//\t getServer := func(acme func(http.Handler) http.Handler) *http.Server {\n\t//\t     srv := &http.Server{Handler: acme(yourCustomHandler), ...otherOptions}\n\t//\t     go srv.ListenAndServe()\n\t//\t     return srv\n\t//   }\n\t//   app.Run(iris.AutoTLS(\":443\", \"example.com example2.com\", \"mail@example.com\", getServer))\n\t//\n\t// Note that if Server.Handler is nil then the server is automatically ran\n\t// by the framework and the handler set to automatic redirection, it's still\n\t// a valid option when the caller wants just to customize the server's fields (except Addr).\n\t// With this host configurator the caller can customize the server\n\t// that letsencrypt relies to perform the challenge.\n\t// LetsEncrypt Certification Manager relies on http://example.com/.well-known/acme-challenge/<TOKEN>.\n\tAutoTLSNoRedirect = func(getFallbackServer func(acmeHandler func(fallback http.Handler) http.Handler) *http.Server) host.Configurator {\n\t\treturn func(su *host.Supervisor) {\n\t\t\tsu.NoRedirect()\n\t\t\tsu.Fallback = getFallbackServer\n\t\t}\n\t}\n)\n\n// TLS can be used as an argument for the `Run` method.\n// It will start the Application's secure server.\n//\n// Use it like you used to use the http.ListenAndServeTLS function.\n//\n// Addr should have the form of [host]:port, i.e localhost:443 or :443.\n// \"certFileOrContents\" & \"keyFileOrContents\" should be filenames with their extensions\n// or raw contents of the certificate and the private key.\n//\n// Last argument is optional, it accepts one or more\n// `func(*host.Configurator)` that are being executed\n// on that specific host that this function will create to start the server.\n// Via host configurators you can configure the back-end host supervisor,\n// i.e to add events for shutdown, serve or error.\n// An example of this use case can be found at:\n// https://github.com/kataras/iris/blob/main/_examples/http-server/notify-on-shutdown/main.go\n// Look at the `ConfigureHost` too.\n//\n// See `Run` for more.\nfunc TLS(addr string, certFileOrContents, keyFileOrContents string, hostConfigs ...host.Configurator) Runner {\n\treturn func(app *Application) error {\n\t\treturn app.NewHost(&http.Server{Addr: addr}).\n\t\t\tConfigure(hostConfigs...).\n\t\t\tListenAndServeTLS(certFileOrContents, keyFileOrContents)\n\t}\n}\n\n// AutoTLS can be used as an argument for the `Run` method.\n// It will start the Application's secure server using\n// certifications created on the fly by the \"autocert\" golang/x package,\n// so localhost may not be working, use it at \"production\" machine.\n//\n// Addr should have the form of [host]:port, i.e mydomain.com:443.\n//\n// The whitelisted domains are separated by whitespace in \"domain\" argument,\n// i.e \"iris-go.com\", can be different than \"addr\".\n// If empty, all hosts are currently allowed. This is not recommended,\n// as it opens a potential attack where clients connect to a server\n// by IP address and pretend to be asking for an incorrect host name.\n// Manager will attempt to obtain a certificate for that host, incorrectly,\n// eventually reaching the CA's rate limit for certificate requests\n// and making it impossible to obtain actual certificates.\n//\n// For an \"e-mail\" use a non-public one, letsencrypt needs that for your own security.\n//\n// Note: `AutoTLS` will start a new server for you\n// which will redirect all http versions to their https, including subdomains as well.\n//\n// Last argument is optional, it accepts one or more\n// `func(*host.Configurator)` that are being executed\n// on that specific host that this function will create to start the server.\n// Via host configurators you can configure the back-end host supervisor,\n// i.e to add events for shutdown, serve or error.\n// An example of this use case can be found at:\n// https://github.com/kataras/iris/blob/main/_examples/http-server/notify-on-shutdown/main.go\n// Look at the `ConfigureHost` too.\n//\n// Usage:\n// app.Run(iris.AutoTLS(\"iris-go.com:443\", \"iris-go.com www.iris-go.com\", \"mail@example.com\"))\n//\n// See `Run` and `core/host/Supervisor#ListenAndServeAutoTLS` for more.\nfunc AutoTLS(\n\taddr string,\n\tdomain string, email string,\n\thostConfigs ...host.Configurator,\n) Runner {\n\treturn func(app *Application) error {\n\t\treturn app.NewHost(&http.Server{Addr: addr}).\n\t\t\tConfigure(hostConfigs...).\n\t\t\tListenAndServeAutoTLS(domain, email, \"letscache\")\n\t}\n}\n\n// Raw can be used as an argument for the `Run` method.\n// It accepts any (listen) function that returns an error,\n// this function should be block and return an error\n// only when the server exited or a fatal error caused.\n//\n// With this option you're not limited to the servers\n// that iris can run by-default.\n//\n// See `Run` for more.\nfunc Raw(f func() error) Runner {\n\treturn func(app *Application) error {\n\t\tapp.logger.Debugf(\"HTTP Server will start from unknown, external function\")\n\t\treturn f()\n\t}\n}\n\nvar (\n\t// ErrServerClosed is logged by the standard net/http server when the server is terminated.\n\t// Ignore it by passing this error to the `iris.WithoutServerError` configurator\n\t// on `Application.Run/Listen` method.\n\t//\n\t// An alias of the `http#ErrServerClosed`.\n\tErrServerClosed = http.ErrServerClosed\n\n\t// ErrURLQuerySemicolon is logged by the standard net/http server when\n\t// the request contains a semicolon (;) wihch, after go1.17 it's not used as a key-value separator character.\n\t//\n\t// Ignore it by passing this error to the `iris.WithoutServerError` configurator\n\t// on `Application.Run/Listen` method.\n\t//\n\t// An alias of the `http#ErrServerClosed`.\n\tErrURLQuerySemicolon = errors.New(\"http: URL query contains semicolon, which is no longer a supported separator; parts of the query may be stripped when parsed; see golang.org/issue/25192\")\n)\n\n// Listen builds the application and starts the server\n// on the TCP network address \"host:port\" which\n// handles requests on incoming connections.\n//\n// Listen always returns a non-nil error except\n// when NonBlocking option is being passed, so the error goes to the Wait method.\n// Ignore specific errors by using an `iris.WithoutServerError(iris.ErrServerClosed)`\n// as a second input argument.\n//\n// Listen is a shortcut of `app.Run(iris.Addr(hostPort, withOrWithout...))`.\n// See `Run` for details.\nfunc (app *Application) Listen(hostPort string, withOrWithout ...Configurator) error {\n\treturn app.Run(Addr(hostPort), withOrWithout...)\n}\n\n// Run builds the framework and starts the desired `Runner` with or without configuration edits.\n//\n// Run should be called only once per Application instance, it blocks like http.Server.\n//\n// If more than one server needed to run on the same iris instance\n// then create a new host and run it manually by `go NewHost(*http.Server).Serve/ListenAndServe` etc...\n// or use an already created host:\n// h := NewHost(*http.Server)\n// Run(Raw(h.ListenAndServe), WithCharset(\"utf-8\"), WithRemoteAddrHeader(\"CF-Connecting-IP\"))\n//\n// The Application can go online with any type of server or iris's host with the help of\n// the following runners:\n// `Listener`, `Server`, `Addr`, `TLS`, `AutoTLS` and `Raw`.\nfunc (app *Application) Run(serve Runner, withOrWithout ...Configurator) error {\n\tapp.Configure(withOrWithout...)\n\n\tif err := app.Build(); err != nil {\n\t\tapp.logger.Error(err)\n\t\treturn err\n\t}\n\n\tapp.ConfigureHost(func(host *Supervisor) {\n\t\thost.SocketSharding = app.config.SocketSharding\n\t\thost.KeepAlive = app.config.KeepAlive\n\t})\n\n\tapp.tryStartTunneling()\n\n\tif len(app.Hosts) > 0 {\n\t\tapp.logger.Debugf(\"Application: running using %d host(s)\", len(app.Hosts)+1 /* +1 the current */)\n\t}\n\n\tif app.config.NonBlocking {\n\t\tgo func() {\n\t\t\terr := app.serve(serve)\n\t\t\tif err != nil {\n\t\t\t\tapp.setRunError(err)\n\t\t\t}\n\t\t}()\n\n\t\treturn nil\n\t}\n\n\t// this will block until an error(unless supervisor's DeferFlow called from a Task)\n\t// or NonBlocking was passed (see above).\n\treturn app.serve(serve)\n}\n\nfunc (app *Application) serve(serve Runner) error {\n\terr := serve(app)\n\tif err != nil {\n\t\tapp.logger.Error(err)\n\t}\n\treturn err\n}\n\nfunc (app *Application) setRunError(err error) {\n\tapp.runErrorMu.Lock()\n\tapp.runError = err\n\tapp.runErrorMu.Unlock()\n}\n\nfunc (app *Application) getRunError() error {\n\tapp.runErrorMu.RLock()\n\terr := app.runError\n\tapp.runErrorMu.RUnlock()\n\treturn err\n}\n\n// Wait blocks the main goroutine until the server application is up and running.\n// Useful only when `Run` is called with `iris.NonBlocking()` option.\nfunc (app *Application) Wait(ctx stdContext.Context) error {\n\tif !app.config.NonBlocking {\n\t\treturn nil\n\t}\n\n\t// First check if there is an error already from the app.Run.\n\tif err := app.getRunError(); err != nil {\n\t\treturn err\n\t}\n\n\t// Set the base for exponential backoff.\n\tbase := 2.0\n\n\t// Get the maximum number of retries by context or force to 7 retries.\n\tvar maxRetries int\n\t// Get the deadline of the context.\n\tif deadline, ok := ctx.Deadline(); ok {\n\t\tnow := time.Now()\n\t\ttimeout := deadline.Sub(now)\n\n\t\tmaxRetries = getMaxRetries(timeout, base)\n\t} else {\n\t\tmaxRetries = 7 // 256 seconds max.\n\t}\n\n\t// Set the initial retry interval.\n\tretryInterval := time.Second\n\n\treturn app.tryConnect(ctx, maxRetries, retryInterval, base)\n}\n\n// getMaxRetries calculates the maximum number of retries from the retry interval and the base.\nfunc getMaxRetries(retryInterval time.Duration, base float64) int {\n\t// Convert the retry interval to seconds.\n\tseconds := retryInterval.Seconds()\n\t// Apply the inverse formula.\n\tretries := math.Log(seconds)/math.Log(base) - 1\n\treturn int(math.Round(retries))\n}\n\n// tryConnect tries to connect to the server with the given context and retry parameters.\nfunc (app *Application) tryConnect(ctx stdContext.Context, maxRetries int, retryInterval time.Duration, base float64) error {\n\t// Try to connect to the server in a loop.\n\tfor i := 0; i < maxRetries; i++ {\n\t\t// Check the context before each attempt.\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\t// Context is canceled, return the context error.\n\t\t\treturn ctx.Err()\n\t\tdefault:\n\t\t\taddress := app.getVHost() // Get this server's listening address.\n\t\t\tif address == \"\" {\n\t\t\t\ti-- // Note that this may be modified at another go routine of the serve method. So it may be empty at first chance. So retry fetching the VHost every 1 second.\n\t\t\t\ttime.Sleep(time.Second)\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Context is not canceled, proceed with the attempt.\n\t\t\tconn, err := net.Dial(\"tcp\", address)\n\t\t\tif err == nil {\n\t\t\t\t// Connection successful, close the connection and return nil.\n\t\t\t\tconn.Close()\n\t\t\t\treturn nil // exit.\n\t\t\t} // ignore error.\n\n\t\t\t// Connection failed, wait for the retry interval and try again.\n\t\t\ttime.Sleep(retryInterval)\n\t\t\t// After each failed attempt, check the server Run's error again.\n\t\t\tif err := app.getRunError(); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\t// Increase the retry interval by the base raised to the power of the number of attempts.\n\t\t\t/*\n\t\t\t\t0\t2 seconds\n\t\t\t\t1\t4 seconds\n\t\t\t\t2\t8 seconds\n\t\t\t\t3\t~16 seconds\n\t\t\t\t4\t~32 seconds\n\t\t\t\t5\t~64 seconds\n\t\t\t\t6\t~128 seconds\n\t\t\t\t7\t~256 seconds\n\t\t\t\t8\t~512 seconds\n\t\t\t\t...\n\t\t\t*/\n\t\t\tretryInterval = time.Duration(math.Pow(base, float64(i+1))) * time.Second\n\t\t}\n\t}\n\t// All attempts failed, return an error.\n\treturn fmt.Errorf(\"failed to connect to the server after %d retries\", maxRetries)\n}\n\n// https://ngrok.com/docs\nfunc (app *Application) tryStartTunneling() {\n\tif len(app.config.Tunneling.Tunnels) == 0 {\n\t\treturn\n\t}\n\n\tapp.ConfigureHost(func(su *host.Supervisor) {\n\t\tsu.RegisterOnServe(func(h host.TaskHost) {\n\t\t\tpublicAddrs, err := tunnel.Start(app.config.Tunneling)\n\t\t\tif err != nil {\n\t\t\t\tapp.logger.Errorf(\"Host: tunneling error: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tpublicAddr := publicAddrs[0]\n\t\t\t// to make subdomains resolution still based on this new remote, public addresses.\n\t\t\tapp.setVHost(publicAddr[strings.Index(publicAddr, \"://\")+3:])\n\n\t\t\tdirectLog := []byte(fmt.Sprintf(\"• Public Address: %s\\n\", publicAddr))\n\t\t\tapp.logger.Printer.Write(directLog) // nolint:errcheck\n\t\t})\n\t})\n}\n"
        },
        {
          "name": "iris_guide.go",
          "type": "blob",
          "size": 16.2,
          "content": "package iris\n\nimport (\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/kataras/iris/v12/context\"\n\t\"github.com/kataras/iris/v12/core/router\"\n\n\t\"github.com/kataras/iris/v12/middleware/cors\"\n\t\"github.com/kataras/iris/v12/middleware/modrevision\"\n\t\"github.com/kataras/iris/v12/middleware/recover\"\n\n\t\"github.com/kataras/iris/v12/x/errors\"\n)\n\n// NewGuide returns a simple Iris API builder.\n//\n// Example Code:\n/*\n   package main\n\n   import (\n       \"context\"\n       \"database/sql\"\n       \"time\"\n\n       \"github.com/kataras/iris/v12\"\n       \"github.com/kataras/iris/v12/x/errors\"\n   )\n\n   func main() {\n       iris.NewGuide().\n           AllowOrigin(\"*\").\n           Compression(true).\n           Health(true, \"development\", \"kataras\").\n           Timeout(0, 20*time.Second, 20*time.Second).\n           Middlewares().\n           Services(\n               // openDatabase(),\n               // NewSQLRepoRegistry,\n               NewMemRepoRegistry,\n               NewTestService,\n           ).\n           API(\"/tests\", new(TestAPI)).\n           Listen(\":80\")\n   }\n\n   // Recommendation: move it to /api/tests/api.go file.\n   type TestAPI struct {\n       TestService *TestService\n   }\n\n   func (api *TestAPI) Configure(r iris.Party) {\n       r.Get(\"/\", api.listTests)\n   }\n\n   func (api *TestAPI) listTests(ctx iris.Context) {\n       tests, err := api.TestService.ListTests(ctx)\n       if err != nil {\n           errors.Internal.LogErr(ctx, err)\n           return\n       }\n\n       ctx.JSON(tests)\n   }\n\n   // Recommendation: move it to /pkg/storage/sql/db.go file.\n   type DB struct {\n       *sql.DB\n   }\n\n   func openDatabase( your database configuration... ) *DB {\n       conn, err := sql.Open(...)\n       // handle error.\n       return &DB{DB: conn}\n   }\n\n   func (db *DB) Close() error {\n       return nil\n   }\n\n   // Recommendation: move it to /pkg/repository/registry.go file.\n   type RepoRegistry interface {\n       Tests() TestRepository\n\n       InTransaction(ctx context.Context, fn func(RepoRegistry) error) error\n   }\n\n   // Recommendation: move it to /pkg/repository/registry/memory.go file.\n   type repoRegistryMem struct {\n       tests TestRepository\n   }\n\n   func NewMemRepoRegistry() RepoRegistry {\n       return &repoRegistryMem{\n           tests: NewMemTestRepository(),\n       }\n   }\n\n   func (r *repoRegistryMem) Tests() TestRepository {\n       return r.tests\n   }\n\n   func (r *repoRegistryMem) InTransaction(ctx context.Context, fn func(RepoRegistry) error) error {\n       return nil\n   }\n\n   // Recommendation: move it to /pkg/repository/registry/sql.go file.\n   type repoRegistrySQL struct {\n       db *DB\n\n       tests TestRepository\n   }\n\n   func NewSQLRepoRegistry(db *DB) RepoRegistry {\n       return &repoRegistrySQL{\n           db:    db,\n           tests: NewSQLTestRepository(db),\n       }\n   }\n\n   func (r *repoRegistrySQL) Tests() TestRepository {\n       return r.tests\n   }\n\n   func (r *repoRegistrySQL) InTransaction(ctx context.Context, fn func(RepoRegistry) error) error {\n       return nil\n\n       // your own database transaction code, may look something like that:\n       // tx, err := r.db.BeginTx(ctx, nil)\n       // if err != nil {\n       //     return err\n       // }\n       // defer tx.Rollback()\n       // newRegistry := NewSQLRepoRegistry(tx)\n       // if err := fn(newRegistry);err!=nil{\n       // \treturn err\n       // }\n       // return tx.Commit()\n   }\n\n   // Recommendation: move it to /pkg/test/test.go\n   type Test struct {\n       Name string `db:\"name\"`\n   }\n\n   // Recommendation: move it to /pkg/test/repository.go\n   type TestRepository interface {\n       ListTests(ctx context.Context) ([]Test, error)\n   }\n\n   type testRepositoryMem struct {\n       tests []Test\n   }\n\n   func NewMemTestRepository() TestRepository {\n       list := []Test{\n           {Name: \"test1\"},\n           {Name: \"test2\"},\n           {Name: \"test3\"},\n       }\n\n       return &testRepositoryMem{\n           tests: list,\n       }\n   }\n\n   func (r *testRepositoryMem) ListTests(ctx context.Context) ([]Test, error) {\n       return r.tests, nil\n   }\n\n   type testRepositorySQL struct {\n       db *DB\n   }\n\n   func NewSQLTestRepository(db *DB) TestRepository {\n       return &testRepositorySQL{db: db}\n   }\n\n   func (r *testRepositorySQL) ListTests(ctx context.Context) ([]Test, error) {\n       query := `SELECT * FROM tests ORDER BY created_at;`\n\n       rows, err := r.db.QueryContext(ctx, query)\n       if err != nil {\n           return nil, err\n       }\n       defer rows.Close()\n\n       tests := make([]Test, 0)\n       for rows.Next() {\n           var t Test\n           if err := rows.Scan(&t.Name); err != nil {\n               return nil, err\n           }\n           tests = append(tests, t)\n       }\n\n       if err := rows.Err(); err != nil {\n           return nil, err\n       }\n\n       return tests, nil\n   }\n\n   // Recommendation: move it to /pkg/service/test_service.go file.\n   type TestService struct {\n       repos RepoRegistry\n   }\n\n   func NewTestService(registry RepoRegistry) *TestService {\n       return &TestService{\n           repos: registry,\n       }\n   }\n\n   func (s *TestService) ListTests(ctx context.Context) ([]Test, error) {\n       return s.repos.Tests().ListTests(ctx)\n   }\n*/\nfunc NewGuide() Guide {\n\treturn &step1{}\n}\n\ntype (\n\t// Guide is the simplify API builder.\n\t// It's a step-by-step builder which can be used to build an Iris Application\n\t// with the most common features.\n\tGuide interface {\n\t\t// AllowOrigin defines the CORS allowed domains.\n\t\t// Many can be splitted by comma.\n\t\t// If \"*\" is provided then all origins are accepted (use it for public APIs).\n\t\tAllowOrigin(originLine string) CompressionGuide\n\t}\n\n\t// CompressionGuide is the 2nd step of the Guide.\n\t// Compression (gzip or any other client requested) can be enabled or disabled.\n\tCompressionGuide interface {\n\t\t// Compression enables or disables the gzip (or any other client-preferred) compression algorithm\n\t\t// for response writes.\n\t\tCompression(b bool) HealthGuide\n\t}\n\n\t// HealthGuide is the 3rd step of the Guide.\n\t// Health enables the /health route.\n\tHealthGuide interface {\n\t\t// Health enables the /health route.\n\t\t// If \"env\" and \"developer\" are given, these fields will be populated to the client\n\t\t// through headers and environment on health route.\n\t\tHealth(b bool, env, developer string) TimeoutGuide\n\t}\n\n\t// TimeoutGuide is the 4th step of the Guide.\n\t// Timeout defines the http timeout, server read & write timeouts.\n\tTimeoutGuide interface {\n\t\t// Timeout defines the http timeout, server read & write timeouts.\n\t\tTimeout(requestResponseLife, read time.Duration, write time.Duration) MiddlewareGuide\n\t}\n\n\t// MiddlewareGuide is the 5th step of the Guide.\n\t// It registers one or more handlers to run before everything else (RouterMiddlewares) or\n\t// before registered routes (Middlewares).\n\tMiddlewareGuide interface {\n\t\t// RouterMiddlewares registers one or more handlers to run before everything else.\n\t\tRouterMiddlewares(handlers ...Handler) MiddlewareGuide\n\t\t// Middlewares registers one or more handlers to run before the requested route's handler.\n\t\tMiddlewares(handlers ...Handler) ServiceGuide\n\t}\n\n\t// ServiceGuide is the 6th step of the Guide.\n\t// It is used to register deferrable functions and, most importantly, dependencies that APIs can use.\n\tServiceGuide interface {\n\t\t// Deferrables registers one or more functions to be ran when the server is terminated.\n\t\tDeferrables(closers ...func()) ServiceGuide\n\t\t// Prefix sets the API Party prefix path.\n\t\t// Usage: WithPrefix(\"/api\").\n\t\tWithPrefix(prefixPath string) ServiceGuide\n\t\t// WithoutPrefix disables the API Party prefix path.\n\t\t// Usage: WithoutPrefix(), same as WithPrefix(\"\").\n\t\tWithoutPrefix() ServiceGuide\n\t\t// Services registers one or more dependencies that APIs can use.\n\t\tServices(deps ...interface{}) ApplicationBuilder\n\t}\n\t// ApplicationBuilder is the final step of the Guide.\n\t// It is used to register APIs controllers (PartyConfigurators) and\n\t// its Build, Listen and Run methods configure and build the actual Iris application\n\t// based on the previous steps.\n\tApplicationBuilder interface {\n\t\t// Handle registers a simple route on specific method and (dynamic) path.\n\t\t// It simply calls the Iris Application's Handle method.\n\t\t// Use the \"API\" method instead to keep the app organized.\n\t\tHandle(method, path string, handlers ...Handler) ApplicationBuilder\n\t\t// API registers a router which is responsible to serve the /api group.\n\t\tAPI(pathPrefix string, c ...router.PartyConfigurator) ApplicationBuilder\n\t\t// Build builds the application with the prior configuration and returns the\n\t\t// Iris Application instance for further customizations.\n\t\t//\n\t\t// Use \"Build\" before \"Listen\" or \"Run\" to apply further modifications\n\t\t// to the framework before starting the server. Calling \"Build\" is optional.\n\t\tBuild() *Application // optional call.\n\t\t// Listen calls the Application's Listen method which is a shortcut of Run(iris.Addr(\"hostPort\")).\n\t\t// Use \"Run\" instead if you need to customize the HTTP/2 server itself.\n\t\tListen(hostPort string, configurators ...Configurator) error // Listen OR Run.\n\t\t// Run calls the Application's Run method.\n\t\t// The 1st argument is a Runner (iris.Listener, iris.Server, iris.Addr, iris.TLS, iris.AutoTLS and iris.Raw).\n\t\t// The 2nd argument can be used to add custom configuration right before the server is up and running.\n\t\tRun(runner Runner, configurators ...Configurator) error\n\t}\n)\n\ntype step1 struct {\n\toriginLine string\n}\n\nfunc (s *step1) AllowOrigin(originLine string) CompressionGuide {\n\ts.originLine = originLine\n\treturn &step2{\n\t\tstep1: s,\n\t}\n}\n\ntype step2 struct {\n\tstep1 *step1\n\n\tenableCompression bool\n}\n\nfunc (s *step2) Compression(b bool) HealthGuide {\n\ts.enableCompression = b\n\treturn &step3{\n\t\tstep2: s,\n\t}\n}\n\ntype step3 struct {\n\tstep2 *step2\n\n\tenableHealth   bool\n\tenv, developer string\n}\n\nfunc (s *step3) Health(b bool, env, developer string) TimeoutGuide {\n\ts.enableHealth = b\n\ts.env, s.developer = env, developer\n\treturn &step4{\n\t\tstep3: s,\n\t}\n}\n\ntype step4 struct {\n\tstep3 *step3\n\n\thandlerTimeout time.Duration\n\n\tserverTimeoutRead  time.Duration\n\tserverTimeoutWrite time.Duration\n}\n\nfunc (s *step4) Timeout(requestResponseLife, read, write time.Duration) MiddlewareGuide {\n\ts.handlerTimeout = requestResponseLife\n\n\ts.serverTimeoutRead = read\n\ts.serverTimeoutWrite = write\n\treturn &step5{\n\t\tstep4: s,\n\t}\n}\n\ntype step5 struct {\n\tstep4 *step4\n\n\trouterMiddlewares []Handler // top-level router middlewares, fire even on 404s.\n\tmiddlewares       []Handler\n}\n\nfunc (s *step5) RouterMiddlewares(handlers ...Handler) MiddlewareGuide {\n\ts.routerMiddlewares = append(s.routerMiddlewares, handlers...)\n\treturn s\n}\n\nfunc (s *step5) Middlewares(handlers ...Handler) ServiceGuide {\n\ts.middlewares = handlers\n\n\treturn &step6{\n\t\tstep5:  s,\n\t\tprefix: getDefaultAPIPrefix(),\n\t}\n}\n\ntype step6 struct {\n\tstep5 *step5\n\n\tdeps []interface{}\n\t// derives from \"deps\".\n\tclosers []func()\n\t// derives from \"deps\".\n\tconfiguratorsAsDeps []Configurator\n\n\t// API Party optional prefix path.\n\t// If this is nil then it defaults to \"/api\" in order to keep backwards compatibility,\n\t// otherwise can be set to empty or a custom one.\n\tprefix *string\n}\n\nfunc (s *step6) Deferrables(closers ...func()) ServiceGuide {\n\ts.closers = append(s.closers, closers...)\n\treturn s\n}\n\nvar defaultAPIPrefix = \"/api\"\n\nfunc getDefaultAPIPrefix() *string {\n\treturn &defaultAPIPrefix\n}\n\n// WithPrefix sets the API Party prefix path.\n// Usage: WithPrefix(\"/api\").\nfunc (s *step6) WithPrefix(prefixPath string) ServiceGuide {\n\tif prefixPath == \"\" {\n\t\treturn s.WithoutPrefix()\n\t}\n\n\t*s.prefix = prefixPath\n\treturn s\n}\n\n// WithoutPrefix disables the API Party prefix path, same as WithPrefix(\"\").\n// Usage: WithoutPrefix()\nfunc (s *step6) WithoutPrefix() ServiceGuide {\n\ts.prefix = nil\n\treturn s\n}\n\nfunc (s *step6) getPrefix() string {\n\tif s.prefix == nil { // if WithoutPrefix called then API has no prefix.\n\t\treturn \"\"\n\t}\n\n\tapiPrefix := *s.prefix\n\tif apiPrefix == \"\" { // if not nil but empty (this shouldn't happen) then it defaults to \"/api\".\n\t\tapiPrefix = defaultAPIPrefix\n\t}\n\n\treturn apiPrefix\n}\n\nfunc (s *step6) Services(deps ...interface{}) ApplicationBuilder {\n\ts.deps = deps\n\tfor _, d := range deps {\n\t\tif d == nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tswitch cb := d.(type) {\n\t\tcase func():\n\t\t\ts.closers = append(s.closers, cb)\n\t\tcase func() error:\n\t\t\ts.closers = append(s.closers, func() { cb() })\n\t\tcase interface{ Close() }:\n\t\t\ts.closers = append(s.closers, cb.Close)\n\t\tcase interface{ Close() error }:\n\t\t\ts.closers = append(s.closers, func() {\n\t\t\t\tcb.Close()\n\t\t\t})\n\t\tcase Configurator:\n\t\t\ts.configuratorsAsDeps = append(s.configuratorsAsDeps, cb)\n\t\t}\n\t}\n\n\treturn &step7{\n\t\tstep6: s,\n\t}\n}\n\ntype step7 struct {\n\tstep6 *step6\n\n\tapp *Application\n\n\tm        map[string][]router.PartyConfigurator\n\thandlers []step7SimpleRoute\n}\n\ntype step7SimpleRoute struct {\n\tmethod, path string\n\thandlers     []Handler\n}\n\nfunc (s *step7) Handle(method, path string, handlers ...Handler) ApplicationBuilder {\n\ts.handlers = append(s.handlers, step7SimpleRoute{method: method, path: path, handlers: handlers})\n\treturn s\n}\n\nfunc (s *step7) API(prefix string, c ...router.PartyConfigurator) ApplicationBuilder {\n\tif s.m == nil {\n\t\ts.m = make(map[string][]router.PartyConfigurator)\n\t}\n\n\ts.m[prefix] = append(s.m[prefix], c...)\n\treturn s\n}\n\nfunc (s *step7) Build() *Application {\n\tif s.app != nil {\n\t\treturn s.app\n\t}\n\n\tapp := New()\n\tapp.SetContextErrorHandler(errors.DefaultContextErrorHandler)\n\tapp.Macros().SetErrorHandler(errors.DefaultPathParameterTypeErrorHandler)\n\n\trouteFilters := s.step6.step5.routerMiddlewares\n\tif !context.HandlerExists(routeFilters, errors.RecoveryHandler) {\n\t\t// If not errors.RecoveryHandler registered, then use the default one.\n\t\tapp.UseRouter(recover.New())\n\t}\n\n\tapp.UseRouter(routeFilters...)\n\tapp.UseRouter(func(ctx Context) {\n\t\tctx.Header(\"Server\", \"Iris\")\n\t\tif dev := s.step6.step5.step4.step3.developer; dev != \"\" {\n\t\t\tctx.Header(\"X-Developer\", dev)\n\t\t}\n\n\t\tctx.Next()\n\t})\n\n\tif allowOrigin := s.step6.step5.step4.step3.step2.step1.originLine; strings.TrimSpace(allowOrigin) != \"\" && allowOrigin != \"none\" {\n\t\tcorsMiddleware := cors.New().HandleErrorFunc(errors.FailedPrecondition.Err).AllowOrigin(allowOrigin).Handler()\n\t\tapp.UseRouter(corsMiddleware)\n\t}\n\n\tif s.step6.step5.step4.step3.step2.enableCompression {\n\t\tapp.Use(Compression)\n\t}\n\n\tfor _, middleware := range s.step6.step5.middlewares {\n\t\tif middleware == nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tapp.Use(middleware)\n\t}\n\n\tif configAsDeps := s.step6.configuratorsAsDeps; len(configAsDeps) > 0 {\n\t\tapp.Configure(configAsDeps...)\n\t}\n\n\tif s.step6.step5.step4.step3.enableHealth {\n\t\tapp.Get(\"/health\", modrevision.New(modrevision.Options{\n\t\t\tServerName: \"Iris Server\",\n\t\t\tEnv:        s.step6.step5.step4.step3.env,\n\t\t\tDeveloper:  s.step6.step5.step4.step3.developer,\n\t\t}))\n\t}\n\n\tif deps := s.step6.deps; len(deps) > 0 {\n\t\tapp.EnsureStaticBindings().RegisterDependency(deps...)\n\t}\n\n\tapiPrefix := s.step6.getPrefix()\n\tfor prefix, c := range s.m {\n\t\tapp.PartyConfigure(apiPrefix+prefix, c...)\n\t}\n\n\tfor _, route := range s.handlers {\n\t\tapp.Handle(route.method, route.path, route.handlers...)\n\t}\n\n\tif readTimeout := s.step6.step5.step4.serverTimeoutRead; readTimeout > 0 {\n\t\tapp.ConfigureHost(func(su *Supervisor) {\n\t\t\tsu.Server.ReadTimeout = readTimeout\n\t\t\tsu.Server.IdleTimeout = readTimeout\n\t\t\tif v, recommended := readTimeout/4, 5*time.Second; v > recommended {\n\t\t\t\tsu.Server.ReadHeaderTimeout = v\n\t\t\t} else {\n\t\t\t\tsu.Server.ReadHeaderTimeout = recommended\n\t\t\t}\n\t\t})\n\t}\n\n\tif writeTimeout := s.step6.step5.step4.serverTimeoutWrite; writeTimeout > 0 {\n\t\tapp.ConfigureHost(func(su *Supervisor) {\n\t\t\tsu.Server.WriteTimeout = writeTimeout\n\t\t})\n\t}\n\n\tvar defaultConfigurators = []Configurator{\n\t\tWithoutServerError(ErrServerClosed, ErrURLQuerySemicolon),\n\t\tWithOptimizations,\n\t\tWithRemoteAddrHeader(\n\t\t\t\"X-Real-Ip\",\n\t\t\t\"X-Forwarded-For\",\n\t\t\t\"CF-Connecting-IP\",\n\t\t\t\"True-Client-Ip\",\n\t\t\t\"X-Appengine-Remote-Addr\",\n\t\t),\n\t\tWithTimeout(s.step6.step5.step4.handlerTimeout),\n\t}\n\tapp.Configure(defaultConfigurators...)\n\n\ts.app = app\n\treturn app\n}\n\nfunc (s *step7) Listen(hostPort string, configurators ...Configurator) error {\n\treturn s.Run(Addr(hostPort), configurators...)\n}\n\nfunc (s *step7) Run(runner Runner, configurators ...Configurator) error {\n\tapp := s.Build()\n\n\tdefer func() {\n\t\t// they will be called on interrupt signals too,\n\t\t// because Iris has a builtin mechanism to call server's shutdown on interrupt.\n\t\tfor _, cb := range s.step6.closers {\n\t\t\tif cb == nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tcb()\n\t\t}\n\t}()\n\n\treturn app.Run(runner, configurators...)\n}\n"
        },
        {
          "name": "macro",
          "type": "tree",
          "content": null
        },
        {
          "name": "middleware",
          "type": "tree",
          "content": null
        },
        {
          "name": "mvc",
          "type": "tree",
          "content": null
        },
        {
          "name": "sessions",
          "type": "tree",
          "content": null
        },
        {
          "name": "versioning",
          "type": "tree",
          "content": null
        },
        {
          "name": "view",
          "type": "tree",
          "content": null
        },
        {
          "name": "websocket",
          "type": "tree",
          "content": null
        },
        {
          "name": "x",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}