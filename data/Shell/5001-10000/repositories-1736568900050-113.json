{
  "metadata": {
    "timestamp": 1736568900050,
    "page": 113,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gliderlabs/docker-alpine",
      "stars": 5709,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.052734375,
          "content": "/versions/**/rootfs.tar.gz\n/versions/**/rootfs.tar.xz\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.2685546875,
          "content": "Copyright (c) 2015, Glider Labs, LLC\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README-short.txt",
          "type": "blob",
          "size": 0.095703125,
          "content": "A minimal Docker image based on Alpine Linux with a complete package index and only 5 MB in size!\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.4794921875,
          "content": "# docker-alpine\n\n[![CircleCI](https://img.shields.io/circleci/project/github/gliderlabs/docker-alpine/release.svg)](https://circleci.com/gh/gliderlabs/docker-alpine)\n[![Docker Stars](https://img.shields.io/docker/stars/gliderlabs/alpine.svg)][hub]\n[![Docker Pulls](https://img.shields.io/docker/pulls/gliderlabs/alpine.svg)][hub]\n[![Slack](http://glider-slackin.herokuapp.com/badge.svg)][slack]\n\n\nA super small Docker image based on [Alpine Linux][alpine]. The image is only 5 MB and has access to a package repository that is much more complete than other BusyBox based images.\n\n## Why?\n\nDocker images today are big. Usually much larger than they need to be. There are a lot of ways to make them smaller, but the Docker populace still jumps to the `ubuntu` base image for most projects. The size savings over `ubuntu` and other bases are huge:\n\n```\nREPOSITORY          TAG           IMAGE ID          VIRTUAL SIZE\ngliderlabs/alpine   latest        9cfff538e583      4.803 MB\ndebian              latest        19134a8202e7      123.1 MB\nubuntu              latest        104bec311bcd      129 MB\ncentos              latest        67591570dd29      191.8 MB\n```\n\nThere are images such as `progrium/busybox` which get us very close to a minimal container and package system. But these particular BusyBox builds piggyback on the OpenWRT package index which is often lacking and not tailored towards generic everyday applications. Alpine Linux has a much more complete and up to date [package index][alpine-packages]:\n\n```console\n$ docker run progrium/busybox opkg-install nodejs\nUnknown package 'nodejs'.\nCollected errors:\n* opkg_install_cmd: Cannot install package nodejs.\n\n$ docker run gliderlabs/alpine apk add --no-cache nodejs\nfetch http://alpine.gliderlabs.com/alpine/v3.3/main/x86_64/APKINDEX.tar.gz\nfetch http://alpine.gliderlabs.com/alpine/v3.3/community/x86_64/APKINDEX.tar.gz\n(1/4) Installing libgcc (5.3.0-r0)\n(2/4) Installing libstdc++ (5.3.0-r0)\n(3/4) Installing libuv (1.7.5-r0)\n(4/4) Installing nodejs (4.2.3-r0)\nExecuting busybox-1.24.1-r7.trigger\nOK: 29 MiB in 15 packages\n```\n\nThis makes Alpine Linux a great image base for utilities and even production applications. [Read more about Alpine Linux here][alpine-about] and you can see how their mantra fits in right at home with Docker images.\n\n## Usage\n\nStop doing this:\n\n```dockerfile\nFROM ubuntu-debootstrap:14.04\nRUN apt-get update -q \\\n  && DEBIAN_FRONTEND=noninteractive apt-get install -qy mysql-client \\\n  && apt-get clean \\\n  && rm -rf /var/lib/apt\nENTRYPOINT [\"mysql\"]\n```\nThis took 19 seconds to build and yields a 164 MB image. Eww. Start doing this:\n\n```dockerfile\nFROM gliderlabs/alpine:3.4\nRUN apk add --no-cache mysql-client\nENTRYPOINT [\"mysql\"]\n```\n\nOnly 3 seconds to build and results in a 36 MB image! Hooray!\n\n## Documentation\n\nThis image is well documented. [Check out the documentation at Viewdocs][docs] and the `docs` directory in this repository.\n\n## Contacts\n\nWe make reasonable efforts to support our work and are always happy to chat. Join us in [our Slack community][slack] or [submit a GitHub issue][issues] if you have a security or other general question about this Docker image. Please email [security](http://lists.alpinelinux.org/alpine-security/summary.html) or [user](http://lists.alpinelinux.org/alpine-user/summary.html) mailing lists if you have concerns specific to Alpine Linux.\n\n## Inspiration\n\nThe motivation for this project and modifications to `mkimage.sh` are highly inspired by Eivind Uggedal (uggedal) and Luis Lavena (luislavena). They have made great strides in getting Alpine Linux running as a Docker container. Check out their [mini-container/base][mini-base] image as well.\n\n## Sponsors\n\n[![Fastly](https://github.com/gliderlabs/docker-alpine/raw/master/logo_fastly.png)][fastly]\n\n[Fastly][fastly] provides the CDN for our Alpine Linux package repository. This allows super speedy package downloads from all over the globe!\n\n## License\n\nThe code in this repository, unless otherwise noted, is BSD licensed. See the `LICENSE` file in this repository.\n\n[mini-base]: https://github.com/mini-containers/base\n[alpine-packages]: http://pkgs.alpinelinux.org/\n[alpine-about]: https://www.alpinelinux.org/about/\n[docs]: http://gliderlabs.viewdocs.io/docker-alpine\n[slack]: http://glider-slackin.herokuapp.com/\n[issues]: https://github.com/gliderlabs/docker-alpine/issues\n[alpine]: http://alpinelinux.org/\n[fastly]: https://www.fastly.com/\n[hub]: https://hub.docker.com/r/gliderlabs/alpine/\n<img src=\"https://ga-beacon.appspot.com/UA-58928488-2/docker-alpine/readme?pixel\" />\n"
        },
        {
          "name": "build",
          "type": "blob",
          "size": 5.5078125,
          "content": "#!/usr/bin/env bash\n\nshopt -s globstar\n\nimage_pull() {\n\tlocal pull_url file dir\n  pull_url=\"$1\"\n\tdir=\"$2\"\n\tfile=\"${pull_url##*/}\"\n\n\tcurl -fSsL \"$pull_url\" > \"$dir/rootfs.tar.gz\"\n}\n\nimage_build() {\n\tlocal build_options dir\n\tbuild_options=\"$1\"\n\tdir=\"$2\"\n\n\t[[ \"$BUILDER_IMAGE\" ]] || {\n\t\tBUILDER_IMAGE=\"alpine-builder\"\n\t\tdocker build -t \"$BUILDER_IMAGE\" builder\n\t}\n\n\tdocker run -e \"TRACE=$TRACE\" --rm \"$BUILDER_IMAGE\" \"${BUILD_OPTIONS[@]}\" \\\n\t\t> \"$version_dir/rootfs.tar.xz\"\n}\n\nbuild() {\n\tdeclare options_files=\"${*:-versions/**/options}\"\n\n\tfor file in $options_files; do\n\t\t( # shellcheck source=versions/gliderlabs-3.2/options\n\t\tsource \"$file\"\n\t\tlocal version_dir\n\t\tversion_dir=\"${file%/*}\"\n\t\tarch=\"${ARCH:-x86_64}\"\n\t\t: \"${TAGS:?}\"\n\n\t\t[[ \"$PULL_URL\" ]] && image_pull \"$PULL_URL\" \"$version_dir\"\n\t\t[[ \"$BUILD_OPTIONS\" ]] && image_build \"${BUILD_OPTIONS[@]}\" \"$version_dir\"\n\n\t\t# Build + tag images\n\t\tfor tag in \"${TAGS[@]}\"; do\n\t\t\tdocker build -t \"$tag\" \"$version_dir\"\n\n\t\t\tif [[ \"$CIRCLE_BUILD_NUM\" ]]; then\n\t\t\t\t{\n\t\t\t\t\tmkdir -p images \\\n\t\t\t\t\t&& docker tag \"$tag\" \"${tag}-${CIRCLE_BUILD_NUM}\" \\\n\t\t\t\t\t&& docker save \"${tag}-${CIRCLE_BUILD_NUM}\" \\\n\t\t\t\t\t\t| xz -9e > \"images/${tag//\\//_}-${CIRCLE_BUILD_NUM}.tar.xz\" \\\n\t\t\t\t\t&& docker rmi \"${tag}-${CIRCLE_BUILD_NUM}\"\n\t\t\t\t} || true\n\t\t\tfi\n\t\tdone )\n\n\tdone\n}\n\ncommit() {\n\t[[ \"$CIRCLE_BRANCH\" == \"release\" ]] || return 0\n\n\tdeclare options_files=\"${*:-versions/**/options}\"\n\tlocal build_num=\"${CIRCLE_BUILD_NUM:-nobuild}\"\n\tlocal current_branch\n\tcurrent_branch=$(git rev-parse --abbrev-ref HEAD)\n\t: \"${current_branch:?}\"\n\n\tfor file in $options_files; do\n\t\tlocal release version_dir\n\t\tversion_dir=\"${file%/*}\"\n\t\trelease=\"${version_dir##versions/}\"\n\n\t\t: \"${release:?}\" \"${version_dir:?}\"\n\n\t\tgit checkout -B \"rootfs/$release\" \"$current_branch\"\n\t\tgit add -f -- \"$version_dir/rootfs.tar.*\"\n\t\tgit commit -m \"release image version $release for build $build_num\"\n\tdone\n\n\t[[ \"$NO_PUSH\" ]] || git push -f origin 'refs/heads/rootfs/*'\n\tgit checkout \"$current_branch\"\n}\n\nrun_tests() {\n\tdeclare options_files=\"${*:-versions/**/options}\"\n\tdeclare -a test_files\n\tfor file in $options_files; do\n\t\t# shellcheck source=versions/gliderlabs-3.2/options\n\t\tsource \"$file\"\n\t\tlocal tag\n\t\ttag=\"${TAGS[0]}\" tag=\"${tag//:/-}\" tag=\"${tag//\\//_}\"\n\t\ttest_file=\"test/test_${tag}.bats\"\n\t\t[[ -f \"$test_file\" ]] && test_files+=(\"$test_file\") || echo \" - skipping test for ${tag}: no test file ${test_file}\"\n\tdone\n\n\t[[ \"${test_files[@]}\" ]] && bats \"${test_files[@]}\"\n}\n\npush() {\n\t[[ \"$CIRCLE_BRANCH\" == \"release\" ]] || return 0\n\t[[ \"$NO_PUSH\" ]] && return 0\n\n\tdeclare options_files=\"${*:-versions/**/options}\"\n\tfor file in $options_files; do\n\t\t( #shellcheck source=versions/gliderlabs-3.2/options\n\t\tsource \"$file\"\n\t\tfor tag in \"${TAGS[@]}\"; do\n\t\t\tif docker history \"$tag\" &> /dev/null; then\n\t\t\t\t[[ \"$PUSH_IMAGE\" ]] && docker push \"$tag\"\n\t\t\tfi\n\t\tdone\n\t\texit 0 )\n\tdone\n}\n\nlibrary() {\n\tconvert() {\n\t\t# takes a space-separated list of alpine-linux architectures, and returns a space-separated list of docker architectures\n\t\tlocal i=0\n\t\tfor arch in \"$@\"; do\n\t\t\tcase \"$arch\" in # converts Alpine Linux arch strings to Docker arch strings\n\t\t\t\tx86_64) echo -n \"amd64\";;\n\t\t\t\tx86) echo -n \"i386\";;\n\t\t\t\tarmhf) echo -n \"arm32v6\";; # arm32v7 is not officially supported by Alpine, but arm32v6 should still work.\n\t\t\t\taarch64) echo -n \"arm64v8\";;\n\t\t\t\tppc64le) echo -n \"ppc64le\";;\n\t\t\t\ts390x) echo -n \"s390x\";;\n\t\t\t\t*) echo >&2 \"error: unknown arch '$arch'\"; return 1;; # Fail on unknown archs\n\t\t\tesac\n\t\t\tif [[ i -ne $#-1 ]]; then\n\t\t\t\techo -n \" \"\n\t\t\tfi\n\t\t\tlet i=$i+1\n\t\tdone\n\t}\n\n\tlocal release_refs\n\trelease_refs=\"$(git ls-remote --exit-code --heads origin release)\"\n\t: \"${release_refs:?}\"\n\n\techo\n\techo \"# autogenerated by https://github.com/gliderlabs/docker-alpine/blob/master/build\"\n\techo\n\techo \"Maintainers: Glider Labs <team@gliderlabs.com> (@gliderlabs)\"\n\techo \"GitRepo: https://github.com/gliderlabs/docker-alpine.git\"\n\techo \"GitFetch: refs/heads/release\"\n\techo \"GitCommit: ${release_refs:0:40}\"\n\n\tfor file in versions/library-*/x86_64/options versions/library-*/options; do\n\t\t# shellcheck source=versions/library-3.2/options\n\t\tsource \"$file\"\n\t\tlocal version_dir release tags\n\t\tversion_dir=\"${file%/options}\"\n\t\tversion_dir=\"${version_dir%/x86_64}\"\n\t\trelease=\"${version_dir#versions/}\"\n\t\ttags=\"${TAGS[*]#alpine:}\"\n\t\tif [ -e \"$version_dir/options\" ]; then\n\t\t\t# compatability with older configs that were only written for x86_64 architectures\n\t\t\tARCHS=(\"x86_64\")\n\t\telse\n\t\t\tARCHS=( \"$version_dir\"/*/options )\n\t\t\tARCHS=( \"${ARCHS[@]#$version_dir/}\" )\n\t\t\tARCHS=( \"${ARCHS[@]%/*}\" )\n\t\tfi\n\t\ta=\"$(convert \"${ARCHS[@]}\")\"\n\n\t\techo\n\t\techo \"Tags: ${tags// /, }\"\n\t\techo \"Architectures: ${a// /, }\"\n\n\t\tlocal i=0\n\t\tfor arch in $a; do\n\t\t\t# ${ARCHS[i]} is the alpine version string, different from $archs, the docker version string.\n\t\t\t# Our folder structure is based on the alpine version string\n\t\t\tlocal branch dir refs\n\t\t\tif [ -e \"$version_dir/options\" ]; then\n\t\t\t\t# compatability with older configs that were only written for x86_64 architectures\n\t\t\t\tbranch=\"rootfs/${release}\"\n\t\t\t\tdir=\"$version_dir\"\n\t\t\telse\n\t\t\t\tbranch=\"rootfs/${release}/${ARCHS[i]}\"\n\t\t\t\tdir=\"$version_dir/${ARCHS[i]}\"\n\t\t\tfi\n\t\t\trefs=\"$(git ls-remote --exit-code --heads origin \"$branch\")\"\n\t\t\t: \"${refs:?}\"\n\t\t\techo \"$arch-GitFetch: refs/heads/$branch\"\n\t\t\techo \"$arch-GitCommit: ${refs:0:40}\"\n\t\t\techo \"$arch-Directory: $dir\"\n\t\t\tlet i=i+1\n\t\tdone\n\tdone\n\techo\n}\n\nmain() {\n\tset -eo pipefail; [[ \"$TRACE\" ]] && set -x\n\tdeclare cmd=\"$1\"\n\tcase \"$cmd\" in\n\t\ttest)\tshift;\trun_tests \"$@\";;\n\t\tcommit)\tshift;\tcommit \"$@\";;\n\t\tpush)\tshift;\tpush \"$@\";;\n\t\tlibrary) shift; library;;\n\t\t*)\t\tbuild \"$@\";;\n\tesac\n}\n\nmain \"$@\"\n"
        },
        {
          "name": "builder",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 2.578125,
          "content": null
        },
        {
          "name": "logo_fastly.png",
          "type": "blob",
          "size": 1.72265625,
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "versions",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}