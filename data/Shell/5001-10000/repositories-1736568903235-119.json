{
  "metadata": {
    "timestamp": 1736568903235,
    "page": 119,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "git-ftp/git-ftp",
      "stars": 5510,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".codeclimate.yml",
          "type": "blob",
          "size": 0.126953125,
          "content": "---\nengines:\n  fixme:\n    enabled: true\n  markdownlint:\n    enabled: true\n  shellcheck:\n    enabled: true\nexclude_paths:\n- tests/\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0234375,
          "content": "MANIFEST\n/man/git-ftp.1\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.193359375,
          "content": "os:\n  - linux\n  - osx\n\nenv:\n  - LFTP_SUPPORT=0\n\njobs:\n  include:\n    - os: linux\n      env: LFTP_SUPPORT=1\n      addons:\n        apt:\n          packages:\n            - lftp\n    - os: osx\n      env: LFTP_SUPPORT=1\n      addons:\n        homebrew:\n          packages:\n            - lftp\n\nlanguage: sh\n\ninstall:\n  - >\n    if [ \"$TRAVIS_OS_NAME\" = \"linux\" ]; then\n      ./tests/vsftpd-3.0.3.debian7 tests/vsftpd.conf &\n    fi\n  - >\n    if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then\n      ./tests/vsftpd-3.0.3.el_capitan tests/vsftpd.conf &\n    fi\n\nbefore_script:\n  - git config --global user.email \"you@example.com\"\n  - git config --global user.name \"Your Name\"\n  - export GIT_FTP_HOST=localhost\n  - export GIT_FTP_PORT=:2121\n  - export GIT_FTP_ROOT=pub\n  - export GIT_FTP_USER=ftp\n  - export GIT_FTP_PASSWD=\"git-ftp@example.org\"\n  - echo \"$GIT_FTP_PASSWD\" > /tmp/vsftpd.email_passwords\n  #- export TEST_CASES=\"test_inits test_push_nothing test_file_with_unicode\"\n\nscript:\n  - tests/git-ftp-test.sh\n  - >\n    if grep -H -n -C 1 '^  ' \"git-ftp\" \"tests/git-ftp-test.sh\"; then\n      echo 'Lines starting with spaces instead of tabs found!'\n      false\n    fi\n\nafter_failure:\n  - cat /tmp/vsftpd.log\n  - ls -la /tmp\n  - ls -la /tmp/pub/*\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.6962890625,
          "content": "René Moser <mail@renemoser.net>\nEric Greve <ericgreve@gmail.com>\nTimo Besenreuther <timo@ezdesign.de>\nEric Doughty-Papassideris <github.com/ddlsmurf>\nWoody Gilk <github.com/shadowhand>\nJo-Herman Haugholt <johannes@huyderman.com>\nMartin Ueding <dev@martin-ueding.de>\nIngo Migliarina <ingo.devmail@googlemail.com>\nJonathan Patt <jonathanpatt@gmail.com>\nTasos Latsas <github.com/tlatsas>\nŁukasz Stelmach <github.com/steelman>\nAdam Brengesjö <ca.brengesjo@gmail.com>\nKang 'ikasty' Dae Youn <mail.ikasty@gmail.com>\nMaikel Linke <mkllnk@web.de>\nDan Rench <github.com/drench>\nMarc Addeo <marcaddeo@gmail.com>\nHugo Laloge <hugo.laloge@yahoo.fr>\nPiran Montford <github.com/piranm>\nSam Kirkland <github.com/SamKirkland>\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 8.9365234375,
          "content": "Version 1.6.0-UNRELEASED\n=============\n\n* Change exit code when remote cannot be accessed from 5 (ERROR_DOWNLOAD) to 4 (ERROR_UPLOAD)\n* Fix directory creation with SFTP\n* Fix submodule handling\n* Fix/Add support for nested branch names by allowing `/` in scope names\n* Pass insecure-flag to submodules\n* Pass ssh-keys to submodules if used\n* Add support for config `disable-epsv` and `no-commit`\n* Allow `true` and `false` for boolean configurations (`insecure`, `disable-epsv`, `no-commit`)\n* Add support for option `--insecure` for LFTP actions (download and pull)\n* Add support for FTPES for LFTP actions (download and pull)\n* Add better error messages for curl errors\n* Support --no-commit option for pull action\n* Documentation updates\n\nVersion 1.5.2\n=============\n\n* Use core.hooksPath configuration\n* Updated INSTALL.md with clearer and more up-to-date instructions for Windows\n* Fix configuration of `.git-ftp.log` file name\n* Fix typos in manual\n\nVersion 1.5.1\n=============\n\n* Fix FTPES support\n* Add new option `--proxy`\n* The `--insecure` option is also read from the git config\n\nVersion 1.5.0\n=============\n\n* Fix \"Unknown SHA1 object\" with Git > 2.16.0\n* Avoid git warning: empty strings as pathspecs\n* The .git-ftp-ignore file contains globs now, not regular expressions\n* Make --insecure option override config setting\n* Fix bug that can delete the .git folder using `git ftp download` with exclude patterns\n* Allow post-ftp-push hooks to pass on failures\n* Fixed post hook reference to deployed SHA1\n* Add a check covering curl presence and protocol support\n* Update INSTALL.md instructions for OS X 10.13.3\n* Add suggestion for usage with GIT LFS to documentation\n* Add config git-ftp.remote-root to documentation\n* Document using SFTP\n\nVersion 1.4.0\n=============\n\n* Improve test coverage\n* Fail in scripts if remote commit is unknown\n* Correct and extend documentation of .git-ftp-include file\n* De-couple --key and --pubkey options\n* Handling --cacert option safely\n* Extend documentation of .git-ftp-ignore file\n\nVersion 1.3.3\n=============\n\n* Add --auto-init for push action\n* Improved installation instructions for Windows\n\nVersion 1.3.2\n=============\n\n* Use longer `mktmp` pattern to support busybox\n* Update Windows installation instructions\n\nVersion 1.3.1\n=============\n\n* Fixed man file to avoid pandoc bug resulting in missing content\n\nVersion 1.3.0\n=============\n\n* FTPES support for submodules\n* Fix submodule bugs by quoting argument correctly\n* Include algorithm is now independent of ignore list\n* Include algorithm reads leading `/` as root of the repository like Git\n* Support for `pre-ftp-push` and `post-ftp-push` hooks\n* Performance improvements in generating file list\n* Allow file names to start with `-`\n* New `--changed-only` parameter for pull action\n* New \"snapshot\" action\n* Improved test setup comes with vsftpd configuration file\n\nVersion 1.2.0-rc.1\n==================\n\nFile selecting:\n* Consider .git-ftp-include even if no files changed\n* Let curl encode file names\n* Separate filenames by nul instead of newline\n* Using --diff-filter to list added/changed/deleted files\n\nSubmodules:\n* Suppress submodule status error message of git v2.7\n* Ignore uninitialised submodules\n\nNew features:\n* Pull feature\n* Download feature using lftp\n\nVersion 1.1.0-rc.1\n==================\n\nBenjamin Marguin:\n* Fixed submodule upload with multiple submodules.\n\nHugo Laloge (laloge_h)\n* Added option to push specific branch.\n\nAlex Hoppen:\n* Added keychain config.\n\nMaikel Linke (mkllnk):\n* Added upload and delete buffers in a curl config file.\n* Added optimisation in include file processing.\n* Added filtering with shell glob patterns instead of regex.\n* Added encoding remote file path for curl.\n* Added misc minor improvements and code optimisations.\n* Docs: Explaining .git-ftp-ignore patterns.\n* Fixed Mac OS X compatibility issues.\n* Added mktemp alternative.\n* Added catchup of submodules.\n\nTim:\n* Added URL encoding username and password to be used in curl URL.\n\nysakmrkm:\n* Docs: Add --remote-root to man file.\n\nRené Moser:\n* Added -P for interactive password prompt, use -p only for passing password by cli.\n* Added functionality for using temporary directory for temp files.\n* Docs: Updated man page and docs about -P.\n* Removed optimistic directory deletion, fixes GH-168 (reported by Justin Maier)\n\nVersion 1.0.0\n=============\n\nMaikel Linke (mkllnk):\n* Added test to ignore single file in root directory.\n* Added Travis support.\n* Added tests for git-ftp-include with git-ftp-ignore.\n* Added test uploading heaps.\n* Improved and extended testing.\n* Improved checking remote access before initial upload.\n* Fixed upload_sha1 at end of push action.\n* Fixed not recognizing different SHA1 object.\n* Fixed upload local sha1 only if files where pushed.\n* Fixed delete buffer. Fire before ARG_MAX reached.\n* Fixed counting bug in handle_file_sync().\n* Fixed upload buffer length check.\n* Fixed prevent deleting of unversioned files.\n* Removed duplicate code of setting curl args.\n\nAndrew Minion, Szerémi Attila, Max Horn, Ryan Ponce, Rob Upcraft, Pablo Alejandro Fiumara:\n* Documentation updates.\n\nRené Moser:\n* Fixed scope may not contain spaces\n* Fixed error level of failing delete action.\n* Several improvements.\n\nSudaraka Wijesinghe:\n* Fix for url from git config not being identified correctly.\n\nMatteo Manchi:\n* Fixed DEPLOYED_SHA1_FILE now cares about scope.\n\niKasty:\n* Added support for different remote root directory, option --remote-root.\n\nBrad Jones:\n* Fixed delete for SFTP.\n\nVersion 1.0.0-rc.2\n==================\n\nMaikel Linke (mkllnk):\n* Added more tests, tests clean up and improvements. See README.md in /tests.\n* Improved docs.\n\nJason Woof, mkllnk:\n* Fixed .git-ftp-include split lines on whitespace.\n* Fixed .git-ftp-include will not upload files that are a substr of another path being uploaded.\n\nRené Moser:\n* Added netrc in docs.\n* Fixed sha1 not updated if amended.\n\nVersion 1.0.0-rc.1\n==================\n\nMoz Morris:\n* Delete files using a single connection.\n\nm4grio:\n* Added --disable-epsv option.\n\nMartin Hradil:\n* Support for .git-ftp-including files without any git dependencies.\n\nRené Moser:\n* Updated docs.\n* Fixed git init fails when using .git-ftp-include as SHA1_DEPLOYED is defined.\n* Code cleanup.\n\nVersion 0.9.0\n=============\n\nAdam Brengesjö:\n* Add action 'log'.\n\nJason Woofenden:\n* Fixed quoting of REMOTE_PASSWD.\n* Fixed detection of curl verbosity setting.\n* Fixed log deletion failure even when being verbose.\n\nJoyce Babu:\n* Public key authentication key files path as configurable option.\n* Renamed the parameter names to match curl options.\nLouis Li:\n* Fixed a minor formatting issue in INSTALL.\n\nMar Cejas:\n* Fixed bug, Error: binary operator expected.\n\nShea Bunge:\n* Doc: Updated Windows installation instructions.\n\nmamzellejuu:\n* Doc: Fixed Repo path wasn't updated.\n\nRené Moser:\n* Fixed egrep: repetition-operator operand invalid OS X 10.9\n\nVersion 0.8.4\n=============\n\n* Performance improvments in submodule handling. Thanks to Adam Brengesjö.\n* Hotfix 0.8.2 did not fix the bug. Another try fixing bug related to ARG_MAX.\n* Info for OS X 10.8 users: Make sure you are using GNU grep. See commit f4baf02731ada267d399a6206d21fffc0357d75a.\n* Info: Repo moved to https://github.com/git-ftp/git-ftp\n* Added support for syncing untracked files. Thanks to Jonathan Patt.\n* Added support for --insecure in config. Thanks to Erik Erkelens.\n* Fixed issues with insecure config option being ignored. Thanks to Andrew Fenn.\n* Fixed error output not using stderr.\n* Fixed sync root missing from submodule sync. Thanks to John Learn.\n* Lots of minor fixes and documentation updates.\n\nVersion 0.8.2\n=============\n\n* Hotfixed bug, string length buffer was too small. This could cause the file upload to fail.\n\nVersion 0.8.1\n=============\n\n* Added feature, --scope without argument takes the current branch name as scope. Thanks to Chris J. Lee.\n* Fixed bug, respect ARG_MAX if there is a large number of files.\n* Fixed bug, local locking did not work correctly with submodule handilng. Removed.\n* Added feature --insecure to not verify server certificate. Thanks to Łukasz Stelmach.\n* Added feature --cacert to provide custom cacert. Thanks to Łukasz Stelmach.\n\nVersion 0.8.0\n=============\n\n* Fixed bug, DEFAULTS config are not over-writeable by SCOPES config using emtpy string. Thanks to Ingo Migliarina.\n* Fixed long outstanding issue, using a single connection for all uploads now. This makes git-ftp 5x faster!\n* Fixed bug, respect syncroot while syncing a submodule. Thanks to https://github.com/escaped.\n* Added feature, show error log at the end.\n\nVersion 0.7.5\n=============\n\n* Updated man page.\n* Fixed bug, check for dirty repository was dependent on english.\n\nVersion 0.7.4\n=============\n\n* Code cleanup.\n* Fixed bug in add-scope action, related to OS X only.\n\nVersion 0.7.3\n=============\n\n* Added add-scope and remove-scope actions.\n* .git-ftp-ignore can now contain comments (#...) and whitespaces.\n* Fixed bug if path to git project contains whitespaces.\n* Fixed bug in syncroot feature.\n* Removed parallel connections feature.\n* Code cleanup (syncroot).\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 5.541015625,
          "content": "# INSTALL\n\nYou can find instructions for:\n\n- [Linux/Unix based systems using make](#linuxunix-based-systems-using-make)\n- [Debian, Ubuntu and others using apt](#debian-ubuntu-and-others-using-apt)\n- [ArchLinux](#archlinux-aur-unofficial)\n- [MacOS](#macos)\n- [Windows](#windows)\n\n\n## Linux/Unix based systems using make\n\nNote: Make sure Git and cURL are installed.\n\nThis should work on MacOS, Debian, Ubuntu, Fedora, RedHat, etc.\n\nThe easiest way is to use Git for installing:\n\n```sh\ngit clone https://github.com/git-ftp/git-ftp.git\ncd git-ftp\n\n# choose the newest release\ntag=\"$(git tag | grep '^[0-9]*\\.[0-9]*\\.[0-9]*$' | tail -1)\"\n\n# checkout the latest tag\ngit checkout \"$tag\"\nsudo make install\n```\n\nUpdating using git:\n\n```sh\ngit fetch\ngit checkout \"$(git tag | grep '^[0-9]*\\.[0-9]*\\.[0-9]*$' | tail -1)\"\nsudo make install\n```\n\n## Linux/Unix based systems using direct download\n\nAnother way is to download the shell script directly and place it in your `bin`\ndirectory:\n\n```sh\ncurl https://raw.githubusercontent.com/git-ftp/git-ftp/master/git-ftp > /bin/git-ftp\nchmod 755 /bin/git-ftp\n```\n\nMaybe `sudo` is required to do this.\nPlease note that this will install the most recent version, even if its\nunreleased. To install a specific version replace `master` with the version tag.\n\nUninstall:\n```sh\nrm /bin/git-ftp\n```\n\n## Debian, Ubuntu and others using apt\n\nAt least Debian and Ubuntu provide git-ftp in their main repositories.\n\n```sh\nsudo apt-get install git-ftp\n```\n\nIf you would like the newest release maintained by Git-ftp,\nyou can add the PPA:\n\n```sh\nsudo -s\nadd-apt-repository ppa:git-ftp/ppa\n\n# On Debian, you need to modify the sources list to use the same PPA\nsource /etc/*-release\nif [ \"$ID\" = \"debian\" ]; then\n    dist=\"$(echo /etc/apt/sources.list.d/git-ftp-ppa-*.list | sed 's/^.*ppa-\\(.*\\)\\.list$/\\1/')\"\n    sed -i.backup \"s/$dist/precise/g\" /etc/apt/sources.list.d/git-ftp-ppa-*.list\nfi\n\napt-get update\n```\n\n\n## ArchLinux (AUR: unofficial)\n\nSee https://aur.archlinux.org/packages/?O=0&C=0&SeB=nd&K=git-ftp&SB=v&SO=d&PP=50&do_Search=Go\n\n\n## macOS\n\nFirst, ensure you have installed Xcode and command line tools. Command line tools can be download at https://developer.apple.com/download/more/ or via command: \n\n```\nxcode-select --install\n```\n\nUsing homebrew:\n\n```sh\nbrew install git\nbrew install brotli\nbrew install git-ftp\n```\n\n### SFTP on macOS\n\nThe default version of curl coming with macOS does not support SFTP (`Protocol sftp not supported or disabled in libcurl`).\nSo if you require SFTP support you can compile curl with SFTP support on your own.\nFirst download a [curl source package](http://curl.haxx.se/download.html) from the website and unpack the archive.\nThen you can start installing some dependencies and finally building curl:\n\n```sh\ncd /your/unpacked/archive\n\nbrew install openssl\nbrew install libssh2\n\n./configure -q --with-libssh2 --with-ssl=/usr/local/opt/openssl\nmake\nmake install\n```\n\nTo check the result you can run `curl --version`. This will give you some information about curl including a list of supported protocols.\nIn this list, `ftp`, `ftps`, `http`, `https` and of course `sftp` should be present.\n\nIt might happen that the default curl is still executed, because it is taking precedence over your custom build in `/usr/local/bin`.\nYou can fix this by adding `export PATH=/usr/local/bin:$PATH` to your `~/.bash_profile`.\n\n_Thanks to Andrew Berls for the [original post](http://andrewberls.com/blog/post/adding-sftp-support-to-curl) on this._\n\n## Windows\n\nThere are at least two ways to install git-ftp on Windows.\n\n- Using Git for Windows, former msysgit (recommended)\n- Using cygwin\n\n### Git for Windows, former msysgit (recommended)\n\nInstall [Git for Windows](https://git-for-windows.github.io/).\n\nIf you require SFTP support you will need to [download curl](http://curl.haxx.se/download.html) for\nWindows with SFTP support. Choose either the Win32 2000/XP MSI or Win64 2000/XP x86_64 MSI is recommended.\nIf you installed curl, then remove `bin/curl.exe` from your Git for Windows\ninstallation directory. It will fall back to the newly installed version.\n\nFind Git Bash in your start menu (or inside `C:\\Program Files\\Git`) and right-click to\nchoose \"Run as Administrator\". Then paste in the following two commands:\n\n```bash\ncurl https://raw.githubusercontent.com/git-ftp/git-ftp/master/git-ftp > /bin/git-ftp\nchmod 755 /bin/git-ftp\n```\n\n*Note: the `/bin` directory is an alias.\nBy default this is the same as `C:\\Program Files (x86)\\Git\\usr\\bin`.*\n\n### cygwin\n\nInstall cygwin and install the package 'curl'.\nThen open the cygwin console and install Git-ftp with the following commands:\n\n```bash\ncurl https://raw.githubusercontent.com/git-ftp/git-ftp/master/git-ftp > /bin/git-ftp\nchmod 755 /bin/git-ftp\n```\n\n### Git for Windows and cygwin both installed\n\nIf you have both Git for Windows and cygwin installed on Windows and want to\nuse Git for Windows for Git commands, you may get an error\n\"No such file or directory\" for a path starting with \"/cygdrive/\", for example:\n\n    creating `/cygdrive/c/TEMP/git-ftp-m7GH/delete_tmp': No such file or directory\n\nThe problem is that Git-ftp use commands from both Git for Windows and cygwin\ndirectories. But by default, cygwin is configured to start paths with the\nprefix \"/cygdrive\" while Git for Windows starts paths with \"/\".\nTo fix the problem, open file \"<cygwin>\\etc\\fstab\"\n(e.g. \"c:\\cygwin\\etc\\fstab\") and change parameter \"/cygwin/\" to \"/\", for example:\n\n    # This is default:\n    none /cygdrive/ cygdrive binary,posix=0,user 0 0\n\nchange to:\n\n    # This is changed:\n    none / cygdrive binary,posix=0,user 0 0\n\nAfter this, close all console windows and try again.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3232421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.0419921875,
          "content": "#! /usr/bin/make -f\nSHELL=/bin/sh\n\nprefix ?=/usr/local\nbindir ?=${prefix}/bin\nmandir ?=${prefix}/man/man1\n\n# files that need mode 755\nEXEC_FILES=git-ftp\n\n# files that need mode 644\nMAN_FILE=git-ftp.1\n\nall:\n\t@echo \"usage: make install     -> installs git-ftp only\"\n\t@echo \"       make install-man -> installs man pages only\"\n\t@echo \"       make install-all -> installs git-ftp and man pages\"\n\t@echo \"       make uninstall\"\n\t@echo \"       make uninstall-man\"\n\t@echo \"       make uninstall-all\"\n\t@echo \"       make clean\"\n\ninstall:\n\tinstall -d -m 0755 $(bindir)\n\tinstall -m 0755 $(EXEC_FILES) $(bindir)\n\ninstall-man:\n\tmkdir -p $(mandir)\n\tcd man && \\\n\tmake man && \\\n\tinstall -m 0644 $(MAN_FILE) $(mandir)\nifneq \"$(shell uname -s)\" \"Darwin\"\n\tmandb $(mandir)\nendif\n\ninstall-all: install install-man\n\nuninstall:\n\ttest -d $(bindir) && \\\n\tcd $(bindir) && \\\n\trm -f $(EXEC_FILES)\n\nuninstall-man:\n\ttest -d $(mandir) && rm -rf $(mandir)\nifneq \"$(shell uname -s)\" \"Darwin\"\n\tmandb -f $(mandir)/$(MAN_FILE)\nendif\n\nuninstall-all: uninstall uninstall-man\n\nclean:\n\tcd man && make clean\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.6630859375,
          "content": "Git-ftp -- uploads to FTP servers the Git way\n=============================================\n\nIf you use Git and you need to upload your files to an FTP server,\nGit-ftp can save you some time and bandwidth by uploading only those files that\nchanged since the last upload.\n\nIt keeps track of the uploaded files by storing the commit id\nin a log file on the server. It uses Git to determine which local\nfiles have changed.\n\nYou can easily deploy another branch or go back in the Git history to upload\nan older version.\n\n```sh\n# Setup\ngit config git-ftp.url \"ftp://ftp.example.net:21/public_html\"\ngit config git-ftp.user \"ftp-user\"\ngit config git-ftp.password \"secr3t\"\n\n# Upload all files\ngit ftp init\n\n# Or if the files are already there\ngit ftp catchup\n\n# Work and deploy\necho \"new content\" >> index.txt\ngit commit index.txt -m \"Add new content\"\ngit ftp push\n# 1 file to sync:\n# [1 of 1] Buffered for upload 'index.txt'.\n# Uploading ...\n# Last deployment changed to ded01b27e5c785fb251150805308d3d0f8117387.\n```\n\nIf you encounter any problems, add the `-v` or `-vv` option to see more output.\nThe manual may answer some of your questions as well.\n\nFurther Reading\n---------------\n\n* Read the [manual](man/git-ftp.1.md) for more options, features and examples.\n* See the [installation instructions](INSTALL.md) for your system.\n* Checkout the [changelog](CHANGELOG.md).\n* Check [git-ftp issues on GitHub] for open issues.\n* Follow this project on twitter [@gitftp].\n\n* Deploy with [git-ftp and GitHub Actions](https://github.com/marketplace/actions/ftp-deploy)\n* Deploy with [git-ftp and Bitbucket Pipelines](https://www.youtube.com/watch?v=8HZhHtZebdw) (video tutorial).\n\nLimitations\n-----------\n\n* Windows and OS X: I am very limited in testing on Windows and OS X. Thanks\n  for helping me out fixing bugs on these platforms.\n* git-ftp as deployment tool: git-ftp was not designed as centralized\n  deployment tool. While a commit is being pushed and uploaded to the FTP\n  server, all files belonging to that revision must remain untouched until\n  git-ftp has successfully finished the upload. Otherwise, the contents of the\n  uploaded file will not match the contents of the file referenced in the\n  commit.\n\nContributions\n-------------\n\nDon't hesitate to improve this tool.\nDon't forget to add yourself to the [AUTHORS](AUTHORS) file.\nThe core functionality is unit tested using shunit2.\nYou can find the tests in `tests/`.\n\nCopyright\n---------\n\nThis application is licensed under [GNU General Public License, Version 3.0]\n\n[git-ftp issues on GitHub]: http://github.com/git-ftp/git-ftp/issues\n[GNU General Public License, Version 3.0]:\n http://www.gnu.org/licenses/gpl-3.0-standalone.html\n[@gitftp]: https://twitter.com/gitftp\n"
        },
        {
          "name": "git-ftp",
          "type": "blob",
          "size": 49.2958984375,
          "content": "#!/usr/bin/env bash\n#\n# Copyright 2010-2015 René Moser\n# http://github.com/git-ftp/git-ftp\n#\n# Git-ftp is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Git-ftp is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Git-ftp.  If not, see <http://www.gnu.org/licenses/>.\n\n# ------------------------------------------------------------\n# Setup Environment\n# ------------------------------------------------------------\n\n# General config\nreadonly DEFAULT_PROTOCOL=\"ftp\"\nreadonly REMOTE_LCK_FILE=\"$(basename \"$0\").lck\"\nreadonly SYSTEM=\"$(uname)\"\nreadonly VERSION='1.6.0'\n\n# ------------------------------------------------------------\n# Defaults\n# ------------------------------------------------------------\nURL=\"\"\nREMOTE_PROTOCOL=\"\"\nREMOTE_HOST=\"\"\nREMOTE_USER=\"\"\nREMOTE_PASSWD=\"\"\nREMOTE_BASE_URL=\"\"\nREMOTE_BASE_URL_DISPLAY=\"\"\nREMOTE_ROOT=\"\"\nREMOTE_PATH=\"\"\nREMOTE_CACERT=\"\"\nREMOTE_DELETE_CMD=\"-*DELE \"\nREMOTE_CMD_OPTIONS=(\"-s\")\nLFTP_OPTIONS=\"\"\nACTION=\"\"\nLOG_CACHE=\"\"\nERROR_LOG=\"\"\nBRANCH=\"\"\nCURRENT_BRANCH=\"\"\nSCOPE=\"\"\nKEYCHAIN_USER=\"\"\nKEYCHAIN_HOST=\"\"\nDEPLOYED_SHA1_FILE=\".git-ftp.log\"\nDEPLOYED_SHA1=\"\"\nPREV_DEPLOYED_SHA1=\"\"\nLOCAL_SHA1=\"\"\nSYNCROOT=\"\"\nSNAPSHOT_DIR=\"\"\nCURL_PROTOCOL=\"\"\nCURL_PUBLIC_KEY=\"\"\nCURL_PRIVATE_KEY=\"\"\nCURL_PROXY=\"\"\nLFTP_PROTOCOL=\"\"\nLFTP_COMMAND_SETTINGS=\"\"\nTMP_DIR=\"\"\nTMP_CURL_UPLOAD_FILE=\"\"\nTMP_CURL_DELETE_FILE=\"\"\nTMP_GITFTP_UPLOAD=\"\"\nTMP_GITFTP_DELETE=\"\"\nTMP_GITFTP_INCLUDE=\"\"\ndeclare -a CURL_ARGS\ndeclare -a GIT_SUBMODULES\ndeclare -i VERBOSE=0\ndeclare -i IGNORE_DEPLOYED=0\ndeclare -i DOWNLOAD_CHANGED_ONLY=0\ndeclare -i DRY_RUN=0\ndeclare -i FORCE=0\ndeclare -i ENABLE_REMOTE_LCK=0\ndeclare -i ACTIVE_MODE=0\ndeclare -i USE_KEYCHAIN=0\ndeclare -i EXECUTE_PRE_HOOKS=1\ndeclare -i EXECUTE_POST_HOOKS=1\ndeclare -i ENABLE_POST_HOOK_ERRORS=0\ndeclare -i AUTO_INIT=0\ndeclare -i INSECURE=0\ndeclare -i CURL_DISABLE_EPSV=0\ndeclare -i NO_COMMIT=0\n\n# ------------------------------------------------------------\n# Constant Exit Error Codes\n# ------------------------------------------------------------\nreadonly ERROR_USAGE=2\nreadonly ERROR_MISSING_ARGUMENTS=3\nreadonly ERROR_UPLOAD=4\nreadonly ERROR_DOWNLOAD=5\nreadonly ERROR_UNKNOWN_PROTOCOL=6\nreadonly ERROR_REMOTE_LOCKED=7\nreadonly ERROR_GIT=8\nreadonly ERROR_HOOK=9\nreadonly ERROR_FILESYSTEM=10\n\n# ------------------------------------------------------------\n# Functions\n# ------------------------------------------------------------\n\nusage_long()\n{\nlocal pager=$(git config --get core.pager)\n${GIT_PAGER:-${pager:-${PAGER:-less -FRSX}}} << EOF\nUSAGE\n\tgit-ftp <action> [<options>] [<url>]\n\n\nDESCRIPTION\n\tgit-ftp does FTP the Git way.\n\n\tIt uses Git to determine which local files have changed since the last\n\tdeployment to the remote server and saves you time and bandwidth by\n\tuploading only those files.\n\n\tIt keeps track of the deployed state by uploading the SHA1 of the last\n\tdeployed commit in a log file.\n\nACTIONS\n\t. init\n\t\tDoes an initial upload of the latest version of all non-ignored\n\t\tgit-tracked files to the remote server and creates .git-ftp.log\n\t\tfile containing the SHA1 of the latest commit.\n\n\t. catchup\n\t\tUpdates the commit id stored on the server.\n\n\t. push\n\t\tUploads git-tracked files which have changed since last upload.\n\n\t. download (EXPERIMENTAL)\n\t\tDownloads changes from the remote host into your working tree.\n\t\tWARNING: It can delete local untracked files that are not\n\t\tlisted in your .git-ftp-ignore file.\n\n\t. pull (EXPERIMENTAL)\n\t\tDownloads changes from the remote server into a separate commit\n\t\tand merges them into your current branch.\n\n\t. snapshot (EXPERIMENTAL)\n\t\tDownloads files into a new Git repository. Takes an additional\n\t\toptional argument as local destination directory. Example:\n\t\t\\`git-ftp snapshot ftp://example.com/public_html projects/example\\`\n\n\t. show\n\t\tDownloads last uploaded SHA1 from log and hooks \\`git show\\`.\n\n\t. log\n\t\tDownloads last uploaded SHA1 from log and hooks \\`git log\\`.\n\n\t. add-scope\n\t\tAdd a scope (e.g. dev, production, testing).\n\n\t. remove-scope\n\t\tCompletely remove a scope.\n\n\t. help\n\t\tShows this help screen.\n\n\nURL\n\t. FTP (default)\t\thost.example.com[:<port>][/<remote path>]\n\t. FTP\t\t\tftp://host.example.com[:<port>][/<remote path>]\n\t. SFTP\t\t\tsftp://host.example.com[:<port>][/<remote path>]\n\t. FTPS\t\t\tftps://host.example.com[:<port>][/<remote path>]\n\t. FTPES\t\t\tftpes://host.example.com[:<port>][/<remote path>]\n\n\nOPTIONS\n\t-h, --help\t\tShows this help screen.\n\t-u, --user\t\tFTP login name.\n\t-p, --passwd\t\tFTP password.\n\t-P, --ask-passwd\tAsk for FTP password interactively.\n\t-k, --keychain\t\tFTP password from KeyChain (Mac OS X only).\n\t-b, --branch\t\tGit branch to push\n\t-s, --scope\t\tUsing a scope (e.g. dev, production, testing).\n\t-D, --dry-run\t\tDry run: Does not upload anything.\n\t-a, --all\t\tUploads all files, ignores deployed SHA1 hash.\n\t-c, --commit\t\tSets SHA1 hash of last deployed commit by option.\n\t-A, --active\t\tUse FTP active mode.\n\t-l, --lock\t\tEnable/Disable remote locking.\n\t-f, --force\t\tForce, does not ask questions.\n\t-n, --silent\t\tSilent mode.\n\t-v, --verbose\t\tVerbose mode.\n\t-vv\t\t\tVery verbose or debug mode.\n\t--remote-root\t\tSpecifies remote root directory\n\t--syncroot\t\tSpecifies a local directory to sync from as if it were the git project root path.\n\t--key\t\t\tSSH private key file name for SFTP.\n\t--pubkey\t\tSSH public key file name. Used with --key option.\n\t--insecure\t\tDon't verify server's certificate.\n\t--cacert\t\tSpecify a <file> as CA certificate store. Useful when a server has got a self-signed certificate.\n\t--no-commit\t\tPerform the merge at the and of pull but do not autocommit, to have the chance to inspect and further tweak the merge result before committing.\n\t--changed-only\t\tDownload or pull only files changed since the deployed commit while ignoring all other files.\n\t--no-verify\t\tBypass the pre-ftp-push hook.\n\t--no-post-hooks\t\tBypass the post-ftp-push hook.\n\t--enable-post-errors\tFails if post-ftp-push hook raises an error\n\t--disable-epsv\t\tTell curl to disable the use of the EPSV command when doing passive FTP transfers. Curl will normally always first attempt to use EPSV before PASV, but with this option, it will not try using EPSV.\n\t--auto-init\t\tAutomatically run init action when running push action\n\t--version\t\tPrints version.\n\t-x, --proxy\t\tUse the specified proxy.\n\n\nEXAMPLES\n\t. git-ftp push -u john ftp://ftp.example.com:4445/public_ftp -p -v\n\t. git-ftp push -p -u john -v ftp.example.com:4445:/public_ftp\n\t. git-ftp push -p -u john ftp.example.com --branch prod\n\t. git-ftp add-scope production ftp://user:secr3t@ftp.example.com:4445/public_ftp\n\t. git-ftp push --scope production\n\t. git-ftp remove-scope production\n\n\nSET DEFAULTS\n\t. git config git-ftp.user john\n\t. git config git-ftp.url ftp.example.com\n\t. git config git-ftp.password secr3t\n\t. git config git-ftp.remote-root \"~/www/\"\n\t. git config git-ftp.branch prod\n\t. git config git-ftp.syncroot path/dir\n\t. git config git-ftp.cacert path/cacert\n\t. git config git-ftp.deployedsha1file mySHA1File\n\t. git config git-ftp.insecure 1\n\t. git config git-ftp.keychain user@example.com\n\n\nSET SCOPE DEFAULTS\n\te.g. your scope is 'testing'\n\t. git config git-ftp.testing.url ftp.example.local\n\n\nVERSION\n\t$VERSION\nEOF\nexit 0\n}\n\nusage() {\n\techo \"git-ftp <action> [<options>] [<url>]\"\n\texit \"$ERROR_USAGE\"\n}\n\ncache_git_submodules() {\n\tGIT_SUBMODULES=\"$(git submodule status -- \"$SYNCROOT\" 2>/dev/null | grep -v '^-' | awk '{print $2}')\"\n}\n\nis_submodule() {\n\techo \"${GIT_SUBMODULES[@]}\" | grep -Fxq -- \"$1\"\n}\n\nboolean() {\n\tcase \"$1\" in\n\t\t\"true\")\n\t\t\techo \"1\"\n\t\t\t;;\n\t\t\"false\")\n\t\t\techo \"0\"\n\t\t\t;;\n\t\t*)\n\t\t\techo $1\n\t\t\t;;\n\tesac\n}\n\nask_for_passwd() {\n\techo -n \"Password: \"\n\tstty -echo > /dev/null 2>&1\n\tread REMOTE_PASSWD\n\tstty echo > /dev/null 2>&1\n\techo \"\"\n}\n\nget_keychain_password () {\n\tif [ \"$SYSTEM\" = \"Darwin\" ]; then\n\t\t# Split user and host if necessary\n\t\tif echo \"$KEYCHAIN_USER\" | grep -q '@'; then\n\t\t\tKEYCHAIN_HOST=$(echo \"$KEYCHAIN_USER\" | cut -d '@' -f2)\n\t\t\tKEYCHAIN_USER=$(echo \"$KEYCHAIN_USER\" | cut -d '@' -f1)\n\t\telse\n\t\t\t[ -z \"$KEYCHAIN_USER\" ] && KEYCHAIN_USER=\"$REMOTE_USER\"\n\t\t\t[ -z \"$KEYCHAIN_HOST\" ] && KEYCHAIN_HOST=\"$REMOTE_HOST\"\n\t\tfi\n\n\t\t[ -z \"$KEYCHAIN_USER\" ] && print_error_and_die \"Missing keychain account.\" \"$ERROR_MISSING_ARGUMENTS\"\n\t\t\n\t\tlocal KEYCHAIN_ARGS=(-a \"$KEYCHAIN_USER\")\n\t\t[ -n \"$KEYCHAIN_HOST\" ] && KEYCHAIN_ARGS+=(-s \"$KEYCHAIN_HOST\")\n\n\t\twrite_log \"Read password from keychain.\"\n\n\t\tlocal pass\n\t\tif pass=\"$(security find-internet-password \"${KEYCHAIN_ARGS[@]}\" -g 2>&1 > /dev/null)\"; then\n\t\t\twithout_prefix=\"${pass#password: \\\"}\"\n\t\t\tREMOTE_PASSWD=\"${without_prefix%\\\"}\"\n\t\telse\n\t\t\tprint_error_and_die \"Password not found in keychain for account '$KEYCHAIN_USER @ $KEYCHAIN_HOST'.\" \"$ERROR_MISSING_ARGUMENTS\"\n\t\tfi\n\telse\n\t\twrite_log \"Ignoring -k on non-Darwin systems.\"\n\tfi\n}\n\n# Checks if last command was successful\n#\n# $1 - error message\n# $2 - error code to produce\n#\ncheck_exit_status() {\n\tcheck_exit_status_not_equals $? 0 \"$1\" \"$2\"\n}\n\n# Checks if exit status equals a given value. If false sends exit command.\n#\n# $1 - status code to check\n# $2 - code to test against\n# $3 - error message\n# $4 - error code to produce\n#\ncheck_exit_status_equals() {\n\tif [ $1 -eq $2 ]; then\n\t\tprint_error_and_die \"$3, exiting...\" \"$4\"\n\tfi\n}\n\n# Checks if exit status not equals a given value\n#\n# $1 - status code to check\n# $2 - code to test against\n# $3 - error message\n# $4 - error code to produce\n#\ncheck_exit_status_not_equals() {\n\tif [ $1 -ne $2 ]; then\n\t\tprint_error_and_die \"$3, exiting...\" \"$4\"\n\tfi\n}\n\n# Checks if a given curl exit code was successful and if not exits with a nice error message (in some cases)\n#\n# $1 - exit code to check\n# $2 - message: a custom message that is put in front of the error message\n# $3 - error code: code to exit with if $1 is bad\n#\ncheck_curl_exit_status() {\n\tcase $1 in\n\t\t0) ;;\n\t\t9) print_error_and_die \"$2 Access to resource denied. This usually means that the file or directory does not exist. Wrong path? exiting...\" \"$3\" ;;\n\t\t67) print_error_and_die \"$2 Can't access remote '$REMOTE_BASE_URL_DISPLAY'. Failed to log in. Correct user and password? exiting...\" \"$3\" ;;\n\t\t78) print_error_and_die \"$2 The resource does not exist. exiting...\" \"$3\" ;;\n\t\t*) print_error_and_die \"$2 Can't access remote '$REMOTE_BASE_URL_DISPLAY'. Network down? Wrong URL? exiting...\" \"$3\" ;;\n\tesac\n}\n\nget_config() {\n\t# try .git-ftp-config\n\t[ -n \"$SCOPE\" ] && [ -f '.git-ftp-config' ] && OUT=\"$(git config -f '.git-ftp-config' --get \"git-ftp.$SCOPE.$1\")\"\n\tif [ $? -eq 0 ];\n\tthen\n\t\techo \"$OUT\"\n\t\treturn 0\n\tfi\n\t[ -f '.git-ftp-config' ] && OUT=\"$(git config -f '.git-ftp-config' --get \"git-ftp.$1\")\"\n\tif [ $? -eq 0 ];\n\tthen\n\t\techo \"$OUT\"\n\t\treturn 0\n\tfi\n\t[ -n \"$SCOPE\" ] && OUT=\"$(git config --get \"git-ftp.$SCOPE.$1\")\"\n\tif [ $? -eq 0 ];\n\tthen\n\t\techo \"$OUT\"\n\t\treturn 0\n\tfi\n\tOUT=\"$(git config --get \"git-ftp.$1\")\"\n\tif [ $? -eq 0 ];\n\tthen\n\t\techo \"$OUT\"\n\t\treturn 0\n\tfi\n\t[ -n \"$2\" ] && OUT=\"$2\"\n\techo \"$OUT\"\n}\n\nset_deployed_sha1_file() {\n\tDEPLOYED_SHA1_FILE=\"$(get_config deployedsha1file \"$DEPLOYED_SHA1_FILE\")\"\n}\n\n# Simple log func\nwrite_log() {\n\tif [ $VERBOSE -eq 1 ]; then\n\t\techo \"$(date): $1\"\n\telse\n\t\tif [ -n \"$LOG_CACHE\" ]; then\n\t\t\tLOG_CACHE=\"$LOG_CACHE\\n$(date): $1\"\n\t\telse\n\t\t\tLOG_CACHE=\"$(date): $1\"\n\t\tfi\n\tfi\n}\n\nwrite_error_log() {\n\twrite_log \"$1\"\n\tif [ -n \"$ERROR_LOG\" ]; then\n\t\tERROR_LOG=\"$ERROR_LOG\\n: $1\"\n\telse\n\t\tERROR_LOG=\"$1\"\n\tfi\n}\n\nprint_error_log() {\n\tif [ -n \"$ERROR_LOG\" ]; then\n\t\techo \"Error log:\"\n\t\techo \"$ERROR_LOG\"\n\tfi\n}\n\n# Simple error printer\nprint_error_and_die() {\n\tif [ $VERBOSE -eq 0 ]; then\n\t\techo \"fatal: $1\" >&2\n\telse\n\t\twrite_log \"fatal: $1\"\n\tfi\n\tcleanup\n\texit \"$2\"\n}\n\n# Simple info printer\nprint_info() {\n\tif [ $VERBOSE -eq 0 ]; then\n\t\techo \"$1\"\n\telse\n\t\twrite_log \"$1\"\n\tfi\n}\n\ncleanup() {\n\trm -rf \"$TMP_DIR\"\n}\n\nset_default_curl_options() {\n\tOIFS=\"$IFS\"\n\tIFS=\" \"\n\tCURL_ARGS=(\"${REMOTE_CMD_OPTIONS[@]}\")\n\tIFS=\"$OIFS\"\n\tCURL_ARGS+=(--globoff)\n\tif [ -n \"$CURL_PROXY\" ]; then\n\t\tCURL_ARGS+=(--proxy \"$CURL_PROXY\")\n\tfi\n\tif [ -z \"$REMOTE_USER\" ]; then\n\t\tCURL_ARGS+=(--netrc)\n\tfi\n\tCURL_ARGS+=(-#)\n\tif [ $ACTIVE_MODE -eq 1 ]; then\n\t\tCURL_ARGS+=(-P \"-\")\n\telse\n\t\tif [ $CURL_DISABLE_EPSV -eq 1 ]; then\n\t\t\tCURL_ARGS+=(--disable-epsv)\n\t\tfi\n\tfi\n}\n\nupload_file() {\n\tlocal SRC_FILE=\"$1\"\n\tlocal DEST_FILE=\"$2\"\n\tif [ -z \"$DEST_FILE\" ]; then\n\t\tDEST_FILE=\"${SRC_FILE#$SYNCROOT}\"\n\tfi\n\n\tset_default_curl_options\n\tCURL_ARGS+=(-T \"$SRC_FILE\")\n\tCURL_ARGS+=(--ftp-create-dirs)\n\tCURL_ARGS+=(\"$REMOTE_BASE_URL/${REMOTE_PATH}${DEST_FILE}\")\n\tcurl \"${CURL_ARGS[@]}\"\n}\n\nupload_file_buffered() {\n\tlocal SRC_FILE=\"$1\"\n\tlocal DEST_FILE=\"${SRC_FILE#$SYNCROOT}\"\n\tlocal ENC_DEST_FILE=\"${DEST_FILE//#/%23}\"\n\tlocal ENC_DEST_FILE=\"${ENC_DEST_FILE// /%20}\"\n\techo \"-T \\\"./$SRC_FILE\\\"\nurl = \\\"$REMOTE_BASE_URL/${REMOTE_PATH}${ENC_DEST_FILE}\\\"\" >> \"$TMP_CURL_UPLOAD_FILE\"\n}\n\nfire_upload_buffer() {\n\tif [ ! -f \"$TMP_CURL_UPLOAD_FILE\" ]; then\n\t\treturn 0\n\tfi\n\tprint_info \"Uploading ...\"\n\tset_default_curl_options\n\tCURL_ARGS+=(--ftp-create-dirs)\n\tCURL_ARGS+=(-K \"$TMP_CURL_UPLOAD_FILE\")\n\tcurl \"${CURL_ARGS[@]}\"\n\tcheck_exit_status \"Could not upload files.\" \"$ERROR_UPLOAD\"\n}\n\ndelete_file() {\n\tlocal FILENAME=\"$1\"\n\tset_default_curl_options\n\tCURL_ARGS+=(-Q \"${REMOTE_DELETE_CMD}${REMOTE_PATH}${FILENAME}\")\n\tCURL_ARGS+=(\"$REMOTE_BASE_URL\")\n\tif [ \"${REMOTE_CMD_OPTIONS[0]}\" = \"-v\" ]; then\n\t\tcurl \"${CURL_ARGS[@]}\"\n\telse\n\t\tcurl \"${CURL_ARGS[@]}\" > /dev/null 2>&1\n\tfi\n\tif [ $? -ne 0 ]; then\n\t\twrite_log \"WARNING: Could not delete ${REMOTE_PATH}${FILENAME}, continuing...\"\n\tfi\n}\n\ndelete_file_buffered() {\n\techo \"-Q \\\"${REMOTE_DELETE_CMD}${REMOTE_PATH}${1}\\\"\" >> \"$TMP_CURL_DELETE_FILE\"\n}\n\nfire_delete_buffer() {\n\tif [ ! -f \"$TMP_CURL_DELETE_FILE\" ]; then\n\t\treturn 0\n\tfi\n\tprint_info \"Deleting ...\"\n\techo \"url = $REMOTE_BASE_URL\" >> \"$TMP_CURL_DELETE_FILE\"\n\tset_default_curl_options\n\tCURL_ARGS+=(-K \"$TMP_CURL_DELETE_FILE\")\n\tif [ \"${REMOTE_CMD_OPTIONS[0]}\" = \"-v\" ]; then\n\t\tcurl \"${CURL_ARGS[@]}\"\n\telse\n\t\tcurl \"${CURL_ARGS[@]}\" > /dev/null 2>&1\n\tfi\n\tif [ $? -ne 0 ]; then\n\t\twrite_log \"WARNING: Some files and/or directories could not be deleted.\"\n\tfi\n}\n\nget_file_content() {\n\tlocal SRC_FILE=\"$1\"\n\tset_default_curl_options\n\tCURL_ARGS+=(\"$REMOTE_BASE_URL/${REMOTE_PATH}${SRC_FILE}\")\n\tcurl \"${CURL_ARGS[@]}\"\n}\n\nset_local_sha1() {\n\tLOCAL_SHA1=$(git log -n 1 --pretty=format:%H)\n}\n\nupload_local_sha1() {\n\twrite_log \"Uploading commit log to $REMOTE_BASE_URL_DISPLAY/${REMOTE_PATH}$DEPLOYED_SHA1_FILE.\"\n\tif [ $DRY_RUN -ne 1 ]; then\n\t\techo \"$LOCAL_SHA1\" | upload_file - \"$DEPLOYED_SHA1_FILE\"\n\t\tcheck_curl_exit_status $? \"Could not upload.\" \"$ERROR_UPLOAD\"\n\tfi\n\tprint_info \"Last deployment changed from $DEPLOYED_SHA1 to $LOCAL_SHA1.\";\n\tPREV_DEPLOYED_SHA1=\"$DEPLOYED_SHA1\"\n\tDEPLOYED_SHA1=\"$LOCAL_SHA1\"\n}\n\npre_push_hook() {\n\tlocal hooks_dir=\"$(git config core.hooksPath)\"\n\tif [ -z \"$hooks_dir\" ];then\n\t\thooks_dir=\".git/hooks\"\n\tfi\n\tlocal hook=\"$hooks_dir/pre-ftp-push\"\n\n\tif [ \"$EXECUTE_PRE_HOOKS\" -eq 1 -a -e \"$hook\" ]; then\n\t\tlocal scope=\"${SCOPE:-$REMOTE_HOST}\"\n\t\tlocal url=\"$REMOTE_BASE_URL_DISPLAY/$REMOTE_PATH\"\n\t\twrite_log \"Trigger pre-ftp-push hook with: $scope, $url, $LOCAL_SHA1, $DEPLOYED_SHA1\"\n\t\tprint_status | $hook \"$scope\" \"$url\" \"$LOCAL_SHA1\" \"$DEPLOYED_SHA1\" || exit \"$ERROR_HOOK\"\n\tfi\n}\n\npost_push_hook() {\n\tlocal hooks_dir=\"$(git config core.hooksPath)\"\n\tif [ -z \"$hooks_dir\" ];then\n\t\thooks_dir=\".git/hooks\"\n\tfi\n\tlocal hook=\"$hooks_dir/post-ftp-push\"\n\n\tif [ \"$EXECUTE_POST_HOOKS\" -eq 1 -a -e \"$hook\" ]; then\n\t\tlocal scope=\"${SCOPE:-$REMOTE_HOST}\"\n\t\tlocal url=\"$REMOTE_BASE_URL_DISPLAY/$REMOTE_PATH\"\n\t\twrite_log \"Trigger post-ftp-push hook with: $scope, $url, $LOCAL_SHA1, $PREV_DEPLOYED_SHA1\"\n\t\t$hook \"$scope\" \"$url\" \"$LOCAL_SHA1\" \"$PREV_DEPLOYED_SHA1\" || [ \"$ENABLE_POST_HOOK_ERRORS\" -eq 0 ] || exit \"$ERROR_HOOK\"\n\tfi\n}\n\nprint_status() {\n\twhile IFS= read -r -d '' FILE_NAME; do\n\t\tprintf 'A %s\\0' \"$FILE_NAME\"\n\tdone < \"$TMP_GITFTP_UPLOAD\"\n\twhile IFS= read -r -d '' FILE_NAME; do\n\t\tprintf 'D %s\\0' \"$FILE_NAME\"\n\tdone < \"$TMP_GITFTP_DELETE\"\n}\n\nremote_lock() {\n\t[ $ENABLE_REMOTE_LCK -ne 1 ] && return\n\t[ $FORCE -ne 1 ] && check_remote_lock\n\n\tlocal LCK_MESSAGE=\"${USER}@$(hostname --fqdn) on $(date --utc --rfc-2822)\"\n\n\twrite_log \"Remote locking $LCK_MESSAGE.\"\n\tif [ $DRY_RUN -ne 1 ]; then\n\t\techo \"${LOCAL_SHA1}\\n${LCK_MESSAGE}\" | upload_file - \"$REMOTE_LCK_FILE\"\n\t\tcheck_exit_status \"Could not upload remote lock file.\" \"$ERROR_UPLOAD\"\n\tfi\n}\n\nrelease_remote_lock() {\n\t[ $ENABLE_REMOTE_LCK -ne 1 ] && return;\n\twrite_log \"Releasing remote lock.\"\n\tdelete_file \"$REMOTE_LCK_FILE\"\n}\n\nset_remote_host() {\n\t[ -z \"$URL\" ] && URL=\"$(get_config url)\"\n\tREMOTE_HOST=$(expr \"$URL\" : \".*://\\([[:alpha:]0-9\\.:-]*\\).*\")\n\t[ -z \"$REMOTE_HOST\" ] && REMOTE_HOST=$(expr \"$URL\" : \"\\([[:alpha:]0-9\\.:-]*\\).*\")\n\t[ -z \"$REMOTE_HOST\" ] && print_error_and_die \"Remote host not set.\" \"$ERROR_MISSING_ARGUMENTS\"\n}\n\nset_remote_protocol() {\n\t# Split protocol from url\n\tREMOTE_PROTOCOL=\"$(get_protocol_of_url \"$URL\")\"\n\tCURL_PROTOCOL=\"$REMOTE_PROTOCOL\"\n\n\t# Protocol found?\n\tif [ ! -z \"$REMOTE_PROTOCOL\" ]; then\n\t\tREMOTE_PATH=$(echo \"$URL\" | cut -d '/' -f 4-)\n\t\thandle_remote_protocol_options\n\t\treturn\n\tfi\n\n\t# Check if a unknown protocol is set, handle it or use default protocol\n\tlocal UNKNOWN_PROTOCOL=$(expr \"$URL\" : \"\\(.*:[/]*\\).*\")\n\tif [ -z \"$UNKNOWN_PROTOCOL\" ]; then\n\t\twrite_log \"Protocol not set, using default protocol $DEFAULT_PROTOCOL://.\"\n\t\tREMOTE_PROTOCOL=\"$DEFAULT_PROTOCOL\"\n\t\tCURL_PROTOCOL=\"$REMOTE_PROTOCOL\"\n\t\techo \"$URL\" | egrep -q \"/\" && REMOTE_PATH=$(echo \"$URL\" | cut -d '/' -f 2-)\n\t\thandle_remote_protocol_options\n\t\treturn\n\tfi\n\tprint_error_and_die \"Protocol unknown '$UNKNOWN_PROTOCOL'.\" \"$ERROR_UNKNOWN_PROTOCOL\"\n}\n\nset_remote_path() {\n\t# Check remote root directory\n\t[ -z \"$REMOTE_ROOT\" ] && REMOTE_ROOT=\"$(get_config remote-root)\"\n\tif [ ! -z \"$REMOTE_ROOT\" ]; then\n\t\t! echo \"$REMOTE_ROOT\" | egrep -q \"/$\" && REMOTE_ROOT=\"$REMOTE_ROOT/\"\n\t\tREMOTE_PATH=\"$REMOTE_ROOT$REMOTE_PATH\"\n\tfi\n\n\t# Add trailing slash if missing\n\tif [ ! -z \"$REMOTE_PATH\" ] && ! echo \"$REMOTE_PATH\" | egrep -q \"/$\"; then\n\t\twrite_log \"Added missing trailing / in path.\"\n\t\tREMOTE_PATH=\"$REMOTE_PATH/\"\n\tfi\n}\n\nset_deployed_sha1_failable() {\n\t# Return if commit is set by user interaction using --commit\n\tif [ -n \"$DEPLOYED_SHA1\" ]; then\n\t\treturn\n\tfi\n\t# Get the last commit (SHA) we deployed if not ignored or not found\n\twrite_log \"Retrieving last commit from $REMOTE_BASE_URL_DISPLAY/$REMOTE_PATH.\"\n\tDEPLOYED_SHA1=\"$(get_file_content \"$DEPLOYED_SHA1_FILE\")\"\n}\n\nset_deployed_sha1() {\n\tset_deployed_sha1_failable\n\tcheck_curl_exit_status $? \"Could not get last commit. Use 'git ftp init' for the initial push.\" \"$ERROR_DOWNLOAD\"\n\twrite_log \"Last deployed SHA1 for $REMOTE_HOST/$REMOTE_PATH is $DEPLOYED_SHA1.\"\n}\n\nset_deployed_sha1_for_push() {\n\tif [ \"$AUTO_INIT\" = 1 ]; then\n\t\tset_deployed_sha1_failable\n\t\tif [ \"$DEPLOYED_SHA1\" = \"\" ]; then\n\t\t\tcheck_remote_access\n\t\t\twrite_log \"Uploading all files since no commit was found at $REMOTE_BASE_URL_DISPLAY/$REMOTE_PATH.\"\n\t\t\tIGNORE_DEPLOYED=1\n\t\tfi\n\telse\n\t\tset_deployed_sha1\n\tfi\n}\n\nset_changed_files() {\n\tset_tmp\n\t# Get raw list of files\n\tif [ $IGNORE_DEPLOYED -ne 0 ]; then\n\t\twrite_log \"Taking all files.\";\n\t\tlist_all_files\n\telse\n\t\tlist_changed_files\n\tfi\n\tadd_include_files\n\tfilter_ignore_files \"$TMP_GITFTP_UPLOAD\" \"$TMP_GITFTP_DELETE\"\n\tif [ -s \"$TMP_GITFTP_UPLOAD\" ] || [ -s \"$TMP_GITFTP_DELETE\" ]; then\n\t\twrite_log \"Having files to sync.\";\n\telse\n\t\twrite_log \"No files to sync. All changed files ignored.\";\n\tfi\n}\n\nlist_all_files() {\n\tgit ls-files -z -- \"${SYNCROOT:-.}\" > \"$TMP_GITFTP_UPLOAD\"\n\ttouch \"$TMP_GITFTP_DELETE\"\n}\n\nlist_changed_files() {\n\tgit diff --name-only --no-renames --diff-filter=AM -z \"$DEPLOYED_SHA1\" -- \"$SYNCROOT\" 2>/dev/null > \"$TMP_GITFTP_UPLOAD\"\n\tgit diff --name-only --no-renames --diff-filter=D  -z \"$DEPLOYED_SHA1\" -- \"$SYNCROOT\" 2>/dev/null > \"$TMP_GITFTP_DELETE\"\n\tlocal git_diff_status=$?\n\tif [ \"$git_diff_status\" -ne 0 ]; then\n\t\tif [ $FORCE -eq 1 ]; then\n\t\t\tprint_info \"Unknown SHA1 object, could not determine changed files, taking all files.\"\n\t\t\tlist_all_files\n\t\t\treturn\n\t\tfi\n\t\tprint_info \"Unknown SHA1 object, make sure you are deploying the right branch and it is up-to-date.\"\n\t\techo -n \"Do you want to ignore and upload all files again? [y/N]: \"\n\t\tread ANSWER_STATE\n\t\tif [ \"$ANSWER_STATE\" != \"y\" ] && [ \"$ANSWER_STATE\" != \"Y\" ]; then\n\t\t\tprint_info \"Aborting...\"\n\t\t\tcleanup\n\t\t\ttest \"$ANSWER_STATE\" == \"\" && exit \"$ERROR_USAGE\"\n\t\t\texit 0\n\t\tfi\n\t\twrite_log \"Taking all files.\";\n\t\tlist_all_files\n\telif [ \"$LOCAL_SHA1\" == \"$DEPLOYED_SHA1\" ]; then\n\t\tprint_info \"No changed files for $REMOTE_HOST/$REMOTE_PATH. Everything up-to-date.\"\n\t\tcleanup\n\t\tunset_branch\n\t\texit 0\n\telif [ ! -s \"$TMP_GITFTP_UPLOAD\" -a ! -s \"$TMP_GITFTP_DELETE\" ]; then\n\t\twrite_log \"No changed files, but different commit ID. Changed files ignored or commit amended.\";\n\tfi\n}\n\nadd_include_files() {\n\t[ -f '.git-ftp-include' ] || return\n\tlocal tmp_include_sources=\"$TMP_DIR/include_sources_tmp\"\n\tgrep -v '^#.*$\\|^\\s*$' '.git-ftp-include' | tr -d '\\r' > \"$TMP_GITFTP_INCLUDE\"\n\tgrep '^!' \"$TMP_GITFTP_INCLUDE\" | sed 's/^!//' | while read TARGET; do\n\t\tadd_include_file \"$TARGET\"\n\tdone\n\tlocal AGAINST=\"${DEPLOYED_SHA1:-\"$(git hash-object -t tree /dev/null)\"}\"\n\tgrep ':' \"$TMP_GITFTP_INCLUDE\" | while read LINE; do\n\t\tlocal TARGET=\"${LINE%%:*}\"\n\t\tlocal SOURCE=\"${LINE#*:}\"\n\t\tif echo \"$SOURCE\" | grep -q '^/'; then\n\t\t\tSOURCE=\"${SOURCE#/}\"\n\t\telif [ -n \"$SYNCROOT\" ]; then\n\t\t\tSOURCE=\"$SYNCROOT/$SOURCE\"\n\t\tfi\n\t\tif ! git diff --quiet \"$AGAINST\" -- \"$SOURCE\"; then\n\t\t\tadd_include_file \"$TARGET\"\n\t\tfi\n\tdone\n\trm -f \"$tmp_include_sources\"\n\trm -f \"$TMP_GITFTP_INCLUDE\"\n}\n\nadd_include_file() {\n\tlocal TARGET=\"${1}\"\n\tif [ -e \"$TARGET\" ]; then\n\t\tif [ -d \"$TARGET\" ]; then\n\t\t\twrite_log \"Including all files in $TARGET for upload.\"\n\t\t\tfind \"$TARGET\" -type f -print0 >> \"$TMP_GITFTP_UPLOAD\"\n\t\telif [ -f \"$TARGET\" ]; then\n\t\t\twrite_log \"Including $TARGET for upload.\"\n\t\t\tprintf '%s\\0' \"$TARGET\" >> \"$TMP_GITFTP_UPLOAD\"\n\t\tfi\n\telse\n\t\tif echo \"$TARGET\" | grep -v '/$'; then\n\t\t\twrite_log \"Including $TARGET for deletion.\"\n\t\t\tprintf '%s\\0' \"$TARGET\" >> \"$TMP_GITFTP_DELETE\"\n\t\telse\n\t\t\twrite_log \"Deletion of directory $TARGET is not supported.\"\n\t\tfi\n\tfi\n}\n\nfilter_ignore_files() {\n\t[ -f '.git-ftp-ignore' ] || return\n\tlocal patterns=\"$TMP_DIR/ignore_tmp\"\n\tgrep -v '^#.*$\\|^\\s*$' '.git-ftp-ignore' | tr -d '\\r' > \"$patterns\"\n\tfilter_file \"$patterns\" \"$1\"\n\tfilter_file \"$patterns\" \"$2\"\n\trm -f \"$patterns\"\n}\n\nfilter_file() {\n\tglob_filter \"$1\" < \"$2\" > \"$TMP_DIR/filtered_tmp\"\n\tmv \"$TMP_DIR/filtered_tmp\" \"$2\"\n}\n\n# Original implementation http://stackoverflow.com/a/27718468/3377535\nglob_filter() {\n\tlocal patterns=\"$1\"\n\twhile IFS= read -r -d '' filename; do\n\t\tlocal hasmatch=0\n\t\twhile IFS= read -r pattern; do\n\t\t\tcase $filename in ($pattern) hasmatch=1; break ;; esac\n\t\tdone < \"$patterns\"\n\t\ttest $hasmatch = 1 || printf '%s\\0' \"$filename\"\n\tdone\n}\n\nhandle_file_sync() {\n\tif [ ! -s \"$TMP_GITFTP_UPLOAD\" ] && [ ! -s \"$TMP_GITFTP_DELETE\" ]; then\n\t\tprint_info \"There are no files to sync.\"\n\t\treturn\n\tfi\n\tsort -z -u -o \"$TMP_GITFTP_UPLOAD\" \"$TMP_GITFTP_UPLOAD\"\n\tsort -z -u -o \"$TMP_GITFTP_DELETE\" \"$TMP_GITFTP_DELETE\"\n\t# Calculate total file count\n\tlocal DONE_ITEMS=0\n\tlocal TOTAL_ITEMS=$(cat \"$TMP_GITFTP_UPLOAD\" \"$TMP_GITFTP_DELETE\" | tr -d -c '\\0' | wc -c)\n\tTOTAL_ITEMS=$((TOTAL_ITEMS+0)) # trims whitespaces produced by wc\n\tprint_info \"$TOTAL_ITEMS file$([ $TOTAL_ITEMS -ne 1 ] && echo 's') to sync:\"\n\n\twhile IFS= read -r -d '' FILE_NAME; do\n\t\t(( DONE_ITEMS++ ))\n\t\tprint_info \"[$DONE_ITEMS of $TOTAL_ITEMS] Buffered for upload '$FILE_NAME'.\"\n\t\tif is_submodule \"$FILE_NAME\"; then\n\t\t\thandle_submodule_sync \"${FILE_NAME#$SYNCROOT}\"\n\t\telif [ $DRY_RUN -ne 1 ]; then\n\t\t\tupload_file_buffered \"$FILE_NAME\"\n\t\tfi\n\tdone < \"$TMP_GITFTP_UPLOAD\"\n\tfire_upload_buffer\n\n\twhile IFS= read -r -d '' FILE_NAME; do\n\t\t(( DONE_ITEMS++ ))\n\t\tprint_info \"[$DONE_ITEMS of $TOTAL_ITEMS] Buffered for delete '$FILE_NAME'.\"\n\t\tif [ $DRY_RUN -ne 1 ]; then\n\t\t\tlocal file=\"${FILE_NAME#$SYNCROOT}\"\n\t\t\tdelete_file_buffered \"$file\"\n\t\tfi\n\tdone < \"$TMP_GITFTP_DELETE\"\n\tfire_delete_buffer\n}\n\nhandle_submodule_sync() {\n\tprint_info \"Handling submodule sync for $1.\"\n\tset_submodule_args\n\t(\n\t\tcd \"${SYNCROOT}$1\" && \"$0\" \"$ACTION\" \"${args[@]}\" \"$REMOTE_PROTOCOL://$REMOTE_HOST/${REMOTE_PATH}$1\"\n\t)\n\n\tlocal EXIT_CODE=$?\n\n\t# Pushing failed. Submodule may not be initialized\n\tif [ \"$EXIT_CODE\" -eq \"$ERROR_DOWNLOAD\" ] && [ \"$ACTION\" == \"push\" ]; then\n\t\tprint_info \"Could not push $1, trying to init...\"\n\t\t(\n\t\t\tcd \"${SYNCROOT}$1\" && \"$0\" init \"${args[@]}\" \"$REMOTE_PROTOCOL://$REMOTE_HOST/${REMOTE_PATH}$1\"\n\t\t)\n\t\tcheck_exit_status \"Failed to sync submodules.\" \"$ERROR_UPLOAD\"\n\telif [ $EXIT_CODE -ne 0 ]; then\n\t\tprint_error_and_die \"Failed to sync submodules.\" \"$ERROR_UPLOAD\"\n\tfi\n}\n\nsubmodule_catchup() {\n\t[ -z \"$GIT_SUBMODULES\" ] && return\n\tset_submodule_args\n\turl=\"$(git config git-ftp.url)\"\n\tprint_info \"Submodules are $GIT_SUBMODULES\"\n\tfor submodule in \"${GIT_SUBMODULES[@]}\"\n\tdo\n\t\tprint_info \"Catching up submodule $submodule.\"\n\t\tcd \"${SYNCROOT}$submodule\" && \"$0\" \"$ACTION\" \"${args[@]}\" \"$REMOTE_PROTOCOL://$REMOTE_HOST/${REMOTE_PATH}$submodule\"\n\tdone\n}\n\nset_submodule_args() {\n\targs=(--user \"$REMOTE_USER\")\n\t[ -n \"$REMOTE_PASSWD\" ] && args+=(--passwd \"$REMOTE_PASSWD\")\n\t[ -n \"$CURL_PRIVATE_KEY\" ] && args+=(--key \"$CURL_PRIVATE_KEY\")\n\t[ -n \"$CURL_PUBLIC_KEY\" ] && args+=(--pubkey \"$CURL_PUBLIC_KEY\")\n\n\t# Do not ask any questions for submodules\n\targs+=(--force)\n\n\tif [ $ACTIVE_MODE -eq 1 ]; then\n\t\targs+=(--active)\n\telse\n\t\tif [ $CURL_DISABLE_EPSV -eq 1 ]; then\n\t\t\targs+=(--disable-epsv)\n\t\tfi\n\tfi\n\n\t[ $INSECURE -eq 1 ] && args+=(--insecure)\n\t[ $IGNORE_DEPLOYED -eq 1 ] && args+=(--all)\n\n\tif [ $VERBOSE -eq 1 ]; then\n\t\targs+=(--verbose)\n\telif [ $VERBOSE -eq -1 ]; then\n\t\targs+=(--silent)\n\tfi\n\n\t[ $DRY_RUN -eq 1 ] && args+=(--dry-run)\n}\n\nhandle_remote_protocol_options() {\n\tif [ \"$REMOTE_PROTOCOL\" = \"sftp\" ]; then\n\t\tset_sftp_config\n\n\t\tif [ -n \"$CURL_PRIVATE_KEY\" ]; then\n\t\t\twrite_log \"Using ssh private key file $CURL_PRIVATE_KEY\"\n\t\t\tREMOTE_CMD_OPTIONS+=(\"--key\" \"$CURL_PRIVATE_KEY\")\n\t\tfi\n\t\tif [ -n \"$CURL_PUBLIC_KEY\" ]; then\n\t\t\twrite_log \"Using ssh public key file $CURL_PUBLIC_KEY\"\n\t\t\tREMOTE_CMD_OPTIONS+=(\"--pubkey\" \"$CURL_PUBLIC_KEY\")\n\t\telif [ -f \"${CURL_PRIVATE_KEY}.pub\" -a -r \"${CURL_PRIVATE_KEY}.pub\" ]; then\n\t\t\twrite_log \"Automatically using ssh public key file ${CURL_PRIVATE_KEY}.pub\"\n\t\t\tREMOTE_CMD_OPTIONS+=(\"--pubkey\" \"${CURL_PRIVATE_KEY}.pub\")\n\t\tfi\n\n\t\t# SFTP uses a different remove command and uses absolute paths\n\t\tREMOTE_DELETE_CMD=\"rm /\"\n\tfi\n\n\t# Check for using cacert\n\tif [ \"$REMOTE_PROTOCOL\" = \"ftpes\" -o \"$REMOTE_PROTOCOL\" = \"ftps\" ] && \\\n\t[ -n \"$REMOTE_CACERT\" -a -r \"$REMOTE_CACERT\" ]; then\n\t\tREMOTE_CMD_OPTIONS+=(\"--cacert\" \"$REMOTE_CACERT\")\n\tfi\n\n\t# Options for curl if using FTPES\n\tif [ \"$REMOTE_PROTOCOL\" = \"ftpes\" ]; then\n\t\tCURL_PROTOCOL=\"ftp\"\n\t\tREMOTE_CMD_OPTIONS+=(\"--ssl\")\n\tfi\n\n\t# Require users' explicit consent for insecure connections\n\t[ $INSECURE -eq 1 ] && REMOTE_CMD_OPTIONS+=(\"-k\")\n}\n\nhandle_lftp_settings() {\n\tLFTP_PROTOCOL=\"$REMOTE_PROTOCOL\"\n\t# Options for lftp if using FTPES\n\tif [ \"$REMOTE_PROTOCOL\" = \"ftpes\" ]; then\n\t\tLFTP_PROTOCOL=\"ftp\"\n\t\tLFTP_COMMAND_SETTINGS+=\"set ftp:ssl-force true && \"\n\t\tLFTP_COMMAND_SETTINGS+=\"set ftp:ssl-protect-data true && \"\n\t\tLFTP_COMMAND_SETTINGS+=\"set ftp:ssl-protect-list true && \"\n\tfi\n\n\t[ $INSECURE -eq 1 ] && LFTP_COMMAND_SETTINGS+=\"set ssl:verify-certificate no && \"\n\tLFTP_COMMAND_SETTINGS+=\"set ftp:list-options -a &&\"\n}\n\ninit_new_repository() {\n\t[ -z \"$URL\" ] && print_error_and_die \"Error: give a URL to snapshot.\" \"$ERROR_USAGE\"\n\n\t# Use the last part of the URL as destination directory by default\n\t[ -z \"$SNAPSHOT_DIR\" ] && SNAPSHOT_DIR=\"$(basename \"$URL\")\"\n\n\tDEPLOYED_SHA1=\"$(get_file_content \"$DEPLOYED_SHA1_FILE\")\"\n\tif [ \"$DEPLOYED_SHA1\" != \"\" ]; then\n\t\tprint_error_and_die \"Commit found at $URL/$DEPLOYED_SHA1_FILE.\n\nThe remote directory is managed by another Git repository already. If you want\nto start using a new repository, then delete $DEPLOYED_SHA1_FILE first. The old\nrepository will not be able to deploy to this remote any more. Aborting.\" \"$ERROR_USAGE\"\n\tfi\n\n\t# Make sure the destination directory exists\n\tmkdir -p \"$SNAPSHOT_DIR\" || print_error_and_die \"Error creating directory '$SNAPSHOT_DIR'. Aborting.\" \"$ERROR_FILESYSTEM\"\n\n\tif [ \"$(ls -A \"$SNAPSHOT_DIR\")\" ]; then\n\t\tprint_error_and_die \"Error: The destination directory '$SNAPSHOT_DIR' is not empty. Aborting.\" \"$ERROR_FILESYSTEM\"\n\tfi\n\n\tcd \"$SNAPSHOT_DIR\" || print_error_and_die \"Error entering '$SNAPSHOT_DIR'. Aborting.\" \"$ERROR_FILESYSTEM\"\n\tinfo=\"$(git init)\" || print_error_and_die \"Error initialising Git repository.\" \"$ERROR_GIT\"\n\tprint_info \"$info\"\n}\n\ncommit_snapshot() {\n\tgit add . > /dev/null || print_error_and_die \"Git: error adding changed files\" \"$ERROR_GIT\"\n\tgit commit -m \"Download $URL with git-ftp\" -q  > /dev/null || print_error_and_die \"Git: error committing the changes\" \"$ERROR_GIT\"\n}\n\nhandle_action() {\n\tcase \"$ACTION\" in\n\t\tinit)\n\t\t\taction_init\n\t\t\t;;\n\t\tpush)\n\t\t\taction_push\n\t\t\t;;\n\t\tcatchup)\n\t\t\taction_catchup\n\t\t\t;;\n\t\tshow)\n\t\t\taction_show\n\t\t\t;;\n\t\tlog)\n\t\t\taction_log\n\t\t\t;;\n\t\tdownload)\n\t\t\taction_download\n\t\t\t;;\n\t\tpull)\n\t\t\taction_pull\n\t\t\t;;\n\t\tsnapshot)\n\t\t\taction_snapshot\n\t\t\t;;\n\t\tadd-scope)\n\t\t\taction_add_scope\n\t\t\t;;\n\t\tremove-scope)\n\t\t\taction_remove_scope\n\t\t\t;;\n\t\t*)\n\t\t\tprint_error_and_die \"Action unknown.\" \"$ERROR_MISSING_ARGUMENTS\"\n\t\t\t;;\n\tesac\n}\n\nset_remote_user() {\n\t[ -z $REMOTE_USER ] && REMOTE_USER=\"$(get_config user)\"\n}\n\nset_remote_cacert() {\n\t[ -z $REMOTE_CACERT ] && REMOTE_CACERT=\"$(get_config cacert)\"\n}\n\nset_remote_password() {\n\tKEYCHAIN_USER=\"$(get_config keychain)\"\n\t[ -z \"$KEYCHAIN_USER\" ] || USE_KEYCHAIN=1\n\t[ -z \"$REMOTE_PASSWD\" ] && [ $USE_KEYCHAIN -eq 1 ] && get_keychain_password \"$KEYCHAIN_USER\"\n\t[ -z \"$REMOTE_PASSWD\" ] && REMOTE_PASSWD=\"$(get_config password)\"\n}\n\nset_branch() {\n\t: \"${BRANCH:=$(get_config branch)}\"\n\tif [ -n \"$BRANCH\" ]; then\n\t\tset_current_branch\n\t\twrite_log \"Checkout on branch $BRANCH\"\n\t\tgit checkout \"$BRANCH\" > /dev/null 2>&1 || print_error_and_die \"'$BRANCH' is not a valid branch! Exiting...\" \"ERROR_GIT\"\n\tfi\n}\n\nunset_branch() {\n\tif [ -n \"$CURRENT_BRANCH\" ]; then\n\t\twrite_log \"Checkout on branch $CURRENT_BRANCH\"\n\t\tgit checkout \"$CURRENT_BRANCH\" > /dev/null 2>&1\n\tfi\n}\n\nset_syncroot() {\n\t[ -z \"$SYNCROOT\" ] && SYNCROOT=\"$(get_config syncroot)\"\n\t[ -z \"$SYNCROOT\" ] && SYNCROOT=\".\"\n\tif [ \"$SYNCROOT\" ]; then\n\t\t[ -d \"$SYNCROOT\" ] || print_error_and_die \"'$SYNCROOT' is not a directory! Exiting...\" \"$ERROR_GIT\"\n\t\tSYNCROOT=\"$(echo \"$SYNCROOT\" | sed 's#/*$##')/\"\n\tfi\n\twrite_log \"Syncroot is '$SYNCROOT'.\"\n}\n\nset_sftp_config() {\n\t[ -z \"$CURL_PRIVATE_KEY\" ] && CURL_PRIVATE_KEY=\"$(get_config key)\"\n\t[ -z \"$CURL_PUBLIC_KEY\" ] && CURL_PUBLIC_KEY=\"$(get_config pubkey)\"\n}\n\nset_tmp() {\n\tif command -v mktemp > /dev/null 2>&1; then\n\t\tTMP_DIR=\"$(mktemp -d -t git-ftp-XXXXXX)\"\n\telse\n\t\tTMP_DIR=\"$(pwd)/.git/git-ftp-tmp\"\n\t\tmkdir -p \"$TMP_DIR\"\n\tfi\n\tTMP_CURL_UPLOAD_FILE=\"$TMP_DIR/curl_upload_list\"\n\tTMP_CURL_DELETE_FILE=\"$TMP_DIR/curl_delete_list\"\n\tTMP_GITFTP_UPLOAD=\"$TMP_DIR/upload_tmp\"\n\tTMP_GITFTP_DELETE=\"$TMP_DIR/delete_tmp\"\n\tTMP_GITFTP_INCLUDE=\"$TMP_DIR/include_tmp\"\n}\n\nset_remotes() {\n\tset_remote_host\n\twrite_log \"Host is '$REMOTE_HOST'.\"\n\n\tset_remote_user\n\twrite_log \"User is '$REMOTE_USER'.\"\n\n\tset_remote_password\n\tif [ -z \"$REMOTE_PASSWD\" ]; then\n\t\twrite_log \"No password is set.\"\n\telse\n\t\twrite_log \"Password is set.\"\n\tfi\n\n\tlocal REMOTE_LOGIN=''\n\tlocal DISPLAY_LOGIN=''\n\tif [ ! -z \"$REMOTE_USER\" ]; then\n\t\tlocal ENC_USER=\"$(urlencode \"$REMOTE_USER\")\"\n\t\tlocal ENC_PASSWD=\"$(urlencode \"$REMOTE_PASSWD\")\"\n\t\tREMOTE_LOGIN=\"$ENC_USER\":\"$ENC_PASSWD\"@\n\t\tDISPLAY_LOGIN=\"$ENC_USER\":'***'@\n\tfi\n\n\tset_remote_cacert\n\twrite_log \"CACert is '$REMOTE_CACERT'.\"\n\n\tset_insecure\n\twrite_log \"Insecure is '$INSECURE'.\"\n\t\n\tset_curl_disable_epsv\n\t[ $CURL_DISABLE_EPSV -eq 1 ] && write_log \"Disable EPSV is '$CURL_DISABLE_EPSV'.\"\n\n\tset_curl_proxy\n\twrite_log \"Proxy is '$CURL_PROXY'.\"\n\n\tset_remote_protocol\n\tset_remote_path\n\twrite_log \"Path is '$REMOTE_PATH'.\"\n\n\tREMOTE_BASE_URL=\"$CURL_PROTOCOL://$REMOTE_LOGIN$REMOTE_HOST\"\n\tREMOTE_BASE_URL_DISPLAY=\"$REMOTE_PROTOCOL://$DISPLAY_LOGIN$REMOTE_HOST\"\n\n\tset_deployed_sha1_file\n\twrite_log \"The remote sha1 is saved in file '$DEPLOYED_SHA1_FILE'.\"\n}\n\n# Original implementation http://stackoverflow.com/a/10660730/3377535\nurlencode() {\n\tlocal string=\"${1}\"\n\tlocal strlen=${#string}\n\tlocal keepset='[-_.~a-zA-Z0-9]'\n\t[ $# -gt 1 ] && keepset=\"${2}\"\n\tlocal encoded=\"\"\n\tfor (( pos=0 ; pos<strlen ; pos++ )); do\n\t\tc=${string:$pos:1}\n\t\tcase \"$c\" in\n\t\t\t$keepset ) o=\"${c}\" ;;\n\t\t\t* ) printf -v o '%%%02x' \"'$c\"\n\t\tesac\n\t\tencoded+=\"${o}\"\n\tdone\n\techo \"${encoded}\"\n}\n\nset_insecure() {\n\tlocal config=\"$(get_config insecure)\"\n\t[ -n \"$config\" ] && INSECURE=\"$(boolean $config)\"\n}\n\nset_curl_disable_epsv() {\n\tlocal config=\"$(get_config disable-epsv)\"\n\t[ -n \"$config\" ] && CURL_DISABLE_EPSV=\"$(boolean $config)\"\n}\n\nset_curl_proxy() {\n\t[ -z \"$CURL_PROXY\" ] && CURL_PROXY=\"$(get_config proxy)\"\n\t[ -z \"$CURL_PROXY\" ] && CURL_PROXY=\"$(git config --get http.proxy)\"\n}\n\nset_merge_args() {\n\tlocal config=\"$(get_config no-commit)\"\n\t[ -n \"$config\" ] && NO_COMMIT=1\n\t\n\tif [ $NO_COMMIT -eq 1 ]; then\n\t\tMERGE_ARGS=\"$MERGE_ARGS --no-commit --no-ff\"\n\tfi\n}\n\nget_protocol_of_url() {\n\techo \"$1\" | tr '[:upper:]' '[:lower:]' | egrep '^(ftp|sftp|ftps|ftpes)://' | cut -d ':' -f 1\n}\n\ndownload_remote_updates () {\n\twrite_log \"Mirroring ${REMOTE_HOST}/${REMOTE_PATH}\"\n\tlocal mirror_options=''\n\tif [ \"$DRY_RUN\" = 1 ]; then\n\t\tmirror_options=\"$mirror_options --dry-run\"\n\tfi\n\tif [ \"$VERBOSE\" -gt 0 ]; then\n\t\tmirror_options=\"$mirror_options -v\"\n\tfi\n\n\tdelete=\"--delete\"\n\tinclude=\"\"\n\tignoreall=\"\"\n\t# Mirror only the files from the diff between the FTP commit and the current branch/commit\n\tif [ \"$DOWNLOAD_CHANGED_ONLY\" -eq 1 ] && [ -n \"$CURRENT_BRANCH\" ]; then\n\t\tdelete=\"\"\n\t\tignoreall=\" --exclude '.*' --exclude '.*/'\"\n\t\tinclude=\"$(git diff \"$CURRENT_BRANCH\" --name-only | sed 's/^\\(.*\\)$/ --include \"\\1\"/' | tr -d '\\r\\n')\"\n\t\tfilenames=\"$(git diff $CURRENT_BRANCH --name-only | sed 's/^/\\t/')\"\n\t\twrite_log \"Only pulling diff files:$'\\n'$filenames\"\n\tfi\n\n\tignore=\"\"\n\tif [ -f '.git-ftp-ignore' ]; then\n\t\tignore=\"$(grep -v '^#' .git-ftp-ignore | awk 'NF' | sed 's/^\\(.*\\)$/--exclude-glob \"\\1\" /' | tr -d '\\r\\n') \"\n\tfi\n\tignore+=\"--exclude=^\\.git/ --exclude=^\\.git-ftp\\.log --exclude=^\\.git-ftp-ignore\"\n\n\thandle_lftp_settings\n\t\n\tlocal lftp_cd=\"\"\n\t[ -n $REMOTE_PATH ] && lftp_cd=\"cd ${REMOTE_PATH} &&\"\n\tlocal lftp_action=\"mirror $mirror_options $delete $ignoreall $include $ignore . $SYNCROOT &&\"\n\tlocal lftp_exit=\"wait all && exit\"\n\t\n\tlftp_command=\"$LFTP_COMMAND_SETTINGS $lftp_cd $lftp_action $lftp_exit\"\n\tout=\"$(lftp $LFTP_OPTIONS -e \"$lftp_command\" -u \"${REMOTE_USER},${REMOTE_PASSWD}\" \"${LFTP_PROTOCOL}://${REMOTE_HOST}/\" 2>&1)\"\n\tprint_info \"$out\"\n}\n\nset_scope() {\n\t[ -z \"$SCOPE\" ] && print_error_and_die \"Missing scope argument.\" \"$ERROR_MISSING_ARGUMENTS\"\n\t[ -z \"$URL\" ] && print_error_and_die \"Missing URL.\" \"$ERROR_MISSING_ARGUMENTS\"\n\n\t# URI without credentials\n\tif ! echo \"$URL\" | grep -q '@'; then\n\t\tgit config \"git-ftp.$SCOPE.url\" \"$URL\"\n\t\treturn\n\tfi\n\n\t# set url\n\tlocal protocol=$(get_protocol_of_url \"$URL\")\n\tlocal path=\"${URL##*@}\"\n\tgit config \"git-ftp.$SCOPE.url\" \"${protocol}://${path}\"\n\n\t# strip protocol\n\tlocal credentials=${URL#${protocol}://}\n\t# cut at last '@' occurrence\n\tlocal credentials=${credentials%${URL##*@}}\n\t# strip trailing '@'\n\tlocal credentials=${credentials%?}\n\n\tlocal colons=${credentials//[^:]/}\n\tcase ${#colons} in\n\t\t0)\n\t\t\t# assume only username\n\t\t\tgit config \"git-ftp.$SCOPE.user\" \"${credentials}\"\n\t\t\t;;\n\t\t1)\n\t\t\t# credentials have both username and password\n\t\t\tgit config \"git-ftp.$SCOPE.user\" \"${credentials%:*}\"\n\t\t\tgit config \"git-ftp.$SCOPE.password\" \"${credentials#*:}\"\n\t\t\t;;\n\t\t*)\n\t\t\t# we can't know where to cut with multiple ':'\n\t\t\tprint_info \"Warning, multiple ':' characters detected, only URL was set in scope.\"\n\t\t\tprint_info \"Use --user and --passwd options to set login and password respectively.\"\n\tesac\n}\n\nremove_scope() {\n\t[ -z \"$SCOPE\" ] && print_error_and_die \"Missing scope argument.\" \"$ERROR_MISSING_ARGUMENTS\"\n\n\tgit config --remove-section \"git-ftp.$SCOPE\" &>/dev/null\n\n\t[ $? -ne 0 ] && print_error_and_die \"Cannot find scope $SCOPE.\" \"$ERROR_GIT\"\n\tprint_info \"Successfully removed scope $SCOPE.\"\n}\n\nset_current_branch() {\n\tlocal current=\"$( (git symbolic-ref HEAD 2> /dev/null || git rev-parse HEAD 2> /dev/null) | sed \"s#^refs/heads/##\")\"\n\tif [ \"$?\" -ne \"0\" ]; then\n\t\tset_local_sha1\n\t\tcurrent=\"$LOCAL_SHA1\"\n\tfi\n\twrite_log \"currently on branch $current\"\n\tCURRENT_BRANCH=\"$current\"\n}\n\nfetch_remote() {\n\tdownload_remote_updates\n\t[ $DRY_RUN -ne 1 ] || return\n\tgit add --all\n\tgit commit -m '[git-ftp] remotely untracked modifications' -m \"`git diff HEAD --name-status`\" | grep -v '^#'\n\tset_local_sha1\n\tupload_local_sha1\n}\n\nhandle_fetch() {\n\tlocal old_sha1=$DEPLOYED_SHA1\n\tgit checkout $DEPLOYED_SHA1 2> /dev/null\n\t# If .gitignore changes between commits, untracked file can remain.\n\t# These files are preserved in a stash record.\n\tlocal stash=$(git stash -u)\n\tremote_lock\n\tfetch_remote\n\trelease_remote_lock\n\t[ \"$stash\" != 'No local changes to save' ] && git stash pop\n\tgit checkout \"$CURRENT_BRANCH\" 2> /dev/null\n\tif [ $DRY_RUN -ne 1 ] && [ $old_sha1 != $LOCAL_SHA1 ]; then\n\t\tprint_info \"From $REMOTE_HOST/$REMOTE_PATH\"\n\t\tprint_info \"   $old_sha1..$LOCAL_SHA1\"\n\tfi\n}\n\n# ------------------------------------------------------------\n# Actions\n# ------------------------------------------------------------\naction_init() {\n\tcheck_git_version\n\tcheck_is_git_project\n\tcheck_is_dirty_repository\n\tset_branch\n\tset_remotes\n\tcheck_curl_access\n\tcheck_remote_access\n\tcheck_deployed_sha1\n\tset_local_sha1\n\tset_changed_files\n\tpre_push_hook\n\tremote_lock\n\thandle_file_sync\n\tupload_local_sha1\n\trelease_remote_lock\n\tpost_push_hook\n\tunset_branch\n}\n\naction_push() {\n\tcheck_git_version\n\tcheck_is_git_project\n\tcheck_is_dirty_repository\n\tset_branch\n\tset_remotes\n\tcheck_curl_access\n\tset_deployed_sha1_for_push\n\tset_local_sha1\n\tset_changed_files\n\tpre_push_hook\n\tremote_lock\n\thandle_file_sync\n\tupload_local_sha1\n\trelease_remote_lock\n\tpost_push_hook\n\tunset_branch\n}\n\naction_catchup() {\n\tcheck_is_git_project\n\tcheck_is_dirty_repository\n\tset_branch\n\tset_remotes\n\tcheck_curl_access\n\tset_local_sha1\n\tupload_local_sha1\n\tsubmodule_catchup\n\tunset_branch\n}\n\naction_show() {\n\tset_remotes\n\tcheck_curl_access\n\tDEPLOYED_SHA1=\"$(get_file_content \"$DEPLOYED_SHA1_FILE\")\"\n\tcheck_exit_status \"Could not get uploaded log file\" \"$ERROR_DOWNLOAD\"\n\tgit show \"$DEPLOYED_SHA1\"\n}\n\naction_log() {\n\tset_remotes\n\tcheck_curl_access\n\tDEPLOYED_SHA1=\"$(get_file_content \"$DEPLOYED_SHA1_FILE\")\"\n\tcheck_exit_status \"Could not get uploaded log file\" \"$ERROR_DOWNLOAD\"\n\tgit log \"$DEPLOYED_SHA1\"\n}\n\naction_download() {\n\tcheck_lftp_available\n\tcheck_is_git_project\n\tcheck_is_dirty_repository\n\tcheck_for_untracked_files\n\tset_remotes\n\tcheck_curl_access\n\tremote_lock\n\tdownload_remote_updates\n\trelease_remote_lock\n}\n\naction_pull() {\n\tcheck_lftp_available\n\tcheck_is_git_project\n\tcheck_is_dirty_repository\n\tset_current_branch\n\tset_remotes\n\tcheck_curl_access\n\tset_deployed_sha1\n\thandle_fetch\n\tset_merge_args\n\tgit merge $MERGE_ARGS $LOCAL_SHA1\n}\n\naction_snapshot() {\n\tcheck_lftp_available\n\tset_remotes\n\tcheck_curl_access\n\tinit_new_repository\n\tdownload_remote_updates\n\tcommit_snapshot\n\taction_catchup\n}\n\naction_add_scope() {\n\tcheck_is_git_project\n\tset_scope\n}\n\naction_remove_scope() {\n\tcheck_is_git_project\n\tremove_scope\n}\n# ------------------------------------------------------------\n# Checks\n# ------------------------------------------------------------\ncheck_curl_access() {\n\twrite_log \"Check if curl is functional.\"\n\tcommand -v curl >/dev/null 2>&1\n\tcheck_exit_status \"curl is not available\" \"$ERROR_DOWNLOAD\"\n\n\tlocal curl_protocol=\"$REMOTE_PROTOCOL\"\n\t# The ftpes protocol is FTP + SSL\n\tif [ \"$curl_protocol\" == \"ftpes\" ]; then\n\t\tcurl_protocol=\"ftp\"\n\t\tcurl --version | grep \"^Features: \" | grep -qw \"SSL\"\n\t\tcheck_exit_status \"Protocol '$REMOTE_PROTOCOL' not supported by curl\" \"$ERROR_DOWNLOAD\"\n\tfi\n\tcurl --version | grep \"^Protocols: \" | grep -qw \"$curl_protocol\"\n\tcheck_exit_status \"Protocol '$REMOTE_PROTOCOL' not supported by curl\" \"$ERROR_DOWNLOAD\"\n}\ncheck_remote_access() {\n\twrite_log \"Check if $REMOTE_BASE_URL_DISPLAY is accessible.\"\n\tset_default_curl_options\n\tCURL_ARGS+=(--ftp-create-dirs)\n\tCURL_ARGS+=(\"$REMOTE_BASE_URL/$REMOTE_PATH\")\n\tcurl \"${CURL_ARGS[@]}\" > /dev/null\n\t\n\tlocal EXIT_CODE=$?\n\tif [ \"$REMOTE_PROTOCOL\" == \"sftp\" ] && [ $EXIT_CODE -eq 78 ]; then\n\t\twrite_log \"Create $REMOTE_PATH\"\n\t\tcurl \"${CURL_ARGS[@]}\" -Q \"MKDIR $REMOTE_PATH\" > /dev/null\n\t\tEXIT_CODE=$?\n\tfi\n\n\tcheck_curl_exit_status \"$EXIT_CODE\" \"\" \"$ERROR_UPLOAD\"\n}\n\ncheck_deployed_sha1() {\n\twrite_log \"Check if $REMOTE_BASE_URL_DISPLAY/$REMOTE_PATH is clean.\"\n\tDEPLOYED_SHA1=\"$(get_file_content \"$DEPLOYED_SHA1_FILE\")\"\n\tif [ \"$DEPLOYED_SHA1\" != \"\" ]; then\n\t\tprint_error_and_die \"Commit found, use 'git ftp push' to sync. Exiting...\" \"$ERROR_USAGE\"\n\tfi\n\t# Make sure if sync all files if no sha1 was found\n\tIGNORE_DEPLOYED=1\n}\n\ncheck_git_version() {\n\tlocal GIT_VERSION=\"$(git --version | cut -d ' ' -f 3)\"\n\tlocal MAJOR=\"$(echo \"$GIT_VERSION\" | cut -d '.' -f 1)\"\n\tlocal MINOR=\"$(echo \"$GIT_VERSION\" | cut -d '.' -f 2)\"\n\tif [ \"$MAJOR\" -lt 2 ] && [ \"$MINOR\" -lt 7 ]; then\n\t\tprint_error_and_die \"Git is too old, 1.7.0 or higher supported only.\" \"$ERROR_GIT\"\n\tfi\n}\n\ncheck_remote_lock() {\n\twrite_log \"Checking remote lock.\"\n\tlocal LCK_CONTENT=\"$(get_file_content \"$REMOTE_LCK_FILE\" 2>/dev/null)\"\n\tif [ -n \"$LCK_CONTENT\" ]; then\n\t\tlocal LCK_SHA1=$(echo \"$LCK_CONTENT\" | head -n 1)\n\t\twrite_log \"Remote lock sha1 $LCK_SHA1.\"\n\t\twrite_log \"Local sha1 $LOCAL_SHA1.\"\n\t\tif [ \"$LCK_SHA1\" != \"$LOCAL_SHA1\" ]; then\n\t\t\tlocal LCK_USER=$(echo \"$LCK_CONTENT\" | tail -n 1)\n\t\t\tprint_error_and_die \"Remote locked by $LCK_USER.\" \"$ERROR_REMOTE_LOCKED\"\n\t\tfi\n\tfi\n}\n\ncheck_is_git_project() {\n\tlocal git_project_dir=\"$(git rev-parse --show-toplevel 2>/dev/null)\"\n\t[ -z \"$git_project_dir\" ] &&  print_error_and_die \"Not a Git project? Exiting...\" \"$ERROR_GIT\"\n\tcd \"$git_project_dir\"\n}\n\ncheck_is_dirty_repository() {\n\t[ \"$(git status -uno --porcelain | wc -l)\" -ne 0 ] && print_error_and_die \"Dirty repository: Having uncommitted changes. Exiting...\" \"$ERROR_GIT\"\n}\n\ncheck_for_untracked_files() {\n\t[ $(git status --porcelain | wc -l) -ne 0 ] && print_error_and_die \"Dirty repository: Having untracked files. Exiting...\" $ERROR_GIT\n}\n\ncheck_lftp_available() {\n\tcommand -v lftp > /dev/null || print_error_and_die \"lftp not found. This operation requires lftp installed.\" $ERROR_GIT\n}\n\n# ------------------------------------------------------------\n# Main\n# ------------------------------------------------------------\nmain() {\n\tset_syncroot\n\tcache_git_submodules\n\thandle_action\n\tcleanup\n\tprint_error_log\n\texit 0\n}\n\nwrite_log \"git-ftp version $VERSION running on $(uname -a)\"\n\n# 2 args are needed: action and url\nif [ $# = 0 ]; then\n\tusage;\nfi\n\nwhile test $# != 0\ndo\n\tcase \"$1\" in\n\t\tinit|push|catchup|show|download|pull|add-scope|remove-scope|log|snapshot)\n\t\t\tACTION=\"$1\"\n\t\t\t# catch scope\n\t\t\tif [ \"$1\" == \"add-scope\" ] || [ \"$1\" == \"remove-scope\" ]; then\n\t\t\t\tSCOPE=\"$2\"\n\t\t\t\tif ! echo \"$SCOPE\" | grep -q '^[-0-9a-zA-Z_/]*$' ; then\n\t\t\t\t\tprint_error_and_die \"Invalid scope name. Only these characters are allowed: 0-9 a-z A-Z - _ /\" \"$ERROR_USAGE\"\n\t\t\t\tfi\n\t\t\t\tshift\n\t\t\tfi\n\t\t\t;;\n\t\t-h|--h|--he|--hel|--help|help)\n\t\t\tusage_long\n\t\t\t;;\n\t\t-u|--user*)\n\t\t\tcase \"$#,$1\" in\n\t\t\t\t*,*=*)\n\t\t\t\t\tREMOTE_USER=$(expr \"z$1\" : 'z-[^=]*=\\(.*\\)')\n\t\t\t\t\t;;\n\t\t\t\t1,*)\n\t\t\t\t\tREMOTE_USER=\"$USER\"\n\t\t\t\t\t;;\n\t\t\t\t*)\n\t\t\t\t\tif ! echo \"$2\" | egrep -q '^-'; then\n\t\t\t\t\t\tREMOTE_USER=\"$2\"\n\t\t\t\t\t\tshift\n\t\t\t\t\telse\n\t\t\t\t\t\tREMOTE_USER=\"$USER\"\n\t\t\t\t\tfi\n\t\t\t\t\t;;\n\t\t\tesac\n\t\t\t;;\n\t\t-s|--scope*)\n\t\t\tcase \"$#,$1\" in\n\t\t\t\t*,*=*)\n\t\t\t\t\tSCOPE=$(expr \"z$1\" : 'z-[^=]*=\\(.*\\)')\n\t\t\t\t\t;;\n\t\t\t\t1,*)\n\t\t\t\t\tcheck_is_git_project && SCOPE=\"$(git rev-parse --abbrev-ref HEAD)\"\n\t\t\t\t\t;;\n\t\t\t\t*)\n\t\t\t\t\tif ! echo \"$2\" | egrep -q '^-'; then\n\t\t\t\t\t\tSCOPE=\"$2\"\n\t\t\t\t\t\tshift\n\t\t\t\t\telse\n\t\t\t\t\t\tcheck_is_git_project && SCOPE=\"$(git rev-parse --abbrev-ref HEAD)\"\n\t\t\t\t\tfi\n\t\t\t\t\t;;\n\t\t\tesac\n\t\t\tif ! echo \"$SCOPE\" | grep -q '^[-0-9a-zA-Z_/]*$' ; then\n\t\t\t\tprint_error_and_die \"Invalid scope name '${SCOPE}'.\" \"$ERROR_USAGE\"\n\t\t\tfi\n\t\t\twrite_log \"Using scope $SCOPE if available\"\n\t\t\t;;\n\t\t-b|--branch*)\n\t\t\tcase \"$#,$1\" in\n\t\t\t\t*,*=*)\n\t\t\t\t\tBRANCH=$(expr 'z$1' : 'z-[^=]*=\\(.*\\)')\n\t\t\t\t\t;;\n\t\t\t\t1,*)\n\t\t\t\t\tprint_error_and_die \"Too few arguments for option --branch.\" \"$ERROR_MISSING_ARGUMENTS\"\n\t\t\t\t\t;;\n\t\t\t\t*)\n\t\t\t\t\tif ! echo \"$2\" | egrep -q '^-'; then\n\t\t\t\t\t\tBRANCH=\"$2\"\n\t\t\t\t\t\tshift\n\t\t\t\t\telse\n\t\t\t\t\t\tprint_error_and_die \"Too few arguments for option --branch.\" \"$ERROR_MISSING_ARGUMENTS\"\n\t\t\t\t\tfi\n\t\t\t\t\t;;\n\t\t\tesac\n\t\t\t;;\n\t\t--syncroot*)\n\t\t\tcase \"$#,$1\" in\n\t\t\t\t*,*=*)\n\t\t\t\t\tSYNCROOT=\"$(expr \"z$1\" : 'z-[^=]*=\\(.*\\)')\"\n\t\t\t\t\t;;\n\t\t\t\t1,*)\n\t\t\t\t\tprint_error_and_die \"Too few arguments for option --syncroot.\" \"$ERROR_MISSING_ARGUMENTS\"\n\t\t\t\t\t;;\n\t\t\t\t*)\n\t\t\t\t\tif ! echo \"$2\" | egrep -q '^-'; then\n\t\t\t\t\t\tSYNCROOT=\"$2\"\n\t\t\t\t\t\tshift\n\t\t\t\t\telse\n\t\t\t\t\t\tprint_error_and_die \"Too few arguments for option --syncroot.\" \"$ERROR_MISSING_ARGUMENTS\"\n\t\t\t\t\tfi\n\t\t\t\t\t;;\n\t\t\tesac\n\t\t\twrite_log \"Using syncroot $SYNCROOT if exists.\"\n\t\t\t;;\n\t\t-c|--commit*)\n\t\t\tcase \"$#,$1\" in\n\t\t\t\t*,*=*)\n\t\t\t\t\tDEPLOYED_SHA1=$(expr \"z$1\" : 'z-[^=]*=\\(.*\\)')\n\t\t\t\t\t;;\n\t\t\t\t1,*)\n\t\t\t\t\tprint_error_and_die \"Too few arguments for option -c.\" \"$ERROR_MISSING_ARGUMENTS\"\n\t\t\t\t\t;;\n\t\t\t\t*)\n\t\t\t\t\tif ! echo \"$2\" | egrep -q '^-'; then\n\t\t\t\t\t\tDEPLOYED_SHA1=\"$2\"\n\t\t\t\t\t\tshift\n\t\t\t\t\telse\n\t\t\t\t\t\tprint_error_and_die \"Too few arguments for option -c.\" \"$ERROR_MISSING_ARGUMENTS\"\n\t\t\t\t\tfi\n\t\t\t\t\t;;\n\t\t\tesac\n\t\t\twrite_log \"Using commit $DEPLOYED_SHA1 as deployed.\"\n\t\t\t;;\n\t\t-p|--passwd*)\n\t\t\tcase \"$#,$1\" in\n\t\t\t\t*,*=*)\n\t\t\t\t\tREMOTE_PASSWD=$(expr \"z$1\" : 'z-[^=]*=\\(.*\\)')\n\t\t\t\t\t;;\n\t\t\t\t1,*)\n\t\t\t\t\tprint_error_and_die \"Too few arguments for option -p.\" \"$ERROR_MISSING_ARGUMENTS\"\n\t\t\t\t\t;;\n\t\t\t\t*)\n\t\t\t\t\tif ! echo \"$2\" | egrep -q '^-'; then\n\t\t\t\t\t\tREMOTE_PASSWD=\"$2\"\n\t\t\t\t\t\tshift\n\t\t\t\t\telse\n\t\t\t\t\t\tprint_error_and_die \"Too few arguments for option -p. Maybe the manual will help: https://github.com/git-ftp/git-ftp/blob/master/man/git-ftp.1.md#passwords\" \"$ERROR_MISSING_ARGUMENTS\"\n\t\t\t\t\tfi\n\t\t\t\t\t;;\n\t\t\tesac\n\t\t\t;;\n\t\t-P|--ask-passwd)\n\t\t\task_for_passwd\n\t\t\t;;\n\t\t-k|--keychain*)\n\t\t\tUSE_KEYCHAIN=1\n\t\t\twrite_log \"Enabled keychain.\"\n\t\t\tcase \"$#,$1\" in\n\t\t\t\t*,*=*)\n\t\t\t\t\tKEYCHAIN_USER=$(expr \"z$1\" : 'z-[^=]*=\\(.*\\)')\n\t\t\t\t\t;;\n\t\t\t\t1,*)\n\t\t\t\t\t# Nothing is handed over, this is okay\n\t\t\t\t\t;;\n\t\t\t\t*)\n\t\t\t\t\tif ! echo \"$2\" | egrep -q '^-'; then\n\t\t\t\t\t\tKEYCHAIN_USER=\"$2\"\n\t\t\t\t\t\tshift\n\t\t\t\t\tfi\n\t\t\t\t\t;;\n\t\t\tesac\n\t\t\t;;\n\t\t-a|--all)\n\t\t\tIGNORE_DEPLOYED=1\n\t\t\t;;\n\t\t-l|--lock)\n\t\t\tif [ $ENABLE_REMOTE_LCK -ne 1 ]; then\n\t\t\t\twrite_log \"Enabling remote locking feature.\"\n\t\t\t\tENABLE_REMOTE_LCK=1\n\t\t\telse\n\t\t\t\twrite_log \"Disabling remote locking feature.\"\n\t\t\t\tENABLE_REMOTE_LCK=0\n\t\t\tfi\n\t\t\t;;\n\t\t-D|--dry-run)\n\t\t\tDRY_RUN=1\n\t\t\twrite_log \"Running dry, won't do anything.\"\n\t\t\t;;\n\t\t-n|--silent)\n\t\t\tVERBOSE=-1\n\t\t\tREMOTE_CMD_OPTIONS=(\"-s\")\n\t\t\t;;\n\t\t-v|--verbose)\n\t\t\tVERBOSE=1\n\t\t\t[ -n \"$LOG_CACHE\" ] && echo -e \"$LOG_CACHE\"\n\t\t\tREMOTE_CMD_OPTIONS=()\n\t\t\t;;\n\t\t-vv)\n\t\t\tVERBOSE=1\n\t\t\t[ -n \"$LOG_CACHE\" ] && echo -e \"$LOG_CACHE\"\n\t\t\tREMOTE_CMD_OPTIONS=(\"-v\")\n\t\t\tLFTP_OPTIONS=\"-d\"\n\t\t\t;;\n\t\t-f|--force)\n\t\t\tFORCE=1\n\t\t\twrite_log \"Forced mode enabled.\"\n\t\t\t;;\n\t\t--version|version)\n\t\t\techo \"git-ftp version $VERSION\"\n\t\t\texit 0\n\t\t\t;;\n\t\t--insecure)\n\t\t\tINSECURE=1\n\t\t\twrite_log \"Insecure SSL/TLS connection allowed\"\n\t\t\t;;\n\t\t--cacert*)\n\t\t\tcase \"$#,$1\" in\n\t\t\t\t*,*=*)\n\t\t\t\t\tREMOTE_CACERT=$(expr \"z$1\" : 'z-[^=]*=\\(.*\\)')\n\t\t\t\t\t;;\n\t\t\t\t1,*)\n\t\t\t\t\tprint_error_and_die \"Too few arguments for option --cacert\" \"$ERROR_MISSING_ARGUMENTS\"\n\t\t\t\t\t;;\n\t\t\t\t*)\n\t\t\t\t\tif ! echo \"$2\" | egrep -q '^-'; then\n\t\t\t\t\t\tREMOTE_CACERT=\"$2\"\n\t\t\t\t\t\tshift\n\t\t\t\t\telse\n\t\t\t\t\t\tprint_error_and_die \"Too few arguments for option --cacert\" \"$ERROR_MISSING_ARGUMENTS\"\n\t\t\t\t\tfi\n\t\t\t\t\t;;\n\t\t\tesac\n\t\t\t;;\n\t\t--key)\n\t\t\tcase \"$#,$1\" in\n\t\t\t\t*,*=*)\n\t\t\t\t\tCURL_PRIVATE_KEY=$(expr \"z$1\" : 'z-[^=]*=\\(.*\\)')\n\t\t\t\t\t;;\n\t\t\t\t1,*)\n\t\t\t\t\tprint_error_and_die \"Too few arguments for option --key.\" \"$ERROR_MISSING_ARGUMENTS\"\n\t\t\t\t\t;;\n\t\t\t\t*)\n\t\t\t\t\tif ! echo \"$2\" | egrep -q '^-'; then\n\t\t\t\t\t\tCURL_PRIVATE_KEY=\"$2\"\n\t\t\t\t\t\tshift\n\t\t\t\t\telse\n\t\t\t\t\t\tprint_error_and_die \"Too few arguments for option --key.\" \"$ERROR_MISSING_ARGUMENTS\"\n\t\t\t\t\tfi\n\t\t\t\t\t;;\n\t\t\tesac\n\t\t\t;;\n\t\t--pubkey)\n\t\t\tcase \"$#,$1\" in\n\t\t\t\t*,*=*)\n\t\t\t\t\tCURL_PUBLIC_KEY=$(expr \"z$1\" : 'z-[^=]*=\\(.*\\)')\n\t\t\t\t\t;;\n\t\t\t\t1,*)\n\t\t\t\t\tprint_error_and_die \"Too few arguments for option --pubkey.\" \"$ERROR_MISSING_ARGUMENTS\"\n\t\t\t\t\t;;\n\t\t\t\t*)\n\t\t\t\t\tif ! echo \"$2\" | egrep -q '^-'; then\n\t\t\t\t\t\tCURL_PUBLIC_KEY=\"$2\"\n\t\t\t\t\t\tshift\n\t\t\t\t\telse\n\t\t\t\t\t\tprint_error_and_die \"Too few arguments for option --pubkey.\" \"$ERROR_MISSING_ARGUMENTS\"\n\t\t\t\t\tfi\n\t\t\t\t\t;;\n\t\t\tesac\n\t\t\t;;\n\t\t-A|--active)\n\t\t\tACTIVE_MODE=1\n\t\t\twrite_log \"Using active mode.\"\n\t\t\t;;\n\t\t--no-commit)\n\t\t\tNO_COMMIT=1\n\t\t\twrite_log \"Adding --no-commit to merge arguments\"\n\t\t\t;;\n\t\t--changed-only)\n\t\t\tDOWNLOAD_CHANGED_ONLY=1\n\t\t\twrite_log \"Downloading only changed files.\"\n\t\t\t;;\n\t\t--disable-epsv)\n\t\t\tif [ $ACTIVE_MODE -eq 0 ]; then\n\t\t\t\tCURL_DISABLE_EPSV=1\n\t\t\t\twrite_log \"Disabling EPSV.\"\n\t\t\tfi\n\t\t\t;;\n\t\t--remote-root)\n\t\t\tREMOTE_ROOT=\"$2\"\n\t\t\tshift\n\t\t\t;;\n\t\t--no-verify)\n\t\t\tEXECUTE_PRE_HOOKS=0\n\t\t\tshift\n\t\t\t;;\n\t\t--no-post-hooks)\n\t\t\tEXECUTE_POST_HOOKS=0\n\t\t\tshift\n\t\t\t;;\n\t\t--enable-post-errors)\n\t\t\tENABLE_POST_HOOK_ERRORS=1\n\t\t\tshift\n\t\t\t;;\n\t\t--auto-init)\n\t\t\tif [ $AUTO_INIT -eq 0 ]; then\n\t\t\t\tAUTO_INIT=1\n\t\t\t\twrite_log \"Auto init if needed.\"\n\t\t\tfi\n\t\t\t;;\n\t\t-x|--proxy*)\n\t\t\tcase \"$#,$1\" in\n\t\t\t\t*,*=*)\n\t\t\t\t\tCURL_PROXY=$(expr \"z$1\" : 'z-[^=]*=\\(.*\\)')\n\t\t\t\t\t;;\n\t\t\t\t1,*)\n\t\t\t\t\tprint_error_and_die \"Too few arguments for option --proxy.\" \"$ERROR_MISSING_ARGUMENTS\"\n\t\t\t\t\t;;\n\t\t\t\t*)\n\t\t\t\t\tif ! echo \"$2\" | egrep -q '^-'; then\n\t\t\t\t\t\tCURL_PROXY=\"$2\"\n\t\t\t\t\t\tshift\n\t\t\t\t\telse\n\t\t\t\t\t\tprint_error_and_die \"Too few arguments for option --proxy.\" \"$ERROR_MISSING_ARGUMENTS\"\n\t\t\t\t\tfi\n\t\t\t\t\t;;\n\t\t\tesac\n\t\t\t;;\n\t\t*)\n\t\t\t# Pass thru anything that may be meant for fetch.\n\t\t\tif [ -n \"$1\" ]; then\n\t\t\t\tif [ -z \"$URL\" ]; then\n\t\t\t\t\tURL=\"$1\"\n\t\t\t\telif [ \"$ACTION\" == \"snapshot\" -a -z \"$SNAPSHOT_DIR\" ]; then\n\t\t\t\t\tSNAPSHOT_DIR=\"$1\"\n\t\t\t\telse\n\t\t\t\t\tprint_error_and_die \"Unrecognised option: $1\" \"$ERROR_MISSING_ARGUMENTS\"\n\t\t\t\tfi\n\t\t\tfi\n\t\t\t;;\n\tesac\n\tshift\ndone\nmain\n"
        },
        {
          "name": "issue_template.md",
          "type": "blob",
          "size": 0.27734375,
          "content": "### Bug / Enhancement / Question ?\n\n* How to reproduce the issue?\n* Can you point to a Git repository to reproduce it?\n* Or can you describe the directory structure?\n\n### Environment\n\nPlease copy the output of the following commands.\n\n```sh\necho \"$SHELL\"\nuname -a\ngit-ftp version\n```\n"
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}