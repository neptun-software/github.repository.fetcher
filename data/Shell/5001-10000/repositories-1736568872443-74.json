{
  "metadata": {
    "timestamp": 1736568872443,
    "page": 74,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Gazler/githug",
      "stars": 6862,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.06640625,
          "content": "*.gem\n.bundle\nGemfile.lock\npkg/*\n*.swp\n.rvmrc\ngit_hug/*\n.profile.yml"
        },
        {
          "name": ".rspec",
          "type": "blob",
          "size": 0.0234375,
          "content": "--color\n--order default\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.279296875,
          "content": "language: ruby\ndist: focal\nrvm:\n  - 2.4.10\n  - 2.5.9\n  - 2.6.8\n  - 2.7.4\n  - 3.0.1\n  - ruby-head\n\nmatrix:\n  allow_failures:\n    - rvm: ruby-head\n\nbefore_install:\n  - gem update --system\n  - git config --global user.email 'user@example.com'\n  - git config --global user.name 'Test User'\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 2.23828125,
          "content": "FROM ruby:slim\n\nLABEL org.opencontainers.image.authors=\"diraneyya@ip.rwth-aachen.de\"\n\n# This is in order to have the man pages during exercises\nRUN sed -i '/path-exclude \\/usr\\/share\\/man/d' /etc/dpkg/dpkg.cfg.d/docker\nRUN sed -i '/path-exclude \\/usr\\/share\\/groff/d' /etc/dpkg/dpkg.cfg.d/docker\nRUN apt update && apt install -y man git && apt install --reinstall coreutils\n\n# The DATA_PATH is used for the deliverables, or the submissible\n# content for the classroom activity.\nENV DATA_PATH=\"/data\"\n# The REPO_PATH is where the original or the teacher's forked repo\n# resides inside the container.\nENV REPO_PATH=\"/root/githug\"\n# The LEVEL_PATH is where the current challenge resides and where\n# students should navigate prior to attemping to use the `githug`\n# commands.\nENV LEVEL_PATH=\"/git_hug\"\nENV GITHUG_GITCONF=\"/root/.gitconfig\"\nENV GITHUG_PROFILE=\"$LEVEL_PATH/.profile.yml\"\nENV GITHUG_HISTORY_OUTPUT=\"$DATA_PATH/history.txt\"\nENV GITHUG_PROFILE_OUTPUT=\"$DATA_PATH/profile.yml\"\nENV GITHUG_GITCONF_OUTPUT=\"$DATA_PATH/gitconfig\"\n\nRUN mkdir -p $DATA_PATH\nADD . $REPO_PATH\nWORKDIR $REPO_PATH\nRUN gem build\nRUN gem install *.gem\n\nWORKDIR /\nRUN echo \"y\" | $GEM_HOME/bin/githug\nRUN cp $GITHUG_PROFILE $GITHUG_PROFILE_OUTPUT\n\nWORKDIR $LEVEL_PATH\n\n# The bash login script in below clears the history and restores\n# progress using the contents of the $GITHUG_PROFILE_OUTPUT file.\nRUN printf \"history -c\\nHISTSIZE= \\nHISTFILESIZE= \\n\\\necho '--- NEW SESSION ---' >> $GITHUG_HISTORY_OUTPUT \\n\\\nif ! [ -e $GITHUG_PROFILE_OUTPUT ]; then \\n\\\n    echo 'ERROR: Corrupt level progress data. Exiting.' \\n\\\n    echo '>>> CORRUPT DATA <<<' >> $GITHUG_HISTORY_OUTPUT \\n\\\n    exit 1; fi \\n\\\ncp $GITHUG_GITCONF_OUTPUT $GITHUG_GITCONF \\n\\\nmkdir -p $LEVEL_PATH && cp $GITHUG_PROFILE_OUTPUT $GITHUG_PROFILE \\n\\\nexport PATH=\\\"\\$GEM_HOME/bin:\\$PATH\\\" \\n\\\ncd $LEVEL_PATH && githug reset \\n\\\necho -e '\\nIMPORTANT: everything you type in this container is \\\nrecorded to assist in the grading process.' \\n\" >> ~/.bash_profile\n\nRUN printf \"history -a\\ncat \\$HISTFILE >> $GITHUG_HISTORY_OUTPUT \\n\\\ncp $GITHUG_PROFILE $GITHUG_PROFILE_OUTPUT \\n\\\ncp $GITHUG_GITCONF $GITHUG_GITCONF_OUTPUT 2>/dev/null \\n\\\ncp $GITHUG_PROFILE $GITHUG_PROFILE_OUTPUT \\n\" >> ~/.bash_logout \n\nENTRYPOINT [\"/bin/bash\", \"--login\"]\nVOLUME $DATA_PATH\n"
        },
        {
          "name": "Gemfile",
          "type": "blob",
          "size": 0.087890625,
          "content": "source \"http://rubygems.org\"\n\n# Specify your gem's dependencies in githug.gemspec\ngemspec\n"
        },
        {
          "name": "LICENCE.txt",
          "type": "blob",
          "size": 1.052734375,
          "content": "Copyright (c) 2013  Gary 'Gazler' Rennie\n\nMIT License\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.779296875,
          "content": "# Githug\nGit Your Game On \n\n[![Build Status](https://travis-ci.org/Gazler/githug.svg?branch=master)](https://travis-ci.org/Gazler/githug) [![Code Climate](https://codeclimate.com/github/Gazler/githug.svg)](https://codeclimate.com/github/Gazler/githug)\n\n## About\nGithug is designed to give you a practical way of learning git.  It has a series of levels, each requiring you to use git commands to arrive at a correct answer.\n\n## Playing Githug\n\nGithug should work on Linux, OS X and Windows.\n\n### Prerequisites\n\nGithug requires Ruby 1.8.7 or higher.\n\nYou can check which version of Ruby is installed with the following command:\n\n```\nruby --version\n```\n\nIf ruby is not installed, follow the installation instructions on [ruby-lang.org](https://www.ruby-lang.org/en/documentation/installation/).\n\n### Installation\n\nTo install Githug, run\n\n    gem install githug\n\nIf you get a complaint about permissions, you can rerun the command with `sudo`:\n\n    sudo gem install githug\n    \n#### Usage with Docker\n\nAn unofficial _Docker_ image for this project by [@odiraneyya](https://github.com/odiraneyya) is available on ([Docker Hub](https://hub.docker.com/r/orwa84/githug)).\n\n### Starting the Game\n\nAfter the gem is installed change directory to the location where you want the game-related assets to be stored.\nThen run `githug`:\n\n    githug\n\nYou will be prompted to create a directory.\n\n    No githug directory found, do you wish to create one? [yn]\n\nType `y` (yes) to continue, `n` (no) to cancel and quit Githug.\n\n### Commands\n\nGithug has 4 game commands:\n\n * play - The default command, checks your solution for the current level\n * hint - Gives you a hint (if available) for the current level\n * reset - Reset the current level or reset the level to a given name or path\n * levels - List all the levels\n\n## Change Log\n\nThe change log is available on the wiki.  [Change log](https://github.com/Gazler/githug/wiki/Change-Log)\n\n## Contributing\n\nTo suggest a level or create a level that has been suggested, check out [the wiki](https://github.com/Gazler/githug/wiki).\n\n Get yourself on the [contributors list](https://github.com/Gazler/githug/contributors) by doing the following:\n\n * Fork the repository\n * Make a level in the levels directory (covered below)\n * Add your level to the LEVELS array inside `lib/githug/level.rb` in a position that makes sense (the \"commit\" level after the \"add\" and \"init\" levels for example)\n * Make sure your level works (covered below)\n * Submit a pull request\n\n## Todo List\n\n * A follow-up to the level, more information on a specific command, etc.\n * More levels!\n\n## Writing Levels\n\nGithug has a DSL for writing levels. Here is an example:\n\n```ruby\ndifficulty 1\ndescription \"There is a file in your folder called README, you should add it to your staging area\"\n\nsetup do\n  repo.init\n  FileUtils.touch(\"README\")\nend\n\nsolution do\n  return false unless repo.status.files.keys.include?(\"README\")\n  return false if repo.status.files[\"README\"].untracked\n\n  true\nend\n\nhint do\n  puts \"You can type `git` in your shell to get a list of available git commands\"\nend\n```\n\n `difficulty`, `description` and `solution` are required.\n\nYou can include multiple hints like this:\n\n```ruby\nhints [\n  \"You can type `git` in your shell to get a list of available git commands\",\n  \"Check the man for `git add`\"]\n```\n\n By default, `setup` will remove all files from the game folder.  You do not need to include a setup method if you don't want an initial git repository (if you are testing `git init` or only checking an answer.)\n\n You can call `repo.init` to initialize an empty repository.\n\n All methods called on `repo` are sent to the [grit gem](https://github.com/mojombo/grit) if the method does not exist, and you can use that for most git related commands (`repo.add`, `repo.commit`, etc.).\n\nAnother method exists called `init_from_level` and it is used like so:\n\n```ruby\nsetup do\n  init_from_level\nend\n```\n\nThis will copy the contents of a repository specified in the levels folder for your level.  For example, if your level is called \"merge\" then it will copy the contents of the \"merge\" folder.  It is recommended that you perform the following steps:\n\n * mkdir \"yourlevel\"\n * cd \"yourlevel\"\n * git init\n * some git stuff\n * **important** rename \".git\" to \".githug\" so that it isn't treated as a submodule\n * cd \"../\"\n * git add \"yourlevel\"\n\nAfter doing this, your level should be able to copy the contents from that git repository and use those for your level.  See the \"blame\" level for an example of this.\n\n## Testing Levels\n\nThe easiest way to test a level is:\n\n * Change into your git_hug repository\n * Run `githug reset PATH_TO_YOUR_LEVEL`\n * Solve the level\n * Run `githug test PATH_TO_YOUR_LEVEL`\n\nPlease note that the `githug test` command can be run as `githug test --errors` to get an error stack trace from your solve method.\n\nIt would be ideal if you add an integration test for your level.  These tests live in `spec/githug_spec` and **must** be run in order.  If you add a level but do not add a test, please add a simple `skip_level` test case similar to the `contribute` level.\n\n## FAQs\n\n1. Answers are not being checked properly\n\n   *This is a common issue we are facing and we are actively working to fix it.*\n\n   For now, run the following commands to change the default branch name to master. This should fix most of the issues you may face.\n   ```\n   $ git config --global init.defaultBranch master\n   $ githug reset\n   ```\n\n   From the current level forward, the default branch will be `master`.\n\n2. `githug` command doesn't work\n\n    Githug currently isn't supported on ruby versions ^3.0.0. Use any ruby version below 3.0.0 (preferrably 2.7.1).\n\n    If you use rvm, execute the below commands\n\n    ```\n    $ rvm install 2.7.1\n    $ rvm use 2.7.1\n    ```\n\n    If you use rbenv, execute the below commands\n\n    ```\n    $ rbenv install 2.7.1\n    $ rbenv global 2.7.1\n    ```\n\n"
        },
        {
          "name": "Rakefile",
          "type": "blob",
          "size": 0.1162109375,
          "content": "require \"bundler/gem_tasks\"\nrequire 'rspec/core/rake_task'\n\nRSpec::Core::RakeTask.new(:spec)\n\ntask :default => [:spec]\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "githug.gemspec",
          "type": "blob",
          "size": 0.8818359375,
          "content": "# -*- encoding: utf-8 -*-\n$:.push File.expand_path(\"../lib\", __FILE__)\nrequire \"githug/version\"\n\nGem::Specification.new do |s|\n  s.name        = \"githug\"\n  s.version     = Githug::VERSION\n  s.authors     = [\"Gary Rennie\"]\n  s.email       = [\"gazler@gmail.com\"]\n  s.homepage    = \"https://github.com/Gazler/githug\"\n  s.summary     = %q{An interactive way to learn git.}\n  s.description = %q{An interactive way to learn git.}\n\n  s.rubyforge_project = \"githug\"\n\n  s.files         = `git ls-files`.split(\"\\n\")\n  s.test_files    = `git ls-files -- {test,spec,features}/*`.split(\"\\n\")\n  s.executables   = `git ls-files -- bin/*`.split(\"\\n\").map{ |f| File.basename(f) }\n  s.require_paths = [\"lib\"]\n\n  # specify any dependencies here; for example:\n  s.add_development_dependency \"rspec\", \"~>2.8.0\"\n\n  s.add_dependency \"grit\", \"~>2.3.0\"\n  s.add_dependency \"thor\", \"~>0.14.6\"\n  s.add_dependency \"rake\", \"<11\"\nend\n"
        },
        {
          "name": "levels",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "spec",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}