{
  "metadata": {
    "timestamp": 1736568851516,
    "page": 39,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "teddysun/shadowsocks_install",
      "stars": 8135,
      "defaultBranch": "master",
      "files": [
        {
          "name": "Readme.md",
          "type": "blob",
          "size": 1.1826171875,
          "content": "![Shadowsocks](https://github.com/teddysun/shadowsocks_install/raw/master/shadowsocks.png)\n# Auto install Shadowsocks Server\n\nshadowsocks.sh\n===============\n- Auto Install Shadowsocks(Python) Server for CentOS/Debian/Ubuntu\n- https://teddysun.com/342.html\n\nshadowsocks-libev.sh\n===============\n- Auto Install Shadowsocks(libev) Server for CentOS\n- https://teddysun.com/357.html\n\nshadowsocks-libev-debian.sh\n===============\n- Auto Install Shadowsocks(libev) Server for Debian/Ubuntu\n- https://teddysun.com/358.html\n\nshadowsocks-go.sh\n===============\n- Auto Install Shadowsocks(Go) Server for CentOS/Debian/Ubuntu\n- https://teddysun.com/392.html\n\nshadowsocks-crond.sh\n===============\n- Check Shadowsocks(All version) Server is running or not, and start it if not running\n- https://teddysun.com/525.html\n\nshadowsocksR.sh\n===============\n- Auto Install ShadowsocksR Server for CentOS/Debian/Ubuntu\n- https://shadowsocks.be/9.html\n\nshadowsocks-all.sh\n==================\n- Auto Install Shadowsocks Server (all version) for CentOS/Debian/Ubuntu\n- https://teddysun.com/486.html\n\nhaproxy.sh\n===============\n- Auto Install haproxy for Shadowsocks Server\n- https://shadowsocks.be/10.html\n\nCopyright (C) 2014-2019 Teddysun\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "haproxy.sh",
          "type": "blob",
          "size": 7.0478515625,
          "content": "#!/usr/bin/env bash\n#\n# System Required:  CentOS, Debian, Ubuntu\n#\n# Description: Install haproxy for Shadowsocks server\n#\n# Author: Teddysun <i@teddysun.com>\n#\n# Intro:  https://shadowsocks.be/10.html\n#\n\ncur_dir=`pwd`\n\n[[ $EUID -ne 0 ]] && echo \"Error: This script must be run as root!\" && exit 1\n\nclear\necho\necho \"#############################################################\"\necho \"# Install haproxy for Shadowsocks server                    #\"\necho \"# Intro: https://shadowsocks.be/10.html                     #\"\necho \"# Author: Teddysun <i@teddysun.com>                         #\"\necho \"#############################################################\"\necho\n\ncheck_sys() {\n    local checkType=$1\n    local value=$2\n\n    local release=''\n    local systemPackage=''\n\n    if [ -f /etc/redhat-release ]; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    elif cat /etc/issue | grep -Eqi \"debian\"; then\n        release=\"debian\"\n        systemPackage=\"apt\"\n    elif cat /etc/issue | grep -Eqi \"ubuntu\"; then\n        release=\"ubuntu\"\n        systemPackage=\"apt\"\n    elif cat /etc/issue | grep -Eqi \"centos|red hat|redhat\"; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    elif cat /proc/version | grep -Eqi \"debian\"; then\n        release=\"debian\"\n        systemPackage=\"apt\"\n    elif cat /proc/version | grep -Eqi \"ubuntu\"; then\n        release=\"ubuntu\"\n        systemPackage=\"apt\"\n    elif cat /proc/version | grep -Eqi \"centos|red hat|redhat\"; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    fi\n\n    if [ ${checkType} == \"sysRelease\" ]; then\n        if [ \"$value\" == \"$release\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    elif [ ${checkType} == \"packageManager\" ]; then\n        if [ \"$value\" == \"$systemPackage\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    fi\n}\n\ninstall_check() {\n    if check_sys packageManager yum || check_sys packageManager apt; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ndisable_selinux(){\n    if [ -s /etc/selinux/config ] && grep 'SELINUX=enforcing' /etc/selinux/config; then\n        sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config\n        setenforce 0\n    fi\n}\n\nvalid_ip(){\n    local ip=$1\n    local stat=1\n    if [[ $ip =~ ^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$ ]]; then\n        OIFS=$IFS\n        IFS='.'\n        ip=($ip)\n        IFS=$OIFS\n        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]\n        stat=$?\n    fi\n    return ${stat}\n}\n\nget_ip(){\n    local IP=$( ip addr | egrep -o '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | egrep -v \"^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.\" | head -n 1 )\n    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )\n    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )\n    [ ! -z ${IP} ] && echo ${IP} || echo\n}\n\nget_char(){\n    SAVEDSTTY=`stty -g`\n    stty -echo\n    stty cbreak\n    dd if=/dev/tty bs=1 count=1 2> /dev/null\n    stty -raw\n    stty echo\n    stty $SAVEDSTTY\n}\n\n# Pre-installation settings\npre_install(){\n    if ! install_check; then\n        echo \"Your OS is not supported to run it.\"\n        echo \"Please change to CentOS 6+/Debian 7+/Ubuntu 12+ and try again.\"\n        exit 1\n    fi\n\n    # Set haproxy config port\n    while true\n    do\n    echo -e \"Please enter a port for haproxy and Shadowsocks server [1-65535]\"\n    read -p \"(Default port: 8989):\" haproxyport\n    [ -z \"${haproxyport}\" ] && haproxyport=\"8989\"\n    expr ${haproxyport} + 0 &>/dev/null\n    if [ $? -eq 0 ]; then\n        if [ ${haproxyport} -ge 1 ] && [ ${haproxyport} -le 65535 ]; then\n            echo\n            echo \"---------------------------\"\n            echo \"port = ${haproxyport}\"\n            echo \"---------------------------\"\n            echo\n            break\n        else\n            echo \"Enter error! Please enter a correct number.\"\n        fi\n    else\n        echo \"Enter error! Please enter a correct number.\"\n    fi\n    done\n\n    # Set haproxy config IPv4 address\n    while :\n    do\n    echo -e \"Please enter your Shadowsocks server's IPv4 address for haproxy\"\n    read -p \"(IPv4 is):\" haproxyip\n    valid_ip ${haproxyip}\n    if [ $? -eq 0 ]; then\n        echo\n        echo \"---------------------------\"\n        echo \"IP = ${haproxyip}\"\n        echo \"---------------------------\"\n        echo\n        break\n    else\n        echo \"Enter error! Please enter correct IPv4 address.\"\n    fi\n    done\n\n    echo\n    echo \"Press any key to start...or Press Ctrl+C to cancel\"\n    char=`get_char`\n\n}\n\n# Config haproxy\nconfig_haproxy(){\n    # Config DNS nameserver\n    if ! grep -q \"8.8.8.8\" /etc/resolv.conf; then\n        cp -p /etc/resolv.conf /etc/resolv.conf.bak\n        echo \"nameserver 8.8.8.8\" > /etc/resolv.conf\n        echo \"nameserver 8.8.4.4\" >> /etc/resolv.conf\n    fi\n\n    if [ -f /etc/haproxy/haproxy.cfg ]; then\n        cp -p /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.bak\n    fi\n\n    cat > /etc/haproxy/haproxy.cfg<<-EOF\nglobal\n    ulimit-n    51200\n    log         127.0.0.1 local2\n    chroot      /var/lib/haproxy\n    pidfile     /var/run/haproxy.pid\n    user        haproxy\n    group       haproxy\n    daemon\n\ndefaults\n    mode                    tcp\n    log                     global\n    option                  dontlognull\n    timeout connect         5s\n    timeout client          1m\n    timeout server          1m\n\nfrontend ss-${haproxyport}\n        bind *:${haproxyport}\n        default_backend ss-${haproxyport}\nbackend ss-${haproxyport}\n        server server1 ${haproxyip}:${haproxyport} maxconn 20480\nEOF\n}\n\ninstall(){\n    # Install haproxy\n    if check_sys packageManager yum; then\n        yum install -y haproxy\n    elif check_sys packageManager apt; then\n        apt-get -y update\n        apt-get install -y haproxy\n    fi\n\n    if [ -d /etc/haproxy ]; then\n        echo \"haproxy install success.\"\n\n        echo \"Config haproxy start...\"\n        config_haproxy\n        echo \"Config haproxy completed...\"\n\n        if check_sys packageManager yum; then\n            chkconfig --add haproxy\n            chkconfig haproxy on\n        elif check_sys packageManager apt; then\n            update-rc.d haproxy defaults\n        fi\n\n        # Start haproxy\n        service haproxy start\n        if [ $? -eq 0 ]; then\n            echo \"haproxy start success...\"\n        else\n            echo \"haproxy start failure...\"\n        fi\n    else\n        echo\n        echo \"haproxy install failed.\"\n        exit 1\n    fi\n\n    sleep 3\n    # restart haproxy\n    service haproxy restart\n    # Active Internet connections confirm\n    netstat -nxtlp\n    echo\n    echo \"Congratulations, haproxy install completed.\"\n    echo -e \"Your haproxy Server IP: \\033[41;37m $(get_ip) \\033[0m\"\n    echo -e \"Your haproxy Server port: \\033[41;37m ${haproxyport} \\033[0m\"\n    echo -e \"Your Input Shadowsocks IP: \\033[41;37m ${haproxyip} \\033[0m\"\n    echo\n    echo \"Welcome to visit: https://shadowsocks.be/10.html\"\n    echo \"Enjoy it.\"\n    echo\n}\n\n\n# Install haproxy\ninstall_haproxy(){\n    disable_selinux\n    pre_install\n    install\n}\n\n# Initialization step\ninstall_haproxy 2>&1 | tee ${cur_dir}/haproxy_for_shadowsocks.log\n"
        },
        {
          "name": "sample_config",
          "type": "tree",
          "content": null
        },
        {
          "name": "shadowsocks",
          "type": "blob",
          "size": 1.9892578125,
          "content": "#!/bin/bash\n# chkconfig: 2345 90 10\n# description: A secure socks5 proxy, designed to protect your Internet traffic.\n\n### BEGIN INIT INFO\n# Provides:          Shadowsocks\n# Required-Start:    $network $syslog\n# Required-Stop:     $network\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: Fast tunnel proxy that helps you bypass firewalls\n# Description:       Start or stop the Shadowsocks server\n### END INIT INFO\n\n# Author: Teddysun <i@teddysun.com>\n\nNAME=Shadowsocks\nif [ -f /usr/bin/ssserver ]; then\n    DAEMON=/usr/bin/ssserver\nelif [ -f /usr/local/bin/ssserver ]; then\n    DAEMON=/usr/local/bin/ssserver\nfi\nif [ -f /etc/shadowsocks-python/config.json ]; then\n    CONF=/etc/shadowsocks-python/config.json\nelif [ -f /etc/shadowsocks.json ]; then\n    CONF=/etc/shadowsocks.json\nfi\nRETVAL=0\n\ncheck_running(){\n    PID=$(ps -ef | grep -v grep | grep -i \"${DAEMON}\" | awk '{print $2}')\n    if [ -n \"$PID\" ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ndo_start(){\n    check_running\n    if [ $? -eq 0 ]; then\n        echo \"$NAME (pid $PID) is already running...\"\n        exit 0\n    else\n        $DAEMON -c $CONF -d start\n        RETVAL=$?\n        if [ $RETVAL -eq 0 ]; then\n            echo \"Starting $NAME success\"\n        else\n            echo \"Starting $NAME failed\"\n        fi\n    fi\n}\n\ndo_stop(){\n    check_running\n    if [ $? -eq 0 ]; then\n        $DAEMON -c $CONF -d stop\n        RETVAL=$?\n        if [ $RETVAL -eq 0 ]; then\n            echo \"Stopping $NAME success\"\n        else\n            echo \"Stopping $NAME failed\"\n        fi\n    else\n        echo \"$NAME is stopped\"\n        RETVAL=1\n    fi\n}\n\ndo_status(){\n    check_running\n    if [ $? -eq 0 ]; then\n        echo \"$NAME (pid $PID) is running...\"\n    else\n        echo \"$NAME is stopped\"\n        RETVAL=1\n    fi\n}\n\ndo_restart(){\n    do_stop\n    sleep 0.5\n    do_start\n}\n\ncase \"$1\" in\n    start|stop|restart|status)\n    do_$1\n    ;;\n    *)\n    echo \"Usage: $0 { start | stop | restart | status }\"\n    RETVAL=1\n    ;;\nesac\n\nexit $RETVAL\n"
        },
        {
          "name": "shadowsocks-all.sh",
          "type": "blob",
          "size": 45.638671875,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n#\n# Auto install Shadowsocks Server (all version)\n#\n# Copyright (C) 2016-2019 Teddysun <i@teddysun.com>\n#\n# System Required:  CentOS 6+, Debian7+, Ubuntu12+\n#\n# Reference URL:\n# https://github.com/shadowsocks/shadowsocks\n# https://github.com/shadowsocks/shadowsocks-go\n# https://github.com/shadowsocks/shadowsocks-libev\n# https://github.com/shadowsocks/shadowsocks-windows\n# https://github.com/shadowsocksr-rm/shadowsocksr\n# https://github.com/shadowsocksrr/shadowsocksr\n# https://github.com/shadowsocksrr/shadowsocksr-csharp\n#\n# Thanks:\n# @clowwindy  <https://twitter.com/clowwindy>\n# @breakwa11  <https://twitter.com/breakwa11>\n# @cyfdecyf   <https://twitter.com/cyfdecyf>\n# @madeye     <https://github.com/madeye>\n# @linusyang  <https://github.com/linusyang>\n# @Akkariiin  <https://github.com/Akkariiin>\n# \n# Intro:  https://teddysun.com/486.html\n\nred='\\033[0;31m'\ngreen='\\033[0;32m'\nyellow='\\033[0;33m'\nplain='\\033[0m'\n\n[[ $EUID -ne 0 ]] && echo -e \"[${red}Error${plain}] This script must be run as root!\" && exit 1\n\ncur_dir=$( pwd )\nsoftware=(Shadowsocks-Python ShadowsocksR Shadowsocks-Go Shadowsocks-libev)\n\nlibsodium_file='libsodium-1.0.18'\nlibsodium_url='https://github.com/jedisct1/libsodium/releases/download/1.0.18-RELEASE/libsodium-1.0.18.tar.gz'\n\nmbedtls_file='mbedtls-2.16.12'\nmbedtls_url='https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v2.16.12.tar.gz'\n\nshadowsocks_python_file='shadowsocks-master'\nshadowsocks_python_url='https://github.com/shadowsocks/shadowsocks/archive/master.zip'\nshadowsocks_python_init='/etc/init.d/shadowsocks-python'\nshadowsocks_python_config='/etc/shadowsocks-python/config.json'\nshadowsocks_python_centos='https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks'\nshadowsocks_python_debian='https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-debian'\n\nshadowsocks_r_file='shadowsocksr-3.2.2'\nshadowsocks_r_url='https://github.com/shadowsocksrr/shadowsocksr/archive/3.2.2.tar.gz'\nshadowsocks_r_init='/etc/init.d/shadowsocks-r'\nshadowsocks_r_config='/etc/shadowsocks-r/config.json'\nshadowsocks_r_centos='https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR'\nshadowsocks_r_debian='https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR-debian'\n\nshadowsocks_go_file_64='shadowsocks-server-linux64-1.2.2'\nshadowsocks_go_url_64='https://dl.lamp.sh/shadowsocks/shadowsocks-server-linux64-1.2.2.gz'\nshadowsocks_go_file_32='shadowsocks-server-linux32-1.2.2'\nshadowsocks_go_url_32='https://dl.lamp.sh/shadowsocks/shadowsocks-server-linux32-1.2.2.gz'\nshadowsocks_go_init='/etc/init.d/shadowsocks-go'\nshadowsocks_go_config='/etc/shadowsocks-go/config.json'\nshadowsocks_go_centos='https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-go'\nshadowsocks_go_debian='https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-go-debian'\n\nshadowsocks_libev_init='/etc/init.d/shadowsocks-libev'\nshadowsocks_libev_config='/etc/shadowsocks-libev/config.json'\nshadowsocks_libev_centos='https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev'\nshadowsocks_libev_debian='https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev-debian'\n\n# Stream Ciphers\ncommon_ciphers=(\naes-256-gcm\naes-192-gcm\naes-128-gcm\naes-256-ctr\naes-192-ctr\naes-128-ctr\naes-256-cfb\naes-192-cfb\naes-128-cfb\ncamellia-128-cfb\ncamellia-192-cfb\ncamellia-256-cfb\nxchacha20-ietf-poly1305\nchacha20-ietf-poly1305\nchacha20-ietf\nchacha20\nsalsa20\nrc4-md5\n)\ngo_ciphers=(\naes-256-cfb\naes-192-cfb\naes-128-cfb\naes-256-ctr\naes-192-ctr\naes-128-ctr\nchacha20-ietf\nchacha20\nsalsa20\nrc4-md5\n)\nr_ciphers=(\nnone\naes-256-cfb\naes-192-cfb\naes-128-cfb\naes-256-cfb8\naes-192-cfb8\naes-128-cfb8\naes-256-ctr\naes-192-ctr\naes-128-ctr\nchacha20-ietf\nchacha20\nsalsa20\nxchacha20\nxsalsa20\nrc4-md5\n)\n# Reference URL:\n# https://github.com/shadowsocksr-rm/shadowsocks-rss/blob/master/ssr.md\n# https://github.com/shadowsocksrr/shadowsocksr/commit/a3cf0254508992b7126ab1151df0c2f10bf82680\n# Protocol\nprotocols=(\norigin\nverify_deflate\nauth_sha1_v4\nauth_sha1_v4_compatible\nauth_aes128_md5\nauth_aes128_sha1\nauth_chain_a\nauth_chain_b\nauth_chain_c\nauth_chain_d\nauth_chain_e\nauth_chain_f\n)\n# obfs\nobfs=(\nplain\nhttp_simple\nhttp_simple_compatible\nhttp_post\nhttp_post_compatible\ntls1.2_ticket_auth\ntls1.2_ticket_auth_compatible\ntls1.2_ticket_fastauth\ntls1.2_ticket_fastauth_compatible\n)\n# libev obfuscating\nobfs_libev=(http tls)\n# initialization parameter\nlibev_obfs=''\n\ndisable_selinux(){\n    if [ -s /etc/selinux/config ] && grep 'SELINUX=enforcing' /etc/selinux/config; then\n        sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config\n        setenforce 0\n    fi\n}\n\ncheck_sys(){\n    local checkType=$1\n    local value=$2\n\n    local release=''\n    local systemPackage=''\n\n    if [[ -f /etc/redhat-release ]]; then\n        release='centos'\n        systemPackage='yum'\n    elif grep -Eqi 'debian|raspbian' /etc/issue; then\n        release='debian'\n        systemPackage='apt'\n    elif grep -Eqi 'ubuntu' /etc/issue; then\n        release='ubuntu'\n        systemPackage='apt'\n    elif grep -Eqi 'centos|red hat|redhat' /etc/issue; then\n        release='centos'\n        systemPackage='yum'\n    elif grep -Eqi 'debian|raspbian' /proc/version; then\n        release='debian'\n        systemPackage='apt'\n    elif grep -Eqi 'ubuntu' /proc/version; then\n        release='ubuntu'\n        systemPackage='apt'\n    elif grep -Eqi 'centos|red hat|redhat' /proc/version; then\n        release='centos'\n        systemPackage='yum'\n    fi\n\n    if [[ \"${checkType}\" == 'sysRelease' ]]; then\n        if [ \"${value}\" == \"${release}\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    elif [[ \"${checkType}\" == 'packageManager' ]]; then\n        if [ \"${value}\" == \"${systemPackage}\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    fi\n}\n\nversion_ge(){\n    test \"$(echo \"$@\" | tr ' ' '\\n' | sort -rV | head -n 1)\" == \"$1\"\n}\n\nversion_gt(){\n    test \"$(echo \"$@\" | tr ' ' '\\n' | sort -V | head -n 1)\" != \"$1\"\n}\n\ncheck_kernel_version(){\n    local kernel_version\n    kernel_version=$(uname -r | cut -d- -f1)\n    if version_gt \"${kernel_version}\" 3.7.0; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncheck_kernel_headers(){\n    if check_sys packageManager yum; then\n        if rpm -qa | grep -q headers-\"$(uname -r)\"; then\n            return 0\n        else\n            return 1\n        fi\n    elif check_sys packageManager apt; then\n        if dpkg -s linux-headers-\"$(uname -r)\" > /dev/null 2>&1; then\n            return 0\n        else\n            return 1\n        fi\n    fi\n    return 1\n}\n\ngetversion(){\n    if [[ -s /etc/redhat-release ]]; then\n        grep -oE '[0-9.]+' /etc/redhat-release\n    else\n        grep -oE '[0-9.]+' /etc/issue\n    fi\n}\n\ncentosversion(){\n    if check_sys sysRelease centos; then\n        local code=$1\n        local version\n        version=\"$(getversion)\"\n        local main_ver=${version%%.*}\n        if [ \"$main_ver\" == \"$code\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    else\n        return 1\n    fi\n}\n\nautoconf_version(){\n    if [ ! \"$(command -v autoconf)\" ]; then\n        echo -e \"[${green}Info${plain}] Starting install package autoconf\"\n        if check_sys packageManager yum; then\n            yum install -y autoconf > /dev/null 2>&1 || echo -e \"[${red}Error:${plain}] Failed to install autoconf\"\n        elif check_sys packageManager apt; then\n            apt-get -y update > /dev/null 2>&1\n            apt-get -y install autoconf > /dev/null 2>&1 || echo -e \"[${red}Error:${plain}] Failed to install autoconf\"\n        fi\n    fi\n    local autoconf_ver\n    autoconf_ver=$(autoconf --version | grep autoconf | grep -oE '[0-9.]+')\n    if version_ge \"${autoconf_ver}\" 2.67; then\n        return 0\n    else\n        return 1\n    fi\n}\n\nget_ip(){\n    local IP\n    IP=$( ip addr | egrep -o '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | egrep -v '^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.' | head -n 1 )\n    [ -z \"${IP}\" ] && IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )\n    [ -z \"${IP}\" ] && IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )\n    echo \"${IP}\"\n}\n\nget_ipv6(){\n    local ipv6\n    ipv6=$(wget -qO- -t1 -T2 ipv6.icanhazip.com)\n    [ -z \"${ipv6}\" ] && return 1 || return 0\n}\n\nget_libev_ver(){\n    libev_ver=$(wget --no-check-certificate -qO- https://api.github.com/repos/shadowsocks/shadowsocks-libev/releases/latest | grep 'tag_name' | cut -d\\\" -f4)\n    [ -z \"${libev_ver}\" ] && echo -e \"[${red}Error${plain}] Get shadowsocks-libev latest version failed\" && exit 1\n}\n\nget_opsy(){\n    [ -f /etc/redhat-release ] && awk '{print ($1,$3~/^[0-9]/?$3:$4)}' /etc/redhat-release && return\n    [ -f /etc/os-release ] && awk -F'[= \"]' '/PRETTY_NAME/{print $3,$4,$5}' /etc/os-release && return\n    [ -f /etc/lsb-release ] && awk -F'[=\"]+' '/DESCRIPTION/{print $2}' /etc/lsb-release && return\n}\n\nis_64bit(){\n    if [ $(getconf WORD_BIT) = '32' ] && [ $(getconf LONG_BIT) = '64' ] ; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ndebianversion(){\n    if check_sys sysRelease debian;then\n        local version\n        version=$( get_opsy )\n        local code\n        code=${1}\n        local main_ver\n        main_ver=$( echo \"${version}\" | sed 's/[^0-9]//g')\n        if [ \"${main_ver}\" == \"${code}\" ];then\n            return 0\n        else\n            return 1\n        fi\n    else\n        return 1\n    fi\n}\n\ndownload(){\n    local filename\n    filename=$(basename \"$1\")\n    if [ -f \"${1}\" ]; then\n        echo \"${filename} [found]\"\n    else\n        echo \"${filename} not found, download now...\"\n        wget --no-check-certificate -c -t3 -T60 -O \"${1}\" \"${2}\"\n        if [ $? -ne 0 ]; then\n            echo -e \"[${red}Error${plain}] Download ${filename} failed.\"\n            exit 1\n        fi\n    fi\n}\n\ndownload_files(){\n    cd \"${cur_dir}\" || exit\n\n    if   [ \"${selected}\" == '1' ]; then\n        download \"${shadowsocks_python_file}.zip\" \"${shadowsocks_python_url}\"\n        if check_sys packageManager yum; then\n            download \"${shadowsocks_python_init}\" \"${shadowsocks_python_centos}\"\n        elif check_sys packageManager apt; then\n            download \"${shadowsocks_python_init}\" \"${shadowsocks_python_debian}\"\n        fi\n    elif [ \"${selected}\" == '2' ]; then\n        download \"${shadowsocks_r_file}.tar.gz\" \"${shadowsocks_r_url}\"\n        if check_sys packageManager yum; then\n            download \"${shadowsocks_r_init}\" \"${shadowsocks_r_centos}\"\n        elif check_sys packageManager apt; then\n            download \"${shadowsocks_r_init}\" \"${shadowsocks_r_debian}\"\n        fi\n    elif [ \"${selected}\" == '3' ]; then\n        if is_64bit; then\n            download \"${shadowsocks_go_file_64}.gz\" \"${shadowsocks_go_url_64}\"\n        else\n            download \"${shadowsocks_go_file_32}.gz\" \"${shadowsocks_go_url_32}\"\n        fi\n        if check_sys packageManager yum; then\n            download \"${shadowsocks_go_init}\" \"${shadowsocks_go_centos}\"\n        elif check_sys packageManager apt; then\n            download \"${shadowsocks_go_init}\" \"${shadowsocks_go_debian}\"\n        fi\n    elif [ \"${selected}\" == '4' ]; then\n        get_libev_ver\n        shadowsocks_libev_file=\"shadowsocks-libev-$(echo \"${libev_ver}\" | sed -e 's/^[a-zA-Z]//g')\"\n        shadowsocks_libev_url=\"https://github.com/shadowsocks/shadowsocks-libev/releases/download/${libev_ver}/${shadowsocks_libev_file}.tar.gz\"\n\n        download \"${shadowsocks_libev_file}.tar.gz\" \"${shadowsocks_libev_url}\"\n        if check_sys packageManager yum; then\n            download \"${shadowsocks_libev_init}\" \"${shadowsocks_libev_centos}\"\n        elif check_sys packageManager apt; then\n            download \"${shadowsocks_libev_init}\" \"${shadowsocks_libev_debian}\"\n        fi\n    fi\n\n}\n\nget_char(){\n    SAVEDSTTY=$(stty -g)\n    stty -echo\n    stty cbreak\n    dd if=/dev/tty bs=1 count=1 2> /dev/null\n    stty -raw\n    stty echo\n    stty \"$SAVEDSTTY\"\n}\n\nerror_detect_depends(){\n    local command=$1\n    local depend\n    depend=$(echo \"${command}\" | awk '{print $4}')\n    echo -e \"[${green}Info${plain}] Starting to install package ${depend}\"\n    ${command} > /dev/null 2>&1\n    if [ $? -ne 0 ]; then\n        echo -e \"[${red}Error${plain}] Failed to install ${red}${depend}${plain}\"\n        echo 'Please visit: https://teddysun.com/486.html and contact.'\n        exit 1\n    fi\n}\n\nconfig_firewall(){\n    if centosversion 6; then\n        /etc/init.d/iptables status > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            iptables -L -n | grep -i \"${shadowsocksport}\" > /dev/null 2>&1\n            if [ $? -ne 0 ]; then\n                iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport \"${shadowsocksport}\" -j ACCEPT\n                iptables -I INPUT -m state --state NEW -m udp -p udp --dport \"${shadowsocksport}\" -j ACCEPT\n                /etc/init.d/iptables save\n                /etc/init.d/iptables restart\n            else\n                echo -e \"[${green}Info${plain}] port ${green}${shadowsocksport}${plain} already be enabled.\"\n            fi\n        else\n            echo -e \"[${yellow}Warning${plain}] iptables looks like not running or not installed, please enable port ${shadowsocksport} manually if necessary.\"\n        fi\n    elif centosversion 7; then\n        systemctl status firewalld > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            default_zone=$(firewall-cmd --get-default-zone)\n            firewall-cmd --permanent --zone=\"${default_zone}\" --add-port=\"${shadowsocksport}\"/tcp\n            firewall-cmd --permanent --zone=\"${default_zone}\" --add-port=\"${shadowsocksport}\"/udp\n            firewall-cmd --reload\n        else\n            echo -e \"[${yellow}Warning${plain}] firewalld looks like not running or not installed, please enable port ${shadowsocksport} manually if necessary.\"\n        fi\n    fi\n}\n\nconfig_shadowsocks(){\n\nif   [ \"${selected}\" == '1' ]; then\n    if [ ! -d \"$(dirname ${shadowsocks_python_config})\" ]; then\n        mkdir -p $(dirname ${shadowsocks_python_config})\n    fi\n    cat > ${shadowsocks_python_config}<<-EOF\n{\n    \"server\":\"0.0.0.0\",\n    \"server_port\":${shadowsocksport},\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"${shadowsockspwd}\",\n    \"timeout\":300,\n    \"method\":\"${shadowsockscipher}\",\n    \"fast_open\":false\n}\nEOF\nelif [ \"${selected}\" == '2' ]; then\n    if [ ! -d \"$(dirname ${shadowsocks_r_config})\" ]; then\n        mkdir -p $(dirname ${shadowsocks_r_config})\n    fi\n    cat > ${shadowsocks_r_config}<<-EOF\n{\n    \"server\":\"0.0.0.0\",\n    \"server_ipv6\":\"::\",\n    \"server_port\":${shadowsocksport},\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"${shadowsockspwd}\",\n    \"timeout\":120,\n    \"method\":\"${shadowsockscipher}\",\n    \"protocol\":\"${shadowsockprotocol}\",\n    \"protocol_param\":\"\",\n    \"obfs\":\"${shadowsockobfs}\",\n    \"obfs_param\":\"\",\n    \"redirect\":\"\",\n    \"dns_ipv6\":false,\n    \"fast_open\":false,\n    \"workers\":1\n}\nEOF\nelif [ \"${selected}\" == '3' ]; then\n    if [ ! -d \"$(dirname ${shadowsocks_go_config})\" ]; then\n        mkdir -p $(dirname ${shadowsocks_go_config})\n    fi\n    cat > ${shadowsocks_go_config}<<-EOF\n{\n    \"server\":\"0.0.0.0\",\n    \"server_port\":${shadowsocksport},\n    \"local_port\":1080,\n    \"password\":\"${shadowsockspwd}\",\n    \"method\":\"${shadowsockscipher}\",\n    \"timeout\":300\n}\nEOF\nelif [ \"${selected}\" == '4' ]; then\n    local server_value=\"\\\"0.0.0.0\\\"\"\n    if get_ipv6; then\n        server_value=\"[\\\"[::0]\\\",\\\"0.0.0.0\\\"]\"\n    fi\n\n    if [ ! -d \"$(dirname ${shadowsocks_libev_config})\" ]; then\n        mkdir -p $(dirname ${shadowsocks_libev_config})\n    fi\n\n    if [ \"${libev_obfs}\" == 'y' ] || [ \"${libev_obfs}\" == 'Y' ]; then\n        cat > ${shadowsocks_libev_config}<<-EOF\n{\n    \"server\":${server_value},\n    \"server_port\":${shadowsocksport},\n    \"password\":\"${shadowsockspwd}\",\n    \"timeout\":300,\n    \"user\":\"nobody\",\n    \"method\":\"${shadowsockscipher}\",\n    \"fast_open\":false,\n    \"nameserver\":\"1.0.0.1\",\n    \"mode\":\"tcp_and_udp\",\n    \"plugin\":\"obfs-server\",\n    \"plugin_opts\":\"obfs=${shadowsocklibev_obfs}\"\n}\nEOF\n    else\n        cat > ${shadowsocks_libev_config}<<-EOF\n{\n    \"server\":${server_value},\n    \"server_port\":${shadowsocksport},\n    \"password\":\"${shadowsockspwd}\",\n    \"timeout\":300,\n    \"user\":\"nobody\",\n    \"method\":\"${shadowsockscipher}\",\n    \"fast_open\":false,\n    \"nameserver\":\"1.0.0.1\",\n    \"mode\":\"tcp_and_udp\"\n}\nEOF\n    fi\n\nfi\n}\n\ninstall_dependencies(){\n    if check_sys packageManager yum; then\n        echo -e \"[${green}Info${plain}] Checking the EPEL repository...\"\n        if [ ! -f /etc/yum.repos.d/epel.repo ]; then\n            yum install -y epel-release > /dev/null 2>&1\n        fi\n        [ ! -f /etc/yum.repos.d/epel.repo ] && echo -e \"[${red}Error${plain}] Install EPEL repository failed, please check it.\" && exit 1\n        [ ! \"$(command -v yum-config-manager)\" ] && yum install -y yum-utils > /dev/null 2>&1\n        [ x\"$(yum-config-manager epel | grep -w enabled | awk '{print $3}')\" != x'True' ] && yum-config-manager --enable epel > /dev/null 2>&1\n        echo -e \"[${green}Info${plain}] Checking the EPEL repository complete...\"\n\n        yum_depends=(\n            unzip gzip openssl openssl-devel gcc python python-devel python-setuptools pcre pcre-devel libtool libevent\n            autoconf automake make curl curl-devel zlib-devel perl perl-devel cpio expat-devel gettext-devel\n            libev-devel c-ares-devel git qrencode\n        )\n        for depend in ${yum_depends[@]}; do\n            error_detect_depends \"yum -y install ${depend}\"\n        done\n    elif check_sys packageManager apt; then\n        apt_depends=(\n            gettext build-essential unzip gzip python python-dev python-setuptools curl openssl libssl-dev\n            autoconf automake libtool gcc make perl cpio libpcre3 libpcre3-dev zlib1g-dev libev-dev libc-ares-dev git qrencode\n        )\n\n        apt-get -y update\n        for depend in ${apt_depends[@]}; do\n            error_detect_depends \"apt-get -y install ${depend}\"\n        done\n    fi\n}\n\ninstall_check(){\n    if check_sys packageManager yum || check_sys packageManager apt; then\n        if centosversion 5; then\n            return 1\n        fi\n        return 0\n    else\n        return 1\n    fi\n}\n\ninstall_select(){\n    if ! install_check; then\n        echo -e \"[${red}Error${plain}] Your OS is not supported to run it!\"\n        echo 'Please change to CentOS 6+/Debian 7+/Ubuntu 12+ and try again.'\n        exit 1\n    fi\n\n    clear\n    while true\n    do\n    echo  \"Which Shadowsocks server you'd select:\"\n    for ((i=1;i<=${#software[@]};i++ )); do\n        hint=\"${software[$i-1]}\"\n        echo -e \"${green}${i}${plain}) ${hint}\"\n    done\n    read -p \"Please enter a number (Default ${software[0]}):\" selected\n    [ -z \"${selected}\" ] && selected='1'\n    case \"${selected}\" in\n        1|2|3|4)\n        echo\n        echo \"You choose = ${software[${selected}-1]}\"\n        echo\n        break\n        ;;\n        *)\n        echo -e \"[${red}Error${plain}] Please only enter a number [1-4]\"\n        ;;\n    esac\n    done\n}\n\ninstall_prepare_password(){\n    echo \"Please enter password for ${software[${selected}-1]}\"\n    read -p '(Default password: teddysun.com):' shadowsockspwd\n    [ -z \"${shadowsockspwd}\" ] && shadowsockspwd='teddysun.com'\n    echo\n    echo \"password = ${shadowsockspwd}\"\n    echo\n}\n\ninstall_prepare_port() {\n    while true\n    do\n    dport=$(shuf -i 9000-19999 -n 1)\n    echo -e \"Please enter a port for ${software[${selected}-1]} [1-65535]\"\n    read -p \"(Default port: ${dport}):\" shadowsocksport\n    [ -z \"${shadowsocksport}\" ] && shadowsocksport=${dport}\n    expr \"${shadowsocksport}\" + 1 &>/dev/null\n    if [ $? -eq 0 ]; then\n        if [ \"${shadowsocksport}\" -ge 1 ] && [ \"${shadowsocksport}\" -le 65535 ] && [ \"${shadowsocksport:0:1}\" != 0 ]; then\n            echo\n            echo \"port = ${shadowsocksport}\"\n            echo\n            break\n        fi\n    fi\n    echo -e \"[${red}Error${plain}] Please enter a correct number [1-65535]\"\n    done\n}\n\ninstall_prepare_cipher(){\n    while true\n    do\n    echo -e \"Please select stream cipher for ${software[${selected}-1]}:\"\n\n    if   [[ \"${selected}\" == '1' || \"${selected}\" == '4' ]]; then\n        for ((i=1;i<=${#common_ciphers[@]};i++ )); do\n            hint=\"${common_ciphers[$i-1]}\"\n            echo -e \"${green}${i}${plain}) ${hint}\"\n        done\n        read -p \"Which cipher you'd select(Default: ${common_ciphers[0]}):\" pick\n        [ -z \"$pick\" ] && pick=1\n        expr ${pick} + 1 &>/dev/null\n        if [ $? -ne 0 ]; then\n            echo -e \"[${red}Error${plain}] Please enter a number\"\n            continue\n        fi\n        if [[ \"$pick\" -lt 1 || \"$pick\" -gt ${#common_ciphers[@]} ]]; then\n            echo -e \"[${red}Error${plain}] Please enter a number between 1 and ${#common_ciphers[@]}\"\n            continue\n        fi\n        shadowsockscipher=${common_ciphers[$pick-1]}\n    elif [ \"${selected}\" == '2' ]; then\n        for ((i=1;i<=${#r_ciphers[@]};i++ )); do\n            hint=\"${r_ciphers[$i-1]}\"\n            echo -e \"${green}${i}${plain}) ${hint}\"\n        done\n        read -p \"Which cipher you'd select(Default: ${r_ciphers[1]}):\" pick\n        [ -z \"$pick\" ] && pick=2\n        expr ${pick} + 1 &>/dev/null\n        if [ $? -ne 0 ]; then\n            echo -e \"[${red}Error${plain}] Please enter a number\"\n            continue\n        fi\n        if [[ \"$pick\" -lt 1 || \"$pick\" -gt ${#r_ciphers[@]} ]]; then\n            echo -e \"[${red}Error${plain}] Please enter a number between 1 and ${#r_ciphers[@]}\"\n            continue\n        fi\n        shadowsockscipher=${r_ciphers[$pick-1]}\n    elif [ \"${selected}\" == '3' ]; then\n        for ((i=1;i<=${#go_ciphers[@]};i++ )); do\n            hint=\"${go_ciphers[$i-1]}\"\n            echo -e \"${green}${i}${plain}) ${hint}\"\n        done\n        read -p \"Which cipher you'd select(Default: ${go_ciphers[0]}):\" pick\n        [ -z \"$pick\" ] && pick=1\n        expr ${pick} + 1 &>/dev/null\n        if [ $? -ne 0 ]; then\n            echo -e \"[${red}Error${plain}] Please enter a number\"\n            continue\n        fi\n        if [[ \"$pick\" -lt 1 || \"$pick\" -gt ${#go_ciphers[@]} ]]; then\n            echo -e \"[${red}Error${plain}] Please enter a number between 1 and ${#go_ciphers[@]}\"\n            continue\n        fi\n        shadowsockscipher=${go_ciphers[$pick-1]}\n    fi\n\n    echo\n    echo \"cipher = ${shadowsockscipher}\"\n    echo\n    break\n    done\n}\n\ninstall_prepare_protocol(){\n    while true\n    do\n    echo -e \"Please select protocol for ${software[${selected}-1]}:\"\n    for ((i=1;i<=${#protocols[@]};i++ )); do\n        hint=\"${protocols[$i-1]}\"\n        echo -e \"${green}${i}${plain}) ${hint}\"\n    done\n    read -p \"Which protocol you'd select(Default: ${protocols[0]}):\" protocol\n    [ -z \"$protocol\" ] && protocol=1\n    expr ${protocol} + 1 &>/dev/null\n    if [ $? -ne 0 ]; then\n        echo -e \"[${red}Error${plain}] Please enter a number\"\n        continue\n    fi\n    if [[ \"$protocol\" -lt 1 || \"$protocol\" -gt ${#protocols[@]} ]]; then\n        echo -e \"[${red}Error${plain}] Please enter a number between 1 and ${#protocols[@]}\"\n        continue\n    fi\n    shadowsockprotocol=${protocols[$protocol-1]}\n    echo\n    echo \"protocol = ${shadowsockprotocol}\"\n    echo\n    break\n    done\n}\n\ninstall_prepare_obfs(){\n    while true\n    do\n    echo -e \"Please select obfs for ${software[${selected}-1]}:\"\n    for ((i=1;i<=${#obfs[@]};i++ )); do\n        hint=\"${obfs[$i-1]}\"\n        echo -e \"${green}${i}${plain}) ${hint}\"\n    done\n    read -p \"Which obfs you'd select(Default: ${obfs[0]}):\" r_obfs\n    [ -z \"$r_obfs\" ] && r_obfs=1\n    expr ${r_obfs} + 1 &>/dev/null\n    if [ $? -ne 0 ]; then\n        echo -e \"[${red}Error${plain}] Please enter a number\"\n        continue\n    fi\n    if [[ \"$r_obfs\" -lt 1 || \"$r_obfs\" -gt ${#obfs[@]} ]]; then\n        echo -e \"[${red}Error${plain}] Please enter a number between 1 and ${#obfs[@]}\"\n        continue\n    fi\n    shadowsockobfs=${obfs[$r_obfs-1]}\n    echo\n    echo \"obfs = ${shadowsockobfs}\"\n    echo\n    break\n    done\n}\n\ninstall_prepare_libev_obfs(){\n    if autoconf_version || centosversion 6; then\n        while true\n        do\n        echo -e \"Do you want install simple-obfs for ${software[${selected}-1]}? [y/n]\"\n        read -p '(default: n):' libev_obfs\n        [ -z \"$libev_obfs\" ] && libev_obfs=n\n        case \"${libev_obfs}\" in\n            y|Y|n|N)\n            echo\n            echo \"You choose = ${libev_obfs}\"\n            echo\n            break\n            ;;\n            *)\n            echo -e \"[${red}Error${plain}] Please only enter [y/n]\"\n            ;;\n        esac\n        done\n\n        if [ \"${libev_obfs}\" == 'y' ] || [ \"${libev_obfs}\" == 'Y' ]; then\n            while true\n            do\n            echo -e 'Please select obfs for simple-obfs:'\n            for ((i=1;i<=${#obfs_libev[@]};i++ )); do\n                hint=\"${obfs_libev[$i-1]}\"\n                echo -e \"${green}${i}${plain}) ${hint}\"\n            done\n            read -p \"Which obfs you'd select(Default: ${obfs_libev[0]}):\" r_libev_obfs\n            [ -z \"$r_libev_obfs\" ] && r_libev_obfs=1\n            expr ${r_libev_obfs} + 1 &>/dev/null\n            if [ $? -ne 0 ]; then\n                echo -e \"[${red}Error${plain}] Please enter a number\"\n                continue\n            fi\n            if [[ \"$r_libev_obfs\" -lt 1 || \"$r_libev_obfs\" -gt ${#obfs_libev[@]} ]]; then\n                echo -e \"[${red}Error${plain}] Please enter a number between 1 and ${#obfs_libev[@]}\"\n                continue\n            fi\n            shadowsocklibev_obfs=${obfs_libev[$r_libev_obfs-1]}\n            echo\n            echo \"obfs = ${shadowsocklibev_obfs}\"\n            echo\n            break\n            done\n        fi\n    else\n        echo -e \"[${green}Info${plain}] autoconf version is less than 2.67, simple-obfs for ${software[${selected}-1]} installation has been skipped\"\n    fi\n}\n\ninstall_prepare(){\n\n    if  [[ \"${selected}\" == '1' || \"${selected}\" == '3' || \"${selected}\" == '4' ]]; then\n        install_prepare_password\n        install_prepare_port\n        install_prepare_cipher\n        if [ \"${selected}\" == '4' ]; then\n            install_prepare_libev_obfs\n        fi\n    elif [ \"${selected}\" == '2' ]; then\n        install_prepare_password\n        install_prepare_port\n        install_prepare_cipher\n        install_prepare_protocol\n        install_prepare_obfs\n    fi\n\n    echo\n    echo 'Press any key to start...or Press Ctrl+C to cancel'\n    char=$(get_char)\n\n}\n\ninstall_libsodium(){\n    if [ ! -f /usr/lib/libsodium.a ]; then\n        cd \"${cur_dir}\" || exit\n        download \"${libsodium_file}.tar.gz\" \"${libsodium_url}\"\n        tar zxf ${libsodium_file}.tar.gz\n        cd ${libsodium_file} || exit\n        ./configure --prefix=/usr && make && make install\n        if [ $? -ne 0 ]; then\n            echo -e \"[${red}Error${plain}] ${libsodium_file} install failed.\"\n            install_cleanup\n            exit 1\n        fi\n    else\n        echo -e \"[${green}Info${plain}] ${libsodium_file} already installed.\"\n    fi\n}\n\ninstall_mbedtls(){\n    if [ ! -f /usr/lib/libmbedtls.a ]; then\n        cd \"${cur_dir}\" || exit\n        download \"${mbedtls_file}.tar.gz\" \"${mbedtls_url}\"\n        tar zxf \"${mbedtls_file}.tar.gz\"\n        cd \"${mbedtls_file}\" || exit\n        make SHARED=1 CFLAGS=-fPIC\n        make DESTDIR=/usr install\n        if [ $? -ne 0 ]; then\n            echo -e \"[${red}Error${plain}] ${mbedtls_file} install failed.\"\n            install_cleanup\n            exit 1\n        fi\n    else\n        echo -e \"[${green}Info${plain}] ${mbedtls_file} already installed.\"\n    fi\n}\n\ninstall_shadowsocks_python(){\n    cd \"${cur_dir}\" || exit\n    unzip -q ${shadowsocks_python_file}.zip\n    if [ $? -ne 0 ];then\n        echo -e \"[${red}Error${plain}] unzip ${shadowsocks_python_file}.zip failed, please check unzip command.\"\n        install_cleanup\n        exit 1\n    fi\n\n    cd ${shadowsocks_python_file} || exit\n    python setup.py install --record /usr/local/shadowsocks_python.log\n\n    if [ -f /usr/bin/ssserver ] || [ -f /usr/local/bin/ssserver ]; then\n        chmod +x ${shadowsocks_python_init}\n        local service_name\n        service_name=$(basename ${shadowsocks_python_init})\n        if check_sys packageManager yum; then\n            chkconfig --add \"${service_name}\"\n            chkconfig \"${service_name}\" on\n        elif check_sys packageManager apt; then\n            update-rc.d -f \"${service_name}\" defaults\n        fi\n    else\n        echo\n        echo -e \"[${red}Error${plain}] ${software[0]} install failed.\"\n        echo 'Please visit: https://teddysun.com/486.html and contact.'\n        install_cleanup\n        exit 1\n    fi\n}\n\ninstall_shadowsocks_r(){\n    cd \"${cur_dir}\" || exit\n    tar zxf ${shadowsocks_r_file}.tar.gz\n    mv ${shadowsocks_r_file}/shadowsocks /usr/local/\n    if [ -f /usr/local/shadowsocks/server.py ]; then\n        chmod +x ${shadowsocks_r_init}\n        local service_name\n        service_name=$(basename ${shadowsocks_r_init})\n        if check_sys packageManager yum; then\n            chkconfig --add \"${service_name}\"\n            chkconfig \"${service_name}\" on\n        elif check_sys packageManager apt; then\n            update-rc.d -f \"${service_name}\" defaults\n        fi\n    else\n        echo\n        echo -e \"[${red}Error${plain}] ${software[1]} install failed.\"\n        echo 'Please visit; https://teddysun.com/486.html and contact.'\n        install_cleanup\n        exit 1\n    fi\n}\n\ninstall_shadowsocks_go(){\n    cd \"${cur_dir}\" || exit\n    if is_64bit; then\n        gzip -d ${shadowsocks_go_file_64}.gz\n        if [ $? -ne 0 ];then\n            echo -e \"[${red}Error${plain}] Decompress ${shadowsocks_go_file_64}.gz failed.\"\n            install_cleanup\n            exit 1\n        fi\n        mv -f ${shadowsocks_go_file_64} /usr/bin/shadowsocks-server\n    else\n        gzip -d ${shadowsocks_go_file_32}.gz\n        if [ $? -ne 0 ];then\n            echo -e \"[${red}Error${plain}] Decompress ${shadowsocks_go_file_32}.gz failed.\"\n            install_cleanup\n            exit 1\n        fi\n        mv -f ${shadowsocks_go_file_32} /usr/bin/shadowsocks-server\n    fi\n\n    if [ -f /usr/bin/shadowsocks-server ]; then\n        chmod +x /usr/bin/shadowsocks-server\n        chmod +x ${shadowsocks_go_init}\n\n        local service_name\n        service_name=$(basename ${shadowsocks_go_init})\n        if check_sys packageManager yum; then\n            chkconfig --add \"${service_name}\"\n            chkconfig \"${service_name}\" on\n        elif check_sys packageManager apt; then\n            update-rc.d -f \"${service_name}\" defaults\n        fi\n    else\n        echo\n        echo -e \"[${red}Error${plain}] ${software[2]} install failed.\"\n        echo 'Please visit: https://teddysun.com/486.html and contact.'\n        install_cleanup\n        exit 1\n    fi\n}\n\ninstall_shadowsocks_libev(){\n    cd \"${cur_dir}\" || exit\n    tar zxf \"${shadowsocks_libev_file}\".tar.gz\n    cd \"${shadowsocks_libev_file}\" || exit\n    ./configure --disable-documentation && make && make install\n    if [ $? -eq 0 ]; then\n        chmod +x ${shadowsocks_libev_init}\n        local service_name\n        service_name=$(basename ${shadowsocks_libev_init})\n        if check_sys packageManager yum; then\n            chkconfig --add \"${service_name}\"\n            chkconfig \"${service_name}\" on\n        elif check_sys packageManager apt; then\n            update-rc.d -f \"${service_name}\" defaults\n        fi\n    else\n        echo\n        echo -e \"[${red}Error${plain}] ${software[3]} install failed.\"\n        echo 'Please visit: https://teddysun.com/486.html and contact.'\n        install_cleanup\n        exit 1\n    fi\n}\n\ninstall_shadowsocks_libev_obfs(){\n    if [ \"${libev_obfs}\" == 'y' ] || [ \"${libev_obfs}\" == 'Y' ]; then\n        cd \"${cur_dir}\" || exit\n        git clone https://github.com/shadowsocks/simple-obfs.git\n        [ -d simple-obfs ] && cd simple-obfs || echo -e \"[${red}Error:${plain}] Failed to git clone simple-obfs.\"\n        git submodule update --init --recursive\n        if centosversion 6; then\n            if [ ! \"$(command -v autoconf268)\" ]; then\n                echo -e \"[${green}Info${plain}] Starting install autoconf268...\"\n                yum install -y autoconf268 > /dev/null 2>&1 || echo -e \"[${red}Error:${plain}] Failed to install autoconf268.\"\n            fi\n            # replace command autoreconf to autoreconf268\n            sed -i 's/autoreconf/autoreconf268/' autogen.sh\n            # replace #include <ev.h> to #include <libev/ev.h>\n            sed -i 's@^#include <ev.h>@#include <libev/ev.h>@' src/local.h\n            sed -i 's@^#include <ev.h>@#include <libev/ev.h>@' src/server.h\n        fi\n        ./autogen.sh\n        ./configure --disable-documentation\n        make\n        make install\n        if [ ! \"$(command -v obfs-server)\" ]; then\n            echo -e \"[${red}Error${plain}] simple-obfs for ${software[${selected}-1]} install failed.\"\n            echo 'Please visit: https://teddysun.com/486.html and contact.'\n            install_cleanup\n            exit 1\n        fi\n        [ -f /usr/local/bin/obfs-server ] && ln -s /usr/local/bin/obfs-server /usr/bin\n    fi\n}\n\ninstall_completed_python(){\n    clear\n    ${shadowsocks_python_init} start\n    echo\n    echo -e \"Congratulations, ${green}${software[0]}${plain} server install completed!\"\n    echo -e \"Your Server IP        : ${red} $(get_ip) ${plain}\"\n    echo -e \"Your Server Port      : ${red} ${shadowsocksport} ${plain}\"\n    echo -e \"Your Password         : ${red} ${shadowsockspwd} ${plain}\"\n    echo -e \"Your Encryption Method: ${red} ${shadowsockscipher} ${plain}\"\n}\n\ninstall_completed_r(){\n    clear\n    ${shadowsocks_r_init} start\n    echo\n    echo -e \"Congratulations, ${green}${software[1]}${plain} server install completed!\"\n    echo -e \"Your Server IP        : ${red} $(get_ip) ${plain}\"\n    echo -e \"Your Server Port      : ${red} ${shadowsocksport} ${plain}\"\n    echo -e \"Your Password         : ${red} ${shadowsockspwd} ${plain}\"\n    echo -e \"Your Protocol         : ${red} ${shadowsockprotocol} ${plain}\"\n    echo -e \"Your obfs             : ${red} ${shadowsockobfs} ${plain}\"\n    echo -e \"Your Encryption Method: ${red} ${shadowsockscipher} ${plain}\"\n}\n\ninstall_completed_go(){\n    clear\n    ${shadowsocks_go_init} start\n    echo\n    echo -e \"Congratulations, ${green}${software[2]}${plain} server install completed!\"\n    echo -e \"Your Server IP        : ${red} $(get_ip) ${plain}\"\n    echo -e \"Your Server Port      : ${red} ${shadowsocksport} ${plain}\"\n    echo -e \"Your Password         : ${red} ${shadowsockspwd} ${plain}\"\n    echo -e \"Your Encryption Method: ${red} ${shadowsockscipher} ${plain}\"\n}\n\ninstall_completed_libev(){\n    clear\n    ldconfig\n    ${shadowsocks_libev_init} start\n    echo\n    echo -e \"Congratulations, ${green}${software[3]}${plain} server install completed!\"\n    echo -e \"Your Server IP        : ${red} $(get_ip) ${plain}\"\n    echo -e \"Your Server Port      : ${red} ${shadowsocksport} ${plain}\"\n    echo -e \"Your Password         : ${red} ${shadowsockspwd} ${plain}\"\n    if [ \"$(command -v obfs-server)\" ]; then\n    echo -e \"Your obfs             : ${red} ${shadowsocklibev_obfs} ${plain}\"\n    fi\n    echo -e \"Your Encryption Method: ${red} ${shadowsockscipher} ${plain}\"\n}\n\nqr_generate_python(){\n    if [ \"$(command -v qrencode)\" ]; then\n        local tmp\n        tmp=$(echo -n \"${shadowsockscipher}:${shadowsockspwd}@$(get_ip):${shadowsocksport}\" | base64 -w0)\n        local qr_code=\"ss://${tmp}\"\n        echo\n        echo 'Your QR Code: (For Shadowsocks Windows, OSX, Android and iOS clients)'\n        echo -e \"${green} ${qr_code} ${plain}\"\n        echo -n \"${qr_code}\" | qrencode -s8 -o \"${cur_dir}\"/shadowsocks_python_qr.png\n        echo 'Your QR Code has been saved as a PNG file path:'\n        echo -e \"${green} ${cur_dir}/shadowsocks_python_qr.png ${plain}\"\n    fi\n}\n\nqr_generate_r(){\n    if [ \"$(command -v qrencode)\" ]; then\n        local tmp1\n        tmp1=$(echo -n \"${shadowsockspwd}\" | base64 -w0 | sed 's/=//g;s/\\//_/g;s/+/-/g')\n        local tmp2\n        tmp2=$(echo -n \"$(get_ip):${shadowsocksport}:${shadowsockprotocol}:${shadowsockscipher}:${shadowsockobfs}:${tmp1}/?obfsparam=\" | base64 -w0)\n        local qr_code=\"ssr://${tmp2}\"\n        echo\n        echo 'Your QR Code: (For ShadowsocksR Windows, Android clients only)'\n        echo -e \"${green} ${qr_code} ${plain}\"\n        echo -n \"${qr_code}\" | qrencode -s8 -o \"${cur_dir}\"/shadowsocks_r_qr.png\n        echo 'Your QR Code has been saved as a PNG file path:'\n        echo -e \"${green} ${cur_dir}/shadowsocks_r_qr.png ${plain}\"\n    fi\n}\n\nqr_generate_go(){\n    if [ \"$(command -v qrencode)\" ]; then\n        local tmp\n        tmp=$(echo -n \"${shadowsockscipher}:${shadowsockspwd}@$(get_ip):${shadowsocksport}\" | base64 -w0)\n        local qr_code=\"ss://${tmp}\"\n        echo\n        echo 'Your QR Code: (For Shadowsocks Windows, OSX, Android and iOS clients)'\n        echo -e \"${green} ${qr_code} ${plain}\"\n        echo -n \"${qr_code}\" | qrencode -s8 -o \"${cur_dir}\"/shadowsocks_go_qr.png\n        echo 'Your QR Code has been saved as a PNG file path:'\n        echo -e \"${green} ${cur_dir}/shadowsocks_go_qr.png ${plain}\"\n    fi\n}\n\nqr_generate_libev(){\n    if [ \"$(command -v qrencode)\" ]; then\n        local tmp\n        tmp=$(echo -n \"${shadowsockscipher}:${shadowsockspwd}@$(get_ip):${shadowsocksport}\" | base64 -w0)\n        local qr_code=\"ss://${tmp}\"\n        echo\n        echo 'Your QR Code: (For Shadowsocks Windows, OSX, Android and iOS clients)'\n        echo -e \"${green} ${qr_code} ${plain}\"\n        echo -n \"${qr_code}\" | qrencode -s8 -o \"${cur_dir}\"/shadowsocks_libev_qr.png\n        echo 'Your QR Code has been saved as a PNG file path:'\n        echo -e \"${green} ${cur_dir}/shadowsocks_libev_qr.png ${plain}\"\n    fi\n}\n\ninstall_main(){\n    install_libsodium\n    if ! ldconfig -p | grep -wq '/usr/lib'; then\n        echo '/usr/lib' > /etc/ld.so.conf.d/lib.conf\n    fi\n    ldconfig\n\n    if   [ \"${selected}\" == '1' ]; then\n        install_shadowsocks_python\n        install_completed_python\n        qr_generate_python\n    elif [ \"${selected}\" == '2' ]; then\n        install_shadowsocks_r\n        install_completed_r\n        qr_generate_r\n    elif [ \"${selected}\" == '3' ]; then\n        install_shadowsocks_go\n        install_completed_go\n        qr_generate_go\n    elif [ \"${selected}\" == '4' ]; then\n        install_mbedtls\n        install_shadowsocks_libev\n        install_shadowsocks_libev_obfs\n        install_completed_libev\n        qr_generate_libev\n    fi\n\n    echo\n    echo 'Welcome to visit: https://teddysun.com/486.html'\n    echo 'Enjoy it!'\n    echo\n}\n\ninstall_cleanup(){\n    cd \"${cur_dir}\" || exit\n    rm -rf simple-obfs\n    rm -rf ${libsodium_file} ${libsodium_file}.tar.gz\n    rm -rf \"${mbedtls_file}\" \"${mbedtls_file}\"-apache.tgz\n    rm -rf ${shadowsocks_python_file} ${shadowsocks_python_file}.zip\n    rm -rf ${shadowsocks_r_file} ${shadowsocks_r_file}.tar.gz\n    rm -rf ${shadowsocks_go_file_64}.gz ${shadowsocks_go_file_32}.gz\n    rm -rf \"${shadowsocks_libev_file}\" \"${shadowsocks_libev_file}\".tar.gz\n}\n\ninstall_shadowsocks(){\n    disable_selinux\n    install_select\n    install_prepare\n    install_dependencies\n    download_files\n    config_shadowsocks\n    if check_sys packageManager yum; then\n        config_firewall\n    fi\n    install_main\n    install_cleanup\n}\n\nuninstall_shadowsocks_python(){\n    printf \"Are you sure uninstall ${red}${software[0]}${plain}? [y/n]\\n\"\n    read -p '(default: n):' answer\n    [ -z \"${answer}\" ] && answer='n'\n    if [ \"${answer}\" == 'y' ] || [ \"${answer}\" == 'Y' ]; then\n        ${shadowsocks_python_init} status > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            ${shadowsocks_python_init} stop\n        fi\n        local service_name\n        service_name=$(basename ${shadowsocks_python_init})\n        if check_sys packageManager yum; then\n            chkconfig --del \"${service_name}\"\n        elif check_sys packageManager apt; then\n            update-rc.d -f \"${service_name}\" remove\n        fi\n\n        rm -fr $(dirname ${shadowsocks_python_config})\n        rm -f ${shadowsocks_python_init}\n        rm -f /var/log/shadowsocks.log\n        if [ -f /usr/local/shadowsocks_python.log ]; then\n            cat /usr/local/shadowsocks_python.log | xargs rm -rf\n            rm -f /usr/local/shadowsocks_python.log\n        fi\n        echo -e \"[${green}Info${plain}] ${software[0]} uninstall success\"\n    else\n        echo\n        echo -e \"[${green}Info${plain}] ${software[0]} uninstall cancelled, nothing to do...\"\n        echo\n    fi\n}\n\nuninstall_shadowsocks_r(){\n    printf \"Are you sure uninstall ${red}${software[1]}${plain}? [y/n]\\n\"\n    read -p '(default: n):' answer\n    [ -z \"${answer}\" ] && answer='n'\n    if [ \"${answer}\" == 'y' ] || [ \"${answer}\" == 'Y' ]; then\n        ${shadowsocks_r_init} status > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            ${shadowsocks_r_init} stop\n        fi\n        local service_name\n        service_name=$(basename ${shadowsocks_r_init})\n        if check_sys packageManager yum; then\n            chkconfig --del \"${service_name}\"\n        elif check_sys packageManager apt; then\n            update-rc.d -f \"${service_name}\" remove\n        fi\n        rm -fr $(dirname ${shadowsocks_r_config})\n        rm -f ${shadowsocks_r_init}\n        rm -f /var/log/shadowsocks.log\n        rm -fr /usr/local/shadowsocks\n        echo -e \"[${green}Info${plain}] ${software[1]} uninstall success\"\n    else\n        echo\n        echo -e \"[${green}Info${plain}] ${software[1]} uninstall cancelled, nothing to do...\"\n        echo\n    fi\n}\n\nuninstall_shadowsocks_go(){\n    printf \"Are you sure uninstall ${red}${software[2]}${plain}? [y/n]\\n\"\n    read -p '(default: n):' answer\n    [ -z \"${answer}\" ] && answer='n'\n    if [ \"${answer}\" == 'y' ] || [ \"${answer}\" == 'Y' ]; then\n        ${shadowsocks_go_init} status > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            ${shadowsocks_go_init} stop\n        fi\n        local service_name\n        service_name=$(basename ${shadowsocks_go_init})\n        if check_sys packageManager yum; then\n            chkconfig --del \"${service_name}\"\n        elif check_sys packageManager apt; then\n            update-rc.d -f \"${service_name}\" remove\n        fi\n        rm -fr $(dirname ${shadowsocks_go_config})\n        rm -f ${shadowsocks_go_init}\n        rm -f /usr/bin/shadowsocks-server\n        echo -e \"[${green}Info${plain}] ${software[2]} uninstall success\"\n    else\n        echo\n        echo -e \"[${green}Info${plain}] ${software[2]} uninstall cancelled, nothing to do...\"\n        echo\n    fi\n}\n\nuninstall_shadowsocks_libev(){\n    printf \"Are you sure uninstall ${red}${software[3]}${plain}? [y/n]\\n\"\n    read -p '(default: n):' answer\n    [ -z \"${answer}\" ] && answer='n'\n    if [ \"${answer}\" == 'y' ] || [ \"${answer}\" == 'Y' ]; then\n        ${shadowsocks_libev_init} status > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            ${shadowsocks_libev_init} stop\n        fi\n        local service_name\n        service_name=$(basename ${shadowsocks_libev_init})\n        if check_sys packageManager yum; then\n            chkconfig --del \"${service_name}\"\n        elif check_sys packageManager apt; then\n            update-rc.d -f \"${service_name}\" remove\n        fi\n        rm -fr $(dirname ${shadowsocks_libev_config})\n        rm -f /usr/local/bin/ss-local\n        rm -f /usr/local/bin/ss-tunnel\n        rm -f /usr/local/bin/ss-server\n        rm -f /usr/local/bin/ss-manager\n        rm -f /usr/local/bin/ss-redir\n        rm -f /usr/local/bin/ss-nat\n        rm -f /usr/local/bin/obfs-local\n        rm -f /usr/local/bin/obfs-server\n        rm -f /usr/local/lib/libshadowsocks-libev.a\n        rm -f /usr/local/lib/libshadowsocks-libev.la\n        rm -f /usr/local/include/shadowsocks.h\n        rm -f /usr/local/lib/pkgconfig/shadowsocks-libev.pc\n        rm -f /usr/local/share/man/man1/ss-local.1\n        rm -f /usr/local/share/man/man1/ss-tunnel.1\n        rm -f /usr/local/share/man/man1/ss-server.1\n        rm -f /usr/local/share/man/man1/ss-manager.1\n        rm -f /usr/local/share/man/man1/ss-redir.1\n        rm -f /usr/local/share/man/man1/ss-nat.1\n        rm -f /usr/local/share/man/man8/shadowsocks-libev.8\n        rm -fr /usr/local/share/doc/shadowsocks-libev\n        rm -f ${shadowsocks_libev_init}\n        echo -e \"[${green}Info${plain}] ${software[3]} uninstall success\"\n    else\n        echo\n        echo -e \"[${green}Info${plain}] ${software[3]} uninstall cancelled, nothing to do...\"\n        echo\n    fi\n}\n\nuninstall_shadowsocks(){\n    while true\n    do\n    echo 'Which Shadowsocks server you want to uninstall?'\n    for ((i=1;i<=${#software[@]};i++ )); do\n        hint=\"${software[$i-1]}\"\n        echo -e \"${green}${i}${plain}) ${hint}\"\n    done\n    read -p 'Please enter a number [1-4]:' un_select\n    case \"${un_select}\" in\n        1|2|3|4)\n        echo\n        echo \"You choose = ${software[${un_select}-1]}\"\n        echo\n        break\n        ;;\n        *)\n        echo -e \"[${red}Error${plain}] Please only enter a number [1-4]\"\n        ;;\n    esac\n    done\n\n    if   [ \"${un_select}\" == '1' ]; then\n        if [ -f ${shadowsocks_python_init} ]; then\n            uninstall_shadowsocks_python\n        else\n            echo -e \"[${red}Error${plain}] ${software[${un_select}-1]} not installed, please check it and try again.\"\n            echo\n            exit 1\n        fi\n    elif [ \"${un_select}\" == '2' ]; then\n        if [ -f ${shadowsocks_r_init} ]; then\n            uninstall_shadowsocks_r\n        else\n            echo -e \"[${red}Error${plain}] ${software[${un_select}-1]} not installed, please check it and try again.\"\n            echo\n            exit 1\n        fi\n    elif [ \"${un_select}\" == '3' ]; then\n        if [ -f ${shadowsocks_go_init} ]; then\n            uninstall_shadowsocks_go\n        else\n            echo -e \"[${red}Error${plain}] ${software[${un_select}-1]} not installed, please check it and try again.\"\n            echo\n            exit 1\n        fi\n    elif [ \"${un_select}\" == '4' ]; then\n        if [ -f ${shadowsocks_libev_init} ]; then\n            uninstall_shadowsocks_libev\n        else\n            echo -e \"[${red}Error${plain}] ${software[${un_select}-1]} not installed, please check it and try again.\"\n            echo\n            exit 1\n        fi\n    fi\n}\n\n# Initialization step\naction=$1\n[ -z \"$1\" ] && action=install\ncase \"${action}\" in\n    install|uninstall)\n        ${action}_shadowsocks\n        ;;\n    *)\n        echo \"Arguments error! [${action}]\"\n        echo \"Usage: $(basename \"$0\") [install|uninstall]\"\n        ;;\nesac\n"
        },
        {
          "name": "shadowsocks-crond.sh",
          "type": "blob",
          "size": 1.6474609375,
          "content": "#!/usr/bin/env bash\n#=================================================================#\n#   System Required:  CentOS, Debian, Ubuntu                      #\n#   Description: Check Shadowsocks Server is running or not       #\n#   Author: Teddysun <i@teddysun.com>                             #\n#   Visit: https://shadowsocks.be/6.html                          #\n#=================================================================#\n\nname=(Shadowsocks Shadowsocks-Python ShadowsocksR Shadowsocks-Go Shadowsocks-libev)\npath=/var/log\n[[ ! -d ${path} ]] && mkdir -p ${path}\nlog=${path}/shadowsocks-crond.log\n\nshadowsocks_init[0]=/etc/init.d/shadowsocks\nshadowsocks_init[1]=/etc/init.d/shadowsocks-python\nshadowsocks_init[2]=/etc/init.d/shadowsocks-r\nshadowsocks_init[3]=/etc/init.d/shadowsocks-go\nshadowsocks_init[4]=/etc/init.d/shadowsocks-libev\n\ni=0\nfor init in \"${shadowsocks_init[@]}\"; do\n    pid=\"\"\n    if [ -f ${init} ]; then\n        ss_status=$(${init} status)\n        if [ $? -eq 0 ]; then\n            pid=$(echo \"$ss_status\" | sed -e 's/[^0-9]*//g')\n        fi\n\n        if [ -z \"${pid}\" ]; then\n            echo \"$(date +'%Y-%m-%d %H:%M:%S') ${name[$i]} is not running\" >> ${log}\n            echo \"$(date +'%Y-%m-%d %H:%M:%S') Starting ${name[$i]}\" >> ${log}\n            ${init} start &>/dev/null\n            if [ $? -eq 0 ]; then\n                echo \"$(date +'%Y-%m-%d %H:%M:%S') ${name[$i]} start success\" >> ${log}\n            else\n                echo \"$(date +'%Y-%m-%d %H:%M:%S') ${name[$i]} start failed\" >> ${log}\n            fi\n        else\n            echo \"$(date +'%Y-%m-%d %H:%M:%S') ${name[$i]} is running with pid $pid\" >> ${log}\n        fi\n    \n    fi\n    ((i++))\ndone\n"
        },
        {
          "name": "shadowsocks-debian",
          "type": "blob",
          "size": 1.919921875,
          "content": "#!/bin/bash\n\n### BEGIN INIT INFO\n# Provides:          Shadowsocks\n# Required-Start:    $network $local_fs $remote_fs\n# Required-Stop:     $network $local_fs $remote_fs\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: Fast tunnel proxy that helps you bypass firewalls\n# Description:       Start or stop the Shadowsocks server\n### END INIT INFO\n\n# Author: Teddysun <i@teddysun.com>\n\nNAME=Shadowsocks\nif [ -f /usr/bin/ssserver ]; then\n    DAEMON=/usr/bin/ssserver\nelif [ -f /usr/local/bin/ssserver ]; then\n    DAEMON=/usr/local/bin/ssserver\nfi\nif [ -f /etc/shadowsocks-python/config.json ]; then\n    CONF=/etc/shadowsocks-python/config.json\nelif [ -f /etc/shadowsocks.json ]; then\n    CONF=/etc/shadowsocks.json\nfi\nRETVAL=0\n\ncheck_running(){\n    PID=$(ps -ef | grep -v grep | grep -i \"${DAEMON}\" | awk '{print $2}')\n    if [ -n \"$PID\" ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ndo_start(){\n    check_running\n    if [ $? -eq 0 ]; then\n        echo \"$NAME (pid $PID) is already running...\"\n        exit 0\n    else\n        $DAEMON -c $CONF -d start\n        RETVAL=$?\n        if [ $RETVAL -eq 0 ]; then\n            echo \"Starting $NAME success\"\n        else\n            echo \"Starting $NAME failed\"\n        fi\n    fi\n}\n\ndo_stop(){\n    check_running\n    if [ $? -eq 0 ]; then\n        $DAEMON -c $CONF -d stop\n        RETVAL=$?\n        if [ $RETVAL -eq 0 ]; then\n            echo \"Stopping $NAME success\"\n        else\n            echo \"Stopping $NAME failed\"\n        fi\n    else\n        echo \"$NAME is stopped\"\n        RETVAL=1\n    fi\n}\n\ndo_status(){\n    check_running\n    if [ $? -eq 0 ]; then\n        echo \"$NAME (pid $PID) is running...\"\n    else\n        echo \"$NAME is stopped\"\n        RETVAL=1\n    fi\n}\n\ndo_restart(){\n    do_stop\n    sleep 0.5\n    do_start\n}\n\ncase \"$1\" in\n    start|stop|restart|status)\n    do_$1\n    ;;\n    *)\n    echo \"Usage: $0 { start | stop | restart | status }\"\n    RETVAL=1\n    ;;\nesac\n\nexit $RETVAL\n"
        },
        {
          "name": "shadowsocks-go",
          "type": "blob",
          "size": 2.3251953125,
          "content": "#!/bin/bash\n# chkconfig: 2345 90 10\n# description: A secure socks5 proxy, designed to protect your Internet traffic.\n\n### BEGIN INIT INFO\n# Provides:          Shadowsocks-go\n# Required-Start:    $network $syslog\n# Required-Stop:     $network\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: Fast tunnel proxy that helps you bypass firewalls\n# Description:       Start or stop the Shadowsocks-go server\n### END INIT INFO\n\n# Author: Teddysun <i@teddysun.com>\n\n# Source function library\n. /etc/rc.d/init.d/functions\n\n# Check that networking is up.\n[ ${NETWORKING} =\"yes\" ] || exit 0\n\nNAME=Shadowsocks-go\nDAEMON=/usr/bin/shadowsocks-server\nif [ -f /etc/shadowsocks-go/config.json ]; then\n    CONF=/etc/shadowsocks-go/config.json\nelif [ -f /etc/shadowsocks/config.json ]; then\n    CONF=/etc/shadowsocks/config.json\nfi\nPID_DIR=/var/run\nPID_FILE=$PID_DIR/shadowsocks-go.pid\nRET_VAL=0\n\n[ -x $DAEMON ] || exit 0\n\nif [ ! -d $PID_DIR ]; then\n    mkdir -p $PID_DIR\n    if [ $? -ne 0 ]; then\n        echo \"Creating PID directory $PID_DIR failed\"\n        exit 1\n    fi\nfi\n\nif [ ! -f $CONF ]; then\n    echo \"$NAME config file $CONF not found\"\n    exit 1\nfi\n\ncheck_running() {\n    if [ -r $PID_FILE ]; then\n        read PID < $PID_FILE\n        if [ -d \"/proc/$PID\" ]; then\n            return 0\n        else\n            rm -f $PID_FILE\n            return 1\n        fi\n    else\n        return 2\n    fi\n}\n\ndo_status() {\n    check_running\n    case $? in\n        0)\n        echo \"$NAME (pid $PID) is running...\"\n        ;;\n        1|2)\n        echo \"$NAME is stopped\"\n        RET_VAL=1\n        ;;\n    esac\n}\n\ndo_start() {\n    if check_running; then\n        echo \"$NAME (pid $PID) is already running...\"\n        return 0\n    fi\n    $DAEMON -u -c $CONF 2>&1 > /dev/null &\n    PID=$!\n    echo $PID > $PID_FILE\n    sleep 0.3\n    if check_running; then\n        echo \"Starting $NAME success\"\n    else\n        echo \"Starting $NAME failed\"\n        RET_VAL=1\n    fi\n}\n\ndo_stop() {\n    if check_running; then\n        kill -9 $PID\n        rm -f $PID_FILE\n        echo \"Stopping $NAME success\"\n    else\n        echo \"$NAME is stopped\"\n        RET_VAL=1\n    fi\n}\n\ndo_restart() {\n    do_stop\n    sleep 0.5\n    do_start\n}\n\ncase \"$1\" in\n    start|stop|restart|status)\n    do_$1\n    ;;\n    *)\n    echo \"Usage: $0 { start | stop | restart | status }\"\n    RET_VAL=1\n    ;;\nesac\n\nexit $RET_VAL\n"
        },
        {
          "name": "shadowsocks-go-debian",
          "type": "blob",
          "size": 2.1357421875,
          "content": "#!/bin/bash\n\n### BEGIN INIT INFO\n# Provides:          Shadowsocks-go\n# Required-Start:    $network $local_fs $remote_fs\n# Required-Stop:     $network $local_fs $remote_fs\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: Fast tunnel proxy that helps you bypass firewalls\n# Description:       Start or stop the Shadowsocks-go server\n### END INIT INFO\n\n# Author: Teddysun <i@teddysun.com>\n\nNAME=Shadowsocks-go\nDAEMON=/usr/bin/shadowsocks-server\nif [ -f /etc/shadowsocks-go/config.json ]; then\n    CONF=/etc/shadowsocks-go/config.json\nelif [ -f /etc/shadowsocks/config.json ]; then\n    CONF=/etc/shadowsocks/config.json\nfi\nPID_DIR=/var/run\nPID_FILE=$PID_DIR/shadowsocks-go.pid\nRET_VAL=0\n\n[ -x $DAEMON ] || exit 0\n\nif [ ! -d $PID_DIR ]; then\n    mkdir -p $PID_DIR\n    if [ $? -ne 0 ]; then\n        echo \"Creating PID directory $PID_DIR failed\"\n        exit 1\n    fi\nfi\n\nif [ ! -f $CONF ]; then\n    echo \"$NAME config file $CONF not found\"\n    exit 1\nfi\n\ncheck_running() {\n    if [ -r $PID_FILE ]; then\n        read PID < $PID_FILE\n        if [ -d \"/proc/$PID\" ]; then\n            return 0\n        else\n            rm -f $PID_FILE\n            return 1\n        fi\n    else\n        return 2\n    fi\n}\n\ndo_status() {\n    check_running\n    case $? in\n        0)\n        echo \"$NAME (pid $PID) is running...\"\n        ;;\n        1|2)\n        echo \"$NAME is stopped\"\n        RET_VAL=1\n        ;;\n    esac\n}\n\ndo_start() {\n    if check_running; then\n        echo \"$NAME (pid $PID) is already running...\"\n        return 0\n    fi\n    $DAEMON -u -c $CONF 2>&1 > /dev/null &\n    PID=$!\n    echo $PID > $PID_FILE\n    sleep 0.3\n    if check_running; then\n        echo \"Starting $NAME success\"\n    else\n        echo \"Starting $NAME failed\"\n        RET_VAL=1\n    fi\n}\n\ndo_stop() {\n    if check_running; then\n        kill -9 $PID\n        rm -f $PID_FILE\n        echo \"Stopping $NAME success\"\n    else\n        echo \"$NAME is stopped\"\n        RET_VAL=1\n    fi\n}\n\ndo_restart() {\n    do_stop\n    sleep 0.5\n    do_start\n}\n\ncase \"$1\" in\n    start|stop|restart|status)\n    do_$1\n    ;;\n    *)\n    echo \"Usage: $0 { start | stop | restart | status }\"\n    RET_VAL=1\n    ;;\nesac\n\nexit $RET_VAL\n"
        },
        {
          "name": "shadowsocks-go.sh",
          "type": "blob",
          "size": 12.7490234375,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n#=================================================================#\n#   System Required:  CentOS, Debian, Ubuntu                      #\n#   Description: One click Install Shadowsocks-go server          #\n#   Author: Teddysun <i@teddysun.com>                             #\n#   Thanks: @cyfdecyf <https://twitter.com/cyfdecyf>              #\n#   Intro:  https://teddysun.com/392.html                         #\n#==================================================================\n\nclear\necho\necho \"#############################################################\"\necho \"# One click Install Shadowsocks-go server                   #\"\necho \"# Intro: https://teddysun.com/392.html                      #\"\necho \"# Author: Teddysun <i@teddysun.com>                         #\"\necho \"# Github: https://github.com/shadowsocks/shadowsocks-go     #\"\necho \"#############################################################\"\necho\n\n# Current folder\ncur_dir=`pwd`\n# Stream Ciphers\nciphers=(\naes-256-cfb\naes-192-cfb\naes-128-cfb\naes-256-ctr\naes-192-ctr\naes-128-ctr\nchacha20-ietf\nchacha20\nsalsa20\nrc4-md5\n)\n# Color\nred='\\033[0;31m'\ngreen='\\033[0;32m'\nyellow='\\033[0;33m'\nplain='\\033[0m'\n\n# Make sure only root can run our script\n[[ $EUID -ne 0 ]] && echo -e \"[${red}Error${plain}] This script must be run as root!\" && exit 1\n\n#Check system\ncheck_sys(){\n    local checkType=$1\n    local value=$2\n\n    local release=''\n    local systemPackage=''\n\n    if [[ -f /etc/redhat-release ]]; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    elif grep -Eqi \"debian\" /etc/issue; then\n        release=\"debian\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"ubuntu\" /etc/issue; then\n        release=\"ubuntu\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"centos|red hat|redhat\" /etc/issue; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    elif grep -Eqi \"debian|raspbian\" /proc/version; then\n        release=\"debian\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"ubuntu\" /proc/version; then\n        release=\"ubuntu\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"centos|red hat|redhat\" /proc/version; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    fi\n\n    if [[ \"${checkType}\" == \"sysRelease\" ]]; then\n        if [ \"${value}\" == \"${release}\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    elif [[ \"${checkType}\" == \"packageManager\" ]]; then\n        if [ \"${value}\" == \"${systemPackage}\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    fi\n}\n\n# Get version\ngetversion(){\n    if [[ -s /etc/redhat-release ]]; then\n        grep -oE  \"[0-9.]+\" /etc/redhat-release\n    else\n        grep -oE  \"[0-9.]+\" /etc/issue\n    fi\n}\n\n# CentOS version\ncentosversion(){\n    if check_sys sysRelease centos; then\n        local code=$1\n        local version=\"$(getversion)\"\n        local main_ver=${version%%.*}\n        if [ \"$main_ver\" == \"$code\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    else\n        return 1\n    fi\n}\n\n# is 64bit or not\nis_64bit(){\n    if [ `getconf WORD_BIT` = '32' ] && [ `getconf LONG_BIT` = '64' ] ; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n# Disable selinux\ndisable_selinux(){\n    if [ -s /etc/selinux/config ] && grep 'SELINUX=enforcing' /etc/selinux/config; then\n        sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config\n        setenforce 0\n    fi\n}\n\nget_ip(){\n    local IP=$( ip addr | egrep -o '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | egrep -v \"^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.\" | head -n 1 )\n    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )\n    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )\n    [ ! -z ${IP} ] && echo ${IP} || echo\n}\n\nget_char(){\n    SAVEDSTTY=`stty -g`\n    stty -echo\n    stty cbreak\n    dd if=/dev/tty bs=1 count=1 2> /dev/null\n    stty -raw\n    stty echo\n    stty $SAVEDSTTY\n}\n\n# Pre-installation settings\npre_install(){\n    if ! check_sys packageManager yum && ! check_sys packageManager apt; then\n        echo -e \"$[{red}Error${plain}] Your OS is not supported. please change OS to CentOS/Debian/Ubuntu and try again.\"\n        exit 1\n    fi\n    # Set shadowsocks-go config password\n    echo \"Please enter password for shadowsocks-go:\"\n    read -p \"(Default password: teddysun.com):\" shadowsockspwd\n    [ -z \"${shadowsockspwd}\" ] && shadowsockspwd=\"teddysun.com\"\n    echo\n    echo \"---------------------------\"\n    echo \"password = ${shadowsockspwd}\"\n    echo \"---------------------------\"\n    echo\n    # Set shadowsocks-go config port\n    while true\n    do\n    dport=$(shuf -i 9000-19999 -n 1)\n    echo -e \"Please enter a port for shadowsocks-go [1-65535]\"\n    read -p \"(Default port: ${dport}):\" shadowsocksport\n    [ -z \"${shadowsocksport}\" ] && shadowsocksport=${dport}\n    expr ${shadowsocksport} + 1 &>/dev/null\n    if [ $? -eq 0 ]; then\n        if [ ${shadowsocksport} -ge 1 ] && [ ${shadowsocksport} -le 65535 ] && [ ${shadowsocksport:0:1} != 0 ]; then\n            echo\n            echo \"---------------------------\"\n            echo \"port = ${shadowsocksport}\"\n            echo \"---------------------------\"\n            echo\n            break\n        fi\n    fi\n    echo -e \"[${red}Error${plain}] Please enter a correct number [1-65535]\"\n    done\n\n    # Set shadowsocks config stream ciphers\n    while true\n    do\n    echo -e \"Please select stream cipher for shadowsocks-go:\"\n    for ((i=1;i<=${#ciphers[@]};i++ )); do\n        hint=\"${ciphers[$i-1]}\"\n        echo -e \"${green}${i}${plain}) ${hint}\"\n    done\n    read -p \"Which cipher you'd select(Default: ${ciphers[0]}):\" pick\n    [ -z \"$pick\" ] && pick=1\n    expr ${pick} + 1 &>/dev/null\n    if [ $? -ne 0 ]; then\n        echo -e \"[${red}Error${plain}] Please enter a number\"\n        continue\n    fi\n    if [[ \"$pick\" -lt 1 || \"$pick\" -gt ${#ciphers[@]} ]]; then\n        echo -e \"[${red}Error${plain}] Please enter a number between 1 and ${#ciphers[@]}\"\n        continue\n    fi\n    shadowsockscipher=${ciphers[$pick-1]}\n    echo\n    echo \"---------------------------\"\n    echo \"cipher = ${shadowsockscipher}\"\n    echo \"---------------------------\"\n    echo\n    break\n    done\n\n    echo\n    echo \"Press any key to start...or Press Ctrl+C to cancel\"\n    char=`get_char`\n    #Install necessary dependencies\n    if check_sys packageManager yum; then\n        yum install -y wget unzip gzip curl nss\n    elif check_sys packageManager apt; then\n        apt-get -y update\n        apt-get install -y wget unzip gzip curl libnss3\n    fi\n    echo\n\n}\n\n# Download shadowsocks-go\ndownload_files(){\n    cd ${cur_dir}\n    if is_64bit; then\n        if ! wget --no-check-certificate -c https://dl.lamp.sh/shadowsocks/shadowsocks-server-linux64-1.2.2.gz; then\n            echo -e \"[${red}Error${plain}] Failed to download shadowsocks-server-linux64-1.2.2.gz\"\n            exit 1\n        fi\n        gzip -d shadowsocks-server-linux64-1.2.2.gz\n        if [ $? -ne 0 ]; then\n            echo -e \"[${red}Error${plain}] Decompress shadowsocks-server-linux64-1.2.2.gz failed\"\n            exit 1\n        fi\n        mv -f shadowsocks-server-linux64-1.2.2 /usr/bin/shadowsocks-server\n    else\n        if ! wget --no-check-certificate -c https://dl.lamp.sh/shadowsocks/shadowsocks-server-linux32-1.2.2.gz; then\n            echo -e \"[${red}Error${plain}] Failed to download shadowsocks-server-linux32-1.2.2.gz\"\n            exit 1\n        fi\n        gzip -d shadowsocks-server-linux32-1.2.2.gz\n        if [ $? -ne 0 ]; then\n            echo -e \"[${red}Error${plain}] Decompress shadowsocks-server-linux32-1.2.2.gz failed\"\n            exit 1\n        fi\n        mv -f shadowsocks-server-linux32-1.2.2 /usr/bin/shadowsocks-server\n    fi\n\n    # Download start script\n    if check_sys packageManager yum; then\n        if ! wget --no-check-certificate -O /etc/init.d/shadowsocks https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-go; then\n            echo -e \"[${red}Error${plain}] Failed to download shadowsocks-go auto start script!\"\n            exit 1\n        fi\n    elif check_sys packageManager apt; then\n        if ! wget --no-check-certificate -O /etc/init.d/shadowsocks https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-go-debian; then\n            echo -e \"[${red}Error${plain}] Failed to download shadowsocks-go auto start script!\"\n            exit 1\n        fi\n    fi\n}\n\n# Config shadowsocks\nconfig_shadowsocks(){\n    if [ ! -d /etc/shadowsocks ]; then\n        mkdir -p /etc/shadowsocks\n    fi\n    cat > /etc/shadowsocks/config.json<<-EOF\n{\n    \"server\":\"0.0.0.0\",\n    \"server_port\":${shadowsocksport},\n    \"local_port\":1080,\n    \"password\":\"${shadowsockspwd}\",\n    \"method\":\"${shadowsockscipher}\",\n    \"timeout\":300\n}\nEOF\n}\n\n# Firewall set\nfirewall_set(){\n    echo -e \"[${green}Info${plain}] firewall set start...\"\n    if centosversion 6; then\n        /etc/init.d/iptables status > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            iptables -L -n | grep -i ${shadowsocksport} > /dev/null 2>&1\n            if [ $? -ne 0 ]; then\n                iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${shadowsocksport} -j ACCEPT\n                iptables -I INPUT -m state --state NEW -m udp -p udp --dport ${shadowsocksport} -j ACCEPT\n                /etc/init.d/iptables save\n                /etc/init.d/iptables restart\n            else\n                echo -e \"[${green}Info${plain}] port ${shadowsocksport} has been set up.\"\n            fi\n        else\n            echo -e \"[${yellow}Warning${plain}] iptables looks like shutdown or not installed, please manually set it if necessary.\"\n        fi\n    elif centosversion 7; then\n        systemctl status firewalld > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            default_zone=$(firewall-cmd --get-default-zone)\n            firewall-cmd --permanent --zone=${default_zone} --add-port=${shadowsocksport}/tcp\n            firewall-cmd --permanent --zone=${default_zone} --add-port=${shadowsocksport}/udp\n            firewall-cmd --reload\n        else\n            echo -e \"[${yellow}Warning${plain}] firewalld looks like not running or not installed, please enable port ${shadowsocksport} manually if necessary.\"\n        fi\n    fi\n    echo -e \"[${green}Info${plain}] firewall set completed...\"\n}\n\n# Install Shadowsocks-go\ninstall(){\n\n    if [ -f /usr/bin/shadowsocks-server ]; then\n        echo \"Shadowsocks-go server install success!\"\n        chmod +x /usr/bin/shadowsocks-server\n        chmod +x /etc/init.d/shadowsocks\n\n        if check_sys packageManager yum; then\n            chkconfig --add shadowsocks\n            chkconfig shadowsocks on\n        elif check_sys packageManager apt; then\n            update-rc.d -f shadowsocks defaults\n        fi\n\n        /etc/init.d/shadowsocks start\n        if [ $? -ne 0 ]; then\n            echo -e \"[${red}Error${plain}] Shadowsocks-go server start failed!\"\n        fi\n    else\n        echo\n        echo -e \"[${red}Error${plain}] Shadowsocks-go server install failed!\"\n        exit 1\n    fi\n\n    clear\n    echo\n    echo -e \"Congratulations, Shadowsocks-go server install completed!\"\n    echo -e \"Your Server IP        : \\033[41;37m $(get_ip) \\033[0m\"\n    echo -e \"Your Server Port      : \\033[41;37m ${shadowsocksport} \\033[0m\"\n    echo -e \"Your Password         : \\033[41;37m ${shadowsockspwd} \\033[0m\"\n    echo -e \"Your Encryption Method: \\033[41;37m ${shadowsockscipher} \\033[0m\"\n    echo\n    echo \"Welcome to visit:https://teddysun.com/392.html\"\n    echo \"Enjoy it!\"\n    echo\n}\n\n# Uninstall Shadowsocks-go\nuninstall_shadowsocks_go(){\n    printf \"Are you sure uninstall shadowsocks-go? (y/n) \"\n    printf \"\\n\"\n    read -p \"(Default: n):\" answer\n    [ -z ${answer} ] && answer=\"n\"\n    if [ \"${answer}\" == \"y\" ] || [ \"${answer}\" == \"Y\" ]; then\n        ps -ef | grep -v grep | grep -i \"shadowsocks-server\" > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            /etc/init.d/shadowsocks stop\n        fi\n        if check_sys packageManager yum; then\n            chkconfig --del shadowsocks\n        elif check_sys packageManager apt; then\n            update-rc.d -f shadowsocks remove\n        fi\n        # delete config file\n        rm -rf /etc/shadowsocks\n        # delete shadowsocks\n        rm -f /etc/init.d/shadowsocks\n        rm -f /usr/bin/shadowsocks-server\n        echo \"Shadowsocks-go uninstall success!\"\n    else\n        echo\n        echo \"Uninstall cancelled, nothing to do...\"\n        echo\n    fi\n}\n\n# Install Shadowsocks-go\ninstall_shadowsocks_go(){\n    disable_selinux\n    pre_install\n    download_files\n    config_shadowsocks\n    if check_sys packageManager yum; then\n        firewall_set\n    fi\n    install\n}\n\n# Initialization step\naction=$1\n[ -z $1 ] && action=install\ncase \"$action\" in\n    install|uninstall)\n        ${action}_shadowsocks_go\n        ;;\n    *)\n        echo \"Arguments error! [${action}]\"\n        echo \"Usage: `basename $0` [install|uninstall]\"\n        ;;\nesac\n"
        },
        {
          "name": "shadowsocks-libev",
          "type": "blob",
          "size": 2.14453125,
          "content": "#!/usr/bin/env bash\n# chkconfig: 2345 90 10\n# description: A secure socks5 proxy, designed to protect your Internet traffic.\n\n### BEGIN INIT INFO\n# Provides:          Shadowsocks-libev\n# Required-Start:    $network $syslog\n# Required-Stop:     $network\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: Fast tunnel proxy that helps you bypass firewalls\n# Description:       Start or stop the Shadowsocks-libev server\n### END INIT INFO\n\n# Author: Teddysun <i@teddysun.com>\nif [ -f /usr/local/bin/ss-server ]; then\n    DAEMON=/usr/local/bin/ss-server\nelif [ -f /usr/bin/ss-server ]; then\n    DAEMON=/usr/bin/ss-server\nfi\nNAME=Shadowsocks-libev\nCONF=/etc/shadowsocks-libev/config.json\nPID_DIR=/var/run\nPID_FILE=$PID_DIR/shadowsocks-libev.pid\nRET_VAL=0\n\n[ -x $DAEMON ] || exit 0\n\nif [ ! -d $PID_DIR ]; then\n    mkdir -p $PID_DIR\n    if [ $? -ne 0 ]; then\n        echo \"Creating PID directory $PID_DIR failed\"\n        exit 1\n    fi\nfi\n\nif [ ! -f $CONF ]; then\n    echo \"$NAME config file $CONF not found\"\n     exit 1\nfi\n\ncheck_running() {\n    if [ -r $PID_FILE ]; then\n        read PID < $PID_FILE\n        if [ -d \"/proc/$PID\" ]; then\n            return 0\n        else\n            rm -f $PID_FILE\n            return 1\n        fi\n    else\n        return 2\n    fi\n}\n\ndo_status() {\n    check_running\n    case $? in\n        0)\n        echo \"$NAME (pid $PID) is running...\"\n        ;;\n        1|2)\n        echo \"$NAME is stopped\"\n        RET_VAL=1\n        ;;\n    esac\n}\n\ndo_start() {\n    if check_running; then\n        echo \"$NAME (pid $PID) is already running...\"\n        return 0\n    fi\n    $DAEMON -v -c $CONF -f $PID_FILE\n    if check_running; then\n        echo \"Starting $NAME success\"\n    else\n        echo \"Starting $NAME failed\"\n        RET_VAL=1\n    fi\n}\n\ndo_stop() {\n    if check_running; then\n        kill -9 $PID\n        rm -f $PID_FILE\n        echo \"Stopping $NAME success\"\n    else\n        echo \"$NAME is stopped\"\n        RET_VAL=1\n    fi\n}\n\ndo_restart() {\n    do_stop\n    sleep 0.5\n    do_start\n}\n\ncase \"$1\" in\n    start|stop|restart|status)\n    do_$1\n    ;;\n    *)\n    echo \"Usage: $0 { start | stop | restart | status }\"\n    RET_VAL=1\n    ;;\nesac\n\nexit $RET_VAL\n"
        },
        {
          "name": "shadowsocks-libev-debian",
          "type": "blob",
          "size": 2.0751953125,
          "content": "#!/usr/bin/env bash\n\n### BEGIN INIT INFO\n# Provides:          Shadowsocks-libev\n# Required-Start:    $network $local_fs $remote_fs\n# Required-Stop:     $network $local_fs $remote_fs\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: Fast tunnel proxy that helps you bypass firewalls\n# Description:       Start or stop the Shadowsocks-libev server\n### END INIT INFO\n\n# Author: Teddysun <i@teddysun.com>\n\nif [ -f /usr/local/bin/ss-server ]; then\n    DAEMON=/usr/local/bin/ss-server\nelif [ -f /usr/bin/ss-server ]; then\n    DAEMON=/usr/bin/ss-server\nfi\nNAME=Shadowsocks-libev\nCONF=/etc/shadowsocks-libev/config.json\nPID_DIR=/var/run\nPID_FILE=$PID_DIR/shadowsocks-libev.pid\nRET_VAL=0\n\n[ -x $DAEMON ] || exit 0\n\nif [ ! -d $PID_DIR ]; then\n    mkdir -p $PID_DIR\n    if [ $? -ne 0 ]; then\n        echo \"Creating PID directory $PID_DIR failed\"\n        exit 1\n    fi\nfi\n\nif [ ! -f $CONF ]; then\n    echo \"$NAME config file $CONF not found\"\n    exit 1\nfi\n\ncheck_running() {\n    if [ -r $PID_FILE ]; then\n        read PID < $PID_FILE\n        if [ -d \"/proc/$PID\" ]; then\n            return 0\n        else\n            rm -f $PID_FILE\n            return 1\n        fi\n    else\n        return 2\n    fi\n}\n\ndo_status() {\n    check_running\n    case $? in\n        0)\n        echo \"$NAME (pid $PID) is running...\"\n        ;;\n        1|2)\n        echo \"$NAME is stopped\"\n        RET_VAL=1\n        ;;\n    esac\n}\n\ndo_start() {\n    if check_running; then\n        echo \"$NAME (pid $PID) is already running...\"\n        return 0\n    fi\n    $DAEMON -v -c $CONF -f $PID_FILE\n    if check_running; then\n        echo \"Starting $NAME success\"\n    else\n        echo \"Starting $NAME failed\"\n        RET_VAL=1\n    fi\n}\n\ndo_stop() {\n    if check_running; then\n        kill -9 $PID\n        rm -f $PID_FILE\n        echo \"Stopping $NAME success\"\n    else\n        echo \"$NAME is stopped\"\n        RET_VAL=1\n    fi\n}\n\ndo_restart() {\n    do_stop\n    sleep 0.5\n    do_start\n}\n\ncase \"$1\" in\n    start|stop|restart|status)\n    do_$1\n    ;;\n    *)\n    echo \"Usage: $0 { start | stop | restart | status }\"\n    RET_VAL=1\n    ;;\nesac\n\nexit $RET_VAL\n"
        },
        {
          "name": "shadowsocks-libev-debian.sh",
          "type": "blob",
          "size": 15.5341796875,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n#===================================================================#\n#   System Required:  Debian or Ubuntu                              #\n#   Description: Install Shadowsocks-libev server for Debian/Ubuntu #\n#   Author: Teddysun <i@teddysun.com>                               #\n#   Thanks: @madeye <https://github.com/madeye>                     #\n#   Intro:  https://teddysun.com/358.html                           #\n#===================================================================#\n\n# Current folder\ncur_dir=$(pwd)\n\nlibsodium_file='libsodium-1.0.18'\nlibsodium_url='https://github.com/jedisct1/libsodium/releases/download/1.0.18-RELEASE/libsodium-1.0.18.tar.gz'\n\nmbedtls_file='mbedtls-2.16.12'\nmbedtls_url='https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v2.16.12.tar.gz'\n\n# Stream Ciphers\nciphers=(\naes-256-gcm\naes-192-gcm\naes-128-gcm\naes-256-ctr\naes-192-ctr\naes-128-ctr\naes-256-cfb\naes-192-cfb\naes-128-cfb\ncamellia-128-cfb\ncamellia-192-cfb\ncamellia-256-cfb\nxchacha20-ietf-poly1305\nchacha20-ietf-poly1305\nchacha20-ietf\nchacha20\nsalsa20\nrc4-md5\n)\n# Color\nred='\\033[0;31m'\ngreen='\\033[0;32m'\nyellow='\\033[0;33m'\nplain='\\033[0m'\n\n# Make sure only root can run our script\n[[ $EUID -ne 0 ]] && echo -e \"[${red}Error${plain}] This script must be run as root!\" && exit 1\n\n# Disable selinux\ndisable_selinux(){\n    if [ -s /etc/selinux/config ] && grep 'SELINUX=enforcing' /etc/selinux/config; then\n        sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config\n        setenforce 0\n    fi\n}\n\nget_ip(){\n    local IP=$( ip addr | egrep -o '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | egrep -v \"^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.\" | head -n 1 )\n    [ -z \"${IP}\" ] && IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )\n    [ -z \"${IP}\" ] && IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )\n    [ ! -z \"${IP}\" ] && echo \"${IP}\" || echo\n}\n\nget_ipv6(){\n    local ipv6=$(wget -qO- -t1 -T2 ipv6.icanhazip.com)\n    if [ -z \"${ipv6}\" ]; then\n        return 1\n    else\n        return 0\n    fi\n}\n\nget_char(){\n    SAVEDSTTY=$(stty -g)\n    stty -echo\n    stty cbreak\n    dd if=/dev/tty bs=1 count=1 2> /dev/null\n    stty -raw\n    stty echo\n    stty \"$SAVEDSTTY\"\n}\n\nget_latest_version(){\n    ver=$(wget --no-check-certificate -qO- https://api.github.com/repos/shadowsocks/shadowsocks-libev/releases/latest | grep 'tag_name' | cut -d\\\" -f4)\n    [ -z \"${ver}\" ] && echo \"Error: Get shadowsocks-libev latest version failed\" && exit 1\n    shadowsocks_libev_ver=\"shadowsocks-libev-$(echo \"${ver}\" | sed -e 's/^[a-zA-Z]//g')\"\n    download_link=\"https://github.com/shadowsocks/shadowsocks-libev/releases/download/${ver}/${shadowsocks_libev_ver}.tar.gz\"\n    init_script_link=\"https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev-debian\"\n}\n\nget_opsy(){\n    [ -f /etc/redhat-release ] && awk '{print ($1,$3~/^[0-9]/?$3:$4)}' /etc/redhat-release && return\n    [ -f /etc/os-release ] && awk -F'[= \"]' '/PRETTY_NAME/{print $3,$4,$5}' /etc/os-release && return\n    [ -f /etc/lsb-release ] && awk -F'[=\"]+' '/DESCRIPTION/{print $2}' /etc/lsb-release && return\n}\n\ncheck_installed(){\n    if [ \"$(command -v \"$1\")\" ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncheck_version(){\n    check_installed \"ss-server\"\n    if [ $? -eq 0 ]; then\n        installed_ver=$(ss-server -h | grep shadowsocks-libev | cut -d' ' -f2)\n        get_latest_version\n        latest_ver=$(echo \"${ver}\" | sed -e 's/^[a-zA-Z]//g')\n        if [ \"${latest_ver}\" == \"${installed_ver}\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    else\n        return 2\n    fi\n}\n\nprint_info(){\n    clear\n    echo \"#############################################################\"\n    echo \"# Install Shadowsocks-libev server for Debian or Ubuntu     #\"\n    echo \"# Intro:  https://teddysun.com/358.html                     #\"\n    echo \"# Author: Teddysun <i@teddysun.com>                         #\"\n    echo \"# Github: https://github.com/shadowsocks/shadowsocks-libev  #\"\n    echo \"#############################################################\"\n    echo\n}\n\n# Check system\ncheck_sys(){\n    local checkType=$1\n    local value=$2\n\n    local release=''\n    local systemPackage=''\n\n    if [[ -f /etc/redhat-release ]]; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    elif grep -Eqi \"debian|raspbian\" /etc/issue; then\n        release=\"debian\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"ubuntu\" /etc/issue; then\n        release=\"ubuntu\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"centos|red hat|redhat\" /etc/issue; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    elif grep -Eqi \"debian|raspbian\" /proc/version; then\n        release=\"debian\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"ubuntu\" /proc/version; then\n        release=\"ubuntu\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"centos|red hat|redhat\" /proc/version; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    fi\n\n    if [[ \"${checkType}\" == \"sysRelease\" ]]; then\n        if [ \"${value}\" == \"${release}\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    elif [[ \"${checkType}\" == \"packageManager\" ]]; then\n        if [ \"${value}\" == \"${systemPackage}\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    fi\n}\n\nversion_gt(){\n    test \"$(echo \"$@\" | tr \" \" \"\\n\" | sort -V | head -n 1)\" != \"$1\"\n}\n\ncheck_kernel_version(){\n    local kernel_version=$(uname -r | cut -d- -f1)\n    if version_gt \"${kernel_version}\" 3.7.0; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncheck_kernel_headers(){\n    if check_sys packageManager yum; then\n        if rpm -qa | grep -q headers-$(uname -r); then\n            return 0\n        else\n            return 1\n        fi\n    elif check_sys packageManager apt; then\n        if dpkg -s linux-headers-$(uname -r) > /dev/null 2>&1; then\n            return 0\n        else\n            return 1\n        fi\n    fi\n    return 1\n}\n\ndebianversion(){\n    if check_sys sysRelease debian;then\n        local version=$( get_opsy )\n        local code=${1}\n        local main_ver=$( echo \"${version}\" | sed 's/[^0-9]//g')\n        if [ \"${main_ver}\" == \"${code}\" ];then\n            return 0\n        else\n            return 1\n        fi\n    else\n        return 1\n    fi\n}\n\n# Pre-installation settings\npre_install(){\n    # Check OS system\n    if ! check_sys packageManager apt; then\n        echo -e \"[${red}Error${plain}] Your OS is not supported to run it, please change OS to Debian/Ubuntu and try again.\"\n        exit 1\n    fi\n\n    # Check version\n    check_version\n    status=$?\n    if [ ${status} -eq 0 ]; then\n        echo -e \"[${green}Info${plain}] Latest version ${green}${shadowsocks_libev_ver}${plain} has already been installed, nothing to do...\"\n        exit 0\n    elif [ ${status} -eq 1 ]; then\n        echo -e \"Installed version: ${red}${installed_ver}${plain}\"\n        echo -e \"Latest version: ${red}${latest_ver}${plain}\"\n        echo -e \"[${green}Info${plain}] Upgrade shadowsocks libev to latest version...\"\n        ps -ef | grep -v grep | grep -i \"ss-server\" > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            /etc/init.d/shadowsocks stop\n        fi\n    elif [ ${status} -eq 2 ]; then\n        print_info\n        get_latest_version\n        echo -e \"[${green}Info${plain}] Latest version: ${green}${shadowsocks_libev_ver}${plain}\"\n        echo\n    fi\n\n    # Set shadowsocks-libev config password\n    echo \"Please input password for shadowsocks-libev:\"\n    read -p \"(Default password: teddysun.com):\" shadowsockspwd\n    [ -z \"${shadowsockspwd}\" ] && shadowsockspwd=\"teddysun.com\"\n    echo\n    echo \"---------------------------\"\n    echo \"password = ${shadowsockspwd}\"\n    echo \"---------------------------\"\n    echo\n\n    # Set shadowsocks-libev config port\n    while true\n    do\n    dport=$(shuf -i 9000-19999 -n 1)\n    echo -e \"Please enter a port for shadowsocks-libev [1-65535]\"\n    read -p \"(Default port: ${dport}):\" shadowsocksport\n    [ -z \"$shadowsocksport\" ] && shadowsocksport=${dport}\n    expr \"${shadowsocksport}\" + 1 &>/dev/null\n    if [ $? -eq 0 ]; then\n        if [ \"${shadowsocksport}\" -ge 1 ] && [ \"${shadowsocksport}\" -le 65535 ] && [ \"${shadowsocksport:0:1}\" != 0 ]; then\n            echo\n            echo \"---------------------------\"\n            echo \"port = ${shadowsocksport}\"\n            echo \"---------------------------\"\n            echo\n            break\n        fi\n    fi\n    echo -e \"[${red}Error${plain}] Please enter a correct number [1-65535]\"\n    done\n\n    # Set shadowsocks config stream ciphers\n    while true\n    do\n    echo -e \"Please select stream cipher for shadowsocks-libev:\"\n    for ((i=1;i<=${#ciphers[@]};i++ )); do\n        hint=\"${ciphers[$i-1]}\"\n        echo -e \"${green}${i}${plain}) ${hint}\"\n    done\n    read -p \"Which cipher you'd select(Default: ${ciphers[0]}):\" pick\n    [ -z \"$pick\" ] && pick=1\n    expr ${pick} + 1 &>/dev/null\n    if [ $? -ne 0 ]; then\n        echo -e \"[${red}Error${plain}] Please enter a number\"\n        continue\n    fi\n    if [[ \"$pick\" -lt 1 || \"$pick\" -gt ${#ciphers[@]} ]]; then\n        echo -e \"[${red}Error${plain}] Please enter a number between 1 and ${#ciphers[@]}\"\n        continue\n    fi\n    shadowsockscipher=${ciphers[$pick-1]}\n    echo\n    echo \"---------------------------\"\n    echo \"cipher = ${shadowsockscipher}\"\n    echo \"---------------------------\"\n    echo\n    break\n    done\n\n    echo\n    echo \"Press any key to start...or press Ctrl+C to cancel\"\n    char=$(get_char)\n\n    # Update System\n    apt-get -y update\n    # Install necessary dependencies\n    apt-get -y --no-install-recommends install gettext build-essential autoconf automake libtool openssl libssl-dev zlib1g-dev libpcre3-dev libev-dev libc-ares-dev\n}\n\ndownload() {\n    local filename=${1}\n    local cur_dir=$(pwd)\n    if [ -s \"${filename}\" ]; then\n        echo -e \"[${green}Info${plain}] ${filename} [found]\"\n    else\n        echo -e \"[${green}Info${plain}] ${filename} not found, download now...\"\n        wget --no-check-certificate -cq -t3 -T60 -O \"${1}\" \"${2}\"\n        if [ $? -eq 0 ]; then\n            echo -e \"[${green}Info${plain}] ${filename} download completed...\"\n        else\n            echo -e \"[${red}Error${plain}] Failed to download ${filename}, please download it to ${cur_dir} directory manually and try again.\"\n            exit 1\n        fi\n    fi\n}\n\n# Download latest shadowsocks-libev\ndownload_files(){\n    cd \"${cur_dir}\" || exit\n\n    download \"${shadowsocks_libev_ver}.tar.gz\" \"${download_link}\"\n    download \"${libsodium_file}.tar.gz\" \"${libsodium_url}\"\n    download \"${mbedtls_file}.tar.gz\" \"${mbedtls_url}\"\n    download \"/etc/init.d/shadowsocks\" \"${init_script_link}\"\n}\n\ninstall_libsodium() {\n    if [ ! -f /usr/lib/libsodium.a ]; then\n        cd \"${cur_dir}\" || exit\n        tar zxf ${libsodium_file}.tar.gz\n        cd ${libsodium_file} || exit\n        ./configure --prefix=/usr && make && make install\n        if [ $? -ne 0 ]; then\n            echo -e \"[${red}Error${plain}] ${libsodium_file} install failed.\"\n            exit 1\n        fi\n    else\n        echo -e \"[${green}Info${plain}] ${libsodium_file} already installed.\"\n    fi\n}\n\ninstall_mbedtls() {\n    if [ ! -f /usr/lib/libmbedtls.a ]; then\n        cd \"${cur_dir}\" || exit\n        tar zxf \"${mbedtls_file}.tar.gz\"\n        cd \"${mbedtls_file}\" || exit\n        make SHARED=1 CFLAGS=-fPIC\n        make DESTDIR=/usr install\n        if [ $? -ne 0 ]; then\n            echo -e \"[${red}Error${plain}] ${mbedtls_file} install failed.\"\n            exit 1\n        fi\n    else\n        echo -e \"[${green}Info${plain}] ${mbedtls_file} already installed.\"\n    fi\n}\n\n# Config shadowsocks\nconfig_shadowsocks(){\n    local server_value=\"\\\"0.0.0.0\\\"\"\n    if get_ipv6; then\n        server_value=\"[\\\"[::0]\\\",\\\"0.0.0.0\\\"]\"\n    fi\n\n    if [ ! -d /etc/shadowsocks-libev ]; then\n        mkdir -p /etc/shadowsocks-libev\n    fi\n    cat > /etc/shadowsocks-libev/config.json<<-EOF\n{\n    \"server\":${server_value},\n    \"server_port\":${shadowsocksport},\n    \"password\":\"${shadowsockspwd}\",\n    \"timeout\":300,\n    \"user\":\"nobody\",\n    \"method\":\"${shadowsockscipher}\",\n    \"fast_open\":false,\n    \"nameserver\":\"1.0.0.1\",\n    \"mode\":\"tcp_and_udp\"\n}\nEOF\n}\n\n# Install Shadowsocks-libev\ninstall_shadowsocks(){\n    install_libsodium\n    install_mbedtls\n\n    ldconfig\n    cd \"${cur_dir}\" || exit\n    tar zxf \"${shadowsocks_libev_ver}\".tar.gz\n    cd \"${shadowsocks_libev_ver}\" || exit\n    ./configure --disable-documentation\n    make && make install\n    if [ $? -eq 0 ]; then\n        chmod +x /etc/init.d/shadowsocks\n        update-rc.d -f shadowsocks defaults\n        # Start shadowsocks\n        /etc/init.d/shadowsocks start\n        if [ $? -eq 0 ]; then\n            echo -e \"[${green}Info${plain}] Shadowsocks-libev start success!\"\n        else\n            echo -e \"[${yellow}Warning${plain}] Shadowsocks-libev start failure!\"\n        fi\n    else\n        echo\n        echo -e \"[${red}Error${plain}] Shadowsocks-libev install failed. please visit https://teddysun.com/358.html and contact.\"\n        exit 1\n    fi\n\n    cd \"${cur_dir}\" || exit\n    rm -rf \"${shadowsocks_libev_ver}\" \"${shadowsocks_libev_ver}\".tar.gz\n    rm -rf ${libsodium_file} ${libsodium_file}.tar.gz\n    rm -rf \"${mbedtls_file}\" \"${mbedtls_file}\"-apache.tgz\n\n    clear\n    echo\n    echo -e \"Congratulations, Shadowsocks-libev server install completed!\"\n    echo -e \"Your Server IP        : \\033[41;37m $(get_ip) \\033[0m\"\n    echo -e \"Your Server Port      : \\033[41;37m ${shadowsocksport} \\033[0m\"\n    echo -e \"Your Password         : \\033[41;37m ${shadowsockspwd} \\033[0m\"\n    echo -e \"Your Encryption Method: \\033[41;37m ${shadowsockscipher} \\033[0m\"\n    echo\n    echo \"Welcome to visit:https://teddysun.com/358.html\"\n    echo \"Enjoy it!\"\n    echo\n}\n\n# Install Shadowsocks-libev\ninstall_shadowsocks_libev(){\n    disable_selinux\n    pre_install\n    download_files\n    config_shadowsocks\n    install_shadowsocks\n}\n\n# Uninstall Shadowsocks-libev\nuninstall_shadowsocks_libev(){\n    clear\n    print_info\n    printf \"Are you sure uninstall Shadowsocks-libev? (y/n)\"\n    printf \"\\n\"\n    read -p \"(Default: n):\" answer\n    [ -z \"${answer}\" ] && answer=\"n\"\n\n    if [ \"${answer}\" == \"y\" ] || [ \"${answer}\" == \"Y\" ]; then\n        ps -ef | grep -v grep | grep -i \"ss-server\" > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            /etc/init.d/shadowsocks stop\n        fi\n        update-rc.d -f shadowsocks remove\n\n        rm -fr /etc/shadowsocks-libev\n        rm -f /usr/local/bin/ss-local\n        rm -f /usr/local/bin/ss-tunnel\n        rm -f /usr/local/bin/ss-server\n        rm -f /usr/local/bin/ss-manager\n        rm -f /usr/local/bin/ss-redir\n        rm -f /usr/local/bin/ss-nat\n        rm -f /usr/local/lib/libshadowsocks-libev.a\n        rm -f /usr/local/lib/libshadowsocks-libev.la\n        rm -f /usr/local/include/shadowsocks.h\n        rm -f /usr/local/lib/pkgconfig/shadowsocks-libev.pc\n        rm -f /usr/local/share/man/man1/ss-local.1\n        rm -f /usr/local/share/man/man1/ss-tunnel.1\n        rm -f /usr/local/share/man/man1/ss-server.1\n        rm -f /usr/local/share/man/man1/ss-manager.1\n        rm -f /usr/local/share/man/man1/ss-redir.1\n        rm -f /usr/local/share/man/man1/ss-nat.1\n        rm -f /usr/local/share/man/man8/shadowsocks-libev.8\n        rm -fr /usr/local/share/doc/shadowsocks-libev\n        rm -f /etc/init.d/shadowsocks\n        echo \"Shadowsocks-libev uninstall success!\"\n    else\n        echo\n        echo \"uninstall cancelled, nothing to do...\"\n        echo\n    fi\n}\n\n# Initialization step\naction=$1\n[ -z \"$1\" ] && action=install\ncase \"$action\" in\n    install|uninstall)\n        ${action}_shadowsocks_libev\n        ;;\n    *)\n        echo \"Arguments error! [${action}]\"\n        echo \"Usage: $(basename \"$0\") [install|uninstall]\"\n        ;;\nesac\n"
        },
        {
          "name": "shadowsocks-libev.sh",
          "type": "blob",
          "size": 17.658203125,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n#===================================================================#\n#   System Required:  CentOS 6 or 7                                 #\n#   Description: Install Shadowsocks-libev server for CentOS 6 or 7 #\n#   Author: Teddysun <i@teddysun.com>                               #\n#   Thanks: @madeye <https://github.com/madeye>                     #\n#   Intro:  https://teddysun.com/357.html                           #\n#===================================================================#\n\n# Current folder\ncur_dir=$(pwd)\n\nlibsodium_file='libsodium-1.0.18'\nlibsodium_url='https://github.com/jedisct1/libsodium/releases/download/1.0.18-RELEASE/libsodium-1.0.18.tar.gz'\n\nmbedtls_file='mbedtls-2.16.12'\nmbedtls_url='https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v2.16.12.tar.gz'\n\n# Stream Ciphers\nciphers=(\naes-256-gcm\naes-192-gcm\naes-128-gcm\naes-256-ctr\naes-192-ctr\naes-128-ctr\naes-256-cfb\naes-192-cfb\naes-128-cfb\ncamellia-128-cfb\ncamellia-192-cfb\ncamellia-256-cfb\nxchacha20-ietf-poly1305\nchacha20-ietf-poly1305\nchacha20-ietf\nchacha20\nsalsa20\nrc4-md5\n)\n# Color\nred='\\033[0;31m'\ngreen='\\033[0;32m'\nyellow='\\033[0;33m'\nplain='\\033[0m'\n\n# Make sure only root can run our script\n[[ $EUID -ne 0 ]] && echo -e \"[${red}Error${plain}] This script must be run as root!\" && exit 1\n\n# Disable selinux\ndisable_selinux(){\n    if [ -s /etc/selinux/config ] && grep 'SELINUX=enforcing' /etc/selinux/config; then\n        sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config\n        setenforce 0\n    fi\n}\n\nget_ip(){\n    local IP=$( ip addr | egrep -o '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | egrep -v \"^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.\" | head -n 1 )\n    [ -z \"${IP}\" ] && IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )\n    [ -z \"${IP}\" ] && IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )\n    [ ! -z \"${IP}\" ] && echo \"${IP}\" || echo\n}\n\nget_ipv6(){\n    local ipv6=$(wget -qO- -t1 -T2 ipv6.icanhazip.com)\n    if [ -z \"${ipv6}\" ]; then\n        return 1\n    else\n        return 0\n    fi\n}\n\nget_char(){\n    SAVEDSTTY=$(stty -g)\n    stty -echo\n    stty cbreak\n    dd if=/dev/tty bs=1 count=1 2> /dev/null\n    stty -raw\n    stty echo\n    stty \"$SAVEDSTTY\"\n}\n\nget_latest_version(){\n    ver=$(wget --no-check-certificate -qO- https://api.github.com/repos/shadowsocks/shadowsocks-libev/releases/latest | grep 'tag_name' | cut -d\\\" -f4)\n    [ -z \"${ver}\" ] && echo \"Error: Get shadowsocks-libev latest version failed\" && exit 1\n    shadowsocks_libev_ver=\"shadowsocks-libev-$(echo \"${ver}\" | sed -e 's/^[a-zA-Z]//g')\"\n    download_link=\"https://github.com/shadowsocks/shadowsocks-libev/releases/download/${ver}/${shadowsocks_libev_ver}.tar.gz\"\n    init_script_link=\"https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev\"\n}\n\ncheck_installed(){\n    if [ \"$(command -v \"$1\")\" ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncheck_version(){\n    check_installed \"ss-server\"\n    if [ $? -eq 0 ]; then\n        installed_ver=$(ss-server -h | grep shadowsocks-libev | cut -d' ' -f2)\n        get_latest_version\n        latest_ver=$(echo \"${ver}\" | sed -e 's/^[a-zA-Z]//g')\n        if [ \"${latest_ver}\" == \"${installed_ver}\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    else\n        return 2\n    fi\n}\n\nprint_info(){\n    clear\n    echo \"#############################################################\"\n    echo \"# Install Shadowsocks-libev server for CentOS 6 or 7        #\"\n    echo \"# Intro:  https://teddysun.com/357.html                     #\"\n    echo \"# Author: Teddysun <i@teddysun.com>                         #\"\n    echo \"# Github: https://github.com/shadowsocks/shadowsocks-libev  #\"\n    echo \"#############################################################\"\n    echo\n}\n\n# Check system\ncheck_sys(){\n    local checkType=$1\n    local value=$2\n\n    local release=''\n    local systemPackage=''\n\n    if [[ -f /etc/redhat-release ]]; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    elif grep -Eqi \"debian|raspbian\" /etc/issue; then\n        release=\"debian\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"ubuntu\" /etc/issue; then\n        release=\"ubuntu\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"centos|red hat|redhat\" /etc/issue; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    elif grep -Eqi \"debian|raspbian\" /proc/version; then\n        release=\"debian\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"ubuntu\" /proc/version; then\n        release=\"ubuntu\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"centos|red hat|redhat\" /proc/version; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    fi\n\n    if [[ \"${checkType}\" == \"sysRelease\" ]]; then\n        if [ \"${value}\" == \"${release}\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    elif [[ \"${checkType}\" == \"packageManager\" ]]; then\n        if [ \"${value}\" == \"${systemPackage}\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    fi\n}\n\nversion_gt(){\n    test \"$(echo \"$@\" | tr \" \" \"\\n\" | sort -V | head -n 1)\" != \"$1\"\n}\n\ncheck_kernel_version(){\n    local kernel_version=$(uname -r | cut -d- -f1)\n    if version_gt \"${kernel_version}\" 3.7.0; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncheck_kernel_headers(){\n    if check_sys packageManager yum; then\n        if rpm -qa | grep -q headers-$(uname -r); then\n            return 0\n        else\n            return 1\n        fi\n    elif check_sys packageManager apt; then\n        if dpkg -s linux-headers-$(uname -r) > /dev/null 2>&1; then\n            return 0\n        else\n            return 1\n        fi\n    fi\n    return 1\n}\n\n# Get version\ngetversion(){\n    if [[ -s /etc/redhat-release ]]; then\n        grep -oE  \"[0-9.]+\" /etc/redhat-release\n    else\n        grep -oE  \"[0-9.]+\" /etc/issue\n    fi\n}\n\n# CentOS version\ncentosversion(){\n    if check_sys sysRelease centos; then\n        local code=$1\n        local version=\"$(getversion)\"\n        local main_ver=${version%%.*}\n        if [ \"$main_ver\" == \"$code\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    else\n        return 1\n    fi\n}\n\n# Pre-installation settings\npre_install(){\n    # Check OS system\n    if check_sys sysRelease centos; then\n        # Not support CentOS 5\n        if centosversion 5; then\n            echo -e \"[${red}Error${plain}] Not support CentOS 5, please change to CentOS 6 or 7 and try again.\"\n            exit 1\n        fi\n    else\n        echo -e \"[${red}Error${plain}] Your OS is not supported to run it, please change OS to CentOS and try again.\"\n        exit 1\n    fi\n\n    # Check version\n    check_version\n    status=$?\n    if [ ${status} -eq 0 ]; then\n        echo -e \"[${green}Info${plain}] Latest version ${green}${shadowsocks_libev_ver}${plain} has already been installed, nothing to do...\"\n        exit 0\n    elif [ ${status} -eq 1 ]; then\n        echo -e \"Installed version: ${red}${installed_ver}${plain}\"\n        echo -e \"Latest version: ${red}${latest_ver}${plain}\"\n        echo -e \"[${green}Info${plain}] Upgrade shadowsocks libev to latest version...\"\n        ps -ef | grep -v grep | grep -i \"ss-server\" > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            /etc/init.d/shadowsocks stop\n        fi\n    elif [ ${status} -eq 2 ]; then\n        print_info\n        get_latest_version\n        echo -e \"[${green}Info${plain}] Latest version: ${green}${shadowsocks_libev_ver}${plain}\"\n        echo\n    fi\n\n    # Set shadowsocks-libev config password\n    echo \"Please enter password for shadowsocks-libev:\"\n    read -p \"(Default password: teddysun.com):\" shadowsockspwd\n    [ -z \"${shadowsockspwd}\" ] && shadowsockspwd=\"teddysun.com\"\n    echo\n    echo \"---------------------------\"\n    echo \"password = ${shadowsockspwd}\"\n    echo \"---------------------------\"\n    echo\n\n    # Set shadowsocks-libev config port\n    while true\n    do\n    dport=$(shuf -i 9000-19999 -n 1)\n    echo -e \"Please enter a port for shadowsocks-libev [1-65535]\"\n    read -p \"(Default port: ${dport}):\" shadowsocksport\n    [ -z \"$shadowsocksport\" ] && shadowsocksport=${dport}\n    expr \"${shadowsocksport}\" + 1 &>/dev/null\n    if [ $? -eq 0 ]; then\n        if [ \"${shadowsocksport}\" -ge 1 ] && [ \"${shadowsocksport}\" -le 65535 ] && [ \"${shadowsocksport:0:1}\" != 0 ]; then\n            echo\n            echo \"---------------------------\"\n            echo \"port = ${shadowsocksport}\"\n            echo \"---------------------------\"\n            echo\n            break\n        fi\n    fi\n    echo -e \"[${red}Error${plain}] Please enter a correct number [1-65535]\"\n    done\n\n    # Set shadowsocks config stream ciphers\n    while true\n    do\n    echo -e \"Please select stream cipher for shadowsocks-libev:\"\n    for ((i=1;i<=${#ciphers[@]};i++ )); do\n        hint=\"${ciphers[$i-1]}\"\n        echo -e \"${green}${i}${plain}) ${hint}\"\n    done\n    read -p \"Which cipher you'd select(Default: ${ciphers[0]}):\" pick\n    [ -z \"$pick\" ] && pick=1\n    expr ${pick} + 1 &>/dev/null\n    if [ $? -ne 0 ]; then\n        echo -e \"[${red}Error${plain}] Please enter a number\"\n        continue\n    fi\n    if [[ \"$pick\" -lt 1 || \"$pick\" -gt ${#ciphers[@]} ]]; then\n        echo -e \"[${red}Error${plain}] Please enter a number between 1 and ${#ciphers[@]}\"\n        continue\n    fi\n    shadowsockscipher=${ciphers[$pick-1]}\n    echo\n    echo \"---------------------------\"\n    echo \"cipher = ${shadowsockscipher}\"\n    echo \"---------------------------\"\n    echo\n    break\n    done\n\n    echo\n    echo \"Press any key to start...or press Ctrl+C to cancel\"\n    char=$(get_char)\n    #Install necessary dependencies\n    echo -e \"[${green}Info${plain}] Checking the EPEL repository...\"\n    if [ ! -f /etc/yum.repos.d/epel.repo ]; then\n        yum install -y -q epel-release\n    fi\n    [ ! -f /etc/yum.repos.d/epel.repo ] && echo -e \"[${red}Error${plain}] Install EPEL repository failed, please check it.\" && exit 1\n    [ ! \"$(command -v yum-config-manager)\" ] && yum install -y -q yum-utils\n    if [ x\"$(yum-config-manager epel | grep -w enabled | awk '{print $3}')\" != x\"True\" ]; then\n        yum-config-manager --enable epel\n    fi\n    echo -e \"[${green}Info${plain}] Checking the EPEL repository complete...\"\n    yum install -y -q unzip openssl openssl-devel gettext gcc autoconf libtool automake make asciidoc xmlto libev-devel pcre pcre-devel git c-ares-devel\n}\n\ndownload() {\n    local filename=${1}\n    local cur_dir=$(pwd)\n    if [ -s \"${filename}\" ]; then\n        echo -e \"[${green}Info${plain}] ${filename} [found]\"\n    else\n        echo -e \"[${green}Info${plain}] ${filename} not found, download now...\"\n        wget --no-check-certificate -cq -t3 -T60 -O \"${1}\" \"${2}\"\n        if [ $? -eq 0 ]; then\n            echo -e \"[${green}Info${plain}] ${filename} download completed...\"\n        else\n            echo -e \"[${red}Error${plain}] Failed to download ${filename}, please download it to ${cur_dir} directory manually and try again.\"\n            exit 1\n        fi\n    fi\n}\n\n# Download latest shadowsocks-libev\ndownload_files(){\n    cd \"${cur_dir}\" || exit\n\n    download \"${shadowsocks_libev_ver}.tar.gz\" \"${download_link}\"\n    download \"${libsodium_file}.tar.gz\" \"${libsodium_url}\"\n    download \"${mbedtls_file}.tar.gz\" \"${mbedtls_url}\"\n    download \"/etc/init.d/shadowsocks\" \"${init_script_link}\"\n}\n\ninstall_libsodium() {\n    if [ ! -f /usr/lib/libsodium.a ]; then\n        cd \"${cur_dir}\" || exit\n        tar zxf ${libsodium_file}.tar.gz\n        cd ${libsodium_file} || exit\n        ./configure --prefix=/usr && make && make install\n        if [ $? -ne 0 ]; then\n            echo -e \"[${red}Error${plain}] ${libsodium_file} install failed.\"\n            exit 1\n        fi\n    else\n        echo -e \"[${green}Info${plain}] ${libsodium_file} already installed.\"\n    fi\n}\n\ninstall_mbedtls() {\n    if [ ! -f /usr/lib/libmbedtls.a ]; then\n        cd \"${cur_dir}\" || exit\n        tar zxf \"${mbedtls_file}.tar.gz\"\n        cd \"${mbedtls_file}\" || exit\n        make SHARED=1 CFLAGS=-fPIC\n        make DESTDIR=/usr install\n        if [ $? -ne 0 ]; then\n            echo -e \"[${red}Error${plain}] ${mbedtls_file} install failed.\"\n            exit 1\n        fi\n    else\n        echo -e \"[${green}Info${plain}] ${mbedtls_file} already installed.\"\n    fi\n}\n\n# Config shadowsocks\nconfig_shadowsocks(){\n    local server_value=\"\\\"0.0.0.0\\\"\"\n    if get_ipv6; then\n        server_value=\"[\\\"[::0]\\\",\\\"0.0.0.0\\\"]\"\n    fi\n\n    if [ ! -d /etc/shadowsocks-libev ]; then\n        mkdir -p /etc/shadowsocks-libev\n    fi\n    cat > /etc/shadowsocks-libev/config.json<<-EOF\n{\n    \"server\":${server_value},\n    \"server_port\":${shadowsocksport},\n    \"password\":\"${shadowsockspwd}\",\n    \"timeout\":300,\n    \"user\":\"nobody\",\n    \"method\":\"${shadowsockscipher}\",\n    \"fast_open\":false,\n    \"nameserver\":\"1.0.0.1\",\n    \"mode\":\"tcp_and_udp\"\n}\nEOF\n}\n\n# Firewall set\nfirewall_set(){\n    echo -e \"[${green}Info${plain}] firewall set start...\"\n    if centosversion 6; then\n        /etc/init.d/iptables status > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            iptables -L -n | grep -i \"${shadowsocksport}\" > /dev/null 2>&1\n            if [ $? -ne 0 ]; then\n                iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport \"${shadowsocksport}\" -j ACCEPT\n                iptables -I INPUT -m state --state NEW -m udp -p udp --dport \"${shadowsocksport}\" -j ACCEPT\n                /etc/init.d/iptables save\n                /etc/init.d/iptables restart\n            else\n                echo -e \"[${green}Info${plain}] port ${shadowsocksport} has been set up.\"\n            fi\n        else\n            echo -e \"[${yellow}Warning${plain}] iptables looks like shutdown or not installed, please manually set it if necessary.\"\n        fi\n    elif centosversion 7; then\n        systemctl status firewalld > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            default_zone=$(firewall-cmd --get-default-zone)\n            firewall-cmd --permanent --zone=\"${default_zone}\" --add-port=\"${shadowsocksport}\"/tcp\n            firewall-cmd --permanent --zone=\"${default_zone}\" --add-port=\"${shadowsocksport}\"/udp\n            firewall-cmd --reload\n        else\n            echo -e \"[${yellow}Warning${plain}] firewalld looks like not running or not installed, please enable port ${shadowsocksport} manually if necessary.\"\n        fi\n    fi\n    echo -e \"[${green}Info${plain}] firewall set completed...\"\n}\n\n# Install Shadowsocks-libev\ninstall_shadowsocks(){\n    install_libsodium\n    install_mbedtls\n\n    ldconfig\n    cd \"${cur_dir}\" || exit\n    tar zxf \"${shadowsocks_libev_ver}\".tar.gz\n    cd \"${shadowsocks_libev_ver}\" || exit\n    ./configure --disable-documentation\n    make && make install\n    if [ $? -eq 0 ]; then\n        chmod +x /etc/init.d/shadowsocks\n        chkconfig --add shadowsocks\n        chkconfig shadowsocks on\n        # Start shadowsocks\n        /etc/init.d/shadowsocks start\n        if [ $? -eq 0 ]; then\n            echo -e \"[${green}Info${plain}] Shadowsocks-libev start success!\"\n        else\n            echo -e \"[${yellow}Warning${plain}] Shadowsocks-libev start failure!\"\n        fi\n    else\n        echo\n        echo -e \"[${red}Error${plain}] Shadowsocks-libev install failed. please visit https://teddysun.com/357.html and contact.\"\n        exit 1\n    fi\n\n    cd \"${cur_dir}\" || exit\n    rm -rf \"${shadowsocks_libev_ver}\" \"${shadowsocks_libev_ver}\".tar.gz\n    rm -rf ${libsodium_file} ${libsodium_file}.tar.gz\n    rm -rf \"${mbedtls_file}\" \"${mbedtls_file}\"-apache.tgz\n\n    clear\n    echo\n    echo -e \"Congratulations, Shadowsocks-libev server install completed!\"\n    echo -e \"Your Server IP        : \\033[41;37m $(get_ip) \\033[0m\"\n    echo -e \"Your Server Port      : \\033[41;37m ${shadowsocksport} \\033[0m\"\n    echo -e \"Your Password         : \\033[41;37m ${shadowsockspwd} \\033[0m\"\n    echo -e \"Your Encryption Method: \\033[41;37m ${shadowsockscipher} \\033[0m\"\n    echo\n    echo \"Welcome to visit:https://teddysun.com/357.html\"\n    echo \"Enjoy it!\"\n    echo\n}\n\n# Install Shadowsocks-libev\ninstall_shadowsocks_libev(){\n    disable_selinux\n    pre_install\n    download_files\n    config_shadowsocks\n    firewall_set\n    install_shadowsocks\n}\n\n# Uninstall Shadowsocks-libev\nuninstall_shadowsocks_libev(){\n    clear\n    print_info\n    printf \"Are you sure uninstall Shadowsocks-libev? (y/n)\"\n    printf \"\\n\"\n    read -p \"(Default: n):\" answer\n    [ -z \"${answer}\" ] && answer=\"n\"\n\n    if [ \"${answer}\" == \"y\" ] || [ \"${answer}\" == \"Y\" ]; then\n        ps -ef | grep -v grep | grep -i \"ss-server\" > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            /etc/init.d/shadowsocks stop\n        fi\n        chkconfig --del shadowsocks\n        rm -fr /etc/shadowsocks-libev\n        rm -f /usr/local/bin/ss-local\n        rm -f /usr/local/bin/ss-tunnel\n        rm -f /usr/local/bin/ss-server\n        rm -f /usr/local/bin/ss-manager\n        rm -f /usr/local/bin/ss-redir\n        rm -f /usr/local/bin/ss-nat\n        rm -f /usr/local/lib/libshadowsocks-libev.a\n        rm -f /usr/local/lib/libshadowsocks-libev.la\n        rm -f /usr/local/include/shadowsocks.h\n        rm -f /usr/local/lib/pkgconfig/shadowsocks-libev.pc\n        rm -f /usr/local/share/man/man1/ss-local.1\n        rm -f /usr/local/share/man/man1/ss-tunnel.1\n        rm -f /usr/local/share/man/man1/ss-server.1\n        rm -f /usr/local/share/man/man1/ss-manager.1\n        rm -f /usr/local/share/man/man1/ss-redir.1\n        rm -f /usr/local/share/man/man1/ss-nat.1\n        rm -f /usr/local/share/man/man8/shadowsocks-libev.8\n        rm -fr /usr/local/share/doc/shadowsocks-libev\n        rm -f /etc/init.d/shadowsocks\n        echo \"Shadowsocks-libev uninstall success!\"\n    else\n        echo\n        echo \"uninstall cancelled, nothing to do...\"\n        echo\n    fi\n}\n\n# Initialization step\naction=$1\n[ -z \"$1\" ] && action=install\ncase \"$action\" in\n    install|uninstall)\n        ${action}_shadowsocks_libev\n        ;;\n    *)\n        echo \"Arguments error! [${action}]\"\n        echo \"Usage: $(basename \"$0\") [install|uninstall]\"\n        ;;\nesac\n"
        },
        {
          "name": "shadowsocks-manager",
          "type": "blob",
          "size": 2.697265625,
          "content": "#!/usr/bin/env bash\n# chkconfig: 2345 90 10\n# description: A secure socks5 proxy, designed to protect your Internet traffic.\n\n### BEGIN INIT INFO\n# Provides:          Shadowsocks-libev\n# Required-Start:    $network $syslog\n# Required-Stop:     $network\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: Fast tunnel proxy that helps you bypass firewalls\n# Description:       Start or Stop the Shadowsocks-libev server to support multiple users with ss-manager\n### END INIT INFO\n\n# Author: Teddysun <i@teddysun.com>\n\nif [ -f /usr/local/bin/ss-manager ]; then\n    MANAGER=/usr/local/bin/ss-manager\nelif [ -f /usr/bin/ss-manager ]; then\n    MANAGER=/usr/bin/ss-manager\nfi\n\nif [ -f /usr/local/bin/ss-server ]; then\n    DAEMON=/usr/local/bin/ss-server\nelif [ -f /usr/bin/ss-server ]; then\n    DAEMON=/usr/bin/ss-server\nfi\n\nNAME=Shadowsocks-manager\nCONF=/etc/shadowsocks-manager/config.json\nPID_DIR=/var/run\nPID_FILE=$PID_DIR/shadowsocks-manager.pid\nSOCK_FILE=$PID_DIR/shadowsocks-manager.sock\nWK_DIR=~/.shadowsocks\nWK_PID_LST=($WK_DIR/.*pid)\n\nRET_VAL=0\n\n[ -x $MANAGER ] || exit 0\n[ -x $DAEMON ] || exit 0\n\nif [ ! -d $PID_DIR ]; then\n    mkdir -p $PID_DIR\n    if [ $? -ne 0 ]; then\n        echo \"Creating PID directory $PID_DIR failed\"\n        exit 1\n    fi\nfi\n\nif [ ! -f $CONF ]; then\n    echo \"$NAME config file $CONF not found\"\n    exit 1\nfi\n\ncheck_running() {\n    if [ -r $PID_FILE ]; then\n        read PID < $PID_FILE\n        if [ -d \"/proc/$PID\" ]; then\n            return 0\n        else\n            rm -f $PID_FILE\n            return 1\n        fi\n    else\n        return 2\n    fi\n}\n\ndo_status() {\n    check_running\n    case $? in\n        0)\n        echo \"$NAME (pid $PID) is running...\"\n        ;;\n        1|2)\n        echo \"$NAME is stopped\"\n        RET_VAL=1\n        ;;\n    esac\n}\n\ndo_start() {\n    if check_running; then\n        echo \"$NAME (pid $PID) is already running...\"\n        return 0\n    fi\n    $MANAGER --manager-address $SOCK_FILE --executable $DAEMON -c $CONF -f $PID_FILE\n    if check_running; then\n        echo \"Starting $NAME success\"\n    else\n        echo \"Starting $NAME failed\"\n        RET_VAL=1\n    fi\n}\n\ndo_stop() {\n    if check_running; then\n        kill -9 $PID\n        rm -f $PID_FILE\n        rm -f $SOCK_FILE\n        for i in \"${WK_PID_LST[@]}\"; do\n            [ -r $i ] && read WK_PID < $i\n            [ -d \"/proc/$WK_PID\" ] && kill -9 $WK_PID\n            rm -f $i\n        done\n        echo \"Stopping $NAME success\"\n    else\n        echo \"$NAME is stopped\"\n        RET_VAL=1\n    fi\n}\n\ndo_restart() {\n    do_stop\n    sleep 0.5\n    do_start\n}\n\ncase \"$1\" in\n    start|stop|restart|status)\n    do_$1\n    ;;\n    *)\n    echo \"Usage: $0 { start | stop | restart | status }\"\n    RET_VAL=1\n    ;;\nesac\n\nexit $RET_VAL\n"
        },
        {
          "name": "shadowsocks.png",
          "type": "blob",
          "size": 36.1708984375,
          "content": null
        },
        {
          "name": "shadowsocks.sh",
          "type": "blob",
          "size": 13.517578125,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n#=================================================================#\n#   System Required:  CentOS 6+, Debian 7+, Ubuntu 12+            #\n#   Description: One click Install Shadowsocks-Python server      #\n#   Author: Teddysun <i@teddysun.com>                             #\n#   Thanks: @clowwindy <https://twitter.com/clowwindy>            #\n#   Intro:  https://teddysun.com/342.html                         #\n#=================================================================#\n\nclear\necho\necho \"#############################################################\"\necho \"# One click Install Shadowsocks-Python server               #\"\necho \"# Intro: https://teddysun.com/342.html                      #\"\necho \"# Author: Teddysun <i@teddysun.com>                         #\"\necho \"# Github: https://github.com/shadowsocks/shadowsocks        #\"\necho \"#############################################################\"\necho\n\nlibsodium_file=\"libsodium-1.0.18\"\nlibsodium_url=\"https://github.com/jedisct1/libsodium/releases/download/1.0.18-RELEASE/libsodium-1.0.18.tar.gz\"\n\n# Current folder\ncur_dir=`pwd`\n# Stream Ciphers\nciphers=(\naes-256-gcm\naes-192-gcm\naes-128-gcm\naes-256-ctr\naes-192-ctr\naes-128-ctr\naes-256-cfb\naes-192-cfb\naes-128-cfb\ncamellia-128-cfb\ncamellia-192-cfb\ncamellia-256-cfb\nchacha20-ietf-poly1305\nchacha20-ietf\nchacha20\nrc4-md5\n)\n# Color\nred='\\033[0;31m'\ngreen='\\033[0;32m'\nyellow='\\033[0;33m'\nplain='\\033[0m'\n\n# Make sure only root can run our script\n[[ $EUID -ne 0 ]] && echo -e \"[${red}Error${plain}] This script must be run as root!\" && exit 1\n\n# Disable selinux\ndisable_selinux(){\n    if [ -s /etc/selinux/config ] && grep 'SELINUX=enforcing' /etc/selinux/config; then\n        sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config\n        setenforce 0\n    fi\n}\n\n#Check system\ncheck_sys(){\n    local checkType=$1\n    local value=$2\n\n    local release=''\n    local systemPackage=''\n\n    if [[ -f /etc/redhat-release ]]; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    elif grep -Eqi \"debian|raspbian\" /etc/issue; then\n        release=\"debian\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"ubuntu\" /etc/issue; then\n        release=\"ubuntu\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"centos|red hat|redhat\" /etc/issue; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    elif grep -Eqi \"debian|raspbian\" /proc/version; then\n        release=\"debian\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"ubuntu\" /proc/version; then\n        release=\"ubuntu\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"centos|red hat|redhat\" /proc/version; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    fi\n\n    if [[ \"${checkType}\" == \"sysRelease\" ]]; then\n        if [ \"${value}\" == \"${release}\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    elif [[ \"${checkType}\" == \"packageManager\" ]]; then\n        if [ \"${value}\" == \"${systemPackage}\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    fi\n}\n\n# Get version\ngetversion(){\n    if [[ -s /etc/redhat-release ]]; then\n        grep -oE  \"[0-9.]+\" /etc/redhat-release\n    else\n        grep -oE  \"[0-9.]+\" /etc/issue\n    fi\n}\n\n# CentOS version\ncentosversion(){\n    if check_sys sysRelease centos; then\n        local code=$1\n        local version=\"$(getversion)\"\n        local main_ver=${version%%.*}\n        if [ \"$main_ver\" == \"$code\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    else\n        return 1\n    fi\n}\n\n# Get public IP address\nget_ip(){\n    local IP=$( ip addr | egrep -o '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | egrep -v \"^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.\" | head -n 1 )\n    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )\n    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )\n    [ ! -z ${IP} ] && echo ${IP} || echo\n}\n\nget_char(){\n    SAVEDSTTY=`stty -g`\n    stty -echo\n    stty cbreak\n    dd if=/dev/tty bs=1 count=1 2> /dev/null\n    stty -raw\n    stty echo\n    stty $SAVEDSTTY\n}\n\n# Pre-installation settings\npre_install(){\n    if check_sys packageManager yum || check_sys packageManager apt; then\n        # Not support CentOS 5\n        if centosversion 5; then\n            echo -e \"$[{red}Error${plain}] Not supported CentOS 5, please change to CentOS 6+/Debian 7+/Ubuntu 12+ and try again.\"\n            exit 1\n        fi\n    else\n        echo -e \"[${red}Error${plain}] Your OS is not supported. please change OS to CentOS/Debian/Ubuntu and try again.\"\n        exit 1\n    fi\n    # Set shadowsocks config password\n    echo \"Please enter password for shadowsocks-python\"\n    read -p \"(Default password: teddysun.com):\" shadowsockspwd\n    [ -z \"${shadowsockspwd}\" ] && shadowsockspwd=\"teddysun.com\"\n    echo\n    echo \"---------------------------\"\n    echo \"password = ${shadowsockspwd}\"\n    echo \"---------------------------\"\n    echo\n    # Set shadowsocks config port\n    while true\n    do\n    dport=$(shuf -i 9000-19999 -n 1)\n    echo \"Please enter a port for shadowsocks-python [1-65535]\"\n    read -p \"(Default port: ${dport}):\" shadowsocksport\n    [ -z \"$shadowsocksport\" ] && shadowsocksport=${dport}\n    expr ${shadowsocksport} + 1 &>/dev/null\n    if [ $? -eq 0 ]; then\n        if [ ${shadowsocksport} -ge 1 ] && [ ${shadowsocksport} -le 65535 ] && [ ${shadowsocksport:0:1} != 0 ]; then\n            echo\n            echo \"---------------------------\"\n            echo \"port = ${shadowsocksport}\"\n            echo \"---------------------------\"\n            echo\n            break\n        fi\n    fi\n    echo -e \"[${red}Error${plain}] Please enter a correct number [1-65535]\"\n    done\n\n    # Set shadowsocks config stream ciphers\n    while true\n    do\n    echo -e \"Please select stream cipher for shadowsocks-python:\"\n    for ((i=1;i<=${#ciphers[@]};i++ )); do\n        hint=\"${ciphers[$i-1]}\"\n        echo -e \"${green}${i}${plain}) ${hint}\"\n    done\n    read -p \"Which cipher you'd select(Default: ${ciphers[0]}):\" pick\n    [ -z \"$pick\" ] && pick=1\n    expr ${pick} + 1 &>/dev/null\n    if [ $? -ne 0 ]; then\n        echo -e \"[${red}Error${plain}] Please enter a number\"\n        continue\n    fi\n    if [[ \"$pick\" -lt 1 || \"$pick\" -gt ${#ciphers[@]} ]]; then\n        echo -e \"[${red}Error${plain}] Please enter a number between 1 and ${#ciphers[@]}\"\n        continue\n    fi\n    shadowsockscipher=${ciphers[$pick-1]}\n    echo\n    echo \"---------------------------\"\n    echo \"cipher = ${shadowsockscipher}\"\n    echo \"---------------------------\"\n    echo\n    break\n    done\n\n    echo\n    echo \"Press any key to start...or Press Ctrl+C to cancel\"\n    char=`get_char`\n    # Install necessary dependencies\n    if check_sys packageManager yum; then\n        yum install -y python python-devel python-setuptools openssl openssl-devel curl wget unzip gcc automake autoconf make libtool\n    elif check_sys packageManager apt; then\n        apt-get -y update\n        apt-get -y install python python-dev python-setuptools openssl libssl-dev curl wget unzip gcc automake autoconf make libtool\n    fi\n    cd ${cur_dir}\n}\n\n# Download files\ndownload_files(){\n    # Download libsodium file\n    if ! wget --no-check-certificate -O ${libsodium_file}.tar.gz ${libsodium_url}; then\n        echo -e \"[${red}Error${plain}] Failed to download ${libsodium_file}.tar.gz!\"\n        exit 1\n    fi\n    # Download Shadowsocks file\n    if ! wget --no-check-certificate -O shadowsocks-master.zip https://github.com/shadowsocks/shadowsocks/archive/master.zip; then\n        echo -e \"[${red}Error${plain}] Failed to download shadowsocks python file!\"\n        exit 1\n    fi\n    # Download Shadowsocks init script\n    if check_sys packageManager yum; then\n        if ! wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks -O /etc/init.d/shadowsocks; then\n            echo -e \"[${red}Error${plain}] Failed to download shadowsocks chkconfig file!\"\n            exit 1\n        fi\n    elif check_sys packageManager apt; then\n        if ! wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-debian -O /etc/init.d/shadowsocks; then\n            echo -e \"[${red}Error${plain}] Failed to download shadowsocks chkconfig file!\"\n            exit 1\n        fi\n    fi\n}\n\n# Config shadowsocks\nconfig_shadowsocks(){\n    cat > /etc/shadowsocks.json<<-EOF\n{\n    \"server\":\"0.0.0.0\",\n    \"server_port\":${shadowsocksport},\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"${shadowsockspwd}\",\n    \"timeout\":300,\n    \"method\":\"${shadowsockscipher}\",\n    \"fast_open\":false\n}\nEOF\n}\n\n# Firewall set\nfirewall_set(){\n    echo -e \"[${green}Info${plain}] firewall set start...\"\n    if centosversion 6; then\n        /etc/init.d/iptables status > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            iptables -L -n | grep -i ${shadowsocksport} > /dev/null 2>&1\n            if [ $? -ne 0 ]; then\n                iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${shadowsocksport} -j ACCEPT\n                iptables -I INPUT -m state --state NEW -m udp -p udp --dport ${shadowsocksport} -j ACCEPT\n                /etc/init.d/iptables save\n                /etc/init.d/iptables restart\n            else\n                echo -e \"[${green}Info${plain}] port ${shadowsocksport} has already been set up.\"\n            fi\n        else\n            echo -e \"[${yellow}Warning${plain}] iptables looks like shutdown or not installed, please manually set it if necessary.\"\n        fi\n    elif centosversion 7; then\n        systemctl status firewalld > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            default_zone=$(firewall-cmd --get-default-zone)\n            firewall-cmd --permanent --zone=${default_zone} --add-port=${shadowsocksport}/tcp\n            firewall-cmd --permanent --zone=${default_zone} --add-port=${shadowsocksport}/udp\n            firewall-cmd --reload\n        else\n            echo -e \"[${yellow}Warning${plain}] firewalld looks like not running or not installed, please enable port ${shadowsocksport} manually if necessary.\"\n        fi\n    fi\n    echo -e \"[${green}Info${plain}] firewall set completed...\"\n}\n\n# Install Shadowsocks\ninstall(){\n    # Install libsodium\n    if [ ! -f /usr/lib/libsodium.a ]; then\n        cd ${cur_dir}\n        tar zxf ${libsodium_file}.tar.gz\n        cd ${libsodium_file}\n        ./configure --prefix=/usr && make && make install\n        if [ $? -ne 0 ]; then\n            echo -e \"[${red}Error${plain}] libsodium install failed!\"\n            install_cleanup\n            exit 1\n        fi\n    fi\n\n    ldconfig\n    # Install Shadowsocks\n    cd ${cur_dir}\n    unzip -q shadowsocks-master.zip\n    if [ $? -ne 0 ];then\n        echo -e \"[${red}Error${plain}] unzip shadowsocks-master.zip failed! please check unzip command.\"\n        install_cleanup\n        exit 1\n    fi\n\n    cd ${cur_dir}/shadowsocks-master\n    python setup.py install --record /usr/local/shadowsocks_install.log\n\n    if [ -f /usr/bin/ssserver ] || [ -f /usr/local/bin/ssserver ]; then\n        chmod +x /etc/init.d/shadowsocks\n        if check_sys packageManager yum; then\n            chkconfig --add shadowsocks\n            chkconfig shadowsocks on\n        elif check_sys packageManager apt; then\n            update-rc.d -f shadowsocks defaults\n        fi\n        /etc/init.d/shadowsocks start\n    else\n        echo\n        echo -e \"[${red}Error${plain}] Shadowsocks install failed! please visit https://teddysun.com/342.html and contact.\"\n        install_cleanup\n        exit 1\n    fi\n\n    clear\n    echo\n    echo -e \"Congratulations, Shadowsocks-python server install completed!\"\n    echo -e \"Your Server IP        : \\033[41;37m $(get_ip) \\033[0m\"\n    echo -e \"Your Server Port      : \\033[41;37m ${shadowsocksport} \\033[0m\"\n    echo -e \"Your Password         : \\033[41;37m ${shadowsockspwd} \\033[0m\"\n    echo -e \"Your Encryption Method: \\033[41;37m ${shadowsockscipher} \\033[0m\"\n    echo\n    echo \"Welcome to visit:https://teddysun.com/342.html\"\n    echo \"Enjoy it!\"\n    echo\n}\n\n# Install cleanup\ninstall_cleanup(){\n    cd ${cur_dir}\n    rm -rf shadowsocks-master.zip shadowsocks-master ${libsodium_file}.tar.gz ${libsodium_file}\n}\n\n# Uninstall Shadowsocks\nuninstall_shadowsocks(){\n    printf \"Are you sure uninstall Shadowsocks? (y/n) \"\n    printf \"\\n\"\n    read -p \"(Default: n):\" answer\n    [ -z ${answer} ] && answer=\"n\"\n    if [ \"${answer}\" == \"y\" ] || [ \"${answer}\" == \"Y\" ]; then\n        ps -ef | grep -v grep | grep -i \"ssserver\" > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            /etc/init.d/shadowsocks stop\n        fi\n        if check_sys packageManager yum; then\n            chkconfig --del shadowsocks\n        elif check_sys packageManager apt; then\n            update-rc.d -f shadowsocks remove\n        fi\n        # delete config file\n        rm -f /etc/shadowsocks.json\n        rm -f /var/run/shadowsocks.pid\n        rm -f /etc/init.d/shadowsocks\n        rm -f /var/log/shadowsocks.log\n        if [ -f /usr/local/shadowsocks_install.log ]; then\n            cat /usr/local/shadowsocks_install.log | xargs rm -rf\n        fi\n        echo \"Shadowsocks uninstall success!\"\n    else\n        echo\n        echo \"uninstall cancelled, nothing to do...\"\n        echo\n    fi\n}\n\n# Install Shadowsocks-python\ninstall_shadowsocks(){\n    disable_selinux\n    pre_install\n    download_files\n    config_shadowsocks\n    if check_sys packageManager yum; then\n        firewall_set\n    fi\n    install\n    install_cleanup\n}\n\n# Initialization step\naction=$1\n[ -z $1 ] && action=install\ncase \"$action\" in\n    install|uninstall)\n        ${action}_shadowsocks\n        ;;\n    *)\n        echo \"Arguments error! [${action}]\"\n        echo \"Usage: `basename $0` [install|uninstall]\"\n    ;;\nesac\n"
        },
        {
          "name": "shadowsocksR",
          "type": "blob",
          "size": 1.8818359375,
          "content": "#!/bin/bash\n# chkconfig: 2345 90 10\n# description: A secure socks5 proxy, designed to protect your Internet traffic.\n\n### BEGIN INIT INFO\n# Provides:          ShadowsocksR\n# Required-Start:    $network $syslog\n# Required-Stop:     $network\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: Fast tunnel proxy that helps you bypass firewalls\n# Description:       Start or stop the ShadowsocksR server\n### END INIT INFO\n\n# Author: Teddysun <i@teddysun.com>\n\nNAME=ShadowsocksR\nDAEMON=/usr/local/shadowsocks/server.py\nif [ -f /etc/shadowsocks-r/config.json ]; then\n    CONF=/etc/shadowsocks-r/config.json\nelif [ -f /etc/shadowsocks.json ]; then\n    CONF=/etc/shadowsocks.json\nfi\nRETVAL=0\n\ncheck_running(){\n    PID=$(ps -ef | grep -v grep | grep -i \"${DAEMON}\" | awk '{print $2}')\n    if [ -n \"$PID\" ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ndo_start(){\n    check_running\n    if [ $? -eq 0 ]; then\n        echo \"$NAME (pid $PID) is already running...\"\n        exit 0\n    else\n        $DAEMON -c $CONF -d start\n        RETVAL=$?\n        if [ $RETVAL -eq 0 ]; then\n            echo \"Starting $NAME success\"\n        else\n            echo \"Starting $NAME failed\"\n        fi\n    fi\n}\n\ndo_stop(){\n    check_running\n    if [ $? -eq 0 ]; then\n        $DAEMON -c $CONF -d stop\n        RETVAL=$?\n        if [ $RETVAL -eq 0 ]; then\n            echo \"Stopping $NAME success\"\n        else\n            echo \"Stopping $NAME failed\"\n        fi\n    else\n        echo \"$NAME is stopped\"\n        RETVAL=1\n    fi\n}\n\ndo_status(){\n    check_running\n    if [ $? -eq 0 ]; then\n        echo \"$NAME (pid $PID) is running...\"\n    else\n        echo \"$NAME is stopped\"\n        RETVAL=1\n    fi\n}\n\ndo_restart(){\n    do_stop\n    sleep 0.5\n    do_start\n}\n\ncase \"$1\" in\n    start|stop|restart|status)\n    do_$1\n    ;;\n    *)\n    echo \"Usage: $0 { start | stop | restart | status }\"\n    RETVAL=1\n    ;;\nesac\n\nexit $RETVAL\n"
        },
        {
          "name": "shadowsocksR-debian",
          "type": "blob",
          "size": 1.8125,
          "content": "#!/bin/bash\n\n### BEGIN INIT INFO\n# Provides:          ShadowsocksR\n# Required-Start:    $network $local_fs $remote_fs\n# Required-Stop:     $network $local_fs $remote_fs\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: Fast tunnel proxy that helps you bypass firewalls\n# Description:       Start or stop the ShadowsocksR server\n### END INIT INFO\n\n# Author: Teddysun <i@teddysun.com>\n\nNAME=ShadowsocksR\nDAEMON=/usr/local/shadowsocks/server.py\nif [ -f /etc/shadowsocks-r/config.json ]; then\n    CONF=/etc/shadowsocks-r/config.json\nelif [ -f /etc/shadowsocks.json ]; then\n    CONF=/etc/shadowsocks.json\nfi\nRETVAL=0\n\ncheck_running(){\n    PID=$(ps -ef | grep -v grep | grep -i \"${DAEMON}\" | awk '{print $2}')\n    if [ -n \"$PID\" ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ndo_start(){\n    check_running\n    if [ $? -eq 0 ]; then\n        echo \"$NAME (pid $PID) is already running...\"\n        exit 0\n    else\n        $DAEMON -c $CONF -d start\n        RETVAL=$?\n        if [ $RETVAL -eq 0 ]; then\n            echo \"Starting $NAME success\"\n        else\n            echo \"Starting $NAME failed\"\n        fi\n    fi\n}\n\ndo_stop(){\n    check_running\n    if [ $? -eq 0 ]; then\n        $DAEMON -c $CONF -d stop\n        RETVAL=$?\n        if [ $RETVAL -eq 0 ]; then\n            echo \"Stopping $NAME success\"\n        else\n            echo \"Stopping $NAME failed\"\n        fi\n    else\n        echo \"$NAME is stopped\"\n        RETVAL=1\n    fi\n}\n\ndo_status(){\n    check_running\n    if [ $? -eq 0 ]; then\n        echo \"$NAME (pid $PID) is running...\"\n    else\n        echo \"$NAME is stopped\"\n        RETVAL=1\n    fi\n}\n\ndo_restart(){\n    do_stop\n    sleep 0.5\n    do_start\n}\n\ncase \"$1\" in\n    start|stop|restart|status)\n    do_$1\n    ;;\n    *)\n    echo \"Usage: $0 { start | stop | restart | status }\"\n    RETVAL=1\n    ;;\nesac\n\nexit $RETVAL\n"
        },
        {
          "name": "shadowsocksR.sh",
          "type": "blob",
          "size": 15.83984375,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n#=================================================================#\n#   System Required:  CentOS 6,7, Debian, Ubuntu                  #\n#   Description: One click Install ShadowsocksR Server            #\n#   Author: Teddysun <i@teddysun.com>                             #\n#   Thanks: @breakwa11 <https://twitter.com/breakwa11>            #\n#   Intro:  https://shadowsocks.be/9.html                         #\n#=================================================================#\n\nclear\necho\necho \"#############################################################\"\necho \"# One click Install ShadowsocksR Server                     #\"\necho \"# Intro: https://shadowsocks.be/9.html                      #\"\necho \"# Author: Teddysun <i@teddysun.com>                         #\"\necho \"# Github: https://github.com/shadowsocksr/shadowsocksr      #\"\necho \"#############################################################\"\necho\n\nlibsodium_file=\"libsodium-1.0.18\"\nlibsodium_url=\"https://github.com/jedisct1/libsodium/releases/download/1.0.18-RELEASE/libsodium-1.0.18.tar.gz\"\nshadowsocks_r_file=\"shadowsocksr-3.2.2\"\nshadowsocks_r_url=\"https://github.com/shadowsocksrr/shadowsocksr/archive/3.2.2.tar.gz\"\n\n#Current folder\ncur_dir=`pwd`\n# Stream Ciphers\nciphers=(\nnone\naes-256-cfb\naes-192-cfb\naes-128-cfb\naes-256-cfb8\naes-192-cfb8\naes-128-cfb8\naes-256-ctr\naes-192-ctr\naes-128-ctr\nchacha20-ietf\nchacha20\nsalsa20\nxchacha20\nxsalsa20\nrc4-md5\n)\n# Reference URL:\n# https://github.com/shadowsocksr-rm/shadowsocks-rss/blob/master/ssr.md\n# https://github.com/shadowsocksrr/shadowsocksr/commit/a3cf0254508992b7126ab1151df0c2f10bf82680\n# Protocol\nprotocols=(\norigin\nverify_deflate\nauth_sha1_v4\nauth_sha1_v4_compatible\nauth_aes128_md5\nauth_aes128_sha1\nauth_chain_a\nauth_chain_b\nauth_chain_c\nauth_chain_d\nauth_chain_e\nauth_chain_f\n)\n# obfs\nobfs=(\nplain\nhttp_simple\nhttp_simple_compatible\nhttp_post\nhttp_post_compatible\ntls1.2_ticket_auth\ntls1.2_ticket_auth_compatible\ntls1.2_ticket_fastauth\ntls1.2_ticket_fastauth_compatible\n)\n# Color\nred='\\033[0;31m'\ngreen='\\033[0;32m'\nyellow='\\033[0;33m'\nplain='\\033[0m'\n\n# Make sure only root can run our script\n[[ $EUID -ne 0 ]] && echo -e \"[${red}Error${plain}] This script must be run as root!\" && exit 1\n\n# Disable selinux\ndisable_selinux(){\n    if [ -s /etc/selinux/config ] && grep 'SELINUX=enforcing' /etc/selinux/config; then\n        sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config\n        setenforce 0\n    fi\n}\n\n#Check system\ncheck_sys(){\n    local checkType=$1\n    local value=$2\n\n    local release=''\n    local systemPackage=''\n\n    if [[ -f /etc/redhat-release ]]; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    elif grep -Eqi \"debian|raspbian\" /etc/issue; then\n        release=\"debian\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"ubuntu\" /etc/issue; then\n        release=\"ubuntu\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"centos|red hat|redhat\" /etc/issue; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    elif grep -Eqi \"debian|raspbian\" /proc/version; then\n        release=\"debian\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"ubuntu\" /proc/version; then\n        release=\"ubuntu\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"centos|red hat|redhat\" /proc/version; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    fi\n\n    if [[ \"${checkType}\" == \"sysRelease\" ]]; then\n        if [ \"${value}\" == \"${release}\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    elif [[ \"${checkType}\" == \"packageManager\" ]]; then\n        if [ \"${value}\" == \"${systemPackage}\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    fi\n}\n\n# Get version\ngetversion(){\n    if [[ -s /etc/redhat-release ]]; then\n        grep -oE  \"[0-9.]+\" /etc/redhat-release\n    else\n        grep -oE  \"[0-9.]+\" /etc/issue\n    fi\n}\n\n# CentOS version\ncentosversion(){\n    if check_sys sysRelease centos; then\n        local code=$1\n        local version=\"$(getversion)\"\n        local main_ver=${version%%.*}\n        if [ \"$main_ver\" == \"$code\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    else\n        return 1\n    fi\n}\n\n# Get public IP address\nget_ip(){\n    local IP=$( ip addr | egrep -o '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | egrep -v \"^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.\" | head -n 1 )\n    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )\n    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )\n    [ ! -z ${IP} ] && echo ${IP} || echo\n}\n\nget_char(){\n    SAVEDSTTY=`stty -g`\n    stty -echo\n    stty cbreak\n    dd if=/dev/tty bs=1 count=1 2> /dev/null\n    stty -raw\n    stty echo\n    stty $SAVEDSTTY\n}\n\n# Pre-installation settings\npre_install(){\n    if check_sys packageManager yum || check_sys packageManager apt; then\n        # Not support CentOS 5\n        if centosversion 5; then\n            echo -e \"$[{red}Error${plain}] Not supported CentOS 5, please change to CentOS 6+/Debian 7+/Ubuntu 12+ and try again.\"\n            exit 1\n        fi\n    else\n        echo -e \"[${red}Error${plain}] Your OS is not supported. please change OS to CentOS/Debian/Ubuntu and try again.\"\n        exit 1\n    fi\n    # Set ShadowsocksR config password\n    echo \"Please enter password for ShadowsocksR:\"\n    read -p \"(Default password: teddysun.com):\" shadowsockspwd\n    [ -z \"${shadowsockspwd}\" ] && shadowsockspwd=\"teddysun.com\"\n    echo\n    echo \"---------------------------\"\n    echo \"password = ${shadowsockspwd}\"\n    echo \"---------------------------\"\n    echo\n    # Set ShadowsocksR config port\n    while true\n    do\n    dport=$(shuf -i 9000-19999 -n 1)\n    echo -e \"Please enter a port for ShadowsocksR [1-65535]\"\n    read -p \"(Default port: ${dport}):\" shadowsocksport\n    [ -z \"${shadowsocksport}\" ] && shadowsocksport=${dport}\n    expr ${shadowsocksport} + 1 &>/dev/null\n    if [ $? -eq 0 ]; then\n        if [ ${shadowsocksport} -ge 1 ] && [ ${shadowsocksport} -le 65535 ] && [ ${shadowsocksport:0:1} != 0 ]; then\n            echo\n            echo \"---------------------------\"\n            echo \"port = ${shadowsocksport}\"\n            echo \"---------------------------\"\n            echo\n            break\n        fi\n    fi\n    echo -e \"[${red}Error${plain}] Please enter a correct number [1-65535]\"\n    done\n\n    # Set shadowsocksR config stream ciphers\n    while true\n    do\n    echo -e \"Please select stream cipher for ShadowsocksR:\"\n    for ((i=1;i<=${#ciphers[@]};i++ )); do\n        hint=\"${ciphers[$i-1]}\"\n        echo -e \"${green}${i}${plain}) ${hint}\"\n    done\n    read -p \"Which cipher you'd select(Default: ${ciphers[1]}):\" pick\n    [ -z \"$pick\" ] && pick=2\n    expr ${pick} + 1 &>/dev/null\n    if [ $? -ne 0 ]; then\n        echo -e \"[${red}Error${plain}] Please enter a number\"\n        continue\n    fi\n    if [[ \"$pick\" -lt 1 || \"$pick\" -gt ${#ciphers[@]} ]]; then\n        echo -e \"[${red}Error${plain}] Please enter a number between 1 and ${#ciphers[@]}\"\n        continue\n    fi\n    shadowsockscipher=${ciphers[$pick-1]}\n    echo\n    echo \"---------------------------\"\n    echo \"cipher = ${shadowsockscipher}\"\n    echo \"---------------------------\"\n    echo\n    break\n    done\n\n    # Set shadowsocksR config protocol\n    while true\n    do\n    echo -e \"Please select protocol for ShadowsocksR:\"\n    for ((i=1;i<=${#protocols[@]};i++ )); do\n        hint=\"${protocols[$i-1]}\"\n        echo -e \"${green}${i}${plain}) ${hint}\"\n    done\n    read -p \"Which protocol you'd select(Default: ${protocols[0]}):\" protocol\n    [ -z \"$protocol\" ] && protocol=1\n    expr ${protocol} + 1 &>/dev/null\n    if [ $? -ne 0 ]; then\n        echo -e \"[${red}Error${plain}] Input error, please input a number\"\n        continue\n    fi\n    if [[ \"$protocol\" -lt 1 || \"$protocol\" -gt ${#protocols[@]} ]]; then\n        echo -e \"[${red}Error${plain}] Input error, please input a number between 1 and ${#protocols[@]}\"\n        continue\n    fi\n    shadowsockprotocol=${protocols[$protocol-1]}\n    echo\n    echo \"---------------------------\"\n    echo \"protocol = ${shadowsockprotocol}\"\n    echo \"---------------------------\"\n    echo\n    break\n    done\n\n    # Set shadowsocksR config obfs\n    while true\n    do\n    echo -e \"Please select obfs for ShadowsocksR:\"\n    for ((i=1;i<=${#obfs[@]};i++ )); do\n        hint=\"${obfs[$i-1]}\"\n        echo -e \"${green}${i}${plain}) ${hint}\"\n    done\n    read -p \"Which obfs you'd select(Default: ${obfs[0]}):\" r_obfs\n    [ -z \"$r_obfs\" ] && r_obfs=1\n    expr ${r_obfs} + 1 &>/dev/null\n    if [ $? -ne 0 ]; then\n        echo -e \"[${red}Error${plain}] Input error, please input a number\"\n        continue\n    fi\n    if [[ \"$r_obfs\" -lt 1 || \"$r_obfs\" -gt ${#obfs[@]} ]]; then\n        echo -e \"[${red}Error${plain}] Input error, please input a number between 1 and ${#obfs[@]}\"\n        continue\n    fi\n    shadowsockobfs=${obfs[$r_obfs-1]}\n    echo\n    echo \"---------------------------\"\n    echo \"obfs = ${shadowsockobfs}\"\n    echo \"---------------------------\"\n    echo\n    break\n    done\n\n    echo\n    echo \"Press any key to start...or Press Ctrl+C to cancel\"\n    char=`get_char`\n    # Install necessary dependencies\n    if check_sys packageManager yum; then\n        yum install -y python python-devel python-setuptools openssl openssl-devel curl wget unzip gcc automake autoconf make libtool\n    elif check_sys packageManager apt; then\n        apt-get -y update\n        apt-get -y install python python-dev python-setuptools openssl libssl-dev curl wget unzip gcc automake autoconf make libtool\n    fi\n    cd ${cur_dir}\n}\n\n# Download files\ndownload_files(){\n    # Download libsodium file\n    if ! wget --no-check-certificate -O ${libsodium_file}.tar.gz ${libsodium_url}; then\n        echo -e \"[${red}Error${plain}] Failed to download ${libsodium_file}.tar.gz!\"\n        exit 1\n    fi\n    # Download ShadowsocksR file\n    if ! wget --no-check-certificate -O ${shadowsocks_r_file}.tar.gz ${shadowsocks_r_url}; then\n        echo -e \"[${red}Error${plain}] Failed to download ShadowsocksR file!\"\n        exit 1\n    fi\n    # Download ShadowsocksR init script\n    if check_sys packageManager yum; then\n        if ! wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR -O /etc/init.d/shadowsocks; then\n            echo -e \"[${red}Error${plain}] Failed to download ShadowsocksR chkconfig file!\"\n            exit 1\n        fi\n    elif check_sys packageManager apt; then\n        if ! wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR-debian -O /etc/init.d/shadowsocks; then\n            echo -e \"[${red}Error${plain}] Failed to download ShadowsocksR chkconfig file!\"\n            exit 1\n        fi\n    fi\n}\n\n# Firewall set\nfirewall_set(){\n    echo -e \"[${green}Info${plain}] firewall set start...\"\n    if centosversion 6; then\n        /etc/init.d/iptables status > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            iptables -L -n | grep -i ${shadowsocksport} > /dev/null 2>&1\n            if [ $? -ne 0 ]; then\n                iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${shadowsocksport} -j ACCEPT\n                iptables -I INPUT -m state --state NEW -m udp -p udp --dport ${shadowsocksport} -j ACCEPT\n                /etc/init.d/iptables save\n                /etc/init.d/iptables restart\n            else\n                echo -e \"[${green}Info${plain}] port ${shadowsocksport} has been set up.\"\n            fi\n        else\n            echo -e \"[${yellow}Warning${plain}] iptables looks like shutdown or not installed, please manually set it if necessary.\"\n        fi\n    elif centosversion 7; then\n        systemctl status firewalld > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            default_zone=$(firewall-cmd --get-default-zone)\n            firewall-cmd --permanent --zone=${default_zone} --add-port=${shadowsocksport}/tcp\n            firewall-cmd --permanent --zone=${default_zone} --add-port=${shadowsocksport}/udp\n            firewall-cmd --reload\n        else\n            echo -e \"[${yellow}Warning${plain}] firewalld looks like not running or not installed, please enable port ${shadowsocksport} manually if necessary.\"\n        fi\n    fi\n    echo -e \"[${green}Info${plain}] firewall set completed...\"\n}\n\n# Config ShadowsocksR\nconfig_shadowsocks(){\n    cat > /etc/shadowsocks.json<<-EOF\n{\n    \"server\":\"0.0.0.0\",\n    \"server_ipv6\":\"[::]\",\n    \"server_port\":${shadowsocksport},\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"${shadowsockspwd}\",\n    \"timeout\":120,\n    \"method\":\"${shadowsockscipher}\",\n    \"protocol\":\"${shadowsockprotocol}\",\n    \"protocol_param\":\"\",\n    \"obfs\":\"${shadowsockobfs}\",\n    \"obfs_param\":\"\",\n    \"redirect\":\"\",\n    \"dns_ipv6\":false,\n    \"fast_open\":false,\n    \"workers\":1\n}\nEOF\n}\n\n# Install ShadowsocksR\ninstall(){\n    # Install libsodium\n    if [ ! -f /usr/lib/libsodium.a ]; then\n        cd ${cur_dir}\n        tar zxf ${libsodium_file}.tar.gz\n        cd ${libsodium_file}\n        ./configure --prefix=/usr && make && make install\n        if [ $? -ne 0 ]; then\n            echo -e \"[${red}Error${plain}] libsodium install failed!\"\n            install_cleanup\n            exit 1\n        fi\n    fi\n\n    ldconfig\n    # Install ShadowsocksR\n    cd ${cur_dir}\n    tar zxf ${shadowsocks_r_file}.tar.gz\n    mv ${shadowsocks_r_file}/shadowsocks /usr/local/\n    if [ -f /usr/local/shadowsocks/server.py ]; then\n        chmod +x /etc/init.d/shadowsocks\n        if check_sys packageManager yum; then\n            chkconfig --add shadowsocks\n            chkconfig shadowsocks on\n        elif check_sys packageManager apt; then\n            update-rc.d -f shadowsocks defaults\n        fi\n        /etc/init.d/shadowsocks start\n\n        clear\n        echo\n        echo -e \"Congratulations, ShadowsocksR server install completed!\"\n        echo -e \"Your Server IP        : \\033[41;37m $(get_ip) \\033[0m\"\n        echo -e \"Your Server Port      : \\033[41;37m ${shadowsocksport} \\033[0m\"\n        echo -e \"Your Password         : \\033[41;37m ${shadowsockspwd} \\033[0m\"\n        echo -e \"Your Protocol         : \\033[41;37m ${shadowsockprotocol} \\033[0m\"\n        echo -e \"Your obfs             : \\033[41;37m ${shadowsockobfs} \\033[0m\"\n        echo -e \"Your Encryption Method: \\033[41;37m ${shadowsockscipher} \\033[0m\"\n        echo\n        echo \"Welcome to visit:https://shadowsocks.be/9.html\"\n        echo \"Enjoy it!\"\n        echo\n    else\n        echo \"ShadowsocksR install failed, please Email to Teddysun <i@teddysun.com> and contact\"\n        install_cleanup\n        exit 1\n    fi\n}\n\n# Install cleanup\ninstall_cleanup(){\n    cd ${cur_dir}\n    rm -rf ${shadowsocks_r_file}.tar.gz ${shadowsocks_r_file} ${libsodium_file}.tar.gz ${libsodium_file}\n}\n\n\n# Uninstall ShadowsocksR\nuninstall_shadowsocksr(){\n    printf \"Are you sure uninstall ShadowsocksR? (y/n)\"\n    printf \"\\n\"\n    read -p \"(Default: n):\" answer\n    [ -z ${answer} ] && answer=\"n\"\n    if [ \"${answer}\" == \"y\" ] || [ \"${answer}\" == \"Y\" ]; then\n        /etc/init.d/shadowsocks status > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            /etc/init.d/shadowsocks stop\n        fi\n        if check_sys packageManager yum; then\n            chkconfig --del shadowsocks\n        elif check_sys packageManager apt; then\n            update-rc.d -f shadowsocks remove\n        fi\n        rm -f /etc/shadowsocks.json\n        rm -f /etc/init.d/shadowsocks\n        rm -f /var/log/shadowsocks.log\n        rm -rf /usr/local/shadowsocks\n        echo \"ShadowsocksR uninstall success!\"\n    else\n        echo\n        echo \"uninstall cancelled, nothing to do...\"\n        echo\n    fi\n}\n\n# Install ShadowsocksR\ninstall_shadowsocksr(){\n    disable_selinux\n    pre_install\n    download_files\n    config_shadowsocks\n    if check_sys packageManager yum; then\n        firewall_set\n    fi\n    install\n    install_cleanup\n}\n\n# Initialization step\naction=$1\n[ -z $1 ] && action=install\ncase \"$action\" in\n    install|uninstall)\n        ${action}_shadowsocksr\n        ;;\n    *)\n        echo \"Arguments error! [${action}]\"\n        echo \"Usage: `basename $0` [install|uninstall]\"\n        ;;\nesac\n"
        }
      ]
    }
  ]
}