{
  "metadata": {
    "timestamp": 1736568834402,
    "page": 13,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "docker/docker-bench-security",
      "stars": 9223,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.05859375,
          "content": "*\n!docker-bench-security.sh\n!functions/\n!tests/\n!log/\nlog/*\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0224609375,
          "content": "log/*\n*.swp*\n.vagrant/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.8740234375,
          "content": "# Contributing to Docker Bench for Security\n\nWant to hack on Docker Bench? Awesome! Here are instructions to get you\nstarted.\n\nThe Docker Bench for Security is a part of the [Docker](https://www.docker.com)\nproject, and follows the same rules and principles. If you're already familiar\nwith the way Docker does things, you'll feel right at home.\n\nOtherwise, go read\n[Contribute to the Moby Project](https://github.com/moby/moby/blob/master/CONTRIBUTING.md).\n\n## Development Environment Setup\n\n### Start hacking\n\nYou can build the container that wraps the docker-bench for security:\n\n```sh\ngit clone git@github.com:docker/docker-bench-security.git\ncd docker-bench-security\ndocker build -t docker-bench-security .\n```\n\nOr you can simply run the shell script locally:\n\n```sh\ngit clone git@github.com:docker/docker-bench-security.git\ncd docker-bench-security\nsudo sh docker-bench-security.sh\n```\n\nThe Docker Bench has the main script called `docker-bench-security.sh`.\nThis is the main script that checks for all the dependencies, deals with\ncommand line arguments and loads all the tests.\n\nThe tests are split into the following files:\n\n```sh\ntests/\n├── 1_host_configuration.sh\n├── 2_docker_daemon_configuration.sh\n├── 3_docker_daemon_configuration_files.sh\n├── 4_container_images.sh\n├── 5_container_runtime.sh\n├── 6_docker_security_operations.sh\n├── 7_docker_swarm_configuration.sh\n├── 8_docker_enterprise_configuration.sh\n└── 99_community_checks.sh\n```\n\nTo modify the Docker Bench for Security you should first clone the repository,\nmake your changes, check your code with `shellcheck`, or similar tools, and\nthen sign off on your commits. After that feel free to send us a pull request\nwith the changes.\n\nWhile this tool was inspired by the [CIS Docker 1.11.0 benchmark](https://www.cisecurity.org/benchmark/docker/)\nand its successors, feel free to add new tests.\n"
        },
        {
          "name": "CONTRIBUTORS.md",
          "type": "blob",
          "size": 2.337890625,
          "content": "The following people, listed in alphabetical order, have contributed to docker-bench-security:\n\n* alberto <alberto@tutum.co>\n* Andreas Stieger <astieger@suse.com>\n* Anthony Roger <aroger@softwaymedical.fr>\n* Aurélien Gasser <aurelien.gasser@gmail.com>\n* binary <binary@webdev.fritz.box>\n* Boris Gorbylev <ekho@ekho.name>\n* Cheng-Li Jerry Ma <chengli.ma@gmail.com>\n* Csaba Palfi <csaba@palfi.me>\n* Daniele Marcocci <daniele.marcocci@par-tec.it>\n* Dhawal Patel <dhawal.patel@nordstrom.com>\n* Diogo Monica <diogo@docker.com>\n* Diogo Mónica <diogo.monica@gmail.com>\n* Ernst de Haan <ernst@ernstdehaan.com>\n* HuKeping <hukeping@huawei.com>\n* Ivan Angelov <iangelov@users.noreply.github.com>\n* J0WI <J0WI@users.noreply.github.com>\n* jammasterj89 <jammasterj89@gmail.com>\n* Jessica Frazelle <princess@docker.com>\n* Joachim Lusiardi <jlusiardi@users.noreply.github.com>\n* Joachim Lusiardi <joachim@lusiardi.de>\n* Joachim Lusiardi <shing19m@dev1.lusiardi.de>\n* Joe Williams <joe.williams@github.com>\n* Julien Garcia Gonzalez <julien@giantswarm.io>\n* Jürgen Hermann <jh@web.de>\n* kakakakakku <y.yoshida22@gmail.com>\n* Karol Babioch <kbabioch@suse.de>\n* Kevin Lim <kevin.lim@sap.com>\n* kevinll <imhael@gmail.com>\n* Liron Levin <liron@twistlock.com>\n* liron-l <levinlir@gmail.com>\n* LorensK <LorensK@users.noreply.github.com>\n* lusitania <lusitania@users.noreply.github.com>\n* Maik Ellerbrock <opensource@frapsoft.com>\n* Mark Stemm <mark.stemm@gmail.com>\n* Matt Fellows <matt.fellows@onegeek.com.au>\n* Michael Crosby <crosbymichael@gmail.com>\n* Michael Stahn <michael.stahn.42@gmail.com>\n* Mike Ritter <mike.ritter@target.com>\n* Mr. Secure <ben.github@mrsecure.org>\n* MrSecure <MrSecure@users.noreply.github.com>\n* Nigel Brown <nigel@windsock.io>\n* Paul Czarkowski <username.taken@gmail.com>\n* Paul Morgan <jumanjiman@gmail.com>\n* Pete Sellars <psellars@gmail.com>\n* Peter <lusitania@users.noreply.github.com>\n* Ravi Kumar Vadapalli <vadapalli.ravikumar@gmail.com>\n* Scott McCarty <scott.mccarty@gmail.com>\n* Sebastiaan van Stijn <github@gone.nl>\n* telepresencebot2 <telepresencebot2@users.noreply.github.com>\n* Thomas Sjögren <konstruktoid@users.noreply.github.com>\n* Tom Partington <tom.partington@cevo.com.au>\n* Werner Buck <wernerbuck@gmail.com>\n* will Farrell <willfarrell@users.noreply.github.com>\n* Zvi \"Viz\" Effron <zeffron@riotgames.com>\n\nThis list was generated Tue Nov  5 09:45:35 UTC 2019.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.5,
          "content": "FROM alpine:3.18@sha256:eece025e432126ce23f223450a0326fbebde39cdf496a85d8c016293fc851978\n\nLABEL \\\n  org.label-schema.name=\"docker-bench-security\" \\\n  org.label-schema.url=\"https://dockerbench.com\" \\\n  org.label-schema.vcs-url=\"https://github.com/docker/docker-bench-security.git\"\n\nRUN apk add --no-cache iproute2 \\\n    docker-cli \\\n    dumb-init \\\n    jq\n\nCOPY . /usr/local/bin/\n\nHEALTHCHECK CMD exit 0\n\nWORKDIR /usr/local/bin\n\nENTRYPOINT [ \"/usr/bin/dumb-init\", \"/bin/sh\", \"docker-bench-security.sh\" ]\nCMD [\"\"]\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 11.0771484375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2015 Docker, Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "MAINTAINERS",
          "type": "blob",
          "size": 0.9228515625,
          "content": "# Docker Bench for Security maintainers file\n#\n# This file describes who runs the docker/docker-bench-security project and how.\n# This is a living document - if you see something out of date or missing, speak up!\n#\n# It is structured to be consumable by both humans and programs.\n# To extract its contents programmatically, use any TOML-compliant parser.\n#\n# This file is compiled into the MAINTAINERS file in docker/opensource.\n#\n[Org]\n\t[Org.\"Core maintainers\"]\n\t\tpeople = [\n\t\t\t\"diogomonica\",\n\t\t\t\"konstruktoid\",\n\t\t]\n\n[people]\n\n# A reference list of all people associated with the project.\n# All other sections should refer to people by their canonical key\n# in the people section.\n\n\t# ADD YOURSELF HERE IN ALPHABETICAL ORDER\n\n\t[people.diogomonica]\n\tName = \"Dr. Diogo Mónica\"\n\tEmail = \"diogo@docker.com\"\n\tGitHub = \"diogomonica\"\n\n\t[people.konstruktoid]\n\tName = \"Thomas Sjögren\"\n\tEmail = \"thomas.sjogren@protonmail.com\"\n\tGitHub = \"konstruktoid\"\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.380859375,
          "content": "# Docker Bench for Security\n\n![Docker Bench for Security running](img/benchmark_log.png)\n\nThe Docker Bench for Security is a script that checks for dozens of common best-practices around deploying Docker containers in production. The tests are all automated, and are based on the [CIS Docker Benchmark v1.6.0](https://www.cisecurity.org/benchmark/docker/).\n\nWe are making this available as an open-source utility so the Docker community can have an easy way to self-assess their hosts and Docker containers against this benchmark.\n\nRelease | CIS |\n:---:|:---:|\n1.6.0|1.6.0|\n1.5.0|1.5.0|\n1.3.6|1.4.0|\n1.3.5|1.2.0|\n1.3.3|1.1.0|\n1.3.0|1.13.0|\n\n## Running Docker Bench for Security\n\n### Run from your base host\n\nYou can simply run this script from your base host by running:\n\n```sh\ngit clone https://github.com/docker/docker-bench-security.git\ncd docker-bench-security\nsudo sh docker-bench-security.sh\n```\n\n> Note: [`jq`](https://jqlang.github.io/jq/) is an optional but recommended dependency.\n\n### Run with Docker\n\n#### Building Docker image\n\nYou have two options if you wish to build and run this container yourself:\n\n1. Use Docker Build:\n\n```sh\ngit clone https://github.com/docker/docker-bench-security.git\ncd docker-bench-security\ndocker build --no-cache -t docker-bench-security .\n```\n\nFollowed by an appropriate `docker run` command as stated below.\n\n2. Use Docker Compose:\n\n```sh\ngit clone https://github.com/docker/docker-bench-security.git\ncd docker-bench-security\ndocker-compose run --rm docker-bench-security\n```\n\n_Please note that the `docker/docker-bench-security` image is out-of-date and and a manual build is required. See [#405](https://github.com/docker/docker-bench-security/issues/405) for more information._\n\nNote that this container is being run with a *lot* of privilege -- sharing the host's filesystem, pid and network namespaces, due to portions of the benchmark applying to the running host.\n\n### Using the container\n\n```sh\ndocker run --rm --net host --pid host --userns host --cap-add audit_control \\\n    -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \\\n    -v /etc:/etc:ro \\\n    -v /usr/bin/containerd:/usr/bin/containerd:ro \\\n    -v /usr/bin/runc:/usr/bin/runc:ro \\\n    -v /usr/lib/systemd:/usr/lib/systemd:ro \\\n    -v /var/lib:/var/lib:ro \\\n    -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n    --label docker_bench_security \\\n    docker-bench-security\n```\n\nDon't forget to adjust the shared volumes according to your operating system.\nSome examples are:\n\n1. On Ubuntu the `docker.service` and `docker.secret` files are located in\n   `/lib/systemd/system` folder by default.\n\n```sh\ndocker run --rm --net host --pid host --userns host --cap-add audit_control \\\n    -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \\\n    -v /etc:/etc:ro \\\n    -v /lib/systemd/system:/lib/systemd/system:ro \\\n    -v /usr/bin/containerd:/usr/bin/containerd:ro \\\n    -v /usr/bin/runc:/usr/bin/runc:ro \\\n    -v /usr/lib/systemd:/usr/lib/systemd:ro \\\n    -v /var/lib:/var/lib:ro \\\n    -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n    --label docker_bench_security \\\n    docker-bench-security\n```\n\n2. The /etc/hostname file is missing on macOS, so it will need to be created first. Also, `Docker Desktop` on macOS doesn't have `/usr/lib/systemd` or the above Docker\n    binaries.\n\n```sh\nsudo touch /etc/hostname\n\ndocker run --rm --net host --pid host --userns host --cap-add audit_control \\\n    -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \\\n    -v /etc:/etc \\\n    -v /var/lib:/var/lib:ro \\\n    -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n    --label docker_bench_security \\\n    docker-bench-security\n```\n\n### Note\n\nDocker bench requires Docker 1.13.0 or later in order to run.\n\nNote that when distributions don't contain `auditctl`, the audit tests will check `/etc/audit/audit.rules` to see if a rule is present instead.\n\n### Docker Bench for Security options\n\n```sh\n  -b           optional  Do not print colors\n  -h           optional  Print this help message\n  -l FILE      optional  Log output in FILE, inside container if run using docker\n  -u USERS     optional  Comma delimited list of trusted docker user(s)\n  -c CHECK     optional  Comma delimited list of specific check(s) id\n  -e CHECK     optional  Comma delimited list of specific check(s) id to exclude\n  -i INCLUDE   optional  Comma delimited list of patterns within a container or image name to check\n  -x EXCLUDE   optional  Comma delimited list of patterns within a container or image name to exclude from check\n  -t LABEL     optional  Comma delimited list of labels within a container or image to check\n  -n LIMIT     optional  In JSON output, when reporting lists of items (containers, images, etc.), limit the number of reported items to LIMIT. Default 0 (no limit).\n  -p PRINT     optional  Disable the printing of remediation measures. Default: print remediation measures.\n```\n\nBy default the Docker Bench for Security script will run all available CIS tests and produce\nlogs in the log folder from current directory, named `docker-bench-security.log.json` and\n`docker-bench-security.log`.\n\nIf the docker container is used then the log files will be created inside the container in location `/usr/local/bin/log/`. If you wish to access them from the host after the container has been run you will need to mount a volume for storing them in.\n\nThe CIS based checks are named `check_<section>_<number>`, e.g. `check_2_6` and community contributed checks are named `check_c_<number>`.\n\n`sh docker-bench-security.sh -c check_2_2` will only run check `2.2 Ensure the logging level is set to 'info'`.\n\n`sh docker-bench-security.sh -e check_2_2` will run all available checks except `2.2 Ensure the logging level is set to 'info'`.\n\n`sh docker-bench-security.sh -e docker_enterprise_configuration` will run all available checks except the docker_enterprise_configuration group\n\n`sh docker-bench-security.sh -e docker_enterprise_configuration,check_2_2` will run all available checks except the docker_enterprise_configuration group and `2.2 Ensure the logging level is set to 'info'`\n\n`sh docker-bench-security.sh -c container_images,container_runtime` will run just the container_images and container_runtime checks\n\n`sh docker-bench-security.sh -c container_images -e check_4_5` will run just the container_images checks except `4.5 Ensure Content trust for Docker is Enabled`\n\nNote that when submitting checks, provide information why it is a reasonable test to add and please include some kind of official documentation verifying that information.\n"
        },
        {
          "name": "Vagrantfile",
          "type": "blob",
          "size": 0.65625,
          "content": "Vagrant.configure(\"2\") do |config|\n  config.vbguest.installer_options = { allow_kernel_upgrade: true }\n  config.vm.provider \"virtualbox\" do |v|\n    v.memory = 2048\n    v.cpus = 2\n    v.customize [\"modifyvm\", :id, \"--uart1\", \"0x3F8\", \"4\"]\n    v.customize [\"modifyvm\", :id, \"--uartmode1\", \"file\", File::NULL]\n  end\n\n  config.vm.define \"jammy\" do |jammy|\n    jammy.ssh.extra_args = [\"-o\",\"ConnectTimeout=600\"]\n    jammy.ssh.insert_key = true\n    jammy.vm.boot_timeout = 600\n    jammy.vm.box = \"ubuntu/jammy64\"\n    jammy.vm.hostname = \"jammy\"\n    jammy.vm.provision \"shell\",\n      inline: \"apt-get update && curl -sSL get.docker.com | sh && addgroup vagrant docker\"\n  end\nend\n"
        },
        {
          "name": "docker-bench-security.sh",
          "type": "blob",
          "size": 7.212890625,
          "content": "#!/bin/bash\n# --------------------------------------------------------------------------------------------\n# Docker Bench for Security\n#\n# Docker, Inc. (c) 2015-2022\n#\n# Checks for dozens of common best-practices around deploying Docker containers in production.\n# --------------------------------------------------------------------------------------------\n\nversion='1.6.0'\n\nLIBEXEC=\".\" # Distributions can change this to /usr/libexec or similar.\n\n# Load dependencies\n. $LIBEXEC/functions/functions_lib.sh\n. $LIBEXEC/functions/helper_lib.sh\n\n# Setup the paths\nthis_path=$(abspath \"$0\")       ## Path of this file including filename\nmyname=$(basename \"${this_path%.*}\")     ## file name of this script.\n\nreadonly version\nreadonly this_path\nreadonly myname\n\nexport PATH=\"$PATH:/bin:/sbin:/usr/bin:/usr/local/bin:/usr/sbin/\"\n\n# Check for required program(s)\nreq_programs 'awk docker grep sed stat tail tee tr wc xargs'\n\n# Ensure we can connect to docker daemon\nif ! docker ps -q >/dev/null 2>&1; then\n  printf \"Error connecting to docker daemon (does docker ps work?)\\n\"\n  exit 1\nfi\n\nusage () {\n  cat <<EOF\nDocker Bench for Security - Docker, Inc. (c) 2015-$(date +\"%Y\")\nChecks for dozens of common best-practices around deploying Docker containers in production.\nBased on the CIS Docker Benchmark 1.6.0.\n\nUsage: ${myname}.sh [OPTIONS]\n\nExample:\n  - Only run check \"2.2 - Ensure the logging level is set to 'info'\":\n      sh docker-bench-security.sh -c check_2_2\n  - Run all available checks except the host_configuration group and \"2.8 - Enable user namespace support\":\n      sh docker-bench-security.sh -e host_configuration,check_2_8\n  - Run just the container_images checks except \"4.5 - Ensure Content trust for Docker is Enabled\":\n      sh docker-bench-security.sh -c container_images -e check_4_5\n\nOptions:\n  -b           optional  Do not print colors\n  -h           optional  Print this help message\n  -l FILE      optional  Log output in FILE, inside container if run using docker\n  -u USERS     optional  Comma delimited list of trusted docker user(s)\n  -c CHECK     optional  Comma delimited list of specific check(s) id\n  -e CHECK     optional  Comma delimited list of specific check(s) id to exclude\n  -i INCLUDE   optional  Comma delimited list of patterns within a container or image name to check\n  -x EXCLUDE   optional  Comma delimited list of patterns within a container or image name to exclude from check\n  -t LABEL     optional  Comma delimited list of labels within a container or image to check\n  -n LIMIT     optional  In JSON output, when reporting lists of items (containers, images, etc.), limit the number of reported items to LIMIT. Default 0 (no limit).\n  -p PRINT     optional  Print remediation measures. Default: Don't print remediation measures.\n\nComplete list of checks: <https://github.com/docker/docker-bench-security/blob/master/tests/>\nFull documentation: <https://github.com/docker/docker-bench-security>\nReleased under the Apache-2.0 License.\nEOF\n}\n\n# Default values\nif [ ! -d log ]; then\n  mkdir log\nfi\n\nlogger=\"log/${myname}.log\"\nlimit=0\nprintremediation=\"0\"\nglobalRemediation=\"\"\n\n# Get the flags\n# If you add an option here, please\n# remember to update usage() above.\nwhile getopts bhl:u:c:e:i:x:t:n:p args\ndo\n  case $args in\n  b) nocolor=\"nocolor\";;\n  h) usage; exit 0 ;;\n  l) logger=\"$OPTARG\" ;;\n  u) dockertrustusers=\"$OPTARG\" ;;\n  c) check=\"$OPTARG\" ;;\n  e) checkexclude=\"$OPTARG\" ;;\n  i) include=\"$OPTARG\" ;;\n  x) exclude=\"$OPTARG\" ;;\n  t) labels=\"$OPTARG\" ;;\n  n) limit=\"$OPTARG\" ;;\n  p) printremediation=\"1\" ;;\n  *) usage; exit 1 ;;\n  esac\ndone\n\n# Load output formating\n. $LIBEXEC/functions/output_lib.sh\n\nyell_info\n\n# Warn if not root\nif [ \"$(id -u)\" != \"0\" ]; then\n  warn \"$(yell 'Some tests might require root to run')\\n\"\n  sleep 3\nfi\n\n# Total Score\n# Warn Scored -1, Pass Scored +1, Not Score -0\n\ntotalChecks=0\ncurrentScore=0\n\nlogit \"Initializing $(date +%Y-%m-%dT%H:%M:%S%:z)\\n\"\nbeginjson \"$version\" \"$(date +%s)\"\n\n# Load all the tests from tests/ and run them\nmain () {\n  logit \"\\n${bldylw}Section A - Check results${txtrst}\"\n\n  # Get configuration location\n  get_docker_configuration_file\n\n  # If there is a container with label docker_bench_security, memorize it:\n  benchcont=\"nil\"\n  for c in $(docker ps | sed '1d' | awk '{print $NF}'); do\n    if docker inspect --format '{{ .Config.Labels }}' \"$c\" | \\\n     grep -e 'docker.bench.security' >/dev/null 2>&1; then\n      benchcont=\"$c\"\n    fi\n  done\n\n  # Get the image id of the docker_bench_security_image, memorize it:\n  benchimagecont=\"nil\"\n  for c in $(docker images | sed '1d' | awk '{print $3}'); do\n    if docker inspect --format '{{ .Config.Labels }}' \"$c\" | \\\n     grep -e 'docker.bench.security' >/dev/null 2>&1; then\n      benchimagecont=\"$c\"\n    fi\n  done\n\n  # Format LABELS\n  for label in $(echo \"$labels\" | sed 's/,/ /g'); do\n    LABELS=\"$LABELS --filter label=$label\"\n  done\n\n  if [ -n \"$include\" ]; then\n    pattern=$(echo \"$include\" | sed 's/,/|/g')\n    containers=$(docker ps $LABELS| sed '1d' | awk '{print $NF}' | grep -v \"$benchcont\" | grep -E \"$pattern\")\n    images=$(docker images $LABELS| sed '1d' | grep -E \"$pattern\" | awk '{print $3}' | grep -v \"$benchimagecont\")\n  elif [ -n \"$exclude\" ]; then\n    pattern=$(echo \"$exclude\" | sed 's/,/|/g')\n    containers=$(docker ps $LABELS| sed '1d' | awk '{print $NF}' | grep -v \"$benchcont\" | grep -Ev \"$pattern\")\n    images=$(docker images $LABELS| sed '1d' | grep -Ev \"$pattern\" | awk '{print $3}' | grep -v \"$benchimagecont\")\n  else\n    containers=$(docker ps $LABELS| sed '1d' | awk '{print $NF}' | grep -v \"$benchcont\")\n    images=$(docker images -q $LABELS| grep -v \"$benchcont\")\n  fi\n\n  for test in $LIBEXEC/tests/*.sh; do\n    . \"$test\"\n  done\n\n  if [ -z \"$check\" ] && [ ! \"$checkexclude\" ]; then\n    # No options just run\n    cis\n  elif [ -z \"$check\" ]; then\n    # No check defined but excludes defined set to calls in cis() function\n    check=$(sed -ne \"/cis() {/,/}/{/{/d; /}/d; p;}\" functions/functions_lib.sh)\n  fi\n\n  for c in $(echo \"$check\" | sed \"s/,/ /g\"); do\n    if ! command -v \"$c\" 2>/dev/null 1>&2; then\n      echo \"Check \\\"$c\\\" doesn't seem to exist.\"\n      continue\n    fi\n    if [ -z \"$checkexclude\" ]; then\n      # No excludes just run the checks specified\n      \"$c\"\n    else\n      # Exludes specified and check exists\n      checkexcluded=\"$(echo \",$checkexclude\" | sed -e 's/^/\\^/g' -e 's/,/\\$|/g' -e 's/$/\\$/g')\"\n\n      if echo \"$c\" | grep -E \"$checkexcluded\" 2>/dev/null 1>&2; then\n        # Excluded\n        continue\n      elif echo \"$c\" | grep -vE 'check_[0-9]|check_[a-z]' 2>/dev/null 1>&2; then\n        # Function not a check, fill loop_checks with all check from function\n        loop_checks=\"$(sed -ne \"/$c() {/,/}/{/{/d; /}/d; p;}\" functions/functions_lib.sh)\"\n      else\n        # Just one check\n        loop_checks=\"$c\"\n      fi\n\n      for lc in $loop_checks; do\n        if echo \"$lc\" | grep -vE \"$checkexcluded\" 2>/dev/null 1>&2; then\n          # Not excluded\n          \"$lc\"\n        fi\n      done\n    fi\n  done\n\n  if [ -n \"${globalRemediation}\" ] && [ \"$printremediation\" = \"1\" ]; then\n    logit \"\\n\\n${bldylw}Section B - Remediation measures${txtrst}\"\n    logit \"${globalRemediation}\"\n  fi\n\n  logit \"\\n\\n${bldylw}Section C - Score${txtrst}\\n\"\n  info \"Checks: $totalChecks\"\n  info \"Score: $currentScore\\n\"\n\n  endjson \"$totalChecks\" \"$currentScore\" \"$(date +%s)\"\n}\n\nmain \"$@\"\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.5849609375,
          "content": "services:\n  docker-bench-security:\n      # use image if you have a dedicated build step:\n      #   docker build --rm -t docker-bench-security .\n      # image: docker-bench-security\n\n      # use build path to Dockerfile if docker-compose should build the image\n      build: .\n\n      cap_add:\n          - audit_control\n      labels:\n          - docker_bench_security\n      pid: host\n      stdin_open: true\n      tty: true\n      volumes:\n          - /var/lib:/var/lib:ro\n          - /var/run/docker.sock:/var/run/docker.sock:ro\n          - /usr/lib/systemd:/usr/lib/systemd:ro\n          - /etc:/etc:ro\n"
        },
        {
          "name": "functions",
          "type": "tree",
          "content": null
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}