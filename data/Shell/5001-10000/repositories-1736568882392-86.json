{
  "metadata": {
    "timestamp": 1736568882392,
    "page": 86,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "git-quick-stats/git-quick-stats",
      "stars": 6423,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.142578125,
          "content": "*.json\n*.db\n.DS_Store*\n._*\n.*.swp\n.*.swo\n.Spotlight*\n.Trash*\n**/*~\nnbproject/*\n/tests/test-git/.git/\n#/tests/test-git/*\n!/tests/test-git/resetgit\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.1337890625,
          "content": "Lukas Mestan <lukas.mestan@gmail.com> Lukáš Mešťan <arzzen@users.noreply.github.com> \nLukas Mestan <lukas.mestan@gmail.com> arzzen \n\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.7900390625,
          "content": "language: generic\n\nsudo: required\n\naddons:\n  apt:\n    packages:\n      - libcurl4-openssl-dev\n      - libelf-dev\n      - libdw-dev\n      - cmake\n\ninstall:\n  - git rev-parse HEAD\n\nscript: make test\n\nafter_success: |\n  wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz &&\n  tar xzf master.tar.gz &&\n  cd kcov-master &&\n  mkdir build &&\n  cd build &&\n  cmake .. &&\n  make &&\n  sudo make install &&\n  cd ../.. &&\n  rm -rf kcov-master &&\n  mkdir -p coverage &&\n  kcov coverage git-quick-stats suggestReviewers && bash <(curl -s https://codecov.io/bash) -cF suggestReviewers &&\n  kcov coverage git-quick-stats detailedGitStats && bash <(curl -s https://codecov.io/bash) -cF detailedGitStats &&\n  kcov coverage git-quick-stats commitsPerDay && bash <(curl -s https://codecov.io/bash) -cF commitsPerDay\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.8193359375,
          "content": "FROM alpine\n\n# Copy sources\nCOPY . /app\n\n# Install required packages & build git-quick-stats\nRUN     apk add --no-cache bash git make ncurses util-linux \\\n    &&  cd /app \\\n    &&  make install \\\n    &&  rm -rf /app \\\n    &&  apk del --no-cache make \\\n    &&  mkdir -p /usr/local/bin \\\n    &&  echo -en \"#!/bin/bash\\nset -e\\n[[ \\\"\\${1::1}\\\" == '-' ]] && set -- /usr/bin/git quick-stats \\\"\\$@\\\"\\nexec \\\"\\$@\\\"\" \\\n            > /usr/local/bin/docker-entrypoint \\\n    &&  chmod +x /usr/local/bin/docker-entrypoint\n\n# Declare all variables usables by git-quick-stats\nENV _GIT_SINCE= \\\n    _GIT_UNTIL= \\\n    _GIT_LIMIT= \\\n    _GIT_PATHSPEC= \\\n    _MENU_THEME=default \\\n    TERM=xterm-256color\n\nWORKDIR /git\nRUN git config --global --add safe.directory /git\nENTRYPOINT [ \"/usr/local/bin/docker-entrypoint\" ]\nCMD [ \"/usr/bin/git\", \"quick-stats\" ]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0498046875,
          "content": "MIT License\n\nCopyright (c) 2024 git-quick-stats.sh\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.91796875,
          "content": "PREFIX ?= /usr/local\n_INSTDIR ?= $(DESTDIR)$(PREFIX)\nBINDIR ?= $(_INSTDIR)/bin\nMANDIR ?= $(_INSTDIR)/share/man\nTASK_DONE = echo -e \"\\n✓ $@ done\\n\"\nSHELL := $(shell which bash)\n\n.PHONY: test\n\nall:\n\t@echo \"Usage:\"\n\t@echo \"  make install\"\n\t@echo \"  make reinstall\"\n\t@echo \"  make uninstall\"\n\t@echo \"  make test\"\n\nhelp:\n\t$(MAKE) all\n\t@$(TASK_DONE)\n\ninstall:\n\tinstall -d -m 0755 $(BINDIR)\n\tinstall -m 0755 git-quick-stats $(BINDIR)/git-quick-stats\n\t$(MAKE) man\n\t@$(TASK_DONE)\n\nuninstall:\n\trm -f $(BINDIR)/git-quick-stats\n\trm -f $(MANDIR)/man1/git-quick-stats.1\n\t@$(TASK_DONE)\n\nreinstall:\n\t@curl -sO https://raw.githubusercontent.com/arzzen/git-quick-stats/master/git-quick-stats\n\t@curl -sO https://raw.githubusercontent.com/arzzen/git-quick-stats/master/git-quick-stats.1\n\t$(MAKE) install\n\t@$(TASK_DONE)\n\nman:\n\tinstall -d -m 0755 $(MANDIR)/man1/\n\tinstall -m 0644 git-quick-stats.1 $(MANDIR)/man1/\n\ntest:\n\ttests/commands_test.sh\n\t@$(TASK_DONE)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.6552734375,
          "content": "# GIT quick statistics [![Tweet](https://img.shields.io/twitter/url/http/shields.io.svg?style=social)](https://twitter.com/intent/tweet?text=Simple%20and%20efficient%20way%20to%20access%20various%20statistics%20in%20git%20repository&url=https://github.com/arzzen/git-quick-stat&via=arzzen&hashtags=git,stats,tool,statistics,developers)\n\n[![Backers on Open Collective](https://opencollective.com/git-quick-stats/backers/badge.svg)](#backers) [![Sponsors on Open Collective](https://opencollective.com/git-quick-stats/sponsors/badge.svg)](#sponsors)  [![Homebrew package](https://repology.org/badge/version-for-repo/homebrew/git-quick-stats.svg)](https://formulae.brew.sh/formula/git-quick-stats#default)\n\n> `git-quick-stats` is a simple and efficient way to access various statistics in a git repository.\n>\n> Any git repository may contain tons of information about commits, contributors, and files. Extracting this information is not always trivial, mostly because there are a gadzillion options to a gadzillion git commands - I don't think there is a single person alive who knows them all. Probably not even [Linus Torvalds](https://github.com/torvalds) himself :).\n\n![mainMenuScreenshot](https://github.com/user-attachments/assets/05a20ff1-44f6-4e44-9d62-c2c089f9ff4e)\n\n## Table of Contents\n\n[**Screenshots**](#screenshots)\n\n[**Usage**](#usage)\n\n* [**Interactive**](#interactive)\n* [**Non-interactive**](#non-interactive)\n* [**Command-line arguments**](#command-line-arguments)\n* [**Git log since and until**](#git-log-since-and-until)\n* [**Git log limit**](#git-log-limit)\n* [**Git log options**](#git-log-options)\n* [**Git pathspec**](#git-pathspec)\n* [**Git merge view strategy**](#git-merge-view-strategy)\n* [**Color themes**](#color-themes)\n\n[**Installation**](#installation)\n\n* [**UNIX and Linux**](#unix-and-linux)\n* [**macOS**](#macos-homebrew)\n* [**Windows**](#windows)\n* [**Docker**](#docker)\n\n[**System requirements**](#system-requirements)\n\n* [**Dependencies**](#dependencies)\n\n[**FAQ**](#faq)\n\n[**Contribution**](#contribution)\n\n* [**Code reviews**](#code-reviews)\n* [**Some tips for good pull requests**](#some-tips-for-good-pull-requests)\n* [**Formatting**](#formatting)\n\n[**Tests**](#tests)\n\n[**Licensing**](#licensing)\n\n[**Contributors**](#contributors)\n\n* [**Backers**](#backers)\n* [**Sponsors**](#sponsors)\n\n## Screenshots\n\n![commitsByWeekdayScreenshot](https://github.com/user-attachments/assets/3a55f3ac-8801-4bbf-9b3a-92b53a64631e)\n\n![commitsByHourScreenshot](https://github.com/user-attachments/assets/d7de5280-8bb9-4391-9c6c-7e688f2df171)\n\n## Usage\n\n### Interactive\n\n`git-quick-stats` has a built-in interactive menu that can be executed as such:\n\n```bash\ngit-quick-stats\n```\n\nOr\n\n```bash\ngit quick-stats\n```\n\n### Non-interactive\n\nFor those who prefer to utilize command-line options, `git-quick-stats` also has a non-interactive mode supporting both short and long options:\n\n```bash\ngit-quick-stats <optional-command-to-execute-directly>\n```\n\nOr\n\n```bash\ngit quick-stats <optional-command-to-execute-directly>\n```\n\n### Command-line arguments\n\nPossible arguments in short and long form:\n\n```bash\nGENERATE OPTIONS\n    -T, --detailed-git-stats\n        give a detailed list of git stats\n    -R, --git-stats-by-branch\n        see detailed list of git stats by branch\n    -c, --changelogs\n        see changelogs\n    -L, --changelogs-by-author\n        see changelogs by author\n    -S, --my-daily-stats\n        see your current daily stats\n    -V, --csv-output-by-branch\n        output daily stats by branch in CSV format\n    -j, --json-output\n        save git log as a JSON formatted file to a specified area\n\nLIST OPTIONS\n    -b, --branch-tree\n        show an ASCII graph of the git repo branch history\n    -D, --branches-by-date\n        show branches by date\n    -C, --contributors\n        see a list of everyone who contributed to the repo\n    -n, --new-contributors\n        list everyone who made their first contribution since a specified date\n    -a, --commits-per-author\n        displays a list of commits per author\n    -d, --commits-per-day\n        displays a list of commits per day\n    -Y, --commits-by-year\n        displays a list of commits per year\n    -m, --commits-by-month\n        displays a list of commits per month\n    -w, --commits-by-weekday\n        displays a list of commits per weekday\n    -W, --commits-by-author-by-weekday\n        displays a list of commits per weekday by author\n    -o, --commits-by-hour\n        displays a list of commits per hour\n    -A, --commits-by-author-by-hour\n        displays a list of commits per hour by author\n    -z, --commits-by-timezone\n        displays a list of commits per timezone\n    -Z, --commits-by-author-by-timezone\n        displays a list of commits per timezone by author\n\nSUGGEST OPTIONS\n    -r, --suggest-reviewers\n        show the best people to contact to review code\n    -h, -?, --help\n        display this help text in the terminal\n```\n\n### Git log since and until\n\nYou can set the variables `_GIT_SINCE` and/or `_GIT_UNTIL` before running `git-quick-stats` to limit the git log. These work similar to git's built-in `--since` and `--until` log options.\n\n```bash\nexport _GIT_SINCE=\"2017-01-20\"\nexport _GIT_UNTIL=\"2017-01-22\"\n```\n\nOnce set, run `git quick-stats` as normal. Note that this affects all stats that parse the git log history until unset.\n\n### Git log limit\n\nYou can set variable `_GIT_LIMIT` for limited output. It will affect the \"changelogs\" and \"branch tree\" options. The default limit is `10`.\n\n```bash\nexport _GIT_LIMIT=20\n```\n\n### Git log options\n\nYou can set `_GIT_LOG_OPTIONS` for [git log options](https://git-scm.com/docs/git-log#_options):\n\n```bash\nexport _GIT_LOG_OPTIONS=\"--ignore-all-space --ignore-blank-lines\"\n```\n\n### Git pathspec\n\nYou can exclude a directory from the stats by using [pathspec](https://git-scm.com/docs/gitglossary#gitglossary-aiddefpathspecapathspec)\n\n```bash\nexport _GIT_PATHSPEC=':!directory'\n```\n\nYou can also exclude files from the stats. Note that it works with any alphanumeric, glob, or regex that git respects.\n\n```bash\nexport _GIT_PATHSPEC=':!package-lock.json'\n```\n\n### Git merge view strategy\n\nYou can set the variable `_GIT_MERGE_VIEW` to enable merge commits to be part of the stats by setting `_GIT_MERGE_VIEW` to `enable`. You can also choose to only show merge commits by setting `_GIT_MERGE_VIEW` to `exclusive`. Default is to not show merge commits. These work similar to git's built-in `--merges` and `--no-merges` log options.\n\n```bash\nexport _GIT_MERGE_VIEW=\"enable\"\nexport _GIT_MERGE_VIEW=\"exclusive\"\n```\n\n### Git branch\n\nYou can set the variable `_GIT_BRANCH` to set the branch of the stats. Works with commands `--git-stats-by-branch` and `--csv-output-by-branch`.\n\n```bash\nexport _GIT_BRANCH=\"master\"\n```\n\n### Color themes\n\nYou can change to the legacy color scheme by toggling the variable `_MENU_THEME` between `default` and `legacy`\n\n```bash\nexport _MENU_THEME=\"legacy\"\n```\n\n![legacyThemeScreenshot](https://github.com/user-attachments/assets/3b319c1a-827f-47b8-bbfa-b8b59a39deef)\n\n## Installation\n\n### Debian and Ubuntu\n\nIf you are on at least Debian Bullseye or Ubuntu Focal you can use apt for installation:\n\n```bash\napt install git-quick-stats\n```\n\n### UNIX and Linux\n\n```bash\ngit clone https://github.com/arzzen/git-quick-stats.git && cd git-quick-stats\nsudo make install\n```\n\nFor uninstalling, open up the cloned directory and run\n\n```bash\nsudo make uninstall\n```\n\nFor update/reinstall\n\n```bash\nsudo make reinstall\n```\n\n### macOS (homebrew)\n\nmacOS requires GNU coreutils to be installed and for the non \"g\" aliased\nversions to be exported to your path. The following is an example of how to\nperform this if you are using Homebrew as your package manager.\n\n```bash\nbrew install coreutils\nexport PATH=\"$HOMEBREW_PREFIX/opt/coreutils/libexec/gnubin:$PATH\"\n```\n\nFrom there, you can install via Homebrew as follows:\n\n```bash\nbrew install git-quick-stats\n```\n\nOr you can follow the UNIX and Linux instructions if you wish.\n\nIf you would like to default to using the GNU coreutils (recommended), then you\ncan add `export PATH=\"$HOMEBREW_PREFIX/opt/coreutils/libexec/gnubin:$PATH\"` to\nyour applicable `~/.bash_profile`, `~/.zprofile`, or other relevant profile\nbased on the shell of your choice.\n\n### Windows\n\nIf you are installing with Cygwin, use these scripts:\n\n* [installer](https://gist.github.com/arzzen/35e09866dfdadf2108b2420045739245)\n* [uninstaller](https://gist.github.com/arzzen/21c660014d0663b6c5710014714779d6)\n\nIf you are wishing to use this with WSL, follow the UNIX and Linux instructions.\n\n### Docker\n\nYou can use the Docker image provided:\n\n* Build: `docker build -t arzzen/git-quick-stats .`\n* Run interactive menu: `docker run --rm -it -v $(pwd):/git arzzen/git-quick-stats`\n* Docker pull command: `docker pull arzzen/git-quick-stats` [docker repository](https://hub.docker.com/r/arzzen/git-quick-stats)\n\n## System requirements\n\n* An OS with a Bash shell\n* Tools we use:\n\n```bash\nawk\nbasename\ncat\ncolumn\ndate\necho\ngit\ngrep\nhead\nprintf\nseq\nsort\ntput\ntr\nuniq\n```\n\n### Dependencies\n\n* [`bsdextrautils`](https://packages.debian.org/sid/bsdextrautils) `apt install bsdextrautils`\n* [`coreutils`](https://packages.debian.org/sid/coreutils) `apt install coreutils`\n* [`gawk`](https://packages.debian.org/sid/gawk) `apt install gawk`\n* [`grep`](https://packages.debian.org/sid/grep) `apt install grep`\n* [`ncurses-bin`](https://packages.debian.org/sid/ncurses-bin) `apt install ncurses-bin`\n\n## FAQ\n\n*Q:* I get some errors after run git-quick-stats in cygwin like `/usr/local/bin/git-quick-stats: line 2: $'\\r': command not found`\n\n*A:* You can run the dos2unix app in cygwin as follows: `/bin/dos2unix.exe /usr/local/bin/git-quick-stats`. This will convert the script from the CR-LF convention that Microsoft uses to the LF convention that UNIX, OS X, and Linux use. You should then should be able to run it as normal.\n\n*Q:* How they could be used in a project with many git projects and statistics would show a summary of all git projects?\n\n*A:* If you want to include submodule logs, you can try using the following: `export _GIT_LOG_OPTIONS=\"-p --submodule=log\"`\n(more info about [git log --submodule](https://git-scm.com/docs/git-log#Documentation/git-log.txt---submoduleltformatgt))\n\n## Contribution\n\nWant to contribute? Great! First, read this page.\n\n### Code reviews\n\nAll submissions, including submissions by project members, require review.</br>\nWe use GitHub pull requests for this purpose.\n\n### Some tips for good pull requests\n\n* Use our code </br>\n  When in doubt, try to stay true to the existing code of the project.\n* Write a descriptive commit message. What problem are you solving and what\n  are the consequences? Where and what did you test? Some good tips:\n  [here](http://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message)\n  and [here](https://www.kernel.org/doc/Documentation/SubmittingPatches).\n* If your PR consists of multiple commits which are successive improvements /\n  fixes to your first commit, consider squashing them into a single commit\n  (`git rebase -i`) such that your PR is a single commit on top of the current\n  HEAD. This make reviewing the code so much easier, and our history more\n  readable.\n\n### Formatting\n\nThis documentation is written using standard [markdown syntax](https://help.github.com/articles/markdown-basics/). Please submit your changes using the same syntax.\n\n## Tests\n\n[![codecov](https://codecov.io/gh/arzzen/git-quick-stats/branch/master/graph/badge.svg)](https://codecov.io/gh/arzzen/git-quick-stats)\n\n```bash\nmake test\n```\n\n## Licensing\n\nMIT see [LICENSE][] for the full license text.\n\n   [read this page]: http://github.com/arzzen/git-quick-stats/blob/master/.github/CONTRIBUTING.md\n   [landing page]: http://arzzen.github.io/git-quick-stats\n   [LICENSE]: https://github.com/arzzen/git-quick-stats/blob/master/LICENSE\n\n## Contributors\n\nThis project exists thanks to all the people who contribute.\n\n[![contributors](https://opencollective.com/git-quick-stats/contributors.svg?width=890&button=false)](https://github.com/arzzen/git-quick-stats/graphs/contributors)\n\n### Backers\n\nThank you to all our backers! 🙏 [[Become a backer](https://opencollective.com/git-quick-stats#backer)]\n\n[![backers](https://opencollective.com/git-quick-stats/backers.svg?width=890)](https://opencollective.com/git-quick-stats#backers)\n\n### Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/git-quick-stats#sponsor)]\n\n[![sponsor0](https://opencollective.com/git-quick-stats/sponsor/0/avatar.svg?v=1)](https://opencollective.com/git-quick-stats/sponsor/0/website)\n[![sponsor1](https://opencollective.com/git-quick-stats/sponsor/1/avatar.svg)](https://opencollective.com/git-quick-stats/sponsor/1/website)\n[![sponsor2](https://opencollective.com/git-quick-stats/sponsor/2/avatar.svg)](https://opencollective.com/git-quick-stats/sponsor/2/website)\n[![sponsor3](https://opencollective.com/git-quick-stats/sponsor/3/avatar.svg)](https://opencollective.com/git-quick-stats/sponsor/3/website)\n[![sponsor4](https://opencollective.com/git-quick-stats/sponsor/4/avatar.svg)](https://opencollective.com/git-quick-stats/sponsor/4/website)\n[![sponsor5](https://opencollective.com/git-quick-stats/sponsor/5/avatar.svg)](https://opencollective.com/git-quick-stats/sponsor/5/website)\n[![sponsor6](https://opencollective.com/git-quick-stats/sponsor/6/avatar.svg)](https://opencollective.com/git-quick-stats/sponsor/6/website)\n[![sponsor7](https://opencollective.com/git-quick-stats/sponsor/7/avatar.svg)](https://opencollective.com/git-quick-stats/sponsor/7/website)\n[![sponsor8](https://opencollective.com/git-quick-stats/sponsor/8/avatar.svg)](https://opencollective.com/git-quick-stats/sponsor/8/website)\n[![sponsor9](https://opencollective.com/git-quick-stats/sponsor/9/avatar.svg)](https://opencollective.com/git-quick-stats/sponsor/9/website)\n"
        },
        {
          "name": "git-quick-stats",
          "type": "blob",
          "size": 45.2314453125,
          "content": "#!/usr/bin/env bash\n#\n# Simple and efficient way to access various statistics in a git repository\n################################################################################\n# GLOBALS AND SHELL OPTIONS\n\n# NOTE: Should we look into allowing for a customized config file so that the\n#       user does not have to customize their shell's run command file or\n#       manually override these every time they want to change them?\nset -o nounset\nset -o errexit\n\n# Beginning git log date. Respects all git datetime formats\n# If $_GIT_SINCE is never set, look at the repository to find the first date.\n# NOTE: previously this put the date at the fixed GIT epoch (May 2005)\n_since=${_GIT_SINCE:-}\nif [[ -n \"${_since}\" ]]; then\n    _since=\"--since=$_since\"\nelse\n    _since=\"--since=$(git log --reverse --format='%ad' --date=iso | head -n1)\"\nfi\n\n# End of git log date. Respects all git datetime formats\n# If $_GIT_UNTIL is never set, choose the latest system\n# time from the user's current environment\n_until=${_GIT_UNTIL:-}\nif [[ -n \"${_until}\" ]]; then\n    _until=\"--until=$_until\"\nelse\n    _until=\"--until=$(date '+%a, %d %b %Y %H:%M:%S %Z')\"\nfi\n\n# Set files or directories to be excluded in stats\n# If $_GIT_PATHSPEC is not set, shift over the option completely\n_pathspec=${_GIT_PATHSPEC:-}\nif [[ -n \"${_pathspec}\" ]]; then\n    _pathspec=\"-- $_pathspec\"\nelse\n    _pathspec=\"--\"\nfi\n\n# Set merge commit view strategy. Default is to show no merge commits\n# Exclusive shows only merge commits\n# Enable shows regular commits together with normal commits\n_merges=${_GIT_MERGE_VIEW:-}\n_merges=$(echo \"$_merges\" | awk '{print tolower($0)}')\nif [[ \"${_merges}\" == \"exclusive\" ]]; then\n    _merges=\"--merges\"\nelif [[ \"${_merges}\" == \"enable\" ]]; then\n    _merges=\"\"\nelse\n    _merges=\"--no-merges\"\nfi\n\n# Limit git log output\n_limit=${_GIT_LIMIT:-}\nif [[ -n \"${_limit}\" ]]; then\n    _limit=$_limit\nelse\n    _limit=10\nfi\n\n# Log options\n_log_options=${_GIT_LOG_OPTIONS:-}\nif [[ -n \"${_log_options}\" ]]; then\n    _log_options=$_log_options\nelse\n    _log_options=\"\"\nfi\n\n# Default menu theme\n# Set the legacy theme by typing \"export _MENU_THEME=legacy\"\n_theme=\"${_MENU_THEME:=default}\"\n\n################################################################################\n# HELPER AND MENU FUNCTIONS\n\n################################################################################\n# DESC: Checks to make sure the user has the appropriate utilities installed\n# ARGS: None\n# OUTS: None\n################################################################################\nfunction checkUtils() {\n    readonly MSG=\"not found. Please make sure this is installed and in PATH.\"\n    readonly UTILS=\"awk basename cat column date echo git grep head printf seq \\\n                    sort tput tr uniq\"\n\n    for u in $UTILS\n    do\n        command -v \"$u\" >/dev/null 2>&1 || { echo >&2 \"$u ${MSG}\"; exit 1; }\n    done\n\n    # NOTE: The --version flag is only available in GNU date which is required\n    # for how the current date/time strings are used in this shell script.\n    # To fully support the legacy BSD date found in a default install within\n    # macOS and older distributions of Linux and Unix, a handful of helper\n    # functions can probably be created to handle every case of incompatibility\n    # between the two. Until that's implemented, it is probably best to warn\n    # the user that this will not work rather than having it silently bomb out\n    # during runtime.\n    if ! date --version >/dev/null 2>&1; then\n        echo \"ERROR: GNU date is required.\"\n        echo \"If you're on macOS, please install it using 'brew install coreutils'.\"\n        echo \"Ensure that your PATH is configured to use GNU date as well.\"\n        echo \"See the README.md for further details.\"\n        exit 1\n    fi\n}\n\n################################################################################\n# DESC: Prints a formatted message of the selected option by the user to stdout\n# ARGS: $* (required): String to print (usually provided by other functions)\n# OUTS: None\n################################################################################\nfunction optionPicked() {\n    local msg=${*:-\"Error: No message passed\"}\n\n    echo -e \"${msg}\\n\"\n}\n\n################################################################################\n# DESC: Help information printed to stdout during non-interactive mode\n# ARGS: None\n# OUTS: None\n################################################################################\nfunction usage() {\n    readonly PROGRAM=$(basename \"$0\")\n\n    echo \"\nNAME\n    ${PROGRAM} - Simple and efficient way to access various stats in a git repo\n\nSYNOPSIS\n    For non-interactive mode: ${PROGRAM} [OPTIONS]\n    For interactive mode: ${PROGRAM}\n\nDESCRIPTION\n    Any git repository contains tons of information about commits, contributors,\n    and files. Extracting this information is not always trivial, mostly because\n    of a gadzillion options to a gadzillion git commands.\n\n    This program allows you to see detailed information about a git repository.\n\nGENERATE OPTIONS\n    -T, --detailed-git-stats\n        give a detailed list of git stats\n    -R, --git-stats-by-branch\n        see detailed list of git stats by branch\n    -c, --changelogs\n        see changelogs\n    -L, --changelogs-by-author\n        see changelogs by author\n    -S, --my-daily-stats\n        see your current daily stats\n    -V, --csv-output-by-branch\n        output daily stats by branch in CSV format\n    -j, --json-output\n        save git log as a JSON formatted file to a specified area\n\nLIST OPTIONS\n    -b, --branch-tree\n        show an ASCII graph of the git repo branch history\n    -D, --branches-by-date\n        show branches by date\n    -C, --contributors\n        see a list of everyone who contributed to the repo\n    -n, --new-contributors\n        list everyone who made their first contribution since a specified date\n    -a, --commits-per-author\n        displays a list of commits per author\n    -d, --commits-per-day\n        displays a list of commits per day\n    -m, --commits-by-month\n        displays a list of commits per month\n    -Y, --commits-by-year\n        displays a list of commits per year\n    -w, --commits-by-weekday\n        displays a list of commits per weekday\n    -W, --commits-by-author-by-weekday\n        displays a list of commits per weekday by author\n    -o, --commits-by-hour\n        displays a list of commits per hour\n    -A, --commits-by-author-by-hour\n        displays a list of commits per hour by author\n    -z, --commits-by-timezone\n        displays a list of commits per timezone\n    -Z, --commits-by-author-by-timezone\n        displays a list of commits per timezone by author\n\nSUGGEST OPTIONS\n    -r, --suggest-reviewers\n        show the best people to contact to review code\n    -h, -?, --help\n        display this help text in the terminal\n\nADDITIONAL USAGE\n    You can set _GIT_SINCE and _GIT_UNTIL to limit the git time log\n        ex: export _GIT_SINCE=\\\"2017-01-20\\\"\n    You can set _GIT_LIMIT for limited output log\n        ex: export _GIT_LIMIT=20\n    You can set _GIT_LOG_OPTIONS for git log options\n        ex: export _GIT_LOG_OPTIONS=\\\"--ignore-all-space --ignore-blank-lines\\\"\n    You can exclude directories or files from the stats by using pathspec\n        ex: export _GIT_PATHSPEC=':!pattern'\n    You can set _GIT_MERGE_VIEW to view merge commits with normal commits\n        ex: export _GIT_MERGE_VIEW=enable\n    You can also set _GIT_MERGE_VIEW to only show merge commits\n        ex: export _GIT_MERGE_VIEW=exclusive\n    You can set _MENU_THEME to display the legacy color scheme\n        ex: export _MENU_THEME=legacy\n    You can set _GIT_BRANCH to set the branch of the stats\n        ex: export _GIT_BRANCH=master\"\n}\n\n################################################################################\n# DESC: Displays the interactive menu and saves the user supplied option\n# ARGS: None\n# OUTS: $opt: Option selected by the user based on menu choice\n################################################################################\nfunction showMenu() {\n    # These are \"global\" and can be overriden from users if so desired\n    NORMAL=$(tput sgr0)\n    CYAN=$(tput setaf 6)\n    BOLD=$(tput bold)\n    RED=$(tput setaf 1)\n    YELLOW=$(tput setaf 3)\n    WHITE=$(tput setaf 7)\n    TITLES=\"\"\n    TEXT=\"\"\n    NUMS=\"\"\n    HELP_TXT=\"\"\n    EXIT_TXT=\"\"\n\n    # Adjustable color menu option\n    if [[ \"${_theme}\" == \"legacy\" ]]; then\n        TITLES=\"${BOLD}${RED}\"\n        TEXT=\"${NORMAL}${CYAN}\"\n        NUMS=\"${BOLD}${YELLOW}\"\n        HELP_TXT=\"${NORMAL}${YELLOW}\"\n        EXIT_TXT=\"${BOLD}${RED}\"\n    else\n        TITLES=\"${BOLD}${CYAN}\"\n        TEXT=\"${NORMAL}${WHITE}\"\n        NUMS=\"${NORMAL}${BOLD}${WHITE}\"\n        HELP_TXT=\"${NORMAL}${CYAN}\"\n        EXIT_TXT=\"${BOLD}${CYAN}\"\n    fi\n\n    printf %b \"\\\\n${TITLES} Generate:${NORMAL}\\\\n\"\n    printf %b \"${NUMS}    1)${TEXT} Contribution stats (by author)\\\\n\"\n    printf %b \"${NUMS}    2)${TEXT} Contribution stats (by author) on a specific branch\\\\n\"\n    printf %b \"${NUMS}    3)${TEXT} Git changelogs (last $_limit days)\\\\n\"\n    printf %b \"${NUMS}    4)${TEXT} Git changelogs by author\\\\n\"\n    printf %b \"${NUMS}    5)${TEXT} My daily status\\\\n\"\n    printf %b \"${NUMS}    6)${TEXT} Output daily stats by branch in CSV format\\\\n\"\n    printf %b \"${NUMS}    7)${TEXT} Save git log output in JSON format\\\\n\"\n    printf %b \"\\\\n${TITLES} List:\\\\n\"\n    printf %b \"${NUMS}    8)${TEXT} Branch tree view (last $_limit)\\\\n\"\n    printf %b \"${NUMS}    9)${TEXT} All branches (sorted by most recent commit)\\\\n\"\n    printf %b \"${NUMS}   10)${TEXT} All contributors (sorted by name)\\\\n\"\n    printf %b \"${NUMS}   11)${TEXT} New contributors (sorted by email)\\\\n\"\n    printf %b \"${NUMS}   12)${TEXT} Git commits per author\\\\n\"\n    printf %b \"${NUMS}   13)${TEXT} Git commits per date\\\\n\"\n    printf %b \"${NUMS}   14)${TEXT} Git commits per month\\\\n\"\n    printf %b \"${NUMS}   15)${TEXT} Git commits per year\\\\n\"\n    printf %b \"${NUMS}   16)${TEXT} Git commits per weekday\\\\n\"\n    printf %b \"${NUMS}   17)${TEXT} Git commits per weekday by author\\\\n\"\n    printf %b \"${NUMS}   18)${TEXT} Git commits per hour\\\\n\"\n    printf %b \"${NUMS}   19)${TEXT} Git commits per hour by author\\\\n\"\n    printf %b \"${NUMS}   20)${TEXT} Git commits per timezone\\\\n\"\n    printf %b \"${NUMS}   21)${TEXT} Git commits per timezone by author\\\\n\"\n    printf %b \"\\\\n${TITLES} Suggest:\\\\n\"\n    printf %b \"${NUMS}   22)${TEXT} Code reviewers (based on git history)\\\\n\"\n    printf %b \"\\\\n${HELP_TXT}Please enter a menu option or ${EXIT_TXT}press Enter to exit.\\\\n\"\n    printf %b \"${TEXT}> ${NORMAL}\"\n    read -r opt\n}\n\n################################################################################\n# FUNCTIONS FOR GENERATING STATS\n\n################################################################################\n# DESC: Shows detailed contribution stats per author by parsing every commit in\n#       the repo and outputting their contribution stats\n# ARGS: $branch (optional): Users can specify an alternative branch instead of\n#                           the current default one\n# OUTS: None\n################################################################################\nfunction detailedGitStats() {\n    local is_branch_existing=false\n    local branch=\"${1:-}\"\n    local _branch=\"\"\n\n    # Check if requesting for a specific branch\n    if [[ -n \"${branch}\" ]]; then\n        # Check if branch exist\n        if [[ $(git show-ref refs/heads/\"${branch}\") ]] ; then\n            is_branch_existing=true\n            _branch=\"${branch}\"\n        else\n            is_branch_existing=false\n            _branch=\"\"\n        fi\n    fi\n\n    # Prompt message\n    if [[ \"${is_branch_existing}\" && -n \"${_branch}\" ]]; then\n        optionPicked \"Contribution stats (by author) on ${_branch} branch:\"\n    elif [[ -n \"${branch}\" && -z \"${_branch}\" ]]; then\n        optionPicked \"Branch ${branch} does not exist.\"\n        optionPicked \"Contribution stats (by author) on the current branch:\"\n    else\n        optionPicked \"Contribution stats (by author) on the current branch:\"\n    fi\n\n    git -c log.showSignature=false log ${_branch} --use-mailmap $_merges --numstat \\\n        --pretty=\"format:commit %H%nAuthor: %aN <%aE>%nDate:   %ad%n%n%w(0,4,4)%B%n\" \\\n        \"$_since\" \"$_until\" $_log_options $_pathspec | LC_ALL=C awk '\n        function printStats(author) {\n        printf \"\\t%s:\\n\", author\n\n        if(more[\"total\"] > 0) {\n            printf \"\\t  insertions:    %d\\t(%.0f%%)\\n\", more[author], \\\n                (more[author] / more[\"total\"] * 100)\n        } else {\n            printf \"\\t  insertions:    %d\\t(%.0f%%)\\n\", 0, 0\n        }\n\n        if(less[\"total\"] > 0) {\n            printf \"\\t  deletions:     %d\\t(%.0f%%)\\n\", less[author], \\\n                (less[author] / less[\"total\"] * 100)\n        } else {\n            printf \"\\t  deletions:     %d\\t(%.0f%%)\\n\", 0, 0\n        }\n\n        if(file[\"total\"] > 0) {\n            printf \"\\t  files:         %d\\t(%.0f%%)\\n\", file[author], \\\n                (file[author] / file[\"total\"] * 100)\n        }\n\n        if(commits[\"total\"] > 0) {\n            printf \"\\t  commits:       %d\\t(%.0f%%)\\n\", commits[author], \\\n                (commits[author] / commits[\"total\"] * 100)\n        }\n\n        if (first[author] != \"\") {\n            if ( ((more[\"total\"] + less[\"total\"]) * 100) > 0) {\n                printf \"\\t  lines changed: %d\\t\", more[author] + less[author]\n                printf \"(%.0f%%)\\n\", ((more[author] + less[author]) / \\\n                                      (more[\"total\"] + less[\"total\"]) * 100)\n            }\n            else {\n                printf \"\\t  lines changed: %d\\t(0%%)\\n\", (more[author] + less[author])\n            }\n            printf \"\\t  first commit:  %s\\n\", first[author]\n            printf \"\\t  last commit:   %s\\n\", last[author]\n        }\n\n        printf \"\\n\"\n        }\n\n        /^Author:/ {\n        $1 = \"\"\n        author = $0\n        commits[author] += 1\n        commits[\"total\"] += 1\n        }\n\n        /^Date:/ {\n        $1=\"\";\n        first[author] = substr($0, 2)\n        if(last[author] == \"\" ) { last[author] = first[author] }\n        }\n\n        /^[0-9]/ {\n        more[author] += $1\n        less[author] += $2\n\n        file[author] += 1\n        more[\"total\"]  += $1\n        less[\"total\"]  += $2\n        file[\"total\"]  += 1\n        }\n\n        END {\n        for (author in commits) {\n            if (author != \"total\") {\n            printStats(author)\n            }\n        }\n        printStats(\"total\")\n        }'\n}\n\n################################################################################\n# DESC: Displays the latest commit history in an easy to read format by date\n# ARGS: $author (optional): Can focus on a single author. Default is all authors\n# OUTS: None\n################################################################################\nfunction changelogs() {\n    local _author=\"\"\n    local commits=\"\"\n    local author=\"${1:-}\"\n    local next=$(date +%F)\n\n    if [[ -z \"${author}\" ]]; then\n        optionPicked \"Git changelogs:\"\n        _author=\"--author=**\"\n    else\n        optionPicked \"Git changelogs for author '${author}':\"\n        _author=\"--author=${author}\"\n    fi\n\n    git -c log.showSignature=false log \\\n        --use-mailmap \\\n        $_merges \\\n        --format=\"%cd\" \\\n        --date=short \"${_author}\" \"$_since\" \"$_until\" $_log_options $_pathspec \\\n        | sort -u -r | head -n $_limit \\\n        | while read DATE; do\n            commits=$(git -c log.showSignature=false log \\\n                --use-mailmap $_merges \\\n                --format=\" * %s (%aN)\" \"${_author}\" \\\n                --since=\"$DATE 00:00:00\" --until=\"$DATE 23:59:59\" \\\n                --date-order)\n\n            if [[ -n \"$commits\" ]]; then\n                echo -e \"\\n[$DATE]\"\n                echo \"$commits\"\n            else\n                echo \"No commits found on $DATE\"\n            fi\n            next=$DATE\n        done\n}\n\n################################################################################\n# DESC: Shows git shortstats on the current user's changes for current day\n# ARGS: None\n# OUTS: None\n################################################################################\nfunction myDailyStats() {\n    optionPicked \"My daily status:\"\n    git diff --shortstat '@{0 day ago}' | sort -nr | tr ',' '\\n' | LC_ALL=C awk '\n    { args[NR] = $0; }\n    END {\n      for (i = 1; i <= NR; ++i) {\n        printf \"\\t%s\\n\", args[i]\n      }\n    }'\n\n    echo -e \"\\t\" $(git -c log.showSignature=false log --use-mailmap \\\n                       --author=\"$(git config user.name)\" $_merges \\\n                       --since=$(date \"+%Y-%m-%dT00:00:00\") \\\n                       --until=$(date \"+%Y-%m-%dT23:59:59\") --reverse $_log_options \\\n                       | grep -cE \"commit [a-f0-9]{40}\") \"commits\"\n}\n\n################################################################################\n# DESC: Shows detailed contribution stats per author by parsing every commit in\n#       the repo and outputting their contribution stats\n# ARGS: $branch (optional): Users can specify an alternative branch instead of\n#                           the current default one\n# OUTS: None\n################################################################################\nfunction csvOutput() {\n    # TODO: Look into if we can refactor this to work as an option for the user\n    #       so they can choose between JSON or CSV or possibly other formats\n    #       like XML, YAML, and so on.\n    # TODO: Look into allowing the user to adjust the separator value\n    local is_branch_existing=false\n    local branch=\"${1:-}\"\n    local _branch=\"\"\n\n    # Check if requesting for a specific branch\n    if [[ -n \"${branch}\" ]]; then\n        # Check if branch exist\n        if [[ $(git show-ref refs/heads/\"${branch}\") ]] ; then\n            is_branch_existing=true\n            _branch=\"${branch}\"\n        else\n            is_branch_existing=false\n            _branch=\"\"\n        fi\n    fi\n\n    printf \"author,insertions,insertions_per,deletions,deletions_per,files,\"\n    printf \"files_per,commits,commits_per,lines_changed,lines_changed_per\\n\"\n    git -c log.showSignature=false log ${_branch} --use-mailmap $_merges --numstat \\\n        --pretty=\"format:commit %H%nAuthor: %aN <%aE>%nDate:   %ad%n%n%w(0,4,4)%B%n\" \\\n        \"$_since\" \"$_until\" $_log_options $_pathspec | LC_ALL=C awk '\n        function printStats(author) {\n        printf \"%s,\", author\n        if(more[\"total\"] > 0) {\n            printf \"%d,%.0f%%,\", more[author], \\\n                (more[author] / more[\"total\"] * 100)\n        } else {\n            printf \"0,0%%,\"\n        }\n\n        if(less[\"total\"] > 0) {\n            printf \"%d,%.0f%%,\", less[author], \\\n                (less[author] / less[\"total\"] * 100)\n        } else {\n            printf \"0,0%%,\"\n        }\n\n        if(file[\"total\"] > 0) {\n            printf \"%d,%.0f%%,\", file[author], \\\n                (file[author] / file[\"total\"] * 100)\n        }\n\n        if(commits[\"total\"] > 0) {\n            printf \"%d,%.0f%%,\", commits[author], \\\n                (commits[author] / commits[\"total\"] * 100)\n        }\n\n        if (first[author] != \"\") {\n            if ( ((more[\"total\"] + less[\"total\"]) * 100) > 0) {\n                printf \"%d,\", more[author] + less[author]\n                printf \"%.0f%%\\n\", ((more[author] + less[author]) / \\\n                                      (more[\"total\"] + less[\"total\"]) * 100)\n            }\n        }\n        }\n\n        /^Author:/ {\n        $1 = \"\"\n        author = $0\n        commits[author] += 1\n        commits[\"total\"] += 1\n        }\n\n        /^Date:/ {\n        $1=\"\";\n        first[author] = substr($0, 2)\n        if(last[author] == \"\" ) { last[author] = first[author] }\n        }\n\n        /^[0-9]/ {\n        more[author] += $1\n        less[author] += $2\n\n        file[author] += 1\n        more[\"total\"]  += $1\n        less[\"total\"]  += $2\n        file[\"total\"]  += 1\n        }\n\n        END {\n        for (author in commits) {\n            if (author != \"total\") {\n            printStats(author)\n            }\n        }\n\n        }'\n}\n\n################################################################################\n# DESC: Transforms special multiline string sequence to a JSON string property.\n#       {propTag}{optional white space indentation}{property}\n#       {line1}\n#       {line2}\n#       ...\n#       {propTag}, (the final comma is optional)\n#       Generates: \"{property}\": \"{line1}\\n{line2}\\n...\",\n#       The final comma is added if present after the ending tag.\n#       Caveat: the content should not contain {propTag} at the\n#       beginning of a line.\n# ARGS: $propTag (optional) : tag at the beginning of the line to mark the\n#       beginning and the end of a special sequence. It must not contain\n#       regular expression special characters, i.e. use [a-zA-Z0-9_]+.\n#       This tag should be sufficiently random to avoid collision with\n#       the actual content. Defaults to __JSONPROP__.\n# OUTS: content with JSON string properties\n################################################################################\nfunction toJsonProp() {\n    local propTag=\"${1:-__JSONPROP__}\"\n    sed -n -E '\n# transforms the special sequence.\n/^'\"$propTag\"'[^\\r]/ {\n    # remove the special prefix, keep the property name followed by :\n    s/^'\"$propTag\"'([^\\r]+)\\r?$/\\1:/g;\n    # hold in buffer, get the next line.\n    h;n\n    # loop\n    b eos\n    :eos {\n        # add in hold buffer and loop while the string is not finished.\n        /^'\"$propTag\"',?\\r?$/ ! { H; n; b eos; }\n        # end of the string, flip buffer to current pattern.\n\t\t# keeps the comma if any, or a space as an empty placeholder.\n\t\t/,\\r?$/ ! { x; s/\\r?$/ / }\n\t\t/,\\r?$/   { x; s/\\r?$/,/ }\n    }\n    # replace special JSON string chars.\n    s/[\"\\\\]/\\\\&/g;\n    # replace control chars, carriage returns, line feeds, tabulations, etc.\n    s/\\x00/\\\\u0000/g; s/\\x01/\\\\u0001/g; s/\\x02/\\\\u0002/g; s/\\x03/\\\\u0003/g;\n    s/\\x04/\\\\u0004/g; s/\\x05/\\\\u0005/g; s/\\x06/\\\\u0006/g; s/\\x07/\\\\u0007/g;\n    s/\\x08/\\\\b/g;     s/\\x09/\\\\t/g;     s/\\x0a/\\\\n/g;     s/\\x0b/\\\\u000b/g;\n    s/\\x0c/\\\\f/g;     s/\\x0d/\\\\r/g;     s/\\x0e/\\\\u000e/g; s/\\x0f/\\\\u000f/g;\n    s/\\x10/\\\\u0010/g; s/\\x11/\\\\u0011/g; s/\\x12/\\\\u0012/g; s/\\x13/\\\\u0013/g;\n    s/\\x14/\\\\u0014/g; s/\\x15/\\\\u0015/g; s/\\x16/\\\\u0016/g; s/\\x17/\\\\u0017/g;\n    s/\\x18/\\\\u0018/g; s/\\x19/\\\\u0019/g; s/\\x1a/\\\\u001a/g; s/\\x1b/\\\\u001b/g;\n    s/\\x1c/\\\\u001c/g; s/\\x1d/\\\\u001d/g; s/\\x1e/\\\\u001e/g; s/\\x1f/\\\\u001f/g;\n    s/\\x7f/\\\\u007f/g;\n\n    # format the JSON property name, optionally indented, open quote for value.\n    s/^(\\s*)([^:]+):\\\\n/\\1\"\\2\": \"/g;\n    # handle the final comma if present, and close the quote for value.\n    /,$/ { s/,$/\",/g; }\n    # otherwise remove final space placeholder and close the quote for value.\n    /,$/ ! { s/ $/\"/g; }\n}\n# print lines.\np'\n}\n\n################################################################################\n# DESC: Saves the git log output in a JSON format\n# ARGS: $json_path (required): Path to where the file is saved\n# OUTS: A JSON formatted file\n################################################################################\nfunction jsonOutput() {\n    optionPicked \"Output log saved to file at: ${json_path}/output.json\"\n    local propTag=\"__JSONPROP${RANDOM}__\"\n    git -c log.showSignature=false log --use-mailmap $_merges \"$_since\" \"$_until\" $_log_options \\\n        --pretty=format:'{%n  \"commit\": \"%H\",%n  \"abbreviated_commit\": \"%h\",%n  \"tree\": \"%T\",%n'\\\n'  \"abbreviated_tree\": \"%t\",%n  \"parent\": \"%P\",%n  \"abbreviated_parent\": \"%p\",%n  \"refs\": \"%D\",%n  \"encoding\": \"%e\",%n'\\\n\"$propTag\"'  subject%n%s%n'\"$propTag\"',%n  \"sanitized_subject_line\": \"%f\",%n'\\\n\"$propTag\"'  body%n%b%n'\"$propTag\"',%n'\\\n\"$propTag\"'  commit_notes%n%N%n'\"$propTag\"',%n  \"author\": {%n'\\\n\"$propTag\"'    name%n%aN%n'\"$propTag\"',%n'\\\n\"$propTag\"'    email%n%aE%n'\"$propTag\"',%n'\\\n'    \"date\": \"%aD\"%n  },%n  \"commiter\": {%n'\\\n\"$propTag\"'    name%n%cN%n'\"$propTag\"',%n'\\\n\"$propTag\"'    email%n%cE%n'\"$propTag\"',%n'\\\n'    \"date\": \"%cD\"%n  }%n},' \\\n        | toJsonProp \"$propTag\" \\\n        | sed \"$ s/,$//\" \\\n        | sed ':a;N;$!ba;s/\\r\\n\\([^{]\\)/\\\\n\\1/g' \\\n        | awk 'BEGIN { print(\"[\") } { print($0) } END { print(\"]\") }' \\\n        > \"${json_path}/output.json\"\n}\n\n################################################################################\n# FUNCTIONS FOR LISTING STATS\n\n################################################################################\n# DESC: Shows an abbreviated ASCII graph based off of commit history\n# ARGS: None\n# OUTS: None\n################################################################################\nfunction branchTree() {\n    optionPicked \"Branching tree view:\"\n    # TODO: Can we shorten this pretty format line? Quick experiment shows that\n    #       it does not properly respect \\ and interprets them literally.\n    git -c log.showSignature=false log --use-mailmap --graph --abbrev-commit \\\n        \"$_since\" \"$_until\" --decorate \\\n        --format=format:'--+ Commit:  %h %n  | Date:    %aD (%ar) %n''  | Message: %s %d %n''  + Author:  %aN %n' \\\n        --all $_log_options | head -n $((_limit*5))\n}\n\n################################################################################\n# DESC: Lists all branches sorted by their most recent commit\n# ARGS: None\n# OUTS: None\n################################################################################\nfunction branchesByDate() {\n    optionPicked \"All branches (sorted by most recent commit):\"\n    git for-each-ref --sort=committerdate refs/heads/ \\\n        --format='[%(authordate:relative)] %(authorname) %(refname:short)' | cat -n\n}\n\n################################################################################\n# DESC: Lists all contributors to a repo sorted by alphabetical order\n# ARGS: None\n# OUTS: None\n################################################################################\nfunction contributors() {\n    optionPicked \"All contributors (sorted by name):\"\n    git -c log.showSignature=false log --use-mailmap $_merges \"$_since\" \"$_until\" \\\n        --format='%aN' $_log_options $_pathspec | sort -u | cat -n\n}\n\n################################################################################\n# DESC: Lists all new contributors to a repo since the specified time\n# ARGS: $newDate (required): Cutoff date for being considered \"new\"\n# OUTS: None\n################################################################################\nfunction newContributors() {\n    optionPicked \"New contributors since $newDate:\"\n    local contributors=$(git -c log.showSignature=false log --use-mailmap $_merges \\\n                             \"$_since\" \"$_until\" --format='%aE' $_log_options \\\n                             $_pathspec | sort -u)\n    for c in $contributors; do\n        local firstCommit=$(git -c log.showSignature=false log --author=\"$c\" \\\n                         --reverse --use-mailmap $_merges \"$_since\" \"$_until\" \\\n                         --format='%at' $_log_options $_pathspec | head -n 1)\n        if [[ $firstCommit -ge $(date -d \"$newDate\" +%s) ]]; then\n           echo \"$c\"\n        fi\n    done\n}\n\n################################################################################\n# DESC: Displays the number of commits and percentage contributed to the repo\n#       per author and sorts them by contribution percentage\n# ARGS: None\n# OUTS: None\n################################################################################\nfunction commitsPerAuthor()  {\n    optionPicked \"Git commits per author:\"\n    local authorCommits=$(git -c log.showSignature=false log --use-mailmap \\\n                          $_merges \"$_since\" \"$_until\" $_log_options \\\n                          | grep -i Author: | cut -c9-)\n    local coAuthorCommits=$(git -c log.showSignature=false log --use-mailmap \\\n                            $_merges \"$_since\" \"$_until\" $_log_options \\\n                            | grep -i Co-Authored-by: | cut -c21-)\n\n    if [[ -z \"${coAuthorCommits}\" ]]; then\n        allCommits=\"${authorCommits}\"\n    else\n        allCommits=\"${authorCommits}\\n${coAuthorCommits}\"\n    fi\n\n    echo -e \"${allCommits}\" | awk '\n      { $NF=\"\"; author[NR] = $0 }\n      END {\n        for(i in author) {\n          sum[author[i]]++; name[author[i]] = author[i]; total++;\n        }\n        for(i in sum) {\n          printf \"\\t%d:%s:%2.1f%%\\n\", sum[i], name[i], (100 * sum[i] / total)\n        }\n      }' | sort -n -r | column -t -s:\n}\n\n################################################################################\n# DESC: Shows the number of commits that were committed per date recorded in the\n#       repo's log history\n# ARGS: None\n# OUTS: None\n################################################################################\nfunction commitsPerDay() {\n    optionPicked \"Git commits per date:\";\n    git -c log.showSignature=false log --use-mailmap $_merges \"$_since\" \"$_until\" \\\n        --date=short --format='%ad' $_log_options $_pathspec | sort | uniq -c\n}\n\n################################################################################\n# DESC: Convert a timestamp to a date string to handle git's date formats\n# ARGS: $1: Timestamp\n# OUTS: Echoes a four-digit year\n################################################################################\nfunction parse_year() {\n    local date_str=\"$1\"\n    local year\n    local timestamp\n    local default_git_date_regex\n\n    # Handle the raw UNIX timestamp format i.e. 1697375696 +0000\n    if [[ \"$date_str\" =~ ^[0-9]+(\\ [+-][0-9]{4})?$ ]]; then\n        timestamp=$(echo \"$date_str\" | awk '{print $1}')\n        year=$(date -d \"@$timestamp\" '+%Y' 2>/dev/null)\n    else\n        # Default case can get funky. We need to create a clever regex to\n        # handle the default case which is like Mon Oct 15 12:34:56 2023 +0000\n        # Let's make this explicit for future devs to follow along.\n        default_git_date_regex='^' # Start from the beginning of the string\n        default_git_date_regex+='[A-Za-z]{3}\\ ' # Day abbrev\n        default_git_date_regex+='[A-Za-z]{3}\\ ' # Month abbrev\n        default_git_date_regex+='[0-9]{1,2}\\ ' # Day of the month\n        default_git_date_regex+='[0-9]{2}:[0-9]{2}:[0-9]{2}\\ ' # Time HH:MM:SS\n        default_git_date_regex+='[0-9]{4}\\ ' # Year\n        default_git_date_regex+='[+-][0-9]{4}$' # Timezone offset\n\n        if [[ \"$date_str\" =~ $default_git_date_regex ]]; then\n            # Move the year before the time to match a format that Date can parse\n            date_str=$(echo \"$date_str\" | awk '{print $1, $2, $3, $5, $4, $6}')\n        elif [[ \"$date_str\" =~ ^[0-9]{1,2}/[0-9]{1,2}/[0-9]{2,4} ]]; then\n            # Handle DD/MM/YYYY format\n            date_str=$(echo \"$date_str\" | awk -F'/' '{print $2\"/\"$1\"/\"$3}')\n        fi\n        # Extract the final date\n        year=$(date -d \"$date_str\" '+%Y' 2>/dev/null)\n    fi\n\n    echo \"$year\"\n}\n\n################################################################################\n# DESC: Displays a horizontal bar graph based on total commits per year\n# ARGS: None\n# OUTS: None\n################################################################################\nfunction commitsByYear() {\n    optionPicked \"Git commits by year:\"\n    local year startYear endYear __since __until\n\n    # Extract the date strings from $_since and $_until\n    since_date=\"${_since#--since=}\"\n    until_date=\"${_until#--until=}\"\n\n    # Grab the four digit year from $_since and $_until\n    startYear=$(parse_year \"$since_date\")\n    endYear=$(parse_year \"$until_date\")\n    \n    echo -e \"\\tyear\\tsum\"\n    # Add time strings to make these a touch more robust\n    for year in $(seq \"$startYear\" \"$endYear\"); do\n        if [[ \"$year\" = \"$startYear\" ]]; then\n            __since=$_since\n            __until=\"--until=$year-12-31 23:59:59\"\n        elif [[ \"$year\" = \"$endYear\" ]]; then\n            __since=\"--since=$year-01-01 00:00:00\"\n            __until=$_until\n        else\n            __since=\"--since=$year-01-01 00:00:00\"\n            __until=\"--until=$year-12-31 23:59:59\"\n        fi\n        \n        # Count commits directly using git rev-list instead of git log\n        commit_count=$(\n            git rev-list --count $_merges \\\n            \"$__since\" \"$__until\" HEAD $_log_options\n        )\n        echo -e \"\\t$year\\t$commit_count\"\n        # TODO: The bar graph can get funky when there are only a handful of\n        # commits. We can set a max length to try to fix this, but this is a\n        # bit of a problem across all the bar graphs.\n    done | awk '{\n        count[$1] = $2\n        total += $2\n    }\n    END{\n        for (year in count) {\n            s=\"|\";\n            if (total > 0) {\n                percent = ((count[year] / total) * 100) / 1.25;\n                for (i = 1; i <= percent; ++i) {\n                    s=s\"█\"\n                }\n                printf( \"\\t%s\\t%-0s\\t%s\\n\", year, count[year], s );\n            }\n        }\n    }' | sort\n}\n\n################################################################################\n# DESC: Displays a horizontal bar graph based on total commits per month\n# ARGS: None\n# OUTS: None\n################################################################################\nfunction commitsByMonth() {\n    optionPicked \"Git commits by month:\"\n    echo -e \"\\tmonth\\tsum\"\n    local i\n    for i in Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n    do\n        echo -en \"\\t$i\\t\"\n        git -c log.showSignature=false shortlog -n $_merges --format='%ad %s' \\\n            \"$_since\" \"$_until\" $_log_options |\n            grep -cE \" \\w\\w\\w $i [0-9]{1,2} \" || continue\n    done | awk '{\n        count[$1] = $2\n        total += $2\n    }\n    END{\n        for (month in count) {\n            s=\"|\";\n            if (total > 0) {\n                percent = ((count[month] / total) * 100) / 1.25;\n                for (i = 1; i <= percent; ++i) {\n                    s=s\"█\"\n                }\n                printf( \"\\t%s\\t%-0s\\t%s\\n\", month, count[month], s );\n            }\n        }\n    }' | LC_TIME=\"en_EN.UTF-8\" sort -M\n}\n\n################################################################################\n# DESC: Displays a horizontal bar graph based on total commits per weekday\n# ARGS: None\n# OUTS: None\n################################################################################\nfunction commitsByWeekday() {\n    local author=\"${1:-}\"\n    local _author=\"\"\n\n    if [[ -z \"${author}\" ]]; then\n        optionPicked \"Git commits by weekday:\"\n        _author=\"--author=**\"\n    else\n        optionPicked \"Git commits by weekday for author '${author}':\"\n        _author=\"--author=${author}\"\n    fi\n\n    echo -e \"\\tday\\tsum\"\n    local i counter=1\n    for i in Mon Tue Wed Thu Fri Sat Sun\n    do\n        echo -en \"\\t$counter\\t$i\\t\"\n        git -c log.showSignature=false shortlog -n $_merges --format='%ad %s' \\\n            \"${_author}\" \"$_since\" \"$_until\" $_log_options |\n            grep -cE \"^ * $i \\w\\w\\w [0-9]{1,2} \" || continue\n        counter=$((counter+1))\n    done | awk '{\n    }\n    NR == FNR {\n        count[$1\" \"$2] = $3;\n        total += $3;\n        next\n    }\n    END{\n        for (day in count) {\n            s=\"|\";\n            if (total > 0) {\n                percent = ((count[day] / total) * 100) / 1.25;\n                for (i = 1; i <= percent; ++i) {\n                    s=s\"█\"\n                }\n                printf(\"\\t%s\\t%s\\t%-0s\\t%s\\n\", substr(day,0,1), substr(day,3,5), count[day], s);\n            }\n        }\n    }' | sort -k 1 -n | awk '{$1=\"\"}1' | awk '{$1=$1}1' \\\n       | awk '{printf(\"\\t%s\\t%s\\t%s\\n\", $1, $2, $3)}'\n}\n\n################################################################################\n# DESC: Displays a horizontal bar graph based on total commits per hour\n# ARGS: $author (optional): Can focus on a single author. Default is all authors\n# OUTS: None\n################################################################################\nfunction commitsByHour() {\n    local author=\"${1:-}\"\n    local _author=\"\"\n\n    if [[ -z \"${author}\" ]]; then\n        optionPicked \"Git commits by hour:\"\n        _author=\"--author=**\"\n    else\n        optionPicked \"Git commits by hour for author '${author}':\"\n        _author=\"--author=${author}\"\n    fi\n    echo -e \"\\thour\\tsum\"\n\n    local i\n    for i in $(seq -w 0 23)\n    do\n        echo -ne \"\\t$i\\t\"\n        git -c log.showSignature=false shortlog -n $_merges --format='%ad %s' \\\n            \"${_author}\" \"$_since\" \"$_until\" $_log_options |\n            grep -cE '[0-9] '$i':[0-9]' || continue\n    done | awk '{\n        count[$1] = $2\n        total += $2\n    }\n    END{\n        for (hour in count) {\n            s=\"|\";\n            if (total > 0) {\n                percent = ((count[hour] / total) * 100) / 1.25;\n                for (i = 1; i <= percent; ++i) {\n                    s=s\"█\"\n                }\n                printf( \"\\t%s\\t%-0s\\t%s\\n\", hour, count[hour], s );\n            }\n        }\n    }' | sort\n}\n\n################################################################################\n# DESC: Displays number of commits per timezone\n# ARGS: $author (optional): Can focus on a single author. Default is all authors\n# OUTS: None\n################################################################################\nfunction commitsByTimezone() {\n    local author=\"${1:-}\"\n    local _author=\"\"\n\n    if [[ -z \"${author}\" ]]; then\n        optionPicked \"Git commits by timezone:\"\n        _author=\"--author=**\"\n    else\n        optionPicked \"Git commits by timezone for author '${author}':\"\n        _author=\"--author=${author}\"\n    fi\n\n    echo -e \"Commits\\tTimeZone\"\n    git -c log.showSignature=false log $_merges --format='%ad %s' \\\n        \"${_author}\" \"$_since\" \"$_until\" --date=iso $_log_options $_pathspec \\\n        | cut -d \" \" -f 3 | grep -v -e '^[[:space:]]*$' | sort -n | uniq -c\n}\n\n################################################################################\n# FUNCTIONS FOR SUGGESTION STATS\n\n################################################################################\n# DESC: Displays the authors in order of total contribution to the repo\n# ARGS: None\n# OUTS: None\n################################################################################\nfunction suggestReviewers() {\n    optionPicked \"Suggested code reviewers (based on git history):\"\n    git -c log.showSignature=false log --use-mailmap $_merges \"$_since\" \"$_until\" \\\n        --pretty=%aN $_log_options $_pathspec | head -n 100 | sort | uniq -c \\\n        | sort -nr | LC_ALL=C awk '\n    { args[NR] = $0; }\n    END {\n      for (i = 1; i <= NR; ++i) {\n        printf \"%s\\n\", args[i]\n      }\n    }' | column -t -s,\n}\n\n################################################################################\n# MAIN\n\n# Check to make sure all utilities required for this script are installed\ncheckUtils\n\n# Check if we are currently in a git repo.\nif ! git rev-parse --is-inside-work-tree > /dev/null; then\n    echo \"ERROR: You need to be inside a git repo to parse stats!\"\n    usage\n    exit 1\nfi\n\n# Parse non-interative commands\nif [[ \"$#\" -eq 1 ]]; then\n    case \"$1\" in\n        # GENERATE OPTIONS\n        -T|--detailed-git-stats) detailedGitStats;;\n        -R|--git-stats-by-branch)\n            branch=\"${_GIT_BRANCH:-}\"\n            while [[ -z \"${branch}\" ]]; do\n                read -r -p \"Which branch? \" branch\n            done\n            detailedGitStats \"${branch}\";;\n        -c|--changelogs) changelogs;;\n        -L|--changelogs-by-author)\n            author=\"${_GIT_AUTHOR:-}\"\n            while [[ -z \"${author}\" ]]; do\n                read -r -p \"Which author? \" author\n            done\n            changelogs \"${author}\";;\n        -S|--my-daily-stats) myDailyStats;;\n        -V|--csv-output-by-branch)\n            branch=\"${_GIT_BRANCH:-}\"\n            while [[ -z \"${branch}\" ]]; do\n                read -r -p \"Which branch? \" branch\n            done\n            csvOutput \"${branch}\";;\n        -j|--json-output)\n            json_path=\"\"\n            while [[ -z \"${json_path}\" ]]; do\n                echo \"NOTE: This feature is in beta!\"\n                echo \"The file name will be saved as \\\"output.json\\\".\"\n                echo \"The full path must be provided.\"\n                echo \"Variables or shorthands such as ~ are not valid.\"\n                echo \"You do not need the final slash at the end of a directory path.\"\n                echo \"You must have write permission to the folder you are trying to save this to.\"\n                echo \"This feature only works interactively and cannot be combined with other options.\"\n                echo -e \"Example of a valid path: /home/$(whoami)\\n\"\n                read -r -p \"Please provide the full path to directory to save JSON file: \" json_path\n                if [[ ! -w \"${json_path}\" ]]; then\n                    echo \"Invalid path or permission denied to write to given area.\"\n                    json_path=\"\"\n                fi\n            done\n            jsonOutput \"${json_path}\";;\n        # LIST OPTIONS\n        -b|--branch-tree) branchTree;;\n        -D|--branches-by-date) branchesByDate;;\n        -C|--contributors) contributors;;\n        -n|--new-contributors)\n            newDate=\"\"\n            while [[ -z \"${newDate}\" ]]; do\n                read -r -p \"Since what date? (e.g. '2023-04-13', '13 April 2023', 'last Thursday') \" newDate\n                # Test if the date provide is valid and try again if it isn't.\n                # date(1) is pretty accepting of time stamps but you never know\n                # what people may try. This script doesn't provide any additional\n                # output for a bad date since `date`'s STDERR already contains\n                # useful information.\n                if ! date -d \"${newDate}\" +%s > /dev/null 2>&1; then\n                   newDate=\"\"\n                fi\n            done\n            newContributors \"${newDate}\";;\n        -a|--commits-per-author) commitsPerAuthor;;\n        -d|--commits-per-day) commitsPerDay;;\n        -Y|--commits-by-year ) commitsByYear;;\n        -m|--commits-by-month) commitsByMonth;;\n        -w|--commits-by-weekday) commitsByWeekday;;\n        -W|--commits-by-author-by-weekday)\n            author=\"${_GIT_AUTHOR:-}\"\n            while [[ -z \"${author}\" ]]; do\n                read -r -p \"Which author? \" author\n            done\n            commitsByWeekday \"${author}\";;\n        -o|--commits-by-hour) commitsByHour;;\n        -A|--commits-by-author-by-hour)\n            author=\"${_GIT_AUTHOR:-}\"\n            while [[ -z \"${author}\" ]]; do\n                read -r -p \"Which author? \" author\n            done\n            commitsByHour \"${author}\";;\n        -z|--commits-by-timezone) commitsByTimezone;;\n        -Z|--commits-by-author-by-timezone)\n            author=\"${_GIT_AUTHOR:-}\"\n            while [[ -z \"${author}\" ]]; do\n                read -r -p \"Which author? \" author\n            done\n            commitsByTimezone \"${author}\";;\n        # SUGGEST OPTIONS\n        -r|--suggest-reviewers) suggestReviewers;;\n        -h|-\\?|--help) usage;;\n        *) echo \"Invalid argument\"; usage; exit 1;;\n    esac\n    exit 0;\nfi\n[[ \"$#\" -gt 1 ]] && { echo \"Invalid arguments\"; usage; exit 1; }\n\n# Parse interactive commands\nclear\nshowMenu\n\nwhile [[ \"${opt}\" != \"\" ]]; do\n    clear\n    case \"${opt}\" in\n        1) detailedGitStats; showMenu;;\n        2) branch=\"\"\n           while [[ -z \"${branch}\" ]]; do\n               read -r -p \"Which branch? \" branch\n           done\n           detailedGitStats \"${branch}\"; showMenu;;\n        3) changelogs; showMenu;;\n        4) author=\"\"\n           while [[ -z \"${author}\" ]]; do\n               read -r -p \"Which author? \" author\n           done\n           changelogs \"${author}\"; showMenu;;\n        5) myDailyStats; showMenu;;\n        6) branch=\"\"\n           while [[ -z \"${branch}\" ]]; do\n               read -r -p \"Which branch? \" branch\n           done\n           csvOutput \"${branch}\"; showMenu;;\n        7) json_path=\"\"\n           while [[ -z \"${json_path}\" ]]; do\n               echo \"NOTE: This feature is in beta!\"\n               echo \"The file name will be saved as \\\"output.json\\\".\"\n               echo \"The full path must be provided.\"\n               echo \"Variables, subshell commands, or shorthands such as ~ may not be valid.\"\n               echo \"You do not need the final slash at the end of a directory path.\"\n               echo \"You must have write permission to the folder you are trying to save this to.\"\n               echo \"This feature only works interactively and cannot be combined with other options.\"\n               echo -e \"Example of a valid path: /home/$(whoami)\\n\"\n               read -r -p \"Please provide the full path to directory to save JSON file: \" json_path\n               if [[ ! -w \"${json_path}\" ]]; then\n                   echo \"Invalid path or permission denied to write to given area.\"\n                   json_path=\"\"\n               fi\n           done\n           jsonOutput \"${json_path}\"; showMenu;;\n        8) branchTree; showMenu;;\n        9) branchesByDate; showMenu;;\n       10) contributors; showMenu;;\n       11) newDate=\"\"\n           while [[ -z \"${newDate}\" ]]; do\n               read -r -p \"Since what date? (e.g. '2023-04-13', '13 April 2023', 'last Thursday') \" newDate\n               # Test if the date provide is valid and try again if it isn't.\n               if ! date -d \"${newDate}\" +%s > /dev/null 2>&1; then\n                  newDate=\"\"\n               fi\n           done\n           newContributors \"${newDate}\"; showMenu;;\n       12) commitsPerAuthor; showMenu;;\n       13) commitsPerDay; showMenu;;\n       14) commitsByMonth; showMenu;;\n       15) commitsByYear; showMenu;;\n       16) commitsByWeekday; showMenu;;\n       17) author=\"\"\n           while [[ -z \"${author}\" ]]; do\n               read -r -p \"Which author? \" author\n           done\n           commitsByWeekday \"${author}\"; showMenu;;\n       18) commitsByHour; showMenu;;\n       19) author=\"\"\n           while [[ -z \"${author}\" ]]; do\n               read -r -p \"Which author? \" author\n           done\n           commitsByHour \"${author}\"; showMenu;;\n       20) commitsByTimezone; showMenu;;\n       21) author=\"\"\n           while [[ -z \"${author}\" ]]; do\n               read -r -p \"Which author? \" author\n           done\n           commitsByTimezone \"${author}\"; showMenu;;\n       22) suggestReviewers; showMenu;;\n       q|\"\\n\") exit;;\n       *) clear; optionPicked \"Pick an option from the menu\"; showMenu;;\n    esac\ndone\n"
        },
        {
          "name": "git-quick-stats.1",
          "type": "blob",
          "size": 3.65234375,
          "content": ".TH git-quick-stats \"1\" \"April 2024\" \"git-quick-stats\" \"User Commands\"\n.SH NAME\n.B git\\-quick\\-stats\n\\- Simple and efficient way to access various stats in a git repository.\n.SH SYNOPSIS\n.PP\nFor non\\-interactive mode:\n.B git\\-quick\\-stats [OPTIONS]\n.PP\nFor interactive mode:\n.B git-quick-stats\n.PP\n.SH DESCRIPTION\n.PP\nAny git repository contains tons of information about commits, contributors,\nand files. Extracting this information is not always trivial, mostly because\nof a gadzillion options to a gadzillion git commands.\nThis program allows you to see detailed information about a git repository.\n.PP\n.SH GENERATE OPTIONS\n.PP\n\\fB\\-T\\fR, \\fB\\-\\-detailed\\-git\\-stats\\fR\n.IP\ngive a detailed list of git stats\n.HP\n.PP\n\\fB\\-R\\fR, \\fB\\-\\-git\\-stats\\-by\\-branch\\fR\n.IP\nsee detailed list of git stats by branch\n.HP\n.PP\n\\fB\\-c\\fR, \\fB\\-\\-changelogs\\fR\n.IP\nsee changelogs\n.HP\n.PP\n\\fB\\-L\\fR, \\fB\\-\\-changelogs\\-by\\-author\\fR\n.IP\nsee changelogs by author\n.HP\n.PP\n\\fB\\-S\\fR, \\fB\\-\\-my\\-daily\\-stats\\fR\n.IP\nsee your current daily stats\n.HP\n.PP\n\\fB\\-V\\fR, \\fB\\-\\-csv\\-output\\-by\\-branch\\fR\n.IP\noutput daily stats by branch in CSV format\n.HP\n.PP\n\\fB\\-j\\fR, \\fB\\-\\-json\\-output\\fR\n.IP\nsave git log as a JSON formatted file to a specified area\n.HP\n.SH LIST OPTIONS\n.PP\n\\fB\\-b\\fR, \\fB\\-\\-branch\\-tree\\fR\n.IP\nshow an ASCII graph of the git repo branch history\n.HP\n.PP\n\\fB\\-D\\fR, \\fB\\-\\-branches\\-by\\-date\\fR\n.IP\nshow branches by date\n.HP\n.PP\n\\fB\\-C\\fR, \\fB\\-\\-contributors\\fR\n.IP\nsee a list of everyone who contributed to the repo\n.HP\n.PP\n\\fB\\-n\\fR, \\fB\\-\\-new\\-contributors\\fR\n.IP\nlist everyone who made their first contribution since a specified date\n.HP\n.PP\n\\fB\\-a\\fR, \\fB\\-\\-commits\\-per\\-author\\fR\n.IP\ndisplays a list of commits per author\n.HP\n.PP\n\\fB\\-d\\fR, \\fB\\-\\-commits\\-per\\-day\\fR\n.IP\ndisplays a list of commits per day\n.HP\n.PP\n\\fB\\-m\\fR, \\fB\\-\\-commits\\-by\\-month\\fR\n.IP\ndisplays a list of commits per month\n.HP\n.PP\n\\fB\\-Y\\fR, \\fB\\-\\-commits\\-by\\-year\\fR\n.IP\ndisplays a list of commits per year\n.HP\n.PP\n\\fB\\-w\\fR, \\fB\\-\\-commits\\-by\\-weekday\\fR\n.IP\ndisplays a list of commits per weekday\n.HP\n.PP\n\\fB\\-W\\fR, \\fB\\-\\-commits\\-by\\-author\\-by\\-weekday\\fR\n.IP\ndisplays a list of commits per weekday by author\n.HP\n.PP\n\\fB\\-o\\fR, \\fB\\-\\-commits\\-by\\-hour\\fR\n.IP\ndisplays a list of commits per hour\n.HP\n.PP\n\\fB\\-A\\fR, \\fB\\-\\-commits\\-by\\-author\\-by\\-hour\\fR\n.IP\ndisplays a list of commits per hour by author\n.HP\n.PP\n\\fB\\-z\\fR, \\fB\\-\\-commits\\-by\\-timezone\\fR\n.IP\ndisplays a list of commits per timezone\n.HP\n.PP\n\\fB\\-Z\\fR, \\fB\\-\\-commits\\-by\\-author\\-by\\-timezone\\fR\n.IP\ndisplays a list of commits per timezone by author\n.HP\n.SH SUGGEST OPTIONS\n.PP\n\\fB\\-r\\fR, \\fB\\-\\-suggest\\-reviewers\\fR\n.IP\nshow the best people to contact to review code\n.HP\n.PP\n\\fB\\-h\\fR, \\-?, \\fB\\-\\-help\\fR\n.IP\ndisplay this help text in the terminal\n.PP\n.SH ADDITIONAL USAGE\nYou can set _GIT_SINCE and _GIT_UNTIL to limit the git time log, example:\n.PP\n.B  export _GIT_SINCE=\"2017\\-01\\-20\"\n.PP\nYou can set _GIT_LIMIT for limited output log, example:\n.PP\n.B  export _GIT_LIMIT=20\n.PP\nYou can set _GIT_LOG_OPTIONS for git log options, example:\n.PP\n.B  export _GIT_LOG_OPTIONS=\"--ignore-all-space --ignore-blank-lines\"\n.PP\nYou can exclude directories or files from the stats by using pathspec, example:\n.PP\n.B export _GIT_PATHSPEC=':!pattern'\n.PP\nYou can set _GIT_MERGE_VIEW to show merge commits with normal commits, example:\n.PP\n.B  export _GIT_MERGE_VIEW=\"enable\"\n.PP\nYou can also set _GIT_MERGE_VIEW to only show merge commits, example:\n.PP\n.B  export _GIT_MERGE_VIEW=\"exclusive\"\n.PP\nYou can switch to the legacy color scheme, example:\n.PP\n.B export _MENU_THEME=legacy\n.PP\nYou can set _GIT_BRANCH to set the branch of the stats, example:\n.PP\n.B  export _GIT_BRANCH=\"master\"\n.\n.fi\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}