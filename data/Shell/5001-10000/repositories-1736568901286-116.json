{
  "metadata": {
    "timestamp": 1736568901286,
    "page": 116,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "todotxt/todo.txt-cli",
      "stars": 5645,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.083984375,
          "content": "VERSION-FILE\ntests/test-results\ntests/trash\\ directory.*\ndone.txt\nreport.txt\ntodo.txt\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 19.8427734375,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\nand this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n### Added\n- `TODOTXT_DEFAULT_ACTION` now also allows action parameters ([#159], [#407])\n\n### Fixed\n- `make install` installed the Bash completion in the wrong directory ([#452])\n- `make uninstall` fails ([#451])\n\n## [2.13.0] - 2024-12-25\n\n### Added\n- listpri action allows concatenation of multiple priorities [-ranges]\n- replace action completely merges any combination of priority / date with existing ([#386])\n- Check for broken symlinks to custom actions and complain ([#359])\n\n### Changed\n\n- Add .sh extension to completion script\n- Reuse the todo.sh alias for completion\n- Return from user prompt without requiring Enter ([#354])\n- Default to user writable directory in config ([#148])\n\n### Fixed\n- Fix problem with spaces in directory path ([#276])\n- pri action takes multiple items + priorities on single run ([#346])\n\n## [2.12.0] - 2020-08-11\n\n### Added\n\n- Added default priority variable `TODOTXT_PRIORITY_ON_ADD` ([#246])\n- Added `done` option as alias of `do` ([#169])\n- Added macOS 10.15.x support ([#300])\n- Highlighting of dates, metadata and item numbers ([#264])\n- Minimal config file / default filenames (todo.txt, done.txt, report.txt) ([#289])\n- Enable file completion for add-on actions via `_todo_file{1,2,3}_actions` ([#270])\n- Allow to customize what can be before / inside / after `+project` and `@context` ([#271])\n\n### Changed\n\n- Read the task's name and uses as default ([#249])\n- Updated interpreter reference to use environment variable ([#160])\n- Allow setting of bash completion path ([#301])\n\n### Fixes\n\n- Fixed no end-of-line bug. Supports todos with no end-of-line. ([#295])\n\n## [2.11.0] - 2018-03-26\n\n### Added\n\n- Added support for `$XDG_CONFIG_HOME` config file/actions location\n- Created [CODE_OF_CONDUCT.md](.github/CODE_OF_CONDUCT.md) ([#217])\n- Created [CHANGELOG.md](/CHANGELOG.md) ([#218])\n\n### Changed\n\n- Updated `add` command to accept lowercase priority ([#230])\n- Clean tests and version file in Makefile. Don't ignore errors in tests.\n- Updated [README.md](/README.md) ([#219])\n- Update Downloads links to point at the Releases page ([#228])\n- Set the executable bit when preparing releases ([#156])\n\n### Fixes\n\n- Update links to use https\n- Suppress todo.sh error messages when invoked during completion ([#8])\n\n## [2.10.0] - 2013-12-06\n\n### Added\n\n- Enable term filtering for listcon.\n- Add make install command.\n- Enable use of global config file in `/etc/todo/config`. `make install` installs a global config file.\n- Allow use of `post_filter_command` for `listall` and `listpri`.\n- Print usage help for custom action and all passed actions.\n- Allow configuring null data files (done.txt and report.txt) and don't create\n  them.\n- Color contexts and projects without an add-on, just by setting vars in the\n  config file.\n- Place add-ons in subfolders (for easier git clone).\n\n### Changed\n\n- Improve code commenting/documentation.\n- Refactor code for speed/better organization.\n- Improve test coverage and test library.\n\n### Removed\n\n- Removed add date from line completion, ie, `todo.sh ls 10[tab]`.\n\n### Fixed\n\n- Properly replace date when replacing task with priority and date.\n- Handle `-h`, `shorthelp`, and `help` when a Fatal Error happens.\n- Fix `todo_completion` problem with Bash 3.1.\n\n## [2.9.0] - 2012-04-08\n\n### Added\n\n- Added tab auto-completion of projects and contexts from `todo.txt` and `done.txt`. Type `@<Tab>` or `+<Tab>` while entering a task.\n- Added new listaddons command displays installed addons.\n- List priorities within a range using listpri. For example, to see tasks prioritized A-B, use `todo.sh listpri A-B`\n\n### Fixed\n\n- Fixed various cosmetic issues, bugs, and added developer test library enhancements.\n\n## [2.8.0] - 2011-09-13\n\n### Added\n\n- `listpri`/`lsp` now filters by term. For example, `todo.sh lsp A book` will only return tasks prioritized `A` with the word book in them.\n- Added support for todo directory paths with spaces in them.\n- Tasks with priority included and auto prepend date on (`-t`) get the date where expected.\n- Smarter action completion messaging: `do`, `pri`, and `depri` all let you know if a task is already done, prioritized, or deprioritized.\n- Made more parameters available to offer more control to custom actions (`-c`, `-A`, `-N`, `-T`)\n\n### Changed\n\n- Improved portability for Dropbox or USB key users. If not specified, todo.sh checks for a config file in its own directory; default todo.txt location is todo.sh's directory.\n- Improved script performance thanks to optimized code\n- Exposed `cleaninput()` for use in addons\n- Improved testing framework:\n  - Better escaped input handling\n  - Abstracted make_action function to test custom action behavior\n  - Added tests for source code compliance\n  - Cleaner, simpler, modernized, optimized code\n\n### Fixed\n\n- Custom action output no longer prefaced by `TODO:` so it's easier to see when the core script vs. addon is performing an action\n- `listpri` complains if specified priority is invalid\n- Don't abort task listing when items contain certain escape sequences (`\\c \\033`)\n- Condense whitespace ONLY whe task is quoted; automatically convert CRLF to space\n- Don't delete `|` (pipe) from task input\n- `-+` and `-@` no longer break task coloring if context or project appears at the end of the line\n\n## [2.7.0] - 2010-08-03\n\n### Added\n\n- Added generalization of the _PRI_X_ color support to all priorities\n- Added highlighting of done, but not yet archived tasks via _COLOR_DONE_\n- Color map (BLACK, ...) now supports spaces in the color definitions, making it possible to override the default ANSI escape codes with e.g. Conky tags (`${color black}`)\n\n### Changed\n\n- Cleanup: help messages, consistent output messages\n- Exporting `die()` function for use in custom commands\n- `prepend` and `replace` actions keep prepended date, `append` considers sentence delimiters\n- Tests: several regression tests added\n\n## [2.6.0] - 2010-05-11\n\n### Added\n\n- Added a case for the fixed replace command.\n\n### Changed\n\n- Changed odd tabs to spaces.\n- Faster help/usage document outputs.\n- Consolidated `TODOTXT_VERBOSE` tests.\n- Refactored various add functionality to one function.\n- Updated `_list()` output to match updated `addto`.\n\n### Fixed\n\n- Quoting regexp to parse properly.\n- Fixed erroneous hide/show comments.\n- Correctly fixed regexp quoting issue for bash v3.1.x and v3.2.x.\n- Old versions of bash do not have `=~`\n- Fix line endings.\n- Fixed bug for replace command.\n\n## [2.5.0] - 2010-05-05\n\n### Added\n\n- Support use of `$HOME/.todo/` for all todo.sh configuration\n- Added new multiple do capability to help message\n- Added option to disable final filter\n- Added a new variable `$TODO_FULL_SH`\n- Added new action `addm`\n- Added support PAGER pipe for help output\n- Added some additional mappings, plus a project context\n\n### Changed\n\n- Added 'silent' to a bunch of calls\n\n### Fixed\n\n- Fixing prepend and priority issue.\n- Replace with `priority` set\n- Multiple `do` items\n- `prepend` not correct on prioritized tasks\n- Invalid date range. Changed regex `[ -~]` to `[ ~-]`.\n- `do`: no safeguard to `do` twice. Tests item is not marked done before attempting to mark item as \"done\".\n- Fixed `add` does not escape line breaks\n- `append` and `replace` unexpected behavior if there's an `&` in task (even in quotes)\n- Tasks whose `ID` begins with `0` ought to be ignored.\n- Fixed auto-complete function name for contexts\n\n## [2.4.0] - 2009-05-11\n\n### Added\n\n- Added support for `TODOTXT_FINAL_FILTER` to provide a final custom list filter.\n- Added support for custom sorting (can set in `todo.cfg`)\n- Added parameterize for `.todo.actions.d` directory\n\n### Removed\n\n- Removed annoying trailing space on `pri` tasks\n- Don't set colors in default `todo.cfg`.\n- Don't set sort command in default `todo.cfg`.\n\n### Fixed\n\n- `listcon` and `listproj` now work correctly on Mac OS X 10.5\n- `pri` accepted priorities of more than a single letter\n- Support commands combination for `TODOTXT_SORT_COMMAND`; e.g. piped commands can be used: `export TODOTXT_SORT_COMMAND=\" env LC_COLLATE=C sort -f -k2 - | grep -m 10 .\"`\n- Replace now echoes old item AND new item, like it used to.\n- `depri` no longer wipes out tasks with more than just the priority in parentheses\n- Now throws an error if you try to prioritize with more than one letter, ie, `todo.sh pri AA` doesn't work any more.\n\n## [2.3.0] - 2009-04-02\n\n### Added\n\n- Added hide priority, context, and projects options now enabled `-P`, `-@` and `-+`\n- Enabled recursive call of todo.sh from add-ons\n- Exported variables for use in add-ons\n- Added `-vv` option for debugging output\n- Added short usage statement (that fits on one screen) with `-h`\n- Added Makefile dist infrastructure for versioned releases in Downloads area on GitHub\n\n### Changed\n\n- Separated `_list` function for reuse by various versions of list command to reduce duplicate code\n- Set `ls` as the default action\n\n## [2.2.0] - 2009-03-??\n\n### Fixed\n\n- For awhile here during the GitHub transition, we stripped the version number from todo.sh and updated it kind of willy-nilly, so we're back-versioning all unversioned copies v 2.2.\n\n## [2.1.0] - 2009-02-23\n\n### Added\n\n- Added \"pluggability\" with `~/.todo.actions.d/` support (via [Tammy and Ed](http://tech.groups.yahoo.com/group/todotxt/message/1739))\n- Added `-t` param, off by default. When specified, it automatically prepends the current date to new todo's on add\n- Searches for more Unix-y `~/.todo.cfg` if `~/todo.cfg` doesn't exist (via [Ed](http://tech.groups.yahoo.com/group/todotxt/message/1767))\n\n### Fixed\n\n- Corrected \"ambiguous redirect\" bug with done file (via [Jeff](http://tech.groups.yahoo.com/group/todotxt/message/1764))\n- Corrected usage and help message with new params\n- Corrected config file miscomment about colors\n\n## [2.0.1] - 2009-02-17\n\n### Fixed\n\n- Restored `-d` parameter functionality broken in 2.0 (d'oh, thanks Jason, you made the changelog! )\n\n## [2.0.0] - 2009-02-17\n\n### Added\n\n- Added `addto [DEST] \"Text to add\"` will append text to any file in the todo directory, like `ideas.txt` or `maybelater.txt`.\n- Added `mv # [DEST]` will move a task from `todo.txt` to another file `[DEST]` in the todo directory, like if you decide your `\"Learn French\"` task should go into your `maybelater.txt` file.\n- `depri #` removes priority from a task.\n- `rm # [TERM]` or `del # [TERM]` will delete just the `[TERM]` from the task on line # in todo.txt.\n- `listfile [SRC] [TERM]` or `lf [SRC] [TERM]` will list the contents of any text file in the todo directory, and filter by keyword `[TERM]`.\n- `listcon` (`lsc`) and `listproj` (`lsprj`) lists contexts and projects, respectively, that appear in todo.txt. (Requires `gawk`)\n- On task deletion, line number preservation is on by default (known issue, leaves blank lines). Optional, can be turned off with `-n` option.\n- Auto-archive on task completion is now on by default; can be turned off with `-a` parameter.\n\n### Changed\n\n- Separated config file into a non hidden dot file.\n\n### Fixed\n\n- Better error handling throughout for all commands.\n- Archive now defrags the file (removes blank lines; see line preservation option.)\n- Using `/bin/bash` instead of `/bin/sh`\n\n## [1.7.3] - 2006-07-29\n\n### Added\n\n- Added short action aliases – `add/a`, `list/ls`, `listpri/lsp`, `listall/lsa`, `prepend/prep`, `append/app`, `del/rm`\n\n## [1.7.2] - 2006-07-28\n\n### Added\n\n- `listpri` automatically capitalizes lowercase priorities\n- `listpri` now displays friendly error message, and the # of tasks returned in verbose mode\n\n### Changed\n\n- `do` action removes priority from task automatically\n  Update:\n\n### Fixed\n\n- Actions are now case-insensitive (ie, `todo.sh Add` will work)\n\n## [1.7.1] - 2006-07-21\n\n### Changed\n\n- I'm a big dummy and didn't keep track of what I fixed here. Sorry!\n\n## [1.7.0] - 2006-07-19\n\n### Added\n\n- Interactive `add`, `append`, `prepend`, and `replace` (tx, Ben!)\n- Action `listall` displays tasks from both todo.txt and done.txt\n- Option `-f` forces delete action and disables interactive input (for todobot.pl)\n- Option `-h` displays full help message.\n\n### Deprecated\n\n- Option `-q` deprecated; Use `-v` to turn on verbose mode\n\n### Changed\n\n- A very short version of usage message displays by default instead of the long version.\n- Comment in info about `.todo` file being required\n\n### Fixed\n\n- No colors display for done tasks (tx, Tanja!)\n- Sort is now case-insensitive (tx, Lonnie!)\n\n## [1.6.3] - 2006-07-06\n\n### Added\n\n- Line numbers now padded, up to 100 characters. (tx, Tanja!)\n\n## [1.6.2] - 2006-07-05\n\n### Fixed\n\n- Windows config files with spaces now work (tx Ron)\n\n## [1.6.1] - 2006-07-05\n\n### Changed\n\n- The default location of your `.todo` file is now `$HOME/.todo`\n\n### Fixed\n\n- No colors mode (`-p`) now works as expected\n\n## [1.6.0] - 2006-07-04\n\n### Added\n\n- Action `prepend` adds text to an item at the beginning of the line.\n- Configuration file is now separated from script into `.todo` file\n- Specify a config file other than `.todo` using the `-d` option\n- Option `-q` quiets todo.sh's chattiness.\n- Option `-V` shows version and license information.\n\n### Changed\n\n- The option to turn off colors is now `-p` (no longer `-nc` as in 1.5.2)\n\n## [1.5.2] - 2006-06-26\n\n### Fixed\n\n- Items that start with `x ` (an x with a space after) are archived now to avoid lines that start with a word like `xander` from being archived. (tx, Tannie!)\n- Report now only archives items that start with `x ` as well.\n\n## [1.5.1] - 2006-06-26\n\n### Fixed\n\n- Items with an `x` in them at all were being deleted on archive with 1.5; all fixed now.\n\n## [1.5.0] - 2006-06-24\n\n### Added\n\n- Option to turn off colors (to avoid characters in piped text files or IM bot), ie `todo.sh -nc [COMMAND]`\n- A date is added to a completed todo, ie `x 2006-06-24` (tx SETH)\n- Action `remdup` removes exact duplicate lines from todo.txt (tx Tannie)\n- Action `del` removes any blank lines from todo.txt (tx Tannie)\n\n### Changed\n\n- Using `sed -i` instead of copying tmp file (tx Tannie)\n\n### Fixed\n\n- Colors show in OS/X 10.4 (tx SETH & misha)\n\n## [1.4.0] - 2006-06-17\n\n### Added\n\n- Tasks are color-coded by priority in Cygwin (Thanks, Abraham, Manuel and Luis!)\n\n### Changed\n\n- Switched endless `if-then` to a `case` statement, and tightened up `wc -l` regex. (Thanks, Sash!)\n\n### Fixed\n\n- If you `replace`/`do`/`append` to a non-existent task, your todo.txt is no longer overwritten and the error is handled gracefully. (Thanks, Scott!)\n\n## [1.3.0] - 2006-05-29\n\n### Added\n\n- Displays the number of newly added todo (Thanks, Amy!)\n- Confirms whether or not you really want to delete a todo\n- Displays success messages and confirmations on `append`, `replace`, `do`, etc.\n- Added licensing information in comments. GPL, baby!\n\n### Changed\n\n- Alphabetized command workflow in if/then construction\n- Tightened up `sed` commands, removed unnecessary `grep`s and `cat`s (Thanks, Sash!)\n- Stripped whitespace around number lines from wc results\n\n### Removed\n\n- Removed filenames from `report.txt` format, for easier graphing or Excel imports.\n\n### Fixed\n\n- Todos are now sorted alphabetically when listed by a term. (ie: `todo list flowers)\n\n## [1.2.0] - 2006-05-15\n\n### Added\n\n- `list` is case insensitive. ie, `todo list Mac` will match lines with \"mac\" and \"Mac\"\n\n### Changed\n\n- `todo list` matches multiple [TERM]s. ie, `todo list mac offline` will match all lines that contain the words \"mac\" and \"offline\"\n- `repri` and `pri` actions combined into `pri` action (Thanks Mike!)\n- Quotes no longer required with `add` and `replace` (Thanks Karl!)\n- Any priority added to a todo must be uppercase to preserve sort order, enforced now. ie `todo pri 1 a` will return a usage error.\n\n### Fixed\n\n- File \"sanity checks\" and cleanup function, test script and various fantastic stylistic improvements added. Extra big thanks to Karl!\n\n## [1.1.0] - 2006-05-12\n\n### Added\n\n- Supports file paths with spaces (ie `C:\\Documents and Settings\\gina\\todo.txt`)\n\n## 1.0.0 - 2006-05-11\n\n### Added\n\n- Consolidated into one master script with usage notes and released.\n\n[Unreleased]: https://github.com/todotxt/todo.txt-cli/compare/v2.13.0...HEAD\n[2.13.0]: https://github.com/todotxt/todo.txt-cli/compare/v2.12.0...v2.13.0\n[2.12.0]: https://github.com/todotxt/todo.txt-cli/compare/v2.11.0...v2.12.0\n[2.11.0]: https://github.com/todotxt/todo.txt-cli/compare/v2.10.0...v2.11.0\n[2.10.0]: https://github.com/todotxt/todo.txt-cli/compare/v2.9.0...v2.10.0\n[2.9.0]: https://github.com/todotxt/todo.txt-cli/compare/v2.8.0...v2.9.0\n[2.8.0]: https://github.com/todotxt/todo.txt-cli/compare/v2.7.0...v2.8.0\n[2.7.0]: https://github.com/todotxt/todo.txt-cli/compare/v2.6.0...v2.7.0\n[2.6.0]: https://github.com/todotxt/todo.txt-cli/compare/v2.5.0...v2.6.0\n[2.5.0]: https://github.com/todotxt/todo.txt-cli/compare/v2.4.0...v2.5.0\n[2.4.0]: https://github.com/todotxt/todo.txt-cli/compare/v2.3.0...v2.4.0\n[2.3.0]: https://github.com/todotxt/todo.txt-cli/compare/v2.2.0...v2.3.0\n[2.2.0]: https://github.com/todotxt/todo.txt-cli/compare/v2.1.0...v2.2.0\n[2.1.0]: https://github.com/todotxt/todo.txt-cli/compare/v2.0.1...v2.1.0\n[2.0.1]: https://github.com/todotxt/todo.txt-cli/compare/v2.0.0...v2.0.1\n[2.0.0]: https://github.com/todotxt/todo.txt-cli/compare/v1.7.3...v2.0.0\n[1.7.3]: https://github.com/todotxt/todo.txt-cli/compare/v1.7.2...v1.7.3\n[1.7.2]: https://github.com/todotxt/todo.txt-cli/compare/v1.7.1...v1.7.2\n[1.7.1]: https://github.com/todotxt/todo.txt-cli/compare/v1.7.0...v1.7.1\n[1.7.0]: https://github.com/todotxt/todo.txt-cli/compare/v1.6.3...v1.7.0\n[1.6.3]: https://github.com/todotxt/todo.txt-cli/compare/v1.6.2...v1.6.3\n[1.6.2]: https://github.com/todotxt/todo.txt-cli/compare/v1.6.1...v1.6.2\n[1.6.1]: https://github.com/todotxt/todo.txt-cli/compare/v1.6.0...v1.6.1\n[1.6.0]: https://github.com/todotxt/todo.txt-cli/compare/v1.5.2...v1.6.0\n[1.5.2]: https://github.com/todotxt/todo.txt-cli/compare/v1.5.1...v1.5.2\n[1.5.1]: https://github.com/todotxt/todo.txt-cli/compare/v1.5.0...v1.5.1\n[1.5.0]: https://github.com/todotxt/todo.txt-cli/compare/v1.4.0...v1.5.0\n[1.4.0]: https://github.com/todotxt/todo.txt-cli/compare/v1.3.0...v1.4.0\n[1.3.0]: https://github.com/todotxt/todo.txt-cli/compare/v1.2.0...v1.3.0\n[1.2.0]: https://github.com/todotxt/todo.txt-cli/compare/v1.1.0...v1.2.0\n[1.1.0]: https://github.com/todotxt/todo.txt-cli/compare/v1.0.0...v1.1.0\n[#8]: https://github.com/todotxt/todo.txt-cli/pull/8\n[#148]: https://github.com/todotxt/todo.txt-cli/pull/148\n[#156]: https://github.com/todotxt/todo.txt-cli/pull/156\n[#159]: https://github.com/todotxt/todo.txt-cli/pull/159\n[#160]: https://github.com/todotxt/todo.txt-cli/pull/160\n[#169]: https://github.com/todotxt/todo.txt-cli/pull/169\n[#217]: https://github.com/todotxt/todo.txt-cli/pull/217\n[#218]: https://github.com/todotxt/todo.txt-cli/pull/218\n[#219]: https://github.com/todotxt/todo.txt-cli/pull/219\n[#228]: https://github.com/todotxt/todo.txt-cli/pull/228\n[#230]: https://github.com/todotxt/todo.txt-cli/pull/230\n[#246]: https://github.com/todotxt/todo.txt-cli/pull/246\n[#246]: https://github.com/todotxt/todo.txt-cli/pull/246\n[#249]: https://github.com/todotxt/todo.txt-cli/pull/249\n[#254]: https://github.com/todotxt/todo.txt-cli/pull/254\n[#264]: https://github.com/todotxt/todo.txt-cli/pull/264\n[#270]: https://github.com/todotxt/todo.txt-cli/pull/270\n[#271]: https://github.com/todotxt/todo.txt-cli/pull/271\n[#276]: https://github.com/todotxt/todo.txt-cli/pull/276\n[#289]: https://github.com/todotxt/todo.txt-cli/pull/289\n[#295]: https://github.com/todotxt/todo.txt-cli/pull/295\n[#300]: https://github.com/todotxt/todo.txt-cli/pull/300\n[#301]: https://github.com/todotxt/todo.txt-cli/pull/301\n[#346]: https://github.com/todotxt/todo.txt-cli/pull/346\n[#354]: https://github.com/todotxt/todo.txt-cli/pull/354\n[#359]: https://github.com/todotxt/todo.txt-cli/pull/359\n[#386]: https://github.com/todotxt/todo.txt-cli/pull/386\n[#407]: https://github.com/todotxt/todo.txt-cli/pull/407\n[#451]: https://github.com/todotxt/todo.txt-cli/pull/451\n[#452]: https://github.com/todotxt/todo.txt-cli/pull/452\n"
        },
        {
          "name": "GEN-VERSION-FILE",
          "type": "blob",
          "size": 0.3818359375,
          "content": "#!/usr/bin/env bash\n# Based on git's GIT-VERSION-GEN.\n\nVF=VERSION-FILE\nDEF_VER=v0.0\n\nif test -d .git -o -f .git &&\n\tVN=$(git describe --dirty --tags 2>/dev/null)\nthen\n\tVN=${VN//-/.}\nelse\n\tVN=\"$DEF_VER\"\nfi\n\nVN=$(expr \"$VN\" : v*'\\(.*\\)')\n\nif test -r \"$VF\"\nthen\n\tVC=$(sed -e 's/^VERSION=//' <\"$VF\")\nelse\n\tVC=unset\nfi\ntest \"$VN\" = \"$VC\" || {\n\techo >&2 \"VERSION=$VN\"\n\techo \"VERSION=$VN\" >\"$VF\"\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3251953125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.67578125,
          "content": "#\n# Makefile for todo.txt\n#\n\nSHELL = /bin/sh\n\nINSTALL = /usr/bin/install\nINSTALL_PROGRAM = $(INSTALL)\nINSTALL_DATA = $(INSTALL) -m 644\n\nprefix = /usr/local\n\n# ifdef check allows the user to pass custom dirs\n# as per the README\n\n# The directory to install todo.sh in.\nifdef INSTALL_DIR\n\tbindir = $(INSTALL_DIR)\nelse\n\tbindir = $(prefix)/bin\nendif\nDEST_COMMAND = $(DESTDIR)$(bindir)/todo.sh\n\n# The directory to install the config file in.\nifdef CONFIG_DIR\n\tsysconfdir = $(CONFIG_DIR)\nelse\n\tsysconfdir = $(prefix)/etc\nendif\nDEST_CONFIG = $(DESTDIR)$(sysconfdir)/todo/config\n\nifdef BASH_COMPLETION\n\tdatarootdir = $(BASH_COMPLETION)\nelse\n\tdatarootdir = $(prefix)/share/bash-completion/completions\nendif\nDEST_COMPLETION = $(DESTDIR)$(datarootdir)/todo.sh\n\n# generate list of targets from this Makefile\n# looks for any lowercase target with a double hash mark (##) on the same line\n# and uses the inline comment as the target description\n.PHONY: help\n.DEFAULT: help\nhelp:                            ## list public targets\n\t@echo\n\t@echo todo.txt Makefile\n\t@echo\n\t@sed -ne '/^[a-z%-]\\+:.*##/ s/:.*##/\\t/p' $(word 1, $(MAKEFILE_LIST)) \\\n\t | column -t -s '\t'\n\t@echo\n\n# Dynamically detect/generate version file as necessary\n# This file will define a variable called VERSION used in\n# both todo.sh and this Makefile.\nVERSION-FILE:\n\t@./GEN-VERSION-FILE\n-include VERSION-FILE\n\n# dist/build directory name\nDISTNAME=todo.txt_cli-$(VERSION)\n\n# files to copy unmodified into the dist directory\nSRC_FILES := todo.cfg todo_completion\n\n# path of SRC_FILES in the dist directory\nOUTPUT_FILES := $(patsubst %, $(DISTNAME)/%, $(SRC_FILES))\n\n# all dist files\nDISTFILES := $(OUTPUT_FILES) $(DISTNAME)/todo.sh\n\n# create the dist directory\n$(DISTNAME): VERSION-FILE\n\tmkdir -p $(DISTNAME)\n\n# copy SRC_FILES to the dist directory\n$(OUTPUT_FILES): $(DISTNAME)/%: %\n\tcp -f $(*) $(DISTNAME)/\n\n# generate todo.sh\n$(DISTNAME)/todo.sh: VERSION-FILE\n\tsed -e 's/@DEV_VERSION@/'$(VERSION)'/' todo.sh > $(DISTNAME)/todo.sh\n\tchmod +x $(DISTNAME)/todo.sh\n\n.PHONY: build\nbuild: $(DISTNAME) $(DISTFILES)  ## create the dist directory and files\n\n.PHONY: dist\ndist: build   ## create the compressed release files\n\ttar cf $(DISTNAME).tar $(DISTNAME)\n\tgzip -f -9 $(DISTNAME).tar\n\tzip -r -9 $(DISTNAME).zip $(DISTNAME)\n\trm -r $(DISTNAME)\n\n.PHONY: clean\nclean: test-pre-clean VERSION-FILE   ## remove dist directory and all release files\n\trm -rf $(DISTNAME)\n\trm -f $(DISTNAME).tar.gz $(DISTNAME).zip\n\n.PHONY: install\ninstall: build installdirs   ## local package install\n\t$(INSTALL_PROGRAM) $(DISTNAME)/todo.sh $(DEST_COMMAND)\n\t$(INSTALL_DATA) $(DISTNAME)/todo_completion $(DEST_COMPLETION)\n\t[ -e $(DEST_CONFIG) ] || \\\n\t    sed \"s/^\\(export[ \\t]*TODO_DIR=\\).*/\\1~\\/.todo/\" $(DISTNAME)/todo.cfg > $(DEST_CONFIG)\n\n.PHONY: uninstall\nuninstall:   ## uninstall package\n\trm -f $(DEST_COMMAND)\n\trm -f $(DEST_COMPLETION)\n\trm -f $(DEST_CONFIG)\n\n\trmdir $(DESTDIR)$(datarootdir) 2>/dev/null || :\n\trmdir $(DESTDIR)$(sysconfdir)/todo\n\n# create local installation directories\n.PHONY: installdirs\ninstalldirs:\n\tmkdir -p $(DESTDIR)$(bindir) \\\n\t         $(DESTDIR)$(sysconfdir)/todo \\\n\t         $(DESTDIR)$(datarootdir)\n\n#\n# Testing\n#\nTESTS = $(wildcard tests/t[0-9][0-9][0-9][0-9]-*.sh)\n#TEST_OPTIONS=--verbose\n\n# remove test detritus\ntest-pre-clean:\n\trm -rf tests/test-results \"tests/trash directory\"*\n\n# run tests and generate test result files\naggregate-results: $(TESTS)\n\n$(TESTS): test-pre-clean\n\tcd tests && ./$(notdir $@) $(TEST_OPTIONS)\n\n# run tests, print a test result summary, and remove generated test results\ntest: aggregate-results   ## run tests\n\ttests/aggregate-results.sh tests/test-results/t*-*\n\trm -rf tests/test-results\n\n# Force tests to get run every time\n.PHONY: test test-pre-clean aggregate-results $(TESTS)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.8798828125,
          "content": "# [![todo.txt-cli](http://todotxt.org/images/todotxt_logo_2012.png)][website]\n\n> A simple and extensible shell script for managing your todo.txt file.\n\n![CI](https://github.com/todotxt/todo.txt-cli/workflows/CI/badge.svg)\n[![GitHub issues](https://img.shields.io/github/issues/todotxt/todo.txt-cli.svg)](https://github.com/todotxt/todo.txt-cli/issues)\n[![GitHub forks](https://img.shields.io/github/forks/todotxt/todo.txt-cli.svg)](https://github.com/todotxt/todo.txt-cli/network)\n[![GitHub stars](https://img.shields.io/github/stars/todotxt/todo.txt-cli.svg)](https://github.com/todotxt/todo.txt-cli/stargazers)\n[![GitHub license](https://img.shields.io/github/license/todotxt/todo.txt-cli.svg)](https://raw.githubusercontent.com/todotxt/todo.txt-cli/master/LICENSE)\n[![Gitter](https://badges.gitter.im/join_chat.svg)](https://gitter.im/todotxt/todo.txt-cli)\n\n![gif](./.github/example.gif)\n\n*Read our [contributing guide][CONTRIBUTING] if you're looking to contribute (issues/PRs/etc).*\n\n\n## Installation\n\n### Download\nDownload the latest stable [release][release] for use on your desktop or server.\n\n### OS X / macOS\n\n```shell\nbrew install todo-txt\n\ncp -n $(brew --prefix)/opt/todo-txt/todo.cfg ~/.todo.cfg\n```\n\n**Note**: The `-n` flag for `cp` makes sure you do not overwrite an existing file.\n\n### Linux\n\n#### From command line\n\n```shell\nmake\nmake install\nmake test\n```\n\n*NOTE:* Makefile defaults to several default paths for installed files. Adjust to your system:\n\n- `INSTALL_DIR`: PATH for executables (default `/usr/local/bin`)\n- `CONFIG_DIR`: PATH for the `todo/config` configuration template (default `/usr/local/etc`)\n- `BASH_COMPLETION`: PATH for autocompletion scripts (default to `/usr/local/share/bash-completion/completions`)\n\n```shell\n# Note: Showcasing config overrides for legacy locations; NOT recommended!\nmake install CONFIG_DIR=/etc INSTALL_DIR=/usr/bin BASH_COMPLETION=/etc/bash_completion.d\n```\n\n#### Arch Linux (AUR)\n\nhttps://aur.archlinux.org/packages/todotxt/\n\n\n## Configuration\n\nNo configuration is required; however, most users tweak the default settings (e.g. relocating the todo.txt directory to a subdirectory of the user's home directory, or onto a cloud drive (via the `TODO_DIR` variable)), modify the colors, add additional highlighting of projects, contexts, dates, and so on. A configuration template with a commented-out list of all available options is included.\nIt is recommended to _copy_ that template into one of the locations listed by `todo.sh help` on `-d CONFIG_FILE`, even if it is installed in the global configuration location (`/etc/todo/config`).\n\n## Usage\n```shell\ntodo.sh [-fhpantvV] [-d todo_config] action [task_number] [task_description]\n```\n\nFor example, to add a todo item, you can do:\n\n```shell\ntodo.sh add \"THING I NEED TO DO +project @context\"\n```\n### `replace`\nReplaces task on line NR with UPDATED TODO.\n\n```shell\ntodo.sh replace NR \"UPDATED TODO\"\n```\n### `report`\nAdds the number of open tasks and done tasks to report.txt.\n\n```shell\ntodo.sh report\n```\n\nRead about all the possible commands in the [USAGE][USAGE] file.\n\n\n## Release History\n\nSee [CHANGELOG.md][CHANGELOG]\n\n\n## Support\n\n- [Github Discussions](https://github.com/todotxt/todo.txt-cli/discussions)\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/todotxt)\n- [Twitter](https://twitter.com/todotxt)\n\n\n## Code of Conduct\n\n[Contributor Code of Conduct][CODE_OF_CONDUCT]. By participating in this project you agree to abide by its terms.\n\n## Contributing\n\nWe welcome all contributions. First read our [Contributor Code of Conduct][CODE_OF_CONDUCT] and then get started [contributing][CONTRIBUTING].\n\n## License\n\nGNU General Public License v3.0 © [todo.txt org][github]\n\n\n\n[release]: https://github.com/todotxt/todo.txt-cli/releases\n[website]: http://todotxt.org/\n[github]: https://github.com/todotxt\n[USAGE]: ./USAGE.md\n[CHANGELOG]: ./CHANGELOG.md\n[CODE_OF_CONDUCT]: .github/CODE_OF_CONDUCT.md\n[CONTRIBUTING]: .github/CONTRIBUTING.md\n"
        },
        {
          "name": "USAGE.md",
          "type": "blob",
          "size": 6.2509765625,
          "content": "# [todo.txt-cli](http://todotxt.org) Usage\n\n```shell\ntodo.sh [-fhpantvV] [-d todo_config] action [task_number] [task_description]\n```\n\n## Actions\n\n### `add`\nAdds THING I NEED TO DO to your todo.txt file on its own line.\n\nProject and context notation optional.\n\nQuotes optional.\n\n```shell\ntodo.sh add \"THING I NEED TO DO +project @context\"\ntodo.sh a \"THING I NEED TO DO +project @context\"\n```\n\n### `addm`\nAdds FIRST THING I NEED TO DO to your todo.txt on its own line and adds SECOND THING I NEED TO DO to you todo.txt on its own line.\n\nProject and context notation optional.\n\n```shell\ntodo.sh addm \"FIRST THING I NEED TO DO +project1 @context\nSECOND THING I NEED TO DO +project2 @context\"\n```\n\n### `addto`\nAdds a line of text to any file located in the todo.txt directory.\n\nFor example, `addto inbox.txt \"decide about vacation\"`\n\n```shell\ntodo.sh addto DEST \"TEXT TO ADD\"\n```\n\n### `append`\nAdds TEXT TO APPEND to the end of the task on line NR.\n\nQuotes optional.\n\n```shell\ntodo.sh append NR \"TEXT TO APPEND\"\ntodo.sh app NR \"TEXT TO APPEND\"\n```\n\n### `archive`\nMoves all done tasks from todo.txt to done.txt and removes blank lines.\n\n```shell\ntodo.sh archive\n```\n\n### `command`\nRuns the remaining arguments using only todo.sh builtins.\n\nWill not call any `.todo.actions.d` scripts.\n\n```shell\ntodo.sh command [ACTIONS]\n```\n\n### `deduplicate`\nRemoves duplicate lines from todo.txt.\n\n```shell\ntodo.sh deduplicate\n```\n\n### `del`\nDeletes the task on line NR in todo.txt. If TERM specified, deletes only TERM from the task.\n\n```shell\ntodo.sh del NR [TERM]\ntodo.sh rm NR [TERM]\n```\n\n### `depri`\nDeprioritizes (removes the priority) from the task(s) on line NR in todo.txt.\n\n```shell\ntodo.sh depri NR [NR ...]\ntodo.sh dp NR [NR ...]\n```\n\n### `do`\nMarks task(s) on line NR as done in todo.txt.\n\n```shell\ntodo.sh do NR [NR ...]\n```\n\n### `help`\nDisplay help about usage, options, built-in and add-on actions, or just the usage help for the passed ACTION(s).\n\n```shell\ntodo.sh help [ACTION...]\n```\n\n### `list`\nDisplays all tasks that contain TERM(s) sorted by priority with line numbers.  Each task must match all TERM(s) (logical AND); to display tasks that contain any TERM (logical OR), use `\"TERM1\\|TERM2\\|...\"` (with quotes), or `TERM1\\\\|TERM2` (unquoted). Hides all tasks that contain TERM(s) preceded by a minus sign (i.e. `-TERM`).\n\nIf no TERM specified, lists entire todo.txt.\n\n```shell\ntodo.sh list [TERM...]\ntodo.sh ls [TERM...]\n```\n\n### `listall`\nDisplays all the lines in todo.txt AND done.txt that contain TERM(s) sorted by priority with line  numbers. Hides all tasks that contain TERM(s) preceded by a minus sign (i.e. `-TERM`).\n\nIf no TERM specified, lists entire todo.txt AND done.txt concatenated and sorted.\n\n```shell\ntodo.sh listall [TERM...]\ntodo.sh lsa [TERM...]\n```\n\n### `listaddons`\nLists all added and overridden actions in the actions directory.\n\n```shell\ntodo.sh listaddons\n```\n\n### `listcon`\nLists all the task contexts that start with the @ sign in todo.txt.\n\nIf TERM specified, considers only tasks that contain TERM(s).\n\n```shell\ntodo.sh listcon [TERM...]\ntodo.sh lsc [TERM...]\n```\n\n### `listfile`\nDisplays all the lines in SRC file located in the todo.txt directory, sorted by priority with line  numbers. If TERM specified, lists all lines that contain TERM(s) in SRC file. Hides all tasks that contain TERM(s) preceded by a minus sign (i.e. `-TERM`).\n\nWithout any arguments, the names of all text files in the todo.txt directory are listed.\n\n```shell\ntodo.sh listfile [SRC [TERM...]]\ntodo.sh lf [SRC [TERM...]]\n```\n\n### `listpri`\nDisplays all tasks prioritized PRIORITIES. PRIORITIES can be a single one (A) or a range (A-C). If no PRIORITIES specified, lists all prioritized tasks. If TERM specified, lists only prioritized tasks that contain TERM(s). Hides all tasks that contain TERM(s) preceded by a minus sign (i.e. `-TERM`).\n\n```shell\ntodo.sh listpri [PRIORITIES] [TERM...]\ntodo.sh lsp [PRIORITIES] [TERM...]\n```\n\n### `listproj`\nLists all the projects (terms that start with a `+` sign) in todo.txt. If TERM specified, considers only tasks that contain TERM(s).\n\n```shell\ntodo.sh listproj [TERM...]\ntodo.sh lsprj [TERM...]\n```\n\n### `move`\nMoves line NR from source text file (SRC) to destination text file (DEST). Both source and destination file must be located in the directory defined in the configuration directory. When SRC is not defined it's by default todo.txt.\n\n```shell\ntodo.sh move NR DEST [SRC]\ntodo.sh mv NR DEST [SRC]\n```\n\n### `prepend`\nAdds TEXT TO PREPEND to the beginning of the task on line NR. Quotes optional.\n\n```shell\ntodo.sh prepend NR \"TEXT TO PREPEND\"\ntodo.sh prep NR\"TEXT TO PREPEND\"\n```\n\n### `pri`\nAdds PRIORITY to task on line NR.  If the task is already prioritized, replaces current priority with new PRIORITY. PRIORITY must be a letter between A and Z.\n\n```shell\ntodo.sh pri NR PRIORITY\ntodo.sh p NR PRIORITY\n```\n\n### `replace`\nReplaces task on line NR with UPDATED TODO.\n\n```shell\ntodo.sh replace NR \"UPDATED TODO\"\n```\n\n### `report`\nAdds the number of open tasks and done tasks to report.txt.\n\n```shell\ntodo.sh report\n```\n\n### `shorthelp`\nList the one-line usage of all built-in and add-on actions.\n\n```shell\ntodo.sh shorthelp\n```\n\n\n## Options\n\n### `-@`\nHide context names in list output. Use twice to show context names (default).\n\n### `-+`\nHide project names in list output. Use twice to show project names (default).\n\n### `-c`\nColor mode\n\n### `-d CONFIG_FILE`\nUse a configuration file other than one of the defaults (e.g. `~/.todo/config`)\n\n### `-f`\nForces actions without confirmation or interactive input.\n\n### `-h`\nDisplay a short help message; same as action \"shorthelp\"\n\n### `-p`\nPlain mode turns off colors\n\n### `-P`\nHide priority labels in list output. Use twice to show priority labels (default).\n\n### `-a`\nDon't auto-archive tasks automatically on completion\n\n### `-A`\nAuto-archive tasks automatically on completion\n\n### `-n`\nDon't preserve line numbers; automatically remove blank lines on task deletion.\n\n### `-N`\nPreserve line numbers\n\n### `-t`\nPrepend the current date to a task automatically when it's added.\n\n### `-T`\nDo not prepend the current date to a task automatically when it's added.\n\n### `-v`\nVerbose mode turns on confirmation messages\n\n### `-vv`\nExtra verbose mode prints some debugging information and additional help text\n\n### `-V`\nDisplays version, license and credits\n\n### `-x`\nDisables `TODOTXT_FINAL_FILTER`\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "todo.cfg",
          "type": "blob",
          "size": 3.1796875,
          "content": "# === EDIT FILE LOCATIONS BELOW ===\n\n# Your todo.txt directory (this should be an absolute path)\n#export TODO_DIR=\"/Users/gina/Documents/todo\"\nexport TODO_DIR=${HOME:-$USERPROFILE}\n\n# Your todo/done/report.txt locations\nexport TODO_FILE=\"$TODO_DIR/todo.txt\"\nexport DONE_FILE=\"$TODO_DIR/done.txt\"\nexport REPORT_FILE=\"$TODO_DIR/report.txt\"\n\n# You can customize your actions directory location\n#export TODO_ACTIONS_DIR=\"$HOME/.todo.actions.d\"\n\n# == EDIT FILE LOCATIONS ABOVE ===\n\n# === COLOR MAP ===\n\n## Text coloring and formatting is done by inserting ANSI escape codes.\n## If you have re-mapped your color codes, or use the todo.txt\n## output in another output system (like Conky), you may need to\n## over-ride by uncommenting and editing these defaults.\n## If you change any of these here, you also need to uncomment\n## the defaults in the COLORS section below. Otherwise, todo.txt\n## will still use the defaults!\n\n# export BLACK='\\\\033[0;30m'\n# export RED='\\\\033[0;31m'\n# export GREEN='\\\\033[0;32m'\n# export BROWN='\\\\033[0;33m'\n# export BLUE='\\\\033[0;34m'\n# export PURPLE='\\\\033[0;35m'\n# export CYAN='\\\\033[0;36m'\n# export LIGHT_GREY='\\\\033[0;37m'\n# export DARK_GREY='\\\\033[1;30m'\n# export LIGHT_RED='\\\\033[1;31m'\n# export LIGHT_GREEN='\\\\033[1;32m'\n# export YELLOW='\\\\033[1;33m'\n# export LIGHT_BLUE='\\\\033[1;34m'\n# export LIGHT_PURPLE='\\\\033[1;35m'\n# export LIGHT_CYAN='\\\\033[1;36m'\n# export WHITE='\\\\033[1;37m'\n# export DEFAULT='\\\\033[0m'\n\n# === COLORS ===\n\n## Uncomment and edit to override these defaults.\n## Reference the constants from the color map above,\n## or use $NONE to disable highlighting.\n#\n# Priorities can be any upper-case letter.\n# A,B,C are highlighted; you can add coloring for more.\n#\n# export PRI_A=$YELLOW        # color for A priority\n# export PRI_B=$GREEN         # color for B priority\n# export PRI_C=$LIGHT_BLUE    # color for C priority\n# export PRI_D=...            # define your own\n# export PRI_X=$WHITE         # color unless explicitly defined\n\n# There is highlighting for tasks that have been done,\n# but haven't been archived yet.\n#\n# export COLOR_DONE=$LIGHT_GREY\n\n# There is highlighting for projects, contexts, dates, and item numbers.\n#\n# export COLOR_PROJECT=$RED\n# export COLOR_CONTEXT=$RED\n# export COLOR_DATE=$BLUE\n# export COLOR_NUMBER=$LIGHT_GREY\n\n# There is highlighting for metadata key:value pairs e.g.\n# DUE:2006-08-01 or note:MYNOTE\n#\n# export COLOR_META=$CYAN\n\n# === BEHAVIOR ===\n\n## verbosity\n#\n# By default, additional information and confirmation of actions (like\n# \"TODO: 1 added\") are printed. You can suppress this via 0 or add extra\n# verbosity via 2.\n# export TODOTXT_VERBOSE=1\n\n## customize list output\n#\n# TODOTXT_SORT_COMMAND will filter after line numbers are\n# inserted, but before colorization, and before hiding of\n# priority, context, and project.\n#\n# export TODOTXT_SORT_COMMAND='env LC_COLLATE=C sort -f -k2'\n\n# TODOTXT_FINAL_FILTER will filter list output after colorization,\n# priority hiding, context hiding, and project hiding. That is,\n# just before the list output is displayed.\n#\n# export TODOTXT_FINAL_FILTER='cat'\n\n## default actions\n# Set a default action for calling todo.sh without arguments.\n# Also allows for parameters for the action.\n# export TODOTXT_DEFAULT_ACTION=''\n"
        },
        {
          "name": "todo.sh",
          "type": "blob",
          "size": 49.2529296875,
          "content": "#!/usr/bin/env bash\n\n# === HEAVY LIFTING ===\nshopt -s extglob extquote\n\n# NOTE: Todo.sh requires a configuration file to run.\n# Place it in one of the default locations or use the -d option for a custom location.\n\n[ -f VERSION-FILE ] && . VERSION-FILE || VERSION=\"@DEV_VERSION@\"\nversion()\n{\n    cat <<-EndVersion\n\t\tTODO.TXT Command Line Interface v$VERSION\n\n\t\tHomepage: http://todotxt.org/\n\t\tCode repository: https://github.com/todotxt/todo.txt-cli\n\t\tContributors: https://github.com/todotxt/todo.txt-cli/graphs/contributors\n\t\tLicense: https://github.com/todotxt/todo.txt-cli/blob/master/LICENSE\n\tEndVersion\n    exit 0\n}\n\n# Set script name and full path early.\nTODO_SH=$(basename \"$0\")\nTODO_FULL_SH=\"$0\"\nexport TODO_SH TODO_FULL_SH\n\noneline_usage=\"$TODO_SH [-fhpantvV] [-d todo_config] action [task_number] [task_description]\"\n\nusage()\n{\n    cat <<-EndUsage\n\t\tUsage: $oneline_usage\n\t\tTry '$TODO_SH -h' for more information.\n\tEndUsage\n    exit 1\n}\n\nshorthelp()\n{\n    cat <<-EndHelp\n\t\t  Usage: $oneline_usage\n\n\t\t  Actions:\n\t\t    add|a \"THING I NEED TO DO +project @context\"\n\t\t    addm \"THINGS I NEED TO DO\n\t\t          MORE THINGS I NEED TO DO\"\n\t\t    addto DEST \"TEXT TO ADD\"\n\t\t    append|app NR \"TEXT TO APPEND\"\n\t\t    archive\n\t\t    command [ACTIONS]\n\t\t    deduplicate\n\t\t    del|rm NR [TERM]\n\t\t    depri|dp NR [NR ...]\n\t\t    done|do NR [NR ...]\n\t\t    help [ACTION...]\n\t\t    list|ls [TERM...]\n\t\t    listall|lsa [TERM...]\n\t\t    listaddons\n\t\t    listcon|lsc [TERM...]\n\t\t    listfile|lf [SRC [TERM...]]\n\t\t    listpri|lsp [PRIORITIES] [TERM...]\n\t\t    listproj|lsprj [TERM...]\n\t\t    move|mv NR DEST [SRC]\n\t\t    prepend|prep NR \"TEXT TO PREPEND\"\n\t\t    pri|p NR PRIORITY [NR PRIORITY ...]\n\t\t    replace NR \"UPDATED TODO\"\n\t\t    report\n\t\t    shorthelp\n\n\t\t  Actions can be added and overridden using scripts in the actions\n\t\t  directory.\n\tEndHelp\n\n    # Only list the one-line usage from the add-on actions. This assumes that\n    # add-ons use the same usage indentation structure as todo.sh.\n    addonHelp | grep -e '^  Add-on Actions:' -e '^    [[:alpha:]]'\n\n    cat <<-EndHelpFooter\n\n\t\t  See \"help\" for more details.\n\tEndHelpFooter\n}\n\nhelp()\n{\n    local indentedJoinedConfigFileLocations\n    printf -v indentedJoinedConfigFileLocations '          %s\\n' \"${configFileLocations[@]}\"\n    cat <<-EndOptionsHelp\n\t\t  Usage: $oneline_usage\n\n\t\t  Options:\n\t\t    -@\n\t\t        Hide context names in list output.  Use twice to show context\n\t\t        names (default).\n\t\t    -+\n\t\t        Hide project names in list output.  Use twice to show project\n\t\t        names (default).\n\t\t    -c\n\t\t        Color mode\n\t\t    -d CONFIG_FILE\n\t\t        Use a configuration file other than one of the defaults:\n$indentedJoinedConfigFileLocations\n\t\t    -f\n\t\t        Forces actions without confirmation or interactive input\n\t\t    -h\n\t\t        Display a short help message; same as action \"shorthelp\"\n\t\t    -p\n\t\t        Plain mode turns off colors\n\t\t    -P\n\t\t        Hide priority labels in list output.  Use twice to show\n\t\t        priority labels (default).\n\t\t    -a\n\t\t        Don't auto-archive tasks automatically on completion\n\t\t    -A\n\t\t        Auto-archive tasks automatically on completion\n\t\t    -n\n\t\t        Don't preserve line numbers; automatically remove blank lines\n\t\t        on task deletion\n\t\t    -N\n\t\t        Preserve line numbers\n\t\t    -t\n\t\t        Prepend the current date to a task automatically\n\t\t        when it's added.\n\t\t    -T\n\t\t        Do not prepend the current date to a task automatically\n\t\t        when it's added.\n\t\t    -v\n\t\t        Verbose mode turns on confirmation messages\n\t\t    -vv\n\t\t        Extra verbose mode prints some debugging information and\n\t\t        additional help text\n\t\t    -V\n\t\t        Displays version, license and credits\n\t\t    -x\n\t\t        Disables TODOTXT_FINAL_FILTER\n\n\tEndOptionsHelp\n\n    [ \"$TODOTXT_VERBOSE\" -gt 1 ] && cat <<-'EndVerboseHelp'\n\t\t  Environment variables:\n\t\t    TODOTXT_AUTO_ARCHIVE            is same as option -a (0)/-A (1)\n\t\t    TODOTXT_CFG_FILE=CONFIG_FILE    is same as option -d CONFIG_FILE\n\t\t    TODOTXT_FORCE=1                 is same as option -f\n\t\t    TODOTXT_PRESERVE_LINE_NUMBERS   is same as option -n (0)/-N (1)\n\t\t    TODOTXT_PLAIN                   is same as option -p (1)/-c (0)\n\t\t    TODOTXT_DATE_ON_ADD             is same as option -t (1)/-T (0)\n\t\t    TODOTXT_PRIORITY_ON_ADD=pri     default priority A-Z\n\t\t    TODOTXT_VERBOSE=1               is same as option -v\n\t\t    TODOTXT_DISABLE_FILTER=1        is same as option -x\n\t\t    TODOTXT_DEFAULT_ACTION=\"\"       run this when called with no arguments\n\t\t    TODOTXT_SORT_COMMAND=\"sort ...\" customize list output\n\t\t    TODOTXT_FINAL_FILTER=\"sed ...\"  customize list after color, P@+ hiding\n\t\t    TODOTXT_SOURCEVAR=\\$DONE_FILE   use another source for listcon, listproj\n\t\t    TODOTXT_SIGIL_BEFORE_PATTERN=\"\" optionally allow chars preceding +p / @c\n\t\t    TODOTXT_SIGIL_VALID_PATTERN=.*  tweak the allowed chars for +p and @c\n\t\t    TODOTXT_SIGIL_AFTER_PATTERN=\"\"  optionally allow chars after +p / @c\n\n\tEndVerboseHelp\n    actionsHelp\n    addonHelp\n}\n\nactionsHelp()\n{\n    cat <<-EndActionsHelp\n\t\t  Built-in Actions:\n\t\t    add \"THING I NEED TO DO +project @context\"\n\t\t    a \"THING I NEED TO DO +project @context\"\n\t\t      Adds THING I NEED TO DO to your todo.txt file on its own line.\n\t\t      Project and context notation optional.\n\t\t      Quotes optional.\n\n\t\t    addm \"FIRST THING I NEED TO DO +project1 @context\n\t\t    SECOND THING I NEED TO DO +project2 @context\"\n\t\t      Adds FIRST THING I NEED TO DO to your todo.txt on its own line and\n\t\t      Adds SECOND THING I NEED TO DO to you todo.txt on its own line.\n\t\t      Project and context notation optional.\n\n\t\t    addto DEST \"TEXT TO ADD\"\n\t\t      Adds a line of text to any file located in the todo.txt directory.\n\t\t      For example, addto inbox.txt \"decide about vacation\"\n\n\t\t    append NR \"TEXT TO APPEND\"\n\t\t    app NR \"TEXT TO APPEND\"\n\t\t      Adds TEXT TO APPEND to the end of the task on line NR.\n\t\t      Quotes optional.\n\n\t\t    archive\n\t\t      Moves all done tasks from todo.txt to done.txt and removes blank lines.\n\n\t\t    command [ACTIONS]\n\t\t      Runs the remaining arguments using only todo.sh builtins.\n\t\t      Will not call any .todo.actions.d scripts.\n\n\t\t    deduplicate\n\t\t      Removes duplicate lines from todo.txt.\n\n\t\t    del NR [TERM]\n\t\t    rm NR [TERM]\n\t\t      Deletes the task on line NR in todo.txt.\n\t\t      If TERM specified, deletes only TERM from the task.\n\n\t\t    depri NR [NR ...]\n\t\t    dp NR [NR ...]\n\t\t      Deprioritizes (removes the priority) from the task(s)\n\t\t      on line NR in todo.txt.\n\n\t\t    done NR [NR ...]\n\t\t    do NR [NR ...]\n\t\t      Marks task(s) on line NR as done in todo.txt.\n\n\t\t    help [ACTION...]\n\t\t      Display help about usage, options, built-in and add-on actions,\n\t\t      or just the usage help for the passed ACTION(s).\n\n\t\t    list [TERM...]\n\t\t    ls [TERM...]\n\t\t      Displays all tasks that contain TERM(s) sorted by priority with line\n\t\t      numbers.  Each task must match all TERM(s) (logical AND); to display\n\t\t      tasks that contain any TERM (logical OR), use\n\t\t      'TERM1\\|TERM2\\|...' (with quotes), or TERM1\\\\\\|TERM2 (unquoted).\n\t\t      Hides all tasks that contain TERM(s) preceded by a\n\t\t      minus sign (i.e. -TERM).\n\t\t      TERM(s) are grep-style basic regular expressions; for literal matching,\n\t\t      put a single backslash before any [ ] \\ $ * . ^ and enclose the entire\n\t\t      TERM in single quotes, or use double backslashes and extra shell-quoting.\n\t\t      If no TERM specified, lists entire todo.txt.\n\n\t\t    listall [TERM...]\n\t\t    lsa [TERM...]\n\t\t      Displays all the lines in todo.txt AND done.txt that contain TERM(s)\n\t\t      sorted by priority with line numbers.  Hides all tasks that\n\t\t      contain TERM(s) preceded by a minus sign (i.e. -TERM).  If no\n\t\t      TERM specified, lists entire todo.txt AND done.txt\n\t\t      concatenated and sorted.\n\n\t\t    listaddons\n\t\t      Lists all added and overridden actions in the actions directory.\n\n\t\t    listcon [TERM...]\n\t\t    lsc [TERM...]\n\t\t      Lists all the task contexts that start with the @ sign in todo.txt.\n\t\t      If TERM specified, considers only tasks that contain TERM(s).\n\n\t\t    listfile [SRC [TERM...]]\n\t\t    lf [SRC [TERM...]]\n\t\t      Displays all the lines in SRC file located in the todo.txt directory,\n\t\t      sorted by priority with line numbers.  If TERM specified, lists\n\t\t      all lines that contain TERM(s) in SRC file.  Hides all tasks that\n\t\t      contain TERM(s) preceded by a minus sign (i.e. -TERM).\n\t\t      Without any arguments, the names of all text files in the todo.txt\n\t\t      directory are listed.\n\n\t\t    listpri [PRIORITIES] [TERM...]\n\t\t    lsp [PRIORITIES] [TERM...]\n\t\t      Displays all tasks prioritized PRIORITIES.\n\t\t      PRIORITIES can be a [concatenation of] single (A) or range (A-C).\n\t\t      If no PRIORITIES specified, lists all prioritized tasks.\n\t\t      If TERM specified, lists only prioritized tasks that contain TERM(s).\n\t\t      Hides all tasks that contain TERM(s) preceded by a minus sign\n\t\t      (i.e. -TERM).\n\n\t\t    listproj [TERM...]\n\t\t    lsprj [TERM...]\n\t\t      Lists all the projects (terms that start with a + sign) in\n\t\t      todo.txt.\n\t\t      If TERM specified, considers only tasks that contain TERM(s).\n\n\t\t    move NR DEST [SRC]\n\t\t    mv NR DEST [SRC]\n\t\t      Moves the line NR from source text file (SRC) to destination text file (DEST).\n\t\t      Both source and destination file must be located in the directory defined\n\t\t      in the configuration directory.  When SRC is not defined\n\t\t      it's by default todo.txt.\n\n\t\t    prepend NR \"TEXT TO PREPEND\"\n\t\t    prep NR \"TEXT TO PREPEND\"\n\t\t      Adds TEXT TO PREPEND to the beginning of the task on line NR.\n\t\t      Quotes optional.\n\n\t\t    pri NR PRIORITY\n\t\t    p NR PRIORITY\n\t\t      Adds PRIORITY to task on line NR.  If the task is already\n\t\t      prioritized, replaces current priority with new PRIORITY.\n\t\t      PRIORITY must be a letter between A and Z.\n\n\t\t    replace NR \"UPDATED TODO\"\n\t\t      Replaces task on line NR with UPDATED TODO.\n\n\t\t    report\n\t\t      Adds the number of open tasks and done tasks to report.txt.\n\n\t\t    shorthelp\n\t\t      List the one-line usage of all built-in and add-on actions.\n\n\tEndActionsHelp\n}\n\naddonHelp()\n{\n    if [ -d \"$TODO_ACTIONS_DIR\" ]; then\n        local didPrintAddonActionsHeader\n        for action in \"$TODO_ACTIONS_DIR\"/*; do\n            if [ -f \"$action\" ] && [ -x \"$action\" ]; then\n                if [ -z \"$didPrintAddonActionsHeader\" ]; then\n                    cat <<-EndAddonActionsHeader\n\t\t\t\t\t  Add-on Actions:\n\t\t\t\t\tEndAddonActionsHeader\n                    didPrintAddonActionsHeader=1\n                fi\n                \"$action\" usage\n            elif [ -d \"$action\" ] && [ -x \"$action\"/\"$(basename \"$action\")\" ]; then\n                if [ -z \"$didPrintAddonActionsHeader\" ]; then\n                    cat <<-EndAddonActionsHeader\n\t\t\t\t\t  Add-on Actions:\n\t\t\t\t\tEndAddonActionsHeader\n                    didPrintAddonActionsHeader=1\n                fi\n                \"$action\"/\"$(basename \"$action\")\" usage\n            fi\n        done\n    fi\n}\n\nactionUsage()\n{\n    for actionName; do\n        action=\"${TODO_ACTIONS_DIR}/${actionName}\"\n        if [ -f \"$action\" ] && [ -x \"$action\" ]; then\n            \"$action\" usage\n        elif [ -d \"$action\" ] && [ -x \"$action\"/\"$(basename \"$action\")\" ]; then\n            \"$action\"/\"$(basename \"$action\")\" usage\n        else\n            builtinActionUsage=$(actionsHelp | sed -n -e \"/^    ${actionName//\\//\\\\/} /,/^\\$/p\" -e \"/^    ${actionName//\\//\\\\/}$/,/^\\$/p\")\n            if [ -n \"$builtinActionUsage\" ]; then\n                echo \"$builtinActionUsage\"\n                echo\n            else\n                die \"TODO: No action \\\"${actionName}\\\" exists.\"\n            fi\n        fi\n    done\n}\n\ndieWithHelp()\n{\n    case \"$1\" in\n        help)       help;;\n        shorthelp)  shorthelp;;\n    esac >&2\n    shift\n\n    die \"$@\"\n}\n\ndie()\n{\n    echo >&2 \"$*\"\n    exit 1\n}\n\nconfirm()\n{\n    [ \"$TODOTXT_FORCE\" = 0 ] || return 0\n\n    local readArgs=(-e -r)\n    if [ -n \"${BASH_VERSINFO:-}\" ] && ((BASH_VERSINFO[0] > 4 || (BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] >= 1) )); then\n        readArgs+=(-N 1)    # Bash 4.1+ supports -N nchars\n    fi\n    local answer\n    read -rp \"${1:?}? (y/n) \" \"${readArgs[@]}\" answer\n    echo\n    [ \"$answer\" = \"y\" ]\n}\n\ncleaninput()\n{\n    # Parameters:    When $1 = \"for sed\", performs additional escaping for use\n    #                in sed substitution with \"|\" separators.\n    # Precondition:  $input contains text to be cleaned.\n    # Postcondition: Modifies $input.\n\n    # Replace CR and LF with space; tasks always comprise a single line.\n    input=${input//$'\\r'/ }\n    input=${input//$'\\n'/ }\n\n    if [ \"$1\" = \"for sed\" ]; then\n        # This action uses sed with \"|\" as the substitution separator, and & as\n        # the matched string; these must be escaped.\n        # Backslashes must be escaped, too, and before the other stuff.\n        input=${input//\\\\/\\\\\\\\}\n        input=${input//|/\\\\|}\n        input=${input//&/\\\\&}\n    fi\n}\n\ngetPrefix()\n{\n    # Parameters:    $1: todo file; empty means $TODO_FILE.\n    # Returns:       Uppercase FILE prefix to be used in place of \"TODO:\" where\n    #                a different todo file can be specified.\n    local base\n    base=$(basename \"${1:-$TODO_FILE}\")\n    echo \"${base%%.[^.]*}\" | tr '[:lower:]' '[:upper:]'\n}\n\ngetTodo()\n{\n    # Parameters:    $1: task number\n    #                $2: Optional todo file\n    # Precondition:  $errmsg contains usage message.\n    # Postcondition: $todo contains task text.\n\n    local item=$1\n    [ -z \"$item\" ] && die \"$errmsg\"\n    [ -n \"${item//[0-9]/}\" ] && die \"$errmsg\"\n\n    todo=$(sed \"$item!d\" \"${2:-$TODO_FILE}\")\n    [ -z \"$todo\" ] && die \"$(getPrefix \"$2\"): No task $item.\"\n}\n\ngetNewtodo()\n{\n    # Parameters:    $1: task number\n    #                $2: Optional todo file\n    # Precondition:  None.\n    # Postcondition: $newtodo contains task text.\n\n    local item=$1\n    [ -z \"$item\" ] && die \"Programming error: $item should exist.\"\n    [ -n \"${item//[0-9]/}\" ] && die \"Programming error: $item should be numeric.\"\n\n    newtodo=$(sed \"$item!d\" \"${2:-$TODO_FILE}\")\n    [ -z \"$newtodo\" ] && die \"$(getPrefix \"$2\"): No updated task $item.\"\n}\n\nreplaceOrPrepend()\n{\n  action=$1; shift\n  case \"$action\" in\n    replace)\n      backref=\n      querytext=\"Replacement: \"\n      ;;\n    prepend)\n      backref=' &'\n      querytext=\"Prepend: \"\n      ;;\n  esac\n  shift; item=$1; shift\n  getTodo \"$item\"\n\n  if [[ -z \"$1\" && $TODOTXT_FORCE = 0 ]]; then\n    read -p \"$querytext\" -r -i \"$todo\" -e input\n  else\n    input=$*\n  fi\n\n  # Retrieve existing priority and prepended date\n  local -r priAndDateExpr='^\\((.) \\)\\{0,1\\}\\([0-9]\\{2,4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} \\)\\{0,1\\}'\n  originalPriority=$(sed -e \"$item!d\" -e \"${item}s/${priAndDateExpr}.*/\\\\1/\" \"$TODO_FILE\")\n  priority=\"$originalPriority\"\n  originalPrepdate=$(sed -e \"$item!d\" -e \"${item}s/${priAndDateExpr}.*/\\\\2/\" \"$TODO_FILE\")\n  prepdate=\"$originalPrepdate\"\n  if [ \"$action\" = \"replace\" ]; then\n    replacementPrepdate=\"$(echo \"$input\"|sed -e \"s/${priAndDateExpr}.*/\\\\2/\")\"\n    if [ \"$replacementPrepdate\" ]; then\n      # If the replaced text starts with a [priority +] date, it will replace\n      # the existing date, too.\n      prepdate=\"$replacementPrepdate\"\n    fi\n    replacementPriority=\"$(echo \"$input\"|sed -e \"s/${priAndDateExpr}.*/\\\\1/\")\"\n    if [ \"$replacementPriority\" ]; then\n      # If the replaced text starts with a priority, it will replace\n      # the existing priority, too.\n      priority=\"$replacementPriority\"\n    fi\n    input=\"$(echo \"$input\"|sed -e \"s/${priAndDateExpr}//\")\"\n  fi\n\n  # Temporarily remove any existing priority and prepended date, perform the\n  # change (replace/prepend) and re-insert the existing priority and prepended\n  # date again.\n  cleaninput \"for sed\"\n  sed -i.bak -e \"$item s/^${originalPriority}${originalPrepdate}//\" -e \"$item s|^.*|${priority}${prepdate}${input}${backref}|\" \"$TODO_FILE\"\n  if [ \"$TODOTXT_VERBOSE\" -gt 0 ]; then\n    getNewtodo \"$item\"\n    case \"$action\" in\n      replace)\n        echo \"$item $todo\"\n        echo \"TODO: Replaced task with:\"\n        echo \"$item $newtodo\"\n        ;;\n      prepend)\n        echo \"$item $newtodo\"\n        ;;\n    esac\n\n  fi\n}\n\nfixMissingEndOfLine()\n{\n    # Parameters:    $1: todo file; empty means $TODO_FILE.\n    todo_path=\"${1:-$TODO_FILE}\"\n    [[ -f $todo_path && $(tail -c1 \"$todo_path\") ]] && echo \"\" >> \"$todo_path\"    \n}\n\nuppercasePriority()\n{\n    # Precondition:  $input contains task text for which to uppercase priority.\n    # Postcondition: Modifies $input.\n    lower=( {a..z} )\n    upper=( {A..Z} )\n    for ((i=0; i<26; i++)); do\n        upperPriority=\"${upperPriority};s/^[(]${lower[i]}[)]/(${upper[i]})/\"\n    done\n    input=$(echo \"$input\" | sed \"$upperPriority\")\n}\n\n# Preserving environment variables so they don't get clobbered by the config file\nOVR_TODOTXT_AUTO_ARCHIVE=\"$TODOTXT_AUTO_ARCHIVE\"\nOVR_TODOTXT_FORCE=\"$TODOTXT_FORCE\"\nOVR_TODOTXT_PRESERVE_LINE_NUMBERS=\"$TODOTXT_PRESERVE_LINE_NUMBERS\"\nOVR_TODOTXT_PLAIN=\"$TODOTXT_PLAIN\"\nOVR_TODOTXT_DATE_ON_ADD=\"$TODOTXT_DATE_ON_ADD\"\nOVR_TODOTXT_PRIORITY_ON_ADD=\"$TODOTXT_PRIORITY_ON_ADD\"\nOVR_TODOTXT_DISABLE_FILTER=\"$TODOTXT_DISABLE_FILTER\"\nOVR_TODOTXT_VERBOSE=\"$TODOTXT_VERBOSE\"\nOVR_TODOTXT_DEFAULT_ACTION=\"$TODOTXT_DEFAULT_ACTION\"\nOVR_TODOTXT_SORT_COMMAND=\"$TODOTXT_SORT_COMMAND\"\nOVR_TODOTXT_FINAL_FILTER=\"$TODOTXT_FINAL_FILTER\"\n\n# Prevent GREP_OPTIONS from malforming grep's output\nexport GREP_OPTIONS=\"\"\n\n# == PROCESS OPTIONS ==\nwhile getopts \":fhpcnNaAtTvVx+@Pd:\" Option; do\n  case $Option in\n    '@')\n        # HIDE_CONTEXT_NAMES starts at zero (false); increment it to one\n        #   (true) the first time this flag is seen. Each time the flag\n        #   is seen after that, increment it again so that an even\n        #   number shows context names and an odd number hides context\n        #   names.\n        : $(( HIDE_CONTEXT_NAMES++ ))\n        if (( HIDE_CONTEXT_NAMES % 2 == 0 )); then\n            # Zero or even value -- show context names\n            unset HIDE_CONTEXTS_SUBSTITUTION\n        else\n            # One or odd value -- hide context names\n            export HIDE_CONTEXTS_SUBSTITUTION='[[:space:]]@[[:graph:]]\\{1,\\}'\n        fi\n        ;;\n    '+')\n        # HIDE_PROJECT_NAMES starts at zero (false); increment it to one\n        #   (true) the first time this flag is seen. Each time the flag\n        #   is seen after that, increment it again so that an even\n        #   number shows project names and an odd number hides project\n        #   names.\n        : $(( HIDE_PROJECT_NAMES++ ))\n        if (( HIDE_PROJECT_NAMES % 2 == 0 )); then\n            # Zero or even value -- show project names\n            unset HIDE_PROJECTS_SUBSTITUTION\n        else\n            # One or odd value -- hide project names\n            export HIDE_PROJECTS_SUBSTITUTION='[[:space:]][+][[:graph:]]\\{1,\\}'\n        fi\n        ;;\n    a)\n        OVR_TODOTXT_AUTO_ARCHIVE=0\n        ;;\n    A)\n        OVR_TODOTXT_AUTO_ARCHIVE=1\n        ;;\n    c)\n        OVR_TODOTXT_PLAIN=0\n        ;;\n    d)\n        TODOTXT_CFG_FILE=$OPTARG\n        ;;\n    f)\n        OVR_TODOTXT_FORCE=1\n        ;;\n    h)\n        # Short-circuit option parsing and forward to the action.\n        # Cannot just invoke shorthelp() because we need the configuration\n        # processed to locate the add-on actions directory.\n        set -- '-h' 'shorthelp'\n        OPTIND=2\n        ;;\n    n)\n        OVR_TODOTXT_PRESERVE_LINE_NUMBERS=0\n        ;;\n    N)\n        OVR_TODOTXT_PRESERVE_LINE_NUMBERS=1\n        ;;\n    p)\n        OVR_TODOTXT_PLAIN=1\n        ;;\n    P)\n        # HIDE_PRIORITY_LABELS starts at zero (false); increment it to one\n        #   (true) the first time this flag is seen. Each time the flag\n        #   is seen after that, increment it again so that an even\n        #   number shows priority labels and an odd number hides priority\n        #   labels.\n        : $(( HIDE_PRIORITY_LABELS++ ))\n        if (( HIDE_PRIORITY_LABELS % 2 == 0 )); then\n            # Zero or even value -- show priority labels\n            unset HIDE_PRIORITY_SUBSTITUTION\n        else\n            # One or odd value -- hide priority labels\n            export HIDE_PRIORITY_SUBSTITUTION=\"([A-Z])[[:space:]]\"\n        fi\n        ;;\n    t)\n        OVR_TODOTXT_DATE_ON_ADD=1\n        ;;\n    T)\n        OVR_TODOTXT_DATE_ON_ADD=0\n        ;;\n    v)\n        : $(( TODOTXT_VERBOSE++ ))\n        ;;\n    V)\n        version\n        ;;\n    x)\n        OVR_TODOTXT_DISABLE_FILTER=1\n        ;;\n    *)\n        usage\n        ;;\n  esac\ndone\nshift $((OPTIND - 1))\n\n# defaults if not yet defined\nTODOTXT_VERBOSE=${TODOTXT_VERBOSE:-1}\nTODOTXT_PLAIN=${TODOTXT_PLAIN:-0}\nTODOTXT_FORCE=${TODOTXT_FORCE:-0}\nTODOTXT_PRESERVE_LINE_NUMBERS=${TODOTXT_PRESERVE_LINE_NUMBERS:-1}\nTODOTXT_AUTO_ARCHIVE=${TODOTXT_AUTO_ARCHIVE:-1}\nTODOTXT_DATE_ON_ADD=${TODOTXT_DATE_ON_ADD:-0}\nTODOTXT_PRIORITY_ON_ADD=${TODOTXT_PRIORITY_ON_ADD:-}\nTODOTXT_DEFAULT_ACTION=${TODOTXT_DEFAULT_ACTION:-}\nTODOTXT_SORT_COMMAND=${TODOTXT_SORT_COMMAND:-env LC_COLLATE=C sort -f -k2}\nTODOTXT_DISABLE_FILTER=${TODOTXT_DISABLE_FILTER:-}\nTODOTXT_FINAL_FILTER=${TODOTXT_FINAL_FILTER:-cat}\nTODOTXT_GLOBAL_CFG_FILE=${TODOTXT_GLOBAL_CFG_FILE:-/etc/todo/config}\nTODOTXT_SIGIL_BEFORE_PATTERN=${TODOTXT_SIGIL_BEFORE_PATTERN:-}    # Allow any other non-whitespace entity before +project and @context; should be an optional match; example: \\(w:\\)\\{0,1\\} to allow w:@context.\nTODOTXT_SIGIL_VALID_PATTERN=${TODOTXT_SIGIL_VALID_PATTERN:-.*}    # Limit the valid characters (from the default any non-whitespace sequence) for +project and @context; example: [a-zA-Z]\\{3,\\} to only allow alphabetic ones that are at least three characters long.\nTODOTXT_SIGIL_AFTER_PATTERN=${TODOTXT_SIGIL_AFTER_PATTERN:-}    # Allow any other non-whitespace entity after +project and @context; should be an optional match; example: )\\{0,1\\} to allow (with the corresponding TODOTXT_SIGIL_BEFORE_PATTERN) enclosing in parentheses.\n\n# Export all TODOTXT_* variables\nexport \"${!TODOTXT_@}\"\n\n# Default color map\nexport NONE=''\nexport BLACK='\\\\033[0;30m'\nexport RED='\\\\033[0;31m'\nexport GREEN='\\\\033[0;32m'\nexport BROWN='\\\\033[0;33m'\nexport BLUE='\\\\033[0;34m'\nexport PURPLE='\\\\033[0;35m'\nexport CYAN='\\\\033[0;36m'\nexport LIGHT_GREY='\\\\033[0;37m'\nexport DARK_GREY='\\\\033[1;30m'\nexport LIGHT_RED='\\\\033[1;31m'\nexport LIGHT_GREEN='\\\\033[1;32m'\nexport YELLOW='\\\\033[1;33m'\nexport LIGHT_BLUE='\\\\033[1;34m'\nexport LIGHT_PURPLE='\\\\033[1;35m'\nexport LIGHT_CYAN='\\\\033[1;36m'\nexport WHITE='\\\\033[1;37m'\nexport DEFAULT='\\\\033[0m'\n\n# Default priority->color map.\nexport PRI_A=$YELLOW        # color for A priority\nexport PRI_B=$GREEN         # color for B priority\nexport PRI_C=$LIGHT_BLUE    # color for C priority\nexport PRI_X=$WHITE         # color unless explicitly defined\n\n# Default project, context, date, item number, and metadata key:value pairs colors.\nexport COLOR_PROJECT=$NONE\nexport COLOR_CONTEXT=$NONE\nexport COLOR_DATE=$NONE\nexport COLOR_NUMBER=$NONE\nexport COLOR_META=$NONE\n\n# Default highlight colors.\nexport COLOR_DONE=$LIGHT_GREY   # color for done (but not yet archived) tasks\n\n# Default sentence delimiters for todo.sh append.\n# If the text to be appended to the task begins with one of these characters, no\n# whitespace is inserted in between. This makes appending to an enumeration\n# (todo.sh add 42 \", foo\") syntactically correct.\nexport SENTENCE_DELIMITERS=',.:;'\n\nconfigFileLocations=(\n    \"$HOME/.todo/config\"\n    \"$HOME/todo.cfg\"\n    \"$HOME/.todo.cfg\"\n    \"${XDG_CONFIG_HOME:-$HOME/.config}/todo/config\"\n    \"$(dirname \"$0\")/todo.cfg\"\n    \"$TODOTXT_GLOBAL_CFG_FILE\"\n)\n\n[ -e \"$TODOTXT_CFG_FILE\" ] || for CFG_FILE_ALT in \"${configFileLocations[@]}\"; do\n    if [ -e \"$CFG_FILE_ALT\" ]; then\n        TODOTXT_CFG_FILE=\"$CFG_FILE_ALT\"\n        break\n    fi\ndone\n\nif [ -z \"$TODO_ACTIONS_DIR\" ] || [ ! -d \"$TODO_ACTIONS_DIR\" ]; then\n    TODO_ACTIONS_DIR=\"$HOME/.todo/actions\"\n    export TODO_ACTIONS_DIR\nfi\n\n[ -d \"$TODO_ACTIONS_DIR\" ] || for TODO_ACTIONS_DIR_ALT in \\\n    \"$HOME/.todo.actions.d\" \\\n    \"${XDG_CONFIG_HOME:-$HOME/.config}/todo/actions\"; do\n    if [ -d \"$TODO_ACTIONS_DIR_ALT\" ]; then\n        TODO_ACTIONS_DIR=\"$TODO_ACTIONS_DIR_ALT\"\n        break\n    fi\ndone\n\n# === SANITY CHECKS (thanks Karl!) ===\n[ -r \"$TODOTXT_CFG_FILE\" ] || dieWithHelp \"$1\" \"Fatal Error: Cannot read configuration file ${TODOTXT_CFG_FILE:-${configFileLocations[0]}}\"\n\n# shellcheck source=./todo.cfg\n. \"$TODOTXT_CFG_FILE\"\n\n# === APPLY OVERRIDES\nif [ -n \"$OVR_TODOTXT_AUTO_ARCHIVE\" ]; then\n    TODOTXT_AUTO_ARCHIVE=\"$OVR_TODOTXT_AUTO_ARCHIVE\"\nfi\nif [ -n \"$OVR_TODOTXT_FORCE\" ]; then\n    TODOTXT_FORCE=\"$OVR_TODOTXT_FORCE\"\nfi\nif [ -n \"$OVR_TODOTXT_PRESERVE_LINE_NUMBERS\" ]; then\n    TODOTXT_PRESERVE_LINE_NUMBERS=\"$OVR_TODOTXT_PRESERVE_LINE_NUMBERS\"\nfi\nif [ -n \"$OVR_TODOTXT_PLAIN\" ]; then\n    TODOTXT_PLAIN=\"$OVR_TODOTXT_PLAIN\"\nfi\nif [ -n \"$OVR_TODOTXT_DATE_ON_ADD\" ]; then\n    TODOTXT_DATE_ON_ADD=\"$OVR_TODOTXT_DATE_ON_ADD\"\nfi\nif [ -n \"$OVR_TODOTXT_PRIORITY_ON_ADD\" ]; then\n    TODOTXT_PRIORITY_ON_ADD=\"$OVR_TODOTXT_PRIORITY_ON_ADD\"\nfi\nif [ -n \"$OVR_TODOTXT_DISABLE_FILTER\" ]; then\n    TODOTXT_DISABLE_FILTER=\"$OVR_TODOTXT_DISABLE_FILTER\"\nfi\nif [ -n \"$OVR_TODOTXT_VERBOSE\" ]; then\n    TODOTXT_VERBOSE=\"$OVR_TODOTXT_VERBOSE\"\nfi\nif [ -n \"$OVR_TODOTXT_DEFAULT_ACTION\" ]; then\n    TODOTXT_DEFAULT_ACTION=\"$OVR_TODOTXT_DEFAULT_ACTION\"\nfi\nif [ -n \"$OVR_TODOTXT_SORT_COMMAND\" ]; then\n    TODOTXT_SORT_COMMAND=\"$OVR_TODOTXT_SORT_COMMAND\"\nfi\nif [ -n \"$OVR_TODOTXT_FINAL_FILTER\" ]; then\n    TODOTXT_FINAL_FILTER=\"$OVR_TODOTXT_FINAL_FILTER\"\nfi\n\nisDefaultAction=\nif [ -n \"$1\" ]; then\n    ACTION=$1\nelse\n    ACTION=$TODOTXT_DEFAULT_ACTION\n    isDefaultAction=t\nfi\n\n[ -z \"$ACTION\" ] && usage\n[ -d \"$TODO_DIR\" ] || mkdir -p \"$TODO_DIR\" 2>/dev/null || dieWithHelp \"$1\" \"Fatal Error: $TODO_DIR is not a directory\"\n( cd -- \"$TODO_DIR\" ) || dieWithHelp \"$1\" \"Fatal Error: Unable to cd to $TODO_DIR\"\n[ -z \"$TODOTXT_PRIORITY_ON_ADD\" ] \\\n    || echo \"$TODOTXT_PRIORITY_ON_ADD\" | grep -q \"^[A-Z]$\" \\\n    || die \"TODOTXT_PRIORITY_ON_ADD should be a capital letter from A to Z (it is now \\\"$TODOTXT_PRIORITY_ON_ADD\\\").\"\n\n[ -z \"$TODO_FILE\" ] && TODO_FILE=\"$TODO_DIR/todo.txt\"\n[ -z \"$DONE_FILE\" ] && DONE_FILE=\"$TODO_DIR/done.txt\"\n[ -z \"$REPORT_FILE\" ] && REPORT_FILE=\"$TODO_DIR/report.txt\"\n\n[ -f \"$TODO_FILE\" ] || [ -c \"$TODO_FILE\" ] || : > \"$TODO_FILE\"\n[ -f \"$DONE_FILE\" ] || [ -c \"$DONE_FILE\" ] || : > \"$DONE_FILE\"\n[ -f \"$REPORT_FILE\" ] || [ -c \"$REPORT_FILE\" ] || : > \"$REPORT_FILE\"\n\nif [ \"$TODOTXT_PLAIN\" = 1 ]; then\n    for clr in ${!PRI_@}; do\n        export \"$clr\"=\"$NONE\"\n    done\n    PRI_X=$NONE\n    DEFAULT=$NONE\n    COLOR_DONE=$NONE\n    COLOR_PROJECT=$NONE\n    COLOR_CONTEXT=$NONE\n    COLOR_DATE=$NONE\n    COLOR_NUMBER=$NONE\n    COLOR_META=$NONE\nfi\n\n[[ -n \"$HIDE_PROJECTS_SUBSTITUTION\" ]] && COLOR_PROJECT=\"$NONE\"\n[[ -n \"$HIDE_CONTEXTS_SUBSTITUTION\" ]] && COLOR_CONTEXT=\"$NONE\"\n\n_addto()\n{\n    file=\"$1\"\n    input=\"$2\"\n    cleaninput\n    uppercasePriority\n\n    if [[ \"$TODOTXT_DATE_ON_ADD\" -eq 1 ]]; then\n        local now\n        now=$(date '+%Y-%m-%d')\n        input=$(echo \"$input\" | sed -e 's/^\\(([A-Z]) \\)\\{0,1\\}/\\1'\"$now /\")\n    fi\n    if [[ -n \"$TODOTXT_PRIORITY_ON_ADD\" ]]; then\n        if ! echo \"$input\" | grep -q '^([A-Z])'; then\n            input=$(echo -n \"($TODOTXT_PRIORITY_ON_ADD) \"; echo \"$input\")\n        fi\n    fi\n    fixMissingEndOfLine \"$file\"\n    echo \"$input\" >> \"$file\"\n    if [ \"$TODOTXT_VERBOSE\" -gt 0 ]; then\n        TASKNUM=$(sed -n '$ =' \"$file\")\n        echo \"$TASKNUM $input\"\n        echo \"$(getPrefix \"$file\"): $TASKNUM added.\"\n    fi\n}\n\nfiltercommand()\n{\n    filter=${1:-}\n    shift\n    post_filter=${1:-}\n    shift\n\n    for search_term\n    do\n        ## See if the first character of $search_term is a dash\n        if [ \"${search_term:0:1}\" != '-' ]\n        then\n            ## First character isn't a dash: hide lines that don't match\n            ## this $search_term\n            printf -v filter '%sgrep -i %q' \"${filter:-}${filter:+ | }\" \"$search_term\"\n        else\n            # First character is a dash: hide lines that match this\n            # $search_term\n            #\n            ## Remove the first character (-) before adding to our filter command\n            printf -v filter '%sgrep -v -i %q' \"${filter:-}${filter:+ | }\" \"${search_term:1}\"\n        fi\n    done\n\n    [ -n \"$post_filter\" ] && {\n        filter=\"${filter:-}${filter:+ | }${post_filter:-}\"\n    }\n\n    printf %s \"$filter\"\n}\n\n_list()\n{\n    local FILE=\"$1\"\n    ## If the file starts with a \"/\" use absolute path. Otherwise,\n    ## try to find it in either $TODO_DIR or using a relative path\n    if [ \"${1:0:1}\" == / ] && [ -f \"$FILE\" ]; then\n        ## Absolute path\n        src=\"$FILE\"\n    elif [ -f \"$TODO_DIR/$FILE\" ]; then\n        # Path relative to todo.sh directory\n        src=\"$TODO_DIR/$FILE\"\n    elif [ -f \"$FILE\" ]; then\n        # Path relative to current working directory\n        src=\"$FILE\"\n    elif [ -f \"$TODO_DIR/${FILE}.txt\" ]; then\n        # Path relative to todo.sh directory, missing file extension\n        src=\"$TODO_DIR/${FILE}.txt\"\n    else\n        die \"TODO: File $FILE does not exist.\"\n    fi\n\n    # Get our search arguments, if any\n    shift # was file name, new $1 is first search term\n\n    _format \"$src\" '' \"$@\"\n\n    if [ \"$TODOTXT_VERBOSE\" -gt 0 ]; then\n        echo \"--\"\n        echo \"$(getPrefix \"$src\"): ${NUMTASKS:-0} of ${TOTALTASKS:-0} tasks shown\"\n    fi\n}\n\ngetPadding()\n{\n    # We need one level of padding for each power of 10 $LINES uses.\n    LINES=$(sed -n '$ =' \"${1:-$TODO_FILE}\")\n    printf %s ${#LINES}\n}\n\n_format()\n{\n    # Parameters:    $1: todo input file; when empty formats stdin\n    #                $2: NR number width; if empty auto-detects from $1 / $TODO_FILE.\n    # Precondition:  None\n    # Postcondition: $NUMTASKS and $TOTALTASKS contain statistics (unless $TODOTXT_VERBOSE=0).\n\n    FILE=$1\n    shift\n\n    # Figure out how much padding we need to use, unless this was passed to us.\n    PADDING=${1:-$(getPadding \"$FILE\")}\n    shift\n\n    # Number the file, then run the filter command,\n    # then sort and mangle output some more\n    if [[ $TODOTXT_DISABLE_FILTER = 1 ]]; then\n        TODOTXT_FINAL_FILTER=\"cat\"\n    fi\n    items=$(\n        if [ -n \"$FILE\" ]; then\n            # shellcheck disable=SC2283\n            sed = \"$FILE\"\n        else\n            # shellcheck disable=SC2283\n            sed =\n        fi                                                      \\\n        | sed -e '\n            N\n            s/^/     /\n            s/ *\\([ 0-9]\\{'\"$PADDING\"',\\}\\)\\n/\\1 /\n            /^[ 0-9]\\{1,\\} *$/d\n         '\n    )\n\n    # Build and apply the filter.\n    filter_command=$(filtercommand \"${pre_filter_command:-}\" \"${post_filter_command:-}\" \"$@\")\n    if [ -n \"${filter_command}\" ]; then\n        filtered_items=$(echo -n \"$items\" | eval \"${filter_command}\")\n    else\n        filtered_items=$items\n    fi\n    filtered_items=$(\n        echo -n \"$filtered_items\" \\\n        | sed '\n            s/^     /00000/;\n            s/^    /0000/;\n            s/^   /000/;\n            s/^  /00/;\n            s/^ /0/;\n          ' \\\n        | eval \"${TODOTXT_SORT_COMMAND}\" \\\n        | awk '\n            function highlight(colorVar, color) {\n                color = ENVIRON[colorVar]\n                gsub(/\\\\+033/, \"\\033\", color)\n                return color\n            }\n            {\n                clr = \"\"\n                if (match($0, /^[0-9]+ x /)) {\n                    clr = highlight(\"COLOR_DONE\")\n                } else if (match($0, /^[0-9]+ \\([A-Z]\\) /)) {\n                    clr = highlight(\"PRI_\" substr($0, RSTART + RLENGTH - 3, 1))\n                    clr = (clr ? clr : highlight(\"PRI_X\"))\n                    if (ENVIRON[\"HIDE_PRIORITY_SUBSTITUTION\"] != \"\") {\n                        $0 = substr($0, 1, RLENGTH - 4) substr($0, RSTART + RLENGTH)\n                    }\n                }\n                end_clr = (clr ? highlight(\"DEFAULT\") : \"\")\n\n                prj_beg = highlight(\"COLOR_PROJECT\")\n                prj_end = (prj_beg ? (highlight(\"DEFAULT\") clr) : \"\")\n\n                ctx_beg = highlight(\"COLOR_CONTEXT\")\n                ctx_end = (ctx_beg ? (highlight(\"DEFAULT\") clr) : \"\")\n\n                dat_beg = highlight(\"COLOR_DATE\")\n                dat_end = (dat_beg ? (highlight(\"DEFAULT\") clr) : \"\")\n\n                num_beg = highlight(\"COLOR_NUMBER\")\n                num_end = (num_beg ? (highlight(\"DEFAULT\") clr) : \"\")\n\n                met_beg = highlight(\"COLOR_META\")\n                met_end = (met_beg ? (highlight(\"DEFAULT\") clr) : \"\")\n\n                gsub(/[ \\t][ \\t]*/, \"\\n&\\n\")\n                len = split($0, words, /\\n/)\n\n                printf \"%s\", clr\n                for (i = 1; i <= len; ++i) {\n                    if (i == 1 && words[i] ~ /^[0-9]+$/ ) {\n                        printf \"%s\", num_beg words[i] num_end\n                    } else if (words[i] ~ /^[+].*[A-Za-z0-9_]$/) {\n                        printf \"%s\", prj_beg words[i] prj_end\n                    } else if (words[i] ~ /^[@].*[A-Za-z0-9_]$/) {\n                        printf \"%s\", ctx_beg words[i] ctx_end\n                    } else if (words[i] ~ /^(19|20)[0-9][0-9]-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/) {\n                        printf \"%s\", dat_beg words[i] dat_end\n                    } else if (words[i] ~ /^[A-Za-z0-9]+:[^ ]+$/) {\n                        printf \"%s\", met_beg words[i] met_end\n                    } else {\n                        printf \"%s\", words[i]\n                    }\n                }\n                printf \"%s\\n\", end_clr\n            }\n          '  \\\n        | sed '\n            s/'\"${HIDE_PROJECTS_SUBSTITUTION:-^}\"'//g\n            s/'\"${HIDE_CONTEXTS_SUBSTITUTION:-^}\"'//g\n            s/'\"${HIDE_CUSTOM_SUBSTITUTION:-^}\"'//g\n          '                                                   \\\n        | eval ${TODOTXT_FINAL_FILTER}                        \\\n    )\n    [ -n \"$filtered_items\" ] && echo \"$filtered_items\"\n\n    if [ \"$TODOTXT_VERBOSE\" -gt 0 ]; then\n        NUMTASKS=$(echo -n \"$filtered_items\" | sed -n '$ =')\n        TOTALTASKS=$(echo -n \"$items\" | sed -n '$ =')\n    fi\n    if [ \"$TODOTXT_VERBOSE\" -gt 1 ]; then\n        echo \"TODO DEBUG: Filter Command was: ${filter_command:-cat}\"\n    fi\n}\n\nlistWordsWithSigil()\n{\n    sigil=$1\n    shift\n\n    FILE=$TODO_FILE\n    [ -n \"$TODOTXT_SOURCEVAR\" ] && eval \"FILE=$TODOTXT_SOURCEVAR\"\n    eval \"$(filtercommand 'cat \"${FILE[@]}\"' '' \"$@\")\" \\\n        | grep -o \"[^ ]*${sigil}[^ ]\\\\+\" \\\n        | sed -n \\\n            -e \"s#^${TODOTXT_SIGIL_BEFORE_PATTERN//#/\\\\#}##\" \\\n            -e \"s#${TODOTXT_SIGIL_AFTER_PATTERN//#/\\\\#}\\$##\" \\\n            -e \"/^${sigil}${TODOTXT_SIGIL_VALID_PATTERN//\\//\\\\/}$/p\" \\\n        | sort -u\n}\n\nhasCustomAction()\n{\n    [ -d \"${1:?}\" ] || return 1\n    [ -x \"$1/${2:?}\" ] && return 0\n    if [ -h \"$1/$2\" ] && [ ! -e \"$1/$2\" ]\n    then\n        dieWithHelp \"$2\" \"Fatal Error: Broken link to custom action: '$1/$2'\"\n    fi\n    return 1\n}\n\nexport -f cleaninput getPrefix getTodo getNewtodo filtercommand _list listWordsWithSigil getPadding _format die\n\n# == HANDLE ACTION ==\naction=$(printf \"%s\\n\" \"$ACTION\" | tr '[:upper:]' '[:lower:]')\n\n# If the first argument is \"command\", run the rest of the arguments\n# using todo.sh builtins.\n# Else, run a actions script with the name of the command if it exists\n# or fallback to using a builtin\nif [ \"$action\" == \"command\" ]; then\n    # Get rid of \"command\" from arguments list\n    shift\n    ## Reset action to new first argument\n    action=$( printf \"%s\\n\" \"$1\" | tr '[:upper:]' '[:lower:]' )\nelif hasCustomAction \"$TODO_ACTIONS_DIR/$action\" \"$action\"\nthen\n    \"$TODO_ACTIONS_DIR/$action/$action\" \"$@\"\n    exit $?\nelif hasCustomAction \"$TODO_ACTIONS_DIR\" \"$action\"\nthen\n    \"$TODO_ACTIONS_DIR/$action\" \"$@\"\n    exit $?\nelif [ \"$isDefaultAction\" ] && [ -n \"$TODOTXT_DEFAULT_ACTION\" ]; then\n    # Recursive invocation with the contents of the default action parsed as a\n    # command-line.\n    eval \"exec \\\"\\${BASH_SOURCE[0]}\\\" $TODOTXT_DEFAULT_ACTION\"\nfi\n\n# Only run if $action isn't found in .todo.actions.d\ncase $action in\n\"add\" | \"a\")\n    if [[ -z \"$2\" && $TODOTXT_FORCE = 0 ]]; then\n        read -p \"Add: \" -e -r input\n    else\n        [ -z \"$2\" ] && die \"usage: $TODO_SH add \\\"TODO ITEM\\\"\"\n        shift\n        input=$*\n    fi\n    _addto \"$TODO_FILE\" \"$input\"\n    ;;\n\n\"addm\")\n    if [[ -z \"$2\" && $TODOTXT_FORCE = 0 ]]; then\n        read -p \"Add: \" -e -r input\n    else\n        [ -z \"$2\" ] && die \"usage: $TODO_SH addm \\\"TODO ITEM\\\"\"\n        shift\n        input=$*\n    fi\n\n    # Set Internal Field Seperator as newline so we can\n    # loop across multiple lines\n    SAVEIFS=$IFS\n    IFS=$'\\n'\n\n    # Treat each line separately\n    for line in $input; do\n        _addto \"$TODO_FILE\" \"$line\"\n    done\n    IFS=$SAVEIFS\n    ;;\n\n\"addto\" )\n    errmsg=\"usage: $TODO_SH addto DEST \\\"TODO ITEM\\\"\"\n    [ -z \"$2\" ] && die \"$errmsg\"\n    dest=\"$TODO_DIR/$2\"\n    [ -z \"$3\" ] && die \"$errmsg\"\n    shift\n    shift\n    input=$*\n\n    if [ -f \"$dest\" ]; then\n        _addto \"$dest\" \"$input\"\n    else\n        die \"TODO: Destination file $dest does not exist.\"\n    fi\n    ;;\n\n\"append\" | \"app\" )\n    errmsg=\"usage: $TODO_SH append NR \\\"TEXT TO APPEND\\\"\"\n    shift; item=$1; shift\n    getTodo \"$item\"\n\n    if [[ -z \"$1\" && $TODOTXT_FORCE = 0 ]]; then\n        read -p \"Append: \" -e -r input\n    else\n        input=$*\n    fi\n    case \"$input\" in\n      [$SENTENCE_DELIMITERS]*)  appendspace=;;\n      *)                        appendspace=\" \";;\n    esac\n    cleaninput \"for sed\"\n\n    if sed -i.bak \"${item} s|^.*|&${appendspace}${input}|\" \"$TODO_FILE\"; then\n        if [ \"$TODOTXT_VERBOSE\" -gt 0 ]; then\n            getNewtodo \"$item\"\n            echo \"$item $newtodo\"\n    fi\n    else\n        die \"TODO: Error appending task $item.\"\n    fi\n    ;;\n\n\"archive\")\n    # defragment blank lines\n    sed -i.bak -e '/./!d' \"$TODO_FILE\"\n    if grep \"^x \" \"$TODO_FILE\" >> \"$DONE_FILE\"; then\n\t[ \"$TODOTXT_VERBOSE\" -gt 0 ] && grep \"^x \" \"$TODO_FILE\"   \n        sed -i.bak '/^x /d' \"$TODO_FILE\"\n        if [ \"$TODOTXT_VERBOSE\" -gt 0 ]; then\n            echo \"TODO: $TODO_FILE archived.\"\n        fi\n    else\n\tif [ \"$TODOTXT_VERBOSE\" -gt 0 ]; then\n       \t    echo \"TODO: $TODO_FILE does not contain any done tasks.\"\n\tfi\n    fi\n    ;;\n\n\"del\" | \"rm\")\n    # replace deleted line with a blank line when TODOTXT_PRESERVE_LINE_NUMBERS is 1\n    errmsg=\"usage: $TODO_SH del NR [TERM]\"\n    item=$2\n    getTodo \"$item\"\n\n    if [ -z \"$3\" ]; then\n        if confirm \"Delete '$todo'\"; then\n            if [ \"$TODOTXT_PRESERVE_LINE_NUMBERS\" = 0 ]; then\n                # delete line (changes line numbers)\n                sed -i.bak -e \"${item}s/^.*//\" -e '/./!d' \"$TODO_FILE\"\n            else\n                # leave blank line behind (preserves line numbers)\n                sed -i.bak -e \"${item}s/^.*//\" \"$TODO_FILE\"\n            fi\n            if [ \"$TODOTXT_VERBOSE\" -gt 0 ]; then\n                echo \"$item $todo\"\n                echo \"TODO: $item deleted.\"\n            fi\n        else\n            die \"TODO: No tasks were deleted.\"\n        fi\n    else\n        sed -i.bak \\\n            -e \"${item}s/^\\((.) \\)\\{0,1\\} *$3 */\\1/g\" \\\n            -e \"${item}s/ *$3 *\\$//g\" \\\n            -e \"${item}s/  *$3 */ /g\" \\\n            -e \"${item}s/ *$3  */ /g\" \\\n            -e \"${item}s/$3//g\" \\\n            \"$TODO_FILE\"\n        getNewtodo \"$item\"\n        if [ \"$todo\" = \"$newtodo\" ]; then\n            [ \"$TODOTXT_VERBOSE\" -gt 0 ] && echo \"$item $todo\"\n            die \"TODO: '$3' not found; no removal done.\"\n        fi\n        if [ \"$TODOTXT_VERBOSE\" -gt 0 ]; then\n            echo \"$item $todo\"\n            echo \"TODO: Removed '$3' from task.\"\n            echo \"$item $newtodo\"\n        fi\n    fi\n    ;;\n\n\"depri\" | \"dp\" )\n    errmsg=\"usage: $TODO_SH depri NR [NR ...]\"\n    shift;\n    [ $# -eq 0 ] && die \"$errmsg\"\n\n    # Split multiple depri's, if comma separated change to whitespace separated\n    # Loop the 'depri' function for each item\n    status=0\n    for item in ${*//,/ }; do\n        getTodo \"$item\"\n\n\tif [[ \"$todo\" = \\(?\\)\\ * ]]; then\n\t    sed -i.bak -e \"${item}s/^(.) //\" \"$TODO_FILE\"\n\t    if [ \"$TODOTXT_VERBOSE\" -gt 0 ]; then\n\t\tgetNewtodo \"$item\"\n\t\techo \"$item $newtodo\"\n\t\techo \"TODO: $item deprioritized.\"\n\t    fi\n\telse\n\t    echo >&2 \"TODO: $item is not prioritized.\"\n\t    status=1\n\tfi\n    done\n    exit $status\n    ;;\n\n\"do\" | \"done\" )\n    errmsg=\"usage: $TODO_SH do NR [NR ...]\"\n    # shift so we get arguments to the do request\n    shift;\n    [ $# -eq 0 ] && die \"$errmsg\"\n\n    # Split multiple do's, if comma separated change to whitespace separated\n    # Loop the 'do' function for each item\n    status=0\n    for item in ${*//,/ }; do\n        getTodo \"$item\"\n\n        # Check if this item has already been done\n        if [ \"${todo:0:2}\" != \"x \" ]; then\n            now=$(date '+%Y-%m-%d')\n            # remove priority once item is done\n            sed -i.bak \"${item}s/^(.) //\" \"$TODO_FILE\"\n            sed -i.bak \"${item}s|^|x $now |\" \"$TODO_FILE\"\n            if [ \"$TODOTXT_VERBOSE\" -gt 0 ]; then\n                getNewtodo \"$item\"\n                echo \"$item $newtodo\"\n                echo \"TODO: $item marked as done.\"\n        fi\n        else\n            echo >&2 \"TODO: $item is already marked done.\"\n            status=1\n        fi\n    done\n\n    if [ \"$TODOTXT_AUTO_ARCHIVE\" = 1 ]; then\n        # Recursively invoke the script to allow overriding of the archive\n        # action.\n        \"$TODO_FULL_SH\" archive || status=$?\n    fi\n    exit $status\n    ;;\n\n\"help\")\n    shift  # Was help; new $1 is first help topic / action name\n    if [ $# -gt 0 ]; then\n        # Don't use PAGER here; we don't expect much usage output from one / few actions.\n        actionUsage \"$@\"\n    else\n        if [ -t 1 ]; then # STDOUT is a TTY\n            if command -v \"${PAGER:-less}\" >/dev/null 2>&1; then\n                # we have a working PAGER (or less as a default)\n                help | \"${PAGER:-less}\" && exit 0\n            fi\n        fi\n        help # just in case something failed above, we go ahead and just spew to STDOUT\n    fi\n    ;;\n\n\"shorthelp\")\n    if [ -t 1 ]; then # STDOUT is a TTY\n        if command -v \"${PAGER:-less}\" >/dev/null 2>&1; then\n            # we have a working PAGER (or less as a default)\n            shorthelp | \"${PAGER:-less}\" && exit 0\n        fi\n    fi\n    shorthelp # just in case something failed above, we go ahead and just spew to STDOUT\n    ;;\n\n\"list\" | \"ls\")\n    shift  # Was ls; new $1 is first search term\n    _list \"$TODO_FILE\" \"$@\"\n    ;;\n\n\"listall\" | \"lsa\")\n    shift  # Was lsa; new $1 is first search term\n\n    TOTAL=$(sed -n '$ =' \"$TODO_FILE\")\n    PADDING=${#TOTAL}\n\n    post_filter_command=\"${post_filter_command:-}${post_filter_command:+ | }awk -v TOTAL=$TOTAL -v PADDING=$PADDING '{ \\$1 = sprintf(\\\"%\\\" PADDING \\\"d\\\", (\\$1 > TOTAL ? 0 : \\$1)); print }' \"\n    cat \"$TODO_FILE\" \"$DONE_FILE\" | TODOTXT_VERBOSE=0 _format '' \"$PADDING\" \"$@\"\n\n    if [ \"$TODOTXT_VERBOSE\" -gt 0 ]; then\n        TDONE=$(sed -n '$ =' \"$DONE_FILE\")\n        TASKNUM=$(TODOTXT_PLAIN=1 TODOTXT_VERBOSE=0 _format \"$TODO_FILE\" 1 \"$@\" | sed -n '$ =')\n        DONENUM=$(TODOTXT_PLAIN=1 TODOTXT_VERBOSE=0 _format \"$DONE_FILE\" 1 \"$@\" | sed -n '$ =')\n        echo \"--\"\n        echo \"$(getPrefix \"$TODO_FILE\"): ${TASKNUM:-0} of ${TOTAL:-0} tasks shown\"\n        echo \"$(getPrefix \"$DONE_FILE\"): ${DONENUM:-0} of ${TDONE:-0} tasks shown\"\n        echo \"total $((TASKNUM + DONENUM)) of $((TOTAL + TDONE)) tasks shown\"\n    fi\n    ;;\n\n\"listfile\" | \"lf\")\n    shift  # Was listfile, next $1 is file name\n    if [ $# -eq 0 ]; then\n        [ \"$TODOTXT_VERBOSE\" -gt 0 ] && echo \"Files in the todo.txt directory:\"\n        cd -- \"$TODO_DIR\" && ls -1 -- *.txt\n    else\n        FILE=\"$1\"\n        shift  # Was filename; next $1 is first search term\n\n        _list \"$FILE\" \"$@\"\n    fi\n    ;;\n\n\"listcon\" | \"lsc\")\n    shift\n    listWordsWithSigil '@' \"$@\"\n    ;;\n\n\"listproj\" | \"lsprj\")\n    shift\n    listWordsWithSigil '+' \"$@\"\n    ;;\n\n\"listpri\" | \"lsp\")\n    shift # was \"listpri\", new $1 is priority to list or first TERM\n\n    pri=$(set -o pipefail; printf \"%s\\n\" \"$1\" | grep '^\\([A-Za-z]\\|[A-Za-z]-[A-Za-z]\\|[A-Z][A-Z-]*[A-Z]\\)$' | tr '[:lower:]' '[:upper:]') && shift || pri=\"A-Z\"\n    post_filter_command=\"${post_filter_command:-}${post_filter_command:+ | }grep '^ *[0-9]\\+ ([${pri}]) '\"\n    _list \"$TODO_FILE\" \"$@\"\n    ;;\n\n\"move\" | \"mv\")\n    # replace moved line with a blank line when TODOTXT_PRESERVE_LINE_NUMBERS is 1\n    errmsg=\"usage: $TODO_SH mv NR DEST [SRC]\"\n    item=$2\n    dest=\"$TODO_DIR/$3\"\n    src=\"$TODO_DIR/$4\"\n\n    [ -z \"$4\" ] && src=\"$TODO_FILE\"\n    [ -z \"$dest\" ] && die \"$errmsg\"\n\n    [ -f \"$src\" ] || die \"TODO: Source file $src does not exist.\"\n    [ -f \"$dest\" ] || die \"TODO: Destination file $dest does not exist.\"\n\n    getTodo \"$item\" \"$src\"\n    [ -z \"$todo\" ] && die \"$item: No such item in $src.\"\n    if confirm \"Move '$todo' from $src to $dest\"; then\n        if [ \"$TODOTXT_PRESERVE_LINE_NUMBERS\" = 0 ]; then\n            # delete line (changes line numbers)\n            sed -i.bak -e \"${item}s/^.*//\" -e '/./!d' \"$src\"\n        else\n            # leave blank line behind (preserves line numbers)\n            sed -i.bak -e \"${item}s/^.*//\" \"$src\"\n        fi\n        fixMissingEndOfLine \"$dest\"\n        echo \"$todo\" >> \"$dest\"\n\n        if [ \"$TODOTXT_VERBOSE\" -gt 0 ]; then\n            echo \"$item $todo\"\n            echo \"TODO: $item moved from '$src' to '$dest'.\"\n        fi\n    else\n        die \"TODO: No tasks moved.\"\n    fi\n    ;;\n\n\"prepend\" | \"prep\" )\n    errmsg=\"usage: $TODO_SH prepend NR \\\"TEXT TO PREPEND\\\"\"\n    replaceOrPrepend 'prepend' \"$@\"\n    ;;\n\n\"pri\" | \"p\")\n    shift\n    status=0\n    while [ \"$#\" -gt 0 ] ; do\n        item=$1\n        newpri=$(printf \"%s\\n\" \"$2\" | tr '[:lower:]' '[:upper:]')\n\n        errmsg=\"usage: $TODO_SH pri NR PRIORITY [NR PRIORITY ...]\nnote: PRIORITY must be anywhere from A to Z.\"\n\n        [ $# -lt 2 ] && die \"$errmsg\"\n        [[ \"$newpri\" = @([A-Z]) ]] || die \"$errmsg\"\n        getTodo \"$item\"\n\n        oldpri=\n        if [[ \"$todo\" = \\(?\\)\\ * ]]; then\n            oldpri=${todo:1:1}\n        fi\n\n        if [ \"$oldpri\" != \"$newpri\" ]; then\n            sed -i.bak -e \"${item}s/^(.) //\" -e \"${item}s/^/($newpri) /\" \"$TODO_FILE\"\n        fi\n        if [ \"$TODOTXT_VERBOSE\" -gt 0 ]; then\n            getNewtodo \"$item\"\n            echo \"$item $newtodo\"\n            if [ \"$oldpri\" != \"$newpri\" ]; then\n                if [ -n \"$oldpri\" ]; then\n                    echo \"TODO: $item re-prioritized from ($oldpri) to ($newpri).\"\n                else\n                    echo \"TODO: $item prioritized ($newpri).\"\n                fi\n            fi\n        fi\n        if [ \"$oldpri\" = \"$newpri\" ]; then\n            echo >&2 \"TODO: $item already prioritized ($newpri).\"\n            status=1\n        fi\n    shift; shift\n    done\n    exit $status\n    ;;\n\n\"replace\" )\n    errmsg=\"usage: $TODO_SH replace NR \\\"UPDATED ITEM\\\"\"\n    replaceOrPrepend 'replace' \"$@\"\n    ;;\n\n\"report\")\n    # archive first\n    # Recursively invoke the script to allow overriding of the archive\n    # action.\n    \"$TODO_FULL_SH\" archive\n\n    TOTAL=$(sed -n '$ =' \"$TODO_FILE\")\n    TDONE=$(sed -n '$ =' \"$DONE_FILE\")\n    NEWDATA=\"${TOTAL:-0} ${TDONE:-0}\"\n    LASTREPORT=$(sed -ne '$p' \"$REPORT_FILE\")\n    LASTDATA=${LASTREPORT#* }   # Strip timestamp.\n    if [ \"$LASTDATA\" = \"$NEWDATA\" ]; then\n        echo \"$LASTREPORT\"\n        [ \"$TODOTXT_VERBOSE\" -gt 0 ] && echo \"TODO: Report file is up-to-date.\"\n    else\n        NEWREPORT=\"$(date +%Y-%m-%dT%T) ${NEWDATA}\"\n        echo \"${NEWREPORT}\" >> \"$REPORT_FILE\"\n        echo \"${NEWREPORT}\"\n        [ \"$TODOTXT_VERBOSE\" -gt 0 ] && echo \"TODO: Report file updated.\"\n    fi\n    ;;\n\n\"deduplicate\")\n    if [ \"$TODOTXT_PRESERVE_LINE_NUMBERS\" = 0 ]; then\n        deduplicateSedCommand='d'\n    else\n        deduplicateSedCommand='s/^.*//; p'\n    fi\n\n    # To determine the difference when deduplicated lines are preserved, only\n    # non-empty lines must be counted.\n    originalTaskNum=$(sed -e '/./!d' \"$TODO_FILE\" | sed -n '$ =')\n\n    # Look for duplicate lines and discard the second occurrence.\n    # We start with an empty hold space on the first line.  For each line:\n    #   G - appends newline + hold space to the pattern space\n    #   s/\\n/&&/; - double up the first new line so we catch adjacent dups\n    #   /^\\([^\\n]*\\n\\).*\\n\\1/b dedup\n    #       If the first line of the hold space shows up again later as an\n    #       entire line, it's a duplicate. Jump to the \"dedup\" label, where\n    #       either of the following is executed, depending on whether empty\n    #       lines should be preserved:\n    #       d           - Delete the current pattern space, quit this line and\n    #                     move on to the next, or:\n    #       s/^.*//; p  - Clear the task text, print this line and move on to\n    #                     the next.\n    #   s/\\n//;   - else (no duplicate), drop the doubled newline\n    #   h;        - replace the hold space with the expanded pattern space\n    #   P;        - print up to the first newline (that is, the input line)\n    #   b         - end processing of the current line\n    sed -i.bak -n \\\n        -e 'G; s/\\n/&&/; /^\\([^\\n]*\\n\\).*\\n\\1/b dedup' \\\n        -e 's/\\n//; h; P; b' \\\n        -e ':dedup' \\\n        -e \"$deduplicateSedCommand\" \\\n        \"$TODO_FILE\"\n\n    newTaskNum=$(sed -e '/./!d' \"$TODO_FILE\" | sed -n '$ =')\n    deduplicateNum=$(( originalTaskNum - newTaskNum ))\n    if [ $deduplicateNum -eq 0 ]; then\n        die \"TODO: No duplicate tasks found\"\n    else\n        echo \"TODO: $deduplicateNum duplicate task(s) removed\"\n    fi\n    ;;\n\n\"listaddons\")\n    if [ -d \"$TODO_ACTIONS_DIR\" ]; then\n        cd -- \"$TODO_ACTIONS_DIR\" || exit $?\n        actionsCnt=0\n        for action in *\n        do\n            if [ -f \"$action\" ] && [ -x \"$action\" ]; then\n                echo \"$action\"\n                ((actionsCnt+=1))\n            elif [ -d \"$action\" ] && [ -x \"$action/$action\" ]; then\n                echo \"$action\"\n                ((actionsCnt+=1))\n            fi\n        done\n        if ! [ \"$actionsCnt\" -gt 0 ]; then\n             die \"TODO: '$TODO_ACTIONS_DIR' does not contain valid actions.\"\n        else\n            if [ \"$TODOTXT_VERBOSE\" -gt 0 ]; then\n                echo \"--\"\n                echo \"TODO: $actionsCnt valid addon actions found.\"\n            fi\n        fi \n    else\n        die \"TODO: '$TODO_ACTIONS_DIR' does not exist.\" \n    fi\n    ;;\n\n*)\n    usage;;\nesac\n"
        },
        {
          "name": "todo_completion",
          "type": "blob",
          "size": 5.9765625,
          "content": "# bash completion for todo.txt-cli\n\n# Check for bash\n[ -z \"$BASH_VERSION\" ] && return\n\n_todo()\n{\n    local cur prev opts\n    COMPREPLY=()\n    cur=\"${COMP_WORDS[COMP_CWORD]}\"\n    prev=\"${COMP_WORDS[COMP_CWORD-1]}\"\n\n    local -r OPTS=\"-@ -@@ -+ -++ -d -f -h -p -P -PP -a -n -t -v -vv -V -x\"\n    local -r COMMANDS=\"\\\n        add a addto addm append app archive command del \\\n        rm depri dp do help list ls listaddons listall lsa listcon \\\n        lsc listfile lf listpri lsp listproj lsprj move \\\n        mv prepend prep pri p replace report shorthelp\"\n    local -r MOVE_COMMAND_PATTERN='move|mv'\n\n    local _todo_sh=${_todo_sh:-${COMP_WORDS[0]}}\n    local completions\n    if [ \"$COMP_CWORD\" -eq 1 ]; then\n        completions=\"$COMMANDS $(eval TODOTXT_VERBOSE=0 \"$_todo_sh\" command listaddons 2>/dev/null) $OPTS\"\n    elif [[ $COMP_CWORD -gt 2 && ( \\\n        \"${COMP_WORDS[COMP_CWORD-2]}\" =~ ^($MOVE_COMMAND_PATTERN${_todo_file2_actions:+|${_todo_file2_actions}})$ || \\\n        \"${COMP_WORDS[COMP_CWORD-3]}\" =~ ^($MOVE_COMMAND_PATTERN${_todo_file3_actions:+|${_todo_file3_actions}})$ ) ]]; then\n        # \"move NR DEST [SRC]\" has file arguments on positions 2 and 3.\n        completions=$(eval TODOTXT_VERBOSE=0 $_todo_sh command listfile 2>/dev/null)\n    else\n        case \"$prev\" in\n            command)\n                completions=$COMMANDS;;\n            help)\n                completions=\"$COMMANDS $(eval TODOTXT_VERBOSE=0 \"$_todo_sh\" command listaddons 2>/dev/null)\";;\n            -*) completions=\"$COMMANDS $(eval TODOTXT_VERBOSE=0 \"$_todo_sh\" command listaddons 2>/dev/null) $OPTS\";;\n            *)  if [[ \"$prev\" =~ ^(addto|listfile|lf${_todo_file1_actions:+|${_todo_file1_actions}})$ ]]; then\n                    completions=$(eval TODOTXT_VERBOSE=0 \"$_todo_sh\" command listfile 2>/dev/null)\n                else\n                    case \"$cur\" in\n                        +*) completions=$(eval TODOTXT_VERBOSE=0 \"$_todo_sh\" command listproj 2>/dev/null)\n                            COMPREPLY=( $(compgen -W \"$completions\" -- \"$cur\"))\n                            [ ${#COMPREPLY[@]} -gt 0 ] && return 0\n                            # Fall back to projects extracted from done tasks.\n                            completions=$(eval 'TODOTXT_VERBOSE=0 TODOTXT_SOURCEVAR=\\$DONE_FILE' \"$_todo_sh\" command listproj 2>/dev/null)\n                            ;;\n                        @*) completions=$(eval TODOTXT_VERBOSE=0 \"$_todo_sh\" command listcon 2>/dev/null)\n                            COMPREPLY=( $(compgen -W \"$completions\" -- \"$cur\"))\n                            [ ${#COMPREPLY[@]} -gt 0 ] && return 0\n                            # Fall back to contexts extracted from done tasks.\n                            completions=$(eval 'TODOTXT_VERBOSE=0 TODOTXT_SOURCEVAR=\\$DONE_FILE' \"$_todo_sh\" command listcon 2>/dev/null)\n                            ;;\n                        *)  if [[ \"$cur\" =~ ^[0-9]+$ ]]; then\n                                declare -a sedTransformations=(\n                                    # Remove the (padded) task number; we prepend the\n                                    # user-provided $cur instead.\n                                    -e 's/^ *[0-9]\\{1,\\} //'\n                                    # Remove the timestamp prepended by the -t option,\n                                    # but keep any priority (as it's short and may\n                                    # provide useful context).\n                                    -e 's/^\\((.) \\)\\{0,1\\}[0-9]\\{2,4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} /\\1/'\n                                    # Remove the done date and (if there) the timestamp.\n                                    # Keep the \"x\" (as it's short and may provide useful\n                                    # context)\n                                    -e 's/^\\([xX] \\)\\([0-9]\\{2,4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} \\)\\{1,2\\}/\\1/'\n                                    # Remove any trailing whitespace; the Bash\n                                    # completion inserts a trailing space itself.\n                                    -e 's/[[:space:]]*$//'\n                                    # Finally, limit the output to a single line just as\n                                    # a safety check of the ls action output.\n                                    -e '1q'\n                                )\n                                local todo\n                                todo=$( \\\n                                    eval TODOTXT_VERBOSE=0 \"$_todo_sh\" '-@ -+ -p -x command ls \"^ *${cur} \"' 2>/dev/null | \\\n                                    sed \"${sedTransformations[@]}\" \\\n                                )\n                                # Append task text as a shell comment. This\n                                # completion can be a safety check before a\n                                # destructive todo.txt operation.\n                                [ -n \"$todo\" ] && COMPREPLY[0]=\"$cur # $todo\"\n                                return 0\n                            else\n                                return 0\n                            fi\n                            ;;\n                    esac\n                fi\n                ;;\n        esac\n    fi\n\n    COMPREPLY=( $(compgen -W \"$completions\" -- \"$cur\"))\n    return 0\n}\ncomplete -F _todo todo.sh\n\n# If you define an alias (e.g. \"t\") to todo.sh, you need to explicitly enable\n# completion for it, too:\n#complete -F _todo t\n# It is recommended to put this line next to your alias definition in your\n# ~/.bashrc (or wherever else you're defining your alias). If you simply\n# uncomment it here, you will need to redo this on every todo.txt update!\n\n# The completion uses the alias itself, so any custom arguments (like a custom\n# configuration (-d \"$HOME/todo2.cfg\")) are used there as well.\n# If you don't want this, or need to further tweak the todo.sh command that's\n# used by the completion, you can add and use a wrapper completion function that\n# redefines _todo_sh before invoking _todo():\n#_todo_tweak()\n#{\n#    local _todo_sh='todo.sh -d \"$HOME/todo-tweaked.cfg\"'\n#    _todo \"$@\"\n#}\n#complete -F _todo_tweak todo.sh\n"
        }
      ]
    }
  ]
}