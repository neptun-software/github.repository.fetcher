{
  "metadata": {
    "timestamp": 1736568916296,
    "page": 134,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjEzNw==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "teddysun/across",
      "stars": 5058,
      "defaultBranch": "master",
      "files": [
        {
          "name": "InstallNET.sh",
          "type": "blob",
          "size": 34.2197265625,
          "content": "#!/bin/bash\n\n## License: GPL\n## It can reinstall Debian, Ubuntu, CentOS system with network.\n## Default root password: MoeClub.org\n## Blog: https://moeclub.org\n## Written By MoeClub.org\n## Modify By Teddysun <i@teddysun.com>\n\nexport tmpVER=''\nexport tmpDIST=''\nexport tmpURL=''\nexport tmpWORD=''\nexport tmpMirror=''\nexport ipAddr=''\nexport ipMask=''\nexport ipGate=''\nexport ipDNS='8.8.8.8'\nexport IncDisk='default'\nexport interface=''\nexport interfaceSelect=''\nexport Relese=''\nexport sshPORT='22'\nexport ddMode='0'\nexport setNet='0'\nexport setRDP='0'\nexport setIPv6='0'\nexport isMirror='0'\nexport FindDists='0'\nexport loaderMode='0'\nexport IncFirmware='0'\nexport SpikCheckDIST='0'\nexport setInterfaceName='0'\nexport UNKNOWHW='0'\nexport UNVER='6.4'\nexport GRUBDIR=''\nexport GRUBFILE=''\nexport GRUBVER=''\nexport VER=''\nexport setCMD=''\nexport setConsole=''\n\nwhile [[ $# -ge 1 ]]; do\n    case $1 in\n    -v | --ver)\n        shift\n        tmpVER=\"$1\"\n        shift\n        ;;\n    -d | --debian)\n        shift\n        Relese='Debian'\n        tmpDIST=\"$1\"\n        shift\n        ;;\n    -u | --ubuntu)\n        shift\n        Relese='Ubuntu'\n        tmpDIST=\"$1\"\n        shift\n        ;;\n    -c | --centos)\n        shift\n        Relese='CentOS'\n        tmpDIST=\"$1\"\n        shift\n        ;;\n    -dd | --image)\n        shift\n        ddMode='1'\n        tmpURL=\"$1\"\n        shift\n        ;;\n    -p | --password)\n        shift\n        tmpWORD=\"$1\"\n        shift\n        ;;\n    -i | --interface)\n        shift\n        interfaceSelect=\"$1\"\n        shift\n        ;;\n    --ip-addr)\n        shift\n        ipAddr=\"$1\"\n        shift\n        ;;\n    --ip-mask)\n        shift\n        ipMask=\"$1\"\n        shift\n        ;;\n    --ip-gate)\n        shift\n        ipGate=\"$1\"\n        shift\n        ;;\n    --ip-dns)\n        shift\n        ipDNS=\"$1\"\n        shift\n        ;;\n    --dev-net)\n        shift\n        setInterfaceName='1'\n        ;;\n    --loader)\n        shift\n        loaderMode='1'\n        ;;\n    -apt | -yum | --mirror)\n        shift\n        isMirror='1'\n        tmpMirror=\"$1\"\n        shift\n        ;;\n    -rdp)\n        shift\n        setRDP='1'\n        WinRemote=\"$1\"\n        shift\n        ;;\n    -cmd)\n        shift\n        setCMD=\"$1\"\n        shift\n        ;;\n    -console)\n        shift\n        setConsole=\"$1\"\n        shift\n        ;;\n    -firmware)\n        shift\n        IncFirmware=\"1\"\n        ;;\n    -port)\n        shift\n        sshPORT=\"$1\"\n        shift\n        ;;\n    --noipv6)\n        shift\n        setIPv6='1'\n        ;;\n    -a | --auto | -m | --manual | -ssl)\n        shift\n        ;;\n    *)\n        if [[ \"$1\" != 'error' ]]; then echo -ne \"\\nInvaild option: '$1'\\n\\n\"; fi\n        echo -ne \" Usage:\\n\\tbash $(basename $0)\\t-d/--debian [\\033[33m\\033[04mdists-name\\033[0m]\\n\\t\\t\\t\\t-u/--ubuntu [\\033[04mdists-name\\033[0m]\\n\\t\\t\\t\\t-c/--centos [\\033[04mdists-name\\033[0m]\\n\\t\\t\\t\\t-v/--ver [32/i386|64/\\033[33m\\033[04mamd64\\033[0m] [\\033[33m\\033[04mdists-verison\\033[0m]\\n\\t\\t\\t\\t--ip-addr/--ip-gate/--ip-mask\\n\\t\\t\\t\\t-apt/-yum/--mirror\\n\\t\\t\\t\\t-dd/--image\\n\\t\\t\\t\\t-p [linux password]\\n\\t\\t\\t\\t-port [linux ssh port]\\n\"\n        exit 1\n        ;;\n    esac\ndone\n\n[[ \"$EUID\" -ne '0' ]] && echo \"Error:This script must be run as root!\" && exit 1\n\nfunction dependence() {\n    Full='0'\n    for BIN_DEP in $(echo \"$1\" | sed 's/,/\\n/g'); do\n        if [[ -n \"$BIN_DEP\" ]]; then\n            Found='0'\n            for BIN_PATH in $(echo \"$PATH\" | sed 's/:/\\n/g'); do\n                ls $BIN_PATH/$BIN_DEP >/dev/null 2>&1\n                if [ $? == '0' ]; then\n                    Found='1'\n                    break\n                fi\n            done\n            if [ \"$Found\" == '1' ]; then\n                echo -en \"[\\033[32mok\\033[0m]\\t\"\n            else\n                Full='1'\n                echo -en \"[\\033[31mNot Install\\033[0m]\"\n            fi\n            echo -en \"\\t$BIN_DEP\\n\"\n        fi\n    done\n    if [ \"$Full\" == '1' ]; then\n        echo -ne \"\\n\\033[31mError! \\033[0mPlease use '\\033[33mapt-get\\033[0m' or '\\033[33myum\\033[0m' install it.\\n\\n\\n\"\n        exit 1\n    fi\n}\n\nfunction selectMirror() {\n    [ $# -ge 3 ] || exit 1\n    Relese=$(echo \"$1\" | sed -r 's/(.*)/\\L\\1/')\n    DIST=$(echo \"$2\" | sed 's/\\ //g' | sed -r 's/(.*)/\\L\\1/')\n    VER=$(echo \"$3\" | sed 's/\\ //g' | sed -r 's/(.*)/\\L\\1/')\n    New=$(echo \"$4\" | sed 's/\\ //g')\n    [ -n \"$Relese\" ] && [ -n \"$DIST\" ] && [ -n \"$VER\" ] || exit 1\n    if [ \"$Relese\" == \"debian\" ] || [ \"$Relese\" == \"ubuntu\" ]; then\n        [ \"$DIST\" == \"focal\" ] && legacy=\"legacy-\" || legacy=\"\"\n        TEMP=\"SUB_MIRROR/dists/${DIST}/main/installer-${VER}/current/${legacy}images/netboot/${Relese}-installer/${VER}/initrd.gz\"\n    elif [ \"$Relese\" == \"centos\" ]; then\n        TEMP=\"SUB_MIRROR/${DIST}/os/${VER}/isolinux/initrd.img\"\n    fi\n    [ -n \"$TEMP\" ] || exit 1\n    mirrorStatus=0\n    declare -A MirrorBackup\n    MirrorBackup=([\"debian0\"]=\"\" [\"debian1\"]=\"http://deb.debian.org/debian\" [\"debian2\"]=\"http://archive.debian.org/debian\" [\"ubuntu0\"]=\"\" [\"ubuntu1\"]=\"http://archive.ubuntu.com/ubuntu\" [\"ubuntu2\"]=\"http://ports.ubuntu.com\" [\"centos0\"]=\"\" [\"centos1\"]=\"http://mirror.centos.org/centos\" [\"centos2\"]=\"http://vault.centos.org\")\n    echo \"$New\" | grep -q '^http://\\|^https://\\|^ftp://' && MirrorBackup[${Relese}0]=\"$New\"\n    for mirror in $(echo \"${!MirrorBackup[@]}\" | sed 's/\\ /\\n/g' | sort -n | grep \"^$Relese\"); do\n        Current=\"${MirrorBackup[$mirror]}\"\n        [ -n \"$Current\" ] || continue\n        MirrorURL=$(echo \"$TEMP\" | sed \"s#SUB_MIRROR#${Current}#g\")\n        wget --no-check-certificate --spider --timeout=3 -o /dev/null \"$MirrorURL\"\n        [ $? -eq 0 ] && mirrorStatus=1 && break\n    done\n    [ ${mirrorStatus} -eq 1 ] && echo \"$Current\" || exit 1\n}\n\nfunction netmask() {\n    n=\"${1:-32}\"\n    b=\"\"\n    m=\"\"\n    for ((i = 0; i < 32; i++)); do\n        [ $i -lt $n ] && b=\"${b}1\" || b=\"${b}0\"\n    done\n    for ((i = 0; i < 4; i++)); do\n        s=$(echo \"$b\" | cut -c$(($(($i * 8)) + 1))-$(($(($i + 1)) * 8)))\n        [ \"$m\" == \"\" ] && m=\"$((2#${s}))\" || m=\"${m}.$((2#${s}))\"\n    done\n    echo \"$m\"\n}\n\nfunction getInterface() {\n    interface=\"\"\n    Interfaces=$(cat /proc/net/dev | grep ':' | cut -d':' -f1 | sed 's/\\s//g' | grep -iv '^lo\\|^sit\\|^stf\\|^gif\\|^dummy\\|^vmnet\\|^vir\\|^gre\\|^ipip\\|^ppp\\|^bond\\|^tun\\|^tap\\|^ip6gre\\|^ip6tnl\\|^teql\\|^ocserv\\|^vpn')\n    defaultRoute=$(ip route show default | grep \"^default\")\n    for item in $(echo \"$Interfaces\"); do\n        [ -n \"$item\" ] || continue\n        echo \"$defaultRoute\" | grep -q \"$item\"\n        [ $? -eq 0 ] && interface=\"$item\" && break\n    done\n    echo \"$interface\"\n}\n\nfunction getDisk() {\n    disks=$(lsblk | sed 's/[[:space:]]*$//g' | grep \"disk$\" | cut -d' ' -f1 | grep -v \"fd[0-9]*\\|sr[0-9]*\" | head -n1)\n    [ -n \"$disks\" ] || echo \"\"\n    echo \"$disks\" | grep -q \"/dev\"\n    [ $? -eq 0 ] && echo \"$disks\" || echo \"/dev/$disks\"\n}\n\nfunction diskType() {\n    echo $(udevadm info --query all \"$1\" 2>/dev/null | grep 'ID_PART_TABLE_TYPE' | cut -d'=' -f2)\n}\n\nfunction getGrub() {\n    Boot=\"${1:-/boot}\"\n    folder=$(find \"$Boot\" -type d -name \"grub*\" 2>/dev/null | sort | tail -n1)\n    [ -n \"$folder\" ] || return\n    fileName=$(ls -1 \"$folder\" 2>/dev/null | grep '^grub.conf$\\|^grub.cfg$')\n    if [ -z \"$fileName\" ]; then\n        ls -1 \"$folder\" 2>/dev/null | grep -q '^grubenv$'\n        [ $? -eq 0 ] || return\n        folder=$(find \"$Boot\" -type f -name \"grubenv\" 2>/dev/null | xargs dirname | grep -v \"^$folder\" | head -n1)\n        [ -n \"$folder\" ] || return\n        fileName=$(ls -1 \"$folder\" 2>/dev/null | grep '^grub.conf$\\|^grub.cfg$')\n    fi\n    [ -n \"$fileName\" ] || return\n    [ \"$fileName\" == \"grub.cfg\" ] && ver=\"0\" || ver=\"1\"\n    echo \"${folder}:${fileName}:${ver}\"\n}\n\nfunction lowMem() {\n    mem=$(grep \"^MemTotal:\" /proc/meminfo 2>/dev/null | grep -o \"[0-9]*\")\n    [ -n \"$mem\" ] || return 0\n    [ \"$mem\" -le \"524288\" ] && return 1 || return 0\n}\n\nif [[ \"$loaderMode\" == \"0\" ]]; then\n    Grub=$(getGrub \"/boot\")\n    [ -z \"$Grub\" ] && echo -ne \"Error! Not Found grub.\\n\" && exit 1\n    GRUBDIR=$(echo \"$Grub\" | cut -d':' -f1)\n    GRUBFILE=$(echo \"$Grub\" | cut -d':' -f2)\n    GRUBVER=$(echo \"$Grub\" | cut -d':' -f3)\nfi\n\n[ -n \"$Relese\" ] || Relese='Debian'\nlinux_relese=$(echo \"$Relese\" | sed 's/\\ //g' | sed -r 's/(.*)/\\L\\1/')\nclear && echo -e \"\\n\\033[36m# Check Dependence\\033[0m\\n\"\n\nif [[ \"$ddMode\" == '1' ]]; then\n    dependence iconv\n    linux_relese='debian'\n    tmpDIST='bookworm'\n    tmpVER='amd64'\nfi\n\n[ -n \"$ipAddr\" ] && [ -n \"$ipMask\" ] && [ -n \"$ipGate\" ] && setNet='1'\nif [ \"$setNet\" == \"0\" ]; then\n    dependence ip\n    [ -n \"$interface\" ] || interface=$(getInterface)\n    iAddr=$(ip addr show dev $interface | grep \"inet.*\" | head -n1 | grep -o '[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\/[0-9]\\{1,2\\}')\n    ipAddr=$(echo ${iAddr} | cut -d'/' -f1)\n    ipMask=$(netmask $(echo ${iAddr} | cut -d'/' -f2))\n    ipGate=$(ip route show default | grep \"^default\" | grep -o '[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}' | head -n1)\nfi\nif [ -z \"$interface\" ]; then\n    dependence ip\n    [ -n \"$interface\" ] || interface=$(getInterface)\nfi\nIPv4=\"$ipAddr\"\nMASK=\"$ipMask\"\nGATE=\"$ipGate\"\n\n[ -n \"$IPv4\" ] && [ -n \"$MASK\" ] && [ -n \"$GATE\" ] && [ -n \"$ipDNS\" ] || {\n    echo -ne '\\nError: Invalid network config\\n\\n'\n    bash $0 error\n    exit 1\n}\n\nif [[ \"$Relese\" == 'Debian' ]] || [[ \"$Relese\" == 'Ubuntu' ]]; then\n    dependence wget,awk,grep,sed,cut,cat,lsblk,cpio,gzip,find,dirname,basename\nelif [[ \"$Relese\" == 'CentOS' ]]; then\n    dependence wget,awk,grep,sed,cut,cat,lsblk,cpio,gzip,find,dirname,basename,file,xz\nfi\n[[ -n \"$tmpWORD\" ]] && dependence openssl\n[[ -n \"$tmpWORD\" ]] && myPASSWORD=\"$(openssl passwd -1 \"$tmpWORD\")\"\n[[ -z \"$myPASSWORD\" ]] && myPASSWORD='$1$4BJZaD0A$y1QykUnJ6mXprENfwpseH0'\n\ntempDisk=$(getDisk)\n[ -n \"$tempDisk\" ] && IncDisk=\"$tempDisk\"\n\ncase $(uname -m) in aarch64 | arm64) VER=\"arm64\" ;; x86 | i386 | i686) VER=\"i386\" ;; x86_64 | amd64) VER=\"amd64\" ;; *) VER=\"\" ;; esac\ntmpVER=\"$(echo \"$tmpVER\" | sed -r 's/(.*)/\\L\\1/')\"\nif [[ \"$VER\" != \"arm64\" ]] && [[ -n \"$tmpVER\" ]]; then\n    case \"$tmpVER\" in i386 | i686 | x86 | 32) VER=\"i386\" ;; amd64 | x86_64 | x64 | 64) [[ \"$Relese\" == 'CentOS' ]] && VER='x86_64' || VER='amd64' ;; *) VER='' ;; esac\nfi\n\nif [[ ! -n \"$VER\" ]]; then\n    echo \"Error! Not Architecture.\"\n    bash $0 error\n    exit 1\nfi\n\nif [[ -z \"$tmpDIST\" ]]; then\n    [ \"$Relese\" == 'Debian' ] && tmpDIST='buster'\n    [ \"$Relese\" == 'Ubuntu' ] && tmpDIST='bionic'\n    [ \"$Relese\" == 'CentOS' ] && tmpDIST='6.10'\nfi\n\nif [[ -n \"$tmpDIST\" ]]; then\n    if [[ \"$Relese\" == 'Debian' ]]; then\n        SpikCheckDIST='0'\n        DIST=\"$(echo \"$tmpDIST\" | sed -r 's/(.*)/\\L\\1/')\"\n        echo \"$DIST\" | grep -q '[0-9]'\n        [[ $? -eq '0' ]] && {\n            isDigital=\"$(echo \"$DIST\" | grep -o '[\\.0-9]\\{1,\\}' | sed -n '1h;1!H;$g;s/\\n//g;$p' | cut -d'.' -f1)\"\n            [[ -n $isDigital ]] && {\n                [[ \"$isDigital\" == '7' ]] && DIST='wheezy'\n                [[ \"$isDigital\" == '8' ]] && DIST='jessie'\n                [[ \"$isDigital\" == '9' ]] && DIST='stretch'\n                [[ \"$isDigital\" == '10' ]] && DIST='buster'\n                [[ \"$isDigital\" == '11' ]] && DIST='bullseye'\n                [[ \"$isDigital\" == '12' ]] && DIST='bookworm'\n            }\n        }\n        LinuxMirror=$(selectMirror \"$Relese\" \"$DIST\" \"$VER\" \"$tmpMirror\")\n    fi\n    if [[ \"$Relese\" == 'Ubuntu' ]]; then\n        SpikCheckDIST='0'\n        DIST=\"$(echo \"$tmpDIST\" | sed -r 's/(.*)/\\L\\1/')\"\n        echo \"$DIST\" | grep -q '[0-9]'\n        [[ $? -eq '0' ]] && {\n            isDigital=\"$(echo \"$DIST\" | grep -o '[\\.0-9]\\{1,\\}' | sed -n '1h;1!H;$g;s/\\n//g;$p')\"\n            [[ -n $isDigital ]] && {\n                [[ \"$isDigital\" == '12.04' ]] && DIST='precise'\n                [[ \"$isDigital\" == '14.04' ]] && DIST='trusty'\n                [[ \"$isDigital\" == '16.04' ]] && DIST='xenial'\n                [[ \"$isDigital\" == '18.04' ]] && DIST='bionic'\n                [[ \"$isDigital\" == '20.04' ]] && DIST='focal'\n                # [[ \"$isDigital\" == '22.04' ]] && DIST='jammy';\n            }\n        }\n        LinuxMirror=$(selectMirror \"$Relese\" \"$DIST\" \"$VER\" \"$tmpMirror\")\n    fi\n    if [[ \"$Relese\" == 'CentOS' ]]; then\n        SpikCheckDIST='1'\n        DISTCheck=\"$(echo \"$tmpDIST\" | grep -o '[\\.0-9]\\{1,\\}' | head -n1)\"\n        LinuxMirror=$(selectMirror \"$Relese\" \"$DISTCheck\" \"$VER\" \"$tmpMirror\")\n        ListDIST=\"$(wget --no-check-certificate -qO- \"$LinuxMirror/dir_sizes\" | cut -f2 | grep '^[0-9]')\"\n        DIST=\"$(echo \"$ListDIST\" | grep \"^$DISTCheck\" | head -n1)\"\n        [[ -z \"$DIST\" ]] && {\n            echo -ne '\\nThe dists version not found in this mirror, Please check it! \\n\\n'\n            bash $0 error\n            exit 1\n        }\n        wget --no-check-certificate -qO- \"$LinuxMirror/$DIST/os/$VER/.treeinfo\" | grep -q 'general'\n        [[ $? != '0' ]] && {\n            echo -ne \"\\nThe version not found in this mirror, Please change mirror try again! \\n\\n\"\n            exit 1\n        }\n    fi\nfi\n\nif [[ -z \"$LinuxMirror\" ]]; then\n    echo -ne \"\\033[31mError! \\033[0mInvaild mirror! \\n\"\n    [ \"$Relese\" == 'Debian' ] && echo -en \"\\033[33mexample:\\033[0m http://deb.debian.org/debian\\n\\n\"\n    [ \"$Relese\" == 'Ubuntu' ] && echo -en \"\\033[33mexample:\\033[0m http://archive.ubuntu.com/ubuntu\\n\\n\"\n    [ \"$Relese\" == 'CentOS' ] && echo -en \"\\033[33mexample:\\033[0m http://mirror.centos.org/centos\\n\\n\"\n    bash $0 error\n    exit 1\nfi\n\nif [[ \"$SpikCheckDIST\" == '0' ]]; then\n    DistsList=\"$(wget --no-check-certificate -qO- \"$LinuxMirror/dists/\" | grep -o 'href=.*/\"' | cut -d'\"' -f2 | sed '/-\\|old\\|Debian\\|experimental\\|stable\\|test\\|sid\\|devel/d' | grep '^[^/]' | sed -n '1h;1!H;$g;s/\\n//g;s/\\//\\;/g;$p')\"\n    for CheckDEB in $(echo \"$DistsList\" | sed 's/;/\\n/g'); do\n        [[ \"$CheckDEB\" == \"$DIST\" ]] && FindDists='1' && break\n    done\n    [[ \"$FindDists\" == '0' ]] && {\n        echo -ne '\\nThe dists version not found, Please check it! \\n\\n'\n        bash $0 error\n        exit 1\n    }\nfi\n\nif [[ \"$ddMode\" == '1' ]]; then\n    if [[ -n \"$tmpURL\" ]]; then\n        DDURL=\"$tmpURL\"\n        echo \"$DDURL\" | grep -q '^http://\\|^ftp://\\|^https://'\n        [[ $? -ne '0' ]] && echo 'Please input vaild URL, Only support http://, ftp:// and https:// !' && exit 1\n        # Decompress command selection\n        if echo \"$DDURL\" | grep -q '.gz'; then\n            DEC_CMD=\"gunzip -dc\"\n        elif echo \"$DDURL\" | grep -q '.xz'; then\n            DEC_CMD=\"xzcat\"\n        else\n            echo 'Please input vaild URL, Only support gz or xz file!' && exit 1\n        fi\n    else\n        echo 'Please input vaild image URL! '\n        exit 1\n    fi\nfi\n\nclear && echo -e \"\\n\\033[36m# Install\\033[0m\\n\"\n\n[[ \"$ddMode\" == '1' ]] && echo -ne \"\\033[34mAuto Mode\\033[0m insatll \\033[33mWindows\\033[0m\\n[\\033[33m$DDURL\\033[0m]\\n\"\n\nif [ -z \"$interfaceSelect\" ]; then\n    if [[ \"$linux_relese\" == 'debian' ]] || [[ \"$linux_relese\" == 'ubuntu' ]]; then\n        interfaceSelect=\"auto\"\n    elif [[ \"$linux_relese\" == 'centos' ]]; then\n        interfaceSelect=\"link\"\n    fi\nfi\n\nif [[ \"$linux_relese\" == 'centos' ]]; then\n    if [[ \"$DIST\" != \"$UNVER\" ]]; then\n        awk 'BEGIN{print '${UNVER}'-'${DIST}'}' | grep -q '^-'\n        if [ $? != '0' ]; then\n            UNKNOWHW='1'\n            echo -en \"\\033[33mThe version lower then \\033[31m$UNVER\\033[33m may not support in auto mode! \\033[0m\\n\"\n        fi\n        awk 'BEGIN{print '${UNVER}'-'${DIST}'+0.59}' | grep -q '^-'\n        if [ $? == '0' ]; then\n            echo -en \"\\n\\033[31mThe version higher then \\033[33m6.10 \\033[31mis not support in current! \\033[0m\\n\\n\"\n            exit 1\n        fi\n    fi\nfi\n\necho -e \"\\n[\\033[33m$Relese\\033[0m] [\\033[33m$DIST\\033[0m] [\\033[33m$VER\\033[0m] Downloading...\"\n\nif [[ \"$linux_relese\" == 'debian' ]] || [[ \"$linux_relese\" == 'ubuntu' ]]; then\n    [ \"$DIST\" == \"focal\" ] && legacy=\"legacy-\" || legacy=\"\"\n    wget --no-check-certificate -qO '/tmp/initrd.img' \"${LinuxMirror}/dists/${DIST}/main/installer-${VER}/current/${legacy}images/netboot/${linux_relese}-installer/${VER}/initrd.gz\"\n    [[ $? -ne '0' ]] && echo -ne \"\\033[31mError! \\033[0mDownload 'initrd.img' for \\033[33m$linux_relese\\033[0m failed! \\n\" && exit 1\n    wget --no-check-certificate -qO '/tmp/vmlinuz' \"${LinuxMirror}/dists/${DIST}${inUpdate}/main/installer-${VER}/current/${legacy}images/netboot/${linux_relese}-installer/${VER}/linux\"\n    [[ $? -ne '0' ]] && echo -ne \"\\033[31mError! \\033[0mDownload 'vmlinuz' for \\033[33m$linux_relese\\033[0m failed! \\n\" && exit 1\n    MirrorHost=\"$(echo \"$LinuxMirror\" | awk -F'://|/' '{print $2}')\"\n    MirrorFolder=\"$(echo \"$LinuxMirror\" | awk -F''${MirrorHost}'' '{print $2}')\"\n    [ -n \"$MirrorFolder\" ] || MirrorFolder=\"/\"\nelif [[ \"$linux_relese\" == 'centos' ]]; then\n    wget --no-check-certificate -qO '/tmp/initrd.img' \"${LinuxMirror}/${DIST}/os/${VER}/isolinux/initrd.img\"\n    [[ $? -ne '0' ]] && echo -ne \"\\033[31mError! \\033[0mDownload 'initrd.img' for \\033[33m$linux_relese\\033[0m failed! \\n\" && exit 1\n    wget --no-check-certificate -qO '/tmp/vmlinuz' \"${LinuxMirror}/${DIST}/os/${VER}/isolinux/vmlinuz\"\n    [[ $? -ne '0' ]] && echo -ne \"\\033[31mError! \\033[0mDownload 'vmlinuz' for \\033[33m$linux_relese\\033[0m failed! \\n\" && exit 1\nelse\n    bash $0 error\n    exit 1\nfi\nif [[ \"$linux_relese\" == 'debian' ]]; then\n    if [[ \"$IncFirmware\" == '1' ]]; then\n        wget --no-check-certificate -qO '/tmp/firmware.cpio.gz' \"http://cdimage.debian.org/cdimage/unofficial/non-free/firmware/${DIST}/current/firmware.cpio.gz\"\n        [[ $? -ne '0' ]] && echo -ne \"\\033[31mError! \\033[0mDownload 'firmware' for \\033[33m$linux_relese\\033[0m failed! \\n\" && exit 1\n    fi\n    if [[ \"$ddMode\" == '1' ]]; then\n        vKernel_udeb=$(wget --no-check-certificate -qO- \"http://$LinuxMirror/dists/$DIST/main/installer-$VER/current/images/udeb.list\" | grep '^acpi-modules' | head -n1 | grep -o '[0-9]\\{1,2\\}.[0-9]\\{1,2\\}.[0-9]\\{1,2\\}-[0-9]\\{1,2\\}' | head -n1)\n        [[ -z \"vKernel_udeb\" ]] && vKernel_udeb=\"6.1.0-10\"\n    fi\nfi\n\nif [[ \"$loaderMode\" == \"0\" ]]; then\n    [[ ! -f \"${GRUBDIR}/${GRUBFILE}\" ]] && echo \"Error! Not Found ${GRUBFILE}. \" && exit 1\n\n    [[ ! -f \"${GRUBDIR}/${GRUBFILE}.old\" ]] && [[ -f \"${GRUBDIR}/${GRUBFILE}.bak\" ]] && mv -f \"${GRUBDIR}/${GRUBFILE}.bak\" \"${GRUBDIR}/${GRUBFILE}.old\"\n    mv -f \"${GRUBDIR}/${GRUBFILE}\" \"${GRUBDIR}/${GRUBFILE}.bak\"\n    [[ -f \"${GRUBDIR}/${GRUBFILE}.old\" ]] && cat \"${GRUBDIR}/${GRUBFILE}.old\" >\"${GRUBDIR}/${GRUBFILE}\" || cat \"${GRUBDIR}/${GRUBFILE}.bak\" >\"${GRUBDIR}/${GRUBFILE}\"\nelse\n    GRUBVER='-1'\nfi\n\n[[ \"$GRUBVER\" == '0' ]] && {\n    READGRUB='/tmp/grub.read'\n    cat $GRUBDIR/$GRUBFILE | sed -n '1h;1!H;$g;s/\\n/%%%%%%%/g;$p' | grep -om 1 'menuentry\\ [^{]*{[^}]*}%%%%%%%' | sed 's/%%%%%%%/\\n/g' >$READGRUB\n    LoadNum=\"$(cat $READGRUB | grep -c 'menuentry ')\"\n    if [[ \"$LoadNum\" -eq '1' ]]; then\n        cat $READGRUB | sed '/^$/d' >/tmp/grub.new\n    elif [[ \"$LoadNum\" -gt '1' ]]; then\n        CFG0=\"$(awk '/menuentry /{print NR}' $READGRUB | head -n 1)\"\n        CFG2=\"$(awk '/menuentry /{print NR}' $READGRUB | head -n 2 | tail -n 1)\"\n        CFG1=\"\"\n        for tmpCFG in $(awk '/}/{print NR}' $READGRUB); do\n            [ \"$tmpCFG\" -gt \"$CFG0\" -a \"$tmpCFG\" -lt \"$CFG2\" ] && CFG1=\"$tmpCFG\"\n        done\n        [[ -z \"$CFG1\" ]] && {\n            echo \"Error! read $GRUBFILE. \"\n            exit 1\n        }\n\n        sed -n \"$CFG0,$CFG1\"p $READGRUB >/tmp/grub.new\n        [[ -f /tmp/grub.new ]] && [[ \"$(grep -c '{' /tmp/grub.new)\" -eq \"$(grep -c '}' /tmp/grub.new)\" ]] || {\n            echo -ne \"\\033[31mError! \\033[0mNot configure $GRUBFILE. \\n\"\n            exit 1\n        }\n    fi\n    [ ! -f /tmp/grub.new ] && echo \"Error! $GRUBFILE. \" && exit 1\n    sed -i \"/menuentry.*/c\\menuentry\\ \\'Install OS \\[$DIST\\ $VER\\]\\'\\ --class debian\\ --class\\ gnu-linux\\ --class\\ gnu\\ --class\\ os\\ \\{\" /tmp/grub.new\n    sed -i \"/echo.*Loading/d\" /tmp/grub.new\n    INSERTGRUB=\"$(awk '/menuentry /{print NR}' $GRUBDIR/$GRUBFILE | head -n 1)\"\n}\n\n[[ \"$GRUBVER\" == '1' ]] && {\n    CFG0=\"$(awk '/title[\\ ]|title[\\t]/{print NR}' $GRUBDIR/$GRUBFILE | head -n 1)\"\n    CFG1=\"$(awk '/title[\\ ]|title[\\t]/{print NR}' $GRUBDIR/$GRUBFILE | head -n 2 | tail -n 1)\"\n    [[ -n $CFG0 ]] && [ -z $CFG1 -o $CFG1 == $CFG0 ] && sed -n \"$CFG0,$\"p $GRUBDIR/$GRUBFILE >/tmp/grub.new\n    [[ -n $CFG0 ]] && [ -z $CFG1 -o $CFG1 != $CFG0 ] && sed -n \"$CFG0,$(($CFG1 - 1))\"p $GRUBDIR/$GRUBFILE >/tmp/grub.new\n    [[ ! -f /tmp/grub.new ]] && echo \"Error! configure append $GRUBFILE. \" && exit 1\n    sed -i \"/title.*/c\\title\\ \\'Install OS \\[$DIST\\ $VER\\]\\'\" /tmp/grub.new\n    sed -i '/^#/d' /tmp/grub.new\n    INSERTGRUB=\"$(awk '/title[\\ ]|title[\\t]/{print NR}' $GRUBDIR/$GRUBFILE | head -n 1)\"\n}\n\nif [[ \"$loaderMode\" == \"0\" ]]; then\n    [[ -n \"$(grep 'linux.*/\\|kernel.*/' /tmp/grub.new | awk '{print $2}' | tail -n 1 | grep '^/boot/')\" ]] && Type='InBoot' || Type='NoBoot'\n\n    LinuxKernel=\"$(grep 'linux.*/\\|kernel.*/' /tmp/grub.new | awk '{print $1}' | head -n 1)\"\n    [[ -z \"$LinuxKernel\" ]] && echo \"Error! read grub config! \" && exit 1\n    LinuxIMG=\"$(grep 'initrd.*/' /tmp/grub.new | awk '{print $1}' | tail -n 1)\"\n    [ -z \"$LinuxIMG\" ] && sed -i \"/$LinuxKernel.*\\//a\\\\\\tinitrd\\ \\/\" /tmp/grub.new && LinuxIMG='initrd'\n\n    [[ \"$setInterfaceName\" == \"1\" ]] && Add_OPTION=\"net.ifnames=0 biosdevname=0\" || Add_OPTION=\"\"\n    [[ \"$setIPv6\" == \"1\" ]] && Add_OPTION=\"$Add_OPTION ipv6.disable=1\"\n\n    lowMem || Add_OPTION=\"$Add_OPTION lowmem=+2\"\n\n    if [[ \"$linux_relese\" == 'debian' ]] || [[ \"$linux_relese\" == 'ubuntu' ]]; then\n        BOOT_OPTION=\"auto=true $Add_OPTION hostname=$linux_relese domain=$linux_relese quiet\"\n    elif [[ \"$linux_relese\" == 'centos' ]]; then\n        BOOT_OPTION=\"ks=file://ks.cfg $Add_OPTION ksdevice=$interfaceSelect\"\n    fi\n\n    [ -n \"$setConsole\" ] && BOOT_OPTION=\"$BOOT_OPTION --- console=$setConsole\"\n\n    [[ \"$Type\" == 'InBoot' ]] && {\n        sed -i \"/$LinuxKernel.*\\//c\\\\\\t$LinuxKernel\\\\t\\/boot\\/vmlinuz $BOOT_OPTION\" /tmp/grub.new\n        sed -i \"/$LinuxIMG.*\\//c\\\\\\t$LinuxIMG\\\\t\\/boot\\/initrd.img\" /tmp/grub.new\n    }\n\n    [[ \"$Type\" == 'NoBoot' ]] && {\n        sed -i \"/$LinuxKernel.*\\//c\\\\\\t$LinuxKernel\\\\t\\/vmlinuz $BOOT_OPTION\" /tmp/grub.new\n        sed -i \"/$LinuxIMG.*\\//c\\\\\\t$LinuxIMG\\\\t\\/initrd.img\" /tmp/grub.new\n    }\n\n    sed -i '$a\\\\n' /tmp/grub.new\n\n    sed -i ''${INSERTGRUB}'i\\\\n' $GRUBDIR/$GRUBFILE\n    sed -i ''${INSERTGRUB}'r /tmp/grub.new' $GRUBDIR/$GRUBFILE\n    [[ -f $GRUBDIR/grubenv ]] && sed -i 's/saved_entry/#saved_entry/g' $GRUBDIR/grubenv\nfi\n\n[[ -d /tmp/boot ]] && rm -rf /tmp/boot\nmkdir -p /tmp/boot\ncd /tmp/boot\n\nif [[ \"$linux_relese\" == 'debian' ]] || [[ \"$linux_relese\" == 'ubuntu' ]]; then\n    COMPTYPE=\"gzip\"\nelif [[ \"$linux_relese\" == 'centos' ]]; then\n    COMPTYPE=\"$(file ../initrd.img | grep -o ':.*compressed data' | cut -d' ' -f2 | sed -r 's/(.*)/\\L\\1/' | head -n1)\"\n    [[ -z \"$COMPTYPE\" ]] && echo \"Detect compressed type fail.\" && exit 1\nfi\nCompDected='0'\nfor COMP in $(echo -en 'gzip\\nlzma\\nxz'); do\n    if [[ \"$COMPTYPE\" == \"$COMP\" ]]; then\n        CompDected='1'\n        if [[ \"$COMPTYPE\" == 'gzip' ]]; then\n            NewIMG=\"initrd.img.gz\"\n        else\n            NewIMG=\"initrd.img.$COMPTYPE\"\n        fi\n        mv -f \"/tmp/initrd.img\" \"/tmp/$NewIMG\"\n        break\n    fi\ndone\n[[ \"$CompDected\" != '1' ]] && echo \"Detect compressed type not support.\" && exit 1\n[[ \"$COMPTYPE\" == 'lzma' ]] && UNCOMP='xz --format=lzma --decompress'\n[[ \"$COMPTYPE\" == 'xz' ]] && UNCOMP='xz --decompress'\n[[ \"$COMPTYPE\" == 'gzip' ]] && UNCOMP='gzip -d'\n\n$UNCOMP </tmp/$NewIMG | cpio --extract --verbose --make-directories --no-absolute-filenames >>/dev/null 2>&1\n\nif [[ \"$linux_relese\" == 'debian' ]] || [[ \"$linux_relese\" == 'ubuntu' ]]; then\n    CurrentKernelVersion=$(ls -1 ./lib/modules 2>/dev/null | head -n1)\n    [ -n \"$CurrentKernelVersion\" ] && SelectLowmem=\"di-utils-exit-installer,driver-injection-disk-detect,fdisk-udeb,netcfg-static,parted-udeb,partman-auto,partman-ext3,ata-modules-${CurrentKernelVersion}-di,efi-modules-${CurrentKernelVersion}-di,sata-modules-${CurrentKernelVersion}-di,scsi-modules-${CurrentKernelVersion}-di,scsi-nic-modules-${CurrentKernelVersion}-di\" || SelectLowmem=\"\"\n    cat >/tmp/boot/preseed.cfg <<EOF\nd-i debian-installer/locale string en_US.UTF-8\nd-i debian-installer/country string US\nd-i debian-installer/language string en\n\nd-i console-setup/layoutcode string us\n\nd-i keyboard-configuration/xkb-keymap string us\nd-i lowmem/low note\nd-i anna/choose_modules_lowmem multiselect $SelectLowmem\n\nd-i netcfg/choose_interface select $interfaceSelect\n\nd-i netcfg/disable_autoconfig boolean true\nd-i netcfg/dhcp_failed note\nd-i netcfg/dhcp_options select Configure network manually\nd-i netcfg/get_ipaddress string $IPv4\nd-i netcfg/get_netmask string $MASK\nd-i netcfg/get_gateway string $GATE\nd-i netcfg/get_nameservers string $ipDNS\nd-i netcfg/no_default_route boolean true\nd-i netcfg/confirm_static boolean true\n\nd-i hw-detect/load_firmware boolean true\n\nd-i mirror/country string manual\nd-i mirror/http/hostname string $MirrorHost\nd-i mirror/http/directory string $MirrorFolder\nd-i mirror/http/proxy string\n\nd-i passwd/root-login boolean ture\nd-i passwd/make-user boolean false\nd-i passwd/root-password-crypted password $myPASSWORD\nd-i user-setup/allow-password-weak boolean true\nd-i user-setup/encrypt-home boolean false\n\nd-i clock-setup/utc boolean true\nd-i time/zone string US/Eastern\nd-i clock-setup/ntp boolean false\n\nd-i preseed/early_command string anna-install libfuse2-udeb fuse-udeb ntfs-3g-udeb libcrypto1.1-udeb libpcre2-8-0-udeb libssl1.1-udeb libuuid1-udeb zlib1g-udeb wget-udeb\nd-i partman/early_command string [[ -n \"\\$(blkid -t TYPE='vfat' -o device)\" ]] && umount \"\\$(blkid -t TYPE='vfat' -o device)\"; \\\ndebconf-set partman-auto/disk \"\\$(list-devices disk |head -n1)\"; \\\nwget -qO- '$DDURL' | $DEC_CMD | /bin/dd of=\\$(list-devices disk |head -n1); \\\nmount.ntfs-3g \\$(list-devices partition |head -n1) /mnt; \\\ncd '/mnt/ProgramData/Microsoft/Windows/Start Menu/Programs'; \\\ncd Start* || cd start*; \\\ncp -f '/net.bat' './net.bat'; \\\n/sbin/reboot; \\\numount /media || true; \\\n\nd-i partman-partitioning/confirm_write_new_label boolean true\nd-i partman/mount_style select uuid\nd-i partman/choose_partition select finish\nd-i partman-auto/method string regular\nd-i partman-auto/init_automatically_partition select Guided - use entire disk\nd-i partman-auto/choose_recipe select All files in one partition (recommended for new users)\nd-i partman-md/device_remove_md boolean true\nd-i partman-lvm/device_remove_lvm boolean true\nd-i partman-lvm/confirm boolean true\nd-i partman-lvm/confirm_nooverwrite boolean true\nd-i partman/confirm boolean true\nd-i partman/confirm_nooverwrite boolean true\n\nd-i debian-installer/allow_unauthenticated boolean true\n\ntasksel tasksel/first multiselect minimal\nd-i pkgsel/update-policy select none\nd-i pkgsel/include string openssh-server\nd-i pkgsel/upgrade select none\nd-i apt-setup/services-select multiselect\n\npopularity-contest popularity-contest/participate boolean false\n\nd-i grub-installer/only_debian boolean true\nd-i grub-installer/bootdev string $IncDisk\nd-i grub-installer/force-efi-extra-removable boolean true\nd-i finish-install/reboot_in_progress note\nd-i debian-installer/exit/reboot boolean true\nd-i preseed/late_command string    \\\nsed -ri 's/^#?Port.*/Port ${sshPORT}/g' /target/etc/ssh/sshd_config; \\\nsed -ri 's/^#?PermitRootLogin.*/PermitRootLogin yes/g' /target/etc/ssh/sshd_config; \\\nsed -ri 's/^#?PasswordAuthentication.*/PasswordAuthentication yes/g' /target/etc/ssh/sshd_config; \\\necho '@reboot root cat /etc/run.sh 2>/dev/null |base64 -d >/tmp/run.sh; rm -rf /etc/run.sh; sed -i /^@reboot/d /etc/crontab; bash /tmp/run.sh' >>/target/etc/crontab; \\\necho '' >>/target/etc/crontab; \\\necho '${setCMD}' >/target/etc/run.sh;\nEOF\n\n    if [[ \"$loaderMode\" != \"0\" ]] && [[ \"$setNet\" == '0' ]]; then\n        sed -i '/netcfg\\/disable_autoconfig/d' /tmp/boot/preseed.cfg\n        sed -i '/netcfg\\/dhcp_options/d' /tmp/boot/preseed.cfg\n        sed -i '/netcfg\\/get_.*/d' /tmp/boot/preseed.cfg\n        sed -i '/netcfg\\/confirm_static/d' /tmp/boot/preseed.cfg\n    fi\n\n    if [[ \"$linux_relese\" == 'debian' ]]; then\n        sed -i '/user-setup\\/allow-password-weak/d' /tmp/boot/preseed.cfg\n        sed -i '/user-setup\\/encrypt-home/d' /tmp/boot/preseed.cfg\n        sed -i '/pkgsel\\/update-policy/d' /tmp/boot/preseed.cfg\n        sed -i 's/umount\\ \\/media.*true\\;\\ //g' /tmp/boot/preseed.cfg\n        [[ -f '/tmp/firmware.cpio.gz' ]] && gzip -d </tmp/firmware.cpio.gz | cpio --extract --verbose --make-directories --no-absolute-filenames >>/dev/null 2>&1\n    else\n        sed -i '/d-i\\ grub-installer\\/force-efi-extra-removable/d' /tmp/boot/preseed.cfg\n    fi\n\n    [[ \"$ddMode\" == '1' ]] && {\n        WinNoDHCP() {\n            echo -ne \"for\\0040\\0057f\\0040\\0042tokens\\00753\\0052\\0042\\0040\\0045\\0045i\\0040in\\0040\\0050\\0047netsh\\0040interface\\0040show\\0040interface\\0040\\0136\\0174more\\0040\\00533\\0040\\0136\\0174findstr\\0040\\0057I\\0040\\0057R\\0040\\0042本地\\0056\\0052\\0040以太\\0056\\0052\\0040Local\\0056\\0052\\0040Ethernet\\0042\\0047\\0051\\0040do\\0040\\0050set\\0040EthName\\0075\\0045\\0045j\\0051\\r\\nnetsh\\0040\\0055c\\0040interface\\0040ip\\0040set\\0040address\\0040name\\0075\\0042\\0045EthName\\0045\\0042\\0040source\\0075static\\0040address\\0075$IPv4\\0040mask\\0075$MASK\\0040gateway\\0075$GATE\\r\\nnetsh\\0040\\0055c\\0040interface\\0040ip\\0040add\\0040dnsservers\\0040name\\0075\\0042\\0045EthName\\0045\\0042\\0040address\\00758\\00568\\00568\\00568\\0040index\\00751\\0040validate\\0075no\\r\\n\\r\\n\" >>'/tmp/boot/net.tmp'\n        }\n        WinRDP() {\n            echo -ne \"netsh\\0040firewall\\0040set\\0040portopening\\0040protocol\\0075ALL\\0040port\\0075$WinRemote\\0040name\\0075RDP\\0040mode\\0075ENABLE\\0040scope\\0075ALL\\0040profile\\0075ALL\\r\\nnetsh\\0040firewall\\0040set\\0040portopening\\0040protocol\\0075ALL\\0040port\\0075$WinRemote\\0040name\\0075RDP\\0040mode\\0075ENABLE\\0040scope\\0075ALL\\0040profile\\0075CURRENT\\r\\nreg\\0040add\\0040\\0042HKLM\\0134SYSTEM\\0134CurrentControlSet\\0134Control\\0134Network\\0134NewNetworkWindowOff\\0042\\0040\\0057f\\r\\nreg\\0040add\\0040\\0042HKLM\\0134SYSTEM\\0134CurrentControlSet\\0134Control\\0134Terminal\\0040Server\\0042\\0040\\0057v\\0040fDenyTSConnections\\0040\\0057t\\0040reg\\0137dword\\0040\\0057d\\00400\\0040\\0057f\\r\\nreg\\0040add\\0040\\0042HKLM\\0134SYSTEM\\0134CurrentControlSet\\0134Control\\0134Terminal\\0040Server\\0134Wds\\0134rdpwd\\0134Tds\\0134tcp\\0042\\0040\\0057v\\0040PortNumber\\0040\\0057t\\0040reg\\0137dword\\0040\\0057d\\0040$WinRemote\\0040\\0057f\\r\\nreg\\0040add\\0040\\0042HKLM\\0134SYSTEM\\0134CurrentControlSet\\0134Control\\0134Terminal\\0040Server\\0134WinStations\\0134RDP\\0055Tcp\\0042\\0040\\0057v\\0040PortNumber\\0040\\0057t\\0040reg\\0137dword\\0040\\0057d\\0040$WinRemote\\0040\\0057f\\r\\nreg\\0040add\\0040\\0042HKLM\\0134SYSTEM\\0134CurrentControlSet\\0134Control\\0134Terminal\\0040Server\\0134WinStations\\0134RDP\\0055Tcp\\0042\\0040\\0057v\\0040UserAuthentication\\0040\\0057t\\0040reg\\0137dword\\0040\\0057d\\00400\\0040\\0057f\\r\\nFOR\\0040\\0057F\\0040\\0042tokens\\00752\\0040delims\\0075\\0072\\0042\\0040\\0045\\0045i\\0040in\\0040\\0050\\0047SC\\0040QUERYEX\\0040TermService\\0040\\0136\\0174FINDSTR\\0040\\0057I\\0040\\0042PID\\0042\\0047\\0051\\0040do\\0040TASKKILL\\0040\\0057F\\0040\\0057PID\\0040\\0045\\0045i\\r\\nFOR\\0040\\0057F\\0040\\0042tokens\\00752\\0040delims\\0075\\0072\\0042\\0040\\0045\\0045i\\0040in\\0040\\0050\\0047SC\\0040QUERYEX\\0040UmRdpService\\0040\\0136\\0174FINDSTR\\0040\\0057I\\0040\\0042PID\\0042\\0047\\0051\\0040do\\0040TASKKILL\\0040\\0057F\\0040\\0057PID\\0040\\0045\\0045i\\r\\nSC\\0040START\\0040TermService\\r\\n\\r\\n\" >>'/tmp/boot/net.tmp'\n        }\n        echo -ne \"\\0100ECHO\\0040OFF\\r\\n\\r\\ncd\\0056\\0076\\0045WINDIR\\0045\\0134GetAdmin\\r\\nif\\0040exist\\0040\\0045WINDIR\\0045\\0134GetAdmin\\0040\\0050del\\0040\\0057f\\0040\\0057q\\0040\\0042\\0045WINDIR\\0045\\0134GetAdmin\\0042\\0051\\0040else\\0040\\0050\\r\\necho\\0040CreateObject\\0136\\0050\\0042Shell\\0056Application\\0042\\0136\\0051\\0056ShellExecute\\0040\\0042\\0045\\0176s0\\0042\\0054\\0040\\0042\\0045\\0052\\0042\\0054\\0040\\0042\\0042\\0054\\0040\\0042runas\\0042\\0054\\00401\\0040\\0076\\0076\\0040\\0042\\0045temp\\0045\\0134Admin\\0056vbs\\0042\\r\\n\\0042\\0045temp\\0045\\0134Admin\\0056vbs\\0042\\r\\ndel\\0040\\0057f\\0040\\0057q\\0040\\0042\\0045temp\\0045\\0134Admin\\0056vbs\\0042\\r\\nexit\\0040\\0057b\\00402\\0051\\r\\n\\r\\n\" >'/tmp/boot/net.tmp'\n        [[ \"$setNet\" == '1' ]] && WinNoDHCP\n        [[ \"$setNet\" == '0' ]] && [[ \"$AutoNet\" == '0' ]] && WinNoDHCP\n        [[ \"$setRDP\" == '1' ]] && [[ -n \"$WinRemote\" ]] && WinRDP\n        echo -ne \"ECHO\\0040SELECT\\0040VOLUME\\0075\\0045\\0045SystemDrive\\0045\\0045\\0040\\0076\\0040\\0042\\0045SystemDrive\\0045\\0134diskpart\\0056extend\\0042\\r\\nECHO\\0040EXTEND\\0040\\0076\\0076\\0040\\0042\\0045SystemDrive\\0045\\0134diskpart\\0056extend\\0042\\r\\nSTART\\0040/WAIT\\0040DISKPART\\0040\\0057S\\0040\\0042\\0045SystemDrive\\0045\\0134diskpart\\0056extend\\0042\\r\\nDEL\\0040\\0057f\\0040\\0057q\\0040\\0042\\0045SystemDrive\\0045\\0134diskpart\\0056extend\\0042\\r\\n\\r\\n\" >>'/tmp/boot/net.tmp'\n        echo -ne \"cd\\0040\\0057d\\0040\\0042\\0045ProgramData\\0045\\0057Microsoft\\0057Windows\\0057Start\\0040Menu\\0057Programs\\0057Startup\\0042\\r\\ndel\\0040\\0057f\\0040\\0057q\\0040net\\0056bat\\r\\n\\r\\n\\r\\n\" >>'/tmp/boot/net.tmp'\n        iconv -f 'UTF-8' -t 'GBK' '/tmp/boot/net.tmp' -o '/tmp/boot/net.bat'\n        rm -rf '/tmp/boot/net.tmp'\n    }\n\n    [[ \"$ddMode\" == '0' ]] && {\n        sed -i '/anna-install/d' /tmp/boot/preseed.cfg\n        sed -i 's/wget.*\\/sbin\\/reboot\\;\\ //g' /tmp/boot/preseed.cfg\n    }\n\nelif [[ \"$linux_relese\" == 'centos' ]]; then\n    cat >/tmp/boot/ks.cfg <<EOF\n#platform=x86, AMD64, or Intel EM64T\nfirewall --enabled --ssh\ninstall\nurl --url=\"$LinuxMirror/$DIST/os/$VER/\"\nrootpw --iscrypted $myPASSWORD\nauth --useshadow --passalgo=sha512\nfirstboot --disable\nlang en_US\nkeyboard us\nselinux --disabled\nlogging --level=info\nreboot\ntext\nunsupported_hardware\nvnc\nskipx\ntimezone --isUtc Asia/Hong_Kong\n#ONDHCP network --bootproto=dhcp --onboot=on\nnetwork --bootproto=static --ip=$IPv4 --netmask=$MASK --gateway=$GATE --nameserver=$ipDNS --onboot=on\nbootloader --location=mbr --append=\"rhgb quiet crashkernel=auto\"\nzerombr\nclearpart --all --initlabel \nautopart\n\n%packages\n@base\n%end\n\n%post --interpreter=/bin/bash\nrm -rf /root/anaconda-ks.cfg\nrm -rf /root/install.*log\n%end\n\nEOF\n\n    [[ \"$UNKNOWHW\" == '1' ]] && sed -i 's/^unsupported_hardware/#unsupported_hardware/g' /tmp/boot/ks.cfg\n    [[ \"$(echo \"$DIST\" | grep -o '^[0-9]\\{1\\}')\" == '5' ]] && sed -i '0,/^%end/s//#%end/' /tmp/boot/ks.cfg\nfi\n\nfind . | cpio -H newc --create --verbose | gzip -9 >/tmp/initrd.img\ncp -f /tmp/initrd.img /boot/initrd.img || sudo cp -f /tmp/initrd.img /boot/initrd.img\ncp -f /tmp/vmlinuz /boot/vmlinuz || sudo cp -f /tmp/vmlinuz /boot/vmlinuz\n\nchown root:root $GRUBDIR/$GRUBFILE\nchmod 444 $GRUBDIR/$GRUBFILE\n\nif [[ \"$loaderMode\" == \"0\" ]]; then\n    sleep 3 && reboot || sudo reboot >/dev/null 2>&1\nelse\n    rm -rf \"$HOME/loader\"\n    mkdir -p \"$HOME/loader\"\n    cp -rf \"/boot/initrd.img\" \"$HOME/loader/initrd.img\"\n    cp -rf \"/boot/vmlinuz\" \"$HOME/loader/vmlinuz\"\n    [[ -f \"/boot/initrd.img\" ]] && rm -rf \"/boot/initrd.img\"\n    [[ -f \"/boot/vmlinuz\" ]] && rm -rf \"/boot/vmlinuz\"\n    echo && ls -AR1 \"$HOME/loader\"\nfi\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0595703125,
          "content": "Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.4404296875,
          "content": "## Across the Great Wall we can reach every corner in the world\n\n## wireguard.sh\n\n- Description: This is a shell script for configure and start WireGuard VPN server.\n- Intro: https://teddysun.com/554.html\n\n## bbr.sh\n\n- Description: Auto install latest kernel for TCP BBR\n- Intro: https://teddysun.com/489.html\n\n## kms.sh\n\n- Description: Auto install KMS Server\n- Intro: https://teddysun.com/530.html\n- **KMS Server Docker Image**: https://hub.docker.com/r/teddysun/kms\n\n## bench.sh\n\n- Description: Auto test I/O & upload & download speed script\n- Intro: https://teddysun.com/444.html\n\n## backup.sh\n\n- You must modify the config before run it\n- Backup MySQL or MariaDB datebases, files and directories\n- Backup file is encrypted with AES256-cbc with SHA1 message-digest (Depends on `openssl` command) (option)\n- Auto transfer backup file to Google Drive (Depends on [`rclone`](https://teddysun.com/469.html) command) (option)\n- Auto transfer backup file to FTP server (Depends on `ftp` command) (option)\n- Auto delete remote file from Google Drive or FTP server (option)\n- Intro: https://teddysun.com/469.html\n\n## ftp_upload.sh\n\n- You must modify the config before run it\n- Upload file(s) to FTP server\n- Intro: https://teddysun.com/484.html\n\n## unixbench.sh\n\n- Description: Auto install unixbench and test script\n- Intro: https://teddysun.com/245.html\n\n## l2tp.sh(Deprecated, DO NOT USE)\n\n## pptp.sh(Deprecated, DO NOT USE)\n\nCopyright (C) 2013-2021 Teddysun <i@teddysun.com>\n"
        },
        {
          "name": "backup.sh",
          "type": "blob",
          "size": 11.896484375,
          "content": "#!/usr/bin/env bash\n# Copyright (C) 2013 - 2022 Teddysun <i@teddysun.com>\n# \n# This file is part of the LAMP script.\n#\n# LAMP is a powerful bash script for the installation of \n# Apache + PHP + MySQL/MariaDB and so on.\n# You can install Apache + PHP + MySQL/MariaDB in an very easy way.\n# Just need to input numbers to choose what you want to install before installation.\n# And all things will be done in a few minutes.\n#\n# Description:      Auto backup shell script\n# Description URL:  https://teddysun.com/469.html\n#\n# Website:  https://lamp.sh\n# Github:   https://github.com/teddysun/lamp\n#\n# You must to modify the config before run it!!!\n# Backup MySQL/MariaDB datebases, files and directories\n# Backup file is encrypted with AES256-cbc with SHA1 message-digest (option)\n# Auto transfer backup file to Google Drive (need install rclone command) (option)\n# Auto transfer backup file to FTP server (option)\n# Auto delete Google Drive's or FTP server's remote file (option)\n\n[[ $EUID -ne 0 ]] && echo \"Error: This script must be run as root!\" && exit 1\n\n########## START OF CONFIG ##########\n\n# Encrypt flag (true: encrypt, false: not encrypt)\nENCRYPTFLG=true\n\n# WARNING: KEEP THE PASSWORD SAFE!!!\n# The password used to encrypt the backup\n# To decrypt backups made by this script, run the following command:\n# openssl enc -aes256 -in [encrypted backup] -out decrypted_backup.tgz -pass pass:[backup password] -d -md sha1\nBACKUPPASS=\"mypassword\"\n\n# Directory to store backups\nLOCALDIR=\"/opt/backups/\"\n\n# Temporary directory used during backup creation\nTEMPDIR=\"/opt/backups/temp/\"\n\n# File to log the outcome of backups\nLOGFILE=\"/opt/backups/backup.log\"\n\n# OPTIONAL:\n# If you want to backup the MySQL database, enter the MySQL root password below, otherwise leave it blank\nMYSQL_ROOT_PASSWORD=\"\"\n\n# Below is a list of MySQL database name that will be backed up\n# If you want backup ALL databases, leave it blank.\nMYSQL_DATABASE_NAME[0]=\"\"\n\n# Below is a list of files and directories that will be backed up in the tar backup\n# For example:\n# File: /data/www/default/test.tgz\n# Directory: /data/www/default/test\nBACKUP[0]=\"\"\n\n# Number of days to store daily local backups (default 7 days)\nLOCALAGEDAILIES=\"7\"\n\n# Delete remote file from Googole Drive or FTP server flag (true: delete, false: not delete)\nDELETE_REMOTE_FILE_FLG=false\n\n# Rclone remote name\nRCLONE_NAME=\"\"\n\n# Rclone remote folder name (default \"\")\nRCLONE_FOLDER=\"\"\n\n# Upload local file to FTP server flag (true: upload, false: not upload)\nFTP_FLG=false\n\n# Upload local file to Google Drive flag (true: upload, false: not upload)\nRCLONE_FLG=false\n\n# FTP server\n# OPTIONAL: If you want to upload to FTP server, enter the Hostname or IP address below\nFTP_HOST=\"\"\n\n# FTP username\n# OPTIONAL: If you want to upload to FTP server, enter the FTP username below\nFTP_USER=\"\"\n\n# FTP password\n# OPTIONAL: If you want to upload to FTP server, enter the username's password below\nFTP_PASS=\"\"\n\n# FTP server remote folder\n# OPTIONAL: If you want to upload to FTP server, enter the FTP remote folder below\n# For example: public_html\nFTP_DIR=\"\"\n\n########## END OF CONFIG ##########\n\n# Date & Time\nDAY=$(date +%d)\nMONTH=$(date +%m)\nYEAR=$(date +%C%y)\nBACKUPDATE=$(date +%Y%m%d%H%M%S)\n# Backup file name\nTARFILE=\"${LOCALDIR}\"\"$(hostname)\"_\"${BACKUPDATE}\".tgz\n# Encrypted backup file name\nENC_TARFILE=\"${TARFILE}.enc\"\n# Backup MySQL dump file name\nSQLFILE=\"${TEMPDIR}mysql_${BACKUPDATE}.sql\"\n\nlog() {\n    echo \"$(date \"+%Y-%m-%d %H:%M:%S\")\" \"$1\"\n    echo -e \"$(date \"+%Y-%m-%d %H:%M:%S\")\" \"$1\" >> ${LOGFILE}\n}\n\n# Check for list of mandatory binaries\ncheck_commands() {\n    # This section checks for all of the binaries used in the backup\n    # Do not check mysql command if you do not want to backup the MySQL database\n    if [ -z \"${MYSQL_ROOT_PASSWORD}\" ]; then\n        BINARIES=( cat cd du date dirname echo openssl pwd rm tar )\n    else\n        BINARIES=( cat cd du date dirname echo openssl mysql mysqldump pwd rm tar )\n    fi\n\n    # Iterate over the list of binaries, and if one isn't found, abort\n    for BINARY in \"${BINARIES[@]}\"; do\n        if [ ! \"$(command -v \"$BINARY\")\" ]; then\n            log \"$BINARY is not installed. Install it and try again\"\n            exit 1\n        fi\n    done\n\n    # check rclone command\n    RCLONE_COMMAND=false\n    if [ \"$(command -v \"rclone\")\" ]; then\n        RCLONE_COMMAND=true\n    fi\n\n    # check ftp command\n    if ${FTP_FLG}; then\n        if [ ! \"$(command -v \"ftp\")\" ]; then\n            log \"ftp is not installed. Install it and try again\"\n            exit 1\n        fi\n    fi\n}\n\ncalculate_size() {\n    local file_name=$1\n    local file_size=$(du -h $file_name 2>/dev/null | awk '{print $1}')\n    if [ \"x${file_size}\" = \"x\" ]; then\n        echo \"unknown\"\n    else\n        echo \"${file_size}\"\n    fi\n}\n\n# Backup MySQL databases\nmysql_backup() {\n    if [ -z \"${MYSQL_ROOT_PASSWORD}\" ]; then\n        log \"MySQL root password not set, MySQL backup skipped\"\n    else\n        log \"MySQL dump start\"\n        mysql -u root -p\"${MYSQL_ROOT_PASSWORD}\" 2>/dev/null <<EOF\nexit\nEOF\n        if [ $? -ne 0 ]; then\n            log \"MySQL root password is incorrect. Please check it and try again\"\n            exit 1\n        fi\n        if [[ \"${MYSQL_DATABASE_NAME[@]}\" == \"\" ]]; then\n            mysqldump -u root -p\"${MYSQL_ROOT_PASSWORD}\" --all-databases > \"${SQLFILE}\" 2>/dev/null\n            if [ $? -ne 0 ]; then\n                log \"MySQL all databases backup failed\"\n                exit 1\n            fi\n            log \"MySQL all databases dump file name: ${SQLFILE}\"\n            #Add MySQL backup dump file to BACKUP list\n            BACKUP=(${BACKUP[@]} ${SQLFILE})\n        else\n            for db in ${MYSQL_DATABASE_NAME[@]}; do\n                unset DBFILE\n                DBFILE=\"${TEMPDIR}${db}_${BACKUPDATE}.sql\"\n                mysqldump -u root -p\"${MYSQL_ROOT_PASSWORD}\" ${db} > \"${DBFILE}\" 2>/dev/null\n                if [ $? -ne 0 ]; then\n                    log \"MySQL database name [${db}] backup failed, please check database name is correct and try again\"\n                    exit 1\n                fi\n                log \"MySQL database name [${db}] dump file name: ${DBFILE}\"\n                #Add MySQL backup dump file to BACKUP list\n                BACKUP=(${BACKUP[@]} ${DBFILE})\n            done\n        fi\n        log \"MySQL dump completed\"\n    fi\n}\n\nstart_backup() {\n    [ \"${#BACKUP[@]}\" -eq 0 ] && echo \"Error: You must to modify the [$(basename $0)] config before run it!\" && exit 1\n\n    log \"Tar backup file start\"\n    tar -zcPf ${TARFILE} ${BACKUP[@]}\n    if [ $? -gt 1 ]; then\n        log \"Tar backup file failed\"\n        exit 1\n    fi\n    log \"Tar backup file completed\"\n\n    # Encrypt tar file\n    if ${ENCRYPTFLG}; then\n        log \"Encrypt backup file start\"\n        openssl enc -aes256 -in \"${TARFILE}\" -out \"${ENC_TARFILE}\" -pass pass:\"${BACKUPPASS}\" -md sha1\n        log \"Encrypt backup file completed\"\n\n        # Delete unencrypted tar\n        log \"Delete unencrypted tar file: ${TARFILE}\"\n        rm -f ${TARFILE}\n    fi\n\n    # Delete MySQL temporary dump file\n    for sql in $(ls ${TEMPDIR}*.sql 2> /dev/null); do\n        log \"Delete MySQL temporary dump file: ${sql}\"\n        rm -f ${sql}\n    done\n\n    if ${ENCRYPTFLG}; then\n        OUT_FILE=\"${ENC_TARFILE}\"\n    else\n        OUT_FILE=\"${TARFILE}\"\n    fi\n    log \"File name: ${OUT_FILE}, File size: $(calculate_size ${OUT_FILE})\"\n}\n\n# Transfer backup file to Google Drive\n# If you want to install rclone command, please visit website:\n# https://rclone.org/downloads/\nrclone_upload() {\n    if ${RCLONE_FLG} && ${RCLONE_COMMAND}; then\n        [ -z \"${RCLONE_NAME}\" ] && log \"Error: RCLONE_NAME can not be empty!\" && return 1\n        if [ -n \"${RCLONE_FOLDER}\" ]; then\n            rclone ls ${RCLONE_NAME}:${RCLONE_FOLDER} 2>&1 > /dev/null\n            if [ $? -ne 0 ]; then\n                log \"Create the path ${RCLONE_NAME}:${RCLONE_FOLDER}\"\n                rclone mkdir ${RCLONE_NAME}:${RCLONE_FOLDER}\n            fi\n        fi\n        log \"Tranferring backup file: ${OUT_FILE} to Google Drive\"\n        rclone copy ${OUT_FILE} ${RCLONE_NAME}:${RCLONE_FOLDER} >> ${LOGFILE}\n        if [ $? -ne 0 ]; then\n            log \"Error: Tranferring backup file: ${OUT_FILE} to Google Drive failed\"\n            return 1\n        fi\n        log \"Tranferring backup file: ${OUT_FILE} to Google Drive completed\"\n    fi\n}\n\n# Tranferring backup file to FTP server\nftp_upload() {\n    if ${FTP_FLG}; then\n        [ -z \"${FTP_HOST}\" ] && log \"Error: FTP_HOST can not be empty!\" && return 1\n        [ -z \"${FTP_USER}\" ] && log \"Error: FTP_USER can not be empty!\" && return 1\n        [ -z \"${FTP_PASS}\" ] && log \"Error: FTP_PASS can not be empty!\" && return 1\n        [ -z \"${FTP_DIR}\" ] && log \"Error: FTP_DIR can not be empty!\" && return 1\n        local FTP_OUT_FILE=$(basename ${OUT_FILE})\n        log \"Tranferring backup file: ${FTP_OUT_FILE} to FTP server\"\n        ftp -in ${FTP_HOST} 2>&1 >> ${LOGFILE} <<EOF\nuser $FTP_USER $FTP_PASS\nbinary\nlcd $LOCALDIR\ncd $FTP_DIR\nput $FTP_OUT_FILE\nquit\nEOF\n        if [ $? -ne 0 ]; then\n            log \"Error: Tranferring backup file: ${FTP_OUT_FILE} to FTP server failed\"\n            return 1\n        fi\n        log \"Tranferring backup file: ${FTP_OUT_FILE} to FTP server completed\"\n    fi\n}\n\n# Get file date\nget_file_date() {\n    #Approximate a 30-day month and 365-day year\n    DAYS=$(( $((10#${YEAR}*365)) + $((10#${MONTH}*30)) + $((10#${DAY})) ))\n    unset FILEYEAR FILEMONTH FILEDAY FILEDAYS FILEAGE\n    FILEYEAR=$(echo \"$1\" | cut -d_ -f2 | cut -c 1-4)\n    FILEMONTH=$(echo \"$1\" | cut -d_ -f2 | cut -c 5-6)\n    FILEDAY=$(echo \"$1\" | cut -d_ -f2 | cut -c 7-8)\n    if [[ \"${FILEYEAR}\" && \"${FILEMONTH}\" && \"${FILEDAY}\" ]]; then\n        #Approximate a 30-day month and 365-day year\n        FILEDAYS=$(( $((10#${FILEYEAR}*365)) + $((10#${FILEMONTH}*30)) + $((10#${FILEDAY})) ))\n        FILEAGE=$(( 10#${DAYS} - 10#${FILEDAYS} ))\n        return 0\n    fi\n    return 1\n}\n\n# Delete Google Drive's old backup file\ndelete_gdrive_file() {\n    local FILENAME=$1\n    if ${DELETE_REMOTE_FILE_FLG} && ${RCLONE_COMMAND}; then\n        rclone ls ${RCLONE_NAME}:${RCLONE_FOLDER}/${FILENAME} 2>&1 > /dev/null\n        if [ $? -eq 0 ]; then\n            rclone delete ${RCLONE_NAME}:${RCLONE_FOLDER}/${FILENAME} >> ${LOGFILE}\n            if [ $? -eq 0 ]; then\n                log \"Google Drive's old backup file: ${FILENAME} has been deleted\"\n            else\n                log \"Failed to delete Google Drive's old backup file: ${FILENAME}\"\n            fi\n        else\n            log \"Google Drive's old backup file: ${FILENAME} is not exist\"\n        fi\n    fi\n}\n\n# Delete FTP server's old backup file\ndelete_ftp_file() {\n    local FILENAME=$1\n    if ${DELETE_REMOTE_FILE_FLG} && ${FTP_FLG}; then\n        ftp -in ${FTP_HOST} 2>&1 >> ${LOGFILE} <<EOF\nuser $FTP_USER $FTP_PASS\ncd $FTP_DIR\ndel $FILENAME\nquit\nEOF\n        if [ $? -eq 0 ]; then\n            log \"FTP server's old backup file: ${FILENAME} has been deleted\"\n        else\n            log \"Failed to delete FTP server's old backup file: ${FILENAME}\"\n        fi\n    fi\n}\n\n# Clean up old file\nclean_up_files() {\n    cd ${LOCALDIR} || exit\n    if ${ENCRYPTFLG}; then\n        LS=($(ls *.enc 2> /dev/null))\n    else\n        LS=($(ls *.tgz 2> /dev/null))\n    fi\n    for f in ${LS[@]}; do\n        get_file_date ${f}\n        if [ $? -eq 0 ]; then\n            if [[ ${FILEAGE} -gt ${LOCALAGEDAILIES} ]]; then\n                rm -f ${f}\n                log \"Old backup file name: ${f} has been deleted\"\n                delete_gdrive_file ${f}\n                delete_ftp_file ${f}\n            fi\n        fi\n    done\n}\n\n# Main progress\nSTARTTIME=$(date +%s)\n\n# Check if the backup folders exist and are writeable\n[ ! -d \"${LOCALDIR}\" ] && mkdir -p ${LOCALDIR}\n[ ! -d \"${TEMPDIR}\" ] && mkdir -p ${TEMPDIR}\n\nlog \"Backup progress start\"\ncheck_commands\nmysql_backup\nstart_backup\nlog \"Backup progress complete\"\n\nlog \"Upload progress start\"\nrclone_upload\nftp_upload\nlog \"Upload progress complete\"\n\nlog \"Cleaning up\"\nclean_up_files\nENDTIME=$(date +%s)\nDURATION=$((ENDTIME - STARTTIME))\nlog \"All done\"\nlog \"Backup and transfer completed in ${DURATION} seconds\"\n"
        },
        {
          "name": "bbr.sh",
          "type": "blob",
          "size": 12.39453125,
          "content": "#!/usr/bin/env bash\n#\n# Auto install latest kernel for TCP BBR\n#\n# System Required:  CentOS 6+, Debian8+, Ubuntu16+\n#\n# Copyright (C) 2016-2021 Teddysun <i@teddysun.com>\n#\n# URL: https://teddysun.com/489.html\n#\n\ncur_dir=\"$(cd -P -- \"$(dirname -- \"$0\")\" && pwd -P)\"\n\n_red() {\n    printf '\\033[1;31;31m%b\\033[0m' \"$1\"\n}\n\n_green() {\n    printf '\\033[1;31;32m%b\\033[0m' \"$1\"\n}\n\n_yellow() {\n    printf '\\033[1;31;33m%b\\033[0m' \"$1\"\n}\n\n_info() {\n    _green \"[Info] \"\n    printf -- \"%s\" \"$1\"\n    printf \"\\n\"\n}\n\n_warn() {\n    _yellow \"[Warning] \"\n    printf -- \"%s\" \"$1\"\n    printf \"\\n\"\n}\n\n_error() {\n    _red \"[Error] \"\n    printf -- \"%s\" \"$1\"\n    printf \"\\n\"\n    exit 1\n}\n\n_exists() {\n    local cmd=\"$1\"\n    if eval type type > /dev/null 2>&1; then\n        eval type \"$cmd\" > /dev/null 2>&1\n    elif command > /dev/null 2>&1; then\n        command -v \"$cmd\" > /dev/null 2>&1\n    else\n        which \"$cmd\" > /dev/null 2>&1\n    fi\n    local rt=$?\n    return ${rt}\n}\n\n_os() {\n    local os=\"\"\n    [ -f \"/etc/debian_version\" ] && source /etc/os-release && os=\"${ID}\" && printf -- \"%s\" \"${os}\" && return\n    [ -f \"/etc/redhat-release\" ] && os=\"centos\" && printf -- \"%s\" \"${os}\" && return\n}\n\n_os_full() {\n    [ -f /etc/redhat-release ] && awk '{print ($1,$3~/^[0-9]/?$3:$4)}' /etc/redhat-release && return\n    [ -f /etc/os-release ] && awk -F'[= \"]' '/PRETTY_NAME/{print $3,$4,$5}' /etc/os-release && return\n    [ -f /etc/lsb-release ] && awk -F'[=\"]+' '/DESCRIPTION/{print $2}' /etc/lsb-release && return\n}\n\n_os_ver() {\n    local main_ver=\"$( echo $(_os_full) | grep -oE  \"[0-9.]+\")\"\n    printf -- \"%s\" \"${main_ver%%.*}\"\n}\n\n_error_detect() {\n    local cmd=\"$1\"\n    _info \"${cmd}\"\n    eval ${cmd}\n    if [ $? -ne 0 ]; then\n        _error \"Execution command (${cmd}) failed, please check it and try again.\"\n    fi\n}\n\n_is_digit(){\n    local input=${1}\n    if [[ \"$input\" =~ ^[0-9]+$ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n_is_64bit(){\n    if [ $(getconf WORD_BIT) = '32' ] && [ $(getconf LONG_BIT) = '64' ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n_version_ge(){\n    test \"$(echo \"$@\" | tr \" \" \"\\n\" | sort -rV | head -n 1)\" == \"$1\"\n}\n\nget_valid_valname(){\n    local val=${1}\n    local new_val=$(eval echo $val | sed 's/[-.]/_/g')\n    echo ${new_val}\n}\n\nget_hint(){\n    local val=${1}\n    local new_val=$(get_valid_valname $val)\n    eval echo \"\\$hint_${new_val}\"\n}\n\n#Display Memu\ndisplay_menu(){\n    local soft=${1}\n    local default=${2}\n    eval local arr=(\\${${soft}_arr[@]})\n    local default_prompt\n    if [[ \"$default\" != \"\" ]]; then\n        if [[ \"$default\" == \"last\" ]]; then\n            default=${#arr[@]}\n        fi\n        default_prompt=\"(default ${arr[$default-1]})\"\n    fi\n    local pick\n    local hint\n    local vname\n    local prompt=\"which ${soft} you'd select ${default_prompt}: \"\n\n    while :\n    do\n        echo -e \"\\n------------ ${soft} setting ------------\\n\"\n        for ((i=1;i<=${#arr[@]};i++ )); do\n            vname=\"$(get_valid_valname ${arr[$i-1]})\"\n            hint=\"$(get_hint $vname)\"\n            [[ \"$hint\" == \"\" ]] && hint=\"${arr[$i-1]}\"\n            echo -e \"${green}${i}${plain}) $hint\"\n        done\n        echo\n        read -p \"${prompt}\" pick\n        if [[ \"$pick\" == \"\" && \"$default\" != \"\" ]]; then\n            pick=${default}\n            break\n        fi\n\n        if ! _is_digit \"$pick\"; then\n            prompt=\"Input error, please input a number\"\n            continue\n        fi\n\n        if [[ \"$pick\" -lt 1 || \"$pick\" -gt ${#arr[@]} ]]; then\n            prompt=\"Input error, please input a number between 1 and ${#arr[@]}: \"\n            continue\n        fi\n\n        break\n    done\n\n    eval ${soft}=${arr[$pick-1]}\n    vname=\"$(get_valid_valname ${arr[$pick-1]})\"\n    hint=\"$(get_hint $vname)\"\n    [[ \"$hint\" == \"\" ]] && hint=\"${arr[$pick-1]}\"\n    echo -e \"\\nyour selection: $hint\\n\"\n}\n\nget_latest_version() {\n    latest_version=($(wget -qO- https://kernel.ubuntu.com/~kernel-ppa/mainline/ | awk -F'\\\"v' '/v[4-9]./{print $2}' | cut -d/ -f1 | grep -v - | sort -V))\n    [ ${#latest_version[@]} -eq 0 ] && _error \"Get latest kernel version failed.\"\n    kernel_arr=()\n    for i in ${latest_version[@]}; do\n        if _version_ge $i 5.15; then\n            kernel_arr+=($i);\n        fi\n    done\n    display_menu kernel last\n    if _is_64bit; then\n        deb_name=$(wget -qO- https://kernel.ubuntu.com/~kernel-ppa/mainline/v${kernel}/ | grep \"linux-image\" | grep \"generic\" | awk -F'\\\">' '/amd64.deb/{print $2}' | cut -d'<' -f1 | head -1)\n        deb_kernel_url=\"https://kernel.ubuntu.com/~kernel-ppa/mainline/v${kernel}/${deb_name}\"\n        deb_kernel_name=\"linux-image-${kernel}-amd64.deb\"\n        modules_deb_name=$(wget -qO- https://kernel.ubuntu.com/~kernel-ppa/mainline/v${kernel}/ | grep \"linux-modules\" | grep \"generic\" | awk -F'\\\">' '/amd64.deb/{print $2}' | cut -d'<' -f1 | head -1)\n        deb_kernel_modules_url=\"https://kernel.ubuntu.com/~kernel-ppa/mainline/v${kernel}/${modules_deb_name}\"\n        deb_kernel_modules_name=\"linux-modules-${kernel}-amd64.deb\"\n    else\n        deb_name=$(wget -qO- https://kernel.ubuntu.com/~kernel-ppa/mainline/v${kernel}/ | grep \"linux-image\" | grep \"generic\" | awk -F'\\\">' '/i386.deb/{print $2}' | cut -d'<' -f1 | head -1)\n        deb_kernel_url=\"https://kernel.ubuntu.com/~kernel-ppa/mainline/v${kernel}/${deb_name}\"\n        deb_kernel_name=\"linux-image-${kernel}-i386.deb\"\n        modules_deb_name=$(wget -qO- https://kernel.ubuntu.com/~kernel-ppa/mainline/v${kernel}/ | grep \"linux-modules\" | grep \"generic\" | awk -F'\\\">' '/i386.deb/{print $2}' | cut -d'<' -f1 | head -1)\n        deb_kernel_modules_url=\"https://kernel.ubuntu.com/~kernel-ppa/mainline/v${kernel}/${modules_deb_name}\"\n        deb_kernel_modules_name=\"linux-modules-${kernel}-i386.deb\"\n    fi\n    [ -z \"${deb_name}\" ] && _error \"Getting Linux kernel binary package name failed, maybe kernel build failed. Please choose other one and try again.\"\n}\n\nget_char() {\n    SAVEDSTTY=`stty -g`\n    stty -echo\n    stty cbreak\n    dd if=/dev/tty bs=1 count=1 2> /dev/null\n    stty -raw\n    stty echo\n    stty $SAVEDSTTY\n}\n\ncheck_bbr_status() {\n    local param=$(sysctl net.ipv4.tcp_congestion_control | awk '{print $3}')\n    if [[ x\"${param}\" == x\"bbr\" ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncheck_kernel_version() {\n    local kernel_version=$(uname -r | cut -d- -f1)\n    if _version_ge ${kernel_version} 4.9; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n# Check OS version\ncheck_os() {\n    if _exists \"virt-what\"; then\n        virt=\"$(virt-what)\"\n    elif _exists \"systemd-detect-virt\"; then\n        virt=\"$(systemd-detect-virt)\"\n    fi\n    if [ -n \"${virt}\" -a \"${virt}\" = \"lxc\" ]; then\n        _error \"Virtualization method is LXC, which is not supported.\"\n    fi\n    if [ -n \"${virt}\" -a \"${virt}\" = \"openvz\" ] || [ -d \"/proc/vz\" ]; then\n        _error \"Virtualization method is OpenVZ, which is not supported.\"\n    fi\n    [ -z \"$(_os)\" ] && _error \"Not supported OS\"\n    case \"$(_os)\" in\n        ubuntu)\n            [ -n \"$(_os_ver)\" -a \"$(_os_ver)\" -lt 16 ] && _error \"Not supported OS, please change to Ubuntu 16+ and try again.\"\n            ;;\n        debian)\n            [ -n \"$(_os_ver)\" -a \"$(_os_ver)\" -lt 8 ] &&  _error \"Not supported OS, please change to Debian 8+ and try again.\"\n            ;;\n        centos)\n            [ -n \"$(_os_ver)\" -a \"$(_os_ver)\" -lt 6 ] &&  _error \"Not supported OS, please change to CentOS 6+ and try again.\"\n            ;;\n        *)\n            _error \"Not supported OS\"\n            ;;\n    esac\n}\n\nsysctl_config() {\n    sed -i '/net.core.default_qdisc/d' /etc/sysctl.conf\n    sed -i '/net.ipv4.tcp_congestion_control/d' /etc/sysctl.conf\n    echo \"net.core.default_qdisc = fq\" >> /etc/sysctl.conf\n    echo \"net.ipv4.tcp_congestion_control = bbr\" >> /etc/sysctl.conf\n    sysctl -p >/dev/null 2>&1\n}\n\ninstall_kernel() {\n    case \"$(_os)\" in\n        centos)\n            if [ -n \"$(_os_ver)\" ]; then\n                if ! _exists \"perl\"; then\n                    _error_detect \"yum install -y perl\"\n                fi\n                if [ \"$(_os_ver)\" -eq 6 ]; then\n                    _error_detect \"rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org\"\n                    rpm_kernel_url=\"https://dl.lamp.sh/files/\"\n                    if _is_64bit; then\n                        rpm_kernel_name=\"kernel-ml-4.18.20-1.el6.elrepo.x86_64.rpm\"\n                        rpm_kernel_devel_name=\"kernel-ml-devel-4.18.20-1.el6.elrepo.x86_64.rpm\"\n                    else\n                        rpm_kernel_name=\"kernel-ml-4.18.20-1.el6.elrepo.i686.rpm\"\n                        rpm_kernel_devel_name=\"kernel-ml-devel-4.18.20-1.el6.elrepo.i686.rpm\"\n                    fi\n                    _error_detect \"wget -c -t3 -T60 -O ${rpm_kernel_name} ${rpm_kernel_url}${rpm_kernel_name}\"\n                    _error_detect \"wget -c -t3 -T60 -O ${rpm_kernel_devel_name} ${rpm_kernel_url}${rpm_kernel_devel_name}\"\n                    [ -s \"${rpm_kernel_name}\" ] && _error_detect \"rpm -ivh ${rpm_kernel_name}\" || _error \"Download ${rpm_kernel_name} failed, please check it.\"\n                    [ -s \"${rpm_kernel_devel_name}\" ] && _error_detect \"rpm -ivh ${rpm_kernel_devel_name}\" || _error \"Download ${rpm_kernel_devel_name} failed, please check it.\"\n                    rm -f ${rpm_kernel_name} ${rpm_kernel_devel_name}\n                    [ ! -f \"/boot/grub/grub.conf\" ] && _error \"/boot/grub/grub.conf not found, please check it.\"\n                    sed -i 's/^default=.*/default=0/g' /boot/grub/grub.conf\n                elif [ \"$(_os_ver)\" -eq 7 ]; then\n                    rpm_kernel_url=\"https://dl.lamp.sh/kernel/el7/\"\n                    if _is_64bit; then\n                        rpm_kernel_name=\"kernel-ml-5.15.60-1.el7.x86_64.rpm\"\n                        rpm_kernel_devel_name=\"kernel-ml-devel-5.15.60-1.el7.x86_64.rpm\"\n                    else\n                        _error \"Not supported architecture, please change to 64-bit architecture.\"\n                    fi\n                    _error_detect \"wget -c -t3 -T60 -O ${rpm_kernel_name} ${rpm_kernel_url}${rpm_kernel_name}\"\n                    _error_detect \"wget -c -t3 -T60 -O ${rpm_kernel_devel_name} ${rpm_kernel_url}${rpm_kernel_devel_name}\"\n                    [ -s \"${rpm_kernel_name}\" ] && _error_detect \"rpm -ivh ${rpm_kernel_name}\" || _error \"Download ${rpm_kernel_name} failed, please check it.\"\n                    [ -s \"${rpm_kernel_devel_name}\" ] && _error_detect \"rpm -ivh ${rpm_kernel_devel_name}\" || _error \"Download ${rpm_kernel_devel_name} failed, please check it.\"\n                    rm -f ${rpm_kernel_name} ${rpm_kernel_devel_name}\n                    /usr/sbin/grub2-set-default 0\n                fi\n            fi\n            ;;\n        ubuntu|debian)\n            _info \"Getting latest kernel version...\"\n            get_latest_version\n            if [ -n \"${modules_deb_name}\" ]; then\n                _error_detect \"wget -c -t3 -T60 -O ${deb_kernel_modules_name} ${deb_kernel_modules_url}\"\n            fi\n            _error_detect \"wget -c -t3 -T60 -O ${deb_kernel_name} ${deb_kernel_url}\"\n            _error_detect \"dpkg -i ${deb_kernel_modules_name} ${deb_kernel_name}\"\n            rm -f ${deb_kernel_modules_name} ${deb_kernel_name}\n            _error_detect \"/usr/sbin/update-grub\"\n            ;;\n        *)\n            ;; # do nothing\n    esac\n}\n\nreboot_os() {\n    echo\n    _info \"The system needs to reboot.\"\n    read -p \"Do you want to restart system? [y/n]\" is_reboot\n    if [[ ${is_reboot} == \"y\" || ${is_reboot} == \"Y\" ]]; then\n        reboot\n    else\n        _info \"Reboot has been canceled...\"\n        exit 0\n    fi\n}\n\ninstall_bbr() {\n    if check_bbr_status; then\n        echo\n        _info \"TCP BBR has already been enabled. nothing to do...\"\n        exit 0\n    fi\n    if check_kernel_version; then\n        echo\n        _info \"The kernel version is greater than 4.9, directly setting TCP BBR...\"\n        sysctl_config\n        _info \"Setting TCP BBR completed...\"\n        exit 0\n    fi\n    check_os\n    install_kernel\n    sysctl_config\n    reboot_os\n}\n\n[[ $EUID -ne 0 ]] && _error \"This script must be run as root\"\nopsy=$( _os_full )\narch=$( uname -m )\nlbit=$( getconf LONG_BIT )\nkern=$( uname -r )\n\nclear\necho \"---------- System Information ----------\"\necho \" OS      : $opsy\"\necho \" Arch    : $arch ($lbit Bit)\"\necho \" Kernel  : $kern\"\necho \"----------------------------------------\"\necho \" Automatically enable TCP BBR script\"\necho\necho \" URL: https://teddysun.com/489.html\"\necho \"----------------------------------------\"\necho\necho \"Press any key to start...or Press Ctrl+C to cancel\"\nchar=$(get_char)\n\ninstall_bbr 2>&1 | tee ${cur_dir}/install_bbr.log\n"
        },
        {
          "name": "bench.sh",
          "type": "blob",
          "size": 14.77734375,
          "content": "#!/usr/bin/env bash\n#\n# Description: A Bench Script by Teddysun\n#\n# Copyright (C) 2015 - 2024 Teddysun <i@teddysun.com>\n# Thanks: LookBack <admin@dwhd.org>\n# URL: https://teddysun.com/444.html\n# https://github.com/teddysun/across/blob/master/bench.sh\n#\ntrap _exit INT QUIT TERM\n\n_red() {\n    printf '\\033[0;31;31m%b\\033[0m' \"$1\"\n}\n\n_green() {\n    printf '\\033[0;31;32m%b\\033[0m' \"$1\"\n}\n\n_yellow() {\n    printf '\\033[0;31;33m%b\\033[0m' \"$1\"\n}\n\n_blue() {\n    printf '\\033[0;31;36m%b\\033[0m' \"$1\"\n}\n\n_exists() {\n    local cmd=\"$1\"\n    if eval type type >/dev/null 2>&1; then\n        eval type \"$cmd\" >/dev/null 2>&1\n    elif command >/dev/null 2>&1; then\n        command -v \"$cmd\" >/dev/null 2>&1\n    else\n        which \"$cmd\" >/dev/null 2>&1\n    fi\n    local rt=$?\n    return ${rt}\n}\n\n_exit() {\n    _red \"\\nThe script has been terminated. Cleaning up files...\\n\"\n    # clean up\n    rm -fr speedtest.tgz speedtest-cli benchtest_*\n    exit 1\n}\n\nget_opsy() {\n    [ -f /etc/redhat-release ] && awk '{print $0}' /etc/redhat-release && return\n    [ -f /etc/os-release ] && awk -F'[= \"]' '/PRETTY_NAME/{print $3,$4,$5}' /etc/os-release && return\n    [ -f /etc/lsb-release ] && awk -F'[=\"]+' '/DESCRIPTION/{print $2}' /etc/lsb-release && return\n}\n\nnext() {\n    printf \"%-70s\\n\" \"-\" | sed 's/\\s/-/g'\n}\n\nspeed_test() {\n    local nodeName=\"$2\"\n    if [ -z \"$1\" ];then\n        ./speedtest-cli/speedtest --progress=no --accept-license --accept-gdpr >./speedtest-cli/speedtest.log 2>&1\n    else\n        ./speedtest-cli/speedtest --progress=no --server-id=\"$1\" --accept-license --accept-gdpr >./speedtest-cli/speedtest.log 2>&1\n    fi\n    if [ $? -eq 0 ]; then\n        local dl_speed up_speed latency\n        dl_speed=$(awk '/Download/{print $3\" \"$4}' ./speedtest-cli/speedtest.log)\n        up_speed=$(awk '/Upload/{print $3\" \"$4}' ./speedtest-cli/speedtest.log)\n        latency=$(awk '/Latency/{print $3\" \"$4}' ./speedtest-cli/speedtest.log)\n        if [[ -n \"${dl_speed}\" && -n \"${up_speed}\" && -n \"${latency}\" ]]; then\n            printf \"\\033[0;33m%-18s\\033[0;32m%-18s\\033[0;31m%-20s\\033[0;36m%-12s\\033[0m\\n\" \" ${nodeName}\" \"${up_speed}\" \"${dl_speed}\" \"${latency}\"\n        fi\n    fi\n}\n\nspeed() {\n    speed_test '' 'Speedtest.net'\n    speed_test '21541' 'Los Angeles, US'\n    speed_test '43860' 'Dallas, US'\n    speed_test '40879' 'Montreal, CA'\n    speed_test '61933' 'Paris, FR'\n    speed_test '28922' 'Amsterdam, NL'\n    speed_test '25858' 'Beijing, CN'\n    speed_test '24447' 'Shanghai, CN'\n    speed_test '60572' 'Guangzhou, CN'\n    speed_test '32155' 'Hong Kong, CN'\n    speed_test '13623' 'Singapore, SG'\n    speed_test '48463' 'Tokyo, JP'\n}\n\nio_test() {\n    (LANG=C dd if=/dev/zero of=benchtest_$$ bs=512k count=\"$1\" conv=fdatasync && rm -f benchtest_$$) 2>&1 | awk -F '[,，]' '{io=$NF} END { print io}' | sed 's/^[ \\t]*//;s/[ \\t]*$//'\n}\n\ncalc_size() {\n    local raw=$1\n    local total_size=0\n    local num=1\n    local unit=\"KB\"\n    if ! [[ ${raw} =~ ^[0-9]+$ ]]; then\n        echo \"\"\n        return\n    fi\n    if [ \"${raw}\" -ge 1073741824 ]; then\n        num=1073741824\n        unit=\"TB\"\n    elif [ \"${raw}\" -ge 1048576 ]; then\n        num=1048576\n        unit=\"GB\"\n    elif [ \"${raw}\" -ge 1024 ]; then\n        num=1024\n        unit=\"MB\"\n    elif [ \"${raw}\" -eq 0 ]; then\n        echo \"${total_size}\"\n        return\n    fi\n    total_size=$(awk 'BEGIN{printf \"%.1f\", '\"$raw\"' / '$num'}')\n    echo \"${total_size} ${unit}\"\n}\n\n# since calc_size converts kilobyte to MB, GB and TB\n# to_kibyte converts zfs size from bytes to kilobyte\nto_kibyte() {\n    local raw=$1\n    awk 'BEGIN{printf \"%.0f\", '\"$raw\"' / 1024}'\n}\n\ncalc_sum() {\n    local arr=(\"$@\")\n    local s\n    s=0\n    for i in \"${arr[@]}\"; do\n        s=$((s + i))\n    done\n    echo ${s}\n}\n\ncheck_virt() {\n    _exists \"dmesg\" && virtualx=\"$(dmesg 2>/dev/null)\"\n    if _exists \"dmidecode\"; then\n        sys_manu=\"$(dmidecode -s system-manufacturer 2>/dev/null)\"\n        sys_product=\"$(dmidecode -s system-product-name 2>/dev/null)\"\n        sys_ver=\"$(dmidecode -s system-version 2>/dev/null)\"\n    else\n        sys_manu=\"\"\n        sys_product=\"\"\n        sys_ver=\"\"\n    fi\n    if grep -qa docker /proc/1/cgroup; then\n        virt=\"Docker\"\n    elif grep -qa lxc /proc/1/cgroup; then\n        virt=\"LXC\"\n    elif grep -qa container=lxc /proc/1/environ; then\n        virt=\"LXC\"\n    elif [[ -f /proc/user_beancounters ]]; then\n        virt=\"OpenVZ\"\n    elif [[ \"${virtualx}\" == *kvm-clock* ]]; then\n        virt=\"KVM\"\n    elif [[ \"${sys_product}\" == *KVM* ]]; then\n        virt=\"KVM\"\n    elif [[ \"${sys_manu}\" == *QEMU* ]]; then\n        virt=\"KVM\"\n    elif [[ \"${cname}\" == *KVM* ]]; then\n        virt=\"KVM\"\n    elif [[ \"${cname}\" == *QEMU* ]]; then\n        virt=\"KVM\"\n    elif [[ \"${virtualx}\" == *\"VMware Virtual Platform\"* ]]; then\n        virt=\"VMware\"\n    elif [[ \"${sys_product}\" == *\"VMware Virtual Platform\"* ]]; then\n        virt=\"VMware\"\n    elif [[ \"${virtualx}\" == *\"Parallels Software International\"* ]]; then\n        virt=\"Parallels\"\n    elif [[ \"${virtualx}\" == *VirtualBox* ]]; then\n        virt=\"VirtualBox\"\n    elif [[ -e /proc/xen ]]; then\n        if grep -q \"control_d\" \"/proc/xen/capabilities\" 2>/dev/null; then\n            virt=\"Xen-Dom0\"\n        else\n            virt=\"Xen-DomU\"\n        fi\n    elif [ -f \"/sys/hypervisor/type\" ] && grep -q \"xen\" \"/sys/hypervisor/type\"; then\n        virt=\"Xen\"\n    elif [[ \"${sys_manu}\" == *\"Microsoft Corporation\"* ]]; then\n        if [[ \"${sys_product}\" == *\"Virtual Machine\"* ]]; then\n            if [[ \"${sys_ver}\" == *\"7.0\"* || \"${sys_ver}\" == *\"Hyper-V\" ]]; then\n                virt=\"Hyper-V\"\n            else\n                virt=\"Microsoft Virtual Machine\"\n            fi\n        fi\n    else\n        virt=\"Dedicated\"\n    fi\n}\n\nipv4_info() {\n    local org city country region\n    org=\"$(wget -q -T10 -O- ipinfo.io/org)\"\n    city=\"$(wget -q -T10 -O- ipinfo.io/city)\"\n    country=\"$(wget -q -T10 -O- ipinfo.io/country)\"\n    region=\"$(wget -q -T10 -O- ipinfo.io/region)\"\n    if [[ -n \"${org}\" ]]; then\n        echo \" Organization       : $(_blue \"${org}\")\"\n    fi\n    if [[ -n \"${city}\" && -n \"${country}\" ]]; then\n        echo \" Location           : $(_blue \"${city} / ${country}\")\"\n    fi\n    if [[ -n \"${region}\" ]]; then\n        echo \" Region             : $(_yellow \"${region}\")\"\n    fi\n    if [[ -z \"${org}\" ]]; then\n        echo \" Region             : $(_red \"No ISP detected\")\"\n    fi\n}\n\ninstall_speedtest() {\n    if [ ! -e \"./speedtest-cli/speedtest\" ]; then\n        sys_bit=\"\"\n        local sysarch\n        sysarch=\"$(uname -m)\"\n        if [ \"${sysarch}\" = \"unknown\" ] || [ \"${sysarch}\" = \"\" ]; then\n            sysarch=\"$(arch)\"\n        fi\n        if [ \"${sysarch}\" = \"x86_64\" ]; then\n            sys_bit=\"x86_64\"\n        fi\n        if [ \"${sysarch}\" = \"i386\" ] || [ \"${sysarch}\" = \"i686\" ]; then\n            sys_bit=\"i386\"\n        fi\n        if [ \"${sysarch}\" = \"armv8\" ] || [ \"${sysarch}\" = \"armv8l\" ] || [ \"${sysarch}\" = \"aarch64\" ] || [ \"${sysarch}\" = \"arm64\" ]; then\n            sys_bit=\"aarch64\"\n        fi\n        if [ \"${sysarch}\" = \"armv7\" ] || [ \"${sysarch}\" = \"armv7l\" ]; then\n            sys_bit=\"armhf\"\n        fi\n        if [ \"${sysarch}\" = \"armv6\" ]; then\n            sys_bit=\"armel\"\n        fi\n        [ -z \"${sys_bit}\" ] && _red \"Error: Unsupported system architecture (${sysarch}).\\n\" && exit 1\n        url1=\"https://install.speedtest.net/app/cli/ookla-speedtest-1.2.0-linux-${sys_bit}.tgz\"\n        url2=\"https://dl.lamp.sh/files/ookla-speedtest-1.2.0-linux-${sys_bit}.tgz\"\n        if ! wget --no-check-certificate -q -T10 -O speedtest.tgz ${url1}; then\n            if ! wget --no-check-certificate -q -T10 -O speedtest.tgz ${url2}; then\n                _red \"Error: Failed to download speedtest-cli.\\n\" && exit 1\n            fi\n        fi\n        mkdir -p speedtest-cli && tar zxf speedtest.tgz -C ./speedtest-cli && chmod +x ./speedtest-cli/speedtest\n        rm -f speedtest.tgz\n    fi\n    printf \"%-18s%-18s%-20s%-12s\\n\" \" Node Name\" \"Upload Speed\" \"Download Speed\" \"Latency\"\n}\n\nprint_intro() {\n    echo \"-------------------- A Bench.sh Script By Teddysun -------------------\"\n    echo \" Version            : $(_green v2024-11-11)\"\n    echo \" Usage              : $(_red \"wget -qO- bench.sh | bash\")\"\n}\n\n# Get System information\nget_system_info() {\n    cname=$(awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo | sed 's/^[ \\t]*//;s/[ \\t]*$//')\n    cores=$(awk -F: '/^processor/ {core++} END {print core}' /proc/cpuinfo)\n    freq=$(awk -F'[ :]' '/cpu MHz/ {print $4;exit}' /proc/cpuinfo)\n    ccache=$(awk -F: '/cache size/ {cache=$2} END {print cache}' /proc/cpuinfo | sed 's/^[ \\t]*//;s/[ \\t]*$//')\n    cpu_aes=$(grep -i 'aes' /proc/cpuinfo)\n    cpu_virt=$(grep -Ei 'vmx|svm' /proc/cpuinfo)\n    tram=$(\n        LANG=C\n        free | awk '/Mem/ {print $2}'\n    )\n    tram=$(calc_size \"$tram\")\n    uram=$(\n        LANG=C\n        free | awk '/Mem/ {print $3}'\n    )\n    uram=$(calc_size \"$uram\")\n    swap=$(\n        LANG=C\n        free | awk '/Swap/ {print $2}'\n    )\n    swap=$(calc_size \"$swap\")\n    uswap=$(\n        LANG=C\n        free | awk '/Swap/ {print $3}'\n    )\n    uswap=$(calc_size \"$uswap\")\n    up=$(awk '{a=$1/86400;b=($1%86400)/3600;c=($1%3600)/60} {printf(\"%d days, %d hour %d min\\n\",a,b,c)}' /proc/uptime)\n    if _exists \"w\"; then\n        load=$(\n            LANG=C\n            w | head -1 | awk -F'load average:' '{print $2}' | sed 's/^[ \\t]*//;s/[ \\t]*$//'\n        )\n    elif _exists \"uptime\"; then\n        load=$(\n            LANG=C\n            uptime | head -1 | awk -F'load average:' '{print $2}' | sed 's/^[ \\t]*//;s/[ \\t]*$//'\n        )\n    fi\n    opsy=$(get_opsy)\n    arch=$(uname -m)\n    if _exists \"getconf\"; then\n        lbit=$(getconf LONG_BIT)\n    else\n        echo \"${arch}\" | grep -q \"64\" && lbit=\"64\" || lbit=\"32\"\n    fi\n    kern=$(uname -r)\n    in_kernel_no_swap_total_size=$(\n        LANG=C\n        df -t simfs -t ext2 -t ext3 -t ext4 -t btrfs -t xfs -t vfat -t ntfs --total 2>/dev/null | grep total | awk '{ print $2 }'\n    )\n    swap_total_size=$(free -k | grep Swap | awk '{print $2}')\n    zfs_total_size=$(to_kibyte \"$(calc_sum \"$(zpool list -o size -Hp 2> /dev/null)\")\")\n    disk_total_size=$(calc_size $((swap_total_size + in_kernel_no_swap_total_size + zfs_total_size)))\n    in_kernel_no_swap_used_size=$(\n        LANG=C\n        df -t simfs -t ext2 -t ext3 -t ext4 -t btrfs -t xfs -t vfat -t ntfs --total 2>/dev/null | grep total | awk '{ print $3 }'\n    )\n    swap_used_size=$(free -k | grep Swap | awk '{print $3}')\n    zfs_used_size=$(to_kibyte \"$(calc_sum \"$(zpool list -o allocated -Hp 2> /dev/null)\")\")\n    disk_used_size=$(calc_size $((swap_used_size + in_kernel_no_swap_used_size + zfs_used_size)))\n    tcpctrl=$(sysctl net.ipv4.tcp_congestion_control | awk -F ' ' '{print $3}')\n}\n# Print System information\nprint_system_info() {\n    if [ -n \"$cname\" ]; then\n        echo \" CPU Model          : $(_blue \"$cname\")\"\n    else\n        echo \" CPU Model          : $(_blue \"CPU model not detected\")\"\n    fi\n    if [ -n \"$freq\" ]; then\n        echo \" CPU Cores          : $(_blue \"$cores @ $freq MHz\")\"\n    else\n        echo \" CPU Cores          : $(_blue \"$cores\")\"\n    fi\n    if [ -n \"$ccache\" ]; then\n        echo \" CPU Cache          : $(_blue \"$ccache\")\"\n    fi\n    if [ -n \"$cpu_aes\" ]; then\n        echo \" AES-NI             : $(_green \"\\xe2\\x9c\\x93 Enabled\")\"\n    else\n        echo \" AES-NI             : $(_red \"\\xe2\\x9c\\x97 Disabled\")\"\n    fi\n    if [ -n \"$cpu_virt\" ]; then\n        echo \" VM-x/AMD-V         : $(_green \"\\xe2\\x9c\\x93 Enabled\")\"\n    else\n        echo \" VM-x/AMD-V         : $(_red \"\\xe2\\x9c\\x97 Disabled\")\"\n    fi\n    echo \" Total Disk         : $(_yellow \"$disk_total_size\") $(_blue \"($disk_used_size Used)\")\"\n    echo \" Total Mem          : $(_yellow \"$tram\") $(_blue \"($uram Used)\")\"\n    if [ \"$swap\" != \"0\" ]; then\n        echo \" Total Swap         : $(_blue \"$swap ($uswap Used)\")\"\n    fi\n    echo \" System uptime      : $(_blue \"$up\")\"\n    echo \" Load average       : $(_blue \"$load\")\"\n    echo \" OS                 : $(_blue \"$opsy\")\"\n    echo \" Arch               : $(_blue \"$arch ($lbit Bit)\")\"\n    echo \" Kernel             : $(_blue \"$kern\")\"\n    echo \" TCP CC             : $(_yellow \"$tcpctrl\")\"\n    echo \" Virtualization     : $(_blue \"$virt\")\"\n    echo \" IPv4/IPv6          : $online\"\n}\n\nprint_io_test() {\n    freespace=$(df -m . | awk 'NR==2 {print $4}')\n    if [ -z \"${freespace}\" ]; then\n        freespace=$(df -m . | awk 'NR==3 {print $3}')\n    fi\n    if [ \"${freespace}\" -gt 1024 ]; then\n        writemb=2048\n        io1=$(io_test ${writemb})\n        echo \" I/O Speed(1st run) : $(_yellow \"$io1\")\"\n        io2=$(io_test ${writemb})\n        echo \" I/O Speed(2nd run) : $(_yellow \"$io2\")\"\n        io3=$(io_test ${writemb})\n        echo \" I/O Speed(3rd run) : $(_yellow \"$io3\")\"\n        ioraw1=$(echo \"$io1\" | awk 'NR==1 {print $1}')\n        [[ \"$(echo \"$io1\" | awk 'NR==1 {print $2}')\" == \"GB/s\" ]] && ioraw1=$(awk 'BEGIN{print '\"$ioraw1\"' * 1024}')\n        ioraw2=$(echo \"$io2\" | awk 'NR==1 {print $1}')\n        [[ \"$(echo \"$io2\" | awk 'NR==1 {print $2}')\" == \"GB/s\" ]] && ioraw2=$(awk 'BEGIN{print '\"$ioraw2\"' * 1024}')\n        ioraw3=$(echo \"$io3\" | awk 'NR==1 {print $1}')\n        [[ \"$(echo \"$io3\" | awk 'NR==1 {print $2}')\" == \"GB/s\" ]] && ioraw3=$(awk 'BEGIN{print '\"$ioraw3\"' * 1024}')\n        ioall=$(awk 'BEGIN{print '\"$ioraw1\"' + '\"$ioraw2\"' + '\"$ioraw3\"'}')\n        ioavg=$(awk 'BEGIN{printf \"%.1f\", '\"$ioall\"' / 3}')\n        echo \" I/O Speed(average) : $(_yellow \"$ioavg MB/s\")\"\n    else\n        echo \" $(_red \"Not enough space for I/O Speed test!\")\"\n    fi\n}\n\nprint_end_time() {\n    end_time=$(date +%s)\n    time=$((end_time - start_time))\n    if [ ${time} -gt 60 ]; then\n        min=$((time / 60))\n        sec=$((time % 60))\n        echo \" Finished in        : ${min} min ${sec} sec\"\n    else\n        echo \" Finished in        : ${time} sec\"\n    fi\n    date_time=$(date '+%Y-%m-%d %H:%M:%S %Z')\n    echo \" Timestamp          : $date_time\"\n}\n\n! _exists \"wget\" && _red \"Error: wget command not found.\\n\" && exit 1\n! _exists \"free\" && _red \"Error: free command not found.\\n\" && exit 1\n# check for curl/wget\n_exists \"curl\" && local_curl=true\n# test if the host has IPv4/IPv6 connectivity\n[[ -n ${local_curl} ]] && ip_check_cmd=\"curl -s -m 4\" || ip_check_cmd=\"wget -qO- -T 4\"\nipv4_check=$( (ping -4 -c 1 -W 4 ipv4.google.com >/dev/null 2>&1 && echo true) || ${ip_check_cmd} -4 icanhazip.com 2> /dev/null)\nipv6_check=$( (ping -6 -c 1 -W 4 ipv6.google.com >/dev/null 2>&1 && echo true) || ${ip_check_cmd} -6 icanhazip.com 2> /dev/null)\nif [[ -z \"$ipv4_check\" && -z \"$ipv6_check\" ]]; then\n    _yellow \"Warning: Both IPv4 and IPv6 connectivity were not detected.\\n\"\nfi\n[[ -z \"$ipv4_check\" ]] && online=\"$(_red \"\\xe2\\x9c\\x97 Offline\")\" || online=\"$(_green \"\\xe2\\x9c\\x93 Online\")\"\n[[ -z \"$ipv6_check\" ]] && online+=\" / $(_red \"\\xe2\\x9c\\x97 Offline\")\" || online+=\" / $(_green \"\\xe2\\x9c\\x93 Online\")\"\nstart_time=$(date +%s)\nget_system_info\ncheck_virt\nclear\nprint_intro\nnext\nprint_system_info\nipv4_info\nnext\nprint_io_test\nnext\ninstall_speedtest && speed && rm -fr speedtest-cli\nnext\nprint_end_time\nnext\n"
        },
        {
          "name": "deb",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "ftp_upload.sh",
          "type": "blob",
          "size": 2.3330078125,
          "content": "#!/usr/bin/env bash\n#\n# Upload file(s) to FTP server\n#\n# Copyright (C) 2016 - 2018 Teddysun <i@teddysun.com>\n#\n# Argument example:\n# 1) ./ftp_upload.sh filename\n# 2) ./ftp_upload.sh filename1 filename2 filename3 ...\n# 3) ./ftp_upload.sh \"*.extension\"\n# 4) ./ftp_upload.sh \"*.extension1\" \"*.extension2\"\n#\n\n########## START OF CONFIG ##########\n\n# Local directory (current folder)\nLOCALDIR=$( pwd )\n\n# File to log the outcome of backups\nLOGFILE=\"/var/log/ftp_upload.log\"\n\n# FTP server\n# Enter the Hostname or IP address below\nFTP_HOST=\"\"\n\n# FTP username\n# Enter the FTP username below\nFTP_USER=\"\"\n\n# FTP password\n# Enter the username's password below\nFTP_PASS=\"\"\n\n# FTP server remote folder\n# Enter the FTP remote folder below\n# For example: public_html\nFTP_DIR=\"\"\n\n########## END OF CONFIG ##########\n\n\nlog() {\n    echo \"$(date \"+%Y-%m-%d %H:%M:%S\")\" \"$1\"\n    echo -e \"$(date \"+%Y-%m-%d %H:%M:%S\")\" \"$1\" >> ${LOGFILE}\n}\n\n# Check ftp command\ncheck_command() {\n    if [ ! \"$(command -v \"ftp\")\" ]; then\n        log \"ftp command is not installed, please install it and try again\"\n        exit 1\n    fi\n}\n\n# Tranferring backup file to FTP server\nftp_upload() {\n    cd ${LOCALDIR} || exit\n\n    [ -z ${FTP_HOST} ] && log \"Error: FTP_HOST can not be empty!\" && exit 1\n    [ -z ${FTP_USER} ] && log \"Error: FTP_USER can not be empty!\" && exit 1\n    [ -z ${FTP_PASS} ] && log \"Error: FTP_PASS can not be empty!\" && exit 1\n    [ -z ${FTP_DIR} ] && log \"Error: FTP_DIR can not be empty!\" && exit 1\n\n    echo \"$@\" | grep \"*\" > /dev/null 2>&1\n    if [ $? -eq 0 ]; then\n        ls $@ > /dev/null 2>&1\n        [ $? -ne 0 ] && log \"Error: [$@] file(s) not exists!\" && exit 1\n    else\n        for f in $@\n        do\n            [ ! -f ${f} ] && log \"Error: [${f}] not exists!\" && exit 1\n        done\n    fi\n\n    local FTP_OUT_FILE=(\"$@\")\n\n    log \"Tranferring file(s) list below to FTP server:\"\n    for file in ${FTP_OUT_FILE[@]}\n    do\n        log \"$file\"\n    done\n    ftp -in ${FTP_HOST} 2>&1 >> ${LOGFILE} <<EOF\nuser $FTP_USER $FTP_PASS\nbinary\nlcd $LOCALDIR\ncd $FTP_DIR\nmput ${FTP_OUT_FILE[@]}\nquit\nEOF\n    log \"Tranfer to FTP server completed\"\n}\n\n\n# Main progress\nSTARTTIME=$(date +%s)\n\n[ $# -eq 0 ] && log \"Error: argument can not be empty!\" && exit 1\n\ncheck_command\n\nftp_upload \"$@\"\n\n\nENDTIME=$(date +%s)\nDURATION=$((ENDTIME - STARTTIME))\nlog \"All done\"\nlog \"Transfer completed in ${DURATION} seconds\"\n"
        },
        {
          "name": "kms",
          "type": "blob",
          "size": 2.154296875,
          "content": "#!/bin/bash\n# chkconfig: 2345 90 10\n# description: A secure socks5 proxy, designed to protect your Internet traffic.\n\n### BEGIN INIT INFO\n# Provides:          KMS Emulator\n# Required-Start:    $network $syslog\n# Required-Stop:     $network\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: Build yourself KMS Server\n# Description:       Start or stop the KMS Server\n### END INIT INFO\n\n# Author: Teddysun <i@teddysun.com>\n\n# Source function library\n. /etc/rc.d/init.d/functions\n\n# Check that networking is up.\n[ ${NETWORKING} =\"yes\" ] || exit 0\n\nNAME=\"KMS Server\"\nDAEMON=/usr/bin/vlmcsd\nPID_DIR=/var/run\nPID_FILE=$PID_DIR/vlmcsd.pid\nLOG_DIR=/var/log\nLOG_FILE=$LOG_DIR/vlmcsd.log\nRET_VAL=0\n\n[ -x $DAEMON ] || exit 0\n\nif [ ! -d $PID_DIR ]; then\n    mkdir -p $PID_DIR\n    if [ $? -ne 0 ]; then\n        echo \"Creating PID directory $PID_DIR failed\"\n        exit 1\n    fi\nfi\n\nif [ ! -d $LOG_DIR ]; then\n    mkdir -p $LOG_DIR\n    if [ $? -ne 0 ]; then\n        echo \"Creating LOG directory $LOG_DIR failed\"\n        exit 1\n    fi\nfi\n\ncheck_running() {\n    if [ -r $PID_FILE ]; then\n        read PID < $PID_FILE\n        if [ -d \"/proc/$PID\" ]; then\n            return 0\n        else\n            rm -f $PID_FILE\n            return 1\n        fi\n    else\n        return 2\n    fi\n}\n\ndo_status() {\n    check_running\n    case $? in\n        0)\n        echo \"$NAME (pid $PID) is running...\"\n        ;;\n        1|2)\n        echo \"$NAME is stopped\"\n        RET_VAL=1\n        ;;\n    esac\n}\n\ndo_start() {\n    if check_running; then\n        echo \"$NAME (pid $PID) is already running...\"\n        return 0\n    fi\n    $DAEMON -p $PID_FILE -l $LOG_FILE\n    sleep 0.3\n    if check_running; then\n        echo \"Starting $NAME success\"\n    else\n        echo \"Starting $NAME failed\"\n        RET_VAL=1\n    fi\n}\n\ndo_stop() {\n    if check_running; then\n        kill -9 $PID\n        rm -f $PID_FILE\n        echo \"Stopping $NAME success\"\n    else\n        echo \"$NAME is stopped\"\n        RET_VAL=1\n    fi\n}\n\ndo_restart() {\n    do_stop\n    do_start\n}\n\ncase \"$1\" in\n    start|stop|restart|status)\n    do_$1\n    ;;\n    *)\n    echo \"Usage: $0 { start | stop | restart | status }\"\n    RET_VAL=1\n    ;;\nesac\n\nexit $RET_VAL\n"
        },
        {
          "name": "kms-debian",
          "type": "blob",
          "size": 1.96484375,
          "content": "#!/bin/bash\n\n### BEGIN INIT INFO\n# Provides:          KMS Emulator\n# Required-Start:    $network $local_fs $remote_fs\n# Required-Stop:     $network $local_fs $remote_fs\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: Build yourself KMS Server\n# Description:       Start or stop the KMS Server\n### END INIT INFO\n\n# Author: Teddysun <i@teddysun.com>\n\nNAME=\"KMS Server\"\nDAEMON=/usr/bin/vlmcsd\nPID_DIR=/var/run\nPID_FILE=$PID_DIR/vlmcsd.pid\nLOG_DIR=/var/log\nLOG_FILE=$LOG_DIR/vlmcsd.log\nRET_VAL=0\n\n[ -x $DAEMON ] || exit 0\n\nif [ ! -d $PID_DIR ]; then\n    mkdir -p $PID_DIR\n    if [ $? -ne 0 ]; then\n        echo \"Creating PID directory $PID_DIR failed\"\n        exit 1\n    fi\nfi\n\nif [ ! -d $LOG_DIR ]; then\n    mkdir -p $LOG_DIR\n    if [ $? -ne 0 ]; then\n        echo \"Creating LOG directory $LOG_DIR failed\"\n        exit 1\n    fi\nfi\n\ncheck_running() {\n    if [ -r $PID_FILE ]; then\n        read PID < $PID_FILE\n        if [ -d \"/proc/$PID\" ]; then\n            return 0\n        else\n            rm -f $PID_FILE\n            return 1\n        fi\n    else\n        return 2\n    fi\n}\n\ndo_status() {\n    check_running\n    case $? in\n        0)\n        echo \"$NAME (pid $PID) is running...\"\n        ;;\n        1|2)\n        echo \"$NAME is stopped\"\n        RET_VAL=1\n        ;;\n    esac\n}\n\ndo_start() {\n    if check_running; then\n        echo \"$NAME (pid $PID) is already running...\"\n        return 0\n    fi\n    $DAEMON -p $PID_FILE -l $LOG_FILE\n    sleep 0.3\n    if check_running; then\n        echo \"Starting $NAME success\"\n    else\n        echo \"Starting $NAME failed\"\n        RET_VAL=1\n    fi\n}\n\ndo_stop() {\n    if check_running; then\n        kill -9 $PID\n        rm -f $PID_FILE\n        echo \"Stopping $NAME success\"\n    else\n        echo \"$NAME is stopped\"\n        RET_VAL=1\n    fi\n}\n\ndo_restart() {\n    do_stop\n    do_start\n}\n\ncase \"$1\" in\n    start|stop|restart|status)\n    do_$1\n    ;;\n    *)\n    echo \"Usage: $0 { start | stop | restart | status }\"\n    RET_VAL=1\n    ;;\nesac\n\nexit $RET_VAL\n"
        },
        {
          "name": "kms.sh",
          "type": "blob",
          "size": 6.6328125,
          "content": "#!/usr/bin/env bash\n#\n# Auto install KMS Server\n# System Required:  CentOS 6+, Debian7+, Ubuntu12+\n# Copyright (C) 2017-2018 Teddysun <i@teddysun.com>\n# URL: https://teddysun.com/530.html\n#\n# Thanks: https://github.com/Wind4/vlmcsd\n#\n\nred='\\033[0;31m'\ngreen='\\033[0;32m'\nyellow='\\033[0;33m'\nplain='\\033[0m'\n\ncur_dir=$(pwd)\n\n[[ $EUID -ne 0 ]] && echo -e \"${red}Error:${plain} This script must be run as root!\" && exit 1\n\nif [ -f /etc/redhat-release ]; then\n    release=\"centos\"\nelif grep -Eqi \"debian\" /etc/issue; then\n    release=\"debian\"\nelif grep -Eqi \"ubuntu\" /etc/issue; then\n    release=\"ubuntu\"\nelif grep -Eqi \"centos|red hat|redhat\" /etc/issue; then\n    release=\"centos\"\nelif grep -Eqi \"debian\" /proc/version; then\n    release=\"debian\"\nelif grep -Eqi \"ubuntu\" /proc/version; then\n    release=\"ubuntu\"\nelif grep -Eqi \"centos|red hat|redhat\" /proc/version; then\n    release=\"centos\"\nelse\n    release=\"\"\nfi\n\nboot_start(){\n    if [[ x\"${release}\" == x\"debian\" || x\"${release}\" == x\"ubuntu\" ]]; then\n        update-rc.d -f \"${1}\" defaults\n    elif [[ x\"${release}\" == x\"centos\" ]]; then\n        chkconfig --add \"${1}\"\n        chkconfig \"${1}\" on\n    fi\n}\n\nboot_stop(){\n    if [[ x\"${release}\" == x\"debian\" || x\"${release}\" == x\"ubuntu\" ]]; then\n        update-rc.d -f \"${1}\" remove\n    elif [[ x\"${release}\" == x\"centos\" ]]; then\n        chkconfig \"${1}\" off\n        chkconfig --del \"${1}\"\n    fi\n}\n\n# Get version\ngetversion(){\n    if [[ -s /etc/redhat-release ]]; then\n        grep -oE  \"[0-9.]+\" /etc/redhat-release\n    else\n        grep -oE  \"[0-9.]+\" /etc/issue\n    fi\n}\n\n# CentOS version\ncentosversion(){\n    if [[ x\"${release}\" == x\"centos\" ]]; then\n        local code=$1\n        local version=\"$(getversion)\"\n        local main_ver=${version%%.*}\n        if [ \"$main_ver\" == \"$code\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    else\n        return 1\n    fi\n}\n\nget_opsy() {\n    [ -f /etc/redhat-release ] && awk '{print ($1,$3~/^[0-9]/?$3:$4)}' /etc/redhat-release && return\n    [ -f /etc/os-release ] && awk -F'[= \"]' '/PRETTY_NAME/{print $3,$4,$5}' /etc/os-release && return\n    [ -f /etc/lsb-release ] && awk -F'[=\"]+' '/DESCRIPTION/{print $2}' /etc/lsb-release && return\n}\n\nget_char() {\n    SAVEDSTTY=$(stty -g)\n    stty -echo\n    stty cbreak\n    dd if=/dev/tty bs=1 count=1 2> /dev/null\n    stty -raw\n    stty echo\n    stty \"$SAVEDSTTY\"\n}\n\nset_firewall() {\n    if centosversion 6; then\n        /etc/init.d/iptables status > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            iptables -L -n | grep -i 1688 > /dev/null 2>&1\n            if [ $? -ne 0 ]; then\n                iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 1688 -j ACCEPT\n                /etc/init.d/iptables save\n                /etc/init.d/iptables restart\n            fi\n        else\n            echo -e \"${yellow}Warning:${plain} iptables looks like shutdown or not installed, please enable port 1688 manually set if necessary.\"\n        fi\n    elif centosversion 7; then\n        systemctl status firewalld > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            firewall-cmd --permanent --zone=public --add-port=1688/tcp\n            firewall-cmd --reload\n        else\n            echo -e \"${yellow}Warning:${plain} firewalld looks like shutdown or not installed, please enable port 1688 manually set if necessary.\"\n        fi\n    fi\n}\n\ninstall_main() {\n    [ -f /usr/bin/vlmcsd ] && echo -e \"${yellow}Warning:${plain} KMS Server is already installed. nothing to do...\" && exit 1\n\n    clear\n    opsy=$( get_opsy )\n    arch=$( uname -m )\n    lbit=$( getconf LONG_BIT )\n    kern=$( uname -r )\n    echo \"---------- System Information ----------\"\n    echo \" OS      : $opsy\"\n    echo \" Arch    : $arch ($lbit Bit)\"\n    echo \" Kernel  : $kern\"\n    echo \"----------------------------------------\"\n    echo \" Auto install KMS Server\"\n    echo\n    echo \" URL: https://teddysun.com/530.html\"\n    echo \"----------------------------------------\"\n    echo\n    echo \"Press any key to start...or Press Ctrl+C to cancel\"\n    char=$(get_char)\n\n    if [[ x\"${release}\" == x\"centos\" ]]; then\n        yum -y install gcc git make nss curl libcurl\n        if ! wget --no-check-certificate -O /etc/init.d/kms https://raw.githubusercontent.com/teddysun/across/master/kms; then\n            echo -e \"[${red}Error:${plain}] Failed to download KMS Server script.\"\n            exit 1\n        fi\n    elif [[ x\"${release}\" == x\"debian\" || x\"${release}\" == x\"ubuntu\" ]]; then\n        apt-get -y update\n        apt-get install -y gcc git make libnss3 curl libcurl3-nss\n        if ! wget --no-check-certificate -O /etc/init.d/kms https://raw.githubusercontent.com/teddysun/across/master/kms-debian; then\n            echo -e \"[${red}Error:${plain}] Failed to download KMS Server script.\"\n            exit 1\n        fi\n    else\n        echo -e \"${red}Error:${plain} OS is not be supported, please change to CentOS/Debian/Ubuntu and try again.\"\n        exit 1\n    fi\n\n    cd \"${cur_dir}\" || exit\n    git clone https://github.com/Wind4/vlmcsd.git > /dev/null 2>&1\n    [ -d vlmcsd ] && cd vlmcsd || echo -e \"[${red}Error:${plain}] Failed to git clone vlmcsd.\"\n    make\n    if [ $? -ne 0 ]; then\n        echo -e \"${red}Error:${plain} Install KMS Server failed, please check it and try again.\"\n        exit 1\n    fi\n    cp -p bin/vlmcsd /usr/bin/\n    chmod 755 /usr/bin/vlmcsd\n    chmod 755 /etc/init.d/kms\n    boot_start kms\n    /etc/init.d/kms start\n    if [ $? -ne 0 ]; then\n        echo -e \"${red}Error:${plain} KMS server start failed.\"\n    fi\n    if [[ x\"${release}\" == x\"centos\" ]]; then\n        set_firewall\n    fi\n    cd \"${cur_dir}\" || exit\n    rm -rf vlmcsd\n    echo\n    echo \"Install KMS Server success\"\n    echo \"Welcome to visit:https://teddysun.com/530.html\"\n    echo \"Enjoy it!\"\n    echo\n}\n\n\ninstall_kms() {\n    install_main 2>&1 | tee \"${cur_dir}\"/install_kms.log\n}\n\n# Uninstall KMS Server\nuninstall_kms() {\n    printf \"Are you sure uninstall KMS Server? (y/n) \"\n    printf \"\\n\"\n    read -p \"(Default: n):\" answer\n    [ -z \"${answer}\" ] && answer=\"n\"\n    if [ \"${answer}\" == \"y\" ] || [ \"${answer}\" == \"Y\" ]; then\n        /etc/init.d/kms status > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            /etc/init.d/kms stop\n        fi\n        boot_stop kms\n        # delete kms server\n        rm -f /usr/bin/vlmcsd\n        rm -f /etc/init.d/kms\n        rm -f /var/log/vlmcsd.log\n        echo \"KMS Server uninstall success\"\n    else\n        echo\n        echo \"Uninstall cancelled, nothing to do...\"\n        echo\n    fi\n}\n\n# Initialization step\naction=$1\n[ -z \"$1\" ] && action=install\ncase \"$action\" in\n    install|uninstall)\n        ${action}_kms\n        ;;\n    *)\n        echo \"Arguments error! [${action}]\"\n        echo \"Usage: $(basename $0) [install|uninstall]\"\n        ;;\nesac\n"
        },
        {
          "name": "l2tp.sh",
          "type": "blob",
          "size": 24.994140625,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n#=======================================================================#\n#   System Supported:  CentOS 6+ / Debian 7+ / Ubuntu 12+               #\n#   Description: L2TP VPN Auto Installer                                #\n#   Author: Teddysun <i@teddysun.com>                                   #\n#   Intro:  https://teddysun.com/448.html                               #\n#=======================================================================#\ncur_dir=`pwd`\n\nlibreswan_filename=\"libreswan-3.27\"\ndownload_root_url=\"https://dl.lamp.sh/files\"\n\nrootness(){\n    if [[ $EUID -ne 0 ]]; then\n       echo \"Error:This script must be run as root!\" 1>&2\n       exit 1\n    fi\n}\n\ntunavailable(){\n    if [[ ! -e /dev/net/tun ]]; then\n        echo \"Error:TUN/TAP is not available!\" 1>&2\n        exit 1\n    fi\n}\n\ndisable_selinux(){\nif [ -s /etc/selinux/config ] && grep 'SELINUX=enforcing' /etc/selinux/config; then\n    sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config\n    setenforce 0\nfi\n}\n\nget_opsy(){\n    [ -f /etc/redhat-release ] && awk '{print ($1,$3~/^[0-9]/?$3:$4)}' /etc/redhat-release && return\n    [ -f /etc/os-release ] && awk -F'[= \"]' '/PRETTY_NAME/{print $3,$4,$5}' /etc/os-release && return\n    [ -f /etc/lsb-release ] && awk -F'[=\"]+' '/DESCRIPTION/{print $2}' /etc/lsb-release && return\n}\n\nget_os_info(){\n    IP=$( ip addr | egrep -o '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | egrep -v \"^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.\" | head -n 1 )\n    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )\n\n    local cname=$( awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo | sed 's/^[ \\t]*//;s/[ \\t]*$//' )\n    local cores=$( awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo )\n    local freq=$( awk -F: '/cpu MHz/ {freq=$2} END {print freq}' /proc/cpuinfo | sed 's/^[ \\t]*//;s/[ \\t]*$//' )\n    local tram=$( free -m | awk '/Mem/ {print $2}' )\n    local swap=$( free -m | awk '/Swap/ {print $2}' )\n    local up=$( awk '{a=$1/86400;b=($1%86400)/3600;c=($1%3600)/60;d=$1%60} {printf(\"%ddays, %d:%d:%d\\n\",a,b,c,d)}' /proc/uptime )\n    local load=$( w | head -1 | awk -F'load average:' '{print $2}' | sed 's/^[ \\t]*//;s/[ \\t]*$//' )\n    local opsy=$( get_opsy )\n    local arch=$( uname -m )\n    local lbit=$( getconf LONG_BIT )\n    local host=$( hostname )\n    local kern=$( uname -r )\n\n    echo \"########## System Information ##########\"\n    echo \n    echo \"CPU model            : ${cname}\"\n    echo \"Number of cores      : ${cores}\"\n    echo \"CPU frequency        : ${freq} MHz\"\n    echo \"Total amount of ram  : ${tram} MB\"\n    echo \"Total amount of swap : ${swap} MB\"\n    echo \"System uptime        : ${up}\"\n    echo \"Load average         : ${load}\"\n    echo \"OS                   : ${opsy}\"\n    echo \"Arch                 : ${arch} (${lbit} Bit)\"\n    echo \"Kernel               : ${kern}\"\n    echo \"Hostname             : ${host}\"\n    echo \"IPv4 address         : ${IP}\"\n    echo \n    echo \"########################################\"\n}\n\ncheck_sys(){\n    local checkType=$1\n    local value=$2\n\n    local release=''\n    local systemPackage=''\n\n    if [[ -f /etc/redhat-release ]]; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    elif cat /etc/issue | grep -Eqi \"debian\"; then\n        release=\"debian\"\n        systemPackage=\"apt\"\n    elif cat /etc/issue | grep -Eqi \"ubuntu\"; then\n        release=\"ubuntu\"\n        systemPackage=\"apt\"\n    elif cat /etc/issue | grep -Eqi \"centos|red hat|redhat\"; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    elif cat /proc/version | grep -Eqi \"debian\"; then\n        release=\"debian\"\n        systemPackage=\"apt\"\n    elif cat /proc/version | grep -Eqi \"ubuntu\"; then\n        release=\"ubuntu\"\n        systemPackage=\"apt\"\n    elif cat /proc/version | grep -Eqi \"centos|red hat|redhat\"; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    fi\n\n    if [[ ${checkType} == \"sysRelease\" ]]; then\n        if [ \"$value\" == \"$release\" ];then\n            return 0\n        else\n            return 1\n        fi\n    elif [[ ${checkType} == \"packageManager\" ]]; then\n        if [ \"$value\" == \"$systemPackage\" ];then\n            return 0\n        else\n            return 1\n        fi\n    fi\n}\n\nrand(){\n    index=0\n    str=\"\"\n    for i in {a..z}; do arr[index]=${i}; index=`expr ${index} + 1`; done\n    for i in {A..Z}; do arr[index]=${i}; index=`expr ${index} + 1`; done\n    for i in {0..9}; do arr[index]=${i}; index=`expr ${index} + 1`; done\n    for i in {1..10}; do str=\"$str${arr[$RANDOM%$index]}\"; done\n    echo ${str}\n}\n\nis_64bit(){\n    if [ `getconf WORD_BIT` = '32' ] && [ `getconf LONG_BIT` = '64' ] ; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ndownload_file(){\n    if [ -s ${1} ]; then\n        echo \"$1 [found]\"\n    else\n        echo \"$1 not found!!!download now...\"\n        if ! wget -c -t3 -T60 ${download_root_url}/${1}; then\n            echo \"Failed to download $1, please download it to ${cur_dir} directory manually and try again.\"\n            exit 1\n        fi\n    fi\n}\n\nversionget(){\n    if [[ -s /etc/redhat-release ]];then\n        grep -oE  \"[0-9.]+\" /etc/redhat-release\n    else\n        grep -oE  \"[0-9.]+\" /etc/issue\n    fi\n}\n\ncentosversion(){\n    if check_sys sysRelease centos;then\n        local code=${1}\n        local version=\"`versionget`\"\n        local main_ver=${version%%.*}\n        if [ \"${main_ver}\" == \"${code}\" ];then\n            return 0\n        else\n            return 1\n        fi\n    else\n        return 1\n    fi\n}\n\ndebianversion(){\n    if check_sys sysRelease debian;then\n        local version=$( get_opsy )\n        local code=${1}\n        local main_ver=$( echo ${version} | sed 's/[^0-9]//g')\n        if [ \"${main_ver}\" == \"${code}\" ];then\n            return 0\n        else\n            return 1\n        fi\n    else\n        return 1\n    fi\n}\n\nversion_check(){\n    if check_sys packageManager yum; then\n        if centosversion 5; then\n            echo \"Error: CentOS 5 is not supported, Please re-install OS and try again.\"\n            exit 1\n        fi\n    fi\n}\n\nget_char(){\n    SAVEDSTTY=`stty -g`\n    stty -echo\n    stty cbreak\n    dd if=/dev/tty bs=1 count=1 2> /dev/null\n    stty -raw\n    stty echo\n    stty $SAVEDSTTY\n}\n\npreinstall_l2tp(){\n\n    echo\n    if [ -d \"/proc/vz\" ]; then\n        echo -e \"\\033[41;37m WARNING: \\033[0m Your VPS is based on OpenVZ, and IPSec might not be supported by the kernel.\"\n        echo \"Continue installation? (y/n)\"\n        read -p \"(Default: n)\" agree\n        [ -z ${agree} ] && agree=\"n\"\n        if [ \"${agree}\" == \"n\" ]; then\n            echo\n            echo \"L2TP installation cancelled.\"\n            echo\n            exit 0\n        fi\n    fi\n    echo\n    echo \"Please enter IP-Range:\"\n    read -p \"(Default Range: 192.168.18):\" iprange\n    [ -z ${iprange} ] && iprange=\"192.168.18\"\n\n    echo \"Please enter PSK:\"\n    read -p \"(Default PSK: teddysun.com):\" mypsk\n    [ -z ${mypsk} ] && mypsk=\"teddysun.com\"\n\n    echo \"Please enter Username:\"\n    read -p \"(Default Username: teddysun):\" username\n    [ -z ${username} ] && username=\"teddysun\"\n\n    password=`rand`\n    echo \"Please enter ${username}'s password:\"\n    read -p \"(Default Password: ${password}):\" tmppassword\n    [ ! -z ${tmppassword} ] && password=${tmppassword}\n\n    echo\n    echo \"ServerIP:${IP}\"\n    echo \"Server Local IP:${iprange}.1\"\n    echo \"Client Remote IP Range:${iprange}.2-${iprange}.254\"\n    echo \"PSK:${mypsk}\"\n    echo\n    echo \"Press any key to start... or press Ctrl + C to cancel.\"\n    char=`get_char`\n\n}\n\ninstall_l2tp(){\n\n    mknod /dev/random c 1 9\n\n    if check_sys packageManager apt; then\n        apt-get -y update\n\n        if debianversion 7; then\n            if is_64bit; then\n                local libnspr4_filename1=\"libnspr4_4.10.7-1_amd64.deb\"\n                local libnspr4_filename2=\"libnspr4-0d_4.10.7-1_amd64.deb\"\n                local libnspr4_filename3=\"libnspr4-dev_4.10.7-1_amd64.deb\"\n                local libnspr4_filename4=\"libnspr4-dbg_4.10.7-1_amd64.deb\"\n                local libnss3_filename1=\"libnss3_3.17.2-1.1_amd64.deb\"\n                local libnss3_filename2=\"libnss3-1d_3.17.2-1.1_amd64.deb\"\n                local libnss3_filename3=\"libnss3-tools_3.17.2-1.1_amd64.deb\"\n                local libnss3_filename4=\"libnss3-dev_3.17.2-1.1_amd64.deb\"\n                local libnss3_filename5=\"libnss3-dbg_3.17.2-1.1_amd64.deb\"\n            else\n                local libnspr4_filename1=\"libnspr4_4.10.7-1_i386.deb\"\n                local libnspr4_filename2=\"libnspr4-0d_4.10.7-1_i386.deb\"\n                local libnspr4_filename3=\"libnspr4-dev_4.10.7-1_i386.deb\"\n                local libnspr4_filename4=\"libnspr4-dbg_4.10.7-1_i386.deb\"\n                local libnss3_filename1=\"libnss3_3.17.2-1.1_i386.deb\"\n                local libnss3_filename2=\"libnss3-1d_3.17.2-1.1_i386.deb\"\n                local libnss3_filename3=\"libnss3-tools_3.17.2-1.1_i386.deb\"\n                local libnss3_filename4=\"libnss3-dev_3.17.2-1.1_i386.deb\"\n                local libnss3_filename5=\"libnss3-dbg_3.17.2-1.1_i386.deb\"\n            fi\n            rm -rf ${cur_dir}/l2tp\n            mkdir -p ${cur_dir}/l2tp\n            cd ${cur_dir}/l2tp\n            download_file \"${libnspr4_filename1}\"\n            download_file \"${libnspr4_filename2}\"\n            download_file \"${libnspr4_filename3}\"\n            download_file \"${libnspr4_filename4}\"\n            download_file \"${libnss3_filename1}\"\n            download_file \"${libnss3_filename2}\"\n            download_file \"${libnss3_filename3}\"\n            download_file \"${libnss3_filename4}\"\n            download_file \"${libnss3_filename5}\"\n            dpkg -i ${libnspr4_filename1} ${libnspr4_filename2} ${libnspr4_filename3} ${libnspr4_filename4}\n            dpkg -i ${libnss3_filename1} ${libnss3_filename2} ${libnss3_filename3} ${libnss3_filename4} ${libnss3_filename5}\n\n            apt-get -y install wget gcc ppp flex bison make pkg-config libpam0g-dev libcap-ng-dev iptables \\\n                               libcap-ng-utils libunbound-dev libevent-dev libcurl4-nss-dev libsystemd-daemon-dev\n        else\n            apt-get -y install wget gcc ppp flex bison make python libnss3-dev libnss3-tools libselinux-dev iptables \\\n                               libnspr4-dev pkg-config libpam0g-dev libcap-ng-dev libcap-ng-utils libunbound-dev \\\n                               libevent-dev libcurl4-nss-dev libsystemd-dev\n        fi\n        apt-get -y --no-install-recommends install xmlto\n        apt-get -y install xl2tpd\n\n        compile_install\n    elif check_sys packageManager yum; then\n        echo \"Adding the EPEL repository...\"\n        yum -y install epel-release yum-utils\n        [ ! -f /etc/yum.repos.d/epel.repo ] && echo \"Install EPEL repository failed, please check it.\" && exit 1\n        yum-config-manager --enable epel\n        echo \"Adding the EPEL repository complete...\"\n\n        if centosversion 7; then\n            yum -y install ppp libreswan xl2tpd firewalld\n            yum_install\n        elif centosversion 6; then\n            yum -y remove libevent-devel\n            yum -y install libevent2-devel\n            yum -y install nss-devel nspr-devel pkgconfig pam-devel \\\n                           libcap-ng-devel libselinux-devel lsof \\\n                           curl-devel flex bison gcc ppp make iptables gmp-devel \\\n                           fipscheck-devel unbound-devel xmlto libpcap-devel xl2tpd\n\n            compile_install\n        fi\n    fi\n\n}\n\nconfig_install(){\n\n    cat > /etc/ipsec.conf<<EOF\nversion 2.0\n\nconfig setup\n    protostack=netkey\n    nhelpers=0\n    uniqueids=no\n    interfaces=%defaultroute\n    virtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:!${iprange}.0/24\n\nconn l2tp-psk\n    rightsubnet=vhost:%priv\n    also=l2tp-psk-nonat\n\nconn l2tp-psk-nonat\n    authby=secret\n    pfs=no\n    auto=add\n    keyingtries=3\n    rekey=no\n    ikelifetime=8h\n    keylife=1h\n    type=transport\n    left=%defaultroute\n    leftid=${IP}\n    leftprotoport=17/1701\n    right=%any\n    rightprotoport=17/%any\n    dpddelay=40\n    dpdtimeout=130\n    dpdaction=clear\n    sha2-truncbug=yes\nEOF\n\n    cat > /etc/ipsec.secrets<<EOF\n%any %any : PSK \"${mypsk}\"\nEOF\n\n    cat > /etc/xl2tpd/xl2tpd.conf<<EOF\n[global]\nport = 1701\n\n[lns default]\nip range = ${iprange}.2-${iprange}.254\nlocal ip = ${iprange}.1\nrequire chap = yes\nrefuse pap = yes\nrequire authentication = yes\nname = l2tpd\nppp debug = yes\npppoptfile = /etc/ppp/options.xl2tpd\nlength bit = yes\nEOF\n\n    cat > /etc/ppp/options.xl2tpd<<EOF\nipcp-accept-local\nipcp-accept-remote\nrequire-mschap-v2\nms-dns 8.8.8.8\nms-dns 8.8.4.4\nnoccp\nauth\nhide-password\nidle 1800\nmtu 1410\nmru 1410\nnodefaultroute\ndebug\nproxyarp\nconnect-delay 5000\nEOF\n\n    rm -f /etc/ppp/chap-secrets\n    cat > /etc/ppp/chap-secrets<<EOF\n# Secrets for authentication using CHAP\n# client    server    secret    IP addresses\n${username}    l2tpd    ${password}       *\nEOF\n\n}\n\ncompile_install(){\n\n    rm -rf ${cur_dir}/l2tp\n    mkdir -p ${cur_dir}/l2tp\n    cd ${cur_dir}/l2tp\n    download_file \"${libreswan_filename}.tar.gz\"\n    tar -zxf ${libreswan_filename}.tar.gz\n\n    cd ${cur_dir}/l2tp/${libreswan_filename}\n        cat > Makefile.inc.local <<'EOF'\nWERROR_CFLAGS =\nUSE_DNSSEC = false\nUSE_DH31 = false\nUSE_GLIBC_KERN_FLIP_HEADERS = true\nEOF\n    make programs && make install\n\n    /usr/local/sbin/ipsec --version >/dev/null 2>&1\n    if [ $? -ne 0 ]; then\n        echo \"${libreswan_filename} install failed.\"\n        exit 1\n    fi\n\n    config_install\n\n    cp -pf /etc/sysctl.conf /etc/sysctl.conf.bak\n\n    sed -i 's/net.ipv4.ip_forward = 0/net.ipv4.ip_forward = 1/g' /etc/sysctl.conf\n\n    for each in `ls /proc/sys/net/ipv4/conf/`; do\n        echo \"net.ipv4.conf.${each}.accept_source_route=0\" >> /etc/sysctl.conf\n        echo \"net.ipv4.conf.${each}.accept_redirects=0\" >> /etc/sysctl.conf\n        echo \"net.ipv4.conf.${each}.send_redirects=0\" >> /etc/sysctl.conf\n        echo \"net.ipv4.conf.${each}.rp_filter=0\" >> /etc/sysctl.conf\n    done\n    sysctl -p\n\n    if centosversion 6; then\n        [ -f /etc/sysconfig/iptables ] && cp -pf /etc/sysconfig/iptables /etc/sysconfig/iptables.old.`date +%Y%m%d`\n\n        if [ \"`iptables -L -n | grep -c '\\-\\-'`\" == \"0\" ]; then\n            cat > /etc/sysconfig/iptables <<EOF\n# Added by L2TP VPN script\n*filter\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n-A INPUT -p icmp -j ACCEPT\n-A INPUT -i lo -j ACCEPT\n-A INPUT -p tcp --dport 22 -j ACCEPT\n-A INPUT -p udp -m multiport --dports 500,4500,1701 -j ACCEPT\n-A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT\n-A FORWARD -s ${iprange}.0/24  -j ACCEPT\nCOMMIT\n*nat\n:PREROUTING ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:POSTROUTING ACCEPT [0:0]\n-A POSTROUTING -s ${iprange}.0/24 -j SNAT --to-source ${IP}\nCOMMIT\nEOF\n        else\n            iptables -I INPUT -p udp -m multiport --dports 500,4500,1701 -j ACCEPT\n            iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT\n            iptables -I FORWARD -s ${iprange}.0/24  -j ACCEPT\n            iptables -t nat -A POSTROUTING -s ${iprange}.0/24 -j SNAT --to-source ${IP}\n            /etc/init.d/iptables save\n        fi\n\n        if [ ! -f /etc/ipsec.d/cert9.db ]; then\n           echo > /var/tmp/libreswan-nss-pwd\n           certutil -N -f /var/tmp/libreswan-nss-pwd -d /etc/ipsec.d\n           rm -f /var/tmp/libreswan-nss-pwd\n        fi\n\n        chkconfig --add iptables\n        chkconfig iptables on\n        chkconfig --add ipsec\n        chkconfig ipsec on\n        chkconfig --add xl2tpd\n        chkconfig xl2tpd on\n\n        /etc/init.d/iptables restart\n        /etc/init.d/ipsec start\n        /etc/init.d/xl2tpd start\n\n    else\n        [ -f /etc/iptables.rules ] && cp -pf /etc/iptables.rules /etc/iptables.rules.old.`date +%Y%m%d`\n\n        if [ \"`iptables -L -n | grep -c '\\-\\-'`\" == \"0\" ]; then\n            cat > /etc/iptables.rules <<EOF\n# Added by L2TP VPN script\n*filter\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n-A INPUT -p icmp -j ACCEPT\n-A INPUT -i lo -j ACCEPT\n-A INPUT -p tcp --dport 22 -j ACCEPT\n-A INPUT -p udp -m multiport --dports 500,4500,1701 -j ACCEPT\n-A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT\n-A FORWARD -s ${iprange}.0/24  -j ACCEPT\nCOMMIT\n*nat\n:PREROUTING ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:POSTROUTING ACCEPT [0:0]\n-A POSTROUTING -s ${iprange}.0/24 -j SNAT --to-source ${IP}\nCOMMIT\nEOF\n        else\n            iptables -I INPUT -p udp -m multiport --dports 500,4500,1701 -j ACCEPT\n            iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT\n            iptables -I FORWARD -s ${iprange}.0/24  -j ACCEPT\n            iptables -t nat -A POSTROUTING -s ${iprange}.0/24 -j SNAT --to-source ${IP}\n            /sbin/iptables-save > /etc/iptables.rules\n        fi\n\n        cat > /etc/network/if-up.d/iptables <<EOF\n#!/bin/sh\n/sbin/iptables-restore < /etc/iptables.rules\nEOF\n        chmod +x /etc/network/if-up.d/iptables\n\n        if [ ! -f /etc/ipsec.d/cert9.db ]; then\n           echo > /var/tmp/libreswan-nss-pwd\n           certutil -N -f /var/tmp/libreswan-nss-pwd -d /etc/ipsec.d\n           rm -f /var/tmp/libreswan-nss-pwd\n        fi\n\n        update-rc.d -f xl2tpd defaults\n\n        cp -f /etc/rc.local /etc/rc.local.old.`date +%Y%m%d`\n        sed --follow-symlinks -i -e '/^exit 0/d' /etc/rc.local\n        cat >> /etc/rc.local <<EOF\n\n# Added by L2TP VPN script\necho 1 > /proc/sys/net/ipv4/ip_forward\n/usr/sbin/service ipsec start\nexit 0\nEOF\n        chmod +x /etc/rc.local\n        echo 1 > /proc/sys/net/ipv4/ip_forward\n\n        /sbin/iptables-restore < /etc/iptables.rules\n        /usr/sbin/service ipsec start\n        /usr/sbin/service xl2tpd restart\n\n    fi\n\n}\n\nyum_install(){\n\n    config_install\n\n    cp -pf /etc/sysctl.conf /etc/sysctl.conf.bak\n\n    echo \"# Added by L2TP VPN\" >> /etc/sysctl.conf\n    echo \"net.ipv4.ip_forward=1\" >> /etc/sysctl.conf\n    echo \"net.ipv4.tcp_syncookies=1\" >> /etc/sysctl.conf\n    echo \"net.ipv4.icmp_echo_ignore_broadcasts=1\" >> /etc/sysctl.conf\n    echo \"net.ipv4.icmp_ignore_bogus_error_responses=1\" >> /etc/sysctl.conf\n\n    for each in `ls /proc/sys/net/ipv4/conf/`; do\n        echo \"net.ipv4.conf.${each}.accept_source_route=0\" >> /etc/sysctl.conf\n        echo \"net.ipv4.conf.${each}.accept_redirects=0\" >> /etc/sysctl.conf\n        echo \"net.ipv4.conf.${each}.send_redirects=0\" >> /etc/sysctl.conf\n        echo \"net.ipv4.conf.${each}.rp_filter=0\" >> /etc/sysctl.conf\n    done\n    sysctl -p\n\n    cat > /etc/firewalld/services/xl2tpd.xml<<EOF\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<service>\n  <short>xl2tpd</short>\n  <description>L2TP IPSec</description>\n  <port protocol=\"udp\" port=\"4500\"/>\n  <port protocol=\"udp\" port=\"1701\"/>\n</service>\nEOF\n    chmod 640 /etc/firewalld/services/xl2tpd.xml\n\n    systemctl enable ipsec\n    systemctl enable xl2tpd\n    systemctl enable firewalld\n\n    systemctl status firewalld > /dev/null 2>&1\n    if [ $? -eq 0 ]; then\n        firewall-cmd --reload\n        echo \"Checking firewalld status...\"\n        firewall-cmd --list-all\n        echo \"add firewalld rules...\"\n        firewall-cmd --permanent --add-service=ipsec\n        firewall-cmd --permanent --add-service=xl2tpd\n        firewall-cmd --permanent --add-masquerade\n        firewall-cmd --reload\n    else\n        echo \"Firewalld looks like not running, trying to start...\"\n        systemctl start firewalld\n        if [ $? -eq 0 ]; then\n            echo \"Firewalld start successfully...\"\n            firewall-cmd --reload\n            echo \"Checking firewalld status...\"\n            firewall-cmd --list-all\n            echo \"adding firewalld rules...\"\n            firewall-cmd --permanent --add-service=ipsec\n            firewall-cmd --permanent --add-service=xl2tpd\n            firewall-cmd --permanent --add-masquerade\n            firewall-cmd --reload\n        else\n            echo \"Failed to start firewalld. please enable udp port 500 4500 1701 manually if necessary.\"\n        fi\n    fi\n\n    systemctl restart ipsec\n    systemctl restart xl2tpd\n    echo \"Checking ipsec status...\"\n    systemctl -a | grep ipsec\n    echo \"Checking xl2tpd status...\"\n    systemctl -a | grep xl2tpd\n    echo \"Checking firewalld status...\"\n    firewall-cmd --list-all\n\n}\n\nfinally(){\n\n    cd ${cur_dir}\n    rm -fr ${cur_dir}/l2tp\n    # create l2tp command\n    cp -f ${cur_dir}/`basename $0` /usr/bin/l2tp\n\n    echo \"Please wait a moment...\"\n    sleep 5\n    ipsec verify\n    echo\n    echo \"###############################################################\"\n    echo \"# L2TP VPN Auto Installer                                     #\"\n    echo \"# System Supported: CentOS 6+ / Debian 7+ / Ubuntu 12+        #\"\n    echo \"# Intro: https://teddysun.com/448.html                        #\"\n    echo \"# Author: Teddysun <i@teddysun.com>                           #\"\n    echo \"###############################################################\"\n    echo \"If there is no [FAILED] above, you can connect to your L2TP \"\n    echo \"VPN Server with the default Username/Password is below:\"\n    echo\n    echo \"Server IP: ${IP}\"\n    echo \"PSK      : ${mypsk}\"\n    echo \"Username : ${username}\"\n    echo \"Password : ${password}\"\n    echo\n    echo \"If you want to modify user settings, please use below command(s):\"\n    echo \"l2tp -a (Add a user)\"\n    echo \"l2tp -d (Delete a user)\"\n    echo \"l2tp -l (List all users)\"\n    echo \"l2tp -m (Modify a user password)\"\n    echo\n    echo \"Welcome to visit our website: https://teddysun.com/448.html\"\n    echo \"Enjoy it!\"\n    echo\n}\n\n\nl2tp(){\n    clear\n    echo\n    echo \"###############################################################\"\n    echo \"# L2TP VPN Auto Installer                                     #\"\n    echo \"# System Supported: CentOS 6+ / Debian 7+ / Ubuntu 12+        #\"\n    echo \"# Intro: https://teddysun.com/448.html                        #\"\n    echo \"# Author: Teddysun <i@teddysun.com>                           #\"\n    echo \"###############################################################\"\n    echo\n    rootness\n    tunavailable\n    disable_selinux\n    version_check\n    get_os_info\n    preinstall_l2tp\n    install_l2tp\n    finally\n}\n\nlist_users(){\n    if [ ! -f /etc/ppp/chap-secrets ];then\n        echo \"Error: /etc/ppp/chap-secrets file not found.\"\n        exit 1\n    fi\n    local line=\"+-------------------------------------------+\\n\"\n    local string=%20s\n    printf \"${line}|${string} |${string} |\\n${line}\" Username Password\n    grep -v \"^#\" /etc/ppp/chap-secrets | awk '{printf \"|'${string}' |'${string}' |\\n\", $1,$3}'\n    printf ${line}\n}\n\nadd_user(){\n    while :\n    do\n        read -p \"Please input your Username:\" user\n        if [ -z ${user} ]; then\n            echo \"Username can not be empty\"\n        else\n            grep -w \"${user}\" /etc/ppp/chap-secrets > /dev/null 2>&1\n            if [ $? -eq 0 ];then\n                echo \"Username (${user}) already exists. Please re-enter your username.\"\n            else\n                break\n            fi\n        fi\n    done\n    pass=`rand`\n    echo \"Please input ${user}'s password:\"\n    read -p \"(Default Password: ${pass}):\" tmppass\n    [ ! -z ${tmppass} ] && pass=${tmppass}\n    echo \"${user}    l2tpd    ${pass}       *\" >> /etc/ppp/chap-secrets\n    echo \"Username (${user}) add completed.\"\n}\n\ndel_user(){\n    while :\n    do\n        read -p \"Please input Username you want to delete it:\" user\n        if [ -z ${user} ]; then\n            echo \"Username can not be empty\"\n        else\n            grep -w \"${user}\" /etc/ppp/chap-secrets >/dev/null 2>&1\n            if [ $? -eq 0 ];then\n                break\n            else\n                echo \"Username (${user}) is not exists. Please re-enter your username.\"\n            fi\n        fi\n    done\n    sed -i \"/^\\<${user}\\>/d\" /etc/ppp/chap-secrets\n    echo \"Username (${user}) delete completed.\"\n}\n\nmod_user(){\n    while :\n    do\n        read -p \"Please input Username you want to change password:\" user\n        if [ -z ${user} ]; then\n            echo \"Username can not be empty\"\n        else\n            grep -w \"${user}\" /etc/ppp/chap-secrets >/dev/null 2>&1\n            if [ $? -eq 0 ];then\n                break\n            else\n                echo \"Username (${user}) is not exists. Please re-enter your username.\"\n            fi\n        fi\n    done\n    pass=`rand`\n    echo \"Please input ${user}'s new password:\"\n    read -p \"(Default Password: ${pass}):\" tmppass\n    [ ! -z ${tmppass} ] && pass=${tmppass}\n    sed -i \"/^\\<${user}\\>/d\" /etc/ppp/chap-secrets\n    echo \"${user}    l2tpd    ${pass}       *\" >> /etc/ppp/chap-secrets\n    echo \"Username ${user}'s password has been changed.\"\n}\n\n# Main process\naction=$1\nif [ -z ${action} ] && [ \"`basename $0`\" != \"l2tp\" ]; then\n    action=install\nfi\n\ncase ${action} in\n    install)\n        l2tp 2>&1 | tee ${cur_dir}/l2tp.log\n        ;;\n    -l|--list)\n        list_users\n        ;;\n    -a|--add)\n        add_user\n        ;;\n    -d|--del)\n        del_user\n        ;;\n    -m|--mod)\n        mod_user\n        ;;\n    -h|--help)\n        echo \"Usage: `basename $0` -l,--list   List all users\"\n        echo \"       `basename $0` -a,--add    Add a user\"\n        echo \"       `basename $0` -d,--del    Delete a user\"\n        echo \"       `basename $0` -m,--mod    Modify a user password\"\n        echo \"       `basename $0` -h,--help   Print this help information\"\n        ;;\n    *)\n        echo \"Usage: `basename $0` [-l,--list|-a,--add|-d,--del|-m,--mod|-h,--help]\" && exit\n        ;;\nesac\n"
        },
        {
          "name": "pptp.sh",
          "type": "blob",
          "size": 2.78515625,
          "content": "#!/bin/bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n#===================================================================\n#   SYSTEM REQUIRED:  CentOS 6 (32bit/64bit)\n#   DESCRIPTION:  Auto install pptpd for CentOS 6\n#   Author: Teddysun <i@teddysun.com>\n#===================================================================\n\nif [[ $EUID -ne 0 ]]; then\n    echo \"Error:This script must be run as root!\"\n    exit 1\nfi\n\nif [[ ! -e /dev/net/tun ]]; then\n    echo \"TUN/TAP is not available!\"\n    exit 1\nfi\n\ncur_dir=`pwd`\nclear\necho \"\"\necho \"#############################################################\"\necho \"# Auto Install PPTP for CentOS 6                            #\"\necho \"# System Required: CentOS 6(32bit/64bit)                    #\"\necho \"# Intro: http://teddysun.com/134.html                       #\"\necho \"# Author: Teddysun <i@teddysun.com>                         #\"\necho \"#############################################################\"\necho \"\"\n\n# Remove installed pptpd & ppp\nyum remove -y pptpd ppp\niptables --flush POSTROUTING --table nat\niptables --flush FORWARD\nrm -f /etc/pptpd.conf\nrm -rf /etc/ppp\narch=`uname -m`\nIP=`ip addr | egrep -o '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | egrep -v \"^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.\" | head -n 1`\n\n# Download pptpd\nif [ -s pptpd-1.4.0-3.el6.$arch.rpm ]; then\n  echo \"pptpd-1.4.0-3.el6.$arch.rpm [found]\"\nelse\n  echo \"pptpd-1.4.0-3.el6.$arch.rpm not found! download now......\"\n  if ! wget http://lamp.teddysun.com/files/pptpd-1.4.0-3.el6.$arch.rpm; then\n    echo \"Failed to download pptpd-1.4.0-3.el6.$arch.rpm, please download it to $cur_dir directory manually and retry.\"\n    exit 1\n  fi\nfi\n\n# Install some necessary tools\nyum -y install net-tools make libpcap iptables gcc-c++ logrotate tar cpio perl pam tcp_wrappers dkms ppp\nrpm -ivh pptpd-1.4.0-3.el6.$arch.rpm\n\nrm -f /dev/ppp\nmknod /dev/ppp c 108 0\necho 1 > /proc/sys/net/ipv4/ip_forward\necho \"mknod /dev/ppp c 108 0\" >> /etc/rc.local\necho \"echo 1 > /proc/sys/net/ipv4/ip_forward\" >> /etc/rc.local\necho \"localip 192.168.8.1\" >> /etc/pptpd.conf\necho \"remoteip 192.168.8.2-254\" >> /etc/pptpd.conf\necho \"ms-dns 8.8.8.8\" >> /etc/ppp/options.pptpd\necho \"ms-dns 8.8.4.4\" >> /etc/ppp/options.pptpd\n\npass=`openssl rand 6 -base64`\nif [ \"$1\" != \"\" ]\n  then pass=$1\nfi\n\necho \"vpn pptpd ${pass} *\" >> /etc/ppp/chap-secrets\n\niptables -t nat -A POSTROUTING -s 192.168.8.0/24 -j SNAT --to-source ${IP}\niptables -A FORWARD -p tcp --syn -s 192.168.8.0/24 -j TCPMSS --set-mss 1356\nservice iptables save\nchkconfig --add pptpd\nchkconfig pptpd on\nservice iptables restart\nservice pptpd start\n\necho\necho \"PPTP VPN service is installed.\"\necho \"ServerIP:${IP}\"\necho \"Username:vpn\"\necho \"Password:${pass}\"\necho \"Welcome to visit: https://teddysun.com/134.html\"\necho\n\nexit 0\n"
        },
        {
          "name": "rpm",
          "type": "tree",
          "content": null
        },
        {
          "name": "unixbench.sh",
          "type": "blob",
          "size": 1.5234375,
          "content": "#! /bin/bash\n#==============================================================#\n#   Description:  Unixbench script                             #\n#   Author: Teddysun <i@teddysun.com>                          #\n#   Intro:  https://teddysun.com/245.html                      #\n#==============================================================#\ncur_dir=/opt/unixbench\n\n# Check System\n[[ $EUID -ne 0 ]] && echo 'Error: This script must be run as root!' && exit 1\n[[ -f /etc/redhat-release ]] && os='centos'\n[[ ! -z \"`egrep -i debian /etc/issue`\" ]] && os='debian'\n[[ ! -z \"`egrep -i ubuntu /etc/issue`\" ]] && os='ubuntu'\n[[ \"$os\" == '' ]] && echo 'Error: Your system is not supported to run it!' && exit 1\n\n# Install necessary libaries\nif [ \"$os\" == 'centos' ]; then\n    yum -y install make automake gcc autoconf gcc-c++ time perl-Time-HiRes\nelse\n    apt-get -y update\n    apt-get -y install make automake gcc autoconf time perl\nfi\n\n# Create new soft download dir\nmkdir -p ${cur_dir}\ncd ${cur_dir}\n\n# Download UnixBench5.1.3\nif [ -s UnixBench5.1.3.tgz ]; then\n    echo \"UnixBench5.1.3.tgz [found]\"\nelse\n    echo \"UnixBench5.1.3.tgz not found!!!download now...\"\n    if ! wget -c https://dl.lamp.sh/files/UnixBench5.1.3.tgz; then\n        echo \"Failed to download UnixBench5.1.3.tgz, please download it to ${cur_dir} directory manually and try again.\"\n        exit 1\n    fi\nfi\ntar -zxvf UnixBench5.1.3.tgz && rm -f UnixBench5.1.3.tgz\ncd UnixBench/\n\n#Run unixbench\nmake\n./Run\n\necho\necho\necho \"======= Script description and score comparison completed! ======= \"\necho\necho\n"
        },
        {
          "name": "wireguard.sh",
          "type": "blob",
          "size": 33.20703125,
          "content": "#!/usr/bin/env bash\n#\n# This is a Shell script for configure and start WireGuard VPN server.\n#\n# Copyright (C) 2019 - 2024 Teddysun <i@teddysun.com>\n#\n# Reference URL:\n# https://www.wireguard.com\n# https://git.zx2c4.com/WireGuard\n# https://teddysun.com/554.html\n\ntrap _exit INT QUIT TERM\n\ncur_dir=\"$(cd -P -- \"$(dirname -- \"$0\")\" && pwd -P)\"\n\n[ ${EUID} -ne 0 ] && _red \"This script must be run as root\\n\" && exit 1\n\n_red() {\n    printf '\\033[1;31;31m%b\\033[0m' \"$1\"\n}\n\n_green() {\n    printf '\\033[1;31;32m%b\\033[0m' \"$1\"\n}\n\n_yellow() {\n    printf '\\033[1;31;33m%b\\033[0m' \"$1\"\n}\n\n_printargs() {\n    printf -- \"%s\" \"[$(date)] \"\n    printf -- \"%s\" \"$1\"\n    printf \"\\n\"\n}\n\n_info() {\n    _printargs \"$@\"\n}\n\n_warn() {\n    printf -- \"%s\" \"[$(date)] \"\n    _yellow \"$1\"\n    printf \"\\n\"\n}\n\n_error() {\n    printf -- \"%s\" \"[$(date)] \"\n    _red \"$1\"\n    printf \"\\n\"\n    exit 2\n}\n\n_exit() {\n    printf \"\\n\"\n    _red \"$0 has been terminated.\"\n    printf \"\\n\"\n    exit 1\n}\n\n_exists() {\n    local cmd=\"$1\"\n    if eval type type > /dev/null 2>&1; then\n        eval type \"$cmd\" > /dev/null 2>&1\n    elif command > /dev/null 2>&1; then\n        command -v \"$cmd\" > /dev/null 2>&1\n    else\n        which \"$cmd\" > /dev/null 2>&1\n    fi\n    local rt=$?\n    return ${rt}\n}\n\n_ipv4() {\n    local ipv4=\"$( ip addr | grep -E -o '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | \\\n                   grep -E -v \"^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.|^169\\.254\\.\" | head -n 1 )\"\n    [ -z \"${ipv4}\" ] && ipv4=\"$( wget -qO- -t1 -T2 http://ipv4.icanhazip.com )\"\n    [ -z \"${ipv4}\" ] && ipv4=\"$( wget -qO- -t1 -T2 http://ipinfo.io/ip )\"\n    printf -- \"%s\" \"${ipv4}\"\n}\n\n_ipv6() {\n    local ipv6=\"\"\n    ipv6=\"$(wget -qO- -t1 -T2 http://ipv6.icanhazip.com)\"\n    printf -- \"%s\" \"${ipv6}\"\n}\n\n_nic() {\n    local nic=\"\"\n    nic=\"$(ip -4 route ls | grep default | grep -Po '(?<=dev )(\\S+)' | head -1)\"\n    printf -- \"%s\" \"${nic}\"\n}\n\n_port() {\n    local port=\"$(shuf -i 1024-20480 -n 1)\"\n    while true; do\n        if _exists \"netstat\" && netstat -tunlp | grep -w \"${port}\" > /dev/null 2>&1; then\n            port=\"$(shuf -i 1024-20480 -n 1)\"\n        else\n            break\n        fi\n    done\n    printf -- \"%s\" \"${port}\"\n}\n\n_os() {\n    local os=\"\"\n    [ -f \"/etc/debian_version\" ] && source /etc/os-release && os=\"${ID}\" && printf -- \"%s\" \"${os}\" && return\n    [ -f \"/etc/fedora-release\" ] && os=\"fedora\" && printf -- \"%s\" \"${os}\" && return\n    [ -f \"/etc/redhat-release\" ] && os=\"centos\" && printf -- \"%s\" \"${os}\" && return\n}\n\n_os_full() {\n    [ -f /etc/redhat-release ] && awk '{print ($1,$3~/^[0-9]/?$3:$4)}' /etc/redhat-release && return\n    [ -f /etc/os-release ] && awk -F'[= \"]' '/PRETTY_NAME/{print $3,$4,$5}' /etc/os-release && return\n    [ -f /etc/lsb-release ] && awk -F'[=\"]+' '/DESCRIPTION/{print $2}' /etc/lsb-release && return\n}\n\n_os_ver() {\n    local main_ver=\"$( echo $(_os_full) | grep -oE  \"[0-9.]+\")\"\n    printf -- \"%s\" \"${main_ver%%.*}\"\n}\n\n_error_detect() {\n    local cmd=\"$1\"\n    _info \"${cmd}\"\n    eval ${cmd} 1> /dev/null\n    if [ $? -ne 0 ]; then\n        _error \"Execution command (${cmd}) failed, please check it and try again.\"\n    fi\n}\n\n_version_gt(){\n    test \"$(echo \"$@\" | tr \" \" \"\\n\" | sort -V | head -n 1)\" != \"$1\"\n}\n\n_version_ge(){\n    test \"$(echo \"$@\" | tr \" \" \"\\n\" | sort -rV | head -n 1)\" == \"$1\"\n}\n\n_is_installed() {\n    install_flag=(0 0)\n    if _exists \"wg\" && _exists \"wg-quick\"; then\n        install_flag[0]=1\n    fi\n    if [ -s \"/lib/modules/$(uname -r)/extra/wireguard.ko\" ] \\\n    || [ -s \"/lib/modules/$(uname -r)/extra/wireguard.ko.xz\" ] \\\n    || [ -s \"/lib/modules/$(uname -r)/updates/dkms/wireguard.ko\" ] \\\n    || [ -s \"/lib/modules/$(uname -r)/updates/dkms/wireguard.ko.xz\" ] \\\n    || [ -s \"/lib/modules/$(uname -r)/kernel/wireguard/wireguard.ko\" ] \\\n    || [ -s \"/lib/modules/$(uname -r)/kernel/drivers/net/wireguard/wireguard.ko\" ] \\\n    || [ -s \"/lib/modules/$(uname -r)/kernel/drivers/net/wireguard/wireguard.ko.xz\" ]; then\n        install_flag[1]=1\n    fi\n    if [ \"${install_flag[0]}\" = \"1\" ] && [ \"${install_flag[1]}\" = \"1\" ]; then\n        return 0\n    fi\n    if [ \"${install_flag[0]}\" = \"1\" ] && [ \"${install_flag[1]}\" = \"0\" ]; then\n        return 1\n    fi\n    if [ \"${install_flag[0]}\" = \"0\" ] && [ \"${install_flag[1]}\" = \"1\" ]; then\n        return 2\n    fi\n    if [ \"${install_flag[0]}\" = \"0\" ] && [ \"${install_flag[1]}\" = \"0\" ]; then\n        return 3\n    fi\n}\n\nget_latest_module_ver() {\n    wireguard_ver=\"$(wget --no-check-certificate -qO- https://api.github.com/repos/WireGuard/wireguard-linux-compat/tags | grep 'name' | head -1 | cut -d\\\" -f4)\"\n    if [ -z \"${wireguard_ver}\" ]; then\n        wireguard_ver=\"$(curl -Lso- https://api.github.com/repos/WireGuard/wireguard-linux-compat/tags | grep 'name' | head -1 | cut -d\\\" -f4)\"\n    fi\n    if [ -z \"${wireguard_ver}\" ]; then\n        _error \"Failed to get latest wireguard module version from github\"\n    fi\n}\n\nget_latest_tools_ver() {\n    wireguard_tools_ver=\"$(wget --no-check-certificate -qO- https://api.github.com/repos/WireGuard/wireguard-tools/tags | grep 'name' | head -1 | cut -d\\\" -f4)\"\n    if [ -z \"${wireguard_tools_ver}\" ]; then\n        wireguard_tools_ver=\"$(curl -Lso- https://api.github.com/repos/WireGuard/wireguard-tools/tags | grep 'name' | head -1 | cut -d\\\" -f4)\"\n    fi\n    if [ -z \"${wireguard_tools_ver}\" ]; then\n        _error \"Failed to get latest wireguard tools version from github\"\n    fi\n}\n\n# Check OS version\ncheck_os() {\n    _info \"Check OS version\"\n    if _exists \"virt-what\"; then\n        virt=\"$(virt-what)\"\n    elif _exists \"systemd-detect-virt\"; then\n        virt=\"$(systemd-detect-virt)\"\n    fi\n    if [ -n \"${virt}\" -a \"${virt}\" = \"lxc\" ]; then\n        _error \"Virtualization is LXC, which is not supported.\"\n    fi\n    if [ -n \"${virt}\" -a \"${virt}\" = \"openvz\" ] || [ -d \"/proc/vz\" ]; then\n        _error \"Virtualization is OpenVZ, which is not supported.\"\n    fi\n    [ -z \"$(_os)\" ] && _error \"Not supported OS\"\n    case \"$(_os)\" in\n        ubuntu)\n            [ -n \"$(_os_ver)\" -a \"$(_os_ver)\" -lt 16 ] && _error \"Not supported OS, please change to Ubuntu 16+ and try again.\"\n            ;;\n        debian|raspbian)\n            [ -n \"$(_os_ver)\" -a \"$(_os_ver)\" -lt 8 ] &&  _error \"Not supported OS, please change to De(Rasp)bian 8+ and try again.\"\n            ;;\n        fedora)\n            [ -n \"$(_os_ver)\" -a \"$(_os_ver)\" -lt 29 ] && _error \"Not supported OS, please change to Fedora 29+ and try again.\"\n            ;;\n        centos)\n            [ -n \"$(_os_ver)\" -a \"$(_os_ver)\" -lt 7 ] &&  _error \"Not supported OS, please change to CentOS 7+ and try again.\"\n            ;;\n        *)\n            _error \"Not supported OS\"\n            ;;\n    esac\n}\n\n# Check linux kernel version\ncheck_kernel_version() {\n    kernel_version=\"$(uname -r | cut -d- -f1)\"\n    if _version_ge ${kernel_version} 5.6.0; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n# Install wireguard module from source\ninstall_wg_module() {\n    get_latest_module_ver\n    wireguard_name=\"wireguard-linux-compat-$(echo ${wireguard_ver} | grep -oE '[0-9.]+')\"\n    wireguard_url=\"https://github.com/WireGuard/wireguard-linux-compat/archive/${wireguard_ver}.tar.gz\"\n    cd ${cur_dir}\n    _error_detect \"wget --no-check-certificate -qO ${wireguard_name}.tar.gz ${wireguard_url}\"\n    _error_detect \"tar zxf ${wireguard_name}.tar.gz\"\n    _error_detect \"cd ${wireguard_name}/src\"\n    _error_detect \"make\"\n    _error_detect \"make install\"\n    _error_detect \"cd ${cur_dir} && rm -fr ${wireguard_name}.tar.gz ${wireguard_name}\"\n}\n\n# Install wireguard tools from source\ninstall_wg_tools() {\n    get_latest_tools_ver\n    wireguard_tools_name=\"wireguard-tools-$(echo ${wireguard_tools_ver} | grep -oE '[0-9.]+')\"\n    wireguard_tools_url=\"https://github.com/WireGuard/wireguard-tools/archive/${wireguard_tools_ver}.tar.gz\"\n    cd ${cur_dir}\n    _error_detect \"wget --no-check-certificate -qO ${wireguard_tools_name}.tar.gz ${wireguard_tools_url}\"\n    _error_detect \"tar zxf ${wireguard_tools_name}.tar.gz\"\n    _error_detect \"cd ${wireguard_tools_name}/src\"\n    _error_detect \"make\"\n    _error_detect \"make install\"\n    _error_detect \"cd ${cur_dir} && rm -fr ${wireguard_tools_name}.tar.gz ${wireguard_tools_name}\"\n}\n\ninstall_wg_pkgs() {\n    _info \"Install dependencies for wireguard\"\n    case \"$(_os)\" in\n        ubuntu|debian|raspbian)\n            _error_detect \"apt-get update\"\n            _error_detect \"apt-get -y install qrencode\"\n            _error_detect \"apt-get -y install iptables\"\n            _error_detect \"apt-get -y install bc\"\n            _error_detect \"apt-get -y install gcc\"\n            _error_detect \"apt-get -y install make\"\n            _error_detect \"apt-get -y install libmnl-dev\"\n            _error_detect \"apt-get -y install libelf-dev\"\n            if [ ! -d \"/usr/src/linux-headers-$(uname -r)\" ]; then\n                if [ \"$(_os)\" = \"raspbian\" ]; then\n                    _error_detect \"apt-get -y install raspberrypi-kernel-headers\"\n                else\n                    _error_detect \"apt-get -y install linux-headers-$(uname -r)\"\n                fi\n            fi\n            ;;\n        fedora)\n            _error_detect \"dnf -y install qrencode\"\n            _error_detect \"dnf -y install bc\"\n            _error_detect \"dnf -y install gcc\"\n            _error_detect \"dnf -y install make\"\n            _error_detect \"dnf -y install libmnl-devel\"\n            _error_detect \"dnf -y install elfutils-libelf-devel\"\n            [ ! -d \"/usr/src/kernels/$(uname -r)\" ] && _error_detect \"dnf -y install kernel-headers\" && _error_detect \"dnf -y install kernel-devel\"\n            ;;\n        centos)\n            _error_detect \"yum -y install epel-release\"\n            _error_detect \"yum -y install qrencode\"\n            _error_detect \"yum -y install bc\"\n            _error_detect \"yum -y install gcc\"\n            _error_detect \"yum -y install make\"\n            _error_detect \"yum -y install yum-utils\"\n            if [ -n \"$(_os_ver)\" -a \"$(_os_ver)\" -eq 8 ]; then\n                yum-config-manager --enable PowerTools > /dev/null 2>&1 || yum-config-manager --enable powertools > /dev/null 2>&1\n            fi\n            if [ -n \"$(_os_ver)\" -a \"$(_os_ver)\" -eq 9 ]; then\n                yum-config-manager --enable crb > /dev/null 2>&1\n            fi\n            _error_detect \"yum -y install libmnl-devel\"\n            _error_detect \"yum -y install elfutils-libelf-devel\"\n            [ ! -d \"/usr/src/kernels/$(uname -r)\" ] && _error_detect \"yum -y install kernel-headers\" && _error_detect \"yum -y install kernel-devel\"\n            ;;\n        *)\n            ;; # do nothing\n    esac\n}\n\n# Install from repository\ninstall_wg_1() {\n    install_wg_pkgs\n    _info \"Install wireguard from repository\"\n    case \"$(_os)\" in\n        ubuntu)\n            _error_detect \"apt-get update\"\n            _error_detect \"apt-get -y install wireguard\"\n            ;;\n        debian)\n            echo \"deb http://deb.debian.org/debian/ unstable main\" > /etc/apt/sources.list.d/unstable.list\n            printf 'Package: *\\nPin: release a=unstable\\nPin-Priority: 90\\n' > /etc/apt/preferences.d/limit-unstable\n            _error_detect \"apt-get update\"\n            _error_detect \"apt-get -y install wireguard\"\n            ;;\n        fedora)\n            if [ -n \"$(_os_ver)\" -a \"$(_os_ver)\" -lt 31 ]; then\n                _error_detect \"dnf -y copr enable jdoss/wireguard\"\n                _error_detect \"dnf -y install wireguard-dkms wireguard-tools\"\n            else\n                _error_detect \"dnf -y install wireguard-tools\"\n            fi\n            ;;\n        centos)\n            if [ -n \"$(_os_ver)\" -a \"$(_os_ver)\" -eq 7 ]; then\n                _error_detect \"curl -Lso /etc/yum.repos.d/wireguard.repo https://copr.fedorainfracloud.org/coprs/jdoss/wireguard/repo/epel-7/jdoss-wireguard-epel-7.repo\"\n            fi\n            if [ -n \"$(_os_ver)\" -a \"$(_os_ver)\" -eq 8 ]; then\n                _error_detect \"curl -Lso /etc/yum.repos.d/wireguard.repo https://copr.fedorainfracloud.org/coprs/jdoss/wireguard/repo/epel-8/jdoss-wireguard-epel-8.repo\"\n            fi\n            _error_detect \"yum -y install wireguard-dkms\"\n            _error_detect \"yum -y install wireguard-tools\"\n            ;;\n        *)\n            ;; # do nothing\n    esac\n}\n\n# Install from source\ninstall_wg_2() {\n    install_wg_pkgs\n    _info \"Install wireguard from source\"\n    install_wg_module\n    install_wg_tools\n}\n\n# Install wireguard tools from repo\ninstall_wg_3() {\n    install_wg_pkgs\n    _info \"Install wireguard from repository\"\n    case \"$(_os)\" in\n        ubuntu)\n            _error_detect \"add-apt-repository ppa:wireguard/wireguard\"\n            _error_detect \"apt-get update\"\n            _error_detect \"apt-get -y install --no-install-recommends wireguard-tools\"\n            ;;\n        debian)\n            echo \"deb http://deb.debian.org/debian/ unstable main\" > /etc/apt/sources.list.d/unstable.list\n            printf 'Package: *\\nPin: release a=unstable\\nPin-Priority: 90\\n' > /etc/apt/preferences.d/limit-unstable\n            _error_detect \"apt-get update\"\n            _error_detect \"apt-get -y install --no-install-recommends wireguard-tools\"\n            ;;\n        fedora)\n            if [ -n \"$(_os_ver)\" -a \"$(_os_ver)\" -lt 31 ]; then\n                _error_detect \"dnf -y copr enable jdoss/wireguard\"\n                _error_detect \"dnf -y install wireguard-tools\"\n            else\n                _error_detect \"dnf -y install wireguard-tools\"\n            fi\n            ;;\n        centos)\n            if [ -n \"$(_os_ver)\" -a \"$(_os_ver)\" -eq 7 ]; then\n                _error_detect \"curl -Lso /etc/yum.repos.d/wireguard.repo https://copr.fedorainfracloud.org/coprs/jdoss/wireguard/repo/epel-7/jdoss-wireguard-epel-7.repo\"\n            fi\n            if [ -n \"$(_os_ver)\" -a \"$(_os_ver)\" -eq 8 ]; then\n                _error_detect \"curl -Lso /etc/yum.repos.d/wireguard.repo https://copr.fedorainfracloud.org/coprs/jdoss/wireguard/repo/epel-8/jdoss-wireguard-epel-8.repo\"\n            fi\n            _error_detect \"yum -y install wireguard-tools\"\n            ;;\n        *)\n            ;; # do nothing\n    esac\n}\n\n# Install wireguard tools from source\ninstall_wg_4() {\n    install_wg_pkgs\n    _info \"Install wireguard tools from source\"\n    install_wg_tools\n}\n\n# Uninstall WireGuard\nuninstall_wg() {\n    if ! _is_installed; then\n        _error \"WireGuard is not installed\"\n    fi\n    _info \"Uninstall WireGuard start\"\n    # stop wireguard at first\n    _error_detect \"systemctl stop wg-quick@${SERVER_WG_NIC}\"\n    _error_detect \"systemctl disable wg-quick@${SERVER_WG_NIC}\"\n    # if wireguard has been installed from repository\n    if _exists \"yum\" && _exists \"rpm\"; then\n        if rpm -qa | grep -q wireguard-dkms; then\n            _error_detect \"yum -y remove wireguard-dkms\"\n        fi\n        if rpm -qa | grep -q wireguard-tools; then\n            _error_detect \"yum -y remove wireguard-tools\"\n        fi\n    elif _exists \"apt\" && _exists \"apt-get\"; then\n        if apt list --installed | grep -q wireguard-dkms; then\n            _error_detect \"apt-get -y remove wireguard-dkms\"\n        fi\n        if apt list --installed | grep -q wireguard-tools; then\n            _error_detect \"apt-get -y remove wireguard-tools\"\n        fi\n    fi\n    # if wireguard has been installed from source\n    if _is_installed; then\n        _error_detect \"rm -f /usr/bin/wg\"\n        _error_detect \"rm -f /usr/bin/wg-quick\"\n        _error_detect \"rm -f /usr/share/man/man8/wg.8\"\n        _error_detect \"rm -f /usr/share/man/man8/wg-quick.8\"\n        _exists \"modprobe\" && _error_detect \"modprobe -r wireguard\"\n    fi\n    [ -d \"/etc/wireguard\" ] && _error_detect \"rm -fr /etc/wireguard\"\n    _info \"Uninstall WireGuard completed\"\n}\n\n# Create server interface\ncreate_server_if() {\n    SERVER_PRIVATE_KEY=\"$(wg genkey)\"\n    SERVER_PUBLIC_KEY=\"$(echo ${SERVER_PRIVATE_KEY} | wg pubkey)\"\n    CLIENT_PRIVATE_KEY=\"$(wg genkey)\"\n    CLIENT_PUBLIC_KEY=\"$(echo ${CLIENT_PRIVATE_KEY} | wg pubkey)\"\n    CLIENT_PRE_SHARED_KEY=\"$( wg genpsk )\"\n    _info \"Create server interface: /etc/wireguard/${SERVER_WG_NIC}.conf\"\n    [ ! -d \"/etc/wireguard\" ] && mkdir -p \"/etc/wireguard\"\n    if [ -n \"${SERVER_PUB_IPV6}\" ]; then\n        cat > /etc/wireguard/${SERVER_WG_NIC}.conf <<EOF\n[Interface]\nAddress = ${SERVER_WG_IPV4}/24,${SERVER_WG_IPV6}/64\nListenPort = ${SERVER_WG_PORT}\nPrivateKey = ${SERVER_PRIVATE_KEY}\n\n[Peer]\nPublicKey = ${CLIENT_PUBLIC_KEY}\nAllowedIPs = ${CLIENT_WG_IPV4}/32,${CLIENT_WG_IPV6}/128\nPresharedKey = ${CLIENT_PRE_SHARED_KEY}\nPersistentKeepalive = 25\nEOF\n    else\n        cat > /etc/wireguard/${SERVER_WG_NIC}.conf <<EOF\n[Interface]\nAddress = ${SERVER_WG_IPV4}/24\nListenPort = ${SERVER_WG_PORT}\nPrivateKey = ${SERVER_PRIVATE_KEY}\n\n[Peer]\nPublicKey = ${CLIENT_PUBLIC_KEY}\nAllowedIPs = ${CLIENT_WG_IPV4}/32\nPresharedKey = ${CLIENT_PRE_SHARED_KEY}\nPersistentKeepalive = 25\nEOF\n    fi\n    chmod 600 /etc/wireguard/${SERVER_WG_NIC}.conf\n}\n\n# Create client interface\ncreate_client_if() {\n    _info \"Create client interface: /etc/wireguard/${SERVER_WG_NIC}_client.conf\"\n    if [ -n \"${SERVER_PUB_IPV6}\" ]; then\n        cat > /etc/wireguard/${SERVER_WG_NIC}_client.conf <<EOF\n[Interface]\nPrivateKey = ${CLIENT_PRIVATE_KEY}\nAddress = ${CLIENT_WG_IPV4}/24,${CLIENT_WG_IPV6}/64\nDNS = ${CLIENT_DNS_1},${CLIENT_DNS_2}\n\n[Peer]\nPublicKey = ${SERVER_PUBLIC_KEY}\nPresharedKey = ${CLIENT_PRE_SHARED_KEY}\nAllowedIPs = 0.0.0.0/0,::/0\nEndpoint = ${SERVER_PUB_IPV4}:${SERVER_WG_PORT}\nEOF\n    else\n        cat > /etc/wireguard/${SERVER_WG_NIC}_client.conf <<EOF\n[Interface]\nPrivateKey = ${CLIENT_PRIVATE_KEY}\nAddress = ${CLIENT_WG_IPV4}/24\nDNS = ${CLIENT_DNS_1},${CLIENT_DNS_2}\n\n[Peer]\nPublicKey = ${SERVER_PUBLIC_KEY}\nPresharedKey = ${CLIENT_PRE_SHARED_KEY}\nAllowedIPs = 0.0.0.0/0\nEndpoint = ${SERVER_PUB_IPV4}:${SERVER_WG_PORT}\nEOF\n    fi\n    chmod 600 /etc/wireguard/${SERVER_WG_NIC}_client.conf\n}\n\n# Generate a QR Code picture with default client interface\ngenerate_qr() {\n    _info \"Generate a QR Code picture with client interface\"\n    _error_detect \"qrencode -s8 -o /etc/wireguard/${SERVER_WG_NIC}_client.png < /etc/wireguard/${SERVER_WG_NIC}_client.conf\"\n}\n\n# Enable IP forwarding\nenable_ip_forward() {\n    _info \"Enable IP forward\"\n    sed -i '/net.ipv4.ip_forward/d' /etc/sysctl.conf\n    [ -n \"${SERVER_PUB_IPV6}\" ] && sed -i '/net.ipv6.conf.all.forwarding/d' /etc/sysctl.conf\n    echo \"net.ipv4.ip_forward = 1\" >> /etc/sysctl.conf\n    [ -n \"${SERVER_PUB_IPV6}\" ] && echo \"net.ipv6.conf.all.forwarding = 1\" >> /etc/sysctl.conf\n    sysctl -p >/dev/null 2>&1\n}\n\n# Set firewall rules\nset_firewall() {\n    _info \"Setting firewall rules\"\n    if _exists \"firewall-cmd\"; then\n        if firewall-cmd --state > /dev/null 2>&1; then\n            default_zone=\"$(firewall-cmd --get-default-zone)\"\n            if [ \"$(firewall-cmd --zone=${default_zone} --query-masquerade)\" = \"no\" ]; then\n                _error_detect \"firewall-cmd --permanent --zone=${default_zone} --add-masquerade\"\n            fi\n            if ! firewall-cmd --list-ports | grep -qw \"${SERVER_WG_PORT}/udp\"; then\n                _error_detect \"firewall-cmd --permanent --zone=${default_zone} --add-port=${SERVER_WG_PORT}/udp\"\n            fi\n            _error_detect \"firewall-cmd --reload\"\n        else\n            _warn \"Firewalld service unit is not running, please start it and manually set\"\n            _warn \"Maybe you need to run these commands like below:\"\n            _warn \"systemctl start firewalld\"\n            _warn \"firewall-cmd --permanent --zone=public --add-masquerade\"\n            _warn \"firewall-cmd --permanent --zone=public --add-port=${SERVER_WG_PORT}/udp\"\n            _warn \"firewall-cmd --reload\"\n        fi\n    else\n        if _exists \"iptables\"; then\n            iptables -A INPUT -p udp --dport ${SERVER_WG_PORT} -j ACCEPT\n            iptables -A FORWARD -i ${SERVER_WG_NIC} -j ACCEPT\n            iptables -t nat -A POSTROUTING -o ${SERVER_PUB_NIC} -j MASQUERADE\n            iptables-save > /etc/iptables.rules\n            if [ -d \"/etc/network/if-up.d\" ]; then\n                cat > /etc/network/if-up.d/iptables <<EOF\n#!/bin/sh\n/sbin/iptables-restore < /etc/iptables.rules\nEOF\n                chmod +x /etc/network/if-up.d/iptables\n            fi\n        fi\n        if _exists \"ip6tables\"; then\n            ip6tables -A INPUT -p udp --dport ${SERVER_WG_PORT} -j ACCEPT\n            ip6tables -A FORWARD -i ${SERVER_WG_NIC} -j ACCEPT\n            ip6tables -t nat -A POSTROUTING -o ${SERVER_PUB_NIC} -j MASQUERADE\n            ip6tables-save > /etc/ip6tables.rules\n            if [ -d \"/etc/network/if-up.d\" ]; then\n                cat > /etc/network/if-up.d/ip6tables <<EOF\n#!/bin/sh\n/sbin/ip6tables-restore < /etc/ip6tables.rules\nEOF\n                chmod +x /etc/network/if-up.d/ip6tables\n            fi\n        fi\n    fi\n}\n\n# WireGuard installation completed\ninstall_completed() {\n    _info \"Starting WireGuard via wg-quick for ${SERVER_WG_NIC}\"\n    _error_detect \"systemctl daemon-reload\"\n    _error_detect \"systemctl start wg-quick@${SERVER_WG_NIC}\"\n    _error_detect \"systemctl enable wg-quick@${SERVER_WG_NIC}\"\n    _info \"WireGuard VPN Server installation completed\"\n    _info \"\"\n    _info \"WireGuard VPN default client file is below:\"\n    _info \"$(_green \"/etc/wireguard/${SERVER_WG_NIC}_client.conf\")\"\n    _info \"\"\n    _info \"WireGuard VPN default client QR Code is below:\"\n    _info \"$(_green \"/etc/wireguard/${SERVER_WG_NIC}_client.png\")\"\n    _info \"\"\n    _info \"Download and scan this QR Code with your device\"\n    _info \"Welcome to visit: https://teddysun.com/554.html\"\n    _info \"Enjoy it\"\n}\n\nadd_client() {\n    if ! _is_installed; then\n        _red \"WireGuard was not installed, please install it and try again\\n\" && exit 1\n    fi\n    default_server_if=\"/etc/wireguard/${SERVER_WG_NIC}.conf\"\n    default_client_if=\"/etc/wireguard/${SERVER_WG_NIC}_client.conf\"\n    [ ! -s \"${default_server_if}\" ] && echo \"The default server interface ($(_red ${default_server_if})) does not exists\" && exit 1\n    [ ! -s \"${default_client_if}\" ] && echo \"The default client interface ($(_red ${default_client_if})) does not exists\" && exit 1\n    while true; do\n        read -p \"Please enter a client name (for example: wg1):\" client\n        if [ -z \"${client}\" ]; then\n            _red \"Client name can not be empty\\n\"\n        else\n            new_client_if=\"/etc/wireguard/${client}_client.conf\"\n            if [ \"${client}\" = \"${SERVER_WG_NIC}\" ]; then\n                echo \"The default client ($(_yellow ${client})) already exists. Please re-enter it\"\n            elif [ -s \"${new_client_if}\" ]; then\n                echo \"The client ($(_yellow ${client})) already exists. Please re-enter it\"\n            else\n                break\n            fi\n        fi\n    done\n    # Get information from default interface file\n    client_files=($(find /etc/wireguard/ -name \"*_client*\" | sort))\n    client_ipv4=()\n    client_ipv6=()\n    for ((i=0; i<${#client_files[@]}; i++)); do\n        tmp_ipv4=\"$(grep -w \"Address\" ${client_files[$i]} | awk '{print $3}' | cut -d\\/ -f1 )\"\n        tmp_ipv6=\"$(grep -w \"Address\" ${client_files[$i]} | awk '{print $3}' | awk -F, '{print $2}' | cut -d\\/ -f1 )\"\n        client_ipv4=(${client_ipv4[@]} ${tmp_ipv4})\n        client_ipv6=(${client_ipv6[@]} ${tmp_ipv6})\n    done\n    # Sort array\n    client_ipv4_sorted=($(printf '%s\\n' \"${client_ipv4[@]}\" | sort -V))\n    index=$(expr ${#client_ipv4[@]} - 1)\n    last_ip=$(echo ${client_ipv4_sorted[$index]} | cut -d. -f4)\n    issue_ip_last=$(expr ${last_ip} + 1)\n    [ ${issue_ip_last} -gt 254 ] && _red \"Too many clients, IP addresses might be not enough\\n\" && exit 1\n    ipv4_comm=$(echo ${client_ipv4[$index]} | cut -d. -f1-3)\n    ipv6_comm=$(echo ${client_ipv6[$index]} | awk -F: '{print $1\":\"$2\":\"$3\":\"$4}')\n    CLIENT_PRIVATE_KEY=\"$(wg genkey)\"\n    CLIENT_PUBLIC_KEY=\"$(echo ${CLIENT_PRIVATE_KEY} | wg pubkey)\"\n    SERVER_PUBLIC_KEY=\"$(grep -w \"PublicKey\" ${default_client_if} | awk '{print $3}')\"\n    CLIENT_ENDPOINT=\"$(grep -w \"Endpoint\" ${default_client_if} | awk '{print $3}')\"\n    CLIENT_PRE_SHARED_KEY=\"$(grep -w \"PresharedKey\" ${default_client_if} | awk '{print $3}')\"\n    CLIENT_WG_IPV4=\"${ipv4_comm}.${issue_ip_last}\"\n    CLIENT_WG_IPV6=\"${ipv6_comm}:${issue_ip_last}\"\n    # Create a new client interface\n    if [ -n \"${SERVER_PUB_IPV6}\" ]; then\n        cat > ${new_client_if} <<EOF\n[Interface]\nPrivateKey = ${CLIENT_PRIVATE_KEY}\nAddress = ${CLIENT_WG_IPV4}/24,${CLIENT_WG_IPV6}/64\nDNS = ${CLIENT_DNS_1},${CLIENT_DNS_2}\n\n[Peer]\nPublicKey = ${SERVER_PUBLIC_KEY}\nPresharedKey = ${CLIENT_PRE_SHARED_KEY}\nAllowedIPs = 0.0.0.0/0,::/0\nEndpoint = ${CLIENT_ENDPOINT}\nEOF\n        # Add a new client to default server interface\n        cat >> ${default_server_if} <<EOF\n\n[Peer]\nPublicKey = ${CLIENT_PUBLIC_KEY}\nAllowedIPs = ${CLIENT_WG_IPV4}/32,${CLIENT_WG_IPV6}/128\nPresharedKey = ${CLIENT_PRE_SHARED_KEY}\nPersistentKeepalive = 25\nEOF\n    else\n        cat > ${new_client_if} <<EOF\n[Interface]\nPrivateKey = ${CLIENT_PRIVATE_KEY}\nAddress = ${CLIENT_WG_IPV4}/24\nDNS = ${CLIENT_DNS_1},${CLIENT_DNS_2}\n\n[Peer]\nPublicKey = ${SERVER_PUBLIC_KEY}\nPresharedKey = ${CLIENT_PRE_SHARED_KEY}\nAllowedIPs = 0.0.0.0/0\nEndpoint = ${CLIENT_ENDPOINT}\nEOF\n        cat >> ${default_server_if} <<EOF\n\n[Peer]\nPublicKey = ${CLIENT_PUBLIC_KEY}\nAllowedIPs = ${CLIENT_WG_IPV4}/32\nPresharedKey = ${CLIENT_PRE_SHARED_KEY}\nPersistentKeepalive = 25\nEOF\n    fi\n    chmod 600 ${new_client_if}\n    echo \"Add a WireGuard client ($(_green ${client})) completed\"\n    systemctl restart wg-quick@${SERVER_WG_NIC}\n    # Generate a new QR Code picture\n    qrencode -s8 -o /etc/wireguard/${client}_client.png < ${new_client_if}\n    echo \"Generate a QR Code picture with new client ($(_green ${client})) completed\"\n    echo\n    echo \"WireGuard VPN new client ($(_green ${client})) file is below:\"\n    _green \"/etc/wireguard/${client}_client.conf\\n\"\n    echo\n    echo \"WireGuard VPN new client ($(_green ${client})) QR Code is below:\"\n    _green \"/etc/wireguard/${client}_client.png\\n\"\n    echo \"Download and scan this QR Code with your device, enjoy it\"\n}\n\nremove_client() {\n    if ! _is_installed; then\n        _red \"WireGuard was not installed, please install it and try again\\n\" && exit 1\n    fi\n    default_server_if=\"/etc/wireguard/${SERVER_WG_NIC}.conf\"\n    [ ! -s \"${default_server_if}\" ] && echo \"The default server interface ($(_red ${default_server_if})) does not exists\" && exit 1\n    while true; do\n        read -p \"Please enter a client name you want to delete it (for example: wg1):\" client\n        if [ -z \"${client}\" ]; then\n            _red \"Client name can not be empty\\n\"\n        else\n            if [ \"${client}\" = \"${SERVER_WG_NIC}\" ]; then\n                echo \"The default client ($(_yellow ${client})) can not be delete\"\n            else\n                break\n            fi\n        fi\n    done\n    client_if=\"/etc/wireguard/${client}_client.conf\"\n    [ ! -s \"${client_if}\" ] && echo \"The client file ($(_red ${client_if})) does not exists\" && exit 1\n    tmp_tag=\"$(grep -w \"Address\" ${client_if} | awk '{print $3}' | cut -d\\/ -f1 )\"\n    [ -n \"${tmp_tag}\" ] && sed -i '/'\"$tmp_tag\"'/,+1d;:a;1,3!{P;$!N;D};N;ba' ${default_server_if}\n    # Delete client interface file\n    rm -f ${client_if}\n    [ -s \"/etc/wireguard/${client}_client.png\" ] && rm -f /etc/wireguard/${client}_client.png\n    systemctl restart wg-quick@${SERVER_WG_NIC}\n    echo \"The client name ($(_green ${client})) has been deleted\"\n}\n\nlist_clients() {\n    if ! _is_installed; then\n        _red \"WireGuard was not installed, please install it and try again\\n\" && exit 1\n    fi\n    default_server_if=\"/etc/wireguard/${SERVER_WG_NIC}.conf\"\n    [ ! -s \"${default_server_if}\" ] && echo \"The default server interface ($(_red ${default_server_if})) does not exists\" && exit 1\n    local line=\"+-------------------------------------------------------------------------+\\n\"\n    local string=%-35s\n    printf \"${line}|${string} |${string} |\\n${line}\" \" Client Interface\" \" Client's IP\"\n    client_files=($(find /etc/wireguard/ -name \"*_client*\" | sort))\n    ips=($(grep -w \"AllowedIPs\" ${default_server_if} | awk '{print $3}'))\n    [ ${#client_files[@]} -ne ${#ips[@]} ] && echo \"One or more client interface file is missing in /etc/wireguard\" && exit 1\n    for ((i=0; i<${#ips[@]}; i++)); do\n        tmp_ipv4=\"$(echo ${ips[$i]} | cut -d\\/ -f1)\"\n        for ((j=0; j<${#client_files[@]}; j++)); do\n            if grep -qw \"${tmp_ipv4}\" \"${client_files[$j]}\"; then\n                printf \"|${string} |${string} |\\n\" \" ${client_files[$j]}\" \" ${ips[$i]}\"\n                break\n            fi\n        done\n    done\n    printf ${line}\n}\n\ncheck_version() {\n    _is_installed\n    rt=$?\n    if [ ${rt} -eq 0 ]; then\n        _exists \"modinfo\" && installed_wg_ver=\"$(modinfo -F version wireguard)\"\n        [ -n \"${installed_wg_ver}\" ] && echo \"wireguard-dkms version : $(_green ${installed_wg_ver})\"\n        installed_wg_tools_ver=\"$(wg --version | awk '{print $2}' | grep -oE '[0-9.]+')\"\n        [ -n \"${installed_wg_tools_ver}\" ] && echo \"wireguard-tools version: $(_green ${installed_wg_tools_ver})\"\n        return 0\n    elif [ ${rt} -eq 1 ]; then\n        _red \"WireGuard tools is exist, but WireGuard module does not exists\\n\" && return 1\n    elif [ ${rt} -eq 2 ]; then\n        _red \"WireGuard module is exist, but WireGuard tools does not exists\\n\" && return 2\n    elif [ ${rt} -eq 3 ]; then\n        _red \"WireGuard was not installed\\n\" && return 3\n    fi\n}\n\nshow_help() {\n    printf \"\nUsage  : $0 [Options]\nOptions:\n        -h, --help       Print this help text and exit\n        -r, --repo       Install WireGuard from repository\n        -s, --source     Install WireGuard from source\n        -u, --update     Upgrade WireGuard from source\n        -v, --version    Print WireGuard version if installed\n        -a, --add        Add a WireGuard client\n        -d, --del        Delete a WireGuard client\n        -l, --list       List all WireGuard client's IP\n        -n, --uninstall  Uninstall WireGuard\n\n\"\n}\n\ninstall_from_repo() {\n    _is_installed\n    rt=$?\n    if [ ${rt} -eq 0 ]; then\n        _red \"WireGuard was already installed\\n\" && exit 0\n    fi\n    check_os\n    if check_kernel_version; then\n        if [ ${rt} -eq 2 ]; then\n            install_wg_3\n        else\n            _error \"WireGuard module does not exists, please check your kernel\"\n        fi\n    else\n        install_wg_1\n    fi\n    create_server_if\n    create_client_if\n    generate_qr\n    enable_ip_forward\n    set_firewall\n    install_completed\n}\n\ninstall_from_source() {\n    _is_installed\n    rt=$?\n    if [ ${rt} -eq 0 ]; then\n        _red \"WireGuard was already installed\\n\" && exit 0\n    fi\n    check_os\n    if check_kernel_version; then\n        if [ ${rt} -eq 2 ]; then\n            install_wg_4\n        else\n            _error \"WireGuard module does not exists, please check your kernel\"\n        fi\n    else\n        install_wg_2\n    fi\n    create_server_if\n    create_client_if\n    generate_qr\n    enable_ip_forward\n    set_firewall\n    install_completed\n}\n\nupdate_from_source() {\n    if check_version > /dev/null 2>&1; then\n        restart_flg=0\n        get_latest_module_ver\n        wg_ver=\"$(echo ${wireguard_ver} | grep -oE '[0-9.]+')\"\n        _info \"wireguard-dkms version: $(_green ${installed_wg_ver})\"\n        _info \"wireguard-dkms latest version: $(_green ${wg_ver})\"\n        if check_kernel_version; then\n            _info \"wireguard-dkms has been merged into Linux >= 5.6 and therefore this compatibility module is no longer required\"\n        else\n            if _version_gt \"${wg_ver}\" \"${installed_wg_ver}\"; then\n                _info \"Starting upgrade wireguard-dkms\"\n                install_wg_module\n                _info \"Update wireguard-dkms completed\"\n                restart_flg=1\n            else\n                _info \"There is no update available for wireguard-dkms\"\n            fi\n        fi\n        get_latest_tools_ver\n        wg_tools_ver=\"$(echo ${wireguard_tools_ver} | grep -oE '[0-9.]+')\"\n        _info \"wireguard-tools version: $(_green ${installed_wg_tools_ver})\"\n        _info \"wireguard-tools latest version: $(_green ${wg_tools_ver})\"\n        if _version_gt \"${wg_tools_ver}\" \"${installed_wg_tools_ver}\"; then\n            _info \"Starting upgrade wireguard-tools\"\n            install_wg_tools\n            _info \"Update wireguard-tools completed\"\n            restart_flg=1\n        else\n            _info \"There is no update available for wireguard-tools\"\n        fi\n        if [ ${restart_flg} -eq 1 ]; then\n            _error_detect \"systemctl daemon-reload\"\n            _error_detect \"systemctl restart wg-quick@${SERVER_WG_NIC}\"\n        fi\n    else\n        _red \"WireGuard was not installed, maybe you need to install it at first\\n\"\n    fi\n}\n\nmain() {\n    action=\"$1\"\n    [ -z \"${action}\" ] && show_help && exit 0\n    case \"${action}\" in\n        -h|--help)\n            show_help\n            ;;\n        -r|--repo)\n            install_from_repo\n            ;;\n        -s|--source)\n            install_from_source\n            ;;\n        -u|--update)\n            update_from_source\n            ;;\n        -v|--version)\n            check_version\n            ;;\n        -a|--add)\n            add_client\n            ;;\n        -d|--del)\n            remove_client\n            ;;\n        -l|--list)\n            list_clients\n            ;;\n        -n|--uninstall)\n            uninstall_wg\n            ;;\n        *)\n            show_help\n            ;;\n    esac\n}\n\nSERVER_PUB_IPV4=\"${VPN_SERVER_PUB_IPV4:-$(_ipv4)}\"\nSERVER_PUB_IPV6=\"${VPN_SERVER_PUB_IPV6:-$(_ipv6)}\"\nSERVER_PUB_NIC=\"${VPN_SERVER_PUB_NIC:-$(_nic)}\"\nSERVER_WG_NIC=\"${VPN_SERVER_WG_NIC:-wg0}\"\nSERVER_WG_IPV4=\"${VPN_SERVER_WG_IPV4:-10.88.88.1}\"\nSERVER_WG_IPV6=\"${VPN_SERVER_WG_IPV6:-fd88:88:88::1}\"\nSERVER_WG_PORT=\"${VPN_SERVER_WG_PORT:-$(_port)}\"\nCLIENT_WG_IPV4=\"${VPN_CLIENT_WG_IPV4:-10.88.88.2}\"\nCLIENT_WG_IPV6=\"${VPN_CLIENT_WG_IPV6:-fd88:88:88::2}\"\nCLIENT_DNS_1=\"${VPN_CLIENT_DNS_1:-1.1.1.1}\"\nCLIENT_DNS_2=\"${VPN_CLIENT_DNS_2:-8.8.8.8}\"\n\nmain \"$@\"\n"
        }
      ]
    }
  ]
}