{
  "metadata": {
    "timestamp": 1736568856498,
    "page": 47,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "thoughtbot/dotfiles",
      "stars": 7997,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0166015625,
          "content": "!bin\nvim/bundle/\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.009765625,
          "content": "@purinkle\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.166015625,
          "content": "# Code of conduct\n\nBy participating in this project, you agree to abide by the\n[thoughtbot code of conduct][1].\n\n[1]: https://thoughtbot.com/open-source-code-of-conduct\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0654296875,
          "content": "LICENSE\n\nThe MIT License\n\nCopyright (c) 2009-2016 thoughtbot, inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README-ES.md",
          "type": "blob",
          "size": 9.35546875,
          "content": "Los dotfiles de thoughtbot\n==========================\n\n![prompt](http://images.thoughtbot.com/thoughtbot-dotfiles-prompt.png)\n\nRequerimientos\n--------------\n\nEstablece zsh como tu shell de inicio de sesión:\n\n    chsh -s $(which zsh)\n\nInstalar\n--------\n\nClona en tu laptop:\n\n    git clone git@github.com:thoughtbot/dotfiles.git ~/dotfiles\n\n(o [haz un fork y mantenlo actualizado](http://robots.thoughtbot.com/keeping-a-github-fork-updated)).\n\nInstala [rcm](https://github.com/thoughtbot/rcm):\n\n    brew install rcm\n\nInstala los dotfiles:\n\n    env RCRC=$HOME/dotfiles/rcrc rcup\n\nDespués de la instalación inicial, puedes ejecutarlo sin establecer la variable `RCRC`\n(`rcup` establecerá un enlace simbólico (symlink) del repo `rcrc` hacia `~/.rcrc` para futuras\nejecuciones de `rcup`). [Ve el ejemplo](https://github.com/thoughtbot/dotfiles/blob/master/rcrc).\n\nEste comando creará enlaces simbólicos (symlinks) para los archivos de configuración en tu\ndirectorio principal.\n\nEstablecer la variable de entorno le dice a `rcup` que use las opciones de\nconfiguración preestablecidas:\n\n* Excluye los archivos `README.md`, `README-ES.md` y `LICENSE`, que son parte\n  del repositorio `dotfiles`, pero no necesitan enlazarse simbólicamente.\n* Le da precedencia a las modificaciones personales que por defecto están en\n  `~/dotfiles-local`\n* Por favor configura el archivo `rcrc` en caso de que quieras hacer\n  modificaciones personales en un directorio distinto.\n\n\nActualizar\n----------\n\nDe vez en cuando deberías descargar las actualizaciones de estos dotfiles, y ejectuar\n\n    rcup\n\npara ligar cualquier nuevo archivo e instalar los nuevos plugins de vim. **Nota** _Debes_ ejecutar\n`rcup` después de descargar para asegurarte que todos los archivos de los plugins\nestén instalados adecuadamente. Puedes ejecutar `rcup` con seguridad muchas veces\npara actualizar pronto y muy seguido!\n\n\nHaz tus propias modificaciones\n------------------------------\n\nCrea un directorio para tus modificaciones personales:\n\n    mkdir ~/dotfiles-local\n\nPon tus modificaciones en `~/dotfiles-local` anexado con `.local`:\n\n* `~/dotfiles-local/aliases.local`\n* `~/dotfiles-local/git_template.local/*`\n* `~/dotfiles-local/gitconfig.local`\n* `~/dotfiles-local/psqlrc.local` (proveemos `.psqlrc.local` en blanco para prevenir que `psql`\n  arroje un error, pero debes sobreescribir el archivo con tu propia copia)\n* `~/dotfiles-local/tmux.conf.local`\n* `~/dotfiles-local/vimrc.local`\n* `~/dotfiles-local/vimrc.bundles.local`\n* `~/dotfiles-local/zshrc.local`\n* `~/dotfiles-local/zsh/configs/*`\n\nPor ejemplo, tu `~/dotfiles-local/aliases.local` tal vez se vea así:\n\n    # Productivity\n    alias todo='$EDITOR ~/.todo'\n\nTu `~/dotfiles-local/gitconfig.local` tal vez se vea así:\n\n    [alias]\n      l = log --pretty=colored\n    [pretty]\n      colored = format:%Cred%h%Creset %s %Cgreen(%cr) %C(bold blue)%an%Creset\n    [user]\n      name = Dan Croak\n      email = dan@thoughtbot.com\n\nTu `~/dotfiles-local/vimrc.local` tal vez se vea así:\n\n    \" Color scheme\n    colorscheme github\n    highlight NonText guibg=#060606\n    highlight Folded  guibg=#0A0A0A guifg=#9090D0\n\nSi prefieres prevenir la instalación de un plugin predeterminado de vim en `.vimrc.bundles`,\npuedes ignorarlo sacándolo con `UnPlug` en tu `~/.vimrc.bundles.local`.\n\n    \" Don't install vim-scripts/tComment\n    UnPlug 'tComment'\n\n`UnPlug` puede ser usado para instalar tu propio fork de un plugin o para instalar\nun plugin compartido con opciones personalizadas distintas.\n\n    \" Only load vim-coffee-script if a Coffeescript buffer is created\n    UnPlug 'vim-coffee-script'\n    Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }\n\n    \" Use a personal fork of vim-run-interactive\n    UnPlug 'vim-run-interactive'\n    Plug '$HOME/plugins/vim-run-interactive'\n\nPara extender tus `git` hooks, crea scripts ejecutables en\n`~/dotfiles-local/git_template.local/hooks/*` files.\n\nTu `~/dotfiles-local/zshrc.local` tal vez se vea así:\n\n    # load pyenv if available\n    if command -v pyenv &>/dev/null ; then\n      eval \"$(pyenv init -)\"\n    fi\n\nTu `~/dotfiles-local/vimrc.bundles.local` tal vez se vea así:\n\n    Plug 'Lokaltog/vim-powerline'\n    Plug 'stephenmckinney/vim-solarized-powerline'\n\nConfiguraciones de zsh\n----------------------\n\nConfiguraciones adicionales para zsh pueden ir en el directorio `~/dotfiles-local/zsh/configs`. Este\ntiene dos subdirectorios especiales: `pre` para archivos que deben ser cargados primero y `post`\npara archivos que deben cargarse al final.\n\nPor ejemplo, `~/dotfiles-local/zsh/configs/pre/virtualenv` hace uso de varias características\nde shell que tal vez se vean afectadas por tu configuración, por lo tanto cárgalo primero:\n\n    # Load the virtualenv wrapper\n    . /usr/local/bin/virtualenvwrapper.sh\n\nEstablecer una vinculación clave puede ocurrir en `~/dotfiles-local/zsh/configs/keys`:\n\n    # Grep anywhere with ^G\n    bindkey -s '^G' ' | grep '\n\nAlgunos cambios, como `chpwd`, deben ocurrir en `~/dotfiles-local/zsh/configs/post/chpwd`:\n\n    # Show the entries in a directory whenever you cd in\n    function chpwd {\n      ls\n    }\n\nEste directorio está a la mano para combinar dotfiles de múltiples equipos; un equipo\npuede agregar el archivo `virtualenv`, otro el archivo `keys` y un tercero el archivo `chpwd`.\n\nEl archivo `~/dotfiles-local/zshrc.local` se carga después de `~/dotfiles-local/zsh/configs`.\n\nConfiguraciones de vim\n----------------------\n\nSimilar al directorio de configuración para zsh descrito arriba, vim\nautomáticamente descarga los archivos en el directorio `~/dotfiles-local/vim/plugin`. Sin embargo, este no\ntiene el mismo soporte para los subdirectorios `pre` ni `post` que tiene nuestro `zshrc`.\n\nEste es un ejemplo `~/dotfiles-local/vim/plugin/c.vim`. Se carga cada vez que inicia vim,\nsin importar de nombre del archivo:\n\n    # Indent C programs according to BSD style(9)\n    set cinoptions=:0,t0,+4,(4\n    autocmd BufNewFile,BufRead *.[ch] setlocal sw=0 ts=8 noet\n\n¿Qué viene incluido?\n-----------------\n\nConfiguración [vim](http://www.vim.org/):\n\n* [fzf](https://github.com/junegunn/fzf.vim) para hallazgo difuso de archivos/buffer/tags.\n* [Rails.vim](https://github.com/tpope/vim-rails) para una mejor navegación de la estructura\nde archivos de Rails via `gf` y `:A` (alterno), `:Rextract` parciales,`:Rinvert` migraciones, etc.\n* Ejecuta muchos tipos de pruebas [desde vim]([https://github.com/janko-m/vim-test)\n* Establece `<leader>` a un sólo espacio.\n* Navega entre los últimos dos archivos con espacio-espacio\n* Resaltado de sintaxis para Markdown, HTML, JavaScript, Ruby, Go, Elixir, y más.\n* Usa [Ag](https://github.com/ggreer/the_silver_searcher) en lugar de Grep cuando esté disponible.\n* Map `<leader>ct` para re-indexar [Exuberant Ctags](http://ctags.sourceforge.net/).\n* Usa [vim-mkdir](https://github.com/pbrisbin/vim-mkdir) para crear automáticamente directorios\n  no existentes antes de escribir el buffer.\n* Usa [vim-plug](https://github.com/junegunn/vim-plug) para administrar plugins.\n\n[tmux](http://robots.thoughtbot.com/a-tmux-crash-course)\nconfiguración:\n\n* Mejora la resolición del color.\n* Eliminar desechos administrativos(bombre de sesión, nombre de host, tiempo) en la barra de estatus.\n* Establece el prefijo a `Ctrl+s`\n* Suaviza el color de la barra de estatus de un verde chillante a un gris claro.\n\nConfiguración para [git](http://git-scm.com/):\n\n* Agrega el alias `create-branch` para crear branches.\n* Agrega el alias `delete-branch` para borrar branches.\n* Agrega el alias `merge-branch` para fusionar los branches en master.\n* Agrega el alias `up` para buscar y rebasar `origin/master` en el branch.\n  Usa `git up -i` para rebases interactivos.\n* Agrega el hook `post-{checkout,commit,merge}` para re-indexar tus ctags.\n* Agrega `pre-commit` y `prepare-commit-msg` stubs que delegan hacia tu\n  configuración local.\n* Agrega el alias `trust-bin` para anexar el `bin/` de un proyecto al `$PATH`.\n\nConfiguración de [Ruby](https://www.ruby-lang.org/en/):\n\n* Agrega binstubs confiables al `PATH`.\n* Descarga el administrador de versiones ASDF.\n\nAlias de Shell y scripts:\n\n* `b` para `bundle`.\n* `g` sin argumentos es `git status` y con argumentos funciona como `git`.\n* `migrate` para `bin/rails db:migrate db:rollback && bin/rails db:migrate db:test:prepare`.\n* `mcd` para crear un directorio e ir a él.\n* `replace foo bar **/*.rb` para buscar y reemplazar en una lista dada de archivos.\n* `tat` para adjuntar a una sesión de tmux llamada igual que el directorio actual.\n* `v` para `$VISUAL`.\n\nGracias\n-------\n\nGracias [Contribuyentes](https://github.com/thoughtbot/dotfiles/contributors)!\nAdemás, gracias a Corey Haines, Gary Bernhardt, y otros por compartir sus dotfiles\ny otros scripts de shell que derivaron en la inspiración para los artículos\nen este proyecto.\n\nLicencia\n--------\n\ndotfiles está protegida por copyright © 2009-2017 thoughtbot. Es un software gratis, y tal vez\nredistribuido bajo los términos especificados en el archivo de la [`LICENCIA`]\n[`LICENCIA`]: /LICENSE\n\nAcerca de thoughtbot\n--------------------\n\n![thoughtbot](http://presskit.thoughtbot.com/images/thoughtbot-logo-for-readmes.svg)\n\ndotfiles es mantenido y creado por thoughtbot, inc.\nLos nombres y los logos de thoughtbot son marca registrada de thoughtbot, inc.\n\nAmamos el código de fuente abiarta!\nVe [nuestros otros proyectos][community].\nEstamos [disponibles para ser contratados][hire].\n\n[community]: https://thoughtbot.com/community?utm_source=github\n[hire]: https://thoughtbot.com/hire-us?utm_source=github\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.26953125,
          "content": "# thoughtbot dotfiles\n\n![prompt](http://images.thoughtbot.com/thoughtbot-dotfiles-prompt.png)\n\n## Requirements\n\nSet zsh as your login shell:\n\n    chsh -s $(which zsh)\n\n## Install\n\nClone onto your laptop:\n\n    git clone git@github.com:thoughtbot/dotfiles.git ~/dotfiles\n\n(Or, [fork and keep your fork\nupdated](http://robots.thoughtbot.com/keeping-a-github-fork-updated)).\n\nInstall [rcm](https://github.com/thoughtbot/rcm):\n\n    brew install rcm\n\nInstall the dotfiles:\n\n    env RCRC=$HOME/dotfiles/rcrc rcup\n\nAfter the initial installation, you can run `rcup` without the one-time variable\n`RCRC` being set (`rcup` will symlink the repo's `rcrc` to `~/.rcrc` for future\nruns of `rcup`). [See\nexample](https://github.com/thoughtbot/dotfiles/blob/master/rcrc).\n\nThis command will create symlinks for config files in your home directory.\nSetting the `RCRC` environment variable tells `rcup` to use standard\nconfiguration options:\n\n- Exclude the `README.md`, `README-ES.md` and `LICENSE` files, which are part of\n  the `dotfiles` repository but do not need to be symlinked in.\n- Give precedence to personal overrides which by default are placed in\n  `~/dotfiles-local`\n- Please configure the `rcrc` file if you'd like to make personal\n  overrides in a different directory\n\n## Update\n\nFrom time to time you should pull down any updates to these dotfiles, and run\n\n    rcup\n\nto link any new files and install new vim plugins. **Note** You _must_ run\n`rcup` after pulling to ensure that all files in plugins are properly installed,\nbut you can safely run `rcup` multiple times so update early and update often!\n\n## Make your own customizations\n\nCreate a directory for your personal customizations:\n\n    mkdir ~/dotfiles-local\n\nPut your customizations in `~/dotfiles-local` appended with `.local`:\n\n- `~/dotfiles-local/aliases.local`\n- `~/dotfiles-local/git_template.local/*`\n- `~/dotfiles-local/gitconfig.local`\n- `~/dotfiles-local/psqlrc.local` (we supply a blank `.psqlrc.local` to prevent `psql` from\n  throwing an error, but you should overwrite the file with your own copy)\n- `~/dotfiles-local/tmux.conf.local`\n- `~/dotfiles-local/vimrc.local`\n- `~/dotfiles-local/vimrc.bundles.local`\n- `~/dotfiles-local/zshrc.local`\n- `~/dotfiles-local/zsh/configs/*`\n\nFor example, your `~/dotfiles-local/aliases.local` might look like this:\n\n    # Productivity\n    alias todo='$EDITOR ~/.todo'\n\nYour `~/dotfiles-local/gitconfig.local` might look like this:\n\n    [alias]\n      l = log --pretty=colored\n    [pretty]\n      colored = format:%Cred%h%Creset %s %Cgreen(%cr) %C(bold blue)%an%Creset\n    [user]\n      name = Dan Croak\n      email = dan@thoughtbot.com\n\nYour `~/dotfiles-local/vimrc.local` might look like this:\n\n    \" Color scheme\n    colorscheme github\n    highlight NonText guibg=#060606\n    highlight Folded  guibg=#0A0A0A guifg=#9090D0\n\nIf you don't wish to install a vim plugin from the default set of vim plugins in\n`.vimrc.bundles`, you can ignore the plugin by calling it out with `UnPlug` in\nyour `~/.vimrc.bundles.local`.\n\n    \" Don't install vim-scripts/tComment (notice the username of the plugin is\n    removed)\n\n    UnPlug 'tComment'\n\n`UnPlug` can be used to install your own fork of a plugin or to install a shared\nplugin with different custom options.\n\n    \" Only load vim-coffee-script if a Coffeescript buffer is created\n    UnPlug 'vim-coffee-script'\n    Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }\n\n    \" Use a personal fork of vim-run-interactive\n    UnPlug 'vim-run-interactive'\n    Plug '$HOME/plugins/vim-run-interactive'\n\nTo extend your `git` hooks, create executable scripts in\n`~/dotfiles-local/git_template.local/hooks/*` files.\n\nYour `~/dotfiles-local/zshrc.local` might look like this:\n\n    # load pyenv if available\n    if which pyenv &>/dev/null ; then\n      eval \"$(pyenv init -)\"\n    fi\n\nYour `~/dotfiles-local/vimrc.bundles.local` might look like this:\n\n    Plug 'Lokaltog/vim-powerline'\n    Plug 'stephenmckinney/vim-solarized-powerline'\n\n## zsh Configurations\n\nAdditional zsh configuration can go under the `~/dotfiles-local/zsh/configs` directory. This\nhas two special subdirectories: `pre` for files that must be loaded first, and\n`post` for files that must be loaded last.\n\nFor example, `~/dotfiles-local/zsh/configs/pre/virtualenv` makes use of various shell\nfeatures which may be affected by your settings, so load it first:\n\n    # Load the virtualenv wrapper\n    . /usr/local/bin/virtualenvwrapper.sh\n\nSetting a key binding can happen in `~/dotfiles-local/zsh/configs/keys`:\n\n    # Grep anywhere with ^G\n    bindkey -s '^G' ' | grep '\n\nSome changes, like `chpwd`, must happen in `~/dotfiles-local/zsh/configs/post/chpwd`:\n\n    # Show the entries in a directory whenever you cd in\n    function chpwd {\n      ls\n    }\n\nThis directory is handy for combining dotfiles from multiple teams; one team\ncan add the `virtualenv` file, another `keys`, and a third `chpwd`.\n\nThe `~/dotfiles-local/zshrc.local` is loaded after `~/dotfiles-local/zsh/configs`.\n\n## vim Configurations\n\nSimilarly to the zsh configuration directory as described above, vim\nautomatically loads all files in the `~/dotfiles-local/vim/plugin` directory. This does not\nhave the same `pre` or `post` subdirectory support that our `zshrc` has.\n\nThis is an example `~/dotfiles-local/vim/plugin/c.vim`. It is loaded every time vim starts,\nregardless of the file name:\n\n    # Indent C programs according to BSD style(9)\n    set cinoptions=:0,t0,+4,(4\n    autocmd BufNewFile,BufRead *.[ch] setlocal sw=0 ts=8 noet\n\n## What's in it?\n\n[vim](http://www.vim.org/) configuration:\n\n- [fzf](https://github.com/junegunn/fzf.vim) for fuzzy file/buffer/tag finding.\n- [Rails.vim](https://github.com/tpope/vim-rails) for enhanced navigation of\n  Rails file structure via `gf` and `:A` (alternate), `:Rextract` partials,\n  `:Rinvert` migrations, etc.\n- Run many kinds of tests [from vim]([https://github.com/janko-m/vim-test)\n- Set `<leader>` to a single space.\n- Switch between the last two files with space-space.\n- Syntax highlighting for Markdown, HTML, JavaScript, Ruby, Go, Elixir, more.\n- Use [Ag](https://github.com/ggreer/the_silver_searcher) instead of Grep when\n  available.\n- Map `<leader>ct` to re-index ctags.\n- Use [vim-mkdir](https://github.com/pbrisbin/vim-mkdir) for automatically\n  creating non-existing directories before writing the buffer.\n- Use [vim-plug](https://github.com/junegunn/vim-plug) to manage plugins.\n\n[tmux](http://robots.thoughtbot.com/a-tmux-crash-course)\nconfiguration:\n\n- Improve color resolution.\n- Remove administrative debris (session name, hostname, time) in status bar.\n- Set prefix to `Ctrl+s`\n- Soften status bar color from harsh green to light gray.\n\n[git](http://git-scm.com/) configuration:\n\n- Adds a `co-upstream-pr $PR_NUMBER $LOCAL_BRANCH_NAME` subcommand to checkout remote upstream branch into a local branch.\n- Adds a `create-branch` alias to create feature branches.\n- Adds a `delete-branch` alias to delete feature branches.\n- Adds a `merge-branch` alias to merge feature branches into master.\n- Adds an `up` alias to fetch and rebase `origin/master` into the feature\n  branch. Use `git up -i` for interactive rebases.\n- Adds `post-{checkout,commit,merge}` hooks to re-index your ctags.\n- Adds `pre-commit` and `prepare-commit-msg` stubs that delegate to your local\n  config.\n- Adds `trust-bin` alias to append a project's `bin/` directory to `$PATH`.\n\n[Ruby](https://www.ruby-lang.org/en/) configuration:\n\n- Add trusted binstubs to the `PATH`.\n- Load the ASDF version manager.\n\n[Rails](https://rubyonrails.org)\n\n- Adds [railsrc][] with the following options to integrate with [Suspenders][].\n\n```\n--database=postgresql\n--skip-test\n-m=https://raw.githubusercontent.com/thoughtbot/suspenders/main/lib/install/web.rb\n```\n\nIf you want to skip this file altogether, run `rails new my_app --no_rc`.\n\n[railsrc]: https://github.com/rails/rails/blob/7f7f9df8641e35a076fe26bd097f6a1b22cb4e2d/railties/lib/rails/generators/rails/app/USAGE#L5C1-L7\n[Suspenders]: https://github.com/thoughtbot/suspenders\n\nShell aliases and scripts:\n\n- `...` for quicker navigation to the parent's parent directory.\n- `b` for `bundle`.\n- `g` with no arguments is `git status` and with arguments acts like `git`.\n- `migrate` for `bin/rails db:migrate db:rollback && bin/rails db:migrate db:test:prepare`.\n- `mcd` to make a directory and change into it.\n- `replace foo bar **/*.rb` to find and replace within a given list of files.\n- `tat` to attach to tmux session named the same as the current directory.\n- `v` for `$VISUAL`.\n\n## Thanks\n\nThank you, [contributors](https://github.com/thoughtbot/dotfiles/contributors)!\nAlso, thank you to Corey Haines, Gary Bernhardt, and others for sharing your\ndotfiles and other shell scripts from which we derived inspiration for items\nin this project.\n\n## License\n\ndotfiles is copyright © 2009 thoughtbot. It is free software, and may be\nredistributed under the terms specified in the [`LICENSE`] file.\n\n[`LICENSE`]: /LICENSE\n\n<!-- START /templates/footer.md -->\n## About thoughtbot\n\n![thoughtbot](https://thoughtbot.com/thoughtbot-logo-for-readmes.svg)\n\nThis repo is maintained and funded by thoughtbot, inc.\nThe names and logos for thoughtbot are trademarks of thoughtbot, inc.\n\nWe love open source software!\nSee [our other projects][community].\nWe are [available for hire][hire].\n\n[community]: https://thoughtbot.com/community?utm_source=github\n[hire]: https://thoughtbot.com/hire-us?utm_source=github\n\n\n<!-- END /templates/footer.md -->\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.64453125,
          "content": "<!-- START /templates/security.md -->\n# Security Policy\n\n## Supported Versions\n\nOnly the the latest version of this project is supported at a given time. If\nyou find a security issue with an older version, please try updating to the\nlatest version first.\n\nIf for some reason you can't update to the latest version, please let us know\nyour reasons so that we can have a better understanding of your situation.\n\n## Reporting a Vulnerability\n\nFor security inquiries or vulnerability reports, visit\n<https://thoughtbot.com/security>.\n\nIf you have any suggestions to improve this policy, visit <https://thoughtbot.com/security>.\n<!-- END /templates/security.md -->\n"
        },
        {
          "name": "agignore",
          "type": "blob",
          "size": 0.0078125,
          "content": "/vendor\n"
        },
        {
          "name": "aliases",
          "type": "blob",
          "size": 0.525390625,
          "content": "# Unix\nalias ll=\"ls -al\"\nalias ln=\"ln -v\"\nalias mkdir=\"mkdir -p\"\nalias e=\"$EDITOR\"\nalias v=\"$VISUAL\"\n\n# Bundler\nalias b=\"bundle\"\n\n# Rails\nalias migrate=\"bin/rails db:migrate db:rollback && bin/rails db:migrate db:test:prepare\"\nalias s=\"rspec\"\n\n# Pretty print the path\nalias path='echo $PATH | tr -s \":\" \"\\n\"'\n\n# Easier navigation: ..., ...., ....., and -\nalias ...=\"cd ../..\"\nalias ....=\"cd ../../..\"\nalias .....=\"cd ../../../..\"\nalias -- -=\"cd -\"\n\n# Include custom aliases\nif [[ -f ~/.aliases.local ]]; then\n  source ~/.aliases.local\nfi\n"
        },
        {
          "name": "asdfrc",
          "type": "blob",
          "size": 0.025390625,
          "content": "legacy_version_file = yes\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "ctags",
          "type": "blob",
          "size": 1.6767578125,
          "content": "--regex-ruby=/(^|[:;])[ \\t]*([A-Z][[:alnum:]_]+) *=/\\2/c,class,constant/\n--regex-ruby=/^[ \\t]*attr_(reader|writer|accessor) (:[a-z0-9_]+, )*:([a-z0-9_]+)/\\3/A,attr/\n--langdef=Elixir\n--langmap=Elixir:.ex.exs\n--regex-Elixir=/^[ \\t]*def(p?)[ \\t]+([a-z_][a-zA-Z0-9_?!]*)/\\2/f,functions,functions (def ...)/\n--regex-Elixir=/^[ \\t]*defcallback[ \\t]+([a-z_][a-zA-Z0-9_?!]*)/\\1/c,callbacks,callbacks (defcallback ...)/\n--regex-Elixir=/^[ \\t]*defdelegate[ \\t]+([a-z_][a-zA-Z0-9_?!]*)/\\1/d,delegates,delegates (defdelegate ...)/\n--regex-Elixir=/^[ \\t]*defexception[ \\t]+([A-Z][a-zA-Z0-9_]*\\.)*([A-Z][a-zA-Z0-9_?!]*)/\\2/e,exceptions,exceptions (defexception ...)/\n--regex-Elixir=/^[ \\t]*defimpl[ \\t]+([A-Z][a-zA-Z0-9_]*\\.)*([A-Z][a-zA-Z0-9_?!]*)/\\2/i,implementations,implementations (defimpl ...)/\n--regex-Elixir=/^[ \\t]*defmacro(p?)[ \\t]+([a-z_][a-zA-Z0-9_?!]*)\\(/\\2/a,macros,macros (defmacro ...)/\n--regex-Elixir=/^[ \\t]*defmacro(p?)[ \\t]+([a-zA-Z0-9_?!]+)?[ \\t]+([^ \\tA-Za-z0-9_]+)[ \\t]*[a-zA-Z0-9_!?!]/\\3/o,operators,operators (e.g. \"defmacro a <<< b\")/\n--regex-Elixir=/^[ \\t]*defmodule[ \\t]+([A-Z][a-zA-Z0-9_]*\\.)*([A-Z][a-zA-Z0-9_?!]*)/\\2/m,modules,modules (defmodule ...)/\n--regex-Elixir=/^[ \\t]*defprotocol[ \\t]+([A-Z][a-zA-Z0-9_]*\\.)*([A-Z][a-zA-Z0-9_?!]*)/\\2/p,protocols,protocols (defprotocol...)/\n--regex-Elixir=/^[ \\t]*Record\\.defrecord[ \\t]+:([a-zA-Z0-9_]+)/\\1/r,records,records (defrecord...)/\n--regex-Elixir=/^[ \\t]*test[ \\t]+\\\"([a-z_][a-zA-Z0-9_?! ]*)\\\"*/\\1/t,tests,tests (test ...)/\n--exclude=bower_components\n--exclude=node_modules\n--exclude=vendor\n--languages=-javascript\n--langdef=js\n--langmap=js:.js\n--langmap=js:+.jsx\n--regex-js=/[ \\t.]([A-Z][A-Z0-9._$]+)[ \\t]*[=:][ \\t]*([0-9\"'\\[\\{]|null)/\\1/n,constant/\n"
        },
        {
          "name": "ctags.d",
          "type": "tree",
          "content": null
        },
        {
          "name": "gemrc",
          "type": "blob",
          "size": 0.0185546875,
          "content": "gem: --no-document\n"
        },
        {
          "name": "git_template",
          "type": "tree",
          "content": null
        },
        {
          "name": "gitconfig",
          "type": "blob",
          "size": 0.6279296875,
          "content": "[init]\n  defaultBranch = main\n  templatedir = ~/.git_template\n[push]\n  default = current\n[color]\n  ui = auto\n[alias]\n  aa = add --all\n  ap = add --patch\n  branches = for-each-ref --sort=-committerdate --format=\\\"%(color:blue)%(authordate:relative)\\t%(color:red)%(authorname)\\t%(color:white)%(color:bold)%(refname:short)\\\" refs/remotes\n  ci = commit -v\n  co = checkout\n  pf = push --force-with-lease\n  st = status\n[core]\n  excludesfile = ~/.gitignore\n  autocrlf = input\n[merge]\n  ff = only\n[commit]\n  template = ~/.gitmessage\n[fetch]\n  prune = true\n[rebase]\n  autosquash = true\n[include]\n  path = ~/.gitconfig.local\n[diff]\n  colorMoved = zebra\n"
        },
        {
          "name": "gitignore",
          "type": "blob",
          "size": 0.1494140625,
          "content": "*.pyc\n*.sw[nop]\n.DS_Store\n.bundle\n.byebug_history\n.env\n.git/\n/bower_components/\n/log\n/node_modules/\n/tmp\ndb/*.sqlite3\nlog/*.log\nrerun.txt\ntmp/**/*\n/tags\n"
        },
        {
          "name": "gitmessage",
          "type": "blob",
          "size": 0.390625,
          "content": "\n\n# 50-character subject line\n#\n# 72-character wrapped longer description. This should answer:\n#\n# * Why was this change necessary?\n# * How does it address the problem?\n# * Are there any side effects?\n#\n# Include a link to the ticket, if any.\n#\n# Add co-authors if you worked on this code with others:\n#\n# Co-authored-by: Full Name <email@example.com>\n# Co-authored-by: Full Name <email@example.com>\n"
        },
        {
          "name": "hooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "hushlogin",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "psqlrc",
          "type": "blob",
          "size": 0.9951171875,
          "content": "-- Official docs: http://www.postgresql.org/docs/9.3/static/app-psql.html\n-- Unofficial docs: http://robots.thoughtbot.com/improving-the-command-line-postgres-experience\n\n-- Don't display the \"helpful\" message on startup.\n\\set QUIET 1\n\\pset null '[NULL]'\n\n-- http://www.postgresql.org/docs/9.3/static/app-psql.html#APP-PSQL-PROMPTING\n\\set PROMPT1 '%[%033[1m%]%M %n@%/%R%[%033[0m%]%# '\n-- PROMPT2 is printed when the prompt expects more input, like when you type\n-- SELECT * FROM<enter>. %R shows what type of input it expects.\n\\set PROMPT2 '[more] %R > '\n\n-- Show how long each query takes to execute\n\\timing\n\n-- Use best available output format\n\\x auto\n\\set VERBOSITY verbose\n\\set HISTFILE ~/.psql_history- :DBNAME\n\\set HISTCONTROL ignoredups\n\\set COMP_KEYWORD_CASE upper\n\\unset QUIET\n\n-- psql can't check for a file's existence, so we'll provide an empty local\n-- file that users can override with their custom dotfiles. To set your own\n-- personal settings, place your own file in ~/.psqlrc.local\n\\i ~/.psqlrc.local\n"
        },
        {
          "name": "railsrc",
          "type": "blob",
          "size": 0.12890625,
          "content": "--database=postgresql\n--skip-test\n--skip-rubocop\n-m=https://raw.githubusercontent.com/thoughtbot/suspenders/main/lib/install/web.rb\n"
        },
        {
          "name": "rcrc",
          "type": "blob",
          "size": 0.1162109375,
          "content": "EXCLUDES=\"*.md LICENSE CODEOWNERS\"\nDOTFILES_DIRS=\"$HOME/dotfiles-local $HOME/dotfiles\"\nCOPY_ALWAYS=\"git_template/HEAD\"\n"
        },
        {
          "name": "rspec",
          "type": "blob",
          "size": 0.0234375,
          "content": "--colour\n--order random\n"
        },
        {
          "name": "tmux.conf",
          "type": "blob",
          "size": 1.0244140625,
          "content": "# improve colors\nset -g default-terminal 'screen-256color'\n\n# act like vim\nsetw -g mode-keys vi\nbind-key h select-pane -L\nbind-key j select-pane -D\nbind-key k select-pane -U\nbind-key l select-pane -R\nbind-key -r C-h select-window -t :-\nbind-key -r C-l select-window -t :+\n\nset -g prefix2 C-s\n\n# start window numbers at 1 to match keyboard order with tmux window order\nset -g base-index 1\nset-window-option -g pane-base-index 1\n\n# renumber windows sequentially after closing any of them\nset -g renumber-windows on\n\n# soften status bar color from harsh green to light gray\nset -g status-style bg='#666666',fg='#aaaaaa'\n\n# remove administrative debris (session name, hostname, time) in status bar\nset -g status-left ''\nset -g status-right ''\n\n# increase scrollback lines\nset -g history-limit 10000\n\n# prefix -> back-one-character\nbind-key C-b send-prefix\n# prefix-2 -> forward-incremental-history-search\nbind-key C-s send-prefix -2\n\n# don't suspend-client\nunbind-key C-z\n\n# Local config\nif-shell \"[ -f ~/.tmux.conf.local ]\" 'source ~/.tmux.conf.local'\n"
        },
        {
          "name": "vim",
          "type": "tree",
          "content": null
        },
        {
          "name": "vimrc",
          "type": "blob",
          "size": 4.888671875,
          "content": "set encoding=utf-8\n\n\" Leader\nlet mapleader = \" \"\n\nset backspace=2   \" Backspace deletes like most programs in insert mode\nset nobackup\nset nowritebackup\nset noswapfile    \" http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287\nset history=50\nset ruler         \" show the cursor position all the time\nset showcmd       \" display incomplete commands\nset incsearch     \" do incremental searching\nset laststatus=2  \" Always display the status line\nset autowrite     \" Automatically :write before running commands\nset modelines=0   \" Disable modelines as a security precaution\nset nomodeline\n\n\" Switch syntax highlighting on, when the terminal has colors\n\" Also switch on highlighting the last used search pattern.\nif (&t_Co > 2 || has(\"gui_running\")) && !exists(\"syntax_on\")\n  syntax on\nendif\n\nif filereadable(expand(\"~/.vimrc.bundles\"))\n  source ~/.vimrc.bundles\nendif\n\n\" Load matchit.vim, but only if the user hasn't installed a newer version.\nif !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''\n  runtime! macros/matchit.vim\nendif\n\nfiletype plugin indent on\n\naugroup vimrcEx\n  autocmd!\n\n  \" When editing a file, always jump to the last known cursor position.\n  \" Don't do it for commit messages, when the position is invalid, or when\n  \" inside an event handler (happens when dropping a file on gvim).\n  autocmd BufReadPost *\n    \\ if &ft != 'gitcommit' && line(\"'\\\"\") > 0 && line(\"'\\\"\") <= line(\"$\") |\n    \\   exe \"normal g`\\\"\" |\n    \\ endif\n\n  \" Set syntax highlighting for specific file types\n  autocmd BufRead,BufNewFile *.md set filetype=markdown\n  autocmd BufRead,BufNewFile .{jscs,jshint,eslint}rc set filetype=json\n  autocmd BufRead,BufNewFile\n    \\ aliases.local,\n    \\zshenv.local,zlogin.local,zlogout.local,zshrc.local,zprofile.local,\n    \\*/zsh/configs/*\n    \\ set filetype=sh\n  autocmd BufRead,BufNewFile gitconfig.local set filetype=gitconfig\n  autocmd BufRead,BufNewFile tmux.conf.local set filetype=tmux\n  autocmd BufRead,BufNewFile vimrc.local set filetype=vim\naugroup END\n\n\" ALE linting events\naugroup ale\n  autocmd!\n\n  if g:has_async\n    autocmd VimEnter *\n      \\ set updatetime=1000 |\n      \\ let g:ale_lint_on_text_changed = 0\n    autocmd CursorHold * call ale#Queue(0)\n    autocmd CursorHoldI * call ale#Queue(0)\n    autocmd InsertEnter * call ale#Queue(0)\n    autocmd InsertLeave * call ale#Queue(0)\n  else\n    echoerr \"The thoughtbot dotfiles require NeoVim or Vim 8\"\n  endif\naugroup END\n\n\" When the type of shell script is /bin/sh, assume a POSIX-compatible\n\" shell for syntax highlighting purposes.\nlet g:is_posix = 1\n\n\" Softtabs, 2 spaces\nset tabstop=2\nset shiftwidth=2\nset shiftround\nset expandtab\n\n\" Display extra whitespace\nset list listchars=tab:»·,trail:·,nbsp:·\n\n\" Use one space, not two, after punctuation.\nset nojoinspaces\n\n\" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher\nif executable('ag')\n  \" Use Ag over Grep\n  set grepprg=ag\\ --nogroup\\ --nocolor\n\n  \" Use ag in fzf for listing files. Lightning fast and respects .gitignore\n  let $FZF_DEFAULT_COMMAND = 'ag --literal --files-with-matches --nocolor --hidden -g \"\"'\n\n  nnoremap \\ :Ag<SPACE>\nendif\n\n\" Make it obvious where 80 characters is\nset textwidth=80\nset colorcolumn=+1\n\n\" Numbers\nset number\nset numberwidth=5\n\n\" Tab completion\n\" will insert tab at beginning of line,\n\" will use completion if not at beginning\nset wildmode=list:longest,list:full\nfunction! InsertTabWrapper()\n    let col = col('.') - 1\n    if !col || getline('.')[col - 1] !~ '\\k'\n        return \"\\<Tab>\"\n    else\n        return \"\\<C-p>\"\n    endif\nendfunction\ninoremap <Tab> <C-r>=InsertTabWrapper()<CR>\ninoremap <S-Tab> <C-n>\n\n\" Switch between the last two files\nnnoremap <Leader><Leader> <C-^>\n\n\" vim-test mappings\nnnoremap <silent> <Leader>t :TestFile<CR>\nnnoremap <silent> <Leader>s :TestNearest<CR>\nnnoremap <silent> <Leader>l :TestLast<CR>\nnnoremap <silent> <Leader>a :TestSuite<CR>\nnnoremap <silent> <Leader>gt :TestVisit<CR>\n\n\" Run commands that require an interactive shell\nnnoremap <Leader>r :RunInInteractiveShell<Space>\n\n\" Treat <li> and <p> tags like the block tags they are\nlet g:html_indent_tags = 'li\\|p'\n\n\" Set tags for vim-fugitive\nset tags^=.git/tags\n\n\" Open new split panes to right and bottom, which feels more natural\nset splitbelow\nset splitright\n\n\" Quicker window movement\nnnoremap <C-j> <C-w>j\nnnoremap <C-k> <C-w>k\nnnoremap <C-h> <C-w>h\nnnoremap <C-l> <C-w>l\n\n\" Move between linting errors\nnnoremap ]r :ALENextWrap<CR>\nnnoremap [r :ALEPreviousWrap<CR>\n\n\" Map Ctrl + p to open fuzzy find (FZF)\nnnoremap <c-p> :Files<cr>\n\n\" Set spellfile to location that is guaranteed to exist, can be symlinked to\n\" Dropbox or kept in Git and managed outside of thoughtbot/dotfiles using rcm.\nset spellfile=$HOME/.vim-spell-en.utf-8.add\n\n\" Autocomplete with dictionary words when spell check is on\nset complete+=kspell\n\n\" Always use vertical diffs\nset diffopt+=vertical\n\n\" Local config\nif filereadable($HOME . \"/.vimrc.local\")\n  source ~/.vimrc.local\nendif\n"
        },
        {
          "name": "vimrc.bundles",
          "type": "blob",
          "size": 1.4091796875,
          "content": "if &compatible\n  set nocompatible\nend\n\n\" Remove declared plugins\nfunction! s:UnPlug(plug_name)\n  if has_key(g:plugs, a:plug_name)\n    call remove(g:plugs, a:plug_name)\n  endif\nendfunction\ncommand!  -nargs=1 UnPlug call s:UnPlug(<args>)\n\nlet g:has_async = v:version >= 800 || has('nvim')\n\ncall plug#begin('~/.vim/bundle')\n\n\" Define bundles via Github repos\nPlug 'christoomey/vim-run-interactive'\n\n\" If fzf has already been installed via Homebrew, use the existing fzf\n\" Otherwise, install fzf. The `--all` flag makes fzf accessible outside of vim\nif executable(\"brew\")\n  let g:brew_fzf_path = trim(system(\"brew --prefix fzf\"))\nendif\n\nif exists(\"g:brew_fzf_path\") && isdirectory(g:brew_fzf_path)\n  Plug g:brew_fzf_path \nelse\n  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }\nendif\n\nPlug 'junegunn/fzf.vim'\nPlug 'elixir-lang/vim-elixir'\nPlug 'fatih/vim-go'\nPlug 'janko-m/vim-test'\nPlug 'pangloss/vim-javascript'\nPlug 'pbrisbin/vim-mkdir'\nPlug 'slim-template/vim-slim'\nPlug 'tpope/vim-bundler'\nPlug 'tpope/vim-endwise'\nPlug 'tpope/vim-eunuch'\nPlug 'tpope/vim-fugitive'\nPlug 'tpope/vim-projectionist'\nPlug 'tpope/vim-rails'\nPlug 'tpope/vim-rake'\nPlug 'tpope/vim-repeat'\nPlug 'tpope/vim-rhubarb'\nPlug 'tpope/vim-surround'\nPlug 'vim-ruby/vim-ruby'\nPlug 'vim-scripts/tComment'\n\nif g:has_async\n  Plug 'dense-analysis/ale'\nendif\n\nif filereadable(expand(\"~/.vimrc.bundles.local\"))\n  source ~/.vimrc.bundles.local\nendif\n\ncall plug#end()\n"
        },
        {
          "name": "zprofile",
          "type": "blob",
          "size": 0.2421875,
          "content": "if [ -d \"/opt/homebrew\" ]; then\n  eval \"$(/opt/homebrew/bin/brew shellenv)\"\nelif [ -d \"~/.linuxbrew\" ]; then\n  eval \"$(~/.linuxbrew/bin/brew shellenv)\"\nelif [ -d \"/home/linuxbrew\" ]; then\n  eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"\nfi\n"
        },
        {
          "name": "zsh",
          "type": "tree",
          "content": null
        },
        {
          "name": "zshenv",
          "type": "blob",
          "size": 0.6845703125,
          "content": "local _old_path=\"$PATH\"\n\n# Local config\n[[ -f ~/.zshenv.local ]] && source ~/.zshenv.local\n\nif [[ $PATH != $_old_path ]]; then\n  # `colors` isn't initialized yet, so define a few manually\n  typeset -AHg fg fg_bold\n  if [ -t 2 ]; then\n    fg[red]=$'\\e[31m'\n    fg_bold[white]=$'\\e[1;37m'\n    reset_color=$'\\e[m'\n  else\n    fg[red]=\"\"\n    fg_bold[white]=\"\"\n    reset_color=\"\"\n  fi\n\n  cat <<MSG >&2\n${fg[red]}Warning:${reset_color} your \\`~/.zshenv.local' configuration seems to edit PATH entries.\nPlease move that configuration to \\`.zshrc.local' like so:\n  ${fg_bold[white]}cat ~/.zshenv.local >> ~/.zshrc.local && rm ~/.zshenv.local${reset_color}\n\n(called from ${(%):-%N:%i})\n\nMSG\nfi\n\nunset _old_path\n"
        },
        {
          "name": "zshrc",
          "type": "blob",
          "size": 0.8662109375,
          "content": "# load custom executable functions\nfor function in ~/.zsh/functions/*; do\n  source $function\ndone\n\n# extra files in ~/.zsh/configs/pre , ~/.zsh/configs , and ~/.zsh/configs/post\n# these are loaded first, second, and third, respectively.\n_load_settings() {\n  _dir=\"$1\"\n  if [ -d \"$_dir\" ]; then\n    if [ -d \"$_dir/pre\" ]; then\n      for config in \"$_dir\"/pre/**/*~*.zwc(N-.); do\n        . $config\n      done\n    fi\n\n    for config in \"$_dir\"/**/*(N-.); do\n      case \"$config\" in\n        \"$_dir\"/(pre|post)/*|*.zwc)\n          :\n          ;;\n        *)\n          . $config\n          ;;\n      esac\n    done\n\n    if [ -d \"$_dir/post\" ]; then\n      for config in \"$_dir\"/post/**/*~*.zwc(N-.); do\n        . $config\n      done\n    fi\n  fi\n}\n_load_settings \"$HOME/.zsh/configs\"\n\n# Local config\n[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local\n\n# aliases\n[[ -f ~/.aliases ]] && source ~/.aliases\n"
        }
      ]
    }
  ]
}