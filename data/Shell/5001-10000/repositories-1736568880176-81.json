{
  "metadata": {
    "timestamp": 1736568880176,
    "page": 81,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hwdsl2/docker-ipsec-vpn-server",
      "stars": 6584,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0986328125,
          "content": ".git\n.github\n.gitignore\ndocker-compose.yml\nLICENSE.md\nREADME.md\nREADME-zh.md\nvpn.env\nvpn.env.example\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0078125,
          "content": "vpn.env\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 2.8154296875,
          "content": "#\n# Copyright (C) 2021-2024 Lin Song <linsongui@gmail.com>\n#\n# This work is licensed under the Creative Commons Attribution-ShareAlike 3.0\n# Unported License: http://creativecommons.org/licenses/by-sa/3.0/\n#\n# Attribution required: please include my name in any derivative and let me\n# know how you have improved it!\n\nFROM alpine:3.20\n\nENV SWAN_VER=5.1\nWORKDIR /opt/src\n\nRUN set -x \\\n    && apk add --no-cache \\\n         bash bind-tools coreutils openssl uuidgen wget xl2tpd iptables iptables-legacy \\\n         iproute2 libcap-ng libcurl libevent linux-pam musl nspr nss nss-tools openrc \\\n         bison flex gcc make libc-dev bsd-compat-headers linux-pam-dev \\\n         nss-dev libcap-ng-dev libevent-dev curl-dev nspr-dev \\\n    && cd /sbin \\\n    && for fn in iptables iptables-save iptables-restore; do ln -fs xtables-legacy-multi \"$fn\"; done \\\n    && cd /opt/src \\\n    && wget -t 3 -T 30 -nv -O libreswan.tar.gz \"https://github.com/libreswan/libreswan/archive/v${SWAN_VER}.tar.gz\" \\\n    || wget -t 3 -T 30 -nv -O libreswan.tar.gz \"https://download.libreswan.org/libreswan-${SWAN_VER}.tar.gz\" \\\n    && tar xzf libreswan.tar.gz \\\n    && rm -f libreswan.tar.gz \\\n    && cd \"libreswan-${SWAN_VER}\" \\\n    && printf 'WERROR_CFLAGS=-w -s\\nUSE_DNSSEC=false\\nUSE_DH2=true\\n' > Makefile.inc.local \\\n    && printf 'FINALNSSDIR=/etc/ipsec.d\\nNSSDIR=/etc/ipsec.d\\n' >> Makefile.inc.local \\\n    && make -s base \\\n    && make -s install-base \\\n    && cd /opt/src \\\n    && mkdir -p /run/openrc \\\n    && touch /run/openrc/softlevel \\\n    && rm -rf \"/opt/src/libreswan-${SWAN_VER}\" \\\n    && apk del --no-cache \\\n         bison flex gcc make libc-dev bsd-compat-headers linux-pam-dev \\\n         nss-dev libcap-ng-dev libevent-dev curl-dev nspr-dev\n\nRUN wget -t 3 -T 30 -nv -O /opt/src/ikev2.sh https://github.com/hwdsl2/setup-ipsec-vpn/raw/37d7cd2418aa3d94b2a7c24a66ddd679cdb1d815/extras/ikev2setup.sh \\\n    && chmod +x /opt/src/ikev2.sh \\\n    && ln -s /opt/src/ikev2.sh /usr/bin\n\nCOPY ./run.sh /opt/src/run.sh\nRUN chmod 755 /opt/src/run.sh\nEXPOSE 500/udp 4500/udp\nCMD [\"/opt/src/run.sh\"]\n\nARG BUILD_DATE\nARG VERSION\nARG VCS_REF\nENV IMAGE_VER=$BUILD_DATE\n\nLABEL maintainer=\"Lin Song <linsongui@gmail.com>\" \\\n    org.opencontainers.image.created=\"$BUILD_DATE\" \\\n    org.opencontainers.image.version=\"$VERSION\" \\\n    org.opencontainers.image.revision=\"$VCS_REF\" \\\n    org.opencontainers.image.authors=\"Lin Song <linsongui@gmail.com>\" \\\n    org.opencontainers.image.title=\"IPsec VPN Server on Docker\" \\\n    org.opencontainers.image.description=\"Docker image to run an IPsec VPN server, with IPsec/L2TP, Cisco IPsec and IKEv2.\" \\\n    org.opencontainers.image.url=\"https://github.com/hwdsl2/docker-ipsec-vpn-server\" \\\n    org.opencontainers.image.source=\"https://github.com/hwdsl2/docker-ipsec-vpn-server\" \\\n    org.opencontainers.image.documentation=\"https://github.com/hwdsl2/docker-ipsec-vpn-server\"\n"
        },
        {
          "name": "Dockerfile.debian",
          "type": "blob",
          "size": 2.9912109375,
          "content": "#\n# Copyright (C) 2016-2024 Lin Song <linsongui@gmail.com>\n#\n# This work is licensed under the Creative Commons Attribution-ShareAlike 3.0\n# Unported License: http://creativecommons.org/licenses/by-sa/3.0/\n#\n# Attribution required: please include my name in any derivative and let me\n# know how you have improved it!\n\nFROM debian:bookworm-slim\n\nENV SWAN_VER=5.1\nWORKDIR /opt/src\n\nRUN apt-get -yqq update \\\n    && DEBIAN_FRONTEND=noninteractive \\\n       apt-get -yqq --no-install-recommends install \\\n         wget dnsutils openssl ca-certificates kmod iproute2 \\\n         gawk net-tools iptables bsdmainutils libcurl3-nss \\\n         libnss3-tools libevent-dev uuid-runtime xl2tpd \\\n         libnss3-dev libnspr4-dev pkg-config libpam0g-dev \\\n         libcap-ng-dev libcap-ng-utils libselinux1-dev \\\n         libcurl4-nss-dev flex bison gcc make \\\n    && wget -t 3 -T 30 -nv -O libreswan.tar.gz \"https://github.com/libreswan/libreswan/archive/v${SWAN_VER}.tar.gz\" \\\n    || wget -t 3 -T 30 -nv -O libreswan.tar.gz \"https://download.libreswan.org/libreswan-${SWAN_VER}.tar.gz\" \\\n    && tar xzf libreswan.tar.gz \\\n    && rm -f libreswan.tar.gz \\\n    && cd \"libreswan-${SWAN_VER}\" \\\n    && printf 'WERROR_CFLAGS=-w -s\\nUSE_DNSSEC=false\\nUSE_SYSTEMD_WATCHDOG=false\\n' > Makefile.inc.local \\\n    && printf 'USE_DH2=true\\nUSE_NSS_KDF=false\\nFINALNSSDIR=/etc/ipsec.d\\nNSSDIR=/etc/ipsec.d\\n' >> Makefile.inc.local \\\n    && make -s base \\\n    && make -s install-base \\\n    && cd /opt/src \\\n    && rm -rf \"/opt/src/libreswan-${SWAN_VER}\" \\\n    && apt-get -yqq remove \\\n         libnss3-dev libnspr4-dev pkg-config libpam0g-dev \\\n         libcap-ng-dev libcap-ng-utils libselinux1-dev \\\n         libcurl4-nss-dev flex bison gcc make \\\n    && apt-get -yqq autoremove \\\n    && apt-get -y clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm -rf /var/log/* \\\n    && update-alternatives --set iptables /usr/sbin/iptables-legacy\n\nRUN wget -t 3 -T 30 -nv -O /opt/src/ikev2.sh https://github.com/hwdsl2/setup-ipsec-vpn/raw/37d7cd2418aa3d94b2a7c24a66ddd679cdb1d815/extras/ikev2setup.sh \\\n    && chmod +x /opt/src/ikev2.sh \\\n    && ln -s /opt/src/ikev2.sh /usr/bin\n\nCOPY ./run.sh /opt/src/run.sh\nRUN chmod 755 /opt/src/run.sh\nEXPOSE 500/udp 4500/udp\nCMD [\"/opt/src/run.sh\"]\n\nARG BUILD_DATE\nARG VERSION\nARG VCS_REF\nENV IMAGE_VER=$BUILD_DATE\n\nLABEL maintainer=\"Lin Song <linsongui@gmail.com>\" \\\n    org.opencontainers.image.created=\"$BUILD_DATE\" \\\n    org.opencontainers.image.version=\"$VERSION\" \\\n    org.opencontainers.image.revision=\"$VCS_REF\" \\\n    org.opencontainers.image.authors=\"Lin Song <linsongui@gmail.com>\" \\\n    org.opencontainers.image.title=\"IPsec VPN Server on Docker\" \\\n    org.opencontainers.image.description=\"Docker image to run an IPsec VPN server, with IPsec/L2TP, Cisco IPsec and IKEv2.\" \\\n    org.opencontainers.image.url=\"https://github.com/hwdsl2/docker-ipsec-vpn-server\" \\\n    org.opencontainers.image.source=\"https://github.com/hwdsl2/docker-ipsec-vpn-server\" \\\n    org.opencontainers.image.documentation=\"https://github.com/hwdsl2/docker-ipsec-vpn-server\"\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 20.0517578125,
          "content": "### Creative Commons Attribution-ShareAlike 3.0 Unported License\nLink to license summary: https://creativecommons.org/licenses/by-sa/3.0/\n\nCopyright (C) 2016-2024 [Lin Song](https://github.com/hwdsl2)   \nBased on [the work of Thomas Sarlandie](https://github.com/sarfata/voodooprivacy) (Copyright 2012)\n\n<p>THE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS\nOF THIS CREATIVE COMMONS PUBLIC LICENSE (\"CCPL\" OR\n\"LICENSE\"). THE WORK IS PROTECTED BY COPYRIGHT AND/OR OTHER\nAPPLICABLE LAW. ANY USE OF THE WORK OTHER THAN AS\nAUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW IS\nPROHIBITED.</p>\n<p>BY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU\nACCEPT AND AGREE TO BE BOUND BY THE TERMS OF THIS LICENSE.\nTO THE EXTENT THIS LICENSE MAY BE CONSIDERED TO BE A\nCONTRACT, THE LICENSOR GRANTS YOU THE RIGHTS CONTAINED HERE\nIN CONSIDERATION OF YOUR ACCEPTANCE OF SUCH TERMS AND\nCONDITIONS.</p>\n<p><strong>1. Definitions</strong></p>\n<ol type=\"a\">\n<li><strong>\"Adaptation\"</strong> means a work based upon\nthe Work, or upon the Work and other pre-existing works,\nsuch as a translation, adaptation, derivative work,\narrangement of music or other alterations of a literary\nor artistic work, or phonogram or performance and\nincludes cinematographic adaptations or any other form in\nwhich the Work may be recast, transformed, or adapted\nincluding in any form recognizably derived from the\noriginal, except that a work that constitutes a\nCollection will not be considered an Adaptation for the\npurpose of this License. For the avoidance of doubt,\nwhere the Work is a musical work, performance or\nphonogram, the synchronization of the Work in\ntimed-relation with a moving image (\"synching\") will be\nconsidered an Adaptation for the purpose of this\nLicense.</li>\n<li><strong>\"Collection\"</strong> means a collection of\nliterary or artistic works, such as encyclopedias and\nanthologies, or performances, phonograms or broadcasts,\nor other works or subject matter other than works listed\nin Section 1(f) below, which, by reason of the selection\nand arrangement of their contents, constitute\nintellectual creations, in which the Work is included in\nits entirety in unmodified form along with one or more\nother contributions, each constituting separate and\nindependent works in themselves, which together are\nassembled into a collective whole. A work that\nconstitutes a Collection will not be considered an\nAdaptation (as defined below) for the purposes of this\nLicense.</li>\n<li><strong>\"Creative Commons Compatible\nLicense\"</strong> means a license that is listed at\nhttps://creativecommons.org/compatiblelicenses that has\nbeen approved by Creative Commons as being essentially\nequivalent to this License, including, at a minimum,\nbecause that license: (i) contains terms that have the\nsame purpose, meaning and effect as the License Elements\nof this License; and, (ii) explicitly permits the\nrelicensing of adaptations of works made available under\nthat license under this License or a Creative Commons\njurisdiction license with the same License Elements as\nthis License.</li>\n<li><strong>\"Distribute\"</strong> means to make available\nto the public the original and copies of the Work or\nAdaptation, as appropriate, through sale or other\ntransfer of ownership.</li>\n<li><strong>\"License Elements\"</strong> means the\nfollowing high-level license attributes as selected by\nLicensor and indicated in the title of this License:\nAttribution, ShareAlike.</li>\n<li><strong>\"Licensor\"</strong> means the individual,\nindividuals, entity or entities that offer(s) the Work\nunder the terms of this License.</li>\n<li><strong>\"Original Author\"</strong> means, in the case\nof a literary or artistic work, the individual,\nindividuals, entity or entities who created the Work or\nif no individual or entity can be identified, the\npublisher; and in addition (i) in the case of a\nperformance the actors, singers, musicians, dancers, and\nother persons who act, sing, deliver, declaim, play in,\ninterpret or otherwise perform literary or artistic works\nor expressions of folklore; (ii) in the case of a\nphonogram the producer being the person or legal entity\nwho first fixes the sounds of a performance or other\nsounds; and, (iii) in the case of broadcasts, the\norganization that transmits the broadcast.</li>\n<li><strong>\"Work\"</strong> means the literary and/or\nartistic work offered under the terms of this License\nincluding without limitation any production in the\nliterary, scientific and artistic domain, whatever may be\nthe mode or form of its expression including digital\nform, such as a book, pamphlet and other writing; a\nlecture, address, sermon or other work of the same\nnature; a dramatic or dramatico-musical work; a\nchoreographic work or entertainment in dumb show; a\nmusical composition with or without words; a\ncinematographic work to which are assimilated works\nexpressed by a process analogous to cinematography; a\nwork of drawing, painting, architecture, sculpture,\nengraving or lithography; a photographic work to which\nare assimilated works expressed by a process analogous to\nphotography; a work of applied art; an illustration, map,\nplan, sketch or three-dimensional work relative to\ngeography, topography, architecture or science; a\nperformance; a broadcast; a phonogram; a compilation of\ndata to the extent it is protected as a copyrightable\nwork; or a work performed by a variety or circus\nperformer to the extent it is not otherwise considered a\nliterary or artistic work.</li>\n<li><strong>\"You\"</strong> means an individual or entity\nexercising rights under this License who has not\npreviously violated the terms of this License with\nrespect to the Work, or who has received express\npermission from the Licensor to exercise rights under\nthis License despite a previous violation.</li>\n<li><strong>\"Publicly Perform\"</strong> means to perform\npublic recitations of the Work and to communicate to the\npublic those public recitations, by any means or process,\nincluding by wire or wireless means or public digital\nperformances; to make available to the public Works in\nsuch a way that members of the public may access these\nWorks from a place and at a place individually chosen by\nthem; to perform the Work to the public by any means or\nprocess and the communication to the public of the\nperformances of the Work, including by public digital\nperformance; to broadcast and rebroadcast the Work by any\nmeans including signs, sounds or images.</li>\n<li><strong>\"Reproduce\"</strong> means to make copies of\nthe Work by any means including without limitation by\nsound or visual recordings and the right of fixation and\nreproducing fixations of the Work, including storage of a\nprotected performance or phonogram in digital form or\nother electronic medium.</li>\n</ol>\n<p><strong>2. Fair Dealing Rights.</strong> Nothing in this\nLicense is intended to reduce, limit, or restrict any uses\nfree from copyright or rights arising from limitations or\nexceptions that are provided for in connection with the\ncopyright protection under copyright law or other\napplicable laws.</p>\n<p><strong>3. License Grant.</strong> Subject to the terms\nand conditions of this License, Licensor hereby grants You\na worldwide, royalty-free, non-exclusive, perpetual (for\nthe duration of the applicable copyright) license to\nexercise the rights in the Work as stated below:</p>\n<ol type=\"a\">\n<li>to Reproduce the Work, to incorporate the Work into\none or more Collections, and to Reproduce the Work as\nincorporated in the Collections;</li>\n<li>to create and Reproduce Adaptations provided that any\nsuch Adaptation, including any translation in any medium,\ntakes reasonable steps to clearly label, demarcate or\notherwise identify that changes were made to the original\nWork. For example, a translation could be marked \"The\noriginal work was translated from English to Spanish,\" or\na modification could indicate \"The original work has been\nmodified.\";</li>\n<li>to Distribute and Publicly Perform the Work including\nas incorporated in Collections; and,</li>\n<li>to Distribute and Publicly Perform Adaptations.</li>\n<li>\n<p>For the avoidance of doubt:</p>\n<ol type=\"i\">\n<li><strong>Non-waivable Compulsory License\nSchemes</strong>. In those jurisdictions in which the\nright to collect royalties through any statutory or\ncompulsory licensing scheme cannot be waived, the\nLicensor reserves the exclusive right to collect such\nroyalties for any exercise by You of the rights\ngranted under this License;</li>\n<li><strong>Waivable Compulsory License\nSchemes</strong>. In those jurisdictions in which the\nright to collect royalties through any statutory or\ncompulsory licensing scheme can be waived, the\nLicensor waives the exclusive right to collect such\nroyalties for any exercise by You of the rights\ngranted under this License; and,</li>\n<li><strong>Voluntary License Schemes</strong>. The\nLicensor waives the right to collect royalties,\nwhether individually or, in the event that the\nLicensor is a member of a collecting society that\nadministers voluntary licensing schemes, via that\nsociety, from any exercise by You of the rights\ngranted under this License.</li>\n</ol>\n</li>\n</ol>\n<p>The above rights may be exercised in all media and\nformats whether now known or hereafter devised. The above\nrights include the right to make such modifications as are\ntechnically necessary to exercise the rights in other media\nand formats. Subject to Section 8(f), all rights not\nexpressly granted by Licensor are hereby reserved.</p>\n<p><strong>4. Restrictions.</strong> The license granted in\nSection 3 above is expressly made subject to and limited by\nthe following restrictions:</p>\n<ol type=\"a\">\n<li>You may Distribute or Publicly Perform the Work only\nunder the terms of this License. You must include a copy\nof, or the Uniform Resource Identifier (URI) for, this\nLicense with every copy of the Work You Distribute or\nPublicly Perform. You may not offer or impose any terms\non the Work that restrict the terms of this License or\nthe ability of the recipient of the Work to exercise the\nrights granted to that recipient under the terms of the\nLicense. You may not sublicense the Work. You must keep\nintact all notices that refer to this License and to the\ndisclaimer of warranties with every copy of the Work You\nDistribute or Publicly Perform. When You Distribute or\nPublicly Perform the Work, You may not impose any\neffective technological measures on the Work that\nrestrict the ability of a recipient of the Work from You\nto exercise the rights granted to that recipient under\nthe terms of the License. This Section 4(a) applies to\nthe Work as incorporated in a Collection, but this does\nnot require the Collection apart from the Work itself to\nbe made subject to the terms of this License. If You\ncreate a Collection, upon notice from any Licensor You\nmust, to the extent practicable, remove from the\nCollection any credit as required by Section 4(c), as\nrequested. If You create an Adaptation, upon notice from\nany Licensor You must, to the extent practicable, remove\nfrom the Adaptation any credit as required by Section\n4(c), as requested.</li>\n<li>You may Distribute or Publicly Perform an Adaptation\nonly under the terms of: (i) this License; (ii) a later\nversion of this License with the same License Elements as\nthis License; (iii) a Creative Commons jurisdiction\nlicense (either this or a later license version) that\ncontains the same License Elements as this License (e.g.,\nAttribution-ShareAlike 3.0 US)); (iv) a Creative Commons\nCompatible License. If you license the Adaptation under\none of the licenses mentioned in (iv), you must comply\nwith the terms of that license. If you license the\nAdaptation under the terms of any of the licenses\nmentioned in (i), (ii) or (iii) (the \"Applicable\nLicense\"), you must comply with the terms of the\nApplicable License generally and the following\nprovisions: (I) You must include a copy of, or the URI\nfor, the Applicable License with every copy of each\nAdaptation You Distribute or Publicly Perform; (II) You\nmay not offer or impose any terms on the Adaptation that\nrestrict the terms of the Applicable License or the\nability of the recipient of the Adaptation to exercise\nthe rights granted to that recipient under the terms of\nthe Applicable License; (III) You must keep intact all\nnotices that refer to the Applicable License and to the\ndisclaimer of warranties with every copy of the Work as\nincluded in the Adaptation You Distribute or Publicly\nPerform; (IV) when You Distribute or Publicly Perform the\nAdaptation, You may not impose any effective\ntechnological measures on the Adaptation that restrict\nthe ability of a recipient of the Adaptation from You to\nexercise the rights granted to that recipient under the\nterms of the Applicable License. This Section 4(b)\napplies to the Adaptation as incorporated in a\nCollection, but this does not require the Collection\napart from the Adaptation itself to be made subject to\nthe terms of the Applicable License.</li>\n<li>If You Distribute, or Publicly Perform the Work or\nany Adaptations or Collections, You must, unless a\nrequest has been made pursuant to Section 4(a), keep\nintact all copyright notices for the Work and provide,\nreasonable to the medium or means You are utilizing: (i)\nthe name of the Original Author (or pseudonym, if\napplicable) if supplied, and/or if the Original Author\nand/or Licensor designate another party or parties (e.g.,\na sponsor institute, publishing entity, journal) for\nattribution (\"Attribution Parties\") in Licensor's\ncopyright notice, terms of service or by other reasonable\nmeans, the name of such party or parties; (ii) the title\nof the Work if supplied; (iii) to the extent reasonably\npracticable, the URI, if any, that Licensor specifies to\nbe associated with the Work, unless such URI does not\nrefer to the copyright notice or licensing information\nfor the Work; and (iv) , consistent with Ssection 3(b),\nin the case of an Adaptation, a credit identifying the\nuse of the Work in the Adaptation (e.g., \"French\ntranslation of the Work by Original Author,\" or\n\"Screenplay based on original Work by Original Author\").\nThe credit required by this Section 4(c) may be\nimplemented in any reasonable manner; provided, however,\nthat in the case of a Adaptation or Collection, at a\nminimum such credit will appear, if a credit for all\ncontributing authors of the Adaptation or Collection\nappears, then as part of these credits and in a manner at\nleast as prominent as the credits for the other\ncontributing authors. For the avoidance of doubt, You may\nonly use the credit required by this Section for the\npurpose of attribution in the manner set out above and,\nby exercising Your rights under this License, You may not\nimplicitly or explicitly assert or imply any connection\nwith, sponsorship or endorsement by the Original Author,\nLicensor and/or Attribution Parties, as appropriate, of\nYou or Your use of the Work, without the separate,\nexpress prior written permission of the Original Author,\nLicensor and/or Attribution Parties.</li>\n<li>Except as otherwise agreed in writing by the Licensor\nor as may be otherwise permitted by applicable law, if\nYou Reproduce, Distribute or Publicly Perform the Work\neither by itself or as part of any Adaptations or\nCollections, You must not distort, mutilate, modify or\ntake other derogatory action in relation to the Work\nwhich would be prejudicial to the Original Author's honor\nor reputation. Licensor agrees that in those\njurisdictions (e.g. Japan), in which any exercise of the\nright granted in Section 3(b) of this License (the right\nto make Adaptations) would be deemed to be a distortion,\nmutilation, modification or other derogatory action\nprejudicial to the Original Author's honor and\nreputation, the Licensor will waive or not assert, as\nappropriate, this Section, to the fullest extent\npermitted by the applicable national law, to enable You\nto reasonably exercise Your right under Section 3(b) of\nthis License (right to make Adaptations) but not\notherwise.</li>\n</ol>\n<p><strong>5. Representations, Warranties and\nDisclaimer</strong></p>\n<p>UNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN\nWRITING, LICENSOR OFFERS THE WORK AS-IS AND MAKES NO\nREPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE\nWORK, EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, INCLUDING,\nWITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTIBILITY,\nFITNESS FOR A PARTICULAR PURPOSE, NONINFRINGEMENT, OR THE\nABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE\nPRESENCE OF ABSENCE OF ERRORS, WHETHER OR NOT DISCOVERABLE.\nSOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF IMPLIED\nWARRANTIES, SO SUCH EXCLUSION MAY NOT APPLY TO YOU.</p>\n<p><strong>6. Limitation on Liability.</strong> EXCEPT TO\nTHE EXTENT REQUIRED BY APPLICABLE LAW, IN NO EVENT WILL\nLICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY FOR ANY\nSPECIAL, INCIDENTAL, CONSEQUENTIAL, PUNITIVE OR EXEMPLARY\nDAMAGES ARISING OUT OF THIS LICENSE OR THE USE OF THE WORK,\nEVEN IF LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.</p>\n<p><strong>7. Termination</strong></p>\n<ol type=\"a\">\n<li>This License and the rights granted hereunder will\nterminate automatically upon any breach by You of the\nterms of this License. Individuals or entities who have\nreceived Adaptations or Collections from You under this\nLicense, however, will not have their licenses terminated\nprovided such individuals or entities remain in full\ncompliance with those licenses. Sections 1, 2, 5, 6, 7,\nand 8 will survive any termination of this License.</li>\n<li>Subject to the above terms and conditions, the\nlicense granted here is perpetual (for the duration of\nthe applicable copyright in the Work). Notwithstanding\nthe above, Licensor reserves the right to release the\nWork under different license terms or to stop\ndistributing the Work at any time; provided, however that\nany such election will not serve to withdraw this License\n(or any other license that has been, or is required to\nbe, granted under the terms of this License), and this\nLicense will continue in full force and effect unless\nterminated as stated above.</li>\n</ol>\n<p><strong>8. Miscellaneous</strong></p>\n<ol type=\"a\">\n<li>Each time You Distribute or Publicly Perform the Work\nor a Collection, the Licensor offers to the recipient a\nlicense to the Work on the same terms and conditions as\nthe license granted to You under this License.</li>\n<li>Each time You Distribute or Publicly Perform an\nAdaptation, Licensor offers to the recipient a license to\nthe original Work on the same terms and conditions as the\nlicense granted to You under this License.</li>\n<li>If any provision of this License is invalid or\nunenforceable under applicable law, it shall not affect\nthe validity or enforceability of the remainder of the\nterms of this License, and without further action by the\nparties to this agreement, such provision shall be\nreformed to the minimum extent necessary to make such\nprovision valid and enforceable.</li>\n<li>No term or provision of this License shall be deemed\nwaived and no breach consented to unless such waiver or\nconsent shall be in writing and signed by the party to be\ncharged with such waiver or consent.</li>\n<li>This License constitutes the entire agreement between\nthe parties with respect to the Work licensed here. There\nare no understandings, agreements or representations with\nrespect to the Work not specified here. Licensor shall\nnot be bound by any additional provisions that may appear\nin any communication from You. This License may not be\nmodified without the mutual written agreement of the\nLicensor and You.</li>\n<li>The rights granted under, and the subject matter\nreferenced, in this License were drafted utilizing the\nterminology of the Berne Convention for the Protection of\nLiterary and Artistic Works (as amended on September 28,\n1979), the Rome Convention of 1961, the WIPO Copyright\nTreaty of 1996, the WIPO Performances and Phonograms\nTreaty of 1996 and the Universal Copyright Convention (as\nrevised on July 24, 1971). These rights and subject\nmatter take effect in the relevant jurisdiction in which\nthe License terms are sought to be enforced according to\nthe corresponding provisions of the implementation of\nthose treaty provisions in the applicable national law.\nIf the standard suite of rights granted under applicable\ncopyright law includes additional rights not granted\nunder this License, such additional rights are deemed to\nbe included in the License; this License is not intended\nto restrict the license of any rights under applicable\nlaw.</li>\n</ol>\n"
        },
        {
          "name": "README-zh.md",
          "type": "blob",
          "size": 19.4267578125,
          "content": "[English](README.md) | [中文](README-zh.md)\n\n# Docker 上的 IPsec VPN 服务器\n\n[![Build Status](https://github.com/hwdsl2/docker-ipsec-vpn-server/actions/workflows/main-alpine.yml/badge.svg)](https://github.com/hwdsl2/docker-ipsec-vpn-server/actions/workflows/main-alpine.yml) [![GitHub Stars](docs/images/badges/github-stars.svg)](https://github.com/hwdsl2/docker-ipsec-vpn-server/stargazers) [![Docker Stars](docs/images/badges/docker-stars.svg)](https://hub.docker.com/r/hwdsl2/ipsec-vpn-server/) [![Docker Pulls](docs/images/badges/docker-pulls.svg)](https://hub.docker.com/r/hwdsl2/ipsec-vpn-server/)\n\n使用这个 Docker 镜像快速搭建 IPsec VPN 服务器。支持 IPsec/L2TP，Cisco IPsec 和 IKEv2 协议。\n\n本镜像以 Alpine 3.20 或 Debian 12 为基础，并使用 [Libreswan](https://libreswan.org) (IPsec VPN 软件) 和 [xl2tpd](https://github.com/xelerance/xl2tpd) (L2TP 服务进程)。\n\nIPsec VPN 可以加密你的网络流量，以防止在通过因特网传送时，你和 VPN 服务器之间的任何人对你的数据的未经授权的访问。在使用不安全的网络时，这是特别有用的，例如在咖啡厅，机场或旅馆房间。\n\n**[&raquo; :book: Book: 搭建自己的 VPN 服务器分步指南](https://books2read.com/vpnguidezh)** [[中文](https://books2read.com/vpnguidezh) | [English](https://books2read.com/vpnguide?store=amazon) | [Español](https://books2read.com/vpnguidees?store=amazon) | [Deutsch](https://books2read.com/vpnguidede?store=amazon) | [Français](https://books2read.com/vpnguidefr?store=amazon) | [Italiano](https://books2read.com/vpnguideit?store=amazon) | [PT](https://books2read.com/vpnguidept?store=amazon) | [日本語](https://books2read.com/vpnguideja?store=amazon)]\n\n## 快速开始\n\n使用以下命令在 Docker 上快速搭建 IPsec VPN 服务器：\n\n```\ndocker run \\\n    --name ipsec-vpn-server \\\n    --restart=always \\\n    -v ikev2-vpn-data:/etc/ipsec.d \\\n    -v /lib/modules:/lib/modules:ro \\\n    -p 500:500/udp \\\n    -p 4500:4500/udp \\\n    -d --privileged \\\n    hwdsl2/ipsec-vpn-server\n```\n\n你的 VPN 登录凭证将会被自动随机生成。请参见 [获取 VPN 登录信息](#获取-vpn-登录信息)。\n\n另外，你也可以在不使用 Docker 的情况下[安装 IPsec VPN](https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/README-zh.md)。要了解更多有关如何使用本镜像的信息，请继续阅读以下部分。\n\n## 功能特性\n\n- 支持具有强大和快速加密算法（例如 AES-GCM）的 IKEv2 模式\n- 生成 VPN 配置文件以自动配置 iOS, macOS 和 Android 设备\n- 支持 Windows, macOS, iOS, Android, Chrome OS 和 Linux 客户端\n- 包括辅助脚本以管理 IKEv2 用户和证书\n\n## 安装 Docker\n\n首先在你的 Linux 服务器上 [安装 Docker](https://docs.docker.com/engine/install/)。另外你也可以使用 [Podman](https://podman.io) 运行本镜像，需要首先为 `docker` 命令 [创建一个别名](https://podman.io/whatis.html)。\n\n高级用户可以在 macOS 上通过安装 [Docker for Mac](https://docs.docker.com/docker-for-mac/) 使用本镜像。在使用 IPsec/L2TP 模式之前，你可能需要运行 `docker restart ipsec-vpn-server` 重启一次 Docker 容器。本镜像不支持 Docker for Windows。\n\n## 下载\n\n预构建的可信任镜像可在 [Docker Hub registry](https://hub.docker.com/r/hwdsl2/ipsec-vpn-server/) 下载：\n\n```\ndocker pull hwdsl2/ipsec-vpn-server\n```\n\n或者，你也可以从 [Quay.io](https://quay.io/repository/hwdsl2/ipsec-vpn-server) 下载：\n\n```\ndocker pull quay.io/hwdsl2/ipsec-vpn-server\ndocker image tag quay.io/hwdsl2/ipsec-vpn-server hwdsl2/ipsec-vpn-server\n```\n\n支持以下架构系统：`linux/amd64`, `linux/arm64` 和 `linux/arm/v7`。\n\n高级用户可以自己从 GitHub [编译源代码](docs/advanced-usage-zh.md#从源代码构建)。\n\n### 镜像对照表\n\n有两个预构建的镜像可用。默认的基于 Alpine 的镜像大小仅 ~18 MB。\n\n|                 | 基于 Alpine               | 基于 Debian                     |\n| --------------- | ------------------------ | ------------------------------ |\n| 镜像名称          | hwdsl2/ipsec-vpn-server  | hwdsl2/ipsec-vpn-server:debian |\n| 压缩后大小        | ~ 18 MB                  | ~ 63 MB                        |\n| 基础镜像          | Alpine Linux 3.20        | Debian Linux 12                |\n| 系统架构          | amd64, arm64, arm/v7     | amd64, arm64, arm/v7           |\n| Libreswan 版本   | 5.1                      | 5.1                            |\n| IPsec/L2TP      | ✅                       | ✅                              |\n| Cisco IPsec     | ✅                       | ✅                              |\n| IKEv2           | ✅                       | ✅                              |\n\n**注：** 要使用基于 Debian 的镜像，请将本自述文件中所有的 `hwdsl2/ipsec-vpn-server` 替换为 `hwdsl2/ipsec-vpn-server:debian`。这些镜像当前与 Synology NAS 系统不兼容。\n\n<details>\n<summary>\n我需要使用较旧版本的 Libreswan 版本 4。\n</summary>\n\n一般建议使用最新的 [Libreswan](https://libreswan.org/) 版本 5，它是本项目的默认版本。但是，如果你想要使用较旧版本的 Libreswan 版本 4，你可以从源代码构建 Docker 镜像：\n\n```\ngit clone https://github.com/hwdsl2/docker-ipsec-vpn-server\ncd docker-ipsec-vpn-server\n# Specify Libreswan version 4\nsed -i 's/SWAN_VER=5\\..*/SWAN_VER=4.15/' Dockerfile Dockerfile.debian\n# To build Alpine-based image\ndocker build -t hwdsl2/ipsec-vpn-server .\n# To build Debian-based image\ndocker build -f Dockerfile.debian -t hwdsl2/ipsec-vpn-server:debian .\n```\n</details>\n\n## 如何使用本镜像\n\n### 环境变量\n\n**注：** 所有这些变量对于本镜像都是可选的，也就是说无需定义它们就可以搭建 IPsec VPN 服务器。你可以运行 `touch vpn.env` 创建一个空的 `env` 文件，然后跳到下一节。\n\n这个 Docker 镜像使用以下几个变量，可以在一个 `env` 文件中定义（参见[示例](vpn.env.example)）：\n\n```\nVPN_IPSEC_PSK=your_ipsec_pre_shared_key\nVPN_USER=your_vpn_username\nVPN_PASSWORD=your_vpn_password\n```\n\n这将创建一个用于 VPN 登录的用户账户，它可以在你的多个设备上使用[*](#重要提示)。 IPsec PSK (预共享密钥) 由 `VPN_IPSEC_PSK` 环境变量指定。 VPN 用户名和密码分别在 `VPN_USER` 和 `VPN_PASSWORD` 中定义。\n\n支持创建额外的 VPN 用户，如果需要，可以像下面这样在你的 `env` 文件中定义。用户名和密码必须分别使用空格进行分隔，并且用户名不能有重复。所有的 VPN 用户将共享同一个 IPsec PSK。\n\n```\nVPN_ADDL_USERS=additional_username_1 additional_username_2\nVPN_ADDL_PASSWORDS=additional_password_1 additional_password_2\n```\n\n**注：** 在你的 `env` 文件中，**不要**为变量值添加 `\"\"` 或者 `''`，或在 `=` 两边添加空格。**不要**在值中使用这些字符： `\\ \" '`。一个安全的 IPsec PSK 应该至少包含 20 个随机字符。\n\n**注：** 如果在创建 Docker 容器后修改 `env` 文件，则必须删除并重新创建容器才能使更改生效。参见[更新 Docker 镜像](#更新-docker-镜像)。\n\n### 其他环境变量\n\n高级用户可以指定一个域名，客户端名称和/或另外的 DNS 服务器。这是可选的。\n\n<details>\n<summary>\n了解如何指定一个域名，客户端名称和/或另外的 DNS 服务器。\n</summary>\n\n高级用户可以指定一个域名作为 IKEv2 服务器地址。这是可选的。该域名必须是一个全称域名 (FQDN)。示例如下：\n\n```\nVPN_DNS_NAME=vpn.example.com\n```\n\n你可以指定第一个 IKEv2 客户端的名称。该名称不能包含空格或者除 `-` `_` 之外的任何特殊字符。如果未指定，则使用默认值 `vpnclient`。\n\n```\nVPN_CLIENT_NAME=your_client_name\n```\n\n在 VPN 已连接时，客户端默认配置为使用 [Google Public DNS](https://developers.google.com/speed/public-dns/)。你可以为所有的 VPN 模式指定另外的 DNS 服务器。示例如下：\n\n```\nVPN_DNS_SRV1=1.1.1.1\nVPN_DNS_SRV2=1.0.0.1\n```\n\n有关详细信息以及一些流行的公共 DNS 提供商的列表，参见[使用其他的 DNS 服务器](docs/advanced-usage-zh.md)。\n\n默认情况下，导入 IKEv2 客户端配置时不需要密码。你可以选择使用随机密码保护客户端配置文件。\n\n```\nVPN_PROTECT_CONFIG=yes\n```\n\n**注：** 如果在 Docker 容器中已经配置了 IKEv2，则以上变量对 IKEv2 模式无效。在这种情况下，你可以移除 IKEv2 并使用自定义选项重新配置它。参见 [配置并使用 IKEv2 VPN](#配置并使用-ikev2-vpn)。\n</details>\n\n### 运行 IPsec VPN 服务器\n\n使用本镜像创建一个新的 Docker 容器 （将 `./vpn.env` 替换为你自己的 `env` 文件）：\n\n```\ndocker run \\\n    --name ipsec-vpn-server \\\n    --env-file ./vpn.env \\\n    --restart=always \\\n    -v ikev2-vpn-data:/etc/ipsec.d \\\n    -v /lib/modules:/lib/modules:ro \\\n    -p 500:500/udp \\\n    -p 4500:4500/udp \\\n    -d --privileged \\\n    hwdsl2/ipsec-vpn-server\n```\n\n在该命令中，我们使用 `docker run` 的 `-v` 选项来创建一个名为 `ikev2-vpn-data` 的新 [Docker 卷](https://docs.docker.com/storage/volumes/)，并且将它挂载到容器内的 `/etc/ipsec.d` 目录下。IKEv2 的相关数据（比如证书和密钥）在该卷中保存，之后当你需要重新创建 Docker 容器的时候，只需指定同一个卷。\n\n推荐在使用本镜像时启用 IKEv2。如果你不想启用 IKEv2 而仅使用 IPsec/L2TP 和 IPsec/XAuth (\"Cisco IPsec\") 模式连接到 VPN，可以去掉上面 `docker run` 命令中的第一个 `-v` 选项。\n\n**注：** 高级用户也可以 [不启用 privileged 模式运行](docs/advanced-usage-zh.md#不启用-privileged-模式运行)。\n\n### 获取 VPN 登录信息\n\n如果你在上述 `docker run` 命令中没有指定 `env` 文件，`VPN_USER` 会默认为 `vpnuser`，并且 `VPN_IPSEC_PSK` 和 `VPN_PASSWORD` 会被自动随机生成。要获取这些登录信息，可以查看容器的日志：\n\n```\ndocker logs ipsec-vpn-server\n```\n\n在命令输出中查找这些行：\n\n```\nConnect to your new VPN with these details:\n\nServer IP: 你的VPN服务器IP\nIPsec PSK: 你的IPsec预共享密钥\nUsername: 你的VPN用户名\nPassword: 你的VPN密码\n```\n\n在命令输出中也会包含 IKEv2 配置信息（如果已启用）。\n\n（可选步骤）备份自动生成的 VPN 登录信息（如果有）到当前目录：\n\n```\ndocker cp ipsec-vpn-server:/etc/ipsec.d/vpn-gen.env ./\n```\n\n## 下一步\n\n*其他语言版本: [English](README.md#next-steps), [中文](README-zh.md#下一步)。*\n\n配置你的计算机或其它设备使用 VPN。请参见：\n\n**[配置并使用 IKEv2 VPN（推荐）](#配置并使用-ikev2-vpn)**\n\n**[配置 IPsec/L2TP VPN 客户端](https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-zh.md)**\n\n**[配置 IPsec/XAuth (\"Cisco IPsec\") VPN 客户端](https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-xauth-zh.md)**\n\n**阅读 [:book: VPN book](https://ko-fi.com/post/Support-this-project-and-get-access-to-supporter-o-X8X5FVFZC) 以访问 [额外内容](https://ko-fi.com/post/Support-this-project-and-get-access-to-supporter-o-X8X5FVFZC)。**\n\n开始使用自己的专属 VPN! :sparkles::tada::rocket::sparkles:\n\n## 重要提示\n\n**Windows 用户** 对于 IPsec/L2TP 模式，在首次连接之前需要 [修改注册表](https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-zh.md#windows-错误-809)，以解决 VPN 服务器或客户端与 NAT（比如家用路由器）的兼容问题。\n\n同一个 VPN 账户可以在你的多个设备上使用。但是由于 IPsec/L2TP 的局限性，如果需要连接在同一个 NAT（比如家用路由器）后面的多个设备，你必须使用 [IKEv2](#配置并使用-ikev2-vpn) 或者 [IPsec/XAuth](https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-xauth-zh.md) 模式。\n\n如需添加，修改或者删除 VPN 用户账户，首先更新你的 `env` 文件，然后你必须按照 [下一节](#更新-docker-镜像) 的说明来删除并重新创建 Docker 容器。高级用户可以 [绑定挂载](docs/advanced-usage-zh.md#绑定挂载-env-文件) `env` 文件。\n\n对于有外部防火墙的服务器（比如 [EC2](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-security-groups.html)/[GCE](https://cloud.google.com/vpc/docs/firewalls)），请为 VPN 打开 UDP 端口 500 和 4500。阿里云用户请参见 [#433](https://github.com/hwdsl2/setup-ipsec-vpn/issues/433)。\n\n在 VPN 已连接时，客户端配置为使用 [Google Public DNS](https://developers.google.com/speed/public-dns/)。如果偏好其它的域名解析服务，请看 [这里](docs/advanced-usage-zh.md#使用其他的-dns-服务器)。\n\n## 更新 Docker 镜像\n\n要更新 Docker 镜像和容器，首先 [下载](#下载) 最新版本：\n\n```\ndocker pull hwdsl2/ipsec-vpn-server\n```\n\n如果 Docker 镜像已经是最新的，你会看到提示：\n\n```\nStatus: Image is up to date for hwdsl2/ipsec-vpn-server:latest\n```\n\n否则将会下载最新版本。要更新你的 Docker 容器，首先在纸上记下你所有的 [VPN 登录信息](#获取-vpn-登录信息)。然后删除 Docker 容器： `docker rm -f ipsec-vpn-server`。最后按照 [如何使用本镜像](#如何使用本镜像) 的说明来重新创建它。\n\n## 配置并使用 IKEv2 VPN\n\nIKEv2 模式是比 IPsec/L2TP 和 IPsec/XAuth (\"Cisco IPsec\") 更佳的连接模式，该模式无需 IPsec PSK, 用户名或密码。更多信息请看[这里](https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/ikev2-howto-zh.md)。\n\n首先，查看容器的日志以获取 IKEv2 配置信息：\n\n```bash\ndocker logs ipsec-vpn-server\n```\n\n**注：** 如果你无法找到 IKEv2 配置信息，IKEv2 可能没有在容器中启用。尝试按照 [更新 Docker 镜像](#更新-docker-镜像) 一节的说明更新 Docker 镜像和容器。\n\n在 IKEv2 安装过程中会创建一个 IKEv2 客户端（默认名称为 `vpnclient`），并且导出它的配置到 **容器内** 的 `/etc/ipsec.d` 目录下。你可以将配置文件复制到 Docker 主机：\n\n```bash\n# 查看容器内的 /etc/ipsec.d 目录的文件\ndocker exec -it ipsec-vpn-server ls -l /etc/ipsec.d\n# 示例：将一个客户端配置文件从容器复制到 Docker 主机当前目录\ndocker cp ipsec-vpn-server:/etc/ipsec.d/vpnclient.p12 ./\n```\n\n**下一步：** [配置你的设备](https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/ikev2-howto-zh.md) 以使用 IKEv2 VPN。\n\n<details>\n<summary>\n了解如何管理 IKEv2 客户端。\n</summary>\n\n你可以使用辅助脚本管理 IKEv2 客户端。示例如下。如需自定义客户端选项，可以在不添加参数的情况下运行脚本。\n\n```bash\n# 添加一个客户端（使用默认选项）\ndocker exec -it ipsec-vpn-server ikev2.sh --addclient [client name]\n# 导出一个已有的客户端的配置\ndocker exec -it ipsec-vpn-server ikev2.sh --exportclient [client name]\n# 列出已有的客户端\ndocker exec -it ipsec-vpn-server ikev2.sh --listclients\n# 显示使用信息\ndocker exec -it ipsec-vpn-server ikev2.sh -h\n```\n\n**注：** 如果你遇到错误 \"executable file not found\"，将上面的 `ikev2.sh` 换成 `/opt/src/ikev2.sh`。\n</details>\n<details>\n<summary>\n了解如何更改 IKEv2 服务器地址。\n</summary>\n\n在某些情况下，你可能需要更改 IKEv2 服务器地址。例如切换为使用域名，或者在服务器的 IP 更改之后。要更改 IKEv2 服务器地址，首先[在容器中运行 Bash shell](docs/advanced-usage-zh.md#在容器中运行-bash-shell)，然后[按照这里的说明操作](https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/ikev2-howto-zh.md#更改-ikev2-服务器地址)。请注意，容器的日志在你重启 Docker 容器之前将不显示新的 IKEv2 服务器地址。\n</details>\n<details>\n<summary>\n移除 IKEv2 并使用自定义选项重新配置。\n</summary>\n\n在某些情况下，你可能需要移除 IKEv2 并使用自定义选项重新配置它。\n\n**警告：** 这将**永久删除**所有的 IKEv2 配置（包括证书和密钥），并且**不可撤销**！\n\n**选项 1:** 使用辅助脚本移除 IKEv2 并重新配置。\n\n请注意，这将覆盖你在 `env` 文件中指定的变量，例如 `VPN_DNS_NAME` 和 `VPN_CLIENT_NAME`，并且容器的日志将不再显示 IKEv2 的最新信息。\n\n```bash\n# 移除 IKEv2 并删除所有的 IKEv2 配置\ndocker exec -it ipsec-vpn-server ikev2.sh --removeikev2\n# 使用自定义选项重新配置 IKEv2\ndocker exec -it ipsec-vpn-server ikev2.sh\n```\n\n**选项 2:** 移除 `ikev2-vpn-data` 并重新创建容器。\n\n1. 在纸上记下你所有的 [VPN 登录信息](#获取-vpn-登录信息)。\n1. 删除 Docker 容器：`docker rm -f ipsec-vpn-server`。\n1. 删除 `ikev2-vpn-data` 卷：`docker volume rm ikev2-vpn-data`。\n1. 更新你的 `env` 文件并添加自定义 IKEv2 选项，例如 `VPN_DNS_NAME` 和 `VPN_CLIENT_NAME`，然后重新创建容器。参见[如何使用本镜像](#如何使用本镜像)。\n</details>\n\n## 高级用法\n\n请参见 [高级用法](docs/advanced-usage-zh.md)。\n\n- [使用其他的 DNS 服务器](docs/advanced-usage-zh.md#使用其他的-dns-服务器)\n- [不启用 privileged 模式运行](docs/advanced-usage-zh.md#不启用-privileged-模式运行)\n- [选择 VPN 模式](docs/advanced-usage-zh.md#选择-vpn-模式)\n- [访问 Docker 主机上的其它容器](docs/advanced-usage-zh.md#访问-docker-主机上的其它容器)\n- [指定 VPN 服务器的公有 IP](docs/advanced-usage-zh.md#指定-vpn-服务器的公有-ip)\n- [为 VPN 客户端指定静态 IP](docs/advanced-usage-zh.md#为-vpn-客户端指定静态-ip)\n- [自定义 VPN 子网](docs/advanced-usage-zh.md#自定义-vpn-子网)\n- [VPN 分流](docs/advanced-usage-zh.md#vpn-分流)\n- [关于 host network 模式](docs/advanced-usage-zh.md#关于-host-network-模式)\n- [启用 Libreswan 日志](docs/advanced-usage-zh.md#启用-libreswan-日志)\n- [查看服务器状态](docs/advanced-usage-zh.md#查看服务器状态)\n- [从源代码构建](docs/advanced-usage-zh.md#从源代码构建)\n- [在容器中运行 Bash shell](docs/advanced-usage-zh.md#在容器中运行-bash-shell)\n- [绑定挂载 env 文件](docs/advanced-usage-zh.md#绑定挂载-env-文件)\n- [部署 Google BBR 拥塞控制](docs/advanced-usage-zh.md#部署-google-bbr-拥塞控制)\n\n## 技术细节\n\n需要运行以下两个服务：`Libreswan (pluto)` 提供 IPsec VPN，`xl2tpd` 提供 L2TP 支持。\n\n默认的 IPsec 配置支持以下协议：\n\n* IPsec/L2TP with PSK\n* IKEv1 with PSK and XAuth (\"Cisco IPsec\")\n* IKEv2\n\n为使 VPN 服务器正常工作，将会打开以下端口：\n\n* 4500/udp and 500/udp for IPsec\n\n## 授权协议\n\n**注：** 预构建镜像中的软件组件（例如 Libreswan 和 xl2tpd）在其各自版权所有者选择的相应许可下。对于任何预构建的镜像的使用，用户有责任确保对该镜像的任何使用符合其中包含的所有软件的任何相关许可。\n\n版权所有 (C) 2016-2024 [Lin Song](https://github.com/hwdsl2) [![View my profile on LinkedIn](https://static.licdn.com/scds/common/u/img/webpromo/btn_viewmy_160x25.png)](https://www.linkedin.com/in/linsongui)   \n基于 [Thomas Sarlandie 的工作](https://github.com/sarfata/voodooprivacy) (版权所有 2012)\n\n[![Creative Commons License](https://i.creativecommons.org/l/by-sa/3.0/88x31.png)](http://creativecommons.org/licenses/by-sa/3.0/)   \n这个项目是以 [知识共享署名-相同方式共享3.0](http://creativecommons.org/licenses/by-sa/3.0/) 许可协议授权。   \n必须署名： 请包括我的名字在任何衍生产品，并且让我知道你是如何改善它的！\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.2685546875,
          "content": "[English](README.md) | [中文](README-zh.md)\n\n# IPsec VPN Server on Docker\n\n[![Build Status](https://github.com/hwdsl2/docker-ipsec-vpn-server/actions/workflows/main-alpine.yml/badge.svg)](https://github.com/hwdsl2/docker-ipsec-vpn-server/actions/workflows/main-alpine.yml) [![GitHub Stars](docs/images/badges/github-stars.svg)](https://github.com/hwdsl2/docker-ipsec-vpn-server/stargazers) [![Docker Stars](docs/images/badges/docker-stars.svg)](https://hub.docker.com/r/hwdsl2/ipsec-vpn-server/) [![Docker Pulls](docs/images/badges/docker-pulls.svg)](https://hub.docker.com/r/hwdsl2/ipsec-vpn-server/)\n\nDocker image to run an IPsec VPN server, with IPsec/L2TP, Cisco IPsec and IKEv2.\n\nBased on Alpine 3.20 or Debian 12 with [Libreswan](https://libreswan.org) (IPsec VPN software) and [xl2tpd](https://github.com/xelerance/xl2tpd) (L2TP daemon).\n\nAn IPsec VPN encrypts your network traffic, so that nobody between you and the VPN server can eavesdrop on your data as it travels via the Internet. This is especially useful when using unsecured networks, e.g. at coffee shops, airports or hotel rooms.\n\n**[&raquo; :book: Book: Build Your Own VPN Server](https://books2read.com/vpnguide?store=amazon)** [[English](https://books2read.com/vpnguide?store=amazon) | [中文](https://books2read.com/vpnguidezh) | [Español](https://books2read.com/vpnguidees?store=amazon) | [Deutsch](https://books2read.com/vpnguidede?store=amazon) | [Français](https://books2read.com/vpnguidefr?store=amazon) | [Italiano](https://books2read.com/vpnguideit?store=amazon) | [PT](https://books2read.com/vpnguidept?store=amazon) | [日本語](https://books2read.com/vpnguideja?store=amazon)]\n\n## Quick start\n\nUse this command to set up an IPsec VPN server on Docker:\n\n```\ndocker run \\\n    --name ipsec-vpn-server \\\n    --restart=always \\\n    -v ikev2-vpn-data:/etc/ipsec.d \\\n    -v /lib/modules:/lib/modules:ro \\\n    -p 500:500/udp \\\n    -p 4500:4500/udp \\\n    -d --privileged \\\n    hwdsl2/ipsec-vpn-server\n```\n\nYour VPN login details will be randomly generated. See [Retrieve VPN login details](#retrieve-vpn-login-details).\n\nAlternatively, you may [set up IPsec VPN without Docker](https://github.com/hwdsl2/setup-ipsec-vpn). To learn more about how to use this image, read the sections below.\n\n## Features\n\n- Supports IKEv2 with strong and fast ciphers (e.g. AES-GCM)\n- Generates VPN profiles to auto-configure iOS, macOS and Android devices\n- Supports Windows, macOS, iOS, Android, Chrome OS and Linux as VPN clients\n- Includes a helper script to manage IKEv2 users and certificates\n\n## Install Docker\n\nFirst, [install Docker](https://docs.docker.com/engine/install/) on your Linux server. You may also use [Podman](https://podman.io) to run this image, after [creating an alias](https://podman.io/whatis.html) for `docker`.\n\nAdvanced users can use this image on macOS with [Docker for Mac](https://docs.docker.com/docker-for-mac/). Before using IPsec/L2TP mode, you may need to restart the Docker container once with `docker restart ipsec-vpn-server`. This image does not support Docker for Windows.\n\n## Download\n\nGet the trusted build from the [Docker Hub registry](https://hub.docker.com/r/hwdsl2/ipsec-vpn-server/):\n\n```\ndocker pull hwdsl2/ipsec-vpn-server\n```\n\nAlternatively, you may download from [Quay.io](https://quay.io/repository/hwdsl2/ipsec-vpn-server):\n\n```\ndocker pull quay.io/hwdsl2/ipsec-vpn-server\ndocker image tag quay.io/hwdsl2/ipsec-vpn-server hwdsl2/ipsec-vpn-server\n```\n\nSupported platforms: `linux/amd64`, `linux/arm64` and `linux/arm/v7`.\n\nAdvanced users can [build from source code](docs/advanced-usage.md#build-from-source-code) on GitHub.\n\n### Image comparison\n\nTwo pre-built images are available. The default Alpine-based image is only ~18 MB.\n\n|                   | Alpine-based             | Debian-based                   |\n| ----------------- | ------------------------ | ------------------------------ |\n| Image name        | hwdsl2/ipsec-vpn-server  | hwdsl2/ipsec-vpn-server:debian |\n| Compressed size   | ~ 18 MB                  | ~ 63 MB                        |\n| Base image        | Alpine Linux 3.20        | Debian Linux 12                |\n| Platforms         | amd64, arm64, arm/v7     | amd64, arm64, arm/v7           |\n| Libreswan version | 5.1                      | 5.1                            |\n| IPsec/L2TP        | ✅                       | ✅                              |\n| Cisco IPsec       | ✅                       | ✅                              |\n| IKEv2             | ✅                       | ✅                              |\n\n**Note:** To use the Debian-based image, replace every `hwdsl2/ipsec-vpn-server` with `hwdsl2/ipsec-vpn-server:debian` in this README. These images are not currently compatible with Synology NAS systems.\n\n<details>\n<summary>\nI want to use the older Libreswan version 4.\n</summary>\n\nIt is generally recommended to use the latest [Libreswan](https://libreswan.org/) version 5, which is the default version in this project. However, if you want to use the older Libreswan version 4, you can build the Docker image from source code:\n\n```\ngit clone https://github.com/hwdsl2/docker-ipsec-vpn-server\ncd docker-ipsec-vpn-server\n# Specify Libreswan version 4\nsed -i 's/SWAN_VER=5\\..*/SWAN_VER=4.15/' Dockerfile Dockerfile.debian\n# To build Alpine-based image\ndocker build -t hwdsl2/ipsec-vpn-server .\n# To build Debian-based image\ndocker build -f Dockerfile.debian -t hwdsl2/ipsec-vpn-server:debian .\n```\n</details>\n\n## How to use this image\n\n### Environment variables\n\n**Note:** All the variables to this image are optional, which means you don't have to type in any variable, and you can have an IPsec VPN server out of the box! To do that, create an empty `env` file using `touch vpn.env`, and skip to the next section.\n\nThis Docker image uses the following variables, that can be declared in an `env` file (see [example](vpn.env.example)):\n\n```\nVPN_IPSEC_PSK=your_ipsec_pre_shared_key\nVPN_USER=your_vpn_username\nVPN_PASSWORD=your_vpn_password\n```\n\nThis will create a user account for VPN login, which can be used by your multiple devices[*](#important-notes). The IPsec PSK (pre-shared key) is specified by the `VPN_IPSEC_PSK` environment variable. The VPN username is defined in `VPN_USER`, and VPN password is specified by `VPN_PASSWORD`.\n\nAdditional VPN users are supported, and can be optionally declared in your `env` file like this. Usernames and passwords must be separated by spaces, and usernames cannot contain duplicates. All VPN users will share the same IPsec PSK.\n\n```\nVPN_ADDL_USERS=additional_username_1 additional_username_2\nVPN_ADDL_PASSWORDS=additional_password_1 additional_password_2\n```\n\n**Note:** In your `env` file, DO NOT put `\"\"` or `''` around values, or add space around `=`. DO NOT use these special characters within values: `\\ \" '`. A secure IPsec PSK should consist of at least 20 random characters.\n\n**Note:** If you modify the `env` file after the Docker container is already created, you must remove and re-create the container for the changes to take effect. Refer to [Update Docker image](#update-docker-image).\n\n### Additional environment variables\n\nAdvanced users can optionally specify a DNS name, client name and/or custom DNS servers.\n\n<details>\n<summary>\nLearn how to specify a DNS name, client name and/or custom DNS servers.\n</summary>\n\nAdvanced users can optionally specify a DNS name for the IKEv2 server address. The DNS name must be a fully qualified domain name (FQDN). Example:\n\n```\nVPN_DNS_NAME=vpn.example.com\n```\n\nYou may specify a name for the first IKEv2 client. Use one word only, no special characters except `-` and `_`. The default is `vpnclient` if not specified.\n\n```\nVPN_CLIENT_NAME=your_client_name\n```\n\nBy default, clients are set to use [Google Public DNS](https://developers.google.com/speed/public-dns/) when the VPN is active. You may specify custom DNS server(s) for all VPN modes. Example:\n\n```\nVPN_DNS_SRV1=1.1.1.1\nVPN_DNS_SRV2=1.0.0.1\n```\n\nFor more details and a list of some popular public DNS providers, see [Use alternative DNS servers](docs/advanced-usage.md).\n\nBy default, no password is required when importing IKEv2 client configuration. You can choose to protect client config files using a random password.\n\n```\nVPN_PROTECT_CONFIG=yes\n```\n\n**Note:** The variables above have no effect for IKEv2 mode, if IKEv2 is already set up in the Docker container. In this case, you may remove IKEv2 and set it up again using custom options. Refer to [Configure and use IKEv2 VPN](#configure-and-use-ikev2-vpn).\n</details>\n\n### Start the IPsec VPN server\n\nCreate a new Docker container from this image (replace `./vpn.env` with your own `env` file):\n\n```\ndocker run \\\n    --name ipsec-vpn-server \\\n    --env-file ./vpn.env \\\n    --restart=always \\\n    -v ikev2-vpn-data:/etc/ipsec.d \\\n    -v /lib/modules:/lib/modules:ro \\\n    -p 500:500/udp \\\n    -p 4500:4500/udp \\\n    -d --privileged \\\n    hwdsl2/ipsec-vpn-server\n```\n\nIn this command, we use the `-v` option of `docker run` to create a new [Docker volume](https://docs.docker.com/storage/volumes/) named `ikev2-vpn-data`, and mount it into `/etc/ipsec.d` in the container. IKEv2 related data such as certificates and keys will persist in the volume, and later when you need to re-create the Docker container, just specify the same volume again.\n\nIt is recommended to enable IKEv2 when using this image. However, if you prefer not to enable IKEv2 and use only the IPsec/L2TP and IPsec/XAuth (\"Cisco IPsec\") modes to connect to the VPN, remove the first `-v` option from the `docker run` command above.\n\n**Note:** Advanced users can also [run without privileged mode](docs/advanced-usage.md#run-without-privileged-mode).\n\n### Retrieve VPN login details\n\nIf you did not specify an `env` file in the `docker run` command above, `VPN_USER` will default to `vpnuser` and both `VPN_IPSEC_PSK` and `VPN_PASSWORD` will be randomly generated. To retrieve them, view the container logs:\n\n```\ndocker logs ipsec-vpn-server\n```\n\nSearch for these lines in the output:\n\n```\nConnect to your new VPN with these details:\n\nServer IP: your_vpn_server_ip\nIPsec PSK: your_ipsec_pre_shared_key\nUsername: your_vpn_username\nPassword: your_vpn_password\n```\n\nThe output will also include details for IKEv2 mode, if enabled.\n\n(Optional) Backup the generated VPN login details (if any) to the current directory:\n\n```\ndocker cp ipsec-vpn-server:/etc/ipsec.d/vpn-gen.env ./\n```\n\n## Next steps\n\n*Read this in other languages: [English](README.md#next-steps), [中文](README-zh.md#下一步).*\n\nGet your computer or device to use the VPN. Please refer to:\n\n**[Configure and use IKEv2 VPN (recommended)](#configure-and-use-ikev2-vpn)**\n\n**[Configure IPsec/L2TP VPN Clients](https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients.md)**\n\n**[Configure IPsec/XAuth (\"Cisco IPsec\") VPN Clients](https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-xauth.md)**\n\n**Read [:book: VPN book](https://ko-fi.com/post/Support-this-project-and-get-access-to-supporter-o-O5O7FVF8J) to access [extra content](https://ko-fi.com/post/Support-this-project-and-get-access-to-supporter-o-O5O7FVF8J).**\n\nEnjoy your very own VPN! :sparkles::tada::rocket::sparkles:\n\n## Important notes\n\n**Windows users**: For IPsec/L2TP mode, a [one-time registry change](https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients.md#windows-error-809) is required if the VPN server or client is behind NAT (e.g. home router).\n\nThe same VPN account can be used by your multiple devices. However, due to an IPsec/L2TP limitation, if you wish to connect multiple devices from behind the same NAT (e.g. home router), you must use [IKEv2](#configure-and-use-ikev2-vpn) or [IPsec/XAuth](https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-xauth.md) mode.\n\nIf you wish to add, edit or remove VPN user accounts, first update your `env` file, then you must remove and re-create the Docker container using instructions from the [next section](#update-docker-image). Advanced users can [bind mount](docs/advanced-usage.md#bind-mount-the-env-file) the `env` file.\n\nFor servers with an external firewall (e.g. [EC2](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-security-groups.html)/[GCE](https://cloud.google.com/vpc/docs/firewalls)), open UDP ports 500 and 4500 for the VPN. Aliyun users, see [#433](https://github.com/hwdsl2/setup-ipsec-vpn/issues/433).\n\nClients are set to use [Google Public DNS](https://developers.google.com/speed/public-dns/) when the VPN is active. If another DNS provider is preferred, read [this section](docs/advanced-usage.md#use-alternative-dns-servers).\n\n## Update Docker image\n\nTo update the Docker image and container, first [download](#download) the latest version:\n\n```\ndocker pull hwdsl2/ipsec-vpn-server\n```\n\nIf the Docker image is already up to date, you should see:\n\n```\nStatus: Image is up to date for hwdsl2/ipsec-vpn-server:latest\n```\n\nOtherwise, it will download the latest version. To update your Docker container, first write down all your [VPN login details](#retrieve-vpn-login-details). Then remove the Docker container with `docker rm -f ipsec-vpn-server`. Finally, re-create it using instructions from [How to use this image](#how-to-use-this-image).\n\n## Configure and use IKEv2 VPN\n\nIKEv2 mode has improvements over IPsec/L2TP and IPsec/XAuth (\"Cisco IPsec\"), and does not require an IPsec PSK, username or password. Read more [here](https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/ikev2-howto.md).\n\nFirst, check container logs to view details for IKEv2:\n\n```bash\ndocker logs ipsec-vpn-server\n```\n\n**Note:** If you cannot find IKEv2 details, IKEv2 may not be enabled in the container. Try updating the Docker image and container using instructions from the [Update Docker image](#update-docker-image) section.\n\nDuring IKEv2 setup, an IKEv2 client (with default name `vpnclient`) is created, with its configuration exported to `/etc/ipsec.d` **inside the container**. To copy config file(s) to the Docker host:\n\n```bash\n# Check contents of /etc/ipsec.d in the container\ndocker exec -it ipsec-vpn-server ls -l /etc/ipsec.d\n# Example: Copy a client config file from the container\n# to the current directory on the Docker host\ndocker cp ipsec-vpn-server:/etc/ipsec.d/vpnclient.p12 ./\n```\n\n**Next steps:** [Configure your devices](https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/ikev2-howto.md) to use the IKEv2 VPN.\n\n<details>\n<summary>\nLearn how to manage IKEv2 clients.\n</summary>\n\nYou can manage IKEv2 clients using the helper script. See examples below. To customize client options, run the script without arguments.\n\n```bash\n# Add a new client (using default options)\ndocker exec -it ipsec-vpn-server ikev2.sh --addclient [client name]\n# Export configuration for an existing client\ndocker exec -it ipsec-vpn-server ikev2.sh --exportclient [client name]\n# List existing clients\ndocker exec -it ipsec-vpn-server ikev2.sh --listclients\n# Show usage\ndocker exec -it ipsec-vpn-server ikev2.sh -h\n```\n\n**Note:** If you encounter error \"executable file not found\", replace `ikev2.sh` above with `/opt/src/ikev2.sh`.\n</details>\n<details>\n<summary>\nLearn how to change the IKEv2 server address.\n</summary>\n\nIn certain circumstances, you may need to change the IKEv2 server address. For example, to switch to use a DNS name, or after server IP changes. To change the IKEv2 server address, first [open a bash shell inside the container](docs/advanced-usage.md#bash-shell-inside-container), then [follow these instructions](https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/ikev2-howto.md#change-ikev2-server-address). Note that the container logs will not show the new IKEv2 server address until you restart the Docker container.\n</details>\n<details>\n<summary>\nRemove IKEv2 and set it up again using custom options.\n</summary>\n\nIn certain circumstances, you may need to remove IKEv2 and set it up again using custom options.\n\n**Warning:** All IKEv2 configuration including certificates and keys will be **permanently deleted**. This **cannot be undone**!\n\n**Option 1:** Remove IKEv2 and set it up again using the helper script.\n\nNote that this will override variables you specified in the `env` file, such as `VPN_DNS_NAME` and `VPN_CLIENT_NAME`, and the container logs will no longer show up-to-date information for IKEv2.\n\n```bash\n# Remove IKEv2 and delete all IKEv2 configuration\ndocker exec -it ipsec-vpn-server ikev2.sh --removeikev2\n# Set up IKEv2 again using custom options\ndocker exec -it ipsec-vpn-server ikev2.sh\n```\n\n**Option 2:** Remove `ikev2-vpn-data` and re-create the container.\n\n1. Write down all your [VPN login details](#retrieve-vpn-login-details).\n1. Remove the Docker container: `docker rm -f ipsec-vpn-server`.\n1. Remove the `ikev2-vpn-data` volume: `docker volume rm ikev2-vpn-data`.\n1. Update your `env` file and add custom IKEv2 options such as `VPN_DNS_NAME` and `VPN_CLIENT_NAME`, then re-create the container. Refer to [How to use this image](#how-to-use-this-image).\n</details>\n\n## Advanced usage\n\nSee [Advanced usage](docs/advanced-usage.md).\n\n- [Use alternative DNS servers](docs/advanced-usage.md#use-alternative-dns-servers)\n- [Run without privileged mode](docs/advanced-usage.md#run-without-privileged-mode)\n- [Select VPN modes](docs/advanced-usage.md#select-vpn-modes)\n- [Access other containers on the Docker host](docs/advanced-usage.md#access-other-containers-on-the-docker-host)\n- [Specify VPN server's public IP](docs/advanced-usage.md#specify-vpn-servers-public-ip)\n- [Assign static IPs to VPN clients](docs/advanced-usage.md#assign-static-ips-to-vpn-clients)\n- [Customize VPN subnets](docs/advanced-usage.md#customize-vpn-subnets)\n- [Split tunneling](docs/advanced-usage.md#split-tunneling)\n- [About host network mode](docs/advanced-usage.md#about-host-network-mode)\n- [Enable Libreswan logs](docs/advanced-usage.md#enable-libreswan-logs)\n- [Check server status](docs/advanced-usage.md#check-server-status)\n- [Build from source code](docs/advanced-usage.md#build-from-source-code)\n- [Bash shell inside container](docs/advanced-usage.md#bash-shell-inside-container)\n- [Bind mount the env file](docs/advanced-usage.md#bind-mount-the-env-file)\n- [Deploy Google BBR congestion control](docs/advanced-usage.md#deploy-google-bbr-congestion-control)\n\n## Technical details\n\nThere are two services running: `Libreswan (pluto)` for the IPsec VPN, and `xl2tpd` for L2TP support.\n\nThe default IPsec configuration supports:\n\n* IPsec/L2TP with PSK\n* IKEv1 with PSK and XAuth (\"Cisco IPsec\")\n* IKEv2\n\nThe ports that are exposed for this container to work are:\n\n* 4500/udp and 500/udp for IPsec\n\n## License\n\n**Note:** The software components inside the pre-built image (such as Libreswan and xl2tpd) are under the respective licenses chosen by their respective copyright holders. As for any pre-built image usage, it is the image user's responsibility to ensure that any use of this image complies with any relevant licenses for all software contained within.\n\nCopyright (C) 2016-2024 [Lin Song](https://github.com/hwdsl2) [![View my profile on LinkedIn](https://static.licdn.com/scds/common/u/img/webpromo/btn_viewmy_160x25.png)](https://www.linkedin.com/in/linsongui)   \nBased on [the work of Thomas Sarlandie](https://github.com/sarfata/voodooprivacy) (Copyright 2012)\n\n[![Creative Commons License](https://i.creativecommons.org/l/by-sa/3.0/88x31.png)](http://creativecommons.org/licenses/by-sa/3.0/)   \nThis work is licensed under the [Creative Commons Attribution-ShareAlike 3.0 Unported License](http://creativecommons.org/licenses/by-sa/3.0/)   \nAttribution required: please include my name in any derivative and let me know how you have improved it!\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.369140625,
          "content": "version: '3'\n\nvolumes:\n  ikev2-vpn-data:\n\nservices:\n  vpn:\n    image: hwdsl2/ipsec-vpn-server\n    restart: always\n    env_file:\n      - ./vpn.env\n    ports:\n      - \"500:500/udp\"\n      - \"4500:4500/udp\"\n    privileged: true\n    hostname: ipsec-vpn-server\n    container_name: ipsec-vpn-server\n    volumes:\n      - ikev2-vpn-data:/etc/ipsec.d\n      - /lib/modules:/lib/modules:ro\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "run.sh",
          "type": "blob",
          "size": 23.708984375,
          "content": "#!/bin/bash\n#\n# Docker script to configure and start an IPsec VPN server\n#\n# DO NOT RUN THIS SCRIPT ON YOUR PC OR MAC! THIS IS ONLY MEANT TO BE RUN\n# IN A CONTAINER!\n#\n# This file is part of IPsec VPN Docker image, available at:\n# https://github.com/hwdsl2/docker-ipsec-vpn-server\n#\n# Copyright (C) 2016-2024 Lin Song <linsongui@gmail.com>\n# Based on the work of Thomas Sarlandie (Copyright 2012)\n#\n# This work is licensed under the Creative Commons Attribution-ShareAlike 3.0\n# Unported License: http://creativecommons.org/licenses/by-sa/3.0/\n#\n# Attribution required: please include my name in any derivative and let me\n# know how you have improved it!\n\nexport PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n\nexiterr()  { echo \"Error: $1\" >&2; exit 1; }\nnospaces() { printf '%s' \"$1\" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'; }\nonespace() { printf '%s' \"$1\" | tr -s ' '; }\nnoquotes() { printf '%s' \"$1\" | sed -e 's/^\"\\(.*\\)\"$/\\1/' -e \"s/^'\\(.*\\)'$/\\1/\"; }\nnoquotes2() { printf '%s' \"$1\" | sed -e 's/\" \"/ /g' -e \"s/' '/ /g\"; }\n\ncheck_ip() {\n  IP_REGEX='^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$'\n  printf '%s' \"$1\" | tr -d '\\n' | grep -Eq \"$IP_REGEX\"\n}\n\ncheck_cidr() {\n  CIDR_REGEX='^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/(3[0-2]|[1-2][0-9]|[0-9]))$'\n  printf '%s' \"$1\" | tr -d '\\n' | grep -Eq \"$CIDR_REGEX\"\n}\n\ncheck_dns_name() {\n  FQDN_REGEX='^([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,}$'\n  printf '%s' \"$1\" | tr -d '\\n' | grep -Eq \"$FQDN_REGEX\"\n}\n\ncheck_client_name() {\n  ! { [ \"${#1}\" -gt \"64\" ] || printf '%s' \"$1\" | LC_ALL=C grep -q '[^A-Za-z0-9_-]\\+' \\\n    || case $1 in -*) true ;; *) false ;; esac; }\n}\n\nif [ ! -f \"/.dockerenv\" ] && [ ! -f \"/run/.containerenv\" ] \\\n  && [ -z \"$KUBERNETES_SERVICE_HOST\" ] \\\n  && ! head -n 1 /proc/1/sched 2>/dev/null | grep -q '^run\\.sh '; then\n  exiterr \"This script ONLY runs in a container (e.g. Docker, Podman).\"\nfi\n\nif ip link add dummy0 type dummy 2>&1 | grep -q \"not permitted\"; then\ncat 1>&2 <<'EOF'\nError: This Docker image should be run in privileged mode.\n       See: https://github.com/hwdsl2/docker-ipsec-vpn-server\n\nEOF\n  exit 1\nfi\nip link delete dummy0 >/dev/null 2>&1\n\nos_type=debian\nos_arch=$(uname -m | tr -dc 'A-Za-z0-9_-')\n[ -f /etc/os-release ] && os_type=$(. /etc/os-release && printf '%s' \"$ID\")\n\nif [ ! -e /dev/ppp ]; then\ncat <<'EOF'\n\nWarning: /dev/ppp is missing, and IPsec/L2TP mode may not work.\n         Please use IKEv2 or IPsec/XAuth mode to connect.\n         Debian 11/10 users, see https://vpnsetup.net/debian10\nEOF\nfi\n\nNET_IFACE=$(route 2>/dev/null | grep -m 1 '^default' | grep -o '[^ ]*$')\n[ -z \"$NET_IFACE\" ] && NET_IFACE=$(ip -4 route list 0/0 2>/dev/null | grep -m 1 -Po '(?<=dev )(\\S+)')\n[ -z \"$NET_IFACE\" ] && NET_IFACE=eth0\n\nmkdir -p /opt/src\nvpn_env=\"/opt/src/vpn.env\"\nvpn_env_dir=\"/opt/src/env/vpn.env\"\nif [ -f \"$vpn_env_dir\" ]; then\n  vpn_env=\"$vpn_env_dir\"\nfi\nvpn_gen_env=\"/etc/ipsec.d/vpn-gen.env\"\nif [ -z \"$VPN_IPSEC_PSK\" ] && [ -z \"$VPN_USER\" ] && [ -z \"$VPN_PASSWORD\" ]; then\n  if [ -f \"$vpn_env\" ]; then\n    echo\n    echo 'Retrieving VPN credentials...'\n    . \"$vpn_env\"\n  elif [ -f \"$vpn_gen_env\" ]; then\n    echo\n    echo 'Retrieving previously generated VPN credentials...'\n    . \"$vpn_gen_env\"\n  else\n    echo\n    echo 'VPN credentials not set by user. Generating random PSK and password...'\n    VPN_IPSEC_PSK=$(LC_CTYPE=C tr -dc 'A-HJ-NPR-Za-km-z2-9' </dev/urandom 2>/dev/null | head -c 20)\n    VPN_USER=vpnuser\n    VPN_PASSWORD=$(LC_CTYPE=C tr -dc 'A-HJ-NPR-Za-km-z2-9' </dev/urandom 2>/dev/null | head -c 16)\n    printf '%s\\n' \"VPN_IPSEC_PSK='$VPN_IPSEC_PSK'\" > \"$vpn_gen_env\"\n    printf '%s\\n' \"VPN_USER='$VPN_USER'\" >> \"$vpn_gen_env\"\n    printf '%s\\n' \"VPN_PASSWORD='$VPN_PASSWORD'\" >> \"$vpn_gen_env\"\n    chmod 600 \"$vpn_gen_env\"\n  fi\nfi\n\n# Remove whitespace and quotes around VPN variables, if any\nVPN_IPSEC_PSK=$(nospaces \"$VPN_IPSEC_PSK\")\nVPN_IPSEC_PSK=$(noquotes \"$VPN_IPSEC_PSK\")\nVPN_USER=$(nospaces \"$VPN_USER\")\nVPN_USER=$(noquotes \"$VPN_USER\")\nVPN_PASSWORD=$(nospaces \"$VPN_PASSWORD\")\nVPN_PASSWORD=$(noquotes \"$VPN_PASSWORD\")\nif [ -n \"$VPN_ADDL_USERS\" ] && [ -n \"$VPN_ADDL_PASSWORDS\" ]; then\n  VPN_ADDL_USERS=$(nospaces \"$VPN_ADDL_USERS\")\n  VPN_ADDL_USERS=$(noquotes \"$VPN_ADDL_USERS\")\n  VPN_ADDL_USERS=$(onespace \"$VPN_ADDL_USERS\")\n  VPN_ADDL_USERS=$(noquotes2 \"$VPN_ADDL_USERS\")\n  VPN_ADDL_PASSWORDS=$(nospaces \"$VPN_ADDL_PASSWORDS\")\n  VPN_ADDL_PASSWORDS=$(noquotes \"$VPN_ADDL_PASSWORDS\")\n  VPN_ADDL_PASSWORDS=$(onespace \"$VPN_ADDL_PASSWORDS\")\n  VPN_ADDL_PASSWORDS=$(noquotes2 \"$VPN_ADDL_PASSWORDS\")\n  if [ -n \"$VPN_ADDL_IP_ADDRS\" ]; then\n    VPN_ADDL_IP_ADDRS=$(nospaces \"$VPN_ADDL_IP_ADDRS\")\n    VPN_ADDL_IP_ADDRS=$(noquotes \"$VPN_ADDL_IP_ADDRS\")\n    VPN_ADDL_IP_ADDRS=$(onespace \"$VPN_ADDL_IP_ADDRS\")\n    VPN_ADDL_IP_ADDRS=$(noquotes2 \"$VPN_ADDL_IP_ADDRS\")\n  fi\nelse\n  VPN_ADDL_USERS=\"\"\n  VPN_ADDL_PASSWORDS=\"\"\n  VPN_ADDL_IP_ADDRS=\"\"\nfi\nif [ -n \"$VPN_DNS_SRV1\" ]; then\n  VPN_DNS_SRV1=$(nospaces \"$VPN_DNS_SRV1\")\n  VPN_DNS_SRV1=$(noquotes \"$VPN_DNS_SRV1\")\nfi\nif [ -n \"$VPN_DNS_SRV2\" ]; then\n  VPN_DNS_SRV2=$(nospaces \"$VPN_DNS_SRV2\")\n  VPN_DNS_SRV2=$(noquotes \"$VPN_DNS_SRV2\")\nfi\nif [ -n \"$VPN_CLIENT_NAME\" ]; then\n  VPN_CLIENT_NAME=$(nospaces \"$VPN_CLIENT_NAME\")\n  VPN_CLIENT_NAME=$(noquotes \"$VPN_CLIENT_NAME\")\nfi\nif [ -n \"$VPN_DNS_NAME\" ]; then\n  VPN_DNS_NAME=$(nospaces \"$VPN_DNS_NAME\")\n  VPN_DNS_NAME=$(noquotes \"$VPN_DNS_NAME\")\nfi\nif [ -n \"$VPN_PUBLIC_IP\" ]; then\n  VPN_PUBLIC_IP=$(nospaces \"$VPN_PUBLIC_IP\")\n  VPN_PUBLIC_IP=$(noquotes \"$VPN_PUBLIC_IP\")\nfi\nif [ -n \"$VPN_ANDROID_MTU_FIX\" ]; then\n  VPN_ANDROID_MTU_FIX=$(nospaces \"$VPN_ANDROID_MTU_FIX\")\n  VPN_ANDROID_MTU_FIX=$(noquotes \"$VPN_ANDROID_MTU_FIX\")\nfi\nif [ -n \"$VPN_SHA2_TRUNCBUG\" ]; then\n  VPN_SHA2_TRUNCBUG=$(nospaces \"$VPN_SHA2_TRUNCBUG\")\n  VPN_SHA2_TRUNCBUG=$(noquotes \"$VPN_SHA2_TRUNCBUG\")\nfi\nif [ -n \"$VPN_PROTECT_CONFIG\" ]; then\n  VPN_PROTECT_CONFIG=$(nospaces \"$VPN_PROTECT_CONFIG\")\n  VPN_PROTECT_CONFIG=$(noquotes \"$VPN_PROTECT_CONFIG\")\nfi\nif [ -n \"$VPN_SPLIT_IKEV2\" ]; then\n  VPN_SPLIT_IKEV2=$(nospaces \"$VPN_SPLIT_IKEV2\")\n  VPN_SPLIT_IKEV2=$(noquotes \"$VPN_SPLIT_IKEV2\")\nfi\nif [ -n \"$VPN_DISABLE_IPSEC_L2TP\" ]; then\n  VPN_DISABLE_IPSEC_L2TP=$(nospaces \"$VPN_DISABLE_IPSEC_L2TP\")\n  VPN_DISABLE_IPSEC_L2TP=$(noquotes \"$VPN_DISABLE_IPSEC_L2TP\")\nfi\nif [ -n \"$VPN_DISABLE_IPSEC_XAUTH\" ]; then\n  VPN_DISABLE_IPSEC_XAUTH=$(nospaces \"$VPN_DISABLE_IPSEC_XAUTH\")\n  VPN_DISABLE_IPSEC_XAUTH=$(noquotes \"$VPN_DISABLE_IPSEC_XAUTH\")\nfi\nif [ -n \"$VPN_IKEV2_ONLY\" ]; then\n  VPN_IKEV2_ONLY=$(nospaces \"$VPN_IKEV2_ONLY\")\n  VPN_IKEV2_ONLY=$(noquotes \"$VPN_IKEV2_ONLY\")\nfi\nif [ -n \"$VPN_ENABLE_MODP1024\" ]; then\n  VPN_ENABLE_MODP1024=$(nospaces \"$VPN_ENABLE_MODP1024\")\n  VPN_ENABLE_MODP1024=$(noquotes \"$VPN_ENABLE_MODP1024\")\nfi\nif [ -n \"$VPN_ENABLE_MODP1536\" ]; then\n  VPN_ENABLE_MODP1536=$(nospaces \"$VPN_ENABLE_MODP1536\")\n  VPN_ENABLE_MODP1536=$(noquotes \"$VPN_ENABLE_MODP1536\")\nfi\nif [ -n \"$VPN_L2TP_NET\" ]; then\n  VPN_L2TP_NET=$(nospaces \"$VPN_L2TP_NET\")\n  VPN_L2TP_NET=$(noquotes \"$VPN_L2TP_NET\")\nfi\nif [ -n \"$VPN_L2TP_LOCAL\" ]; then\n  VPN_L2TP_LOCAL=$(nospaces \"$VPN_L2TP_LOCAL\")\n  VPN_L2TP_LOCAL=$(noquotes \"$VPN_L2TP_LOCAL\")\nfi\nif [ -n \"$VPN_L2TP_POOL\" ]; then\n  VPN_L2TP_POOL=$(nospaces \"$VPN_L2TP_POOL\")\n  VPN_L2TP_POOL=$(noquotes \"$VPN_L2TP_POOL\")\nfi\nif [ -n \"$VPN_XAUTH_NET\" ]; then\n  VPN_XAUTH_NET=$(nospaces \"$VPN_XAUTH_NET\")\n  VPN_XAUTH_NET=$(noquotes \"$VPN_XAUTH_NET\")\nfi\nif [ -n \"$VPN_XAUTH_POOL\" ]; then\n  VPN_XAUTH_POOL=$(nospaces \"$VPN_XAUTH_POOL\")\n  VPN_XAUTH_POOL=$(noquotes \"$VPN_XAUTH_POOL\")\nfi\n\nif [ -z \"$VPN_IPSEC_PSK\" ] || [ -z \"$VPN_USER\" ] || [ -z \"$VPN_PASSWORD\" ]; then\n  exiterr \"All VPN credentials must be specified. Edit your 'env' file and re-enter them.\"\nfi\nif printf '%s' \"$VPN_IPSEC_PSK $VPN_USER $VPN_PASSWORD $VPN_ADDL_USERS $VPN_ADDL_PASSWORDS\" | LC_ALL=C grep -q '[^ -~]\\+'; then\n  exiterr \"VPN credentials must not contain non-ASCII characters.\"\nfi\ncase \"$VPN_IPSEC_PSK $VPN_USER $VPN_PASSWORD $VPN_ADDL_USERS $VPN_ADDL_PASSWORDS\" in\n  *[\\\\\\\"\\']*)\n    exiterr \"VPN credentials must not contain these special characters: \\\\ \\\" '\"\n    ;;\nesac\nif printf '%s' \"$VPN_USER $VPN_ADDL_USERS\" | tr ' ' '\\n' | sort | uniq -c | grep -qv '^ *1 '; then\n  exiterr \"VPN usernames must not contain duplicates.\"\nfi\n\n# Check DNS servers and try to resolve hostnames to IPs\nif [ -n \"$VPN_DNS_SRV1\" ]; then\n  check_ip \"$VPN_DNS_SRV1\" || VPN_DNS_SRV1=$(dig -t A -4 +short \"$VPN_DNS_SRV1\")\n  if ! check_ip \"$VPN_DNS_SRV1\"; then\ncat <<'EOF'\n\nWarning: Invalid DNS server. Check VPN_DNS_SRV1 in your 'env' file.\nEOF\n    VPN_DNS_SRV1=\"\"\n  fi\nfi\nif [ -n \"$VPN_DNS_SRV2\" ]; then\n  check_ip \"$VPN_DNS_SRV2\" || VPN_DNS_SRV2=$(dig -t A -4 +short \"$VPN_DNS_SRV2\")\n  if ! check_ip \"$VPN_DNS_SRV2\"; then\ncat <<'EOF'\n\nWarning: Invalid DNS server. Check VPN_DNS_SRV2 in your 'env' file.\nEOF\n    VPN_DNS_SRV2=\"\"\n  fi\nfi\nif [ -n \"$VPN_CLIENT_NAME\" ]; then\n  if ! check_client_name \"$VPN_CLIENT_NAME\"; then\ncat <<'EOF'\n\nWarning: Invalid client name. Use one word only, no special characters except '-' and '_'.\n         Falling back to default client name 'vpnclient'.\nEOF\n    VPN_CLIENT_NAME=\"\"\n  fi\nfi\nif [ -n \"$VPN_DNS_NAME\" ]; then\n  if ! check_dns_name \"$VPN_DNS_NAME\"; then\ncat <<'EOF'\n\nWarning: Invalid DNS name. 'VPN_DNS_NAME' must be a fully qualified domain name (FQDN).\n         Falling back to using this server's IP address.\nEOF\n    VPN_DNS_NAME=\"\"\n  fi\nfi\nif [ -n \"$VPN_SPLIT_IKEV2\" ]; then\n  if ! check_cidr \"$VPN_SPLIT_IKEV2\"; then\ncat <<'EOF'\n\nWarning: Invalid split VPN subnet. Check VPN_SPLIT_IKEV2 in your 'env' file.\nEOF\n    VPN_SPLIT_IKEV2=\"\"\n  fi\nfi\n\necho\necho 'Trying to auto discover IP of this server...'\n# In case auto IP discovery fails, manually define the public IP\n# of this server in your 'env' file, as variable 'VPN_PUBLIC_IP'.\npublic_ip=${VPN_PUBLIC_IP:-''}\ncheck_ip \"$public_ip\" || public_ip=$(dig @resolver1.opendns.com -t A -4 myip.opendns.com +short)\ncheck_ip \"$public_ip\" || public_ip=$(wget -t 2 -T 10 -qO- http://ipv4.icanhazip.com)\ncheck_ip \"$public_ip\" || public_ip=$(wget -t 2 -T 10 -qO- http://ip1.dynupdate.no-ip.com)\ncheck_ip \"$public_ip\" || exiterr \"Cannot detect this server's public IP. Define it in your 'env' file as 'VPN_PUBLIC_IP'.\"\n\nif [ -n \"$VPN_DNS_NAME\" ]; then\n  server_addr=\"$VPN_DNS_NAME\"\nelse\n  server_addr=\"$public_ip\"\nfi\n\nL2TP_NET=${VPN_L2TP_NET:-'192.168.42.0/24'}\nL2TP_LOCAL=${VPN_L2TP_LOCAL:-'192.168.42.1'}\nL2TP_POOL=${VPN_L2TP_POOL:-'192.168.42.10-192.168.42.250'}\nXAUTH_NET=${VPN_XAUTH_NET:-'192.168.43.0/24'}\nXAUTH_POOL=${VPN_XAUTH_POOL:-'192.168.43.10-192.168.43.250'}\nDNS_SRV1=${VPN_DNS_SRV1:-'8.8.8.8'}\nDNS_SRV2=${VPN_DNS_SRV2:-'8.8.4.4'}\nDNS_SRVS=\"\\\"$DNS_SRV1 $DNS_SRV2\\\"\"\n[ -n \"$VPN_DNS_SRV1\" ] && [ -z \"$VPN_DNS_SRV2\" ] && DNS_SRVS=\"$DNS_SRV1\"\n\nif [ -n \"$VPN_DNS_SRV1\" ] && [ -n \"$VPN_DNS_SRV2\" ]; then\n  echo\n  echo \"Setting DNS servers to $VPN_DNS_SRV1 and $VPN_DNS_SRV2...\"\nelif [ -n \"$VPN_DNS_SRV1\" ]; then\n  echo\n  echo \"Setting DNS server to $VPN_DNS_SRV1...\"\nfi\n\nsha2_truncbug=no\ncase $VPN_SHA2_TRUNCBUG in\n  [yY][eE][sS])\n    echo\n    echo \"Setting sha2-truncbug to yes in ipsec.conf...\"\n    sha2_truncbug=yes\n    ;;\nesac\ndisable_ipsec_l2tp=no\ncase $VPN_DISABLE_IPSEC_L2TP in\n  [yY][eE][sS])\n    disable_ipsec_l2tp=yes\n    ;;\nesac\ndisable_ipsec_xauth=no\ncase $VPN_DISABLE_IPSEC_XAUTH in\n  [yY][eE][sS])\n    disable_ipsec_xauth=yes\n    ;;\nesac\ncase $VPN_IKEV2_ONLY in\n  [yY][eE][sS])\n    disable_ipsec_l2tp=yes\n    disable_ipsec_xauth=yes\n    ;;\nesac\nike_algs=\"aes256-sha2;modp2048,aes128-sha2;modp2048,aes256-sha1;modp2048,aes128-sha1;modp2048\"\nike_algs_addl_1=\",aes256-sha2;modp1024,aes128-sha1;modp1024\"\nike_algs_addl_2=\",aes256-sha2;modp1536,aes128-sha1;modp1536\"\ncase $VPN_ENABLE_MODP1024 in\n  [yY][eE][sS])\n    echo\n    echo \"Enabling modp1024 in ipsec.conf...\"\n    ike_algs=\"$ike_algs$ike_algs_addl_1\"\n    ;;\nesac\ncase $VPN_ENABLE_MODP1536 in\n  [yY][eE][sS])\n    echo\n    echo \"Enabling modp1536 in ipsec.conf...\"\n    ike_algs=\"$ike_algs$ike_algs_addl_2\"\n    ;;\nesac\n\nif [ \"$disable_ipsec_l2tp\" = yes ] && [ \"$disable_ipsec_xauth\" = yes ]; then\ncat <<'EOF'\n\nNote: Running in IKEv2-only mode via env file option.\n      IPsec/L2TP and IPsec/XAuth (\"Cisco IPsec\") modes are disabled.\nEOF\n  if ! grep -q \" /etc/ipsec.d \" /proc/mounts; then\ncat <<'EOF'\n\nWarning: /etc/ipsec.d not mounted. IKEv2 setup requires a Docker volume\n         mounted at /etc/ipsec.d.\nEOF\n  fi\nelif [ \"$disable_ipsec_l2tp\" = yes ]; then\ncat <<'EOF'\n\nNote: IPsec/L2TP mode is disabled via env file option.\nEOF\nelif [ \"$disable_ipsec_xauth\" = yes ]; then\ncat <<'EOF'\n\nNote: IPsec/XAuth (\"Cisco IPsec\") mode is disabled via env file option.\nEOF\nfi\n\n# Create IPsec config\ncat > /etc/ipsec.conf <<EOF\nversion 2.0\n\nconfig setup\n  ikev1-policy=accept\n  virtual-private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:!$L2TP_NET,%v4:!$XAUTH_NET\n  uniqueids=no\n\nconn shared\n  left=%defaultroute\n  leftid=$public_ip\n  right=%any\n  encapsulation=yes\n  authby=secret\n  pfs=no\n  rekey=no\n  keyingtries=5\n  dpddelay=30\n  dpdtimeout=300\n  dpdaction=clear\n  ikev2=never\n  ike=$ike_algs\n  phase2alg=aes_gcm-null,aes128-sha1,aes256-sha1,aes256-sha2_512,aes128-sha2,aes256-sha2\n  ikelifetime=24h\n  salifetime=24h\n  sha2-truncbug=$sha2_truncbug\n\nEOF\n\nif [ \"$disable_ipsec_l2tp\" != yes ]; then\ncat >> /etc/ipsec.conf <<'EOF'\nconn l2tp-psk\n  auto=add\n  leftprotoport=17/1701\n  rightprotoport=17/%any\n  type=transport\n  also=shared\n\nEOF\nfi\nif [ \"$disable_ipsec_xauth\" != yes ]; then\ncat >> /etc/ipsec.conf <<EOF\nconn xauth-psk\n  auto=add\n  leftsubnet=0.0.0.0/0\n  rightaddresspool=$XAUTH_POOL\n  modecfgdns=$DNS_SRVS\n  leftxauthserver=yes\n  rightxauthclient=yes\n  leftmodecfgserver=yes\n  rightmodecfgclient=yes\n  modecfgpull=yes\n  cisco-unity=yes\n  also=shared\n\nEOF\nfi\n\ncat >> /etc/ipsec.conf <<'EOF'\ninclude /etc/ipsec.d/*.conf\nEOF\n\nif uname -r | grep -qi 'coreos'; then\n  sed -i '/phase2alg/s/,aes256-sha2_512//' /etc/ipsec.conf\nfi\nif grep -qs ike-frag /etc/ipsec.d/ikev2.conf; then\n  sed -i 's/^[[:space:]]\\+ike-frag=/  fragmentation=/' /etc/ipsec.d/ikev2.conf\nfi\n\n# Specify IPsec PSK\ncat > /etc/ipsec.secrets <<EOF\n%any  %any  : PSK \"$VPN_IPSEC_PSK\"\nEOF\n\n# Create xl2tpd config\ncat > /etc/xl2tpd/xl2tpd.conf <<EOF\n[global]\nport = 1701\n\n[lns default]\nip range = $L2TP_POOL\nlocal ip = $L2TP_LOCAL\nrequire chap = yes\nrefuse pap = yes\nrequire authentication = yes\nname = l2tpd\npppoptfile = /etc/ppp/options.xl2tpd\nlength bit = yes\nEOF\n\n# Set xl2tpd options\ncat > /etc/ppp/options.xl2tpd <<EOF\n+mschap-v2\nipcp-accept-local\nipcp-accept-remote\nnoccp\nauth\nmtu 1280\nmru 1280\nproxyarp\nlcp-echo-failure 4\nlcp-echo-interval 30\nconnect-delay 5000\nms-dns $DNS_SRV1\nEOF\n\nif [ -z \"$VPN_DNS_SRV1\" ] || [ -n \"$VPN_DNS_SRV2\" ]; then\ncat >> /etc/ppp/options.xl2tpd <<EOF\nms-dns $DNS_SRV2\nEOF\nfi\n\n# Create VPN credentials\ncat > /etc/ppp/chap-secrets <<EOF\n\"$VPN_USER\" l2tpd \"$VPN_PASSWORD\" *\nEOF\n\nVPN_PASSWORD_ENC=$(openssl passwd -1 \"$VPN_PASSWORD\")\ncat > /etc/ipsec.d/passwd <<EOF\n$VPN_USER:$VPN_PASSWORD_ENC:xauth-psk\nEOF\n\nif [ -n \"$VPN_ADDL_USERS\" ] && [ -n \"$VPN_ADDL_PASSWORDS\" ]; then\n  count=1\n  addl_user=$(printf '%s' \"$VPN_ADDL_USERS\" | cut -d ' ' -f 1)\n  addl_password=$(printf '%s' \"$VPN_ADDL_PASSWORDS\" | cut -d ' ' -f 1)\n  addl_ip=$(printf '%s' \"$VPN_ADDL_IP_ADDRS\" | cut -d ' ' -f 1)\n  while [ -n \"$addl_user\" ] && [ -n \"$addl_password\" ]; do\n    addl_ip_l2tp=\"$addl_ip\"\n    addl_ip_xauth=\"$addl_ip\"\n    if [ \"$addl_ip\" = \"*\" ] || ! check_ip \"$addl_ip\"; then\n      addl_ip_l2tp=\"\"\n      addl_ip_xauth=\"\"\n    elif [ \"$L2TP_NET\" = \"192.168.42.0/24\" ] && [ \"$XAUTH_NET\" = \"192.168.43.0/24\" ]; then\n      addl_ip_part=$(printf '%s' \"$addl_ip\" | cut -f 1-3 -d '.')\n      if [ \"$addl_ip_part\" = \"192.168.42\" ]; then\n        addl_ip_xauth=\"\"\n      elif [ \"$addl_ip_part\" = \"192.168.43\" ]; then\n        addl_ip_l2tp=\"\"\n      else\n        addl_ip_l2tp=\"\"\n        addl_ip_xauth=\"\"\n      fi\n    fi\ncat >> /etc/ppp/chap-secrets <<EOF\n\"$addl_user\" l2tpd \"$addl_password\" ${addl_ip_l2tp:-*}\nEOF\n    [ -n \"$addl_ip_xauth\" ] && addl_ip_xauth=$(printf '%s' \":$addl_ip_xauth\")\n    addl_password_enc=$(openssl passwd -1 \"$addl_password\")\ncat >> /etc/ipsec.d/passwd <<EOF\n$addl_user:$addl_password_enc:xauth-psk${addl_ip_xauth}\nEOF\n    count=$((count+1))\n    addl_user=$(printf '%s' \"$VPN_ADDL_USERS\" | cut -s -d ' ' -f \"$count\")\n    addl_password=$(printf '%s' \"$VPN_ADDL_PASSWORDS\" | cut -s -d ' ' -f \"$count\")\n    addl_ip=$(printf '%s' \"$VPN_ADDL_IP_ADDRS\" | cut -s -d ' ' -f \"$count\")\n  done\nfi\n\n# Update sysctl settings\nsyt='/sbin/sysctl -e -q -w'\n$syt kernel.msgmnb=65536 2>/dev/null\n$syt kernel.msgmax=65536 2>/dev/null\n$syt net.ipv4.ip_forward=1 2>/dev/null\n$syt net.ipv4.conf.all.accept_redirects=0 2>/dev/null\n$syt net.ipv4.conf.all.send_redirects=0 2>/dev/null\n$syt net.ipv4.conf.all.rp_filter=0 2>/dev/null\n$syt net.ipv4.conf.default.accept_redirects=0 2>/dev/null\n$syt net.ipv4.conf.default.send_redirects=0 2>/dev/null\n$syt net.ipv4.conf.default.rp_filter=0 2>/dev/null\n$syt \"net.ipv4.conf.$NET_IFACE.send_redirects=0\" 2>/dev/null\n$syt \"net.ipv4.conf.$NET_IFACE.rp_filter=0\" 2>/dev/null\n$syt net.ipv4.tcp_rmem=\"4096 87380 16777216\" 2>/dev/null\n$syt net.ipv4.tcp_wmem=\"4096 87380 16777216\" 2>/dev/null\nif modprobe -q tcp_bbr 2>/dev/null \\\n  && printf '%s\\n%s' \"4.20\" \"$(uname -r)\" | sort -C -V; then\n  $syt net.ipv4.tcp_congestion_control=bbr 2>/dev/null\nfi\n\n# Create IPTables rules\nipi='iptables -I INPUT'\nipf='iptables -I FORWARD'\nipp='iptables -t nat -I POSTROUTING'\nres='RELATED,ESTABLISHED'\nmodprobe -q ip_tables 2>/dev/null\nif ! iptables -t nat -C POSTROUTING -s \"$L2TP_NET\" -o \"$NET_IFACE\" -j MASQUERADE 2>/dev/null; then\n  $ipi 1 -p udp --dport 1701 -m policy --dir in --pol none -j DROP\n  $ipi 2 -m conntrack --ctstate INVALID -j DROP\n  $ipi 3 -m conntrack --ctstate \"$res\" -j ACCEPT\n  $ipi 4 -p udp -m multiport --dports 500,4500 -j ACCEPT\n  $ipi 5 -p udp --dport 1701 -m policy --dir in --pol ipsec -j ACCEPT\n  $ipi 6 -p udp --dport 1701 -j DROP\n  $ipf 1 -m conntrack --ctstate INVALID -j DROP\n  $ipf 2 -i \"$NET_IFACE\" -o ppp+ -m conntrack --ctstate \"$res\" -j ACCEPT\n  $ipf 3 -i ppp+ -o \"$NET_IFACE\" -j ACCEPT\n  $ipf 4 -i ppp+ -o ppp+ -j ACCEPT\n  $ipf 5 -i \"$NET_IFACE\" -d \"$XAUTH_NET\" -m conntrack --ctstate \"$res\" -j ACCEPT\n  $ipf 6 -s \"$XAUTH_NET\" -o \"$NET_IFACE\" -j ACCEPT\n  $ipf 7 -s \"$XAUTH_NET\" -o ppp+ -j ACCEPT\n  # Client-to-client traffic is allowed by default. To *disallow* such traffic,\n  # uncomment below and restart the Docker container.\n  # $ipf 2 -i ppp+ -o ppp+ -s \"$L2TP_NET\" -d \"$L2TP_NET\" -j DROP\n  # $ipf 3 -s \"$XAUTH_NET\" -d \"$XAUTH_NET\" -j DROP\n  # $ipf 4 -i ppp+ -d \"$XAUTH_NET\" -j DROP\n  # $ipf 5 -s \"$XAUTH_NET\" -o ppp+ -j DROP\n  iptables -A FORWARD -j DROP\n  if ! $ipp -s \"$XAUTH_NET\" -o \"$NET_IFACE\" -m policy --dir out --pol none -j MASQUERADE; then\n    $ipp -s \"$XAUTH_NET\" -o \"$NET_IFACE\" ! -d \"$XAUTH_NET\" -j MASQUERADE\n  fi\n  $ipp -s \"$L2TP_NET\" -o \"$NET_IFACE\" -j MASQUERADE\nfi\n\ncase $VPN_ANDROID_MTU_FIX in\n  [yY][eE][sS])\n    echo\n    echo \"Applying fix for Android MTU/MSS issues...\"\n    iptables -t mangle -A FORWARD -m policy --pol ipsec --dir in \\\n      -p tcp -m tcp --tcp-flags SYN,RST SYN -m tcpmss --mss 1361:1536 \\\n      -j TCPMSS --set-mss 1360\n    iptables -t mangle -A FORWARD -m policy --pol ipsec --dir out \\\n      -p tcp -m tcp --tcp-flags SYN,RST SYN -m tcpmss --mss 1361:1536 \\\n      -j TCPMSS --set-mss 1360\n    echo 1 > /proc/sys/net/ipv4/ip_no_pmtu_disc\n    ;;\nesac\n\n# Update file attributes\nchmod 600 /etc/ipsec.secrets /etc/ppp/chap-secrets /etc/ipsec.d/passwd\n\necho\necho \"Starting IPsec service...\"\nmkdir -p /run/pluto /var/run/pluto\nrm -f /run/pluto/pluto.pid /var/run/pluto/pluto.pid\nif [ \"$os_type\" = \"alpine\" ]; then\n  sed -i '1c\\#!/sbin/openrc-run' /etc/init.d/ipsec\n  rc-status >/dev/null 2>&1\n  rc-service ipsec zap >/dev/null\n  rc-service -D ipsec start >/dev/null 2>&1\n  mkdir -p /etc/crontabs\n  cron_cmd=\"rc-service -c -D ipsec zap start\"\nif ! grep -qs \"$cron_cmd\" /etc/crontabs/root; then\ncat >> /etc/crontabs/root <<EOF\n* * * * * $cron_cmd\n* * * * * sleep 15; $cron_cmd\n* * * * * sleep 30; $cron_cmd\n* * * * * sleep 45; $cron_cmd\nEOF\nfi\n  /usr/sbin/crond -L /dev/null\nelse\n  service ipsec start >/dev/null 2>&1\nfi\n\nif [ -n \"$VPN_DNS_NAME\" ]; then\n  server_text=\"Server\"\nelse\n  server_text=\"Server IP\"\nfi\n\nif [ \"$disable_ipsec_l2tp\" != yes ] || [ \"$disable_ipsec_xauth\" != yes ]; then\ncat <<EOF\n\n================================================\n\nIPsec VPN server is now ready for use!\n\nConnect to your new VPN with these details:\n\n$server_text: $server_addr\nIPsec PSK: $VPN_IPSEC_PSK\nUsername: $VPN_USER\nPassword: $VPN_PASSWORD\nEOF\n  if [ -n \"$VPN_ADDL_USERS\" ] && [ -n \"$VPN_ADDL_PASSWORDS\" ]; then\n    count=1\n    addl_user=$(printf '%s' \"$VPN_ADDL_USERS\" | cut -d ' ' -f 1)\n    addl_password=$(printf '%s' \"$VPN_ADDL_PASSWORDS\" | cut -d ' ' -f 1)\ncat <<'EOF'\n\nAdditional VPN users (username | password):\nEOF\n    while [ -n \"$addl_user\" ] && [ -n \"$addl_password\" ]; do\ncat <<EOF\n$addl_user | $addl_password\nEOF\n      count=$((count+1))\n      addl_user=$(printf '%s' \"$VPN_ADDL_USERS\" | cut -s -d ' ' -f \"$count\")\n      addl_password=$(printf '%s' \"$VPN_ADDL_PASSWORDS\" | cut -s -d ' ' -f \"$count\")\n    done\n  fi\ncat <<'EOF'\n\nWrite these down. You'll need them to connect!\n\nVPN client setup: https://vpnsetup.net/clients2\n\n================================================\nEOF\nfi\n\n# Set up IKEv2\nstatus=0\nikev2_sh=\"/opt/src/ikev2.sh\"\nikev2_conf=\"/etc/ipsec.d/ikev2.conf\"\nikev2_log=\"/etc/ipsec.d/ikev2setup.log\"\nif grep -q \" /etc/ipsec.d \" /proc/mounts && [ -s \"$ikev2_sh\" ] && [ ! -f \"$ikev2_conf\" ]; then\n  echo\n  echo \"Setting up IKEv2. This may take a few moments...\"\n  if [ -n \"$VPN_SPLIT_IKEV2\" ]; then\n    sed -i \"s|^  leftsubnet=0\\.0\\.0\\.0/0$|  leftsubnet=$VPN_SPLIT_IKEV2|g\" \"$ikev2_sh\"\n  fi\n  if VPN_DNS_NAME=\"$VPN_DNS_NAME\" VPN_PUBLIC_IP=\"$public_ip\" \\\n    VPN_CLIENT_NAME=\"$VPN_CLIENT_NAME\" VPN_XAUTH_POOL=\"$VPN_XAUTH_POOL\" \\\n    VPN_DNS_SRV1=\"$VPN_DNS_SRV1\" VPN_DNS_SRV2=\"$VPN_DNS_SRV2\" \\\n    VPN_PROTECT_CONFIG=\"$VPN_PROTECT_CONFIG\" \\\n    /bin/bash \"$ikev2_sh\" --auto >\"$ikev2_log\" 2>&1; then\n    status=1\n    status_text=\"IKEv2 setup successful.\"\n  else\n    status=4\n    rm -f \"$ikev2_conf\"\n    echo \"IKEv2 setup failed.\"\n  fi\n  chmod 600 \"$ikev2_log\"\nfi\nif [ \"$status\" = 0 ] && [ -f \"$ikev2_conf\" ] && [ -s \"$ikev2_log\" ]; then\n  status=2\n  status_text=\"IKEv2 is already set up.\"\nfi\nif [ \"$status\" = 1 ] || [ \"$status\" = 2 ]; then\ncat <<EOF\n\n================================================\n\n$status_text Details for IKEv2 mode:\n\nEOF\n  sed -n '/VPN server address:/,/Next steps:/p' \"$ikev2_log\"\ncat <<'EOF'\nhttps://vpnsetup.net/clients2\n\n================================================\n\nEOF\nelse\n  echo\nfi\n\nif [ \"$status\" = 2 ] && [ -n \"$VPN_DNS_NAME\" ]; then\n  server_addr_cur=$(grep -s \"leftcert=\" /etc/ipsec.d/ikev2.conf | cut -f2 -d= | head -n 1)\n  if [ \"$VPN_DNS_NAME\" != \"$server_addr_cur\" ]; then\ncat <<'EOF'\nWarning: The VPN_DNS_NAME variable you specified has no effect\n         for IKEv2 mode, because IKEv2 is already set up in this\n         container. To change the IKEv2 server address, see:\n         https://vpnsetup.net/ikev2docker\n\nEOF\n  fi\nfi\n\n# Check for new Libreswan version\nts_file=\"/opt/src/swanver\"\nif [ ! -f \"$ts_file\" ] || [ \"$(find \"$ts_file\" -mmin +10080)\" ]; then\n  touch \"$ts_file\"\n  ipsec_ver=$(ipsec --version 2>/dev/null)\n  swan_ver=$(printf '%s' \"$ipsec_ver\" | sed -e 's/.*Libreswan U\\?//' -e 's/\\( (\\|\\/K\\).*//')\n  base_url=\"https://github.com/hwdsl2/vpn-extras/releases/download/v1.0.0\"\n  swan_ver_url=\"$base_url/upg-docker-$os_type-$os_arch-swanver\"\n  swan_ver_latest=$(wget -t 2 -T 10 -qO- \"$swan_ver_url\" | head -n 1)\n  if printf '%s' \"$swan_ver_latest\" | grep -Eq '^([3-9]|[1-9][0-9]{1,2})(\\.([0-9]|[1-9][0-9]{1,2})){1,2}$' \\\n    && [ -n \"$swan_ver\" ] && [ \"$swan_ver\" != \"$swan_ver_latest\" ] \\\n    && printf '%s\\n%s' \"$swan_ver\" \"$swan_ver_latest\" | sort -C -V; then\ncat <<EOF\nNote: A newer version of Libreswan ($swan_ver_latest) is available.\nTo update this Docker image, see: https://vpnsetup.net/dockerupdate\n\nEOF\n  fi\nfi\n\n# Start xl2tpd\nmkdir -p /var/run/xl2tpd\nrm -f /var/run/xl2tpd.pid\nexec /usr/sbin/xl2tpd -D -c /etc/xl2tpd/xl2tpd.conf\n"
        },
        {
          "name": "vpn.env.example",
          "type": "blob",
          "size": 1.455078125,
          "content": "# Note: All the variables to this image are optional.\n# See README for more information.\n# To use, uncomment and replace with your own values.\n\n# Define IPsec PSK, VPN username and password\n# - DO NOT put \"\" or '' around values, or add space around =\n# - DO NOT use these special characters within values: \\ \" '\n# VPN_IPSEC_PSK=your_ipsec_pre_shared_key\n# VPN_USER=your_vpn_username\n# VPN_PASSWORD=your_vpn_password\n\n# Define additional VPN users\n# - DO NOT put \"\" or '' around values, or add space around =\n# - DO NOT use these special characters within values: \\ \" '\n# - Usernames and passwords must be separated by spaces\n# VPN_ADDL_USERS=additional_username_1 additional_username_2\n# VPN_ADDL_PASSWORDS=additional_password_1 additional_password_2\n\n# Use a DNS name for the VPN server\n# - The DNS name must be a fully qualified domain name (FQDN)\n# VPN_DNS_NAME=vpn.example.com\n\n# Specify a name for the first IKEv2 client\n# - Use one word only, no special characters except '-' and '_'\n# - The default is 'vpnclient' if not specified\n# VPN_CLIENT_NAME=your_client_name\n\n# Use alternative DNS servers\n# - By default, clients are set to use Google Public DNS\n# - Example below shows Cloudflare's DNS service\n# VPN_DNS_SRV1=1.1.1.1\n# VPN_DNS_SRV2=1.0.0.1\n\n# Protect IKEv2 client config files using a password\n# - By default, no password is required when importing IKEv2 client configuration\n# - Uncomment if you want to protect these files using a random password\n# VPN_PROTECT_CONFIG=yes\n"
        }
      ]
    }
  ]
}