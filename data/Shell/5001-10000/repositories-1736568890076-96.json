{
  "metadata": {
    "timestamp": 1736568890076,
    "page": 96,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "raycast/script-commands",
      "stars": 6083,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1806640625,
          "content": "commands/README.md          -diff -merge\ncommands/README.md          linguist-generated=true\ncommands/extensions.json    -diff -merge\ncommands/extensions.json    linguist-generated=true"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.064453125,
          "content": ".DS_Store\n.build\n/Packages\n*.xcodeproj\nxcuserdata/\n.swiftpm\n.idea\n"
        },
        {
          "name": ".swiftlint.yml",
          "type": "blob",
          "size": 1.0478515625,
          "content": "indentation: 2\nincluded:\n  - Tools/Toolkit\nexcluded:\n  - Tools/Toolkit/.build\n  - _enabled-commands\n  - commands\n  - templates\ndisabled_rules:\n  - cyclomatic_complexity\n  - file_length\n  - line_length\n  - nesting\n  - todo # Use custom_todo\n  - unused_setter_value\n  - generic_type_name\n  - identifier_name\n  - function_parameter_count\n  - type_name\n  - function_body_length\n  - type_body_length\nopt_in_rules:\n  - indentation_width\n  - array_init\n  - closure_end_indentation\n  - closure_spacing\n  - collection_alignment\n  - empty_collection_literal\n  - empty_count\n  - empty_string\n  - fallthrough\n  - fatal_error_message\n  - file_header\n  - overridden_super_call\n  - sorted_imports\n  - unused_declaration\n  - unused_import\n  - vertical_whitespace_closing_braces\n  - vertical_whitespace_opening_braces\n  - yoda_condition\nindentation_width:\n  indentation_width: 2\ntrailing_comma:\n  mandatory_comma: true\nfile_header:\n  required_pattern: ([Copyright (c) \\d{4}\\-\\d{4} Raycast. All rights reserved.])\\w+\nidentifier_name:\n  min_length:\n    error: 3\n  excluded:\n    - id\n    - os\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 8.009765625,
          "content": "# Contributing\n\nThank you for your interest in contributing to Raycast Script Commands! Here you will find simple guidelines that can help you with getting started.\n\n- [Contributing](#contributing)\n  - [Guidelines](#guidelines)\n    - [Git and Pull Requests](#git-and-pull-requests)\n    - [Folder structure](#folder-structure)\n    - [English style convention](#english-style-convention)\n    - [File naming convention](#file-naming-convention)\n    - [Metadata convention](#metadata-convention)\n    - [Scripts that require additional modification](#scripts-that-require-additional-modification)\n    - [Scripts that require installation of runtimes and dependencies](#scripts-that-require-installation-of-runtimes-and-dependencies)\n    - [Scripts that require installation of apps](#scripts-that-require-installation-of-apps)\n    - [Bash profiles and environmental variables](#bash-profiles-and-environmental-variables)\n    - [Auto generated files](#auto-generated-files)\n  - [Examples](#examples)\n\n## Guidelines\n\n### Git and Pull Requests\n\nPlease make sure that your pull request makes it easy for the reviewer to understand what the change is about (fill in the pull request template) and keep your change focused (do not create a PR containing multiple complex Script Commands).\n\nIn order to keep the Git history clean, we prefer if you rebase your branch on top of master, so that we can do a fast-forward merge back to master. Make sure to use descriptive commit messages (incl. proper spelling), and squash commits (\"fix typo\") already on your end.\n\n### Folder structure\n\nTry to bundle scripts that are related in a directory / sub-directory. Avoid having generic folders with lots of different commands. For example instead of having one `media` directory that contains integrations with different services, it's better to create sub-directories for each service:\n\n```markdown\n. commands\n└─ media\n   ├─ spotify\n   ├─ apple-music\n   └─ youtube\n```\n\nReasoning behind it: To avoid automatically including scripts that people may not be interested in. E.g. if you're using Spotify scripts, there is a lower chance you will need to access Apple Music.\n\nImages should go into dedicated `images` folder:\n\n```markdown\n. commands\n└─ media\n   └─ spotify\n      └─ images\n         └─ spotify-logo.png\n      └─ spotify-next-track.applescript\n      └─ spotify-prev-track.applescript\n```\n\n### English style convention\n\nUse American English spelling and style for your command metadata. \nTo make sure you use the right version, refer to [Wikipedia](https://en.wikipedia.org/wiki/Comparison_of_American_and_British_English) or use [British to American English Converter](https://www.infoenglish.net/british-to-american-english/)\n\n### File naming convention\n\nUse lowercased, dash-case format for script files and directories, and use proper file extensions: Applescript should be `.applescript`, Swift should be `.swift`, Bash should be `.sh`, etc.\nExample: `spotify-next-track.applescript`\n\n### Metadata convention\n\n- **Title:** Raycast's UI adopts title-cased strings for all command titles as per Apple's Human Interface Guidelines. Please make sure your command title follows this pattern to look good between other commands.\n- **Mode:** Use the `silent` mode for commands that are instant, e.g. `Toggle Hidden Files`. Use the `compact` mode for long-running tasks, e.g. some networking requests. Use the `fullOutput` mode for commands that print more information, e.g. output some file content. And use the `inline` mode for dashboard items, e.g. `Current Weather`.\n- **Package Name:** While `packageName` is an optional parameter and if it's missing Raycast will derive it from the directory name, it is required in this repository to improve portability. Make sure to always provide it in your script commands.\n\n### Scripts that require additional modification\n\n1. Ensure that comments include instructions on how to start using the script. E.g. you might need to provide API token, username or tweak parameters.\n2. Add `.template.` to the file name for scripts that need modifications. Then scripts won't be automatically parsed by Raycast and people who want to use it will need to copy the file and remove `.template.` part.\n\nExample: `github-notifications.template.sh`\n\n*NOTE:* This might change as soon as we introduce a better way to provide parameters / environmental variables.\n\n### Scripts that require installation of runtimes and dependencies\n\nMost scripts are either written in Bash or AppleScript. We also allow Swift and Node runtimes; however, always check if there's a strong need for those runtimes since they don't come pre-installed on macOS. We have non-technical users who don't bother installing a Node runtime just to perform a simple function.\n\nSome general guidelines:\n- First, ask yourself if you can build the Script Command without any dependencies. Less or no dependencies make it easier for others to adopt your command and make it more portable.\n- A question you can ask yourself is whether a dependency is \"deep\" or \"shallow\": a deep dependency hides complex functionality behind a simple interface. A shallow dependency is the opposite. Avoid using shallow dependencies and check whether there are built-in Unix tools (curl, awk, sed, etc.) that can solve the same problem without much code.\n- Also consider transitive dependencies and security aspects. The npm ecosystem, for instance, has been notorious for pulling-in dependencies for trivial tasks, sometimes exposing the user to security issues.\n\nIf you still need a dependency, follow these guidelines:\n\n1. At the top of the file add a comment section explicitly stating the dependency and how to install it. Example:\n   ```\n   #!/bin/bash\n\n   # Dependency: This script requires `jq` cli installed: https://stedolan.github.io/jq/\n   # Install via homebrew: `brew install jq`\n\n   # @raycast.schemaVersion 1\n   # @raycast.title Prettify JSON from Clipboard\n   ...\n   ```\n\n\n2. Make sure you have code that handles missing dependency. Example:\n   ```bash\n   if ! command -v download &> /dev/null; then\n\t     echo \"download command is required (https://github.com/kevva/download-cli).\";\n\t     exit 1;\n   fi\n   ```\n   \n### Scripts that require installation of apps\n\nSome Scripts control apps and therefore require them to be installed. Make sure to hint the requirement and add guidance on how to install it at the top of the script:\n\n```\n#!/bin/bash\n\n# Note: Plash v2.2.0 required\n# Install via Mac App Store: https://apps.apple.com/app/id1494023538\n\n# @raycast.schemaVersion 1\n```\n\n### Bash profiles and environmental variables\n\nAll Script Commands are executed in a non-login shell to avoid additional information loaded from profiles that aren't relevant to Raycast. With an argument after a shebang, you can run a script in a login shell, e.g. `#!/bin/bash -l`. We don't allow Script Commands that make use of this feature in this repository. Mainly to guarantee easy portability, explicit injection of information and best performance.\n\n*NOTE:* We will add support for environmental variables in Raycast and keep track of it in [this issue](https://github.com/raycast/script-commands/issues/77).\n\n### Auto generated files\n\nThere are some files auto generated by our Toolkit after each commit pushed to this repository, for now, this is the list of files:\n\n- `commands/README.md`\n- `commands/extensions.json`\n\nRemember to keep these files unchanged. All manual changes will be lost when our integration workflow is performed. The information used to fill these files is collected from the Script Commands pushed to this repository. No changes on your side in these files are necessary.\n\n## Examples\n\nSome examples to get started:\n\n- **[Apple Music Play](commands/media/apple-music/apple-music-play.applescript)**: An `AppleScript` to start playing music.\n- **[Sentry Unresolved Issues](commands/developer-utils/sentry/sentry-unresolved-issues.template.py):** A `Python` script that fetches information from an API and parses the JSON response.\n- **[Slack Set Status](commands/communication/slack/set-slack-status.template.sh)**: A `Bash` script that sends a JSON payload with cURL.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0615234375,
          "content": "MIT License\n\nCopyright (c) 2020-2021 Raycast Technologies Ltd.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.00390625,
          "content": "EXECUTABLE_NAME = toolkit\n\nTOOLKIT_PATH = Tools/Toolkit\nBUILD_PATH_RELEASE = $(TOOLKIT_PATH)/.build/release\nEXECUTABLE_PATH_RELEASE = $(BUILD_PATH_RELEASE)/Toolkit\n\nBUILD_PATH_DEBUG = $(TOOLKIT_PATH)/.build/debug\nEXECUTABLE_PATH_DEBUG = $(BUILD_PATH_DEBUG)/Toolkit\n\nclean:\n\trm -rf $(TOOLKIT_PATH)/.build $(EXECUTABLE_NAME)\n\nbuild: clean\n\tswift build -c release --disable-sandbox --package-path $(TOOLKIT_PATH)\n\tln -s $(EXECUTABLE_PATH_RELEASE) $(EXECUTABLE_NAME)\n\nbuild-debug:\n\tif [ -f $(EXECUTABLE_NAME) ]; then rm $(EXECUTABLE_NAME); fi\n\n\tswift build --package-path $(TOOLKIT_PATH)\n\tln -s $(EXECUTABLE_PATH_DEBUG) $(EXECUTABLE_NAME)\n\ngen-docs:\n\t./$(EXECUTABLE_NAME) generate-documentation\n\ngen-docs-and-commit: gen-docs\n\t./$(TOOLKIT_PATH)/integration.sh commit_documentation\n\nset-executable:\n\t./$(EXECUTABLE_NAME) set-executable\n\nset-executable-and-commit: set-executable\n\t./$(TOOLKIT_PATH)/integration.sh commit_executable\n\nlint:\n\tswiftlint lint\n\nfix:\n\tswiftlint --fix\n\nopen:\n\topen -a /Applications/Xcode.app $(TOOLKIT_PATH)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.291015625,
          "content": "<div align=\"center\">\n  <img alt=\"Raycast Logo\" src=\"images/logo.png\" height=\"240\"/>\n\n  <div align=\"center\">\n    <a href=\"https://github.com/raycast/script-commands/tree/master/commands\">\n        <img alt=\"GitHub contributors\" src=\"https://img.shields.io/badge/dynamic/json?style=flat&color=DF6D66&label=Script%20Commands&query=$.totalScriptCommands&url=https:%2F%2Fraw.githubusercontent.com%2Fraycast%2Fscript-commands%2Fmaster%2Fcommands%2Fextensions.json&logo=data:image%2Fpng%3Bbase64,iVBORw0KGgoAAAANSUhEUgAAAFgAAABYCAIAAAD%2B96djAAAIC0lEQVR4nOybW2zb1hmADynqLsuWRFLOBVmTpqkVy5LlpkgfDGRdnSvcdSiKIUWHosO8lwDtw4Bge1pRYMAw9KXAgAxYMiTNGjRZt%2B5plxQIkCzpNjduZMmJnMRpt7WR7NgSJYqULFISNUQ8pikpKVLpkOwDP%2BQhUajj40%2F%2Ff3j%2Bn0fEY1sfByYA4EZP4JuCKQJiioCYIiCmCIgpAmKKgJgiIKYIiCkCYoqAmCIgpgiIKQJiioCYIiDGi9jidIQ8bqNnYbSIkNv9h7HY%2B7HRXf39xs7ESBFbnc5To5Gg3d5vtf4uMhLu8xg4GSNF7BroJ202%2Be9eK3EmNvr0gGFxYRnw%2BY362SmeL1Rrzwb8AMMAAHYc30%2BSl3JMtlrVfzJGigAAJDguXRH2kQHowmJ5Phi8kmeWRVHnmegt4gmXa7vLlRYE5ZUUz%2BertT0BPwZd4JNBejpfWFJdowO6itjssJ8bix3euGGGZdOV9d8zwXFtOXKQoi4yuayoX47oJ2Kzw%2FHuaHSz00ng%2BH6K%2BpjJ31PFf4Lj%2BHp93O9T4mKCJC8zTE6v9UI%2FEc8M9B%2FeuNGy9plPBulrrXERLxbvVip7SVJ24SGIFwaDuuWIfiI%2BK68u8KVDNIUpLmi6LUfm%2BVJnjuizduq6RnxWLmcqwgQZkF0QOH6Aoq51rBeda%2BelnObrhbYiQm73bt%2FAQqmsvJLi%2BYVSaS9Fyjlia8bFbLH4ZaWiXJPgOLWvtdgpZrTMEQ1FbHU634tFX9wwmCxy%2F11dBQAMEMSugX6x0ahJjRFvn3wZgeOHaGpREAI22xanU%2F7D1%2Bsei2W7GxZjDovlgMY5gml0LCDkcZ%2BKRmi7HQAgStKRuRsXcrlxv%2B%2F3o9GuxyzWalPJuasFFulMIVrVGttcrsBaHWHD8Z9sewzreUwvQZwYCYfcmtTsWon4y%2FLKVGJOlCQAwE2OfyWeaKAY1mu1nh2LaVGnalh9XmSYI3M3Uhz3cny2UKuhGlauU2NeL6oBZVCK2Oyw7yNJ9SsXcrnJq58itCDjJYhT0cgQ0r4WMhHyDvrX4Z37qRYXSDJCZjpfkBpwPK%2BVOBmN7HC7UA2ORsQTLtefnoptc7lsOH4sPPzShkEkw7ZxbnHx6PxNxcWg3f7BU2OocgSNCJ%2FV6iUIOCKG%2FWroyYOtcYGKD5fuvXX7DlDiopkjSNZONCI%2BYdnXEklubS3AMeyd4Z0auTidTr95%2B446R87ERnvvgyNbI6YL7A%2FiCcWFDcdf3rQR1eBtnE6nfzp%2FS1LFRe998O5FbHU6v9%2B6FiQ57sfJuUq93suEHpE%2FLi39YmE9R3rvg3cpIuRxnx0b%2FeXQk69u2qR%2BfbpwP0d41PdLGWUZkjl59wE50nUfvJuia4vDcSY2GrTbMQx7NuBPV4QUzyv%2Fm64I11h2kqYzgvDnpXstb3Q6Xxzs%2FobyzMBAosh90VqnouqDdxMRbovFga%2B9EcPeDj0gLqY0yBGHxXI8Et7d%2BpmfTqePzt9ScsSK457WwHlEuomIbLU6w7IHaMou68CwPQF%2FoVpLcJxyzZeVyr8LbLnVRY8R8bBejtIHFyTp9RupK%2Fl8FyN32Y%2FICMIVhpmkabsFb6q4nyN8vR4vFpVryh0R0bsIpZfT2QdnxOq76fQ%2FmG4s9NSYWRbFT1l2P0XaLRbQlDHu992tVOb50sPegkSEHBedffAkx6nbXF%2BXnvYRV1n2cHy2qNpHvR0aalsvEPL35RW5rgcA9BHEe7HobnTPSnvdUM3zpVfis8Xquou3dmzXyMVH2ewb11PK%2FbKvub9G5QLBzvI6x7%2BWSCpxATDszR3bX0KRAp2cz2bVe0r5lolkZGQ9yyGP%2B2Q0MthsUgIApEbj57cWzmQy6msom23c7%2Bv6R8wUWHkVOEiR7wzvXK3Xp5JzM2yx57kDxM3bHW7XB2NjXiu8jV9mmFdnk6gGb%2BMQRS2LAioLiDtUt0vllhxBhBXDjkfCzwUC6hf%2FurKC0AL6nmW8WFSvnb1jxbDfjAxPkOSxkeHvBDR8FoW%2BeXud4w9fi7OInmIfCw8%2F1%2ByD2nD8t5GR7wVpJMN2okkXe75UmkrOIcmRs5lFZe9QlSROsxpfqyddAADaZjvyrS191vUS6JM8e25xUX2NlyB%2B9vg2eZ8uc345%2B1E2q77m237%2FiehIVZJ%2BlJz7Z76g0Ww1FAEAeLq%2F%2F0Qk7LVa5X9KjcbR%2BZsfttbm4z7f8UjYIe%2FTm88H37iROr%2FS4uK7QbpUq1%2FI5bSbqrZPwzOCcIlhng8G5W0PhmF7SbKtTv2iUrlfy1KUrXmNBcMO0VRGaOlx3CqV%2FtN8jKwdmp%2BPyIrVzjo13%2BpC6eUQa74myMBCqXSnXNZ0bmr0OCiyLIrThcLB1v5FpqOvNXO%2FlqXWY4ciPy%2BX1WcrNEWnEzNLgnAxl5sgSbl9JH%2FmXK02W2yJi4%2BZ%2FGSQll3wtdr7mYymh0PU6Hd0KCtWLzPMC8GgkiN7%2FO05ck8U5RypNRo%2FTCTR7h2%2FGl3PUOWq1c4cKXSsFzMs%2B7eVlX9pcyDkYeh98nbpQT2%2Bzj74%2F1a77zV1hwFnsZdF8VIuNxmkHWs9vn1koC1H9MeYQ%2BkP7IMzYjVpnAvDvq8xw7bUqaIkfb6q366hEyO%2FpqD0wSUAXr%2Be6roTjwRta41HIeRxewhCo0ODj043T8fQ8hXPQfTE%2BK87fkMwRUBMERBTBMQUATFFQEwREFMExBQBMUVATBEQUwTEFAExRUBMERBTBOT%2FAQAA%2F%2F98wKt7wQJ9rAAAAABJRU5ErkJggg%3D%3D&labelColor=202123\" height=\"20\" width=\"auto\">\n    </a>\n    <a href=\"https://twitter.com/raycastapp\">\n      <img alt=\"Twitter Follow\" src=\"https://img.shields.io/twitter/follow/raycastapp?style=flat&color=5C9BA1\" height=\"20\" width=\"auto\">\n    </a>\n  </div>\n\n<br>\n\n  <h1>Raycast Script Commands</h1>\n\n</div>\n\n[Raycast](https://raycast.com/) lets you control your tools with a few keystrokes and installing script commands makes it possible to execute commands from anywhere on your desktop. They are a great way to speed up every-day tasks such as converting data, opening bookmarks or triggering dev workflows. This repository contains some example scripts as well as links to our community commands and documentation to write your own ones.\n\n**✨ Looking to build richer extensions?** Check out the Extensions API [here](https://github.com/raycast/extensions).\n\n🚨 For anything that is not related to script commands, please [send us an email](mailto:feedback@raycast.com), use the feedback command within Raycast, or join the [Slack community](https://www.raycast.com/community).\n\n<br>\n<br>\n\n![Script Command Banner](images/screenshots/script-commands-readme-header.png)\n\n<br>\n<br>\n\n## Install Script Commands from this repository\n\nTo install new commands, follow these steps:\n\n1. Choose a script from the [community repo](https://github.com/raycast/script-commands/tree/master/commands#apps) and save it into a new directory.\n   \n   Scripts containing the word `.template.` in the filename require some values to be set (check [the troubleshooting section](#troubleshooting-and-faqs) for more information).\n   \n   Alternatively, instead of creating a new directory you can reuse the repo's [`_enable-commands` folder](https://github.com/raycast/script-commands/tree/master/_enabled-commands).\n3. Open the Extensions tab in the Raycast preferences\n4. Click the plus button\n5. Click `Add Script Directory`\n6. Select directories containing your Script Commands\n\n**💡 Hint:** We recommend that you don't directly load the community script directories into Raycast to avoid potential restructuring and new script commands suddenly appearing in Raycast.\n\n![Add directory](/images/screenshots/add-directory.png)\n\n\n## Create your own Script Commands\n\nTo write your own custom Script Commands, go over the following steps:\n\n1. Use the `Create Script Command` functionality in Raycast\n2. Write and edit your script using your favourite code editor\n3. Run your Script Command from the Raycast root search\n\n**💡 Hint:** If you choose to write your script in `Bash`, we highly recommend using the [Shellcheck](https://marketplace.visualstudio.com/items?itemName=timonwong.shellcheck) linter as this will ensure smooth running of your script. All  scripts uploaded to GitHub will need to have been run through ShellCheck.\n\n![Create Script Command](/images/screenshots/Create-Script-Command.png)\n\n### Metadata\n\nThese parameters are available for you to customize your Script Command in Raycast. For practical examples of how these should be used, as well as best practices and supported languages, please browse our templates and community-built scripts.\n\n| Name                 | Description                                                                                                                                                                                                                                                                          | Required | App Version         |\n|----------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------|---------------------|\n|schemaVersion        | Schema version to prepare for future changes in the API. Currently there is only version 1 available.                                                                                                                                                                                | Yes      | 0.29+               |\n| title                | Display name of the Script Command that is shown as title in the root search.                                                                                                                                                                                                        | Yes      | 0.29+               |\n| mode                 | Specifies how the script is executed and how the output is presented. [Details of the options for this parameter can be viewed here](https://github.com/raycast/script-commands/blob/master/documentation/OUTPUTMODES.md) | Yes      | 0.29+               |\n| packageName          | Display name of the package that is shown as subtitle in the root search. When not provided, the name will be inferred from the script directory name.                                                                                                                               | No       | 0.29+               |\n| icon                 | Icon that is displayed in the root search. Can be an emoji, a file path (relative or full) or a remote URL (only https). Supported formats for images are PNG and JPEG. Please make sure to use small icons, recommended size - 64px.                                                | No       | 0.29+               |\n| iconDark             | Same as `icon`, but for dark theme. If not specified, then `icon` will be used in both themes.                                                                                                                             | No       | 1.3.0+              |\n| currentDirectoryPath | Path from which the script is executed. Default is the path of the script.                                                                                                                                                                                                           | No       | 0.29+               |\n| needsConfirmation    | Specify `true` if you would like to show confirmation alert dialog before running the script. Can be helpful with destructive scripts like \"Quit All Apps\" or \"Empty Trash\". Default value is `false`.                                                                               | No       | 0.30+               |\n| refreshTime          | Specify a refresh interval for inline mode scripts in seconds, minutes, hours or days. Examples: 10s, 1m, 12h, 1d. Note that the actual times can vary depending on how the OS prioritises scheduled work. The minimum refresh interval is 10 seconds. If you have more than 10 inline commands, only the first 10 will be refreshed automatically; the rest have to be manually refreshed by navigating to them and pressing `return`.| No       | 0.31+ |\n| argument[1...3]      | [Custom arguments, see Passing Arguments page](https://github.com/raycast/script-commands/blob/master/documentation/ARGUMENTS.md) for detail of how to use this field | No | 1.2.0+ |\n| author               | Define an author name to be part of the script commands documentation | No | |\n| authorURL            | Author social media, website, email or anything to help the users to get in touch | No | |\n| description          | A brief description about the script command to be presented in the documentation | No | |\n\n### Output Mode\n\nYou can use the standard output to present messages in Raycast. Depending on the `mode`, the standard output of your scripts is differently presented.`fullOutput` and `inline` modes support ANSI Escape codes allowing to color generated output by changing its background and foreground color. [You can view the different output mode options as well as their various forms and color options here.](https://github.com/raycast/script-commands/blob/master/documentation/OUTPUTMODES.md)\n\n\n### Error Handling\n\nIf the script exits with a status code not equal to 0, Raycast interprets it as failed and shows a toast that the script failed to run. If this script has inline or compact mode, the last line of the output will be used as an error message. Consider this example for a bash script:\n```bash\nif ! [[ $value =~ $regex ]] ; then\n  echo \"Invalid value provided\"\n  exit 1\nelse\n  ...\n```\n\n## Troubleshooting and FAQs\n<details>\n  <summary>Why isn't my script appearing in Raycast?</summary>\n\n* Ensure the filename doesn't contain `.template.` string\n* Check that all required metadata parameters are provided. See the table above which parameters are required.\n* Ensure you use either `#` or `//` comments for metadata parameters\n* If nothing helps, try to go step by step from a [template](https://github.com/raycast/script-commands/tree/master/templates) Script Command or use one of the examples in this repo.\n</details>\n\n<details>\n  <summary>Why isn't my Shell script  working?</summary>\n\n* Ensure the filename doesn't contain `.template.` string\n* Run your code through [ShellCheck](https://www.shellcheck.net/) to check for syntax errors or unexpected characters\n</details>\n\n<details>\n  <summary>Can I build in a non-login shell?</summary>\n\n**We only allow Script Commands that run in a non-login shell in this repository as agreed on in our [contribution guidelines](https://github.com/raycast/script-commands/blob/master/CONTRIBUTING.md), due to any dependencies.**\nHowever, if you need to run your local script as login-shell, you can specify an argument after shebang, e.g. `#!/bin/bash -l` for bash. We also append `/usr/local/bin` to `$PATH` variable so you can use your local shell commands without any additional steps. If this is not enough, you can always extend `$PATH` by adding `export PATH='/some/extra/path:$PATH'` at the top of your script.\n</details>\n\n## Community\n\nWe're always looking for new Script Commands or other ways to improve Raycast. If you have anything cool to show, please send us a pull request. If we screwed something up, please report a bug. Join our [Slack community](https://www.raycast.com/community) to brainstorm ideas with like-minded folks.\n"
        },
        {
          "name": "Tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "_enabled-commands",
          "type": "tree",
          "content": null
        },
        {
          "name": "commands",
          "type": "tree",
          "content": null
        },
        {
          "name": "documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}