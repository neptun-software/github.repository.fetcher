{
  "metadata": {
    "timestamp": 1736568847633,
    "page": 32,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "boot2docker/boot2docker",
      "stars": 8330,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.052734375,
          "content": "*.iso\n*.md\n*.qcow2\n*.sh\n.dockerignore\n.git\nDockerfile\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.013671875,
          "content": "*.iso\n*.qcow2\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 18.9931640625,
          "content": "FROM debian:buster-slim\n\nSHELL [\"/bin/bash\", \"-Eeuo\", \"pipefail\", \"-xc\"]\n\nRUN apt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n\t\tbash-completion \\\n\t\tbc \\\n\t\tbison \\\n\t\tca-certificates \\\n\t\tcpio \\\n\t\tflex \\\n\t\tgcc \\\n\t\tgit \\\n\t\tgnupg dirmngr \\\n\t\tgolang-go \\\n\t\tkmod \\\n\t\tlibc6-dev \\\n\t\tlibelf-dev \\\n\t\tlibssl-dev \\\n\t\tmake \\\n\t\tp7zip-full \\\n\t\tpatch \\\n\t\tsquashfs-tools \\\n\t\twget \\\n\t\txorriso \\\n\t\txz-utils \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*\n\n# cleaner wget output\nRUN echo 'progress = dot:giga' >> ~/.wgetrc; \\\n# color prompt (better debugging/devel)\n\tcp /etc/skel/.bashrc ~/\n\nWORKDIR /rootfs\n\n# updated via \"update.sh\"\nENV TCL_MIRRORS http://distro.ibiblio.org/tinycorelinux http://repo.tinycorelinux.net\nENV TCL_MAJOR 11.x\nENV TCL_VERSION 11.0\n\n# http://distro.ibiblio.org/tinycorelinux/8.x/x86_64/archive/8.2.1/distribution_files/rootfs64.gz.md5.txt\n# updated via \"update.sh\"\nENV TCL_ROOTFS=\"rootfs64.gz\" TCL_ROOTFS_MD5=\"ea8699a39115289ed00d807eac4c3118\"\n\nCOPY files/tce-load.patch files/udhcpc.patch /tcl-patches/\n\nRUN for mirror in $TCL_MIRRORS; do \\\n\t\tif \\\n\t\t\t{ \\\n\t\t\t\twget -O /rootfs.gz \"$mirror/$TCL_MAJOR/x86_64/archive/$TCL_VERSION/distribution_files/$TCL_ROOTFS\" \\\n# 9.x doesn't seem to use \".../archive/X.Y.Z/...\" in the same way as 8.x :(\n\t\t\t\t\t|| wget -O /rootfs.gz \"$mirror/$TCL_MAJOR/x86_64/release/distribution_files/$TCL_ROOTFS\" \\\n\t\t\t; } && echo \"$TCL_ROOTFS_MD5 */rootfs.gz\" | md5sum -c - \\\n\t\t; then \\\n\t\t\tbreak; \\\n\t\tfi; \\\n\tdone; \\\n\techo \"$TCL_ROOTFS_MD5 */rootfs.gz\" | md5sum -c -; \\\n\tzcat /rootfs.gz | cpio \\\n\t\t--extract \\\n\t\t--make-directories \\\n\t\t--no-absolute-filenames \\\n\t; \\\n\trm /rootfs.gz; \\\n\t\\\n\tfor patch in /tcl-patches/*.patch; do \\\n\t\tpatch \\\n\t\t\t--input \"$patch\" \\\n\t\t\t--strip 1 \\\n\t\t\t--verbose \\\n\t\t; \\\n\tdone; \\\n\t\\\n\t{ \\\n\t\techo '# https://1.1.1.1/'; \\\n\t\techo 'nameserver 1.1.1.1'; \\\n\t\techo 'nameserver 1.0.0.1'; \\\n\t\techo; \\\n\t\techo '# https://developers.google.com/speed/public-dns/'; \\\n\t\techo 'nameserver 8.8.8.8'; \\\n\t\techo 'nameserver 8.8.4.4'; \\\n\t} > etc/resolv.conf; \\\n\tcp etc/resolv.conf etc/resolv.conf.b2d; \\\n\t{ \\\n\t\techo '#!/usr/bin/env bash'; \\\n\t\techo 'set -Eeuo pipefail'; \\\n\t\techo \"cd '$PWD'\"; \\\n\t\techo 'cp -T etc/resolv.conf etc/resolv.conf.bak'; \\\n\t\techo 'cp -T /etc/resolv.conf etc/resolv.conf'; \\\n\t\techo 'cp -T /proc/cpuinfo proc/cpuinfo 2>/dev/null || :'; \\\n\t\techo 'trap \"mv -T etc/resolv.conf.bak etc/resolv.conf || :; rm proc/cpuinfo 2>/dev/null || :\" EXIT'; \\\n\t\techo 'env -i PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" TERM=\"$TERM\" chroot '\"'$PWD'\"' \"$@\"'; \\\n\t} > /usr/local/bin/tcl-chroot; \\\n\tchmod +x /usr/local/bin/tcl-chroot\n\n# add new \"docker\" user (and replace \"tc\" user usage with \"docker\")\nRUN tcl-chroot adduser \\\n\t\t-h /home/docker \\\n\t\t-g 'Docker' \\\n\t\t-s /bin/sh \\\n\t\t-G staff \\\n\t\t-D \\\n\t\t-u 1000 \\\n\t\tdocker \\\n\t; \\\n\techo 'docker:tcuser' | tcl-chroot chpasswd; \\\n\techo 'docker ALL = NOPASSWD: ALL' >> etc/sudoers; \\\n\tsed -i 's/USER=\"tc\"/USER=\"docker\"/g' etc/init.d/tc-* etc/init.d/services/*\n\n# https://github.com/tatsushid/docker-tinycore/blob/017b258a08a41399f65250c9865a163226c8e0bf/8.2/x86_64/Dockerfile\nRUN mkdir -p proc; \\\n\ttouch proc/cmdline; \\\n\tmkdir -p tmp/tce/optional usr/local/tce.installed/optional; \\\n\tchown -R root:staff tmp/tce usr/local/tce.installed; \\\n\tchmod -R g+w tmp/tce; \\\n\tln -sT ../../tmp/tce etc/sysconfig/tcedir; \\\n\techo -n docker > etc/sysconfig/tcuser; \\\n\ttcl-chroot sh -c '. /etc/init.d/tc-functions && setupHome'\n\n# as of squashfs-tools 4.4, TCL's unsquashfs is broken... (fails to unsquashfs *many* core tcz files)\n# https://github.com/plougher/squashfs-tools/releases\nENV SQUASHFS_VERSION 4.4\nRUN wget -O squashfs.tgz \"https://github.com/plougher/squashfs-tools/archive/$SQUASHFS_VERSION.tar.gz\"; \\\n\ttar --directory=/usr/src --extract --file=squashfs.tgz; \\\n\tmake -C \"/usr/src/squashfs-tools-$SQUASHFS_VERSION/squashfs-tools\" \\\n\t\t-j \"$(nproc)\" \\\n# https://github.com/plougher/squashfs-tools/blob/4.4/squashfs-tools/Makefile#L1\n\t\tGZIP_SUPPORT=1 \\\n#\t\tXZ_SUPPORT=1 \\\n#\t\tLZO_SUPPORT=1 \\\n#\t\tLZ4_SUPPORT=1 \\\n#\t\tZSTD_SUPPORT=1 \\\n\t\tEXTRA_CFLAGS='-static' \\\n\t\tEXTRA_LDFLAGS='-static' \\\n\t\tINSTALL_DIR=\"$PWD/usr/local/bin\" \\\n\t\tinstall \\\n\t; \\\n\ttcl-chroot unsquashfs -v || :\n\nRUN { \\\n\t\techo '#!/bin/bash -Eeux'; \\\n\t\techo 'tcl-chroot su -c \"tce-load -wicl \\\"\\$@\\\"\" docker -- - \"$@\"'; \\\n\t} > /usr/local/bin/tcl-tce-load; \\\n\tchmod +x /usr/local/bin/tcl-tce-load\n\nRUN tcl-tce-load bash; \\\n\ttcl-chroot bash --version; \\\n# delete all the TCL user-specific profile/rc files -- they have odd settings like auto-login from interactive root directly to \"tcuser\"\n# (and the bash-provided defaults are reasonably sane)\n\trm -vf \\\n\t\thome/docker/.ashrc \\\n\t\thome/docker/.bashrc \\\n\t\thome/docker/.profile \\\n\t\troot/.ashrc \\\n\t\troot/.bashrc \\\n\t\troot/.profile \\\n\t; \\\n\techo 'source /etc/profile' > home/docker/.profile; \\\n\techo 'source /etc/profile' > root/.profile; \\\n# swap \"docker\" (and \"root\") user shell from /bin/sh to /bin/bash now that it exists\n\tsed -ri '/^(docker|root):/ s!:[^:]*$!:/bin/bash!' etc/passwd; \\\n\tgrep -E '^root:' etc/passwd | grep bash; \\\n\tgrep -E '^docker:' etc/passwd | grep bash; \\\n# /etc/profile has a minor root bug where it uses \"\\#\" in PS1 instead of \"\\$\" (so we get a counter in our prompt instead of a \"#\")\n# but also, does not use \\[ and \\] for escape sequences, so Bash readline gets confused, so let's replace it outright with something perty\n\tgrep '\\\\#' etc/profile; \\\n\techo 'PS1='\"'\"'\\[\\e[1;32m\\]\\u@\\h\\[\\e[0m\\]:\\[\\e[1;34m\\]\\w\\[\\e[0m\\]\\$ '\"'\"'' > etc/profile.d/boot2docker-ps1.sh; \\\n\tsource etc/profile.d/boot2docker-ps1.sh; \\\n\t[ \"$PS1\" = '\\[\\e[1;32m\\]\\u@\\h\\[\\e[0m\\]:\\[\\e[1;34m\\]\\w\\[\\e[0m\\]\\$ ' ]\n\n# https://www.kernel.org/category/signatures.html#important-fingerprints\nENV LINUX_GPG_KEYS \\\n# Linus Torvalds\n\t\tABAF11C65A2970B130ABE3C479BE3E4300411886 \\\n# Greg Kroah-Hartman\n\t\t647F28654894E3BD457199BE38DBBDC86092693E\n\n# updated via \"update.sh\"\nENV LINUX_VERSION 4.19.103\n\nRUN wget -O /linux.tar.xz \"https://cdn.kernel.org/pub/linux/kernel/v${LINUX_VERSION%%.*}.x/linux-${LINUX_VERSION}.tar.xz\"; \\\n\twget -O /linux.tar.asc \"https://cdn.kernel.org/pub/linux/kernel/v${LINUX_VERSION%%.*}.x/linux-${LINUX_VERSION}.tar.sign\"; \\\n\t\\\n# decompress (signature is for the decompressed file)\n\txz --decompress /linux.tar.xz; \\\n\t[ -f /linux.tar ] && [ ! -f /linux.tar.xz ]; \\\n\t\\\n# verify\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\tfor key in $LINUX_GPG_KEYS; do \\\n\t\tfor mirror in \\\n\t\t\tha.pool.sks-keyservers.net \\\n\t\t\tpgp.mit.edu \\\n\t\t\thkp://p80.pool.sks-keyservers.net:80 \\\n\t\t\tipv4.pool.sks-keyservers.net \\\n\t\t\tkeyserver.ubuntu.com \\\n\t\t\thkp://keyserver.ubuntu.com:80 \\\n\t\t; do \\\n\t\t\tif gpg --batch --verbose --keyserver \"$mirror\" --keyserver-options timeout=5 --recv-keys \"$key\"; then \\\n\t\t\t\tbreak; \\\n\t\t\tfi; \\\n\t\tdone; \\\n\t\tgpg --batch --fingerprint \"$key\"; \\\n\tdone; \\\n\tgpg --batch --verify /linux.tar.asc /linux.tar; \\\n\tgpgconf --kill all; \\\n\trm -rf \"$GNUPGHOME\"; \\\n\t\\\n# extract\n\ttar --extract --file /linux.tar --directory /usr/src; \\\n\trm /linux.tar /linux.tar.asc; \\\n\tln -sT \"linux-$LINUX_VERSION\" /usr/src/linux; \\\n\t[ -d /usr/src/linux ]\n\nRUN { \\\n\t\techo '#!/usr/bin/env bash'; \\\n\t\techo 'set -Eeuo pipefail'; \\\n\t\techo 'while [ \"$#\" -gt 0 ]; do'; \\\n\t\techo 'conf=\"${1%%=*}\"; shift'; \\\n\t\techo 'conf=\"${conf#CONFIG_}\"'; \\\n# https://www.kernel.org/doc/Documentation/kbuild/kconfig-language.txt\n# TODO somehow capture \"if\" directives (https://github.com/torvalds/linux/blob/52e60b754438f34d23348698534e9ca63cd751d7/drivers/message/fusion/Kconfig#L12) since they're dependency related (can't set \"CONFIG_FUSION_SAS\" without first setting \"CONFIG_FUSION\")\n\t\techo 'find /usr/src/linux/ \\\n\t\t\t-name Kconfig \\\n\t\t\t-exec awk -v conf=\"$conf\" '\"'\"' \\\n\t\t\t\t$1 ~ /^(menu)?config$/ && $2 == conf { \\\n\t\t\t\t\tyes = 1; \\\n\t\t\t\t\tprintf \"-- %s:%s --\\n\", FILENAME, FNR; \\\n\t\t\t\t\tprint; \\\n\t\t\t\t\tnext; \\\n\t\t\t\t} \\\n\t\t\t\t$1 ~ /^(end)?((menu)?config|choice|comment|menu|if|source)$/ { yes = 0; next } \\\n# TODO parse help text properly (indentation-based) to avoid false positives when scraping deps\n\t\t\t\tyes { print; next } \\\n\t\t\t'\"'\"' \"{}\" + \\\n\t\t'; \\\n\t\techo 'done'; \\\n\t} > /usr/local/bin/linux-kconfig-info; \\\n\tchmod +x /usr/local/bin/linux-kconfig-info; \\\n\tlinux-kconfig-info CGROUPS\n\nCOPY files/kernel-config.d /kernel-config.d\n\nRUN setConfs=\"$(grep -vEh '^[#-]' /kernel-config.d/* | sort -u)\"; \\\n\tunsetConfs=\"$(sed -n 's/^-//p' /kernel-config.d/* | sort -u)\"; \\\n\tIFS=$'\\n'; \\\n\tsetConfs=( $setConfs ); \\\n\tunsetConfs=( $unsetConfs ); \\\n\tunset IFS; \\\n\t\\\n\tmake -C /usr/src/linux \\\n\t\tdefconfig \\\n\t\tkvmconfig \\\n\t\txenconfig \\\n\t\t> /dev/null; \\\n\t\\\n\t( \\\n\t\tset +x; \\\n\t\tfor conf in \"${unsetConfs[@]}\"; do \\\n\t\t\tsed -i -e \"s!^$conf=.*\\$!# $conf is not set!\" /usr/src/linux/.config; \\\n\t\tdone; \\\n\t\tfor confV in \"${setConfs[@]}\"; do \\\n\t\t\tconf=\"${confV%%=*}\"; \\\n\t\t\tsed -ri -e \"s!^($conf=.*|# $conf is not set)\\$!$confV!\" /usr/src/linux/.config; \\\n\t\t\tif ! grep -q \"^$confV\\$\" /usr/src/linux/.config; then \\\n\t\t\t\techo \"$confV\" >> /usr/src/linux/.config; \\\n\t\t\tfi; \\\n\t\tdone; \\\n\t); \\\n\tmake -C /usr/src/linux olddefconfig; \\\n\tset +x; \\\n\tret=; \\\n\tfor conf in \"${unsetConfs[@]}\"; do \\\n\t\tif grep \"^$conf=\" /usr/src/linux/.config; then \\\n\t\t\techo \"$conf is set!\"; \\\n\t\t\tret=1; \\\n\t\tfi; \\\n\tdone; \\\n\tfor confV in \"${setConfs[@]}\"; do \\\n\t\tif ! grep -q \"^$confV\\$\" /usr/src/linux/.config; then \\\n\t\t\tkconfig=\"$(linux-kconfig-info \"$confV\")\"; \\\n\t\t\techo >&2; \\\n\t\t\techo >&2 \"'$confV' is not set:\"; \\\n\t\t\techo >&2; \\\n\t\t\techo >&2 \"$kconfig\"; \\\n\t\t\techo >&2; \\\n\t\t\tfor dep in $(awk '$1 == \"depends\" && $2 == \"on\" { $1 = \"\"; $2 = \"\"; gsub(/[^a-zA-Z0-9_-]+/, \" \"); print }' <<<\"$kconfig\"); do \\\n\t\t\t\tgrep >&2 -E \"^CONFIG_$dep=|^# CONFIG_$dep is not set$\" /usr/src/linux/.config || :; \\\n\t\t\tdone; \\\n\t\t\techo >&2; \\\n\t\t\tret=1; \\\n\t\tfi; \\\n\tdone; \\\n\t[ -z \"$ret\" ] || exit \"$ret\"\n\nRUN make -C /usr/src/linux -j \"$(nproc)\" bzImage modules; \\\n\tmake -C /usr/src/linux INSTALL_MOD_PATH=\"$PWD\" modules_install\nRUN mkdir -p /tmp/iso/boot; \\\n\tcp -vLT /usr/src/linux/arch/x86_64/boot/bzImage /tmp/iso/boot/vmlinuz\n\nRUN tcl-tce-load \\\n\t\tacpid \\\n\t\tbash-completion \\\n\t\tca-certificates \\\n\t\tcurl \\\n\t\te2fsprogs \\\n\t\tgit \\\n\t\tiproute2 \\\n\t\tiptables \\\n\t\tncursesw-terminfo \\\n\t\tnfs-utils \\\n\t\topenssh \\\n\t\topenssl-1.1.1 \\\n\t\tparted \\\n\t\tprocps-ng \\\n\t\trsync \\\n\t\ttar \\\n\t\tutil-linux \\\n\t\txz\n\n# bash-completion puts auto-load in /usr/local/etc/profile.d instead of /etc/profile.d\n# (this one-liner is the same as the loop at the end of /etc/profile with an adjusted search path)\nRUN echo 'for i in /usr/local/etc/profile.d/*.sh ; do if [ -r \"$i\" ]; then . $i; fi; done' > etc/profile.d/usr-local-etc-profile-d.sh; \\\n# Docker expects to find certs in /etc/ssl\n\tln -svT ../usr/local/etc/ssl etc/ssl; \\\n# make sure the Docker group exists and we're part of it\n\ttcl-chroot sh -eux -c 'addgroup -S docker && addgroup docker docker'\n\n# install kernel headers so we can use them for building xen-utils, etc\nRUN make -C /usr/src/linux INSTALL_HDR_PATH=/usr/local headers_install\n\n# http://download.virtualbox.org/virtualbox/\n# updated via \"update.sh\"\nENV VBOX_VERSION 5.2.36\n# https://www.virtualbox.org/download/hashes/$VBOX_VERSION/SHA256SUMS\nENV VBOX_SHA256 6124287b7a1790436a9b0b2601154b50c6cd6e680aeff45c61d03ee1158f3eb9\n# (VBoxGuestAdditions_X.Y.Z.iso SHA256, for verification)\n\nRUN wget -O /vbox.iso \"https://download.virtualbox.org/virtualbox/$VBOX_VERSION/VBoxGuestAdditions_$VBOX_VERSION.iso\"; \\\n\techo \"$VBOX_SHA256 */vbox.iso\" | sha256sum -c -; \\\n\t7z x -o/ /vbox.iso VBoxLinuxAdditions.run; \\\n\trm /vbox.iso; \\\n\tsh /VBoxLinuxAdditions.run --noexec --target /usr/src/vbox; \\\n\tmkdir /usr/src/vbox/amd64; \\\n\t7z x -so /usr/src/vbox/VBoxGuestAdditions-amd64.tar.bz2 | tar --extract --directory /usr/src/vbox/amd64; \\\n\trm /usr/src/vbox/VBoxGuestAdditions-*.tar.bz2; \\\n\tln -sT \"vboxguest-$VBOX_VERSION\" /usr/src/vbox/amd64/src/vboxguest\nRUN make -C /usr/src/vbox/amd64/src/vboxguest -j \"$(nproc)\" \\\n\t\tKERN_DIR='/usr/src/linux' \\\n\t\tKERN_VER=\"$(< /usr/src/linux/include/config/kernel.release)\" \\\n\t\tvboxguest vboxsf \\\n\t; \\\n\tcp -v /usr/src/vbox/amd64/src/vboxguest/*.ko lib/modules/*/; \\\n# create hacky symlink so these binaries can work as-is\n\tln -sT lib lib64; \\\n\tcp -v /usr/src/vbox/amd64/other/mount.vboxsf /usr/src/vbox/amd64/sbin/VBoxService sbin/; \\\n\tcp -v /usr/src/vbox/amd64/bin/VBoxControl bin/\n\n# TCL includes VMware's open-vm-tools 10.2.0.1608+ (no reason to compile that ourselves)\nRUN tcl-tce-load open-vm-tools; \\\n\ttcl-chroot vmhgfs-fuse --version; \\\n\ttcl-chroot vmtoolsd --version\n\nENV PARALLELS_VERSION 13.3.0-43321\n\nRUN wget -O /parallels.tgz \"https://download.parallels.com/desktop/v${PARALLELS_VERSION%%.*}/$PARALLELS_VERSION/ParallelsTools-$PARALLELS_VERSION-boot2docker.tar.gz\"; \\\n\tmkdir /usr/src/parallels; \\\n\ttar --extract --file /parallels.tgz --directory /usr/src/parallels --strip-components 1; \\\n\trm /parallels.tgz\nRUN cp -vr /usr/src/parallels/tools/* ./; \\\n\tmake -C /usr/src/parallels/kmods -f Makefile.kmods -j \"$(nproc)\" installme \\\n\t\tSRC='/usr/src/linux' \\\n\t\tKERNEL_DIR='/usr/src/linux' \\\n\t\tKVER=\"$(< /usr/src/linux/include/config/kernel.release)\" \\\n\t\tPRL_FREEZE_SKIP=1 \\\n\t; \\\n\tfind /usr/src/parallels/kmods -name '*.ko' -exec cp -v '{}' lib/modules/*/ ';'; \\\n\ttcl-chroot prltoolsd -V\n\n# https://github.com/xenserver/xe-guest-utilities/tags\n# updated via \"update.sh\"\nENV XEN_VERSION 7.18.0\n\nRUN wget -O /xen.tgz \"https://github.com/xenserver/xe-guest-utilities/archive/v$XEN_VERSION.tar.gz\"; \\\n\tmkdir /usr/src/xen; \\\n\ttar --extract --file /xen.tgz --directory /usr/src/xen --strip-components 1; \\\n\trm /xen.tgz\n# download \"golang.org/x/sys/unix\" dependency (new in 7.14.0)\nRUN cd /usr/src/xen; \\\n\tmkdir -p GOPATH/src/golang.org/x/sys; \\\n\twget -O sys.tgz 'https://github.com/golang/sys/archive/fc99dfbffb4e5ed5758a37e31dd861afe285406b.tar.gz'; \\\n\ttar -xf sys.tgz -C GOPATH/src/golang.org/x/sys --strip-components 1; \\\n\trm sys.tgz\nRUN GOPATH='/usr/src/xen/GOPATH' make -C /usr/src/xen -j \"$(nproc)\" PRODUCT_VERSION=\"$XEN_VERSION\" RELEASE='boot2docker'; \\\n\ttar --extract --file \"/usr/src/xen/build/dist/xe-guest-utilities_$XEN_VERSION-boot2docker_x86_64.tgz\"; \\\n\ttcl-chroot xenstore || [ \"$?\" = 1 ]\n\n# Hyper-V KVP Daemon\nRUN make -C /usr/src/linux/tools/hv hv_kvp_daemon; \\\n\tcp /usr/src/linux/tools/hv/hv_kvp_daemon usr/local/sbin/; \\\n\ttcl-chroot hv_kvp_daemon --help || [ \"$?\" = 1 ]\n\n# scan all built modules for kernel loading\nRUN tcl-chroot depmod \"$(< /usr/src/linux/include/config/kernel.release)\"\n\n# https://github.com/tianon/cgroupfs-mount/releases\nENV CGROUPFS_MOUNT_VERSION 1.4\n\nRUN wget -O usr/local/sbin/cgroupfs-mount \"https://github.com/tianon/cgroupfs-mount/raw/${CGROUPFS_MOUNT_VERSION}/cgroupfs-mount\"; \\\n\tchmod +x usr/local/sbin/cgroupfs-mount; \\\n\ttcl-chroot cgroupfs-mount\n\nENV DOCKER_VERSION 19.03.6\n\n# Get the Docker binaries with version that matches our boot2docker version.\nRUN DOCKER_CHANNEL='edge'; \\\n\tcase \"$DOCKER_VERSION\" in \\\n# all the pre-releases go in the \"test\" channel\n\t\t*-rc* | *-beta* | *-tp* ) DOCKER_CHANNEL='test' ;; \\\n\tesac; \\\n\t\\\n\twget -O /docker.tgz \"https://download.docker.com/linux/static/$DOCKER_CHANNEL/x86_64/docker-$DOCKER_VERSION.tgz\"; \\\n\ttar -zxvf /docker.tgz -C \"usr/local/bin\" --strip-components=1; \\\n\trm /docker.tgz; \\\n\t\\\n# download bash-completion too\n\twget -O usr/local/share/bash-completion/completions/docker \"https://github.com/docker/docker-ce/raw/v${DOCKER_VERSION}/components/cli/contrib/completion/bash/docker\"; \\\n\t\\\n\tfor binary in \\\n\t\tcontainerd \\\n\t\tctr \\\n\t\tdocker \\\n\t\tdocker-init \\\n\t\tdockerd \\\n\t\trunc \\\n\t; do \\\n\t\tchroot . \"$binary\" --version; \\\n\tdone\n\n# set up a few branding bits\nRUN { \\\n\t\techo 'NAME=Boot2Docker'; \\\n\t\techo \"VERSION=$DOCKER_VERSION\"; \\\n\t\techo 'ID=boot2docker'; \\\n\t\techo 'ID_LIKE=tcl'; \\\n\t\techo \"VERSION_ID=$DOCKER_VERSION\"; \\\n\t\techo \"PRETTY_NAME=\\\"Boot2Docker $DOCKER_VERSION (TCL $TCL_VERSION)\\\"\"; \\\n\t\techo 'ANSI_COLOR=\"1;34\"'; \\\n\t\techo 'HOME_URL=\"https://github.com/boot2docker/boot2docker\"'; \\\n\t\techo 'SUPPORT_URL=\"https://blog.docker.com/2016/11/introducing-docker-community-directory-docker-community-slack/\"'; \\\n\t\techo 'BUG_REPORT_URL=\"https://github.com/boot2docker/boot2docker/issues\"'; \\\n\t} > etc/os-release; \\\n\tsed -i 's/HOSTNAME=\"box\"/HOSTNAME=\"boot2docker\"/g' usr/bin/sethostname; \\\n\ttcl-chroot sethostname; \\\n\t[ \"$(< etc/hostname)\" = 'boot2docker' ]; \\\n\tfor num in 0 1 2 3; do \\\n\t\techo \"server $num.boot2docker.pool.ntp.org\"; \\\n\tdone > etc/ntp.conf; \\\n\trm -v etc/sysconfig/ntpserver\n\nCOPY files/forgiving-getty files/shutdown ./usr/local/sbin/\n\n# getty/inittab setup\nRUN awk -F: ' \\\n\t\t$1 == \"tty1\" { \\\n\t\t\tprint \"tty1::respawn:/usr/local/sbin/forgiving-getty tty1\"; \\\n\t\t\tprint \"ttyS0::respawn:/usr/local/sbin/forgiving-getty ttyS0\"; \\\n\t\t\tnext; \\\n\t\t} \\\n\t\t$1 ~ /^#?tty/ { next } \\\n\t\t{ print } \\\n\t' etc/inittab > etc/inittab.new; \\\n\tmv etc/inittab.new etc/inittab; \\\n\tgrep forgiving-getty etc/inittab; \\\n# /sbin/autologin likes to invoke getty directly, so we skip that noise (especially since we want to always autologin)\n# (and getty's \"-l\" argument cannot accept anything but a single command to \"exec\" directly -- no args)\n# (and getty's \"-n\" argument to autologin doesn't seem to work properly)\n\t{ \\\n\t\techo '#!/bin/sh'; \\\n\t\techo 'user=\"$(cat /etc/sysconfig/tcuser 2>/dev/null)\"'; \\\n\t\techo 'exec login -f \"${user:-docker}\"'; \\\n\t} > usr/local/sbin/autologin; \\\n\tchmod +x usr/local/sbin/autologin\n\n# ssh config prep\nRUN [ ! -f usr/local/etc/sshd_config ]; \\\n\tsed -r \\\n\t\t-e 's/^#(UseDNS[[:space:]])/\\1/' \\\n\t\t-e 's/^#(PermitUserEnvironment)[[:space:]].*$/\\1 yes/' \\\n\t\tusr/local/etc/ssh/sshd_config.orig \\\n\t\t> usr/local/etc/ssh/sshd_config; \\\n\tgrep '^UseDNS no$' usr/local/etc/ssh/sshd_config; \\\n# \"This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin\n# (and there are several important binaries in /usr/local/sbin that \"docker-machine\" needs to invoke like \"ip\" and \"iptables\")\n\tgrep '^PermitUserEnvironment yes$' usr/local/etc/ssh/sshd_config; \\\n\tmkdir -p home/docker/.ssh; \\\n\techo 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' > home/docker/.ssh/environment; \\\n# acpid prep (looks in the wrong path for /etc/acpi)\n\tln -sT ../usr/local/etc/acpi etc/acpi; \\\n\t[ -z \"$(ls -A etc/acpi/events)\" ]; \\\n\t{ echo 'event=button/power'; echo 'action=/usr/bin/env poweroff'; } > etc/acpi/events/power; \\\n# explicit UTC timezone (especially for container bind-mounting)\n\techo 'UTC' > etc/timezone; \\\n\tcp -vL /usr/share/zoneinfo/UTC etc/localtime; \\\n# \"dockremap\" user/group so \"--userns-remap=default\" works out-of-the-box\n\ttcl-chroot addgroup -S dockremap; \\\n\ttcl-chroot adduser -S -G dockremap dockremap; \\\n\techo 'dockremap:165536:65536' | tee etc/subuid | tee etc/subgid\n\nRUN savedAptMark=\"$(apt-mark showmanual)\"; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n\t\tisolinux \\\n\t\tsyslinux-common \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\tmkdir -p /tmp/iso/isolinux; \\\n\tcp -v \\\n\t\t/usr/lib/ISOLINUX/isolinux.bin \\\n\t\t/usr/lib/syslinux/modules/bios/ldlinux.c32 \\\n\t\t/usr/lib/syslinux/modules/bios/libutil.c32 \\\n\t\t/usr/lib/syslinux/modules/bios/menu.c32 \\\n\t\t/tmp/iso/isolinux/ \\\n\t; \\\n\tcp -v /usr/lib/ISOLINUX/isohdpfx.bin /tmp/; \\\n\tapt-mark auto '.*' > /dev/null; \\\n\tapt-mark manual $savedAptMark; \\\n\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false\nCOPY files/isolinux.cfg /tmp/iso/isolinux/\n\nCOPY files/init.d/* ./etc/init.d/\nCOPY files/bootsync.sh ./opt/\n\n# temporary boot debugging aid\n#RUN sed -i '2i set -x' etc/init.d/tc-config\n\nCOPY files/make-b2d-iso.sh /usr/local/bin/\nRUN time make-b2d-iso.sh; \\\n\tdu -hs /tmp/boot2docker.iso\n\nCMD [\"sh\", \"-c\", \"[ -t 1 ] && exec bash || exec cat /tmp/boot2docker.iso\"]\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 2.3046875,
          "content": "# FAQ\n\n## I've just installed a new Boot2Docker and I get `client and server don't have the same version`\n\nThere's a good chance that your Boot2Docker virtual machine existed before you\nupgraded your Docker client.\n\n## How can I solve my problems with SSH?\n\nIf `ssh` complains about the keys:\n\n```\n$ ssh-keygen -R '[localhost]:2022'\n```\n\n## Login as root\n\nRun `sudo -s` as the docker user.\n\n## What is the Boot2Docker distribution based on?\n\nIt is based on a stripped down [Tiny Core Linux](http://tinycorelinux.net).\n\n## Persistent partition choice\n\nBoot2Docker will first try to mount a partition labeled `boot2docker-data`, if\nthat doesn't exist, it will pick the first `ext4` partition listed by `blkid`.\n\n## Local Customisation (with persistent partition)\n\nChanges outside of the `/var/lib/docker` and `/var/lib/boot2docker` directories\nwill be lost after powering down or restarting the boot2docker VM. However, if\nyou have a persistence partition (created automatically by `boot2docker init`),\nyou can make customisations that are run at the end of boot initialisation by\ncreating a script at `/var/lib/boot2docker/bootlocal.sh`.\n\nFrom Boot2Docker version 1.6.0, you can also specify steps that are run before\nthe Docker daemon is started, using `/var/lib/boot2docker/bootsync.sh`.\n\nYou can also set variables that will be used during the boot initialisation (after\nthe automount) by setting them in `/var/lib/boot2docker/profile`\n\nFor example, to download `pipework`, install its pre-requisites (which you can\ndownload using `tce-load -w package.tcz`), and then start a container:\n\n```bash\n#!/bin/sh\n\n\nif [ ! -e /var/lib/boot2docker/pipework ]; then\n        curl -o /var/lib/boot2docker/pipework https://raw.github.com/jpetazzo/pipework/master/pipework\n        chmod 777 /var/lib/boot2docker/pipework\nfi\n\n#need ftp://ftp.nl.netbsd.org/vol/2/metalab/distributions/tinycorelinux/4.x/x86/tcz/bridge-utils.tcz\n#and iproute2 (and its friends)\nsu - docker -c \"tce-load -i /var/lib/boot2docker/*.tcz\"\n\n#start my management container if its not already there\ndocker run -d -v /var/run/docker.sock:/var/run/docker.sock $(which docker):$(which docker)  -name dom0 svens-dom0\n```\n\nOr, if you need to tell the Docker daemon to use a specific DNS server, add the \nfollowing to `/var/lib/boot2docker/profile`:\n\n```bash\nEXTRA_ARGS=\"$EXTRA_ARGS --dns 192.168.1.2\"\n```\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.5126953125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        https://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   Copyright 2013-2017 Docker, Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       https://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MAINTAINERS",
          "type": "blob",
          "size": 0.091796875,
          "content": "Tianon Gravi <admwiggin@gmail.com> (@tianon)\nJoseph Ferguson <yosifkit@gmail.com> (@yosifkit)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.0068359375,
          "content": "# DEPRECATED\n\nBoot2Docker is officially deprecated and unmaintained.  It is recommended that users transition from Boot2Docker over to [Docker Desktop](https://www.docker.com/products/docker-desktop) instead (especially with [the new WSL2 backend, which supports Windows 10 Home](https://www.docker.com/blog/docker-desktop-for-windows-home-is-here/)).\n\nThese days there are a *lot* of tools designed to help spin up environments, and it's relatively easy to get something up and running with Docker installed with minimal effort.\n\n# Boot2Docker\n\n[![Build Status](https://travis-ci.org/boot2docker/boot2docker.svg?branch=master)](https://travis-ci.org/boot2docker/boot2docker)\n\nBoot2Docker is a lightweight Linux distribution made specifically to run\n[Docker](https://www.docker.com/) containers. It runs completely from RAM, is a\n~45MB download and boots quickly.\n\n## Features\n\n* Recent Linux Kernel, Docker pre-installed and ready-to-use\n* VM guest additions (VirtualBox, Parallels, VMware, XenServer)\n* Container persistence via disk automount on `/var/lib/docker`\n* SSH keys persistence via disk automount\n\n> **Note:** Boot2Docker uses port **2376**, the [registered IANA Docker TLS\n> port](http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml?search=docker)\n\n## Caveat Emptor\n\nBoot2Docker is designed and tuned for development.\n**Using it for any kind of production workloads is highly discouraged.**\n\n## Installation\n\nInstallation should be performed via [Docker Toolbox](https://docs.docker.com/toolbox/)\nwhich installs [Docker Machine](https://docs.docker.com/machine/overview/), \nthe Boot2Docker VM, and other necessary tools.\n\nThe [ISO can be downloaded\nhere](https://github.com/boot2docker/boot2docker/releases).\n\n## How to use\n\nBoot2Docker is used via [Docker Machine](https://docs.docker.com/machine/overview/) \n(installed as part of Docker Toolbox) which leverages VirtualBox's `VBoxManage` to\ninitialise, start, stop and delete the VM right from the command line.\n\n## More information\n\nSee [Frequently asked questions](FAQ.md) for more details.\n\n#### Boot script log\n\nThe bootup script output is logged to `/boot.log`, so you can see (and\npotentially debug) what happens. Note that this is not persistent between boots\nbecause we're logging from before the persistence partition is mounted (and it\nmay not exist at all).\n\n#### Docker daemon options\n\nIf you need to customize the options used to start the Docker daemon, you can\ndo so by adding entries to the `/var/lib/boot2docker/profile` file on the\npersistent partition inside the Boot2Docker virtual machine. Then restart the\ndaemon.\n\nThe following example will enable core dumps inside containers, but you can\nspecify any other options you may need.\n\n```console\ndocker-machine ssh default -t sudo vi /var/lib/boot2docker/profile\n# Add something like:\n#     EXTRA_ARGS=\"--default-ulimit core=-1\"\ndocker-machine restart default\n```\n\n#### Installing secure Registry certificates\n\nAs discussed in the [Docker Engine documentation](https://docs.docker.com/engine/security/certificates/#/understanding-the-configuration)\ncertificates should be placed at `/etc/docker/certs.d/hostname/ca.crt` \nwhere `hostname` is your Registry server's hostname.\n\n```console\ndocker-machine scp certfile default:ca.crt\ndocker-machine ssh default\nsudo mv ~/ca.crt /etc/docker/certs.d/hostname/ca.crt\nexit\ndocker-machine restart\n```\n\nAlternatively the older Boot2Docker method can be used and you can add your \nRegistry server's public certificate (in `.pem` or `.crt` format) into\nthe `/var/lib/boot2docker/certs/` directory, and Boot2Docker will automatically\nload it from the persistence partition at boot.\n\nYou may need to add several certificates (as separate `.pem` or `.crt` files) to this\ndirectory, depending on the CA signing chain used for your certificate.\n\n##### Insecure Registry\n\nAs of Docker version 1.3.1, if your registry doesn't support HTTPS, you must add it as an\ninsecure registry.\n\n```console\n$ docker-machine ssh default \"echo $'EXTRA_ARGS=\\\"--insecure-registry <YOUR INSECURE HOST>\\\"' | sudo tee -a /var/lib/boot2docker/profile && sudo /etc/init.d/docker restart\"\n```\n\nthen you should be able to do a docker push/pull.\n\n#### Running behind a VPN (Cisco AnyConnect, etc)\n\nSo sometimes if you are behind a VPN, you'll get an `i/o timeout` error.\nThe current work around is to forward the port in the boot2docker-vm.\n\nIf you get an error like the following:\n\n```no-highlight\nSending build context to Docker daemon\n2014/11/19 13:53:33 Post https://192.168.59.103:2376/v1.15/build?rm=1&t=your-tag: dial tcp 192.168.59.103:2376: i/o timeout\n```\n\nThat means you have to forward port `2376`, which can be done like so:\n\n* Open VirtualBox\n* Open Settings > Network for your 'default' VM\n* Select the adapter that is 'Attached To': 'NAT' and click 'Port Forwarding'.\n* Add a new rule:\n\t- Protocol: TCP\n\t- Host IP: 127.0.0.1\n\t- Host Port: 5555\n\t- Guest Port: 2376\n* Set `DOCKER_HOST` to 'tcp://127.0.0.1:5555'\n\n#### SSH into VM\n\n```console\n$ docker-machine ssh default\n```\n\nDocker Machine auto logs in using the generated SSH key, but if you want to SSH\ninto the machine manually (or you're not using a Docker Machine managed VM), the\ncredentials are:\n\n```\nuser: docker\npass: tcuser\n```\n\n#### Persist data\n\nBoot2docker uses [Tiny Core Linux](http://tinycorelinux.net), which runs from\nRAM and so does not persist filesystem changes by default.\n\nWhen you run `docker-machine`, the tool auto-creates a disk that\nwill be automounted and used to persist your docker data in `/var/lib/docker`\nand `/var/lib/boot2docker`.  This virtual disk will be removed when you run\n`docker-machine delete default`.  It will also persist the SSH keys of the machine.\nChanges outside of these directories will be lost after powering down or\nrestarting the VM.\n\nIf you are not using the Docker Machine management tool, you can create an `ext4`\nformatted partition with the label `boot2docker-data` (`mkfs.ext4 -L\nboot2docker-data /dev/sdX5`) to your VM or host, and Boot2Docker will automount\nit on `/mnt/sdX` and then softlink `/mnt/sdX/var/lib/docker` to\n`/var/lib/docker`.\n"
        },
        {
          "name": "files",
          "type": "tree",
          "content": null
        },
        {
          "name": "update.sh",
          "type": "blob",
          "size": 2.6806640625,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\n# TODO http://distro.ibiblio.org/tinycorelinux/latest-x86_64\nmajor='11.x'\nversion='11.0' # TODO auto-detect latest\n# 9.x doesn't seem to use \".../archive/X.Y.Z/...\" in the same way as 8.x :(\n\nmirrors=(\n\thttp://distro.ibiblio.org/tinycorelinux\n\thttp://repo.tinycorelinux.net\n)\n\n# https://www.kernel.org/\nkernelBase='4.19'\n# https://github.com/boot2docker/boot2docker/issues/1398\n# https://download.virtualbox.org/virtualbox/\nvboxBase='5'\n\n# avoid issues with slow Git HTTP interactions (*cough* sourceforge *cough*)\nexport GIT_HTTP_LOW_SPEED_LIMIT='100'\nexport GIT_HTTP_LOW_SPEED_TIME='2'\n# ... or servers being down\nwget() { command wget --timeout=2 \"$@\" -o /dev/null; }\n\ncd \"$(dirname \"$(readlink -f \"$BASH_SOURCE\")\")\"\n\nseds=(\n\t-e 's!^(ENV TCL_MIRRORS).*!\\1 '\"${mirrors[*]}\"'!'\n\t-e 's!^(ENV TCL_MAJOR).*!\\1 '\"$major\"'!'\n\t-e 's!^(ENV TCL_VERSION).*!\\1 '\"$version\"'!'\n)\n\nfetch() {\n\tlocal file\n\tfor file; do\n\t\tlocal mirror\n\t\tfor mirror in \"${mirrors[@]}\"; do\n\t\t\tif wget -qO- \"$mirror/$major/$file\"; then\n\t\t\t\treturn 0\n\t\t\tfi\n\t\tdone\n\tdone\n\treturn 1\n}\n\narch='x86_64'\nrootfs='rootfs64.gz'\n\nrootfsMd5=\"$(\n# 9.x doesn't seem to use \".../archive/X.Y.Z/...\" in the same way as 8.x :(\n\tfetch \\\n\t\t\"$arch/archive/$version/distribution_files/$rootfs.md5.txt\" \\\n\t\t\"$arch/release/distribution_files/$rootfs.md5.txt\"\n)\"\nrootfsMd5=\"${rootfsMd5%% *}\"\nseds+=(\n\t-e 's/^ENV TCL_ROOTFS.*/ENV TCL_ROOTFS=\"'\"$rootfs\"'\" TCL_ROOTFS_MD5=\"'\"$rootfsMd5\"'\"/'\n)\n\nkernelVersion=\"$(\n\twget -qO- 'https://www.kernel.org/releases.json' \\\n\t\t| jq -r --arg base \"$kernelBase\" '.releases[] | .version | select(startswith($base + \".\"))'\n)\"\nseds+=(\n\t-e 's!^(ENV LINUX_VERSION).*!\\1 '\"$kernelVersion\"'!'\n)\n\n#vboxVersion=\"$(wget -qO- 'https://download.virtualbox.org/virtualbox/LATEST-STABLE.TXT')\"\nvboxVersion=\"$(\n\twget -qO- 'https://download.virtualbox.org/virtualbox/' \\\n\t\t| grep -oE 'href=\"[0-9.]+/?\"' \\\n\t\t| cut -d'\"' -f2 | cut -d/ -f1 \\\n\t\t| grep -E \"^$vboxBase[.]\" \\\n\t\t| tail -1\n)\"\nvboxSha256=\"$(\n\t{\n\t\twget -qO- \"https://download.virtualbox.org/virtualbox/$vboxVersion/SHA256SUMS\" \\\n\t\t|| wget -qO- \"https://www.virtualbox.org/download/hashes/$vboxVersion/SHA256SUMS\"\n\t} | awk '$2 ~ /^[*]?VBoxGuestAdditions_.*[.]iso$/ { print $1 }'\n)\"\nseds+=(\n\t-e 's!^(ENV VBOX_VERSION).*!\\1 '\"$vboxVersion\"'!'\n\t-e 's!^(ENV VBOX_SHA256).*!\\1 '\"$vboxSha256\"'!'\n)\n\n# PARALLELS_VERSION: https://github.com/boot2docker/boot2docker/pull/1332#issuecomment-420273330\n\nxenVersion=\"$(\n\tgit ls-remote --tags 'https://github.com/xenserver/xe-guest-utilities.git' \\\n\t\t| cut -d/ -f3 \\\n\t\t| cut -d^ -f1 \\\n\t\t| grep -E '^v[0-9]+' \\\n\t\t| cut -dv -f2- \\\n\t\t| sort -rV \\\n\t\t| head -1\n)\"\nseds+=(\n\t-e 's!^(ENV XEN_VERSION).*!\\1 '\"$xenVersion\"'!'\n)\n\nset -x\nsed -ri \"${seds[@]}\" Dockerfile\n"
        }
      ]
    }
  ]
}