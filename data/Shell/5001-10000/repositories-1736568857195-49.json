{
  "metadata": {
    "timestamp": 1736568857195,
    "page": 49,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jorgebucaran/fisher",
      "stars": 7951,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0546875,
          "content": "Copyright © Jorge Bucaran <<https://jorgebucaran.com>>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.7763671875,
          "content": "# Fisher\n\n> A plugin manager for [Fish](https://fishshell.com)—your friendly interactive shell. [Snag fresh plugins!](https://github.com/jorgebucaran/awsm.fish#readme)\n\nTake control of functions, completions, bindings, and snippets from the command line. Unleash your shell's true potential, perfect your prompt, and craft repeatable configurations across different systems effortlessly. Fisher's zero impact on shell startup keeps your shell zippy and responsive. No gimmicks, just smooth sailing!\n\n- Fisher is 100% pure-Fish, making it easy to contribute or modify\n- Scorching fast concurrent plugin downloads that'll make you question reality\n- Zero configuration needed—we're not kidding!\n- Oh My Fish! plugins supported too\n\n> #### ☝️ [Upgrading from Fisher `3.x` or older? Strap in and read this!](https://github.com/jorgebucaran/fisher/issues/652)\n\n## Installation\n\n```console\ncurl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish | source && fisher install jorgebucaran/fisher\n```\n\n## Quickstart\n\nFisher lets you install, update, and remove plugins like a boss. Revel in Fish's [tab completion](https://fishshell.com/docs/current/index.html#completion) and rich syntax highlighting while you're at it.\n\n### Installing plugins\n\nTo install plugins, use the `install` command and point it to the GitHub repository.\n\n```console\nfisher install jorgebucaran/nvm.fish\n```\n\n> Wanna install from GitLab? No problemo—just prepend `gitlab.com/` to the plugin path.\n\nYou can also snag a specific version of a plugin by adding an `@` symbol after the plugin name, followed by a tag, branch, or [commit](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefcommit-ishacommit-ishalsocommittish).\n\n```console\nfisher install IlanCosman/tide@v5\n```\n\nAnd hey, you can install plugins from a local directory too!\n\n```console\nfisher install ~/path/to/plugin\n```\n\n> Heads up! Fisher expands plugins into your Fish configuration directory by default, overwriting existing files. If that's not your jam, set `$fisher_path` to your preferred location and put it in your function path ([#640](https://github.com/jorgebucaran/fisher/issues/640)).\n\n### Listing plugins\n\nUse the `list` command to see all your shiny installed plugins.\n\n```console\n$ fisher list\njorgebucaran/fisher\nilancosman/tide@v5\njorgebucaran/nvm.fish\n/home/jb/path/to/plugin\n```\n\nThe `list` command also plays nice with regular expressions for filtering the output.\n\n```console\n$ fisher list \\^/\n/home/jb/path/to/plugin\n```\n\n### Updating plugins\n\n`update` command to the rescue! It updates one or more plugins to their latest and greatest version.\n\n```console\nfisher update jorgebucaran/fisher\n```\n\n> Just type `fisher update` to update everything in one fell swoop.\n\n### Removing plugins\n\nSay goodbye to installed plugins with the `remove` command.\n\n```console\nfisher remove jorgebucaran/nvm.fish\n```\n\nFeeling destructive? Wipe out everything, including Fisher itself.\n\n```console\nfisher list | fisher remove\n```\n\n## Using your `fish_plugins` file\n\nWhenever you install or remove a plugin from the command line, Fisher jots down all the installed plugins in `$__fish_config_dir/fish_plugins`. Add this file to your dotfiles or version control to easily share your configuration across different systems.\n\nYou can also edit this file and run `fisher update` to commit changes like a pro:\n\n```console\n$EDITOR $__fish_config_dir/fish_plugins\n```\n\n```diff\njorgebucaran/fisher\nilancosman/tide@v5\njorgebucaran/nvm.fish\n+ PatrickF1/fzf.fish\n- /home/jb/path/to/plugin\n```\n\n```console\nfisher update\n```\n\nThis will install **PatrickF1**/**fzf.fish**, remove /**home**/**jb**/**path**/**to**/**plugin**, and update everything else.\n\n## Creating a plugin\n\nPlugins can include any number of files in `functions`, `conf.d`, and `completions` directories. Most plugins are just a single function or a [configuration snippet](https://fishshell.com/docs/current/index.html#configuration). Behold the anatomy of a typical plugin:\n\n<pre>\n<b>flipper</b>\n├── <b>completions</b>\n│   └── flipper.fish\n├── <b>conf.d</b>\n│   └── flipper.fish\n└── <b>functions</b>\n    └── flipper.fish\n</pre>\n\nNon `.fish` files and directories inside these locations will be copied to `$fisher_path` under `functions`, `conf.d`, or `completions` respectively.\n\n### Event system\n\nFish [events](https://fishshell.com/docs/current/cmds/emit.html) notify plugins when they're being installed, updated, or removed.\n\n> Keep in mind, `--on-event` functions must be loaded when their event is emitted. So, place your event handlers in the `conf.d` directory.\n\n```fish\n# Defined in flipper/conf.d/flipper.fish\n\nfunction _flipper_install --on-event flipper_install\n    # Set universal variables, create bindings, and other initialization logic.\nend\n\nfunction _flipper_update --on-event flipper_update\n    # Migrate resources, print warnings, and other update logic.\nend\n\nfunction _flipper_uninstall --on-event flipper_uninstall\n    # Erase \"private\" functions, variables, bindings, and other uninstall logic.\nend\n```\n\n## Creating a theme\n\nA theme is like any other Fish plugin, but with a `.theme` file in the `themes` directory. Themes were introduced in [Fish `3.4`](https://github.com/fish-shell/fish-shell/releases/tag/3.4.0) and work with the `fish_config` builtin. A theme can also have files in `functions`, `conf.d`, or `completions` if necessary. Check out what a typical theme plugin looks like:\n\n<pre>\n<b>gills</b>\n├── <b>conf.d</b>\n│   └── gills.fish\n└── <b>themes</b>\n    └── gills.theme\n</pre>\n\n### Using `$fisher_path` with themes\n\nIf you customize `$fisher_path` to use a directory other than `$__fish_config_dir`, your themes won't be available via `fish_config`. That's because Fish expects your themes to be in `$__fish_config_dir/themes`, not `$fisher_path/themes`. This isn't configurable in Fish yet, but there's [a request to add that feature](https://github.com/fish-shell/fish-shell/issues/9456).\n\nFear not! You can easily solve this by symlinking Fisher's `themes` directory into your Fish config. First, backup any existing themes directory.\n\n```console\nmv $__fish_config_dir/themes $__fish_config_dir/themes.bak\n```\n\nNext, create a symlink for Fisher's themes directory.\n\n```console\nln -s $fisher_path/themes $__fish_config_dir/themes\n```\n\nWant to use theme plugins and maintain your own local themes? You can do that too ([#708](https://github.com/jorgebucaran/fisher/issues/708)).\n\n## Discoverability\n\nWhile Fisher doesn't rely on a central plugin repository, discovering new plugins doesn't have to feel like navigating uncharted waters. To boost your plugin's visibility and make it easier for users to find, [add relevant topics to your repository](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/classifying-your-repository-with-topics#adding-topics-to-your-repository) using [`fish-plugin`](https://github.com/topics/fish-plugin). By doing so, you're not only contributing to the Fisher community but also enabling users to explore new plugins and enhance their Fish shell experience. Don't let plugin discovery be a fishy business, tag your plugins today!\n\n## Acknowledgments\n\nFisher started its journey in 2016 by [@jorgebucaran](https://github.com/jorgebucaran) as a shell configuration manager for Fish. Along the way, many helped shape it into what it is today. [Oh My Fish](https://github.com/oh-my-fish/oh-my-fish) paved the way as the first popular Fish framework. [@jethrokuan](https://github.com/jethrokuan) provided crucial support during the early years. [@PatrickF1](https://github.com/PatrickF1)'s candid feedback proved invaluable time and again. Bootstrapping Fisher was originally [@IlanCosman](https://github.com/IlanCosman)'s brilliant idea. Thank you to all our contributors! <3\n\n## License\n\n[MIT](LICENSE.md)\n"
        },
        {
          "name": "completions",
          "type": "tree",
          "content": null
        },
        {
          "name": "functions",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}