{
  "metadata": {
    "timestamp": 1736568899500,
    "page": 112,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mviereck/x11docker",
      "stars": 5725,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 110.6455078125,
          "content": "# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\nand this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html) since version 4.0.\n\nProject website: https://github.com/mviereck/x11docker\n\n## [Unreleased]\n### Fixed\n - `jq` and `python` parsing.\n   [(525)](https://github.com/mviereck/x11docker/issues/525)\n   [(485)](https://github.com/mviereck/x11docker/issues/485)\n   [(493)](https://github.com/mviereck/x11docker/issues/493)\n   [(504)](https://github.com/mviereck/x11docker/issues/504)\n - `--pulseaudio`: share cookie file.\n   [(507)](https://github.com/mviereck/x11docker/issues/507)\n - `mygetent()`: check for system `getent`.\n   [(496)](https://github.com/mviereck/x11docker/issues/496)\n\n## [7.6.0](https://github.com/mviereck/x11docker/releases/tag/v7.6.0) - 2023-01-18\n### Changed\n - `--install|--update|--update-master`: Up to version 7.5.0\n   x11docker installed itself with prefix `/usr`,\n   now it uses `/usr/local`. This serves to follow the\n   [Linux Foundation specifications of `/usr/local`](https://refspecs.linuxfoundation.org/FHS_3.0/fhs/ch04s09.html).\n   To help with the transition, a new option `--remove-oldprefix`\n   was introduced.\n   An update from previous versions must be done twice to take effect.\n   Recommended procedure:\n   - First run:      `x11docker --update`\n   - Again run:      `x11docker --update`\n   - Afterwards run: `x11docker --remove-oldprefix`\n### Added\n - `--remove-oldprefix`: Remove installation in old prefix `/usr`.\n   [(479)](https://github.com/mviereck/x11docker/issues/479)\n\n## [7.5.0](https://github.com/mviereck/x11docker/releases/tag/v7.5.0) - 2023-01-16\n### Added\n - `man` page for x11docker. (Run update from 7.4.2 twice to install it.)\n   [(469)](https://github.com/mviereck/x11docker/issues/469)\n### Fixed\n - `--tty` failed with `--xc`. Fix: disable `--xc`.\n   [(464)](https://github.com/mviereck/x11docker/issues/464)\n - `--xonly`: run socat unprivileged to make the unix socket accessible.\n   [(466)](https://github.com/mviereck/x11docker/issues/466)\n - `--share`: Softlink fix for folders in `HOME`.\n   [(475)](https://github.com/mviereck/x11docker/issues/475)\n - `jq` support to lessen python dependency.\n   [(478)](https://github.com/mviereck/x11docker/issues/478)\n - Replace `getent` with custom `grep` command.\n   [(477)](https://github.com/mviereck/x11docker/issues/477)\n - `--install|--update*`: Do not depend on backend.\n   [(470)](https://github.com/mviereck/x11docker/issues/470)\n### Deprecated\n - `--backend=proot`: Deprecated because likely no one uses it,\n   but would need further checks and maintenance.\n\n## [7.4.2](https://github.com/mviereck/x11docker/releases/tag/v7.4.2) - 2022-08-7\n### Fixed\n - `--xpra*`: Fix for Wayland+X11 on host. Use Wayland for xpra client.\n   Caused startup failure along with `--xc`.\n   [(462)](https://github.com/mviereck/x11docker/issues/462)\n - `--hostwayland`: Do not use container of `x11docker/xserver` (option `--xc`).\n - `--fullscreen`: Enable desktop mode.\n - Do not set `--hostname` to avoid `--network` issues.\n   [(463)](https://github.com/mviereck/x11docker/issues/463)\n - `--runtime=sysbox`: support `--gpu=virgl` again.\n### Deprecated\n - `--runtime=kata-runtime`: recent kata v2.x does not provide `kata-runtime`.\n\n## [7.4.1](https://github.com/mviereck/x11docker/releases/tag/v7.4.1) - 2022-08-03\n### Changed\n - `--update`, `--update-master`: New optional argument `diff` to show\n   the difference between installed and new version without installing it.\n   [(460)](https://github.com/mviereck/x11docker/issues/460)\n### Fixed\n - `--xpra*`: Fix check for `xinitrc is ready`.\n   [(462)](https://github.com/mviereck/x11docker/issues/462)\n\n## [7.4.0](https://github.com/mviereck/x11docker/releases/tag/v7.4.0) - 2022-07-28\n### Added\n - `--xauth [=yes|trusted|untrusted|no]`: New option to configure X cookie.\n - `--printcheck`: New option to show X server dependency check messages.\n### Changed\n - `--xoverip`: New optional arguments `yes|no|socat|listentcp`.\n   `socat` allows X over TCP with `--hostdisplay` and `Xwayland` related options.\n - `--gpu`: changed X dependency checks.\n - `--hostdisplay --gpu --xc=no`: Do not enable `--ipc=host` automatically.\n### Fixed\n - `--user`: Fix in setup of `/etc/gshadow`.\n - `--xc`: Provide X unix socket to host with `socat` instead of `ln`.\n   GTK3 application failed to access X through a soft link.\n - `--shell --no-setup`: Set environment variable `SHELL`.\n   [(457)](https://github.com/mviereck/x11docker/issues/457)\n - `--no-setup`: Share init binary from host instead of using `--init`.\n   [(457)](https://github.com/mviereck/x11docker/issues/457)\n### Deprecated\n - `--no-auth`: Use `--xauth=no` instead.\n - `--enforce-i`: Create group `weston-launch` instead and add your user to it.\n\n## [7.3.2](https://github.com/mviereck/x11docker/releases/tag/v7.3.2) - 2022-07-08\n### Added\n - `--clipboard=yes`: Limited support for Wayland clients.\n   (Host X to container Wayland only.)\n### Fixed\n - `--xc`: Don't add groups `video` or `render` if they do not exist.\n   [(454)](https://github.com/mviereck/x11docker/issues/454)\n\n## [7.3.1](https://github.com/mviereck/x11docker/releases/tag/v7.3.1) - 2022-07-01 \n### Added\n - `--xc`: Support `--kwin`, nested and on console.\n - `--xc`: Support `--xpra-xwayland`.\n### Fixed\n - `--xc`: Add missing code for `--xvfb`.\n   [(452)](https://github.com/mviereck/x11docker/issues/452)\n - `--xc`: Provide `--hostdisplay` dependencies.\n\n## [7.3.0](https://github.com/mviereck/x11docker/releases/tag/v7.3.0) - 2022-06-27 \n### Added\n - `--clipboard`: New arguments `oneway`, `altv` and `superv`\n   to restrict container access to host clipboard content.\n   [(#440)](https://github.com/mviereck/x11docker/issues/440)\n   [(#379)](https://github.com/mviereck/x11docker/issues/379)\n   [(#152)](https://github.com/mviereck/x11docker/issues/152)\n - `--checkwindow [=ARG]`: New option to run container as long as X windows\n   are open or to stop them as soon as keyword ARG disappears from xwininfo.\n   [(#68)](https://github.com/mviereck/x11docker/issues/68)\n### Fixed\n - `*-xwayland`: Startup fix for `--xc=no` / running on host.\n - `--xpra*-xwayland`: Use `xdotool` from X container if available.\n\n## [7.2.0](https://github.com/mviereck/x11docker/releases/tag/v7.2.0) - 2022-06-21 \n### Added\n - `--rootless [=yes|no]`: New option to enable rootless backend.\n - `--xc`: Support of Weston in container on console, too.\n   [(#40)](https://github.com/mviereck/x11docker/issues/40)\n   [(#444)](https://github.com/mviereck/x11docker/issues/444)\n - `--xc --xorg`: Support of Xorg in container.\n   [(#7)](https://github.com/mviereck/x11docker/issues/7)\n   [(#40)](https://github.com/mviereck/x11docker/issues/40)\n   [(#221)](https://github.com/mviereck/x11docker/issues/221)\n   [(#258)](https://github.com/mviereck/x11docker/issues/258)\n   [(#444)](https://github.com/mviereck/x11docker/issues/444)\n### Changed\n - `--clipboard`: Added support for basic graphics clips and\n   middle mouse click selection for `--xephyr` and the like.\n   [(#428)](https://github.com/mviereck/x11docker/issues/428)\n - `--vt`: enforces start on console.\n - `--xc`: No X tool dependencies on host.\n### Fixed\n - `--gpu`: Support VA-API, VDPAU (video acceleration) and variable `DRI_PRIME`.\n   [(#443)](https://github.com/mviereck/x11docker/issues/443)\n - `--xpra`: Fix for `--xoverip`.\n   [(#428)](https://github.com/mviereck/x11docker/issues/428)\n - `--nxagent`: Fixes for `--keymap`.\n   [(#208)](https://github.com/mviereck/x11docker/issues/208)\n - `--update*`, `--install`, `--cleanup`: Fix error messages, exit once done.\n   [(#435)](https://github.com/mviereck/x11docker/issues/435)\n - `--hostuser`: Fixes for `--backend=host|proot`\n   [(#437)](https://github.com/mviereck/x11docker/issues/437)\n - `--xc`: Lots of minor fixes.\n\n## [7.1.4](https://github.com/mviereck/x11docker/releases/tag/v7.1.4) - 2022-03-27 \n### Added\n - `--xc=BACKEND`: Optional argument to choose backend for X container.\n### Fixed\n - `--build`, `--cleanup`: Fix backend check (regression).\n   [(#423)](https://github.com/mviereck/x11docker/issues/423)\n - `--scale`: Fix for `--xpra*` (regression).\n - `--share`: MS Windows: fix parsing of partition pathes like `/mnt/c`.\n   [(#424)](https://github.com/mviereck/x11docker/issues/424)\n - `--xc`: do not use on console (affected `--weston-*`).\n\n## [7.1.3](https://github.com/mviereck/x11docker/releases/tag/v7.1.3) - 2022-03-02 \n### Fixed\n - `-g, --gpu`: Fix parsing for `-g`(no optional argument).\n   [(#419)](https://github.com/mviereck/x11docker/issues/419)\n - `--backend=proot`: fix `--interactive`.\n\n## [7.1.2](https://github.com/mviereck/x11docker/releases/tag/v7.1.2) - 2022-03-01\n### Fixed\n - `--share`: Mount Docker volumes (regression fix).\n   [(#419)](https://github.com/mviereck/x11docker/issues/419)\n\n## [7.1.1](https://github.com/mviereck/x11docker/releases/tag/v7.1.1) - 2022-02-28\n### Added\n - `--gpu=virgl`: Experimental GPU access with `virgl_test_server`.\n   Currently only along with option `--xc`.\n   Allows acceleration for Xephyr, nxagent, Xvfb etc.\n - `--gpu=iglx`: Enable indirect rendering (`--xorg` only). Replaces `--iglx`.\n - `--pulseaudio=host`: New argument to share pulseaudio host unix socket.\n   [(#418)](https://github.com/mviereck/x11docker/issues/418)\n### Fixed\n - `--init=systemd`: Changed login and service setup to support arch containers.\n   [(#417)](https://github.com/mviereck/x11docker/issues/417)\n - `--user=RETAIN`: Some fixes.\n   [(#417)](https://github.com/mviereck/x11docker/issues/417)\n - `--clipboard`: Fix for `--xc`.\n### Deprecated\n - `--iglx`: Use `--gpu=iglx` instead.\n\n## [7.1.0](https://github.com/mviereck/x11docker/releases/tag/v7.1.0) - 2022-02-12\n### Added\n - `--backend=proot`: Use a rootfs on host with `proot` instead of a container.\n   [(#224)](https://github.com/mviereck/x11docker/issues/224)\n - `--backend=host`: Run application from host. Replaces `-e, --exe`.\n - `--ipc [=ARG]`: Replaces former `--hostipc`.\n - `--pulseaudio=host`: New argument to share host pulseaudio socket.\n   [(#418)](https://github.com/mviereck/x11docker/issues/418)\n### Changed\n - `--hostdisplay`: Use `XlibNoSHM.so` from `x11docker/xserver` if available.\n   This avoids the need of `--ipc=host`.\n - `--backend`: Do not use fallbacks if backend is not found.\n### Fixed\n - `--init=systemd`: support cgroupv2 unified hierarchy.\n   [(#349)](https://github.com/mviereck/x11docker/issues/349)\n - `--backend=nerdctl`: Some fixes.\n - `--backend=host --xoverip`: No error without `--network`.\n - user/group setup fixes.\n - `xpra` pid check fix.\n - Container startup check fix.\n - Several minor fixes I forgot to note here.\n### Deprecated\n - `-e, --exe`: Use `--backend=host` instead.\n - `--hostipc`: Use `--ipc [=ARG]` instead.\n\n## [7.0.1](https://github.com/mviereck/x11docker/releases/tag/v7.0.1) - 2022-01-20\n### Fixed\n - `--share=$HOME`: Fix container path.\n - Fix some X tool dependency checks.\n\n## [7.0.0](https://github.com/mviereck/x11docker/releases/tag/v7.0.0) - 2022-01-20\n### Added\n - `--xc`: New option to run X server in container of `x11docker/xserver`.\n   Most X server and Wayland options are supported except those\n   running on console (notable `--xorg`).\n - `--xpra2`: New X server option to run xpra server in container (`--xc`),\n   but xpra client on host.\n - `--xpra2-xwayland`: New X server option to run accelerated xpra server\n   in container (`--xc`), but xpra client on host.\n - Configuration of x11docker with `default` preset file. Compare `--preset`.\n   Allows to specify options that will be applied in all x11docker sessions.\n   Useful to declare a default `--backend` and/or `--runtime`.\n - `--runtime=sysbox-runc`: Experimental support of sysbox runtime.\n - `--printenv [=FILE]`: Replaces `--showenv`.\n - `--printid [=FILE]`: Replaces `--showid`.\n - `--printinfofile [=FILE]`: Replaces `--showinfofile`.\n - `--printpid1 [=FILE]`: Replaces `--showpid1`.\n### Changed\n - `--network=none` is default now. Use `-I, --network` to allow internet access.\n - `--user=root`: Needs `--sudouser` or `--cap-default` for usual root privileges.\n - `--xorg`: Not used as fallback if not on tty.\n - `--xvfb`: `--printenv` is not set automatically.\n - `--xvfb`: No ugly GPU support anymore.\n - `--xpra`: No Xdummy support anymore. Needs `Xfvb`.\n - `--vt [=N]`: Argument N is optional now.\n   [(#404)](https://github.com/mviereck/x11docker/issues/404)\n - `create_dockerrc()`: removed, components integrated in main script.\n### Fixed\n - `--gpu`: Set environment variables of `prime-run`.\n   [(#394)](https://github.com/mviereck/x11docker/issues/394)\n - NVIDIA: Wayland/Xwayland support since driver>=470.x and Xwayland>=21.1.2\n   [(#394)](https://github.com/mviereck/x11docker/issues/394)\n - `--user=RETAIN`: Fix socket sharing bug caused by `convertpath()`. \n   [(#394)](https://github.com/mviereck/x11docker/issues/394)\n### Deprecated\n - `--kwin-xwayland`: use `--weston-xwayland` instead.\n - `--showenv`: use `--printenv` instead.\n - `--showid`: use `--printid` instead.\n - `--showinfofile`: use `--printinfofile` instead.\n - `--showpid1`: use `--printpid1` instead.\n### Removed\n - `x11docker-gui`: Removed due to outdated and unmaintained `kaptain`.\n - `--pull`: Please pull missing images yourself.\n - `--pw`: Run x11docker directly as root or with sudo if needed.\n - `--xdummy:` Use `--xvfb` instead.\n\n## [6.10.0](https://github.com/mviereck/x11docker/releases/tag/v6.10.0) - 2021-10-06\n### Added\n - `--build`: New option to build an image from x11docker repository.\n - `--snap`: New option to enable fallback mode to support Docker in snap.\n   [(#375)](https://github.com/mviereck/x11docker/issues/375)\n### Changed\n - `--backend=nerdctl`: Disallow `--home` in rootless mode.\n - `--backend`: Allow `--share` in all rootless modes.\n - Use `python` to parse json output of `inspect`.\n - `--update, --update-master, --remove`: detect and use current installation \n   directory.\n   [(#371)](https://github.com/mviereck/x11docker/issues/371)\n### Fixed\n - Return exit code of container command (regression fix).\n   [(#383)](https://github.com/mviereck/x11docker/issues/383)\n - `--share` without `--home`: If path is in `HOME`, change container path and create softlink.\n   Otherwise `HOME` might not be writeable.\n - `--fallback`: Add missing switch in option parsing.\n   [(#372)](https://github.com/mviereck/x11docker/issues/372)\n - `--interactive`: Fix output redirection.\n   [(#364)](https://github.com/mviereck/x11docker/issues/364)\n### Removed\n - `--wm=container`: drop containerized window manager support. \n\n## [6.9.0](https://github.com/mviereck/x11docker/releases/tag/v6.9.0) - 2021-06-02\n### Added\n - `--backend=BACKEND`: Experimental option to choose a container backend.\n   Currently supported: `docker`, `podman` and `nerdctl`.\n   [(#255)](https://github.com/mviereck/x11docker/issues/255)\n   [(#357)](https://github.com/mviereck/x11docker/issues/357)\n - Support of rootless docker.\n   [(#327)](https://github.com/mviereck/x11docker/issues/327)\n - `--composite`: New option to enable or disable X extension Composite.\n   Can help to fix issues with `--nxagent`.\n   [(#345)](https://github.com/mviereck/x11docker/issues/345)\n - `--no-setup`: Disable x11docker setup in container. (Formerly experimental.)\n### Changed\n - `--pw [=FRONTEND]`: Argument `FRONTEND` is optional now to allow easy\n   switch to rootful nerdctl or podman. Setting `FRONTEND` requires `=`.\n - `--xhost [=STR]`: Argument `STR` is optional now. If empty, set to\n   `+SI:localuser:$USER`. Setting `STR` requires `=`.\n### Fixed\n - `x11docker-gui`: Fixed `--share` bug. Add several missing options.\n   [(#358)](https://github.com/mviereck/x11docker/issues/358)\n - `--init=s6-overlay`: Use `--tmpfs /run:exec`\n   [(#340)](https://github.com/mviereck/x11docker/issues/340)\n - `containerrootrc`: Don't run `docker exec --privileged` for container root\n   setup to avoid possible abuse by corrupted core utils.\n - `--limit`: Change free memory check.\n   [(#360)](https://github.com/mviereck/x11docker/issues/360)\n### Deprecated\n - `--podman`: Use `--backend=podman` instead. (Formerly experimental)\n\n## [6.8.0](https://github.com/mviereck/x11docker/releases/tag/v6.8.0) - 2021-04-08\n### Added\n - `--iglx`: Use indirect rendering for OpenGL.\n - `--password`: New option to set a container user password.\n   [(#334)](https://github.com/mviereck/x11docker/issues/334)\n### Changed\n - `--sudouser`: Allow optional argument `nopasswd` for sudo without password.\n   [(#337)](https://github.com/mviereck/x11docker/issues/337)\n### Fixed\n - `--size`: Regard if no monitor is connected.\n   [(#336)](https://github.com/mviereck/x11docker/issues/336)\n\n## [6.7.0](https://github.com/mviereck/x11docker/releases/tag/v6.7.0) - 2021-02-28\n### Added\n - `-I, --network`: New option to set network mode.\n   `-I` will be mandatory in future to allow internet access.\n   Replaces `--no-internet` and `--hostnet`.\n - `--runasuser`: New option to add (background) commands in \n   `cmdrc`. Intended to run e.g. `fcitx` keyboard input daemon.\n   [(#269)](https://github.com/mviereck/x11docker/issues/269)\n   [(x11docker/deepin:#2)](https://github.com/mviereck/dockerfile-x11docker-deepin/issues/2)\n - `--fallback=no`: New option to deny fallbacks for failing options.\n - `--no-setup`: Experimental option to disable x11docker setup in container.\n - `--podman`: Experimental `podman` support.\n   [(#255)](https://github.com/mviereck/x11docker/issues/255)\n - `--xopt`: Experimental option to add custom X server options.\n   [(#296)](https://github.com/mviereck/x11docker/issues/296)\n### Changed\n - `--lang`: Allow multiple times to generate more than one locale.\n### Fixed\n - `--home=~/DIR`: Replace `~` with `$HOME`.\n - `--hostnet`: set host IP to 127.0.0.1 for options like `--pulseaudio=tcp`.\n - `--pulseaudio`: set to TCP if pulseaudio runs as system daemon.\n   [(#266)](https://github.com/mviereck/x11docker/issues/266)\n - Allow `docker logs` to grab container output, too. \n   [(#254)](https://github.com/mviereck/x11docker/issues/254)\n - `--xpra`: version check failed in few circumstances.\n   [(#287)](https://github.com/mviereck/x11docker/issues/287)\n - `--gpu`: share `/dev/nvmap` and `/dev/nvhost*` if present.\n   [(#290)](https://github.com/mviereck/x11docker/issues/290)\n - `--preset`: Parse with `eval` to catch strings.\n   [(x11docker/deepin:#20)](https://github.com/mviereck/dockerfile-x11docker-deepin/issues/20)\n - MS Windows: IP check / no dockerNAT interface anymore.\n   [(runx:#6)](https://github.com/mviereck/runx/issues/6)\n   [(#325)](https://github.com/mviereck/x11docker/issues/325)\n### Deprecated\n - `--hostnet`: Use `--network=host` instead.\n - `--no-internet`: Use `--network=none` instead.\n\n## [6.6.2](https://github.com/mviereck/x11docker/releases/tag/v6.6.2) - 2020-05-19\n### Added\n - `--home=VOLUME`, `--share=VOLUME`: Support of docker volumes.\n   [ehough/docker-kodi#33](https://github.com/ehough/docker-kodi/issues/33)\n### Fixed\n - `--update`: Fix `sed` error in changelog excerpt.\n   [(#236)](https://github.com/mviereck/x11docker/issues/236)\n - `--webcam`: Add container user to group video.\n   [(#241)](https://github.com/mviereck/x11docker/issues/241)\n### Deprecated\n - `--sharessh`: Please use (directly or with help of option `--preset`):\n   `--share $(dirname $SSH_AUTH_SOCK) --env SSH_AUTH_SOCK=\"$SSH_AUTH_SOCK\"`\n\n## [6.6.1](https://github.com/mviereck/x11docker/releases/tag/v6.6.1) - 2020-03-19\n### Fixed\n - `--runx`: Fix `XAUTHORITY` copy bug. \n   [(#219)](https://github.com/mviereck/x11docker/issues/219)\n\n## [6.6.0](https://github.com/mviereck/x11docker/releases/tag/v6.6.0) - 2020-03-19\n### Added\n - Experimental WSL2 support. See also new option `--mobyvm`.\n   [(#214)](https://github.com/mviereck/x11docker/issues/214)\n - `--preset`: New option to read files with predefined option sets.\n   [(#218)](https://github.com/mviereck/x11docker/issues/218)\n - `--mobyvm`: New option to use MobyVM in WSL2. \n   Default for WSL2 is native Linux docker.\n - `--shell`: New option to specify preferred user shell.\n   [(#26)](https://github.com/mviereck/x11docker/issues/26)\n   [(#211)](https://github.com/mviereck/x11docker/issues/211)\n### Changed\n - `--nxagent --keymap=clone`: Clone xkb settings from host in nxagent.\n   [(#208)](https://github.com/mviereck/x11docker/issues/208)\n - `--printer`: Share entire `run/cups`, not only socket `run/cups/cups.sock`.\n   [(#222)](https://github.com/mviereck/x11docker/issues/222)\n - `--wm`: Improved checks and fallback handling. \n   Disabled context menu for host window manager `--wm=openbox`.\n### Fixed\n - snap/snappy: More general detection.\n   [(#223)](https://github.com/mviereck/x11docker/issues/223)\n - `--workdir`: Fixed parsing error. \n   [(#232)](https://github.com/mviereck/x11docker/issues/232)\n\n\n## [6.5.0](https://github.com/mviereck/x11docker/releases/tag/v6.5.0) - 2019-12-22\n### Added\n - `--xoverip`: New option to enforce X over TCP/IP. For special setups only.\n   [(#201)](https://github.com/mviereck/x11docker/issues/201)\n### Changed\n - Run `containerrootrc` with `--privileged`. Does not affect desired \n   container command in `containerrc`. Allows less privileges with NVIDIA\n   driver installation and avoids issues like in\n   [(#196)](https://github.com/mviereck/x11docker/issues/196)\n - `--xephyr`: Disabled Xephyr option `-glamor`.\n   [(#196)](https://github.com/mviereck/x11docker/issues/196)\n - `--runtime`: Added `oci` to list of known runtimes.\n   [(#205)](https://github.com/mviereck/x11docker/issues/205)\n - `TODO.md` outsourced from x11docker script.\n### Fixed\n - Support `snap` installation of Docker.\n   [(#191)](https://github.com/mviereck/x11docker/issues/191)\n - `--gpu`: NVIDIA driver installation failed with `--cap-default`.\n   [(#198)](https://github.com/mviereck/x11docker/issues/198)\n\n## [6.4.0](https://github.com/mviereck/x11docker/releases/tag/v6.4.0) - 2019-11-14\n### Added\n - `--xtest [=yes|no]`: New option to enable or disable X extension XTEST.\n   Can be needed for custom access with xpra.\n   [(#190)](https://github.com/mviereck/x11docker/issues/190)\n### Fixed\n - Do not set `tini` option `-s`. Avoids issue with `catatonit`.\n   [(#189)](https://github.com/mviereck/x11docker/issues/189)\n - Exchange static file descriptor numbers with dynamic ones.\n   Hopefully fixes an odd issue where bash eats up some lines of code on exit.\n - docker-for-win: Do not use cache path within WSL subsystem.\n   [(#165)](https://github.com/mviereck/x11docker/issues/165)\n - `--xpra`: Check for validity of `--opengl=noprobe`.\n - `--xpra`: Drop support on MS Windows / WSL.\n - Use window manager in auto mode for `--xephyr` and similars.\n - Fix `waitforlogentry()` error if pulling image.\n   [(#193)](https://github.com/mviereck/x11docker/issues/193)\n\n## [6.3.0](https://github.com/mviereck/x11docker/releases/tag/v6.3.0) - 2019-10-04\n### Added\n - `--showinfofile`: New option: Echo path to internal x11docker info storage\n   file. Can be parsed for informations like container IP and name.\n - `--newprivileges [=yes|no]`: New option to set or unset docker run\n   option `--security-opt=no-new-privileges`.\n### Changed\n - Return exit code of container command. x11docker errors return code `64`.\n - `--dbus`: Optional argument `=system` to run a DBus system daemon.\n   Similar to previous `--dbus-system`. For experimental setups only.\n - `--dbus-system`: Already deprecated in v6.2.0. \n   New fallback: `--dbus=system --cap-default`.\n - `--exe`: Run with `tini`/`docker-init` if available.\n - `--showenv`: Does not contain `X11DOCKER_CACHE` anymore.\n   Have a look at `--showinfofile` instead.\n - `--weston`, `--kwin`, `--hostwayland`: Always set all Wayland environment\n   variables and run with DBus user daemon. Previously needed `--wayland`.\n - `--xdummy --gpu`/`--xvfb --gpu`: Supported only in host X, \n   no longer on console or on Wayland.\n - `--xephyr`: enabled `-glamor`.\n - Wait before starting X until possible password prompt is ready.\n - Lots of code cleanup.\n### Fixed\n - Enable X extension `X-Resource` to allow Gnome 3 in container.\n   [(#16)](https://github.com/mviereck/x11docker/issues/16)\n - Avoid double IP address while checking `docker0` interface.\n   [(#182)](https://github.com/mviereck/x11docker/issues/182)\n - Avoid possible race condition of display number on simultaneous starts.\n\n## [6.2.0](https://github.com/mviereck/x11docker/releases/tag/v6.2.0) - 2019-08-17\n### Added\n - `--enforce-i`: Run x11docker in interactive bash mode. Rather special option\n   to provide a fix for special issues, e.g. running `weston-launch`\n   on void linux that needs an interactive tty. Not recommended in general.\n   [(#166)](https://github.com/mviereck/x11docker/issues/166)\n   [(#176)](https://github.com/mviereck/x11docker/issues/176)\n - `-F`: Shortcut for `--xfishtank`.\n - `-l`: Shortcut for `--lang`.\n - `-P`: Shortcut for `--printer`.\n - `-V`: Same as `-v, --verbose`, but with colored output. \n   Useful e.g. with `--init=systemd`.\n### Changed\n - Short options do not accept optional arguments. Affects `-l -m -p -P -w -v`.\n - `-m`: Does not accept optional argument `=PATH`. Use `--home=PATH` instead.\n - `-v, --verbose`: Does not accept argument `=c` anymore. Use `-V` instead.\n - `-w`: Does not accept argument anymore. Use `--wm=ARG` instead.\n - `--xpra`: Runs on Wayland since xpra v3.0-r23305.\n### Deprecated\n - `--dbus-system`: Use one of `--init=systemd|openrc|runit|sysvinit` instead.\n   Current fallback: `--init=systemd`.\n### Fixed\n - `--workdir`: Has been overwritten / no effect.\n - Fixed `tty` check if not running in a terminal.\n   [(#176)](https://github.com/mviereck/x11docker/issues/176)\n   [(#177)](https://github.com/mviereck/x11docker/issues/177)\n \n## [6.1.1](https://github.com/mviereck/x11docker/releases/tag/v6.1.1) - 2019-07-31\n### Fixed\n - `--gpu`: Add user to group `render`.\n\n## [6.1.0](https://github.com/mviereck/x11docker/releases/tag/v6.1.0) - 2019-07-30\n### Added\n - `--clean-xhost`: Disable xhost access policies on host display.\n - `--no-xhost`: Reintroduced for backwards compatibility. Deprecated.\n   Use `--clean-xhost`instead.\n - `--systemd`: Reintroduced for backwards compatibility. Deprecated.\n   Use `--init=systemd` instead.\n### Changed\n - `--home`: Allow optional host folder DIR with `--home=DIR`.\n - `--printer`: Allow optional argument `tcp|socket`.\n   Allows CUPS printing for `--runtime=kata-runtime`.\n - `--share`: Don't share `--volume` along with `--device`.\n   Has been a workaround for an old Docker bug setting wrong file ownerships.\n   [#24](https://github.com/mviereck/x11docker/pull/24)\n### Deprecated\n - `--homedir=DIR`: Use `--home=DIR` instead.\n - `--systemd`: Use `--init=systemd` instead.\n - `--no-xhost`: Use `--clean-xhost` instead.\n### Fixed\n - `--xpra --clipboard`: Fix not using xpra option `--xsettings=no`.\n   [xpra ticket #2342](https://xpra.org/trac/ticket/2342)\n - Copy `/etc/skel` into empty `HOME`.\n\n## [6.0.0](https://github.com/mviereck/x11docker/releases/tag/v6.0.0) - 2019-07-08\n### Changed\n - `--wm`: Use image `x11docker/openbox` to provide a window manager.\n   Set `--wm=host` or `--wm=COMMAND`to use a host window manager.\n   Set `--wm=IMAGE` to run local image IMAGE as window manager.\n   [(#158)](https://github.com/mviereck/x11docker/issues/158)\n### Removed\n - `--vcxsrv`: X server on Windows. Use `runx` on MS Windows instead\n   to provide X for x11docker:  https://github.com/mviereck/runx\n   [(#165)](https://github.com/mviereck/x11docker/issues/165)\n - `--pulseaudio` on MS Windows is no longer supported.\n - `--ps`, `--trusted`, `--untrusted`, `--no-xtest`, `--no-xhost`,\n    `--silent`, `--stderr`, `--stdout`, `--nothing`, `--cachedir`, `--starter`,\n   `--tini`, `--systemd`, `--openrc`, `--runit`, `--sysvinit`, `--no-init`,\n   `--sys-admin`: Removed; search this changelog for possible replacements \n   noted in 'Deprecated' chapters.\n### Fixed\n - `--gpu` with automated NVIDIA driver installation:\n   Don't set `--security-opt=no-new-privileges`.\n   [(#162)](https://github.com/mviereck/x11docker/issues/162)\n - `--hostwayland`: Fix socket name issue.\n   [(ehough/kodi #26)](https://github.com/ehough/docker-kodi/issues/26)\n - WSL: Add Windows System32 path to `PATH`. Can miss with `sudo`.\n   [(#153)](https://github.com/mviereck/x11docker/issues/153)\n - `--update`, `--update-master`: Support more common `tar` beside `unzip`.\n   [(#115)](https://github.com/mviereck/x11docker/issues/115)\n - `--xwin`: Use random display number.\n   [(#165)](https://github.com/mviereck/x11docker/issues/165)\n - `--xpra`: Check for option availability to support multiple versions.\n   Significantly faster startup since xpra v3.0-r23066.\n   [(#167)](https://github.com/mviereck/x11docker/issues/167)\n   [(#165)](https://github.com/mviereck/x11docker/issues/167)\n  \n\n## [5.6.0](https://github.com/mviereck/x11docker/releases/tag/v5.6.0) - 2019-05-02\n### Added\n - `--runtime=RUNTIME`: New option to specify container runtime. \n   Known runtimes: `runc` (docker default), `crun`, `nvidia` and `kata-runtime`.\n   [(#138)](https://github.com/mviereck/x11docker/issues/138)\n - `--share=PATH`: Share file or folder. Replaces `--sharedir`. \n   Works for device files in `/dev`, too. Shares targets of symlinks, too.\n### Deprecated\n - `--sharedir`: Use `--share` instead.\n - `--no-xhost`: No replacement.\n - `--sys-admin`: No replacement.\n### Fixed\n - `--clipboard`: Bugfix for `--xephyr` and some other desktop mode X servers.\n   [(#152)](https://github.com/mviereck/x11docker/issues/152)\n - `--dbus-system`: Fixed startup failure with user switching.\n - `--init=sysvinit|runit|openrc`: Always create service to start system DBus.\n - `elogind` support for debian buster containers. Partial support for Void.\n - `docker commit`: Throw error if running a recursive image command\n   created with `docker commit` from an x11docker container.\n   [(#146)](https://github.com/mviereck/x11docker/issues/146)\n\n## [5.5.2](https://github.com/mviereck/x11docker/releases/tag/v5.5.2) - 2019-04-08\n### Added\n - `--init=s6-overlay`: Support of init system `s6` as given by `s6-overlay`.\n   [(#136)](https://github.com/mviereck/x11docker/issues/136)\n### Changed\n - `x11docker` without an option: show `x11docker --help` instead of running\n   an empty X server.\n### Fixed\n - `--init=systemd|openrc|runit`: fixes for several container systems.\n - `--dbus-system`: Regression fix for service file check.\n - `--exe`: Regard possible `--` in command. Command before it has been\n   dropped errately as invalid `DOCKER_RUN_OPTIONS` before.\n - `--tty`: Workaround: Set environment variables `LINES` and `COLUMNS` to \n   current terminal size. Only needed without `--interactive`.\n   [Docker bug ticket #33794](https://github.com/moby/moby/issues/33794)\n - `--init=tini`: Support of native docker-init on docker-for-win.\n - Check for availability of `realpath`.\n - `--kwin`,`--kwin-xwayland`: Check for option `--windowed`.\n   [(#144)](https://github.com/mviereck/x11docker/issues/144)\n\n## [5.5.1](https://github.com/mviereck/x11docker/releases/tag/v5.5.1) - 2019-03-18\n### Deprecated\n - `--ps`: Preserved cache and container. No replacement.\n### Changed\n - `--lang[=LOCALE]`: Argument LOCALE is optional now. Note that `=` is \n   mandatory now. Use `--lang=ru` instead of `--lang ru`.\n   `--lang` without an argument sets `$LANG` from host.\n### Fixed\n - Fix for host user check after multiple `su`.\n - `--entrypoint env` instead of `--entrypoint /usr/bin/env`.\n   Some systems have `/bin/env` instead.\n\n## [5.5.0](https://github.com/mviereck/x11docker/releases/tag/v5.5.0) - 2019-03-06\n### Added\n - `--init=tini|systemd|sysvinit|openrc|runit|none`: New option to specify\n   or disable init system / PID 1 in container. Replaces singular options.\n### Deprecated\n - `--tini`: Use `--init=tini` instead.\n - `--systemd`: Use `--init=systemd` instead.\n - `--sysvinit`: Use `--init=sysvinit` instead.\n - `--openrc`: Use `--init=openrc` instead.\n - `--runit`: Use `--init=runit` instead.\n - `--no-init`: Use `--init=none` instead.\n### Changed\n - `--wm[=COMMAND]`: Argument `COMMAND` is optional now. Note that `=` is \n   mandatory now. Use `--wm=openbox` instead of `--wm openbox`.\n   `--wm` without an argument autodetects a host window manager.\n### Fixed\n - Execute `containerrootrc` in `/tmp` of container to circumvent possible\n   issues with access `700` of `~/.cache` on host.\n   [(#131)](https://github.com/mviereck/x11docker/issues/131)\n - Check repeatedly for PID1 of container to avoid race condition on slow systems.\n   [(#133)](https://github.com/mviereck/x11docker/issues/133)\n\n## [5.4.4](https://github.com/mviereck/x11docker/releases/tag/v5.4.4) - 2019-02-24\n### Fixed\n - `--gpu`: NVIDIA driver installation: Avoid `--install-libglvnd` and\n   `--no-nvidia-modprobe` for installer versions that do not support it.\n   Fool dependency check for `binutils` for old installer versions.\n   Skip installation if `--runtime=nvidia` is given in docker run options.\n   [(#127)](https://github.com/mviereck/x11docker/issues/127)\n\n## [5.4.3](https://github.com/mviereck/x11docker/releases/tag/v5.4.2) - 2019-02-19\n### Changed\n - `--alsa[=CARDNAME]`: Accepts a sound card name as optional argument.\n - `--gpu`: NVIDIA driver installation: Avoid dependencies on `kmod` and `xz`.\n### Fixed\n - `--gpu`: NVIDIA driver installation: Old versions need `--install-libglvnd`.\n\n## [5.4.2](https://github.com/mviereck/x11docker/releases/tag/v5.4.2) - 2019-02-18\n### Fixed\n - `--gpu`: Fixes for automated NVIDIA driver installation.\n   [(#127)](https://github.com/mviereck/x11docker/issues/127)\n\n## [5.4.1](https://github.com/mviereck/x11docker/releases/tag/v5.4.1) - 2019-02-08\n### Fixed\n - `--update`: Remove debug output of `set -x`.\n\n## [5.4.0](https://github.com/mviereck/x11docker/releases/tag/v5.4.0) - 2019-02-08\n### Added\n - `--pull [=ask|yes|no|always]`: New option to allow/deny `docker pull`.\n   [(#109)](https://github.com/mviereck/x11docker/issues/109)\n - `--limit[=FACTOR]`: New option to restrict RAM and CPU usage.\n - `--border`: New option to draw a colored border into `--xpra` windows.\n   Helps to distinguish between host and container applications.\n   [(#91)](https://github.com/mviereck/x11docker/issues/91)\n - `--xtest`, `--xcomposite`: Experimental options to enable X extensions\n   `XTEST` and `COMPOSITE`. Might be removed in later releases.\n   [(#117)](https://github.com/mviereck/x11docker/issues/117)\n### Changed\n - Copy `/etc/skel/.` in container to `HOME` if `HOME` is empty.\n - Changed shebang `#! /bin/bash` to `#! /usr/bin/env bash` for portability.\n   [(#83)](https://github.com/mviereck/x11docker/issues/83)\n - Allow interactive `docker pull` in terminal only. Do not start additional \n   X terminal. [(#109)](https://github.com/mviereck/x11docker/issues/109)\n - Prefer starting terminal to ask for root password. Use additional X terminal\n   only as a fallback. \n   [(#109)](https://github.com/mviereck/x11docker/issues/109)\n### Fixed\n - **API FIX**: Preserve quoting in image command correctly. \n   Image commands like `sh -c 'ls && pwd'` previously failed.\n   Instead `'ls && pwd'` sort of worked although it is weird.\n   Now `sh -c 'ls && pwd'` works as intended and `'ls && pwd'` fails.\n   [(#112)](https://github.com/mviereck/x11docker/issues/112)\n - `-t, --tty`: Long option was not parsed.\n - docker-for-win: Fixed IP check\n   [(#102)](https://github.com/mviereck/x11docker/issues/102)\n - docker-for-win: Make sure container is terminated.\n   [(#106)](https://github.com/mviereck/x11docker/issues/106)\n - docker-for-win: `--interactive`: Use `winpty` wrapper.\n   [(#87)](https://github.com/mviereck/x11docker/issues/87)\n - MSYS2/Cygwin: Always use X over IP to serve e.g. `Xvfb.exe`, too.\n   [(#123)](https://github.com/mviereck/x11docker/issues/123)\n - `--update`: Fixed `sed` parsing error for excerpt of `CHANGELOG.md`.\n\n## [5.3.3](https://github.com/mviereck/x11docker/releases/tag/v5.3.3) - 2018-11-17\n### Added\n - `-i, --interactive`: New option to run with an interactive TTY.\n   [(#87)](https://github.com/mviereck/x11docker/issues/87)\n - `-t, --tty`: Replaces `--nothing`. Runs no X server, uses terminal only.\n   Allows `x11docker -ti` similar to often used `docker run -ti`. \n - `-q, --quiet`: Replaces `--silent`. Suppress x11docker messages.\n### Deprecated\n - `--silent`: Use `--quiet` instead.\n - `--nothing`: Use `--tty` instead.\n - `--stdout`: stdout is always displayed now.\n - `--stderr`: stderr is always displayed now.\n - `-Q`: stdout and stderr are always displayed now.\n### Fixed\n - `--webcam`: Share `/run/udev/data` to provide device information for \n   `cheese` and `gnome-ring`.\n   [(#86)](https://github.com/mviereck/x11docker/issues/86)\n   [(#75)](https://github.com/mviereck/x11docker/issues/75)\n - `--sysvinit`: fixed startup failure due to missing container user name.\n\n## [5.3.2](https://github.com/mviereck/x11docker/releases/tag/v5.3.2) - 2018-11-08\n### Added\n - `--user=RETAIN`: Keep user settings of image instead of creating a new one.\n   [(#85)](https://github.com/mviereck/x11docker/issues/85)\n### Fixed\n - `gnome-terminal` did not appear for password prompt or `docker pull`.\n   [(#84)](https://github.com/mviereck/x11docker/issues/84)\n - Watch container pid 1 instead of container pid itself. Avoids issue on NixOS\n   where users cannot see processes of other users, root or docker in this case.\n   Throw error if x11docker cannot watch container pid 1 due to `hidepid=2`.\n   [(#83)](https://github.com/mviereck/x11docker/issues/83)\n\n## [5.3.1](https://github.com/mviereck/x11docker/releases/tag/v5.3.1) - 2018-10-22\n### Fixed\n - `--hostdisplay`: Fixed `XAUTHORITY` issue if running over `ssh -X`.\n   [(#81)](https://github.com/mviereck/x11docker/issues/81)\n\n## [5.3.0](https://github.com/mviereck/x11docker/releases/tag/v5.3.0) - 2018-10-11\n### Added\n - `--launcher`: Replaces `--starter`, creates an application launcher.\n### Changed\n - Major code cleanup and restructuring. New: commented `main()` routine.\n - `--dbus`: Always uses `dbus-run-session`, doesn't try `dbus-launch` anymore.\n - `--xpra`: Allow choice of virtual frame buffer with `--xdummy` or `--xvfb`. \n   If not specified: defaults to Xvfb, fallback to Xdummy.\n### Deprecated\n - `--starter`: Use `--launcher` instead.\n - `--trusted`: Use `--clipboard` instead.\n - `--untrusted`: No replacement.\n - `--xtest`: No replacement.\n - `--no-xtest`: No replacement.\n### Fixed\n - `--weston*`, `--kwin*`: Did not terminate due to DBus issue.\n - `--xdummy`, `--xvfb`: avoid X message boxes if there is no host X.\n   Affects error messages and `docker pull`.\n   [(#77)](https://github.com/mviereck/x11docker/issues/77)\n - `--pw`: regression fix, did not prompt for password in terminal window.\n - `/etc/pam.d/su`: allow additional default configs.\n - Export environment variables `DOCKER_*` in dockerrc if some exist.\n   [(#79)](https://github.com/mviereck/x11docker/issues/79)   \n\n## [5.2.0](https://github.com/mviereck/x11docker/releases/tag/v5.2.0) - 2018-09-17\n### Added\n - `--webcam`: New option to share webcam devices `/dev/video*`.\n   [(#75)](https://github.com/mviereck/x11docker/issues/75)\n - `--hostdbus`: New option to connect container to DBus session from host.\n - `-q`: New option, shortcut for `--stdout --stderr --silent`.\n - `-Q`: New option, shortcut for `--stdout --stderr`.\n### Changed\n - `--wayland`: Does not run `--dbus-system` anymore to avoid complexity\n   and issues on arch linux. Some old GTK3 applications may fail now.\n   In that case, use `--weston` instead.\n - `--sharedir DIR`: Appending `:ro` to `DIR` restricts to read-only access.\n### Fixed\n - `--systemd --verbose`: journalctl.log was not shown.\n - `--systemd`: fixed slow dbus startup.\n\n## [5.1.0](https://github.com/mviereck/x11docker/releases/tag/v5.1.0) - 2018-09-02\n### Added\n - `--printer`: New option to access CUPS printer server.\n   [(#73)](https://github.com/mviereck/x11docker/issues/73)\n### Fixed\n - `--hostdisplay`: Fixed wrong `DISPLAY` detection if `XAUTHORITY` is missing,\n   happened e.g. in Gnome Wayland session.\n   [(#74)](https://github.com/mviereck/x11docker/issues/74)\n - `--nxagent`: X authentication was set to `xhost +`. \n   Now restricted to cookie using clients again.\n\n## [5.0.0](https://github.com/mviereck/x11docker/releases/tag/v5.0.0) - 2018-08-20\n### Added\n - Support of MSYS2, Cygwin and WSL on MS Windows. \n   [(#55)](https://github.com/mviereck/x11docker/issues/55)\n - `--vcxsrv`: New option for [VcXsrv](https://sourceforge.net/projects/vcxsrv/) \n   X server on MS Windows. Similar to Xming.\n   [(#55)](https://github.com/mviereck/x11docker/issues/55)\n - `--xwin`: New option for Xwin X server of Cygwin/X on MS Windows.\n - `--sharessh`: New option to share SSH agent authentication socket from host.\n   [(#59)](https://github.com/mviereck/x11docker/issues/59)\n - `--name`: New option to set container name.\n   [(#61)](https://github.com/mviereck/x11docker/issues/61)\n - `--cachebasedir`: Set custom cache base directory. Replaces `--cachedir`.\n - `--homebasedir`: Set base directory where to store folders for `--home`.\n### Changed\n - **API CHANGE**: Syntax changed for custom `DOCKER_RUN_OPTIONS` \n   [(#58)](https://github.com/mviereck/x11docker/issues/58). New:\n```\n   x11docker [OPTIONS] --  DOCKER_RUN_OPTIONS -- IMAGE [COMMAND [ARG1 ARG2 ...]]\n```\n   Previous syntax, still valid, but deprecated:\n```\n   x11docker [OPTIONS] -- \"DOCKER_RUN_OPTIONS\"   IMAGE [COMMAND [ARG1 ARG2 ...]]\n   x11docker [OPTIONS] -- IMAGE COMMAND ARG1 -- ARG2\n```\n   **BREAKS** due to wrongly parsed ` -- ` :\n```\n   x11docker [OPTIONS] -- \"DOCKER_RUN_OPTIONS\"   IMAGE COMMAND ARG1 -- ARG2\n```\n   Valid:\n```\n   x11docker [OPTIONS] --  DOCKER_RUN_OPTIONS -- IMAGE COMMAND ARG1 -- ARG2\n```\n - `--pulseaudio` allows optional argument `=tcp` or `=socket`.\n   Defaults to connection over shared socket on Linux and to TCP connection\n   on MS Windows. On Linux both modes are possible, on MS Windows TCP only.\n - `--verbose`: takes optional argument `c` for colored output, eg `-vc`.\n### Deprecated\n - `--cachedir`: Use `--cachebasedir` instead.\n### Removed\n - `--ipc`: Use `--hostipc` instead.\n - `--net`: Use `--hostnet` instead.\n - `--sharewayland`: Use `--wayland` instead.\n - `--setwaylandenv`: Use `--wayland` instead.\n - `--dbus-daemon`, `--dbusdaemon`: Use `--dbus-system` instead.\n - `--add`: Use `--runfromhost` instead.\n### Fixed\n - `--xpra`: Support of outdated xpra version v0.17.6 that is still\n   distributed in debian stretch and buster.\n - `--xpra`: Set x11docker cache folder as xpra socket folder.\n   [(#69)](https://github.com/mviereck/x11docker/issues/69)\n - `--xpra`: Check if `xhost` is available if xpra version 2.3.1 has cookie \n   issue. [(#57)](https://github.com/mviereck/x11docker/issues/57)\n - `--xpra-xwayland`: Set Weston `--fullscreen` to get Xwayland resolution\n   matching host display. Weston v4.0.0 seems to interpret screen size \n   settings in `weston.ini` different than before.\n - `--pulseaudio`: create socket to share instead of using existing one.\n   [(#71)](https://github.com/mviereck/x11docker/issues/71)\n - `--pw gksu`, `--pw gksudo`: Disable keyboard grabbing to avoid issues\n   with Gnome 3 Wayland session.\n - Don't fail on missing password prompt frontend if no password is needed.\n\n## [4.3.6](https://github.com/mviereck/x11docker/releases/tag/v4.3.6) - 2018-07-03\n### Changed\n - `--auto`: Prefer `--xpra` and `--xephyr` over `--nxagent` again.\n   `--nxagent` too often has issues with extension Composite.\n - `--xorg`: Allow running Xorg as root from within X \n   if `/etc/X11/Xwrapper.config` is not configured to allow it.\n - `--xpra`, `--xpra-xwayland`: Set maximal `--quality 100`.\n\n### Fixed\n - `--xpra`: Check for tty timeout had a bug that caused all clients \n   of same server to terminate if one client was closed.\n - `--xorg`: Secure check for free tty instead of guessing it.\n - `--xorg`: Error messages appear on new display instead of host display.\n - `--sysvinit`, `--runit`, `--openrc`: Clean shutdown on CTRL-C / SIGINT.\n - `x11docker-gui`: Fixed issue with self-terminating on cleanup.\n - errors within subshells did not reliably terminate x11docker.\n - `--tini`: Check for `docker-init` in snap installs of docker.\n   [(#51)](https://github.com/mviereck/x11docker/issues/51)\n - `--dbus-system`: Disable services `org.freedesktop.hostname1` and \n   `org.freedesktop.locale1` if not running with `--systemd`. Can cause\n   container shutdown after some time.\n - `--hostdisplay`: Fixed possible `xhost -SI:localuser:$USER`. \n   [(#53)](https://github.com/mviereck/x11docker/issues/53)\n - `/etc/shadow`: Fixed fedora issue with `000` file access.\n   [(#53)](https://github.com/mviereck/x11docker/issues/53)\n\n\n## [4.3.5](https://github.com/mviereck/x11docker/releases/tag/v4.3.5) - 2018-06-21\n### Changed\n - `x11docker-gui` runs from console, too.\n### Fixed\n - `--xorg` and others on TTY failed due to xinit in subshell.\n   (regression in v4.3.4).\n - `--weston --size` failed on tty, have to specify drm backend for check.\n - timezone syncing: If setting `TZ`, positive offsets have been set wrong.\n - timezone syncing: Regard `TZ` from host, not only `/etc/localtime`.\n - `--xpra`: catch timeout disconnection that happens if using another tty\n   longer than 60s. Restart xpra client in that case.\n\n## [4.3.4](https://github.com/mviereck/x11docker/releases/tag/v4.3.4) - 2018-06-15\n### Changed\n - `--dbus-system --sharecgroup`: support of `elogind` in container.\n - Timezone syncing: Do not mount-bind `/etc/localtime`. \n   If tzdata is missing in image, but host and image have same libc,\n   provide current timezone file only. Create symlink `/etc/localtime` within\n   container. If all that fails, set `TZ` with offset to UTC.\n   [(#50)](https://github.com/mviereck/x11docker/issues/50)\n - Improved `message.fifo` handling from within dockerrc and container.\n - Disentangled final code sequence of xinit and docker run.\n### Fixed\n - Check for running docker daemon in dockerrc instead of using `pidof`.\n   [(#49)](https://github.com/mviereck/x11docker/issues/49)\n - Show error message if X server fails to start. Suppress warning if needless.\n - `--xpra`: Do not exit on `failed` in xpra server log. (seen on Ubuntu 18.04).\n - `--xorg`: Show `Xwrapper.config` warning if `needs_root_rights=yes` is \n   missing. (Seen on Ubuntu 18.04).\n - `--xorg`: Password prompt did not appear on new display.\n - `--nothing`: Bugfix password prompt on console.\n - `--nothing`: Avoid startup error message.\n - `--nothing`: Don't start X if running within X / dependency check issue.\n - `--nothing`: Pull request for non-local images was invisible.\n   \n## [4.3.3](https://github.com/mviereck/x11docker/releases/tag/v4.3.3) - 2018-06-05\n### Changed\n - `--no-init` or missing `tini` resp. `docker-init`: use `sh` as PID 1\n   for desktop environments (`--desktop`) to allow logout.\n### Fixed\n - fedora 28: Check for docker daemon with name `dockerd-current` \n   [(#49)](https://github.com/mviereck/x11docker/issues/49)\n - `--auto`: Prefer `--hostdisplay` for seamless apps if nothing else is \n   available.\n - `--wayland`, `--weston`, `--kwin`, `--hostwayland`: \n   Show error and exit if no wayland environment can be provided.\n - dockerrc messages forwarded to logfile fifo. (fixes \"unknown file descriptor\").\n\n## [4.3.2](https://github.com/mviereck/x11docker/releases/tag/v4.3.2) - 2018-06-03\n### Changed\n - `x11docker-gui` is interactive now. Live preview of generated command. \n   Starting multiple x11docker instances possible. Copy-to-clipboard button.\n - `x11docker-gui`: create list of installed images every time x11docker \n   or x11docker-gui runs and has enough permissions. Image list is used in\n   x11docker-gui in image combo.\n - `--cleanup`: Running as root not mandatory.\n - `--clipboard`: support `xsel` additional to `xclip`.\n### Fixed\n - Starting in pure Wayland environments failed (regression in v4.3.0).\n - `--wayland`, `--weston`, `--kwin` in pure Wayland: detect screen size.\n \n## [4.3.1](https://github.com/mviereck/x11docker/releases/tag/v4.3.1) - 2018-05-29\n### Changed\n - `--auto`: prefer `--nxagent` over `--xpra` and `--xephyr`. Reasons:\n   Faster startup than `--xpra`. Flexible display size opposed to `--xephyr`.\n   Since Ubuntu 18.04 available to broader range of users than before.\n - `--runfromhost` can be specified multiple times now.\n - `--runasroot` can be specified multiple times now.\n - `--dbus-system` and init systems: remove useless or failing dbus services.\n - `--systemd`: mask some useless or failing units.\n - set `DISPLAY`, `XAUTHORITY`, `WAYLAND_DISPLAY` and `XDG_RUNTIME_DIR`\n   in `docker run` command for easier custom use of `docker exec`.\n### Fixed\n - `--xpra`: Deny to start xpra >2.2.5 and <r19519 due to MIT-SHM bug.\n   Show message that startup is only possible with `--hostipc`.\n   xpra bugticket: https://xpra.org/trac/ticket/1858\n - `--xpra`: Warning and workaround for cookie bug in xpra >=v2.3.\n   xpra bugticket: https://www.xpra.org/trac/ticket/1859\n - `--xpra` in desktop mode: Allow closing client window, don't restart.\n\n## [4.3.0](https://github.com/mviereck/x11docker/releases/tag/v4.3.0) - 2018-05-26\n### Added\n - `--stdin`: Forward stdin of x11docker to image command.\n - `--showpid1`: Echo host PID of container PID 1 on stdout.\n### Changed\n - `--security-opt=no-new-privileges` for init systems and `--dbus-system`.\n   Now default for all options except `--sudouser` and `--cap-default`.\n - `--dbus-system` and `init` system options: Run all except a few dbus\n   system services manually and show security warning message. Manual\n   start needed due to `no-new-privileges`, polkit setuid helper fails.\n - Minimize or delete `/etc/pam.d/su` and delete `/etc/pam.d/sudo`.\n   Avoids security leak that would allow switching to root in container\n   if `PAM` configuration allows it and capabilities for `su` are given.\n - Remove `/bin/sh -c` from extracted CMD image command.\n - Regard `WORKDIR` in image, use it instead of `HOME`. \n   [(#45)](https://github.com/mviereck/x11docker/issues/45)\n - Logfile handling with fifo/named pipe.\n - `--auto`: Tightened dependency check.\n - Improved process watching using less resources. Faster shutdown.\n - `x11docker-gui`: New structure using tabs.\n - Some code cleanup.\n### Fixed\n - Don't set `-title` in `Xephyr` command. Xephyr bug: Releasing keyboard\n   and mouse after grab (ctrl+shift) does not work with `-title`. \n   [(#44)](https://github.com/mviereck/x11docker/issues/44)\n - `--nxagent`: Fixed keyboard layout issue, don't use setxkbmap.\n - `--nxagent`:  Regard `--keymap`.\n - `--nxagent`: Removed extension Composite, caused some issues.\n - `--exe`: Don't pass file descriptors to host executable.\n - `--wayland` Works with prissy GTK3 applications (e.g. xfce4-terminal) again,\n   needed user switching in `--dbus-system` for unknown reasons.\n - `--showid` failed with sudo due to missing file descriptors. Using mkfifo now.\n - Don't forward stdin as default, can cause trouble if empty. use `--stdin` instead.\n - `--xorg`: disable screen saver [(#46)](https://github.com/mviereck/x11docker/issues/46)\n   \n## [4.2.1](https://github.com/mviereck/x11docker/releases/tag/v4.2.1) - 2018-05-10\n### Added\n - Forward `stdin` of x11docker to container command with a named pipe/fifo.\n### Changed\n - `x11docker-gui`: Use stdin for kaptain grammar transmission. Don't use cache.\n - `--dbus-system`: Don't create `--tmpf /tmp --tmpfs /run --tmpfs /var/run --tmpfs /run/lock`.\n   [(#43)](https://github.com/mviereck/x11docker/issues/43)\n - Some internal improvements for faster startup and shutdown.\n### Fixed\n - `x11docker-gui`: fixed x11docker startup failure due to changed stdout output.\n\n## [4.2.0](https://github.com/mviereck/x11docker/releases/tag/v4.2.0) - 2018-05-04\n### Added\n - `--group-add`: New option to add groups to container user. \n   Needed instead of ` -- --group-add` to cover user switching setups, too.\n - `--showid`: New option to show container ID on stdout.\n - `--runfromhost`: Replaces deprecated `--add` to have a meaningful option name.\n   Similar to already existing `--exe`, but integrates with container.\n - `--runasroot`: New option to run command as root in container on startup.\n### Changed\n - `--gpu`: Support for automatic installation of NVIDIA drivers in container.\n   Limited to `glibc` based image systems.\n   [(#41)](https://github.com/mviereck/x11docker/issues/41)\n - `elogind` support for `--sysvinit`, `--openrc` and `--runit`.\n   See also [elogind in container: elogind#52](https://github.com/elogind/elogind/issues/52)\n - `--systemd`: If host does not run `systemd`, create `/sys/fs/cgroup/systemd`.\n - `--dbus-system`: wait for bus socket to be ready before continuing.\n - `--tini`: Use `tini-static` from `~/.local/share/x11docker` or \n   `/usr/local/share/x11docker` if available. Show message for this possibility\n   if `/usr/bin/docker-init` is missing. (Widespread docker packaging issue).\n   [(#23)](https://github.com/mviereck/x11docker/issues/23)\n - Avoid user switching except for `--systemd`, `--sysvinit`, `--openrc` and \n   `--runit`. [(#42)](https://github.com/mviereck/x11docker/issues/42)\n - Outsourced `x11docker.png` from `x11docker-gui`.\n - No default output of container ID on stdout anymore. Use `--showid` instead.\n - `--silent`: Do not show error messages except in logfile.\n - `--weston[-xwayland] --fullscreen`: Use X backend if possible to prevent\n   possible crash with nested fullscreen weston in host drm weston.\n - Disabled forwarding of `stdin` to container, has not been reliable.\n### Deprecated\n - `--add` changed its option name to `--runfromhost`.\n### Fixed\n - Don't share or link `/tmp/.Xn-lock` as usefulness is in doubt. \n   Avoids issues with `x11docker/xwayland`.\n - `--stdout --showid:` Make sure container ID is shown first.\n\n## [4.1.1](https://github.com/mviereck/x11docker/releases/tag/v4.1.1) - 2018-04-12\n### Changed\n - Mount nothing into `/tmp` as init cleanups may try (and fail) to delete it. \n - Write or link into `/tmp` only _after_ possible init cleanup.\n - Mount X socket r/w again as there is no longer a risk due to `/tmp` cleanups.\n - `--debug`: Some changes for more useful debugging output. \n   Drop `set -x` in main code, instead `set -Eu` with `trap ERR`.\n - `--update`/`--update-master`: Show excerpt of `CHANGELOG.md`.\n - Check `ENTRYPOINT` for init entries `/tini|/init|/systemd` and disable it \n   if x11docker already runs an init. (Default: `--tini`.)\n### Fixed\n - `x11docker-gui` regards new output of container ID now that confused output\n   of `x11docker/kaptain` and prevented start of `x11docker`.\n - Mount `WAYLAND_DISPLAY` and `DISPLAY` at `/` instead of `/x11docker/` \n   in container. \n   Avoids a docker bug that only sometimes causes startup failure \n   `stat /run/user/1000/wayland-600: no such file or directory`.\n   Occasionally docker is confused about a mount point inside of a mount point.\n   Avoiding that now. \n   However, issue only seen with shared Wayland sockets and never with X \n   sockets, maybe due to different option positions in `docker run` command.\n - `--workdir`: Avoid double setting of `--workdir` in docker command \n   if x11docker option `--workdir` is set. Caused no trouble, though.\n\n## [4.1.0](https://github.com/mviereck/x11docker/releases/tag/v4.1.0) - 2018-04-08\n### Added\n - `--update-master` updates to latest x11docker master version.\n   (Formerly job of `--update`).\n### Changed\n - `--update` updates to latest x11docker release on github. \n   (Formerly: latest master version).\n\n## [4.0.0](https://github.com/mviereck/x11docker/releases/tag/v4.0.0) - 2018-04-07\n### Changed\n - Outsourced changelog from x11docker source code to `CHANGELOG.md`. [(#38)](https://github.com/mviereck/x11docker/issues/38)\n - Follow guidelines of [Keep a Changelog](http://keepachangelog.com/en/1.0.0/).\n - Stricter compliance to [Semantic Versioning](https://semver.org/) rules.\n### Notes\n - Previous version links in changelog lead to history tree leafs with \n   corresponding `x11docker` script.\n - Upcoming version links in changelog will lead to corresponding [releases](https://github.com/mviereck/x11docker/releases).\n\n## [3.9.9](https://github.com/mviereck/x11docker/blob/8abded01de9482ef70195550f936c9f07668b486/x11docker) - 2018-04-06\n### Changed\n - Removed `--security-opt=no-new-privileges` for \n   `--systemd`/`--sysvinit`/`--runit`/`--openrc`.  (Undoes some changes \n   from V3.9.8.1). Will be reintroduced after further checks, caused issues \n   with `x11docker/deepin` and `x11docker/cinnamon`.\n - `--env`: set environment variables in `docker run`, too. \n   Makes them available within `docker exec`.\n\n## [3.9.8.5](https://github.com/mviereck/x11docker/blob/6227a1eebc5b63df305822896d7360a14440caf4/x11docker) - 2018-04-05\n### Changed\n - `finish()`: run `docker stop` before creating `timetosaygoodbye` for \n   more graceful shutdown [(#37)](https://github.com/mviereck/x11docker/issues/37)\n### Fixed\n - Set correct `XAUTHORITY` in setup script.\n - Disable `User` in systemd journal service, can fail in restricted setups.\n\n## [3.9.8.4](https://github.com/mviereck/x11docker/blob/d74fa2defceb538d8c9e90932d48f23cae0f102b/x11docker) - 2018-04-04\n### Added\n - `--workdir` to set working directory different from `HOME`. ([#36](https://github.com/mviereck/x11docker/issues/36))\n### Changed\n - `--systemd`/`--dbus-system`: changed `su` command to remove `sh` from pstree.\n### Fixed\n - User group entry in `/etc/group` had wrong syntax.\n\n## [3.9.8.3](https://github.com/mviereck/x11docker/blob/6ce5d2cbd7a14556723a3c8e1163988f2ddda8ce/x11docker) - 2018-04-04\n### Fixed\n - `--dbus-system`: must not set `--security-opt=no-new-privileges`, \n   important services like `polkitd` fail.\n\n## [3.9.8.2](https://github.com/mviereck/x11docker/blob/a58e6808254ce78eb528010584ff9d7ef9b8aa26/x11docker) - 2018-04-03\n### Changed\n - disable entrypoint `tini` if x11docker already runs an init system \n   (default: `--tini`/`docker-init` from docker). ([#34](https://github.com/mviereck/x11docker/issues/34))\n\n## [3.9.8.1](https://github.com/mviereck/x11docker/blob/75f79c9888beee08ca08c42c5f70feaa0f02cd30/x11docker) - 2018-04-03\n### Changed\n - `--security-opt=no-new-privileges` now always set except for `--sudouser`.\n   It does not harm switching from root to less privileged users. \n   _(Note: is undone in v3.9.9)_\n - setup script with user switching: `exec su` instead of `su` to avoid \n   root shell in parent tree. `su` is now immediate child of `init`.\n### Added\n - show container ID on stdout ([#36](https://github.com/mviereck/x11docker/issues/36)). \n   Can be catched e.g. with `read containerID < <(x11docker [...] )`.\n\n## [3.9.8.0](https://github.com/mviereck/x11docker/blob/a4067993a91f39bce145b48406453f786d1707eb/x11docker) - 2018-04-02\n### Changed\n - Removed `Xtermlogfile`, using `Dockerlogfile` instead. \n   Strange: solved missing output with `--pw=su` or `--pw=sudo`, too.\n### Fixed\n - Escape special characters in `--env`, `ENV` and image command.\n   (Addresses [#34](https://github.com/mviereck/x11docker/issues/34), too, now solved better). _(Note: still have to escape some other optional arguments)_\n\n## [3.9.7.9](https://github.com/mviereck/x11docker/blob/7776de0f3128a679239037567626cca09f472ee5/x11docker) - 2018-03-31\n### Changed\n - Store parsed parts of `Imagecommand` in `''` to allow constructs like\n   `sh -c \"cd /etc ; xterm\"`\n### Fixed\n - Added `--rm` to `docker run` of environment check. ([#34](https://github.com/mviereck/x11docker/issues/34))\n\n## [3.9.7.8](https://github.com/mviereck/x11docker/blob/4d619bfbcae605b25ee93778936245019a8a7020/x11docker) - 2018-03-31\n### Fixed\n - Handle equal signs in container environment defined with `ENV` ([#34](https://github.com/mviereck/x11docker/issues/34))\n\n## [3.9.7.7](https://github.com/mviereck/x11docker/blob/733b8f9b9228d5fa3b167a4771976bcc610ac0de/x11docker) - 2018-03-31\n### Fixed\n - Handle whitespaces in container environment defined with `ENV` ([#34](https://github.com/mviereck/x11docker/issues/34))\n\n## [3.9.7.6](https://github.com/mviereck/x11docker/blob/65305faba992415b8b255a4fac7e89c4417e5a1e/x11docker) - 2018-03-30\n### Changed\n - mount X socket and lockfile read-only to protect from `/tmp` init cleanups.\n - minor improvements of init system initialization\n### Fixed\n - remove checks for `--userns-remap` and `--selinux-enabled`. [(#33)](https://github.com/mviereck/x11docker/issues/33)\n\n## [3.9.7.5](https://github.com/mviereck/x11docker/blob/0f0b138db7c2f3093511fae7583b34bc44db3423/x11docker) - 2018-03-30\n### Changed\n - `--dbus-system`: drop explicit consolekit support\n - `--sysvinit`,`--openrc`: disable getty in inittab instead of overwriting \n   inittab with shared volume\n - `--sysvinit`: change `rc.local` in setupscript instead of overwriting it\n   with shared volume\n - `--openrc`, `--runit`: create service in setupscript. \n   Drop some more capabilities\n\n## [3.9.7.4](https://github.com/mviereck/x11docker/blob/85f1f29855090d2dba9328e9184f23365f4f1a6f/x11docker) - 2018-03-26\n### Added\n - `--sysvinit` for init system SysVinit in container. Tested with devuan.\n### Fixed\n - `--pulseaudio`: need to set environment variable `PULSE_SERVER`. \n   (Was missing after switch from tcp to socket connection).\n - `--runit`: add softlink for X socket in `x11docker.CMD.sh` for \n   compatibility with `runit` on debian.\n\n## [3.9.7.3](https://github.com/mviereck/x11docker/blob/57e34236dca42e05434a304c77f61202d678398a/x11docker) - 2018-03-21\n### Changed\n - `--pulseaudio`: share socket `XDG_RUNTIME_DIR/pulse` \n   instead of connecting over tcp.\n\n## [3.9.7.2](https://github.com/mviereck/x11docker/blob/25201b916159b2f77d6c6188ea875d80004733d1/x11docker) - 2018-03-20\n### Added\n - `--add` to add a host command in `xinitrc`.\n - `--debug` to set `-x` in all scripts showing code lines while executed.\n### Changed\n - `--wm`: fall back to autodetection if specified window manager not found.\n - `--dbus`: enable automatically for `--runit`, `--openrc`\n - consolekit: use automatically with `--dbus-system`, `--openrc`, `--runit`\n - `mywatch()`: use `watch` again, now without `sh -c`\n - `--help`: `usage()` cleanup\n### Deprecated\n - `--sharewayland`, `--waylandenv`: not needed for anything anymore. \n   `--wayland` does the job.\n### Fixed\n - `writeaccess()` handles user group names with spaces in it. [#30](https://github.com/mviereck/x11docker/issues/30)\n - `--env`: regard whitespace. Still need to handle special chars like \"\\'$.\n\n## [3.9.7.1](https://github.com/mviereck/x11docker/blob/4aaa1cf3c9de7b5924a05cd1ace29e60b3903327/x11docker) - 2018-03-16\n### Fixed\n - alpine images: `/etc/shadow` entry must be `/bin/sh`, `--dbus-system` with `su` fails with `/bin/bash`.\n - openSUSE: `finish()`: replace `bc` with bash-only calculation, `bc` is missing on openSUSE.\n\n## [3.9.7](https://github.com/mviereck/x11docker/blob/82e573068bfe78a9650f40cb5b98df9b1e08d483/x11docker) - 2018-03-15\n### Changed\n - structure change: don't `sleep 1` for setup; instead wait for it in `x11docker.CMD.sh` resp. run `su` or `init` in setup\n - `xinitrc`: some cleanup\n - `--verbose`: power of moo\n - SSH with `--hostdisplay`: set `--hostipc`, `--hostnet` and `--trusted`. Do not use X-generated cookie, bake it myself.\n### Fixed\n - openSUSE/fedora: `ps` check for container pid; fixed desktop logout issue, too.\n - `---weston`/`--weston-xwayland`: do not start drm backend if started within X without `DISPLAY` -> crashed host X.\n - regard SSH session, assume tty if `DISPLAY` is empty.\n - `--hostdisplay`: don't set keymap.\n\n## [3.9.6.1](https://github.com/mviereck/x11docker/blob/1e482bc9341a6c22771b3ba602edb847e25d6d82/x11docker) - 2018-03-10\n### Changed\n - `--lang`: replace `locale-gen` with more general available `localedef`.\n### Fixed\n - `--tini`: check for `docker-init` in `PATH`, disable default option `--tini` if missing. ([#23](https://github.com/mviereck/x11docker/issues/23))\n\n## [3.9.6](https://github.com/mviereck/x11docker/blob/0a4166c020c9700e592c0d7600b4a8b5e9850222/x11docker) - 2018-03-09\n### Added\n - `--lang` to set language locale in utf8, create it if missing.\n\n## [3.9.5](https://github.com/mviereck/x11docker/blob/9a86a235f82e900d83bb0bbd4e2b85db60c5335b/x11docker) - 2018-03-06\n### Added\n - `--keymap` to set keyboard layout.\n\n## [3.9.4.2](https://github.com/mviereck/x11docker/blob/4777416424b379dfc52240e8a32fe10bbef0a25f/x11docker) - 2018-03-06\n### Fixed\n - Store keyboard layout (xkb_keymap) in separate file, not in xinitrc. Set on all X servers. [#25](https://github.com/mviereck/x11docker/issues/25)\n\n## [3.9.4.1](https://github.com/mviereck/x11docker/blob/68a7a529b807f40d102842ebc3fe16ca3435b771/x11docker) - 2018-03-06\n### Changed \n - share `/etc/localtime` with container to have the same time zone as on host.\n### Fixed\n - typo `--pulseaudio`\n\n## [3.9.4.0](https://github.com/mviereck/x11docker/blob/fa043c37d029982ed44431032f37e05f5c5f0024/x11docker) - 2018-03-05\n### Added\n - `--sys-admin`: no longer deprecated, needed for systemd in debian 9 images (but not debian 10). Adds capability `SYS_ADMIN`.\n - `--hostnet` replaces former `--net`.\n - `--hostipc` replaces former `--ipc`.\n - `--dbus-system` replaces former `--dbus-daemon`.\n### Changed\n - `--pulseaudio` with `--hostnet`: no fallback to `--alsa`, use localhost IP instead.\n - `--pulseaudio` `--no-internet`: fallback to `--alsa`.\n - `--auto` `--gpu`: fallback to `--hostdisplay` for seamless mode if xpra and weston not found. ([#23](https://github.com/mviereck/x11docker/issues/23))\n - clean up error message on docker startup failure, remove multiple error lines.\n - stdout and stderr of image command outsourced of `docker.log`.\n - `docker log -f >> docker.log` to get output in detached mode.\n - more verbose messages in waiting subroutines.\n### Deprecated\n - `--net` is replaced by `--hostnet`.\n - `--ipc` is replaced by `--hostipc`.\n - `--dbus-daemon` is replaced by `--dbus-system`.\n### Fixed\n - mount `/dev/dri` and `/dev/snd` not only with `--device`, but also `--volume` to keep ownership+group. Workaround for bug in docker. [#24](https://github.com/mviereck/x11docker/issues/24). \n - `--hostdisplay`: Use correct display number to share `/tmp/.X0-lock`, only share if it exists.\n - `--systemd`: terminate x11docker if systemd startup fails.\n\n## [3.9.3.2](https://github.com/mviereck/x11docker/blob/f28e182de62f7f25a5458d6d1db28aee5f339eb3/x11docker) - 2018-03-01\n### Added\n - `--no-xtest`: disable extension `XTEST`. Default for most options.\n### Fixed\n - openSUSE docker package misses init binary `docker-init`, show warnings for `--tini`. [#23](https://github.com/mviereck/x11docker/issues/23)\n\n## [3.9.3.1](https://github.com/mviereck/x11docker/blob/7883bb089dc1ea8c438ed7be123e3bfcbd4eded2/x11docker) - 2018-03-01\n### Fixed\n - Avoid wrong `XTEST` warning messages.\n\n## [3.9.3](https://github.com/mviereck/x11docker/blob/4f8cd878dcc44469bdb9afce2f91afce3abcda8a/x11docker) - 2018-03-01\n### Added\n - `--xtest` to enable X extension `XTEST`. Default for `--xdummy`, `--xvfb`, `--xpra`\n### Changed\n - `--tini`: show warning for outdated docker versions without option `--init` and fall back to `--no-init`. [#23](https://github.com/mviereck/x11docker/issues/23)\n - `--pulseaudio` with `--net`: fallback to `--alsa`, disabling `--pulseaudio`.\n\n## [3.9.2.3](https://github.com/mviereck/x11docker/blob/62e31a381b79b67a1eea9f84b629a849833249c0/x11docker) - 2018-02-25\n### Changed\n - set container GID of video and audio to same as on host. Avoids issues if container system has different GIDs than host.\n - cat docker daemon messages for startup error message.\n - `mywatch()`: replaced watch with custom sleep loop, watch failed in `--hostdisplay` (xinitrc) setups.\n - `mywatch()`: verbose output.\n - `--exe`: only forward stdin if not empty.\n - `finish()`: use pkill in most cases instead of kill to avoid kill success messages.\n### Fixed\n - `--weston`/`--kwin`: wait for file creation of wayland socket, checking logfile is not enough.\n - `--kwin`: kwin_wayland seems to need dbus-launch now.\n\n## [3.9.2.2](https://github.com/mviereck/x11docker/blob/699cdd4d4eb40846619233ef65edefe74e1246d0/x11docker) - 2018-02-09\n### Changed\n - check free display and cache folder with find only.\n - plasmashell added to possible window managers.\n### Fixed\n - `--exe`: avoid possible hostexe options with `basename` for `$Hostexebasename`.\n - typo checking `/tmp/.Xn-lock`.\n - checking free display number: race condition if starting two x11docker instances at same time, second one failed because display number already in use.\n\n## [3.9.2.1](https://github.com/mviereck/x11docker/blob/3c28c1b61596fbc8a7e2b3ea0bbbe75dbc320fc4/x11docker) - 2018-01-29\n### Changed\n - create `/x11docker/environment` to store and provide container environment variables.\n### Fixed\n - correct date/year in changelog. ([#21](https://github.com/mviereck/x11docker/issues/21))\n - `finish()`: wrong warning although terminating bgpid was successful.\n\n## [3.9.2](https://github.com/mviereck/x11docker/blob/64556a1096470761e66f15c21b5054a6cba7a734/x11docker) - 2018-01-21\n### Changed\n - `finish()`: more precise check with pid and name before killing background pids.\n### Fixed\n - add groups `video` and `audio` in `docker run` if `su` is not used in container. `/etc/group` changes by dockerrc seem to be not regarded in that case.\n\n## [3.9.1.9](https://github.com/mviereck/x11docker/blob/f789a74ceab2f547b3d2939a5e23f21b32c0cd7c/x11docker) - 2018-01-17\n### Changed\n - `--xpra`: if server crashes, use xpra option `--mmap=no` on restart.\n\n## [3.9.1.8](https://github.com/mviereck/x11docker/blob/363351c54eeaad227c942bbe3eeb035085930580/x11docker) - 2018-01-16\n### Changed\n - `--xpra`: stop x11docker if xpra server crashes multiple times.\n\n## [3.9.1.7](https://github.com/mviereck/x11docker/blob/3b20fd795ac133b36702ed516e2e4efb1669f7d4/x11docker) - 2018-01-15\n### Changed\n - `--gpu`: share `/dev/vga_arbiter` and `/dev/nvidia*`.\n\n## [3.9.1.6](https://github.com/mviereck/x11docker/blob/f4797498300a30aad91985ca08269eb475826984/x11docker) - 2018-01-15\n### Changed\n - `--xpra`: restart xpra server if it crashes (can happen with xpra 2.2, reason unknown)\n\n## [3.9.1.5](https://github.com/mviereck/x11docker/blob/c2b217885e424e889d206018b584ca4e4caaf837/x11docker) - 2018-01-13\n### Fixed\n - `--xpra`: reconnect to server after timeout (60s) if switching to console.\n\n## [3.9.1.4](https://github.com/mviereck/x11docker/blob/7a4c0093bb643a3de00ab81f177b24597cc60a64/x11docker) - 2018-01-12\n### Changed\n - `--help`: some `usage()` updates.\n - `--xorg`: create virtual framebuffer if no monitor is connected (headless server setup).\n - `--xpra`: note that 2.1.x series is more stable than 2.2.x series.\n - create `$Cacherootfolder/Xenv.latest` with latest X environment variables for easier custom access.\n - `--verbose --systemd`: hide error messages: `Failed to add fd to store | Failed to set invocation ID | Failed to reset devices.list`\n - `--systemd`: set global environment variable `XAUTHORITY`.\n\n## [3.9.1.3](https://github.com/mviereck/x11docker/blob/4c82febbcf6d7a568bbb117c93047c3dd666fc9d/x11docker) - 2018-01-04\n### Changed\n - `--dbus-daemon`: set `xhost +SI:localuser:$USER`, needed for deepin.\n - `--pulseaudio`: faster startup of pulseaudio, no sleep 1.\n - create fake home directory and softlinks to sharedirs in CMD.sh, base is `/fakehome` now.\n - extension `XTEST`: more restrictive defaults.\n### Fixed\n - pull terminal did not appear if running from terminal.\n - `--systemd`: global `XAUTHORITY` setting was wrong, removed at all.\n\n## [3.9.1.2](https://github.com/mviereck/x11docker/blob/a88992416fedc2c0b3f57def7ecd8f8e00e78bff/x11docker) - 2017-12-28\n### Changed\n - `--sudouser`: root gets password `x11docker`, too. Allows `su` now.\n - cut image command at `#` to allow comments in x11docker-gui examples.\n### Fixed\n - check environment variables in image and set them in `x11docker.CMD.sh`. Allows `PATH` of `x11docker/trinity` again.\n - parsing host `XAUTHORITY` if running from `gksu`.\n\n## [3.9.1.1](https://github.com/mviereck/x11docker/blob/31f36368883ee456f4fa48c5edf0fa062b030a51/x11docker) - 2017-12-28\n### Fixed\n - `--systemd`: directly share X socket as systemd can have issues with soft links\n\n## [3.9.1](https://github.com/mviereck/x11docker/blob/038bf252c699b438011260ec0dc61d4192f4b5e4/x11docker) - 2017-12-25\n### Changed\n - run in detached mode, drop mess of nohup/setsid/script\n - `--dbusdaemon`: dropped consolekit, not really useful\n - `--dbusdaemon`: switch only for  `--tini`/`--none`. Always run daemon for `--systemd` `--openrc` `--runit`\n - `--systemd`: create `/sys/fs/cgroup/systemd` if missing on host\n - `containersetup.sh` collects most former `docker exec` commands from `dockerrc`\n### Deprecated\n - `--sys-admin`: thanks to `--tmpfs=/run/lock` _(Note: reintroduced in v3.9.4.0)_ \n\n## [3.9.0.5](https://github.com/mviereck/x11docker/blob/a264d9b778c0c9dcf76dc5be1e2f362c120acf4f/x11docker) - 2017-12-21\n### Changed\n - add capability `DAC_OVERRIDE` if user switching is allowed -> needed to change `/etc/sudoers` if ro.\n - `--systemd`: adding `--tmpfs=/run/lock` allows to drop `--sys-admin` !\n### Fixed\n - only create `XDG_RUNTIME_DIR` if not already existing.\n\n## [3.9.0.4](https://github.com/mviereck/x11docker/blob/c1b307a7f3981cf0b63aebfd2672baa319afa0ab/x11docker) - 2017-12-20\n - changes to satisfy `lirios/unstable`:\n - add docker run `-ti`\n - run docker command with `script -c` to provide fake tty\n - changed `/tmp/fakehome` to `/home/fakehome`\n - use `--workdir=/tmp`, avoids issues with `WORKDIR` in image\n### Fixed\n - `--dbus`: check for `dbus-launch` in `x11docker.CMD.sh`, not in `dockerrc` on host\n\n## [3.9.0.3](https://github.com/mviereck/x11docker/blob/0b48a998d8f6c53636b3197899e0bacb002227c8/x11docker) - 2017-12-17\n### Changed\n - switched back to `/tmp/fakehome` to avoid `CHOWN` and issues with `--sharedir`.\n - drop `--cap-add CHOWN`.\n - `--sharedir`: without `--home[dir]`, create softlinks to `/tmp/fakehome`.\n - `--home`: avoid conflict with `--sharedir=$HOME`, mount as `$HOME/$(basename $HOME)`.\n - only `chown $Benutzerhome` if `--home[dir]` is not used. Change non-writeable error in warning only.\n - `--hostdisplay`: warning if host has no own cookie.\n### Fixed\n - avoid grey edge with Xwayland, `Xaxis` must be dividable by 8.\n - `--sudouser` failed to start\n\n## [3.9.0.2](https://github.com/mviereck/x11docker/blob/55923adf38ae3a5bb13373419e8e7473ab4e88eb/x11docker) - 2017-12-16\n### Changed\n - `/etc/sudoers[.d/]`: replace completely to avoid possible evil image setups.\n - `--cap-add CHOWN` as default to allow `/home/$Benutzer` with `--sharedir`\n\n## [3.9.0.1](https://github.com/mviereck/x11docker/blob/f95bdb31a51255c8fb8515d6d2d03542383a7301/x11docker) - 2017-12-16\n### Changed\n - use `/home/$Benutzer` instead of `/tmp/fakehome`.\n### Fixed\n - `--systemd`: do not set environment variable `HOME` globally, root may write into it.\n\n## [3.9.0](https://github.com/mviereck/x11docker/blob/f4459cac35165c9e2dec964204505f440c9ea297/x11docker) - 2017-12-15\n### Added\n - `--dbusdaemon` to run dbus system daemon and consolekit in container.\n - `--openrc` for init system OpenRC in container.\n - `--sharecgroup` to share `/sys/fs/cgroup`. Default for `--systemd`, possible use cases for `--openrc`.\n### Changed\n - `/etc/shadow`: disable possible root password.\n - re-checked capabilities for init systems.\n - `--systemd`: set environment globally, especially `DISPLAY` for `x11docker/deepin` is needed.\n - `--systemd`: set `xhost+SI:localuser:$Benutzer` as `XAUTHORITY` seems to be ignored.\n - `/tmp/.ICE-unix` created in dockerrc, root owned with `1777`, needed for `SESSION_MANAGER`.\n - `--xorg`: change Xorg to X. X is setuid wrapper for Xorg on Ubuntu 14.04.\n - `--xorg`: +iglx removed from X options, not present in older versions of X, and maybe security issue.\n - create user in dockerrc with `docker exec` instead of using createuser.sh.\n - show image name and display in weston window title.\n### Deprecated \n - `--rw`, root file system is always r/w now due to `docker exec` in dockerrc.\n### Fixed\n - Ubuntu: avoid Wayland backend for Weston due to MIR issue. [#19](https://github.com/mviereck/x11docker/issues/19)\n - create `/var/lib/dbus` in dockerrc to avoid dbus errors with init systems.\n - `--runit`: add `SYS_BOOT` even with `--cap-default`.\n\n## [3.8.0](https://github.com/mviereck/x11docker/blob/a9e15fc63b6ffbdad2ff0db35bdea1a5b26df336/x11docker) - 2017-12-04\n### Added\n - `--systemd` to run systemd as PID 1 in container and run image command as a service.\n - `--runit` for init system runit.\n - `--init` for init system tini (default now, docker run option `--init`).\n - `--no-init` to run image command as PID 1 (has been default before x11docker 3.8).\n - `--sys-admin` for `--cap-add=SYS_ADMIN`. Needed for systemd in debian based images.\n - `--wayland` to auto-setup Wayland environment.\n### Changed\n - run init system `tini` as default with `docker run --init`.\n - `-W` is now `--wayland` instead of `--weston`, `-T` for `--weston` now.\n - container user password: `x11docker` (creating volume `/etc/shadow`).\n - `--sudouser`: create user with docker run options instead of createuser script.\n - `--sudouser`: create `/etc/sudoers.d/$Benutzer` with docker exec in dockerrc.\n - `--sudouser`: create `/etc/sudoers.d/$Benutzer` instead of adding groups `wheel` and `sudo`.\n - createuser.sh: check for `useradd`, if missing use `adduser` (fits fedora and alpine/busybox as well).\n - $Sharefolder/stdout+sterr: `chmod 666` to allow access with `--user`.\n - `--exe` and `--xonly`: regard `--home` and `--homedir`, `--user` and `--hostuser`.\n - check pids before calling `mywatch()`.\n - colored logfile output.\n - `--verbose`: green colored output for logfile titles and verbose() lines.\n - set env `DISPLAY` `XAUTHORITY` and `WAYLAND_DISPLAY` in x11docker.CMD.sh as systemd eats them otherwise.\n - use docker run option `--tmpfs` for `/tmp`, `/var/tmp` and `/run` instead of `--volume=/tmp`.\n - changed container share folder `/tmp/x11docker` to `/x11docker` to avoid issues with `--tmpfs /tmp`.\n### Fixed\n - in createuser.sh: `adduser` failed with fedora based images, use `useradd` and `usermod` instead.\n - `--pw=gksu`: avoid wrong docker startup error message, use nohup in dockerrc.\n - `--hostdisplay` with `--gpu` needs trusted cookies.\n - `--xpra` with `--hostuser`: create `/run/user/$Hostuseruid` if missing.\n\n## [3.7.2](https://github.com/mviereck/x11docker/blob/e062b07b91b87a1b9b26d10e41d0d7dd1c3b6299/x11docker) - 2017-11-11\n### Changes\n - allow `rw` with `--volume=/var/tmp`, needed for `x11docker/trinity`.\n - `--nxagent`: removed `xhost` startup workaround.\n - $Hostxenv: removed custom environment.\n - `--nxagent`: shift+F11 toggles fullscreen.\n - `--nxagent` on Mageia: only show warning about seamless mode instead of disabling it.\n### Fixed\n - `su` on console needs `exec </dev/tty` to have a tty environment.\n\n## [3.7.1](https://github.com/mviereck/x11docker/blob/d3c841246548e9667909cc25ffad5396b0ebfde2/x11docker) - 2017-11-03\n### Changed\n - read host cookie with xauth if XAUTHORITY is empty, can happen with xdm.\n - `--nxagent` on Mageia: no seamless mode.\n - replaced while/sleep loops with `watch`.\n - `alertbox()`: regard `DISPLAY`, use `$Anyterminal` otherwise to support Wayland.\n - `weston.ini`: keyboard config setting on console.\n - fedora: show alert for `--ipc`/`--trusted` due to missing extension security.\n### Fixed\n - fixes for gksudo and lxsudo.\n - Ubuntu 16.04: `--xpra`: must not set `--webcam=no` due to old xpra version.\n - `--weston` and `--kwin` on console, terminal for password prompt failed.\n\n## [3.7.0](https://github.com/mviereck/x11docker/blob/d06c59495775bfbb0bc79dea3ace02dbfb2293c9/x11docker) - 2017-10-30\n### Added\n - `--alsa` for ALSA sound.\n### Changed\n - auto-choose window manager in `--xephyr`/`--xorg`/`--weston-xwayland`/`--kwin-xwayland`/`--xwayland` except `--desktop` is set.\n - new function `alertbox()`, outsourced from `error()`. Additional messagebox tools: yad, kaptain, kdialog, gxmessage, xterm.\n - changed content of variable `Xserver` to X server option names itself.\n - extended terminal list for password prompt/docker pull.\n - `--xhost`: always disabling with `no_xhost()`, afterwards setting `--xhost`.\n### Deprecated\n - `--kwin-native`, too much trouble, but less use.\n### Fixed\n - `--weston`/`--weston-xwayland`: set backend in compositor command, weston's autodetection can fail.\n - `--kwin`/`--kwin-xwayland`: set backend in compositor command, kwin's autodetection can fail.\n - `--kwin-xwayland`: set keyboard layout.\n\n## [3.6.3.9](https://github.com/mviereck/x11docker/blob/1f4353964dba1d01289a5379a1b4d0bf10c666f1/x11docker) - 2017-10-25\n### Changed\n - show error messages regardless of `--silent`\n - change `sudo` to `sudo -E`, needed for OpenSUSE\n - code cleanup, some improved messages\n\n## [3.6.3.8](https://github.com/mviereck/x11docker/blob/2e027c2b9bab8af2244fe65218276f0ad7a84736/x11docker) - 2017-10-25\n### Changed\n - fedora: set `--ipc` and `--trusted` for `--hostdisplay` only\n\n## [3.6.3.7](https://github.com/mviereck/x11docker/blob/6034608f9d49c138d3f58b647257114b9c66052e/x11docker) - 2017-10-25\n### Fixed\n - `--hostdisplay` on fedora: use host cookie, custom cookie is rejected\n\n## [3.6.3.6](https://github.com/mviereck/x11docker/blob/84881c51788eecc754f36288fbb8699c5dbc327f/x11docker) - 2017-10-24\n### Added\n - `--wmlist` to retrieve list of window managers, used by x11docker-gui, not documented in `--help`\n### Changed\n - `--gpu`: improved support in autochoosing mode\n - disabled note of xpra keyboard shortcuts, takes too long\n - hardcoded xpra environment variables, parsing `xpra showconfig` takes too long\n### Fixed\n - `--pw=sudo`: issue with setsid\n\n## [3.6.3.5](https://github.com/mviereck/x11docker/blob/12bb570b2c03157d4062391288f770e520307c0f/x11docker) - 2017-10-24\n### Fixed\n - xpra with host user root: set environment variables\n - `dbus-launch` for `konsole` and `terminator`, needed in dockerrc\n\n## [3.6.3.4](https://github.com/mviereck/x11docker/blob/836d4f50e44cccc587819f002faa8d18e62ecbb3/x11docker) - 2017-10-23\n### Fixed\n - add `/usr/sbin` to `PATH`, needed on mageia for ip\n - `--pw=sudo`: `setsid sudo` fails, must use `sudo setsid`\n\n## [3.6.3.3](https://github.com/mviereck/x11docker/blob/4256438ff948dd97a0887410e866121736a1893b/x11docker) - 2017-10-23\n### Changed\n - removed experimental Code\n### Fixed\n - `--wm` issue as root in xinitrc\n\n## [3.6.3.2](https://github.com/mviereck/x11docker/blob/58ea47a22270ad0a7f81196cb8c69bf300e87dff/x11docker) - 2017-10-23\n### Changed\n - remove debugging `set -x` in xinitrc\n\n## [3.6.3.1](https://github.com/mviereck/x11docker/blob/ed80f32c115066203b88b9681655c30bc2c42f13/x11docker) - 2017-10-23\n### Changed\n - split X server command with \\backslash in multiple lines\n### Fixed\n - don't use `su $USER` in xinitrc\n\n## [3.6.3](https://github.com/mviereck/x11docker/blob/63410b85f617b3449c48212dda9d0e74ec6327bf/x11docker) - 2017-10-20\n### Added\n - `--no-internet`\n### Changed\n - minor adjustments for compatibility with CentOS/RHEL, Arch and Manjaro\n - allow gnome-terminal / self-forking terminals in general\n - split docker command with \\backslash in multiple lines\n\n## [3.6.2.12](https://github.com/mviereck/x11docker/blob/e907bd364ed591fc1087fa64005f4f890345d43f/x11docker) - 2017-10-18\n### Fixed\n - `dbus-launch` disturbed `gksu`\n\n## [3.6.2.11](https://github.com/mviereck/x11docker/blob/a21a9d8cca6483b8c29b50e0a77b348867325e04/x11docker) - 2017-10-18\n### Changed\n - CentOS/RHEL workaround: insist on root or gksu; terminal password prompt causes docker to terminate regardless of nohup\n\n## [3.6.2.10](https://github.com/mviereck/x11docker/blob/18506dee00b987b0acaca9ed84531e3aadb07f8f/x11docker) - 2017-10-17\n### Fixed\n -  Fixes in terminal emulator setup for password prompt and pull question (2)\n\n## [3.6.2.9](https://github.com/mviereck/x11docker/blob/c4fcfac53be978322831fcad4a6b671598faa19f/x11docker) - 2017-10-17\n### Changed\n - xpra: set `--file-transfer=off` (stores files in `Downloads` from host, useless here)\n### Fixed\n - Fixes in terminal emulator setup for password prompt and pull question\n\n## [3.6.2.8](https://github.com/mviereck/x11docker/blob/dc36c1d29958cdf48a8c45ec791220f869026cd1/x11docker) - 2017-10-12\n### Changed\n -  `--xdummy`/`--xpra`: add multiple modelines for virtual display sizes to allow flexible changes of xpra client desktop window\n -  `--xpra`: virtual display size always equal with physical display, create smaller mode in xinitrc -> allow fullscreen\n -  xpra: disable some unused, but possibly leaking features (forwarding of webcam, notifications, printer)\n -  xpra: set xpra specific environment variables in dockerrc\n -  xpra: show keyboard shortcuts\n\n## [3.6.2.7](https://github.com/mviereck/x11docker/blob/51c5dab789c335d87c4d11c5ad91ebe7477766f1/x11docker) - 2017-10-08\n### Changed\n -  `--xephyr`: title for Xephyr windows\n -  `--xephyr`: Xnest as fallback for missing Xephyr\n -  `--xpra` `--desktop` hint: screensize bug fixed since xpra v2.2-r17117\n\n## [3.6.2.6](https://github.com/mviereck/x11docker/blob/4d94c7eb5dc690e8a22135394cb2e9d4dd3ba9ab/x11docker) - 2017-10-07\n### Fixed\n -  `--xpra` `--desktop`: use `start-desktop` instead of `shadow`\n\n## [3.6.2.5](https://github.com/mviereck/x11docker/blob/72e8afc59750310ac621c10c5ddcaf826bc167f2/x11docker) - 2017-10-05\n### Changed\n -  `no_xhost()?` after cookie creation avoids xhost warning on Xwayland\n -  `--output-count` in `--auto` mode: choose `--weston-xwayland`\n -  `--display`: allow `:` before display number\n -  `sh` instead of `bash` to run x11docker_CMD\n\n## [3.6.2.4](https://github.com/mviereck/x11docker/blob/8ab3d12af1c14b437870788b72615eb89d0bfa0a/x11docker) - 2017-09-27\n### Changed\n -  `--starter`: missing `xdg-user-dir` is no longer an error\n -  `--silent`: redirect stderr already while parsing\n -  `--user=root`: disable `--cap-drop=ALL`\n -  `--help`: update usage info\n -  `weston.ini`: background color and zoom-in effect\n -  use Kwin/Kwin-Xwayland as fallback for Weston/Weston-Xwayland\n -  catch closing xpra client in every case, not only in desktop mode\n -  parsing cli options: check for remaining arguments `$#` instead of empty `$1`\n### Fixed\n -  `--xonly`: do not fail if docker daemon is not running\n\n## [3.6.2.3](https://github.com/mviereck/x11docker/blob/a24de4ad106ffa1c2c671a53c3c16582efe1ad14/x11docker) - 2017-09-19\n### Changed\n -  `--xorg`: only run setxkbmap in xinitrc if $Hostdisplay is set\n\n## [3.6.2.2](https://github.com/mviereck/x11docker/blob/e137d771026424dcf4d0bbfc83bfec94195448c5/x11docker) - 2017-09-18\n### Changed\n -  `--xpra` `--scale` in desktop mode: regard different `--dpi` behaviour since xpra v2.2\n -  `--help`: update usage info\n -  `setxkbmap` for Xorg like for Xephyr, too\n -  `weston.ini`: added `panel-position=none`, different syntax for different weston versions (seen in Arch Linux).\n -  x11docker_CMD: replace shell with `exec $Imagecommand` (only if stdin is empty)\n\n## [3.6.2.1](https://github.com/mviereck/x11docker/blob/3bffa70a029722a3aeeb6137720f0270bd359e3d/x11docker) - 2017-09-15\n### Changed\n -  removed `z` flag in docker command, not needed with current SELinux solution\n -  `--weston[-xwayland]`: no output section on tty without `--scale`, `--size` or `--rotate`\n -  `--weston[-xwayland]`: allow `--size` on tty, though only \"real\" resolutions will take effect\n -  `--xorg`: `--scale`, `--size`: change primary monitor only, will do better on multi monitor setup\n -  `--xdummy --gpu` now possible on tty, too\n### Fixed\n -  `--home`: avoid creating `$Adduserhomefolder` with wrong restrictions if `$Hostuser` is different from `$Benutzer`\n -  Fixes in part: check screensize\n -  watch for closing xpra client in desktop mode to avoid invisible remaining x11docker\n -  `--xorg` on tty: do not set screen size without `--size`.\n\n## [3.6.2](https://github.com/mviereck/x11docker/blob/d223b1b97d3c98b6dcf4769152122ee5e2e9dbc8/x11docker) - 2017-10-10\n### Added\n - `--xfishtank` to run `xfishtank` on new X server. Shows a fish tank.\n### Changed\n -  `--westonini`: regard for `--xpra-xwayland` and `--xdummy-xwayland`, too.\n -  `PATH`: adding `/usr/games:/usr/local/bin`. Can miss for root, but may be needed for `--exe` and `--xfishtank`\n -  check for X extension `Security` with xdpyinfo\n -  `--clipboard` for `--hostdisplay`: enable `--trusted` and `--ipc`, show warning.\n -  xpra startup after xinitrc, not inside. For better error handling\n -  removed ps loop in dockerrc, not needed anymore due to \"docker run\" in subshell\n -  `waitforlogentry()`: Just return 0 or 1 instead of calling `error()`\n -  changed logfile handling, move log from `/tmp` to $Sharefolder after `tail -F`\n### Fixed\n -  `--sharedir`, `--homedir`: allow whitespaces in path\n -  `--cachedir`: path must not contain whitespaces -> error()\n -  `--westonini`: allow whitespaces in path\n -  `--pulseaudio`: remove tcp module, store id in file to not loose it in subshell\n -  `--exe`: support of `--stdout` and `--stderr`\n -  `error()`/`finish()`: reliable error code before cache folder creation\n -  weston on tty: clean logfile & pidfile to allow second weston instance\n\n## [3.6.1.11](https://github.com/mviereck/x11docker/blob/27861a05fb0fd28f51a8358ae37ab877913aa146/x11docker) - 2017-08-28\n### Changed\n -  clean check for stdin, no more workaround\n\n## [3.6.1.10](https://github.com/mviereck/x11docker/blob/cbb904ef2b2c94ccda76aec9f6a59b68dcb854c2/x11docker) - 2017-08-27\n### Changed\n -  `--nothing`: no check for successful startup, avoids error message for short-timed cli commands\n -  `--showenv`: wait with output until X is ready and accessible\n\n## [3.6.1.9](https://github.com/mviereck/x11docker/blob/d50ecb314b5d96110b59796493bc983a46a5c780/x11docker) - 2017-08-25\n### Fixed\n - `--home`: remove debugging error message\n\n## [3.6.1.8](https://github.com/mviereck/x11docker/blob/e3a49cbe95522a79128e9af8feede4b04074a96b/x11docker) - 2017-08-25\n### Changed\n - provide stdin to host exe, too (`--exe`)\n - `--silent`: suppress error dialog box, too\n - more reliable exit code 1 on error\n### Fixed\n - `--orphaned`: did not find cache folder\n - `--hostuser`: cache folder created with root ownership\n\n## [3.6.1.7](https://github.com/mviereck/x11docker/blob/427a937a53c81b3bf98621aeb668048d4a8e913a/x11docker) - 2017-08-22\n### Changed\n - removed color from `verbose()`, looks strange in logfile\n### Fixed\n - installer: check for installed unzip\n\n## [3.6.1.6](https://github.com/mviereck/x11docker/blob/699392d7579e3962d099cf495dc254fde4e9bf97/x11docker) - 2017-08-22\n### Changed\n - code cleanup\n - changed window manager priority\n - SELinux: `--security-opt label=type:container_runtime_t` allows access to X unix socket\n - `--xorg`: avoid searching for native resolution if `--scale` is set.\n - `--xorg`: improved check for failed panning\n - Logfile created in `/tmp`, moved later to $Cacherootfolder, to catch early messages\n - code cleanup in variable definitions and option parsing\n### Fixed\n - `trap -EXIT` avoids double call of `finish()`. faster shutdown now.\n\n## [3.6.1.5](https://github.com/mviereck/x11docker/blob/34ac2a9bdc63b2d2bcaebc06bed3e3bdcc92845c/x11docker) - 2017-08-21\n### Changed\n - `mkdir -p` in installer for tmp folder: `-p` was missing, could cause error\n - declare `note()` in xinitrc\n - `--scale` support for `--xorg`\n - `--size` without `--scale` for `--xorg`: first try `--mode`, than `--panning`\n### Fixed\n - broken stdin pipe if running as root\n\n## [3.6.1.4](https://github.com/mviereck/x11docker/blob/de1b34d32b5a08b269ebab5c7695d17f59eb16b7/x11docker) - 2017-08-19\n### Changed\n - `beesu`: new frontend for `--pw` available on fedora\n - do not test for passwordless docker if `--pw` is set\n - create non-existing shared home folder for user different from host user if running as root\n - more verbose cache folder names, now with image name and X server in use\n### Fixed\n - wrong file descriptor for messages before part init()\n - passwordless `sudo -n` on fedora did not work with x11docker-gui started from menu instead of cli, without `-n` is ok\n\n## [3.6.1.3](https://github.com/mviereck/x11docker/blob/17dd6a39f5256be816cd22327a34f70e1845cf07/x11docker) - 2017-08-17\n### Fixed\n - installer: did not find icon at new location\n\n## [3.6.1.2](https://github.com/mviereck/x11docker/blob/53839badad3e440057cd5a2ef122b38616b50a95/x11docker) - 2017-08-15\n### Changed\n - no `|tee` to $Xtermlogfile on `docker pull`: better interactive output\n### Deprecated\n - `--resizeable`: Xephyr can crash if resized.\n\n## [3.6.1.1](https://github.com/mviereck/x11docker/blob/133c26e737ac7936b894c30e01ee8f454374db97/x11docker) -2017-08-16\n### Fixed\n - timeout 3600 for xauth cookie creation. Needed to avoid cookie timeout on `docker pull`\n\n## [3.6.1](https://github.com/mviereck/x11docker/blob/cf56d6b5039c634934644051c6b75ea5218060ac/x11docker) - 2017-08-15\n### Added\n - `--stdout`: show stdout of image command on stdout\n - `--stderr`: show stderr of image command on stderr\n - forward stdin of x11docker to image command\n - `--silent`: suppress all x11docker terminal messages\n### Changed\n - x11docker-gui trys to use image `x11docker/kaptain` if `kaptain` is not installed\n\n## [3.6.0.5](https://github.com/mviereck/x11docker/blob/1f309fa8970b972b58eaa22d03c43c958bc7d783/x11docker) - 2017-08-14\n### Changed\n - `note()` instead of `warning()` for less urgent messages\n### Fixed\n - opensuse: cookie creation failed due to different xauth behaviour\n - sudo: do not prompt for password for `docker stop` in `finish()`, rather fail stopping\n\n## [3.6.0.4](https://github.com/mviereck/x11docker/blob/ae2e6ec386c43d724c635484bdc3b005ed42fcdf/x11docker) - 2017-08-14\n### Fixed\n - do not complain about missing docker daemon on `--xonly`\n\n## [3.6.0.3](https://github.com/mviereck/x11docker/blob/50b48ea0088c9f1742af0b4d97cac1e26db54699/x11docker) - 2017-08-13\n### Changed\n - xpra dpi warning only if `--dpi` or `--scale` is set\n - cookie failure warning for untrusted cookies only\n### Fixed\n - installer: remove older installations in `/usr/local/bin`\n\n## [3.6.0.2](https://github.com/mviereck/x11docker/blob/0f2c38b69a0645f3c7df1ccae0e02389a5199631/x11docker) - 2017-08-13\n### Changed\n - check for running docker daemon with $Dockerdaemon instead of ifconfig\n - do not disable SELinux if `--ipc` is set\n### Fixed\n - fedora: `--xorg`: add `-keeptty` if running from tty\n - issue prevented `--xorg` from console if running in subshell\n - `finish()`: check for still running container with ps, too. formerly root only could detect it\n\n## [3.6.0.1](https://github.com/mviereck/x11docker/blob/01baffa250c048988f64beeb4ddf05660a766639/x11docker) - 2017-08-12\n### Fixed\n - `--gpu`: `:rw,z` does not work for `--device`\n\n## [3.6.0](https://github.com/mviereck/x11docker/blob/d580a477617fb7d32da263a5408a82c01756fef1/x11docker) - 2017-08-12\n### Added\n - `--rw` to allow read/write access to container root file system\n - `--pw` to choose password prompt frontend. default: `pkexec`\n - `--no-entrypoint` to disable ENTRYPOINT in image\n - `--hostuser` to set host user different from  $(logname)\n - `--desktop`: no longer deprecated, easier to understand and remember than `--wm=none`\n### Changed\n - `-d`: used for `--desktop` again, no longer for `--dbus`. `--dbus` now has short opt `-b`\n - workaround: disabling SELinux for container until solution for sharing unix socket is found.\n   Compare: http://www.projectatomic.io/blog/2015/06/using-volumes-with-docker-can-cause-problems-with-selinux/\n - install to `/usr/bin` instead of `/usr/local/bin` to support root\n - `chmod 755` instead of `+x` in installation\n - check if docker is installed\n - check if docker daemon is running (with ifconfig)\n - use zenity or notify-send if xmessage is not available in error()\n - replaced sed in xauth cookie creation, sed fails in openSUSE (!?)\n - check for xpra `--dpi` bug in 2.1 series\n - xpra `--start-via-proxy=no` for xpra >= 2.1\n - `--nxagent`: temporary `xhost +SI:localuser:$Hostuser` workaround as it fails again to authenticate, nxagent does not divide between `XAUTHORITY` and `--auth`\n - reduce dependency warnings for `--auto`\n - prefer $Hostenv instead of $Newxenv for password prompt -> better support for gksu\n - show `docker pull` output in a terminal window\n - allow `--hostdisplay` with `--xonly`. May at least be useful to create an untrusted cookie.\n - outsourced docker startup from xinitrc\n - copy host cookie into $Cachefolder for compatibility with gksu\n - use gksu/gksudo if available\n - `--showenv` for `--xonly`\n - `finish()`: try `docker stop $Containername`\n - dockerrc: no ps/sleep loop if running as root\n - don't start docker in xinitrc as xinit runs unprivileged\n - `--ps` keeps cache files, too (formerly container only)\n - improved X server check due to new variable $Desktopmode\n - `--fullscreen`. Set fullscreen screen size for windowed options (xpra),too\n - allow root to start x11docker, use `$(logname)` for X server and as container user\n### Deprecated\n - `--root`: Can be achieved with `--hostuser=root`\n - `--no-password`: check if docker can run without password makes `--no-password` needless. Still possible with `--pw none`\n### Fixed\n - `&, &&, ;, <, >, |` and the like possible in image command again\n - bugfixes in part \"check window manager\"\n - repeating error message if `waitforlogentry()` failed\n - cookie creation failed on X without extension Security. (fedora)\n\n## [3.5.11](https://github.com/mviereck/x11docker/blob/27f52c9edb28518568e8f6881a1300ca4aea4f2b/x11docker) - 2017-07-12\n### Changed\n - pull image if not available before calling `docker run`\n\n## [3.5.10](https://github.com/mviereck/x11docker/blob/dbd85cfc9f26948ddf8e27075923ff673dc5a89b/x11docker) - 2017-07-12\n### Fixed\n - regard `ENTRYPOINT` in dockerrc\n\n## [3.5.9](https://github.com/mviereck/x11docker/blob/623c20b427b50fc16c127c760688cfbb556c0b8b/x11docker) - 2017-07-09\n### Changed\n - `--home` with `--user=(unknown)`: only show warning (instead of error) not creating persistent home\n - do not set write permissions on `--home` or `--homedir` folder for different users than `$USER` or `--user`. (Not x11docker's job)\n - do not set `--read-only` if `--user=0`\n### Fixed\n - chown x11docker_CMD to host user to avoid permission issues in $Sharefolder\n - `--user`: use matching gid, gid was set to same as uid\n\n## [3.5.8](https://github.com/mviereck/x11docker/blob/fc88928119202eef80d6e3eba788fcd367dbc629/x11docker) - 2017-06-07\n### Added\n - `--xhost STR`: to set `xhost STR` in xinitrc. \n - `--xvfb` to explicitly use Xvfb and to clearly use Xdummy on `--xdummy`\n### Changed\n - `--kwin-native`: always share Wayland (`--sharewayland` `--waylandenv` `--dbus`)\n - docker run `--read-only --volume=/tmp` to restrict container filesystem as read-only (except for `--sudouser`)\n - `--xorg` supports `--rotate`. (Xephyr could, but crashes -> Xephyr bug. Nxagent, Xdummy, Xvfb and Xwayland refuse this.)\n - Xdummy script in $Cachefolder forked from https://xpra.org/trac/browser/xpra/trunk/src/scripts/xpra_Xdummy\n - calculate VideoRam in xorg.xdummy.conf (instead of fat hardcoded 256000 kb)\n### Deprecated\n - `--xhost+`: use `--xhost STR` instead.\n### Fixed\n - `--nxagent`: due to update? must set nxagent -ac (=xhost +) temporary to allow xinit\n - allow `--wm` for `--kwin-xwayland`\n\n## [3.5.7](https://github.com/mviereck/x11docker/blob/6d8a4cd471f31e7053a10390ab2ca3f90ae80239/x11docker) - 2017-06-28\n### Changed\n - usage info for HTML5 web application setup\n - redirect verbose output to &3 to show it in subshells, too, and to avoid possible collision with read < <()\n - `--env`: set custom environment variables in dockerrc instead of in docker run\n - removed `unix` in $Newxenv for DISPLAY to make xpra ssh setup easier\n - Xdummy-Xwayland: new X server to provide `--gpu` for `--xdummy` based on weston, xwayland and xdotool\n - always enable extension Xtest on `--xdummy` to allow xpra access\n - share X socket to /tmp, create .X11-unix in dockerrc and softlink socket. This avoids writeable X11-unix in $Cachedir.\n - `--setwaylandenv`: env now set in dockerrc instead of docker command\n\n## [3.5.6](https://github.com/mviereck/x11docker/blob/1f6496421f958d5ebf4fcf9abbe6e5d51d19f212/x11docker) - 2017-06-21\n### Added\n - `--sudouser`: reincarnated option to give sudo without password to container user.\n### Changed\n - docker command one-liner extended to dockerrc. dockerrc creates x11docker_CMD. Can always extract image command without additional password prompt and create some environment.\n - create `/tmp/XDG_RUNTIME_DIR` and softlink to wayland socket in container due to some KDE issues (`XDG_RUNTIME_DIR` must be owned by user). Fails with different `--user`\n - create `/tmp/.X11-unix` with 1777 in container to allow new X sockets (especially for startplasmacompositor). Drawback: container writeable folder in cache\n - warning with hint to use `--xpra-xwayland` if `--scale` is used with `--weston-xwayland`.\n - shorter sleep in finish()\n - don't search for deprecated `/tmp/x11docker` in checkorphaned()\n### Fixed\n - avoid pointless warning about `XTEST` if not using xpra\n - typo preventing start of `--kwin` and `--kwin-native` (`-width` instead of `--width`)\n - bugfix parsing option `--wm`\n - `export $Hostxenv` in error() was empty if called in xtermrc\n\n## [3.5.5.2](https://github.com/mviereck/x11docker/blob/547aea540aed165fc22def77724caccbd6424c63/x11docker) - 2017-06-10\n### Changed\n - update usage info for `--xpra` and `--xpra-xwayland`\n\n## [3.5.5.1](https://github.com/mviereck/x11docker/blob/1867023c5913a09ed63f98c3d28e9b19f1b332b2/x11docker) - 2017-06-10\n### Fixed\n - bugfix in `--auto` always choosing `--xorg`\n\n## [3.5.5](https://github.com/mviereck/x11docker/blob/e6021187f59caef2a49b36e02417ec79591c7f1d/x11docker) - 2017-06-09\n### Changed\n - autochoose xpra-desktop if xephyr is missing\n - improved part: check virtual screen size\n - changed dpi calculation depending on xpra mode\n - desktop mode for xpra if `--wm` is given\n - always set `XDG_RUNTIME_DIR=/tmp` as some apps may expect it\n\n## [3.5.4](https://github.com/mviereck/x11docker/blob/c09d6f3022ddf2c0ab6862e0f3db6ab6e9fa9c53/x11docker) - 2017-06-02\n### Changed\n - disable extension `XTEST` if using wm from host (to avoid abuse of context menu of openbox and the like)\n### Fixed\n - set rw access for `/dev/dri` ([#12](https://github.com/mviereck/x11docker/issues/12))\n\n## [3.5.3](https://github.com/mviereck/x11docker/blob/870a63b67480caedb7645011666a325dbdbb8ce7/x11docker) - 2017-05-29\n### Added\n - `--sharedir` replaces `--volume` to avoid confusion\n### Changed\n - update `usage()`\n - mount $Sharefolder and its content read-only\n - remove X11-unix from $Sharefolder\n - set read-only for `/dev/dri` on `--gpu`\n - `--security-opt=no-new-privileges` added to docker run\n### Deprecated\n - `--volume` is now called `--sharedir` due to different syntax than docker option `--volume`\n### Fixed\n - `--pulseaudio`: get and use IP of container instead of docker0 IP range ([#11](https://github.com/mviereck/x11docker/issues/11)), disabling TCP module on exit\n\n## [3.5.2](https://github.com/mviereck/x11docker/blob/d88d32605ece42324f14cf41e54482888ae539c4/x11docker) - 2017-05-22\n### Added\n - `--volume` to share host folders\n\n## [3.5.1](https://github.com/mviereck/x11docker/blob/4f1e4d14a904d499445fd479efb37b3c7cd46451/x11docker) - 2017-05-19\n### Changed\n - user creation with `--addgroup video` to support non-systemd and kde-neon gpu support\n - create `/tmp/.X11-unix` with `1777`\n\n## [3.5.0](https://github.com/mviereck/x11docker/blob/2f354525b3443250c3fe4c18ebfe4a3fc57f5ca0/x11docker) - 2017-05-17\n### Added\n - `--output-count` to set amount if virtual screens/desktop windows for Weston, Kwin, Xephyr\n - `--westonini` to specify a custom weston.ini for `--weston` and `--weston-xwayland`\n - `--cachedir`:  specify custom cache folder\n - `--homedir`: specify host folder to share as home\n - `--trusted`: enforce trusted cookies for `--hostdisplay` and `--kwin-native`\n - `--user` to set user to use (name or uid, non-existing uids possible. default: host user)\n - `--cap-default`: Allow docker default capabilities\n### Changed\n - avoid Terminal window with `--no-password`\n - `--orphaned` cleans /tmp/x11docker\n - `--env`: regard whitespaces, use \\n to divide entrys\n - set `mode=preferred` for Weston on tty, ignore $Screensize\n - extension `XINERAMA` disabled as multiple Xephyr outputs cannot handle it well\n - create container home folder `/tmp/fakehome` in x11docker_CMD (avoids ownership problems with wine, and is less messy in /tmp)\n - more failure checks in `installer()`\n - check for `--userns-remap`, disabling it with `--userns=host` if `--home` or `--homedir` are set\n - minor exploit check for DISPLAY XAUTHORITY XDG_RUNTIME_DIR WAYLAND_DISPLAY HOME\n - automatically choose trusted or untrusted cookies\n - show docker log in xtermrc if pulling image\n - `docker run `--cap-drop=`ALL` as default\n - reduce `/etc/passwd` and `/etc/group` to container user and groups user and videp only (except root, keeps whole files).\n - creating container user similar to host user with docker run option `--user` and custom /etc/passwd instead of script createuser.\n - `--gpu`: only share `--device=/dev/dri` instead of listing all files in it\n### Deprecated\n - `--cache`\n### Removed\n - `--hostuser`: effect of `--hostuser` is default now\n - `--sudouser`: not possible anymore due to `--cap-drop=ALL`\n### Fixed\n - `-s KILL` for weston on finish() avoids zombie weston window\n\n## [3.2.1](https://github.com/mviereck/x11docker/blob/7600e599e757398d2e7ca3f53d4567f9286e31bb/x11docker) - 2017-05-05\n### Fixed\n - `--scale` with `--xpra-xwayland` under X without Wayland failed\n\n## [3.2.0](https://github.com/mviereck/x11docker/blob/32a9b75e0a7e6511b85dd2e01353adc77b76bfb9/x11docker) - 2017-05-04\n### Added\n - `--scale`: for xpra and weston\n - `--rotate` for weston\n - `--dpi` for screen density\n### Changed\n - allow MIT-SHM for `--exe`\n### Fixed\n - checking screensize in Gnome-Wayland failed looking for primary display, window was not roughly maximized\n - missing `error()` in xinitrc\n\n## [3.1.16](https://github.com/mviereck/x11docker/blob/bab08db10c8b4d360c58ec7c7bb42a6fa6567b69/x11docker) - 2017-05-03\n### Fixed\n - bugfix for `--xpra-wayland` in check for `WAYLAND_DISPLAY`\n\n## [3.1.15](https://github.com/mviereck/x11docker/blob/58536075aec99859ad212f7377724a5b60cb3dd6/x11docker) - 2017-05-02\n### Changed\n - faster startup for `--xpra-xwayland`, `--weston-xwayland`, `--kwin` and `--kwin-xwayland`\n - code cleanup\n### Fixed\n - bugfix in choosing terminal, replace $Waylandterminal with $Terminal in re-check\n - bugfix xtermrc and xinitrc: check if $Dockerpidfile is not empty\n\n## [3.1.14](https://github.com/mviereck/x11docker/blob/af37faddec2642e44a0c586ac9c84694c9989fad/x11docker) - 2017-05-01\n### Changed\n - checkorphaned() uses container names instead of numbers\n### Fixed\n - `--exe`: reliable kill $Hostexe, even with `--weston`* and `--kwin`*\n - remove `:` and `/` from image name in $Containername\n\n## [3.1.13](https://github.com/mviereck/x11docker/blob/e8e428edbb259d1d317a52fb43ee7be25e5b2cf7/x11docker) - 2017-04-30\n### Changed\n - Improved multimonitor support (still missing: multihead)\n - removed $Cidfile at all, cleanup hint in finish() with $Containername\n### Fixed\n - redirection of stderr without cat, avoids broken pipe on ctrl-c in ubuntu and opensuse\n - removed custom socket in xpra (failed in opensuse)\n - avoid root ownership for $Dockerlogfile and $Dockerpidfile\n\n## [3.1.12](https://github.com/mviereck/x11docker/blob/06fc8fc7f4bf2945692c8b38476e76b760bd8877/x11docker) - 2017-04-29\n### Changed\n - clean up confusion with x11docker.log\n - don't share $Xclientcookie as $Sharefolder is already shared\n - don't use $Cacherootfolder for parsererror\n - hint to use `--sudo` on some systems\n - use `id -g` instead of $Benutzer for group name\n - add `lsb-release -ds` to verbose output\n### Fixed\n - include `warning()` in xinitrc\n - bugfix in xinitrc for `--no-xhost`\n\n## [3.1.11](https://github.com/mviereck/x11docker/blob/0248fd878cdb1b1cacd42758f883ea4dc75d0c27/x11docker) - 2017-04-29\n### Changed\n - disabled $Cidfile as not important and due to [#10](https://github.com/mviereck/x11docker/issues/10)\n\n## [3.1.10](https://github.com/mviereck/x11docker/blob/969494282073ef5098820325472ac02872c7c5f6/x11docker) - 2017-04-28\n### Fixed\n - check for xenial instead of 16.04/xvfb\n - set XPRA_XSHM=0 on Shareipc=no\n - disable `--desktop-scaling` in xpra, not supported before xpra v1.x\n\n## [3.1.9](https://github.com/mviereck/x11docker/blob/c1eb6a60fab62bc7a10cb97020e36bf9bdb8a8ed/x11docker) - 2017-04-27\n### Changed\n - don't create Cacherootfolder in variable definitions\n - check for Xvfb on Ubuntu 16.04\n\n## [3.1.8](https://github.com/mviereck/x11docker/blob/3f4a54c01d340293a8c831b0a0757c2a97326aa2/x11docker) - 2017-04-25\n### Changed\n - Add advice for `--xorg` how to setup xserver-xorg-legacy\n\n## [3.1.7](https://github.com/mviereck/x11docker/blob/85bb3e72ae449b2057f93390a2bbfdb86a89286a/x11docker) - 2017-04-25\n### Changed\n - `--xpra` and `--xdummy` now use Xvfb if installed. Compare #9, Xdummy cannot be used on Ubuntu 16.04 due to xorg.conf location\n - set $Windowmanager in auto choosing X server if switching to desktop windows\n\n## [3.1.6](https://github.com/mviereck/x11docker/blob/2623286e141ddb4aec6a7b5162cafbb19b5c6e6c/x11docker) - 2017-04-21\n### Fixed\n - `--nxagent`: don't close nxagent on every call of nxclient (2)\n\n## [3.1.5](https://github.com/mviereck/x11docker/blob/a13bd270d1146ad6fedcfbb1c2ccf1583531e0d5/x11docker) - 2017-04-20\n### Fixed\n - `--nxagent`: don't close nxagent on every call of nxclient\n\n## [3.1.4](https://github.com/mviereck/x11docker/blob/b2641dbd874e8df51762a31c6a6d2e5344bd9efa/x11docker) - 2017-04-19\n### Changed\n - `--nxagent` supports untrusted cookies\n### Fixed\n - don't set dpi if xdpyinfo fails\n\n## [3.1.3](https://github.com/mviereck/x11docker/blob/06e021a0dae63eef02661420942b8430f7dcca42/x11docker) - 2017-04-18\n### Changed\n - `--nxagent` cookie workaround as it ignores XAUTHORITY on option -auth\n - `--nxagent` workaround to terminate on pressing window close button -> fake nxclient\n### Fixed\n - typo in finish() looking for docker pid\n\n## [3.1.2](https://github.com/mviereck/x11docker/blob/289017045514d966a5f378b4649fbd2606a03c9a/x11docker) - 2017-04-18\n### Changed\n - `--nxagent` sets right keyboard layout, thanks to Ulrich!\n\n## [3.1.1](https://github.com/mviereck/x11docker/blob/dbb3c60d525c372906e5f75fb464f8cd0f466a87/x11docker) - 2017-04-18\n### Changed\n - `--nxagent` now supports `--size`, `--fullscreen` and `--clipboard`, thanks to Ulrich Sibiller from Arctica!\n - check dpi from host and set this to new X server\n - xpra xmessage to be patient\n - disabled keyboard adjusting for `--nxagent`\n\n## [3.1.0](https://github.com/mviereck/x11docker/blob/60b704f068fe99e64b873c8fe4fc0ae6da35ab87/x11docker) - 2017-04-16\n### Added\n - `--nxagent` for X server `nxagent`\n\n## [3.0.0](https://github.com/mviereck/x11docker/blob/a62b2f47472ab60b98d2a2471135e0e33fa46757/x11docker) - 2017-04-15\n### Added\n - Wayland support.\n - `--wayland`: auto setup for pure Wayland applications\n - `--weston` for pure Wayland applications\n - `--kwin` for pure Wayland applications\n - `--xpra-xwayland`: new X server option to run xpra with GPU acceleration\n - `--kwin-xwayland`: new X server option\n - `--weston-xwayland`: new X server option, allows GPU acceleration\n - `--xwayland`: new X server option\n - `--nothing`: Provide no X or Wayland server\n - `--sharewayland`: Share host wayland socket and set WAYLAND_DISPLAY\n - `--setwaylandenv`: setting environment variables for toolkits like QT and GTK to use wayland\n - `--env`: set custom environment variables (formerly `--env` had role of new `--showenv`)\n - `--dbus`: run image command with `dbus-launch`\n - `--xhost+`: set `xhost +` on new X server\n - `--showenv`: formerly `--env`, show environment variables to access new X server\n### Changed\n - second stderr `&3` to show warnings and errors also from within xinitrc and xtermrc\n - error messages on docker startup failure in xtermrc\n - `xdummy.conf` or `--xpra`: custom modeline setting fitting to actual resolution\n - `--xdummy` regards `--size`\n - x11docker_CMD checks if ps is available\n - `--wm` changed, autochoosing no longer default\n - `chmod 1777 /tmp/X11-unix` to allow creation of X sockets in container (needed e.g. for `startplasmacompositor`)\n - `--verbose` output much more reliebale now, tail improved\n - use prefix `unix` for `DISPLAY` to disable `MIT_SHM` instead using other environment variables\n - create dektop starter with basename instead of $0\n - createuser: start with `--user=0` to allow `useradd` and `su`\n - reverse order of killing of bgpids in finish(),last one first, to catch possible further output with tail -F\n - Newdisplaynumber for xorg starts with `8`\n - xinitrc: `XPRA_OPENGL_DOUBLE_BUFFERED=1` to avoid xpra bug 1469\n - check and set `XDG_RUNTIME_DIR` for weston and Xwayland\n### Removed\n - `--virtualgl`, `--dockerenv`, `--xpra-image`, `--xorg-image`, `--xdummy-image`, `--tcp` `--tcpxsocket` `--xsocket`, `--glamor`, `--sharegpu`, `--desktop`, `--xhost`\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0869140625,
          "content": "MIT License\n\nCopyright (c) 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022 Martin Viereck\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 47.0673828125,
          "content": "# x11docker: ![x11docker logo](x11docker.png) Run GUI applications in Docker or podman containers.\n\n## Avoid X security leaks and enhance container security\n[![DOI](http://joss.theoj.org/papers/10.21105/joss.01349/status.svg)](https://doi.org/10.21105/joss.01349)\n\n## Table of contents\n - [Introduction](#introduction)\n   - [Docker Desktop or Docker Engine](#docker-desktop-or-docker-engine)\n   - [TL;DR](#tldr)\n   - [Features](#features)\n   - [Supported systems](#supported-systems)\n - [Terminal syntax](#terminal-syntax)\n - [Options](#options)\n   - [Choice of X servers and Wayland compositors](#choice-of-x-servers-and-wayland-compositors)\n   - [Desktop or seamless mode](#desktop-or-seamless-mode)\n   - [Internet access](#internet-access)\n   - [Shared folders and HOME in container](#shared-folders-volumes-and-home-in-container)\n   - [GPU hardware acceleration](#gpu-hardware-acceleration)\n   - [Clipboard](#clipboard)\n   - [Sound](#sound)\n   - [Webcam](#webcam)\n   - [Printer](#printer)\n   - [Language locales](#language-locales)\n   - [Wayland](#wayland)\n   - [Init system](#init-system)\n   - [DBus](#dbus)\n   - [Container runtime](#container-runtime)\n   - [Backends other than docker](#backends-other-than-docker)\n   - [Preconfiguration with --preset](#preconfiguration-with---preset)\n     - [Default preset for all x11docker sessions](#default-preset-for-all-x11docker-sessions)\n - [Security](#security)\n   - [Security weaknesses](#security-weaknesses)\n   - [Options degrading container isolation](#options-degrading-container-isolation)\n   - [Sandbox](#sandbox)\n   - [Security and feature check](#security-and-feature-check)\n - [Installation](#installation)\n   - [Installation from distribution repositories](#installation-from-distribution-repositories)\n   - [Manual installation](#manual-installation)\n     - [Installation options](#installation-options)\n     - [Installed files](#installed-files)\n     - [Shortest way for first installation](#shortest-way-for-first-installation)\n     - [Minimal installation](#minimal-installation)\n     - [Installation on MS Windows](#installation-on-ms-windows)\n     - [Deinstallation](#deinstallation)\n - [Dependencies](#dependencies)\n - [Troubleshooting](#troubleshooting)\n   - [Core checks](#core-checks)\n   - [Privilege checks](#privilege-checks)\n   - [Other checks](#other-checks)\n - [Contact](#contact)\n   - [Issues](#issues)\n   - [Contributing](#contributing)\n   - [Support](#support)\n - [Donation](#donation)\n - [Examples](#examples)\n   - [Single applications](#single-applications)\n   - [Desktop environments](#desktop-environments)\n   - [Adjust images for your needs](#adjust-images-for-your-needs)\n   - [Screenshots](#screenshots)\n\n## Introduction\nx11docker allows to run graphical desktop applications (and entire desktops) in Linux containers.\n - [Container tools](#backend-docker-podman-or-nerdctl) like [Docker](https://en.wikipedia.org/wiki/Docker_(software)), [podman](http://docs.podman.io/en/latest/) and [nerdctl](https://github.com/containerd/nerdctl) allow to run applications in an isolated [container](https://en.wikipedia.org/wiki/Operating-system-level_virtualization) environment. \n   Containers need much less resources than [virtual machines](https://en.wikipedia.org/wiki/Virtual_machine) for similar tasks.\n - Docker, podman and nerdctl do not provide a [display server](https://en.wikipedia.org/wiki/Display_server) that would allow to run applications with a [graphical user interface](https://en.wikipedia.org/wiki/Graphical_user_interface).\n - x11docker fills the gap. It runs an [X display server](https://en.wikipedia.org/wiki/X_Window_System) and provides it to containers. \n   X servers can run from host or in a container of image [x11docker/xserver](https://github.com/mviereck/dockerfile-x11docker-xserver).\n - Additionally x11docker does some [security setup](https://github.com/mviereck/x11docker#security) to enhance container isolation and to avoid X security leaks. \n   This allows a [sandbox](#sandbox) environment that fairly well protects the host system from possibly malicious or buggy software.\n\nSoftware can be installed in a deployable image with a rudimentary Linux system inside. \nThis can help to run or deploy software that is difficult to install on several systems due to dependency issues. It is possible to run outdated versions or latest development versions side by side. \nFiles to work on can be shared between host and container.\n\n[x11docker wiki](https://github.com/mviereck/x11docker/wiki) provides some how-to's for basic setups without x11docker.\n\n### Docker Desktop or Docker Engine\nSince a while Docker distributes a version called \"Docker Desktop\" that runs Docker in a QEMU VM. x11docker is not designed to support this VM based version.\nInstead, use x11docker with the native [\"Docker Engine Server version\"](https://docs.docker.com/engine/install/#server) that uses your host kernel to run containers.\n - If you install Docker from your distribution's repository, you'll likely get this native version.\n - The supported native Docker Engine package name is mostly `docker.io` or `docker-ce`, in opposite to the non-supported VM based `docker-desktop` package.\n - If you prefer podman over Docker, you don't need to care about this difference.\n\n### TL;DR\nFor a quick start:\n - [Install](#installation) x11docker with:\n   ```sh\n   curl -fsSL https://raw.githubusercontent.com/mviereck/x11docker/master/x11docker | sudo bash -s -- --update\n   ```\n - Install [dependencies](#dependencies):\n   - Either pull image `x11docker/xserver` or install at least `nxagent` or `xpra` and `xephyr`.\n - [Run](#terminal-syntax) a GUI in container with:\n   ```sh\n   x11docker IMAGENAME [COMMAND]\n   ```\n - Add [options](#options):\n   - `--desktop` for a desktop environment in image.\n   - `--gpu` for hardware acceleration. \n - [Examples](#examples):\n   ```sh\n   x11docker x11docker/xfce thunar\n   x11docker --desktop x11docker/xfce\n   x11docker --gpu x11docker/xfce glxgears\n   ```\n\n### Features\n - Focus on [security](#security):\n   - Avoids X security leaks by running [additional X servers](#choice-of-x-servers-and-wayland-compositors).\n   - Restricts container capabilities to bare minimum.\n   - Container user is same as host user to avoid root in container.\n - Low [dependencies](#dependencies):\n   - No obliging dependencies on host beside X and one of `docker`, `podman` or `nerdctl`. Recommended: `nxagent` and `Xephyr`, alternatively image `x11docker/xserver`.\n   - No dependencies inside of images except for some optional features.\n - Several [optional features](#options) like [GPU](#gpu-hardware-acceleration), [sound](#sound), [webcam](#webcam) and [printer](#printer) support.\n - Remote access with [SSH](https://github.com/mviereck/x11docker/wiki/Remote-access-with-SSH), [VNC](https://github.com/mviereck/x11docker/wiki/VNC) \n   or [HTML5](https://github.com/mviereck/x11docker/wiki/Container-applications-running-in-Browser-with-HTML5) possible.\n - Easy to use. [Examples](#examples): \n   - `x11docker x11docker/fvwm xterm`\n   - `x11docker --desktop --size 320x240 x11docker/lxde` (needs nested X server `Xephyr`)\n![retro terminal cathode](/../screenshots/screenshot-retroterm.png?raw=true \"Cathode retro term in docker\") ![LXDE in xpra](/../screenshots/screenshot-lxde-small.png?raw=true \"LXDE desktop in docker\")\n\n### Supported systems\nx11docker runs on Linux and (with some setup and limitations) on [MS Windows](#installation-on-ms-windows). x11docker does not run on macOS except in a Linux VM.\n\n## Terminal syntax\nJust type `x11docker IMAGENAME [COMMAND]`. \n - Get an [overview of options](https://github.com/mviereck/x11docker/wiki/x11docker-options-overview) with `x11docker --help`. \n   - For desktop environments in image add option `-d, --desktop`.\n   - For internet access use option `-I, --network`.\n   - To run without X at all use option `-t, --tty`.\n   - Get an interactive TTY with option `-i, --interactive`.\n   - See generated container backend command (and further infos) with option `--debug`.\n - If startup fails, look at chapter [Troubleshooting](#troubleshooting).\n \nGeneral syntax:\n```\nUsage:\nTo run a container on a new X server:\n  x11docker IMAGE\n  x11docker [OPTIONS] IMAGE [COMMAND]\n  x11docker [OPTIONS] -- IMAGE [COMMAND [ARG1 ARG2 ...]]\n  x11docker [OPTIONS] -- CUSTOM_RUN_OPTIONS -- IMAGE [COMMAND [ARG1 ARG2 ...]]\nTo run a host application on a new X server:\n  x11docker [OPTIONS] --backend=host COMMAND\n  x11docker [OPTIONS] --backend=host -- COMMAND [ARG1 ARG2 ...]\n  x11docker [OPTIONS] --backend=host -- -- COMMAND [ARG1 ARG2 ...] -- [ARG3]\nTo run only an empty new X server:\n  x11docker [OPTIONS] --xonly\n```\n`CUSTOM_RUN_OPTIONS` are just added to the `docker|podman|nerdctl run` command without a serious check by x11docker.\n\n## Options\nDescription of some commonly used feature [options](https://github.com/mviereck/x11docker/wiki/x11docker-options-overview).\n - Some of these options have dependencies on host and/or in image.\n   Compare [wiki: feature dependencies](https://github.com/mviereck/x11docker/wiki/Dependencies#dependencies-of-feature-options).\n - For often used option combinations you can make shortcuts with [option `--preset`](#option---preset).\n   \n### Choice of X servers and Wayland compositors\nIf no X server option is specified, x11docker automatically chooses one depending on installed [dependencies](#dependencies)\nand on given or missing options `--desktop`, `--gpu` and `--wayland`. Most recommended are `nxagent` and `Xephyr`.\n - [Overview of all possible X server and Wayland options.](https://github.com/mviereck/x11docker/wiki/X-server-and-Wayland-Options)\n   - [Hints to use option `--xorg` within X.](https://github.com/mviereck/x11docker/wiki/Setup-for-option---xorg)\n   - Use option `-t, --tty` to run without X at all.\n\n### Desktop or seamless mode\nx11docker assumes that you want to run a single application in seamless mode, i.e. a single window on your regular desktop. If you want to run a desktop environment in image, add option `--desktop`. \n - Seamless mode is supported with options `--nxagent` and `--xpra`. As a fallback insecure option `--hostdisplay` is possible.\n - Desktop mode with `--desktop` is supported with all X server options except `--hostdisplay`. If available, x11docker prefers `--xephyr` and `--nxagent`.\n - Special case: Single applications with a window manager (option `--wm`).\n   - If neither `nxagent` nor `xpra` are installed, but x11docker finds a desktop capable X server like `Xephyr`, it avoids insecure option `--hostdisplay` and runs Xephyr with a window manager.\n   \n### Internet access\nBy default x11docker disables Network access for containers with `--network=none` because it targets best possible container isolation.\nTo allow internet access set option `-I` or `--network`.\n\n### Shared folders, volumes and HOME in container\nChanges in a running container system will be lost, the created container will be discarded. For persistent data storage you can share host directories or volumes:\n - Option `-m, --home` creates a host directory in `~/.local/share/x11docker/IMAGENAME` that is shared with the container and mounted as its `HOME` directory. \n   Files in container home and user configuration changes will persist. \n   x11docker creates a softlink from `~/.local/share/x11docker` to `~/x11docker`.\n   - You can specify another host directory for container `HOME` with `--home=DIR`.\n   - You can specify a volume for container `HOME` with `--home=VOLUME`.\n - Option `--share PATH` mounts a host file or folder at the same location in container. \n   - You can also specify a volume with `--share VOLUME`.\n   - `--share PATH:ro` restricts to read-only access. \n   - Device files in `/dev` are supported, too.\n - Special cases for `$HOME`:\n   - `--home=$HOME` will use your host home as container home. Discouraged, use with care.\n   - `--share $HOME` will symlink your host home as a subfolder of container home. \n   \nNote that x11docker copies files from `/etc/skel` in container to `HOME` if `HOME` is empty. That allows to provide predefined user configurations in the image.\n \n### GPU hardware acceleration\nHardware acceleration for OpenGL is possible with option `-g, --gpu`. \n - This will work out of the box in most cases with open source drivers on host. Otherwise have a look at [wiki: feature dependencies](https://github.com/mviereck/x11docker/wiki/Dependencies#dependencies-of-feature-options). \n - Closed source [NVIDIA drivers](https://github.com/mviereck/x11docker/wiki/NVIDIA-driver-support-for-docker-container) need some setup \n   and support less [x11docker X server options](https://github.com/mviereck/x11docker/wiki/X-server-and-Wayland-Options#attributes-of-x-server-and-wayland-options)\n   for driver version < v470.x and Xwayland < v22.1.2.\n \n### Clipboard\nClipboard sharing is possible with option `-c, --clipboard [=ARG]`.\n - Optional arguments `superv` and `altv` only provide host clipboard content to container if keys `[SUPER][v]` or `[ALT][v]` are pressed.\n - Optional argument `oneway` only transfers clipboard content from container to host.\n\n### Sound\nSound is possible with options `-p, --pulseaudio` and `--alsa`. \n - For pulseaudio sound with `--pulseaudio` you need `pulseaudio` on host and `pulseaudio` (at least the `pulseaudio` client libraries) in image. \n   Compare [wiki: feature dependencies](https://github.com/mviereck/x11docker/wiki/Dependencies#dependencies-of-feature-options).\n - For ALSA sound with `--alsa` you might need to specify a sound card with e.g. `--alsa=Generic`. Get a list of available sound cards with `aplay -l`.\n \n### Webcam\nWebcams on host can be shared with option `--webcam`.\n - If webcam application in image fails, install `--gpu` dependencies in image. \n   Compare [wiki: feature dependencies](https://github.com/mviereck/x11docker/wiki/Dependencies#dependencies-of-feature-options).\n - `guvcview` needs `--pulseaudio` or `--alsa`.\n - `cheese` and [`gnome-ring`](https://ring.cx/) need `--init=systemd`.\n \n### Printer\nPrinters on host can be provided to container with option `--printer`. \n - It needs `cups` on host, the default printer server for most linux distributions.\n - The container needs `cups` client libraries in image.\n   Compare [wiki: feature dependencies](https://github.com/mviereck/x11docker/wiki/Dependencies#dependencies-of-feature-options).\n\n### Language locales\nx11docker provides option `--lang` for flexible language locale settings. \n - `--lang` without an argument sets `LANG` in container to same as on host. Same as `--lang=$LANG`\n - x11docker will check on container startup if the desired locale is already present in image and enable it. \n - If x11docker does not find the locale, it creates it on container startup. This needs some `locale` packages in image.\n   Compare [wiki: feature dependencies](https://github.com/mviereck/x11docker/wiki/Dependencies#dependencies-of-feature-options).\n - Examples: `--lang=de` for German, `--lang=zh_CN` for Chinese, `--lang=ru` for Russian, `--lang=$LANG` for your host locale.\n - For support of chinese, japanese and korean characters install a font like `fonts-arphic-uming` in image.\n - Keyboard input methods like `fcitx-pinyin` are possible with some container setup. Compare ticket [#269](https://github.com/mviereck/x11docker/issues/269#issuecomment-667124421).\n   \n### Wayland\nTo run  [Wayland](https://wayland.freedesktop.org/) instead of an X server x11docker provides options `--wayland`, `--weston`, `--kwin` and `--hostwayland`. \nFor further description loot at [wiki: Description of Wayland options](https://github.com/mviereck/x11docker/wiki/X-server-and-Wayland-Options#description-of-wayland-options).\n - Option `--wayland` automatically sets up a Wayland environment. It regards option `--desktop`.\n - Options `--weston` and `--kwin` run Wayland compositors `weston` or `kwin_wayland`.\n - Option `--hostwayland` can run applications seamless on host Wayland desktops like Gnome 3, KDE 5 and [Sway](https://github.com/swaywm/sway).\n - Example: `xfce4-terminal` on Wayland: `x11docker --wayland x11docker/xfce xfce4-terminal`\n \n### Init system\nx11docker supports several init systems as PID 1 in container with option `--init`. Init in container solves the [zombie reaping issue](https://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/).\nAs default x11docker uses `tini` in`/usr/bin/docker-init`. Also available are `systemd`, `SysVinit`, `runit`, `OpenRC` and `s6-overlay`. `elogind` is supported, too.\nLook at [wiki: Init systems in Docker](https://github.com/mviereck/x11docker/wiki/Init-systems).\n\n### DBus\nSome desktop environments and applications need a running DBus system daemon and/or DBus user session. DBus options need `dbus` in image.\n - use `--dbus` to run a DBus user session daemon.\n - A DBus system daemon will be started automatically with [init systems](#Init-system) `systemd`, `openrc`, `runit` and `sysvinit` (option `--init`).\n   - It is also possible to run a DBus system daemon with `--dbus=system` without advanced init systems. However, this causes trouble in some cases and is not recommended in general.\n - use `--hostdbus` to connect to host DBus user session.\n - use `--share /run/dbus/system_bus_socket` to share host DBus system socket.\n\n### Container runtime\nIt is possible to run containers with different backends following the [OCI runtime specification](https://github.com/opencontainers/runtime-spec). Docker's default runtime is `runc`. You can specify another one with option `--runtime=RUNTIME`.\nContainer runtimes known and supported by x11docker are:\n - `runc`: Docker default.\n - [`nvidia`](https://github.com/mviereck/x11docker/wiki/NVIDIA-driver-support-for-docker-container#nvidianvidia-docker-images): \n   Specialized fork of `runc` to support `nvidia/nvidia-docker` images.\n - [`crun`](https://github.com/giuseppe/crun): Fast and lightweight alternative to `runc` with same functionality.\n - `oci`: Runtime reported in [#205](https://github.com/mviereck/x11docker/issues/205), no documentation found. Handled by x11docker like `runc`.\n - [`sysbox-runtime`](https://github.com/nestybox/sysbox): Based on runc, aims to enhance container isolation. \n   Support is experimental yet. Needs Sybox>=0.5.0 and kernel version >=5.12.\n\nUsing different runtimes is well tested for rootful Docker, but not for other [backend setups](#backend-docker-podman-or-nerdctl).\n\nExample: possible runtime configuration in `/etc/docker/daemon.json`:\n```json\n{\n  \"default-runtime\": \"runc\",\n  \"runtimes\": {\n    \"crun\": {\n      \"path\": \"/usr/local/bin/crun\",\n      \"runtimeArgs\": []\n    },\n    \"nvidia\": {\n      \"path\": \"nvidia-container-runtime\",\n      \"runtimeArgs\": []\n    },\n    \"sysbox-runc\": {\n      \"path\": \"/usr/bin/sysbox-runc\"\n    }\n  }\n}\n```\n\n### Backends other than docker\nx11docker supports container tools [Docker](https://en.wikipedia.org/wiki/Docker_(software)), [podman](http://docs.podman.io/en/latest/) \nand [nerdctl](https://github.com/containerd/nerdctl) with option `--backend=BACKEND` in rootful and rootless mode.\nSupported `--backend` arguments: `docker` `podman` `nerdctl` `host`\n\nContainer backends:\n - By default x11docker tries to run `docker`.\n   - To change the default `--backend=docker` to another one like `--backend=podman`, create a [`default` file for `--preset`](#default-preset-for-all-x11docker-sessions).\n - Recommended for rootful container backend: `docker` or `podman`\n - Recommended for rootless container backend: `podman` \n   - Only `podman` allows option `--home` in rootless mode yet.\n   - Only `podman` provides useful file ownerships with option `--share` in rootless mode yet.\n - `--backend=nerdctl` is experimental yet. It supports rootful and rootless mode. `nerdctl` is in heavy development stage.\n\nOther supported backends that are in fact no containers:\n - `--backend=host` runs a host application on a new X server. No containerization is involved.\n\n### Preconfiguration with --preset\nFor often used option combinations you might want to use option `--preset FILENAME` to have a command shortcut. \n`FILENAME` is a file in `~/.config/x11docker/preset` or in `/etc/x11docker/preset` containing some x11docker options.\n - Example `multimedia`: Create a file `~/.config/x11docker/preset/multimedia`:\n   ```\n   --gpu\n   --webcam\n   --printer\n   --pulseaudio\n   --clipboard\n   --share ~/Videos\n   --share ~/Music\n   ```\n   Use it like: `x11docker --preset=multimedia jess/vlc`\n - Example deepin desktop: Instead of long command\n   ```\n   x11docker --desktop --init=systemd --gpu --pulseaudio --home -- --cap-add=IPC_LOCK -- x11docker/deepin\n   ``` \n   you can create a file `~/.config/x11docker/preset/deepin` containing the desired options and even the image name:\n   ```\n   --desktop \n   --init=systemd\n   --gpu\n   --pulseaudio\n   --home\n   -- \n   --cap-add=IPC_LOCK\n   -- \n   x11docker/deepin\n   ```\n   Run with: `x11docker --preset=deepin`\n   \n#### Default preset for all x11docker sessions\nYou can create a `default` preset file that is applied on all x11docker sessions. You can think of it as a configuration file for x11docker.\n - Example: To always use `podman` instead of docker, create a file with name `default` in `~/.config/x11docker/preset` or in `/etc/x11docker/preset` with content:\n   ```\n   --backend=podman\n   ```\n   This will cause x11docker to always use `podman` instead of `docker` unless specified otherwise in the x11docker command.\n   \nThe same way you can specify other and more options as default, e.g. `--homebasedir=/my/containerhome/path`.\nNote that a local user `default` file will supersede a system wide `default` file. \n   \n## Security \nScope of x11docker is to run containerized GUI applications while preserving and improving container isolation.\nCore concept is:\n - Runs a second X server to avoid [X security leaks](http://tutorials.section6.net/tutorials/freebsd/security/basics-of-securing-x11.html).\n   - This in opposite to widespread solutions that share host X socket of display :0, thus breaking container isolation, allowing keylogging and remote host control. \n     (However, x11docker provides this with fallback option `--hostdisplay`).\n   - Authentication is done with MIT-MAGIC-COOKIE, stored separate from file `~/.Xauthority`.\n - Creates container user similar to host user to [avoid root in container](http://blog.dscpl.com.au/2015/12/don-run-as-root-inside-of-docker.html).\n   - You can also specify another user with `--user=USERNAME` or a non-existing one with `--user=UID:GID`.\n   - Disables possible root password and deletes entries in `/etc/sudoers`.\n     - If you want root permissions in container, use option `--sudouser` that allows `su` and `sudo` with password `x11docker`.  \n   - If you want to use `USER` specified in image instead, set option `--user=RETAIN`. x11docker won't change container's `/etc/passwd` or `/etc/sudoers` in that case. Option `--home` won't be available.\n - Reduces [container capabilities](https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities) to bare minimum.\n   - Sets run option `--cap-drop=ALL` to drop all capabilities. Most applications don't need them.\n   - Sets run option [`--security-opt=no-new-privileges`](https://www.projectatomic.io/blog/2016/03/no-new-privs-docker/).\n   - These restrictions can be disabled with x11docker option `--cap-default` or reduced with `--sudouser`, `--newprivileges`.\n   \nThat being said, the default docker capabilities and the seccomp/SELinux/apparmor profiles are set up well to protect the host system.\nNonetheless, x11docker follows the [principle of least privilege](https://en.wikipedia.org/wiki/Principle_of_least_privilege). \nContainers should not have capabilities or privileges that they don't need for their job.\n\n### Security weaknesses\n - Possible SELinux restrictions are degraded for x11docker containers with run option `--security-opt label=type:container_runtime_t` to allow access to new X unix socket. \n   A more restrictive solution is desirable.\n   Compare: [SELinux and Docker: allow access to X unix socket in /tmp/.X11-unix](https://unix.stackexchange.com/questions/386767/selinux-and-docker-allow-access-to-x-unix-socket-in-tmp-x11-unix)\n - A possible user namespace remapping setup is disabled to allow options `--home` and `--share` without file ownership issues. \n   - This is less an issue because x11docker already avoids root in container. \n   - Exception: User namespace remapping is not disabled for `--user=RETAIN`.\n - x11docker provides several different X server options. \n   Each X server involved might have its individual vulnerabilities. \n   x11docker only covers well-known X security leaks that result from X11 protocol design.\n    - An additional security layer for most supported X servers is set up if image [x11docker/xserver](https://github.com/mviereck/dockerfile-x11docker-xserver) is available. \n      It will be used automatically in most cases if available. Enforce its usage with option `--xc=yes`.\n\n \n### Options degrading container isolation\nx11docker shows warning messages in terminal if chosen options degrade container isolation. Note that x11docker does not check custom `DOCKER_RUN_OPTIONS`.\n\n_Most important:_\n  - `--hostdisplay` shares host X socket of display :0 instead of running a second X server. \n    - Danger of abuse is reduced providing so-called untrusted cookies, but do not rely on this. \n    - If additionally using `--gpu` or `--clipboard`, option `--ipc=host` and trusted cookies are enabled and no protection against X security leaks is left. \n    - If you don't care about container isolation, `x11docker --hostdisplay --gpu` is an insecure but quite fast setup without any overhead.\n  - `--gpu` allows access to GPU hardware. This can be abused to get window content from host ([palinopsia bug](https://hsmr.cc/palinopsia/)) and makes [GPU rootkits](https://github.com/LucaBongiorni/jellyfish) like [keyloggers](http://www.cs.columbia.edu/~mikepo/papers/gpukeylogger.eurosec13.pdf) possible.\n  - `--pulseaudio` and `--alsa` allow catching audio output and microphone input from host.\n  \n_Rather special options reducing security, but not needed for regular use:_\n  - `--sudouser` allows `su` and `sudo` with password `x11docker`for container user.\n    If an application somehow breaks out of container, it can harm your host system. Allows many container capabilities that x11docker would drop otherwise.\n  - `--cap-default` disables x11docker's container security hardening and falls back to default container capabilities as provided by the backends docker, podman or nerdctl.\n    If an application somehow breaks out of container, it can harm your host system.\n  - `--init=systemd|sysvinit|openrc|runit` allow some container capabilities that x11docker would drop otherwise. \n    `--init=systemd` also shares access to `/sys/fs/cgroup`. Some processes will run as root in container.\n    If a root process somehow breaks out of container, it can harm your host system. Allows many container capabilities that x11docker would drop otherwise.\n  - `--hostdbus` allows communication over DBus with host applications.\n\n### Sandbox\nContainer isolation enhanced with x11docker allows to use containers as a [sandbox](https://en.wikipedia.org/wiki/Sandbox_(computer_security)) that fairly well protects the host system from possibly malicious or buggy software.\nThough, no sandbox solution in the wild can provide a perfect secure protection, and Docker even with enhanced security settings from x11docker is no exception.\n\nUsing x11docker as a sandbox is not intended to run obviously evil software. Rather use it as:\n - Compatibility environment to run software that is hard or impossible to install on host due to dependency issues.\n - Development environment to collect libraries, compiler and so on to keep the host clean.\n - Development environment to mitigate damage caused by unexpected/buggy behaviour.\n - Security layer for software that may be malicious in worst case. Examples: Internet browser with enabled `javascript`, or `wine` with MS Windows applications.\n\nx11docker already restricts process capabilities. You can additionally restrict access to CPU and RAM with option `--limit`. \nAs default `--limit` restricts to 50% of available CPUs and 50% of currently free RAM. Another amount can be specified with `--limit=FACTOR` with a `FACTOR` greater than zero and less than or equal one.\n\nFor more custom fine tuning have a look at [Docker documentation: Limit a container's resources](https://docs.docker.com/config/containers/resource_constraints).\n\n**WARNING**: There is no restriction that can prevent the container from flooding the hard disk storing the container or in shared folders.\n\n  \n### Security and feature check\nTo check container isolation and some feature options use image `x11docker/check` and try out with several options.\n - An insecure setup is `x11docker --hostdisplay --gpu x11docker/check`. It fairly well demonstrates common X security leaks.\n - Add options like `--pulseaudio --alsa --webcam --clipboard --printer` to check their functionality.\n  \n## Installation\nNote that x11docker is just a **bash script** without library dependencies. \nBasically it is just a wrapper for X servers and container backends docker, podman and nerdctl. \nTo allow advanced usage of x11docker abilities have a look at chapter [Dependencies](#dependencies).\n\n### Installation from distribution repositories\nx11docker is available as a package in some distributions.\n\nStable releases:\n\n![GitHub release (latest by date)](https://img.shields.io/github/v/release/mviereck/x11docker?label=x11docker%20latest%20release)\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/x11docker.svg)](https://repology.org/project/x11docker/versions)\n\nLatest git master/beta version:\n\n[![AUR latest git](https://repology.org/badge/version-for-repo/aur/x11docker.svg?allow_ignored=1)](https://repology.org/project/x11docker/versions)\n\nMuch thanks to the maintainers who decided to provide these packages! There are some hints for\n[packaging x11docker](https://github.com/mviereck/x11docker/wiki/Packaging-x11docker) in the wiki.\n\n### Manual installation\n#### Installation options\nAs root you can install, update and remove x11docker in system directories to be available system-wide:\n - `x11docker --install` : install x11docker from current directory. (Useful to install from an extracted `zip` file or a cloned `git` repository.)\n - `x11docker --update` : download and install latest [release](https://github.com/mviereck/x11docker/releases) from github.\n - `x11docker --update-master` : download and install latest master version from github.\n - `x11docker --remove` : remove all files installed by x11docker.\n   - Note: This does not remove `~/.local/share/x11docker` where it stores persistent files of option `--home`.\n - `x11docker --remove-oldprefix` : Before version 7.6.0 x11docker installed itself into `/usr/bin`.\n   Now it installs into `/usr/local/bin`. Use `--remove-oldprefix` to remove `/usr/bin` installations.\n\nTo see the difference between current and coming updated version, you can use optional argument `diff` for `--update` and `--update-master`.\nExample: `x11docker --update-master=diff` will show you the code changes from your current installation to latest master/beta version without installing it.\n\n#### Installed files\nWhat the installation does (just for information):\n - Copies script `x11docker` to `/usr/local/bin`. \n - Installs icon `x11docker.png` below `/usr/share/icons` using `xdg-icon-resource`. \n - Copies documentation `README.md`, `CHANGELOG.md` and `LICENSE.txt` to `/usr/local/share/doc/x11docker`.\n - Stores `man` page for x11docker in `/usr/local/share/man/man1/x11docker.1.gz`.\n \n#### Shortest way for first installation:\n - For systems using `sudo`:\n   ```sh\n   curl -fsSL https://raw.githubusercontent.com/mviereck/x11docker/master/x11docker | sudo bash -s -- --update\n   ```\n - Directly as `root`:\n   ```sh\n   curl -fsSL https://raw.githubusercontent.com/mviereck/x11docker/master/x11docker | bash -s -- --update\n   ```\n   \n#### Minimal installation\nYou can run x11docker from an arbitrary location with `bash x11docker` or `./x11docker`.\nFor minimal system-wide installation make `x11docker` executable with `chmod +x x11docker` and move it to `/usr/local/bin` (or another location in `PATH`).\nOther files than script `x11docker` itself are not essential.\n\n#### Installation on MS Windows\nx11docker can run natively on MS Windows electively in one of:\n - [WSL (Windows subsystem for Linux)](https://docs.microsoft.com/en-us/windows/wsl/about)\n - [Cygwin](https://www.cygwin.com/) \n - [MSYS2](https://www.msys2.org/)\n\nFurther information at [wiki: x11docker on MS Windows](https://github.com/mviereck/x11docker/wiki/x11docker-on-MS-Windows).\n\n#### Deinstallation\nYou can remove x11docker with `x11docker --remove`. That will remove the [files listed above](#installation-options).\nIt will also remove `~/.cache/x11docker` and stop all running x11docker containers.\nx11docker will **not** remove:\n - Files and folders for persistent data storage with option `--home`. These are:\n   - `~/.local/share/x11docker` where persistent data is stored.\n   - Softlink `~/x11docker` that points there.\n - Folders you might have created yourself for x11docker: \n   - `~/.local/share/x11docker` \n   - `~/.config/x11docker`\n\n\n## Dependencies\nx11docker can run with standard system utilities without additional dependencies on host or in image. \n - As a core it only needs `bash` and one of [`docker`](https://www.docker.com/), [`podman`](http://docs.podman.io/en/latest/) or [`nerdctl`](https://github.com/containerd/nerdctl) to run containers on X.\n - x11docker also needs an X server. x11docker can automatically use image [`x11docker/xserver`](https://github.com/mviereck/dockerfile-x11docker-xserver) that provides \nmost optional x11docker dependencies and several X servers and Wayland compositors so you won't need to install them on host.\n   - If you prefer to install dependencies on host:\n     - The recommended base commands are: `nxagent` `Xephyr` `weston` `Xwayland` `xdotool` `xauth` `xinit` `xclip` `xhost` `xrandr` `xdpyinfo`. \n       Some of them are probably already installed.\n     - See [wiki: Dependencies - Recommended base](https://github.com/mviereck/x11docker/wiki/Dependencies#recommended-base) for a package list matching your distribution.\n\nDependencies in image:\n - Some feature options have additional dependencies on host and/or in image. This affects especially options `--gpu`, `--printer` and `--pulseaudio`.\n - Compare [wiki: feature dependencies](https://github.com/mviereck/x11docker/wiki/Dependencies#dependencies-of-feature-options).\n\n\n## Troubleshooting\nFor troubleshooting run `x11docker` in a terminal. \nx11docker shows warnings if something is insecure, missing or going wrong.\nAlso it shows notes if options don't work and fallbacks are used.\nIt might give hints to fix some issues.\n### Core checks\n\n**1.** Make sure your x11docker version is up to date with `x11docker --update` (latest release) or `x11docker --update-master` (latest beta).\n\n**2.** Carefully read the regular x11docker messages. Often they already give a hint what to do.\n - Use option `-D, --debug` to see some internal messages.\n - Use option `-v, --verbose` to see full logfile output.\n - You can find the latest dispatched logfile at `~/.cache/x11docker/x11docker.log`.\n   \n**3.** Try another X server option.\n - Some applications fail with fallback option `--hostdisplay`. Add `--clipboard` to disable some security restrictions of `--hostdisplay`.\n - If that does not help, install [additional X servers](https://github.com/mviereck/x11docker/wiki/Dependencies#recommended-base). The most stable and reliable option is `--xephyr`.\n \n### Privilege checks\nSome applications need more privileges or [capabilities](https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities) than x11docker provides by default. \nOne attempt is to allow several privileges until the setup works. Than reduce privileges to find out which are needed indeed. \n(Note the ` -- ` in the following commands, do not miss them).\n\n**1.** Adding privileges:\n - Try `x11docker --cap-default IMAGENAME`\n - Try `x11docker --cap-default --ipc=host --network=host IMAGENAME`\n - Try `x11docker --cap-default --ipc=host --network=host --share /run/udev/data:ro -- --cap-add ALL --security-opt seccomp=unconfined --security-opt apparmor=unconfined --privileged -- IMAGENAME`\n   \n**2.** Reducing privileges:\n - Drop options one by one in this order: `--privileged` `--security-opt apparmor=unconfined` `--security-opt seccomp=unconfined` `--cap-add ALL`\n   `--share /run/udev/data:ro` `--network=host` `--ipc=host` `--cap-default`. \n   Only leave options that are needed to keep the setup working.\n - Option `--cap-default` might already be enough. It allows default container capabilities as docker|podman|nerdctl would do on themself. \n   - You can just stop debugging and reducing here if you like to.\n   - You can try to reduce `--cap-default`. Partially remove additional options to find out which one(s) are needed:\n     - First try `x11docker --newprivileges -- IMAGENAME`\n     - Than try and reduce: `x11docker --newprivileges -- --cap-add=SETPCAP --cap-add=MKNOD --cap-add=AUDIT_WRITE --cap-add=CHOWN --cap-add=NET_RAW --cap-add=DAC_OVERRIDE --cap-add=FOWNER --cap-add=FSETID --cap-add=KILL --cap-add=SETGID --cap-add=SETUID --cap-add=NET_BIND_SERVICE --cap-add=SYS_CHROOT --cap-add=SETFCAP -- IMAGENAME`\n - `--cap-add ALL` should not be considered to be a solution. \n   - Drop capabilities from following command to find the one(s) you need:\n   `x11docker --cap-default -- --cap-add=SYS_MODULE --cap-add=SYS_RAWIO --cap-add=SYS_PACCT --cap-add=SYS_ADMIN --cap-add=SYS_NICE --cap-add=SYS_RESOURCE --cap-add=SYS_TIME --cap-add=SYS_TTY_CONFIG --cap-add=AUDIT_CONTROL --cap-add=MAC_OVERRIDE --cap-add=MAC_ADMIN --cap-add=NET_ADMIN --cap-add=SYSLOG --cap-add=DAC_READ_SEARCH --cap-add=LINUX_IMMUTABLE --cap-add=NET_BROADCAST --cap-add=IPC_LOCK --cap-add=IPC_OWNER --cap-add=SYS_PTRACE --cap-add=SYS_BOOT --cap-add=LEASE --cap-add=WAKE_ALARM --cap-add=BLOCK_SUSPEND --cap-add=AUDIT_READ -- IMAGENAME`\n   - Many of these capabilities are rather dangerous and should not be allowed for a container. Especially to mention is `SYS_ADMIN`.\n - Option `--privileged` should not be considered to be a solution. Basically it allows arbitrary access to the host for container applications.\n   - Likely you need to share a device file in `/dev`, e.g. something like `--share /dev/vboxdrv`.\n - `--ipc=host` and `--network=host` severely reduce container isolation. Better solutions are desirable.\n\n**3.** Open a ticket to ask for possibilities how to optimize the privilege setup.\n\n### Other checks\n\n**1.** Container user: By default x11docker sets up an unprivileged container user similar to your host user.\n - The image may have a `USER` specification and be designed for this user. \n   - Check for a `USER` specification in image with `docker inspect --format '{{.Config.User}}' IMAGENAME`\n   - You can enable this predefined user with `--user=RETAIN`\n - The container might need a root user. Try with `--user=root`, maybe add `--cap-default`.\n   \n**2.** Init and DBus\n - A few applications need a [DBus](#dbus) user daemon. Install `dbus` in image and try option `--dbus`.\n - A few applications need systemd and/or a running [DBus](#dbus) system daemon. Install `systemd` in image and try option `--init=systemd`.\n\n**3.** Architecture check of host OS and image\n - The image may not be built for the architecture of your host OS. (ie. Image is built for amd64 but your OS runs on arm, e.g. on a RaspBerry PI).\n   With a mismatch the container will quit unexpectedly & x11docker may emit the error `dockerrc(): Did not receive PID of PID1 in container.`\n   - You can check the image architecture with `docker inspect --format {{.Architecture}} IMAGENAME`.\n   - You can check the host architecture with `uname -m`.\n   - For further information and multi-arch setups look at [wiki: Multi-arch setups with QEMU](https://github.com/mviereck/x11docker/wiki/Multiarch-setups-with-QEMU).\n\n## Contact\nFeel free to open a [ticket](https://github.com/mviereck/x11docker/issues) if you have a question or encounter an issue.\n### Issues\nIf reporting an [issue](https://github.com/mviereck/x11docker/issues):\n - Have a look at chapter [Troubleshooting](#troubleshooting).\n - Most times it makes sense to store the `--verbose` output (or `~/.cache/x11docker/x11docker.log`) at [pastebin.com](https://pastebin.com/).\n   - Personal information in the logfile is mainly the user name (also in paths) and some hardware and system information.\n### Contributing\nIf you want to contribute to x11docker, please open a [ticket](https://github.com/mviereck/x11docker/issues) before creating a pull request. \nOften it is possible to accomplish desired tasks with already available options.\nNote that x11docker is considered to be stable and changes other than bug fixes are less likely to be merged. In general new features are not intended.\n### Support\nPlease open a [ticket](https://github.com/mviereck/x11docker/issues) if you need support. Please note that `x11docker` is a non-commercial project maintained in free time. \nI'll help where I can, but there is no organisation behind `x11docker` that can provide large scale support.\n\n## Donation\nIf you like to make a donation: Thank you! :)\nPlease have a look at [my sponsor site](https://github.com/sponsors/mviereck).\n\nInstead of sponsoring me, you can as well spend some money to [Galsan Tschinag](http://galsan-tschinag.de/portrait/) in Mongolia ([Wikipedia](https://en.wikipedia.org/wiki/Galsan_Tschinag)). \nOne of his great projects is the afforestation of Mongolia.\nA donation account in Germany is provided by [Förderverein Mongolei e.V.](http://foerderverein-mongolei.de/spenden/).\n```\nFörderverein Mongolei e.V.\nIBAN DE7261290120 0394 3660 00\nBIC GENODES1NUE\nVolksbank Kirchheim-Nürtingen\n```\nI personally know some of the people behind this. I assure that they are trustworthy and have a great heart and soul and do a good thing.\n\n## Examples\n[Some x11docker image examples with desktop environments can be found on docker hub.](https://hub.docker.com/u/x11docker/)\nA special one to check features and container isolation is `x11docker/check`.\n\nDocker does not provide automated builds for free anymore, so the images are becoming outdated.\nInstead of pulling them, rather build them locally with x11docker option `--build`.\n\nSome x11docker Dockerfiles are provided at https://github.com/mviereck?tab=repositories; look for repositories beginning with `dockerfile-x11docker`.\nYou can build locally from these Dockerfiles with x11docker option `--build`. Example:\n```\nx11docker --build x11docker/fvwm\n```\n\n### Single applications\n| Application | x11docker command |\n| --- | --- |\n| Xfce4 Terminal | `x11docker x11docker/xfce xfce4-terminal` |\n| GLXgears with hardware acceleration | `x11docker --gpu x11docker/xfce glxgears` |\n| [Kodi media center](https://kodi.tv/) with hardware <br> acceleration, Pulseaudio sound <br> and shared `Videos` folder. <br> For setup look at [ehough/docker-kodi](https://github.com/ehough/docker-kodi). | `x11docker --gpu --pulseaudio --share ~/Videos erichough/kodi`. |\n| [XaoS](https://github.com/patrick-nw/xaos) fractal generator | `x11docker patricknw/xaos` |\n| [Telegram messenger](https://telegram.org/) with persistent <br> `HOME` for configuration storage | `x11docker --home xorilog/telegram` |\n| Firefox with shared `Download` folder<br> and internet access. | `x11docker -I --share $HOME/Downloads -- --tmpfs /dev/shm -- jess/firefox` |\n| [Tor browser](https://www.torproject.org/projects/torbrowser.html) | `x11docker -I jess/tor-browser` |\n| Chromium browser with restricted resource usage | `x11docker -I --limit -- jess/chromium --no-sandbox` |\n| VLC media player with shared `Videos` <br> folder and Pulseaudio sound | `x11docker --pulseaudio --share=$HOME/Videos jess/vlc` |\n| [GNU Octave Scientific Programming Language](https://www.gnu.org/software/octave/) built for arm & arm64 | `x11docker aptman/dbhi:bionic-octave octave` | \n\n### Desktop environments\n| Desktop environment <br> (most based on Debian)| x11docker command |\n| --- | --- |\n| [Cinnamon](https://github.com/mviereck/dockerfile-x11docker-cinnamon) | `x11docker --desktop --gpu --init=systemd --cap-default x11docker/cinnamon` |\n| [deepin](https://github.com/mviereck/dockerfile-x11docker-deepin) ([website](https://www.deepin.org/en/dde/)) (3D desktop from China) | `x11docker --desktop --gpu --init=systemd -- --cap-add=IPC_LOCK -- x11docker/deepin` |\n| [Enlightenment](https://github.com/mviereck/dockerfile-x11docker-enlightenment) (based on [Void Linux](https://www.voidlinux.org/)) | `x11docker --desktop --gpu --runit x11docker/enlightenment` |\n| [Fluxbox](https://github.com/mviereck/dockerfile-x11docker-fluxbox) (based on Debian, 87 MB) | `x11docker --desktop x11docker/fluxbox` |\n| [FVWM](https://github.com/mviereck/dockerfile-x11docker-fvwm) (based on [Alpine](https://alpinelinux.org/), 22.5 MB) | `x11docker --desktop x11docker/fvwm` |\n| [Gnome 3](https://github.com/mviereck/dockerfile-x11docker-gnome) | `x11docker --desktop --gpu --init=systemd x11docker/gnome` |\n| [KDE Plasma](https://github.com/mviereck/dockerfile-x11docker-kde-plasma) on X| `x11docker --desktop --gpu --init=systemd x11docker/kde-plasma` |\n| [KDE Plasma](https://github.com/mviereck/dockerfile-x11docker-kde-plasma) on Wayland| `x11docker --kwin --wayland x11docker/kde-plasma plasmashell` |\n| [KDE Plasma](https://github.com/mviereck/dockerfile-x11docker-kde-plasma) as nested Wayland compositor| `x11docker --gpu --init=systemd -- --cap-add SYS_RESOURCE -- x11docker/kde-plasma startplasma-wayland` |\n| [Lumina](https://github.com/mviereck/dockerfile-x11docker-lumina) ([website](https://lumina-desktop.org)) (based on [Void Linux](https://www.voidlinux.org/))| `x11docker --desktop x11docker/lumina` |\n| [LiriOS](https://liri.io/) (based on Fedora) | `x11docker --desktop --gpu lirios/unstable` |\n| [LXDE](https://github.com/mviereck/dockerfile-x11docker-lxde) | `x11docker --desktop x11docker/lxde` |\n| [LXDE with wine and PlayOnLinux](https://github.com/mviereck/dockerfile-x11docker-lxde-wine) and <br> a persistent `HOME` folder to preserve <br> installed Windows applications, <br> and with Pulseaudio sound. | `x11docker --desktop --home --pulseaudio x11docker/lxde-wine` |\n| [LXQt](https://github.com/mviereck/dockerfile-x11docker-lxqt) | `x11docker --desktop x11docker/lxqt` |\n| [Mate](https://github.com/mviereck/dockerfile-x11docker-mate) | `x11docker --desktop x11docker/mate` |\n| [Trinity](https://github.com/mviereck/dockerfile-x11docker-trinity) ([website](https://www.trinitydesktop.org/)) (successor of KDE 3) | `x11docker --desktop x11docker/trinity` |\n| [Xfce](https://github.com/mviereck/dockerfile-x11docker-xfce) | `x11docker --desktop x11docker/xfce` |\n   \n### Adjust images for your needs\nFor persistent changes of image system adjust Dockerfile and rebuild. To add custom applications to x11docker example images you can create a new Dockerfile based on them. Example:\n```Dockerfile\n# xfce desktop with VLC media player\nFROM x11docker/xfce\nRUN apt-get update && apt-get install -y vlc\n```\n  \n### Screenshots\nMore screenshots are stored in [screenshot branch](https://github.com/mviereck/x11docker/tree/screenshots)\n\n`x11docker --desktop x11docker/lxqt`\n![screenshot](https://raw.githubusercontent.com/mviereck/x11docker/screenshots/screenshot-lxqt.png \"LXQT desktop in docker\")\n\n`x11docker --desktop x11docker/lxde-wine`\n![screenshot](https://raw.githubusercontent.com/mviereck/x11docker/screenshots/screenshot-lxde-wine.png \"LXDE desktop in docker\")\n\n`x11docker --desktop --gpu --init=systemd -- --cap-add=IPC_LOCK --security-opt seccomp=unconfined -- x11docker/deepin`\n![screenshot](https://raw.githubusercontent.com/mviereck/x11docker/screenshots/screenshot-deepin.png \"deepin desktop in docker\")\n\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 4.2333984375,
          "content": "# ToDo\nx11docker ToDo notes\n\n## Work in progress\n - bug: ssh: --hostdisplay fails\n - bug: setting XAUTHORITY with systemctl\n\n - kata: add new runtime for nerdctl io.containerd.kata.v2 \n\n - --kwin in weston segfaults\n - --xc --xorg: MIT-SHM fails\n - --xc --xorg rootless fails\n - --xc --kwin on console: tty switch fails with unprivileged user\n\n - --build=nvidia?\n - x11docker/nvidia-base: use tags with version number?\n\n - further centralize argument checks\n - --pulseaudio=host: check possible tcp setup\n\n - sommelier\n - check empty XDG_RUNTIME_DIR e.g. with --user, --hostuser \n\n## Issues to fix\n - --build: download files for COPY/ADD (x11docker/check, x11docker/xserver)\n - `--remove`: give note about not removed files in `~./config/x11docker` and `/etc/x11docker`\n - `--update`: Check if installs not into `/usr/bin` or `/usr/local/bin`. Do not install other files then.\n - --clipboard: improve Wayland clipboard support\n   \n## Checks\n - check all `--init=` in all backends rootful and rootless.\n   - checked: \n     - rootful docker: all\n     - rootless podman: systemd, openrc\n     - rootful podman: openrc\n     - rootless nerdctl: openrc\n     - rootful nerdctl: openrc\n - `--user`: Check in all rootless modes, maybe disallow except for `--user=root`.\n - `--user=root --home` in rootless docker and nerdctl: Set up HOME in host user ~/x11docker?\n - `--backend=podman` rootless: disallow `--home` for different `--user`.\n\n## Old issues to fix\n - --interactive --init=runit|openrc|sysvinit: no job control in shell\n - --interactive fails now with old systemd versions. (wontfix, not important enough)\n - --init=openrc|runit: elogind fails\n - check elogind with cgroupv2. maybe drop --sharecgroup and set up in container only\n - `--kwin-xwayland`: broken? Xwayland says: \"missing wl_shell protocol\". Deprecated yet.\n - docker-for-win: DOS newline mess in `error()` #219.\n - docker-for-win: Double entries in log.\n\n## Nice to fix\n - `--init=systemd`: check systemd warnings on x11docker services\n - `--printer`: regard host environment variable `CUPS_SERVER`. Maybe already done by `lpadmin`.\n - `pspid()`: On some systems (busybox) `ps -p` is not supported\n - `--runtime=kata-runtime`: `x11docker/lxde` needs `--init=systemd`, why? Sort of `menud` issue.\n - `--runtime=kata-runtime --nxagent`: ALT-GR works wrong.\n - `myrealpath()`: If `realpath` is missing, the path argument is returned without resolving.\n - `--interactive` not possible without `winpty` in WSL and Cygwin\n - `--interactive --enforce-i` fails. Issue is subshell containershell & in main, would work without it.\n - `--group-add`: gid 101 for both possible: `messagebus` and `systemd-journal`, works nonetheless.\n - `--keymap` does not work on tty with `--kwin` and `--kwin-xwayland`. No idea how to set it.\n - `--wayland --user`: wayland socket access denied due to `XDG_RUNTIME_DIR` file access permissions\n\n## Nice to fix (images)\n - `x11docker/fluxbox` on arch host: background can miss, sometimes no context menu. Where is the difference to other hosts?\n\n## 3rd party bugs\n  - `kwin_wayland` needs `CAP_SYS_RESOURCE` even if running nested\n  - `Xwayland` does not support X over IP (`-listen tcp`) or iglx.\n - Xwayland does not always sit at 0.0 on multiple outputs. \n   https://bugzilla.redhat.com/show_bug.cgi?id=1498665\n - `--kwin*`: wrong fullscreen and crashes in gnome-wayland, strange in weston, WAYLAND_DISPLAY=\"\" does not help, probably bug in kwin\n - scale>1 Xwayland in Weston is too large (Xwayland bug), rendering issues on tty (switching scaled/unscaled Xwayland on keyboard/mouse events). \n   https://bugzilla.redhat.com/show_bug.cgi?id=1498669\n  \n## Improvements\n - `--cleanup`: avoid hardcoded paths\n - `x11docker/check`: palinopsia: check video RAM size with `glxinfo`, adjust requested RAM size.\n - further checks of `/etc/pam.d`\n - further checks of multimonitor behaviour\n - `--init=s6-overlay`: find better solution then sleep loop for empty CMD\n - `--init=s6-overlay`: check possible shutdown routine for timetosaygoodbye\n - `--init=s6-overlay`: closer check of needed capabilities\n - fedora: SElinux issue: `--security-opt label=type:container_runtime_t`: need more restrictive setting to just allow socket access.\n   https://unix.stackexchange.com/questions/386767/selinux-and-docker-allow-access-to-x-unix-socket-in-tmp-x11-unix\n  \n"
        },
        {
          "name": "paper.bib",
          "type": "blob",
          "size": 3.4365234375,
          "content": "@article{boettiger_introduction_2015,\n\ttitle = {An introduction to {Docker} for reproducible research, with examples from the {R} environment},\n\tvolume = {49},\n\tissn = {01635980},\n\tdoi = {10.1145/2723872.2723882},\n\tnumber = {1},\n\turldate = {2016-01-19},\n\tjournal = {ACM SIGOPS Operating Systems Review},\n\tauthor = {Boettiger, Carl},\n\tmonth = jan,\n\tyear = {2015},\n\tpages = {71--79}\n}\n\n@inproceedings{cito_using_2016,\n\tseries = {{ICSE} '16},\n\ttitle = {Using {Docker} {Containers} to {Improve} {Reproducibility} in {Software} {Engineering} {Research}},\n\tisbn = {978-1-4503-4205-6},\n\tdoi = {10.1145/2889160.2891057},\n\tbooktitle = {Proceedings of the 38th {International} {Conference} on {Software} {Engineering} {Companion}},\n\tpublisher = {ACM},\n\tauthor = {Cito, Jürgen and Gall, Harald C.},\n\tyear = {2016},\n\tpages = {906--907}\n}\n\n@article{emsley_framework_2018,\n\ttitle = {A {Framework} for the {Preservation} of a {Docker} {Container} {\\textbar} {International} {Journal} of {Digital} {Curation}},\n\tvolume = {12},\n\tdoi = {10.2218/ijdc.v12i2.509},\n\tlanguage = {en-US},\n\tnumber = {2},\n\turldate = {2019-01-07},\n\tjournal = {International Journal of Digital Curation},\n\tauthor = {Emsley, Iain and De Roure, David},\n\tmonth = apr,\n\tyear = {2018}\n}\n\n@article{hosny_algorun_2016,\n\ttitle = {{AlgoRun}: a {Docker}-based packaging system for platform-agnostic implemented algorithms},\n\tvolume = {32},\n\tissn = {1367-4803},\n\tshorttitle = {{AlgoRun}},\n\tdoi = {10.1093/bioinformatics/btw120},\n\tlanguage = {en},\n\tnumber = {15},\n\tjournal = {Bioinformatics},\n\tauthor = {Hosny, Abdelrahman and Vera-Licona, Paola and Laubenbacher, Reinhard and Favre, Thibauld},\n\tmonth = aug,\n\tyear = {2016},\n\tpages = {2396--2398}\n}\n\n@inproceedings{project_jupyter-proc-scipy-2018,\n\tauthor = {{P}roject {J}upyter and {M}atthias {B}ussonnier and {J}essica {F}orde and {J}eremy {F}reeman and {B}rian {G}ranger and {T}im {H}ead and {C}hris {H}oldgraf and {K}yle {K}elley and {G}ladys {N}alvarte and {A}ndrew {O}sheroff and {M} {P}acer and {Y}uvi {P}anda and {F}ernando {P}erez and {B}enjamin {R}agan-{K}elley and {C}arol {W}illing},\n\ttitle = {{B}inder 2.0 - {R}eproducible, interactive, sharable environments for science at scale},\n\tbooktitle = {{P}roceedings of the 17th {P}ython in {S}cience {C}onference},\n\turl = {http://conference.scipy.org/proceedings/scipy2018/pdfs/project_jupyter.pdf},\n\tpages = {113--120},\n\tyear = {2018},\n\teditor = {{F}atih {A}kici and {D}avid {L}ippa and {D}illon {N}iederhut and {M} {P}acer},\n\tdoi = {10.25080/Majora-4af1f417-011}\n}\n\n@article{marwick_computational_2017,\n\ttitle = {Computational {Reproducibility} in {Archaeological} {Research}: {Basic} {Principles} and a {Case} {Study} of {Their} {Implementation}},\n\tvolume = {24},\n\tissn = {1573-7764},\n\tshorttitle = {Computational {Reproducibility} in {Archaeological} {Research}},\n\tdoi = {10.1007/s10816-015-9272-9},\n\tnumber = {2},\n\turldate = {2019-01-07},\n\tjournal = {Journal of Archaeological Method and Theory},\n\tauthor = {Marwick, Ben},\n\tmonth = jun,\n\tyear = {2017},\n\tpages = {424--450}\n}\n\n@inproceedings{rechert_preserving_2017,\n\taddress = {Heidelberg},\n\ttitle = {Preserving {Containers}},\n\tcopyright = {Creative Commons License (CC BY-SA 4.0)},\n\tisbn = {978-3-946531-75-3},\n\tdoi = {10.11588/heibooks.285.377},\n\tbooktitle = {Forschungsdaten managen},\n\tauthor = {Rechert, Klaus and Liebetraut, Thomas and Kombrink, Stefan and Wehrle, Dennis and Mocken, Susanne and Rohland, Maximilian},\n\teditor = {Kratzke, Jonas and Heuveline, Vincent},\n\tyear = {2017},\n\tpages = {143--151}\n}\n"
        },
        {
          "name": "paper.md",
          "type": "blob",
          "size": 4.2119140625,
          "content": "---\ntitle: 'x11docker: Run GUI applications in Docker containers'\ntags:\n  - docker\n  - graphical user interface\n  - software development\n  - software deployment\n  - sandbox\n  - reproducibility\n  - reproducible research\n  - prototyping\nauthors:\n  - name: Martin Viereck\n    orcid: 0000-0002-4532-4020\n    affiliation: \"1\"\naffiliations:\n  - name: No affiliations.\n    index: 1\ndate: 22 March 2019\nbibliography: paper.bib\n---\n\n# Summary\n\n[`x11docker`](https://github.com/mviereck/x11docker) allows to run graphical applications in a \n[GNU/Linux container](https://en.wikipedia.org/wiki/Operating-system-level_virtualization) using \n[Docker](https://www.docker.com).\n\n## About containers in general\nContainerisation in general has proven as a useful technology for packaging applications and their \ndependencies for deployment in cloud-based infrastructures.\nContainers need much less resources than [virtual machines](https://en.wikipedia.org/wiki/Virtual_machine)\nfor similar tasks. The technical concept, however, is different.\n\nThe properties of containers such as portability, isolation, and version management of complete \napplication stacks make it a promising candidate to increase computational reproducibility and \nreusability of research analyses [@boettiger_introduction_2015].\nTheir use has been demonstrated in various disciplines, such as software engineering research \n[@cito_using_2016], bioinformatics [@hosny_algorun_2016], and archeology [@marwick_computational_2017], \nand their preservation is an active field of research [@rechert_preserving_2017; @emsley_framework_2018].\n\nSoftware and required libraries can be installed in a Docker image to run software that is difficult \nto install otherwise. It is possible to run outdated versions, specific versions, or latest development \ncode side by side.\n\n## About x11docker\n\nThe most popular Linux container frontend, Docker, does not provide a \n[display server](https://en.wikipedia.org/wiki/Display_server) that would allow running applications \nwith a [graphical user interface](https://en.wikipedia.org/wiki/Graphical_user_interface) (GUI), \nbecause Docker is originally built for server software.\n`x11docker` fills this gap.\n\n`x11docker` allows to execute [Desktop](https://en.wikipedia.org/wiki/Desktop_environment) GUI applications\nin an isolated environment by running an [X display server](https://en.wikipedia.org/wiki/X_Window_System) \non the host system and providing it to applications in Docker containers.\n\n`x11docker` simplifies container setup and access to host resources like shared files, GPU acceleration, \naudio, webcam and printer. Non-GUI applications can benefit from this, too.\n\nAdditionally, `x11docker` does some [security setup](https://github.com/mviereck/x11docker#security) \nto enhance container isolation from host system.\nIt follows the [principle of least privilege](https://en.wikipedia.org/wiki/Principle_of_least_privilege).\n\n`x11docker` thereby facilitates quick creation, distribution, and evaluation of research prototypes \nwithout compromising on a researcher's skills (not imposing browser-based GUI nor requiring \ncommand-line proficiency), domain (having e.g. established and widely-acknowledged GUI-based tools), \nsecurity, computational reproducibility, or a scholarly review process.\n\nThe target audience of `x11docker` in general are users who want to run GUI applications in containers.\nAnother target audience are developers of GUI applications who need an isolated environment.\nIn scientific and academic context the target audience are researchers in the field of reproducible science.\n\n`x11docker` is developed on GNU/Linux and was tested on several distributions. \nWith a few limitations it can run natively on MS Windows, too, but is not guaranteed to be as reliable as on GNU/Linux.\nRunning in a Virtual Linux Machine on MS Windows and macOS is fully supported. \n`x11docker` has an optional graphical frontend, `x11docker-gui`.\n\n# Alternatives to x11docker\n\nA common way to allow GUI applications in containers is by providing a web server within the container \nand rendering an HTML-based GUI in a web browser, e.g. as Jupyter notebooks [@project_jupyter-proc-scipy-2018]. \nFurther possibilities are an xrdp server, VNC server, SSH server or xpra server within the container.\n\n# References\n"
        },
        {
          "name": "x11docker",
          "type": "blob",
          "size": 448.1171875,
          "content": "#! /usr/bin/env bash\n\n# x11docker\n# Run GUI applications and desktop environments in Docker containers.\n#\n# - Runs additional X servers to circumvent common X security leaks.\n# - Restricts container capabilities to enhance container security.\n# - Container user is same as host user to avoid root in container.\n# - Features e.g. sound, hardware acceleration and data storage.\n#\n# Run 'x11docker --help' or scroll down to read usage information.\n# More documentation at:  https://github.com/mviereck/x11docker\n\nVersion=\"7.6.3-beta\"\nPackagedversion=\"no\" # Set to \"yes\" if you want to package x11docker. This disables installation options.\n\n# --enforce-i: Enforce running in interactive mode to allow commands tty and weston-launch in special setups. (deprecated)\ngrep -q -- \"--enforce-i\" <<< \"$*\" && case $- in\n  *i*) set +H ;;\n  *)   exec bash --noprofile --norc --noediting -i -- \"$0\" \"$@\" ;;\nesac\n\nusage() {                       # --help: show usage information\n  echo \"\nx11docker: Run GUI applications and desktop environments in containers.\n           Supports docker, podman, and (experimental) nerdctl.\n           Can run X servers from host or in containers of x11docker/xserver.\n           Can also provide X servers to host applications.\nUsage:\nTo run a container on a new X server:\n  x11docker IMAGE\n  x11docker [OPTIONS] IMAGE [COMMAND]\n  x11docker [OPTIONS] -- IMAGE [COMMAND [ARG1 ARG2 ...]]\n  x11docker [OPTIONS] -- CUSTOM_RUN_OPTIONS -- IMAGE [COMMAND [ARG1 ARG2 ...]]\nTo run a host application on a new X server:\n  x11docker [OPTIONS] --backend=host COMMAND\n  x11docker [OPTIONS] --backend=host -- COMMAND [ARG1 ARG2 ...]\n  x11docker [OPTIONS] --backend=host -- -- COMMAND [ARG1 ARG2 ...] -- [ARG3]\nTo run only an empty new X server:\n  x11docker [OPTIONS] --xonly\n\nx11docker always runs a fresh container from image and discards it afterwards.\nRuns on Linux and (with some restrictions) on MS Windows. Not adapted for macOS.\n\nOptional features:\n  * GPU hardware acceleration\n  * Sound with pulseaudio or ALSA\n  * Clipboard sharing\n  * Printer access\n  * Webcam access\n  * Persistent home folder\n  * Wayland support\n  * Language locale creation\n  * Several init systems and DBus in container\n  * Support of several container runtimes and backends\nFocus on security:\n  * Avoids X security leaks using additional X servers.\n  * Container user is same as host user to avoid root in container.\n  * Restricts container capabilities to bare minimum.\nTo switch between docker, podman and nerdctl use option --backend.\n\nx11docker sets up an unprivileged container user with password 'x11docker'\nand restricts container capabilities. Some applications might behave different\nthan with a regular 'docker run' command due to these security restrictions.\nAchieve a less restricted setup with --cap-default or --sudouser.\n\nDependencies on host:\n  For core functionality x11docker only needs bash, an X server and one of\n  docker, podman or nerdctl.\n  Depending on chosen options x11docker might need some additional tools.\n  It checks for them on startup and shows messages if some are missing.\n   * Most recommended: Provide image x11docker/xserver to run X or Wayland\n     in container. The image contains all X related dependencies.\n  Otherwise provide on host:\n   * Recommended to allow security and convenience:\n       X servers: xpra Xephyr nxagent Xorg\n       X tools:   xauth xclip xrandr xhost xinit\n   * Additional for advanced GPU support: weston Xwayland xpra xdotool\n  See also: https://github.com/mviereck/x11docker/wiki/Dependencies\n\nDependencies in image:\n  No dependencies in image except for a few feature options. Most important:\n   --gpu:  OpenGL/MESA packages, collected often in 'mesa-utils' package.\n   --pulseaudio: Needs pulseaudio on host and pulseaudio client libs in image.\n   --printer: Needs cups on host and cups client libs in image.\n  See also: https://github.com/mviereck/x11docker/wiki/Dependencies\n\nOptions: (short options do not accept arguments)\n     --help            Display this message and exit.\n     --license         Show license of x11docker (MIT) and exit.\n     --version         Show x11docker version and exit.\n\nBasic settings:\n -d, --desktop         Indicate a desktop environment in image.\n -i, --interactive     Run with an interactive tty to allow shell commands.\n                       Useful with commands like bash.\n     --backend=BACKEND  Container backend to use. BACKEND can be:\n                         docker  (recommended for rootful) (default)\n                         podman  (recommended for rootless and rootful)\n                         nerdctl (experimental)\n                         host    Run a host application, no container.\n     --rootless [=yes|no]  Use (or disallow) rootless backend.\n                       Default behaviour without option --rootless:\n                       --backend=docker: rootful unless DOCKER_HOST is set.\n                       --backend=podman: rootless except started as root.\n                       --backend=nerdctl: rootless except started as root\n     --xc [=yes|no|BACKEND]  Run X server in container of x11docker/xserver.\n                       BACKEND can specify one of docker|podman|nerdctl.\n     --xonly           Only start empty X server.\n\nHost integration:\n     --alsa [=ALSA_CARD]  Sound with ALSA. You can define a desired sound card\n                       with ALSA_CARD. List of available sound cards: aplay -l\n -c, --clipboard [=yes|no|oneway|superv|altv] Share clipboard with host. \n                       Possible arguments:\n                         yes:    Share clipboard in both directions.\n                                 Includes middle-mouse-click selection.\n                         oneway: Copy clipboard from container to host only.\n                                 Includes middle-mouse-click selection.\n                         superv: Keys [SUPER][v] copy clipboard from host to \n                                 container. Does not copy middle-mouse-click\n                                 to container. Otherwise same as 'oneway'.\n                         altv:   Same as 'superv' but using keys [ALT][v].\n                         no:     Do not share clipboard.\n -g, --gpu [=yes|no|iglx|virgl] GPU access for hardware accelerated OpenGL.\n                       Works best with open source drivers on host and in image.\n                       For closed source nvidia drivers regard terminal output.\n                       Direct rendering supported by few X server options only.\n                       Arg 'iglx' enables indirect rendering (--xorg only).\n                       Arg 'virgl' allows GPU access for all X servers, but\n                       with limited performance and with --xc only.\n -I, --network [=NET]  Allow internet access. (i.e. allow Docker default.)\n                       For optional argument NET see Docker documentation of\n                       docker run option --network. Docker default is bridge.\n -l, --lang [=LOCALE]  Set language variable LANG=LOCALE in container.\n                       Without arg LOCALE host variable --lang=\\$LANG is used.\n                       If LOCALE is missing in image, x11docker generates it\n                       with 'localedef' in container (needs 'locales' package).\n                       Examples for LOCALE: ru, en, de, zh_CN, cz, fr, fr_BE.\n -P, --printer [=MODE] Share host printers through CUPS server.\n                       Optional MODE can be 'socket' or 'tcp'. Default: socket\n -p, --pulseaudio [=MODE]  Sound with pulseaudio. Needs 'pulseaudio' on host\n                       and in image. Optional arg MODE can be 'socket', 'tcp'\n                       or 'host'. tcp mode needs network access with --network.\n     --webcam          Share host webcam device files.\n\nShared host folders or volumes:\n -m, --home [=ARG]     Create a persistent HOME folder for data storage.\n                       Default: Uses ~/.local/share/x11docker/IMAGENAME.\n                       ARG can be another host folder or a volume.\n                       (~/.local/share/x11docker has a softlink to ~/x11docker.)\n                       (Use --homebasedir to change this base storage folder.)\n     --share=ARG       Share host file or folder ARG. Read-only with ARG:ro\n                       Device files in /dev can be shared, too.\n                       ARG can also be a volume instead of a host folder.\n\nX server options:\n     --auto            Automatically choose X server (default). Influenced\n                       notably by options --desktop, --gpu, --wayland, --wm.\n -h, --hostdisplay     Share host display :0. Quite bad container isolation!\n                       Least overhead of all X server options.\n -a, --xpra            Nested X server supporting seamless and --desktop mode.\n     --xpra2           Like --xpra --xc, but runs xpra client on host.\n -A, --xpra-xwayland   Like --xpra, but supports option --gpu.\n     --xpra2-xwayland  Like --xpra2, but supports option --gpu.\n -n, --nxagent         Nested X server supporting seamless and --desktop mode.\n                       Faster than --xpra, but can have compositing issues.\n -y, --xephyr          Nested X server for --desktop mode. Without --desktop\n                       a host window manager will be provided (option --wm).\n -Y, --weston-xwayland Desktop mode like --xephyr, but supports option --gpu.\n                       Runs from console, within X and within Wayland.\n -x, --xorg            Core Xorg server. Runs ootb from console.\n                       Switch tty with <CTRL><ALT><F1>....<F12>. Always switch\n                       to a black tty before switching to X to avoid crashes.\n\nSpecial X server options:\n -t, --tty             Terminal only mode. Does not run an X or Wayland server.\n     --xvfb            Invisible X server using Xvfb.\n                       Can be used for custom access with xpra or VNC.\n -X, --xwayland        Blanc Xwayland, needs a running Wayland compositor.\n     --xwin            X server to run in Cygwin/X on MS Windows.\n     --runx            X server wrapper for VcXsrv and Xwin on MS Windows.\n\nWayland instead of X:\n -W, --wayland         Automatically set up a Wayland environment.\n                       Chooses one of following options and regards --desktop.\n -T, --weston          Weston without X for pure Wayland applications.\n                       Runs in X, in Wayland or from console.\n -K, --kwin            KWin without X for pure Wayland applications.\n                       Runs in X, in Wayland or from console.\n -H, --hostwayland     Share host Wayland without X for pure Wayland apps.\n\nX and Wayland appearance options:\n     --border [=COLOR] Draw a colored border in windows of --xpra[-xwayland].\n                       Argument COLOR can be e.g. 'orange' or '#F00'. Thickness\n                       can be specified, too, e.g. 'red,3'. Default: 'blue,1'\n     --dpi=N           dpi value (dots per inch) to submit to X clients.\n                       Influences font size of some applications.\n -f, --fullscreen      Run in fullscreen mode.\n     --output-count=N  Multiple virtual monitors for Weston or KWin.\n     --rotate=N        Rotate display (--xorg, --weston and --weston-xwayland)\n                       Allowed values: 0, 90, 180, 270, flipped, flipped-90,\n                       flipped-180, flipped-270.  (flipped means mirrored)\n     --scale=N         Scale/zoom factor N for xpra, Xorg or Weston.\n                       Allowed for --xpra* and --xorg: 0.25...8.0.\n                       Allowed for --weston and --weston-xwayland: 1...9.\n     --size=WxH        Screen size of new X server (e.g. 800x600).\n -w, --wm [=ARG]       Provide a host window manager to container applications.\n                       Possible ARG:\n                         host: autodetection of a host window manager.\n                         COMMAND: command of a desired host window manager.\n                         none: Run without a window manager. Same as --desktop.\n -F, --xfishtank       Show fish tank on new X server.\n\nX and Wayland special configuration:\n     --checkwindow [=ARG]  Run container until all X windows are closed.\n                       If ARG is provided, run container as long as 'grep' can\n                       find ARG in output of 'xwininfo -root -children'.\n                       This option helps to keep alive containers with\n                       self-forking applications like gnome-terminal\n                       or to stop endless running ones like chromium.\n     --clean-xhost     Disable xhost access policies on host display.\n     --composite [=yes|no]  Enable or disable X extension Composite.\n                       Default is yes except for --nxagent. Can cause or\n                       fix issues with some applications on nxagent.\n     --display=N       Use display number N for new X server.\n     --keymap=LAYOUT   Set keyboard layout for new X server, e.g. de, us, ru.\n                       For possible LAYOUT look at /usr/share/X11/xkb/symbols.\n     --vt [=N]         Use vt / tty N. Without N search an unused tty.\n     --westonini=FILE  Custom weston.ini for --weston and --weston-xwayland.\n     --xhost [=STR]    Set \\\"xhost STR\\\" on new X server (see 'man xhost').\n                       Without STR will set:  +SI:localuser:\\$USER\n                       (Use with care. '--xhost=+' allows access for everyone).\n     --xoverip [=yes|no|listentcp|socat] Connect to X over TCP network. Special\n                       setups only, usually only enabled by x11docker itself.\n                         yes:       Use listentcp if possible, otherwise socat.\n                         no:        Use shared unix socket (default).\n                         listentcp: Use X option '-listen tcp'.\n                         socat:     Use socat to create a fake TCP connection.\n     --xauth [=yes|trusted|untrusted|no] Configure X cookie authentication.\n                       Possible arguments:\n                         yes|trusted: Enable cookie authentication with trusted\n                                    cookies. (General x11docker default.)\n                         untrusted: Untrusted cookie for untrusted apps\n                                    limiting access to X resources.\n                                    Useful to avoid MIT-SHM with --hostdisplay.\n                         no:        Disable cookie authentication. Dangerous!\n     --xtest [=yes|no] Enable or disable X extension XTEST. Default is yes for\n                       --xpra and --xvfb, no for other X servers.\n                       Needed to allow keyboard and mouse control with xpra.\n\nContainer user settings:\n     --group-add=GROUP Add container user to group GROUP.\n     --hostuser=USER   Run X (and container user) as user USER. Default is\n                       result of \\$(logname). (x11docker must run as root).\n     --password [=WORD]   Change container user password and exit.\n                       Interactive input if argument WORD is not provided.\n                       Stored encrypted in ~/.config/x11docker/passwd.\n     --sudouser [=nopasswd] Allow su and sudo for container user. Use with care,\n                       severe reduction of default x11docker security!\n                       Optionally passwordless sudo with argument nopasswd.\n                       Default password is 'x11docker'.\n     --user=N          Create container user N (N=name or N=uid). Default:\n                       same as host user. N can also be an unknown user id.\n                       You can specify a group id with N being 'user:gid'.\n                       Special case: --user=RETAIN keeps image user settings.\n\nContainer capabilities:\n  In most setups x11docker sets --cap-drop=ALL --security-opt=no-new-privileges\n  and shows warnings if doing otherwise.\n  Custom capabilities can be added with --cap-add=CAP after  --\n     --cap-default     Allow default container capabilities.\n                       Includes --newprivileges=yes.\n     --ipc [=ARG]      Without ARG sets run option --ipc=host. (Discouraged)\n                       For other possible ARG see docker run reference.\n     --limit [=FACTOR] Limit CPU and RAM usage of container to\n                       currently free RAM x FACTOR and available CPUs x FACTOR.\n                       Allowed range is 0 < FACTOR <= 1.\n                       Default for --limit without argument FACTOR: 0.5\n     --newprivileges [=yes|no|auto]  Set or unset run option\n                       --security-opt=no-new-privileges. Default with no\n                       argument is 'yes'. Default for most cases is 'no'.\n\nContainer init system, elogind and DBus daemon:\n     --dbus [=system]  Run DBus user session daemon for container command.\n                       With argument 'system' also run a DBus system daemon.\n                       (To run a DBus system daemon rather use one of\n                        --init=systemd|openrc|runit|sysvinit )\n     --hostdbus        Connect to DBus user session from host.\n     --init [=INITSYSTEM] Run an init system as PID 1 in container. Solves the\n                       zombie reaping issue. INITSYSTEM can be:\n                         tini:       Default. Mostly present as docker-init\n                                     on host. x11docker might as well use\n                                     catatonit provided by podman.\n                         systemd:    systemd in container.\n                         sysvinit:   sysvinit in container.\n                         runit:      runit in container\n                         openrc:     openrc in container\n                         s6-overlay: s6-overlay in container.\n                         none:       No init system, CMD will be PID 1.\n     --sharecgroup     Share /sys/fs/cgroup. Allows elogind in container if\n                       used with one of --init=openrc|runit|sysvinit\n\nContainer special configuration:\n     --env VAR=value   Set custom environment variable VAR=value\n     --name=NAME       Specify container name NAME.\n     --no-entrypoint   Disable ENTRYPOINT in image to allow other commands, too\n     --no-setup        No x11docker setup in running container. Disallows\n                       several other options. See also --user=RETAIN.\n     --runtime=RUNTIME  Specify container runtime. Known by x11docker:\n                         runc:         Docker default runtime.\n                         crun:         Fast replacement for runc written in C.\n                         nvidia:       Runtime for nvidia/nvidia-docker images.\n                         sysbox-runc:  Runtime for powerful root in container.\n     --shell=SHELL     Set preferred user shell. Example: --shell=/bin/zsh\n     --snap            Enable support for Docker in snap.\n     --stdin           Forward stdin of x11docker to container command.\n     --workdir=DIR     Set working directory DIR.\n\nAdditional commands: (You might need to move them to background with 'CMD &'.)\n     --runasroot=CMD   Run command CMD as root in container.\n     --runasuser=CMD   Run command CMD with user privileges in container\n                       before running image command.\n     --runfromhost=CMD Run host command CMD on new X server.\n\nMiscellaneous:\n     --build IMAGE     Build an image from a Dockerfile from x11docker\n                       repository. Example: 'x11docker --build x11docker/fvwm'\n                       Works for all repositories beginning with 'dockerfile'\n                       at https://github.com/mviereck?tab=repositories\n                       Regards (only) option --backend=BACKEND.\n     --cachebasedir=DIR  Custom base folder for cache files.\n     --homebasedir=DIR   Custom base folder for option --home.\n     --fallback [=yes|no]  Allow or deny fallbacks if a chosen option cannot\n                       be fulfilled. By default fallbacks are allowed.\n     --launcher        Create application launcher with current options\n                       on desktop and exit. You can get a menu entry moving\n                       the created .desktop file to ~/.local/share/applications\n     --mobyvm          Use MobyVM (for WSL2 only that defaults to Linux Docker).\n     --preset=FILE     Read a set of predefined options stored in file FILE.\n                       Useful to shortcut often used option combinations.\n                       FILE is searched in directory /etc/x11docker/preset,\n                       or in directory ~/.config/x11docker/preset.\n                        - Multiple lines in FILE are allowed.\n                        - Comment lines must begin with #\n                        - Local presets supersede global ones in /etc\n                       Special case: A preset file with file name 'default'\n                       will be applied automatically for all x11docker sessions.\n\nOutput of parseable information on stdout:\n  Get output e.g. with: read xenv < <(x11docker --printenv x11docker/check)\n  Optional argument FILE allows to print the information into a file.\n     --printenv [=FILE]        Print variables to access new display.\n     --printid [=FILE]         Print container ID.\n     --printinfofile [=FILE]   Print path to internal x11docker info storage.\n     --printpid1 [=FILE]       Print host PID of container PID 1.\n\nVerbosity options:\n -D, --debug           Debug mode: Show some less verbose debug output\n                       and enable rigorous error control.\n     --printcheck      Show dependency check messages.\n -q, --quiet           Suppress x11docker terminal messages.\n -v, --verbose         Be verbose. Output of x11docker.log on stderr.\n -V                    Be verbose with colored output.\n\nCleanup options (might need root permissions):\n     --cleanup         Clean up orphaned containers and cache files. Those\n                       can remain if x11docker still runs on system shutdown.\n                       Terminates currently running x11docker containers, too.\n                       Regards (only) option --backend=BACKEND.\"\n\n  case \"$Packagedversion\" in\n    yes) ;;\n    *) \n      echo \"\nInstallation options (need root permissions):\n     --install         Install x11docker from current folder.\n                       Useful to install from an extracted zip file.\n     --update [=diff]  Download and install latest release from github.\n     --update-master [=diff]  Download and install latest master version.\n                       Optional argument 'diff' shows the difference between\n                       installed and new version without installing it.\n     --remove          Remove x11docker from your system. Includes --cleanup.\n                       Preserves ~/.local/share/x11docker from option --home.\n     --remove-oldprefix   Before version 7.6.0 x11docker installed itself\n                       into /usr/bin. Now it installs into /usr/local/bin.\n                       Use --remove-oldprefix to remove /usr/bin installations.\"\n    ;;\n  esac\n\n  echo \"\nExit codes:\n  0:     Success\n  64:    x11docker error\n  130:   Terminated by ctrl-c\n  other: Exit code of command in container\n\nx11docker version: $Version\nPlease report issues and get help at: https://github.com/mviereck/x11docker\n\"\n}\nlicense() {                     # --license: show license (MIT)\necho '\nMIT License\n\nCopyright (c) 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022 Martin Viereck\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.'\n}\n\n#### messages\nalertbox() {                    # X alert box with title $1 and message $2\n  local Title Message\n  Title=\"${1:-}\"\n  Message=\"${2:-}\"\n\n  Message=\"$(echo \"$Message\" | LANG=C sed \"s/[\\x80-\\xFF]//g\" | fold -w120 )\" # remove UTF-8 special chars; line folding at 120 chars\n\n  # try some tools to show alert message. If all tools fail, return 1\n  command -v   xmessage     >/dev/null && [ -n \"${DISPLAY:-}\" ] && {\n    echo \"$Title\n\n$Message\" | xmessage  -file - -default okay ||:\n  } || {\n    command -v gxmessage    >/dev/null && [ -n \"${DISPLAY:-}\" ] && {\n      echo \"$Title\n\n$Message\" | gxmessage -file - -default okay ||:\n    }\n  } || {\n    command -v zenity       >/dev/null && [ -n \"${DISPLAY:-}\" ] && {\n      zenity --error --no-markup --ellipsize --title=\"$Title\" --text=\"$Message\" 2>/dev/null ||:\n    }\n  } || {\n    command -v yad          >/dev/null && [ -n \"${DISPLAY:-}\" ] && {\n      yad  --image \"dialog-error\" --title \"$Title\" --button=gtk-ok:0 --text \"$(echo \"$Message\" | sed 's/\\\\/\\\\\\\\/g')\" --fixed 2>/dev/null ||:\n    }\n  } || {\n    command -v kdialog      >/dev/null && [ -n \"${DISPLAY:-}\" ] && {\n      kdialog --title \"$Title\" --error \"$(echo \"$Message\" | sed 's/\\\\/\\\\\\\\/g' )\" 2>/dev/null ||:\n    }\n  } || {\n    command -v xterm        >/dev/null && [ -n \"${DISPLAY:-}\" ] && {\n      xterm -title \"$Title\" -e \"echo '$(echo \"$Message\" | sed \"s/'/\\\"/g\")' ; read -n1\" ||:\n    }\n  } || {\n    notify-send \"$Title:\n\n$Message\" 2>/dev/null\n  } || {\n    warning \"Could not display message on X:\n$Message\"\n    return 1\n  }\n  return 0\n}\ndebugnote() {                   # show debug output $*\n  [ \"$Debugmode\" = \"yes\" ] && [ \"$Verbose\" != \"yes\" ] && echo \"${Colblue}DEBUGNOTE[$(timestamp)]:${Colnorm} $*\" >&${FDstderr}\n  logentry \"DEBUGNOTE[$(timestamp)]: $*\"\n  return 0\n}\nerror() {                       # show error message and exit\n  local Message\n\n  break >/dev/null 2>&1 # just in case error occurred in a loop\n\n  Message=\"$*\n\n  Type 'x11docker --help' for usage information\n  Debug options: '--verbose' (full log) or '--debug' (log excerpt).\n  Logfile will be: $Logfilebackup\n  Please report issues at https://github.com/mviereck/x11docker\"\n\n  Message=\"$(rmcr <<< \"$Message\")\"\n\n  # output to terminal\n  echo -e \"\n${Colredbg}x11docker ERROR:${Colnorm} $Message\n\" >&2\n\n  # output to logfile\n  logentry \"x11docker ERROR: $Message\n\"\n  saygoodbye error\n  storeinfo test error && waitfortheend\n  storeinfo error=64\n\n  # output to X dialogbox if not running in terminal\n  [ \"$Runsinterminal\" = \"no\" ] && [ \"$Silent\" = \"no\" ] && export ${Hostxenv:-DISPLAY} && alertbox \"x11docker ERROR\" \"$Message\" &\n\n  finish\n}\nlogentry() {                    # write into logfile\n  [ -e \"$Logfile\" ] && {\n    [ -n \"$Logmessages\" ] && echo \"$Logmessages\" >> \"$Messagelogfile\" 2>/dev/null && Logmessages=\"\"\n    echo \"$*\" >> \"$Messagelogfile\" 2>/dev/null\n    :\n  } || Logmessages=\"$Logmessages\n$*\"\n}\nnote() {                        # show notice messages\n  [ \"$Verbose\" = \"yes\" ] || echo \"${Colgreen}x11docker note:${Colnorm} $*\n\" >&${FDstderr}\n  logentry \"x11docker note: $*\n\"\n}\ntraperror() {                   # trap ERR: --debug: Output for 'set -o errtrace'\n  debugnote \"traperror: Command at Line ${2:-} returned with error code ${1:-}:\n  ${4:-}\n  ${3:-} - ${5:-}\"\n  storeinfo error=64\n  saygoodbye traperror\n}\nverbose() {                     # show verbose messages\n  # only logfile notes here, terminal output is done with tail in setup_verbosity()\n  logentry \"x11docker[$(timestamp)]: $*\n\"\n}\nwarning() {                     # show warning messages\n  [ \"$Verbose\" = \"yes\" ] || echo \"${Colyellow}x11docker WARNING:${Colnorm} $*\n\" >&${FDstderr}\n  logentry \"x11docker WARNING: $*\n\"\n}\nwatchmessagefifo() {            # watch for messages coming from inside of container\n  # message in fifo must end with :$Messagetype\n  local Line= Message= Messagetype=\n  trap '' SIGINT\n  while [ -e \"$Cachefolder\" ]; do\n    IFS= read -r Line <&${FDmessage} ||:\n    [ \"$Line\" ] || sleep 2  # sleep for MSYS2/CYGWIN workaround\n    [ \"$Line\" ] && Message=\"$Message\n$Line\"\n    grep -q -E \":WARNING|:NOTE|:DEBUGNOTE|:VERBOSE|:ERROR|:STDOUT\" <<< \"$Line\" && {\n      Messagetype=\":$(echo \"$Line\" | rev | cut -d: -f1  | rev | tr -d ' ')\"\n      Message=\"${Message%$Messagetype}\"\n      Message=\"$(tail -n +2 <<< \"$Message\")\" # remove leading newline\n      case \"$Messagetype\" in\n        :WARNING)   warning   \"$Message\" ;;\n        :NOTE)      note      \"$Message\" ;;\n        :DEBUGNOTE) debugnote \"$Message\" ;;\n        :ERROR)     error     \"$Message\" ;;\n        :VERBOSE)   [ \"-d \" = \"$(cut -c1-3 <<<\"$Message\" | head -n1)\" ] && debugnote \"$(tail -c +4 <<< \"$Message\")\" || verbose \"$Message\" ;;\n        :STDOUT)    echo \"$Message\" ;;\n      esac\n      Message=\n      Messagetype=\n    }\n  done\n}\n\n#### exit\nfinish() {                      # trap EXIT routine to clean up background processes and cache\n  local Pid Name Zeit Exitcode Pid1pid= Watchmessagefifopid= Count Xpid1pid\n\n  # do not finish() in subshell, just give signal to all other processes and terminate subshell\n  [ \"$$\" = \"$BASHPID\" ] || {\n    saygoodbye finish-subshell\n    exit 0\n  }\n\n  debugnote \"Terminating x11docker.\"\n  saygoodbye \"finish\"\n  trap - EXIT\n  trap - ERR\n  trap - SIGINT\n\n  while read -r Line ; do\n\n    Pid=\"$(echo \"$Line\"  | awk '{print $1}')\"\n    Name=\"$(echo \"$Line\" | awk '{print $2}')\"\n    debugnote \"finish(): Checking pid $Pid ($Name): $(pspid \"$Pid\" || echo '(already gone)')\"\n\n    checkpid \"$Pid\" && {\n      case \"$Name\" in\n        watchmessagefifo) ;;\n        containerpid1)\n          Pid1pid=\"$Pid\"\n          #[ \"$Winsubsystem\" ] && Pid1pid=\"\"\n          termpid \"$Pid1pid\" \"$Name\" || Debugmode=\"yes\"\n          # Give container time for graceful shutdown\n          for Count in 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0; do\n            checkpid \"$Pid1pid\" || break\n            mysleep \"$(awk \"BEGIN { print $Count * 0.1 }\")\"\n            debugnote \"finish(): Waiting for container PID 1: $Pid1pid to terminate.\"\n          done\n          checkpid \"$Pid1pid\" && unpriv_backend \"$Backendbin stop $Containername\"\n        ;;\n        Xcontainerpid1)\n          Xpid1pid=\"$Pid\"\n          #[ \"$Winsubsystem\" ] && Pid1pid=\"\"\n          termpid \"$Xpid1pid\" \"$Name\" || Debugmode=\"yes\"\n          # Give container time for graceful shutdown\n          for Count in 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0; do\n            checkpid \"$Xpid1pid\" || break\n            mysleep \"$(awk \"BEGIN { print $Count * 0.1 }\")\"\n            debugnote \"finish(): Waiting for X container PID 1: $Xpid1pid to terminate.\"\n          done\n          checkpid \"$Xpid1pid\" && unpriv_xcbackend \"$Xcontainerbackend stop $Xcontainername\"\n        ;;\n        *)\n          termpid \"$Pid\" \"$Name\"\n        ;;\n      esac\n    }\n  done < <(tac \"$Storepidfile\" 2>/dev/null)\n\n  # --pulseaudio: unload module\n  Pulseaudiomoduleid=\"$(storeinfo dump pulseaudiomoduleid)\"\n  [ \"$Pulseaudiomoduleid\" ] && unpriv \"pactl unload-module '$Pulseaudiomoduleid'\"\n\n  # --xc --xoverip: remove possible internal network\n  setup_xcnetwork remove\n\n  # Check if container is still running -> docker stop\n  case \"$Backend\" in\n    docker|podman|nerdctl)\n      containerisrunning && {\n        Debugmode=\"yes\"\n        debugnote \"finish(): Container still running. Executing 'docker stop'.\n  Will wait up to 15 seconds for docker to finish.\"\n        unpriv_backend \"$Backendbin stop $Containername\" >> \"$Containerlogfile\" 2>&1\n\n        Zeit=\"$(date +%s)\"\n        while :; do\n          containerisrunning || break\n          debugnote \"finish(): Waiting for container to terminate ...\"\n          sleep 1\n          [ 15 -lt $(($(date +%s) - $Zeit)) ] && break\n        done\n\n        containerisrunning && {\n          Exitcode=\"64\"\n          debugnote \"finish(): Container did not terminate as it should.\n  Will not clean cache to avoid file permission issues.\n  You can remove the new container with command:\n    docker rm -f $Containername\n  Afterwards, remove cache files with:\n    rm -R $Cachefolder\n  or let x11docker do the cleanup work for you:\n    x11docker --cleanup\"\n        } || debugnote \"finish(): Container terminated successfully\"\n      }\n    ;;\n  esac\n\n  # Stop watching for messages, check others again\n  while read -r Line ; do\n    Pid=\"$(echo \"$Line\"  | awk '{print $1}')\"\n    Name=\"$(echo \"$Line\" | awk '{print $2}')\"\n    checkpid \"$Pid\" && termpid \"$Pid\" \"$Name\"\n    checkpid \"$Pid\" && {\n      # should never happen\n      warning \"Failed to terminate pid $Pid ($Name): $(pspid \"$Pid\" ||:)\"\n      storeinfo error=64\n    }\n  done < <(tac \"$Storepidfile\" 2>/dev/null)\n\n  Exitcode=$(storeinfo dump error)\n  Exitcode=\"${Exitcode:-0}\"\n  debugnote \"x11docker exit code: $Exitcode\"\n  storeinfo test cmdexitcode && {\n    Exitcode=$(storeinfo dump cmdexitcode)\n    debugnote \"CMD exit code: $Exitcode\"\n  }\n\n  # backup of logfile in $Cachebasefolder\n  [ -e \"$Logfile\" ] && {\n    [ \"$Verbose\" ] && sleep 1\n    unpriv \"cp '$Logfile' '$Logfilebackup'\"\n    case \"$Winsubsystem\" in\n      WSL1|WSL2)\n        [ \"$Mobyvm\" = \"yes\" ] && unpriv \"cp -T '$Logfilebackup' '$Hostuserhome/.cache/x11docker/x11docker.log'\"\n      ;;\n    esac\n    #unpriv \"rmcr '$Logfilebackup'\"\n  }\n\n  # softlink to X unix socket in container\n  case \"$Xcontainer\" in\n    yes)\n      [ -L \"/tmp/.X11-unix/X$Newdisplaynumber\" ]          && rm \"/tmp/.X11-unix/X$Newdisplaynumber\"\n      [ -L \"$XDG_RUNTIME_DIR/wayland-$Newdisplaynumber\" ] && rm \"$XDG_RUNTIME_DIR/wayland-$Newdisplaynumber\"\n    ;;\n  esac\n  \n  # close file descriptors\n  mysleep 0.2\n  for Descriptor in ${FDcmdstdin} ${FDmessage} ${FDstderr} ${FDtimetosaygoodbye} ${FDwatchpid} ; do\n    exec {Descriptor}>&-\n  done\n\n  # remove cache files\n  [ \"$Preservecachefiles\" = \"no\" ] && grep -q cache <<< \"$Cachefolder\" && grep -q x11docker <<< \"$Cachefolder\" && [ \"x11docker\" != \"$(basename \"$Cachefolder\")\" ] && unpriv \"rm -f -R '$Cachefolder'\"\n\n  case \"$Runssourced\" in\n    yes) return \"$Exitcode\" ;;\n    *)   exit   \"$Exitcode\" ;;\n  esac\n}\nfinish_sigint() {               # trap SIGINT to activate debug mode on finish()\n  local Pid1pid  X11dockerpid\n  X11dockerpid=\"$(storeinfo dump x11dockerpid)\"\n  Debugmode=\"yes\"\n  [ \"$$\" = \"$X11dockerpid\" ] && {\n    debugnote \"Received SIGINT\"\n    storeinfo error=130\n    finish\n    :\n  } || {\n    debugnote \"Received SIGINT in subshell $SHLVL: $$\"\n    kill -s SIGINT \"$X11dockerpid\"\n    trap - EXIT\n    exit 130\n  }\n}\nsaygoodbye() {                  # create file signaling watching processes to terminate\n  debugnote \"time to say goodbye ($*)\"\n  [ -e \"$Timetosaygoodbyefile\" ] && echo timetosaygoodbye >> \"$Timetosaygoodbyefile\"\n  [ -e \"$Timetosaygoodbyefifo\" ] && echo timetosaygoodbye >> \"$Timetosaygoodbyefifo\"\n  return 0\n}\n\n#### watching processes\ncheckpid() {                    # check if PID $1 is active\n  #ps -p ${1:-} >/dev/null 2>&1\n  [ -e \"/proc/${1:-NONSENSE}\" ]\n}\ncontainerisrunning() {          # check if container is running\n  storeinfo test containerid || return 1\n  case \"$Mobyvm\" in\n    no)   checkpid      \"$(storeinfo dump pid1pid)\" ;;\n    yes)  unpriv_backend \"$Backendbin inspect '$(storeinfo dump containerid)'\" >/dev/null 2>&1 ;;\n  esac\n}\npspid() {                       # ps -p $1 --no-headers\n  # On some systems ps does not have option --no-headers.\n  # On some systems (busybox) ps -p is not supported  ### FIXME\n  # return 1 if not found\n  LC_ALL=C ps -p \"${1:-}\" 2>/dev/null | grep -v 'TIME'\n}\nrocknroll() {                   # check whether x11docker session is still running\n  [ -s \"$Timetosaygoodbyefile\" ]   && return 1\n  [ -e \"$Timetosaygoodbyefile\" ]   || return 1\n  return 0\n}\nsetonwatchpidlist() {           # add PID $1 to watchpidlist()\n  debugnote \"watchpidlist(): Setting pid ${1:-} on watchlist: ${2:-}\"\n  echo \"${1:-}\" >> \"$Watchpidfifo\"\n  # add to list of background processes\n  grep -q CONTAINER <<<  \"${1:-}\" || storepid \"${1:-}\" \"${2:-}\"\n}\nstorepid() {                    # store pid $1 and name $2 of process in file $Storepidfile.\n  # Store pid and process name of background processes in a file\n  # Used in finish() to clean up background processes\n  # Store:\n  #  $1 Pid\n  #  $2 codename\n  # Test for stored pid or codename:\n  #  $1 test\n  #  $2 pid or codename\n  # Dump stored pid:\n  #  $1 dump\n  #  $2 codename\n\n  case \"${1:-}\" in\n    dump) grep    -w \"${2:-}\" \"$Storepidfile\" | cut -d' ' -f1 ;;\n    test) grep -q -w \"${2:-}\" \"$Storepidfile\" ;;\n    *)\n      echo \"${1:-NOPID}\" \"${2:-NONAME}\" >> \"$Storepidfile\"\n      debugnote \"storepid(): Stored pid '${1:-}' of '${2:-}': $(pspid \"${1:-}\" ||:)\"\n    ;;\n  esac\n}\ntermpid() {                     # kill PID $1 with codename $2\n  # TERM\n  debugnote \"termpid(): Terminating ${1:-} (${2:-}): $(pspid \"${1:-}\" ||:)\"\n  checkpid \"${1:-}\" && {\n    kill \"${1:-}\" 2>/dev/null\n    :\n  } || return 0\n  mysleep 0.1\n  checkpid \"${1:-}\" && mysleep 0.4 || return 0\n\n  # KILL\n  debugnote \"termpid(): Killing ${1:-} (${2:-}): $(pspid \"${1:-}\" ||:)\"\n  checkpid \"${1:-}\" && kill -s KILL \"${1:-}\" 2>/dev/null\n  mysleep 0.2\n  checkpid \"${1:-}\" && {\n    note \"Failed to terminate ${1:-} (${2:-}): $(ps -u -p \"${1:-}\" 2>/dev/null | tail -n1)\"\n    return 1\n  }\n\n  return 0\n}\nwaitfortheend() {               # wait for end of x11docker session\n  # signal is byte in $Timetosaygoodbyefifo\n  # decent read to wait for signal to terminate\n  case \"$Usemkfifo\" in\n    yes)\n      while rocknroll; do\n        bash -c \"read -n1 <${FDtimetosaygoodbye}\" && saygoodbye timetosaygoodbyefifo || sleep 1\n      done\n    ;;\n    no|\"\") # Reading from fifo fails on Windows, workaround\n      while rocknroll; do\n        sleep 2\n      done\n    ;;\n  esac\n  return 0\n}\nwatchpidlist() {                # watch list of important pids\n  # terminate x11docker if a PID in $Watchpidlist terminates\n  # serves mainly watching X server, Wayland compositor, container and hostexe\n  # echo PIDs to watch into >{FDwatchpid} (setonwatchpidlist())\n  local Pid= Containername= Line= Watchpidlist=\n  trap '' SIGINT\n\n  while rocknroll; do\n    # check for new Pid once a second\n    read -t1 Pid <&${FDwatchpid} ||:\n    [ \"$Usemkfifo\" = \"no\" ] && sleep 2  # read does not wait if not a fifo\n    # Got new pid\n    [ \"$Pid\" ] && {\n      [ \"${Pid:0:9}\" = \"CONTAINER\" ] && {\n        # Workaround for MS Windows where the pid cannot be watched\n        Containername=\"${Pid#CONTAINER}\"\n        debugnote \"watchpidlist(): Watching Container: $Containername\"\n      } || {\n        Watchpidlist=\"$Watchpidlist $Pid\"\n        debugnote \"watchpidlist(): Watching pids:\n$(for Line in $Watchpidlist; do pspid \"$Line\" || echo \"(pid $Line not found)\" ; done)\"\n      }\n    }\n    # check all stored pids\n    for Pid in $Watchpidlist; do\n      [ -e \"/proc/$Pid\" ] || {\n        debugnote  \"watchpidlist(): PID $Pid has terminated\"\n        saygoodbye \"watchpidlist $Pid\"\n      }\n    done\n    # Container PID not watchable in MSYS2/Cygwin/WSL1.\n    [ \"$Containername\" ] && {\n      unpriv_backend \"$Backendbin inspect '$Containername'\" >/dev/null || {\n        debugnote \"watchpidlist(): Container $Containername has terminated\"\n        saygoodbye \"watchpidlist $Containername\"\n      }\n    }\n  done\n  saygoodbye \"watchpidlist\"\n}\n\n#### more or less general routines\naskyesno() {                    # ask Yes/no question. Default 'yes' for ENTER, timeout with 'no' after 60s\n  local Choice\n  read -t60 -n1 -p \"(timeout after 60s assuming no) [Y|n]\" Choice\n  [ \"$?\" = '0' ] && {\n    [[ \"$Choice\" == [YyJj]* ]] || [ -z \"$Choice\" ] && return 0\n  }\n  return 1\n}\ncheck_envvar() {                # allow only chars in string $1 that can be expected in environment variables\n  # Allows only chars in \"a-zA-Z0-9_:/.,@=-\"\n  # Option -w allows whitespace, too. Can be needed for PATH.\n  # Char * as in LS_COLORS is not allowed to avoid abuse.\n  # Replaces forbidden chars with X and returns 1\n  # Returns 0 if no change occurred.\n  # Echoes result.\n  local Newvar Space=\n\n  case \"${1:-}\" in\n    -w) Space=\" \" ; shift ;;\n  esac\n\n  Newvar=\"$(printf %s \"${1:-}\" | LC_ALL=C tr -c \"a-zA-Z0-9_:/.,@=${Space}-\" \"X\" )\"\n\n  printf %s \"$Newvar\"\n  printf \"\\n\"\n\n  [ \"$Newvar\" = \"${1:-}\" ] && return 0\n\n  debugnote \"check_envvar(): Input string has been changed. Result:\n  $Newvar\"\n  return 1\n}\ncheck_parent_sshd() {           # check whether pid $1 runs in SSH session\n  local Wanted_pid=\"${1:-}\" Process_line\n  local Return=\n  ps -p 1 >/dev/null 2>&1 || {\n    debugnote \"check_parent_sshd(): Failed to check for sshd. ps -p not supported.\"\n    return 1\n  }\n  while [ \"$Wanted_pid\" -ne 1 ] ; do\n    Process_line=\"$(ps -f -p \"$Wanted_pid\"| tail -n1)\"\n    Wanted_pid=\"$(echo \"$Process_line\" | awk '{print $3}')\"\n    [[ $Process_line =~ sshd ]] && Return=0\n    [ \"$Return\" ] && break\n  done\n  return \"${Return:-1}\"\n}\ncookiebaker() {                 # create an X cookie without xauth\n  # $1  DISPLAY\n  # Write directly to file, bash cannot store nullbytes in a string.\n  # Based on https://stackoverflow.com/questions/70932880/what-is-the-internal-format-of-xauthority-file\n  # and chapter 6.2.5 in https://refspecs.linuxfoundation.org/LSB_5.0.0/LSB-Desktop-generic/LSB-Desktop-generic/libx11-ddefs.html\n\n  local Display\n  local Address Addresslength Displaynumber Displaynumberlength Data Part Code\n\n  Display=\"${1:-$DISPLAY}\"\n\n  Address=\"$(printf \"%s\" \"$Display\" | cut -d: -f1)\"\n  case \"$Address\" in\n    \"\")\n      Address=\"$(hostname)/unix\"\n      Addresslength=\"$(strlenhex \"$Address\")\"\n    ;;\n    *.*.*.*)\n      Data=\"$Address\"\n      Address=\"\"\n      while [ \"$(printf \"%s\" \"$Data\" | wc -c)\" -gt 0 ]; do\n        Part=\"$( printf \"%s\" \"$Data\" | cut -d. -f1)\"\n        Address=\"${Address}\\x$(printf \"%x\" \"$Part\")\"\n        Data=\"$( printf \"%s\" \"$Data\" | cut -s -d. -f2-)\"\n      done\n      Addresslength=\"4\"\n    ;;\n    *)\n      Addresslength=\"$(strlenhex \"$Address\")\"\n    ;;\n  esac\n\n  Displaynumber=\"$(printf \"%s\" \"$Display\" | cut -d: -f2)\"\n  Displaynumber=\"$(printf \"%s\" \"$Displaynumber\" | cut -d. -f1)\"\n  Displaynumberlength=\"$(strlenhex \"$Displaynumber\")\"\n\n  Data=\"$(makecookie)\"\n  while [ \"$(printf \"%s\" \"$Data\" | wc -c)\" -gt 0 ]; do\n    Part=\"$( printf \"%s\" \"$Data\" | cut -c1-2)\"\n    Code=\"${Code}\\x$Part\"\n    Data=\"$( printf \"%s\" \"$Data\" | cut -c3-)\"\n  done\n\n  awk \"BEGIN{\n    printf \\\"\\xFF\\xFF\\\"\n    printf \\\"\\x00\\x${Addresslength}\\\" \n    printf \\\"${Address}\\\"\n    printf \\\"\\x00\\x${Displaynumberlength}\\\" \n    printf \\\"${Displaynumber}\\\"\n    printf \\\"\\x00\\x12\\\"\n    printf \\\"MIT-MAGIC-COOKIE-1\\\"\n    printf \\\"\\x00\\x10\\\"\n    printf \\\"${Code}\\\"\n  }\"\n}\ndevicelist_gpu() {              # print list of GPU devices\n  find /dev/dri/* /dev/nvidia* /dev/vga_arbiter /dev/nvhost* /dev/nvmap -maxdepth 0 -type c 2>/dev/null ||:\n}\ndevicelist_input() {            # print list of input devices\n  find /dev/input/* -maxdepth 0 -type c 2>/dev/null ||:\n}\ndownload() {                    # download file at URL $1 and store it in file $2\n  # Uses wget or curl. If both are missing, returns 1.\n  # With no arguments it checks for curl/wget without downloading.\n  # Download follows redirects.\n  local Downloader=\n  command -v wget >/dev/null && Downloader=\"wget\"\n  command -v curl >/dev/null && Downloader=\"curl\"\n  [ \"$Downloader\" ] || return 1\n  [ \"${1:-}\" ]      || return 0\n  case \"$Downloader\" in\n    wget) wget    \"${1:-}\"        -O       \"${2:-}\" || return 1;;\n    curl) curl -L \"${1:-}\" --fail --output \"${2:-}\" || return 1;;\n  esac\n  return $?\n}\nescapestring() {                # escape special chars of $1\n  # escape all characters except those described in [^a-zA-Z0-9,._+@=:/-]\n  grep -q \"'\" <<< \"${1:-}\" && {\n    error \"escapestring(): x11docker cannot escape char ' in :\n  ${1:-}\"\n    return 1\n  }\n  echo \"${1:-}\" | LC_ALL=C sed -e 's/[^a-zA-Z0-9,._+@=:/-]/\\\\&/g; '\n}\ngetrandomnumber() {             # get random number\n  # chosen by fair dice roll\n  # guaranteed to be random\n  echo \"4\"\n}\nisint() {                       # check if $1 is a positive integer\n  #[[ $var =~ ^-?[0-9]+$ ]]\n  [[ \"${1:-EMPTY}\" =~ ^[0-9]+$ ]]\n}\nisnum() {                       # check if $1 is a number\n  [ \"1\" = \"$(awk -v a=\"${1:-}\" 'BEGIN {print (a == a + 0)}')\" ]\n}\nmakecookie() {                  # bake a cookie\n  mcookie 2>/dev/null || echo $RANDOM$RANDOM$RANDOM$RANDOM$RANDOM$RANDOM | cut -b1-32\n}\nmygetent() {                    # custom getent command\n  # fixes #477 #496\n  command -v getent >/dev/null 2>&1 && getent \"$1\" \"$2\" || \\\n  grep \"^${2:-NOENTRY}:\" < \"/etc/${1:-NOFILESPECIFIED}\"\n}\nmysleep() {                     # catch cases where sleep only supports integer\n  sleep \"${1:-1}\" 2>/dev/null || sleep 1\n}\noneline() {                     # remove \\\\ and newline from string\n  echo \"${1:-}\" | tr -d '\\\\\\n'\n}\nparse_inspect() {               # parse json of inspect output using python\n  # parse for keys in output of docker|podman|nerdctl inspect.\n  # Uses python json parser.\n  # $1 String containing inspect output\n  # $2...$n Key. For second level keys provide e.g. \"jsonstring\" \"Config\" \"Cmd\"\n\n  local Parserscript\n  local Jsonstring Keystring Output\n\n  [[ \"$Jqbin\" ]] && {\n    Jsonstring=\"${1:-}\" ; shift\n    # If we have an array, get the first item\n    [[ $(\"$Jqbin\" -r 'type' <<< \"$Jsonstring\" 2>/dev/null) == array ]] && Keystring=\".[0]\" || Keystring=\"\"\n    # Recursively find key using the sequence of keys\n    while [ $# -gt 0 ]; do\n      Keystring=\"$Keystring.${1:-}\"\n      shift\n    done\n    Output=\"$(\"$Jqbin\" \"$Keystring\" <<< \"$Jsonstring\")\"\n    # If we have an array, single-quote each item and join with spaces\n    if [[ $(\"$Jqbin\" -r 'type' <<< \"$Output\" 2>/dev/null) == array ]]; then\n      Output=\"$(\"$Jqbin\" -r $'map(tostring | \"\\'\" + . + \"\\'\") | join(\" \")' <<< \"$Output\" )\"\n    fi\n    # If we have a string, output the raw contents without quotes\n    if [[ $(\"$Jqbin\" -r 'type' <<< \"$Output\" 2>/dev/null) == string ]]; then\n        Output=\"$(\"$Jqbin\" -r '.' <<< \"$Output\")\"\n    fi\n    [ \"$Output\" = \"null\" ] && Output=\"\"\n    echo \"$Output\"\n    return\n  }\n\n  Parserscript=\"#! $Pythonbin\"$'\nimport json,sys\n\ndef parse_inspect(*args):\n    \"\"\"\n    parse output of docker|podman|nerdctl inspect\n    args:\n     0: ignored\n     1: string containing inspect output\n     2..n: json keys. For second level keys provide e.g. \"Config\",\"Cmd\"\n    Prints key value as a string.\n    Prints empty string if key not found.\n    A list is printed as a string with \\'\\' around each element.\n    \"\"\"\n\n    output=\"\"\n    inspect=args[1]\n    inspect=inspect.strip()\n\n    obj=json.loads(inspect)\n\n    if \"\\'list\\'\" in str(type(obj)):\n        obj = obj[0]\n\n    for arg in args[2:]: # recursively find the desired object. Command.Cmd is found with args \"Command\" , \"Cmd\"\n        try:\n            obj=obj[arg]\n        except:\n            obj=\"\"\n\n    objtype=str(type(obj))\n    if \"\\'list\\'\" in objtype:\n        for i in obj:\n            output += \"\\'\" + str(i) + \"\\' \"\n        output = output.strip()\n    else:\n        output = str(obj)\n\n    if output == \"None\":\n        output=\"\"\n\n    print(output)\n\nparse_inspect(*sys.argv)\n'\n  echo \"$Parserscript\" | $Pythonbin - \"$@\" || warning \"parse_inspect(): Error while parsing json for\n  ${2:-} ${3:-} ${4:-} ${5:-} ${6:-} (Line $BASH_LINENO)\"\n}\nstoreinfo() {                   # store some information for later use\n  # store and provide pieces of information\n  # replace entry if codeword is already present\n  # Store as codeword=string:\n  #   $1 codeword=string\n  # Dump stored string:\n  #   $1 dump\n  #   #2 codeword\n  # Drop stored string:\n  #   $1 drop\n  #   #2 codeword\n  # Test for codeword: (return 1 if not found)\n  #   $1 test\n  #   $2 codeword\n  #\n  # note: sed -i causes file permission issues if called in container in Cygwin, compare ticket #187\n  #       chmod 666 for $Sharefolder could probably fix that. (FIXME)\n  #\n  [ -e \"$Storeinfofile\" ] || return 1\n  case \"${1:-}\" in\n    dump) grep     \"^${2:-}=\"   \"$Storeinfofile\" | sed \"s/^${2:-}=//\" ;;      # dump entry\n    drop) sed -i  \"/^${2:-}=/d\" \"$Storeinfofile\" ;;                           # drop entry\n    test) grep -q  \"^${2:-}=\"   \"$Storeinfofile\" ;;                           # test for entry\n    *)                                                                        # store entry\n      debugnote \"storeinfo(): ${1:-}\"\n      grep -q   \"^$(echo \"${1:-}\" | cut -d= -f1)=\"     \"$Storeinfofile\" && {\n        sed -i \"/^$(echo \"${1:-}\" | cut -d= -f1)=/d\"   \"$Storeinfofile\"       # drop possible old entry\n      }\n      echo \"${1:-}\"                                 >> \"$Storeinfofile\"\n    ;;\n  esac\n}\nrmcr() {                        # remove carriage return to translate DOS/Windows newlines into UNIX newlines\n  # convert stdin if $1 is empty. Otherwise convert file $1.\n  case \"${1:-}\" in\n    \"\") sed    \"s/$(printf \"\\r\")//g\" ;;\n    *)  sed -i \"s/$(printf \"\\r\")//g\"  \"${1:-}\" ;;\n  esac\n}\nstrlenhex() {                   # print byte length of string $1 as hex value\n  printf '%x' \"$(printf \"%s\" \"${1:-}\" | wc -c)\"\n}\ntimestamp() {                   # print HH:MM:SS,NNN\n  date +%T,%N | cut -c1-12\n  return 0\n}\nunspecialstring() {             # replace special chars of $1 with -\n  # Replace all characters except those described in \"a-zA-Z0-9_\" with a '-'.\n  # Replace newlines, too.\n  # Allow additional chars in $2\n  # Remove leading and trailing '-'\n  # Avoid double '--'\n  # Return empty string if only special chars are given.\n  printf %s \"${1:-}\" | LC_ALL=C tr -cs \"a-zA-Z${2:-}0-9_\" \"-\" | sed -e 's/^-// ; s/-$//'\n}\nverlt() {                       # version number check $1 less than $2\n  [ \"${1:-}\" = \"${2:-}\" ] && return 1 || { verlte \"${1:-}\" \"${2:-}\" && return 0 || return 1 ; }\n}\nverlte() {                      # version number check $1 less than or equal $2\n  [  \"${1:-}\" = \"$(echo -e \"${1:-}\\n${2:-}\" | sort -V | head -n1)\" ] && return 0 || return 1\n}\nwincmd() {                      # execute a command on MS Windows with cmd.exe\n  MSYS2_ARG_CONV_EXCL='*' cmd.exe /C \"${@//&/^&}\" | rmcr\n}\n\n#### file routines\nconvertpath() {                 # convert unix and windows paths\n  # $1: Mode:\n  #     windows   echo Windows path                            - result: c:/path\n  #     unix      echo unix path                               - result: /c/path\n  #     subsystem echo path within subsystem                   - result: /cygdrive/c/path  or  /path  or /mnt/c/path\n  #     volume    echo --volume compatible syntax              - result: 'unixpath':'containerpath':rw  (or \":ro\")\n  #     container echo path of volume in container             - result: /path\n  #     share     echo path of $Sharefolder/file in container  - result: /containerpath\n  # $2: Path to convert. Arbitrary syntax, can be C:/path, /c/path, /cygdrive/c/path, /path\n  #     Can have suffix :rw or :ro. If none is given, return with :rw\n  # $3: Optional for mode volume: containerpath\n\n  local Mode Path Drive= Readwritemode Readwritemode_mount\n\n  Mode=\"${1:-}\"\n  Path=\"${2:-}\"\n\n  # check path for suffix :rw or :ro\n  Readwritemode=\"$(echo \"$Path\" | rev | cut -c1-3 | rev)\"\n  [ \"$(cut -c1 <<< \"$Readwritemode\")\" = \":\" ] && {\n    Path=\"$(echo \"$Path\" | rev | cut -c4- | rev)\"\n  } || Readwritemode=\":rw\"\n  [ \"$Readwritemode\" = \":ro\" ] && Readwritemode_mount=\",readonly\" || Readwritemode_mount=\"\"\n\n  # replace ~ with HOME\n  Path=\"$(sed \"s%~%${Hostuserhome:-${HOME:-}}%\" <<< \"$Path\")\"\n\n  # share: Replace $Sharefolder with $Sharefoldercontainer\n  [ \"$Mode\" = \"share\" ] && {\n    [ -z \"$Path\" ] && {\n      echo \"\"\n      return 0\n    }\n    echo \"${Sharefoldercontainer}${Path#$Sharefolder}\"\n    return 0\n  }\n\n  # replace \\ with / and // with /\n  Path=\"$(sed 's%//%/%g ; s%\\\\%/%g' <<< \"$Path\")\"\n\n  # remove possible already given mountpoint\n  Path=\"${Path#$Winsubmount}\"\n\n  # Given format is /c/\n  [ \"$(cut -c1,3 <<< \"${Path}/\")\" = \"//\" ] && {\n    Drive=\"$(cut -c2 <<< \"$Path\")\"\n    Path=\"$(cut -c3- <<< \"$Path\")\"\n    Path=\"${Path:-\"/\"}\"\n  }\n\n  # Given format is C:/\n  [ \"$(cut -c2 <<< \"$Path\")\" = \":\" ] && {\n    Drive=\"$(cut -c1 <<< \"$Path\")\"\n    Path=\"$(cut -c3- <<< \"$Path\")\"\n  }\n\n  # change C to c\n  Drive=\"${Drive,}\"\n\n  # docker volume (same for Windows and Unix)\n  [ \"${Path:0:1}\" = \"/\" ] || {\n    case \"$Mode\" in\n      unix|subsystem|windows) echo \"$Path\" ; debugnote \"convertpath() $Mode: Docker volumes do not have a specified path on host: $Path\" ;;\n      volume)         echo \"'$Path':'${3:-/$Path}'${Readwritemode}\" ;;\n      mount)          echo \"type=volume,source='$Path',target='${3:-/$Path}'${Readwritemode_mount}\" ;;\n      container)      echo \"${3:-/$Path}\" ;;\n    esac\n    return 0\n  }\n\n  Containerpath=\"$Path\"\n  [ \"$Createcontaineruser\" = \"no\" ] || {\n    [ \"$Sharehome\" = \"host\" ] || {\n      [ -n \"$Containeruserhome\" ] && grep -q \"^$Containeruserhome\" <<< \"$Path\" && Containerpath=\"$(sed \"s%^$Containeruserhome%/home.host%\" <<< \"$Containerpath\")\"\n    }\n    [ \"$Containerpath\" = \"$Containeruserhosthome\" ] && [ \"$Persistanthomevolume\" != \"$Containeruserhosthome\" ] && Containerpath=\"/home.host/$Containeruser\"\n  }\n\n  # not on Windows\n  [ -z \"$Winsubsystem\" ] && {\n    case \"$Mode\" in\n      unix|subsystem) echo \"$Path\" ;;\n      windows)        warning \"convertpath(): Nonsense path conversion $Mode: $Path\" ; return 1 ;;\n      #volume)         echo \"'$Path':'${3:-$Path}'$Readwritemode\" ;;\n      #container)      echo \"${3:-$Path}\" ;;\n      volume)         echo \"'$Path':'${3:-$Containerpath}'${Readwritemode}\" ;;\n      mount)          echo \"type=bind,source='$Path',target='${3:-/$Containerpath}'${Readwritemode_mount}\" ;;\n      container)      echo \"${3:-$Containerpath}\" ;;\n    esac\n    return 0\n  }\n\n  case \"$Winsubsystem\" in\n    WSL1)\n      [ -z \"$Drive\" ] && case \"$Mode\" in\n        windows|unix|volume)\n          debugnote \"convertpath(): Request of WSL path: $Path\"\n          grep -q \"$Cachefolder\" <<< \"$Path\" || {\n            [ \"$Readwritemode\" = \":rw\" ] && warning \"Request of Windows path to path within WSL:\n  $Path\n  Write access from Windows host to WSL files can damage the WSL file system.\n  Read-only access is ok.\n  Option --share: You can add :ro to the path to allow read-only access.\n  Example: --share='$Path:ro'\"\n          }\n        ;;\n      esac\n    ;;\n  esac\n\n  case \"$Drive\" in\n    \"\") # Path points into subsystem\n      Path=\"${Path#\"$Winsubpath\"}\"\n      Drive=\"$(cut -c2 <<<\"$Winsubpath\")\"\n      case \"$Mode\" in\n        windows)      echo \"${Drive^}:$(cut -c3- <<< \"$Winsubpath\")$Path\" ;;\n        unix)         echo \"$Winsubpath$Path\" ;;\n        subsystem)    echo \"$Path\" ;;\n        volume)\n          case \"$Mobyvm\" in\n            no)  echo \"'$Path':'${3:-$Path}'$Readwritemode\" ;;\n            yes) echo \"'$Winsubpath$Path':'${3:-$Path}'$Readwritemode\" ;;\n          esac\n        ;;\n        mount)\n          case \"$Mobyvm\" in\n            no)  echo \"type=bind,source='$Path',target='${3:-$Path}'$Readwritemode_mount\" ;;\n            yes) echo \"type=bind,source='$Winsubpath$Path',target='${3:-$Path}'$Readwritemode_mount\" ;;\n          esac\n        ;;\n        container)    echo \"${3:-$Path}\" ;;\n      esac\n    ;;\n    *) # Path outside of subsystem\n      case \"$Mode\" in\n        windows)      echo \"${Drive^}:$Path\" ;;\n        unix)         echo \"/$Drive$Path\" ;;\n        subsystem)    echo \"$Winsubmount/$Drive$Path\" ;;\n        volume)       echo \"'/$Drive$Path':'${3:-/$Drive$Path}'$Readwritemode\" ;;\n        mount)        echo \"type=bind,source='/$Drive$Path',target='${3:-/$Drive$Path}'$Readwritemode_mount\" ;;\n        container)    echo \"${3:-/$Drive$Path}\" ;;\n      esac\n    ;;\n  esac\n\n  return 0\n}\ngetwslpath() {                  # get path to currently running WSL system\n\n  # Fork from https://github.com/Microsoft/WSL/issues/2578#issuecomment-354010141\n\n  local RUN_ID= BASEPATH=\n\n  RUN_ID=\"/tmp/$(makecookie)\"\n\n  # Mark our filesystem with a temporary file having an unique name.\n  touch \"${RUN_ID}\"\n\n  powershell.exe -Command '(Get-ChildItem HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Lxss | ForEach-Object {Get-ItemProperty $_.PSPath}).BasePath.replace(\":\", \"\").replace(\"\\\", \"/\")' | while IFS= read -r BASEPATH; do\n    # Remove trailing whitespaces.\n    BASEPATH=\"${BASEPATH%\"${BASEPATH##*[![:space:]]}\"}\"\n    # Build the path on WSL.\n    BASEPATH=\"/mnt/${BASEPATH,}/rootfs\"\n\n    # Current WSL instance doesn't have an access to its mount from within\n    # itself despite all others are available. That's the hacky way we're\n    # using to determine current instance.\n    #\n    # The second of part of the condition is a fallback for a case if our\n    # trick will stop working. For that we've created a temporary file with\n    # an unique name and now seeking it among all WLSs.\n    if ! ls \"${BASEPATH}\" > /dev/null 2>&1 || [ -f \"${BASEPATH}${RUN_ID}\" ]; then\n      echo \"${BASEPATH}\"\n      # You can create and simultaneously run multiple WSL instances, comment\n      # out the \"break\", run this script within each one and it'll return only\n      # single value.\n      break\n    fi\n  done\n  rm \"${RUN_ID}\"\n  return 0\n}\nget_xpath() {                   # --xc: path to X server\n  case \"$Xcontainer\" in\n    yes) echo \"/usr/bin/${1:-}\" ;;\n    no)  command -v \"${1:-}\" ;;\n  esac\n}\nmkfile() {                      # create file $1 owned by $Hostuser\n  :> \"${1:-}\"                   || return 1\n  chown \"$Hostuser\"    \"${1:-}\" || return 1\n  chgrp \"$Hostusergid\" \"${1:-}\" || return 1\n  chmod 644            \"${1:-}\" || return 1\n  [ -n \"${2:-}\" ] && { \n    chmod \"${2:-}\" \"${1:-}\"     || return 1\n  }\n  return 0\n}\nmkfolder() {                    # create folder $1 owned by $Hostuser\n  local Step Path= Return=\n  for Step in $(tr '/' '\\n' <<< \"${1:-}\" | grep .) ; do\n    Path=\"$Path/$Step\"\n    [ -d \"$Path\" ] || {\n      unpriv \"mkdir -p  '$Path'\"  || Return=1\n      chmod \"${2:-755}\" \"$Path\"   || Return=1\n    }\n    [ \"$Return\" ] && break\n  done\n  return ${Return:-0}\n  #unpriv \"mkdir -p  '${1:-}'\"   || return 1\n}\nmyrealpath() {                  # real path of possible symlink\n  [ -z \"$*\" ] && return 1\n  command -v realpath >/dev/null && {\n    realpath \"$*\"\n  } || {\n    [ -h \"$*\" ] && warning \"Could not check for symbolic links.\n  Please install 'realpath' (package 'coreutils'),\n  or provide real file path instead of symbolic link path.\n  Possible symbolic link: $*\"\n    echo \"$*\"   ### FIXME: Maybe workaround with ls\n    return 1\n  }\n}\nwaitforlogentry() {             # wait for entry $3 in logfile $2 of application $1\n  # $1 is the application we are waiting for to be ready\n  # $2 points to logfile\n  # $3 keyword to wait for\n  # $4 possible error keywords\n  # $5 time to wait in seconds or infinity. default: 60\n\n  local Startzeit Uhrzeit Dauer Count=0 Schlaf\n  local Errorkeys=\"${4:-}\"\n  local Warten=\"${5:-60}\"\n  local Error=\n\n  Startzeit=\"$(date +%s ||:)\"\n  Startzeit=\"${Startzeit:-0}\"\n  [ \"$Warten\" = \"infinity\" ] && Warten=32000\n\n  debugnote \"waitforlogentry(): ${1:-}: Waiting for logentry \\\"${3:-}\\\" in $(basename \"${2:-}\")\"\n\n  while ! grep -q \"${3:-}\" <\"${2:-}\" ; do\n    Count=\"$(( Count + 1 ))\"\n    Uhrzeit=\"$(date +%s ||:)\"\n    Uhrzeit=\"${Uhrzeit:-0}\"\n    Dauer=\"$(( Uhrzeit - Startzeit ))\"\n    Schlaf=\"$(( Count / 10 ))\"\n    [ \"$Schlaf\" = \"0\" ] && Schlaf=\"0.5\"\n    mysleep \"$Schlaf\"\n\n    [ \"$Dauer\" -gt \"10\" ] && debugnote \"waitforlogentry(): ${1:-}: Waiting since ${Dauer}s for log entry \\\"${3:-}\\\" in $(basename \"${2:-}\")\"\n\n    [ \"$Dauer\" -gt \"$Warten\" ] && error \"waitforlogentry(): ${1:-}: Timeout waiting for entry \\\"${3:-}\\\" in $(basename \"${2:-}\")\n  Last lines of $(basename \"${2:-}\"):\n$(tail \"${2:-}\")\"\n\n#    grep -i -q -E 'xinit: giving up|unable to connect to X server|Connection refused|server error|Only console users are allowed|Failed to process Wayland|failed to create display|] fatal:' <\"${2:-}\" && \\\n    [ \"$Errorkeys\" ] && grep -i -q -E \"$Errorkeys\" <\"${2:-}\" && \\\n      error \"waitforlogentry(): ${1:-}: Found error message in logfile.\n  Last lines of logfile $(basename \"${2:-}\"):\n$(tail \"${2:-}\")\"\n\n    rocknroll || {\n      debugnote \"waitforlogentry(): ${1:-}: Stopped waiting for ${3:-} in $(basename \"${2:-}\") due to terminating signal.\"\n      Error=1\n      break\n    }\n  done\n  [ \"$Error\" ] && return 1\n\n  debugnote \"waitforlogentry(): ${1:-}: Found log entry \\\"${3:-}\\\" in $(basename \"${2:-}\").\"\n  return 0\n}\nwriteaccess() {                 # check if useruid $1 has write access to folder $2\n  local dirVals= gMember= IFS=\n  IFS=$'\\t' read -a dirVals < <(stat -Lc \"%U\t%G\t%A\" \"${2:-}\")\n  [ \"$(id -u \"$dirVals\")\" == \"${1:-}\" ] && [ \"${dirVals[2]:2:1}\" == \"w\" ]   && return 0\n  [ \"${dirVals[2]:8:1}\" == \"w\" ]                                          && return 0\n  [ \"${dirVals[2]:5:1}\" == \"w\" ] && {\n    gMember=\"$(groups \"${1:-}\" 2>/dev/null)\"\n    [[ \"${gMember[*]:2}\" =~ ^(.* |)${dirVals[1]}( .*|)$ ]]                && return 0\n  }\n  [ \"w\" = \"$(getfacl -pn \"${2:-}\" | grep \"user:${1:-}:\" | rev | cut -c2)\" ] && return 0 || return 1\n}\n\n#### special jobs of x11docker\nbuildimage() {                  # --build: build image from x11docker repository Dockerfile\n  # Build image $1 from x11docker repository\n\n  local Wwwpath Buildpath Imagename\n\n  # check image name, should have leading 'x11docker/'\n  Imagename=\"${1:-}\"\n  grep -q \"x11docker\" <<< \"$Imagename\" || Imagename=\"x11docker/$Imagename\"\n\n  # remote and local paths\n  Wwwpath=\"https://raw.githubusercontent.com/mviereck/dockerfile-$(tr / - <<< \"$Imagename\")/master\"\n  Buildpath=\"${HOME:-/tmp}/x11docker-build-$(unspecialstring \"$Imagename\")\"\n\n  grep -q \"dockerfile-x11docker-\" <<< \"$Wwwpath\"             || error \"Option --build: x11docker only supports building of\n  images provided at x11docker repository https://github.com/mviereck\"\n\n  mkdir -p \"$Buildpath\"\n  cd \"$Buildpath\"\n  download || error \"Option --build: Please install 'curl' or 'wget' to allow a download\"\n\n  note \"Download of $Wwwpath/Dockerfile\"\n  download \"$Wwwpath/Dockerfile\" \"$Buildpath/Dockerfile\"      || error \"Option --build: Did not find a Dockerfile for $Imagename\n  at $Wwwpath\n  Option --build only supports Dockerfiles from https://github.com/mviereck.\n  For other sources please download Dockerfile and use 'docker build'.\"\n  [ \"$Imagename\" = \"x11docker/xserver\" ] && {\n    note \"Download of $Wwwpath/XlibNoSHM.c\"\n    download \"$Wwwpath/XlibNoSHM.c\" \"$Buildpath/XlibNoSHM.c\"  || error \"Option --build: Downloading XlibNoSHM.c failed.\"\n  }\n\n  note \"Building $Imagename\"\n  unpriv_backend \"$Backendbin build -t $Imagename $Buildpath\" || error \"Option --build: Building image '$Imagename' failed.\"\n\n  cd \"${HOME:-/tmp}\"\n  rm -rf \"$Buildpath\"\n  return 0\n}\ncleanup() {                     # --cleanup : check for non-removed containers and left cache files\n  # Cleans x11docker cache and removes running and stopped x11docker containers.\n  # Does not change --home folders.\n  local Orphanedcontainers= Orphanedfolders= Line= Containerinspect Containerid\n\n  note \"x11docker will check for orphaned containers from earlier sessions\n  for current --backend=$Backend\n  This can happen if docker was not closed successfully.\n  x11docker will look for those containers and will clean up x11docker cache.\n  Caution: any currently running x11docker sessions will be terminated, too.\"\n\n  cd \"$Cachebasefolder\" || error \"Could not cd to cache folder '$Cachebasefolder'.\"\n\n  grep -q -- \"\\.cache/x11docker\" <<< \"$Cachebasefolder\" && Orphanedfolders=\"$(find \"$Cachebasefolder\" -mindepth 1 -maxdepth 1 -type d | sed \"s%$Cachebasefolder/%%\" )\"\n\n  case \"$Backend\" in\n    docker|podman|nerdctl)\n      Orphanedcontainers=\"$(unpriv_backend \"$Backendbin ps -a\" | grep x11docker_X | rev | cut -d' ' -f1 | rev)\"\n      Orphanedcontainers=\"$Orphanedcontainers $(find \"$Cachebasefolder\" -mindepth 2 -maxdepth 2 -type f -name 'container.id' -exec cat {} \\;)\"\n      Orphanedcontainers=\"$(env IFS='' echo $Orphanedcontainers)\"\n\n      # check for double entries name/id, check for already non-existing containers\n      for Line in $Orphanedcontainers; do\n        Containerinspect=\"$(unpriv_backend \"$Backendbin inspect '$Line'\" 2>/dev/null)\"\n        [ -n \"$Containerinspect\" ] && {\n          Containerid=\"$(parse_inspect \"$Containerinspect\" \"Id\")\"\n          Orphanedcontainers=\"$(sed \"s%$Line%$Containerid%\" <<< \"$Orphanedcontainers\")\"\n          :\n        } || {\n          Orphanedcontainers=\"$(sed s/$Line// <<< \"$Orphanedcontainers\")\"\n        }\n      done\n      Orphanedcontainers=\"$(sort <<< \"$Orphanedcontainers\" | uniq)\"\n    ;;\n  esac\n\n  [ -z \"$Orphanedcontainers$Orphanedfolders\" ] && {\n    note \"No orphaned containers or cache files found. good luck!\"\n  } || {\n    note \"Found orphaned containers:\n$Orphanedcontainers\"\n    note \"Found orphaned folders in $Cachebasefolder:\n$Orphanedfolders\"\n\n    for Line in $Orphanedfolders ; do\n      [ -d \"$Cachebasefolder/$Line/share\" ] && [ ! -s \"$Cachebasefolder/$Line/share/timetosaygoodbye\" ] && {\n        note \"Found possibly active container for cache dir $Line.\n  Will summon it to terminate itself.\"\n        echo timetosaygoodbye >> \"$Cachebasefolder/$Line/share/timetosaygoodbye\"\n      }\n    done\n    [ -n \"$Orphanedfolders\" ] && sleep 3\n\n    [ -n \"$Orphanedcontainers\" ] && {\n      note \"Removing containers with: $Backendbin rm -f $Orphanedcontainers\"\n      unpriv_backend \"$Backendbin rm -f $Orphanedcontainers\" 2>&1\n    }\n    [ -n \"$Orphanedfolders\" ] && {\n      note \"Removing cache files with: rm -R -f $Orphanedfolders\"\n      rm -R -f $Orphanedfolders 2>&1\n    }\n  }\n\n  # remove internal networks\n  case \"$Backend\" in\n    docker|podman|nerdctl)\n      for Line in $(unpriv_backend \"$Backendbin network ls\" | grep x11docker_X); do\n        note \"Removing internal network $Line\"\n        unpriv_backend \"$Backendbin network rm $(awk '{print $1}' <<< \"$Line\")\"\n      done\n    ;;\n  esac\n\n  Logfile=\n\n  note \"Removing remaining files with: rm -Rf -v \\\"$Cachebasefolder\\\"/*\"\n  rm -Rf -v \"${Cachebasefolder:-NONSENSE}\"/*\n\n  note \"Removing cache base folder with: rmdir -v \\\"$Cachebasefolder\\\"\"\n  cd\n  [ \"$(basename \"$Cachebasefolder\")\" = x11docker ] && rmdir -v \"$Cachebasefolder\"  || warning \"Did not succeed in removing cache folder\n  '$Cachebasefolder'\n  Please run 'x11docker --cleanup' as root.\"\n\n  case \"$Backend\" in\n    docker)\n      unpriv_backend \"$Backendbin info\" >/dev/null 2>/dev/null || warning \"Could not check for $Backend containers.\n  Please run 'x11docker --cleanup' as root\n  to make sure that no orphaned containers are left.\"\n    ;;\n  esac\n\n  note \"Cleanup ready.\"\n}\ncreate_launcher() {             # --launcher: create application launcher on desktop\n  local Name=\n\n  command -v xdg-desktop-icon >/dev/null || error \"Command 'xdg-desktop-icon' not found.\n  x11docker needs it to place the new icon on your desktop.\n  Please install xdg-utils\"\n\n  note \"Will create a new application launcher icon on your desktop.\n  If you move the new file to:\n\n    $Hostuserhome/.local/share/applications\n\n  it will appear in your applications menu.\"\n\n  Name=\"$Codename\"\n  [ \"$Codename\" = \"xonly\" ] && Name=\"$(echo \"$Xserver\" | tr -d '-')\"\n  Name=\"${Name% }\"\n\n  read -re -p \"Please choose a name for your application launcher:\n\" -i \"$Name\" Name\n  [ -z \"$Name\" ] && return 1 ### FIXME: check for valid file name / invalid chars?\n\n  Parsedoptions_global=\"${Parsedoptions_global//--launcher/}\"\n  Parsedoptions_global=\"${Parsedoptions_global//--starter/}\"\n  mkfile \"$Cachefolder/$Name.desktop\"\n  {\n    echo \"#!/usr/bin/xdg-open\n[Desktop Entry]\n# x11docker desktop file\nType=Application\nName=$Name\nExec=x11docker $Parsedoptions_global\nIcon=x11docker\nComment=\nCategories=System\nKeywords=docker x11docker $(echo \"$Name\" | tr -c '[:alpha:][:digit:][:blank:]' ' ' )\n\"\n    case \"$(command -v x11docker)\" in\n      \"\")echo \"TryExec=$0 $Parsedoptions_global\" ;;\n      *) echo \"TryExec=x11docker $Parsedoptions_global\" ;;\n    esac\n  } >> \"$Cachefolder/$Name.desktop\"\n\n  unpriv \"xdg-desktop-icon install --novendor '$Cachefolder/$Name.desktop'\"\n}\ninstaller() {                   # --install, --update, --update-master, --remove: Installer for x11docker\n  # --install:\n  #   - copies x11docker to /usr/bin\n  #   - installs icon in /usr/share/icons\n  #   - creates x11docker.desktop file in /usr/share/applications\n  # --update:\n  #   - download and install latest release from github, regard existing installation location\n  # --update-master:\n  #   - download and install latest master version from github, regard existing installation location\n  # --remove\n  #   - remove installed files\n\n  ### FIXME: (--update)\n  ### maybe not install additional files if x11docker is owned by user\n  local Key1= Key2= Oldversion= Newversion= Format= Prefix\n\n  Prefix=\"/usr/local\"\n\n  case \"${1:-}\" in\n    --remove-oldprefix)\n      Prefix=\"/usr\"\n    ;;\n    *)\n      [ -x \"/usr/bin/x11docker\" ] && warning \"Option ${1:-}: Detected x11docker installation in /usr/bin\n  Since version 7.6.0 x11docker defaults to ${Prefix}/bin instead.\n  If this was a custom installation without your package manager,\n  you can remove the old installation as root with:\nrm    /usr/bin/x11docker\nrm -R /usr/share/doc/x11docker\nrm    /usr/share/man/man1/x11docker.1.gz\n  or with x11docker option --remove-oldprefix\"\n    ;;\n  esac\n\n  [ \"$Startuser\" != \"root\" ] && {\n    case \"$Winsubsystem\" in\n      CYGWIN|MSYS2) ;;\n      *)\n        case \"$Installerarg\" in\n          diff) ;;\n          *)\n            error \"Must run as root to install, update or remove x11docker system wide.\"\n            return 1\n          ;;\n        esac\n      ;;\n    esac\n  }\n\n  # Preparing\n  case \"${1:-}\" in\n    --install)\n      [ -f \"./x11docker\" ]             || {\n        error \"File x11docker not found in current folder.\n  Try 'x11docker --update' instead.\"\n        return 1\n      }\n      [ -x \"${Prefix}/bin/x11docker\" ] && {\n        warning \"x11docker seems to be installed already\n  at ${Prefix}/bin/x11docker.\n  Will overwrite existing installation.\n  Consider to use option '--update' or '--update-master' instead.\"\n      }\n    ;;\n    --update|--update-master)\n      [ -x \"${Prefix}/bin/x11docker\" ] && {\n        Oldversion=\"$(${Prefix}/bin/x11docker --version)\"\n        note \"Current installed version: x11docker $Oldversion\n  at ${Prefix}/bin/x11docker\"\n      } || {\n        Oldversion=\"\"\n      }\n\n      [ -d     \"/tmp/x11docker-install\" ] && rm -R \"/tmp/x11docker-install\"\n      mkdir -p \"/tmp/x11docker-install\"   && cd    \"/tmp/x11docker-install\" || {\n        error \"Could not create or cd to /tmp/x11docker-install.\"\n        return 1\n      }\n      download || {\n        error \"Neither wget nor curl found. Need 'wget' or 'curl' for download.\n  Please install wget or curl.\"\n        return 1\n      }\n      command -v unzip >/dev/null && Format=\"zip\"\n      command -v tar >/dev/null   && Format=\"tar.gz\"\n      [ \"$Format\" ] || {\n        error \"Cannot extract archive. Please install 'unzip' or 'tar'.\"\n        return 1\n      }\n\n      case \"${1:-}\" in\n        --update-master)\n          note \"Downloading latest x11docker master version from github.\"\n          download \"https://codeload.github.com/mviereck/x11docker/$Format/master\" \"x11docker-update.$Format\"           || {\n            error \"Failed to download x11docker from github.\"\n            return 1\n          }\n        ;;\n        --update)\n          download \"https://raw.githubusercontent.com/mviereck/x11docker/master/CHANGELOG.md\" \"CHANGELOG.md\"            || {\n            error \"Failed to download CHANGELOG.md from github.\"\n            return 1\n          }\n          Releaseversion=\"v$(cat \"CHANGELOG.md\" | grep \"## \\[\" | grep -v 'Unreleased' | head -n1 | cut -d[ -f2 | cut -d] -f1)\"\n          note \"Downloading latest x11docker release $Releaseversion from github.\"\n          download \"https://codeload.github.com/mviereck/x11docker/$Format/$Releaseversion\" \"x11docker-update.$Format\"  || {\n            error \"Failed to download x11docker from github.\"\n            return 1\n          }\n        ;;\n      esac\n\n      note \"Extracting $Format archive.\"\n      case \"$Format\" in\n        zip)    unzip   \"x11docker-update.$Format\" ;;\n        tar.gz) tar xzf \"x11docker-update.$Format\" ;;\n      esac || {\n        error \"Failed to extract $Format archive.\"\n        return 1\n      }\n      echo \"\"\n      cd \"/tmp/x11docker-install/$(ls -l | grep drwx | rev | cut -d' ' -f1 | rev)\" || {\n        error \"Could not cd to /tmp/x11docker-update/$(ls -l | grep drwx | rev | cut -d' ' -f1 | rev)\"\n        return 1\n      }\n    ;;\n  esac\n\n  # New version number\n  case \"${1:-}\" in\n    --install|--update|--update-master)\n      Newversion=\"$(bash \"$(pwd)/x11docker\" --version)\"\n    ;;\n  esac\n\n  # Changelog excerpt\n  case \"${1:-}\" in\n    --update)\n      echo \"$Oldversion\" | grep -q beta && {\n        warning \"You are switching from master branch to stable releases.\n  To get latest master beta version, use option --update-master instead\"\n        Key1=\"\\[${Newversion}\\]\"\n        Key2=\"https:\\/\\/github.com\\/mviereck\\/x11docker\\/releases\"\n      } || {\n        Key1=\"\\[${Newversion}\\]\"\n        Key2=\"\\[${Oldversion}\\]\"\n        [ \"$Newversion\" = \"$Oldversion\" ] && {\n          Key2=\"https:\\/\\/github.com\\/mviereck\\/x11docker\\/releases\"\n          note \"Version $Newversion was already installed before this update.\n  If you want the latest beta version from master branch, use --update-master.\"\n        }\n        [ -z \"$Oldversion\" ] && Key2=\"https:\\/\\/github.com\\/mviereck\\/x11docker\\/releases\"\n      }\n    ;;\n    --update-master)\n      echo \"$Oldversion\" | grep -q beta && {\n        Key1=\"\\[Unreleased\\]\"\n        Key2=\"https:\\/\\/github.com\\/mviereck\\/x11docker\\/releases\"\n      } || {\n        Key1=\"\\[Unreleased\\]\"\n        Key2=\"\\[${Oldversion}\\]\"\n        [ -z \"$Oldversion\" ] && Key2=\"https:\\/\\/github.com\\/mviereck\\/x11docker\\/releases\"\n      }\n    ;;\n  esac\n  case \"${1:-}\" in\n    --update|--update-master)\n      note \"Excerpt of x11docker changelog:\n$(sed -n \"/${Key1}/,/${Key2}/p\" \"CHANGELOG.md\" | head -n-1)\"\n    ;;\n  esac\n\n  # Show diff\n  [ \"$Installerarg\" = \"diff\" ] && {\n    case \"${1:-}\" in\n      --update|--update-master)\n        note \"Difference of installed version to new version:\n  $ diff -u -s -Z '$(command -v x11docker)' '$(pwd)/x11docker'\n$(diff -u -s -Z \"$(command -v x11docker)\" \"$(pwd)/x11docker\" 2>&1 | sed \"s/^+.*/${Colgreenbg}\\0${Colnorm}/ ; s/^-.*/${Colredbg}\\0${Colnorm}/ ; s/^@.*/${Coluline}\\0${Colnorm}/\")\"\n      ;;\n    esac\n  }\n\n  # Doing\n  [ -z \"$Installerarg\" ] && case \"${1:-}\" in\n    --install|--update|--update-master)\n      note \"Installing x11docker to ${Prefix}/bin\"\n      cp \"x11docker\" \"${Prefix}/bin/\"                                           || {\n        error \"Could not copy x11docker to ${Prefix}/bin\"\n        return 1\n      }\n      chmod 755 \"${Prefix}/bin/x11docker\"                                       || {\n        error \"Could not set executable bit on x11docker\"\n        return 1\n      }\n      chown \"root:root\" \"${Prefix}/bin/x11docker\"                               || warning \"Could not set ownership 'root:root' to '${Prefix}/bin/x11docker'\"\n\n      note \"Installing icon for x11docker with xdg-icon-resource\"\n      xdg-icon-resource install --context apps --novendor --mode system --size 64 \"$(pwd)/x11docker.png\" \"x11docker\" || warning \"Could not install icon for x11docker.\n  Is 'xdg-icon-resource' (xdg-utils) installed on your system?\"\n\n      note \"Storing README.md, CHANGELOG.md and LICENSE.txt in\n  ${Prefix}/share/doc/x11docker\"\n      mkdir -p \"${Prefix}/share/doc/x11docker\" && {\n        cp \"README.md\"    \"${Prefix}/share/doc/x11docker/\"\n        cp \"CHANGELOG.md\" \"${Prefix}/share/doc/x11docker/\"\n        cp \"LICENSE.txt\"  \"${Prefix}/share/doc/x11docker/\"\n      } || note \"Error while creating /usr/share/doc/x11docker\"\n\n      note \"Storing man page in ${Prefix}/share/man/man1/x11docker.1.gz\"\n      command -v gzip >/dev/null && {\n        gzip -c \"x11docker.man\" > \"${Prefix}/share/man/man1/x11docker.1.gz\"\n      } || note \"Error storing man page.\"\n\n      note \"Installed x11docker version $Newversion\"\n    ;;\n    --remove|--remove-oldprefix)\n      note \"Removing x11docker from your system.\"\n      [ \"${1:-}\" = \"--remove\" ] && [ -n \"$Backendbin\" ] && {\n        note \"Running --cleanup\"\n        cleanup\n      }\n      [ -x \"${Prefix}/bin/x11docker\"   ]               && rm -v    \"${Prefix}/bin/x11docker\"\n      [ -e \"${Prefix}/share/doc/x11docker\" ]           && rm -v -R \"${Prefix}/share/doc/x11docker\"\n      [ -e \"${Prefix}/share/man/man1/x11docker.1.gz\" ] && rm -v    \"${Prefix}/share/man/man1/x11docker.1.gz\"\n      [ \"${1:-}\" = \"--remove\" ] && xdg-icon-resource uninstall --size 64 \"x11docker\" ||:\n      note \"Will not remove files in your home folder.\n  There might be files left in \\$HOME/.local/share/x11docker\n  The symbolic link \\$HOME/x11docker might exist, too.\n  The cache folder \\$HOME/.cache/x11docker should be removed already.\"\n    ;;\n  esac\n\n  # Cleanup\n  case \"${1:-}\" in\n    --update|--update-master)\n      note \"Removing downloaded temporary files.\"\n      cd ~\n      rm -R \"/tmp/x11docker-install\"\n    ;;\n  esac\n  note \"Ready.\"\n}\nmkpasswd() {                    # Create a salted password suitable for /etc/shadow\n  local Password Salt\n\n  Password=\"${1:-}\"\n\n  command -v perl >/dev/null || {\n    error \"Option --password: command 'perl' not found.\n  perl is needed to generate an encrypted password.\"\n    return 1\n  }\n\n  Salt=\"$(LC_ALL=C base64 <<< \"$RANDOM\" | cut -c1-2)\"\n  Password=$(perl -le 'my $Salt=shift; my $Password=shift; print crypt($Password, \"\\$6\\$\".$Salt.\"\\$\")' \"$Salt\" \"$Password\")\n\n  Containeruserpassword=\"$Password\"\n}\nset_password() {                # option --password: set container user password\n  local Password\n\n  Password=\"${1:-}\"\n\n  [ \"$Password\" = \"INTERACTIVE\" ] && {\n    read -rs -p \"Please type in a new container user password (chars are invisible): \" Password\n    echo \"\"\n    [ -z \"$Password\" ] && {\n      error \"Empty input, password not changed.\"\n      return 1\n    }\n  }\n  mkpasswd \"$Password\"\n\n  mkfolder \"$(dirname \"$Passwordfile\")\"\n  echo \"$Containeruserpassword\" > \"$Passwordfile\"\n  chmod 600                       \"$Passwordfile\"\n  note \"Option --password: Password changed, exiting.\"\n  return 0\n}\n\n#### host integration features\ncheck_windowmanager() {         # option --wm: search a host window manager\n  # check --wm arguments, adjust mode\n  case \"$Xcontainer\" in\n    yes)\n      case \"$Windowmanagermode\" in\n        auto|host)\n          Windowmanagermode=\"host\"\n          Windowmanagercommand=\"openbox --sm-disable\" ;;\n        *) Windowmanagermode=\"none\" ;;\n      esac\n      return 0\n    ;;\n  esac\n\n  case \"$Windowmanagermode\" in\n    \"\"|none)\n      Windowmanagermode=\"none\"\n      return 0\n    ;;\n    auto)\n      Windowmanagermode=\"host\"\n      [ -n \"$Windowmanagercommand\" ] && {\n        command -v \"$(cut -d' ' -f1 <<< \"$Windowmanagercommand\")\" >/dev/null && {\n          Windowmanagermode=\"host\"\n        } || {\n          note \"Option --wm: Did not find command on host: $Windowmanagercommand\"\n          check_fallback\n        }\n      }\n    ;;\n    host) ;;\n  esac\n  [ \"$Windowmanagermode\" = \"none\" ] && return 0\n\n  # Find a host window manager\n  [ \"$Windowmanagercommand\" ] || for Windowmanagercommand in $Wm_all WM_NOT_FOUND; do\n    command -v \"$Windowmanagercommand\" >/dev/null && break\n  done\n\n  [ \"$Windowmanagercommand\" = \"WM_NOT_FOUND\" ] && {\n    Windowmanagercommand=\"\"\n    note \"Option --wm: No host window manager found.\n    Please install a supported one. Recommended:\n  $Wm_recommended_nodesktop_light\n  Fallback: Setting --wm=none\"\n    check_fallback\n    Windowmanagermode=\"none\"\n  }\n  [ \"$Windowmanagermode\" = \"none\" ] && return 0\n\n  [ \"$Xtest\" = \"yes\" ] && warning \"Options --xtest --wm: Did not disable X extension XTEST\n  for X server $Xserver.\n  If your host window manager '$Windowmanagercommand' can start applications\n  on its own (for example with a context menu), container applications\n  can abuse this to run and remotely control host applications.\n  If you provide content of X server $Xserver over network to others,\n  they may take control over your host system!\"\n\n  # command adjustment for some host window managers\n  case \"$(basename \"$(cut -d' ' -f1 <<< \"$Windowmanagercommand\")\")\" in\n    cinnamon|cinnamon-session) Windowmanagercommand=\"cinnamon --sm-disable\";;\n    compiz) # if none, create minimal config to have usable window decoration and can move windows\n      [ -e \"$Hostuserhome/.config/compiz-1/compizconfig/Default.ini\" ] || {\n        mkfolder \"$Hostuserhome/.config/compiz-1/compizconfig\"\n        mkfile \"$Hostuserhome/.config/compiz-1/compizconfig/Default.ini\"\n        echo '[core]\ns0_active_plugins = core;composite;opengl;decor;resize;move;\n' >> \"$Hostuserhome/.config/compiz-1/compizconfig/Default.ini\"\n      }  ;;\n    enlightenment|e17|e16|e19|e20|e) Windowmanagercommand=\"enlightenment_start\" ;;\n    matchbox) Windowmanagercommand=\"matchbox-window-manager\"  ;;\n    mate|mate-session) Windowmanagercommand=\"mate-session -f\" ;;\n    mate-wm) Windowmanagercommand=\"marco --sm-disable\"  ;;\n    openbox)\n      Windowmanagercommand=\"openbox --sm-disable\"\n      [ -e \"/etc/xdg/openbox/rc.xml\" ] && {\n        cp /etc/xdg/openbox/rc.xml \"$Sharefolder/openbox-nomenu.rc\"\n        sed -i /ShowMenu/d         \"$Sharefolder/openbox-nomenu.rc\"\n        sed -i s/NLIMC/NLMC/       \"$Sharefolder/openbox-nomenu.rc\"\n        Windowmanagercommand=\"$Windowmanagercommand --config-file '$Sharefolder/openbox-nomenu.rc'\"\n      }\n    ;;\n  esac\n\n  case \"$Windowmanagermode\" in\n    host)\n      xtool --check \"wmctrl\"\n    ;;\n  esac\n\n  verbose \"Detected host window manager: ${Windowmanagercommand:-\"(none)\"}\"\n  return 0\n}\nclean_xhost() {                 # option --clean-xhost: disable xhost policies on host X\n  [ -z \"$Hostdisplay\" ] && note \"Option --clean-xhost: No host X display found.\" && return 1\n  [ -z \"$Hostxauthority\" ] && warning \"Option --clean-xhost: You host X server does not provide\n  an authentication cookie in \\$XAUTHORITY.\n  Host applications started after xhost cleanup might fail to start.\"\n  echo \"Option --clean-xhost:\" >> \"$Xinitlogfile\"\n  disable_xhost \"DISPLAY=$Hostdisplay XAUTHORITY=$Hostxauthority\" >> \"$Xinitlogfile\" 2>&1\n}\ncreate_clipboardrc() {          # option --clipboard: create shareclipboard script\n  echo \"#! /usr/bin/env bash\n$(declare -f rocknroll)\n$(declare -f mysleep)\nTimetosaygoodbyefile='$Timetosaygoodbyefile'\nX1auth='DISPLAY=$Hostdisplay XAUTHORITY=$Hostxauthority WAYLAND_DISPLAY=$Hostwaylandsocket XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR'\nX2auth='DISPLAY=$Newdisplay  XAUTHORITY=$Xclientcookie  WAYLAND_DISPLAY=$Newwaylandsocket  XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR'\n\"\n  echo '\nclipexchange() {\n  # Send clipboard content of one X server to another X server and update on changes.\n  # Run function twice with switched credentials to sync the clipboards.\n  # $1  credentials to access 1. X server\n  # $2  credentials to access 2. X server\n  # $3  selection to use (primary or clipboard)\n  # X credentials look like \"DISPLAY=:0 XAUTHORITY=~/.Xauthority\"\n\n  local Selection Targets Imagetarget Clip Clipold Clipold2\n  Selection=\"${3:-}\"\n\n  while rocknroll; do\n    export ${1:-}\n    case \"$DISPLAY\" in\n      \"\") \n        case \"$Selection\" in\n          primary)   Targets=\"$(wl-paste --list-types --primary)\" ;;\n          clipboard) Targets=\"$(wl-paste --list-types)\" ;;\n        esac\n      ;;\n      *)             Targets=\"$(xclip -out -selection $Selection -t TARGETS 2>/dev/null)\" ;;\n    esac\n\n    [ -n \"$Targets\" ] && {\n      # check for image clip\n      grep -q \"image/png\" <<< \"$Targets\" && Imagetarget=\"-t image/png\" || Imagetarget=\"\"\n\n      # read content of $Selection of X server $1\n      export ${1:-}\n      case \"$DISPLAY\" in\n        \"\") \n          case \"$Selection\" in\n            primary)   Clip=\"$(wl-paste --primary               $Imagetarget | base64)\" ;;\n            clipboard) Clip=\"$(wl-paste                         $Imagetarget | base64)\" ;;\n          esac\n        ;;\n        *)             Clip=\"$(xclip -out -selection $Selection $Imagetarget | base64)\" ;;\n      esac\n\n      [ -n \"$Clip\" ] && [ \"$Clip\" != \"$Clipold\" ] && {\n        Clipold=\"$Clip\"\n\n        # send only to clipboard of other X server if it has different content. Important to keep highlighting of text for primary/middle mouse click.\n        export ${2:-}\n        case \"$DISPLAY\" in\n          \"\") \n            case \"$Selection\" in\n              primary)   Clipold2=\"$(wl-paste --primary               $Imagetarget | base64)\" ;;\n              clipboard) Clipold2=\"$(wl-paste                         $Imagetarget | base64)\" ;;\n            esac\n          ;;\n          *)             Clipold2=\"$(xclip -out -selection $Selection $Imagetarget | base64)\" ;;\n        esac\n        [ \"$Clipold2\" != \"$Clip\" ] && {\n          export ${2:-}\n          case \"$DISPLAY\" in\n            \"\") \n              case \"$Selection\" in\n                primary)   base64 -d <<< \"$Clip\" | wl-copy --primary               $Imagetarget ;;\n                clipboard) base64 -d <<< \"$Clip\" | wl-copy                         $Imagetarget ;;\n              esac\n            ;;\n            *)             base64 -d <<< \"$Clip\" | xclip -in -selection $Selection $Imagetarget ;;\n          esac\n          #echo \"SEND $Selection to ${2:-} : $(base64 -d <<< \"$Clip\")\"\n        }\n      }\n    }\n    # wait a bit to avoid high CPU usage\n    mysleep 0.5\n  done\n}'\n  case \"$Shareclipboard\" in\n    yes) # bidirectional\n      echo '\nclipexchange \"$X1auth\" \"$X2auth\" clipboard &\nclipexchange \"$X1auth\" \"$X2auth\" primary &\nsleep 1 # copy from 1 to 2 will take precedence at startup\nclipexchange \"$X2auth\" \"$X1auth\" clipboard &\nclipexchange \"$X2auth\" \"$X1auth\" primary &\n'\n    ;;\n    oneway) # only container to host\n      echo '\nclipexchange \"$X2auth\" \"$X1auth\" clipboard &\nclipexchange \"$X2auth\" \"$X1auth\" primary &\n'\n    ;;\n    wayland) # limited fallback for wayland clients with --clipboard=yes. host to container only, selection clipboard only.\n      echo '\nclipexchange \"$X1auth\" \"$X2auth\" clipboard &\n'\n    ;;\n    superv|altv) # always container to host, only with super + v or alt +v host to container\n      echo '\nsendclip() {\n  # send clipboard content (selection clipboard) from X server $1 to X server $2\n  # used for --clipboard=superv\n  Targets=\"$(env ${1:-} xclip -out -selection clipboard -t TARGETS 2>/dev/null)\"\n  [ -n \"$Targets\" ] && {\n    grep -q \"image/png\" <<< \"$Targets\" && Imagetarget=\"-t image/png\" || Imagetarget=\"\"\n    env ${1:-} xclip -out -selection clipboard $Imagetarget | env ${2:-} xclip -in -selection clipboard $Imagetarget\n  }\n}\ncase \"${1:-}\" in\n  superv|altv)\n    sendclip \"$X1auth\" \"$X2auth\"\n  ;;\n  \"\")\n    clipexchange \"$X2auth\" \"$X1auth\" clipboard &\n    clipexchange \"$X2auth\" \"$X1auth\" primary &\n\n    case \"'$Shareclipboard'\" in\n      altv)\n        Xbindkeycodes=\"\n\\\"bash '$Clipboardrc' altv\\\"\n  Mod1 + v\n\"\n        ;;\n      superv)\n        Xbindkeycodes=\"\n\\\"bash '$Clipboardrc' superv\\\"\n  Mod4 + v\n\"\n      ;;\n    esac\n\n    env $X2auth xbindkeys -n -f <(echo \"$Xbindkeycodes\") & Xbindkeyspid=$!\n\n    # wait for the end\n    case \"'$Usemkfifo'\" in\n      yes) read Var <'$Timetosaygoodbyefifo' ;;\n      no)  while rocknroll; do sleep 1; done ;;\n    esac\n    kill $Xbindkeyspid\n  ;;\nesac\n'\n    ;;\n  esac\n}\nsetup_gpu() {                   # option --gpu: share /dev/dri and check nvidia driver\n  # Easiest case: share /dev/dri.\n  # Works for open source MESA drivers on host and in image.\n  # Debian packages for MESA drivers in image: libgl1-mesa-dri, libglx-mesa0\n  #\n  # Closed source NVIDIA drivers does not integrate well within linux.\n  # Instead, free nouveau driver is a better choice, or no NVIDIA hardware at all.\n  # Possibilities:\n  # - Install NVIDIA driver in image. It must be the very same version as on your host.\n  #   The image is not portable anymore.\n  # - x11docker can install NVIDIA driver on the fly in running container. See notes below.\n  #\n  # g  $Nvidiainstallerfile   nvidia driver file to install in container in containerrootrc\n  # g  $Nvidiaversion  nvidia driver version on host\n\n  local Gpudevice Drivername\n\n  Containerusergroups=\"$Containerusergroups video render\"\n\n  # share device files\n  while read -r Gpudevice ; do\n    store_runoption volume \"$Gpudevice\"\n  done < <(devicelist_gpu)\n\n  # NVIDIA\n  # check for closed source nvidia driver on host, provide automated installation, warn about disadvantages\n  [ -z \"$Nvidiaversion\" ] && return 0\n  debugnote \"NVIDIA: Detected driver version $Nvidiaversion on host.\"\n\n  [ \"$Runtime\" = \"nvidia\" ] && {\n    debugnote \"NVIDIA: Option --runtime=nvidia: Skipping driver installation.\"\n    Nvidiainstallerfile=\"\"\n    return 0\n  }\n\n  Nvidiainstallerfile=\"$(find /usr/local/share/x11docker/NVIDIA*$Nvidiaversion*.run $Localsharedir/NVIDIA*$Nvidiaversion*.run 2>/dev/null | tail -n1 )\"\n  Nvidiainstallerfile=\"$(myrealpath \"$Nvidiainstallerfile\" 2>/dev/null)\"\n\n  [ -e \"$Nvidiainstallerfile\" ] && {\n    debugnote \"NVIDIA: Found proprietary closed source NVIDIA driver installer\n  $Nvidiainstallerfile\"\n    [ \"$Containersetup\" = \"no\" ] && {\n      note \"Options --no-setup --gpu: Cannot install NVIDIA driver\n  with option --no-setup. Fallback: Disabling option --gpu\"\n      Sharegpu=\"no\"\n      return 1\n    }\n    [ \"$Capdropall\" = \"yes\" ] && warning \"Option --gpu: Installing NVIDIA driver in container\n  requires container privileges that x11docker would drop otherwise.\n  Though, they are still within default docker capabilities.\"\n    Allownewprivileges=\"yes\"\n    store_runoption cap CHOWN\n    store_runoption cap FOWNER\n    return 0\n  }\n\n  Nvidiainstallerfile=\"\"\n\n  note \"Option --gpu: You are using the closed source NVIDIA driver.\n  GPU acceleration will only work if you have installed the very same driver\n  version in image. That makes images less portable.\n  It is recommended to use free open source nouveau driver on host instead.\n  Ask NVIDIA corporation to at least publish their closed source API,\n  or even better to actively support open source driver nouveau.\n\n  To use the GPU without NVIDIA driver in container, you can use \n  less performant options --gpu=iglx (--xorg only) or --gpu=virgl (needs --xc).\"\n\n  note \"Option --gpu: x11docker can try to automatically install NVIDIA driver\n  version $Nvidiaversion in container on every container startup.\n  Drawbacks: Container startup is a bit slower and its security will be reduced.\n\n  You can look here for a driver installer file:\n    https://www.nvidia.com/Download/index.aspx\n    https://http.download.nvidia.com/\n  A direct download URL is probably:\n    https://http.download.nvidia.com/XFree86/Linux-x86_64/$Nvidiaversion/NVIDIA-Linux-x86_64-$Nvidiaversion.run\n  If you got a driver, store it at one of the following locations:\n    $Localsharedir/\n    /usr/local/share/x11docker/\n\n  Be aware that the version number must match exactly the version on host.\n  The file name must begin with 'NVIDIA', contain the version number $Nvidiaversion\n  and end with suffix '.run'.\"\n\n  return 0\n}\nsetup_hostdbus() {              # option --hostdbus: connect to host DBus session daemon.\n  warning \"Option --hostdbus: Connecting container to host DBus degrades\n  container isolation. Container applications might send malicious requests.\"\n  Dbusrunsession=\"no\"\n\n  [ \"$DBUS_SESSION_BUS_ADDRESS\" ] || {\n    # no running DBus session?\n    command -v dbus-launch >/dev/null && {\n      note \"Option --hostdbus: DBUS_SESSION_BUS_ADDRESS is empty.\n  Creating abstract DBus socket with dbus-launch.\"\n      export $(dbus-launch)\n    } || {\n      note \"Option --hostdbus: Is DBus running on host?\n  Did not find an active session and did not find dbus-launch.\n  DBUS_SESSION_BUS_ADDRESS is empty.\n  $Wikipackages\"\n      check_fallback\n      return 1\n    }\n  }\n\n  grep -q \"unix:path\" <<< \"$DBUS_SESSION_BUS_ADDRESS\" && {\n    # DBus socket file\n    case \"$Runtime\" in\n      kata-runtime)\n        note \"Option --hostdbus with a unix socket is not possible\n  with --runtime=$Runtime.\"\n        check_fallback\n        return 1\n      ;;\n      *)\n        store_runoption env \"DBUS_SESSION_BUS_ADDRESS=$DBUS_SESSION_BUS_ADDRESS\"\n        store_runoption volume \"/$(cut -d/ -f2- <<<\"$DBUS_SESSION_BUS_ADDRESS\")\"\n      ;;\n    esac\n  }\n\n  grep -q \"unix:abstract\" <<< \"$DBUS_SESSION_BUS_ADDRESS\" && {\n    # DBus abstract socket (dbus-launch)\n    store_runoption env \"DBUS_SESSION_BUS_ADDRESS=$DBUS_SESSION_BUS_ADDRESS\"\n    [ \"${DBUS_SESSION_BUS_PID:-}\" ]      && store_runoption env  \"${DBUS_SESSION_BUS_PID:-}\"\n    [ \"${DBUS_SESSION_BUS_WINDOWID:-}\" ] && store_runoption env  \"${DBUS_SESSION_BUS_WINDOWID:-}\"\n    [ \"$Network\" != \"host\" ] && {\n      note \"Option --hostdbus: Did not find a DBus session socket file\n  but an abstract unix socket. To allow access for container,\n  x11docker needs insecure option '--network=host'.\n  Sharing host dbus will fail.\"\n      check_fallback\n      return 1\n    }\n  }\n  return 0\n}\nsetup_printer() {               # option --printer: connect to cups printer server\n  # Default CUPS setups create a unix socket /run/cups/cups.sock as given from 'lpstat -H'.\n  # Sharing this socket and pointing environment variable CUPS_SERVER to it serves most cases.\n  # Possible CUPS network setups need to allow access from container, see note below.\n  local Cupsserver=\n\n  command -v lpstat >/dev/null || {\n    note \"Option --printer: command lpstat not found.\n  Is cups printer server installed on your system?\n  Error: Cannot share access to printer.\"\n    Sharecupsmode=\"\"\n    return 1\n  }\n\n  case \"$Sharecupsmode\" in\n    auto)\n      Sharecupsmode=\"socket\"\n      [ \"$Snapsupport\" = \"yes\" ]      && Sharecupsmode=\"tcp\"\n      [ \"$Runtime\" = \"kata-runtime\" ] && Sharecupsmode=\"tcp\"\n      #[ \"$Runtime\" = \"sysbox-runc\" ]  && Sharecupsmode=\"tcp\"\n    ;;\n  esac\n\n  case \"$Sharecupsmode\" in\n    tcp)\n      Cupsserver=\"$Hostip:631\"\n      [ \"$Network\" = \"none\" ] && {\n        note \"Option --printer=tcp does not work without network access.\n  Consider to enable option -I, --network.\"\n        check_fallback\n        return 1\n      }\n    ;;\n    socket) Cupsserver=\"$(lpstat -H)\" ;;\n  esac\n\n  grep -q \":\" <<< \"$Cupsserver\" && {\n    [ \"$(cut -d: -f1 <<< \"$Cupsserver\")\" = \"localhost\" ] && Cupsserver=\"$Hostip:$(cut -d: -f2 <<< \"$Cupsserver\")\"\n    [ \"$(cut -d: -f1 <<< \"$Cupsserver\")\" = \"127.0.0.1\" ] && Cupsserver=\"$Hostip:$(cut -d: -f2 <<< \"$Cupsserver\")\"\n    note \"Option --printer: Network setup for CUPS detected.\n  Server address: $Cupsserver\n  You may need to allow container access in /etc/cups/cupsd.conf, e.g.:\n\nPort 631\n<Location />\n  # Allow remote access...\n  Order allow,deny\n  Allow 172.17.0.*\n  Allow 172.20.0.*\n  Allow 127.0.0.1\n</Location>\n\nAlso you need to allow network access for each printer in a CUPS GUI.\"\n  }\n\n  [ \"$Cupsserver\" ]    && store_runoption env \"CUPS_SERVER=$Cupsserver\"\n  [ -e \"$Cupsserver\" ] && {\n    [ \"$(dirname \"$Cupsserver\")\" = \"/run/cups\" ] && store_runoption volume \"/run/cups\" || store_runoption volume \"$Cupsserver\"\n  }\n\n  return 0\n}\nsetup_sound_alsa() {            # option --alsa: share sound devices\n  # Sound with ALSA is directly supported by the kernel and only needs to share devices in /dev/snd.\n  # libasound2 in image is recommended.\n  # The desired sound card can be specified with environment variable ALSA_CARD. See card name in 'aplay -l'.\n  # Further documentation at https://github.com/mviereck/x11docker/wiki/Container-sound:-ALSA-or-Pulseaudio\n\n  warning \"Option --alsa: ALSA sound degrades container isolation.\n  Sharing device files in /dev/snd, container gains access to sound hardware.\n  Container applications can catch audio output and microphone input.\"\n\n  [ \"$Alsacard\" ] && store_runoption env \"ALSA_CARD=$Alsacard\"\n\n  pgrep pulseaudio >/dev/null && note \"Option --alsa: It seems that pulseaudio is running\n  on your host. Pulseaudio can interfere with ALSA sound.\n  Host sound may not work while container is playing sound and vice versa.\n  Alternative: with pulseaudio on host and in image, use option --pulseaudio.\"\n\n  [ -d /dev/snd ] && store_runoption volume \"/dev/snd\" || {\n    warning \"Option --alsa: /dev/snd not found.\n  Sound support not possible.\"\n    check_fallback\n    Sharealsa=\"no\"\n    return 1\n  }\n\n  Containerusergroups=\"$Containerusergroups audio\"\n\n  return 0\n}\nsetup_sound_pulseaudio() {      # option --pulseaudio: set up pulseaudio connection\n  # Allowing container access to Pulseaudio on host can be done with a shared socket or over TCP.\n  # Sharing host user socket in XDG_RUNTIME_DIR fails since Pulseaudio v12.0.\n  # Instead, a new socket is created with pactl.\n  # TCP module is created after container startup to authenticate it with container IP.\n  # Detailed documentation at: https://github.com/mviereck/x11docker/wiki/Container-sound:-ALSA-or-Pulseaudio\n  #\n  # g  $Pulseaudiomode    =tcp or =socket or=host: Connect over tcp or with shared socket\n  # g  $Pulseaudioport    TCP port\n  local Lowerport= Upperport= Setcookie=\n\n  command -v pactl >/dev/null || {\n    note \"Option --pulseaudio: pactl not found.\n  Is pulseaudio installed and running on your host system?\n  Fallback: Disabling option --pulseaudio.\n  You can try option --alsa instead.\"\n    check_fallback\n    Pulseaudiomode=\"\"\n    return 1\n  }\n\n  [ -z \"$Pulseaudiomode\" ] && Pulseaudiomode=\"socket\"\n  [ \"$Pulseaudiomode\" = \"auto\" ] && {\n    Pulseaudiomode=\"socket\"\n    [ \"$Containeruser\" = \"$Hostuser\" ]                        || Pulseaudiomode=\"tcp\"\n    [ \"$Runtime\" = \"kata-runtime\" ]                           && Pulseaudiomode=\"tcp\"\n    [ \"$Runtime\" = \"sysbox-runc\" ]                            && Pulseaudiomode=\"tcp\"\n    [ \"$Snapsupport\" = \"yes\" ]                                && Pulseaudiomode=\"tcp\"\n    unpriv 'LC_ALL=C pactl info | grep -q \"User Name: pulse\"' && Pulseaudiomode=\"tcp\"\n    [ \"$Pulseaudiomode\" = \"tcp\" ] && note \"Option --pulseaudio: Enabling TCP mode\"\n  }\n\n  [ \"$Pulseaudiomode\" = \"tcp\" ] && [ \"$Network\" = \"none\" ] && {\n    note \"Option --pulseaudio: Without option -I, --network\n  pulseaudio sound over TCP is not possible but needed in your setup.\"\n    Pulseaudiomode=\"\"\n    check_fallback\n    return 1\n  }\n\n  warning \"Option --pulseaudio allows container applications\n  to catch your audio output and microphone input.\"\n\n  case \"$Pulseaudiomode\" in\n    socket|tcp)\n      grep -q -i \"PipeWire\" <<< \"$(unpriv \"pactl info\")\" && note \"Option --pulseaudio: Found pipewire sound server.\n  If pulseaudio sound fails, you can try \n  --pulseaudio=tcp or --pulseaudio=host instead.\"\n    ;;\n  esac\n  \n  case \"$Pulseaudiomode\" in\n    socket)\n      # create pulseaudio socket\n      Pulseaudiomoduleid=\"$(unpriv \"pactl load-module module-native-protocol-unix socket='$Pulseaudiosocket' 2>&1 ||:\")\"\n      #Pulseaudiomoduleid=\"$(unpriv \"pactl load-module libpipewire-module-protocol-native socket='$Pulseaudiosocket' 2>&1 ||:\")\" # fails with pipewire\n\n      isint \"$Pulseaudiomoduleid\" && {\n        storeinfo \"pulseaudiomoduleid=$Pulseaudiomoduleid\"\n        store_runoption env \"PULSE_SERVER=unix:$(convertpath share \"$Pulseaudiosocket\")\"\n        Setcookie=\"yes\"\n      } || {\n        note \"Option --pulseaudio: command pactl failed with output:\n  '$Pulseaudiomoduleid'\n  Is pulseaudio running at all on your host?\n  Fallback: Disabling option --pulseaudio.\n  You can try option --alsa instead.\"\n        check_fallback\n        Pulseaudiomode=\"\"\n        return 1\n      }\n\n      echo \"# Connect to host pulseaudio server using mounted UNIX socket\ndefault-server = unix:$(convertpath share \"$Pulseaudiosocket\")\n# Prevent a server running in container\nautospawn = no\ndaemon-binary = /bin/true\n# Prevent use of shared memory\nenable-shm = false\n\" >> \"$Pulseaudioconf\"\n        verbose \"Generated pulseaudio client.conf:\n$(nl -ba < \"$Pulseaudioconf\")\"\n    ;;\n    tcp)\n      read Lowerport Upperport < /proc/sys/net/ipv4/ip_local_port_range 2>/dev/null\n      [ \"$Lowerport\" ] || Lowerport=33000\n      [ \"$Upperport\" ] || Upperport=60000\n      while : ; do\n        Pulseaudioport=\"$(shuf -i $Lowerport-$Upperport -n1)\"\n        ss -lpn | grep -q \":$Pulseaudioport \" || break\n      done\n      [ -e \"$Hostuserhome/.config/pulse/cookie\" ] && cp \"$Hostuserhome/.config/pulse/cookie\" \"$Pulseaudiocookie\" || note \"Option --pulseaudio: Did not find cookie\n  $Hostuserhome/.config/pulse/cookie\"\n      store_runoption env \"PULSE_SERVER=tcp:$Hostip:$Pulseaudioport\"\n      Setcookie=\"yes\"\n    ;;\n    host)\n      Pulseaudiosocket=\"$(unpriv \"env LC_ALL=C pactl info\" | grep 'Server String' |rev|cut -d' ' -f1|rev)\"\n      store_runoption env \"PULSE_SERVER=unix:/tmp/pulseaudio.socket.host\"\n      Setcookie=\"yes\"\n    ;;\n  esac\n\n  [ \"$Setcookie\" = \"yes\" ] && {\n    [ -e \"$Hostuserhome/.config/pulse/cookie\" ] && {\n      cp \"$Hostuserhome/.config/pulse/cookie\" \"$Pulseaudiocookie\"\n      store_runoption env \"PULSE_COOKIE=$(convertpath share \"$Pulseaudiocookie\")\"\n    } || {\n      note \"Option --pulseaudio: Did not find cookie\n  $Hostuserhome/.config/pulse/cookie\"\n    }\n  }\n\n  return 0\n}\nsetup_vaapi() {                 # option --gpu: setup for VAAPI and VDPAU video decoding acceleration\n  # support for prime-run / discrete NVIDIA card #394\n  [ -n \"$__NV_PRIME_RENDER_OFFLOAD\" ] && DRI_PRIME=\"1\" && store_runoption env \"__NV_PRIME_RENDER_OFFLOAD=$__NV_PRIME_RENDER_OFFLOAD\"\n  [ -n \"$__VK_LAYER_NV_optimus\" ]     && DRI_PRIME=\"1\" && store_runoption env \"__VK_LAYER_NV_optimus=$__VK_LAYER_NV_optimus\"\n  [ -n \"$__GLX_VENDOR_LIBRARY_NAME\" ] && DRI_PRIME=\"1\" && store_runoption env \"__GLX_VENDOR_LIBRARY_NAME=$__GLX_VENDOR_LIBRARY_NAME\"\n\n  # VA-API and VDPAU #443\n  # Infos at https://wiki.archlinux.org/title/Hardware_video_acceleration\n\n  # check VA-API driver on host\n  [ -z \"${LIBVA_DRIVER_NAME:-}\" ] && {\n    LIBVA_DRIVER_NAME=\"$(xtool \"vainfo 2>&1 | grep drv_video.so | rev | cut -d/ -f1 | rev\" ||:)\"\n    LIBVA_DRIVER_NAME=\"${LIBVA_DRIVER_NAME%\"_drv_video.so\"}\"\n  }\n  # Guess driver based on kernel modules if vainfo is not available\n  [ -z \"$LIBVA_DRIVER_NAME\" ] && {\n    lspci -k | grep -q -e amdgpu -e radeon && {\n      LIBVA_DRIVER_NAME=\"${LIBVA_DRIVER_NAME:-radeonsi}\"\n    }\n    lspci -k | grep -q nouveau && {\n      LIBVA_DRIVER_NAME=\"${LIBVA_DRIVER_NAME:-nouveau}\"\n    }\n    lspci -k | grep -q nvidia && {\n      LIBVA_DRIVER_NAME=\"${LIBVA_DRIVER_NAME:-nvidia}\"\n      note \"Option --gpu: Enabling VA-API video decoding support\n  with NVIDIA NVDECODE. If you want to use NVIDIA VDPAU instead,\n  please run x11docker with '--env LIBVA_DRIVER_NAME=vdpau'\n  or set the variable globally with 'export LIBVA_DRIVER_NAME=vdpau'.\"\n    }\n    lspci -k | grep -q i915 && {\n      [ -n \"${DRI_PRIME:-}\" ] || {\n        LIBVA_DRIVER_NAME=\"${LIBVA_DRIVER_NAME:-i965}\"\n        note \"Option --gpu: Enabling VA-API intel driver i965.\n  If you want to use the newer iHD intel driver instead,\n  please run x11docker with '--env LIBVA_DRIVER_NAME=iHD'\n  or set the variable globally with 'export LIBVA_DRIVER_NAME=iHD'.\"\n      }\n    }\n  }\n  case \"${LIBVA_DRIVER_NAME:-}\" in\n    radeonsi|r600) VDPAU_DRIVER=\"${VDPAU_DRIVER:-radeonsi}\" ;;\n    i965|iHD)      VDPAU_DRIVER=\"${VDPAU_DRIVER:-va_gl}\" ;;\n    nouveau)       VDPAU_DRIVER=\"${VDPAU_DRIVER:-nouveau}\" ;;\n    nvidia|vdpau)  VDPAU_DRIVER=\"${VDPAU_DRIVER:-nvidia}\" ;;\n    \"\") note \"Option --gpu: Could not estimate drivers for VA-API and VDPAU\n  video decoding acceleration support. This will likely fail in container.\" ;; \n  esac\n  [ -n \"${LIBVA_DRIVER_NAME:-}\" ] && store_runoption env \"LIBVA_DRIVER_NAME=${LIBVA_DRIVER_NAME:-}\"\n  [ -n \"${VDPAU_DRIVER:-}\" ]      && store_runoption env \"VDPAU_DRIVER=${VDPAU_DRIVER:-}\"\n  [ -n \"${DRI_PRIME:-}\" ]         && store_runoption env \"DRI_PRIME=${DRI_PRIME:-1}\"\n\n  return 0\n}\nsetup_webcam() {                # option --webcam: share webcam devices\n  # Webcam devices appear as /dev/video* files.\n  # Unprivileged users need to be in group video.\n  # (This works only if webcam is plugged in before container starts.\n  # Hotplug support would have to be different.)\n  local Webcamdevice\n\n  [ \"$Sharewebcam\" = \"yes\" ] && warning \"Option --webcam: Container applications might look\n  at you and also might take screenshots of your Desktop.\"\n\n  while read -r Webcamdevice ; do\n    store_runoption volume \"$Webcamdevice\"\n  done < <(find /dev/video* -maxdepth 0 2>/dev/null || note \"Option --webcam: No webcam devices /dev/video* found.\n  Webcam in container will fail.\")\n  Containerusergroups=\"$Containerusergroups video\"\n\n  # at least cheese and gnome-ring need some device information from udev.\n  store_runoption volume \"/run/udev/data:ro\"\n  return 0\n}\n\n#### X server setup\ncheck_newxenv()  {              # find free display\n  local Line\n  # find free display number\n  [ \"$Newdisplaynumber\" ] || {\n    Newdisplaynumber=\"100\"\n    while :; do\n      case \"$Xserver\" in\n        --xwin|--runx) Newdisplaynumber=\"$((RANDOM / 10 + 200))\" ;;\n        *)             Newdisplaynumber=\"$((Newdisplaynumber + 1))\" ;;\n      esac\n      grep -q -x \"$Newdisplaynumber\" < \"$Numbersinusefile\" || [ -n \"$(find \"/tmp/.X11-unix/X$Newdisplaynumber\" \"/tmp/.X$Newdisplaynumber-lock\" \"$XDG_RUNTIME_DIR/wayland-$Newdisplaynumber\" 2>/dev/null)\" ] || break\n    done\n  }\n  echo \"$Newdisplaynumber\" >> \"$Numbersinusefile\"\n\n  # --xoverip\n  [ -z \"$Xoverip\" ] && {\n    case \"$Mobyvm\" in\n      yes)\n        Xoverip=\"listentcp\"\n      ;;\n    esac\n    case \"$Runtime\" in\n      kata-runtime)\n        note \"Option --runtime=$Runtime works only with X over IP.\n  Enabling option --xoverip.\"\n        Xoverip=\"yes\"\n      ;;\n    esac\n    case \"$Xserver\" in\n      --xwin|--runx)\n        Xoverip=\"listentcp\"\n        [ \"$Network\" = \"none\" ] && {\n          note \"Option $Xserver needs network access.\n  Enabling option -I, --network.\"\n          check_fallback\n          Network=\"\"\n        }\n      ;;\n      --hostdisplay)\n        [ \"$Hostxoverip\" = \"yes\" ] && {\n          note \"Option $Xserver needs --xoverip because host X server\n  DISPLAY==$Hostdisplay uses X over TCP/IP. Enabling option --xoverip.\"\n          Xoverip=\"listentcp\"\n        }\n      ;;\n    esac\n  }\n  case \"$Xoverip\" in\n    yes)\n      case \"$Xserver\" in\n        --hostdisplay)\n          grep -q -- '^:' <<< \"$Hostdisplay\" && Xoverip=\"socat\" || Xoverip=\"listentcp\"\n        ;;\n        --xwayland|--weston-xwayland|--kwin-xwayland|--xpra-xwayland|--xpra2-xwayland)\n          Xoverip=\"socat\"\n        ;;\n        *)\n          Xoverip=\"listentcp\"\n        ;;\n      esac\n    ;;\n  esac\n  Xoverip=\"${Xoverip:-no}\"\n  case \"$Xoverip\" in\n    socat|listentcp)\n      case \"$Backend\" in\n        docker|podman|nerdctl)\n          case \"$Xcontainer\" in\n            yes)\n            ;;\n            no)\n              [ \"$Network\" = \"none\" ] && error \"Option --xoverip needs network access.\n  Please enable option -I, --network.\n  Alternatively provide image x11docker/xserver (option --xc)\n  to allow an isolated internal network.\"\n            ;;\n          esac\n        ;;\n      esac\n    ;;\n  esac\n\n  # --xc --xoverip\n  Xcnetworkname=\"x11docker_X${Newdisplaynumber}_network_${Cachenumber}\"\n\n  ###\n\n  # set $Newdisplay (DISPLAY of container) and $Newxsocket\n  case \"$Xserver\" in\n    --hostdisplay)\n      case \"$Xoverip\" in\n        listentcp)\n          [ \"$(cut -c1 <<< \"$Hostdisplay\")\" = \":\" ] && Newdisplay=\"${Hostip}${Hostdisplay}\" || Newdisplay=\"$Hostdisplay\"  ;;\n        no)\n          Newdisplay=\"$Hostdisplay\"\n          Newdisplaynumber=\"$(echo \"$Newdisplay\" | cut -d: -f2 | cut -d. -f1)\"\n        ;;\n        socat)\n          case \"$Xcontainer\" in\n            yes) Newdisplay=\"XCONTAINERIP:$Newdisplaynumber\" ;;\n            no)  Newdisplay=\"$Hostip:$Newdisplaynumber\" ;;\n          esac\n        ;;\n      esac\n      Newxsocket=\"$Hostxsocket\"\n    ;;\n    --weston|--kwin|--hostwayland|--tty)\n      Newdisplay=\"\"\n      Newxsocket=\"\"\n      Xclientcookie=\"\"\n      Xservercookie=\"\"\n    ;;\n    *)\n      case \"$Xoverip\" in\n        socat|listentcp)\n          case \"$Xcontainer\" in\n            yes) Newdisplay=\"XCONTAINERIP:$Newdisplaynumber\" ;;\n            no)  Newdisplay=\"$Hostip:$Newdisplaynumber\" ;;\n          esac\n        ;;\n        no)\n          Newdisplay=\":$Newdisplaynumber\"\n          Newxlock=\"/tmp/.X$Newdisplaynumber-lock\"\n          [ -n \"$(find \"$Newxsocket\" \"$Newxlock\" 2>/dev/null)\" ] && error \"Display $Newdisplay is already in use.\"\n        ;;\n      esac\n      Newxsocket=\"/tmp/.X11-unix/X$Newdisplaynumber\"\n    ;;\n  esac\n\n  # set $Newwaylandsocket\n  case \"$Xserver\" in\n    --weston*|--kwin*|--xpra-xwayland|--xpra2-xwayland) Newwaylandsocket=\"wayland-$Newdisplaynumber\" ;;\n    --hostwayland|--xwayland)                           Newwaylandsocket=\"$Hostwaylandsocket\" ;;\n  esac\n\n  return 0\n}\ncheck_screensize() {            # check physical and virtual screen size (also option --size)\n  local Line= Xrandroutput=\n\n  [ -z \"$Hostdisplay\" ] && [ -n \"$Hostwaylandsocket\" ] && verbose \"check_screensize(): Skipping check on pure Wayland environment\"\n\n  # check whole display size, can include multiple monitors\n  [ -n \"$Hostdisplay\" ] && [ -z \"$Newxvt\" ] && {\n    Xrandroutput=\"$(xtool \"xrandr 2>>$Xinitlogfile\" ||:)\"\n    [ -n \"$Xrandroutput\" ] && {\n      Line=\"$(grep current <<< \"$Xrandroutput\" | head -n1 | cut -d, -f2)\"\n      Maxxaxis=\"$(echo \"$Line\" | cut -d' ' -f3)\"\n      Maxyaxis=\"$(echo \"$Line\" | cut -d' ' -f5)\"\n      [ -z \"$Maxxaxis\" ] && {\n        Maxxaxis=\"$(grep ' connected' <<< \"$Xrandroutput\" | head -n1 | cut -dx -f1 | rev | cut -d' ' -f1 | rev)\"\n        Maxyaxis=\"$(grep ' connected' <<< \"$Xrandroutput\" | head -n1 | cut -dx -f2 | cut -d' ' -f1 | cut -d+ -f1)\"\n      }\n    }\n  }\n\n  [ -n \"$Screensize\" ] && {\n    Xaxis=\"${Screensize%x*}\"\n    Yaxis=\"${Screensize#*x}\"\n  }\n\n  [ -z \"$Maxxaxis\" ] && {\n    Maxxaxis=\"1920\"\n    Maxyaxis=\"1200\"\n    [ \"$Maxxaxis\" -lt \"${Xaxis:-0}\" ] && Maxxaxis=\"$Xaxis\"\n    [ \"$Maxyaxis\" -lt \"${Yaxis:-0}\" ] && Maxyaxis=\"$Yaxis\"\n  }\n\n  # size for windowed desktops, roughly maximized relative to primary monitor\n  case \"$Xserver\" in\n    --xpra*) [ \"$Desktopmode\" = \"yes\" ] && Xserver=\"${Xserver}-desktop\" ;;\n  esac\n  [ -z \"$Screensize\" ] && [ -z \"$Newxvt\" ] && case \"$Xserver\" in\n    --xephyr|--weston-xwayland|--weston|--kwin|--kwin-xwayland|--nxagent|--xpra*-desktop)\n      Xaxis=\"$((Maxxaxis-96))\"\n      Yaxis=\"$((Maxyaxis-96))\"\n      Xaxis=\"$(( $(( $Xaxis / 8 )) * 8 ))\"  # avoid grey edge in Xwayland, needs full byte x width\n    ;;\n  esac\n  Xserver=\"${Xserver%-desktop}\"\n\n  [ \"$Fullscreen\" = \"yes\" ] && [ -z \"$Newxvt\" ] && Screensize=\"${Maxxaxis}x${Maxyaxis}\"\n\n  [ -z \"$Xaxis\" ] && {\n    Xaxis=\"$Maxxaxis\"\n    Yaxis=\"$Maxyaxis\"\n  }\n\n  # regard scaling (option --scale)\n  [ \"$Scaling\" ] && {\n    Xaxis=\"$(awk -v a=\"$Xaxis\" -v b=\"$Scaling\" 'BEGIN {print (a / b)}')\"\n    Xaxis=\"${Xaxis%.*}\"\n    Yaxis=\"$(awk -v a=\"$Yaxis\" -v b=\"$Scaling\" 'BEGIN {print (a / b)}')\"\n    Yaxis=\"${Yaxis%.*}\"\n  }\n\n  [ -z \"$Screensize\" ] && case \"$Xserver\" in\n    --xorg) ;;  # Xorg autodetects screen size, preset only with option --size\n    --weston-xwayland|--weston|--kwin|--kwin-xwayland)\n      [ -z \"$Newxvt\" ] && Screensize=\"${Xaxis}x${Yaxis}\"\n    ;;\n    *) Screensize=\"${Xaxis}x${Yaxis}\" ;;\n  esac\n\n  xtool --check cvt && {\n    Modeline=\"$(xtool \"cvt '$Xaxis' '$Yaxis'\" | tail -n1 | cut -d' ' -f2-)\"\n    Modeline=\"$(echo $Modeline | cut -d_ -f1)\\\" $(echo $Modeline | cut -d_ -f2- | cut -d' ' -f2-)\"\n  }\n  verbose \"Virtual screen size: $Screensize\"\n  verbose \"Physical screen size:\n  $(grep Screen <<< \"$Xrandroutput\" ||:)\"\n\n  # create set of Modelines if needed\n  case \"$Xserver\" in\n    --xpra|--xpra2|--xvfb) xtool --check cvt && Modelinefile=\"$(create_modelinefile \"${Maxxaxis}x${Maxyaxis}\")\" ;;\n  esac\n\n  return 0\n}\ncheck_vt() {                    # option --xorg: find free vt / tty\n  local Line= Ttyinuse=\n\n  # if started from console, use current tty\n  case \"$Newxvt\" in\n    \"\")\n      tty -s && [ \"$Runsonconsole\" = \"yes\" ] && {\n        Newxvt=\"${Newxvt#/dev/tty}\"\n      }\n    ;;\n    auto) Newxvt=\"\" ;;\n    *)    return 0 ;;\n  esac\n\n  # check ttys currently in use\n  [ \"$Newxvt\" ] || {\n    for Line in $(find /sys/class/vc/vcsa*); do\n      Ttyinuse=\"$Ttyinuse ${Line#/sys/class/vc/vcsa} \"\n    done\n    debugnote \"check_vt(): TTYs currently known to kernel: $Ttyinuse\"\n  }\n\n  [ \"$Newxvt\" ] && grep -q \" $Newxvt \" <<< \"$Ttyinuse\" && warning \"TTY $Newxvt seems to be already in use.\"\n\n  # try to find free tty within range of 8..12\n  [ \"$Newxvt\" ] || {\n    for ((Newxvt=8 ; Newxvt<=12 ; Newxvt++)) ; do\n      grep -q \" $Newxvt \" <<< \"$Ttyinuse\" || break\n    done\n  }\n\n  # try to find free tty within range of 1..7\n  [ \"$Newxvt\" ] || {\n    for ((Newxvt=1 ; Newxvt<=7 ; Newxvt++)) ; do\n      grep -q \" $Newxvt \" <<< \"$Ttyinuse\" || break\n    done\n  }\n\n  # try to find free tty with fgconsole. Fails without privileges within X.\n  [ \"$Newxvt\" ] || Newxvt=\"$(fgconsole --next-available 2>/dev/null)\"\n  [ \"$Newxvt\" ] || Newxvt=\"$(fgconsole --next-available 2>/dev/null < \"/dev/tty${XDG_VTNR:-}\")\"\n\n  # try to find free tty within range of 13..63\n  [ \"$Newxvt\" ] || {\n    for ((Newxvt=13 ; Newxvt<=63 ; Newxvt++)) ; do\n      grep -q \" $Newxvt \" <<< \"$Ttyinuse\" || break\n    done\n  }\n\n  [ \"$Newxvt\" ] || error \"Could not identify a free tty for --xorg.\n  You can specify a desired tty number N with option --vt=N.\"\n\n  [ \"${XDG_VTNR:-}\" ] && [ \"$Hostdisplay$Hostwaylandsocket\" ] && note \"Current X server $Hostdisplay runs on tty ${XDG_VTNR:-}.\n  Access it with [CTRL][ALT][F${XDG_VTNR:-}].\"\n\n  [ \"${Newxvt:-999}\" -gt \"12\" ] && {\n    fgconsole --next-available 1>/dev/null 2>/dev/null || note \"Could not check for a free tty below or equal to 12.\n  Would need to use command fgconsole for a better check.\n  Possibilities:\n  1.) Run x11docker as root.\n  2.) Add user to group tty (not recommended, may be insecure).\n  3.) Use display manager gdm3.\n  4.) Run x11docker directly from console.\"\n    note \"To access X on tty$Newxvt, use command 'chvt $Newxvt'\"\n  } || {\n    note \"New X server $Xserver $Newdisplay will run on tty $Newxvt.\n  Access it with [CTRL][ALT][F$Newxvt].\"\n  }\n\n  return 0\n}\ncheck_xcontainer() {            # option --xc: check backend, rootless and image x11docker/xserver\n  local Auto= Fail=\n\n  # workaround: X server options not supported by --xc already caught here if they are specified on cli\n  case \"$Xserver\" in\n    --tty|--hostwayland)\n      check_xdepends \"$Xserver\" && Xcontainer=\"no\"\n    ;;\n  esac\n\n  # check if X container should run rootful or rootless (for tty access it must be rootful)\n  case \"$Backendrootless\" in\n    yes)\n      { [ \"$Xserver\" = \"--xorg\" ] || [ -n \"$Newxvt\" ] ; } && Xcrootless=\"no\" || Xcrootless=\"yes\"\n      experimental \"run X container rootless\" && Xcrootless=\"yes\"\n    ;;\n    no)\n      Xcrootless=\"no\"\n    ;;\n  esac\n\n  # check if image x11docker/xserver is available\n  case \"$Xcontainer\" in\n    no) ;;\n    yes|auto) \n      case \"$Backend\" in\n        docker|podman|nerdctl)\n          Xcrootless=\"${Xcrootless:-$Backendrootless}\"\n          Xcontainerbackend=\"$Backend\"\n          unpriv_xcbackend \"$Xcontainerbackend inspect $Xcontainerimage\" >/dev/null 2>&1 || Fail=\"yes\"\n        ;;\n        host|proot)\n          Xcrootless=\"yes\" unpriv_xcbackend \"docker inspect $Xcontainerimage\" >/dev/null 2>&1 && Xcontainerbackend=\"docker\" && Xcrootless=\"yes\"\n          [ -z \"$Xcontainerbackend\" ] && {\n            Xcrootless=\"no\"  unpriv_xcbackend \"docker inspect $Xcontainerimage\" >/dev/null 2>&1 && Xcontainerbackend=\"docker\" && Xcrootless=\"no\"\n          }\n          [ -z \"$Xcontainerbackend\" ] && {\n            unpriv_xcbackend \"podman inspect $Xcontainerimage\" >/dev/null 2>&1 && Xcontainerbackend=\"podman\" && Xcrootless=\"${Xcrootless:-yes}\"\n          }\n          [ \"$Xcontainer\" = \"yes\" ] && [ -z \"$Xcontainerbackend\" ] && Xcontainerbackend=\"docker or podman\" && Fail=\"yes\"\n        ;;\n      esac\n    ;;\n    docker)\n      Xcontainerbackend=\"$Xcontainer\"\n      Xcontainer=\"yes\"\n      [ -z \"$Xcrootless\" ] && {\n        [ -n \"$DOCKER_HOST\" ] && Xcrootless=\"yes\" || Xcrootless=\"no\"\n      }\n      unpriv_xcbackend \"$Xcontainerbackend inspect $Xcontainerimage\" >/dev/null 2>&1 || Fail=\"yes\"\n    ;;\n    podman|nerdctl)\n      Xcontainerbackend=\"$Xcontainer\"\n      Xcontainer=\"yes\"\n      Xcrootless=\"${Xcrootless:-yes}\" unpriv_xcbackend \"$Xcontainerbackend inspect $Xcontainerimage\" >/dev/null 2>&1 && Xcrootless=\"${Xcrootless:-yes}\" || Fail=\"yes\"\n      [ \"$Fail\" = \"yes\" ] && [ -z \"$Xcrootless\" ] && [ \"$Startuser\" = \"root\" ] && {\n        Fail=\"\"\n        Xcrootless=\"no\"\n        unpriv_xcbackend \"$Xcontainerbackend inspect $Xcontainerimage\" >/dev/null 2>&1 || Fail=\"yes\"\n      }\n    ;;\n  esac\n\n  [ \"$Fail\" = \"yes\" ] && {\n    [ \"$Xcontainer\" = \"yes\" ] && {\n      note \"Option --xc: Image $Xcontainerimage not found\n  at backend '$Xcontainerbackend' (rootless: $Xcrootless).\n  Fallback: Disabling option --xc\"\n      check_fallback\n    }\n    Xcontainer=\"no\"\n  }\n  \n  [ -z \"$Xcontainerbackend\" ] && Xcontainer=\"no\"\n  \n  case \"$Xcontainer\" in\n    yes|auto)\n      case \"$Xcontainerbackend\" in\n        podman|nerdctl)\n          [ \"$Startuser\" != \"root\" ] && [ \"$Xcrootless\" = \"no\" ] && {\n            [ \"$Xcontainer\" = \"yes\" ] && {\n              note \"Option --xc with rootful X container backend $Xcontainerbackend\n  needs to be started with root privileges. root needed to claim a tty.\n  Fallback: Disabling option --xc\"\n              check_fallback\n            }\n            Xcontainer=\"no\"\n            Auto=\"yes\"\n            experimental \"allow rootless Xorg container\" && Xcontainer=\"yes\"\n          }\n        ;;\n      esac\n      [ \"$Xcontainer\" = \"auto\" ]    && Xcontainer=\"yes\" && Auto=\"yes\" || Auto=\"no\"\n      [ \"$Winsubsystem\" ]           && Xcontainer=\"no\"\n      case \"$Runtime\" in\n        kata-runtime)                  Xcontainer=\"no\" ;;\n      esac\n      case \"$Auto\" in\n        yes)\n          [ \"$Xcontainer\" = \"yes\" ] && note \"Option --xc for X in container enabled automatically.\"\n        ;;\n        no)\n          [ \"$Xcontainer\" = \"no\" ] && {\n            note \"Option --xc not possible:\n  - without image x11docker/xserver.\n  - with runtime kata-runtime\n  - on MS Windows\n  Fallback: Setting --xc=no\"\n            check_fallback\n          }\n        ;;\n      esac\n    ;;\n  esac\n\n  case \"$Xcontainer\" in\n    yes)\n      Xcontainerinspect=\"$(unpriv_xcbackend \"$Xcontainerbackend inspect $Xcontainerimage\")\"\n      Xcontaineroptions=\"$(parse_inspect \"$Xcontainerinspect\" \"Config\" \"Labels\" \"options\")\"\n      Xcontaineroptions=\"${Xcontaineroptions:-\"--nxagent --xpra --xpra2 --xpra2-xwayland --xephyr --weston-xwayland --xvfb --xwayland --weston\"}\"\n      Xcontaineroptionsconsole=\"$(parse_inspect \"$Xcontainerinspect\" \"Config\" \"Labels\" \"options_console\")\"\n      Xcontainertools=\"$(parse_inspect \"$Xcontainerinspect\" \"Config\" \"Labels\" \"tools\")\"\n    ;;\n    no)\n      debugnote \"check_xcontainer(): --xc disabled\"\n    ;;\n  esac\n\n  return 0\n}\ncheck_xdepends() {              # check dependencies on host for X server option $1\n  # Return 1 if something is missing or not possible\n  local Return= Message= Xcopt=\n\n  case \"$Autochooseserver\" in\n    yes) [ \"$Printcheck\" = \"yes\" ] && Message=\"note\" || Message=\"debugnote\" ;;\n    no)  Message=\"note\" ;;\n  esac\n\n  [ \"${1:-}\" = \"--tty\" ] && return 0\n  [ \"$Lastcheckedxserver\" = \"${1:-}\" ] && debugnote \"Dependencies of ${1:-} already checked: $Lastcheckedxserverresult \" && return \"$Lastcheckedxserverresult\"\n\n  case \"$Runsonconsole\" in\n    no)\n      grep -q -w -- \"${1:-}\" <<< \"$Xcontaineroptions --hostdisplay\" && Xcopt=\"yes\"\n    ;;\n    yes)\n      grep -q -w -- \"${1:-}\" <<< \"$Xcontaineroptionsconsole\"        && Xcopt=\"yes\"\n    ;;\n  esac\n\n  # Wayland\n  case \"${1:-}\" in\n    --xpra-xwayland|--xpra2-xwayland|--weston-xwayland|--xwayland|--weston|--kwin|--kwin-xwayland|--hostwayland)\n      [ \"$Nvidiaversion\" ] && verlt \"$Nvidiaversion\" \"470\" && {\n        $Message \"${1:-}: Closed source NVIDIA driver $Nvidiaversion < version 470.x does not support Wayland.\n  You would need NVIDIA driver>=v470.x and Xwayland>=21.1.2\"\n        Return=1\n      }\n      case \"$Runtime\" in\n        kata-runtime)\n          $Message \"${1:-} is not supported with option --runtime=$Runtime\"\n          Return=1\n        ;;\n      esac\n      case \"$Mobyvm\" in\n        yes)\n          $Message \"${1:-} is not supported with MobyVM / docker-for-win\"\n          Return=1\n        ;;\n      esac\n    ;;\n  esac\n  case \"${1:-}\" in\n    --weston|--kwin)\n      [ \"$Containeruser\" != \"$Hostuser\" ] && {\n        $Message \"${1:-} does not run with a container user\n  different from host user $Hostuser (option --user=$Containeruser).\"\n        Return=1\n      }\n    ;;\n  esac\n  [ \"$Setupwayland\" = \"yes\" ] && case \"$Xserver\" in\n    --weston|--kwin|--hostwayland) ;;\n    *) \n      $Message \"${1:-} does not support a Wayland environment.\" \n      Return=1\n    ;;\n  esac\n\n  # xinit\n  case \"${1:-}\" in\n    --xephyr|--xpra|--xpra-xwayland|--nxagent|--xvfb|--xwayland|--weston-xwayland|--kwin-xwayland|--xorg)\n      xtool --check --quiet xinit || {\n        $Message \"${1:-}: xinit not found.\n  $Wikipackagesimage\"\n        Return=1\n      }\n    ;;\n  esac\n\n  # X command\n  case \"${1:-}\" in\n    --xpra2*)\n      command -v \"xpra\" >/dev/null || {\n        $Message \"${1:-}: xpra not found on host.\n  $Wikipackages\"\n        Return=1\n      }\n    ;;\n  esac\n  [ \"$Xcopt\" ] || case \"${1:-}\" in\n    --xpra)\n      command -v \"xpra\" >/dev/null || {\n        $Message \"${1:-}: xpra not found.\n  $Wikipackagesimage\"\n        Return=1\n      }\n      command -v \"Xvfb\" >/dev/null || {\n        $Message \"${1:-}: Xvfb not found.\n  $Wikipackagesimage\"\n        Return=1\n      } ;;\n    --xpra-xwayland)\n      command -v \"xpra\" >/dev/null || {\n        $Message \"${1:-}: xpra not found.\n  $Wikipackagesimage\"\n        Return=1\n      } ;;\n    --xephyr)\n      command -v \"Xephyr\" >/dev/null || {\n        $Message \"${1:-}: Xephyr not found.\n  $Wikipackagesimage\"\n        Return=1\n      } ;;\n    --nxagent)\n      command -v \"nxagent\" >/dev/null || {\n        $Message \"${1:-}: nxagent not found.\n  $Wikipackagesimage\"\n        Return=1\n      } ;;\n    --xvfb)\n      command -v \"Xvfb\" >/dev/null || {\n        $Message \"${1:-}: Xvfb not found.\n  $Wikipackagesimage\"\n        Return=1\n      } ;;\n    --xorg)\n      command -v \"Xorg\" >/dev/null || {\n        $Message \"${1:-}: Xorg not found.\n  $Wikipackages\"\n        Return=1\n      } ;;\n    --xwin)\n      case \"$Winsubsystem\" in\n        CYGWIN)\n          command -v XWin >/dev/null || {\n            $Message \"${1:-}: XWin not found.\n  Need packages 'xinit', 'xauth' and 'xwininfo' in Cygwin (X11 section).\"\n            Return=1\n          }\n        ;;\n        WSL1|WSL2)\n          $Message \"${1:-}: XWin is available in Cygwin on MS Windows only.\n  Use runx to provide XWin in WSL:  https://github.com/mviereck/runx\"\n          Return=1\n        ;;\n        MSYS2)\n          $Message \"${1:-}: XWin is available in Cygwin on MS Windows only.\n  With runx XWin is available in WSL, too.\n  In MSYS2 you can only use runx with VcXsrv to provide an X server:\n    https://github.com/mviereck/runx\"\n          Return=1\n        ;;\n        \"\")\n          $Message \"${1:-}: XWin is available in Cygwin on MS Windows only.\"\n          Return=1\n        ;;\n      esac\n      command -v xwininfo >/dev/null || {\n        $Message \"${1:-}: xwininfo not found. Need 'xwininfo' package from Cygwin/X (X11 section).\"\n        Return=1\n      }\n      [ \"$Hostip\" ] || {\n        $Message \"${1:-}: Failed to get host IP address.\"\n        Return=1\n      }\n    ;;\n    --runx)\n      [ \"$Winsubsystem\" ] || {\n        $Message \"${1:-}: runx is available on MS Windows only.\"\n        Return=1\n      }\n      command -v runx >/dev/null || {\n        $Message \"${1:-}: runx not found. Need runx from https://github.com/mviereck/runx\"\n        Return=1\n      }\n    ;;\n  esac\n  # Wayland command\n  [ \"$Xcopt\" ] || case \"${1:-}\" in\n    --weston|--xpra-xwayland|--weston-xwayland)\n      command -v \"weston\" >/dev/null || {\n        $Message \"${1:-}: weston not found.\n  $Wikipackagesimage\"\n        Return=1\n      } ;;\n    --kwin|--kwin-xwayland)\n      command -v \"kwin_wayland\" >/dev/null || {\n        $Message \"${1:-}: kwin_wayland not found.\n  $Wikipackagesimage\"\n        Return=1\n      } ;;\n  esac\n  [ \"$Xcopt\" ] || case \"${1:-}\" in\n    --xpra-xwayland|--weston-xwayland|--kwin-xwayland|--xwayland)\n      command -v \"Xwayland\" >/dev/null || {\n        $Message \"${1:-}: Xwayland not found.\n  $Wikipackagesimage\"\n        Return=1\n      } ;;\n  esac\n\n  case \"${1:-}\" in\n    --xpra-xwayland)\n      xtool --check --quiet xdotool || {\n        $Message \"${1:-}: xdotool not found.\n  $Wikipackagesimage\"\n        Return=1\n      }\n    ;;\n  esac\n\n  # xpra version\n  [ \"$Xcopt\" ] || case \"${1:-}\" in\n    --xpra*)\n      [ \"$Return\" = \"1\" ] || {\n        [ \"$Xpraversion\" ] || {\n          Xpraversion=\"$(xpra --version 2>/dev/null | cut -d' ' -f2)\"\n          verbose \"Xpra version: ${Xpraversion:-XPRA_NOT_FOUND}\"\n          [ \"$Xprahelp\" ] || Xprahelp=\"$(xpra --help 2>/dev/null)\"\n        }\n      }\n    ;;\n  esac\n  case \"${1:-}\" in\n    --hostdisplay|--xpra-xwayland|--xpra2-xwayland|--xephyr|--nxagent)\n      [ \"$Hostdisplay\" ] || {\n        $Message \"${1:-} needs a running X server. DISPLAY is empty.\"\n        Return=1\n      }\n    ;;\n    --hostwayland|--xwayland)\n      [ \"$Hostwaylandsocket\" ] || {\n        $Message \"${1:-} needs a running Wayland compositor. WAYLAND_DISPLAY is empty.\"\n        Return=1\n      }\n    ;;\n  esac\n  [ \"$Winsubsystem\" ] && {\n    case \"${1:-}\" in\n      --xwin|--runx) ;;\n      --xpra*)\n        $Message \"${1:-} is not supported on MS Windows.\"\n        Return=1\n      ;;\n      *)\n        [ -z \"$Hostdisplay\" ] && {\n          case \"$Winsubsystem\" in\n            Cygwin) $Message \"${1:-} needs a running X server. DISPLAY is empty.\n  Please install packages in Cygwin:  xinit xauth xwininfo\n  or use runx to provide an X server on MS Windows:\n    https://github.com/mviereck/runx\" ;;\n            MSYS2|WSL1|WSL2) $Message \"${1:-} needs a running X server. DISPLAY is empty.\n  Please use runx to provide an X server on MS Windows:\n    https://github.com/mviereck/runx\" ;;\n          esac\n          Return=1\n        }\n      ;;\n    esac\n  }\n\n  # --border\n  [ \"$Xpraborder\" ] && {\n    case \"$Xserver\" in\n      --xpra*) ;;\n      *)\n        $Message \"${1:-} does not support option --border.\n  Try one of --xpra* options instead.\"\n        Return=1\n      ;;\n    esac\n  }\n\n  # --checkwindow\n  [ -n \"$Checkforopenwindow\" ] && {\n    case \"$Xserver\" in\n      --weston|--kwin|--hostwayland)\n        $Message \"${1:-} does not support option --checkwindow.\"\n        Return=1\n      ;;\n    esac\n  }\n\n  # --desktop\n  case \"$Xserver\" in\n    --hostdisplay|--hostwayland)\n      [ \"$Desktopmode\" = \"yes\" ] && {\n        $Message \"${1:-} does not support option --desktop.\"\n        Return=1\n      }\n    ;;\n  esac\n\n  # --dpi\n  [ -n \"$Dpi\" ] && case \"$Xserver\" in\n    --weston|--kwin|--hostwayland|--hostdisplay)\n      $Message \"${1:-} does not support option --dpi.\"\n      Return=1\n    ;;\n  esac\n\n  # --gpu\n  case \"$Sharegpu\" in\n    yes|no) ;;\n    direct)\n      case \"${1:-}\" in\n        --xorg) ;;\n        --weston|--kwin|--hostwayland) ;;\n        --xpra-xwayland|--xpra2-xwayland|--weston-xwayland|--kwin-xwayland|--xwayland) ;;\n        --hostdisplay)\n          [ \"$Xcontainer\" = \"no\" ] && [ \"$Shareipc\" != \"host\" ] && {\n            $Message \"${1:-}: --gpu=$Sharegpu would need insecure and discouraged\n  option --ipc=host to avoid MIT-SHM errors. Alternatively you can provide\n  image x11docker/xserver (option --xc) that contains a fake MIT-SHM library.\"\n            Return=1\n          }\n        ;;\n        *)\n          $Message \"${1:-}: --gpu=$Sharegpu not possible. You can try --gpu=virgl.\"\n          Return=1\n        ;;\n      esac\n    ;;\n    iglx)\n      case \"${1:-}\" in\n        --xorg|--xwin|--runx) ;;\n        *)\n          $Message \"${1:-}: --gpu=$Sharegpu not possible. You can try --gpu=virgl.\"\n          Return=1\n        ;;\n      esac\n    ;;\n    virgl)\n      case \"${1:-}\" in\n        --weston|--kwin|--hostwayland)\n          $Message \"${1:-}: --gpu=$Sharegpu not possible. You can try --gpu=direct.\"\n          Return=1\n        ;;\n      esac\n    ;;\n  esac\n\n  # --rotate\n  [ -n \"$Rotation\" ] && {\n    case \"$Xserver\" in\n      --weston|--weston-xwayland|--xorg) ;;\n      *)\n        $Message \"${1:-} does not support option --rotate.\n  Try --weston-xwayland, --weston or --xorg.\"\n        Return=1\n      ;;\n    esac\n  }\n\n  # --scale\n  [ \"$Scaling\" ] && {\n    case \"${1:-}\" in\n      --xpra*|--xorg) ;;\n      --weston|--weston-xwayland)\n        isint \"$Scaling\" || {\n          $Message \"${1:-} does support full integers only for option --scale.\n  Try one of the --xpra* options instead.\"\n          Return=1\n        }\n      ;;\n      *)\n        $Message \"${1:-} does not support scaling (option --scale).\n  Try one of the --xpra* or --weston* options instead.\"\n        Return=1\n      ;;\n    esac\n  }\n\n  # --output-count\n  [ \"$Outputcount\" != \"1\" ] && {\n    case \"$Xserver\" in\n      --weston|--kwin|--weston-xwayland|--kwin-xwayland|--xwin) ;;\n      *)\n        $Message \"${1:-} does not support option --output-count.\"\n        Return=1\n      ;;\n    esac\n  }\n\n  # --vt\n  [ \"$Newxvt\" ] && {\n    case \"${1:-}\" in\n      --kwin)\n        [ \"$Newxvt\" != \"auto\" ] && {\n          $Message \"${1:-} cannot claim a different console (option --vt).\"\n          Return=1\n        }\n      ;;\n      --xorg|--weston|--weston-wayland)\n        [ \"$Xcrootless\" = \"yes\" ] && {\n          $Message \"${1:-} cannot claim a new virtual terminal (option --vt) with rootless X container (option --xc).\"\n          Return=1\n          experimental \"allow rootless X container\" && Return=0\n        }\n      ;;\n      *)\n        $Message \"${1:-} cannot claim a new virtual terminal (option --vt).\"\n        Return=1\n      ;;\n    esac\n  }\n\n  # --xc\n  case \"$Xcontainer\" in\n    yes)\n      case \"$Xcopt\" in\n        \"\")\n          case \"${1:-}\" in\n            --xorg|--kwin)\n              $Message \"${1:-} is not supported by installed version of x11docker/xserver (option --xc). Please update image.\"\n              Return=1\n            ;;\n            --weston|--weston-xwayland)\n              $Message \"${1:-} on console is not supported by installed version of x11docker/xserver (option --xc). Please update image.\"\n              Return=1\n            ;;\n         esac\n        ;;\n      esac\n    ;;\n    no)\n      case \"${1:-}\" in\n        --xpra2*)\n          $Message \"${1:-} needs image x11docker/xserver (option --xc).\"\n          Return=1\n        ;;\n      esac\n    ;;\n  esac\n\n  # --xfishtank\n  [ \"$Xfishtank\" = \"yes\" ] && {\n    xtool --check --quiet xfishtank || {\n      $Message \"xfishtank not found. Can not show a fish tank.\n  Please install 'xfishtank' for option --xfishtank to show a fish tank.\n  $Wikipackagesimage\"\n      Return=1\n    }\n    case \"$Xserver\" in\n      --weston|--kwin|--hostwayland|--hostdisplay)\n        $Message \"Option ${1:-} does not support option --xfishtank\"\n        Return=1\n      ;;\n    esac\n  }\n\n  # --xoverip\n  case \"$Xoverip\" in\n    yes|socat)\n      case \"${1:-}\" in\n        --xephyr|--xorg|--nxagent|--xpra|--xpra2|--xvfb|--xwin|--runx) ;;\n        --hostdisplay|--xwayland|--weston-xwayland|--kwin-xwayland|--xpra-xwayland|--xpra2-xwayland)\n          case \"$Xcontainer\" in\n            yes)\n              grep -q socat <<< \"$Xcontainertools\" || {\n                $Message \"${1:-} --xoverip needs socat. Please update image x11docker/xserver.\"\n                Return=1\n              }\n            ;;\n            no)\n              command -v socat >/dev/null || {\n                $Message \"${1:-} --xoverip needs socat. socat is not installed.\n  $Wikipackagesimage\"\n                Return=1\n              }\n            ;;\n          esac\n          [ \"$Xserver\" = \"--hostdisplay\" ] && {\n            [ -n \"$(cut -d: -f1 <<< \"$Hostdisplay\")\" ] && {\n              [ \"$Xoverip\" = \"socat\" ] && {\n                $Message \"${1:-} --xoverip: host already runs with X over IP.\n  Setting up an additional socat connection is not supported.\"\n                Return=1\n              }\n            }\n          }\n        ;;\n        --weston|--kwin|--hostwayland)\n          $Message \"${1:-} does not support X over TCP (--xoverip).\"\n        ;;\n      esac\n    ;;\n    listentcp)\n      case \"${1:-}\" in\n        --xephyr|--xorg|--nxagent|--xpra|--xpra2|--xvfb|--xwin|--runx) ;;\n        *)\n          $Message \"${1:-} does not support --xoverip=listentcp.\"\n          Return=1\n        ;;\n      esac\n    ;;\n  esac\n\n  Return=\"${Return:-\"0\"}\"\n  debugnote \"Dependency check for ${1:-}: $Return\"\n\n  [ \"$Return\" = \"1\" ] && {\n    check_fallback\n    Autochooseserver=\"yes\"\n    [ \"$Printcheck\" = \"no\" ] && grep -q -w \"note\" <<< \"$Message\" && note \"check_xdepends(): ${1:-} is not possible,\n  see message(s) above. Will search for another X server option.\n  You can see intermediate X dependency check messages with option --printcheck.\n  You can disable the search with option --fallback=no.\"\n  }\n\n  Lastcheckedxserver=\"${1:-}\"\n  Lastcheckedxserverresult=\"$Return\"\n\n  return \"$Return\"\n}\ncheck_xpraoption() {            # check if xpra option $1 is available\n  local Option\n\n  [ \"$Xcontainer\" = \"yes\" ] && [ \"$Xserver\" != \"--xpra2\" ] && {\n    echo \"$@\"\n    return 0\n   }\n\n  Option=\"$(cut -d= -f1 <<< \"${1:-}\")\"\n  grep -q \"noprobe\" <<< \"${1:-}\" && {\n    grep \"OpenGL\" <<< \"$Xprahelp\" | grep -q \"probe\" && echo \"$@\" || {\n      debugnote \"Xpra option $Option not supported: $*\"\n      return 1\n    }\n    return 0\n  }\n  grep -q -- \"$Option\" <<< \"$Xprahelp\" && echo \"$@\" || {\n    debugnote \"Xpra option not found: $Option\"\n    return 1\n  }\n}\ncheck_xserver() {               # check chosen X server, auto-choose X server\n  local Xorgautochoice=\n\n  [ -n \"$Xserver\" ] && Autochooseserver=\"no\"\n  [ \"$Fullscreen\" = \"yes\" ] && Desktopmode=\"yes\" && Windowmanagermode=\"${Windowmanagermode:-auto}\"\n  ## default option '--auto': Try to automatically choose best matching and available X server\n  [ \"$Autochooseserver\" = \"yes\" ] && {                              Xserver=\"--nxagent\"\n    [ \"$Sharegpu\" = \"yes\" ]                                      && Xserver=\"--xpra2-xwayland\"\n    [ \"$Sharegpu\" = \"direct\" ]                                   && Xserver=\"--xpra2-xwayland\"\n    [ \"$Xfishtank\" = \"yes\" ]                                     && Xserver=\"--xephyr\"\n    [ \"$Desktopmode\" = \"yes\"  ]                                  && Xserver=\"--xephyr\"\n    [ \"$Xpraborder\" ]                                            && Xserver=\"--xpra2\"\n    [ \"$Xserver\" = \"--xephyr\" ] && { check_xdepends --xephyr     || Xserver=\"--nxagent\" ; }  ### FIXME: don't use check_xdepends() here\n    [ \"$Sharegpu\" = \"yes\" ]     && [ \"$Xserver\" = \"--xephyr\" ]   && Xserver=\"--weston-xwayland\"\n    [ \"$Sharegpu\" = \"direct\" ]  && [ \"$Xserver\" = \"--xephyr\" ]   && Xserver=\"--weston-xwayland\"\n    [ \"$Outputcount\" != \"1\" ]                                    && Xserver=\"--weston-xwayland\"\n    [ -n \"$Rotation\" ]                                           && Xserver=\"--weston-xwayland\"\n    [ \"$Runsonconsole\" = \"yes\" ]                                 && Xserver=\"--xorg\"\n    [ -n \"$Newxvt\" ]                                             && Xserver=\"--xorg\"\n    [ -z \"$Hostdisplay\" ]       && [ -n \"$Hostwaylandsocket\" ]   && Xserver=\"--xpra2\"\n    [ -z \"$Hostdisplay\" ]       && [ -n \"$Hostwaylandsocket\" ]   && [ \"$Desktopmode\" = \"yes\"  ]  && Xserver=\"--weston-xwayland\"\n    [ \"$Winsubsystem\" ]                                          && Xserver=\"--runx\"\n    [ \"$Winsubsystem\" = \"CYGWIN\" ]                               && Xserver=\"--xwin\"\n    [ \"$Setupwayland\" = \"yes\" ] && { [ -n \"$Hostwaylandsocket\" ] && [ \"$Desktopmode\" = \"no\" ] && Xserver=\"--hostwayland\" || Xserver=\"--weston\" ; }\n  }\n  [ \"$Printcheck\" = \"yes\" ] && note \"--printcheck: Starting checks with $Xserver\"\n\n  [ \"$Autochooseserver\" = \"no\" ] && [ \"$Xserver\" = \"--xorg\" ] && Newxvt=\"${Newxvt:-auto}\"\n\n  grep -q -i \"GNOME\" <<< \"$XDG_CURRENT_DESKTOP\" && {\n    Gnomeversion=\"$(gnome-shell --version)\"\n    [ \"$Gnomeversion\" ] && verlt \"$Gnomeversion\" \"GNOME Shell 3.38\" && {\n      case \"$Xserver\" in\n        --hostdisplay|--xorg) ;;\n        *)\n          warning \"You are running GNOME desktop in outdated version\n  $Gnomeversion\n  This might cause issues with host applications if using additional X servers.\n  It is recommended to use another desktop environment or GNOME >= 3.38.\n  Only --xorg or discouraged option --hostdisplay might work as expected.\"\n          [ \"$Autochooseserver\" = \"yes\" ] && case \"$Desktopmode\" in\n            \"yes\") Xserver=\"--xorg\" && Xorgautochoice=\"yes\" ;;\n            \"no\")  Xserver=\"--hostdisplay\" ;;\n          esac\n        ;;\n      esac\n    }\n  }\n\n  # some first --gpu checks\n  case \"$Sharegpu\" in\n    yes|direct)\n      [ \"$Nvidiaversion\" ] && case \"$Xserver\" in\n        --xpra-xwayland|--xpra2-xwayland|--weston-xwayland|--xwayland|--weston|--kwin|--kwin-xwayland|--hostwayland)\n          verlt \"$Nvidiaversion\" \"470\" && note \"Option $Xserver --gpu: Your system uses closed source NVIDIA\n  driver version $Nvidiaversion.\n  GPU support will work only with options --hostdisplay and --xorg.\n  Consider to use free open source driver nouveau instead.\n  Using NVIDIA driver>=v470.x  and Xwayland>=v21.1.2 might work for $Xserver --gpu.\"\n        ;;\n      esac\n    ;;\n  esac\n  case \"$Runtime\" in\n    kata-runtime|sysbox-runc)\n      case \"$Sharegpu\" in\n        yes)\n          case \"$Xcontainer\" in\n            yes) Sharegpu=\"virgl\" ;;\n            no)  Sharegpu=\"iglx\" ;;\n          esac\n          [ \"$Runtime\" = \"kata-runtime\" ] && Sharegpu=\"iglx\"\n        ;;\n        no) ;;\n        virgl|iglx) ;;\n        *) \n          note \"Option --gpu=$Sharegpu is not supported with --runtime=$Runtime.\n  You can try --gpu=iglx instead (--xorg only)\n  or you can try --gpu=virgl (Needs image x11docker/xserver).\n  Fallback: Disabling option --gpu.\"\n          check_fallback\n          Sharegpu=\"no\"\n        ;;\n      esac\n    ;;\n  esac\n\n  [ \"$Runsonconsole\" = \"no\" ] && [ \"$Runsoverssh\" = \"no\" ] && [ -z \"$Hostdisplay$Hostwaylandsocket\" ] && [ \"$Xserver\" != \"--tty\" ] && [ -z \"$Winsubsystem\" ] && {\n    warning \"Environment variables DISPLAY and WAYLAND_DISPLAY are empty,\n  but it looks like x11docker was started within X, not from console.\n  Please set DISPLAY and XAUTHORITY.\n  If you have started x11docker with su or sudo, su/sudo may be configured to\n  unset X environment variables. It may work if you run x11docker with\n    sudo -E x11docker [...]\n  If your system does not support 'sudo -E', you can try\n    sudo env DISPLAY=\\$DISPLAY XAUTHORITY=\\$XAUTHORITY x11docker [...]\n  Otherwise, you can use tools like gksu/gksudo/kdesu/kdesudo/lxsu/lxsudo.\"\n\n    [ -n \"${PKEXEC_UID:-}\" ] && note \"It seems you have started x11docker with pkexec.\n  Can not determine DISPLAY and XAUTHORITY, can not use your X server.\n  To allow other X server options, please provide environment variables with\n    pkexec env DISPLAY=\\$DISPLAY XAUTHORITY=\\$XAUTHORITY x11docker [ARGS].\"\n\n    [ \"$Autochooseserver\" = \"yes\" ] && Xserver=\"--xorg\" && Xorgautochoice=\"yes\"\n  }\n\n  [ \"$Runsoverssh\" = \"yes\" ] && [ -z \"$Hostdisplay$Hostwaylandsocket\" ] && [ \"$Xserver\" != \"--tty\" ] && {\n    note \"You are running x11docker over SSH without providing a display.\n  DISPLAY and WAYLAND_DISPLAY are empty. \n  You might need to run with 'ssh -X' or 'ssh -Y'.\n  If there is already an X or Wayland session running on the remote system\n  that you want to use,  please set either DISPLAY and XAUTHORITY \n  or WAYLAND_DISPLAY and XDG_RUNTIME_DIR accordingly.\"\n  }\n\n  # --wayland\n  case \"$Xserver\" in\n    --weston|--kwin|--hostwayland) Setupwayland=\"yes\" ;;\n  esac\n  [ \"$Setupwayland\" = \"yes\" ]          && { check_xdepends \"$Xserver\"        || Xserver=\"--hostwayland\" ; }\n  [ \"$Xserver\" = \"--kwin\" ]            && { check_xdepends --kwin            || Xserver=\"--weston\" ; }\n  [ \"$Xserver\" = \"--hostwayland\" ]     && { check_xdepends --hostwayland     || Xserver=\"--weston\"  ; }\n  [ \"$Xserver\" = \"--weston\" ]          && { check_xdepends --weston          || Xserver=\"--kwin\" ; }\n  [ \"$Setupwayland\" = \"yes\" ]          && { Autochooseserver=\"no\" check_xdepends $Xserver || error \"Failed to set up a Wayland environment.\n  Please install 'weston' or 'kwin_wayland'.\" ; }\n\n  ## check if dependencies for chosen X server are installed, fall back to best alternatives if not\n  [ \"$Xserver\" = \"--xwin\" ]            && { check_xdepends --xwin            || Xserver=\"--runx\" ; }\n  [ \"$Xserver\" = \"--runx\" ]            && { check_xdepends --runx            || Xserver=\"--hostdisplay\" ; }\n  [ \"$Xserver\" = \"--hostdisplay\" ]     && { check_xdepends --hostdisplay     || { [ \"$Sharegpu\" = \"yes\" ]    && Xserver=\"--xpra2-xwayland\" || Xserver=\"--xpra2\" ; } ; }\n  [ \"$Xserver\" = \"--hostdisplay\" ]     && { check_xdepends --hostdisplay     || { [ \"$Sharegpu\" = \"direct\" ] && Xserver=\"--xpra2-xwayland\" || Xserver=\"--xpra2\" ; } ; }\n  [ \"$Xserver\" = \"--xephyr\" ]          && { check_xdepends --xephyr          || Xserver=\"--nxagent\" ; }\n  [ \"$Xserver\" = \"--nxagent\" ]         && { check_xdepends --nxagent         || { [ \"$Desktopmode\" = \"yes\" ] && Xserver=\"--xephyr\"         || Xserver=\"--xpra2\" ; } ; }\n  [ \"$Xserver\" = \"--xpra2\" ]           && { check_xdepends --xpra2           || Xserver=\"--xpra\" ; }\n  [ \"$Xserver\" = \"--xpra\" ]            && { check_xdepends --xpra            || { check_xdepends --nxagent   && Xserver=\"--nxagent\"        || Xserver=\"--xephyr\" ; } ; }\n  [ \"$Xserver\" = \"--xorg\" ]            && { check_xdepends --xorg            || Xserver=\"--weston-xwayland\" ; }\n  [ \"$Xserver\" = \"--xpra2-xwayland\" ]  && { check_xdepends --xpra2-xwayland  || Xserver=\"--xpra-xwayland\" ; }\n  [ \"$Xserver\" = \"--xpra-xwayland\" ]   && { check_xdepends --xpra-xwayland   || Xserver=\"--weston-xwayland\" ; }\n  [ \"$Xserver\" = \"--xwayland\" ]        && { check_xdepends --xwayland        || Xserver=\"--weston-xwayland\" ; }\n  #[ \"$Xserver\" = \"--xpra-xwayland\" ]   && { check_xdepends --xpra-xwayland   || { [ \"$Desktopmode\" = \"yes\" ] && Xserver=\"--kwin-xwayland\" || Xserver=\"--hostdisplay\" ; } ; }\n  [ \"$Xserver\" = \"--kwin-xwayland\" ]   && { check_xdepends --kwin-xwayland   || Xserver=\"--weston-xwayland\" ; }\n  #[ \"$Xserver\" = \"--weston-xwayland\" ] && { check_xdepends --weston-xwayland || Xserver=\"--kwin-xwayland\" ; }\n\n   # Xephyr as fallback for all options. Last fallback: Xorg\n  check_xdepends $Xserver || Xserver=\"--xephyr\"\n  [ \"$Xserver\" = \"--xephyr\" ] && {          check_xdepends --xephyr || {\n                                              #check_xdepends --kwin-xwayland   && Xserver=\"--kwin-xwayland\"\n                                              check_xdepends --hostdisplay     && [ \"$Desktopmode\" = \"no\" ] && Xserver=\"--hostdisplay\"\n                                              check_xdepends --runx            && Xserver=\"--runx\"\n                                              check_xdepends --xwin            && Xserver=\"--xwin\"\n                                              check_xdepends --nxagent         && Xserver=\"--nxagent\"\n                                              check_xdepends --weston-xwayland && Xserver=\"--weston-xwayland\"\n                                              check_xdepends --xpra            && Xserver=\"--xpra\"\n                                              check_xdepends --xpra2           && Xserver=\"--xpra2\"\n                                            }\n    case \"$Sharegpu\" in\n      yes|direct)\n        case \"$Desktopmode\" in\n          yes)                                  check_xdepends --weston-xwayland && Xserver=\"--weston-xwayland\" ;;\n          no)                                   check_xdepends --hostdisplay     && Xserver=\"--hostdisplay\" ;;\n        esac\n      ;;\n    esac\n    [ \"$Runsonconsole\" = \"yes\" ] && {\n                                            #check_xdepends --kwin-xwayland   && Xserver=\"--kwin-xwayland\"\n                                            check_xdepends --weston-xwayland && Xserver=\"--weston-xwayland\"\n                                            check_xdepends --xorg            && Xserver=\"--xorg\"\n    }\n    check_xdepends $Xserver || { Xserver=\"--xorg\" && [ \"$Autochooseserver\" = \"yes\" ] && Xorgautochoice=\"yes\" ; }\n  }\n\n  Autochooseserver=\"no\" check_xdepends $Xserver || {\n    case \"$Winsubsystem\" in\n      \"\")\n        error \"Did not find a possibility to provide a display.\n  Recommendations:\n    Either pull image x11docker/xserver that provides\n    almost everything that x11docker could use,\n    or install 'xinit' and one or all of:\n      Xephyr xpra nxagent\n    To run with GPU acceleration, install:\n      weston and Xwayland, optionally also: xpra and xdotool\n    To run from TTY or within Wayland, install:\n      Xorg, or weston and Xwayland\n  $Wikipackagesimage\n\n  It might help you to see dependency check messages with option --printcheck.\"\n      ;;\n      CYGWIN)\n        error \"Did not find a possibility to provide a display.\n  Please install packages 'xinit' and 'xauth' in Cygwin,\n  or run x11docker with --runx:  https://github.com/mviereck/runx\"\n      ;;\n      MSYS2|WSL1|WSL2)\n        [ \"$Hostdisplay\" ] && {\n          error \"Did not find a possibility to provide a nested display.\n  Please install package 'xinit' and one or all of:  nxagent Xephyr xpra\n  $Wikipackages\"\n        } || {\n        error \"Did not find a possibility to provide a display.\n  Please use --runx to provide an X server on MS Windows:\n    https://github.com/mviereck/runx\"\n        }\n      ;;\n    esac\n  }\n\n  [ \"$Xorgautochoice\" = \"yes\" ] && [ \"$Runsonconsole\" = \"no\" ] && [ -z \"$Newxvt\" ] && error \"Option --xorg was chosen automatically\n  as the best one fitting your specified options and installed dependencies.\n  However, x11docker does not run another Xorg without being specified.\n  Please run with option --xorg.\n  It might help you to see dependency check messages with option --printcheck.\"\n\n  case \"$Xserver\" in\n    --hostwayland)\n      [ \"$Xcontainer\" = \"yes\" ] && {\n        Xcontainer=\"no\"\n        note \"Option --xc disabled for option --hostwayland.\"\n      }\n    ;;\n  esac\n\n  [ \"$Autochooseserver\" = \"yes\" ] && note \"Using X server option $Xserver\"\n  storeinfo \"xserver=$Xserver\"\n\n  return 0\n}\ncreate_modelinefile() {         # generate a set of smaller modelines for screen size $1 and store them in a cache file\n  local Newmodelinefile Modeline Size X Y Xcount Ycount\n\n  Size=\"${1:-}\"\n  X=\"$(echo \"$Size\" | cut -dx -f1)\"\n  Y=\"$(echo \"$Size\" | cut -dx -f2)\"\n  Newmodelinefile=\"$Modelinefilebasepath/$Size\"\n\n  [ -e \"$Newmodelinefile\" ] || {\n    debugnote \"$Xserver: Generating modelines for $Size\"\n    mkfile \"$Newmodelinefile\"\n    for Ycount in 25 30 40 45 50 55 60 65 70 75 80 85 90 95 100; do\n      for Xcount in 25 30 40 45 50 55 60 65 70 75 80 85 90 95 100; do\n        Modeline=\"$(cvt \"$(awk -v a=\"$X\" -v b=\"$Xcount\" 'BEGIN {print (a * b / 100)}')\" \"$(awk -v a=\"$Y\" -v b=\"$Ycount\" 'BEGIN {print (a * b / 100)}' )\" | tail -n1)\"\n        Modeline=\"${Modeline//\"_60.00\"/\"\"}\"\n        echo \"$Modeline\" >> \"$Newmodelinefile\"\n      done\n    done\n  }\n\n  echo \"$Newmodelinefile\"\n}\ncreate_xcommand() {             ### create command to start X server and/or Wayland compositor\n  local Xserveroptions_custom= Xpraoptions= Nxagentoptions= Compositorpid= Weston= Westonoutput= Count= Usemitshm Xkbmodel Xdpyinfooutput\n  local Connector Connectorlist Status\n\n  Xserveroptions_custom=\"$Xserveroptions\"\n  Xserveroptions=\"\"\n\n  Xdpyinfooutput=\"$(xtool \"xdpyinfo 2>> $Xinitlogfile\" ||:)\"\n\n  [ \"$Xcontainer\" = \"yes\" ] && [ \"$Xcontainerbackend\" = \"$Backend\" ] && Usemitshm=\"yes\"\n  [ \"$Xcontainer\" = \"yes\" ] && [ \"$Xcontainerbackend\" = \"nerdctl\" ]  && Usemitshm=\"no\"\n  [ \"$Shareipc\" = \"host\" ]                                           && Usemitshm=\"yes\"\n  [ \"$Xcontainer\" = \"yes\" ] && [ -n \"$Newxvt\" ]                      && Usemitshm=\"no\"\n  [ \"$Xcontainer\" = \"no\" ]  && [ \"$Shareipc\" != \"host\" ]             && Usemitshm=\"no\"\n  [ \"$Containeruser\" != \"$Hostuser\" ]                                && Usemitshm=\"no\"\n  [ \"$Xoverip\" != \"no\" ]                                             && Usemitshm=\"no\"\n  case \"$Runtime\" in\n    kata-runtime|sysbox-runc)                                           Usemitshm=\"no\" ;;\n  esac\n  Usemitshm=\"${Usemitshm:-\"no\"}\"\n\n  #### General X server options\n  case \"$Xserver\" in\n    --nxagent)\n      case \"$Usemitshm\" in\n        yes) Xserveroptions=\"$Xserveroptions \\\\\n  -shmem \\\\\n  -shpix\" ;;\n        no) Xserveroptions=\"$Xserveroptions \\\\\n  -noshmem \\\\\n  -noshpix\" ;;\n      esac\n    ;;\n    *)\n      Xserveroptions=\" \\\\\n  -retro \\\\\n  +extension RANDR \\\\\n  +extension RENDER \\\\\n  +extension GLX \\\\\n  +extension XVideo \\\\\n  +extension DOUBLE-BUFFER \\\\\n  +extension SECURITY \\\\\n  +extension DAMAGE \\\\\n  +extension X-Resource \\\\\n  -extension XINERAMA -xinerama\"\n      case \"$Usemitshm\" in\n        yes)\n          Xserveroptions=\"$Xserveroptions \\\\\n  +extension MIT-SHM\" ;;\n        no)\n          Xserveroptions=\"$Xserveroptions \\\\\n  -extension MIT-SHM\"\n          Xprashm=\"XPRA_XSHM=0\"\n        ;;\n      esac\n    ;;\n  esac\n\n  # X extension COMPOSITE\n  [ \"$Xcomposite\" ] || case \"$Xserver\" in\n    --nxagent|--xwin) Xcomposite=\"no\" ;;\n    *) Xcomposite=\"yes\" ;;\n  esac\n  case \"$Xcomposite\" in\n    yes)\n      # Old X servers have extension \"Composite\", recent ones call it \"COMPOSITE\".\n      Xserveroptions=\"$Xserveroptions \\\\\n  +extension Composite +extension COMPOSITE\"\n    ;;\n    no)\n      Xserveroptions=\"$Xserveroptions \\\\\n  -extension Composite -extension COMPOSITE\"\n      [ \"$Xserver\" = \"nxagent\" ] && Xserveroptions=\"Xserveroptions \\\\\n  -nocomposite\"\n    ;;\n  esac\n\n  # X extension XTEST\n  Xtest=\"${Xtest:-no}\"\n  case \"$Xtest\" in\n    yes) Xserveroptions=\"$Xserveroptions \\\\\n  +extension XTEST\" ;;\n    no)  Xserveroptions=\"$Xserveroptions \\\\\n  -extension XTEST -tst\" ;;\n  esac\n\n  # Disable screensaver\n  Xserveroptions=\"$Xserveroptions \\\\\n  -dpms \\\\\n  -s off\"\n\n  # X cookie authentication\n  case \"$Xauthentication\" in\n    yes|trusted|untrusted)\n      Xserveroptions=\"$Xserveroptions \\\\\n  -auth $Xservercookie\" ;;\n    no)\n  Xserveroptions=\"$Xserveroptions \\\\\n  -ac\"\n      case \"$Xoverip\" in\n        socat|listentcp) warning \"Option --xauth=no --xoverip=$Xoverip: SECURITY RISK!\n  Allowing access to new X server for everyone.\n  Your X server is accessible over TCP network without any restriction.\n  That can be abused to take control over your system.\" ;;\n        no)\n          case \"$Xserver\" in\n            --hostdisplay|--hostwayland|--weston|--kwin|--tty) ;;\n            *) warning \"Option --xauth=no: SECURITY RISK!\n  Allowing access to new X server for everyone.\" ;;\n          esac\n        ;;\n      esac\n    ;;\n  esac\n\n  # X over IP/TCP\n  case \"$Xoverip\" in\n    listentcp)\n      case \"$Xserver\" in\n        --nxagent) ;;\n        *) Xserveroptions=\"$Xserveroptions \\\\\n  -listen tcp\" ;;\n      esac\n    ;;\n    no|socat) Xserveroptions=\"$Xserveroptions \\\\\n  -nolisten tcp\" ;;\n  esac\n\n  # check DPI\n  case \"$Xserver\" in\n    --weston|--kwin|--tty|--hostdisplay) ;;\n    --xwin|--runx) ;;\n    *)\n      [ -z \"$Dpi\" ] && [ -n \"$Xdpyinfooutput\" ] && Dpi=\"$(grep dots <<< \"$Xdpyinfooutput\" | cut -dx -f2 | cut -d' ' -f1)\"\n      [ -n \"$Dpi\" ] && {\n        case \"$Xserver\" in\n          --xpra*)\n            [ \"$Scaling\" ] && [ \"$Desktopmode\" = \"no\" ] && {\n              Dpi=\"$(awk -v a=\"$Scaling\" -v b=\"$Dpi\" 'BEGIN {print (b * a * a)}')\"\n              Dpi=\"${Dpi%.*}\"\n            } ;;\n        esac\n      }\n    ;;\n  esac\n  [ -n \"$Dpi\" ] && Xserveroptions=\"$Xserveroptions \\\\\n  -dpi $Dpi\"\n\n  # --keymap\n  # Regard possible custom keyboard model like rmlvo.\n  # Unofficial feature, see ticket #208. Currently regarded with --nxagent only.\n  Xkbmodel=\"$(cut -d/ -f1 -s <<< \"$Xkblayout\")\"\n  [ -n \"$Xkbmodel\" ] && Xkblayout=\"$(cut -d/ -f2- <<< \"$Xkblayout\")\"\n  Xkbmodel=\"${Xkbmodel:-evdev}\"\n\n  #### xpra server and client command\n  case \"$Xserver\" in\n    --xpra*)\n      [ \"$Xprahelp\" ] || Xprahelp=\"$(xpra --help 2>/dev/null)\"\n\n#  $(check_xpraoption --csc-modules=none) \\\\\n#  $(check_xpraoption --encodings=rgb) \\\\\n      Xpraoptions=\"\\\\\n  $(check_xpraoption --microphone=no ||:) \\\\\n  $(check_xpraoption --mmap=$Sharefolder/xpra.mmap ||:) \\\\\n  $(check_xpraoption --notifications=no ||:) \\\\\n  $(check_xpraoption --pulseaudio=no ||:) \\\\\n  $(check_xpraoption --socket-dirs=\"$Sharefolder\" ||:) \\\\\n  $(check_xpraoption --speaker=no ||:) \\\\\n  $(check_xpraoption --start-via-proxy=no ||:) \\\\\n  $(check_xpraoption --system-tray=yes ||:) \\\\\n  $(check_xpraoption --webcam=no ||:) \\\\\n  $(check_xpraoption --xsettings=no ||:)\"\n#  $(check_xpraoption --clipboard-direction=both ||:) \\\\\n\n      # --keymap\n      [ \"$Xkblayout\" ] && Xpraoptions=\"$Xpraoptions \\\\\n  $(check_xpraoption --keyboard-layout=\"'$Xkblayout'\" ||:) \\\\\n  $(check_xpraoption --keyboard-raw=yes ||:)\"\n\n#      Xpraoptions=\"$Xpraoptions  $(check_xpraoption --debug=all ||:)\" ; Preservecachefiles=\"yes\"  # Debugging only\n\n      # xpra server command\n      [ \"$Desktopmode\" = \"yes\" ] && Xpraservercommand=\"xpra start-desktop\" || Xpraservercommand=\"xpra start\"\n#      Xpraservercommand=\"$Xpraservercommand :$Newdisplaynumber --use-display $Xpraoptions \\\\\n      Xpraservercommand=\"$Xpraservercommand :$Newdisplaynumber --use-display $Xpraoptions \\\\\n  $(check_xpraoption --clipboard=no ||:)\\\\\n  $(check_xpraoption --dbus-launch=no ||:) \\\\\n  $(check_xpraoption --dbus-proxy=no ||:) \\\\\n  $(check_xpraoption --daemon=no ||:) \\\\\n  $(check_xpraoption --fake-xinerama=no ||:) \\\\\n  $(check_xpraoption --file-transfer=off ||:) \\\\\n  $(check_xpraoption --html=off ||:) \\\\\n  $(check_xpraoption --opengl=noprobe ||:) \\\\\n  $(check_xpraoption --mdns=no ||:) \\\\\n  $(check_xpraoption --printing=no ||:) \\\\\n  $(check_xpraoption --session-name=\"$Codename\" ||:) \\\\\n  $(check_xpraoption --start-new-commands=no ||:) \\\\\n  $(check_xpraoption --systemd-run=no ||:)\"\n#  $(check_xpraoption --video-encoders=none ||:)\"\n      [ -n \"$Dpi\" ] && Xpraservercommand=\"$Xpraservercommand \\\\\n  $(check_xpraoption --dpi=\"$Dpi\" ||:)\"\n      case \"$Xserver\" in\n        --xpra2*)  Xpraservercommand=\"$Xpraservercommand \\\\\n  --bind=$Sharefolder/$(hostname)-$Newdisplaynumber\" ;;\n      esac\n\n      # xpra client command\n#  $(check_xpraoption --compress=0 ||:) \\\\\n#  $(check_xpraoption --quality=100 ||:) \\\\\n#  $(check_xpraoption --video-decoders=none ||:)\"\n#  $(check_xpraoption --clipboard=$Shareclipboard ||:) \\\\\n      Xpraclientcommand=\"xpra attach :$Newdisplaynumber $Xpraoptions \\\\\n  $(check_xpraoption --modal-windows=no ||:) \\\\\n  $(check_xpraoption --opengl=noprobe ||:) \\\\\n  $(check_xpraoption --reconnect=no ||:) \\\\\n  $(check_xpraoption --tray=no ||:)\"\n      [ \"$Fullscreen\" = \"yes\" ]  && Xpraclientcommand=\"$Xpraclientcommand \\\\\n  $(check_xpraoption --desktop-fullscreen=yes ||:)\"\n      [ \"$Scaling\" ] && Xpraclientcommand=\"$Xpraclientcommand \\\\\n  $(check_xpraoption --desktop-scaling=\"$Scaling\" ||:)\"\n#      [ -n \"$Dpi\" ] && Xpraclientcommand=\"$Xpraclientcommand \\\\\n#  $(check_xpraoption --dpi=\"'$Dpi'\")\"\n      [ \"$Xpraborder\" ] && Xpraclientcommand=\"$Xpraclientcommand \\\\\n  $(check_xpraoption --border=\"$Xpraborder\" ||:)\"\n#        case \"$Desktopmode\" in ### FIXME\n#          yes) Xpraclientcommand=\"$Xpraclientcommand \\\\\n#  $(check_xpraoption --title=\"'$Codename on $Newdisplay [in container] (shift+F11 toggles fullscreen)'\" ||:)\" ;;\n#          no)  Xpraclientcommand=\"$Xpraclientcommand \\\\\n#  $(check_xpraoption --title=\"'@title@ [in container]'\" ||:)\" ;;\n#        esac\n\n      # xpra environment variables\n      for Line in $Xpracontainerenv; do\n        store_runoption env \"$Line\"\n      done\n    ;;\n  esac\n\n\n  #### Prepare weston.ini: config file for Weston\n  case \"$Xserver\" in\n    --weston|--weston-xwayland|--xpra-xwayland|--xpra2-xwayland)\n      command -v weston-launch >/dev/null && [ -n \"$Newxvt\" ] && [ \"$Runsinteractive\" = \"yes\" ] && Weston=\"weston-launch -v --\" || Weston=\"weston\"\n      echo \"[core]\nshell=desktop-shell.so\nidle-time=0\n[shell]\npanel-location=none\npanel-position=none\nlocking=false\nbackground-color=0xff002244\nanimation=fade\nstartup-animation=fade\n[keyboard]\" >> \"$Westonini\"\n      # --keymap: keyboard layout\n      [ -n \"$Xkblayout\" ] && echo \"keymap_layout=$Xkblayout\" >> \"$Westonini\"\n      [ -z \"$Xkblayout\" ] && [ -n \"$Newxvt\" ] && echo \"$(echo -n \"keymap_layout=\" && grep XKBLAYOUT <\"/etc/default/keyboard\" | cut -d= -f2 | cut -d'\"' -f2)\" >> \"$Westonini\"\n\n      case \"$Newxvt\" in\n        \"\")   # Display prefix X or WL; needed to indicate if host Wayland or host X provides the nested window.\n          #[ -n \"$Hostwaylandsocket\" ] && [ \"$Xserver\" != \"--xpra-xwayland\" ] && [ \"$Hostsystem\" != \"ubuntu\" ] && [ \"$Fullscreen\" = \"no\" ] && Westonoutput=\"WL\"\n          [ -n \"$Hostdisplay\" ] && Westonoutput=\"X\"\n          [ -z \"$Westonoutput\" ] && [ -n \"$Hostwaylandsocket\" ] && Westonoutput=\"WL\"\n        ;;\n        *)  # get monitor name(s)\n          for Status in /sys/class/drm/*/status; do \n            Connector=\"${Status%/status}\"\n            Connector=\"${Connector#*/card?-}\"\n            [ \"$(cat $Status)\" = \"connected\" ] && Connectorlist=\"$Connectorlist $Connector\"\n          done\n        ;;\n      esac\n    ;;\n  esac\n\n\n  #### create command to run X server\n  case \"$Xserver\" in\n    --xorg)\n      Xserveroptions=\"$Xserveroptions \\\\\n  -verbose\"\n      [ \"$Xorgconf\" ] && Xserveroptions=\"$Xserveroptions \\\\\n  -config '$Xorgconf'\"       # --xorgconf\n      Xcommand=\"$(get_xpath Xorg) :$Newdisplaynumber vt$Newxvt $Xserveroptions\"\n    ;;\n    --xpra|--xpra2)\n      Xcommand=\"$(get_xpath Xvfb) :$Newdisplaynumber $Xserveroptions \\\\\n  -screen 0 ${Xaxis}x${Yaxis}x24\"\n    ;;\n\n    --xvfb)\n      Xcommand=\"$(get_xpath Xvfb) :$Newdisplaynumber $Xserveroptions \\\\\n  -screen 0 ${Screensize}x24\"   ### FIXME: hardcoded setting of depth 24. Could be better?\n    ;;\n\n    --xephyr)\n      Xserveroptions=\"$Xserveroptions \\\\\n  -resizeable \\\\\n  -noxv\"\n#      Xserveroptions=\"$Xserveroptions \\\\\n#  -glamor\"  # disabled because of lagginess reported in #196\n      case \"$Fullscreen\" in\n        yes)\n          Xserveroptions=\"$Xserveroptions \\\\\n  -fullscreen\"\n        ;;\n        no)\n          grep -q -- \"-output \" <<< \"$Xserveroptions_custom\" || Xserveroptions=\"$Xserveroptions \\\\\n  -screen $Screensize\"\n        ;;\n      esac\n      Xcommand=\"$(get_xpath Xephyr) :$Newdisplaynumber $Xserveroptions\"\n   ;;\n\n    --xwayland)\n      Xcommand=\"$(get_xpath Xwayland) :$Newdisplaynumber -ac $Xserveroptions\"\n    ;;\n\n    --xpra-xwayland|--xpra2-xwayland)\n      Xcommand=\"$(get_xpath Xwayland) :$Newdisplaynumber -ac $Xserveroptions\"\n\n      echo \"[output]\nname=${Westonoutput}1\nmode=$Screensize\" >> \"$Westonini\"\n      [ -n \"$Customwestonini\" ] && Westonini=\"$Customwestonini\"\n\n      Compositorcommand=\"$Weston \\\\\n  --socket=$Newwaylandsocket \\\\\n  --backend=x11-backend.so \\\\\n  --config='$Westonini'\"\n      case \"$Xserver\" in\n        --xpra-xwayland|--xpra2-xwayland)\n          case \"$Scaling\" in\n            \"\") Compositorcommand=\"$Compositorcommand \\\\\n  --fullscreen\" ;;\n            *)  Compositorcommand=\"$Compositorcommand \\\\\n  --width=$(cut -dx -f1 <<< \"$Screensize\") --height=$(cut -dx -f2 <<< \"$Screensize\")\" ;;\n          esac\n        ;;\n      esac\n    ;;\n    --weston|--weston-xwayland)\n      Xcommand=\"$(get_xpath Xwayland) :$Newdisplaynumber -ac $Xserveroptions\"\n\n      [ -n \"${Westonoutput:-$Connectorlist}\" ] && for ((Count=1 ; Count<=\"$Outputcount\" ; Count++)) ; do\n        [ \"$Westonoutput\" = \"WL\" ] || [ \"$Westonoutput\" = \"X\" ] || {\n          Count=\"\"\n          [ -z \"$Screensize\" ] && Screensize=\"preferred\"\n        }\n        for Connector in ${Westonoutput:-$Connectorlist}; do\n          echo \"[output]\nname=$Connector$Count\nmode=$Screensize\" >> \"$Westonini\"\n          [ \"$Scaling\" ]        && echo \"scale=$Scaling\"      >> \"$Westonini\"\n          [ -n \"$Rotation\" ]    && echo \"transform=$Rotation\" >> \"$Westonini\"\n        done\n        [ \"$Count\" ] || break\n      done\n\n      Compositorcommand=\"$Weston \\\\\n  --socket=$Newwaylandsocket\"\n      [ \"$Fullscreen\" = \"yes\" ] && Compositorcommand=\"$Compositorcommand \\\\\n  --fullscreen\"\n      [ \"$Outputcount\" = \"1\" ]  || Compositorcommand=\"$Compositorcommand \\\\\n  --output-count=$Outputcount\"\n      case \"$Westonoutput\" in\n        WL) Compositorcommand=\"$Compositorcommand \\\\\n  --backend=wayland-backend.so\" ;;\n        X)  Compositorcommand=\"$Compositorcommand \\\\\n  --backend=x11-backend.so\" ;;\n        *)\n          case \"$Newxvt\" in\n            \"\")  Compositorcommand=\"$Compositorcommand \\\\\n  --backend=x11-backend.so\" ;;\n            *) Compositorcommand=\"$Compositorcommand \\\\\n  --backend=drm-backend.so\" ;;\n          esac\n        ;;\n      esac\n      [ -n \"$Customwestonini\" ] && Westonini=\"$Customwestonini\"\n      Compositorcommand=\"$Compositorcommand \\\\\n  --config='$Westonini'\"\n    ;;\n\n    --kwin|--kwin-xwayland)\n      Xcommand=\"$(get_xpath Xwayland) :$Newdisplaynumber -ac $Xserveroptions\"\n\n      Compositorcommand=\"kwin_wayland \\\\\n  --xwayland \\\\\n  --socket=$Newwaylandsocket \\\\\n  --width=$Xaxis --height=$Yaxis\"\n      [ \"$Outputcount\" = \"1\" ] || Compositorcommand=\"$Compositorcommand \\\\\n  --output-count=$Outputcount\"\n      [ \"$Xkblayout\" ] && Compositorcommand=\"KWIN_XKB_DEFAULT_KEYMAP=$Xkblayout $Compositorcommand\"\n      Compositorcommand=\"env QT_XKB_CONFIG_ROOT=/usr/share/X11/xkb $Compositorcommand\"\n      [ -n \"$Newxvt\" ] && Compositorcommand=\"$Compositorcommand \\\\\n  --drm\"\n    ;;\n\n    --nxagent)\n      # files needed by nxagent\n      export NX_CLIENT=\"$Nxagentclientrc\"\n      Xserveroptions=\"$Xserveroptions \\\\\n  -norootlessexit \\\\\n  -ac \\\\\n  -options $Nxagentoptionsfile \\\\\n  -keystrokefile $Nxagentkeysfile\"\n      case \"$Desktopmode\" in\n        \"yes\") Xserveroptions=\"$Xserveroptions \\\\\n  -D \\\\\n  -name '${Imagename}_on_${Newdisplay}_(shift+F11_toggles_fullscreen)'\" ;;\n        \"no\")  Xserveroptions=\"$Xserveroptions \\\\\n  -R\" ;;\n      esac\n      Xcommand=\"$(get_xpath nxagent) :$Newdisplaynumber $Xserveroptions\"\n\n      # Some additional nxagent options are stored in a file\n      Nxagentoptions=\"nx/nx\"\n      Nxagentoptions=\"$Nxagentoptions,clipboard=none\"\n      case \"$Fullscreen\" in\n        yes) Nxagentoptions=\"$Nxagentoptions,fullscreen=1\" ;;\n        no)  [ -n \"$Screensize\" ] && Nxagentoptions=\"$Nxagentoptions,geometry=$Screensize\" ;;\n      esac\n\n      # --composite\n      case \"$Xcomposite\" in\n        yes) Nxagentoptions=\"$Nxagentoptions,composite=1\" ;;\n        no)  Nxagentoptions=\"$Nxagentoptions,composite=0\" ;;\n      esac\n\n      # --keymap: set keyboard layout\n      case \"$Xkblayout\" in\n        \"\"|clone) Nxagentoptions=\"$Nxagentoptions,keyboard=clone\" ;;\n        *)        Nxagentoptions=\"$Nxagentoptions,keyboard=${Xkbmodel}/${Xkblayout}\" ;;\n      esac\n\n      Nxagentoptions=\"${Nxagentoptions}:${Newdisplaynumber}\"\n      echo \"$Nxagentoptions\" >> \"$Nxagentoptionsfile\"\n      debugnote \"$Xserver: Additional nxagent options: $Nxagentoptions\"\n\n      # Workaround as nxagent ignores XAUTHORITY and fails to start if option -auth is given without containing the cookie from host display.\n      # Option -ac above complies \"xhost +\" and is reverted in xinitrc.\n      [ \"$Xauthentication\" != \"no\" ] && unpriv \"cp '$Hostxauthority' '$Xservercookie'\"\n\n      # fake NXclient\n      echo '#! /usr/bin/env bash\n# helper script to terminate nxagent.\n# nxagent runs program noted in NX_CLIENT if window close button is pressed.\n# (real nxclient does not exist)\necho \"NXclient: $*\" >> '\"$Xinitlogfile\"'\nparsed=\"$(getopt --options=\"\" --longoptions=\"parent:,display:,dialog:,caption:,window:,message:\" -- \"$@\")\"\neval set -- $parsed\necho \"$parsed\" >> '$Xinitlogfile'\nwhile [ -n \"${1:-}\" ] ; do\n  case \"${1:-}\" in\n    --dialog) dialog=\"${2:-}\" && shift ;;\n    --display|--caption|--message) shift ;;\n    --window) shift ;;\n    --parent) pid=\"${2:-}\" && shift ;;\n    --) ;;\n  esac\n  shift\ndone\ncase $dialog in\n  pulldown) ;;\n  yesnosuspend)\n    kill $pid\n    echo timetosaygoodbye >> '\"$Timetosaygoodbyefile\"'\n  ;;\nesac\n' >> \"$Nxagentclientrc\"\n      unpriv \"chmod +x '$Nxagentclientrc'\"\n\n      echo '<!DOCTYPE NXKeystroke>\n    <keystrokes>\n    <keystroke action=\"fullscreen\" AltMeta=\"0\" Control=\"0\" Shift=\"1\" key=\"F11\" />\n    <keystroke action=\"fullscreen\" AltMeta=\"1\" Control=\"1\" Shift=\"1\" key=\"f\" />\n</keystrokes>' >> \"$Nxagentkeysfile\"\n    ;;\n\n    --xwin)\n      case \"$Sharegpu\" in\n        no)\n          Xserveroptions=\"$Xserveroptions \\\\\n  -nowgl\" ;;\n        *)\n          Xserveroptions=\"$Xserveroptions \\\\\n  -wgl\" ;;\n      esac\n\n      case \"$Fullscreen\" in\n        yes)\n          Xserveroptions=\"$Xserveroptions \\\\\n  -fullscreen\" ;;\n        no)\n          Xserveroptions=\"$Xserveroptions \\\\\n  -lesspointer\"\n          case \"$Desktopmode\" in\n            yes)\n              for ((Count=0 ; Count<$Outputcount ; Count++)); do\n                Xserveroptions=\"$Xserveroptions \\\\\n  -screen $Count $Screensize\"\n              done\n            ;;\n            no) Xserveroptions=\"$Xserveroptions \\\\\n  -multiwindow\" ;;\n          esac\n        ;;\n      esac\n\n      case \"$Shareclipboard\" in\n        yes) Xserveroptions=\"$Xserveroptions \\\\\n  -clipboard\" ;;\n        no)  Xserveroptions=\"$Xserveroptions \\\\\n  -noclipboard\" ;;\n      esac\n\n      Xcommand=\"$(command -v XWin) :$Newdisplaynumber $Xserveroptions\"\n    ;;\n\n    --runx)\n      Xserveroptions=\"--display $Newdisplaynumber \\\n  --verbose\"\n      [ \"$Xauthentication\" = \"no\" ] && Xserveroptions=\"$Xserveroptions \\\n  --no-auth\"\n      [ \"$Desktopmode\" = \"yes\" ]    && Xserveroptions=\"$Xserveroptions \\\n  --desktop\"\n      [ \"$Shareclipboard\" = \"yes\" ] && Xserveroptions=\"$Xserveroptions \\\n  --clipboard\"\n      [ \"$Screensize\" ]             && Xserveroptions=\"$Xserveroptions \\\n  --size=$Screensize\"\n      [ \"$Sharegpu\" = \"iglx\" ]      && {\n        Xserveroptions=\"$Xserveroptions \\\n  --gpu\"\n      }\n      Xcommand=\"$(command -v runx) $Xserveroptions\"\n    ;;\n\n    --hostwayland|--hostdisplay|--tty) ;;\n  esac\n\n  case \"$Xserver\" in\n    --tty|--hostdisplay|--runx) ;;\n    --weston|--kwin|--hostwayland) ;;\n    --nxagent) ;;\n    *)\n      case \"$Sharegpu\" in\n        iglx) Xcommand=\"$Xcommand \\\\\n  +iglx\" ;;\n        *)\n          Xcommand=\"$Xcommand \\\\\n  -iglx\" ;;\n      esac\n    ;;\n  esac\n\n  # --xopt\n  Xcommand=\"$Xcommand \\\\\n  $Xserveroptions_custom\"\n\n  case \"$Xserver\" in\n    --weston|--kwin|--hostwayland|--hostdisplay|--tty) Xcommand=\"\" ;;\n  esac\n  case \"$Xserver\" in\n    --weston|--kwin|--weston-xwayland|--kwin-xwayland|--xpra-xwayland|--xpra2-xwayland) ;;\n    *) Compositorcommand=\"\" ;;\n  esac\n\n  return 0\n}\ncreate_xcontainercommand() {    # option --xc: create docker command for X in container\n  local Xcontainerrc Gpudevice\n  local Xc_hostx= Xc_hostwayland= Xc_containerwayland Xc_gpu= Xc_nomitshm\n  local Xc_capdrop Xc_nopriv Xc_user Xc_console Xc_systemd\n\n  Xcontainername=\"x11docker_X${Newdisplaynumber}_xserver_${Cachenumber}\"\n  Xcontainerrc=\"$Cachefolder/xcontainerrc\"\n  mkfile \"$Xcontainerrc\"\n\n  mkfile \"$Cachefolder/etcpasswd.xcontainer\"\n  echo \"root:x:0:0:root:/root:/bin/bash\" >> \"$Cachefolder/etcpasswd.xcontainer\"\n  echo \"$Containeruser:x:${Containeruseruid:-$Hostuseruid}:${Containerusergid:-$Hostusergid}:$Containeruser,,,:/tmp:/bin/bash\" >> \"$Cachefolder/etcpasswd.xcontainer\"\n\n  mkfile \"$Cachefolder/etcgroup.xcontainer\"\n  echo \"video:x:$(mygetent group video   | cut -d: -f3):$Containeruser\" >> \"$Cachefolder/etcgroup.xcontainer\"\n  echo \"render:x:$(mygetent group render | cut -d: -f3):$Containeruser\" >> \"$Cachefolder/etcgroup.xcontainer\"\n  echo \"weston-launch:x:104:$Containeruser\"                           >> \"$Cachefolder/etcgroup.xcontainer\"\n\n  ## code snippets:\n\n  # drop privileges\n  Xc_capdrop=\"\\\\\n  --cap-drop ALL\"\n  Xc_nopriv=\"\\\\\n  --security-opt=no-new-privileges\"\n  #[ \"$Xcrootless\" = \"yes\" ] && Xc_capdrop=\"\" && Xc_nopriv=\"\"\n  case \"$Backend\" in\n    nerdctl)\n      Xc_capdrop=\"\"\n      Xc_nopriv=\"\"\n    ;;\n  esac\n\n  # user\n  case \"$Xcrootless\" in\n    yes)\n      case \"$Xcontainerbackend\" in\n        podman)\n          Xc_user=\"\\\\\n  --user ${Hostuseruid}:${Hostusergid} \\\\\n  --userns=keep-id\"\n        ;;\n        *)\n          Xc_user=\"\\\\\n  --user 0:0\"  # maps to same uid as unprivileged host user\n        ;;\n      esac\n    ;;\n    no)\n      Xc_user=\"\\\\\n  --user ${Hostuseruid}:${Hostusergid}\"\n    ;;\n  esac\n\n  # X in container\n  Xc_containerx=\"\\\\\n  --mount type=bind,source=$Cachefolder/tmp,target=/tmp \\\\\n  --mount type=bind,source=$Xservercookie,target=$Xservercookie \\\\\n  --mount type=bind,source=$Modelinefilebasepath,target=$Modelinefilebasepath,readonly\"\n\n  # access to host X\n  [ -n \"$Hostdisplay\" ] && {\n    Xc_hostx=\"\\\\\n  --env DISPLAY=$Hostdisplay\"\n    [ -S \"/tmp/.X11-unix/X$Hostdisplaynumber\" ] && {\n      case \"$Xserver\" in\n        --hostdisplay)\n          Xc_hostx=\"$Xc_hostx \\\\\n  --mount type=bind,source=/tmp/.X11-unix/X$Hostdisplaynumber,target=/tmp/.X11-unix/X$Hostdisplaynumber,readonly\"\n        ;;\n        *)\n          Xc_hostx=\"$Xc_hostx \\\\\n  --mount type=bind,source=/tmp/.X11-unix/X$Hostdisplaynumber,target=/X$Hostdisplaynumber,readonly\"\n        ;;\n      esac\n    }\n    [ -s \"$Hostxauthority\" ] && Xc_hostx=\"$Xc_hostx \\\\\n  --env XAUTHORITY=$Hostxauthority \\\\\n  --mount type=bind,source=$Hostxauthority,target=$Hostxauthority\"\n  }\n\n  # access to host Wayland\n  [ -S \"$XDG_RUNTIME_DIR/$Hostwaylandsocket\" ] && Xc_hostwayland=\"\\\\\n  --mount type=bind,source=$XDG_RUNTIME_DIR/$Hostwaylandsocket,target=$XDG_RUNTIME_DIR/$Hostwaylandsocket,readonly \\\\\n  --env XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR \\\\\n  --env GDK_BACKEND=wayland \\\\\n  --env WAYLAND_DISPLAY=$Hostwaylandsocket\"\n\n  # Wayland in container\n  Xc_containerwayland=\"\\\\\n  --env XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR \\\\\n  --mount type=bind,source=$Cachefolder/XDG_RUNTIME_DIR,target=$XDG_RUNTIME_DIR\"\n\n  # container X should not use MIT-SHM\n  Xc_nomitshm=\"\\\\\n  --env LD_PRELOAD=/lib/x86_64-linux-gnu/libdl.so.2:$Sharefolder/XlibNoSHM.so\"\n\n  # GPU\n  while read -r Gpudevice ; do\n    Xc_gpu=\"$Xc_gpu \\\\\n  --device $Gpudevice:$Gpudevice\"\n  done < <(devicelist_gpu)\n  # nvidia driver\n  [ \"$Nvidiainstallerfile\" ] && {\n    Xc_gpu=\"$Xc_gpu \\\\\n  --mount type=bind,source=$Nvidiainstallerfile,target=$Nvidiacontainerfile,readonly\"\n    mkfile \"$Sharefolder/nvidia_installer\"\n    rootrc_nvidia_installer >> \"$Sharefolder/nvidia_installer\"\n  }\n  case \"$Xcontainerbackend\" in\n    docker|podman)\n      mygetent group video >/dev/null && Xc_gpu=\"$Xc_gpu \\\\\n  --group-add $(mygetent group video  | cut -d: -f3)\"\n      mygetent group render >/dev/null && Xc_gpu=\"$Xc_gpu \\\\\n  --group-add $(mygetent group render | cut -d: -f3)\"\n    ;;\n  esac\n\n  # console\n  Xc_console=\"\\\\\n  --cap-add SYS_TTY_CONFIG \\\\\n  --cap-add DAC_OVERRIDE \\\\\n  --cap-add KILL \\\\\n  --mount type=bind,source=/var/run/dbus,target=/var/run/dbus \\\\\n  --mount type=bind,source=/run/udev/data,target=/run/udev/data,readonly \\\\\n  --device=/dev/tty${Newxvt}\"\n  while read Line; do\n    Xc_console=\"$Xc_console \\\\\n  --device=$Line\"\n  done < <(devicelist_input)\n\n  # Weston\n  Xc_weston=\"\\\\\n  --cap-add SETUID \\\\\n  --cap-add SETGID \\\\\n  --cap-add CHOWN \\\\\n  --env XDG_VTNR=$Newxvt \\\\\n  --mount type=bind,source=$Compositorlogfile,target=/x11docker/compositor.log\"\n  case \"$Xcontainerbackend\" in\n    docker|podman)\n      Xc_weston=\"$Xc_weston \\\\\n  --group-add 104\"\n    ;;\n  esac\n\n  # connect to systemd from host\n  Xc_systemd=\"\\\\\n  --pid=host \\\\\n  --env XDG_SEAT=$XDG_SEAT \\\\\n  --env XDG_SESSION_ID=$XDG_SESSION_ID \\\\\n  --mount type=bind,source=/run/systemd,target=/run/systemd \\\\\n  --mount type=bind,source=/run/user,target=/run/user \\\\\n  --mount type=bind,source=/run/dbus,target=/run/dbus \\\\\n  --mount type=bind,source=/sys/fs/cgroup,target=/sys/fs/cgroup\"\n\n\n  ## create command ##\n  ### FIXME --xc=nerdctl does not take combination --detach --rm\n  Xcontainercommand=\"$Xcontainerbackend run --pull=never \\\\\n  --detach \\\\\n  --name $Xcontainername \\\\\n  --mount type=bind,source=$Sharefolder,target=$Sharefolder \\\\\n  --mount type=bind,source=$Cachefolder/etcpasswd.xcontainer,target=/etc/passwd,readonly \\\\\n  --mount type=bind,source=$Cachefolder/etcgroup.xcontainer,target=/etc/group,readonly \\\\\n  --mount type=bind,source=$Xcontainerrc,target=/xcontainerrc,readonly\"\n\n  case \"$Backend\" in\n    docker|podman)\n      Xcontainercommand=\"$Xcontainercommand \\\\\n  --rm \\\\\n  --security-opt label=type:container_runtime_t\"\n    ;;\n    nerdctl) ;;\n  esac\n\n  case \"$Hostxoverip\" in\n    yes)\n      grep -q \"localhost\" <<< \"$Hostdisplay\" && {\n        warning \"Option --xc: Sharing host network stack\n  with container of x11docker/xserver to support 'ssh -X'.\"\n        Xcontainercommand=\"$Xcontainercommand \\\\\n  --network=host\"\n      } || {\n        Xcontainercommand=\"$Xcontainercommand \\\\\n  --network=bridge\"\n      }\n    ;;\n    no)\n      case \"$Xoverip\" in\n        no)\n          Xcontainercommand=\"$Xcontainercommand \\\\\n  --network=none\"\n        ;;\n        listentcp|socat)\n          [ -n \"$Xcnetworkid\" ] && {\n            Xcontainercommand=\"$Xcontainercommand \\\\\n  --network=$Xcnetworkname\"\n          }\n        ;;\n      esac\n    ;;\n  esac\n\n  case \"$Shareipc\" in\n    host)\n      Xcontainercommand=\"$Xcontainercommand \\\\\n  --ipc=host\"\n    ;;\n    no)\n      case \"$Xcontainerbackend\" in\n        docker)\n          Xcontainercommand=\"$Xcontainercommand \\\\\n  --ipc=shareable\"\n        ;;\n      esac\n    ;;\n  esac\n\n  case \"$Runtime\" in\n    \"\") ;;\n    kata-runtime) ;; ### FIXME check\n    sysbox-runc)\n      [ \"$Sharegpu\" = \"virgl\" ] || grep -q \"xwayland\" <<< \"$Xserver\" && {\n        # virgl and Xwayland need shared device files what is not supported yet by sysbox\n        case \"$Backend\" in\n          docker)\n            Xcontainercommand=\"$Xcontainercommand \\\\\n  --runtime runc\"\n          ;;\n          podman)\n            Xcontainercommand=\"$Xcontainercommand \\\\\n  --runtime crun\"\n          ;;\n          *) ;;\n        esac\n      } || {\n        Xcontainercommand=\"$Xcontainercommand \\\\\n  --runtime $Runtime\"\n      }\n    ;;\n    *)\n      Xcontainercommand=\"$Xcontainercommand \\\\\n  --runtime $Runtime\"\n    ;;\n  esac\n\n  # add code snippets\n  case \"$Xserver\" in\n    --hostdisplay)\n      Xcontainercommand=\"$Xcontainercommand $Xc_capdrop\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_nopriv\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_user\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_hostx\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_containerx\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_nomitshm\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_gpu\"\n    ;;\n    --xorg)\n      Xcontainercommand=\"$Xcontainercommand $Xc_capdrop\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_user\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_containerx\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_hostx\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_gpu\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_console\"\n      experimental \"add --pid=host to Xorg container\" && Xcontainercommand=\"$Xcontainercommand --pid=host\"\n    ;;\n    --xephyr)\n      Xcontainercommand=\"$Xcontainercommand $Xc_capdrop\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_nopriv\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_user\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_containerx\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_hostx\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_nomitshm\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_gpu\"\n    ;;\n    --xvfb)\n      Xcontainercommand=\"$Xcontainercommand $Xc_capdrop\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_nopriv\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_user\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_containerx\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_hostx\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_gpu\"\n    ;;\n    --nxagent)\n      Xcontainercommand=\"$Xcontainercommand $Xc_capdrop\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_nopriv\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_user\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_containerx\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_hostx\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_nomitshm\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_gpu\"\n      Xcontainercommand=\"$Xcontainercommand \\\\\n  --env NX_CLIENT=$Nxagentclientrc\"\n    ;;\n    --xpra)\n      Xcontainercommand=\"$Xcontainercommand $Xc_capdrop\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_nopriv\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_user\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_containerx\"\n      [ -n \"$Hostdisplay\" ] && [ -z \"$Hostwaylandsocket\" ] && {\n        Xcontainercommand=\"$Xcontainercommand $Xc_hostx\"\n      }\n      [ \"$Hostwaylandsocket\" ] && {\n        Xcontainercommand=\"$Xcontainercommand $Xc_hostwayland\"\n      }\n      Xcontainercommand=\"$Xcontainercommand $Xc_nomitshm\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_gpu\"\n    ;;\n    --xpra2)\n      Xcontainercommand=\"$Xcontainercommand $Xc_capdrop\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_nopriv\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_user\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_containerx\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_gpu\"\n    ;;\n    --xpra-xwayland)\n      Xcontainercommand=\"$Xcontainercommand $Xc_capdrop\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_nopriv\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_user\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_containerx\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_hostx\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_containerwayland\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_gpu\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_nomitshm\"\n    ;;\n    --weston-xwayland)\n      case \"$Newxvt\" in\n        \"\")\n          Xcontainercommand=\"$Xcontainercommand $Xc_capdrop\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_nopriv\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_user\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_containerx\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_hostx\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_hostwayland\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_containerwayland\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_nomitshm\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_gpu\"\n        ;;\n        *)\n          Xcontainercommand=\"$Xcontainercommand $Xc_capdrop\"\n          #Xcontainercommand=\"$Xcontainercommand $Xc_user\"   # disabled to allow tty switch\n          Xcontainercommand=\"$Xcontainercommand $Xc_containerx\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_containerwayland\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_gpu\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_weston\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_console\"\n        ;;\n      esac\n    ;;\n    --xpra2-xwayland)\n      Xcontainercommand=\"$Xcontainercommand $Xc_capdrop\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_nopriv\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_user\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_containerx\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_hostx\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_containerwayland\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_gpu\"\n    ;;\n    --xwayland)\n      Xcontainercommand=\"$Xcontainercommand $Xc_capdrop\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_nopriv\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_user\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_containerx\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_hostwayland\"\n      Xcontainercommand=\"$Xcontainercommand $Xc_gpu\"\n    ;;\n    --weston)\n      case \"$Newxvt\" in\n        \"\")\n          Xcontainercommand=\"$Xcontainercommand $Xc_capdrop\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_nopriv\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_user\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_hostx\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_hostwayland\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_containerwayland\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_nomitshm\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_gpu\"\n        ;;\n        *)\n          Xcontainercommand=\"$Xcontainercommand $Xc_capdrop\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_user\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_containerwayland\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_gpu\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_weston\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_console\"\n        ;;\n      esac\n    ;;\n    --kwin)\n      case \"$Newxvt\" in\n        \"\")\n          Xcontainercommand=\"$Xcontainercommand $Xc_capdrop\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_nopriv\"\n          Xcontainercommand=\"$Xcontainercommand \\\\\n  --cap-add SYS_RESOURCE\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_user\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_hostx\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_hostwayland\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_containerwayland\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_nomitshm\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_gpu\"\n        ;;\n        *)\n          Xcontainercommand=\"$Xcontainercommand $Xc_capdrop\"\n          Xcontainercommand=\"$Xcontainercommand \\\\\n  --cap-add SYS_RESOURCE\"\n          Xcontainercommand=\"$Xcontainercommand \\\\\n  --env XDG_SESSION_ID=$XDG_SESSION_ID\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_user\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_containerwayland\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_gpu\"\n          Xcontainercommand=\"$Xcontainercommand $Xc_console\"\n        ;;\n      esac\n    ;;\n    *)\n      error \"create_xcontainercommand(): Unknown X server option $Xserver\"\n      return 1\n    ;;\n  esac\n  Xcontainercommand=\"$Xcontainercommand \\\\\n  $Xcontainerimage bash /xcontainerrc\"\n\n  # xcontainerrc\n  echo \"#! /bin/bash\n# script running in X server container (option --xc)\n\nexec >> $Xinitlogfile 2>&1\nLD_PRELOAD= cp /XlibNoSHM.so $Sharefolder/XlibNoSHM.so\n\n$(declare -f rocknroll)\nTimetosaygoodbyefile=$Timetosaygoodbyefile\n\nmkdir -p -m 1777 /tmp/.X11-unix\n[ -S /X${Hostdisplaynumber} ] && ln -v -s /X$Hostdisplaynumber /tmp/.X11-unix/X$Hostdisplaynumber\n#[ -S /${Hostwaylandsocket} ]  && ln -v -s /$Hostwaylandsocket \\$XDG_RUNTIME_DIR/$Hostwaylandsocket\nls -la /tmp/.X11-unix\n\n# --init\ncp /usr/bin/catatonit $Sharefolder/catatonit\n\" >> \"$Xcontainerrc\"\n\necho '\n# set host cookie to ffff, just in case xauth failed on host in check_hostxenv()\n[ -n \"$XAUTHORITY\" ] && {\n  Cookie=\"$(xauth -n -i -f \"${XAUTHORITY:-}\" nlist \"$DISPLAY\" 2>/dev/null | sed -e \"s/^..../ffff/\")\"\n  echo \"$Cookie\" | xauth -n -i -f \"$HOME/Xauthority.host\" nmerge -\n  truncate -s0 \"${XAUTHORITY:-}\"\n  cat \"$HOME/Xauthority.host\" >> \"${XAUTHORITY:-}\"\n}\n' >> \"$Xcontainerrc\"\n\n  [ \"$Sharegpu\" != \"no\" ] && echo \"\n# --gpu=virgl\nvirgl_test_server &\n\" >> \"$Xcontainerrc\"\n\n  echo \"\necho 'X server container is ready'\n\n# wait for the end\ncase $Usemkfifo in\n  yes) read -n1 goodbye <$Timetosaygoodbyefifo ;;\n  no)  while rocknroll; do sleep 1; done ;;\nesac\n\n# avoid freeze on console that happens if container stops before Xorg or weston is down\nkillall Xorg weston\nsleep 1\n\nexit 0\n\" >> \"$Xcontainerrc\"\n\n  return 0\n}\ncreate_xinitrc() {              # create xinitrc: set up X environment, create cookies\n  echo \"#! /bin/sh\"\n  declare -f cookiebaker\n  declare -f strlenhex\n  declare -f pspid\n  declare -f disable_xhost\n  declare -f rocknroll\n  declare -f storeinfo\n  declare -f saygoodbye\n  echo \"$Messagefifofuncs\"\n  case \"$Xcontainer\" in\n    yes)\n      echo           \"storepid() { : ; }\"\n      echo           \"unpriv() {\"\n      echo           '  eval \"${1:-}\"'\n      echo           \"}\"\n    ;;\n    no)\n      declare -f storepid\n      declare -f unpriv\n      echo           \"Unpriv='$Unpriv'\"\n    ;;\n  esac\n  echo               \"xtool() {\"\n  echo               '  [ \"${1:-}\" = \"--check\" ] && command -v \"${2:-}\" && return'\n  echo               '  eval ${1:-}'\n  echo               \"}\"\n  echo               \"getscreensize() {\"\n  echo               \"  CurrentXaxis=\\\"\\$(xrandr | grep primary | cut -d' ' -f4 | cut -dx -f1 )\\\"\"\n  echo               \"  CurrentYaxis=\\\"\\$(xrandr | grep primary | cut -d' ' -f4 | cut -dx -f2 | cut -d+ -f1)\\\"\"\n  echo               \"}\"\n  echo               \"checkscreensize() {\"\n  echo               \"  getscreensize\"\n  echo               \"  [ \\\"\\$Xaxis\\\" = \\\"\\$CurrentXaxis\\\" ] || return 1\"\n  echo               \"  [ \\\"\\$Yaxis\\\" = \\\"\\$CurrentYaxis\\\" ] || return 1\"\n  echo               \"  return 0\"\n  echo               \"}\"\n  echo               \"getprimary() {\"\n  echo               \"  xrandr | grep -q primary || xrandr --output \\$(xrandr | grep ' connected' | head -n1 | cut -d' ' -f1) --primary\"\n  echo               \"  echo \\$(xrandr | grep primary | cut -d' ' -f1)\"\n  echo               \"}\"\n  echo               \"\"\n\n  echo               \"Messagefile='$Messagefifo'\"\n  echo               \"Output=\\\"\\$(getprimary)\\\"\"\n  echo               \"Storeinfofile='$Storeinfofile'\"\n  echo               \"Storepidfile='$Storepidfile'\"\n  echo               \"Timetosaygoodbyefile='$Timetosaygoodbyefile'\"\n  echo               \"\"\n  echo               \"export PATH='${PATH:-}'\"\n  echo               \"\"\n  echo               \"Cookie=''\"\n  echo               \"Line=''\"\n  echo               \"Var=''\"\n  echo               \"\"\n\n  echo               \"debugnote 'Running xinitrc'\"\n  echo               \"\"\n\n  case \"$Xserver\" in\n    --weston|--kwin|--hostwayland)\n      echo           \"export $Newxenv\"\n      echo           \"unset  DISPLAY XAUTHORITY\"\n      echo           \"export DISPLAY XAUTHORITY\"\n    ;;\n    --tty)\n      echo           \"unset  DISPLAY XAUTHORITY WAYLAND_DISPLAY\"\n      echo           \"export DISPLAY XAUTHORITY WAYLAND_DISPLAY\"\n    ;;\n    --runx)\n      [ \"$Xauthentication\" != \"no\" ] && {\n        echo         \"# cookie generated by runx\"\n        echo         'debugnote \"xinitrc: Option --runx: Using cookie: $XAUTHORITY\"'\n        echo         \"cp -T \\\"\\$XAUTHORITY\\\" '$Xclientcookie'\"\n        echo         \"cp -T \\\"\\$XAUTHORITY\\\" '$Xservercookie'\"\n      }\n      echo           \"export $Newxenv\"\n    ;;\n    *) # here something for real X servers\n      echo           \"export $Newxenv\"\n      case \"$Xoverip\" in\n        socat)\n          case \"$Xcnetworkid\" in\n            \"\")\n              echo \"echo \\\"socat -d TCP-LISTEN:$((6000+Newdisplaynumber)),fork,bind=${Xcontainerip:-$Hostip} UNIX-CONNECT:$Newxsocket\\\"\"\n              echo        \"socat -d TCP-LISTEN:$((6000+Newdisplaynumber)),fork,bind=${Xcontainerip:-$Hostip} UNIX-CONNECT:$Newxsocket &\"\n            ;;\n            *)\n              echo \"echo \\\"socat -d TCP-LISTEN:$((6000+Newdisplaynumber)),fork,bind=$Xcontainername UNIX-CONNECT:$Newxsocket\\\"\"\n              echo        \"socat -d TCP-LISTEN:$((6000+Newdisplaynumber)),fork,bind=$Xcontainername UNIX-CONNECT:$Newxsocket &\"\n            ;;\n          esac\n          echo       \"storepid \\$! socat-tcp\"\n        ;;\n      esac\n      echo           \"\"\n      case \"$Xserver\" in\n        --hostdisplay)\n          echo       \"# --hostdisplay: need cookie from host\" ### FIXME rather get a trusted one\n          echo       \"Hostcookie=\\\"\\$(xauth -n -i -f $Hostxauthority list | grep :$Hostdisplaynumber | awk '{print \\$3}')\\\"\"\n          echo       \"xauth -n -i -f $Xclientcookie add $Newdisplay MIT-MAGIC-COOKIE-1 \\$Hostcookie\"\n          echo       \"\"\n        ;;\n        --nxagent)\n          echo       \"sleep 1 && xsetroot -solid '#7F7F7F' 2>/dev/null &\" ;;\n        *) echo      \"xsetroot -solid '#7F7F7F' 2>/dev/null\" ;;\n      esac\n      echo \"\"\n\n      [ \"$Xauthentication\" != \"no\" ] && {\n        echo         \"# create new XAUTHORITY cookies\"\n        case \"$Xauthentication\" in\n          yes|trusted)\n            echo     \"Trusted=trusted\"\n          ;;\n          untrusted)\n            echo     \"Trusted=untrusted\"\n          ;;\n        esac\n        echo         \"echo \\\"Requesting \\$Trusted cookie from X server\\\"\"\n        echo         \"xauth -v -n -i -f $Xclientcookie generate $Newdisplay . \\$Trusted timeout 3600\"\n        echo         \"[ '$Xserver' = '--hostdisplay' ] && sed -i /\\$Hostcookie/d $Xclientcookie\"\n        echo         \"\"\n        echo         \"[ -s '$Xclientcookie' ] || { \"\n            echo     \"  :\"\n        case \"$Xauthentication\" in\n          trusted|untrusted)\n            echo     \"  error 'Failed to create $Xauthentication cookie.\n  Maybe your X server misses extension SECURITY.'\"\n          ;;\n        esac\n        echo         \"}\"\n        echo         \"[ -s '$Xclientcookie' ] || { \"\n        echo         \"  # still no cookie? try to create one without extension security\"\n        echo         \"  echo 'Failed to retrieve trusted cookie from X server. Will bake one directly with xauth'\"\n        echo         \"  xauth -v -n -i -f $Xclientcookie add :$Newdisplaynumber . $(makecookie)\"\n        echo         \"}\"\n        echo         \"[ -s '$Xclientcookie' ] && {\"\n        echo         \"  # Prepare cookie with localhost identification disabled by ffff, needed if X socket is shared. ffff means 'familiy wild'\"\n        echo         \"  Cookie=\\\"\\$(xauth -n -i -f $Xclientcookie nlist | sed -e 's/^..../ffff/')\\\"\"\n        echo         \"  truncate -s0 $Xclientcookie\"\n        echo         \"  echo \\\"\\$Cookie\\\" | xauth -v -n -i -f $Xclientcookie nmerge -\"\n        echo         \"}\"\n        echo         \"[ -s '$Xclientcookie' ] || {\"\n        echo         \"  debugnote 'Failed to create cookie with xauth. Will try custom cookie baker script.'\"\n        echo         \"  cookiebaker '$Newdisplay' >> $Xclientcookie\"\n        echo         \"}\"\n        echo         \"ls -l $Xclientcookie\"\n        echo         \"truncate -s0 $Xservercookie\"\n        echo         \"cat $Xclientcookie >> $Xservercookie\"\n        echo         \"chmod 644 $Xclientcookie\"\n        echo         \"\"\n        echo         \"[ -s '$Xclientcookie' ] || error 'xinitrc(): Option --xauth=$Xauthentication: Cookie creation failed.'\"\n      }\n      echo           \"export XAUTHORITY=$Xclientcookie\"\n      echo           \"[ '$Xauthentication' = 'no' ] || [ ! -s '$Xclientcookie' ] && unset XAUTHORITY && warning 'Option --xauth=no: X server $Newdisplay runs without cookie authentication.'\"\n      echo           \"\"\n      case \"$Xserver\" in\n        --hostdisplay) ;;   # do not change host settings\n        --xwin) ;;          # xhost does not work over tcp\n        *)\n          case \"$Xauthentication\" in\n            yes|trusted|untrusted)\n              echo   \"# clean xhost\"\n              echo   \"verbose 'Disabling any possible access to new X server possibly granted by xhost'\"\n              echo   \"disable_xhost\"\n            ;;\n          esac\n          [ -n \"$Xhost\" ] && {\n            [ \"$Xhost\" = \"auto\" ] && Xhost=\"+SI:localuser:$Containeruser\"\n            echo     \"warning \\\"Option --xhost: Running 'xhost $Xhost' on $Newdisplay\\\"\"\n            echo     \"xhost $Xhost\"\n          }\n          echo       \"\"\n        ;;\n      esac\n\n      case \"$Xserver\" in\n        --hostdisplay|--xwin|--nxagent) ;;\n        --hostwayland|--weston|--kwin|--tty) ;;\n        *)\n          echo       \"# Keyboard layout\"\n          [ -n \"$Hostdisplay\" ] && {\n            xtool --check setxkbmap && {\n              case \"$Xkblayout\" in\n                \"\") \n                  #setxkbmap -display \"$Hostdisplay\" -print >> \"$Xkbkeymapfile\"\n                  echo \"env DISPLAY=$Hostdisplay XAUTHORITY=$Hostxauthority setxkbmap -display $Hostdisplay -print >> $Xkbkeymapfile\"\n                ;;\n                *)\n                  echo \"setxkbmap '$Xkblayout' -print >> $Xkbkeymapfile\"\n                ;;\n              esac\n            }\n            [ -s \"$Xkbkeymapfile\" ] && {\n              echo   \"# set keyboard layout on $Newdisplay\"\n              echo   \"verbose \\\"Keyboard layout:\"\n              echo   \"\\$(cat $Xkbkeymapfile)\\\"\"\n              echo   \"xkbcomp $Xkbkeymapfile $Newdisplay\"\n            }\n            echo     \"\"\n          }\n        ;;\n      esac\n    ;;\n  esac\n\n  case \"$Xserver\" in\n    --xpra|--xpra2|--xvfb)\n      echo           \"# create set of different screen resolutions\"\n      echo           \"[ -e \\\"$Modelinefile\\\" ] && while read Line; do\"\n      echo           \"  Line=\\\"\\$(echo \\\"\\$Line\\\" | sed 's/Modeline//g')\\\"\"\n      echo           \"  Line=\\\"\\$(echo \\\"\\$Line\\\" | sed 's/\\\"//g')\\\"\"\n      echo           \"  xrandr --newmode \\$Line 2>/dev/null\"\n      echo           \"  xrandr --addmode \\\"\\$Output\\\" \\$(echo \\$Line | cut -d' ' -f1) 2>/dev/null\"\n      echo           \"done < \\\"$Modelinefile\\\"\"\n      [ -n \"$Modeline\" ] && {\n        echo         \"xrandr --newmode $Modeline\"\n        echo         \"xrandr --addmode \\$Output $(echo $Modeline | cut -d \" \" -f1)\"\n        [ \"$Xserver\" != \"--xvfb\" ] && [ \"$Desktopmode\" = \"yes\" ] && echo \"xrandr --output  \\$Output --mode $(echo $Modeline | cut -d \" \" -f1)\"\n      }\n      echo           \"\"\n    ;;\n    --xorg) # --xorg: --scale, --size, --rotate\n      echo           \"# determine screen size\"\n      echo           '[ -n \"$(xrandr | grep connected | grep -v disconnected)\" ] && {'\n      [ -z \"$Screensize\" ] && {\n        echo         \"  getscreensize\"\n        echo         \"  Xaxis=\\\"\\$CurrentXaxis\\\"\"\n        echo         \"  Yaxis=\\\"\\$CurrentYaxis\\\"\"\n        [ \"$Scaling\" ] && echo \"  Xaxis=\\\"\\$(awk -v a=\\\"\\$Xaxis\\\" -v b=\\\"$Scaling\\\" 'BEGIN {print (a / b)}')\\\"\"\n        echo         \"  Xaxis=\\\"\\${Xaxis%.*}\\\"\"\n        [ \"$Scaling\" ] && echo \"  Yaxis=\\\"\\$(awk -v a=\\\"\\$Yaxis\\\" -v b=\\\"$Scaling\\\" 'BEGIN {print (a / b)}')\\\"\"\n        echo         \"  Yaxis=\\\"\\${Yaxis%.*}\\\"\"\n      } || {\n        echo         \"  Xaxis='$Xaxis'\"\n        echo         \"  Yaxis='$Yaxis'\"\n      }\n      echo           \"  Screensize=\\\"\\${Xaxis}x\\${Yaxis}\\\"\"\n      echo           \"\"\n\n      [ \"$Screensize\" ] && [ -z \"$Scaling\" ] && {\n        echo         \"  # Switch to desired screen size $Screensize\"\n        echo         \"  [ -n \\\"\\$(xrandr | grep \\$Screensize)\\\" ] && { \"\n        echo         \"    note \\\"Will try to set native resolution \\$Screensize.\"\n        echo         \"  If that looks ugly, use --scale=1 to enforce a fake scaled resolution.\\\"\"\n        echo         \"    xrandr --output \\$Output --mode \\$Screensize\"\n        echo         \"  } || note \\\"Resolution \\$Screensize not found in xrandr.\\\"\"\n        echo         \"\"\n      }\n\n      [ \"$Screensize\" ] && [ -z \"$Scaling\" ] && {\n        echo         \"  checkscreensize || {\"\n        echo         \"    note \\\"Panning \\$Screensize. If virtual screen is greater than \"\n        echo         \"  maximal screen size, you can move virtual screen with mouse at screen edges.\"\n        echo         \"  You can force the virtual screen to match your monitor with option --scale=1\\\"\"\n        echo         \"    xrandr --output \\$Output --panning \\$Screensize+0+0/\\$Screensize+0+0/100/100/100/100 --verbose\"\n        echo         '  }'\n        echo         \"  checkscreensize || {\"\n        echo         \"    note 'Panning failed, trying to scale instead.'\"\n        echo         \"    xrandr --output \\$Output --scale-from \\$Screensize --panning \\$Screensize+0+0/\\$Screensize+0+0\"\n        echo         \"    checkscreensize && note \\\"Successfully set screen size \\$Screensize\\\"\"\n        echo         '  }'\n        echo         \"  checkscreensize || {\"\n        echo         \"    getscreensize\"\n        echo         \"    note \\\"Setting desired resolution \\$Screensize failed.\"\n        echo         \"  Fallback: Will use detected \\${CurrentXaxis}x\\${CurrentYaxis} instead.\\\"\"\n        echo         '  }'\n        echo         \"\"\n      }\n\n      [ \"$Scaling\" ] && {\n        echo         \"  # --scale $Scaling\"\n        [ \"$Screensize\" ] && [ \"$Scaling\" != \"1\" ] && echo \"  note 'Cannot set panning and scaling at the same time.\n  Desired screen size $Screensize will be scaled to your monitor size\n  for arbitrary values you may provide with option --scale.'\"\n        echo         \"  # Scaling $Scaling\"\n        echo         \"  note \\\"Setting scaled resolution \\$Screensize\\\" with scale factor $Scaling.\"\n        # must use --scale-from and --panning because --scale causes mouse barriers/crtc-boundaries\n        echo         \"  xrandr --output \\$Output --scale-from \\$Screensize --panning \\$Screensize+0+0/\\$Screensize+0+0 --verbose\"\n        echo         \"  checkscreensize || {\"\n        echo         \"    getscreensize\"\n        echo         \"    note \\\"Setting desired resolution \\$Screensize failed.\"\n        echo         \"  Detected resolution \\${CurrentXaxis}x\\${CurrentYaxis} instead.\\\"\"\n        echo         \"  }\"\n        echo         \"\"\n      }\n\n      [ -n \"$Rotation\" ] && {\n        echo         \"  # --rotate $Rotation\"\n        echo         \"  verbose 'Rotation $Rotation'\"\n        case \"$Rotation\" in\n          0|normal)    Rotation=\"\" ;;\n          90)          Rotation=\"--rotate right\";;\n          180)         Rotation=\"--reflect xy\" ;;\n          270)         Rotation=\"--rotate left\";;\n          flipped)     Rotation=\"--reflect y\";;\n          flipped-90)  Rotation=\"--rotate right --reflect x\";;\n          flipped-180) Rotation=\"--reflect x\";;\n          flipped-270) Rotation=\"--rotate left --reflect x\";;\n        esac\n        echo         \"  bash -c 'while read Line ; do xrandr --output \\$Line $Rotation ; done < <(xrandr | grep \\\" connected\\\" | cut -d \\\" \\\" -f1)'\"\n        echo         \"\"\n      }\n      echo           \"  :\"\n      echo           \"} || {\"\n      echo           \"  Xaxis=${Xaxis:-1024}\"\n      echo           \"  Yaxis=${Yaxis:-768}\"\n      echo           \"  Screensize=\\\"\\${Xaxis}x\\${Yaxis}\\\"\"\n      echo           \"  note \\\"Could not detect any connected monitor.\"\n      echo           \"  Running on a server? Is xrandr installed? Will try to set a framebuffer size\"\n      echo           \"  with \\\"xrandr --fb \\$Screensize\\\" that may serve as a virtual display.\\\"\"\n      echo           \"  xrandr --fb \\$Screensize\"\n      echo           \"}\"\n      echo           \"\"\n    ;;\n  esac\n\n  [ -n \"$Newdisplay\" ] && echo \"verbose \\\"Output of xrandr on $Newdisplay\n\\$(xrandr)\\\"\"\n  echo \"\"\n\n  # --wm\n  [ \"$Windowmanagermode\" = \"host\" ] && {\n    echo             \"# window manager\"\n    echo             \"$Windowmanagercommand & storepid \\$! windowmanager\"\n    echo             \"# only one desktop\"\n    echo             \"sleep 1 && wmctrl -n 1 &\"\n  }\n\n  # --xfishtank\n  [ \"$Xfishtank\" = \"yes\" ] && echo \"xfishtank & storepid \\$! xfishtank\"\n\n  echo               \"echo 'xinitrc: xinitrc is ready'\"\n  #echo               \"storeinfo xinitrc=ready\"\n  echo               \"\"\n\n  # --clipboard\n  [ \"$Shareclipboard\" != \"no\" ] && {\n    case \"$Xserver\" in\n#      --xpra*|--nxagent|--xwin|--runx) ;;         # have their own clipboard management\n      --xwin|--runx) ;;                           # have their own clipboard management\n      --hostdisplay) ;;                           # already same clipboard\n      *)                                          # synchronizing between different X servers\n        echo         \"# option '-c, --clipboard': Run clipboard script \"\n        echo         \"bash $Clipboardrc &\"\n        echo         \"\"\n      ;;\n    esac\n  }\n\n  # --checkwindow\n  [ \"$Checkforopenwindow\" ] && {\n    echo             \"sleep 5\"\n    echo             \"while rocknroll; do\"\n    echo             \"  sleep 2\"\n    case \"$Checkforopenwindow\" in\n      yes)\n        echo         \"  [ \\\"\\$(xwininfo -root -children | grep -v '(has no name)' | awk '{print \\$1}' | grep -c ^0x)\\\" = '0' ] && break\"\n      ;;\n      *)\n        echo         \"  xwininfo -root -children | grep -q '$Checkforopenwindow' || break\"\n      ;;\n    esac\n    echo             \"done\"\n    echo             \"saygoodbye\"\n  }\n\n  echo               \"# wait for the end\"\n  case \"$Usemkfifo\" in\n    yes) echo        \"read Var <$Timetosaygoodbyefifo\" ;;\n    no)  echo        \"while rocknroll; do sleep 1; done\" ;;\n  esac\n\n  return 0\n}\ndisable_xhost() {               # remove any access to X server granted by xhost\n  local Line= Environment\n  Environment=\"${1:-\"DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY\"}\"\n  xtool --check xhost || return 1\n  xtool \"env $Environment xhost 2>&1 | tail -n +2  /dev/stdin\" | while read -r Line ; do  # read all but the first line (header)\n    debugnote \"xhost: Removing entry $Line\"\n    xtool \"env $Environment xhost -'$Line'\"                                # disable every entry\n  done\n  xtool \"env $Environment xhost -\"                                         # enable access control\n  [ \"$(xtool \"env $Environment xhost 2>&1 | wc -l\")\" -gt \"1\" ] && {\n    warning \"Remaining xhost permissions found on display ${DISPLAY:-}\n$(xtool \"env $Environment xhost 2>&1\" )\"\n    return 1\n  }\n  xtool \"env $Environment xhost 2>&1\" | grep -q \"access control disabled\" && {\n    warning \"Failed to restrict xhost permissions.\n  Access to display ${1:-} is allowed for everyone.\"\n    return 1\n  }\n  return 0\n}\nsetup_xcnetwork() {             # --xoverip --xc: start internal network between X container and command container\n  local Internal\n  [ \"$Backend\" = \"$Xcontainerbackend\" ] && [ \"$Xcrootless\" = \"$Backendrootless\" ] || return 1\n  case \"${1:-}\" in\n    \"\")\n      [ \"$Xcontainer\" = \"yes\" ] && [ \"$Hostxoverip\" = \"no\" ] && {\n        case \"$Xoverip\" in\n          yes|listentcp|socat)\n            case \"$Network\" in\n              none) Internal=\"--internal\" ;;\n              \"\"|bridge) Internal=\"\";;\n              *) return 1 ;; ### FIXME\n            esac\n            Xcnetworkid=\"$(unpriv_backend \"$Backendbin network create $Internal $Xcnetworkname\")\" 2>>$Xinitlogfile || return 1\n            debugnote \"setup_xcnetwork(): Creating $Xcnetworkname $Xcnetworkid\"\n          ;;\n        esac\n      }\n    ;;\n    remove)\n      [ -n \"$Xcnetworkid\" ] && {\n        debugnote \"setup_xcnetwork(): Removing $Xcnetworkname $Xcnetworkid\"\n        unpriv_backend \"$Backendbin network remove $Xcnetworkid\" >>$Xinitlogfile 2>&1 || return 1\n      }\n    ;;\n  esac\n  return 0\n}\nstore_newxenv() {               # store display variables\n  Newdisplay=\"${Newdisplay//\"XCONTAINERIP\"/\"$Xcontainerip\"}\"\n  # create $Newxenv: collection of environment variables to access new X from host (e.g. in xinitrc)\n  [ \"$Newdisplay\" ]              && storeinfo \"DISPLAY=$Newdisplay\"                && Newxenv=\"$Newxenv\nDISPLAY=$Newdisplay\"\n  [ \"$Xauthentication\" != \"no\" ] && storeinfo \"XAUTHORITY=$Xclientcookie\"          && Newxenv=\"$Newxenv\nXAUTHORITY=$Xclientcookie\"\n  [ \"$Newxsocket\" ]              && storeinfo \"XSOCKET=$Newxsocket\"                && Newxenv=\"$Newxenv\nXSOCKET=$Newxsocket\"\n  [ \"$Newwaylandsocket\" ]        && storeinfo \"WAYLAND_DISPLAY=$Newwaylandsocket\"  && Newxenv=\"$Newxenv\nWAYLAND_DISPLAY=$Newwaylandsocket\"\n  [ \"$Setupwayland\" = \"yes\" ] && for Line in $Waylandtoolkitenv ; do                  Newxenv=\"$Newxenv\n$Line\" ; done\n  [ -n \"$XDG_RUNTIME_DIR\" ] && storeinfo \"XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR\"        && Newxenv=\"$Newxenv\nXDG_RUNTIME_DIR=$XDG_RUNTIME_DIR\"\n  Newxenv_cr=\"$(grep . <<< \"$Newxenv\")\"\n  Newxenv=\"$(echo $Newxenv)\"\n  storeinfo \"Xenv=$Newxenv\"\n\n  # X / Wayland environment variables for container\n  case \"$Xserver\" in\n    --xpra*|--xephyr|--weston-xwayland|--hostdisplay|--xorg|--xvfb|--xwayland|--kwin-xwayland|--nxagent|--xwin|--runx)\n      store_runoption env \"DISPLAY=$Newdisplay\"\n      [ \"$Xauthentication\" != \"no\" ] && store_runoption env \"XAUTHORITY=$(convertpath share \"$Xclientcookie\")\"\n    ;;\n    --weston|--kwin|--hostwayland|--tty)\n      store_runoption env \"WAYLAND_DISPLAY=$Newwaylandsocket\"\n    ;;\n  esac\n  [ \"$Setupwayland\" = \"yes\" ] && {\n    for Line in $Waylandtoolkitenv; do\n      store_runoption env \"$Line\"\n    done\n  }\n  return 0\n}\nxtool() {                       # run X tool command in X container if available, otherwise on host\n  local Tool Toolinfo Usexcontainer Check= Nocheck= Message\n\n  Message=\"note\"\n  case \"${1:-}\" in\n    --check)\n      Check=\"yes\"\n      shift\n    ;;\n    --nocheck)\n      Check=\"no\"\n      Message=\":\"\n      shift\n    ;;\n  esac\n  case \"${1:-}\" in\n    note|debugnote|verbose|warning|error)\n      Message=\"${1:-}\"\n      shift\n    ;;\n    --quiet)\n      Message=\":\"\n      shift\n    ;;\n  esac\n\n  # extract tool from \"env a=b tool args\"\n  Tool=\"$(sed 's/\\S*\\(=\\|env \\)\\S*//g ; s/^ *//' <<< \"${1:-}\" | cut -d' ' -f1)\"\n\n  case \"$Tool\" in\n    cvt)       Toolinfo=\"x11docker uses cvt to create a set of screen resolutions\n  that can be seen and set by tools like xrandr.\" ;;\n    setxkbmap|xkbcomp) Toolinfo=\"x11docker uses setxkbmap and xkbcomp to set the keyboard\n  in new X server to same as on host or specified with --keymap.\" ;;\n    socat)     Toolinfo=\"socat allows to set up TCP access to X unix sockets.\" ;;\n    vainfo)    Toolinfo=\"vainfo helps to configure VAAPI video decoding support.\" ;;\n    wl-copy|wl-paste) Toolinfo=\"x11docker uses wl-copy and wl-paste for Wayland clipboard support.\" ;;\n    wmctrl)    Toolinfo=\"x11docker uses wmctrl to configure window managers\n  to provide one virtual desktop only.\" ;;\n    xauth)     Toolinfo=\"xauth creates and adjusts X authentication cookies.\" ;;\n    xbindkeys) Toolinfo=\"xbindkeys intercepts SUPER+v or ALT+v for option --clipboard.\" ;;\n    xclip)     Toolinfo=\"xclip is needed for option --clipboard.\" ;;\n    xdpyinfo)  Toolinfo=\"xdpyinfo provides some information about the host X server.\n  It tells x11docker about dpi and installed extensions like MIT-SHM.\" ;;\n    xdotool)   Toolinfo=\"x11docker uses xdotool to hide the weston window\n  that is used in background for --xpra-xwayland.\" ;;\n    xfishtank) Toolinfo=\"xfishtank shows a fish tank with --xfishtank.\" ;;\n    xhost)     Toolinfo=\"xhost controls network access to X. x11docker uses it to disable\n  undesired network access, or to allow some with option --xhost=ARG.\" ;;\n    xinit)     Toolinfo=\"xinit serves to properly start and stop most X servers.\" ;;\n    xrandr)    Toolinfo=\"xrandr allows to check or set the screen size (option --size).\n  with --xorg it also helps at options --rotate and --scale.\" ;;\n    xwininfo)  Toolinfo=\"x11docker needs xwininfo for option --checkwindow\n  to get a list of currently open windows.\" ;;\n  esac\n\n  case \"$Xcontainer\" in\n    yes)\n      Usexcontainer=\"yes\"\n      echo \"$Xcontainertools\" | grep -w -q \"$Tool\" || {\n        $Message \"Option --xc: Please update image x11docker/xserver.\n  Did not find command '$Tool' in image. Will try to run '$Tool' on host\"\n        Usexcontainer=\"no\"\n      }\n    ;;\n    no)\n      Usexcontainer=\"no\"\n    ;;\n  esac\n  [ \"$Check\" = \"no\" ] && Usexcontainer=\"${Usexcontainer:-yes}\"\n  Usexcontainer=\"${Usexcontainer:-no}\" # in case xinitrc already runs in X container.\n  verbose \"xtool(): (use xc $Usexcontainer): ${1:-}\"\n  case \"$Usexcontainer\" in\n    no)\n      command -v \"$Tool\" >/dev/null || {\n        $Message \"xtool(): Command '$Tool' not found on host. Please install $Tool.\n  $Toolinfo\n  $Wikipackagesimage\"\n        return 1\n      }\n    ;;\n  esac\n\n  [ \"$Check\" = \"yes\" ] && return 0\n\n  case \"$Usexcontainer\" in\n    yes)\n      unpriv_xcbackend \"$Xcontainerbackend exec $Xcontainername ${1:-}\"\n    ;;\n    no)\n      unpriv \"${1:-}\"\n    ;;\n  esac\n\n  return $?\n}\n\n#### backend command setup\ncheck_backend() {               # options --backend, --rootless\n  local Checkrootfs=\n\n  case \"$Mobyvm\" in\n    no)\n      Backendbin=\"$(command -v \"$Backend\")\"\n    ;;\n    yes)\n      case \"$Backend\" in\n        docker|host) ;;\n        *) \n          error \"Option --backend=$Backend is not supported on MS Windows yet.\n  If you need this, ask for support at https://github.com/mviereck/x11docker\"\n          return 1\n        ;;\n      esac\n      Backendbin=\"docker.exe\"\n      command -v \"$Backendbin\" >/dev/null || {\n        PATH=\"${PATH:-}:$(convertpath subsystem \"C:/Program Files/docker\"):$(convertpath subsystem \"C:/Program Files/Docker/Docker/resources/bin\")\"\n        export PATH\n      }\n    ;;\n  esac\n\n  case \"$Backend\" in\n    docker|podman|nerdctl|proot)\n      case \"$Installermode\" in\n        \"\") \n          [ -z \"$Backendbin\" ] && error \"Option --backend=$Backend: No binary found for $Backend.\"\n        ;;\n        *)\n          [ -z \"$Backendbin\" ] && note \"Option --backend=$Backend: No binary found for $Backend.\"\n          return 1\n        ;;\n      esac\n    ;;\n    host) Backendbin=\"\" ;;\n  esac\n\n  case \"$Backend\" in\n    docker|podman|nerdctl)\n      if [ -n \"$Jqbin\" ]; then\n        debugnote \"check_backend(): will parse json using $Jqbin\"\n      elif [ -n \"$Pythonbin\" ]; then\n        debugnote \"check_backend(): will parse json using $Pythonbin\"\n      else\n        error \"x11docker needs 'jq' or 'python' to parse output of '$Backend inspect'.\n  Please install 'jq' or 'python' version 2.x or 3.x.\"\n      fi\n    ;;\n  esac\n\n  # rootful or rootless\n  [ \"$Backendrootless\" = \"no\" ] && export DOCKER_HOST=\n  [ -z \"$Backendrootless\" ] && case \"$Backend\" in\n    docker) \n      id -G -n | grep -q -w 'docker'              && Backendrootless=\"no\"\n      grep -q \"/run/user/\" <<< \"${DOCKER_HOST:-}\" && Backendrootless=\"yes\"\n      [ \"$(id -un)\" = \"root\" ]                    && Backendrootless=\"no\"\n    ;;\n    podman|nerdctl)\n      [ \"$(id -u)\" = \"0\" ] && Backendrootless=\"no\" || Backendrootless=\"yes\" ;;\n    proot) ;;\n    host) ;;\n  esac\n  case \"$Backendrootless\" in\n    yes)\n      case \"$Backend\" in\n        docker)\n          DOCKER_HOST=\"${DOCKER_HOST:-/run/user/$Hostuseruid/docker.sock}\"\n          DOCKER_HOST=\"${DOCKER_HOST#unix://}\"\n          [ -e \"${DOCKER_HOST:-}\" ] || error \"Option --rootless --backend=docker: docker user socket not found.\n  Docker user daemon not running? Try to start it with:\n    systemctl --user start docker\"\n          DOCKER_HOST=\"unix://$DOCKER_HOST\"\n          export DOCKER_HOST\n        ;;\n      esac\n    ;;\n    no)\n      case \"$Backend\" in\n        docker)\n          [ \"$(id -un)\" = \"root\" ] || id -G -n | grep -q -w 'docker' || error \"Option --rootless=no: Please run x11docker as root\n  to allow rootful $Backend.\"\n        ;;\n        podman|nerdctl)\n          [ \"$(id -un)\" != \"root\" ] && error \"Option --rootless=no: Please run x11docker as root\n  to allow rootful $Backend.\"\n        ;;\n      esac\n    ;;\n  esac\n\n\n  case \"$Backend\" in\n    docker|podman|nerdctl)\n      # Check whether docker daemon is running, get backend info\n      Backendinfo=\"$(unpriv_backend \"env LC_ALL=C $Backendbin info --format='{{json .}}'\" 2>&1)\"\n      [ \"$?\" != \"0\" ] || grep -q \"permission denied\" <<< \"$Backendinfo\" || [ -z \"$Backendinfo\" ] && error \"Option --backend=$Backend: Error executing $Backend.\n  If using docker: Is docker daemon running at all?\n  Maybe you need root privileges to run docker?\n  Try to start docker daemon with 'systemctl start docker'.\n  Try to run x11docker as root.\n  Output of '$Backendbin info':\n  $Backendinfo\"\n      check_runtime\n    ;;\n  esac\n\n  # check image name\n  case \"$Backend\" in\n    docker|podman|nerdctl|proot)\n      [ \"${Imagename:0:1}\" = \"/\" ] && {\n        Rootfs=\"$Imagename\"\n        Imagename=\"$(basename \"$Rootfs\")\"\n      }\n      [ \"$Podmanrootfs\" = \"yes\" ] && Checkrootfs=\"yes\"\n      Imagebasename=\"$(echo \"$Imagename\" | tr / - | cut -d: -f1)\"\n      Codename=\"${Codename:-\"$Imagename $Containercommand\"}\"\n      verbose \"Image name: $Imagename\n  Container command: $Containercommand\"\n    ;;\n    host)\n      Containercommand=\"$Imagename $Containercommand\"\n      [ \"$Customdockeroptions\" ] && error \"Option --backend=$Backend does not take CUSTOM_RUN_OPTIONS.\n  If your command args contain ' -- ', run like\n  x11docker --backend=$Backend [OPTIONS] -- -- COMMAND -- ARGS\"\n      Imagename=\"\"\n      Imagebasename=\"$(basename \"$Containercommand\" | cut -d' ' -f1)\"\n      Codename=\"${Codename:-\"$Imagebasename\"}\"\n    ;;\n  esac\n  Codename=\"$(unspecialstring \"$Codename\" | cut -c1-40)\"\n  Codename=\"${Codename:-noname}\"\n  Imagebasename=\"$(unspecialstring \"$Imagebasename\")\"  # must be - for backwards compatibility of --home\n  Imagebasename=\"${Imagebasename:-noname}\"\n\n  case \"$Backend\" in\n    docker) ;;\n    podman)\n      # /proc/sys/kernel/unprivileged_userns_clone might exist on debian only.\n      # https://github.com/mviereck/x11docker/issues/255#issuecomment-758014962\n      [ \"$(cat /proc/sys/kernel/unprivileged_userns_clone 2>/dev/null)\" = \"0\" ] && error \"Option --backend=podman: Linux kernel disallows\n  unprivileged user namespace setup. Please run as root:\n    sysctl -w kernel.unprivileged_userns_clone=1\"\n      store_runoption cap \"CHOWN\"\n    ;;\n    nerdctl)\n      note \"Option --backend=nerdctl: Support of nerdctl is experimental yet.\n  In production rather use docker or podman for now.\"\n      Switchcontaineruser=\"yes\"\n      [ \"$Capdropall\" = \"yes\" ] && note \"Option --backend=nerdctl: If you encounter issues,\n  please try with option --cap-default to remove some container restrictions.\"\n    ;;\n    proot)\n      warning \"Option --backend=$Backend: Your host system is NOT PROTECTED.\n  There is close to no isolation like a real container could provide.\n  Effectively applications in proot have the same privileges as if\n  they would have been installed and started directly on the host system.\"\n      check_optionset \"--backend=$Backend\" \"--cap-default --hostipc --ipc --limit --network --newprivileges --no-setup --runtime --sharecgroup --user\" ||:\n      check_optionset \"--backend=$Backend\" \"--user\" || error \"Option --backend=$Backend: Option --user is not allowed.\n  Please try option --hostuser instead.\"\n      Checkrootfs=\"yes\"\n      # set defaults. Some might look misleading just to avoid later messages, but not affecting the setup.\n      Network=\"host\"\n      Shareipc=\"host\"\n      Createcontaineruser=\"yes\"\n      Containersetup=\"yes\"\n      Capdropall=\"yes\"\n      Allownewprivileges=\"no\"\n      Runtime=\"\"\n      Sharecgroup=\"no\"\n      Limitresources=\"\"\n      # needed\n      Switchcontaineruser=\"yes\"\n\n      [ \"$Sudouser\" ] && note \"Option --backend=$Backend --sudouser: sudo fails in $Backend.\n  Workaround: starting with user root.\n  You can switch to user $Containeruser with 'su $Containeruser'.\n  Note that root in $Backend is a fake and does not have real root privileges.\"\n    ;;\n    host)\n      warning \"Option --backend=host provides no isolation at all.\n  It only provides an X server for a host application.\"\n      storeinfo \"containerrootrc=ready\"\n      Sharefoldercontainer=\"$Sharefolder\"\n      # --dbus, --hostdbus, --init\n      check_optionset \"--backend=$Backend\" \"--alsa --cap-default --group-add --hostipc --ipc --limit --home --name --network --newprivileges --no-entrypoint --no-setup \\\n                       --printer --pulseaudio --runasroot --runtime --share --sharecgroup --sudouser --webcam\" ||:\n      check_optionset \"--backend=$Backend\" \"--user\" || error \"Option --backend=$Backend: Option --user is not allowed.\n  Please try option --hostuser instead.\"\n      # set defaults. Some might look misleading just to avoid later messages, but not affecting the setup.\n      Sharealsa=\"no\"\n      Capdropall=\"yes\"\n      Shareipc=\"host\"\n      [ \"$Langwunsch\" ] && store_runoption env \"LANG=$Langwunsch\"\n      Limitresources=\"\"\n      Network=\"host\"\n      Allownewprivileges=\"no\"\n      Noentrypoint=\"\"\n      Containersetup=\"yes\"\n      Sharecupsmode=\"\"\n      Pulseaudiomode=\"\"\n      Runasroot=\"\"\n      Runtime=\"\"\n      Sharevolumes=\"\"\n      Sharecgroup=\"no\"\n      Sudouser=\"\"\n      Sharewebcam=\"\"\n    ;;\n  esac\n\n  [ \"$Checkrootfs\" = \"yes\" ] && {\n    case \"$Backend\" in\n      proot) ;;\n      podman)\n        note \"Option --backend=podman with --rootfs is experimental yet.\"\n        [ \"$Containersetup\" = \"yes\" ] && Switchcontaineruser=\"yes\"\n      ;;\n      *)\n        error \"Option --rootfs is supported by backends proot and podman only.\"\n      ;;\n    esac\n    [ -z \"$Rootfs\" ] && [ -d \"$Hosthomebasefolder/ROOTFS/$Imagebasename\" ] && Rootfs=\"$Hosthomebasefolder/ROOTFS/$Imagebasename\"\n    [ -z \"$Rootfs\" ] && error \"Option --backend=$Backend: Did not find a rootfs for $Imagename\n  in $Hosthomebasefolder/ROOTFS/$Imagebasename\"\n    [ -z \"$Containercommand\" ] && [ -e \"$Rootfs/start\" ] && Containercommand=\"/bin/sh /start\"\n    [ -z \"$Containercommand\" ] && {\n      [ -e \"$Rootfs/bin/bash\" ]                          && Containercommand=\"/bin/bash\" || Containercommand=\"/bin/sh\"\n      [ \"$Containerusershell\" != \"auto\" ]                && Containercommand=\"$Containerusershell\"\n      note \"Option --backend=$Backend: No command specified.\nFallback: using command '$Containercommand' and enabling option --interactive.\"\n      check_fallback\n      Interactive=\"yes\"\n    }\n  }\n\n  debugnote \"Backend: $Backend, Backendbin: $Backendbin, Rootless: $Backendrootless\"\n  return 0\n}\ncheck_image() {                 # get some image information\n\n  # Check if image $Imagename is available locally\n  Imageinspect=\"$(unpriv_backend \"$Backendbin inspect $Imagename\" 2>> $Containerlogfile)\" || {\n    error \"Image $Imagename not found locally.\n  Please pull or build image first. (Backend $Backend, rootless $Backendrootless)\"\n    return 1\n  }\n\n  # Check architecture\n  Imagearchitecture=$(parse_inspect \"$Imageinspect\" \"Architecture\")\n  debugnote \"Image architecture: $Imagearchitecture\"\n\n  # Check CMD\n  Imagecommand=\"$(parse_inspect \"$Imageinspect\" \"Config\" \"Cmd\")\"\n  debugnote \"Image CMD: $Imagecommand\"\n  [ -z \"$Containercommand\" ] && {\n    Containercommand=\"$Imagecommand\"\n    grep -q \"$(convertpath share \"$Containerrc\")\" <<< \"$Imagecommand\" && error \"Recursion error: Found CMD $Imagecommand in image.\n  Did you use 'docker commit' with an x11docker container?\n  Please build new images with a Dockerfile instead of using docker commit,\n  or provide a different container command in x11docker command.\"\n  }\n\n  # Check USER\n  Imageuser=\"$(parse_inspect \"$Imageinspect\" \"Config\" \"User\")\"\n  debugnote \"Image USER: $Imageuser\"\n  case \"$Createcontaineruser\" in\n    yes)\n      [ \"$Imageuser\" ] && note \"Found 'USER $Imageuser' in image.\n  If you want to run with user $Imageuser instead of host user $Containeruser,\n  than run with option --user=RETAIN.\"\n    ;;\n    no)\n      Containeruser=\"${Imageuser:-root}\"\n    ;;\n  esac\n  storeinfo \"containeruser=$Containeruser\"\n\n  # Check ENTRYPOINT\n  Imageentrypoint=\"$(parse_inspect \"$Imageinspect\" \"Config\" \"Entrypoint\")\"\n  debugnote \"Image ENTRYPOINT: $Imageentrypoint\"\n  case \"$Noentrypoint\" in\n    yes) Containerentrypoint=\"\" ;;\n    no)\n      Containerentrypoint=\"$Imageentrypoint\"\n      case \"$Initsystem\" in\n        systemd|sysvinit|runit|openrc|tini)\n          grep -qE 'tini|init|systemd' <<< \"$Containerentrypoint\" && {\n            note \"There seems to be an init system in ENTRYPOINT of image:\n    $Containerentrypoint\n  Will disable it as x11docker already runs an init with option --$Initsystem.\n  To allow this ENTRYPOINT, run x11docker with option --init=none.\"\n            Containerentrypoint=\"\"\n          }\n        ;;\n        s6-overlay)\n          [ \"$Containerentrypoint\" = '/init' ] && {\n            Containerentrypoint=\"\"\n            [ \"$Containercommand\" ] || Containercommand=\"sh -c 'while :; do sleep 10; done'\"\n          }\n        ;;\n        none)\n          grep -qE 'tini|init|systemd' <<< \"$Containerentrypoint\" && {\n            note \"There seems to be an init system in ENTRYPOINT of image:\n  $Containerentrypoint\n  Returning correct exit code of container command will likely fail.\"\n          }\n        ;;\n      esac\n    ;;\n  esac\n\n  # Check WORKDIR\n  Imageworkdir=\"$(parse_inspect \"$Imageinspect\" \"Config\" \"Workdir\")\"\n  # It seems Config.Workdir is Config.WorkingDir in more recent versions?\n  [ -z \"$Imageworkdir\" ] && {\n    Imageworkdir=\"$(parse_inspect \"$Imageinspect\" \"Config\" \"WorkingDir\")\"\n  }\n  debugnote \"Image WORKDIR: $Imageworkdir\"\n  [ -z \"$Workdir\" ] && [ -n \"$Imageworkdir\" ] && {\n    note \"Found 'WORKDIR $Imageworkdir' in image.\n  You can change it with option --workdir=DIR.\"\n    Workdir=\"$Imageworkdir\"\n  }\n\n  [ -z \"$Containercommand$Containerentrypoint\" ] && error 'No container command specified and no CMD or ENTRYPOINT found in image.'\n\n  return 0\n}\ncheck_runtime() {               # option --runtime\n  local Defaultruntime\n\n  case \"$Backend\" in\n    docker)  Defaultruntime=\"$(parse_inspect \"$Backendinfo\" \"DefaultRuntime\" | tr -d '\"')\" ;;\n    podman)  Defaultruntime=\"$(parse_inspect \"$Backendinfo\" \"host\"  \"ociRuntime\" \"name\" | tr -d '\"')\" ;;\n    nerdctl) Defaultruntime=\"\" ;;\n  esac\n  debugnote \"Default runtime: $Defaultruntime\"\n  [ -z \"$Runtime\" ]        && Runtime=\"$Defaultruntime\"\n\n  case \"$Runtime\" in\n    \"\"|runc|crun|oci|nvidia|kata-runtime) ;;\n    sysbox-runc)\n      store_runoption env \"SYSBOX_HONOR_CAPS=TRUE\"\n      check_optionset \"--runtime=sysbox-runc\" \"--alsa --webcam\" ||:\n      verlt \"$(uname -r)\" \"5.12\" && error \"Option --runtime=sysbox-runc needs at least\n  Linux kernel version >=5.12\"\n      verlt \"$(sysbox-runc -v | grep version | tr -d ' \\t'| cut -d: -f2)\" \"0.5\" && error \"Option --runtime=sysbox-runc needs at least\n  Sysbox version >=0.5.0\"\n    ;;\n    *)\n      note \"Option --runtime: x11docker does not know runtime: '$Runtime'\n  Will try to use it anyway.\n  If that fails, you can try options --snap or --no-setup.\"\n    ;;\n  esac\n\n  return 0\n}\ncheck_smallinit() {                  # find container init binary on host\n  [ \"$Xcontainer\" = \"yes\" ] && grep -q \"catatonit\" <<< \"$Xcontainertools\" && Initbinaryfile=\"$Sharefolder/catatonit\" && return 0\n  [ -x \"$Initbinaryfile\" ]                                      || Initbinaryfile=\"$(command -v catatonit ||:)\"\n  [ -x \"$Initbinaryfile\" ]                                      || Initbinaryfile=\"/usr/libexec/catatonit/catatonit\"\n  [ -x \"$Initbinaryfile\" ]                                      || Initbinaryfile=\"$(command -v docker-init ||:)\"\n  [ -x \"$Initbinaryfile\" ]                                      || Initbinaryfile=\"/usr/local/share/x11docker/tini-static\"\n  [ -x \"$Initbinaryfile\" ]                                      || Initbinaryfile=\"/usr/bin/tini-static\"\n  [ -x \"$Initbinaryfile\" ]                                      || Initbinaryfile=\"$Localsharedir/tini-static\"\n  [ -x \"$Initbinaryfile\" ]                                      || Initbinaryfile=\"/snap/docker/current/bin/docker-init\"\n  [ -x \"$Initbinaryfile\" ]                                      || Initbinaryfile=\"/snap/docker/current/usr/bin/docker-init\"\n  Initbinaryfile=\"$(myrealpath \"$Initbinaryfile\" 2>/dev/null ||:)\"\n  [ -x \"$Initbinaryfile\" ]                                      || Initbinaryfile=\"\"\n  [ -z \"$Initbinaryfile\" ] && {\n    note \"Option --init=$Initsystem: Did not find a tini container init system.\n  Please install catatonit or tini-static.\n  $Wikipackagesimage\"\n    return 1\n  }\n  return 0\n}\ncheck_cgroup() {                # check [and create] cgroup mountpoint for systemd or elogind\n  local Remounted Needcgroup\n\n  [ \"$Initsystem\" = \"systemd\" ] && Needcgroup=\"systemd\" || Needcgroup=\"elogind\"\n\n  [ \"$Backend\" = \"docker\" ] && {\n    case \"$Cgroupversion\" in\n      v1) \n        Sharecgroup=\"yes\"\n      ;;\n      v2)\n        case \"$Initsystem\" in\n          systemd)\n            case \"$Runtime\" in\n              sysbox-runc) ;;\n              *)\n                Remountcgroup=\"yes\"\n                warning \"Option --init=systemd: To support systemd in docker container\n  with cgroupv2 on host, x11docker shortly runs a privileged container\n  of '$Imagename' with 'nsenter' to remount the container's /sys/fs/cgroup.\n  Evil images might be set up to abuse these privileges.\"\n              ;;\n            esac\n          ;;\n        esac\n      ;;\n    esac\n    case \"$Initsystem\" in\n      sysvinit|openrc|runit)\n        Sharecgroup=\"yes\"\n      ;;\n    esac\n  }\n\n  [ \"$Sharecgroup\" = \"yes\" ] && warning \"Option --init=$Initsystem: Sharing /sys/fs/cgroup from host.\"\n\n  findmnt \"/sys/fs/cgroup/$Needcgroup\" >/dev/null && return 0\n\n  case \"$Initsystem\" in\n    systemd)\n      case \"$Cgroupversion\" in\n        v1) \n          [ \"$Startuser\" != \"root\" ] && note \"Option --init=$Initsystem: Did not find /sys/fs/cgroup/$Needcgroup\n  Startup of container is likely to fail.\"\n        ;;\n        v2)\n          Needcgroup=\"\"\n        ;;\n      esac\n    ;;\n    *)\n      note \"Option --init=$Initsystem: Did not find /sys/fs/cgroup/$Needcgroup\n  A possible elogind service in container is likely to fail.\"\n    ;;\n  esac\n  \n  [ -z \"$Needcgroup\" ] && return 0\n\n  [ \"$Startuser\" != \"root\" ] && {\n    note \"Option --init=$Initsystem: To create and mount a cgroup\n  for $Needcgroup, please run x11docker as root.\n  Or create cgroup mountpoint on host yourself with:\n    mount -o remount,rw cgroup /sys/fs/cgroup\n    mkdir -p /sys/fs/cgroup/$Needcgroup\n    mount -t cgroup cgroup /sys/fs/cgroup/$Needcgroup -o none,name=$Needcgroup\"\n    return 1\n  }\n\n  [ \"$Sharecgroup\" = \"yes\" ] && [ \"$Startuser\" = \"root\" ] && {\n    note \"Option --init=$Initsystem: Creating cgroup mountpoint on host for '$Needcgroup'.\"\n    findmnt /sys/fs/cgroup -O ro >/dev/null && {\n      mount -o remount,rw cgroup /sys/fs/cgroup >> \"$Containerlogfile\" 2>&1\n      Remounted=yes\n    }\n    mkdir -p /sys/fs/cgroup/$Needcgroup >> \"$Containerlogfile\" 2>&1\n    mount -t cgroup cgroup /sys/fs/cgroup/$Needcgroup -o none,name=$Needcgroup  >> \"$Containerlogfile\" 2>&1\n    [ \"${Remounted:-}\" = \"yes\" ] && {\n      mount -o remount,ro cgroup /sys/fs/cgroup  >> \"$Containerlogfile\" 2>&1\n    }\n  }\n  \n  return 0\n}\ncheck_containerhomebasedir() {  # options --homebasedir, --home\n  ## option '--homebasedir': Specify base folder here to store container home folders for --home\n  case \"$Backend\" in\n    proot)\n      Hosthomebasefolder=\"$Localsharedir\"\n    ;;\n    docker|podman|nerdctl)\n      [ \"$Hosthomebasefolder\" ] || case \"$Mobyvm\" in\n        no)  Hosthomebasefolder=\"$Containeruserhosthome/.local/share/x11docker\" ;;\n        yes) Hosthomebasefolder=\"$(convertpath subsystem \"$(wincmd 'echo %userprofile%') \")/x11docker/home\" ;;\n      esac\n    ;;\n  esac\n}\ncheck_containerhome() {         # option --home: check HOME of container user.\n  ## option '--home':        Share folder ~/.local/share/x11docker/imagename with created container as its home directory\n  ## option '--home=DIR':    Share custom host folder as home\n\n  # rootless with userns-remap\n  [ \"$Backendrootless\" = \"yes\" ] && {\n    case \"$Backend\" in\n      docker|nerdctl)\n        [ \"$Sharehome\" != \"no\" ] && {\n          note \"Option --home is not supported in $Backend rootless mode.\n  In rootless mode only option --backend=podman supports option --home.\n  Alternatively run one of docker, podman or nerdctl in rootful mode.\n  Fallback: Disabling option --home\"\n          check_fallback\n          Sharehome=\"no\"\n        }\n      ;;\n    esac\n  }\n\n  case \"$Sharehome\" in\n    yes|host)\n      [ -z \"$Persistanthomevolume\" ] && Persistanthomevolume=\"$Hosthomebasefolder/$Imagebasename\"\n      Persistanthomevolume=\"${Persistanthomevolume//\"~\"/\"$Hostuserhome\"}\"\n      [ \"${Persistanthomevolume:0:1}\" = \"/\" ] && Sharehome=\"host\" || Sharehome=\"volume\"\n    ;;\n  esac\n\n  case \"$Sharehome\" in\n    host)\n      case \"$Createcontaineruser\" in\n        no)\n          note \"Option --home or --home=DIR is not supported\n  with option --user=RETAIN.\n  Alternatively, specify a docker volume with --home=VOLUME.\n  Also you can use option --share to share host directories.\n  Fallback: Disabling option --home.\"\n          check_fallback\n          Sharehome=\"no\"\n        ;;\n        yes)\n          grep -q \"unknown\" <<< \"$Containeruser\" && {\n            note \"Option --home: Sharing a host folder is allowed only\n  for container users that also exist on host.\n  You can use a docker volume with --home=VOLUME instead.\n  Fallback: Disabling option --home.\"\n            check_fallback\n            Sharehome=\"no\"\n          }\n        ;;\n      esac\n    ;;\n  esac\n\n  case \"$Sharehome\" in\n    host)\n      Containeruserhomebasefolder=\"/home\"\n      [ \"$Containeruser\" = \"root\" ] && Containeruserhomebasefolder=\"/\"\n      # A change can break existing configs, e.g. playonlinux\n#      Containeruserhomebasefolder=\"/home.x11docker\"\n      [ \"$Persistanthomevolume\" = \"$Containeruserhosthome\" ] && {\n        # --home=$HOME must be same as on host #243\n        Containeruserhomebasefolder=\"$(dirname \"$Containeruserhosthome\")\"\n        Containeruserhome=\"$Containeruserhosthome\"\n      }\n    ;;\n    no)\n#      Containeruserhomebasefolder=\"/home.tmp\"\n      Containeruserhomebasefolder=\"/home\"\n      [ \"$Containeruser\" = \"root\" ] && Containeruserhomebasefolder=\"/\"\n    ;;\n    volume)\n      Containeruserhomebasefolder=\"/home.volume/$Persistanthomevolume\"\n      grep -q \"/\" <<< \"$Persistanthomevolume\" && error \"Option --home: Invalid argument: '$Persistanthomevolume'\n  Please either specify an absolute path beginning with '/'\n  or specify a docker volume without any '/'.\"\n    ;;\n  esac\n  [ \"$Createcontaineruser\" = \"yes\" ] && Containeruserhome=\"${Containeruserhome:-$Containeruserhomebasefolder/$Containeruser}\"\n  [ \"$Sharehome\" != \"no\" ] && store_runoption env \"HOME=$Containeruserhome\"\n\n#  case \"$Createcontaineruser\" in\n#    no)  store_runoption env \"HOME=/tmp\" ;;\n#  esac\n\n  case \"$Sharehome\" in\n    host)\n      # if no home folder on host is specified (--home=DIR), create a standard one in ~/.local/share/x11docker\n      [ -d \"$Persistanthomevolume\" ] || {\n        #[ \"$Startuser\" = \"root\" ] && su \"$Containeruser\" -c \"mkdir -p '$Persistanthomevolume'\"\n        [ \"$Containeruser\" = \"$Hostuser\" ] && mkfolder \"$Persistanthomevolume\" && {\n          # create symbolic link to ~/x11docker\n          echo \"$Persistanthomevolume\" | grep -q .local/share/x11docker && [ ! -e \"$Hostuserhome/x11docker\" ] && unpriv \"ln -s '$Hosthomebasefolder' '$Hostuserhome/x11docker'\" ||:\n        }\n      }\n      [ -d \"$Persistanthomevolume\" ] || error \"Option --home: Could not create persistent home folder for\n  user '$Containeruser' on host. Can e.g. happen with option --user.\n  Four possibilities to solve issue:\n  1.) Run x11docker one time as user '$Containeruser'.\n  2.) Run x11docker one time as user 'root'.\n  3.) Use option --home=DIR with DIR pointing to a writeable folder.\n  4.) Use option --home=VOLUME to use a docker volume.\"\n      writeaccess \"$Containeruseruid\" \"$Persistanthomevolume\" || warning \"User '$Containeruser' might have no write access to\n  $Persistanthomevolume.\"\n      verbose \"Sharing directory $Persistanthomevolume\n  with container as its home directory $Containeruserhome\"\n    ;;\n    volume)\n      debugnote \"Option --home: Using docker volume $Persistanthomevolume\"\n    ;;\n  esac\n\n  return 0\n}\ncheck_containeruser() {         # check container user (also option --user)\n  ## check container user\n  [ \"$Containeruser\" = \"RETAIN\" ] && {\n    Createcontaineruser=\"no\"\n    Containeruser=\"\"\n    return 0\n  }\n\n  [ -z \"$Containeruser\" ] && Containeruser=\"$Hostuser\"               # default: containeruser = hostuser. can be changed with --user\n  [ -n \"$Containeruser\" ] && echo \"$Containeruser\" | grep -q ':' && {  # option --user can specify a group/gid after :\n    Containerusergid=\"$(echo \"$Containeruser\" | cut -d: -f2)\"\n    Containeruser=\"$(echo \"$Containeruser\" | cut -d: -f1)\"\n  }\n  [ \"$Containeruser\" = \"root\" ] && Containeruser=\"0\"\n  [ -n \"$(mygetent passwd \"$Containeruser\")\" ] && {                      # user exists on host\n    Containeruser=$(mygetent passwd \"$Containeruser\" | cut -d: -f1)      # can be name or uid -> now name\n    Containeruseruid=$(mygetent passwd \"$Containeruser\" | cut -d: -f3)\n    [ -z \"$Containerusergid\" ] && Containerusergid=\"$(mygetent passwd \"$Containeruser\" | cut -d: -f4)\"\n    [ \"$Containeruser\" = \"$Hostuser\" ] && Containeruserhosthome=\"$Hostuserhome\"\n    [ -z \"$Containeruserhosthome\" ]    && Containeruserhosthome=\"$(mygetent passwd \"$Containeruser\" | cut -d: -f6)\"\n    :\n  } || {                                                   # user does not exist on host\n    [[ \"$Containeruser\" =~ ^[0-9]+$ ]] || error \"Option --user: Unknown host user or invalid user number '$Containeruser'.\n  Non-host users can be specified with an UID only, not with a name.\"\n    Containeruseruid=\"$Containeruser\"\n    Containeruser=\"unknown$Containeruseruid\"\n    [ -z \"$Containerusergid\" ] && Containerusergid=100\n    Containeruserhosthome=\"\"\n  }\n\n  Containerusergroup=\"$(mygetent group \"$Containerusergid\" | cut -d: -f1 || echo group_\"$Containeruser\")\"\n  [ \"$Containeruseruid\" = \"0\" ] && {\n    Containeruser=\"root\"\n    Containerusergid=\"0\"\n    Containerusergroup=\"root\"\n    Containeruserhosthome=\"/root\"\n    [ \"$Sudouser\" = \"yes\" ] || [ \"$Capdropall\" = \"no\" ] || {\n      note \"Option --user=root: Please set option --sudouser or --cap-default\n  if you want root privileges for container user root.\"\n    }\n  }\n\n  [ -f \"$Passwordfile\" ] && {\n    verbose \"Found password file $Passwordfile\"\n    Containeruserpassword=\"$(cat \"$Passwordfile\")\"\n    case \"$(stat -c '%a' \"$Passwordfile\")\" in\n      600|400) ;;\n      *) warning \"File $Passwordfile\n  should be readable by current user only.\n  Please set access permissions to 600 or 400.\" ;;\n    esac\n  }\n  [ -z \"$Containeruserpassword\" ] && Containeruserpassword='$6$Mj$WtcqpZ7JFegW4.0Br1WM0NJcNSxVxUQXgVLxGEV5uD3ib3jWGvIM3FNg2Gcj8e//mI06yhgfZ79WoNHGVtaYw1' # password: x11docker\n\n  storeinfo containeruser=\"$Containeruser\"\n  store_runoption env \"USER=$Containeruser\"\n  debugnote \"container user: $Containeruser $Containeruseruid:$Containerusergid $Containeruserhosthome\"\n  Containerusergroups=\"$Containerusergroups $Containerusergroup\"\n\n  case \"$Backend\" in\n    docker|podman|nerdctl|proot)\n      case \"$Containersetup\" in\n        no)  store_runoption env \"XDG_RUNTIME_DIR=/tmp\" ;;\n      esac\n    ;;\n    host) ;;\n  esac\n  return 0\n}\ncreate_backendcommand() {       ### create command to run docker|podman|nerdctl ###\n  local Line= Memory Initcommand= Grouplist=\n\n  case \"$Backend\" in\n    docker|podman|nerdctl)\n      Backendcommand=\"$Backendbin run\"\n      unpriv_backend \"$Backendbin run --help\" 2>/dev/null | grep -q -- '--pull' && Backendcommand=\"$Backendcommand \\\\\n  --pull never\"\n    ;;\n    proot)\n      Backendcommand=\"proot \\\\\n  --rootfs='$Rootfs' \\\\\n  --bind=/etc/host.conf \\\\\n  --bind=/etc/nsswitch.conf \\\\\n  --bind=/etc/resolv.conf \\\\\n  --bind=/proc \\\\\n  --bind=/sys \\\\\n  --bind=/dev \\\\\n  --bind=/run/shm\"\n    ;;\n  esac\n\n  # --keepcache\n  case \"$Backend\" in\n    docker|podman)\n      [ \"$Preservecachefiles\" = \"no\" ] && Backendcommand=\"$Backendcommand \\\\\n  --rm\"\n    ;;\n  esac\n\n  # --sudouser\n  [ \"$Sudouser\" = \"yes\" ] && {\n    case \"$Backend\" in\n      proot)\n        Backendcommand=\"$Backendcommand \\\\\n  --root-id\"\n      ;;\n    esac\n  }\n\n  # --interactive\n  case \"$Interactive\" in\n    yes)\n      case \"$Backend\" in\n        docker|podman|nerdctl)\n          Backendcommand=\"$Backendcommand \\\\\n  --interactive \\\\\n  --tty\"\n        ;;\n      esac\n    ;;\n    no)\n      case \"$Backend\" in\n        docker|podman|nerdctl)\n          Backendcommand=\"$Backendcommand \\\\\n  --detach\"\n        ;;\n      esac\n      case \"$Backend\" in\n        docker|podman) Backendcommand=\"$Backendcommand \\\\\n  --tty\" ;;\n      esac\n    ;;\n  esac\n\n  # --name\n  [ -z \"$Containername\" ] && Containername=\"x11docker_X${Newdisplaynumber}_${Codename}_${Cachenumber}\"\n  case \"$Backend\" in\n    docker|podman|nerdctl)\n      Backendcommand=\"$Backendcommand \\\\\n  --name $Containername\"\n      storeinfo \"containername=$Containername\"\n    ;;\n  esac\n\n  # --limit\n  [ \"$Limitresources\" ] && {\n    case \"$Backend\" in\n      docker|podman|nerdctl)\n        Memory=\"$(awk \"BEGIN {print int($(LC_ALL=C free -b | grep \"Mem:\" | awk ' {print $4 + $6}') * $Limitresources)}\")\"\n        Backendcommand=\"$Backendcommand \\\\\n  --cpus=$(awk \"BEGIN {print $(nproc) * $Limitresources}\") \\\\\n  --memory=$Memory \\\\\n  --kernel-memory=$Memory\"\n      ;;\n    esac\n  }\n\n  # --user\n  case \"$Initsystem\" in\n    none|tini|dockerinit)\n      case \"$Switchcontaineruser\" in\n        no)\n          case \"$Backend\" in\n            docker|podman|nerdctl)\n              [ \"$Createcontaineruser\" = \"yes\" ] && Backendcommand=\"$Backendcommand \\\\\n  --user $Containeruseruid:$Containerusergid\"\n            ;;\n          esac\n        ;;\n        yes)\n          case \"$Backend\" in\n            docker|podman|nerdctl)\n              Backendcommand=\"$Backendcommand \\\\\n  --user 0:0\"\n            ;;\n          esac\n        ;;\n      esac\n    ;;\n    systemd|runit|openrc|sysvinit|s6-overlay)\n      # init systems switch later from root to user.\n      case \"$Backend\" in\n        docker|podman|nerdctl)\n          Backendcommand=\"$Backendcommand \\\\\n  --user root\"\n        ;;\n      esac\n    ;;\n  esac\n\n  # userns\n  [ \"$Createcontaineruser\" = \"yes\" ] && {\n    # Disable user namespacing to avoid file permission issues with --home or --share. Files need same UID/GID.\n    case \"$Backend\" in\n      podman)\n        [ \"$Backendrootless\" = \"yes\" ] && Backendcommand=\"$Backendcommand \\\\\n  --userns=keep-id\"\n      ;;\n      docker)\n        case \"$Runtime\" in\n          sysbox-runc)\n          ;;\n          *)\n            [ \"$Backendrootless\" = \"yes\" ] || Backendcommand=\"$Backendcommand \\\\\n  --userns=host\"  ### FIXME option deprecated?\n          ;;\n        esac\n      ;;\n    esac\n  }\n\n  # --group-add\n  [ \"$Switchcontaineruser\" = \"no\" ] && {\n    case \"$Backend\" in\n      docker|podman)\n        for Line in $Containerusergroups; do\n          mygetent group \"${Line:-nonsense}\" >/dev/null && Backendcommand=\"$Backendcommand \\\\\n  --group-add $(mygetent group \"$Line\" | cut -d: -f3)\"\n        done\n      ;;\n    esac\n  }\n\n  # --runtime\n  [ \"$Runtime\" ] && {\n    case \"$Backend\" in\n      docker|podman|nerdctl)\n        Backendcommand=\"$Backendcommand \\\\\n  --runtime='$Runtime'\"\n      ;;\n    esac\n  }\n\n  # --ipc\n  [ \"$Shareipc\" != \"no\" ] && {\n    case \"$Backend\" in\n      docker|podman|nerdctl)\n        Backendcommand=\"$Backendcommand \\\\\n  --ipc $Shareipc\"\n      ;;\n    esac\n  }\n\n  # --network\n  case \"$Backend\" in\n    docker|podman|nerdctl)\n      case \"$Xcnetworkid\" in\n        \"\")\n          [ -n \"$Network\" ] && Backendcommand=\"$Backendcommand \\\\\n  --network $Network\"\n        ;;\n        *)\n          Backendcommand=\"$Backendcommand \\\\\n  --network=$Xcnetworkname\"\n        ;;\n      esac\n    ;;\n  esac\n\n  # capabilities\n  case \"$Backend\" in\n    docker|podman|nerdctl)\n      [ \"$Capdropall\" = \"yes\" ] && Backendcommand=\"$Backendcommand \\\\\n  --cap-drop ALL\"\n      while read Line ; do\n        Backendcommand=\"$Backendcommand \\\\\n  --cap-add $Line\"\n      done < <(store_runoption dump cap)\n    ;;\n  esac\n\n  # --newprivileges\n  case \"$Backend\" in\n    docker|podman|nerdctl)\n      [ \"$Allownewprivileges\" = \"no\" ] && Backendcommand=\"$Backendcommand \\\\\n  --security-opt no-new-privileges\"\n    ;;\n  esac\n\n  # SELinux restrictions for containers must be disabled to allow access to X socket. Flags z or Z do not help. ### FIXME check for possible change meanwhile\n  case \"$Backend\" in\n    docker|podman)\n      Backendcommand=\"$Backendcommand \\\\\n  --security-opt label=type:container_runtime_t\"\n    ;;\n  esac\n\n  # --init\n  case \"$Initsystem\" in\n    dockerinit)\n      case \"$Backend\" in\n        docker|podman|nerdctl)\n          Backendcommand=\"$Backendcommand \\\\\n  --init\"\n        ;;\n      esac\n    ;;\n    tini)\n      Initcommand=\"$Initcontainerpath -g --\"\n      case \"$Backend\" in\n        docker|podman|nerdctl)\n          Backendcommand=\"$Backendcommand \\\\\n  --mount $(convertpath mount \"$Initbinaryfile:ro\" \"$Initcontainerpath\")\"\n        ;;\n        proot)\n          Backendcommand=\"$Backendcommand \\\\\n  --bind=$Initbinaryfile:$Initcontainerpath\"\n        ;;\n      esac\n    ;;\n    systemd)\n      Backendcommand=\"$Backendcommand \\\\\n  --tmpfs /var/lib/journal\"\n  esac\n  case \"$Initsystem\" in\n    systemd|sysvinit|openrc|runit)\n      case \"$Backend\" in\n        podman)\n          Backendcommand=\"$Backendcommand \\\\\n  --systemd=always\"\n        ;;\n      esac\n      [ \"$Remountcgroup\" = \"yes\" ] && {\n        unpriv_backend \"$Backendbin run --help\" | grep -q -- '--cgroupns' && Backendcommand=\"$Backendcommand \\\\\n  --cgroupns private\"\n      }\n    ;;\n  esac\n  \n  # stop signal for some init systems\n  [ \"$Stopsignal\" ] && {\n    case \"$Backend\" in\n      docker|podman|nerdctl)\n        Backendcommand=\"$Backendcommand \\\\\n  --stop-signal $Stopsignal\"\n      ;;\n    esac\n  }\n\n  # --sharecgroup\n  [ \"$Sharecgroup\" = \"yes\" ] && {\n    case \"$Backend\" in\n      docker|podman|nerdctl)\n        Backendcommand=\"$Backendcommand \\\\\n  --mount type=bind,source=/sys/fs/cgroup,target=/sys/fs/cgroup,readonly\"\n      ;;\n    esac\n  }\n\n  # Needed especially for --init=systemd and --dbus=system\n  case \"$Backend\" in\n    docker|podman)\n      Backendcommand=\"$Backendcommand \\\\\n  --tmpfs /run:exec \\\\\n  --tmpfs /run/lock \\\\\n  --tmpfs /tmp\"\n    ;;\n  esac\n\n  # shared x11docker cache folder\n  case \"$Backend\" in\n    docker|podman|nerdctl)\n      Backendcommand=\"$Backendcommand \\\\\n  --mount $(convertpath mount \"$Sharefolder:rw\" $Sharefoldercontainer)\"\n    ;;\n    proot)\n      Backendcommand=\"$Backendcommand \\\\\n  --bind=$Sharefolder:$Sharefoldercontainer\"\n    ;;\n  esac\n\n  # --home\n  case \"$Sharehome\" in\n    host)\n      case \"$Backend\" in\n        docker|podman|nerdctl)\n          Backendcommand=\"$Backendcommand \\\\\n  --mount $(convertpath mount \"$Persistanthomevolume:rw\" \"$Containeruserhome\")\"\n        ;;\n        proot)\n          Backendcommand=\"$Backendcommand \\\\\n  --bind=$Persistanthomevolume:$Containeruserhome\"\n        ;;\n      esac\n    ;;\n    volume)\n      case \"$Backend\" in\n        docker|podman|nerdctl)\n          Backendcommand=\"$Backendcommand \\\\\n  --volume $(convertpath volume \"$Persistanthomevolume\" \"$Containeruserhomebasefolder\")\" ### FIXME $Containeruserhomebasefolder ?? mount/volume?\n        ;;\n        *)\n          error \"Option --backend=$Backend: Sharing a docker volume is not supported.\n  Failing option: --home=$Persistanthomevolume\"\n        ;;\n      esac\n    ;;\n  esac\n\n  # --share\n  while read -r Line; do\n    case \"$Backend\" in\n      docker|podman|nerdctl)\n        case \"$(cut -c1-5 <<< \"$Line\")\" in\n          \"/dev/\")\n             Backendcommand=\"$Backendcommand \\\\\n  --device $(convertpath volume \"$Line\")\"\n            warning \"Sharing device file: $Line\"\n          ;;\n          *)\n            Backendcommand=\"$Backendcommand \\\\\n  --mount $(convertpath mount \"$Line\")\"\n          ;;\n        esac\n      ;;\n      proot)\n        grep -q ':ro' <<< \"$Line\" && {\n          warning \"Option --backend=proot cannot mount read-only:\n  $Line\n  Fallback: mounting with r/w\"\n          check_fallback\n        }\n        Line=\"${Line//\":ro\"/\"\"}\"\n        Backendcommand=\"$Backendcommand \\\\\n  --bind=$Line:$Line\"\n      ;;\n    esac\n  done < <(store_runoption dump volume)\n\n  # --gpu: share NVIDIA driver installer\n  [ -f \"$Nvidiainstallerfile\" ] && {\n    case \"$Backend\" in\n      docker|podman|nerdctl)\n        Backendcommand=\"$Backendcommand \\\\\n  --mount $(convertpath mount \"$Nvidiainstallerfile:ro\" \"$Nvidiacontainerfile\")\"\n      ;;\n      proot)\n        Backendcommand=\"$Backendcommand \\\\\n  --bind=$Nvidiainstallerfile:$Nvidiacontainerfile\"\n      ;;\n    esac\n  }\n\n  # --gpu=virgl\n  [ \"$Sharegpu\" = \"virgl\" ] && Backendcommand=\"$Backendcommand \\\\\n  --mount $(convertpath mount \"$Cachefolder/tmp/.virgl_test\" \"/tmp/.virgl_test\")\"\n\n  # share X socket\n  [ \"$Xoverip\" = \"no\" ] && case \"$Xcontainer\" in\n    yes)\n      [ \"$Newxsocket\" ] && {\n        case \"$Backend\" in\n          docker|podman|nerdctl)\n            case \"$Xserver\" in\n              --hostdisplay)\n                Backendcommand=\"$Backendcommand \\\\\n  --mount $(convertpath mount \"$Newxsocket:ro\" \"$Newxsocket\")\"\n              ;;\n              *)\n                Backendcommand=\"$Backendcommand \\\\\n  --mount $(convertpath mount \"$Cachefolder/tmp/.X11-unix/X$Newdisplaynumber:ro\" \"$Newxsocket\")\"\n              ;;\n            esac\n            [ \"$Shareipc\" = \"no\" ] && [ \"$Containeruser\" = \"$Hostuser\" ] && [ \"$Xcontainerbackend\" = \"$Backend\" ] && {\n              case \"$Runtime\" in\n                kata-runtime|sysbox-runc) ;;\n                *)\n                  case \"$Backend\" in\n                    docker)\n                      [ \"$Xcrootless\" = \"$Backendrootless\" ] && Backendcommand=\"$Backendcommand \\\\\n  --ipc=container:$Xcontainername\"\n                    ;;\n                    podman)\n                      case \"$Runtime\" in\n                        crun)\n                          [ \"$Xcrootless\" = \"$Backendrootless\" ] && Backendcommand=\"$Backendcommand \\\\\n  --ipc=container:$Xcontainername\"\n                        ;;\n                        *)\n                          debugnote \"--xc --backend=podman: Not sharing ipc namespace using runtime $Runtime\"\n                        ;;\n                      esac\n                    ;;\n                  esac\n                ;;\n              esac\n            }\n          ;;\n          proot)\n            case \"$Xserver\" in\n              --hostdisplay)\n                Backendcommand=\"$Backendcommand \\\\\n  --bind=$Newxsocket:$Newxsocket\"\n              ;;\n              *)\n                Backendcommand=\"$Backendcommand \\\\\n  --bind=$Cachefolder/tmp/.X11-unix/X$Newdisplaynumber:$Newxsocket\"\n              ;;\n            esac\n          ;;\n        esac\n      }\n    ;;\n    no)\n      [ \"$Newxsocket\" ] && {\n        case \"$Backend\" in\n          docker|podman|nerdctl)\n            Backendcommand=\"$Backendcommand \\\\\n  --mount $(convertpath mount \"$Newxsocket:ro\")\"\n          ;;\n          proot)\n            Backendcommand=\"$Backendcommand \\\\\n  --bind=$Newxsocket:$Newxsocket\"\n          ;;\n        esac\n      }\n    ;;\n  esac\n\n  # Wayland socket will be softlinked to XDG_RUNTIME_DIR in containerrc\n  [ \"$Setupwayland\" = \"yes\" ] && {\n    case \"$Containersetup\" in\n      yes)\n        case \"$Xcontainer\" in\n          yes)\n            case \"$Backend\" in\n              docker|podman|nerdctl)\n                Backendcommand=\"$Backendcommand \\\\\n  --mount $(convertpath mount \"$Cachefolder/XDG_RUNTIME_DIR/$Newwaylandsocket\" \"/$Newwaylandsocket\")\"\n              ;;\n              proot)\n                Backendcommand=\"$Backendcommand \\\\\n  --bind=$Cachefolder/XDG_RUNTIME_DIR/$Newwaylandsocket:/$Newwaylandsocket\"\n              ;;\n            esac\n          ;;\n          no)\n            case \"$Backend\" in\n              docker|podman|nerdctl)\n                Backendcommand=\"$Backendcommand \\\\\n  --mount $(convertpath mount \"$XDG_RUNTIME_DIR/$Newwaylandsocket\" \"/$Newwaylandsocket\")\"\n              ;;\n              proot)\n                Backendcommand=\"$Backendcommand \\\\\n  --bind=$XDG_RUNTIME_DIR/$Newwaylandsocket:/$Newwaylandsocket\"\n              ;;\n            esac\n          ;;\n        esac\n      ;;\n      no)\n        case \"$Xcontainer\" in\n          yes)\n            case \"$Backend\" in\n              docker|podman|nerdctl)\n                Backendcommand=\"$Backendcommand \\\\\n  --mount $(convertpath mount \"$Cachefolder/XDG_RUNTIME_DIR/$Newwaylandsocket\")\"\n              ;;\n              proot)\n                Backendcommand=\"$Backendcommand \\\\\n  --bind=$Cachefolder/XDG_RUNTIME_DIR/$Newwaylandsocket\" ### FIXME looks wrong\n              ;;\n            esac\n          ;;\n          no)\n            case \"$Backend\" in\n              docker|podman|nerdctl)\n                Backendcommand=\"$Backendcommand \\\\\n  --mount $(convertpath mount \"$XDG_RUNTIME_DIR/$Newwaylandsocket\")\"\n              ;;\n              proot)\n                Backendcommand=\"$Backendcommand \\\\\n  --bind=$XDG_RUNTIME_DIR/$Newwaylandsocket\"\n              ;;\n            esac\n          ;;\n        esac\n      ;;\n    esac\n  }\n\n  # --pulseaudio\n  case \"$Pulseaudiomode\" in\n    socket)\n      case \"$Backend\" in\n        docker|podman|nerdctl)\n          Backendcommand=\"$Backendcommand \\\\\n  --mount $(convertpath mount \"$Pulseaudioconf:ro\" \"/etc/pulse/client.conf\")\"\n          ;;\n        proot)\n          Backendcommand=\"$Backendcommand \\\\\n  --bind=$Pulseaudioconf:/etc/pulse/client.conf\"\n        ;;\n      esac\n    ;;\n    host)\n      case \"$Backend\" in\n        docker|podman|nerdctl)\n          Backendcommand=\"$Backendcommand \\\\\n  --mount $(convertpath mount \"$Pulseaudiosocket:ro\" \"/tmp/pulseaudio.socket.host\") \\\\\n  --mount $(convertpath mount \"$Pulseaudioconf:ro\" \"/etc/pulse/client.conf\")\"\n          ;;\n        proot)\n          Backendcommand=\"$Backendcommand \\\\\n  --bind=$Pulseaudiosocket:/tmp/pulseaudio.socket.host \\\\\n  --bind=$Pulseaudioconf:/etc/pulse/client.conf\"\n        ;;\n      esac\n    ;;\n  esac\n\n  # --workdir\n  case \"$Containersetup\" in\n    yes)\n      case \"$Backend\" in\n        docker|podman|nerdctl)\n          Backendcommand=\"$Backendcommand \\\\\n  --workdir '${Workdir:-/tmp}'\"\n        ;;\n        proot)\n          Backendcommand=\"$Backendcommand \\\\\n  --cwd=${Workdir:-/tmp}\"\n        ;;\n      esac\n    ;;\n    no)\n      [ \"$Workdir\" ] && {\n        case \"$Backend\" in\n          docker|podman|nerdctl)\n            Backendcommand=\"$Backendcommand \\\\\n  --workdir '$Workdir'\"\n          ;;\n          proot)\n            Backendcommand=\"$Backendcommand \\\\\n  --cwd=${Workdir}\"\n          ;;\n        esac\n      }\n    ;;\n  esac\n\n  # --no-setup, --no-entrypoint\n  case \"$Containersetup\" in\n    yes)\n      case \"$Backend\" in\n        docker|podman|nerdctl)\n          Backendcommand=\"$Backendcommand \\\\\n  --entrypoint env\"\n        ;;\n      esac\n    ;;\n  esac\n\n  # --env: add environment variables. Only needed here for possible 'docker exec'. Also set in containerrc\n  while read Line; do\n    case \"$Backend\" in\n      docker|podman|nerdctl)\n        Backendcommand=\"$Backendcommand \\\\\n  --env '$(escapestring \"$Line\")'\"\n      ;;\n    esac\n  done < <(store_runoption dump env)\n\n  # add custom docker arguments, imagename and imagecommand\n  [ \"$Customdockeroptions\" ] && {\n    case \"$Backend\" in\n      docker|podman|nerdctl|proot)\n        Backendcommand=\"$Backendcommand \\\\\n  $Customdockeroptions\"\n      ;;\n    esac\n  }\n\n  # --rootfs\n  case \"$Backend\" in\n    podman)\n      [ \"$Podmanrootfs\" = \"yes\" ] && Backendcommand=\"$Backendcommand \\\\\n  --rootfs\"\n    ;;\n  esac\n\n  case \"$Backend\" in\n    docker|podman|nerdctl)\n      Backendcommand=\"$Backendcommand \\\\\n  --\"\n    ;;\n    proot)\n      Backendcommand=\"$Backendcommand \\\\\n  \"\n    ;;\n  esac\n\n  case \"$Containersetup\" in\n    yes)\n      case \"$Switchcontaineruser\" in\n        no)\n          case \"$Backend\" in\n            docker|podman|nerdctl)\n              Backendcommand=\"$Backendcommand ${Rootfs:-$Imagename} $Initcommand /bin/sh - $(convertpath share \"$Containerrc\")\"      # start_container runs containerrootrc with 'docker exec'\n            ;;\n            proot)\n              Backendcommand=\"$Backendcommand /bin/sh - $(convertpath share \"$Containerrc\")\"\n            ;;\n          esac\n        ;;\n        yes)\n          case \"$Backend\" in\n            docker|podman|nerdctl)\n              Backendcommand=\"$Backendcommand ${Rootfs:-$Imagename} $Initcommand /bin/sh - $(convertpath share \"$Containerrootrc\")\"  # containerrootrc runs containerrc\n            ;;\n            proot)\n              Backendcommand=\"$Backendcommand /bin/sh - $(convertpath share \"$Containerrootrc\")\"\n            ;;\n          esac\n        ;;\n      esac\n    ;;\n    no)\n      case \"$Backend\" in\n        docker|podman|nerdctl)\n          case \"$Initsystem\" in\n            tini) Backendcommand=\"$Backendcommand ${Rootfs:-$Imagename} $Initcommand $Containercommand\" ;;\n            *) Backendcommand=\"$Backendcommand ${Rootfs:-$Imagename} $Containercommand\" ;;\n          esac\n        ;;\n        proot)\n          Backendcommand=\"$Backendcommand $Containercommand\"\n        ;;\n      esac\n    ;;\n  esac\n\n  return 0\n}\nsetup_capabilities() {          # check linux capabilities needed by container\n  # compare: man capabilities\n\n  [ \"$Sudouser\" ]               && Adminusercaps=\"yes\"\n  [ \"$Capdropall\" = \"no\" ]      && [ \"$Allownewprivileges\" = \"auto\" ] && {\n    note \"Option --cap-default: Enabling option --newprivileges=yes.\n  You can avoid this with --newprivileges=no\"\n    Allownewprivileges=\"yes\"\n  }\n\n  # --sudouser\n  [ \"$Sudouser\" ] && warning \"Option --sudouser severely reduces container security.\n  Container gains additional capabilities to allow sudo and su.\n  If an application breaks out of container, it can harm your system\n  in many ways without you noticing. Default password: x11docker\"\n\n  # enable dbus\n  [ \"$Dbussystem\" = \"yes\" ]    && {\n    Dbusrunsession=\"yes\"\n    store_runoption cap \"CHOWN FOWNER\" ### FIXME: CHOWN needed indeed here?\n    Switchcontaineruser=\"yes\"\n  }\n  #case \"$Initsystem\" in\n  #  systemd) Dbusrunsession=\"no\" ;;\n  #esac\n\n  case \"$Initsystem\" in\n    none|tini|dockerinit) ;;\n    systemd)\n      Switchcontaineruser=\"yes\"\n      store_runoption cap \"FSETID FOWNER SETPCAP SYS_BOOT\"\n    ;;\n    runit|openrc|sysvinit)\n      Switchcontaineruser=\"yes\"\n      store_runoption cap \"SYS_BOOT KILL\"\n    ;;\n    s6-overlay)\n      Switchcontaineruser=\"yes\"\n      store_runoption cap \"CHOWN KILL\"\n    ;;\n  esac\n\n  [ \"$Sharecgroup\" = \"yes\" ]         && Switchcontaineruser=\"yes\" # needed for elogind\n  [ \"$Switchcontaineruser\" = \"yes\" ] && Switchcontainerusercaps=\"yes\"\n\n  [ \"$Adminusercaps\" = \"yes\" ] && {\n    Switchcontainerusercaps=\"yes\"\n    store_runoption cap \"CHOWN KILL FSETID FOWNER SETPCAP\"\n    [ \"$Allownewprivileges\" = \"auto\" ] && {\n      note \"Option --sudouser: Enabling option --newprivileges=yes.\n  You can avoid this with --newprivileges=no\"\n      Allownewprivileges=\"yes\"\n    }\n  }\n  [ \"$Switchcontainerusercaps\" = \"yes\" ] && {\n    warning \"setup_capabilities(): Adding capabilities for user switching\n  from root to unprivileged user\"\n    store_runoption cap \"SETUID SETGID DAC_OVERRIDE AUDIT_WRITE\"\n  }\n\n  # Automated NVIDIA driver installation\n  [ \"$Sharegpu\" = \"direct\" ] && [ \"$Nvidiainstallerfile\" ] && [ \"$Switchcontaineruser\" = \"yes\" ] && store_runoption cap \"CHOWN FOWNER\"\n\n  [ \"$Allownewprivileges\" = \"auto\" ] && Allownewprivileges=\"no\"\n\n  [ \"$Allownewprivileges\" = \"yes\" ] && warning \"Option --newprivileges=yes: x11docker does not set\n  docker run option --security-opt=no-new-privileges.\n  That degrades container security.\n  However, this is still within a default docker setup.\"\n\n  # Issues with hidepid=2 seen on NixOS (issue #83)\n  { [ \"$Switchcontaineruser\" = \"yes\" ] || [ \"$Containeruser\" != \"$Hostuser\" ] ; } && {\n    [ \"$Hostcanwatchroot\" = \"no\" ] && {\n      [ \"$Hosthidepid\" = \"yes\" ]            && Message=\"/proc is mounted with hidepid=2.\" || Message=\"Cannot watch processes of other users for unknown reasons.\"\n      Message=\"$Message\n  x11docker cannot watch processes of root\n  or other users different from $Hostuser.\"\n      [ \"$Hostuser\" != \"$Containeruser\" ]   && Message=\"$Message\n  Container user $Containeruser is different from host user $Hostuser.\"\n      [ \"$Switchcontaineruser\" = \"yes\" ]    && Message=\"$Message\n  Container PID 1 will run as root.\"\n      Message=\"$Message\n  Therefore x11docker cannot watch container processes\n  for a clean termination of X and x11docker itself.\n  Four possible solutions:\n    1. Run x11docker as root.\n    2. Don't use options like --user or --init=systemd that change container user.\n    3. Add user $Hostuser to group 'proc'.\n    4. Change /proc mount option hidepid=2 to hidepid=1.\"\n      error \"$Message\"\n    }\n  }\n\n  return 0\n}\nsetup_initsystem() {            # option init: set up capabilities, check or create files\n  # some init system setup also in containerrootrc\n  local Message=\n\n  # --init in Mobyvm. /usr/bin/docker-init is not available in MSYS2/Cygwin/WSL1\n  case \"$Mobyvm\" in\n    yes) [ \"$Initsystem\" = \"tini\" ] && Initsystem=\"dockerinit\" ;;\n  esac\n\n  case \"$Backend\" in\n    proot|host)\n      case \"$Initsystem\" in\n        tini|none) ;;\n        *)\n          note \"Option --init: Only --init[=tini] or --init=none are\n  supported with option --backend=$Backend. Fallback: Setting option --init=tini\"\n          check_fallback\n          Initsystem=\"tini\"\n        ;;\n      esac\n    ;;\n  esac\n\n  case \"$Backend\" in\n    docker|podman|nerdctl)\n      store_runoption env \"container=$Backend\"   # At least OpenRC and systemd regard this hint\n    ;;\n  esac\n\n  case \"$Initsystem\" in\n    none|dockerinit) ;;\n    tini)\n      check_smallinit && {\n        case \"$Runtime\" in\n          kata-runtime)\n            # avoid sharing same file that might be shared with runc already.\n            cp -u \"$Initbinaryfile\" \"$Localsharedir/init-kata\"\n            Initbinaryfile=\"$Localsharedir/init-kata\"\n          ;;\n        esac\n      } || {\n        Initsystem=\"none\"\n      }\n      [ \"$Initsystem\" = \"none\" ] && {  ### FIXME --backend=host,proot\n        note \"--init=$Initsystem: Did not find container init system\n  'tini' or 'catatonit'. It should be provided by docker or podman package.\n  Please install catatonit to provide a container init system.\n  $Wikipackagesimage\"\n      }\n      verbose \"--init: Found init binary: ${Initbinaryfile:-(none)}\"\n      [ \"$Initbinaryfile\" ] && storeinfo \"tini=$Initbinaryfile\"\n    ;;\n    systemd)\n      Stopsignal=\"SIGRTMIN+3\"\n      Containerusergroups=\"$Containerusergroups systemd-journal\"\n    ;;\n    runit)\n      Stopsignal=\"HUP\"\n      store_runoption env \"VIRTUALIZATION=docker\"\n    ;;\n    openrc)\n    ;;\n    sysvinit)\n      Stopsignal=\"INT\"\n    ;;\n    s6-overlay)\n    ;;\n  esac\n\n  case \"$Initsystem\" in\n    systemd)\n      warning \"Option --init=systemd slightly degrades container isolation.\n  It adds some capabilities x11docker would drop otherwise.\n  However, they are still within default docker capabilities.\n  Not within default docker capabilities it adds capability SYS_BOOT.\n  Some processes in container will run as root.\"\n    ;;\n    runit|openrc|sysvinit)\n      warning \"Option --init=$Initsystem slightly degrades container isolation.\n  It adds some user switching capabilities x11docker would drop otherwise.\n  However, they are still within default docker capabilities.\n  Not within default docker capabilities it adds capability SYS_BOOT.\n  Some processes in container will run as root.\"\n    ;;\n    s6-overlay)\n      warning \"Option --init=$Initsystem slightly degrades container isolation.\n  It adds some user switching capabilities x11docker would drop otherwise.\n  However, they are still within default docker capabilities.\n  Some processes in container will run as root.\"\n    ;;\n    tini|none|dockerinit)\n      [ \"$Dbussystem\" = \"yes\" ] && {\n        [ \"$Capdropall\" = \"yes\" ] && warning \"Option --dbus=system slightly degrades container isolation.\n  It adds some user switching capabilities x11docker would drop otherwise.\n  However, they are still within default docker capabilities.\n  Some processes in container will run as root.\n  --dbus=system might need further capabilities or --cap-default to work\n  as expected. If in doubt, one of --init=systemd|openrc|runit|sysvinit\n  might be a better choice.\"\n        note \"Option --dbus=system with init system '$Initsystem'\n  can have a quite long timeout delay until startup.\n  Use one of --init=systemd|openrc|runit|sysvinit in that case.\"\n      }\n    ;;\n  esac\n\n  case \"$Backend\" in\n    host)\n      [ \"$Initsystem\" = \"tini\" ] && {\n        Containerentrypoint=\"$Initbinaryfile --\"\n        store_runoption env \"TINI_SUBREAPER=1\"\n      }\n    ;;\n  esac\n  \n  case \"$Initsystem\" in\n    systemd|sysvinit|openrc|runit)\n      check_cgroup ||:\n    ;;\n  esac\n  \n  return 0\n}\nstore_runoption() {             # store env, cap or volume/device for docker command\n  # $1  env     store environment variable $2\n  #     volume  store volume or device path $2\n  #     cap     store capability $2\n  #     dump    dump all entries of $2\n  local Count Line Path Readwritemode\n  case \"${1:-}\" in\n    env)\n      Containerenvironmentcount=\"$((Containerenvironmentcount + 1))\"\n      Containerenvironment[$Containerenvironmentcount]=\"${2:-}\"\n    ;;\n    volume)\n      Path=\"$(convertpath subsystem \"${2:-}\")\"\n      Readwritemode=\"$(echo \"${2:-}\" | rev | cut -c1-3 | rev)\"\n      [ \"$Readwritemode\" = \":ro\" ] || Readwritemode=\"\"\n      Path=\"$(convertpath subsystem \"${2:-}\")\"\n      Readwritemode=\"$(echo \"${2:-}\" | rev | cut -c1-3 | rev)\"\n      [ \"$Readwritemode\" = \":ro\" ] || Readwritemode=\"\"\n      case \"${Path:0:1}\" in\n        \"/\") # path on host\n          Sharevolumescount=\"$((Sharevolumescount + 1))\"\n          Sharevolumes[$Sharevolumescount]=\"${2:-}\"\n          [ -h \"$Path\" ] && myrealpath \"$Path\" >/dev/null && {\n            note \"Option --share: Shared file is a symbolic link. Sharing target, too.\n  Symlink: $Path\n  Target:  $(myrealpath \"$Path\")\"\n            store_runoption volume \"$(myrealpath \"$Path\")$Readwritemode\"\n          }\n        ;;\n        *) # Docker volume\n          Sharevolumescount=\"$((Sharevolumescount + 1))\"\n          Sharevolumes[$Sharevolumescount]=\"${2:-}\"\n        ;;\n      esac\n    ;;\n    cap)\n      for Line in ${2:-} ; do\n        Capabilities=\"$Capabilities\n$Line\"\n      done\n    ;;\n    dump)\n      case \"${2:-}\" in\n        env) for ((Count=$Containerenvironmentcount ; Count>=1 ; Count --)) ; do echo \"${Containerenvironment[$Count]}\" ; done ;;\n        volume) for ((Count=1 ; Count<=$Sharevolumescount ; Count ++))      ; do echo \"${Sharevolumes[$Count]}\" ; done ;;\n        cap)\n          while read Line; do\n            [ \"$Line\" ] && case \"$Capdropall\" in\n              yes) echo \"$Line\" ;;\n              no)  grep -w -q \"$Line\" <<< \"SETPCAP MKNOD AUDIT_WRITE CHOWN NET_RAW DAC_OVERRIDE FOWNER FSETID KILL SETGID SETUID NET_BIND_SERVICE SYS_CHROOT SETFCAP\" || echo \"$Line\" ;;\n            esac\n          done < <(echo \"$Capabilities\" | sort -u)\n        ;;\n      esac\n    ;;\n  esac\n  return 0\n}\n\n#### scripts running in container\ncreate_containerrootrc() {      # This script runs as root in container\n  echo \"#! /bin/sh\n\n# containerrootrc\n# This Script is executed as root in container.\n# - Create container user\n# - Set time zone\n# - Create locale\n# - Install NVIDIA driver if requested\n# - Set up init system services and DBus for --init=systemd|openrc|runit|sysvinit\n\n# redirect output to have it available before 'docker logs' starts. --init=runit (void) would eat up the output at all for unknown reasons.\nexec 5>&1 6>&2\nexec 1>>$(convertpath share \"$Containerlogfile\") 2>&1\n\"\n\n  declare -f storeinfo\n  declare -f rocknroll\n  echo \"$Messagefifofuncs\"\n\n  echo \"\nMessagefile=$(convertpath share \"$Messagefifo\")\nStoreinfofile='$(convertpath share \"$Storeinfofile\")'\nTimetosaygoodbyefile=$(convertpath share \"$Timetosaygoodbyefile\")\n\nContaineruser=\\\"\\$(storeinfo dump containeruser)\\\"\nContaineruserhome='$Containeruserhome'\n\ndebugnote 'Running containerrootrc: Setup as root in container'\n\nError=''\nfor Line in cat chmod chown cut cd cp date echo env export grep id ln ls mkdir mv printf rm sed sh sleep tail touch; do\n  command -v \\$Line || {\n    warning \\\"ERROR: Command not found in image: \\$Line\\\"\n    Error=1\n  }\ndone\n[ \\\"\\$Error\\\" ] && error 'Commands for container setup missing in image.\n  You can try with option --no-setup to avoid this error.'\n\n# /etc/profile.d\n\"\n  case \"$Initsystem\" in\n    systemd|openrc|sysvinit|runit)\n      echo \"\ninstall -m 666 /dev/null /etc/profile.d/90-x11docker-containerrc.sh\necho '\necho > /etc/profile.d/90-x11docker-containerrc.sh\nexec /bin/sh $(convertpath share \"$Containerrc\")\n' >> /etc/profile.d/90-x11docker-containerrc.sh\n\"\n    ;;\n  esac\n  while read Line; do\n    echo \"echo 'export $Line' >> /etc/profile.d/10-x11docker-env.sh\"\n  done <<< $(store_runoption dump env)\n  echo \"\n# Container system\nContainersystem=\\\"\\$(grep '^ID=' /etc/os-release 2>/dev/null | cut -d= -f2 || echo 'unknown')\\\"\nverbose \\\"Container system ID: \\$Containersystem\\\"\n\n# Check type of libc\nldd --version 2>&1 | grep -q 'musl libc' && Containerlibc='musl'\nldd --version 2>&1 | grep -q -E 'GLIBC|GNU libc'  && Containerlibc='glibc'\ndebugnote \\\"containerrootrc: Container libc: \\$Containerlibc\\\"\n\n# Create some system dirs with needed permissions\nmkdir -v -p /var/lib/dbus /var/run/dbus\nmkdir -v -p -m 1777 /tmp/.ICE-unix /tmp/.X11-unix /tmp/.font-unix\nchmod -c 1777 /tmp/.ICE-unix /tmp/.X11-unix /tmp/.font-unix\n\"\n\n  [ \"$Screensize\" ]          && rootrc_xrandr\n  [ \"$Hostlocaltimefile\" ]   && rootrc_timezone\n  [ \"$Langwunsch\" ]          && rootrc_create_locale\n  [ \"$Nvidiainstallerfile\" ] && rootrc_nvidia_installer\n\n  echo \"\nrocknroll || exit 64\n\"\n\n  [ \"$Createcontaineruser\" = \"yes\" ] && rootrc_setup_user\n  echo \"\ndebugnote \\\"containerrootrc: Container user: \\$(id \\$Containeruser)\n\\$(cat /etc/passwd | grep '^\\$Containeruser:')\\\"\n\n# Create HOME\nContaineruserhome=\\\"\\$(cat /etc/passwd | grep \\\"\\$Containeruser:\\\" | cut -d: -f6)\\\"\nContaineruserhome=\\\"\\${Containeruserhome:-/tmp/\\$Containeruser}\\\"\n[ -e \\\"\\$Containeruserhome\\\" ] || {\n  mkdir -v -p -m 777 \\\"\\$Containeruserhome\\\"\n  chown -v \\\"\\$Containeruser\\\":\\\"\\$Containerusergroup\\\" \\\"\\$Containeruserhome\\\" && chmod -v 755 \\\"\\$Containeruserhome\\\"  # can fail depending on capabilities\n}\nls -la \\\"\\$Containeruserhome\\\"\nexport HOME=\\\"\\$Containeruserhome\\\"\n\"\n\n  [ \"$Switchcontaineruser\" = \"yes\" ] && rootrc_create_helperscripts\n  [ \"$Dbussystem\" = \"yes\" ]          && rootrc_prepare_dbus\n  case \"$Initsystem\" in\n    openrc)   rootrc_prepare_init_openrc ;;\n    runit)    rootrc_prepare_init_runit ;;\n    systemd)  rootrc_prepare_init_systemd ;;\n    sysvinit) rootrc_prepare_init_sysvinit ;;\n  esac\n  \n  echo \"\n# disable getty in inittab\n[ -e /etc/inittab ] && sed -i 's/.*getty/##getty disabled by x11docker## \\0/' /etc/inittab\n\"\n\n  [ \"$Dbussystem\" = \"yes\" ] && {\n    echo \"\ncommand -v dbus-daemon || note 'DBus not found.\n  Cannot run DBus system daemon. Please install dbus in image.'\n\"\n    case \"$Initsystem\" in\n      tini|none|dockerinit) \n        echo \"\ndbus-daemon --system --fork\n\"\n      ;;\n    esac\n  }\n\n  [ \"$Remountcgroup\" = \"yes\" ] && echo \"\n# wait for nsenter to remount /sys/fs/cgroup to :rw\nfor i in 1 2 3 4 5 6 7 8 9 10; do\n  test -e /nsenter_is_ready && break\n  sleep 1\n  debugnote 'containerrootrc: Waiting for nsenter/mount to be ready'\ndone\nrm /nsenter_is_ready\n\"\n\n  [ \"$Runasroot\" ] && {\n    echo \"\n# Custom setup root command added with option --runasroot\n$Runasroot\n\"\n  }\n\n  echo \"\nrocknroll || exit 64\nstoreinfo containerrootrc=ready   # signal for containerrc\n#exec 1>&5 2>&6\n\"\n\n  [ \"$Interactive\" = \"yes\" ] && echo \"\nexec 1>&5 2>&6\n\"\n\n  [ \"$Switchcontaineruser\" = \"yes\" ] && {   # if \"no\", containerrc is executed in command line $Backendcommand, and containerrootrc is started with 'docker exec'\n    echo \"debugnote 'containerrootrc(): --init=$Initsystem'\"\n    case \"$Initsystem\" in\n      none|dockerinit)\n        case \"$Backend\" in\n          proot)                 echo \"exec /bin/sh $(convertpath share \"$Containerrc\")\" ;;\n          docker|podman|nerdctl) echo \"exec /usr/local/bin/x11docker-agetty\" ;;\n        esac\n      ;;\n      tini)\n        case \"$Backend\" in\n          proot)                 echo \"exec env TINI_SUBREAPER=1 '$Initcontainerpath' -- /bin/sh $(convertpath share \"$Containerrc\")\" ;;\n          docker|podman|nerdctl) echo \"exec '$Initcontainerpath' -- /usr/local/bin/x11docker-agetty\" ;;\n        esac\n      ;;\n      sysvinit)\n        echo \"/usr/local/bin/x11docker-watch &\"\n        echo \"exec /sbin/init\"\n      ;;\n      openrc)\n        echo \"/usr/local/bin/x11docker-watch &\"\n        echo \"command -v openrc-init && exec openrc-init || exec /sbin/init\"\n      ;;\n      runit)\n        echo \"/usr/local/bin/x11docker-watch &\"\n        echo \"[ -e /sbin/runit-init ] && exec runit-init || exec /sbin/init\"\n      ;;\n      s6-overlay)\n        echo \"exec /init /usr/local/bin/x11docker-agetty\"\n      ;;\n      systemd)\n        echo 'Systemd=/lib/systemd/systemd'\n        echo '[ -x \"$Systemd\" ] || Systemd=/bin/systemd'\n        echo '[ -x \"$Systemd\" ] || Systemd=/sbin/systemd'\n        echo '[ -x \"$Systemd\" ] || Systemd=/sbin/init'\n        echo 'command -v systemctl >/dev/null || {'\n        echo '  error \"Option --init=systemd: systemd not found.\"'\n        echo '  exit 64'\n        echo '}'\n        echo 'export SYSTEMD_LOG_LEVEL=info'\n        echo 'export SYSTEMD_LOG_TARGET=console'\n        echo 'exec $Systemd --show-status=yes'\n      ;;\n    esac\n  }\n  return 0\n}\ncreate_containerrc() {          # This script runs as unprivileged user in container\n  local Ungrep= Path= Line=\n\n  {\n    echo \"#! /bin/sh\n# containerrc\n# Created startscript for docker run used as container command.\n# Runs as unprivileged user in container.\n\n[ '$Interactive' = 'no' ] && exec >> $(convertpath share \"$Containerlogfile\") 2>&1\n\n$(declare -f mysleep)\n$(declare -f pspid)\n$(declare -f rocknroll)\n$(declare -f saygoodbye)\n$(declare -f storeinfo)\n$(declare -f storepid)\n$(declare -f waitforlogentry)\n$Messagefifofuncs\n\nMessagefile=$(convertpath share \"$Messagefifo\")\nStoreinfofile=$(convertpath share \"$Storeinfofile\")\nStorepidfile=$Sharefoldercontainer/store.pids\nTimetosaygoodbyefile=$(convertpath share \"$Timetosaygoodbyefile\")\n\nwaitforlogentry containerrc \\$Storeinfofile containerrootrc=ready '' infinity\ndebugnote 'Running containerrc: Unprivileged user commands in container'\n\nverbose \\\"containerrc: Container system:\n\\$(cat /etc/os-release 2>&1 ||:)\\\"\n\n\"\n    case \"$Backend\" in\n      proot)\n        # set another hostname ### FIXME fails\n        sed \"s/$(hostname)/$Backend-$Imagebasename/g\" \"/etc/hosts\" > \"$Rootfs/etc/hosts\"\n        echo \"$Backend-$Imagebasename\"                             > \"$Rootfs/etc/hostname\"\n        # clean environment variables\n        while read -r Line; do\n          Line=\"$(cut -d= -f1 <<< \"$Line\")\"\n          [ -n \"$Line\" ] && {\n            echo \"unset $Line\"\n            echo \"export $Line\"\n          }\n        done < <(unset -f rmcr ; env)\n        echo \"export PATH='/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin'\"\n        echo 'export PS1=\"\\u@'\"$Backend\"'-'\"$Imagebasename\"':\\w\\$ \"' ### FIXME fails\n      ;;\n      docker|podman|nerdctl)\n        [ \"$Switchcontaineruser\" = \"yes\" ] && {\n          echo '# Environment variables found in image:'\n          IFS=$'\\n'\n          while read -r Line; do\n            echo \"export $(escapestring \"$Line\")\"\n          done < <(unpriv_backend \"$Backendbin run --rm --entrypoint env $Imagename env\" 2>> \"$Containerlogfile\" | rmcr | grep -v 'HOSTNAME=' ||: )\n          IFS=$' \\t\\n'\n        }\n      ;;\n    esac\n\n    [ \"$Initsystem\" = 'systemd' ] && echo \"systemctl --user start dbus\"  ### FIXME\n\n    echo \"\n# USER and HOME\nContaineruser='$(storeinfo dump containeruser)'\nexport USER=\\\"\\$Containeruser\\\"\n\"\n\n    case \"$Createcontaineruser\" in\n      yes)\n        echo \"Containeruserhome='$Containeruserhome'\"\n      ;;\n      no)\n        case \"$Sharehome\" in\n          no)\n            echo \"Containeruserhome=\\\"\\$(cat /etc/passwd | grep \\\"\\$Containeruser:.:\\\" | cut -d: -f6)\\\"\"\n            echo \"Containeruserhome=\\\"\\${Containeruserhome:-/tmp/\\$Containeruser}\\\"\"\n            echo \"mkdir -p \\\"\\$Containeruserhome\\\"\"\n          ;;\n          volume)\n            echo \"Containeruserhome='$Containeruserhome'\"\n          ;;\n        esac\n      ;;\n    esac\n\n    echo \"\n[ \\\"\\$Containeruserhome\\\" ] && export HOME=\\\"\\$Containeruserhome\\\"\n\n# XDG_RUNTIME_DIR\n\nContaineruseruid=\\$(id -u \\$Containeruser)\nexport XDG_RUNTIME_DIR=/tmp/XDG_RUNTIME_DIR\n[ -e /run/user/\\$Containeruseruid ] && {\n  ln -s /run/user/\\$Containeruseruid \\$XDG_RUNTIME_DIR\n  export XDG_RUNTIME_DIR=/run/user/\\$Containeruseruid\n} || {\n  mkdir -p -m700 \\$XDG_RUNTIME_DIR\n}\n\"\n\n    # softlinks from shared folders to HOME\n    [ \"$Persistanthomevolume\" != \"$Containeruserhosthome\" ] && { # not for --home=$HOME\n      while read -r Line; do\n        Path=\"$(convertpath container \"$Line\")\"\n        [ \"$(cut -c1-5 <<< \"$Line\")\" != \"/dev/\" ] && {\n          [ \"$Line\" != \"$Path\" ] && {   # different for paths in HOME without --home\n            case \"$Line\" in\n              \"$Containeruserhosthome\") # --share=$HOME\n                echo \"ln -s '$Path' -T '$Containeruserhome/home.host.$Containeruser'\"\n                Ungrep=\"$Ungrep|home.host.$Containeruser\"\n              ;;\n              *)\n                echo \"mkdir -p $(dirname \"$Line\")\"\n                echo \"ln -s '$Path' -T '$Line'\"\n                Ungrep=\"$Ungrep|$(basename \"$Line\")\"\n              ;;\n            esac\n          }\n        }\n      done < <(store_runoption dump volume)\n    }\n\n    echo \"\n# Copy files from /etc/skel into empty HOME\n[ -d \\\"\\$HOME\\\" ] && {\n  [ -d /etc/skel ] && [ -z \\\"\\$(ls -A \\\"\\$Containeruserhome\\\" 2>/dev/null | grep -v -E \\\"\\.bashrc|\\.profile|gnupg${Ungrep}\\\")\\\" ] && {\n    debugnote \\\"containerrc: HOME is empty. Copying from /etc/skel\\\"\n    cp -n -R /etc/skel/. \\$Containeruserhome\n    :\n  } || {\n    debugnote \\\"containerrc: HOME is not empty. Not copying from /etc/skel\\\"\n  }\n}\n\"\n\n    echo \"export DISPLAY='$Newdisplay' XAUTHORITY=$(convertpath share \"$Xclientcookie\")\"\n    case \"$Xserver\" in\n      --tty)\n        echo \"unset DISPLAY WAYLAND_DISPLAY XAUTHORITY\" ;;\n      --weston|--kwin|--hostwayland)\n        echo \"unset DISPLAY XAUTHORITY\" ;;\n      *)\n        echo \"unset WAYLAND_DISPLAY\" ;;\n    esac\n\n    [ \"$Setupwayland\" = \"yes\" ] && {\n      echo \"export WAYLAND_DISPLAY='$Newwaylandsocket'\"\n      echo \"ln -s /$Newwaylandsocket \\$XDG_RUNTIME_DIR/$Newwaylandsocket\"\n    } || {\n      echo \"export XDG_SESSION_TYPE=x11\"\n    }\n\n    [ \"$Dbusrunsession\" = \"yes\" ]  && {\n      echo \"\n# Check for dbus user daemon command\n[ -z \\\"\\$DBUS_SESSION_BUS_ADDRESS\\\" ] && [ -d \\\"\\$XDG_RUNTIME_DIR/bus\\\" ] && DBUS_SESSION_BUS_ADDRESS=\\\"unix:path=\\$XDG_RUNTIME_DIR/bus;autolaunch:\\\"\n[ -z \\\"\\$DBUS_SESSION_BUS_ADDRESS\\\" ] && {\n  command -v dbus-run-session >/dev/null && Dbus=dbus-run-session\n  command -v dbus-launch      >/dev/null && Dbus=dbus-launch\n  [ -z \\\"\\$Dbus\\\" ] && note \\\"Option --dbus: Neither dbus-run-session\n  nor dbus-launch found. Cannot run a DBus user session. \n  Please install package dbus or even dbus-x11 in image.\\\"\n}\n\"\n    }\n\n    echo \"\nexport TERM=xterm\n\nstoreinfo test locale && export LANG=\\\"\\$(storeinfo dump locale)\\\"\n\n[ -e \\\"$Hostlocaltimefile\\\" ]                   || export TZ=$Hostutctime\n[ \\\"\\$(date -Ihours)\\\" != \\\"$(date -Ihours)\\\" ] && export TZ=$Hostutctime\n\n[ \\\"\\$DEBIAN_FRONTEND\\\" = noninteractive ] && unset DEBIAN_FRONTEND && export DEBIAN_FRONTEND\n[ \\\"\\$DEBIAN_FRONTEND\\\" = newt ]           && unset DEBIAN_FRONTEND && export DEBIAN_FRONTEND\n\n# container environment (--env)\n\"\n    case \"$Containerusershell\" in\n      auto) echo \"command -v /bin/bash >/dev/null && export SHELL=/bin/bash || export SHELL=/bin/sh\" ;;\n      *)    echo \"export $(escapestring \"SHELL=$Containerusershell\")\" ;;\n    esac\n    while read -r Line ; do\n      echo \"export $(escapestring \"$Line\")\"\n    done < <(store_runoption dump env)\n\n    [ \"$Xauthentication\" = \"no\" ] && echo \"unset XAUTHORITY && export XAUTHORITY\"\n\n    echo \"\n[ -d \\\"\\$HOME\\\" ] && cd \\\"\\$HOME\\\"\n[ -n '$Workdir' ] && [ -d '$Workdir' ] && cd '$Workdir'    # WORKDIR in image or option --workdir\n\nunset -f rmcr\nenv >> $(convertpath share \"$Containerenvironmentfile\")\nverbose \\\"Container environment:\n\\$(env | sort)\\\"\n\"\n\n    case \"$Interactive\" in\n      no)\n        echo \"env LD_PRELOAD= tail -f $(convertpath share \"$Cmdstdoutlogfile\")     2>/dev/null & Stdoutpid=\\$!\"\n        echo \"env LD_PRELOAD= tail -f $(convertpath share \"$Cmdstderrlogfile\") >&2 2>/dev/null & Stderrpid=\\$!\"\n        case \"$Backend\" in\n          proot)\n            echo 'storepid $Stdoutpid tail_stdout'\n            echo 'storepid $Stderrpid tail_stderr'\n          ;;\n        esac\n        echo \"exec \\$Dbus sh $(convertpath share \"$Cmdrc\") >> $(convertpath share \"$Cmdstdoutlogfile\") 2>>$(convertpath share \"$Cmdstderrlogfile\")\"\n      ;;\n      yes)\n        echo \"exec \\$Dbus sh $(convertpath share \"$Cmdrc\") <&0\"\n      ;;\n    esac\n  } >> \"$Containerrc\"\n  return 0\n}\ncreate_cmdrc() {                # This script runs as unprivileged user in container and starts the final command\n  local Line\n\n  {\n    echo \"#! /bin/sh\n# Created startscript for cmdrc containing final container command\n\n$(declare -f storeinfo)\n$(declare -f saygoodbye)\n$(declare -f waitfortheend)\n$(declare -f rocknroll)\n$Messagefifofuncs\nMessagefile=$(convertpath share \"$Messagefifo\")\nStoreinfofile=\\\"$(convertpath share \"$Storeinfofile\")\\\"\nTimetosaygoodbyefile=$(convertpath share \"$Timetosaygoodbyefile\")\n\n[ -n \\\"\\$DBUS_SESSION_BUS_ADDRESS\\\" ] && dbus-update-activation-environment --verbose --systemd DBUS_SESSION_BUS_ADDRESS DISPLAY XAUTHORITY WAYLAND_DISPLAY XDG_RUNTIME_DIR >$(convertpath share \"$Containerlogfile\") 2>&1\n\"\n    echo \"\nwhile rocknroll; do\n  [ -e '$(convertpath share $Sharefolder/xhostready)' ] && break\n  sleep 0.1\n  verbose 'cmdrc(): Waiting for /x11docker/xhostready'\ndone\n\"\n\n    # --runasuser commands added here\n    [ -n \"$Runasuser\" ] && {\n      while read Line; do\n        # The echoed string containing the debugnote command should not contain a newline character\n        # to avoid problems with the generated cmdrc.\n        echo \"debugnote \\\"cmdrc: running --runsasuser command: $Line\\\"\"\n        echo \"\n$Line\n\"\n      done <<< \"$(grep . <<< \"$Runasuser\")\"\n    }\n\n    # The echoed string containing the debugnote command should not contain a newline character\n    # to avoid problems with the generated cmdrc.\n    echo \"debugnote \\\"cmdrc: Running container command: $Containerentrypoint $Containercommand\\\"\"\n    case \"$Forwardstdin\" in\n      yes) echo \"$Containerentrypoint $Containercommand <$(convertpath share \"$Cmdstdinfifo\")\" ;;\n      no)  echo \"$Containerentrypoint $Containercommand\" ;;\n    esac\n\n    echo \"\nstoreinfo cmdexitcode=\\$?\n\"\n    [ \"$Checkforopenwindow\" = \"yes\" ] && echo \"waitfortheend\"\n    echo \"\nexport LD_PRELOAD=\n[ -h \\\"\\$Homesoftlink\\\" ] && rm \\$Homesoftlink\nsaygoodbye cmdrc\n\"\n  } >> \"$Cmdrc\"\n  return 0\n}\n# code pieces for containerrootrc\nrootrc_create_helperscripts() {\n  echo \"\n# Create some helper scripts\n\nmkdir -p /usr/local/bin\n\n### x11docker-message\necho \\\"#! /bin/sh\n# Send messages to x11docker on host.\n# To be sourced by other scripts.\n$Messagefifofuncs_escaped\nMessagefile=$(convertpath share \"$Messagefifo\")\n\\\" >/usr/local/bin/x11docker-message\n\n### x11docker-su\necho \\\"#! /bin/sh\n# User switch from root in containerrootrc to unprivileged user in containerrc.\n# Called e.g. by x11docker-agetty.\n. /usr/local/bin/x11docker-message\ndebugnote 'Running x11docker-su'\nchmod +x $(convertpath share \"$Containerrc\")\n\\\" >/usr/local/bin/x11docker-su\n\"\n  case \"$Backend\" in\n    proot)                        echo \"echo 'exec /bin/sh - $(convertpath share \"$Containerrc\")'                          >>/usr/local/bin/x11docker-su\" ;;\n    docker|podman|nerdctl) echo \"echo \\\"exec su - -s /bin/sh  \\$Containeruser $(convertpath share \"$Containerrc\")\\\" >>/usr/local/bin/x11docker-su\" ;;\n  esac\n\n  echo \"\nchmod +x /usr/local/bin/x11docker-su\n\n### x11docker-agetty\necho \\\"#! /bin/sh\n# Run agetty to get a valid console.\n# Needed at least for --interactive.\n# Runs x11docker-su or agetty with login\n# Called at different places depending on init system.\n. /usr/local/bin/x11docker-message\ndebugnote 'Running x11docker-agetty'\n\"\n  case \"$Initsystem\" in\n    systemd|openrc|sysvinit|runit)\n      echo \"\n[ -e /sbin/agetty ] && exec agetty --autologin \\$Containeruser console\n\" \n    ;;\n    *)\n      echo \"\n[ -e /sbin/agetty ] && exec agetty --autologin \\$Containeruser -l /usr/local/bin/x11docker-su console\n\"\n    ;;\n  esac\n  echo \"\ndebugnote 'x11docker-agetty: agetty not found.'\nnote '/sbin/agetty not found. Startup can fail, --interactive can misbehave.\n  Please install package util-linux in image.'\nexec /usr/local/bin/x11docker-su\n\\\" >/usr/local/bin/x11docker-agetty\nchmod +x /usr/local/bin/x11docker-agetty\n\n### x11docker-watch\necho \\\"#! /bin/sh\n# Wait for end of x11docker and shut down container.\n# Started in background by x11docker for sysvinit|runit|openrc.\n. /usr/local/bin/x11docker-message\ndebugnote 'Running x11docker-watch'\nread Dummy <$(convertpath share \"$Timetosaygoodbyefifo\")\necho timetosaygoodbye >>$(convertpath share \"$Timetosaygoodbyefifo\")\ndebugnote 'x11docker-watch: $Initsystem shutdown now'\nshutdown 0\nsystemctl poweroff\nopenrc-shutdown --poweroff 0\nhalt\nhalt -f\npoweroff\n\\\" >/usr/local/bin/x11docker-watch\nchmod +x /usr/local/bin/x11docker-watch\n\n###\n\"\n  return 0\n}\nrootrc_create_locale() {\n  local Line\n  while read Line; do\n    echo \"\n# --lang: Language locale $Line\nverbose \\\"Searching for language locale matching $Line\\\"\nLocales=\\\"\\$(locale -a)\\\"\nLangall=\\\"\\$(cat /usr/share/i18n/SUPPORTED | grep -E 'UTF-8|utf8' | cut -d' ' -f1 | cut -d. -f1 | cut -d@ -f1 | sort | uniq)\\\"\nLangland=\\\"\\$(echo $Line | cut -d. -f1)\\\"\nLangcontainer=''\n\necho \\\"\\$Langland\\\" | grep -q '_' || {\n  Langland=\\\"\\$(echo \\$Langland | tr '[:upper:]' '[:lower:]')_\\$(echo \\$Langland | tr '[:lower:]' '[:upper:]')\\\"\n  echo \\\"\\$Langall\\\" | grep -q \\\"\\$Langland\\\" || {\n    echo \\\"\\$Langall\\\" | grep -i -q \\\"$Line\\\" && {\n      Langland=\\\"\\$(echo \\\"\\$Langall\\\" | grep -i -m1 \\\"$Line\\\")\\\"\n    }\n  }\n}\n\nLangland=\\\"\\$(echo \\\"\\$Langland\\\" | cut -d_ -f1 | tr '[:upper:]' '[:lower:]')_\\$(echo \\\"\\$Langland\\\" | cut -d_ -f2 | tr '[:lower:]' '[:upper:]')\\\"\n\necho \\\"\\$Locales\\\" | grep -q \\\"\\$Langland.UTF-8\\\" && Langcontainer=\\\"\\$Langland.UTF-8\\\"\necho \\\"\\$Locales\\\" | grep -q \\\"\\$Langland.utf8\\\"  && Langcontainer=\\\"\\$Langland.utf8\\\"\n\n[ -z \\\"\\$Langcontainer\\\" ] && {\n  [ -e /usr/share/i18n/SUPPORTED ] || note \\\"Option --lang: /usr/share/i18n/SUPPORTED not found.\n  Please install package 'locales' in image (belongs to glibc).\n  Look here to find a package for your image system:\n  https://github.com/mviereck/x11docker/wiki/dependencies#dependencies-in-image\\\"\n\n  Langcontainer=\\\"\\$Langland.utf8\\\"\n  note \\\"Option --lang: Generating language locale \\$Langcontainer\\\".\n  command -v localedef >/dev/null || note 'Option --lang: Command localedef not found in image.\n  Need it for language locale creation.\n  Look here to find a package for your image system:\n  https://github.com/mviereck/x11docker/wiki/dependencies#dependencies-in-image'\n  \n  localedef --verbose --force -i \\\"\\$Langland\\\" -f UTF-8 \\$Langcontainer || verbose \\\"localedef exit code: \\$?\\\"\n  \n  locale -a | grep -q \\\"\\$Langcontainer\\\" || {\n    note \\\"Option --lang: Generation of locale \\$Langcontainer failed.\\\"\n    Langcontainer=''\n  }\n} || {\n  debugnote \\\"Option --lang: Found locale in image: \\$Langcontainer\\\"\n}\n\n[ \\\"\\$Langcontainer\\\" ] && {\n  storeinfo locale=\\\"\\$Langcontainer\\\"\n  echo \\\"LANG=\\$Langcontainer\\\" > /etc/default/locale\n} || {\n  note 'Option --lang: Desired locale for '$Line' not found and not generated.'\n}\n\"\n  done < <(tac <<< \"$Langwunsch\" | grep . ||:)\n\necho \"\ndebugnote \\\"Option --lang: Output of locale -a:\n\\$(locale -a)\\\"\n\"\n  return 0\n}\nrootrc_nvidia_installer() {\n  # print code to install NVIDIA driver in container\n  # $Nvidiainstallerfile must be shared with container as $Nvidiacontainerfile\n  ### FIXME $Containerlibc\n  echo \"\n# Install NVIDIA driver\nNvidiaversion=\\\"\\$(nvidia-settings -v 2>/dev/null | grep version | rev | cut -d' ' -f1 | rev)\\\"\n[ \\\"\\$Nvidiaversion\\\" ] && note \\\"Found NVIDIA driver \\$Nvidiaversion in image.\\\"\ncase \\\"\\$Nvidiaversion\\\" in\n  $Nvidiaversion) note 'NVIDIA driver version in image matches version on host. Skipping installation.' ;;\n  *)\n    Installationwillsucceed=maybe\n    case \\\"\\$Containerlibc\\\" in\n      musl) note 'Installing NVIDIA driver in container systems\n  based on musl libc like Alpine is not possible due to\n  proprietary closed source policy of NVIDIA corporation.'\n        Installationwillsucceed=no\n      ;;\n    esac\n    [ \\\"\\$Installationwillsucceed\\\" = \\\"maybe\\\" ] && {\n      note 'Installing NVIDIA driver $Nvidiaversion in container.'\n      mkdir -m 1777 /tmp2\n      # provide fake tools to fool installer dependency check\n      ln -s /bin/true /tmp2/modprobe\n      ln -s /bin/true /tmp2/depmod\n      ln -s /bin/true /tmp2/lsmod\n      ln -s /bin/true /tmp2/rmmod\n      ln -s /bin/true /tmp2/ld\n      ln -s /bin/true /tmp2/objcopy\n      ln -s /bin/true /tmp2/insmod\n      Nvidiaoptions='--accept-license --no-runlevel-check --no-questions --no-backup --ui=none --no-kernel-module --no-nouveau-check'\n      env TMPDIR=/tmp2 PATH=\\\"/tmp2:\\$PATH\\\" sh $Nvidiacontainerfile -A | grep -q -- '--install-libglvnd'        && Nvidiaoptions=\\\"\\$Nvidiaoptions --install-libglvnd\\\"\n      env TMPDIR=/tmp2 PATH=\\\"/tmp2:\\$PATH\\\" sh $Nvidiacontainerfile -A | grep -q -- '--no-nvidia-modprobe'      && Nvidiaoptions=\\\"\\$Nvidiaoptions --no-nvidia-modprobe\\\"\n      env TMPDIR=/tmp2 PATH=\\\"/tmp2:\\$PATH\\\" sh $Nvidiacontainerfile -A | grep -q -- '--no-kernel-module-source' && Nvidiaoptions=\\\"\\$Nvidiaoptions --no-kernel-module-source\\\"\n      env TMPDIR=/tmp2 PATH=\\\"/tmp2:\\$PATH\\\" sh $Nvidiacontainerfile --tmpdir /tmp2 \\$Nvidiaoptions || note 'ERROR: Installation of NVIDIA driver failed.\n  Run with option --verbose to see installer output.'\n      rm -R /tmp2 && unset TMPDIR\n    } || note 'Skipping installation of $Nvidiacontainerfile'\n  ;;\nesac\"\n  return 0\n}\nrootrc_prepare_dbus() {\n  echo \"\n# check /etc/machine-id\n[ -s /etc/machine-id ] || dbus-uuidgen >/etc/machine-id\n# Prepare DBus services\nUnservicelist='\norg.bluez\norg.bluez.obex\norg.freedesktop.hostname1\norg.freedesktop.network1\norg.freedesktop.resolve1\norg.freedesktop.secrets\norg.freedesktop.timedate1\norg.freedesktop.Tracker1\norg.freedesktop.Tracker1.Miner.Extract\norg.freedesktop.UDisks2\norg.freedesktop.UPower\norg.gtk.vfs.UDisks2VolumeMonitor\norg.opensuse.CupsPkHelper.Mechanism\ncom.deepin.daemon.Bluetooth\ncom.deepin.daemon.Grub2\ncom.deepin.daemon.Power\ncom.deepin.lastore\ncom.deepin.lastore.Smartmirror\ncom.deepin.sync.Daemon\ncom.deepin.sync.Helper\ncom.deepin.userexperience.Daemon\n'\n#      ### FIXME test\n#      Service=/etc/init.d/elogind\n#      echo 'output_log=$(convertpath share $Containerlogfile)' >> \\$Service\n#      echo 'error_log=$(convertpath share $Containerlogfile)' >> \\$Service\n#      cat \\$Service\n\nfor Service in /usr/share/dbus-1/system-services/* /usr/share/dbus-1/services/*; do  # find is not available on fedora\n  Name=\\\"\\$(cat \\$Service | grep Name= | cut -d= -f2)\\\"\n  Command=\\\"\\$(cat \\\"\\$Service\\\" | grep Exec= | cut -d= -f2)\\\"\n  echo \\\"\\$Unservicelist\\\" | grep -q -w \\\"\\$Name\\\" && {\n    debugnote \\\"DBus: Removing \\$Name: \\$Service\\\"\n    rm \\\"\\$Service\\\"\n  }\n  case \\\"\\$Name\\\" in\n\"\n  [ \"$Initsystem\" != \"systemd\" ] && {\n    echo \"\n    org.freedesktop.systemd1|org.freedesktop.hostname1|org.freedesktop.locale1)\n      debugnote \\\"DBus: Removing \\$Name: \\$Service\\\"\n      rm \\\"\\$Service\\\"\n    ;;\n\"\n  }\n  echo \"\n    org.freedesktop.login1)\n      debugnote \\\"DBus: Found login service \\$Name: \\$Command\\\"\n\"\n  [ \"$Sharecgroup\" = \"no\" ] && [ \"$Cgroupversion\" = \"v1\" ] && {\n    echo \"\n      debugnote \\\"DBus: \\$Name: Removing \\$Service\\\"\n      rm \\\"\\$Service\\\"\n      echo \\\"\\$Command\\\" | grep -q elogind && {\n        note 'Found login service elogind in container\n  and cgroup v1 on host.\n  If you want to use elogind in container, enable option --sharecgroup.'\n      }\n\"\n  }\n  echo \"\n    ;;\n  esac\ndone\n\"\n  return 0\n}\nrootrc_prepare_init_openrc() {\n  echo \"\n# --init=openrc\n\n# Tell openrc that it runs in a container\nsed -e 's/#rc_sys=\\\"\\\"/rc_sys=\\\"$Backend\\\"/g' -i /etc/rc.conf\n\n# Create and enable x11docker service containing container command\nprintf \\\"#!/sbin/openrc-run\nname=x11docker\ndepend() {\n  after *\n}\nstart() {\n  ebegin 'Starting x11docker-agetty'\n  /usr/local/bin/x11docker-agetty\n  openrc-shutdown --poweroff 0\n  shutdown 0\n  halt\n  halt -f\n  eend \\$?\n}\n\\\" > /etc/init.d/x11docker.service\nchmod +x /etc/init.d/x11docker.service\nrc-update add x11docker.service default\n\n# DBus service\n[ -e /etc/init.d/dbus ] || echo '#!/sbin/openrc-run\nstart() {\n  ebegin \\\"Starting D-BUS system messagebus\\\"\n  /usr/bin/dbus-uuidgen --ensure=/etc/machine-id\n  mkdir -p /var/run/dbus\n  start-stop-daemon --start --pidfile /var/run/dbus.pid --exec /usr/bin/dbus-daemon -- --system\n  eend \\$?\n}\nstop() {\n  ebegin \\\"Stopping D-BUS system messagebus\\\"\n  start-stop-daemon --stop --pidfile /var/run/dbus.pid\n  retval=\\$?\n  eend \\${retval}\n  [ -S /var/run/dbus/system_bus_socket ] && rm -f /var/run/dbus/system_bus_socket\n  return \\${retval}\n}\nreload() {\n  ebegin \\\"Reloading D-BUS messagebus config\\\"\n  /usr/bin/dbus-send --print-reply --system --type=method_call --dest=org.freedesktop.DBus / org.freedesktop.DBus.ReloadConfig > /dev/null\n  retval=\\$?\n  eend \\${retval}\n  return \\${retval}\n}\n' >/etc/init.d/dbus && chmod +x /etc/init.d/dbus\nverbose 'DBus: enabling dbus service'\nrc-update add dbus default\n\"\n  return 0\n}\nrootrc_prepare_init_runit() {\n  echo \"\n# --init=runit\n\n# create and enable x11docker service containing container command\nmkdir -p /etc/sv/x11docker\nmkdir -p /etc/runit/runsvdir/default\nmkdir -p /etc/runit/1.d\nmkdir -p /service\n\necho \\\"#! /bin/sh\n$(declare -f mysleep)\nwaitforservice() {\n  Service=\\\\\\$1\n  [ \\\\\\\"\\\\\\$(sv check \\\\\\$Service | cut -d: -f1)\\\\\\\" = 'ok' ] && {\n    echo \\\"x11docker: waiting for service \\\\\\$Service ...\\\"\n    for Count in $(seq -s' ' 20); do\n      [ \\\\\\\"\\\\\\$(sv status \\\\\\$Service | cut -d: -f1)\\\\\\\" = 'down' ] && mysleep 0.2 || break\n    done\n  }\n}\n# make stderr visible\nexec 2>&1\n# wait for all other services\necho 'Content of /etc/runit/runsvdir/default:'\nls -la /etc/runit/runsvdir/default/*\nfor Service in /etc/runit/runsvdir/default/* ; do waitforservice \\\\\\$Service ;done\necho 'Current status of runit services:'\nfor Service in /etc/runit/runsvdir/default/* ; do sv status      \\\\\\$Service ;done\n/usr/local/bin/x11docker-agetty\n\\\" > /etc/sv/x11docker/run\n\nchmod +x /etc/sv/x11docker/run\n\necho \\\"#! /bin/sh\nsv down x11docker\nrunit-init 0\ninit 0\nshutdown -h 0\nhalt\n\\\" > /etc/sv/x11docker/finish\n\nchmod +x /etc/sv/x11docker/finish\n\nln -s /etc/sv/x11docker /etc/runit/runsvdir/default #void\nln -s /etc/sv/x11docker /service                    #alpine\n\n[ -e /etc/runit/1 ] || echo '#!/usr/bin/env sh\nset -eu\nchmod 100 /etc/runit/stopit\n/bin/run-parts --exit-on-error /etc/runit/1.d || exit 100\n' >/etc/runit/1\n\nchmod +x /etc/runit/1\n\n[ -e /etc/runit/2 ] || echo '#!/usr/bin/env sh\nset -eu\nrunsvdir -P /service \\\"log: ..................................................................\\\"\n' >/etc/runit/2\n\nchmod +x /etc/runit/2\n\n[ -e /etc/runit/3 ] || echo \\\"#!/usr/bin/env sh\nset -eu\nexec 2>&1\necho \\\"Waiting for services to stop...\\\"\nsv -w196 force-stop /service/*\nsv exit /service/*\n# kill any other processes still running in the container\nfor ORPHAN_PID in \\$(ps --no-headers -eo \\\"%p,\\\" -o stat | tr -d \\\" \\\" | grep \\\"Z\\\" | cut -d, -f1); do\n    timeout 5 /bin/sh -c \\\"kill \\$ORPHAN_PID && wait \\$ORPHAN_PID || kill -9 \\$ORPHAN_PID\\\"\ndone\n\\\" >/etc/runit/3\n\nchmod +x /etc/runit/3\n\n[ -e /etc/sv/dbus ] || {\n  mkdir -p /etc/sv/dbus\n  echo '#!/bin/sh\n[ ! -d /run/dbus ] && install -m755 -g 22 -o 22 -d /run/dbus\nexec dbus-daemon --system --nofork --nopidfile\n' >/etc/sv/dbus/run\n\n  echo '#!/bin/sh\nexec dbus-send --system / org.freedesktop.DBus.Peer.Ping > /dev/null 2> /dev/null\n' >/etc/sv/dbus/check\n  chmod +x /etc/sv/dbus/run /etc/sv/dbus/check\n}\nverbose 'DBus: enabling dbus service'\nln -s /etc/sv/dbus  /etc/runit/runsvdir/default  # void\nln -s /etc/sv/dbus  /service                     # alpine\n\ntouch /etc/runit/stopit\n\"\n  return 0\n}\nrootrc_prepare_init_systemd() {\n  echo \"\n# --init=systemd\n\n# remove failing and annoying services\nUnservicelist='\napt-daily.service\napt-daily.timer\napt-daily-upgrade.service\napt-daily-upgrade.timer\nbluetooth.service\ncgproxy.service\ndeepin-anything-monitor.service\ndeepin-sync-daemon.service\ndisplay-manager.service\nfprintd.service\ngdm3.service\ngvfs-udisks2-volume-monitor.service\nhwclock_stop.service\nlastore-daemon.service\nlastore-update-metadata-info.service\nlightdm.service\nNetworkManager.service\nplymouth-quit.service\nplymouth-quit-wait.service\nplymouth-read-write.service\nplymouth-start.service\nrtkit-daemon.service\nsddm.service\nsystemd-localed.service\nsystemd-hostnamed.service\ntracker-extract.service\ntracker-miner-fs.service\ntracker-store.service\ntracker-writeback.service\nudisks2.service\nupower.service\n'\nfor Service in \\$(find /lib/systemd/system/* /usr/lib/systemd/user/* /etc/systemd/system/* /etc/systemd/user/*) ; do\n  echo \\\"\\$Unservicelist\\\" | grep -q \\\"\\$(basename \\$Service)\\\" && {\n    debugnote \\\"--init=systemd: Removing \\$Service\\\"\n    rm \\$Service\n  }\ndone\n\n# Fix for Gnome 3\nsed -i 's/ProtectHostname=yes/ProtectHostname=no/' /lib/systemd/system/systemd-logind.service\n\n# create systemd units for x11docker\n\nmkdir -p /etc/systemd/system.conf.d\necho \\\"[Manager]\nDefaultEnvironment=$(while read -r Line; do echo -n \"$Line \" ; done < <(store_runoption dump env))\n\\\" > /etc/systemd/system.conf.d/x11docker.environment.conf\n\necho \\\"[Unit]\nDescription=x11docker target\nWants=multi-user.target\nAfter=multi-user.target\n[Install]\nAlso=console-getty.service\nAlso=x11docker-watch.service\nAlso=x11docker-journal.service\n\\\" > /etc/systemd/system/x11docker.target\n\necho \\\"[Unit]\nDescription=x11docker agetty service\n# initiate console\n# runs x11docker-agetty->x11docker-su or login->containerrc->cmdrc\nWants=multi-user.target\nWants=x11docker-watch.service\nWants=x11docker-journal.service\nWants=dbus.service\nAfter=systemd-user-sessions.service\nAfter=rc-local.service getty-pre.target\nBefore=getty.target\n[Service]\nExecStart=/usr/local/bin/x11docker-agetty\nStandardInput=tty\nStandardOutput=tty\nType=idle\nUtmpIdentifier=cons\nTTYPath=/dev/console\nTTYReset=yes\nTTYVHangup=yes\nKillMode=process\nIgnoreSIGPIPE=no\nSendSIGHUP=yes\n[Install]\nWantedBy=x11docker.target\nWantedBy=getty.target\nWantedBy=multi-user.target\n\\\" > /lib/systemd/system/console-getty.service\n\necho \\\"[Unit]\nDescription=x11docker watch service\n# Watches for end of containerrc and initiates shutdown\n[Service]\nType=simple\nExecStart=/bin/sh -c 'while sleep 1; do systemctl is-active console-getty >/dev/null || { echo timetosaygoodbye >>$(convertpath share \"$Timetosaygoodbyefile\") ; systemctl halt ; } ; [ -s $(convertpath share \"$Timetosaygoodbyefile\") ] && systemctl halt ; done'\n[Install]\nWantedBy=x11docker.target\n\\\" > /etc/systemd/system/x11docker-watch.service\n\necho \\\"[Unit]\nDescription=x11docker containerrc service\n[Service]\nType=simple\nExecStart=sh $(convertpath share \"$Containerrc\")\n[Install]\nWantedBy=default.target\n\\\" > /etc/systemd/user/x11docker-containerrc.service\n\necho \\\"[Unit]\nDescription=x11docker journal log service\n# get systemd log to transfer it into x11docker.log\n[Service]\nType=simple\nExecStart=/bin/sh -c '/bin/journalctl --follow --no-tail >> $(convertpath share \"$Systemdjournallogfile\") 2>&1'\n[Install]\nWantedBy=x11docker.target\n\\\" > /etc/systemd/system/x11docker-journal.service\n\n# enable x11docker CMD service\nsystemctl unmask console-getty.service\nsystemctl enable console-getty.service\nsystemctl enable x11docker-journal.service\n\n# enable logind service\nsystemctl unmask systemd-logind\nsystemctl enable systemd-logind\n\n# enable DBus service\nsystemctl unmask dbus\nsystemctl enable dbus\n\"\n  return 0\n}\nrootrc_prepare_init_sysvinit() {\n  echo \"\n# --init=sysvinit\n# Adding x11docker start command to rc.local\nsed -i '/exit 0/d' /etc/rc.local\n\necho \\\"\n/usr/local/bin/x11docker-agetty || echo \\\\\\\"x11docker: Exit code of x11docker-agetty: \\\\\\$?\\\\\\\"\necho 'x11docker: rc.local sends shutdown -h now'\nshutdown -h now\nexit 0\n\\\" >> /etc/rc.local\n\nchmod +x /etc/rc.local\n\n# DBus service\necho '#!/bin/sh\n### BEGIN INIT INFO\n# Provides:          dbus\n# Required-Start:    \\$remote_fs \\$syslog\n# Required-Stop:     \\$remote_fs \\$syslog\n# Default-Start:     2 3 4 5\n# Default-Stop:\n# Short-Description: D-Bus systemwide message bus\n# Description:       D-Bus is a simple interprocess messaging system, used\n#                    for sending messages between applications.\n### END INIT INFO\n# -*- coding: utf-8 -*-\n# Debian init.d script for D-BUS\n# Copyright © 2003 Colin Walters <walters@debian.org>\n# Copyright © 2005 Sjoerd Simons <sjoerd@debian.org>\n#\nDAEMON=/usr/bin/dbus-daemon\nUUIDGEN=/usr/bin/dbus-uuidgen\nUUIDGEN_OPTS=--ensure\nNAME=dbus\nDAEMONUSER=messagebus\nPIDDIR=/var/run/dbus\nPIDFILE=\\\"\\$PIDDIR/pid\\\"\nDESC=\\\"system message bus\\\"\n#\ntest -x \\$DAEMON || exit 1\n. /lib/lsb/init-functions\n# Source defaults file; edit that file to configure this script.\nPARAMS=\"\"\nif [ -e /etc/default/dbus ]; then\n  . /etc/default/dbus\nfi\ncreate_machineid() {\n  # Create machine-id file\n  if [ -x \\$UUIDGEN ]; then\n    \\$UUIDGEN \\$UUIDGEN_OPTS\n  fi\n}\nstart_it_up() {\n  [ -d \\$PIDDIR ] || {\n    mkdir -p \\$PIDDIR\n    chown \\$DAEMONUSER \\$PIDDIR\n    chgrp \\$DAEMONUSER \\$PIDDIR\n  }\n  mountpoint -q /proc/ || {\n    log_failure_msg \\\"Cannot start \\$DESC - /proc is not mounted\\\"\n    return 1\n  }\n  [ -e \\$PIDFILE ] && {\n    \\$0 status > /dev/null && {\n      log_success_msg \\\"\\$DESC already started; not starting.\\\"\n      return 0\n    }\n    log_success_msg \\\"Removing stale PID file \\$PIDFILE.\\\"\n    rm -f \\$PIDFILE\n  }\n  create_machineid\n  log_daemon_msg \\\"Starting \\$DESC\\\" \\\"\\$NAME\\\"\n  start-stop-daemon --start --quiet --pidfile \\$PIDFILE --exec \\$DAEMON -- --system \\$PARAMS\n  log_end_msg \\$?\n}\nshut_it_down() {\n  log_daemon_msg \\\"Stopping \\$DESC\\\" \\\"\\$NAME\\\"\n  start-stop-daemon --stop --retry 5 --quiet --oknodo --pidfile \\$PIDFILE --user \\$DAEMONUSER\n  log_end_msg \\$?\n  rm -f \\$PIDFILE\n}\nreload_it() {\n  create_machineid\n  log_action_begin_msg \\\"Reloading \\$DESC config\\\"\n  dbus-send --print-reply --system --type=method_call --dest=org.freedesktop.DBus / org.freedesktop.DBus.ReloadConfig > /dev/null\n  log_action_end_msg \\$?\n}\ncase \\$1 in\n  start) start_it_up ;;\n  stop)  shut_it_down ;;\n  reload|force-reload) reload_it ;;\n  restart)\n    shut_it_down\n    start_it_up\n  ;;\n  status) status_of_proc -p \\$PIDFILE \\$DAEMON \\$NAME && exit 0 || exit \\$? ;;\nesac\n' > /etc/init.d/dbus\nchmod +x /etc/init.d/dbus\n\"\n  return 0\n}\nrootrc_setup_user() {\n  local Line\n\n  echo \"\n# Set up container user\n\"\n  case \"$Containerusershell\" in\n    auto) echo \"bash --version >/dev/null 2>&1 && Containerusershell=/bin/bash || Containerusershell=/bin/sh\" ;;\n    *)    echo \"Containerusershell='$Containerusershell'\" ;;\n  esac\n\n  echo \"\n# /etc/passwd\nContaineruserentry=\\\"\\$Containeruser:x:$Containeruseruid:$Containerusergid:\\$Containeruser,,,:\\$Containeruserhome:\\$Containerusershell\\\"\ndebugnote \\\"containerrootrc: \\$Containeruserentry\\\"\n\n# Disable possible /etc/shadow passwords for other users\n# Delete root user\n# Delete possibly existing user with same uid\nsed -i 's%:x:%:-:% ; /:0:0:/d ; /:$Containeruseruid:/d' /etc/passwd\n\necho \\\"\\$Containeruserentry\\\" >> /etc/passwd\necho \\\"root:-:0:0:root:/root:\\$Containerusershell\\\" >> /etc/passwd\n\n# Create password entry for container user in /etc/shadow\nrm -f -v /etc/shadow || warning 'Cannot change /etc/shadow. That may be a security risk.'\necho \\\"\\$Containeruser:\\\"'$Containeruserpassword'\\\":17293:0:99999:7:::\\\" > /etc/shadow\nchown root:shadow /etc/shadow\n\"\n  case \"$Sudouser\" in\n    \"\")  echo \"echo 'root:*:17219:0:99999:7:::' >> /etc/shadow\" ;;\n    *)   echo \"echo 'root:$Containeruserpassword:17219:0:99999:7:::' >> /etc/shadow  # with option --sudouser, set root password 'x11docker'\"\n         echo \"sed -i 's%root:-:%root:x:%' /etc/passwd                               # allow password\"\n    ;;\n  esac\n\n  echo \"\nchmod 640 /etc/shadow   # can fail depending on available capabilities\n\n# sudo configuration\n# Create /etc/sudoers, delete /etc/sudoers.d. Overwrite possible sudo setups in image.\n[ -e /etc/sudoers.d ] && rm -f -v -R /etc/sudoers.d\n[ -e /etc/sudoers ]   && rm -f -v /etc/sudoers\necho '# /etc/sudoers created by x11docker' > /etc/sudoers\necho 'Defaults\tenv_reset'                >> /etc/sudoers\necho 'root ALL=(ALL) ALL'                 >> /etc/sudoers\n\"\n  case \"$Sudouser\" in\n    yes)      echo \"echo '$Containeruser ALL=(ALL) ALL' >> /etc/sudoers\" ;;\n    nopasswd) echo \"echo '$Containeruser ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers\" ;;\n  esac\n\n  # try to disable possible custom PAM setups that could allow a switch to root in container ### FIXME maybe not foolproof\n  [ -z \"$Sudouser\" ] && {\n    echo \"# /etc/pam.d\n# Restrict PAM configuration of su and sudo\nmkdir -p /etc/pam.d\n[ -e /etc/pam.d/sudo ] && rm -f -v /etc/pam.d/sudo\ncase \\\"\\$Containersystem\\\" in\n  fedora)\n    echo '#%PAM-1.0' > /etc/pam.d/su\n    echo 'auth     sufficient pam_rootok.so'  >> /etc/pam.d/su\n#    echo 'auth     substack system-auth'      >> /etc/pam.d/su\n#    echo 'auth     include postlogin'         >> /etc/pam.d/su\n    echo 'account  sufficient pam_succeed_if.so uid = 0 use_uid quiet'  >> /etc/pam.d/su\n#    echo 'account  include system-auth'       >> /etc/pam.d/su\n#    echo 'password include system-auth'       >> /etc/pam.d/su\n    echo 'session  include system-auth'       >> /etc/pam.d/su\n    echo 'session  include  postlogin'        >> /etc/pam.d/su\n    echo 'session  optional pam_xauth.so'     >> /etc/pam.d/su\n  ;;\n  *)\n    echo '#%PAM-1.0' > /etc/pam.d/su\n    echo 'auth sufficient pam_rootok.so' >> /etc/pam.d/su  # allow root to switch user without a password\n    echo '@include common-auth'          >> /etc/pam.d/su\n    echo '@include common-account'       >> /etc/pam.d/su\n    echo '@include common-session'       >> /etc/pam.d/su\n  ;;\nesac\n\"\n  }\n\n  echo \"# /etc/group /etc/gshadow\nsed -i \\\"s/\\$Containeruser//g ; s/:,/:/g ; s/,\\$//g\\\" /etc/group   # remove existing entries for user in /etc/group\nsed -i \\\"s/\\$Containeruser//g ; s/:,/:/g ; s/,\\$//g\\\" /etc/gshadow # remove existing entries for user in /etc/gshadow\n\"\n  for Line in $Containerusergroups ; do\n    echo \"\nGroupname=\\\"$(cat /etc/group 2>/dev/null | grep \"^$Line\" | cut -d: -f1)\\\"\nGroupid=\\\"$(cat /etc/group   2>/dev/null | grep \"^$Line\" | cut -d: -f3)\\\"\n[ \\\"\\$Groupname\\\" ] || Groupname=\\\"\\$(cat /etc/group | grep \\\"$Line\\\" | cut -d: -f1)\\\"\n[ \\\"\\$Groupid\\\" ]   || Groupid=\\\"\\$(cat /etc/group | grep \\\"$Line\\\" | cut -d: -f3)\\\"\n[ \\\"\\$Groupname\\\" ] && {\n  # /etc/group\n  Entry=\\\"\\$(grep \\$Groupname /etc/group)\\\"\n  Entry=\\\"\\$(echo \\\"\\$Entry\\\" | cut -d: -f3-)\\\"\n  [ -z \\\"\\$Entry\\\" ] && Entry=\\\"\\$Groupid:\\\"\n  Entry=\\\"\\$Groupname:x:\\$Entry,\\$Containeruser\\\"\n  Entry=\\\"\\$(echo \\\"\\$Entry\\\" | sed 's/:,/:/g')\\\"\n  sed -i \\\"/^\\$Groupname:/d\\\" /etc/group\n  echo \\\"\\$Entry\\\" >> /etc/group\n  # /etc/gshadow\n  Entry=\\\"\\$(grep \\$Groupname /etc/gshadow)\\\"\n  Entry=\\\"\\$(echo \\\"\\$Entry\\\" | cut -d: -f4)\\\"\n  Entry=\\\"\\$Groupname:!::\\$Entry,\\$Containeruser\\\"\n  Entry=\\\"\\$(echo \\\"\\$Entry\\\" | sed 's/:,/:/g')\\\"\n  sed -i \\\"/^\\$Groupname:/d\\\" /etc/gshadow\n  echo \\\"\\$Entry\\\" >> /etc/gshadow\n} || {\n  note \\\"Failed to add container user to group '$Line'.\\\"\n}\n# Create user group entry (and delete possibly existing same gid)\nsed -i '/:$Containerusergid:/d' /etc/group\necho \\\"$Containerusergroup:x:$Containerusergid:\\\" >> /etc/group\nsed -i '/:$Containerusergid:/d' /etc/gshadow\necho \\\"$Containerusergroup:!::\\\" >> /etc/gshadow\nsed -i -e 's/\\(:\\).*\\(:\\)/\\1!:\\2/' /etc/gshadow # remove possible passwords\n\"\n  done\n\n  return 0\n}\nrootrc_timezone() {\n  echo \"\n# Time zone\n[ ! -d /usr/share/zoneinfo ] && [ \\\"\\$Containerlibc\\\" = \\\"$Hostlibc\\\" ] && {\n  mkdir -p $(dirname \"$Hostlocaltimefile\")\n  cp '$(convertpath share \"$Containerlocaltimefile\")' '$Hostlocaltimefile'\n}\n[ -e '$Hostlocaltimefile' ] && ln -f -s '$Hostlocaltimefile' /etc/localtime\n\"\n  return 0\n}\nrootrc_xrandr() {\n  echo \"\n# workaround: autostart of xrandr for some desktops like deepin, cinnamon and gnome to fix wrong autoresize\necho '#! /bin/sh\nOutput=\\$(xrandr | grep \\\" connected\\\" | cut -d\\\" \\\" -f1)\nMode=$Screensize\nxrandr --output \\$Output --mode \\$Mode\n' > /usr/local/bin/x11docker-xrandr\n\nchmod +x /usr/local/bin/x11docker-xrandr\nmkdir -p /etc/xdg/autostart\n\necho '[Desktop Entry]\nEncoding=UTF-8\nVersion=0.9.4\nType=Application\nName=x11docker-xrandr\nComment=\nExec=/usr/local/bin/x11docker-xrandr\n' > /etc/xdg/autostart/x11docker-xrandr.desktop\n\n\"\n  return 0\n}\n\n#### final startup routines\nstart_container() {             # docker run\n  # create containerrc -> runs as unprivileged user in container\n  # check and set up cgroup on host for systemd or elogind\n  # run docker\n  local Containerid= Containerip= Containerinspect=\n  local Failure= Pid1pid=\n\n#  [ \"$Winsubsystem\" = \"MSYS2\" ] && {  ### FIXME check if needed\n#    # avoid path conversion in MSYS2 commands\n#    export MSYS2_ARG_CONV_EXCL='*'\n#  }\n\n  debugnote \"start_container(): Running image\"\n\n  case \"$Interactive\" in\n    no)\n      case \"$Backend\" in\n        host)  unpriv \"bash '$Containerrc'\" & Pid1pid=$! ;;\n        proot) unpriv \"$Backendcommand\" & Pid1pid=$! ;;\n        docker|podman|nerdctl)\n          unpriv_backend \"$Backendcommand\" >> $Containerlogfile 2>&1 ||: &\n        ;;\n      esac\n    ;;\n    yes)\n      case \"$Backend\" in\n        host)  unpriv \"bash '$Containerrc'\" <&0 & Pid1pid=$! ;;\n        proot) unpriv \"$Backendcommand\"     <&0 & Pid1pid=$! ;;\n        docker|podman|nerdctl)\n          [ \"$Winpty\" ] && {\n            $Winpty bash \"$(oneline \"$Backendcommand\")\" <&0 &\n          } || {\n            unpriv_backend \"$Backendcommand\" <&0 &\n          }\n        ;;\n      esac\n    ;;\n  esac\n\n  case \"$Backend\" in\n    proot|host) ;;\n    docker|podman|nerdctl)\n      # Wait for container to be ready\n      debugnote \"start_container(): Running repeated checks if container is ready.\"\n      for ((Count=1 ; Count<=40 ; Count++)); do\n        unpriv_backend \"$Backendbin exec $Containername sh -c ':'\" 2>&1 | rmcr >> $Containerlogfile && {\n          debugnote 'start_container(): Container is up and running.'\n          break\n        } || {\n          debugnote \"start_container(): Container not ready on ${Count}. attempt, trying again.\"\n        }\n        rocknroll || break\n        mysleep 0.1\n      done\n\n      # Wait for pid 1 in container\n      for ((Count=1 ; Count<=40 ; Count++)); do\n        debugnote \"start_container(): $Count. check for PID 1\"\n        Containerinspect=\"$(unpriv_backend \"$Backendbin inspect $Containername\" 2>> $Containerlogfile | rmcr)\" ||:\n        [ -n \"$Containerinspect\" ] && [ \"$Containerinspect\" != \"[]\" ] && Pid1pid=\"$(parse_inspect \"$Containerinspect\" \"State\" \"Pid\")\"\n        case \"$Mobyvm\" in\n          no)  checkpid \"$Pid1pid\" && break ;;\n          yes) [ \"$Pid1pid\" ] && [ \"$Pid1pid\" != \"0\" ] && break\n        esac\n        rocknroll || break\n        mysleep 0.1\n      done\n      [ \"$Pid1pid\" = \"0\" ] && Pid1pid=\"\"\n      debugnote \"start_container(): PID1=$Pid1pid\"\n\n      [ -z \"$Pid1pid\" ] && error \"start_container(): Did not receive PID of PID1 in container.\n  Maybe the container immediately stopped for unknown reasons.\n  Just in case, check if host and image architecture are compatible:\n  Host architecture: $Hostarchitecture, image architecture: $Imagearchitecture.\n\n  Content of container log:\n$(rmcr < \"$Containerlogfile\" | uniq )\"\n\n      # store stdout and stderr\n      [ \"$Containersetup\" = \"no\" ] && {\n        # Store container output separated for stdout and stderr\n        unpriv_backend \"$Backendbin logs -f $Containername\" 1>> \"$Cmdstdoutlogfile\" 2>> \"$Cmdstderrlogfile\" & ### FIXME rootless, unpriv\n        storepid $! dockerlogs\n      }\n\n      # Get IP of container\n      case \"$Xcnetworkid\" in\n        \"\")\n          Containerip=\"$(parse_inspect \"$Containerinspect\" \"NetworkSettings\" \"IPAddress\")\"\n        ;;\n        *)\n          Containerip=\"$(parse_inspect \"$Containerinspect\" \"NetworkSettings\" \"Networks\" \"$Xcnetworkname\" \"IPAddress\")\"\n        ;;\n      esac\n      storeinfo \"containerip=$Containerip\"\n\n      # Get ID of container\n      Containerid=\"$(parse_inspect \"$Containerinspect\" \"Id\")\"\n      storeinfo \"containerid=$Containerid\"\n\n      # --init=systemd cgroupv2\n      [ \"$Remountcgroup\" = \"yes\" ] && {\n        # Compare https://github.com/mviereck/x11docker/issues/349\n        Remountcommand=\"$Backendbin run --rm --user root\"\n        Remountcommand=\"$Remountcommand --cap-add SYS_ADMIN --cap-add=SYS_PTRACE --security-opt apparmor=unconfined\"\n        Remountcommand=\"$Remountcommand --pid=container:$Containerid\"\n        Remountcommand=\"$Remountcommand --entrypoint /usr/bin/env\"\n        [ \"$Runtime\" ] && Remountcommand=\"$Remountcommand --runtime $Runtime\"\n        Remountcommand=\"$Remountcommand -- $Imagename\"\n        Remountcommand=\"$Remountcommand nsenter -t 1 -m -C -p /bin/sh -c '\"\n        Remountcommand=\"$Remountcommand         set -x ; \"\n        Remountcommand=\"$Remountcommand         findmnt /sys/fs/cgroup -O rw || mount -v -o remount,rw /sys/fs/cgroup/ ; \"\n        Remountcommand=\"$Remountcommand         findmnt /sys/fs/cgroup -O rw || echo \\\"ERROR: cgroup mount failed.:NOTE\\\" >>/x11docker/message.fifo ; \"\n        Remountcommand=\"$Remountcommand         touch /nsenter_is_ready'\"\n        debugnote \"start_container(): Remounting /sys/fs/cgroup to :rw with nsenter:\n  $Remountcommand\"\n        echo \"cgroup mount with nsenter:\" >> \"$Containerlogfile\"\n        unpriv_backend \"$Remountcommand\" >> \"$Containerlogfile\" 2>&1 || {\n          note \"Option --init=$Initsystem: Failed to remount /sys/fs/cgroup\n  in container. Startup of systemd might fail.\n  nsenter command:\n    $Remountcommand\n  Last lines of log:\n$(tail \"$Containerlogfile\")\"\n        }\n      }\n    ;;\n  esac\n  storeinfo \"pid1pid=$Pid1pid\"\n\n  # Check log for startup failure\n  Failure=\"$(rmcr < \"$Containerlogfile\" | grep -v grep | grep -E 'OCI runtime exec' ||:)\"\n  [ \"$Failure\" ] && {\n    echo \"$Failure\" >> \"$Containerlogfile\"\n    error \"start_container(): Got error message from backend $Backend:\n$Failure\n\n  Last lines of logfile:\n$(tail \"$Containerlogfile\")\"\n  }\n\n  # start containerrootrc\n  [ \"$Switchcontaineruser\" = \"no\" ] && [ \"$Containersetup\" = \"yes\" ] && {\n    debugnote \"start_container(): Starting containerrootrc with $Backend exec\"\n    # copy containerrootrc inside of container to avoid possible noexec of host home.\n    case \"$Backend\" in\n      proot) ### FIXME currently with Switchcontaineruser=yes only\n      ;;\n      host) ;; # no containerrootrc\n      docker|podman|nerdctl)\n        # copy to /tmp because host HOME might be nosuid or noexec\n        # run container root setup. containerrc will wait until setup script is ready.\n        unpriv_backend \"$Backendbin exec -u root $Containername sh -c 'cp $(convertpath share \"$Containerrootrc\") /tmp/containerrootrc ; chmod 644 /tmp/containerrootrc ; exec /bin/sh /tmp/containerrootrc'\" 2>&1 | rmcr >> $Containerlogfile\n      ;;\n    esac\n  }\n\n  return 0\n}\nstart_compositor() {            # start Wayland compositor Weston or KWin\n  local Compositorkeyword\n\n  case \"$Xserver\" in\n    --weston|--weston-xwayland|--xpra-xwayland|--xpra2-xwayland) Compositorkeyword=\"weston-desktop-shell\" ;;\n    --kwin|--kwin-xwayland)                                      Compositorkeyword=\"XKEYBOARD\" ;;\n  esac\n\n  case \"$Xcontainer\" in\n    yes)\n      unpriv_xcbackend \"$Xcontainerbackend exec --detach $Xcontainername sh -c '$Compositorcommand >> $Compositorlogfile  2>&1'\" 2>> $Compositorlogfile\n      Compositorpid=\"$(ps aux | grep weston | grep \"$Newwaylandsocket\" | head -n1 | awk '{print $2}')\"\n    ;;\n    no)\n      unpriv \"$Compositorcommand  >> '$Compositorlogfile'  2>&1 & echo compositorpid=\\$! >> '$Storeinfofile'\"\n      Compositorpid=\"$(storeinfo dump compositorpid)\"\n    ;;\n  esac\n  storeinfo \"compositorpid=$Compositorpid\"\n  waitforlogentry \"start_compositor()\" \"$Compositorlogfile\" \"$Compositorkeyword\" \"$Compositorerrorcodes\"\n  setonwatchpidlist \"$(storeinfo dump compositorpid)\" compositor\n\n  case \"$Xserver\" in\n    --xpra-xwayland|--xpra2-xwayland)  # hide weston window\n      xtool \"xdotool windowunmap 0x$(printf '%x\\n' $(grep 'window id' \"$Compositorlogfile\" | rev | cut -d' ' -f1 | rev))\" ;;\n  esac\n  return 0\n}\nstart_xcontainer() {            # --xc\n  local Containerinspect Xpid1pid\n\n  read Xcontainerid< <(unpriv_xcbackend \"$Xcontainercommand\" 2>> $Xinitlogfile)\n  storeinfo \"Xcontainerid=$Xcontainerid\"\n\n  Containerinspect=\"$(unpriv_xcbackend \"$Xcontainerbackend inspect $Xcontainername\" 2>> $Xinitlogfile | rmcr)\"\n  [ -n \"$Containerinspect\" ] && [ \"$Containerinspect\" != \"[]\" ] && {\n    Xcontainerip=\"$(parse_inspect \"$Containerinspect\" \"NetworkSettings\" \"IPAddress\")\"\n    Xcontainerip=\"${Xcontainerip:-$Xcontainername}\"\n    storeinfo \"Xcontainerip=$Xcontainerip\"\n    Xpid1pid=\"$(parse_inspect \"$Containerinspect\" \"State\" \"Pid\")\"\n    setonwatchpidlist \"$Xpid1pid\" \"Xcontainerpid1\"\n  } || {\n    error \"Option --xc: Startup of x11docker/xserver failed.\n  Last lines of xinit log:\n$(tail \"$Xinitlogfile\")\"\n    return 1\n  }\n\n  [ \"$Nvidiainstallerfile\" ] && {\n    note \"Option --gpu: Installing NVIDIA driver in X container.\"\n    unpriv_xcbackend \"$Xcontainerbackend exec --tty --privileged --user=root $Xcontainername bash $Sharefolder/nvidia_installer\" >> \"$Xinitlogfile\" 2>&1 || note 'ERROR: NVIDIA driver installation in X container failed.'\n  }\n\n  waitforlogentry \"start_xcontainer()\" \"$Xinitlogfile\" \"X server container is ready\" || return 1\n\n  return 0\n}\nstart_xserver() {               # start X server\n  local Exitcode= Xcontainerexitcode= Command\n\n  case \"$Xserver\" in\n    --xpra*|--xephyr|--xvfb|--nxagent|--xwayland|--weston-xwayland|--kwin-xwayland|--xwin|--xorg)\n      Command=\"env WAYLAND_DISPLAY=$Newwaylandsocket xinit $Xinitrc -- $Xcommand\"\n    ;;\n    --hostdisplay|--hostwayland|--weston|--kwin|--tty)\n      Command=\"sh $Xinitrc\"\n    ;;\n    --runx)\n      Command=\"$Xcommand -- sh $Xinitrc\"\n    ;;\n  esac\n\n  case \"$Xcontainer\" in\n    yes)\n      unpriv_xcbackend \"$Xcontainerbackend exec $Xcontainername $Command\" >> $Xinitlogfile 2>&1\n      Xcontainerexitcode=$?\n      case \"$Xcontainerexitcode\" in\n        137) Exitcode=\"0\" ;; # docker error indicating that xinit did not shut down fast enough on SIGTERM. Ignore it.\n        *)   Exitcode=\"$Xcontainerexitcode\" ;;\n      esac\n    ;;\n    no)\n      case \"$Xlegacywrapper\" in\n        yes|\"\") unpriv \"$Command\" >> $Xinitlogfile 2>&1 ;;\n        no)     eval   \"$Command\" >> $Xinitlogfile 2>&1 ;;\n      esac\n    ;;\n  esac\n  Exitcode=\"${Exitcode:-$?}\"\n  \n  [ \"$Exitcode\" != 0 ] && rocknroll && note \"X server $Xserver returned error code $Exitcode.\n  Last lines of xinit logfile:\n$(tail -n15 \"$Xinitlogfile\")\n$( [ -s \"$Compositorlogfile\" ] && echo \"\n  Last lines of compositor log:\n$(tail \"$Compositorlogfile\")\")\"\n\n  return \"${Exitcode:-0}\"\n}\nstart_xpra() {                  # options --xpra / --xpra-xwayland: start and watch xpra server and xpra client\n  local Xpraserverpid Xpraclientpid Xpraenv\n\n  case \"$Hostwaylandsocket\" in\n    \"\") Xpraenv=\"  GDK_BACKEND=x11\" ;;\n    *)  Xpraenv=\"  GDK_BACKEND=wayland\" ;;\n  esac\n  [ -n \"$Xprashm\" ] && Xpraenv=\"$Xpraenv \\\\\n  $Xprashm\"\n  Xpraenv=\"$Xpraenv \\\\\n  NO_AT_BRIDGE=1 \\\\\n  XPRA_EXPORT_ICON_DATA=0 \\\\\n  XPRA_EXPORT_XDG_MENU_DATA=0 \\\\\n  XPRA_ICON_OVERLAY=0 \\\\\n  XPRA_MENU_ICONS=0 \\\\\n  XPRA_UINPUT=0 \\\\\n  XPRA_VAAPI=0 \\\\\n  XPRA_XDG_EXPORT_ICONS=0 \\\\\n  XPRA_XDG_LOAD_GLOB=0\"\n\n  # xpra server\n  Xpraservercommand=\"env XAUTHORITY='$Xclientcookie' \\\\\n$Xpraenv \\\\\n  GDK_BACKEND=x11 \\\\\n$Xpraservercommand\"\n  debugnote \"Running xpra server:\n$Xpraservercommand\"\n  echo \"x11docker [$(timestamp)]: Starting Xpra server\" >> \"$Xpraserverlogfile\"\n  case \"$Xcontainer\" in\n    no)\n      unpriv \"$Xpraservercommand ||:\" >> \"$Xpraserverlogfile\" 2>&1 &\n      #Xpraserverpid=$!\n    ;;\n    yes)\n      unpriv_xcbackend \"$Xcontainerbackend exec $Xcontainername sh -c '$Xpraservercommand'\" >> \"$Xpraserverlogfile\" 2>&1 &\n      #Xpraserverpid=\"$(ps aux | grep \"/usr/bin/xpra start $Newdisplay\" | grep -v grep | awk '{print $2}')\"\n    ;;\n  esac\n\n  # xpra client\n  Xpraclientcommand=\"env $Hostxenv \\\\\n$Xpraenv $Xpraclientcommand\"\n  debugnote \"Running xpra client:\n$Xpraclientcommand\"\n  echo \"x11docker [$(timestamp)]: Starting Xpra client\" >> \"$Xpraclientlogfile\"\n  [ \"$Xcontainer\" = \"yes\" ] && [ \"$Xserver\" != \"--xpra2\" ] && [ \"$Xserver\" != \"--xpra2-xwayland\" ] && {\n    unpriv_xcbackend \"$Xcontainerbackend exec $Xcontainername sh -c '$Xpraclientcommand'\" >> \"$Xpraclientlogfile\" 2>&1 &\n    :\n  } || {\n    unpriv \"$Xpraclientcommand ||:\" >> \"$Xpraclientlogfile\" 2>&1 &\n  }\n\n  # get pids\n  sleep 3   # avoid race condition not finding the process\n  Xpraserverpid=\"$(ps aux | grep -E \"/usr/bin/xpra start :$Newdisplaynumber|/usr/bin/xpra start-desktop :$Newdisplaynumber\" | grep -v grep | awk '{print $2}')\"\n  storepid \"$Xpraserverpid\" xpraserver\n  Xpraclientpid=\"$(ps aux | grep \"/usr/bin/xpra attach :$Newdisplaynumber\" | grep -v grep | awk '{print $2}')\"\n  storepid \"$Xpraclientpid\" xpraclient\n\n  # catch possible xpra crashes\n  while rocknroll; do\n    ps -p \"$Xpraserverpid\" >/dev/null || { debugnote \"xpra server terminated\" ; break ; }\n    ps -p \"$Xpraclientpid\" >/dev/null || { debugnote \"xpra client terminated\" ; break ; }\n    sleep 1\n  done\n\n  sleep 3 && rocknroll && note \"Option $Xserver: xpra terminated unexpectedly.\n  Last lines of xpra server log: $(pspid \"$Xpraserverpid\")\n$(tail \"$Xpraserverlogfile\")\n---------------------------------\n  Last lines of xpra client log: $(pspid \"$Xpraclientpid\")\n$(tail \"$Xpraclientlogfile\")\"\n  saygoodbye xpra\n\n  return 0\n}\nstart_pulseaudiotcp() {         # option --pulseaudio=tcp: load Pulseaudio TCP module authenticated with container IP\n  local Containerip\n  Containerip=\"$(storeinfo dump containerip)\"\n  Pulseaudiomoduleid=\"$(unpriv \"pactl load-module module-native-protocol-tcp  port=$Pulseaudioport auth-ip-acl=${Containerip:-\"127.0.0.1\"}\" )\"\n  [ \"$Pulseaudiomoduleid\" ] && {\n    storeinfo \"pulseaudiomoduleid=$Pulseaudiomoduleid\"\n  } || note \"Option --pulseaudio: command pactl failed.\n  Is pulseaudio running at all on your host?\n  You can try option --alsa instead.\"\n  return 0\n}\n\n#### main init routines\ncheck_console() {               # check whether x11docker runs on console\n  ### FIXME not reliable. If in doubt, sets \"no\"\n  env LANG=C tty 2>&1 | grep -q '/dev/tty' && Runsonconsole=\"yes\" || Runsonconsole=\"no\"\n  id \"$Hostuser\" | grep -q -e \"(tty)\" -e \"(root)\" || {\n    unpriv \"fgconsole\" >/dev/null 2>&1 && Runsonconsole=\"yes\"\n  }\n  debugnote \"check_console(): Guess if running on console: $Runsonconsole\"\n}\ncheck_fallback() {              # --fallback\n  # Option --fallback\n  case \"$Fallback\" in\n    no) error \"Option --fallback=no: Fallbacks are disabled.\n    x11docker cannot fulfill an option you have chosen, see message above.\" ;;\n  esac\n}\ncheck_host() {                  # check host environment\n  local Drive\n\n  [ \"${0:-}\" = \"${BASH_SOURCE:-}\" ] && Runssourced=\"no\" || Runssourced=\"yes\"\n\n  Hostsystem=\"$(grep '^ID=' /etc/os-release 2>/dev/null | cut -d= -f2 || echo 'unknown')\"\n  Hostarchitecture=\"$(uname -m)\"\n  case \"$Hostarchitecture\" in\n    x86_64|x86-64|amd64|AMD64)                               Hostarchitecture=\"amd64 ($Hostarchitecture)\" ;;\n    aarch64|armv8|ARMv8|arm64v8)                             Hostarchitecture=\"arm64v8 ($Hostarchitecture)\" ;;\n    aarch32|armv8l|armv7|armv7l|ARMv7|arm32v7|armhf|armv7hl) Hostarchitecture=\"arm32v7 ($Hostarchitecture)\" ;;\n    arm32v6|ARMv6|armel)                                     Hostarchitecture=\"arm32v6 ($Hostarchitecture)\" ;;\n    arm32v5|ARMv5)                                           Hostarchitecture=\"arm32v5 ($Hostarchitecture)\" ;;\n    i686|i386|x86)                                           Hostarchitecture=\"i386 ($Hostarchitecture)\" ;;\n    ppc64*|POWER8)                                           Hostarchitecture=\"ppc64le ($Hostarchitecture)\" ;;\n    s390x)                                                   Hostarchitecture=\"s390x ($Hostarchitecture)\" ;;\n    mips|mipsel)                                             Hostarchitecture=\"mipsel ($Hostarchitecture)\" ;;\n    mips64*)                                                 Hostarchitecture=\"mips64el ($Hostarchitecture)\" ;;\n    *)                                                       Hostarchitecture=\"unknown ($Hostarchitecture)\" ;;\n  esac\n\n  # Check libc from host. If same as in container, it is possible to share timezone file\n  Hostlibc=\"unknown\"\n  ldd --version 2>&1 | grep -q    'musl libc'       && Hostlibc='musl'\n  ldd --version 2>&1 | grep -q -E 'GLIBC|GNU libc'  && Hostlibc='glibc'\n\n  # cgroup version\n  case \"$(stat -c\"%T\" -f /sys/fs/cgroup)\" in\n    tmpfs)     Cgroupversion=\"v1\" ;;\n    cgroup2fs) Cgroupversion=\"v2\" ;;\n    *)         Cgroupversion=\"UNKNOWN\" ;;\n  esac\n  debugnote \"Detected cgroup $Cgroupversion\"\n\n  # Check host time zone\n  Hostlocaltimefile=\"$(myrealpath /etc/localtime)\"      # Find time zone file in /usr/share/zoneinfo\n  [ -e \"$Hostlocaltimefile\" ] || Hostlocaltimefile=\"\"\n  Hostutctime=$(date +%:::z)                            # Offset of UTC. Used if time zone file cannot be provided\n  [ \"$(cut -c1 <<< \"$Hostutctime\")\" = \"+\" ] && {\n    Hostutctime=\"UTC-$(cut -c2- <<< \"$Hostutctime\")\"\n  } || {\n    Hostutctime=\"UTC+$(cut -c2- <<< \"$Hostutctime\")\"\n  }\n\n  # Check for MS Windows subsystem\n  command -v cygcheck.exe >/dev/null && {\n    cygcheck.exe -V | rmcr | grep -q \"(cygwin)\"   && Winsubsystem=\"CYGWIN\"\n    cygcheck.exe -V | rmcr | grep -q \"(msys)\"     && Winsubsystem=\"MSYS2\"\n  }\n  uname -r | grep -q \"Microsoft\"                  && Winsubsystem=\"WSL1\"\n  uname -r | grep -q \"microsoft\"                  && Winsubsystem=\"WSL2\"\n  case \"$Winsubsystem\" in\n    MSYS2|CYGWIN)\n      Winsubmount=\"$(cygpath.exe -u \"c:/\" | rmcr | sed s%/c/%%)\"\n      Winsubpath=\"$(convertpath unix \"$(cygpath.exe -w \"/\" | rmcr)\" )\"\n      Mobyvm=\"yes\"\n    ;;\n    WSL1|WSL2)\n      command -v \"/mnt/c/Windows/System32/cmd.exe\" >/dev/null && Winsubmount=\"/mnt\"\n      command -v \"/c/Windows/System32/cmd.exe\" >/dev/null     && Winsubmount=\"\"\n      grep -q \"Windows\" <<< \"${PATH:-}\" || export PATH=\"${PATH:-}:$Winsubmount/c/Windows/System32:$Winsubmount/c/Windows/System32/WindowsPowerShell/v1.0\" # can miss after sudo in WSL\n      command -v \"$Winsubmount/c/Windows/System32/cmd.exe\" >/dev/null || error \"$Winsubsystem: Could not find cmd.exe\n  in /mnt/c/Windows/System32 or /c/Windows/System32.\n  Do you have a different path to your Windows system partition?\"\n      Winsubpath=\"$(convertpath unix \"$(getwslpath)\")\"\n      [ \"$Winsubsystem\" = \"WSL1\" ] && Mobyvm=\"yes\"\n    ;;\n  esac\n  Winsubmount=\"${Winsubmount%/}\"\n  Winsubpath=\"${Winsubpath%/}\"\n  [ \"$Winsubsystem\" ] && Hostsystem=\"MSWindows-$Winsubsystem\"\n  [ -z \"$Mobyvm\" ] && Mobyvm=\"no\"\n\n  # Check host IP. Needed for --pulseaudio=tcp, --printer=tcp, --xoverip and --xwin\n  case \"$Winsubsystem\" in\n    \"\")\n      case \"$Network\" in\n        host) Hostip=\"127.0.0.1\" ;;\n        *)\n          #Hostip=\"$(hostname -I | cut -d' ' -f1)\"\n          [ \"$Hostip\" ] || Hostip=\"$(ip -4 -o a |                  awk '{print $4}' | cut -d/ -f1 | grep    \"^192\\.168\\.*\" | head -n1)\"\n          [ \"$Hostip\" ] || Hostip=\"$(ip -4 -o a | grep 'docker0' | awk '{print $4}' | cut -d/ -f1 | grep    \"172.17.0.1\" ||: )\"\n          [ \"$Hostip\" ] || Hostip=\"$(ip -4 -o a | grep 'docker0' | awk '{print $4}' | cut -d/ -f1 | head -n1)\"\n          [ \"$Hostip\" ] || Hostip=\"$(ip -4 -o a |                  awk '{print $4}' | cut -d/ -f1 | grep -v \"127.0.0.1\" | head -n1)\"\n        ;;\n      esac\n    ;;\n    *)\n                       Hostip=\"$(ipconfig.exe | rmcr | grep 'IPv4' | grep -o '192\\.168\\.[0-9]*\\.[0-9]*'       | head -n1 )\"\n      [ \"$Hostip\" ] || Hostip=\"$(ipconfig.exe | rmcr | grep 'IPv4' | grep -o '10\\.0\\.[0-9]*\\.[0-9]*'          | head -n1 )\"\n      [ \"$Hostip\" ] || Hostip=\"$(ipconfig.exe | rmcr | grep 'IPv4' | grep -o '[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*' | head -n1 )\"\n    ;;\n  esac\n\n  # Provide dos->unix newline converter to unpriv() commands\n  [ \"$Winsubsystem\" ] || rmcr() { cat; }\n  export -f rmcr\n\n  # Check whether x11docker runs over SSH\n  pstree -ps $$ >/dev/null 2>&1 && {\n    pstree -ps $$ | grep -q sshd && Runsoverssh=\"yes\" || Runsoverssh=\"no\"\n  } || {\n    check_parent_sshd \"$$\"       && Runsoverssh=\"yes\" || Runsoverssh=\"no\"\n  }\n\n  # Check whether x11docker runs in a terminal\n  tty -s && Runsinterminal=\"yes\" || Runsinterminal=\"no\"\n\n  # Check whether x11docker runs in interactive bash mode (--enforce-i)\n  case $- in\n    *i*) Runsinteractive=\"yes\" ;;\n    *)   Runsinteractive=\"no\" ;;\n  esac\n\n  # Check whether ps can watch processes of other users\n  mount | grep \"^proc\" | grep -q \"hidepid=2\" && {\n    Hosthidepid=\"yes\"\n    debugnote \"check_host(): /proc is mounted with hidepid=2.\"\n  } || {\n    Hosthidepid=\"no\"\n  }\n  ps aux | cut -d' ' -f1 | grep -q root && {\n    Hostcanwatchroot=\"yes\"\n  } || {\n    Hostcanwatchroot=\"no\"\n    case \"$Winsubsystem\" in\n      MSYS2|CYGWIN) Hostcanwatchroot=\"yes\" ;;\n    esac\n  }\n  debugnote \"check_host(): ps can watch root processes: $Hostcanwatchroot\"\n\n  # Check if host uses proprietary NVIDIA driver\n  Nvidiaversion=$(head -n1 2>/dev/null </proc/driver/nvidia/version | awk '{ print $8 }')\n  #Nvidiaversion=\"470.74\"\n\n  # check python version\n  Pythonbin=\"$(command -v python ||:)\"\n  [ -z \"$Pythonbin\" ] && Pythonbin=\"$(command -v python3 ||:)\"\n  [ -z \"$Pythonbin\" ] && Pythonbin=\"$(command -v python2 ||:)\"\n  # check jq version\n  Jqbin=\"$(command -v jq ||:)\"\n\n  # The strict check for at least one of these will happen in check_backend.\n  if [ -n \"$Jqbin\" ]; then\n    debugnote \"check_host(): found $Jqbin\"\n  fi\n  if [ -n \"$Pythonbin\" ]; then\n    debugnote \"check_host(): found $Pythonbin\"\n  fi\n  if [ -z \"$Jqbin\" ] && [ -z \"$Pythonbin\" ]; then\n    debugnote \"x11docker needs 'jq' or 'python' to parse output for some backends, but neither was found.\"\n  fi\n\n  return 0\n}\ncheck_hostuser() {              # check for unprivileged host user\n  # check host user, want an unprivileged one to run X server\n  # default behaviour:\n  #  x11docker started as unprivileged user:          starting X server as this user and create same user in container\n  #  x11docker started as root:                       determine real user with $(logname), instead of root use real user like above\n  #  x11docker started as root with --hostuser=root:  root runs X server and root is container user (discouraged)\n  #                                                   if you want root in container, just use --user=root\n  #  x11docker with --user=someuser                   container user is someuser, host user is unprivileged user $(logname)\n  #\n  # root permissions are only needed to run docker. If started unprivileged, a password prompt appears.\n\n  # user who started x11docker\n  Startuser=\"$(id -un)\"\n\n  # not root? Use current user.\n  [ -z \"$Hostuser\" ] && [ \"$Startuser\" != \"root\" ] && Hostuser=\"$Startuser\"\n\n  # root? find unprivileged user\n  Lognameuser=\"$(logname 2>/dev/null ||:)\"\n  [ -z \"$Lognameuser\" ] && [ -z \"$Hostuser\" ] && note \"Your terminal seems to be not POSIX compliant.\n  Command 'logname' does not return a value.\n  Consider to use another terminal emulator.\n  Fallback: Will try to check \\$SUDO_USER and \\$PKEXEC_UID.\"\n  [ -z \"$Lognameuser\" ] && [ -n \"${SUDO_USER:-}\" ]  && Lognameuser=\"${SUDO_USER:-}\"  && [ -z \"$Hostuser\" ] && note \"Will use \\$SUDO_USER = ${SUDO_USER:-} as host user.\"\n  [ -z \"$Lognameuser\" ] && [ -n \"${PKEXEC_UID:-}\" ] && Lognameuser=\"${PKEXEC_UID:-}\" && [ -z \"$Hostuser\" ] && note \"Will use user with uid \\$PKEXEC_UID = ${PKEXEC_UID:-} as host user.\"\n  [ -z \"$Lognameuser\" ] &&                             Lognameuser=\"$Startuser\"      && [ -z \"$Hostuser\" ] && note \"Will use \\$(id -un) = $Lognameuser as host user.\"\n\n  # option --hostuser\n  [ -z \"$Hostuser\" ] && Hostuser=\"$Lognameuser\"\n  [ \"$Hostuser\" != \"$Startuser\" ] && {\n    [ \"$Startuser\" = \"root\" ] || error \"Option --hostuser: x11docker must run as root\n   to choose a host user different from user '$Startuser'.\"\n  }\n  mygetent passwd \"$Hostuser\" >/dev/null 2>&1 || {\n    [ -f /etc/passwd ] || warning \"Your system misses /etc/passwd\"\n    error \"Could not find user '$Hostuser' in /etc/passwd.\"\n  }\n\n  Hostuser=\"$(id -un \"$Hostuser\")\"\n  Hostuseruid=\"$(id -u \"$Hostuser\")\"\n  Hostusergid=\"$(id -g \"$Hostuser\")\"\n  [ \"$Hostuser\" = \"$Startuser\" ] && Hostuserhome=\"$HOME\"\n\n  # How to run as unprivileged user in unpriv()\n  case \"$Hostuser\" in\n    \"$Startuser\") Unpriv=\"eval\" ;;   # alternatively: bash -c\n    *)            Unpriv=\"su $Hostuser -c\" ;;\n  esac\n\n  [ -z \"$Hostuserhome\" ] && Hostuserhome=$(mygetent passwd \"$Hostuser\" 2>/dev/null | cut -d: -f6)\n  [ -z \"$Hostuserhome\" ] && {\n    Hostuserhome=\"/tmp/home/$Hostuser\"\n    mkfolder \"$Hostuserhome\"\n    warning \"Could not read your home directory from /etc/passwd for user '$Hostuser'.\n  Please set \\$HOME with a valid path.\n  Fallback: setting HOME=$Hostuserhome\"\n    check_fallback\n  }\n  debugnote \"host user: $Hostuser $Hostuseruid:$Hostusergid $Hostuserhome\"\n\n  [ \"$Hostuser\" = \"root\" ] && warning \"Running as user root.\n  Maybe \\$(logname) did not provide an unprivileged user.\n  Please use option --hostuser=USER to specify an unprivileged user.\n  Otherwise, new X server runs as root, and container user will be root.\"\n\n  id | grep -q \"(docker)\" && warning \"User $Hostuser is member of group docker.\n  That allows unprivileged processes on host to gain root privileges.\"\n\n  Localsharedir=\"$Hostuserhome/.local/share/x11docker\"\n  mkfolder \"$Localsharedir\"\n\n  return 0\n}\ncheck_hostxenv() {              # check environment variables for host X display\n  Hostdisplay=\"${DISPLAY:-}\"\n  Hostdisplaynumber=\"$(echo \"$Hostdisplay\" | cut -d: -f2 | cut -d. -f1)\"                       # display number without \":\" and \".0\"\n  [ -n \"$Hostdisplay\" ] && Hostxsocket=\"/tmp/.X11-unix/X$Hostdisplaynumber\" || Hostxsocket=\"\"  # X socket from host, needed for --hostdisplay\n  [ -e \"$Hostxsocket\" ] || Hostxsocket=\"\"                                                      # can miss in SSH session\n  [ -n \"$(cut -d: -f1 -s <<< \"$Hostdisplay\")\" ] && Hostxoverip=\"yes\" || Hostxoverip=\"no\"\n  #Hostdisplay=\"$(sed \"s/localhost/$Hostip/\" <<< \"$Hostdisplay\")\"\n\n  # get cookie from host display\n  XAUTHORITY=${XAUTHORITY:-}\n  [ -z \"$XAUTHORITY\" ]   && [ -e \"$Hostuserhome/.Xauthority\" ] && XAUTHORITY=\"$Hostuserhome/.Xauthority\"\n  #[ -z \"$XAUTHORITY\" ]   && command -v systemctl >/dev/null    && XAUTHORITY=\"$(systemctl --user show-environment | grep XAUTHORITY= | cut -d= -f2)\"\n  [ \"${XAUTHORITY:-}\" ]  && {\n    command -v xauth >/dev/null && {\n      xauth -n -i -f \"${XAUTHORITY:-}\" nlist \"$Hostdisplay\" 2>/dev/null | sed -e 's/^..../ffff/' | unpriv \"xauth -n -i -f '$Hostxauthority' nmerge - 2>/dev/null\"\n    } || {\n      unpriv \"cp '${XAUTHORITY:-}' '$Hostxauthority'\"\n      debugnote \"check_hostxenv(): xauth not found or failed. Host cookie not set to ffff.\"\n    }\n    chown \"$Hostuser\" \"$Hostxauthority\"\n    chmod 600 \"$Hostxauthority\"\n    export XAUTHORITY\n  } || {\n    Hostxauthority=\"\"\n    XAUTHORITY=\"\"\n  }\n  [ \"$Hostdisplay\" ] || {\n    Hostxsocket=\"\"\n    Hostxauthority=\"\"\n    DISPLAY=\"\"\n    XAUTHORITY=\"\"\n  }\n  [ -s \"${XAUTHORITY:-}\" ] && [ ! -s \"$Hostxauthority\" ] && cp \"${XAUTHORITY:-}\" \"$Hostxauthority\"\n\n  # create $Hostxenv\n  Hostxenv=\"DISPLAY=$Hostdisplay\"\n  [ -s \"$Hostxauthority\" ] && {\n    Hostxenv=\"$Hostxenv XAUTHORITY=$Hostxauthority\"\n  } || {\n    Hostxauthority=\n    XAUTHORITY=\"\"\n  }\n  [ -n \"$Hostxsocket\" ]       && Hostxenv=\"$Hostxenv XSOCKET=$Hostxsocket\"\n  [ -n \"$Hostwaylandsocket\" ] && Hostxenv=\"$Hostxenv WAYLAND_DISPLAY=$Hostwaylandsocket\"\n  Hostxenv=\"$Hostxenv XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR\"\n  [ -n \"$Hostdisplay\" ] && [ -z \"$Hostxauthority\" ] && warning \"Your host X server runs without cookie authentication.\"\n\n  [ -z \"$GDK_BACKEND\" ] && {\n    [ -n \"$Hostwaylandsocket\" ] && export GDK_BACKEND=\"wayland\"\n    [ -n \"$Hostdisplay\" ]       && export GDK_BACKEND=\"x11\"\n    [ -z \"$Hostdisplay$Hostwaylandsocket\" ] && unset GDK_BACKEND\n  }\n\n  return 0\n}\ncheck_snap() {                  # check if docker is installed in snap. Causes restrictions.\n  # Check if docker is installed with snap/snappy (notable Ubuntu Server)\n  myrealpath \"$(command -v \"${Backendbin:-docker_not_found}\")\" | grep -q snap && Runsinsnap=\"yes\" || Runsinsnap=\"no\"\n\n  [ \"$Runsinsnap\" = \"yes\" ] && [ -z \"$Snapsupport\" ] && {\n    note \"It seems docker runs in snap.\n  This limits possibilities to use docker and x11docker.\n  Fallback: Enabling option --snap\"\n    Snapsupport=\"yes\"\n    check_fallback\n  }\n  [ -d \"/snap/docker\" ] && [ \"$Snapsupport\" = \"no\" ] && note \"Detected /snap/docker.\n  If you run Docker in snap, you might need option --snap to support this setup.\"\n  [ \"$Snapsupport\" = \"yes\" ] && {\n    note \"Option --snap to support a docker-in-snap setup\n  causes some restrictions:\n  Option --newprivileges=yes is enabled, snap needs it for unknown reasons.\n  Option --xoverip is enabled because snap cannot access X unix sockets in /tmp.\n  Option --network is enabled because --xoverip is not possible otherwise.\n  Option --hostdisplay is not available because it would need a shared unix socket.\n  Option --gpu only works with --xorg and with indirect rendering (--gpu=iglx).\n  Options --printer and --pulseaudio only work in TCP mode.\n  Option --xc to run X servers in container with x11docker/xserver is not possible.\n  Recommendation: Purge the Docker snap installation and install Docker natively.\"\n    [ \"$Allownewprivileges\" = \"auto\" ] && Allownewprivileges=\"yes\"\n    Xoverip=\"${Xoverip:-yes}\"\n    Xcontainer=\"no\"\n    [ \"$Network\" = \"none\" ] && Network=\"\"\n    case \"$Sharegpu\" in\n      yes|virgl|iglx|direct)\n        Sharegpu=\"iglx\"\n      ;;\n    esac\n  }\n  return 0\n}\ncheck_xdg_runtime_dir() {       # set up XDG_RUNTIME_DIR if needed\n  [ -z \"$XDG_RUNTIME_DIR\" ] && [ -e \"/run/user/${Hostuseruid:-unknownuid}\" ] && export XDG_RUNTIME_DIR=\"/run/user/$Hostuseruid\"\n  case \"$Xserver\" in\n    --weston|--kwin|--weston-xwayland|--kwin-xwayland)\n      [ -z \"$XDG_RUNTIME_DIR\" ] && {\n        export XDG_RUNTIME_DIR=\"$Cachefolder/XDG_RUNTIME_DIR\"\n        mkfolder \"$XDG_RUNTIME_DIR\" 0700\n      }\n    ;;\n  esac\n  return 0\n}\ncreate_cachefiles() {           # create empty cache files owned by unprivileged user\n  local Line\n  # create base cache folder\n  [ \"$Cachebasefolder\" ] || {\n    #Cachebasefolder=\"$Hostuserhome/.cache/x11docker\"    ### FIXME really a good idea for MS Windows? WSL cache provides performance, but maybe must not be shared with container to avoid file access errors.\n    case \"$Winsubsystem\" in\n      \"\"|MSYS2|CYGWIN) Cachebasefolder=\"$Hostuserhome/.cache/x11docker\" ;;\n      WSL1|WSL2)\n        case \"$Mobyvm\" in\n          yes)\n            Cachebasefolder=\"$(convertpath subsystem \"$(wincmd \"echo %userprofile%\")\")/x11docker/cache\"\n            mkfolder \"$Hostuserhome/.cache/x11docker/symlink\"\n            [ -e \"$Hostuserhome/.cache/x11docker/symlink\" ] || ln -s -T \"$Cachebasefolder\" \"$Hostuserhome/.cache/x11docker/symlink\"\n            mkfile \"$Hostuserhome/.cache/x11docker/symlink/symlink.txt\"\n            echo \"x11docker: With MobyVM x11docker cache in WSL is stored in\n$Cachebasefolder\nto allow file sharing with containers.\nA symbolic link is created in WSL at\n$Hostuserhome/.cache/x11docker/symlink\n\" >> \"$Hostuserhome/.cache/x11docker/symlink/symlink.txt\"\n          ;;\n          no)\n            Cachebasefolder=\"$Hostuserhome/.cache/x11docker\"\n          ;;\n        esac\n      ;;\n    esac\n  }\n  [ \"$Cachebasefolder\" = \"/x11docker/cache\" ] && error \"Failed to find a valid path for cache directory.\n  Please report at https://github.com/mviereck/x11docker\n  As a workaround you can specify a cache folder with --cachebasedir='DIR'\"\n\n  Cachebasefolder=\"$(convertpath subsystem \"$Cachebasefolder\")\"\n  [ \"$Cachebasefolder\" != \"${Cachebasefolder//\" \"/\"\"}\" ] && error \"Cache root folder must not contain whitespaces.\n  $Cachebasefolder\"\n  mkfolder \"$Cachebasefolder\"                            || error \"Could not create cache folder\n  $Cachebasefolder\"\n  writeaccess \"$Hostuseruid\" \"$Cachebasefolder\"          || error \"User $Hostuser does not have write access to cache folder\n  $Cachebasefolder\"\n\n  # Create cache subfolders\n  Cachefolder=\"$Cachebasefolder/$Cachenumber-$(unspecialstring \"$(basename \"$Imagename\")\")\"\n  [ -d \"$Cachefolder\" ] && error \"Cache folder already exists:\n  $Cachefolder\"\n\n  [ \"$Cachefolder\" != \"$(escapestring \"$Cachefolder\")\" ] && error \"Invalid name created for cache folder:\n    $Cachefolder\n  Most probably provided image name (or --exe command) is invalid in some way:\n    $(escapestring \"$Imagename\")\n  For special setups like command chains use a syntax like:\n    x11docker IMAGENAME  --  sh -c \\\"cd /etc && xterm\\\"\"\n\n  Sharefolder=\"$Cachefolder/$Sharefolder\"\n  mkfolder \"$Sharefolder\"\n\n  # Files in $Cachefolder: host only access\n  Backendcommandfile=\"$Cachefolder/$Backendcommandfile\"             && mkfile $Backendcommandfile\n  Hostxauthority=\"$Cachefolder/$Hostxauthority\"                     && mkfile $Hostxauthority\n  Messagelogfile=\"$Cachefolder/$Messagelogfile\"                     && mkfile $Messagelogfile\n  Pulseaudioconf=\"$Cachefolder/$Pulseaudioconf\"                     && mkfile $Pulseaudioconf\n  Storepidfile=\"$Cachefolder/$Storepidfile\"                         && mkfile $Storepidfile\n  Watchpidfifo=\"$Cachefolder/$Watchpidfifo\"\n  Xservercookie=\"$Cachefolder/$Xservercookie\"                       && mkfile $Xservercookie\n  Xtermrc=\"$Cachefolder/$Xtermrc\"                                   && mkfile $Xtermrc\n                                                                       mkfolder \"$Cachefolder/tmp/.X11-unix\"\n                                                                       mkfolder \"$Cachefolder/XDG_RUNTIME_DIR\" 0700\n\n  # Files in $Sharefolder: shared to /x11docker in container\n  Clipboardrc=\"$Sharefolder/$Clipboardrc\"                           && mkfile $Clipboardrc\n  Cmdrc=\"$Sharefolder/$Cmdrc\"                                       && mkfile $Cmdrc\n  Cmdstderrlogfile=\"$Sharefolder/$Cmdstderrlogfile\"                 && mkfile $Cmdstderrlogfile 666\n  Cmdstdinfifo=\"$Sharefolder/$Cmdstdinfifo\"\n  Cmdstdoutlogfile=\"$Sharefolder/$Cmdstdoutlogfile\"                 && mkfile $Cmdstdoutlogfile 666\n  Compositorlogfile=\"$Sharefolder/$Compositorlogfile\"               && mkfile $Compositorlogfile\n  Containerrc=\"$Sharefolder/$Containerrc\"                           && mkfile $Containerrc\n  Containerenvironmentfile=\"$Sharefolder/$Containerenvironmentfile\" && mkfile $Containerenvironmentfile 666\n  Containerlocaltimefile=\"$Sharefolder/$Containerlocaltimefile\"\n  Containerlogfile=\"$Sharefolder/$Containerlogfile\"                 && mkfile $Containerlogfile 666\n  Containerrootrc=\"$Sharefolder/$Containerrootrc\"                   && mkfile $Containerrootrc\n  Logfile=\"$Sharefolder/x11docker.log\"                              && mkfile $Logfile 666\n  Messagefifo=\"$Sharefolder/$Messagefifo\"\n  Nxagentclientrc=\"$Sharefolder/$Nxagentclientrc\"                   && mkfile $Nxagentclientrc\n  Nxagentkeysfile=\"$Sharefolder/$Nxagentkeysfile\"                   && mkfile $Nxagentkeysfile\n  Nxagentoptionsfile=\"$Sharefolder/$Nxagentoptionsfile\"             && mkfile $Nxagentoptionsfile\n  Pulseaudiocookie=\"$Sharefolder/$Pulseaudiocookie\"\n  Pulseaudiosocket=\"$Sharefolder/$Pulseaudiosocket\"\n  Storeinfofile=\"$Sharefolder/$Storeinfofile\"                       && mkfile $Storeinfofile 666\n  Systemdjournallogfile=\"$Sharefolder/$Systemdjournallogfile\"       && mkfile $Systemdjournallogfile\n  Timetosaygoodbyefile=\"$Sharefolder/$Timetosaygoodbyefile\"         && mkfile $Timetosaygoodbyefile 666\n  Timetosaygoodbyefifo=\"$Sharefolder/$Timetosaygoodbyefifo\"\n  Westonini=\"$Sharefolder/$Westonini\"                               && mkfile $Westonini\n  Xclientcookie=\"$Sharefolder/$Xclientcookie\"                       && mkfile $Xclientcookie\n  Xkbkeymapfile=\"$Sharefolder/$Xkbkeymapfile\"                       && mkfile $Xkbkeymapfile\n  Xinitlogfile=\"$Sharefolder/$Xinitlogfile\"                         && mkfile $Xinitlogfile 666\n  Xinitrc=\"$Sharefolder/$Xinitrc\"                                   && mkfile $Xinitrc\n  Xpraclientlogfile=\"$Sharefolder/$Xpraclientlogfile\"               && mkfile $Xpraclientlogfile\n  Xpraserverlogfile=\"$Sharefolder/$Xpraserverlogfile\"               && mkfile $Xpraserverlogfile\n  \n  case \"$Backend\" in\n    proot)\n      ln -s \"$Storepidfile\" \"$Sharefolder/store.pids\"\n    ;;\n  esac\n\n  # Files in $Cachebasefolder\n  Logfilebackup=\"$Cachebasefolder/x11docker.log\"\n  Modelinefilebasepath=\"$Cachebasefolder/$Modelinefilebasepath\"     && mkfolder \"$Modelinefilebasepath\"\n\n  # file to store display numbers in use today\n  Numbersinusefile=\"$Cachebasefolder/$Numbersinusefile\"\n  for Line in $(find $Cachebasefolder/displaynumbers.* 2>/dev/null ||:) ; do\n    [ \"$Line\" != \"$Numbersinusefile\" ] && rm \"$Line\"\n  done\n  [ -e \"$Numbersinusefile\" ] || mkfile \"$Numbersinusefile\"\n\n  # libc timezone file\n  [ -e \"$Hostlocaltimefile\" ] && cp \"$Hostlocaltimefile\" \"$Containerlocaltimefile\"\n\n  storeinfo \"cache=$Cachefolder\"\n  storeinfo \"stdout=$Cmdstdoutlogfile\"\n  storeinfo \"stderr=$Cmdstderrlogfile\"\n\n  return 0\n}\nsetup_fifo() {                  # set up fifo channels (also option --stdin)\n  # setup fifos to allow messages from within container and xinitrc\n  # and to send pids to watch to watchpidlist() thread\n\n  # file descriptors in use:\n  # FDstderr            stderr                for warnings and notes redirected to &2, with --silent redirected to /dev/null\n  # FDmessage           $Messagefifo          for messages from other threads to watchmessagefifo()\n  # FDcmdstdin          stdin>>$Cmdstinfile   --stdin with catstdin, redirection of &0\n  # FDtimetosaygoodbye  $Timetosaygoodbyefifo for saygoodbye() and waitfortheend()\n  # FDwatchpid          $Watchpidfifo         for watchpidlist()\n  case \"$Mobyvm\" in\n    yes) Usemkfifo=\"no\" ;;\n    no)  Usemkfifo=\"yes\" ;;\n  esac\n\n  [ \"$Runtime\" = \"kata-runtime\" ] && Usemkfifo=\"no\"\n  #[ \"$Runtime\" = \"sysbox-runc\" ]  && Usemkfifo=\"no\"\n  # redirect stdin to named pipe. Named pipe is shared with container and used as stdin of container command in containerrc\n  [ \"$Forwardstdin\" = \"yes\" ] && {\n    case \"$Usemkfifo\" in\n      yes) unpriv \"mkfifo '$Cmdstdinfifo'\" ;;\n      no)  mkfile \"$Cmdstdinfifo\" ;;\n    esac\n    #exec {FDcmdstdin}<>$Cmdstdinfifo\n    #cat <&0 >>${FDcmdstdin} & storepid $! catstdin\n    cat <&0 >>\"$Cmdstdinfifo\" & storepid $! catstdin\n    storeinfo \"stdin=$Cmdstdinfifo\"\n  }\n  case \"$Usemkfifo\" in\n    yes)\n      unpriv \"mkfifo '$Watchpidfifo'\"\n      unpriv \"mkfifo '$Messagefifo' && chmod 666 '$Messagefifo'\"\n      unpriv \"mkfifo '$Timetosaygoodbyefifo'\"\n    ;;\n    no) # Windows, kata\n      mkfile \"$Watchpidfifo\"\n      mkfile \"$Messagefifo\" 666\n      mkfile \"$Timetosaygoodbyefifo\" 666\n    ;;\n  esac\n\n  # used by waitfortheend()\n  exec {FDtimetosaygoodbye}<>\"$Timetosaygoodbyefifo\"\n\n  # start watching important pids, e.g. xinit, container.\n  exec {FDwatchpid}<>\"$Watchpidfifo\"\n  watchpidlist & storepid $! watchpidlist\n\n  # start watching for messages out of container\n  exec {FDmessage}<>\"$Messagefifo\"\n  watchmessagefifo & storepid $! watchmessagefifo\n\n  return 0\n}\nsetup_verbosity() {             # options --verbose, --stdout, --stderr\n  local Line Logfiles\n  # create summary logfile\n  Logfiles=\"\n    $Cmdstderrlogfile\n    $Cmdstdoutlogfile\n    $Compositorlogfile\n    $Containerlogfile\n    $Systemdjournallogfile\n    $Messagelogfile\n    $Xinitlogfile\n    $Xpraclientlogfile\n    $Xpraserverlogfile\n    \"\n\n  [ -n \"$Verbose\" ] && [ \"$Verbose\" != \"yes\" ] && Logfiles=\"$(grep -E \"$Verbose\" <<< \"$Logfiles\")\" # unofficial hack to optionally reduce log output\n  \n  for Line in $Logfiles; do\n    [ -e \"$Line\" ] && grep -q \"/\" <<< \"$Line\" && Logfiles=\"$Logfiles $Line\"\n  done\n\n  {\n    trap '' SIGINT\n    tail --pid=\"$$\" --retry -n +1 -F $Logfiles 2>/dev/null >>\"$Logfile\" ||:\n  } &\n\n  # option --verbose\n  [ \"$Verbose\" ] && {\n    trap '' SIGINT\n    case \"$Verbosecolors\" in\n      no)  tail --pid=\"$$\" --retry -n +1 -F \"$Logfile\" 2>/dev/null >&${FDstderr} ;;\n      yes) tail --pid=\"$$\" --retry -n +1 -F \"$Logfile\" 2>/dev/null | sed \"\n                                      /\\(Failed to add fd to store\\|Failed to set invocation ID\\|Failed to reset devices.list\\)/d;\n                                      s/\\(ERROR\\|Error\\|error\\|FAILURE\\|FATAL\\|Fatal\\|fatal\\)/${Colredbg}\\1${Colnorm}/g;\n                                      s/\\(Failed\\|failed\\|Failure\\|failure\\)/${Colred}\\1${Colnorm}/g;\n                                      s/\\(WARNING\\|Warning\\|warning\\)/${Colyellow}\\1${Colnorm}/g;\n                                      s/\\(DEBUGNOTE\\)/${Colblue}\\1${Colnorm}/g;\n                                      s/^==>.*/${Coluline}\\0${Colnorm}/;\n                                      s/\\(Starting\\|Activating\\)/${Colgreen}\\0${Colnorm}/;\n                                      s/\\(Started\\|Reached target\\|activated\\)/${Colgreenbg}\\0${Colnorm}/;\n                                      s/^\\(+\\|++\\|+++\\)/${Colgreenbg}\\0${Colnorm}/ ;\n                                      s/^x11docker/${Colgreen}\\0${Colnorm}/ \" >&${FDstderr}\n      ;;\n    esac\n  } &\n\n  [ \"$Showcontaineroutput\" = \"yes\" ]    && {\n    {\n      waitforlogentry tailstdout \"$Storeinfofile\" \"x11docker=ready\" \"\"  infinity ||:\n      trap '' SIGINT\n      tail --pid=\"$$\" -n +1 -f \"$Cmdstdoutlogfile\"     2>/dev/null ||:\n    } &\n    {\n      waitforlogentry tailstderr \"$Storeinfofile\" \"x11docker=ready\" \"\"  infinity ||:\n      trap '' SIGINT\n      tail --pid=\"$$\" -n +1 -f \"$Cmdstderrlogfile\" >&2 2>/dev/null ||:\n    } &\n  }\n\n  return 0\n}\n\n#### options\nparse_options() {               # parse cli options\n  local Shortoptions Longoptions Parsedoptions Presetoptions Presetfile\n  Shortoptions=\"aAcdDfFghHiIKlmnpPqtTvVwWxXyY\"\n  Shortoptions=\"${Shortoptions}e\"                                                                                           # deprecated\n  Longoptions=\"$Longoptions,auto,desktop,tty,wayland,wm::,xc::,xonly\"                                                       # Influencing auto-setup of X/Wayland/x11docker\n  Longoptions=\"$Longoptions,hostdisplay,nxagent,runx,xephyr,xpra,xpra2,xorg,xvfb,xwin\"                                      # X servers\n  Longoptions=\"$Longoptions,weston-xwayland,xpra-xwayland,xpra2-xwayland,xwayland\"                                          # X servers depending on a Wayland compositor\n  Longoptions=\"$Longoptions,hostwayland,kwin,weston\"                                                                        # Wayland compositors without X\n  Longoptions=\"$Longoptions,border::,dpi:,fullscreen,output-count:,rotate:,scale:,size:,xfishtank\"                          # X/Wayland appearance options\n  Longoptions=\"$Longoptions,clean-xhost,composite::,display:,keymap:,vt::,westonini:,xauth::,xhost::,xoverip::,xtest::\"     # X/Wayland config\n  Longoptions=\"$Longoptions,checkwindow::,fallback::,preset:,pull::\"                                                        # x11docker config\n  Longoptions=\"$Longoptions,cachebasedir:,home::,homebasedir:,share:\"                                                       # Host folders\n  Longoptions=\"$Longoptions,alsa::,clipboard::,gpu::,lang::,printer::,pulseaudio::,webcam\"                                  # Host integration features\n  Longoptions=\"$Longoptions,backend:,env:,mobyvm,name:,no-entrypoint,no-setup,rootfs,rootless::,runtime:,snap,workdir:\"     # Container config\n  Longoptions=\"$Longoptions,cap-default,ipc::,limit::,newprivileges::,network::\"                                            # Container capabilities\n  Longoptions=\"$Longoptions,group-add:,hostuser:,password::,sudouser::,user:,shell:\"                                        # Container user\n  Longoptions=\"$Longoptions,dbus::,init::,hostdbus,sharecgroup\"                                                             # Container init and DBus\n  Longoptions=\"$Longoptions,stdin,interactive\"                                                                              # Container interaction\n  Longoptions=\"$Longoptions,runasuser:,runfromhost:,runasroot:\"                                                             # Additional commands to execute\n  Longoptions=\"$Longoptions,printenv::,printid::,printinfofile::,printpid1::\"                                               # Output of vars on stdout\n  Longoptions=\"$Longoptions,debug,printcheck,quiet,verbose::\"                                                               # Verbose options\n  Longoptions=\"$Longoptions,build,cleanup,help,launcher,licence,license,version\"                                            # Special options without starting X or container\n  Longoptions=\"$Longoptions,install,remove,remove-oldprefix,update::,update-master::\"                                       # Installation\n  #\n  Longoptions=\"$Longoptions,experimental,keepcache,remountcgroup,xopt:,xorgconf:\"                                           # Experimental\n  Longoptions=\"$Longoptions,dbus-system,enforce-i,exe,homedir:,hostipc,hostnet,iglx,kwin-xwayland\"                          # Deprecated\n  Longoptions=\"$Longoptions,no-auth,no-internet,no-xhost\"                                                                   # Deprecated\n  Longoptions=\"$Longoptions,sharedir:,sharessh,systemd,showenv,showid,showinfofile,showpid1\"                                # Deprecated\n  Longoptions=\"$Longoptions,cachedir:,no-init,nothing,no-xtest,openrc,podman,pull::,ps,pw::,runit,silent,starter\"           # Removed\n  Longoptions=\"$Longoptions,stderr,stdout,sys-admin,sysvinit,tini,trusted,untrusted,vcxsrv,xdummy\"                          # Removed\n\n  # default preset files\n  parse_preset \"default\" ||:\n\n  # options from cli\n  Parsedoptions=\"$(getopt --options \"$Shortoptions\" --longoptions \"$Longoptions\" --name \"$0\" -- \"$@\" )\" || error \"Failed to parse options.\"\n  eval set -- \"$Parsedoptions\"\n  Parsedoptions_global=\"$Parsedoptions_global\n  () $Parsedoptions\"\n\n  [ \"$*\" = \"-h --\" ] &&       usage &&        exit 0                 # Catch single -h for usage info, otherwise it means --hostdisplay\n  [ \"$*\" = \"--\" ]    &&       usage &&        exit 0                 # x11docker without options\n\n  while [ $# -gt 0 ]; do\n    Optionset=\"$Optionset\n${1:-}\"\n    case \"${1:-}\" in\n         --help)              usage ;         exit 0 ;;              # Show help/usage and exit\n         --license|--licence) license ;       exit 0 ;;              # Show MIT license and exit\n         --version)           echo $Version ; exit 0 ;;              # Output version number and exit\n         --xonly)             Backend=\"host\"                         # Only create X server\n                              Containercommand=\"sleep infinity\"\n                              Showdisplayenvironment=\"${Showdisplayenvironment:-yes}\" ;;\n         --preset)                                                   # Predefined option sets\n                              parse_preset \"${2:-}\" || error \"Option --preset: File not found: ${2:-}\n  Searching in:\n  $Presetdirlocal\n  $Presetdirsystem\"\n                              shift ;;\n\n     #### Choice of X servers and Wayland compositors\n         --auto)              Autochooseserver=\"yes\" ;;              # Default: auto-choose X server or Wayland compositor\n      -h|--hostdisplay)       Xserver=\"--hostdisplay\" ;;             # Host display :0 with shared X socket\n      -H|--hostwayland)       Xserver=\"--hostwayland\" ;;             # Host wayland. Allows coexistence with option\n      -K|--kwin)              Xserver=\"--kwin\" ;;                    # KWin, Wayland only\n      -n|--nxagent)           Xserver=\"--nxagent\" ;;                 # nxagent\n         --runx)              Xserver=\"--runx\" ;;                    # MS Windows: Will be Xwin or VcXsrv\n      -t|--tty)               Xserver=\"--tty\"  ;;                    # Do not provide any X nor Wayland\n      -T|--weston)            Xserver=\"--weston\" ;;                  # Weston, Wayland only\n      -Y|--weston-xwayland)   Xserver=\"--weston-xwayland\" ;;         # Weston + Xwayland\n      -y|--xephyr)            Xserver=\"--xephyr\" ;;                  # Xephyr\n      -a|--xpra)              Xserver=\"--xpra\" ;;                    # xpra\n         --xpra2)             Xserver=\"--xpra2\" ;;                   # xpra server in container and client on host\n      -A|--xpra-xwayland)     Xserver=\"--xpra-xwayland\" ;;           # Xpra with vfb Xwayland\n         --xpra2-xwayland)    Xserver=\"--xpra2-xwayland\" ;;          # Xpra with vfb Xwayland\n      -x|--xorg)              Xserver=\"--xorg\" ;;                    # Xorg\n         --xvfb)              Xserver=\"--xvfb\" ;;                    # Xvfb. Invisible on host.\n      -X|--xwayland)          Xserver=\"--xwayland\" ;;                # Xwayland on already running Wayland\n         --xwin)              Xserver=\"--xwin\" ;;                    # XWin, MS Windows only\n\n     #### Influencing automatic choice of X server or Wayland compositor\n      -d|--desktop)           Desktopmode=\"yes\" ;;                   # image contains a desktop environment.\n      -g)                     Sharegpu=\"yes\" ;;                      # GPU access\n         --gpu)               Sharegpu=\"${2:-yes}\" ; shift ;;        # GPU access\n      -W|--wayland)           Setupwayland=\"yes\" ;;                  # set up wayland environment, regards --desktop\n      -w)                                      Windowmanagermode=\"auto\" ; Desktopmode=\"yes\" ;;\n         --wm)                case \"${2:-}\" in                       # choose window manager\n                                \"n\"|\"none\"|\"no\") Windowmanagermode=\"none\" ;;\n                                \"host\")          Windowmanagermode=\"host\" ;;\n                                \"\"|\"auto\"|\"m\")   Windowmanagermode=\"auto\" ;;\n                                *)               Windowmanagermode=\"auto\"; Windowmanagercommand=\"${2:-}\" ;;\n                              esac\n                              shift ; Desktopmode=\"yes\" ;;\n         --xc)                Xcontainer=\"${2:-yes}\" ; shift ;;      # Run X server in container\n\n     #### X and Wayland appearance\n         --border)            Xpraborder=\"${2:-\"blue,1\"}\"; shift ;;  # Colored border for xpra clients\n         --dpi)               Dpi=${2:-} ; shift ;;                  # Dots per inch. Influences font size\n      -f|--fullscreen)        Fullscreen=\"yes\"  ;;                   # Fullscreen mode for Xephyr and Weston\n         --output-count)      Outputcount=\"${2:-}\" ; shift ;;        # Number of virtual outputs\n         --rotate)            Rotation=${2:-} ; shift ;;             # Rotation and mirroring\n         --scale)             Scaling=${2:-} ; shift ;;              # Zoom\n         --size)              Screensize=\"${2:-}\" ;  shift ;;        # Screen size\n      -F|--xfishtank)         Xfishtank=\"yes\" ;;                     # Run xfishtank on new X server\n\n     #### X and Wayland configuration\n         --composite)         Xcomposite=\"${2:-yes}\" ; shift ;;      # Enable or disable X extension COMPOSITE\n         --display)           Newdisplaynumber=\"${2:-}\"              # Display number to use for new X server or Wayland compositor\n                              [ \"$(cut -c1 <<< \"$Newdisplaynumber\")\" = \":\" ] && Newdisplaynumber=\"$(cut -c2- <<< \"$Newdisplaynumber\")\"\n                              shift ;;\n         --keymap)            Xkblayout=\"${2:-}\" ; shift ;;          # Keymap layout for xkbcomp. Compare /usr/share/X11/xkb/symbols\n         --vt)                Newxvt=\"${2:-auto}\" ; shift ;;         # Virtual console to use for --xorg\n         --xoverip)           Xoverip=\"${2:-yes}\" ; shift ;;         # Use X over TCP/IP instead of sharing X socket\n         --xtest)             Xtest=\"${2:-yes}\" ; shift ;;           # X extension XTEST\n         --westonini)         Customwestonini=\"${2:-}\" ; shift ;;    # Custom weston.ini\n\n     #### X Authentication\n         --clean-xhost|--no-xhost) Cleanxhost=\"yes\"                  # Disable xhost credentials on host X\n                              [ \"${1:-}\" = \"--no-xhost\" ] && note \"Option --no-xhost is deprecated.\n  Please use --clean-xhost instead.\" ;;\n         --xauth)             Xauthentication=\"${2:-yes}\" ; shift ;; # X cookie settings\n         --xhost)             Xhost=\"${2:-auto}\" ; shift ;;          # Custom xhost setting on new X server\n\n     #### Host integration options\n         --alsa)              Sharealsa=\"yes\"                        # ALSA sound (shares /dev/snd)\n                              Alsacard=\"${2:-$Alsacard}\" ; shift ;;\n      -c)                     Shareclipboard=\"yes\" ;;                # Clipboard sharing\n         --clipboard)         Shareclipboard=\"${2:-yes}\" ; shift ;;  # Clipboard sharing\n      -l)                     Langwunsch=\"$Langwunsch\n${LANG:-}\"                                                           # Locale/language setting\n                              Langwunsch=\"${Langwunsch:-$LC_ALL}\"\n                              [ \"$Langwunsch\" ] || note \"Option --lang: Environment variable \\$LANG is empty.\n  Please specify desired language locale with e.g. --lang=en_US or --lang=zh_CN.\" ;;\n         --lang)              Langwunsch=\"$Langwunsch\n${2:-${LANG:-}}\" ; shift                                             # Locale/language setting\n                              Langwunsch=\"${Langwunsch:-$LC_ALL}\"\n                              [ \"$Langwunsch\" ] || note \"Option --lang: Environment variable \\$LANG is empty.\n  Please specify desired language locale with e.g. --lang=en_US or --lang=zh_CN.\" ;;\n      -P|--printer)           Sharecupsmode=\"${2:-auto}\" ; shift ;;  # Printer sharing with CUPS\n      -p)                     Pulseaudiomode=\"auto\" ;;               # Pulseaudio sound\n         --pulseaudio)        Pulseaudiomode=\"${2:-auto}\"; shift ;;  # Pulseaudio sound\n         --webcam)            Sharewebcam=\"yes\" ;;                   # Webcam sharing\n\n     #### Special options\n         --checkwindow)       Checkforopenwindow=\"${2:-yes}\" ; shift ;;  # Run container until all windows are closed\n         --fallback)          Fallback=\"${2:-yes}\" ; shift ;;        # Allow/deny fallbacks for impossible options\n      -i|--interactive)       Interactive=\"yes\" ;;                   # Interactive terminal\n         --runasroot)         Runasroot=\"$Runasroot\n${2:-}\"                       ; shift ;;                             # Add custom root command in container setup script\n         --runasuser)         Runasuser=\"$Runasuser\n${2:-}\"\n                              shift ;;                               # Add custom user command in cmdrc\n         --runfromhost)       Runfromhost=\"$Runfromhost\n${2:-}\"                       ; shift ;;                             # Add custom host command in xinitrc\n\n     #### User settings\n         --group-add)         Containerusergroups=\"$Containerusergroups ${2:-}\" ; shift ;; # Additional groups for container user\n         --hostuser)          Hostuser=\"${2:-}\" ; shift ;;           # Set host user different from logged in user\n         --password)          Containeruserpassword=\"${2:-INTERACTIVE}\" ; shift ;; # Change encrypted password in ~/.config/x11docker/passwd\n         --shell)             Containerusershell=\"${2:-}\" ; shift ;; # Set preferred user shell\n         --sudouser)          Sudouser=\"${2:-yes}\" ; shift ;;        # su and sudo for container user with password x11docker\n         --user)              Containeruser=\"${2:-}\"  ; shift ;;     # Set container user other than host user\n\n     #### Init system and DBus\n         --dbus)              Dbusrunsession=\"${2:-yes}\" ; shift ;;  # DBus in container, Default: user session, =system: with system daemon\n         --hostdbus)          Sharehostdbus=\"yes\" ;;                 # Connect to host DBus\n         --init)              Initsystem=\"${2:-tini}\" ; shift ;;     # init in container\n         --sharecgroup)       Sharecgroup=\"yes\" ;;                   # Share /sys/fs/cgroup. Default for --init=systemd, possible use with --init=openrc or elogind.\n         --systemd)           Initsystem=\"systemd\" ; note \"Option --systemd is deprecated. Please use: --init=systemd\" ;;\n\n     #### Container configuration\n         --backend)           Backend=\"${2:-}\" ; shift ;;            # container backend to use: docker, podman, nerdctl, others\n         --cap-default)       Capdropall=\"no\" ;;                     # Don't use --cap-drop=ALL --security-opt=no-new-privileges\n         --env)               store_runoption env \"${2:-}\"           # Set container environment variables\n                              shift ;;\n         --ipc)               Shareipc=\"${2:-host}\" ; shift ;;\n         --limit)             Limitresources=\"${2:-0.5}\" ; shift ;;  # Limited CPU and RAM access\n         --mobyvm)            Mobyvm=\"yes\" ;;                        # Use MobyVM in WSL2\n         --name)              Containername=\"${2:-}\" ; shift ;;      # Set container name\n      -I)                     Network=\"\" ;;\n         --network)           Network=\"${2:-}\" ; shift ;;            # Enable internet access\n         --newprivileges)     Allownewprivileges=\"${2:-yes}\" ; shift ;; # [Don't] set --security-opt=no-new-privileges\n         --no-entrypoint)     Noentrypoint=\"yes\" ;;                  # Disable ENTRYPOINT of image\n         --no-setup)          Containersetup=\"no\" ;;                 # No setup of x11docker inside of container (notable disables containerrootrc() )\n         --rootfs)            Podmanrootfs=\"yes\" ;;                  # run a rootfs in posman instead of image\n         --rootless)          Backendrootless=\"${2:-yes}\"; shift ;;\n         --runtime)           Runtime=\"${2:-}\" ; shift               # Runtime=runc|nvidia|kata-runtime|crun\n                              [ \"$Runtime\" = \"kata\" ]   && Runtime=\"kata-runtime\"\n                              [ \"$Runtime\" = \"sysbox\" ] && Runtime=\"sysbox-runc\" ;;\n         --snap)              Snapsupport=\"yes\" ;;                   # snap fallback mode\n         --stdin)             Forwardstdin=\"yes\" ;;                  # Forward stdin to container command\n         --workdir)           Workdir=\"${2:-}\" ; shift ;;            # Set working directory\n\n     #### host folders and docker volumes\n      -m)                     Sharehome=\"host\" ;;\n         --home|--homedir)    Sharehome=\"yes\"                        # Share host folder as HOME in container, ~/x11docker/imagename or $2\n                              [ \"${1:-}\" = \"--homedir\" ] && note \"Option --homedir is deprecated.\n  Please use --home=DIR instead.\"\n                              Persistanthomevolume=\"${2:-}\" ; shift ;;\n         --share|--sharedir)  store_runoption volume \"${2:-}\"         # Share host file, device or directory\n                              [ \"${1:-}\" = \"--sharedir\" ] && note \"Option --sharedir is deprecated.\n  Please use option --share=PATH instead.\"\n                              shift ;;\n         --homebasedir)       Hosthomebasefolder=\"${2:-}\" ; shift ;; # Set base folder for --home instead of ~/.local/share/x11docker\n         --cachebasedir)      Cachebasefolder=\"${2:-}\" ; shift ;;    # Set base folder for cache  instead of ~/.cache/x11docker\n\n     #### Verbosity options\n      -D|--debug)             Debugmode=\"yes\" ;;                                # Debugging mode\n      -v)                     Verbose=\"yes\" ;;                                  # Be verbose\n         --verbose)           Verbose=\"${2:-yes}\" ; shift ;;                    # Be verbose\n      -V)                     Verbose=\"${Verbose:-yes}\"; Verbosecolors=\"yes\";;  # Be verbose with colored output\n      -q|--quiet)             Silent=\"yes\" ;;                                   # Do not show warnings or errors\n         --printcheck)        Printcheck=\"yes\" ;;                               # Show dependency check messages\n         --printenv)          Showdisplayenvironment=\"${2:-yes}\" ; shift ;;     # Output of display number and cookie file on stdout. Catch with: read xenv < <(x11docker --printenv)\n         --printid)           Showcontainerid=\"${2:-yes}\" ; shift ;;            # Output of container id on stdout\n         --printinfofile)     Showinfofile=\"${2:-yes}\" ; shift ;;               # Show path to $Storeinfofile\n         --printpid1)         Showcontainerpid1pid=\"${2:-yes}\" ; shift ;;       # Output of host PID of container PID 1\n\n     #### Special options not starting X or docker\n         --build)             Buildimage=\"yes\" ;;                               # Build an image from x11docker repository\n         --cleanup)           Cleanup=\"yes\"  ;;                                 # Remove orphaned containers and cache files\n         --install|--remove|--remove-oldprefix) Installermode=\"${1:-}\" ;;       # Installer\n         --update|--update-master) Installermode=\"${1:-}\" ; Installerarg=\"${2:-}\" ; shift ;;   # Installer\n         --launcher)          Createlauncher=\"yes\" ;;                           # Create application launcher on desktop and exit\n\n     #### Experimental options\n         --experimental)      Experimental=\"yes\" ;;                  # Allow some experimental code that might be changed at any time\n         --keepcache)         Preservecachefiles=\"yes\" ;          note \"Option --keepcache: experimental option.\" ;;\n         --remountcgroup)     Remountcgroup=\"yes\" ;               note \"Option --remountcgroup: experimental option.\" ;;\n         --xopt)              Xserveroptions=\"${2:-}\" ;   shift ; note \"Option --xopt: experimental option.\" ;;      # Custom X server options\n         --xorgconf)          Xorgconf=\"${2:-}\" ;         shift ; note \"Option --xorgconf: experimental option.\" ;;  # Custom xorg.conf\n\n     #### Deprecated options\n         --dbus-system)       note \"Option --dbus-system is deprecated.\n  Please use one of --init=systemd|openrc|runit|sysvinit instead.\n  Possible but discouraged is --dbus=system.\n  Fallback: Enabling options --dbus=system --cap-default\"\n                              check_fallback\n                              Dbusrunsession=\"system\"\n                              Capdropall=\"no\" ;;\n      -e|--exe)               Backend=\"host\"\n                              note \"Option -e, --exe is deprecated.\n  Please use --backend=host instead.\" ;;\n         --enforce-i)         note \"Option --enforce-i is deprecated.\n  Rather create a group weston-launch and add your user to it.\" ;;\n         --hostipc)           Shareipc=\"host\"\n                              note \"Option --hostipc is deprecated.\n  Please use --ipc=host instead.\" ;;\n         --hostnet)           Network=\"host\"\n                              note \"Option --hostnet is deprecated.\n  Please use --network=host instead.\" ;;\n         --iglx)              Sharegpu=\"iglx\"           ;    note \"Option --iglx is deprecated.\n  Please use option --gpu=iglx instead.\" ;;\n         --kwin-xwayland)     Xserver=\"--kwin-xwayland\" ;    note \"Option --kwin-xwayland is deprecated.\n  Please use option --weston-xwayland instead.\" ;;\n         --no-auth)           Xauthentication=\"no\"  ;        note \"Option --no-auth is deprecated.\n  Please use option --xauth=no instead.\" ;;\n         --no-internet)       Network=\"none\"\n                              note \"Option --no-internet is deprecated.\n  Option --network=none is default now.\" ;;\n         --sharessh)          [ -e \"${SSH_AUTH_SOCK:-}\" ] && {       # SSH socket sharing\n                                store_runoption volume \"$(dirname \"$SSH_AUTH_SOCK\")\"\n                                store_runoption env \"SSH_AUTH_SOCK=$(escapestring \"${SSH_AUTH_SOCK:-}\")\"\n                              } || note \"Option --sharessh: environment variable \\$SSH_AUTH_SOCK not set:\" ;\n                              note \"Option --sharessh is deprecated.\n  Please use (directly or with help of option --preset):\n  --share \\$(dirname \\$SSH_AUTH_SOCK) --env SSH_AUTH_SOCK=\\\"\\$SSH_AUTH_SOCK\\\"\" ;;\n         --showenv)           Showdisplayenvironment=\"yes\" ; note \"Option --showenv is deprecated.\n  Please use option --printenv instead.\" ;;\n         --showid)            Showcontainerid=\"yes\" ;        note \"Option --showid is deprecated.\n  Please use option --printid instead.\" ;;\n         --showinfofile)      Showinfofile=\"yes\" ;           note \"Option --showinfofile is deprecated.\n  Please use option --printinfofile instead.\" ;;\n         --showpid1)          Showcontainerpid1pid=\"yes\" ;   note \"Option --showpid1 is deprecated.\n  Please use option --printpid1 instead.\" ;;\n\n     #### Removed options\n         --vcxsrv)            error \"Option --vcxsrv is no longer supported.\n  Please use either option --xwin in Cygwin/X\n  or use option --runx in WSL or MSYS2.\n  For 'runx' look at:  https://github.com/mviereck/runx\" ;;\n         --no-init|--openrc|--runit|--sysvinit|--tini)\n                              error \"Option ${1:-} has been removed.\n  Please use option --init=INITSYSTEM instead.\" ;;\n         --cachedir|--nothing|--no-xtest|--podman|--ps|--pull|--pw|--silent|--starter|--stderr|--stdout|--sys-admin|--trusted|--untrusted)\n                              error \"Option ${1:-} has been removed.\n  Please have a look at 'x11docker --help' for possible replacements\n  or search for '${1:-}' in /usr/share/doc/x11docker/CHANGELOG.md.\" ;;\n\n     ##### Custom docker options / image name + container command. Everything after --\n      --)\n        shift\n        [ \"$(cut -c1 <<< \"${1:-}\")\"  = \"-\" ] && grep -q \" -- \"  <<< \" $* \" && {\n          while [ $# -gt 0 ] ; do\n            [ \"${1:-}\" = \"--\" ] && shift && break\n            Customdockeroptions=\"$Customdockeroptions '${1:-}'\"\n            shift\n          done\n        }\n        while [ $# -gt 0 ] ; do\n          [ -n \"${1:-}\" ] && [ -z \"$Imagename\" ] && [ \"$(echo \"${1:-}\" | cut -c1)\"  = \"-\" ]  && Customdockeroptions=\"$Customdockeroptions ${1:-}\"\n          [ -n \"${1:-}\" ] && [ -z \"$Imagename\" ] && [ \"$(echo \"${1:-}\" | cut -c1)\" != \"-\" ]  && Imagename=\"${1:-}\" && shift\n          [ -n \"${1:-}\" ] && [ -n \"$Imagename\" ] && Containercommand=\"$Containercommand '${1:-}'\"\n          shift\n        done\n      ;;\n      '') ;;\n      *) error \"Unknown option ${1:-}\n  Parsed options:\n  $Parsedoptions\" ;;\n    esac\n    shift\n  done\n\n  # Generate a list of options in use\n  for Line in -a,--xpra -A,--xpra-xwayland -c,--clipboard -d,--desktop -D,--debug -f,--fullscreen -g,--gpu -e,--exe -F,--xfishtank -h,--hostdisplay -H,--hostwayland -i,--interactive -I,--network -K,--kwin -l,--lang -m,--home -n,--nxagent -p,--pulseaudio -P,--printer -q,--quiet -t,--tty -T,--weston -v,--verbose -w,--wm -W,--wayland -x,--xorg -X,--xwayland -y,--xephyr -Y,--weston-xwayland; do\n    grep -q -x -- \"$(cut -d, -f1 <<< \"$Line\")\" <<< \"$Optionset\" && Optionset=\"$Optionset\n$(cut -d, -f2 <<< \"$Line\")\"\n  done\n  Optionset=\"$(grep -- '--' <<< \"$Optionset\" | sort | uniq)\"\n  Optionset=\"$(grep -v -x -- '--' <<< \"$Optionset\")\"\n  for Line in $(tr \",\" \"\\n\" <<< \"$Longoptions\"); do\n    Optionsetall=\"$Optionsetall\n$(sed 's/^/--/g ; s/://g' <<< \"$Line\")\"\n  done\n  Optionsetall=\"$(grep . <<< \"$Optionsetall\")\"\n\n  return 0\n}\nparse_preset() {                # nested parsing for --preset\n  local Presetfile Presetoptions\n\n  # file already parsed? Avoid a loop\n  grep -q -x \"${1:-}\" <<< \"$Presetlist\" && return 0\n  Presetlist=\"$Presetlist\n${1:-}\"\n\n  # check global and local preset dir. Prefer local one.\n  [ -f \"$Presetdirsystem/${1:-}\" ] && Presetfile=\"$Presetdirsystem/${1:-}\"\n  [ -f \"$Presetdirlocal/${1:-}\" ]  && Presetfile=\"$Presetdirlocal/${1:-}\"\n  [ -f \"$Presetfile\" ] || return 1\n\n  # parse\n  Presetoptions=\"$(sed '/^#/d' < \"$Presetfile\" | tr '\\n' ' ')\"\n  [ -n \"$(tr -d ' ' <<< \"$Presetoptions\")\" ] && {\n    note \"Option --preset: Parsing $Presetfile:\n  $Presetoptions\"\n    eval parse_options \"$Presetoptions\" # eval to preserve whitespace in arguments\n  }\n}\ncheck_options_arguments() {     # check for [likely] valid arguments\n  # not checked here yet:\n  # --home\n  # --cachebasedir\n  # --alsa\n  # --network\n  # --lang\n  # --ipc\n  # --border\n  # --wm\n  # --xhost\n  # --group-add\n  ## --hostuser\n  ## --password\n  ## --user\n  # --env\n  ## --shell\n  ## --workdir\n  # --print*\n  # --preset\n  ## --runasroot\n  ## --runfromhost\n  ## --runasuser\n  # --runtime\n\n  # --fallback\n  case \"$Fallback\" in\n    yes|no) ;;\n    *) error \"Option --fallback: Unknown argument '$Fallback'\" ;;\n  esac\n\n  # CUSTOM_RUN_OPTIONS\n  Customdockeroptions=\"${Customdockeroptions//\"--cap-add \"/\"--cap-add=\"}\"\n  Customdockeroptions=\"${Customdockeroptions//\"--runtime \"/\"--runtime=\"}\"\n  Customdockeroptions=\"${Customdockeroptions//\"--ipc \"/\"--ipc=\"}\"\n  Customdockeroptions=\"${Customdockeroptions//\"--network \"/\"--network=\"}\"\n  Customdockeroptions=\"${Customdockeroptions//\"--net \"/\"--network=\"}\"\n  Customdockeroptions=\"${Customdockeroptions//\"--net=\"/\"--network=\"}\"\n  Customdockeroptions=\"${Customdockeroptions//\"--user \"/\"--user=\"}\"\n  grep -q -- \"--runtime=kata-runtime\"   <<< \"$Customdockeroptions\" && Runtime=\"kata-runtime\"\n  grep -q -- \"--runtime=nvidia\"         <<< \"$Customdockeroptions\" && Runtime=\"nvidia\"\n  grep -q -- \"--runtime=runc\"           <<< \"$Customdockeroptions\" && Runtime=\"runc\"\n  grep -q -- \"--runtime=crun\"           <<< \"$Customdockeroptions\" && Runtime=\"crun\"\n  grep -q -- \"--runtime=sysbox-runc\"    <<< \"$Customdockeroptions\" && Runtime=\"sysbox-runc\"\n\n  # --backend\n  [ -z \"$Imagename\" ] && {\n    case \"${Cleanup}${Createlauncher}${Installermode}\" in\n      \"\")\n        # Only create X server / --xonly\n        Codename=\"xonly\"\n        Backend=\"${Backend:-host}\"\n        Containercommand=\"sleep infinity\"\n        Showdisplayenvironment=\"${Showdisplayenvironment:-yes}\"\n      ;;\n    esac\n  }\n  Backend=\"${Backend:-docker}\"\n  case \"$Backend\" in\n    docker|podman|nerdctl|proot|host) ;;\n    *) \n      error \"Option --backend: Unknown argument '$Backend'.\"\n    ;;\n  esac\n\n  # --clipboard\n  case \"$Shareclipboard\" in\n    yes|no|oneway|superv|altv) ;;\n    *)\n      note \"Option --clipboard: Unknown argument '$Shareclipboard'.\n  Fallback: Disabling option --clipboard.\"\n      check_fallback\n      Shareclipboard=\"no\"\n    ;;\n  esac\n\n  # --dbus [=system]\n  case \"$Dbusrunsession\" in\n    yes|user|session) Dbusrunsession=\"yes\" ;;\n    no) ;;\n    system)\n      Dbusrunsession=\"yes\"\n      Dbussystem=\"yes\"\n    ;;\n    *)\n      note \"Option --dbus: Unknown argument '$Dbusrunsession'.\n  Fallback: Enabling --dbus user session.\"\n      check_fallback\n      Dbusrunsession=\"yes\"\n    ;;\n  esac\n  \n  # --dpi\n  [ \"$Dpi\" ] && {\n    isnum \"$Dpi\" || {\n      note \"Option --dpi only accepts numeric values. Not numeric: '$Dpi'\n  Fallback: Disaling option --dpi.\"\n      check_fallback\n      Dpi=\"\"\n    }\n  }\n\n  # --gpu\n  case \"$Sharegpu\" in\n    yes|no|direct|iglx|virgl) ;;\n    *)\n      note \"Option --gpu: Unknown argument '$Sharegpu'.\n  Fallback: Disabling option --gpu.\"\n      check_fallback\n      Sharegpu=\"no\"\n    ;;\n  esac\n\n  # --homebasedir\n  [ \"$Hosthomebasefolder\" ] && {\n    Hosthomebasefolder=\"$(convertpath subsystem \"$Hosthomebasefolder\")\"\n    [ -e \"$Hosthomebasefolder\" ] || error \"Option --homebasedir: Specified path does not exist:\n  $Hosthomebasefolder\"\n  }\n\n  # --init\n  case \"$Initsystem\" in\n    tini|systemd|sysvinit|openrc|runit|dockerinit|s6-overlay) ;;\n    no|none) Initsystem=\"none\" ;;\n    *)\n      note \"Option --init: Unknown init system $Initsystem\n  Possible: tini systemd sysvinit openrc runit s6-overlay none\n  Fallback: Using --init=tini instead.\"\n      check_fallback\n      Initsystem=\"tini\"\n    ;;\n  esac\n\n  # --limit N\n  [ \"$Limitresources\" ] && {\n    [ \"1\" = \"$(awk -v a=\"$Limitresources\" \"BEGIN {print (a <= 1)}\")\" ] && [ \"1\" = \"$(awk -v a=\"$Limitresources\" \"BEGIN {print (a > 0)}\")\" ] || {\n      warning \"Option --limit: Specified value '$Limitresources' is out of range.\n  Allowed is a factor greater than 0 and less than or equal to 1.  0<FACTOR<=1\n  Fallback: Setting limit factor to --limit=0.5\"\n      check_fallback\n      Limitresources=\"0.5\"\n    }\n  }\n\n  # --name\n  [ -n \"$Containername\" ] && {\n    [ \"$Containername\" = \"$(unspecialstring \"$Containername\" \".\")\" ] || error \"Option --name: container name must not contain special chars.\n  Compare:\n  $Containername\n  $(unspecialstring \"$Containername\" \".\")\"\n  }\n\n  # --newprivileges\n  case \"$Allownewprivileges\"\n  in\n    yes|no|auto) ;;\n    *)\n      note \"Option --newprivileges: Unknown argument '$Allownewprivileges'.\n  Fallback: Setting --newprivileges=auto\"\n      check_fallback\n      Allownewprivileges=\"auto\"\n    ;;\n  esac\n\n  # --output-count\n  [[ \"$Outputcount\" =~ ^[1-9]$ ]] || {\n    note \"Option --output-count: Value must be one of 1 2 3 4 5 6 7 8 9\n  Disabling invalid value $Outputcount\"\n    check_fallback\n    Outputcount=\"1\"\n  }\n\n  # --printer\n  case \"$Sharecupsmode\" in\n    socket|tcp|auto|\"\") ;;\n    *)\n      note \"Option --printer: Unknown argument '$Sharecupsmode'.\n  Fallback: Setting --printer=auto.\"\n      check_fallback\n      Sharecupsmode=\"auto\"\n    ;;\n  esac\n\n  # --pulseaudio\n  case \"$Pulseaudiomode\" in\n    socket|tcp|auto|host|\"\") ;;\n    *)\n      note \"Option --pulseaudio: Unknown argument '$Pulseaudiomode'.\n  Fallback: Setting --pulseaudio=auto.\"\n      check_fallback\n      Pulseaudiomode=\"auto\"\n    ;;\n  esac\n\n  # --rootless\n  case \"$Backendrootless\" in\n    yes|no|\"\") ;;\n    *) error \"Option --rootless: Unknown argument: $Backendrootless\n      Allowed values: yes|no\" ;;\n  esac\n\n  # --rotate\n  [ -n \"$Rotation\" ] && {\n    grep -q -w \"$Rotation\" <<< \"0 90 180 270 flipped flipped-90 flipped-180 flipped-270\" || {\n      note \"Option --rotate: Unsupported value '$Rotation'.\n  Must be one of 0 90 180 270 flipped flipped-90 flipped-180 flipped-270\n  Fallback: disabling option --rotate\"\n      check_fallback\n      Rotation=\"\"\n    }\n  }\n\n  # --scale\n  [ -n \"$Scaling\" ] && {\n    isnum \"$Scaling\" || {\n      note \"Option --scale needs a number. '$Scaling' is not allowed.\n  Fallback: disabling option --scale\"\n      check_fallback\n      Scaling=\"\"\n    }\n  }\n\n  # --share\n  while read Line; do\n    grep -q -E \"/|\\\\|:\" <<< \"$Line\" && Line=\"$(convertpath subsystem \"$Line\")\"\n    [ \"${Line:0:1}\" != \"/\" ] && grep -q \"/\" <<< \"$Line\" && error \"Option --share needs either an absolute path\n  or a volume name without any '/':\n  $Line\"\n    [ \"${Line:0:1}\" = \"/\" ] && [ ! -e \"$Line\" ] && error \"Option --share: File or folder does not exist:\n  $Line\"\n    [ -z \"$Line\" ] && error \"Option --share needs an argument\"\n  done < <(store_runoption dump volume)\n\n  # --size\n  [ \"$Screensize\" ] && {\n    isint \"$(cut -d\"x\" -f1 <<< \"$Screensize\")\" && isint \"$(cut -d\"x\" -f2 <<< \"$Screensize\")\" && grep -q \"x\" <<< \"$Screensize\" || {\n      note \"Option --size: Invalid argument: $Screensize\n  Must consist of two integers with an x between them.\n  Fallback: Disabling option --size\"\n      check_fallback\n      Screensize=\"\"\n    }\n  }\n\n  # --sudouser\n  Sudouser=\"${Sudouser,,}\"\n  case \"$Sudouser\" in\n    no|\"\") Sudouser=\"\" ;;\n    yes|nopasswd) ;;\n    *)\n      note \"Option --sudouser: Unknown argument '$Sudouser'.\n  Fallback: Disabling option --sudouser.\"\n      Sudouser=\"\"\n      check_fallback\n    ;;\n  esac\n\n  # --update, --update-master\n  case \"$Installerarg\" in\n    \"\") ;;\n    diff) ;;\n    *)\n      error \"Option --update/--update-master: Unknown argument '$Installerarg'.\"\n    ;;\n  esac\n\n  # --vt\n  [ -n \"$Newxvt\" ] && {\n    [ \"$Newxvt\" = \"auto\" ] || isint \"$Newxvt\" || {\n      note \"Option --vt: Argument must be a positive integer: $Newxvt\n  Fallback: Disabling option --vt\"\n      check_fallback\n      Newxvt=\"\"\n    }\n  }\n\n  # --xauth\n  case \"$Xauthentication\" in\n    yes|no|trusted|untrusted) ;;\n    *)\n      note \"Option --xauth: Unknown argument: $Xauthentication\n  Fallback: Setting --xauth=yes\"\n      check_fallback\n      Xauthentication=\"yes\"\n    ;;\n  esac\n\n  # --xoverip\n  case \"$Xoverip\" in\n    yes|no|listentcp|socat|\"\") ;;\n    *)\n      note \"Option --xoverip: Unknown argument: $Xoverip\n  Fallback: Disabling option --xoverip\"\n      check_fallback\n      Xoverip=\"\"\n    ;;\n  esac\n\n  # --xtest\n  case \"$Xtest\" in\n    yes|no|\"\") ;;\n    *)\n      note \"Option --xtest: Unknown argument: $Xtest\n  Fallback: Disabling option --xtest\"\n      check_fallback\n      Xtest=\"\"\n    ;;\n  esac\n\n  # --westonini\n  [ -n \"$Customwestonini\" ] && [ ! -f \"$Customwestonini\" ] && {\n    warning \"Custom weston.ini (option --westonini) not found.\n  $Customwestonini\"\n    check_fallback\n    Customwestonini=\"\"\n  }\n\n  # --xc\n  case \"$Xcontainer\" in\n    yes|no|auto) ;;\n    docker|podman|nerdctl) ;;\n    *)\n      note \"Option --xc: Unknown argument '$Xcontainer'.\n  Fallback: Setting --xc=auto.\"\n      check_fallback\n      Xcontainer=\"auto\"\n    ;;\n  esac\n\n  return 0\n}\ncheck_options_interferences() { # check multiple option interferences, change settings if needed\n  local Message\n\n  # --runtime\n  case \"$Runtime\" in\n    #nvidia)\n    #  [ \"$Sharegpu\" = \"no\" ] && {\n    #    note \"Option --runtime=nvidia: Enabling option --gpu\"\n    #    check_fallback\n    #    Sharegpu=\"${Sharegpu:-yes}\"\n    #  }\n    #;;\n    kata-runtime)\n      [ \"$Network\" = \"host\" ] && {\n        note \"Option --network=host: Sharing host network stack does not work\n  with --runtime=kata-runtime. Fallback: Allowing default kata --network.\"\n        check_fallback\n        Network=\"\"\n      }\n      check_optionset \"--runtime=kata-runtime\" \"--alsa --webcam\" ||:\n      Sharewebcam=\"no\"\n      Sharealsa=\"no\"\n    ;;\n  esac\n\n  # --xauth\n  [ \"$Xauthentication\" != \"no\" ] && case \"$Xserver\" in\n    --tty|--weston|--kwin|--hostwayland) Xauthentication=\"no\" ;;\n    --hostdisplay)\n      xtool --check \"xauth\" || {\n        note \"Option --hostdisplay --xauth=$Xauthentication:\n  Command xauth not found. Accessing host display might fail.\n  Fallback: Setting --xauth=no.\n  $Wikipackagesimage\"\n        Xauthentication=\"no\"\n      }\n    ;;\n  esac\n\n  # --xtest\n  [ -z \"$Xtest\" ] && case \"$Xserver\" in\n    --xpra*|--xvfb) \n      note \"Option $Xserver: Enabling option --xtest to allow xpra access.\"\n      Xtest=\"yes\"\n    ;;\n  esac\n\n  # Check whether host X server has MIT-SHM enabled.\n  [ \"$Winsubsystem\" ] && Hostmitshm=\"no\" || {\n    xtool --nocheck \"env LD_PRELOAD= xdpyinfo 2>>$Xinitlogfile | grep -q MIT-SHM\" && Hostmitshm=\"yes\" || Hostmitshm=\"no\"\n    xtool --check --quiet xdpyinfo || Hostmitshm=\"yes\" # if unknown, assume yes\n  }\n\n  # --clipboard\n  case \"$Shareclipboard\" in\n    yes|oneway|superv|altv)\n      [ -z \"$Hostdisplay\" ] && {\n        note \"Option --clipboard: Did not find a host X display\n  to share the clipboard with. DISPLAY is empty.\n  Fallback: Disabling option --clipboard.\"\n        check_fallback\n        Shareclipboard=\"no\"\n      }\n    ;;\n  esac\n  case \"$Shareclipboard\" in\n    superv|altv)\n      xtool --check xbindkeys || {\n        note \"Option --clipboard=$Shareclipboard needs xbindkeys.\n  Fallback: Setting --clipboard=oneway.\"\n        check_fallback\n        Shareclipboard=\"oneway\"\n      }\n      [ \"$Xtest\" = \"yes\" ] && warning \"Options --xtest --clipboard=$Shareclipboard:\n  X extension XTEST is enabled that allows container applications\n  to fake key presses like SUPER+v and ALT+v so they could fool x11docker\n  to provide the host clipboard content without user interaction.\"\n    ;;\n  esac\n  case \"$Shareclipboard\" in\n    oneway|superv|altv)\n      case \"$Xserver\" in\n        --hostdisplay|--xwin|--runx)\n          note \"Option --clipboard: Option $Xserver only supports arguments yes|no.\n  Fallback: Disabling option --clipboard\"\n          check_fallback\n          Shareclipboard=\"no\"\n        ;;\n        --weston|--kwin)\n          note \"Option --clipboard=$Shareclipboard is not supported for $Xserver.\n  $Xserver only supports a limited --clipboard=yes.\n  Fallback: Disabling option --clipboard.\"\n          check_fallback\n          Shareclipboard=\"no\"\n        ;;\n      esac\n    ;;\n  esac\n  case \"$Shareclipboard\" in\n    yes|oneway|superv|altv)\n      case \"$Xserver\" in\n        --tty|--hostwayland)\n          note \"Option --clipboard is not supported for $Xserver.\n  Fallback: Disabling option --clipboard.\"\n          check_fallback\n          Shareclipboard=\"no\"\n        ;;\n        *)\n          xtool --check xclip || {\n            note \"Option --clipboard with $Xserver needs xclip.\n  Fallback: Disabling option --clipboard.\"\n            check_fallback\n            Shareclipboard=\"no\"\n          }\n          case \"$Xserver\" in\n            --weston|--kwin)\n              xtool --check wl-copy || {\n                note \"Option --clipboard with $Xserver needs wl-copy and wl-paste.\n  Fallback: Disabling option --clipboard.\"\n                check_fallback\n                Shareclipboard=\"no\"\n              }\n            ;;\n          esac\n        ;;\n      esac\n    ;;\n  esac\n  case \"$Shareclipboard\" in\n    oneway|superv|altv)\n      case \"$Xserver\" in\n        --hostdisplay|--xwin|--runx)\n          note \"Option --clipboard: Option $Xserver only supports arguments yes|no.\n  Fallback: Disabling option --clipboard\"\n          check_fallback\n          Shareclipboard=\"no\"\n        ;;\n        --weston|--kwin)\n          note \"Option --clipboard=$Shareclipboard is not supported for $Xserver.\n  $Xserver only supports a limited variation of --clipboard=yes.\n  Fallback: Disabling option --clipboard.\"\n          check_fallback\n          Shareclipboard=\"no\"\n        ;;\n      esac\n    ;;\n  esac\n  case \"$Shareclipboard\" in\n    yes)\n      case \"$Xserver\" in\n        --weston|--kwin)\n          note \"Option --clipboard=$Shareclipboard with $Xserver\n  is limited yet to copy from host to container.\n  Middle-mouse-click selection is not supported at all.\"\n          Shareclipboard=\"wayland\"\n          [ -z \"$Hostdisplay\" ] && {\n            note \"Option --clipboard with $Xserver is only supported\n  along with an X server running on host.\n  Fallback: Disabling option --clipboard.\"\n            check_fallback\n            Shareclipboard=\"no\"\n          }\n        ;;\n      esac\n    ;;\n  esac\n\n  # X server\n  case \"$Xserver\" in\n    --xorg) \n      # check if --xorg can be started by an unprivileged user\n      [ -e \"/etc/X11/Xwrapper.config\" ] && sed 's/ //g' /etc/X11/Xwrapper.config | grep -xq \"allowed_users=anybody\" && sed 's/ //g' /etc/X11/Xwrapper.config | grep -xq \"needs_root_rights=yes\" && {\n        Xlegacywrapper=\"yes\"\n      } || {\n        Xlegacywrapper=\"no\"\n      }\n      # xrandr: --scale --size --rotate\n      xtool --check xrandr || {\n        { [ \"$Scaling\" ] || [ -n \"$Rotation\" ] || [ -n \"$Screensize\" ] ; } && {\n          note \"Option --xorg needs 'xrandr' for several options.\n  Fallback: Disabling options --size, --scale and --rotate.\"\n          check_fallback\n          Screensize=\"\"\n          Rotation=\"\"\n          Scaling=\"\"\n        }\n      }\n    ;;\n    --tty)\n      [ \"$Interactive\" = \"no\" ] && {\n        tput lines >/dev/null 2>&1 && {\n          store_runoption env \"LINES=$(tput lines)\"\n          store_runoption env \"COLUMNS=$(tput cols)\"\n        }\n      }\n      check_optionset \"--tty\" \"--border --clipboard --composite --desktop --display --dpi\n                               --fullscreen --keymap --output-count --rotate\n                               --scale --size --vt --wm --westonini --xauth --xc --xfishtank\n                               --xhost --xonly --xoverip --xtest\" ||:\n    ;;\n    --hostdisplay)\n      check_optionset \"$Xserver\" \"--xtest --composite\"\n      Xtest=\"\"\n      Xcomposite=\"\"\n      [ \"$Runsoverssh\" = \"yes\" ] && { ### FIXME\n        [ \"$Network\" != \"host\" ]  && error \"For SSH connection with option --hostdisplay\n  x11docker would need insecure option --network=host.\n  It is recommended to use another X server option\n  like --xpra, --xephyr or --nxagent.\"\n      }\n      # MIT-SHM\n      [ \"$Hostmitshm\" = \"yes\" ] && [ \"$Shareipc\" != \"host\" ] && [ \"$Xoverip\" = \"no\" ] && {\n        case \"$Xcontainer\" in\n          yes)\n            [ -e \"/lib/x86_64-linux-gnu/libdl.so.2\" ] && {\n              store_runoption env \"LD_PRELOAD=/lib/x86_64-linux-gnu/libdl.so.2:$Sharefoldercontainer/XlibNoSHM.so\"\n            } || {\n              store_runoption env \"LD_PRELOAD=$Sharefoldercontainer/XlibNoSHM.so\"\n            }\n          ;;\n          no)\n            case \"$Sharegpu\" in\n              yes|direct)\n                [ \"$Xauthentication\" != \"trusted\" ] && {\n                  note \"Option --hostdisplay --gpu=direct without image x11docker/xserver\n  (option --xc) would require insecure option --ipc=host to avoid MIT-SHM\n  errors. (If you don't care for MIT-SHM errors, use --xauth=trusted.)\n  Fallback: Disabling option --gpu.\"\n                  check_fallback\n                  Sharegpu=\"no\"\n                } \n              ;;\n            esac\n            case \"$Sharegpu\" in\n              no)\n                case \"$Xauthentication\" in\n                  yes)\n                    note \"Option --hostdisplay: To avoid MIT-SHM errors,\n  x11docker sets uncomfortable option --xauth=untrusted to limit X access.\n  If you don't care about MIT-SHM errors, set --xauth=trusted.\n  Insecure and discouraged option --ipc=host avoids MIT-SHM errors.\n  Recommendation: Provide image x11docker/xserver (option --xc) that contains\n  a fake MIT-SHM library, or use another X server option like --nxagent.\"\n                    Xauthentication=\"untrusted\"\n                  ;;\n                esac\n              ;;\n            esac\n            case \"$Xauthentication\" in\n              trusted)\n                note \"Option --hostdisplay --xauth=trusted: MIT-SHM errors might occur.\"\n                store_runoption env \"QT_X11_NO_MITSHM=1\"\n                store_runoption env \"_X11_NO_MITSHM=1\"\n                store_runoption env \"_MITSHM=0\"\n              ;;\n            esac\n          ;;\n        esac\n      }\n    ;;\n  esac\n\n  # --vt\n  [ -n \"$Newxvt\" ] && {\n    case \"$Xserver\" in\n      --weston|--weston-xwayland)\n        [ -n \"$Hostdisplay\" ] && error \"Option $Xserver: Opening a TTY for weston on console\n  while still running on X would break TTY switching.\n  Please run nested without option --vt or switch to console first.\"\n      ;;\n    esac\n    case \"$Xserver\" in\n      --weston)\n        [ \"$Xcontainer\" = \"yes\" ] && note \"Option $Xserver: TTY switching will not work\n  with weston on console running in a container (option --xc).\n  Alternative: Run with --xc=no using weston from host.\"\n      ;;\n    esac\n  }\n\n  # window manager\n  [ \"$Desktopmode\" = \"no\" ] && [ -z \"$Windowmanagermode\" ] && [ \"$Xfishtank\" = \"no\" ] && case \"$Xserver\" in\n    --xephyr|--weston-xwayland|--kwin-xwayland|--xorg|--xwayland)\n      note \"Option $Xserver: x11docker assumes that you need\n  a window manager. If you don't want this, run with option --desktop.\n  Enabling option --wm to provide a window manager.\"\n      Windowmanagermode=\"auto\"\n      [ \"$Autochooseserver\" = \"yes\" ] && [ \"$Runsonconsole\" = \"no\" ] && {\n        case \"$Sharegpu\" in\n          no)  note \"Did not find a nice solution to run a seamless application\n  on your desktop. (Only insecure option --hostdisplay would work).\n  It is recommended to install xpra or nxagent\n  to allow a seamless mode without the need of a window manager.\n  $Wikipackagesimage\" ;;\n          yes) note \"Did not find a nice solution to run a seamless application with\n  option --gpu on your desktop. (Only insecure option --hostdisplay would work).\n  It is recommended to install xpra, weston, Xwayland and xdotool\n  to allow a seamless mode without the need of a window manager.\n  $Wikipackagesimage\" ;;\n        esac\n      }\n    ;;\n  esac\n\n  # --checkwindow\n  [ -n \"$Checkforopenwindow\" ] && {\n    xtool --check xwininfo || {\n      note \"Option --checkwindow needs 'xwininfo'.\n  Fallback: Disabling option --checkwindow.\"\n      check_fallback\n      Checkforopenwindow=\"\"\n    }\n  }\n\n  # --fullscreen is nonsense on tty at all. Avoids weston error on tty.\n  [ \"$Runsonconsole\" = \"yes\" ] || [ \"$Newxvt\" ] && Fullscreen=\"no\"\n\n  # --gpu --xoverip\n  case \"$Xoverip\" in\n    socat)\n      store_runoption env \"LIBGL_ALWAYS_SOFTWARE=1\"\n      case \"$Sharegpu\" in\n        virgl|no) ;;\n        yes)\n          note \"Options --gpu=yes --xoverip=socat: Enabling --gpu=virgl.\"\n          Sharegpu=\"virgl\"\n        ;;\n        direct|iglx)\n          note \"Option --gpu=$Sharegpu is not possible with --xoverip=socat.\n  You can try --gpu=virgl instead. (Needs image x11docker/xserver, option --xc).\n  Fallback: Setting option --gpu=virgl.\"\n          check_fallback\n          Sharegpu=\"virgl\"\n        ;;\n      esac\n    ;;\n  esac\n\n  # --gpu\n  case \"$Xoverip\" in\n    yes|listentcp)\n      case \"$Sharegpu\" in\n        virgl|iglx) ;;\n        yes)\n          case \"$Xcontainer\" in\n            yes) Sharegpu=\"virgl\" ;;\n            no)  Sharegpu=\"iglx\" ;;\n          esac\n          note \"Option --gpu with X over IP: Enabling indirect rendering with --gpu=$Sharegpu.\"\n        ;;\n        direct)\n          note \"Option --gpu=$Sharegpu with --xoverip is not supported.\n  Try --gpu=virgl or --gpu=iglx instead.\n  Fallback: Disabling option --gpu.\"\n          check_fallback\n          Sharegpu=\"no\"\n        ;;\n      esac\n    ;;\n  esac\n  case \"$Sharegpu\" in \n    yes)\n      case \"$Xserver\" in\n        --weston|--kwin|--hostwayland)\n          Sharegpu=\"direct\"\n        ;;\n        --xorg|*xwayland|--hostdisplay)\n          Sharegpu=\"direct\"\n        ;;\n        --xwin|--runx)\n          Sharegpu=\"iglx\"\n        ;;\n        --tty)\n          Sharegpu=\"direct\"\n        ;;\n        *)\n          case \"$Xcontainer\" in\n            yes)\n              Sharegpu=\"virgl\"\n              note \"Option --gpu: Enabling option --gpu=virgl.\n  Option --gpu=direct might be more performant, supported by:\n  --xpra-xwayland, --weston-xwayland, --xwayland, --xorg, --hostdisplay\"\n            ;;\n            no)\n              note \"Option --gpu=direct is not supported by $Xserver.\n  Only --gpu=virgl would work, but needs image x11docker/xserver (option --xc).\n  Options supporting direct rendering:\n  --xpra-xwayland, --weston-xwayland, --xwayland, --xorg, --hostdisplay\n  Fallback: Disabling option --gpu\"\n              check_fallback\n              Sharegpu=\"no\"\n            ;;\n          esac\n        ;;\n      esac\n    ;;\n  esac\n  case \"$Sharegpu\" in\n    iglx)\n      store_runoption env \"LIBGL_ALWAYS_INDIRECT=1\"\n    ;;\n    virgl)\n      case \"$Xcontainer\" in\n        yes)\n          case \"$Backend\" in\n            docker|podman|nerdctl) \n              store_runoption env \"LIBGL_ALWAYS_SOFTWARE=1\"   ### FIXME rather belongs to setup_gpu()\n              store_runoption env \"GALLIUM_DRIVER=virpipe\"           ;;\n            *) \n              note \"Option --gpu=virgl is supported with\n  backends docker|podman|nerdctl only.\n  Fallback: Disabling option --gpu=virgl.\"\n              check_fallback\n              Sharegpu=\"no\"\n            ;;\n          esac\n        ;;\n        no)\n          note \"Option --gpu=virgl needs image x11docker/xserver (option --xc).\n  Fallback: Disabling option --gpu=virgl.\"\n          check_fallback\n          Sharegpu=\"no\"\n        ;;\n      esac\n    ;;\n  esac\n\n  # --no-setup\n  case \"$Containersetup\" in\n    no)\n      check_optionset \"--no-setup\" \"--dbus --no-entrypoint --runasroot --runasuser\" ||:\n\n      [ \"$Langwunsch\" ] && store_runoption env \"LANG=$Langwunsch\"\n\n      case \"$Initsystem\" in\n        none|tini|dockerinit) ;;\n        *) \n          note \"Option --no-setup: Option --init=$Initsystem is not supported.\n  Fallback: Setting --init=tini\"\n          check_fallback\n          Initsystem=\"tini\"\n        ;;\n      esac\n\n      [ -z \"$Workdir\" ] && [ \"$Sharehome\" != \"no\" ] && note \"Option --no-setup: You might need to specify\n  e.g. '--workdir=/tmp' or '--env HOME=/tmp' to allow proper functionality.\"\n      [ -n \"$Sudouser\" ] && [ \"$Containeruser\" != \"root\" ] && note \"Option --no-setup does not support option --sudouser.\n  Fallback: Enabling needed container capabilities to allow sudo\n  just in case the container user is set up for su and/or sudo.\n  Consider to use --user=root.\"\n\n      ### FIXME check support of further options\n      # --stdin?\n      # --hostdbus\n\n      Dbusrunsession=\"no\"\n      Noentrypoint=\"no\"\n      Runasroot=\"\"\n      Runasuser=\"\"\n    ;;\n  esac\n\n  # --cap-default\n  [ \"$Capdropall\" = \"no\" ] && {\n    case \"$Allownewprivileges\" in\n      \"yes\"|\"no\") ;;\n      \"auto\")\n        note \"Option --cap-default: Enabling option --newprivileges.\n  You can avoid this with --newprivileges=no\"\n        Allownewprivileges=\"yes\"\n      ;;\n    esac\n  }\n\n  # --keymap: XKB keyboard layout\n  [ -n \"$Xkblayout\" ] && {\n    case \"$Xserver\" in\n      --kwin|--kwin-xwayland)\n        [ \"$Runsonconsole\" = \"yes\" ] || [ \"$Newxvt\" ] && {\n          check_optionset \"$Xserver\" \"--keymap\" || {\n            note \"Option --keymap does not work with option $Xserver\n  if running from console.\n  Fallback: disabling option --keymap.\"\n            check_fallback\n            Xkblayout=\"\"\n          }\n        }\n      ;;\n    esac\n    [ \"$Xkblayout\" = \"clone\" ] && case \"$Xserver\" in\n      --nxagent) ;;\n      *)\n        note \"Option --keymap=clone is supported with --nxagent only.\n  Fallback: Disabling option --keymap.\"\n        check_fallback\n        Xkblayout=\"\"\n      ;;\n    esac\n  }\n\n  # --rotate\n  [ \"$Rotation\" = \"0\" ] && Rotation=\"normal\"\n  case \"$Xserver\" in\n    --weston*)\n      case \"$Rotation\" in\n        90)          Rotation=\"rotate-270\" ;;\n        180)         Rotation=\"rotate-180\" ;;\n        270)         Rotation=\"rotate-90\" ;;\n        flipped-90)  Rotation=\"flipped-rotate-270\" ;;\n        flipped-180) Rotation=\"flipped-rotate-180\" ;;\n        flipped-270) Rotation=\"flipped-rotate-90\" ;;\n      esac\n    ;;\n  esac\n\n  # --shell\n  case \"$Containerusershell\" in\n    auto) ;;\n    *)\n      store_runoption env \"SHELL=$Containerusershell\"\n      [ \"$Containersetup\" = \"no\" ] && note \"Option --shell: With option --no-setup\n  x11docker only sets variable SHELL, but does no setup in /etc/passwd.\n  Some terminal emulators might not work as expected.\"\n    ;;\n  esac\n\n  # --output-count\n  [ \"$Outputcount\" != \"1\" ] && [ \"$Runsonconsole\" = \"yes\" ] && {\n    note \"Option --output-count works in nested/windowed mode only,\n  but not on console. Fallback: disabling option --output-count.\"\n    check_fallback\n    Outputcount=\"1\"\n  }\n  \n  # --xfishtank\n  [ \"$Xfishtank\" = \"yes\" ] && case \"$Xserver\" in\n    --xpra*|--nxagent)\n      [ \"$Desktopmode\" = \"no\" ] && Windowmanagermode=\"${Windowmanagermode:-auto}\" && Desktopmode=\"yes\"\n    ;;\n  esac\n\n  # MSYS2, Cygwin, WSL\n  case \"$Winsubsystem\" in\n    WSL2) note \"WSL2 support is experimental and barely tested yet.\n  Feedback and bug reports are appreciated!\" ;;\n  esac\n  case \"$Mobyvm\" in\n    yes)\n      case \"$Winsubsystem\" in\n        WSL1|WSL2)\n          grep -q \"/c/\" <<< \"$Cachebasefolder\" && [ -z \"$Hosthomebasefolder\" ] && note \"With MobyVM and WSL x11docker stores its cache files on drive C:\n  to allow cache file sharing.\n  Your Docker setup might not allow to share files from drive C:.\n  If startup fails with an 'access denied' error,\n  please either allow access to drive C: or specify a custom folder for\n  cache storage with option '--cachebasedir D:/some/cache/folder'.\n  Same issue can occur with option '--home'.\n  Use option '--homebasedir D:/some/home/folder' in that case.\n  Option --preset can help to reduce typing for each command.\"\n        ;;\n      esac\n      [ \"$Initsystem\" = \"systemd\" ] && {\n        note \"Option --init=systemd is not supported with MobyVM.\n  You can try another init option instead, e.g. --init=openrc.\n  Fallback: Disabling option --init=systemd\"\n        check_fallback\n        Initsystem=\"tini\"\n      }\n      [ \"$Sharecgroup\" = \"yes\" ] && {\n        note \"Option --sharecgroup is not supported with MobyVM.\n  Fallback: Disabling option --sharecgroup.\"\n        check_fallback\n        Sharecgroup=\"no\"\n      }\n    ;;\n  esac\n  case \"$Winsubsystem\" in\n    MSYS2|CYGWIN|WSL1|WSL2)\n      check_optionset \"Windows\" \"--pulseaudio --printer --webcam\" ||:\n      Sharecupsmode=\"\"\n      Pulseaudiomode=\"\"\n      Sharewebcam=\"no\"\n    ;;\n  esac\n\n  # --wayland\n  [ \"$Setupwayland\" = \"yes\" ] && Dbusrunsession=\"yes\"\n\n  # --init\n  case \"$Initsystem\" in\n    systemd|sysvinit|openrc|runit) Dbussystem=\"yes\" ;;\n  esac\n\n  # --interactive\n  case \"$Interactive\" in\n    yes)\n      [ \"$Forwardstdin\" = \"yes\" ] && {\n        note \"Option --stdin is not compatible with option --interactive.\n  Fallback: Disabling option --stdin.\"\n        check_fallback\n        Forwardstdin=\"no\"\n      }\n      [ \"$Runsinteractive\" = \"yes\" ] && {\n        note \"Option -i, --interactive: Does not work in interactive\n  bash mode (option --enforce-i).\n  Fallback: Disabling option --interactive.\"\n        check_fallback\n        Interactive=\"no\"\n      }\n      case \"$Winsubsystem\" in\n        MSYS2|CYGWIN|WSL1)\n          Winpty=\"$(command -v winpty)\"\n          Winpty=\"$(escapestring \"$Winpty\")\"\n          [ -z \"$Winpty\" ] && error \"Option --interactive on MS Windows needs 'winpty'\n  to run x11docker in interactive mode. MSYS2 provides winpty as a package.\n  On Cygwin it can be compiled from source. WSL1 isn't supported yet.\n  WSL2 might work, but is not tested yet.\"\n        ;;\n      esac\n    ;;\n  esac\n  [ \"$Interactive\" = \"yes\" ] && Showcontaineroutput=\"no\"\n\n  return 0\n}\ncheck_options_messages() {      # some messages depending on options, but not changing settings\n  # X server specific messages\n  case \"$Xserver\" in\n    --hostdisplay)\n      [ \"$Autochooseserver\" = \"yes\" ] && [ -z \"$Winsubsystem\" ] && note \"Option --hostdisplay: To allow protection against\n  X security leaks, please install 'xinit' and one or more of:\n    xpra, Xephyr, nxagent, weston+Xwayland, kwin_wayland+Xwayland,\n  or run a second Xorg server with option --xorg.\n  $Wikipackagesimage\"\n      # --clipboard\n      [ \"$Shareclipboard\" = \"yes\" ] || warning \"Option --hostdisplay: The clipboard is not isolated.\"\n      # --xauth\n      case \"$Xauthentication\" in\n        untrusted) ;;\n        *)\n          warning \"Option --hostdisplay provides QUITE BAD container isolation!\n  Abuse of X11 protocol for keylogging and remote host control is possible.\n  It is recommended to use another X server option like --nxagent or --xpra.\n  You can mitigate the issue with option --xauth=untrusted.\"\n        ;;\n      esac\n      # --checkwindow\n      [ \"$Checkforopenwindow\" = \"yes\" ] && note \"Option --checkwindow along with --hostdisplay\n  should only be used with a keyword as a check argument.\n  Otherwise the container is likely to run forever.\"\n    ;;\n\n    --xorg)\n      [ \"$Xcontainer\" = \"yes\" ]  && note \"Options --xorg --xc: Running Xorg in container is experimental\n  and might misbehave, fail or crash.\n  Please report issues at https://github.com/mviereck/x11docker\"\n\n      [ \"$Hostsystem\" = \"opensuse\" ] && [ \"$Runsonconsole\" = \"no\" ] && [ \"$Startuser\" != \"root\" ] && warning \"openSUSE does not support starting a second Xorg server\n  from within X. Possible solutions:\n  1.) Install nested X server 'Xephyr', 'nxagent' or 'Xnest',\n      or for --gpu support: install 'Weston' and 'Xwayland'.\n  2.) Switch to console tty1...tty6 with <CTRL><ALT><F1>...<F6>\n      and start x11docker there.\n  3.) Run x11docker as root.\"\n\n      case \"$Xlegacywrapper\" in\n        yes)\n          warning \"Although x11docker starts Xorg as unprivileged user,\n  most system setups wrap Xorg to give it root permissions (setuid).\n  Evil containers may try to abuse this.\n  Other x11docker X server options like --xephyr are more secure at this point.\" \n          ;;\n        no)\n          case \"$Startuser\" in\n            \"root\")\n              warning \"x11docker will run Xorg as root.\"\n            ;;\n            *)\n              [ \"$Xcontainer\" = \"no\" ] && [ \"$Runsonconsole\" = \"no\" ] && [ -z \"$Newxvt\" ] && warning \"Your configuration seems not to allow to start\n  a second core Xorg server from within X. Option --xorg may fail.\n  (Per default, only root or console users are allowed to run an Xorg server).\n\n  Possible solutions:\n  1.) Install one of nested X servers 'Xephyr', 'Xnest' or 'nxagent'.\n      For --gpu support: install 'weston' and 'Xwayland'.\n  2.) Switch to console tty1...tty6 with <CTRL><ALT><F1>...<F6>\n      and start x11docker there.\n  3.) Run x11docker as root.\n  4.) Edit file '/etc/X11/Xwrapper.config' and replace line:\n          allowed_users=console\n      with lines\n          allowed_users=anybody\n          needs_root_rights=yes\n      If the file does not exist already, you can create it.\n      On Debian and Ubuntu you need package xserver-xorg-legacy.\n\n   Be aware that switching directly between Xorg servers can crash them.\n   Always switch to a black console first before switching to Xorg.\"\n            ;;\n          esac\n        ;;\n      esac\n\n      [ \"$Runsoverssh\" = \"yes\" ] && note \"Option --xorg: x11docker can run Xorg,\n  but you won't see it in an 'ssh -X' session.\n  Rather install e.g. Xephyr on ssh server and use option --xephyr.\"\n\n      # --gpu=iglx\n      [ \"$Sharegpu\" = \"iglx\" ] && [ \"$Xcontainer\" = \"no\" ] && [ -e \"/var/log/Xorg.0.log\" ] && {\n        Xorgversion=\"$(grep -m1 xorg-server </var/log/Xorg.0.log | cut -d: -f2 | cut -d' ' -f1)\"\n        [ -z \"$Nvidiaversion\" ] && [ -n \"$Xorgversion\" ] && verlt \"$Xorgversion\" \"1.20.8\" && note \"Options --xorg --gpu=iglx: It seems you have Xorg v$Xorgversion.\n  iGLX is known to have a bug in Xorg<v1.20.8.\n  --gpu=iglx may fail and give black content.\"\n      }\n    ;;\n\n    --xpra*)\n      [ \"$Sharegpu\" = \"yes\" ] && note \"Option $Xserver: If performance of GPU acceleration\n  is not satisfying, you can try insecure '--hostdisplay --gpu'\n  or, better but windowed, '--weston-xwayland --gpu'.\"\n      note \"Option $Xserver: If you encounter issues with xpra,\n  you can try --nxagent instead.\n  Rather use xpra from www.xpra.org than from distribution repositories.\"\n    ;;\n\n    --kwin)\n      [ \"$Newxvt\" ] && note \"Option --kwin: Switching console with STRG+ALT+Fn fails.\"\n    ;;\n\n    --nxagent)\n      [ \"$Hostsystem\" = \"mageia\" ] && {\n        [ \"$Desktopmode\" = \"no\" ] && [ \"$Autochooseserver\" = \"yes\" ] && Desktopmode=\"yes\" && Windowmanagermode=\"${Windowmanagermode:-auto}\"\n        [ \"$Desktopmode\" = \"no\" ] && warning \"nxagent version 3.5.0 on Mageia 6 is known to crash\n  in seamless mode. (Detected version: '$(strings --bytes 20 /usr/libexec/nx/nxagent | grep \"NXAGENT - Version\")').\n  If you encounter issues, please try seamless --xpra (secure),\n  --hostdisplay (insecure), or run --nxagent in desktop mode with a\n  host window manager (--wm=WINDOWMANAGER or --wm=auto or short -wm).\"\n      }\n      note \"A few applications do not work well with --nxagent.\n  In that case, you can try to fix the issue with option --composite\n  or try another X server option like --xpra (seamless) or --xephyr (windowed).\"\n      [ \"$Xcomposite\" = \"yes\" ] && note \"Option --nxagent: nxagent can have issues with option\n  --composite. Maybe rather try --xephyr (windowed) or --xpra (seamless).\"\n    ;;\n\n    --weston|--kwin|--hostwayland)\n      note \"You are running a pure Wayland environment.\n  X applications without Wayland support will fail.\"\n      [ \"$Xserver\" = \"--kwin\" ] && note \"kwin_wayland (option --kwin) does not support the xdg_shell\n  interface in all versions. Some GTK3 Wayland applications depend on it.\n  If application startup fails, try --weston instead.\"\n    ;;\n    --xwin|--runx) \n      note \"Windows firewall settings can forbid application access\n  to the X server. If no application window appears, but no obvious error\n  is shown, please check your firewall settings. Compare issue #108 on github.\"\n    ;;\n  esac\n  case \"$Xserver\" in\n    --weston|--weston-xwayland)\n      [ \"$Xcontainer\" = \"yes\" ] && { [ \"$Runsonconsole\" = \"yes\" ] || [ -n \"$Newxvt\" ] ; } && note \"Option --xc: Running $Xserver in container on console\n  is experimental and might misbehave, fail or crash.\n  Please report issues at https://github.com/mviereck/x11docker\"\n    ;;\n  esac\n\n  # NVIDIA without --gpu\n  [ \"$Nvidiaversion\" ] && [ \"$Sharegpu\" = \"no\" ] && case \"$Xserver\" in\n    --hostdisplay|--xorg) note \"Option $Xserver may fail with proprietary NVIDIA driver\n  on host without enabling option --gpu.\n  In that case try other X server options like --nxagent, --xpra or --xephyr.\" ;;\n  esac\n\n  # --backend\n  case \"$Backend\" in\n    proot) note \"Option --backend=proot is deprecated.\" ;;\n  esac\n\n  # --cap-default\n  [ \"$Capdropall\" = \"no\" ] && warning \"Option --cap-default disables security hardening\n  for containers done by x11docker. Default docker capabilities are allowed.\n  This is considered to be less secure.\"\n\n  # --fullscreen\n  [ \"$Fullscreen\" = \"yes\" ] && {\n    case \"$Xserver\" in\n      --xephyr|--weston|--weston-xwayland|--nxagent|--xpra*|--xwin) ;;\n      --xvfb|--xorg) ;;\n      *) note \"Option --fullscreen is not supported by $Xserver.\" ;;\n    esac\n  }\n\n  # --gpu\n  case \"$Sharegpu\" in\n    iglx)\n      [ -z \"$Nvidiaversion\" ] && note \"Option --gpu=iglx: iGLX is known to work only with new\n  MESA drivers and new X servers. Otherwise you might get black content only.\"\n      case \"$Xserver\" in\n        --xorg) ;;\n        *) note \"Option --gpu=iglx is useful with option --xorg only.\" ;;\n      esac\n    ;;\n    direct|virgl)\n      warning \"Option --gpu=$Sharegpu degrades container isolation.\n  Container gains access to GPU hardware.\n  This allows reading host window content (palinopsia leak)\n  and GPU rootkits (compare proof of concept: jellyfish).\n  An alternative is --gpu=iglx that works with --xorg only.\" ### FIXME warning for virgl, too\n    ;;\n  esac\n\n  # --interactive\n  [ \"$Interactive\" = \"yes\" ] && {\n    case \"$Initsystem\" in\n      openrc|runit|sysvinit)  note \"Option --interactive: Interactive mode with option\n  --init=$Initsystem is not well integrated yet.\n  Shells do not have job control and CTRL-C can behave different than expected.\" ;;\n      systemd) note \"Option --interactive might fail with old systemd versions.\" ;;\n    esac\n  }\n\n  # --ipc=host\n  [ \"$Shareipc\" = \"host\" ] && {\n    case \"$Backend\" in\n      docker|podman|nerdctl)\n        warning \"Option --ipc=host severely degrades\n  container isolation. IPC namespace remapping is disabled.\"\n      ;;\n    esac\n  }\n\n  # --limit N\n  [ \"$Limitresources\" ] && note \"Option --limit does not avoid possibly flooding the hard disk\n  in docker's container partition or in shared folders.\n  It only restricts memory and CPU usage.\"\n\n  # --network\n  case \"$Backend\" in\n    host) ;;\n    proot) ;;\n    docker|podman|nerdctl)\n      case \"$Network\" in\n        none)\n          note \"Option --network=none is set to disable network access.\n  If you need network and internet access, set option -I, --network [=NET].\"\n        ;;\n        \"\"|bridge)\n          warning \"Option --network: Container has access to\n  local network and internet.\" ;;\n        host)\n          warning \"Option --network=host severely degrades\n  container isolation. Network namespacing is disabled.\n  Container shares host network stack.\n  Spying on network traffic may be possible.\n  Access to host X server $Hostdisplay may be possible\n  through abstract unix socket.\" ;;\n        *)\n          warning \"Option --network=$Network: Some sort of network access\n     is enabled.\" ;;\n      esac\n    ;;\n  esac\n  case \"$Network\" in\n    none) ;;\n    *)\n      case \"$Xserver\" in\n        --tty|--weston|--kwin|--hostwayland) ;;\n        --hostdisplay)\n          warning \"Option --hostdisplay with enabled internet access\n  allows the container to provide your host X server to the entire world.\"\n        ;;\n        *)\n          note \"Option -I, --network: The container is able to provide\n  access to X server $Newdisplay ($Xserver) to the entire world.\"\n        ;;\n      esac\n    ;;\n  esac\n\n  # --output-count\n  [ \"$Outputcount\" != \"1\" ] && {\n    case \"$Xserver\" in\n      --weston-xwayland) note \"Option --output-count: Xwayland sometimes does not position itself well\n  at origin 0+0 of first virtual screen, and some screens appear to be unused.\n  You may need to move Xwayland manually with [META]+[LeftMouseButton].\n  (Bug report at https://bugzilla.redhat.com/show_bug.cgi?id=1498665 )\" ;;\n    esac\n  }\n\n  case \"$Runtime\" in\n    sysbox-runc)\n      case \"$Backend\" in\n        docker) ;;\n        *) note \"Option --runtime=$Runtime --backend=$Backend: $Runtime is known\n  to work with Docker only yet.\" ;;\n      esac\n    ;;\n    kata-runtime)\n      note \"Option --runtime=kata-runtime is deprecated\n  because recent kata v2.x versions do not provide kata-runtime.\"\n    ;;\n  esac\n\n  # --scale\n  [ \"$Scaling\" ] && case \"$Xserver\" in\n    --xorg)\n      [ -n \"$Rotation\" ] && [ \"1\" = \"$(awk -v a=\"$Scaling\" 'BEGIN {print (a < 1)}')\" ] && note \"Option --xorg does not work well with combination\n  of --scale smaller than 1 and rotation different from 0.\"\n    ;;\n  esac\n\n  # --user=RETAIN / keep container user defined in image\n  case \"$Createcontaineruser\" in\n    no)\n      [ \"$Sudouser\" ] && note \"Option --sudouser has limited support with --user=RETAIN.\n  x11docker will only set needed capabilities.\n  User setup and /etc/sudoers won't be touched.\n  Option --group-add=sudo might be useful.\"\n    ;;\n  esac\n\n  # --xoverip\n  case \"$Xoverip\" in\n    no) ;;\n    *)\n      [ \"$Xcontainer\" = \"yes\" ] && [ \"$Network\" = \"none\" ] || warning \"Option --xoverip might allow undesired access to the X server.\n  Security hardening of X over TCP/IP setups is work in progress yet.\n  At least along with image x11docker/xserver (option --xc) and \n  --network=none (x11docker default) the setup is considered to be secure\n  because a private network is used.\"\n    ;;\n  esac\n\n  [ \"$Customdockeroptions\" ] && {\n    warning \"Found custom CUSTOM_RUN_OPTIONS.\n  x11docker will add them to 'docker run' command without\n  a serious check for validity or security. Found options:\n  $Customdockeroptions\"\n    grep -q -- '--privileged'           <<< \"$Customdockeroptions\" && warning \"Found option --privileged\n  in CUSTOM_RUN_OPTIONS. That is A VERY BAD IDEA.\n  A privileged setup allows unrestricted access from container to host.\n  Malicious applications can cause arbitrary harm.\"\n    grep -q -i -- '--cap-add.ALL'       <<< \"$Customdockeroptions\" && warning \"Found option --cap-add=ALL\n  in CUSTOM_RUN_OPTIONS. That is A VERY BAD IDEA.\n  That is a very privileged setup.\n  Malicious applications may harm to the host.\"\n    grep -q -i -- '--cap-add.SYS_ADMIN' <<< \"$Customdockeroptions\" && warning \"Found option --cap-add=SYS_ADMIN\n  in CUSTOM_RUN_OPTIONS. That is A VERY BAD IDEA.\n  That is a very privileged setup.\n  Malicious applications may harm to the host.\"\n    grep -q -- '--entrypoint'           <<< \"$Customdockeroptions\" && warning \"Found option --entrypoint\n  in CUSTOM_RUN_OPTIONS. x11docker uses this option, too.\n  This setup will probably fail. Use x11docker option --no-entrypoint instead\n  and add desired command as container command after the image name.\"\n    for Line in \"--group-add\" \"--ipc\" \"--name\" \"--network\" \"--user=\" \"--runtime\" \"--workdir\"; do\n      grep -q -- \"$Line\" <<< \"$Customdockeroptions\" && note \"Found option $Line in CUSTOM_RUN_OPTIONS.\n  Please use x11docker option $Line instead.\n  Otherwise x11docker might behave wrong.\"\n    done\n  }\n\n  return 0\n}\ncheck_optionset() {             # check if unallowed options in $2 are set for option $1\n  local Line Return=\n  for Line in ${2:-}; do\n    grep -q -x -- \"$Line\" <<< \"$Optionset\" && {\n      Return=1\n      note \"Option ${1:-} does not support option $Line\"\n      check_fallback\n    }\n  done\n  return \"${Return:-0}\"\n}\n\n#### main\ndeclare_variables() {           # declare global variables\n  export IFS=$' \\n\\t'                             # set IFS to default\n\n  # Global environment variables used in x11docker\n  ALSA_CARD=\"$(check_envvar \"${ALSA_CARD:-}\")\"\n  CUPS_SERVER=\"$(check_envvar \"${CUPS_SERVER:-}\")\"\n  DBUS_SESSION_BUS_ADDRESS=\"$(check_envvar \"${DBUS_SESSION_BUS_ADDRESS:-}\")\"\n  DISPLAY=\"$(check_envvar \"${DISPLAY:-}\")\"\n  DRI_PRIME=\"$(check_envvar \"${DRI_PRIME:-}\")\"\n  DOCKER_HOST=\"$(check_envvar \"${DOCKER_HOST:-}\")\"\n  GDK_BACKEND=\"$(check_envvar \"${GDK_BACKEND:-}\")\"\n  HOME=\"$(check_envvar \"${HOME:-}\")\"\n  LANG=\"$(check_envvar \"${LANG:-}\")\"\n  LC_ALL=\"$(check_envvar \"${LC_ALL:-}\")\"\n  PATH=\"$(check_envvar -w \"${PATH:-}\")\"\n  WAYLAND_DISPLAY=\"$(check_envvar \"${WAYLAND_DISPLAY:-}\")\"\n  XAUTHORITY=\"$(check_envvar \"${XAUTHORITY:-}\")\"\n  XDG_CURRENT_DESKTOP=\"$(check_envvar \"${XDG_CURRENT_DESKTOP:-}\")\"\n  XDG_RUNTIME_DIR=\"$(check_envvar \"${XDG_RUNTIME_DIR:-}\")\"\n  XDG_SEAT=\"$(check_envvar \"${XDG_SEAT:-}\")\"\n  XDG_SESSION_ID=\"$(check_envvar \"${XDG_SESSION_ID:-}\")\"\n  XDG_VTNR=\"$(check_envvar \"${XDG_VTNR:-}\")\"\n  __GLX_VENDOR_LIBRARY_NAME=\"$(check_envvar \"${__GLX_VENDOR_LIBRARY_NAME:-}\")\"\n  __NV_PRIME_RENDER_OFFLOAD=\"$(check_envvar \"${__NV_PRIME_RENDER_OFFLOAD:-}\")\"\n  __VK_LAYER_NV_optimus=\"$(check_envvar \"${__VK_LAYER_NV_optimus:-}\")\"\n\n  # Add possibly missing PATH entries\n  PATH=\"${PATH:-\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/games:/usr/games\"}\"\n  grep -q ':/sbin:'            <<< \":$PATH:\" || PATH=\"$PATH:/sbin\"\n  grep -q ':/usr/sbin:'        <<< \":$PATH:\" || PATH=\"$PATH:/usr/sbin\"\n  grep -q ':/usr/local/bin:'   <<< \":$PATH:\" || PATH=\"$PATH:/usr/local/bin\"\n  grep -q ':/usr/bin:'         <<< \":$PATH:\" || PATH=\"$PATH:/bin\"\n  grep -q ':/usr/bin:'         <<< \":$PATH:\" || PATH=\"$PATH:/usr/bin\"\n  grep -q ':/usr/local/games:' <<< \":$PATH:\" || PATH=\"$PATH:/usr/local/games\"\n  grep -q ':/usr/games:'       <<< \":$PATH:\" || PATH=\"$PATH:/usr/games\"\n  export PATH\n\n  Cachenumber=\"$(date +%s%N | cut -c6-17)\"        # Number to use for cache folder\n  [ -z \"$Cachenumber\" ] && Cachenumber=\"$(makecookie | cut -c6-17)\"\n\n  # File descriptors\n  FDcmdstdin=\"\"                                   # --stdin channel to forward stdin to container. Previously &7\n  FDmessage=\"\"                                    # message channel for notes, warnings and verbosity across threads and container. Previously &6\n  #FDstderr=\"\"                                    # internal stderr >&2, redirected to null with --silent. Already declared in main(). Previously &3\n  FDtimetosaygoodbye=\"\"                           # message channel to send termination signal from or to containers. Previously &8\n  FDwatchpid=\"\"                                   # message channel for watchpidlist(). Previously &9\n\n  # Terminal colors used for messages and -V\n  Esc=\"$(printf '\\033')\"\n  Colblue=\"${Esc}[35m\"\n  Colyellow=\"${Esc}[33m\"\n  Colgreen=\"${Esc}[32m\"\n  Colgreenbg=\"${Esc}[42m\"\n  Colred=\"${Esc}[31m\"\n  Colredbg=\"${Esc}[41m\"\n  Coluline=\"${Esc}[4m\"\n  Colnorm=\"${Esc}[0m\"\n\n  # x11docker startup environment\n  Runsinsnap=\"\"                                   # docker runs in Ubuntu snap yes/no\n  Runsinteractive=\"\"                              # --enforce-i: Script runs in bash interactive mode (bash -i) yes/no.\n  Runsinterminal=\"\"                               # x11docker runs in a terminal yes/no\n  Runsonconsole=\"\"                                # x11docker runs on tty yes/no\n  Runsoverssh=\"\"                                  # x11docker runs over SSH yes/no. Makes a difference for --hostdisplay\n  Runssourced=\"\"                                  # x11docker has been sourced yes/no\n\n  # Generated scripts\n  Clipboardrc=\"clipboardrc\"                       # --clipboard: Generated script for text clipboard sharing\n  Cmdrc=\"cmdrc\"                                   # Generated script starting container command\n  Containerrc=\"containerrc\"                       # Generated script starting cmdrc\n  Containerrootrc=\"containerrootrc\"               # Generated script to set up container, e.g. user creation. Runs as root in container.\n  Xinitrc=\"xinitrc\"                               # Generated script to set up X, e.g. cookie and xrandr\n  Xtermrc=\"xtermrc\"                               # Generated script for password prompt\n\n  # Internal messages\n  Logmessages=\"\"                                  # Stores messages until logfile is available, needed by logentry()\n  Messagefifo=\"message.fifo\"                      # Message channel for warning/verbose/debugnote/note/error within container,, containerrootrc and others\n  Storeinfofile=\"store.info\"                      # File to store some info like id, pid, name, exit code\n  Storepidfile=\"store.pids\"                       # File to store pids and names of background processes that should be terminated on exit\n  Timetosaygoodbyefile=\"timetosaygoodbye\"         # File giving term signal to all parties\n  Timetosaygoodbyefifo=\"timetosaygoodbye.fifo\"    # Message channel for --init=openrc|runit|sysvinit to shut down on x11docker signal\n  Usemkfifo=\"\"                                    # Not on Windows nor with kata-runtime\n  Watchpidfifo=\"watchpid.fifo\"                    # Message channel to transfer pids to watchpidlist()\n\n  # Logfiles\n  Backendcommandfile=\"docker.command\"             # File to store generated docker command, needed for --interactive\n  Compositorlogfile=\"compositor.log\"              # Logfile for weston or kwin_wayland\n  Containerlogfile=\"container.log\"                # Logfile for container output other than container command output\n  Logfile=\"\"                                      # $Cachefolder/x11docker.log (current log)\n  Logfilebackup=\"\"                                # $Cachebasefolder/x11docker.log (latest terminated log)\n  Messagelogfile=\"message.log\"                    # Logfile for warning/verbose/debugnote/note/error\n  Xinitlogfile=\"xinit.log\"                        # Logfile for xinit/X server\n  Xpraclientlogfile=\"xpra.client.log\"             # Logfile for xpra client\n  Xpraserverlogfile=\"xpra.server.log\"             # Logfile for xpra server\n\n  # Generated commands\n  Compositorcommand=\"\"                            # Command to start Weston or KWin\n  Backendcommand=\"\"                               # Command to run docker\n  Xcommand=\"\"                                     # Command to start X server\n  Xpraclientcommand=\"\"                            # xpra client command\n  Xpraservercommand=\"\"                            # xpra server command\n\n  # Users\n  Hostuser=\"\"                                     # $Lognameuser or --hostuser. Unprivileged user for non-root commands. Compare unpriv()\n  Hostusergid=\"\"\n  Hostuserhome=\"\"\n  Hostuseruid=\"\"\n  Containeruser=\"\"                                # --user: Container user. Default: same as $Hostuser.\n  Containeruseruid=\"\"\n  Containerusergid=\"\"\n  Containerusergroup=\"\"\n  Containerusergroups=\"\"                          # --group-add: Additional groups for container user\n  Containeruserhome=\"\"                            # HOME path within container\n  Containeruserhosthome=\"\"                        # HOME path of container user on host\n  Containeruserpassword=''\n  Createcontaineruser=\"yes\"                       # exception: --user=RETAIN\n  Lognameuser=\"\"                                  # $(logname) or $SUDO_USER or $PKEXEC_USER\n  Passwordfile=\"$HOME/.config/x11docker/passwd\"\n  Persistanthomevolume=\"\"                         # --home: Path to shared host folder or docker volume used as HOME in container.\n  Startuser=\"\"                                    # User who started x11docker\n  Unpriv=\"\"                                       # Command to run commands as unprivileged user\n  Containerusershell=\"auto\"                       # --shell: Preferred user shell\n\n  # Hostsystem\n  Cgroupversion=\"\"                                # Needed for --init=systemd\n  Hostarchitecture=\"\"                             # uname -m, checked\n  Hostcanwatchroot=\"\"                             # x11docker can watch root processes yes/no. Related to $Hosthidepid\n  Hostdisplay=\"\"                                  # Environment variable DISPLAY\n  Hostdisplaynumber=\"\"                            # DISPLAY without : (and without possible IP)\n  Hosthidepid=\"\"                                  # /proc is mounted with hidepid=2 yes/no. Seen on NixOS.\n  Hostip=\"\"                                       # An IP address to access host. Preferred: IP of docker daemon\n  Hostlibc=\"\"                                     # glibc or musl. Can be important for locale and timezone.\n  Hostlocaltimefile=\"\"                            # Time zone from host, myrealpath /etc/localtime\n  Hostmitshm=\"\"                                   # X on host has extension MIT-SHM enabled yes/no. Assume yes, check later\n  Hostsystem=\"\"                                   # $ID from /etc/os-release\n  Hostutctime=\"\"                                  # Time zone from host as offset to UTC\n  Hostwaylandsocket=\"$WAYLAND_DISPLAY\"            # Store host wayland socket name\n  Hostxauthority=\"Xauthority.host.$(unspecialstring \"${DISPLAY:-unknown}\")\"   # File to store copy of $XAUTHORITY\n  Hostxenv=\"\"                                     # Collection of host X environment variables\n  Hostxoverip=\"\"                                  # Host X uses X over IP/TCP\n  Hostxsocket=\"\"                                  # Socket of DISPLAY in /tmp/.X11-unix\n  Nvidiacontainerfile=\"/usr/local/bin/NVIDIA-installer.run\"  # --gpu: Path to nvidia installer in container\n  Nvidiaversion=\"\"                                # --gpu: Proprietary nvidia driver version on host\n  Nvidiainstallerfile=\"\"                          # --gpu: Proprietary nvidia driver installer for container in [...]local/share/x11docker\n  Pythonbin=\"\"                                    # path to python binary\n  Jqbin=\"\"                                        # path to jq binary\n\n  # MS Windows\n  Winpty=\"\"                                       # Path to winpty for --interactive on MS Windows\n  Winsubmount=\"\"                                  # Path within subsystem to mounted MS Windows drives\n  Winsubpath=\"\"                                   # Path within MS Windows to subsystem files\n  Winsubsystem=\"\"                                 # MS Windows subsystem WSL1, WSL2, MSYS2 or CYGWIN\n  Mobyvm=\"\"                                       # MS Windows: Use MobyVM yes/no (No only for WSL2 possible)\n\n  # Cache folders\n  Cachebasefolder=\"\"                              # --cachebasedir Base cache folder\n  Cachefolder=\"\"                                  # Subfolder of $Cachebasefolder for current container\n  Localsharedir=\"\"\n  Sharefolder=\"share\"                             # Subfolder of $Cachefolder for cache files shared with container\n  Sharefoldercontainer=\"/x11docker\"               # Mountpoint of $Sharefolder in container\n\n  # stdin stdout stderr\n  Cmdstdinfifo=\"stdin\"                            # stdin for container command. fifo/named pipe to forward stdin of x11docker to container command\n  Cmdstderrlogfile=\"stderr\"                       # stderr for container command\n  Cmdstdoutlogfile=\"stdout\"                       # stdout for container command\n  Forwardstdin=\"no\"                               # --stdin: forward stdin to container command yes/no\n\n  # X and Wayland configuration\n  Autochooseserver=\"yes\"                          # --auto: automatic choice of X server (default)\n  Checkforopenwindow=\"\"                           # --checkwindow\n  Cleanxhost=\"no\"                                 # --clean-xhost: remove xhost access policies on host X\n  Compositorerrorcodes=\"Failed to process Wayland|failed to create display|] fatal:\"\n  Desktopmode=\"no\"                                # --desktop: image contains a desktop environment.\n  Dpi=\"\"                                          # --dpi: dots per inch. Influences font size\n  Fullscreen=\"no\"                                 # --fullscreen: Fullscreen mode\n  Lastcheckedxserver=\"\"                           # check_xdepends(): Last X server option that was checked\n  Lastcheckedxserverresult=\"\"                     # check_xdepends(): Result of last check. Avoids double-checking.\n  Maxxaxis=\"\"                                     # Maximal X screen size of display\n  Maxyaxis=\"\"                                     # Maximal Y screen size of display\n  Modelinefilebasepath=\"modelines\"\n  Newdisplay=\"\"                                   # --display: New DISPLAY for new X server\n  Newdisplaynumber=\"\"                             # --display: New display number for new X server.\n  Newwaylandsocket=\"\"                             # Wayland socket of $Compositorcommand\n  Newxenv=\"\"                                      # Environment variables for new X server: DISPLAY XAUTHORITY XSOCKET WAYLAND_DISPLAY XDG_RUNTIME_DIR\n  Newxenv_cr=\"\"                                   # Like Newxenv, but with newlines\n  Newxlock=\"\"                                     # .Xn-lock - exists for running X server with socket n\n  Newxsocket=\"\"                                   # New X unix socket\n  Newxvt=\"\"                                       # --vt: number of virtual console to use for --xorg\n  Numbersinusefile=\"displaynumbers.$(date +%y_%m_%d)\" # File to store display numbers used today. Helps to avoid race conditions on simultaneous startups\n  Nxagentclientrc=\"nxagent.nxclientrc\"            # --nxagent NX_CLIENT script to catch nxagent messages\n  Nxagentkeysfile=\"nxagent.keys\"                  # --nxagent keyboard shortcut config\n  Nxagentoptionsfile=\"nxagent.options\"            # --nxagent options not available on cli, but possible in config file\n  Modeline=\"\"                                     # Screen modeline describing display size, see \"man cvt\".\n  Outputcount=\"1\"                                 # --output-count: quantum of virtual screens for Weston or Xephyr\n  Rotation=\"\"                                     # --rotate: Rotation for --weston, --weston-xwayland or --xorg: 0/90/180/270/flipped/flipped-90/..\n  Scaling=\"\"                                      # --scale: Scaling factor for xpra and weston\n  Screensize=\"\"                                   # --size XxY: Display size\n  Setupwayland=\"no\"                               # --wayland, --kwin, --weston --hostwayland: Provide a Wayland environment\n  Waylandtoolkitenv=\"XDG_SESSION_TYPE=wayland GDK_BACKEND=wayland QT_QPA_PLATFORM=wayland CLUTTER_BACKEND=wayland SDL_VIDEODRIVER=wayland ELM_DISPLAY=wl ELM_ACCEL=opengl ECORE_EVAS_ENGINE=wayland_egl\"\n  Xauthentication=\"yes\"                           # --xauth: cookie authentication\n  Xaxis=\"\"                                        # Virtual screen width\n  Xcomposite=\"\"                                   # --xcomposite: +extension COMPOSITE yes/no\n  Xkblayout=\"\"                                    # --keymap: Layout for keymap, compare /usr/share/X11/xkb/symbols\n  Xfishtank=\"no\"                                  # --xfishtank: Show a fish tank on new X server\n  Xhost=\"\"                                        # --xhost: custom xhost setting on new X server\n  Xiniterrorcodes=\"xinit: giving up|unable to connect to X server|Connection refused|server error|Only console users are allowed\"\n  Xlegacywrapper=\"\"                               # --xorg: /etc/X11/Xwrapper.config is configured to run within X yes/no\n  Xpraborder=\"\"                                   # --border: Colored border for xpra clients\n  Xpracontainerenv=\"UBUNTU_MENUPROXY= QT_X11_NO_NATIVE_MENUBAR=1 MWNOCAPTURE=true MWNO_RIT=true MWWM=allwm GTK_OVERLAY_SCROLLING=0 GTK_CSD=0 NO_AT_BRIDGE=1\" # environment variables\n  Xprahelp=\"\"                                     # Output of 'xpra --help'\n  Xprashm=\"\"                                      # xpra server should use MIT-SHM yes/no\n  Xpraversion=\"\"                                  # $(xpra --version) to decide some xpra options and messages\n  Xserver=\"\"                                      # X server option to use\n  Xoverip=\"\"                                      # --xoverip: Connect to X over TCP yes/no\n  Xserveroptions=\"\"                               # --xopt: Custom X server options\n  Xtest=\"\"                                        # --xtest: Enable extension Xtest yes/no. If empty, yes for --xpra/--xvfb, otherwise no\n  Yaxis=\"\"                                        # Virtual screen height\n\n  # X and Wayland config and cookie files\n  Customwestonini=\"\"                              # --westonini: Custom config file for weston\n  Westonini=\"weston.ini\"                          # Generated config file for weston\n  Xclientcookie=\"Xauthority.client\"               # Generated X client cookie. Normally same as $Xservercookie, except for --hostdisplay and --nxagent\n  Xkbkeymapfile=\"xkb.keymap\"                      # --keymap: File to store output of host keymap in xinitrc\n  Xorgconf=\"\"                                     # --xorgconf: custom xorg.conf\n  Xservercookie=\"Xauthority.server\"               # Generated X server cookie\n\n  # X in container\n  Xcnetworkid=\"\"\n  Xcnetworkname=\"\"\n  Xcontainer=\"auto\"\n  Xcontainerbackend=\"\"\n  Xcontainercommand=\"\"\n  Xcontainerimage=\"x11docker/xserver\"\n  Xcontainerip=\"\"\n  Xcontainername=\"\"\n  Xcontaineroptions=\"\"\n  Xcontaineroptionsconsole=\"\"\n  Xcontainertools=\"\"\n  Xcrootless=\"\"\n\n  # Window manager\n  Windowmanagermode=\"\"                            # --wm: Window manager to use: container/host/auto\n  Windowmanagercommand=\"\"                         # --wm: Argument for --wm or host wim command\n\n  # Host integration\n  Alsacard=\"$ALSA_CARD\"                           # --alsa: Specified ALSA card\n  Hosthomebasefolder=\"\"                           # --homebasedir: Base directory for container home with --home\n  Langwunsch=\"\"                                   # --lang: Search or create UTF-8 locale in container and set LANG\n  Pulseaudioconf=\"pulseaudio.client.conf\"         # --pulseaudio: Client config in container\n  Pulseaudiocookie=\"pulseaudio.cookie\"            # --pulseaudio: possible pulse cookie from host to share\n  Pulseaudiomode=\"\"                               # --pulseaudio: 'tcp', 'socket' or 'auto'\n  Pulseaudiomoduleid=\"\"                           # --pulseaudio: module ID, stored for unload in finish()\n  Pulseaudioport=\"\"                               # --pulseaudio: TCP port for --pulseaudio=tcp\n  Pulseaudiosocket=\"pulseaudio.socket\"            # --pulseaudio: unix socket for --pulseaudio=socket\n  Sharealsa=\"no\"                                  # --alsa: enable ALSA sound, share /dev/snd\n  Shareclipboard=\"no\"                             # --clipboard: Enable clipboard sharing\n  Sharecupsmode=\"\"                                # --printer: Share access to CUPS printer server: socket|tcp|\"\"\n  Sharegpu=\"no\"                                   # --gpu: Use hardware accelerated OpenGL, share files in /dev/dri\n  Sharehome=\"no\"                                  # --home: Share a folder ~/.local/share/x11docker/Imagename with created container\n  Sharevolumes=\"\"                                 # --share: Host files or folders or devices to share, array\n  Sharevolumescount=\"0\"                           # --share: Counts shared folders in array\n  Sharewebcam=\"no\"                                # --webcam: Share webcam device /dev/video*\n\n  # Image information\n  Imagearchitecture=\"\"\n  Imagecommand=\"\"\n  Imageentrypoint=\"\"\n  Imageinspect=\"\"                                 # Output of --inspect\n  Imageworkdir=\"\"\n  Imageuser=\"\"\n\n  # Container setup\n  Adminusercaps=\"no\"                              # --cap-default, --sudouser, --init=systemd: add capabilities for general container system administration\n  Allownewprivileges=\"auto\"                       # --newprivileges: Docker run option --security-opt=no-new-privileges. Default: no. Enabled by options --newprivileges, --cap-default, --sudouser.\n  Backend=\"\"                                      # --backend: Backend to use, like docker, podman, nerdctl, proot, host. A default can be specified with default preset file.\n  Backendbin=\"\"                                   # path to binary of backend\n  Backendinfo=\"\"                                  # output of 'docker info'\n  Capabilities=\"\"                                 # Capabilities to add. Default: none, exceptions for --init, --sudouser\n  Capdropall=\"yes\"                                # --cap-default: Drop all container capabilities and set --securty-opt=no-new-privileges yes/no\n  Chrootmountlist=\"\"\n  Containercommand=\"\"                             # Container command [+args]\n  Containerentrypoint=\"\"\n  Containerenvironment=\"\"                         # --env: Environment variables\n  Containerenvironmentcount=\"0\"\n  Containerenvironmentfile=\"container.environment\" # file to store final container environment\n  Containerlocaltimefile=\"libc.localtime\"         # localtime file from host shared to container\n  Containername=\"\"                                # --name: Container name\n  Containersetup=\"yes\"\n  Customdockeroptions=\"\"                          # -- [...] -- : Custom options for \"docker run\".\n  Defaultruntime=\"\"\n  Imagename=\"\"                                    # Image to run\n  Interactive=\"no\"                                # --interactive: Run docker with interactive tty yes/no\n  Limitresources=\"\"                               # --limit: Limit access to CPU and RAM, 0.1 ... 1.0\n  Network=\"none\"                                  # --network\n  Noentrypoint=\"no\"                               # --no-entrypoint: Disable entrypoint in image yes/no\n  Optionset=\"\"                                    # list of set options for later support check\n  Optionsetall=\"\"                                 # list of all available long options\n  Podmanrootfs=\"\"                                 # --rootfs to indicate that podman should use a root file system\n  Remountcgroup=\"\"                                # --init=systemd with cgroupv2 in docker workaround\n  Rootfs=\"\"                                       # --backend=proot\n  Backendrootless=\"\"                              # Check for rootful/rootless docker depending on DOCKER_HOST\n  Runtime=\"\"                                      # Runtime to use. runc|nvidia|kata-runtime|crun\n  Snapsupport=\"\"                                  # --snap: Fallback mode to support docker in snap\n  Shareipc=\"no\"\n  Stopsignal=\"\"                                   # Signal to send on 'docker stop'\n  Sudouser=\"\"                                     # --sudouser: Create user with sudo permissions and root user with password 'x11docker'\n  Switchcontaineruser=\"no\"                        # --init=systemd|openrc|runit|sysvinit: User switching to trigger login services yes/no\n  Switchcontainerusercaps=\"no\"                    # --init=systemd|openrc|runit|sysvinit, --sudouser: Add capabilities for su/sudo user switching\n  Systemdjournallogfile=\"systemd.journal.log\"\n  Workdir=\"\"                                      # --workdir: Set working directory in container\n\n  # Init and DBus\n  Dbusrunsession=\"no\"                             # --dbus, --wayland, --init=systemd|openrc|runit|sysvinit: Run container command with dbus-run-session / DBus user session\n  Dbussystem=\"no\"                                 # --init=systemd|openrc|runit|sysvinit: Run DBus system daemon in container\n  Initsystem=\"tini\"                               # --init: Init system in container\n  Sharecgroup=\"no\"                                # --sharecgroup, --init=systemd: share /sys/fs/cgroup. Also needed for elogind\n  Sharehostdbus=\"no\"                              # --hostdbus: Connect to DBus user daemon on host\n  Initbinaryfile=\"\"                               # --init=tini (default): Binary of tini; either /usr/bin/docker-exec or provided by user in [...]/share/x11docker\n  Initcontainerpath=\"/usr/local/bin/init\"         # --init=tini: Path of tini (or catatonit) in container\n\n  # Custom additional commands\n  Runasuser=\"\"                                    # --runasuser: Add container command to containerrc\n  Runasroot=\"\"                                    # --runasroot: Add container command to container setup script running as root\n  Runfromhost=\"\"                                  # --runfromhost: Add host command to xinitrc\n\n  # Miscellaneous\n  Buildimage=\"\"                                   # --build: x11docker image to build from repo Dockerfile\n  Codename=\"\"                                     # created from image name and command without special chars for use with container name and cache folder\n  Experimental=\"\"                                 # --experimental: use experimental code\n  Fallback=\"yes\"                                  # --fallback: Allow or deny fallbacks for failing options.\n  Imagebasename=\"\"                                # Image name without tags and / replaced with -. For use of --home folders.\n  Parsedoptions_global=\"\"                         # Parsed options\n  Presetdirlocal=\"$HOME/.config/x11docker/preset\" # --preset storage dir (local)\n  Presetdirsystem=\"/etc/x11docker/preset\"         # --preset storage dir (system)\n  Presetlist=\"\"                                   # List of already parsed preset files to avoid a loop\n  Preservecachefiles=\"no\"                         # If yes, don't delete cache files on exit. For few failure cases only.\n\n  # Verbosity options\n  Debugmode=\"no\"                                  # --debug: Excerpt of --verbose, also bash error checks\n  Printcheck=\"no\"                                 # --printcheck: Show X dependency check messages\n  Showcontainerid=\"\"                              # --printid: Output of container ID on stdout\n  Showcontaineroutput=\"yes\"                       # Show container command stdout\n  Showcontainerpid1pid=\"\"                         # --printpid1: Output of host PID of container PID 1 on stdout\n  Showdisplayenvironment=\"\"                       # --printenv: Output of environment variables of new display on stdout\n  Showinfofile=\"\"                                 # --printinfofile: Show path of $Storeinfofile\n  Silent=\"no\"                                     # --quiet: Do not show x11docker messages\n  Verbose=\"\"                                      # --verbose: Be verbose yes/no\n  Verbosecolors=\"no\"                              # -V: colored output for --verbose (and delete some noisy systemd error messages)\n  Wikipackages=\"You can look for the package name of this command at:\n https://github.com/mviereck/x11docker/wiki/dependencies#table-of-all-packages\"\n  Wikipackagesimage=\"$Wikipackages\n  Alternatively you can provide image x11docker/xserver (option --xc).\"\n\n  # Special options not starting X or docker\n  Cleanup=\"\"                                      # --cleanup: Remove orphaned containers and cache files\n  Createlauncher=\"\"                               # --launcher: Create application launcher on desktop and exit yes/no\n  Installermode=\"\"                                # --install/--update/--update-master/--remove\n  Installerarg=\"\"                                 # --update/--update-master: show diff only, do not install\n\n  # Lists of window managers\n  # - these window managers are known to work well with x11docker (alphabetical order)(excluding $Wm_not_recommended and $Wm_ugly):\n  Wm_good=\"amiwm blackbox cinnamon compiz ctwm enlightenment fluxbox flwm fvwm\"\n  Wm_good=\"$Wm_good jwm kwin kwin_x11 lxsession mate-session mate-wm marco metacity notion olwm olvwm openbox ororobus pekwm\"\n  Wm_good=\"$Wm_good sawfish twm wmaker w9wm xfwm4\"\n  # - these wm's are recommended and lightweight, but cannot show desktop options. best first:\n  Wm_recommended_nodesktop_light=\"metacity marco openbox sawfish xfwm4\"\n  # - these wm's are recommended and heavy, but cannot show desktop options (especially exiting themselves). best first:\n  Wm_recommended_nodesktop_heavy=\"kwin compiz\"\n  # - these wm's are recommended, lightweight AND desktop independent. best first:\n  Wm_recommended_desktop_light=\"flwm blackbox fluxbox jwm mwm wmaker afterstep amiwm fvwm ctwm pekwm olwm olvwm\"\n  # - these wm's are recommended, heavy AND desktop independent. best first:\n  Wm_recommended_desktop_heavy=\"lxsession mate-session enlightenment cinnamon cinnamon-session plasmashell\"\n  # - these wm's are not really useful (please don't hit me) (best first):\n  Wm_not_recommended=\"awesome evilwm herbstluftwm i3 lwm matchbox miwm mutter spectrwm subtle windowlab wmii wm2\"\n  # - these wm's cannot be autodetected by wmctrl if they are already running\n  Wm_nodetect=\"aewm aewm++ afterstep awesome ctwm mwm miwm olwm olvwm sapphire windowlab wm2 w9wm\"\n  # - these wm's can cause problems (they can be beautiful, though):\n  Wm_ugly=\"icewm sapphire aewm aewm++\"\n  # - these wm's doesn't work:\n  Wm_bad=\"budgie-wm clfswm tinywm tritium muffin gnome-shell\"\n  # List of all working window managers, recommended ones first, excluding $Wm_bad:\n  Wm_all=\"$Wm_recommended_nodesktop_light $Wm_recommended_nodesktop_heavy  $Wm_recommended_desktop_light $Wm_recommended_desktop_heavy $Wm_good $Wm_ugly $Wm_not_recommended $Wm_nodetect\"\n\n  # x11docker communication functions to integrate into generated scripts\n  Messagefifofuncs='\nwarning() {\n  echo \"$*:WARNING\"   >>$Messagefile\n}\nnote() {\n  echo \"$*:NOTE\"      >>$Messagefile\n}\nverbose() {\n  echo \"$*:VERBOSE\"   >>$Messagefile\n}\ndebugnote() {\n  echo \"$*:DEBUGNOTE\" >>$Messagefile\n}\nerror() {\n  echo \"$*:ERROR\"     >>$Messagefile\n  exit 64\n}\nstdout() {\n  echo \"$*:STDOUT\"    >>$Messagefile\n}'\n  MessagefifofuncsX='\nwarning() {\n  echo \"$*:WARNING\"   | sed \"s/\\$/ /\" >>$Messagefile\n}\nnote() {\n  echo \"$*:NOTE\"      | sed \"s/\\$/ /\" >>$Messagefile\n}\nverbose() {\n  echo \"$*:VERBOSE\"   | sed \"s/\\$/ /\" >>$Messagefile\n}\ndebugnote() {\n  echo \"$*:DEBUGNOTE\" | sed \"s/\\$/ /\" >>$Messagefile\n}\nerror() {\n  echo \"$*:ERROR\"     | sed \"s/\\$/ /\" >>$Messagefile\n  exit 64\n}\nstdout() {\n  echo \"$*:STDOUT\"    | sed \"s/\\$/ /\" >>$Messagefile\n}'\n  Messagefifofuncs_escaped='\nwarning() {\n  echo \\\"\\$*:WARNING\\\"   >>\\$Messagefile\n}\nnote() {\n  echo \\\"\\$*:NOTE\\\"      >>\\$Messagefile\n}\nverbose() {\n  echo \\\"\\$*:VERBOSE\\\"   >>\\$Messagefile\n}\ndebugnote() {\n  echo \\\"\\$*:DEBUGNOTE\\\" >>\\$Messagefile\n}\nerror() {\n  echo \\\"\\$*:ERROR\\\"     >>\\$Messagefile\n  exit 64\n}\nstdout() {\n  echo \\\"\\$*:STDOUT\\\"    | sed \\\"s/\\\\\\$/ /\\\" >>\\$Messagefile\n}'\n  Messagefifofuncs_escapedX='\nwarning() {\n  echo \\\"\\$*:WARNING\\\"   | sed \\\"s/\\\\\\$/ /\\\"  >>\\$Messagefile\n}\nnote() {\n  echo \\\"\\$*:NOTE\\\"      | sed \\\"s/\\\\\\$/ /\\\" >>\\$Messagefile\n}\nverbose() {\n  echo \\\"\\$*:VERBOSE\\\"   | sed \\\"s/\\\\\\$/ /\\\" >>\\$Messagefile\n}\ndebugnote() {\n  echo \\\"\\$*:DEBUGNOTE\\\" | sed \\\"s/\\\\\\$/ /\\\" >>\\$Messagefile\n}\nerror() {\n  echo \\\"\\$*:ERROR\\\"     | sed \\\"s/\\\\\\$/ /\\\" >>\\$Messagefile\n  exit 64\n}\nstdout() {\n  echo \\\"\\$*:STDOUT\\\"    | sed \\\"s/\\\\\\$/ /\\\" >>\\$Messagefile\n}'\n}\nexperimental() {\n  [ \"$Experimental\" ] && {\n    note \"Option --experimental: changed something: ${1:-\"(no comment)\"}\"\n    return 0\n  }\n  return 1\n}\nunpriv() {                      # run a command as unprivileged user. Needed if x11docker was started by root or with sudo.\n  # $Unpriv is declared in check_hostuser: 'eval' or 'su $Hostuser -c'\n  local Command\n  Command=\"$(oneline \"${1:-}\")\"\n  $Unpriv \"$Command\"\n  return $?\n}\nunpriv_backend() {              # run container backend rootful or rootless\n  local Command\n  Command=\"$(oneline \"${1:-}\")\"\n  [ -z \"$Backendbin\" ] && {\n    warning \"Binary path for backend $Backend not set.\"\n    return 1\n  }\n  case \"$Backendrootless\" in\n    yes)   unpriv                  \"$Command\" ;;\n    no|\"\") eval   \"env DOCKER_HOST= $Command\" ;;\n  esac\n  return $?\n}\nunpriv_xcbackend() {            # run X container backend rootful or rootless\n  local Command\n  Command=\"$(oneline \"${1:-}\")\"\n  case \"${Xcrootless:-no}\" in\n    yes) unpriv                  \"$Command\" ;;\n    no)  eval   \"env DOCKER_HOST= $Command\" ;;\n  esac\n  return $?\n}\nmain() {\n  [ \"$(uname -s)\" = \"Darwin\" ] && echo \"Error: x11docker does not run on MacOS. Please use Linux.\" >&2 && exit 64\n\n  trap finish EXIT\n  trap finish_sigint SIGINT\n  exec {FDstderr}>&2            # stderr channel for warning(), note(), debugnote() and --verbose\n\n  declare_variables\n  parse_options \"$@\"\n  [ \"$Silent\" = \"yes\" ]    && exec {FDstderr}>/dev/null                           # --quiet\n  [ \"$Debugmode\" = \"yes\" ] && {                                                   # --debug\n    set -Eu\n    trap 'traperror $? $LINENO $BASH_LINENO \"$BASH_COMMAND\" $(printf \"::%s\" ${FUNCNAME[@]})'  ERR\n  }\n  [ -n \"$Containeruserpassword\" ] && {                                            # --password\n    check_optionset \"--password\" \"$(grep -v -- '--password' <<< \"$Optionsetall\")\" ||:\n    set_password \"$Containeruserpassword\"\n    finish\n    return 0\n  }\n  check_host                     # get some infos about host system\n  check_options_arguments        # check for valid arguments\n  check_hostuser                 # find unprivileged host user                    # --hostuser\n  check_console                  # check if running on console\n  create_cachefiles              # create cache files owned by unprivileged user  # --cachebasedir\n  setup_verbosity                # create [and show] summary logfile              # --verbose\n  check_containeruser            # unprivileged user in container                 # --user\n  check_containerhomebasedir     # check base dir for --home and possible rootfs  # --homebasedir\n\n  # Special x11docker jobs\n  [ \"$Createlauncher\" ] && {\n    create_launcher                                                               # --launcher: Create application launcher icon on desktop\n    finish\n  }\n  check_backend                                                                   # --backend\n  [ \"$Installermode\" ] && {                                                       # --install, --update, --update-master, --remove\n    case \"$Packagedversion\" in\n      yes)\n        case \"$Installermode\" in\n          --install|--update|--update-master|--remove|--remove-oldprefix)\n            error \"Options --install|--update|--update-master|--remove\n  are not supported in packaged versions of x11docker.\n  Please use your package manager instead.\"\n          ;;\n        esac\n      ;;\n    esac\n    check_optionset \"$Installermode\" \"$(grep -v -E -- '--install|--update|--update-master|--remove|--remove-oldprefix' <<< \"$Optionsetall\")\" ||:\n    installer \"$Installermode\"\n    finish\n  }\n  [ \"$Cleanup\" ] && {                                                             # --cleanup: Clean up cache and orphaned x11docker containers\n    check_optionset \"--cleanup\" \"$(grep -v -E -- '--cleanup|--backend' <<< \"$Optionsetall\")\" ||:\n    cleanup\n    finish\n  }\n  [ \"$Buildimage\" ] && {                                                          # --build: Build image from x11docker repository\n    check_optionset \"--build\" \"$(grep -v -E -- '--build|--backend' <<< \"$Optionsetall\")\" ||:\n    buildimage \"$Imagename\"\n    finish\n  }\n  rocknroll || return 0\n\n  setup_fifo                     # open message channels for container, xinitrc and watchpidlist()\n  check_xdg_runtime_dir\n  check_hostxenv                 # check X environment from host\n  check_snap                     # check if docker is installed in snap; causes restrictions\n  check_xcontainer               # check if x11docker/xserver can/will be used    # --xc\n  check_xserver                  # check chosen X server or auto-choose one\n\n  check_newxenv                  # find free display\n  setup_xcnetwork ||:            # internal network for --xc --xoverip\n  [ \"$Xserver\" = \"--xorg\" ] || [ -n \"$Newxvt\" ] || [ \"$Runsonconsole\" = \"yes\" ] && check_vt   # --vt: find free tty/virtual terminal for Xorg or weston\n  [ \"$Xcontainer\" = \"yes\" ] && {                                                  # --xc\n    create_xcontainercommand\n    debugnote \"X container command (rootless ${Xcrootless:-undefined}):\n  $Xcontainercommand\"\n    start_xcontainer\n  }\n  store_newxenv\n\n  check_options_interferences    # check options, change settings if needed\n  check_containerhome            # create persistent container home               # --home\n  check_options_messages         # some messages depending on options, but not changing anything\n  check_windowmanager                                                             # --wm\n  [ \"$Sharegpu\" = \"direct\" ]     && setup_gpu ||:                                 # --gpu\n  [ \"$Sharewebcam\" = \"yes\" ]     && setup_webcam                                  # --webcam\n  [ \"$Sharecupsmode\" ]           && setup_printer                                 # --printer\n  [ \"$Pulseaudiomode\" ]          && setup_sound_pulseaudio                        # --pulseaudio\n  [ \"$Sharealsa\" = \"yes\" ]       && setup_sound_alsa                              # --alsa\n  [ \"$Sharehostdbus\" = \"yes\" ]   && setup_hostdbus                                # --hostdbus\n\n  #### Create command to run X server [and/or Wayland compositor]\n  [ \"$Cleanxhost\" = \"yes\" ]      && clean_xhost                                   # --clean-xhost\n  [ \"$Shareclipboard\" != \"no\" ]  && create_clipboardrc >> \"$Clipboardrc\"          # --clipboard\n  check_screensize               # size of host X and of new X server             # --size\n  create_xcommand                # set up start command for X server              # all X server and Wayland options\n  [ \"$Xcommand\" ]                && debugnote \"X server command:\n  $Xcommand\"\n  [ \"$Compositorcommand\" ]       && debugnote \"Wayland compositor command:\n  $Compositorcommand\"\n\n  storeinfo \"x11dockerpid=$$\"    # store pid of x11docker\n  debugnote \"x11docker version:  $Version\n  Backend version:               $(${Backendbin:-:} --version 2>&1)\n  Running rootless:              $Backendrootless\n  OCI Runtime:                   $Runtime\n  Host system:                   $(grep '^PRETTY_NAME' /etc/os-release 2>/dev/null | cut -d= -f2 || echo \"$Hostsystem\")\n  Host architecture:             $Hostarchitecture\n  Command:\n    '$0' $(for Line in \"$@\"; do echo -n \"'$Line' \" ; done)\n  Parsed options:\n    $Parsedoptions_global\n  x11docker was started by:      $Startuser\n  As host user serves:           $Hostuser\n  Container user will be:        $( [ \"$Createcontaineruser\" = \"yes\" ] && echo \"$Containeruser\" || echo \"(retaining USER of image)\")\n  Container user password:       $( [ \"$Createcontaineruser\" = \"yes\" ] && echo \"x11docker\"      || echo \"(unknown)\")\n  Running in a terminal:         $Runsinterminal\n  Running on console:            $Runsonconsole\n  Running over SSH:              $Runsoverssh\n  Running sourced:               $Runssourced\n  bash \\$-:                       $-\"\n  [ \"$Winsubsystem\" ] && debugnote \"\n  Running on Windows subsystem:  $Winsubsystem\n  Path to subsystem:             $(convertpath windows \"$Winsubpath\")/\n  Mount path in subsystem:       $Winsubmount/\n  Using MobyVM:                  $Mobyvm\"\n\n  setup_initsystem               # init in container.                             # --init\n  case \"$Backend\" in\n    docker|podman|nerdctl)\n      [ -z \"$Rootfs\" ] && check_image\n      setup_capabilities         # add linux capabilities if needed for some options. Default: --cap-drop=ALL\n      [ \"$Sharegpu\" = \"yes\" ] && setup_vaapi                                      # --gpu\n    ;;\n  esac\n  case \"$Backend\" in\n    proot|docker|podman|nerdctl)\n      create_backendcommand           # create 'docker run' command\n      echo \"$Backendcommand\" >> \"$Backendcommandfile\"\n      debugnote \"$Backend command (rootless ${Backendrootless:-undefined}):\n  $Backendcommand\"\n      [ \"$Containersetup\" = \"yes\" ] && {\n        ## containerrootrc runs as root in container.\n        # Main jobs: create unprivileged container user, disable possible privilege leaks, set local time.\n        # Optional jobs: run init system, run DBus daemon, install nvidia driver, create language locale.\n        create_containerrootrc >> \"$Containerrootrc\"\n        verbose \"Generated containerrootrc:\n$(nl -ba <$Containerrootrc)\"\n      }\n    ;;\n  esac\n  [ \"$Containersetup\" = \"yes\" ] && {\n    create_containerrc\n    verbose \"Generated containerrc:\n$(nl -ba <$Containerrc)\"\n    create_cmdrc\n    verbose \"Generated cmdrc:\n$(nl -ba <$Cmdrc)\"\n  }\n\n  { #### Run docker image\n    # For code flow logic, start_xserver() should run here first and be moved to background.\n    # For technical reasons, xinit must not run in a subshell:\n    #   --xorg on tty only works if xinit runs in foreground to grab the tty.\n    #   Otherwise, Xwrapper.config must be edited to 'allowed_users=anybody' even on console.\n    # Thus docker runs in this subshell after X server is ready to accept connections.\n\n    # wait for X to be ready\n    waitforlogentry 'start_container()' $Xinitlogfile 'xinitrc is ready' \"$Xiniterrorcodes\"\n\n    # softlink (or socat) to X or Wayland unix socket in container                           # --xc\n    case \"$Xcontainer\" in\n      yes)\n        #[ \"$Newdisplay\" ]       && ln -s \"$Cachefolder/tmp/.X11-unix/X$Newdisplaynumber\"  \"/tmp/.X11-unix/X$Newdisplaynumber\"  2>>$Xinitlogfile ||:\n        command -v socat >/dev/null && {\n          [ \"$Newdisplay\" ]     && unpriv \"socat -lf $Xinitlogfile -d UNIX-LISTEN:/tmp/.X11-unix/X$Newdisplaynumber,ignoreeof,fork UNIX:$Cachefolder/tmp/.X11-unix/X$Newdisplaynumber\" &\n          storepid \"$!\" socat-X\n        } || {\n          [ -n \"$Showdisplayenvironment\" ] && Message=\"note\" || Message=\"debugnote\"\n          $Message \"Option --xc --printenv: Command 'socat' not found. \n  Using 'ln -s' to provide X unix socket on host.\n  GTK3 application might fail to access X.\"\n          [ \"$Newdisplay\" ]     && ln -s \"$Cachefolder/tmp/.X11-unix/X$Newdisplaynumber\"  \"/tmp/.X11-unix/X$Newdisplaynumber\"  2>>$Xinitlogfile ||:\n        }\n        [ \"$Newwaylandsocket\" ] && ln -s \"$Cachefolder/XDG_RUNTIME_DIR/$Newwaylandsocket\" \"$XDG_RUNTIME_DIR/$Newwaylandsocket\" 2>>$Xinitlogfile ||:\n      ;;\n    esac\n\n    rocknroll || {\n      saygoodbye main-runshell\n      return 1\n    }\n\n    # xinit(?) sets variables to new display for host applications, too. This undoes it.\n    unpriv \"dbus-update-activation-environment --systemd DISPLAY='$DISPLAY' XAUTHORITY='$XAUTHORITY'\" >> \"$Xinitlogfile\" 2>&1 ||:\n\n    [ \"$Runfromhost\" ] && {                                                       # --runfromhost\n      while read Line; do\n        unpriv \"env $Newxenv $Runfromhost\"\n      done <<< \"$Runfromhost\"\n    }\n\n    # start container\n    start_container\n    Pid1pid=\"$(storeinfo dump pid1pid)\"\n    Containerip=\"$(storeinfo dump containerip)\"\n\n    # --xoverip -listen tcp: Use xhost instead of XAUTHORITY\n    case \"$Xoverip\" in\n      listentcp)\n        verbose \"--xoverip=listentcp: Replacing cookie authentication with host based authentication.\"\n        xtool --check \"xhost\" && {\n          xtool \"env DISPLAY=:$Newdisplaynumber XAUTHORITY=$Xclientcookie xhost +INET:$Containerip\" >>$Xinitlogfile 2>&1 && \\\n            truncate -s0 $Xclientcookie\n        } || {\n          warning \"--xoverip=$Xoverip: Failed to set up xhost access\n  instead of using a cookie. If the container shares the cookie with others,\n  others might be able to access X server $Xserver.\"\n        }\n      ;;\n    esac\n    touch $Sharefolder/xhostready\n\n    # watch container\n    case \"$Winsubsystem\" in\n      \"\") setonwatchpidlist \"${Pid1pid:-NOPID}\" pid1pid ;;\n      *)  setonwatchpidlist \"CONTAINER$Containername\" ;;\n    esac\n\n    # watch xinit and X server\n    case \"$Xserver\" in\n      --tty|--hostdisplay|--hostwayland|--weston|--kwin) ;;\n      *)\n        Xinitpid=\"$(pgrep -a xinit 2>/dev/null | grep \"xinit $Xinitrc\" | awk '{print $1}')\"\n        checkpid \"$Xinitpid\"   && setonwatchpidlist \"$Xinitpid\" xinit\n        Xserverpid=$(ps aux | rmcr | grep \"$(echo \"${Xcommand:-nothingtolookfor}\" | cut -d' ' -f1-2)\" | grep -v grep | grep -v xinit | awk '{print $2}')\n        checkpid \"$Xserverpid\" && setonwatchpidlist \"$Xserverpid\" Xserver\n      ;;\n    esac\n\n    [ \"$Pulseaudiomode\" = \"tcp\" ] && start_pulseaudiotcp                          # --pulseaudio=tcp\n\n    # some debug output\n    checkpid \"$Pid1pid\" && debugnote \"Process tree of container: (maybe not complete yet)\n$(pstree -cp \"$Pid1pid\" 2>&1 ||:)\"\n    debugnote \"Process tree of x11docker:\n$(pstree -p $$ 2>&1 ||:)\"\n    debugnote \"storeinfo(): Stored info:\n$(cat $Storeinfofile)\"\n    debugnote \"storepid(): Stored pids:\n$(cat $Storepidfile)\"\n\n    # optional info on stdout\n    case \"$Showinfofile\" in                                                       # --printinfofile\n      \"\") ;;\n      yes) echo \"$Storeinfofile\" ;;\n      *)   unpriv \"echo '$Storeinfofile' > '$Showinfofile'\"         || error \"Option --printinfofile: Invalid file $Showinfofile\" ;;\n    esac\n    case \"$Showdisplayenvironment\" in                                             # --printenv\n      \"\") ;;\n      yes) storeinfo dump Xenv ;;\n      *)   unpriv \"echo '$Newxenv_cr' > '$Showdisplayenvironment'\"  || error \"Option --printenv: Invalid file $Showdisplayenvironment\" ;;\n    esac\n    case \"$Showcontainerid\" in                                                    # --printid\n      \"\") ;;\n      yes) storeinfo dump containerid ;;\n      *)   unpriv \"storeinfo dump containerid > '$Showcontainerid'\" || error \"Option --printid: Invalid file $Showcontainerid\" ;;\n    esac\n    case \"$Showcontainerpid1pid\" in                                               # --printpid1\n      \"\") ;;\n      yes) echo \"$Pid1pid\" ;;\n      *)   unpriv \"echo '$Pid1pid' > '$Showcontainerpid1pid'\"       || error \"Option --printcontainerpid1pid: Invalid file $Showcontainerpid1pid\" ;;\n    esac\n    storeinfo \"x11docker=ready\"\n  } <&0 & storepid $! containershell\n\n  rocknroll || return 1\n  ## Create helper script xinitrc to set up X\n  # xinitrc is started by xinit and does some setup within new X server.\n  # Main job: create cookie, check xhost, set keyboard layout.\n  # Optional jobs: run window manager, run xfishtank, share clipboard, scale/rotate --xorg, create set of screen resolutions.\n  create_xinitrc >> \"$Xinitrc\"\n  verbose \"Generated xinitrc:\n$(nl -ba <$Xinitrc)\"\n    [ -s \"$Westonini\" ] && verbose \"Generated weston.ini:\n$(nl -ba <$Westonini)\"\n\n  case \"$Xserver\" in\n    --xpra*)\n      {\n        waitforlogentry xpra $Xinitlogfile \"xinitrc is ready\" infinity\n        rocknroll && start_xpra                                                   # --xpra, --xpra-xwayland\n      } & storepid $! xpraloop\n    ;;\n  esac\n  rocknroll && [ \"$Compositorcommand\" ] && start_compositor\n  rocknroll && start_xserver\n}\n\nmain \"$@\"\nsaygoodbye main\n"
        },
        {
          "name": "x11docker.man",
          "type": "blob",
          "size": 21.9892578125,
          "content": ".TH X11DOCKER 1\n.SH \"NAME\"\nx11docker \\- Run GUI applications and desktop environments in containers\n\n\n.SH \"SYNOPSIS\"\nTo run a container on a new X server:\n\n.B x11docker\n[\\fIOPTIONS\\fR]\n\\fIIMAGE\\fR\n[\\fICOMMAND\\fR]\n\n.B x11docker\n[\\fIOPTIONS\\fR]\n\\fB\\-\\-\\fR\n\\fIIMAGE\\fR\n[\\fICOMMAND \\fR[\\fIARGS\\fR ...]]\n\n.B x11docker\n[\\fIOPTIONS\\fR]\n\\fB\\-\\-\\fR\n[\\fICUSTOM_RUN_OPTIONS\\fR]\n\\fB\\-\\-\\fR\n\\fIIMAGE\\fR\n[\\fICOMMAND \\fR[\\fIARGS\\fR ...]]\n\nTo run a host application on a new X server:\n\n.B x11docker\n[\\fIOPTIONS\\fR]\n\\fB\\-\\-backend=host\\fR\n\\fB\\-\\-\\fR\n\\fICOMMAND \\fR[\\fIARGS\\fR ...]\n\n.SH \"DESCRIPTION\"\nRuns GUI applications and desktop environments in containers.\nSupports docker, podman, and (experimental) nerdctl.\nCan run X servers from host or in containers of image x11docker/xserver.\nCan also provide X servers to host applications.\nx11docker always runs a fresh container from image and discards it afterwards.\n\n\n.SS \"Optional features:\"\n.IP\n* GPU hardware acceleration\n.br\n* Sound with pulseaudio or ALSA\n.br\n* Clipboard sharing\n.br\n* Printer access\n.br\n* Webcam access\n.br\n* Persistent home folder\n.br\n* Wayland support\n.br\n* Language locale creation\n.br\n* Several init systems and DBus in container\n.br\n* Support of several container runtimes and backends\n\n.SS \"Focus on security:\"\n.IP\n* Avoids X security leaks using additional X servers.\n.br\n* Container user is same as host user to avoid root in container.\n.br\n* Restricts container capabilities to bare minimum.\n.PP\nx11docker sets up an unprivileged container user with password \\fBx11docker\\fR\nand restricts container capabilities. Some applications might behave different\nthan with a regular \\fBdocker|podman run\\fR command due to these security restrictions.\nAchieve a less restricted setup with \\fB\\-\\-cap\\-default\\fR or \\fB\\-\\-sudouser\\fR.\n\n\n.SH \"OPTIONS\"\nShort options do not accept arguments.\n.TP\n\\fB\\-\\-help\\fR\nDisplay this message and exit.\n.TP\n\\fB\\-\\-license\\fR\nShow license of x11docker (MIT) and exit.\n.TP\n\\fB\\-\\-version\\fR\nShow x11docker version and exit.\n\n\n.SS \"Basic settings\"\n.TP\n\\fB\\-\\-backend\\fR=\\fBdocker\\fR|\\fBpodman\\fR|\\fBnerdctl\\fR|\\fBhost\\fR\nContainer backend to use, or \\fBhost\\fR for no container.\n.TP\n\\fB\\-d\\fR, \\fB\\-\\-desktop\\fR\nIndicate a desktop environment in image.\n.TP\n\\fB\\-i\\fR, \\fB\\-\\-interactive\\fR\nRun with an interactive tty to allow shell commands.\n.TP\n\\fB\\-\\-rootless\\fR [=\\fByes\\fR|\\fBno\\fR]\nUse (or disallow) rootless backend.\nDefault behaviour without option \\fB\\-\\-rootless\\fR:\n.br\n\\fB\\-\\-backend\\fR=\\fBdocker\\/\\fR: rootful unless environment variable \\fBDOCKER_HOST\\fR is set.\n.br\n\\fB\\-\\-backend\\fR=\\fBpodman\\/\\fR: rootless except started as root.\n.br\n\\fB\\-\\-backend\\fR=\\fBnerdctl\\/\\fR: rootless except started as root\n.br\n.TP\n\\fB\\-\\-xc\\fR [=\\fByes\\fR|\\fBno\\fR|\\fIBACKEND\\fR]\nRun X server in container of image \\fBx11docker/xserver\\fR.\n\\fIBACKEND\\fR can specify one of \\fBdocker\\fR|\\fBpodman\\fR|\\fBnerdctl\\fR.\n.TP\n\\fB\\-\\-xonly\\fR\nOnly start an empty X server.\n\n\n.SS \"Host integration\"\n.TP\n\\fB\\-\\-alsa\\fR [=\\fIALSA_CARD\\fR]\nSound with ALSA. You can define a desired sound card\nwith \\fIALSA_CARD\\fR. List of available sound cards: \\fBaplay \\-l\\fR\n.TP\n\\fB\\-c\\fR, \\fB\\-\\-clipboard\\fR [=\\fByes\\fR|\\fBno\\fR|\\fBoneway\\fR|\\fBsuperv\\fR|\\fBaltv\\fR] Share clipboard with host.\nPossible arguments:\n.br\n\\fByes\\fR     Share clipboard in both directions.\nIncludes middle\\-mouse\\-click selection.\n.br\n\\fBoneway\\fR  Copy clipboard from container to host only.\nIncludes middle\\-mouse\\-click selection.\n.br\n\\fBsuperv\\fR  Keys [SUPER][v] copy clipboard from host to\ncontainer. Does not copy middle\\-mouse\\-click\nto container. Otherwise same as \\fBoneway\\fR.\n.br\n\\fBaltv\\fR    Same as \\fBsuperv\\fR but using keys [ALT][v].\n.br\n\\fBno\\fR      Do not share clipboard.\n.TP\n\\fB\\-g\\fR, \\fB\\-\\-gpu\\fR [=\\fByes\\fR|\\fBno\\fR|\\fBiglx\\fR|\\fBvirgl\\fR] GPU access for hardware accelerated OpenGL.\nWorks best with open source drivers on host and in image.\nFor closed source nvidia drivers regard terminal output.\nDirect rendering supported by few X server options only.\n.br\n\\fBiglx\\fR enables indirect rendering (\\fB\\-\\-xorg\\fR only).\n.br\n\\fBvirgl\\fR allows GPU access for all X servers, but\nwith limited performance and with \\fB\\-\\-xc\\fR only.\n.TP\n\\fB\\-I\\fR, \\fB\\-\\-network\\fR [=\\fINET\\fR]\nAllow internet access. (i.e. allow Docker default.)\nFor optional argument \\fINET\\fR see Docker documentation of\ndocker run option \\fB\\-\\-network\\fR. Docker default is \\fBbridge\\fR.\n.TP\n\\fB\\-l\\fR, \\fB\\-\\-lang\\fR [=\\fILOCALE\\fR]\nSet language variable \\fBLANG\\fR=\\fILOCALE\\fR in container.\nWithout arg \\fILOCALE\\fR host variable \\fB\\-\\-lang=\\fR\\fB$LANG\\fR is used.\nIf \\fILOCALE\\fR is missing in image, x11docker generates it\nwith \\fBlocaledef\\fR in container (needs \\fBlocales\\fR package).\nExamples for \\fILOCALE\\fR: \\fBru\\fR, \\fBen\\fR, \\fBde\\fR, \\fBzh_CN\\fR, \\fBcz\\fR, \\fBfr\\fR, \\fBfr_BE\\fR.\n.TP\n\\fB\\-P\\fR, \\fB\\-\\-printer\\fR [=\\fIMODE\\fR] Share host printers through \\fBcups\\fR server.\nOptional \\fIMODE\\fR can be \\fBsocket\\fR or \\fBtcp\\fR. Default: \\fBsocket\\fR\n.TP\n\\fB\\-p\\fR, \\fB\\-\\-pulseaudio\\fR [=\\fIMODE\\fR]\nSound with pulseaudio. Needs \\fBpulseaudio\\fR on host\nand in image. Optional arg \\fIMODE\\fR can be \\fBsocket\\fR, \\fBtcp\\fR\nor \\fBhost\\fR. tcp mode needs network access with \\fB\\-\\-network\\fR.\n.TP\n\\fB\\-\\-webcam\\fR\nShare host webcam device files.\n\n\n.SS \"Shared host folders or volumes\"\n.TP\n\\fB\\-m\\fR, \\fB\\-\\-home\\fR [=\\fIARG\\fR]\nCreate a persistent \\fBHOME\\fR folder for data storage.\nDefault: Uses \\fI~/.local/share/x11docker/IMAGENAME\\fR.\n\\fIARG\\fR can be another host folder or a volume.\n(\\fI~/.local/share/x11docker\\fR has a softlink to \\fI~/x11docker\\/\\fP.)\n(Use \\fB\\-\\-homebasedir\\fR to change this base storage folder.)\n.TP\n\\fB\\-\\-share\\fR=\\fIARG\\/\\fR\nShare host file or folder \\fIARG\\fR. Read\\-only with \\fIARG\\fR\\fB:ro\\fR .\nDevice files in \\fI/dev\\/\\fP can be shared, too.\n\\fIARG\\fR can also be a volume instead of a host folder.\n\n\n.SS \"X server options\"\n.TP\n\\fB\\-\\-auto\\fR\nAutomatically choose X server (default). Influenced\nnotably by options \\fB\\-\\-desktop\\fR, \\fB\\-\\-gpu\\fR, \\fB\\-\\-wayland\\fR, \\fB\\-\\-wm\\fR.\n.TP\n\\fB\\-h\\fR, \\fB\\-\\-hostdisplay\\fR\nShare host display \\fB:0\\fR. Quite bad container isolation!\nLeast overhead of all X server options.\n.TP\n\\fB\\-a\\fR, \\fB\\-\\-xpra\\fR\nNested X server supporting seamless and \\fB\\-\\-desktop\\fR mode.\n.TP\n\\fB\\-\\-xpra2\\fR\nLike \\fB\\-\\-xpra\\fR \\fB\\-\\-xc\\fR, but runs xpra client on host.\n.TP\n\\fB\\-A\\fR, \\fB\\-\\-xpra\\-xwayland\\fR\nLike \\fB\\-\\-xpra\\fR, but supports option \\fB\\-\\-gpu\\fR.\n.TP\n\\fB\\-\\-xpra2\\-xwayland\\fR\nLike \\fB\\-\\-xpra2\\fR, but supports option \\fB\\-\\-gpu\\fR.\n.TP\n\\fB\\-n\\fR, \\fB\\-\\-nxagent\\fR\nNested X server supporting seamless and \\fB\\-\\-desktop\\fR mode.\nFaster than \\fB\\-\\-xpra\\fR, but can have compositing issues.\n.TP\n\\fB\\-y\\fR, \\fB\\-\\-xephyr\\fR\nNested X server for \\fB\\-\\-desktop\\fR mode. Without \\fB\\-\\-desktop\\fR\na host window manager will be provided (option \\fB\\-\\-wm\\fR).\n.TP\n\\fB\\-Y\\fR, \\fB\\-\\-weston\\-xwayland\\fR \nDesktop mode like \\fB\\-\\-xephyr\\fR, but supports option \\fB\\-\\-gpu\\fR.\nRuns from console, within X and within Wayland.\n.TP\n\\fB\\-x\\fR, \\fB\\-\\-xorg\\fR\nCore Xorg server. Runs ootb from console.\nSwitch tty with <CTRL><ALT><F1>....<F12>. Always switch\nto a black tty before switching to X to avoid possible crashes.\n\n\n.SS \"Special X server options\"\n.TP\n\\fB\\-t\\fR, \\fB\\-\\-tty\\fR\nTerminal only mode. Does not run an X or Wayland server.\n.TP\n\\fB\\-\\-xvfb\\fR\nInvisible X server using Xvfb.\nCan be used for custom access with xpra or VNC.\n.TP\n\\fB\\-X\\fR, \\fB\\-\\-xwayland\\fR\nBlanc Xwayland, needs a running Wayland compositor.\n.TP\n\\fB\\-\\-xwin\\fR\nX server to run in Cygwin/X on MS Windows.\n.TP\n\\fB\\-\\-runx\\fR\nX server wrapper for VcXsrv and Xwin on MS Windows.\n\n\n.SS \"Wayland instead of X\"\n.TP\n\\fB\\-W\\fR, \\fB\\-\\-wayland\\fR\nAutomatically set up a Wayland environment.\nChooses one of following options and regards \\fB\\-\\-desktop\\fR.\n.TP\n\\fB\\-T\\fR, \\fB\\-\\-weston\\fR\nWeston without X for pure Wayland applications.\nRuns in X, in Wayland or from console.\n.TP\n\\fB\\-K\\fR, \\fB\\-\\-kwin\\fR\nKWin without X for pure Wayland applications.\nRuns in X, in Wayland or from console.\n.TP\n\\fB\\-H\\fR, \\fB\\-\\-hostwayland\\fR\nShare host Wayland without X for pure Wayland apps.\n\n\n.SS \"X and Wayland appearance options\"\n.TP\n\\fB\\-\\-border\\fR [=\\fICOLOR\\fR] Draw a colored border in windows of \\fBxpra\\fR.\nArgument \\fICOLOR\\fR can be e.g. \\fBorange\\fR or \\fB#F00\\fR. Thickness\ncan be specified, too, e.g. \\fBred,3\\fR. Default: \\fBblue,1\\fR\n.TP\n\\fB\\-\\-dpi\\fR=\\fIN\\/\\fR\ndpi value (\\fIN\\fR dots per inch) to submit to X clients.\nInfluences font size of some applications.\n.TP\n\\fB\\-f\\fR, \\fB\\-\\-fullscreen\\fR\nRun in fullscreen mode.\n.TP\n\\fB\\-\\-output\\-count\\fR=\\fIN\\/\\fR\nMultiple virtual monitors for Weston or KWin.\n.TP\n\\fB\\-\\-rotate\\fR=\\fIN\\/\\fR\nRotate display (\\fB\\-\\-xorg\\fR, \\fB\\-\\-weston\\fR and \\fB\\-\\-weston\\-xwayland\\fR)\nAllowed values: \\fB0\\fR, \\fB90\\fR, \\fB180\\fR, \\fB270\\fR, \\fBflipped\\fR, \\fBflipped\\-90\\fR,\n\\fBflipped\\-180\\fR, \\fBflipped\\-270\\fR.  (flipped means mirrored)\n.TP\n\\fB\\-\\-scale\\fR=\\fIN\\/\\fR\nScale/zoom factor \\fIN\\fR for xpra, Xorg or Weston.\nAllowed for \\fB\\-\\-xpra\\fR* and \\fB\\-\\-xorg\\fR: \\fB0.25\\fR...\\fB8.0\\fR.\nAllowed for \\fB\\-\\-weston\\fR and \\fB\\-\\-weston\\-xwayland\\fR: \\fB1\\fR...\\fB9\\fR.\n.TP\n\\fB\\-\\-size\\fR=\\fI\\,WxH\\/\\fR\nScreen size of new X server (e.g. \\fB800x600\\fR).\n.TP\n\\fB\\-w\\fR, \\fB\\-\\-wm\\fR [=\\fIARG\\fR]\nProvide a host window manager to container applications.\n(In case of \\fB\\-\\-xc\\fR only \\fbopenbox\\fR is provided.)\nPossible \\fIARG\\fR:\n.br\n\\fBhost\\fR     autodetection of a host window manager.\n.br\n\\fICOMMAND\\fR  command for a desired host window manager.\n.br\n\\fBnone\\fR     Run without a window manager. Same as \\fB\\-\\-desktop\\fR.\n.TP\n\\fB\\-F\\fR, \\fB\\-\\-xfishtank\\fR\nShow fish tank on new X server.\n\n\n.SS \"X and Wayland special configuration\"\n.TP\n\\fB\\-\\-checkwindow\\fR [=\\fIARG\\fR]\nRun container until all X windows are closed.\nIf \\fIARG\\fR is provided, run container as long as \\fBgrep\\fR can\nfind \\fIARG\\fR in output of \\fBxwininfo \\-root \\-children\\fR.\nThis option helps to keep alive containers with\nself\\-forking applications like gnome\\-terminal\nor to stop endless running ones like chromium.\n.TP\n\\fB\\-\\-clean\\-xhost\\fR\nDisable xhost access policies on host display.\n.TP\n\\fB\\-\\-composite\\fR [=\\fByes\\fR|\\fBno\\fR]\nEnable or disable X extension \\fBComposite\\fR.\nDefault is \\fByes\\fR except for \\fB\\-\\-nxagent\\fR. Can cause or\nfix issues with some applications on \\fBnxagent\\fR.\n.TP\n\\fB\\-\\-display\\fR=\\fI\\,N\\/\\fR\nRun new X server with display number \\fIN\\fR. Must not be already in use.\n.TP\n\\fB\\-\\-keymap\\fR=\\fI\\,LAYOUT\\/\\fR\nSet keyboard layout for new X server, e.g. \\fBde\\fR, \\fBus\\fR, \\fBru\\fR.\nFor possible \\fILAYOUT\\fR look at \\fI/usr/share/X11/xkb/symbols\\/\\fP.\n.TP\n\\fB\\-\\-vt\\fR [=\\fIN\\fR]\nUse vt / tty \\fIN\\fR. Without optional \\fIN\\fR search an unused tty.\n.TP\n\\fB\\-\\-westonini\\fR=\\fIFILE\\/\\fR\nCustom \\fBweston.ini\\fR for \\fB\\-\\-weston\\fR and \\fB\\-\\-weston\\-xwayland\\fR.\n.TP\n\\fB\\-\\-xhost\\fR [=\\fISTR\\fR]\nSet \\fBxhost\\fR \\fISTR\\fR on new X server (see \\fBman xhost\\fR).\nWithout optional \\fISTR\\fR will set:  \\fB+SI:localuser:$USER\\fR .\n(Use with care. \\fB\\-\\-xhost=+\\fR allows access for everyone).\n.TP\n\\fB\\-\\-xoverip\\fR [=\\fByes\\fR|\\fBno\\fR|\\fBlistentcp\\fR|\\fBsocat\\fR] Connect to X over TCP network. Special\nsetups only, usually only enabled by x11docker itself.\n.br\n\\fByes\\fR        Use \\fBlistentcp\\fR if possible, otherwise \\fBsocat\\fR.\n.br\n\\fBno\\fR         Use shared unix socket (general default).\n.br\n\\fBlistentcp\\fR  Use X option \\fB\\-listen tcp\\fR.\n.br\n\\fBsocat\\fR      Use \\fBsocat\\fR to create a fake TCP connection.\n.TP\n\\fB\\-\\-xauth\\fR [=\\fByes\\fR|\\fBtrusted\\fR|\\fBuntrusted\\fR|\\fBno\\fR] Configure X cookie authentication.\nPossible arguments:\n.br\n\\fByes\\fR|\\fBtrusted\\fR Enable cookie authentication with trusted\ncookies. (General x11docker default.)\n.br\n\\fBuntrusted\\fR   Untrusted cookie for untrusted apps limiting access to X resources.\nUseful to avoid \\fBMIT\\-SHM\\fR with \\fB\\-\\-hostdisplay\\fR.\n.br\n\\fBno\\fR          Disable cookie authentication. Dangerous!\n.TP\n\\fB\\-\\-xtest\\fR [=\\fByes\\fR|\\fBno\\fR] Enable or disable X extension \\fBXTEST\\fR. Default is \\fByes\\fR for\n\\fB\\-\\-xpra\\fR and \\fB\\-\\-xvfb\\fR, \\fBno\\fR for other X servers.\nNeeded to allow keyboard and mouse control with xpra.\n\n\n.SS \"Container user settings\"\n.TP\n\\fB\\-\\-group\\-add\\fR=\\fIGROUP\\/\\fR \nAdd container user to group \\fIGROUP\\fR.\n.TP\n\\fB\\-\\-hostuser\\fR=\\fIUSER\\/\\fR\nRun X (and container user) as user \\fIUSER\\fR. Default is\nresult of \\fB$(logname)\\fR. (x11docker must run as root).\n.TP\n\\fB\\-\\-password\\fR [=\\fIWORD\\fR]\nChange container user password and exit.\nInteractive input if argument \\fIWORD\\fR is not provided.\nStored encrypted in \\fI~/.config/x11docker/passwd\\fR.\n.TP\n\\fB\\-\\-sudouser\\fR [=\\fBnopasswd\\fR]\nAllow \\fBsu\\fR and \\fBsudo\\fR for container user. Use with care,\nsevere reduction of default x11docker security!\nOptionally passwordless sudo with argument \\fBnopasswd\\fR.\nDefault password is \\fBx11docker\\fR.\n.TP\n\\fB\\-\\-user\\fR=\\fIU\\/\\fR\nCreate container user \\fIU\\fR (\\fIU\\fR=name or \\fIU\\fR=uid). Default:\nsame as host user. \\fIU\\fR can also be an unknown user id.\nYou can specify a group id with \\fIU\\fR being \\fIuser\\fR\\fB:\\fR\\fIgid\\fR.\nSpecial case: \\fB\\-\\-user=RETAIN\\/\\fR keeps image user settings.\n\n\n.SS \"Container capabilities\"\n.IP\nIn most setups x11docker sets \\fB\\-\\-cap\\-drop=ALL \\-\\-security\\-opt=no\\-new\\-privileges\\/\\fR\nand shows warnings if doing otherwise.\nCustom capabilities can be added with \\fB\\-\\-cap\\-add\\fR=\\fI\\,CAP\\/\\fR after  \\fB\\-\\-\\fR\n.TP\n\\fB\\-\\-cap\\-default\\fR\nAllow default container capabilities.\nIncludes \\fB\\-\\-newprivileges=yes\\fR.\n.TP\n\\fB\\-\\-ipc\\fR [=\\fIARG\\fR]\nWithout optional \\fIARG\\fR sets run option \\fB\\-\\-ipc=host\\fR (discouraged).\nFor other possible \\fIARG\\fR see docker run reference.\n.TP\n\\fB\\-\\-limit\\fR [=\\fIFACTOR\\fR] \nLimit CPU and RAM usage of container to\ncurrently free RAM x \\fIFACTOR\\fR and available CPUs x \\fIFACTOR\\fR.\nAllowed range is 0 < \\fIFACTOR\\fR <= 1.\nDefault for \\fB\\-\\-limit\\fR without optional argument \\fIFACTOR\\fR is \\fB0.5\\fR .\n.TP\n\\fB\\-\\-newprivileges\\fR [=\\fByes\\fR|\\fBno\\fR|\\fBauto\\fR]\nSet or unset run option\n\\fB\\-\\-security\\-opt=no\\-new\\-privileges\\fR. Default with no\nargument is \\fByes\\fR. Default for most cases is \\fBno\\fR.\n\n\n.SS \"Container init system, elogind and DBus daemon\"\n.TP\n\\fB\\-\\-dbus\\fR [=\\fBsystem\\fR]\nRun DBus user session daemon for container command.\nWith argument \\fBsystem\\fR also run a DBus system daemon.\n(To run a DBus system daemon rather use one of\n\\fB\\-\\-init\\fR=\\fBsystemd\\fR|\\fBopenrc\\fR|\\fBrunit\\fR|\\fBsysvinit\\fR )\n.TP\n\\fB\\-\\-hostdbus\\fR\nConnect to DBus user session from host.\n.TP\n\\fB\\-\\-init\\fR [=\\fBtini\\fR|\\fBsystemd\\fR|\\fBopenrc\\fR|\\fBrunit\\fR|\\fBsysvinit\\fR|\\fBs6-overlay\\fR|\\fBnone\\fR]\nRun an init system as PID 1 in container. Solves the\nzombie reaping issue. By default x11docker uses \\fBtini\\fR or the similar \\fBcatatonit\\fR.\n.TP\n\\fB\\-\\-sharecgroup\\fR\nShare \\fI\\,/sys/fs/cgroup\\/\\fP. Allows \\fBelogind\\fR in container if\nused with one of \\fB\\-\\-init\\fR=\\fBopenrc\\fR|\\fBrunit\\fR|\\fBsysvinit\\fR\n\n\n.SS \"Container special configuration:\"\n.TP\n\\fB\\-\\-env\\fR \\fIVAR\\fR=\\fIvalue\\fR\nSet custom environment variable.\n.TP\n\\fB\\-\\-name\\fR=\\fINAME\\/\\fR\nSpecify container name \\fINAME\\fR.\n.TP\n\\fB\\-\\-no\\-entrypoint\\fR\nDisable \\fBENTRYPOINT\\fR in image to allow other commands, too\n.TP\n\\fB\\-\\-no\\-setup\\fR\nNo x11docker setup in running container. Disallows\nseveral other options. See also \\fB\\-\\-user\\fR=\\fB\\,RETAIN\\/\\fR.\n.TP\n\\fB\\-\\-runtime\\fR=\\fIRUNTIME\\/\\fR\nSpecify container runtime. Known by x11docker:\n.br\n\\fBrunc\\fR         Default runtime of \\fBdocker\\fR.\n.br\n\\fBcrun\\fR         Default runtime of \\fBpodman\\fR.\n.br\n\\fBnvidia\\fR       Runtime for \\fBnvidia/nvidia\\-docker\\fR images.\n.br\n\\fBsysbox\\-runc\\fR  Runtime for powerful root in container.\n.TP\n\\fB\\-\\-shell\\fR=\\fISHELL\\/\\fR\nSet preferred user shell. Example: \\fB\\-\\-shell=/bin/zsh\\fR\n.TP\n\\fB\\-\\-snap\\fR\nEnable support for Docker in snap.\n.TP\n\\fB\\-\\-stdin\\fR\nForward stdin of x11docker to container command.\n.TP\n\\fB\\-\\-workdir\\fR=\\fIDIR\\/\\fR\nSet working directory \\fIDIR\\fR.\n\n\n.SS Additional commands\nYou might need to move them to background with \\fICMD\\fR\\fB &\\fR.\n.TP\n\\fB\\-\\-runasroot\\fR=\\fICMD\\/\\fR\nRun command \\fICMD\\fR as root in container.\n.TP\n\\fB\\-\\-runasuser\\fR=\\fICMD\\/\\fR\nRun command \\fICMD\\fR with user privileges in container\nbefore running image command.\n.HP\n\\fB\\-\\-runfromhost\\fR=\\fICMD\\/\\fR Run host command \\fICMD\\fR on new X server.\n\n\n.SS \"Miscellaneous\"\n.TP\n\\fB\\-\\-build\\fR \\fIIMAGE\\fR\nBuild an image from a Dockerfile from x11docker\nrepository. Example: \\fBx11docker \\-\\-build x11docker/fvwm\\fR .\nWorks for all repositories beginning with 'dockerfile'\nat https://github.com/mviereck?tab=repositories .\nRegards (only) option \\fB\\-\\-backend\\fR=\\fI\\,BACKEND\\/\\fR.\n.TP\n\\fB\\-\\-cachebasedir\\fR=\\fI\\,DIR\\/\\fR\nCustom base folder for cache files.\n.TP\n\\fB\\-\\-homebasedir\\fR=\\fI\\,DIR\\/\\fR\nCustom base folder for option \\fB\\-\\-home\\fR.\n.TP\n\\fB\\-\\-fallback\\fR [=\\fByes\\fR|\\fBno\\fR]\nAllow or deny fallbacks if a chosen option cannot\nbe fulfilled. By default fallbacks are allowed.\n.TP\n\\fB\\-\\-launcher\\fR\nCreate application launcher with current options\non desktop and exit. You can get a menu entry moving\nthe created \\fI*.desktop\\fR file to \\fI~/.local/share/applications\\fR\n.TP\n\\fB\\-\\-mobyvm\\fR\nUse MobyVM (for WSL2 only that defaults to Linux Docker).\n.TP\n\\fB\\-\\-preset\\fR=\\fI\\,FILE\\/\\fR\nRead a set of predefined options stored in file \\fIFILE\\fR.\nUseful to shortcut often used option combinations.\n.br\n\\fIFILE\\fR is searched in directory \\fI\\,/etc/x11docker/preset\\/\\fR,\nor in directory \\fI~/.config/x11docker/preset\\fR.\n.br\nMultiple lines in \\fIFILE\\fR are allowed.\n.br\nComment lines must begin with \\fI#\\fR .\n.br\nLocal presets supersede global ones in \\fI\\,/etc\\/\\fR .\n.br\nSpecial case: A preset file with file name \\fIdefault\\fR\nwill be applied automatically for all x11docker sessions.\n\n\n.SS \"Output of parseable information on stdout\"\n.IP\nGet output e.g. with: \\fBread xenv < <(x11docker \\-\\-printenv x11docker/check\\fR) .\nOptional argument \\fIFILE\\fR allows to print the information into a file.\n.TP\n\\fB\\-\\-printenv\\fR [=\\fIFILE\\fR]\nPrint variables to access new display.\n.TP\n\\fB\\-\\-printid\\fR [=\\fIFILE\\fR]\nPrint container ID.\n.TP\n\\fB\\-\\-printinfofile\\fR [=\\fIFILE\\fR]\nPrint path to internal x11docker info storage.\n.TP\n\\fB\\-\\-printpid1\\fR [=\\fIFILE\\fR]\nPrint host PID of container PID 1.\n\n\n.SS \"Verbosity options\"\n.TP\n\\fB\\-D\\fR, \\fB\\-\\-debug\\fR\nEnable rigorous error control and show some debug output.\n.TP\n\\fB\\-\\-printcheck\\fR\nShow dependency check messages.\n.TP\n\\fB\\-q\\fR, \\fB\\-\\-quiet\\fR\nSuppress x11docker terminal messages.\n.TP\n\\fB\\-v\\fR, \\fB\\-\\-verbose\\fR\nBe verbose. Output of x11docker.log on stderr.\n.TP\n\\fB\\-V\\fR\nBe verbose with colored output.\n\n\n.SS \"Cleanup options (might need root permissions)\"\n.TP\n\\fB\\-\\-cleanup\\fR\nClean up orphaned containers and cache files. Those\ncan remain if x11docker still runs on system shutdown.\nTerminates currently running x11docker containers, too.\nRegards (only) option \\fB\\-\\-backend\\fR=\\fI\\,BACKEND\\/\\fR.\n\n\n.SS \"Installation options (need root permissions)\"\nThese options might not be available in packaged versions of x11docker.\n.TP\n\\fB\\-\\-install\\fR\nInstall x11docker from current folder.\nUseful to install from an extracted zip file.\n.TP\n\\fB\\-\\-update\\fR [=\\fBdiff\\fR]\nDownload and install latest release from github.\n.TP\n\\fB\\-\\-update\\-master\\fR [=\\fBdiff\\fR]\nDownload and install latest master version.\nOptional argument \\fBdiff\\fR shows the difference between\ninstalled and new version without installing it.\n.TP\n\\fB\\-\\-remove\\fR\nRemove x11docker from your system. Includes \\fB\\-\\-cleanup\\fR.\nPreserves \\fI~/.local/share/x11docker\\fR from option \\fB\\-\\-home\\fR.\n.TP\n\\fB\\-\\-remove-oldprefix\\fR\nBefore version 7.6.0 x11docker installed itself\ninto /usr/bin. Now it installs into /usr/local/bin.\nUse --remove-oldprefix to remove /usr/bin installations.\n\n\n.SH \"DEPENDENCIES\"\nPackage names and further optional dependencies:\n.br\nhttps://github.com/mviereck/x11docker/wiki/Dependencies\n\n.SS \"Dependencies on host:\"\n.IP\nFor core functionality x11docker only needs bash, an X server and one of\ndocker, podman or nerdctl.\nDepending on chosen options x11docker might need some additional tools.\nIt checks for them on startup and shows messages if some are missing.\n.IP\n* Most recommended: Provide image \\fBx11docker/xserver\\fR to run X or Wayland\nin container. The image contains all X related dependencies.\n.IP\nOtherwise provide on host:\n.IP\n* Recommended to allow security and convenience:\n.br\nX servers: some of: \\fBnxagent xpra Xephyr Xorg\\fR\n.br\nTools: all of: \\fBxauth xclip xrandr xhost xinit catatonit\\fR\n.IP\n* Additionally for advanced GPU support: \\fBweston Xwayland xpra xdotool\\fR\n\n.SS \"Dependencies in image:\"\n.IP\nNo dependencies in image except for a few feature options. Most important:\n.TP\n\\fB\\-\\-gpu\\fR:\nOpenGL/MESA packages, collected often in \\fBmesa\\-utils\\fR package.\n.br\nFor closed source NVIDIA support look at https://github.com/mviereck/x11docker/wiki/NVIDIA-driver-support-for-docker-container\n.HP\n\\fB\\-\\-pulseaudio\\fR: Needs \\fBpulseaudio\\fR on host and pulseaudio client libs in image.\n.HP\n\\fB\\-\\-printer\\fR: Needs \\fBcups\\fR on host and cups client libs in image.\n\n\n.SH \"EXIT CODES\"\n.TP\n\\fB0\\fR\nSuccess\n.TP\n\\fB64\\fR\nx11docker error\n.TP\n\\fB130\\fR\nTerminated by ctrl\\-c\n.TP\n\\fIother\\fR\nExit code of command in container\n\n\n.SH \"EXAMPLES\"\nFVWM window manager:\n.RS 2\n\\fBx11docker --desktop x11docker/fvwm\\fR\n.RE\nXfce desktop:\n.RS 2\n\\fBx11docker --desktop x11docker/xfce\\fR\n.RE\nAccelerated glxspheres:\n.RS 2\n\\fBx11docker --gpu x11docker/check glxspheres64\\fR\n.RE\nKodi media center with hardware acceleration, pulseaudio sound, shared Videos folder and persistent HOME: \n.RS 2\n\\fBx11docker --gpu --pulseaudio --home --share=~/Videos erichough/kodi\\fR\n.RE\nFirefox with shared Downloads folder and internet access:\n.RS 2\n\\fBx11docker -I --share $HOME/Downloads -- --tmpfs /dev/shm -- jess/firefox\\fR\n\n.SH \"AUTHOR\"\nWritten by Martin Viereck, Germany.\n\n\n.SH \"REPORTING BUGS\"\nPlease report issues and get help at:\n.br\nhttps://github.com/mviereck/x11docker/issues\n\n\n.SH \"COPYRIGHT\"\nx11docker is published under the MIT licence. Check the output of \\fBx11docker --licence\\fR .\nThis is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law.\n\n\n.SH \"SEE ALSO\"\nFurther documentation at:\n.br\nhttps://github.com/mviereck/x11docker\n.br\nhttps://github.com/mviereck/x11docker/wiki\n"
        },
        {
          "name": "x11docker.png",
          "type": "blob",
          "size": 7.7109375,
          "content": null
        }
      ]
    }
  ]
}