{
  "metadata": {
    "timestamp": 1736568830782,
    "page": 7,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Gogh-Co/Gogh",
      "stars": 9482,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1376953125,
          "content": "gh-pages/node_modules/\nnode_modules/\nvenv/\nbin/\n\n.venv/\n.devbox/\n.nuxt/\n\n.*.swp\n.stfolder\n.tmp\n\napply-colors-original.sh\nout.txt\ndevbox.lock\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0361328125,
          "content": "MIT License\n\nCopyright (c) 2024 Gogh\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.482421875,
          "content": "<h1 align=\"center\">\n  Gogh\n</h1>\n\n<div align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/Gogh-Co/Gogh/master/images/gogh/Gogh-logo-dark.png\" alt=\"Gogh\" width=\"100%\">\n</div>\n\n<div align=\"center\">\n:small_blue_diamond: <a href=\"http://Gogh-Co.github.io/Gogh\"> Visit the Website </a> :small_blue_diamond:\n</div>\n\n[![Created Badge](https://badges.pufler.dev/created/Gogh-Co/Gogh)](https://badges.pufler.dev)\n\n## Color scheme for your terminal\n\nGogh is a collection of color schemes for various terminal emulators, including Gnome Terminal, Pantheon Terminal, Tilix, and XFCE4 Terminal. These schemes are designed to make your terminal more visually appealing and improve your productivity by providing a better contrast and color differentiation.\n\nThe inspiration for Gogh came from the clean and minimalistic design of Elementary OS, but the project has since grown to include a variety of unique and beautiful options. Not only does Gogh work on Linux systems, but it's also compatible with iTerm on macOS, providing a consistent and visually appealing experience across platforms.\n\n<br>\n\n<table>\n<tr>\n<td>\n<img width=\"441\" height=\"1\">\n\n<b style=\"font-size:30px\">Index:</b>\n\n<br>\n\n- [Pre-Install](https://github.com/Gogh-Co/Gogh?tab=readme-ov-file#%EF%B8%8F-pre-install)\n- **[Install üì¶](https://github.com/Gogh-Co/Gogh?tab=readme-ov-file#-install)**\n- [Install (non-interactive mode)](https://github.com/Gogh-Co/Gogh?tab=readme-ov-file#%EF%B8%8F-install-non-interactive-mode)\n- [Terminals](https://github.com/Gogh-Co/Gogh?tab=readme-ov-file#-terminals)\n- [Themes](https://github.com/Gogh-Co/Gogh?tab=readme-ov-file#-themes)\n- [Help](https://github.com/Gogh-Co/Gogh?tab=readme-ov-file#-help)\n- [Create your own theme](https://github.com/Gogh-Co/Gogh?tab=readme-ov-file#%EF%B8%8F-how-to-create-your-own-theme)\n- [As command line](https://github.com/Gogh-Co/Gogh?tab=readme-ov-file#-as-command-line)\n- [Accessibility - wcag](https://github.com/Gogh-Co/Gogh?tab=readme-ov-file#-accessibility---wcag)\n- [First commit](https://github.com/Gogh-Co/Gogh?tab=readme-ov-file#-first-commit)\n- [Credits](https://github.com/Gogh-Co/Gogh?tab=readme-ov-file#heart-credits)\n- [Contributors](https://github.com/Gogh-Co/Gogh?tab=readme-ov-file#heart-contributors)\n- [Author](https://github.com/Gogh-Co/Gogh?tab=readme-ov-file#-author-contributor)\n- [Why Gogh?](https://github.com/Gogh-Co/Gogh?tab=readme-ov-file#%EF%B8%8F-why-gogh)\n- [Mentions](https://github.com/Gogh-Co/Gogh?tab=readme-ov-file#-mentions)\n- [Stargazers over time](https://github.com/Gogh-Co/Gogh?tab=readme-ov-file#-stargazers-over-time)\n\n</td>\n<td>\n<img width=\"441\" height=\"1\">\n<br>\n<br>\n\n![gogh](https://raw.githubusercontent.com/Gogh-Co/Gogh/master/images/demos/themes.gif)\n\n</td>\n</table>\n\n<br>\n\n## ‚öôÔ∏è Pre-Install\n\nIn your terminal type:\n\n**Debian/Ubuntu**\n\n```bash\nsudo apt-get install dconf-cli uuid-runtime\n```\n\n**Arch Linux**\n\n```bash\nsudo pacman -S dconf util-linux-libs\n```\n\nYou can now install in interactive mode (easy) or non-interactive mode (ideal for scripting)\n\n<br>\n<br>\n\n## üì¶ **Install**\n\nInteractive mode\n\n**1. Just copy and paste this one-line command:**\n\n```bash\nbash -c \"$(wget -qO- https://git.io/vQgMr)\"\n```\n\nOr, if you are a Mac user:\n\n```bash\nbash -c \"$(curl -sLo- https://git.io/vQgMr)\"\n```\n\n**2. Select the color theme installed from the terminal**\n\n**DEMO:**\n\n![gogh-demo-profile](https://raw.githubusercontent.com/Gogh-Co/Gogh/master/images/demos/gogh-demo-profile.gif)\n\n<br/>\n<br/>\n\n\n## ‚öôÔ∏è Install (non-interactive mode)\nTwo ways:\n* Clone repo\n* Download only required files (bare minimum)\n\n### Clone repo\n```bash\n# Clone the repo into \"$HOME/src/gogh\"\nmkdir -p \"$HOME/src\"\ncd \"$HOME/src\"\ngit clone https://github.com/Gogh-Co/Gogh.git gogh\ncd gogh\n\n# necessary in the Gnome terminal on ubuntu\nexport TERMINAL=gnome-terminal\n\n# necessary in the Alacritty terminal\npip install -r requirements.txt\nexport TERMINAL=alacritty\n\n# Enter theme installs dir\ncd installs\n\n# install themes\n./atom.sh\n./dracula.sh\n```\n\n### Download only required files (bare minimum)\n```bash\n# Download apply script\nwget https://github.com/Gogh-Co/Gogh/raw/master/apply-colors.sh\n# Download desired themes from ./installs/ like this:\nwget https://github.com/Gogh-Co/Gogh/raw/master/installs/selenized-dark.sh\n\n# Optional - download Alacritty dependency (may require additional python packages, see requirements.txt for more)\nwget https://github.com/Gogh-Co/Gogh/raw/master/apply-alacritty.py\n# Optional - download Terminator dependency (may require additional python packages, see requirements.txt for more)\nwget https://github.com/Gogh-Co/Gogh/raw/master/apply-terminator.py\n\n# You can also specify where to find the apply scripts with the following environmental variables:\nGOGH_APPLY_SCRIPT=/path/to/apply-colors.sh\nGOGH_ALACRITTY_SCRIPT=/path/to/apply-alacritty.py   # only needed if applying to Alacritty terminal\nGOGH_TERMINATOR_SCRIPT=/path/to/apply-terminator.py # only needed if applying to Terminator terminal\n\n# Control Gogh behavior with the following:\nTERMINAL=gnome-terminal # Select for which terminal to install the theme\n                        # (see apply-colors.sh for all supported terminals)\nGOGH_NONINTERACTIVE= # Make output silent and answer all prompts with default value\n                     # (errors will still be printed)\nGOGH_USE_NEW_THEME= # Make theme the currently used/default one of the terminal\n                    # Actual effect may differ between terminals\n                    # Supported terminals: xfce4-terminal\n\n# Apply downloaded theme (apply script must be in the same folder)\nTERMINAL=gnome-terminal bash ./selenized-dark.sh\n# OR specify apply script path\nGOGH_APPLY_SCRIPT=/path/to/file/apply-colors.sh bash ./selenized-dark.sh\n```\n\n<br/>\n<br/>\n\n## üíª Terminals\n\n- Alacritty - [Web](https://github.com/alacritty/alacritty)\n- Cygwin - [Web](https://www.cygwin.com/)\n- Foot - [Web](https://codeberg.org/dnkl/foot)\n- Gnome - [Web](https://help.gnome.org/users/gnome-terminal/stable/)\n- Guake - [Web](http://guake-project.org/)\n- iTerm - [Web](https://iterm2.com/)\n- Kitty - [Web](https://sw.kovidgoyal.net/kitty/)\n- Konsole - [Web](https://konsole.kde.org/)\n- Mate - [Web](https://github.com/mate-desktop/mate-terminal)\n- Mintty - [Web](https://mintty.github.io/)\n- Pantheon / Elementary - [Web](https://github.com/elementary/terminal)\n- Tilix - [Web](https://gnunn1.github.io/tilix-web/)\n- XFCE4 - [Web](https://docs.xfce.org/apps/terminal/start)\n- Terminator - [Web](https://github.com/gnome-terminator/terminator)\n\n<br/>\n<br/>\n\n## üé® [Themes](https://Gogh-Co.github.io/Gogh/)\n\nWe have lots of themes. Check them out [here](https://Gogh-Co.github.io/Gogh/)!\n\n- themes in `json` format: https://raw.githubusercontent.com/Gogh-Co/Gogh/master/data/themes.json\n- themes in `json` min format: https://raw.githubusercontent.com/Gogh-Co/Gogh/master/data/themes-min.json\n- themes in `csv` format: https://raw.githubusercontent.com/Gogh-Co/Gogh/master/data/themes.csv\n\n<br/>\n<br/>\n\n## üëÄ [WCAG](https://Gogh-Co.github.io/Gogh/wcag) - Accessibility Contrast\n\n  - https://gogh-co.github.io/Gogh/wcag\n  - RAW Data: https://raw.githubusercontent.com/Gogh-Co/Gogh/refs/heads/master/data/wcag.json\n  - RAW Data min: https://raw.githubusercontent.com/Gogh-Co/Gogh/refs/heads/master/data/wcag-min.json\n  - More info: https://webaim.org/resources/contrastchecker/\n\n<br/>\n<br>\n\n## ‚ùì HELP\n\n- [Ubuntu 19.10: default_profile not a valid identifier, command not found](https://github.com/Gogh-Co/Gogh/issues/203)\n- [Using Elementary terminal but says unsupported](https://github.com/Gogh-Co/Gogh/issues/175)\n- [Doesn't working Debian](https://github.com/Gogh-Co/Gogh/issues/63)\n- [Not Working on Ubuntu](https://github.com/Gogh-Co/Gogh/issues/41)\n- `sudo apt install gconf2` - https://github.com/Gogh-Co/Gogh/issues/334#issuecomment-1374541799\n\n### üîπ Debian Fixes\n\n#### [Fix 1](https://github.com/Gogh-Co/Gogh/issues/63#issuecomment-361071956) (@romzie):\n\n- reset your profiles:\n\n```bash\ndconf reset -f /org/gnome/terminal/legacy/profiles:/\n```\n\n#### [Fix 2](https://github.com/Gogh-Co/Gogh/issues/63#issuecomment-401224491) (@MalwareJedi):\n\n- Reset your profiles:\n\n```bash\ndconf reset -f /org/gnome/terminal/legacy/profiles:/\n```\n\n- Close your terminal. Re-open the terminal.\n- Go to **Edit** ---> **Preferences** ---> **Profiles**.\n- Create NEW profile called **Default**.\n- Close the terminal. Re-open the terminal.\n- Confirm **Default** is still listed in your profiles.\n- If it is, run the Gogh script again.\n\n#### [Fix 3](https://github.com/Gogh-Co/Gogh/issues/63#issuecomment-401510226) (@sui74):\n\n- Reset your profiles:\n\n```bash\ndconf reset -f /org/gnome/terminal/legacy/profiles:/\n```\n\n- \"Unname\" Rename profile called \"default\".\n\n```bash\nsudo apt install uuid-runtime\n```\n- run Gogh script.\n\n\n### üîπ Elementary OS\n\n1 - Uncomment the following line in `.bashrc` you can find this file in your `/home/USER/` directory.\n\n```bash\n    #force_color_prompt=yes\n```\n\n2 - Execute in terminal\n\n```bash\nsource .bashrc\n```\n\n<br>\n<br>\n\n## üñºÔ∏è How to create your own theme\n\nGood news! Contributing with new themes is now easier and less intimidating.\n\nYou just need to create a YAML format file, following the example of the other files in the `themes` folder.\n\nPlease keep in mind a few simple rules.\n\n- The file name should match the name of the theme. For example:\n    - **Filename**: `Adventure Time.yml`\n    - **Inside the .yml file**: `name: 'Adventure Time'`\n- Use title case for all words by capitalizing their first letter.\n- Ensure that the contrast is sufficient for good legibility.\n\n**Now you can send Pull Request.**\n\n**Thank you!**\n\n### Theme .yml example\n\n```yml\n---\nname: 'Gogh'\nauthor: ''             # 'AUTHOR NAME (http://WEBSITE.com)'\nvariant: ''            # dark or light\n\ncolor_01: '#292D3E'    # Black (Host)\ncolor_02: '#F07178'    # Red (Syntax string)\ncolor_03: '#62DE84'    # Green (Command)\ncolor_04: '#FFCB6B'    # Yellow (Command second)\ncolor_05: '#75A1FF'    # Blue (Path)\ncolor_06: '#F580FF'    # Magenta (Syntax var)\ncolor_07: '#60BAEC'    # Cyan (Prompt)\ncolor_08: '#ABB2BF'    # White\n\ncolor_09: '#959DCB'    # Bright Black\ncolor_10: '#F07178'    # Bright Red (Command error)\ncolor_11: '#C3E88D'    # Bright Green (Exec)\ncolor_12: '#FF5572'    # Bright Yellow\ncolor_13: '#82AAFF'    # Bright Blue (Folder)\ncolor_14: '#FFCB6B'    # Bright Magenta\ncolor_15: '#676E95'    # Bright Cyan\ncolor_16: '#FFFEFE'    # Bright White\n\nbackground: '#292D3E'  # Background\nforeground: '#BFC7D5'  # Foreground (Text)\n\ncursor: '#BFC7D5'      # Cursor\n```\n\n### Explanation of colors and variables\n\nThe colors of the terminal are composed of 18 colors in 3 sections.\n\nSection 1: Regular text.\n\nSection 2: Bold text.\n\nSection 3: text and background.\n\nThe basic colors are 8:\n\n- Black\n- Red\n- Green\n- Yellow\n- Blue\n- Purple\n- Cyan\n- White\n\nIn comments variables is that of the console belongs each color.\n\nHere is a picture that explains a little better as colors are distributed.\n\n![Colors](https://raw.githubusercontent.com/Gogh-Co/Gogh/master/images/gogh/colors.png)\n\n<br>\n\n## üë®‚Äçüíª As command line\n\n**WARNING:** *Only if you know what you are doing or trust me :)*\n\n```bash\nsudo wget -O /usr/local/bin/gogh https://git.io/vQgMr && sudo chmod +x /usr/local/bin/gogh\n```\n\nNow in your terminal just type `gogh`:\n\n```bash\ngogh\n```\n\n<br/>\n\n## üå± First commit:\n\nNov 18, 2013 - [aa9871e](https://github.com/Gogh-Co/Gogh/commit/aa9871e2d6008d5dc8986b90356fa7cf433a0bb3)\n\n<br/>\n\n## :heart: Credits:\n\n- [4bit](https://ciembor.github.io/4bit/)\n- [Bluloco Light Theme](https://github.com/uloco/theme-bluloco-light)\n- [Catppuccin](https://github.com/catppuccin)\n- [Chalk](https://github.com/chalk/chalk) by [Sindre Sorhus](https://github.com/sindresorhus)\n- [Dracula](https://github.com/dracula/dracula-theme) by [Zeno Rocha](https://github.com/zenorocha)\n- [Elementary OS](https://elementary.io/)\n- [Everblush](https://github.com/Everblush)\n- [Everforest Dark & Light theme set](https://github.com/sainnhe/everforest) by [Sainnhe Park](https://github.com/sainnhe)\n- [Fairy Floss](https://github.com/sailorhg/fairyfloss)\n- [Flat Remix](https://github.com/daniruiz/flat-remix)\n- [Flat UI Terminal Theme](https://dribbble.com/shots/1021755-Flat-UI-Terminal-Theme)\n- [Gooey](http://simey.me/editor-themes/) by [Matt Harris](https://github.com/mdh34)\n- [Gotham](https://github.com/whatyouhide/vim-gotham) by [Andrea Leopardi](https://github.com/whatyouhide)\n- [Gruvbox](https://github.com/morhetz/gruvbox) by [Pavel Pertsev](https://github.com/morhetz)\n- [Hemisu](https://noahfrederick.com/log/hemisu-for-os-x-terminal/) by [Noah Frederick](https://github.com/noahfrederick)\n- [kokuban](https://github.com/ygkn/kokuban) by [ygkn](https://github.com/ygkn)\n- [Monokai](https://web.archive.org/web/20161117102850/https://www.monokai.nl/blog/2006/07/15/textmate-color-theme) by [Wimer Hazenberg](https://github.com/monokai)\n- [Nightfox](https://github.com/EdenEast/nightfox.nvim)\n- [Ocean](https://github.com/fabianperez/ocean-dark-iterm) by [Fabian Perez](https://github.com/fabianperez)\n- [Omni](https://github.com/getomni)\n- [One Dark & Light theme set](https://github.com/nathanbuchar/one-dark-terminal) by [Nathan Buchar](https://github.com/nathanbuchar)\n- [Panda](https://github.com/PandaTheme) by [Siamak](https://github.com/siamak)\n- [Peppermint](https://noahfrederick.com/log/lion-terminal-theme-peppermint/) by [Noah Frederick](https://github.com/noahfrederick)\n- [Ros√© Pine](https://github.com/rose-pine)\n- [Selenized](https://github.com/jan-warchol/selenized/)\n- [SMYCK](http://color.smyck.org/) by [John-Paul Bader](https://github.com/hukl)\n- [Snazzy](https://github.com/sindresorhus/hyper-snazzy) by [Sindre Sorhus](https://github.com/sindresorhus)\n- [Solarized](https://ethanschoonover.com/solarized) by [Ethan Schoonover](https://github.com/altercation)\n- [Sonokai](https://github.com/sainnhe/sonokai) by [Sainnhe Park](https://github.com/sainnhe)\n- [Srcery](https://github.com/srcery-colors/srcery-terminal) by [Daniel Berg](https://github.com/roosta)\n- [Summer Pop](https://github.com/guillermoap/Gogh) by [Guillermo Aguirre](https://github.com/guillermoap)\n- [SynthWave '84 ](https://github.com/robb0wen/synthwave-vscode)\n- [SynthWave Alpha](https://github.com/vikpe/synthwave-alpha)\n- [Terminal Sexy](https://terminal.sexy) by [George Czabania](https://github.com/stayradiated)\n- [Tilix](https://github.com/storm119/Tilix-Themes)\n- [Tokyo Night](https://github.com/enkia/tokyo-night-vscode-theme)\n- [Tomorrow color theme set](https://github.com/chriskempson/tomorrow-theme) by [Chris Kempson](https://github.com/chriskempson)\n- Material theme by [Mitchel van Eijgen](https://gist.github.com/mvaneijgen/4c56701215847dd5ddcf) and [Liu Xinan](https://gist.github.com/xinan/ca2b82fef6aaa0d1e099)\n- [KANAGAWA.nvim](https://github.com/rebelot/kanagawa.nvim)\n- [Apprentice](https://romainl.github.io/Apprentice/)\n- [Oxocarbon](https://github.com/nyoom-engineering/oxocarbon.nvim)\n- [website-theme](https://github.com/shayanaqvi/website-theme)\n\n<br/>\n\n## :heart: Contributors:\n\nMany thanks to all who have participated in this project.\n\n[@contributors](https://github.com/Gogh-Co/Gogh/graphs/contributors)\n\n<a href=\"https://github.com/Gogh-Co/Gogh/graphs/contributors\">\n  <img src=\"https://contributors-img.web.app/image?repo=Gogh-Co/Gogh&max=500\" />\n</a>\n\n<br/>\n<br/>\n\n## üß† Author (contributor)\n\nI cannot claim to be the only author of this project. Without the help of the people who have contributed, this would not have been possible. Therefore, that's why all contributors are listed first in this document. While I am listed as the author, the true authors are all those who are mentioned in the document. I would like to express my gratitude to all of them, as well as to future contributors.\n\n- Miguel D. Quintero - [Lanet.co](https://lanet.co)\n\n&nbsp;&nbsp;&nbsp;&nbsp; [üíµ Invite me a coffee - paypal](https://paypal.me/mgldvd?country.x=CO&locale.x=es_XC)\n\n<br/>\n<br/>\n\n## üñåÔ∏è Why Gogh?\n\nThere is no blue without yellow and without orange.\n\n-- [Vincent Van Gogh](https://en.wikipedia.org/wiki/Vincent_van_Gogh) --\n\n<br/>\n<br/>\n\n## üì£ Mentions\n\n- [VSCode Theme](https://marketplace.visualstudio.com/items?itemName=Avetis.gogh-theme)\n- [Awesome-Shell](https://github.com/alebcay/awesome-shell)\n- [Hipertextual](https://hipertextual.com/archivo/2014/11/4bit/)\n- [MuyLinux](https://www.muylinux.com/2015/06/06/ping-91)\n- [Reddit - elementaryos](https://www.reddit.com/r/elementaryos/comments/3ivnb7/how_to_change_terminals_colors/)\n- [dev.to](https://dev.to/Gogh-Co/color-scheme-for-your-terminal-1pea)\n- [Ubuntupit](https://www.ubuntupit.com/best-ubuntu-terminal-themes-and-color-schemes/)\n\n<br/>\n\n## üåü Stargazers over time\n\n[![Stargazers over time](https://starchart.cc/Gogh-Co/Gogh.svg)](https://starchart.cc/Gogh-Co/Gogh)\n"
        },
        {
          "name": "apply-alacritty.py",
          "type": "blob",
          "size": 4.869140625,
          "content": "import io\nimport json\nimport os\nimport sys\n\nimport tomli\nimport tomli_w\nfrom ruamel.yaml import YAML  # use ruamel.yaml to preserve comments in config\n\n\ndef printerr(*args, **kwargs):\n    print(*args, file=sys.stderr, **kwargs)\n\n\ndef get_conf_path():\n    # Determine system\n    # When we are in some Java world do extra checks\n    if sys.platform.startswith('java'):\n        import platform\n        os_name = platform.java_ver()[3][0]\n        if os_name.startswith('Windows'):  # \"Windows XP\", \"Windows 7\", etc.\n            system = 'win32'\n        else:  # anything that isn't windows (\"darwin\", \"Linux\", \"SunOS\", \"FreeBSD\", \"Arch\", etc.)\n            system = 'linux2'\n    else:\n        system = sys.platform\n\n    if system == 'win32':\n        # In windows alacritty config can only exist in one place\n        alacritty_path = os.path.expandvars(r'%APPDATA%\\alacritty\\alacritty.yml')\n        if os.path.exists(alacritty_path):\n            return alacritty_path\n        # Check for TOML config for newer version of Alacritty\n        alacritty_path = os.path.expandvars(r'%APPDATA%\\alacritty\\alacritty.toml')\n        if os.path.exists(alacritty_path):\n            return alacritty_path\n    else:\n        # If it is not win32 it can exists in only a few other places\n        xdg_config_home = os.getenv('XDG_CONFIG_HOME')\n        if xdg_config_home is not None and os.path.exists(xdg_config_home + '/alacritty/alacritty.yml'):\n            return xdg_config_home + \"/alacritty/alacritty.yml\"\n        if xdg_config_home is not None and os.path.exists(xdg_config_home + \"/alacritty.yml\"):\n            return xdg_config_home + \"/alacritty.yml\"\n\n        if xdg_config_home is not None and os.path.exists(xdg_config_home + '/alacritty/alacritty.toml'):\n            return xdg_config_home + \"/alacritty/alacritty.toml\"\n        if xdg_config_home is not None and os.path.exists(xdg_config_home + \"/alacritty.toml\"):\n            return xdg_config_home + \"/alacritty.toml\"\n\n        home = os.getenv('HOME')\n        if home is not None and os.path.exists(home + '/.config/alacritty/alacritty.yml'):\n            return home + \"/.config/alacritty/alacritty.yml\"\n        if home is not None and os.path.exists(home + '/.config/alacritty/alacritty.yml'):\n            return home + \"/.config/alacritty/alacritty.yml\"\n        if home is not None and os.path.exists(home + '/.alacritty.yml'):\n            return home + \"/.alacritty.yml\"\n\n        if home is not None and os.path.exists(home + '/.config/alacritty/alacritty.toml'):\n            return home + \"/.config/alacritty/alacritty.toml\"\n        if home is not None and os.path.exists(home + '/.config/alacritty/alacritty.toml'):\n            return home + \"/.config/alacritty/alacritty.toml\"\n        if home is not None and os.path.exists(home + '/.alacritty.toml'):\n            return home + \"/.alacritty.toml\"\n\n    printerr(\"Could not find alacritty config file\\nPlease make sure you have a file in one of the paths specified on\\nhttps://github.com/alacritty/alacritty#configuration\")\n    sys.exit(1)\n# end\n\n\nconf_path = get_conf_path()\nyaml = YAML()\n\n# Read & parse alacritty config\nif conf_path.endswith('yml'):\n    with open(conf_path, 'r') as stream:\n        data_loaded = yaml.load(stream)\nelif conf_path.endswith('toml'):\n    with open(conf_path, 'rb') as stream:\n        data_loaded = tomli.load(stream)\nelse:\n    printerr(f'Config parsing no available for config file {conf_path}')\n    raise NotImplementedError(f'Config parsing not available for config file {conf_path}')\n\n# parse new colors\njs = json.loads(sys.argv[1])\n\n# Update yaml file\ntry:\n    # Use update to not remove existing comments\n    data_loaded['colors']['primary'].update(js['colors']['primary'])\n    data_loaded['colors']['normal'].update(js['colors']['normal'])\n    data_loaded['colors']['bright'].update(js['colors']['bright'])\nexcept KeyError:\n    printerr(\"Could not find existing 'colors' settings in your alacritty.yml file\\nplease make sure to uncomment\\n'colors', as well as 'primary', 'normal' and 'bright'\")\n    printerr(\"Check the example config at\\nhttps://github.com/alacritty/alacritty/releases/download/v0.12.2/alacritty.yml for more information\")\n    printerr(\"Note that alacritty following release 0.13.0 uses toml configuration.\")\n    sys.exit(1)\n\n# make sure the user is okay with having their config changed\nif not \"GOGH_NONINTERACTIVE\" in os.environ:\n    answer = input(\"This script will update your alacritty config at: \\n\" +\n                   conf_path + \"\\nIt is recommended to make a copy of this file before proceeding.\\nAre you sure you want to continue? (Y/N)\\n\")\n    if answer.lower() not in ['y', 'yes']:\n        print(\"Aborted\")\n        sys.exit(1)\n\n# Write alacritty config\nif conf_path.endswith('yml'):\n    with io.open(conf_path, 'w', encoding='UTF8') as outfile:\n        yaml.dump(data_loaded, outfile)\nelif conf_path.endswith('toml'):\n    with open(conf_path, 'wb') as outfile:\n        tomli_w.dump(data_loaded, outfile)\nelse:\n    pass\n"
        },
        {
          "name": "apply-colors.sh",
          "type": "blob",
          "size": 42.8564453125,
          "content": "#!/usr/bin/env bash\n\n# |\n# | Early pre-requisites check\n# | ===========================================\nUUIDGEN=\"${UUIDGEN:-$(command -v uuidgen | xargs echo)}\"\nDCONF=\"${DCONF:-$(command -v dconf | xargs echo)}\"\nGCONF=\"${GCONF:-$(command -v gconftool-2 | xargs echo)}\"\nGS=\"${GS:-$(command -v gsettings | xargs echo)}\"\n# Note: xargs echo is to make the command sucessful even if it was not\n# otherwise the script will exit if the command does not exist (elementary os)\n\n# |\n# | Make sure all exported variables get unset no matter what\n# | Defining this in this script because it gets called even if\n# | gogh.sh was not called. Exported variables in gogh.sh gets\n# | handled there in case there was en error before this script was called\n# | ============================================\nGLOBAL_VAR_CLEANUP() {\n  unset PROFILE_NAME\n  unset PROFILE_SLUG\n  unset scratchdir\n  unset TILIX_RES\n  unset TERMINAL\n  unset LOOP\n  unset OPTLENGTH\n\n  for c in $(seq -s \" \" -w 16); do\n    unset DEMO_COLOR_${c}\n    unset COLOR_${c}\n  done\n\n  unset BACKGROUND_COLOR\n  unset FOREGROUND_COLOR\n  unset CURSOR_COLOR\n  unset HIGHLIGHT_FG_COLOR\n  unset HIGHLIGHT_BG_COLOR\n  unset USE_SYS_TRANSPARENCY\n  unset PROFILE_NAME\n}\n\nSCRIPT_PATH=\"${SCRIPT_PATH:-$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)}\"\nPARENT_PATH=\"$(dirname \"${SCRIPT_PATH}\")\"\n\n# Note: Since all scripts gets invoked in a subshell the traps from the parent shell\n# will not get inherited. Hence traps defined in gogh.sh and print-themes.sh will still trigger\ntrap 'GLOBAL_VAR_CLEANUP; trap - EXIT' EXIT HUP INT QUIT PIPE TERM\n\nprint() {\n        format=\"${1:?missing value for print}\"\n        shift\n        if [ -z \"${GOGH_NONINTERACTIVE+no}\" ]; then\n                printf \"${format}\" \"${@}\"\n        fi\n}\n\nprints() {\n        print '%s\\n' \"${@}\"\n}\n\nprinterr() {\n        format=\"${1:?missing value for printerr}\"\n        shift\n        printf \"${format}\" \"${@}\" 1>&2\n}\n\nprintserr() {\n        printerr '%s\\n' \"${@}\"\n}\n\n# |\n# | Second test for TERMINAL in case user ran\n# | theme script directly instead of gogh.sh\n# | ============================================\nif [[ -z \"${TERMINAL:-}\" ]]; then\n\n  # |\n  # | Check for the terminal name (depening on os)\n  # | ===========================================\n  OS=\"$(uname)\"\n  if [[ \"$TERM\" = \"xterm-kitty\" ]]; then\n    TERMINAL=\"kitty\"\n  elif [[ \"$OS\" = \"Darwin\" ]]; then\n    TERMINAL=$TERM_PROGRAM\n  elif [[ \"${OS#CYGWIN}\" != \"${OS}\" ]]; then\n    TERMINAL=\"mintty\"\n  elif [[ \"${TERM}\" = \"linux\" ]]; then\n    TERMINAL=\"linux\"\n  elif [[ \"${HOME}\" = *com.termux* ]]; then\n    TERMINAL=\"termux\"\n  else\n    # |\n    # | Depending on how the script was invoked, we need\n    # | to loop until pid is no longer a subshell\n    # | ===========================================\n    pid=\"$$\"\n    TERMINAL=\"$(ps -h -o comm -p $pid)\"\n    while [[ \"${TERMINAL:(-2)}\" == \"sh\" ]]; do\n      pid=\"$(ps -h -o ppid -p $pid)\"\n      TERMINAL=\"$(ps -h -o comm -p $pid)\"\n    done\n  fi\nfi\n\n\ncase \"${TERMINAL}\" in\n  pantheon-terminal|io.elementary.t* )\n    if [[ -z \"${GS}\" ]]; then\n      printerr '\\n%s\\n' \"Error gsettings not found\"\n      printerr '%s\\n'   \"sudo apt install dconf?\"\n      printerr '%s\\n\\n' \"or export GS=/path/to/gsettings\"\n      exit 1\n    fi\n    ;;\n\n  mintty )\n    CFGFILE=\"${HOME}/.minttyrc\"\n    if [[ ! -f \"${CFGFILE}\" ]]; then\n      print '\\n%s\\n' \"Warning: Couldn't find an existing configuration file, so one will be created for you.\"\n      print '%s\\n\\n' \"Warning: Are you really running Cygwin's mintty?\"\n      touch \"${CFGFILE}\"\n    fi\n    ;;\n\n  guake|tilix|mate-terminal|gnome-terminal* )\n    case \"${TERMINAL}\" in\n      guake|gnome-terminal* )\n        if [[ -z \"${GS}\" ]] && [[ -z \"${DCONF}\" ]] && [[ -z \"${GCONF}\" ]]; then\n          printerr '\\n%s\\n' \"Error gconftool not found!\"\n          printerr '%s\\n'   \"sudo apt install gconftool?\"\n          printerr '%s\\n\\n' \"or export GCONF=/path/to/gconftool-2/\"\n          exit 1\n        fi\n        ;;\n    esac\n    if [[ -z \"${DCONF}\" ]]; then\n      printerr '\\n%s\\n' \"Error dconf not found\"\n      printerr '%s\\n'   \"sudo apt install dconf?\"\n      printerr '%s\\n\\n' \"or export DCONF=/path/to/dconf\"\n      exit 1\n    fi\n    ;;\n\n  foot )\n    CFGFILE=\"${HOME}/.config/foot/foot.ini\"\n    if [[ ! -f \"${CFGFILE}\" ]]; then\n      mkdir --parents \"$(dirname \"${CFGFILE}\")\"\n      # Create a new config for the user if not exist\n      # Extracted from foot's default config file\n      {\n        echo \"[colors]\"\n        echo \"background=242424\"\n        echo \"foreground=ffffff\"\n\n        echo \"# Normal/regular colors (color palette 0-7)\"\n        echo \"regular0=242424  # black\"\n        echo \"regular1=f62b5a  # red\"\n        echo \"regular2=47b413  # green\"\n        echo \"regular3=e3c401  # yellow\"\n        echo \"regular4=24acd4  # blue\"\n        echo \"regular5=f2affd  # magenta\"\n        echo \"regular6=13c299  # cyan\"\n        echo \"regular7=e6e6e6  # white\"\n\n        echo \"# Bright colors (color palette 8-15)\"\n        echo \"bright0=616161   # bright black\"\n        echo \"bright1=ff4d51   # bright red\"\n        echo \"bright2=35d450   # bright green\"\n        echo \"bright3=e9e836   # bright yellow\"\n        echo \"bright4=5dc5f8   # bright blue\"\n        echo \"bright5=feabf2   # bright magenta\"\n        echo \"bright6=24dfc4   # bright cyan\"\n        echo \"bright7=ffffff   # bright white\"\n      } > \"${CFGFILE}\"\n    fi\n    ;;\n\n  kitty )\n    if [[ -z \"${KITTY_CONFIG_DIRECTORY:-}\" ]]; then\n      KITTY_CONFIG_DIRECTORY=\"${HOME}/.config/kitty\"\n    fi\n    CFGFILE=\"${KITTY_CONFIG_DIRECTORY}/kitty.conf\"\n    if [[ ! -f \"${CFGFILE}\" ]]; then\n      printerr '\\n%s\\n' \"Error: Couldn't find an existing configuration file for Kitty.\"\n      exit 1\n    fi\n    ;;\n\n  kmscon )\n    if [[ -z \"${KMSCON_CONFIG_DIRECTORY:-}\" ]]; then\n      KMSCON_CONFIG_DIRECTORY=\"/etc/kmscon\"\n      CFGFILE=\"${KMSCON_CONFIG_DIRECTORY}/kmscon.conf\"\n    fi\n    if [[ ! -f \"${CFGFILE}\" ]]; then\n      printerr '\\n%s\\n' \"Error: Couldn't find an existing configuration file for KMSCon.\"\n      exit 1\n    fi\n    ;;\n\n\n  konsole )\n    CFGFILE=\"${HOME}/.config/konsolerc\"\n    if [[ ! -f \"${CFGFILE}\" ]]; then\n      printerr '\\n%s\\n' \"Error: Couldn't find an existing configuration file for Konsole.\"\n      exit 1\n    fi\n    ;;\n\n  termux )\n    CFGFILE=\"${HOME}/.termux/colors.properties\"\n    echo > \"${CFGFILE}\"\n    ;;\nesac\n\n\n# |\n# | Convert RGB to gnome colors\n# | ===========================================\ngnome_color () {\n\n  AA=${1:1:2}\n  BB=${1:3:2}\n  CC=${1:5:2}\n\n  if [[ -n \"${AA:-}\" ]]; then\n    echo \"#${AA}${AA}${BB}${BB}${CC}${CC}\"\n  fi\n}\n\nhexToDec () {\n  echo \"$((16#${1}))\"\n}\n\nhexRGBtoDecRGB () {\n  R=\"$(hexToDec \"${1:1:2}\")\"\n  G=\"$(hexToDec \"${1:3:2}\")\"\n  B=\"$(hexToDec \"${1:5:2}\")\"\n\n  echo \"${R}\" \"${G}\" \"${B}\"\n}\n\nconvertRGBtoMac () {\n  local color=\"${1}\"\n  set --\n  set -- $(hexRGBtoDecRGB \"${color}\")\n  R=${1}; shift; G=${1}; shift; B=${1}; shift\n\n  R=$(echo \"${R} / 255\" | bc -l)\n  G=$(echo \"${G} / 255\" | bc -l)\n  B=$(echo \"${B} / 255\" | bc -l)\n\n  echo \"${R}\" \"${G}\" \"${B}\"\n}\n\ncreateMinttyEntry () {\n  local  name=\"${1}\"\n  local color=\"${2}\"\n  set --\n  set -- $(hexRGBtoDecRGB \"${color}\")\n  R=${1}; shift; G=${1}; shift; B=${1}; shift\n\n  echo \"${name}=${R},${G},${B}\"\n}\n\nupdateMinttyConfig () {\n  local config=\"${1}\"\n  local  color=\"${2}\"\n  local   name=\"${3}\"\n\n  sed -i -r -e \"s/^${name}=.+/$(createMinttyEntry \"${name}\" \"${color}\")/g\" \"${config}\"\n}\n\ncreateKmsconEntry () {\n  local  name=\"${1}\"\n  local color=\"${2}\"\n  set --\n  set -- $(hexRGBtoDecRGB \"${color}\")\n  R=${1}; shift; G=${1}; shift; B=${1}; shift\n\n  echo \"${name}=${R}, ${G}, ${B}\"\n}\n\nupdateKmsconConfig () {\n  local config=\"${1}\"\n  local  color=\"${2}\"\n  local   name=\"${3}\"\n\n  if ! grep -qe \"^${name}=.+\" \"${config}\"; then\n          echo \"$(createKmsconEntry \"${name}\" \"${color}\")\" >> \"${config}\"\n  fi\n}\n\nupdateFootConfig () {\n  local config=\"${1}\"\n  local  color=\"${2}\"\n  local   name=\"${3}\"\n\n  sed -i -r -e \"s/^${name}=.*/${name}=${color/\\#/}/g\" \"${config}\"\n}\n\nupdateTermuxConfig() {\n  local config=\"${1}\"\n  local  color=\"${2,,}\"\n  local   name=\"${3}\"\n\n  echo \"${name}=${color}\" >> \"${config}\"\n}\n\ncreateKonsoleEntry () {\n  local   name=\"${1}\"\n  local  color=\"${2}\"\n  set --\n  set -- $(hexRGBtoDecRGB \"${color}\")\n  R=${1}; shift; G=${1}; shift; B=${1}; shift\n\n  echo -e \"[$name]\\nColor=${R},${G},${B}\\n\"\n}\n\ncreateKonsoleTriple () {\n  local   name=\"${1}\"\n  local colorn=\"${2}\"  # normal and faint\n  local colori=\"${3}\"  # intense\n\n  createKonsoleEntry \"${name}\" \"${colorn}\"\n  createKonsoleEntry \"${name}Faint\" \"${colorn}\"\n  createKonsoleEntry \"${name}Intense\" \"${colori}\"\n}\n\nconvertNameAndRGBtoITerm() {\n  local  name=\"${1}\"\n  local color=\"${2}\"\n  set --\n  set -- $(convertRGBtoMac \"${color}\")\n  R=${1}; shift; G=${1}; shift; B=${1}; shift\n\n  echo \"<key>${name}</key><dict><key>Blue Component</key><real>${B}</real><key>Green Component</key><real>${G}</real><key>Red Component</key><real>${R}</real></dict>\"\n}\n\ndset() {\n  local key=\"${1}\"; shift\n  local val=\"${1}\"\n\n  \"${DCONF}\" write \"${PROFILE_KEY}/${key}\" \"${val}\"\n}\n\n# Because dconf still doesn't have \"append\"\ndlist_append() {\n  local key=\"${1}\"; shift\n  local val=\"${1}\"; shift\n  local entries\n\n  entries=\"$(\n  {\n    \"${DCONF}\" read \"${key}\" | tr -d \"[]\" | tr , \"\\n\" | grep -F -v \"${val}\"\n    echo \"'${val}'\"\n  } | head -c-1 | tr \"\\n\" ,\n  )\"\n\n  \"${DCONF}\" write \"${key}\" \"[${entries}]\"\n}\n\ngcset() {\n  local type=\"${1}\"; shift\n  local  key=\"${1}\";  shift\n  local  val=\"${1}\"\n\n  \"${GCONF}\" --set --type \"${type}\" \"${PROFILE_KEY}/${key}\" -- \"${val}\"\n}\n\n# Because gconftool doesn't have \"append\"\nglist_append() {\n  local type=\"${1}\"; shift\n  local key=\"${1}\";  shift\n  local val=\"${1}\";  shift\n  local entries\n\n  entries=\"$(\n  {\n    \"${GCONF}\" --get \"${key}\" | tr -d \"[]\" | tr , \"\\n\" | grep -F -v \"${val}\"\n    echo \"${val}\"\n  } | head -c-1 | tr \"\\n\" ,\n  )\"\n\n  \"${GCONF}\" --set --type list --list-type \"${type}\" \"${key}\" \"[${entries}]\"\n}\n\ngset() {\n  local key=\"${1}\"; shift\n  local val=\"${1}\"\n\n  \"${GS}\" set \"${PROFILE_KEY}\" \"${key}\" \"${val}\"\n}\n\nset_theme() {\n  dset visible-name                    \"'${PROFILE_NAME}'\"\n  dset background-color                \"'${BACKGROUND_COLOR}'\"\n  dset foreground-color                \"'${FOREGROUND_COLOR}'\"\n  dset cursor-colors-set               \"true\"\n  dset cursor-background-color         \"'${CURSOR_COLOR}'\"\n  dset cursor-foreground-color         \"'${BACKGROUND_COLOR}'\"\n\n  if [[ -n \"${HIGHLIGHT_BG_COLOR:-}\" ]]; then\n    dset   highlight-colors-set        \"true\"\n    dset   highlight-background-color  \"'${HIGHLIGHT_BG_COLOR}'\"\n    if [[ -n \"${HIGHLIGHT_FG_COLOR:-}\" ]]; then\n      dset   highlight-foreground-color  \"'${HIGHLIGHT_FG_COLOR}'\"\n    fi\n  else\n    dset   highlight-colors-set        \"false\"\n  fi\n\n  if [[ -n \"${BOLD_COLOR:-}\" ]]; then\n    dset   bold-color                  \"'${BOLD_COLOR}'\"\n    dset   bold-color-same-as-fg       \"false\"\n  else\n    dset   bold-color                  \"'${FOREGROUND_COLOR}'\"\n    dset   bold-color-same-as-fg       \"true\"\n  fi\n  dset     use-theme-colors            \"false\"\n  dset     use-theme-background        \"false\"\n  dset     use-theme-transparency      \"${USE_SYS_TRANSPARENCY:-false}\"\n}\n\nlegacy_set_theme() {\n  gcset string visible_name            \"${PROFILE_NAME}\"\n  gcset string background_color        \"${BACKGROUND_COLOR}\"\n  gcset string foreground_color        \"${FOREGROUND_COLOR}\"\n\n  if [[ -n \"${BOLD_COLOR:-}\" ]]; then\n    gcset string bold_color            \"${BOLD_COLOR}\"\n    gcset bool   bold_color_same_as_fg \"false\"\n  else\n    gcset string bold_color            \"${FOREGROUND_COLOR}\"\n    gcset bool   bold_color_same_as_fg \"true\"\n  fi\n  gcset bool     use_theme_colors      \"false\"\n  gcset bool     use_theme_background  \"false\"\n}\n\n\n\n# |\n# | If terminal supports truecolor then we can show theme colors without applying the theme\n# | ===========================================\nif [[ \"${COLORTERM:-}\" == \"truecolor\" ]] || [[ \"${COLORTERM:-}\" == \"24bit\" ]]; then\n  # gogh_colors have been moved here to avoid multiple definitions\n  function gogh_colors () {\n    # Build up the color string to avoid visual rendering\n    local color_str\n    # Note: {01..16} does not work on OSX\n    for c in $(seq -s \" \" -w 16); do\n      local color=\"COLOR_$c\"\n      set -- $(hexRGBtoDecRGB \"${!color}\")\n      color_str+=\"\\033[38;2;${1};${2};${3}m‚ñà‚ñà‚ñà‚ñà‚ñà$(tput sgr0)\"\n      [[ ${GOGH_DRY_RUN:-0} -eq 1 ]] && export \"DEMO_COLOR_$c=\\033[38;2;${1};${2};${3}m\"\n      [[ \"$c\" == \"08\" ]] && color_str+=\"\\n\" # new line\n    done\n    print '\\n%b\\n\\n\\n' \"${color_str}\"\n    unset color_str\n  }\nelse\n  function gogh_colors () {\n    # Build up the color string to avoid visual rendering\n    local color_str\n    for c in {0..15}; do\n      color_str+=\"$(tput setaf $c)‚ñà‚ñà‚ñà‚ñà‚ñà$(tput sgr0)\"\n      [[ $c == 7 ]] && color_str+=\"\\n\" # new line\n    done\n    print '\\n%b\\n\\n' \"${color_str}\"\n    unset color_str\n  }\nfi\n\n\n# |\n# | Print theme colors\n# | ===========================================\ngogh_colors\nif [[ ${GOGH_DRY_RUN:-0} -eq 1 ]]; then\n  color\n  # End here if dry run was initiated\n  exit 0\nfi\n\n\napply_elementary() {\n  # |\n  # | Applying values on elementary/pantheon terminal\n  # | ===========================================\n\n  local BG_COLOR=\"${BACKGROUND_COLOR}\"\n\n  # If the background color is in the format #rrggbb, convert it to rgba(r,g,b,0.95).\n  # This makes it 5% transparent, which is the default in elementary OS.\n  if [[ ${BACKGROUND_COLOR} =~ ^#[[:xdigit:]]{6}$ ]]; then\n    local R=\"$((16#${BACKGROUND_COLOR:1:2}))\"\n    local G=\"$((16#${BACKGROUND_COLOR:3:2}))\"\n    local B=\"$((16#${BACKGROUND_COLOR:5:2}))\"\n    BG_COLOR=\"rgba($R,$G,$B,0.95)\"\n  fi\n\n  gset background   \"${BG_COLOR}\"\n  gset foreground   \"${FOREGROUND_COLOR}\"\n  gset cursor-color \"${CURSOR_COLOR}\"\n  gset palette      \"${COLOR_01}:${COLOR_02}:${COLOR_03}:${COLOR_04}:${COLOR_05}:${COLOR_06}:${COLOR_07}:${COLOR_08}:${COLOR_09}:${COLOR_10}:${COLOR_11}:${COLOR_12}:${COLOR_13}:${COLOR_14}:${COLOR_15}:${COLOR_16}\"\n}\n\napply_cygwin() {\n  # |\n  # | Applying values on mintty (cygwin)\n  # | ===========================================\n\n  prints \"Patching mintty configuration file (${CFGFILE}) with new colors...\"\n\n  updateMinttyConfig \"$CFGFILE\" \"$COLOR_01\"         \"Black\"\n  updateMinttyConfig \"$CFGFILE\" \"$COLOR_02\"         \"Red\"\n  updateMinttyConfig \"$CFGFILE\" \"$COLOR_03\"         \"Green\"\n  updateMinttyConfig \"$CFGFILE\" \"$COLOR_04\"         \"Yellow\"\n  updateMinttyConfig \"$CFGFILE\" \"$COLOR_05\"         \"Blue\"\n  updateMinttyConfig \"$CFGFILE\" \"$COLOR_06\"         \"Magenta\"\n  updateMinttyConfig \"$CFGFILE\" \"$COLOR_07\"         \"Cyan\"\n  updateMinttyConfig \"$CFGFILE\" \"$COLOR_08\"         \"White\"\n\n  updateMinttyConfig \"$CFGFILE\" \"$COLOR_09\"         \"BoldBlack\"\n  updateMinttyConfig \"$CFGFILE\" \"$COLOR_10\"         \"BoldRed\"\n  updateMinttyConfig \"$CFGFILE\" \"$COLOR_11\"         \"BoldGreen\"\n  updateMinttyConfig \"$CFGFILE\" \"$COLOR_12\"         \"BoldYellow\"\n  updateMinttyConfig \"$CFGFILE\" \"$COLOR_13\"         \"BoldBlue\"\n  updateMinttyConfig \"$CFGFILE\" \"$COLOR_14\"         \"BoldMagenta\"\n  updateMinttyConfig \"$CFGFILE\" \"$COLOR_15\"         \"BoldCyan\"\n  updateMinttyConfig \"$CFGFILE\" \"$COLOR_16\"         \"BoldWhite\"\n\n  updateMinttyConfig \"$CFGFILE\" \"$BACKGROUND_COLOR\" \"Backgroundcolor\"\n  updateMinttyConfig \"$CFGFILE\" \"$FOREGROUND_COLOR\" \"Foregroundcolor\"\n  updateMinttyConfig \"$CFGFILE\" \"$CURSOR_COLOR\"     \"Cursorcolor\"\n\n  prints \"Done - please reopen your Cygwin terminal to see the changes\"\n}\n\napply_alacritty() {\n  # |\n  # | Applying values on Alacritty\n  # | ===========================================\n\n  json_str=\"\\\n  { \\\n    \\\"colors\\\": \\\n    {\\\n      \\\"primary\\\":\\\n      {\\\n        \\\"background\\\": \\\"$BACKGROUND_COLOR\\\",\\\n        \\\"foreground\\\": \\\"$FOREGROUND_COLOR\\\"\\\n      },\\\n      \\\"normal\\\":\\\n      {\\\n        \\\"black\\\": \\\"$COLOR_01\\\",\\\n        \\\"red\\\": \\\"$COLOR_02\\\",\\\n        \\\"green\\\": \\\"$COLOR_03\\\",\\\n        \\\"yellow\\\":\\\"$COLOR_04\\\",\\\n        \\\"blue\\\":\\\"$COLOR_05\\\",\\\n        \\\"magenta\\\": \\\"$COLOR_06\\\",\\\n        \\\"cyan\\\":\\\"$COLOR_07\\\",\\\n        \\\"white\\\": \\\"$COLOR_08\\\"\\\n      },\\\n      \\\"bright\\\":\\\n      {\\\n        \\\"black\\\":\\\"$COLOR_09\\\",\\\n        \\\"red\\\":\\\"$COLOR_10\\\",\\\n        \\\"green\\\":\\\"$COLOR_11\\\",\\\n        \\\"yellow\\\": \\\"$COLOR_12\\\",\\\n        \\\"blue\\\": \\\"$COLOR_13\\\",\\\n        \\\"magenta\\\":\\\"$COLOR_14\\\",\\\n        \\\"cyan\\\": \\\"$COLOR_15\\\",\\\n        \\\"white\\\":\\\"$COLOR_16\\\"\\\n      } \\\n    }\\\n  }\"\n\n  if [[ -e \"${GOGH_ALACRITTY_SCRIPT}\" ]]; then\n    python3 \"${GOGH_ALACRITTY_SCRIPT}\" \"$json_str\"\n  elif [[ -e \"${SCRIPT_PATH}/apply-alacritty.py\" ]]; then\n    python3 \"${SCRIPT_PATH}/apply-alacritty.py\" \"$json_str\"\n  else\n    printerr '\\n%s\\n' \"Error: Couldn't find apply-alacritty.py file.\"\n    exit 1\n  fi\n}\n\napply_terminator() {\n  # |\n  # | Applying values on Terminator\n  # | ===========================================\n\n  json_str=\"\\\n  { \\\n    \\\"colors\\\": \\\n    {\\\n      \\\"primary\\\":\\\n      {\\\n        \\\"background\\\": \\\"$BACKGROUND_COLOR\\\",\\\n        \\\"foreground\\\": \\\"$FOREGROUND_COLOR\\\"\\\n      },\\\n      \\\"pallete\\\":\\\"${COLOR_01}:${COLOR_02}:${COLOR_03}:${COLOR_04}:${COLOR_05}:${COLOR_06}:${COLOR_07}:${COLOR_08}:${COLOR_09}:${COLOR_10}:${COLOR_11}:${COLOR_12}:${COLOR_13}:${COLOR_14}:${COLOR_15}:${COLOR_16}\\\"\n    }\\\n  }\"\n\n  if [[ -e \"${GOGH_TERMINATOR_SCRIPT}\" ]]; then\n   python3 \"${GOGH_TERMINATOR_SCRIPT}\" \"$json_str\"\n  elif [[ -e \"${SCRIPT_PATH}/apply-terminator.py\" ]]; then\n    python3 \"${SCRIPT_PATH}/apply-terminator.py\" \"$json_str\"\n  else\n    printerr '\\n%s\\n' \"Error: Couldn't find apply-terminator.py.\"\n    exit 1\n  fi\n\n}\n\napply_foot() {\n  # |\n  # | Applying values on foot\n  # | ===========================================\n\n  prints \"Patching foot configuration file (${CFGFILE}) with new colors...\"\n\n  updateFootConfig \"$CFGFILE\" \"$COLOR_01\" \"regular0\"\n  updateFootConfig \"$CFGFILE\" \"$COLOR_02\" \"regular1\"\n  updateFootConfig \"$CFGFILE\" \"$COLOR_03\" \"regular2\"\n  updateFootConfig \"$CFGFILE\" \"$COLOR_04\" \"regular3\"\n  updateFootConfig \"$CFGFILE\" \"$COLOR_05\" \"regular4\"\n  updateFootConfig \"$CFGFILE\" \"$COLOR_06\" \"regular5\"\n  updateFootConfig \"$CFGFILE\" \"$COLOR_07\" \"regular6\"\n  updateFootConfig \"$CFGFILE\" \"$COLOR_08\" \"regular7\"\n\n  updateFootConfig \"$CFGFILE\" \"$COLOR_09\" \"bright0\"\n  updateFootConfig \"$CFGFILE\" \"$COLOR_10\" \"bright1\"\n  updateFootConfig \"$CFGFILE\" \"$COLOR_11\" \"bright2\"\n  updateFootConfig \"$CFGFILE\" \"$COLOR_12\" \"bright3\"\n  updateFootConfig \"$CFGFILE\" \"$COLOR_13\" \"bright4\"\n  updateFootConfig \"$CFGFILE\" \"$COLOR_14\" \"bright5\"\n  updateFootConfig \"$CFGFILE\" \"$COLOR_15\" \"bright6\"\n  updateFootConfig \"$CFGFILE\" \"$COLOR_16\" \"bright7\"\n\n  updateFootConfig \"$CFGFILE\" \"$BACKGROUND_COLOR\" \"background\"\n  updateFootConfig \"$CFGFILE\" \"$FOREGROUND_COLOR\" \"foreground\"\n\n  prints \"Done - please reopen your foot terminal to see the changes\"\n}\n\napply_kitty() {\n  # |\n  # | Applying values on Kitty\n  # | ===========================================\n\n  prints \"Patching kitty configuration file ($CFGFILE) with include of color theme file...\"\n\n  COLOR_FILE=\"colors.conf\"\n\n  if ! grep -q \"^include $COLOR_FILE$\" \"$CFGFILE\" ; then\n    echo \"\" >> \"$CFGFILE\"\n    echo \"# Added by Gogh\" >> \"$CFGFILE\"\n    echo \"include $COLOR_FILE\" >> \"$CFGFILE\"\n  fi\n\n  CFGFILE=\"${KITTY_CONFIG_DIRECTORY}/$COLOR_FILE\"\n\n  prints \"Updating color theme file ($CFGFILE) with theme...\"\n\n  rm -f \"$CFGFILE\"\n\n  echo \"# Color theme: $PROFILE_NAME\" >> \"$CFGFILE\"\n  echo \"# Auto-generated by Gogh (https://Gogh-Co.github.io/Gogh/)\" >> \"$CFGFILE\"\n  echo \"\" >> \"$CFGFILE\"\n  echo \"color0  $COLOR_01\" >> \"$CFGFILE\"\n  echo \"color1  $COLOR_02\" >> \"$CFGFILE\"\n  echo \"color2  $COLOR_03\" >> \"$CFGFILE\"\n  echo \"color3  $COLOR_04\" >> \"$CFGFILE\"\n  echo \"color4  $COLOR_05\" >> \"$CFGFILE\"\n  echo \"color5  $COLOR_06\" >> \"$CFGFILE\"\n  echo \"color6  $COLOR_07\" >> \"$CFGFILE\"\n  echo \"color7  $COLOR_08\" >> \"$CFGFILE\"\n  echo \"color8  $COLOR_09\" >> \"$CFGFILE\"\n  echo \"color9  $COLOR_10\" >> \"$CFGFILE\"\n  echo \"color10 $COLOR_11\" >> \"$CFGFILE\"\n  echo \"color11 $COLOR_12\" >> \"$CFGFILE\"\n  echo \"color12 $COLOR_13\" >> \"$CFGFILE\"\n  echo \"color13 $COLOR_14\" >> \"$CFGFILE\"\n  echo \"color14 $COLOR_15\" >> \"$CFGFILE\"\n  echo \"color15 $COLOR_16\" >> \"$CFGFILE\"\n\n  echo \"background $BACKGROUND_COLOR\" >> \"$CFGFILE\"\n  echo \"foreground $FOREGROUND_COLOR\" >> \"$CFGFILE\"\n\n  [ -n \"$HIGHLIGHT_FG_COLOR\" ] && echo \"selection_foreground $HIGHLIGHT_FG_COLOR\" >> \"$CFGFILE\"\n  [ -n \"$HIGHLIGHT_BG_COLOR\" ] && echo \"selection_background $HIGHLIGHT_BG_COLOR\" >> \"$CFGFILE\"\n\n  echo \"cursor $CURSOR_COLOR\" >> \"$CFGFILE\"\n\n  prints \"Done - signaling kitty to reload\"\n  killall -u ${USER} -SIGUSR1 kitty || pkill --uid $(id -u) -SIGUSR1 kitty || prints \"Reload failed. Please reopen your kitty terminal to see the changes.\"\n}\n\napply_kmscon() {\n  # |\n  # | Applying values on kmscon | ===========================================\n\n  prints \"Patching kmscon configuration file (${CFGFILE}) with new colors...\"\n\n  updateKmsconConfig \"$CFGFILE\" \"$COLOR_01\"         \"palette-black\"\n  updateKmsconConfig \"$CFGFILE\" \"$COLOR_02\"         \"palette-red\"\n  updateKmsconConfig \"$CFGFILE\" \"$COLOR_03\"         \"palette-green\"\n  updateKmsconConfig \"$CFGFILE\" \"$COLOR_04\"         \"palette-yellow\"\n  updateKmsconConfig \"$CFGFILE\" \"$COLOR_05\"         \"palette-blue\"\n  updateKmsconConfig \"$CFGFILE\" \"$COLOR_06\"         \"palette-magenta\"\n  updateKmsconConfig \"$CFGFILE\" \"$COLOR_07\"         \"palette-cyan\"\n  updateKmsconConfig \"$CFGFILE\" \"$COLOR_08\"         \"palette-dark-grey\"\n\n  updateKmsconConfig \"$CFGFILE\" \"$COLOR_09\"         \"palette-light-grey\"\n  updateKmsconConfig \"$CFGFILE\" \"$COLOR_10\"         \"palette-light-red\"\n  updateKmsconConfig \"$CFGFILE\" \"$COLOR_11\"         \"palette-light-green\"\n  updateKmsconConfig \"$CFGFILE\" \"$COLOR_12\"         \"palette-light-yellow\"\n  updateKmsconConfig \"$CFGFILE\" \"$COLOR_13\"         \"palette-light-blue\"\n  updateKmsconConfig \"$CFGFILE\" \"$COLOR_14\"         \"palette-light-magenta\"\n  updateKmsconConfig \"$CFGFILE\" \"$COLOR_15\"         \"palette-light-cyan\"\n  updateKmsconConfig \"$CFGFILE\" \"$COLOR_16\"         \"palette-white\"\n\n  updateKmsconConfig \"$CFGFILE\" \"$BACKGROUND_COLOR\" \"palette-background\"\n  updateKmsconConfig \"$CFGFILE\" \"$FOREGROUND_COLOR\" \"palette-foreground\"\n\n  prints \"Done - please restart your kmscon vt to see changes\"\n}\n\napply_konsole() {\n  # |\n  # | Applying values on Konsole\n  # | ===========================================\n\n  PARENT=$(grep -o \"^DefaultProfile=.*$\" ${CFGFILE} | cut -d '=' -f 2)\n  if [[ -z \"${PARENT}\" ]]; then\n    PARENT=\"FALLBACK/\"\n  fi\n\n  if [[ -z \"${XDG_DATA_HOME:-}\" ]]; then\n    KDIR=\"${HOME}/.local/share/konsole\"\n  else\n        KDIR=\"${XDG_DATA_HOME}/konsole\"\n  fi\n\n  KPROFILE=\"${KDIR}/${PROFILE_NAME}.profile\"\n  if [[ -f \"${KPROFILE}\" ]]; then\n      prints \"Profile ${PROFILE_NAME} already exists in Konsole confiuration (${KONSOLE_DIR}); Skipping ...\"\n      exit 0\n  fi\n\n  touch \"${KPROFILE}\"\n  echo -e \"[Appearance]\\nColorScheme=${PROFILE_NAME}\\n\" >> \"${KPROFILE}\"\n  echo -e \"[General]\\nName=${PROFILE_NAME}\\nParent=$PARENT\" >> \"${KPROFILE}\"\n\n  KCOLORSCHEME=\"${KDIR}/${PROFILE_NAME}.colorscheme\"\n  if [[ -f \"${KCOLORSCHEME}\" ]]; then\n      prints \"Color Scheme ${PROFILE_NAME} already exists in Konsole confiuration (${KONSOLE_DIR}); Skipping ...\"\n      exit 0\n  fi\n\n  touch \"${KCOLORSCHEME}\"\n  createKonsoleTriple \"Background\" \"${BACKGROUND_COLOR}\" \"${BACKGROUND_COLOR}\" >> \"${KCOLORSCHEME}\"\n  createKonsoleTriple \"Color0\" \"${COLOR_01}\" \"${COLOR_09}\" >> \"${KCOLORSCHEME}\"\n  createKonsoleTriple \"Color1\" \"${COLOR_02}\" \"${COLOR_10}\" >> \"${KCOLORSCHEME}\"\n  createKonsoleTriple \"Color2\" \"${COLOR_03}\" \"${COLOR_11}\" >> \"${KCOLORSCHEME}\"\n  createKonsoleTriple \"Color3\" \"${COLOR_04}\" \"${COLOR_12}\" >> \"${KCOLORSCHEME}\"\n  createKonsoleTriple \"Color4\" \"${COLOR_05}\" \"${COLOR_13}\" >> \"${KCOLORSCHEME}\"\n  createKonsoleTriple \"Color5\" \"${COLOR_06}\" \"${COLOR_14}\" >> \"${KCOLORSCHEME}\"\n  createKonsoleTriple \"Color6\" \"${COLOR_07}\" \"${COLOR_15}\" >> \"${KCOLORSCHEME}\"\n  createKonsoleTriple \"Color7\" \"${COLOR_08}\" \"${COLOR_16}\" >> \"${KCOLORSCHEME}\"\n  createKonsoleTriple \"Foreground\" \"${FOREGROUND_COLOR}\" \"${FOREGROUND_COLOR}\" >> \"${KCOLORSCHEME}\"\n  echo \"[General]\" >> \"${KCOLORSCHEME}\"\n  echo \"Blur=false\" >> \"${KCOLORSCHEME}\"\n  echo \"ColorRandomization=false\" >> \"${KCOLORSCHEME}\"\n  echo \"Description=${PROFILE_NAME}\" >> \"${KCOLORSCHEME}\"\n  echo \"Opacity=1\" >> \"${KCOLORSCHEME}\"\n  echo \"Wallpaper=\" >> \"${KCOLORSCHEME}\"\n}\n\napply_darwin() {\n  # |\n  # | Applying values on iTerm2\n  # | ===========================================\n\n  BACKGROUND_COLOR=$(convertNameAndRGBtoITerm \"Background Color\" \"$BACKGROUND_COLOR\")\n  FOREGROUND_COLOR=$(convertNameAndRGBtoITerm \"Foreground Color\" \"$FOREGROUND_COLOR\")\n  COLOR_01=$(convertNameAndRGBtoITerm \"Ansi 0 Color\"             \"$COLOR_01\")\n  COLOR_02=$(convertNameAndRGBtoITerm \"Ansi 1 Color\"             \"$COLOR_02\")\n  COLOR_03=$(convertNameAndRGBtoITerm \"Ansi 2 Color\"             \"$COLOR_03\")\n  COLOR_04=$(convertNameAndRGBtoITerm \"Ansi 3 Color\"             \"$COLOR_04\")\n  COLOR_05=$(convertNameAndRGBtoITerm \"Ansi 4 Color\"             \"$COLOR_05\")\n  COLOR_06=$(convertNameAndRGBtoITerm \"Ansi 5 Color\"             \"$COLOR_06\")\n  COLOR_07=$(convertNameAndRGBtoITerm \"Ansi 6 Color\"             \"$COLOR_07\")\n  COLOR_08=$(convertNameAndRGBtoITerm \"Ansi 7 Color\"             \"$COLOR_08\")\n  COLOR_09=$(convertNameAndRGBtoITerm \"Ansi 8 Color\"             \"$COLOR_09\")\n  COLOR_10=$(convertNameAndRGBtoITerm \"Ansi 9 Color\"             \"$COLOR_10\")\n  COLOR_11=$(convertNameAndRGBtoITerm \"Ansi 10 Color\"            \"$COLOR_11\")\n  COLOR_12=$(convertNameAndRGBtoITerm \"Ansi 11 Color\"            \"$COLOR_12\")\n  COLOR_13=$(convertNameAndRGBtoITerm \"Ansi 12 Color\"            \"$COLOR_13\")\n  COLOR_14=$(convertNameAndRGBtoITerm \"Ansi 13 Color\"            \"$COLOR_14\")\n  COLOR_15=$(convertNameAndRGBtoITerm \"Ansi 14 Color\"            \"$COLOR_15\")\n  COLOR_16=$(convertNameAndRGBtoITerm \"Ansi 15 Color\"            \"$COLOR_16\")\n\n  # Assemble color scheme file contents\n  ITERMCOLORS='<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>'${BACKGROUND_COLOR}${FOREGROUND_COLOR}${COLOR_01}${COLOR_02}${COLOR_03}${COLOR_04}${COLOR_05}${COLOR_06}${COLOR_07}${COLOR_08}${COLOR_09}${COLOR_10}${COLOR_11}${COLOR_12}${COLOR_13}${COLOR_14}${COLOR_15}'</dict></plist>'\n\n  # Dump iTerm color scheme to file and import it by opening it\n  echo \"${ITERMCOLORS}\" > \"${PROFILE_NAME}.itermcolors\"\n  open \"${PROFILE_NAME}.itermcolors\"\n  rm   \"${PROFILE_NAME}.itermcolors\"\n}\n\napply_gtk() {\n  # |\n  # | Applying values to gnome/mate/tilix\n  # | ===========================================\n\n  local legacy=\"${1:-}\"\n\n  # This is to avoid doing the profile loop definition twice\n  if [[ -z \"${legacy}\" ]]; then\n    CONFTOOL=\"${DCONF} read\"\n    VISIBLE_NAME=\"visible-name\"\n  else\n    CONFTOOL=\"${GCONF} --get\"\n    VISIBLE_NAME=\"visible_name\"\n  fi\n\n  # Check first wether profile already exists\n  profile_hashes=($(${CONFTOOL} \"${PROFILE_LIST_KEY}\" | tr \"[]',\" \" \"))\n  for profile in \"${profile_hashes[@]}\"; do\n    if [[ \"$(${CONFTOOL} \"${BASE_DIR}${profile}/${VISIBLE_NAME}\" | tr -d \"'\")\" == \"${PROFILE_NAME}\" ]]; then\n      print '%s\\n' \"Profile already exists\" \"Skipping...\"\n      exit 0\n    fi\n  done\n\n  # Fallback if there is no default profile\n  set -- $(${CONFTOOL} ${PROFILE_LIST_KEY} | tr \"[]',\" \" \")\n  : ${DEFAULT_SLUG:=\"$1\"}\n\n  : ${PROFILE_NAME:=\"Default\"}\n  : ${PROFILE_SLUG:=\"Default\"}\n\n  DEFAULT_KEY=\"${BASE_DIR}${DEFAULT_SLUG:-}\"\n  PROFILE_KEY=\"${BASE_DIR}${PROFILE_SLUG:-}\"\n\n  if [[ -z \"${legacy}\" ]]; then\n    if [[ -z \"$(${DCONF} list ${BASE_DIR%:})\" ]]; then\n      # Provide a user friendly error text if no saved profile exists, otherwise it will display \"Error gconftool not found!\"\n      #  it could happen on a newly installed system. (happened on CentOS 7)\n      printserr \"Error, no saved profiles found!\" \\\n      \"Possible fix, new a profile (Terminal > Edit > Preferences > Profiles > New, then Close) and try again.\" \\\n      \"You can safely delete the created profile after the installation.\"\n      exit 1\n    fi\n\n    BACKGROUND_COLOR=$(gnome_color   \"$BACKGROUND_COLOR\")\n    FOREGROUND_COLOR=$(gnome_color   \"$FOREGROUND_COLOR\")\n    CURSOR_COLOR=$(gnome_color       \"$CURSOR_COLOR\")\n    HIGHLIGHT_BG_COLOR=$(gnome_color \"$HIGHLIGHT_BG_COLOR\")\n    HIGHLIGHT_FG_COLOR=$(gnome_color \"$HIGHLIGHT_FG_COLOR\")\n    COLOR_01=$(gnome_color           \"$COLOR_01\")\n    COLOR_02=$(gnome_color           \"$COLOR_02\")\n    COLOR_03=$(gnome_color           \"$COLOR_03\")\n    COLOR_04=$(gnome_color           \"$COLOR_04\")\n    COLOR_05=$(gnome_color           \"$COLOR_05\")\n    COLOR_06=$(gnome_color           \"$COLOR_06\")\n    COLOR_07=$(gnome_color           \"$COLOR_07\")\n    COLOR_08=$(gnome_color           \"$COLOR_08\")\n    COLOR_09=$(gnome_color           \"$COLOR_09\")\n    COLOR_10=$(gnome_color           \"$COLOR_10\")\n    COLOR_11=$(gnome_color           \"$COLOR_11\")\n    COLOR_12=$(gnome_color           \"$COLOR_12\")\n    COLOR_13=$(gnome_color           \"$COLOR_13\")\n    COLOR_14=$(gnome_color           \"$COLOR_14\")\n    COLOR_15=$(gnome_color           \"$COLOR_15\")\n    COLOR_16=$(gnome_color           \"$COLOR_16\")\n\n    # copy existing settings from default profile\n    $DCONF dump               \"${DEFAULT_KEY}/\" | $DCONF load \"${PROFILE_KEY}/\"\n\n    # add new copy to global list of profiles\n    dlist_append              \"${PROFILE_LIST_KEY}\" \"${PROFILE_SLUG#:}\"\n\n    set_theme\n    dset palette              \"${LEFT_WRAPPER:-}'${COLOR_01}${PALETTE_DELIM}${COLOR_02}${PALETTE_DELIM}${COLOR_03}${PALETTE_DELIM}${COLOR_04}${PALETTE_DELIM}${COLOR_05}${PALETTE_DELIM}${COLOR_06}${PALETTE_DELIM}${COLOR_07}${PALETTE_DELIM}${COLOR_08}${PALETTE_DELIM}${COLOR_09}${PALETTE_DELIM}${COLOR_10}${PALETTE_DELIM}${COLOR_11}${PALETTE_DELIM}${COLOR_12}${PALETTE_DELIM}${COLOR_13}${PALETTE_DELIM}${COLOR_14}${PALETTE_DELIM}${COLOR_15}${PALETTE_DELIM}${COLOR_16}'${RIGHT_WRAPPER:-}\"\n    ${LEGACY_BOLD:-} && dset allow-bold \"true\" # mate\n  else\n    # Append the Base16 profile to the profile list\n    glist_append string       \"${PROFILE_LIST_KEY}\" \"${PROFILE_SLUG}\"\n\n    legacy_set_theme\n    gcset string palette      \"${COLOR_01}:${COLOR_02}:${COLOR_03}:${COLOR_04}:${COLOR_05}:${COLOR_06}:${COLOR_07}:${COLOR_08}:${COLOR_09}:${COLOR_10}:${COLOR_11}:${COLOR_12}:${COLOR_13}:${COLOR_14}:${COLOR_15}:${COLOR_16}\"\n    ${LEGACY_BOLD:-} && gcset bool allow-bold \"true\"\n  fi\n}\n\napply_guake() {\n  # |\n  # | Applying values to guake\n  # | ===========================================\n\n  local legacy=\"${1:-}\"\n\n  if [[ -z \"${legacy}\" ]]; then\n    if ${GS} list-children guake &>/dev/null; then\n      PROFILE_KEY=\"guake.style.font\"\n      gset palette              \"'${COLOR_01}:${COLOR_02}:${COLOR_03}:${COLOR_04}:${COLOR_05}:${COLOR_06}:${COLOR_07}:${COLOR_08}:${COLOR_09}:${COLOR_10}:${COLOR_11}:${COLOR_12}:${COLOR_13}:${COLOR_14}:${COLOR_15}:${COLOR_16}:${FOREGROUND_COLOR}:${BACKGROUND_COLOR}'\"\n      gset palette-name         \"'${PROFILE_NAME}'\"\n      gset allow-bold 'true'\n    else\n      PROFILE_KEY=\"/apps/guake/style/font\"\n      dset palette              \"'${COLOR_01}:${COLOR_02}:${COLOR_03}:${COLOR_04}:${COLOR_05}:${COLOR_06}:${COLOR_07}:${COLOR_08}:${COLOR_09}:${COLOR_10}:${COLOR_11}:${COLOR_12}:${COLOR_13}:${COLOR_14}:${COLOR_15}:${COLOR_16}:${FOREGROUND_COLOR}:${BACKGROUND_COLOR}'\"\n      dset palette-name         \"'${PROFILE_NAME}'\"\n      dset allow-bold 'true'\n    fi\n  else\n    gcset string color        \"${FOREGROUND_COLOR}\"\n    gcset string palette      \"${COLOR_01}:${COLOR_02}:${COLOR_03}:${COLOR_04}:${COLOR_05}:${COLOR_06}:${COLOR_07}:${COLOR_08}:${COLOR_09}:${COLOR_10}:${COLOR_11}:${COLOR_12}:${COLOR_13}:${COLOR_14}:${COLOR_15}:${COLOR_16}\"\n    gcset string palette-name \"${PROFILE_NAME}\"\n    PROFILE_KEY=\"/apps/guake/style/background\"\n    gcset string color        \"${BACKGROUND_COLOR}\"\n\n  fi\n}\n\nappy_tilixschemes() {\n  # |\n  # | Applying values to tilix colorschemes\n  # | ===========================================\n\n  if [[ ${TILIX_RES::1} =~ ^(y|Y)$ ]]; then\n    [[ -d \"${HOME}/.config/tilix/schemes\" ]] || mkdir -p \"${HOME}/.config/tilix/schemes\"\n\n    TILIXCOLORS='{\\n\\t\"name\": \"'${PROFILE_NAME}'\",\\n\\t\"comment\": \"Generated by Gogh\",\\n\\t\"foreground-color\": \"'${FOREGROUND_COLOR}'\",\\n\\t\"background-color\":\"'${BACKGROUND_COLOR}'\",\\n\\t\"cursor-background-color\": \"'${CURSOR_COLOR}'\",\\n\\t\"palette\": [\\n\\t\\t\"'${COLOR_01}'\",\\n\\t\\t\"'${COLOR_02}'\",\\n\\t\\t\"'${COLOR_03}'\",\\n\\t\\t\"'${COLOR_04}'\",\\n\\t\\t\"'${COLOR_05}'\",\\n\\t\\t\"'${COLOR_06}'\",\\n\\t\\t\"'${COLOR_07}'\",\\n\\t\\t\"'${COLOR_08}'\",\\n\\t\\t\"'${COLOR_09}'\",\\n\\t\\t\"'${COLOR_10}'\",\\n\\t\\t\"'${COLOR_11}'\",\\n\\t\\t\"'${COLOR_12}'\",\\n\\t\\t\"'${COLOR_13}'\",\\n\\t\\t\"'${COLOR_14}'\",\\n\\t\\t\"'${COLOR_15}'\",\\n\\t\\t\"'${COLOR_16}'\"\\n\\t],\\n\\t\"use-badge-color\": false,\\n\\t\"use-bold-color\": false,\\n\\t\"use-cursor-color\": false,\\n\\t\"use-highlight-color\": false,\\n\\t\"use-theme-colors\": false\\n}'\n    echo -e \"${TILIXCOLORS}\" > \"${scratchdir}/${PROFILE_NAME}.json\"\n\n    # Note: Tilix does not store color scheme name in dconf\n    # so we have to update color palette for the current profile in order to switch to the new theme\n    # but only set the palette on the last loop to avoid a flashing terminal\n    if ((LOOP == OPTLENGTH)); then\n      cp -f  ${scratchdir}/* \"$HOME/.config/tilix/schemes/\"\n      rm -rf \"${scratchdir}\"\n      if [ -z \"${GOGH_NONINTERACTIVE+no}\" ] && [ -z \"${GOGH_USE_NEW_THEME+no}\" ]; then\n              read -r -p \"All done - apply new theme? [y/N] \" -n 1 TILIX_RES\n      elif [ ! -z \"${GOGH_USE_NEW_THEME+yes}\" ]; then\n              TILIX_RES=\"Y\"\n      else\n              TILIX_RES=\"N\"\n      fi\n      if [[ ${TILIX_RES::1} =~ ^(y|Y)$ ]]; then\n        PROFILE_KEY=\"${BASE_DIR}${DEFAULT_SLUG}\"\n        PROFILE_NAME=\"$(${DCONF} read ${PROFILE_KEY}/visible-name | tr -d \\')\"\n        set_theme\n        dset palette \"['${COLOR_01}', '${COLOR_02}', '${COLOR_03}', '${COLOR_04}', '${COLOR_05}', '${COLOR_06}', '${COLOR_07}', '${COLOR_08}', '${COLOR_09}', '${COLOR_10}', '${COLOR_11}', '${COLOR_12}', '${COLOR_13}', '${COLOR_14}', '${COLOR_15}', '${COLOR_16}']\"\n      fi\n    fi\n\n    unset PROFILE_NAME\n    unset PROFILE_SLUG\n    unset TILIXCOLORS\n    exit 0\n  fi\n}\n\napply_xfce4-terminal() {\n    # XFCE4 terminal has no profiles, instead it uses color presets\n    SCHEMEDIR=\"${HOME}/.local/share/xfce4/terminal/colorschemes\"\n    CONFFILE=\"${HOME}/.config/xfce4/terminal/terminalrc\"\n\n    if [[ ! (-w \"${CONFFILE}\") ]]; then\n      if [[ -r \"${XDG_CONFIG_DIRS%%:*}/Terminal/terminalrc\" ]]; then\n        cp \"${XDG_CONFIG_DIRS%%:*}/Terminal/terminalrc\" ${CONFFILE}\n      else\n        [[ -d \"$(dirname \"${CONFFILE}\")\" ]] || mkdir --parents \"$(dirname \"${CONFFILE}\")\"\n        touch \"${CONFFILE}\" || { printserr \"Error: xfce4-terminal config file not writeable: ${CONFFILE}\"; exit 1; }\n      fi\n    fi\n\n    [[ -d \"${SCHEMEDIR}\" ]] || mkdir -p \"${SCHEMEDIR}\"\n\n    F_NAME=${PROFILE_NAME// /-}\n    F_NAME=$(echo ${F_NAME} | tr -d \":()\")\n    F_NAME=$(echo \"${F_NAME}\" | awk '{print tolower($0)}')\n\n    FF_NAME=\"${SCHEMEDIR}/${F_NAME}.theme\"\n\n    touch \"${FF_NAME}\"\n\n    L_COLORCURSOR=\"ColorCursor=${CURSOR_COLOR}\"\n    L_COLORPALETTE=\"ColorPalette=${COLOR_01};${COLOR_02};${COLOR_03};${COLOR_04};${COLOR_05};${COLOR_06};${COLOR_07};${COLOR_08};${COLOR_09};${COLOR_10};${COLOR_11};${COLOR_12};${COLOR_13};${COLOR_14};${COLOR_15};${COLOR_16}\"\n\n    printf '%s\\n' \\\n        \"; Generated by Gogh\" \\\n        \"; https://Gogh-Co.github.io/Gogh\" \\\n        \"[Scheme]\" \\\n        \"Name=${PROFILE_NAME}\" \\\n        \"ColorForeground=${FOREGROUND_COLOR}\" \\\n        \"ColorBackground=${BACKGROUND_COLOR}\" \\\n        \"${L_COLORCURSOR}\" \\\n        \"${L_COLORPALETTE}\" \\\n        \"ColorCursorUseDefault=FALSE\" > ${FF_NAME}\n\n    # apply last theme in queue\n    # xfce4-terminal monitors its rc file and doesn't reference\n    # any of the themes in there. The color settings need to\n    # be written there directly.\n    if ((LOOP == OPTLENGTH)); then\n        if [ -z \"${GOGH_NONINTERACTIVE+no}\" ] && [ -z \"${GOGH_USE_NEW_THEME+no}\" ]; then\n            read -r -p \"All done - apply new theme? [y/N] \" -n 1 XFCE4_APPLY_CURR_THEME\n        elif [ ! -z \"${GOGH_USE_NEW_THEME+yes}\" ]; then\n            XFCE4_APPLY_CURR_THEME=\"Y\"\n        else\n            XFCE4_APPLY_CURR_THEME=\"N\"\n        fi\n        if [[ ${XFCE4_APPLY_CURR_THEME::1} =~ ^(y|Y)$ ]]; then\n            if grep -q \"^ColorPalette=\" \"${CONFFILE}\"; then\n                sed -i -r -e \"s/^ColorPalette=.*/${L_COLORPALETTE}/\" \"${CONFFILE}\"\n            else\n                echo \"${L_COLORPALETTE}\" >> \"${CONFFILE}\"\n            fi\n\n            if grep -q \"^ColorCursor=\" \"${CONFFILE}\"; then\n                sed -i -r -e \"s/^ColorCursor=.*/${L_COLORCURSOR}/\" \"${CONFFILE}\"\n            else\n                echo \"${L_COLORCURSOR}\" >> \"${CONFFILE}\"\n            fi\n\n            if grep -q \"^ColorForeground=\" \"${CONFFILE}\"; then\n                sed -i -r -e \"s/^ColorForeground=.*/ColorForeground=${FOREGROUND_COLOR}/\" \"${CONFFILE}\"\n            else\n                echo \"ColorForeground=${FOREGROUND_COLOR}\" >> \"${CONFFILE}\"\n            fi\n\n            if grep -q \"^ColorBackground=\" \"${CONFFILE}\"; then\n                sed -i -r -e \"s/^ColorBackground=.*/ColorBackground=${BACKGROUND_COLOR}/\" \"${CONFFILE}\"\n            else\n                echo \"ColorBackground=${BACKGROUND_COLOR}\" >> \"${CONFFILE}\"\n            fi\n\n            if grep -q \"^ColorCursorUseDefault=FALSE\" \"${CONFFILE}\"; then\n                true\n            else\n                echo \"ColorCursorUseDefault=FALSE\" >> \"${CONFFILE}\"\n            fi\n        fi\n    fi\n\n    unset SCHEMEDIR\n    unset CONFFILE\n    unset PROFILE_NAME\n    unset F_NAME\n    unset FF_NAME\n    unset L_COLORCURSOR\n    unset L_COLORPALETTE\n    exit 0\n}\n\napply_linux_vt () {\n  local theme_dir\n  if [[ \"${USER}\" = \"root\" ]]; then\n    theme_dir=/usr/local/share/vtrgb-gogh\n  else\n    theme_dir=~/.vtrgb-gogh\n  fi\n  mkdir -p \"${theme_dir}\"\n\n  local file_name=\"${theme_dir}\"/\"${PROFILE_NAME}\"\n  if [[ ! -f \"${file_name}\" ]]; then\n    touch \"${file_name}\"\n          for c in $(seq -s \" \" -w 16); do\n            local color=COLOR_${c}\n            echo \"${!color}\" >> \"${file_name}\"\n          done\n    # apply the theme if setvtrgb exists\n    if command -v setvtrgb >/dev/null &2>&1; then\n            setvtrgb \"${file_name}\"\n            echo setvtrgb \"${file_name}\"\n            gogh_colors # preview\n    fi\n  fi\n\n  if command -v update-alternatives >/dev/null &2>&1 && [[ \"${USER}\" = \"root\" ]]; then\n    update-alternatives --install /etc/vtrgb vtrgb \"${file_name}\" 30\n    update-alternatives --set vtrgb \"${file_name}\"\n    setvtrgb /etc/vtrgb\n  fi\n}\n\napply_termux() {\n\n  updateTermuxConfig \"$CFGFILE\" \"$BACKGROUND_COLOR\" \"background\"\n  updateTermuxConfig \"$CFGFILE\" \"$FOREGROUND_COLOR\" \"foreground\"\n\n  updateTermuxConfig \"$CFGFILE\" \"$CURSOR_COLOR\" \"cursor\"\n  \n  updateTermuxConfig \"$CFGFILE\" \"$COLOR_01\"         \"color0\"\n  updateTermuxConfig \"$CFGFILE\" \"$COLOR_02\"         \"color1\"\n  updateTermuxConfig \"$CFGFILE\" \"$COLOR_03\"         \"color2\"\n  updateTermuxConfig \"$CFGFILE\" \"$COLOR_04\"         \"color3\"\n  updateTermuxConfig \"$CFGFILE\" \"$COLOR_05\"         \"color4\"\n  updateTermuxConfig \"$CFGFILE\" \"$COLOR_06\"         \"color5\"\n  updateTermuxConfig \"$CFGFILE\" \"$COLOR_07\"         \"color6\"\n  updateTermuxConfig \"$CFGFILE\" \"$COLOR_08\"         \"color7\"\n  updateTermuxConfig \"$CFGFILE\" \"$COLOR_09\"         \"color8\"\n\n  updateTermuxConfig \"$CFGFILE\" \"$COLOR_10\"         \"color9\"\n  updateTermuxConfig \"$CFGFILE\" \"$COLOR_11\"         \"color10\"\n  updateTermuxConfig \"$CFGFILE\" \"$COLOR_12\"         \"color11\"\n  updateTermuxConfig \"$CFGFILE\" \"$COLOR_13\"         \"color12\"\n  updateTermuxConfig \"$CFGFILE\" \"$COLOR_14\"         \"color13\"\n  updateTermuxConfig \"$CFGFILE\" \"$COLOR_15\"         \"color14\"\n  updateTermuxConfig \"$CFGFILE\" \"$COLOR_16\"         \"color15\"\n\n  local res\n  if [[ -z \"${GOGH_NONINTERACTIVE+no}\" ]] && [[ -z \"${GOGH_USE_NEW_THEME+no}\" ]]; then\n    read -r -p \"All done - apply new theme? [y/N] \" -n 1\n    res=\"${REPLY}\"\n    unset REPLY\n  elif [[ ! -z \"${GOGH_USE_NEW_THEME+yes}\" ]]; then\n    res=\"Y\"\n  else\n    res=\"N\"\n  fi\n\n  if [[ \"${res}\" =~ ^(y|Y) ]]; then\n    termux-reload-settings || true\n  fi\n}\n\n[[ -n \"${UUIDGEN}\" ]] && PROFILE_SLUG=\"$(uuidgen)\"\n\ncase \"${TERMINAL}\" in\n  pantheon-terminal|io.elementary.t* )\n    if [[ \"${TERMINAL}\" == \"pantheon-terminal\" ]]; then\n      PROFILE_KEY=\"org.pantheon.terminal.settings\"\n    else\n      PROFILE_KEY=\"io.elementary.terminal.settings\"\n    fi\n    apply_elementary\n    ;;\n\n  iTerm.app )\n    apply_darwin\n    ;;\n\n  mintty )\n    apply_cygwin\n    ;;\n\n  guake )\n    if ${GS} list-children guake &>/dev/null || [[ -n \"$(${DCONF} list /apps/guake/style/)\" ]]; then\n      apply_guake\n    else\n      apply_guake legacy\n    fi\n    ;;\n\n  gnome-terminal* )\n    if [[ -n \"$(${DCONF} list /org/gnome/terminal/)\" ]]; then\n      BASE_DIR=\"/org/gnome/terminal/legacy/profiles:/:\"\n      PROFILE_LIST_KEY=\"${BASE_DIR%:}list\"\n      PROFILE_SLUG=\"${PROFILE_SLUG}\"\n\n      # Note -- ${BASE_DIR%s} is a workaround to avoid doing additional conditional testing for existing profiles\n      # if terminal is set to gnome-terminal\n      : ${DEFAULT_SLUG:=\"$(${DCONF} read ${BASE_DIR%:}default | tr -d \\')\"}\n\n      LEFT_WRAPPER=\"[\"\n      RIGHT_WRAPPER=\"]\"\n      PALETTE_DELIM=\"', '\"\n\n      apply_gtk\n    else\n      BASE_DIR=\"/apps/gnome-terminal/profiles/\"\n      PROFILE_LIST_KEY=\"${BASE_DIR/profiles/global}profile_list\"\n      LEGACY_BOLD=true\n\n      : ${DEFAULT_SLUG:=\"$(${GCONF} read ${BASE_DIR}default_profile)\"}\n\n      apply_gtk legacy\n    fi\n    ;;\n\n  mate-terminal )\n    BASE_DIR=\"/org/mate/terminal/profiles/\"\n    PROFILE_LIST_KEY=\"${BASE_DIR/profiles/global}profile-list\"\n    LEGACY_BOLD=true\n\n    : ${DEFAULT_SLUG:=\"$(${DCONF} read ${BASE_DIR/profiles/global}default-profile | tr -d \\')\"}\n\n    PALETTE_DELIM=\":\"\n\n    apply_gtk\n    ;;\n\n  tilix )\n    BASE_DIR=\"/com/gexperts/Tilix/profiles/\"\n    PROFILE_LIST_KEY=\"${BASE_DIR}list\"\n\n    : ${DEFAULT_SLUG:=\"$(${DCONF} read ${BASE_DIR}default | tr -d \\')\"}\n\n    LEFT_WRAPPER=\"[\"\n    RIGHT_WRAPPER=\"]\"\n    PALETTE_DELIM=\"', '\"\n\n    appy_tilixschemes\n    apply_gtk\n    ;;\n\n  xfce4-terminal )\n    apply_xfce4-terminal\n    ;;\n\n  alacritty )\n    apply_alacritty\n    ;;\n\n  terminator )\n    apply_terminator\n  ;;\n\n  foot )\n    apply_foot\n    ;;\n\n  kitty )\n    apply_kitty\n    ;;\n\n  kmscon )\n    apply_kmscon\n    ;;\n\n  konsole )\n    apply_konsole\n    ;;\n\n  linux )\n    apply_linux_vt\n    ;;\n\n  termux )\n    apply_termux\n    ;;\n\n  * )\n    printserr \"Unsupported terminal!\"                         \\\n    \"\"                                                        \\\n    \"Supported terminals:\"                                    \\\n    \"   alacritty\"                                            \\\n    \"   mintty (and deriviates)\"                              \\\n    \"   guake\"                                                \\\n    \"   iTerm.app (iTerm2)\"                                   \\\n    \"   pantheon-terminal\"                                    \\\n    \"   io.elementary.t* (elementary terminal)\"               \\\n    \"   mate-terminal\"                                        \\\n    \"   gnome-terminal\"                                       \\\n    \"   tilix\"                                                \\\n    \"   xfce4-terminal\"                                       \\\n    \"   foot\"                                                 \\\n    \"   kitty\"                                                \\\n    \"   kmscon\"                                               \\\n    \"   konsole\"                                              \\\n    \"   linux (linux vt)\"                                     \\\n    \"   terminator\"                                           \\\n    \"   termux\"                                               \\\n    \"\"                                                        \\\n    \"If you believe you have received this message in error,\" \\\n    \"try manually setting env \\`TERMINAL' with the value above.\" \\\n    \"hint: ps -h -o comm -p \\$PPID\"\n    exit 1\n    ;;\n\nesac\n\nunset PROFILE_NAME\nunset PROFILE_SLUG\nunset DEFAULT_SLUG\n"
        },
        {
          "name": "apply-terminator.py",
          "type": "blob",
          "size": 3.0205078125,
          "content": "import json\nimport os\nimport sys\nimport shutil\nimport datetime\nimport re\nimport unicodedata\n\nfrom configobj import ConfigObj\n\n\ndef printerr(*args, **kwargs):\n    print(*args, file=sys.stderr, **kwargs)\n\n\ndef printout(*args, **kwargs):\n    if not \"GOGH_NONINTERACTIVE\" in os.environ:\n        print(*args, **kwargs)\n\n\ndef main(gogh_conf_theme):\n    terminator_conf_file_path = get_terminator_conf_path()\n    profile_options = choose_profile()\n    update_terminator_conf(terminator_conf_file_path, gogh_conf_theme, profile_options)\n\n\ndef get_terminator_conf_path():\n    try:\n        configdir = os.environ['XDG_CONFIG_HOME']\n    except KeyError:\n        configdir = os.path.join(os.path.expanduser('~'), '.config')\n    return(os.path.join(configdir, 'terminator/config'))\n\n\ndef update_terminator_conf(terminator_conf_file_path,gogh_conf_theme,profile_options):\n    js = json.loads(gogh_conf_theme)\n\n    config = ConfigObj(terminator_conf_file_path)\n    backup_conf(terminator_conf_file_path)\n\n    if profile_options[\"copy_default_config\"] == 'yes':\n        config['profiles'][profile_options[\"profile\"]] = config['profiles']['default'].copy()\n    elif profile_options[\"copy_default_config\"] == 'no':\n        config['profiles'][profile_options[\"profile\"]] = {}\n\n    use_theme_colors = False\n    config['profiles'][profile_options[\"profile\"]]['foreground_color'] = js['colors']['primary']['foreground']\n    config['profiles'][profile_options[\"profile\"]]['background_color'] = js['colors']['primary']['background']\n    config['profiles'][profile_options[\"profile\"]]['palette'] = js['colors']['pallete']\n    config.write()\n    printout('')\n    printout('We‚Äôve saved your profile! Close and open your terminal to see the changes!')\n\n\ndef choose_profile():\n    profile_answer = ''\n    copy_default_config_answer = ''\n\n    if not \"GOGH_NONINTERACTIVE\" in os.environ:\n        profile_answer = strip_accents(input(\"Enter profile to update/create [default]: \")).strip()\n    if profile_answer.lower() in ['', 'default']:\n        profile_answer = 'default'\n    else:\n        while True:\n            copy_default_config_answer = input(\"Do you want to copy your config from default profile? [Y]: (Y/N) \").strip()\n            if copy_default_config_answer.lower() in ['', 'yes', 'y']:\n                copy_default_config_answer = 'yes'\n                break\n            elif copy_default_config_answer.lower() in ['no', 'n']:\n                copy_default_config_answer = 'no'\n                break\n            else:\n                printout(\"Ops... Type 'Y' or 'N'.\")\n    return {\"profile\": profile_answer, \"copy_default_config\": copy_default_config_answer}\n\n\ndef backup_conf(terminator_conf_file_path):\n    now_str = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    backup_path = f'{terminator_conf_file_path}.{now_str}'\n    shutil.copyfile(terminator_conf_file_path, backup_path)\n    printout('')\n    printout('Backup created at '+ backup_path)\n\ndef strip_accents(s):\n   return ''.join(c for c in unicodedata.normalize('NFD', s)\n                  if unicodedata.category(c) != 'Mn')\n\nmain(sys.argv[1])\n"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "devbox.json",
          "type": "blob",
          "size": 0.30078125,
          "content": "{\n  \"$schema\": \"https://raw.githubusercontent.com/jetpack-io/devbox/0.10.1/.schema/devbox.schema.json\",\n  \"packages\": [\n    \"python@3.12\"\n  ],\n  \"shell\": {\n    \"init_hook\": \". $VENV_DIR/bin/activate\",\n    \"scripts\": {\n      \"test\": [\n        \"echo \\\"Error: no test specified\\\" && exit 1\"\n      ]\n    }\n  }\n}\n"
        },
        {
          "name": "gogh.sh",
          "type": "blob",
          "size": 18.189453125,
          "content": "#!/usr/bin/env bash\n\n# Variables to avoid repeated calls to tput\nfor n in {0..15}; do\n  declare C$n=$(tput setaf $n)\ndone\nCR=$(tput sgr0)\nCS0=$(tput sgr 0)\n\n# Define traps and trapfunctions early in case any errors before script exits\nGLOBAL_VAR_CLEANUP(){\n  echo \"Cleanup up...\"\n  [[ -n \"$(command -v TILIX_TMP_CLEANUP)\" ]] && TILIX_TMP_CLEANUP\n  [[ -n \"$(command -v ALACRITTY_APPLY_TMP_CLEANUP)\" ]] && ALACRITTY_APPLY_TMP_CLEANUP\n  [[ -n \"$(command -v TERMINATOR_APPLY_TMP_CLEANUP)\" ]] && TERMINATOR_APPLY_TMP_CLEANUP\n  [[ -n \"$(command -v APPLY_SCRIPT_TMP_CLEANUP)\" ]] && APPLY_SCRIPT_TMP_CLEANUP\n  unset PROFILE_NAME\n  unset PROFILE_SLUG\n  unset TILIX_RES\n  unset TERMINAL\n  echo \"Done\"\n}\n\ntrap 'GLOBAL_VAR_CLEANUP; trap - EXIT' EXIT HUP INT QUIT PIPE TERM\n\n# TO-DO: Investigate dynamically building this array e.g.\n# curl -s https://github.com/Gogh-Co/Gogh/tree/master/themes | grep -o \"title=.*\\.sh\\\" \" | awk -F '=' '{print $2}'\ndeclare -a THEMES=(\n  '3024-day.sh'\n  '3024-night.sh'\n  'aci.sh'\n  'aco.sh'\n  'adventure-time.sh'\n  'afterglow.sh'\n  'alien-blood.sh'\n  'apprentice.sh'\n  'argonaut.sh'\n  'arthur.sh'\n  'astrodark.sh'\n  'atelier-cave.sh'\n  'atelier-dune.sh'\n  'atelier-estuary.sh'\n  'atelier-forest.sh'\n  'atelier-heath.sh'\n  'atelier-lakeside.sh'\n  'atelier-plateau.sh'\n  'atelier-savanna.sh'\n  'atelier-seaside.sh'\n  'atelier-sulphurpool.sh'\n  'atom.sh'\n  'aura.sh'\n  'ayaka.sh'\n  'ayu-dark.sh'\n  'ayu-light.sh'\n  'ayu-mirage.sh'\n  'azu.sh'\n  'base2tone-cave.sh'\n  'base2tone-desert.sh'\n  'base2tone-drawbridge.sh'\n  'base2tone-earth.sh'\n  'base2tone-evening.sh'\n  'base2tone-field.sh'\n  'base2tone-forest.sh'\n  'base2tone-garden.sh'\n  'base2tone-heath.sh'\n  'base2tone-lake.sh'\n  'base2tone-lavender.sh'\n  'base2tone-mall.sh'\n  'base2tone-meadow.sh'\n  'base2tone-morning.sh'\n  'base2tone-motel.sh'\n  'base2tone-pool.sh'\n  'base2tone-porch.sh'\n  'base2tone-sea.sh'\n  'base2tone-space.sh'\n  'base2tone-suburb.sh'\n  'base4tone-classic-a.sh'\n  'base4tone-classic-b.sh'\n  'base4tone-classic-c.sh'\n  'base4tone-classic-d.sh'\n  'base4tone-classic-e.sh'\n  'base4tone-classic-f.sh'\n  'base4tone-classic-i.sh'\n  'base4tone-classic-l.sh'\n  'base4tone-classic-o.sh'\n  'base4tone-classic-p.sh'\n  'base4tone-classic-q.sh'\n  'base4tone-classic-r.sh'\n  'base4tone-classic-s.sh'\n  'base4tone-classic-t.sh'\n  'base4tone-classic-u.sh'\n  'base4tone-classic-w.sh'\n  'base4tone-modern-c.sh'\n  'base4tone-modern-n.sh'\n  'base4tone-modern-w.sh'\n  'belafonte-day.sh'\n  'belafonte-night.sh'\n  'bim.sh'\n  'birds-of-paradise.sh'\n  'blazer.sh'\n  'blue-dolphin.sh'\n  'bluloco-light.sh'\n  'bluloco-zsh-light.sh'\n  'borland.sh'\n  'breadog.sh'\n  'breath-darker.sh'\n  'breath-light.sh'\n  'breath-silverfox.sh'\n  'breath.sh'\n  'breeze.sh'\n  'broadcast.sh'\n  'brogrammer.sh'\n  'butrin.sh'\n  'c64.sh'\n  'cai.sh'\n  'campbell.sh'\n  'catppuccin-frappe.sh'\n  'catppuccin-latte.sh'\n  'catppuccin-macchiato.sh'\n  'catppuccin-mocha.sh'\n  'chalk.sh'\n  'chalkboard.sh'\n  'chameleon.sh'\n  'ciapre.sh'\n  'city-lights.sh'\n  'clone-of-ubuntu.sh'\n  'clrs.sh'\n  'cobalt-2.sh'\n  'cobalt-neon.sh'\n  'colorcli.sh'\n  'crayon-pony-fish.sh'\n  'dark-pastel.sh'\n  'darkside.sh'\n  'dehydration.sh'\n  'desert.sh'\n  'dimmed-monokai.sh'\n  'dissonance.sh'\n  'doom-one.sh'\n  'dracula.sh'\n  'earthsong.sh'\n  'elemental.sh'\n  'elementary.sh'\n  'elic.sh'\n  'elio.sh'\n  'espresso-libre.sh'\n  'espresso.sh'\n  'everblush.sh'\n  'everforest-dark-hard.sh'\n  'everforest-dark-medium.sh'\n  'everforest-dark-soft.sh'\n  'everforest-light-hard.sh'\n  'everforest-light-medium.sh'\n  'everforest-light-soft.sh'\n  'fairy-floss-dark.sh'\n  'fairy-floss.sh'\n  'fishtank.sh'\n  'flat-remix.sh'\n  'flat.sh'\n  'flatland.sh'\n  'flexoki-dark.sh'\n  'flexoki-light.sh'\n  'foxnightly.sh'\n  'freya.sh'\n  'frontend-delight.sh'\n  'frontend-fun-forrest.sh'\n  'frontend-galaxy.sh'\n  'geohot.sh'\n  'github-dark.sh'\n  'github-light.sh'\n  'gogh.sh'\n  'gooey.sh'\n  'google-dark.sh'\n  'google-light.sh'\n  'gotham.sh'\n  'grape.sh'\n  'grass.sh'\n  'gruvbox-dark.sh'\n  'gruvbox-material-dark.sh'\n  'gruvbox-material-light.sh'\n  'gruvbox.sh'\n  'hardcore.sh'\n  'harper.sh'\n  'hemisu-dark.sh'\n  'hemisu-light.sh'\n  'highway.sh'\n  'hipster-green.sh'\n  'homebrew-light.sh'\n  'homebrew-ocean.sh'\n  'homebrew.sh'\n  'horizon-bright.sh'\n  'horizon-dark.sh'\n  'hurtado.sh'\n  'hybrid.sh'\n  'ibm-3270-high-contrast.sh'\n  'ibm3270.sh'\n  'ic-green-ppl.sh'\n  'ic-orange-ppl.sh'\n  'iceberg.sh'\n  'idle-toes.sh'\n  'ir-black.sh'\n  'jackie-brown.sh'\n  'japanesque.sh'\n  'jellybeans.sh'\n  'jup.sh'\n  'kanagawa-dragon.sh'\n  'kanagawa-lotus.sh'\n  'kanagawa-wave.sh'\n  'kibble.sh'\n  'kokuban.sh'\n  'laserwave.sh'\n  'later-this-evening.sh'\n  'lavandula.sh'\n  'liquid-carbon-transparent.sh'\n  'liquid-carbon.sh'\n  'lunaria-dark.sh'\n  'lunaria-eclipse.sh'\n  'lunaria-light.sh'\n  'maia.sh'\n  'man-page.sh'\n  'mar.sh'\n  'material.sh'\n  'mathias.sh'\n  'medallion.sh'\n  'minimalist-dark.sh'\n  'miramare.sh'\n  'misterioso.sh'\n  'modus-operandi-tinted.sh'\n  'modus-operandi.sh'\n  'modus-vivendi-tinted.sh'\n  'modus-vivendi.sh'\n  'molokai.sh'\n  'mona-lisa.sh'\n  'mono-amber.sh'\n  'mono-cyan.sh'\n  'mono-green.sh'\n  'mono-red.sh'\n  'mono-white.sh'\n  'mono-yellow.sh'\n  'monokai-dark.sh'\n  'monokai-pro-ristretto.sh'\n  'monokai-pro.sh'\n  'monokai-soda.sh'\n  'moonfly.sh'\n  'morada.sh'\n  'n0tch2k.sh'\n  'nanosecond.sh'\n  'neon-night.sh'\n  'neopolitan.sh'\n  'nep.sh'\n  'neutron.sh'\n  'night-owl.sh'\n  'nightfly.sh'\n  'nightlion-v1.sh'\n  'nightlion-v2.sh'\n  'nighty.sh'\n  'nord-light.sh'\n  'nord.sh'\n  'novel.sh'\n  'obsidian.sh'\n  'ocean-dark.sh'\n  'oceanic-next.sh'\n  'ollie.sh'\n  'omni.sh'\n  'one-dark.sh'\n  'one-half-black.sh'\n  'one-light.sh'\n  'oxocarbon-dark.sh'\n  'palenight.sh'\n  'pali.sh'\n  'panda.sh'\n  'paper.sh'\n  'papercolor-dark.sh'\n  'papercolor-light.sh'\n  'paraiso-dark.sh'\n  'paul-millr.sh'\n  'pencil-dark.sh'\n  'pencil-light.sh'\n  'peppermint.sh'\n  'pixiefloss.sh'\n  'pnevma.sh'\n  'powershell.sh'\n  'predawn.sh'\n  'pro.sh'\n  'purple-people-eater.sh'\n  'quiet.sh'\n  'red-alert.sh'\n  'red-sands.sh'\n  'relaxed.sh'\n  'rippedcasts.sh'\n  'rose-pine-dawn.sh'\n  'rose-pine-moon.sh'\n  'rose-pine.sh'\n  'royal.sh'\n  'sat.sh'\n  'sea-shells.sh'\n  'seafoam-pastel.sh'\n  'selenized-black.sh'\n  'selenized-dark.sh'\n  'selenized-light.sh'\n  'selenized-white.sh'\n  'seoul256-light.sh'\n  'seoul256.sh'\n  'seti.sh'\n  'shaman.sh'\n  'shel.sh'\n  'slate.sh'\n  'smyck.sh'\n  'snazzy.sh'\n  'soft-server.sh'\n  'solarized-darcula.sh'\n  'solarized-dark-higher-contrast.sh'\n  'solarized-dark.sh'\n  'solarized-light.sh'\n  'sonokai.sh'\n  'spacedust.sh'\n  'spacegray-eighties-dull.sh'\n  'spacegray-eighties.sh'\n  'spacegray.sh'\n  'sparky.sh'\n  'spring.sh'\n  'square.sh'\n  'srcery.sh'\n  'summer-pop.sh'\n  'sundried.sh'\n  'sweet-eliverlara.sh'\n  'sweet-terminal.sh'\n  'symphonic.sh'\n  'synthwave-alpha.sh'\n  'synthwave.sh'\n  'teerb.sh'\n  'tempus-autumn.sh'\n  'tempus-classic.sh'\n  'tempus-dawn.sh'\n  'tempus-day.sh'\n  'tempus-dusk.sh'\n  'tempus-fugit.sh'\n  'tempus-future.sh'\n  'tempus-night.sh'\n  'tempus-past.sh'\n  'tempus-rift.sh'\n  'tempus-spring.sh'\n  'tempus-summer.sh'\n  'tempus-tempest.sh'\n  'tempus-totus.sh'\n  'tempus-warp.sh'\n  'tempus-winter.sh'\n  'tender.sh'\n  'terminal-basic.sh'\n  'terminix-dark.sh'\n  'thayer-bright.sh'\n  'tin.sh'\n  'tokyo-night-light.sh'\n  'tokyo-night-storm.sh'\n  'tokyo-night.sh'\n  'tomorrow-night-blue.sh'\n  'tomorrow-night-bright.sh'\n  'tomorrow-night-eighties.sh'\n  'tomorrow-night.sh'\n  'tomorrow.sh'\n  'toy-chest.sh'\n  'treehouse.sh'\n  'twilight.sh'\n  'ura.sh'\n  'urple.sh'\n  'vag.sh'\n  'vaughn.sh'\n  'vibrant-ink.sh'\n  'vs-code-dark.sh'\n  'vs-code-light.sh'\n  'warm-neon.sh'\n  'website.sh'\n  'wez.sh'\n  'wild-cherry.sh'\n  'wombat.sh'\n  'wryan.sh'\n  'wzoreck.sh'\n  'zenburn.sh'\n)\n\n# Allow developer to change url to forked url for easier testing\nBASE_URL=${BASE_URL:-\"https://raw.githubusercontent.com/Gogh-Co/Gogh/master\"}\nPROGRESS_URL=\"https://raw.githubusercontent.com/phenonymous/shell-progressbar/1.0/progress.sh\"\n\nSCRIPT_PATH=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n\ncapitalize() {\n  local ARGUMENT=$1\n  local RES=\"\"\n  local STR=\"\"\n  local RES_NO_TRAIL_SPACE=\"\"\n\n  for CHAR in $ARGUMENT; do\n    STR=$(echo \"${CHAR:0:1}\" | tr \"[:lower:]\" \"[:upper:]\")\"${CHAR:1} \"\n    RES=\"${RES}${STR}\"\n    RES_NO_TRAIL_SPACE=\"$(echo -e \"${RES}\" | sed -e 's/[[:space:]]*$//')\"\n  done\n\n  echo \"${RES_NO_TRAIL_SPACE}\"\n}\n\n\n# Used to get required python scripts, either from the internet or from local directory\nif [[ ! -f \"${SCRIPT_PATH}/apply-alacritty.py\" ]]; then\n  ALACRITTY_APPLY_TMP_CLEANUP() {\n    rm -rf \"${GOGH_ALACRITTY_SCRIPT}\"\n    unset GOGH_ALACRITTY_SCRIPT\n  }\n  export GOGH_ALACRITTY_SCRIPT=\"$(mktemp -t gogh.alacritty.XXXXXX)\"\n  if [[ \"$(uname)\" = \"Darwin\" ]]; then\n    # OSX ships with curl and ancient bash\n    curl -so \"${GOGH_ALACRITTY_SCRIPT}\" \"${BASE_URL}/apply-alacritty.py\"\n  else\n    # Linux ships with wget\n    wget -qO \"${GOGH_ALACRITTY_SCRIPT}\" \"${BASE_URL}/apply-alacritty.py\"\n  fi\nfi\n\n\n# Used to get required python scripts, either from the internet or from local directory\nif [[ ! -e \"${SCRIPT_PATH}/apply-terminator.py\" ]]; then\n  TERMINATOR_APPLY_TMP_CLEANUP() {\n    rm -rf \"${GOGH_TERMINATOR_SCRIPT}\"\n    unset GOGH_TERMINATOR_SCRIPT\n  }\n  export GOGH_TERMINATOR_SCRIPT=\"$(mktemp -t gogh.terminator.XXXXXX)\"\n  if [[ \"$(uname)\" = \"Darwin\" ]]; then\n    # OSX ships with curl and ancient bash\n    curl -so \"${GOGH_TERMINATOR_SCRIPT}\" \"${BASE_URL}/apply-terminator.py\"\n  else\n    # Linux ships with wget\n    wget -qO \"${GOGH_TERMINATOR_SCRIPT}\" \"${BASE_URL}/apply-terminator.py\"\n  fi\nfi\n\n\n# Used to get required shell scripts, either from the internet or from local directory\nif [[ ! -e \"${SCRIPT_PATH}/apply-colors.sh\" ]]; then\n  APPLY_SCRIPT_TMP_CLEANUP() {\n    rm -rf \"${GOGH_APPLY_SCRIPT}\"\n    unset GOGH_APPLY_SCRIPT\n  }\n  export GOGH_APPLY_SCRIPT=\"$(mktemp -t gogh.apply.XXXXXX)\"\n  if [[ \"$(uname)\" = \"Darwin\" ]]; then\n    # OSX ships with curl and ancient bash\n    curl -so \"${GOGH_APPLY_SCRIPT}\" \"${BASE_URL}/apply-colors.sh\"\n  else\n    # Linux ships with wget\n    wget -qO \"${GOGH_APPLY_SCRIPT}\" \"${BASE_URL}/apply-colors.sh\"\n  fi\nfi\n\n\nset_gogh() {\n  string=$1\n  string_r=\"${string%???}\"\n  string_s=${string_r//\\./_}\n  result=$(capitalize \"${string_s}\")\n  url=\"${BASE_URL}/installs/$1\"\n\n  export {PROFILE_NAME,PROFILE_SLUG}=\"$result\"\n\n  if [[ -e \"${SCRIPT_PATH}/installs/$1\" ]]; then\n    bash \"${SCRIPT_PATH}/installs/$1\"\n  else\n    if [[ \"$(uname)\" = \"Darwin\" ]]; then\n      # OSX ships with curl\n      bash -c \"$(curl -sLo- \"${url}\")\"\n    else\n      # Linux ships with wget\n      bash -c \"$(wget -qO- \"${url}\")\"\n    fi\n  fi\n}\n\n\nremove_file_extension (){\n  echo \"${1%.*}\"\n}\n\n\n### Get length of an array\nARRAYLENGTH=${#THEMES[@]}\n\n\n# |\n# | ::::::: Print logo\n# |\ntput clear\nif [[ ${COLUMNS:-$(tput cols)} -ge 80 ]]; then\n  gogh_str=\"\"\n  gogh_str+=\"                                                                                \\n\"\n  gogh_str+=\"                    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà                    ‚ñà‚ñà‚ñà‚ñà‚ñà                          \\n\"\n  gogh_str+=\"                   ‚ñà‚ñà‚ñà     ‚ñà‚ñà‚ñà                    ‚ñà‚ñà‚ñà                           \\n\"\n  gogh_str+=\"                  ‚ñà‚ñà‚ñà           ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà                       \\n\"\n  gogh_str+=\"                  ‚ñà‚ñà‚ñà          ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà                      \\n\"\n  gogh_str+=\"                  ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà                      \\n\"\n  gogh_str+=\"                   ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà                      \\n\"\n  gogh_str+=\"                    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà                     \\n\"\n  gogh_str+=\"    ${C0}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C1}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C2}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C3}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C4}‚ñà‚ñà‚ñà‚ñà‚ñà${CS0}‚ñà‚ñà‚ñà${C4}‚ñà${C5}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C6}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C7}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    \\n\"\n  gogh_str+=\"    ${C0}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C1}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C2}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C3}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${CS0}‚ñà‚ñà‚ñà${C4}‚ñà‚ñà${CS0}‚ñà‚ñà‚ñà${C4}‚ñà${C5}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C6}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C7}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    \\n\"\n  gogh_str+=\"    ${C0}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C1}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C2}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C3}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C4}‚ñà${CR}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C4}‚ñà‚ñà${C5}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C6}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C7}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    \\n\"\n  gogh_str+=\"    ${C8}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C9}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C10}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C11}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C12}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C13}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C14}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C15}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${CS0}    \\n\"\n  gogh_str+=\"    ${C8}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C9}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C10}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C11}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C12}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C13}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C14}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C15}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${CS0}    \\n\"\n  gogh_str+=\"    ${C8}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C9}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C10}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C11}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C12}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C13}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C14}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${C15}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${CS0}    \\n\"\n  gogh_str+=\"                                                                                \"\n\n\n  printf '%b\\n' \"${gogh_str}\"\n  sleep 2.5\nelse\n  echo -e \"\\nGogh\\n\"\n  for c in C{0..15}; do\n    echo -n \"${!c}‚ñà‚ñà‚ñà‚ñà‚ñà${CR}\"\n    [[ $c == C7 ]] && echo # new line\n  done\n  echo\nfi\n\n\n# |\n# | ::::::: Print Themes\n# |\necho -e \"\\nThemes:\\n\"\n\n# Column display of available themes\n# Note: /usr/bin/column uses tabs and does not support ANSI codes yet (merged but not released)\nMAXL=$(( $(printf \"%s\\n\" \"${THEMES[@]}\" | wc -L) - 3 )) # Biggest theme name without the extension\nNCOLS=$(( ${COLUMNS:-$(tput cols)} / (10+MAXL) ))       # number of columns, 10 is the length of '  ( xxx ) '\nNROWS=$(( (ARRAYLENGTH-1)/NCOLS + 1 ))                  # number of rows\nrow=0\n\nwhile ((row < NROWS)); do\n  col=0\n  while ((col < NCOLS)); do\n    NUM=$((col*NROWS+row))\n    NAME=\"${THEMES[$NUM]}\"\n    [[ -n $NAME ]] && printf \"  ( ${C4}%3d${CR} ) %-${MAXL}s\" $((NUM+1)) \"$NAME\"\n    ((col++))\n  done\n  echo\n  ((row++))\ndone | sed -e 's/\\.\\S*//g' -e 's/-/ /g' -e 's/\\<\\w\\w/\\u&/g' # Remove .sh, replace - with space, and capitalize\n\necho -e \"  (${C4} ALL ${CR}) All themes\"\n\n# |\n# | ::::::: Select Option\n# |\necho -e \"\\nUsage : Enter Desired Themes Numbers (${C4}OPTIONS${CR}) Separated By A Blank Space\"\necho -e \"        Press ${C4}ENTER${CR} without options to Exit\\n\"\nread -r -p 'Enter OPTION(S) : ' -a OPTION\n\n# Automagically generate options if user opts for all themes\n[[ \"$OPTION\" == ALL ]] && OPTION=($(seq -s \" \" $ARRAYLENGTH))\n\n# |\n# | ::::::: Get terminal\n# |\nif [[ -z \"${TERMINAL:-}\" ]]; then\n  # |\n  # | Check for the terminal name (depening on os)\n  # | ===========================================\n  OS=\"$(uname)\"\n  if [[ \"$OS\" = \"Darwin\" ]]; then\n    TERMINAL=$TERM_PROGRAM\n  elif [[ \"${OS#CYGWIN}\" != \"${OS}\" ]]; then\n    TERMINAL=\"mintty\"\n  elif [[ \"$TERM\" = \"xterm-kitty\" ]]; then\n    TERMINAL=\"kitty\"\n  elif [[ \"${TERM}\" = \"linux\" ]]; then\n    TERMINAL=\"linux\"\n  elif [[ \"${HOME}\" = *com.termux* ]]; then\n    TERMINAL=\"termux\"\n  else\n    # |\n    # | Depending on how the script was invoked, we need\n    # | to loop until pid is no longer a subshell\n    # | ===========================================\n    pid=\"$$\"\n    TERMINAL=\"$(ps -h -o comm -p $pid)\"\n    while [[ \"${TERMINAL:(-2)}\" == \"sh\" ]]; do\n      pid=\"$(ps -h -o ppid -p $pid)\"\n      TERMINAL=\"$(ps -h -o comm -p $pid)\"\n    done\n  fi\nfi\n\n\n# |\n# | ::::::: Fancy progressbar for lengthy operations\n# |\nif [[ ${#OPTION[@]} -gt 5 ]]; then\n  # Note: We use eval here because we want the functions to be available in this script\n  if [[ \"$(uname)\" = \"Darwin\" ]]; then\n    eval \"$(curl -so- ${PROGRESS_URL})\" 2> /dev/null\n  else\n    eval \"$(wget -qO- ${PROGRESS_URL})\"  2> /dev/null\n  fi\nfi\n\n\n# |\n# | Tilix supports fg/bg in color schemes - ask wether user wants to go that route\n# | This is to avoid creating multiple profiles just for colors\n# | ===========================================\nif [[ \"$TERMINAL\" = \"tilix\" ]] && [[ ${#OPTION[@]} -gt 0 ]]; then\n  echo\n  read -r -p \"Tilix detected - use color schemes instead of profiles? [y/N] \" -n 1 TILIX_RES\n  echo\n\n  # |\n  # | When selecting multiple themes and user opts for color schemes, we save all themes\n  # | in a tmpdir and copy the files once all themes has been processed.. If a user\n  # | desides to abort before all themes has been processed this section will cleanup the tmpdir\n  # | =======================================\n  if [[ ${TILIX_RES::1} =~ ^(y|Y)$ ]]; then\n    TILIX_TMP_CLEANUP() {\n      echo\n      echo \"Cleaning up\"\n      rm -rf \"$scratchdir\"\n      unset LOOP OPTLENGTH scratchdir\n      echo \"Done...\"\n      exit 0\n    }\n\n    scratchdir=$(mktemp -d -t gogh.tilix.XXXXXXXX)\n    export scratchdir\n  fi\nfi\n\n\n# |\n# | ::::::: Export one-off variables\n# |\n[[ -n \"${TILIX_RES:-}\" ]] && export TILIX_RES\nexport TERMINAL LOOP OPTLENGTH=${#OPTION[@]}\n\n\n# |\n# | ::::::: Apply Theme\n# |\n\ndeclare color_dot_str\nfor c in C{0..15}; do\n  color_dot_str+=\"${!c}‚Ä¢${CR}\"\n  [[ $c == C7 ]] && color_dot_str+=\" \"\ndone\n\n# Note:\n# Constants with a leading 0 are interpreted as octal numbers\n# Hence option 08 and 09 will not work\n# Solution is to remove the leading 0 from the parsed options\ncommand -v bar::start > /dev/null && bar::start\nfor OP in \"${OPTION[@]#0}\"; do\n  # See appy_tilixschemes in apply-colors.sh for usage of LOOP\n  LOOP=$((${LOOP:-0}+1))\n\n  command -v bar::status_changed > /dev/null && bar::status_changed $LOOP ${#OPTION[@]}\n\n  if [[ OP -le ARRAYLENGTH && OP -gt 0 ]]; then\n\n    FILENAME=$(remove_file_extension \"${THEMES[((OP-1))]}\")\n    FILENAME_SPACE=\"${FILENAME//-/ }\"\n    echo -e \"\\nTheme: $(capitalize \"${FILENAME_SPACE}\")\"\n    echo \"${color_dot_str}\"\n    echo\n\n    SET_THEME=\"${THEMES[((OP-1))]}\"\n    set_gogh \"${SET_THEME}\"\n  else\n    echo -e \"${C1} ~ INVALID OPTION! ~${CR}\"\n    exit 1\n  fi\ndone\n# If you skip || : and the command does not exist the script will exit with code 1\n# this will always return exit code 0 if we got this far\ncommand -v bar::stop > /dev/null && bar::stop || :\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "installs",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.060546875,
          "content": "ruamel.yaml==0.17.21\nunidecode\npyyaml\ntomli\ntomli_w\nconfigobj\n"
        },
        {
          "name": "themes",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}