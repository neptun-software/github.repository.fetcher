{
  "metadata": {
    "timestamp": 1736568881171,
    "page": 83,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "docker-library/official-images",
      "stars": 6553,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bin",
          "type": "tree",
          "content": null
        },
        {
          "name": ".buildkit-build-contexts.sh",
          "type": "blob",
          "size": 1.7783203125,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\n# given a list of image references, returns an appropriate list of \"ref=docker-image://foo@sha256:xxx\" for the current architecture\n\ndir=\"$(dirname \"$BASH_SOURCE\")\"\n\n[ -n \"$BASHBREW_ARCH\" ]\narchNamespace=\n\ndie() {\n\techo >&2 \"error: $*\"\n\texit 1\n}\n\nfor img; do\n\tlookup=\n\tcase \"$img\" in\n\t\t*@sha256:*)\n\t\t\tlookup=\"$img\"\n\t\t\t;;\n\n\t\t*/*)\n\t\t\tfile=\"$(\"$dir/.external-pins/file.sh\" \"$img\")\" || die \"'$img': failed to look up external pin file\"\n\t\t\tdigest=\"$(< \"$file\")\" || die \"'$img': failed to read external pin file ('$file')\"\n\t\t\t[ -n \"$digest\" ] || die \"'$img': empty external pin file ('$file')\"\n\t\t\tlookup=\"${img%@*}@$digest\" # img should never have an @ in it here, but just in case\n\t\t\t;;\n\n\t\t*)\n\t\t\t[ -n \"$BASHBREW_ARCH_NAMESPACES\" ] || die 'missing BASHBREW_ARCH_NAMESPACES'\n\t\t\tarchNamespace=\"${archNamespace:-$(bashbrew cat --format '{{ archNamespace arch }}' \"$dir/library/hello-world\")}\"\n\t\t\t[ -n \"$archNamespace\" ] || die \"failed to get arch namespace for '$BASHBREW_ARCH'\"\n\t\t\tlookup=\"$archNamespace/$img\"\n\t\t\t;;\n\tesac\n\t[ -n \"$lookup\" ] || die \"'$img': failed to determine what image to query\"\n\n\tjson=\"$(bashbrew remote arches --json \"$lookup\" || die \"'$img': failed lookup ('$lookup')\")\"\n\tdigests=\"$(jq <<<\"$json\" -r '.arches[env.BASHBREW_ARCH] // [] | map(.digest | @sh) | join(\" \")')\"\n\teval \"digests=( $digests )\"\n\n\tif [ \"${#digests[@]}\" -gt 1 ]; then\n\t\techo >&2 \"warning: '$lookup' has ${#digests[@]} images for '$BASHBREW_ARCH'; returning only the first\"\n\tfi\n\n\tfor digest in \"${digests[@]}\"; do\n\t\techo \"$img=docker-image://${lookup%@*}@$digest\"\n\t\tcontinue 2\n\tdone\n\n\tdigest=\"$(jq <<<\"$json\" -r '.desc.digest')\"\n\tarches=\"$(jq <<<\"$json\" -r '.arches | keys | join(\" \")')\"\n\tdie \"'$img': no appropriate digest for '$BASHBREW_ARCH' found in '$lookup' ('$digest'; arches '$arches')\"\ndone\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.009765625,
          "content": ".gitignore"
        },
        {
          "name": ".external-pins",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.083984375,
          "content": "# https://github.com/actions/checkout/issues/135#issuecomment-613361104\n* text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0048828125,
          "content": ".git\n"
        },
        {
          "name": "CODE-OF-CONDUCT.md",
          "type": "blob",
          "size": 3.3408203125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our community include:\n\n-\tDemonstrating empathy and kindness toward other people\n-\tBeing respectful of differing opinions, viewpoints, and experiences\n-\tGiving and gracefully accepting constructive feedback\n-\tAccepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\n-\tFocusing on what is best not just for us as individuals, but for the overall community\n\nExamples of unacceptable behavior include:\n\n-\tThe use of sexualized language or imagery, and sexual attention or advances of any kind\n-\tTrolling, insulting or derogatory comments, and personal or political attacks\n-\tPublic or private harassment\n-\tPublishing others' private information, such as a physical or email address, without their explicit permission\n-\tOther conduct which could reasonably be considered inappropriate in a professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement as listed in [the MAINTAINERS file](https://github.com/docker-library/official-images/blob/master/MAINTAINERS). All complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org), version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct enforcement ladder](https://github.com/mozilla/diversity).\n\nFor answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.90625,
          "content": "# FYI, this base image is built via \".github/workflows/.bashbrew/action.yml\" (from https://github.com/docker-library/bashbrew/tree/master/Dockerfile)\nFROM oisupport/bashbrew:base\n\nRUN set -eux; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n# wget for downloading files (especially in tests, which run in this environment)\n\t\tca-certificates \\\n\t\twget \\\n# git for cloning source code\n\t\tgit \\\n# gawk for diff-pr.sh\n\t\tgawk \\\n# tar -tf in diff-pr.sh\n\t\tbzip2 \\\n# jq for diff-pr.sh\n\t\tjq \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*\n\nENV DIR /usr/src/official-images\nENV BASHBREW_LIBRARY $DIR/library\n\n# crane for diff-pr.sh\n# https://gcr.io/go-containerregistry/crane:latest\n# https://explore.ggcr.dev/?image=gcr.io/go-containerregistry/crane:latest\nCOPY --from=gcr.io/go-containerregistry/crane@sha256:fc86bcad43a000c2a1ca926a1e167db26c053cebc3fa5d14285c72773fb8c11d /ko-app/crane /usr/local/bin/\n\nWORKDIR $DIR\nCOPY . $DIR\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.505859375,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   Copyright 2014 Docker, Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MAINTAINERS",
          "type": "blob",
          "size": 0.578125,
          "content": "# This file lists the maintainers of the Official Images program at large, not necessarily the maintainers of any given image.\n\nTianon Gravi <admwiggin@gmail.com> (@tianon)\nJoseph Ferguson <yosifkit@gmail.com> (@yosifkit)\n\n# Emeritus: Talon Bowler <nolat301@gmail.com> (@daghack)\n# Emeritus: Peter Salvatore <peter@psftw.com> (@psftw)\n\n# To find the maintainers for a given image, see \"library/IMAGENAME\" in this repository, or see the \"Maintained by:\" section of the \"Quick Reference\" of the image description on Docker Hub (or in the \"docs\" repo at https://github.com/docker-library/docs).\n"
        },
        {
          "name": "NEW-IMAGE-CHECKLIST.md",
          "type": "blob",
          "size": 1.68359375,
          "content": "# Checklist for Review\n\n**NOTE:** This checklist is intended for the use of the Official Images maintainers both to track the status of your PR and to help inform you and others of where we're at. As such, please leave the \"checking\" of items to the repository maintainers. If there is a point below for which you would like to provide additional information or note completion, please do so by commenting on the PR. Thanks! (and thanks for staying patient with us :heart:)\n\n-\t[ ] associated with or contacted upstream?\n-\t[ ] available under [an OSI-approved license](https://opensource.org/licenses)?\n-\t[ ] does it fit into one of the common categories? (\"service\", \"language stack\", \"base distribution\")\n-\t[ ] is it reasonably popular, or does it solve a particular use case well?\n-\t[ ] does a [documentation](https://github.com/docker-library/docs/blob/master/README.md) PR exist? (should be reviewed and merged at roughly the same time so that we don't have an empty image page on the Hub for very long)\n-\t[ ] official-images maintainer dockerization review for best practices and cache gotchas/improvements (ala [the official review guidelines](https://github.com/docker-library/official-images/blob/master/README.md#review-guidelines))?\n-\t[ ] 2+ official-images maintainer dockerization review?\n-\t[ ] existing official images have been considered as a base? (ie, if `foobar` needs Node.js, has `FROM node:...` instead of grabbing `node` via other means been considered?)\n-\t[ ] if `FROM scratch`, tarballs only exist in a single commit within the associated history?\n-\t[ ] passes current tests? any simple new tests that might be appropriate to add? (https://github.com/docker-library/official-images/tree/master/test)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 33.9267578125,
          "content": "# Docker Official Images\n\n## Table of Contents\n\n<!-- AUTOGENERATED TOC -->\n\n1.\t[Docker Official Images](#docker-official-images)\n\t1.\t[Table of Contents](#table-of-contents)\n\t2.\t[What are \"Official Images\"?](#what-are-official-images)\n\t3.\t[Architectures other than amd64?](#architectures-other-than-amd64)\n\t4.\t[More FAQs?](#more-faqs)\n\t5.\t[Contributing to the standard library](#contributing-to-the-standard-library)\n\t\t1.\t[Review Guidelines](#review-guidelines)\n\t\t\t1.\t[Maintainership](#maintainership)\n\t\t\t2.\t[Repeatability](#repeatability)\n\t\t\t3.\t[Consistency](#consistency)\n\t\t\t4.\t[Clarity](#clarity)\n\t\t\t5.\t[init](#init)\n\t\t\t6.\t[Cacheability](#cacheability)\n\t\t\t7.\t[Security](#security)\n\t\t\t\t1.\t[Image Build](#image-build)\n\t\t\t\t2.\t[Runtime Configuration](#runtime-configuration)\n\t\t\t\t3.\t[Security Releases](#security-releases)\n\t\t\t8.\t[Multiple Architectures](#multiple-architectures)\n\t\t2.\t[Commitment](#commitment)\n\t6.\t[Library definition files](#library-definition-files)\n\t\t1.\t[Filenames](#filenames)\n\t\t2.\t[Tags and aliases](#tags-and-aliases)\n\t\t3.\t[Instruction format](#instruction-format)\n\t\t4.\t[Creating a new repository](#creating-a-new-repository)\n\t\t5.\t[Adding a new tag in an existing repository (that you're the maintainer of)](#adding-a-new-tag-in-an-existing-repository-that-youre-the-maintainer-of)\n\t\t6.\t[Change to a tag in an existing repository (that you're the maintainer of)](#change-to-a-tag-in-an-existing-repository-that-youre-the-maintainer-of)\n\t7.\t[Bashbrew](#bashbrew)\n\n<!-- AUTOGENERATED TOC -->\n\n## What are \"Official Images\"?\n\nThe Docker Official Images are curated images [hosted on Docker Hub](https://hub.docker.com/u/library). The main tenets are:\n\n- Focus on [Free](https://www.debian.org/social_contract#guidelines) and [Open-Source](https://opensource.org/) Software\n\n- Support [multiple architectures](#architectures-other-than-amd64)\n\n- Exemplify [`Dockerfile` best practices](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/)\n\n- [Actively rebuild](#library-definition-files) for updates and security fixes\n\n- Adhere to upstream recommendations\n\n- Add minimal quality-of-life behavior for the container environment where fit\n\nSee [Docker's documentation](https://docs.docker.com/docker-hub/official_repos/) for a good high-level overview of the program.\n\nIn essence we strive to heed upstream's recommendations on how they intend for their software to be consumed. Many images are maintained in collaboration with the relevant upstream project if not maintained directly by them. Additionally we aim to exemplify the best practices for Dockerfiles to serve as a reference when making or deriving your own images from them.\n\n(If you are a representative of an upstream for which there exists an image and you would like to get involved, please see the [Maintainership](#maintainership) section below!)\n\n## Architectures other than amd64?\n\nSome images have been ported for other architectures, and many of these are officially supported (to various degrees).\n\n-\tArchitectures officially supported by Docker, Inc. for running Docker: (see [download.docker.com](https://download.docker.com/linux/))\n\t-\tARMv6 32-bit (`arm32v6`): https://hub.docker.com/u/arm32v6/\n\t-\tARMv7 32-bit (`arm32v7`): https://hub.docker.com/u/arm32v7/\n\t-\tARMv8 64-bit (`arm64v8`): https://hub.docker.com/u/arm64v8/\n\t-\tLinux x86-64 (`amd64`): https://hub.docker.com/u/amd64/\n\t-\tWindows x86-64 (`windows-amd64`): https://hub.docker.com/u/winamd64/\n-\tOther architectures built by official images: (but *not* officially supported by Docker, Inc.)\n\t-\tARMv5 32-bit (`arm32v5`): https://hub.docker.com/u/arm32v5/\n\t-\tIBM POWER8 (`ppc64le`): https://hub.docker.com/u/ppc64le/\n\t-\tIBM z Systems (`s390x`): https://hub.docker.com/u/s390x/\n\t-\tMIPS64 LE (`mips64le`): https://hub.docker.com/u/mips64le/\n\t-\tRISC-V 64-bit (`riscv64`): https://hub.docker.com/u/riscv64/\n\t-\tx86/i686 (`i386`): https://hub.docker.com/u/i386/\n\nAs of 2017-09-12, these other architectures are included under the non-prefixed images via [\"manifest lists\"](https://docs.docker.com/registry/spec/manifest-v2-2/#manifest-list) (also known as [\"indexes\" in the OCI image specification](https://github.com/opencontainers/image-spec/blob/v1.0.0/image-index.md)), such that, for example, `docker run hello-world` should run as-is on all supported platforms.\n\nIf you're curious about how these are built, head over to https://doi-janky.infosiftr.net/job/multiarch/ to see the build scaffolding.\n\nSee the [multi-arch section](#multiple-architectures) below for recommendations in adding more architectures to an official image.\n\n## More FAQs?\n\nYes! We have [a dedicated FAQ repository](https://github.com/docker-library/faq) where we try to collect other common questions (both about the program and about our practices).\n\n## Contributing to the standard library\n\nThank you for your interest in the Docker official images project! We strive to make these instructions as simple and straightforward as possible, but if you find yourself lost, don't hesitate to seek us out on [Libera.Chat IRC](https://libera.chat) in channel `#docker-library` or by creating a GitHub issue here.\n\nBe sure to familiarize yourself with [Official Repositories on Docker Hub](https://docs.docker.com/docker-hub/official_repos/) and the [Best practices for writing Dockerfiles](https://docs.docker.com/articles/dockerfile_best-practices/) in the Docker documentation. These will be the foundation of the review process performed by the official images maintainers. If you'd like the review process to go more smoothly, please ensure that your `Dockerfile`s adhere to all the points mentioned there, as well as [below](README.md#review-guidelines), before submitting a pull request.\n\nAlso, the Hub descriptions for these images are currently stored separately in the [`docker-library/docs` repository](https://github.com/docker-library/docs), whose [`README.md` file](https://github.com/docker-library/docs/blob/master/README.md) explains more about how it's structured and how to contribute to it. Please be prepared to submit a PR there as well, pending acceptance of your image here.\n\n### Review Guidelines\n\nBecause the official images are intended to be learning tools for those new to Docker as well as the base images for advanced users to build their production releases, we review each proposed `Dockerfile` to ensure that it meets a minimum standard for quality and maintainability. While some of that standard is hard to define (due to subjectivity), as much as possible is defined here, while also adhering to the \"Best Practices\" where appropriate.\n\nA checklist which may be used by the maintainers during review can be found in [`NEW-IMAGE-CHECKLIST.md`](NEW-IMAGE-CHECKLIST.md).\n\n#### Maintainership\n\nVersion bumps and security fixes should be attended to in a timely manner.\n\nIf you do not represent upstream and upstream becomes interested in maintaining the image, steps should be taken to ensure a smooth transition of image maintainership over to upstream.\n\nFor upstreams interested in taking over maintainership of an existing repository, the first step is to get involved in the existing repository. Making comments on issues, proposing changes, and making yourself known within the \"image community\" (even if that \"community\" is just the current maintainer) are all important places to start to ensure that the transition is unsurprising to existing contributors and users.\n\nWhen taking over an existing repository, please ensure that the entire Git history of the original repository is kept in the new upstream-maintained repository to make sure the review process isn't stalled during the transition. This is most easily accomplished by forking the new from the existing repository, but can also be accomplished by fetching the commits directly from the original and pushing them into the new repo (ie, `git fetch https://github.com/jsmith/example.git master`, `git rebase FETCH_HEAD`, `git push -f`). On GitHub, an alternative is to move ownership of the git repository. This can be accomplished without giving either group admin access to the other owner's repository:\n\n-\tcreate temporary intermediary organization\n\t-\t[docker-library-transitioner](https://github.com/docker-library-transitioner) is available for this purpose if you would like our help\n-\tgive old and new owners admin access to intermediary organization\n-\told owner transfers repo ownership to intermediary organization\n-\tnew owner transfers repo ownership to its new home\n\t-\trecommend that old owner does not fork new repo back into the old organization to ensure that GitHub redirects will just work\n\n#### Repeatability\n\nRebuilding the same `Dockerfile` should result in the same version of the image being packaged, even if the second build happens several versions later, or the build should fail outright, such that an inadvertent rebuild of a `Dockerfile` tagged as `0.1.0` doesn't end up containing `0.2.3`. For example, if using `apt` to install the main program for the image, be sure to pin it to a specific version (ex: `... apt-get install -y my-package=0.1.0 ...`). For dependent packages installed by `apt` there is not usually a need to pin them to a version.\n\nNo official images can be derived from, or depend on, non-official images (allowing the non-image [`scratch`](https://hub.docker.com/_/scratch/) and the intentionally limited exceptions pinned in [`.external-pins`](.external-pins) -- see also [`.external-pins/list.sh`](.external-pins/list.sh)).\n\n#### Consistency\n\nAll official images should provide a consistent interface. A beginning user should be able to `docker run official-image bash` (or `sh`) without needing to learn about `--entrypoint`. It is also nice for advanced users to take advantage of entrypoint, so that they can `docker run official-image --arg1 --arg2` without having to specify the binary to execute.\n\n1.\tIf the startup process does not need arguments, just use `CMD`:\n\n\t```Dockerfile\n\tCMD [\"irb\"]\n\t```\n\n2.\tIf there is initialization that needs to be done on start, like creating the initial database, use an `ENTRYPOINT` along with `CMD`:\n\n\t```Dockerfile\n\tENTRYPOINT [\"/docker-entrypoint.sh\"]\n\tCMD [\"postgres\"]\n\t```\n\n\t1.\tEnsure that `docker run official-image bash` (or `sh`) works too. The easiest way is to check for the expected command and if it is something else, just `exec \"$@\"` (run whatever was passed, properly keeping the arguments escaped).\n\n\t\t```sh\n\t\t#!/bin/sh\n\t\tset -e\n\n\t\t# this if will check if the first argument is a flag\n\t\t# but only works if all arguments require a hyphenated flag\n\t\t# -v; -SL; -f arg; etc will work, but not arg1 arg2\n\t\tif [ \"$#\" -eq 0 ] || [ \"${1#-}\" != \"$1\" ]; then\n\t\t    set -- mongod \"$@\"\n\t\tfi\n\n\t\t# check for the expected command\n\t\tif [ \"$1\" = 'mongod' ]; then\n\t\t    # init db stuff....\n\t\t    # use gosu (or su-exec) to drop to a non-root user\n\t\t    exec gosu mongod \"$@\"\n\t\tfi\n\n\t\t# else default to run whatever the user wanted like \"bash\" or \"sh\"\n\t\texec \"$@\"\n\t\t```\n\n3.\tIf the image only contains the main executable and its linked libraries (ie no shell) then it is fine to use the executable as the `ENTRYPOINT`, since that is the only thing that can run:\n\n\t```Dockerfile\n\tENTRYPOINT [\"fully-static-binary\"]\n\tCMD [\"--help\"]\n\t```\n\n\tThe most common indicator of whether this is appropriate is that the image `Dockerfile` starts with [`scratch`](https://registry.hub.docker.com/_/scratch/) (`FROM scratch`).\n\n#### Clarity\n\nTry to make the `Dockerfile` easy to understand/read. It may be tempting, for the sake of brevity, to put complicated initialization details into a standalone script and merely add a `RUN` command in the `Dockerfile`. However, this causes the resulting `Dockerfile` to be overly opaque, and such `Dockerfile`s are unlikely to pass review. Instead, it is recommended to put all the commands for initialization into the `Dockerfile` as appropriate `RUN` or `ENV` command combinations. To find good examples, look at the current official images.\n\nSome examples at the time of writing:\n\n-\t[php](https://github.com/docker-library/php/blob/b4aeb948e2e240c732d78890ff03285b16e8edda/5.6/Dockerfile)\n-\t[python](https://github.com/docker-library/python/blob/3e5826ad0c6e29f07f6dc7ff8f30b4c54385d1bb/3.4/Dockerfile)\n-\t[ruby:2.2](https://github.com/docker-library/ruby/blob/e34b201a0f0b49818fc8373f6a9148e13d546bdf/2.2/Dockerfile)\n\n#### init\n\nFollowing the Docker guidelines it is highly recommended that the resulting image be just one concern per container; predominantly this means just one process per container, so there is no need for a full init system. There are two situations where an init-like process would be helpful for the container. The first being signal handling. If the process launched does not handle `SIGTERM` by exiting, it will not be killed since it is PID 1 in the container (see \"NOTE\" at the end of the [Foreground section](https://docs.docker.com/engine/reference/run/#foreground) in the docker docs). The second situation would be zombie reaping. If the process spawns child processes and does not properly reap them it will lead to a full process table, which can prevent the whole system from spawning any new processes. For both of these concerns we recommend [tini](https://github.com/krallin/tini). It is incredibly small, has minimal external dependencies, fills each of these roles, and does only the necessary parts of reaping and signal forwarding.\n\nBe sure to use tini in `CMD` or `ENTRYPOINT` as appropriate.\n\nIt is best to install tini from a distribution-provided package (ex. `apt-get install tini`). If tini is not available in your distribution or is too old, here is a snippet of a `Dockerfile` to add in tini:\n\n```Dockerfile\n# Install tini for signal processing and zombie killing\nENV TINI_VERSION v0.18.0\nENV TINI_SIGN_KEY 595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7\nRUN set -eux; \\\n  wget -O /usr/local/bin/tini \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini\"; \\\n  wget -O /usr/local/bin/tini.asc \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini.asc\"; \\\n  export GNUPGHOME=\"$(mktemp -d)\"; \\\n  gpg --batch --keyserver keyserver.ubuntu.com --recv-keys \"$TINI_SIGN_KEY\"; \\\n  gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini; \\\n  command -v gpgconf && gpgconf --kill all || :; \\\n  rm -r \"$GNUPGHOME\" /usr/local/bin/tini.asc; \\\n  chmod +x /usr/local/bin/tini; \\\n  tini --version\n```\n\n#### Cacheability\n\nThis is one place that experience ends up trumping documentation for the path to enlightenment, but the following tips might help:\n\n-\tAvoid `COPY`/`ADD` whenever possible, but when necessary, be as specific as possible (ie, `COPY one-file.sh /somewhere/` instead of `COPY . /somewhere`).\n\n\tThe reason for this is that the cache for `COPY` instructions considers file `mtime` changes to be a cache bust, which can make the cache behavior of `COPY` unpredictable sometimes, especially when `.git` is part of what needs to be `COPY`ed (for example).\n\n-\tEnsure that lines which are less likely to change come before lines that are more likely to change (with the caveat that each line should generate an image that still runs successfully without assumptions of later lines).\n\n\tFor example, the line that contains the software version number (`ENV MYSOFTWARE_VERSION 4.2`) should come after a line that sets up the APT repository `.list` file (`RUN echo 'deb http://example.com/mysoftware/debian some-suite main' > /etc/apt/sources.list.d/mysoftware.list`).\n\n#### Security\n\n##### Image Build\n\nThe `Dockerfile` should be written to help mitigate interception attacks during build. Our requirements focus on three main objectives: verifying the source, verifying author, and verifying the content; these are respectively accomplished by the following: using https where possible; importing PGP keys with the full fingerprint in the `Dockerfile` to check signatures; embedding checksums directly in the `Dockerfile`. All three should be used when possible. Just https and embedded checksum can be used when no signature is published. As a last resort, just an embedded checksum is acceptable if the site doesn't have https available and no signature.\n\nThe purpose in recommending the use of https for downloading needed artifacts is that it ensures that the download is from a trusted source which also happens to make interception much more difficult.\n\nThe purpose in recommending PGP signature verification is to ensure that only an authorized user published the given artifact. When importing PGP keys, please use the [the `keys.openpgp.org` service](https://keys.openpgp.org/about) when possible (preferring `keyserver.ubuntu.com` otherwise). See also the FAQ section on [keys and verification](https://github.com/docker-library/faq/#openpgp--gnupg-keys-and-verification).\n\nThe purpose in recommending checksum verification is to verify that the artifact is as expected. This ensures that when remote content changes, the Dockerfile also will change and provide a natural `docker build` cache bust. As a bonus, this also prevents accidentally downloading newer-than-expected artifacts on poorly versioned files.\n\nBelow are some examples:\n\n-\t**Preferred**: *download over https, PGP key full fingerprint import and `asc` verification, embedded checksum verified.*\n\n\t```Dockerfile\n\tENV PYTHON_DOWNLOAD_SHA512 (sha512-value-here)\n\tRUN set -eux; \\\n\t    curl -fL \"https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tar.xz\" -o python.tar.xz; \\\n\t    curl -fL \"https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tar.xz.asc\" -o python.tar.xz.asc; \\\n\t    export GNUPGHOME=\"$(mktemp -d)\"; \\\n\t# gpg: key F73C700D: public key \"Larry Hastings <larry@hastings.org>\" imported\n\t    gpg --batch --keyserver keyserver.ubuntu.com --recv-keys 97FC712E4C024BBEA48A61ED3A5CA953F73C700D; \\\n\t    gpg --batch --verify python.tar.xz.asc python.tar.xz; \\\n\t    rm -r \"$GNUPGHOME\" python.tar.xz.asc; \\\n\t    echo \"$PYTHON_DOWNLOAD_SHA512 *python.tar.xz\" | sha512sum --strict --check; \\\n\t    # install\n\t```\n\n-\t**Alternate**: *full key fingerprint imported to apt which will check signatures and checksums when packages are downloaded and installed.*\n\n\t```Dockerfile\n\tRUN set -eux; \\\n\t    key='A4A9406876FCBD3C456770C88C718D3B5072E1F5'; \\\n\t    export GNUPGHOME=\"$(mktemp -d)\"; \\\n\t    gpg --batch --keyserver keyserver.ubuntu.com --recv-keys \"$key\"; \\\n\t    gpg --batch --armor --export \"$key\" > /etc/apt/trusted.gpg.d/mysql.gpg.asc; \\\n\t    gpgconf --kill all; \\\n\t    rm -rf \"$GNUPGHOME\"; \\\n\t    apt-key list > /dev/null\n\n\tRUN set -eux; \\\n\t    echo \"deb http://repo.mysql.com/apt/debian/ bookworm mysql-${MYSQL_MAJOR}\" > /etc/apt/sources.list.d/mysql.list; \\\n\t    apt-get update; \\\n\t    apt-get install -y mysql-community-client=\"${MYSQL_VERSION}\" mysql-community-server-core=\"${MYSQL_VERSION}\"; \\\n\t    rm -rf /var/lib/apt/lists/*; \\\n\t    # ...\n\t```\n\n\t(As a side note, `rm -rf /var/lib/apt/lists/*` is *roughly* the opposite of `apt-get update` -- it ensures that the layer doesn't include the extra ~8MB of APT package list data, and enforces [appropriate `apt-get update` usage](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#apt-get).)\n\n-\t**Less Secure Alternate**: *embed the checksum into the `Dockerfile`.*\n\n\t```Dockerfile\n\tENV RUBY_DOWNLOAD_SHA256 (sha256-value-here)\n\tRUN set -eux; \\\n\t    curl -fL -o ruby.tar.gz \"https://cache.ruby-lang.org/pub/ruby/$RUBY_MAJOR/ruby-$RUBY_VERSION.tar.gz\"; \\\n\t    echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.gz\" | sha256sum --strict --check; \\\n\t    # install\n\t```\n\n\t-\t**Note:** the use of either SHA1 or MD5 should be considered a \"checksum of last resort\" as both are considered generally unsafe:\n\n\t\t-\t[\"Single-block collision for MD5\" from 2012](https://marc-stevens.nl/research/md5-1block-collision/)\n\t\t-\t[\"Announcing the first SHA1 collision\" from 2017](https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html)\n\n-\t**Unacceptable**: *download the file over http(s) with no verification.*\n\n\t```Dockerfile\n\tRUN curl -fL \"https://julialang.s3.amazonaws.com/bin/linux/x64/${JULIA_VERSION%[.-]*}/julia-${JULIA_VERSION}-linux-x86_64.tar.gz\" | tar ... \\\n\t    # install\n\t```\n\n##### Runtime Configuration\n\nBy default, Docker containers are executed with reduced privileges: whitelisted Linux capabilities, Control Groups, and a default Seccomp profile (1.10+ w/ host support). Software running in a container may require additional privileges in order to function correctly, and there are a number of command line options to customize container execution. See [`docker run` Reference](https://docs.docker.com/engine/reference/run/) and [Seccomp for Docker](https://docs.docker.com/engine/security/seccomp/) for reference.\n\nOfficial Repositories that require additional privileges should specify the minimal set of command line options for the software to function, and may still be rejected if this introduces significant portability or security issues. In general, `--privileged` is not allowed, but a combination of `--cap-add` and `--device` options may be acceptable. Additionally, `--volume` can be tricky as there are many host filesystem locations that introduce portability/security issues (e.g. X11 socket).\n\n##### Security Releases\n\nFor image updates which constitute a security fix, there are a few things we recommend to help ensure your update is merged, built, and released as quickly as possible:\n\n1.\t[Send an email to `doi@docker.com`](mailto:doi@docker.com) a few (business) days in advance to give us a heads up and a timing estimate (so we can schedule time for the incoming update appropriately).\n2.\tInclude `[security]` in the title of your pull request (for example, `[security] Update FooBar to 1.2.5, 1.3.7, 2.0.1`).\n3.\tKeep the pull request free of changes that are unrelated to the security fix -- we'll still be doing review of the update, but it will be expedited so this will help us help you.\n4.\tBe active and responsive to comments on the pull request after it's opened (as usual, but even more so if the timing of the release is of importance).\n\n#### Multiple Architectures\n\nEach repo can specify multiple architectures for any and all tags. If no architecture is specified, images are built in Linux on `amd64` (aka x86-64). To specify more or different architectures, use the `Architectures` field (comma-delimited list, whitespace is trimmed). Valid architectures are found in [Bashbrew's `oci-platform.go` file](https://github.com/docker-library/bashbrew/blob/v0.1.2/architecture/oci-platform.go#L14-L27):\n\n-\t`amd64`\n-\t`arm32v6`\n-\t`arm32v7`\n-\t`arm64v8`\n-\t`i386`\n-\t`mips64le`\n-\t`ppc64le`\n-\t`riscv64`\n-\t`s390x`\n-\t`windows-amd64`\n\nThe `Architectures` of any given tag must be a strict subset of the `Architectures` of the tag it is `FROM`.\n\nImages must have a single `Dockerfile` per entry in the library file that can be used for multiple architectures. This means that each supported architecture will have the same `FROM` line (e.g. `FROM debian:bookworm`). See [`golang`](https://github.com/docker-library/official-images/blob/master/library/golang), [`docker`](https://github.com/docker-library/official-images/blob/master/library/docker), [`haproxy`](https://github.com/docker-library/official-images/blob/master/library/haproxy), and [`php`](https://github.com/docker-library/official-images/blob/master/library/php) for examples of library files using one `Dockerfile` per entry and see their respective git repos for example `Dockerfile`s.\n\nIf different parts of the Dockerfile only happen in one architecture or another, use control flow (e.g.`if`/`case`) along with `dpkg --print-architecture` or `apk -print-arch` to detect the userspace architecture. Only use `uname` for architecture detection when more accurate tools cannot be installed. See [golang](https://github.com/docker-library/golang/blob/72bc141d781ae54ef20f71aa1105449cb6c2edc4/1.20/bookworm/Dockerfile#L26-L63) for an example where some architectures require building binaries from the upstream source packages and some merely download the binary release.\n\nFor base images like `debian` it will be necessary to have a different `Dockerfile` and build context in order to `ADD` architecture specific binaries and this is a valid exception to the above. Since these images use the same `Tags`, they need to be in the same entry. Use the architecture specific fields for `GitRepo`, `GitFetch`, `GitCommit`, and `Directory`, which are the architecture concatenated with hyphen (`-`) and the field (e.g. `arm32v7-GitCommit`). Any architecture that does not have an architecture-specific field will use the default field (e.g. no `arm32v7-Directory` means `Directory` will be used for `arm32v7`). See the [`debian`](https://github.com/docker-library/official-images/blob/master/library/debian) or [`ubuntu`](https://github.com/docker-library/official-images/blob/master/library/ubuntu) files in the library for examples. The following is an example for [`hello-world`](https://github.com/docker-library/official-images/blob/master/library/hello-world):\n\n```\nMaintainers: Tianon Gravi <admwiggin@gmail.com> (@tianon),\n             Joseph Ferguson <yosifkit@gmail.com> (@yosifkit)\nGitRepo: https://github.com/docker-library/hello-world.git\nGitCommit: 7d0ee592e4ed60e2da9d59331e16ecdcadc1ed87\n\nTags: latest\nArchitectures: amd64, arm32v5, arm32v7, arm64v8, ppc64le, s390x\n# all the same commit; easy for us to generate this way since they could be different\namd64-GitCommit: 7d0ee592e4ed60e2da9d59331e16ecdcadc1ed87\namd64-Directory: amd64/hello-world\narm32v5-GitCommit: 7d0ee592e4ed60e2da9d59331e16ecdcadc1ed87\narm32v5-Directory: arm32v5/hello-world\narm32v7-GitCommit: 7d0ee592e4ed60e2da9d59331e16ecdcadc1ed87\narm32v7-Directory: arm32v7/hello-world\narm64v8-GitCommit: 7d0ee592e4ed60e2da9d59331e16ecdcadc1ed87\narm64v8-Directory: arm64v8/hello-world\nppc64le-GitCommit: 7d0ee592e4ed60e2da9d59331e16ecdcadc1ed87\nppc64le-Directory: ppc64le/hello-world\ns390x-GitCommit: 7d0ee592e4ed60e2da9d59331e16ecdcadc1ed87\ns390x-Directory: s390x/hello-world\n\nTags: nanoserver\nArchitectures: windows-amd64\n# if there is only one architecture, you can use the unprefixed fields\nDirectory: amd64/hello-world/nanoserver\n# or use the prefixed versions\nwindows-amd64-GitCommit: 7d0ee592e4ed60e2da9d59331e16ecdcadc1ed87\nConstraints: nanoserver\n```\n\nSee the [instruction format section](#instruction-format) for more information on the format of the library file.\n\n### Commitment\n\nProposing a new official image should not be undertaken lightly. We expect and require a commitment to maintain your image (including and especially timely updates as appropriate, as noted above).\n\n## Library definition files\n\nThe library definition files are plain text files found in the [`library/` directory of the `official-images` repository](https://github.com/docker-library/official-images/tree/master/library). Each library file controls the current \"supported\" set of image tags that appear on the Docker Hub description. Tags that are removed from a library file do not get removed from the Docker Hub, so that old versions can continue to be available for use, but are not maintained by upstream or the maintainer of the official image. Tags in the library file are only built through an update to that library file or as a result of its base image being updated (ie, an image `FROM debian:bookworm` would be rebuilt when `debian:bookworm` is built). Only what is in the library file will be rebuilt when a base has updates.\n\nGiven this policy, it is worth clarifying a few cases: backfilled versions, release candidates, and continuous integration builds. When a new repository is proposed, it is common to include some older unsupported versions in the initial pull request with the agreement to remove them right after acceptance. Don't confuse this with a comprehensive historical archive which is not the intention. Another common case where the term \"supported\" is stretched a bit is with release candidates. A release candidate is really just a naming convention for what are expected to be shorter-lived releases, so they are totally acceptable and encouraged. Unlike a release candidate, continuous integration builds which have a fully automated release cycle based on code commits or a regular schedule are not appropriate.\n\nIt is highly recommended that you browse some of the existing `library/` file contents (and history to get a feel for how they change over time) before creating a new one to become familiar with the prevailing conventions and further help streamline the review process (so that we can focus on content instead of esoteric formatting or tag usage/naming).\n\n### Filenames\n\nThe filename of a definition file will determine the name of the image repository it creates on the Docker Hub. For example, the `library/ubuntu` file will create tags in the `ubuntu` repository.\n\n### Tags and aliases\n\nThe tags of a repository should reflect upstream's versions or variations. For example, Ubuntu 14.04 is also known as Ubuntu Trusty Tahr, but often as simply Ubuntu Trusty (especially in usage), so `ubuntu:14.04` (version number) and `ubuntu:trusty` (version name) are appropriate aliases for the same image contents. In Docker, the `latest` tag is a special case, but it's a bit of a misnomer; `latest` really is the \"default\" tag. When one does `docker run xyz`, Docker interprets that to mean `docker run xyz:latest`. Given that background, no other tag ever contains the string `latest`, since it's not something users are expected or encouraged to actually type out (ie, `xyz:latest` should really be used as simply `xyz`). Put another way, having an alias for the \"highest 2.2-series release of XYZ\" should be `xyz:2.2`, not `xyz:2.2-latest`. Similarly, if there is an Alpine variant of `xyz:latest`, it should be aliased as `xyz:alpine`, not `xyz:alpine-latest` or `xyz:latest-alpine`.\n\nIt is strongly encouraged that version number tags be given aliases which make it easy for the user to stay on the \"most recent\" release of a particular series. For example, given currently supported XYZ Software versions of 2.3.7 and 2.2.4, suggested aliases would be `Tags: 2.3.7, 2.3, 2, latest` and `Tags: 2.2.4, 2.2`, respectively. In this example, the user can use `xyz:2.2` to easily use the most recent patch release of the 2.2 series, or `xyz:2` if less granularity is needed (Python is a good example of where that's most obviously useful -- `python:2` and `python:3` are very different, and can be thought of as the `latest` tag for each of the major release tracks of Python).\n\nAs described above, `latest` is really \"default\", so the image that it is an alias for should reflect which version or variation of the software users should use if they do not know or do not care which version they use. Using Ubuntu as an example, `ubuntu:latest` points to the most recent LTS release, given that it is what the majority of users should be using if they know they want Ubuntu but do not know or care which version (especially considering it will be the most \"stable\" and well-supported release at any given time).\n\n### Instruction format\n\nThe manifest file format is officially based on [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt), and as such should be familiar to folks who are already familiar with the \"headers\" of many popular internet protocols/formats such as HTTP or email.\n\nThe primary additions are inspired by the way Debian commonly uses 2822 -- namely, lines starting with `#` are ignored and \"entries\" are separated by a blank line.\n\nThe first entry is the \"global\" metadata for the image. The only required field in the global entry is `Maintainers`, whose value is comma-separated in the format of `Name <email> (@github)` or `Name (@github)`. Any field specified in the global entry will be the default for the rest of the entries and can be overridden in an individual entry.\n\n\t# this is a comment and will be ignored\n\tMaintainers: John Smith <jsmith@example.com> (@example-jsmith),\n\t             Anne Smith <asmith@example.com> (@example-asmith)\n\tGitRepo: https://github.com/example/docker-example.git\n\tGitCommit: deadbeefdeadbeefdeadbeefdeadbeefdeadbeef\n\t\n\t# this is also a comment, and will also be ignored\n\t\n\tTags: 1.2.3, 1.2, 1, latest\n\tDirectory: 1\n\t\n\tTags: 2.0-rc1, 2.0-rc, 2-rc, rc\n\tGitRepo: https://github.com/example/docker-example-rc.git\n\tGitFetch: refs/heads/2.0-pre-release\n\tGitCommit: beefdeadbeefdeadbeefdeadbeefdeadbeefdead\n\tDirectory: 2\n\tFile: Dockerfile-to-use\n\nBashbrew will fetch code out of the Git repository (`GitRepo`) at the commit specified (`GitCommit`). If the commit referenced is not available by fetching `master` of the associated `GitRepo`, it becomes necessary to supply a value for `GitFetch` in order to tell Bashbrew what ref to fetch in order to get the commit necessary.\n\nThe built image will be tagged as `<manifest-filename>:<tag>` (ie, `library/golang` with a `Tags` value of `1.6, 1, latest` will create tags of `golang:1.6`, `golang:1`, and `golang:latest`).\n\nOptionally, if `Directory` is present, Bashbrew will look for the `Dockerfile` inside the specified subdirectory instead of at the root (and `Directory` will be used as the [\"context\" for the build](https://docs.docker.com/reference/builder/) instead of the top-level of the repository). If `File` is present, the specified filename instead of `Dockerfile` will be used.\n\nSee the [multi-arch section](#multiple-architectures) for details on how to specify a different `GitRepo`, `GitFetch`, `GitCommit`, or `Directory` for a specific architecture.\n\n### Creating a new repository\n\n-\tCreate a new file in the `library/` folder. Its name will be the name of your repository on the Hub.\n-\tAdd your tag definitions using the appropriate syntax (see above).\n-\tCreate a pull request adding the file from your forked repository to this one. Please be sure to add details as to what your repository does.\n\n### Adding a new tag in an existing repository (that you're the maintainer of)\n\n-\tAdd your tag definition using the instruction format documented above.\n-\tCreate a pull request from your Git repository to this one. Please be sure to add details about what's new, if possible.\n\n### Change to a tag in an existing repository (that you're the maintainer of)\n\n-\tUpdate the relevant tag definition using the instruction format documented above.\n-\tCreate a pull request from your Git repository to this one. Please be sure to add details about what's changed, if possible.\n\n## Bashbrew\n\nBashbrew (`bashbrew`) is a tool for cloning, building, tagging, and pushing the Docker official images. See [the Bashbrew `README`](https://github.com/docker-library/bashbrew#readme) for more information.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.3642578125,
          "content": "# Security Policy\n\nIf you have run a CVE/security scanner on an image and that is why you are here, you should read [our \"Why does my security scanner show that an image has CVEs?\" FAQ entry](https://github.com/docker-library/faq#why-does-my-security-scanner-show-that-an-image-has-cves).\n\nIf you believe you have found a net new security vulnerability, please make every effort to report it to the appropriate maintainers responsibly so that it can be fixed discreetly (also known as \"embargo\").\n\nWhen the issue relates to a specific image, please make an effort to (privately) contact the maintainers of that specific image.  Some maintainers publish/maintain a `SECRUITY.md` in their GitHub repository, for example, which can be a great place to find information about how to report an issue appropriately.\n\nFor issues related to anything maintained under [@docker-library on GitHub](https://github.com/docker-library) or associated infrastructure, please [send an email to `doi@docker.com`](mailto:doi@docker.com) or [use GitHub's security advisory feature](https://github.com/docker-library/official-images/security/advisories/new).\n\nImage maintainers should also be aware of the [\"Security Releases\" section of the maintainer documentation](https://github.com/docker-library/official-images#security-releases) for pre-notifying the project maintainers of upcoming security-related releases.\n"
        },
        {
          "name": "_bashbrew-cat-sorted.sh",
          "type": "blob",
          "size": 0.8466796875,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\n# a mimic of \"bashbrew cat\" which should sort slightly more deterministically (so even full-order-changing PRs should have reasonable diffs)\n\nimages=\"$(\n\tbashbrew list --repos --uniq \"$@\" \\\n\t\t| sort -uV\n)\"\nset -- $images\n\ndeclare -A seenGlobal=()\n\nfirst=1\nfor img; do\n\tif [ -n \"$first\" ]; then\n\t\tfirst=\n\telse\n\t\techo; echo\n\tfi\n\n\tif [ \"$#\" -gt 1 ]; then\n\t\techo \"# $img\"\n\tfi\n\n\trepo=\"${img%:*}\"\n\tif [ -z \"${seenGlobal[\"$repo\"]:-}\" ]; then\n\t\tbashbrew cat --format '{{ printf \"%s\\n\" (.Manifest.Global.ClearDefaults defaults) }}' \"$img\"\n\t\tseenGlobal[\"$repo\"]=\"$img\"\n\telse\n\t\techo \"# (see also ${seenGlobal[\"$repo\"]} above)\"\n\tfi\n\n\tbashbrew list --uniq \"$img\" \\\n\t\t| sort -V \\\n\t\t| xargs -r bashbrew cat --format '\n\t\t\t{{- range $e := .TagEntries -}}\n\t\t\t\t{{- printf \"\\n%s\\n\" ($e.ClearDefaults $.Manifest.Global) -}}\n\t\t\t{{- end -}}\n\t\t'\ndone\n"
        },
        {
          "name": "diff-pr.sh",
          "type": "blob",
          "size": 11.7314453125,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\nshopt -s dotglob\n\n# make sure we can GTFO\ntrap 'echo >&2 Ctrl+C captured, exiting; exit 1' SIGINT\n\n# if bashbrew is missing, bail early with a sane error\nbashbrew --version > /dev/null\n\nusage() {\n\tcat <<-EOUSAGE\n\t\tusage: $0 [PR number] [repo[:tag]]\n\t\t   ie: $0 1024\n\t\t       $0 9001 debian php django\n\tEOUSAGE\n}\n\n# TODO flags parsing\nallFiles=\nlistTarballContents=1\nfindCopies='20%'\n\nuninterestingTarballContent=(\n\t# \"config_diff_2017_01_07.log\"\n\t'var/log/YaST2/'\n\n\t# \"ks-script-mqmz_080.log\"\n\t# \"ks-script-ycfq606i.log\"\n\t'var/log/anaconda/'\n\n\t# \"2016-12-20/\"\n\t'var/lib/yum/history/'\n\t'var/lib/dnf/history/'\n\n\t# \"a/f8c032d2be757e1a70f00336b55c434219fee230-acl-2.2.51-12.el7-x86_64/var_uuid\"\n\t'var/lib/yum/yumdb/'\n\t'var/lib/dnf/yumdb/'\n\n\t# \"b42ff584.0\"\n\t'etc/pki/tls/rootcerts/'\n\n\t# \"09/401f736622f2c9258d14388ebd47900bbab126\"\n\t'usr/lib/.build-id/'\n)\n\n# prints \"$2$1$3$1...$N\"\njoin() {\n\tlocal sep=\"$1\"; shift\n\tlocal out; printf -v out \"${sep//%/%%}%s\" \"$@\"\n\techo \"${out#$sep}\"\n}\n\nuninterestingTarballGrep=\"^([.]?/)?($(join '|' \"${uninterestingTarballContent[@]}\"))\"\n\nif [ \"$#\" -eq 0 ]; then\n\tusage >&2\n\texit 1\nfi\npull=\"$1\" # PR number\nshift\n\ndiffDir=\"$(readlink -f \"$BASH_SOURCE\")\"\ndiffDir=\"$(dirname \"$diffDir\")\"\n\ntempDir=\"$(mktemp -d)\"\ntrap \"rm -rf '$tempDir'\" EXIT\ncd \"$tempDir\"\n\ngit clone --quiet \\\n\thttps://github.com/docker-library/official-images.git \\\n\toi\n\nif [ \"$pull\" != '0' ]; then\n\tgit -C oi fetch --quiet \\\n\t\torigin \"pull/$pull/merge\":refs/heads/pull\nelse\n\tgit -C oi fetch --quiet --update-shallow \\\n\t\t\"$diffDir\" HEAD:refs/heads/pull\nfi\n\nexternalPins=\nif [ \"$#\" -eq 0 ]; then\n\texternalPins=\"$(git -C oi/.external-pins diff --no-renames --name-only HEAD...pull -- '*/**')\"\n\n\timages=\"$(git -C oi/library diff --no-renames --name-only HEAD...pull -- .)\"\n\tif [ -z \"$images\" ] && [ -z \"$externalPins\" ]; then\n\t\texit 0\n\tfi\n\timages=\"$(xargs -rn1 basename <<<\"$images\")\"\n\tset -- $images\nfi\n\nexport BASHBREW_LIBRARY=\"$PWD/oi/library\"\n\n: \"${BASHBREW_ARCH:=amd64}\" # TODO something smarter with arches\nexport BASHBREW_ARCH\n\n# TODO something less hacky than \"git archive\" hackery, like a \"bashbrew archive\" or \"bashbrew context\" or something\ntemplate='\n\ttempDir=\"$(mktemp -d)\"\n\t{{- \"\\n\" -}}\n\t{{- range $.Entries -}}\n\t\t{{- $arch := .HasArchitecture arch | ternary arch (.Architectures | first) -}}\n\t\t{{- /* cannot replace ArchDockerFroms with bashbrew fetch or the arch selector logic has to be duplicated 🥹*/ -}}\n\t\t{{- $froms := $.ArchDockerFroms $arch . -}}\n\t\t{{- $outDir := join \"_\" $.RepoName (.Tags | last) -}}\n\t\tgit -C \"{{ gitCache }}\" archive --format=tar\n\t\t{{- \" \" -}}\n\t\t{{- \"--prefix=\" -}}\n\t\t{{- $outDir -}}\n\t\t{{- \"/\" -}}\n\t\t{{- \" \" -}}\n\t\t{{- .ArchGitCommit $arch -}}\n\t\t{{- \":\" -}}\n\t\t{{- $dir := .ArchDirectory $arch -}}\n\t\t{{- (eq $dir \".\") | ternary \"\" $dir -}}\n\t\t{{- \"\\n\" -}}\n\t\tmkdir -p \"$tempDir/{{- $outDir -}}\" && echo \"{{- .ArchBuilder $arch -}}\" > \"$tempDir/{{- $outDir -}}/.bashbrew-builder\" && echo \"{{- .ArchFile $arch -}}\" > \"$tempDir/{{- $outDir -}}/.bashbrew-file\"\n\t\t{{- \"\\n\" -}}\n\t{{- end -}}\n\ttar -cC \"$tempDir\" . && rm -rf \"$tempDir\"\n'\n\n_tar-t() {\n\ttar -t \"$@\" \\\n\t\t| grep -vE \"$uninterestingTarballGrep\" \\\n\t\t| sed -e 's!^[.]/!!' \\\n\t\t\t-r \\\n\t\t\t-e 's!([/.-]|^)((lib)?(c?python|py)-?)[0-9]+([.][0-9]+)?([/.-]|$)!\\1\\2XXX\\6!g' \\\n\t\t| sort\n}\n\n_jq() {\n\tif [ \"$#\" -eq 0 ]; then\n\t\tset -- '.'\n\tfi\n\tjq --tab -S \"$@\"\n}\n\ncopy-tar() {\n\tlocal src=\"$1\"; shift\n\tlocal dst=\"$1\"; shift\n\n\tif [ -n \"$allFiles\" ]; then\n\t\tmkdir -p \"$dst\"\n\t\tcp -al \"$src\"/*/ \"$dst/\"\n\t\treturn\n\tfi\n\n\tlocal d indexes=() dockerfiles=()\n\tfor d in \"$src\"/*/.bashbrew-file; do\n\t\t[ -f \"$d\" ] || continue\n\t\tlocal bf; bf=\"$(< \"$d\")\"\n\t\tlocal dDir; dDir=\"$(dirname \"$d\")\"\n\t\tlocal builder; builder=\"$(< \"$dDir/.bashbrew-builder\")\"\n\t\tif [ \"$builder\" = 'oci-import' ]; then\n\t\t\tindexes+=( \"$dDir/$bf\" )\n\t\telse\n\t\t\tdockerfiles+=( \"$dDir/$bf\" )\n\t\t\tif [ \"$bf\" = 'Dockerfile' ]; then\n\t\t\t\t# if \"Dockerfile.builder\" exists, let's check that too (busybox, hello-world)\n\t\t\t\tif [ -f \"$dDir/$bf.builder\" ]; then\n\t\t\t\t\tdockerfiles+=( \"$dDir/$bf.builder\" )\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\t\trm \"$d\" \"$dDir/.bashbrew-builder\" # remove the \".bashbrew-*\" files we created\n\tdone\n\n\t# now that we're done with our globbing needs, let's disable globbing so it doesn't give us wrong answers\n\tlocal -\n\tset -o noglob\n\n\tfor i in \"${indexes[@]}\"; do\n\t\tlocal iName; iName=\"$(basename \"$i\")\"\n\t\tlocal iDir; iDir=\"$(dirname \"$i\")\"\n\t\tlocal iDirName; iDirName=\"$(basename \"$iDir\")\"\n\t\tlocal iDst=\"$dst/$iDirName\"\n\n\t\tmkdir -p \"$iDst\"\n\n\t\t_jq . \"$i\" > \"$iDst/$iName\"\n\n\t\tlocal digest\n\t\tdigest=\"$(jq -r --arg name \"$iName\" '\n\t\t\tif $name == \"index.json\" then\n\t\t\t\t.manifests[0].digest\n\t\t\telse\n\t\t\t\t.digest\n\t\t\tend\n\t\t' \"$i\")\"\n\n\t\tlocal blob=\"blobs/${digest//://}\"\n\t\tlocal blobDir; blobDir=\"$(dirname \"$blob\")\"\n\t\tlocal manifest=\"$iDir/$blob\"\n\t\tmkdir -p \"$iDst/$blobDir\"\n\t\t_jq . \"$manifest\" > \"$iDst/$blob\"\n\n\t\tlocal configDigest; configDigest=\"$(jq -r '.config.digest' \"$manifest\")\"\n\t\tlocal blob=\"blobs/${configDigest//://}\"\n\t\tlocal blobDir; blobDir=\"$(dirname \"$blob\")\"\n\t\tlocal config=\"$iDir/$blob\"\n\t\tmkdir -p \"$iDst/$blobDir\"\n\t\t_jq . \"$config\" > \"$iDst/$blob\"\n\n\t\tlocal layers\n\t\tlayers=\"$(jq -r '[ .layers[].digest | @sh ] | join(\" \")' \"$manifest\")\"\n\t\teval \"layers=( $layers )\"\n\t\tlocal layerDigest\n\t\tfor layerDigest in \"${layers[@]}\"; do\n\t\t\tlocal blob=\"blobs/${layerDigest//://}\"\n\t\t\tlocal blobDir; blobDir=\"$(dirname \"$blob\")\"\n\t\t\tlocal layer=\"$iDir/$blob\"\n\t\t\tmkdir -p \"$iDst/$blobDir\"\n\t\t\t_tar-t -f \"$layer\" > \"$iDst/$blob  'tar -t'\"\n\t\tdone\n\tdone\n\n\tfor d in \"${dockerfiles[@]}\"; do\n\t\tlocal dDir; dDir=\"$(dirname \"$d\")\"\n\t\tlocal dDirName; dDirName=\"$(basename \"$dDir\")\"\n\n\t\t# TODO choke on \"syntax\" parser directive\n\t\t# TODO handle \"escape\" parser directive reasonably\n\t\tlocal flatDockerfile; flatDockerfile=\"$(\n\t\t\tgawk '\n\t\t\t\tBEGIN { line = \"\" }\n\t\t\t\t/^[[:space:]]*#/ {\n\t\t\t\t\tgsub(/^[[:space:]]+/, \"\")\n\t\t\t\t\tprint\n\t\t\t\t\tnext\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tif (match($0, /^(.*)(\\\\[[:space:]]*)$/, m)) {\n\t\t\t\t\t\tline = line m[1]\n\t\t\t\t\t\tnext\n\t\t\t\t\t}\n\t\t\t\t\tprint line $0\n\t\t\t\t\tline = \"\"\n\t\t\t\t}\n\t\t\t' \"$d\"\n\t\t)\"\n\n\t\tlocal IFS=$'\\n'\n\t\tlocal copyAddContext; copyAddContext=\"$(awk '\n\t\t\ttoupper($1) == \"COPY\" || toupper($1) == \"ADD\" {\n\t\t\t\tfor (i = 2; i < NF; i++) {\n\t\t\t\t\tif ($i ~ /^--from=/) {\n\t\t\t\t\t\tnext\n\t\t\t\t\t}\n\t\t\t\t\t# COPY and ADD options\n\t\t\t\t\tif ($i ~ /^--(chown|chmod|link|parents|exclude)=/) {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\t# additional ADD options\n\t\t\t\t\tif ($i ~ /^--(keep-git-dir|checksum)=/) {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tfor ( ; i < NF; i++) {\n\t\t\t\t\t\tprint $i\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t' <<<\"$flatDockerfile\")\"\n\t\tlocal dBase; dBase=\"$(basename \"$d\")\"\n\t\tlocal files=(\n\t\t\t\"$dBase\"\n\t\t\t$copyAddContext\n\n\t\t\t# some extra files which are likely interesting if they exist, but no big loss if they do not\n\t\t\t' .dockerignore' # will be used automatically by \"docker build\"\n\t\t\t' *.manifest' # debian/ubuntu \"package versions\" list\n\t\t\t' *.ks' # fedora \"kickstart\" (rootfs build script)\n\t\t\t' build*.txt' # ubuntu \"build-info.txt\", debian \"build-command.txt\"\n\n\t\t\t# usefulness yet to be proven:\n\t\t\t#' *.log'\n\t\t\t#' {MD5,SHA1,SHA256}SUMS'\n\t\t\t#' *.{md5,sha1,sha256}'\n\n\t\t\t# (the space prefix is removed below and is used to ignore non-matching globs so that bad \"Dockerfile\" entries appropriately lead to failure)\n\t\t)\n\t\tunset IFS\n\n\t\tmkdir -p \"$dst/$dDirName\"\n\n\t\tlocal f origF failureMatters\n\t\tfor origF in \"${files[@]}\"; do\n\t\t\tf=\"${origF# }\" # trim off leading space (indicates we don't care about failure)\n\t\t\t[ \"$f\" = \"$origF\" ] && failureMatters=1 || failureMatters=\n\n\t\t\tlocal globbed\n\t\t\t# \"find: warning: -path ./xxx/ will not match anything because it ends with /.\"\n\t\t\tlocal findGlobbedPath=\"${f%/}\"\n\t\t\tfindGlobbedPath=\"${findGlobbedPath#./}\"\n\t\t\tlocal globbedStr; globbedStr=\"$(cd \"$dDir\" && find -path \"./$findGlobbedPath\")\"\n\t\t\tlocal -a globbed=( $globbedStr )\n\t\t\tif [ \"${#globbed[@]}\" -eq 0 ]; then\n\t\t\t\tglobbed=( \"$f\" )\n\t\t\tfi\n\n\t\t\tlocal g\n\t\t\tfor g in \"${globbed[@]}\"; do\n\t\t\t\tlocal srcG=\"$dDir/$g\" dstG=\"$dst/$dDirName/$g\"\n\n\t\t\t\tif [ -z \"$failureMatters\" ] && [ ! -e \"$srcG\" ]; then\n\t\t\t\t\tcontinue\n\t\t\t\tfi\n\n\t\t\t\tlocal gDir; gDir=\"$(dirname \"$dstG\")\"\n\t\t\t\tmkdir -p \"$gDir\"\n\t\t\t\tcp -alT \"$srcG\" \"$dstG\"\n\n\t\t\t\tif [ -n \"$listTarballContents\" ]; then\n\t\t\t\t\tcase \"$g\" in\n\t\t\t\t\t\t*.tar.* | *.tgz)\n\t\t\t\t\t\t\tif [ -s \"$dstG\" ]; then\n\t\t\t\t\t\t\t\t_tar-t -f \"$dstG\" > \"$dstG  'tar -t'\"\n\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\t;;\n\t\t\t\t\tesac\n\t\t\t\tfi\n\t\t\tdone\n\t\tdone\n\tdone\n}\n\n# a \"bashbrew cat\" template that gives us the last / \"least specific\" tags for the arguments\n# (in other words, this is \"bashbrew list --uniq\" but last instead of first)\ntemplateLastTags='\n\t{{- range .TagEntries -}}\n\t\t{{- $.RepoName -}}\n\t\t{{- \":\" -}}\n\t\t{{- .Tags | last -}}\n\t\t{{- \"\\n\" -}}\n\t{{- end -}}\n'\n\n_metadata-files() {\n\tif [ \"$#\" -gt 0 ]; then\n\t\tbashbrew list \"$@\" 2>>temp/_bashbrew.err | sort -uV > temp/_bashbrew-list || :\n\n\t\tbashbrew cat --format '{{ range .Entries }}{{ range .Architectures }}{{ . }}{{ \"\\n\" }}{{ end }}{{ end }}' \"$@\" 2>>temp/_bashbrew.err | sort -u > temp/_bashbrew-arches || :\n\n\t\t\"$diffDir/_bashbrew-cat-sorted.sh\" \"$@\" 2>>temp/_bashbrew.err > temp/_bashbrew-cat || :\n\n\t\t# piping \"bashbrew list\" first so that .TagEntries is filled up (keeping \"templateLastTags\" simpler)\n\t\t# sorting that by version number so it's ~stable\n\t\t# then doing --build-order on that, which is a \"stable sort\"\n\t\t# then redoing that list back into \"templateLastTags\" so we get the tags we want listed (not the tags \"--uniq\" chooses)\n\t\tbashbrew list --uniq \"$@\" \\\n\t\t\t| xargs -r bashbrew cat --format \"$templateLastTags\" \\\n\t\t\t| sort -V \\\n\t\t\t| xargs -r bashbrew list --uniq --build-order 2>>temp/_bashbrew.err \\\n\t\t\t| xargs -r bashbrew cat --format \"$templateLastTags\" 2>>temp/_bashbrew.err \\\n\t\t\t> temp/_bashbrew-list-build-order || :\n\n\t\t# oci images can't be fetched with ArchDockerFroms\n\t\t# todo: use each first arch instead of current arch\n\t\tbashbrew fetch --arch-filter \"$@\"\n\t\tscript=\"$(bashbrew cat --format \"$template\" \"$@\")\"\n\t\tmkdir tar\n\t\t( eval \"$script\" | tar -xiC tar )\n\t\tcopy-tar tar temp\n\t\trm -rf tar\n\n\t\t# TODO we should *also* validate that our lists ended up non-empty 😬\n\t\tcat >&2 temp/_bashbrew.err\n\tfi\n\n\tif [ -n \"$externalPins\" ] && command -v crane &> /dev/null; then\n\t\tlocal file\n\t\tfor file in $externalPins; do\n\t\t\t[ -e \"oi/$file\" ] || continue\n\t\t\tlocal pin digest dir\n\t\t\tpin=\"$(\"$diffDir/.external-pins/tag.sh\" \"$file\")\"\n\t\t\tdigest=\"$(< \"oi/$file\")\"\n\t\t\tdir=\"temp/$file\"\n\t\t\tmkdir -p \"$dir\"\n\t\t\tbashbrew remote arches --json \"$pin@$digest\" | _jq > \"$dir/bashbrew.json\"\n\t\t\tlocal manifests manifest\n\t\t\tmanifests=\"$(jq -r '\n\t\t\t\t[ (\n\t\t\t\t\t.arches\n\t\t\t\t\t| if has(env.BASHBREW_ARCH) then\n\t\t\t\t\t\t.[env.BASHBREW_ARCH]\n\t\t\t\t\telse\n\t\t\t\t\t\t.[keys_unsorted | first]\n\t\t\t\t\tend\n\t\t\t\t)[].digest | @sh ]\n\t\t\t\t| join(\" \")\n\t\t\t' \"$dir/bashbrew.json\")\"\n\t\t\teval \"manifests=( $manifests )\"\n\t\t\tfor manifest in \"${manifests[@]}\"; do\n\t\t\t\tcrane manifest \"$pin@$manifest\" | _jq > \"$dir/manifest-${manifest//:/_}.json\"\n\t\t\t\tlocal config\n\t\t\t\tconfig=\"$(jq -r '.config.digest' \"$dir/manifest-${manifest//:/_}.json\")\"\n\t\t\t\tcrane blob \"$pin@$config\" | _jq > \"$dir/manifest-${manifest//:/_}-config.json\"\n\t\t\tdone\n\t\tdone\n\tfi\n}\n\nmkdir temp\ngit -C temp init --quiet\ngit -C temp config user.name 'Bogus'\ngit -C temp config user.email 'bogus@bogus'\n\n# handle \"new-image\" PRs gracefully\nfor img; do touch \"$BASHBREW_LIBRARY/$img\"; [ -s \"$BASHBREW_LIBRARY/$img\" ] || echo 'Maintainers: New Image! :D (@docker-library-bot)' > \"$BASHBREW_LIBRARY/$img\"; done\n\n_metadata-files \"$@\"\ngit -C temp add . || :\ngit -C temp commit --quiet --allow-empty -m 'initial' || :\n\ngit -C oi clean --quiet --force\ngit -C oi checkout --quiet pull\n\n# handle \"deleted-image\" PRs gracefully :(\nfor img; do touch \"$BASHBREW_LIBRARY/$img\"; [ -s \"$BASHBREW_LIBRARY/$img\" ] || echo 'Maintainers: Deleted Image D: (@docker-library-bot)' > \"$BASHBREW_LIBRARY/$img\"; done\n\ngit -C temp rm --quiet -rf . || :\n\n_metadata-files \"$@\"\ngit -C temp add .\n\ngit -C temp diff \\\n\t--find-copies-harder \\\n\t--find-copies=\"$findCopies\" \\\n\t--find-renames=\"$findCopies\" \\\n\t--ignore-blank-lines \\\n\t--ignore-space-at-eol \\\n\t--ignore-space-change \\\n\t--irreversible-delete \\\n\t--minimal \\\n\t--staged\n"
        },
        {
          "name": "library",
          "type": "tree",
          "content": null
        },
        {
          "name": "naughty-commits.sh",
          "type": "blob",
          "size": 3.45703125,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\nfileSizeThresholdMB='2'\n\nexport BASHBREW_ARCH=\n\ngitCache=\"$(bashbrew cat --format '{{ gitCache }}' <(echo 'Maintainers: empty hack (@example)'))\"\n_git() {\n\tgit -C \"$gitCache\" \"$@\"\n}\n\nif [ \"$#\" -eq 0 ]; then\n\tset -- '--all'\nfi\n\nimgs=\"$(bashbrew list --repos \"$@\" | sort -u)\"\nfor img in $imgs; do\n\tbashbrew fetch \"$img\" # force `git fetch`\n\tcommits=\"$(\n\t\tbashbrew cat --format '\n\t\t\t{{- range $e := .Entries -}}\n\t\t\t\t{{- range $a := .Architectures -}}\n\t\t\t\t\t{\n\t\t\t\t\t\t{{- json \"GitRepo\" }}:{{ json ($e.ArchGitRepo $a) -}},\n\t\t\t\t\t\t{{- json \"GitFetch\" }}:{{ json ($e.ArchGitFetch $a) -}},\n\t\t\t\t\t\t{{- json \"GitCommit\" }}:{{ json ($e.ArchGitCommit $a) -}}\n\t\t\t\t\t}\n\t\t\t\t\t{{- \"\\n\" -}}\n\t\t\t\t{{- end -}}\n\t\t\t{{- end -}}\n\t\t' \"$img\" | jq -s 'unique'\n\t)\"\n\n\tdeclare -A naughtyCommits=() naughtyTopCommits=() seenCommits=()\n\tlength=\"$(jq -r 'length' <<<\"$commits\")\"\n\tfor (( i = 0; i < length; i++ )); do\n\t\ttopCommit=\"$(jq -r \".[$i].GitCommit\" <<<\"$commits\")\"\n\t\tgitRepo=\"$(jq -r \".[$i].GitRepo\" <<<\"$commits\")\"\n\t\tgitFetch=\"$(jq -r \".[$i].GitFetch\" <<<\"$commits\")\"\n\n\t\tif ! _git fetch --quiet \"$gitRepo\" \"$gitFetch:\" ; then\n\t\t\tnaughtyCommits[$topCommit]=\"unable to to fetch specified GitFetch: $gitFetch\"\n\t\t\tnaughtyTopCommits[$topCommit]=\"$topCommit\"\n\t\telif ! _git merge-base --is-ancestor \"$topCommit\" 'FETCH_HEAD'; then\n\t\t\t# check that the commit is in the GitFetch branch specified\n\t\t\tnaughtyCommits[$topCommit]=\"is not in the specified ref GitFetch: $gitFetch\"\n\t\t\tnaughtyTopCommits[$topCommit]=\"$topCommit\"\n\t\tfi\n\n\t\tIFS=$'\\n'\n\t\tpotentiallyNaughtyGlobs=( '**.tar**' )\n\t\tpotentiallyNaughtyCommits=( $(_git log --diff-filter=DMT --format='format:%H' \"$topCommit\" -- \"${potentiallyNaughtyGlobs[@]}\") )\n\t\tunset IFS\n\n\t\t# bash 4.3 sucks (https://stackoverflow.com/a/7577209/433558)\n\t\t[ \"${#potentiallyNaughtyCommits[@]}\" -gt 0 ] || continue\n\n\t\tfor commit in \"${potentiallyNaughtyCommits[@]}\"; do\n\t\t\t[ -z \"${seenCommits[$commit]:-}\" ] || break\n\t\t\tseenCommits[$commit]=1\n\n\t\t\tIFS=$'\\n'\n\t\t\tbinaryFiles=( $(\n\t\t\t\t_git diff-tree --no-commit-id -r --numstat --diff-filter=DMT \"$commit\" -- \"${potentiallyNaughtyGlobs[@]}\" \\\n\t\t\t\t\t| grep '^-' \\\n\t\t\t\t\t| cut -d$'\\t' -f3- \\\n\t\t\t\t\t|| :\n\t\t\t) )\n\t\t\tunset IFS\n\n\t\t\t# bash 4.3 sucks (https://stackoverflow.com/a/7577209/433558)\n\t\t\t[ \"${#binaryFiles[@]}\" -gt 0 ] || continue\n\n\t\t\tnaughtyReasons=()\n\t\t\tfor file in \"${binaryFiles[@]}\"; do\n\t\t\t\tfileSize=\"$(_git ls-tree -r --long \"$commit\" -- \"$file\" | awk '{ print $4 }')\"\n\t\t\t\tfileSizeMB=\"$(( fileSize / 1024 / 1024 ))\"\n\t\t\t\tif [ \"$fileSizeMB\" -gt \"$fileSizeThresholdMB\" ]; then\n\t\t\t\t\tnaughtyReasons+=( \"modified binary file (larger than ${fileSizeThresholdMB}MB): $file (${fileSizeMB}MB)\" )\n\t\t\t\tfi\n\t\t\tdone\n\n\t\t\tif [ \"${#naughtyReasons[@]}\" -gt 0 ]; then\n\t\t\t\t: \"${naughtyCommits[$commit]:=}\"\n\t\t\t\tif [ -n \"${naughtyCommits[$commit]}\" ]; then\n\t\t\t\t\tnaughtyCommits[$commit]+=$'\\n'\n\t\t\t\tfi\n\t\t\t\tIFS=$'\\n'\n\t\t\t\tnaughtyCommits[$commit]+=\"${naughtyReasons[*]}\"\n\t\t\t\tunset IFS\n\t\t\t\tnaughtyTopCommits[$commit]=\"$topCommit\"\n\t\t\tfi\n\t\tdone\n\tdone\n\n\tif [ \"${#naughtyCommits[@]}\" -gt 0 ]; then\n\t\techo \" - $img:\"\n\t\tfor naughtyCommit in \"${!naughtyCommits[@]}\"; do\n\t\t\tnaughtyReasons=\"${naughtyCommits[$naughtyCommit]}\"\n\t\t\tnaughtyTopCommit=\"${naughtyTopCommits[$naughtyCommit]}\"\n\t\t\tif [ \"$naughtyTopCommit\" != \"$naughtyCommit\" ]; then\n\t\t\t\t#commitsBetween=\"$(_git rev-list --count \"$naughtyCommit...$naughtyTopCommit\")\"\n\t\t\t\tnaughtyCommit+=\" (in history of $naughtyTopCommit)\"\n\t\t\tfi\n\t\t\techo \"   - commit $naughtyCommit:\"\n\t\t\tsed -e 's/^/     - /' <<<\"$naughtyReasons\"\n\t\tdone\n\t\techo\n\tfi\ndone\n"
        },
        {
          "name": "naughty-constraints.sh",
          "type": "blob",
          "size": 2.6904296875,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\nexport BASHBREW_ARCH=\n\nif [ \"$#\" -eq 0 ]; then\n\tset -- '--all'\nfi\n\n_windows_constraint() {\n\tlocal from=\"$1\"; shift\n\tlocal repo=\"${from%:*}\"\n\tlocal tag=\"${from#$repo:}\"\n\n\tlocal constraint\n\tcase \"$repo\" in\n\t\tmcr.microsoft.com/windows/nanoserver | microsoft/nanoserver) constraint='nanoserver' ;;\n\t\tmcr.microsoft.com/windows/servercore | microsoft/windowsservercore) constraint='windowsservercore' ;;\n\t\t*) echo >&2 \"error: unknown Windows image: $from\"; exit 1 ;;\n\tesac\n\n\tif [ \"$tag\" != 'latest' ]; then\n\t\tconstraint+=\"-$tag\"\n\tfi\n\n\techo \"$constraint\"\n}\n\n_expected_constraints() {\n\tlocal from=\"$1\"; shift\n\n\tlocal fromConstraints\n\tif fromConstraints=\"$(bashbrew cat --format '{{ .TagEntry.Constraints | join \"\\n\" }}' \"$from\" 2>/dev/null)\" && [ -n \"$fromConstraints\" ]; then\n\t\techo \"$fromConstraints\"\n\t\treturn\n\tfi\n\n\tcase \"$from\" in\n\t\t*microsoft*) _windows_constraint \"$from\" ;;\n\tesac\n\n\treturn\n}\n\n_arches() {\n\tbashbrew cat --format '\n\t\t{{- range .TagEntries -}}\n\t\t\t{{- .Architectures | join \"\\n\" -}}\n\t\t\t{{- \"\\n\" -}}\n\t\t{{- end -}}\n\t' \"$@\" | sort -u\n}\n\n_froms() {\n\tbashbrew cat --format '\n\t\t{{- range .TagEntries -}}\n\t\t\t{{- $.DockerFroms . | join \"\\n\" -}}\n\t\t\t{{- \"\\n\" -}}\n\t\t{{- end -}}\n\t' \"$@\" | sort -u\n}\n\ndeclare -A naughtyFromsArches=(\n\t#[img:tag=from:tag]='arch arch ...'\n)\nnaughtyFroms=()\ndeclare -A allNaughty=(\n\t#[img:tag]=1\n)\n\ntags=\"$(bashbrew --namespace '' list --uniq \"$@\" | sort -u)\"\nfor img in $tags; do\n\tarches=\"$(_arches \"$img\")\"\n\tconstraints=\"$(bashbrew cat --format '{{ .TagEntry.Constraints | join \"\\n\" }}' \"$img\" | sort -u)\"\n\tdeclare -A imgMissing=()\n\tdeclare -A imgExtra=()\n\tfor BASHBREW_ARCH in $arches; do\n\t\texport BASHBREW_ARCH\n\n\t\tfroms=\"$(_froms \"$img\")\"\n\t\t[ -n \"$froms\" ] # rough sanity check\n\n\t\tallExpected=\n\t\tfor from in $froms; do\n\t\t\texpected=\"$(_expected_constraints \"$from\")\"\n\t\t\tallExpected=\"$(sort -u <<<\"$allExpected\"$'\\n'\"$expected\")\"\n\t\tdone\n\t\tmissing=\"$(comm -13 <(echo \"$constraints\") <(echo \"$allExpected\"))\"\n\t\tif [ -n \"$missing\" ]; then\n\t\t\timgMissing[$from]+=$'\\n'\"$missing\"\n\t\tfi\n\t\textra=\"$(comm -23 <(echo \"$constraints\") <(echo \"$allExpected\"))\"\n\t\tif [ -n \"$extra\" ]; then\n\t\t\timgExtra[$from]+=$'\\n'\"$extra\"\n\t\tfi\n\tdone\n\tif [ \"${#imgMissing[@]}\" -gt 0 ]; then\n\t\tfor from in $(IFS=$'\\n'; sort -u <<<\"${!imgMissing[*]}\"); do\n\t\t\tmissing=\"${imgMissing[$from]}\"\n\t\t\tmissing=\"$(sed '/^$/d' <<<\"$missing\" | sort -u)\"\n\t\t\techo \" - $img -- missing constraints (FROM $from):\"\n\t\t\tsed 's/^/   - /' <<<\"$missing\"\n\t\tdone\n\tfi\n\tif [ \"${#imgExtra[@]}\" -gt 0 ]; then\n\t\tfor from in $(IFS=$'\\n'; sort -u <<<\"${!imgExtra[*]}\"); do\n\t\t\textra=\"${imgExtra[$from]}\"\n\t\t\textra=\"$(sed '/^$/d' <<<\"$extra\" | sort -u)\"\n\t\t\techo \" - $img -- extra constraints (FROM $from):\"\n\t\t\tsed 's/^/   - /' <<<\"$extra\"\n\t\tdone\n\tfi\ndone\n"
        },
        {
          "name": "naughty-from.sh",
          "type": "blob",
          "size": 3.3154296875,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\nexport BASHBREW_ARCH=\n\nif [ \"$#\" -eq 0 ]; then\n\tset -- '--all'\nfi\n\nexternalPinsDir=\"$(dirname \"$BASH_SOURCE\")/.external-pins\"\ndeclare -A externalPinsArchesCache=(\n\t#[img:tag]='[\"arch\",\"arch\",...]' # (json array of strings)\n)\n_is_naughty() {\n\tlocal from=\"$1\"; shift\n\n\tcase \"$from\" in\n\t\t# \"scratch\" isn't a real image and is always permissible (on non-Windows)\n\t\tscratch)\n\t\t\tcase \"$BASHBREW_ARCH\" in\n\t\t\t\twindows-*) return 0 ;; # can't use \"FROM scratch\" on Windows\n\t\t\t\t*)         return 1 ;; # can use \"FROM scratch\" everywhere else\n\t\t\tesac\n\t\t\t;;\n\n\t\t*/*)\n\t\t\t# must be external, let's check our pins for acceptability\n\t\t\tlocal externalPinFile=\"$externalPinsDir/${from/:/___}\" # see \".external-pins/list.sh\"\n\t\t\tif [ -s \"$externalPinFile\" ]; then\n\t\t\t\tlocal digest\n\t\t\t\tdigest=\"$(< \"$externalPinFile\")\"\n\t\t\t\tfrom+=\"@$digest\"\n\t\t\telse\n\t\t\t\t# not pinned, must not be acceptable\n\t\t\t\treturn 0\n\t\t\tfi\n\t\t\t;;\n\tesac\n\n\tcase \"$from\" in\n\t\t*/*@sha256:*)\n\t\t\tif [ -z \"${externalPinsArchesCache[\"$from\"]:-}\" ]; then\n\t\t\t\tlocal remoteArches\n\t\t\t\tif remoteArches=\"$(bashbrew remote arches --json \"$from\" | jq -c '.arches | keys')\"; then\n\t\t\t\t\texternalPinsArchesCache[\"$from\"]=\"$remoteArches\"\n\t\t\t\telse\n\t\t\t\t\techo >&2 \"warning: failed to query supported architectures of '$from'\"\n\t\t\t\t\texternalPinsArchesCache[\"$from\"]='[]'\n\t\t\t\tfi\n\t\t\tfi\n\t\t\tif jq <<<\"${externalPinsArchesCache[\"$from\"]}\" -e 'index(env.BASHBREW_ARCH)' > /dev/null; then\n\t\t\t\t# hooray, a supported architecture!\n\t\t\t\treturn 1\n\t\t\tfi\n\t\t\t;;\n\n\t\t*)\n\t\t\t# must be some other official image AND support our current architecture\n\t\t\tlocal archSupported\n\t\t\tif archSupported=\"$(bashbrew cat --format '{{ .TagEntry.HasArchitecture arch | ternary arch \"\" }}' \"$from\")\" && [ -n \"$archSupported\" ]; then\n\t\t\t\treturn 1\n\t\t\tfi\n\t\t\t;;\n\tesac\n\n\treturn 0\n}\n\n_arches() {\n\tbashbrew cat --format '\n\t\t{{- range .TagEntries -}}\n\t\t\t{{- .Architectures | join \"\\n\" -}}\n\t\t\t{{- \"\\n\" -}}\n\t\t{{- end -}}\n\t' \"$@\" | sort -u\n}\n\n_froms() {\n\tbashbrew cat --format '\n\t\t{{- range .TagEntries -}}\n\t\t\t{{- $.DockerFroms . | join \"\\n\" -}}\n\t\t\t{{- \"\\n\" -}}\n\t\t{{- end -}}\n\t' \"$@\" | sort -u\n}\n\ndeclare -A naughtyFromsArches=(\n\t#[img:tag=from:tag]='arch arch ...'\n)\nnaughtyFroms=()\ndeclare -A allNaughty=(\n\t#[img:tag]=1\n)\n\ntags=\"$(bashbrew --namespace '' list --uniq \"$@\" | sort -u)\"\nfor img in $tags; do\n\tarches=\"$(_arches \"$img\")\"\n\thasNice= # do we have _any_ arches that aren't naughty? (so we can make the message better if not)\n\tfor BASHBREW_ARCH in $arches; do\n\t\texport BASHBREW_ARCH\n\n\t\tfroms=\"$(_froms \"$img\")\"\n\t\t[ -n \"$froms\" ] # rough sanity check\n\n\t\tfor from in $froms; do\n\t\t\tif _is_naughty \"$from\"; then\n\t\t\t\tif [ -z \"${naughtyFromsArches[\"$img=$from\"]:-}\" ]; then\n\t\t\t\t\tnaughtyFroms+=( \"$img=$from\" )\n\t\t\t\telse\n\t\t\t\t\tnaughtyFromsArches[\"$img=$from\"]+=', '\n\t\t\t\tfi\n\t\t\t\tnaughtyFromsArches[\"$img=$from\"]+=\"$BASHBREW_ARCH\"\n\t\t\telse\n\t\t\t\thasNice=1\n\t\t\tfi\n\t\tdone\n\tdone\n\n\tif [ -z \"$hasNice\" ]; then\n\t\tallNaughty[\"$img\"]=1\n\tfi\ndone\n\nfor naughtyFrom in \"${naughtyFroms[@]:-}\"; do\n\t[ -n \"$naughtyFrom\" ] || continue # https://mywiki.wooledge.org/BashFAQ/112#BashFAQ.2F112.line-8 (empty array + \"set -u\" + bash 4.3 == sad day)\n\timg=\"${naughtyFrom%%=*}\"\n\tfrom=\"${naughtyFrom#$img=}\"\n\tif [ -n \"${allNaughty[\"$img\"]:-}\" ]; then\n\t\techo \" - $img (FROM $from) -- completely unsupported base!\"\n\telse\n\t\tarches=\"${naughtyFromsArches[$naughtyFrom]}\"\n\t\techo \" - $img (FROM $from) [$arches]\"\n\tfi\ndone\n"
        },
        {
          "name": "naughty-sharedtags.sh",
          "type": "blob",
          "size": 1.7451171875,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\nif [ \"$#\" -eq 0 ]; then\n\tset -- '--all'\nfi\n\nbashbrew cat --format '\n\t{{- range $e := .Entries -}}\n\t\t{{- range $t := .SharedTags -}}\n\t\t\t{{- \"{\" -}}\n\t\t\t\t\"sharedTag\": {{ join \":\" $.RepoName $t | json }},\n\t\t\t\t\"tag\": {{ join \":\" $.RepoName ($e.Tags | first) | json }},\n\t\t\t\t\"arches\": {{ $e.Architectures | json }}\n\t\t\t{{- \"}\\n\" -}}\n\t\t{{- end -}}\n\t{{- end -}}\n' \"$@\" | jq -rn '\n\t# collect map of \"shared tag -> all architectures\" (combining shared tags back together, respecting/keeping duplicates, since that is what this is testing for)\n\treduce inputs as $in ({}; .[$in.sharedTag] |= (. // {} | .arches += $in.arches | .tags += [$in.tag]))\n\t# convert that into a map of \"shared tags -> same architecture list\" (just to shrink the problem set and make it easier to look at/think about)\n\t| reduce to_entries[] as $in ([];\n\t\t(path(first(.[] | select(.value.arches == $in.value.arches))) // [length]) as $i\n\t\t| .[$i[0]] |= (\n\t\t\t.key |= if . then \"\\(.), \\($in.key)\" else $in.key end\n\t\t\t| .value //= $in.value\n\t\t)\n\t)\n\t| map(\n\t\t# filter down to just entries with duplicates (ignoring Windows duplicates, since duplicating them is the primary use case of SharedTags in the first place)\n\t\t.value.arches |= (\n\t\t\t# TODO we *should* try to further verify that there is only one copy of each underlying Windows version here (not 2x \"ltsc2022\" for example), but that is a much more difficult query to automate\n\t\t\t. - [\"windows-amd64\"]\n\t\t\t# trim the list down to just the duplicates (so the error is more obvious)\n\t\t\t| group_by(.)\n\t\t\t| map(select(length > 1))\n\t\t\t| flatten\n\t\t)\n\t\t| select(.value.arches | length > 0)\n\t\t| \" - \\(.key): (duplicate architectures in SharedTags; \\(.value.tags | join(\", \")))\\([ \"\", .value.arches[] ] | join(\"\\n   - \"))\"\n\t)\n\t| join(\"\\n\\n\")\n'\n"
        },
        {
          "name": "pr-urls.sh",
          "type": "blob",
          "size": 0.8798828125,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\n#\n# usage:\n#   $ ./pr-urls.sh PR-NUMBER\n#   $ ./pr-urls.sh PR-NUMBER IMAGE1 IMAGE2:TAG1 IMAGE3:TAG2\n#\n#   $ ./pr-urls.sh 12072\n#   $ ./pr-urls.sh 12072 hello-world:linux\n#   $ ./pr-urls.sh 12072 | xargs -rt bashbrew build\n#   $ ./pr-urls.sh 12072 | xargs -rt bashbrew list --uniq\n#   $ ./pr-urls.sh 12072 | xargs -rt bashbrew list --uniq | xargs -rt ./test/run.sh\n#\n# (rough replacement for the old \"test-pr.sh\" script and its associated complexity)\n#\n\npr=\"$1\"\nshift\n\npatch=\"$(wget -qO- \"https://github.com/docker-library/official-images/pull/$pr.patch\")\"\n\ncommit=\"$(grep <<<\"$patch\" -oE '^From [0-9a-f]+ ' | tail -1 | cut -d' ' -f2)\"\n\nif [ \"$#\" -eq 0 ]; then\n\tfiles=\"$(grep <<<\"$patch\" -oE '^[+]{3} b/library/.+' | cut -d/ -f3 | sort -u)\"\n\tset -- $files\nfi\n\nfor file; do\n\techo \"https://github.com/docker-library/official-images/raw/$commit/library/$file\"\ndone\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "toc.sh",
          "type": "blob",
          "size": 1.67578125,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\nself=\"$(basename \"$0\")\"\nusage() {\n\tcat <<-EOU\n\t\tusage: $self path/to/README.md\n\t\t   eg: $self README.md\n\n\t\tWARNING: if README.md has the TOC-replacement comments,\n\t\t         README.md.bak will be clobbered and the TOC will be inserted\n\tEOU\n}\n\nreadme=\"${1:-}\"\nif ! shift || [ ! -f \"$readme\" ]; then usage >&2; exit 1; fi\n\ntoc=\"$(\n\tgawk '\n\t\t# ignore comments in code blocks, which are not headers but look like them\n\t\t/^```/ { ignore = !ignore }\n\n\t\t/^#/ && !ignore {\n\t\t\tlevel = length($1)\n\t\t\t$1 = \"\"\n\t\t\tgsub(/^[[:space:]]|[[:space:]]$/, \"\")\n\n\t\t\t++levelCounter[level]\n\t\t\tfor (i in levelCounter) {\n\t\t\t\tif (i > level) {\n\t\t\t\t\tlevelCounter[i] = 0\n\t\t\t\t}\n\t\t\t}\n\t\t\tprefix = levelCounter[level] \".\\t\"\n\t\t\tfor (i = 1; i < level; ++i) {\n\t\t\t\tprefix = \"\\t\" prefix\n\t\t\t}\n\n\t\t\t# https://github.com/thlorenz/anchor-markdown-header/blob/56f77a232ab1915106ad1746b99333bf83ee32a2/anchor-markdown-header.js#L20-L30\n\t\t\thash = tolower($0)\n\t\t\tgsub(/ /, \"-\", hash)\n\t\t\tgsub(/[\\/?!:\\[\\]`.,()*\"'\"'\"';{}+=<>~\\$|#@&–—]/, \"\", hash)\n\t\t\tgsub(/[。？！，、；：“”【】（）〔〕［］﹃﹄“ ”‘’﹁﹂—…－～《》〈〉「」]/, \"\", hash)\n\n\t\t\tprintf \"%s[%s](#%s)\\n\", prefix, $0, hash\n\t\t}\n\t' \"$readme\"\n)\"\n\ntoFile=\"${readme}.bak\"\ngawk -v toFile=\"$toFile\" -v toc=\"$toc\" '\n\tBEGIN { printf \"\" > toFile }\n\t/^<!-- AUTOGENERATED TOC -->$/ {\n\t\tinToc = !inToc\n\t\tseenToc = 1\n\t\tif (inToc) {\n\t\t\tprint >> toFile\n\t\t\tprint \"\" >> toFile\n\t\t\tprint toc >> toFile\n\t\t\tprint \"\" >> toFile\n\t\t\tprint >> toFile\n\t\t}\n\t\tnext\n\t}\n\t!inToc { print >> toFile }\n\tEND { if (!seenToc) { close(toFile); printf \"\" > toFile } }\n' \"$readme\"\n\nif [ -s \"$toFile\" ]; then\n\tmv \"$toFile\" \"$readme\"\nelse\n\trm \"$toFile\"\n\techo \"$toc\"\nfi\n"
        }
      ]
    }
  ]
}