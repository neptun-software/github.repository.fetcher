{
  "metadata": {
    "timestamp": 1736568880612,
    "page": 82,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "andreafabrizi/Dropbox-Uploader",
      "stars": 6574,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0224609375,
          "content": ".AppleDouble\n.DS_Store\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 8.24609375,
          "content": "# CHANGELOG\n\n## Version _._ - __ ___ 20__\n* Fix issue #371: Creating directory exits 1 if it already exists\n\n## Version 1.0 - 10 Aug 2016\n* Add search option\n* Increase chunk size to 50MB for better performance\n* Add testUnit script\n* Upgrade to API v2\n* Fix #278: Documentation issue for command line\n* Add -h option to show human readable file sizes\n* Fix issue #240: the connection is retried in case of error for chunked uploads\n* The file name encoding problems including the issue #139 should be fixed now\n* Add system info to debug output\n* Fix issue #230: Version String isn't updated in dropbox_uploader\n* Fixed issue #227\n\n## Version 0.16 - 31 Jul 2015\n* Add saveurl command to download remote files directly into a dropbox folder\n* Fixed issue #174: $DU needs quoting in dropShell\n* The share command will now return by default the short url\n* Improved portability of the file_size function\n* Fixed minor bash compatibility issue in the urlencode function\n* Improved normalize_path function and minor fix\n* Removed deprecated db_free_quota function\n\n## Version 0.15 - 08 Jun 2015\n* Fix issue #163, List only show folders but not files\n* Fix issue #168, Share call not returning a share link\n* Fix issue #172, list command always return an unnamed dir on an empty directory\n* Fix issue #165, Issue with uploading a file to a folder\n* Fix issue #162, Uploading a folder to a folder that already exists on dropbox has unexpected behaviour\n* Updated setup procedure\n\n## Version 0.14 - 15 Jul 2014\n* Fix issue #112, replaced bash condition -f with -e\n* Fix issue #117, sed: 1: invalid command code z\n* Fix issue #122, Directory upload doesn't work\n* Fix issue #132, enhanced cross compatibility for bash conditions\n\n## Version 0.13 - 17 Jan 2014\n* Minor languages fixes, based on issue #88\n* Fix issue #91, sed take long time to process regexp on big data\n* Fix issue #87, second chunked upload fails after successful first\n* Fix issue #97, greadlink not selected on OSX Mavericks\n* Fix issues #99 and #100: The stat command in OSX 10.9 has no parameter named --format\n* Fix issue #99, clarified how to install greadlink (via homebrew) for Mac OS X. Thanks to paultreny\n* Improved list command and minor changes\n* Fix issue #103, transform Unicode code-points to characters in list command\n* Add VERSION output in DEBUG mode\n* DropShell: Fixed issue with quoted command parameters\n* Fix issue with absolute paths in CD command\n* Enhancement request #108: add initial wildcard support in upload command\n* Now the destination file/dir for the upload command is mandatory\n* Fixed issue listing files/folders names containing quotes\n\n## Version 0.12.1 - 24 Oct 2013\n* Fixed unicode problem with special chars in file names\n* Fixed problem removing temp files\n* Improved detection of configuration error and better handling of http errors\n* Updated setup procedure\n* Fixed incompatibility with old bash version\n\n## Version 0.12 - 06 Sep 2013\n* Fixed problem uploading twice the same directory\n* Add checking for not allowed file names\n* Handling connection/resolving host errors\n* Better error handling\n* Converted if condition to BASH native syntax\n* Add normalize_path function, to canonicalize paths\n* Add -s option to skip existing files when upload/download\n* Removed check for free quota on every file upload to improve performance\n* Add checks for file permissions before writing/reading files on the local fs\n* Add copy function\n* Fixed unicode problem in file listing\n* A lot of minor changes and improvements\n\n## Version 0.11.9 - 27 Jun 2013\n* Add missing -f option in usage\n* Add some /dev/null redirects\n* Improved error messages\n* Improved grep syntax\n* Add function to check the cURL exit code\n* Improved messages output\n* Add new command line options: -q -d -k\n\n## Version 0.11.8 - 05 Jun 2013\n* Add move/rename function\n* Improved the configuration file management (thanks to Robert G.)\n* Updated strings to reflect the new Dropbox \"Create App\" page\n* Add support for download directories\n* Add support for upload directories\n\n## Version 0.11.7 - 23 Apr 2013\n* Fixed issue with special chars\n* Fix for iOS\n\n## Version 0.11.6 - 15 Mar 2013\n* Add optional command-line parameter ('-f') to read dropbox configuration from a specific file (thanks to pjv)\n\n## Version 0.11.5 - 22 Gen 2013\n* Added the ability to get a share link for a specified file (thanks to camspiers)\n\n## Version 0.11.4 - 17 Gen 2013\n* Fix for QNAP compatibility (thanks to Fritz Ferstl)\n* Implemented mkdir command (thanks to Joel Maslak)\n* Fix for Solaris compatibility\n\n## Version 0.11.3 - 22 Dec 2012:\n* Improved list command (thanks to Robert Gonz√°lez)\n* Fixed problem with unicode characters\n\n## Version 0.11.2 - 14 Nov 2012:\n* Added a check for the free quota before uploading a file\n* Now the quota informations are displayed in Mb\n* Removed urlencode function for incompatibility with older curl versions\n* Fixed problem uploading files that contains @ character\n* Minor changes\n\n## Version 0.11.1 - 12 Nov 2012:\n* As suggested by the DropBox API documentation, the default chunk for chunked uploads is now 4Mb\n* Minor changes\n\n## Version 0.11 - 11 Nov 2012:\n* Parameterized the curl binary location\n* Fix for MacOSX 10.8 (thanks to Ben - www.aquiltforever.com)\n\n## Version 0.10 - 03 Nov 2012:\n* Code clean\n* Improved urlencode function (thanks to Stefan Trauth * www.stefantrauth.de)\n* Added command remove as alias of delete\n* Fix for Raspberry PI\n* Now if an error occurs during a chunk uploading, the upload is retried for a maximum of three times\n* Minor changes\n* Tested on Cygwin and MacOSX\n\n## Version 0.9.9 - 24 Oct 2012:\n* Added the possibility to choose the access level (App folder o Full Dropbox) during the setup procedure\n* Added a check for the BASH shell version\n* Fixed problems in listing files/directories with special characters\n* Added the option CURL_ACCEPT_CERTIFICATES (see the script source)\n* Added back the standard upload function. Now only if the file is greater than 150Mb, the chunked_upload API will be used.\n* Fixed compatibility with bsd sed. Tested on FreeBSD, but probably it works on others bsd versions and osx. Let me know!\n* Minor changes\n\n## Version 0.9.8 - 03 Oct 2012:\n* Implemented chunked upload. Now there is no limit to file size!\n\n## Version 0.9.7 - 14 Sep 2012:\n* Fixed bug in listing empty directories\n\n## Version 0.9.6 - 12 Sep 2012:\n* Implemented list command\n* Minor changes\n\n## Version 0.9.5 - 18 Jul 2012:\n* Added a check for the maximum file size allowed by the DropBox API\n* Minor changes\n\n## Version 0.9.4 - 19 Mar 2012:\n* Implemented delete command\n* Minor changes\n\n## Version 0.9.3 - 01 Mar 2012:\n* Implemented download command\n* Improved info output\n* Fixed utime function\n* Added dependency check for basename\n* The script always returns 1 when errors occurs\n* Improved error handling\n* Fixed problem with spaces in config file name\n* Minor bug fixes\n\n## Version 0.9.2 - 28 Feb 2012:\n* Increased security, now any user can create his own Dropbox App\n\n## Version 0.9.1 - 27 Feb 2012:\n* Fixed problem with spaces in dst file name\n\n## Version 0.9 - 27 Feb 2012:\n* Code rewritten from scratch (CLI changed)\n* Improved security and stability using official dropbox API, no more username/password needed!\n\n## Version 0.8.2 - 07 Sep 2011:\n* Removed INTERACTIVE_MODE variable (now the progress bar is shown in VERBOSE mode)\n* Improved command line interface and error messages\n* Minor bug fixes\n\n## Version 0.8.1 - 31 Aug 2011 (by Dawid Ferenczy - www.ferenczy.cz)\n* added prompt for the Dropbox password from keyboard, if there is no password\n  hardcoded or given as script command line parameter (interactive mode)\n* added INTERACTIVE_MODE variable - when set to 1 show CURL progress bar.\n  Set to 1 automatically when there is no password hardcoded or given as\n  parameter. Controls verbosity of CURL.\n\n## Version 0.7.1 - 10 Mar 2011:\n* Minor bug fixes\n\n## Version 0.7 - 10 Mar 2011:\n* New command line interface\n* Code clean\n\n## Version 0.6 - 11 Gen 2011:\n* Fixed issue with spaces in file/forder name\n\n## Version 0.5 - 04 Gen 2011:\n* Recursive directory upload\n\n## Version 0.4 - 29 Dec 2010:\n* Now works on BSD and MAC\n* Interactive prompt for username and password\n* Speeded up the uploading process\n* Debug mode\n\n## Version 0.3 - 18 Nov 2010:\n* Regex updated\n\n## Version 0.2 - 04 Sep 2010:\n* Removed dependencies from tempfile\n* Code clean\n\n## Version 0.1 - 23 Aug 2010:\n* Initial release\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.2900390625,
          "content": "FROM alpine:3.13\n\nLABEL maintainer=\"peez@stiffi.de\"\n\nRUN apk add --no-cache bash curl\nCOPY / /opt/dropbox_uploader\nRUN mkdir -p /config && mkdir -p /workdir\n\nVOLUME /config /workdir\n\nWORKDIR /workdir\n\nENTRYPOINT [\"/opt/dropbox_uploader/dropbox_uploader.sh\", \"-f\", \"/config/dropbox_uploader.conf\"]\n"
        },
        {
          "name": "Dockerfile.pi",
          "type": "blob",
          "size": 0.314453125,
          "content": "FROM hypriot/rpi-alpine-scratch\nMAINTAINER github@vanefferenonline.nl\n\nRUN apk update && apk add bash curl\nCOPY *.sh /opt/dropbox_uploader/\nRUN mkdir -p /config && mkdir -p /workdir\n\nVOLUME /config /workdir\n\nWORKDIR /workdir\n\nENTRYPOINT [\"/opt/dropbox_uploader/dropbox_uploader.sh\", \"-f\", \"/config/dropbox_uploader.conf\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3232421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.1533203125,
          "content": "# Dropbox Uploader\n\nDropbox Uploader is a **BASH** script which can be used to upload, download, delete, list files (and more!) from **Dropbox**, an online file sharing, synchronization and backup service. \n\nIt's written in BASH scripting language and only needs **cURL**.\n\nYou can take a look to the [GitHub project page](https://github.com/andreafabrizi/Dropbox-Uploader).\n\n**Why use this script?**\n\n* **Portable:** It's written in BASH scripting and only needs `cURL` (curl is a tool to transfer data from or to a server, available for all operating systems and installed by default in many linux distributions).\n* **Secure:** It's not required to provide your username/password to this script, because it uses the official Dropbox API v2 for the authentication process. \n\nPlease refer to the [Wiki](https://github.com/andreafabrizi/Dropbox-Uploader/wiki) for tips and additional information about this project. The Wiki is also the place where you can share your scripts and examples related to Dropbox Uploader.\n\n## Features\n\n* Cross platform\n* Support for the official Dropbox API v2\n* No password required or stored\n* Simple step-by-step configuration wizard\n* Simple and chunked file upload\n* File and recursive directory download\n* File and recursive directory upload\n* Shell wildcard expansion (only for upload)\n* Delete/Move/Rename/Copy/List/Share files\n* Create share link\n* Monitor for changes\n\n## Getting started\n\nFirst, clone the repository using git (recommended):\n\n```bash\ngit clone https://github.com/andreafabrizi/Dropbox-Uploader.git\n```\n\nor download the script manually using this command:\n\n```bash\ncurl \"https://raw.githubusercontent.com/andreafabrizi/Dropbox-Uploader/master/dropbox_uploader.sh\" -o dropbox_uploader.sh\n```\n\nThen give the execution permission to the script and run it:\n\n```bash\n $chmod +x dropbox_uploader.sh\n $./dropbox_uploader.sh\n```\n\nThe first time you run `dropbox_uploader`, you'll be guided through a wizard in order to configure access to your Dropbox. This configuration will be stored in `~/.dropbox_uploader`.\n\n## Usage\n\nThe syntax is quite simple:\n\n```\n./dropbox_uploader.sh [PARAMETERS] COMMAND...\n\n[%%]: Optional param\n<%%>: Required param\n```\n\n**Available commands:**\n\n* **upload** &lt;LOCAL_FILE/DIR ...&gt; &lt;REMOTE_FILE/DIR&gt;  \nUpload a local file or directory to a remote Dropbox folder.  \nIf the file is bigger than 150Mb the file is uploaded using small chunks (default 50Mb); \nin this case a . (dot) is printed for every chunk successfully uploaded and a * (star) if an error \noccurs (the upload is retried for a maximum of three times).\nOnly if the file is smaller than 150Mb, the standard upload API is used, and if the -p option is specified\nthe default curl progress bar is displayed during the upload process.  \nThe local file/dir parameter supports wildcards expansion.\n\n* **download** &lt;REMOTE_FILE/DIR&gt; [LOCAL_FILE/DIR]  \nDownload file or directory from Dropbox to a local folder\n\n* **delete** &lt;REMOTE_FILE/DIR&gt;  \nRemove a remote file or directory from Dropbox\n\n* **move** &lt;REMOTE_FILE/DIR&gt; &lt;REMOTE_FILE/DIR&gt;  \nMove or rename a remote file or directory\n\n* **copy** &lt;REMOTE_FILE/DIR&gt; &lt;REMOTE_FILE/DIR&gt;  \nCopy a remote file or directory\n\n* **mkdir** &lt;REMOTE_DIR&gt;  \nCreate a remote directory on Dropbox\n\n* **list** [REMOTE_DIR]  \nList the contents of the remote Dropbox folder\n\n* **monitor** [REMOTE_DIR] [TIMEOUT]  \nMonitor the remote Dropbox folder for changes. If timeout is specified, at the first change event the function will return.\n\n* **share** &lt;REMOTE_FILE&gt;  \nGet a public share link for the specified file or directory\n\n* **saveurl** &lt;URL&gt; &lt;REMOTE_DIR&gt;  \nDownload a file from an URL to a Dropbox folder directly (the file is NOT downloaded locally)\n\n* **search** &lt;QUERY&gt;\nSearch for a specific pattern on Dropbox and returns the list of matching files or directories\n\n* **info**  \nPrint some info about your Dropbox account\n\n* **space**\nPrint some info about the space usage on your Dropbox account\n\n* **unlink**  \nUnlink the script from your Dropbox account\n\n\n**Optional parameters:**  \n* **-f &lt;FILENAME&gt;**  \nLoad the configuration file from a specific file\n\n* **-s**  \nSkip already existing files when download/upload. Default: Overwrite\n\n* **-d**  \nEnable DEBUG mode\n\n* **-q**  \nQuiet mode. Don't show progress meter or messages\n\n* **-h**  \nShow file sizes in human readable format\n\n* **-p**  \nShow cURL progress meter\n\n* **-k**  \nDoesn't check for SSL certificates (insecure)\n\n* **-x &lt;FILENAME&gt;**  \nIgnores/excludes directories or files from syncing.\n-x filename -x directoryname. \n\n**Examples:**\n```bash\n    ./dropbox_uploader.sh upload /etc/passwd /myfiles/passwd.old\n    ./dropbox_uploader.sh upload *.zip /\n    ./dropbox_uploader.sh -x .git upload ./project /\n    ./dropbox_uploader.sh download /backup.zip\n    ./dropbox_uploader.sh delete /backup.zip\n    ./dropbox_uploader.sh mkdir /myDir/\n    ./dropbox_uploader.sh upload \"My File.txt\" \"My File 2.txt\"\n    ./dropbox_uploader.sh share \"My File.txt\"\n    ./dropbox_uploader.sh list\n```\n\n## Tested Environments\n\n* GNU Linux\n* FreeBSD 8.3/10.0\n* MacOSX\n* Windows/Cygwin\n* Raspberry Pi\n* QNAP\n* iOS\n* OpenWRT\n* Chrome OS\n* OpenBSD\n* Termux\n\nIf you have successfully tested this script on others systems or platforms please let me know!\n\n## Running as cron job\nDropbox Uploader relies on a different configuration file for each system user. The default configuration file location is `$HOME/.dropbox_uploader`. This means that if you setup the script with your user and then you try to run a cron job as root, it won't work.\nSo, when running this script using cron, please keep in mind the following:\n* Remember to setup the script with the user used to run the cron job\n* Always specify the full script path when running it (e.g.  /path/to/dropbox_uploader.sh)\n* Use always the -f option to specify the full configuration file path, because sometimes in the cron environment the home folder path is not detected correctly (e.g. -f /home/youruser/.dropbox_uploader)\n* My advice is, for security reasons, to not share the same configuration file with different users\n\n## How to setup a proxy\n\nTo use a proxy server, just set the **https_proxy** environment variable:\n\n**Linux:**\n```bash\n    export HTTP_PROXY_USER=XXXX\n    export HTTP_PROXY_PASSWORD=YYYY\n    export https_proxy=http://192.168.0.1:8080\n```\n\n**BSD:**\n```bash\n    setenv HTTP_PROXY_USER XXXX\n    setenv HTTP_PROXY_PASSWORD YYYY\n    setenv https_proxy http://192.168.0.1:8080\n```\n   \n## BASH and Curl installation\n\n**Debian & Ubuntu Linux:**\n```bash\n    sudo apt-get install bash (Probably BASH is already installed on your system)\n    sudo apt-get install curl\n```\n\n**BSD:**\n```bash\n    cd /usr/ports/shells/bash && make install clean\n    cd /usr/ports/ftp/curl && make install clean\n```\n\n**Cygwin:**  \nYou need to install these packages:  \n* curl\n* ca-certificates\n* dos2unix\n\nBefore running the script, you need to convert it using the dos2unix command.\n\n\n**Build cURL from source:**\n* Download the source tarball from http://curl.haxx.se/download.html\n* Follow the INSTALL instructions\n\n## DropShell\n\nDropShell is an interactive DropBox shell, based on DropBox Uploader:\n\n```bash\nDropShell v0.2\nThe Intractive Dropbox SHELL\nAndrea Fabrizi - andrea.fabrizi@gmail.com\n\nType help for the list of the available commands.\n\nandrea@Dropbox:/$ ls\n [D] 0       Apps\n [D] 0       Camera Uploads\n [D] 0       Public\n [D] 0       scripts\n [D] 0       Security\n [F] 105843  notes.txt\nandrea@DropBox:/ServerBackup$ get notes.txt\n```\n\n## Running as Docker Container\nFirst build the docker image:\n```bash\ndocker build https://github.com/sircuri/Dropbox-Uploader.git -f Dockerfile -t <TAG>\n```\nor for RaspBerry:\n```bash\ndocker build https://github.com/sircuri/Dropbox-Uploader.git -f Dockerfile.pi -t <TAG>\n```\nthen, you can run it as following:\n```bash\ndocker run -i --rm --user=$(id -u):$(id -g) -v <LOCAL_CONFIG_PATH>:/config -v <YOUR_DATA_DIR_MOUNT>:/workdir <TAG> <Arguments> \n```\nThis will store the auth token information in the given local directory in `<LOCAL_CONFIG_PATH>`. To ensure access to your mounted directories it can be important to pass a UID and GID to the docker deamon (as stated in the example by the --user argument)\n\nUsing the script with docker makes it also possible to run the script even on windows machines.\n\nTo use a proxy, just set the mentioned environment variables via the docker `-e` parameter.\n\n## Related projects\n[thunar-dropbox](https://github.com/mDfRg/Thunar-Dropbox-Uploader-plugin/tree/thunar-dropbox/plugins/thunar): A simple extension to Dropbox Uploader that provides a convenient method to share your Dropbox files with one click!\n\n## Upgrading from old dropbox API\nStarting September 30th, 2021, Dropbox is updating their API (OAuth scopes, PKCE, refresh tokens, and short-lived access tokens)\ndropbox_uploader.sh configurations made with the old API will not longer work after that date.\nReconfigure dropbox_uploader.sh:\n*  Go to https://www.dropbox.com/account/connected_apps, expand your configuration, and click the button 'Disconnect'\n*  Rename or delete your configuration file .dropbox_uploader\n\n## Donations\n\n If you want to support this project, please consider donating:\n * PayPal: https://paypal.me/AndreaF83\n * BTC: 1JHCGAMpKqUwBjcT3Kno9Wd5z16K6WKPqG\n"
        },
        {
          "name": "dropShell.sh",
          "type": "blob",
          "size": 8.4765625,
          "content": "#!/usr/bin/env bash\n#\n# DropShell\n#\n# Copyright (C) 2013-2014 Andrea Fabrizi <andrea.fabrizi@gmail.com>\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n#\n\n#Looking for dropbox uploader\nif [ -f \"./dropbox_uploader.sh\" ]; then\n    DU=\"./dropbox_uploader.sh\"\nelse\n    DU=$(which dropbox_uploader.sh)\n    if [ $? -ne 0 ]; then\n        echo \"Dropbox Uploader not found!\"\n        exit 1\n    fi\nfi\n\n#For MacOSX, install coreutils (which includes greadlink)\n# $brew install coreutils\nif [ \"${OSTYPE:0:6}\" == \"darwin\" -o \"${OSTYPE:0:7}\" == \"freebsd\" ]; then\n    READLINK=\"greadlink\"\nelse\n    READLINK=\"readlink\"\nfi\n\nSHELL_HISTORY=~/.dropshell_history\nDU_OPT=\"-q\"\nBIN_DEPS=\"id $READLINK ls basename ls pwd cut\"\nVERSION=\"0.2\"\n\numask 077\n\n#Dependencies check\nfor i in $BIN_DEPS; do\n    which $i > /dev/null\n    if [ $? -ne 0 ]; then\n        echo -e \"Error: Required program could not be found: $i\"\n        exit 1\n    fi\ndone\n\n#Check DropBox Uploader\nif [ ! -f \"$DU\" ]; then\n    echo \"Dropbox Uploader not found: $DU\"\n    echo \"Please change the 'DU' variable according to the Dropbox Uploader location.\"\n    exit 1\nelse\n    DU=$($READLINK -m \"$DU\")\nfi\n\n#Returns the current user\nfunction get_current_user\n{\n    id -nu\n}\n\nfunction normalize_path\n{\n    $READLINK -m \"$1\"\n}\n\n################\n#### START  ####\n################\n\necho -e \"DropShell v$VERSION\"\necho -e \"The Interactive Dropbox SHELL\"\necho -e \"Andrea Fabrizi - andrea.fabrizi@gmail.com\\n\"\necho -e \"Type help for the list of the available commands.\\n\"\n\nhistory -r \"$SHELL_HISTORY\"\nusername=$(get_current_user)\n\n#Initial Working Directory\nCWD=\"/\"\n\nfunction sh_ls\n{\n    local arg1=$1\n\n    #Listing current dir\n    if [ -z \"$arg1\" ]; then\n        \"$DU\" $DU_OPT list \"$CWD\"\n\n    #Listing $arg1\n    else\n\n        #Relative or absolute path?\n        if [ ${arg1:0:1} == \"/\" ]; then\n            \"$DU\" $DU_OPT list \"$(normalize_path \"$arg1\")\"\n        else\n            \"$DU\" $DU_OPT list \"$(normalize_path \"$CWD/$arg1\")\"\n        fi\n\n        #Checking for errors\n        if [ $? -ne 0 ]; then\n            echo -e \"ls: cannot access '$arg1': No such file or directory\"\n        fi\n    fi\n}\n\nfunction sh_cd\n{\n    local arg1=$1\n\n    OLD_CWD=$CWD\n\n    if [ -z \"$arg1\" ]; then\n        CWD=\"/\"\n    elif [ ${arg1:0:1} == \"/\" ]; then\n        CWD=$arg1\n    else\n        CWD=$(normalize_path \"$OLD_CWD/$arg1/\")\n    fi\n\n    \"$DU\" $DU_OPT list \"$CWD\" > /dev/null\n\n    #Checking for errors\n    if [ $? -ne 0 ]; then\n        echo -e \"cd: $arg1: No such file or directory\"\n        CWD=$OLD_CWD\n    fi\n}\n\nfunction sh_get\n{\n    local arg1=$1\n    local arg2=$2\n\n    if [ ! -z \"$arg1\" ]; then\n\n        #Relative or absolute path?\n        if [ ${arg1:0:1} == \"/\" ]; then\n            \"$DU\" $DU_OPT download \"$(normalize_path \"$arg1\")\" \"$arg2\"\n        else\n            \"$DU\" $DU_OPT download \"$(normalize_path \"$CWD/$arg1\")\" \"$arg2\"\n        fi\n\n        #Checking for errors\n        if [ $? -ne 0 ]; then\n            echo -e \"get: Download error\"\n        fi\n\n    #args error\n    else\n        echo -e \"get: missing operand\"\n        echo -e \"syntax: get <FILE/DIR> [LOCAL_FILE/DIR]\"\n    fi\n}\n\nfunction sh_put\n{\n    local arg1=$1\n    local arg2=$2\n\n    if [ ! -z \"$arg1\" ]; then\n\n        #Relative or absolute path?\n        if [ \"${arg2:0:1}\" == \"/\" ]; then\n            \"$DU\" $DU_OPT upload \"$arg1\" \"$(normalize_path \"$arg2\")\"\n        else\n            \"$DU\" $DU_OPT upload \"$arg1\" \"$(normalize_path \"$CWD/$arg2\")\"\n        fi\n\n        #Checking for errors\n        if [ $? -ne 0 ]; then\n            echo -e \"put: Upload error\"\n        fi\n\n    #args error\n    else\n        echo -e \"put: missing operand\"\n        echo -e \"syntax: put <FILE/DIR> <REMOTE_FILE/DIR>\"\n    fi\n}\n\nfunction sh_rm\n{\n    local arg1=$1\n\n    if [ ! -z \"$arg1\" ]; then\n\n        #Relative or absolute path?\n        if [ ${arg1:0:1} == \"/\" ]; then\n            \"$DU\" $DU_OPT remove \"$(normalize_path \"$arg1\")\"\n        else\n            \"$DU\" $DU_OPT remove \"$(normalize_path \"$CWD/$arg1\")\"\n        fi\n\n        #Checking for errors\n        if [ $? -ne 0 ]; then\n            echo -e \"rm: cannot remove '$arg1'\"\n        fi\n\n    #args error\n    else\n        echo -e \"rm: missing operand\"\n        echo -e \"syntax: rm <FILE/DIR>\"\n    fi\n}\n\nfunction sh_mkdir\n{\n    local arg1=$1\n\n    if [ ! -z \"$arg1\" ]; then\n\n        #Relative or absolute path?\n        if [ ${arg1:0:1} == \"/\" ]; then\n            \"$DU\" $DU_OPT mkdir \"$(normalize_path \"$arg1\")\"\n        else\n            \"$DU\" $DU_OPT mkdir \"$(normalize_path \"$CWD/$arg1\")\"\n        fi\n\n        #Checking for errors\n        if [ $? -ne 0 ]; then\n            echo -e \"mkdir: cannot create directory '$arg1'\"\n        fi\n\n    #args error\n    else\n        echo -e \"mkdir: missing operand\"\n        echo -e \"syntax: mkdir <DIR_NAME>\"\n    fi\n}\n\nfunction sh_mv\n{\n    local arg1=$1\n    local arg2=$2\n\n    if [ ! -z \"$arg1\" -a ! -z \"$arg2\" ]; then\n\n        #SRC relative or absolute path?\n        if [ ${arg1:0:1} == \"/\" ]; then\n            SRC=\"$arg1\"\n        else\n            SRC=\"$CWD/$arg1\"\n        fi\n\n        #DST relative or absolute path?\n        if [ ${arg2:0:1} == \"/\" ]; then\n            DST=\"$arg2\"\n        else\n            DST=\"$CWD/$arg2\"\n        fi\n\n        \"$DU\" $DU_OPT move \"$(normalize_path \"$SRC\")\" \"$(normalize_path \"$DST\")\"\n\n        #Checking for errors\n        if [ $? -ne 0 ]; then\n            echo -e \"mv: cannot move '$arg1' to '$arg2'\"\n        fi\n\n    #args error\n    else\n        echo -e \"mv: missing operand\"\n        echo -e \"syntax: mv <FILE/DIR> <DEST_FILE/DIR>\"\n    fi\n}\n\nfunction sh_cp\n{\n    local arg1=$1\n    local arg2=$2\n\n    if [ ! -z \"$arg1\" -a ! -z \"$arg2\" ]; then\n\n        #SRC relative or absolute path?\n        if [ ${arg1:0:1} == \"/\" ]; then\n            SRC=\"$arg1\"\n        else\n            SRC=\"$CWD/$arg1\"\n        fi\n\n        #DST relative or absolute path?\n        if [ ${arg2:0:1} == \"/\" ]; then\n            DST=\"$arg2\"\n        else\n            DST=\"$CWD/$arg2\"\n        fi\n\n        \"$DU\" $DU_OPT copy \"$(normalize_path \"$SRC\")\" \"$(normalize_path \"$DST\")\"\n\n        #Checking for errors\n        if [ $? -ne 0 ]; then\n            echo -e \"cp: cannot copy '$arg1' to '$arg2'\"\n        fi\n\n    #args error\n    else\n        echo -e \"cp: missing operand\"\n        echo -e \"syntax: cp <FILE/DIR> <DEST_FILE/DIR>\"\n    fi\n}\n\nfunction sh_free\n{\n    \"$DU\" $DU_OPT info | grep \"Free:\" | cut -f 2\n}\n\nfunction sh_cat\n{\n    local arg1=$1\n\n    if [ ! -z \"$arg1\" ]; then\n\n        tmp_cat=\"/tmp/sh_cat_$RANDOM\"\n        sh_get \"$arg1\" \"$tmp_cat\"\n        cat \"$tmp_cat\"\n        rm -fr \"$tmp_cat\"\n\n    #args error\n    else\n        echo -e \"cat: missing operand\"\n        echo -e \"syntax: cat <FILE>\"\n    fi\n}\n\nwhile (true); do\n\n    #Reading command from shell\n    read -e -p \"$username@Dropbox:$CWD$ \" input\n\n    #Tokenizing command\n    eval tokens=($input)\n    cmd=${tokens[0]}\n    arg1=${tokens[1]}\n    arg2=${tokens[2]}\n\n    #Saving command in the history file\n    history -s \"$input\"\n    history -w \"$SHELL_HISTORY\"\n\n    case $cmd in\n\n        ls)\n            sh_ls \"$arg1\"\n        ;;\n\n        cd)\n            sh_cd \"$arg1\"\n        ;;\n\n        pwd)\n            echo $CWD\n        ;;\n\n        get)\n            sh_get \"$arg1\" \"$arg2\"\n        ;;\n\n        put)\n            sh_put \"$arg1\" \"$arg2\"\n        ;;\n\n        rm)\n            sh_rm \"$arg1\"\n        ;;\n\n        mkdir)\n            sh_mkdir \"$arg1\"\n        ;;\n\n        mv)\n            sh_mv \"$arg1\" \"$arg2\"\n        ;;\n\n        cp)\n            sh_cp \"$arg1\" \"$arg2\"\n        ;;\n\n        cat)\n            sh_cat \"$arg1\"\n        ;;\n\n        free)\n            sh_free\n        ;;\n\n        lls)\n            ls -l\n        ;;\n\n        lpwd)\n            pwd\n        ;;\n\n        lcd)\n            cd \"$arg1\"\n        ;;\n\n        help)\n            echo -e \"Supported commands: ls, cd, pwd, get, put, cat, rm, mkdir, mv, cp, free, lls, lpwd, lcd, help, exit\\n\"\n        ;;\n\n        quit|exit)\n            exit 0\n        ;;\n\n        *)\n            if [ ! -z \"$cmd\" ]; then\n                echo -ne \"Unknown command: $cmd\\n\"\n            fi\n        ;;\n    esac\ndone\n"
        },
        {
          "name": "dropbox_uploader.sh",
          "type": "blob",
          "size": 51.2744140625,
          "content": "#!/usr/bin/env bash\n#\n# Dropbox Uploader\n#\n# Copyright (C) 2010-2021 Andrea Fabrizi <andrea.fabrizi@gmail.com>\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n#\n\n#Default configuration file\nCONFIG_FILE=~/.dropbox_uploader\n\n#Default chunk size in Mb for the upload process\n#It is recommended to increase this value only if you have enough free space on your /tmp partition\n#Lower values may increase the number of http requests\nCHUNK_SIZE=50\n\n#Curl location\n#If not set, curl will be searched into the $PATH\n#CURL_BIN=\"/usr/bin/curl\"\n\n#Default values\nTMP_DIR=\"/tmp\"\nDEBUG=0\nQUIET=0\nSHOW_PROGRESSBAR=0\nSKIP_EXISTING_FILES=0\nERROR_STATUS=0\nEXCLUDE=()\n\n#Don't edit these...\nAPI_OAUTH_TOKEN=\"https://api.dropbox.com/oauth2/token\"\nAPI_OAUTH_AUTHORIZE=\"https://www.dropbox.com/oauth2/authorize\"\nAPI_LONGPOLL_FOLDER=\"https://notify.dropboxapi.com/2/files/list_folder/longpoll\"\nAPI_CHUNKED_UPLOAD_START_URL=\"https://content.dropboxapi.com/2/files/upload_session/start\"\nAPI_CHUNKED_UPLOAD_FINISH_URL=\"https://content.dropboxapi.com/2/files/upload_session/finish\"\nAPI_CHUNKED_UPLOAD_APPEND_URL=\"https://content.dropboxapi.com/2/files/upload_session/append_v2\"\nAPI_UPLOAD_URL=\"https://content.dropboxapi.com/2/files/upload\"\nAPI_DOWNLOAD_URL=\"https://content.dropboxapi.com/2/files/download\"\nAPI_DELETE_URL=\"https://api.dropboxapi.com/2/files/delete\"\nAPI_MOVE_URL=\"https://api.dropboxapi.com/2/files/move\"\nAPI_COPY_URL=\"https://api.dropboxapi.com/2/files/copy\"\nAPI_METADATA_URL=\"https://api.dropboxapi.com/2/files/get_metadata\"\nAPI_LIST_FOLDER_URL=\"https://api.dropboxapi.com/2/files/list_folder\"\nAPI_LIST_FOLDER_CONTINUE_URL=\"https://api.dropboxapi.com/2/files/list_folder/continue\"\nAPI_ACCOUNT_INFO_URL=\"https://api.dropboxapi.com/2/users/get_current_account\"\nAPI_ACCOUNT_SPACE_URL=\"https://api.dropboxapi.com/2/users/get_space_usage\"\nAPI_MKDIR_URL=\"https://api.dropboxapi.com/2/files/create_folder\"\nAPI_SHARE_URL=\"https://api.dropboxapi.com/2/sharing/create_shared_link_with_settings\"\nAPI_SHARE_LIST=\"https://api.dropboxapi.com/2/sharing/list_shared_links\"\nAPI_SAVEURL_URL=\"https://api.dropboxapi.com/2/files/save_url\"\nAPI_SAVEURL_JOBSTATUS_URL=\"https://api.dropboxapi.com/2/files/save_url/check_job_status\"\nAPI_SEARCH_URL=\"https://api.dropboxapi.com/2/files/search\"\nAPP_CREATE_URL=\"https://www.dropbox.com/developers/apps\"\nRESPONSE_FILE=\"$TMP_DIR/du_resp_$RANDOM\"\nCHUNK_FILE=\"$TMP_DIR/du_chunk_$RANDOM\"\nTEMP_FILE=\"$TMP_DIR/du_tmp_$RANDOM\"\nAUTH_ACCESS_TOKEN_EXPIRE=\"0\"\nBIN_DEPS=\"sed basename date grep stat dd mkdir\"\nVERSION=\"1.0\"\n\numask 077\n\n#Check the shell\nif [ -z \"$BASH_VERSION\" ]; then\n    echo -e \"Error: this script requires the BASH shell!\"\n    exit 1\nfi\n\nshopt -s nullglob #Bash allows filename patterns which match no files to expand to a null string, rather than themselves\nshopt -s dotglob  #Bash includes filenames beginning with a \".\" in the results of filename expansion\n\n#Check temp folder\nif [[ ! -d \"$TMP_DIR\" ]]; then\n    echo -e \"Error: the temporary folder $TMP_DIR doesn't exists!\"\n    echo -e \"Please edit this script and set the TMP_DIR variable to a valid temporary folder to use.\"\n    exit 1\nfi\n\n#Look for optional config file parameter\nwhile getopts \":qpskdhf:x:\" opt; do\n    case $opt in\n\n    f)\n      CONFIG_FILE=$OPTARG\n    ;;\n\n    d)\n      DEBUG=1\n    ;;\n\n    q)\n      QUIET=1\n    ;;\n\n    p)\n      SHOW_PROGRESSBAR=1\n    ;;\n\n    k)\n      CURL_ACCEPT_CERTIFICATES=\"-k\"\n    ;;\n\n    s)\n      SKIP_EXISTING_FILES=1\n    ;;\n\n    h)\n      HUMAN_READABLE_SIZE=1\n    ;;\n\n    x)\n      EXCLUDE+=( $OPTARG )\n    ;;\n\n    \\?)\n      echo \"Invalid option: -$OPTARG\" >&2\n      exit 1\n    ;;\n\n    :)\n      echo \"Option -$OPTARG requires an argument.\" >&2\n      exit 1\n    ;;\n\n  esac\ndone\n\nif [[ $DEBUG != 0 ]]; then\n    echo $VERSION\n    uname -a 2> /dev/null\n    cat /etc/issue 2> /dev/null\n    set -x\n    RESPONSE_FILE=\"$TMP_DIR/du_resp_debug\"\nfi\n\nif [[ $CURL_BIN == \"\" ]]; then\n    BIN_DEPS=\"$BIN_DEPS curl\"\n    CURL_BIN=\"curl\"\nfi\n\n#Dependencies check\nwhich $BIN_DEPS > /dev/null\nif [[ $? != 0 ]]; then\n    for i in $BIN_DEPS; do\n        which $i > /dev/null ||\n            NOT_FOUND=\"$i $NOT_FOUND\"\n    done\n    echo -e \"Error: Required program could not be found: $NOT_FOUND\"\n    exit 1\nfi\n\n#Check if readlink is installed and supports the -m option\n#It's not necessary, so no problem if it's not installed\nwhich readlink > /dev/null\nif [[ $? == 0 && $(readlink -m \"//test\" 2> /dev/null) == \"/test\" ]]; then\n    HAVE_READLINK=1\nelse\n    HAVE_READLINK=0\nfi\n\n#Forcing to use the builtin printf, if it's present, because it's better\n#otherwise the external printf program will be used\n#Note that the external printf command can cause character encoding issues!\nbuiltin printf \"\" 2> /dev/null\nif [[ $? == 0 ]]; then\n    PRINTF=\"builtin printf\"\n    PRINTF_OPT=\"-v o\"\nelse\n    PRINTF=$(which printf)\n    if [[ $? != 0 ]]; then\n        echo -e \"Error: Required program could not be found: printf\"\n    fi\n    PRINTF_OPT=\"\"\nfi\n\n#Print the message based on $QUIET variable\nfunction print\n{\n    if [[ $QUIET == 0 ]]; then\n\t    echo -ne \"$1\";\n    fi\n}\n\n#Returns unix timestamp\nfunction utime\n{\n    date '+%s'\n}\n\n#Remove temporary files\nfunction remove_temp_files\n{\n    if [[ $DEBUG == 0 ]]; then\n        rm -fr \"$RESPONSE_FILE\"\n        rm -fr \"$CHUNK_FILE\"\n        rm -fr \"$TEMP_FILE\"\n    fi\n}\n\n#Converts bytes to human readable format\nfunction convert_bytes\n{\n    if [[ $HUMAN_READABLE_SIZE == 1 && \"$1\" != \"\" ]]; then\n\t    if (($1 > 1073741824));then\n\t        echo $(($1/1073741824)).$(($1%1073741824/100000000))\"G\";\n\t    elif (($1 > 1048576));then\n\t        echo $(($1/1048576)).$(($1%1048576/100000))\"M\";\n\t    elif (($1 > 1024));then\n\t        echo $(($1/1024)).$(($1%1024/100))\"K\";\n\t    else\n\t        echo $1;\n\t    fi\n    else\n\t    echo $1;\n    fi\n}\n\n#Returns the file size in bytes\nfunction file_size\n{\n    #Generic GNU\n    SIZE=$(stat --format=\"%s\" \"$1\" 2> /dev/null)\n    if [ $? -eq 0 ]; then\n        echo $SIZE\n        return\n    fi\n\n    #Some embedded linux devices\n    SIZE=$(stat -c \"%s\" \"$1\" 2> /dev/null)\n    if [ $? -eq 0 ]; then\n        echo $SIZE\n        return\n    fi\n\n    #BSD, OSX and other OSs\n    SIZE=$(stat -f \"%z\" \"$1\" 2> /dev/null)\n    if [ $? -eq 0 ]; then\n        echo $SIZE\n        return\n    fi\n\n    echo \"0\"\n}\n\n\n#Usage\nfunction usage\n{\n    echo -e \"Dropbox Uploader v$VERSION\"\n    echo -e \"Andrea Fabrizi - andrea.fabrizi@gmail.com\\n\"\n    echo -e \"Usage: $0 [PARAMETERS] COMMAND...\"\n    echo -e \"\\nCommands:\"\n\n    echo -e \"\\t upload   <LOCAL_FILE/DIR ...>  <REMOTE_FILE/DIR>\"\n    echo -e \"\\t download <REMOTE_FILE/DIR> [LOCAL_FILE/DIR]\"\n    echo -e \"\\t delete   <REMOTE_FILE/DIR>\"\n    echo -e \"\\t move     <REMOTE_FILE/DIR> <REMOTE_FILE/DIR>\"\n    echo -e \"\\t copy     <REMOTE_FILE/DIR> <REMOTE_FILE/DIR>\"\n    echo -e \"\\t mkdir    <REMOTE_DIR>\"\n    echo -e \"\\t list     [REMOTE_DIR]\"\n    echo -e \"\\t monitor  [REMOTE_DIR] [TIMEOUT]\"\n    echo -e \"\\t share    <REMOTE_FILE>\"\n    echo -e \"\\t saveurl  <URL> <REMOTE_DIR>\"\n    echo -e \"\\t search   <QUERY>\"\n    echo -e \"\\t info\"\n    echo -e \"\\t space\"\n    echo -e \"\\t unlink\"\n\n    echo -e \"\\nOptional parameters:\"\n    echo -e \"\\t-f <FILENAME> Load the configuration file from a specific file\"\n    echo -e \"\\t-s            Skip already existing files when download/upload. Default: Overwrite\"\n    echo -e \"\\t-d            Enable DEBUG mode\"\n    echo -e \"\\t-q            Quiet mode. Don't show messages\"\n    echo -e \"\\t-h            Show file sizes in human readable format\"\n    echo -e \"\\t-p            Show cURL progress meter\"\n    echo -e \"\\t-k            Doesn't check for SSL certificates (insecure)\"\n    echo -e \"\\t-x            Ignores/excludes directories or files from syncing. -x filename -x directoryname. example: -x .git\"\n\n    echo -en \"\\nFor more info and examples, please see the README file.\\n\\n\"\n    remove_temp_files\n    exit 1\n}\n\n#Check the curl exit code\nfunction check_http_response\n{\n    CODE=$?\n\n    #Checking curl exit code\n    case $CODE in\n\n        #OK\n        0)\n\n        ;;\n\n        #Proxy error\n        5)\n            print \"\\nError: Couldn't resolve proxy. The given proxy host could not be resolved.\\n\"\n\n            remove_temp_files\n            exit 1\n        ;;\n\n        #Missing CA certificates\n        60|58|77)\n            print \"\\nError: cURL is not able to performs peer SSL certificate verification.\\n\"\n            print \"Please, install the default ca-certificates bundle.\\n\"\n            print \"To do this in a Debian/Ubuntu based system, try:\\n\"\n            print \"  sudo apt-get install ca-certificates\\n\\n\"\n            print \"If the problem persists, try to use the -k option (insecure).\\n\"\n\n            remove_temp_files\n            exit 1\n        ;;\n\n        6)\n            print \"\\nError: Couldn't resolve host.\\n\"\n\n            remove_temp_files\n            exit 1\n        ;;\n\n        7)\n            print \"\\nError: Couldn't connect to host.\\n\"\n\n            remove_temp_files\n            exit 1\n        ;;\n\n    esac\n\n    #Checking response file for generic errors\n    if grep -q \"^HTTP/[12].* 400\" \"$RESPONSE_FILE\"; then\n        ERROR_MSG=$(sed -n -e 's/{\"error\": \"\\([^\"]*\\)\"}/\\1/p' \"$RESPONSE_FILE\")\n\n        case $ERROR_MSG in\n             *access?attempt?failed?because?this?app?is?not?configured?to?have*)\n                echo -e \"\\nError: The Permission type/Access level configured doesn't match the DropBox App settings!\\nPlease run \\\"$0 unlink\\\" and try again.\"\n                exit 1\n            ;;\n        esac\n\n    fi\n\n}\n\n# Checks if the access token has expired. If so a new one is created.\nfunction ensure_accesstoken\n{\n    local now=`date +%s`\n\n    if [[ $OAUTH_ACCESS_TOKEN_EXPIRE > $now ]]; then\n\t return\n    fi\n\n    $CURL_BIN $CURL_ACCEPT_CERTIFICATES $API_OAUTH_TOKEN -d grant_type=refresh_token -d refresh_token=$OAUTH_REFRESH_TOKEN -u $OAUTH_APP_KEY:$OAUTH_APP_SECRET -o \"$RESPONSE_FILE\" 2>/dev/null\n    check_http_response\n    OAUTH_ACCESS_TOKEN=$(sed -n 's/.*\"access_token\": \"\\([^\"]*\\).*/\\1/p' \"$RESPONSE_FILE\")\n\n    local expires_in=$(sed -n 's/.*\"expires_in\": \\([0-9]*\\).*/\\1/p' \"$RESPONSE_FILE\")\n\n    # one minute safety buffer\n    OAUTH_ACCESS_TOKEN_EXPIRE=$(($now + $expires_in - 60))\n}\n\n#Urlencode\nfunction urlencode\n{\n    #The printf is necessary to correctly decode unicode sequences\n    local string=$($PRINTF \"%s\" \"${1}\")\n    local strlen=${#string}\n    local encoded=\"\"\n\n    for (( pos=0 ; pos<strlen ; pos++ )); do\n        c=${string:$pos:1}\n        case \"$c\" in\n            [-_.~a-zA-Z0-9] ) o=\"${c}\" ;;\n            * ) $PRINTF $PRINTF_OPT '%%%02x' \"'$c\"\n        esac\n        encoded=\"${encoded}${o}\"\n    done\n\n    echo \"$encoded\"\n}\n\nfunction normalize_path\n{\n    #The printf is necessary to correctly decode unicode sequences\n    path=$($PRINTF \"%s\" \"${1//\\/\\///}\")\n    if [[ $HAVE_READLINK == 1 ]]; then\n        new_path=$(readlink -m \"$path\")\n\n        #Adding back the final slash, if present in the source\n        if [[ ${path: -1} == \"/\" && ${#path} -gt 1 ]]; then\n            new_path=\"$new_path/\"\n        fi\n\n        echo \"$new_path\"\n    else\n        echo \"$path\"\n    fi\n}\n\n#Check if it's a file or directory\n#Returns FILE/DIR/ERR\nfunction db_stat\n{\n    local FILE=$(normalize_path \"$1\")\n\n    if [[ $FILE == \"/\" ]]; then\n        echo \"DIR\"\n        return\n    fi\n\n    #Checking if it's a file or a directory\n    ensure_accesstoken\n    $CURL_BIN $CURL_ACCEPT_CERTIFICATES -X POST -L -s --show-error --globoff -i -o \"$RESPONSE_FILE\" --header \"Authorization: Bearer $OAUTH_ACCESS_TOKEN\" --header \"Content-Type: application/json\" --data \"{\\\"path\\\": \\\"$FILE\\\"}\" \"$API_METADATA_URL\" 2> /dev/null\n    check_http_response\n\n    local TYPE=$(sed -n 's/{\".tag\": *\"*\\([^\"]*\\)\"*.*/\\1/p' \"$RESPONSE_FILE\")\n\n    case $TYPE in\n\n        file)\n            echo \"FILE\"\n        ;;\n\n        folder)\n            echo \"DIR\"\n        ;;\n\n        deleted)\n            echo \"ERR\"\n        ;;\n\n        *)\n            echo \"ERR\"\n        ;;\n\n    esac\n}\n\n#Generic upload wrapper around db_upload_file and db_upload_dir functions\n#$1 = Local source file/dir\n#$2 = Remote destination file/dir\nfunction db_upload\n{\n    local SRC=$(normalize_path \"$1\")\n    local DST=$(normalize_path \"$2\")\n\n    for j in \"${EXCLUDE[@]}\"\n        do :\n            if [[ $(echo \"$SRC\" | grep \"$j\" | wc -l) -gt 0 ]]; then\n                print \"Skipping excluded file/dir: \"$j\n                return\n            fi\n    done\n\n    #Checking if the file/dir exists\n    if [[ ! -e $SRC && ! -d $SRC ]]; then\n        print \" > No such file or directory: $SRC\\n\"\n        ERROR_STATUS=1\n        return\n    fi\n\n    #Checking if the file/dir has read permissions\n    if [[ ! -r $SRC ]]; then\n        print \" > Error reading file $SRC: permission denied\\n\"\n        ERROR_STATUS=1\n        return\n    fi\n\n    TYPE=$(db_stat \"$DST\")\n\n    #If DST it's a file, do nothing, it's the default behaviour\n    if [[ $TYPE == \"FILE\" ]]; then\n        DST=\"$DST\"\n\n    #if DST doesn't exists and doesn't ends with a /, it will be the destination file name\n    elif [[ $TYPE == \"ERR\" && \"${DST: -1}\" != \"/\" ]]; then\n        DST=\"$DST\"\n\n    #if DST doesn't exists and ends with a /, it will be the destination folder\n    elif [[ $TYPE == \"ERR\" && \"${DST: -1}\" == \"/\" ]]; then\n        local filename=$(basename \"$SRC\")\n        DST=\"$DST/$filename\"\n\n    #If DST it's a directory, it will be the destination folder\n    elif [[ $TYPE == \"DIR\" ]]; then\n        local filename=$(basename \"$SRC\")\n        DST=\"$DST/$filename\"\n    fi\n\n    #It's a directory\n    if [[ -d $SRC ]]; then\n        db_upload_dir \"$SRC\" \"$DST\"\n\n    #It's a file\n    elif [[ -e $SRC ]]; then\n        db_upload_file \"$SRC\" \"$DST\"\n\n    #Unsupported object...\n    else\n        print \" > Skipping not regular file \\\"$SRC\\\"\\n\"\n    fi\n}\n\n#Generic upload wrapper around db_chunked_upload_file and db_simple_upload_file\n#The final upload function will be choosen based on the file size\n#$1 = Local source file\n#$2 = Remote destination file\nfunction db_upload_file\n{\n    local FILE_SRC=$(normalize_path \"$1\")\n    local FILE_DST=$(normalize_path \"$2\")\n\n    shopt -s nocasematch\n\n    #Checking not allowed file names\n    basefile_dst=$(basename \"$FILE_DST\")\n    if [[ $basefile_dst == \"thumbs.db\" || \\\n          $basefile_dst == \"desktop.ini\" || \\\n          $basefile_dst == \".ds_store\" || \\\n          $basefile_dst == \"icon\\r\" || \\\n          $basefile_dst == \".dropbox\" || \\\n          $basefile_dst == \".dropbox.attr\" \\\n       ]]; then\n        print \" > Skipping not allowed file name \\\"$FILE_DST\\\"\\n\"\n        return\n    fi\n\n    shopt -u nocasematch\n\n    #Checking file size\n    FILE_SIZE=$(file_size \"$FILE_SRC\")\n\n    #Checking if the file already exists\n    TYPE=$(db_stat \"$FILE_DST\")\n    if [[ $TYPE != \"ERR\" && $SKIP_EXISTING_FILES == 1 ]]; then\n        print \" > Skipping already existing file \\\"$FILE_DST\\\"\\n\"\n        return\n    fi\n\n    # Checking if the file has the correct check sum\n    if [[ $TYPE != \"ERR\" ]]; then\n        sha_src=$(db_sha_local \"$FILE_SRC\")\n        sha_dst=$(db_sha \"$FILE_DST\")\n        if [[ $sha_src == $sha_dst && $sha_src != \"ERR\" ]]; then\n            print \"> Skipping file \\\"$FILE_SRC\\\", file exists with the same hash\\n\"\n            return\n        fi\n    fi\n\n    if [[ $FILE_SIZE -gt 157286000 ]]; then\n        #If the file is greater than 150Mb, the chunked_upload API will be used\n        db_chunked_upload_file \"$FILE_SRC\" \"$FILE_DST\"\n    else\n        db_simple_upload_file \"$FILE_SRC\" \"$FILE_DST\"\n    fi\n\n}\n\n#Simple file upload\n#$1 = Local source file\n#$2 = Remote destination file\nfunction db_simple_upload_file\n{\n    local FILE_SRC=$(normalize_path \"$1\")\n    local FILE_DST=$(normalize_path \"$2\")\n\n    if [[ $SHOW_PROGRESSBAR == 1 && $QUIET == 0 ]]; then\n        CURL_PARAMETERS=\"--progress-bar\"\n        LINE_CR=\"\\n\"\n    else\n        CURL_PARAMETERS=\"-L -s\"\n        LINE_CR=\"\"\n    fi\n\n    print \" > Uploading \\\"$FILE_SRC\\\" to \\\"$FILE_DST\\\"... $LINE_CR\"\n    ensure_accesstoken\n    $CURL_BIN $CURL_ACCEPT_CERTIFICATES $CURL_PARAMETERS -X POST -i --globoff -o \"$RESPONSE_FILE\" --header \"Authorization: Bearer $OAUTH_ACCESS_TOKEN\" --header \"Dropbox-API-Arg: {\\\"path\\\": \\\"$FILE_DST\\\",\\\"mode\\\": \\\"overwrite\\\",\\\"autorename\\\": true,\\\"mute\\\": false}\" --header \"Content-Type: application/octet-stream\" --data-binary @\"$FILE_SRC\" \"$API_UPLOAD_URL\"\n    check_http_response\n\n    #Check\n    if grep -q \"^HTTP/[12].* 200\" \"$RESPONSE_FILE\"; then\n        print \"DONE\\n\"\n    else\n        print \"FAILED\\n\"\n        print \"An error occurred requesting /upload\\n\"\n        ERROR_STATUS=1\n    fi\n}\n\n#Chunked file upload\n#$1 = Local source file\n#$2 = Remote destination file\nfunction db_chunked_upload_file\n{\n    local FILE_SRC=$(normalize_path \"$1\")\n    local FILE_DST=$(normalize_path \"$2\")\n\n\n    if [[ $SHOW_PROGRESSBAR == 1 && $QUIET == 0 ]]; then\n        VERBOSE=1\n        CURL_PARAMETERS=\"--progress-bar\"\n    else\n        VERBOSE=0\n        CURL_PARAMETERS=\"-L -s\"\n    fi\n\n\n\n    local FILE_SIZE=$(file_size \"$FILE_SRC\")\n    local OFFSET=0\n    local UPLOAD_ID=\"\"\n    local UPLOAD_ERROR=0\n    local CHUNK_PARAMS=\"\"\n\n    ## Ceil division\n    let NUMBEROFCHUNK=($FILE_SIZE/1024/1024+$CHUNK_SIZE-1)/$CHUNK_SIZE\n\n    if [[ $VERBOSE == 1 ]]; then\n        print \" > Uploading \\\"$FILE_SRC\\\" to \\\"$FILE_DST\\\" by $NUMBEROFCHUNK chunks ...\\n\"\n    else\n        print \" > Uploading \\\"$FILE_SRC\\\" to \\\"$FILE_DST\\\" by $NUMBEROFCHUNK chunks \"\n    fi\n\n    #Starting a new upload session\n    ensure_accesstoken\n    $CURL_BIN $CURL_ACCEPT_CERTIFICATES -X POST -L -s --show-error --globoff -i -o \"$RESPONSE_FILE\" --header \"Authorization: Bearer $OAUTH_ACCESS_TOKEN\" --header \"Dropbox-API-Arg: {\\\"close\\\": false}\" --header \"Content-Type: application/octet-stream\" --data-binary @/dev/null \"$API_CHUNKED_UPLOAD_START_URL\" 2> /dev/null\n    check_http_response\n\n    SESSION_ID=$(sed -n 's/{\"session_id\": *\"*\\([^\"]*\\)\"*.*/\\1/p' \"$RESPONSE_FILE\")\n\n    chunkNumber=1\n    #Uploading chunks...\n    while ([[ $OFFSET != \"$FILE_SIZE\" ]]); do\n\n        let OFFSET_MB=$OFFSET/1024/1024\n\n        #Create the chunk\n        dd if=\"$FILE_SRC\" of=\"$CHUNK_FILE\" bs=1048576 skip=$OFFSET_MB count=$CHUNK_SIZE 2> /dev/null\n        local CHUNK_REAL_SIZE=$(file_size \"$CHUNK_FILE\")\n\n        if [[ $VERBOSE == 1 ]]; then\n            print \" >> Uploading chunk $chunkNumber of $NUMBEROFCHUNK\\n\"\n        fi\n\n        #Uploading the chunk...\n        echo > \"$RESPONSE_FILE\"\n        ensure_accesstoken\n        $CURL_BIN $CURL_ACCEPT_CERTIFICATES -X POST $CURL_PARAMETERS --show-error --globoff -i -o \"$RESPONSE_FILE\" --header \"Authorization: Bearer $OAUTH_ACCESS_TOKEN\" --header \"Dropbox-API-Arg: {\\\"cursor\\\": {\\\"session_id\\\": \\\"$SESSION_ID\\\",\\\"offset\\\": $OFFSET},\\\"close\\\": false}\" --header \"Content-Type: application/octet-stream\" --data-binary @\"$CHUNK_FILE\" \"$API_CHUNKED_UPLOAD_APPEND_URL\"\n        #check_http_response not needed, because we have to retry the request in case of error\n\n        #Check\n        if grep -q \"^HTTP/[12].* 200\" \"$RESPONSE_FILE\"; then\n            let OFFSET=$OFFSET+$CHUNK_REAL_SIZE\n            UPLOAD_ERROR=0\n            if [[ $VERBOSE != 1 ]]; then\n                print \".\"\n            fi\n            ((chunkNumber=chunkNumber+1))\n        else\n            if [[ $VERBOSE != 1 ]]; then\n                print \"*\"\n            fi\n            let UPLOAD_ERROR=$UPLOAD_ERROR+1\n\n            #On error, the upload is retried for max 3 times\n            if [[ $UPLOAD_ERROR -gt 2 ]]; then\n                print \" FAILED\\n\"\n                print \"An error occurred requesting /chunked_upload\\n\"\n                ERROR_STATUS=1\n                return\n            fi\n        fi\n\n    done\n\n    UPLOAD_ERROR=0\n\n    #Commit the upload\n    while (true); do\n\n        echo > \"$RESPONSE_FILE\"\n        ensure_accesstoken\n        $CURL_BIN $CURL_ACCEPT_CERTIFICATES -X POST -L -s --show-error --globoff -i -o \"$RESPONSE_FILE\" --header \"Authorization: Bearer $OAUTH_ACCESS_TOKEN\" --header \"Dropbox-API-Arg: {\\\"cursor\\\": {\\\"session_id\\\": \\\"$SESSION_ID\\\",\\\"offset\\\": $OFFSET},\\\"commit\\\": {\\\"path\\\": \\\"$FILE_DST\\\",\\\"mode\\\": \\\"overwrite\\\",\\\"autorename\\\": true,\\\"mute\\\": false}}\" --header \"Content-Type: application/octet-stream\" --data-binary @/dev/null \"$API_CHUNKED_UPLOAD_FINISH_URL\" 2> /dev/null\n        #check_http_response not needed, because we have to retry the request in case of error\n\n        #Check\n        if grep -q \"^HTTP/[12].* 200\" \"$RESPONSE_FILE\"; then\n            UPLOAD_ERROR=0\n            break\n        else\n            print \"*\"\n            let UPLOAD_ERROR=$UPLOAD_ERROR+1\n\n            #On error, the commit is retried for max 3 times\n            if [[ $UPLOAD_ERROR -gt 2 ]]; then\n                print \" FAILED\\n\"\n                print \"An error occurred requesting /commit_chunked_upload\\n\"\n                ERROR_STATUS=1\n                return\n            fi\n        fi\n\n    done\n\n    print \" DONE\\n\"\n}\n\n#Directory upload\n#$1 = Local source dir\n#$2 = Remote destination dir\nfunction db_upload_dir\n{\n    local DIR_SRC=$(normalize_path \"$1\")\n    local DIR_DST=$(normalize_path \"$2\")\n\n    #Creatig remote directory\n    db_mkdir \"$DIR_DST\"\n\n    for file in \"$DIR_SRC/\"*; do\n        db_upload \"$file\" \"$DIR_DST\"\n    done\n}\n\n#Generic download wrapper\n#$1 = Remote source file/dir\n#$2 = Local destination file/dir\nfunction db_download\n{\n    local SRC=$(normalize_path \"$1\")\n    local DST=$(normalize_path \"$2\")\n\n    TYPE=$(db_stat \"$SRC\")\n\n    #It's a directory\n    if [[ $TYPE == \"DIR\" ]]; then\n\n        #If the DST folder is not specified, I assume that is the current directory\n        if [[ $DST == \"\" ]]; then\n            DST=\".\"\n        fi\n\n        #Checking if the destination directory exists\n        if [[ ! -d $DST ]]; then\n            local basedir=\"\"\n        else\n            local basedir=$(basename \"$SRC\")\n        fi\n\n        local DEST_DIR=$(normalize_path \"$DST/$basedir\")\n        print \" > Downloading folder \\\"$SRC\\\" to \\\"$DEST_DIR\\\"... \\n\"\n\n        if [[ ! -d \"$DEST_DIR\" ]]; then\n            print \" > Creating local directory \\\"$DEST_DIR\\\"... \"\n            mkdir -p \"$DEST_DIR\"\n\n            #Check\n            if [[ $? == 0 ]]; then\n                print \"DONE\\n\"\n            else\n                print \"FAILED\\n\"\n                ERROR_STATUS=1\n                return\n            fi\n        fi\n\n        if [[ $SRC == \"/\" ]]; then\n            SRC_REQ=\"\"\n        else\n            SRC_REQ=\"$SRC\"\n        fi\n\n        OUT_FILE=$(db_list_outfile \"$SRC_REQ\")\n        if [ $? -ne 0 ]; then\n            # When db_list_outfile fail, the error message is OUT_FILE\n            print \"$OUT_FILE\\n\"\n            ERROR_STATUS=1\n            return\n        fi\n\n        #For each entry...\n        while read -r line; do\n\n            local FILE=${line%:*}\n            local META=${line##*:}\n            local TYPE=${META%;*}\n            local SIZE=${META#*;}\n\n            #Removing unneeded /\n            FILE=${FILE##*/}\n\n            if [[ $TYPE == \"file\" ]]; then\n                db_download_file \"$SRC/$FILE\" \"$DEST_DIR/$FILE\"\n            elif [[ $TYPE == \"folder\" ]]; then\n                db_download \"$SRC/$FILE\" \"$DEST_DIR\"\n            fi\n\n        done < $OUT_FILE\n\n        rm -fr $OUT_FILE\n\n    #It's a file\n    elif [[ $TYPE == \"FILE\" ]]; then\n\n        #Checking DST\n        if [[ $DST == \"\" ]]; then\n            DST=$(basename \"$SRC\")\n        fi\n\n        #If the destination is a directory, the file will be download into\n        if [[ -d $DST ]]; then\n            DST=\"$DST/$SRC\"\n        fi\n\n        db_download_file \"$SRC\" \"$DST\"\n\n    #Doesn't exists\n    else\n        print \" > No such file or directory: $SRC\\n\"\n        ERROR_STATUS=1\n        return\n    fi\n}\n\n#Simple file download\n#$1 = Remote source file\n#$2 = Local destination file\nfunction db_download_file\n{\n    local FILE_SRC=$(normalize_path \"$1\")\n    local FILE_DST=$(normalize_path \"$2\")\n\n    if [[ $SHOW_PROGRESSBAR == 1 && $QUIET == 0 ]]; then\n        CURL_PARAMETERS=\"-L --progress-bar\"\n        LINE_CR=\"\\n\"\n    else\n        CURL_PARAMETERS=\"-L -s\"\n        LINE_CR=\"\"\n    fi\n\n    #Checking if the file already exists\n    if [[ -e $FILE_DST && $SKIP_EXISTING_FILES == 1 ]]; then\n        print \" > Skipping already existing file \\\"$FILE_DST\\\"\\n\"\n        return\n    fi\n\n    # Checking if the file has the correct check sum\n    if [[ $TYPE != \"ERR\" ]]; then\n        sha_src=$(db_sha \"$FILE_SRC\")\n        sha_dst=$(db_sha_local \"$FILE_DST\")\n        if [[ $sha_src == $sha_dst && $sha_src != \"ERR\" ]]; then\n            print \"> Skipping file \\\"$FILE_SRC\\\", file exists with the same hash\\n\"\n            return\n        fi\n    fi\n\n    #Creating the empty file, that for two reasons:\n    #1) In this way I can check if the destination file is writable or not\n    #2) Curl doesn't automatically creates files with 0 bytes size\n    dd if=/dev/zero of=\"$FILE_DST\" count=0 2> /dev/null\n    if [[ $? != 0 ]]; then\n        print \" > Error writing file $FILE_DST: permission denied\\n\"\n        ERROR_STATUS=1\n        return\n    fi\n\n    print \" > Downloading \\\"$FILE_SRC\\\" to \\\"$FILE_DST\\\"... $LINE_CR\"\n    ensure_accesstoken\n    $CURL_BIN $CURL_ACCEPT_CERTIFICATES $CURL_PARAMETERS -X POST --globoff -D \"$RESPONSE_FILE\" -o \"$FILE_DST\" --header \"Authorization: Bearer $OAUTH_ACCESS_TOKEN\" --header \"Dropbox-API-Arg: {\\\"path\\\": \\\"$FILE_SRC\\\"}\" \"$API_DOWNLOAD_URL\"\n    check_http_response\n\n    #Check\n    if grep -q \"^HTTP/[12].* 200\" \"$RESPONSE_FILE\"; then\n        print \"DONE\\n\"\n    else\n        print \"FAILED\\n\"\n        rm -fr \"$FILE_DST\"\n        ERROR_STATUS=1\n        return\n    fi\n}\n\n#Saveurl\n#$1 = URL\n#$2 = Remote file destination\nfunction db_saveurl\n{\n    local URL=\"$1\"\n    local FILE_DST=$(normalize_path \"$2\")\n    local FILE_NAME=$(basename \"$URL\")\n\n    print \" > Downloading \\\"$URL\\\" to \\\"$FILE_DST\\\"...\"\n    ensure_accesstoken\n    $CURL_BIN $CURL_ACCEPT_CERTIFICATES -X POST -L -s --show-error --globoff -i -o \"$RESPONSE_FILE\" --header \"Authorization: Bearer $OAUTH_ACCESS_TOKEN\" --header \"Content-Type: application/json\" --data \"{\\\"path\\\": \\\"$FILE_DST/$FILE_NAME\\\", \\\"url\\\": \\\"$URL\\\"}\" \"$API_SAVEURL_URL\" 2> /dev/null\n    check_http_response\n\n    JOB_ID=$(sed -n 's/.*\"async_job_id\": *\"*\\([^\"]*\\)\"*.*/\\1/p' \"$RESPONSE_FILE\")\n    if [[ $JOB_ID == \"\" ]]; then\n        print \" > Error getting the job id\\n\"\n        return\n    fi\n\n    #Checking the status\n    while (true); do\n\n        ensure_accesstoken\n        $CURL_BIN $CURL_ACCEPT_CERTIFICATES -X POST -L -s --show-error --globoff -i -o \"$RESPONSE_FILE\" --header \"Authorization: Bearer $OAUTH_ACCESS_TOKEN\" --header \"Content-Type: application/json\" --data \"{\\\"async_job_id\\\": \\\"$JOB_ID\\\"}\" \"$API_SAVEURL_JOBSTATUS_URL\" 2> /dev/null\n        check_http_response\n\n        STATUS=$(sed -n 's/{\".tag\": *\"*\\([^\"]*\\)\"*.*/\\1/p' \"$RESPONSE_FILE\")\n        case $STATUS in\n\n            in_progress)\n                print \"+\"\n            ;;\n\n            complete)\n                print \" DONE\\n\"\n                break\n            ;;\n\n            failed)\n                print \" ERROR\\n\"\n                MESSAGE=$(sed -n 's/.*\"error_summary\": *\"*\\([^\"]*\\)\"*.*/\\1/p' \"$RESPONSE_FILE\")\n                print \" > Error: $MESSAGE\\n\"\n                break\n            ;;\n\n        esac\n\n        sleep 2\n\n    done\n}\n\n#Prints account info\nfunction db_account_info\n{\n    print \"Dropbox Uploader v$VERSION\\n\\n\"\n    print \" > Getting info... \"\n    ensure_accesstoken\n    $CURL_BIN $CURL_ACCEPT_CERTIFICATES -X POST -L -s --show-error --globoff -i -o \"$RESPONSE_FILE\" --header \"Authorization: Bearer $OAUTH_ACCESS_TOKEN\" \"$API_ACCOUNT_INFO_URL\" 2> /dev/null\n    check_http_response\n\n    #Check\n    if grep -q \"^HTTP/[12].* 200\" \"$RESPONSE_FILE\"; then\n\n        name=$(sed -n 's/.*\"display_name\": \"\\([^\"]*\\).*/\\1/p' \"$RESPONSE_FILE\")\n        echo -e \"\\n\\nName:\\t\\t$name\"\n\n        uid=$(sed -n 's/.*\"account_id\": \"\\([^\"]*\\).*/\\1/p' \"$RESPONSE_FILE\")\n        echo -e \"UID:\\t\\t$uid\"\n\n        email=$(sed -n 's/.*\"email\": \"\\([^\"]*\\).*/\\1/p' \"$RESPONSE_FILE\")\n        echo -e \"Email:\\t\\t$email\"\n\n        country=$(sed -n 's/.*\"country\": \"\\([^\"]*\\).*/\\1/p' \"$RESPONSE_FILE\")\n        echo -e \"Country:\\t$country\"\n\n        echo \"\"\n\n    else\n        print \"FAILED\\n\"\n        ERROR_STATUS=1\n    fi\n}\n\n#Prints account space usage info\nfunction db_account_space\n{\n    print \"Dropbox Uploader v$VERSION\\n\\n\"\n    print \" > Getting space usage info... \"\n    ensure_accesstoken\n    $CURL_BIN $CURL_ACCEPT_CERTIFICATES -X POST -L -s --show-error --globoff -i -o \"$RESPONSE_FILE\" --header \"Authorization: Bearer $OAUTH_ACCESS_TOKEN\" \"$API_ACCOUNT_SPACE_URL\" 2> /dev/null\n    check_http_response\n\n    #Check\n    if grep -q \"^HTTP/[12].* 200\" \"$RESPONSE_FILE\"; then\n\n        quota=$(sed -n 's/.*\"allocated\": \\([0-9]*\\).*/\\1/p' \"$RESPONSE_FILE\")\n        let quota_mb=$quota/1024/1024\n        echo -e \"\\n\\nQuota:\\t$quota_mb Mb\"\n\n        used=$(sed -n 's/.*\"used\": \\([0-9]*\\).*/\\1/p' \"$RESPONSE_FILE\")\n        let used_mb=$used/1024/1024\n        echo -e \"Used:\\t$used_mb Mb\"\n\n\t\tlet free_mb=$((quota-used))/1024/1024\n        echo -e \"Free:\\t$free_mb Mb\"\n\n        echo \"\"\n\n    else\n        print \"FAILED\\n\"\n        ERROR_STATUS=1\n    fi\n}\n\n#Account unlink\nfunction db_unlink\n{\n    echo -ne \"Are you sure you want unlink this script from your Dropbox account? [y/n]\"\n    read -r answer\n    if [[ $answer == \"y\" ]]; then\n        rm -fr \"$CONFIG_FILE\"\n        echo -ne \"DONE\\n\"\n    fi\n}\n\n#Delete a remote file\n#$1 = Remote file to delete\nfunction db_delete\n{\n    local FILE_DST=$(normalize_path \"$1\")\n\n    print \" > Deleting \\\"$FILE_DST\\\"... \"\n    ensure_accesstoken\n    $CURL_BIN $CURL_ACCEPT_CERTIFICATES -X POST -L -s --show-error --globoff -i -o \"$RESPONSE_FILE\" --header \"Authorization: Bearer $OAUTH_ACCESS_TOKEN\" --header \"Content-Type: application/json\" --data \"{\\\"path\\\": \\\"$FILE_DST\\\"}\" \"$API_DELETE_URL\" 2> /dev/null\n    check_http_response\n\n    #Check\n    if grep -q \"^HTTP/[12].* 200\" \"$RESPONSE_FILE\"; then\n        print \"DONE\\n\"\n    else\n        print \"FAILED\\n\"\n        ERROR_STATUS=1\n    fi\n}\n\n#Move/Rename a remote file\n#$1 = Remote file to rename or move\n#$2 = New file name or location\nfunction db_move\n{\n    local FILE_SRC=$(normalize_path \"$1\")\n    local FILE_DST=$(normalize_path \"$2\")\n\n    TYPE=$(db_stat \"$FILE_DST\")\n\n    #If the destination it's a directory, the source will be moved into it\n    if [[ $TYPE == \"DIR\" ]]; then\n        local filename=$(basename \"$FILE_SRC\")\n        FILE_DST=$(normalize_path \"$FILE_DST/$filename\")\n    fi\n\n    print \" > Moving \\\"$FILE_SRC\\\" to \\\"$FILE_DST\\\" ... \"\n    ensure_accesstoken\n    $CURL_BIN $CURL_ACCEPT_CERTIFICATES -X POST -L -s --show-error --globoff -i -o \"$RESPONSE_FILE\" --header \"Authorization: Bearer $OAUTH_ACCESS_TOKEN\" --header \"Content-Type: application/json\" --data \"{\\\"from_path\\\": \\\"$FILE_SRC\\\", \\\"to_path\\\": \\\"$FILE_DST\\\"}\" \"$API_MOVE_URL\" 2> /dev/null\n    check_http_response\n\n    #Check\n    if grep -q \"^HTTP/[12].* 200\" \"$RESPONSE_FILE\"; then\n        print \"DONE\\n\"\n    else\n        print \"FAILED\\n\"\n        ERROR_STATUS=1\n    fi\n}\n\n#Copy a remote file to a remote location\n#$1 = Remote file to rename or move\n#$2 = New file name or location\nfunction db_copy\n{\n    local FILE_SRC=$(normalize_path \"$1\")\n    local FILE_DST=$(normalize_path \"$2\")\n\n    TYPE=$(db_stat \"$FILE_DST\")\n\n    #If the destination it's a directory, the source will be copied into it\n    if [[ $TYPE == \"DIR\" ]]; then\n        local filename=$(basename \"$FILE_SRC\")\n        FILE_DST=$(normalize_path \"$FILE_DST/$filename\")\n    fi\n\n    print \" > Copying \\\"$FILE_SRC\\\" to \\\"$FILE_DST\\\" ... \"\n    ensure_accesstoken\n    $CURL_BIN $CURL_ACCEPT_CERTIFICATES -X POST -L -s --show-error --globoff -i -o \"$RESPONSE_FILE\" --header \"Authorization: Bearer $OAUTH_ACCESS_TOKEN\" --header \"Content-Type: application/json\" --data \"{\\\"from_path\\\": \\\"$FILE_SRC\\\", \\\"to_path\\\": \\\"$FILE_DST\\\"}\" \"$API_COPY_URL\" 2> /dev/null\n    check_http_response\n\n    #Check\n    if grep -q \"^HTTP/[12].* 200\" \"$RESPONSE_FILE\"; then\n        print \"DONE\\n\"\n    else\n        print \"FAILED\\n\"\n        ERROR_STATUS=1\n    fi\n}\n\n#Create a new directory\n#$1 = Remote directory to create\nfunction db_mkdir\n{\n    local DIR_DST=$(normalize_path \"$1\")\n\n    print \" > Creating Directory \\\"$DIR_DST\\\"... \"\n    ensure_accesstoken\n    $CURL_BIN $CURL_ACCEPT_CERTIFICATES -X POST -L -s --show-error --globoff -i -o \"$RESPONSE_FILE\" --header \"Authorization: Bearer $OAUTH_ACCESS_TOKEN\" --header \"Content-Type: application/json\" --data \"{\\\"path\\\": \\\"$DIR_DST\\\"}\" \"$API_MKDIR_URL\" 2> /dev/null\n    check_http_response\n\n    #Check\n    if grep -q \"^HTTP/[12].* 200\" \"$RESPONSE_FILE\"; then\n        print \"DONE\\n\"\n    elif grep -q \"{\\\"error_summary\\\": \\\"path/conflict/folder/\" \"$RESPONSE_FILE\"; then\n        print \"ALREADY EXISTS\\n\"\n    else\n        print \"FAILED\\n\"\n        ERROR_STATUS=1\n    fi\n}\n\n#List a remote folder and returns the path to the file containing the output\n#$1 = Remote directory\n#$2 = Cursor (Optional)\nfunction db_list_outfile\n{\n\n    local DIR_DST=\"$1\"\n    local HAS_MORE=\"false\"\n    local CURSOR=\"\"\n\n    if [[ -n \"$2\" ]]; then\n        CURSOR=\"$2\"\n        HAS_MORE=\"true\"\n    fi\n\n    OUT_FILE=\"$TMP_DIR/du_tmp_out_$RANDOM\"\n\n    while (true); do\n\n        if [[ $HAS_MORE == \"true\" ]]; then\n            ensure_accesstoken\n            $CURL_BIN $CURL_ACCEPT_CERTIFICATES -X POST -L -s --show-error --globoff -i -o \"$RESPONSE_FILE\" --header \"Authorization: Bearer $OAUTH_ACCESS_TOKEN\" --header \"Content-Type: application/json\" --data \"{\\\"cursor\\\": \\\"$CURSOR\\\"}\" \"$API_LIST_FOLDER_CONTINUE_URL\" 2> /dev/null\n        else\n            ensure_accesstoken\n            $CURL_BIN $CURL_ACCEPT_CERTIFICATES -X POST -L -s --show-error --globoff -i -o \"$RESPONSE_FILE\" --header \"Authorization: Bearer $OAUTH_ACCESS_TOKEN\" --header \"Content-Type: application/json\" --data \"{\\\"path\\\": \\\"$DIR_DST\\\",\\\"include_media_info\\\": false,\\\"include_deleted\\\": false,\\\"include_has_explicit_shared_members\\\": false}\" \"$API_LIST_FOLDER_URL\" 2> /dev/null\n        fi\n\n        check_http_response\n\n        HAS_MORE=$(sed -n 's/.*\"has_more\": *\\([a-z]*\\).*/\\1/p' \"$RESPONSE_FILE\")\n        CURSOR=$(sed -n 's/.*\"cursor\": *\"\\([^\"]*\\)\".*/\\1/p' \"$RESPONSE_FILE\")\n\n        #Check\n        if grep -q \"^HTTP/[12].* 200\" \"$RESPONSE_FILE\"; then\n\n            #Extracting directory content [...]\n            #and replacing \"}, {\" with \"}\\n{\"\n            #I don't like this piece of code... but seems to be the only way to do this with SED, writing a portable code...\n            local DIR_CONTENT=$(sed -n 's/.*: \\[{\\(.*\\)/\\1/p' \"$RESPONSE_FILE\" | sed 's/}, *{/}\\\n    {/g')\n\n            #Converting escaped quotes to unicode format\n            echo \"$DIR_CONTENT\" | sed 's/\\\\\"/\\\\u0022/' > \"$TEMP_FILE\"\n\n            #Extracting files and subfolders\n            while read -r line; do\n\n                local FILE=$(echo \"$line\" | sed -n 's/.*\"path_display\": *\"\\([^\"]*\\)\".*/\\1/p')\n                local TYPE=$(echo \"$line\" | sed -n 's/.*\".tag\": *\"\\([^\"]*\\).*/\\1/p')\n                local SIZE=$(convert_bytes $(echo \"$line\" | sed -n 's/.*\"size\": *\\([0-9]*\\).*/\\1/p'))\n\n                echo -e \"$FILE:$TYPE;$SIZE\" >> \"$OUT_FILE\"\n\n            done < \"$TEMP_FILE\"\n\n            if [[ $HAS_MORE == \"false\" ]]; then\n                break\n            fi\n\n        else\n            return\n        fi\n\n    done\n\n    echo $OUT_FILE\n}\n\n#List remote directory\n#$1 = Remote directory\nfunction db_list\n{\n    local DIR_DST=$(normalize_path \"$1\")\n\n    print \" > Listing \\\"$DIR_DST\\\"... \"\n\n    if [[ \"$DIR_DST\" == \"/\" ]]; then\n        DIR_DST=\"\"\n    fi\n\n    OUT_FILE=$(db_list_outfile \"$DIR_DST\")\n    if [ -z \"$OUT_FILE\" ]; then\n        print \"FAILED\\n\"\n        ERROR_STATUS=1\n        return\n    else\n        print \"DONE\\n\"\n    fi\n\n    #Looking for the biggest file size\n    #to calculate the padding to use\n    local padding=0\n    while read -r line; do\n        local FILE=${line%:*}\n        local META=${line##*:}\n        local SIZE=${META#*;}\n\n        if [[ ${#SIZE} -gt $padding ]]; then\n            padding=${#SIZE}\n        fi\n    done < \"$OUT_FILE\"\n\n    #For each entry, printing directories...\n    while read -r line; do\n\n        local FILE=${line%:*}\n        local META=${line##*:}\n        local TYPE=${META%;*}\n        local SIZE=${META#*;}\n\n        #Removing unneeded /\n        FILE=${FILE##*/}\n\n        if [[ $TYPE == \"folder\" ]]; then\n            FILE=$(echo -e \"$FILE\")\n            $PRINTF \" [D] %-${padding}s %s\\n\" \"$SIZE\" \"$FILE\"\n        fi\n\n    done < \"$OUT_FILE\"\n\n    #For each entry, printing files...\n    while read -r line; do\n\n        local FILE=${line%:*}\n        local META=${line##*:}\n        local TYPE=${META%;*}\n        local SIZE=${META#*;}\n\n        #Removing unneeded /\n        FILE=${FILE##*/}\n\n        if [[ $TYPE == \"file\" ]]; then\n            FILE=$(echo -e \"$FILE\")\n            $PRINTF \" [F] %-${padding}s %s\\n\" \"$SIZE\" \"$FILE\"\n        fi\n\n    done < \"$OUT_FILE\"\n\n    rm -fr \"$OUT_FILE\"\n}\n\n#Longpoll remote directory only once\n#$1 = Timeout\n#$2 = Remote directory\nfunction db_monitor_nonblock\n{\n    local TIMEOUT=$1\n    local DIR_DST=$(normalize_path \"$2\")\n\n    if [[ \"$DIR_DST\" == \"/\" ]]; then\n        DIR_DST=\"\"\n    fi\n\n    ensure_accesstoken\n    $CURL_BIN $CURL_ACCEPT_CERTIFICATES -X POST -L -s --show-error --globoff -i -o \"$RESPONSE_FILE\" --header \"Authorization: Bearer $OAUTH_ACCESS_TOKEN\" --header \"Content-Type: application/json\" --data \"{\\\"path\\\": \\\"$DIR_DST\\\",\\\"include_media_info\\\": false,\\\"include_deleted\\\": false,\\\"include_has_explicit_shared_members\\\": false}\" \"$API_LIST_FOLDER_URL\" 2> /dev/null\n    check_http_response\n\n    if grep -q \"^HTTP/[12].* 200\" \"$RESPONSE_FILE\"; then\n\n        local CURSOR=$(sed -n 's/.*\"cursor\": *\"\\([^\"]*\\)\".*/\\1/p' \"$RESPONSE_FILE\")\n\n        ensure_accesstoken\n        $CURL_BIN $CURL_ACCEPT_CERTIFICATES -X POST -L -s --show-error --globoff -i -o \"$RESPONSE_FILE\" --header \"Content-Type: application/json\" --data \"{\\\"cursor\\\": \\\"$CURSOR\\\",\\\"timeout\\\": ${TIMEOUT}}\" \"$API_LONGPOLL_FOLDER\" 2> /dev/null\n        check_http_response\n\n        if grep -q \"^HTTP/[12].* 200\" \"$RESPONSE_FILE\"; then\n            local CHANGES=$(sed -n 's/.*\"changes\" *: *\\([a-z]*\\).*/\\1/p' \"$RESPONSE_FILE\")\n        else\n            ERROR_MSG=$(grep \"Error in call\" \"$RESPONSE_FILE\")\n            print \"FAILED to longpoll (http error): $ERROR_MSG\\n\"\n            ERROR_STATUS=1\n            return 1\n        fi\n\n        if [[ -z \"$CHANGES\" ]]; then\n            print \"FAILED to longpoll (unexpected response)\\n\"\n            ERROR_STATUS=1\n            return 1\n        fi\n\n        if [ \"$CHANGES\" == \"true\" ]; then\n\n            OUT_FILE=$(db_list_outfile \"$DIR_DST\" \"$CURSOR\")\n\n            if [ -z \"$OUT_FILE\" ]; then\n                print \"FAILED to list changes\\n\"\n                ERROR_STATUS=1\n                return\n            fi\n\n            #For each entry, printing directories...\n            while read -r line; do\n\n                local FILE=${line%:*}\n                local META=${line##*:}\n                local TYPE=${META%;*}\n                local SIZE=${META#*;}\n\n                #Removing unneeded /\n                FILE=${FILE##*/}\n\n                if [[ $TYPE == \"folder\" ]]; then\n                    FILE=$(echo -e \"$FILE\")\n                    $PRINTF \" [D] %s\\n\" \"$FILE\"\n                elif [[ $TYPE == \"file\" ]]; then\n                    FILE=$(echo -e \"$FILE\")\n                    $PRINTF \" [F] %s %s\\n\" \"$SIZE\" \"$FILE\"\n                elif [[ $TYPE == \"deleted\" ]]; then\n                    FILE=$(echo -e \"$FILE\")\n                    $PRINTF \" [-] %s\\n\" \"$FILE\"\n                fi\n\n            done < \"$OUT_FILE\"\n\n            rm -fr \"$OUT_FILE\"\n        fi\n\n    else\n        ERROR_STATUS=1\n        return 1\n    fi\n\n}\n\n#Longpoll continuously remote directory\n#$1 = Timeout\n#$2 = Remote directory\nfunction db_monitor\n{\n    local TIMEOUT=$1\n    local DIR_DST=$(normalize_path \"$2\")\n\n    while (true); do\n        db_monitor_nonblock \"$TIMEOUT\" \"$2\"\n    done\n}\n\n#Share remote file\n#$1 = Remote file\nfunction db_share\n{\n    local FILE_DST=$(normalize_path \"$1\")\n\n    ensure_accesstoken\n    $CURL_BIN $CURL_ACCEPT_CERTIFICATES -X POST -L -s --show-error --globoff -i -o \"$RESPONSE_FILE\" --header \"Authorization: Bearer $OAUTH_ACCESS_TOKEN\" --header \"Content-Type: application/json\" --data \"{\\\"path\\\": \\\"$FILE_DST\\\",\\\"settings\\\": {\\\"requested_visibility\\\": \\\"public\\\"}}\" \"$API_SHARE_URL\" 2> /dev/null\n    check_http_response\n\n    #Check\n    if grep -q \"^HTTP/[12].* 200\" \"$RESPONSE_FILE\"; then\n        print \" > Share link: \"\n        SHARE_LINK=$(sed -n 's/.*\"url\": \"\\([^\"]*\\).*/\\1/p' \"$RESPONSE_FILE\")\n        echo \"$SHARE_LINK\"\n    else\n        get_Share \"$FILE_DST\"\n    fi\n}\n\n#Query existing shared link\n#$1 = Remote file\nfunction get_Share\n{\n    local FILE_DST=$(normalize_path \"$1\")\n    ensure_accesstoken\n    $CURL_BIN $CURL_ACCEPT_CERTIFICATES -X POST -L -s --show-error --globoff -i -o \"$RESPONSE_FILE\" --header \"Authorization: Bearer $OAUTH_ACCESS_TOKEN\" --header \"Content-Type: application/json\" --data \"{\\\"path\\\": \\\"$FILE_DST\\\",\\\"direct_only\\\": true}\" \"$API_SHARE_LIST\"\n    check_http_response\n\n    #Check\n    if grep -q \"^HTTP/[12].* 200\" \"$RESPONSE_FILE\"; then\n        print \" > Share link: \"\n        SHARE_LINK=$(sed -n 's/.*\"url\": \"\\([^\"]*\\).*/\\1/p' \"$RESPONSE_FILE\")\n        echo \"$SHARE_LINK\"\n    else\n        print \"FAILED\\n\"\n        MESSAGE=$(sed -n 's/.*\"error_summary\": *\"*\\([^\"]*\\)\"*.*/\\1/p' \"$RESPONSE_FILE\")\n        print \" > Error: $MESSAGE\\n\"\n        ERROR_STATUS=1\n    fi\n}\n\n#Search on Dropbox\n#$1 = query\nfunction db_search\n{\n    local QUERY=\"$1\"\n\n    print \" > Searching for \\\"$QUERY\\\"... \"\n\n    ensure_accesstoken\n    $CURL_BIN $CURL_ACCEPT_CERTIFICATES -X POST -L -s --show-error --globoff -i -o \"$RESPONSE_FILE\" --header \"Authorization: Bearer $OAUTH_ACCESS_TOKEN\" --header \"Content-Type: application/json\" --data \"{\\\"path\\\": \\\"\\\",\\\"query\\\": \\\"$QUERY\\\",\\\"start\\\": 0,\\\"max_results\\\": 1000,\\\"mode\\\": \\\"filename\\\"}\" \"$API_SEARCH_URL\" 2> /dev/null\n    check_http_response\n\n    #Check\n    if grep -q \"^HTTP/[12].* 200\" \"$RESPONSE_FILE\"; then\n        print \"DONE\\n\"\n    else\n        print \"FAILED\\n\"\n        ERROR_STATUS=1\n    fi\n\n    #Extracting directory content [...]\n    #and replacing \"}, {\" with \"}\\n{\"\n    #I don't like this piece of code... but seems to be the only way to do this with SED, writing a portable code...\n    local DIR_CONTENT=$(sed 's/}, *{/}\\\n{/g' \"$RESPONSE_FILE\")\n\n    #Converting escaped quotes to unicode format\n    echo \"$DIR_CONTENT\" | sed 's/\\\\\"/\\\\u0022/' > \"$TEMP_FILE\"\n\n    #Extracting files and subfolders\n    rm -fr \"$RESPONSE_FILE\"\n    while read -r line; do\n\n        local FILE=$(echo \"$line\" | sed -n 's/.*\"path_display\": *\"\\([^\"]*\\)\".*/\\1/p')\n        local TYPE=$(echo \"$line\" | sed -n 's/.*\".tag\": *\"\\([^\"]*\\).*/\\1/p')\n        local SIZE=$(convert_bytes $(echo \"$line\" | sed -n 's/.*\"size\": *\\([0-9]*\\).*/\\1/p'))\n\n        echo -e \"$FILE:$TYPE;$SIZE\" >> \"$RESPONSE_FILE\"\n\n    done < \"$TEMP_FILE\"\n\n    #Looking for the biggest file size\n    #to calculate the padding to use\n    local padding=0\n    while read -r line; do\n        local FILE=${line%:*}\n        local META=${line##*:}\n        local SIZE=${META#*;}\n\n        if [[ ${#SIZE} -gt $padding ]]; then\n            padding=${#SIZE}\n        fi\n    done < \"$RESPONSE_FILE\"\n\n    #For each entry, printing directories...\n    while read -r line; do\n\n        local FILE=${line%:*}\n        local META=${line##*:}\n        local TYPE=${META%;*}\n        local SIZE=${META#*;}\n\n        if [[ $TYPE == \"folder\" ]]; then\n            FILE=$(echo -e \"$FILE\")\n            $PRINTF \" [D] %-${padding}s %s\\n\" \"$SIZE\" \"$FILE\"\n        fi\n\n    done < \"$RESPONSE_FILE\"\n\n    #For each entry, printing files...\n    while read -r line; do\n\n        local FILE=${line%:*}\n        local META=${line##*:}\n        local TYPE=${META%;*}\n        local SIZE=${META#*;}\n\n        if [[ $TYPE == \"file\" ]]; then\n            FILE=$(echo -e \"$FILE\")\n            $PRINTF \" [F] %-${padding}s %s\\n\" \"$SIZE\" \"$FILE\"\n        fi\n\n    done < \"$RESPONSE_FILE\"\n\n}\n\n#Query the sha256-dropbox-sum of a remote file\n#see https://www.dropbox.com/developers/reference/content-hash for more information\n#$1 = Remote file\nfunction db_sha\n{\n    local FILE=$(normalize_path \"$1\")\n\n    if [[ $FILE == \"/\" ]]; then\n        echo \"ERR\"\n        return\n    fi\n\n    #Checking if it's a file or a directory and get the sha-sum\n    ensure_accesstoken\n    $CURL_BIN $CURL_ACCEPT_CERTIFICATES -X POST -L -s --show-error --globoff -i -o \"$RESPONSE_FILE\" --header \"Authorization: Bearer $OAUTH_ACCESS_TOKEN\" --header \"Content-Type: application/json\" --data \"{\\\"path\\\": \\\"$FILE\\\"}\" \"$API_METADATA_URL\" 2> /dev/null\n    check_http_response\n\n    local TYPE=$(sed -n 's/{\".tag\": *\"*\\([^\"]*\\)\"*.*/\\1/p' \"$RESPONSE_FILE\")\n    if [[ $TYPE == \"folder\" ]]; then\n        echo \"ERR\"\n        return\n    fi\n\n    local SHA256=$(sed -n 's/.*\"content_hash\": \"\\([^\"]*\\).*/\\1/p' \"$RESPONSE_FILE\")\n    echo \"$SHA256\"\n}\n\n#Query the sha256-dropbox-sum of a local file\n#see https://www.dropbox.com/developers/reference/content-hash for more information\n#$1 = Local file\nfunction db_sha_local\n{\n    local FILE=$(normalize_path \"$1\")\n    local FILE_SIZE=$(file_size \"$FILE\")\n    local OFFSET=0\n    local SKIP=0\n    local SHA_CONCAT=\"\"\n\n    which shasum > /dev/null\n    if [[ $? != 0 ]]; then\n        echo \"ERR\"\n        return\n    fi\n\n    while ([[ $OFFSET -lt \"$FILE_SIZE\" ]]); do\n        dd if=\"$FILE\" of=\"$CHUNK_FILE\" bs=4194304 skip=$SKIP count=1 2> /dev/null\n        local SHA=$(shasum -a 256 \"$CHUNK_FILE\" | awk '{print $1}')\n        SHA_CONCAT=\"${SHA_CONCAT}${SHA}\"\n\n        let OFFSET=$OFFSET+4194304\n        let SKIP=$SKIP+1\n    done\n\n    if [[ \"`uname -s`\" = \"Darwin\" ]]\n    then\n    \t\t# sed for macOS will give an error \"bad flag in substitute command: 'I'\"\n    \t\t# when using the original syntax. This option works instead.\n\t\tshaHex=$(echo $SHA_CONCAT | sed 's/\\([0-9A-Fa-f]\\{2\\}\\)/\\\\x\\1/g')\n    else\n\t    shaHex=$(echo $SHA_CONCAT | sed 's/\\([0-9A-F]\\{2\\}\\)/\\\\x\\1/gI')\n\tfi\n\n    echo -ne $shaHex | shasum -a 256 | awk '{print $1}'\n}\n\n################\n#### SETUP  ####\n################\n\n#CHECKING FOR AUTH FILE\nif [[ -e $CONFIG_FILE ]]; then\n\n    #Loading data...\n    source \"$CONFIG_FILE\" 2>/dev/null\n\n    #Checking if it's still a v1 API configuration file\n    if [[ $CONFIGFILE_VERSION != \"2.0\" ]]; then\n        echo -ne \"The config file contains the old deprecated v1 or v2 oauth tokens.\\n\"\n        echo -ne \"Please run again the script and follow the configuration wizard. The old configuration file has been backed up to $CONFIG_FILE.old\\n\"\n        mv \"$CONFIG_FILE\" \"$CONFIG_FILE\".old\n        exit 1\n    fi\n\n    #Checking loaded data\n    if [[ $OAUTH_APP_KEY = \"\" || $OAUTH_APP_SECRET = \"\" || $OAUTH_REFRESH_TOKEN = \"\" ]]; then\n        echo -ne \"Error loading data from $CONFIG_FILE...\\n\"\n        echo -ne \"It is recommended to run $0 unlink\\n\"\n        remove_temp_files\n        exit 1\n    fi\n\n#NEW SETUP...\nelse\n    echo -ne \"\\n This is the first time you run this script, please follow the instructions:\\n\\n\"\n    echo -ne \"(note: Dropbox will change their API on 2021-09-30.\\n\"\n    echo -ne \"When using dropbox_uploader.sh configured in the past with the old API, have a look at README.md, before continue.)\\n\\n\"\n    echo -ne \" 1) Open the following URL in your Browser, and log in using your account: $APP_CREATE_URL\\n\"\n    echo -ne \" 2) Click on \\\"Create App\\\", then select \\\"Choose an API: Scoped Access\\\"\\n\"\n    echo -ne \" 3) \\\"Choose the type of access you need: App folder\\\"\\n\"\n    echo -ne \" 4) Enter the \\\"App Name\\\" that you prefer (e.g. MyUploader$RANDOM$RANDOM$RANDOM), must be unique\\n\\n\"\n    echo -ne \" Now, click on the \\\"Create App\\\" button.\\n\\n\"\n    echo -ne \" 5) Now the new configuration is opened, switch to tab \\\"permissions\\\" and check \\\"files.metadata.read/write\\\" and \\\"files.content.read/write\\\"\\n\"\n    echo -ne \" Now, click on the \\\"Submit\\\" button.\\n\\n\"\n    echo -ne \" 6) Now to tab \\\"settings\\\" and provide the following information:\\n\"\n\n    echo -ne \" App key: \"\n    read -r OAUTH_APP_KEY\n\n    echo -ne \" App secret: \"\n    read -r OAUTH_APP_SECRET\n\n    url=\"${API_OAUTH_AUTHORIZE}?client_id=${OAUTH_APP_KEY}&token_access_type=offline&response_type=code\"\n    echo -ne \"  Open the following URL in your Browser and allow suggested permissions: ${url}\\n\"\n    echo -ne \" Please provide the access code: \"\n    read -r access_code\n\n    echo -ne \"\\n > App key: ${OAUTH_APP_KEY}\\n\"\n    echo -ne \" > App secret: '${OAUTH_APP_SECRET}\\n\"\n    echo -ne \" > Access code: '${access_code}'. Looks ok? [y/N]: \"\n    read -r answer\n    if [[ $answer != \"y\" ]]; then\n        remove_temp_files\n        exit 1\n    fi\n\n    $CURL_BIN $CURL_ACCEPT_CERTIFICATES $API_OAUTH_TOKEN -d code=$access_code -d grant_type=authorization_code -u $OAUTH_APP_KEY:$OAUTH_APP_SECRET -o \"$RESPONSE_FILE\" 2>/dev/null\n    check_http_response\n    OAUTH_REFRESH_TOKEN=$(sed -n 's/.*\"refresh_token\": \"\\([^\"]*\\).*/\\1/p' \"$RESPONSE_FILE\")\n\n    echo \"CONFIGFILE_VERSION=2.0\" > \"$CONFIG_FILE\"\n    echo \"OAUTH_APP_KEY=$OAUTH_APP_KEY\" >> \"$CONFIG_FILE\"\n    echo \"OAUTH_APP_SECRET=$OAUTH_APP_SECRET\" >> \"$CONFIG_FILE\"\n    echo \"OAUTH_REFRESH_TOKEN=$OAUTH_REFRESH_TOKEN\" >> \"$CONFIG_FILE\"\n    echo \"   The configuration has been saved.\"\n\n    remove_temp_files\n    exit 0\nfi\n\n# GET ACCESS TOKEN\nensure_accesstoken\n\n\n################\n#### START  ####\n################\n\nCOMMAND=\"${*:$OPTIND:1}\"\nARG1=\"${*:$OPTIND+1:1}\"\nARG2=\"${*:$OPTIND+2:1}\"\n\nlet argnum=$#-$OPTIND\n\n#CHECKING PARAMS VALUES\ncase $COMMAND in\n\n    upload)\n\n        if [[ $argnum -lt 2 ]]; then\n            usage\n        fi\n\n        FILE_DST=\"${*:$#:1}\"\n\n        for (( i=OPTIND+1; i<$#; i++ )); do\n            FILE_SRC=\"${*:$i:1}\"\n            db_upload \"$FILE_SRC\" \"/$FILE_DST\"\n        done\n\n    ;;\n\n    download)\n\n        if [[ $argnum -lt 1 ]]; then\n            usage\n        fi\n\n        FILE_SRC=\"$ARG1\"\n        FILE_DST=\"$ARG2\"\n\n        db_download \"/$FILE_SRC\" \"$FILE_DST\"\n\n    ;;\n\n    saveurl)\n\n        if [[ $argnum -lt 1 ]]; then\n            usage\n        fi\n\n        URL=$ARG1\n        FILE_DST=\"$ARG2\"\n\n        db_saveurl \"$URL\" \"/$FILE_DST\"\n\n    ;;\n\n    share)\n\n        if [[ $argnum -lt 1 ]]; then\n            usage\n        fi\n\n        FILE_DST=\"$ARG1\"\n\n        db_share \"/$FILE_DST\"\n\n    ;;\n\n    info)\n\n        db_account_info\n\n    ;;\n\n    space)\n\n        db_account_space\n\n    ;;\n\n    delete|remove)\n\n        if [[ $argnum -lt 1 ]]; then\n            usage\n        fi\n\n        FILE_DST=\"$ARG1\"\n\n        db_delete \"/$FILE_DST\"\n\n    ;;\n\n    move|rename)\n\n        if [[ $argnum -lt 2 ]]; then\n            usage\n        fi\n\n        FILE_SRC=\"$ARG1\"\n        FILE_DST=\"$ARG2\"\n\n        db_move \"/$FILE_SRC\" \"/$FILE_DST\"\n\n    ;;\n\n    copy)\n\n        if [[ $argnum -lt 2 ]]; then\n            usage\n        fi\n\n        FILE_SRC=\"$ARG1\"\n        FILE_DST=\"$ARG2\"\n\n        db_copy \"/$FILE_SRC\" \"/$FILE_DST\"\n\n    ;;\n\n    mkdir)\n\n        if [[ $argnum -lt 1 ]]; then\n            usage\n        fi\n\n        DIR_DST=\"$ARG1\"\n\n        db_mkdir \"/$DIR_DST\"\n\n    ;;\n\n    search)\n\n        if [[ $argnum -lt 1 ]]; then\n            usage\n        fi\n\n        QUERY=$ARG1\n\n        db_search \"$QUERY\"\n\n    ;;\n\n    list)\n\n        DIR_DST=\"$ARG1\"\n\n        #Checking DIR_DST\n        if [[ $DIR_DST == \"\" ]]; then\n            DIR_DST=\"/\"\n        fi\n\n        db_list \"/$DIR_DST\"\n\n    ;;\n\n    monitor)\n\n        DIR_DST=\"$ARG1\"\n        TIMEOUT=$ARG2\n\n        #Checking DIR_DST\n        if [[ $DIR_DST == \"\" ]]; then\n            DIR_DST=\"/\"\n        fi\n\n        print \" > Monitoring \\\"$DIR_DST\\\" for changes...\\n\"\n\n        if [[ -n $TIMEOUT ]]; then\n            db_monitor_nonblock $TIMEOUT \"/$DIR_DST\"\n        else\n            db_monitor 60 \"/$DIR_DST\"\n        fi\n\n    ;;\n\n    unlink)\n\n        db_unlink\n\n    ;;\n\n    *)\n\n        if [[ $COMMAND != \"\" ]]; then\n            print \"Error: Unknown command: $COMMAND\\n\\n\"\n            ERROR_STATUS=1\n        fi\n        usage\n\n    ;;\n\nesac\n\nremove_temp_files\n\nif [[ $ERROR_STATUS -ne 0 ]]; then\n    echo \"Some error occured. rerun the script with \\\"-d\\\" option and check the output and logfile: $RESPONSE_FILE.\"\nfi\n\nexit $ERROR_STATUS\n"
        },
        {
          "name": "testUnit.sh",
          "type": "blob",
          "size": 2.53125,
          "content": "#!/bin/bash\n\nDU=./dropbox_uploader.sh\n\nfunction check_exit\n{\n    if [ $? -ne 0 ]; then\n        echo \" Error!!!\"\n        exit 1\n    else\n        echo \" Passed\"\n    fi\n}\n\n#Creating garbage data\necho -ne \" - Creating garbage data...\\n\"\nrm -fr \"testData\"\nmkdir -p \"testData\"\ndd if=/dev/urandom of=\"testData/file 1.txt\" bs=1M count=3\ndd if=/dev/urandom of=\"testData/file 2 √π.txt\" bs=1M count=5\nmkdir -p \"testData/recurse\"\ndd if=/dev/urandom of=\"testData/recurse/file 3.txt\" bs=1M count=1\ndd if=/dev/urandom of=\"testData/recurse/test_√ú.txt\" bs=1M count=1\ndd if=/dev/urandom of=\"testData/recurse/test%20test.txt\" bs=1M count=1\nmkdir -p \"testData/recurse/dir 1/\"\ndd if=/dev/urandom of=\"testData/recurse/dir 1/file 4.txt\" bs=1M count=1\nmkdir -p \"testData/recurse/dir 1/dir 3/\"\ndd if=/dev/urandom of=\"testData/recurse/dir 1/dir 3/file 5.txt\" bs=1M count=1\nmkdir -p \"testData/recurse/dir 2/\"\n\ndd if=/dev/urandom of=\"testData/file%20file.txt\" bs=1M count=1\n\nrm -fr recurse\n\n#Rmdir\necho -ne \" - Remove remote directory...\"\n$DU -q remove du_tests\necho \"\"\n\n#Mkdir\necho -ne \" - Make remote directory...\"\n$DU -q mkdir du_tests\ncheck_exit\n\n#Simple upload\necho -ne \" - Simple file upload...\"\n$DU -q upload \"testData/file 1.txt\" du_tests\ncheck_exit\n\n#Checking with list\necho -ne \" - Checking file...\"\n$DU -q list du_tests | grep \"file 1.txt\" > /dev/null\ncheck_exit\n\n#Simple upload 2\necho -ne \" - Simple file upload with unicode chars...\"\n$DU -q upload testData/file\\ 2* du_tests\ncheck_exit\n\n#Checking with list\necho -ne \" - Checking file...\"\n$DU -q list du_tests | grep \"file 2 √π.txt\" > /dev/null\ncheck_exit\n\n#Simple upload 3\necho -ne \" - Simple file upload with printf formats...\"\n$DU -q upload \"testData/file%20file.txt\" du_tests\ncheck_exit\n\n#Checking with list\necho -ne \" - Checking file...\"\n$DU -q list du_tests | grep \"file%20file.txt\" > /dev/null\ncheck_exit\n\n#Recursive directory upload\necho -ne \" - Recursive directory upload...\"\n$DU -q upload testData/recurse du_tests\ncheck_exit\n\n#Recursive directory download\necho -ne \" - Recursive directory download...\"\n$DU -q download du_tests/recurse\ncheck_exit\n\n#Checking the downloaded dir\necho -ne \" - Checking the downloaded dir...\"\ndiff -r recurse testData/recurse/\ncheck_exit\n\n#Again, recursive directory download\necho -ne \" - Again recursive directory download...\"\n$DU -q download du_tests/recurse\ncheck_exit\n\n#Again, checking the downloaded dir\necho -ne \" - Checking the downloaded dir...\"\ndiff -r recurse testData/recurse/\ncheck_exit\n\nrm -fr \"recurse\"\nrm -fr \"testData\"\n\n#Rmdir\necho -ne \" - Remove remote directory...\"\n$DU -q remove du_tests\ncheck_exit\n"
        }
      ]
    }
  ]
}