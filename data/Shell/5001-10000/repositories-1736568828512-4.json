{
  "metadata": {
    "timestamp": 1736568828512,
    "page": 4,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rgcr/m-cli",
      "stars": 9712,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.25390625,
          "content": "# EditorConfig is awesome: https://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n# Unix-style newlines with a newline ending every file\n[*]\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\n\n[*.md]\nindent_size = 2\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.015625,
          "content": "*.log\n.DS_Store\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.8369140625,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [0.3.0]\n\n### Added\n\n- `airdrop` - Manage Airdrop\n- `appearance` - Manage macOS appearance\n- `localhost` - List, add and remove from hosts file\n- `touchbar` - Reset the touchbar\n\n### Updated\n\n- `dir` can now manage .DS_Store generations with `m dir dsfiles`\n- `display` can now change brightness eg. `m display down`\n- `dock` can now change the delay for autohiding eg. `m dock autohidedelay 1.0`\n- `wifi`\n  - `wifi ls` or `wifi list` to list wifi networks\n  - `wifi forget ESSID` to forget a wifi network\n\n### Fixed\n\n- `bluetooth` now works on 10.12+\n\n## [0.2.5]\n\nTODO: Back-populate the changelog...\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.05078125,
          "content": "The MIT License\n\nCopyright (c) 2016 Rogelio Cedillo\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Readme.md",
          "type": "blob",
          "size": 4.3037109375,
          "content": "# ï£¿ m-cli\n\n## Project Status\n\n![maintenance-status](https://img.shields.io/badge/maintenance-looking--for--maintainer-orange.svg)\n\n## [:warning: Hello, we are looking for New Maintainers ðŸš€](looking-for-maintainer.md)\n\n\n<br>\n<br>\n\n:boom: **Swiss Army Knife for macOS !**\n\n[Overview](#overview)</br>\n[Install](#install)</br>\n[Uninstall](#uninstall)</br>\n[How To Use](#how-to-use)</br>\n[All Commands](#all-commands)</br>\n[Contributing](#contributing)</br>\n\n# Overview\n\n**m-cli** is a macOS command line tool that lets you interact with utilities and applications entirely in **Terminal**. It differs from other macOS command line tools in the following ways:\n\n* You can easily manage administrative tasks\n* It doesn't install 3rd party tools since it doesn't have dependencies\n* Installation is easy and doesn't require intervention\n* It only uses macOS commands\n\n\n# Install\n\nYou can install **m-cli** using [Homebrew](https://brew.sh/), or you can manually install it.\n\n### Homebrew install\nIf you have Homebrew installed, run:\n\n  `brew install m-cli`\n\n### Manual install\nIf you want to manually install **m-cli**, run:\n\n  `curl -fsSL https://raw.githubusercontent.com/rgcr/m-cli/master/install.sh | sudo sh`\n\n  You can also install it to a different path, shown below:\n\n  `INSTALL_DIR=$HOME/.m-cli sh <(curl -fsSL https://raw.githubusercontent.com/rgcr/m-cli/master/install.sh)`\n\n  _Note: Certain plugins, such as that for the \"gatekeeper\" command, will not work if `m-cli` is installed with standard user privilege. Certain plugins, such as that for the \"trash\" command, will not work until and unless your terminal emulator is granted Full Disk Access (look under \"Security & Privacy\" in System Preferences)._\n  \n # Uninstall\n \n To uninstall **m-cli** from your system, run:\n \n `m --uninstall`\n\n# How To Use\n\n**m-cli** commands are executed using the following steps:\n\n#### 1. Run `m`to display all of the commands (utilities) available in **m-cli**.\n#### 2. Run `m <command>` to display the options available for this command.\n#### 3. Run `m <command> <option>` to execute an option for this command.\n\nA diagram of this structure is shown below:\n\n```\nm\n|___itunes\n|     |___status\n|     |___play\n|     |___pause\n|     |\n|     ...\n|\n|___disk \n      |___ls\n      |___list\n      |___fs\n      ...\n```\n\nFor example, running `m itunes` will display the options available for iTunes, as shown below:\n\n```\n    usage: m itunes [ status | play | pause | next | prev | mute | unmute | vol up | vol down | vol #| stop | quit | help ]\n\n    Examples:\n      m itunes status       # Show status\n      m itunes play         # Play track\n      m itunes pause        # Pause track\n      m itunes next         # Play next track\n      m itunes prev         # Play previous track\n      m itunes mute         # Mute iTunes\n      m itunes unmute       # Unmute iTunes\n      m itunes vol up       # Volume Up\n      m itunes vol down     # Volume Down\n      m itunes vol #        # Set volume level\n      m itunes stop         # Stop track\n      m itunes quit         # Quit iTunes\n```\n\nIn this example, running `m itunes play` will play the current selected track in your iTunes music library. \n\n# All Commands\n\n**m-cli** currently supports the following commands:\n\n`help`</br>\n`airdrop`</br>\n`appearance`</br>\n`audio`</br>\n`battery`</br>\n`bluetooth`</br>\n`dir`</br>\n`disk`</br>\n`display`</br>\n`dns`</br>\n`dock`</br>\n`fan`</br>\n`finder`</br>\n`firewall`</br>\n`flightmode`</br>\n`gatekeeper`</br>\n`group`</br>\n`hostname`</br>\n`info`</br>\n`itunes`</br>\n`localhost`</br>\n`lock`</br>\n`network`</br>\n`nosleep`</br>\n`notification`</br>\n`ntp`</br>\n`printer`</br>\n`restart`</br>\n`safeboot`</br>\n`screensaver`</br>\n`service`</br>\n`shutdown`</br>\n`sleep`</br>\n`timezone`</br>\n`touchbar`</br>\n`trash`</br>\n`usb`</br>\n`update`</br>\n`user`</br>\n`volume`</br>\n`vpn`</br>\n`wallpaper`</br>\n`wifi`</br>\n\n# Contributing\n\n1. Fork it!\n2. Create your feature branch: `git checkout -b my-new-feature`\n3. Commit your changes: `git commit -m 'Add some feature'`\n4. Push to the branch: `git push origin my-new-feature`\n5. Submit a pull request :metal:\n\n# TODO:\n* Add more plugins\n* Improve the help\n* Improve the installation script\n\n## Resources:\n- [Awesome OSX Command Line](https://github.com/herrbischoff/awesome-osx-command-line)\n- [Apple MacOS Command Line Documentation](https://ss64.com/osx/)\n\n\n---\n[MIT License](LICENSE.md) Â© Rogelio Cedillo\n"
        },
        {
          "name": "completion",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 1.52734375,
          "content": "#!/usr/bin/env bash\n\nPKG=\"m-cli\"\nGIT_URL=\"https://github.com/rgcr/m-cli.git\"\nINSTALL_DIR=\"${INSTALL_DIR}\"\n\n\nhas(){\n    type \"$1\" > /dev/null 2>&1\n}\n\n\ninstall_from_git(){\n    [ -z \"${INSTALL_DIR}\" ] && INSTALL_DIR=\"/usr/local/${PKG}\"\n    if [ -e \"${INSTALL_DIR}\" ]; then\n        echo \"${PKG} Is already installed\"\n        echo \"Updating ${PKG} from git\"\n        command git --git-dir=\"${INSTALL_DIR}/.git\" --work-tree=\"${INSTALL_DIR}\" fetch --depth=1 || {\n            echo >&2 \"Failed to fetch changes => ${GIT_URL}\"\n            exit 1\n        }\n        command git --git-dir=\"${INSTALL_DIR}/.git\" --work-tree=\"${INSTALL_DIR}\" reset --hard origin/master || {\n            echo >&2 \"Failed to reset changes => ${GIT_URL}\"\n            exit 1\n        }\n    else\n        echo \"Downloading ${PKG} from git to ${INSTALL_DIR}\"\n        command git clone --depth 1 ${GIT_URL} ${INSTALL_DIR} || {\n            echo >&2 \"Failed to clone => ${GIT_URL}\"\n            exit 1\n        }\n        sudo ln -sf ${INSTALL_DIR}/plugins/itunes ${INSTALL_DIR}/plugins/music\n        chmod -R 755 ${INSTALL_DIR}/plugins 2>/dev/null\n        chmod 755 ${INSTALL_DIR}/m 2>/dev/null\n        sudo ln -sf ${INSTALL_DIR}/m /usr/local/bin/m\n    fi\n}\n\n\nif has \"git\"; then\n    install_from_git;\nelse\n    echo >&2 \"Failed to install, please install git before.\"\nfi\n\n[ -z \"${INSTALL_DIR}\" ] && INSTALL_DIR=\"/usr/local/${PKG}\"\n\nif [ -f \"${INSTALL_DIR}/m\" ]; then\n    echo \"\"\n    echo \"Done!\"\nelse\n    echo >&2 \"\"\n    echo >&2 \"Something went wrong. ${INSTALL_DIR}/m not found\"\n    echo >&2 \"\"\n    exit 1\nfi\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "looking-for-maintainer.md",
          "type": "blob",
          "size": 1.5322265625,
          "content": "# Looking for New Maintainers ðŸš€\n\nHi everyone,\n\nI hope this message finds you well! It has been incredible to see the community grow and the positive impact **m-cli** has had.\n\nHowever, due to time constraints, I am no longer able to actively maintain this project. I am reaching out to the community to find passionate and dedicated maintainers who are interested in taking the reins and continuing the development and support of **m-cli** project. \n\n## What We're Looking For\n\n- **Passion for the Project**: A genuine interest in the goals and functionality of **m-cli** project.\n- **Community Engagement**: Willingness to engage with the community, handle issues, and review pull requests.\n- **Vision**: Ideas for future enhancements and a vision for the project's direction.\n\n## How to Get Involved\n\nIf you're interested in becoming a maintainer, please reach out by:\n\n1. **Opening an Issue**: Create an issue titled \"Interested in Maintaining **m-cli**\" and tell us a bit about yourself, your experience, and why you're interested in this role.\n2. **Pull Requests**: Start contributing with pull requests to demonstrate your skills and familiarity with the project.\n\n## Benefits of Being a Maintainer\n\n- **Networking**: Connect with other developers and users around the world.\n- **Impact**: Make a meaningful impact on a project that helps many users.\n\nThank you to everyone who has contributed **m-cli** so far. Your contributions have been invaluable, and I look forward to seeing how the project will continue to grow with your help.\n\nBest regards,\n\nRoger  \n"
        },
        {
          "name": "m",
          "type": "blob",
          "size": 1.2509765625,
          "content": "#!/usr/bin/env bash\n\n[ -L $0 ] && pushd `readlink $0 | xargs dirname` > /dev/null \\\n    || pushd `dirname $0` > /dev/null\nexport MPATH=`pwd -P`\npopd > /dev/null\n\n\nconfirm () {\n    read -r -p \"${1:-Are you sure? [y/N]} \" response\n    case $response in\n        [yY][eE][sS]|[yY])\n            true\n            ;;\n        *)\n            false\n            ;;\n    esac\n}\n\nupdate_mcli(){\n    INSTALL_DIR=${MPATH} ${MPATH}/install.sh\n}\n\nuninstall_mcli(){\n    confirm \"Do you want to uninstall m-cli? [y/n]: \" \\\n        && sudo rm -rf ${MPATH} 2>/dev/null \\\n        && sudo rm -f \"/usr/local/bin/m\" 2>/dev/null \\\n        && echo \"Done !\"\n}\n\n\nusage(){\n\n    cat <<__EOF__\n\nï£¿  Swiss Army Knife for macOS ! ï£¿\n\n\nusage:  m [OPTIONS] COMMAND [help]\n\n    OPTIONS\n        --update        update m-cli to the latest version\n        --uninstall     uninstall m-cli\n\n    COMMANDS:\n        help\n__EOF__\n\n    for i in ${MPATH}/plugins/*; do\n        [ ! -L \"$i\" -a -f \"$i\"  ] && echo \"        ${i##*/}\"\n    done\n\n    [ \"${COMMAND}\" == \"help\" ] && exit 0 || exit 1\n}\n\n\ncase $1 in\n    --update)\n        update_mcli && exit 0\n        ;;\n    --uninstall)\n        uninstall_mcli && exit 0\n        ;;\nesac\n\n\nCOMMAND=$1; shift;\n\n[ ! -f ${MPATH}/plugins/${COMMAND} ] && usage\n${MPATH}/plugins/${COMMAND} \"$@\"\n"
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}