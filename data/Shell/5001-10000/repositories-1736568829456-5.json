{
  "metadata": {
    "timestamp": 1736568829456,
    "page": 5,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "alexanderepstein/Bash-Snippets",
      "stars": 9700,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0439453125,
          "content": "# IDE\n.idea\n\n# Meta files\n.DS_Store\nThumbs.db"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.6103515625,
          "content": "language: bash\n\nmatrix:\n  include:\n    - os: linux\n      dist: trusty\n      sudo: required\n    - os: osx\n  allow_failures:\n    - os: linux\n\nbefore_install:\n  - sudo ./install.sh all\n  - export TASTE_API_KEY='290044-Taste-QIQUQKOZ'\n\ninstall:\n  - if [ $TRAVIS_OS_NAME = linux ]; then sudo add-apt-repository ppa:duggan/bats --yes; fi\n  - if [ $TRAVIS_OS_NAME = linux ]; then sudo apt-get update; fi\n  - if [ $TRAVIS_OS_NAME = linux ]; then sudo apt-get install -qq bats; else brew install bats; fi\n  - if [ $TRAVIS_OS_NAME = linux ]; then sudo apt-get install -qq openssl; else brew install openssl; fi\n\nscript:\n  - bats tests\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.1376953125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at epsteina@wit.edu. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.189453125,
          "content": "# Contributing\n\n### First off, thank you for considering contributing to Bash-Snippets.\n\n#### Where do I go from here?\n\nIf you've noticed a bug or have a question, search the <a href=\"https://github.com/alexanderepstein/Bash-Snippets/issues\">issue tracker</a> to see if someone else in the community has already created a ticket. If not, go ahead and <a href=\"https://github.com/alexanderepstein/Bash-Snippets/issues/new\">make one</a>!\n\n#### Otherwise if implementing a fix, feature or new component go through these steps\n#### 1. Fork & Clone The Repository\n* Fork the repository\n* It is assumed you are on either a Unix or Linux system in which are there are no dependencies\n* To download the full source code after forking\n```bash\ngit clone https://github.com/yourusernamehere/Bash-Snippets\n```   \n\n\n#### 2. Implement your fix, feature or new component\n\n###### Fix/Feature\nAt this point, you're ready to make your changes!\n\n###### New Component\n* Decide on a short but sweet name for your tool\n* Create a folder in the Bash-Snippets root directory named after the tool\n* Copy over the Bash-Snippets tool [skeleton](https://github.com/alexanderepstein/Bash-Snippets/blob/master/skeleton) to the newly created folder\n* Rename the skeleton in the new directory to the name of the tool\n* Using newly copied over file as a basis (with the name of your tool) code your new component!\n\nFeel free to ask for help; everyone is a beginner at first :smile_cat:\nMake sure to make your commit messages informative and concise.\n\n\n#### 3. Check The Script Runtime\n\nIf you changed the weather script for example try running it and see if it works as intended. Run ```bats tests``` when inside the Bash-Snippets directory to test the tools.\nIf you added a new script/tool test it to see if it works.\n\n#### 4. Create A Pull Request\n\nFirst make sure to commit and push your changes to your forked repository.\nCheck to see if there are any conflicts with the main repository and your fork.\nIf there are none submit the request and give details as to what you changed or added.\n\n#### 5. Bask In All The Glory Of Adding To A FOSS Application\n![Had to do it to em](https://68.media.tumblr.com/2dfc3369827df9b981e111d7fd8fc732/tumblr_mvemcyarmn1rslphyo1_400.gif)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2017 Alex Epstein\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.0498046875,
          "content": "<div align=\"center\">\n\n# Bash-Snippets\n\n<img src=\"https://cloud.githubusercontent.com/assets/2059754/24601246/753a7f36-1858-11e7-9d6b-7a0e64fb27f7.png\" height=\"250px\" width=\"250px\">\n\n##### A collection of small bash scripts for heavy terminal users with no dependencies\n\n![Version](https://img.shields.io/github/release/alexanderepstein/Bash-Snippets.svg) [![Codacy Badge](https://api.codacy.com/project/badge/Grade/a4bf023a3d0d499abc9d2bf14b296a14)](https://www.codacy.com/app/alexanderepstein/Bash-Snippets?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=alexanderepstein/Bash-Snippets&amp;utm_campaign=Badge_Grade) [![Build Status](https://travis-ci.org/alexanderepstein/Bash-Snippets.svg?branch=master)](https://travis-ci.org/alexanderepstein/Bash-Snippets) ![platform](https://img.shields.io/badge/platform-OSX%2C%20Linux%20%26%20Windows-blue.svg)  [![license](https://img.shields.io/github/license/mashape/apistatus.svg?style=plastic)]()\n\n\n\n### All of these scripts have been heavily tested on macOS and Linux\n### Most of these scripts have been tested on Windows 10 and the official developer bash instance. Does not work with Cygwin or Mysys2.\n\n#### Looking for maintainers: I have been and probably will forever be too busy to maintain this properly on my own. I am looking for a few others to help out, if you want to be a maintainer either email me or raise an issue. I will probably only accept maintainers who have made a few contributions (no matter how small) and seem to understand the vision of this project.\n\n</div>\n\n## Tools\n\n<details>\n<summary>Cheat</summary>\n\nThe fastest way to find {command options|code pieces} you need\n\nSupports multiple languages and many bash commands\n\n<div align=\"center\">\n\n<img max-height=\"500px\" max-width=\"500px\" src=\"https://github.com/alexanderepstein/Bash-Snippets/blob/master/cheat/cheat.png?raw=true\">\n\n</div>\n</details>\n\n<details>\n<summary>Cloudup</summary>\n\nA tool that facilitates backing up github repositories to bitbucket\n\nIf you have ever felt the fear of the github unicorn this could be your savior\n\nFurthermore you can backup the repositories of any github user to your bitbucket.\n\nBackup all github repositories of the designated user at once with the -a option.\nOr run it with no flags and backup individual repositories.\n\n<div align=\"center\">\n\n<img height=\"75%\" width=\"75%\" src=\"https://github.com/alexanderepstein/Bash-Snippets/blob/master/cloudup/cloudup.png?raw=true\">\n\n</div>\n</details>\n\n\n<details>\n<summary>Crypt</summary>\n\nA wrapper for openssl that allows for quickly encrypting and decrypting files\n\n```bash\ncrypt -e [original file] [encrypted file] # encrypts files\ncrypt -d [encrypted file] [output file] # decrypts files\n```\n#### Encryption Details\n* Uses AES 256 level encryption\n* Key is salted before creation\n* Password is never in plain text, and OpenSSL generates key based on password\n* Encrypted data is encoded in Base64, so it can be used as plain text in an email. (Not usually necessary if attached as a file)\n\n**Tested With**  .pdf, .txt, .docx, .doc, .png, .jpeg\n\n**CAUTION**  Make sure to use different filenames, otherwise your file will be overwritten!\n\n\n<div align=\"center\">\n\n<img max-height=\"500px\" max-width=\"500px\" src=\"https://github.com/alexanderepstein/Bash-Snippets/blob/master/crypt/crypt.png?raw=true\">\n\n</div>\n</details>\n\n\n<details>\n<summary>Cryptocurrency</summary>\n\nConverts Cryptocurrency based on realtime exchange rates of the top 10 cryptos\n\n<div align=\"center\">\n\n<img max-height=\"500px\" max-width=\"505px\" src=\"https://github.com/alexanderepstein/Bash-Snippets/blob/master/cryptocurrency/cryptocurrency.png?raw=true\">\n\n</div>\n\nOriginally written by: [Jonas-Taha El Sesiy](https://github.com/elsesiy)\nHeavy modifications by: [Alex Epstein](https://github.com/alexanderepstein)\n</details>\n\n\n<details>\n<summary>Currency</summary>\n\nConverts currency based on realtime exchange rates\n\n<div align=\"center\">\n\n<img max-height=\"500px\" max-width=\"500px\" src=\"https://github.com/alexanderepstein/Bash-Snippets/blob/master/currency/currency.png?raw=true\">\n\n</div>\n\nIf you want to bypass to guided input you can pass in 3 arguments and it will run from there\nex.```currency [baseCurrency] [exchangeToCurrency] [amountBeingExchanged]```\nso a valid use case would be ```currency USD EUR 12.35```\n</details>\n\n\n<details>\n<summary>Geo</summary>\n\nProvides data for  wan, lan, router, dns, mac, and ip geolocation\n\n\n<div align=\"center\">\n\n<img max-height=\"500px\" max-width=\"500px\" src=\"https://github.com/alexanderepstein/Bash-Snippets/blob/master/geo/geo.png?raw=true\">\n\n</div>\n\nWritten by: [Jake Meyer](https://github.com/jakewmeyer)\n</details>\n\n<details>\n<summary>Gist</summary>\n\nManage your gist like a pro\n\nClone your owned gists and starred gists as git repos, and Fetch/Create/Edit/Delete them with Github API. It also supports quick search with hashtag and contents.\n\nFor more information, please go through the [guide](gist/README.md)\n\n<div align=\"center\">\n\n<img max-height=\"500px\" max-width=\"500px\" src=\"https://github.com/alexanderepstein/Bash-Snippets/blob/master/gist/gist.png?raw=true\">\n\n</div>\n\nWritten by: [typebrook](https://github.com/typebrook)\n</details>\n\n<details>\n<summary>Lyrics</summary>\n\nGrab lyrics for a given song quickly from the command line.\n\n\n<div align=\"center\">\n\n<img max-height=\"500px\" max-width=\"500px\" src=\"https://github.com/alexanderepstein/Bash-Snippets/blob/master/lyrics/lyrics.png?raw=true\">\n\n</div>\n\n</details>\n\n<details>\n<summary>Meme</summary>\n\nA lightning fast meme generator.\n\n\n<div align=\"center\">\n\n<img max-height=\"500px\" max-width=\"500px\" src=\"https://github.com/alexanderepstein/Bash-Snippets/blob/master/meme/meme.png?raw=true\">\n\n</div>\n\n</details>\n\n<details>\n<summary>Movies</summary>\n\nQuick search that grabs relevant information about a movie\n\n<div align=\"center\">\n\n<img max-height=\"500px\" max-width=\"500px\" src=\"https://github.com/alexanderepstein/Bash-Snippets/blob/master/movies/movies.png?raw=true\">\n\n</div>\n</details>\n\n\n<details>\n<summary>Newton</summary>\n\nPerforms numerical calculations all the way up to symbolic math parsing.\n\n<div align=\"center\">\n\n<img max-height=\"500px\" max-width=\"500px\" src=\"https://github.com/alexanderepstein/Bash-Snippets/blob/master/newton/newton.png?raw=true\">\n\n</div>\n</details>\n\n\n<details>\n<summary>Qrify</summary>\n\nTakes any string of text and turns it into a qr code\n\nThis is useful for sending links or saving a string of commands to your phone\n\n\n<div align=\"center\">\n\n<img max-height=\"500px\" max-width=\"500px\" src=\"https://github.com/alexanderepstein/Bash-Snippets/blob/master/qrify/qrify.png?raw=true\">\n\n</div>\n\nWritten by: [Linyos Torovoltos](http://github.com/linyostorovovoltos)\n</details>\n\n\n<details>\n<summary>Short</summary>\n\nGets the link that is being masked by a url shortner\n\n<div align=\"center\">\n\n<img max-height=\"500px\" max-width=\"500px\" src=\"https://github.com/alexanderepstein/Bash-Snippets/blob/master/short/short.png?raw=true\">\n\n</div>\n</details>\n\n<details>\n<summary>Siteciphers</summary>\n\nCheck which ciphers are enabled / disabled for a given https site.\n\nSometimes ciphers are deemed vulnerable, so when you are changing configuration, this can be used to confirm that the cipher truly is disabled.\n\nSome browsers (For example old versions of IE) don't support some of the newer ciphers, which would be a good example of when a SysAdmin would need a list of currently supported ciphers so that changes can be made.\n\n<div align=\"center\">\n\n<img height=\"75%\" width=\"75%\" src=\"https://github.com/alexanderepstein/Bash-Snippets/blob/master/siteciphers/siteciphers.png?raw=true\">\n\n</div>\n</details>\n\n\n<details>\n<summary>Stocks</summary>\n\nProvides information about a certain stock symbol\n\n\n<div align=\"center\">\n\n<img max-height=\"500px\" max-width=\"500px\" src=\"https://github.com/alexanderepstein/Bash-Snippets/blob/master/stocks/stocks.png?raw=true\">\n\n</div>\n</details>\n\n\n<details>\n<summary>Taste</summary>\n\nRecommendation engine that provides three similar items like the supplied item\n\nAlso can provide information on a given item\n\nValid items are: shows, books, music, artists, movies, authors, games\n\n<div align=\"center\">\n\n<img max-height=\"500px\" max-width=\"500px\" src=\"https://github.com/alexanderepstein/Bash-Snippets/blob/master/taste/taste.png?raw=true\">\n\n</div>\n\n### Needs an API Key (don't worry it's free)\n* Get the API key [here](https://tastedive.com/account/api_access)\n* After getting the API key run the following line ```export TASTE_API_KEY=\"yourAPIKeyGoesHere\" >> ~/.bash_profile```\n</details>\n\n\n<details>\n<summary>Todo</summary>\n\nA simplistic command line todo list\n\n\n<div align=\"center\">\n\n<img max-height=\"500px\" max-width=\"500px\" src=\"https://github.com/alexanderepstein/Bash-Snippets/blob/master/todo/todo.png?raw=true\">\n\n</div>\n</details>\n\n\n<details>\n<summary>Transfer</summary>\n\nQuickly transfer files from the command line.\n\n\n<div align=\"center\">\n\n<img max-height=\"500px\" max-width=\"500px\" src=\"https://github.com/alexanderepstein/Bash-Snippets/blob/master/transfer/transfer.png?raw=true\">\n\n</div>\n</details>\n\n\n<details>\n<summary>Weather</summary>\n\nProvides a 3 day forecast\n\nWith no arguments it will grab the weather for your location as determined by your ip\n\n<div align=\"center\">\n\n<img height=\"75%\" width=\"75%\" src=\"https://github.com/alexanderepstein/Bash-Snippets/blob/master/weather/weather.png?raw=true\">\n\n</div>\n\nWith arguments you can pass in a city or country and get the weather in that area\n\n\nAlso can show the current moon phase\n\n<div align=\"center\">\n\n<img height=\"75%\" width=\"75%\" src=\"https://github.com/alexanderepstein/Bash-Snippets/blob/master/weather/moon.png?raw=true\">\n\n</div>\n</details>\n\n\n<details>\n<summary>Youtube-Viewer</summary>\n\nProvides a way to watch youtube videos from the terminal.\n\nYou can use ```ytview -c [channel name]``` to see recent videos by that artist.\n\nYou can use ```ytview -s [videoToSearch]``` or just ```ytview [videoToSearch]``` to search for videos.\n\n\n<div align=\"center\">\n\n<img height=\"75%\" width=\"75%\" src=\"https://github.com/alexanderepstein/Bash-Snippets/blob/master/ytview/ytview.png?raw=true\">\n\n</div>\n\nWritten by: [Linyos Torovoltos](http://github.com/linyostorovovoltos)\n</details>\n\n## API's Used\n\n<details>\n<summary>All API's</summary>\n\n* To get location based on ip address: [ipinfo](https://ipinfo.io)\n* To get and print weather based on a location: [wttr](http://wttr.in)\n* To grab the stock information in JSON format: [alphavantage](https://www.alphavantage.co)\n* To grab the latest exchange rate between currencies: [fixer](http://fixer.io)\n* To grab information on movies: [omdbapi](http://www.omdbapi.com/)\n* To grab recommendations based on an item: [tastedive](https://tastedive.com)\n* To determine masked link behind url shortner: [ki.tc](http://ki.tc)\n* To grab cheatsheets for commands and languages: [cheat](http://cheat.sh/)\n* To encode text into a qr code: [qrenco](http://qrenco.de)\n* To grab a list of a users repositories: [github](https://developer.github.com/v3/)\n* To upload a repository to bitbucket: [bitbucket](https://developer.atlassian.com/bitbucket/api/2/reference/)\n* To get your WAN ip address: [ipify](https://www.ipify.org/)\n* To grab the latest exchange rate between cryptocurrencies to standard currencies: [coinmarketcap](https://coinmarketcap.com/api/)\n* To perform symbolic math and other computations: [newton](https://newton.now.sh)\n* To transfer files: [transfer](https://transfer.sh)\n* To grab lyrics from a song: [lyrics.ovh](http://docs.lyricsovh.apiary.io)\n* To generate memes: [MemeGen](https://memegen.link)\n* To get a chart of the top 10 cryptocurrencies [rate.sx](http://rate.sx)\n\n</details>\n\n\n## Installing\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/bash-snippets.svg)](https://repology.org/project/bash-snippets/versions)\n\n<details>\n  <summary>AUR</summary>\n  \nbash-snippets is available in two different AUR packages: `bash-snippets` and `bash-snippets-git`.\n\n```bash\nyay -S bash-snippets # or bash-snippets-git\n```\n\n</details>\n\n<details>\n  \n<summary>APT Package Manager</summary>\n\n```bash\nsudo add-apt-repository ppa:navanchauhan/bash-snippets # add bash-snippets PPA\nsudo apt update # update package list\nsudo apt install bash-snippets # install bash-snippets package\n```\n\n</details>\n\n<details>\n  \n  <summary>homebrew (macOS) / linuxbrew (Linux)</summary>\n\n```bash\nbrew install bash-snippets # installs all tools\nbrew install bash-snippets --without-all-tools --with-newton --with-weather # specifying install for individual tools\n```\n\n</details>\n\n<details>\n  \n  <summary>From Source</summary>\n\n```bash\ngit clone https://github.com/alexanderepstein/Bash-Snippets # clone the repository\ncd Bash-Snippets # cd into the cloned directory\ngit checkout v1.23.0 # Git checkout to the latest stable release\n```\n```bash\n./install.sh all # install all scripts\n```\n\nor\n\n```bash\n./install.sh stocks # to install individual scripts\n```\n</details>\n\n## Updating\n\n<details>\n\n<summary>AUR</summary>\n\n```bash\nyay -S bash-snippets # or bash-snippets-git\n```\n</details>\n\n\n<details>\n  \n<summary>APT Package Manager</summary>\n\n```bash\nsudo apt update # update package list\nsudo apt upgrade bash-snippets # upgrade bash-snippets package\n```\n\n</details>\n\n<details>\n  \n<summary>homebrew (macOS) / linuxbrew (Linux)</summary>\n\n```bash\nbrew install bash-snippets --without-all-tools --with-newton --with-weather # specifying install for individual tools\n```\n\n</details>\n\n<details>\n  \n  <summary>From Source</summary>\n\nWith any of the installed tools you can automate the update by running it with the -u option or passing in update as the arguments Ex.\n\n`stocks update`\n\nor\n\n`stocks -u`\n\nThis will clone the repository and install the new versions of scripts that were installed, if you didn’t install a certain tool this script will not install the new version of that tool.\n\n</details>\n\n## Uninstalling\n\n<details>\n  \n  <summary>AUR</summary>\n\n```bash\npacman -Rns bash-snippets # or bash-snippets-git\n```\n\n</details>\n\n<details>\n  \n  <summary>APT Package Manager</summary>\n\n```bash\nsudo apt purge bash-snippets # you can also use remove instead of purge\n```\n\n</details>\n\n<details>\n  \n  <summary>homebrew (macOS) / linuxbrew (Linux)</summary>\n\n```bash\nbrew uninstall bash-snippets\n```\n\n</details>\n\n<details>\n  \n  <summary>Git Uninstall</summary>\n  \n```bash\ngit clone https://github.com/alexanderepstein/Bash-Snippets # If you don't have the Bash-Snippets folder anymore clone the repository\ncd Bash-Snippets # cd into the Bash-Snippets directory:\n```\n\n</details>\n\n<details>\n  \n<summary>To go through a guided uninstall</summary>\n```bash\n./uninstall.sh\n```\n\n##### To uninstall all installed bash-snippets\n```bash\n./uninstall.sh all\n```\n\n##### To go through a guided uninstall\n```bash\n./uninstall.sh\n```\n\n##### To uninstall all installed bash-snippets\n```bash\n./uninstall.sh all\n```\n\n</details>\n\n\n## Donate\nIf this project helped you in any way and you feel like supporting me\n\n[![Donate](https://img.shields.io/badge/Donate-Venmo-blue.svg)](https://venmo.com/AlexanderEpstein)\n[![Donate](https://img.shields.io/badge/Donate-SquareCash-green.svg)](https://cash.me/$AlexEpstein)\n\n###### BTC: 38Q5VbH63MtouxHu8BuPNLzfY5B5RNVMDn\n###### ETH: 0xf7c60C06D298FF954917eA45206426f79d40Ac9D\n###### LTC: LWZ3T19YUk66dgkczN7dRhiXDMqSYrXUV4\n\n#### Inspired by: [Ruby-Scripts](https://github.com/jakewmeyer/Ruby-Scripts)\n\n## License\n\nMIT License\n\nCopyright (c) 2017 Alex Epstein\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "bak2dvd",
          "type": "tree",
          "content": null
        },
        {
          "name": "bash-snippets.1",
          "type": "blob",
          "size": 16.3984375,
          "content": ".\\\" generated with Ronn/v0.7.3\n.\\\" http://github.com/rtomayko/ronn/tree/0.7.3\n.\n.TH \"BASH\\-SNIPPETS\" \"1\" \"April 2020\" \"\" \"\"\n.\n.SH \"NAME\"\n\\fBbash\\-snippets\\fR \\- A collection of small bash scripts for heavy terminal users\n.\n.SH \"Tools\"\n.\n.SS \"Cheat\"\nDescription: Cheatsheets for quick information about multiple programming languages along with terminal commands\n.\n.P\nUsage: cheat [flags] [command] or cheat [flags] [programming language] [subject]\n.\n.IP \"\\(bu\" 4\n\\-s Does a search for last argument rather than looking for exact match\n.\n.IP \"\\(bu\" 4\n\\-i Case insensitive search\n.\n.IP \"\\(bu\" 4\n\\-b Word boundaries in search\n.\n.IP \"\\(bu\" 4\n\\-r Recursive search\n.\n.IP \"\\(bu\" 4\n\\-u Update Bash\\-Snippet Tools\n.\n.IP \"\\(bu\" 4\n\\-h Show the help\n.\n.IP \"\\(bu\" 4\n\\-v Get the tool version\n.\n.IP \"\" 0\n.\n.P\nSpecial Pages:\n.\n.IP \"\\(bu\" 4\nhello Describes building the hello world program written in the language\n.\n.IP \"\\(bu\" 4\nlist This lists all cheatsheets related to previous arg if none it lists all cheatsheets\n.\n.IP \"\\(bu\" 4\nlearn Shows a learn\\-x\\-in\\-minutes language cheat sheet perfect for getting started with the language\n.\n.IP \"\\(bu\" 4\n1line A collection of one\\-liners in this language\n.\n.IP \"\\(bu\" 4\nweirdness A collection of examples of weird things in this language\n.\n.IP \"\" 0\n.\n.P\nExamples:\n.\n.IP \"\\(bu\" 4\ncheat rust hello\n.\n.IP \"\\(bu\" 4\ncheat \\-r \\-b \\-i go\n.\n.IP \"\\(bu\" 4\ncheat julia Functions\n.\n.IP \"\\(bu\" 4\ncheat \\-i go operators\n.\n.IP \"\" 0\n.\n.SS \"Cloudup\"\nDescription: Backs up a users github repositories to your bitbucket account\\. With no flags cloudup will guide you through backing up a single repository\n.\n.P\nUsage: cloudup [flags] or cloudup [flags] [listOfGHRepoNamesSplitBySpaces]\n.\n.IP \"\\(bu\" 4\n\\-p Upload the repositor(y)(ies) as private to bitbucket (must have private repo ability on bitbucket)\n.\n.IP \"\\(bu\" 4\n\\-a Backup all github repositories\n.\n.IP \"\\(bu\" 4\n\\-s Only backup repositories that you have created (no forks) (only works in conjunction with the \\-a flag)\n.\n.IP \"\\(bu\" 4\n\\-t Backup the repository with a timestamp added to the repostiory name (will always create a new unique bitbucket repo)\n.\n.IP \"\\(bu\" 4\n\\-u Update Bash\\-Snippet Tools\n.\n.IP \"\\(bu\" 4\n\\-h Show the help\n.\n.IP \"\\(bu\" 4\n\\-v Get the tool version\n.\n.IP \"\" 0\n.\n.P\nExamples:\n.\n.IP \"\\(bu\" 4\ncloudup\n.\n.IP \"\\(bu\" 4\ncloudup \\-p \\-a\n.\n.IP \"\\(bu\" 4\ncloudup \\-p nameOfRepo1 nameOf Repo2\n.\n.IP \"\\(bu\" 4\ncloudup nameOfRep\n.\n.IP \"\" 0\n.\n.SS \"Crypt\"\nDescription: A wrapper around openssl that facilitates encrypting and decrypting files\\.\n.\n.P\nUsage: crypt [flag] [inputFile] [outputFile]\n.\n.IP \"\\(bu\" 4\n\\-e Encrypt the inputFile and store it in the outputFil\n.\n.IP \"\\(bu\" 4\n\\-d Decrypt the inputFile and store it in the outputFil\n.\n.IP \"\\(bu\" 4\n\\-u Update Bash\\-Snippet Tools\n.\n.IP \"\\(bu\" 4\n\\-h Show the help\n.\n.IP \"\\(bu\" 4\n\\-v Get the tool version\n.\n.IP \"\" 0\n.\n.P\nExamples:\n.\n.IP \"\\(bu\" 4\ncrypt \\-e mySecretFile\\.txt myEncryptedFile\\.jpg (change filetype so default program is incorrect)\n.\n.IP \"\\(bu\" 4\ncrypt \\-d myEncryptedFile\\.jpg thisIsNowDecrypted\\.txt (change filetype back so now default program is correct)\n.\n.IP \"\" 0\n.\n.SS \"CryptoCurrency\"\nDescription: A realtime cryptocurrency converter\\. With no flags it will pull down the latest stats of the top 10 cryptos\n.\n.P\nUsage: cryptocurrency or cryptocurrency [flag] or cryptocurrency [flag] [arg]\n.\n.IP \"\\(bu\" 4\n\\-o Utilize the old functionality of the tool\n.\n.IP \"\\(bu\" 4\n\\-f Fiat currency for conversions\n.\n.IP \"\\(bu\" 4\n\\-u Update Bash\\-Snippet Tools\n.\n.IP \"\\(bu\" 4\n\\-h Show the help\n.\n.IP \"\\(bu\" 4\n\\-v Get the tool version\n.\n.IP \"\" 0\n.\n.P\nExamples: cryptocurrency \\-o cryptocurrency \\-f eur\n.\n.SS \"Currency\"\nDescription: A realtime currency converter\\. With no flags it will guide you through the currency exchange\n.\n.P\nUsage: currency or currency [flag] or currency [base] [exchangeTo] [amount]\n.\n.IP \"\\(bu\" 4\n\\-u Update Bash\\-Snippet Tools\n.\n.IP \"\\(bu\" 4\n\\-h Show the help\n.\n.IP \"\\(bu\" 4\n\\-v Get the tool version\n.\n.IP \"\" 0\n.\n.P\nSupported Currencies:\n.\n.P\n| AUD | BGN | BRL | CAD | | CHF | CNY | CZK | DKK | | EUR | GBP | HKD | HRK | | HUF | IDR | ILS | INR | | JPY | KRW | MXN | MYR | | NOK | NZD | PHP | PLN | | RON | RUB | SEK | SGD | | THB | TRY | USD | ZAR |\n.\n.P\nExamples:\n.\n.IP \"\\(bu\" 4\ncurrency EUR USD 12\\.35\n.\n.IP \"\\(bu\" 4\ncurrency\n.\n.IP \"\" 0\n.\n.SS \"Geo\"\nDescription: Provides quick access for wan, lan, router, dns, mac, and ip geolocation data\n.\n.P\nUsage: geo [flag]\n.\n.IP \"\\(bu\" 4\n\\-w Returns WAN IP\n.\n.IP \"\\(bu\" 4\n\\-l Returns LAN IP(s)\n.\n.IP \"\\(bu\" 4\n\\-r Returns Router IP\n.\n.IP \"\\(bu\" 4\n\\-d Returns DNS Nameserver\n.\n.IP \"\\(bu\" 4\n\\-m Returns MAC address for interface\\. Ex\\. eth0\n.\n.IP \"\\(bu\" 4\n\\-g Returns Current IP Geodata\n.\n.IP \"\" 0\n.\n.P\nExamples:\n.\n.IP \"\\(bu\" 4\ngeo \\-g\n.\n.IP \"\\(bu\" 4\ngeo \\-wlrdgm eth0\n.\n.IP \"\" 0\n.\n.P\nCustom Geo Output => [all] [query] [city] [region] [country] [zip] [isp]\n.\n.P\nExample: geo \\-a 8\\.8\\.8\\.8 \\-o city,zip,isp\n.\n.IP \"\\(bu\" 4\n\\-o [options] Returns Specific Geodata\n.\n.IP \"\\(bu\" 4\n\\-a [address] For specific ip in \\-s\n.\n.IP \"\\(bu\" 4\n\\-v Returns Version\n.\n.IP \"\\(bu\" 4\n\\-h Returns Help Screen\n.\n.IP \"\\(bu\" 4\n\\-u Updates Bash\\-Snippets\n.\n.IP \"\" 0\n.\n.SS \"Gist\"\nDescription: Manage your gists with git and Github API v3\n.\n.P\nUsage: gist [command] [args]\n.\n.IP \"\\(bu\" 4\n[star|all] List your gists, use \\'star\\' as argument for your starred gists, \\'all\\' or \\'a\\' for both your and starred gists\\. Format for each line is: \\fIINDEX\\fR \\fIURL\\fR \\fIFILE_NUM\\fR \\fICOMMENT_NUM\\fR \\fIDESCRIPTION\\fR\n.\n.IP \"\\(bu\" 4\nfetch Update the local list of your gists, \\'star\\' as argument for your starred gists\n.\n.IP \"\\(bu\" 4\n\\fIINDEX\\fR Show the path of local gist repo and do custom actions\n.\n.IP \"\\(bu\" 4\nnew Create a new gist with files or STDIN\n.\n.IP \"\\(bu\" 4\ngrep Grep gists by description, filename and content with a given pattern\n.\n.IP \"\\(bu\" 4\ntag Modify/List tags for a gist\n.\n.IP \"\\(bu\" 4\ntags List all tags and pinned tags\n.\n.IP \"\\(bu\" 4\npin, Pin/Unpin tags, or filter gists with pinned tags\n.\n.IP \"\\(bu\" 4\nlan Filter gists or list gist with coding languages\n.\n.IP \"\\(bu\" 4\ndetail Show the detail of a gist\n.\n.IP \"\\(bu\" 4\nedit Edit description for a gist\n.\n.IP \"\\(bu\" 4\ndelete Delete gists by given indices\n.\n.IP \"\\(bu\" 4\npush Push changes by git\n.\n.IP \"\\(bu\" 4\nclean Clean local repos of removed gists\n.\n.IP \"\\(bu\" 4\nconfig Do configuration\n.\n.IP \"\\(bu\" 4\nuser Get list of gists with a given Github user\n.\n.IP \"\\(bu\" 4\ngithub Import selected gist as a new Github repo\n.\n.IP \"\\(bu\" 4\nhelp Show the helper message\n.\n.IP \"\" 0\n.\n.P\nExample:\n.\n.IP \"\\(bu\" 4\ngist (Show your gists)\n.\n.IP \"\\(bu\" 4\ngist tag (Show your gists with tags)\n.\n.IP \"\\(bu\" 4\ngist fetch (update the list of gists from github\\.com)\n.\n.IP \"\\(bu\" 4\ngist 3 (show the repo path of your 3rd gist, and do custom actions)\n.\n.IP \"\\(bu\" 4\ngist 3 \\-\\-no\\-action (show the repo path of your 3rd gist, and do not perform actions)\n.\n.IP \"\\(bu\" 4\ngist new \\-\\-desc bar foo (create a new gist with files and description)\n.\n.IP \"\" 0\n.\n.SS \"Lyrics\"\nDescription: Fetch lyrics for a certain song\\.\n.\n.P\nUsage: lyrics [flags] or tool [\\-a] [arg] [\\-s] [arg]\n.\n.IP \"\\(bu\" 4\n\\-a Artist of the song to fetch lyrics for\n.\n.IP \"\\(bu\" 4\n\\-s Song of the artist to fetch lyrics for\n.\n.IP \"\\(bu\" 4\n\\-f Export the lyrics to file rather than outputting to stdout\n.\n.IP \"\\(bu\" 4\n\\-u Update Bash\\-Snippet Tools\n.\n.IP \"\\(bu\" 4\n\\-h Show the help\n.\n.IP \"\\(bu\" 4\n\\-v Get the tool version\n.\n.IP \"\" 0\n.\n.P\nExamples:\n.\n.IP \"\\(bu\" 4\nlyrics \\-a logic \\-s run it\n.\n.IP \"\\(bu\" 4\nlyrics \\-a logic \\-s run it \\-f ~/runItLyrics\\.txt\n.\n.IP \"\" 0\n.\n.SS \"Meme\"\nDescription: A lightning fast meme generator\n.\n.P\nUsage: tool [flags] or tool [flags] [arguments]\n.\n.IP \"\\(bu\" 4\n\\-u Update Bash\\-Snippet Tools\n.\n.IP \"\\(bu\" 4\n\\-h Show the help\n.\n.IP \"\\(bu\" 4\n\\-f Choose the output filename\n.\n.IP \"\\(bu\" 4\n\\-v Get the tool version\n.\n.IP \"\" 0\n.\n.P\nExamples:\n.\n.IP \"\\(bu\" 4\nmeme \\-f dogeMeme\n.\n.IP \"\" 0\n.\n.SS \"Movies\"\nDescription: Provides relevant information about a certain movie\\.\n.\n.P\nUsage: movies [flag] or movies [movieToSearch]\n.\n.IP \"\\(bu\" 4\n\\-u Update Bash\\-Snippet Tools\n.\n.IP \"\\(bu\" 4\n\\-h Show the help\n.\n.IP \"\\(bu\" 4\n\\-v Get the tool version\n.\n.IP \"\\(bu\" 4\n\\-d Show detailed information\n.\n.IP \"\" 0\n.\n.P\nExamples:\n.\n.IP \"\\(bu\" 4\nmovies Argo\n.\n.IP \"\\(bu\" 4\nmovies Inception\n.\n.IP \"\" 0\n.\n.SS \"Newton\"\nDescription: Performs numerical calculations all the way up to symbolic math parsing\\.\n.\n.P\nUsage: newton [operation] [expression] or newton [flag]\n.\n.IP \"\\(bu\" 4\n\\-u Update Bash\\-Snippet Tools\n.\n.IP \"\\(bu\" 4\n\\-h Show the help\n.\n.IP \"\\(bu\" 4\n\\-v Get the tool version\n.\n.IP \"\" 0\n.\n.P\nValid Symbols: + add \\- subtract [ left parenthesis (you must use brackets bash has a bultin for parenthesis) ] right parenthesis (you must use brackets bash has a bultin for parenthesis) * multiply / divide ^ power : between the range of left and right side (only for area under curve) ~ parameter on right side (only for area, tangent line and log)\n.\n.P\nExamples:\n.\n.IP \"\\(bu\" 4\nnewton simplify [[2x]+7]*[4x]\n.\n.IP \"\\(bu\" 4\nmovies derive x+2x\n.\n.IP \"\" 0\n.\n.SS \"Pwned\"\nUsage: pwned [email]\n.\n.P\nDescription: Checks where an email account has been breached\n.\n.IP \"\" 4\n.\n.nf\n\n* \\-u Update Bash\\-Snippet Tools\n\n* \\-h Show the help\n\n* \\-v Get the tool version\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nExamples:\n.\n.IP \"\" 4\n.\n.nf\n\n* pwned emailtocheck@email\\.com\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Qrify\"\nUsage: qrify [stringtoturnintoqrcode]\n.\n.P\nDescription: Converts strings or urls into a qr code\\.\n.\n.IP \"\" 4\n.\n.nf\n\n* \\-u Update Bash\\-Snippet Tools\n\n* \\-m Enable multiline support\n\n* \\-f Save the QRCode to a file\n\n* \\-d Decode the QR code from a PNG/GIF/JP(E)G file\n\n* \\-h Show the help\n\n* \\-v Get the tool version\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nExamples:\n.\n.IP \"\" 4\n.\n.nf\n\n* qrify this is a test string\n\n* qrify \\-m two \\en lines\n\n* qrify \\-f fileNameHere Insert what you want to encode here\n\n* qrify github\\.com # notice no http:// or https:// this will fail\n\n* qrify \\-d fileName\\.png\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Short\"\nDescription: Unmasks shortended urls\\.\n.\n.P\nUsage: short [shortURL] or short [flag]\n.\n.IP \"\\(bu\" 4\n\\-e Expand the following URL\n.\n.IP \"\\(bu\" 4\n\\-s Shorten the following URL\n.\n.IP \"\\(bu\" 4\n\\-u Update Bash\\-Snippet Tools\n.\n.IP \"\\(bu\" 4\n\\-h Show the help\n.\n.IP \"\\(bu\" 4\n\\-v Get the tool version\n.\n.IP \"\" 0\n.\n.P\nExample:\n.\n.IP \"\\(bu\" 4\nInput: short \\-e tinyurl\\.com/jhkj\n.\n.IP \"\\(bu\" 4\nOutput: http://possiblemaliciouswebsiteornot\\.com\n.\n.IP \"\\(bu\" 4\nInput: short \\-s google\\.com\n.\n.IP \"\\(bu\" 4\nOutput: http://ki\\.tc/23sd1d\n.\n.IP \"\" 0\n.\n.SS \"Siteciphers\"\nDescription: Checks the available ciphers for the SSL of an https site\\.\n.\n.P\nUsage: siteciphers [flag] or siteciphers [optionalDFlag] [website]\n.\n.IP \"\\(bu\" 4\n\\-u Update Bash\\-Snippet Tools\n.\n.IP \"\\(bu\" 4\n\\-h Show the help\n.\n.IP \"\\(bu\" 4\n\\-v Get the tool version\n.\n.IP \"\\(bu\" 4\n\\-d Set the delay between requests sent to the site (default is 1 sec)\n.\n.IP \"\" 0\n.\n.P\nExamples:\n.\n.IP \"\\(bu\" 4\nsiteciphers github\\.com\n.\n.IP \"\\(bu\" 4\nsiteciphers \\-d 0\\.75 google\\.com\n.\n.IP \"\" 0\n.\n.SS \"Stocks\"\nDescription: Finds the latest information on a certain stock\\.\n.\n.P\nUsage: stocks [flag] or stocks [company/ticker]\n.\n.IP \"\\(bu\" 4\n\\-u Update Bash\\-Snippet Tools\n.\n.IP \"\\(bu\" 4\n\\-h Show the help\n.\n.IP \"\\(bu\" 4\n\\-v Get the tool version\n.\n.IP \"\" 0\n.\n.P\nExamples:\n.\n.IP \"\\(bu\" 4\nstocks AAPL\n.\n.IP \"\\(bu\" 4\nstocks Tesla\n.\n.IP \"\" 0\n.\n.SS \"Taste\"\nDescription: A recommendation engine that provides 3 similar items based on some input topic\\. Taste also has the ability to provide information on the item of interest\\. Supports: shows, books, music, artists, movies, authors, games\n.\n.P\nUsage: taste [flag] [item]\n.\n.IP \"\\(bu\" 4\n\\-i Get more information on similar items\n.\n.IP \"\\(bu\" 4\n\\-s Get information on the item itself\n.\n.IP \"\\(bu\" 4\n\\-u Update Bash\\-Snippet Tools\n.\n.IP \"\\(bu\" 4\n\\-h Show the help\n.\n.IP \"\\(bu\" 4\n\\-v Get the tool version\n.\n.IP \"\" 0\n.\n.P\nExamples:\n.\n.IP \"\\(bu\" 4\ntaste \\-i Kendrick Lamar\n.\n.IP \"\\(bu\" 4\ntaste Catcher in the Ry\n.\n.IP \"\\(bu\" 4\ntaste \\-s Red Hot Chili Peppers\n.\n.IP \"\" 0\n.\n.SS \"Todo\"\nDescription: A simplistic commandline todo list\\.\n.\n.P\nUsage: todo [flags] or todo [flags] [arguments]\n.\n.IP \"\\(bu\" 4\n\\-c Clear all the current tasks\n.\n.IP \"\\(bu\" 4\n\\-r Remove the following task number\n.\n.IP \"\\(bu\" 4\n\\-g Get the current tasks\n.\n.IP \"\\(bu\" 4\n\\-a Add the following task\n.\n.IP \"\\(bu\" 4\n\\-u Update Bash\\-Snippet Tools\n.\n.IP \"\\(bu\" 4\n\\-h Show the help\n.\n.IP \"\\(bu\" 4\n\\-v Get the tool version\n.\n.IP \"\" 0\n.\n.P\nExamples:\n.\n.IP \"\\(bu\" 4\ntodo \\-a My very first task\n.\n.IP \"\\(bu\" 4\ntodo \\-r 1\n.\n.IP \"\\(bu\" 4\ntodo \\-g\n.\n.IP \"\\(bu\" 4\ntodo \\-c\n.\n.IP \"\" 0\n.\n.SS \"Transfer\"\nDescription: Quickly transfer files from the command line\\.\n.\n.P\nUsage: transfer [flags] or transfer [flag] [args] or transfer [filePathToUpload]\n.\n.IP \"\\(bu\" 4\n\\-d Download a single file\n.\n.IP \"\" 4\n.\n.nf\n\n* First arg: Output file directory\n* Second arg: File url id\n* Third arg: File name\n.\n.fi\n.\n.IP \"\" 0\n\n.\n.IP \"\\(bu\" 4\n\\-o Onetime file upload\n.\n.IP \"\\(bu\" 4\n\\-u Update Bash\\-Snippet Tools\n.\n.IP \"\\(bu\" 4\n\\-h Show the help\n.\n.IP \"\\(bu\" 4\n\\-v Get the tool version\n.\n.IP \"\" 0\n.\n.P\nExamples:\n.\n.IP \"\\(bu\" 4\ntransfer ~/fileToTransfer\\.txt\n.\n.IP \"\\(bu\" 4\ntransfer ~/firstFileToTransfer\\.txt ~/secondFileToTransfer\\.txt # upload multiple files at once\n.\n.IP \"\\(bu\" 4\ntransfer \\-d ~/outputDirectory fileID fileName\n.\n.IP \"\\(bu\" 4\ntransfer \\-o ~/fileToTransfer\\.txt\n.\n.IP \"\" 0\n.\n.SS \"Weather\"\nDescription: Provides a 3 day forecast on your current location or a specified location\\. With no flags Weather will default to your current location\\.\n.\n.P\nUsage: weather or weather [flag] or weather [country] or weather [city] [state]\n.\n.IP \"\\(bu\" 4\nweather [optionalLocation] [i][M] get weather in imperial units, optional M means windspeed in m/s\n.\n.IP \"\\(bu\" 4\nweather [optionalLocation] [m][M] lowercase m gets weather in metric units, optional M means windspeed in m/s\n.\n.IP \"\\(bu\" 4\nweather [Moon] grabs the phase of the moon\n.\n.IP \"\\(bu\" 4\n\\-u Update Bash\\-Snippet Tools\n.\n.IP \"\\(bu\" 4\n\\-h Show the help\n.\n.IP \"\\(bu\" 4\n\\-v Get the tool version\n.\n.IP \"\" 0\n.\n.P\nExamples:\n.\n.IP \"\\(bu\" 4\nweather\n.\n.IP \"\\(bu\" 4\nweather Paris m\n.\n.IP \"\\(bu\" 4\nweather Tokyo\n.\n.IP \"\\(bu\" 4\nweather Moon\n.\n.IP \"\\(bu\" 4\nweather mM\n.\n.IP \"\" 0\n.\n.SS \"Ytview\"\nDescription: Search and play youtube videos right from the terminal\\.\n.\n.P\nUsage: ytview [flag] [string] or ytview [videoToSearch]\n.\n.IP \"\\(bu\" 4\n\\-s Searches youtube\n.\n.IP \"\\(bu\" 4\n\\-c Shows the latest videos of a channel\n.\n.IP \"\\(bu\" 4\n\\-u Update Bash\\-Snippet Tools\n.\n.IP \"\\(bu\" 4\n\\-h Show the help\n.\n.IP \"\\(bu\" 4\n\\-v Get the tool version\n.\n.IP \"\" 0\n.\n.P\nExamples:\n.\n.IP \"\\(bu\" 4\nytview \\-s Family Guy Chicken Fight\n.\n.IP \"\\(bu\" 4\nytview \\-c Numberphile\n.\n.IP \"\" 0\n.\n.SH \"Updating\"\nWith any of the installed tools you can automate the update by running it with the \\-u option or passing in update as the arguments\n.\n.IP \"\\(bu\" 4\nstocks update\n.\n.IP \"\" 0\n.\n.P\nor\n.\n.IP \"\\(bu\" 4\nstocks \\-u\n.\n.IP \"\" 0\n.\n.P\nThis will clone the repository and install the new versions of scripts that were installed, if you didn\\'t install a certain tool this script will not install the new version of that tool\\.\n.\n.SH \"Uninstalling\"\nIf you don\\'t have the Bash\\-Snippets folder anymore clone the repository: git clone https://github\\.com/alexanderepstein/Bash\\-Snippets`\n.\n.P\ncd into the Bash\\-Snippets directory: \\fBcd Bash\\-Snippets\\fR\n.\n.IP \"\" 4\n.\n.nf\n\nTo go through a guided uninstall\n.\n.fi\n.\n.IP \"\" 0\n.\n.IP \"\\(bu\" 4\n\\&\\./uninstall\\.sh\n.\n.IP \"\" 0\n.\n.SH \"AUTHOR\"\nAlexander Epstein Github: https://github\\.com/alexanderepstein\n.\n.SH \"Contributors\"\nJake Meyer Github: https://github\\.com/jakewmeyer\n.\n.P\nLinyos Torovoltos Github: https://gitbub\\.com/linyostorovovoltos\n.\n.SH \"License\"\nMIT License\n.\n.P\nCopyright (c) 2017 Alex Epstein\n.\n.P\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n.\n.P\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software\\.\n.\n.P\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT\\. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE\\.\n"
        },
        {
          "name": "bash-snippets.1.html",
          "type": "blob",
          "size": 21.8359375,
          "content": "<!DOCTYPE html>\n<html>\n<head>\n  <meta http-equiv='content-type' value='text/html;charset=utf8'>\n  <meta name='generator' value='Ronn/v0.7.3 (http://github.com/rtomayko/ronn/tree/0.7.3)'>\n  <title>bash-snippets(1) - A collection of small bash scripts for heavy terminal users</title>\n  <style type='text/css' media='all'>\n  /* style: man */\n  body#manpage {margin:0}\n  .mp {max-width:100ex;padding:0 9ex 1ex 4ex}\n  .mp p,.mp pre,.mp ul,.mp ol,.mp dl {margin:0 0 20px 0}\n  .mp h2 {margin:10px 0 0 0}\n  .mp > p,.mp > pre,.mp > ul,.mp > ol,.mp > dl {margin-left:8ex}\n  .mp h3 {margin:0 0 0 4ex}\n  .mp dt {margin:0;clear:left}\n  .mp dt.flush {float:left;width:8ex}\n  .mp dd {margin:0 0 0 9ex}\n  .mp h1,.mp h2,.mp h3,.mp h4 {clear:left}\n  .mp pre {margin-bottom:20px}\n  .mp pre+h2,.mp pre+h3 {margin-top:22px}\n  .mp h2+pre,.mp h3+pre {margin-top:5px}\n  .mp img {display:block;margin:auto}\n  .mp h1.man-title {display:none}\n  .mp,.mp code,.mp pre,.mp tt,.mp kbd,.mp samp,.mp h3,.mp h4 {font-family:monospace;font-size:14px;line-height:1.42857142857143}\n  .mp h2 {font-size:16px;line-height:1.25}\n  .mp h1 {font-size:20px;line-height:2}\n  .mp {text-align:justify;background:#fff}\n  .mp,.mp code,.mp pre,.mp pre code,.mp tt,.mp kbd,.mp samp {color:#131211}\n  .mp h1,.mp h2,.mp h3,.mp h4 {color:#030201}\n  .mp u {text-decoration:underline}\n  .mp code,.mp strong,.mp b {font-weight:bold;color:#131211}\n  .mp em,.mp var {font-style:italic;color:#232221;text-decoration:none}\n  .mp a,.mp a:link,.mp a:hover,.mp a code,.mp a pre,.mp a tt,.mp a kbd,.mp a samp {color:#0000ff}\n  .mp b.man-ref {font-weight:normal;color:#434241}\n  .mp pre {padding:0 4ex}\n  .mp pre code {font-weight:normal;color:#434241}\n  .mp h2+pre,h3+pre {padding-left:0}\n  ol.man-decor,ol.man-decor li {margin:3px 0 10px 0;padding:0;float:left;width:33%;list-style-type:none;text-transform:uppercase;color:#999;letter-spacing:1px}\n  ol.man-decor {width:100%}\n  ol.man-decor li.tl {text-align:left}\n  ol.man-decor li.tc {text-align:center;letter-spacing:4px}\n  ol.man-decor li.tr {text-align:right;float:right}\n  </style>\n</head>\n<!--\n  The following styles are deprecated and will be removed at some point:\n  div#man, div#man ol.man, div#man ol.head, div#man ol.man.\n\n  The .man-page, .man-decor, .man-head, .man-foot, .man-title, and\n  .man-navigation should be used instead.\n-->\n<body id='manpage'>\n  <div class='mp' id='man'>\n\n  <div class='man-navigation' style='display:none'>\n    <a href=\"#NAME\">NAME</a>\n    <a href=\"#Tools\">Tools</a>\n    <a href=\"#Updating\">Updating</a>\n    <a href=\"#Uninstalling\">Uninstalling</a>\n    <a href=\"#AUTHOR\">AUTHOR</a>\n    <a href=\"#Contributors\">Contributors</a>\n    <a href=\"#License\">License</a>\n  </div>\n\n  <ol class='man-decor man-head man head'>\n    <li class='tl'>bash-snippets(1)</li>\n    <li class='tc'></li>\n    <li class='tr'>bash-snippets(1)</li>\n  </ol>\n\n  <h2 id=\"NAME\">NAME</h2>\n<p class=\"man-name\">\n  <code>bash-snippets</code> - <span class=\"man-whatis\">A collection of small bash scripts for heavy terminal users</span>\n</p>\n\n<h2 id=\"Tools\">Tools</h2>\n\n<h3 id=\"Cheat\">Cheat</h3>\n\n<p>Description: Cheatsheets for quick information about multiple programming languages along with terminal commands</p>\n\n<p>Usage: cheat [flags] [command] or cheat [flags] [programming language] [subject]</p>\n\n<ul>\n<li><p>-s Does a search for last argument rather than looking for exact match</p></li>\n<li><p>-i Case insensitive search</p></li>\n<li><p>-b Word boundaries in search</p></li>\n<li><p>-r Recursive search</p></li>\n<li><p>-u Update Bash-Snippet Tools</p></li>\n<li><p>-h Show the help</p></li>\n<li><p>-v Get the tool version</p></li>\n</ul>\n\n\n<p>Special Pages:</p>\n\n<ul>\n<li><p>hello Describes building the hello world program written in the language</p></li>\n<li><p>list This lists all cheatsheets related to previous arg if none it lists all cheatsheets</p></li>\n<li><p>learn Shows a learn-x-in-minutes language cheat sheet perfect for getting started with the language</p></li>\n<li><p>1line A collection of one-liners in this language</p></li>\n<li><p>weirdness A collection of examples of weird things in this language</p></li>\n</ul>\n\n\n<p>Examples:</p>\n\n<ul>\n<li><p>cheat rust hello</p></li>\n<li><p>cheat -r -b -i go</p></li>\n<li><p>cheat julia Functions</p></li>\n<li><p>cheat -i go operators</p></li>\n</ul>\n\n\n<h3 id=\"Cloudup\">Cloudup</h3>\n\n<p>Description: Backs up a users github repositories to your bitbucket account.\n  With no flags cloudup will guide you through backing up a single repository</p>\n\n<p>Usage: cloudup [flags] or cloudup [flags] [listOfGHRepoNamesSplitBySpaces]</p>\n\n<ul>\n<li><p>-p Upload the repositor(y)(ies) as private to bitbucket (must have private repo ability on bitbucket)</p></li>\n<li><p>-a Backup all github repositories</p></li>\n<li><p>-s Only backup repositories that you have created (no forks) (only works in conjunction with the -a flag)</p></li>\n<li><p>-t Backup the repository with a timestamp added to the repostiory name (will always create a new unique bitbucket repo)</p></li>\n<li><p>-u Update Bash-Snippet Tools</p></li>\n<li><p>-h Show the help</p></li>\n<li><p>-v Get the tool version</p></li>\n</ul>\n\n\n<p>Examples:</p>\n\n<ul>\n<li><p> cloudup</p></li>\n<li><p> cloudup -p -a</p></li>\n<li><p> cloudup -p nameOfRepo1 nameOf Repo2</p></li>\n<li><p> cloudup nameOfRep</p></li>\n</ul>\n\n\n<h3 id=\"Crypt\">Crypt</h3>\n\n<p>Description: A wrapper around openssl that facilitates encrypting and decrypting files.</p>\n\n<p>Usage: crypt [flag] [inputFile] [outputFile]</p>\n\n<ul>\n<li><p>-e Encrypt the inputFile and store it in the outputFil</p></li>\n<li><p>-d Decrypt the inputFile and store it in the outputFil</p></li>\n<li><p>-u Update Bash-Snippet Tools</p></li>\n<li><p>-h Show the help</p></li>\n<li><p>-v Get the tool version</p></li>\n</ul>\n\n\n<p>Examples:</p>\n\n<ul>\n<li><p>crypt -e mySecretFile.txt myEncryptedFile.jpg (change filetype so default program is incorrect)</p></li>\n<li><p>crypt -d myEncryptedFile.jpg thisIsNowDecrypted.txt (change filetype back so now default program is correct)</p></li>\n</ul>\n\n\n<h3 id=\"CryptoCurrency\">CryptoCurrency</h3>\n\n<p>Description: A realtime cryptocurrency converter.\nWith no flags it will pull down the latest stats of the top 10 cryptos</p>\n\n<p>Usage: cryptocurrency or cryptocurrency [flag] or cryptocurrency [flag] [arg]</p>\n\n<ul>\n<li><p>-o Utilize the old functionality of the tool</p></li>\n<li><p>-f Fiat currency for conversions</p></li>\n<li><p>-u Update Bash-Snippet Tools</p></li>\n<li><p>-h Show the help</p></li>\n<li><p>-v Get the tool version</p></li>\n</ul>\n\n\n<p>Examples:\n  cryptocurrency -o\n  cryptocurrency -f eur</p>\n\n<h3 id=\"Currency\">Currency</h3>\n\n<p>Description: A realtime currency converter.\n   With no flags it will guide you through the currency exchange</p>\n\n<p>Usage: currency or currency [flag] or currency [base] [exchangeTo] [amount]</p>\n\n<ul>\n<li><p>-u Update Bash-Snippet Tools</p></li>\n<li><p>-h Show the help</p></li>\n<li><p>-v Get the tool version</p></li>\n</ul>\n\n\n<p>Supported Currencies:</p>\n\n<hr />\n\n<p>| AUD | BGN | BRL | CAD |\n| CHF | CNY | CZK | DKK |\n| EUR | GBP | HKD | HRK |\n| HUF | IDR | ILS | INR |\n| JPY | KRW | MXN | MYR |\n| NOK | NZD | PHP | PLN |\n| RON | RUB | SEK | SGD |\n| THB | TRY | USD | ZAR |</p>\n\n<hr />\n\n<p>Examples:</p>\n\n<ul>\n<li><p>currency EUR USD 12.35</p></li>\n<li><p>currency</p></li>\n</ul>\n\n\n<h3 id=\"Geo\">Geo</h3>\n\n<p>Description: Provides quick access for wan, lan, router, dns, mac, and ip geolocation data</p>\n\n<p>Usage: geo [flag]</p>\n\n<ul>\n<li><p>-w  Returns WAN IP</p></li>\n<li><p>-l  Returns LAN IP(s)</p></li>\n<li><p>-r  Returns Router IP</p></li>\n<li><p>-d  Returns DNS Nameserver</p></li>\n<li><p>-m  Returns MAC address for interface. Ex. eth0</p></li>\n<li><p>-g  Returns Current IP Geodata</p></li>\n</ul>\n\n\n<p>Examples:</p>\n\n<ul>\n<li><p>geo -g</p></li>\n<li><p>geo -wlrdgm eth0</p></li>\n</ul>\n\n\n<p>Custom Geo Output =>\n[all] [query] [city] [region] [country] [zip] [isp]</p>\n\n<p>Example: geo -a 8.8.8.8 -o city,zip,isp</p>\n\n<ul>\n<li><p>-o  [options] Returns Specific Geodata</p></li>\n<li><p>-a  [address] For specific ip in -s</p></li>\n<li><p>-v  Returns Version</p></li>\n<li><p>-h  Returns Help Screen</p></li>\n<li><p>-u  Updates Bash-Snippets</p></li>\n</ul>\n\n\n<h3 id=\"Gist\">Gist</h3>\n\n<p>Description: Manage your gists with git and Github API v3</p>\n\n<p>Usage: gist [command] [args]</p>\n\n<ul>\n<li><p>[star|all]  List your gists, use 'star' as argument for your starred gists,\n            'all' or 'a' for both your and starred gists. Format for each line is:\n            <var>INDEX</var> <var>URL</var> <var>FILE_NUM</var> <var>COMMENT_NUM</var> <var>DESCRIPTION</var></p></li>\n<li><p>fetch       Update the local list of your gists, 'star' as argument for your starred gists</p></li>\n<li><p><var>INDEX</var>     Show the path of local gist repo and do custom actions</p></li>\n<li><p>new         Create a new gist with files or STDIN</p></li>\n<li><p>grep        Grep gists by description, filename and content with a given pattern</p></li>\n<li><p>tag         Modify/List tags for a gist</p></li>\n<li><p>tags        List all tags and pinned tags</p></li>\n<li><p>pin,        Pin/Unpin tags, or filter gists with pinned tags</p></li>\n<li><p>lan         Filter gists or list gist with coding languages</p></li>\n<li><p>detail      Show the detail of a gist</p></li>\n<li><p>edit        Edit description for a gist</p></li>\n<li><p>delete      Delete gists by given indices</p></li>\n<li><p>push        Push changes by git</p></li>\n<li><p>clean       Clean local repos of removed gists</p></li>\n<li><p>config      Do configuration</p></li>\n<li><p>user        Get list of gists with a given Github user</p></li>\n<li><p>github      Import selected gist as a new Github repo</p></li>\n<li><p>help        Show the helper message</p></li>\n</ul>\n\n\n<p>Example:</p>\n\n<ul>\n<li><p>gist                    (Show your gists)</p></li>\n<li><p>gist tag                (Show your gists with tags)</p></li>\n<li><p>gist fetch              (update the list of gists from github.com)</p></li>\n<li><p>gist 3                  (show the repo path of your 3rd gist, and do custom actions)</p></li>\n<li><p>gist 3 --no-action      (show the repo path of your 3rd gist, and do not perform actions)</p></li>\n<li><p>gist new --desc bar foo (create a new gist with files and description)</p></li>\n</ul>\n\n\n<h3 id=\"Lyrics\">Lyrics</h3>\n\n<p>Description: Fetch lyrics for a certain song.</p>\n\n<p>Usage: lyrics [flags] or tool [-a] [arg] [-s] [arg]</p>\n\n<ul>\n<li><p>-a  Artist of the song to fetch lyrics for</p></li>\n<li><p>-s  Song of the artist to fetch lyrics for</p></li>\n<li><p>-f  Export the lyrics to file rather than outputting to stdout</p></li>\n<li><p>-u  Update Bash-Snippet Tools</p></li>\n<li><p>-h  Show the help</p></li>\n<li><p>-v  Get the tool version</p></li>\n</ul>\n\n\n<p>Examples:</p>\n\n<ul>\n<li><p>lyrics -a logic -s run it</p></li>\n<li><p>lyrics -a logic -s run it -f ~/runItLyrics.txt</p></li>\n</ul>\n\n\n<h3 id=\"Meme\">Meme</h3>\n\n<p>Description: A lightning fast meme generator</p>\n\n<p>Usage: tool [flags] or tool [flags] [arguments]</p>\n\n<ul>\n<li><p>-u  Update Bash-Snippet Tools</p></li>\n<li><p>-h  Show the help</p></li>\n<li><p>-f  Choose the output filename</p></li>\n<li><p>-v  Get the tool version</p></li>\n</ul>\n\n\n<p>Examples:</p>\n\n<ul>\n<li>meme -f dogeMeme</li>\n</ul>\n\n\n<h3 id=\"Movies\">Movies</h3>\n\n<p>Description: Provides relevant information about a certain movie.</p>\n\n<p>Usage: movies [flag] or movies [movieToSearch]</p>\n\n<ul>\n<li><p>-u Update Bash-Snippet Tools</p></li>\n<li><p>-h Show the help</p></li>\n<li><p>-v Get the tool version</p></li>\n<li><p>-d Show detailed information</p></li>\n</ul>\n\n\n<p>Examples:</p>\n\n<ul>\n<li><p>movies Argo</p></li>\n<li><p>movies Inception</p></li>\n</ul>\n\n\n<h3 id=\"Newton\">Newton</h3>\n\n<p>Description: Performs numerical calculations all the way up to symbolic math parsing.</p>\n\n<p>Usage: newton [operation] [expression] or newton [flag]</p>\n\n<ul>\n<li><p>-u  Update Bash-Snippet Tools</p></li>\n<li><p>-h  Show the help</p></li>\n<li><p>-v  Get the tool version</p></li>\n</ul>\n\n\n<table>\n<thead>\n<tr>\n<th>Operations     Sample Expression      Sample Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Simplify       [[2x<sup>2</sup>]+7]*[4x<sup>2</sup>]    8 x<sup>4</sup> + 28 x<sup>2</sup> </td>\n</tr>\n<tr>\n<td>Factor             x<sup>2</sup> + 2x             x (x + 2)  </td>\n</tr>\n<tr>\n<td>Derive              x<sup>2</sup>+2x               2 x + 2   </td>\n</tr>\n<tr>\n<td>Integrate           x<sup>2</sup>+2x         1/3 x<sup>3</sup> + x<sup>2</sup> +C</td>\n</tr>\n<tr>\n<td>Roots/Zeroes        x<sup>2</sup>+2x                2, 0     </td>\n</tr>\n<tr>\n<td>Tangent             2~x<sup>3</sup>              12 x + -16  | (Finding tangent line when x=2 for expression x<sup>3</sup>)</td>\n</tr>\n<tr>\n<td>Area               2:4~x<sup>3</sup>                 60      | (Finding area under curve from 2 to 4 for expression x<sup>3</sup>)</td>\n</tr>\n<tr>\n<td>Cos                   pi                   -1      </td>\n</tr>\n<tr>\n<td>Sin                   pi                    0      </td>\n</tr>\n<tr>\n<td>Tan                  pi/4                   1      </td>\n</tr>\n<tr>\n<td>ArcCos                 1                    0      </td>\n</tr>\n<tr>\n<td>ArcSin                 0                    0      </td>\n</tr>\n<tr>\n<td>ArcTan                pi                arcsin(pi) </td>\n</tr>\n<tr>\n<td>Abs                   -2                    2      </td>\n</tr>\n<tr>\n<td>Log                   2~8                   3      | (Log base 2 of eight)</td>\n</tr>\n</tbody>\n</table>\n\n\n<p>  Valid Symbols:\n    + add\n    - subtract\n    [ left parenthesis (you must use brackets bash has a bultin for parenthesis)\n    ] right parenthesis (you must use brackets bash has a bultin for parenthesis)\n    * multiply\n    / divide\n    ^ power\n    : between the range of left and right side (only for area under curve)\n    ~ parameter on right side (only for area, tangent line and log)</p>\n\n<p>Examples:</p>\n\n<ul>\n<li><p>newton simplify [[2x<sup>2</sup>]+7]*[4x<sup>2</sup>]</p></li>\n<li><p>movies derive x<sup>2</sup>+2x</p></li>\n</ul>\n\n\n<h3 id=\"Pwned\">Pwned</h3>\n\n<p>Usage: pwned [email]</p>\n\n<p>Description: Checks where an email account has been breached</p>\n\n<pre><code>* -u Update Bash-Snippet Tools\n\n* -h Show the help\n\n* -v Get the tool version\n</code></pre>\n\n<p>Examples:</p>\n\n<pre><code>* pwned emailtocheck@email.com\n</code></pre>\n\n<h3 id=\"Qrify\">Qrify</h3>\n\n<p>Usage: qrify [stringtoturnintoqrcode]</p>\n\n<p>Description: Converts strings or urls into a qr code.</p>\n\n<pre><code>* -u Update Bash-Snippet Tools\n\n* -m Enable multiline support\n\n* -f Save the QRCode to a file\n\n* -d Decode the QR code from a PNG/GIF/JP(E)G file\n\n* -h Show the help\n\n* -v Get the tool version\n</code></pre>\n\n<p>Examples:</p>\n\n<pre><code>* qrify this is a test string\n\n* qrify -m two \\n lines\n\n* qrify -f fileNameHere Insert what you want to encode here\n\n* qrify github.com # notice no http:// or https:// this will fail\n\n* qrify -d fileName.png\n</code></pre>\n\n<h3 id=\"Short\">Short</h3>\n\n<p>Description: Unmasks shortended urls.</p>\n\n<p>Usage: short [shortURL] or short [flag]</p>\n\n<ul>\n<li><p>-e Expand the following URL</p></li>\n<li><p>-s Shorten the following URL</p></li>\n<li><p>-u Update Bash-Snippet Tools</p></li>\n<li><p>-h Show the help</p></li>\n<li><p>-v Get the tool version</p></li>\n</ul>\n\n\n<p>Example:</p>\n\n<ul>\n<li><p> Input: short -e tinyurl.com/jhkj</p></li>\n<li><p> Output: http://possiblemaliciouswebsiteornot.com</p></li>\n<li><p> Input: short -s google.com</p></li>\n<li><p> Output: http://ki.tc/23sd1d</p></li>\n</ul>\n\n\n<h3 id=\"Siteciphers\">Siteciphers</h3>\n\n<p>Description: Checks the available ciphers for the SSL of an https site.</p>\n\n<p>Usage: siteciphers [flag] or siteciphers [optionalDFlag] [website]</p>\n\n<ul>\n<li><p>-u Update Bash-Snippet Tools</p></li>\n<li><p>-h Show the help</p></li>\n<li><p>-v Get the tool version</p></li>\n<li><p>-d Set the delay between requests sent to the site (default is 1 sec)</p></li>\n</ul>\n\n\n<p>Examples:</p>\n\n<ul>\n<li><p>siteciphers github.com</p></li>\n<li><p>siteciphers -d 0.75 google.com</p></li>\n</ul>\n\n\n<h3 id=\"Stocks\">Stocks</h3>\n\n<p>Description: Finds the latest information on a certain stock.</p>\n\n<p>Usage: stocks [flag] or stocks [company/ticker]</p>\n\n<ul>\n<li><p>-u Update Bash-Snippet Tools</p></li>\n<li><p>-h Show the help</p></li>\n<li><p>-v Get the tool version</p></li>\n</ul>\n\n\n<p>Examples:</p>\n\n<ul>\n<li><p>stocks AAPL</p></li>\n<li><p>stocks Tesla</p></li>\n</ul>\n\n\n<h3 id=\"Taste\">Taste</h3>\n\n<p>Description: A recommendation engine that provides 3 similar items based on some input topic.\n  Taste also has the ability to provide information on the item of interest.\n  Supports: shows, books, music, artists, movies, authors, games</p>\n\n<p>Usage: taste [flag] [item]</p>\n\n<ul>\n<li><p>-i Get more information on similar items</p></li>\n<li><p>-s Get information on the item itself</p></li>\n<li><p>-u Update Bash-Snippet Tools</p></li>\n<li><p>-h Show the help</p></li>\n<li><p>-v Get the tool version</p></li>\n</ul>\n\n\n<p>Examples:</p>\n\n<ul>\n<li><p>taste -i Kendrick Lamar</p></li>\n<li><p>taste Catcher in the Ry</p></li>\n<li><p>taste -s Red Hot Chili Peppers</p></li>\n</ul>\n\n\n<h3 id=\"Todo\">Todo</h3>\n\n<p>Description: A simplistic commandline todo list.</p>\n\n<p>Usage: todo [flags] or todo [flags] [arguments]</p>\n\n<ul>\n<li><p>-c Clear all the current tasks</p></li>\n<li><p>-r Remove the following task number</p></li>\n<li><p>-g Get the current tasks</p></li>\n<li><p>-a Add the following task</p></li>\n<li><p>-u Update Bash-Snippet Tools</p></li>\n<li><p>-h Show the help</p></li>\n<li><p>-v Get the tool version</p></li>\n</ul>\n\n\n<p>Examples:</p>\n\n<ul>\n<li><p>todo -a My very first task</p></li>\n<li><p>todo -r 1</p></li>\n<li><p>todo -g</p></li>\n<li><p>todo -c</p></li>\n</ul>\n\n\n<h3 id=\"Transfer\">Transfer</h3>\n\n<p>Description: Quickly transfer files from the command line.</p>\n\n<p>Usage: transfer [flags] or transfer [flag] [args] or transfer [filePathToUpload]</p>\n\n<ul>\n<li><p>-d  Download a single file</p>\n\n<pre><code>* First arg: Output file directory\n* Second arg: File url id\n* Third arg: File name\n</code></pre></li>\n<li><p>-o  Onetime file upload</p></li>\n<li><p>-u  Update Bash-Snippet Tools</p></li>\n<li><p>-h  Show the help</p></li>\n<li><p>-v  Get the tool version</p></li>\n</ul>\n\n\n<p>Examples:</p>\n\n<ul>\n<li><p>transfer ~/fileToTransfer.txt</p></li>\n<li><p>transfer ~/firstFileToTransfer.txt ~/secondFileToTransfer.txt # upload multiple files at once</p></li>\n<li><p>transfer -d ~/outputDirectory fileID fileName</p></li>\n<li><p>transfer -o ~/fileToTransfer.txt</p></li>\n</ul>\n\n\n<h3 id=\"Weather\">Weather</h3>\n\n<p>Description: Provides a 3 day forecast on your current location or a specified location.\n  With no flags Weather will default to your current location.</p>\n\n<p>Usage: weather or weather [flag] or weather [country] or weather [city] [state]</p>\n\n<ul>\n<li><p>weather [optionalLocation] [i][M] get weather in imperial units, optional M means windspeed in m/s</p></li>\n<li><p>weather [optionalLocation] [m][M] lowercase m gets weather in metric units, optional M means windspeed in m/s</p></li>\n<li><p>weather [Moon] grabs the phase of the moon</p></li>\n<li><p>-u Update Bash-Snippet Tools</p></li>\n<li><p>-h Show the help</p></li>\n<li><p>-v Get the tool version</p></li>\n</ul>\n\n\n<p>Examples:</p>\n\n<ul>\n<li><p>weather</p></li>\n<li><p>weather Paris m</p></li>\n<li><p>weather Tokyo</p></li>\n<li><p>weather Moon</p></li>\n<li><p>weather mM</p></li>\n</ul>\n\n\n<h3 id=\"Ytview\">Ytview</h3>\n\n<p>Description: Search and play youtube videos right from the terminal.</p>\n\n<p>Usage: ytview [flag] [string] or ytview [videoToSearch]</p>\n\n<ul>\n<li><p>-s Searches youtube</p></li>\n<li><p>-c Shows the latest videos of a channel</p></li>\n<li><p>-u Update Bash-Snippet Tools</p></li>\n<li><p>-h Show the help</p></li>\n<li><p>-v Get the tool version</p></li>\n</ul>\n\n\n<p>Examples:</p>\n\n<ul>\n<li><p>ytview -s Family Guy Chicken Fight</p></li>\n<li><p>ytview -c Numberphile</p></li>\n</ul>\n\n\n<h2 id=\"Updating\">Updating</h2>\n\n<p>  With any of the installed tools you can automate the update by running it with the -u option or passing in update as the arguments</p>\n\n<ul>\n<li>stocks update</li>\n</ul>\n\n\n<p>  or</p>\n\n<ul>\n<li>stocks -u</li>\n</ul>\n\n\n<p>  This will clone the repository and install the new versions of scripts that were installed, if you didn't install a certain tool this script will not install the new version of that tool.</p>\n\n<h2 id=\"Uninstalling\">Uninstalling</h2>\n\n<p>  If you don't have the Bash-Snippets folder anymore clone the repository:  git clone https://github.com/alexanderepstein/Bash-Snippets`</p>\n\n<p>  cd into the Bash-Snippets directory: <code>cd Bash-Snippets</code></p>\n\n<pre><code>To go through a guided uninstall\n</code></pre>\n\n<ul>\n<li> ./uninstall.sh</li>\n</ul>\n\n\n<h2 id=\"AUTHOR\">AUTHOR</h2>\n\n<p>Alexander Epstein\nGithub: https://github.com/alexanderepstein</p>\n\n<h2 id=\"Contributors\">Contributors</h2>\n\n<p>Jake Meyer\nGithub: https://github.com/jakewmeyer</p>\n\n<p>Linyos Torovoltos\nGithub: https://gitbub.com/linyostorovovoltos</p>\n\n<h2 id=\"License\">License</h2>\n\n<p>MIT License</p>\n\n<p>Copyright (c) 2017 Alex Epstein</p>\n\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>\n\n<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>\n\n<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\n\n\n  <ol class='man-decor man-foot man foot'>\n    <li class='tl'></li>\n    <li class='tc'>April 2020</li>\n    <li class='tr'>bash-snippets(1)</li>\n  </ol>\n\n  </div>\n</body>\n</html>\n"
        },
        {
          "name": "bash-snippets.1.ronn",
          "type": "blob",
          "size": 14.8232421875,
          "content": "bash-snippets(1) -- A collection of small bash scripts for heavy terminal users\n====\n\n## Tools\n\n### Cheat\nDescription: Cheatsheets for quick information about multiple programming languages along with terminal commands\n\nUsage: cheat [flags] [command] or cheat [flags] [programming language] [subject]\n\n  * -s Does a search for last argument rather than looking for exact match\n\n  * -i Case insensitive search\n\n  * -b Word boundaries in search\n\n  * -r Recursive search\n\n  * -u Update Bash-Snippet Tools\n\n  * -h Show the help\n\n  * -v Get the tool version\n\nSpecial Pages:\n\n  * hello Describes building the hello world program written in the language\n\n  * list This lists all cheatsheets related to previous arg if none it lists all cheatsheets\n\n  * learn Shows a learn-x-in-minutes language cheat sheet perfect for getting started with the language\n\n  * 1line A collection of one-liners in this language\n\n  * weirdness A collection of examples of weird things in this language\n\nExamples:\n\n  * cheat rust hello\n\n  * cheat -r -b -i go\n\n  * cheat julia Functions\n\n  * cheat -i go operators\n\n### Cloudup\nDescription: Backs up a users github repositories to your bitbucket account.\n  With no flags cloudup will guide you through backing up a single repository\n\nUsage: cloudup [flags] or cloudup [flags] [listOfGHRepoNamesSplitBySpaces]\n\n  * -p Upload the repositor(y)(ies) as private to bitbucket (must have private repo ability on bitbucket)\n\n  * -a Backup all github repositories\n\n  * -s Only backup repositories that you have created (no forks) (only works in conjunction with the -a flag)\n\n  * -t Backup the repository with a timestamp added to the repostiory name (will always create a new unique bitbucket repo)\n\n  * -u Update Bash-Snippet Tools\n\n  * -h Show the help\n\n  * -v Get the tool version\n\nExamples:\n\n   * cloudup\n\n   * cloudup -p -a\n\n   * cloudup -p nameOfRepo1 nameOf Repo2\n\n   * cloudup nameOfRep\n\n### Crypt\nDescription: A wrapper around openssl that facilitates encrypting and decrypting files.\n\nUsage: crypt [flag] [inputFile] [outputFile]\n\n  * -e Encrypt the inputFile and store it in the outputFil\n\n  * -d Decrypt the inputFile and store it in the outputFil\n\n  * -u Update Bash-Snippet Tools\n\n  * -h Show the help\n\n  * -v Get the tool version\n\nExamples:\n\n  * crypt -e mySecretFile.txt myEncryptedFile.jpg (change filetype so default program is incorrect)\n\n  * crypt -d myEncryptedFile.jpg thisIsNowDecrypted.txt (change filetype back so now default program is correct)\n\n### CryptoCurrency\nDescription: A realtime cryptocurrency converter.\nWith no flags it will pull down the latest stats of the top 10 cryptos\n\nUsage: cryptocurrency or cryptocurrency [flag] or cryptocurrency [flag] [arg]\n\n  * -o Utilize the old functionality of the tool\n\n  * -f Fiat currency for conversions\n\n  * -u Update Bash-Snippet Tools\n\n  * -h Show the help\n\n  * -v Get the tool version\n\n\n\nExamples:\n  cryptocurrency -o\n  cryptocurrency -f eur\n\n### Currency\nDescription: A realtime currency converter.\n   With no flags it will guide you through the currency exchange\n\nUsage: currency or currency [flag] or currency [base] [exchangeTo] [amount]\n\n  * -u Update Bash-Snippet Tools\n\n  * -h Show the help\n\n  * -v Get the tool version\n\nSupported Currencies:\n _______________________\n| AUD | BGN | BRL | CAD |\n| CHF | CNY | CZK | DKK |\n| EUR | GBP | HKD | HRK |\n| HUF | IDR | ILS | INR |\n| JPY | KRW | MXN | MYR |\n| NOK | NZD | PHP | PLN |\n| RON | RUB | SEK | SGD |\n| THB | TRY | USD | ZAR |\n _______________________\n\nExamples:\n\n  * currency EUR USD 12.35\n\n  * currency\n\n### Geo\nDescription: Provides quick access for wan, lan, router, dns, mac, and ip geolocation data\n\nUsage: geo [flag]\n\n  * -w  Returns WAN IP\n\n  * -l  Returns LAN IP(s)\n\n  * -r  Returns Router IP\n\n  * -d  Returns DNS Nameserver\n\n  * -m  Returns MAC address for interface. Ex. eth0\n\n  * -g  Returns Current IP Geodata\n\nExamples:\n\n  * geo -g\n\n  * geo -wlrdgm eth0\n\nCustom Geo Output =>\n[all] [query] [city] [region] [country] [zip] [isp]\n\nExample: geo -a 8.8.8.8 -o city,zip,isp\n\n  * -o  [options] Returns Specific Geodata\n\n  * -a  [address] For specific ip in -s\n\n  * -v  Returns Version\n\n  * -h  Returns Help Screen\n\n  * -u  Updates Bash-Snippets\n\n### Gist\nDescription: Manage your gists with git and Github API v3\n\nUsage: gist [command] [args]\n\n  * [star|all]  List your gists, use 'star' as argument for your starred gists,\n                'all' or 'a' for both your and starred gists. Format for each line is:\n                <INDEX> <URL> <FILE_NUM> <COMMENT_NUM> <DESCRIPTION>\n\n  * fetch       Update the local list of your gists, 'star' as argument for your starred gists\n   \n  * <INDEX>     Show the path of local gist repo and do custom actions\n\n  * new         Create a new gist with files or STDIN\n\n  * grep        Grep gists by description, filename and content with a given pattern\n\n  * tag         Modify/List tags for a gist\n\n  * tags        List all tags and pinned tags\n\n  * pin,        Pin/Unpin tags, or filter gists with pinned tags\n\n  * lan         Filter gists or list gist with coding languages\n\n  * detail      Show the detail of a gist\n\n  * edit        Edit description for a gist\n\n  * delete      Delete gists by given indices\n\n  * push        Push changes by git\n\n  * clean       Clean local repos of removed gists\n\n  * config      Do configuration\n\n  * user        Get list of gists with a given Github user\n\n  * github      Import selected gist as a new Github repo\n\n  * help        Show the helper message\n\nExample:\n\n  * gist                    (Show your gists)\n\n  * gist tag                (Show your gists with tags)\n\n  * gist fetch              (update the list of gists from github.com)\n\n  * gist 3                  (show the repo path of your 3rd gist, and do custom actions)\n\n  * gist 3 --no-action      (show the repo path of your 3rd gist, and do not perform actions)\n\n  * gist new --desc bar foo (create a new gist with files and description)\n\n### Lyrics\nDescription: Fetch lyrics for a certain song.\n\nUsage: lyrics [flags] or tool [-a] [arg] [-s] [arg]\n\n  * -a  Artist of the song to fetch lyrics for\n\n  * -s  Song of the artist to fetch lyrics for\n\n  * -f  Export the lyrics to file rather than outputting to stdout\n\n  * -u  Update Bash-Snippet Tools\n\n  * -h  Show the help\n\n  * -v  Get the tool version\n\nExamples:\n\n  * lyrics -a logic -s run it\n\n  * lyrics -a logic -s run it -f ~/runItLyrics.txt\n\n### Meme\nDescription: A lightning fast meme generator\n\nUsage: tool [flags] or tool [flags] [arguments]\n\n  * -u  Update Bash-Snippet Tools\n\n  * -h  Show the help\n\n  * -f  Choose the output filename\n\n  * -v  Get the tool version\n\nExamples:\n\n  * meme -f dogeMeme\n\n### Movies\nDescription: Provides relevant information about a certain movie.\n\nUsage: movies [flag] or movies [movieToSearch]\n\n  * -u Update Bash-Snippet Tools\n\n  * -h Show the help\n\n  * -v Get the tool version\n\n  * -d Show detailed information\n\nExamples:\n\n  * movies Argo\n\n  * movies Inception\n\n### Newton\nDescription: Performs numerical calculations all the way up to symbolic math parsing.\n\nUsage: newton [operation] [expression] or newton [flag]\n\n  * -u  Update Bash-Snippet Tools\n\n  * -h  Show the help\n\n  * -v  Get the tool version\n\n\n|Operations     Sample Expression      Sample Result|\n|---------------------------------------------------|\n|Simplify       [[2x^2]+7]*[4x^2]    8 x^4 + 28 x^2 |\n|Factor             x^2 + 2x             x (x + 2)  |\n|Derive              x^2+2x               2 x + 2   |\n|Integrate           x^2+2x         1/3 x^3 + x^2 +C|\n|Roots/Zeroes        x^2+2x                2, 0     |\n|Tangent             2~x^3              12 x + -16  | (Finding tangent line when x=2 for expression x^3)\n|Area               2:4~x^3                 60      | (Finding area under curve from 2 to 4 for expression x^3)\n|Cos                   pi                   -1      |\n|Sin                   pi                    0      |\n|Tan                  pi/4                   1      |\n|ArcCos                 1                    0      |\n|ArcSin                 0                    0      |\n|ArcTan                pi                arcsin(pi) |\n|Abs                   -2                    2      |\n|Log                   2~8                   3      | (Log base 2 of eight)\n\n\n  Valid Symbols:\n    + add\n    - subtract\n    [ left parenthesis (you must use brackets bash has a bultin for parenthesis)\n    ] right parenthesis (you must use brackets bash has a bultin for parenthesis)\n    * multiply\n    / divide\n    ^ power\n    : between the range of left and right side (only for area under curve)\n    ~ parameter on right side (only for area, tangent line and log)\n\nExamples:\n\n* newton simplify [[2x^2]+7]*[4x^2]\n\n* movies derive x^2+2x\n\n### Pwned\nUsage: pwned [email]\n\nDescription: Checks where an email account has been breached\n\n    * -u Update Bash-Snippet Tools\n\n    * -h Show the help\n\n    * -v Get the tool version\n\nExamples:\n\n    * pwned emailtocheck@email.com\n\n### Qrify\nUsage: qrify [stringtoturnintoqrcode]\n\nDescription: Converts strings or urls into a qr code.\n\n    * -u Update Bash-Snippet Tools\n\n    * -m Enable multiline support\n\n    * -f Save the QRCode to a file\n\n    * -d Decode the QR code from a PNG/GIF/JP(E)G file\n\n    * -h Show the help\n\n    * -v Get the tool version\n\nExamples:\n\n    * qrify this is a test string\n\n    * qrify -m two \\n lines\n\n    * qrify -f fileNameHere Insert what you want to encode here\n\n    * qrify github.com # notice no http:// or https:// this will fail\n\n    * qrify -d fileName.png\n\n### Short\nDescription: Unmasks shortended urls.\n\nUsage: short [shortURL] or short [flag]\n\n  * -e Expand the following URL\n\n  * -s Shorten the following URL\n\n  * -u Update Bash-Snippet Tools\n\n  * -h Show the help\n\n  * -v Get the tool version\n\nExample:\n\n   * Input: short -e tinyurl.com/jhkj\n\n   * Output: http://possiblemaliciouswebsiteornot.com\n\n   * Input: short -s google.com\n\n   * Output: http://ki.tc/23sd1d\n\n### Siteciphers\nDescription: Checks the available ciphers for the SSL of an https site.\n\nUsage: siteciphers [flag] or siteciphers [optionalDFlag] [website]\n\n  * -u Update Bash-Snippet Tools\n\n  * -h Show the help\n\n  * -v Get the tool version\n\n  * -d Set the delay between requests sent to the site (default is 1 sec)\n\nExamples:\n\n  * siteciphers github.com\n\n  * siteciphers -d 0.75 google.com\n\n### Stocks\nDescription: Finds the latest information on a certain stock.\n\nUsage: stocks [flag] or stocks [company/ticker]\n\n  * -u Update Bash-Snippet Tools\n\n  * -h Show the help\n\n  * -v Get the tool version\n\nExamples:\n\n  * stocks AAPL\n\n  * stocks Tesla\n\n### Taste\nDescription: A recommendation engine that provides 3 similar items based on some input topic.\n  Taste also has the ability to provide information on the item of interest.\n  Supports: shows, books, music, artists, movies, authors, games\n\nUsage: taste [flag] [item]\n\n  * -i Get more information on similar items\n\n  * -s Get information on the item itself\n\n  * -u Update Bash-Snippet Tools\n\n  * -h Show the help\n\n  * -v Get the tool version\n\nExamples:\n\n  * taste -i Kendrick Lamar\n\n  * taste Catcher in the Ry\n\n  * taste -s Red Hot Chili Peppers\n\n### Todo\nDescription: A simplistic commandline todo list.\n\nUsage: todo [flags] or todo [flags] [arguments]\n\n  * -c Clear all the current tasks\n\n  * -r Remove the following task number\n\n  * -g Get the current tasks\n\n  * -a Add the following task\n\n  * -u Update Bash-Snippet Tools\n\n  * -h Show the help\n\n  * -v Get the tool version\n\nExamples:\n\n  * todo -a My very first task\n\n  * todo -r 1\n\n  * todo -g\n\n  * todo -c\n\n### Transfer\nDescription: Quickly transfer files from the command line.\n\nUsage: transfer [flags] or transfer [flag] [args] or transfer [filePathToUpload]\n\n  * -d  Download a single file\n        * First arg: Output file directory\n        * Second arg: File url id\n        * Third arg: File name\n\n  * -o  Onetime file upload\n\n  * -u  Update Bash-Snippet Tools\n\n  * -h  Show the help\n\n  * -v  Get the tool version\n\nExamples:\n\n  * transfer ~/fileToTransfer.txt\n\n  * transfer ~/firstFileToTransfer.txt ~/secondFileToTransfer.txt # upload multiple files at once\n\n  * transfer -d ~/outputDirectory fileID fileName\n\n  * transfer -o ~/fileToTransfer.txt\n\n### Weather\nDescription: Provides a 3 day forecast on your current location or a specified location.\n  With no flags Weather will default to your current location.\n\nUsage: weather or weather [flag] or weather [country] or weather [city] [state]\n\n  * weather [optionalLocation] [i][M] get weather in imperial units, optional M means windspeed in m/s\n\n  * weather [optionalLocation] [m][M] lowercase m gets weather in metric units, optional M means windspeed in m/s\n\n  * weather [Moon] grabs the phase of the moon\n\n  * -u Update Bash-Snippet Tools\n\n  * -h Show the help\n\n  * -v Get the tool version\n\nExamples:\n\n  * weather\n\n  * weather Paris m\n\n  * weather Tokyo\n\n  * weather Moon\n\n  * weather mM\n\n### Ytview\nDescription: Search and play youtube videos right from the terminal.\n\nUsage: ytview [flag] [string] or ytview [videoToSearch]\n\n  * -s Searches youtube\n\n  * -c Shows the latest videos of a channel\n\n  * -u Update Bash-Snippet Tools\n\n  * -h Show the help\n\n  * -v Get the tool version\n\nExamples:\n\n  * ytview -s Family Guy Chicken Fight\n\n  * ytview -c Numberphile\n\n\n## Updating\n\n  With any of the installed tools you can automate the update by running it with the -u option or passing in update as the arguments\n\n  * stocks update\n\n  or\n\n  * stocks -u\n\n  This will clone the repository and install the new versions of scripts that were installed, if you didn't install a certain tool this script will not install the new version of that tool.\n\n## Uninstalling\n\n  If you don't have the Bash-Snippets folder anymore clone the repository:  git clone https://github.com/alexanderepstein/Bash-Snippets`\n\n  cd into the Bash-Snippets directory: `cd Bash-Snippets`\n\n    To go through a guided uninstall\n\n  *  ./uninstall.sh\n\n\n## AUTHOR\n\nAlexander Epstein\nGithub: https://github.com/alexanderepstein\n\n## Contributors\n\nJake Meyer\nGithub: https://github.com/jakewmeyer\n\nLinyos Torovoltos\nGithub: https://gitbub.com/linyostorovovoltos\n\n## License\n\nMIT License\n\nCopyright (c) 2017 Alex Epstein\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "bash-snippets",
          "type": "tree",
          "content": null
        },
        {
          "name": "changelog.md",
          "type": "blob",
          "size": 8.9775390625,
          "content": "<div align=\"center\">\n\n# Bash-Snippets Changelog\n\n## Version 1.23.0\n\n## Changes\n* Added python3 support\n* Added new feature from rates.sx for cryptocurrency\n* Added new component bak2dvd\n* Fixed stocks script and pointing it to new api\n* Fixing Wlan IP on Mac for geo\n* Adding environment variable YTVIEWPLAYER for choice of default player for ytview\n</div>\n\n<div align=\"center\">\n\n## Version 1.22.1\n\n</div>\n\n## Changes\n* Fix bugs in currency tool because of api changes\n* Fix bugs in cloudup tool because of api changes\n* Fixing movies tool\n* Fix bugs in meme tool\n* Fix default answer on install\n\n<div align=\"center\">\n\n## Version 1.22.0\n\n</div>\n\n## Changes\n* Adding bash-snippets gui component\n* Fixing bug in url shortener\n* Fixing old functionality cryptocurrency\n\n\n\n<div align=\"center\">\n\n## Version 1.21.0\n\n</div>\n\n## Changes\n* Fixing the exchange name for the stocks tool\n* Adding the memes component\n* Fixing locale error\n* Added pwned component\n* Adding one time file transfer to transfer component\n* Changing how cryptocurrency tool works now using rate.sx\n\n\n\n<div align=\"center\">\n\n## Version 1.20.0\n\n</div>\n\n## Changes\n* Brought back lyrics tool\n* Added shorten url functionality to short\n* Fixed the stocks api\n* Save QRCodes to an image file\n* Fixed bug in qrify for single-word strings\n* Adding mdfind functionality to ytview\n\n\n<div align=\"center\">\n\n## Version 1.19.2\n\n</div>\n\n## Changes\n* ytview for macOS can now use mpv\n* lyrics tool was removed, api is not available anymore\n\n\n\n<div align=\"center\">\n\n## Version 1.19.1\n\n</div>\n\n## Changes\n* Fixed bug in todo for task lists over 8 tasks\n* Fixing the endpoint in the short tool\n\n<div align=\"center\">\n\n## Version 1.19.0\n\n</div>\n\n### Changes\n* Adding BCH to cryptocurrencies tool\n* Adding lyrics component\n\n<div align=\"center\">\n\n## Version 1.18.1\n\n</div>\n\n### Changes\n* Changed how transfer uploads files\n* Upload multiple files with transfer\n* Get tasks after removal of tasks in todo\n* Bulk removal of tasks in todo\n* Removing bad echo from cloudup\n\n<div align=\"center\">\n\n## Version 1.18.0\n\n</div>\n\n### Changes\n* Added transfer component\n* Fixing fetch call across all tools\n* Changing progress echos for update\n* Run checkInternet only when needed (speeds up processes that don't need it)\n* Hiding the api help page in weather\n\n<div align=\"center\">\n\n## Version 1.17.3\n\n</div>\n\n### Changes\n* checkInternet now checks github.com over google.com\n* tools that don't need bc don't use it\n* tools that need bc can approximate without it\n* Fixing trailing quotation mark for newton on osx\n* Adding all option to uninstall\n\n\n<div align=\"center\">\n\n## Version 1.17.2\n\n</div>\n\n### Changes\n* Fixing where manpage is installed for linuxbrew\n* Updating weather usage and manpage\n\n<div align=\"center\">\n\n## Version 1.17.1\n\n</div>\n\n### Bugfixes\n* Fixing grabbing the prefix in homebrew install\n\n<div align=\"center\">\n\n## Version 1.17.0\n\n</div>\n\n### Changes\n* Adding ability to use m/s for windspeed in weather\n* Supporting httpie for all tools that work with it\n* Install for homebrew can now handle multiple tools on one line\n\n<div align=\"center\">\n\n## Version 1.16.2\n\n</div>\n\n### Changes\n* Adding back all argument to homebrew install\n\n<div align=\"center\">\n\n## Version 1.16.1\n\n</div>\n\n### Changes\n* Changed install script for homebrew\n* Added the -r option to newton\n\n<div align=\"center\">\n\n## Version 1.16.0\n\n</div>\n\n### Changes\n* Added cryptocurrency component\n* Added newton component\n* Changed WAN Call in geo\n\n<div align=\"center\">\n\n## Version 1.15.2\n\n</div>\n\n### Bugfixes\n* Installer path was preventing install\n\n<div align=\"center\">\n\n## Version 1.15.1\n\n</div>\n\n\n### Changes\n* Added --prefix option to installer for homebrew correctly\n\n<div align=\"center\">\n\n## Version 1.15.0\n\n</div>\n\n### Changes\n* Added -d option to movies\n* Updating extra tools if installed in main update pipeline\n\n<div align=\"center\">\n\n## Version 1.14.3\n\n</div>\n\n### Changes\n* Adding new progress echos to cloudup\n\n### Bugfixes\n* Fixed bug in all tools using python for OSX where it would result caught in a segfault\n\n<div align=\"center\">\n\n## Version 1.14.2\n\n</div>\n\n### Bugfixes\n* Fixing bug where cloudup was incorrectly deleting the remote bitbucket repository.\n\n<div align=\"center\">\n\n## Version 1.14.1\n\n</div>\n\n### Bugfixes\n* Fixing issue in cloudup remote url was not set correctly if the ```-t``` option was not used\n* Fixing issue in cloudup where tags were causing conflicts, solved by deleting bitbucket repo first\n\n<div align=\"center\">\n\n## Version 1.14.0\n\n</div>\n\n### Changes\n* Shebang changed to ```/usr/bin/env bash``` for more portability\n* Todo has more error checking for bad input\n* Added the ```-s``` option to cloudup which will prevent the backup of forked repositories\n* Added the ```-t``` option to cloudup to give the user the ability to create a unique repo or just update the old one\n\n<div align=\"center\">\n\n## Version 1.13.2\n\n</div>\n\n\n### Changes\n* Updated installer not allow updates if bash-snippets was installed through package manager\n\n<div align=\"center\">\n\n## Version 1.13.1\n\n</div>\n\n### Changes\n* Preventing bad input in ```todo -r```\n* Stocks was using unnecessary characters in the URL\n* Cloudup's private option now works\n* Cloudup's all option now looks to backup the first 10,000 repositories versus 100\n\n<div align=\"center\">\n\n## Version 1.13.0\n\n</div>\n\n### Changes\n* Added todo component\n\n### Bugfixes\n* Forcing ytview to search in english\n\n<div align=\"center\">\n\n## Version 1.12.0\n\n</div>\n\n### Changes\n* Added siteciphers component\n\n### Bugfixes\n* Crypt was still using only curl to get tags for update\n\n<div align=\"center\">\n\n## Version 1.11.1\n\n</div>\n\n### Changes\n* Now supporting the use of proxies\n* Typo fixes\n* Adding IMDB rating to movies tool\n\n### Bugfixes\n* Suppressing ```source ~/.bash_profile``` error\n\n\n<div align=\"center\">\n\n## Version 1.11.1\n\n</div>\n\n### Bugfixes\n* Fixed issue in ytview where it was playing wrong video\n* Fixed wget check in qrify\n\n<div align=\"center\">\n\n## Version 1.11.0\n\n</div>\n\n### Changes\n* Adding manpage, view it with ```man bash-snippets```\n\n<div align=\"center\">\n\n## Version 1.10.1\n\n</div>\n\n\n### Changes\n* Cloudup's -a option is now functional\n\n### Bugfixes\n* Cloudup only needs one temporary copy of the repository\n* Qrify had an issue where it couldn't handle more than one space\n* Cloudup now retains git history when it backs up to bitbucket\n* Fetch removed from qrify since it will not work\n\n\n<div align=\"center\">\n\n## Version 1.10.0\n\n</div>\n\n### Changes\n* Added qrify component\n\n### Bugfixes\n* Bug in taste where the -i option was not working\n* Bug in all scripts that used python on OSX\n* Bug in taste script on OSX\n\n<div align=\"center\">\n\n## Version 1.9.0\n\n</div>\n\n### Changes\n* Added cloudup component\n\n### Bugfixes\n* Fixing bug in ytview when search results are sparse\n\n\n<div align=\"center\">\n\n## Version 1.8.0\n\n</div>\n\n### Changes\n* Added ytview component\n\n### Bugfixes\n* Using ```$@``` instead of ```$1 $2 $3...``` in all applicable scripts\n* Make call to python 2 explicit in all applicable scripts\n* Hiding the cheatsheet api help page from the user\n\n\n<div align=\"center\">\n\n## Version 1.7.0\n\n</div>\n\n### Changes\n* Added cheat component\n\n<div align=\"center\">\n\n## Version 1.6.0\n\n</div>\n\n### Changes\n* Added geo component\n\n<div align=\"center\">\n\n## Version 1.5.0\n\n</div>\n\n### Changes\n* Added short component\n### Bugfixes\n* Sending errors in taste tool to /den/null\n* Taste tool only has one unique youtube link not three\n\n<div align=\"center\">\n\n## Version 1.4.0\n\n</div>\n\n# Changes\n* Added taste component\n\n<div align=\"center\">\n\n## Version 1.3.1\n\n</div>\n\n### Bugfixes\n* Fixing bug in currency where invalid exchangeTo wasn't handled correctly\n\n\n<div align=\"center\">\n\n## Version 1.3.0\n\n</div>\n\n### Changes\n* Now supporting wget, fetch and curl\n* Cleaning an echo on error for updating\n\n<div align=\"center\">\n\n## Version 1.2.1\n\n</div>\n\n### Changes\n* Check if curl is installed before using it\n* No sudo on error in update, just let user know they need to run the command as sudo\n* Changelog added\n### Bugfixes\n* Setting user agent for curl to prevent issues from changes in  ~/.curlrc\n\n<div align=\"center\">\n\n## Version 1.2.0\n\n</div>\n\n### Changes\n* Added help to each tool call with ```-h```\n* Can now call weather with metric or imperial units\n* Can now get the moon phase from weather\n* Adding locale to weather so it will return in native language\n\n<div align=\"center\">\n\n## Version 1.1.1\n\n</div>\n\n### Changes\n* Now you can pass arguments to the weather tool to get weather of a location other then your own\n* Now you can pass arguments to the currency tool to bypass the guided input\n* The output for the currency tool is cleaner\n### Bugfixes\n* Fixed bug in currency where exchange rate was not parsed correctly\n* Fixed bug in stocks where you could get lost in the tool by providing no input\n\n\n<div align=\"center\">\n\n## Version 1.1.0\n\n</div>\n\n### Changes\n* Facilitate updating by calling any of the tools with the -u option or update as the argument ex ```weather -u``` or ```weather update```\n\n<div align=\"center\">\n\n## Version 1.0.0\n\n\n</div>\n\n### Initial Release\n* Weather component added\n* Stocks component added\n* Movies component added\n* Currency component added\n* Crypt component added\n"
        },
        {
          "name": "cheat",
          "type": "tree",
          "content": null
        },
        {
          "name": "cloudup",
          "type": "tree",
          "content": null
        },
        {
          "name": "crypt",
          "type": "tree",
          "content": null
        },
        {
          "name": "cryptocurrency",
          "type": "tree",
          "content": null
        },
        {
          "name": "currency",
          "type": "tree",
          "content": null
        },
        {
          "name": "extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "geo",
          "type": "tree",
          "content": null
        },
        {
          "name": "gist",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 3.6875,
          "content": "#!/usr/bin/env bash\n# Author: Alexander Epstein https://github.com/alexanderepstein\ncurrentVersion=\"1.23.0\"\ndeclare -a tools=(bak2dvd bash-snippets cheat cloudup crypt cryptocurrency currency geo gist lyrics meme movies newton pwned qrify short siteciphers stocks taste todo transfer weather ytview)\ndeclare -a extraLinuxTools=(maps)\ndeclare -a extraDarwinTools\nusedGithubInstallMethod=\"0\"\nprefix=\"/usr/local\"\n\naskInstall()\n{\n  read -p \"Do you wish to install $1 [Y/n]: \" answer\n  answer=${answer:-Y}\n\n  if [[ \"$answer\" == [Yy] ]]; then\n    cd \"$1\" || return 1\n    echo -n \"Installing $1: \"\n    chmod a+x \"$1\"\n    cp \"$1\" /usr/local/bin > /dev/null 2>&1 || { echo \"Failure\"; echo \"Error copying file, try running install script as sudo\"; exit 1; }\n    echo \"Success\"\n    cd .. || return 1\n  fi\n}\n\nupdateTool()\n{\n  if [[ -f  /usr/local/bin/$1 ]]; then\n    usedGithubInstallMethod=\"1\"\n    cd \"$1\" || return 1\n    echo -n \"Installing $1: \"\n    chmod a+x \"$1\"\n    cp \"$1\" /usr/local/bin > /dev/null 2>&1 || { echo \"Failure\"; echo \"Error copying file, try running install script as sudo\"; exit 1; }\n    echo \"Success\"\n    cd .. || return 1\n  fi\n}\n\nextraUpdateTool()\n{\n  if [[ -f  /usr/local/bin/$1 ]]; then\n    usedGithubInstallMethod=\"1\"\n    cd extras || return 1\n    cd \"$2\" || return 1\n    cd \"$1\" || return 1\n    echo -n \"Installing $1: \"\n    chmod a+x \"$1\"\n    cp \"$1\" /usr/local/bin > /dev/null 2>&1 || { echo \"Failure\"; echo \"Error copying file, try running install script as sudo\"; exit 1; }\n    echo \"Success\"\n    cd .. || return 1\n    cd .. || return 1\n    cd .. || return 1\n  fi\n}\n\nsingleInstall()\n{\n  cd \"$1\" || exit 1\n  echo -n \"Installing $1: \"\n  chmod a+x \"$1\"\n  cp \"$1\" $prefix/bin > /dev/null 2>&1 || { echo \"Failure\"; echo \"Error copying file, try running install script as sudo\"; exit 1; }\n  echo \"Success\"\n  cd .. || exit 1\n}\n\ncopyManpage()\n{\n  manPath=\"$prefix/share/man/man1\"\n  if [ -f \"$prefix/man/man1/bash-snippets.1\" ]; then rm -f \"$prefix/man/man1/bash-snippets.1\"; fi\n  cp bash-snippets.1 $manPath 2>&1 || { echo \"Failure\"; echo \"Error copying file, try running install script as sudo\"; exit 1; }\n}\n\nresponse=$( echo \"$@\" | grep -Eo \"\\-\\-prefix\")\n\nif [[ $response == \"--prefix\" ]]; then\n  prefix=$(echo -n \"$@\" | sed -e 's/--prefix=\\(.*\\) .*/\\1/' | cut -d \" \" -f 1)\n  mkdir -p \"$prefix\"/bin \"$prefix\"/share/man/man1\n  if [[ $2 == \"all\" ]];then\n    for tool in \"${tools[@]}\"; do\n      singleInstall \"$tool\" || exit 1\n    done\n  else\n    for tool in \"${@:2}\"; do\n      singleInstall \"$tool\" || exit 1\n    done\n  fi\n  copyManpage || exit 1\nelif [[ $# == 0 ]]; then\n  for tool in \"${tools[@]}\"; do\n    askInstall \"$tool\" || exit 1\n  done\n  copyManpage || exit 1\nelif [[ $1 == \"update\" ]]; then\n  echo \"Updating scripts...\"\n  for tool in \"${tools[@]}\"; do\n    updateTool \"$tool\" || exit 1\n  done\n  if [[ $(uname -s) == \"Linux\" ]]; then\n    for tool in \"${extraLinuxTools[@]}\"; do\n      extraUpdateTool \"$tool\" Linux || exit 1\n    done\n  fi\n  if [[ $(uname) == \"Darwin\" ]];then\n    for tool in \"${extraDarwinTools[@]}\"; do\n      extraUpdateTool \"$tool\" Darwin || exit 1\n    done\n  fi\n  if [[ $usedGithubInstallMethod == \"1\" ]]; then\n    copyManpage || exit 1\n  else\n    echo \"It appears you have installed bash-snippets through a package manager, you must update it with the respective package manager.\"\n    exit 1\n  fi\nelif [[ $1 == \"all\" ]]; then\n  for tool in \"${tools[@]}\"; do\n    singleInstall \"$tool\" || exit 1\n  done\n  copyManpage || exit 1\nelse\n  singleInstall \"$1\" || exit 1\n  copyManpage || exit 1\nfi\n\necho -n \"( •_•)\"\nsleep .75\necho -n -e \"\\r( •_•)>⌐■-■\"\nsleep .75\necho -n -e \"\\r               \"\necho  -e \"\\r(⌐■_■)\"\nsleep .5\necho \"Bash Snippets version $currentVersion\"\necho  \"https://github.com/alexanderepstein/Bash-Snippets\"\n"
        },
        {
          "name": "lyrics",
          "type": "tree",
          "content": null
        },
        {
          "name": "meme",
          "type": "tree",
          "content": null
        },
        {
          "name": "movies",
          "type": "tree",
          "content": null
        },
        {
          "name": "newton",
          "type": "tree",
          "content": null
        },
        {
          "name": "pwned",
          "type": "tree",
          "content": null
        },
        {
          "name": "qrify",
          "type": "tree",
          "content": null
        },
        {
          "name": "short",
          "type": "tree",
          "content": null
        },
        {
          "name": "siteciphers",
          "type": "tree",
          "content": null
        },
        {
          "name": "skeleton",
          "type": "blob",
          "size": 5.7900390625,
          "content": "#!/usr/bin/env bash\n# Author: Alexander Epstein https://github.com/alexanderepstein\ncurrentVersion=\"1.23.0\"\nconfiguredClient=\"\"\n\n## This function determines which http get tool the system has installed and returns an error if there isnt one\ngetConfiguredClient()\n{\n  if  command -v curl &>/dev/null; then\n    configuredClient=\"curl\"\n  elif command -v wget &>/dev/null; then\n    configuredClient=\"wget\"\n  elif command -v http &>/dev/null; then\n    configuredClient=\"httpie\"\n  elif command -v fetch &>/dev/null; then\n    configuredClient=\"fetch\"\n  else\n    echo \"Error: This tool requires either curl, wget, httpie or fetch to be installed.\" >&2\n    return 1\n  fi\n}\n\n# The python and JSON functions can be deleted if the script does not need them\n\n## This function determines which version of python is installed on the machine\ngetConfiguredPython()\n{\n  if command -v python3 &>/dev/null; then\n    configuredPython=\"python3\"\n  elif  command -v python2 &>/dev/null; then\n    configuredPython=\"python2\"\n  elif command -v python &>/dev/null; then\n    configuredPython=\"python\"\n  else\n    echo \"Error: This tool requires python to be installed.\"\n    return 1\n  fi\n}\n\n## Don't alter the python call if it's coming from a Mac\nif [[ $(uname) != \"Darwin\" ]]; then\n  python()\n  {\n    case \"$configuredPython\" in\n      python3) python3 \"$@\" ;;\n      python2) python2 \"$@\" ;;\n      python)  python \"$@\" ;;\n    esac\n  }\nfi\n\n## Grabs an element from a a json string and then echoes it to stdout\n## $1 = the JSON string\n## $n+1 = the elements to be indexed\nAccessJsonElement() {\n  json=\"$1\"\n  shift\n  accessor=\"\"\n  for element in \"$@\"; do\n      accessor=\"${accessor}['$element']\"\n  done\n  echo \"$json\" | python -c \"from __future__ import print_function; import sys, json; print(json.load(sys.stdin)${accessor})\"\n  return \"$?\"\n}\n\n## Allows to call the users configured client without if statements everywhere\nhttpGet()\n{\n  case \"$configuredClient\" in\n    curl)  curl -A curl -s \"$@\" ;;\n    wget)  wget -qO- \"$@\" ;;\n    httpie) http -b GET \"$@\" ;;\n    fetch) fetch -q \"$@\" ;;\n  esac\n}\n\nupdate()\n{\n  # Author: Alexander Epstein https://github.com/alexanderepstein\n  # Update utility version 1.2.0\n  # To test the tool enter in the default values that are in the examples for each variable\n  repositoryName=\"Bash-Snippets\" #Name of repostiory to be updated ex. Sandman-Lite\n  githubUserName=\"alexanderepstein\" #username that hosts the repostiory ex. alexanderepstein\n  nameOfInstallFile=\"install.sh\" # change this if the installer file has a different name be sure to include file extension if there is one\n  latestVersion=$(httpGet https://api.github.com/repos/$githubUserName/$repositoryName/tags | grep -Eo '\"name\":.*?[^\\\\]\",'| head -1 | grep -Eo \"[0-9.]+\" ) #always grabs the tag without the v option\n\n  if [[ $currentVersion == \"\" || $repositoryName == \"\" || $githubUserName == \"\" || $nameOfInstallFile == \"\" ]]; then\n    echo \"Error: update utility has not been configured correctly.\" >&2\n    exit 1\n  elif [[ $latestVersion == \"\" ]]; then\n    echo \"Error: no active internet connection\" >&2\n    exit 1\n  else\n    if [[ \"$latestVersion\" != \"$currentVersion\" ]]; then\n      echo \"Version $latestVersion available\"\n      echo -n \"Do you wish to update $repositoryName [Y/n]: \"\n      read -r answer\n      if [[ \"$answer\" == [Yy] ]]; then\n        cd ~ || { echo 'Update Failed'; exit 1; }\n        if [[ -d  ~/$repositoryName ]]; then rm -r -f $repositoryName || { echo \"Permissions Error: try running the update as sudo\"; exit 1; } ; fi\n        git clone \"https://github.com/$githubUserName/$repositoryName\" || { echo \"Couldn't download latest version\"; exit 1; }\n        cd $repositoryName || { echo 'Update Failed'; exit 1; }\n        git checkout \"v$latestVersion\" 2> /dev/null || git checkout \"$latestVersion\" 2> /dev/null || echo \"Couldn't git checkout to stable release, updating to latest commit.\"\n        chmod a+x install.sh #this might be necessary in your case but wasnt in mine.\n        ./$nameOfInstallFile \"update\" || exit 1\n        cd ..\n        rm -r -f $repositoryName || { echo \"Permissions Error: update succesfull but cannot delete temp files located at ~/$repositoryName delete this directory with sudo\"; exit 1; }\n      else\n        exit 1\n      fi\n    else\n      echo \"$repositoryName is already the latest version\"\n    fi\n  fi\n}\n\ncheckInternet()\n{\n  httpGet github.com > /dev/null 2>&1 || { echo \"Error: no active internet connection\" >&2; return 1; } # query github with a get request\n}\n\nusage()\n{\n  cat <<EOF\nSkeleton\nDescription: Short desciption of the tool.\nUsage: tool [flags] or tool [flags] [arguments]\n  -u  Update Bash-Snippet Tools\n  -h  Show the help\n  -v  Get the tool version\nExamples:\n   tool\n   tool\nEOF\n}\n\n\n\nwhile getopts \"uvh\" opt; do\n  case \"$opt\" in\n    \\?) echo \"Invalid option: -$OPTARG\" >&2\n        exit 1\n        ;;\n    h)  usage\n        exit 0\n        ;;\n    v)  echo \"Version $currentVersion\"\n        exit 0\n        ;;\n    u)  getConfiguredClient || exit 1\n        checkInternet || exit 1\n        update\n        exit 0\n        ;;\n    :)  echo \"Option -$OPTARG requires an argument.\" >&2\n        exit 1\n        ;;\n  esac\ndone\n\n# special set of first arguments that have a specific behavior across tools\nif [[ $# == \"0\" ]]; then\n  usage ## if calling the tool with no flags and args chances are you want to return usage\n  exit 0\nelif [[ $# == \"1\" ]]; then\n  if [[ $1 == \"update\" ]]; then\n    getConfiguredClient || exit 1\n    checkInternet || exit 1\n    update || exit 1\n    exit 0\n  elif [[ $1 == \"help\" ]]; then\n    usage\n    exit 0\n  fi\nfi\n\n## The rest of the conditions and code would go here\n## Make sure to use checkInternet at least once before any time httpGet will be called.\n## Make sure to call getConfiguredClient at least once before ever calling checkInternet.\n## Make sure to call getConfiguredPython at least once before trying to pipeout to python directly or using AccessJsonElement"
        },
        {
          "name": "skeleton.bats",
          "type": "blob",
          "size": 1.9150390625,
          "content": "#!/usr/bin/env bats\n\nexport TOOL_NAME='skeleton'\n\nsetup() {\n  # $REPO_DIR/tests/skeleton.bats\n  REPO_DIR=\"$( cd \"$( dirname \"${BATS_TEST_DIRNAME}\")\" >/dev/null 2>&1 && pwd)\"\n  TOOL_DIR=\"$( cd \"${REPO_DIR}/${TOOL_NAME}\" >/dev/null 2>&1 && pwd)\"\n}\n\n@test \"Testing ${TOOL_NAME} tool\" {\n  echo \"${TOOL_NAME}\"\n}\n\n@test \"Confirm the \\$REPO_DIR variable is evaluated\" {\n  cd \"${REPO_DIR}\" && pwd\n  [[ \"$status\" -eq 0 ]]\n}\n\n@test \"Change into the tool directory for ${TOOL_NAME}\" {\n  cd \"${TOOL_DIR}\" && pwd\n  [[ \"$status\" -eq 0 ]]\n}\n\n@test \"Check for latest version of bash-snippets on update\" {\n  if [[ \"$(uname)\" == \"Linux\" ]]; then\n    run \"${TOOL_DIR}/${TOOL_NAME}\" update\n    [[ \"$status\" -eq 0 ]]\n    [ \"$output\" == \"Bash-Snippets is already the latest version\" ]\n  fi\n}\n\n@test \"The -h option should print usage\" {\n  run \"${TOOL_DIR}/${TOOL_NAME}\" -h\n  [[ \"$status\" -eq 0 ]]\n  # if bash is less than 7 yrs old\n  if ((${BASH_VERSINFO[0]} >= 4)); then\n    [[ \"${lines[0]}\" = \"${TOOL_NAME^}\" ]]\n  else\n    # or im probably a stoneage mac\n    [[ \"$(echo \"${output}\" | grep -i \"${TOOL_NAME}\")\" ]]\n  fi\n}\n\n@test \"No arguments prints usage instructions\" {\n  run \"${TOOL_DIR}/${TOOL_NAME}\"\n  [[ \"$status\" -eq 0 ]]\n  # if bash is less than 7 yrs old\n  if ((${BASH_VERSINFO[0]} >= 4)); then\n    [[ \"${lines[0]}\" = \"${TOOL_NAME^}\" ]]\n  else\n    # or im probably a stoneage mac\n    [[ \"$(echo \"${output}\" | grep -i \"${TOOL_NAME}\")\" ]]\n  fi\n}\n\n@test \"Get the tools version with -v\" {\n  run \"${TOOL_DIR}/${TOOL_NAME}\" -v\n  [[ \"$status\" -eq 0 ]]\n  expected='Version'\n  [[ \"${output}\" =~ \"${expected}\" ]]\n}\n\n\n# Tool specific tests\n@test \"Do that cool thing\" {\n  run \"${TOOL_DIR}/${TOOL_NAME}\" cool\n  [[ \"$status\" -eq 0 ]]\n  expected='This is awesome'\n  [[ \"${output}\" =~ \"${expected}\" ]]\n}\n\n@test \"Testing coolness factor\" {\n  run \"${TOOL_DIR}/${TOOL_NAME}\" cool --even-cooler\n  [[ \"$status\" -eq 0 ]]\n  expected='subzero'\n  [[ \"printf '%s\\n' ${lines[1]}\" =~ \"${expected}\" ]]\n}\n\n"
        },
        {
          "name": "stocks",
          "type": "tree",
          "content": null
        },
        {
          "name": "taste",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "todo",
          "type": "tree",
          "content": null
        },
        {
          "name": "transfer",
          "type": "tree",
          "content": null
        },
        {
          "name": "uninstall.sh",
          "type": "blob",
          "size": 1.560546875,
          "content": "#!/usr/bin/env bash\n# Author: Alexander Epstein https://github.com/alexanderepstein\ndeclare -a tools=(bak2dvd bash-snippets cheat cloudup crypt cryptocurrency currency geo gist lyrics meme movies newton pwned qrify short siteciphers stocks taste todo transfer weather ytview)\nall=\"1\"\n\naskUninstall()\n{\n  if [[ -f /usr/local/bin/$1 ]]; then\n    echo -n \"Do you wish to uninstall $1 [Y/n]: \"\n    read -r answer\n    if [[ \"$answer\" == [Yy] ]]; then\n      echo -n \"Removing $1: \"\n      rm -f /usr/local/bin/\"$1\" > /dev/null 2>&1 || { echo \"Failed\" ; echo \"Error removing file, try running uninstall script as sudo\"; exit 1; }\n      echo \"Success\"\n    else\n      all=\"0\"\n    fi\n    unset answer\n  fi\n}\n\nremoveTool()\n{\n  if [[ -f /usr/local/bin/$1 ]]; then\n    echo -n \"Removing $1: \"\n    rm -f /usr/local/bin/\"$1\" > /dev/null 2>&1 || { echo \"Failed\" ; echo \"Error removing file, try running uninstall script as sudo\"; exit 1; }\n    echo \"Success\"\n  fi\n}\n\nremoveManpage()\n{\n  if [ -f \"/usr/local/man/man1/bash-snippets.1\" ]; then rm -f \"usr/local/man/man1/bash-snippets.1\" || { echo \"Error removing manpage, try running uninstall script as sudo\"; exit 1; } ; fi\n  if [ -f \"/usr/local/share/man/man1/bash-snippets.1\" ]; then rm -f \"/usr/local/share/man/man1/bash-snippets.1\" || { echo \"Error removing manpage, try running uninstall script as sudo\"; exit 1; } ; fi\n}\n\nif [[ $1 != \"all\" ]]; then\n  for tool in \"${tools[@]}\"; do\n    askUninstall \"$tool\" || exit 1\n  done\nelse\n  for tool in \"${tools[@]}\"; do\n    removeTool \"$tool\" || exit 1\n  done\nfi\n\nif [[ $all == \"1\" ]]; then\n  removeManpage || exit 1\nfi\n"
        },
        {
          "name": "weather",
          "type": "tree",
          "content": null
        },
        {
          "name": "ytview",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}