{
  "metadata": {
    "timestamp": 1736568833198,
    "page": 11,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "wulabing/Xray_onekey",
      "stars": 9313,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "MIT License\n\nCopyright (c) 2022 wulabing\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.MD",
          "type": "blob",
          "size": 3.63671875,
          "content": "\n## Xray 基于 Nginx 的 VLESS + XTLS 一键安装脚本 <img src=\"https://raw.githubusercontent.com/wulabing/Xray_onekey/main/image/project_xray.jpg\" alt=\"Project_Xray\" width=\"122\" height=\"30\" align=\"bottom\" />\n\n\n> 感谢 JetBrains 提供的非商业开源软件开发授权！\n\n> Thanks for non-commercial open source development authorization by JetBrains!\n\n## 由于 Nginx 前置导致的嵌套 tls 可能会出现连接阻断 目前更推荐使用 reality ，建议移步到以下地址\nhttps://github.com/wulabing/xray_docker\n\n### Telegram 群组\n* Telegram 交流群：https://t.me/wulabing_v2ray \n* Telegram 更新公告频道：https://t.me/wulabing_channel\n\n### 准备工作\n* 准备一个域名，并将 A 记录添加好；\n* 安装好 `wget`。\n\n### 导入链接规范\nhttps://github.com/XTLS/Xray-core/issues/91\n\n> 截至 2021-2-24 仅有 V2RayN 4.12+ 及 V2RayNG 1.5.8+ 支持链接及二维码导入，其他客户端请手动填入配置信息。\n\n\n### 安装/更新方式（Nginx 前置）\n\n支持配置方式\n\n- VLESS + TCP + TLS + Nginx + WebSocket\n\n```\nwget -N --no-check-certificate -q -O install.sh \"https://raw.githubusercontent.com/wulabing/Xray_onekey/nginx_forward/install.sh\" && chmod +x install.sh && bash install.sh\n```\n\n### 安装/更新方式（Xray 前置）\n\n支持配置方式\n\n- VLESS + TCP + XTLS / TLS  + Nginx\n\n- VLESS + TCP + XTLS / TLS  + Nginx 及 VLESS + TCP + TLS + Nginx + WebSocket 回落并存模式\n\n```\nwget -N --no-check-certificate -q -O install.sh \"https://raw.githubusercontent.com/wulabing/Xray_onekey/main/install.sh\" && chmod +x install.sh && bash install.sh\n```\n\n\n### 注意事项\n* 如果你不了解脚本中各项设置的具体含义，除域名外，请使用脚本提供的默认值；\n* 使用本脚本需要你拥有 Linux 基础及使用经验，了解计算机网络部分知识，计算机基础操作；\n* 目前支持 Debian 9+ / Ubuntu 18.04+ / Centos7+ / Oracle Linux 7+；\n* 群主仅提供极其有限的支持，如有问题可以询问群友。\n\n### 鸣谢\n\n* 本脚本中 README Project_Xray 项目图片由 Blitzcrank Telegram:@Blitz_crank 提供 在此感谢Blitzcrank\n* 本脚本中 MTProxyTLS 基于 https://github.com/sunpma/mtp 二次修改 在此感谢 sunpma；\n* 本脚本中 锐速 4 合 1 脚本原项目引用 https://www.94ish.me/1635.html 在此感谢；\n* 本脚本中 锐速 4 合 1 脚本修改版项目引用 https://github.com/ylx2016/Linux-NetSpeed 在此感谢 ylx2016；\n* 本脚本中 配置文件及部分逻辑参考 https://github.com/jiuqi9997/xray-yes 在此感谢 玖柒；\n* 本脚本中 二维码 API 部分参考 https://github.com/mack-a/v2ray-agent  在此感谢 mack-a。\n\n### 启动方式\n\n启动 Xray：`systemctl start xray`\n\n停止 Xray：`systemctl stop xray`\n\n启动 Nginx：`systemctl start nginx`\n\n停止 Nginx：`systemctl stop nginx`\n\n### 相关目录\n\nWeb 目录：`/www/xray_web`\n\nXray 服务端配置：`/usr/local/etc/xray/config.json`\n\nNginx 目录： `/etc/nginx`\n\n证书文件： `/ssl/xray.key`（私钥）和 `/ssl/xray.crt`（证书公钥）\n\n### 捐赠\n\n您可以使用我的 搬瓦工 AFF 购买 VPS\n\nhttps://bandwagonhost.com/aff.php?aff=63939\n\n您可以使用我的 JustMySocks AFF 购买搬瓦工提供的代理\n\nhttps://justmysocks.net/members/aff.php?aff=17621\n\n您可以使用我的 DMIT AFF 购买 VPS\n\nhttps://www.dmit.io/aff.php?aff=3957\n\n您可以使用我的 Vultr AFF 创建新的 Vultr 账号并使用\n\nhttps://www.vultr.com/?ref=6881279\n\n您可以通过 USDT 支持我，感谢您的支持\nTRC20:TFannfnajNGYsMTuVDcXfZXXPbcaxAEffa\n\n\n## Stargazers over time\n\n[![Stargazers over time](https://starchart.cc/wulabing/Xray_onekey.svg)](https://starchart.cc/wulabing/Xray_onekey)\n\n"
        },
        {
          "name": "README_FA.MD",
          "type": "blob",
          "size": 4.29296875,
          "content": "\n## اسکریپت نصب Xray مبتنی بر Nginx برای ساختار VLESS + XTLS با یک کلیک <img src=\"https://raw.githubusercontent.com/wulabing/Xray_onekey/main/image/project_xray.jpg\" alt=\"Project_Xray\" width=\"122\" height=\"30\" align=\"bottom\" />\n\n\n> با تشکر از JetBrains برای مجوز توسعه نرم افزار منبع باز غیر تجاری!\n\n\n>از مجوز توسعه منبع باز غیر تجاری توسط JetBrains سپاسگزاریم!\n\n### با توجه به احتمال مسدود شدن xtls، پیشنهاد می شود از نسخه پیشین Nginx استفاده کنید \n\n\n### گروه تلگرام\n* گروه ارتباطی تلگرام: https://t.me/wulabing_v2ray \n* کانال اطلاعیه آپدیت تلگرام:https://t.me/wulabing_channel\n\n### آماده سازی\n* یک نام دامنه آماده کنید و رکورد A را اضافه کنید\n\n* نصب کردن wget\n\n### مشخصات لینک وارد کردن\nhttps://github.com/XTLS/Xray-core/issues/91\n\n> As of 2021-2-24, only V2RayN 4.12+ and V2RayNG 1.5.8+ support link and QR code import. For other clients, please fill in the configuration information manually.\n\n\n### روش نصب و بروزرسانی (Nginx front)\n\nپیکربندی قابل پشتیبان\n\n- VLESS + TCP + TLS + Nginx + WebSocket\n\n```\nwget -N --no-check-certificate -q -O install.sh \"https://raw.githubusercontent.com/wulabing/Xray_onekey/nginx_forward/install.sh\" && chmod +x install.sh && bash install.sh\n```\n\n### روش نصب و بروزرسانی (Xray front)\n\nپیکربندی قابل پشتیبانی\n- VLESS + TCP + XTLS / TLS  + Nginx\n\n- VLESS + TCP + XTLS / TLS  + Nginx 及 VLESS + TCP + TLS + Nginx + WebSocket 回落并存模式\n\n```\nwget -N --no-check-certificate -q -O install.sh \"https://raw.githubusercontent.com/wulabing/Xray_onekey/main/install.sh\" && chmod +x install.sh && bash install.sh\n```\n\n\n### موارد احتیاط\n* اگر معنای خاص هر یک از تنظیمات در اسکریپت را نمی‌دانید، به جز نام دامنه، لطفاً از مقدار پیش‌فرض ارائه شده توسط اسکریپت استفاده کنید.\n* برای استفاده از این اسکریپت، باید پایه و تجربه لینوکس، مقداری دانش در مورد شبکه های کامپیوتری و عملیات اولیه کامپیوتر داشته باشید.\n* در حال حاضر از Debian 9+ / Ubuntu 18.04+ / Centos7+ / Oracle Linux 7+ پشتیبانی می کند.\n* مالک گروه فقط پشتیبانی بسیار محدودی را ارائه می دهد، اگر سؤالی دارید، می توانید از اعضای گروه بپرسید.\n\n### با تشکر\n\n* 本脚本中 README Project_Xray 项目图片由 Blitzcrank Telegram:@Blitz_crank 提供 在此感谢Blitzcrank\n* 本脚本中 MTProxyTLS 基于 https://github.com/sunpma/mtp 二次修改 在此感谢 sunpma；\n* 本脚本中 锐速 4 合 1 脚本原项目引用 https://www.94ish.me/1635.html 在此感谢；\n* 本脚本中 锐速 4 合 1 脚本修改版项目引用 https://github.com/ylx2016/Linux-NetSpeed 在此感谢 ylx2016；\n* 本脚本中 配置文件及部分逻辑参考 https://github.com/jiuqi9997/xray-yes 在此感谢 玖柒；\n* 本脚本中 二维码 API 部分参考 https://github.com/mack-a/v2ray-agent  在此感谢 mack-a。\n\n### روش شروع و توقف سرویس\n\nstart Xray：`systemctl start xray`\n\nstop Xray：`systemctl stop xray`\n\nstart Nginx：`systemctl start nginx`\n\nstop Nginx：`systemctl stop nginx`\n\n### قسمت های که پروژه استفاده می کند\n\nWeb دایرکتوری：`/www/xray_web`\n\nXray پیکربندی سرور：`/usr/local/etc/xray/config.json`\n\nNginx دایرکتوری： `/etc/nginx`\n\ncerts： `/ssl/xray.key`（私钥）和 `/ssl/xray.crt`（证书公钥）\n\n### حمایت کردن\n\nبا خرید vps\n\nhttps://bandwagonhost.com/aff.php?aff=63939\n\nبا خرید پروکسی\n\nhttps://justmysocks.net/members/aff.php?aff=17621\n\nبا خرید vps\n\nhttps://www.dmit.io/aff.php?aff=3957\n\nبا ایجاد حساب در vultr\n\nhttps://www.vultr.com/?ref=6881279\n\nحمایت با رمزارز\n\nTRC20:TFannfnajNGYsMTuVDcXfZXXPbcaxAEffa\n\n\n## Stargazers over time\n\n[![Stargazers over time](https://starchart.cc/wulabing/Xray_onekey.svg)](https://starchart.cc/wulabing/Xray_onekey)\n\n"
        },
        {
          "name": "basic",
          "type": "tree",
          "content": null
        },
        {
          "name": "binary",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "image",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 26.828125,
          "content": "#!/usr/bin/env bash\n\n#====================================================\n#\tSystem Request:Debian 9+/Ubuntu 18.04+/Centos 7+\n#\tAuthor:\twulabing\n#\tDscription: Xray onekey Management\n#\temail: admin@wulabing.com\n#====================================================\n\nexport PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nstty erase ^?\n\ncd \"$(\n  cd \"$(dirname \"$0\")\" || exit\n  pwd\n)\" || exit\n\n# 字体颜色配置\nGreen=\"\\033[32m\"\nRed=\"\\033[31m\"\nYellow=\"\\033[33m\"\nBlue=\"\\033[36m\"\nFont=\"\\033[0m\"\nGreenBG=\"\\033[42;37m\"\nRedBG=\"\\033[41;37m\"\nOK=\"${Green}[OK]${Font}\"\nERROR=\"${Red}[ERROR]${Font}\"\n\n# 变量\nshell_version=\"1.3.11\"\ngithub_branch=\"main\"\nxray_conf_dir=\"/usr/local/etc/xray\"\nwebsite_dir=\"/www/xray_web/\"\nxray_access_log=\"/var/log/xray/access.log\"\nxray_error_log=\"/var/log/xray/error.log\"\ncert_dir=\"/usr/local/etc/xray\"\ndomain_tmp_dir=\"/usr/local/etc/xray\"\ncert_group=\"nobody\"\nrandom_num=$((RANDOM % 12 + 4))\n\nVERSION=$(echo \"${VERSION}\" | awk -F \"[()]\" '{print $2}')\nWS_PATH=\"/$(head -n 10 /dev/urandom | md5sum | head -c ${random_num})/\"\n\nfunction shell_mode_check() {\n  if [ -f ${xray_conf_dir}/config.json ]; then\n    if [ \"$(grep -c \"wsSettings\" ${xray_conf_dir}/config.json)\" -ge 1 ]; then\n      shell_mode=\"ws\"\n    else\n      shell_mode=\"tcp\"\n    fi\n  else\n    shell_mode=\"None\"\n  fi\n}\nfunction print_ok() {\n  echo -e \"${OK} ${Blue} $1 ${Font}\"\n}\n\nfunction print_error() {\n  echo -e \"${ERROR} ${RedBG} $1 ${Font}\"\n}\n\nfunction is_root() {\n  if [[ 0 == \"$UID\" ]]; then\n    print_ok \"当前用户是 root 用户，开始安装流程\"\n  else\n    print_error \"当前用户不是 root 用户，请切换到 root 用户后重新执行脚本\"\n    exit 1\n  fi\n}\n\njudge() {\n  if [[ 0 -eq $? ]]; then\n    print_ok \"$1 完成\"\n    sleep 1\n  else\n    print_error \"$1 失败\"\n    exit 1\n  fi\n}\n\nfunction system_check() {\n  source '/etc/os-release'\n\n  if [[ \"${ID}\" == \"centos\" && ${VERSION_ID} -ge 7 ]]; then\n    print_ok \"当前系统为 Centos ${VERSION_ID} ${VERSION}\"\n    INS=\"yum install -y\"\n    ${INS} wget\n    wget -N -P /etc/yum.repos.d/ https://raw.githubusercontent.com/wulabing/Xray_onekey/${github_branch}/basic/nginx.repo\n\n\n  elif [[ \"${ID}\" == \"ol\" ]]; then\n    print_ok \"当前系统为 Oracle Linux ${VERSION_ID} ${VERSION}\"\n    INS=\"yum install -y\"\n    wget -N -P /etc/yum.repos.d/ https://raw.githubusercontent.com/wulabing/Xray_onekey/${github_branch}/basic/nginx.repo\n  elif [[ \"${ID}\" == \"debian\" && ${VERSION_ID} -ge 9 ]]; then\n    print_ok \"当前系统为 Debian ${VERSION_ID} ${VERSION}\"\n    INS=\"apt install -y\"\n    # 清除可能的遗留问题\n    rm -f /etc/apt/sources.list.d/nginx.list\n    # nginx 安装预处理\n    $INS curl gnupg2 ca-certificates lsb-release debian-archive-keyring\n    curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \\\n    | tee /usr/share/keyrings/nginx-archive-keyring.gpg >/dev/null\n    echo \"deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \\\n    http://nginx.org/packages/debian `lsb_release -cs` nginx\" \\\n    | tee /etc/apt/sources.list.d/nginx.list\n    echo -e \"Package: *\\nPin: origin nginx.org\\nPin: release o=nginx\\nPin-Priority: 900\\n\" \\\n    | tee /etc/apt/preferences.d/99nginx\n\n    apt update\n\n  elif [[ \"${ID}\" == \"ubuntu\" && $(echo \"${VERSION_ID}\" | cut -d '.' -f1) -ge 18 ]]; then\n    print_ok \"当前系统为 Ubuntu ${VERSION_ID} ${UBUNTU_CODENAME}\"\n    INS=\"apt install -y\"\n    # 清除可能的遗留问题\n    rm -f /etc/apt/sources.list.d/nginx.list\n    # nginx 安装预处理\n    $INS curl gnupg2 ca-certificates lsb-release ubuntu-keyring\n    curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \\\n    | tee /usr/share/keyrings/nginx-archive-keyring.gpg >/dev/null\n    echo \"deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \\\n    http://nginx.org/packages/ubuntu `lsb_release -cs` nginx\" \\\n    | tee /etc/apt/sources.list.d/nginx.list\n    echo -e \"Package: *\\nPin: origin nginx.org\\nPin: release o=nginx\\nPin-Priority: 900\\n\" \\\n    | tee /etc/apt/preferences.d/99nginx\n\n    apt update\n  else\n    print_error \"当前系统为 ${ID} ${VERSION_ID} 不在支持的系统列表内\"\n    exit 1\n  fi\n\n  if [[ $(grep \"nogroup\" /etc/group) ]]; then\n    cert_group=\"nogroup\"\n  fi\n\n  $INS dbus\n\n  # 关闭各类防火墙\n  systemctl stop firewalld\n  systemctl disable firewalld\n  systemctl stop nftables\n  systemctl disable nftables\n  systemctl stop ufw\n  systemctl disable ufw\n}\n\nfunction nginx_install() {\n  if ! command -v nginx >/dev/null 2>&1; then\n    ${INS} nginx\n    judge \"Nginx 安装\"\n  else\n    print_ok \"Nginx 已存在\"\n  fi\n  # 遗留问题处理\n  mkdir -p /etc/nginx/conf.d >/dev/null 2>&1\n}\nfunction dependency_install() {\n  ${INS} lsof tar\n  judge \"安装 lsof tar\"\n\n  if [[ \"${ID}\" == \"centos\" || \"${ID}\" == \"ol\" ]]; then\n    ${INS} crontabs\n  else\n    ${INS} cron\n  fi\n  judge \"安装 crontab\"\n\n  if [[ \"${ID}\" == \"centos\" || \"${ID}\" == \"ol\" ]]; then\n    touch /var/spool/cron/root && chmod 600 /var/spool/cron/root\n    systemctl start crond && systemctl enable crond\n  else\n    touch /var/spool/cron/crontabs/root && chmod 600 /var/spool/cron/crontabs/root\n    systemctl start cron && systemctl enable cron\n\n  fi\n  judge \"crontab 自启动配置 \"\n\n  ${INS} unzip\n  judge \"安装 unzip\"\n\n  ${INS} curl\n  judge \"安装 curl\"\n\n  # upgrade systemd\n  ${INS} systemd\n  judge \"安装/升级 systemd\"\n\n  # Nginx 后置 无需编译 不再需要\n  #  if [[ \"${ID}\" == \"centos\" ||  \"${ID}\" == \"ol\" ]]; then\n  #    yum -y groupinstall \"Development tools\"\n  #  else\n  #    ${INS} build-essential\n  #  fi\n  #  judge \"编译工具包 安装\"\n\n  if [[ \"${ID}\" == \"centos\" ]]; then\n    ${INS} pcre pcre-devel zlib-devel epel-release openssl openssl-devel\n  elif [[ \"${ID}\" == \"ol\" ]]; then\n    ${INS} pcre pcre-devel zlib-devel openssl openssl-devel\n    # Oracle Linux 不同日期版本的 VERSION_ID 比较乱 直接暴力处理。如出现问题或有更好的方案，请提交 Issue。\n    yum-config-manager --enable ol7_developer_EPEL >/dev/null 2>&1\n    yum-config-manager --enable ol8_developer_EPEL >/dev/null 2>&1\n  else\n    ${INS} libpcre3 libpcre3-dev zlib1g-dev openssl libssl-dev\n  fi\n\n  ${INS} jq\n\n  if ! command -v jq; then\n    wget -P /usr/bin https://raw.githubusercontent.com/wulabing/Xray_onekey/${github_branch}/binary/jq && chmod +x /usr/bin/jq\n    judge \"安装 jq\"\n  fi\n\n  # 防止部分系统xray的默认bin目录缺失\n  mkdir /usr/local/bin >/dev/null 2>&1\n}\n\nfunction basic_optimization() {\n  # 最大文件打开数\n  sed -i '/^\\*\\ *soft\\ *nofile\\ *[[:digit:]]*/d' /etc/security/limits.conf\n  sed -i '/^\\*\\ *hard\\ *nofile\\ *[[:digit:]]*/d' /etc/security/limits.conf\n  echo '* soft nofile 65536' >>/etc/security/limits.conf\n  echo '* hard nofile 65536' >>/etc/security/limits.conf\n\n  # RedHat 系发行版关闭 SELinux\n  if [[ \"${ID}\" == \"centos\" || \"${ID}\" == \"ol\" ]]; then\n    sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config\n    setenforce 0\n  fi\n}\n\nfunction domain_check() {\n  read -rp \"请输入你的域名信息(eg: www.wulabing.com):\" domain\n  domain_ip=$(curl -sm8 ipget.net/?ip=\"${domain}\")\n  print_ok \"正在获取 IP 地址信息，请耐心等待\"\n  wgcfv4_status=$(curl -s4m8 https://www.cloudflare.com/cdn-cgi/trace -k | grep warp | cut -d= -f2)\n  wgcfv6_status=$(curl -s6m8 https://www.cloudflare.com/cdn-cgi/trace -k | grep warp | cut -d= -f2)\n  if [[ ${wgcfv4_status} =~ \"on\"|\"plus\" ]] || [[ ${wgcfv6_status} =~ \"on\"|\"plus\" ]]; then\n    # 关闭wgcf-warp，以防误判VPS IP情况\n    wg-quick down wgcf >/dev/null 2>&1\n    print_ok \"已关闭 wgcf-warp\"\n  fi\n  local_ipv4=$(curl -4 ip.sb)\n  local_ipv6=$(curl -6 ip.sb)\n  if [[ -z ${local_ipv4} && -n ${local_ipv6} ]]; then\n    # 纯IPv6 VPS，自动添加DNS64服务器以备acme.sh申请证书使用\n    echo -e nameserver 2a01:4f8:c2c:123f::1 > /etc/resolv.conf\n    print_ok \"识别为 IPv6 Only 的 VPS，自动添加 DNS64 服务器\"\n  fi\n  echo -e \"域名通过 DNS 解析的 IP 地址：${domain_ip}\"\n  echo -e \"本机公网 IPv4 地址： ${local_ipv4}\"\n  echo -e \"本机公网 IPv6 地址： ${local_ipv6}\"\n  sleep 2\n  if [[ ${domain_ip} == \"${local_ipv4}\" ]]; then\n    print_ok \"域名通过 DNS 解析的 IP 地址与 本机 IPv4 地址匹配\"\n    sleep 2\n  elif [[ ${domain_ip} == \"${local_ipv6}\" ]]; then\n    print_ok \"域名通过 DNS 解析的 IP 地址与 本机 IPv6 地址匹配\"\n    sleep 2\n  else\n    print_error \"请确保域名添加了正确的 A / AAAA 记录，否则将无法正常使用 xray\"\n    print_error \"域名通过 DNS 解析的 IP 地址与 本机 IPv4 / IPv6 地址不匹配，是否继续安装？（y/n）\" && read -r install\n    case $install in\n    [yY][eE][sS] | [yY])\n      print_ok \"继续安装\"\n      sleep 2\n      ;;\n    *)\n      print_error \"安装终止\"\n      exit 2\n      ;;\n    esac\n  fi\n}\n\nfunction port_exist_check() {\n  if [[ 0 -eq $(lsof -i:\"$1\" | grep -i -c \"listen\") ]]; then\n    print_ok \"$1 端口未被占用\"\n    sleep 1\n  else\n    print_error \"检测到 $1 端口被占用，以下为 $1 端口占用信息\"\n    lsof -i:\"$1\"\n    print_error \"5s 后将尝试自动 kill 占用进程\"\n    sleep 5\n    lsof -i:\"$1\" | awk '{print $2}' | grep -v \"PID\" | xargs kill -9\n    print_ok \"kill 完成\"\n    sleep 1\n  fi\n}\nfunction update_sh() {\n  ol_version=$(curl -L -s https://raw.githubusercontent.com/wulabing/Xray_onekey/${github_branch}/install.sh | grep \"shell_version=\" | head -1 | awk -F '=|\"' '{print $3}')\n  if [[ \"$shell_version\" != \"$(echo -e \"$shell_version\\n$ol_version\" | sort -rV | head -1)\" ]]; then\n    print_ok \"存在新版本，是否更新 [Y/N]?\"\n    read -r update_confirm\n    case $update_confirm in\n    [yY][eE][sS] | [yY])\n      wget -N --no-check-certificate https://raw.githubusercontent.com/wulabing/Xray_onekey/${github_branch}/install.sh\n      print_ok \"更新完成\"\n      print_ok \"您可以通过 bash $0 执行本程序\"\n      exit 0\n      ;;\n    *) ;;\n    esac\n  else\n    print_ok \"当前版本为最新版本\"\n    print_ok \"您可以通过 bash $0 执行本程序\"\n  fi\n}\n\nfunction xray_tmp_config_file_check_and_use() {\n  if [[ -s ${xray_conf_dir}/config_tmp.json ]]; then\n    mv -f ${xray_conf_dir}/config_tmp.json ${xray_conf_dir}/config.json\n  else\n    print_error \"xray 配置文件修改异常\"\n  fi\n}\n\nfunction modify_UUID() {\n  [ -z \"$UUID\" ] && UUID=$(cat /proc/sys/kernel/random/uuid)\n  cat ${xray_conf_dir}/config.json | jq 'setpath([\"inbounds\",0,\"settings\",\"clients\",0,\"id\"];\"'${UUID}'\")' >${xray_conf_dir}/config_tmp.json\n  xray_tmp_config_file_check_and_use\n  judge \"Xray TCP UUID 修改\"\n}\n\nfunction modify_UUID_ws() {\n  cat ${xray_conf_dir}/config.json | jq 'setpath([\"inbounds\",1,\"settings\",\"clients\",0,\"id\"];\"'${UUID}'\")' >${xray_conf_dir}/config_tmp.json\n  xray_tmp_config_file_check_and_use\n  judge \"Xray ws UUID 修改\"\n}\n\nfunction modify_fallback_ws() {\n  cat ${xray_conf_dir}/config.json | jq 'setpath([\"inbounds\",0,\"settings\",\"fallbacks\",2,\"path\"];\"'${WS_PATH}'\")' >${xray_conf_dir}/config_tmp.json\n  xray_tmp_config_file_check_and_use\n  judge \"Xray fallback_ws 修改\"\n}\n\nfunction modify_ws() {\n  cat ${xray_conf_dir}/config.json | jq 'setpath([\"inbounds\",1,\"streamSettings\",\"wsSettings\",\"path\"];\"'${WS_PATH}'\")' >${xray_conf_dir}/config_tmp.json\n  xray_tmp_config_file_check_and_use\n  judge \"Xray ws 修改\"\n}\n\nfunction configure_nginx() {\n  nginx_conf=\"/etc/nginx/conf.d/${domain}.conf\"\n  cd /etc/nginx/conf.d/ && rm -f ${domain}.conf && wget -O ${domain}.conf https://raw.githubusercontent.com/wulabing/Xray_onekey/${github_branch}/config/web.conf\n  sed -i \"s/xxx/${domain}/g\" ${nginx_conf}\n  judge \"Nginx 配置 修改\"\n  \n  systemctl enable nginx\n  systemctl restart nginx\n}\n\nfunction modify_port() {\n  read -rp \"请输入端口号(默认：443)：\" PORT\n  [ -z \"$PORT\" ] && PORT=\"443\"\n  if [[ $PORT -le 0 ]] || [[ $PORT -gt 65535 ]]; then\n    print_error \"请输入 0-65535 之间的值\"\n    exit 1\n  fi\n  port_exist_check $PORT\n  cat ${xray_conf_dir}/config.json | jq 'setpath([\"inbounds\",0,\"port\"];'${PORT}')' >${xray_conf_dir}/config_tmp.json\n  xray_tmp_config_file_check_and_use\n  judge \"Xray 端口 修改\"\n}\n\nfunction configure_xray() {\n  cd /usr/local/etc/xray && rm -f config.json && wget -O config.json https://raw.githubusercontent.com/wulabing/Xray_onekey/${github_branch}/config/xray_xtls-rprx-vision.json\n  modify_UUID\n  modify_port\n}\n\nfunction configure_xray_ws() {\n  cd /usr/local/etc/xray && rm -f config.json && wget -O config.json https://raw.githubusercontent.com/wulabing/Xray_onekey/${github_branch}/config/xray_tls_ws_mix-rprx-vision.json\n  modify_UUID\n  modify_UUID_ws\n  modify_port\n  modify_fallback_ws\n  modify_ws\n}\n\nfunction xray_install() {\n  print_ok \"安装 Xray\"\n  curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh | bash -s -- install\n  judge \"Xray 安装\"\n\n  # 用于生成 Xray 的导入链接\n  echo $domain >$domain_tmp_dir/domain\n  judge \"域名记录\"\n}\n\nfunction ssl_install() {\n  #  使用 Nginx 配合签发 无需安装相关依赖\n  #  if [[ \"${ID}\" == \"centos\" ||  \"${ID}\" == \"ol\" ]]; then\n  #    ${INS} socat nc\n  #  else\n  #    ${INS} socat netcat\n  #  fi\n  #  judge \"安装 SSL 证书生成脚本依赖\"\n\n  curl -L https://get.acme.sh | bash\n  judge \"安装 SSL 证书生成脚本\"\n}\n\nfunction acme() {\n  \"$HOME\"/.acme.sh/acme.sh --set-default-ca --server letsencrypt\n\n  sed -i \"6s/^/#/\" \"$nginx_conf\"\n  sed -i \"6a\\\\\\troot $website_dir;\" \"$nginx_conf\"\n  systemctl restart nginx\n\n  if \"$HOME\"/.acme.sh/acme.sh --issue --insecure -d \"${domain}\" --webroot \"$website_dir\" -k ec-256 --force; then\n    print_ok \"SSL 证书生成成功\"\n    sleep 2\n    if \"$HOME\"/.acme.sh/acme.sh --installcert -d \"${domain}\" --fullchainpath /ssl/xray.crt --keypath /ssl/xray.key --reloadcmd \"systemctl restart xray\" --ecc --force; then\n      print_ok \"SSL 证书配置成功\"\n      sleep 2\n      if [[ -n $(type -P wgcf) && -n $(type -P wg-quick) ]]; then\n        wg-quick up wgcf >/dev/null 2>&1\n        print_ok \"已启动 wgcf-warp\"\n      fi\n    fi\n  elif \"$HOME\"/.acme.sh/acme.sh --issue --insecure -d \"${domain}\" --webroot \"$website_dir\" -k ec-256 --force --listen-v6; then\n    print_ok \"SSL 证书生成成功\"\n    sleep 2\n    if \"$HOME\"/.acme.sh/acme.sh --installcert -d \"${domain}\" --fullchainpath /ssl/xray.crt --keypath /ssl/xray.key --reloadcmd \"systemctl restart xray\" --ecc --force; then\n      print_ok \"SSL 证书配置成功\"\n      sleep 2\n      if [[ -n $(type -P wgcf) && -n $(type -P wg-quick) ]]; then\n        wg-quick up wgcf >/dev/null 2>&1\n        print_ok \"已启动 wgcf-warp\"\n      fi\n    fi\n  else\n    print_error \"SSL 证书生成失败\"\n    rm -rf \"$HOME/.acme.sh/${domain}_ecc\"\n    if [[ -n $(type -P wgcf) && -n $(type -P wg-quick) ]]; then\n      wg-quick up wgcf >/dev/null 2>&1\n      print_ok \"已启动 wgcf-warp\"\n    fi\n    exit 1\n  fi\n\n  sed -i \"7d\" \"$nginx_conf\"\n  sed -i \"6s/#//\" \"$nginx_conf\"\n}\n\nfunction ssl_judge_and_install() {\n\n  mkdir -p /ssl >/dev/null 2>&1\n  if [[ -f \"/ssl/xray.key\" || -f \"/ssl/xray.crt\" ]]; then\n    print_ok \"/ssl 目录下证书文件已存在\"\n    print_ok \"是否删除 /ssl 目录下的证书文件 [Y/N]?\"\n    read -r ssl_delete\n    case $ssl_delete in\n    [yY][eE][sS] | [yY])\n      rm -rf /ssl/*\n      print_ok \"已删除\"\n      ;;\n    *) ;;\n\n    esac\n  fi\n\n  if [[ -f \"/ssl/xray.key\" || -f \"/ssl/xray.crt\" ]]; then\n    echo \"证书文件已存在\"\n  elif [[ -f \"$HOME/.acme.sh/${domain}_ecc/${domain}.key\" && -f \"$HOME/.acme.sh/${domain}_ecc/${domain}.cer\" ]]; then\n    echo \"证书文件已存在\"\n    \"$HOME\"/.acme.sh/acme.sh --installcert -d \"${domain}\" --fullchainpath /ssl/xray.crt --keypath /ssl/xray.key --ecc\n    judge \"证书启用\"\n  else\n    mkdir /ssl\n    cp -a $cert_dir/self_signed_cert.pem /ssl/xray.crt\n    cp -a $cert_dir/self_signed_key.pem /ssl/xray.key\n    ssl_install\n    acme\n  fi\n\n  # Xray 默认以 nobody 用户运行，证书权限适配\n  chown -R nobody.$cert_group /ssl/*\n}\n\nfunction generate_certificate() {\n  if [[ -z ${local_ipv4} && -n ${local_ipv6} ]]; then\n    signedcert=$(xray tls cert -domain=\"$local_ipv6\" -name=\"$local_ipv6\" -org=\"$local_ipv6\" -expire=87600h)\n  else\n    signedcert=$(xray tls cert -domain=\"$local_ipv4\" -name=\"$local_ipv4\" -org=\"$local_ipv4\" -expire=87600h)\n  fi\n  echo $signedcert | jq '.certificate[]' | sed 's/\\\"//g' | tee $cert_dir/self_signed_cert.pem\n  echo $signedcert | jq '.key[]' | sed 's/\\\"//g' >$cert_dir/self_signed_key.pem\n  openssl x509 -in $cert_dir/self_signed_cert.pem -noout || (print_error \"生成自签名证书失败\" && exit 1)\n  print_ok \"生成自签名证书成功\"\n  chown nobody.$cert_group $cert_dir/self_signed_cert.pem\n  chown nobody.$cert_group $cert_dir/self_signed_key.pem\n}\n\nfunction configure_web() {\n  rm -rf /www/xray_web\n  mkdir -p /www/xray_web\n  print_ok \"是否配置伪装网页？[Y/N]\"\n  read -r webpage\n  case $webpage in\n  [yY][eE][sS] | [yY])\n    wget -O web.tar.gz https://raw.githubusercontent.com/wulabing/Xray_onekey/main/basic/web.tar.gz\n    tar xzf web.tar.gz -C /www/xray_web\n    judge \"站点伪装\"\n    rm -f web.tar.gz\n    ;;\n  *) ;;\n  esac\n}\n\nfunction xray_uninstall() {\n  curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh | bash -s -- remove --purge\n  rm -rf $website_dir\n  print_ok \"是否卸载nginx [Y/N]?\"\n  read -r uninstall_nginx\n  case $uninstall_nginx in\n  [yY][eE][sS] | [yY])\n    if [[ \"${ID}\" == \"centos\" || \"${ID}\" == \"ol\" ]]; then\n      yum remove nginx -y\n    else\n      apt purge nginx -y\n    fi\n    ;;\n  *) ;;\n  esac\n  print_ok \"是否卸载acme.sh [Y/N]?\"\n  read -r uninstall_acme\n  case $uninstall_acme in\n  [yY][eE][sS] | [yY])\n    \"$HOME\"/.acme.sh/acme.sh --uninstall\n    rm -rf /root/.acme.sh\n    rm -rf /ssl/\n    ;;\n  *) ;;\n  esac\n  print_ok \"卸载完成\"\n  exit 0\n}\n\nfunction restart_all() {\n  systemctl restart nginx\n  judge \"Nginx 启动\"\n  systemctl restart xray\n  judge \"Xray 启动\"\n}\n\nfunction vless_xtls-rprx-vision_link() {\n  UUID=$(cat ${xray_conf_dir}/config.json | jq .inbounds[0].settings.clients[0].id | tr -d '\"')\n  PORT=$(cat ${xray_conf_dir}/config.json | jq .inbounds[0].port)\n  FLOW=$(cat ${xray_conf_dir}/config.json | jq .inbounds[0].settings.clients[0].flow | tr -d '\"')\n  DOMAIN=$(cat ${domain_tmp_dir}/domain)\n\n  print_ok \"URL 链接 (VLESS + TCP + TLS)\"\n  print_ok \"vless://$UUID@$DOMAIN:$PORT?security=tls&flow=$FLOW#TLS_wulabing-$DOMAIN\"\n\n  print_ok \"URL 链接 (VLESS + TCP + XTLS)\"\n  print_ok \"vless://$UUID@$DOMAIN:$PORT?security=xtls&flow=$FLOW#XTLS_wulabing-$DOMAIN\"\n  print_ok \"-------------------------------------------------\"\n  print_ok \"URL 二维码 (VLESS + TCP + TLS) （请在浏览器中访问）\"\n  print_ok \"https://api.qrserver.com/v1/create-qr-code/?size=400x400&data=vless://$UUID@$DOMAIN:$PORT?security=tls%26flow=$FLOW%23TLS_wulabing-$DOMAIN\"\n\n  print_ok \"URL 二维码 (VLESS + TCP + XTLS) （请在浏览器中访问）\"\n  print_ok \"https://api.qrserver.com/v1/create-qr-code/?size=400x400&data=vless://$UUID@$DOMAIN:$PORT?security=xtls%26flow=$FLOW%23XTLS_wulabing-$DOMAIN\"\n}\n\nfunction vless_xtls-rprx-vision_information() {\n  UUID=$(cat ${xray_conf_dir}/config.json | jq .inbounds[0].settings.clients[0].id | tr -d '\"')\n  PORT=$(cat ${xray_conf_dir}/config.json | jq .inbounds[0].port)\n  FLOW=$(cat ${xray_conf_dir}/config.json | jq .inbounds[0].settings.clients[0].flow | tr -d '\"')\n  DOMAIN=$(cat ${domain_tmp_dir}/domain)\n\n  echo -e \"${Red} Xray 配置信息 ${Font}\"\n  echo -e \"${Red} 地址（address）:${Font}  $DOMAIN\"\n  echo -e \"${Red} 端口（port）：${Font}  $PORT\"\n  echo -e \"${Red} 用户 ID（UUID）：${Font} $UUID\"\n  echo -e \"${Red} 流控（flow）：${Font} $FLOW\"\n  echo -e \"${Red} 加密方式（security）：${Font} none \"\n  echo -e \"${Red} 传输协议（network）：${Font} tcp \"\n  echo -e \"${Red} 伪装类型（type）：${Font} none \"\n  echo -e \"${Red} 底层传输安全：${Font} xtls 或 tls\"\n}\n\nfunction ws_information() {\n  UUID=$(cat ${xray_conf_dir}/config.json | jq .inbounds[0].settings.clients[0].id | tr -d '\"')\n  PORT=$(cat ${xray_conf_dir}/config.json | jq .inbounds[0].port)\n  FLOW=$(cat ${xray_conf_dir}/config.json | jq .inbounds[0].settings.clients[0].flow | tr -d '\"')\n  WS_PATH=$(cat ${xray_conf_dir}/config.json | jq .inbounds[0].settings.fallbacks[2].path | tr -d '\"')\n  DOMAIN=$(cat ${domain_tmp_dir}/domain)\n\n  echo -e \"${Red} Xray 配置信息 ${Font}\"\n  echo -e \"${Red} 地址（address）:${Font}  $DOMAIN\"\n  echo -e \"${Red} 端口（port）：${Font}  $PORT\"\n  echo -e \"${Red} 用户 ID（UUID）：${Font} $UUID\"\n  echo -e \"${Red} 加密方式（security）：${Font} none \"\n  echo -e \"${Red} 传输协议（network）：${Font} ws \"\n  echo -e \"${Red} 伪装类型（type）：${Font} none \"\n  echo -e \"${Red} 路径（path）：${Font} $WS_PATH \"\n  echo -e \"${Red} 底层传输安全：${Font} tls \"\n}\n\nfunction ws_link() {\n  UUID=$(cat ${xray_conf_dir}/config.json | jq .inbounds[0].settings.clients[0].id | tr -d '\"')\n  PORT=$(cat ${xray_conf_dir}/config.json | jq .inbounds[0].port)\n  FLOW=$(cat ${xray_conf_dir}/config.json | jq .inbounds[0].settings.clients[0].flow | tr -d '\"')\n  WS_PATH=$(cat ${xray_conf_dir}/config.json | jq .inbounds[0].settings.fallbacks[2].path | tr -d '\"')\n  WS_PATH_WITHOUT_SLASH=$(echo $WS_PATH | tr -d '/')\n  DOMAIN=$(cat ${domain_tmp_dir}/domain)\n\n  print_ok \"URL 链接 (VLESS + TCP + TLS)\"\n  print_ok \"vless://$UUID@$DOMAIN:$PORT?security=tls#TLS_wulabing-$DOMAIN\"\n\n  print_ok \"URL 链接 (VLESS + TCP + XTLS)\"\n  print_ok \"vless://$UUID@$DOMAIN:$PORT?security=xtls&flow=$FLOW#XTLS_wulabing-$DOMAIN\"\n\n  print_ok \"URL 链接 (VLESS + WebSocket + TLS)\"\n  print_ok \"vless://$UUID@$DOMAIN:$PORT?type=ws&security=tls&path=%2f${WS_PATH_WITHOUT_SLASH}%2f#WS_TLS_wulabing-$DOMAIN\"\n  print_ok \"-------------------------------------------------\"\n  print_ok \"URL 二维码 (VLESS + TCP + TLS) （请在浏览器中访问）\"\n  print_ok \"https://api.qrserver.com/v1/create-qr-code/?size=400x400&data=vless://$UUID@$DOMAIN:$PORT?security=tls%23TLS_wulabing-$DOMAIN\"\n\n  print_ok \"URL 二维码 (VLESS + TCP + XTLS) （请在浏览器中访问）\"\n  print_ok \"https://api.qrserver.com/v1/create-qr-code/?size=400x400&data=vless://$UUID@$DOMAIN:$PORT?security=xtls%26flow=$FLOW%23XTLS_wulabing-$DOMAIN\"\n\n  print_ok \"URL 二维码 (VLESS + WebSocket + TLS) （请在浏览器中访问）\"\n  print_ok \"https://api.qrserver.com/v1/create-qr-code/?size=400x400&data=vless://$UUID@$DOMAIN:$PORT?type=ws%26security=tls%26path=%2f${WS_PATH_WITHOUT_SLASH}%2f%23WS_TLS_wulabing-$DOMAIN\"\n}\n\nfunction basic_information() {\n  print_ok \"VLESS+TCP+XTLS+Nginx 安装成功\"\n  vless_xtls-rprx-vision_information\n  vless_xtls-rprx-vision_link\n}\n\nfunction basic_ws_information() {\n  print_ok \"VLESS+TCP+TLS+Nginx with WebSocket 混合模式 安装成功\"\n  ws_information\n  print_ok \"————————————————————————\"\n  vless_xtls-rprx-vision_information\n  ws_link\n}\n\nfunction show_access_log() {\n  [ -f ${xray_access_log} ] && tail -f ${xray_access_log} || echo -e \"${RedBG}log 文件不存在${Font}\"\n}\n\nfunction show_error_log() {\n  [ -f ${xray_error_log} ] && tail -f ${xray_error_log} || echo -e \"${RedBG}log 文件不存在${Font}\"\n}\n\nfunction bbr_boost_sh() {\n  [ -f \"tcp.sh\" ] && rm -rf ./tcp.sh\n  wget -N --no-check-certificate \"https://raw.githubusercontent.com/ylx2016/Linux-NetSpeed/master/tcp.sh\" && chmod +x tcp.sh && ./tcp.sh\n}\n\nfunction mtproxy_sh() {\n  wget -N --no-check-certificate \"https://github.com/wulabing/mtp/raw/master/mtproxy.sh\" && chmod +x mtproxy.sh && bash mtproxy.sh\n}\n\nfunction install_xray() {\n  is_root\n  system_check\n  dependency_install\n  basic_optimization\n  domain_check\n  port_exist_check 80\n  xray_install\n  configure_xray\n  nginx_install\n  configure_nginx\n  configure_web\n  generate_certificate\n  ssl_judge_and_install\n  restart_all\n  basic_information\n}\nfunction install_xray_ws() {\n  is_root\n  system_check\n  dependency_install\n  basic_optimization\n  domain_check\n  port_exist_check 80\n  xray_install\n  configure_xray_ws\n  nginx_install\n  configure_nginx\n  configure_web\n  generate_certificate\n  ssl_judge_and_install\n  restart_all\n  basic_ws_information\n}\nmenu() {\n  update_sh\n  shell_mode_check\n  echo -e \"\\t Xray 安装管理脚本 ${Red}[${shell_version}]${Font}\"\n  echo -e \"\\t---authored by wulabing---\"\n  echo -e \"\\thttps://github.com/wulabing\\n\"\n\n  echo -e \"当前已安装版本：${shell_mode}\"\n  echo -e \"—————————————— 安装向导 ——————————————\"\"\"\n  echo -e \"${Green}0.${Font}  升级 脚本\"\n  echo -e \"${Green}1.${Font}  安装 Xray (VLESS + TCP + XTLS / TLS + Nginx)\"\n  echo -e \"${Green}2.${Font}  安装 Xray (VLESS + TCP + XTLS / TLS + Nginx 及 VLESS + TCP + TLS + Nginx + WebSocket 回落并存模式)\"\n  echo -e \"—————————————— 配置变更 ——————————————\"\n  echo -e \"${Green}11.${Font} 变更 UUID\"\n  echo -e \"${Green}13.${Font} 变更 连接端口\"\n  echo -e \"${Green}14.${Font} 变更 WebSocket PATH\"\n  echo -e \"—————————————— 查看信息 ——————————————\"\n  echo -e \"${Green}21.${Font} 查看 实时访问日志\"\n  echo -e \"${Green}22.${Font} 查看 实时错误日志\"\n  echo -e \"${Green}23.${Font} 查看 Xray 配置链接\"\n  #    echo -e \"${Green}23.${Font}  查看 V2Ray 配置信息\"\n  echo -e \"—————————————— 其他选项 ——————————————\"\n  echo -e \"${Green}31.${Font} 安装 4 合 1 BBR、锐速安装脚本\"\n  echo -e \"${Yellow}32.${Font} 安装 MTproxy （不推荐使用,请相关用户关闭或卸载）\"\n  echo -e \"${Green}33.${Font} 卸载 Xray\"\n  echo -e \"${Green}34.${Font} 更新 Xray-core\"\n  echo -e \"${Green}35.${Font} 安装 Xray-core 测试版 (Pre)\"\n  echo -e \"${Green}36.${Font} 手动更新 SSL 证书\"\n  echo -e \"${Green}40.${Font} 退出\"\n  read -rp \"请输入数字：\" menu_num\n  case $menu_num in\n  0)\n    update_sh\n    ;;\n  1)\n    install_xray\n    ;;\n  2)\n    install_xray_ws\n    ;;\n  11)\n    read -rp \"请输入 UUID:\" UUID\n    if [[ ${shell_mode} == \"tcp\" ]]; then\n      modify_UUID\n    elif [[ ${shell_mode} == \"ws\" ]]; then\n      modify_UUID\n      modify_UUID_ws\n    fi\n    restart_all\n    ;;\n  13)\n    modify_port\n    restart_all\n    ;;\n  14)\n    if [[ ${shell_mode} == \"ws\" ]]; then\n      read -rp \"请输入路径(示例：/wulabing/ 要求两侧都包含 /):\" WS_PATH\n      modify_fallback_ws\n      modify_ws\n      restart_all\n    else\n      print_error \"当前模式不是 Websocket 模式\"\n    fi\n    ;;\n  21)\n    tail -f $xray_access_log\n    ;;\n  22)\n    tail -f $xray_error_log\n    ;;\n  23)\n    if [[ -f $xray_conf_dir/config.json ]]; then\n      if [[ ${shell_mode} == \"tcp\" ]]; then\n        basic_information\n      elif [[ ${shell_mode} == \"ws\" ]]; then\n        basic_ws_information\n      fi\n    else\n      print_error \"xray 配置文件不存在\"\n    fi\n    ;;\n  31)\n    bbr_boost_sh\n    ;;\n  32)\n    mtproxy_sh\n    ;;\n  33)\n    source '/etc/os-release'\n    xray_uninstall\n    ;;\n  34)\n    bash -c \"$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)\" - install\n    restart_all\n    ;;\n  35)\n    bash -c \"$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)\" - install --beta\n    restart_all\n    ;;\n  36)\n    \"/root/.acme.sh\"/acme.sh --cron --home \"/root/.acme.sh\"\n    restart_all\n    ;;\n  40)\n    exit 0\n    ;;\n  *)\n    print_error \"请输入正确的数字\"\n    ;;\n  esac\n}\nmenu \"$@\"\n"
        },
        {
          "name": "ss_whitelist",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}