{
  "metadata": {
    "timestamp": 1736568848000,
    "page": 33,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ashishb/android-security-awesome",
      "stars": 8324,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0576171875,
          "content": "Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.16796875,
          "content": "lint:\n\tmdl -r ~MD013,~MD029,~MD033 README.md\n\ntest:\n\t# Some URLs could be flaky, try twice in case the first execution fails.\n\t./run_awesome_bot.sh || ./run_awesome_bot.sh\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 25.501953125,
          "content": "# android-security-awesome ![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)\n\n[![Link Liveness Checker](https://github.com/ashishb/android-security-awesome/actions/workflows/validate-links.yml/badge.svg)](https://github.com/ashishb/android-security-awesome/actions/workflows/validate-links.yml)\n\n[![Lint Shell scripts](https://github.com/ashishb/android-security-awesome/actions/workflows/lint-shell-script.yaml/badge.svg)](https://github.com/ashishb/android-security-awesome/actions/workflows/lint-shell-script.yaml)\n[![Lint Markdown](https://github.com/ashishb/android-security-awesome/actions/workflows/lint-markdown.yaml/badge.svg)](https://github.com/ashishb/android-security-awesome/actions/workflows/lint-markdown.yaml)\n[![Lint YAML](https://github.com/ashishb/android-security-awesome/actions/workflows/lint-yaml.yaml/badge.svg)](https://github.com/ashishb/android-security-awesome/actions/workflows/lint-yaml.yaml)\n[![Lint GitHub Actions](https://github.com/ashishb/android-security-awesome/actions/workflows/lint-github-actions.yaml/badge.svg)](https://github.com/ashishb/android-security-awesome/actions/workflows/lint-github-actions.yaml)\n\nA collection of Android security-related resources.\n\n1. [Tools](#tools)\n1. [Academic/Research/Publications/Books](#academic)\n1. [Exploits/Vulnerabilities/Bugs](#exploits)\n\n## Tools\n\n### Online Analyzers\n\n1. [AndroTotal](http://andrototal.org/)\n1. [Appknox](https://www.appknox.com/) - not free\n1. [Virustotal](https://www.virustotal.com/) - max 128MB\n1. [Fraunhofer App-ray](http://app-ray.co/) - not free\n1. [NowSecure Lab Automated](https://www.nowsecure.com/blog/2016/09/19/announcing-nowsecure-lab-automated/) - Enterprise tool for mobile app security testing both Android and iOS mobile apps. Lab Automated features dynamic and static analysis on real devices in the cloud to return results in minutes. Not free\n1. [App Detonator](https://appdetonator.run/) - Detonate APK binary to provide source code level details including app author, signature, build, and manifest information. 3 Analysis/day free quota.\n1. [Pithus](https://beta.pithus.org/) - Open-Source APK analyzer. Still in Beta for the moment and limited to static analysis for the moment. It is possible to hunt malware with Yara rules. More [here](https://beta.pithus.org/about/).\n1. [Oversecured](https://oversecured.com/) - Enterprise vulnerability scanner for Android and iOS apps, it offers app owners and developers the ability to secure each new version of a mobile app by integrating Oversecured into the development process. Not free.\n1. [AppSweep by Guardsquare](https://appsweep.guardsquare.com/) - Free, fast Android application security testing for developers\n1. [Koodous](https://koodous.com) - Performs static/dynamic malware analysis over a vast repository of Android samples and checks them against public and private Yara rules.\n1. [Immuniweb](https://www.immuniweb.com/mobile/). Does an \"OWASP Mobile Top 10 Test\", \"Mobile App Privacy Check\" and an application permissions test. The free tier is 4 tests per day incl. report after registration\n1. ~~[BitBaan](https://malab.bitbaan.com/)~~\n1. ~~[AVC UnDroid](http://undroid.av-comparatives.info/)~~\n1. ~~[AMAaaS](https://amaaas.com) - Free Android Malware Analysis Service. A bare-metal service features static and dynamic analysis for Android applications. A product of [MalwarePot](https://malwarepot.com/index.php/AMAaaS)~~.\n1. ~~[AppCritique](https://appcritique.boozallen.com) - Upload your Android APKs and receive comprehensive free security assessments~~\n1. ~~[NVISO ApkScan](https://apkscan.nviso.be/) - sunsetting on Oct 31, 2019~~\n1. ~~[Mobile Malware Sandbox](http://www.mobilemalware.com.br/analysis/index_en.php)~~\n1. ~~[IBM Security AppScan Mobile Analyzer](https://appscan.bluemix.net/mobileAnalyzer) - not free~~\n1. ~~[Visual Threat](https://www.visualthreat.com/) - no longer an Android app analyzer~~\n1. ~~[Tracedroid](http://tracedroid.few.vu.nl/)~~\n1. ~~[habo](https://habo.qq.com/) - 10/day~~\n1. ~~[CopperDroid](http://copperdroid.isg.rhul.ac.uk/copperdroid/)~~\n1. ~~[SandDroid](http://sanddroid.xjtu.edu.cn/)~~\n1. ~~[Stowaway](http://www.android-permissions.org/)~~\n1. ~~[Anubis](http://anubis.iseclab.org/)~~\n1. ~~[Mobile app insight](http://www.mobile-app-insight.org)~~\n1. ~~[Mobile-Sandbox](http://mobile-sandbox.com)~~\n1. ~~[Ijiami](http://safe.ijiami.cn/)~~\n1. ~~[Comdroid](http://www.comdroid.org/)~~\n1. ~~[Android Sandbox](http://www.androidsandbox.net/)~~\n1. ~~[Foresafe](http://www.foresafe.com/scan)~~\n1. ~~[Dexter](https://dexter.dexlabs.org/)~~\n1. ~~[MobiSec Eacus](http://www.mobiseclab.org/eacus.jsp)~~\n1. ~~[Fireeye](https://fireeye.ijinshan.com/)- max 60MB 15/day~~\n1. ~~[approver](https://approver.talos-sec.com/) - Approver  is a fully automated security analysis and risk assessment platform for Android and iOS apps. Not free.~~\n\n### Static Analysis Tools\n\n1. [Androwarn](https://github.com/maaaaz/androwarn/) - detect and warn the user about potential malicious behaviors developed by an Android application.\n1. [ApkAnalyser](https://github.com/sonyxperiadev/ApkAnalyser)\n1. [APKInspector](https://github.com/honeynet/apkinspector/)\n1. [Droid Intent Data Flow Analysis for Information Leakage](https://insights.sei.cmu.edu/library/didfail/)\n1. [DroidLegacy](https://bitbucket.org/srl/droidlegacy)\n1. [FlowDroid](https://blogs.uni-paderborn.de/sse/tools/flowdroid/)\n1. [Android Decompiler](https://www.pnfsoftware.com/) – not free\n1. [PSCout](https://security.csl.toronto.edu/pscout/) - A tool that extracts the permission specification from the Android OS source code using static analysis\n1. [Amandroid](http://amandroid.sireum.org/)\n1. [SmaliSCA](https://github.com/dorneanu/smalisca) - Smali Static Code Analysis\n1. [CFGScanDroid](https://github.com/douggard/CFGScanDroid) - Scans and compares CFG against CFG of malicious applications\n1. [Madrolyzer](https://github.com/maldroid/maldrolyzer) - extracts actionable data like C&C, phone number etc.\n1. [ConDroid](https://github.com/JulianSchuette/ConDroid) - Performs a combination of symbolic + concrete execution of the app\n1. [DroidRA](https://github.com/serval-snt-uni-lu/DroidRA)\n1. [RiskInDroid](https://github.com/ClaudiuGeorgiu/RiskInDroid) - A tool for calculating the risk of Android apps based on their permissions, with an online demo available.\n1. [SUPER](https://github.com/SUPERAndroidAnalyzer/super) - Secure, Unified, Powerful and Extensible Rust Android Analyzer\n1. [ClassyShark](https://github.com/google/android-classyshark) - Standalone binary inspection tool that can browse any Android executable and show important info.\n1. [StaCoAn](https://github.com/vincentcox/StaCoAn) - Cross-platform tool that aids developers, bug-bounty hunters, and ethical hackers in performing static code analysis on mobile applications. This tool was created with a big focus on usability and graphical guidance in the user interface.\n1. [JAADAS](https://github.com/flankerhqd/JAADAS) - Joint intraprocedural and interprocedural program analysis tool to find vulnerabilities in Android apps, built on Soot and Scala\n1. [Quark-Engine](https://github.com/quark-engine/quark-engine) - An Obfuscation-Neglect Android Malware Scoring System\n1. [One Step Decompiler](https://github.com/b-mueller/apkx) - Android APK Decompilation for the Lazy\n1. [APKLeaks](https://github.com/dwisiswant0/apkleaks) - Scanning APK file for URIs, endpoints & secrets.\n1. [Mobile Audit](https://github.com/mpast/mobileAudit) - Web application for performing Static Analysis and detecting malware in Android APKs.\n1. ~~[Smali CFG generator](https://github.com/EugenioDelfa/Smali-CFGs)~~\n1. ~~[Several tools from PSU](http://siis.cse.psu.edu/tools.html)~~\n1. ~~[SPARTA](https://www.cs.washington.edu/sparta) - verifies (proves) that an app satisfies an information-flow security policy; built on the [Checker Framework](https://types.cs.washington.edu/checker-framework/)~~\n\n### App Vulnerability Scanners\n\n1. [QARK](https://github.com/linkedin/qark/) - QARK by LinkedIn is for app developers to scan apps for security issues\n1. [AndroBugs](https://github.com/AndroBugs/AndroBugs_Framework)\n1. [Nogotofail](https://github.com/google/nogotofail)\n1. ~~[Devknox](https://devknox.io/) - IDE plugin to build secure Android apps. Not maintained anymore.~~\n\n### Dynamic Analysis Tools\n\n1. [Android DBI frameowork](http://www.mulliner.org/blog/blosxom.cgi/security/androiddbiv02.html)\n1. [Androl4b](https://github.com/sh4hin/Androl4b)- A Virtual Machine For Assessing Android applications, Reverse Engineering and Malware Analysis\n1. [House](https://github.com/nccgroup/house)- House: A runtime mobile application analysis toolkit with a Web GUI, powered by Frida, written in Python.\n1. [Mobile-Security-Framework MobSF](https://github.com/MobSF/Mobile-Security-Framework-MobSF) - Mobile Security Framework is an intelligent, all-in-one open-source mobile application (Android/iOS) automated pen-testing framework capable of performing static, dynamic analysis and web API testing.\n1. [AppUse](https://appsec-labs.com/AppUse/) – custom build for penetration testing\n1. [Droidbox](https://github.com/pjlantz/droidbox)\n1. [Drozer](https://github.com/mwrlabs/drozer)\n1. [Xposed](https://forum.xda-developers.com/xposed/xposed-installer-versions-changelog-t2714053) - equivalent of doing Stub-based code injection but without any modifications to the binary\n1. [Inspeckage](https://github.com/ac-pm/Inspeckage) - Android Package Inspector - dynamic analysis with API hooks, start unexported activities, and more. (Xposed Module)\n1. [Android Hooker](https://github.com/AndroidHooker/hooker) - Dynamic Java code instrumentation (requires the Substrate Framework)\n1. [ProbeDroid](https://github.com/ZSShen/ProbeDroid) - Dynamic Java code instrumentation\n1. [DECAF](https://github.com/sycurelab/DECAF) - Dynamic Executable Code Analysis Framework based on QEMU (DroidScope is now an extension to DECAF)\n1. [CuckooDroid](https://github.com/idanr1986/cuckoo-droid) - Android extension for Cuckoo sandbox\n1. [Mem](https://github.com/MobileForensicsResearch/mem) - Memory analysis of Android (root required)\n1. [Crowdroid](http://www.ida.liu.se/labs/rtslab/publications/2011/spsm11-burguera.pdf) – unable to find the actual tool\n1. [AuditdAndroid](https://github.com/nwhusted/AuditdAndroid) – android port of auditd, not under active development anymore\n1. [Android Security Evaluation Framework](https://code.google.com/p/asef/) - not under active development anymore\n1. [Aurasium](https://github.com/xurubin/aurasium) – Practical security policy enforcement for Android apps via bytecode rewriting and in-place reference monitor.\n1. [Android Linux Kernel modules](https://github.com/strazzere/android-lkms)\n1. [StaDynA](https://github.com/zyrikby/StaDynA) - a system supporting security app analysis in the presence of dynamic code update features (dynamic class loading and reflection). This tool combines static and dynamic analysis of Android applications in order to reveal the hidden/updated behavior and extend static analysis results with this information.\n1. [DroidAnalytics](https://github.com/zhengmin1989/DroidAnalytics) - incomplete\n1. [Vezir Project](https://github.com/oguzhantopgul/Vezir-Project) - Virtual Machine for Mobile Application Pentesting and Mobile Malware Analysis\n1. [MARA](https://github.com/xtiankisutsa/MARA_Framework) - Mobile Application Reverse Engineering and Analysis Framework\n1. [Taintdroid](http://appanalysis.org) - requires AOSP compilation\n1. [ARTist](https://artist.cispa.saarland) - a flexible open-source instrumentation and hybrid analysis framework for Android apps and Android's Java middleware. It is based on the Android Runtime's (ART) compiler and modifies code during on-device compilation.\n1. [Android Malware Sandbox](https://github.com/Areizen/Android-Malware-Sandbox)\n1. [AndroPyTool](https://github.com/alexMyG/AndroPyTool) - a tool for extracting static and dynamic features from Android APKs. It combines different well-known Android app analysis tools such as DroidBox, FlowDroid, Strace, AndroGuard, or VirusTotal analysis.\n1. [Runtime Mobile Security (RMS)](https://github.com/m0bilesecurity/RMS-Runtime-Mobile-Security) - is a powerful web interface that helps you to manipulate Android and iOS Apps at Runtime\n1. [PAPIMonitor](https://github.com/Dado1513/PAPIMonitor) – PAPIMonitor (Python API Monitor for Android apps) is a Python tool based on Frida for monitoring user-select APIs during the app execution.\n1. [Android_application_analyzer](https://github.com/NotSoSecure/android_application_analyzer) - The tool is used to analyze the content of the Android application in local storage.\n1. [Decompiler.com](https://www.decompiler.com/) - Online APK and Java decompiler\n1. [friTap](https://github.com/fkie-cad/friTap)- - Intercept SSL/TLS connections with Frida; Allows TLS key extraction and decryption of TLS payload as PCAP on Android in real-time.\n1. ~~[Appie](https://manifestsecurity.com/appie/) - Appie is a software package that has been pre-configured to function as an Android Pentesting Environment. It is completely portable and can be carried on a USB stick or smartphone. This is a one-stop answer for all the tools needed in Android Application Security Assessment and an awesome alternative to existing virtual machines.~~\n1. ~~[Android Tamer](https://androidtamer.com/) - Virtual / Live Platform for Android Security Professionals~~\n1. ~~[Android Malware Analysis Toolkit](http://www.mobilemalware.com.br/amat/download.html) - (Linux distro) Earlier it use to be an [online analyzer](http://dunkelheit.com.br/amat/analysis/index_en.php)~~\n1. ~~[Android Reverse Engineering](https://redmine.honeynet.org/projects/are/wiki) – ARE (android reverse engineering) not under active development anymore~~\n1. ~~[ViaLab Community Edition](https://www.nowsecure.com/blog/2014/09/09/introducing-vialab-community-edition/)~~\n1. ~~[Mercury](https://labs.mwrinfosecurity.com/tools/2012/03/16/mercury/)~~\n1. ~~[Cobradroid](https://thecobraden.com/projects/cobradroid/) – custom image for malware analysis~~\n\n### Reverse Engineering\n\n1. [Smali/Baksmali](https://github.com/JesusFreke/smali) – apk decompilation\n1. [emacs syntax coloring for smali files](https://github.com/strazzere/Emacs-Smali)\n1. [vim syntax coloring for smali files](http://codetastrophe.com/smali.vim)\n1. [AndBug](https://github.com/swdunlop/AndBug)\n1. [Androguard](https://github.com/androguard/androguard) – powerful, integrates well with other tools\n1. [Apktool](https://ibotpeaches.github.io/Apktool/) – really useful for compilation/decompilation (uses smali)\n1. [Android Framework for Exploitation](https://github.com/appknox/AFE)\n1. [Bypass signature and permission checks for IPCs](https://github.com/iSECPartners/Android-KillPermAndSigChecks)\n1. [Android OpenDebug](https://github.com/iSECPartners/Android-OpenDebug) – make any application on the device debuggable (using cydia substrate).\n1. [Dex2Jar](https://github.com/pxb1988/dex2jar) - dex to jar converter\n1. [Enjarify](https://github.com/google/enjarify) - dex to jar converter from Google\n1. [Dedexer](https://sourceforge.net/projects/dedexer/)\n1. [Fino](https://github.com/sysdream/fino)\n1. [Frida](https://www.frida.re/) - inject javascript to explore applications and a [GUI tool](https://github.com/antojoseph/diff-gui) for it\n1. [Indroid](https://bitbucket.org/aseemjakhar/indroid) – thread injection kit\n1. [IntentSniffer](https://www.nccgroup.com/us/our-research/intent-sniffer/)\n1. [Introspy](https://github.com/iSECPartners/Introspy-Android)\n1. [Jad]( https://varaneckas.com/jad/) - Java decompiler\n1. [JD-GUI](https://github.com/java-decompiler/jd-gui) - Java decompiler\n1. [CFR](http://www.benf.org/other/cfr/) - Java decompiler\n1. [Krakatau](https://github.com/Storyyeller/Krakatau) - Java decompiler\n1. [FernFlower](https://github.com/fesh0r/fernflower) - Java decompiler\n1. [Redexer](https://github.com/plum-umd/redexer) – apk manipulation\n1. [Simplify Android deobfuscator](https://github.com/CalebFenton/simplify)\n1. [Bytecode viewer](https://github.com/Konloch/bytecode-viewer)\n1. [Radare2](https://github.com/radare/radare2)\n1. [Jadx](https://github.com/skylot/jadx)\n1. [Dwarf](https://github.com/iGio90/Dwarf) - GUI for reverse engineering\n1. [Andromeda](https://github.com/secrary/Andromeda) - Another basic command-line reverse engineering tool\n1. [apk-mitm](https://github.com/shroudedcode/apk-mitm) - A CLI application that prepares Android APK files for HTTPS inspection\n1. [Noia](https://github.com/0x742/noia) - Simple Android application sandbox file browser tool\n1. [Obfuscapk](https://github.com/ClaudiuGeorgiu/Obfuscapk) - Obfuscapk is a modular Python tool for obfuscating Android apps without needing their source code.\n1. [ARMANDroid](https://github.com/Mobile-IoT-Security-Lab/ARMANDroid) - ARMAND (Anti-Repackaging through Multi-patternAnti-tampering based on Native Detection) is a novel anti-tampering protection scheme that embeds logic bombs and AT detection nodes directly in the apk file without needing their source code.\n1. [MVT (Mobile Verification Toolkit)](https://github.com/mvt-project/mvt) - a collection of utilities to simplify and automate the process of gathering forensic traces helpful to identify a potential compromise of Android and iOS devices\n1. [Dexmod](https://github.com/google/dexmod) - tool to exemplify patching Dalvik bytecode in a DEX (Dalvik Executable) file, and assist in the static analysis of Android applications.\n1. ~~[Procyon](https://bitbucket.org/mstrobel/procyon/wiki/Java%20Decompiler) - Java decompiler~~\n1. ~~[Smali viewer](http://blog.avlyun.com/wp-content/uploads/2014/04/SmaliViewer.zip)~~\n1. ~~[ZjDroid](https://github.com/BaiduSecurityLabs/ZjDroid)~~, ~~[fork/mirror](https://github.com/yangbean9/ZjDroid)~~\n1. ~~[Dare](http://siis.cse.psu.edu/dare/index.html) – .dex to .class converter~~\n\n### Fuzz Testing\n\n1. [Radamsa Fuzzer](https://github.com/anestisb/radamsa-android)\n1. [Honggfuzz](https://github.com/google/honggfuzz)\n1. [An Android port of the Melkor ELF fuzzer](https://github.com/anestisb/melkor-android)\n1. [Media Fuzzing Framework for Android](https://github.com/fuzzing/MFFA)\n1. [AndroFuzz](https://github.com/jonmetz/AndroFuzz)\n1. [QuarksLab's Android Fuzzing](https://github.com/quarkslab/android-fuzzing)\n1. ~~[IntentFuzzer](https://www.nccgroup.trust/us/about-us/resources/intent-fuzzer/)~~\n\n### App Repackaging Detectors\n\n1. [FSquaDRA](https://github.com/zyrikby/FSquaDRA) - a tool for detecting repackaged Android applications based on app resources hash comparison.\n\n### Market Crawlers\n\n1. [Google Play crawler (Java)](https://github.com/Akdeniz/google-play-crawler)\n1. [Google Play crawler (Python)](https://github.com/egirault/googleplay-api)\n1. [Google Play crawler (Node)](https://github.com/dweinstein/node-google-play) - get app details and download apps from the official Google Play Store.\n1. [Aptoide downloader (Node)](https://github.com/dweinstein/node-aptoide) - download apps from Aptoide third-party Android market\n1. [Appland downloader (Node)](https://github.com/dweinstein/node-appland) - download apps from Appland third-party Android market\n1. [PlaystoreDownloader](https://github.com/ClaudiuGeorgiu/PlaystoreDownloader) - PlaystoreDownloader is a tool for downloading Android applications directly from the Google Play Store. After an initial (one-time) configuration, applications can be downloaded by specifying their package name.\n1. [APK Downloader](https://apkcombo.com/apk-downloader/) Online Service to download APK from Playstore for specific Android Device Configuration\n1. ~~[Apkpure](https://apkpure.com/) - Online apk downloader. Provides also its own app for downloading.~~\n\n### Misc Tools\n\n1. [smalihook](http://androidcracking.blogspot.com/2011/03/original-smalihook-java-source.html)\n1. [AXMLPrinter2](http://code.google.com/p/android4me/downloads/detail?name=AXMLPrinter2.jar) - to convert binary XML files to human-readable XML files\n1. [adb autocomplete](https://github.com/mbrubeck/android-completion)\n1. [mitmproxy](https://github.com/mitmproxy/mitmproxy)\n1. [dockerfile/androguard](https://github.com/dweinstein/dockerfile-androguard)\n1. [Android Vulnerability Test Suite](https://github.com/AndroidVTS/android-vts) - android-vts scans a device for set of vulnerabilities\n1. [AppMon](https://github.com/dpnishant/appmon)- AppMon is an automated framework for monitoring and tampering with system API calls of native macOS, iOS, and Android apps. It is based on Frida.\n1. [Internal Blue](https://github.com/seemoo-lab/internalblue) - Bluetooth experimentation framework based on Reverse Engineering of Broadcom Bluetooth Controllers\n1. [Android Mobile Device Hardening](https://github.com/SecTheTech/AMDH) - AMDH scans and hardens the device's settings and lists harmful installed Apps based on permissions.\n1. ~~[Android Device Security Database](https://www.android-device-security.org/client/datatable) - Database of security features of Android devices~~\n1. ~~[Opcodes table for quick reference](http://ww38.xchg.info/corkami/opcodes_tables.pdf)~~\n1. ~~[APK-Downloader](http://codekiem.com/2012/02/24/apk-downloader/)~~ - seems dead now\n1. ~~[Dalvik opcodes](http://pallergabor.uw.hu/androidblog/dalvik_opcodes.html)~~\n\n### Vulnerable Applications for practice\n\n1. [Damn Insecure Vulnerable Application (DIVA)](https://github.com/payatu/diva-android)\n1. [Vuldroid](https://github.com/jaiswalakshansh/Vuldroid)\n1. [ExploitMe Android Labs](http://securitycompass.github.io/AndroidLabs/setup.html)\n1. [GoatDroid](https://github.com/jackMannino/OWASP-GoatDroid-Project)\n1. [Android InsecureBank](https://github.com/dineshshetty/Android-InsecureBankv2)\n1. [Insecureshop](https://github.com/optiv/insecureshop)\n1. [Oversecured Vulnerable Android App (OVAA)](https://github.com/oversecured/ovaa)\n\n## Academic/Research/Publications/Books\n\n### Research Papers\n\n1. [Exploit Database](https://www.exploit-db.com/papers/)\n1. [Android security-related presentations](https://github.com/jacobsoo/AndroidSlides)\n1. [A good collection of static analysis papers](https://tthtlc.wordpress.com/2011/09/01/static-analysis-of-android-applications/)\n\n### Books\n\n1. [SEI CERT Android Secure Coding Standard](https://wiki.sei.cmu.edu/confluence/display/android/Android+Secure+Coding+Standard)\n\n### Others\n\n1. [OWASP Mobile Security Testing Guide Manual](https://github.com/OWASP/owasp-mstg)\n1. [doridori/Android-Security-Reference](https://github.com/doridori/Android-Security-Reference)\n1. [android app security checklist](https://github.com/b-mueller/android_app_security_checklist)\n1. [Mobile App Pentest Cheat Sheet](https://github.com/tanprathan/MobileApp-Pentest-Cheatsheet)\n1. [Android Reverse Engineering 101 by Daniele Altomare (Web Archive link)](https://web.archive.org/web/20180721134044/http://www.fasteque.com:80/android-reverse-engineering-101-part-1/)\n1. ~~[Mobile Security Reading Room](https://mobile-security.zeef.com) - A reading room that contains well-categorized technical reading material about mobile penetration testing, mobile malware, mobile forensics, and all kind of mobile security-related topics~~\n\n## Exploits/Vulnerabilities/Bugs\n\n### List\n\n1. [Android Security Bulletins](https://source.android.com/security/bulletin/)\n1. [Android's reported security vulnerabilities](https://www.cvedetails.com/vulnerability-list/vendor_id-1224/product_id-19997/Google-Android.html)\n1. [OWASP Mobile Top 10 2016](https://www.owasp.org/index.php/Mobile_Top_10_2016-Top_10)\n1. [Exploit Database](https://www.exploit-db.com/search/?action=search&q=android) - click search\n1. [Vulnerability Google Doc](https://docs.google.com/spreadsheet/pub?key=0Am5hHW4ATym7dGhFU1A4X2lqbUJtRm1QSWNRc3E0UlE&single=true&gid=0&output=html)\n1. [Google Android Security Team’s Classifications for Potentially Harmful Applications (Malware)](https://source.android.com/security/reports/Google_Android_Security_PHA_classifications.pdf)\n1. ~~[Android Devices Security Patch Status](https://kb.androidtamer.com/Device_Security_Patch_tracker/)~~\n\n### Malware\n\n1. [androguard - Database Android Malware wiki](https://code.google.com/p/androguard/wiki/DatabaseAndroidMalwares)\n1. [Android Malware Github repo](https://github.com/ashishb/android-malware)\n1. [Android Malware Genome Project](http://www.malgenomeproject.org/) - contains 1260 malware samples categorized into 49 different malware families, free for research purposes.\n1. [Contagio Mobile Malware Mini Dump](http://contagiominidump.blogspot.com)\n1. [Drebin](https://www.sec.tu-bs.de/~danarp/drebin/)\n1. [Hudson Rock](https://www.hudsonrock.com/threat-intelligence-cybercrime-tools) - Free cybercrime intelligence toolset that can indicate if a specific APK package was compromised in an Infostealer malware attack.\n1. [Kharon Malware Dataset](http://kharon.gforge.inria.fr/dataset/) - 7 malware which have been reverse-engineered and documented\n1. [Android Adware and General Malware Dataset](https://www.unb.ca/cic/datasets/android-adware.html)\n1. [AndroZoo](https://androzoo.uni.lu/) - AndroZoo is a growing Android application collection from several sources, including the official Google Play app market.\n1. ~~[Android PRAGuard Dataset](http://pralab.diee.unica.it/en/AndroidPRAGuardDataset) - The dataset contains 10479 samples, obtained by obfuscating the MalGenome and the Contagio Minidump datasets with seven different obfuscation techniques.~~\n1. ~~[Admire](http://admire.necst.it/)~~\n\n### Bounty Programs\n\n1. [Android Security Reward Program](https://www.google.com/about/appsecurity/android-rewards/)\n\n### How to report Security issues\n\n1. [Android - reporting security issues](https://source.android.com/security/overview/updates-resources.html#report-issues)\n1. [Android Reports and Resources](https://github.com/B3nac/Android-Reports-and-Resources) - List of Android Hackerone disclosed reports and other resources\n\n## Contributing\n\nYour contributions are always welcome!\n"
        },
        {
          "name": "contributing.md",
          "type": "blob",
          "size": 0.7392578125,
          "content": "# Contribution Guidelines\n\nPlease ensure your pull request adheres to the following guidelines:\n\n- Search previous suggestions before making a new one, as yours may be a duplicate.\n- Make sure your entries is useful before submitting.\n- Make an individual pull request for each suggestion.\n- Titles should be [capitalized](http://grammar.yourdictionary.com/capitalization/rules-for-capitalization-in-titles.html).\n- Link additions should be added to the bottom of the relevant category.\n- New categories or improvements to the existing categorization are welcome.\n- Check your spelling and grammar.\n- Make sure your text editor is set to remove trailing whitespace.\n- The pull request and commit should have a useful title.\n\nThank you for your suggestions!\n"
        },
        {
          "name": "run_awesome_bot.sh",
          "type": "blob",
          "size": 2.515625,
          "content": "#!/usr/bin/env bash\nset -euo pipefail\n\n\nDEAD_URLS='opencollective.com','http://copperdroid.isg.rhul.ac.uk/copperdroid/',\\\n'http://sanddroid.xjtu.edu.cn/','http://www.foresafe.com/scan',\\\n'https://github.com/BaiduSecurityLabs/ZjDroid','https://github.com/yangbean9/ZjDroid',\\\n'https://appanalysis.org/download.html','https://labs.mwrinfosecurity.com/tools/2012/03/16/mercury/',\\\n'https://dexter.dexlabs.org/','http://www.mobiseclab.org/eacus.jsp','https://fireeye.ijinshan.com/',\\\n'http://www.comdroid.org/','http://www.androidsandbox.net/','http://andrototal.org',\\\n'http://www.mobile-app-insight.org','http://anubis.iseclab.org/',\\\n'http://blog.avlyun.com/wp-content/uploads/2014/04/SmaliViewer.zip',\\\n'habo.qq.com','http://admire.necst.it/','http://tracedroid.few.vu.nl',\\\n'http://appanalysis.org','http://dunkelheit.com.br','https://mobile-security.zeef.com',\\\n'https://redmine.honeynet.org/projects/are/wiki','https://www.visualthreat.com/',\\\n'http://www.mobilemalware.com.br','https://appscan.bluemix.net',\\\n'http://siis.cse.psu.edu/tools.html','http://siis.cse.psu.edu/dare/index.html',\\\n'http://codekiem.com/2012/02/24/apk-downloader/','https://apkscan.nviso.be',\\\n'http://ww38.xchg.info','https://thecobraden.com/projects/cobradroid',\\\n'https://bitbucket.org/mstrobel/procyon/wiki/',\\\n'https://code.google.com/p/androguard/wiki/DatabaseAndroidMalwares',\\\n'https://github.com/ashishb/android-security-awesome/actions',\\\n'https://appcritique.boozallen.com',\\\n'https://amaaas.com',\\\n'https://malwarepot.com/index.php/AMAaaS',\\\n'https://androidtamer.com/',\\\n'https://kb.androidtamer.com/Device_Security_Patch_tracker/',\\\n'http://undroid.av-comparatives.info/',\\\n'https://github.com/EugenioDelfa/Smali-CFGs',\\\n'https://malab.bitbaan.com/',\\\n'https://www.android-device-security.org/client/datatable',\\\n'http://pralab.diee.unica.it/en/AndroidPRAGuardDataset',\\\n'https://www.nccgroup.trust/us/about-us/resources/intent-fuzzer/',\\\n'https://www.sec.tu-bs.de/~danarp/drebin/',\\\n'https://apkpure.com',\\\n'https://approver.talos-sec.com',\\\n'https://wiki.sei.cmu.edu/confluence/display/android/Android+Secure+Coding+Standard',\\\n'https://web.archive.org/web/20180721134044/http://www.fasteque.com:80/android-reverse-engineering-101-part-1/',\\\n'https://manifestsecurity.com/appie/',\\\n'https://www.cs.washington.edu/sparta'\n\nFLAKY_URLS='http://safe.ijiami.cn/',\\\n'https://apkcombo.com/apk-downloader/',\\\n'https://www.nowsecure.com/'\n\nSRC_FILE=README.md\n# Install urlsup with `cargo install urlsup`\nurlsup \\\n  --allow 301,302 \\\n  --white-list ${DEAD_URLS},${FLAKY_URLS} \\\n  ${SRC_FILE}\n"
        }
      ]
    }
  ]
}