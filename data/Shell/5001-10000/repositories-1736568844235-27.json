{
  "metadata": {
    "timestamp": 1736568844235,
    "page": 27,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dnschneid/crouton",
      "stars": 8588,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0615234375,
          "content": "*.tar.*\n.*.swp\n.*.tmp\nnacl_sdk/\n/crouton*\n/test/run\n/releases/\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.01171875,
          "content": "Google, Inc\n"
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 1.041015625,
          "content": "Aaron Zauner\nAlex Bennée\nAlfred Suleymanov\nAlfriadox\nAlireza Ghasemi\nAndrew Kanner\nAron Griffis\nAurelien Lourot\nAvi Zajac\nBlaine Bublitz\nBraden Farmer\nbrannon\nbrmbrmcar\nBryce Thorup\nChris Galle\nChristopher Mårtensson\nChris Varga\nChuan Ji\nCorey Garst\nDaniel Haber\nDavid Reveman\nDavid Schneider\nDennis Lockhart\ndimonf\ndumpweed\nEugene Y. Q. Shen\nGeorge Shank\nIcecream95\nIgor Bukanov\nJackMacWindows\nJake Waksbaum\nJavi Merino\njessaustin\nJim Tittsler\nJohan Lorentzon\nJohn Tantalo\njoshua stein\nJustin Frankel\nJustin Guy\nKenny Strawn\nKerwin Hui\nLef Ioannidis\nMagnus Nyberg\nMasaki Muranaka\nMaurice van Kruchten\nMicah Lee\nMichael Mattioli\nMichael Moss\nMichael Orr\nMike Kasick\nMikito Takada\nMiles Whittaker\nNeal McBurnett\nNevada Romsdahl\nNicolas Boichat\nPete Baldridge\nPhillip Pearson\nRich Murphey\nRicky Brent\nRyan Fowler\nSamuel Dionne-Riel\nSimon Podhajsky\nStephen Barber\nSteve Desmond\nSteven Maude\nSteven Merrill\nTed Matsumura\nTobbe Lundberg\nTom Dunlap\nTony Xue\nWilliam Kong\nWilliam Ransohoff\nWilliam W. Wu\nYang Wang\nYu-Hsi Chiang\nYuri Pole\nYushin Washio\nzguithues\nZopolis4\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.525390625,
          "content": "// Copyright (c) 2016 The crouton Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//    * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//    * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//    * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.4384765625,
          "content": "# Copyright (c) 2016 The crouton Authors. All rights reserved.\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\nTARGET = crouton\nEXTTARGET = crouton.zip\nLIBS = src/freon.c\nLIBSTARGETS = $(patsubst src/%.c, crouton%.so, $(LIBS))\nSRCTARGETS = $(patsubst src/%.c,crouton%,$(filter-out $(LIBS),$(wildcard src/*.c)))\nCONTRIBUTORS = CONTRIBUTORS\nWRAPPER = build/wrapper.sh\nSCRIPTS_NOSYM := \\\n\t$(wildcard host-bin/*) \\\n\t$(wildcard installer/*.sh) installer/functions \\\n\t$(wildcard installer/*/*) \\\n\t$(wildcard src/*) \\\n\t$(wildcard targets/*)\nSCRIPTS := \\\n\t$(wildcard chroot-bin/*) \\\n\t$(wildcard chroot-etc/*)\nEXTPEXE = host-ext/crouton/kiwi.pexe\nEXTPEXESOURCES = $(wildcard host-ext/nacl_src/*.h) \\\n\t\t\t\t $(wildcard host-ext/nacl_src/*.cc)\nEXTSOURCES = $(wildcard host-ext/crouton/*)\nBOOTSTRAPS := $(wildcard installer/*/bootstrap)\nBUILDDIR = crouton.build\nGENVERSION = build/genversion.sh\nCONTRIBUTORSSED = build/CONTRIBUTORS.sed\nRELEASE = build/release.sh\nVERSION = 1\nTARPARAMS ?= -j\n\nCFLAGS=-g -Wall -Werror -Wno-error=unused-function -Os\n\ncroutonfbserver_LIBS = -lX11 -lXdamage -lXext -lXfixes -lXtst\ncroutonxi2event_LIBS = -lX11 -lXi\ncroutonfreon.so_LIBS = -ldl -ldrm -I/usr/include/libdrm\n\ncroutonwebsocket_DEPS = src/websocket.h\ncroutonfbserver_DEPS = src/websocket.h\n\nifeq ($(wildcard .git/HEAD),)\n    GITHEAD :=\nelse\n    GITHEADFILE := .git/refs/heads/$(shell cut -d/ -f3 '.git/HEAD')\n    ifeq ($(wildcard $(GITHEADFILE)),)\n        GITHEAD := .git/HEAD\n    else\n        GITHEAD := .git/HEAD .git/refs/heads/$(shell cut -d/ -f3 '.git/HEAD')\n    endif\nendif\n\n$(TARGET): $(WRAPPER) $(BUILDDIR) $(GENVERSION) $(GITHEAD) Makefile\n\t{ \\\n\t\tsed -e \"s/\\$$TARPARAMS/$(TARPARAMS)/\" \\\n\t\t\t-e \"s/VERSION=.*/VERSION='$(shell $(GENVERSION) $(VERSION))'/\" \\\n\t\t\t$(WRAPPER) \\\n\t\t&& (cd $(BUILDDIR) && tar --owner=root --group=root -c $(TARPARAMS) *)\\\n\t\t&& chmod +x /dev/stdout \\\n\t;} > $(TARGET) || ! rm -f $(TARGET)\n\n$(BUILDDIR): $(SCRIPTS) $(SCRIPTS_NOSYM) Makefile\n\trm -rf $(BUILDDIR) && mkdir -p $(BUILDDIR) \\\n\t&& cp -at $(BUILDDIR) --parents $(SCRIPTS) \\\n\t&& cp -Lprt $(BUILDDIR) --parents $(SCRIPTS_NOSYM) \\\n\t&& for bootstrap in $(BOOTSTRAPS); do \\\n\t\ttmp=$(BUILDDIR); \\\n\t\t[ -h \"$$bootstrap\" ] && continue; \\\n\t\techo \"Preparing bootstrap dependencies for $$bootstrap\" >&2; \\\n\t\ttmp=$(BUILDDIR) sh -e \"$$bootstrap\" \\\n\t\t\t|| ! rm -rf $(BUILDDIR) || exit 1; \\\n\tdone\n\n$(EXTTARGET): $(EXTSOURCES) Makefile\n\trm -f $(EXTTARGET) && zip -q --junk-paths $(EXTTARGET) $(EXTSOURCES)\n\n$(EXTPEXE): $(EXTPEXESOURCES)\n\t$(MAKE) -C host-ext/nacl_src\n\n$(SRCTARGETS): $(patsubst crouton%,src/%.c,$@) $($@_DEPS) Makefile\n\tgcc $(CFLAGS) $(patsubst crouton%,src/%.c,$@) $($@_LIBS) -o $@\n\n$(LIBSTARGETS): $(patsubst crouton%.so,src/%.c,$@) $($@_DEPS) Makefile\n\tgcc $(CFLAGS) -shared -fPIC $(patsubst crouton%.so,src/%.c,$@) $($@_LIBS) -o $@\n\nextension: $(EXTTARGET)\n\n$(CONTRIBUTORS): $(GITHEAD) $(CONTRIBUTORSSED)\n\tgit shortlog -s | sed -f $(CONTRIBUTORSSED) | sort -uf > $(CONTRIBUTORS)\n\ncontributors: $(CONTRIBUTORS)\n\nrelease: $(CONTRIBUTORS) $(TARGET) $(RELEASE)\n\t[ ! -d .git ] || git status | grep -q 'working [a-z]* clean' || \\\n\t\t{ echo \"There are uncommitted changes. Aborting!\" 1>&2; exit 2; }\n\t$(RELEASE) $(TARGET)\n\nforce-release: $(CONTRIBUTORS) $(TARGET) $(RELEASE)\n\t$(RELEASE) -f $(TARGET)\n\nall: $(TARGET) $(SRCTARGETS) $(LIBSTARGETS) $(EXTTARGET)\n\nclean:\n\trm -f $(TARGET) $(EXTTARGET) $(SRCTARGETS) $(LIBSTARGETS)\n\trm -rf $(BUILDDIR)\n\n.PHONY: all clean contributors extension release force-release\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 20.0615234375,
          "content": "# crouton: Chromium OS Universal Chroot Environment\n\ncrouton is a set of scripts that bundle up into an easy-to-use,\nChromium OS-centric chroot generator. Ubuntu, Debian, and Kali are supported\n(using debootstrap behind the scenes), but \"Chromium OS Debian and Ubuntu (plus\none distro) EOL'd Chroot Environment\" doesn't acronymize as well (crodupodece is\nadmittedly pretty fun to say, though).\n\n### 🪦 crouton is now end-of-life 🪦\n\nAll good things must come to an end, and considering\n * Chromium OS's introduction of increasingly strict shell safeguards,\n * the [change in cras's build tools](https://github.com/dnschneid/crouton/issues/4958),\n * the [removal of manifest v2 extensions](https://github.com/dnschneid/crouton/pull/5094),\n * the [removal of PNaCl, breaking xiwi](https://github.com/dnschneid/crouton/issues/5130),\n * oh, and Chromium OS being replaced by Android\n\nthere's really not much to gain from continued development. Put another way, the\nproverbial mixed salad is just about out of tasty crunchy bits, and the\nremaining morsels have gone a bit stale. And for some reason someone's about to\nswap all the lettuce out for onion rings? Point is, it's time to stop mixing\ndressings. Unless it's ranch, I guess, since that goes with just about anything.\nBut this is crouton, not some Ready-for-Android Native Chroot Host, alas.\n\nAnyway, this means that:\n * The repo is now locked, and no further changes will be considered.\n * Eventually someone will want the latest Ubuntu added to the release list. See\n   [this commit](https://github.com/dnschneid/crouton/commit/6d80f57b91c39d10b29fde861aac5a2b5b9b3910)\n   for an example of how to do it on your own copy.\n * Sometime around July 2025, the GitHub project will be archived, making the\n   issue tracker, discussions, and wiki read-only.\n * For the safety of users and stability of crouton's functionality for those on\n   EOL devices, offers to take over the dnschneid/crouton repo or extension will\n   be declined, and requests to change link destinations will be rejected.\n\nIf you have an EOL device, though, crouton is still a great match for you!\n * Chromium OS version 110 and earlier, everything should work! Breathe new life\n   into your old devices!!\n * Starting 111, crouton can't compile cras, so audio devices cannot be shared\n   with Chromium OS\n * Starting 117, sudo in crosh is disabled and you'll need to use VT-2\n * Starting 133 (139 for enterprise devices), manifest v2 is disabled and you\n   won't be able to run the extension (easy switching, clipboard sync, xiwi)\n * Also starting 133 (139 for enterprise devices), pnacl is disabled, so even if\n   you somehow got the extension working, xiwi won't function\n * Beyond that, it's anybody's guess as to what will break\n\n## Moving right along...\n\n:warning: **Steps to install crouton have changed!**  :warning:\n\nChromium OS has introduced several security features over the years that impede\nthe installation and usage of crouton. If your device is no longer receiving\nupdates, the steps below will likely work for you. However, if you are still\nhaving trouble, please try the [community-maintained instructions](https://github.com/dnschneid/crouton/wiki/Updated-Installation-Instructions-for-Crouton).\n\nIn addition, goo.gl is going away! That means the goo.gl/fd3zc you know and love\nhas been replaced with [git.io/JZEs0](https://git.io/JZEs0). That's a zero at\nthe end, if you were wondering. Both just point to\n[github](https://raw.githubusercontent.com/dnschneid/crouton/master/installer/crouton),\nso you can always just memorize the full link instead, which (fun fact) does not\ninclude any numbers at all!\n\n## \"crouton\"...an acronym?\n\nIt stands for _ChRomium Os Universal chrooT envirONment_\n...or something like that. Do capitals really matter if caps-lock has been\n(mostly) banished, and the keycaps are all lower-case?\n\nMoving on...\n\n\n## Who's this for?\n\nAnyone who wants to run straight Linux on their Chromium OS device, and doesn't\ncare about physical security. You're also better off having some knowledge of\nLinux tools and the command line in case things go funny, but it's not strictly\nnecessary.\n\n\n## What's a chroot?\n\nLike virtualization, chroots provide the guest OS with their own, segregated\nfile system to run in, allowing applications to run in a different binary\nenvironment from the host OS. Unlike virtualization, you are *not* booting a\nsecond OS; instead, the guest OS is running using the Chromium OS system. The\nbenefit to this is that there is zero speed penalty since everything is run\nnatively, and you aren't wasting RAM to boot two OSes at the same time. The\ndownside is that you must be running the correct chroot for your hardware, the\nsoftware must be compatible with Chromium OS's kernel, and machine resources are\ninextricably tied between the host Chromium OS and the guest OS. What this means\nis that while the chroot cannot directly access files outside of its view, it\n*can* access all of your hardware devices, including the entire contents of\nmemory. A root exploit in your guest OS will essentially have unfettered access\nto the rest of Chromium OS.\n\n...but hey, you can run [TuxRacer](https://en.wikipedia.org/wiki/Tux_Racer)!\n\n\n### What about dem crostinis though?\n\n[Crostini](https://chromium.googlesource.com/chromiumos/docs/+/HEAD/containers_and_vms.md)\nis an official project within Chromium OS to bring the Linux shell and apps to\nthe platform *in verified mode* with clean integration, multi-layered security,\nand all the polish you expect from Chromium OS proper.\n\nThat means compared to crouton, Crostini has official support, competent\nengineers, and code that looks a little less like ramen.  crouton, in its\ndefense, has wider device compatibility, enables direct hardware access, and is\nnamed after an objectively tastier bread-based food item.\n\nThere's a solid community on [Reddit](https://www.reddit.com/r/Crostini/) if\nyou'd like to try Crostini out.  If it works for you -- great!  No hard\nfeelings.  If in the end you decide that crouton suits you better, read on!\n\nNote: you can't get the best of both worlds by installing crouton inside of\nCrostini.  The technology (and life itself) just doesn't work that way.  Not to\nmention a crouton Crostini would look ridiculous and be impossible to eat\nwithout getting bits everywhere.\n\n\n## Prerequisites\n\nYou need a device running Chromium OS that has been switched to developer mode.\n\nFor instructions on how to do that, go to [this Chromium OS wiki page](https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices),\nclick on your device model and follow the steps in the *Entering Developer Mode*\nsection.\n\nNote that developer mode, in its default configuration, is *completely\ninsecure*, so don't expect a password in your chroot to keep anyone from your\ndata. crouton does support encrypting chroots, but the encryption is only as\nstrong as the quality of your passphrase. Consider this your warning.\n\nIt's also highly recommended that you install the [crouton extension](https://chromewebstore.google.com/detail/crouton-integration/gcpneefbbnfalgjniomfjknbcgkbijom),\nwhich, when combined with the `extension` or `xiwi` targets, provides much \nimproved integration with Chromium OS.\n\nThat's it! Surprised?\n\n\n## Usage\n\ncrouton is a powerful tool, and there are a *lot* of features, but basic usage\nis as simple as possible by design.\n\nIf you're just here to use crouton, you can grab the latest release from\n[https://git.io/JZEs0](https://git.io/JZEs0). Download it, pop open a\nshell (Ctrl+Alt+T, type `shell` and hit enter), make the installer executable\nwith `sudo install -Dt /usr/local/bin -m 755 ~/Downloads/crouton`, then launch\nit with `sudo crouton` to see the help text. See the \"examples\" section for some\nusage examples.\n\nIf you're modifying crouton, you'll probably want to clone or download the repo\ninto a subdirectory of `/usr/local` and then either run `installer/main.sh`\ndirectly, or use `make` to build your very own `crouton`. You can also download\nthe latest release, install it as above and run `crouton -x` to extract out the\njuicy scripts contained within, but you'll be missing build-time stuff like the\nMakefile. You also need to remember to place the unbundled scripts somewhere in\n`/usr/local` in order to be able to execute them.\n\ncrouton uses the concept of \"targets\" to decide what to install. While you will\nhave apt-get in your chroot, some targets may need minor hacks to avoid issues\nwhen running in the chrooted environment. As such, if you expect to want\nsomething that is fulfilled by a target, install that target when you make the\nchroot and you'll have an easier time.  Don't worry if you forget to include a\ntarget; you can always update the chroot later and add it. You can see the list\nof available targets by running `crouton -t help`.\n\nOnce you've set up your chroot, you can easily enter it using the\nnewly-installed `enter-chroot` command, or one of the target-specific\nstart\\* commands. Ta-da! That was easy.\n\n\n## Examples\n\n### The easy way (assuming you want an Ubuntu LTS with Xfce)\n\n  1. Download `crouton`\n  2. Open a shell (Ctrl+Alt+T, type `shell` and hit enter)\n  3. Copy the installer to an executable location by running\n     `sudo install -Dt /usr/local/bin -m 755 ~/Downloads/crouton`\n  4. Now that it's executable, run the installer itself: `sudo crouton -t xfce`\n  5. Wait patiently and answer the prompts like a good person.\n  6. Done! You can jump straight to your Xfce session by running\n     `sudo enter-chroot startxfce4` or, as a special shortcut, `sudo startxfce4`\n  7. Cycle through Chromium OS and your running graphical chroots using\n     Ctrl+Alt+Shift+Back and Ctrl+Alt+Shift+Forward.\n  8. Exit the chroot by logging out of Xfce.\n\n### With encryption!\n\n  1. Add the `-e` parameter when you run crouton to create an encrypted chroot\n     or encrypt a non-encrypted chroot.\n  2. You can get some extra protection on your chroot by storing the decryption\n     key separately from the place the chroot is stored. Use the `-k` parameter\n     to specify a file or directory to store the keys in (such as a USB drive or\n     SD card) when you create the chroot. Beware that if you lose this file,\n     your chroot will not be decryptable. That's kind of the point, of course.\n\n### Hey now, Ubuntu 16.04 is pretty old; I'm young and hip\n\n  1. The `-r` parameter specifies which distro release you want to use.\n  2. Run `crouton -r list` to list the recognized releases and which distros\n     they belong to.\n\n### Wasteful redundancies are wasteful: one clipboard, one browser, one window\n\n  1. Install the [crouton extension](https://chromewebstore.google.com/detail/crouton-integration/gcpneefbbnfalgjniomfjknbcgkbijom)\n     into Chromium OS.\n  2. Add the `extension` or `xiwi` version to your chroot.\n  3. Try some copy-pasta, or uninstall all your web browsers from the chroot.\n\n*Installing the extension and its target gives you synchronized clipboards, the\noption of using Chromium OS to handle URLs, and allows chroots to create\ngraphical sessions as Chromium OS windows.*\n\n### I don't always use Linux, but when I do, I use CLI\n\n  1. You can save a chunk of space by ditching X and just installing\n     command-line tools using `-t core` or `-t cli-extra`\n  2. Enter the chroot in as many crosh shells as you want simultaneously using\n     `sudo enter-chroot`\n  3. Use the [Crosh Window](https://chromewebstore.google.com/detail/crosh-window/nhbmpbdladcchdhkemlojfjdknjadhmh)\n     extension to keep Chromium OS from eating standard keyboard shortcuts.\n  4. If you installed cli-extra, `startcli` will launch a new VT right into the\n     chroot.\n\n### A new version of crouton came out; my chroot is therefore obsolete and sad\n\n  1. Exit the chroot if you have it open.\n  2. If you haven't already, download `crouton`, and copy it so it works:\n     `sudo install -Dt /usr/local/bin -m 755 ~/Downloads/crouton`\n  3. Update your chroot with `sudo crouton -u -n chrootname`. It will update\n     all installed targets.\n\n### I want to open my desktop in a window or a tab but I don't have the 'xiwi' target/xmethod.\n\n  1. Add 'xiwi' or any other target to an existing chroot with the `-u` option:\n     `sudo crouton -t xiwi -u -n chrootname`\n\n  This will also make 'xiwi' the default xmethod.\n\n  2. If you want to keep the 'xorg' xmethod as the default then pick it first:\n     `sudo sh crouton -t xorg,xiwi -u -n chrootname`\n\n### A backup a day keeps the price-gouging data restoration services away\n\n  1. `sudo edit-chroot -b chrootname` backs up your chroot to a timestamped\n     tarball in the current directory. Chroots are named either via the `-n`\n     parameter when created or by the release name if -n was not specified.\n  2. `sudo edit-chroot -r chrootname` restores the chroot from the most recent\n     timestamped tarball. You can explicitly specify the tarball with `-f`\n  3. If your machine is new, powerwashed, or held upside-down and shaken, you\n     can use the crouton installer to restore a chroot and relevant scripts:\n     `sudo crouton -f mybackup.tar.gz`\n\n*Unlike with Chromium OS, the data in your chroot isn't synced to the cloud.*\n\n### This chroot's name/location/password/existence sucks. How to fix?\n\n  1. Check out the `edit-chroot` command; it likely does what you need it to do.\n  2. If you set a Chromium OS root password, you can change it with\n     `sudo chromeos-setdevpasswd`\n  3. You can change the password inside your chroot with `passwd`\n\n### I want to install the chroot to another location\n\n  1. Use `-p` to specify the directory in which to install the chroot and\n     scripts. Be sure to quote or escape spaces.\n  2. When entering the chroot for the first time each boot, you will first need\n     to ensure the place you've installed the scripts is in a place that allows\n     executables to run. Determine the mountpoint by running\n     `df --output=target /path/to/enter-chroot`, then mark the mount exec with\n     `sudo mount -o remount,exec /path/to/mountpoint`.\n  3. You can then launch the chroot by specifying the full path of any of the\n     enter-chroot or start* scripts (i.e. `sudo /path/to/enter-chroot`), or use\n     the `-c` parameter to explicitly specify the chroots directory.\n\n*If for some reason you have to run the installer without touching the local\ndisk, you can (for the time being) run\n`curl -fL https://git.io/JZEs0 | sudo sh -s -- options_for_crouton_installer`.\nNote that this will definitely break in the near future, so don't depend on it.*\n\n### Downloading bootstrap files over and over again is a waste of time\n\n  1. Download `crouton`\n  2. Open a shell (Ctrl+Alt+T, type `shell` and hit enter)\n  3. Copy the installer to an executable location by running\n     `sudo install -Dt /usr/local/bin -m 755 ~/Downloads/crouton`\n  4. Now that it's executable, use the installer to build a bootstrap tarball:\n     `sudo crouton -d -f ~/Downloads/mybootstrap.tar.bz2`\n  5. Include the `-r` parameter if you want to specify for which release to\n     prepare a bootstrap.\n  6. You can then create chroots using the tarball by running\n     `sudo crouton -f ~/Downloads/mybootstrap.tar.bz2`. Make sure you also\n     specify the target environment with `-t`.\n\n*This is the quickest way to create multiple chroots at once, since you won't\nhave to determine and download the bootstrap files every time.*\n\n### Targets are cool. Abusing them for fun and profit is even cooler\n\n  1. You can make your own target files (start by copying one of the existing\n     ones) and then use them with any version of crouton via the `-T` parameter.\n\n*This is great for automating common tasks when creating chroots.*\n\n### Help! I've created a monster that must be slain!\n\n  1. The delete-chroot command is your sword, shield, and only true friend.\n     `sudo delete-chroot evilchroot`\n  2. It's actually just a shortcut to `sudo edit-chroot -d evilchroot`, which I\n     suppose makes it a bit of a deceptive Swiss Army knife friend...still good?\n\n\n## Tips\n\n  * Chroots are cheap! Create multiple ones using `-n`, break them, then make\n    new, better ones!\n  * You can change the distro mirror from the default by using `-m`\n  * Want to use a proxy? `-P` lets you specify one (or disable it).\n  * A script is installed in your chroot called `brightness`. You can assign\n    this to keyboard shortcuts to adjust the brightness of the screen (e.g.\n    `brightness up`) or keyboard (e.g. `brightness k down`).\n  * Multiple monitors will work fine in the chroot, but you may have to switch\n    to Chromium OS and back to enable them.\n  * You can make commands run in the background so that you can close the\n    terminal. This is particularly useful for desktop environments: try running\n    `sudo startxfce4 -b`\n  * Want to disable Chromium OS's power management? Run `croutonpowerd -i`\n  * Only want power management disabled for the duration of a command?\n    `croutonpowerd -i command and arguments` will automatically stop inhibiting\n    power management when the command exits.\n  * Have a Pixel or two or 4.352 million? `-t touch` improves touch support.\n  * Want to share some files and/or folders between Chromium OS and your chroot?\n    Check out the `/etc/crouton/shares` file, or read all about it in the wiki.\n  * Want more tips? Check the [wiki](https://github.com/dnschneid/crouton/wiki).\n\n\n## Issues?\n\nRunning another OS in a chroot is a pretty messy technique (although it's hidden\nbehind very pretty scripts), and while these scripts are relatively mature,\nChromium OS is changing all the time so problems are not surprising. Check the\nissue tracker and file a bug if your issue isn't there. When filing a new bug,\ninclude the output of `croutonversion` run from inside the chroot or, if you\ncannot mount your chroot, include the output of `cat /etc/lsb-release` from Crosh.\n\n\n## I want to be a Contributor!\n\nThat's great!  But before your code can be merged, you'll need to have signed\nthe [Individual Contributor License Agreement](https://cla.developers.google.com/clas/new?kind=KIND_INDIVIDUAL&domain=DOMAIN_GOOGLE).\nDon't worry, it only takes a minute and you'll definitely get to keep your\nfirstborn, probably.  If you've already signed it for contributing to Chromium\nor Chromium OS, you're already done.\n\nIf you don't know what to do with your time as an official Contributor, keep in\nmind that crouton is maintenance-only and will only be accepting a limited amount\nof changes.  That having been said, here's some suggestions:\n\n  * Really like a certain desktop environment? Fork crouton, add the target, and\n    let people know in the discussions area.\n  * Is your distro underrepresented? Want to contribute to the elusive and\n    mythical beast known as \"croagh\"? Fork crouton, add the distro, and people\n    will come.\n  * Discovered a bug lurking within the scripts, or a papercut that bothers you\n    just enough to make you want to actually do something about it? You guessed\n    it: fork crouton, fix everything, and create a pull request.\n  * Are most bugs too high-level for you to defeat? Grind up some\n    [EXP](https://en.wikipedia.org/wiki/Experience_point) by using\n    your fork to eat [pie](https://github.com/dnschneid/crouton/labels/pie).\n\n\n## Are there other, non-Contributory ways I can help?\n\nYes!\n\n\n## But how?\n\nThere's a way For Everyone to help!\n\n  * Something broken? File a bug! Bonus points if you try to fix it. It helps if\n    you provide the output of `croutonversion` (or the output of\n    `cat /etc/lsb-release` from Crosh) when you submit the bug.\n  * Look through [open issues](https://github.com/dnschneid/crouton/issues?state=open)\n    and see if there's a topic or application you happen to have experience\n    with. And then, preferably, share that experience with others.\n  * Find issues that need [wiki entries](https://github.com/dnschneid/crouton/issues?labels=needswiki&state=open,closed)\n    and add the relevant info to the [wiki](https://github.com/dnschneid/crouton/wiki).\n    Or just add things to/improve things in the wiki in general, but do try to\n    keep it relevant and organized.\n  * Really like a certain desktop environment, but not up for coding? Open or\n    comment on a bug with steps to get things working well.\n\n\n## License\n\ncrouton (including this eloquently-written README) is copyright &copy; 2016 The\ncrouton Authors. All rights reserved. Use of the source code included here is\ngoverned by a BSD-style license that can be found in the LICENSE file in the\nsource tree.\n"
        },
        {
          "name": "README.zh.md",
          "type": "blob",
          "size": 6.3837890625,
          "content": "# Crouton中文版教程\r\n\r\n> 基于crouton项目README的英文版进行汉化，部分内容没有进行汉化，建议有能力者优先阅读英文版本。\r\n\r\n## 简介\r\n\r\n​\tChroot是Chromium OS Universal Chroot Environment 的简写，是一系列脚本的合集，利用Linux的Chroot，在Chromebook上同时运行Chrome OS和某个Linux发行版。\r\n\r\n## Chroot介绍\r\n\r\n​\tChroot命令用来在指定的根目录下运行指令。Chroot的这种功能可以为第二系统提供一个隔离的文件系统，就像虚拟化一样，但是第二系统实际上仍然在主系统的文件系统下面工作，在进程和网络层面，chroot并没有进行隔离。\r\n\r\n​\t至于详细的内容，为什么不去问问[百度搜索](https://www.baidu.com/s?wd=chroot)？\r\n\r\n## 进入正题\r\n\r\n### 环境\r\n\r\n- **良好的**网络环境\r\n- 进入**开发者模式**的Chromebook，相关操作请进入[这个页面](https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices)（英文页面），点击对应的设备型号，按照*Entering Developer Mode*章节的步骤进行\r\n- 强烈建议安装[Crouton插件](https://chromewebstore.google.com/detail/crouton-integration/gcpneefbbnfalgjniomfjknbcgkbijom)，配合`extension`或者`xiwi`目标，可以提高第二系统与Chrome OS之间的交互体验\r\n\r\n### 用法\r\n\r\n1. 你需要从[这里](https://git.io/JZEs0)下载Crouton脚本。~~什么？下不下来？关我什么事~~\r\n\r\n2. 然后打开shell（`ctrl+alt+T`,在打开的窗口中输入`shell`，然后回车）。\r\n\r\n3. 输入`sudo install -Dt /usr/local/bin -m 755 ~/Downloads/crouton`，这一步是将下载下来的脚本安装到`/usr/local/bin`这个可执行目录里面。\r\n\r\n4. `sudo crouton`可以查看帮助，本教程**示例**部分会有一些命令使用举例。\r\n\r\n   如果你想对Crouton稍作修改，可以将本项目下载到`/usr/local`，直接运行`installer/main.sh`或者使用`make`进行编译。你也可以按上述四步安装crouton后，使用`crouton -x`将包含的脚本解压，不过那样的话你需要自己编写编译所需的文件，以及记住脚本所在的位置。\r\n\r\n   Crouton使用“目标”('targets')来决定安装什么。可用的目标可以运行`crouton -t help`来查看。\r\n\r\n   安装之后，可以输入`enter-chroot`，或者由你选择的安装目标所决定的 start* 命令。具体的命令，安装完成后终端会有介绍（英文）。  \r\n\r\n## 示例\r\n\r\n**简单示例（安装Ubuntu LTS，使用Xfce桌面环境）**\r\n\r\n1. 下载Crouton\r\n2. 打开shell（`ctrl+alt+T`,在打开的窗口中输入`shell`，然后回车）。\r\n3. 输入`sudo install -Dt /usr/local/bin -m 755 ~/Downloads/crouton`\r\n4. `sudo crouton -t xfce`\r\n5. 等吧，可以喝杯星巴克\r\n6. 安装完成后，使用`sudo enter-chroot startxfce4`，或者`sudo startxfce4`运行chroot，会自动跳至Xfce\r\n7. 登出/注销(logout)Xfce来退出chroot，**在Xfce里点击关机是没有用的**。\r\n\r\n**加密**\r\n\r\n1. 运行crouton是可以添加`-e`参数来创建一个加密的chroot环境，或者加密一个未加密的chroot环境\r\n2. 使用`-k`参数来指定储存密钥的路径\r\n\r\n**想用别的系统？**\r\n\r\n1. `-r`参数可以指定你想要使用的发行版和版本代号\r\n2. `crouton -r list`可以查看支持的发行版和版本代号（英文）\r\n\r\n**说好的“更好的交互体验”？**\r\n\r\n1. 在Chrome OS安装[Crouton插件](https://chromewebstore.google.com/detail/crouton-integration/gcpneefbbnfalgjniomfjknbcgkbijom)\r\n\r\n2. 在chroot环境中添加`extension`或者`xiwi`目标\r\n\r\n   这样可以同步chroot环境和主系统的剪贴板，允许chroot环境的程序在Chrome OS界面中窗口化运行。\r\n\r\n**只使用命令行**\r\n\r\n1. 指定安装目标时可以只使用`-t core`或者`-t cli-extra`\r\n2. 使用`sudo enter-chroot`进入chroot环境\r\n3. 使用[Crosh Window插件](https://chromewebstore.google.com/detail/crosh-window/nhbmpbdladcchdhkemlojfjdknjadhmh)，防止chroot命令行环境导致的快捷键失效\r\n\r\n**升级chroot环境**\r\n\r\n​\t使用`sudo crouton -u -n chrootname`来升级chroot环境中的系统。\r\n\r\n**安装后想添加一些安装目标？**\r\n\r\n​\t使用`-u`参数来添加安装目标。\r\n\r\n​\t比如，添加`xiwi`目标：`sudo crouton -t xiwi -u -n chrootname`\r\n\r\n​\t上述命令会让xiwi成为默认的[X窗口方法](https://baike.baidu.com/item/X%E7%AA%97%E5%8F%A3/1471357?fr=aladdin)（原默认方法为xorg），如果想让X窗口方法继续保持默认：\r\n\r\n​\t`sudo crouton -t xorg,xiwi -u -n chrootname`\r\n\r\n**备份**\r\n\r\n​\t`sudo edit-chroot -b chrootname`会在命令运行目录下生成chroot环境的tar格式的备份文件（带备份时间戳），Chroot环境的名字可以在安装时由`-n`参数指定，未指定时默认为所安装的Linux发行版版本代号（例如，默认的Ubuntu 16.04LTS版本代号为xenial）\r\n\r\n​\t`sudo edit-chroot -r chrootname`默认恢复最近一次的备份文件。可以用`-r`参数指定恢复文件\r\n\r\n​\t对全新或者重置过的电脑，可以使用Crouton的恢复命令：`sudo crouton -f mybackup.tar.gz`\r\n\r\n**更改安装位置**\r\n\r\n​\t`-p`参数可指定chroot的安装位置。\r\n\r\n​\t每次启动电脑后第一次启动chroot，请确定chroot的安装位置是可执行（executable）的：\r\n\r\n\t1. 确定挂载点：`df --output=target /path/to/enterchroot`\r\n \t2. 使挂载点可读写：`sudo mount -o remount,exec /path/to/mountpoint`\r\n\r\n**删除Chroot环境**\r\n\r\n​\t`sudo delete-chroot chrootname`\r\n\r\n## 使用提醒\r\n\r\n- 使用`-n`来指定Chroot环境的名字，可以创建多个chroot环境\r\n- 使用`-m`参数更改镜像源\r\n- `-P`参数开启/关闭Chroot环境的代理，仅支持http/https\r\n- chroot内置`brightness`脚本，可以：\r\n  - 调节屏幕亮度（比如，在chroot内运行`brightness up`）\r\n  - 调节背光键盘亮度（比如，在chroot内运行：`brightness k down`）\r\n- 使用多屏可能需要先切换到Chrome OS界面，然后再切换回来\r\n- 运行命令添加`-b`参数可以让chroot在后台运行，比如：`sudo startxfce4 -b`\r\n- `croutonpowerd -i`可以关闭Chrome OS的电源管理\r\n- `croutonpowerd -i command and arguments`可以指定在chroot执行某些命令时关闭Chrome OS的电源管理\r\n- `touch`安装目标可以改善触摸屏设备的使用体验\r\n- 本项目Wiki中有关于文件共享的介绍\r\n- [Wiki](https://github.com/dnschneid/crouton/wiki)中也有更多其他提示（英文）\r\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "chroot-bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "chroot-etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "host-bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "host-ext",
          "type": "tree",
          "content": null
        },
        {
          "name": "installer",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "targets",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}