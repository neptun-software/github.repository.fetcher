{
  "metadata": {
    "timestamp": 1736568917665,
    "page": 136,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjEzNw==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spotify/docker-gc",
      "stars": 5047,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0146484375,
          "content": ".git/\ndebian/\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.05078125,
          "content": "language: generic\nscript: sudo ./tests/run-tests.sh\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.4599609375,
          "content": "# Contributing\n\n\n## Response Times\n\nThis project is developed and maintained by an infrastructure team at Spotify. Lots of teams at\nSpotify use relatively recent versions of this project in production for mission-critical systems.\n\nThat being said, this is our day job where our primary users are our colleagues.\nSo we might be slow in getting back to you because we're busy working on Spotify-specific things\nor because your issues are being prioritized behind those of our colleagues.\n\nPlease poke us if you feel you're being neglected, and we'll do our best to get back to you.\n\n## Related Tools You May Find Useful\n\nIf you like this project, you might also like [Helios][2], [docker-client][3], [docker-maven-plugin][4],\n[helios-skydns][5], and [helios-consul][6].\n\n## Reporting Bugs\n\nPlease make sure you're using the latest version. This project is\nreleased continuously as it's developed so new releases come out almost as frequently as we\ncommit to master.\n\n## Contributing\n\nBefore creating a new issue, see if there's already an existing issue.\n\nIf you create a minor bugfix, feel free to submit a PR.\nIf your PR is for a significant change or a new feature, feel free to ask for our feedback\nbefore writing code to check we're on the same page.\n\n  [2]: https://github.com/spotify/helios\n  [3]: https://github.com/spotify/docker-client\n  [4]: https://github.com/spotify/docker-maven-plugin\n  [5]: https://github.com/spotify/helios-skydns\n  [6]: https://github.com/spotify/helios-consul\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.375,
          "content": "FROM alpine:3.10\n\nENV DOCKER_VERSION 18.09.6\n\nRUN apk --no-cache add bash \\\n  && wget -q https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_VERSION}.tgz \\\n  && tar zxf docker-${DOCKER_VERSION}.tgz \\\n  && mv docker/docker /usr/local/bin/ \\\n  && rm -rf docker/ docker-${DOCKER_VERSION}.tgz\n\nCOPY ./docker-gc /docker-gc\n\nVOLUME /var/lib/docker-gc\n\nCMD [\"/docker-gc\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile.docker",
          "type": "blob",
          "size": 0.2568359375,
          "content": "DOCKER_REPOSITORY ?= spotify/docker-gc\nDOCKER_TAG ?= $(shell cat version.txt)\n\nDOCKER ?= docker\nexport DOCKER\n\n.PHONY: all image push\n\nimage:\n\t$(DOCKER) build -t $(DOCKER_REPOSITORY):$(DOCKER_TAG) .\n\npush: image\n\t$(DOCKER) push $(DOCKER_REPOSITORY):$(DOCKER_TAG)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.201171875,
          "content": "# docker-gc\n\n[![Build Status](https://travis-ci.com/spotify/docker-gc.svg?branch=master)](https://travis-ci.com/spotify/docker-gc)\n[![License](https://img.shields.io/github/license/spotify/docker-client.svg)](LICENSE)\n\n## Status: mature\n\n**We're not developing or accepting new features.**\n\nConsider using [`docker system prune`][prune] instead.\n\n\n* [Building](#building)\n* [Installing](#installing)\n* [Usage](#usage)\n  * [Excluding Images From Garbage Collection](#excluding-images-from-garbage-collection)\n  * [Excluding Containers From Garbage Collection](#excluding-containers-from-garbage-collection)\n  * [Running as a Docker Image](#running-as-a-docker-image)\n    * [Build the Docker Image](#build-the-docker-image)\n    * [Running as a Docker Container](#running-as-a-docker-container)\n\nA simple Docker container and image garbage collection script.\n\n* Containers that exited more than an hour ago are removed.\n* Images that don't belong to any remaining container after that are removed.\n* Optionally, remove volumes that are not associated to any remaining container after removal (Available only for docker >= 1.9.0)\n\nAlthough docker normally prevents removal of images that are in use by\ncontainers, we take extra care to not remove any image tags (e.g., ubuntu:14.04,\nbusybox, etc) that are in use by containers. A naive `docker rmi $(docker images\n-q)` will leave images stripped of all tags, forcing docker to re-pull the\nrepositories when starting new containers even though the images themselves are\nstill on disk.\n\nThis script is intended to be run as a cron job, but you can also run it as a Docker\ncontainer (see [below](#running-as-a-docker-container)).\n\n## Building the Debian Package\n\n\n```sh\nsudo apt-get install git devscripts debhelper build-essential dh-make\ngit clone https://github.com/spotify/docker-gc.git\ncd docker-gc\ndebuild -us -uc -b\n```\n\nIf you get lintian errors during `debuild`, try `debuild --no-lintian -us -uc -b`.\n\n\n## Installing the Debian Package\n\n```sh\nsudo dpkg -i ../docker-gc_0.1.0_all.deb\n```\n\nThis installs the `docker-gc` script into `/usr/sbin`. If you want it to\nrun as a cron job, you can configure it now by creating a root-owned\nexecutable file `/etc/cron.hourly/docker-gc` with the following contents:\n\n```\n#!/bin/bash\n/usr/sbin/docker-gc\n```\n\nTo test that the job will actually run you can use this command\n\n```\nrun-parts --test /etc/cron.hourly\n```\n\n## Manual Usage\n\nTo use the script manually, run `docker-gc`. The system user under\nwhich `docker-gc` runs needs to have read and write access to\nthe `$STATE_DIR` environment variable which defaults to `/var/lib/docker-gc`.\n\n\n### Excluding Images From Garbage Collection\n\nThere can be images that are large that serve as a common base for\nmany application containers, and as such, make sense to pin to the\nmachine, as many derivative containers will use it.  This can save\ntime in pulling those kinds of images.  There may be other reasons to\nexclude images from garbage collection.  To do so, create\n`/etc/docker-gc-exclude`, or if you want the file to be read from\nelsewhere, set the `EXCLUDE_FROM_GC` environment variable to its\nlocation.  This file can contain image name patterns (in the `grep`\nsense), one per line, such as `spotify/cassandra:latest` or it can\ncontain image ids (truncated to the length shown in `docker images`\nwhich is 12.\n\nAn example image excludes file might contain:\n```\nspotify/cassandra:latest\nredis:.*\n9681260c3ad5\n```\n\n### Excluding Containers From Garbage Collection\n\nThere can also be containers (for example data only containers) which\nyou would like to exclude from garbage collection. To do so, create\n`/etc/docker-gc-exclude-containers`, or if you want the file to be\nread from elsewhere, set the `EXCLUDE_CONTAINERS_FROM_GC` environment\nvariable to its location. This file should contain name patterns (in\nthe `grep` sense), one per line, such as `mariadb-data`.\n\nAn example container excludes file might contain:\n```\nmariadb-data\ndrunk_goodall\n```\n\n### Excluding Volumes From Garbage Collection\n\nThere can be occasions where you don't want to remove a dangling volume.\nTo enable this functionality you can create a file named\n`/etc/docker-gc-exclude-volumes` (or specify `EXCLUDE_VOLUMES_IDS_FILE` env var\nwith any path for such file), containing name patterns (in the `grep` sense),\none per line, of volumes that will be excluded from garbage collection.\n\n### Forcing deletion of images that have multiple tags\n\nBy default, docker will not remove an image if it is tagged in multiple\nrepositories.\nIf you have a server running docker where this is the case, for example\nin CI environments where dockers are being built, re-tagged, and pushed,\nyou can enable a force flag to override this default.\n\n```\nFORCE_IMAGE_REMOVAL=1 docker-gc\n```\n\n### Preserving a minimum number of images for every repository\n\nYou might want to always keep a set of the most recent images for any\nrepository. For example, if you are continually rebuilding an image during\ndevelopment you would want to clear out all but the most recent version of an\nimage. To do so, set the `MINIMUM_IMAGES_TO_SAVE=1` environment variable. You\ncan preserve any count of the most recent images, e.g. save the most recent 10\nwith `MINIMUM_IMAGES_TO_SAVE=10`.\n\n### Forcing deletion of containers\n\nBy default, if an error is encountered when cleaning up a container, Docker\nwill report the error back and leave it on disk.  This can sometimes lead to\ncontainers accumulating.  If you run into this issue, you can force the removal\nof the container by setting the environment variable below:\n\n```\nFORCE_CONTAINER_REMOVAL=1 docker-gc\n```\n\n### Excluding Recently Exited Containers and Images From Garbage Collection\n\nBy default, docker-gc will not remove a container if it exited less than 3600 seconds (1 hour) ago. In some cases you might need to change this setting (e.g. you need exited containers to stick around for debugging for several days). Set the `GRACE_PERIOD_SECONDS` variable to override this default.\n\n```\nGRACE_PERIOD_SECONDS=86400 docker-gc\n```\n\nThis setting also prevents the removal of images that have been created less than `GRACE_PERIOD_SECONDS` seconds ago.\n\n### Dry run\nBy default, docker-gc will proceed with deletion of containers and images. To test your command-line options set the `DRY_RUN` variable to override this default.\n\n```\nDRY_RUN=1 docker-gc\n```\n\n\n## Running as a Docker Image\n\nA Dockerfile is provided as an alternative to a local installation. By default\nthe container will start up, run a single garbage collection, and shut down.\n\nThe image is published as `spotify/docker-gc`.\n\n#### Building the Docker Image\nThe image is currently built with Docker 17.09.0-ce, but to build it against a newer\nDocker version (to ensure that the API version of the command-line interface\nmatches with your Docker daemon), simply edit [the `ENV DOCKER_VERSION` line in\n`Dockerfile`][dockerfile-ENV] prior to the build step below.\n\n[dockerfile-ENV]: https://github.com/spotify/docker-gc/blob/fd6640fa8c133de53a0395a36e8dcbaf29842684/Dockerfile#L3\n\nBuild the Docker image with `make -f Makefile.docker image` or:\n\n```sh\ndocker build -t spotify/docker-gc .\n```\n\n#### Running as a Docker Container\n\nThe docker-gc container requires access to the docker socket in order to\nfunction, so you need to map it when running, e.g.:\n\n```sh\ndocker run --rm --privileged -v /var/run/docker.sock:/var/run/docker.sock -v /etc:/etc:ro spotify/docker-gc\n```\n\nThe `/etc` directory is also mapped so that it can read any exclude files\nthat you've created.\n\nIf you want to remove volumes, you can do so by passing REMOVE_VOLUMES env var set to 1.\n\n```sh\n$ docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v /etc:/etc -e REMOVE_VOLUMES=1 spotify/docker-gc\n```\n\nIf you want to remove volumes only for a specified driver, you can do it by passing VOLUME_DELETE_ONLY_DRIVER env var set to the driver name.\n\nIf your docker daemon is configured to run with user namespace, you will need to\nrun the container with [user namespace disabled][disable-user-namespace]:\n\n```sh\ndocker run --rm --userns host -v /var/run/docker.sock:/var/run/docker.sock -v /etc:/etc spotify/docker-gc\n```\n\n[disable-user-namespace]: https://docs.docker.com/engine/reference/commandline/dockerd/#disable-user-namespace-for-a-container\n[prune]: https://docs.docker.com/engine/reference/commandline/system_prune/\n"
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-gc",
          "type": "blob",
          "size": 11.677734375,
          "content": "#!/bin/bash\n\n# Copyright (c) 2014 Spotify AB.\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n# This script attempts to garbage collect docker containers and images.\n# Containers that exited more than an hour ago are removed.\n# Images that have existed more than an hour and are not in use by any\n# containers are removed.\n\n# Note: Although docker normally prevents removal of images that are in use by\n#       containers, we take extra care to not remove any image tags (e.g.\n#       ubuntu:14.04, busybox, etc) that are used by containers. A naive\n#       \"docker rmi `docker images -q`\" will leave images stripped of all tags,\n#       forcing users to re-pull the repositories even though the images\n#       themselves are still on disk.\n\n# Note: State is stored in $STATE_DIR, defaulting to /var/lib/docker-gc\n\n# The script can send log messages to syslog regarding which images and\n# containers were removed. To enable logging to syslog, set LOG_TO_SYSLOG=1.\n# When disabled, this script will instead log to standard out. When syslog is\n# enabled, the syslog facility and logger can be configured with\n# $SYSLOG_FACILITY and $SYSLOG_LEVEL respectively.\n\nset -o nounset\nset -o errexit\n\nGRACE_PERIOD_SECONDS=${GRACE_PERIOD_SECONDS:=3600}\nMINIMUM_IMAGES_TO_SAVE=${MINIMUM_IMAGES_TO_SAVE:=0}\nSTATE_DIR=${STATE_DIR:=/var/lib/docker-gc}\nREMOVE_ASSOCIATED_VOLUME=${REMOVE_ASSOCIATED_VOLUME=1}\nFORCE_CONTAINER_REMOVAL=${FORCE_CONTAINER_REMOVAL:=0}\nFORCE_IMAGE_REMOVAL=${FORCE_IMAGE_REMOVAL:=0}\nDOCKER=${DOCKER:=docker}\nPID_DIR=${PID_DIR:=/var/run}\nLOG_TO_SYSLOG=${LOG_TO_SYSLOG:=0}\nSYSLOG_FACILITY=${SYSLOG_FACILITY:=user}\nSYSLOG_LEVEL=${SYSLOG_LEVEL:=info}\nSYSLOG_TAG=${SYSLOG_TAG:=docker-gc}\nDRY_RUN=${DRY_RUN:=0}\nEXCLUDE_DEAD=${EXCLUDE_DEAD:=0}\nREMOVE_VOLUMES=${REMOVE_VOLUMES:=0}\nEXCLUDE_VOLUMES_IDS_FILE=${EXCLUDE_VOLUMES_IDS_FILE:=/etc/docker-gc-exclude-volumes}\nVOLUME_DELETE_ONLY_DRIVER=${VOLUME_DELETE_ONLY_DRIVER:=local}\nPIDFILE=$PID_DIR/dockergc\n\nexec 3>>$PIDFILE\nif ! flock -x -n 3; then\n  echo \"[$(date)] : docker-gc : Process is already running\"\n  exit 1\nfi\n\ntrap \"rm -f -- '$PIDFILE'\" EXIT\n\necho $$ > $PIDFILE\n\nEXCLUDE_FROM_GC=${EXCLUDE_FROM_GC:=/etc/docker-gc-exclude}\nif [ ! -f \"$EXCLUDE_FROM_GC\" ]; then\n  EXCLUDE_FROM_GC=/dev/null\nfi\n\nEXCLUDE_CONTAINERS_FROM_GC=${EXCLUDE_CONTAINERS_FROM_GC:=/etc/docker-gc-exclude-containers}\nif [ ! -f \"$EXCLUDE_CONTAINERS_FROM_GC\" ]; then\n  EXCLUDE_CONTAINERS_FROM_GC=/dev/null\nfi\n\nEXCLUDE_IDS_FILE=\"exclude_ids\"\nEXCLUDE_CONTAINER_IDS_FILE=\"exclude_container_ids\"\n\nfunction date_parse() {\n  if date --utc >/dev/null 2>&1; then\n    # GNU/date\n    date -u --date \"${1}\" \"+%s\"\n  else\n    # BSD/date\n    date -j -u -f \"%F %T\" \"${1}\" \"+%s\"\n  fi\n}\n\n# Elapsed time since a docker timestamp, in seconds\nfunction elapsed_time() {\n  # Docker 1.5.0 datetime format is 2015-07-03T02:39:00.390284991\n  # Docker 1.7.0 datetime format is 2015-07-03 02:39:00.390284991 +0000 UTC\n  utcnow=$(date -u \"+%s\")\n  replace_q=\"${1#\\\"}\"\n  without_ms=\"${replace_q:0:19}\"\n  replace_t=\"${without_ms/T/ }\"\n  epoch=$(date_parse \"${replace_t}\")\n  echo $(($utcnow - $epoch))\n}\n\nfunction compute_exclude_ids() {\n  # Find images that match patterns in the EXCLUDE_FROM_GC file and put their\n  # id prefixes into $EXCLUDE_IDS_FILE, prefixed with ^\n\n  PROCESSED_EXCLUDES=\"processed_excludes.tmp\"\n  # Take each line and put a space at the beginning and end, so when we\n  # grep for them below, it will effectively be: \"match either repo:tag\n  # or imageid\".  Also delete blank lines or lines that only contain\n  # whitespace\n  sed 's/^\\(.*\\)$/ \\1 /' $EXCLUDE_FROM_GC | sed '/^ *$/d' > $PROCESSED_EXCLUDES\n  # The following looks a bit of a mess, but here's what it does:\n  # 1. Get images\n  # 2. Skip header line\n  # 3. Turn columnar display of 'REPO TAG IMAGEID ....' to 'REPO:TAG IMAGEID'\n  # 4. find lines that contain things mentioned in PROCESSED_EXCLUDES\n  # 5. Grab the image id from the line\n  # 6. Prepend ^ to the beginning of each line\n\n  # What this does is make grep patterns to match image ids mentioned by\n  # either repo:tag or image id for later greppage\n  $DOCKER images \\\n    | tail -n+2 \\\n    | sed 's/^\\([^ ]*\\) *\\([^ ]*\\) *\\([^ ]*\\).*/ \\1:\\2 \\3 /' \\\n    | grep -f $PROCESSED_EXCLUDES 2>/dev/null \\\n    | cut -d' ' -f3 \\\n    | sed 's/^/^(sha256:)?/' > $EXCLUDE_IDS_FILE\n}\n\nfunction compute_exclude_container_ids() {\n  # Find containers matching to patterns listed in EXCLUDE_CONTAINERS_FROM_GC file\n  # Implode their values with a \\| separator on a single line\n  PROCESSED_EXCLUDES=`xargs < $EXCLUDE_CONTAINERS_FROM_GC \\\n    | sed -e 's/ /\\|/g'`\n  # The empty string would match everything\n  if [ \"$PROCESSED_EXCLUDES\" = \"\" ]; then\n    touch $EXCLUDE_CONTAINER_IDS_FILE\n    return\n  fi\n  # Find all docker images\n  # Filter out with matching names\n  # and put them to $EXCLUDE_CONTAINER_IDS_FILE\n  $DOCKER ps -a \\\n    | grep -E \"$PROCESSED_EXCLUDES\" \\\n    | awk '{ print $1 }' \\\n    | tr -s \" \" \"\\012\" \\\n    | sort -u > $EXCLUDE_CONTAINER_IDS_FILE\n}\n\nfunction log() {\n  msg=$1\n  if [[ $LOG_TO_SYSLOG -gt 0 ]]; then\n    logger -i -t \"$SYSLOG_TAG\" -p \"$SYSLOG_FACILITY.$SYSLOG_LEVEL\" \"$msg\"\n  else\n    echo \"[$(date +'%Y-%m-%dT%H:%M:%S')] [INFO] : $msg\"\n  fi\n}\n\nfunction container_log() {\n  prefix=$1\n  filename=$2\n\n  while IFS='' read -r containerid\n  do\n    log \"$prefix $containerid $(${DOCKER} inspect -f {{.Name}} $containerid)\"\n  done < \"$filename\"\n}\n\nfunction image_log() {\n  prefix=$1\n  filename=$2\n\n  while IFS='' read -r imageid\n  do\n    log \"$prefix $imageid $(${DOCKER} inspect -f {{.RepoTags}} $imageid)\"\n  done < \"$filename\"\n}\n\nfunction volumes_log() {\n  prefix=$1\n  filename=$2\n\n  while IFS='' read -r volumeid\n  do\n    log \"$prefix $volumeid\"\n  done < \"$filename\"\n}\n\n# Change into the state directory (and create it if it doesn't exist)\nif [ ! -d \"$STATE_DIR\" ]; then\n  mkdir -p $STATE_DIR\nfi\ncd \"$STATE_DIR\"\n\n# Verify that docker is reachable\n$DOCKER version 1>/dev/null\n\n# List all currently existing containers\n$DOCKER ps -a -q --no-trunc | sort | uniq > containers.all\n\n# List running containers\n$DOCKER ps -q --no-trunc | sort | uniq > containers.running\ncontainer_log \"Container running\" containers.running\n\n# compute ids of container images to exclude from GC\ncompute_exclude_ids\n\n# compute ids of containers to exclude from GC\ncompute_exclude_container_ids\n\n# List containers that are not running\ncomm -23 containers.all containers.running > containers.exited\n\nif [[ $EXCLUDE_DEAD -gt 0 ]]; then\n  echo \"Excluding dead containers\"\n  # List dead containers\n  $DOCKER ps -q -a -f status=dead | sort | uniq > containers.dead\n  comm -23 containers.exited containers.dead > containers.exited.tmp\n  cp containers.exited.tmp containers.exited\nfi\n\ncontainer_log \"Container not running\" containers.exited\n\n# Find exited containers that finished at least GRACE_PERIOD_SECONDS ago\n> containers.reap.tmp\nwhile read line\ndo\n  EXITED=$(${DOCKER} inspect -f \"{{json .State.FinishedAt}}\" ${line})\n  ELAPSED=$(elapsed_time $EXITED)\n  if [[ $ELAPSED -gt $GRACE_PERIOD_SECONDS ]]; then\n    echo $line >> containers.reap.tmp\n  fi\ndone < containers.exited\n\n# List containers that we will remove and exclude ids.\nsort containers.reap.tmp | uniq | grep -v -f $EXCLUDE_CONTAINER_IDS_FILE > containers.reap || true\n\n# List containers that we will keep.\ncomm -23 containers.all containers.reap > containers.keep\n\n# List images used by containers that we keep.\nxargs -n 1 $DOCKER inspect -f '{{.Image}}' < containers.keep 2>/dev/null |\nsort | uniq > images.used\n\n# List images to reap; images that existed last run and are not in use.\necho -n \"\" > images.all\n$DOCKER images | while read line\ndo\n  awk '{print $1};'\ndone | sort | uniq | while read line\ndo\n  $DOCKER images --no-trunc --format \"{{.ID}} {{.CreatedAt}}\" $line \\\n    | sort -k 2 -r \\\n    | tail -n +$((MINIMUM_IMAGES_TO_SAVE+1)) \\\n    | cut -f 1 -d \" \" \\\n    | uniq >> images.all\ndone\n\n# Add dangling images to list.\n$DOCKER images --no-trunc --format \"{{.ID}}\" --filter dangling=true >> images.all\n\n# Find images that are created at least GRACE_PERIOD_SECONDS ago\n> images.reap.tmp\nsort images.all | uniq | while read line\ndo\n  # the `docker inspect` command might fail sometimes due to issues like\n  # https://github.com/moby/moby/issues/35747 - don't let that abort this script\n  set +o errexit\n  CREATED=$(${DOCKER} inspect -f \"{{.Created}}\" ${line})\n  retval=$?\n  set -o errexit\n  if [ $retval -eq 0 ]; then\n    ELAPSED=$(elapsed_time $CREATED)\n    if [[ $ELAPSED -gt $GRACE_PERIOD_SECONDS ]]; then\n      echo $line >> images.reap.tmp\n    fi\n  fi\ndone\ncomm -23 images.reap.tmp images.used | grep -E -v -f $EXCLUDE_IDS_FILE > images.reap || true\n\n# Use -f flag on docker rm command; forces removal of images that are in Dead\n# status or give errors when removing.\nFORCE_CONTAINER_FLAG=\"\"\nif [[ $FORCE_CONTAINER_REMOVAL -gt 0 ]]; then\n  FORCE_CONTAINER_FLAG=\"-f\"\nfi\n\n# Remove associated volume, so that we won't create new orphan volumes.\nif [[ $REMOVE_ASSOCIATED_VOLUME -gt 0 ]]; then\n  if [[ -z $FORCE_CONTAINER_FLAG ]]; then\n    FORCE_CONTAINER_FLAG=\"-v\"\n  else\n    FORCE_CONTAINER_FLAG=$FORCE_CONTAINER_FLAG\"v\"\n  fi\nfi\n# Reap containers.\nif [[ $DRY_RUN -gt 0 ]]; then\n  container_log \"The following container would have been removed\" containers.reap\nelse\n  container_log \"Removing containers\" containers.reap\n  xargs -n 1 $DOCKER rm $FORCE_CONTAINER_FLAG --volumes=true < containers.reap &>/dev/null || true\nfi\n\n# Use -f flag on docker rmi command; forces removal of images that have multiple tags\nFORCE_IMAGE_FLAG=\"\"\nif [[ $FORCE_IMAGE_REMOVAL -gt 0 ]]; then\n  FORCE_IMAGE_FLAG=\"-f\"\nfi\n\n# Reap images.\nif [[ $DRY_RUN -gt 0 ]]; then\n  image_log \"The following image would have been removed\" images.reap\nelse\n  image_log \"Removing image\" images.reap\n  xargs -n 1 $DOCKER rmi $FORCE_IMAGE_FLAG < images.reap &>/dev/null || true\nfi\n\nif [[ $REMOVE_VOLUMES -gt 0 ]]; then\n  set +e\n  $DOCKER volume ls --filter \"dangling=true\" -q &> /dev/null\n  VOLUMES=$?\n  set -e\n  # If docker volume ls fails, then is probably not supported by either client or server\n  if [ ! -f \"$EXCLUDE_VOLUMES_IDS_FILE\" ]; then\n    EXCLUDE_VOLUMES_IDS_FILE=/dev/null\n  fi\n\n  if [[ $VOLUMES -gt 0 ]]; then\n    set +e\n    VERSION=$($DOCKER version --format=\"Client: {{.Client.Version}} Server: {{.Server.Version}}\" 2&>/dev/null)\n    FORMAT=$?\n    set -e\n    if [[ $FORMAT -gt 0 ]]; then\n      log \"Removing volumes is not supported for Docker < 1.9.0\"\n    else\n      MESSAGE=\"Removing volumes is not supported for for docker version \"$($DOCKER version --format=\"Client: {{.Client.Version}} Server: {{.Server.Version}}\") &\n      log \"$MESSAGE\"\n    fi\n  else\n    if [[ -z \"$VOLUME_DELETE_ONLY_DRIVER\" ]]; then\n      $DOCKER volume ls --filter \"dangling=true\" -q | grep -v -f $EXCLUDE_VOLUMES_IDS_FILE > volumes.reap || true\n    else\n      $DOCKER volume ls --filter \"dangling=true\" --filter \"driver=$VOLUME_DELETE_ONLY_DRIVER\" -q | grep -v -f $EXCLUDE_VOLUMES_IDS_FILE > volumes.reap || true\n    fi\n\n    if [[ $DRY_RUN -gt 0 ]]; then\n      volumes_log \"The following volume would have been removed\" volumes.reap\n    else\n      volumes_log \"Removing volume\" volumes.reap\n      xargs -n 1 $DOCKER volume rm < volumes.reap &>/dev/null || true\n    fi\n  fi\nfi\n"
        },
        {
          "name": "rpm",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.txt",
          "type": "blob",
          "size": 0.005859375,
          "content": "0.2.1\n"
        }
      ]
    }
  ]
}