{
  "metadata": {
    "timestamp": 1736568836387,
    "page": 18,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Fmstrat/winapps",
      "stars": 8866,
      "defaultBranch": "main",
      "files": [
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.5283203125,
          "content": "# WinApps for Linux\n\nRun Windows apps such as Microsoft Office/Adobe in Linux (Ubuntu/Fedora) and GNOME/KDE as if they were a part of the native OS, including Nautilus integration for right clicking on files of specific mime types to open them.\n\n<img src=\"demo/demo.gif\" width=1000>\n\n***Proud to have made the top spot on [r/linux](https://www.reddit.com/r/linux) on launch day.***\n\n## How it works\nWinApps was created as an easy, one command way to include apps running inside a VM (or on any RDP server) directly into GNOME as if they were native applications. WinApps works by:\n- Running a Windows RDP server in a background VM container\n- Checking the RDP server for installed applications such as Microsoft Office\n- If those programs are installed, it creates shortcuts leveraging FreeRDP for both the CLI and the GNOME tray\n- Files in your home directory are accessible via the `\\\\tsclient\\home` mount inside the VM\n- You can right click on any files in your home directory to open with an application, too\n\n## Currently supported applications\n### WinApps supports ***ANY*** installed application on your system.\n\nIt does this by:\n1. Scanning your system for offically configured applications (below)\n2. Scanning your system for any other EXE files with install records in the Windows Registry\n\nAny officially configured applications will have support for high-resolution icons and mime types for automatically detecting what files can be opened by each application. Any other detected executable files will leverage the icons pulled from the EXE.\n\nNote: The officially configured application list below is fueled by the community, and therefore some apps may be untested by the WinApps team.\n\n<table cellpadding=\"10\" cellspacing=\"0\" border=\"0\">\n  <tr>\n    <td><img src=\"apps/acrobat-x-pro/icon.svg\" width=\"100\"></td><td>Adobe Acrobat Pro<br>(X)</td>\n    <td><img src=\"apps/acrobat-reader-dc/icon.svg\" width=\"100\"></td><td>Adobe Acrobat Reader<br>(DC)</td>\n  </tr>\n  <tr>\n    <td><img src=\"apps/aftereffects-cc/icon.svg\" width=\"100\"></td><td>Adobe After Effects<br>(CC)</td>\n    <td><img src=\"apps/audition-cc/icon.svg\" width=\"100\"></td><td>Adobe Audition<br>(CC)</td>\n  </tr>\n  <tr>\n    <td><img src=\"apps/bridge-cs6/icon.svg\" width=\"100\"></td><td>Adobe Bridge<br>(CS6, CC)</td>\n    <td><img src=\"apps/adobe-cc/icon.svg\" width=\"100\"></td><td>Adobe Creative Cloud<br>(CC)</td>\n  </tr>\n  <tr>\n    <td><img src=\"apps/illustrator-cc/icon.svg\" width=\"100\"></td><td>Adobe Illustrator<br>(CC)</td>\n    <td><img src=\"apps/indesign-cc/icon.svg\" width=\"100\"></td><td>Adobe InDesign<br>(CC)</td>\n  </tr>\n  <tr>\n    <td><img src=\"apps/lightroom-cc/icon.svg\" width=\"100\"></td><td>Adobe Lightroom<br>(CC)</td>\n    <td><img src=\"apps/photoshop-cc/icon.svg\" width=\"100\"></td><td>Adobe Photoshop<br>(CS6, CC)</td>\n  </tr>\n  <tr>\n    <td><img src=\"apps/premiere-pro-cc/icon.svg\" width=\"100\"></td><td>Adobe Premiere Pro<br>(CC)</td>\n    <td><img src=\"apps/cmd/icon.svg\" width=\"100\"></td><td>Command Prompt<br>(cmd.exe)</td>\n  </tr>\n  <tr>\n    <td><img src=\"apps/explorer/icon.svg\" width=\"100\"></td><td>Explorer<br>(File Manager)</td>\n    <td><img src=\"apps/iexplorer/icon.svg\" width=\"100\"></td><td>Internet Explorer<br>(11)</td>\n  </tr>\n  <tr>\n    <td><img src=\"apps/access/icon.svg\" width=\"100\"></td><td>Microsoft Access<br>(2016, 2019, o365)</td>\n    <td><img src=\"apps/excel/icon.svg\" width=\"100\"></td><td>Microsoft Excel<br>(2016, 2019, o365)</td>\n  </tr>\n  <tr>\n    <td><img src=\"apps/word/icon.svg\" width=\"100\"></td><td>Microsoft Word<br>(2016, 2019, o365)</td>\n    <td><img src=\"apps/onenote/icon.svg\" width=\"100\"></td><td>Microsoft OneNote<br>(2016, 2019, o365)</td>\n  </tr>\n  <tr>\n    <td><img src=\"apps/outlook/icon.svg\" width=\"100\"></td><td>Microsoft Outlook<br>(2016, 2019, o365)</td>\n    <td><img src=\"apps/powerpoint/icon.svg\" width=\"100\"></td><td>Microsoft PowerPoint<br>(2016, 2019, o365)</td>\n  </tr>\n  <tr>\n    <td><img src=\"apps/project/icon.svg\" width=\"100\"></td><td>Microsoft Project<br>(2016, 2019, o365)</td>\n    <td><img src=\"apps/publisher/icon.svg\" width=\"100\"></td><td>Microsoft Publisher<br>(2016, 2019, o365)</td>\n  </tr>\n  <tr>\n    <td><img src=\"apps/powershell/icon.svg\" width=\"100\"></td><td>Powershell<br>(Standard, Core)</td>\n    <td><img src=\"apps/vs-enterprise-2019/icon.svg\" width=\"100\"></td><td>Visual Studio<br>(2019 - Ent|Pro|Com)</td>\n  </tr>\n  <tr>\n    <td><img src=\"icons/windows.svg\" width=\"100\"></td><td>Windows<br>(Full RDP session)</td>\n    <td>&nbsp;</td><td>&nbsp;</td>\n  </tr>\n</table>\n\n## Documentation\n\nLatest documentation available at: [https://nowsci.com/winapps/](https://nowsci.com/winapps/)\n\n"
        },
        {
          "name": "apps",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "icons",
          "type": "tree",
          "content": null
        },
        {
          "name": "install",
          "type": "tree",
          "content": null
        },
        {
          "name": "installer.sh",
          "type": "blob",
          "size": 10.078125,
          "content": "#!/usr/bin/env bash\n\nDIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" >/dev/null 2>&1 && pwd )\"\n\nMAKEDEMO=0\nUSEDEMO=0\n\n. \"${DIR}/install/inquirer.sh\"\n\nINSTALLED_EXES=()\n\nfunction waUsage() {\n\techo 'Usage:\n  ./installer.sh --user    # Install everything in ${HOME}\n  ./installer.sh --system  # Install everything in /usr'\n\texit\n}\n\nfunction waNoSudo() {\n\techo 'You are attempting to switch from a --system install to a --user install.\nPlease run \"./installer.sh --system --uninstall\" first.'\n\texit\n}\n\nfunction waInstall() {\n\t${SUDO} mkdir -p \"${SYS_PATH}/apps\"\n\t. \"${DIR}/bin/winapps\" install\n}\n\nfunction waFindInstalled() {\n\techo -n \"  Checking for installed apps in RDP machine (this may take a while)...\"\n\tif [ $USEDEMO != 1 ]; then\n\t\trm -f ${HOME}/.local/share/winapps/installed.bat\n\t\trm -f ${HOME}/.local/share/winapps/installed.tmp\n\t\trm -f ${HOME}/.local/share/winapps/installed\n\t\trm -f ${HOME}/.local/share/winapps/detected\n\t\tcp \"${DIR}/install/ExtractPrograms.ps1\" ${HOME}/.local/share/winapps/ExtractPrograms.ps1\n\t\tfor F in $(ls \"${DIR}/apps\"); do\n\t\t\t. \"${DIR}/apps/${F}/info\"\n\t\t\techo \"IF EXIST \\\"${WIN_EXECUTABLE}\\\" ECHO ${F} >> \\\\\\\\tsclient\\\\home\\\\.local\\\\share\\\\winapps\\\\installed.tmp\" >> ${HOME}/.local/share/winapps/installed.bat\n\t\tdone;\n\t\techo \"powershell.exe -ExecutionPolicy Bypass -File \\\\\\\\tsclient\\\\home\\\\.local\\\\share\\\\winapps\\\\ExtractPrograms.ps1 > \\\\\\\\tsclient\\home\\\\.local\\\\share\\\\winapps\\\\detected\" >> ${HOME}/.local/share/winapps/installed.bat\n\t\techo \"RENAME \\\\\\\\tsclient\\\\home\\\\.local\\\\share\\\\winapps\\\\installed.tmp installed\" >> ${HOME}/.local/share/winapps/installed.bat\n\t\txfreerdp /d:\"${RDP_DOMAIN}\" /u:\"${RDP_USER}\" /p:\"${RDP_PASS}\" /v:${RDP_IP} +auto-reconnect +home-drive -wallpaper /span /wm-class:\"RDPInstaller\" /app:\"C:\\Windows\\System32\\cmd.exe\" /app-icon:\"${DIR}/../icons/windows.svg\" /app-cmd:\"/C \\\\\\\\tsclient\\\\home\\\\.local\\\\share\\\\winapps\\\\installed.bat\" 1> /dev/null 2>&1 &\n\t\tCOUNT=0\n\t\twhile [ ! -f \"${HOME}/.local/share/winapps/installed\" ]; do\n\t\t\tsleep 5\n\t\t\tCOUNT=$((COUNT + 1))\n\t\t\tif (( COUNT == 15 )); then\n\t\t\t\techo \" Finished.\"\n\t\t\t\techo \"\"\n\t\t\t\techo \"The RDP connection failed to connect or run. Please confirm FreeRDP can connect with:\"\n\t\t\t\techo \"  bin/winapps check\"\n\t\t\t\techo \"\"\n\t\t\t\techo \"If it cannot connect, this is most likely due to:\"\n\t\t\t\techo \"  - You need to accept the security cert the first time you connect (with 'check')\"\n\t\t\t\techo \"  - Not enabling RDP in the Windows VM\"\n\t\t\t\techo \"  - Not being able to connect to the IP of the VM\"\n\t\t\t\techo \"  - Incorrect user credentials in winapps.conf\"\n\t\t\t\techo \"  - Not merging install/RDPApps.reg into the VM\"\n\t\t\t\texit\n\t\t\tfi\n\t\tdone\n\t\tif [ $MAKEDEMO = 1 ]; then\n\t\t\trm -rf /tmp/winapps_demo\n\t\t\tcp -a ${HOME}/.local/share/winapps /tmp/winapps_demo\n\t\t\texit\n\t\tfi\n\telse\n\t\trm -rf ${HOME}/.local/share/winapps\n\t\tcp -a /tmp/winapps_demo ${HOME}/.local/share/winapps\n\t\t#sleep 3\n\tfi\n\techo \" Finished.\"\n}\n\nfunction waConfigureApp() {\n\t\t. \"${SYS_PATH}/apps/${1}/info\"\n\t\techo -n \"  Configuring ${NAME}...\"\n\t\tif [ ${USEDEMO} != 1 ]; then\n\t\t\t${SUDO} rm -f \"${APP_PATH}/${1}.desktop\"\n\t\t\techo \"[Desktop Entry]\nName=${NAME}\nExec=${BIN_PATH}/winapps ${1} %F\nTerminal=false\nType=Application\nIcon=${SYS_PATH}/apps/${1}/icon.${2}\nStartupWMClass=${FULL_NAME}\nComment=${FULL_NAME}\nCategories=${CATEGORIES}\nMimeType=${MIME_TYPES}\n\" |${SUDO} tee \"${APP_PATH}/${1}.desktop\" > /dev/null\n\t\t\t${SUDO} rm -f \"${BIN_PATH}/${1}\"\n\t\t\techo \"#!/usr/bin/env bash\n${BIN_PATH}/winapps ${1} $@\n\" |${SUDO} tee \"${BIN_PATH}/${1}\" > /dev/null\n\t\t\t${SUDO} chmod a+x \"${BIN_PATH}/${1}\"\n\t\tfi\n\t\techo \" Finished.\"\n}\n\nfunction waConfigureApps() {\n\tAPPS=()\n\tfor F in $(cat \"${HOME}/.local/share/winapps/installed\" |sed 's/\\r/\\n/g'); do\n\t\t. \"${DIR}/apps/${F}/info\"\n\t\tAPPS+=(\"${FULL_NAME} (${F})\")\n\t\tINSTALLED_EXES+=(\"$(echo \"${WIN_EXECUTABLE##*\\\\}\" |tr '[:upper:]' '[:lower:]')\")\n\tdone\n\tIFS=$'\\n' APPS=($(sort <<<\"${APPS[*]}\"))\n\tunset IFS\n\tOPTIONS=(\"Set up all detected pre-configured applications\" \"Select which pre-configured applications to set up\" \"Do not set up any pre-configured applications\")\n\tmenuFromArr APP_INSTALL \"How would you like to handle WinApps pre-configured applications?\" \"${OPTIONS[@]}\"\n\tif [ \"${APP_INSTALL}\" = \"Select which pre-configured applications to set up\" ]; then\n\t\tcheckbox_input \"Which pre-configured apps would you like to set up?\" APPS SELECTED_APPS\n\t\techo \"\" > \"${HOME}/.local/share/winapps/installed\"\n\t\tfor F in \"${SELECTED_APPS[@]}\"; do\n\t\t\tAPP=\"${F##*(}\"\n\t\t\tAPP=\"${APP%%)}\"\n\t\t\techo \"${APP}\" >> \"${HOME}/.local/share/winapps/installed\"\n\t\tdone\n\tfi\t\n\t${SUDO} cp \"${DIR}/bin/winapps\" \"${BIN_PATH}/winapps\"\n\tCOUNT=0\n\tif [ \"${APP_INSTALL}\" != \"Do not set up any pre-configured applications\" ]; then\n\t\tfor F in $(cat \"${HOME}/.local/share/winapps/installed\" |sed 's/\\r/\\n/g'); do\n\t\t\tCOUNT=$((COUNT + 1))\n\t\t\t${SUDO} cp -r \"apps/${F}\" \"${SYS_PATH}/apps\"\n\t\t\twaConfigureApp \"${F}\" svg\n\t\tdone\n\tfi\n\trm -f \"${HOME}/.local/share/winapps/installed\"\n\trm -f \"${HOME}/.local/share/winapps/installed.bat\"\n\tif (( $COUNT == 0 )); then\n\t\techo \"  No configured applications.\"\n\tfi\n}\n\nfunction waConfigureDetectedApps() {\n\tif [ -f \"${HOME}/.local/share/winapps/detected\" ]; then\n\t\tsed -i 's/\\r//g' \"${HOME}/.local/share/winapps/detected\"\n\t\t. \"${HOME}/.local/share/winapps/detected\"\n\t\tAPPS=()\n\t\tfor I in \"${!NAMES[@]}\"; do\n\t\t\tEXE=${EXES[$I]##*\\\\}\n\t\t\tEXE_LOWER=$(echo \"${EXE}\" |tr '[:upper:]' '[:lower:]')\n\t\t\tif ( dlm=$'\\x1F' ; IFS=\"$dlm\" ; [[ \"$dlm${INSTALLED_EXES[*]}$dlm\" != *\"$dlm${EXE_LOWER}$dlm\"* ]] ) ; then\n\t\t\t\tAPPS+=(\"${NAMES[$I]} (${EXE})\")\n\t\t\tfi\n\t\tdone\n\t\tIFS=$'\\n' APPS=($(sort <<<\"${APPS[*]}\"))\n\t\tunset IFS\n\t\tOPTIONS=(\"Set up all detected applications\" \"Select which applications to set up\" \"Do not set up any applications\")\n\t\tmenuFromArr APP_INSTALL \"How would you like to handle other detected applications?\" \"${OPTIONS[@]}\"\n\t\tif [ \"${APP_INSTALL}\" = \"Select which applications to set up\" ]; then\n\t\t\tcheckbox_input \"Which other apps would you like to set up?\" APPS SELECTED_APPS\n\t\t\techo \"\" > \"${HOME}/.local/share/winapps/installed\"\n\t\t\tfor F in \"${SELECTED_APPS[@]}\"; do\n\t\t\t\tEXE=\"${F##*(}\"\n\t\t\t\tEXE=\"${EXE%%)}\"\n\t\t\t\tAPP=\"${F% (*}\"\n\t\t\t\techo \"${EXE}|${APP}\" >> \"${HOME}/.local/share/winapps/installed\"\n\t\t\tdone\n\t\telif [ \"${APP_INSTALL}\" = \"Set up all detected applications\" ]; then\n\t\t\tfor I in \"${!EXES[@]}\"; do\n\t\t\t\tEXE=${EXES[$I]##*\\\\}\n\t\t\t\techo \"${EXE}|${NAMES[$I]}\" >> \"${HOME}/.local/share/winapps/installed\"\n\t\t\tdone\n\t\tfi\n\t\tCOUNT=0\n\t\tif [ -f \"${HOME}/.local/share/winapps/installed\" ]; then\n\t\t\twhile read LINE; do\n\t\t\t\tEXE=\"${LINE%|*}\"\n\t\t\t\tNAME=\"${LINE#*|}\"\n\t\t\t\tfor I in \"${!NAMES[@]}\"; do\n\t\t\t\t\tif [ \"${NAME}\" = \"${NAMES[$I]}\" ] && [[ \"${EXES[$I]}\" == *\"\\\\${EXE}\" ]]; then\n\t\t\t\t\t\tEXE=$(echo \"${EXE}\" |tr '[:upper:]' '[:lower:]')\n\t\t\t\t\t\t${SUDO} mkdir -p \"${SYS_PATH}/apps/${EXE}\"\n\t\t\t\t\t\techo \"# GNOME shortcut name\nNAME=\\\"${NAME}\\\"\n\n# Used for descriptions and window class\nFULL_NAME=\\\"${NAME}\\\"\n\n# The executable inside windows\nWIN_EXECUTABLE=\\\"${EXES[$I]}\\\"\n\n# GNOME categories\nCATEGORIES=\\\"WinApps\\\"\n\n# GNOME mimetypes\nMIME_TYPES=\\\"\\\"\n\" > \"${SYS_PATH}/apps/${EXE}/info\"\n\t\t\t\t\t\techo \"${ICONS[$I]}\" | base64 -d > \"${SYS_PATH}/apps/${EXE}/icon.ico\"\n\t\t\t\t\t\twaConfigureApp \"${EXE}\" ico\n\t\t\t\t\t\tCOUNT=$((COUNT + 1))\n\t\t\t\t\tfi\n\t\t\t\tdone\n\t\t\tdone < \"${HOME}/.local/share/winapps/installed\"\n\t\t\trm -f \"${HOME}/.local/share/winapps/installed\"\n\t\tfi\n\t\trm -f \"${HOME}/.local/share/winapps/installed.bat\"\n\t\tif (( $COUNT == 0 )); then\n\t\t\techo \"  No configured applications.\"\n\t\tfi\n\tfi\n}\n\n\nfunction waConfigureWindows() {\n\techo -n \"  Configuring Windows...\"\n\tif [ ${USEDEMO} != 1 ]; then\n\t\t${SUDO} rm -f \"${APP_PATH}/windows.desktop\"\n\t\t${SUDO} mkdir -p \"${SYS_PATH}/icons\"\n\t\t${SUDO} cp \"${DIR}/icons/windows.svg\" \"${SYS_PATH}/icons/windows.svg\"\n\t\techo \"[Desktop Entry]\nName=Windows\nExec=${BIN_PATH}/winapps windows %F\nTerminal=false\nType=Application\nIcon=${SYS_PATH}/icons/windows.svg\nStartupWMClass=Micorosoft Windows\nComment=Micorosoft Windows\nCategories=Windows\n\" |${SUDO} tee \"${APP_PATH}/windows.desktop\" > /dev/null\n\t\t${SUDO} rm -f \"${BIN_PATH}/windows\"\n\t\techo \"#!/usr/bin/env bash\n${BIN_PATH}/winapps windows\n\" |${SUDO} tee \"/${BIN_PATH}/windows\" > /dev/null\n\t\t${SUDO} chmod a+x \"${BIN_PATH}/windows\"\n\tfi\n\techo \" Finished.\"\n}\n\nfunction waUninstallUser() {\n\trm -f \"${HOME}/.local/bin/winapps\"\n\trm -rf \"${HOME}/.local/share/winapps\"\n\tfor F in $(grep -l -d skip \"bin/winapps\" \"${HOME}/.local/share/applications/\"*); do\n\t\techo -n \"  Removing ${F}...\"\n\t\t${SUDO} rm ${F}\n\t\techo \" Finished.\"\n\tdone\n\tfor F in $(grep -l -d skip \"bin/winapps\" \"${HOME}/.local/bin/\"*); do\n\t\techo -n \"  Removing ${F}...\"\n\t\t${SUDO} rm ${F}\n\t\techo \" Finished.\"\n\tdone\n}\n\nfunction waUninstallSystem() {\n\t${SUDO} rm -f \"/usr/local/bin/winapps\"\n\t${SUDO} rm -rf \"/usr/local/share/winapps\"\n\tfor F in $(grep -l -d skip \"bin/winapps\" \"/usr/share/applications/\"*); do\n\t\tif [ -z \"${SUDO}\" ]; then\n\t\t\twaNoSudo\n\t\tfi\n\t\techo -n \"  Removing ${F}...\"\n\t\t${SUDO} rm ${F}\n\t\techo \" Finished.\"\n\tdone\n\tfor F in $(grep -l -d skip \"bin/winapps\" \"/usr/local/bin/\"*); do\n\t\tif [ -z \"${SUDO}\" ]; then\n\t\t\twaNoSudo\n\t\tfi\n\t\techo -n \"  Removing ${F}...\"\n\t\t${SUDO} rm ${F}\n\t\techo \" Finished.\"\n\tdone\n}\n\nif [ -z \"${1}\" ]; then\n\tOPTIONS=(User System)\n\tmenuFromArr INSTALL_TYPE \"Would you like to install for the current user or the whole system?\" \"${OPTIONS[@]}\"\nelif [ \"${1}\" = '--user' ]; then\n\tINSTALL_TYPE='User'\nelif [ \"${1}\" = '--system' ]; then\n\tINSTALL_TYPE='System'\nelse\n\twaUsage\nfi\n\nif [ \"${INSTALL_TYPE}\" = 'User' ]; then\n\tSUDO=\"\"\n\tBIN_PATH=\"${HOME}/.local/bin\"\n\tAPP_PATH=\"${HOME}/.local/share/applications\"\n\tSYS_PATH=\"${HOME}/.local/share/winapps\"\n\tif [ -n \"${2}\" ]; then\n\t\tif [ \"${2}\" = '--uninstall' ]; then\n\t\t\t# Uninstall\n\t\t\techo \"Uninstalling...\"\n\t\t\twaUninstallUser\n\t\t\texit\n\t\telse\n\t\t\tusage\n\t\tfi\n\tfi\nelif [ \"${INSTALL_TYPE}\" = 'System' ]; then\n\tSUDO=\"sudo\"\n\tsudo ls > /dev/null\n\tBIN_PATH=\"/usr/local/bin\"\n\tAPP_PATH=\"/usr/share/applications\"\n\tSYS_PATH=\"/usr/local/share/winapps\"\n\tif [ -n \"${2}\" ]; then\n\t\tif [ \"${2}\" = '--uninstall' ]; then\n\t\t\t# Uninstall\n\t\t\techo \"Uninstalling...\"\n\t\t\twaUninstallSystem\n\t\t\texit\n\t\telse\n\t\t\tusage\n\t\tfi\n\tfi\nfi\n\necho \"Removing any old configurations...\"\nwaUninstallUser\nwaUninstallSystem\n\necho \"Installing...\"\n\n# Inititialize\nwaInstall\n\n# Check for installed apps\nwaFindInstalled\n\n# Install windows\nwaConfigureWindows\n\n# Configure apps\nwaConfigureApps\nwaConfigureDetectedApps\n\necho \"Installation complete.\""
        },
        {
          "name": "kvm",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}